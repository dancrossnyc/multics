/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-07-09,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Changed references of BOS CPU to Bootload CPU.
                                                   END HISTORY COMMENTS */


azm_verify_dump_ams_: proc (P_amu_info_ptr, do_sdws, do_ptws, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Routine to verify that the contents of the Associative Memories  stored
   at the time of the dump match the appropriate entries in the dseg of
   the process defined by dump.dbr.
   This code was taken from ol_dumps display_am_$validate_am_btld and modified
   to work with analyze_multics (azm).
   Sept 1982 by Rich Coppola.

   Modified July 84 by B. Braun to add knowledge of unpaged_page_tables.
   Modified Sept 84 by B. Braun to add knowledge of int_unpaged_page_tables.
*/

dcl  P_amu_info_ptr ptr;


dcl  (do_sdws, do_ptws) bit (1);
dcl  P_code fixed bin (35);


/* Automatic */

dcl  (i, j, idx, process_idx) fixed bin;
dcl  af_sw bit (1) init ("0"b);			/* "1"b => used as an AF */
dcl  nregs fixed bin;
dcl  dump_dbr fixed bin (24);
dcl  code fixed bin (35);
dcl  DPS8xxM bit (1);
dcl  RETURN_VAL bit (1) init ("0"b);
dcl  (found_mismatch_sdw, found_mismatch_ptw) bit (1) init ("0"b);
dcl  (found_dup_entry_sdw, found_dup_entry_ptw) bit (1) init ("0"b);
dcl  changed_process_idx bit (1) init ("0"b);
dcl  tsptw_mask bit (36) init ("777777000100"b3);
dcl  tdsdw_mask bit (72) init ("777777777770777777777777"b3);
dcl  dup_entry (0:63) bit (1) unal;
dcl  (sdw_regs_ptr, sdw_ptrs_ptr, ptw_regs_ptr, ptw_ptrs_ptr) ptr;
dcl  (reg_ptr, ptr_ptr, temp_ptr) ptr;
dcl  (tdsegp, tasdwp, taptwp, sptp, dsegp) ptr;
dcl  flag_string char (7);
dcl  usage_string char (8);
dcl  1 hard_ptr_space like hardcore_cur;

/* Based */

dcl  last_three_sets bit (48 * 36) based;
dcl  1 sdw_regs (0:63) aligned like amsdwreg based (sdw_regs_ptr);
dcl  1 sdw_ptrs (0:63) aligned like amsdwptr based (sdw_ptrs_ptr);
dcl  1 ptw_regs (0:63) aligned like amptwreg based (ptw_regs_ptr);
dcl  1 ptw_ptrs (0:63) aligned like amptwptr based (ptw_ptrs_ptr);
dcl  tdsdw bit (72) based (tdsegp);
dcl  tasdw bit (72) based (tasdwp);
dcl  tsptw bit (36) based (sptp);
dcl  taptw bit (36) based (taptwp);

/* Static */

/* External */

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  amu_et_$null_sstp fixed bin(35) ext static;
dcl  amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin);
dcl  amu_$fdump_mpt_revert_idx entry (ptr);
dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  amu_$return_val_idx_from_dbr entry (ptr, fixed bin (24)) returns (fixed bin);
dcl  amu_$do_translation_hunt_ptr entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_et_$npdx_dbr fixed bin (35) external static;

dcl  any_other condition;
dcl  (addr, addrel, baseptr, bin, 
      binary, divide, fixed, null,
      pointer, ptr, substr)		builtin;
%page;

    go to COMMON;

azm_verify_dump_ams_$af: entry (P_amu_info_ptr, do_sdws, do_ptws, P_code) returns (bit (1));

    af_sw = "1"b;

COMMON:	

    on condition (any_other) begin;
       if changed_process_idx then call amu_$fdump_mpt_revert_idx (amu_info_ptr);
       changed_process_idx = "0"b;
       go to done;
       end;

    call set_up;
    if code ^= 0 then go to done;

    if do_sdws then do;				/* verify the SDWAM */
       call verify_am_sdw;			/* check for duplicate entries */
       do idx = 0 to nregs;			/* cycle thru ass mem */
	if sdw_ptrs (idx).valid then do;	/* only for valid entries */
	   tdsegp = addrel (dsegp, (bin (sdw_ptrs (idx).pointer, 15) * 2));
	   tasdwp = addr (sdw_regs (idx));
	   if (tdsdw & tdsdw_mask) ^= tasdw then do;
	      found_mismatch_sdw = "1"b;
	      if af_sw = "0"b then do;
	         call ioa_ ("^/Mis-Match between SDWAM and dseg on Bootload CPU;^/");
		call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");
		reg_ptr = addr (sdw_regs (idx));
		ptr_ptr = addr (sdw_ptrs (idx));
		call display_mismatch_sdw (reg_ptr, ptr_ptr);
		call display_dseg_entry (tdsegp);
		end;
	       end;
	    end;
	 end;
        end;

check_ptws: 

    if do_ptws then do;
       call verify_am_ptw;			/* check for duplicate entries */

       do idx = 0 to nregs;
	if ptw_ptrs (idx).valid then do;
	   sdwp = addr (dsegp -> sdwa (bin (ptw_ptrs (idx).pointer, 15)));
	   call get_ptp(sdwp, upt_ptr, sstp, ptp);
	   sptp = addrel (ptp, (divide (binary (ptw_ptrs (idx).pageno, 12), 16, 12, 0)));
	   taptwp = addr (ptw_regs (idx));
	   if (tsptw & tsptw_mask) ^= taptw then do;
					/* found a bad one */
	       found_mismatch_ptw = "1"b;
	       if af_sw = "0"b then do;
		call ioa_ ("^/Mis-Match between PTWAM and page table on Bootload CPU;^/");
		call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE");
		reg_ptr = addr (ptw_regs (idx));
		ptr_ptr = addr (ptw_ptrs (idx));
		call display_mismatch_ptw (reg_ptr, ptr_ptr);
		call display_sst_entry (sptp);
		end;
	       end;
	    end;
	 end;
        end;

done:

    if (found_mismatch_sdw | found_mismatch_ptw | found_dup_entry_sdw | found_dup_entry_ptw) then do;
       RETURN_VAL = "1"b;
       go to RET;
       end;

    if ^af_sw then
       call ioa_ ("No mis-matches or duplicate entries found in^[ SDWAM^]^[ or^]^[ PTWAM^].", do_sdws,
	(do_sdws & do_ptws), do_ptws);
       RETURN_VAL = "0"b;
	
RET:
       if changed_process_idx then call amu_$fdump_mpt_revert_idx (amu_info_ptr);
       P_code = code;
       if af_sw then return (RETURN_VAL);
       return;					/* logical end */

%page;

display_dseg_entry:
     proc (dseg_entp);
dcl  dseg_entp ptr;
dcl  flag_string char (7);
dcl  1 dseg_ent based (dseg_entp),
       (
       2 addr bit (24),
       2 ring1 bit (3),
       2 ring2 bit (3),
       2 ring3 bit (3),
       2 pad1 bit (4),
       2 bounds bit (14),
       2 rd bit (1),
       2 ex bit (1),
       2 wrt bit (1),
       2 priv bit (1),
       2 unp bit (1),
       2 ebs bit (1),
       2 cache bit (1),
       2 cl bit (14)
       ) unal;


	call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]", flag_string, (0),
						/* generate the REWPUGC string */
	     dseg_ent.rd, dseg_ent.ex, dseg_ent.wrt, dseg_ent.priv, dseg_ent.unp, dseg_ent.ebs, dseg_ent.cache);

	call ioa_ ("^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^]^-(dseg entry)", binary (dseg_ent.addr, 24),
	     dseg_ent.ring1, dseg_ent.ring2, dseg_ent.ring3, binary ((dseg_ent.bounds || "0000"b), 18), flag_string,
	     ((^dseg_ent.ebs) & dseg_ent.ex), binary (dseg_ent.cl, 14));
	return;
     end display_dseg_entry;

%page;
display_mismatch_ptw:
     proc (a_ptw_reg_ptr, a_ptw_ptr_ptr);
dcl  (a_ptw_reg_ptr, a_ptw_ptr_ptr) ptr;
dcl  1 a_ptw_reg aligned like amptwreg based (a_ptw_reg_ptr);
dcl  1 a_ptw_ptr aligned like amptwptr based (a_ptw_ptr_ptr);


	if ^DPS8xxM then
	     call ioa_$rsnnl ("^6x^2d", usage_string, (0), binary (a_ptw_ptr.usage, 4));

	else call ioa_$rsnnl ("^2x^6b", usage_string, (0), a_ptw_ptr.usage);

	call ioa_ ("^8o^2x^[yes^;no ^]^2x^[F^;E^]^2x^8a ^5o ^4o", binary ((a_ptw_reg.addr || "000000"b), 24),
	     a_ptw_reg.modif, a_ptw_ptr.valid, usage_string, binary (a_ptw_ptr.pointer, 15),
	     divide (binary (a_ptw_ptr.pageno, 12), 16, 12, 0));
	return;
     end display_mismatch_ptw;

%page;
display_mismatch_sdw:
     proc (a_sdw_reg_ptr, a_sdw_ptr_ptr);
dcl  (a_sdw_reg_ptr, a_sdw_ptr_ptr) ptr;
dcl  1 a_sdw_reg aligned like amsdwreg based (a_sdw_reg_ptr);
dcl  1 a_sdw_ptr aligned like amsdwptr based (a_sdw_ptr_ptr);



	call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]", flag_string, (0),
						/* generate the REWPUGC string */
	     a_sdw_reg.read, a_sdw_reg.execute, a_sdw_reg.write, a_sdw_reg.privileged, a_sdw_reg.unpaged,
	     a_sdw_reg.entry_bound_sw, a_sdw_reg.cache);

	if ^DPS8xxM then
	     call ioa_$rsnnl ("^6x^2d", usage_string, (0), binary (a_sdw_ptr.usage, 4));

	else call ioa_$rsnnl ("^2x^6b", usage_string, (0), a_sdw_ptr.usage);

	call ioa_ ("^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^;^s^4x-^]^2x^[F^;E^]^2x^8a ^5o",
	     binary (a_sdw_reg.addr, 24), a_sdw_reg.r1, a_sdw_reg.r2, a_sdw_reg.r3,
	     binary ((a_sdw_reg.bound || "0000"b), 18), flag_string, ((^a_sdw_reg.entry_bound_sw) & a_sdw_reg.execute),
						/* skip next if there is none */
	     binary (a_sdw_reg.cl, 14), a_sdw_ptr.valid, usage_string, binary (a_sdw_ptr.pointer, 15));
	return;
     end display_mismatch_sdw;

%page;
display_sst_entry:
     proc (a_ptp);

dcl  a_ptp ptr;
dcl  1 page_wd based (a_ptp),
       (
       2 addr bit (18),
       2 padd1 bit (11),
       2 modifd bit (1),
       2 padd2 bit (6) unal
       );

	call ioa_ ("^8o^2x^[yes^;no ^]^2x(page table in memory)", binary ((page_wd.addr || "000000"b), 24),
	     page_wd.modifd);

	return;
     end display_sst_entry;

%page;
get_ptp:  proc(sdwp, upt_ptr, sstp, ptp);

/* This procedure determines the page table pointer. */

/* parameters */

dcl ptp ptr;
dcl sdwp ptr;
dcl sstp ptr;
dcl upt_ptr ptr;

/* automatic */

dcl relative_offset fixed bin(26);
dcl sdw_add fixed bin(26);

    sdw_add = fixed(sdwp->sdw.add,26);

    if upt_ptr = null() then
       ptp = ptr (sstp, fixed (sdw.add, 24) - fixed (sst.ptwbase, 18));

    else if (sdw_add > upt.upt_absloc & sdw_add < upt.upt_last_loc) then do;
       /* found in unpaged_page_table */
       relative_offset = sdw_add - upt.upt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;

    else if (sdw_add > upt.iupt_absloc & sdw_add < upt.iupt_last_loc) then do;
       /* found in int_unpaged_page_table */
       relative_offset = sdw_add - upt.iupt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;

    else do;
       /* found in sst_seg */
       relative_offset = sdw_add - upt.sst_absloc;
       ptp = addrel(sstp, relative_offset);        
       end;

end get_ptp;
%page;
set_up:
     proc;

	amu_info_ptr = P_amu_info_ptr;
	P_code, code = 0;
	process_idx = -1;
	dumpptr = fdump_info.dump_seg_ptr (0);
	dump_dbr = fixed (substr (dump.dbr, 1, 24), 24);
	ptw_regs_ptr = addr (dump.amptwregs);
	ptw_ptrs_ptr = addr (dump.amptwptrs);
	sdw_regs_ptr = addr (dump.amsdwregs);
	sdw_ptrs_ptr = addr (dump.amsdwptrs);
	process_idx = amu_$return_val_idx_from_dbr (amu_info_ptr, dump_dbr);
	if process_idx = -1 then do;
	     code = amu_et_$npdx_dbr;		/* cant set process index with this dbr */
	     return;
	     end;

	call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, process_idx);
	changed_process_idx = "1"b;			/* remember */
	hardcore_cur_ptr = addr (hard_ptr_space);	/* get pointers to interesting hc */
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	sstp = hardcore_cur.sstp;
	upt_ptr = hardcore_cur.uptp;

	call amu_$do_translation_hunt_ptr (amu_info_ptr, pointer (baseptr (hardcore_info.dseg), 0), dsegp, code);
						/* get a pointer to the DSEG */
	if code ^= 0 then do;
	   if ^af_sw then
	     call ioa_ ("Cannot get ptr to dseg from dbr ^8o.", dump_dbr);
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     P_code = code;
	     return;
	     end;

	temp_ptr = addrel (ptw_regs_ptr, 16);		/* base to 2'nd set of regs */
	if temp_ptr -> last_three_sets = "0"b then do;	/* if second set is zero then */
	     nregs = 15;				/* AMs are from a l68 */
	     DPS8xxM = "0"b;
	     end;
	else do;					/* No, they are from a DPS8M */
	     nregs = 63;
	     DPS8xxM = "1"b;
	     end;
	return;
     end set_up;

%page;
verify_am_ptw:
     proc;

	if sstp = null () then do;
	   if ^af_sw then
	     call ioa_ ("No sst, cannot verify PTWAM.");
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     code = amu_et_$null_sstp;
	     return;
	     end;

	dup_entry (*) = "0"b;

	do i = 0 to nregs - 1;
	     do j = i + 1 to nregs;
		if (ptw_ptrs (i).valid & ptw_ptrs (j).valid) then do;
		     if ptw_regs (i).addr = ptw_regs (j).addr then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     else if ptw_ptrs (i).usage = ptw_ptrs (j).usage then do;
			if ^DPS8xxM then do;	/* if its not a dps8 */
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			     end;
			end;

		     else if (ptw_ptrs (i).pointer = ptw_ptrs (j).pointer)
			     & (ptw_ptrs (i).pageno = ptw_ptrs (j).pageno) then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     if (dup_entry (i) & dup_entry (j)) then do;
			if ptw_regs (i).addr = ptw_regs (j).addr then
			     if ptw_ptrs (i).pointer ^= ptw_ptrs (j).pointer then do;
				if DPS8xxM then go to cancel_dup_ptw;
				if ptw_ptrs (i).usage ^= ptw_ptrs (j).usage then do;
cancel_dup_ptw:
				     dup_entry (i), dup_entry (j) = "0"b;
				     end;
				end;
			end;



		     if (dup_entry (i) & dup_entry (j)) then do;
			found_dup_entry_ptw = "1"b;
			if af_sw then return;
			call ioa_ ("^/Possible duplicate entry in PTW associative memory for CPU;^/");
			call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE");
			reg_ptr = addr (ptw_regs (i));
			ptr_ptr = addr (ptw_ptrs (i));

			call display_mismatch_ptw (reg_ptr, ptr_ptr);
			reg_ptr = addr (ptw_regs (j));
			ptr_ptr = addr (ptw_ptrs (j));
			call display_mismatch_ptw (reg_ptr, ptr_ptr);
			end;
		     end;
	     end;
	end;
	return;
     end verify_am_ptw;

%page;
verify_am_sdw:
     proc;


	dup_entry (*) = "0"b;
	found_dup_entry_sdw = "0"b;
	do i = 0 to nregs - 1;
	     do j = i + 1 to nregs;
		if (sdw_ptrs (i).valid & sdw_ptrs (j).valid) then do;

		     if sdw_regs (i).addr = sdw_regs (j).addr then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     else if sdw_ptrs (i).pointer = sdw_ptrs (j).pointer then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
		end;

		     else if sdw_ptrs (i).usage = sdw_ptrs (j).usage then do;
			if ^DPS8xxM then do;	/* if its not a dps8 */
			     dup_entry (i) = "1"b;	/* for dps8 it is LRU not usage ctr */
			     dup_entry (j) = "1"b;
			     end;
			end;


		     if (dup_entry (i) & dup_entry (j)) then do;
			if sdw_regs (i).addr = sdw_regs (j).addr then
			     if sdw_regs (i).bound = sdw_regs (j).bound then
				if (sdw_regs (i).r2 & sdw_regs (i).r3) ^= (sdw_regs (j).r2 & sdw_regs (j).r3) then
				     if sdw_ptrs (i).pointer ^= sdw_ptrs (j).pointer then do;
					if DPS8xxM then go to cancel_dup_sdw;
					if sdw_ptrs (i).usage ^= sdw_ptrs (j).usage then do;
cancel_dup_sdw:
					     dup_entry (i), dup_entry (j) = "0"b;
					     end;
					end;
			end;


		     if (dup_entry (i) & dup_entry (j)) then do;
			found_dup_entry_sdw = "1"b;
			if af_sw then return;
			call ioa_ ("^/Possible duplicate entry in SDW associative memory for CPU;^/");
			call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");
			reg_ptr = addr (sdw_regs (i));
			ptr_ptr = addr (sdw_ptrs (i));
			call display_mismatch_sdw (reg_ptr, ptr_ptr);
			reg_ptr = addr (sdw_regs (j));
			ptr_ptr = addr (sdw_ptrs (j));
			call display_mismatch_sdw (reg_ptr, ptr_ptr);
			end;
		     end;
	     end;
	end;
	return;
     end verify_am_sdw;
%page;
%include amu_fdump_info;
%page;
%include amu_hardcore_info;
%page;
%include amu_info;
%page;
%include assoc_mem;
%page;
%include aste;
%page;
%include bos_dump;
%page;
%include ptw;
%page;
%include sdw;
%page;
%include sst;
%page;
%include unpaged_page_tables;

     end azm_verify_dump_ams_;
