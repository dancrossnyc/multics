/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-11-02,Farley), approve(87-07-09,MCR7746),
     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
     Added a check for a valid mc.pr6 prior to calling azm_stack_trace_.
  2) change(87-04-14,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
     Check for valid message in the crash message field.
  3) change(87-09-09,Parisek), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
     Change references of BOS to Bootload or BCE.
                                                   END HISTORY COMMENTS */


azm_why_: proc;
	return;

          /*****************************************************************************/
          /*                                                                           */
	/* This was originaly written by R. A. Fawcett in the MR9 time frame         */
	/* rewritten by same for MR11 in Sept of 1984 (but only a small improvment). */
	/* entries azm_why_$print_locks, azm_why_$who and azm_why_$mcs	       */
	/* were also added.						       */
	/* Modified Oct 8, 1984 so that mc_area is allocated and then freed.         */
	/* Modified Jan 21, 1985 by B. Braun to use flagbox.incl.pl1 not	       */
	/*       fgbx.incl.pl1.(phx18002)				       */
	/* Modified Jan 21, 1985 by BLB change calling sequence to azm_stack_trace_  */
	/* Modified March 1986 by P. Leatherman to print the crash message if present*/
	/*                                                                           */
	/*****************************************************************************/

dcl  P_sci_ptr ptr;
dcl  P_amu_info_ptr ptr;
dcl  P_code fixed bin (35);

/* Automatic */

dcl  an_entry_found_sw bit (1);
dcl  bad_guy_known bit (1);
dcl  bootload_cpu_tag fixed bin (35);
dcl  bootload_cpu_ptr ptr;
dcl  could_not_set_lock_sw bit (1);
dcl  code fixed bin (35);
dcl  fault_vnum fixed bin;
dcl  fim_num fixed bin (17);
dcl  fim_type_fault bit (1);
dcl  flag_box_area (100) fixed bin (35);
dcl  inter_code fixed bin (35);
dcl  1 hard_ptrs like hardcore_cur;
dcl  lock_apte_offset fixed bin (18);
dcl  lock_index fixed bin (17);
dcl  lock_word (0:6) bit (36);
dcl  look_for_syserr_sw bit (1);
dcl  loop_exit bit (1);
dcl  1 mc_info (6),
       2 ptr ptr,
       2 name char (32);
dcl  mc_info_idx fixed bin;
dcl  mc_found_frame_sw bit (1);	
dcl  mc_name char (32);
dcl  no_print_process bit (1);
dcl  pointer_index fixed bin;
dcl  prds_num fixed bin;
dcl  ring_zero_stack bit (1);
dcl  sci_ptr ptr;
dcl  1 scu_inst,
       2 address fixed bin unal,
       2 pad bit (18) unal;
dcl  stack_base_segno fixed bin;
dcl  stack_idx fixed bin;
dcl  stack_temp_ptrs (0:7) ptr;
dcl  t_pr_name char (4);
dcl  temp_indx fixed bin;
dcl  temp_mcp ptr;
dcl  temp_name char (32) aligned;
dcl  temp_num fixed bin;
dcl  temp_stack_ptr ptr;
dcl  temp_word bit (36) aligned;
dcl  trouble_pending fixed bin (35);
dcl  trouble_pid fixed bin (35);
dcl  words_requested fixed bin (18);

dcl (trouble_ptr,
     trouble_pid_ptr,
     lock_ptr,
     check_entry_ptr,
     stack_ptr,
     pds_signal_ptr,
     pds_pgflt_ptr,
     pds_fim_ptr,
     prds_sys_troub_ptr,
     prds_int_ptr,
     prds_fim_ptr,
     real_mcp,
     temp_ptr)			ptr;

/* Based */

dcl  based_word bit(36) aligned based(temp_ptr);
dcl  1 mc_area like mc based (mcp);
dcl  prs_size (0:7) ptr based;
dcl  1 regs_size like mc.regs based;

/* Static */

dcl  PDS_FIM fixed init (1) static options (constant);
dcl  PRDS_FIM fixed init (2) static options (constant);
dcl  PDS_SIG fixed init (3) static options (constant);
dcl  PRDS_SYS fixed init (4) static options (constant);
dcl  PDS_PGF fixed init (5) static options (constant);
dcl  PRDS_INT fixed init (6) static options (constant);
dcl  cpu_names (0:7) char (1) static options (constant) init (
"a", "b", "c", "d", "e", "f", "g", "h");
dcl  lock_seg (0:6) char (32) int static options (constant) init (
"tc_data", "sst_seg", "sst_seg", "scs", "tty_buf", "tty_buf","disk_seg");
dcl  lock_symbol (0:6) char (32) int static options (constant) init (
"apt_lock", "ptl", "astl", "connect_lock", "slock", "timer_lock","lock");
dcl  disk_seg_lock_index fixed bin int static options (constant) init (6);
dcl  ptl_lock_index fixed bin (17) int static options (constant) init (1);
dcl  scu_inst_word fixed bin (18) int static options (constant) init (120);

/* Entries */

dcl  amu_$definition_offset entry (ptr, char (*), char (*), fixed bin (35)) returns (fixed bin (18)),
     amu_$definition_set_from entry (ptr, char (*), ptr, fixed bin (35)),
     amu_$definition_set_prn entry (ptr, char (*), fixed bin, fixed bin (18), fixed bin (35)),
     amu_$definition_get_prn entry (ptr, char (*), ptr, fixed bin (35)),
     amu_$do_translation_hunt_ptr entry (ptr, ptr, ptr, fixed bin (35)),
     amu_$error_for_caller entry () options (variable),
     amu_$fdump_mpt_current_process entry (ptr),
     amu_$fdump_mpt_change_idx entry (ptr, fixed bin),
     amu_$fdump_mpt_revert_idx entry (ptr),
     amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin),
     amu_$return_val_idx_from_dbr entry (ptr, fixed bin (24)) returns (fixed bin),
     amu_$tc_data_print_this_apte entry (ptr, fixed bin (18), fixed bin (35));
	

dcl  azm_verify_dump_ams_$af entry (ptr, bit (1), bit (1), fixed bin (35)) returns (bit (1));
dcl  azm_stack_trace_ entry (char(*), ptr, ptr, ptr, bit (1), bit (1), bit (1), bit (1), fixed bin, fixed bin (35));
dcl  azm_stack_trace_$check_for_entry entry (char(*), ptr, ptr, ptr, ptr, fixed bin (35));
dcl  azm_stack_trace_$check_for_mc entry (char(*), ptr, ptr, ptr, bit (1), fixed bin (35));
dcl  azm_stack_trace_$check_for_syserr entry (char(*), ptr, ptr, ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  azm_display_mc_ entry (ptr, ptr, ptr, ptr, fixed bin (35));
dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$slt_search_seg_num entry (ptr, ptr, char (32) aligned, fixed bin, fixed bin (35));
dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  (
     amu_et_$not_implemented,
     amu_et_$seg_not_dumped,
     amu_et_$entry_not_found,
     amu_et_$no_valid_stacks,
     error_table_$action_not_performed,
     error_table_$noentry
     ) fixed bin (35) ext static;

dcl  (addr, baseno, baseptr, hbound, lbound, pointer,
      index, null, fixed, rel, rtrim,
      size, substr, unspec)		builtin;

dcl (any_other, cleanup)		condition;
	

%page;

azm_why_$find_bad_guy:
     entry (P_sci_ptr, P_amu_info_ptr, P_code);

	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	if (amu_info.type ^= FDUMP_TYPE) & (amu_info.type ^= FDUMP_PROCESS_TYPE) then do;
	     P_code = amu_et_$not_implemented;
	     return;
	     end;
	P_code, code = 0;
	loop_exit = "0"b;
	mcp = null();
	on cleanup begin;
	   if mcp ^= null() then free mc_area;
	   end;
	could_not_set_lock_sw, bad_guy_known = "0"b;
	temp_indx = process_idx;
	call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, temp_indx);
						/* remember where */
	hardcore_cur_ptr = addr (hard_ptrs);
	temp_name = "flagbox";
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp, temp_name, temp_num, code);
	if code ^= 0 then do;
	     call ioa_ ("Cannot get flagbox.");
	     goto flagbox_done;
	     end;
	fgbxp = addr (flag_box_area);
	words_requested = hbound (flag_box_area, 1);
	call amu_$do_translation (amu_info_ptr, temp_num, fgbxp, 0, words_requested, code);
	if code ^= 0 then do;
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     goto flagbox_done;
	     end;
	if index (fgbx.message, " ") = 0 then call ioa_ ("^/Crash Message:^/^5t^a^/", fgbx.message);
flagbox_done:
	if azm_verify_dump_ams_$af (amu_info_ptr, "1"b, "1"b, code) then do;
	     if code ^= 0 then go to NEXT;
	     call ioa_ ("Inconsistency found in Dump Associative Memories.");
	     bootload_cpu_ptr = amu_$definition_ptr (amu_info_ptr, "scs", "bos_processor_tag", code);
	     if code ^= 0 then do;
		call amu_$fdump_mpt_revert_idx (amu_info_ptr);
		P_code = code;
		return;
		end;
	     words_requested = 1;	
	     call amu_$do_translation (amu_info_ptr, fixed (baseno (bootload_cpu_ptr), 17), addr (bootload_cpu_tag),
		fixed (rel (bootload_cpu_ptr), 18), words_requested, code);
	     if code ^= 0 then do;
		call amu_$fdump_mpt_revert_idx (amu_info_ptr);
		P_code = code;
		return;
		end;
	     call ioa_ ("^-Bootload cpu is ^a", cpu_names (bootload_cpu_tag));
	     end;
NEXT:
	an_entry_found_sw,mc_found_frame_sw = "0"b;
	temp_name = "fim";
	call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp, temp_name, fim_num, code);
	allocate mc_area set (mcp);
	scup = addr (mc.scu);
	code = 0;					/*  First is the bad guy in scs$trouble_processid ?? */
	call who_is_it;
	if loop_exit then bad_guy_known = "1"b;		/* Check for fim_type if valid trouble pending */
	trouble_ptr = amu_$definition_ptr (amu_info_ptr, "scs", "sys_trouble_pending", code);
	if code ^= 0 then do;
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     P_code = code;
	     goto common_return;
	     end;
          words_requested = 1;
	call amu_$do_translation (amu_info_ptr, fixed (baseno (trouble_ptr), 17), addr (trouble_pending),
	     fixed (rel (trouble_ptr), 18), words_requested, code);
	if code ^= 0 then do;
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     P_code = code;
	     goto common_return;
	     end;
	if trouble_pending >= lbound (sys_trouble_reason, 1) & trouble_pending <= hbound (sys_trouble_reason, 1)
	then do;
	     fim_type_fault = "1"b;
	     call mc_info_init;
	     words_requested = size (mc);
	     call amu_$do_translation (amu_info_ptr, fixed (baseno (pds_fim_ptr), 17), mcp,
		fixed (rel (pds_fim_ptr), 18), words_requested, code);
	     if bad_guy_known then goto trouble_type (trouble_pending);
	     else do;
/* This may be a very early dump */
	        mc_info_idx = PDS_FIM;
	        real_mcp = mc_info (mc_info_idx).ptr;
	        mc_name = mc_info (mc_info_idx).name;
	        goto call_fim_type;
	        end;
	     end;
	if ^bad_guy_known then goto could_not_find;
	goto bad_guy_non_fim;

trouble_type (-7):					/* Execute fault by operator */

          real_mcp = mc_info(PRDS_SYS).ptr;
	mc_name = mc_info (PRDS_SYS).name;
	call amu_$do_translation (amu_info_ptr, fixed (baseno (real_mcp), 17), mcp, fixed (rel (real_mcp), 18), 48,
	     code);          
	if code = 0 then do;
	   temp_word = "0"b;
	   arg_bits_ptr = addr (temp_word);
	   arg_bits_def.ppr = "1"b;
	   call azm_display_mc_ (sci_ptr, amu_info_ptr, mcp, arg_bits_ptr, code);
	   end;
	else call ioa_ ("^a", sys_trouble_reason (trouble_pending));
	code = 0;
	call list_locks ("1"b);
	call check_mcs;
	goto common_return;


trouble_type (-4):					/* "Fault/Interrupt with PLT set" */
	call print_the_lock (ptl_lock_index);
	pointer_index = 2;
	goto common_other;

trouble_type (-1):					/* "Page fault while on prds"  */
						/* page_fault uses the ap pointer to look at machine conditions */
	pointer_index = 0;
	goto common_other;
trouble_type (-2):
trouble_type (-3):
trouble_type (-5):
trouble_type (-6):
trouble_type (-8):
trouble_type (-9):
trouble_type (-10):
trouble_type (-11):					/* just incase others are added */
trouble_type (-12):
trouble_type (-13):
trouble_type (-14):
trouble_type (-15):					/* All others */
	pointer_index = 2;
common_other:
	temp_name = "fault_vector";
	call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp, temp_name, fault_vnum, code);
	if code ^= 0 then do;
	     P_code = code;
	     goto could_not_find;
	     end;
	temp_ptr = addr (scu_inst);
	words_requested = 1;
	call amu_$do_translation (amu_info_ptr, fault_vnum, temp_ptr, scu_inst_word, words_requested, code);
	if code ^= 0 then do;
	     P_code = code;
	     goto could_not_find;
	     end;
	temp_num = scu_inst.address;
	words_requested = size (scu_inst) + 1;
	call amu_$do_translation (amu_info_ptr, fault_vnum, addr (temp_ptr), (temp_num), words_requested, code);
	if code ^= 0 then do;
	     P_code = code;
	     goto could_not_find;
	     end;
	temp_mcp = pointer (temp_ptr,0);
	temp_num = size(prs_size) + size(regs_size);
	temp_num = fixed (rel (temp_ptr), 17) - temp_num;
	temp_num = temp_num + (pointer_index * 2);
	words_requested = 2;
	call amu_$do_translation (amu_info_ptr, fixed (baseno (temp_ptr), 17), addr (temp_mcp), (temp_num), words_requested, code);
	if code ^= 0 then goto could_not_find;
	do mc_info_idx = 1 to 6;
	     if mc_info (mc_info_idx).ptr = temp_mcp then do;
		real_mcp = mc_info (mc_info_idx).ptr;
		mc_name = mc_info (mc_info_idx).name;
		goto call_fim_type;
		end;
	end;


could_not_find:					/* could not find the bad guy */
	call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	call ioa_ ("Could not find the failing process.");

	if fgbx.bce_entry ^= 0 then call ioa_ ("Manual return to BCE ?");

	if ^could_not_set_lock_sw then call list_locks ("1"b);
common_return:
	if P_code = error_table_$action_not_performed then P_code = 0;
	if ^(an_entry_found_sw | mc_found_frame_sw) then
	   P_code = error_table_$action_not_performed;
	if ^no_print_process then call amu_$fdump_mpt_current_process (amu_info_ptr);
          if mcp ^= null() then free mc_area;
	return;

call_fim_type:
	call ioa_ ("^a", sys_trouble_reason (trouble_pending));
	words_requested = size (mc);
	call amu_$do_translation (amu_info_ptr, fixed (baseno (real_mcp), 17), mcp, fixed (rel (real_mcp), 18), words_requested,
	     code);
	if code ^= 0 then goto could_not_find;
	if ^bad_guy_known  then do;
	   do mc_info_idx = 1 to 6 while (^mc_found_frame_sw);
	      if unspec (scu) = "0"b then do;
	         real_mcp = mc_info (mc_info_idx).ptr;
	         mc_name = mc_info (mc_info_idx).name;
	         call amu_$do_translation (amu_info_ptr,
		  fixed (baseno (real_mcp), 17),
		  mcp, fixed (rel (real_mcp), 18), 48,code);	       
	         end;
	      else do;
	         mc_found_frame_sw = "1"b;
	         call ioa_ ("Will use machine conditions at ^a",mc_name);
	         end;
	      end;
	   end;
	else do;
	   if trouble_pending = trbl_prds_pf then do;
	      if scu.fi_num ^= "10001"b | scu.fi_flag ^= "1"b then
	         goto bad_guy_non_fim;
	      if fixed (baseno (mc.prs (6)), 17) ^=
	         hardcore_info.prds then goto bad_guy_non_fim;
	      end;
	   mc_found_frame_sw = "1"b;
	   end;
	if ^mc_found_frame_sw then goto exit_via_fim;
	call mc_fim_type (bad_guy_known);
	if code ^= 0 then goto exit_via_fim;
	temp_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data", "stack_base_segno", code);
	if code ^= 0 then do;
	   if bad_guy_known then goto exit_via_fim;
	   else do;
	      on any_other begin;
	        code = error_table_$action_not_performed;
	         goto bad_data;
	         end;

	      if addr(mc.prs(6)) -> its.its_mod = ITS_MODIFIER then
	         if addr(mc.prs(6)) -> its.mod = "0"b then
	         if mc.prs(6) ^= null () then do;
	      call azm_stack_trace_ ("why", sci_ptr, amu_info_ptr,
	         pointer (mc.prs(6),0), "0"b, "0"b, "0"b, "1"b, 0, code);
	      if code = amu_et_$no_valid_stacks then code = 0;
	      end;
bad_data:	   
	      revert any_other;
	      goto bad_guy_non_fim;
	      end;
	   end;

	on any_other begin;
	   code = error_table_$action_not_performed;
	   goto bad_stack_data;
	   end;
	if addr(mc.prs(6)) -> its.its_mod = ITS_MODIFIER then
	     if addr(mc.prs(6)) -> its.mod = "0"b then
	          if mc.prs(6) ^= null () then do;
		     call azm_stack_trace_ ("why", sci_ptr, amu_info_ptr, pointer(mc.prs(6),0),
			"0"b, "0"b, "0"b, "1"b, 0, code);
		     if code = amu_et_$no_valid_stacks then code = 0;
		end;
exit_via_fim:
	P_code = code;
	goto common_return;


bad_guy_non_fim:
	on any_other begin;
	   code = error_table_$action_not_performed;
	   goto bad_stack_data;
	   end;
	call non_fim_type;
bad_stack_data:
	revert any_other;
	P_code = code;
	goto common_return;				/* end find the bad_guy */
%page;
azm_why_$print_locks:
     entry (P_sci_ptr, P_amu_info_ptr, P_lock_symb, P_set, P_code);
dcl P_lock_symb char (*);
dcl P_set bit (1);
	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	if (amu_info.type ^= FDUMP_TYPE) & (amu_info.type ^= FDUMP_PROCESS_TYPE) then do;
	     P_code = amu_et_$not_implemented;
	     return;
	     end;
	
	P_code, code = 0;

	could_not_set_lock_sw, bad_guy_known = "0"b;
	hardcore_cur_ptr = addr (hard_ptrs);
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	if P_lock_symb = "" then call list_locks (P_set);
	else do lock_index = 0 to hbound (lock_symbol, 1);
	   if P_lock_symb = lock_symbol (lock_index) then do;
	      call print_the_lock (lock_index);
	      if P_set then call set_to_lock;
	      end;
	   end;
lock_exit:
	
	P_code = code;
	return;
%page;
azm_why_$who:
     entry (P_sci_ptr, P_amu_info_ptr, P_code);

	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	if (amu_info.type ^= FDUMP_TYPE) & (amu_info.type ^= FDUMP_PROCESS_TYPE) then do;
	     P_code = amu_et_$not_implemented;
	     return;
	     end;
	P_code, code = 0;
	hardcore_cur_ptr = addr (hard_ptrs);
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	call who_is_it;
	if loop_exit = "0"b then
	     P_code = error_table_$action_not_performed;
	else P_code = 0;
	return;
azm_why_$mcs:
     entry (P_sci_ptr, P_amu_info_ptr, P_code);
	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	if (amu_info.type ^= FDUMP_TYPE) & (amu_info.type ^= FDUMP_PROCESS_TYPE) then do;
	     P_code = amu_et_$not_implemented;
	     return;
	     end;
	P_code, code = 0;
	mc_found_frame_sw = "0"b;
	call check_mcs;
	if mc_found_frame_sw then P_code = 0;
	else P_code = code;
	return;
%page;
mc_info_init:
     proc;
	pds_fim_ptr = amu_$definition_ptr (amu_info_ptr, "pds", "fim_data", code);
	if code ^= 0 then goto could_not_find;
	mc_info (PDS_FIM).ptr = pds_fim_ptr;
	mc_info (PDS_FIM).name = "pds$fim_data";

	pds_pgflt_ptr = amu_$definition_ptr (amu_info_ptr, "pds", "page_fault_data", code);
	mc_info (PDS_PGF).ptr = pds_pgflt_ptr;
	mc_info (PDS_PGF).name = "pds$page_fault_data";

	pds_signal_ptr = amu_$definition_ptr (amu_info_ptr, "pds", "signal_data", code);
	mc_info (PDS_SIG).ptr = pds_signal_ptr;
	mc_info (PDS_SIG).name = "pds$signal_data";

	prds_fim_ptr = amu_$definition_ptr (amu_info_ptr, "prds", "fim_data", code);
	mc_info (PRDS_FIM).ptr = prds_fim_ptr;
	mc_info (PRDS_FIM).name = "prds$fim_data";

	prds_num = fixed (baseno (mc_info (PRDS_FIM).ptr), 17);
	prds_int_ptr = amu_$definition_ptr (amu_info_ptr, "prds", "interrupt_data", code);
	mc_info (PRDS_INT).ptr = prds_int_ptr;
	mc_info (PRDS_INT).name = "prds$interrupt_data";

	prds_sys_troub_ptr = amu_$definition_ptr (amu_info_ptr, "prds", "sys_trouble_data", code);
	mc_info (PRDS_SYS).ptr = prds_sys_troub_ptr;
	mc_info (PRDS_SYS).name = "prds$sys_trouble_data";
     end mc_info_init;
%page;
non_fim_type:
     proc;

/* Now we must search the stacks (those that can be used by hardcore) for call_bce and syserr_real */

/* First look for syserr_real */
          an_entry_found_sw = "0"b;
	look_for_syserr_sw = "1"b;
	call check_stacks;
	look_for_syserr_sw = "0"b;
	if code ^= 0 then do;
	   if (code ^= amu_et_$entry_not_found) & (code ^= amu_et_$no_valid_stacks) & (code ^= error_table_$noentry)
	      then
	      call amu_$error_for_caller (amu_info_ptr, code, "why", "looking for syserr");

/* no call to syserr then look for call_bce */
	   check_entry_ptr = amu_$definition_ptr (amu_info_ptr, "call_bce", "call_bce", code);
	   if code ^= 0 then do;
	      call amu_$error_for_caller (amu_info_ptr, code, "why", "looking for call_bce$call_bce");
	      code = 0;
	      goto call_check_mcs;
	      end;
	   call check_stacks;
	   if code = 0 then an_entry_found_sw = "1"b;
	   else code = 0;
	   end;
	else an_entry_found_sw = "1"b;
call_check_mcs:
	call check_mcs;
	if code = error_table_$action_not_performed then code = 0;
     end non_fim_type;
%page;
check_mcs: proc;
	code = 0;
	if idle_process () then do;
	   return;		/* idle processes don't have a stack */
	   end;
	temp_ptr = amu_$definition_ptr (amu_info_ptr, "pds", "stacks", code);
	if code ^= 0 then do;
	   return;
	   end;
	words_requested = size (stack_temp_ptrs (*));   
	call amu_$do_translation (amu_info_ptr, fixed (baseno (temp_ptr), 17), addr (stack_temp_ptrs),
	     fixed (rel (temp_ptr), 18), words_requested, code);

	if code ^= 0 then do;
	   return;
	   end;
	do stack_idx = 7 by -1 to 0;
	   if stack_idx = 0 then
	      ring_zero_stack = "1"b;
	   else ring_zero_stack = "0"b;
	   if stack_temp_ptrs (stack_idx) ^= null then do;
	      call azm_stack_trace_$check_for_mc
	         ("why", sci_ptr, amu_info_ptr, stack_temp_ptrs (stack_idx),
	         ring_zero_stack, code);
	      if code ^= 0 then do;
	         if (code ^= amu_et_$no_valid_stacks) & (code ^= amu_et_$seg_not_dumped)
		  & (code ^= error_table_$action_not_performed) then
		  call amu_$error_for_caller (amu_info_ptr, code,
		  "why", "stack ^p", stack_temp_ptrs (stack_idx));
	         if code = amu_et_$no_valid_stacks then code = 0;
	         end;
	      else mc_found_frame_sw = "1"b;
	      end;
	   end;
	end check_mcs;
%page;
check_stacks:
     proc;


/* Try prds */
	stack_ptr = baseptr (substr (unspec (hardcore_info.prds), 19));
	if look_for_syserr_sw then
	     call azm_stack_trace_$check_for_syserr ("why", sci_ptr, amu_info_ptr, stack_ptr, code);
	else call azm_stack_trace_$check_for_entry ("why", sci_ptr, amu_info_ptr, stack_ptr, check_entry_ptr, code);
	if code = 0 then do;
	   an_entry_found_sw = "1"b;
	   return;
	   end;
	if code = amu_et_$no_valid_stacks then code = 0;
/* setup for stack_0 */
	temp_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data", "stack_base_segno", code);
	if code ^= 0 then return;
	words_requested = 1;
	call amu_$do_translation (amu_info_ptr, fixed (baseno (temp_ptr), 17), addr (stack_base_segno),
	     fixed (rel (temp_ptr), 18), words_requested, code);
	if code ^= 0 then return;			/* first check stack_0 */

	stack_ptr = baseptr (substr (unspec (stack_base_segno), 19));
	if look_for_syserr_sw then
	     call azm_stack_trace_$check_for_syserr ("why", sci_ptr, amu_info_ptr, stack_ptr, code);
	else call azm_stack_trace_$check_for_entry ("why", sci_ptr, amu_info_ptr, stack_ptr, check_entry_ptr, code);
	if code ^= 0 then do;
	     if code = amu_et_$seg_not_dumped then do;	/* stack_0 not in dump try inzr_stk0 */
		code = 0;
		temp_name = "inzr_stk0";
		call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp, temp_name, stack_base_segno,
		     code);
		if code ^= 0 then return;
		stack_ptr = baseptr (substr (unspec (stack_base_segno), 19));
		if look_for_syserr_sw then
		     call azm_stack_trace_$check_for_syserr ("why", sci_ptr, amu_info_ptr, stack_ptr, code);
		else call azm_stack_trace_$check_for_entry ("why", sci_ptr, amu_info_ptr, stack_ptr, check_entry_ptr, code);
		if code = 0 then an_entry_found_sw = "1"b;
		end;
	     end;
	   if code = 0 then an_entry_found_sw = "1"b;
     end check_stacks;

%page;
idle_process:
     proc () returns (bit (1));
dcl  based_char char (32) based (t_ptr);
dcl  code fixed bin (35);
dcl  idle_sw bit (1);
dcl  t_data (8) fixed bin (35);
dcl  t_idx fixed bin;
dcl  t_offset fixed bin (18);
dcl  t_ptr ptr;
dcl  t_segno fixed bin;

	if amu_info.process_info_ptr -> process_info.apte.foreign_ptr = null () then
	     aptep = amu_info.process_info_ptr -> process_info.apte.local_ptr;
	else aptep = amu_info.process_info_ptr -> process_info.apte.foreign_ptr;
	if aptep = null () then return ("0"b);

	code = 0;
	idle_sw = "0"b;
	call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, amu_info.process_idx);
						/* this way revert will always work */
	t_idx = amu_$return_val_idx_from_dbr (amu_info_ptr, fixed (substr (unspec (apte.dbr), 1, 24), 24));
	if t_idx = -1 then goto END_IDLE;		/* process is not in dump so assume its not idle  */

	call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, t_idx);
	t_ptr = addr (t_data);
	t_segno = hardcore_info.segno.pds;
	t_offset = amu_$definition_offset (amu_info_ptr, "pds", "process_group_id", code);
	if code ^= 0 then
	     goto END_IDLE;

	words_requested = size (t_data);
	call amu_$do_translation (amu_info_ptr, t_segno, t_ptr, t_offset, words_requested, code);
	if code ^= 0 then goto END_IDLE;		/* can't get id, assume its not idle */
	if index (based_char, "Idle") ^= 0 then idle_sw = "1"b;

END_IDLE:
	call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	return (idle_sw);

     end idle_process;
%page;
mc_fim_type:
     proc (set_it);
dcl  set_it bit (1);

	temp_word = "0"b;
	arg_bits_ptr = addr (temp_word);
	arg_bits_def.ppr, arg_bits_def.tpr = "1"b;
	arg_bits_def.set_ptr = set_it;
	call azm_display_mc_ (sci_ptr, amu_info_ptr, mcp, arg_bits_ptr, code);
	if code = 0 & set_it then do;
	     t_pr_name = "prmc";
	     call amu_$definition_set_prn (amu_info_ptr, t_pr_name, fixed (baseno (real_mcp), 17),
		fixed (rel (real_mcp), 18), code);
	     t_pr_name = "prs";
	     call amu_$definition_set_from (amu_info_ptr, t_pr_name, mcp, code);
	     t_pr_name = "pr6";
	     call amu_$definition_get_prn (amu_info_ptr, t_pr_name, temp_ptr, code);
	     temp_stack_ptr = temp_ptr;
	     t_pr_name = "prfr";
	     call amu_$definition_set_prn (amu_info_ptr, t_pr_name, fixed (baseno (temp_ptr), 17),
		fixed (rel (temp_ptr), 18), code);
	     end;
     end mc_fim_type;
%page;
list_locks:
     proc (set_for_lock);
dcl  set_for_lock bit (1);
     lock_word (*) = "0"b;
     do lock_index = 0 to hbound (lock_word, 1);
        call print_the_lock (lock_index);
        end;
     if ^set_for_lock then return;

/* start at 1 because the tc_data lock does not contain a process_id */
     do lock_index = 1 to hbound (lock_word, 1);
        if lock_word (lock_index) ^= "0"b then do;
	 call set_to_lock;
	 return;
	 end;
        end;
     could_not_set_lock_sw = "1"b;
     end list_locks;
%page;
set_to_lock:
      proc;
      if lock_word(lock_index) = "0"b then do;
         could_not_set_lock_sw = "1"b;
         return;
         end;

      if process_info.pid = lock_word (lock_index) then do;
						/* this is easy */
         no_print_process = "1"b;
         call ioa_ ("^a$^a locked by current process",
	  lock_seg (lock_index), lock_symbol (lock_index));
         loop_exit = "1"b;
         return;
         end;
      do temp_indx = 0 to hbound (fdump_process_table.array, 1);
         if fdump_process_table.array (temp_indx).apte_offset
	  = fixed (substr (unspec (lock_word (lock_index)), 1, 18), 18) then do;
						/* Looks like this is the guy so setup the proc hold for it */
	  call amu_$fdump_mpt_change_idx (amu_info_ptr, temp_indx);
	  call ioa_ ("Setting process for ^a$^a",
	     lock_seg (lock_index), lock_symbol (lock_index));
	  call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, temp_indx);
	  no_print_process = "0"b;
	  return;
	  end;
         end;
      call ioa_ ("Could not find process holding lock.");
      could_not_set_lock_sw = "1"b;
      end set_to_lock;

%page;
print_the_lock:
     proc (index);
dcl  seg_symb char (32);
dcl  offset_symb char (32);
dcl  index fixed bin;
dcl  lock_name char (32);
dcl  1 dim_check aligned,
     2 pad bit (18) unal,
     2 mbz bit (18) unal;

	seg_symb = lock_seg (index);
	offset_symb = lock_symbol (index);
	lock_name = rtrim (seg_symb) || "$" || rtrim (offset_symb);
	lock_apte_offset = 0;
	if index = disk_seg_lock_index then do;
	   temp_name = "disk_seg";
	   call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp, temp_name, temp_num, code);
	   words_requested = 1;
	   call amu_$do_translation (amu_info_ptr,temp_num,addr(dim_check),
	      fixed(rel(addr(baseptr(temp_num) -> disk_data.array(1))),18), words_requested,code);
	   if dim_check.mbz ^= "0"b then do;
	      call ioa_ ("^5x^32a not found", lock_name);
	      lock_word(index) = "0"b;
	      return;
	      end;
	   lock_ptr = pointer(baseptr(temp_num),
	      fixed(rel(addr(baseptr(temp_num) -> disk_data.lock)),17));
	   end;
	else lock_ptr = amu_$definition_ptr (amu_info_ptr, seg_symb, offset_symb, inter_code);
	temp_ptr = null ();
	call amu_$do_translation_hunt_ptr (amu_info_ptr, lock_ptr, temp_ptr, code);
	if temp_ptr = null then do;
	   lock_word (index) = "0"b;
	   if ^bad_guy_known then do;
	      call ioa_ ("^5x^32a not found", lock_name);
	      return;
	      end;
	   if inter_code ^= 0 then do;
	      call amu_$error_for_caller (amu_info_ptr, inter_code, "why",
	         "Resolving ^a$^a", rtrim (seg_symb),rtrim (offset_symb));
	      code = inter_code;
	      return;
	      end;
	   call amu_$error_for_caller (amu_info_ptr, 0, "why",
	      "Cannot find ^a$^a", rtrim (seg_symb),rtrim (offset_symb));
	   return;
	   end;

	lock_word (index) = based_word;
	lock_apte_offset = fixed (substr (unspec (based_word), 1, 18), 18);
	if index = 0 then do;
	     call ioa_ ("^5x^32a ^w", lock_name, based_word);
	     return;
	     end;
	if based_word ^= "0"b & substr (based_word, 1, 3) ^= "7"b3 then do;
	     call ioa_ ("^5x^32a locked by:", lock_name);
	     call amu_$tc_data_print_this_apte (amu_info_ptr, lock_apte_offset, code);
	     if code ^= 0 then return;
	     call ioa_ (" ");
	     end;
	else call ioa_ ("^5x^32a ^[unlocked^;^w^]", lock_name, (based_word = "0"b), based_word);
     end print_the_lock;
%page;
who_is_it:
     proc;
	loop_exit = "0"b;
	no_print_process = "0"b;
	trouble_pid_ptr = amu_$definition_ptr (amu_info_ptr, "scs", "trouble_processid", code);
	if trouble_pid_ptr ^= null () then do;		/* we may know the bad guy */
	     words_requested = 1;
	     call amu_$do_translation (amu_info_ptr, fixed (baseno (trouble_pid_ptr), 17), addr (trouble_pid),
		fixed (rel (trouble_pid_ptr), 18), words_requested, code);
	     if code ^= 0 then do;
		call amu_$fdump_mpt_revert_idx (amu_info_ptr);
		P_code = code;
		return;
		end;

/* looks better and better */
	     if trouble_pid ^= 0 then do;		/* This should be it */
		if process_info.pid = unspec (trouble_pid) then do;
						/* this is easy */
		     no_print_process = "1"b;
		     loop_exit = "1"b;
		     return;
		     end;
		do temp_indx = 0 to hbound (fdump_process_table.array, 1);
		     if fdump_process_table.array (temp_indx).apte_offset
			= fixed (substr (unspec (trouble_pid), 1, 18), 18) then do;
			call amu_$fdump_mpt_change_idx (amu_info_ptr, temp_indx);
			loop_exit = "1"b;
			end;
		end;
		end;
	     end;
     end who_is_it;
%page;
%include dskdcl;
%page;
%include mc;
%page;
%include amu_mc;
%page;
%include amu_info;
%page;
%include amu_process_info;
%page;
%include amu_fdump_info;
%page;
%include amu_hardcore_info;
%page;
%include flagbox;
%page;
%include sys_trouble_codes;
%page;
%include apte;
%page;
%include its;


     end azm_why_;

