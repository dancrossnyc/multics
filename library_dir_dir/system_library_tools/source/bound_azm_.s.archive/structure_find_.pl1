/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* Probably written by Sibert */
/* Modified 1984-10-04 BIM to admit all legal characters in structure names */
/* Modified 1984-10-04 BIM to add pathname and caller_ptr entrypoints */

structure_find_:
     procedure ();

declare   P_structure_name char (*) parameter;
declare   P_symbol_ptr pointer parameter;		/* Output: pointer to runtime symbol node */
declare   P_pathname char (*);
declare   P_code fixed bin (35) parameter;
declare   P_segment_ptr pointer;

declare   code fixed bin (35);
declare   pathname char (220);
declare   structure_name char (256) varying;
declare   outer_name char (64) varying;
declare   symbol_ptr pointer;
declare 1 symbol aligned like runtime_symbol based (symbol_ptr);
declare   seg_ptr pointer;
declare   seg_bc fixed bin (24);
declare   comp_name char (32);

declare   error_table_$bad_arg fixed bin (35) external static;
declare   error_table_$noentry fixed bin (35) external static;

declare   hcs_$status_mins entry (ptr, fixed bin(2), fixed bin(24), fixed bin(35));
declare   structure_lib_mgr_$next_segment entry (fixed bin, pointer, pointer, char (*), pointer, fixed bin);
declare   structure_lib_mgr_$get_segment entry (character (*), pointer, pointer, pointer, fixed binary,
	fixed binary (35));
declare   structure_lib_mgr_$get_segment_ptr entry (pointer, fixed binary (24), character (*), pointer, pointer,
	fixed binary, fixed binary (35));
declare   stu_$find_runtime_symbol entry (pointer, char (*), pointer, fixed bin (35)) returns (pointer);

declare  (addrel, before, null, rtrim, verify) builtin;

/*  */

structure_find_$search:
     entry (P_structure_name, P_symbol_ptr, P_code);

	structure_name = rtrim (P_structure_name);
	outer_name = before (structure_name, ".");

	call find_structure ();

	P_symbol_ptr = symbol_ptr;
	P_code = code;
	return;

structure_find_$pathname:
     entry (P_pathname, P_structure_name, P_symbol_ptr, P_code);

	structure_name = rtrim (P_structure_name);
	outer_name = before (structure_name, ".");
	pathname = P_pathname;

	call find_structure$$pathname ();

	P_symbol_ptr = symbol_ptr;
	P_code = code;
	return;

/**** This next clever device allows a program to find it's own symbol
      table and use it for structure display, or to use a bound in
      structure library. Eventually, this technology could be used to 
      support -ref_dir lower down. */

structure_find_$pointer:
	entry (P_segment_ptr, P_structure_name, P_symbol_ptr, P_code);

	structure_name = rtrim (P_structure_name);
	outer_name = before (structure_name, ".");

	call find_component (P_segment_ptr, seg_ptr, seg_bc, comp_name);
	call find_structure$$pointer (seg_ptr, seg_bc, comp_name);
	P_symbol_ptr = symbol_ptr;
	P_code = code;
	return;

MAIN_RETURN:
	P_code = code;
	return;

/*  */

find_component:
	procedure (seg_ptr, bound_seg_ptr, bound_seg_bc, comp_name);

declare seg_ptr pointer;
declare bound_seg_ptr pointer;
declare bound_seg_bc fixed bin (24);
declare comp_name char (32);
declare component_info_$offset entry (pointer, fixed binary (18), pointer, fixed binary (35));
%include component_info;

          call hcs_$status_mins (seg_ptr, (0), bound_seg_bc, code);
	if code ^= 0 then return;
	bound_seg_ptr = setwordno (seg_ptr, 0);

          call component_info_$offset (bound_seg_ptr, wordno (seg_ptr), addr (ci), code);
	if code ^= 0 then /* not bound, mate */
	     comp_name = "";
	else comp_name = ci.name;
	return;
	end find_component;


find_structure:
     procedure ();

declare   seg_ptr pointer;
declare   header_ptr pointer;
declare   known_list_size fixed bin;
declare   known_list_ptr pointer;
declare   known_list (known_list_size) char (32) based (known_list_ptr) unaligned;
declare   seg_idx fixed bin;
declare   pathname_sw bit (1) aligned;
declare   ptr_sw bit (1) aligned;

          ptr_sw, 
          pathname_sw = "0"b;
	go to COMMON;

find_structure$$pathname:
	entry;

	ptr_sw = "0"b;
	pathname_sw = "1"b;
	go to COMMON;

find_structure$$pointer:
	entry (P_seg_ptr, P_seg_bc, P_comp_name);
declare   P_seg_ptr pointer;
declare   P_seg_bc fixed bin (24);
declare   P_comp_name char (*);

	ptr_sw = "1"b;
	pathname_sw = "0"b;

COMMON:

	symbol_ptr = null ();
	code = 0;

	if (structure_name = "") | (verify (structure_name, "$_.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") ^= 0) then do;
	     code = error_table_$bad_arg;
	     return;
	     end;

	if ^ptr_sw then seg_ptr = null ();
	seg_idx = 0;
	if pathname_sw | ptr_sw
	then do;
	     if pathname_sw 
	     then call structure_lib_mgr_$get_segment (pathname, seg_ptr, header_ptr, known_list_ptr, known_list_size, code);
	     else call structure_lib_mgr_$get_segment_ptr (P_seg_ptr, P_seg_bc, P_comp_name, header_ptr, known_list_ptr, known_list_size, code);
	     if code = 0 then call search_segment ();
	     if symbol_ptr = null ()
	     then code = error_table_$noentry;
	     return;
	end;
	do while ((seg_idx = 0) | (seg_ptr ^= null ()));
	     call structure_lib_mgr_$next_segment (seg_idx, 
		seg_ptr, header_ptr, (""), known_list_ptr, known_list_size);
	     if (seg_ptr ^= null ()) then do;
		call search_segment ();
		if (symbol_ptr ^= null ()) then return;
	     end;
	end;
	code = error_table_$noentry;
	return;

/*  */

search_segment:
     procedure ();

declare   rootp pointer;
declare   idx fixed bin;


	symbol_ptr = null ();			/* until we find it*/

	if (header_ptr = null ()) then return;
	if (header_ptr -> std_symbol_header.identifier ^= "symbtree") then return;
	if (header_ptr -> std_symbol_header.area_pointer = ""b) then return;
	rootp = addrel (header_ptr, header_ptr -> std_symbol_header.area_pointer);
	if (rootp -> pl1_symbol_block.identifier ^= "pl1info") then return;
	if (rootp -> pl1_symbol_block.root = ""b) then return;
	rootp = addrel (header_ptr, rootp -> pl1_symbol_block.root);

	if (hbound (known_list, 1) = 0) then do;	/* No list, so try for anything */
	     call search_block (rootp);
	     return;
	     end;

	do idx = 1 to hbound (known_list, 1);
	     if (known_list (idx) = outer_name) then do;
		call search_block (rootp);
		return;
		end;
	     end;					/* Didn't find it */

	symbol_ptr = null ();
	return;

/*  */

search_block:
     procedure (P_blockp);

declare   P_blockp pointer parameter;

declare   block_ptr pointer;
declare   block_offset bit (18) aligned;
declare   stu_code fixed bin (35);
declare   parentp pointer;


	symbol_ptr = stu_$find_runtime_symbol 
	     (P_blockp, (outer_name), parentp, stu_code);

	if (symbol_ptr ^= null ()) then		/* Found a level 1 structure */
	     if (binary (symbol.type, 6) = structure_dtype) then
		if (symbol.level = "01"b3) then do;
		     if (outer_name = structure_name) then return;

		     symbol_ptr = stu_$find_runtime_symbol 
			(P_blockp, (structure_name), parentp, stu_code);
		     if (symbol_ptr ^= null ()) then return;
		     end;

/* Couldn't find it here, so try the sons (if any) */

	block_ptr = P_blockp;
	do block_offset = (P_blockp -> runtime_block.son)
		repeat (block_ptr -> runtime_block.brother)
		while (block_offset ^= ""b);

	     block_ptr = addrel (block_ptr, block_offset);

	     call search_block (block_ptr);
	     if (symbol_ptr ^= null ()) then return;	/* Found it */
	     end;

	return;					/* It's still null, and we've found nothing */
	end search_block;

	end search_segment;

	end find_structure;

%page; %include std_symbol_header;
%page; %include pl1_symbol_block;
%page; %include runtime_symbol;
%page; %include std_descriptor_types;

	end structure_find_;
