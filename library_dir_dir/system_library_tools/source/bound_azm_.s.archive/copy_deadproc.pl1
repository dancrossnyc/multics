/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

copy_deadproc: 	proc();

/* format: off */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This is a tool to copy dead processes from the >pdd to >dumps>save_pdirs  */
/* directory.						       */
/*							       */
/* Status:						       */
/*							       */
/* 0) Created:     June 1984 by B. Braun			       */
/* 1) Modified:    06 Dec 84 by B. Braun to not set system_privileges when   */
/* 			 getting the access class of the source dir    */
/*			 fails.  Print better error message when       */
/*			 deleting the source dir fails.	       */
/* 2) Modified: 23 Jan 85 by B. Braun to set the 256K switch.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(87-07-09,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Add the no_copy_delete control functionality.
  2) change(87-07-18,GDixon), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
      A) Add copy_liveproc command.
      B) Correct problem in cleanup.
  3) change(87-10-26,GDixon), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
      A) Fix bug in determine_hphcs_need internal subroutine.
                                                   END HISTORY COMMENTS */
%page;
/* External entries */

dcl aim_check_$equal		entry (bit(72) aligned, bit(72) aligned) returns(bit(1) aligned);
dcl check_gate_access_		entry (char(*), ptr, fixed bin(35));
dcl com_err_			entry() options(variable);
dcl command_query_$yes_no		entry() options(variable);
dcl copy_pdir_$deadproc		entry (char(*), char(*), char(*), char(*), char(*), char(*), bit(1),
				        fixed bin(35));
dcl copy_pdir_$delete		entry (char(*), char(*), char(*), fixed bin(35));
dcl copy_pdir_$liveproc		entry (char(*), char(*), char(*), char(*), char(*), char(*), bit(1),
				        char(*), fixed bin(35));
dcl cu_$arg_count			entry (fixed bin, fixed bin(35));
dcl cu_$arg_ptr			entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35));
dcl get_authorization_		entry returns (bit (72));
dcl get_privileges_			entry() returns(bit(36) aligned);
dcl hcs_$get_access_class		entry (char(*), char(*), bit(72) aligned, fixed bin(35));
dcl hcs_$get_user_effmode       	entry (char(*), char(*), char(*), fixed bin, fixed bin(5), fixed bin(35));
dcl hcs_$set_256K_switch		entry (bit(2) aligned, bit(2) aligned, fixed bin(35));
dcl hcs_$status_minf		entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl pathname_			entry (char(*), char(*)) returns(char(168));
dcl system_privilege_$dir_priv_off	entry (fixed bin(35));
dcl system_privilege_$dir_priv_on	entry (fixed bin(35));
dcl system_privilege_$seg_priv_off	entry (fixed bin(35));
dcl system_privilege_$seg_priv_on	entry (fixed bin(35));
dcl upd_free_name_$retain_suffix	entry (char(*), char(*), char(*), fixed bin(35));
dcl upd_free_name_$restore_with_suffix	entry (char(*), char(*), char(*), fixed bin(35));

dcl (
     error_table_$action_not_performed,
     error_table_$badopt,
     error_table_$incorrect_access,
     error_table_$moderr,
     error_table_$no_m_permission,
     error_table_$no_s_permission,
     error_table_$noarg,
     error_table_$noentry,
     error_table_$notadir
     )		fixed bin(35) ext static;

/* options constant variables */

dcl (
     DEFAULT_DIR                        char(5) init(">pdd>"),
     DIR_TYPE			fixed bin(2) init(2),
     FALSE			bit (1) init ("0"b),
     PDIR_PATH			char(17) init(">dumps>save_pdirs"),
     PDIR_SUFFIX			char(4) init ("pdir"),
     TRUE				bit (1) init ("1"b)
     )				int static options(constant);
%page;
/* Builtins */

dcl (addr, before, index, null,
     rtrim, search, substr)		builtin;

/* Condition handlers */

dcl cleanup			condition;

/* Based variables */

dcl arg				char (al) based (ap);
dcl dir_str			char(dir_len) based(dir_ptr);
dcl name_str			char(name_len) based(name_ptr);
dcl 1 privileges			like aim_privileges  based (addr(priv_string));

/* Automatic */

dcl al				fixed bin(21);
dcl ap				ptr;
dcl argno				fixed bin;
dcl caller_access_class		bit(72) aligned;
dcl code				fixed bin (35);
dcl delete_sw			bit(1);
dcl deadproc			bit(1);
dcl dir_len			fixed bin(21);
dcl dir_ptr			ptr;
dcl dirname			char(168);
dcl ename				char(32);
dcl ignore			fixed bin(24);
dcl ignore_code			fixed bin(35);
dcl mode				fixed bin(5);
dcl myname			char(13);
dcl name_sw			bit(1);
dcl nargs				fixed bin;
dcl name_len			fixed bin(21);
dcl name_ptr			ptr;
dcl ncd_sw		          bit(1);
dcl need_hphcs			bit(1);
dcl need_priv			bit(1);
dcl no_chase                            fixed bin(1);
dcl old_256k_sw			bit(2) aligned;
dcl owner_sw			bit(1);
dcl parent_access			bit(1);
dcl parent_access_class		bit (72) aligned;    
dcl person_proj			char(32);
dcl pdir_access_class		bit (72) aligned;    
dcl pdir_path			char(168);
dcl pdir_to_create			char(32);
dcl priv_string			bit(36) aligned;
dcl privileges_are_set		bit(1);
dcl restore_names			bit(1);
dcl target_dir			char(168);
dcl target_dirname			char(168);
dcl target_parent			char(168);
dcl tdirname                            char(168);
dcl tename                              char(32);
dcl type				fixed bin(2);
dcl yes_sw bit(1);
%page;
    deadproc = TRUE;
    myname =  "copy_deadproc";
    go to COMMON;

copy_liveproc:
    entry;

    deadproc = FALSE;
    myname = "copy_liveproc";
    go to COMMON;
    
COMMON:
    delete_sw, name_sw, ncd_sw, old_256k_sw, owner_sw,
       need_hphcs, need_priv, restore_names,
       parent_access, privileges_are_set = FALSE;
    target_dir =  PDIR_PATH;
    name_ptr, dir_ptr = null();
    code = 0;
    no_chase = 0;

    on cleanup begin;
       call clean_up();
       end;
	
    call cu_$arg_count(nargs, code);
    if code ^= 0 then do;
       call com_err_(code,myname);
       goto EXIT;
       end;

    if nargs = 0 then
       if deadproc then
	call argument_error (error_table_$noarg,
	"^/A process directory name must be provided.^/^a",
	"Usage: copy_deadproc {deadproc_name} {-ctl_args}", "");
       else
	call argument_error (error_table_$noarg,
	"^/A process directory name and user name must be provided.^/^a",
	"Usage: copy_liveproc {live_pdir_name} {user_name} {-ctl_args}", "");
%page;
    do argno = 1 to nargs;				/* process args  */
       call cu_$arg_ptr(argno, ap, al, (0));

       if deadproc & (arg = "-delete" | arg = "-dl") then delete_sw = TRUE;
       else if deadproc & (arg = "-no_delete" | arg = "-ndl") then
	delete_sw = FALSE;
       else if deadproc & (arg = "-no_copy_delete" | arg = "-ncd") then
	ncd_sw = TRUE;
       else if arg = "-owner" | arg = "-ow" then owner_sw = TRUE;
       else if ^deadproc & (arg = "-directory" | arg = "-dir" | arg = "-dr") then do;
	if dir_ptr ^= null then
	   call argument_error (0,
	   "More than one directory was specified. ^a, ^a", dir_str, arg);
	call get_next_arg ("directory name", dir_ptr, dir_len);
	end;
       else if arg = "-name" | arg = "-nm" then do;
          if name_ptr ^= null() then
	   call argument_error (0, "More than one name is specified. ^a, ^a",
	   name_str, arg);
	if deadproc then
	   call get_next_arg ("deadproc name", name_ptr, name_len);
	else
	   call get_next_arg ("user name", name_ptr, name_len);
	end;
       else if substr(arg, 1, 1) ^= "-" then do;		/* assume either */
	if ^deadproc & dir_ptr = null then do;		/*  pdir pathname */
	   dir_len = al;
	   dir_ptr = ap;
	   end;
	else if name_ptr = null() then do;		/*  or deadproc  */
	   name_len = al;				/*  or user name */
	   name_ptr = ap;
	   end;
	else call argument_error (0,
	   "More than one name is specified. ^a, ^a", name_str, arg);
	end;
       else call argument_error(error_table_$badopt, " ^a",arg, "");
       end;					/* end args loop */

    if deadproc then do;
       if name_ptr = null() then
	call argument_error(error_table_$noarg, "A deadproc name must be specified.", "", "");

       if search(name_str, "<>") = 0 then
	pdir_path = DEFAULT_DIR || name_str;   /* process_dir_dir is the default */
       else  pdir_path = name_str;
       end;
    else do;
       if dir_ptr = null() then
	call argument_error(error_table_$noarg, "A liveproc directory name must be specified.", "", "");
       if name_ptr = null() then
	call argument_error(error_table_$noarg, "A user name must be specified.", "", "");
       if search(dir_str, "<>") = 0 then
	pdir_path = DEFAULT_DIR || dir_str;   /* process_dir_dir is the default */
       else  pdir_path = dir_str;
       end;
%page;
    /* need access to phcs_ */
    call check_gate_access_ ("phcs_", null(), code);
    if code ^= 0 then do;
       if code = error_table_$noentry then call report_error(code, "Checking access to the phcs_ gate.", "", "");
       else if code = error_table_$moderr then call report_error(code, 
		  "Execute access is required on the phcs_ gate.", "", "");
       end;

    /* does the pdir specified exist? */

    call expand_pathname_ (pdir_path, dirname, ename, code);
    if code  ^= 0 then call report_error(code, "^a", pathname_(dirname, ename), "");
    
    /* get access class of source pdir */
    call hcs_$get_access_class (dirname, ename, pdir_access_class, code);
    if code ^= 0 then call report_error(code, "^a", pathname_(dirname, ename), "");

    caller_access_class = get_authorization_ ();		/*  get the access_class of the process */

    if aim_check_$equal (caller_access_class, pdir_access_class) then;  /* dont need privileges */
    else do;   /* need privileges */
       if ^(privileges_are_set) then call set_privileges(code);
       if code ^= 0 then do;
          if code = error_table_$noentry then 
	   call report_error(code, "Checking access to the system_privilege_ gate.", "", "");
          else if code = error_table_$moderr then
	   call report_error(code, "Execute access is required on the system_privilege_ gate.", "", "");
          else call report_error(code, "^a", pathname_(dirname, ename), "");
	end;
       parent_access = TRUE;
       end;
  
    /*  If -owner is specified, then the pdir can only be copied if the access class of the   */
    /*  source pdir is equal to the target parent dir.				    */

    if owner_sw then do;
       call expand_pathname_ (target_dir, target_dirname, target_parent, code);
       if code  ^= 0 then call report_error(code, "^a", pathname_(target_dirname, target_parent), "");
						/* get access class of parent of target dir */
       call hcs_$get_access_class (target_dirname, target_parent, parent_access_class, code);
       if code ^= 0  then call report_error(code, "^a", pathname_(target_dirname, target_parent), "");

       if pdir_access_class ^= parent_access_class then call report_error (error_table_$action_not_performed, 
          "^/When -owner is used, the access class of pdir ^a must equal the access class of the target directory ^a.", 
	 pathname_(dirname, ename), pathname_(target_dirname, target_parent));
       end;

    call hcs_$status_minf (dirname, ename, no_chase, type, ignore, code);
    if code ^= 0 then call report_error(code, "^a", pathname_(dirname, ename), "");
    if type ^= DIR_TYPE then call report_error(error_table_$notadir, "^a", pathname_(dirname, ename), "");
    
    /* determine access of the pdir to be copied */

    call hcs_$get_user_effmode (dirname, ename, "", -1, mode, code);
    if code ^= 0 then  call report_error(code, "^a", pathname_(dirname, ename), "");
    if mode ^= SMA_ACCESS_BIN & mode ^= SM_ACCESS_BIN then call report_error(error_table_$moderr, 
			"SM access is required on ^a", pathname_(dirname, ename), "");
%page;
    if delete_sw | ncd_sw then do;
       /* to delete user needs SM on containing dir */

       call expand_pathname_ (dirname, tdirname, tename, code);
       if code  ^= 0 then call report_error(code, "^a", dirname, "");

       call hcs_$get_user_effmode (tdirname, tename, "", -1, mode, code);
       if code ^= 0 then  call report_error(code, "^a", dirname, "");

       if mode ^= SMA_ACCESS_BIN & mode ^= SM_ACCESS_BIN then do;
	/* query the user to continue */
	if mode = S_ACCESS_BIN then code = error_table_$no_m_permission;
	else if mode = M_ACCESS_BIN then code = error_table_$no_s_permission;
	else  code = error_table_$incorrect_access; 

	if ncd_sw then 
	   call report_error (error_table_$incorrect_access,
	      "Modify access is needed on containing dir ^a to delete ^a.",
	      dirname, pathname_(dirname, ename));

	if delete_sw then call command_query_$yes_no (yes_sw, code, myname, 
"In order to delete the pdir ^a, Modify access is needed on the containing dir ^a.  If you continue, the pdir will be copied but not deleted.", 
             "The directory ^a can be copied but not deleted. Do you wish to continue?",
             pathname_(dirname, ename), dirname);
          if ^(yes_sw) then
	   call report_error(error_table_$action_not_performed,
	   "Copying ^a.", ename, "");
          delete_sw = FALSE;				/* continue and  */
	end;					/* dont delete   */
       end;

    if deadproc					/* get target dir*/
    then call construct_names_from_pdir (ename, pdir_to_create, person_proj);
    else do;
       pdir_to_create = rtrim(name_str) || "." || PDIR_SUFFIX;
       person_proj = name_str;
       end;

    if ^ncd_sw then do;
       need_hphcs = determine_hphcs_need(dirname, ename, person_proj);
       if need_hphcs then do;
	/* To copy the user needs "re" to hphcs_ gate. */
	call check_gate_access_ ("hphcs_", null(), code);
	if code ^= 0 then do;
	   if code = error_table_$noentry then
	      call report_error(code, "Checking access to the hphcs_ gate.",
	      "", "");
	   else if code = error_table_$moderr then
	      call report_error(code,
	      "Execute access is required on the hphcs_ gate.", "", "");
	   end;
	 end;
%page;
       if ^deadproc & owner_sw then;
       else if owner_sw then do;
	if (person_proj = ename) then
	   call report_error(error_table_$action_not_performed, 
	   "Cannot construct person.project from name given ^a.", ename, "");
	end;
       else person_proj = "";				/* only need     */
						/* person.project*/
						/* if owner given*/

						/* target dir    */
						/* exist already?*/
       call hcs_$status_minf (target_dir, pdir_to_create, no_chase, type, ignore,
	code);
       if code = 0 then do;				/* yes, rename it*/
	restore_names = TRUE;
	call upd_free_name_$retain_suffix (target_dir, pdir_to_create,
	   "pdir", code);
	if code ^= 0 then
	   call report_error(code, "While renaming the pdir directory ^a", 
	   pathname_(target_dir, pdir_to_create), "");
	end;

						/* set 256K sw   */
						/* just in case  */
       call hcs_$set_256K_switch ( "11"b, old_256k_sw, code);
       if code ^= 0 then call com_err_(myname, code, "Warning, unable to set the 256K switch...continuing copying.");

       if deadproc					/* copy the pdir */
       then call copy_pdir_$deadproc (myname, dirname, ename,  target_dir, pdir_to_create, person_proj, need_hphcs, code);
       else call copy_pdir_$liveproc (myname, dirname, ename,  target_dir, pdir_to_create, person_proj, need_hphcs,
	before(name_str,"."), code);
       if code ^= 0 then call report_error(code, "While copying ^a to ^a.",
	pathname_(dirname, ename), pathname_(target_dir, pdir_to_create));

       restore_names = FALSE;    /* successful copy, dont restore */
       end;

    if delete_sw | ncd_sw then do;
       call copy_pdir_$delete (myname, dirname, ename, code);
       if code ^= 0 then
	call report_error(code, "Deleting ^a.", pathname_(dirname, ename),
	"");
       end;

END_COPY:
    call clean_up();

EXIT:
    return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Reports error messages pertaining to argument processing and aborts the   */
/* command.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

argument_error: proc(ecode, message, str1, str2);

dcl ecode				fixed bin(35),
    (message, str1, str2)		char(*);
 
   call com_err_(ecode, myname, message, str1, str2);
   goto EXIT;   

end argument_error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


clean_up:	proc();

dcl code fixed bin(35);

    code = 0;
    if restore_names then
       call upd_free_name_$restore_with_suffix (target_dir, pdir_to_create,
       "pdir", ignore_code);
    restore_names = FALSE;
    if privileges_are_set then do;
       if ^(privileges.dir) then call system_privilege_$dir_priv_off (ignore_code);
       if ^(privileges.seg) then call system_privilege_$seg_priv_off (ignore_code);
       end;
    call hcs_$set_256K_switch (old_256k_sw, (""b), ignore_code);   

end clean_up;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Attempts to construct the person.pdir name for the target pdir name and   */
/* the person.project for the owner acl.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

construct_names_from_pdir:  proc (old_name, new_name, acl_name);

dcl acl_name char(*);
dcl new_name char(*);
dcl old_name char(*);

dcl temp_name char(32) var;
dcl temp_idx fixed bin;

/* old_name is assumed to be at the very least person.project */

    acl_name, new_name = "";
    temp_name = rtrim(old_name);

    temp_idx = index(old_name, ".");
    if temp_idx ^= 0 then new_name = substr(temp_name, 1, temp_idx-1);
    else  /* doesn't appear to be a person.project */
       new_name = old_name;   /* return as is */

    new_name = rtrim(new_name) || "." || PDIR_SUFFIX;

/* To construct person.project, the old name is assumed to be of the form person.project.f.channel */

    temp_idx = index(temp_name, ".f.");
    if temp_idx ^= 0 then acl_name = substr(temp_name, 1, temp_idx-1);
    else  /* doesn't appear to be a person.project.f.chnl */
       acl_name = old_name;   /* return as is */

end construct_names_from_pdir;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


determine_hphcs_need: proc(dirname, ename, person_proj) returns(bit(1));
		  
dcl dirname char(168);
dcl ename char(32);
dcl person_proj char(32);

dcl code fixed bin(35);
dcl userid char(32);
dcl get_group_id_		entry() returns(char(32));
dcl get_group_id_$tag_star	entry() returns(char(32));

    userid = get_group_id_$tag_star();
    if person_proj = substr(userid, 1, index(userid, ".*")-1)
    then return("0"b);
    else do;
       call hcs_$get_user_effmode (dirname, ename, get_group_id_(),
	-1, mode, code);
       if code ^= 0 then  call report_error(code, "^a", dirname, "");
       if mode = SMA_ACCESS_BIN
       then do;
	call hcs_$get_user_effmode (pathname_ (dirname, ename),
	   "pit", get_group_id_(), -1, mode, code);
	if mode = REW_ACCESS_BIN then
	return ("0"b);
	else return ("1"b);
	end;
       else return("1"b);
       end;

end determine_hphcs_need;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This guy gets the next argument from the argument string, complaining     */
/* if it's not there.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

get_next_arg: proc(arg_expected, ap1, al1);

dcl arg_expected			char(*);
dcl (ap1				ptr,
     al1				fixed bin(21),
     code                               fixed bin(35));
	    
    argno = argno + 1;
    if argno > nargs then do;
       call argument_error(error_table_$noarg, "A ^a expected after ^a.", arg_expected, arg);
       return;
       end;

    call cu_$arg_ptr (argno, ap1, al1, code);
    if code ^= 0 then call argument_error(code, "get_next_arg", "", "");
     
end get_next_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* reports error messages and aborts the line.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

report_error: proc(ecode, message, str1, str2);

dcl ecode				fixed bin(35),
    (message, str1, str2)		char(*);
 
   call com_err_(ecode, myname, message, str1, str2);
   goto END_COPY;

end report_error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


set_privileges:  proc(code);

dcl code fixed bin(35);
	       
    code = 0;
    priv_string =  get_privileges_();

    /* first make sure they have re to system_privileges_ gate */
    call check_gate_access_ ("system_privilege_", null(), code);
    if code ^= 0 then return;

    if privileges.dir then;   /* caller already has it on */
    else call system_privilege_$dir_priv_on (code);
    if privileges.seg then;   /* caller already has it on */
    else call system_privilege_$seg_priv_on (code);
    
    privileges_are_set = "1"b;

end set_privileges;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;%include access_mode_values;
%page;%include aim_privileges;

end copy_deadproc;
