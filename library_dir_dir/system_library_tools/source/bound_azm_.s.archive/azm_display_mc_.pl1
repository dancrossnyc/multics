/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


azm_display_mc_: proc (P_sci_ptr, P_amu_info_ptr, P_mc_ptr, P_arg_bits_ptr, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Routine to display machine conditions or portions of machine condition
   frames for analyze_multics  */

/*
   Written December 1981 by Rich Coppola 
   Modified 19 Jan 84 by BLB to call a temp seg with sci_ptr and not amu_info.sci_ptr.
   Modified 29 Sept 84 by BLB to check all words of SCU data for zeros before aborting. (azm error 11).
   Modified Sept 84 by R. A. Fawcett to remove some of the blank lines in output 
   Modified 01 Oct 84 by BLB to stop using decimal_date_time_.
*/
/* PARAMETERS */

dcl  P_amu_info_ptr ptr;				/* ptr to amu info */
dcl  P_mc_ptr ptr;					/* ptr to thr mc BLOCK */
dcl  P_sci_ptr ptr;	
dcl  P_arg_bits_ptr ptr;				/* ptr to bit array defining the type of display desired */
dcl  P_code fixed bin (35);				/* error code if any */


/* EXTERNAL ENTRIES */
dcl  db_print entry (ptr, char (32), ptr, char (*) aligned, fixed bin, fixed bin, ptr, fixed bin, fixed bin);
dcl  iox_$user_output ptr ext static;
dcl  cv_bin_$oct entry (fixed bin, char (12) aligned);
dcl  (
     ioa_,
     ioa_$rsnnl
     ) entry options (variable);

dcl  amu_$get_name entry (ptr, ptr) returns (char (*));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  ssu_$get_temp_segment	entry (ptr, char(*), ptr);
dcl  ssu_$release_temp_segment	entry (ptr, ptr);


/* AUTOMATIC */

dcl  error_code_mc fixed bin (35);
dcl  iocb_name char (32);
dcl  iocbp ptr;
dcl  (by_name, ref_name) char (168);
dcl  eis_info_valid bit (1);
dcl  (line1, line2) char (80) varying;
dcl  (line1_sw, line2_sw) bit (1) init ("0"b);
dcl  at_by_wd char (2);
dcl  cvbinbuf char (12) aligned;
dcl  aligned_error_message char (100) aligned;
dcl  (i, j) fixed bin;
dcl  code fixed bin (35);
dcl  time char (24);
dcl  tsrpr bit (1);
dcl  print_ia bit (1);
dcl  (byptr, refptr) ptr;
dcl  (lnpos, flt_lng, inst6) fixed bin;
dcl  (no_scu_data, non_val_flt) bit (1);
dcl  fault_index fixed bin (6) unsigned;
dcl  temp_index fixed bin;
dcl  fltdtab (0:35) bit (1) based (byptr) unaligned;
dcl  (flt_ln, FLT_LN, IA_LN) char (100);
dcl  flt_bf char (24) varying;
dcl sci_ptr ptr;

dcl  1 pwrd based (PR_ptr) aligned,
       2 w1 fixed bin (35),
       2 w2 fixed bin (35);

dcl  PTR_STR char (24) aligned;
dcl  PR_ptr ptr;					/* temp ptr for PR display */


dcl  TAG_ptr ptr;					/* pointer to tag table */
dcl  tag_prt bit (1) init ("0"b);
dcl  tag_ char (4) init ("");

dcl  1 TAG (64) based (TAG_ptr),
       2 code char (4) unal,
       2 pad bit (8) unal,
       2 chain bit (1);
dcl  (addr, addrel, baseptr, bin, fixed, 
      length, hbound, lbound, null, rtrim,
      string, substr, unspec)		builtin;

dcl cleanup condition;
%page;


/* CONSTANTS */

dcl  TAG_table (8) char (40) int static options (constant)
	init (/* tag table */ "     au   qu   du   ic   al   ql   dl   ", "x0   x1   x2   x3   x4   x5   x6   x7   ",
	"n*  aau* aqu* ailtg ic* aal* aql* ailtg ", "0*  a1*  a2*  a3*  a4*  a5*  a6*  a7*  a",
	"fi   itp  iltg its  sd   scr  f2   f3   ", "ci   i    sc   ad   di   dic aid   idc a",
	"*n   *au  *qu  iltg *ic  *al  *ql  iltg ", "*0   *1   *2   *3   *4   *5   *6   *7   ");


dcl  cpul (0:7) char (1) int static options (constant) init ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  ptrfmt char (44) int static options (constant) init ("PR^o (^[ap^;ab^;bp^;bb^;lp^;lb^;sp^;sb^]) - ");

dcl  port_name (4) char (3) int static options (constant) init ("A: ", "B: ", "C: ", "D: ");

dcl  FAULT_TYPES (36) char (15) var int static options (constant)
	init ("ILL OP", "ILL MOD", "ILL SLV", "ILL PROC", "NEM", "OOB", "WRT INH", "PROC PAR-UPR", "PROC PAR-LWR",
	"$CON A", "$CON B", "$CON C", "$CON D", "ONC (DA ERR1)", "ONC (DA ERR2)", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "CACHE-PAR DIR", "CACHE-PAR STR", "CACHE-PAR IA", "CACHE-PAR BLK");


dcl  SC_IA_TYPES (1:15) char (42) var int static options (constant)
	init ("Unassigned (01)", "Non-existent Address (02)", "Stop on Condition (03)", "Unassigned (04)",
	"Data Parity, Store to SC (05)", "Data Parity in Store (06)", "Data Parity in Store AND Store to SC (07)",
	"Not Control (10)", "Port Not Enabled (11)", "Illegal Command (12)", "Store Not Ready ( 13)",
	"ZAC Parity, Active Module to SC (14)", "Data Parity, Active Module to SC (15)", "ZAC Parity, SC to Store (16)",
	"Data Parity, SC to Store (17)");


dcl  EXT_FAULT_TYPES (15) char (39) var int static options (constant)
	init ("Bffr. Ovflw - Port A", "Bffr. Ovflw - Port B", "Bffr. Ovflw - Port C", "Bffr. Ovflw - Port D",
	"Bffr. Ovflw - Primary Dir", "Write Notify Parity Error on ANY Port", "Dup. Dir. LVL 0 Parity Error",
	"Dup. Dir. LVL 1 Parity Error", "Dup. Dir. LVL 2 Parity Error", "Dup. Dir. LVL 3 Parity Error",
	"Dup. Dir. Multi Match Error", "PTW Ass. Mem. Parity Error", "PTW Ass. Mem. Match Error",
	"SDW Ass. Mem. Parity Error", "SDW Ass. Mem. Match Error");

dcl  ill_act (0:15) char (37) varying int static options (constant)
	init ("...", "Unassigned", "Non Existent Address", "Fault on Condition", "Unassigned",
	"Data Parity (Store -> SCU)", "Data Parity in Store", "Data Parity (Store -> SCU & in Store)", "Not Control",
	"Port Not Enabled", "Illegal Command", "Store Not Ready", "ZAC Parity (Processor -> SCU)",
	"Data Parity (Processor -> SCU)", "ZAC parity (SCU -> Store)", "Data Parity (SCU -> Store)");

dcl  indrs (18:31) char (4) varying int static options (constant)
	init ("zero", "neg", "cary", "ovfl", "eovf", "eufl", "oflm", "tro", "par", "parm", "^bar", "tru", "mif", "abs");

dcl  APU (18:32) char (6) varying int static options (constant)
	init ("priv", "xsf", "sdwamm", "sd-on", "ptwamm", "pt-on", "pi-ap", "dsptw", "sdwnp", "sdwp", "ptw", "ptw2",
	"fap", "fanp", "fabs");

dcl  CU (18:29) char (3) varying int static options (constant)
	init ("rf", "rpt", "rd", "rl", "pot", "pon", "xde", "xdo", "itp", "rfi", "its", "fif");

dcl  g1and7flts (5) bit (6) int static options (constant) unaligned init ("01"b3, "11"b3, "21"b3, "31"b3, "37"b3);

dcl  grp1flt (0:19) char (24) varying int static options (constant)
	init ("Illegal Ring Order", "Not in Execute Bracket", "Execute Bit off", "Not In Read Bracket", "Read Bit Off",
	"Not In Write Bracket", "Write Bit Off", "Not A Gate", "Not In Call Bracket", "Outward Call",
	"Bad Outward Call", "Inward Return", "Cross Ring Transfer", "Ring Alarm", "Associative Memory",
	"Out of Segment Bounds", "Processor Parity Upper", "Processor Parity Lower", "SC To Proc. Seq. Error 1",
	"SC To Proc. Seq. Error 2");

dcl  grp2flt (0:6) char (24) varying int static options (constant)
	init ("Illegal Segment Number", "Illegal Op Code", "Illegal Address & Mod", "Illegal Slave Procedure",
	"Illegal Procedure", "Non Existent Address", "Out Of Bounds");

dcl  flt_int_typ (0:63) char (24) varying int static options (constant)
	init ("...", "Shutdown", "...", "Store", "Bulk Store 0 Term", "MME 1", "...", "Fault Tag 1", "IOM 0 Overhead",
	"Timer Runout", "IOM 1 Overhead", "Command", "IOM 2 Overhead", "Derail", "IOM 3 Overhead", "Lockup",
	"IOM 0 Terminate Ch 40-77", "Connect", "IOM 1 Terminate Ch 40-77", "Parity", "Bulk Store 1 Term",
	"Illegal Procedure", "...", "Op Not Complete", "IOM 0 Terminate", "Startup", "IOM 1 Terminate", "Overflow",
	"IOM 2 Terminate", "Divide Check", "IOM 3 Terminate", "Execute", "IOM 0 Marker Ch 40-77", "(DF0) Segment",
	"IOM 1 Marker Ch 40-77", "(DF1) Page", "...", "Directed Fault 2", "...", "Directed Fault 3", "IOM 0 Marker",
	"Access Violation", "IOM 1 Marker", "MME 2", "IOM 2 Marker", "MME 3", "IOM 3 Marker", "MME 4", "...",
	"(FT2) Linkage", "...", "Fault Tag 3", "...", "...", "...", "...", "IOM 0 Special", "...", "IOM 1 Special",
	"...", "IOM 2 Special", "...", "IOM 3 Special", "Trouble");
%page;



	call setup;
	on condition(cleanup) begin;
             if arg_bits_def.dump then call ssu_$release_temp_segment (sci_ptr, mcp);
	   end;

	if arg_bits_def.dump then do;			/*  display the mc from the bos dump */

	     call init_dump_display;
	     if code ^= 0 then do;
		P_code = code;
		return;
		end;
	     end;
	else do;					/* set up the vars for the scu data */
	     scup = addr (mc.scu);
	     call init_scu_data;

	     if no_scu_data then do;
		arg_bits_def.mc_stored = "0"b;
		call ioa_ ("No SCU data stored.");
		return;
		end;
	     else arg_bits_def.mc_stored = "1"b;
	     end;

start_display:
	if arg_bits_def.all then do;			/* display all the mc from the given pointer */

	     call display_pr_regs_;
	     if code ^= 0 then goto error_return;
	     call display_regs_;
	     if code ^= 0 then goto error_return;
	     call ioa_ ("^a^[^/^a^]", FLT_LN,print_ia, IA_LN);
	     call display_scu_;
	     if code ^= 0 then goto error_return;
	     call display_misc_;
	     if code ^= 0 then goto error_return;
	     if eis_info_valid then do;
		call display_eis_info_;
		if code ^= 0 then goto error_return;
		end;
	     return;
	     end;

	call ioa_ ("^a^[^/^a^]", FLT_LN,print_ia, IA_LN);
	if arg_bits_def.prs then do;
	     call display_pr_regs_;
	     if code ^= 0 then goto error_return;
	     goto bypass_prs;
	     end;
	do i = 0 to 7;
	     if arg_bits_def.pr (i) then call print_pr_reg (i);
	     if code ^= 0 then goto error_return;
	end;

bypass_prs:
	if arg_bits_def.regs then do;
	     call display_regs_;
	     if code ^= 0 then goto error_return;
	     goto by_pass_reg;
	     end;
	do i = 0 to 7;
	     if xreg (i) then call display_x_reg (i);
	end;
	if arg_bits_def.areg then call display_aq_reg ("1"b);
	if arg_bits_def.qreg then call display_aq_reg ("0"b);

by_pass_reg:
	if arg_bits_def.scu then do;
	     call display_scu_;
	     if code ^= 0 then goto error_return;
	     call display_mc_code;
	     goto bypass_ppr_tpr;
	     end;
	else do;
	     if arg_bits_def.ppr then call print_ppr;
	     if arg_bits_def.tpr then call print_tpr;
	     if arg_bits_def.inst then call print_inst;
	     end;

bypass_ppr_tpr:
	if arg_bits_def.mis then do;
	     call display_misc_;
	     goto bypass_misc;
	     end;
	else do;
	     if arg_bits_def.mc_err then call display_mc_code;
	     if arg_bits_def.flt then do;
		call interpret_fault_reg (mc.fault_reg);
		if mc.cpu_type = 1 then
		     if mc.ext_fault_reg ^= "0"b then call interpret_ext_fault_reg (mc.ext_fault_reg);
		end;
	     if arg_bits_def.tm then call display_time;
	     end;

bypass_misc:
	if arg_bits_def.eis then do;
	     call display_eis_info_;
	     if code ^= 0 then goto error_return;
	     end;

	if arg_bits_def.dump then call ssu_$release_temp_segment (sci_ptr, mcp);
	return;
%page;
azm_display_mc_$regs_only:
     entry (P_sci_ptr, P_amu_info_ptr, P_mc_ptr, P_arg_bits_ptr, P_code);
	call setup;
	call display_pr_regs_;
	if code ^= 0 then goto error_return;
	call display_regs_;
	if code ^= 0 then goto error_return;
	P_code = 0;
	return;
%page;
setup:
     proc;


	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	arg_bits_ptr = P_arg_bits_ptr;
	mcp = P_mc_ptr;
	iocbp = iox_$user_output;
	P_code, code = 0;

     end setup;

%page;

init_scu_data:
     proc;


	scup = addr (mc.scu);
	no_scu_data, non_val_flt, eis_info_valid, print_ia = "0"b;
	if ^arg_bits_def.dump then
	   if string(scu) = "0"b then do;
 	      no_scu_data = "1"b;
	      return;
	      end;
	inst6 = 6;
	fault_index = fixed (scu.fi_num || scu.fi_flag, 6);
	FLT_LN, flt_ln, flt_bf = "";
	tsrpr = "0"b;
	flt_bf = flt_int_typ (fault_index);
	if substr (flt_bf, 1, 3) = "..." then
	     non_val_flt = "1"b;
	else do;
	     flt_lng = length (flt_int_typ (fault_index));
	     substr (flt_ln, 1, flt_lng) = substr (flt_bf, 1, flt_lng);
	     byptr = addrel (scup, 1);
	     if fltdtab (35) = "1"b then do;
		substr (flt_ln, flt_lng + 2, 5) = "Fault";
		lnpos = flt_lng + 8;
		do i = 1 to hbound (g1and7flts, 1);	/*  If grp 1 or 7 faults, don't print out tsr|ca */
		     if unspec (fault_index) = g1and7flts (i) then tsrpr = "1"b;
		end;
		end;
	     else do;
		substr (flt_ln, flt_lng + 2, 9) = "Interrupt";
		lnpos = flt_lng + 12;
		tsrpr = "1"b;			/* don't print out tsr|ca for interrupts */
		end;
	     temp_index = fault_index;
	     call cv_bin_$oct (temp_index, cvbinbuf);
	     substr (flt_ln, lnpos, 4) = "(" || substr (cvbinbuf, 11, 2) || ")";
	     lnpos = lnpos + 4;
	     j = lnpos;
	     do i = 0 to hbound (grp1flt, 1);
		if fltdtab (i) then do;
		     if substr (flt_ln, 1, 5) = "Store" | substr (flt_ln, 1, 12) = "Illegal Proc" then
			if i <= 6 then
			     call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp2flt (i));
			else ;
		     else call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp1flt (i));
		     end;
	     end;
	     FLT_LN = flt_ln;
	     end;
	if scu.port_stat.ial ^= "0"b then do;		/* display illegal action lines if present */
	     call ioa_$rsnnl ("Illegal Action Code (^o) - ^a", IA_LN, j, fixed (scu.port_stat.ial, 4),
		ill_act (fixed (scu.port_stat.ial, 4)));
	     print_ia = "1"b;
	     end;
	if tsrpr then
	     at_by_wd = "At";			/* if not printing tsr */
	else at_by_wd = "By";
	if scu.ir.mif then
	     eis_info_valid = "1"b;
	else eis_info_valid = "0"b;

	return;

     end init_scu_data;


%page;
/* dump - internal proc to display registers saved at time of dump */

init_dump_display:
     proc;
	call ssu_$get_temp_segment (sci_ptr, "azm_display_mc", mcp);
	call ioa_ ("^/Bootload CPU Registers at Time of Dump:");
	dumpptr = P_mc_ptr;
	unspec (mc.prs) = unspec (dump.prs);
	unspec (mc.regs) = unspec (dump.regs);
	unspec (mc.scu) = unspec (dump.misc_registers.scu);
	unspec (mc.mask) = unspec (dump.misc_registers.mcm);
	mc.fault_reg = dump.faultreg;
	mc.ext_fault_reg = dump.ext_fault_reg;
	mc.eis_info = dump.ptrlen;
	call ioa_ ("Descriptor Segment Base Register: ^12.3b ^12.3b", substr (dump.dbr, 1, 36),
	     substr (dump.dbr, 37, 36));
	if dump.modereg ^= "0"b then call ioa_ ("Mode Register: ^12.3b", dump.modereg);
	if dump.cmodereg ^= "0"b then call ioa_ ("Cache Mode Register: ^12.3b", dump.cmodereg);
	if dump.bar ^= "0"b then call ioa_ ("Base Address Register: ^12.3b", dump.bar);
	call init_scu_data;
	return;
     end init_dump_display;
%page;


/* display_regs - internal proc to display processor registers included in machine conditions */


display_regs_:
     proc;


	call ioa_ ("Processor Registers:");
	call ioa_ ("^3xX0 - ^o X1 - ^o X2 - ^o X3 - ^o^/^3xX4 - ^o X5 - ^o X6 - ^o X7 - ^o", fixed (mc.regs.x (0), 18),
	     fixed (mc.regs.x (1), 18), fixed (mc.regs.x (2), 18), fixed (mc.regs.x (3), 18), fixed (mc.regs.x (4), 18),
	     fixed (mc.regs.x (5), 18), fixed (mc.regs.x (6), 18), fixed (mc.regs.x (7), 18));

	call ioa_ ("^3xA Register - ^12.3b Q Register - ^12.3b E Register - ^o", mc.regs.a, mc.regs.q,
	     fixed (mc.regs.e, 8));

	call ioa_ ("^3xTimer Register - ^9.3b Ring Alarm Register - ^1.3b", mc.t, mc.ralr);

	return;
     end display_regs_;
display_x_reg:
     proc (i);
dcl  i fixed bin;
	call ioa_ ("X^1d ^o", i, fixed (mc.regs.x (i), 18));
     end display_x_reg;
display_aq_reg:
     proc (a);
dcl  a bit (1);
	if a then
	     call ioa_ ("A REG ^12.3b", mc.regs.a);
	else call ioa_ ("Q REG ^12.3b", mc.regs.q);
     end display_aq_reg;
%page;
display_misc_:
     proc;

	if mc.mask ^= "0"b then
	     call ioa_ ("Mem Controller Mask: ^12.3b ^12.3b", substr (mask, 1, 36), substr (mask, 37, 36));
	call display_mc_code;
	call interpret_fault_reg (mc.fault_reg);
	if mc.cpu_type = 1 then
	     if mc.ext_fault_reg ^= "0"b then call interpret_ext_fault_reg (mc.ext_fault_reg);
	call display_time;


     end display_misc_;
%page;
display_time:
     proc;

dcl dt_form char(41) int static options(constant) init(
    "^yc-^my-^dm ^Hd:^MH:^SM.^US ^xxxxza^xxxda");
dcl date_time_$format entry(char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);

	call ioa_ ("MC Fault Time: ^a  (^18.3b)",
	           date_time_$format(dt_form, fixed (mc.fault_time, 71),"",""), mc.fault_time);
     end display_time;


display_mc_code:
     proc;
	if mc.errcode ^= 0 then do;
	     error_code_mc = mc.errcode;
	     call convert_status_code_ (error_code_mc, (""), aligned_error_message);
	     call ioa_ ("MC.ERRCODE:^/^a", rtrim (aligned_error_message));
	     end;
     end display_mc_code;
%page;
/*  display_eis_info, internal proc to display Eis pointers and lengths */

display_eis_info_:
     proc;
dcl  eis_info_ptr ptr;
dcl  1 eis_info_fmt based (eis_info_ptr),
       2 mbz1 bit (9) unal,
       2 neg_over bit (1) unal,
       2 pd1 bit (2) unal,
       2 char_tally bit (24) unal,
       2 empty_word bit (36) unal,
       2 dec1,
         3 cur_wd_off bit (18) unal,
         3 cur_char_off bit (2) unal,
         3 cur_bit_off bit (4) unal,
         3 pd2 bit (1) unal,
         3 data_mode bit (2) unal,
         3 pd3 bit (3) unal,
         3 ingore_seg bit (1) unal,
         3 first_time_used bit (1) unal,
         3 active bit (1) unal,
         3 pd4 bit (3) unal,
         3 level_count bit (9) unal,
         3 pd5 bit (3) unal,
         3 residue fixed bin (23) signed unal,
       2 dec2,
         3 cur_wd_off bit (18) unal,
         3 cur_char_off bit (2) unal,
         3 cur_bit_off bit (4) unal,
         3 d2pd1 bit (1) unal,
         3 data_mode bit (2) unal,
         3 d2pd2 bit (3) unal,
         3 rpt_cycle bit (1) unal,
         3 or_d2du_first bit (1) unal,
         3 active bit (1) unal,
         3 d2pd3 bit (1) unal,
         3 first_time bit (1) unal,
         3 d2du bit (1) unal,
         3 d2mbz bit (9) unal,
         3 d2pd4 bit (3) unal,
         3 residue fixed bin (23) signed unal,
       2 dec3,
         3 cur_wd_off bit (18) unal,
         3 cur_char_off bit (2) unal,
         3 cur_bit_off bit (4) unal,
         3 d3pd1 bit (1) unal,
         3 data_mode bit (2) unal,
         3 d3pd2 bit (3) unal,
         3 rpt_cycle bit (1) unal,
         3 first_time bit (1) unal,
         3 active bit (1) unal,
         3 jump_add_ind bit (3) unal,
         3 mbz bit (9) unal,
         3 d3pd3 bit (3) unal,
         3 residue fixed bin (23) signed unal;
dcl  three_desc bit (3) init ("100"b) static options (constant);

	call ioa_ ("EIS Pointers and Lengths:^/");

	eis_info_ptr = addr (mc.eis_info);

	if eis_info_fmt.char_tally ^= "0"b then call ioa_ ("^5xTally count = ^8.3b", eis_info_fmt.char_tally);
	if dec1.active then do;

	     call ioa_ ("^-DESC1 active ");
	     if scu.tsr_stat.tsna.prv then
		call ioa_ ("^-^2xUsing PR^1.3b segment number ^o", scu.tsr_stat.tsna.prn,
		     substr (unspec (mc.prs (fixed (scu.tsr_stat.tsna.prn, 3))), 4, 15));



	     call ioa_ ("^-Cur word ptr ^6.3b char ^1.2b bit ^4b^/^-^2x data_mode ^d, level_count ^d, residue ^d",
		dec1.cur_wd_off, dec1.cur_char_off, dec1.cur_bit_off, fixed (dec1.data_mode, 2),
		fixed (dec1.level_count, 8), dec1.residue);
	     end;
	else do;
	     call ioa_ ("^-DESC1 inactive");
	     end;
	if dec2.active then do;
	     call ioa_ ("^-DESC2 active ");
	     if scu.tsr_stat.tsnb.prv then
		call ioa_ ("^-^2xUsing PR^1.3b segment number ^o", scu.tsr_stat.tsnb.prn,
		     substr (unspec (mc.prs (fixed (scu.tsr_stat.tsnb.prn, 3))), 4, 15));
	     call ioa_ ("^-Cur word ptr ^6.3b, char ^2b ^4b^/^-^2x data_mode ^d, residue ^d", dec2.cur_wd_off,
		dec2.cur_char_off, dec2.cur_bit_off, fixed (dec2.data_mode, 2), fixed (dec2.residue, 23));
	     end;
	else do;
	     call ioa_ ("^-DESC2 inactive");
	     end;
	if dec3.jump_add_ind ^= three_desc then goto eis_oct;

	if dec3.active then do;
	     call ioa_ ("^-DESC3 active ");
	     if scu.tsr_stat.tsnc.prv then
		call ioa_ ("^-^2xUsing PR^1.3b segment number ^o", scu.tsr_stat.tsnc.prn,
		     substr (unspec (mc.prs (fixed (scu.tsr_stat.tsnc.prn, 3))), 4, 15));

	     call ioa_ ("^-Cur word ptr ^6.3b, char ^2b ^4b^/^-^2x residue ^d", dec3.cur_wd_off, dec3.cur_char_off,
		dec3.cur_bit_off, fixed (dec3.residue, 23));

	     end;
	else do;
	     call ioa_ ("^-DESC3 inactive");
	     end;
eis_oct:
	if arg_bits_def.long then
	     call ioa_ ("^-^4(^w ^)^/^-^4(^w ^)", mc.eis_info (0), mc.eis_info (1), mc.eis_info (2), mc.eis_info (3),
		mc.eis_info (4), mc.eis_info (5), mc.eis_info (6), mc.eis_info (7));
	return;
     end display_eis_info_;
%page;

/* display_pr_regs - internal proc to display pointer registers */

display_pr_regs_:
     proc;

dcl  i fixed bin;
	call ioa_ ("Pointer Registers:");
	do i = 0 to 7;
	     call print_pr_reg (i);
	end;
	return;
     end display_pr_regs_;


print_pr_reg:
     proc (i);
dcl  i fixed bin;
	PR_ptr = addr (mc.prs (i));
	if PR_ptr -> its.its_mod ^= "100011"b then
	     call ioa_ (ptrfmt || "^w ^w", i, i + 1, pwrd.w1, pwrd.w2);
	else do;
	     call ioa_$rsnnl (ptrfmt || "^p", PTR_STR, j, i, i + 1, mc.prs (i));

	     call ioa_ ("^3x^22a ^a", PTR_STR, amu_$get_name (amu_info_ptr, mc.prs (i)));
	     if arg_bits_def.long then call ioa_ ("^-^5x^w ^w", pwrd.w1, pwrd.w2);
	     end;
     end print_pr_reg;


%page;


display_scu_:
     proc;

	call ioa_ ("SCU Data:");

	if arg_bits_def.long then			/* user wants octal dump too */
	     call ioa_ ("^-^4(^w ^)^/^-^4(^w ^)^/", mc.scu (0), mc.scu (1), mc.scu (2), mc.scu (3), mc.scu (4),
		mc.scu (5), mc.scu (6), mc.scu (7));

	if non_val_flt then call ioa_ ("Fault/Interrupt (^o), Undefined", fault_index);
	call print_ppr;
	if ^tsrpr then call print_tpr;
	call ioa_ ("On: cpu ^a (#^o)", cpul (fixed (scu.cpu_no, 3)), fixed (scu.cpu_no, 3));
	flt_ln = "";
	byptr = addr (scu.ilc);			/* display Indicator register if any bits present  */
	do i = lbound (indrs, 1) to hbound (indrs, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, indrs (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("Indicators: ^a", flt_ln);
	     flt_ln = "";
	     end;
	byptr = addr (scu.ppr);			/* display interpreted APU status if any bits present */
	do i = lbound (APU, 1) to hbound (APU, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, APU (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("APU Status: ^a", flt_ln);
	     flt_ln = "";
	     end;
	byptr = addr (scu.ca);			/* display interprted CU status if any bits present */
	do i = lbound (CU, 1) to hbound (CU, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, CU (i));
	end;

	TAG_ptr = addr (TAG_table);
	i = fixed (scu.cpu_tag, 6);

	if i ^= 0 then do;
	     tag_ = TAG.code (i + 1);
	     tag_prt = "1"b;
	     end;

	if (flt_ln ^= "") | (tag_ ^= "") then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("CU Status:  ^a  ^[^/CT Hold: ^a^]", flt_ln, tag_prt, tag_);
	     end;
	call print_inst;

	return;


     end display_scu_;
%page;


print_ppr:
     proc;
	byptr = addrel (baseptr (fixed (scu.ppr.psr, 18)), fixed (scu.ilc, 18));
	by_name = amu_$get_name (amu_info_ptr, byptr);
	call ioa_ ("^a: ^p  ^a", at_by_wd, byptr, by_name);


     end print_ppr;

print_tpr:
     proc;
	refptr = addrel (baseptr (fixed (scu.tpr.tsr, 18)), fixed (scu.ca, 18));
	ref_name = amu_$get_name (amu_info_ptr, refptr);
	call ioa_ ("Ref: ^p  ^a", refptr, ref_name);
     end print_tpr;

print_inst:
     proc;
	iocb_name = iocbp -> iocb.name;
	call ioa_ ("Instructions: ");			/* display Instructions (words 6 & 7) */
	call db_print (iocbp, iocb_name, addr (scu.even_inst), "i", inst6, 1, null, 0, 0);
	call db_print (iocbp, iocb_name, addr (scu.odd_inst), "i", inst6 + 1, 1, null, 0, 0);
     end print_inst;

/* Internal procedure to print fault reg data */

interpret_fault_reg:
     proc (fault_reg);

dcl  fault_reg bit (36);
dcl  (fault_no, break) fixed bin;
dcl  1 illeg_acts based (addr (fault_reg)),
       (
       2 pad bit (16),
       2 IA (4) bit (4),
       2 pad1 bit (4)
       ) unal;

	if fault_reg = "0"b then return;

	line1, line2 = "";

	do fault_no = 1 to 15;
	     if substr (fault_reg, fault_no, 1) = "1"b then do;
		line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		line1_sw = "1"b;
		end;
	end;

	break = 0;
	do fault_no = 1 to 4 while (break = 0);		/* do IAs now */
	     if IA (fault_no) then do;
		line2 = "Illegal Action on CPU Port " || port_name (fault_no);
		line2 = line2 || SC_IA_TYPES (bin (IA (fault_no), 4)) || ", ";
		line2_sw = "1"b;
		break = 1;
		end;
	end;

	do fault_no = 33 to 36;
	     if substr (fault_reg, fault_no, 1) = "1"b then do;
		line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		line1_sw = "1"b;
		end;
	end;

	if line1_sw then /* remove trailing comma & space */ line1 = substr (line1, 1, (length (line1) - 2));
	if line2_sw then line2 = substr (line2, 1, (length (line2) - 2));

	call ioa_ ("Fault Register: ^12.3b^[  (^a)^;^s^]^[^/^17t(^a)^]", fault_reg, line1_sw, line1, line2_sw, line2);

	return;

%page;

     end interpret_fault_reg;


interpret_ext_fault_reg:
     proc (ext_fault_reg);

dcl  ext_fault_reg bit (15);
dcl  indx fixed bin;

	line1 = "";
	do indx = 1 to 15;
	     if substr (ext_fault_reg, indx, 1) = "1"b then line1 = line1 || EXT_FAULT_TYPES (indx) || ", ";
	end;

	if line1 ^= "" then do;
	     line1 = substr (line1, 1, (length (line1) - 2));
	     call ioa_ ("DPS8 Extended Fault Register: ^5.3b (^a)", ext_fault_reg, line1);
	     end;


	return;

     end interpret_ext_fault_reg;

error_return:
	P_code = code;
	return;

/* INCLUDE FILES */

%page;
%include iocb;
%page;
%include bos_dump;
%page;
%include mc;
%page;
%include its;
%page;
%include amu_info;
%page;
%include amu_mc;

     end azm_display_mc_;
