/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


retv_notify_: proc (message, inputp, myname);

/* This proc prints informative messages and notifies the user if requested */

dcl  message char (*);
dcl  myname char (*);
dcl  new_message char (256);
dcl  code fixed bin (35);
dcl  ignore fixed bin(35);

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  retv_report_$error_output entry options (variable);
dcl  request_id_ entry (fixed bin (71)) returns (char (19));
dcl  send_message_$notify_mail entry (char (*), char (*), fixed bin (35));
dcl  send_mail_$access_class entry (char (*), char (*), ptr, bit (72) aligned, fixed bin (35));

dcl (addr, substr, after, reverse) builtin;

%include retv_input;
%include retv_request;
%include send_mail_info;
%include queue_msg_hdr;

	send_mail_info.version = send_mail_info_version_2;
	send_mail_info.sent_from = "Volume Retriever";
	send_mail_info.wakeup = "0"b;
	send_mail_info.always_add = "1"b;
	send_mail_info.never_add = "0"b;
	send_mail_info.acknowledge = "0"b;
	call ioa_ ("^a", message);
	if retv_input.notify then do;
	     call ioa_$rsnnl ("ID: ^a ^a", new_message, (0), substr (request_id_ (retv_input.msg_time), 7, 8),
		message);
	     call send_mail_$access_class (mail_destination_ (), new_message,
		addr (send_mail_info), retv_input.access_class, code);
	     if code ^= 0 then
		call retv_report_$error_output (code, myname, "Unable to notify ^a",
		mail_destination_ ());
	     call send_message_$notify_mail (mail_destination_ (), "", ignore);
	end;

mail_destination_: proc returns (char (32));

/* This proc constructs the mail/send_message  destination from the requestor's name */

	     return (reverse (after (reverse (retv_input.requestor), ".")));
	end mail_destination_;
     end retv_notify_;
