/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


retv_account_: proc;

/* This routine provides all the accounting functions for the volume retriever.  It creates and initializes the
   account segment in the directory >system_control_1>volume_backup_accounts with a time stamp name. For each object that the
   retriever recovers, the requestors name is entered into the account segment, if not already there, and the
   objects recovered count is incremented by one. A test entry is provided to bypass the system directory. */

dcl  test_dir char (*);
dcl  ename char (32) aligned;
dcl  code fixed bin (35);
dcl  enl fixed bin;
dcl  time_string char (15) aligned;
dcl  i fixed bin;
dcl  found bit (1);
dcl  requestor char (*);

dcl  myname char (32) int static init ("retv_account_") options (constant);

dcl  retv_report_$error_output entry options (variable);
dcl  get_wdir_ entry returns (char (168) aligned);
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  ioa_$rsnnl entry options (variable);
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35));

dcl (addr, substr, clock) builtin;

%include retv_data_;
%include retv_account_seg;

create:	entry (code);

/* This entry creates an retrieval account seg with a time stamp name, initializes it and sets the
   static ptr to it. */

	code = 0;
	call date_time_ (clock (), time_string);
	call ioa_$rsnnl ("^a.^a.^a", ename, enl, "retv_account", substr (time_string, 1, 8), substr (time_string, 11, 4));
	call hcs_$make_seg (retv_account_dir, ename, "", 01011b, rasp, code);
	if code ^= 0 then do;
	     call retv_report_$error_output (code, myname, "Unable to create ^a>^a", retv_account_dir, ename);
	     return;
	end;
	retv_account_seg.version = retv_account_seg_version_1;
	retv_data_.rasp = rasp;
	return;

update:	entry (requestor);

/* This entry adds the requestors name to the next empty slot in the accounting table, if not already in the table,
   and incremets the count of objects recovered. */

	rasp = retv_data_.rasp;
	found = "0"b;
	do i = 1 to retv_account_seg.next while (^found);
	     rasep = addr (retv_account_seg.array (i));
	     if rase.requestor = requestor then do;
		found = "1"b;
		rase.n_objects = rase.n_objects + 1;
	     end;
	end;
	if ^found then do;
	     retv_account_seg.next = retv_account_seg.next + 1;
	     rasep = addr (retv_account_seg.array (i));
	     rase.requestor = requestor;
	     rase.n_objects = 1;
	end;
	return;

test:	entry (test_dir);

/* This entry allows testing by resetting the directory in which the account seg is created */

	retv_account_dir = test_dir;
	return;

     end retv_account_;
