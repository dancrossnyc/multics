/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-12-12,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
      Written by Jim Lippard.
  2) change(87-04-26,GDixon), approve(87-07-12,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */

/* This module is the server for the absentee command AS request.  It logs
   in absentees and cancels running absentees.  */
asr_abs_command_server_: proc (P_asr_info_ptr, P_asr_sender_ptr);

	dcl     (P_asr_info_ptr, P_asr_sender_ptr) ptr parameter;

	dcl     absentee_user_manager_$login_any_absentee entry;
	dcl     absentee_user_manager_$cancel_absentee entry (ptr);

	dcl     absentee_utility_$check_queue_access entry (ptr, ptr) returns (bit (1) aligned);

	dcl     as_access_audit_$abs_command_cancel entry (ptr, ptr, fixed bin (71), bit (1) aligned);
	dcl     as_access_audit_$abs_command_login entry (ptr);

	dcl     as_send_user_message_	 entry (char (*), char (*), char (*), char (*), bit (72) aligned, char (*), bit (1) aligned);

	dcl     (error_table_$as_bump_user_not_found,
	        error_table_$insufficient_access,
	        error_table_$undefined_order_request,
	        error_table_$unimplemented_version) external fixed bin (35);

	dcl     ioa_$rsnnl		 entry () options (variable);

	dcl     sys_log_		 entry options (variable);

	dcl     error_message	 char (256);

	dcl     found		 bit (1) aligned;

	dcl     idx		 fixed bin;

	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);

	dcl     (addr, after, length, null, reverse)
				 builtin;
%page;

/* Initialize variables. */
	asr_abs_command_info_ptr = P_asr_info_ptr;
	as_request_sender_ptr = P_asr_sender_ptr;
	asr_reply_ac_ptr = addr (as_request_sender.reply_message);
	asr_reply_abs_command.code = 0;

/* Make sure structure version is correct. */
	if asr_abs_command_info.version ^= ASR_AC_INFO_VERSION_1 then do;
		asr_reply_abs_command.code = error_table_$unimplemented_version;
		call ioa_$rsnnl ("An invalid structure was passed in the AS request.", error_message,
		     length (error_message));
		go to RETURN_FROM_ASRACS;
	     end;

/* Make sure the AS request specifies a known action. */
	if asr_abs_command_info.action_code ^= ASR_AC_LOGIN & asr_abs_command_info.action_code ^= ASR_AC_CANCEL then do;
		asr_reply_abs_command.code = error_table_$undefined_order_request;
		call ioa_$rsnnl ("An invalid action was specified in the AS request.", error_message,
		     length (error_message));
		go to RETURN_FROM_ASRACS;
	     end;

/* CANCEL:  requires access checking. */
	if asr_abs_command_info.action_code = ASR_AC_CANCEL then do;

/* Find AUT entry for the specified absentee job. */
		found = FALSE;
		autp = as_data_$autp;
		do idx = 1 to autbl.current_size while (^found);
		     utep = addr (autbl.entry (idx));
		     if ute.active >= NOW_HAS_PROCESS
			& ute.request_id = asr_abs_command_info.request_id then found = TRUE;
		end;

/* Absentee not found.  Log it. */
		if ^found then do;
			call sys_log_ (SL_LOG_SILENT,
			     "asr_abs_command_server_: Request ^d not found, could not cancel for ^a.",
			     asr_abs_command_info.request_id, as_request_sender.group_id);
			asr_reply_abs_command.code = error_table_$as_bump_user_not_found;
			call ioa_$rsnnl ("Request ^d is not logged in.", error_message, length (error_message),
			     asr_abs_command_info.request_id);
			goto RETURN_FROM_ASRACS;
		     end;

/* Check user's queue access for this job. */
		if ^absentee_utility_$check_queue_access (utep, as_request_sender_ptr) then do;
			call as_access_audit_$abs_command_cancel (utep, as_request_sender_ptr, asr_abs_command_info.request_id, TRUE);
			asr_reply_abs_command.code = error_table_$insufficient_access;
			call ioa_$rsnnl ("You lack permission to bump request ^d.", error_message, length (error_message),
			     asr_abs_command_info.request_id);
			go to RETURN_FROM_ASRACS;
		     end;

/* Log this action. */
		call as_access_audit_$abs_command_cancel (utep, as_request_sender_ptr, asr_abs_command_info.request_id, FALSE);
	     end;					/* CANCEL */

/* Log other actions. */
	if asr_abs_command_info.action_code ^= ASR_AC_CANCEL then
	     call as_access_audit_$abs_command_login (as_request_sender_ptr);

/* Do what we were asked to do.
   For LOGIN, we just notify absentee_user_manager_ that there are some jobs
      waiting to login.
   For CANCEL, we tell absentee_user_manager_ which job and who the requester
      is so that reply messages can be sent.
   In the future there should be action codes added to replace the IPC wakeups
      currently sent by absentees themselves, so that all the IPC code can be
      removed from absentee_user_manager_. */
	if asr_abs_command_info.action_code = ASR_AC_LOGIN then
	     call absentee_user_manager_$login_any_absentee ();

	else if asr_abs_command_info.action_code = ASR_AC_CANCEL then
	     call absentee_user_manager_$cancel_absentee (utep);

RETURN_FROM_ASRACS:

/* Send user mail if code is non-zero. */
	if asr_reply_abs_command.code ^= 0 then do;
		call as_send_user_message_ ("asr_abs_command_server_",
		     reverse (after (reverse (as_request_sender.group_id), ".")),
		     as_request_sender.group_id, error_message,
		     as_request_sender.authorization, "Absentee command server", (FALSE));
	     end;
	return;

%page; %include absentee_user_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_request_header;
%page; %include asr_abs_command;
%page; %include as_request_sender_;
%page; %include dialup_values;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   asr_abs_command_server_: Request REQUEST not found, could not cancel for USER.

   S:     as (severity0)

   T:     $run

   M:     User USER requested cancellation of absentee job REQUEST which did
          not exist.

   A:     $ignore

   END MESSAGE DOCUMENTATION */

     end asr_abs_command_server_;
