/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  smart_alloc_							*/
	/*									*/
	/*      A procedure which performs allocations within areas in an intelligent fashion.	*/
	/*									*/
	/* E__n_t_r_y:  smart_alloc_$smart_alloc_						*/
	/*									*/
	/*      This procedure uses alloc_ to perform an allocation within an area.  If the	*/
	/* allocation fails because the area is full, the procedure signals the "area" condition,	*/
	/* and passes an information structure for use by the handler.  The structure contains	*/
	/* a pointer to the area which is full when the handler is signalled.  On return,	*/
	/* the allocation in reattempted in the area pointed to by this pointer.  The handler	*/
	/* may have changed the pointer to point to a new area, or it may have created more	*/
	/* room in the original area.  If the allocation fails again, the"area condition is	*/
	/* re-signalled, and the process continues.					*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      All procedures which use smart_alloc_ must have the following rename option in 	*/
	/* their procedure statement:							*/
	/*									*/
	/*	<label>: procedure [( <parms> )] options (rename ((alloc_, smart_alloc_)));	*/
	/*									*/
	/*									*/
	/* Within such procedures, all allocations within an area will be performed by 		*/
	/* smart_alloc_.  The same applies to allocations made in procedures which are		*/
	/* internal to procedures using the rename option.				*/
	/*									*/
	/*      A condition handler should be provided for the "area" condition.		*/
	/* One possible handler is available in the msa_manager_ program.			*/
	/*									*/
	/*									*/
	/* A__l_g_o_r_i_t_h_m								*/
	/*									*/
	/* smart_alloc_								*/
	/*									*/
	/*   (1)	allocates space within the area pointed to by Parea, using alloc_;		*/
	/*   (2)	establishes an "area" condition handler which receives control if the		*/
	/*	allocation fails.							*/
	/*   (3)	if the allocation was successful, returns with:				*/
	/*		Preturn = 'pointer to the allocated space';			*/

	/*   (4)	if the allocation failed, then:					*/
	/*	(a)	calls  area_full, passing the size of the space to be		*/
	/*		allocated, Parea - the ptr to the area, and an allocation failure id.	*/
	/*	(b)	reattempts the allocation, using the (possibly-modified) area pointed	*/
	/*		to by Parea for the allocation;				*/
	/*									*/
	/*									*/
	/* E__n_t_r_y:  smart_alloc_$area_full						*/
	/*									*/
	/*      This procedure signals the "area" condition, passing a pointer to an information	*/
	/* structure describing the nature of the condition.  Programs which call lower-ring	*/
	/* subroutines that perform allocations within a caller-supplied area can use this	*/
	/* procedure to recover from allocation failures in these lower-ring subroutines.	*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/* 	dcl  smart_alloc_$area_full entry (fixed bin, ptr, bit(70) aligned);		*/
	/*									*/
	/*	call smart_alloc_$area_full (size, area_ptr, id);				*/
	/*									*/
	/* 1) size	is the amount of space required to satisfy the current allocation.	*/
	/*		If "size" = 0, then the amount of space required to satisfy the 	*/
	/*		the allocation requirements is unknown (eg, if if hcs_$status	*/
	/*		returned an  error_table_$noalloc  error code).			*/
	/*		The caller's "area" handler must make this space 			*/
	/*		available if it returns normally after being signalled.		*/
	/* 2) area_ptr	is a pointer to the area in which the allocation failed.  The value	*/
	/*		of this pointer may be changed by the handler of the "area" condition	*/
	/*		raised by smart_alloc_$area_full.  The new value should be used when	*/
	/*		the allocation is reattempted.				*/
	/* 3) id		is "0"b. (Input)						*/
	/*		is an allocation failure id which should be passed to area_full	*/
	/*		if the allocation fails again. (Output)				*/
	/*									*/
	/* A__l_g_o_r_i_t_h_m								*/
	/*									*/
	/* area_full								*/
	/*									*/
	/*   (1)  assigns a unique bit string to "id" if its "0"b.				*/
	/*   (2)	fills in the information structure shown below, using the size and area_ptr	*/
	/*        parameters, and the assigned allocation failure id.			*/
	/*									*/
	/*  dcl 1 info		aligned,						*/
	/*	2 length		fixed bin,	/* length of this structure (in words)	*/
	/*	2 version		fixed bin,	/* version of this structure (1)	*/
	/*	2 action_flags	aligned,						*/
	/*	  3 cant_restart	bit(1) unal,	/* off => allocation can be restarted.	*/
	/*	  3 default_restart bit(1) unal,	/* off => handler must do something.	*/
	/*	2 info_string	char(256) varying,	/* an informative error message.	*/
	/*	2 status_code	fixed bin(35),	/* error_table_$noalloc		*/
	/*	2 Parea		ptr,		/* ptr to area in which alloc. failed	*/
	/*	2 size		fixed bin,	/* amt of space needed for alloc.	*/
	/*	2 id		bit(70) aligned;	/* allocatin failure id.		*/
	/*									*/
	/*   (3)	signals the "area" condition, passing a pointer to the information structure	*/
	/*	shown above as the "info_ptr" of the signalled condition. (See signal_).	*/
	/*   (4)	returns to its caller.						*/

	/* N__o_t_e_s									*/
	/*									*/
	/* The caller's "area" handler may:						*/
	/*   (1)	execute a non-local go to instruction to terminate the allocation.		*/
	/*   (2)	free at least "size" amount of space in the area pointed to by "area_ptr", so	*/
	/*	that the allocation can be completed, unless "size" is zero, in which case an	*/
	/*	arbitrary amount of space could be freed.  If there were still too little space	*/
	/*	to satisfy the allocation requirements, then the "area" handler could identify	*/
	/*	this condition by observing that "id" is still the same, and could take other	*/
	/*	action, including freeing more space and trying again.			*/
	/*   (3)	change the value of the area pointer which was used in the allocation to point	*/
	/*	to another area in which the allocation would be attempted.  The programmer	*/
	/*	must take care that no dummy arguments are created when this area pointer	*/
	/*	is passed as an argument to another subroutine which will be performing 	*/
	/*	allocations within the area.  If a dummy argument were created, then		*/
	/*	the "area" condition handler could not change the value of the area pointer in	*/
	/*	any subroutine using this dummy pointer.				*/
	/*									*/
	/* E__x_a_m_p_l_e								*/
	/*									*/
	/*      id = "0"b;								*/
	/* call_again:								*/
	/*      call hcs_$status (dir, ent, chase, addr(status_block), area_ptr, code);		*/
	/*      if code = error_table_$noalloc then do;					*/
	/*           call smart_alloc_$area_full (0, area_ptr, id);				*/
	/*	   go to call_again;						*/
	/*	   end;								*/
	/*									*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 1) Created:  Jul, 1972 by G. C. Dixon					*/
	/* 2) Modified: Apr, 1973 by G. C. Dixon; use "id" instead of a fixed bin(35) number.	*/
	/* 3) Modified: Jul, 1973 by G. C. Dixon; include standard condition info header in info	*/
	/*				  structure				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


smart_alloc_:	procedure (Asize, Parea, Preturn);



     dcl						/* 	parameters			*/

	Asize			fixed binary, 	/* size of the space to be allocated. (Input) 	*/
	Parea			ptr,		/* pointer to the allocation area. (Input) 	*/
	Preturn			ptr,		/* pointer to the allocated space. (Output) 	*/

	id			bit(70) aligned;	/* unique id of this allocation failure.	*/


     dcl						/*	automatic variables			*/
	1 info,
	  2 length		fixed bin,	/* length of this structure (in words)		*/
	  2 version		fixed bin,	/* version of this structure (1).		*/
	  2 action_flags		aligned,
	    3 cant_restart		bit(1) unal,	/* off => allocation can be retried.		*/
	    3 default_restart	bit(1) unal,	/* off => allocation will fail again if no action	*/
						/*        is taken except to return.		*/
	    3 pad			bit(34) unal,
	  2 info_string		char(256) var,	/* an information string.			*/
	  2 status_code		fixed bin(35),	/* a status code.				*/
	  2 Parea			ptr,		/* ptr to area in which allocation failed.	*/
	  2 size			fixed bin,	/* amt of space needed for the allocation.	*/
	  2 id			bit(70) aligned,	/* allocation failure id.			*/
	failure_id		bit(70) aligned;


     dcl						/*	program entries and builtin functions	*/
	addr			builtin,
	alloc_			entry (fixed binary, ptr, ptr),
	area			condition,
	null			builtin,
	signal_			entry (char(*), ptr, ptr),
	size			builtin,
	unique_bits_		entry returns (bit(70) aligned);

     dcl						/* 	static variable			*/
	error_table_$noalloc	fixed bin(35) ext static;





	failure_id = "0"b;				/* initialize failure id.			*/
						/* user's "area" condition handler is re-signalled*/
allocate: on area					/* trap "area" condition signalled by alloc_.	*/
	     go to handler;
	call alloc_ (Asize, Parea, Preturn);		/* attempt the allocation. 			*/
	return;

handler:  revert area;				/* revert to the caller's "area" condition	*/
	call area_full (Asize, Parea, failure_id);	/* handler, and call the area_full subroutine.	*/
	go to allocate;				/* then, retry the allocation.		*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



area_full:	entry (Asize, Parea, id);

	if id = "0"b then				/* initialize failure id if it hasn't been done	*/
	     id = unique_bits_();

	info.size = Asize;				/* fill in the values of the data structure to	*/
	info.Parea = Parea;				/* be passed to the user's "area" handler when	*/
	info.id = id;				/* we signal "area".			*/

	info.length = size (info);			/* fill in header section of the data structure.	*/
	info.version = 1;
	info.cant_restart,
	info.default_restart = "0"b;
	info.pad = "0"b;				/* zero pad in case new action flags invented.	*/
	info.info_string = "";
	info.status_code = error_table_$noalloc;

	call signal_ ("area", null, addr (info));	/* signal the "area" condition, and return.	*/

	Parea = info.Parea;				/* return the updated area ptr for calls from	*/
						/* smart_alloc_ because PL/I creates a dummy ptr	*/
						/* to the area when an allocation is made via	*/
						/* an allocate statement.			*/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	end smart_alloc_;
