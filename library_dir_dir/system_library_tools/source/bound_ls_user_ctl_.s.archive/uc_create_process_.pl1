/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-04,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Avoid referencing ute.ln_args if ute.arg_count = 0.
  4) change(87-05-09,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Set number_of_arguments to 0 when ute.arg_count = 0 to avoid unset
     variable.
  5) change(87-05-13,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Move act_ctl_$open_account call from uc_ls_create_request_ into here.
      B) Set pit.line_type from ute.line_type.
      C) Add code to undo steps of process creation when a fatal error occurs.
  6) change(87-05-31,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Assign ute.n_processes+1 to pit.n_processes when filling in the pit,
         since ute.n_processes hasn't been incremented for the new process at
         the point of that assignment. (dsa 227 228)
  7) change(88-02-02,Parisek), approve(88-02-11,MCR7849),
     audit(88-02-23,Lippard), install(88-07-13,MR12.2-1047):
     Added setting of new PIT elements min_ring & max_ring.  Eliminated PIT
     ringpad element. SCP6367
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_create_process_:
     procedure (P_utep, P_code);

/* Parameters */

dcl  P_utep	        ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  aip		        ptr automatic;
dcl  argp		        ptr automatic;
dcl  1 auto_create_info     structure aligned like create_info automatic;
dcl  code		        fixed bin (35) automatic;
dcl  ip		        ptr automatic;
dcl  length_of_arguments    fixed bin automatic;
dcl  length_of_pit	        fixed bin automatic;		/* size of fixed portion */
dcl  number_of_arguments    fixed bin automatic;
dcl  pdtep	        ptr automatic;
dcl  pit_size	        fixed bin automatic;		/* actual size */
dcl  reason	        char (8) aligned automatic;
dcl  satep	        ptr automatic;
dcl  whoptr	        ptr automatic;

/* Based */

dcl  based_arg_string       char (length_of_arguments) based aligned;
dcl  lengths	        (number_of_arguments) fixed bin based aligned;

/* Entries */

dcl  act_ctl_$close_account entry (ptr);
dcl  act_ctl_$cp	        entry (ptr);
dcl  act_ctl_$open_account  entry (ptr);
dcl  as_access_audit_$process entry (ptr, fixed bin, char (*));
dcl  convert_status_code_   entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  hcs_$truncate_seg      entry (ptr, fixed bin (19), fixed bin (35));
dcl  hphcs_$create_proc     entry (ptr, fixed bin (35));
dcl  ioa_$rsnnl	        entry () options (variable);
dcl  pdir_volume_manager_$select_pdir_volume entry (ptr, fixed bin (35));

/* External */

dcl  error_table_$out_of_sequence fixed bin (35) ext static;

/* Constant */

dcl  DEFAULT_CLS_SIZE       fixed bin (35) initial (65536) internal static options (constant);
dcl  DEFAULT_KST_SIZE       fixed bin initial (0) internal static options (constant);
dcl  DEFAULT_LOT_SIZE       fixed bin initial (512) internal static options (constant);
dcl  (FALSE	        initial ("0"b),
     TRUE		        initial ("1"b)) bit (1) aligned internal static options (constant);
dcl  ME		        char (18) initial ("uc_create_process_") internal static options (constant);

/* Builtins */

dcl  (addr, binary, bit, clock, divide, fixed, length, null, rel, rtrim, string,
     substr, unspec)        builtin;

%page;
/* Program */

	call Setup ();
	if ^ute.uflags.proc_create_ok then
	     call Abort (SL_LOG_SILENT, error_table_$out_of_sequence,
		"Called before process creation variables set for ^a.^a.^a.",
		ute.person, ute.project, ute.tag);

	call Setup_PIT ();
	call Setup_Create_Info ();
	call Select_Process_Directory_Volume ();
	call Create_Process ();

	call Update_Whotab ();
RETURN:
	P_code = code;
	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Report errors via sys_log_$general and stop execution.	       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to RETURN;

     end Abort;
%page;
Setup:
     procedure ();
	utep = P_utep;
	code = 0;

	ansp = as_data_$ansp;
	ip = as_data_$rs_ptrs (0);
	satep = ute.uprojp;
	pdtep = ute.pdtep;

	anstbl.current_time = clock ();
	return;
     end Setup;
%page;
Setup_PIT:
     procedure ();

dcl  i		        fixed bin automatic;

	pit_ptr = as_data_$pit_ptr;
	call hcs_$truncate_seg (pit_ptr, 0, code);
	if code ^= 0 then
	     call Abort (SL_LOG_BEEP, code, ME,
		"Truncate pit template failed; creating process for ^a.^a.^a.",
		ute.person, ute.project, ute.tag);

	pit.version = PIT_version_3;
	pit.process_type = ute.process_type;
	pit.login_responder = substr (ute.init_proc, 1, ute.ip_len);
	pit.homedir = ute.home_dir;
	pit.project = ute.project;
	pit.account = "";				/* unused */
	pit.n_processes = ute.n_processes + 1;		/* ute.n_processes hasn't been incremented yet. */
	pit.login_time = ute.login_time;
	pit.proc_creation_time = clock ();
	pit.old_proc_cpu = ute.cpu_usage;		/* will be zero for first process */
	pit.user_weight = ute.user_weight;
	pit.anonymous = ute.anonymous;
	pit.login_name = ute.person;
	pit.logout_pid = anstbl.as_procid;
	pit.logout_channel = ute.event;
	pit.group = ute.group;
	pit.min_ring = ute.lowest_ring;		/* minimum ring */
	pit.max_ring = ute.highest_ring;		/* maximum ring */

	string (pit.at) = string (ute.at);
	pit.whox = ute.whotabx;
	pit.outer_module = ute.outer_module;
	pit.dont_call_init_admin = ute.uflags.dont_call_init_admin;
	pit.terminal_access_class = ""b;		/* not used */
	pit.dollar_charge = user.dollar_charge;
	pit.dollar_limit = user.dollar_limit;
	pit.shift_limit (*) = user.shift_limit (*);
	pit.logins = user.logins;
	pit.crashes = user.crashes;
	pit.interactive (*) = user.interactive (*);
	pit.absentee (*) = user.absentee (*);
	pit.iod (*) = user.iod (*);
	pit.devices (*) = user.devices (*);
	pit.time_last_reset = user.time_last_reset;
	pit.absolute_limit = user.absolute_limit;
	pit.absolute_spent = user.absolute_spent;
	pit.absolute_cutoff = user.absolute_cutoff;
	pit.absolute_increm = user.absolute_increm;
	pit.rs_number = ute.rs_number;
	pit.request_id = ute.request_id;
	pit.authorization_range = ute.process_authorization_range;
/**** TBS: The charge_type is available in the cdte for MCS channels.  If
      this module ever supports MCS, it should be extracted from here. */
	pit.charge_type = 0;
	pit.term_type_name = ute.terminal_type;
	pit.line_type = ute.line_type;
/**** TBS: The tty_type is an obsolete field which is present in the cdte.
      If this module ever supports MCS, it should be extracted from here. */
	pit.tty_type = 0;
/**** TBS: If the value of pit.service is type is used, it will have to
      be conjured up from somewhere.  The cdte, of course, has this value
      for MCS channels.  It was probably only used for the old NCP/FTP. */
	pit.service_type = 0;
	pit.tty_answerback = ute.tty_id_code;
	pit.old_tty = "";
	pit.standby = ute.standby_line;
	pit.login_line = "";			/* unused */
	pit.cant_bump_until = ute.cant_bump_until;	/* 0 for abs & dmn */
	pit.input_seg = ute.input_seg;		/* only valid for absentees */
	pit.output_seg = ute.output_seg;		/* ditto */
	pit.max_cpu_time = ute.max_cpu_time;		/* ditto */
	if ute.process_type = PT_ABSENTEE then
	     pit.abs_queue = ute.queue;
	else pit.abs_queue = -1;
	string (pit.abs_attributes) = "0"b;		/* copy ute abs_attributes bits */
	pit.restartable = ute.restartable;
	pit.user_deferred_until_time = ute.user_deferred_until_time;
	pit.proxy = ute.proxy;
	pit.set_bit_cnt = ute.set_bit_cnt;
	pit.truncate_absout = ute.truncate_absout;
	pit.restarted = ute.restarted;

	aip = addr (pit.start_arg_info);
	pit.arg_info_ptr = fixed (rel (aip));

	pit.old_proc_core = ute.mem_usage;
	pit.old_proc_io_ops = 0;
	pit.tty = ute.tty_name;
	if length (rtrim (pit.tty)) <= length (pit.old_tty) then
	     pit.old_tty = substr (pit.tty, 1, length (pit.old_tty));

	number_of_arguments = ute.arg_count;
	aip -> arg_info.arg_count = number_of_arguments;
	if number_of_arguments > 0 then do;
	     length_of_arguments = ute.ln_args;
	     aip -> arg_info.ln_args = length_of_arguments;
	     argp = ute.arg_lengths_ptr;
	     do i = 1 to number_of_arguments;
		aip -> arg_info.arg_lengths (i) = argp -> lengths (i);
	     end;
	     if length_of_arguments > 0 then do;
		argp = ute.args_ptr;
		aip -> arg_info.args = argp -> based_arg_string;
	     end;
	end;
	else length_of_arguments, aip -> arg_info.ln_args = 0;

	length_of_pit = binary (rel (addr (pit.start_arg_info)), 18);
	pit_size = length_of_pit + number_of_arguments +
	     divide (length_of_arguments + 3, 4, 35, 0) + 2;
	return;

     end Setup_PIT;
%page;
Setup_Create_Info:
     procedure ();


	if anstbl.processid_index > 262140 | anstbl.processid_index < 0 then
	     anstbl.processid_index = 0;
	anstbl.processid_index = anstbl.processid_index + 1;

	auto_create_info.processid.rel_apte = ""b;	/* returned from hardcore */
	auto_create_info.processid.unique_index =
	     bit (fixed (anstbl.processid_index, 18), 18);
	auto_create_info.version = version_of_create_info;
	auto_create_info.term_channel = pit.logout_channel;
	auto_create_info.term_processid = pit.logout_pid;
	auto_create_info.words_of_pit = pit_size;

	if ute.pdir_quota > 0 then			/* nonzero value in PDT of SAT */
	     auto_create_info.record_quota = ute.pdir_quota;
	else do;
	     ute.pdir_quota = installation_parms.default_pdir_seg_quota;
	     auto_create_info.record_quota = ute.pdir_quota;
	end;
	auto_create_info.ppml = 0;			/* obsolete */
	auto_create_info.initial_ring = ute.initial_ring;
	auto_create_info.highest_ring = ute.highest_ring;

	auto_create_info.timax = -1;			/* but see below */
	if ute.process_type = PT_ABSENTEE then
	     if ute.queue > 0 then
		auto_create_info.timax =
		     installation_parms.abs_timax (ute.queue);
	auto_create_info.account_ptr = null ();		/* unused */
	auto_create_info.pit_ptr = pit_ptr;

	call ioa_$rsnnl ("^[anonymous^s^;^a^].^a.^a",
	     auto_create_info.process_group_id, (0),
	     (ute.anonymous = 1), ute.person, ute.project, ute.tag);

	auto_create_info.user_processid = "";		/* unused */
	auto_create_info.account_id = "";		/* unused */
	auto_create_info.homedir = rel (addr (pit.homedir));

	auto_create_info.lot_in_stack = TRUE;
	if ute.lot_size = 0 then
	     auto_create_info.lot_size = DEFAULT_LOT_SIZE;
	else if ute.lot_size > 0 then
	     auto_create_info.lot_size = ute.lot_size;
	else do;
	     auto_create_info.lot_size = -(ute.lot_size);
	     auto_create_info.lot_in_stack = FALSE;
	end;

	auto_create_info.cls_in_stack = FALSE;
	if ute.cls_size = 0 then
	     auto_create_info.cls_size = DEFAULT_CLS_SIZE;
	else if ute.cls_size > 0 then
	     auto_create_info.cls_size = ute.cls_size;
	else do;
	     auto_create_info.cls_size = -(ute.cls_size);
	     auto_create_info.cls_in_stack = TRUE;
	end;

	if ute.kst_size = 0 then
	     auto_create_info.kst_size = DEFAULT_KST_SIZE;
	else auto_create_info.kst_size = ute.kst_size;

	auto_create_info.dont_call_init_admin = ute.uflags.dont_call_init_admin;
	auto_create_info.audit = ute.audit;
	auto_create_info.process_authorization = ute.process_authorization;
	auto_create_info.max_process_authorization =
	     ute.process_authorization_range (2);
	auto_create_info.work_class = ute.work_class;
	auto_create_info.subsystem = substr (ute.init_proc, ute.ip_len + 1,
	     ute.ss_len);

	ute.pdir_dir_quota = installation_parms.default_pdir_dir_quota;
	auto_create_info.dir_quota = ute.pdir_dir_quota;
	return;
     end Setup_Create_Info;
%page;
Select_Process_Directory_Volume:
     procedure ();

/**** Chose a process directory logical volume for this process */

	if ^as_data_$debug_flag then do;
	     call pdir_volume_manager_$select_pdir_volume (utep, code);
	     if code ^= 0 then
		call Log_Error_with_Code (SL_LOG_BEEP, code, ME,
		     "Assigning pdir volume for ^a.^a.^a",
		     ute.person, ute.project, ute.tag);
	end;
	return;
     end Select_Process_Directory_Volume;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Log_Error_with_Code: log an error via sys_log_$general and continue       */
/* execution.						       */
/*							       */
/* Syntax:  call Log_Error_with_Code (severity, code, ioa_ctl, args);	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Log_Error_with_Code:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));

     end Log_Error_with_Code;
%page;
Create_Process:
     procedure ();

	ute.n_processes = ute.n_processes + 1;
	if ute.n_processes = 1 then			/* not new proc? */
	     call act_ctl_$open_account (utep);

	call hphcs_$create_proc (addr (auto_create_info), code);
	if code ^= 0 then do;
	     ute.active = NOW_LOGGED_IN;
	     ute.uflags.proc_create_ok = FALSE;
	     call convert_status_code_ (code, reason, "");
	     call as_access_audit_$process (utep, -AS_AUDIT_PROCESS_CREATE,
		(reason));
	     call act_ctl_$close_account (utep);
	     call Abort (SL_LOG, code, ME,
		"Could not create process for ^a.^a.^a.",
		ute.person, ute.project, ute.tag);
	end;

	ute.proc_id = unspec (auto_create_info.processid);
	ute.active = NOW_HAS_PROCESS;
	ute.destroy_flag = WAIT_LOGOUT_SIG;
	call as_access_audit_$process (utep, AS_AUDIT_PROCESS_CREATE, "");
	call act_ctl_$cp (utep);
	return;
     end Create_Process;
%page;
Update_Whotab:
     procedure ();

/**** Various items in the whotab entry for the user were not filled in at
      login time because the values were not known.  They are updated now. */

dcl  whotab_idx	        fixed bin automatic;

	whoptr = as_data_$whoptr;

/**** Update the number of load control units in the whotab header */

	whotab.n_units = whotab.n_units + ute.user_weight;

/**** Update the per-user whotab values if the user has a whotab entry */

	if ute.whotabx ^= 0 then do;			/* user has a whotab entry */
	     whotab_idx = ute.whotabx;
	     whotab.e (whotab_idx).units = ute.user_weight;
	     whotab.e (whotab_idx).stby = ute.standby_line;
	     whotab.e (whotab_idx).group = ute.group;
	     whotab.e (whotab_idx).cant_bump_until = ute.cant_bump_until;
	end;
	return;
     end Update_Whotab;
						/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include access_audit_bin_header; /* needed by PL/I */
%page; %include as_audit_structures;
%page; %include create_info;
%page; %include dialup_values;
%page; %include installation_parms;
%page; %include pdt;

dcl  pdtp		        ptr automatic init (null);	/* pdt needs it */
%page; %include pit;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include whotab;

end uc_create_process_;
