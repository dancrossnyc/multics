/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-08,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-08,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-08,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Logout user (updating who_tab as well) if operator login denied by
         mc_commands_$mc_login.  Also, destroy the user table entry.
      B) Null login_server_operator_response.process_group_id when operator
         login fails.
      C) Use sys_log_$general to report errors.
      D) Null login_server_operator_request.person_id, project_id,
         virtual_channel for non-I&A logins, rather than depending upon the
         login server to do this.
      E) Updated for change to user_table_entry.incl.pl1.
  3) change(87-06-11,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Change calling sequence of mc_commands_$mc_login to pass utep, so
         Initializer process_id can be filled in after the channel has been
         added to mc_anstbl.  This allows operator to drop the channel rather
         than accepting it.
  4) change(87-06-26,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Pass connection_info.access_class_range to mc_commands_$mc_login for
         use in the operator login audit message.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,insnl */

uc_ls_operator_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr
		        ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  ls_termination_event_channel
		        fixed bin (71) automatic;

/* Entries */

dcl  mc_commands_$mc_login  entry (char (*), char (*), ptr, char (*), (2) bit (72) aligned, bit (36) aligned,
		        fixed bin (71), fixed bin (71), bit (72) aligned, fixed bin (35));
dcl  uc_logout_	        entry (ptr, char (*));
dcl  user_table_mgr_$free
		        entry (ptr);
dcl  user_table_mgr_$utep_from_handle
		        entry (bit (72) aligned) returns (ptr);

/* External */

dcl  error_table_$bad_arg   fixed bin (35) ext static;
dcl  error_table_$id_not_found
		        fixed bin (35) ext static;
dcl  error_table_$unimplemented_version
		        fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (23) initial ("uc_ls_operator_request_") internal static options (constant);

dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Builtin */

dcl  (addr, currentsize, null, unspec)
		        builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* Program */

	ls_request_ptr = P_ls_request_ptr;
	ls_response_ptr = P_ls_response_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;
	ls_request_server_info_ptr = P_ls_request_server_info_ptr;

	code = 0;

	if login_server_operator_request.request_version ^=
	     LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1
	then call Abort (error_table_$unimplemented_version,
		"Version of login_server_operator_request is ^a, ^a expected.",
		login_server_operator_request.request_version,
		LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* The operator request can be sent to us either with or without user	       */
/* identification and authentication.  This occurs when when the user types  */
/* "d system" without specifying "-user Personid.Projectid".  In this case,  */
/* there will not be any user table entry associated with this request.  We  */
/* can tell this from the handle supplied by the login server.  If it is 0,  */
/* then no validation has been performed and there is no UTE associated with */
/* the request.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if login_server_operator_request.initializer_handle = ""b
	then do;
	     utep = null ();			/* no I&A */
	     login_server_operator_request.person_id,
		login_server_operator_request.project_id,
		login_server_operator_request.virtual_channel = "";
	end;
	else do;
	     utep = user_table_mgr_$utep_from_handle
		(login_server_operator_request.initializer_handle);
	     if utep = null ()
	     then call Abort (error_table_$id_not_found,
		     "Could not locate user table entry for handle ^24.3b.",
		     login_server_operator_request.initializer_handle);
	end;

	if utep ^= null ()
	then if login_server_operator_request.person_id ^= ute.person
		| login_server_operator_request.project_id ^= ute.project
	     then call Abort (error_table_$bad_arg,
		     "Person.project in operator request (^a.^a) do not match UTE (^a.^a)",
		     login_server_operator_request.person_id,
		     login_server_operator_request.project_id,
		     ute.person, ute.project);

	if utep ^= null ()
	then ls_termination_event_channel =
		ute.login_server_info.termination_event_channel;
	else ls_termination_event_channel =
		login_server_operator_request.terminate_event_channel;

	call mc_commands_$mc_login (
	     (login_server_operator_request.connection_info.connection_name),
	     (login_server_operator_request.person_id), utep,
	     (login_server_operator_request.virtual_channel),
	     login_server_operator_request.connection_info.access_class_range,
	     ls_request_server_info.request_info.sender_process_id,
	     ls_termination_event_channel,
	     login_server_operator_request.header.reply_event_channel,
	     login_server_operator_request.header.reply_handle, code);

/**** If the message coordinator said this was ok, then we don't send the
      response.  We let the MC do it. */

	if code = 0
	then ls_reply_message.flags.do_not_reply = TRUE;
	else do;
	     call Fill_response_structure ();
	     code = 0;
	     if utep ^= null
	     then do;
		call uc_logout_ (utep, "DENIED: login -operator");
		call user_table_mgr_$free (utep);
	     end;
	end;

RETURN:
	P_code = code;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report an error via sys_log_$general and stop execution if a       */
/* nonzero code was given.					       */
/*							       */
/* Syntax:  call Abort (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0
	then go to RETURN;

     end Abort;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Fill_response_structure:
     procedure;

	unspec (login_server_operator_response) = ""b;
	login_server_operator_response.header.message_type =
	     LS_OPERATOR_RESPONSE;
	login_server_operator_response.header.version =
	     LOGIN_SERVER_OPERATOR_RESPONSE_VERSION_1;
	login_server_operator_response.status_code = code;
	login_server_operator_response.process_group_id = "";
	P_ls_response_lth = currentsize (login_server_operator_response);

     end Fill_response_structure;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* format: off */
 %include login_server_messages;
 %include ls_request_server_info;
 %include sys_log_constants;
 %include user_attributes; /* not used, but needed by PL/I */
 %include user_table_entry;

     end uc_ls_operator_request_;
