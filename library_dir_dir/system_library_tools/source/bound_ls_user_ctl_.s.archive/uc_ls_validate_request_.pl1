/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-07,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-24,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-07,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct problem with enter (anonymous no password) logins.
      B) Change wakeup priority for ute.event to coincide with that used by
         dialup_.
      C) Reordered statements to reflect changes to user_table_entry.incl.pl1
         and user_table_entry.incl.pl1 and login_server_validate_response
         structure.
      D) Improved sys_log_ messages.
      E) Added login_server_validate_response.last_incorrect_password.time.
      F) Use login_server_validate_request.connection_info.line_type. (dsa 123)
  3) change(87-05-11,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Use named constants from dialup_values.incl.pl1 for ute.tag values.
  4) change(87-05-13,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Set ute.line_type from login_server_validate_request.line_type.
      B) Remove use of uc_validate_info.line_type.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_validate_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_reply_data_ptr, P_ls_reply_data_lth,
	P_ls_ipc_reply_ptr, P_code);

/**** TBS: Add auditing of errors. */

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_reply_data_ptr    ptr parameter;
dcl  P_ls_reply_data_lth    fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  abort_label	        label automatic;
dcl  1 auto_uc_validate_info aligned like uc_validate_info automatic;
dcl  code		        fixed bin (35) automatic;
dcl  ip		        ptr automatic;
dcl  validate_code	        fixed bin (35) automatic;

/* Entries */

dcl  as_any_other_handler_$no_cleanup entry (char (*), label);
dcl  asu_$setup_login_server_handle entry (ptr);
dcl  ipc_$decl_event_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  uc_login_	        entry (ptr, ptr, fixed bin (35));
dcl  uc_proc_term_handler_  entry (ptr);
dcl  user_table_mgr_$allocate entry (fixed bin) returns (ptr);
dcl  user_table_mgr_$free entry (ptr);

/* External */

dcl  as_error_table_$dialup_error fixed bin (35) ext static;
dcl  as_error_table_$tty_no_room fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (23) initial ("uc_ls_validate_request_") internal static options (constant);

dcl  (ANONYMOUS	        initial (1),
     NOT_ANONYMOUS	        initial (0)) fixed bin internal static options (constant);

dcl  (TRUE	        initial ("1"b),
     FALSE	        initial ("0"b)) bit (1) aligned internal static options (constant);

/* Conditions */

dcl  any_other	        condition;

/* Builtin */

dcl  (addr, currentsize, null, substr, unspec)
		        builtin;
%page;
/* Program */

	utep = null ();
	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;

	abort_label = ERROR_RETURN;
	code = 0;

	on any_other
	     call as_any_other_handler_$no_cleanup (ME, FAULT_LABEL);

	if login_server_validate_request.header.request_version ^=
	     LS_VALIDATE_REQUEST_VERSION_1 then
	     call Abort (SL_LOG_SILENT, error_table_$unimplemented_version,
		"Expected login_server_validate_request version ^a, received ^a.",
		LS_VALIDATE_REQUEST_VERSION_1, login_server_validate_request.header.request_version);

	utep = user_table_mgr_$allocate (PT_INTERACTIVE);
	if utep = null then
	     call Abort (SL_LOG, as_error_table_$tty_no_room,
		"The answer table is full.");
	call ipc_$decl_event_call_chn (ute.event, uc_proc_term_handler_,
	     utep, INT_LOGIN_PRIO, code);
	if code ^= 0 then
	     call Abort (SL_LOG, code,
		"Setting event call handler for user table entry (^p).", utep);


/**** Initialize validate_info and reply_message structures */

	unspec (ls_reply_message) = ""b;

	uc_validate_info_ptr = addr (auto_uc_validate_info);
	unspec (uc_validate_info) = ""b;


/**** Fill in ute from validate request info */

	ute.person = login_server_validate_request.person_id;
	ute.project = login_server_validate_request.project_id;
	if login_server_validate_request.network_connection_type =
	     NETWORK_CONNECTION_DSA_FILE_TRANSFER then
	     ute.tag = TAG_UFT;
	else
	     ute.tag = TAG_INTERACTIVE;

	if login_server_validate_request.flags.anonymous then do;
	     ute.anonymous = ANONYMOUS;
	     uc_validate_info.flags.check_anonymous_password = TRUE;
	end;
	else if login_server_validate_request.flags.anon_no_password then do;
	     ute.anonymous = ANONYMOUS;
	     uc_validate_info.flags.check_anonymous_password = FALSE;
	end;
	else ute.anonymous = NOT_ANONYMOUS;

	ute.network_connection_type =
	     login_server_validate_request.network_connection_type;
	ute.tty_name =
	     login_server_validate_request.connection_info.connection_name;
	ute.tty_id_code =
	     login_server_validate_request.connection_info.terminal_id;
	ute.terminal_type =
	     login_server_validate_request.connection_info.terminal_type;
	ute.line_type =
	     login_server_validate_request.connection_info.line_type;

	if login_server_validate_request.flags.auth_given then do;
	     ute.login_flags.auth_given = TRUE;
	     ute.process_authorization =
		login_server_validate_request.authorization;
	end;

	ute.login_flags.cpw =
	     login_server_validate_request.flags.change_password;
	ute.login_flags.generate_pw =
	     login_server_validate_request.flags.gpw;

	ute.login_flags.cdp =
	     login_server_validate_request.flags.change_default_proj;
	ute.login_flags.cda =
	     login_server_validate_request.flags.change_default_auth;

	if ute.login_flags.cpw then do;
	     uc_validate_info.password =
		login_server_validate_request.new_password;
	     ute.old_password =
		login_server_validate_request.current_password;
	end;
	else uc_validate_info.password =
		login_server_validate_request.current_password;

/**** The operator flag indicates that the user wants to log in as an
      operator.  This is the functional replacement of "dial system.". */

	ute.login_flags.operator = login_server_validate_request.flags.operator;

	ute.login_server_info.his_handle =
	     login_server_validate_request.header.reply_handle;
	ute.login_server_info.process_id =
	     ls_request_server_info.request_info.sender_process_id;
	ute.login_server_info.response_event_channel =
	     login_server_validate_request.header.reply_event_channel;
	ute.login_server_info.termination_event_channel =
	     login_server_validate_request.terminate_event_channel;


/**** Finish filling in uc_validate_info */

	uc_validate_info.channel_info.access_class_range (*) =
	     login_server_validate_request.connection_info.access_class_range;

/**** TBS: At present, there is no check to see if a user, undergoing I&A,
      has access to use the particular channel on which he is attempting to
      log in.  This really should be done by the AS since we can reject the
      login as we do for MCS channels if the user lacks appropriate access.
      For the time being, however, we perform no discretionary access checking
      on the login channel name. */

	uc_validate_info.flags.check_channel_access = FALSE;


/**** Clear out message buffer used to hold login messages for the user */

	as_data_$ls_message_buffer_cur_lth = 0;

	call uc_login_ (uc_validate_info_ptr, utep, validate_code);

/**** Validate_code gets placed in the response record. */

	if validate_code = 0 then
	     call asu_$setup_login_server_handle (utep);

	call Setup_Response ();

	if validate_code ^= 0 then
	     goto ERROR_RETURN;
	else
	     goto RETURN;
FAULT_LABEL:
	code = as_error_table_$dialup_error;
ERROR_RETURN:
	if utep ^= null () then
	     call user_table_mgr_$free (utep);
RETURN:
	P_code = code;
	return;
%page;
Setup_Response:
     procedure ();

	ls_response_ptr = P_ls_reply_data_ptr;
	unspec (login_server_validate_response) = ""b;

	login_server_validate_response.header.message_type =
	     LS_VALIDATE_RESPONSE;
	login_server_validate_response.header.header_pad = ""b;
	login_server_validate_response.header.version =
	     LS_VALIDATE_RESPONSE_VERSION_1;

	login_server_validate_response.handle =
	     ute.login_server_info.our_handle;
	login_server_validate_response.authorization =
	     ute.process_authorization;
	login_server_validate_response.authorization_range =
	     ute.process_authorization_range;
	login_server_validate_response.status_code = validate_code;
	login_server_validate_response.person_id =
	     substr (ute.person, 1, 22);
	login_server_validate_response.project_id =
	     substr (ute.project, 1, 9);
	login_server_validate_response.n_disconnected_processes =
	     uc_validate_info.number_disconnected_processes;

	login_server_validate_response.previous_login_info.time =
	     uc_validate_info.last_login_info.time;
	login_server_validate_response.previous_login_info.terminal_type =
	     uc_validate_info.last_login_info.terminal_type;
	login_server_validate_response.previous_login_info.terminal_id =
	     uc_validate_info.last_login_info.terminal_id;

	login_server_validate_response.incorrect_passwords =
	     uc_validate_info.last_bad_pw_info.number;
	login_server_validate_response.last_incorrect_password.terminal_type =
	     uc_validate_info.last_bad_pw_info.terminal_type;
	login_server_validate_response.last_incorrect_password.terminal_id =
	     uc_validate_info.last_bad_pw_info.terminal_id;

	if ute.login_result = 1			/* do not allow retry */ then
	     login_server_validate_response.flags.disconnect = TRUE;
	else login_server_validate_response.flags.disconnect = FALSE;
	login_server_validate_response.flags.password_changed =
	     uc_validate_info.output_info.flags.changed_password;
	login_server_validate_response.flags.default_auth_changed =
	     uc_validate_info.output_info.flags.default_authorization_changed;
	login_server_validate_response.flags.default_proj_changed =
	     uc_validate_info.output_info.flags.changed_default_project;
	login_server_validate_response.flags.password_expired =
	     uc_validate_info.output_info.flags.password_expired;
	login_server_validate_response.flags.password_unused_too_long =
	     uc_validate_info.output_info.flags.password_unused_too_long;

	ip = as_data_$rs_ptrs (0);
	if login_server_validate_response.flags.password_unused_too_long then
	     login_server_validate_response.password_interval =
		installation_parms.password_expiration_interval;
	else if login_server_validate_response.flags.password_expired then
	     login_server_validate_response.password_interval =
		installation_parms.password_change_interval;

	login_server_validate_response.flags.pad = ""b;

	P_ls_reply_data_lth = currentsize (login_server_validate_response);
	return;
     end Setup_Response;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report an error via sys_log_$general and stop execution if a       */
/* nonzero code was given.					       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to abort_label;

     end Abort;

/* format: off */
%page; %include as_data_;
%page; %include as_wakeup_priorities;
%page; %include dialup_values;
%page; %include installation_parms;
%page; %include line_types;
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include sys_log_constants;
%page; %include uc_ls_handle;
%page; %include uc_validate_info;
%page; %include user_attributes;
%page; %include user_table_entry;

end uc_ls_validate_request_;
