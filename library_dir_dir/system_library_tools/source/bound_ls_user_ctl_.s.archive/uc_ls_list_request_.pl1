/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-04,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-15,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-28,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Updated for change to user_table_entry.incl.pl1.
  3) change(87-05-16,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Put connection_info.line_type into return structure.
      B) Put ute.initial_ring into the return structure.
      C) Convert to sys_log_$general.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,insnl */

uc_ls_list_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr
		        ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  i		        fixed bin automatic;

/* Entries */

dcl  get_system_free_area_  entry () returns (ptr);
dcl  uc_list_disconnected_procs_
		        entry (ptr, ptr, ptr);
dcl  user_table_mgr_$utep_from_handle
		        entry (bit (72) aligned) returns (ptr);

/* External */

dcl  error_table_$id_not_found
		        fixed bin (35) ext static;

/* Based */

dcl  system_area	        area based (system_area_ptr);


/* Internal */

dcl  system_area_ptr        ptr int static init (null);


/* Constant */

dcl  ME		        char (19) initial ("uc_ls_list_request_") internal static options (constant);

/* Builtins */

dcl  (addr, currentsize, null, unspec)
		        builtin;


/* Conditions */

dcl  cleanup	        condition;

%page;
/* Program */

	ls_request_ptr = P_ls_request_ptr;
	ls_response_ptr = P_ls_response_ptr;

	code = 0;

	if system_area_ptr = null
	then
	     system_area_ptr = get_system_free_area_ ();
	uc_disconnected_process_list_ptr = null;
	on cleanup
	     begin;
	     if uc_disconnected_process_list_ptr ^= null
	     then free uc_disconnected_process_list in (system_area);
	end;

	utep = user_table_mgr_$utep_from_handle (
	     login_server_list_request.handle);
	if utep = null ()
	then
	     call Abort (error_table_$id_not_found,
		"Could not locate user table entry for handle ^24.3b.",
		login_server_list_request.handle);

	call uc_list_disconnected_procs_ (utep, system_area_ptr,
	     uc_disconnected_process_list_ptr);

	if uc_disconnected_process_list_ptr = null ()
	then
	     login_server_list_response_n_processes = 0;
	else
	     login_server_list_response_n_processes =
		uc_disconnected_process_list.n_disconnected_processes;

	unspec (login_server_list_response) = ""b;
	login_server_list_response.header.message_type = LS_LIST_RESPONSE;
	login_server_list_response.header.version = LOGIN_SERVER_LIST_RESPONSE_VERSION_1;
	login_server_list_response.n_processes = login_server_list_response_n_processes;
	do i = 1 to login_server_list_response_n_processes;
	     utep = uc_disconnected_process_list.process (i).utep;
	     login_server_list_response.creation_time(i) = ute.login_time;
	     login_server_list_response.authorization(i) =
		ute.process_authorization;
	     if ute.initial_ring ^= ute.pdtep->user.default_ring
	     then login_server_list_response.initial_ring(i) =
		ute.initial_ring;
	     else login_server_list_response.initial_ring(i) = 0;
	     login_server_list_response.connection_name(i) = ute.tty_name;

/**** NOTE: We do not maintain the access class range for communication
      channels in the UTE and therefore cannot return this information. */
	     login_server_list_response.access_class_range(i,*) = ""b;
	     login_server_list_response.terminal_type(i) = ute.terminal_type;
	     login_server_list_response.terminal_id(i) = ute.tty_id_code;
	     login_server_list_response.line_type(i) = ute.line_type;
	end;

	if uc_disconnected_process_list_ptr ^= null then do;
	     free uc_disconnected_process_list in (system_area);
	     uc_disconnected_process_list_ptr = null ();
	end;
	P_ls_response_lth = currentsize (login_server_list_response);
RETURN:
	P_code = code;
	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report error in as log and stop the list operation, returning an   */
/* error code.						       */
/*							       */
/* Syntax: call Abort (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	go to RETURN;

     end Abort;

/* format: off */
%page; %include login_server_messages;
%page; %include pdt;

dcl  pdtp ptr automatic init (null);			/* pdt needs it  */
%page; %include sys_log_constants;
%page; %include uc_disc_proc_list;
%page; %include user_attributes; /* not used, but needed by PL/I */
%page; %include user_table_entry;

     end uc_ls_list_request_;
