/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/****^  HISTORY COMMENTS:
  1) change(86-08-01,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-26,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Use correct calling sequence when calling the force_disconnect
         entrypoint found in the connection list entry.
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Changed for new uc_send_ls_response_ calling sequence.
  4) change(87-06-01,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Checked to get Login_Server handle out of ute.  The connection list
         entry contains only the Initializer handle.
  5) change(87-06-01,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Changed to get Login_Server's handle for a dialed connection out of
         the connection's user table entry (UTE).  The handle in the connection
         list is the Initializer's handle.
      B) Changed to logout/free the UTE if uc_send_ls_response_ cannot send
         the response to the Login_Server.
  6) change(87-06-09,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Include correct user process_group_id in
         login_server_termination_response.
  7) change(87-06-19,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Avoid reference through unset pointer by declaring ute_index
         automatic.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,insnl */

uc_cleanup_network_dials_:
     procedure (P_process_id, P_logout_flag, P_code);

/* This procedure is called by the answering service when either 1) the
   process is destroyed (to cleanup any outstanding dialed connections),
   or 2) when the process (or the answering service) requests that all
   dialed connections be dropped.

   The "owner" (usually the login server) of the connection is notified
   so that it can perform the necessary processing (such as write an
   appropriate message on the user's terminal).

   This program searches the active_connection_list finding connections of
   which the specified proces is the user, and for each one that is a "dialed"
   connection, attempts to send a termination_response to the owner. If this
   fails, it attempts to force_disconnect the connection.
*/

/* Parameters */

dcl  P_process_id	        bit (36) aligned parameter;
dcl  P_logout_flag	        bit (1) aligned parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  1 auto_active_connection_info
		        aligned like active_connection_info automatic;
dcl  1 auto_ls_termination_response
		        aligned like login_server_termination_response automatic;
dcl  1 auto_ls_reply        aligned like ls_reply_message automatic;

dcl  code		        fixed bin (35) automatic;
dcl  connection_handle      fixed bin (35) automatic;
dcl  connection_name        char (32) automatic;
dcl  connection_offset      bit (18) automatic;
dcl  force_disconnect_name  char (64) automatic;
dcl  initializer_handle     bit (72) aligned automatic;
dcl  logout_flag	        bit (1) aligned automatic;
dcl  more		        bit (1) aligned automatic;
dcl  owner_process_id       bit (36) aligned automatic;
dcl  owner_handle	        bit (72) aligned automatic;
dcl  owner_event_channel    fixed bin (71) automatic;
dcl  send_terminate	        bit (1) aligned automatic;
dcl  user_group_id	        char (32) automatic;
dcl  user_process_id        bit (36) aligned automatic;
dcl  ute_index	        fixed bin automatic;
     

/* Entries */

dcl  hpriv_connection_list_$get_next_user
		        entry (bit (36) aligned, bit (18), ptr, fixed bin (35));
dcl  uc_logout_	        entry (ptr, char(*));
dcl  uc_send_ls_response_   entry (ptr, fixed bin(18), bit(36) aligned,
		        bit(72) aligned, fixed bin(71), ptr,
		        char(32) aligned, fixed bin(35), fixed bin(35));
dcl  user_table_mgr_$free   entry (ptr);


/* External */

dcl  error_table_$noentry   fixed bin (35) external static;

/* Builtins */

dcl  (addr, null, rtrim, size, unspec)
		        builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* Program */
	user_process_id = P_process_id;
	logout_flag = P_logout_flag;

/* Set up termination response -- we're going to send the same one to everybody */

	ls_response_ptr = addr (auto_ls_termination_response);
	unspec (login_server_termination_response) = ""b;
	login_server_response_header.message_type = LS_TERMINATION_RESPONSE;
	login_server_response_header.header_pad = ""b;
	login_server_response_header.version = LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1;

	login_server_termination_response.process_id = user_process_id;
	login_server_termination_response.status_code = 0;
	login_server_termination_response.logout = logout_flag;
						/* ? */

/* Now start searching the connection list. Each time we find a connection,
   we will get the next one before processing the current one, so that the
   current one doesn't get deleted before we can find the next.
*/

	active_connection_info_ptr = addr (auto_active_connection_info);
	unspec (active_connection_info) = ""b;
	active_connection_info.version = ACT_INFO_VERSION_1;

	connection_offset = ""b;			/* for finding the first one */
	more = Get_next (connection_offset);

	do while (more);

	     connection_offset = active_connection_info.offset;
	     if active_connection_info.usage_type = LS_DIAL_USAGE
						/* this is one we're interested in */
	     then do;				/* copy out info for later use */
		owner_process_id = active_connection_info.owner_process_id;
		owner_event_channel = active_connection_info.terminate_event_channel;
		initializer_handle = active_connection_info.owner_initializer_handle;
		connection_name = active_connection_info.connection_name;
		connection_handle = active_connection_info.connection_handle;
		force_disconnect_name = active_connection_info.force_disconnect_entry;
		ansp = as_data_$ansp;
		send_terminate = "0"b;
		do ute_index = 1 to anstbl.current_size;
		     utep = addr (anstbl.entry(ute_index));
		     if ute.active = NOW_LOGGED_IN &
			ute.tty_name = connection_name &
			ute.login_server_info.our_handle =
			initializer_handle &
			ute.login_server_info.process_id =
			owner_process_id then do;
			owner_handle = ute.login_server_info.his_handle;
			user_group_id = Get_Group_ID();
			send_terminate = "1"b;
		     end;
		end;
		if ^send_terminate then do;		/* connection not in ute. */
		     owner_process_id = ""b;		/* Make terminator do force_disconnect */
		     owner_handle = ""b;
		     user_group_id = "";
		     utep = null;
		     send_terminate = "1"b;
		end;
	     end;
	     else send_terminate = "0"b;

	     more = Get_next (connection_offset);

	     if send_terminate
	     then do;				/* now process the previous one */
		unspec(auto_ls_reply) = ""b;
		login_server_termination_response.process_group_id = 
		     user_group_id;
		call uc_send_ls_response_ (ls_response_ptr,
		     size (login_server_termination_response),
		     owner_process_id, owner_handle, owner_event_channel,
		     addr (auto_ls_reply),
		     active_connection_info.connection_name, 0, code);
		if code ^= 0 & utep ^= null then do;
		     call uc_logout_ (utep, "logout, dialed terminal");
		     call user_table_mgr_$free (utep);
		end;
	     end;
	end;

EXIT:
	P_code = code;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Get_Group_ID:
     procedure () returns (char(32) varying);

dcl  group	        char (32) varying;

          group = "";
	if ute.person ^= "" then do;
	     group = rtrim(ute.person);
	     group = group || ".";
	     group = group || rtrim(ute.project);
	     group = group || ".";
	     group = group || ute.tag;
	end;
	return (group);
     end Get_Group_ID;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Get_next:
     procedure (P_connection_offset) returns (bit (1) aligned);

dcl  P_connection_offset    bit (18) parameter;

dcl  connection_offset      bit (18);
dcl  code		        fixed bin (35);

	connection_offset = P_connection_offset;
	call hpriv_connection_list_$get_next_user (user_process_id, connection_offset, active_connection_info_ptr, code)
	     ;

	if code = error_table_$noentry		/* there are no more */
	then return ("0"b);
	else if code ^= 0
	then call Error (code);			/* nothing else should go wrong */
	else return ("1"b);

     end Get_next;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Error:
     procedure (P_code);

dcl  P_code	        fixed bin (35) parameter;

	go to EXIT;
     end Error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* format: off */
 %include active_connection_info;
 %include answer_table;
 %include as_data_;
 %include dialup_values;
 %include login_server_messages;
 %include ls_usage_types;
 %include user_attributes;
 %include user_table_entry;
 %include user_table_header;

     end uc_cleanup_network_dials_;
