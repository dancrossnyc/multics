/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-04,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-24,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-24,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Upgrade to use sys_log_$general for reporting errors.
      B) Correct setting of attributes.
      C) Updated for change to user_table_entry.incl.pl1.
      D) Correct coding standard violations.
      E) Updated to pass login_server_process_request.minimum_ring to
         uc_create_process_check_ for testing.
  3) change(87-05-04,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Avoid reference to login_server_process_request.login_arguments if
         login_server_process_request.n_args = 0.
  4) change(87-05-13,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Move act_ctl_$open_account call from here into uc_create_process_.
      B) Set login_server_process_response.status_code to code returned by
         uc_create_process_ if error occurs.  Also turn of
         ute.uflags.proc_create_ok in such case.
      C) Set login_server_process_response.brief from ute.at.brief.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_create_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  check_code	        fixed bin (35) automatic;
dcl  code		        fixed bin (35) automatic;
dcl  reason	        char (8) aligned automatic;
dcl  temp		        fixed bin (17) automatic;

/* Based */

dcl  argstring	        char (ute.ln_args) based (ute.args_ptr);
dcl  lengths	        (ute.arg_count) based (ute.arg_lengths_ptr) fixed bin;
dcl  system_area	        area based (system_area_ptr);

/* Entries */

dcl  as_access_audit_$process entry (ptr, fixed bin, char (*));
dcl  convert_status_code_   entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  get_system_free_area_  entry () returns (ptr);
dcl  ioa_$rsnnl	        entry () options (variable);
dcl  uc_create_process_     entry (ptr, fixed bin (35));
dcl  uc_create_process_check_ entry (ptr, ptr, fixed bin (35));
dcl  user_table_mgr_$utep_from_handle entry (bit (72) aligned) returns (ptr);

/* Internal */

dcl  system_area_ptr        ptr int static init (null);

/* External */

dcl  as_error_table_$already_logged_in fixed bin (35) ext static;
dcl  error_table_$bad_arg   fixed bin (35) ext static;
dcl  error_table_$id_not_found fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (21) initial ("uc_ls_create_request_") internal static options (constant);
dcl  NL		        char (1) int static options (constant) init ("
");
dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Builtins */

dcl  (addr, currentsize, length, null, rtrim, substr, unspec) builtin;
%page;
/* Program */

	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;

	code = 0;

	utep = user_table_mgr_$utep_from_handle (
	     login_server_process_request.handle);
	if utep = null () then
	     call Abort (SL_LOG_SILENT, error_table_$id_not_found,
		"Could not locate user table entry for handle ^24.3b.",
		login_server_process_request.handle);

	if ute.person ^= login_server_process_request.person_id |
	     ute.project ^= login_server_process_request.project_id then
	     call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		"Person.Project in request (^a.^a) don't match ute (^a.^a).",
		login_server_process_request.person_id,
		login_server_process_request.project_id,
		ute.person, ute.project);

	if login_server_process_request.switch_flags.warn_given then do;
	     ute.ur_at.no_warning = TRUE;
	     ute.at.no_warning =
		^login_server_process_request.switch_values.warn;
	end;
	if login_server_process_request.switch_flags.force_given then do;
	     ute.ur_at.guaranteed_login = TRUE;
	     ute.at.guaranteed_login =
		login_server_process_request.switch_values.force;
	end;
	if login_server_process_request.switch_flags.save_given then do;
	     ute.ur_at.save_on_disconnect = TRUE;
	     ute.at.save_on_disconnect =
		login_server_process_request.switch_values.save_on_disconnect;
	end;
	if login_server_process_request.switch_flags.preempt_given then do;
	     ute.ur_at.bumping = TRUE;
	     ute.at.bumping =
		login_server_process_request.switch_values.preempt;
	end;
	else ute.at.bumping = TRUE;
	if login_server_process_request.switch_flags.brief_given then do;
	     ute.ur_at.brief = TRUE;
	     ute.at.brief = login_server_process_request.switch_values.brief;
	end;

	if login_server_process_request.other_flags.init_ring_given then
	     ute.initial_ring = login_server_process_request.initial_ring;
	else ute.initial_ring = -1;

	if login_server_process_request.other_flags.immediate then
	     ute.uflags.user_specified_immediate = TRUE;
	if login_server_process_request.other_flags.no_start_up then do;
	     ute.ur_at.nostartup = TRUE;
	     ute.at.nostartup = TRUE;
	end;

	if login_server_process_request.home_dir ^= "" then do;
	     temp = length (rtrim (login_server_process_request.home_dir));
	     if temp > length (ute.home_dir) then
		call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		     "Home_dir (^a) too long (>d chars).",
		     login_server_process_request.home_dir,
		     length (ute.home_dir));
	     ute.home_dir =
		substr (login_server_process_request.home_dir, 1,
		length (ute.home_dir));
	end;
	if login_server_process_request.outer_module ^= "" then
	     ute.outer_module = login_server_process_request.outer_module;
	if login_server_process_request.process_overseer ^= "" then do;
	     temp =
		length (rtrim (login_server_process_request.process_overseer));
	     if temp > length (ute.init_proc) then
		call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		     "Process overseer (^a) too long (>^d chars).",
		     login_server_process_request.process_overseer,
		     length (ute.init_proc));
	     ute.init_proc =
		substr (login_server_process_request.process_overseer, 1,
		length (ute.init_proc));
	     ute.uflags.ip_given = TRUE;
	     ute.ip_len = temp;
	end;
	if login_server_process_request.subsystem ^= "" then do;
	     temp = length (rtrim (login_server_process_request.subsystem));
	     if temp > length (ute.init_proc) - ute.ip_len then
		call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		     "Subsystem (^a) too long (>d chars).",
		     login_server_process_request.subsystem,
		     length (ute.init_proc) - ute.ip_len);
	     ute.uflags.ss_given = TRUE;
	     substr (ute.init_proc, ute.ip_len + 1, temp) =
		login_server_process_request.subsystem;
	     ute.ss_len = temp;
	end;

	ute.arg_count = login_server_process_request.n_args;
	if ute.arg_count > 0 then do;
	     ls_process_request_n_args = login_server_process_request.n_args;
	     ls_process_request_arg_string_length =
		login_server_process_request.arg_string_length;
	     ute.ln_args = login_server_process_request.arg_string_length;
	     if system_area_ptr = null then
		system_area_ptr = get_system_free_area_ ();
	     allocate lengths in (system_area);
	     allocate argstring in (system_area);
	     if ute.ln_args <= 0 then
		lengths (*) = 0;
	     else do;
		lengths (*) =
		     login_server_process_request.args (*).arg_length;
		argstring = login_server_process_request.arg_string;
	     end;
	end;
	else ute.ln_args = 0;

	call uc_create_process_check_ (utep, ls_request_ptr, check_code);

	call Setup_Create_Response ();

	if check_code ^= 0 then do;
	     call convert_status_code_ (check_code, reason, (""));
	     call as_access_audit_$process (utep, -AS_AUDIT_PROCESS_CREATE,
		(reason));
	     if check_code = as_error_table_$already_logged_in then
		login_server_process_response.flags.already_logged_in =
		     TRUE;
	end;
	else do;
	     call uc_create_process_ (utep, code);
	     if code ^= 0 then do;
		login_server_process_response.status_code = code;
		call Abort (SL_LOG, code, "Creating process for ^a.^a.",
		     login_server_process_request.person_id,
		     login_server_process_request.project_id);
	     end;

	     login_server_process_response.login_instance =
		user.n_interactive;
	     login_server_process_response.process_id = ute.proc_id;
	     login_server_process_response.flags.created = TRUE;
	     login_server_process_response.flags.brief = ute.at.brief;
	     call Set_Start_Event_Channel ();
	end;

RETURN:
	P_code = code;
	return;
%page;
Setup_Create_Response:
     procedure ();

dcl  message_buffer	        char (as_data_$ls_message_buffer_cur_lth)
		        based (as_data_$ls_message_buffer_ptr);

	ls_response_ptr = P_ls_response_ptr;
	ls_process_response_accounting_message_length = 0;/* initially */
	unspec (login_server_process_response) = ""b;

	login_server_process_response.header.message_type =
	     LS_PROCESS_RESPONSE;
	login_server_process_response.header.header_pad = ""b;
	login_server_process_response.header.version =
	     LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1;

	login_server_process_response.status_code = check_code;
	login_server_process_response.authorization =
	     ute.process_authorization;
	call ioa_$rsnnl ("^[anonymous^s^;^a^].^a.^a",
	     login_server_process_response.process_group_id, (0),
	     (ute.anonymous = 1), ute.person, ute.project, ute.tag);
	login_server_process_response.process_number = 0; /* for create */

	pdtep = ute.pdtep;				/* used below */

	login_server_process_response.n_disconnected_processes =
	     user.n_disconnected;
	if ute.login_result = 1 then
	     login_server_process_response.flags.disconnect = TRUE;
	else login_server_process_response.flags.disconnect = FALSE;

	login_server_process_response.flags.anonymous =
	     (ute.anonymous = 1);

	login_server_process_response.initial_ring = ute.initial_ring;

	ls_process_response_accounting_message_length =
	     as_data_$ls_message_buffer_cur_lth;
	login_server_process_response.accounting_message_length =
	     ls_process_response_accounting_message_length;
	login_server_process_response.accounting_message =
	     rtrim (message_buffer, NL);

	as_data_$ls_message_buffer_cur_lth = 0;		/* reset to nothing */

	P_ls_response_lth = currentsize (login_server_process_response);
	return;
     end Setup_Create_Response;
%page;
Set_Start_Event_Channel:
     procedure ();

dcl  code		        fixed bin (35) automatic;
dcl  r_factor	        fixed bin (35) automatic;
dcl  r_offset	        fixed bin (18) automatic;

dcl  hphcs_$get_ipc_operands entry (bit (36) aligned, fixed bin (18), fixed bin (35), fixed bin (35));
dcl  ipc_validate_$encode_event_channel_name entry (fixed bin (18), fixed bin (35), bit (3) aligned,
		        fixed bin (15), fixed bin (3), bit (1) aligned, fixed bin (18), fixed bin (71));

/**** We must construct an event channel which will pass the IPC event
      channel validation tests. To do this, we must learn the values of
      R-Offset and R-Factor for the process. */

	call hphcs_$get_ipc_operands (ute.proc_id, r_offset, r_factor, code);
	if code = 0 then do;
	     call ipc_validate_$encode_event_channel_name (r_offset, r_factor,
		"000"b /* flags */, 1 /* index */, 4 /* ring */,
		"1"b /* regular */, 1 /* unique id */,
		login_server_process_response.start_event_channel);
	end;
	else do;
	     login_server_process_response.start_event_channel = 0;
	     call Abort (SL_LOG_BEEP, code,
		"Retrieving the values of R-Offset and R-Factor for ^w (^a.^a)",
		ute.proc_id, ute.person, ute.project);
	end;
     end Set_Start_Event_Channel;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Report errors via sys_log_$general and stop execution.	       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to RETURN;

     end Abort;

/* format: off */
%page; %include access_audit_bin_header;
%page; %include as_audit_structures;
%page; %include as_data_;
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include pdt;

dcl  pdtp ptr automatic init (null);			/* pdt needs it  */
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;

end uc_ls_create_request_;
