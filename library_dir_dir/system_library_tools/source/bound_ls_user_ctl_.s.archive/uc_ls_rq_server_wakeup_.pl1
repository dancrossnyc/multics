/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-08-05,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-16,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct coding standard violations.
      B) Integrate Swenson's later changes into the module.
      C) Use LS_REQUEST_TYPES and LS_RESPONSE_TYPES arrays to improve trace
         messages.
      D) Convert to sys_log_$general for error and trace messages.
      E) Upgraded for change to answer_table.incl.pl1.
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Remove procedures for sending a login server response from this
         program.  Centralize this function in uc_send_ls_response_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_rq_server_wakeup_:
     procedure (P_event_call_info_ptr);

/* Parameters */

dcl  P_event_call_info_ptr  ptr parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  ls_data_reply_lth      fixed bin (18) automatic;
dcl  ls_data_reply_ptr      ptr automatic;
dcl  ls_request_lth	        fixed bin (18) automatic;
dcl  1 mmi	        aligned like mseg_message_info automatic;
dcl  ms_index	        fixed bin automatic;
dcl  request_type	        fixed bin automatic;
dcl  response_type	        fixed bin automatic;

/* External */

dcl  as_error_table_$dialup_error fixed bin (35) ext static;
dcl  error_table_$bad_arg   fixed bin (35) external;
dcl  error_table_$no_message fixed bin (35) external;
dcl  error_table_$out_of_sequence fixed bin (35) external;
dcl  error_table_$unexpected_condition fixed bin (35) external;
dcl  error_table_$unimplemented_version fixed bin (35) external;

/* Entries */

dcl  as_any_other_handler_$no_cleanup entry (char (*), label);
dcl  get_system_free_area_  entry returns (pointer);
dcl  message_segment_$delete_index
		        entry (fixed bin, bit (72) aligned,
		        fixed bin (35));
dcl  message_segment_$read_message_index
		        entry (fixed bin, pointer, pointer,
		        fixed bin (35));
dcl  message_segment_$get_message_count_index
		        entry (fixed bin, fixed bin,
		        fixed bin (35));
dcl  pathname_	        entry (char (*), char (*)) returns (char (168));
dcl  (uc_ls_validate_request_,
     uc_ls_process_request_,
     uc_ls_list_request_,
     uc_ls_dial_request_,
     uc_ls_disconnect_request_,
     uc_ls_logout_request_,
     uc_ls_operator_request_)
		        entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18),
		        bit (72) aligned, fixed bin (35));
dcl  uc_send_ls_response_   entry (ptr, fixed bin(18), bit(36) aligned,
		        bit(72) aligned, fixed bin(71), ptr,
		        char(32) aligned, fixed bin(35), fixed bin(35));

/* Builtin */

dcl  (addr, currentsize, divide, hbound, lbound, null, rtrim, unspec) builtin;

/* Internal Static */

dcl  system_area_ptr        ptr int static init (null);
dcl  trace_flag	        bit (1) aligned initial ("0"b) internal static;

/* Constant */

dcl  FALSE	        bit (1) initial ("0"b) internal static options (constant);
dcl  ME		        char (23) initial ("uc_ls_rq_server_wakeup_") internal static
		        options (constant);
dcl  TRUE		        bit (1) initial ("1"b) internal static options (constant);

/* Based */

dcl  system_area	        area based (system_area_ptr);


/* Conditions */

dcl  any_other	        condition;
dcl  cleanup	        condition;
%page;
/* Program */

	event_call_info_ptr = P_event_call_info_ptr;
	ls_request_server_info_ptr = event_call_info.data_ptr;

	if ls_request_server_info_ptr = null () then
	     call Abort (SL_LOG_BEEP, error_table_$out_of_sequence,
		MAIN_RETURN, "Wakeup with null ptr to sectest_server_info.");

	if ^ls_request_server_info.flags.initialized then
	     call Abort (SL_LOG_BEEP, error_table_$out_of_sequence,
		MAIN_RETURN,
		"Wakeup with ls_request_server_info not initialized.");

/**** Leave a record that a login server request has been received.  This
      flag is used by dial_ctl_ to decide whether to call
      uc_cleanup_network_dials_. */

	ansp = as_data_$ansp;
	if anstbl.login_server_present = FALSE then
	     anstbl.login_server_present = TRUE;

	ms_index = ls_request_server_info.request_ms.index;
	if ms_index = 0 then
	     call Abort (SL_LOG_BEEP, error_table_$out_of_sequence,
		MAIN_RETURN, "Request message segment not initialized yet.");

	unspec (mmi) = ""b;
	mmi.version = MSEG_MESSAGE_INFO_V1;
	mmi.message_code = MSEG_READ_FIRST;
	mmi.ms_ptr = null ();

	if system_area_ptr = null then
	     system_area_ptr = get_system_free_area_ ();

	on cleanup
	     call Clean_Up ();

	call Process_Messages ();
MAIN_RETURN:
	return;
%page;
trace_on:
     entry ();

	trace_flag = TRUE;
	return;


trace_off:
     entry ();

	trace_flag = FALSE;
	return;
%page;
Process_Messages:
     procedure ();

dcl  action	        fixed bin;
dcl  message_count	        fixed bin;

dcl  (PROCESS	        initial (1),
     REJECT	        initial (2)) fixed bin internal static options (constant);

	do while ("1"b);
	     call message_segment_$read_message_index (ms_index,
		addr (system_area), addr (mmi), code);
	     if code = error_table_$no_message then return;
	     if code ^= 0 then
		call Abort (SL_LOG_BEEP, code, MAIN_RETURN,
		     "Error reading message from message segment.");

	     action = Examine_Message ();

	     if action = PROCESS then
		call Process_The_Message ();

	     call Delete_The_Message ();

	     if mmi.ms_ptr ^= null () then begin;

declare  msg		  bit (mmi.ms_len) aligned based (mmi.ms_ptr);

		free msg in (system_area);
		mmi.ms_ptr = null ();
	     end;

	     call message_segment_$get_message_count_index (ms_index,
		message_count, code);
	     if code ^= 0 then
		call Abort (SL_LOG_BEEP, code, MAIN_RETURN,
		     "Could not get message count from message segment ^a.",
		     pathname_ (ls_request_server_info.request_ms.dirname,
		     ls_request_server_info.request_ms.entryname));

	     if message_count = 0 then
		return;
	end;
%page;
Examine_Message:
	procedure () returns (fixed bin);

	     ls_request_ptr = mmi.ms_ptr;
	     ls_request_lth = divide (mmi.ms_len, 36, 18);

	     if ls_request_lth < (currentsize (ls_request_header)) then
		call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		     REJECT_MESSAGE,
		     "Size of request from ^a too small.  Got ^d; expected at least ^d.",
		     mmi.sender_id, ls_request_lth,
		     currentsize (ls_request_header));
	     else if ls_request_header.header_version ^=
		LS_REQUEST_HEADER_VERSION_1 then
		call Abort (SL_LOG_SILENT,
		     error_table_$unimplemented_version, REJECT_MESSAGE,
		     "Invalid version (^a) in request from ^a.",
		     ls_request_header.header_version, mmi.sender_id);
	     else do;
		request_type = ls_request_header.request_type;
		if lbound (LS_REQUEST_TYPES, 1) <= request_type &
		     request_type <= hbound (LS_REQUEST_TYPES, 1)
		then code = 0;
		else call Abort (SL_LOG_SILENT, error_table_$bad_arg,
			REJECT_MESSAGE, "Invalid request type ^d from ^a.",
			request_type, mmi.sender_id);
	     end;

	     return (PROCESS);

REJECT_MESSAGE:
	     return (REJECT);

	end Examine_Message;
%page;
Process_The_Message:
	procedure ();

dcl  1 auto_ls_reply_message aligned like ls_reply_message automatic;
dcl  code		        fixed bin (35) automatic;
dcl  entry_to_call	        entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18),
		        ptr, fixed bin (35)) variable;

	     if trace_flag then
		call Trace ("Received ^a request from ^a.",
		     LS_REQUEST_TYPES (request_type), mmi.sender_id);

	     if request_type = LS_VALIDATE_REQUEST then
		entry_to_call = uc_ls_validate_request_;
	     else if request_type = LS_PROCESS_REQUEST then
		entry_to_call = uc_ls_process_request_;
	     else if request_type = LS_LIST_REQUEST then
		entry_to_call = uc_ls_list_request_;
	     else if request_type = LS_DIAL_REQUEST then
		entry_to_call = uc_ls_dial_request_;
	     else if request_type = LS_DISCONNECT_REQUEST then
		entry_to_call = uc_ls_disconnect_request_;
	     else if request_type = LS_LOGOUT_REQUEST then
		entry_to_call = uc_ls_logout_request_;
	     else if request_type = LS_OPERATOR_REQUEST then
		entry_to_call = uc_ls_operator_request_;
	     else call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		     ABORT_REQUEST_NO_REPLY,
		     "Invalid request type ^d specified.", request_type);

	     ls_reply_message_ptr = addr (auto_ls_reply_message);
	     unspec (ls_reply_message) = ""b;

	     ls_data_reply_ptr = ls_request_server_info.reply_ptr;
	     ls_data_reply_lth = 0;

	     ls_request_server_info.request_info.sender_process_id =
		mmi.sender_process_id;

	     on any_other begin;
		revert any_other;
		code = as_error_table_$dialup_error;
		unspec (ls_reply_message) = ""b;
		ls_reply_message.code = code;
		ls_reply_message.flags.do_not_reply = FALSE;
		call Abort (SL_LOG_BEEP, error_table_$unexpected_condition,
		     TAKE_AS_DUMP,
		     "Processing login server ""^a"" request from ^a.",
		     LS_REQUEST_TYPES (request_type), mmi.sender_id);
TAKE_AS_DUMP:	call as_any_other_handler_$no_cleanup (ME, ABORT_REQUEST);
	     end;

	     call entry_to_call (ls_request_server_info_ptr,
		ls_request_ptr, ls_request_lth,
		ls_data_reply_ptr, ls_data_reply_lth,
		ls_reply_message_ptr, code);

	     revert any_other;

ABORT_REQUEST:
	     if ls_data_reply_lth > 0 then
		call Test_Data_Reply ();

	     if trace_flag then
		call Trace (
		     "Processed ^a request from ^a.  ^[No reply.^;Reply^[ with ^a response.^]^]",
		     LS_REQUEST_TYPES (request_type), mmi.sender_id,
		     ls_reply_message.do_not_reply, ls_data_reply_lth > 0,
		     LS_RESPONSE_TYPES (response_type));

	     if ^ls_reply_message.do_not_reply then
		call uc_send_ls_response_ (ls_data_reply_ptr,
		ls_data_reply_lth, mmi.sender_process_id,
		ls_request_header.reply_handle,
		ls_request_header.reply_event_channel,
		addr(ls_reply_message), ls_request_header.connection_name,
		code, code);
	     else ;				/* we don't want to send anything to LS (yet). */

ABORT_REQUEST_NO_REPLY:
	     return;
%page;
Test_Data_Reply:
     procedure ();

	ls_response_ptr = ls_data_reply_ptr;
	response_type = login_server_response_header.message_type;
	if lbound (LS_RESPONSE_TYPES, 1) <= response_type &
	     response_type <= hbound (LS_RESPONSE_TYPES, 1) then ;
	else response_type = LS_UNKNOWN_RESPONSE;

	end Test_Data_Reply;
     end Process_The_Message;
end Process_Messages;
%page;
Clean_Up:
     procedure ();

declare  msg		  bit (mmi.ms_len) aligned
			  based (mmi.ms_ptr);
	if mmi.ms_ptr ^= null () then
	     free msg in (system_area);

     end Clean_Up;
%page;
Delete_The_Message:
     procedure ();

	call message_segment_$delete_index (ms_index, mmi.ms_id, code);
	if code ^= 0 then
	     call Abort (SL_LOG_SILENT, code, DELETE_FAILED,
		"Could not delete message ^.3b for ^a.", mmi.ms_id,
		mmi.sender_id);
	else mmi.ms_id = ""b;			/* clear out since no longer valid */

DELETE_FAILED:
     end Delete_The_Message;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  report errors via sys_log_$general.			       */
/*							       */
/* Syntax:  call Abort (severity, code, error_return_label, ioa_ctl, args);  */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  cu_$arg_ptr_rel        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  sys_log_$general       entry (ptr);

dcl  abort_label_ptr        pointer automatic;
dcl  abort_label	        label based (abort_label_ptr);

	sl_info = sl_info_sev_code_label_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then do;
	     call cu_$arg_ptr_rel (3, abort_label_ptr, 0, 0,
		sl_info.arg_list_ptr);
	     go to abort_label;
	end;

     end Abort;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Trace:  trace events via sys_log_$general.			       */
/*							       */
/* Syntax:  call Trace (ioa_ctl, args);				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Trace:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_msg;
	sl_info.caller = rtrim (ME) || " (trace)";
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));

     end Trace;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include condition_info;
%page; %include condition_info_header;
%page; %include event_call_info;
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include mseg_message_info;
%page; %include sys_log_constants;
%page; %include user_table_header;

end uc_ls_rq_server_wakeup_;
