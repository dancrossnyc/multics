/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-04,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-05-16,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct coding standard violations.
      B) Allow caller to control whether a response message is sent.
      C) If reply wakeup cannot be sent, force_disconnect the MNA connection.
  3) change(87-05-21,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Add sys_log_ error message to diagnose failure to add user_message
         or failure to send wakeup to login server.
  4) change(87-05-22,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Copy event channel from parameter for use in hcs_$wakeup call.
      B) Log error message for failure to add user message.
      C) Centralize call to Force_Disconnect in an Abort procedure.
  5) change(87-07-28,GDixon), approve(87-07-28,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Move call to sys_log_$general to correct place within the Abort proc.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_send_ls_response_:
     procedure (P_data_ptr, P_data_lth, P_ls_process_id, P_ls_handle,
	P_ls_event_channel, P_ls_reply_message_ptr, P_connection_name,
	P_reply_code, P_code);

/* Parameters */

dcl  P_data_ptr	        ptr parameter;
dcl  P_data_lth	        fixed bin (18) parameter;
dcl  P_ls_process_id        bit (36) aligned parameter;
dcl  P_ls_handle	        bit (72) aligned parameter;
dcl  P_ls_event_channel     fixed bin (71) parameter;
dcl  P_ls_reply_message_ptr ptr parameter;
dcl  P_connection_name      char (32) aligned parameter;
dcl  P_reply_code	        fixed bin (35) parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  1 asum_ai	        aligned like as_user_message_add_info automatic;
dcl  connection_name        char (32) aligned automatic;
dcl  code		        fixed bin (35) automatic;
dcl  data_ptr	        ptr automatic;
dcl  data_lth	        fixed bin (18) automatic;
dcl  ls_process_id	        bit (36) aligned automatic;
dcl  ls_handle	        bit (72) aligned automatic;
dcl  ls_event_channel       fixed bin (71) automatic;
dcl  reply_code	        fixed bin (35) automatic;

/* Based */

dcl  based_event_message    fixed bin (71) based;

/* Entries */

dcl  as_user_message_$priv_add_message entry (ptr, fixed bin (35));
dcl  hcs_$make_entry        entry (ptr, char (*), char (*), entry, fixed bin (35));
dcl  hcs_$wakeup	        entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hpriv_connection_list_$get_name
		        entry (char (*), ptr, fixed bin (35));

/* Constant */

dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  LOGIN_SERVER_RING      fixed bin int static options (constant) init (4);
dcl  ME		        char (20) int static options (constant) init ("uc_send_ls_response_");
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);


/* Builtins */

dcl  (addr, after, before, null, unspec)
		        builtin;

/* Program */

	data_ptr = P_data_ptr;
	data_lth = P_data_lth;
	ls_process_id = P_ls_process_id;
	ls_handle = P_ls_handle;
	ls_event_channel = P_ls_event_channel;
	ls_reply_message_ptr = P_ls_reply_message_ptr;
	connection_name = P_connection_name;
	reply_code = P_reply_code;
	code = 0;

	if ls_reply_message.do_not_reply then goto RETURN;
	if ls_event_channel = 0 then goto RETURN;

	if unspec (ls_reply_message) = ""b then do;
	     ls_reply_message.code = reply_code;
	     ls_reply_message.flags = FALSE;
	end;

	if data_lth > 0 then do;
	     unspec (asum_ai) = ""b;
	     asum_ai.version = AS_USER_MESSAGE_ADD_INFO_VERSION_1;
	     asum_ai.message_ptr = data_ptr;
	     asum_ai.message_length = data_lth;
	     asum_ai.message_access_class = ""b;
	     asum_ai.destination_info.group_id = "";
	     asum_ai.destination_info.process_id = ls_process_id;
	     asum_ai.destination_info.handle = ls_handle;
	     asum_ai.destination_info.ring = LOGIN_SERVER_RING;
	     asum_ai.reader_deletes = "1"b;
	     call as_user_message_$priv_add_message (addr (asum_ai), code);
	     if code ^= 0 then
		call Abort (SL_LOG_BEEP, code,
		"Sending response via as_user_message_$priv_add_message.");
	     ls_reply_message.response_sent = TRUE;
	end;

	call hcs_$wakeup (ls_process_id, ls_event_channel,
	     ls_reply_message_ptr -> based_event_message, code);
	if code ^= 0 then 
	     call Abort (SL_LOG, code,
	     "Sending wakeup for ^a to Login_Server ^12.3b event channel ^24.3b.",
	     connection_name, ls_process_id, unspec(ls_event_channel));

RETURN:
	P_code = code;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: log an error via sys_log_$general, force_disconnect the terminal   */
/* and abort execution.					       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then do;
	     call Force_Disconnect (connection_name);
	     go to RETURN;
	end;

     end Abort;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* if couldn't notify owner, then try to disconnect the connection ourselves */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


Force_Disconnect:
     procedure (P_connection_name);

dcl  P_connection_name      char (32) aligned;

dcl  code		        fixed bin (35);
dcl  connection_name        char (32);
dcl  entry_point_name       char (60);
dcl  ref_name	        char (32);
dcl  entry_to_call	        entry (char (*), fixed bin (35)) variable;

	connection_name = P_connection_name;

	if connection_name ^= "" then do;
	     aci.version = ACT_INFO_VERSION_1;
	     call hpriv_connection_list_$get_name (connection_name,
		addr (aci), code);
	     if code = 0 then do;
		if aci.force_disconnect_entry ^= "" then do;
		     ref_name = before (
			aci.force_disconnect_entry, "$");
		     entry_point_name = after (
			aci.force_disconnect_entry, "$");
		     if entry_point_name = "" then
			entry_point_name = ref_name;
		     call hcs_$make_entry (null (), ref_name,
			entry_point_name, entry_to_call, code);
		     if code = 0
		     then call entry_to_call (connection_name, code);
		     if code ^= 0
		     then call Log_Error_With_Code (code,
			     "Calling Force_Disconnect procedure ^a$^a.",
			     ref_name, entry_point_name);
		end;
	     end;
	end;
	return;

     end Force_Disconnect;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Log_Error_With_Code: log an error via sys_log_$general and continue       */
/* execution.						       */
/*							       */
/* Syntax:  call Log_Error_With_Code (code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Log_Error_With_Code:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));

     end Log_Error_With_Code;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* format: off */
 %include active_connection_info;

dcl  1 aci	        aligned like active_connection_info;
 %include as_user_message_add;
 %include login_server_messages;
 %include sys_log_constants;
     end uc_send_ls_response_;

