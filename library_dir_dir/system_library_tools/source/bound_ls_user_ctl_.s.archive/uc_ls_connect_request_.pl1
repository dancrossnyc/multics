/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-04,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initially coded.
  2) change(87-05-16,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Simplified code.
      B) Removed unreferenced declarations.
      C) Added pnotice.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_connect_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;

/* Entries */

dcl  uc_setup_process_connect_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, ptr, fixed bin (35));


/* Constants */

dcl  TRUE bit(1) int static options(constant) init("1"b);
     

/* Builtins */

dcl  null		        builtin;

%page;
/* Program */

	code = 0;

	call uc_setup_process_connect_ (P_ls_request_server_info_ptr,
	     P_ls_request_ptr, P_ls_request_lth, P_ls_response_ptr,
	     P_ls_response_lth, P_ls_ipc_reply_ptr, null (), code);
	if code = 0 then do;
	     ls_response_ptr = P_ls_response_ptr;
	     login_server_process_response.flags.connected = TRUE;
	end;

RETURN:
	P_code = code;
	return;

%page; %include login_server_messages;

end uc_ls_connect_request_;
