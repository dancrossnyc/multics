/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* AS_VIP7760_MPX_ - Anserwing service piece of vip7760 multiplexer */

/* Written October 1978 by Larry Johnson (as as_user1_mpx_) */
/* Converted to as_vip7760_mpx_ 1/5/78 by J. Stern */
/* Modified 5/1/79 by J. Stern to add vip7760_cv_cmf entry */
/* Modified June 1981 by T. Casey for MR9.0 for new wakeup priorities. */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */

/* format: style4,delnl,insnl */

as_vip7760_mpx_:
     proc;

/* Parameters */

dcl  arg_mpx_chan char (*);				/* Name of the multiplexed channel */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_cdtep ptr;
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */
dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  code fixed bin (35);
dcl  mpx_chan char (32);
dcl  chan_listp ptr;
dcl  event_infop ptr;
dcl  ev_msg_array (2) bit (36);
dcl  load_parm char (32);
dcl  1 boot_info aligned like pv_load_info;
dcl  len fixed bin;
dcl  p ptr;
dcl  station_addr fixed bin;
dcl  (i, j) fixed bin;
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;
dcl  temp_value fixed bin;

/* Constants */

dcl  name char (15) int static options (constant) init ("as_vip7760_mpx_");

/* Static */

dcl  static_cdtp ptr int static init (null);		/* Remember where cdt is */

/* External */

dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  sys_log_$error_log entry options (variable);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  ttt_info_$additional_info entry (char (*), char (512) varying, fixed bin (35));
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));

dcl  error_table_$action_not_performed ext fixed bin (35);

dcl  (addr, bin, low, rtrim, verify, null, string, substr, unspec, index, length) builtin;

/* Based */

dcl  1 chan_list aligned based (chan_listp),		/* List of cdte entries of channels to boot */
       2 count fixed bin,
       2 cdte_ptr (0 refer (chan_list.count)) ptr unal;

dcl  1 event_info aligned based (event_infop),		/* Event call argument structure */
       2 channel_id fixed bin (71),
       2 message fixed bin (71),
       2 sender_procid bit (36),
       2 origin,
         3 dev_signal bit (18) unal,
         3 ring bit (18) unal,
       2 data_ptr ptr;

/* Entry to load a multiplexer */

vip7760_load:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_chan = arg_mpx_chan;
	cdtp, static_cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	chan_listp = arg_chan_listp;
	mpxep = addr (cdte.initial_command);

	if cdte.event ^= 0
	then call ipc_$delete_ev_chn (cdte.event, code);
	call ipc_$create_ev_chn (cdte.event, code);
	if code ^= 0 then do;
ev_chan_err:
	     call convert_ipc_code_ (code);
	     call sys_log_$error_log (1, code, name, "Creating event channel for multiplexer ^a", mpx_chan);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;
	call ipc_$decl_ev_call_chn (cdte.event, vip7760_wakeup_handler, cdtep, MPX_LOAD_PRIO, code);
	if code ^= 0
	then go to ev_chan_err;

	call get_boot_info;				/* get bootload parameters */

	call hphcs_$tty_control (mpx_chan, "load_mpx", addr (boot_info), code);
	if code ^= 0 then do;
	     arg_code = code;
	     return;
	end;

	arg_code = 0;
	return;

/* Wakeup handler for wakeups on the bootload event channel */

vip7760_wakeup_handler:
     entry (arg_event_infop);

	event_infop = arg_event_infop;
	cdtp = static_cdtp;
	cdtep = event_info.data_ptr;
	mpxep = addr (cdte.initial_command);

	if event_info.ring ^= "0"b
	then					/* If not ring-0 */
	     if event_info.sender_procid ^= get_process_id_ () then do;
						/* Trust only myself */
		string (ev_msg_array) = unspec (event_info.message);
		call sys_log_ (1, "^a: Unexpected wakeup (^w ^w) from process ^w.", name, ev_msg_array,
		     event_info.sender_procid);
		return;
	     end;

	mpx_chan = cdte.name;

	if event_info.message ^= PV_MPX_UP & event_info.message ^= PV_MPX_DOWN & event_info.message ^= PV_MPX_MASKED then do;
	     call sys_log_ (1, "^a: Wakeup for multiplexer ^a has invalid state code: ^d.", name, mpx_chan,
		event_info.message);
	     return;
	end;
	call sys_log_ (1, "^a: ^[Load^;Crash^] signaled for multiplexer ^a.", name, (event_info.message = PV_MPX_UP),
	     mpx_chan);

	if mpxe.state = MPX_BOOT then do;		/* Now booting */
	     if event_info.message = PV_MPX_DOWN
	     then					/* Boot failed */
		call multiplexer_mgr_$mpx_load_failed (mpx_chan, code);
	     else call multiplexer_mgr_$mpx_loaded (mpx_chan, code);
	     return;
	end;

	else if mpxe.state = MPX_UP then do;		/* Currently running ok */
	     if event_info.message ^= PV_MPX_UP
	     then					/* it crashed */
		call multiplexer_mgr_$mpx_crashed (mpx_chan, (event_info.message = PV_MPX_DOWN), code);
	end;
	return;

/* Entry to dump a multiplexer. */

vip7760_dump:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_code);

	arg_code = 0;				/* nothing to do really */
	return;

/* Entry called by cv_cmf to validate VIP7760 multiplexers */

vip7760_cv_cmf:
     entry (arg_cdtp, arg_cdtep, arg_mpx_chan, arg_chan_listp, arg_error_proc);

	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	mpx_chan = arg_mpx_chan;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

/* Make sure this channel is not an FNP */

	if index (mpx_chan, ".") = 0			/* single component name => FNP */
	then call error_proc (1, 2, "A VIP7760 multiplexer cannot be configured as an FNP.  ^a", "^a", mpx_chan, "");

/* Make sure line type is right */

	if cdte.line_type ^= LINE_POLLED_VIP
	then call error_proc (2, 2, "A VIP7760 multiplexer must have a line type of POLLED_VIP.  ^a", "^a", mpx_chan,
		"");

/* Validate subchannel names */

	if chan_list.count > 32
	then call error_proc (3, 2, "More than 32 subchannels specified for VIP7760 multiplexer ^a.", "^a", mpx_chan,
		"");

	j = length (rtrim (cdte.name)) + 1;		/* get length of major channel name */
	do i = 1 to chan_list.count;			/* examine subchans */
	     p = chan_list.cdte_ptr (i);
	     len = length (rtrim (p -> cdte.name)) - j;
	     if len < 3				/* name too short */
	     then do;
bad_name:
		call error_proc (4, 2, "Invalid subchannel name ^a for VIP7760 multiplexer ^a.", "^a for ^a",
		     substr (p -> cdte.name, j + 1), mpx_chan);
		go to next_subchan;
	     end;
	     if len > 3				/* name too long, better be more components */
	     then if substr (p -> cdte.name, j + 4, 1) ^= "."
						/* nope, bad name */
		then go to bad_name;

	     if verify (substr (p -> cdte.name, j + 1, 1), "dpx") ^= 0
	     then go to bad_name;

	     station_addr = bin (substr (p -> cdte.name, j + 2, 2));
	     if station_addr < 0 | station_addr > 31
	     then go to bad_name;
next_subchan:
	end;

	return;

/* Subroutine to prepare info structure for "load_mpx" control order */

get_boot_info:
     proc;

dcl  add_info char (512) varying;
dcl  (i, j) fixed bin;
dcl  p ptr;
dcl  switch bit (1);


	boot_info.ev_chan = cdte.event;
	boot_info.pause_time = 1;			/* default value */
	boot_info.max_text_len = 1024;		/* default value */
	boot_info.max_message_len = 289;		/* default value */
	string (boot_info.flags) = ""b;
	boot_info.quit = "q";			/* default function code value recognized as a QUIT */
	boot_info.formfeed = "l";			/* default function code value recognized as FF */
	boot_info.pad1 (*) = 0;

/* get baud rates for printer subchannels */

	if chan_list.count > 32 then do;
	     call sys_log_ (1, "^a: More than 32 subchannels specified for multiplexer ^a.  ^d", name, mpx_chan,
		chan_list.count);
	     go to error_exit;
	end;

	boot_info.nchan = chan_list.count;
	j = length (rtrim (cdte.name)) + 2;		/* get index of subchan component name */
	do i = 1 to chan_list.count;
	     p = chan_list.cdte_ptr (i);
	     boot_info.devx (i) = p -> cdte.twx;
	     boot_info.slave (i) = (p -> cdte.service_type = SLAVE_SERVICE);
	     if substr (p -> cdte.name, j, 1) = "p"	/* this is a printer subchan */
	     then do;
		if ^boot_info.slave (i) then do;
		     call sys_log_ (1, "Printer subchannel ^a of multiplexer ^a does not have slave service type.",
			substr (p -> cdte.name, j), mpx_chan);
		     go to error_exit;
		end;
		if p -> cdte.baud_rate = 300
		then boot_info.baud_rate (i) = 300;
		else boot_info.baud_rate (i) = 1200;	/* this is our default */
	     end;
	     else boot_info.baud_rate (i) = 0;		/* not interesting for displays */
	     boot_info.pad2 (i, *) = 0;
	end;

/* get bootload parameters kept in additional info field of terminal type */

	if cdte.initial_terminal_type = "" | cdte.initial_terminal_type = low (length (cdte.initial_terminal_type))
	then return;				/* no terminal type, use defaults */

	call ttt_info_$additional_info (cdte.initial_terminal_type, add_info, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (1, code, name,
		"Cannot get additional info from terminal type ^a for multiplexer ^a", cdte.initial_terminal_type,
		mpx_chan);
	     go to error_exit;
	end;
	if length (add_info) = 0
	then return;

/* check for switch-type parameters */

	if find_switch_parm ("controller_poll", switch)
	then boot_info.controller_poll = switch;

	if find_switch_parm ("crlf_echo", switch)
	then boot_info.crlf_echo = switch;

	if find_switch_parm ("omit_nl", switch)
	then boot_info.omit_nl = switch;

	if find_switch_parm ("omit_ff", switch)
	then boot_info.omit_ff = switch;

	if find_switch_parm ("gcos_break", switch)
	then boot_info.gcos_break = switch;

	if find_switch_parm ("etb_mode", switch)
	then boot_info.etb_mode = switch;

/* check for pause time */

	if find_parm_value ("pause_time", temp_value)
	then boot_info.pause_time = -temp_value;	/* negative value means milliseconds */

/* check for max text length */

	if find_parm_value ("max_text_len", temp_value) then do;
	     boot_info.max_text_len = temp_value;
	     if boot_info.max_text_len < 64 | boot_info.max_text_len > 1920 then do;
		call sys_log_ (1,
		     "^a: Specified value for max_text_len in terminal type ^a for multiplexer ^a is outside allowed range of 64 to 1920.  ^d"
		     , name, cdte.initial_terminal_type, mpx_chan, boot_info.max_text_len);
		go to error_exit;
	     end;
	end;

/* check for max message length */

	if find_parm_value ("max_message_len", temp_value) then do;
	     boot_info.max_message_len = temp_value;
	     if boot_info.max_message_len < 73 | boot_info.max_message_len > 1024 then do;
		call sys_log_ (1,
		     "^a: Specified value for max_message_len in terminal type ^a for multiplexer ^a is outside allowed range of 73 to 1024.  ^d"
		     , name, cdte.initial_terminal_type, mpx_chan, boot_info.max_message_len);
		go to error_exit;
	     end;
	end;

/* check for quit function code */

	i = index (add_info, "quit=");
	if i > 0 then do;
	     load_parm = "quit function code";
	     i = i + length ("quit=");
	     if i > length (add_info)
	     then go to bad_load_parm;
	     boot_info.quit = substr (add_info, i, 1);
	end;

/* check for formfeed function code */

	i = index (add_info, "formfeed=");
	if i > 0 then do;
	     load_parm = "formfeed function code";
	     i = i + length ("formfeed=");
	     if i > length (add_info)
	     then go to bad_load_parm;
	     boot_info.formfeed = substr (add_info, i, 1);
	end;

/* Subroutine to find a yes/no type parameter in the add_info string. */

find_switch_parm:
	proc (name, switch) returns (bit (1));

dcl  name char (*);					/* name of parameter */
dcl  switch bit (1);				/* ON for "yes" value, OFF for "no" */

dcl  i fixed bin;


	     i = index (add_info, name || "=");
	     if i = 0				/* no such parm */
	     then return ("0"b);

	     load_parm = name;
	     i = i + length (name) + 1;
	     if i + 1 > length (add_info)
	     then go to bad_load_parm;
	     if substr (add_info, i, 2) = "no"
	     then switch = "0"b;
	     else do;
		if i + 2 > length (add_info)
		then go to bad_load_parm;
		if substr (add_info, i, 3) = "yes"
		then switch = "1"b;
		else go to bad_load_parm;
	     end;

	     return ("1"b);

	end;					/* find_switch_parm */


/* subroutine to find a parameter in the add_info string with a numeric value */

find_parm_value:
	procedure (name, value) returns (bit (1));

dcl  name char (*);
dcl  value fixed bin;

	     i = index (add_info, name || "=");
	     if i > 0 then do;
		load_parm = name;
		i = i + length (name) + 1;
		if i > length (add_info)
		then go to bad_load_parm;
		j = verify (substr (add_info, i), "0123456789");
		if j = 0
		then j = length (add_info) + 1 - (i - 1);
		if j <= 1
		then go to bad_load_parm;
		value = bin (substr (add_info, i, j - 1), 17);
		return ("1"b);
	     end;

	     else return ("0"b);
	end find_parm_value;


     end;						/* get_boot_info */


bad_load_parm:
	call sys_log_ (1, "^a: Invalid ^a specification in terminal type ^a for multiplexer ^a.", name, load_parm,
	     cdte.initial_terminal_type, mpx_chan);
error_exit:
	arg_code = error_table_$action_not_performed;
	return;

%include polled_vip_load_info;

%include cdt;

%include author_dcl;

%include line_types;

%include as_wakeup_priorities;

     end;						/* as_vip7760_mpx_ */
