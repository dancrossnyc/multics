/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* AS_MCS_MPX_ - Provides an interface for the answering service for fnp loading and dumping
   that makes FNP's look like just another multiplexer */

/* Written August 1978 by Larry Johnson */
/* Changed April 1978 from as_fnp_mpx_ to as_mcs_mpx_ by Larry Johnson */
/*	cv_cmf entry added at that time */
/* changed July 1979 to implement fnp_crash_notify.ec */
/* Modified 79 August 21 by Art Beattie to pass FNP type and memory size to fdump_fnp_ and add checks on FNP */
/*	definition in mcs_cv_cmf entry. */
/* Modified June 1981 by T. Casey for MR9.0 for new wakeup priorities. */
/* Modified April 1982 by Robert Coren to support baud rates up to 72000. */
/* Modified June 1982 by Robert Coren to accept memory sizes up to 256K. */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */
/* Modified November 1983 by Robert Coren to make wakeup handler check for other pending wakeups if loading times out. */
/* Modified 83-12-15 BIM to fix grab aste protocol bug. */
/* Modified 1984-08-28  BIM for tracing improvements to catch a mpx_mgr_ bug */


/****^  HISTORY COMMENTS:
  1) change(86-07-28,Beattie), approve(86-07-28,MCR7481),
     audit(86-09-19,Brunelle), install(86-10-15,MR12.0-1185):
     Extend timeout value from 1 min to 2 min waiting for a multiplexer to
     load.
  2) change(87-03-20,Beattie), approve(87-04-06,MCR7656),
     audit(87-07-16,Parisek), install(87-08-04,MR12.1-1055):
     Prevent any FNP channel from using HASP_OPR line type which is only valid
     for HASP multiplexer operator subchannels.
  3) change(87-07-17,Parisek), approve(87-07-17,MCR7715),
     audit(87-08-10,Fawcett), install(87-08-11,MR12.1-1080):
     Establish an admin SCI environment for calling fnp_crash_notify.ec
     within the initializer process.
  4) change(87-08-12,Parisek), approve(87-08-12,PBF7715),
     audit(87-08-12,Fawcett), install(87-08-13,MR12.1-1085):
     Set sc_stat_$admin_sci_ptr to value of sc_stat_$master_sci_ptr so
     signal_io_ will not complain.
  5) change(87-08-18,Parisek), approve(87-08-18,PBF7715),
     audit(87-09-03,Farley), install(87-09-10,MR12.1-1104):
     Remove unnecessary sc_subsystem_info_ references.
  6) change(87-09-17,Parisek), approve(87-09-18,PBF7715),
     audit(87-09-18,Farley), install(87-09-21,MR12.1-1111):
      a. Remove reference to sc_stat_$master_sci_ptr.
      b. Create our own sci_ptr and set sc_stat_$admin_sci_ptr equal to our
         sci_ptr.
      c. Get sc_subsystem_info_ptr based on our new sc_stat_$admin_sci_ptr
         value.
      d. Set sc_subsystem_info.real_iocb to sc_stat_$master_iocb for
         signal_io_.
  7) change(87-09-23,Parisek), approve(87-09-23,PBF7715),
     audit(87-09-23,Farley), install(87-09-23,MR12.1-1119):
     Move sys_log_ message of FDUMP being created to a more appropriate place,
     immediately after the call to create the FDUMP.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,^ifthendo */
as_mcs_mpx_:
     proc;

/* Parameters */

dcl  arg_mpx_name char (*);				/* Name of the multiplxer (fnp) */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_fnpep ptr;					/* Pointer to cdte entry for this fnp */
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */
dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  bc fixed bin(24);
dcl  fnp_boot_timeout_mins fixed bin (71);
dcl  code fixed bin (35);
dcl  fnp_no fixed bin;
dcl  mpx_name char (32);
dcl  chan_listp ptr;
dcl  wakeup_found fixed bin;
dcl  ev_msg_array (2) bit (36);
dcl  ev_msg_char char (8);
dcl  ename char (32);
dcl  (i, j) fixed bin;
dcl  lsla_count (0:5) fixed bin;
dcl  hsla_configured (0:2) bit (1);
dcl  adapt_type bit (1);
dcl  adapt_no fixed bin;
dcl  chan_no fixed bin;
dcl  recursive_event_info_ptr pointer;
dcl  saved_admin_sci_ptr ptr;
dcl  sci_ptr ptr;
dcl  sync_line bit (1);
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;
dcl  entry_type fixed bin (2);

/* Constants */

dcl  fnp_boot_timeout_secs fixed bin (71) init (120) int static options (constant);
dcl  RELATIVE_SECONDS bit (2) init ("11"b) int static options (constant);
dcl  name char (11) int static options (constant) init ("as_mcs_mpx_");
dcl  sync_baud_rates (10) fixed bin int static options (constant)
	init (1200, 1800, 2400, 4800, 7200, 9600, 19200, 40800, 50000, 72000);
dcl  sysdir char(168) int static options (constant) init (">system_control_1");

/* Static */

dcl  static_cdtp ptr int static init (null);		/* Remember where cdt is */

/* External */

dcl  call_ec_ entry options (variable);
dcl  get_fnp_name_ entry (fixed binary) returns (character (32));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  load_fnp_ entry (fixed bin, ptr, ptr, bit (1) aligned, fixed bin (35));
dcl  load_fnp_$abort entry (fixed binary, pointer, fixed binary (35));
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$read_ev_chn entry (fixed bin (71), fixed bin, ptr, fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));
dcl  fdump_fnp_ entry (fixed bin, fixed bin, fixed bin, char (*), fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  parse_tty_name_ entry (char (*), fixed bin, bit (1), fixed bin, fixed bin);
dcl  sc_create_sci_ entry (ptr, fixed bin (35));
dcl  sc_create_sci_$destroy entry (ptr);
dcl  ssu_$get_info_ptr entry (ptr) returns (ptr);
     
/* Static */

dcl  error_table_$action_not_performed ext fixed bin (35);

/* Builtins */

dcl  (addr, bit, char, clock, hbound, index, lbound, ltrim, mod, null, rtrim, string, unspec) builtin;

/* Conditions */
dcl  cleanup condition;

/* Based */

dcl  1 chan_list aligned based (chan_listp),		/* List of cdte entries of channels to boot */
       2 count fixed bin,
       2 cdte_ptr (0 refer (chan_list.count)) ptr unal;

/* Entry to load a fnp */

mcs_load:
     entry (arg_mpx_name, arg_cdtp, arg_fnpep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_name = arg_mpx_name;
	cdtp, static_cdtp = arg_cdtp;
	fnpep = arg_fnpep;
	chan_listp = arg_chan_listp;
	mpxep = addr (fnpe.mpxe);

	call compute_fnp_no;

	if fnpe.boot_ev_chan = 0
	then do;
	     call ipc_$create_ev_chn (fnpe.boot_ev_chan, code);
	     if code ^= 0
	     then do;
ev_chan_err:
		call sys_log_$error_log (SL_LOG, code, name, "Creating event channel for FNP ^a.", mpx_name);
		arg_code = error_table_$action_not_performed;
		return;
	     end;
	     call ipc_$decl_ev_call_chn (fnpe.boot_ev_chan, fnp_wakeup_handler, fnpep, MPX_LOAD_PRIO, code);
	     if code ^= 0
	     then go to ev_chan_err;
	end;

	call timer_manager_$reset_alarm_wakeup (fnpe.boot_ev_chan);
	call ipc_$drain_chn (fnpe.boot_ev_chan, code);	/* Just in case */
	if code ^= 0
	then do;
	     call sys_log_$error_log (SL_LOG, code, name, "Resetting event channel for FNP ^a.", mpx_name);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	call load_fnp_ (fnp_no, cdtp, chan_listp, arg_check_sw, code);
	if code ^= 0
	then do;
	     arg_code = code;
	     mpxe.state = FNP_UNKNOWN;
	     return;
	end;

	call timer_manager_$alarm_wakeup (fnp_boot_timeout_secs, RELATIVE_SECONDS, fnpe.boot_ev_chan);
						/* Allow some reasonable time */
	arg_code = 0;
	return;

/* Take a dump of an fnp */

mcs_dump:
     entry (arg_mpx_name, arg_cdtp, arg_fnpep, arg_code);

	mpx_name = arg_mpx_name;
	cdtp = arg_cdtp;
	fnpep = arg_fnpep;
	mpxep = addr (fnpe.mpxe);

	sci_ptr = null;
	saved_admin_sci_ptr = sc_stat_$admin_sci_ptr;

	call compute_fnp_no;

	call fdump_fnp_ (fnp_no, fnpe.type, fnpe.memory, ename, code);
	if code ^= 0
	then call sys_log_$error_log (SL_LOG, code, name, "Taking dump of FNP ^a. ^a", mpx_name, ename);
	else do;
	     call sys_log_ (SL_LOG, "^a: FDUMP of FNP ^a created in >dumps>^a", name, mpx_name, ename);
						/* See if there is a fnp_crash_notify.ec */
	     call hcs_$status_minf (sysdir, "fnp_crash_notify.ec", (1), entry_type, bc, code);

	     if code ^= 0 then do;
		call sys_log_$error_log (SL_LOG_SILENT, code, name,
		     "^a>fnp_crash_notify.ec does not exist.", sysdir);
		go to return_to_caller;
	     end;

	     call sc_create_sci_ (sci_ptr, code);
	     if code ^= 0 then do;
		call sys_log_$error_log (SL_LOG_SILENT, code, name,
		     "Failed to establish an SCI environment.");
		goto return_to_caller;
	     end;

	     on cleanup begin;
		sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
		call sc_create_sci_$destroy (sci_ptr);
	     end;

	     sc_stat_$admin_sci_ptr = sci_ptr;		/* sc_command requires sc_stat_$admin_sci_ptr to be valid */
	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	     sc_subsystem_info.real_iocb = sc_stat_$master_iocb;

	     call call_ec_ (rtrim(sysdir) || ">fnp_crash_notify", rtrim (mpx_name), rtrim (fnpe.coreimage),
		">dumps>" || rtrim (ename));
	end;

return_to_caller:
	arg_code = code;
	if sci_ptr ^= null then do;
	     sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
	     call sc_create_sci_$destroy (sci_ptr);
	end;
	return;
     

/* Wakeup handler for wakeups on the bootload event channel */

fnp_wakeup_handler:
     entry (arg_event_infop);

	event_call_info_ptr = arg_event_infop;
	cdtp = static_cdtp;
	fnpep = event_call_info.data_ptr;
	mpxep = addr (fnpe.mpxe);

	if event_call_info.ring ^= 0
	then					/* If not ring-0 */
	     if event_call_info.sender ^= get_process_id_ ()
	     then do;				/* Trust only myself */
		string (ev_msg_array) = unspec (event_call_info.message);
		call sys_log_ (SL_LOG, "^a: Unexpected wakeup (^w ^w) from process ^w.", name, ev_msg_array,
		     event_call_info.sender);
		return;
	     end;

	call compute_fnp_no;
	if code ^= 0
	then do;
	     call sys_log_ (SL_LOG, "^a: Wakeup with bad data pointer ignored: ^p", name, fnpep);
	     return;
	end;

	mpx_name = get_fnp_name_ (fnp_no);

	unspec (ev_msg_char) = unspec (event_call_info.message);
	if ev_msg_char = "alarm___"
	then do;					/* Timeout */
	     wakeup_found = 1;
	     do while (bit (wakeup_found, 1));
		call ipc_$read_ev_chn (fnpe.boot_ev_chan, wakeup_found, recursive_event_info_ptr, code);
						/* check to see if something more useful has also happened */
		if code ^= 0
		then do;				/* a most unlikely result, but should be dealt with */
		     call sys_log_$error_log (SL_LOG, code, name, "Reading event channel for FNP ^a.", mpx_name);
		     return;
		end;

		else if bit (wakeup_found, 1)
		then call fnp_wakeup_handler (recursive_event_info_ptr);
						/* call ourselves to handle it */
	     end;					/* end loop over wakeups */

	     /*** here to examine a timeout */

	     if mpxe.state = FNP_BOOT
	     then do;
		if (clock () - mpxe.time_load_start) < fnp_boot_timeout_secs * 1000000
		then return;			/* Leftover from old bootload */

		/*** here for legitimate time_out */

		call free_boot_seg (fnp_no);
		fnp_boot_timeout_mins = fnp_boot_timeout_secs / 60;
		call sys_log_ (SL_LOG_BEEP, "^a: Load of FNP ^a did not complete within ^d minute^(s^).", name,
		     mpx_name, fnp_boot_timeout_mins, (fnp_boot_timeout_mins ^= 1));
		call multiplexer_mgr_$mpx_load_failed (mpx_name, code);
		return;
	     end;
	     return;
	end;					/* end of processing for alarm___ */

	fnp_msg_ptr = addr (event_call_info.message);
	if static_trace_switch
	then call sys_log_ (SL_LOG, "^a (trace): FNP ^d, MPXE state ^a, FNP state ^a^[, deconfigured^].", name,
		fnp_msg.fnp_no, MPXE_STATE (mpxe.state), MPXE_STATE ((fnp_msg.state)), fnp_msg.deconfigured);

	if fnp_msg.fnp_no ^= fnp_no
	then do;					/* Garbage msg */
	     call sys_log_ (SL_LOG,
		"^a: Invalid wakeup received for FNP ^a. Wakeup appears to be for FNP ^a (#^d).", name, mpx_name,
		get_fnp_name_ ((fnp_msg.fnp_no)), fnp_msg.fnp_no);
	     return;
	end;

	if fnp_msg.state < FNP_UNKNOWN | fnp_msg.state > FNP_UP
	then do;
	     call sys_log_ (SL_LOG, "^a: Wakeup for FNP ^a has invalid state code: ^d.", name, mpx_name, fnp_msg.state);
	     return;
	end;

	if mpxe.state = FNP_BOOT
	then do;					/* Now booting */
	     call free_boot_seg (fnp_no);
	     if fnp_msg.state = FNP_DOWN
	     then do;				/* Boot failed */
		call multiplexer_mgr_$mpx_load_failed (mpx_name, code);
		call sys_log_ (SL_LOG, "^a: Load failed for FNP ^a.", name, mpx_name);
	     end;
	     else if fnp_msg.state = FNP_UP
	     then do;				/* Boot succeeded */
		call multiplexer_mgr_$mpx_loaded (mpx_name, code);
		call sys_log_ (SL_LOG, "^a: Load signalled for FNP ^a.", name, mpx_name);
	     end;
	     else
bad_wakeup:
		call sys_log_ (SL_LOG,
		     "^a: Inconsistent wakeup received from FNP ^a. FNP state = ^a, msg state = ^a.", name, mpx_name,
		     MPXE_STATE ((mpxe.state)), MPXE_STATE ((fnp_msg.state)));
	     return;
	end;

	else if mpxe.state = FNP_UP
	then do;					/* Currently running ok */
	     if fnp_msg.state = FNP_DOWN
	     then do;				/* It crashed */
		call multiplexer_mgr_$mpx_crashed (mpx_name, ^fnp_msg.deconfigured, code);
						/* don't reload if deconfigured */
		call sys_log_ (SL_LOG, "^a: Crash signalled for FNP ^a.", name, mpx_name);
	     end;
	     else go to bad_wakeup;
	end;
	else go to bad_wakeup;
	return;

/* Procedure to get fnp number given a fnp entry ptr in cdt */

compute_fnp_no:
     proc;

dcl  i fixed bin;
dcl  p ptr;

	do i = 1 to hbound (cdt.fnp_entry, 1);
	     p = addr (cdt.fnp_entry (i));
	     if p = fnpep
	     then do;				/* Got it */
		fnp_no = i;
		code = 0;
		return;
	     end;
	end;
	call sys_log_ (SL_LOG, "^a: Procedure called with bad fnpep into cdt: ^p", name, fnpep);
	code = error_table_$action_not_performed;
	return;

     end compute_fnp_no;




/* Procedure to free the boot segment */

free_boot_seg:
     procedure (fnp_no);

declare  fnp_no fixed bin;

	call load_fnp_$abort (fnp_no, cdtp, (0));
	return;

     end free_boot_seg;

/* This entry is called at cv_cmf time to validate the CMF entries for an FNP */

/* Summary of errors detected:
   1  - Invalid memory size.
   2  - Invalid LSLA count.
   3  - Invalid HSLA count.
   4  - DN6670 configured with LSLA's.
   5  - Illegal channel name.
   6  - No baud rate specified.
   7  - Synchronous line type spcified on LSLA channel.
   8  - Baud rate invalid on syncrhonous line.
   9  - HSLA subchannel > 31 specified.
   10 - LSLA subchannel > 51 specified.
   11 - LSLA subchannel specified as autobaud.
   12 - Baud rate invalid on LSLA channel.
   13 - LSLA has too many time slots configured.
   14 - Channels configured on more LSLA's than specified in lsla statement.
   15 - Channels configured on more HSLA's than specified in hsla statement.
   16 - Not configured as top-level multiplexer.
   17 - FNP other than DN6670 configured for more than 32K of memory.
   18 - Invalid line_type specified for an FNP channel.
*/

mcs_cv_cmf:
     entry (arg_cdtp, arg_fnpep, arg_mpx_name, arg_chan_listp, arg_error_proc);

	cdtp = arg_cdtp;
	fnpep = arg_fnpep;
	mpx_name = arg_mpx_name;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

	if index (mpx_name, ".") > 0
	then do;
	     call error_proc (16, 2, "An mcs multiplexer can only be configured for an FNP, not ^a", "^a", mpx_name, "")
		;
	     return;
	end;

/* Apply some defaults */

	if fnpe.memory = 0
	then fnpe.memory = 32;			/* The default */
	if fnpe.type = 0
	then fnpe.type = DN355;
	if fnpe.coreimage = ""
	then fnpe.coreimage = "mcs";

/* Check memory size */

	if fnpe.memory < 32 | fnpe.memory > 256 | mod (fnpe.memory, 32) ^= 0
	then do;
	     call ioa_$rsnnl ("^dk", ename, (0), fnpe.memory);
	     call error_proc (1, 2, "Invalid memory size of ""^a"" on FNP ^a.", "^a on FNP ^a", ename, mpx_name);
	end;

	if fnpe.memory > 32 & fnpe.type ^= DN6670
	then call error_proc (17, 2,
		"The FNP type, ""^a"", for FNP ^a cannot be configured for more than 32K of memory.",
		"type ^a for FNP ^a", fnp_types (fnpe.type), mpx_name);

/* Check number of adapters */

	if fnpe.nlslas < 0 | fnpe.nlslas > 6
	then call error_proc (2, 2, "Invalid lsla count on FNP ""^a"".", "FNP ^a", mpx_name, "");
	if fnpe.nhslas < 0 | fnpe.nhslas > 3
	then call error_proc (3, 2, "Invalid hsla count on FNP ""^a"".", "FNP ^a", mpx_name, "");
	if fnpe.type = DN6670 & fnpe.nlslas ^= 0
	then do;
	     fnpe.nlslas = 0;
	     call error_proc (4, 2, "DN6670 (FNP ^a) configured with lsla's", "FNP ^a", mpx_name, "");
	end;

/* Now loop thru all the channels */

	lsla_count (*) = 0;
	hsla_configured (*) = "0"b;

	do i = 1 to chan_list.count;
	     cdtep = chan_list.cdte_ptr (i);
	     call parse_tty_name_ ((cdte.name), fnp_no, adapt_type, adapt_no, chan_no);
	     if fnp_no < 0
	     then do;
		call error_proc (5, 2, "Illegal channel name ""^a"".", "^a", (cdte.name), "");
		go to next_channel;
	     end;

	     if cdte.baud_rate = 0 & ^cdte.autobaud
	     then call error_proc (6, 2, "No baud rate specified for ""^a"".", "^a", (cdte.name), "");

	     if cdte.line_type = LINE_HASP_OPR
	     then call error_proc (18, 2, "Invalid line type ""^a"" specified for channel ""^a"".",
		"^a for channel ^a", line_types (cdte.line_type), (cdte.name));

	     sync_line = "0"b;
	     do j = 1 to hbound (sync_line_type, 1) while (^sync_line);
		if cdte.line_type = sync_line_type (j)
		then sync_line = "1"b;
	     end;
	     if sync_line
	     then do;
		if ^adapt_type
		then call error_proc (7, 2, "Synchronous line type specified on LSLA channel ""^a"".", "^a",
			(cdte.name), "");
		do j = 1 to hbound (sync_baud_rates, 1) while (cdte.baud_rate ^= sync_baud_rates (j));
		end;
		if j > hbound (sync_baud_rates, 1)
		then call error_proc (8, 2, "Invalid synchronous baud rate specified for ""^a"".", "^a", (cdte.name),
			"");
	     end;

	     if adapt_type				/* Hsla */
	     then if adapt_no ^= 7			/* if not special channel */
		then do;
		     hsla_configured (adapt_no) = "1"b;
		     if chan_no > 31
		     then call error_proc (9, 2, "HSLA subchannel > 31 specified for ""^a"".", "^a", (cdte.name), "");
		end;
		else ;

	     else do;
		if chan_no > 51
		then call error_proc (10, 2, "LSLA subchannel > 51 specified for ""^a"".", "^a", (cdte.name), "");
		if cdte.autobaud
		then call error_proc (11, 2, "LSLA subchannel ""^a"" specified as autobaud.", "^a", (cdte.name), "");
		if cdte.baud_rate = 110
		then lsla_count (adapt_no) = lsla_count (adapt_no) + 1;
		else if cdte.baud_rate = 133 | cdte.baud_rate = 150
		then lsla_count (adapt_no) = lsla_count (adapt_no) + 2;
		else if cdte.baud_rate = 300
		then lsla_count (adapt_no) = lsla_count (adapt_no) + 3;
		else call error_proc (12, 2, "Invalid baud rate specified for LSLA channel ""^a"".", "^a",
			(cdte.name), "");
	     end;

next_channel:
	end;

/* Some final consistency checks */

	j = 0;
	do i = lbound (lsla_count, 1) to hbound (lsla_count, 1);
	     if lsla_count (i) > 0
	     then do;
		j = j + 1;
		if lsla_count (i) > 52
		then do;
		     call ioa_$rsnnl ("LSLA ^d", ename, (0), i);
		     call error_proc (13, 2, "^a on FNP ^a has too many time slots configured.", "^a on FNP ^a",
			ename, mpx_name);
		end;
	     end;
	end;
	if j > fnpe.nlslas
	then call error_proc (14, 2, "More LSLA's configured on FNP ^a than specified in lsla statement.", "FNP ^a",
		mpx_name, "");

	j = 0;
	do i = lbound (hsla_configured, 1) to hbound (hsla_configured, 1);
	     if hsla_configured (i)
	     then j = j + 1;
	end;
	if j > fnpe.nhslas
	then call error_proc (15, 2, "More HSLA's configured on FNP ^a than specified in hsla statement.", "FNP ^a",
		mpx_name, "");

	return;

dcl  static_trace_switch bit (1) aligned int static init ("0"b);

trace_on:
     entry;
	static_trace_switch = "1"b;
	call sys_log_ (SL_LOG, "^a: Tracing on.", name);
	return;
trace_off:
     entry;
	static_trace_switch = "0"b;
	call sys_log_ (SL_LOG, "^a: Tracing off.", name);
	return;

MPXE_STATE:
     procedure (state) returns (char (32));

declare  state fixed bin;

	if state < lbound (MPXE_STATE_NAMES, 1) | state > hbound (MPXE_STATE_NAMES, 1)
	then return (ltrim (char (state)));
	else return (MPXE_STATE_NAMES (state));
     end MPXE_STATE;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE Creating event channel for FNP TAG.

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when an attempt was made
   to create an event channel for FNP TAG.  The load attempt has been aborted.
   This message can also be logged if an error occured when changing the just
   created event-wait channel into an event-call channel.

   A:	$inform

   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE Resetting event channel for FNP TAG.

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when an attempt was made to
   drain all events from the FNP boot event channel.

   A:	$inform

   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE Taking dump of FNP TAG. FNP_DUMP_ENTRY_NAME

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when an attempt was made to
   dump FNP TAG into the FNP_DUMP_ENTRY_NAME segment in >dumps.

   A:	$inform

   Message:
   as_mcs_mpx_: FDUMP of FNP TAG created in >dumps>FNP_DUMP_ENTRY_NAME

   S:	$as1

   T:	$run

   M:	FNP TAG has been dumped successfully into the
   >dumps>FNP_DUMP_ENTRY_NAME segment after it crashed.

   A:	$inform

   Message:
   as_mcs_mpx_: Unexpected wakeup (EV_MSG_WORD_1 EV_MSG_WORD_2) from process
   PROC_ID.

   S:	$as1

   T:	$run

   M:	An unexpected wakeup occured on an FNP bootload event channel from
   process PROC_ID.  The event message data is in EV_MSG_WORD_1 and
   EV_MSG_WORD_2.  Unable to determine FNP tag.

   A:	$inform

   Message:
   as_mcs_mpx_: Wakeup with bad data pointer ignored: POINTER

   S:	$as1

   T:	$run

   M:	A wakeup was received on an FNP bootload event channel with which a
   bad data pointer was supplied.  Unable to determine FNP tag.

   A:	$inform

   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE Reading event channel for FNP TAG.

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when an attempt was made to
   read the bootload event channel for FNP TAG.

   A:	$inform

   Message:
   as_mcs_mpx_: Load of FNP TAG did not complete within X minutes.

   S:	$as2

   T:	$run

   M:	FNP TAG did not signal that it had completed the load attempt within
   the required X minutes from the time that the image was sent to the FNP.

   A:	Try to load the FNP again.  If problem persists, contact system
   programing staff.

   Message:
   as_mcs_mpx_ (trace): FNP FNP_NUMBER, MPXE state MPX_STATE, FNP state
   FNP_STATE{, deconfigured}.

   S:	$as1

   T:	$run

   M:	This is a tracing message which displays some values of variables
   that describe the status of the FNP.

   A:	$inform

   Message:
   as_mcs_mpx_: Invalid wakeup received for FNP TAG. Wakeup appears to be for
   FNP OTHER_TAG (#FNP_NUMBER).

   S:	$as1

   T:	$run

   M:	Invalid wakeup received on bootload event channel for FNP TAG.
   Wakeup data indicates it is for FNP OTHER_TAG whose number is FNP_NUMBER.

   A:	$inform

   Message:
   as_mcs_mpx_: Wakeup for FNP TAG has invalid state code: CODE.

   S:	$as1

   T:	$run

   M:	Wakeup message data received on bootload event channel for FNP TAG
   contains an invalid state code value of CODE.  Valid values for mpxe.state
   are defined in the cdt.incl.pl1 include file by the FNP_* variables.

   A:	$inform

   Message:
   as_mcs_mpx_: Load failed for FNP TAG.

   S:	$as1

   T:	$run

   M:	The FNP TAG failed to load successfully.

   A:	Try the bootload attempt again.  If problem persists, contact the
   programing staff.

   Message:
   as_mcs_mpx_: Load signalled for FNP TAG.

   S:	$as1

   T:	$run

   M:	FNP TAG bootloaded successfully.

   A:	$ignore

   Message:
   as_mcs_mpx_: Inconsistent wakeup received from FNP TAG. FNP state =
   FNP_STATE, msg state = MSG_STATE.

   S:	$as1

   T:	$run

   M:	The data in the message from the bootload event channel for FNP TAG
   indicates that the FNP was in an inconsistant state (MSG_STATE) with the
   current state (FNP_STATE) of the FNP in the CDT.

   A:	$inform

   Message:
   as_mcs_mpx_: Crash signalled for FNP TAG.

   S:	$as1

   T:	$run

   M:	FNP TAG has crashed.  A reload of the FNP will be attempted if it is
   not in a crash loop or not inactive.

   A:	$inform

   Message:
   as_mcs_mpx_: Procedure called with bad fnpep into cdt: POINTER

   S:	$as1

   T:	$run

   M:	The compute_fnp_no internal procedure detected that as_mcs_mpx_ was
   supplied with a prointer value (POINTER) that should point to an FNP entry
   in the CDT but doesn't.  Current operation has been aborted.

   A:	$inform

   Message:
   as_mcs_mpx_: Tracing on.

   S:	$as1

   T:	$run

   M:	The trace_on entry point has been called so that as_mcs_mpx_ trace
   data will now be displayed.

   A:	$inform

   Message:
   as_mcs_mpx_: Tracing off.

   S:	$as1

   T:	$run

   M:	The trace_off entry point has been called and now tracing has been
   disabled.

   A:	$inform

   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE >sc1>fnp_crash_notify.ec does not exist.

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when checking for the existence
   of fnp_crash_notify.ec in the system_control_1 directory.

   A:	$inform


   Message:
   as_mcs_mpx_: ERROR_CODE_MESSAGE Failed to establish an SCI environment.

   S:	$as1

   T:	$run

   M:	An error occured (ERROR_CODE_MESSAGE) when trying to create an
   system control subsystem environment pointer.

   A:	$inform

   END MESSAGE DOCUMENTATION */
%page;
%include cdt;
%page;
%include author_dcl;
%page;
%include as_mpx_state_names_;
%page;
%include line_types;
%page;
%include as_wakeup_priorities;
%page;
%include event_call_info;
%page;
%include fnp_mpx_msg_;
%page;
%include sc_subsystem_info_;
%page;
%include sc_stat_;
%page;
%include sys_log_constants;
     end as_mcs_mpx_;
