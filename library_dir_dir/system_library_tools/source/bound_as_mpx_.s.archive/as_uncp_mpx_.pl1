/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-06-13,Berno), approve(88-07-13,MCR7928),
     audit(88-06-13,Parisek), install(88-07-19,MR12.2-1061):
     Created to implement the uncp multiplexer interface for the DSA gateway.
                                                   END HISTORY COMMENTS */

/* AS_UNCP_MPX_ - Provides an interface for the answering service for fnp loading and dumping
   that makes FNP's look like just another multiplexer */

/* Written August 1978 by Larry Johnson */
/* Changed April 1978 from as_fnp_mpx_ to as_mcss
   s_mpx_ by Larry Johnson */
/*	cv_cmf entry added at that time */
/* changed July 1979 to implement fnp_crash_notify.ec */
/* Modified 79 August 21 by Art Beattie to pass FNP type and memory size to fdump_fnp_ and add checks on FNP */
/*	definition in mcs_cv_cmf entry. */
/* Modified June 1981 by T. Casey for MR9.0 for new wakeup priorities. */
/*     change le nom  en as_uncp_mpx_         */
/*     modifications dans wakeup handler     */
/* Modifie en Aout 1982 pour le load du DN 7100   */
/* Modified April 1982 by Robert Coren to support baud rates up to 72000. */
/* Modified June 1982 by Robert Coren to accept memory sizes up to 256K. */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */

/* THE FOLLOWING HISTORY COMMENTS REFER TO as_uncp_mpx_ VERSION NOT 
   as_mcs_mpx_.  THIS CODE WAS EXTRACTED FROM as_mcs_mpx_.pl1. */

/* Reported in June 1983 the modifications for the Datanet 7100.     */
/* Reported in September 1985 the modifications for MR11   */
/* Modified 25 Oct 85 by PL Schramm to set admin_sci_ptr if null to allow sc_commands in fnp_notify exec_com */
/* Modified in December 1986 for MR12 & DSA-Compact f.d  */
/* Modified in January 1987 for mise a niveau MR12.0 fd. */
/* Modified by JL Berno for attendre 60 secondes apres le load avant de
   dire qu'il y a probleme. */

/* Date of the last modification 22/06/87    */


/* format: style4,delnl,insnl,^ifthendo */

as_uncp_mpx_ :
     proc;

/* Parameters */

dcl  arg_mpx_name char (*);				/* Name of the multiplxer (fnp) */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_fnpep ptr;					/* Pointer to cdte entry for this fnp */
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */

dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  up_time fixed bin;				/* pour le dn 7100    */
dcl  code fixed bin (35);
dcl  fnp_no fixed bin;
dcl  mpx_name char (32);
dcl  chan_listp ptr;
dcl  event_infop ptr;
dcl  ev_msg_array (2) bit (36);
dcl  ev_msg_char char (8);
dcl  ename char (32);
dcl  (i, j) fixed bin;
dcl  lsla_count (0:5) fixed bin;
dcl  hsla_configured (0:2) bit (1);
dcl  adapt_type bit (1);
dcl  adapt_no fixed bin;
dcl  chan_no fixed bin;
dcl  sync_line bit (1);
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;

/* Constants */

dcl  TOO_MANY_BOOTLOADS fixed bin int static options (constant) init (2);
dcl  DEFAULT_MEMORY fixed bin int static options (constant) init (192);
dcl  MAX_MEMORY fixed bin int static options (constant) init (510);
dcl  MOD_OF_MEMORY fixed bin int static options (constant) init (64);
dcl  MAX_LSLAS fixed bin int static options (constant) init (6);
dcl  MAX_HSLAS fixed bin int static options (constant) init (3);
dcl  SPECIAL_CHN fixed bin int static options (constant) init (7);
dcl  fnp_boot_timeout_secs fixed bin (71) init (120) int static options (constant);
dcl  name char (12) int static options (constant) init ("as_uncp_mpx_");
dcl  sync_baud_rates (10) fixed bin int static options (constant)
	init (1200, 1800, 2400, 4800, 7200, 9600, 19200, 40800, 50000, 72000);


/* Static */

dcl  static_cdtp ptr int static init (null);		/* Remember where cdt is */

/* Entrees ajoutees pour le Datanet 7100.      */
dcl  multiplexer_mgr_$load_mpx entry (char (*), bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
dcl  multiplexer_mgr_$shutdown_mpx entry (char (*), bit (1) aligned, fixed bin (35));

dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  load_uncp_ entry (fixed bin, ptr, ptr, bit (1) aligned, fixed bin (35));
dcl  sys_log_$error_log entry options (variable);
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));

dcl  ioa_$rsnnl entry options (variable);
dcl  parse_tty_name_ entry (char (*), fixed bin, bit (1), fixed bin, fixed bin);
dcl  error_table_$action_not_performed ext fixed bin (35);

dcl  (addr, char, clock, divide, hbound, index, lbound, ltrim, mod, string,
      unspec) builtin;
dcl  get_fnp_name_ entry (fixed binary) returns (character (32));

/* Based */

dcl  1 chan_list aligned based (chan_listp),		/* List of cdte entries of channels to boot */
       2 count fixed bin,
       2 cdte_ptr (0 refer (chan_list.count)) ptr unal;

dcl  1 event_info aligned based (event_infop),
       2 channel_id fixed bin (71),
       2 message fixed bin (71),
       2 sender_procid bit (36),
       2 origin,
         3 dev_signal bit (18) unal,
         3 ring bit (18) unal,
       2 data_ptr ptr;

dcl  1 fnp_msg aligned based (addr (event_info.message)),
       2 fnp_no fixed bin (17) unal,
       2 state fixed bin (17) unal,
       2 pad fixed bin (35);


/* Entry to load a fnp */


uncp_load:
     entry (arg_mpx_name, arg_cdtp, arg_fnpep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_name = arg_mpx_name;
	cdtp, static_cdtp = arg_cdtp;
	fnpep = arg_fnpep;
	chan_listp = arg_chan_listp;
	mpxep = addr (fnpe.mpxe);

	call compute_fnp_no;
	if code ^= 0 then do;
	     arg_code = code;
	     return;
	end;

	if fnpe.boot_ev_chan = 0
	then do;
	     call ipc_$create_ev_chn (fnpe.boot_ev_chan, code);
	     if code ^= 0
	     then do;
ev_chan_err:
		call sys_log_$error_log (SL_LOG, code, name, "Creating event channel for FNP ^a.", mpx_name);
		arg_code = error_table_$action_not_performed;
		return;
	     end;
	     call ipc_$decl_ev_call_chn (fnpe.boot_ev_chan, uncp_wakeup_handler, fnpep, MPX_LOAD_PRIO, code);
	     if code ^= 0
	     then go to ev_chan_err;
	end;

	call timer_manager_$reset_alarm_wakeup (fnpe.boot_ev_chan);
	call ipc_$drain_chn (fnpe.boot_ev_chan, code);	/* Just in case */
	if code ^= 0
	then do;

	     call sys_log_$error_log (SL_LOG, code, name, "Resetting event channel for FNP ^a.", mpx_name);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	call load_uncp_ (fnp_no, cdtp, chan_listp, arg_check_sw, code);
	if code ^= 0
	then do;
	     arg_code = code;
	     mpxe.state = FNP_UNKNOWN;
	     return;
	end;

	call timer_manager_$alarm_wakeup ((60), RELATIVE_SECONDS, fnpe.boot_ev_chan);

	arg_code = 0;
	return;

/* Take a dump of an fnp */

uncp_dump:
     entry (arg_mpx_name, arg_cdtp, arg_fnpep, arg_code);
	mpx_name = arg_mpx_name;
	call sys_log_ (SL_LOG, "^a: FNP ^a stopped. All lines disconnected.", name, mpx_name);
	arg_code = 0;
	return;

/* Wakeup handler for wakeups on the bootload event channel */

uncp_wakeup_handler:
     entry (arg_event_infop);

	event_infop = arg_event_infop;
	cdtp = static_cdtp;
	fnpep = event_info.data_ptr;
	mpxep = addr (fnpe.mpxe);


	if event_info.ring ^= "0"b
	then					/* If not ring-0 */
	     if event_info.sender_procid ^= get_process_id_ ()
	     then do;				/* Trust only myself */
		string (ev_msg_array) = unspec (event_info.message);

		call sys_log_ (SL_LOG, "^a: Unexpected wakeup (^w ^w) from process ^w.", name, ev_msg_array,
		     event_info.sender_procid);
		return;
	     end;

	call compute_fnp_no;
	if code ^= 0
	then do;
	     call sys_log_ (SL_LOG, "^a: Wakeup with bad data pointer ignored: ^p", name, fnpep);
	     return;
	end;

	mpx_name = get_fnp_name_ (fnp_no);

	unspec (ev_msg_char) = unspec (event_info.message);

	call timer_manager_$reset_alarm_wakeup (fnpe.boot_ev_chan);

	if ev_msg_char = "alarm___"
	then do;
	     call sys_log_ (SL_LOG_BEEP, "^a: FNP ^a needs to be loaded.", name, mpx_name);

	     return;
	end;



	if ev_msg_char = "inituncp"
	then do;
	     if mpxe.state = MPX_BOOT
	     then do;
		call multiplexer_mgr_$shutdown_mpx (mpx_name, "0"b, code);
		if code ^= 0
		then return;


		call multiplexer_mgr_$load_mpx (mpx_name, "0"b, "1"b, "0"b, code);
		return;
	     end;
	     if mpxe.state = MPX_UP
	     then do;
		call sys_log_ (SL_LOG, "^a: FNP ^a reinitialized (init received from DN7100).",
		     name, mpx_name);
		mpxe.time_last_crash = clock ();
		call multiplexer_mgr_$shutdown_mpx (mpx_name, "0"b, code);
		if code ^= 0
		then return;

		up_time = divide (mpxe.time_last_crash - mpxe.time_last_load, 60000000, 17, 0);
						/* Time it stayed up */
		code = 0;

		if mpxe.current_service_type = INACTIVE
		then				/* Stopped by operator */
		     call sys_log_ (SL_LOG, "^a: FNP ^a is inactive and needs to be loaded.", name, mpx_name);

		else if cdt.acceptable_fnp_tbf = 0
		then				/* No auto reloading */
		     call sys_log_ (SL_LOG, "^a: FNP ^a automatic reloading is disabled and will not be loaded.", name, mpx_name);

		else if (mpxe.n_bootloads >= TOO_MANY_BOOTLOADS) & (up_time < cdt.acceptable_fnp_tbf)
		     & (mpxe.last_tbf < cdt.acceptable_fnp_tbf)
		then call sys_log_ (SL_LOG, "^a: FNP ^a is in apparent crash loop and will not be reloaded", name, mpx_name);

		else call multiplexer_mgr_$load_mpx (mpx_name, "0"b, "1"b, "0"b, code);

		mpxe.last_tbf = up_time;		/* Save for next crash */
		return;				/* ignore other inituncp wakeup */
	     end;
	end;

	if fnp_msg.fnp_no ^= fnp_no
	then do;					/* Garbage msg */
	     call sys_log_ (SL_LOG,
		"^a: Invalid wakeup received for FNP ^a. Wakeup appears to be for GATEWAY #^d",
		name, mpx_name, fnp_msg.fnp_no);
	     return;
	end;

	if fnp_msg.state < FNP_UNKNOWN | fnp_msg.state > FNP_UP
	then do;
	     call sys_log_ (SL_LOG, "^a: Wakeup for FNP ^a has invalid state code: ^d.", name, fnp_msg.state);
	     return;
	end;

	if mpxe.state = FNP_BOOT
	then do;					/* Now booting */

	     if fnp_msg.state = FNP_DOWN
	     then do;				/* Boot failed */
		mpxe.flags.retry_load = "0"b;		/* don't loop to boot the datanet */
		call multiplexer_mgr_$mpx_load_failed (mpx_name, code);
		call sys_log_ (SL_LOG, "^a: Load failed for FNP ^a.", name, mpx_name);
	     end;
	     else if fnp_msg.state = FNP_UP		/* Boot succeeded */
	     then call multiplexer_mgr_$mpx_loaded (mpx_name, code);
						/* don't report anything now, the gateway did it before */
	     else
bad_wakeup:
		call sys_log_ (SL_LOG,
		     "^a: Inconsistent wakeup received from FNP ^a. FNP state = ^a, msg state = ^a",
		     name, mpx_name, MPXE_STATE ((mpxe.state)), MPXE_STATE ((fnp_msg.state)));

	     return;
	end;

	else if mpxe.state = FNP_UP
	then do;					/* Currently running ok */
	     if fnp_msg.state = FNP_DOWN
	     then do;				/* It crashed */
		call multiplexer_mgr_$mpx_crashed (mpx_name, "1"b, code);
						/* don't reload if deconfigured */
		call sys_log_ (SL_LOG, "^a: Crash signalled for FNP ^a.", name, mpx_name);
	     end;
	     else go to bad_wakeup;
	end;
	else go to bad_wakeup;
	return;

/* Procedure to get fnp number given a fnp entry ptr in cdt */

compute_fnp_no:
     proc;

dcl  i fixed bin;
dcl  p ptr;

	do i = 1 to hbound (cdt.fnp_entry, 1);
	     p = addr (cdt.fnp_entry (i));
	     if p = fnpep
	     then do;				/* Got it */
		fnp_no = i;
		code = 0;
		return;
	     end;
	end;
	call sys_log_ (SL_LOG, "^a: Procedure called with bad fnpep into cdt: ^p", name, fnpep);
	code = error_table_$action_not_performed;
	return;

     end compute_fnp_no;




/* Procedure to free the boot segment */

/* free_boot_seg: proc (abort_sw);

   dcl  abort_sw bit (1);

   if fnpe.boot_segp = null () then return;
   if abort_sw then call hphcs_$abort_fnp_load (fnp_no);
   else call hphcs_$release_fnp_seg (fnp_no);
   call hcs_$delentry_seg (fnpe.boot_segp, code);
   fnpe.boot_segp = null ();
   return;

   end free_boot_seg;
*/

/* This entry is called at cv_cmf time to validate the CMF entries for an FNP */

/* Summary of errors detected:
   1  - Invalid memory size.
   2  - Invalid LSLA count.
   3  - Invalid HSLA count.
   4  - DN6670 configured with LSLA's.
   5  - Illegal channel name.
   6  - No baud rate specified.
   7  - Synchronous line type spcified on LSLA channel.
   8  - Baud rate invalid on syncrhonous line.
   9  - HSLA subchannel > 31 specified.
   10 - LSLA subchannel > 51 specified.
   11 - LSLA subchannel specified as autobaud.
   12 - Baud rate invalid on LSLA channel.
   13 - LSLA has too many time slots configured.
   14 - Channels configured on more LSLA's than specified in lsla statement.
   15 - Channels configured on more HSLA's than specified in hsla statement.
   16 - Not configured as top-level multiplexer.
   17 - FNP other than DN6670 configured for more than 32K of memory.
*/

uncp_cv_cmf:
     entry (arg_cdtp, arg_fnpep, arg_mpx_name, arg_chan_listp, arg_error_proc);

	cdtp = arg_cdtp;
	fnpep = arg_fnpep;
	mpx_name = arg_mpx_name;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

	if index (mpx_name, ".") > 0
	then do;
	     call error_proc (16, 2, "uncp multiplexer can only be configured for an FNP, not ^a", "^a", mpx_name,
		"");
	     return;
	end;

/* Apply some defaults */

	if fnpe.memory = 0
	then fnpe.memory = DEFAULT_MEMORY;		/* The default */
	if fnpe.type = 0
	then fnpe.type = DN7100;
	if fnpe.coreimage = ""
	then fnpe.coreimage = "uncp";

/* Check memory size */

	if fnpe.memory < DEFAULT_MEMORY | fnpe.memory > MAX_MEMORY
	then do;
memory_error_size:
	     call ioa_$rsnnl ("^dk", ename, (0), fnpe.memory);
	     call error_proc (1, 2, "Invalid memory size of ""^a"" on FNP ^a.", "^a on FNP ^a", ename, mpx_name);
	     return;
	end;

	if mod (fnpe.memory, MOD_OF_MEMORY) ^= 0
	then do;
	     if fnpe.memory ^= MAX_MEMORY
	     then goto memory_error_size;
	end;					/* Check number of adapters */

	if fnpe.nlslas < 0 | fnpe.nlslas > MAX_LSLAS
	then call error_proc (2, 2, "Invalid lsla count on FNP ""^a"".", "FNP ^a", mpx_name, "");
	if fnpe.nhslas < 0 | fnpe.nhslas > MAX_HSLAS
	then call error_proc (3, 2, "Invalid hsla count on FNP ""^a"".", "FNP ^a", mpx_name, "");
	if fnpe.type = DN7100 & fnpe.nlslas ^= 0
	then do;
	     fnpe.nlslas = 0;
	     call error_proc (4, 2, "DN7100 (FNP ^a) configured with lsla's", "FNP ^a", mpx_name, "");
	end;

/* Now loop thru all the channels */

	lsla_count (*) = 0;
	hsla_configured (*) = "0"b;

	do i = 1 to chan_list.count;
	     cdtep = chan_list.cdte_ptr (i);
	     call parse_tty_name_ ((cdte.name), fnp_no, adapt_type, adapt_no, chan_no);
	     if fnp_no < 0
	     then do;
		call error_proc (5, 2, "Illegal channel name ""^a"".", "^a", (cdte.name), "");
		go to next_channel;
	     end;

	     if cdte.baud_rate = 0 & ^cdte.autobaud
	     then call error_proc (6, 2, "No baud rate specified for ""^a"".", "^a", (cdte.name), "");

	     sync_line = "0"b;
	     do j = 1 to hbound (sync_line_type, 1) while (^sync_line);
		if cdte.line_type = sync_line_type (j)
		then sync_line = "1"b;
	     end;
	     if sync_line
	     then do;
		if ^adapt_type
		then call error_proc (7, 2, "Synchronous line type specified on LSLA channel ""^a"".", "^a",
			(cdte.name), "");
		do j = 1 to hbound (sync_baud_rates, 1) while (cdte.baud_rate ^= sync_baud_rates (j));
		end;
		if j > hbound (sync_baud_rates, 1)
		then call error_proc (8, 2, "Invalid synchronous baud rate specified for ""^a"".", "^a", (cdte.name),
			"");
	     end;

	     if adapt_type				/* Hsla */
	     then if adapt_no ^= SPECIAL_CHN		/* if not special channel */
		then do;
		     hsla_configured (adapt_no) = "1"b;
		     if chan_no > 63
		     then call error_proc (9, 2, "HSLA subchannel > 31 specified for ""^a"".", "^a", (cdte.name), "");
		end;
		else ;

	     else do;
		call error_proc (10, 2, "LSLA forbidden with uncp for ""^a"".", "^a", (cdte.name), "");
						/* For the DN7100 */


   if chan_no > 51 then call error_proc (10, 2, "LSLA subchannel > 51 specified for ""^a"".", "^a",
   (cdte.name), "");
   if cdte.autobaud then call error_proc (11, 2, "LSLA subchannel ""^a"" specified as autobaud.",
   "^a", (cdte.name), "");
   if cdte.baud_rate = 110 then lsla_count (adapt_no) = lsla_count (adapt_no) + 1;
   else if cdte.baud_rate = 133 | cdte.baud_rate = 150 then
   lsla_count (adapt_no) = lsla_count (adapt_no) + 2;
   else if cdte.baud_rate = 300 then lsla_count (adapt_no) = lsla_count (adapt_no) + 3;
   else call error_proc (12, 2, "Invalid baud rate specified for LSLA channel ""^a"".", "^a",
   (cdte.name), "");

	     end;

next_channel:
	end;

/* Some final consistency checks */

   j = 0;
   do i = lbound (lsla_count, 1) to hbound (lsla_count, 1);
   if lsla_count (i) > 0 then do;
   j = j + 1;
   if lsla_count (i) > 52 then do;
   call ioa_$rsnnl ("LSLA ^d", ename, (0), i);
   call error_proc (13, 2, "^a on FNP ^a has too many time slots configured.", "^a on FNP ^a",
   ename, mpx_name);
   end;
   end;
   end;
   if j > fnpe.nlslas then
   call error_proc (14, 2, "More LSLA's configured on FNP ^a than specified in lsla statement.",
   "FNP ^a", mpx_name, "");


	j = 0;
	do i = lbound (hsla_configured, 1) to hbound (hsla_configured, 1);
	     if hsla_configured (i)
	     then j = j + 1;
	end;
	if j > fnpe.nhslas
	then call error_proc (15, 2, "More HSLA's configured on FNP ^a than specified in hsla statement.", "FNP ^a",
		mpx_name, "");

	return;

MPXE_STATE:
     procedure (state) returns (char (32));

declare  state fixed bin;

	if state < lbound (MPXE_STATE_NAMES, 1) | state > hbound (MPXE_STATE_NAMES, 1)
	then return (ltrim (char (state)));
	else return (MPXE_STATE_NAMES (state));
     end MPXE_STATE;

%include cdt;

%include author_dcl;
%include as_mpx_state_names_;
%include line_types;

%include as_wakeup_priorities;
%include event_call_info;
/*  %include fnp_mpx_msg_;   */
%include sc_stat_;
%include sys_log_constants;
%include timer_manager_constants;
     end as_uncp_mpx_;
