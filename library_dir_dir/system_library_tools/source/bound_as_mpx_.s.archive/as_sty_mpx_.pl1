/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


as_sty_mpx_:
     procedure;

/* AS interface for Pseudo-Terminal Multiplexer */
/* Written By C. Hornig, July 1979 */

declare (
        (Cdtp, Cdtep, Cdt_listp) pointer,
        Mpx_name character (*),
        Mpx_error variable entry (fixed bin, fixed bin, character (*), character (*), character (*), character (*)),
        Check_sw bit aligned,
        Code fixed bin (35)
        ) parameter;

declare multiplexer_mgr_$mpx_loaded entry (character (*), fixed bin (35));

dcl addr builtin;

/* * * * * * * * * * STY_CV_CMF * * * * * * * * * */

pty_cv_cmf:
sty_cv_cmf:
     entry (Cdtp, Cdtep, Mpx_name, Cdt_listp, Mpx_error);

	return;

/* * * * * * * * * * STY_LOAD  * * * * * * * * * */

pty_load:
sty_load:
     entry (Mpx_name, Cdtp, Cdtep, Cdt_listp, Check_sw, Code);

	Code = 0;
	call multiplexer_mgr_$mpx_loaded (Mpx_name, Code);
	return;

/* * * * * * * * * * STY_DUMP * * * * * * * * * */

pty_dump:
sty_dump:
     entry (Mpx_name, Cdtp, Cdtep, Code);

	Code = 0;
	return;

/* * * * * * * * * * STY_DUMP_ * * * * * * * * * */

pty_dump_:
sty_dump_:
     entry (Ttybp, Areap, Dp, Sc, Brief);

declare (Ttybp, Areap, Dp) pointer parameter;
declare Sc fixed bin parameter;
declare Brief bit aligned parameter;

declare (
        ioa_,
        ioa_$nnl
        ) entry options (variable);
declare tty_dump$print_chain entry (ptr, char (*), fixed bin, bit (1));

declare 1 pd aligned based (pdp),
	2 lctep pointer,
	2 devx fixed bin,				/* my devx */
	2 nchan fixed bin,
	2 pdes (pd_nchan refer (pd.nchan)) like pde;

declare 1 pde aligned based (pdep),			/* for each STY channel */
	2 my,
	  3 lctep pointer,				/* pointer to LCT entry */
	  3 devx fixed bin,				/* this channel's devx */
	  3 sc fixed bin,
	2 her aligned like pde.my,			/* same stuff for spouse */
	2 flags unaligned,
	  3 listen bit,
	2 words unsigned fixed bin (18),
	2 (head, tail) unsigned fixed bin (18) unaligned;

dcl (pdp, pdep) pointer;

	pdp = Dp;
	if Sc > 0
	then call print_entry (Sc);
	else do;
	     call ioa_ ("STY MPX devx ^o, ^d channels.", pd.devx, pd.nchan);
	     end;
	call ioa_ ("");
	return;

print_entry:
     proc (Sc);
declare Sc fixed bin;

	pdep = addr (pd.pdes (Sc));
	call ioa_$nnl ("^/^d(^o) -> ^d(^o): ^d words^[ listening^].", pde.my.sc, pde.my.devx, pde.her.sc, pde.her.devx,
	     pde.words, pde.flags.listen);
	call tty_dump$print_chain (Ttybp, "", (pde.head), (Brief));
     end;
     end as_sty_mpx_;
