/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* quota manipulating commands

   set_quota, sq, requires a privileged entry to set a quota
   priv_move_quota, sets directory access isolation privileges before doing the move_quota function
   (actually by calling the priv_move_quota_ subroutine to do it)

   set_quota and priv_move_quota take pairs of arguments the first of which
   is the pathname (can be "-wd" or "-wdir") of the directory on which a quota
   is to be set, and the second of which specifies the value of the
   quota which is to be used.

   coded November 1969 MR Thompson
   to pl1 January 1970 JW Gintell
   modified May 1971  JW Gintell
   star convention added to get_quota Sept 1971  JW Gintell
   converted to version 2 Dec l972  JW Gintell
   priv_move_quota entry added 09/26/74  J. C. Whitmore
   */
set_quota: setquota: sq: proc;

dcl  pathname char (plen) based (pp),			/* command argument */
     dirname char (168) aligned,			/* returned by expand_path_ */
     ename char (32) aligned,				/*  " */
     quota char (qlen) based (qp),			/* command argument */
     qlen fixed bin (17),
     qvalue fixed bin (17),				/* value of quota */
     comname char (16) aligned,			/* name of command */
    (nargs, plen) fixed bin (17),
     code fixed bin (35),
     i fixed bin (17),
     entry_sw fixed bin,				/* 1 = sq, 2 = priv_mq */
     dir_sw bit (1) init ("0"b),			/* TRUE for dir quota */
     tup fixed bin (35),				/* date-time ptp updated */
    (tused, tquota) fixed bin (17) init (0),		/* total used and quota */
     prheadsw bit (1) aligned init ("1"b),		/* switch for printing heading */
     stars bit (1) aligned init (""b),			/* switch if stars found */
    (pp, qp, enp) ptr;
dcl  error_table_$badopt external fixed bin (35);
dcl  error_table_$badcall external fixed bin (35);

dcl  cu_$arg_count external entry (fixed bin (17)),
     cu_$arg_ptr external entry (fixed bin (17), ptr, fixed bin (17), fixed bin (35)),
     expand_path_ external entry (ptr, fixed bin (17), ptr, ptr, fixed bin (35)),
     ioa_ external entry options (variable),
     com_err_ external entry options (variable),

     hphcs_$quota_set external entry (char (*) aligned, fixed bin, fixed bin (35)),
     hphcs_$dir_quota_set external entry (char (*) aligned, fixed bin, fixed bin (35)),
     priv_move_quota_ entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (35)),
     priv_move_quota_$dir entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (35)),
     cv_dec_check_ external entry (char (*), fixed bin (35)) returns (fixed bin (17));
dcl (null, addr, substr) builtin;
dcl  linkage_error condition;



/*  */

SET:
	entry_sw = 1;
	enp = null;				/* expand_path_ will retn single string */
	comname = "set_quota";
	on condition (linkage_error) begin;		/* catch call to priv. entry  */
	     code = error_table_$badcall;
	     goto ERROR;				/* non local goto */
	end;
	go to COMMON;

set_dir_quota: entry;

	dir_sw = "1"b;
	go to SET;


priv_move_dir_quota: entry;

	dir_sw = "1"b;

priv_move_quota: entry;

	entry_sw = 2;
	enp = addr (ename);
	comname = "priv_move_quota";



COMMON:
	call cu_$arg_count (nargs);
	if nargs < 2 then do;
	     call ioa_ ("^a: not enough arguments", comname);
	     return;
	end;

	do i = 1 to nargs by 2;			/* arguments come in pairs */
	     call cu_$arg_ptr (i, pp, plen, code);	/* the first is a pathname */
	     if code ^= 0 then go to ERROR;
	     if substr (pathname, 1, 1) = "-" then do;
		if pathname = "-wd" | pathname = "-wdir" then plen = 0; /* expand path will then work */
		else do;
		     call com_err_ (error_table_$badopt, comname, pathname);
		     return;
		end;
	     end;

	     call cu_$arg_ptr (i+1, qp, qlen, code);	/* the second is a quota value */
	     if code ^= 0 then go to ERROR;
	     if qlen = 0 then go to ERROR;
	     qvalue = cv_dec_check_ (quota, code);	/* which must converted */
	     if code ^= 0 then go to NUMERR;		/* it must be decimal */

	     call expand_path_ (pp, plen, addr (dirname), enp, code);
	     if code ^= 0 then go to ERROR;
	     if entry_sw = 1 then do;			/* set_quota entry */
		if dir_sw then call hphcs_$dir_quota_set (dirname, qvalue, code);
		else call hphcs_$quota_set (dirname, qvalue, code);
	     end;
	     else do;				/* priv_move_quota entry */
		if dir_sw then call priv_move_quota_$dir (dirname, ename, qvalue, code);
		else call priv_move_quota_ (dirname, ename, qvalue, code);

	     end;
	     if code ^= 0 then go to ERROR;
ENDARG:	end;

RETURN:	return;

ERROR:
	if code = error_table_$badcall then
mess:	     call com_err_ ((0), "set_quota", "This command requires privileged access not given to this user.");
	else
	call com_err_ (code, comname, pathname);
	go to ENDARG;

NUMERR:	call com_err_ ((0), comname, "Numerical value for quota must be given - ^a", quota);
	go to ENDARG;

     end set_quota;
