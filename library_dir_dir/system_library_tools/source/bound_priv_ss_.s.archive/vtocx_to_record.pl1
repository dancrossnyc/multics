/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(1986-01-16,Fawcett), approve(1986-04-10,MCR7383),
     audit(1986-05-15,Martinson), install(1986-07-18,MR12.0-1098):
     Add support for 512_WORD_IO devices.
  2) change(2018-01-17,Swenson), approve(2018-01-17,MCR10047),
     audit(2018-01-17,GDixon), install(2018-01-17,MR12.6g-0005):
     Fix to display correct values for 3380 and 3381 devices.
                                                   END HISTORY COMMENTS */



vtocx_to_record: proc;

dcl (ioa_, ioa_$rsnnl, com_err_, active_fnc_err_) entry options (variable);
dcl (record, sector) fixed bin;
dcl  abssec fixed bin;
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  getter entry (fixed bin, ptr, fixed bin, fixed bin (35)) variable;
dcl  gripe variable entry options (variable);
dcl  code fixed bin (35);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  myname char (32);
dcl  arg char (arglen) based (argptr);
dcl  argptr ptr, arglen fixed bin;

dcl  vtocx fixed bin;
dcl  dvt fixed bin;
dcl  targ char (8);
dcl  nargs fixed bin;
dcl  error_table_$not_act_fnc fixed bin (35) ext;
dcl  ap1 ptr, al1 fixed bin;
dcl  answer char (al1) varying based (ap1);
dcl  nafsw bit (1) init ("0"b);

dcl (usable, unusable) fixed bin;

dcl (divide, hbound, mod) builtin;
	       

mulphy:	proc (rec) returns (fixed bin);
dcl (sect, rec) fixed bin;
	     sect = rec * sect_per_rec(dvt);
	     sect = sect + divide (sect, usable, 17, 0) * unusable;
	     return (sect);
	end mulphy;

phymul:	proc (sect) returns (fixed bin);
dcl (r, sect) fixed bin;
	     r = divide (sect, sect_per_cyl (dvt), 17, 0) * unusable;
	     return (divide (sect - r, sect_per_rec(dvt), 17, 0));
	end phymul;



	myname = "vtocx_to_record";
gtarg:
	call cu_$af_return_arg (nargs, ap1, al1, code);
	if code ^= 0 then
	     if code = error_table_$not_act_fnc then do;
		nafsw = "1"b;
		gripe = com_err_;
		getter = cu_$arg_ptr;
	     end;
	     else do;
		call active_fnc_err_ (code, myname, "");
		return;
	     end;
	else do;
	     gripe = active_fnc_err_;
	     getter = cu_$af_arg_ptr;
	end;
	call getter (2, argptr, arglen, code);
	if code = 0 then targ = arg; else targ = "d451";
	if targ = "m400" then targ = "d400";		/* For MR7.0 only */
	else if targ = "m451" then targ = "d451" ;	/* For MR7.0 only */
	do dvt = 1 to hbound (device_names, 1);
	     if targ = device_names (dvt) then go to gotdvt;
	end;
	call gripe (0, myname, "unknown device_type ""^a"". Legal types are ^(^a ^)", targ, device_names);
	return;
gotdvt:
	usable = divide (sect_per_cyl (dvt), sect_per_rec (dvt), 17, 0) * sect_per_rec (dvt);
	unusable = sect_per_cyl (dvt) - usable;
	call getter (1, argptr, arglen, code);
	if code ^= 0 then do;
	     call gripe (code, myname);
	     return;
	end;

	vtocx = cv_oct_check_ (arg, code);
	if code ^= 0 then do;
	     call gripe (0, myname, "Invalid octal: ^a", arg);
	     return;
	end;

	if myname = "vtocx_to_record" then do;
	     record = VTOC_ORIGIN + divide (vtocx, vtoc_per_rec (dvt), 17, 0);
	     sector = mod (vtocx, vtoc_per_rec (dvt)) * sect_per_vtoc (dvt);
	     if record > rec_per_dev (dvt) then go to toobig;
	end;
	else if myname = "record_to_sector" then do;
	     sector = 0;
	     record = vtocx;
	     if record > rec_per_dev (dvt) then do;
toobig:		call gripe (0, myname, "Address too big: ^o", vtocx);
		return;
	     end;
	end;

	if myname = "sector_to_record" then do;
	     abssec = vtocx;
	     if abssec > sect_per_cyl (dvt) * cyl_per_dev (dvt) then go to toobig;
	     record = phymul (abssec);
	     sector = abssec - mulphy (record);
	end;
	else abssec = sector + mulphy (record);
	if nafsw then do;
	     if myname = "vtocx_to_record"
	     then call ioa_ ("^-vtocx ^o = Rec ^o, rs ^o; abs sect ^o (^a)", vtocx, record, sector, abssec, device_names (dvt));
	     else call ioa_ ("^-Rec ^o, rs ^o = abs sect ^o (^a)", record, sector, abssec, device_names (dvt));
	     return;
	end;

	if myname = "vtocx_to_record" | myname = "sector_to_record"
	then call ioa_$rsnnl ("^o", answer, (0), record);
	else call ioa_$rsnnl ("^o", answer, (0), abssec);


	return;

record_to_sector: entry;
	myname = "record_to_sector";
	go to gtarg;
sector_to_record: entry;
	myname = "sector_to_record";
	go to gtarg;
%include disk_pack;
%include	fs_dev_types;
     end;
