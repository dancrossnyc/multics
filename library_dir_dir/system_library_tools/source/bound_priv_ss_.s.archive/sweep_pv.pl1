/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

sweep_pv: proc;

	go to spv;


/* sweep_pv by Bernard Greenberg  6/12/76 
   adopter by BSG, 8/2/77 
   Modified March 1982, J. Bongiovanni, to remove optimizer (ring-0 does it now),
	  to fix some bugs, and generally clean up the code
*/


/****^  HISTORY COMMENTS:
  1) change(87-11-12,Farley), approve(88-03-01,MCR7816),
     audit(88-03-03,Fawcett), install(88-03-08,MR12.2-1033):
     Added use of hphcs_$clear_vtoce when the error code from cv_uid_path
     is error_table_$bad_uidpath or the filemap in the vtoce is thought to
     be bad, instead of hphcs_$delete_vtoce, when using the -delete option.
     This indicates that the VTOCE is in error and attempting to possibly
     free the vtoce.fm pages could cause much more damage. (phx20964)
     
     Corrected code so that "dir" privilege is not removed from the user's
     process after this program executes. (phx17077).
     
     Generally cleaned up the code.
                                                   END HISTORY COMMENTS */


/*  Automatic  */

dcl 1 acla (1) aligned,
    2 userid char (32),
    2 modes bit (36),
    2 aclaec fixed bin (35);
dcl  adopting bit (1);
dcl  areap ptr;
dcl  argl fixed bin;
dcl  argp ptr;
dcl  chainptrs (0:15) ptr;
dcl  checksum bit (36) aligned;
dcl  code fixed bin (35);
dcl  code1 fixed bin (35);
dcl  damaged_ct fixed bin;
dcl  dbsw bit (1);
dcl  del_this bit (1);
dcl  deleted bit (1);
dcl  dir char (168);
dcl  dl_mode bit (1);
dcl  dswitch ptr;
dcl  dts4 char (4) defined dtstart pos (11);
dcl  dtstart char (24);
dcl  ent char (32);
dcl  eswitch ptr;
dcl  excuse char (10);
dcl  force bit (1);
dcl  fromsw bit (1);
dcl  fv fixed bin;
dcl  gc_comment char (20);
dcl  gcsw bit (1);
dcl  i fixed bin;
dcl  inhibit_on bit (1);
dcl  lastv fixed bin;
dcl  listopt bit (1);
dcl  llines fixed bin;
dcl 1 local_vtoce like vtoce aligned;
dcl  lswitch ptr;
dcl  myname char (32);
dcl  namealloclen fixed bin;
dcl  n_args fixed bin;
dcl  onlysw bit (1);
dcl  pageno fixed bin;
dcl  pn char (168);
dcl  pvid bit (36) aligned;
dcl  pvname char (32);
dcl  pvtx fixed bin;
dcl  recsgotten fixed bin;
dcl  rstate fixed bin;
dcl  set_priv bit (1);
dcl  started bit (1);
dcl  tosw bit (1);
dcl  tptr ptr;
dcl  vacating bit (1);
dcl  vsgotten fixed bin;
dcl  vsrecovered fixed bin;
dcl  vtocx fixed bin;

/*  Based  */

dcl  arg char (argl) based (argp);
dcl  allocarea area based (areap);
dcl 1 restore_name based aligned,
    2 fp ptr unal,
    2 namelen fixed bin (8) unal,
    2 name char (namealloclen refer (restore_name.namelen)) unal;

/*  Constants  */

dcl  EF_open fixed bin internal static options (constant) init (6);
dcl  GC_open fixed bin internal static options (constant) init (4);
dcl  LS_open fixed bin internal static options (constant) init (2);

/*  External  */

dcl  error_table_$action_not_performed fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$bad_uidpath fixed bin (35) external;
dcl  error_table_$inconsistent fixed bin (35) external;
dcl  error_table_$incorrect_access fixed bin (35) external;
dcl  error_table_$invalid_vtocx fixed bin (35) external;
dcl  error_table_$no_dir fixed bin (35) external;
dcl  error_table_$noentry fixed bin (35) external;
dcl  error_table_$not_privileged fixed bin (35) external;
dcl  error_table_$root fixed bin (35) external;

/*  Entry  */

dcl  adopt_seg_ entry (char (*), char (*), bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_count entry (fixed bin, fixed bin(35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  date_time_ entry (fixed bin (52), char (*));
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl  date_time_$fstime entry (bit (36) aligned, char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  filemap_checksum_ entry (ptr, fixed bin, bit (36) aligned);
dcl  get_group_id_ entry returns (char (32) aligned);
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hphcs_$clear_vtoce entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  hphcs_$delete_vtoce entry (bit (36), bit (36) aligned, fixed bin, fixed bin (35));
dcl  hphcs_$pv_move_file entry (char (*), char (*), fixed bin (35));
dcl  hphcs_$stop_vacate_pv entry (fixed bin, bit (36) aligned, fixed bin (35));
dcl  hphcs_$vacate_pv entry (fixed bin, bit (36) aligned, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$user_output ptr external;
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  pvname_to_pvtx_ entry (char(*), fixed bin, bit(36) aligned, fixed bin(35));
dcl  system_privilege_$dir_priv_off entry (fixed bin (35));
dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36), fixed bin (35));

/*  Builtin  */

dcl  addr builtin;
dcl  clock builtin;
dcl  dim builtin;
dcl  fixed builtin;
dcl  hbound builtin;
dcl  lbound builtin;
dcl  length builtin;
dcl  mod builtin;
dcl  null builtin;
dcl  reverse builtin;
dcl  rtrim builtin;
dcl  substr builtin;
dcl  verify builtin;

/*  Condition  */

dcl  cleanup condition;
dcl  linkage_error condition;


/*  */
inhibit_pv: entry;

          myname = "inhibit_pv";
	inhibit_on = "1"b;
	
	call cu_$arg_count (n_args, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname);
	     return;
	end;
	
	if n_args = 0 | n_args > 2 then do;
	     call ioa_ ("^a: Usage is:     ^a pvname {-off}", myname, myname);
	     return;
	end;
	
	call cu_$arg_ptr (1, argp, argl, code);
	pvname = arg;
	call pvname_to_pvtx_ (pvname, pvtx, pvid, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, pvname);
	     return;
	end;
	
	if n_args >= 2 then do;
	     call cu_$arg_ptr (2, argp, argl, code);
	     if arg = "-off" then inhibit_on = "0"b;
	     else do;
		call com_err_ (error_table_$badopt, myname, arg);
		return;
	     end;
	end;
	
	on linkage_error goto NOT_PRIVILEGED;

	if inhibit_on
	     then call hphcs_$vacate_pv (pvtx, pvid, code);
	else call hphcs_$stop_vacate_pv (pvtx, pvid, code);
	
	revert linkage_error;

	if code ^= 0 then do;
	     call com_err_ (code, myname, "Attempting to ^[^;un-^]inhibit ^a",
		(inhibit_on), pvname);
	     return;
	end;

	return;


/*  */
spv:

	myname = "sweep_pv";
	adopting, dbsw, dl_mode, force, fromsw, gcsw, listopt, onlysw, set_priv,
	     started, tosw, vacating = "0"b;
	damaged_ct, fv, llines, recsgotten, rstate, vsgotten, vsrecovered = 0;
	lastv = MAX_VTOCE_PER_PACK;
	pageno = 1;
	dswitch, eswitch, lswitch = null ();

	call cu_$arg_count (n_args, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname);
	     return;
	end;
	
	if n_args = 0 then do;
	     call ioa_ ("^a: Usage is:  ^a pvname {-collect|-gc} {-list|-ls} {-adopt}
		{-from vtocx} {-to vtocx} {-only vtocx} {-force|-fc}
		{-move|-mv} {-delete|-dl}", myname, myname);
	     return;
	end;
	
	call cu_$arg_ptr (1, argp, argl, code);
	pvname = arg;
	call pvname_to_pvtx_ (pvname, pvtx, pvid, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, pvname);
	     return;
	end;
	
%page;
/*  Collect Arguments and Validate Same  */

          do i = 2 to n_args;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if arg = "-gc" | arg = "-collect" then gcsw = "1"b;
	     else if arg = "-ls" | arg = "-list" then listopt = "1"b;
	     else if arg = "-move" | arg = "-mv" then vacating = "1"b;
	     else if arg = "-adopt" then adopting = "1"b;
	     else if arg = "-delete" | arg = "-dl" then dl_mode = "1"b;
	     else if arg = "-debug" | arg = "-db" then dbsw = "1"b;
	     else if arg = "-from" then fv = numarg (fromsw);
	     else if arg = "-to" then lastv = numarg (tosw);
	     else if arg = "-only" then lastv, fv = numarg (onlysw);
	     else if arg = "-force" | arg = "-fc" then force = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, myname, arg);
		return;
	     end;

	end;

	call checkincon (dl_mode & ^gcsw, "-delete requires -gc.");
	call checkincon (adopting & ^gcsw, "-adopt requires -gc.");
	call checkincon ((fromsw | tosw) & onlysw, "-only is inconsistent with -from/-to.");
	call checkincon (fromsw & tosw & lastv < fv, "Last vtoce # is less than first.");
	call checkincon (^dbsw & ^ vacating & ^ listopt & ^ gcsw, "No action specified.");

	if vacating then do;
	     on linkage_error goto NOT_PRIVILEGED;
	     call hphcs_$vacate_pv (pvtx, pvid, code);
	     revert linkage_error;
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Attempting to inhibit ^a", pvname);
		return;
	     end;
	     call ioa_ ("^a: Volume ^a inhibited", myname, pvname);
	end;
	

	on cleanup call finish;

	if force then do;
	     areap = get_system_free_area_ ();
	     chainptrs (*) = null ();
	     acla (1).userid = get_group_id_ ();	/* Get acl info for forcing */
	     acla (1).modes = SMA_ACCESS;

	     on linkage_error begin;
		call com_err_ (0, myname, "Unable to set AIM privilege. Access may be incomplete.");
		go to revert_handler;
	     end;
	     call system_privilege_$dir_priv_on (code);	/* Try to give AIM authority */
	     set_priv = (code = 0);			/* If given, remember to take away later */
revert_handler:
	     revert linkage_error;

	end;



	call date_time_ (clock (), dtstart);

	if listopt then call attach (lswitch, "pvlist", "Listing");
	else rstate = LS_open;			/* update so finish will work properly */

	if gcsw then do;
	     call attach (dswitch, "pvgc", "Disconnection");
	     call ioa_$ioa_switch (dswitch, "PV COLLECTION  -- Vol ^a  ^o to ^o   ^a^3/", pvname, fv, lastv, dtstart);
	end;
	else rstate = GC_open;			/* update so finish will work properly */


	if adopting then gc_comment = "Recovering";
	else if dl_mode then gc_comment = "Deleting";
	else gc_comment = "Unconnected";


/*          SCAN THE VTOC

   This loop walks the selected region of the VTOC, performing the following operations for
   all non-free vtoces:
   1. Develop the pathname, forcing all access as necessary. (See s/r cv_uid_path).
   2. If reverse connection failure, and gc-mode, report and possibly delete it.
   3. If adopting, attempt to construct a branch for the segment or direcory.
   4. If moving segments, call hphcs to move the segment via the segment mover.
   5. If listing, produce a report line.
   6. Write all errors to the error file.


*/

	started = "1"b;
	vtocep = addr (local_vtoce);

	do vtocx = fv to lastv by 1;
	     call phcs_$get_vtoce (pvtx, vtocx, vtocep, code);
	     if code ^= 0 then do;
		vtoce.uid = "0"b;			/* for next thing */

		if code = error_table_$invalid_vtocx then go to fin;
		call ckef;
		call ioa_$ioa_switch (eswitch, "^8o^3x^6a^3x^a", vtocx, time (), einterp (code));
	     end;

	     if vtoce.uid ^= "0"b then do;
		deleted = "0"b;
		call cv_uid_path (addr (vtoce.uid_path), pn, vtoce.uid, code);
		if code ^= 0 then do;

/* The following code deals with the case of reverse connection failure. */

		     if code = error_table_$noentry | code = error_table_$no_dir then do;
			if code = error_table_$noentry then excuse = "No Entry."; else excuse = "No Dir.";
			if ^gcsw then go to a;
			call ioa_$ioa_switch (dswitch, "^8o^3x^6a^3x^10a^3x^a Vtoce: ^a",
			     vtocx, time (), excuse, gc_comment, pn);
			call ioa_$ioa_switch (dswitch, "^33x= ""^a"", modified ^a, used ^a",
			     vtoce.primary_name, dtc (vtoce.dtm), dtc (vtoce.dtu));
			if adopting then do;
			     if code = error_table_$no_dir then do;
				call ioa_$ioa_switch (dswitch,
				     "^33xWill not reconnect: superior directory missing.");
				if dl_mode then call ioa_$ioa_switch (dswitch,
				     "^33xWill attempt to delete ^a", pn);
				del_this = "1"b;
			     end;
			     else do;		/* Entry missing- try reconnect */
				call expand_pathname_ (pn, dir, (32)" ", (0));
				ent = gen_uname (vtoce.primary_name);
				call adopt_seg_ (dir, ent, pvid, pvtx, vtocx, code1);
				if dir = ">" then dir = "";
				pn = rtrim (dir) || ">" || ent;
				if code1 = 0 then do;
				     vsrecovered = vsrecovered + 1;
				     call ioa_$ioa_switch (dswitch,
					"^33xAdopted ^o as ^a.", vtocx, pn);
				end;
				else do;
				     call ckef;
				     do tptr = eswitch, dswitch;
					call ioa_$ioa_switch (tptr, "^8o^3x^6a^3xError Reconnecting vtoce: ^a ^a.",
					     vtocx, time (), einterp (code1), pn);
				     end;
				end;
				del_this = "0"b;
			     end;
			end;
			else del_this = "1"b;
			deleted = "1"b;
			if dl_mode & del_this then do;
			     if ^vtoce.fm_damaged & vtoce.fm_checksum_valid then do;
				call filemap_checksum_ (addr (vtoce.fm), fixed (vtoce.csl), checksum);
				if vtoce.fm_checksum ^= checksum then vtoce.fm_damaged = "1"b;
			     end;
			     if code = error_table_$bad_uidpath | vtoce.fm_damaged
			     then call hphcs_$clear_vtoce (pvid, vtocx, code1);
			     else call hphcs_$delete_vtoce (vtoce.uid, pvid, vtocx, code1);
			     if code1 ^= 0 then do;
				call ckef;
				do tptr = eswitch, dswitch;
				     call ioa_$ioa_switch (tptr,
					"^8o^3x^6a^3xError Deleting vtoce: ^a ^a",
					vtocx, time (), einterp (code1), pn);
				end;
			     end;
			end;
			else code1 = 0;
			if code1 = 0 then do;
			     vsgotten = vsgotten + 1;
			     recsgotten = recsgotten + fixed (vtoce.records, 9);
			end;
		     end;
		     else do;
a:			call ckef;
			call ioa_$ioa_switch (eswitch, "^8o^3x^6a^3x^a^x^a",
			     vtocx, time (), einterp (code), pn);
		     end;
		end;

/* Check the VTOCE for consistency */

		call validate_vtoce;

/* See if damaged, report it if so. */

		if vtoce.damaged then do;
		     if listopt then do;
			call cktop;
			llines = llines + 1;
		     end;
		     call ckef;
		     do tptr = eswitch, lswitch;
			if tptr ^= null then call ioa_$ioa_switch (tptr, "^8o^3x^6a^3x^a^x^a",
			     vtocx, time (), "This segment is damaged:", pn);
		     end;
		     damaged_ct = damaged_ct + 1;
		end;

/* If vacating, develop pathname and call hphcs. */

		if vacating then do;
		     if code ^= 0 then;
		     else do;
			call expand_pathname_ (pn, dir, ent, code1);
			if dbsw then code1 = 0;
			else call hphcs_$pv_move_file (dir, ent, code1);
			if code1 ^= 0 then do;
			     call ckef;
			     call ioa_$ioa_switch (eswitch, "^8o^3x^6a^3xError Moving Segment: ^a ^a",
				vtocx, time (), einterp (code1), pn);
			end;
		     end;
		end;

/* If listing, produce report line. */

		if listopt then do;
		     call cktop;
		     call ioa_$ioa_switch (lswitch, "^8o^x^[*^;^x^]^x^[^7d^;^s^7x^]^x^a^[ (^a)^]",
			vtocx, deleted, ^vtoce.dirsw, seg_vtoce.usage, pn, deleted, excuse);
		     llines = llines + 1;
		end;
	     end;
	end;

	vtocx = vtocx -1;


fin:
nlexit:
	call finish;
	return;


NOT_PRIVILEGED:
	call com_err_ (error_table_$not_privileged, myname, "hphcs_");
	return;
	

%page;


attach:	proc (tptr, head, name);

/* Make all output file attachments, incrementing rstate as we go, so that
   partially complete attachments can be cleaned up. */


dcl  atdesc char (57);
dcl  codea fixed bin (35);
dcl  tptr ptr;
dcl (head, name) char (*);

	     call ioa_$rsnnl ("vfile_ ^a.^a.^a", atdesc, 0, head, pvname, dts4);

	     call iox_$attach_ioname ("switch." || head, tptr, atdesc, codea);
	     if codea ^= 0 then do;
		call com_err_ (codea, myname, "Attaching ^a file.", head);
		go to fin;
	     end;
	     rstate = rstate + 1;

	     call iox_$open (tptr, Stream_output, "0"b, codea);
	     if codea ^= 0 then do;
		call com_err_ (codea, myname, "Opening ^a file", head);
		go to fin;
	     end;
	     rstate = rstate + 1;
	     call ioa_ ("^a: ^a file attached to ^a", myname, name, substr (atdesc, 7));
	     return;
	end;

/*  */
/* UNIQUE-NAME-FOR-ADOPT GENERATOR */

gen_uname: proc (aname) returns (char (32));

dcl  aname char (32);
dcl  uname char (15);

	     uname = unique_chars_ (""b);		/* Get a truly unique name */
	     if length (rtrim (aname)) > 15 & substr (aname, 1, 3) = "!BB"
	     then return (uname || substr (aname, 16));
	     else return (uname || rtrim (aname));

	end gen_uname;


cktop:	proc;

/* check page overflow counter */

	     if mod (llines, 54) = 0 then do;
		call ioa_$ioa_switch (lswitch, "^|PV LISTING^10xVolume ^a  ^a^3xfrom ^o to ^o^6xPage ^d",
		     pvname, dtstart, fv, lastv, pageno);
		call ioa_$ioa_switch (lswitch, "VTOC INDEX^3xUSAGE^5xPATHNAME");
		pageno = pageno + 1;
		call ioa_$ioa_switch (lswitch, "^2/");
		llines = llines + 4;
	     end;

	end cktop;

/*  */
/* VTOCE CONSISTENCY CHECK */

validate_vtoce:
     proc;

dcl  csl fixed bin;					/* working current length */
dcl  error_mess char (200);				/* Formatted message */
dcl  error_mess_len fixed bin (21);			/* Length of formatted message */
dcl  fmx fixed bin;					/* file map index */
dcl  msl fixed bin;					/* working max length */
dcl  records fixed bin;				/* working number records */




     csl, records = 0;
     msl = 256;
     do fmx = 0 to msl - 1;
	if substr (vtoce.fm (fmx), 1, 1) ^= "1"b then do; /* non-null  address			*/
	     records = records + 1;
	     csl = fmx + 1;
	end;
     end;

     if fixed (vtoce.records, 9) ^= records
	then do;
	call ioa_$rsnnl ("^8o^3x^6a^3xrecords used=^o(should be ^o):^a",
	     error_mess, error_mess_len, vtocx, time (), fixed (vtoce.records), records, pn);
	call report_error (error_mess);
     end;

     if fixed (vtoce.csl, 9) ^= csl
	then do;
	call ioa_$rsnnl ("^8o^3x^6a^3xcur length=^o(should be ^o):^a",
	     error_mess, error_mess_len, vtocx, time (), fixed (vtoce.csl), csl, pn);
	call report_error (error_mess);
     end;
     

     if fixed (vtoce.msl, 9) > msl | fixed (vtoce.msl, 9) < csl
	then do;
	call ioa_$rsnnl ("^8o^3x^6a^3xmax len=^o:^a", error_mess, error_mess_len,
	     vtocx, time (), fixed (vtoce.msl), pn);
	call report_error (error_mess);
     end;
     


     return;

report_error:
     proc (message);
     
     dcl  message char (*);
     

     if listopt then do;
	call cktop;
	llines = llines + 1;
     end;
     call ckef;
     do tptr = eswitch, lswitch;
	if tptr ^= null ()
	     then call ioa_$ioa_switch (tptr, "^a", message);
     end;
     
end report_error;


     end validate_vtoce;
     


/* 	*/
/* UTILITY CONVERSION ROUTINES */


time: proc () returns (char (6));

/* Return a printable time. */

	     return ((date_time_$format ("^Hd^99v.9MH", clock (), "", "")));
	end time;

einterp:	proc (cd) returns (char (100));

/* Provide printable error messages from error codes. It should be observed
   that vpn_cv_uid_path_ (external) returns error_table_$action_not_performed if
   he loses races with directory control after a sufficient number of
   retries. cvuid_rcurse (below) also returns this if he loses a race with a
   malicious name-changer. */

dcl  ignore char (8) aligned, long char (100) aligned, cd fixed bin (35);
	     if code = error_table_$action_not_performed
	     then return ("Unable to get consistent copy of directories/pathnames.");
	     call convert_status_code_ (cd, ignore, long);
	     return (long);
	end;

ckef:	proc;

/* Attach error file if not already attached. */

	     if rstate < EF_open then do;
		call attach (eswitch, "pvef", "Error");
		call ioa_$ioa_switch (eswitch, "PV SWEEP ERROR FILE    Volume ^a    ^a^2/", pvname, dtstart);
	     end;
	end;

dtc:	proc (fs_time) returns (char (24));
dcl  fs_time bit (36);
dcl  date char (24);

	     call date_time_$fstime ((fs_time), date);
	     return (date);
	end;

/*  */

/* PROCEDURES USED IN ARGUMENT COLLECTION/VALIDATION */

numarg:	proc (flag) returns (fixed bin);		/* Proc to pick up one more numeric arg */
						/* THIS MUST BE PL/I QUICK BLOCK */
						/* AS cu_argptr is used */

dcl  key char (10) init (arg);			/* Save old thing */
dcl  stuff fixed bin;
dcl  flag bit (1);

	     i = i + 1;				/* Step over key */
	     call cu_$arg_ptr (i, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Octal # expected after ^a.", key);
		go to nlexit;
	     end;

	     stuff = cv_oct_check_ (arg, code);
	     if code ^= 0 then do;
		call com_err_ (0, myname, "Bad octal arg for ^a: ^a", key, arg);
		go to nlexit;
	     end;
	     flag = "1"b;
	     return (stuff);
	end;


checkincon: proc (truth, message);

dcl  truth bit (1), message char (*);

	     if truth then do;
		call com_err_ (error_table_$inconsistent, myname, message);
		go to nlexit;
	     end;
	end checkincon;
						/*  */

/* GENERAL CLEANUP/TERMINATION PROCEDURE */


finish:	proc;
	     if started then do;
						/* Clean up large stuff iff started. */
		call ioa_ ("Processed to vtocx ^o.", vtocx);
		if set_priv then call system_privilege_$dir_priv_off ((0));
		if force then call restore_all_access;
	     end;
	     go to rrecover (rstate);
						/* Undo whatever was done */
rrecover (6):					/* EF_open */
	     if damaged_ct > 0 then do tptr = eswitch, lswitch, iox_$user_output;
		if tptr ^= null then call ioa_$ioa_switch (tptr, "^/Found ^d damaged segment^[s^].", damaged_ct, (damaged_ct > 1));
	     end;
	     call iox_$close (eswitch, (0));
rrecover (5):
	     call iox_$detach_iocb (eswitch, (0));
rrecover (4):					/* GC_open, maybe */
	     if gcsw then call ioa_$ioa_switch (dswitch, "^/^d Vtoces collected, ^d records", vsgotten, recsgotten);
	     if adopting then call ioa_$ioa_switch (dswitch, "^d Vtoces reconnected.", vsrecovered);
	     if gcsw then call iox_$close (dswitch, (0));
rrecover (3):
	     if gcsw then call iox_$detach_iocb (dswitch, (0));
rrecover (2):					/* LS_open, maybe */
	     if listopt then call ioa_$ioa_switch (lswitch, "^/Processed to VTOCX ^o", vtocx);
	     if listopt then call iox_$close (lswitch, (0));
rrecover (1):
	     if listopt then call iox_$detach_iocb (lswitch, (0));
rrecover (0):
	     return;
	end finish;

/* PROCEDURES TO COMPUTE NAME, POTENTIALLY FORCING ACCESS */

cv_uid_path: procedure (a_uidpp, a_pn, a_uid, a_code);

dcl  a_uidpp ptr, a_pn char (*), a_uid bit (36), a_code fixed bin (35) aligned;

dcl  lev fixed bin;
dcl  uidpth (0:15) based (a_uidpp) bit (36) aligned;

	     do lev = 0 to 15 while (uidpth (lev) ^= "0"b);
	     end;

	     if lev = 15 then if uidpth (15) ^= "0"b then lev = 16;

	     call cvuid_recurse (a_uidpp, a_pn, a_uid, lev, a_code); /* Do the dirty deed */
	     return;


cvuid_recurse: procedure (a_uidp, a_pn, a_uid, a_lev, a_code);

dcl  a_uidp ptr, a_uid bit (36), a_pn char (*), a_lev fixed bin, a_code fixed bin (35);
dcl  lpn char (168), luid bit (36), lev fixed bin;
dcl  locuidpth (0:15) bit (36) aligned;
dcl  uidpth (0:15) bit (36) aligned based (a_uidp), pc1 fixed bin;

/* Call this procedure to get pathname for (a_uidp->uidpth)>(a_uid) or reason why not.
   a_lev is 1 greater than last valid component # in a_uidp -> uidpth.

   Strategy is to call vpn_cv_uid_path_...
   And if that fails, try to identify parent and try again...
   And if that fails, give status access to parent and try again...
   And if that fails, you lost a race, return action_not_perf. */


		do pc1 = 1 to 3;			/* Prog ctr thru steps */
		     call vpn_cv_uid_path_$ent (a_uidp, a_pn, a_uid, a_code); /* Try it */
		     if a_code = 0 then return;	/* If it won, that's it. */
		     if a_code ^= error_table_$incorrect_access then return; /* If not access, we can't help */
		     if pc1 = 1 then do;		/* First desperation */
			lev = a_lev - 1;		/* Get lower lev */
			if ^force then return;	/* Not even supposed to try. */
			luid = uidpth (lev);
			locuidpth = uidpth;
			locuidpth (lev) = "0"b;	/* Get name of father */
			call cvuid_recurse (addr (locuidpth), lpn, luid, lev, a_code);
			if a_code ^= 0 then return;	/* If he can't hack it, give up */
		     end;				/* We may now have enough to complete */
		     else if pc1 = 2 then do;		/* Must give access on father */
			call giver_of_access ("100"b, lpn, lev, a_code);
			if a_code ^= 0 then return;	/* He tried his best */
		     end;				/* Try with new access */
		end;
		a_code = error_table_$action_not_performed; /* Raced pathnames */
	     end cvuid_recurse;

giver_of_access: procedure (abits, ac_pn, ac_lev, aa_code);

/* Gives abits-access to ac_pn directory, or why not */

dcl  abits bit (3), ac_pn char (*), aa_code fixed bin (35);
dcl  ac_lev fixed bin;
dcl  dir char (168), ent char (32);
dcl  pc2 fixed bin;

/* Strategy is to try to add acle. If that fails,
   give sma to father. If that fails, reflect failure. */

		call expand_pathname_ (ac_pn, dir, ent, (0)); /* Computers don't make mistakes */

		do pc2 = 1 to 2;			/* Count desperations */
		     acla.modes (1) = abits;		/* Reinit for clobberance */
		     call hcs_$add_dir_acl_entries (dir, ent, addr (acla), dim (acla, 1), aa_code);
		     if aa_code = 0 then do;
			call register_pn (ac_pn, ac_lev); /* Remember for undo */
			return;
		     end;
		     if aa_code = error_table_$root then do;
			aa_code = error_table_$incorrect_access;
			return;			/* => ultimately no access */
		     end;
		     if aa_code ^= error_table_$incorrect_access then return;
		     if pc2 = 1 then do;		/* First desperate */
			call giver_of_access ("111"b, dir, ac_lev - 1, aa_code); /* Access to father */
			if aa_code ^= 0 then return;	/* Nogo */
		     end;
		end;
						/* If we're here, we're blocked */
		return;

register_pn:	proc (b_pn, b_lev);

/* Add b_pn to a list of pathnames at level b_lev, so that restore_all_access (below)
   can hand it back reversely by level. */



dcl  b_pn char (*), b_lev fixed bin;
dcl  namp ptr;
		     do namp = chainptrs (b_lev) repeat namp -> restore_name.fp while (namp ^= null ());
		     end;
		     if namp = null then do;		/* Put in table anew */
			namealloclen = length (b_pn) + 1 - verify (reverse (b_pn), " ");
			allocate restore_name in (allocarea) set (namp);
			namp -> restore_name.namelen = namealloclen;
			namp -> restore_name.fp = chainptrs (b_lev);
			namp -> restore_name.name = b_pn;
			chainptrs (b_lev) = namp;
		     end;				/* Can refind if was s, now sma */
		end register_pn;
	     end giver_of_access;
	end cv_uid_path;


/*  */

/* CLEANUP PROC FOR NAME COMPUTER */

restore_all_access: procedure;			/* Invoked to give back what has been taken */

dcl  lev fixed bin;
dcl  rdir char (168), rent char (32);
dcl (namp, pman) ptr;

	     do lev = hbound (chainptrs, 1) to lbound (chainptrs, 1) by -1;
		do namp = chainptrs (lev) repeat pman while (namp ^= null ());
		     pman = namp -> restore_name.fp;
		     call expand_pathname_ (namp -> restore_name.name, rdir, rent, (0));
		     call hcs_$delete_dir_acl_entries (rdir, rent, addr (acla), dim (acla, 1), (0));
		     free namp -> restore_name in (allocarea);
		end;
	     end;
	end restore_all_access;
						/*  */

						/*  */
%page; %include access_mode_values;
%page; %include aim_template;
%page; %include disk_pack;
%page; %include iox_modes;
%page; %include vtoce;

end sweep_pv;
