/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

find_partition_:
     proc (P_pvname, P_part_name, P_pvid, P_part_start, P_part_lth, P_code);

/* *	FIND_PARTITION_
   *
   *	This procedure is used to locate a disk partition if it exists, and returns the
   *	size, location, and volume pvid for the partition. It is designed to make partition
   *	processing programs easier to write.
   *
   *	Written 12/06/80, W. Olin Sibert
   *	Modified 1/31/85, Keith Loepere, for real error codes.
*/

/* Modified by BIM, 830601, to default to using phcs_$find_partition to find
   the config_deck specified partition if P_pvname = "" */


	dcl     (
	        P_pvname		 char (*),	/* Input: name of volume to look on */
	        P_part_name		 char (*),	/* Input: name of partition to look for */
	        P_pvid		 bit (36) aligned,	/* Output: PVID of volume */
	        P_part_start	 fixed bin (35),	/* Output: first record of partition */
	        P_part_lth		 fixed bin (35),	/* Output: number of words in partition */
	        P_code		 fixed bin (35)
	        )			 parameter;	/* Output: error code */

	dcl     fb18_record		 fixed bin (18);
	dcl     fb18_length		 fixed bin (18);
	dcl     pvid		 bit (36) aligned;
	dcl     code		 fixed bin (35);
	dcl     idx		 fixed bin;

	dcl     label_buffer	 (1024) bit (36) aligned;

	dcl     mdc_$pvname_info	 entry (char (*), bit (36) aligned, char (*), bit (36) aligned, fixed bin,
				 fixed bin (35));
	dcl     phcs_$read_disk_label	 entry (bit (36) aligned, pointer, fixed bin (35));
	dcl     phcs_$find_partition	 entry (char (*), fixed bin, bit (36) aligned, fixed bin (18), fixed bin (18),
				 fixed bin (35));

	dcl     (
	        error_table_$device_parity,
	        error_table_$device_not_usable,
	        error_table_$invalid_device,
	        error_table_$moderr,
	        error_table_$noentry
	        )			 fixed bin (35) external static;

	dcl     sys_info$page_size	 fixed bin external static;

	dcl     linkage_error	 condition;

	dcl     addr		 builtin;


	on condition (linkage_error)
	     begin;				/* Lose gracefully if no access to phcs_ */
		code = error_table_$moderr;
		goto MAIN_RETURN;
	     end;

	if P_pvname = ""
	then do;
		P_pvid = ""b;
		fb18_record = 0;
		fb18_length = 0;
		call phcs_$find_partition (P_part_name, (0), P_pvid, fb18_record, fb18_length, P_code);
		P_part_start = fb18_record;
		P_part_lth = fb18_length;
		return;
	     end;

	call mdc_$pvname_info (P_pvname, pvid, (""), (""b), (0), code);
	if code ^= 0
	then /* Wrong name, probably */
	     goto MAIN_RETURN;

	labelp = addr (label_buffer);


	call phcs_$read_disk_label (pvid, labelp, code);

	revert condition (linkage_error);

	if code ^= 0
	then goto MAIN_RETURN;

	do idx = 1 to label.nparts while (label.parts (idx).part ^= P_part_name);
	end;

	if idx > label.nparts
	then do;
		code = error_table_$noentry;
		goto MAIN_RETURN;
	     end;

	P_pvid = pvid;				/* Found it. Copy output parameters */
	P_part_start = label.parts (idx).frec;
	P_part_lth = sys_info$page_size * label.parts (idx).nrec;
	code = 0;

MAIN_RETURN:
	P_code = code;
	return;

%page;
%include fs_vol_label;

     end find_partition_;
