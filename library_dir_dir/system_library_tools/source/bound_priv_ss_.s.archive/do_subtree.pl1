/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dos: do_subtree: proc;

/* (walk_subtree) Initially coded in September 1969 by V. Voydock */
/* Converted to pl1  in May 1970 by V. Voydock */
/*  Modified on May 4, 1970 at 12:25 midnight by V. Voydock */
/* Modified on January 4, 1971 (to add pi handler) by V. Voydock */
/* Modified on July 8, 1971 by J. Stern
   Command name changed from "global" to "execute_in_subdirectories".
   Command format and options changed ("-bottom_up" option added).  */
/* Modified Dec 13 1973 by S. Herbst
   Converted to Version II
   Names changed to walk_subtree and ws_recursive.
   Var. length temporary command line. */
/* Bugs fixed 12/9/75 by Steve Herbst: walking through MSF's and
   cwd in command line changing walk */

/* do_subtree built off this umble base, multiprocess circus
   Just about all of previous "improvements" thrown away, and
   just about every line changed or recoded somehow,
   BSG, magister multicis 2/20/77 */

dcl (cleanup, da_err_1_, undispatch_err_1_) condition;

dcl  starting_dir char (168);
dcl  temp_dname char (168);
dcl  working_dir char (168);
dcl  command_line char (clng) based (cp),
     bu_command_line char (buclng) based (buclp),
     starting_node char (slng) based (sp),		/* starting node of subtree of subdirectories */
     arg char (lng) based (ap),
     b36 bit (36) based aligned,
     myname char (15) static options (constant) init ("do_subtree"),
     procpicvar pic "99" init (0);			/* Varying for &2 */

dcl (lng, clng, buclng, slng) fixed bin init (0);		/* various lengths for indirect strings */
dcl (level init (0), first_level init (1), last_level init (999)) fixed bin;
dcl  i fixed bin;

dcl (nnn, code) fixed bin (35);

/* This set of flags is initialized from the command line in master process, or only
   process if that is the case.  They are picked up from com seg for slave procs. */

dcl (bottom_up_flag init ("0"b),			/* 1 => exists bottomup comline */
     f_option_flag init ("0"b),			/* 1 => -first was used */
     top_down_flag init ("0"b),			/* 1 => exists topdown comline */
     trace_flag init ("0"b),				/* 1 => print pathnames (default) */
     privf init ("0"b),				/* 1 => call hphcs_ instead of hcs_ star */
     msff init ("0"b)				/* 1 => treat msfs not as dirs */
     ) bit (1) aligned;


dcl  abort_entry bit (1) aligned init ("0"b);

dcl (ap, arp, cp, sp, buclp) ptr init (null ());

dcl  tem_ area based (arp);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);

dcl (addr, fixed, null, substr, stacq) builtin,
     cv_dec_check_ external entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     cu_$arg_ptr ext entry (fixed bin (17), ptr, fixed bin (17), fixed bin (35)),
     cu_$arg_count ext entry (fixed bin (17)),
     get_system_free_area_ ext entry returns (ptr),
     get_wdir_ external entry returns (char (168)),
     ioa_ ext entry options (variable),
     com_err_ ext entry options (variable);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));

/*  */

/* Stuff for multiprocess feature */

dcl 1 mpdata based (mpdatap) aligned,			/* Element block for one process in circus */
    2 pid bit (36) aligned,				/* process id */
    2 wait_list,					/* IPC event channel data */
      3 nchan fixed bin,				/* 1 */
      3 evchn fixed bin (71),				/* Event channel on which to wake this px */
    2 px fixed bin,					/* process index (in array ) */
    2 gostac bit (36) aligned,			/* Set NZ to "grab" px for dispatch */
    2 data_avl bit (36) aligned,			/* set when data available */
    2 uid (-1:15) fixed bin,				/* "cnt" for directories */
    2 slevel fixed bin,				/* starting "-ft" level */
    2 shlev fixed bin,				/* starting hierarchy lev of dispatch */
    2 dname char (168) varying,			/* dirname at dispatch */
    2 flags unal,
      3 ready bit (1),				/* px exists */
      3 died bit (1);				/* known to have failed wakeup */

dcl  mpdatap ptr;					/* process element ptr */

dcl 1 global_mpdata based (gmpdata_p) aligned,		/* global com seg for 1 circus */
    2 startctl bit (36) aligned,			/* pid of FIRST guy to join circus */
    2 cnt fixed bin (35) aligned,			/* tag generator for diirectories */
    2 first_hdepth fixed bin,				/* starting hierarchy depth */
    2 last_hdepth fixed bin,				/* finishing hierarchy depph */
    2 sfirst fixed bin,				/* "-first" stuff */
    2 slast fixed bin,				/* -last */
    2 global_flags unal,
      3 trace_flag bit (1),				/* 1 => print pathnames */
      3 top_down_flag bit (1),			/* 1 => Exists topdown line */
      3 bottom_up_flag bit (1),			/* 1 => exists bottomup line */
      3 msf_flag bit (1),				/* 1 => dont walk msfs */
      3 priv_flag bit (1),				/* 1 => call hphcs_ */
    2 comlinel fixed bin,				/* length of topdown line */
    2 command_line char (300),			/* value of topdown line */
    2 bu_comlinel fixed bin,				/* length of bottomup line */
    2 bu_comline char (300),				/* value of bottomup line */
    2 stopflags unal,
      3 eoj bit (1),				/* All dirs have been exited => job done */
      3 abort bit (1),				/* GET OUT OF WATER FAST! */
    2 nprocs fixed bin (35) aligned,			/* current number of px's */
    2 meters,
      3 executions fixed bin,
      3 dxeqs fixed bin,
      3 recursions fixed bin,
      3 pickups fixed bin,
      3 dispatches fixed bin,
      3 decursions fixed bin,
      3 getworks fixed bin,
      3 wakeups fixed bin,
      3 blocks fixed bin,
    2 perprocess (36) like mpdata aligned,		/* Array of process elements */
    2 dir_table (1 : global_mpdata.cnt),		/* indexed by cnt-generated index */
      3 procbits (36) bit (1) unaligned;		/* "1"b => process 2sub in dir # 1sub */


dcl  b_comline char (global_mpdata.comlinel) based (addr (global_mpdata.command_line));
dcl  b_bu_comline char (global_mpdata.bu_comlinel) based (addr (global_mpdata.bu_comline));

dcl  gmpdata_p ptr;

dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin, ptr, fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));


dcl  hlev fixed bin;
dcl  px fixed bin;

dcl  my_pid bit (36) aligned;
dcl  event_msg (4) fixed bin (71);
dcl  my_px fixed bin;
dcl  my_evchn fixed bin (71);
dcl  mpf bit (1) init ("0"b);
dcl  command_process bit (1) init ("1"b);
dcl  do entry options (variable);
						/*  */

/* Get starting node name */
	call cu_$arg_ptr (1, sp, slng, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname);
	     return;
	end;

/* "-wd" => current working directory */
	if starting_node = "-wd" then do;
	     working_dir = get_wdir_ ();
	     sp = addr (working_dir);
	     slng = length (rtrim (working_dir));
	end;


/* Check for options */
	do i = 2 by 1;
	     call cu_$arg_ptr (i, ap, lng, code);
	     if code ^= 0 then go to endopt;

/* Identify options */
	     if arg = "-ft" | arg = "-first" | arg = "-last" | arg = "-lt" then do;
		f_option_flag = substr (arg, 2, 1) = "f";
		i = i + 1;
		call cu_$arg_ptr (i, ap, lng, code);
		if code ^= 0 then do;
		     call com_err_ (error_table_$noarg, myname, "Level number missing.");
		     return;
		end;
		nnn = cv_dec_check_ (arg, code);
		if code ^= 0 | nnn <= 0 then do;
		     call com_err_ (0, myname, "Bad level number: ^a.", arg);
		     return;
		end;
		if f_option_flag then first_level = nnn;
		else last_level = nnn;
	     end;
	     else if arg = "-td" | arg = "-top_down" then do;
		i = i + 1;
		call cu_$arg_ptr (i, cp, clng, code);
		if code ^= 0 then do;
		     call com_err_ (error_table_$noarg, myname, "Top-down command line missing.");
		     return;
		end;
		top_down_flag = "1"b;
	     end;
	     else if arg = "-bu" | arg = "-bottom_up" then do;
		i = i + 1;
		call cu_$arg_ptr (i, buclp, buclng, code);
		if code ^= 0 then do;
		     call com_err_ (error_table_$noarg, myname, "Bottom-up command line missing.");
		     return;
		end;
		bottom_up_flag = "1"b;
	     end;
	     else if arg = "-lg" | arg = "-long" then trace_flag = "1"b;
	     else if arg = "-mp" | arg = "-multiprocess" then mpf = "1"b;
	     else if arg = "-priv" then privf = "1"b;
	     else if arg = "-no_msf" then msff = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, myname, arg);
		return;
	     end;
	end;
endopt:


/* Control comes here when all arguments have been processed. */
	if last_level < first_level then do;
	     code = 0;
	     call com_err_ (0, myname, "Last level (^d) must be >= first level (^d)", last_level, first_level);
	     return;
	end;

/* Get area in which star handler can allocate information */
	arp = get_system_free_area_ ();


	if starting_node = "-slave" then do;
	     command_process = "0"b;
	     starting_dir = starting_node;
	     mpf = "1"b;
	end;
	else do;
	     call absolute_pathname_ (starting_node, starting_dir, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, starting_node);
		return;
	     end;
	end;

	slng = length (rtrim (starting_dir));
	sp = addr (starting_dir);			/* bind starting-node to starting_dir */

	if mpf then do;
	     call establish_self_mp;
	     if command_process then call recurse$dispatch (starting_node);
	     call multiprocess_ws;
	end;
	else call recurse (starting_node);


	return;

ABORT:	call com_err_ (0, myname, "Multiprocess abort signalled.");
NLX:	return;
						/*  */

recurse:	proc (node);

/* Internal procedure to execute the command line set up in the main body of
   the program at all specified points of the file system hierarchy */

/* In a single-process execution, this procedure recurses over the whole specified
   subtree.  In multiprocess executions, each dispatched process calls it to recurse
   over the dispatch point.  It always executes the topdown line:
   the bottom up line must be scheduled. */


dcl  node char (*);

dcl (np, ep) ptr init (null);

dcl  dispatch_buf char (168);
dcl  dispatch_name char (dispatch_namel) based (addr (dispatch_buf));
dcl (k, ecount) fixed bin;

dcl  cnt fixed bin;

dcl  ename char (enamel) based (enamep);
dcl  enamep ptr;

dcl (dispatch_namel, enamel) fixed bin;

dcl  code fixed bin (35);

dcl (hcs_$star_, hphcs_$star_) ext entry (char (*), char (*), fixed bin (2), ptr, fixed bin (17), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));

dcl  bitcount fixed bin (24), type fixed bin (2);

dcl  error_table_$no_s_permission ext fixed bin (35);
dcl  error_table_$nomatch ext fixed bin (35);

dcl  names (100) char (32) based (np) aligned;

dcl 1 ent (ecount) based (ep) aligned,
    2 type bit (2) unaligned,
    2 nname bit (16) unaligned,
    2 nindex fixed bin (17) unaligned;

/*  */

/* Establish cleanup handler */
	     on condition (cleanup) begin;
		if ep ^= null then free ent;
		if np ^= null then free names;
	     end;

/* Push level of recursion */

	     if mpf then do;
		global_mpdata.recursions = global_mpdata.recursions + 1;
		if global_mpdata.abort then go to ABORT;
		cnt = stacq_countgen (global_mpdata.cnt); /* get dir id */
						/* We are provably the first process to
						   encounter this dir. Generate unique index for it */
		addr (global_mpdata.dir_table (cnt)) -> b36 = "0"b;
						/* err 338, 'string a (2, *) not implemented yet' */
		dir_table (cnt).procbits (my_px) = "1"b; /* dir goes busy */
		mpdata.uid (hlev) = cnt;
		hlev = hlev + 1;
	     end;
	     level = level+1;

/* See if top-down trace is wanted */

	     if top_down_flag then call executor (command_line);

/* If this is last level then skip looking for subdirectories */
	     if level >= last_level then ecount, code = 0;


/* Get list of all subdirectories */
	     else do;
		if privf then call hphcs_$star_ (node, "**", 2, arp, ecount, ep, np, code);
		else call hcs_$star_ (node, "**", 2, arp, ecount, ep, np, code);
		if code ^= 0 then do;
		     ecount = 0;
		     if code ^= error_table_$nomatch
		     then call com_err_ (code, myname, node);
		end;
	     end;


/* Execute command in all subdirectories which are in range */
	     do k = 1 to ecount;
		enamep = addr (names (ent (k).nindex));
		enamel = length (rtrim (names (ent (k).nindex)));
		if is_it_a_dir ((ent (k).type)) then do;

		     dispatch_buf = node;
		     if node = ">" then do;
			substr (dispatch_buf, 2) = ename;
			dispatch_namel = 1 + length (ename);
		     end;
		     else do;
			substr (dispatch_buf, length (node) + 1, 1) = ">";
			substr (dispatch_buf, length (node) + 2) = ename;
			dispatch_namel = length (node) + 1 + length (ename);
		     end;

/* Essence of do_subtree work scheduler: If I can't find someone else (now idle) to do it, do it myself. */

		     if ^dispatch (dispatch_name) then call recurse (dispatch_name);

		end;
	     end;


/* Clear out level flag and do bottom-up xeq */

	     if mpf then do;
		if ^dir_busyp (cnt, my_px, "0"b)	/* Unmark self from dir, test. */
		then if bottom_up_flag then call executor (bu_command_line);
						/* xec the b_u line iff I am last guy out! */
		hlev = hlev - 1;			/* Count down hierarchy depth. */
	     end;

	     else if bottom_up_flag then call executor (bu_command_line);

	     level = level - 1;			/* note that executor looks at this */

	     if ep ^= null then free ent;
	     if np ^= null then free names;

	     return;

executor:	     procedure (com_line);			/* exec command right here */

dcl  com_line char (*);

		if level < first_level then return;

		if trace_flag then call ioa_ ("^-^a", node);
		call do (com_line, node, procpicvar);
		if mpf then global_mpdata.executions = global_mpdata.executions + 1;

	     end executor;

is_it_a_dir:   proc (btype) returns (bit (1));

dcl  btype bit (2);

		if btype ^= "10"b then return ("0"b);

		if ^msff then return ("1"b);		/* This is a silly thing */

		call hcs_$status_minf (node, ename, 0, type, bitcount, code);

		if code ^= 0 then if code ^= error_table_$no_s_permission then do;
			call com_err_ (code, myname, "^a^[>^]^a", node, node ^= ">", ename);
			return ("0"b);
		     end;

		return ((type = 2) & (bitcount = 0));

	     end is_it_a_dir;

/*  */

dispatch:	     proc (s) returns (bit (1) aligned);

/* This s/r is called with the name of a directory. It looks for some currently idle process to
   do it, and returns "1"b if it found someone. Otherwise, returns "0"b. The target process'
   process element is "loaded" from current process & "cnt". He is marked  in dir_table as
   busy in all the dirs from his dispatch point up. */


dcl  s char (*);

dcl 1 ampdata like mpdata aligned based (ampdatap);
dcl  ampdatap ptr;
dcl  dpx fixed bin;
dcl  dx fixed bin;

		if ^mpf then return ("0"b);

		do dpx = 1 to global_mpdata.nprocs;
		     ampdatap = addr (global_mpdata.perprocess (dpx));
		     if ampdata.ready then
			if stac (addr (ampdata.gostac), my_pid) then do;
			     ampdata.dname = s;
			     ampdata.uid = mpdata.uid;
			     ampdata.uid (hlev - 1) = cnt;
			     ampdata.slevel = level;
			     ampdata.shlev = hlev;
			     do dx = global_mpdata.first_hdepth - 1 to hlev - 1;
				if dir_busyp (ampdata.uid (dx), dpx, "1"b) then;
			     end;
			     if ^stac (addr (ampdata.data_avl), my_pid) then signal da_err_1_;
			     global_mpdata.dispatches = global_mpdata.dispatches + 1;

			     if waker (ampdatap) then return ("1"b);
			     else do dx = global_mpdata.first_hdepth - 1 to hlev - 1;
				if ^dir_busyp (mpdata.uid (dx), dpx, "0"b) then signal undispatch_err_1_;
			     end;
			end;
		end;
		return ("0"b);

	     end dispatch;

recurse$dispatch: entry (node);			/* entry to roll the ball */
						/* Dispatch the root node. */

	     hlev = global_mpdata.first_hdepth;
	     cnt = stacq_countgen (global_mpdata.cnt);	/* Corresp. to Root node's FATHER */
	     if ^dispatch (node) then do;
		call com_err_ (code, myname, "Cannot dispatch root job.");
		go to NLX;
	     end;
	     return;


	end recurse;


/*  This page intentionally left blank
    */

multiprocess_ws: proc;

/* Clear my gostac-word. Wait for work, which will be indicated by data_avl NZ. Load auto vars
   from process element and global data. Recurse over dispatch point, and decurse up. */

dcl 1 dmpdata like mpdata aligned based (dmpdatap);
dcl  dmpdatap ptr;
dcl  upnamel fixed bin, upward_name char (upnamel) based (addr (temp_dname));

getwork:
	     global_mpdata.getworks = global_mpdata.getworks + 1;
	     do while (mpdata.gostac = "0"b & mpdata.data_avl = "0"b);
		global_mpdata.blocks = global_mpdata.blocks + 1;
		call ipc_$block (addr (mpdata.wait_list), addr (event_msg), code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "From ipc_$block");
		     mpdata.died = "1"b;
		     return;
		end;
		if global_mpdata.abort then go to ABORT;
		if global_mpdata.eoj then return;
	     end;

	     global_mpdata.pickups = global_mpdata.pickups + 1;

	     trace_flag = global_mpdata.trace_flag;
	     msff = global_mpdata.msf_flag;
	     privf = global_mpdata.priv_flag;
	     bottom_up_flag = global_mpdata.bottom_up_flag;
	     top_down_flag = global_mpdata.top_down_flag;
	     starting_dir = mpdata.dname;
	     level = mpdata.slevel;
	     first_level = global_mpdata.sfirst;
	     last_level = global_mpdata.slast;

	     hlev = mpdata.shlev;

	     sp = addr (starting_dir);
	     slng = length (mpdata.dname);

	     cp = addr (global_mpdata.command_line);
	     clng = global_mpdata.comlinel;
	     buclp = addr (global_mpdata.bu_comline);
	     buclng = global_mpdata.bu_comlinel;

	     call recurse (starting_node);

	     if global_mpdata.abort then go to ABORT;


	     temp_dname = mpdata.dname;
	     upnamel = length (mpdata.dname);




/*	Go back down looking for directories left upon us to undo. */

	     do hlev = hlev - 1 by -1 to global_mpdata.first_hdepth;
		upnamel = max (upnamel - index (reverse (upward_name), ">"), 1);
		if ^dir_busyp (mpdata.uid (hlev), my_px, "0"b) then do;
		     if bottom_up_flag then do;

/* Tollite jugum meum, dixit ad eos */

			global_mpdata.dxeqs = global_mpdata.dxeqs + 1;
			if trace_flag then call ioa_ ("^9x*^a", upward_name);
			call do (bu_command_line, upward_name, procpicvar);
		     end;

		     global_mpdata.decursions = global_mpdata.decursions + 1;
		end;
	     end;

	     if ^dir_busyp (mpdata.uid (hlev), my_px, "0"b) then call sig_eoj;
						/* PL/I leaves behind last val of 'hlev'-1 */

	     mpdata.data_avl = "0"b;			/* need no stacq */
	     if stacq (mpdata.gostac, "0"b, (mpdata.gostac)) then;
						/* Leave self open for work */
	     go to getwork;


	end multiprocess_ws;

waker:	proc (xmpdp) returns (bit (1) aligned);
						/* Send wakeup to px of which xmpdp -> */

dcl 1 xmpd like mpdata based (xmpdp) aligned;
dcl  xmpdp ptr;

	     call hcs_$wakeup (xmpd.pid, xmpd.evchn, 0, code);
	     global_mpdata.wakeups = global_mpdata.wakeups + 1;
	     if code = 0 then return ("1"b);
	     xmpd.died = "1"b;

	     call com_err_ (code, myname, "Process ^d died while in ^a.", xmpd.px, xmpd.dname);
	     if global_mpdata.abort &^abort_entry then goto ABORT;
						/* Good place to pick up his burden */
	     return ("0"b);
	end waker;




establish_self_mp: proc;

/* Find the circus' seg. Establish who's first.  If this is the command px, fill in automatic parameters
   into global ones.  Initialize my process element. */


dcl  save_first_possible bit (36) aligned;

	     call get_com_seg;

	     call get_process_parameters;

/* This is for the first guy, whether master or not */

	     save_first_possible = global_mpdata.startctl;
	     if stac (addr (global_mpdata.startctl), my_pid) then do; /* Are we the FIRST (not nec. Master)? */
		global_mpdata.nprocs = 0;
		global_mpdata.cnt = 0;
		string (global_mpdata.stopflags) = "0"b;
		unspec (global_mpdata.meters) = "0"b;
	     end;

	     if command_process then do;		/* real starting stuff */
		global_mpdata.trace_flag = trace_flag;
		global_mpdata.msf_flag = msff;
		global_mpdata.priv_flag = privf;
		global_mpdata.bottom_up_flag = bottom_up_flag;
		global_mpdata.top_down_flag = top_down_flag;
		global_mpdata.comlinel = length (command_line);
		global_mpdata.command_line = command_line;
		global_mpdata.bu_comlinel = buclng;
		global_mpdata.bu_comline = bu_command_line;
		global_mpdata.first_hdepth = count_greater_thans (starting_node);
		global_mpdata.last_hdepth = global_mpdata.first_hdepth + last_level - first_level;
		global_mpdata.sfirst = first_level;
		global_mpdata.slast = last_level;
	     end;

	     if global_mpdata.nprocs ^< hbound (global_mpdata.dir_table.procbits, 2)
	     then do;
		if command_process then call com_err_ (0, myname, "Too many slave processes to add master.");
		else call com_err_ (0, myname, "too many processes to add another.");
		go to NLX;
	     end;

	     my_px = stacq_countgen (global_mpdata.nprocs);
	     procpicvar = my_px;			/* Set for &2 hack */
	     call ioa_ ("Process ^d in ^a.", my_px, get_wdir_ ());
	     mpdatap = addr (global_mpdata.perprocess (my_px));
	     unspec (mpdata) = "0"b;

	     mpdata.pid = my_pid;
	     mpdata.px = my_px;
	     mpdata.nchan = 1;
	     mpdata.evchn = my_evchn;
	     mpdata.ready = "1"b;

	end establish_self_mp;

get_process_parameters: procedure;			/* Get ev chan & pid */

	     call ipc_$create_ev_chn (my_evchn, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot create event channel.");
		go to NLX;
	     end;
	     my_pid = get_process_id_ ();
	     return;

	end get_process_parameters;



/* 

   Now comes all the dirt and language apologies. */

dir_busyp: proc (acnt, apx, abit) returns (bit (1) aligned);

/* This procedure is the heart of the bottom_up and completion scheduling technique. As "abit" is "0"b or "1"b,
   respectively, it marks the process whos index is "apx" as out of, or in, respectively,
   the dir whose index is "acnt".  The bit diddling is done unitarily (with stacq), such that it
   is known, in the case of taking a process _o_u_t of a dir, if this was th last process out.
   This is the condition for b_u comline execution. The last process out of the root node's father
   declares tthe  entire circus over. */

dcl  acnt fixed bin;
dcl  apx fixed bin;
dcl  abit bit (1) aligned;

dcl  p ptr;
dcl (b, c) bit (36) aligned;
dcl  dummy bit (1) aligned;


	     p = addr (global_mpdata.dir_table (acnt));
r:	     b = string (global_mpdata.dir_table (acnt));
	     c = b;
	     substr (c, apx, 1) = abit;
	     dummy = "1"b;				/* This is to get around PL1 bug 1664,
						   _i_n _q_u_o state_man doesn't flush substr
						   references. This clears the a-register. HELP! */
	     if stacq (p -> b36, c, b) then do;
		substr (b, apx, 1) = "0"b;
		return (b ^= "0"b);
	     end;
	     else go to r;

	end dir_busyp;



count_greater_thans: proc (s) returns (fixed bin);

/* Determines "hierarchy depth" from # of greater thans */


dcl  s char (*);
dcl (i, j) fixed bin;
dcl  c fixed bin;

	     if s = ">" then return (0);

	     i = 1;
	     c = 0;
	     do while ("1"b);
		j = index (substr (s, i), ">");
		if j = 0 then return (c);
		c = c + 1;
		i = i + j;
	     end;
	end count_greater_thans;


stacq_countgen: proc (reference) returns (fixed bin (35));


/* Take a unique tag from loc "reference", incrementing it by 1 in so doing.  Exactly
   like  the ticket machine in the bakery. */

dcl  reference fixed bin (35);
dcl  bit_reference bit (36) aligned based (addr (reference)); /* This is ILLEGAL, but necessary. */
						/* We hope we don't get optimized away. */
dcl  v fixed bin (35);

r:	     v = reference;
	     if stacq (bit_reference, bit (fixed (v + 1, 36), 36), bit (fixed (v, 36), 36))
	     then return (v + 1);
	     else go to r;

	end stacq_countgen;

sig_eoj:	proc;

/* Broadcast the fact of completion */

dcl 1 empdata like mpdata based (empdatap);
dcl  empdatap ptr;

dcl  epx fixed bin;
	     global_mpdata.eoj = "1"b;

j:	     do epx = 1 to global_mpdata.nprocs;
		empdatap = addr (global_mpdata.perprocess (epx));
		if waker (empdatap) then;
	     end;
	     return;

sig_abort:     entry;

	     global_mpdata.abort = "1"b;
	     abort_entry = "1"b;
	     go to j;

	end sig_eoj;

abort:	entry;

	call get_com_seg;

	abort_entry = "1"b;
	call sig_abort;
	return;
						/*  */

recover:	entry;

	call cu_$arg_ptr (1, ap, lng, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname);
	     return;
	end;

	my_px = cv_dec_check_ (arg, code);
	if code ^= 0 then do;
	     call com_err_ (0, myname, "Bad process number: ^a.", arg);
	     return;
	end;
	procpicvar = my_px;

	call get_com_seg;

	if my_px < 0 | my_px > global_mpdata.nprocs then do;
	     call com_err_ (0, myname, "Invalid process number: ^d.", my_px);
	     return;
	end;

	mpdatap = addr (global_mpdata.perprocess (my_px));
	call get_process_parameters;

	mpdata.pid = my_pid;
	mpdata.evchn = my_evchn;
	mpdata.nchan = 1;

	call ioa_ ("Recovering process ^d in ^a.", my_px, get_wdir_ ());

	mpf = "1"b;
	command_process = "0"b;

	if mpdata.died then do;
	     mpdata.data_avl = "0"b;
	     if stacq (mpdata.gostac, "0"b, (mpdata.gostac)) then;
	     mpdata.died = "0"b;
	end;

	arp = get_system_free_area_ ();

	call multiprocess_ws;
	return;

/*  */

status:	entry;

	call get_com_seg;
	call ioa_ ("Seg at ^p", gmpdata_p);
	call ioa_ ("Starter was ^w, count at ^d, ^d processes.",
	     global_mpdata.startctl, global_mpdata.cnt, global_mpdata.nprocs);
	call ioa_ ("Flags: ^[^^^]tracing, ^[^^^]top-down, ^[^^^]bot-up, ^[^^^]eoj, ^[^^^]abort ^[^^^]no_msf ^[^^^]priv",
	     ^global_mpdata.trace_flag, ^global_mpdata.top_down_flag, ^global_mpdata.bottom_up_flag,
	     ^global_mpdata.eoj, ^global_mpdata.abort, ^global_mpdata.msf_flag, ^global_mpdata.priv_flag);
	call ioa_ ("^d dispatches, ^d pickups, ^d getworks, ^d wakeups.",
	     global_mpdata.dispatches, global_mpdata.pickups,
	     global_mpdata.getworks, global_mpdata.wakeups);
	call ioa_ ("^d blocks, ^d recursions, ^d decursions.",
	     global_mpdata.blocks, global_mpdata.recursions, global_mpdata.decursions);
	call ioa_ ("^d recurse executions, ^d decurse executions.",
	     global_mpdata.executions, global_mpdata.dxeqs);
	call ioa_ ("first ^d last ^d first hd ^d last hd ^d",
	     global_mpdata.sfirst, global_mpdata.slast,
	     global_mpdata.first_hdepth, global_mpdata.last_hdepth);
	if global_mpdata.top_down_flag then call ioa_ ("Top command: ^a", b_comline);
	if global_mpdata.bottom_up_flag then call ioa_ ("Bottom command: ^a", b_bu_comline);

	do px = 1 to global_mpdata.nprocs;
	     mpdatap = addr (global_mpdata.perprocess (px));
	     call ioa_ ("^/Px ^d PID ^w at ^p, evchn = ^o.",
		mpdata.px, mpdata.pid, mpdatap, mpdata.evchn);
	     call ioa_ ("gostac ^w data_avl ^w.",
		mpdata.gostac, mpdata.data_avl);
	     call ioa_ ("Uid array ^(^d ^).", mpdata.uid);
	     call ioa_ ("Last seen at ^a, s-lev ^d, s-hlev ^d.",
		mpdata.dname, mpdata.slevel, mpdata.shlev);
	     call ioa_ ("Flags: ^[^^^]ready, ^[^^^]died.",
		^mpdata.ready, ^mpdata.died);
	end;
	return;

get_com_seg: proc;

	     call hcs_$make_seg (get_wdir_ (), "dos_mp_seg", "", 1011b, gmpdata_p, code);
	     if gmpdata_p = null then do;
		call com_err_ (code, myname, "Cannot get pointer to communications segment.");
		go to NLX;
	     end;
	end get_com_seg;



     end dos;
