/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


clear_partition:
     procedure () options (variable);

/* *	Command to clear a disk partition.
   *
   *	    clear_partition Pvname Partition_name
   *
   *	10/21/80, W. Olin Sibert
   *	 1/31/85, Keith Loepere, for real error codes.
   */

dcl  ap pointer;
dcl  al fixed bin (21);
dcl  arg char (al) based (ap);
dcl  code fixed bin (35);
dcl (nargs, argno) fixed bin;
dcl  af_sw bit (1) aligned;

dcl  brief_sw bit (1) aligned;
dcl  answer char (4) varying;
dcl  pvname char (32);
dcl  part_name char (4);
dcl  pvid bit (36) aligned;
dcl  pattern_value fixed bin (35);
dcl  pattern_word bit (36) aligned;
dcl  pattern_page (1024) bit (36) aligned;
dcl  idx fixed bin fixed bin;

dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  dump_segment_ entry (pointer, pointer, fixed bin, fixed bin (35), fixed bin (18), bit (*));
dcl  hphcs_$read_partition entry (bit (36) aligned, char (*), fixed bin (35), pointer, fixed bin (18), fixed bin (35));
dcl  hphcs_$write_partition entry (bit (36) aligned, char (*), fixed bin (35), pointer, fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  mdc_$pvname_info entry (char (*), bit (36) aligned, char (*), bit (36) aligned, fixed bin, fixed bin (35));

dcl (error_table_$badopt,
     error_table_$noarg,
     error_table_$too_many_args,
     error_table_$bigarg,
     error_table_$out_of_bounds,
     error_table_$bad_conversion) fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("clear_partition");

dcl  linkage_error condition;

dcl (addr, char, hbound, length, maxlength, null, size, string, substr) builtin;

/*  */

	pvname = "";
	part_name = "";
	brief_sw = "0"b;
	pattern_word = ""b;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
RETURN:	     return;
	     end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if (arg = "-pattern") then do;
		if argno = nargs then do;
		     call com_err_ (error_table_$noarg, WHOAMI, "After ^a", arg);
		     goto RETURN;
		     end;

		argno = argno + 1;
		call cu_$arg_ptr (argno, ap, al, (0));
		pattern_value = cv_oct_check_ (arg, code);
		if code ^= 0 then do;
		     call com_err_ (error_table_$bad_conversion, WHOAMI,
			"Pattern must be an octal number, not ^a", arg);
		     goto RETURN;
		     end;

		pattern_word = unspec (pattern_value);
		end;

	     else if (arg = "-long") | (arg = "-lg") then
		brief_sw = "0"b;
	     else if (arg = "-brief") | (arg = "-bf") then
		brief_sw = "1"b;

	     else if char (arg, 1) = "-" then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto RETURN;
		end;

	     else if pvname = "" then 		/* first arg is volume name */
		pvname = arg;

	     else if part_name = "" then do;		/* second arg is partition name */
		if length (rtrim (arg)) > maxlength (part_name) then do;
		     call com_err_ (error_table_$bigarg, WHOAMI,
			"Partition name must be ^d characters or less. ^a",
			maxlength (part_name), arg);
		     goto RETURN;
		     end;

		part_name = rtrim (arg);
		end;

	     else do;
		code = error_table_$too_many_args;
		goto USAGE;
		end;
	     end; 				/* of argument loop */

	if part_name = "" then do;
	     code = error_table_$noarg;
USAGE:	     call com_err_ (code, WHOAMI,
		"^/Usage:^-^a pvname part_name {-control_args}", WHOAMI);
	     goto RETURN;
	     end;

/*  */

	call mdc_$pvname_info (pvname, pvid, (""), (""b), (0), code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "^a", pvname);
	     goto RETURN;
	     end;

	on condition (linkage_error) begin;		/* exit gracefully */
	     call com_err_ (0, WHOAMI,
		"This opertaion requires privileged access (hphcs_) not given to this process.");
	     goto RETURN;				/* and punt */
	     end;

	call hphcs_$read_partition (pvid, part_name, 0, addr (pattern_page), size (pattern_page), code);

	revert condition (linkage_error);

	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Cannot read partition ^a on ^a.", part_name, pvname);
	     goto RETURN;
	     end;

	query_info.yes_or_no_sw = "1"b;
	if brief_sw then
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"Do you wish to overwrite partition ^a on ^a?",
		part_name, pvname);
	else call command_query_ (addr (query_info), answer, WHOAMI,
		"Partition ^a on ^a begins with:^/^3x^4(^w^x^)^/^3x^4(^w^x^)^/Do you wish to overwrite it?",
		part_name, pvname, pattern_page (1), pattern_page (2), pattern_page (3), pattern_page (4),
		pattern_page (5), pattern_page (6), pattern_page (7), pattern_page (8));

	if (answer ^= "yes") then			/* He chickened out */
	     goto RETURN;

	pattern_page (*) = pattern_word;		/* fill it in */

	do idx = 0 by 1;				/* and go to it */
	     call hphcs_$write_partition (pvid, part_name,
		(idx * 1024), addr (pattern_page), size (pattern_page), code);
	     if code = error_table_$out_of_bounds then	/* All done */
		goto FINISHED;

	     else if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot write record ^d to partition ^a on ^a. Aborting",
			(idx - 1), part_name, pvname);
		goto RETURN;
		end;
	     end; 				/* of loop writing records */

FINISHED: if ^brief_sw then
	     call ioa_ ("^a: Cleared partition ^a on ^a (^d. records)^[, with pattern ^w^].",
		WHOAMI, part_name, pvname, idx, (pattern_word ^= ""b), pattern_word);

	goto RETURN;				/* all done */

%page; %include query_info;

	end clear_partition;
