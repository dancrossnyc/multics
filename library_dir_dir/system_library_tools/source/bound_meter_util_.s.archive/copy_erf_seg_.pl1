/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Extract segments from a Multics dump */

/* Created:  by C. Hornig */
/* Modified: 24 February 1981 by J. A. Bush for larger fdump header size */
/* Modified: 29 December 1981 by G. Palter to not fault when asked about the same dump multiple times and to not reference
   a non-existant error code */
/* Modified: October 1984 by Greg Texada to use amu_ and change Erf to character.			*/

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


copy_erf_seg_:
     procedure (Erf, Segno, Out_ptr, Out_len, Code);


dcl  Erf char (*) parameter;				/* ERF number */

dcl  Segno fixed binary (15) unsigned parameter;		/* segment to copy out */
dcl  Segname character (*) parameter;			/* name of segment to copy out */

dcl  Out_ptr pointer parameter;			/* where to copy */
dcl  Out_len fixed binary (19) unsigned parameter;	/* how long it was */

dcl  Code fixed binary (35) parameter;

dcl  cleanup condition;

dcl  (addr, baseno, baseptr, binary, null, pointer) builtin;

dcl  amu_$fdump_mgr_init_fdump entry(char(*), ptr, ptr, fixed bin(35)),
     amu_$find_system_fdump entry (char(*), ptr, fixed bin(35)),
     amu_$terminate_translation entry (ptr),
     amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin(18), fixed bin(18), fixed bin(35)),
     amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);

dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$truncate_seg entry (ptr, uns fixed bin (19), fixed bin (35));
dcl  ring0_get_$segptr_given_slt entry (char (*), char (*), ptr, fixed bin (35), ptr, ptr);
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, uns fixed bin (19), fixed bin (35));

dcl  segno uns fixed bin (15);
dcl  segname char (32);
dcl  optr ptr;
dcl  segp ptr;
dcl  sdw_hold bit (72) aligned;
dcl  seg_size uns fixed bin (19);
dcl  offset fixed bin (18);
dcl  range fixed bin (18);

/**/

/* Extract a segment by segment number */
/* copy_erf_seg_:
   entry (Erf, Segno, Out_ptr, Out_len, Code);							*/

	segno = Segno;
	segname = "";				/* flag that we ARE the number entry		*/
	goto common_amu;


/* Extract a segment by name */

name:
     entry (Erf, Segname, Out_ptr, Out_len, Code);


	segname = Segname;				/* Flag that we are the name entry		*/
common_amu:
	Code = 0;
	optr = Out_ptr;
	if Erf = "-1" then do;			/* wants data form the running system		*/
	     if Segname ^= "" then
		goto OLD_WAY_FOR_RUNNING_SYSTEM_NAME;
	     else goto OLD_WAY_FOR_RUNNING_SYSTEM_NO;

	end;
	amu_info_ptr = null ();			/* so below will make one for us		*/
	on cleanup
	     begin;
	     if amu_info_ptr ^= null () then call amu_$terminate_translation (amu_info_ptr);
	end;
	system_dump_info_ptr = addr (sdi);
	sdi.version = SYSTEM_DUMP_INFO_VERSION_1;
	sdi.dump_dir_name, sdi.dump_seg_prefix, sdi.dump_name, sdi.dump_entry_format = "";
	call amu_$find_system_fdump (Erf, system_dump_info_ptr, Code);
						/* uses the dumps search list to find		*/
	if Code ^= 0 then goto return_to_caller_amu;	/* the erf 				*/
	call amu_$fdump_mgr_init_fdump ("copy_erf_seg_", system_dump_info_ptr, amu_info_ptr, Code);
	if Code ^= 0 then goto return_to_caller_amu;
	if segname ^= "" then do;			/* name entry, get hardcore info		*/
	     call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, addr (local_hardcore));

	     call ring0_get_$segptr_given_slt ("", segname, segp, Code, local_hardcore.sltp, local_hardcore.sltntp);
	     if Code ^= 0 then goto return_to_caller_amu;
	     segno = binary (baseno (segp), 15);
	end;

	call hcs_$truncate_seg (optr, 0, (0));		/* ok, all the same from here on..		*/
	offset = 0;
	range = sys_info$max_seg_size;		/* because amu_ wants to WRITE to it!		*/
	call amu_$do_translation (amu_info_ptr, (segno), optr, offset, range, Code);
          if Code = 0 then call hcs_$set_bc_seg(optr, (range * 36), Code);	
return_to_caller_amu:
	if amu_info_ptr ^= null () then call amu_$terminate_translation (amu_info_ptr);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


OLD_WAY_FOR_RUNNING_SYSTEM_NO:
	segno = Segno;
	goto common;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


OLD_WAY_FOR_RUNNING_SYSTEM_NAME:
	segname = Segname;
	call ring0_get_$segptr ("", segname, segp, Code);
	if Code ^= 0 then return;
	segno = binary (baseno (segp), 15);

common:
	call hcs_$truncate_seg (optr, 0, (0));
	sdwp = addr (sdw_hold);
	call ring_zero_peek_ (pointer (baseptr (0), 2 * segno), sdwp, 2, Code);
						/* get SDW */
	if Code ^= 0 then return;
	seg_size = 16 * (1 + binary (sdw.bound, 14));
	segp = baseptr (segno);
	call ring_zero_peek_ (segp, optr, seg_size, Code);
	if Code ^= 0 then return;
	Out_len = seg_size;
return_to_caller:
	return;

/**/
%include sdw;

%include system_dump_info;

dcl  1 sdi like system_dump_info;

%include amu_info;


%include amu_hardcore_info;
dcl  1 local_hardcore like hardcore_cur;







     end copy_erf_seg_;
