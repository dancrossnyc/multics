/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-10,MCR7383),
     audit(86-05-27,Wallman), install(86-07-18,MR12.0-1098):
     Add support for subvolumes, 3380 and 3390.
  2) change(86-11-10,Fawcett), approve(86-11-10,MCR7125),
     audit(87-01-08,Farley), install(87-01-09,MR12.0-1266):
     Changed by Tom Oke to conform to documentation.
  3) change(86-11-10,Fawcett), approve(86-11-10,MCR7547),
     audit(87-01-08,Farley), install(87-01-09,MR12.0-1266):
     Changed so disk_meters can display subvolume devices correctly.
                                                   END HISTORY COMMENTS */


get_vol_list_:
     proc (a_pv_list_ptr, a_lv_list_ptr, a_area_ptr, a_version, a_code);

/* Program to determine logical and physical volume names in a MULTICS
   system and allocate and return structures with this information. */

/* format: off */
/* Input:
   a_pv_list_ptr	is a pointer to the pv_list structure.  If it is
		non-null, it is taken to point to an existing
		structure which is size checked for validity and
		returned and re-allocated if necessary.
   a_lv_list_ptr	is a pointer to the lv_list structure.  If it is
		non-null, it is taken to point to an existing
		structure which is size checked for validity and
		returned and re-allocated if necessary.
   a_area_ptr	is a pointer to the area to allocate the structures
		in.  If it is null (), system_free_area is used.
   a_version	is an 8 character string of the version of structure
		the calling routine is expecting to receive.
   code		error code.
*/

/* format: on */

/* Interface declaratons. */

	dcl     a_pv_list_ptr	 ptr;
	dcl     a_lv_list_ptr	 ptr;
	dcl     a_area_ptr		 ptr;
	dcl     a_version		 char (8);
	dcl     a_code		 fixed bin (35);

/* Automatic */

	dcl     area_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     1 ai		 like area_info;
	dcl     max_lvs		 fixed bin;
	dcl     max_pvs		 fixed bin;
	dcl     temp_ptr		 ptr;		/* to temp seg */

	dcl     (addr, currentsize, length, max, null, rtrim, unspec) builtin;

	dcl     cleanup		 condition;

/* Static */

	dcl     entry_name		 char (32) static options (constant) initial ("get_vol_list_");

/* Areas */

	dcl     areas		 area based (area_ptr);


/* Structure Funnies */
/* The following array is used to determine the size to allocate
   for the structures to return.  We overlay the lv and pv structures onto the
   array, fill in the size words (which exist within the size of the array)
   and then do a currentsize (of a structure which for the most part doesn't
   exist) to determine its real size to allocate.  We cannot do it with
   allocation, since we need the internal size words correctly set to 
   allocate the true size. */

	dcl     allocating_array	 (alloc_size) fixed bin (35) based;
	dcl     alloc_size		 fixed bin;	/* currentsize */
	dcl     sizing_array	 (10) fixed bin (35);

/* Entries */

	dcl     area_info_		 entry (ptr, fixed bin (35));
	dcl     error_table_$improper_data_format fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     mdc_$read_disk_table	 entry (ptr, fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
%page;
	if a_version ^= get_vol_list_version then do;
BAD_VERSION:	a_code = error_table_$unimplemented_version;
		return;
	     end;

	if a_area_ptr = null () then
	     area_ptr = get_system_free_area_ ();
	else if valid_area (a_area_ptr) then
	     area_ptr = a_area_ptr;
	else do;
		a_code = error_table_$improper_data_format;
		return;
	     end;

	temp_ptr = null ();

	on cleanup begin;
		if temp_ptr ^= null () then call release_temp_segment_ (entry_name, temp_ptr, code);
	     end;

	call get_temp_segment_ (entry_name, temp_ptr, code);
	if code ^= 0 then do;
		a_code = code;
		return;
	     end;

	dtp = temp_ptr;				/* setup disk_table */
	call mdc_$read_disk_table (dtp, code);
	if code ^= 0 then do;
		a_code = code;
		goto exit;
	     end;

/* Determine if we need to allocate pv_list and lv_list. */

	do i = 1 to dt.max_n_entries;
	     if (dt.array (i).used | dt.array (i).is_sub_vol)
	     then max_pvs = i;

	     if dt.lv_array (i).used = "1"b
	     then max_lvs = i;
	end;

	pv_list_ptr = a_pv_list_ptr;
	lv_list_ptr = a_lv_list_ptr;

	if pv_list_ptr ^= null () then do;
		if pv_list_ptr -> pv_list.version ^= get_vol_list_version then goto BAD_VERSION;
		if pv_list_ptr -> pv_list.pv_name_count ^= max_pvs then do;
			if valid_area (pv_list.area_ptr) then do;
				if ^ai.no_freeing then
				     free pv_list in (pv_list.area_ptr -> areas);
			     end;
			pv_list_ptr = null ();
		     end;
	     end;

	if lv_list_ptr ^= null () then do;
		if pv_list_ptr -> pv_list.version ^= get_vol_list_version then goto BAD_VERSION;
		if lv_list_ptr -> lv_list.lv_name_count ^= max_lvs then do;
			if valid_area (lv_list.area_ptr) then do;
				if ^ai.no_freeing then
				     free lv_list in (lv_list.area_ptr -> areas);
			     end;
			lv_list_ptr = null ();
		     end;
	     end;

/* Allocate space if needed. */

	if pv_list_ptr = null () then do;
		addr (sizing_array) -> pv_list.pv_name_count = max_pvs;
		alloc_size = currentsize (addr (sizing_array) -> pv_list);
		allocate allocating_array in (areas) set (pv_list_ptr);
		pv_list.pv_name_count = max_pvs;
		pv_list.area_ptr = area_ptr;
	     end;

	if lv_list_ptr = null () then do;
		addr (sizing_array) -> lv_list.lv_name_count = max_lvs;
		alloc_size = currentsize (addr (sizing_array) -> lv_list);
		allocate allocating_array in (areas) set (lv_list_ptr);
		lv_list.lv_name_count = max_lvs;
		lv_list.area_ptr = area_ptr;
	     end;

	pv_list.version = get_vol_list_version;
	lv_list.version = get_vol_list_version;

	pv_list.pv_name_max_length = 0;
	do max_pvs = max_pvs by -1 to 1;
	     pv_list.pv_info (max_pvs).used = dt.array (max_pvs).used;
	     pv_list.pv_info (max_pvs).storage_system = dt.array (max_pvs).storage_system;
	     pv_list.pv_info (max_pvs).permanent = dt.array (max_pvs).permanent;
	     pv_list.pv_info (max_pvs).hc_accepted = dt.array (max_pvs).hc_accepted;
	     pv_list.pv_info (max_pvs).rpv = dt.array (max_pvs).rpv;
	     pv_list.pv_info (max_pvs).is_sub_vol = dt.array (max_pvs).is_sub_vol;
	     pv_list.pv_info (max_pvs).num_of_sv = dt.array (max_pvs).num_of_sv;
	     pv_list.pv_info (max_pvs).sv_num = dt.array (max_pvs).sv_num;
	     pv_list.pv_info (max_pvs).device_type = dt.array (max_pvs).device_type;
	     pv_list.pv_info (max_pvs).lvx = dt.array (max_pvs).lvx;
	     pv_list.pv_info (max_pvs).drive_name = dt.array (max_pvs).drive_name;
	     pv_list.pv_info (max_pvs).pvname = dt.array (max_pvs).pvname;
	     if dt.array (max_pvs).used = "1"b then
		pv_list.pv_name_max_length = max (length (rtrim (pv_list.pv_info (max_pvs).pvname)), pv_list.pv_name_max_length);
	end;

	lv_list.lv_name_max_length = 0;
	do max_lvs = max_lvs by -1 to 1;
	     lv_list.lv_info (max_lvs).used = dt.lv_array (max_lvs).used;
	     lv_list.lv_info (max_lvs).hv_mounted = dt.lv_array (max_lvs).hv_mounted;
	     lv_list.lv_info (max_lvs).public = dt.lv_array (max_lvs).public;
	     lv_list.lv_info (max_lvs).mounting = dt.lv_array (max_lvs).mounting;
	     lv_list.lv_info (max_lvs).demounting = dt.lv_array (max_lvs).demounting;
	     lv_list.lv_info (max_lvs).pdirs_ok = dt.lv_array (max_lvs).pdirs_ok;
	     lv_list.lv_info (max_lvs).prev_bootload = dt.lv_array (max_lvs).prev_bootload;
	     lv_list.lv_info (max_lvs).vacate_pdirs = dt.lv_array (max_lvs).vacate_pdirs;
	     lv_list.lv_info (max_lvs).lvname = dt.lv_array (max_lvs).lvname;
	     if dt.lv_array (max_lvs).used = "1"b then
		lv_list.lv_name_max_length = max (length (rtrim (lv_list.lv_info (max_lvs).lvname)), lv_list.lv_name_max_length);
	end;


/* Cleanup and exit routine. */

exit:	call release_temp_segment_ (entry_name, temp_ptr, code);
	a_pv_list_ptr = pv_list_ptr;
	a_lv_list_ptr = lv_list_ptr;
	return;

valid_area:
     proc (area_ptr) returns (bit (1));

/* validates and area and leaves area information in ai. */

	dcl     area_ptr		 ptr;

	unspec (ai) = "0"b;
	ai.version = area_info_version_1;
	ai.areap = area_ptr;
	call area_info_ (addr (ai), code);
	if code ^= 0 then
	     return ("0"b);
	if ai.version_of_area ^= ai.version then
	     return ("0"b);
	return ("1"b);
     end valid_area;
%page;
%include get_vol_list_;
%include disk_table;
%include area_info;
     end get_vol_list_;
