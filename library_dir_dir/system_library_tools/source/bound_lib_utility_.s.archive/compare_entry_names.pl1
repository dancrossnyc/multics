/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compare_entry_names: cen: proc;

	/*  Modified 02/05/79: P. B. Kelley - to fix uninitialized pointer bug	*/

dcl  area area based (Parea);
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl (Larg, N1, N2, j, k) fixed bin;
dcl (Parg, Parea int static init (null), Pn1, Pn2) ptr;
dcl (head_sw, ok_switch) bit (1) aligned;
dcl (addr, null, ptr) builtin;
dcl  com_err_ ext entry options (variable);
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_equal_name_ entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  ioa_ entry options (variable);
dcl  hcs_$status_long ext entry (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35));
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl 1 branch1 aligned,				/*  for old segment status  */
    (2 type bit (2),
    2 nnames bit (16),
    2 nrp bit (18),
    2 padding bit (288),
    2 uid bit (36)) unaligned;			/* need uid to make sure segs are different  */
dcl 1 branch2 aligned,				/*  for new segment status  */
    (2 type bit (2),
    2 nnames bit (16),
    2 nrp bit (18),
    2 padding bit (288),
    2 uid bit (36)) unaligned;			/* need uid to make sure segs are different  */
dcl  names1 (N1) char (32) aligned based (Pn1);
dcl  names2 (N2) char (32) aligned based (Pn2);
dcl 1 over_names2 (N2) aligned based (Pn2),		/* overlay for names2. */
    2 value2 fixed bin (35),
    2 pad (7) fixed bin (35);
dcl  arg char (Larg) based (Parg);
dcl (error_table_$sameseg, error_table_$noalloc) ext static fixed bin (35);
dcl (dname1, dname2) char (168) aligned;
dcl (ename1, ename2) char (32) aligned;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/*	make sure we have an allocation area, and establish a cleanup on-unit.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Pn1 = null;				/* set to null to begin with */
	Pn2 = null;				/*  ""		         */

	if Parea = null then
	     Parea = get_system_free_area_ ();		/* get an allocation area.			*/
	on cleanup call cleaner;

	call cu_$arg_ptr (1, Parg, Larg, code);		/*  pick up first arg   */
	if code ^= 0 then goto common_error;

	call expand_path_ (Parg, Larg, addr (dname1), addr (ename1), code);
	if code ^= 0 then goto common_error;


	call cu_$arg_ptr (2, Parg, Larg, code);		/*  pick up second arg  */
	if code ^= 0 then goto common_error;

	call expand_path_ (Parg, Larg, addr (dname2), addr (ename2), code);
	if code ^= 0 then goto common_error;

	call get_equal_name_ (ename1, ename2, ename2, code);
	if code ^= 0 then goto common_error;

	call hcs_$status_long (dname1, ename1, 1b, addr (branch1), Parea, code); /* pick up entrynames for old seg */
	if code ^= 0 then do;
	     call com_err_ (code, "compare_entry_names", "^a>^a", dname1, ename1);
	     return;
	end;
	Pn1 = ptr (Parea, branch1.nrp);
	N1 = fixed (branch1.nnames);

	call hcs_$status_long (dname2, ename2, 1b, addr (branch2), Parea, code); /* pick up entry names for new seg */
	if code ^= 0 then do;
	     call com_err_ (code, "compare_entry_names", "^a>^a", dname2, ename2);
	     call cleaner;
	     return;
	end;
	Pn2 = ptr (Parea, branch2.nrp);
	N2 = fixed (branch2.nnames);

	if branch1.uid = branch2.uid then do;		/* the segments are the same... */
	     code = error_table_$sameseg;		/*     complain  */
	     call cleaner;
	     goto common_error;
	end;

	ok_switch = "0"b;
	head_sw = "1"b;
	do j = 1 to N1;				/* find any names deleted from old segment */
	     do k = 1 to N2;
		if value2 (k) = -1 then;		/* if 2nd name matches one in 1st array, skip it. */
		else if names1 (j) = names2 (k) then do;
		     value2 (k) = -1;		/* mark the name in the 2nd array as non-unique */
		     go to next_name1;
		end;
	     end;

	     if head_sw then do;			/* let user know which segment  */
		call ioa_ ("^/Names unique to ^a>^a", dname1, ename1);
		head_sw = "0"b;
		ok_switch = "1"b;
	     end;

	     call ioa_ ("^2x^a", names1 (j));		/* print names deleted from old segment */

next_name1: end;

	head_sw = "1"b;
	do k = 1 to N2;				/* find any names added to new segment */
	     if value2 (k) = -1 then			/* name matches one in 1st name array. */
		go to next_name2;
	     if head_sw then do;			/* let user know which segment */
		call ioa_ ("^/Names unique to ^a>^a", dname2, ename2);
		head_sw = "0"b;
		ok_switch = "1"b;
	     end;

	     call ioa_ ("^2x^a", names2 (k));		/* print unique names on new segment */

next_name2: end;

	if ok_switch then
	     call ioa_ ("^/Comparison finished.^/");
	else
	     call ioa_ ("Entry names are identical.^/");
	call cleaner;
	return;


common_error: call com_err_ (code, "compare_entry_names");	/*  for error in external calls  */
	return;


cleaner:	procedure;

	     if Pn1 ^= null then free names1 in (area);
	     if Pn2 ^= null then free names2 in (area);

	end cleaner;


     end compare_entry_names;
