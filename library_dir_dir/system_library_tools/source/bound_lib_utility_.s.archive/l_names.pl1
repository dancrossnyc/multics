/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* MCR 4232 Add name l_names 12/13/79 S. Herbst */

l_names: lnames: proc;

/* This procedure either copies ($copy) or moves ($move) all
   the additional names from one segment to another designated
   segment. A copy is obviously impossible within a directory.
   Any number of pairs of arguments is allowed and the =-convention
   is followed in the second argument of a pair.

   Karolyn Martin 5/30/69 */
/* modified by M. Weaver 9 April 1970 6:35 PM -- recoded into PL/I */
/* last modified by M. Weaver 31 December 1970 */



dcl (copy, errsw) bit (1) aligned,
    (lng, i, n) fixed bin,
    (dir1, dir2) char (168),
    (en1, en2, qent) char (32),
     ap ptr;
dcl  name char (lng) based (ap);
dcl  whoami char (32);
dcl  code fixed bin (35);
dcl  type fixed bin (2);
dcl  bitcnt fixed bin (24);
dcl  addr builtin;
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  error_table_$namedup external fixed bin (35);
dcl  error_table_$segnamedup external fixed bin (35);
dcl  get_wdir_ entry returns (char (168));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  installation_tools_$copy_names_ entry
    (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  installation_tools_$move_names_ entry
    (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35)),
     cu_$arg_count entry (fixed bin);

copy:	entry;

/* The additional names are to be left on the original segment. */

	copy = "1"b;
	whoami = "l_names$copy";
	go to work;

move:	entry;

/* The additional names are to be removed from the original segment. */

	copy = "0"b;
	whoami = "l_names$move";

work:	call cu_$arg_count (n);
	if n = 0 then return;

/* The following master loop processes each pair of arguments completely
   unless some error code is returned by the file system. */

pairs:	do i = 1 to n by 2;

/* get first arg */
	     call cu_$arg_ptr (i, ap, lng, code);
	     if code ^= 0 then do;
err1:		call com_err_ (code, whoami, "arg ^d", i);
		go to next_pair;
	     end;
	     call expand_pathname_ (name, dir1, en1, code);
	     if code ^= 0 then go to err1;

/* get second arg */
	     if i = n then do;
		en2 = en1;			/* have odd no. of args */
		dir2 = get_wdir_ ();
	     end;
	     else do;
		call cu_$arg_ptr (i+1, ap, lng, code);
		if code ^= 0 then do;
err2:		     call com_err_ (code, whoami, "arg ^d", i);
		     go to next_pair;
		end;
		call expand_pathname_ (name, dir2, qent, code);
		if code ^= 0 then go to err2;
		call get_equal_name_ (en1, qent, en2, code);
		if code ^= 0 then go to err2;
	     end;


/* Does target segment exist?? */

	     call hcs_$status_minf (dir2, en2, 0, type, bitcnt, code);
	     if code ^= 0 then go to errseg2;

/* If so, then move the names. */

	     if copy then do;
		call installation_tools_$copy_names_ (dir1, en1, dir2, en2, whoami, errsw, code);
		if code ^= 0 then do;		/* if there's an error */
com_err:		     if code ^= error_table_$namedup then if code ^= error_table_$segnamedup then do;
			     if ^errsw then call com_err_ (code, whoami, "^a>^a", dir1, en1);
			     else do;
errseg2:				call com_err_ (code, whoami, "^a>^a", dir2, en2);
				go to next_pair;
			     end;
			end;
		end;
	     end;


	     else do;
		call installation_tools_$move_names_ (dir1, en1, dir2, en2, whoami, errsw, code);
		if code ^= 0 then go to com_err;
	     end;


next_pair: end pairs;

     end l_names;
