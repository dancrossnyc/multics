/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



test_archive: ta: proc;

/* Command based on archive processing in "bindarchive" command,
   by C Garman, from modifications made to original of
   C Garman by E Stone. */

dcl fix_old bit(1) aligned;

	fix_old = "0"b;		/* Look but don't touch */
	go to startup;

fix_old_archive: foa: entry;	/* Play a few games with contents, on the fly */

	fix_old = "1"b;
	go to startup;

dcl (archive_data_$header_begin,
     archive_data_$ident,
     archive_data_$header_end) char(8) aligned ext;

dcl (error_table_$entlong,
     error_table_$noarg) fixed bin ext;

dcl outnamep ptr,
    arglen fixed bin,
    outname char(arglen) unaligned based(outnamep);

dcl (first bit(1) init("0"b),
     com_name char(16) init("test_archive"),
     (h1, i1, e1) char(8)) aligned int static;	/* copies of archive_data_$--- */

declare 1 archd based aligned,
	2 begin char(8),
	2 name_count char(4),
	2 name char(32),
	2 arc_time char(16),
	2 mode char(4),
	2 seg_time char(20),
	2 bit_count char(8),
	2 end char(8);

dcl (path char(168),
     entarc char(40),
     cur_name char(32),
     type char(8),
     old char(2),
     s char(1),
     c0 char(0)) aligned,
    (i, ibc, ignore, ntharg, nwords, some_old, some_num) fixed bin, 	/* misc numbers */
    code fixed bin(35),
    (pathp, entropy,
     cur_ptr) ptr,
    hdr_length fixed bin int static init(25),
    cur_hdr fixed bin;

dcl (com_err_, ioa_, ioa_$rsnnl) entry options(variable),
    cu_$arg_ptr entry(fixed bin, ptr, fixed bin, fixed bin(35)),
    cv_dec_check_ entry(char(*) aligned, fixed bin(35), fixed bin),
    expand_path_ entry(ptr, fixed bin, ptr, ptr, fixed bin(35)),
    hcs_$initiate_count entry(char(*) aligned, char(*) aligned, char(*) aligned, fixed bin, fixed bin, ptr, fixed bin(35)),
    hcs_$terminate_noname entry(ptr, fixed bin(35));

dcl (addr, char, divide, index, null, ptr, substr) builtin;

/*  */

startup:
	if first = "0"b
	then do;

	     h1 = archive_data_$header_begin;	/* make copies of values in archive_data_ */
	     i1 = archive_data_$ident;
	     e1 = archive_data_$header_end;

	     first = "1"b;

	     end;

	pathp = addr(path);			/* get miscellaneous pointers */
	entropy = addr(entarc);

	ntharg = 0;

arg_loop:
	ntharg = ntharg + 1;

	/* Get name of archive segment. */

	call cu_$arg_ptr(ntharg, outnamep, arglen, code); 	/* get argument */
	if code ^= 0
	then if code = error_table_$noarg
	     then go to abort_args;
	     else go to arg_error;

	if arglen = 0
	then go to arg_loop;

	call expand_path_(outnamep, arglen, pathp, entropy, code);	/* get directory and entry name of argument */
	if code ^= 0
	then do; 
arg_error:
	     call com_err_(code, com_name, outname);
	     go to arg_loop;

	     end;

	substr(entarc, 33, 8) = (8)" ";
	if index(entarc, ".archive ") = 0
	then do;

	     call ioa_$rsnnl("^a.archive", entarc, code, entarc);	/* Add suffix if not provided */
	     if code >= 33			/* Check length of resultant */
	     then do;

		code = error_table_$entlong;
		go to arg_error;

		end;

	     end;

	call hcs_$initiate_count(path, entarc, c0, nwords, 1, cur_ptr, code);
		/* initiate archive segment */

	if cur_ptr = null
	then do;

	     call com_err_(code, com_name, "^R^a>^a^B", path, entarc);
	     go to arg_loop;

	     end;

	call ioa_("^/^a>^a^/", path, entarc); 		/* print name of segment to be tested */

/* Initialize per-archive variables */

	nwords = divide(nwords + 35, 36, 17, 0);	/* convert bit-count to number of words */

	cur_name = "S_T_A_R_T_";
	cur_hdr = 0;

	if nwords <= hdr_length		/* Segment must be at least 26 words long */
	then go to pt_nwords;

	some_old, some_num = 0b;

	do i = 0 by 1 while (cur_hdr < nwords); 	/* loop until end of archive seg found */

	cur_ptr = ptr(cur_ptr, cur_hdr); 		/* get pointer to current archive block */

	old = "  ";				/* Assume new style format (first char is FF) */

	if cur_ptr -> archd.begin ^= i1		/* check validity of archive header */
	then do;					/* Error in archive header */

	     if cur_ptr -> archd.begin = h1
	     then do;

		old = " *";			/* Comment on old-style header (VT) and continue */
		some_old = some_old + 1;
		go to check_end;

		end;

	     type = "ident   ";
arc_err:	     call ioa_("Archive format error(^a) after ""^a"", ""cur_ptr"" = ^p",
		type, cur_name, cur_ptr);

	     go to arg_loop;		/* Look at next arg, leave current archive known */

	     end;

check_end:
	if cur_ptr -> archd.end ^= e1
	then do;

	     type = "fence   ";
	     go to arc_err;

	     end;

	cur_name = cur_ptr -> archd.name;

	call cv_dec_check_(cur_ptr -> archd.bit_count, code, ibc);
				/* get bit-count of i-th component from archive header */
	if code ^= 0
	then call com_err_(0, com_name, "Non-decimal-digit in character # ^d in ""^8a""",
		code, cur_ptr -> archd.bit_count);
	if ibc < 0
	then do;

	     type = "-count  ";
	     go to arc_err;

	     end;

	if substr(cur_ptr -> archd.bit_count, 8, 1) = " "
	then if old = "  "
	     then do;

		old = " #";
		some_num = some_num + 1;

		end;

	call ioa_("^6o^a^-^a", cur_hdr, old, cur_name);

	if fix_old
	then do;

	     if old = " *"			/* Very, very old */
	     then cur_ptr -> archd.begin = i1;

	     if cur_ptr -> archd.name_count ^= "    "
	     then cur_ptr -> archd.name_count = "    ";

	     if char(cur_ptr -> archd.mode, 1) ^= "r"
	     then if index (cur_ptr -> name, ".") ^= 0
		then cur_ptr -> archd.mode = "r wa";
		else cur_ptr -> archd.mode = "re  ";

	     if char(cur_ptr -> archd.arc_time, 4) = "    "
	     then cur_ptr -> archd.arc_time = cur_ptr -> archd.seg_time;

	     if substr(cur_ptr -> archd.bit_count, 8, 1) = " "
	     then cur_ptr -> archd.bit_count = " " || char(cur_ptr -> archd.bit_count, 7);

	     ignore = index(cur_ptr -> archd.name, ".epl");

	     if ignore ^= 0
	     then if substr(cur_ptr -> archd.name, ignore + 4, 3) ^= "bsa"
		then substr(cur_ptr -> archd.name, ignore, 4) = ".pl1";
		else substr(cur_ptr -> archd.name, ignore, 7) = ".alm   ";

	     end;

	cur_hdr = cur_hdr + divide(ibc + 35, 36, 17, 0) + hdr_length;

	end;				/* end of iteration loop for contents of archive file */

	if i = 1
	then s = " ";
	else s = "s";
	call ioa_("^/^6o words, ^d component^a.", cur_hdr, i, s);

	if some_old ^= 0
	then call ioa_("(""*"" indicates very old archive, with VT instead of FF as first character of header!)");

	if some_num ^= 0
	then call ioa_("(""#"" indicates trailing blank in bit-count field)");

	if cur_hdr ^= nwords
	then /* ! */
pt_nwords:
	     call ioa_("""nwords"" = ^o(8), ""cur_hdr"" = ^o after ^p",
		nwords, cur_hdr, cur_ptr);
	else call hcs_$terminate_noname(cur_ptr, code);

	go to arg_loop;

abort_args: /* return */
	call ioa_("");		/* Print out 1 blank line */

end test_archive;
