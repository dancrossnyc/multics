/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_primary_name_: procedure (P_dname, P_ename, P_found_ename, P_code);

/* *	GET_PRIMARY_NAME_
   *
   *	This routine is used by get_library_segment to search through new format (1972)
   *	Multics online and offline libraries. It looks for the segment or archive component
   *	called P_ename, in the P_dname directory. If it finds it, it returns the primary
   *	name of the segment it found in P_found_ename, and returns P_code as zero. If it
   *	doesn't find it, but had no problems looking, it returns P_code as 1 and leaves
   *	P_found_ename alone, to cause get_library_segment to keep looking. Otherwise, if
   *	it encounters an error searching, it returns the error code.
   *
   *	The search_archives entrypoint additionally looks through all the archives in the
   *	directory, in case the component names are not on the archives (as is the case for
   *	the CISL Development Machine libraries, for instance).
   *
   *	Written 08/07/72, by Gary C. Dixon
   *	Rewritten, to add $search_archives, 03/25/81, W. Olin Sibert
   */

dcl  P_dname char (*) parameter;			/* pathname of the directory to be searched. (Input) */
dcl  P_ename char (*) parameter;			/* entryname of the entry to be found. (Input) */
dcl  P_found_ename char (*) parameter;			/* primary name of the found entry. (Output) */
dcl  P_code fixed bin (35) parameter;			/* status code. (Output) */

dcl  dname char (168);
dcl  ename char (32);
dcl  code fixed bin (35);
dcl  first_error fixed bin (35);
dcl  search_sw bit (1) aligned;
dcl  idx fixed bin;
dcl  archive_ptr pointer;
dcl  archive_bc fixed bin (24);

dcl 1 status_buffer aligned like status_branch automatic;

dcl  status_area area aligned based (status_area_ptr);

dcl  archive_$get_component entry (pointer, fixed bin (24), char (*), pointer, fixed bin(24), fixed bin(35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), pointer, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), pointer, fixed bin, pointer, pointer, fixed bin (35));
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), pointer, pointer, fixed bin (35));
dcl  hcs_$terminate_noname entry (pointer, fixed bin (35));

dcl  error_table_$no_component fixed bin (35) external static;
dcl  error_table_$noentry fixed bin (35) external static;
dcl  error_table_$nomatch fixed bin (35) external static;

dcl  cleanup condition;

dcl (addr, null, sum, unspec, pointer) builtin;

/*  */

	search_sw = "0"b;				/* Just look at names, don't search archives */
	goto COMMON;


get_primary_name_$search_archives: entry (P_dname, P_ename, P_found_ename, P_code);

/* *	Entry to search all archives in the directory if it doesn't find what it
   *	wants when just looking up the name. */

	search_sw = "1"b;
	goto COMMON;


COMMON:	dname = P_dname;
	ename = P_ename;

	status_area_ptr = get_system_free_area_ ();
	status_ptr = addr (status_buffer);
	unspec (status_buffer) = ""b;
	star_names_ptr = null ();
	star_entry_ptr = null ();
	archive_ptr = null ();

	on condition (cleanup)
	     call clean_up ();

	call hcs_$status_ (dname, ename, 1, status_ptr, status_area_ptr, code);
	if code = 0 then do;			/* Found it */
	     P_found_ename = status_entry_names (1);
	     goto FINISHED;
	     end;

	else if code ^= error_table_$noentry then	/* An error. Just abort */
	     goto FINISHED;

	else if ^search_sw then do;			/* If we're not to search, just set code to 1 */
NOT_FOUND:     code = 1;
	     goto FINISHED; 			/* and finish */
	     end;

/*  */

	call hcs_$star_ (dname, "**.archive", star_ALL_ENTRIES, status_area_ptr,
	     star_entry_count, star_entry_ptr, star_names_ptr, code);

	if code = error_table_$nomatch then goto NOT_FOUND; /* Nothing there to look through -- not an error */
	else if code ^= 0 then goto FINISHED;		/* Treat anything else as an error */

	first_error = 0;				/* Set to nonzero by the first error */
	do idx = 1 to star_entry_count;		/* Loop through all the archives */
	     call hcs_$initiate_count (dname, star_names (star_entries (idx).nindex), "",
		archive_bc, 0, archive_ptr, code);
	     if archive_ptr = null () then do;		/* Just ignore errors searching archives */
		if first_error = 0 then		/* remember any errors other than not-found */
		     if code ^= error_table_$noentry then first_error = code;
		goto NEXT_ARCHIVE;
		end;

	     call archive_$get_component (archive_ptr, archive_bc, ename, (null ()), (0), code);
	     if code = 0 then do;			/* Found it */
		P_found_ename = star_names (star_entries (idx).nindex); /* Set the return name */
		goto FINISHED;			/* and finish up */
		end;

	     else if (code ^= error_table_$no_component) & (first_error = 0) then
		first_error = code; 		/* If a format error, etc., remember it */

	     call hcs_$terminate_noname (archive_ptr, (0)); /* Forget about this one */

NEXT_ARCHIVE:
	     end; 				/* of loop through possible archives */

	if first_error = 0 then			/* Didn't find it, anywhere, but had no problems looking */
	     code = 1;				/* indicate, and fall through */
	else code = first_error;			/* Otherwise, return the code for the first problem */


FINISHED:
	P_code = code;
	call clean_up ();
	return;

/*  */

clean_up: proc ();

/* Cleanup procedure */

	if status_branch.names_relp ^= ""b then
	     free status_entry_names in (status_area);
	if star_names_ptr ^= null () then
	     free star_names in (status_area);
	if star_entry_ptr ^= null () then
	     free star_entries in (status_area);
	if archive_ptr ^= null () then
	     call hcs_$terminate_noname (archive_ptr, (0));

	return;
	end clean_up;

%page; %include status_structures;
%page; %include star_structures;

	end get_primary_name_;
