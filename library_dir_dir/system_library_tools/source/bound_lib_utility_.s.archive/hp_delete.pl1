/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Delete a segment or directory (including inferior segments/links/directories)
   regardless of logical volume mounting, connection failure, etc. */

/* Last modified:
   April 1979 by D. Spector: created
*/

hp_delete:
hpdl:
     procedure;

/* AUTOMATIC */

	declare answer		 char (3) varying;
	declare area_ptr		 ptr;
	declare argl		 fixed binary;
	declare argp		 ptr;
	declare code		 fixed binary (35);
	declare count		 fixed binary;
	declare dirname		 char (168);
	declare entryname		 char (32);
	declare i			 fixed binary;
	declare pathname		 char (168);
	declare type		 fixed binary (2);

%include query_info;

/* EXTERNAL */

	declare absolute_pathname_	 entry (char (*), char (*), fixed binary (35));
	declare com_err_		 entry options (variable);
	declare com_err_$suppress_name entry options (variable);
	declare command_query_	 entry options (variable);
	declare cu_$arg_count	 entry (fixed binary);
	declare cu_$arg_ptr		 entry (fixed binary, ptr, fixed binary, fixed binary (35));
	declare error_table_$link	 external fixed binary (35);
	declare error_table_$moderr	 external fixed binary (35);
	declare error_table_$nomatch	 external fixed binary (35);
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed binary (35));
	declare get_system_free_area_	 entry () returns (ptr);
	declare hcs_$star_		 entry (char (*), char (*), fixed binary (2), ptr, fixed binary, ptr, ptr,
				 fixed binary (35));
	declare hcs_$status_minf	 entry (char (*), char (*), fixed binary (1), fixed binary (2), fixed binary (24),
				 fixed binary (35));
	declare hcs_$terminate_file	 entry (char (*), char (*), fixed binary (1), fixed binary (35));
	declare hphcs_$delentry_file	 entry (char (*), char (*), fixed binary (35));
	declare system_privilege_$check_mode_reset
				 entry (char (*), char (*), fixed binary (35));

/* BUILTIN */

	declare (addr, null, rtrim)	 builtin;

/* MISCELLANEOUS */

	declare arg		 char (argl) based (argp);
	declare cleanup		 condition;
	declare linkage_error	 condition;
	declare me		 char (32) initial ("hp_delete") internal static options (constant);

/* Start of command */

/* Set up handler for insufficient access to gates */

	on linkage_error
	     begin;
		call com_err_ (error_table_$moderr, me, "hphcs_ and/or system_privilege_");
		go to quit;
	     end;

/* Make sure there is one argument */

	call cu_$arg_count (count);
	if count ^= 1
	then do;
		call com_err_$suppress_name (0, me, "Usage: ^a pathname", me);
		return;
	     end;

/* Get the pathname argument */

	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0
	then go to error;

/* Find branch type */

	call expand_pathname_ (arg, dirname, entryname, code);
	if code ^= 0
	then go to error;
	call absolute_pathname_ (arg, pathname, (0));
	call hcs_$status_minf (dirname, entryname, 0, type, (0), code);
	if code ^= 0
	then go to error;

/* Refuse to delete links due to ambiguity of chasing */

	if type = 0				/* Link */
	then do;
		call com_err_ (error_table_$link, me, "^a.", pathname);
		return;
	     end;

/* Query user whether to go ahead with deletion */

	query_info.version = query_info_version_4;
	query_info.yes_or_no_sw = "1"b;
	query_info.suppress_name_sw = "1"b;
	call command_query_ (addr (query_info), answer, me, "Do you really want to delete the^[ segment^; directory^] ^a ?",
	     type = 1, pathname);
	if answer ^= "yes"				/* Note dependency on English! */
	then return;

/* Do the deletion */

	area_ptr = get_system_free_area_ ();		/* For hcs_$star_ */
	call delete_branch (dirname, entryname, type);

/* Done */

	return;

/* Error handling */

error:
	call com_err_ (code, me, "^a.", arg);
quit:
	return;

/* Subroutines */

/* Delete a branch (seg, dir, or link) */

delete_branch:
     procedure (dirname, entryname, type);

	declare dirname		 char (168);
	declare entryname		 char (32);
	declare type		 fixed binary (2);

	declare 1 entries		 (entry_count) aligned based (entry_ptr),
		2 type		 fixed binary (2) unsigned unaligned,
		2 nnames		 fixed binary (16) unsigned unaligned,
		2 nindex		 fixed binary (18) unsigned unaligned;
	declare entry_count		 fixed binary;
	declare entry_ptr		 ptr;
	declare i			 fixed binary;
	declare n_ptr		 ptr;
	declare names		 (100) char (32) based (n_ptr);
	declare pathname		 char (168);

/* Construct pathname */

	if dirname = ">"
	then pathname = ">" || entryname;
	else pathname = rtrim (dirname) || ">" || entryname;

/* Reset security_out_of_service switch if set */

	if type = 2				/* Directory */
	then call system_privilege_$check_mode_reset (dirname, entryname, (0));

/* Delete the branch */

	if type = 2				/* Directory */
						/* Delete the contents of a directory */
	then do;

/* Handle errors and quit/release */

		entry_ptr = null;
		n_ptr = null;
		on cleanup
		     call clean;			/* Free allocated storage */

/* Find all entrynames in this directory */

		call hcs_$star_ (pathname, "**", 3, area_ptr, entry_count, entry_ptr, n_ptr, code);
		if code ^= 0
		then if code ^= error_table_$nomatch
		     then do;
			     call com_err_ (code, me, pathname);
			     go to quit;
			end;

/* Delete all branches contained in this directory */

		do i = 1 to entry_count;
		     call delete_branch (pathname, names (entries (i).nindex), (entries (i).type));
		end;

/* Clean up process changes caused by hcs_$star_ */

		call clean;			/* Free allocated storage */
		call hcs_$terminate_file (dirname, entryname, 0, (0));
	     end;

/* Delete the segment itself */

	call hphcs_$delentry_file (dirname, entryname, code);
	if code ^= 0
	then do;
		call com_err_ (code, me, pathname);
		go to quit;
	     end;
	return;

/* Subroutine to free storage used by hcs_$star_ */

clean:
     procedure;
	if entry_ptr ^= null
	then free entries;
	if n_ptr ^= null
	then free names;
	return;
     end;						/* clean */

     end;						/* delete_branch */

     end;						/* hp_delete */
