
/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name:  vfile_find_bad_nodes						*/
	/*									*/
	/*      This is a procedure for checking the consistency of the key-containing		*/
	/* components of a vfile_ indexed file.						*/
	/*									*/
	/* Status									*/
	/*									*/
	/* 0) Created:   July, 1981 by  G.C. Dixon					*/
	/* 1) Modified:  May, 1983 by G.C. Dixon to add node_tree checking.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
vfile_find_bad_nodes:
	proc;

     dcl	Iarg			fixed bin,
	Ibranch			fixed bin,
	Ifn			fixed bin,
	Imode			fixed bin,
	Inode			fixed bin,
	Larg			fixed bin(21),
	Lnode_bit_overlay		fixed bin,
	Lop			fixed bin(21),
	Lread			fixed bin(21),
	Lret			fixed bin(21),
	LINE			char(256),
	Nargs			fixed bin,
	Nbad_nodes		fixed bin,
	Nbad_nodes_in_comp		fixed bin,
	Nkeys			fixed bin(34),
	Nkey_bytes		fixed bin(34),
	Nkey_bytes_in_node		fixed bin,
	Nnon_empty_nodes		fixed bin,
	Parg			ptr,
	Pfn			ptr,
	Pfree_nodes		ptr,
	Piocb			ptr,
	Piocb_node_tree		ptr,
         (Pnode1, Pnode2)		ptr,
	Pnode_array		ptr,
	Pnode_bit_overlay		ptr,
	Pop			ptr,
	Pret			ptr,
	Sattached			bit(1),
	Scommand			bit(1),
	Sinput_switch		bit(1),
	1 Smode			aligned,
	 (2 node_branch,
	  2 key_region,
	  2 key_loc,
	  2 key_overlap,
	  2 key_order,
	  2 node_tree,
	  2 bad_mode_name,
	  2 bad_mode_value)		bit(1) unal,
	Sopened			bit(1),
	Spathname			bit(1),
	Srequest_loop		bit(1),
	Stotal			bit(1),
	1 branch_numb_key		aligned like numb_key,
	code			fixed bin(35),
	comp_num			fixed bin,
	input_switch_name		char(32),
	key			char(256) varying,
	line			char(256) varying,
	mode_string		char(256),	/* This mode string is only used in calls to	*/
						/*   com_err_, so 256 chars is long enough.	*/
	node_bits			bit(4096) unal,
	1 numb_key		aligned,
	  2 comp			fixed bin(17) unal,
	  2 node			fixed bin(18) uns unal,
	pathname			char(168) varying,
	pos_frame (4)		ptr,
	pos_ptr			ptr,
	1 root_numb_key		aligned like numb_key,
	save_numb_key_numb		fixed bin(35),
	temp_comp_num		fixed bin,
	unique			char(15);

     dcl	area			area based(Parea),
	arg			char(Larg) based(Parg),
	branch_numb_key_numb	fixed bin(35) based (addr(branch_numb_key)),
	branch_numb_key_str		char(4) aligned based(addr(branch_numb_key_numb)),
	1 fn			aligned based(Pfn), /* a free node, containing a list of other free	*/
						/*   nodes.				*/
	  2 N			fixed bin,	/* number free nodes listed in this node.	*/
	  2 next_free_node_designator fixed bin(35),	/* record descriptor of next free node list.	*/
	  2 node (0 refer (fn.N))	fixed bin(35),	/* record descriptors of free nodes in this list. */
	1 free_nodes		aligned based(Pfree_nodes),
	  2 N			fixed bin,	/* array of pointers to free nodes or free node 	*/
	  2 node (0 refer (free_nodes.N))
				ptr,		/*   lists.				*/
	node_array (255)		char(4096) aligned based(Pnode_array),
	node_bit_array (4096)	bit(1) unal based (addr(node_bits)),
	node_bit_overlay		bit(Lnode_bit_overlay) based(Pnode_bit_overlay),
	numb_key_numb		fixed bin(35) based(addr(numb_key)),
	numb_key_str		char(4) aligned based(addr(numb_key)),
	op			char(Lop) based(Pop),
	open_descrip		char(100) varying based,
	ret			char(Lret) varying based(Pret),
	root_numb_key_numb		fixed bin(35) aligned based(addr(root_numb_key));

     dcl (char, currentsize, dimension, hbound, index, 
          lbound, ltrim, mod, rtrim)	builtin;

     dcl (cleanup, program_interrupt)	condition;

     dcl  active_fnc_err_		entry() options(variable),
	arg_ptr			entry (fixed bin, ptr, fixed bin(21), fixed bin(35)) variable,
	com_err_			entry() options(variable),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$af_arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$cp			entry (ptr, fixed bin(21), fixed bin(35)),
	delete_$path		entry (char(*), char(*), bit(6), char(*), fixed bin(35)),
	err			entry options(variable) variable,
	get_pdir_			entry() returns(char(168)),
	get_system_free_area_	entry() returns(ptr),
	get_temp_segment_		entry (char(*), ptr, fixed bin(35)),
	ioa_			entry() options(variable),
	ioa_$nnl			entry() options(variable),
	iox_$attach_name		entry (char(*), ptr, char(*), ptr, fixed bin(35)),
	iox_$close		entry (ptr, fixed bin(35)),
	iox_$control		entry (ptr, char(*), ptr, fixed bin(35)),
	iox_$detach_iocb		entry (ptr, fixed bin(35)),
	iox_$destroy_iocb		entry (ptr, fixed bin(35)),
	iox_$get_line		entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35)),
	iox_$look_iocb		entry (char(*), ptr, fixed bin(35)),
	iox_$open			entry (ptr, fixed bin, bit(1) aligned, fixed bin(35)),
	iox_$position		entry (ptr, fixed bin, fixed bin(21), fixed bin(35)),
	iox_$read_key		entry (ptr, char(256) varying, fixed bin(21), fixed bin(35)),
	mode_string_$get_error	entry (ptr, char(*), fixed bin(35)),
	mode_string_$parse		entry (char(*), ptr, ptr, fixed bin(35)),
	pathname_			entry (char(*), char(*)) returns(char(168)),
	release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
	unique_chars_		entry (bit(*)) returns(char(15));

     dcl (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	HT_SP			char(2) int static options(constant) init("	 "),
	HT_SP_NL			char(3) int static options(constant) init("	 
"),
	Parea			ptr int static init(null),
         (error_table_$bad_mode,
	error_table_$bad_mode_value,
	error_table_$badopt,
	error_table_$inconsistent,
	error_table_$key_duplication,
	error_table_$noarg,
	error_table_$not_attached,
	error_table_$unimplemented_version,
	error_table_$wrong_no_of_args)
				fixed bin(35) ext static,
	iox_$user_input		ptr external static,
	proc			char(20) int static options(constant) init("vfile_find_bad_nodes");

	Pfree_nodes = null;				/* Initialize variables for cleanup on unit.	*/
	Piocb = null;
	Piocb_node_tree = null;
	Sattached = FALSE;
	Sopened = FALSE;
	mode_string_info_ptr = null;
	on cleanup call janitor();

	Sinput_switch = FALSE;			/* Initialize variables used to process args.	*/
	Spathname = FALSE;
	input_switch_name = "";
	pathname = "";
	Smode = FALSE;
	Smode.node_branch = TRUE;
	Smode.key_region = TRUE;
	Smode.key_loc = TRUE;

	call cu_$af_return_arg (Nargs, Pret, Lret, code); /* Called as a command, or as an af?		*/
	if code = 0 then do;
	     Scommand = FALSE;
	     Srequest_loop = FALSE;
	     arg_ptr = cu_$af_arg_ptr;
	     err = active_fnc_err_;
	     end;
	else do;
	     Scommand = TRUE;
	     Srequest_loop = TRUE;
	     arg_ptr = cu_$arg_ptr;
	     err = com_err_;
	     end;

	do Iarg = 1 to Nargs;			/* Process arguments.			*/
	     call arg_ptr (Iarg, Parg, Larg, code);

	     if arg = "-input_switch" | arg = "-isw" then do;
		if Spathname then do;
		     call err (error_table_$inconsistent, proc, "^a
Usage:	vfile_find_bad_nodes {pathname}
   or:	vfile_find_bad_nodes -input_switch switch_name", arg);
		     go to FINISH;
		     end;
		Iarg = Iarg + 1;
		if Iarg > Nargs then do;
		     call err (error_table_$noarg, proc, "
^a requires an I/O switch name as its operand.  The switch must be 
attached to the keyed file.  If open, the switch must be opened for
^a or ^a.", arg, iox_modes(Keyed_sequential_input), iox_modes(Keyed_sequential_update));
		     go to FINISH;
		     end;
		call arg_ptr (Iarg, Pop, Lop, code);
		input_switch_name = op;
		Sinput_switch = TRUE;
		end;

	     else if arg = "-request_loop" | arg = "-rql" then
		Srequest_loop = TRUE;

	     else if arg = "-no_request_loop" | arg = "-nrql" then
		Srequest_loop = FALSE;

	     else if arg = "-check" | arg = "-ck" then do;
		Iarg = Iarg + 1;
		if Iarg > Nargs then do;
		     call err (error_table_$noarg, proc, "
^a requires a mode string as its operand.  For a list of modes, type
  help ^a -brief", arg, proc);
		     go to FINISH;
		     end;
		call arg_ptr (Iarg, Pop, Lop, code);
		if Parea = null then
		     Parea = get_system_free_area_();
		call mode_string_$parse (op, Parea, mode_string_info_ptr, code);
		if code ^= 0 then do;
		     call err (code, proc, "^a ^a", arg, op);
		     go to FINISH;
		     end;
		if mode_string_info.version ^= mode_string_info_version_2 then do;
		     call err (error_table_$unimplemented_version, proc, "
Expected version ^d structure from mode_string_$parse, received version ^d.",
			mode_string_info_version_2, mode_string_info.version);
		     go to FINISH;
		     end;
		if mode_string_info.number >= 1 then
		if mode_string_info.modes(1).version ^= mode_value_version_3 then do;
		     call err (error_table_$unimplemented_version, proc, "
Expected version ^d structure from mode_string_$parse, received version ^d.",
			mode_value_version_3, mode_string_info.modes(1).version);
		     go to FINISH;
		     end;
		Smode = FALSE;
		code = 0;
		mode_string_info.modes(*).code = 0;
		do Imode = 1 to mode_string_info.number;
		     if mode_string_info.modes(Imode).boolean_valuep then do;
			if mode_string_info.modes(Imode).mode_name = "node_branch" then
			     Smode.node_branch = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "key_region" then
			     Smode.key_region = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "key_loc" then
			     Smode.key_loc = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "key_overlap" then
			     Smode.key_overlap = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "key_order" then
			     Smode.key_order = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "node_tree" then
			     Smode.node_tree = mode_string_info.modes(Imode).boolean_value;
			else if mode_string_info.modes(Imode).mode_name = "default" then
			     Smode.node_branch,
			     Smode.key_region,
			     Smode.key_loc = mode_string_info.modes(Imode).boolean_value;

			else if mode_string_info.modes(Imode).mode_name = "all" then
			     Smode.node_branch,
			     Smode.key_region,
			     Smode.key_loc,
			     Smode.key_overlap,
			     Smode.key_order,
			     Smode.node_tree = mode_string_info.modes(Imode).boolean_value;
			else do;
			     mode_string_info.modes(Imode).code = error_table_$bad_mode;
			     Smode.bad_mode_name = TRUE;
			     code = error_table_$bad_mode_value;
			     end;
			end;
		     else do;
			mode_string_info.modes(Imode).code = error_table_$bad_mode_value;
			Smode.bad_mode_value = TRUE;
			code = error_table_$bad_mode_value;
			end;
		     end;
		if Smode.bad_mode_name | Smode.bad_mode_value then do;
		     call mode_string_$get_error (mode_string_info_ptr, mode_string, 0);
		     call err (code, proc, "^a^[
Only boolean modes can be given.^]", mode_string, Smode.bad_mode_value & ^Smode.bad_mode_name);
		     go to FINISH;
		     end;
		free mode_string_info in (area);
		mode_string_info_ptr = null;
		end;

	     else if index(arg, "-") = 1 then do;
		call err (error_table_$badopt, proc, "^a
Usage:	vfile_find_bad_nodes {pathname}
   or:	vfile_find_bad_nodes -input_switch switch_name", arg);
		go to FINISH;
		end;

	     else do;
		if Sinput_switch then do;
		     call err (error_table_$inconsistent, proc, "^a
Usage:	vfile_find_bad_nodes {pathname}
   or:	vfile_find_bad_nodes -input_switch switch_name", arg);
		     go to FINISH;
		     end;
		pathname = arg;
		Spathname = TRUE;
		end;
	     end;
	if Spathname | Sinput_switch then;
	else do;
	     call err (error_table_$wrong_no_of_args, proc, "
Usage:	vfile_find_bad_nodes {pathname}
   or:	vfile_find_bad_nodes -input_switch switch_name");
	     go to FINISH;
	     end;


	unique = unique_chars_(""b);
	if Spathname then do;			/* For paths, attach to file in this code.	*/
	     input_switch_name = proc || "." || unique;
	     call iox_$attach_name (input_switch_name, Piocb, "vfile_ " ||
		pathname || " -share 120", null, code);
	     if code ^= 0 then do;
		call err (code, proc, "Attaching to ^a",
		     pathname);
		go to FINISH;
		end;
	     Sattached = TRUE;
	     call iox_$open (Piocb, Keyed_sequential_input, ""b, code);
	     if code ^= 0 then do;
		call err (code, proc, "Opening ^a for ^a.",
		     pathname, iox_modes(Keyed_sequential_input));
		go to FINISH;
		end;
	     Sopened = TRUE;
	     end;

	else do;					/* For I/O switches,			*/
	     call iox_$look_iocb (input_switch_name, Piocb, code);
	     if code ^= 0 then do;			/*   make sure I/O switch exists.		*/
		call err (code, proc, "Finding ^a I/O switch.
Usage:	vfile_find_bad_nodes {pathname}
   or:	vfile_find_bad_nodes -input_switch switch_name",
		     input_switch_name);
		go to FINISH;
		end;
	     if Piocb -> iocb.attach_descrip_ptr = null then do;
		call err (error_table_$not_attached, proc,
		     "
Referencing ^a I/O switch.", input_switch_name);		/*   make sure it is attached to something.	*/
		go to FINISH;
		end;
	     if Piocb -> iocb.open_descrip_ptr = null then do;
		call iox_$open (Piocb, Keyed_sequential_input, ""b, code);
		if code ^= 0 then do;		/*   if not open, open it for ksqi		*/
		     call err (code, proc, "
Opening ^a I/O switch for ^a.", input_switch_name, iox_modes(Keyed_sequential_input));
		     go to FINISH;
		     end;
		Sopened = TRUE;
		end;
	     else do;				/*   if already open, make sure it is for ksqi	*/
		if Piocb -> iocb.open_descrip_ptr -> open_descrip = iox_modes(Keyed_sequential_input) |
		   Piocb -> iocb.open_descrip_ptr -> open_descrip = iox_modes(Keyed_sequential_update) then;
		else do;
		     call err (error_table_$bad_mode, proc, "
^a I/O switch is opened for ^a.  It must be opened for
^a or ^a to use ^a.", input_switch_name,
			Piocb -> iocb.open_descrip_ptr -> open_descrip,
			iox_modes(Keyed_sequential_input),
			iox_modes(Keyed_sequential_update), proc);
		     go to FINISH;
		     end;
		end;
	     end;

	if Smode.node_tree then do;			/* For node_tree checking, create temp vfile_	*/
						/*   in process directory.			*/
	     call iox_$attach_name ("vfbn." || unique, Piocb_node_tree,
		"vfile_ " || pathname_(get_pdir_(), "vfbn." || unique),
		null, code);
	     if code ^= 0 then do;
		call err (code, proc, "
Attempting to attach to temp vfile_ in process dir.");
		go to FINISH;
		end;
	     call iox_$open (Piocb_node_tree, Keyed_sequential_update, ""b, code);
	     if code ^= 0 then do;
		call err (code, proc, "
Attempting to open temp vfile_ in process dir for keyed_sequential_update.");
		go to FINISH;
		end;

	     aki.input_key = TRUE;			/* Initialize structures used to manipulate	*/
	     aki.input_desc = TRUE;			/*   keys in this temp vfile_			*/
	     aki.key_len = 4;

	     gki.input_key = TRUE;
	     gki.input_desc = FALSE;
	     gki.desc_code = 0;
	     gki.current = FALSE;
	     gki.rel_type = 0;
	     gki.head_size = 4;
	     gki.reset_pos = TRUE;
	     gki.pad = FALSE;
	     gki.version = gk_info_version_0;
	     gki.key_len = 4;

	     rki.input_key = TRUE;
	     rki.input_old_desc = TRUE;
	     rki.input_new_desc = TRUE;
	     rki.mbz = FALSE;
	     rki.key_len = 4;
	     end;

	call iox_$read_key (Piocb, key, Lread, code);	/* This call forces initiation of key components. */
	if code ^= 0 then do;
	     call err (code, proc, "
Attempting to read first key ^[of file ^a^s^;on ^s^a I/O switch^].",
		Spathname, pathname, input_switch_name);
	     go to FINISH;
	     end;

	key = "";					/* set variables to access file structures.	*/
	pos_ptr = addr(pos_frame);
	Nbad_nodes = 0;
	indx_cb_ptr = Piocb -> iocb.open_data_ptr;
	f_b_ptr = indx_cb.file_base_ptr;
	if file_base.file_version = 10 then do;
	     call err (0, proc, 
		"This file is in too old a format to check its nodes.");
	     go to FINISH;
	     end;
	is_ptr = indx_cb.index_state_ptr;

	if index_state_block.free_node_designator ^= 0 then do;
	     call get_temp_segment_ (proc, Pfree_nodes, code);
	     if code ^= 0 then do;
		call err (code, proc, "Getting temp segment.");
		go to FINISH;			/* In a temp seg, get a list of the unused nodes  */
		end;				/*   in the index, and avoid doing consistency	*/
	     free_nodes.N = 0;			/*   checks on them, since they may contain data	*/
	     Pfn = is_ptr;				/*   from a previous use which is in an		*/
	     if Pfn = null then go to ABORT_FREE_NODES;	/*   inconsistent state.			*/
	     do while (fn.next_free_node_designator ^= 0);
		Pfn = get_ptr (fn.next_free_node_designator);
		if Pfn = null then go to ABORT_FREE_NODES;
		call ioa_ ("Begin checking free node list (node_ptr = ^p).", Pfn);
		if fn.N < 0 then do;
		     call tell$bad_free_node ("Free node count < 0", 23, Pfn);
		     go to ABORT_FREE_NODES;
		     end;
		if fn.N > 1022 then do;
		     call tell$bad_free_node ("Free node count > 1022", 24, Pfn);
		     go to ABORT_FREE_NODES;
		     end;
		free_nodes.N = free_nodes.N + 1;
		free_nodes.node(free_nodes.N) = Pfn;
		do Ifn = 1 to fn.N;
		     free_nodes.N = free_nodes.N + 1;
		     free_nodes.node(free_nodes.N) = get_ptr(fn.node(Ifn));
		     end;
		end;
	     call ioa_ ("Found ^d undamaged free nodes.  Processing continues.", free_nodes.N);
	     go to END_FREE_NODE_PROCESSING;

ABORT_FREE_NODES:
	     call ioa_ ("Processing of free nodes aborted by this error.
Found ^d undamaged free nodes so far.
Some damaged nodes reported below may actually be undamaged free nodes which
were not located, due to this error.", free_nodes.N);
END_FREE_NODE_PROCESSING:
	     end;

	root_numb_key_numb = file_base.root_node_block.only_branch_in_root;
						/* Remember descriptor of root node for node_tree */
						/*   checking.				*/

	Nnon_empty_nodes = 0;
	Nkeys = 0;
	Nkey_bytes = 0;
	do comp_num = 0,				/* Start with component 0 of the keyed file,	*/
	   index_state_block.index_tail_comp_num repeat comp_table(comp_num).comp_link
	        while (comp_num ^= 0);		/*   and follow chain of key-containing 	*/
	     Pnode_array = seg_ptr_array(comp_num);	/*   components from the comp_table.		*/
	     if comp_num = 0 then Inode = 5;		/* Skip over file_base in component 0.		*/
	     else Inode = 1;			/* For other components, consider pages 1-255	*/

	     call ioa_ ("^/Begin checking component ^d, node:", comp_num);
	     on program_interrupt;			/* Ignore pi unless in request loop.		*/
	     Stotal = FALSE;
	     Nbad_nodes_in_comp = 0;

						/* Note that the following code walks through the */
						/* nodes in each component sequentially, NOT in	*/
						/* tree order.				*/
	     do Inode = Inode to dimension(node_array,1); /* For each potential key-containing node,	*/
		node_ptr = addr(node_array(Inode));	/*   get ptr to node page.  vfile_ has kindly 	*/
						/*   initiated the compoent for us.		*/
		if mod(Inode,25) = 0 then call ioa_$nnl (" ^d", Inode);
						/* Give user a progress indicator every 25 pages. */
		if Pfree_nodes ^= null then do;	/* Avoid checking free nodes.			*/
		     do Ifn = 1 to free_nodes.N while (node_ptr ^= free_nodes.node(Ifn));
			end;
		     if Ifn <= free_nodes.N then go to NEXT_NODE;
		     end;
		if node_block.last_branch_num = 0 then go to NEXT_NODE;
						/* Avoid checking empty nodes.		*/

		Nnon_empty_nodes = Nnon_empty_nodes + 1;
		Nkeys = Nkeys + node_block.last_branch_num - 1;
		Nkey_bytes = Nkey_bytes + 4096 - node_block.low_key_pos + 1 - node_block.scat_space;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* The tests for consistency of each node follow:					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

		if Smode.node_branch then do;
		     if node_block.last_branch_num > 313  then go to FAIL6;
						/* A node can contain at most, 313 1-char keys.	*/
		     if node_block.last_branch_num < 0 then go to FAIL7;
						/* Key count must be positive.		*/
		     end;

		if Smode.key_region then do;
		     if node_block.low_key_pos > 4096  then go to FAIL8;
						/* Keys may not be stored beyond end of page.	*/
		     if node_block.low_key_pos < 4*(currentsize(node_block)-2)  then go to FAIL9;
						/* Keys may not be stored on top of node_block	*/
						/*   structure.				*/
		     if node_block.scat_space > 4096-node_block.low_key_pos+1  then go to FAIL10;
						/* Scattered free key storage space must not be	*/
						/*   larger than key storage region of the node.	*/
		     if node_block.scat_space < 0 then go to FAIL11;
						/*   nor can scattered space be negative.	*/
		     Nkey_bytes_in_node = 0;
		     do Ibranch = 1 to node_block.last_branch_num-1;
			Nkey_bytes_in_node = Nkey_bytes_in_node + node_block.key_length(Ibranch);
			end;			/* Check that scat_space and low_key_pos are	*/
						/*   consistent with all key lengths.		*/
		     if Nkey_bytes_in_node ^= 4096 - node_block.low_key_pos + 1 - node_block.scat_space then
			go to FAIL12;
		     end;

		if Smode.key_loc | Smode.key_order then
		do Ibranch = 1 to node_block.last_branch_num-1;
		     if Smode.key_loc then do;
			if node_block.key_pos(Ibranch) < node_block.low_key_pos  then go to FAIL13;
			if node_block.key_pos(Ibranch)+node_block.key_length(Ibranch)-1  >  4096  then go to FAIL14;
			end;			/* Each key's storage must be in the key storage	*/
						/*   region of the node.			*/

		     if Smode.key_order then do;
			if Ibranch < node_block.last_branch_num - 1 then
			if substr(keys, node_block.key_pos(Ibranch), node_block.key_length(Ibranch)) >
			   substr(keys, node_block.key_pos(Ibranch+1), node_block.key_length(Ibranch+1)) then
			     go to FAIL16;		/* Make sure keys are in ascending ASCII 	*/
			end;			/*   collating sequence in node.		*/
		     end;

		if Smode.key_overlap then do;
		     node_bits = ""b;
		     do Ibranch = 1 to node_block.last_branch_num - 1;
			Pnode_bit_overlay = addr(node_bit_array(node_block.key_pos(Ibranch)));
			Lnode_bit_overlay = node_block.key_length(Ibranch);
			if node_bit_overlay ^= ""b then go to FAIL15;
			node_bit_overlay = ^node_bit_overlay;
			end;			/* Make sure each by of key storage is used for	*/
		     end;				/*   only one key.				*/

		if Smode.node_tree then do;
		     aki.descrip = 0;		/* Add a key to temp vfile_ for each node as it	*/
						/*   is processed.				*/
		     if comp_num = root_numb_key.comp then
		     if (Inode-1)*1024 = root_numb_key.node then do;
			numb_key.comp = -1;		/* Root node has no parent.			*/
			numb_key.node = 0;
			aki.descrip = numb_key_numb;
			end;
		     numb_key.comp = comp_num;
		     numb_key.node = (Inode-1) * 1024;
		     aki.key = numb_key_str;
		     call iox_$control (Piocb_node_tree, "add_key", addr(aki), code);
						/* It is not an error if the key already exists	*/
						/*   since node may have been referenced by 	*/
						/*   sons_ptr of its parent node (checked 	*/
						/*   earlier), and the key would have been created*/
						/*   at that earlier reference.		*/

		     do Ibranch = 1 to node_block.last_branch_num;
						/* Now check all sons_ptrs of this node.	*/
			if node_block.branch(Ibranch) ^= 0 then do;
			     branch_numb_key_numb = node_block.branch(Ibranch);
			     if branch_numb_key_numb = root_numb_key_numb then
				call tell$root_sons_ptr;
						/* Error for sons_ptr to reference root node.	*/
			     else do;
				do temp_comp_num = 0,
				     index_state_block.index_tail_comp_num
				     repeat (comp_table(temp_comp_num).comp_link)
				     while (temp_comp_num ^= 0);
				     if temp_comp_num = branch_numb_key.comp then
					go to SON_OK_SO_FAR;
				     end;
				call tell$non_node_comp_son();
						/* Error for sons_ptr to reference a component	*/
						/*   which contains records rather than key nodes.*/
				go to SKIP_SON;

SON_OK_SO_FAR:			Pnode1 = get_ptr (branch_numb_key_numb);
				if Pfree_nodes ^= null then do;
						/* See if son is a free node.			*/
				     do Ifn = 1 to free_nodes.N while (Pnode1 ^= free_nodes.node(Ifn));
					end;
				     if Ifn <= free_nodes.N then do;
					call tell$free_son();
					go to SKIP_SON;
					end;	/* Error for sons_ptr to reference freed node.	*/
				     end;
				if Pnode1 -> node_block.last_branch_num = 0 then do;
				     call tell$empty_son();
				     go to SKIP_SON;
				     end;		/* Error for sons_ptr to reference an empty node. */

				aki.key = branch_numb_key_str;
						/* Now add key relating this node (parent) to its */
						/*   son.					*/
				aki.descrip = numb_key_numb;
				call iox_$control (Piocb_node_tree, "add_key", addr(aki), code);
				if code = error_table_$key_duplication then do;
				     gki.key = aki.key;
				     call iox_$control (Piocb_node_tree, "get_key", addr(gki), code);
				     if code = 0 then 
				     if gki.descrip ^= 0 then 
					call tell$dup_son_ptr ();
						/* Error if node is son of another parent.	*/
				     else do;	/* If key already exists with zero descriptor,	*/
						/*   that means it was created earlier during	*/
						/*   checking of the sons node.  We'll set the	*/
						/*   key's descriptor to establish parent/son map.*/
					rki.old_descrip = gki.descrip;
					rki.new_descrip = aki.descrip;
					rki.key = aki.key;
					call iox_$control (Piocb_node_tree, "reassign_key",
					     addr(rki), code);
					end;
				     end;
SKIP_SON:				end;
			     end;
			end;
		     end;

		go to NEXT_NODE;			/* All tests passed if we get here.		*/

FAIL6:		call tell ("branch_count > 313", 6);
		go to NEXT_NODE;
		
FAIL7:		call tell ("branch_count < 0", 7);
		go to NEXT_NODE;

FAIL8:		call tell ("start_of_key_region > character position 4096", 8);
		go to NEXT_NODE;
		
FAIL9:		call tell ("start_of_key_region overlays node_block structure", 9);
		go to NEXT_NODE;
		
FAIL10:		call tell ("scattered_free_key_space > 4096-start_of_key_region", 10);
		go to NEXT_NODE;

FAIL11:		call tell ("scattered_free_key_space < 0", 11);
		go to NEXT_NODE;

FAIL12:		call tell ("4096 - start_of_key_region - scattered_free_space ^= sum(key_lengths)", 12);
		go to NEXT_NODE;

FAIL13:		call tell ("Key(" || ltrim(char(Ibranch)) ||
		     ") begins before start_of_key_region", 13);
		go to NEXT_NODE;
		
FAIL14:		call tell ("Key(" || ltrim(char(Ibranch)) ||
		     ") extends beyond end of node", 14);
		go to NEXT_NODE;

FAIL15:		call tell ("Key(" || ltrim(char(Ibranch)) ||
		     ") overlaps storage for other keys in node", 15);
		go to NEXT_NODE;

FAIL16:		call tell ("Key(" || ltrim(char(Ibranch)) || ") > Key(" ||
		     ltrim(char(Ibranch+1)) || ")", 16);
		go to NEXT_NODE;

NEXT_NODE:	end;

	     if Nbad_nodes_in_comp > 0 then		/* Report findings in this component of file.	*/
		call ioa_ ("^/^d bad node^[s^] in comp ^d",
		     Nbad_nodes_in_comp, Nbad_nodes_in_comp^=1, comp_num);
	     end;

	fs_info.info_version = vfs_version_1;
	if Smode.node_tree then do;			/* Now check to be sure that each non-empty	*/
						/*   node but root is son of some parent node.	*/
	     call iox_$control (Piocb_node_tree, "file_status", addr(fs_info), code);
	     call ioa_ ("^/Begin checking references between ^d non-empty tree nodes:",
		fs_info.num_keys);
	     call iox_$position (Piocb_node_tree, -1, 0, code);
	     gki.input_key = FALSE;
	     gki.current = TRUE;
	     call iox_$control (Piocb_node_tree, "get_key", addr(gki), code);
	     Inode = 0;
	     do while (code = 0);
	          Inode = Inode + 1;
	          if mod(Inode,100) = 0 then
		     call ioa_$nnl (" ^d", Inode);
		numb_key_str = gki.key;
		if numb_key_numb = root_numb_key_numb then;
		else if gki.descrip = 0 then 
		     call tell$unreferenced_node();
		call iox_$position (Piocb_node_tree, 0, 1, code);
		if code = 0 then
		     call iox_$control (Piocb_node_tree, "get_key", addr(gki), code);
		end;
	     end;
	call iox_$control (Piocb, "file_status", addr(fs_info), code);
	if Nnon_empty_nodes ^= fs_info.nodes then
	     call tell$bad_node_count_in_header();
	if Nkeys ^= fs_info.num_keys then
	     call tell$bad_key_count_in_header();
	if Nkey_bytes ^= fs_info.key_bytes then
	     call tell$bad_key_byte_count_in_header();

QUIT:	if Nbad_nodes > 0 then			/* Report findings for the entire file.		*/
	     call ioa_ ("^/^d key node^[s were^; was^] damaged.", Nbad_nodes,
	          Nbad_nodes^=1);
	else call ioa_ ("^/No damaged nodes.");
FINISH:	call janitor();
	if ^Scommand then				/* Return true/false when invoked as active fcn.	*/
	     if Nbad_nodes > 0 then
		ret = "true";
	     else ret = "false";
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


janitor:	proc;

	if Piocb_node_tree ^= null then do;
	     call iox_$close (Piocb_node_tree, code);
	     call iox_$detach_iocb (Piocb_node_tree, code);
	     call iox_$destroy_iocb (Piocb_node_tree, code);
	     call delete_$path (get_pdir_(), "vfbn." || unique, "100100"b, proc, code);
	     end;

	if Piocb ^= null then do;
	     if Sopened then
		call iox_$close (Piocb, code);
	     if Sattached then do;
		call iox_$detach_iocb (Piocb, code);
		call iox_$destroy_iocb (Piocb, code);
		end;
	     end;
	if Pfree_nodes ^= null then
	     call release_temp_segment_ (proc, Pfree_nodes, code);
	if mode_string_info_ptr ^= null then
	     free mode_string_info in (area);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_ptr:	proc (descriptor) returns(ptr);		/* Given a vfile_ descriptor, this procedure	*/
						/*   returns a corresponding pointer.		*/
    dcl	descriptor		fixed (35);
    dcl	1 desc			like designator_struct aligned based (addr (descriptor));

	if desc.comp_num < lbound(seg_ptr_array,1) then do;
	     call tell$bad_desc ("Bad descriptor ignored", 25, descriptor);
	     return (null);				/* Component number in descriptor must be within	*/
	     end;					/*   bounds of the set_ptr_array in file base.	*/
	if desc.comp_num > hbound(seg_ptr_array,1) then do;
	     call tell$bad_desc ("Descriptor with segno > " || ltrim(char(hbound(seg_ptr_array,1))),
		     26, descriptor);
	     return(null);
	     end;

	return (addr (seg_ptr_array (desc.comp_num) -> seg_array (fixed (desc.offset))));

     end get_ptr;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


tell:	proc (msg, fail_num);			/* This procedure reports errors on a node-by-node*/
						/*   basis, and managed the request loop.	*/

     dcl	msg			char(*),
	fail_num			fixed bin;
     
	Nbad_nodes = Nbad_nodes + 1;			/* Increment counts and report errors.		*/
	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	if Stotal then return;
	call ioa_ ("^/ERROR ^d in Comp ^d, node ^d (node_ptr = ^p)
^a
    branch_count = ^d keys
    start_of_key_region = char position ^d
    key_space = ^d chars,
    scattered_free_key_space = ^d chars",
	     fail_num, comp_num, Inode, node_ptr, msg,
	     node_block.last_branch_num, node_block.low_key_pos,
	     4096-node_block.low_key_pos+1, node_block.scat_space);

REQUEST_LOOP:
	if ^Srequest_loop then return;
	on program_interrupt go to INPUT;
INPUT:	call ioa_$nnl ("vfile_find_bad_nodes:  ");
	call iox_$get_line (iox_$user_input, addr(LINE), length(LINE), Lread, code);
	line = ltrim(rtrim(substr(LINE,1,Lread), HT_SP_NL), HT_SP);

	if substr(line,1,2) = ".." then do;
	     substr(line,1,2) = "  ";
	     call cu_$cp (addr(substr(line,1)), length(line), code);
	     go to INPUT;
	     end;
	else if line = "?" then do;
PROMPT:	     call ioa_ ("Respond: quit(q), continue(c), total(tt), ., ?, ..");
	     go to INPUT;
	     end;
	else if line = "q" | line = "quit" then go to QUIT;
	else if line = "c" | line = "continue" then;
	else if line = "tt" | line = "total" then
	     Stotal = TRUE;
	else if line = "." then do;
	     call ioa_ ("vfile_find_bad_nodes 1.0, Referencing ^[file ^a^s^;switch ^s^a^].",
		Spathname, pathname, input_switch_name);
	     go to INPUT;
	     end;
	else do;
	     call ioa_$nnl ("Incorrect response.  ");
	     go to PROMPT;
	     end;
	revert program_interrupt;
	return;

tell$bad_desc:
	entry (msg, fail_num, descriptor);

     dcl	descriptor		fixed bin(35);

	call ioa_ ("^/ERROR ^d in converting record descriptor ^w: ^a",
	     fail_num, descriptor, msg);
	go to REQUEST_LOOP;


tell$bad_free_node:
	entry (msg, fail_num, Pfree_node);

     dcl	Pfree_node		ptr;

	call ioa_ ("^/ERROR ^d in processing free node (node_ptr = ^p): ^a",
	     fail_num, Pfree_node, msg);
	Nbad_nodes = Nbad_nodes + 1;
	go to REQUEST_LOOP;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* The next three error routines simply report errors in the file_base without entering	*/
	/* the request loop.							*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

tell$bad_key_byte_count_in_header:
	entry();

	call ioa_ ("
ERROR 2, Counted key bytes (^d) ^= file_state_block.total_key_length (^d)
Header of the file (file_base) may have been damaged.",
	     Nkey_bytes, fs_info.key_bytes);
	return;
	

tell$bad_key_count_in_header:
	entry();

	call ioa_ ("
ERROR 3, Counted keys (^d) ^= file_state_block.number_of_keys (^d).
Header of the file (file_base) may have been damaged.",
	     Nkeys, fs_info.num_keys);
	return;


tell$bad_node_count_in_header:
	entry();

	call ioa_ ("
ERROR 1, Counted nodes (^d) ^= index_state_block.number_of_nodes (^d)
Header of the file (file_base) may have been damaged.",
	     Nnon_empty_nodes, fs_info.nodes);
	return;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* The following errors are non-fatal.  Checking of the node containing the error	*/
	/* continues after return from request loop.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

tell$dup_son_ptr:
	entry;

	Nbad_nodes = Nbad_nodes + 1;
	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	if Stotal then return;
	save_numb_key_numb = numb_key_numb;
	Pnode1 = get_ptr (aki.descrip);
	Pnode2 = get_ptr (gki.descrip);
	call ioa_ ("
ERROR 22 in Comp ^d, node ^d (node_ptr = ^p)", comp_num, Inode, node_ptr);
	numb_key_numb = aki.descrip;
	numb_key.node = divide(numb_key.node, 1024, 18, 0) + 1;
	call ioa_ ("Branch ^d has same sons_ptr (node_block.branch)
            Comp ^d, node ^d (node_ptr = ^p)",  numb_key.comp, numb_key.node, Pnode1);
	numb_key_numb = gki.descrip;
	numb_key.node = divide(numb_key.node, 1024, 18, 0) + 1;
	call ioa_ ("         as Comp ^d, node ^d (node_ptr = ^p)", numb_key.comp, numb_key.node, Pnode2);
	numb_key_numb = save_numb_key_numb;
	go to REQUEST_LOOP;

tell$empty_son:
	entry();

	Nbad_nodes = Nbad_nodes + 1;
	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	if Stotal then return;
	save_numb_key_numb = numb_key_numb;
	numb_key_numb = gki.descrip;
	numb_key.node = divide(numb_key.node, 1024, 18, 0) + 1;
	Pnode1 = get_ptr (gki.descrip);
	call ioa_ ("
ERROR 18 in Comp ^d, node ^d (node_ptr = ^p)
Branch ^d has sons_ptr (node_block.branch) pointing to an empty node
            Comp ^d, node ^d (node_ptr = ^p)",
	     comp_num, Inode, node_ptr, Ibranch,
	   numb_key.comp, numb_key.node, Pnode1);
	numb_key_numb = save_numb_key_numb;
	go to REQUEST_LOOP;

tell$free_son:
	entry ();

	Nbad_nodes = Nbad_nodes + 1;
	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	if Stotal then return;
	save_numb_key_numb = numb_key_numb;
	numb_key_numb = gki.descrip;
	numb_key.node = divide(numb_key.node, 1024, 18, 0) + 1;
	Pnode1 = get_ptr (gki.descrip);
	call ioa_ ("
ERROR 19 in Comp ^d, node ^d (node_ptr = ^p)
Branch ^d has sons_ptr (node_block.branch) which is a freed node
	  Comp ^d, node ^d (node_ptr = ^p)",
	     comp_num, Inode, node_ptr, Ibranch, numb_key.comp,
	   numb_key.node, Pnode1);
	numb_key_numb = save_numb_key_numb;
	go to REQUEST_LOOP;


tell$non_node_comp_son:
	entry ();

	Nbad_nodes = Nbad_nodes + 1;
	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	if Stotal then return;
	save_numb_key_numb = numb_key_numb;
	numb_key_numb = gki.descrip;
	numb_key.node = divide(numb_key.node, 1024, 18, 0) + 1;
	Pnode1 = get_ptr (gki.descrip);
	call ioa_ ("
ERROR 17 in Comp ^d, node ^d (node_ptr = ^p)
Branch ^d has sons_ptr (node_block.branch) pointing to non-node component
            Comp ^d, node ^d (node_ptr = ^p)",
	     comp_num, Inode, node_ptr, Ibranch, numb_key.comp,
	     numb_key.node, Pnode1);
	numb_key_numb = save_numb_key_numb ;
	go to REQUEST_LOOP;

tell$root_sons_ptr:
	entry();

	Nbad_nodes_in_comp = Nbad_nodes_in_comp + 1;
	Nbad_nodes = Nbad_nodes + 1;
	if Stotal then return;
	Pnode1 = get_ptr (branch_numb_key_numb);
	branch_numb_key.node = divide(branch_numb_key.node, 1024, 18, 0) + 1;
	call ioa_ ("
ERROR 20 in Comp ^d, node ^d (node_ptr = ^p)
Branch ^d sons_ptr (node_block.branch) points to root node
            Comp ^d, node ^d (node_ptr = ^p)",
	     comp_num, Inode, node_ptr, Ibranch, branch_numb_key.comp,
	     branch_numb_key.node, Pnode1);
	go to REQUEST_LOOP;


tell$unreferenced_node:
	entry();

	Nbad_nodes = Nbad_nodes + 1;
	if Stotal then return;
	node_ptr = get_ptr (numb_key_numb);
	call ioa_ ("
ERROR 21, Comp ^d, node ^d (node_ptr = ^p) never referenced by 
superior node and it is not the root node.",
	     numb_key.comp, divide(numb_key.node,1024,18,0) + 1, node_ptr);
	go to REQUEST_LOOP;

	end tell;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include ak_info;

    dcl	1 aki			aligned,
	  2 header		like ak_header,
	  2 key			char(4),
	1 gki			aligned,
	  2 header		like gk_header,
	  2 key			char(4),
	1 rki			aligned,
	  2 header		like rk_header,
	  2 key			char(4);

%include mode_string_info;

%include iocb;

%include iox_modes;

%include vfile_indx;

%include vfs_info;

    dcl	1 fs_info			aligned like indx_info,
	info			fixed bin;

	end vfile_find_bad_nodes;
