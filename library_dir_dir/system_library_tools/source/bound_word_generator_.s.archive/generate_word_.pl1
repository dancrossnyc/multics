/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This procedure is the subroutine interface to generate random words.
   It is called when the standard distributi?{n of random units (as returned by
   random_unit_) is desired.  The clock value is used as the starting seed unless
   generate_word_$init_seed is called.
*/
generate_word_: procedure (word, hyphenated_word, min, max);
dcl  word char (*);
dcl  hyphenated_word char (*);
dcl  min fixed bin;
dcl  max fixed bin;
dcl (random_unit_, random_unit_$random_vowel) entry (fixed bin);
dcl  convert_word_ entry ((0:*) fixed bin, (0:*) bit (1) aligned,
     fixed bin, char (*), char (*));
dcl  random_word_ entry ((0:*) fixed bin, (0:*) bit (1) aligned,
     fixed bin, fixed bin, entry, entry);
dcl  hyphens (0:20) bit (1) aligned;
dcl  random_word (0:20) fixed bin;
dcl  length_in_units fixed bin;
dcl  random_length fixed bin;
dcl  unique_bits_ entry returns (bit (70));
dcl  encipher_ entry (fixed bin (71), (*) fixed bin (71), (*) fixed bin (71), fixed bin);
dcl  random_unit_stat_$seed (1) fixed bin (71) external;
dcl  first_call bit (1) static aligned init ("1"b);

/* On the very first call to this procedure in a process (if the
   init_seed entry was not called), use unique_bits to get a
   random number to initialize the random seed. */

	if first_call then do;
	     random_unit_stat_$seed (1) = fixed (unique_bits_ ());
	     first_call = "0"b;
	end;

/* Get the length of the word desired.  We use the old value
   of the seed to determine this length so that the length of the word
   will not in some way be correlated with the word itself.
   We calculate this to be a uniformly distributed random number between
   min and max. */

	random_length = mod (abs (fixed (random_unit_stat_$seed (1), 17)), (max - min + 1)) + min;

/* encipher the seed to get a random number and the next value of the seed */

	call encipher_ (random_unit_stat_$seed (1), random_unit_stat_$seed, random_unit_stat_$seed, 1);

/* Get the random word and convert it to characters */

	call random_word_ (random_word, hyphens, random_length, length_in_units, random_unit_, random_unit_$random_vowel);
	call convert_word_ (random_word, hyphens, length_in_units, word, hyphenated_word);
	return;

/* This entry allows the user to set the seed.  If the seed argument is zero, we
   go back to using the clock value.
*/
generate_word_$init_seed: entry (seed);
dcl  seed fixed bin (35);

	if seed = 0 then first_call = "1"b;
	else do;
	     random_unit_stat_$seed (1) = seed;
	     first_call = "0"b;
	end;
	return;
     end;
