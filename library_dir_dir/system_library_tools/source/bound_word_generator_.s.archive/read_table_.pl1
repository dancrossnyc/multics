/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This subroutine compiles the digram table, given a pointer to the
   segment containing the source.  It returns a flag if compiling was
   unsuccessful */

read_table_: procedure (source_table_ptr, bc) returns (bit (1));

dcl  source_table char (1048575) based (source_table_ptr);
dcl  source_table_ptr ptr;
%include digram_structure;
dcl (i, j, k, l) fixed bin;
dcl  errflag bit (1) init ("0"b);
dcl  fatal_flag bit (1) init ("0"b);
dcl  neither_is_vowel bit (1);
dcl  p ptr;
dcl 1 x based (p) like digrams;
dcl  letters_ (0:90) aligned char (2);			/* storage for letters until we know how many units there are */
dcl 1 rules_ (90) aligned like rules;			/* ditto for rules */
dcl  code fixed bin (35);
dcl  flag bit (1);
dcl  char char (1) init (" ");
dcl  bc fixed bin (24);
dcl  bitcount fixed bin (24);
dcl  cleanup condition;
dcl  term_$seg_ptr entry (ptr, fixed bin (35));
dcl  get_group_id_ entry returns (char (32) aligned);
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl (hcs_$add_acl_entries, hcs_$delete_acl_entries) entry
    (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl 1 acl aligned,
    2 user_name char (32),
    2 modes bit (36),
    2 pad bit (36),
    2 code fixed bin (35);
dcl  null builtin;
dcl  loc fixed init (1);
dcl  end bit (1);
dcl  new_line char (1) init ("
");
dcl  com_err_$suppress_name entry options (variable);
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  get_pdir_ entry returns (char (168) aligned);
dcl  get_wdir_ entry returns (char (168) aligned);
dcl  alm entry options (variable);
dcl  alm_prog based (prog_ptr) char (262144);
dcl  prog_ptr ptr static init (null);
dcl  seg_index init (1) fixed bin;

/* This procedure creates an ALM program containing empty blocks of storage.
   After finding out how many units there are, the size of each of these
   blocks can be determined.  The ALM program is then assembled, and
   segdef's are thus created which point to the beginning of each of
   these blocks.

   The first statement of the ALM program will be:

   equ n,xxxxx

   where xxxxx will be the number of units determined.  The rest of
   the statements are below:  */

dcl  alm_statements (9) char (30) varying init (
     "segdef digrams",
     "segdef n_units",
     "segdef letters",
     "segdef rules",
     "bss n_units,1",				/* n_units fixed bin */
     "bss digrams,(n*n+3)/4",				/* digrams(n_units,n_units) bit(9) */
     "bss letters,n+1",				/* letters(0:n_units) char(2) aligned */
     "bss rules,4*n",				/* 1 rules(n_units) aligned, 2 (b1,b2,b3,b4) bit(1) */
     "end");




dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);

/* check if a dollar sign ends segment */

	if substr (source_table, bc/9 - 1, 1) ^= "$"
	then goto dollar_error;

/* first read all the different letters or pairs to be defined */

	do i = 1 to 90 while (char ^= ";");		/* read until semicolon */
	     char = substr (source_table, loc, 1);
	     loc = loc + 1;
	     if char < "a" | char > "z"
	     then
		do;
		call ioa_$nnl ("alpha character expected");
fatal_error:
		fatal_flag = "1"b;
		goto err;
	     end;
	     substr (letters_ (i), 1, 1) = char;
	     char = substr (source_table, loc, 1);
	     loc = loc + 1;
	     substr (letters_ (i), 2, 1) = " ";
	     if char < "a" | char > "z"
	     then					/* second character is not alphabetic */

try_bits:

		if char = "1" | char = "0" | char = " "
		then				/* second character is a bit */
		     do;
		     rules_ (i).not_begin_syllable = char = "1";
		     char = substr (source_table, loc, 1);
		     loc = loc + 1;
		     if char = "1" | char = "0" | char = " "
		     then				/* another "rules" bit */
			do;
			rules_ (i).no_final_split = char = "1";
			char = substr (source_table, loc, 1);
			loc = loc + 1;
		     end;
		     else				/* no second "rules" bit */
		     do;
			rules_ (i).no_final_split = "0"b;
		     end;
		end;
		else				/* second character is not a bit and not alphabetic */
		rules_ (i).not_begin_syllable, rules_ (i).no_final_split = "0"b;
	     else					/* second character is alphabetic */
	     do;
		substr (letters_ (i), 2, 1) = char;
		char = substr (source_table, loc, 1);
		loc = loc + 1;
		goto try_bits;
	     end;

/* check character following for comma, new_line, or semicolon */

	     if char ^= ";" & char ^= "," & char ^= new_line
	     then
		do;
		call ioa_$nnl ("comma, blank, zero, one, or letter expected");
		goto fatal_error;
	     end;

/* check if this unit is already defined */

	     if i ^= 1
	     then
		do j = 1 to i - 1;
		if letters_ (j) = letters_ (i)
		then do;
		     call ioa_$nnl ("duplicate unit specification ""^a""", letters_ (j));
		     goto fatal_error;
		end;
	     end;

/* set vowel flags */

	     rules_ (i).vowel = letters_ (i) = "a " | letters_ (i) = "e " | letters_ (i) = "i " | letters_ (i) = "o " | letters_ (i) = "u ";
	     rules_ (i).alternate_vowel = letters_ (i) = "y ";
	end;

	if i > 90
	then
	     do;
	     call ioa_ ("Too many units defined");	/* more than 90 units */
	     return ("1"b);
	end;

/* this is the on unit for aborted compilation
   It deletes the temporary segment containing the alm program, and
   deletes the acl entry of digrams that references this process's id. */

	on condition (cleanup)
	     begin;
	     if prog_ptr ^= null
	     then call hcs_$delentry_seg (prog_ptr, code);
	     call hcs_$delete_acl_entries (get_wdir_ (), "digrams", addr (acl), 1, code);
	end;

/* now that we know how many units, we can create the ALM program */

/* first create the source segment in the process directory */

	call hcs_$make_seg ("", "digrams.alm", "", 01010b, prog_ptr, code);
	if prog_ptr = null
	then do;
error_in_alm_prog:
	     call com_err_$suppress_name (code, "digram_table_compiler", "digrams.alm in process directory");
	     return ("1"b);
	end;

	call addline ("equ n," || substr (character (i-1), verify (character (i-1), " "))); /* first line of ALM program */
	do j = 1 to hbound (alm_statements, 1);		/* all the rest of the lines */
	     call addline (alm_statements (j));
	end;

/* set the bit count of the source segment */

	call hcs_$set_bc_seg (prog_ptr, (seg_index - 1)*9, code);
	if code ^= 0 then goto error_in_alm_prog;

/* assemble the ALM program */

	call alm (before (get_pdir_ (), " ") || ">digrams");

/* Hopefully we got no errors.  If we did, we can't tell */
/* Delete the alm program, and set the acl of the object program
   to rw for this process */

	call hcs_$delentry_seg (prog_ptr, code);	/* ignore code */
	prog_ptr = null ();				/* just to be clean */
	acl.user_name = get_group_id_ ();
	acl.modes = "101"b;
	acl.pad = ""b;
	call hcs_$add_acl_entries (get_wdir_ (), "digrams", addr (acl), 1, code);
	if code ^= 0
	then do;
	     call com_err_$suppress_name (code, "digram_table_compiler", "digrams");
	     return ("1"b);
	end;

/* Store stuff into the object segment */

	n_units = i - 1;				/* This is the first reference to the object segment */
	letters (0) = "";
	do i = 1 to n_units;
	     letters (i) = letters_ (i);
	     rules (i) = rules_ (i);
	end;

/* digram table is compiled now */

	do i = 1 to n_units;
	     do j = 1 to n_units;
		p = addr (digrams (i, j));
		x.begin, x.not_begin, x.end, x.not_end, x.break, x.prefix, x.suffix = "0"b;
		char = substr (source_table, loc, 1);
		do while (char = new_line);
		     loc = loc + 1;
		     char = substr (source_table, loc, 1);
		end;
		if char = "$" then do; call ioa_ ("illegal $ -- premature end"); return ("1"b); end;
		if char = " " | char = "1"
		then
		     do;
		     x.begin = char = "1";
		     loc = loc + 1;
		     call next_char_bit;
		     x.not_begin = char = "1";
		     call next_char_bit;
		     x.break = char = "1";
		     call next_char;
		     x.prefix = char = "-";
		end;
		call next_char;
		if char = " " | char = "-" then goto erra;
		if char ^= letters_split (i).first then goto errb;
		call next_letter (i);
		call next_char;
		if char = " " | char = "-" then goto erra;
		if char ^= letters_split (j).first
		then
		     do;

/* in case the second unit of a digram pair specification is illegal,
   this sequence attempts to get in sync again so that messages will not
   be printed indefinitely.  If the first lunit is illegal,
   no attempt is made to get in sync. */
		     k = 1;
errb1:		     do k = max (k, 1) to n_units while (char ^= letters_split (k).first);
		     end;				/* this takes care of skipping some units or duplicating the last unit */
		     if k <= n_units
		     then
			do;
			if letters_split (k).second ^= " "
			then
			     do;
			     char = substr (source_table, loc, 1);
			     if char ^= letters_split (k).second
			     then
				do;
				k = k + 1;
				goto errb1;
			     end;
			end;
			j = k + 1;
		     end;
		     else j = j + 1;		/* if the unit can't be found, assume it's there but spelled wrong */
errb:		     j = j - 1;			/* if there is an extra digram that can't be found, we'll get another message */
		     call ioa_$nnl ("out of order or illegal letter"); goto err;
		end;
		call next_letter (j);
		char = substr (source_table, loc, 1);
		loc = loc + 1;
		if char ^= "," & char ^= new_line & char ^= "$"
		then
		     do;
		     if char ^= " " & char ^= "-" & char ^= "+"
		     then
erra:			do;
			call ioa_$nnl ("alpha character expected");
			goto err;
		     end;
		     if char = "-"
		     then x.suffix = "1"b;
		     else
		     if char = "+"
		     then x.illegal_pair = "1"b;
		     call next_bit;
		     if end then goto loop;
		     x.end = char = "1";
		     call next_bit;
		     if end then goto loop;
		     x.not_end = char = "1";
		     char = substr (source_table, loc, 1);
		     if char ^= new_line & char ^= ","
		     then do; call ioa_$nnl ("end of line expected"); goto err; end;
		     loc = loc + 1;
		end;
loop:
		neither_is_vowel = ^rules.vowel (i) & ^rules.vowel (j) & ^rules.alternate_vowel (i) & ^rules.alternate_vowel (j);
		if (x.begin & (x.not_begin| (x.end & neither_is_vowel)| (^x.not_end & neither_is_vowel)| (x.break & ^rules.vowel (i)))) |
		(rules.not_begin_syllable (j) & x.break) |
		(x.end & (x.not_end| (^x.not_begin & neither_is_vowel)| (x.break & ^rules.vowel (j)))) |
		(x.break & (^x.not_begin & ^rules.vowel (i) | ^x.not_end & ^rules.vowel (j))) |
		(x.begin|x.not_begin|x.end|x.not_end|x.break|x.prefix|x.suffix)&x.illegal_pair
		then
		     do;
		     call ioa_$nnl ("consistency error");
err:		     do k = 1 to loc-1 while (substr (source_table, loc-k, 1) ^= new_line);
		     end;
		     do l = 0 to bc/9-loc while (substr (source_table, loc+l, 1) ^= new_line);
		     end;
		     if ^errflag then
			call ioa_$nnl (" before * on following line");
		     call ioa_ (":^/    " || substr (source_table, loc-k+1, k-1) ||
			"*" || substr (source_table, loc, l));
		     if fatal_flag then return ("1"b);	/* fatal error, can't continue */
		     char = substr (source_table, loc-1, 1);
		     do loc = loc by 1 while (char ^= "," &
			     char ^= new_line & char ^= "$");
			char = substr (source_table, loc, 1);
		     end;
		     errflag = "1"b;
		end;
	     end;
	end;

	call hcs_$delete_acl_entries (get_wdir_ (), "digrams", addr (acl), 1, code);

/* at end of table, make sure "$" follows and terminate segment */

	if substr (source_table, loc, 1) ^= "$"
	then do;
dollar_error:
	     call ioa_ ("$ not found at end of segment");
	     return ("1"b);
	end;
	call term_$seg_ptr (source_table_ptr, code);
	return (errflag);

/* get next letter, space, or "-" */

next_char: procedure;
	     char = substr (source_table, loc, 1);
	     loc = loc + 1;
	     if (char<"a" | char>"z") & char ^= " " & char ^= "-"
	     then do; call ioa_$nnl ("alpha character expected"); goto err; end;
	end;

/* get next space or "1" */

next_char_bit: procedure;
	     char = substr (source_table, loc, 1);
	     if char ^= " " & char ^= "1"
	     then
		do;
		call ioa_$nnl ("space or 1 expected");
		goto err;
	     end;
	     loc = loc + 1;
	end;

/* get next space, "1", ",", or new_line */

next_bit:	procedure;
	     char = substr (source_table, loc, 1);
	     string (end) = "0"b;			/* fool indent */
	     loc = loc + 1;
	     if char ^= " "
	     then
		if char = "," | char = new_line
		then end = "1"b;
		else
		if char ^= "1"
		then
		     do;
		     call ioa_$nnl ("space, 1, comma, or new line expected");
		     goto err;
		end;
	end;

/* get next letter if this unit is a 2-letter unit */

next_letter: proc (i);
dcl  i fixed bin;
	     if letters_split (i).second ^= " "
	     then
		do;
		call next_char;
		if char ^= letters_split (i).second
		then
		     do;
		     call ioa_$nnl ("""" || letters_split (i).second || """ expected");
		     goto err;
		end;
	     end;
	end;

/* Add a line to ALM program */

addline:	proc (string);
dcl  string char (30) varying;
	     substr (alm_prog, seg_index, length (string) + 1) = string || "
";
	     seg_index = seg_index + length (string) + 1;
	end;

     end;
