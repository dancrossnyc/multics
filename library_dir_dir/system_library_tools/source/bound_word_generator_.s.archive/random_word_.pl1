/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This procedure generates a pronounceable random word of
   caller specified length and returns the
   word and the hyphenated (divided into syllables) form of the word.

   dcl random_word_ entry ((0:*) fixed, (0:*) bit(1) aligned, fixed, fixed, entry, entry);

   call random_word_ (word, hyphens, length, n, random_unit, random_vowel);

   word          random word, 1 unit per array element. (Output)

   hyphens       position of hyphens, bit on indicates hyphen appears after
   corresponding unit in "word". (Input)

   length        length of word to be generated in letters. (Input)

   n             actual length of word in units. (Output)

   random_unit   routine to be called to generate a random unit. (Input)

   random_vowel  routine to be called to generate a random vowel. (Input)

*/

random_word_: procedure (password, hyphenated_word, length, word_length, random_unit, random_vowel);

%include digram_structure;
dcl  debug bit (1) aligned static init ("0"b);		/* set for printout of words that can't be generated */
dcl  password (0:*) fixed bin;
dcl  hyphenated_word (0:*) bit (1) aligned;
dcl  length fixed bin;
dcl  word_length fixed bin;
dcl  number float bin (27);
dcl  nchars fixed;					/* number of characters in password */
dcl  index fixed init (1);				/* index of current unit in password */
dcl  i fixed;
dcl  syllable_length fixed init (1);			/* 1 when next unit is 1st in syllable, 2 if 2nd, etc. */
dcl  cons_count fixed init (0);			/* count of consecutive consonants in syllable preceeding current unit */
dcl  vowel_found aligned bit (1);			/* 1 if vowel was found in syllable before this unit */
dcl  last_vowel_found aligned bit (1);			/* same for previous unit in this syllable */
dcl (first, second) fixed init (1);			/* index into digram table for current pair */
dcl (random_unit, random_vowel) entry (fixed);
dcl  unit fixed bin;
dcl  ioa_$nnl entry options (variable);

	do i = 0 to length;
	     password (i) = 0;
	     hyphenated_word (i) = "0"b;
	end;
	nchars = length;

/* get rest of units in password */

	unit = 0;
	do index = 1 by 1 while (index <= nchars);
	     if syllable_length = 1
	     then
		do;				/* on first unit of a syllable, use any unit */
keep_trying:	unit = abs (unit);			/* last unit was accepted (or first in word), make positive */
		goto first_time;
retry:		unit = -abs (unit);			/* last unit was not accepted, make negative */
first_time:
		if index = nchars			/* if last unit of word must be a syllable, it must be a vowel */
		then call random_vowel (unit);
		else call random_unit (unit);
		password (index) = abs (unit);	/* put actual unit in word */
		if index ^= 1 then if digrams (password (index-1), password (index)).illegal_pair
		     then goto retry;		/* this pair is illegal */
		if rules (password (index)).not_begin_syllable then goto retry;
		if letters_split.second (password (index)) ^= " "
		then
		     if index = nchars
		     then goto retry;
		     else
		     if index = nchars-1 & ^rules (password (index)).vowel & ^rules (password (index)).alternate_vowel
		     then goto retry;		/* last unit was a double-letter unit and not a vowel */
		     else if unit < 0
		     then goto keep_trying;
		     else nchars = nchars - 1;
		else if unit < 0 then goto keep_trying;
		syllable_length = 2;
		if rules (password (index)).vowel | rules (password (index)).alternate_vowel
		then
		     do;
		     cons_count = 0;
		     vowel_found = "1"b;
		end;
		else
		do;
		     cons_count = 1;
		     vowel_found = "0"b;
		end;
		last_vowel_found = "0"b;
	     end;
	     else
	     do;
		call generate_unit;
		if second = 0 then goto all_done;	/* we have word already */
	     end;
	end;

/* enter here at end of word */

all_done:
	word_length = index - 1;
	return;

/* various other entries */

debug_on:	entry;
	debug = "1"b;
	return;

debug_off: entry;
	debug = "0"b;
	return;
						/*
						    */
						/* PROCEDURE GENERATE_UNIT */

/* generate next unit to password, making sure
   that it follows these rules:
   1. Each syllable must contain exactly 1 or 2 consecutive vowels,
   where y is considered a vowel.
   2. Syllable end is determined as follows:
   a. Vowel is generated and previous unit is a consonant and
   syllable already has a vowel.  In this case new syllable is
   started and already contains a vowel.
   b. A pair determined to be a "break" pair is encountered.
   In this case new syllable is started with second unit of this pair.
   c. End of password is encountered.
   d. "begin" pair is encountered legally.  New syllable is started
   with this pair.
   e."end" pair is legally encountered.  New syllable has nothing yet.
   3. Try generating another unit if:
   a. third consecutive vowel and not y.
   b. "break" pair generated but no vowel yet in current syllable
   or previous 2 units are "not_end".
   c. "begin" pair generated but no vowel in syllable preceeding
   begin pair, or both previous 2 pairs are designated "not_end".
   d. "end" pair generated but no vowel in current syllable or in "end" pair.
   e. "not_begin" pair generated but new syllable must begin
   (because previous syllable ended as defined in 2 above).
   f. vowel is generated and 2a is satisfied, but no syllable break is possible in previous 3 pairs.
   g. Second & third units of syllable must begin, and first unit is "alternate_vowel".

   The done routine checks for required prefix vowels & end of word conditions. */

generate_unit: procedure;
dcl 1 x aligned like digrams;
dcl  try_for_vowel bit (1) aligned;
dcl  unit_count fixed init (1);			/* count of tries to generate this unit */
dcl  v bit (1) aligned;
dcl  i fixed;

	     first = password (index-1);

/* on last unit of word and no vowel yet in syllable, or if previous pair
   requires a vowel and no vowel in syllable, then try only for a vowel */

	     if syllable_length = 2			/* this is the second unit of syllable */
	     then try_for_vowel = ^vowel_found & index = nchars; /* last unit of word and no vowel yet, try for vowel */
	     else					/* this is at least the third unit of syllable */
	     if ^vowel_found | digrams (password (index-2), first).not_end
	     then try_for_vowel = digrams (password (index-2), first).suffix;
	     else try_for_vowel = "0"b;
	     goto keep_trying;			/* on first try of a unit, don't make the tests below */

/* come here to try another unit when previous one was not accepted */

try_more:
	     unit = -abs (unit);			/* last unit was not accepted, set sign negative */
	     if unit_count = 100
	     then
		do;
		if debug
		then
		     do;
		     call ioa_$nnl ("100 tries failed to generate unit.^/ password so far is: ");
		     do i = 1 to index;
			call ioa_$nnl ("^a", letters (password (i)));
		     end;
		     call ioa_$nnl ("^/");
		end;
		call random_word_ (password, hyphenated_word, length, index, random_unit, random_vowel);
		second = 0;
		return;
	     end;

/* come here to try another unit whether last one was accepted or not */

keep_trying:
	     if try_for_vowel
	     then call random_vowel (unit);
	     else call random_unit (unit);
	     second = abs (unit);			/* save real value of unit number */
	     if unit > 0 then unit_count = unit_count + 1; /* count number of tries */

/* check if this pair is legal */

	     if digrams (first, second).illegal_pair
	     then goto try_more;
	     else
	     if first = second			/* if legal, throw out 3 in a row */
	     then
		if index >2
		then
		     if password (index-2) = first
		     then goto try_more;
	     if letters_split (second).second ^= " "	/* check if this is 2 letters */
	     then
		if index = nchars			/* then if this is the last unit of word */
		then goto try_more;			/* then a two-letter unit is illegal */
		else nchars = nchars - 1;		/* otherwise decrement number of characters */
	     password (index) = second;
	     if rules (second).alternate_vowel
	     then v = ^rules (first).vowel;
	     else v = rules (second).vowel;
	     x.begin = digrams (first, second).begin;
	     x.not_begin = digrams (first, second).not_begin;
	     x.end = digrams (first, second).end;
	     x.not_end = digrams (first, second).not_end;
	     x.break = digrams (first, second).break;
	     x.prefix = digrams (first, second).prefix;
	     x.suffix = digrams (first, second).suffix;
	     x.illegal_pair = digrams (first, second).illegal_pair;
	     if syllable_length > 2			/* force break if last pair must be followed by a */
	     then					/* vowel and this unit is not a vowel */
		if digrams (password (index-2), first).suffix
		then
		     if ^v then break = "1"b;		/* (if last pair was not_end, new_unit gave us a vowel) */

/* In the notation to the right, the series of letters and dots stands
   for the last n units in this syllable, to be interpreted as follows:
   v stands for a vowel (including alternate_vowel)
   c stands for a consonant
   x stands for any unit
   the dots are interpreted as follows (c is used as example)
   c...c  one or more consecutive consonants
   c..c   zero or more consecutive consonants
   ...c   one or more consecutive consonants from beginning of syllable
   ..c    zero or more consecutive consonants from beginning of syllable
   the vertical line | marks a syllable break.
   The group of symbols indicates what units there are in current
   syllable.  The last symbol is always the current unit.
   The first symbol is not necessarily the first unit in the
   syllable, unless preceeded by dots.  Thus, "vcc..cv" should be
   interpreted as "..xvcc..cv" (i.e., add "..x" to the beginning of all
   syllables unless dots begin the syllable.). */

	     if syllable_length = 2 & not_begin		/* pair may not begin syllable */
	     then goto loop;			/* rule 3e. */
	     if vowel_found
	     then
		if cons_count ^= 0
		then
		     if begin			/* vc...cx */
		     then
			if syllable_length ^= 3 & not_end_ (3) /* vc...cx begin */
			then			/* can we break at vc..c|cx */
			     if not_end_ (2)	/* no, try a break at vc...c|x */
			     then goto loop;	/* rule 3c. */
			     else call done (v, 2);	/* vc...c|x begin, treat as break */
			else call done (v, 3);	/* vc..c|cx begin */
		     else
		     if not_begin			/* vc...cx ^begin */
		     then
			if break			/* vc...cx not_begin */
			then
			     if not_end_ (2)	/* vc...c|x break */
			     then goto loop;	/* rule 3b, can't break */
			     else call done (v, 2);	/* vc...c|x break */
			else
			if v			/* vc...cx ^break not_begin */
			then			/* vc...cv ^break not_begin */
			     if not_end_ (2)	/* try break at vc...c|v */
			     then goto loop;	/* rule 3f, break no good */
			     else call done ("1"b, 2); /* vc...c|v treat as break */
			else
			if end			/* vc...cc ^break not_begin */
			then call done ("0"b, 1);	/* vc...cc| end */
			else call done ("1"b, 0);	/* vc...cc ^break ^end not_begin */
		     else
		     if v				/* vc...cx ^begin ^not_begin */
		     then
			if not_end_ (3) & syllable_length ^= 3 /* vc...cv rule 2a says we must break somewhere */
			then
			     if not_end_ (2)	/* vc..c|cv doesn't work */
			     then
				if cons_count > 1	/* vc...c|v doesn't work */
				then		/* vc...ccv */
				     if not_end_ (4) /* try vc..c|ccv */
				     | digrams (password (index-2), first).not_begin
				     then goto loop; /* rule 3f */
				     else call done ("1"b, 4); /* vc...c|ccv */
				else goto loop;	/* vc...c|v and vc..c|cv are no good */
			     else call done ("1"b, 3); /* vc...c|v treat as break */
			else call done ("1"b, 3);	/* vc..c|cv treat as break */
		     else call done ("1"b, 0);	/* vc...cc ^begin ^not_begin */
		else				/* vowel found and last unit is not consonant => last unit is vowel */
		if v & rules.vowel (password (index-2)) & index > 2
		then goto loop;			/* rule 3a, 3 consecutive vowels non-y */
		else
		if end				/* vx */
		then call done ("0"b, 1);		/* vx end */
		else
		if begin				/* vx ^end */
		then
		     if last_vowel_found		/* vx begin */
		     then
			if v			/* v...vvx begin */
			then
			     if syllable_length = 3	/* v...vvv begin */
			     then
				if rules (password ((index-2))).alternate_vowel /* |vvv begin */
				then goto loop;	/* rule 3g, |"y"|vv is no good */
				else call done ("1"b, 3); /* |v|vv begin */
			     else
			     if not_end_ (3)	/* v...vvv begin */
			     then goto loop;	/* rule 3c, v...v|vv no good */
			     else call done ("1"b, 3); /* v...v|vv begin */
			else
			if syllable_length = 3	/* v...vvc begin */
			then
			     if rules.alternate_vowel (password (index-2)) /* |vvc begin */
			     then goto loop;	/* rule 3g, |"y"|vc is no good */
			     else
			     if rules.vowel (password (index-2)) /* |x|vc begin */
			     then call done ("1"b, 3); /* |v|vc begin */
			     else goto loop;	/* |c|vc begin is illegal */
			else
			if not_end_ (3)		/* v...vvc begin */
			then			/* v...vvc begin try to split pair */
			     if not_end_ (2)	/* v...vvc begin */
			     then goto loop;	/* v...vv|c no good */
			     else call done ("0"b, 2); /* v...vv|c */
			else call done ("1"b, 3);	/* v...v|vc begin */
		     else				/* try splitting begin pair */
		     if syllable_length > 2		/* ..cvx begin */
		     then
			if not_end_ (2)		/* ...cvx begin */
			then goto loop;		/* rule 3c, ...cv|x no good */
			else call done (v, 2);	/* ...cv|x begin */
		     else call done ("1"b, 0);	/* |vx begin */
		else
		if break				/* ..xvx ^begin ^end */
		then
		     if not_end_ (2) & syllable_length > 2 /* ..xvx break */
		     then goto loop;		/* rule 3b, ..xv|x is no good */
		     else call done (v, 2);		/* ..v|x break */
		else call done ("1"b, 0);		/* ..vx ^end ^begin ^break */
	     else
	     if break				/* ...cx */
	     then goto loop;			/* rule 3b, ...c|x break no good */
	     else
	     if end				/* ...cx ^break */
	     then
		if v				/* ...cx end */
		then call done ("0"b, 1);		/* ...cv| end (new syllable) */
		else goto loop;			/* rule 3b, ...cc| end no good */
	     else
	     if v					/* ...cx ^end ^break */
	     then
		if begin & syllable_length > 2	/* ...cv ^end ^break */
		then goto loop;			/* c...c|cv ^end ^break begin, rule 3c */
		else call done ("1"b, 0);		/* ...cv ^end ^break ^begin */
	     else
	     if begin				/* ...cc ^break ^end */
	     then
		if syllable_length > 2		/* ..ccc begin */
		then goto loop;			/* rule 3c, ...ccc begin */
		else call done ("0"b, 3);		/* |cc begin */
	     else call done ("0"b, 0);		/* ..xcc ^end ^break ^begin */

/* ******** return here when unit generated has been accepted ****** */

	     return;

/* ******** enter here when unit generated was good, but we don't want to use it because
   it was supplied as a negative number by random_unit or random_vowel ********* */

accepted_but_keep_trying: if letters_split (second).second ^= " "
	     then nchars = nchars + 1;		/* pretend unit was no good */
	     unit = -unit;				/* make positive to say that it would have been accepted */
	     goto keep_trying;
						/* ******** enter here when unit generated is no good ******* */

loop:	     if letters_split (second).second ^= " " then nchars = nchars + 1;
	     goto try_more;
						/*
						    */
						/* PROCEDURE DONE */

/* this routine is internal to generate_unit because it can return to loop */
/* call done when new unit is generated and determined to be
   legal. Arguments are new values of:
   vf  vowel_found
   mb  syllable_length (number of units in syllable. 0 means increment for this unit)
*/

done:	     procedure (vf, sl);
dcl  vf bit (1) aligned;
dcl  sl fixed;

/* if we are not within first 2 units of syllable, check if
   vowel must precede this pair */

		if sl ^= 2 then if syllable_length ^= 2 then if prefix then if ^rules.vowel (password (index-2))
			     then			/* vowel must precede pair but no vowel precedes pair */
				if vowel_found	/* if there is a vowel in this syllable, */
				then		/* we may be able to break this pair     */
				     if not_end_ (2) /* check if this pair may be treated as break */
				     then goto loop; /* no, previous 2 units can't end */
				     else		/* yes, break can be forced */
				     do;
					call done ("0"b, 2); /* ...cxx or ...cvx */
					return;
				     end;
				else goto loop;	/* no vowel in syllable */

/* Check end of word conditions.  If end of word is reached, then
   1. We must have a vowel in current syllable, and
   2. This pair must be allowed to end syllable
*/

		if sl ^= 1
		then
		     if index = nchars
		     then
			if not_end
			then goto loop;
			else
			if vf = "0"b
			then goto loop;

/* A final "e" may not be the only vowel in the last syllable. */

		if index = nchars
		then
		     if rules (second).no_final_split	/* this bit is on for "e" */
		     then
			if sl ^= 1
			then
			     if rules.vowel (first)	/* e preceded by vowel is ok, however */
			     then;
			     else
			     if ^vowel_found|syllable_length<3 /* otherwise previous 2 letters must be */
			     then goto loop;	/* able to end the syllable */
			     else
			     if unit < 0
			     then goto accepted_but_keep_trying;
			     else sl = 0;
		if unit < 0 then goto accepted_but_keep_trying;
		if v | sl = 1
		then cons_count = 0;		/* this unit is a vowel or new syllable is to begin */
		else
		if sl = 0
		then cons_count = cons_count + 1;	/* this was a consonant, increment count */
		else				/* a new syllable was started some letters back, cons_count gets */
		cons_count = min (sl-1, cons_count+1);	/* incremented, but no more than number of units in syllable */
		if sl = 0
		then syllable_length = syllable_length + 1;
		else syllable_length = sl;
		if syllable_length > 3
		then last_vowel_found = vowel_found;
		else last_vowel_found = "0"b;
		vowel_found = vf;
		if index - syllable_length + 1 ^= nchars
		then hyphenated_word (index - syllable_length + 1) = "1"b;

	     end done;

	end generate_unit;
						/*
						    */
						/* PROCEDURE NOT_END_ */
						/* not_end_(i) returns "1"b when ( password(index-i), password(index-i+1) )
						   may not end a syllable, or when password(index-i+2) may not begin a syllable */

not_end_:	procedure (i) returns (bit (1));
dcl  i fixed;
	     if i = index
	     then return (^rules.vowel (password (1)));
	     if i ^= 1
	     then
		if rules.not_begin_syllable (password (index-i+2)) then return ("1"b);
	     return (digrams (password (index-i), password (index-i+1)).not_end);
	end;

     end;
