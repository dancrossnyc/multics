/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_ast_name_: proc (a_astep, a_sstp, a_sstnp, retstr);

dcl (a_astep, a_sstp, a_sstnp) ptr;

dcl  retstr char (*);
%include sst;
%include sstnt;
%include aste;


	astep = a_astep;
	sstp = a_sstp;
	sstnp = a_sstnp;

	if fixed (rel (astep), 18) < fixed (rel (sstp -> sst.astap), 18) then do;
fail:	     retstr = "CANNOT GET PATHNAME";
	     return;
	end;

	if rel (astep) = rel (sstp -> sst.root_astep) then do;
	     retstr = ">";
	     return;
	end;

	retstr = recurse (astep, length (retstr));
	return;

recurse:	proc (astep, namel) returns (char (*));

dcl (ptsi, ra) fixed bin;
dcl  namel fixed bin;

dcl  astep ptr, name char (32) varying;

	     ra = fixed (rel (astep), 18);		/* for ease */
	     if ra < fixed (rel (sstp -> sst.astap), 18) then go to fail;
	     do ptsi = 3 to 0 by -1 while (ra < sstnp -> sstnt.ast_offsets (ptsi));
	     end;
	     if ptsi < 0 then go to fail;

	     if ptsi ^= fixed (astep -> aste.ptsi, 2) then go to fail;

	     name = sstnp -> sstnt.names (
		divide (ra - sstnp -> sstnt.ast_offsets (ptsi),
		sstnp -> sstnt.ast_sizes (ptsi), 18, 0) +
		sstnp -> sstnt.ast_name_offsets (ptsi));

	     if length (name) = 0 then name = "CANNOT-GET";

	     if astep -> aste.par_astep = rel (sstp -> sst.root_astep) then do;
		if length (name) >= namel then return ("");
		else return (">" || name);
	     end;


	     if namel = 1 then return (">");
	     if length (name) >= namel then return (
		recurse (ptr (astep, astep -> aste.par_astep),
		namel -1) || ">");

	     return (recurse (ptr (astep, astep -> aste.par_astep),
		namel - length (name) - 1)
		|| ">" || name);
	end;
     end;
