/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* FORMAT_FNP_TRACE_MSG_ - A procedure to interpret an FNP trace table entry */

/* Written May 1977 by Larry Johnson */
/* Modified August 1979 by Larry Johnson for better decoding of dia codes */

/* This module performs an ioa-like edit of a control string found in od355_msgs.
   There is one control for each kind of trace message. The string may contain
   only ^d, ^o, ^w, ^b, ^e, and ^f codes with their normal ioa_ meaning. In addition,
   the special request ^n* may be used, with the following meanings:

   ^1*	module|offset
   ^2*	opblock name
   ^3*	3rd word of jump table
   ^4*	dia mailbox opcode
   ^5*	alter parameters sub-code
*/

format_fnp_trace_msg_: proc (arg_tmsgp, arg_modchp, arg_string);

/* Parameters */

dcl  arg_tmsgp ptr;					/* Pointer to the trace table entry to interpret */
dcl  arg_modchp ptr;				/* Address of module chain */
dcl  arg_string char (*) var;				/* Where to put the result */

/* Automatic */

dcl (i, j) fixed bin;
dcl  p ptr;
dcl  argno fixed bin;				/* For counting args */
dcl  edit_temp char (50) var;

dcl  ctlp ptr;					/* Pointer to unprocess part of control string */
dcl  ctll fixed bin;				/* Its length */
dcl  ctl char (ctll) based (ctlp);

dcl  ctl_accp ptr;					/* Pointer to origional ACC control string */
dcl 1 ctl_acc aligned based (ctl_accp),
    2 length fixed bin (8) unal,
    2 msg char (ctl_acc.length) unal;

/* Format of a trace table entry */

dcl  tmsgp ptr;
dcl 1 tmsg unal based (tmsgp),
    2 module bit (6) unal,				/* Module that logged entry */
    2 type bit (6) unal,				/* Index into possible msgs for that module */
    2 length bit (6) unal,				/* Number of data words */
    2 time bit (18) unal,				/* Relative time message was logged */
    2 data (1) bit (18) unal;				/* Array of optional data words */

/* Format of module chain table */

dcl  modchp ptr;
dcl 1 modch aligned based (modchp),
    2 nmodules fixed bin,
    2 entries (modch.nmodules),
      3 name char (4),
      3 address fixed bin;

/* Format of the third word of a jump table */

dcl  jumptblp ptr;
dcl 1 jumptbl unal based (jumptblp),
    2 channel bit (4),
    2 device bit (2),
    2 subchan bit (5),
    2 module bit (7);

/* Things in od355_msgs */

dcl  od355_msgs$ ext;
dcl  od355_msgs$trace_modtab (1) bit (18) aligned ext;	/* Array of offsets for each module */
dcl  message_offsetsp ptr;
dcl  message_offsets (1) bit (18) aligned based (message_offsetsp); /* Offsets to the individual acc strings */

/* External */

dcl  ioa_$rsnpnnl entry options (variable);
dcl  db_fnp_opblock_util_$get_name entry (bit (18), char (*));
dcl  db_fnp_sym_util_$lookup_member entry (fixed bin, char (*), char (*));

dcl (addr, bin, hbound, index, lbound, length, ptr, substr, verify) builtin;

/* Find the origional control string in od355_msgs */

	tmsgp = arg_tmsgp;				/* Address of tracetable entry */
	modchp = arg_modchp;
	i = bin (tmsg.module);			/* Module number */
	j = bin (tmsg.type);			/* Message number for that module */
	p = addr (od355_msgs$);			/* For doing pointercalculations */
	message_offsetsp = ptr (p, bin (od355_msgs$trace_modtab (i))); /* Address of table of messages for the module */
	ctl_accp = ptr (p, bin (message_offsets (j)));	/* Address of ACC string */
	ctlp = addr (ctl_acc.msg);			/* For looking at text part */
	ctll = length (ctl_acc.msg);

/* Now parse the input "ioa_" string, editing each operand */

	call ioa_$rsnpnnl ("^.3b", arg_string, (0), tmsg.time); /* Start line with the time */
	arg_string = arg_string || " ";
	argno = 0;
	do while (ctll > 0);			/* Loop till string exhausted */
	     i = index (ctl, "^");			/* Look for next control */
	     if i = 1 then do;			/* Found one */
		i = verify (substr (ctl, 2), "0123456789."); /* Count digits */
		if substr (ctl, i+1, 1) ^= "*" then do; /* Normal ioa_ control */
		     argno = argno + 1;		/* Get next argument */
		     if substr (ctl, i+1, 1) = "b" then /* ^b requries a bit arg */
			call ioa_$rsnpnnl (substr (ctl, 1, i+1), edit_temp, (0), tmsg.data (argno));
		     else call ioa_$rsnpnnl (substr (ctl, 1, i+1), edit_temp, (0), bin (tmsg.data (argno), 18));
						/* Let ioa_ edit number */
		     arg_string = arg_string || edit_temp;
		end;
		else do;				/* Special dump edit request */
		     j = bin (substr (ctl, 2, i-1));	/* Decode request nubber */
		     argno = argno + 1;
		     call special_edit (j);
		end;
		ctlp = substraddr (ctl, i+2);		/* Next character to deal with */
		ctll = ctll - i - 1;
	     end;
	     else do;				/* The next char is not a "^" */
		if i = 0 then i = ctll;
		else i = i - 1;			/* Number of characters berore next "^" */
		arg_string = arg_string || substr (ctl, 1, i); /* Copy to string under construction */
		ctlp = substraddr (ctl, i+1);		/* Skip over them */
		ctll = ctll - i;
	     end;
	end;

/* All items have been turned into character rsults */

	return;


/* Procedure to perform special editing requests */

special_edit: proc (n);

dcl  n fixed bin;					/* The special type */
dcl  i fixed bin;
dcl  idx fixed bin;
dcl (diff, min_diff) fixed bin;
dcl  addr_val fixed bin;
dcl  opname char (6);
dcl  opval bit (18);

	     go to special_ed (n);

special_ed (1):					/* ^1* means edit as module|offset */

	     min_diff = 32768;
	     idx = 0;
	     addr_val = bin (tmsg.data (argno));
	     do i = 1 to modch.nmodules;
		diff = addr_val - modch.address (i);
		if diff >= 0 then
		     if diff < min_diff then do;
			idx = i;
			min_diff = diff;
		     end;
	     end;
	     if idx = 0 then call ioa_$rsnpnnl ("^6w", edit_temp, (0), addr_val); /* No conversion */
	     else call ioa_$rsnpnnl ("^o (^a|^o)", edit_temp, (0), addr_val, modch.name (idx), min_diff);
	     arg_string = arg_string || edit_temp;
	     return;

special_ed (2):					/* ^2* means explain opblock number */

	     i = bin (tmsg.data (argno));
	     substr (opval, 1, 9) = "777"b3;		/* rebuild opblock */
	     substr (opval, 10, 9) = bit (bin (i, 9), 9);
	     call db_fnp_opblock_util_$get_name (opval, opname);
	     if opname = "" then opname = "?";

	     call ioa_$rsnpnnl ("^3w (^a)", edit_temp, (0), i, opname);
	     arg_string = arg_string || edit_temp;
	     return;

special_ed (3):					/* ^3* means third word of jump table */

	     jumptblp = addr (tmsg.data (argno));
	     call ioa_$rsnpnnl ("^.3b (ch=^o dv=^o subch=^o mod=^o)", edit_temp, (0),
		tmsg.data (argno),
		bin (jumptbl.channel, 4),
		bin (jumptbl.device, 2),
		bin (jumptbl.subchan, 5),
		bin (jumptbl.module, 7));
	     arg_string = arg_string || edit_temp;
	     return;

special_ed (4):					/* ^4* means dia opcode */
	     call db_fnp_sym_util_$lookup_member (bin (tmsg.data (argno)), "diaop", opname);
	     call ioa_$rsnpnnl ("^o (^a)", edit_temp, (0), bin (tmsg.data (argno)), opname);
	     arg_string = arg_string || edit_temp;
	     return;

special_ed (5):					/* ^5* means alter paramaters code */
	     call db_fnp_sym_util_$lookup_member (bin (substr (tmsg.data (argno), 1, 9)), "alterp", opname);
	     call ioa_$rsnpnnl ("^o (^a)", edit_temp, (0), bin (tmsg.data (argno)), opname);
	     arg_string = arg_string || edit_temp;
	     return;

	end special_edit;

/* Simulate substraddr builtin temporarily */

substraddr: proc (c, n) returns (ptr);

dcl  c char (*);
dcl  n fixed bin;
dcl  ca (n) char (1) unal based (addr (c));

	     return (addr (ca (n)));

	end substraddr;

     end format_fnp_trace_msg_;
