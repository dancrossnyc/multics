/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* "ioa_" for on-line dumper, generates page headers etc. */
/* converted to 6180, v2pl1 by R Mullen Feb 1973 */

od_print_: proc (num_nl) recursive;			/* Calls itself to print page headings */

dcl  num_nl fixed bin;

dcl (bufp ptr,
    (linect, cur_word_no, erf_no, proc_no, seg_no, page_no,
     zero init (0),
     two init (2),
     three init (3),
     wpl) fixed bin,
    (ioname char (32) init ("od_output_"),
     time_string char (24),				/* date and time */
     fmtheader char (51)
     init ("^|^-ERF ^d^3-^a^3-Page ^3d^2-Process ^d, Seg ^3o^2/"),
     buffer char (4104)) aligned) int static,		/* 4096 + 8 characters of slop */
     status bit (72) aligned,				/* for ios_ calls */
     p ptr,
    (i,						/* Misc */
     fmt_sw,					/* 0 - fast 8 words, 1 - regular format */
     n,						/* length of formatted string */
     nnl) fixed bin;				/* # of NL chars in formatted string */

declare 1 fun based aligned,				/* For adding NL plus PAD */
        2 fill char (n) unaligned,
        2 ny bit (36) unaligned;

dcl  formline_ entry (fixed bin, fixed bin, ptr, fixed bin, fixed bin),
     format_dump_line_ entry (ptr),			/* Plus three args passed to "od_print_" */
     ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     date_time_ entry (fixed bin (52), char (*) aligned),
     od_print_ entry options (variable);

dcl  format_dump_line_$line_size ext fixed bin;

dcl (addr, addrel, divide) builtin;

/* 
   Format the output line. */

	fmt_sw = 1;				/* not special, do formatting */
	nnl = num_nl;

test_page:					/* First see if page overflow */
	if nnl >= 0
	then do;

	     if (linect + nnl) > 54			/* Check for page overflow. */
	     then do;

		linect = -3;			/* Reset line counter. */
		page_no = page_no + 1;		/* Increment the page number. */
		call od_print_ (three, fmtheader,
		erf_no, time_string, page_no, proc_no, seg_no);
						/* Print out page heading. */
	     end;

	     linect = linect + nnl;			/* Now update the counter */

	end;

	p = addrel (bufp, cur_word_no);		/* Pointer to space to generate new text */

	if fmt_sw ^= 0
	then do;

	     n = 256;				/* Allow for multi-line formats */
	     call formline_ (two, three, p, n, zero);

	     p -> fun.ny = "000001010001111111001111111001111111"b;
						/* Add NL char plus PADs */

	     cur_word_no = cur_word_no + divide (n + 4, 4, 17, 0);

	end;

	else do;

	     call format_dump_line_ (p);
	     cur_word_no = cur_word_no + wpl;

	end;

	if cur_word_no > 960			/* 1024 - 64 */
	then do;

	     n = cur_word_no * 4;			/* Convert words to characters */
	     cur_word_no = 0;			/* and reset counter */

	     call ios_$write (ioname, bufp, 0, n, i, status);

	end;

	return;

op_fmt_line: entry (num_nl);				/* Nominally */

	nnl = 1;
	fmt_sw = 0;

	go to test_page;

/* 
   Miscellaneous entry points */

op_finish: entry;

	if cur_word_no = 0
	then return;

	n = cur_word_no * 4;			/* Same as before */
	cur_word_no = 0;				/* .. */

	call ios_$write (ioname, bufp, 0, n, i, status);

	return;

op_new_seg: entry (segno);

dcl  segno fixed bin;

	seg_no = segno;
	if seg_no = 0
	then proc_no = proc_no + 1;

op_new_page: entry;

	linect = 54;

	return;

op_init:	entry (erfno, time_val);

dcl  erfno fixed bin,
     time_val fixed bin (52);

	erf_no = erfno;
	call date_time_ (time_val, time_string);

	wpl = format_dump_line_$line_size;
	bufp = addr (buffer);
	cur_word_no = 0;
	page_no = 0;
	proc_no = 0;
	seg_no = 0;
	linect = 54;

     end od_print_;
