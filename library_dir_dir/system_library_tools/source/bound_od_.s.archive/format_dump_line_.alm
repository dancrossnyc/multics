" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************


	name	format_dump_line_

	entry	format_dump_line_
	segdef	line_size		for od_print_

" dcl format_dump_line_ entry(ptr)

" call format_dump_line_(bufp)

" Gets input data from caller of its caller

	bool	two_zeroes,060060	Will be OR'ed in
	bool	two_pad,177177	Will be shifted

	set	get,0
	set	put,5

format_dump_line_:
	eppbp	ap|2,*
	eppbp	bp|0,*		Load pointer to buffer

	lda	two_sp_pad	Get two blanks
	sta	bp|put+3
	sta	bp|put+7
	sta	bp|put+11
	sta	bp|put+15
	sta	bp|put+19
	sta	bp|put+23
	sta	bp|put+27

	lda	nl
	sta	bp|put+31

	ldq	blanks		Get four blanks
	stq	bp|4		Separation between loc fields and 8-words

	eppap	sp|26,*		Get arg ptr of caller
	lda	ap|2,*		Convert "abs_loc"
	tmi	set_blanks	Not relevant, store blanks in field
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	two_zeroes,du
	stq	bp|1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|0

	tra	pick_loc		Now format offset within seg

set_blanks:
" No absolute location, stuff in eight blanks
	stq	bp|0
	stq	bp|1

pick_loc:				" Convert offset value
	lda	ap|4,*		Second arg
	eaq	two_pad		Initialize
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	two_zeroes,du
	stq	bp|3

	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|2

	eppap	ap|6,*		Get pointer to data
	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	get,get+1
	set	put,put+4

	lda	ap|get
	even;	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+2
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+1
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	lrl	3
	qrl	6
	orq	zeroes
	stq	bp|put+0

	set	put,put+4		One last update

	short_return

zeroes:	aci	"0000"
blanks:	aci	"    "		Four blanks

two_sp_pad:
	vfd	o36/177177040040	Two blanks between formatted words

nl:	vfd	o36/177177177012	NL char plus padding

line_size:
	vfd	36/put		Last updated value is size of buffer

	end	format_dump_line_	
