/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

online_355_dump_: proc (a_dumpp, number);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *	online_355_dump_
   *
   *	This is a subroutine to produce a dump suitable for printing from a fnp
   *	fdump. This subroutine is called with a pointer to the dump to be printed
   *	and with the stream name "od_output_" already attached to the output device.
   *
   *	Originally written by Dick Snyder 05/31/73
   *	Modified for new 355 software by Robert Coren 04/01/75
   *	Modified for multiple 355s by Robert Coren 10/08/75
   *	Modified for new communications region and to add crash message by Robert Coren 06/24/76
   *	Modified 79 May 16 by Art Beattie to support 64K fnp dumps.
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/****^  HISTORY COMMENTS:
  1) change(85-05-31,Farley), approve(86-07-10,MCR7247),
     audit(86-07-18,Fawcett), install(86-07-21,MR12.0-1099):
     Allow for upto 256k FNP memory sizes (phx19295).
                                                   END HISTORY COMMENTS */


/*	EXTERNAL ENTRIES		*/


dcl  ios_$write ext entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  com_err_ ext entry options (variable);
dcl  ioa_$rsnnl ext entry options (variable);
dcl  ioa_$rs ext entry options (variable);
dcl  format_355_dump_line_$line ext entry (ptr, fixed bin, ptr, ptr, fixed bin, ptr, fixed bin);
dcl  format_355_dump_line_ ext entry (ptr, fixed bin, ptr);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  format_fnp_trace_msg_ entry (ptr, ptr, char (*) var);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));


/*	AUTOMATIC STORAGE 		*/


dcl  faultp pointer;				/* points to fault data */
dcl  a_dumpp pointer;
dcl  number fixed bin;				/* fnp identifier */
dcl  st bit (72) aligned;				/* ios status word */
dcl  st_code fixed bin based (statp);			/* overlay for left half of st */
dcl  statp pointer;					/* points to st */
dcl  dumpp pointer;					/* argument copied to local variable for better code */
dcl (i, k, nelemt);					/* scratch temps */
dcl  retstring char (132);				/* string returned by ioa_$rsnnl */
dcl  retp pointer;					/* points to retstring */
dcl  retl fixed bin;				/* number of valid chars in retstring */
dcl  date_time_bound char (24);
dcl  date_time_booted char (24);
dcl  type char (5);					/* fault type */
dcl  octal char (200);				/* string written by format_355_dump_line_ */
dcl  octalp pointer;				/* points to octal */
dcl  next_module_start fixed bin;			/* address of base of a module */
dcl  dup_copy bit (144) based;			/* for copying 8 fnp words */
dcl  mem_size fixed bin (18) unsigned;			/* size of fnp memory */
dcl  mod_chain fixed bin;				/* start of module chain */
dcl  locs_to_dump fixed bin (18) unsigned;		/* number of words left to dump */
dcl  rel_addr fixed bin init (0);			/* rell address in current module being dumped */
dcl  curlp pointer;					/* points to current line being dumped in fnp image */
dcl  dupp pointer;					/* points to last non-duplicate line */
dcl  cur_loc fixed bin init (0);			/* current loc being dumped in fnp image */
dcl  cur_chain fixed bin (18) unsigned;			/* offset in dump of current module chain block */
dcl  modx fixed bin;				/* current index into module chain */
dcl  module_name char (12);
dcl  module_num fixed bin;
dcl  die_ptr ptr;
dcl  reasonp ptr;
dcl  ch_val fixed bin;
dcl  trace_edit char (128) var;
dcl  print_trace bit (1) init ("1"b);			/* ON - try printing trace data */

/*	BASED			*/

dcl  bit36 bit (36) unal based;			/* used to overlay module name in fnp module chain */
dcl  first_200_words bit (7200) aligned based (dumpp);	/* used to check if fnp core is all zero */

dcl  message_offsets (1) bit (18) aligned based;		/* list of message offsets (per module) */

dcl 1 die_reason based (reasonp) aligned,
    2 length fixed bin (8) unaligned,
    2 msg char (0 refer (die_reason.length)) unaligned;

dcl 1 die_word based (die_ptr),			/* format of illegal op word used to crash fnp */
    2 mod_num bit (4) unaligned,
    2 op_code bit (5) unaligned,
    2 reason fixed bin (8) unaligned;

dcl  dump_chars (16) bit (9) unaligned based (curlp);

/*	STRUCTURES		*/

dcl 1 core_fnpb aligned based (dumpp),			/* overlay for fnp dump in 18 bit pieces */
    2 words (0: MEM_256K - 1) bit (18) unaligned;

dcl 1 core_fnp aligned based (dumpp),			/* overlay for fnp dump in packed fixed bin */
    2 words (0: MEM_256K - 1) fixed bin (17) unaligned;


dcl 1 dump_line aligned,				/* dump line */
    2 abs_addr char (6) unaligned,			/* absolute fnp address */
    2 star char (1) unaligned,			/* duplicate line indicator */
    2 space1 char (1) unaligned,			/* blank */
    2 module char (4) unaligned,			/* module name */
    2 space2 char (1) unaligned,			/* blank */
    2 rel_addr char (6) unaligned,			/* rel address in module */
    2 space3 char (3) unaligned,			/* blanks */
    2 eight_words char (55) unaligned,			/* dump line itself */
    2 space4 char (2) unaligned,			/* blanks */
    2 ascii (16) char (1) unaligned,			/* ascii of dump_line */
    2 nl char (1) unaligned;				/* new line */

dcl 1 fault_data aligned based (faultp),		/* to overlay fault data in fnp */
    2 regs (9) fixed bin (17) unaligned,
    2 fault_number fixed bin (17) unaligned,
    2 fault_name bit (18) unaligned;

dcl 1 octal_overlay (50) unaligned based (addr (octal)),	/* to get at 6 chars at a time in octal */
    2 word char (6) unaligned,			/* octal representation of 1 fnp word */
    2 space char (1) unaligned;			/* a space */

dcl 1 modch aligned,				/* information provided by module chain */
    2 nmodules fixed bin,
    2 entries (30),
      3 name char (4),
      3 address fixed bin (24);

/*	INTERNAL STATIC */

dcl  MEM_24K fixed bin (19) uns int static options (constant) init (24576);
dcl  MEM_32K fixed bin (19) uns int static options (constant) init (32768);
dcl  MEM_64K fixed bin (19) uns int static options (constant) init (65536);
dcl  MEM_128K fixed bin (19) uns int static options (constant) init (131072);
dcl  MEM_256K fixed bin (19) uns int static options (constant) init (262144);

dcl  die_op bit (5) int static options (constant) init ("01001"b);

dcl  faults (0: 10) char (16) int static options (constant) init (
     "POWER OFF ", "POWER ON  ", "MEMORY PARITY", "ILLEGAL OPCODE", "OVERFLOW  ",
     "STORE FAULT", "DIVIDE CHECK", "ILLEGAL INT", "EXTRA INT ", "IOM FAULT", "CONSOLE ABORT");

dcl  xlate (0: 63) char (1) int static init (		/* bcd to ascii xlation table */

     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "[", "#", "@", ":", ">", "?",

     " ", "A", "B", "C", "D", "E", "F", "G", "H", "I", "&", ".", "]", "(", "<", "^",

     "|", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "-", "$", "*", ")", ";", "'",

     "+", "/", "S", "T", "U", "V", "W", "X", "Y", "Z", "_", ",", "%", "=", """", "!");

dcl  end_of_table bit (18) int static init ("101010101010101000"b); /* physical end of trace table pattern */
dcl  logical_end bit (18) int static init ("101010101010101010"b); /* logical end of trace table pattern */
dcl  nl char (1) int static options (constant) init ("
");



/*	EXTERNAL STATIC */

dcl  od355_msgs$ fixed bin ext static;

dcl 1 od355_msgs$die_list (8) ext static aligned,
    2 name char (12),
    2 offset fixed bin;

/* BUILTINS */

dcl (addr, addrel, bin, bit, fixed, length, ptr, string, substr, unspec) builtin;

/* INCLUDE FILES */

%include mcs_memory_map;

	memp,
	     dumpp = a_dumpp;			/* copy argument for better access code */
	statp = addr (st);				/* init random pointers */
	octalp = addr (octal);
	retp = addr (retstring);

	if first_200_words = "0"b then return;		/* assume in this case there's no core */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *	PRINT OUT DUMP HEADER
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	call date_time_ (comm_reg.crldt, date_time_bound);
	call date_time_ (comm_reg.crbdt, date_time_booted);

	call ioa_$rsnnl ("^2/^3-DATANET FNP MEMORY DUMP^2/FNP ^a, MCS Version ^a^/Bound ^a^/Booted ^a^3/",
	     retstring, retl, get_fnp_name_ (number), comm_reg.crver,
	     date_time_bound, date_time_booted);	/* format dump header */
	call ios_$write ("od_output_", retp, 0, retl, nelemt, st); /* output the string */
	if st_code ^= 0 then do;			/* error? */
err:
	     call com_err_ (st_code, "online_355_dump_", "Attempted to write to output file."); /* bitch */
	     return;
	end;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *	PRINT OUT FAULT DATA
   *
   *	Print cause of fault, and regs in the following order:
   *
   *	IC, Indicators, A, Q, X1, X2, X3, Enable Register, Elapsed Timer
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	faultp = addr (core_fnp.words (comm_reg.crreg));	/* make pointer to fault data */
	if fault_data.fault_number > 7 then type = "ABORT"; /* not a processor fault */
	else type = "FAULT";
						/* format fault/abort message */
	if fault_data.fault_number = 3		/* illegal opcode */
	then do;
	     die_ptr = addr (core_fnp.words (fault_data.regs (1) - 1)); /* get word it died on */
	     if die_word.op_code = die_op		/* software-induced crash */
	     then do;
		module_num = bin (die_word.mod_num, 4);
		module_name = od355_msgs$die_list (module_num).name;

		reasonp = ptr (addr (od355_msgs$), od355_msgs$die_list (module_num).offset);
		reasonp = ptr (reasonp, reasonp -> message_offsets (die_word.reason));

		call ioa_$rsnnl ("CRASH REASON:^2/^a: ^a^3/", retstring, retl, module_name, reasonp -> die_reason.msg);
		call ios_$write ("od_output_", retp, 0, retl, nelemt, st);
		if st_code ^= 0 then go to err;
	     end;
	end;

	if fault_data.regs (1) = 0 then		/* no fault if IC = 0 */
	     call ioa_$rsnnl ("^a: ^a^2/", retstring, retl, type, "NONE      ");
	else call ioa_$rsnnl ("^a: ^a^2/", retstring, retl, type, faults (fault_data.fault_number));
	call ios_$write ("od_output_", retp, 0, retl, nelemt, st); /* output it */
	if st_code ^= 0 then go to err;		/* error */

	call format_355_dump_line_ (addr (fault_data.regs (1)), 9, octalp); /* get regs in octal */
						/* format regs output line */
	call ioa_$rsnnl ("IC ^a, IR ^a, A ^a, Q ^a, X1 ^a, X2 ^a, X3 ^a, ER ^a, ET ^a^/",
	     retstring, retl, octal_overlay (1).word, octal_overlay (2).word, octal_overlay (3).word,
	     octal_overlay (4).word, octal_overlay (5).word, octal_overlay (6).word, octal_overlay (7).word,
	     octal_overlay (8).word, octal_overlay (9).word);

	call ios_$write ("od_output_", retp, 0, retl, nelemt, st); /* output it */
	if st_code ^= 0 then go to err;		/* error */

	mem_size = comm_reg.crmem;			/* copy out fnp mem size for better code */
	if mem_size ^= MEM_24K - 1 then		/* check for clobbered mem size */
	     if mem_size ^= MEM_32K - 1 then
		if mem_size ^= MEM_64K - 1 then
		     if mem_size ^= MEM_128K - 1 then
			if mem_size ^= MEM_256K - 1
			then do;			/* memory really messed up */
			     mem_size = MEM_64K - 1;	/* use 64K if clobbered */
			     print_trace = "0"b;	/* better not try to do trace */
			end;
			else;
		     else;
		else;
	     else;
	else;

/* * * * * * * * * * * * * * * * * * * * * * *  * * * * *
   *
   *	PRINT OUT MODULE CHAIN
   *
   *	Search through fnp module chain and print out module names
   *	and starting addresses, also saving them for later use.
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


	modch.nmodules = 0;
	cur_chain = comm_reg.crmod;			/* get beginning of module chain */
	if cur_chain ^= 0
	then if cur_chain < mem_size then do;		/* if there's anything in it, print header */
		call ioa_$rs ("^3/MODULE CHAIN", retstring, retl);
		call ios_$write ("od_output_", retp, 0, retl, nelemt, st);
	     end;

	do i = 1 by 1 while (cur_chain > 0 & cur_chain < mem_size);
	     modch.address (i) = core_fnp.words (cur_chain+3); /* get address from chain entry */
						/* convert bcd module name */
	     do k = 1 to 4;				/* in module chain block */
						/* get ascii translation */
		substr (modch.name (i), k, 1) = xlate (fixed (substr (addr (core_fnpb.words (cur_chain+1)) -> bit36,
		     (k-1)*6+1, 6), 6));
	     end;
	     modch.nmodules = modch.nmodules + 1;

	     call ioa_$rs ("^6x^4a  ^5o", retstring, retl, modch.name (i), modch.address (i));
	     call ios_$write ("od_output_", retp, 0, retl, nelemt, st);

	     cur_chain = core_fnp.words (cur_chain);	/* chase chain */
	end;

	modch.address (i) = MEM_32K;			/* no module is loaded above 32K */
	modch.name (i) = "";
	modch.address (i+1) = MEM_256K + 1;		/* mark last entry so address won't pass it */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *	PRINT OUT CONTENTS OF TRACE TABLE
   *
   *	Find the oldest entry in the trace table and then print all
   *	the entries in order of age. The first word of an entry is a coded 18-bit
   *	word which consists of three fields. The first 6 bits contain the number
   *	of the module that made the entry; the next 6 bits contain
   *	the trace type within the module; and the last 6 bits contain
   *	the number of data words in the entry. This word is followed by
   *	an 18-bit clock time and a variable number of data items.
   *	The logical end of the trace table is marked by a word containing
   *	the pattern 525252(8).
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



	if print_trace then do;
	     mod_chain = comm_reg.crmod;		/* do validity checking on trace pointers */
	     if comm_reg.crtrb <= mod_chain | comm_reg.crtrb > mem_size |
	     comm_reg.crtrc <= mod_chain | comm_reg.crtrc > mem_size
	     then go to skip_trace_print;

	     if core_fnp.words (comm_reg.crtrc) = 0 then go to skip_trace_print;

	     call ioa_$rsnnl ("^3/^3-TRACE TABLE^3/", retstring, retl); /* format trace table header */
	     call ios_$write ("od_output_", retp, 0, retl, nelemt, st); /* output it */
	     if st_code ^= 0 then go to err;		/* error */

	     i = comm_reg.crtrc;			/* put current trace index in i */
trace_start:
	     if core_fnpb.words (i) = end_of_table then do; /* at end of trace table? */

		i = comm_reg.crtrb;			/* reset trace index to start of table */
		go to trace_start;			/* look some more */
	     end;

	     if core_fnpb.words (i) = logical_end then go to trace_done; /* found end of table */

	     call format_fnp_trace_msg_ (addr (core_fnpb.words (i)), addr (modch), trace_edit);
	     retstring = trace_edit || nl;
	     call ios_$write ("od_output_", retp, 0, length (trace_edit) + 1, nelemt, st);
	     if st_code ^= 0 then go to err;

	     i = i + bin (substr (core_fnpb.words (i), 13, 6)) + 2; /* bump to next entry */
						/* (include header and time words) */
	     go to trace_start;
	end;
	else do;

skip_trace_print:
	     call ioa_$rsnnl ("^3/Dump of trace data not attempted.  The comm_reg appears to be inconsistent.", retstring, retl);
	     call ios_$write ("od_output_", retp, 0, retl, nelemt, st);
	     if st_code ^= 0 then go to err;
	end;

trace_done:


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *	DUMP CONTENTS OF MEMORY
   *
   *	Each print line will consist of four fields. The first is the
   *	absolute address being printed followed possibly by a "*" if
   *	some lines were skipped due to duplication. The second is the
   *	name of the module in the area being dumped (or blanks if no
   *	module. The third is the relative address within that module,
   *	and the fourth is the octal representation of 8 18 bit words.
   *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



	dump_line.space1, dump_line.space2, dump_line.space3, dump_line.space4,
	     dump_line.module, dump_line.star = "";	/* init blanks */
	dump_line.nl = nl;
	call ioa_$rsnnl ("^|^3-MEMORY DUMP^3/", retstring, retl); /* output header */
	call ios_$write ("od_output_", retp, 0, retl, nelemt, st);
	if st_code ^= 0 then go to err;		/* error */

	locs_to_dump = mem_size;			/* get size of fnp core */
	modx = 1;					/* initialize module chain index */
	next_module_start = modch.address (1);		/* and next module's starting address */

	curlp = dumpp;				/* init current line pointer for dup line checking */
	go to skip_dup_test;
mem_dump_loop:
	if curlp -> dup_copy = dupp -> dup_copy then do;	/* check for duplicate lines */
	     dump_line.star = "*";			/* print out a star on next line to show dup */
	     go to dup_line;
	end;

skip_dup_test:
	dupp = curlp;				/* save prt to current line for dup checking */
	call format_355_dump_line_$line (curlp, 8, addr (dump_line.eight_words),
	     addr (dump_line.abs_addr), cur_loc, addr (dump_line.rel_addr), rel_addr); /* format a dump line */

	do i = 1 to 16;				/* format ascii data */
	     ch_val = fixed (dump_chars (i), 17);
	     if ch_val < 32 | ch_val > 126 then ch_val = 32;
	     unspec (dump_line.ascii (i)) = bit (fixed (ch_val, 9), 9);
	end;
	call ios_$write ("od_output_", addr (dump_line), 0, length (string (dump_line)), nelemt, st); /* output the line */
	if st_code ^= 0 then go to err;		/* error */
	dump_line.star = " ";

dup_line:
	rel_addr = rel_addr + 8;			/* bump rel and abs addresses */
	cur_loc = cur_loc +8;
	locs_to_dump = locs_to_dump - 8;		/* see if done yet */
	if locs_to_dump <= 0 then do;

	     if dump_line.star = "*" then do;		/* last line of dump always gets displayed */
		rel_addr = rel_addr - 8;
		cur_loc = cur_loc - 8;
		go to skip_dup_test;
	     end;
	     call ioa_$rsnnl ("^/**DUMP FINISHED**^|", retstring, retl); /* let there be no misunderstanding */
	     call ios_$write ("od_output_", retp, 0, retl, nelemt, st);
	     if st_code ^= 0 then go to err;

	     return;				/* all done */
	end;

	curlp = addrel (curlp, 4);			/* bump pointer to next line */
	if cur_loc >= next_module_start then do;	/* if we are dumping a new module */

	     if cur_loc >= MEM_32K then rel_addr = cur_loc; /* reset relative address */
	     else rel_addr = cur_loc - next_module_start;
	     dump_line.module = modch.name (modx);	/* set name */
	     modx = modx + 1;			/* point to next chain entry */
	     next_module_start = modch.address (modx);

skip_chain_code:
	end;
	go to mem_dump_loop;			/* continue on */


     end online_355_dump_;
