/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_dump_seg_name_: proc (segno, psdw, sstp, sstnp);
						/* Converted to 6180 and v2pl1 by R Mullen Feb 1973 */
dcl  segno fixed bin,				/* Parameters */
     psdw fixed bin (71),
    (xsltp, xnamp) ptr,				/* Pointers to copies of the SLT and Name Table in dump */
     astep ptr,					/* Pointer to AST entry of interest */
     np ptr,					/* r0 name table ptr */
     sstnp ptr;					/* Pointer to copy of SST name table */

dcl  axbitsp ptr;
dcl  ax char (8) aligned;
dcl  axbits (6) bit (1) unaligned based (axbitsp);

dcl (cl, esw) fixed bin;

dcl (line char (130),
     dirname char (168),
     name char (32),
     ename char (32),
     bline char (l) based (lp)) aligned,
     namebuf char (64),
    (lp, sltp, namp, segptr, xsegptr) ptr,
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     get_ast_name_ entry (ptr, ptr, ptr, char (*)),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     ptr, fixed bin (35)),
    (l, maxl, minl, i) fixed bin;


dcl (fmtnl char (2) init ("^a"),
     fmtsstn char (5) init ("^a ^a"),
     fmtsdw char (46) init ("^-^-^8o  ^o ^o ^o  ^1a  ^5o  ^8a^5o        ^4o")) int static aligned;

dcl (ioa_$rsnnl, od_print_) entry options (variable);	/* Descriptors required */
dcl  ring0_get_$name_given_slt entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35), ptr, ptr);

dcl (addr, baseptr, bin, null, substr) builtin;

dcl  code fixed bin (35);
dcl  dfchar char (1);
dcl  dfno fixed bin;

/*  */
%include sst;
/*  */
% include sdw;
/* 
   Copy args, initialize for formatting SDW breakout */

	esw = 1;

	go to common;

print_dump_seg_name_$get_ptr: entry (segno, sstp, sstnp, xsegptr);
	xsegptr = null;
	esw = 0;
	go to common;


print_dump_seg_name_$hard: entry (segno, psdw, xsltp, xnamp);
	esw = 2;


common:	
	dirname = "";
	ename = "";
	if esw ^= 0 then do;
	     maxl = 100;
	     minl = 0;

	     lp = addr (line);
	     sdwp = addr (psdw);

	     ax = "REWPUG  ";			/* fill in letters for these 6 bits */
	     axbitsp = addr (sdwp -> sdw.read);		/* get pointer to the bits */

	     do i = 1 to 6;				/* look at each one */
		if axbitsp -> axbits (i) = "0"b then substr (ax, i, 1) = " "; /* if axbitsp ->  zero, remove the letter */
	     end;

	     if sdwp -> sdw.df then dfchar = " ";
	     else do;
		dfno = bin (sdwp -> sdw.df_no, 2);
		dfchar = substr ("0123", dfno + 1, 1);
	     end;

	     cl = bin (sdwp -> sdw.entry_bound, 17);

	     call ioa_$rsnnl (fmtsdw, line, l,
	     bin (sdwp -> sdw.add, 24),
	     bin (sdwp -> sdw.r1, 3),
	     bin (sdwp -> sdw.r2, 3),
	     bin (sdwp -> sdw.r3, 3),
	     dfchar,
	     bin (sdwp -> sdw.bound, 14),
	     ax,
	     bin (sdwp -> sdw.entry_bound, 14),
	     segno);
	end;

	if esw ^= 2 then do;			/* non hardcore segname/refname wanted */
	     if sstp = null | sstnp = null then go to print_line;
	     astep = ptr (sstp, bin (sdwp -> sdw.add, 24) - sstp -> sst.ptwbase
			- sstp -> sst.astsize);	/* Compute Astep */
	     call get_ast_name_ (astep, sstp, sstnp, namebuf);	/* Figure out the name */
	     if esw = 1 then call ioa_$rsnnl(fmtsstn, line, l, bline, namebuf);
	     else do;
		call expand_path_ (addr(namebuf), length (namebuf), addr (dirname), addr (ename), code);
		if code ^= 0 then go to pfail;
		if dirname = ">system_library_1" then dirname = ">ldd>hard>object";
		call hcs_$initiate (dirname, ename, "", 0, 1, segptr, code);
		if segptr = null then xsegptr = segptr;
		else
pfail:		xsegptr = null;
	     end;
	     go to print_line;
	end;
	else do;

	     sltp = xsltp;
	     namp = xnamp;
	     np = baseptr (segno);
	     call ring0_get_$name_given_slt (dirname, name, np, code, sltp, namp);
	     if code = 0 then call ioa_$rsnnl (fmtsstn, line, l, bline, name);
	end;


print_line:					/* Print accumulated line image */
	if esw = 0 then return;
	if l > minl				/* See if anything significant in buffer */
	then call od_print_ (1, fmtnl, bline);
     end print_dump_seg_name_;
