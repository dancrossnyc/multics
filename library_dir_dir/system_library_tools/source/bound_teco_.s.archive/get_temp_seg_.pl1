/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-17,Margolin), approve(86-10-17,MCR7549),
     audit(86-10-21,Lippard), install(86-10-30,MR12.0-1203):
     Module moved to bound_teco_ without change, but the installation tools
     demand a history comment.  Better not to anger the gods.
                                                   END HISTORY COMMENTS */


get_temp_seg_: procedure (a_id, a_acl, a_ptr, a_code);

/*	This procedure manages scratch segments in the user's
   process directory. It is absolutely immune to "quit"s
   and other methods of getting unexpected recursion. That
   is, one may quit out of get_temp_seg_, hold, and
   then call get_temp_seg_ again without risk of using
   the same segment twice.
   */
/*	Last modified (Date and reason):
   by RHG on 17 July 1971 to redefine calls to be more usable by recursive procedures
   by Richard H. Gumpertz on 10 July 1971 for initial implementation
   */
/*  */
	declare a_id bit (36) aligned,
	a_acl bit (5) aligned,
	a_ptr ptr,
	a_code fixed bin (35);

	declare name_buffer char (32) aligned,
	name_len fixed bin,
	name based (addr (name_buffer)) aligned char (name_len);

	declare (i, j) fixed bin,
	p pointer,
	first_time bit (1) aligned init ("1"b) int static,
	process_dir char (168) aligned int static,
	error_code fixed bin(35),
	error_code2 fixed bin(35),
	id bit (36) aligned,
	rings (3) fixed bin,
	acl fixed bin (5);

	declare (addr, bit, fixed, hbound, null, stac, substr, unspec) builtin;

	declare temp_seg_list_ptr init (null) int static ptr,
	1 temp_seg_list (0:4095) based (temp_seg_list_ptr) aligned,
	2 temp_seg,
	3 used bit (36) aligned,
	3 acl fixed bin (5),
	3 ptr ptr,
	2 proc_id,
	3 name char (32) aligned,
	3 stack_ptr ptr,
	3 count fixed bin,
	3 used bit (36) aligned;

	declare hcs_$make_seg entry (char(*) aligned, char(*) aligned, char(*) aligned, fixed bin (5), ptr, fixed bin(35)),
	hcs_$add_acl_entries entry(char(*) aligned, char(*) aligned, ptr, fixed bin, fixed bin(35)),
	hcs_$truncate_seg entry (ptr, fixed bin, fixed bin(35)),
	cu_$level_get entry () returns (fixed bin),
	cu_$stack_frame_ptr entry () returns (pointer),
	get_group_id_$tag_star entry returns(char(32) aligned),
	get_pdir_ entry () returns (char (168) aligned),
	ioa_$rsnnl entry options (variable);

	declare (error_table_$notalloc, error_table_$not_seg_type) external fixed bin(35);

	declare 1 seg_acl aligned,
	2 access_name char(32),
	2 modes bit(36),
	2 zero_pad bit(36),
	2 error_code fixed bin(35);
						/*  */
%include stack_frame;
/*  */
/* get_temp_seg_:	entry (a_id, a_acl, a_ptr, a_code);	/* remember the proc statement above */
	acl = fixed (a_acl, 5);
	id = a_id;
	a_ptr = null;

	if first_time then call init;

	do i = 0 to hbound (temp_seg, 1);
check_new_seg: if i >= proc_id.count (0) then do;
		proc_id.count (0) = proc_id.count (0) + 1;
		goto check_new_seg;
	     end;
	     if stac (addr (temp_seg.used (i)), id) then do;
		if unspec (temp_seg.ptr (i)) = ""b then	/* get a segment if we don't already have one */
		do;
		     call ioa_$rsnnl ("temp_seg_.^d.^d", name_buffer, name_len, cu_$level_get(), (i));
		     temp_seg.acl (i) = acl;
		     call hcs_$make_seg (process_dir, name, "", acl, p, error_code);
		     if p = null then goto error;
		     temp_seg.ptr (i) = p;
		end;
		else if acl ^= temp_seg.acl (i) then do;
		     call change_acl;
		     if error_code ^= 0 then goto error;
		end;
		a_ptr = temp_seg.ptr (i);

		a_code = 0;
		return;
	     end;
	end;

	a_code = error_table_$notalloc;
	return;
						/*  */
assign_temp_seg_id_: entry (a_proc_id, a_id, a_code);

	declare a_proc_id char (*);

	if first_time then call init;

	do i = 1 to hbound (proc_id, 1);		/* note that i = 0 is illegal */
	     if stac (addr (proc_id.used (i)), "1"b) then
	     do;
		proc_id.name (i) = a_proc_id;
		proc_id.stack_ptr (i) = cu_$stack_frame_ptr () -> stack_frame.prev_sp;
		a_id = bit (fixed (proc_id.count (i), 18), 18) || bit (fixed (i, 18));
		a_code = 0;
		return;
	     end;
	end;

	a_code = error_table_$notalloc;
	a_id = "1"b;				/* just in case he uses it anyways */
	return;
						/*  */
release_temp_seg_: entry (a_id, a_ptr, a_code);

	if first_time then call init;
	id = a_id;
	if id = ""b then id = "1"b;
	p = a_ptr;

	do i = 0 to proc_id.count (0)+1;
	     if temp_seg.ptr (i) = p then		/* release it if this is the one */
	     do;
		if temp_seg.used (i) = id then
		do;
		     acl = 01011b;
		     if temp_seg.acl (i) ^= acl then do;
			call change_acl;
			if error_code ^= 0 then goto error;
		     end;
		     call hcs_$truncate_seg (p, 0, error_code);
		     if error_code ^= 0 then goto error;
		     temp_seg.used (i) = ""b;
		end;
		a_code = 0;
		return;
	     end;
	end;

	a_code = error_table_$not_seg_type;
	return;
						/*  */
release_temp_segs_all_: entry (a_id, a_code);

	a_code = 0;
	id = a_id;
	j = fixed (substr (id, 19, 18), 18);
	if j = 0 then return;
	if first_time then call init;

	do i = 0 to proc_id.count (0)+1;
	     if temp_seg.used (i) = id then
	     do;
		error_code, error_code2 = 0;
		if unspec (temp_seg.ptr (i)) then do;
		     acl = 01011b;
		     if temp_seg.acl (i) ^= acl then call change_acl;
		     if error_code ^= 0 then a_code = error_code;
		     call hcs_$truncate_seg (temp_seg.ptr (i), 0, error_code2);
		     if error_code2 ^= 0 then if error_code = 0 then a_code = error_code2;
		end;
		if error_code = 0 then if error_code2 = 0 then temp_seg.used (i) = ""b;
	     end;
	     if a_code = 0 then if fixed (substr (id, 1, 18), 18) = proc_id.count (j) then do;
		proc_id.count (j) = proc_id.count (j) + 1;
		proc_id.used (j) = ""b;
	     end;
	end;
	return;
						/*  */
list_temporary_segments: list_temp_segs: lts: entry;

	declare none_used bit (1) aligned,
	ioa_ external entry options (variable);

	if first_time then call init;

	none_used = "1"b;
	do i = 0 to proc_id.count (0)+1;
	     if temp_seg.used (i) then		/* print it only if it is in use */
	     do;
		if none_used then			/* print the header the first time only */
		do;
		     call ioa_ ("name		seg_ptr	proc_id		stack	proc_name");
		     none_used = "0"b;
		end;
		j = fixed (substr (temp_seg.used (i), 19, 18), 18);
		call ioa_ ("temp_seg_.^d.^d	^p	^w	^p	^a",
		cu_$level_get(), (i), temp_seg.ptr (i), temp_seg.used (i),
		proc_id.stack_ptr (j), proc_id.name (j));
	     end;
	end;

	if none_used then call ioa_ ("no temporary segments in use");
	return;
						/*  */
init:	proc;
	     process_dir = get_pdir_ ();
	     call ioa_$rsnnl ("temp_seg_.^d.list", name_buffer, name_len, cu_$level_get());
	     call hcs_$make_seg (process_dir, name, "", 1011b, temp_seg_list_ptr, error_code);
	     if temp_seg_list_ptr = null then goto error;
	     proc_id.name (0) = "****no name given***";
	     proc_id.stack_ptr (0) = null;
	     first_time = ""b;
	end init;





change_acl: proc;
	     rings (1), rings (2), rings (3) = cu_$level_get ();
	     call ioa_$rsnnl ("temp_seg_.^d.^d", name_buffer, name_len, cu_$level_get(), (i));
	     temp_seg.acl (i) = -1;			/* just in case we get quit out of */
	     seg_acl.access_name = get_group_id_$tag_star();
	     seg_acl.modes = substr(bit(acl,5), 2, 3);
	     seg_acl.zero_pad = "0"b;
	     call hcs_$add_acl_entries(process_dir, name, addr(seg_acl), 1, error_code);
	     if error_code = 0 then temp_seg.acl (i) = acl;
	end;





error:	a_code = error_code;
	return;
						/*  */
     end;
