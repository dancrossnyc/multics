/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	This procedure was initially coded by Richard H. Gumpertz on 1/7/71
   Procedure last modified:
   04/10/71 at 1536 by RHG to rename get_seg_ptr_$** to get_seg_ptr_**
   to use the already installed copy of stack_frame.incl.pl1
   03/31/71 at 1428 by RHG to add entry point get_seg_ptr_arg_
   03/24/71 at 1758 by RHG to clear return_code in $search
   03/24/71 at 1714 by RHG to make things a bit neater
   03/22/71 at 0357 by RHG to rename open_seg_ to get_seg_ptr_
   to combine get_seg_ptr_ and release_seg_ptr_
   to add the entry point $search
   to change wanted_access from fixed bin(5) to bit(6) aligned
   01/20/71 at 1820 by RHG to supress hcs_$initiate_count errors such as "segknown"
   01/18/71 at 1104 by RHG to reformat the source
   01/17/71 at 1951 by RHG to speed up open_seg_$path
   01/17/71 at 1251 by RHG for initial implementation
   11/14/73 by Kobziar to not check append access
   11/30/77  by David Levin to zero unused part of last word.
   */
/*	This procedure opens a segment for reading or writing, returning a pointer and a bit_count.
   If the segment does not exist and "create" access was specified in the call then an attempt is
   made to create the segment. A non-null pointer is returned if the segment is initiated.
   An error code will be returned in return_code if the access to the
   segment is not at least that specified in wanted_access. Otherwise any error return will have
   the return_ptr null.

   The entry point get_seg_ptr_arg_ is identical to the main entry except that
   the pathname is fetched out of the caller's argument list.

   The entry point get_seg_ptr_full_path_ is identical to the main entry except that
   a directory name and an entry name are taken rather than a relative path name.

   The entry point get_seg_ptr_search_ initiates the segment via search rules but
   initiates the segment with a null reference name. If it creates a segment
   it creates it in the process directory.

   The entry point release_seg_ptr_ terminates a segment. It also truncates
   the segment and sets its bit count if a nonnegative bit count is given.
   */
/*  */
get_seg_ptr_: procedure (path_name, wanted_access, bit_count, return_ptr, return_code);
	call expand_pathname_ (path_name, directory_name, entry_name, error_code);
	if error_code ^= 0 then goto error_return;
	goto common;

get_seg_ptr_arg_: entry (arg_number, wanted_access, bit_count, return_ptr, return_code);
	call cu_$arg_ptr_rel (arg_number, temp_ptr, len, error_code,
	     cu_$stack_frame_ptr () -> prev_sp -> arg_ptr);
	if error_code ^= 0 then goto error_return;
	call expand_pathname_ (path_name_arg, directory_name, entry_name, error_code);
	if error_code ^= 0 then goto error_return;
	goto common;

get_seg_ptr_full_path_: entry (d_name, e_name, wanted_access, bit_count, return_ptr, return_code);
	directory_name = d_name;
	entry_name = e_name;
	goto common;

get_seg_ptr_search_: entry (ref_name, wanted_access, bit_count, return_ptr, return_code);
	call hcs_$fs_get_seg_ptr (ref_name, temp_ptr, error_code);
	if temp_ptr ^= null then			/* temp_ptr = null if seg not known	*/
	     do;
	     call hcs_$fs_get_path_name (temp_ptr, directory_name, len, entry_name, error_code);
						/* get the path name of the segment	*/
	     if error_code ^= 0 then goto error_return;
	     goto common;
	end;
	call hcs_$make_ptr (null_string, ref_name, null_string, temp_ptr, error_code);
						/* search for the segment	*/
	if temp_ptr = null then			/* temp_ptr = null if seg doesn't exist	*/
	     do;
	     if substr (wanted_access, 6, 1) = "0"b then goto error_return;
						/* return if "create" bit not on	*/
	     directory_name = get_pdir_ ();		/* else create the segment in the process dir	*/
	     entry_name = ref_name;
	     return_code = 0;
	     goto create;
	end;
	call hcs_$fs_get_path_name (temp_ptr, directory_name, len, entry_name, error_code);
						/* get the path name of the seg	*/
	if error_code ^= 0 then goto error_return;
	call hcs_$terminate_name (ref_name, error_code);	/* terminate the name we just made known	*/
	if error_code ^= 0 then goto error_return;
	goto common;

release_seg_ptr_: entry (seg_ptr, bit_count, return_code);
	return_code = 0;
	goto release;
						/*  */
dcl  path_name char (*),
     path_name_arg char (len) based (temp_ptr),
     arg_number fixed bin,
     ref_name char (*),
     d_name char (*),
     e_name char (*),
     seg_ptr ptr,
     wanted_access bit (6) aligned,
     bit_count fixed bin (24),
     word_count fixed bin (24),
     word_mask (0:3) bit (36) aligned int static options (constant)
     init ("777777777777"b3, "777000000000"b3, "777777000000"b3, "777777777000"b3),
     segment (262144) bit (36) aligned based,
     return_ptr ptr,
     return_code fixed bin (35);

dcl (addr,
     divide,
     fixed,
     length,
     mod,
     null,
     substr) builtin;

dcl (error_table_$moderr,
     error_table_$noentry) fixed bin (35) external;

dcl  expand_pathname_ external entry (char (*), char (*) aligned, char (*) aligned, fixed bin (35)),
     cu_$stack_frame_ptr external entry () returns (ptr),
     cu_$arg_ptr_rel external entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr),
     get_pdir_ external entry () returns (char (168) aligned),
     hcs_$status_ external entry (char (*) aligned, char (*) aligned, fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$initiate_count external entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (24), fixed bin, ptr, fixed bin (35)),
     hcs_$append_branch external entry (char (*) aligned, char (*) aligned, fixed bin (5), fixed bin (35)),
     hcs_$fs_get_path_name external entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35)),
     hcs_$fs_get_seg_ptr external entry (char (*), ptr, fixed bin (35)),
     hcs_$make_ptr external entry (char (*) aligned, char (*), char (*) aligned, ptr, fixed bin (35)),
     hcs_$terminate_name external entry (char (*), fixed bin (35)),
     hcs_$set_bc external entry (char (*) aligned, char (*) aligned, fixed bin (24), fixed bin (35)),
     hcs_$truncate_seg external entry (ptr, fixed bin (24), fixed bin (35)),
     hcs_$terminate_noname external entry (ptr, fixed bin (35));

%include	status_info_branch;
%include	stack_frame;

dcl  error_code fixed bin (35),
     directory_name char (168) aligned,
     entry_name char (32) aligned,
     temp_ptr ptr,
     len fixed bin;

dcl  null_string char (0) aligned internal static initial ("");
						/*  */
common:	return_code = 0;				/* initialize	*/

	call hcs_$status_ (directory_name, entry_name, 1, addr (status_info_branch), null, error_code);
						/* find out if the seg exists and the access we have to it	*/
	if error_code ^= 0 then goto create_seg;	/* if error, seg probably didn't exist	*/
	if substr (wanted_access, 1, 4) & ^mode then return_code = error_table_$moderr;
						/* make sure he has at least the access requested	*/

initiate_seg:
	call hcs_$initiate_count (directory_name, entry_name, null_string, bit_count, 1, return_ptr, error_code);
						/* initiate the segment with null reference name	*/
	if return_ptr = null then goto error_return;	/* check return_ptr not error_code to avoid "segknown" etc.	*/
	return;

create_seg:
	if error_code ^= error_table_$noentry then goto error_return;
						/* make sure the problem really was that seg didn't exist	*/
	if substr (wanted_access, 6, 1) = "0"b then goto error_return;
						/* don't create the seg unless "create" access specified	*/
create:	call hcs_$append_branch (directory_name, entry_name, fixed (substr (wanted_access, 1, 5), 5, 0), error_code);
						/* create the segment	*/
	if error_code = 0 then goto initiate_seg;	/* if OK then go initiate the segment	*/
						/* else we have an error	*/



error_return:					/* we get here if we have an error return	*/
	bit_count = 0;
	return_ptr = null;
error_return_2:
	return_code = error_code;
	return;
						/*  */
release:
	if bit_count >= 0 then			/* set length only if bit count non-negative	*/
set_length:    do;
						/* get the pathname so we can set bit count	*/
	     call hcs_$fs_get_path_name (seg_ptr, directory_name, len, entry_name, error_code);
	     if error_code ^= 0 then goto error_return_2;

/* set the bit count	*/
	     call hcs_$set_bc (directory_name, entry_name, bit_count, error_code);
	     if error_code ^= 0 then return_code = error_code;

/* truncate any unused pages */
	     word_count = divide (bit_count+35, 36, 24, 0);
	     call hcs_$truncate_seg (seg_ptr, word_count, error_code);
	     if error_code ^= 0 then return_code = error_code;
	     if mod (bit_count, 36) ^= 0 then
		seg_ptr -> segment (word_count) = seg_ptr -> segment (word_count)
		& word_mask (mod (divide (bit_count+8, 9, 24, 0), 4));

	end set_length;





	call hcs_$terminate_noname (seg_ptr, error_code); /* terminate the segment */
	if error_code ^= 0 then goto error_return_2;
						/*  */
     end get_seg_ptr_;
