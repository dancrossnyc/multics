/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(83-10-24,Lippard), approve(), audit(), install():
      add -page_length, -all_matches, and -first_match options
  2) change(86-01-15,GDixon), approve(86-02-06,MCR7338),
     audit(86-02-06,Lippard), install(86-02-11,MR12.0-1016):
      A) Fix bugs in handling of -pn control arg.
      B) Add standard short names to many control args.
                                                   END HISTORY COMMENTS */


lib_args_: procedure (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, Parg_struc, Acode);

     dcl						/*	Parameters			*/
	Acode			fixed bin(35);	/* a status code. (Out)			*/

     dcl						/*	Automatic variables			*/
	Larg			fixed bin,	/* length of control argument.		*/
	Loperand			fixed bin,	/* length of control argument operand.		*/
	PSname			ptr,		/* ptr to switch for name table which overflowed.	*/
	PSreq			ptr,		/* ptr to a set of requirements switches.	*/
	Parg			ptr,		/* ptr to control argument.			*/
	Poperand 			ptr,		/* ptr to control argument operand.		*/
	Sallowed			bit(1) aligned,	/* on if ctl arg requiring operand is allowed.	*/
	Slib			bit(1) aligned,	/* on if TOO_MANY_LIBS msg already printed once.	*/
	Scontrol_disallowed		bit(36) aligned,	/* control bits which may NOT be set.		*/
	Srequirements_disallowed	bit(72) aligned,	/* rqeuirements bits which may NOT be set.	*/
	1 bad_library		like LIBRARY,
						/* storage for bad library names.		*/
	code			fixed bin(35),	/* an error table code.			*/
	i			fixed bin,	/* number of input argument being processed.	*/
 	j			fixed bin,	/* index of found control arg in keyword table.	*/
	Sstar			bit(1) aligned,	/* on if TOO_MANY_STAR msg already printed once.	*/
	name_type			char(7) aligned,	/* type of name table which has overflowed.	*/
	names_allowed		fixed bin;	/* number of names allowed in overflowing table.	*/

     dcl						/*	Based Variables			*/
	Sname			bit(1) aligned based(PSname),
						/* on if corresponding name table ovfl msg printed*/
	1 Sreq			aligned like Svalid_req based(PSreq),
						/* requirements switches.			*/
	arg			char(Larg) based(Parg),
						/* a control argument.			*/
	operand			char(Loperand) based(Poperand);
						/* a control argument operand.		*/

     dcl						/*	Built-in Functions and Conditions	*/
         (addr, convert, dimension, max, string, substr)
				builtin,
	conversion		condition;

     dcl						/*	Entries Called			*/
	check_star_name_$entry	entry (char(*), fixed bin(35)),
	cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin, fixed bin(35), ptr),
	lib_descriptor_$validate_library
				entry (char(168) varying, ptr, ptr, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying);

     dcl						/*	Static Variables			*/
	1 Sc_req			int static aligned,	/* relationship between requirements and control	*/
	  2 acl			bit(72) init(""b),	/*   switches.				*/
	  2 iacl			bit(72),
	  2 object_info		bit(72),
	  2 check_ascii		bit(72),
	  2 check_archive		bit(72),
	  2 all_status		bit(72),
	  2 quota			bit(72),
	False			bit(1) aligned int static options(constant) init ("0"b),
	True			bit(1) aligned int static options(constant) init ("1"b),
         (error_table_$bad_arg,
	error_table_$badstar,
	error_table_$too_many_names,
	error_table_$unimplemented_version,
	error_table_$wrong_no_of_args)
				fixed bin(35) ext static;

     dcl	keyword (66)		char (30) varying int static options(constant) init (
				     "-access                      ",	/*    1	*/
				     "-access_class                ",	/*    2	*/
				     "-acl                         ",	/*    3	*/
				     "-all                         ",	/*    4	*/
				     "-all_matches                 ",	/*    5	*/
				     "-author                      ",	/*    6	*/
				     "-bit_count                   ",	/*    7	*/
				     "-brief                       ",	/*    8	*/
				     "-chase                       ",	/*    9	*/
				     "-compiler_name               ",	/*   10	*/
				     "-compiler_options            ",	/*   11	*/
				     "-compiler_version            ",	/*   12	*/
				     "-components                  ",	/*   13	*/
				     "-container                   ",	/*   14	*/
				     "-contents                    ",	/*   15	*/
				     "-copy                        ",	/*   16	*/
				     "-cross_reference             ",	/*   17	*/
				     "-current_length              ",	/*   18	*/
				     "-date                        ",	/*   19	*/
				     "-date_time_compiled          ",	/*   20	*/
				     "-date_time_dumped            ",	/*   21	*/
				     "-date_time_entry_modified    ",	/*   22	*/
				     "-date_time_contents_modified ",	/*   23	*/
				     "-date_time_used              ",	/*   24	*/
				     "-default                     ",	/*   25	*/
				     "-delete                      ",	/*   26	*/
				     "-descriptor                  ",	/*   27	*/
				     "-device                      ",	/*   28	*/
				     "-entry                       ",	/*   29	*/
				     "-error                       ",	/*   30	*/
				     "-first_match                 ",	/*   31	*/
				     "-footer                      ",	/*   32	*/
				     "-header                      ",	/*   33	*/
				     "-initial_acl                 ",	/*   34	*/
				     "-into                        ",	/*   35	*/
				     "-length                      ",	/*   36	*/
				     "-level                       ",	/*   37	*/
				     "-library                     ",	/*   38	*/
				     "-link_target                 ",	/*   39	*/
				     "-list                        ",	/*   40	*/
				     "-long                        ",	/*   41	*/
				     "-match                       ",	/*   42	*/
				     "-max_length                  ",	/*   43	*/
				     "-mode                        ",	/*   44	*/
				     "-name                        ",	/*   45	*/
				     "-new_line                    ",	/*   46	*/
				     "-no_chase                    ",	/*   47	*/
				     "-no_cross_reference          ",	/*   48	*/
				     "-non_ascii                   ",	/*   49	*/
				     "-object_info                 ",	/*   50	*/
				     "-offset                      ",	/*   51	*/
				     "-omit                        ",	/*   52	*/
				     "-output_file                 ",	/*   53	*/
				     "-page_length                 ",	/*   54	*/
				     "-pathname                    ",	/*   55	*/
				     "-primary                     ",	/*   56	*/
				     "-quota                       ",	/*   57	*/
				     "-records                     ",	/*   58	*/
				     "-retain                      ",	/*   59	*/
				     "-ring_brackets               ",	/*   60	*/
				     "-safety                      ",	/*   61	*/
				     "-search_name                 ",	/*   62	*/
				     "-status                      ",	/*   63	*/
				     "-time                        ",	/*   64	*/
				     "-type                        ",	/*   65	*/
				     "-unique_id                   ");	/*   66	*/

     dcl	key_ab (47)		char(6) int static options(constant) init (
				     "-acc  ",	/*   2	*/
				     "-a    ",	/*   4	*/
				     "-amch ",	/*   5	*/
				     "-at   ",	/*   6	*/
				     "-bc   ",	/*   7	*/
				     "-bf   ",	/*   8	*/
				     "-comp ",	/*  13	*/
				     "-cont ",	/*  14	*/
				     "-cp   ",	/*  16	*/
				     "-cref ",	/*  17	*/
				     "-dt   ",	/*  19	*/
				     "-dtc  ",	/*  20	*/
				     "-dtd  ",	/*  21	*/
				     "-dtem ",	/*  22	*/
				     "-dtcm ",	/*  23	*/
				     "-dtu  ",	/*  24	*/
				     "-dft  ",	/*  25	*/
				     "-dl   ",	/*  26	*/
				     "-desc ",	/*  27    */
				     "-dv   ",	/*  28	*/
				     "-et   ",	/*  29	*/
				     "-fmch ",	/*  31	*/
				     "-fo   ",	/*  32	*/
				     "-he   ",	/*  33	*/
				     "-iacl ",	/*  34	*/
				     "-ln   ",	/*  36	*/
				     "-lev  ",	/*  37	*/
				     "-lb   ",	/*  38	*/
				     "-ls   ",	/*  40	*/
				     "-lg   ",	/*  41	*/
				     "-ml   ",	/*  43	*/
				     "-md   ",	/*  44	*/
				     "-nm   ",	/*  45	*/
				     "-nl   ",	/*  46	*/
				     "-ncref",	/*  48	*/
				     "-ofs  ",	/*  51	*/
				     "-of   ",	/*  53	*/
	 			     "-pl   ",	/*  54	*/
				     "-pn   ",	/*  55	*/
				     "-pri  ",	/*  56	*/
				     "-rec  ",	/*  58	*/
				     "-ret  ",	/*  59	*/
				     "-rb   ",	/*  60	*/
				     "-st   ",	/*  63	*/
				     "-tm   ",	/*  64	*/
				     "-tp   ",	/*  65	*/
				     "-uid  ");	/*  66	*/

     dcl	key_ab_for_key_no (47)	fixed bin int static options(constant) init (
				   /* -acc   */	     2,
				   /* -a     */	     4,
				   /* -amch  */	     5,
				   /* -at    */	     6,
				   /* -bc    */	     7,
				   /* -bf    */	     8,
				   /* -comp  */	    13,
				   /* -cont  */	    14,
				   /* -cp    */	    16,
				   /* -cref  */	    17,
				   /* -dt    */	    19,
				   /* -dtc   */	    20,
				   /* -dtd   */	    21,
				   /* -dtem  */	    22,
				   /* -dtcm  */	    23,
				   /* -dtu   */	    24,
				   /* -dft   */	    25,
				   /* -dl    */	    26,
				   /* -desc  */	    27,
				   /* -dv    */	    28,
				   /* -et    */	    29,
				   /* -fmch  */	    31,
				   /* -fo    */	    32,
				   /* -he    */	    33,
				   /* -iacl  */	    34,
				   /* -ln    */	    36,
				   /* -lev   */	    37,
				   /* -lb    */	    38,
				   /* -ls    */	    40,
				   /* -lg    */	    41,
				   /* -ml    */	    43,
				   /* -md    */	    44,
				   /* -nm    */	    45,
				   /* -nl    */	    46,
				   /* -ncref */	    48,
				   /* -ofs   */	    51,
				   /* -of    */	    53,
	 			   /* -pl    */	    54,
				   /* -pn    */	    55,
				   /* -pri   */	    56,
				   /* -rec   */	    58,
				   /* -ret   */	    59,
				   /* -rb    */	    60,
				   /* -st    */	    63,
				   /* -tm    */	    64,
				   /* -tp    */	    65,
				   /* -uid   */	    66);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	if Sc_req.acl = ""b then do;			/* initialize requirements which force given	*/
	     PSreq = addr(Sc_req.acl);		/*   Scontrol bits on.			*/
	     Sreq.acl = True;

	     PSreq = addr(Sc_req.iacl);
	     string(Sreq) = ""b;
	     Sreq.iacl = True;

	     PSreq = addr(Sc_req.object_info);
	     string(Sreq) = ""b;
	     Sreq.compiler_name = True;
	     Sreq.compiler_options = True;
	     Sreq.compiler_version = True;
	     Sreq.dtc = True;
	     Sreq.object_info = True;

	     PSreq = addr(Sc_req.check_ascii);
	     string(Sreq) = ""b;
	     Sreq.not_ascii = True;

	     PSreq = addr(Sc_req.check_archive);	/* all of these bits must be on in Srequirements	*/
	     string(Sreq) = ""b;
	     Sreq.compiler_name = True;		/*   to cause Sc.check_archive to be turned on.	*/
	     Sreq.compiler_options = True;
	     Sreq.compiler_version = True;
	     Sreq.dtc = True;
	     Sreq.entry_bound = True;
	     Sreq.not_ascii = True;
	     Sreq.object_info = True;

	     PSreq = addr(Sc_req.all_status);
	     string(Sreq) = ""b;
	     Sreq.aim = True;
	     Sreq.access_class = True;
	     Sreq.author = True;
	     Sreq.bit_count_author = True;
	     Sreq.entry_bound = True;

	     PSreq = addr(Sc_req.quota);
	     string(Sreq) = ""b;
	     Sreq.quota = True;
	     end;

	Acode = 0;
	if arg_struc.version ^= Varg_struc_1 then go to BAD_ARG_STRUC;
	if ^Sc_init.descriptor 	then arg_struc.descriptor = "";
						/* initialize argument-holding variables.	*/
	if ^Sc_init.footing 	then arg_struc.footing = "";
	if ^Sc_init.heading 	then arg_struc.heading = "";
	if ^Sc_init.output_file 	then arg_struc.output_file = "";
	if ^Sc_init.page_length	then arg_struc.page_length = 0;
	if ^Sc_init.into_path 	then arg_struc.into_path = "";
	if ^Sc_init.time		then arg_struc.time = 0;
	if ^Sc_init.search_names 	then STARNAME.N = 0;
	if ^Sc_init.library 	then LIBRARY.N = 0;
	EXCLUDE.N = 0;
	Srequirements = arg_struc.Srequirements_initial;
	Scontrol = arg_struc.Scontrol_initial;
	Sc.descriptor   = False;
	Sc.footing      = False;
	Sc.heading      = False;
	Sc.output_file  = False;
	Sc.page_length  = False;
	Sc.into_path    = False;
	Sc.search_names = False;
	Sc.library      = False;
	Sc.time         = False;
	Poperand = addr(Poperand);			/* initialize operand to a null string for use	*/
	Loperand = 0;				/*   in error messages.			*/
	Slib = False;
	Sstar = False;
	Srequirements_disallowed = ^arg_struc.Srequirements_allowed;
	Scontrol_disallowed = ^arg_struc.Scontrol_allowed;

	do i = arg_struc.Iarg_list to arg_struc.Larg_list;
	     call cu_$arg_ptr_rel (i, Parg, Larg, code, arg_struc.Parg_list);
						/* get the argument.			*/
	     if substr (arg, 1, 1) = "-" then;		/* if argument is not a control argument, it must	*/
	     else do;				/* be a star name.				*/
		Poperand = Parg;
		Loperand = Larg;
		Larg = 0;
		if Sc_allowed.search_names then
		     go to SET_STARNAME;
		else go to SET_LIBNAME;
		end;
	     do j = 1 to dimension (key_ab, 1) while (arg ^= key_ab(j));
		end;
	     if j > dimension (key_ab, 1) then do;
		do j = 1 to dimension (keyword, 1) while (arg ^= keyword(j));
		     end;
		if j > dimension (keyword, 1) then go to BAD_OPT;
		end;
	     else j = key_ab_for_key_no (j);
	     go to KEY(j);				/* if arg is a valid keyword, process it.	*/

KEY(27):	     Sallowed = Sc_allowed.descriptor;		/* if this is a keyword which requires an operand,*/
	     go to GET_OPERAND;
KEY(32):	     Sallowed = Sc_allowed.footing;		/*   then get the next argument.		*/
	     go to GET_OPERAND;
KEY(33):	     Sallowed = Sc_allowed.heading;
	     go to GET_OPERAND;
KEY(35):	     Sallowed = Sc_allowed.into_path;
	     go to GET_OPERAND;
KEY(38):	     Sallowed = Sc_allowed.library;
	     go to GET_OPERAND;
KEY(53):	     Sallowed = Sc_allowed.output_file;
	     go to GET_OPERAND;
KEY(54):	     Sallowed = Sc_allowed.page_length;
	     go to GET_OPERAND;
KEY(62):	     Sallowed = Sc_allowed.search_names;
	     go to GET_OPERAND;
KEY(64):	     Sallowed = Sc_allowed.time;
	     go to GET_OPERAND;
GET_OPERAND:   if i = arg_struc.Larg_list then		/* See if there's another arg.  It's expected.	*/
		if Sallowed then
		     go to MISSING_ARG;
		else go to BAD_OPT;
	     i = i + 1;
	     call cu_$arg_ptr_rel (i, Poperand, Loperand, code, arg_struc.Parg_list);
						/* get the next arg.			*/
	     if ^Sallowed then go to BAD_OPT;
	     go to KEY_OPERAND(j);			/* process it.				*/

KEY(1):	     S.mode = True;				/* -access (all access attributes required)	*/
	     S.rb = True;
	     S.acl = True;
	     Sc.acl = True;
	     S.iacl = True;
	     Sc.iacl = True;
	     S.access_class = True;
	     S.aim = True;
	     S.entry_bound = True;
	     S.safety = True;
	     Sc.all_status = True;
	     go to NEXT_ARG;

KEY(2):	     S.access_class = True;			/* -access_class				*/
	     S.aim = True;
	     Sc.all_status = True;
	     go to NEXT_ARG;

KEY(3):	     S.acl = True;				/* -acl					*/
	     Sc.acl = True;
	     go to NEXT_ARG;

KEY(4):	     Srequirements = arg_struc.Srequirements_allowed;
	     if (Srequirements & Sc_req.acl) then	/* -all or -a (set all requirements on).	*/
		Sc.acl = True;
	     if (Srequirements & Sc_req.iacl) then Sc.iacl = True;
	     if (Srequirements & Sc_req.object_info) then Sc.object_info = True;
	     if (Srequirements & Sc_req.check_ascii) then Sc.check_ascii = True;
	     if ((Srequirements & Sc_req.check_archive) = Sc_req.check_archive) then
		Sc.check_archive = True;
	     if (Srequirements & Sc_req.all_status) then Sc.all_status = True;
	     if (Srequirements & Sc_req.quota) then Sc.quota = True;
	     go to NEXT_ARG;

KEY(5):	     Sc.first_match = False;			/* -all_matches or -amch			*/
	     go to NEXT_ARG;

KEY(6):	     S.author = True;			/* -author or -at				*/
	     S.bit_count_author = True;
	     Sc.all_status = True;
	     go to NEXT_ARG;

KEY(7):	     S.bit_count = True;			/* -bit_count or -bc 			*/
	     S.msf_indicator = True;
	     go to NEXT_ARG;

KEY(8):	     Sc.long = False;			/* -brief or -bf				*/
	     go to NEXT_ARG;

KEY(9):	     Sc.chase = True;			/* -chase (links should be chased).		*/
	     go to NEXT_ARG;

KEY(10):	     S.compiler_name = True;			/* -compiler_name				*/
	     Sc.object_info = True;
	     go to NEXT_ARG;

KEY(11):	     S.compiler_options = True;		/* -compiler_options		 	*/
	     Sc.object_info = True;
	     go to NEXT_ARG;

KEY(12):	     S.compiler_version = True;		/* -compiler_version			*/
	     Sc.object_info = True;
	     go to NEXT_ARG;

KEY(13):	     Sc.components = True;			/* -components or -comp (print all nodes below a 	*/
	     go to NEXT_ARG;			/*   parent node)				*/

KEY(14):	     Sc.container = True;			/* -container or -cont  (print parent nodes)	*/
	     go to NEXT_ARG;

KEY(15):	     S.dtc = True;				/* -contents (description of entry contents	*/
	     S.compiler_version = True;		/*    is required).				*/
	     S.compiler_name = True;
	     S.compiler_options = True;
	     S.object_info = True;
	     Sc.object_info = True;
	     S.not_ascii = True;
	     Sc.check_ascii = True;
	     S.entry_bound = True;
	     Sc.all_status = True;
	     Sc.check_archive = True;
	     go to NEXT_ARG;

KEY(16):	     S.copy = True;				/* -copy or -cp (copy switch setting reqd).	*/
	     go to NEXT_ARG;

KEY(17):	     S.cross_ref = True;			/* -cross_reference or -cref.			*/
	     go to NEXT_ARG;

KEY(18):       S.current_length = True;			/* -current_length				*/
	     go to NEXT_ARG;

KEY(19):	     S.dtm = True;				/* -date or -dt (all storage system dates reqd).	*/
	     S.dtu = True;
	     S.dtem = True;
	     S.dtd = True;
	     S.dtc = True;
	     Sc.object_info = True;
	     go to NEXT_ARG;

KEY(20):	     S.dtc = True;				/* -date_time_compiled or -dtc		*/
	     Sc.object_info = True;
	     go to NEXT_ARG;

KEY(21):	     S.dtd = True;				/* -date_time_dumped or -dtd			*/
	     go to NEXT_ARG;

KEY(22):	     S.dtem = True;				/* -date_time_entry_modified or -dtem		*/
	     go to NEXT_ARG;

KEY(23):	     S.dtm = True;				/* -date_time_contents_modified or -dtcm	*/
	     go to NEXT_ARG;

KEY(24):	     S.dtu = True;				/* -date_time_used or -dtu			*/
	     go to NEXT_ARG;

KEY(25):	     Sc.default = True;			/* -default or -dft (default info required for	*/
	     go to NEXT_ARG;			/*    each entry, according to library search pgm,*/
						/*    in addition to info reqd by control args).	*/

KEY(26):	     Sc.delete = True;			/*  -delete of -dl (Library entries to be deleted)*/
	     go to NEXT_ARG;

KEY_OPERAND(27):
	     arg_struc.descriptor = operand;		/* -descriptor or -desc (use other than		*/
	     Sc.descriptor = True;			/*   default library descriptor.)		*/
	     go to NEXT_ARG;

KEY(28):	     S.lvid = True;				/* -device or -dv				*/
	     go to NEXT_ARG;

KEY(29):	     Sc.components = False;			/* -entry or -et (info about parent or component	*/
	     Sc.container = False;			/*   of matching library entry is not required).	*/
	     go to NEXT_ARG;

KEY(30):	     S.kids_error = True;			/* -error (errors obtaining descendant		*/
	     go to NEXT_ARG;			/*    nodes required).			*/

KEY(31):	     Sc.first_match = True;			/* -first_match or -fmch			*/
	     go to NEXT_ARG;

KEY_OPERAND(32):
	     arg_struc.footing = operand;		/* -footer or -fo (set value of footing).	*/
	     Sc.footing = True;
	     go to NEXT_ARG;

KEY_OPERAND(33):
	     arg_struc.heading = operand;		/* -header or -he (set value of heading line.)	*/
	     Sc.heading = True;
	     go to NEXT_ARG;

KEY(34):	     S.iacl = True;				/* -initial_acl or -iacl			*/
	     Sc.iacl = True;
	     go to NEXT_ARG;

KEY_OPERAND(35):
	     arg_struc.into_path = operand;		/* -into	(path into which entries are fetched).	*/
	     Sc.into_path = True;
	     go to NEXT_ARG;

KEY(36):	     S.records_used = True;			/* -length or -ln (all lengths required).	*/
	     S.current_length = True;
	     S.bit_count = True;
	     S.msf_indicator = True;
	     S.offset = True;
 	     S.max_length = True;
	     S.quota = True;
	     Sc.quota = True;
	     go to NEXT_ARG;

KEY(37):	     S.level = True;			/* -level or -lev (level number to precede each	*/
	     go to NEXT_ARG;			/*    entry).				*/

KEY_OPERAND(38):					/* -library or -lb;  store library name.	*/
SET_LIBNAME:   if ^Sc.library then do;
		LIBRARY.N = 0;			/* user wants to override initial value.	*/
		Sc.library = True;
		end;
	     if LIBRARY.N = dimension(LIBRARY.group,1) then go to TOO_MANY_LIBS;
	     LIBRARY.N = LIBRARY.N + 1;
	     LIBRARY.V(LIBRARY.N) = operand;
	     call check_star_name_$entry (operand, code);
	     if code = error_table_$badstar then do;
		LIBRARY.N = LIBRARY.N - 1;
		go to BAD_LIB;			/* make sure library name has proper format.	*/
		end;
	     else LIBRARY.C(LIBRARY.N) = code;
	     if LIBRARY.C(LIBRARY.N) = 2 then do;	/* if star name is **, make it first name.	*/
		if LIBRARY.C(1) = 2 then LIBRARY.N = max(LIBRARY.N - 1, 1);
		else do;				/*   1st name not already **; swap with Nth name.	*/
		     LIBRARY.V(LIBRARY.N) = LIBRARY.V(1);
		     LIBRARY.C(LIBRARY.N) = LIBRARY.C(1);
		     LIBRARY.V(1) = operand;
		     LIBRARY.C(1) = 2;
		     end;
		end;
	     go to NEXT_ARG;

KEY(39):	     S.link_target = True;			/* -link_target				*/
	     go to NEXT_ARG;

KEY(40):	     Sc.list = True;			/* -list or -ls (Library entries subject to 	*/
	     go to NEXT_ARG;			/*   cleanup are to be listed.)		*/

KEY(41):	     Sc.long = True;			/* -long or -lg				*/
	     go to NEXT_ARG;

KEY(42):	     S.matching_names = True;			/* -match (all matching names required).	*/
	     go to NEXT_ARG;

KEY(43):	     S.max_length = True;			/* -max_length or -ml			*/
	     go to NEXT_ARG;

KEY(44):	     S.mode = True;				/* -mode or -md				*/
	     go to NEXT_ARG;

KEY(45):	     S.names = True;			/* -name or -nm				*/
	     go to NEXT_ARG;

KEY(46):	     S.new_line = True;			/* -new_line or -nl (new-line char to separate	*/
	     go to NEXT_ARG;			/*    major entries.			*/

KEY(47):	     Sc.chase = False;			/* -no_chase				*/
	     go to NEXT_ARG;

KEY(48):	     S.cross_ref = False;			/* -no_cross_reference or -ncref		*/
	     go to NEXT_ARG;

KEY(49):	     S.not_ascii = True;			/* -non_ascii (check for non-ascii segment	*/
	     Sc.check_ascii = True;			/*    required).				*/
	     go to NEXT_ARG;

KEY(50):	     S.object_info = True;			/* -object_info (other compiler attributes	*/
	     Sc.object_info = True;			/*    required).				*/
	     go to NEXT_ARG;

KEY(51):	     S.offset = True;			/* -offset or -ofs (offset of archive comps reqd).*/
	     go to NEXT_ARG;

KEY(52):	     Sc.retain = False;			/* -omit (don't retain entries awaiting deletion).*/
	     go to NEXT_ARG;

KEY_OPERAND(53):
	     arg_struc.output_file = operand;		/* -output_file or -of			*/
	     Sc.output_file = True;
	     go to NEXT_ARG;

KEY_OPERAND(54):					/* -page_length or -pl			*/
	     on conversion go to BAD_TIME;
	     arg_struc.page_length = convert(arg_struc.page_length, operand);
	     revert conversion;
	     if arg_struc.page_length < 10 | arg_struc.page_length > 120 then go to BAD_TIME;
	     go to NEXT_ARG;

KEY(55):	     S.pathname = True;			/* -pathname or -pn				*/
	     go to NEXT_ARG;

KEY(56):	     S.primary_name = True;			/* -primary or -pri				*/
	     go to NEXT_ARG;

KEY(57):	     S.quota = True;			/* -quota					*/
	     Sc.quota = True;
	     go to NEXT_ARG;

KEY(58):	     S.records_used = True;			/* -records or -rec				*/
	     go to NEXT_ARG;

KEY(59):	     Sc.retain = True;			/* -retain or -ret (keep nodes awaiting deletion).*/
	     go to NEXT_ARG;

KEY(60):	     S.rb = True;				/* -ring_brackets or -rb			*/
	     S.entry_bound = True;
	     Sc.all_status = True;
	     go to NEXT_ARG;

KEY(61):	     S.safety = True;			/* -safety				*/
	     go to NEXT_ARG;

KEY_OPERAND(62):					/* -search_name (arg which follows looks	*/
SET_STARNAME:					/*    like a keyword, but is really a star name.	*/
	     if ^Sc.search_names then do;
		STARNAME.N = 0;
		Sc.search_names = True;
		end;
	     else if STARNAME.N = 1 then		/* if a star name of ** has been encountered	*/
		if STARNAME.C(1) = 2 then		/*    previously, ignore all other star names.	*/
		     go to NEXT_ARG;
	     if STARNAME.N = dimension (STARNAME.group,1) then go to TOO_MANY_STAR;
	     STARNAME.N = STARNAME.N + 1;
	     STARNAME.V(STARNAME.N) = operand;
	     call check_star_name_$entry (operand, code);
	     if code = error_table_$badstar then do;
		STARNAME.N = STARNAME.N - 1;
		go to BAD_STAR;			/* make sure starname name has proper format.	*/
		end;
	     else STARNAME.C(STARNAME.N) = code;
	     if STARNAME.C(STARNAME.N) = 2 then do;	/* if this starname is **, then ignore all other	*/
		STARNAME.N = 1;			/*    star names, and use only this one.	*/
		STARNAME.V(1) = operand;
		STARNAME.C(1) = 2;
		end;
	     go to NEXT_ARG;

KEY(63):	     S.primary_name = True;			/* -status (all info given by status -all).	*/
	     S.matching_names = True;
	     S.kids = True;
	     S.kids_error = True;
	     S.type = True;
	     S.copy = True;
	     S.unique_id = True;
	     S.dtem = True;
	     S.dtd = True;
	     S.dtm = True;
	     S.dtu = True;
	     S.link_target = True;
	     S.records_used = True;
	     S.current_length = True;
	     S.msf_indicator = True;
	     S.bit_count = True;
	     S.offset = True;
	     S.lvid = True;
	     S.max_length = True;

	     S.author = True;
	     S.bit_count_author = True;
	     Sc.all_status = True;
	     go to NEXT_ARG;

KEY_OPERAND(64):
	     Sc.time = True;
	     on conversion go to BAD_TIME;		/* -time NN   or   -tm NN			*/
	     arg_struc.time = convert(arg_struc.time, operand);
	     revert conversion;
	     if arg_struc.time < 0 then go to BAD_TIME;
	     go to NEXT_ARG;

KEY(65):	     S.type = True;				/* -type or -tp				*/
	     go to NEXT_ARG;

KEY(66):	     S.unique_id = True;			/* -unique_id or -uid			*/
	     go to NEXT_ARG;

BAD_TIME:	     revert conversion;
	     go to BAD_OPT;

NEXT_ARG:	     if Srequirements & Srequirements_disallowed then do;
		Srequirements = Srequirements & arg_struc.Srequirements_allowed;
BAD_OPT:		code = error_table_$bad_arg;
BAD_LIB:
BAD_STAR:		call arg_struc.put_error (code, arg_struc.program, " ^a ^a", arg, operand);
		if Acode = 0 then Acode = code;
		end;
	     else if Scontrol & Scontrol_disallowed then do;
		Scontrol = Scontrol & arg_struc.Scontrol_allowed;
		go to BAD_OPT;
		end;
	     Loperand = 0;
	     go to END_LOOP;

MISSING_ARG:   call arg_struc.put_error (error_table_$wrong_no_of_args, arg_struc.program, "
  The  ^a  control argument requires an operand.", arg);
	     if Acode = 0 then Acode = error_table_$wrong_no_of_args;
	     go to END_LOOP;

TOO_MANY_LIBS: name_type = "Library";
	     names_allowed = dimension(LIBRARY.group, 1);
	     PSname = addr(Slib);
	     go to TOO_MANY;
TOO_MANY_STAR: name_type = "Search";
	     names_allowed = dimension(STARNAME.group, 1);
	     PSname = addr(Sstar);

TOO_MANY:	     if Sname then
		call arg_struc.put_error (error_table_$too_many_names, arg_struc.program, "
  ^a name  ^a ^a  ignored.", name_type, arg, operand);
	     else do;
		Sname = True;
		call arg_struc.put_error (error_table_$too_many_names, arg_struc.program, "
  ^a name storage exceeded;  only ^d names can be given.
  ^a ^a  ignored.", name_type, names_allowed, arg, operand);
		if Acode = 0 then Acode = error_table_$too_many_names;
		end;
	     go to END_LOOP;

END_LOOP:	     end;

						/* mark args requiring operand as present if	*/
						/*   arg given, or if default value given.	*/
          Sc.descriptor   = Sc.descriptor   | Sc_init.descriptor;         
          Sc.footing      = Sc.footing      | Sc_init.footing;            
          Sc.heading      = Sc.heading      | Sc_init.heading;
          Sc.output_file  = Sc.output_file  | Sc_init.output_file;
	Sc.page_length  = Sc.page_length  | Sc_init.page_length;
          Sc.into_path    = Sc.into_path    | Sc_init.into_path;
          Sc.search_names = Sc.search_names | Sc_init.search_names;
          Sc.library      = Sc.library      | Sc_init.library;
	Sc.time	      = Sc.time         | Sc_init.time;

	if LIBRARY.N > 0 then do;			/* validate the library names.		*/
	     call lib_descriptor_$validate_library (arg_struc.descriptor, addr(LIBRARY), addr(bad_library), code);
	     if bad_library.N > 0 then do;
		call arg_struc.put_error (error_table_$bad_arg, arg_struc.program, "
  Library descriptor '^a' does not define the", arg_struc.descriptor);
		call lib_error_list_ ("library name", addr(bad_library), arg_struc.program);
		if Acode = 0 then Acode = error_table_$bad_arg;
		end;
	     else if code ^= 0 then do;
		call arg_struc.put_error (code, arg_struc.program, "
  While accessing library descriptor:  ^a ", arg_struc.descriptor);
		if Acode = 0 then Acode = code;
		end;
	     else if LIBRARY.C(1) = 2 then LIBRARY.N = 1;	/* If ** given as library name, ignore all others.*/
	     end;
	return;


BAD_ARG_STRUC:
	call arg_struc.put_error (error_table_$unimplemented_version, "lib_args_", "
  Version ^d of the library argument structure is not supported.", arg_struc.version);
	code = error_table_$unimplemented_version;

%include lib_arg_struc_;

%include lib_Svalid_req_;

%include lib_Scontrol_;

	end lib_args_;
