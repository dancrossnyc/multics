/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(83-11-18,Lippard), approve(), audit(), install():
     Use 60 line page lengths.
  2) change(86-03-24,GDixon), approve(86-03-24,MCR7365),
     audit(86-04-22,Dickson), install(86-04-22,MR12.0-1042):
     Change page number format in footing and index to accomodate 5-digit page
     numbers.
                                                   END HISTORY COMMENTS */


lib_output_node_list_:	procedure;

     dcl						/*	parameters			*/
	footing			char(45) varying,	/* footing line. (In)			*/
	ASrequirements		bit(72) aligned;	/* bits indicating what information is required	*/
						/*   in the printout of non-archive-comp nodes.	*/
						/*   (In)					*/

     dcl						/*	automatic variables			*/
	Lfirst_name		fixed bin(35),	/* length of the first name in a 2-name footer.	*/
	Llast_name		fixed bin(35),	/* length of the last name in a 2-name footer.	*/
	Lname			fixed bin(35),	/* length of a name in the index.		*/
	Nchars			fixed bin(24),	/* length of chars string.			*/
	Nentries			fixed bin,	/* number of nodes input to print entry point.	*/
	1 POD_storage		aligned like POD,
	Pchars			ptr,		/* ptr to chars string.			*/
	Pindex_entry		ptr,		/* ptr to a name to be put in an index entry.	*/
	Pname			ptr,		/* ptr to name to be put in the footer.		*/
	Ptarget			ptr,		/* ptr to target node we're outputing.		*/
	added_NL			fixed bin(35),	/* number of addition new_line chars which must	*/
						/* be output before appending footing to page.	*/
	cleanup			condition,
	code			fixed bin(35),	/* a status code.				*/
	dir			char(168) varying,	/* a directory path name.			*/
	e			fixed bin,	/* the entry point indicator.			*/
	ent			char(32) varying,	/* an entry name.				*/
	1 eop			aligned,		/* structure containing values used by the	*/
						/*    end-of-page (eop) handler to gen footing.	*/
	  2 Pfirst_name		ptr,		/*    ptr to name of first node listed on this pg.*/
	  2 Plast_name		ptr,		/*    ptr to name of last node listed on this pg.	*/
	  2 multiple_names		bit(1) aligned,	/*    on if footing line can contain 2 names.	*/
         (i, j)			fixed bin,	/* a do-group index.			*/
	long			char(100) aligned,	/* a convert error code.			*/
	page			pic "zzzz9",	/* a page number char. string.		*/
	saved_Eend_page		entry variable,	/* previous value of fcb.Eend_page.		*/
	saved_page_text_length	fixed bin,	/* previous value of fcb.page_text_length.	*/
	short			char(8) aligned;	/* a short converted error code.		*/

     dcl						/*	based variables			*/
	chars			char(Nchars) based (Pchars),
						/* character overlay for the outputable part of	*/
	name			char(32) based;	/* the name of a node.			*/

     dcl (addr, divide, hbound, length, lbound, min, mod, null, reverse, string, substr, verify)
				builtin;

     dcl						/*	entries				*/
	convert_status_code_	entry (fixed bin(35), char(8) aligned, char(100) aligned),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
	ioa_$ioa_switch_nnl		entry options (variable),
	iox_$put_chars		entry (ptr, ptr, fixed bin(21), fixed bin(35)),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
	lib_output_node_$cross_reference
				entry (ptr, ptr, bit(72) aligned, fixed bin(35), char(32),
				       char(168) varying),
         (lib_output_node_$info,
	lib_output_node_$map,
	lib_output_node_$print)	entry (ptr, ptr, bit(72) aligned, fixed bin(35), ptr),
	lib_paged_output_		entry (ptr, fixed bin(21), ptr, fixed bin(35)),
	lib_ptr_and_bc_		entry (ptr, fixed bin(24), ptr, ptr, fixed bin(24), fixed bin(35)),
	sort_items_indirect_$char	entry (ptr, ptr, fixed bin(24));

     dcl						/*	static variables			*/
	DOTS			char(40) aligned int static init ((20)" ."),
	INDEX			char(32) aligned int static init ("INDEX"),
	NL			char(1) aligned int static init ("
"),						/* a new_line char.				*/
	NULL_NAME			char(32) int static init (""),
						/* a null name for use in index.		*/
	line_2NL			char(134) int static init (
"____________________________________________________________________________________________________________________________________

"),						/* init ((132)"_" || NL || NL)		*/
	line_NL			char(133) defined line_2NL position(1),
	line			char(132) defined line_2NL position(1);
						/* current ring number.			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


info:	entry	(Pfcb, Pnode_list, Pname_list, Pindex_list, footing, ASrequirements, Pstarname);

	e = 1;					/* set entry point indicator.			*/
	eop.multiple_names = "0"b;			/* don't worry about names in footers.		*/
	go to begin;


map:	entry	(Pfcb, Pnode_list, Pname_list, Pindex_list, footing, ASrequirements, Pstarname);

	e = 2;					/* set entry point indicator.			*/
	eop.multiple_names = "1"b;			/* enable multiple names in the footers.	*/
	go to begin;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*      These entry points scan a sorted list of nodes to output selected node		*/
	/* information.								*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


print:	entry	(Pfcb, Pnode_list, Pname_list, Pindex_list, footing, ASrequirements, Pstarname, Ppage_list);

	e = 3;					/* set entry point indicator.			*/
	eop.multiple_names = "0"b;			/* suppress multiple names in the footers.	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*      This entry point writes the contents of the printable library entries represented	*/
	/* by the nodes in the list.							*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


begin:	saved_page_text_length = fcb.page_text_length;	/* perform end-of-page processing requiring	*/
	fcb.page_text_length = fcb.page_length - 4;	/*    4 lines.				*/
	saved_Eend_page = fcb.Eend_page;
	fcb.Eend_page = new_page;			/* establish end_page condition handler.	*/

	Srequirements = ASrequirements;		/* copy requirements and suppress new_line before	*/
	S.new_line = "0"b;				/*    nodes printed at levels 2-n.		*/

	go to entry (e);				/* do rest of processing by entry point.	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


entry(1):						/* library_info processing.			*/
	eop.Pfirst_name, eop.Plast_name = addr(NULL_NAME);/* don't worry about names in the footers.	*/
	do i = 1 to index_list.I;			/* scan through the list of nodes to be output.	*/
	     Pnode = node_list.e (index_list.e(i));	/* access the ith node in the list.		*/
	     if Pnode = null then go to END_NODE;
	     Pname = name_list.e (index_list.e(i));	/* access its name.				*/
	     if first_outputable_node (Pnode, Ptarget) then do;
						/* if this is the first outputable node in this	*/
						/* branch of the tree, then output it at level 1.	*/
		call lib_output_node_$info (Pfcb, Pnode, ASrequirements, 1, Pstarname);
		if Svalid.kids then			/* if this node has kids, output them too.	*/
		     call output_nodes_kids (Pnode, 2);	/* Start with kids at level 2 of the tree.	*/
		end;
END_NODE:	     end;
	call ioa_$ioa_switch_nnl (fcb.Piocb, "^2/");	/* skip 2 lines before start of next command.	*/
	go to return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


entry(2):						/* library_map				*/
	eop.Pfirst_name = name_list.e (index_list.e (1));	/* store name of first node to be output for use	*/
						/* in the footing line.			*/
	do i = 1 to index_list.I;			/* scan through the list of nodes to be output.	*/
	     Pnode = node_list.e (index_list.e (i));	/* address the ith node of the list,		*/
	     Pname = name_list.e (index_list.e (i));	/* and its name.				*/
	     if fcb.line_no+3 > fcb.page_text_length then do;
		call new_page();			/* if we can't get at least 3 lines of output	*/
		eop.Pfirst_name = Pname;		/*    for this one on the current page, skip to	*/
		end;				/*    a new page, and report node as 1st on page.	*/
	     eop.Plast_name = Pname;			/* At this point in time, this node is the last	*/
						/* on this page.				*/
	     if first_outputable_node (Pnode, Ptarget) then do;
						/* if this is the first outputable node in this	*/
						/* branch of the tree, then output it at level 1.	*/
		call lib_output_node_$map (Pfcb, Pnode, ASrequirements, 1, Pstarname);
		if Svalid.kids then			/* if this node has kids, map them at level 2.	*/
		     call output_nodes_kids (Pnode, 2);
		end;
	     else do;				/* if this node is not the first outputable node	*/
						/* of the branch, then cross-reference it at	*/
						/* level 1.				*/
		call lib_node_path_ (Ptarget, dir, ent);/* get path name of first outputable node for use	*/
		if dir = ">" then
		     dir = dir || ent;
		else dir = dir || ">" || ent;		/* in cross-reference entry.			*/
		call lib_output_node_$cross_reference (Pfcb, Pnode, ASrequirements, 1, Pname -> name, dir);
		end;
	     end;
	call new_page();				/* Put a footing line on the last page.		*/
	go to return;				/* All done!				*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


return:	fcb.page_text_length = saved_page_text_length;	/* restore previous end-of-page processor.	*/
	fcb.Eend_page = saved_Eend_page;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


entry(3):	PPOD = addr(POD_storage);
	POD.version = VPOD_1;			/* fill in lib_paged_output_ data struc.	*/
	POD.Lline = fcb.line_length;
	POD.Lpage = fcb.page_text_length;
	POD.Ltop_margin = 0;
	POD.Lbottom_margin = 0;
	POD.Nfrom = 1;
	POD.Nto = 0;
	POD.switch = fcb.Piocb;
	POD.end_page = print_footer;
	string(POD.switches) = "0"b;
	POD.Send_page = "1"b;
	POD.Spartial_last_page = "1"b;
	POD.Iat_column = 0;
	POD.Icolumns_used = 0;
	POD.Iline = fcb.line_no-1;
	POD.Ipage = fcb.page_no;
	POD.Imsf_comp = -1;
	POD.heading = "";

	name_list.I = name_list.N;			/* make name list as large as possible.		*/
	page_list.I = page_list.N;
	Nentries = node_list.I;

	Pchars = null;				/* initialize cleanup on-unit's variables.	*/
	on cleanup begin;
	     if Pchars ^= null then do;
		call hcs_$terminate_noname (Pchars, 0);
		Pchars = null;
		end;
	     end;

	do i = 1 to index_list.I;			/* scan through the sorted node list.		*/
	     Pnode = node_list.e (index_list.e (i));	/* address the ith sorted node.		*/
	     Pname = name_list.e (index_list.e (i));	/* address the name by which it was referenced.	*/
	     page_list.e (index_list.e (i)) = POD.Ipage;	/* record page number on which node is output.	*/
						/* cross-reference names of node in index.	*/
	     do PDnames = node.PD repeat (Dnames.Pnext) while (Dnames.T ^= Tnames);
		end;
	     do j = 2 to Dnames.N while (node_list.I < node_list.N);
		node_list.I = node_list.I + 1;
		node_list.e (node_list.I) = Pnode;
		name_list.e (node_list.I) = addr (Dnames.names(j));
		page_list.e (node_list.I) = POD.Ipage;
		end;

	     call lib_paged_output_ (addr(line_NL), length(line_NL), PPOD, code);
	     fcb.line_no = POD.Iline+1;
	     fcb.page_no = POD.Ipage;
	     if Svalid.kids then do;			/* if node has kids, use level numbers in header.	*/
		call lib_output_node_$print (Pfcb, Pnode, ASrequirements, 1, Pstarname);
		call output_nodes_kids (Pnode, 2);
		end;
	     else
		call lib_output_node_$print (Pfcb, Pnode, ASrequirements, 0, Pstarname);
	     POD.Iline = fcb.line_no-1;
	     POD.Ipage = fcb.page_no;
	     call lib_paged_output_ (addr(line_2NL), length(line_2NL), PPOD, code);
	     call output_node (Pnode);		/* print the contents of the node.		*/
	     end;
	fcb.line_no = POD.Iline+1;
	fcb.page_no = POD.Ipage;
	if Nentries > 1 then do;			/* if there was more than 1 entry output, 	*/
	     name_list.I = node_list.I;		/* then generate an index.			*/
	     index_list.I = node_list.I;		/* adjust bounds of name and index arrays.	*/
	     call sort_items_indirect_$char (addr(name_list.I), addr(index_list.I), 32);
	     call output_index;			/* sort the name array and output the index.	*/
	     end;
	go to return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


first_outputable_node:	procedure (P, Pfirst)	/* Internal procedure to return ptr to first node	*/
			returns (bit(1) aligned);	/* in tree branch containing node pointed	*/
						/* to by P, which is outputable.		*/
     dcl	P			ptr,		/* ptr to node to be tested. (In)		*/
	Pfirst			ptr,		/* ptr to the first printable node. (Out)	*/
	Pn			ptr,		/* a ptr temp.				*/
	Pp			ptr;		/* a ptr temp.				*/

	Pn = P;					/* save ptr to node at current tree level.	*/
	do Pp = P -> node.Pparent repeat (Pp -> node.Pparent) while (Pp ^= null);
						/* scan up the tree looking for a non-outputable	*/
						/* parent.				*/
	     if Pp -> node.Sreq then;			/* when one is found, save ptr to its kid.	*/
	     else
		go to found;
	     Pn = Pp;
	     end;
found:	Pfirst = Pn;				/* return ptr to first outputable node.		*/
	if Pn = P then do;				/* if our input node was the first outputable,	*/
	     if addr(P->node.Sreq)->Sreq.cross_ref then;	/* if node's names aren't being cross-referenced,	*/
	     else return("1"b);			/*   first time we encounter node is only time,	*/
						/*   and we must output it now.		*/
	     do PDnames = P -> node.PD repeat (Dnames.Pnext) while (Dnames.T ^= Tnames);
		end;				/* and if name from name-list is first on node,	*/
	     if Pname = addr (Dnames.names(1)) then	/* then node is first outputable.		*/
		return ("1"b);
	     end;
	return ("0"b);				/* otherwise, it is not the first outputable.	*/

	end first_outputable_node;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


new_page:	procedure;				/* on new_page_, write a footer and skip to next	*/
						/* page.					*/
	     if fcb.page_text_length + 4 > fcb.page_length then
		return;				/* do _n_o_t_h_i_n_g if no room on page for footer.	*/
	     added_NL = fcb.page_text_length - fcb.line_no;
	     if added_NL > 0 then
		call ioa_$ioa_switch_nnl (fcb.Piocb, "^v/", added_NL);
						/* skip to first footing line.		*/
	     call ioa_$ioa_switch_nnl (fcb.Piocb, "^2/^a", line);
						/* write a line of underscores to divide output	*/
						/* from footer.				*/

						/* output the footing line.			*/
	     if eop.multiple_names then		/* if the footing line can contain two names, then*/
		if eop.Pfirst_name = eop.Plast_name then/* if both names are the same, use only the first.*/
		     call ioa_$ioa_switch_nnl (fcb.Piocb, "^/^45a^5x^32a^40xPage ^5d^|",
					 footing, eop.Pfirst_name -> name, fcb.page_no);
		else do;				/* else do, use both names in the footing line.	*/
		     Lfirst_name = min (32, 33 - verify (reverse (Pfirst_name -> name), " "));
		     Llast_name = min (32, 33 - verify (reverse (Plast_name -> name), " "));
		     call ioa_$ioa_switch_nnl (fcb.Piocb, "^/^45a^5x^68a^4xPage ^5d^|",
			footing, substr (Pfirst_name -> name, 1, Lfirst_name) ||
			" -- " || substr (Plast_name -> name, 1, Llast_name), fcb.page_no);
		     eop.Pfirst_name = eop.Plast_name;	/* last node on this page is first on next page.	*/
		     end;
	     else					/* else, output the name of the current node.	*/
		call ioa_$ioa_switch_nnl (fcb.Piocb, "^/^45a^5x^32a^40xPage ^5d^|",
			                footing, Pname -> name, fcb.page_no);
	     fcb.page_no = fcb.page_no + 1;		/* increment page number.			*/
	     fcb.line_no = 1;			/* set number of lines on this new page.	*/

	end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


output_index:	procedure;			/* Internal procedure to output an index of the	*/
						/* node which were printed.			*/

     dcl	1 line (2:fcb.page_text_length) unaligned,	/* allocate the index page in the stack.	*/
	 (2 column (3)		char(40),		/* page is divide into 3 columns of 40-chars.	*/
	  2 new_line		char(1));
     dcl	column_ent		char(40) varying aligned;
						/* bug bypass variable.			*/

	do i = lbound(line,1) to hbound(line,1);	/* initialize new_line char at end of each line	*/
	     line(i).new_line = NL;			/* of the index page.			*/
	     end;
	j = 1;					/* number of the current column.		*/
	Pname = addr (INDEX);			/* use the word "INDEX" in footers of index pages.*/
	if fcb.line_no ^= 1 then call new_page();	/* start index on a new page.			*/

	do i = 1 to index_list.I;			/* scan thru the list of names to be in index.	*/
	     Pindex_entry = name_list.e (index_list.e(i));/* address the ith name in the sorted list.	*/
	     if Pindex_entry = addr (NULL_NAME) then;	/* skip names being excluded from the index.	*/
	     else do;
		fcb.line_no = fcb.line_no + 1;	/* add the ith name/page-no to next line.	*/
		if fcb.line_no > hbound(line,1) then	/* if name/page-no won't fit in this column:	*/
		     if j < 3 then do;		/* then put it in next column, if there is one.	*/
			j = j + 1;
			fcb.line_no = lbound(line,1);
			end;
		     else do;			/* if no more columns exist, then:		*/
			call iox_$put_chars (fcb.Piocb, addr(line), length(string(line)), code);
						/* output this index page.			*/
			call new_page();		/* skip to a new page of the index.		*/
			j = 1;			/* start with column 1, line 1 of this page.	*/
			end;
		Lname = min (32, 33 - verify (reverse (Pindex_entry -> name), " "));
						/* compute length of ith name in sorted list.	*/
		Lname = Lname + mod (Lname, 2);	/* make the length even.			*/
		page = page_list.e (index_list.e(i));	/* convert page number to a character string.	*/
		column_ent = substr(Pindex_entry -> name, 1, Lname) || substr(DOTS, 1, 32-Lname) || page;
		line(fcb.line_no).column(j) = column_ent;
		     				/* fill in the entry of the index.		*/
		end;
	     end;
	do j = j to 3;				/* blank out unused entries on this index page.	*/
	     do fcb.line_no = fcb.line_no + 1 to hbound(line,1);
		line(fcb.line_no).column(j) = "";
		end;
	     fcb.line_no = lbound(line,1) - 1;
	     end;
	fcb.line_no = hbound(line,1);			/* set proper count of lines on this page.	*/
	call iox_$put_chars (fcb.Piocb, addr(line), length(string(line)), code);
	call new_page();				/* output the final page of the index.		*/

	end output_index;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


output_node:	procedure	(Pnode_);			/* This internal procedure outputs the contents	*/
						/* of the entry represented by a node.		*/

     dcl	Pnode_			ptr;		/* ptr to the node to be output.		*/

     dcl	length			builtin,		/* avoid name conflict.			*/
	msg			char(200) varying,	/* special message to be output.		*/
	msf_comp_no		fixed bin(24),	/* an MSF component number.			*/
						/* a node or node-component.			*/
	1 node_			aligned based (Pnode_) like node;
						/* a node.				*/


test_node:
	if node_.T = Tsegment then do;		/* if the node is a segment, then		*/
seg:	     call lib_ptr_and_bc_ (Pnode_, 0, Pnode_, Pchars, Nchars, code);
	     if Pchars = null then			/* initiate the segment.			*/
		go to error;
segment_target:					/* compute how many chars in non-pt segment.	*/
	     Nchars = divide (Nchars, 9, 24, 0);
	     POD.Spartial_last_page = "0"b;
	     call lib_paged_output_ (addr(chars), length(chars), PPOD, code);
	     call hcs_$terminate_noname (Pchars, code);	/* terminate the segment.			*/
	     end;					/* simple, wasn't it.			*/

	else if node_.T = Tlink then do;		/* get link target, and process that.		*/
	     msf_comp_no = 0;
	     call lib_ptr_and_bc_ (Pnode_, msf_comp_no, Pnode_, Pchars, Nchars, code);
	     if Pchars = null then go to error;
	     if node_.T = Tsegment then go to segment_target;
	     if node_.T = Tarchive then go to archive_target;
	     if node_.T = Tarchive_comp then go to archive_target;
	     if node_.T = Tmsf_comp then do;
		Pnode_ = node_.Pparent;
		go to msf_target;
		end;
	     go to error;
	     end;

	else if node_.T = Tdirectory then do;
	     msg = "lib_output_node_list_$print:  The contents of a directory cannot be printed.";
	     POD.Spartial_last_page = "0"b;
	     call lib_paged_output_ (addr(substr(msg,1)), length(msg), PPOD, code);
	     end;

	else if node_.T = Tarchive_comp then		/* if the node is an archive component, treat	*/
	     go to arch;				/* it like an archive.			*/

	else if node_.T = Tarchive then do;		/* if the node is an archive then,		*/
arch:	     call lib_ptr_and_bc_ (Pnode_, 0, null, Pchars, Nchars, code);
	     if Pchars = null then
		go to error;
archive_target:
	     Nchars = divide (Nchars, 9, 24, 0);	/* convert bit count into a character count.	*/
	     POD.Spartial_last_page = "0"b;
	     call lib_paged_output_ (addr(chars), length(chars), PPOD, code);
	     call hcs_$terminate_noname (Pchars, code);	/* terminate the archive.			*/
	     Pchars = null;
	     end;

	else if node_.T = Tmsf then do;		/* if the node is an MSF, then		*/
	     msf_comp_no = 0;
	     POD.Imsf_comp = msf_comp_no;
	     call lib_ptr_and_bc_ (Pnode_, msf_comp_no, null, Pchars, Nchars, code);
	     if Pchars = null then go to error;
msf_target:    Nchars = divide (Nchars, 9, 24, 0);
	     call lib_paged_output_ (addr(chars), length(chars), PPOD, code);
	     do while (msf_comp_no < node_.bit_count);
		call hcs_$terminate_noname (Pchars, code);
		Pchars = null;
		POD.Imsf_comp = msf_comp_no;		/* msf_comp_no is no of NEXT MSF component.	*/
		call lib_ptr_and_bc_ (Pnode_, msf_comp_no, null, Pchars, Nchars, code);
		if Pchars = null then go to error;
		Nchars = divide (Nchars, 9, 24, 0);
		call lib_paged_output_ (addr(chars), length(chars), PPOD, code);
		end;
	     POD.Spartial_last_page = "0"b;
	     call lib_paged_output_ (addr(chars), 0, PPOD, code);
						/* output footer after last component.		*/
	     call hcs_$terminate_noname (Pchars, code);
	     Pchars = null;
	     end;

	else if node_.T = Tmsf_comp then		/* treat an MSF component to be output alone as	*/
	     go to seg;				/* a segment.				*/

	POD.Spartial_last_page = "1"b;		/* prepare POD for next node.			*/
	POD.Imsf_comp = -1;
	return;

error:	call convert_status_code_ (code, short, long);	/* convert error code to a string.		*/
	msg = "lib_output_node_list_$print:  " || long;
	POD.Spartial_last_page = "0"b;
	call lib_paged_output_ (addr(substr(msg,1)), length(msg), PPOD, code);
	POD.Spartial_last_page = "1"b;
	POD.Imsf_comp = -1;
						/* output the error message.			*/

	end output_node;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


output_nodes_kids:	procedure (P, level);		/* Internal procedure to output the outputable	*/
						/* kid nodes of a given node.			*/

     dcl	P			ptr,		/* ptr to node whose kids are to be printed. (In)	*/
	level			fixed bin(35);	/* level at which they are to be put in map.(In)	*/

     dcl	PDnodes_			ptr,		/* ptr to kid's node array descriptor.		*/
	Pnode_			ptr,		/* ptr to a kid node.			*/
	i			fixed bin;	/* a do-group index.			*/

     dcl	1 Dnodes_			aligned based (PDnodes_),
						/* kid's node array descriptor.		*/
	  2 header		like Dnodes.header,
	  2 nodes (Nnodes refer (Dnodes_.N))
				like node,

	1 Svalid			aligned based (addr (node_.Svalid)) like Svalid_req,
						/* switches telling which kid node fields are OK.	*/
	1 node_			aligned based (Pnode_) like node;
						/* a kid node.				*/

	do PDnodes_ = P->node_.PD repeat Dnodes_.Pnext while (Dnodes_.header.T ^= Tnodes);
	     end;					/* address the node array descriptor of the kids.	*/
	do i = 1 to Dnodes_.N;			/* scan through node array.			*/
	     Pnode_ = addr (Dnodes_.nodes(i));		/* access the ith node of the array.		*/
	     if e = 1 then
		call lib_output_node_$info (Pfcb, Pnode_, Srequirements, level, Pstarname);
	     else if e = 2 then
		call lib_output_node_$map (Pfcb, Pnode_, Srequirements, level, Pstarname);
	     else if e = 3 then do;
		call lib_output_node_$print (Pfcb, Pnode_, Srequirements, level, Pstarname);
		end;
	     if Svalid.kids then			/* look for kid's kids to print, if any.	*/
		call output_nodes_kids (Pnode_, level + 1);
	     end;

	end output_nodes_kids;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


print_footer: procedure (Ipage);			/* Internal procedure to print footing line	*/
						/*   for lib_output_node_list_$print at end of	*/
						/*   page (detected by lib_paged_output_).	*/

     dcl	Ipage			fixed bin;	/* current page number.			*/

	call ioa_$ioa_switch_nnl (fcb.Piocb, "^2/^a", line);
						/* write a line of underscores to divide output	*/
						/* from footer.				*/
	call ioa_$ioa_switch_nnl (fcb.Piocb, "^/^45a^5x^32a^40xPage ^5d^|",
			                footing, Pname -> name, Ipage);
						/* print footing line containing name of node.	*/
	fcb.page_no = Ipage;			/* increment page number.			*/
	fcb.line_no = 1;				/* set number of lines on this new page.	*/

	end print_footer;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_fcb_;

%include lib_paged_output_data_;

%include lib_based_args_;

%include lib_list_;

%include lib_node_;


	end lib_output_node_list_;
