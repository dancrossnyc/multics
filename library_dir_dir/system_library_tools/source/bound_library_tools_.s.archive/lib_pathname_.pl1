/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: lib_pathname_							*/
	/*									*/
	/* This is the subroutine interface for the library_pathname command/af.  Given a	*/
	/* library descriptor name, an array of library names, an array of star_names, it	*/
	/* returns an array of pathnames of library entries matching the star_names.  The	*/
	/* lib_args_.incl.pl1 include file can be used by the valler to declare space for the	*/
	/* library names and star names arrays.						*/
	/*									*/
	/* Status:								*/
	/* 0) Created:    October, 1981 by G. C. Dixon					*/
	/* 1) Modified:   January, 1984 by Jim Lippard to get Srequirements and Scontrol from the	*/
	/*                calling procedure.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
lib_pathname_:
	proc (Adescriptor, Plibrary, Pstarname, Pexclude, Srequirements,
	     Scontrol, Presult_area, Ppaths, Npaths, progress, Acode)
	options (rename ((alloc_, smart_alloc_)));

     dcl	Adescriptor		char(168) varying,	/* name of library descriptor to be used. (In)	*/
						/*   If = "", then default descriptor is used.	*/
	Presult_area		ptr,		/* ptr to area in which array of found pathnames	*/
						/*   is allocated. (In)			*/
	Ppaths			ptr,		/* ptr to array of allocated pathnames. (Out)	*/
	Npaths			fixed bin,	/* number of allocated pathnames. (Out)		*/
	progress			fixed bin,	/* integer indicating progress of search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_info command supported	*/
						/*       by this descriptor.			*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	Acode			fixed bin(35);	/* status code.  				*/

     dcl	Parea			ptr,
	Pnode			ptr,
	Ptree			ptr,
	cleanup			condition,
	code			fixed bin(35),
	i			fixed bin;

     dcl	area			area based(Parea),
	paths (Npaths)		char(200) based(Ppaths),
	result_area		area based(Presult_area);
	
     dcl (addr, null)		builtin;

     dcl	condition_		entry (char(*), entry),
	get_system_msa_		entry (ptr, fixed bin(35), ptr),
	lib_descriptor_$info	entry (char(168) var, ptr, ptr, ptr, bit(72) aligned, bit(36) aligned,
				     ptr, ptr, fixed bin, fixed bin(35)),
	lib_node_path_$absolute	entry (ptr) returns(char(200) var),
	lib_sort_tree_$make_name_list	entry (ptr, ptr, ptr, ptr, fixed bin(35)),
	msa_manager_$area_handler	entry (ptr, char(*), ptr, ptr, bit(1) aligned),
	release_system_msa_		entry (ptr, fixed bin(35));

     dcl (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant);

	Acode = 0;				/* Initialize return code.			*/

	Sc.check_archive = TRUE;
	Sc.search_names = TRUE;
	S.primary_name = TRUE;
	S.pathname = TRUE;

	Parea = null;				/* Prepare for release of multi-segment area (MSA)*/
	on cleanup call janitor();

	call condition_ ("area", msa_manager_$area_handler);
						/* let msa_manager_ handle area conditions.	*/
	call get_system_msa_ (addr(Parea), 0, null);	/* get a system MSA.			*/

	call lib_descriptor_$info (Adescriptor, Plibrary, Pstarname, Pexclude,
	     Srequirements, Scontrol, Parea, Ptree, progress, Acode);
	if Acode ^= 0 then go to BAD_SEARCH;

	allocate  index_list in (area),		/* allocate space to hold list of found status	*/
		name_list  in (area),		/*   nodes.				*/
		node_list  in (area);
	index_list.I = 0;
	name_list.I = 0;
	node_list.I = 0;
	call lib_sort_tree_$make_name_list (Ptree, Pname_list, Pindex_list, Pnode_list, Acode);
	if Acode ^= 0 then go to NO_MATCH;		/* Fill in the list.			*/

	Npaths = node_list.I;			/* Fill in resulting pathnames.		*/
	allocate paths in (result_area);
	do i = 1 to node_list.I;
	     Pnode = node_list.e(i);
	     paths(i) = lib_node_path_$absolute (Pnode);
	     end;
	call janitor();
	return;


BAD_SEARCH:
NO_MATCH: Ppaths = null;
	Npaths = 0;
	call janitor();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


janitor:	proc;

	if Parea ^= null then
	     call release_system_msa_ (addr(Parea), code);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include lib_based_args_;

%include lib_list_;

%include lib_Svalid_req_;

%include lib_Scontrol_;

	end lib_pathname_;
