/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  lib_free_node_							*/
	/*									*/
	/*      This procedure frees the storage used by library nodes.			*/
	/*									*/
	/* E__n_t_r_y:  lib_free_node_$array						*/
	/*									*/
	/*      This entry point frees all structures attached to each node of a library node	*/
	/* array, and then frees the node array, itself.					*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  lib_free_node_$array entry (ptr);					*/
	/*									*/
	/*      call lib_free_node_$array (PDnodes);					*/
	/*									*/
	/* 1) PDnodes	points to the library node array to be freed. (In)		*/
	/*		is a null pointer. (Out)					*/
	/*									*/
	/* E__n_t_r_y:  lib_free_node_$descriptors						*/
	/*									*/
	/*      This entry point frees all structures attached to a single library node.	*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  lib_free_node_$descriptors entry (ptr);				*/
	/*									*/
	/*      call lib_free_node_$descriptors (Pnode);					*/
	/*									*/
	/* 1) Pnode	points to the library node whose descriptors are to be freed. (In)	*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created:  Aug, 1973 by G. C. Dixon					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lib_free_node_:		procedure;

     dcl	APnode			ptr,		/* ptr to node whose descriptors are to be freed.	*/
						/* (In)					*/
	APDnodes			ptr;		/* ptr to node array to be freed. (In)		*/
						/* null ptr. (Output)			*/
     dcl	Parea			ptr,		/* ptr to an area.				*/
	i			fixed bin;	/* do group index.				*/

     dcl	area			area based (Parea);
						/* create a dummy area to make PL/I happy when	*/
						/* it executes the free statements.		*/

     dcl	1 Dfree			based (PD),	/* structure used to free all descriptors.	*/
	  2 header		like D,
	  2 body (Dfree.length-size(D))
				fixed bin(35);

     dcl (addr, null, size)		builtin;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


array:		entry	(APDnodes);		/* entry to free a node descriptor, and its	*/
						/* descriptors.				*/

	PDnodes = APDnodes;				/* address the node array descriptor.		*/
	Parea = PDnodes;				/* for PL/I's benefit, fake ptr to area for free.	*/
	if PDnodes = null then			/* if descriptor has already been freed, done.	*/
	     return;
	if Dnodes.version ^= Vnodes_1 then		/* if structure of descriptor unknown, exit.	*/
	     return;
	do i = 1 to Dnodes.N;			/* for each node in the node array:		*/
	     Pnode = addr (Dnodes.nodes(i));		/*   (1) address the node.			*/
	     call free_node_descriptors;		/*   (2) free its descriptors.		*/
	     end;					/* then:					*/
	free Dnodes in (area);			/*   (3) free the node array descriptor.	*/
	APDnodes = null;				/*   (4) null out the ptr to the freed descriptor	*/
						/*       to prevent mistaken attempts to refree.	*/
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


descriptors:	entry	(APnode);			/* entry to free a node's descriptors.		*/

	Pnode = APnode;				/* address the node.			*/
	Parea = Pnode;				/* for PL/I's benefit, fake ptr to area for free.	*/
	call free_node_descriptors;			/* free its descriptors.			*/
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


free_node_descriptors:	procedure;		/* This internal procedure frees descriptors 	*/
						/* attached to the node pointed to by Pnode.	*/

	do PD = node.PD repeat node.PD while (PD ^= null);/* free descriptors, one at a time.		*/
	     node.PD = D.Pnext;			/* save ptr to next descriptor.		*/
	     if D.T = Tnodes then			/* if this is a node array descriptor, then	*/
		call array (PD);			/* call array freer to do the work.		*/
	     else					/* otherwise, do the freeing ourself.		*/
		free Dfree in (area);
	     end;

	end free_node_descriptors;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_node_;

	end lib_free_node_;
