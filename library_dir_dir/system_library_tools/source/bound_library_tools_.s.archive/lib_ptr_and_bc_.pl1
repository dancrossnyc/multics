/* ***************************************************************
   *                                                             *
   * Copyright, (C) Honeywell Information Systems Inc., 1982     *
   *                                                             *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *                                                             *
   * Copyright (c) 1972 by Massachusetts Institute of            *
   * Technology and Honeywell Information Systems, Inc.          *
   *                                                             *
   *************************************************************** */




lib_ptr_and_bc_:	procedure (Pnode, msf_comp_no, Ptarget_node, ptr, bc, Acode);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This procedure is part of the library maintenance subsystem of tools.  Documentation of*/
	/* the complete subsystem is available in AN-80, Library Maintenance.			*/
	/*									*/
	/* This procedure, when given the pointer to a library node, initiates the segment	*/
	/* containing the entry identified by the node and returns the ptr and bit count of	*/
	/* the segment.  The procedure can handle archive components (and even archived-archive	*/
	/* components, etc).  For MSFs, msf_comp_no should be set to 0 to obtain a ptr to and	*/
	/* bit count of the first component (named 0).  msf_comp_no will be incremented for use	*/
	/* in obtaining ptr/bc for the next component in a subsequent call.  If ptr is null, then	*/
	/* the library entry identified by the node could not exist (or there is no MSF component	*/
	/* which corresponds to the value of msf_comp_no).  Links are chased and their target	*/
	/* is initiated.  A pointer to the target node for link targets and MSF components is	*/
	/* returned as Ptarget_node.							*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created by:   G. C. Dixon, April 8, 1975					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     dcl						/*		Parameters		*/
/*	Pnode			ptr,		/* ptr to node identifying lib entry to be	*/
						/*   initiated. (In)			*/
	msf_comp_no		fixed bin(24),	/* if node identifies an MSF, numeric name of MSF	*/
						/*   component to be initiated. (In)		*/
						/* if node identifies an MSF, the input value	*/
						/*   is incremented by 1. (Out)		*/
	Ptarget_node		ptr,		/* ptr to the node which identifies the library	*/
						/*   entry actually initiated.  This node is the	*/
						/*   final target node of a link, or the MSF comp	*/
						/*   node for an MSF. (Out)			*/
	ptr			ptr,		/* is the pointer to the initiated entry. (Out)	*/
	bc			fixed bin(24),	/* is the bit count of the initiated entry. (Out)	*/
	Acode			fixed bin(35);	/* a status Acode. (Out)			*/

     dcl						/*	Automatic Variables			*/
	code			fixed bin(35),	/* an error code.				*/
	dir			char(168) varying,	/* dir part of path name of lib node.		*/
	ent			char(32) varying,	/* ent part of path name of lib node.		*/
         (i, j)			fixed bin,	/* do group index variables.			*/
	name			char(32) aligned;	/* character string name of MSF comp we		*/
						/*   are looking for.			*/

     dcl						/*	Builtin Functions			*/
         (addr, min, null, pointer, substr, verify)
				builtin;

     dcl						/*		Entries			*/
	hcs_$initiate		entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2),
				       ptr, fixed bin(35)),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying);

     dcl						/*	Static Variables			*/
         (error_table_$dirseg,
	error_table_$improper_data_format,
	error_table_$noentry)	fixed bin(35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	Acode = 0;				/* initialize the output status Acode.		*/
	if node.T = Tsegment then do;			/* initiate the segment, as is.		*/
like_segment:  call lib_node_path_ (Pnode, dir, ent);	/*   first, get path name of segment.		*/
	     call hcs_$initiate ((dir), (ent), "", 0, 0, ptr, code);
	     if ptr ^= null then do;
		bc = node.bit_count;
		Ptarget_node = Pnode;
		end;
	     else Acode = code;
	     end;

 	else if node.T = Tarchive then
	     if node.offset = 0 then go to like_segment;	/* unarchived-archives are like segments.	*/
	     else go to like_archive_component;		/* archived-archives are really archive comps.	*/

	else if node.T = Tarchive_comp then do;		/* get ptr/bc of parent node for the		*/
like_archive_component:				/* archive component, then use offset/bc in node.	*/
	     call lib_ptr_and_bc_ (node.Pparent, 0, null, ptr, 0, Acode);
	     if ptr ^= null then do;
		ptr = pointer (ptr, node.offset);
		bc = node.bit_count;
		Ptarget_node = Pnode;
		end;
	     end;

	else if node.T = Tlink then do;		/* get ptr/bc for link target, if any.		*/
	     if Svalid.kids then do;
		do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
		     end;				/*   find target of this link.		*/
		if Dnodes.N = 1 then		/*   get ptr/bc for this target.		*/
		     call lib_ptr_and_bc_ (addr(Dnodes.nodes(1)), msf_comp_no, Ptarget_node, ptr, bc, Acode);
		else do;
		     ptr = null;
		     Acode = error_table_$improper_data_format;
		     end;
		end;
	     else ptr = null;
	     end;

	else if node.T = Tdirectory then do;		/* can't initiate directories.		*/
	     ptr = null;
	     Acode = error_table_$dirseg;
	     end;

	else if node.T = Tmsf_comp then go to like_segment;
						/* msf components are really segments at heart.	*/


	else if node.T = Tmsf then			/* get the correspondingly-named msf component.	*/
	     if msf_comp_no + 1 <= node.msf_indicator then/*   test for existence of desired comp.	*/
		if Svalid.kids then do;
		     do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
			end;
		     name = char_form (msf_comp_no);
		     Ptarget_node = null;
		     do i = msf_comp_no+1 to Dnodes.N,
			  1 to min(msf_comp_no, Dnodes.N) while (Ptarget_node = null);
			do PDnames = addr(Dnodes.nodes(i))->node.PD repeat Dnames.Pnext while (Dnames.T ^= Tnames);
			     end;
			do j = 1 to Dnames.N while (Dnames.names(j) ^= name);
			     end;
			if j <= Dnames.N then Ptarget_node = addr(Dnodes.nodes(i));
			end;
		     if Ptarget_node ^= null then
			call lib_ptr_and_bc_ (Ptarget_node, msf_comp_no, Ptarget_node, ptr, bc, Acode);
		     else ptr = null;
		     msf_comp_no = msf_comp_no + 1;
		     end;
		else ptr = null;
	     else ptr = null;

	else ptr = null;				/* I don't know what it is!  Too bad.		*/

	if ptr = null then if Acode = 0 then Acode = error_table_$noentry;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


char_form: procedure (number) returns (char(32) aligned);	/* internal proc to convert an integer to a	*/
						/* left-justified 32-char string.		*/

     dcl	number			fixed bin(24),
	char_number		pic "zzzzz9",
	i			fixed bin;

	char_number = number;			/* convert number to right-justified numeric	*/
						/* string.				*/
	i = verify (char_number, " ");		/* find left-most significant digit.		*/
	return (substr(char_number,i));		/* return significant digits.			*/

	end char_form;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_node_;
	end lib_ptr_and_bc_;
