/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-10-02,Blackmore), approve(89-10-02,MCR8138), audit(89-10-03,Vu),
     install(89-10-09,MR12.3-1087):
     Make consistent with 'pl1_macro_lex_' in use of 'translator_temp_' for
     area management.
                                                   END HISTORY COMMENTS */


/* format: style2 */
pl1_macro:
pmac:
     procedure;

/* Free standing command to macro_process a pl1 segment:
  1. Usual command line scan.
  2. set up temp_seg_3 for call to pl1_lex_
  3. ...
  4. Produce an XREF listing, if requested.
  5. Clean-up pl1_macro.
  6. Produce the output segment.
  7. Usual cleanup.

   Written 30 Nov 79 by Marshall Presser 
   Modified: The first half of 1981, ending July 28, to make it work and for auditing, MEP
*/

/* automatic */

	declare arg_count		 fixed binary;
	declare arg_length		 fixed binary (21);
	declare arg_ptr		 pointer;
	declare argument_no		 fixed binary;
	declare argx		 fixed binary;
	declare bit_count		 fixed binary (24);
	declare 1 ca,
		2 list		 bit (1),
		2 pd		 bit (1),
		2 print		 bit (1),
		2 target		 bit (1),
		2 version		 bit (1);
	declare call_length		 fixed binary (21);
	declare call_ptr		 pointer;
	declare cannon_name		 char (32);
	declare clargx		 fixed binary;
	declare code		 fixed binary (35);
	declare data_type		 fixed binary (8) unsigned;
	declare in_dname		 char (168);
	declare in_ename		 char (32);
	declare in_seg_ptr		 pointer;
	declare in_seg_length	 fixed binary (21);
	declare language_suffix	 char (16) varying;
	declare n_chars_left	 fixed binary (2);
	declare n_words		 fixed binary (19);
	declare needs_cleanup	 bit (1);
	declare num_of_clargs	 fixed binary (17);
	declare num_of_params	 fixed binary (17);

	declare out_dname		 char (168);
	declare out_ename		 char (32);
	declare out_seg_ptr		 pointer;
	declare out_seg_length	 fixed binary (21);
	declare output_length	 fixed binary (21);
	declare output_ptr		 pointer;
	declare real_seg_name	 character (32) varying;
	declare source_length	 fixed binary (21);
	declare source_ptr		 pointer;
	declare target_length	 fixed binary (21);
	declare target_ptr		 pointer;
	declare target_value	 fixed binary (17);
	declare temp_target		 char (32);
	declare trans_temp_ptr	 pointer;

/* based */

	declare arg_string		 char (arg_length) based (arg_ptr);
	declare call_string		 char (call_length) based (call_ptr);
	declare in_seg		 char (in_seg_length) based (in_seg_ptr);
	declare out_seg		 char (out_seg_length) based (out_seg_ptr);
	declare result_string	 char (output_length) based (output_ptr);
	declare target_string	 char (target_length) based (target_ptr);


/* builtin */

	declare (addr, baseno, divide, index, low, length, mod, null, reverse, rtrim, search, string, substr, verify)
				 builtin;

/* condition */

	declare cleanup		 condition;

/* internal static */

	declare MINUS_SIGN		 char (1) internal static options (constant) initial ("-");
	declare suffix		 char (4) internal static options (constant) initial ("pmac");

/* external static */

	declare (
	        error_table_$badopt,
	        error_table_$inconsistent,
	        error_table_$noarg
	        )			 fixed binary (35) external static;
	declare iox_$user_output	 pointer external static;

/* entry */

	declare com_err_		 entry options (variable);
	declare com_err_$suppress_name entry options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
	declare cu_$cp		 entry (pointer, fixed binary (21), fixed binary (35));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed binary (35));
	declare expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare get_pdir_		 entry returns (char (168));
	declare get_system_free_area_	 entry () returns (pointer);
	declare get_temp_segments_	 entry (char (*), (*) pointer, fixed binary (35));
	declare hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed binary (24), fixed binary (2),
				 pointer, fixed binary (35));
	declare hcs_$make_seg	 entry (char (*), char (*), char (*), fixed binary (5), pointer,
				 fixed binary (35));
	declare hcs_$set_bc_seg	 entry (pointer, fixed binary (24), fixed binary (35));
	declare hcs_$terminate_noname	 entry (pointer, fixed binary (35));
	declare hcs_$truncate_seg	 entry (pointer, fixed binary (19), fixed binary (35));
	declare ioa_		 entry options (variable);
	declare iox_$put_chars	 entry (pointer, pointer, fixed binary (21), fixed binary (35));
	declare pathname_		 entry (char (*), char (*)) returns (char (168));
	declare release_temp_segments_ entry (char (*), (*) pointer, fixed binary (35));
	declare translator_temp_$get_segment
				 entry (char (*), ptr, fixed bin (35));
	declare translator_temp_$release_all_segments
				 entry (ptr, fixed bin (35));

%include pl1_macro_lex_dcls;

/* program */

	source_ptr = null;
	output_ptr = null;
	temp_segs (*) = null;
	trans_temp_ptr = null;
	call_ptr = null;
	call_length = 0;
	pl1_macro_severity_ = 5;
	string (ca) = ""b;
	ca.version = "1"b;
	needs_cleanup = "0"b;
	num_of_clargs = 0;
	num_of_params = 0;

	on cleanup call macro_cleanup;

	call translator_temp_$get_segment (command, trans_temp_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Getting area segment in process directory.");
		call macro_cleanup;
		return;
	     end;
	call get_temp_segments_ (command, temp_segs (*), code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Getting temporary segments in process directory.");
		call macro_cleanup;
		return;
	     end;

	output_ptr = temp_segs (2);

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, command);
		return;
	     end;
	argument_no = 0;
	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     call macro_cleanup;
		     return;
		end;

	     if arg_string = ""
	     then ;

	     else if arg_string = "-print" | arg_string = "-pr"
	     then ca.print = "1"b;

	     else if arg_string = "-process_dir" | arg_string = "-pd"
	     then ca.pd = "1"b;

	     else if arg_string = "-version" | arg_string = "-ver"
	     then ca.version = "1"b;

	     else if arg_string = "-no_version" | arg_string = "-nver"
	     then ca.version = "0"b;

	     else if arg_string = "-list" | arg_string = "-ls"
	     then ca.list = "1"b;

	     else if arg_string = "-target" | arg_string = "-tgt"
	     then do;
		     ca.target = "1"b;
		     argx = argx + 1;
		     if argx > arg_count
		     then do;
			     call com_err_ (error_table_$noarg, command, "Missing target string after -target.");
			     call macro_cleanup;
			     return;
			end;

		     call cu_$arg_ptr (argx, target_ptr, target_length, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, command, "Argument ^d.", argx);
			     call macro_cleanup;
			     return;
			end;
		     else do;
			     temp_target = target_string;
			     call system_type_ (temp_target, cannon_name, target_value, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, command, "Invalid target string: ^a", target_string);
				     call macro_cleanup;
				     return;
				end;
			     else do;
				     temp_seg_3.target_value = target_value;
				end;
			end;

		end;
	     else if arg_string = "-call"
	     then do;
		     argx = argx + 1;
		     if argx > arg_count
		     then do;
			     call com_err_ (error_table_$noarg, command, "Missing call string after -call.");
			     call macro_cleanup;
			     return;
			end;

		     call cu_$arg_ptr (argx, call_ptr, call_length, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, command, "Argument ^d.", argx);
			     call macro_cleanup;
			     return;
			end;

		end;

	     else if arg_string = "-parameter" | arg_string = "-pm"
	     then do;
		     argx = argx + 1;
		     num_of_params = num_of_params + 1;
		     if num_of_params >= 65
		     then do;
			     call com_err_ (0, command, "No more than 64 parameters permitted.");
			     call macro_cleanup;
			     return;
			end;

		     if argx + 1 > arg_count
		     then do;
			     call com_err_ (error_table_$noarg, command, "Missing arguments after -pm.");
			     call macro_cleanup;
			     return;
			end;
		     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, command, "Argument ^d.", argx);
			     call macro_cleanup;
			     return;
			end;
		     else do;
			     data_type = get_data_type (arg_string);
			     if data_type ^= identifier
			     then do;
				     call com_err_ (0, command,
					"The first arg in a parameter pair must be an identifier: ^a",
					arg_string);
				     call macro_cleanup;
				     return;
				end;
			     else do;
				     temp_seg_3.cl_params (num_of_params).name.string_size = arg_length;
				     temp_seg_3.cl_params (num_of_params).name.string_ptr = arg_ptr;
				end;
			     argx = argx + 1;
			     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, command, "argument ^d.", argx);
				     call macro_cleanup;
				     return;
				end;

			     data_type = get_data_type (arg_string);
			     if data_type = no_token
			     then do;
				     call com_err_ (0, command, "Wrong data type in command line arg: ^a",
					arg_string);
				     call macro_cleanup;
				     return;
				end;
			     else do;
				     temp_seg_3.cl_params (num_of_params).value.string_ptr = arg_ptr;
				     temp_seg_3.cl_params (num_of_params).value.string_size = arg_length;
				     temp_seg_3.cl_params (num_of_params).value.type = data_type;
				     temp_seg_3.cl_params (num_of_params).value.created = "0"b;
				end;
			end;

		end;

	     else if arg_string = "-arguments" | arg_string = "-ag"
	     then do;
		     argx = argx + 1;
		     if argx > arg_count
		     then do;
			     call com_err_ (error_table_$noarg, command, "Missing arguments after -ag.");
			     call macro_cleanup;
			     return;
			end;
		     num_of_clargs = arg_count - argx + 1;
		     do clargx = 1 to num_of_clargs;
			call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
			if code ^= 0
			then do;
				call com_err_ (code, command, "Argument ^d.", argx);
				call macro_cleanup;
				return;
			     end;
			else do;
				temp_seg_3.cl_args (clargx).string_ptr = arg_ptr;
				temp_seg_3.cl_args (clargx).string_size = arg_length;
			     end;

			argx = argx + 1;
			if argx >= 65
			then do;
				call com_err_ (0, command, "No more than 64 cl_args permitted.");
				call macro_cleanup;
				return;
			     end;
		     end;
		end;
	     else if index (arg_string, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", arg_string);
		     call macro_cleanup;
		     return;
		end;

	     else do;
		     argument_no = argument_no + 1;

		     if argument_no = 1
		     then do;
			     in_seg_ptr = arg_ptr;
			     in_seg_length = arg_length;
			end;

		     else if argument_no = 2
		     then do;
			     out_seg_ptr = arg_ptr;
			     out_seg_length = arg_length;
			end;
		end;
	end;

	if argument_no = 0 | argument_no > 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a in_path {out_path} {-control_args}", command);
		call macro_cleanup;
		return;
	     end;

	if ca.pd & argument_no > 1
	then do;
		call com_err_ (error_table_$inconsistent, command,
		     "The -pd control argument is incompatible with an output path name.");
		call macro_cleanup;
		return;
	     end;

	if ca.print & argument_no > 1
	then do;
		call com_err_ (error_table_$inconsistent, command,
		     "The -pr control argument is incompatible with an output path name.");
		call macro_cleanup;
		return;
	     end;

	if ca.print & ca.pd
	then do;
		call com_err_ (error_table_$inconsistent, command,
		     "The -pr and -pd control arguments are incompatible.");
		call macro_cleanup;
		return;
	     end;

	call get_input_segment (code);
	if code ^= 0
	then do;
		call macro_cleanup;
		return;
	     end;

	if ca.list
	then call ioa_ ("List not yet implemented.");

	if ^ca.print
	then do;
		if argument_no = 1			/* Should we use default output ? */
		then do;
			if ca.pd
			then out_dname = get_pdir_ ();
			else out_dname = in_dname;
			out_ename = real_seg_name;
		     end;
		else do;				/* second pathname given */
			call expand_pathname_ (out_seg, out_dname, out_ename, code);
			if code ^= 0
			then do;
				call com_err_ (code, command, "^a", out_seg);
				call macro_cleanup;
				return;
			     end;
		     end;

		call hcs_$make_seg (out_dname, out_ename, "", 1010b, output_ptr, code);
		if output_ptr = null
		then do;
			call com_err_ (code, command, "^a", pathname_ (out_dname, out_ename));
			call macro_cleanup;
			return;
		     end;
		if baseno (output_ptr) = baseno (source_ptr)
						/* same source as output not on */
		then do;
			call com_err_ (0, command,
			     "The source segment and the output segment are the same.  No output produced.");
			call macro_cleanup;
			return;
		     end;
	     end;

	temp_seg_3.source_ptr = source_ptr;
	temp_seg_3.source_length = source_length;
	temp_seg_3.output_length = 4 * sys_info$max_seg_size;
	temp_seg_3.flags.list = ca.list;
	temp_seg_3.area_ptr = trans_temp_ptr;
	temp_seg_3.number_of_clargs = num_of_clargs;
	temp_seg_3.number_of_params = num_of_params;
	temp_seg_3.constant_base = null ();
	temp_seg_3.variable_base = null ();

	if ^ca.target
	then temp_seg_3.target_value = none;

	if ^valid_penultimate_suffix (language_suffix)
	then call com_err_ (0, command, "Warning: ^a an unrecognized penultimate suffix.  PL/I lex rules used.",
		language_suffix);


	if ca.version
	then call ioa_ ("^a ^a", command, macro_version);

	pl1_macro_severity_ = 0;
	needs_cleanup = "1"b;
	call pl1_macro_lex_ (temp_segs, code);
	needs_cleanup = "0"b;

	if code ^= 0
	then call com_err_ (0, command, "Errors in macro processing; output segment may be suspect.");

/* Copy the macro processed program over to the output segment */

	output_length = temp_seg_3.output_length;

	if ca.print
	then do;
		call iox_$put_chars (iox_$user_output, temp_segs (2), output_length, code);
		if code ^= 0
		then do;
			call com_err_ (code, command);
			call macro_cleanup;
			return;
		     end;
	     end;

	else do;

		substr (result_string, 1, output_length) = substr (temp_segs (2) -> output_string, 1, output_length);

		n_chars_left = mod (4 - output_length, 4);
		substr (result_string, output_length + 1, n_chars_left) = low (n_chars_left);

		n_words = divide (output_length + 3, 4, 19);

		call hcs_$truncate_seg (output_ptr, n_words, code);
		if code ^= 0
		then do;
			pl1_macro_severity_ = 5;
			call com_err_ (code, command, "Unable to truncate ^a to ^d words.",
			     pathname_ (out_dname, out_ename), n_words);
		     end;

		bit_count = 9 * output_length;

		call hcs_$set_bc_seg (output_ptr, bit_count, code);
		if code ^= 0
		then do;
			pl1_macro_severity_ = 5;
			call com_err_ (code, command, "Unable to set bit count of ^a to ^d.",
			     pathname_ (out_dname, out_ename), bit_count);
		     end;
	     end;

	if call_ptr ^= null & pl1_macro_severity_ <= 1
	then begin;
		declare command_line	 character (call_length + 169);
		command_line = call_string || " " || pathname_ (out_dname, out_ename);
		call cu_$cp (addr (command_line), length (command_line), code);
	     end;

	call macro_cleanup;
	return;

get_data_type:
     procedure (chars) returns (fixed binary (8) unsigned);

	declare chars		 character (*);
	declare ch_len		 fixed binary (24);

/* scan the character string:
	if all digits , then data_type = dec_integer
	else if begins and end with a QUOTE, then char_string
	else if begins with a QUOTE and ends with QUOTE b and everythin inbetween is 1 or o then bit_string
	else if begins with an alphabertic and others are identifier chars, then identifier
	else invalid data type */

	ch_len = length (chars);
	if ch_len = 0
	then return (no_token);

	if verify (chars, numerals) = 0
	then return (dec_integer);

	else if substr (chars, 1, 1) = QUOTE
	then do;
		if ch_len = 1
		then return (no_token);

		else if substr (chars, ch_len, 1) = QUOTE
		then return (char_string);

		else if substr (chars, ch_len, 1) = "b" & ch_len > 2 & substr (chars, ch_len - 1, 1) = QUOTE
		     & verify (substr (chars, 2, ch_len - 3), zero_one) = 0
		then return (bit_string);

		else return (no_token);
	     end;

	else if search (chars, alphabetics) = 1 & verify (chars, identifier_chars) = 0
	then return (identifier);

	else if substr (chars, 1, 1) = MINUS_SIGN
	then do;
		if ch_len = 1
		then return (no_token);

		else if verify (substr (chars, 2), numerals) = 0
		then return (dec_integer);

		else return (no_token);
	     end;

	else return (no_token);

     end get_data_type;

get_input_segment:
     procedure (code);

	declare code		 fixed binary (35); /* (Output) standard status code */

	call expand_pathname_$add_suffix (in_seg, suffix, in_dname, in_ename, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "^a", in_seg);
		return;
	     end;

/* trim off the ".macro" to get the segments REAL name. */

	real_seg_name = substr (in_ename, 1, length (rtrim (in_ename)) - length (suffix) - 1);
	if number_of_components (real_seg_name) > 1
	then language_suffix = get_last_component (real_seg_name);
	else language_suffix = "";

	call hcs_$initiate_count (in_dname, in_ename, "", bit_count, 0, source_ptr, code);
	if source_ptr ^= null
	then do;
		code = 0;
		source_length = divide (bit_count + 8, 9, 21);
		return;
	     end;
	else do;
		call com_err_ (code, command, "^a", pathname_ (in_dname, in_ename));
		return;
	     end;
	return;
     end get_input_segment;

number_of_components:
     procedure (seg_name) returns (fixed binary);
	declare seg_name		 character (*) varying;
	declare (indx, count, nex)	 fixed binary;

	count = 0;
	indx = 1;
	do while (indx < length (seg_name));
	     nex = search (substr (seg_name, indx), ".");
	     if nex = 0
	     then nex = length (seg_name);
	     indx = indx + nex;
	     count = count + 1;

	end;
	return (count);
     end number_of_components;

get_last_component:
     procedure (seg_name) returns (character (*) varying);
	declare seg_name		 char (*) varying;
	declare indx		 fixed binary;

	indx = search (reverse (seg_name), ".");
	return (substr (seg_name, length (seg_name) - indx + 2));

     end get_last_component;

valid_penultimate_suffix:
     procedure (suffix_chars) returns (bit (1) aligned);
	declare suffix_chars	 char (*) varying;

	return (suffix_chars = "pl1" | suffix_chars = "cds" | suffix_chars = "rd");

     end valid_penultimate_suffix;

/* Release temporary storage and terminate segments. */

macro_cleanup:
     procedure;

	if source_ptr ^= null
	then do;
		call hcs_$terminate_noname (source_ptr, code);
		source_ptr = null;
	     end;

	if (output_ptr ^= temp_segs (2) & output_ptr ^= null)
	then do;
		call hcs_$terminate_noname (output_ptr, code);
		output_ptr = null;
	     end;

	if needs_cleanup
	then call pl1_macro_lex_$cleanup (temp_segs);

	if temp_segs (1) ^= null
	then call release_temp_segments_ (command, temp_segs (*), code);
	temp_segs (*) = null;

	call translator_temp_$release_all_segments (trans_temp_ptr, code);
	trans_temp_ptr = null;

     end macro_cleanup;

     end pl1_macro;
