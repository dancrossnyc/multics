/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
pl1_macro_error_:
     procedure (P_error_severity, P_error_string, P_source_ptr, P_source_index, P_source_length);

	declare P_error_severity	 fixed binary (35); /* (Input) error_severity of the error */
	declare P_error_string	 char (*);	/* (Input) error message */
	declare P_source_ptr	 pointer;		/* (Input) pointer to  the source */
	declare P_source_index	 fixed binary (21); /* INPUT: char index where error occured */
	declare P_source_length	fixed binary (21); /* INPUT: length in chars of source segment */
/* automatic */

	declare line_length		 fixed binary (21);
	declare line_number		 fixed binary (21);
	declare line_start		 fixed binary (21);

	declare loop		 bit (1);		/* based */

	declare source_string	 char (P_source_length) based (P_source_ptr);

/* builtin */

	declare index		 builtin;
	declare length		 builtin;
	declare max		 builtin;
	declare null		 builtin;
	declare substr		 builtin;

/* internal static */

	declare NL		 char (1) internal static options (constant) initial ("
");

/* entry */

	declare ioa_		 entry options (variable);

%include pl1_macro_lex_dcls;

/* program */

	pl1_macro_severity_ = max (P_error_severity, pl1_macro_severity_);

	line_number = 0;

/* find the line in the source, if there is one */

	if P_source_ptr ^= null ()
	then do;

		line_start = 1;
		line_length = 0;

		loop = "1"b;
		do while (loop);
		     line_number = line_number + 1;
		     line_start = line_start + line_length;
		     line_length = index (substr (source_string, line_start), NL);

		     loop = line_start + line_length <= P_source_index & line_length > 0;

		     if line_length = 0
		     then line_length = length (substr (source_string, line_start)) + 1;
		end;
	     end;

/* Print the error message. */

	call ioa_ ("^/^[WARNING^s^;SEVERITY ^d ERROR^]^[^s^; ON LINE ^d^]", P_error_severity = 1, P_error_severity,
	     line_number = 0, line_number);

	if P_error_string ^= ""
	then call ioa_ ("^a", P_error_string);

	if line_number > 0
	then call ioa_ ("SOURCE:^-^a", substr (source_string, line_start, line_length - 1));
     end pl1_macro_error_;
