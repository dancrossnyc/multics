" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

	name	test_speed
	entry	test_speed

"
"	This subroutine times 15 different code sequences for the "instr_speed"
"	command. The call is:
"
"	call test_speed (type, time, long_run, cutoff, page_faults, instr_count, temp_segp)
"
"	type	is from 1 to 12 and selects the instructions to time
"	time	is the time to execute the instructions
"	long_run	is non-zero if the run took what is probably too long
"		(probably due to interrupt)
"	cutoff	time limit that instructions must finish by
"	page_faults is currently returned as zero (can't happen?)
"	instr_count is the number of instructions executed.
"	temp_segp is a temporary segment for running this impure program
"
"	The 15 types are as follows:
"
"	1)	lda	even
"		sta	odd
"
"	2)	lda	odd
"		sta	even
"
"	3)	lda
"		lda
"		lda
"
"	4)	lda	even	bit 29
"		sta	odd	bit 29
"
"	5)	eppbp	even
"		spribp	odd
"
"	6)	eppbp	odd
"		spribp	even
"
"	7)	eppbp	even	indirect
"		spribp	odd
"
"	8)	eppbp	odd	indirect
"		spribp	even
"
"	9)	eppbp	even	bit 29
"		spribp	odd	bit 29
"
"	10)	eppbp	even	bit 29 indirect
"		spribp	odd	bit 29
"
"	11)	eppbp	odd	bit 29 indirect
"		spribp	even	bit 29
"
"	12)	random mix
"
"	13)	lda	0,du
"		lda	0,du
"		lda	0,du
"
"	14)	nop	0,du
"		nop	0,du
"		nop	0,du
"
"	15)	lprpbp	even	bit 29
"		sprpbp	odd	bit 29
"
"
"	The origin of this program is unknown, as it predates
"	recorded history.  It was unearthed by J. Bongiovanni
"	in June 81 while excavating in the Trouble REport
"	system.  It was modified to use ALM instead of mexp,
"	to run the timing loops inhibited, and to run the
"	impure code in a temporary segment
"
" " " " " " " " " " " " " " " " " " " " " " " " " "

	equ	loops_1,20
	equ	loops_2,20
	equ	loops_3,20
	equ	loops_4,20
	equ	loops_5,20
	equ	loops_6,20
	equ	loops_7,20
	equ	loops_8,20
	equ	loops_9,20
	equ	loops_10,20
	equ	loops_11,20
	equ	loops_12,20
	equ	loops_13,20
	equ	loops_14,20
	equ	loops_15,20

	equ	count_1,50
	equ	count_2,50
	equ	count_3,50
	equ	count_4,50
	equ	count_5,50
	equ	count_6,50
	equ	count_7,50
	equ	count_8,50
	equ	count_9,50
	equ	count_10,50
	equ	count_11,50
	equ	count_12,50
	equ	count_13,50
	equ	count_14,50
	equ	count_15,50

	macro	type_gen

type_&1:
	eax1	loops_&1

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

	even
	rccl	ab|0,*
	staq	time_start
type_&1_loop:
dup	25
	&2	&3
	&4	&5
dupend
	eax1	-1,1
	tnz	type_&1_loop
	rccl	ab|0,*

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
	
	sbaq	time_start
	cmpq	instr_limit-1,0
	tmi	*+2
	aos	ap|6,*
	staq	ap|4,*
	return

&end

test_speed:

"	copy code to temp segment provided, since code is impure

	epplb	ap|14,*		pointer to pointer to temp segment
	epbplb	lb|0,*		lb -> temp segment
	eax0	copy_begin	relocated begin address
	epplb	lb|0,0		within temp segment
	epbpab	*		ab -> base of procedure segment
	eppab	ab|0,0		ab -> begin of code to copy
	mlr	(pr),(pr)		move the code
	desc9a	ab|0,copy_chars
	desc9a	lb|0,copy_chars
	eppab	sys_info$clock_	copied code doesn't have linkage section
	epbplb	lb|0		lb -> base of temp segment
	eax0	test_speed_join	where to pick up execution
	tra	lb|0,0		off into impure land (what trouble)
	
copy_begin: 			" begin of code to copy
test_speed_join: 			" execution picks up here
	push
	lxl0	ap|2,*		get instruction type
	ldq	instr_count-1,0	get number of instructions in loop
	stq	ap|12,*		return value to caller

	stz	ap|6,*		assume no long sample
	stz	ap|10,*		no page faults


	ldq	instr_limit-1,0	get probably limit on execution time
	stq	ap|8,*		return to caller

	eppbp	data
	spribp	data
	spribp	data+2
	eppbb	data+2
	sprpbp	data+7
	tra	subr-1,0*		go to routine for "type" test

subr:
	arg	type_1
	arg	type_2
	arg	type_3
	arg	type_4
	arg	type_5
	arg	type_6
	arg	type_7
	arg	type_8
	arg	type_9
	arg	type_10
	arg	type_11
	arg	type_12
	arg	type_13
	arg	type_14
	arg	type_15

	type_gen	1,lda,data,sta,data+1
	type_gen	2,sta,data,lda,data+1
	type_gen	3,lda,data,lda,data+2
	type_gen	4,lda,bp|0,sta,bb|0
	type_gen	5,eppbp,data,spribp,data+2
	type_gen	6,spribp,data,eppbp,data+2
	type_gen	7,eppbp,(data,*),spribp,data+2
	type_gen	8,spribp,data+2,eppbp,(data,*)
	type_gen	9,eppbp,(bp|0),spribp,(bb|0)
	type_gen	10,eppbp,(bp|0,*),spribp,(bb|0)
	type_gen	11,spribp,bb|0,eppbp,(bp|0,*)
	type_gen	13,lda,(0,du),lda,(0,du)
	type_gen	14,nop,(0,du),nop,(0,du)
	type_gen	15,lprpbp,data+7,sprpbp,data+7

type_12:
	eax1	loops_12

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
	
	even
	rccl	ab|0,*
	staq	time_start
type_12_loop:
	eppbp	data,*
	spribp	data+2
	eppbp	data
	spribp	data+2
	lda	data
	als	9
	cana	=o400,du
	tnz	*+1
	fld	0,dl
	fad	=1e2
	fst	data+4
	eppbp	data+4
	eppbp	bp|0
	lda	bp|0
	sta	data+4
	stz	data+5
	stz	data+6
	ldq	data+6
	canq	=o777000,dl
	tze	*+2
	nop	0,du
	ldq	data+2,*
	asq	data
	stq	data+2,*
	eppbp	data
	spribp	data+2
	spribp	data
	eppbp	data,*
	spribp	data+2
	eppbp	data
	spribp	data+2
	lda	data
	als	9
	cana	=o400,du
	tnz	*+1
	fld	0,dl
	fad	=1e2
	fst	data+4
	eppbp	data+4
	eppbp	bp|0
	lda	bp|0
	sta	data+4
	stz	data+5
	stz	data+6
	ldq	data+6
	canq	=o777000,dl
	tze	*+2
	nop	0,du
	ldq	data+2,*
	asq	data
	eax1	-1,1
	tnz	type_12_loop
	rccl	ab|0,*

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
	
	sbaq	time_start
	cmpq	instr_limit-1,0
	tmi	*+2
	aos	ap|6,*
	staq	ap|4,*
	return

instr_count:
	zero	0,(count_1+2)*loops_1+2
	zero	0,(count_2+2)*loops_2+2
	zero	0,(count_3+2)*loops_3+2
	zero	0,(count_4+2)*loops_4+2
	zero	0,(count_5+2)*loops_5+2
	zero	0,(count_6+2)*loops_6+2
	zero	0,(count_7+2)*loops_7+2
	zero	0,(count_8+2)*loops_8+2
	zero	0,(count_9+2)*loops_9+2
	zero	0,(count_10+2)*loops_10+2
	zero	0,(count_11+2)*loops_11+2
	zero	0,(count_12+2)*loops_12+2
	zero	0,(count_13+2)*loops_13+2
	zero	0,(count_14+2)*loops_14+2
	zero	0,(count_15+2)*loops_15+2

instr_limit:
	dec	1200
	dec	1400
	dec	900
	dec	1400
	dec	2000
	dec	2100
	dec	2900
	dec	2800
	dec	2000
	dec	2900
	dec	2800
	dec	1700
	dec	1200
	dec	900
	dec	2400

	even
time_start:
	oct	0,0

data:
	bss	,8

	equ	copy_end,*	end of code to copy
	equ	copy_words,copy_end-copy_begin
	equ	copy_chars,4*copy_words
	
	end
