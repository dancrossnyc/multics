/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_sample_refs: psrf: procedure;

/*	print_sample_refs interprets the data segments produced by the sample_refs command, and produces
   a printable output file.  The data segments, _n_a_m_e.srf1, _n_a_m_e.srf2, and _n_a_m_e.srf3 are initiated, and
   the output file _n_a_m_e.list is made.  Each individual sample, as found in the srf1 segment, is examined.  An
   attempt is made to initiate the segment, then to determine if it is an object segment, and then to determine
   if the segment reference can be resolved down to a bound component of an object segment.  During this phase, a
   table of components is generated, and if the -brief option has not been specified, information about each
   individual sample is written into the output file.  In the next phase, information from the srf1, srf2,
   and component tables is used to produce the segment number - pathname dictionary. In the final phase, the PSR
   and TSR reference histograms are produced.

   0) created by Ross E. Klinger, November 11, 1973
   1) modified by R.E. Klinger, August 15, 1975 to convert
   to new object_info structure
   2) Modified 05/01/81, W. Olin Sibert, to eliminate ERROR 295

   */
	
declare 1 srf1seg based (srf1P) aligned,		/* srf1 data base */
        2 time_on fixed bin (71),			/* on time */
        2 time_off fixed bin (71),			/* off time */
        2 table_index fixed bin (35),			/* index of where_when table */
        2 frequency fixed bin (35),			/* sample rate */
        2 high_hc fixed bin (35),			/* high hardcore segment */
        2 proc_seg_cnt fixed bin (35),			/* high process segment */
        2 where_when (srf1_max_index),			/* interrupt table */
	3 time fixed bin (71),			/* interrupt time */
	3 prcdr pointer,				/* psr pointer */
	3 temporary pointer,			/* tsr pointer */
	3 prul fixed bin (35),			/* psr re-usage level */
	3 trul fixed bin (35);			/* tsr re-usage level */

declare 1 srf2seg based (srf2P) aligned,		/* srf2 data base */
        2 time_on fixed bin (71),			/* on time */
        2 high_segno fixed bin (35),			/* highest segment number in table */
        2 pad fixed bin (35),				/* pad */
        2 segment (srf2_max_index),			/* table indexed by segment number */
	3 pathname character (168),			/* segment pathname */
	3 prc fixed bin (35),			/* psr reference count */
	3 trc fixed bin (35),			/* tsr reference count */
	3 ci fixed bin (35),			/* chain index to extension */
	3 bci fixed bin (35);			/* index to bound components */

declare 1 srf3seg based (srf3P) aligned,		/* extension data base for re-used segment numbers */
        2 time_on fixed bin (71),			/* on time */
        2 ni fixed bin (35),				/* index to next available entry */
        2 pad fixed bin (35),				/* pad area */
        2 extension (srf3_max_index),			/* table of pathnames of re-used segment numbers */
	3 pathname char (168),			/* pathname */
	3 prc fixed bin (35),			/* psr reference count */
	3 trc fixed bin (35),			/* tsr reference count */
	3 ci fixed bin (35),			/* index to further re-usage entries */
	3 bci fixed bin (35);			/* index to bound components */


declare 1 temp based (t1P) aligned,			/* segment to hold ordered lines */
        2 li fixed bin (35),				/* index to next available entry */
        2 pad fixed bin (35),				/* pad area */
        2 line (temp_max_index),			/* lines */
	3 rul fixed bin (35),			/* re-usage level */
	3 sgnum fixed bin (35),			/* segment number */
	3 bindl fixed bin (35),			/* bound component level */
	3 name char (168),				/* segment/component name */
	3 prc fixed bin (35),			/* psr reference count */
	3 trc fixed bin (35),			/* tsr reference count */
	3 pad fixed bin (35);			/* pad area */

declare 1 bindings based (t2P) aligned,			/* segment to hold bound component entries */
        2 bcmpi fixed bin (35),			/* index to next available entry */
        2 pad fixed bin (35),				/* pad area */
        2 bcmp (bindings_max_index),			/* bound components */
	3 name char (32),				/* component name */
	3 prc fixed bin (35),			/* psr reference count */
	3 trc fixed bin (35),			/* tsr reference count */
	3 ci fixed bin (35),			/* chain index to next bound component within a segment */
	3 pad fixed bin (35);			/* pad area */
	
declare (srf1P, srf2P, srf3P, t1P, t2P) ptr,		/* segment pointers */
         output_path character (168) varying,		/* output pathname */
         iocbP ptr,					/* iocb pointer */
         open_sw bit (1),				/* iocb open switch */
         switch_name char (20),			/* I/O switch name */
         unique_name char (15);			/* shreik name used in this invocation */

declare (srf1_max_index, srf2_max_index, srf3_max_index) fixed bin internal static; /* array limits */

declare (aP, bP, cP) pointer,				/* argument pointers */
        (arglen, i, j, k, l) fixed bin,			/* temporary storage */
         reg character (3),				/* holds "TSR" or "PSR" for print_int */
         bl character (3),				/* holds bind component incidence */
         usage character (4),				/* holds re-usage level for output line */
         re_ul fixed bin (35),			/* holds psr or tsr re-usage level */
         pname char (168),				/* holds a pathname for print_int */
         wdir char (168) aligned,			/* pathname of working directory */
         offset fixed bin (35),			/* holds an offset for print_int */
         tbit bit (1),				/* psr(0)/tsr(1) interpet switch */
         long bit (1) initial ("1"b),			/* long format print switch - default is on */
         bindings_full bit (1) initial ("0"b),		/* bindings table full switch */
         code fixed bin (35),				/* error code */
         bc fixed binary (24),			/* segment bit count */
         temp_max_index fixed bin,			/* temp segment maximum index */
         bindings_max_index fixed bin,			/* bindings segment maximum index */
         current_ring fixed bin (6),			/* current ring */
         ring_brackets (3) fixed bin (3),		/* ring brakets of initiated segments */
        (pres, tres) fixed binary (35) initial (1),	/* histogram resolution factors */
         arg character (arglen) based (aP),		/* argument */
         name character (32) aligned,			/* suffixed entry name  */
         dirname character (168) aligned,		/* directory name */
         ename character (32) aligned,			/* entry name */
         rs character (19) varying,			/* psr pointer string for tab evaluation */
         prefix character (22) varying,			/* message prefixed to pathname */
        (ontime, offtime) character (24);		/* time character strings */

declare 1 image based (aP),				/* image of auxilliary or extension entry */
        2 pathname char (168),			/* pathname */
        2 prc fixed bin (35),				/* psr reference count */
        2 trc fixed bin (35),				/* tsr reference count */
        2 ci fixed bin (35),				/* chain index to extension */
        2 bci fixed bin (35);				/* index to bound components */

declare  null builtin, (any_other, cleanup) condition;

declare  sys_info$max_seg_size fixed bin (35) external;	/* maximum segment size */
declare  error_table_$badopt fixed bin (35) external;	/* an error code */

declare  wbar character (100),
         bar (100) character (1) defined (wbar);
	
declare  com_err_ ext entry options (variable),
         component_info_$offset ext entry (ptr, fixed bin, ptr, fixed bin (35)),
         continue_to_signal_ ext entry (fixed bin (35)),
         cu_$arg_count ext entry (fixed bin),
         cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
         date_time_ ext entry (fixed bin (71), char (*)),
         expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
         get_ring_ ext entry returns (fixed bin (6)),
         get_wdir_ ext entry returns (char (168) aligned),
         find_condition_info_ ext entry (ptr, ptr, fixed bin (35)),
         hcs_$delentry_seg ext entry (ptr, fixed bin (35)),
         hcs_$get_ring_brackets ext entry (char (*) aligned, char (*) aligned, (3)fixed bin (3), fixed bin (35)),
         hcs_$initiate_count ext entry (char (*) aligned, char (*) aligned, char (*),
         fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
         hcs_$make_seg ext entry (char (*) aligned, char (*) aligned, char (*), fixed bin (5), ptr, fixed bin (35)),
         hcs_$terminate_noname ext entry (ptr, fixed bin (35)),
         hcs_$truncate_seg ext entry (ptr, fixed bin (24), fixed bin (35)),
         ioa_$ioa_switch ext entry options (variable),
         ioa_$rsnnl ext entry options (variable),
         iox_$attach_ioname ext entry (char (*), ptr, char (*), fixed bin (35)),
         iox_$close ext entry (ptr, fixed bin (35)),
         iox_$detach_iocb ext entry (ptr, fixed bin (35)),
         iox_$open ext entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
         object_info_$brief ext entry (ptr, fixed bin (24), ptr, fixed bin (35)),
         suffixed_name_$make ext entry (char (*) aligned, char (*), char (32) aligned, fixed bin (35)),
         unique_chars_ ext entry (bit (*)) returns (char (15));
	
dcl 1 oi aligned automatic like object_info;		/* storage for object_info_ structure */

%include object_info;
	
%include component_info;
	
	oi.version_number = object_info_version_2;	/* set object_info_ structure version */
	srf1_max_index = divide (sys_info$max_seg_size - 8, 8, 17, 0); /* get maximum segment indices */
	srf2_max_index = divide (sys_info$max_seg_size - 4, 46, 17, 0);
	srf3_max_index = srf2_max_index;
	temp_max_index = divide (sys_info$max_seg_size - 2, 48, 17, 0); /* get maximum segment indices */
	bindings_max_index = divide (sys_info$max_seg_size - 2, 13, 17, 0);
	current_ring = get_ring_ ();			/* get current ring number */
	call cu_$arg_ptr (1, aP, arglen, code);		/* get pathname */
	if code ^= 0 then do;			/* is the argument missing? */
	     call com_err_ (code, "print_sample_refs");	/* yes -- write an error message */
	     return;				/* exit */
	end;

	srf1P, srf2P, srf3P, t1P, t2P = null;		/* initialize segment pointers */
	iocbP = null;				/* initialize iocb pointer */
	on cleanup call cleaner;			/* establish cleanup handler to terminate/delete segments */

	bP = addr (dirname);			/* get pointer to directory portion of pathname */
	cP = addr (ename);				/* get pointer to entry name portion of pathname */
	call expand_path_ (aP, arglen, bP, cP, code);	/* expand to an absolute pathname */
	if code ^= 0 then do;			/* was there an error? */
	     call com_err_ (code, "print_sample_refs", "^a", aP -> arg); /* write an error message */
	     return;
	end;

	call cu_$arg_count (i);			/* see if there are more arguments */
	if i > 1 then do;				/* yes */
	     call cu_$arg_ptr (2, aP, arglen, code);	/* get the argument */
	     if aP -> arg ^= "-brief" then if aP -> arg ^= "-bf" then do; /* if not brief, wrong */
		     call com_err_ (error_table_$badopt, "print_sample_refs", "^a", aP -> arg); /* write error message */
		     return;
		end;
		else long = "0"b;			/* set long switch off */
	end;
	i = index (ename, ".srf");			/* look for an ".srf" suffix (or ".srf1", ".srf2", etc. ) */
	if i ^= 0 then substr (ename, i, 32 - i + 1) = " "; /* if found, best just to strip it off */
	
	call suffixed_name_$make (ename, "srf1", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$initiate_count (dirname, name, "", (0), 0, srf1P, code); /* initiate the srf1 segment */
	if srf1P = null then go to init_error;		/* was there an error? */

	call suffixed_name_$make (ename, "srf2", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$initiate_count (dirname, name, "", (0), 0, srf2P, code); /* initiate the srf2 segment */
	if srf2P = null then go to init_error;		/* was there an error? */

	call suffixed_name_$make (ename, "srf3", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$initiate_count (dirname, name, "", (0), 0, srf3P, code); /* initiate the srf3 segment */
	if srf3P = null then go to init_error;		/* was there an error? */

	unique_name = unique_chars_ ("0"b);		/* get a shreik name */
	call hcs_$make_seg ("", unique_name || ".temp1.psrf", "", 01011b, t1P, code);
	if t1P = null then go to temp_error;		/* was there an error? */
	call hcs_$make_seg ("", unique_name || ".temp2.psrf", "", 01011b, t2P, code); /* make the bindings segment */
	if t2P = null then go to temp_error;		/* was there an error? */

	li = 1;					/* initialize the index of temp segment */
	bcmpi = 1;				/* initialize the bindings index */

	call suffixed_name_$make (ename, "list", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;
	wdir = get_wdir_ ();			/* get working directory name */
	j = index (wdir, " ");			/* find end of working directory name */
	output_path = substr (wdir, 1, j - 1) || ">" || name; /* form list segment absolute pathname */

	switch_name = unique_name || ".psrf";		/* make an unique I/O switch name */
	call iox_$attach_ioname (switch_name, iocbP, "vfile_ " || output_path, code); /* attach the switch */
	if code ^= 0 then go to switch_error;
	call iox_$open (iocbP, 2, "0"b, code);		/* open switch for stream_output */
	if code ^= 0 then go to switch_error;
	else open_sw = "1"b;
	
	call ioa_$ioa_switch (iocbP, "^|^5-PRINT_SAMPLE_REFS"); /* write report header */
	call date_time_ (srf1seg.time_on, ontime);	/* convert on time to characters */
	call date_time_ (srf1seg.time_off, offtime);	/* convert off time to characters */
	call ioa_$ioa_switch (iocbP, "^3/ON TIME: ^a^/OFF TIME: ^a^/SAMPLE RATE: ^d msec.^/NUMBER OF SAMPLES: ^d^2/",
	     ontime, offtime, frequency, table_index);	/* write initial data */


	do i = 1 to table_index;			/* loop to output each interrupt */

	     tbit = "0"b;				/* set tbit to psr interpet */
	     bP = where_when (i).prcdr;		/* set pointer to psr */
	     re_ul = where_when (i).prul;		/* set re-usage level to psr */
	     reg = "PSR";				/* set to psr */
start1:	     j = fixed (baseno (bP));			/* get segment number */

	     if j <= high_hc then do;			/* is the segment in the hardcore? */
		segment (j).bci = -1;		/* don't investigate binding */
set_up1:		pname = segment (j).pathname;		/* yes -- name to be printed is the pathname */
set_up2:		offset = fixed (rel (bP));		/* offset to be printed is the interrupt offset */
		go to print_int;			/* output a line */
	     end;

	     if re_ul = 0 then do;			/* is this a primary usage of the segment number? */
		if segment (j).bci = -1 then go to set_up1; /* primary -- is the segment bound? */
		aP = addr (segment (j).pathname);	/* might be bound -- investigate */
		call check_binding;			/* determine if bound */
		go to print_int;			/* output a line */
	     end;

	     k = segment (j).ci;			/* not primary -- set k to first re-usage */
	     do l = 1 to re_ul - 1;			/* locate re-usage level corresponding to interrupt */
		k = extension (k).ci;		/* set k to next re-usage */
	     end;

	     if extension (k).bci = -1 then do;		/* is the segment not bound? */
		pname = extension (k).pathname;	/* not bound -- set pathname to be printed */
		go to set_up2;			/* go to calculate offset */
	     end;
	     aP = addr (extension (k).pathname);	/* might be bound -- investigate */
	     call check_binding;			/* determine if bound */
print_int:     if re_ul = 0 then usage = "";		/* print only a non-zero usage */
	     else call ioa_$rsnnl ("(^d)", usage, j, re_ul);
	     if long then do;			/* output detailed trace if long switch on */
		call ioa_$ioa_switch (iocbP, "^4d  ^a  ^4a  ^p^-^a|^o", i, reg, usage, bP, pname, offset);
		if tbit then call ioa_$ioa_switch (iocbP, "^/"); /* skip a line after tsr print */
	     end;
	     if tbit then go to end1;			/* have both psr and tsr been interpeted? */
	     tbit = "1"b;				/* no -- set to interpet tsr */
	     bP = where_when (i).temporary;		/* set pointer to tsr */
	     re_ul = where_when (i).trul;		/* set re-usage level to tsr re-usage */
	     reg = "TSR";				/* set to tsr */
	     go to start1;				/* go to interpet */
end1:	end;
	
	do i = 1 to high_segno;			/* loop to order our output lines */
	     if segment (i).pathname < " " then go to end2; /* no entry -- check the next */

	     j = 0;				/* re-usage level is 0 */
	     l = 0;				/* bind level is zero */
	     aP = addr (segment (i).pathname);		/* set pointer to the auxilliary entry */
cycle:	     line (li).rul = j;			/* store the re-usage level */
	     line (li).sgnum = i;			/* store the segment number */
	     line (li).bindl = 0;			/* this is not a bound component */
	     line (li).name = image.pathname;		/* store the pathname */
	     if image.bci <= 0 then do;		/* is this segment bound? */
		line (li).prc = image.prc;		/* not bound -- store the psr reference count */
		line (li).trc = image.trc;		/* store the tsr reference count */
		line (li).bindl = -1;		/* set field to indicate not bound */
		go to check_ru;			/* find out if the segment number is re-used */
	     end;

	     k = image.bci;				/* segment is bound -- set index to the first component */
	     do l = 1 by 1;				/* loop to pick up the bound components */
		if li = temp_max_index then do;	/* is the temp segment full? */
temp_full:	     call com_err_ (0, "print_sample_refs", "The segment number to pathname dictionary is full.
Entries following component ^d of segment ^d at re-usage level ^d are missing.", l, i, j);
		     go to output_dictionary;		/* output the partial dictionary */
		end;
		li = li + 1 ;			/* increment index to next line */
		line (li).sgnum = i;		/* store segment number */
		line (li).bindl = l;		/* store bound component incidence */
		line (li).rul = j;			/* store re-usage level */
		line (li).name = bcmp (k).name;	/* store component name */
		line (li).prc = bcmp (k).prc;		/* store psr reference count */
		line (li).trc = bcmp (k).trc;		/* store tsr reference count */
		if bcmp (k).ci = 0 then go to check_ru; /* if no more components, check for re-used segment number */
		k = bcmp (k).ci;			/* more -- set index to the next component */
	     end;

check_ru:	     if image.ci = 0 then do;			/* is the segment number re-used? */
		if li = temp_max_index then go to temp_full; /* check if temp segment is full */
		li = li + 1;			/* no -- increment the line index */
		go to end2;			/* go to check the next auxilliary entry */
	     end;
	     j = j + 1;				/* the segment is re-used -- increment the re-usage level */
	     k = image.ci;				/* get the index of the extension entry */
	     aP = addr (extension (k).pathname);	/* set the image pointer to the extension entry */
	     if li = temp_max_index then go to temp_full; /* check if temp segment is full */
	     li = li+1;				/* increment the line index */
	     go to cycle;				/* go to set up a line, check binding, etc */
end2:	end;
	
output_dictionary: call ioa_$ioa_switch (iocbP, "^|^5xSEGMENT^-PATHNAME^/");
	do i = 1 to li - 1;				/* loop to output the segment/pathname dictionary */

	     if line (i).bindl = 0 then go to pre_write;	/* ignore references on a bound segment line */
	     if line (i).prc > pres then pres = line (i).prc; /* get highest number of psr references */
	     if line (i).trc > tres then tres = line (i).trc; /* get highest number of tsr references */
	     if line (i).bindl = -1 then do;		/* is this not a bound component? */
pre_write:	bl = "";				/* not a bound component -- set bind incidence for write */
		if line (i).rul = 0 then usage = "";	/* set re-usage for write -- blank if primary...or... */
		else call ioa_$rsnnl ("(^d)", usage, j, line (i).rul); /* outputted if not */
		go to write;
	     end;
	     call ioa_$rsnnl (".^d", bl, j, line (i).bindl); /* bound component - form the bind suffix */
write:	     call ioa_$ioa_switch (iocbP, "^4a ^4o^3a^-^a", usage, line (i).sgnum, bl, line (i).name);
	end;

	call ioa_$ioa_switch (iocbP, "^|^5-PSR REFERENCE HISTOGRAM");
	if pres <= 100 then pres = 1;			/* set pres factor */
	else if pres <= 200 then pres = 2;
	else if pres <= 500 then pres = 5;
	else if pres <= 1000 then pres = 10;
	else if pres <= 2000 then pres = 20;
	else if pres <= 5000 then pres = 50;
	else pres = 100;
	call ioa_$ioa_switch (iocbP, "^5-(Resolution factor = ^d)", pres);
	call ioa_$ioa_switch (iocbP, "^2/^-SEGMENT^/");

	do i = 1 to li - 1;				/* loop to output bars */
	     if line (i).bindl = 0 then go to again;	/* skip a bound segment line */
	     if line (i).prc = 0 then go to again;	/* if no references, check the next entry */
	     if line (i).rul = 0 then usage = "";	/* print only a re-usage > 0 */
	     else call ioa_$rsnnl ("(^d)", usage, j, line (i).rul);
	     if line (i).bindl = -1 then bl = "";	/* print only a bound component or unbound segment bl */
	     else call ioa_$rsnnl (".^d", bl, j, line (i).bindl);
	     bar = " ";				/* set the bar to all blanks */
	     do j = 1 to 100 while (line (i).prc>0);	/* extend the bar as long as references remain */
		bar (j) = "x";
		line (i).prc = line (i).prc - pres;	/* decrement the count by the resolution factor */
	     end;
	     call ioa_$ioa_switch (iocbP, "^4a ^4o^3a^-^a", usage, line (i).sgnum, bl, wbar); /* write a line */
again:	end;
	
	call ioa_$ioa_switch (iocbP, "^|^5-TSR REFERENCE HISTOGRAM");
	if tres <= 100 then tres = 1;			/* set tres factor */
	else if tres <= 200 then tres = 2;
	else if tres <= 500 then tres = 5;
	else if tres <= 1000 then tres = 10;
	else if tres <= 2000 then tres = 20;
	else if tres <= 5000 then tres = 50;
	else tres = 100;
	call ioa_$ioa_switch (iocbP, "^5-(Resolution factor = ^d)", tres);
	call ioa_$ioa_switch (iocbP, "^2/^-SEGMENT^/");

	do i = 1 to li - 1;				/* loop to output bars */
	     if line (i).bindl = 0 then go to again1;	/* skip a bound segment line */
	     if line (i).trc = 0 then go to again1;	/* if no references, check the next entry */
	     if line (i).rul = 0 then usage = "";	/* print only a re-usage > 0 */
	     else call ioa_$rsnnl ("(^d)", usage, j, line (i).rul);
	     if line (i).bindl = -1 then bl = "";	/* print only a bound component or unbound segment bl */
	     else call ioa_$rsnnl (".^d", bl, j, line (i).bindl);
	     bar = " ";				/* set the bar to all blanks */
	     do j = 1 to 100 while (line (i).trc>0);	/* extend the bar as long as references remain */
		bar (j) = "x";
		line (i).trc = line (i).trc - tres;	/* decrement the count by the resolution factor */
	     end;
	     call ioa_$ioa_switch (iocbP, "^4a ^4o^3a^-^a", usage, line (i).sgnum, bl, wbar); /* write a line */
again1:	end;

	call cleaner;				/* tidy up segments; detach io stream; restore srf segments */
	revert cleanup;				/* disable condition handler */
	return;					/* exit */
	
cleaner:	procedure;				/* cleanup procedure */
	     if iocbP ^= null then do;		/* I/O switch attached? */
		if open_sw then do;			/* I/O switch open? */
		     call iox_$close (iocbP, 0);	/* close it */
		     open_sw = "0"b;		/* and indicate same */
		end;
		call iox_$detach_iocb (iocbP, 0);	/* detach it */
		iocbP = null;			/* indicate same */
	     end;
	     if srf1P ^= null then do;
		call hcs_$terminate_noname (srf1P, 0);
		srf1P = null;
	     end;
	     if srf2P ^= null then do;
		do i = 1 to high_segno;		/* loop to restore srf2 segment to virgin state */
		     segment (i).bci = 0;		/* zero auxilliary bound component indices */
		end;
		call hcs_$terminate_noname (srf2P, 0);
		srf2P = null;
	     end;
	     if srf3P ^= null then do;
		do i = 1 to ni;			/* loop to restore srf3 segment */
		     extension (i).bci = 0;		/* zero extension bound component indices */
		end;
		call hcs_$terminate_noname (srf3P, 0);
		srf3P = null;
	     end;
	     if t1P ^= null then do;
		call hcs_$delentry_seg (t1P, 0);
		t1P = null;
	     end;
	     if t2P ^= null then do;
		call hcs_$delentry_seg (t2P, 0);
		t2P = null;
	     end;
	     return;
	end cleaner;
	
check_binding: procedure;				/* internal procedure to determine if a segment is bound */
	     if bindings_full then go to no_chance;	/* don't try anything if table is full */

	     j = index (image.pathname, " ");		/* find the end of the pathname */
	     do k = j by -1 to 1 while (substr (image.pathname, k, 1) ^= ">"); /* find the last ">" */
	     end;
	     if substr (image.pathname, k, 1) ^= ">" then go to no_seg; /* not a valid pathname */
	     if k = 1 then dirname = ">";		/* directory is the root */
	     else dirname = substr (image.pathname, 1, k-1); /* form the directory name */
	     ename = substr (image.pathname, k+1, j-k);	/* form the entry name */
	     call hcs_$get_ring_brackets (dirname, ename, ring_brackets, code); /* get the ring brackets */
	     if code ^= 0 then go to no_status;		/* no status on directory -- give up */
	     if ring_brackets (2)<current_ring then go to no_access; /* no access -- give up */
	     call hcs_$initiate_count (dirname, ename, "", bc, 0, cP, code); /* initiate the segment */
	     if cP = null then go to no_seg;		/* unable to initiate? */

	     if image.bci = 0 then do;		/* initiated -- is the bound status unknown? */
		on any_other call oi_failure;		/* intercept faults from object_info_ */
		call object_info_$brief (ptr (cP, 0), bc, addr (oi), code); /* unknown -- find out */
		revert any_other;			/* intercept off */
		if code ^= 0 then go to not_bound;	/* is it an object segment? */
		if ^(oi.format.bound) then go to not_bound; /* object segment -- is it bound? */
	     end;

	     call component_info_$offset (ptr (cP, 0), binary (rel (bP)), addr (ci), code); /* bound -- get the component */
	     if code ^= 0 then go to no_component;	/* was the component found? */

	     if image.bci = 0 then do;		/* found -- initial bound component entry for the segment? */
		image.bci = bcmpi;			/* initial -- set bound component index to next available entry */
create:		bcmp (bcmpi).name = ci.name;		/* store the component name */
		if tbit then bcmp (bcmpi).trc = 1;	/* set a tsr...or... */
		else bcmp (bcmpi).prc = 1;		/* psr reference */
		if bcmpi = bindings_max_index then do;	/* is the bindings segment full? */
		     call com_err_ (0, "print_sample_refs", "The bound component table is full.
Components of segment references following sample ^d cannot be determined.", i);
		     bindings_full = "1"b;		/* set to process no more compoents */
		end;
		else bcmpi = bcmpi + 1;		/* increment the table index to the next available entry */
exit1:		pname = ci.name;			/* store component name for print_int */
		offset = binary (rel (bP)) - binary (rel (ci.text_start)); /* compute offset for print_int */
		call hcs_$terminate_noname (cP, code);	/* terminate the segment */
		return;				/* exit */
	     end;
	     
	     j = image.bci;				/* not an initial entry -- get index of first bound component */
check:	     if bcmp (j).name = ci.name then do;	/* do the names match? */
		if tbit then bcmp (j).trc = bcmp (j).trc + 1; /* match -- increment tsr...or... */
		else bcmp (j).prc = bcmp (j).prc + 1;	/* psr reference count */
		go to exit1;			/* transfer to set up for print_int */
	     end;
	     if bcmp (j).ci ^= 0 then do;		/* no match -- are there more components */
		j = bcmp (j).ci;			/* set index to next component */
		go to check;			/* look for a match */
	     end;
	     bcmp (j).ci = bcmpi;			/* no more components -- store index to next available entry */
	     go to create;				/* make a new entry */

no_chance:     prefix = "";
	     go to exit2;
no_status:     prefix = "NO STATUS - ";
	     go to exit2;
no_access:     prefix = "NOT IN READ BRACKET - ";
	     go to exit2;
no_seg:	     prefix = "CANNOT INITIATE - ";
	     go to exit2;
no_component:  prefix = "NO COMPONENT - ";
	     go to exit4;
not_bound:     prefix = "";
	     image.bci = -1;
exit4:	     call hcs_$terminate_noname (cP, code);	/* terminate the segment */
exit3:	     pname = prefix||image.pathname;		/* form pathname with prefix, if any */
	     offset = fixed (rel (bP));		/* store offset from psr or tsr */
	     return;
exit2:	     image.bci = -1;
	     go to exit3;
	     
oi_failure:    procedure;				/* object_info_ fault interceptor */
declare 1 cond_info aligned,				/* filled in by find_condition_info_ */
%include cond_info;

         call find_condition_info_ (null, addr (cond_info), code); /* what sort of fault? */
		if cond_info.condition_name = "cput" then go to pass_it_on;
		if cond_info.condition_name = "finish" then go to pass_it_on;
		if cond_info.condition_name = "storage" then go to pass_it_on;
		if cond_info.condition_name = "alrm" then go to pass_it_on;
		if cond_info.condition_name = "quit" then go to pass_it_on;
		if cond_info.condition_name = "program_interrupt" then do;
pass_it_on:	     call continue_to_signal_ (code);
		     return;
		end;
		go to not_bound;
	     end oi_failure;

	end check_binding;
	
suffix_error: call com_err_ (code, "print_sample_refs", "^a", ename);
	call cleaner;
	return;

init_error: call com_err_ (code, "print_sample_refs", "^a>^a", dirname, name);
	call cleaner;
	return;

temp_error: call com_err_ (code, "print_sample_refs", "While making a temporary segment in the process directory.");
	call cleaner;
	return;

switch_error: call com_err_ (code, "print_sample_refs", "^a", output_path);
	call cleaner;
	return;


     end print_sample_refs;
