/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-10-08,Martinson), approve(87-10-08,MCR7765),
     audit(87-11-20,Fawcett), install(87-11-30,MR12.2-1006):
     Modified to use cu_$arg_(count ptr) when processing control arguments.
                                                   END HISTORY COMMENTS */


instr_speed: proc;

/* " This program test the instructions speeds of several mixes of instructions.

   */
/* Modified June 81 by J. Bongiovanni to get temp segment for impure code				*/
	   

/*  */

/* DECLARATIONS */

dcl (successes, pf_aborts, nanos, ls_aborts, type, histi, bucketmin, bucketmax, pf, ls, maxs, bucket, count, nargs) fixed bin;
dcl arg_ptr ptr;
dcl arg_len fixed bin (21);
dcl arg char (arg_len) unaligned based (arg_ptr);
dcl long_report bit(1) unaligned;
dcl  time fixed bin (71);
dcl  time_total fixed bin (71);
dcl (mips, mips_total, mip_rate) float bin;
dcl  hist (0:300) fixed bin;
dcl  code fixed bin (35);
dcl error_table_$noarg external fixed bin(35);
dcl  temp_p ptr;
dcl (fixed, float, lbound, hbound, max, min, null, divide) builtin;
dcl  cu_$arg_count ext entry (fixed bin, fixed bin(35));
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin(21), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  clock_ entry (fixed bin (71));
dcl  char_time char (24) aligned;
dcl  test_speed entry (fixed bin, fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, ptr);
dcl  (get_temp_segment_, release_temp_segment_) entry (char (*), ptr, fixed bin (35));
dcl  name (15) char (32) aligned static init (
     "lda/sta - even/odd",
     "lda/sta - odd/even",
     "lda/lda/lda...",
     "lda/sta - even/odd bit29",
     "eppbp/spribp - even/odd",
     "eppbp/spribp - odd/even",
     "eppbp/spribp - even/odd indirect",
     "eppbp/spribp - odd/even indirect",
     "eppbp/spribp - even/odd bit29",
     "eppbp/spribp - even/odd bit29ind",
     "eppbp/spribp - odd/even bit29ind",
     "random mix",
     "lda 0,du...",
     "nop 0,du...",
     "lprpbp/sprpbp - even/odd bit29");
dcl  INDEX_FACTOR float bin int static options (constant) init (2e2);
dcl  MAXHIST fixed bin int static options (constant) init (300);
dcl  NUMPASSES fixed bin int static options (constant) init (100);
dcl  MYNAME char (11) int static options (constant) init ("instr_speed");
dcl  cleanup condition;

/*  */

/* Get a temp segment for the impure code in test_speed to run */

	temp_p = null ();
	on cleanup begin;
	     if temp_p ^= null ()
		then call release_temp_segment_ (MYNAME, temp_p, code);
	end;

	call get_temp_segment_ (MYNAME, temp_p, code);
	if code^=0 then do;
	     call com_err_ (code, MYNAME, "Getting temp segment");
	     return;
	end;
/* validate control arguments */
          call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME);
	     return;
	     end;
          call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code = error_table_$noarg then long_report = "0"b;
	else if arg = "-lg" | arg = "-long" then long_report = "1"b;
	else do;
	     call ioa_ ("instr_speed: Valid control arguments -long or -lg");
	     return;
	     end;


/* call print_config; */
	call clock_ (time);
	call date_time_ (time, char_time);
	call ioa_ ("INSTRUCTION SPEED TEST -- ^a^/", char_time);

/* Now run the test for the 15 possible types of sequences */

	do type = lbound (name,1) to hbound (name, 1);
	     successes,
	     pf_aborts,
	     ls_aborts,
	     bucketmax = 0;				/* initial for this case */
	     hist = 0;
	     time_total = 0;
	     mips_total = 0e0;
	     bucketmin = MAXHIST;

	     do while (successes < NUMPASSES);		/* loop until get 100 good runs */
		call test_speed (type, time, ls, maxs, pf, count, temp_p); /* run a test for this type */
		if pf > 0 then pf_aborts = pf_aborts + 1; /* took a page fault, skip this one */
		else if ls > 0 then ls_aborts = ls_aborts + 1; /* took a large sample (probable interrupt) */
		else do;
		     successes = successes + 1;	/* another successful run */
		     time_total = time_total + float (time);
		     mips = float (count) / float (time); /* get mips for this run */
		     bucket = mips * INDEX_FACTOR;		/* get the index into hist for this run */
		     bucket = min (bucket, MAXHIST);	/* watch out for overflow */
		     bucketmax = max (bucketmax, bucket); /* calculate bounds of possible values for this type */
		     bucketmin = min (bucketmin, bucket); /* .. */
		     hist (bucket) = hist (bucket) + 1;	/* fill in histogram */
		     mips_total = mips_total + mips;	/* keep running total for final ave */
		end;
	     end;

/* Now output the data for this type */

	     call ioa_ ("^/* * * * * * * * * * * * * * * * * * * * * *^/");
	     call ioa_ ("^/TEST ^d: (^a)", type, name (type));
	     if long_report then do;
		call ioa_ ("^/ HITS   MIPS^/");	/* output header */
		do histi = bucketmin to bucketmax;	/* loop through buckets that got hit */
		     call ioa_ ("^5d  ^5.3f", hist (histi), histi*5e-3);
		end;
	     end;
	     mip_rate = mips_total/float (successes);	/* calculate mip_rate */
	     nanos = fixed (1e3/mip_rate);		/* calculate the nanoseconds to do one instruction */
	     call ioa_ ("^/MIPS AVE = ^5.3f, TIME AVE = ^d, ^d NANOSECONDS", mip_rate, divide (time_total, successes, 17, 0), nanos);
	     if pf_aborts+ls_aborts > 0 then call ioa_ ("PF = ^d, LS = ^d, CUTOFF = ^d", pf_aborts, ls_aborts, maxs);

	end;
	
	call release_temp_segment_ (MYNAME, temp_p, code);
	temp_p = null();
	

     end;
