/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
	 Written:	20 Sept 1972 by Richard A. Barnes
	Modified:	4 May 1977 by RAB for get_temp_segments_
	Modified: 17 August 1977 by MBW for perprocess static switch	
	Err msgs fixed to contain target pathname S. Herbst 07/23/79
	Usage message added 10/03/79 S. Herbst
	Utilize date_time_$format("date_time" 06/19/84 J A Falksen */
compare_object:	cob:	procedure;
dcl	alen fixed bin(17);
dcl	aptr pointer;
dcl	arg char(alen) unaligned based(aptr);
dcl	arg_num fixed bin(17) init(3);
dcl	code fixed bin(35);		/* error code */
dcl	command bit(1) aligned;	/*  "1"b if invoked as command */
dcl	command_error condition;
dcl	dname(2) char(168);		/* directory pathname */
dcl	ename(2) char(32);		/* entry name */
dcl	have_ptrs bit(1) aligned;	/* "1"b if object ptrs provided */
dcl	(i,j) fixed bin;
dcl	line char(80) varying aligned;
dcl	isparm bit(1) init("1"b);
dcl	nbits(2) fixed bin(24);
dcl	oip ptr;
dcl	1 parm,
		2 brief bit(1) unaligned init("0"b),
		2 all unaligned,
		 (3 text bit (1),
		 3 defs bit(1),
		 3 link bit(1),
		 3 static bit(1),
		 3 symbol bit(1))  init ("0"b);
dcl	path (2) char(168);
dcl	qual bit(1) init("0"b);
dcl	1 relinfo based aligned,
	2 decl_vers fixed bin,
	2 n_bits fixed bin,
	2 relbits bit(0 refer(relinfo.n_bits));
dcl	serious bit(1) aligned;
dcl	time char(64)var;
dcl	segp ptr;
dcl	1 seg,
		2 p(2) pointer init ((2) null),	/* segment pointers */
		2 scratch(2) pointer init((2) null),	/* scratch for relocation bits */
		2 sname(2) char(200);	/* segment names */
dcl	1 result,
		(2 text,
		2 defs,
		2 link,
		2 static,
		2 symbol,
		2 perprocess_static,
		2 length) bit(1) unaligned init ("0"b);
dcl	rslt(7) bit(1) defined(result);
dcl	keyword(14) char(8) aligned static init("-brief","-text","-defs","-link","-static","-symbol",
		 "-all", "-bf"," "," ", "-lk","-stat","-sym","-a") options (constant);
dcl	nparm fixed bin(17) init(divide(hbound(keyword,1),2,17,0));
dcl	bits(6) bit(1) defined (parm);
dcl	token char(8);
dcl	error_table_$badopt external fixed bin(35);
dcl	rname char(14) init("compare_object") static options(constant);
dcl	word char(14) varying;
%include object_info;

dcl	1 oi(2) aligned like object_info;

/*  function declarations */

dcl	date_time_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl	cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin(35));
dcl	expand_pathname_ entry(char(*),char(*),char(*),fixed bin(35));
dcl	get_equal_name_ entry(char(*),char(*),char(*),fixed bin(35));
dcl	hcs_$initiate_count entry(char(*),char(*),char(*),fixed bin(24),fixed bin(12),
		ptr,fixed bin(35));
dcl	(get_temp_segments_, release_temp_segments_) entry(char(*),(*) ptr,fixed bin(35));
dcl	object_info_$long entry(ptr,fixed bin(24),ptr,fixed bin(35));
dcl	(com_err_, com_err_$suppress_name) entry options(variable);
dcl	ioa_ entry options(variable);
dcl	compare_text_ entry(ptr,bit(1),bit(1),ptr);
dcl	compare_defs_ entry (ptr,bit(1),bit(1),ptr);
dcl	compare_link_ entry (ptr,bit(1),bit(1),ptr);
dcl	compare_static_ entry (ptr,bit(1),bit(1),ptr);
dcl	hcs_$terminate_noname entry(ptr,fixed bin(35));

dcl (addr, divide, hbound, mod, null, rtrim, string, substr) builtin;

dcl	cleanup condition;

	command = "1"b;
	have_ptrs = "0"b;
	go to join;

compare_object_$ptr:	entry(ptr1,len1,ptr2,len2) returns(bit(1) aligned);

dcl	ptr1 ptr,		/* ptr to first object segment */
	len1 fixed bin(24),	/* bit_count of first object segment */
	ptr2 ptr,		/* ptr to second object segment */
	len2 fixed bin(24);	/* bit_count of second object segment */

	have_ptrs = "1"b;
	p(1) = ptr1;
	p(2) = ptr2;
	nbits(1) = len1;
	nbits(2) = len2;
	sname(1) = " ";
	sname(2) = " ";
	go to not_command;

compare_object_:	entry(P_path1,P_path2) returns(bit(1) aligned);

dcl	(P_path1,P_path2) char(*);	/* pathnames of segs to be compared */

	have_ptrs = "0"b;
	path(1) = P_path1;
	path(2) = P_path2;

not_command:
	command = "0"b;
	parm.brief = "1"b;
	isparm = "0"b;
	on condition(command_error) string(result) = "111111"b;

/* set up 2 segments for comparison */

join:
	oip = addr(oi);
	segp = addr(seg);

	on condition(cleanup) call clean_up;

	do j= 1 to 2;
	     if ^ have_ptrs
	     then do;
		if command
		then do;
		     call cu_$arg_ptr(j,aptr,alen,code);
		     if code ^= 0 then do;
			call com_err_$suppress_name (0, "compare_object",
			     "Usage:  compare_object oldpath newpath {-control_args}");
			return;
		     end;
		     path(j) = arg;
		     end;
		call expand_pathname_(path(j),dname(j),ename(j),code);
		if code ^= 0 then call error(path(j));
		if j = 2 then
		do;
			call get_equal_name_(ename(1),(ename(2)),ename(2),code);
			if code ^= 0 then call error(ename(2));
		end;
		sname(j) = rtrim(dname(j)) || ">" || ename(j);
		call hcs_$initiate_count(dname(j),ename(j),"",nbits(j),1,p(j),code);
		if p(j)=null then call error(sname(j));
		end;

	     /* get object information */

	     oi(j).version_number = object_info_version_2;


	     call object_info_$long(p(j),nbits(j),addr(oi(j)),code);
	     if code ^= 0 then call error(sname(j));


	end;

/* Check for consistency of type for the 2 segments */

	if oi.old_format(1) ^= oi.old_format(2) then call error
		("Cannot compare old format segment with new format segment.");

	if oi.separate_static(1) ^= oi.separate_static(2)
	     then call error("Cannot compare separate static segment with non separate static segment.");

	if oi.compiler(1) ^= oi.compiler(2)
	     then call error("The 2 segments were compiled by incompatible compilers.");

	if oi.relocatable(1) ^= oi.relocatable(2)
	     then call error("Cannot compare relocatable with nonrelocatable object segment.");

	if oi.perprocess_static(1) ^= oi.perprocess_static(2)
	     then do;
		result.perprocess_static = "1"b;
		if ^brief then call ioa_ ("The 2 segments have different perprocess static attributes.");
	     end;


/* Get the parameters */

	do while (isparm);
		call cu_$arg_ptr(arg_num,aptr,alen,code);
		if code ^= 0 then isparm = "0"b;
		else
		do;
			token=arg;
			do i= 1 to hbound(keyword,1) while(token^=keyword(i));
			end;
			if i <= hbound(keyword,1) then
			do;
				i = mod(i-1,nparm) + 1;
				if i=nparm then string(all)="11111"b;
				else
				do;
					bits(i) = "1"b;
					if i >= 2 then qual = "1"b;
				end;
			end;
			else
			do;
				code = error_table_$badopt;
				call error(token);
			end;
		end;
		arg_num = arg_num + 1;
	end;
	if ^qual then string(all) = "11111"b;

	if ^oi.separate_static(1)
	then if parm.static
	     then do;
		parm.link = "1"b;
		parm.static = "0"b;
		end;

/* display information about the segment */

	if ^brief
	then do j = 1 to 2;
		call ioa_("^/^a:  (segment ^d)",sname(j),j);
		time = date_time_$format ("date_time",oi(j).compile_time,"","");
		call ioa_("^a^4x^a^/",time,oi(j).compiler);
	     end;

/* Compare lengths returned by object_info_ */

	if oi.tlng(1) ^= oi.tlng(2) then call badlen("text",oi.tlng);
	if oi.dlng(1) ^= oi.dlng(2) then call badlen("defs",oi.dlng);
	if oi.llng(1) ^= oi.llng(2) then call badlen("link",oi.llng);
	if oi.ilng(1) ^= oi.ilng(2) then call badlen("stat",oi.ilng);
	if oi.slng(1) ^= oi.slng(2) 
	then do;
		call badlen("symb",oi.slng);
		if ^brief & oi.relocatable(1)
		then do;
		     serious = "1"b;
		     if oi.rel_def(1) -> relinfo.n_bits = oi.rel_def(2) -> relinfo.n_bits
		     then if oi.rel_text(1) -> relinfo.n_bits = oi.rel_text(2) -> relinfo.n_bits
			then if oi.rel_link(1) -> relinfo.n_bits = oi.rel_link(2) -> relinfo.n_bits
			     then if oi.rel_link(1) -> relinfo.relbits = oi.rel_link(2) -> relinfo.relbits
				then if oi.rel_text(1) -> relinfo.relbits = oi.rel_text(2) -> relinfo.relbits
				     then serious = "0"b;
		     if serious
			then word = "may be serious";
			else word = "is trivial";

		     call ioa_("The discrepancy ^a",word);
		     end;
	     end;

/* Set up scratch segment for relocation bits */

	call get_temp_segments_(rname,scratch,code);
	if code ^= 0
	     then call error("scratch seg for relocation bits");

/* DO TEXT COMPARISON */

	if parm.text then call compare_text_(oip,result.text,parm.brief,segp);

/* DO DEFS COMPARISON */

	if parm.defs then call compare_defs_(oip,result.defs,parm.brief,segp);

/* DO LINK COMPARISON */

	if parm.link then call compare_link_(oip,result.link,parm.brief,segp);

/* DO STATIC COMPARISON */

	if parm.static then call compare_static_(oip,result.static,parm.brief,segp);

/*  RETURN SECTION */


	if command
	then do;
		if string(result) then
		do;
			call ioa_
("^/The following sections or attributes of the object segments do not match:");
			line = "^/";
			if result.length then line = "length  ";
			if result.perprocess_static then line = line || "perprocess_static ";
			do j = 1 to hbound(rslt,1)-2;
				if rslt(j) then line = line || substr(keyword(j+1),2);
			end;
			call ioa_(line);
		end;
		else call ioa_("The 2 segments match.");
	     end;

return:	call clean_up;
	if command
	     then return;
	     else return(substr(string(result),1,4) = "0000"b);


clean_up:	proc;

	do j = 1 to 2;
		if p(j) ^= null
		then do;
		     if ^ have_ptrs
		     then do;
			call hcs_$terminate_noname(p(j),code);
			p(j) = null;
			end;
		     end;
	end;

	call release_temp_segments_(rname,scratch,code);

end;

/* ERROR SECTION */

error:	proc (msg);
dcl	msg char(*);
	if command
	     then call com_err_(code,rname,msg);
	     else string(result) = "1111111"b;
	go to return;
end;

badlen:	proc (type,array);
dcl	type char(4);
dcl	array(*) fixed bin(17);
	if ^brief then call ioa_("Lengths of the ^a section of the 2 segments do not agree. ^/^a : ^d ^/^a : ^d",
		type,sname(1),array(1),sname(2),array(2));
	result.length = "1"b;
	return;
end;

end;
