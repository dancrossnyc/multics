/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compare_text_:	proc (optr,a_diff,a_brief,segptr);

/*	Modified:	2 May 1977 by RAB to improve IC checking	*/
/*	Modified: 4 May 1977 by SHW to use new calling sequence for display_text_  */
/*	Modified:	9 April 1979 by RAB to improve comparison of text references */

dcl	optr pointer;


%include object_info;

dcl	1 oi(2) based(optr) aligned like object_info;

dcl	a_diff bit(1) unaligned;

dcl	a_brief bit(1) unaligned;

dcl	segptr pointer;

dcl	1 seg based(segptr),
		2 p(4) pointer,	/* segment pointers */
		2 sname(2) char(200) aligned;	/* segment names */


dcl	differ bit(1) aligned init("0"b);
dcl	brief bit(1) aligned;
dcl	first bit(1) aligned init("1"b);

dcl	(i,j,k) fixed bin(17);
dcl	limit fixed bin;
dcl	r pointer;
dcl	onp pointer;
dcl	1 rel_tab based(r) aligned,
		2 array(limit) unaligned,
			3 dummy unal bit(13),
			3 rbits unal bit(5);
dcl	rptr(2) pointer;	/* pointers to unpacked relocation bits */

dcl	tl(2) fixed bin(17) init(oi.tlng(1),oi.tlng(2));	/* TEXT LENGTHS */
dcl	tlmax fixed bin(17);
dcl	tp(2) pointer init(oi.textp(1),oi.textp(2));	/* TEXT POINTERS */

dcl	rscan fixed bin (17);	/* relocation scanner */
dcl	1 relinfo based,
		2 decl_vers fixed bin(17),
		2 n_bits fixed bin (17),
		2 relbits bit(nb refer(n_bits));

dcl	rt(2) pointer init(oi.rel_text(1),oi.rel_text(2));	/* pointers to packed relocation bits */

dcl	minwords fixed bin int static init(5);
dcl	(af,aj,bf,bj) fixed bin;

dcl	tlen(2) fixed bin;		/* LENGTHS LEFT TO BE SCANNED */
dcl	ilc(2) fixed bin;		/* SCANNERS */

dcl	word(0:65535) bit(36) aligned based;	/* ARRAY USED FOR NORMAL SCANNING */

dcl	1 inst(0:65535) based aligned,	/* ARRAY OF INSTRUCTIONS FOR IC CHECKING */
	2 address fixed bin(17) unal,
	2 right unaligned,
	  3 op_code bit(10) unal,
	  3 inhibit bit(1) unal,
	  3 ext_base bit(1) unal,
	  3 tag bit(6) unal;


/* function declarations */

dcl	display_text_ entry(ptr,ptr,fixed bin,fixed bin,fixed bin,ptr);
dcl	get_operator_names_ptr_ entry (char (*), ptr);
dcl	ioa_ entry options(variable);

dcl	(addr,addrel,divide,fixed,index,max,min,mod,null,string,substr) builtin;

	brief = a_brief;
	if ^brief then call get_operator_names_ptr_ ((oi (1).compiler), onp);
	tlmax = max(tl(1),tl(2));


/* Check for old style object segment and adjust relocation pointers accordingly */

	if oi.old_format(1) & rt(1) ^= null
	then do;
		rt(1) = addrel(rt(1),-1);
		rt(2) = addrel(rt(2),-1);
	     end;

/* DO TEXT COMPARISON */


/* Convert relocation info to unpacked form */

		rptr(1) = p(3);
		rptr(2) = p(4);
		if rt(1) ^= null
		then do j = 1 to 2;	/*  for each segment */
			rscan = 1;
			r = rptr(j);
			limit = 2 * tl(j);
			k = 1;

search_1:			i = index(substr(rt(j)->relbits,rscan),"1"b);
			if i ^= 0
			then do;
				rscan = rscan + (i - 1);
				k = k + (i - 1);
				if k > limit then go to jloop;
				if substr(rt(j)->relbits,rscan,5)="11110"b
				then do;
					k = k + fixed(substr(rt(j)->relbits,rscan+5,10),17);
					rscan = rscan + 15;
				     end;
				else do;
					rbits(k) = substr(rt(j)->relbits,rscan,5);
					k = k + 1;
					rscan = rscan + 5;
				     end;
				go to search_1;
			     end;

jloop:		     end;

/*  SECTION TO DO THE ACTUAL SCANNING */

/* Initialize scanners */

	tlen(1) = tl(1);
	tlen(2) = tl(2);
	ilc(1), ilc(2) = 0;

/* Main loop, skip through blocks of matching lines */

l1:
	if tlen(1) <= 0
	then if tlen(2) <= 0
	     then do;
stop:		a_diff = differ;
		return;
		end;
	     else do;		/* A finished, print B */
		differ = "1"b;
		if ^brief
		then do;
		     call print(1,2,tlen(2));
		     call ioa_("^RAdded to end.^B");
		     end;
		go to stop;
		end;
	if tlen(2) <= 0
	then do;
	     differ = "1"b;		/* B finished, print A */
	     if ^brief
	     then do;
		call print(1,1,tlen(1));
		call ioa_("^RDeleted from end.^B");
		end;
	     go to stop;
	     end;

/* COMPARE */

	if tp(1) -> word(ilc(1)) = tp(2) -> word(ilc(2))	/* If lines equal, */
	then do;
check_reloc:
	     if rptr(1) -> word(ilc(1)) = rptr(2) -> word(ilc(2))
	     then do;				/* then move up the scanners */
		ilc(1) = ilc(1) + 1;
		ilc(2) = ilc(2) + 1;
		tlen(1) = tlen(1) -1;
		tlen(2) = tlen(2) - 1;
		go to l1;
		end;
	     end;
	else if check_ic(ilc(1),ilc(2))
	     then go to check_reloc;

/*  No match, start looking for matching group to sync on */

	af, bf = 1;
	differ = "1"b;
	if brief then go to stop;

l2:
	if minwords > tlen(2)	/* Make sure we don't run off the end */
	     then go to nomatch;

	if (af+minwords) > tlen(1)	/* Ditto */
	     then go to nomatch;

	if equal(af,0)		/* First, look for a match on the first line */
	     then do;
		bf = 0;
		go to rematch;
		end;

	if (bf+minwords) > tlen(2)	/* Again, watch out for end of segment */
	     then go to nomatch;

	bj = 0;
	do i = 1 to bf while(bj = 0);	/* Look for a matching group */
	     if equal(af,i)
		then bj = i;
	end;

	if minwords > tlen(1)	/* Watch out for end of segment */
	     then go to nomatch;

	if equal(0,bf)		/* Look for match the other way on the first line */
	     then do;
		af = 0;
		go to rematch;
		end;

	if bj > 0
	     then do;
		bf = bj;
		go to rematch;
		end;

	aj = 0;			/* Scan for a matching group */
	do i = 1 to af while (aj = 0);
	     if equal(i,bf)
		then aj = i;
	end;

	if aj > 0
	     then do;
		af = aj;
		go to rematch;
		end;

/* Look further in each segment for a matching group */

	af = af + 1;
	bf = bf + 1;
	go to l2;

/* No match, entire ends of files changed */

nomatch:
	af = tlen(1);
	bf = tlen(2);

/* We have found a match to resync with if we get here by a goto */

rematch:
	if af <= 0
	then do;
	     call print(1,2,bf);
	     call ioa_("^RInserted before:^B");
	     call print(0,1,(minwords));
	     end;
	else if bf <= 0
	     then do;
		call print(1,1,af);
		call ioa_("^RDeleted before:^B");
		call print(0,2,(minwords));
		end;
	     else do;
		call print(1,1,af);
		call ioa_("^RChanged to:^B");
		call print(1,2,bf);
		end;

	call ioa_("^2/");
	tlen(1) = tlen(1) - af;
	tlen(2) = tlen(2) - bf;
	go to l1;
/*  INTERNAL PROCEDURE FOR COMPARING BLOCKS OF CODE */

equal:	proc(astart,bstart) returns(bit(1) aligned);
dcl	(a,astart,b,bstart,i) fixed bin;

	a = astart + ilc(1);
	b = bstart + ilc(2);

	do i = 0 to minwords - 1;
	     if tp(1) -> word(i+a) ^= tp(2) -> word(i+b)
	     then if ^ check_ic(i+a, i+b)
		then return("0"b);
	     if rptr(1) -> word(i+a) ^= rptr(2) -> word(i+b)
		then return("0"b);
	end;

	return("1"b);
end;




/* INTERNAL PROCEDURE FOR DISPLAYING BAD TEXT */

print:	proc(bumpsw,which,plen);
dcl	(i,bumpsw,which,len,plen) fixed bin;

	i = which;
	len = plen;

	if first
	     then do;
		call ioa_("^2/**Text discrepancies between the 2 segments have been found.^2/");
		first = "0"b;
		end;

	call ioa_("^a:",sname(i));
	call display_text_(tp(i),rptr(i),ilc(i),len,tl(i),onp);

	if bumpsw ^= 0
	     then ilc(i) = ilc(i) + len;
end;


/* INTERNAL PROCEDURE TO SEE IF TWO DIFFERING INSTRUCTIONS ARE REALLY THE SAME, DIFFERING
ONLY IN THE OFFSET FOR IC MODIFICATION OR TEXT REFERENCING

   check_ic is heuristic not algorithmic */

check_ic:	proc(a,b) returns(bit(1) aligned);

dcl	a fixed bin,	/* location being compared in seg 1 */
	b fixed bin;	/* location being compared in seg 2 */

dcl	a1 fixed bin,	/* operand address in seg 1 */
	b1 fixed bin;	/* operand address in seg 2 */

	differ = "1"b;

	if string(tp(1) -> inst(a).right) = string(tp(2) -> inst(b).right)
	 & ^ tp(1) -> inst(a).ext_base
	then if tp(1) -> inst(a).tag = "000100"b	/* IC */
	      | tp(1) -> inst(a).tag = "010100"b	/* IC* */
	      | tp(1) -> inst(a).tag = "000000"b	/* (text) */
	     then do;
		a1 = tp(1) -> inst(a).address;
		b1 = tp(2) -> inst(b).address;

		if substr(tp(1) -> inst(a).tag,4,1)	/* IC */
		then do;
		     a1 = a1 + a;
		     b1 = b1 + b;
		     end;

		if b1 >= 0 & b1 < tl(2) & a1 >= 0 & a1 < tl(1)
		then if tp(1) -> word(a1) = tp(2) -> word(b1)
		     then if tp(1) -> word(a1+1) = tp(2) -> word(b1+1)
			then return("1"b);
		end;

	return("0"b);

end;


end;
