/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compare_defs_:	proc(optr,a_diff,a_brief,segptr);

dcl	optr pointer;
dcl	a_diff bit(1) unaligned;
dcl	a_brief bit(1) unaligned;
dcl	segptr pointer;

%include object_info;

dcl	1 oi(2) based(optr) aligned like object_info;

dcl	1 seg based(segptr),
		2 p(4) pointer,	/* segment pointers */
		2 sname(2) char(200) aligned;	/* segment names */


dcl	first bit(1) aligned init("1"b);
dcl	differ bit(1) aligned init("0"b);
dcl	brief bit(1) aligned;

dcl	1 def_header based aligned,
		2 def_list bit(18) unaligned,
		2 unused bit(54) unaligned;

/* Definition block returned by decode_definition_$full */

dcl	1 def(2) aligned,
		2 next_def pointer,
		2 last_def pointer,
		2 block_ptr pointer,
		2 section char(4) aligned,
		2 offset fixed bin,
		2 entrypoint fixed bin,
		2 symbol char(256) aligned,
		2 symbol_lng fixed bin,
		2 flags,
			3 new_format bit(1) unal,
			3 ignore bit(1) unal,
			3 entrypoint bit(1) unal,
			3 retain bit(1) unal,
			3 descr_sw bit(1) unal,
			3 unused bit(31) unal,
		2 n_args fixed bin,
		2 descr_ptr pointer;

dcl	arg_desc bit(36) aligned based;
dcl	dptr(n_args(1)) bit(18) unaligned based;


dcl	def_ptr(2) pointer;	/* points to definition block to be examined */
dcl	oip(2) pointer init(addr(oi(1)),addr(oi(2)));
dcl	stptr(2) pointer;	/* points to receiving structure for defs */
dcl	tp(2) pointer init(oi.textp(1),oi.textp(2));	/* text pointers */

dcl	are_defs bit(1) aligned init ("1"b);
dcl	end_thread(2) bit(1) aligned;
dcl	(i,j,lng) fixed bin (17);

/* function definitions */

dcl	decode_definition_$full entry(ptr,ptr,ptr) returns(bit(1) aligned);
dcl	ioa_ entry options(variable);

dcl	(addr,addrel,fixed,string,substr) builtin;

/* Initialize flag */

          stptr(1) = addr(def(1));
          stptr(2) = addr(def(2));
	                        /* points to receiving structure for defs */
	brief = a_brief;

/* Point to first definitions */

/* (decode_definition_ automatically points to first definition if given the header */


	def_ptr(1) = oi.defp(1);
	def_ptr(2) = oi.defp(2);

/* LOOP FOR DECODING DEFINITIONS */

	do while (are_defs);
		do i = 1 to 2;
			end_thread(i) = decode_definition_$full(def_ptr(i),stptr(i),oip(i));
		end;
		are_defs = ^(end_thread(1)|end_thread(2));
		if are_defs then

/* Compare the 2 definitions */

		do;
			if section(1) ^= section(2) then go to baddefs;
			if def.offset(1) ^= def.offset(2) then go to baddefs;
			if def.entrypoint(1) ^= def.entrypoint(2) then go to baddefs;
			if symbol_lng(1) ^= symbol_lng(2) then go to baddefs;
			lng = symbol_lng(1);
			if substr(symbol(1),1,lng) ^= substr(symbol(2),1,lng) then go to baddefs;
			if string(flags(1)) ^= string(flags(2)) then go to baddefs;
			if descr_sw(1) then
			do;
				if n_args(1) ^= n_args(2) then go to baddefs;
				do i = 1 to n_args(1) while
				(addrel(tp(1),descr_ptr(1)->dptr(i))->arg_desc =
				 addrel(tp(2),descr_ptr(2)->dptr(i))->arg_desc);
				end;
				if i <= n_args(1) then go to baddefs;
			end;
		end;

comploop:		def_ptr(1) = next_def(1);
		def_ptr(2) = next_def(2);
	end;

	if ^(end_thread(1)&end_thread(2)) then
	do;
		differ = "1"b;
		if end_thread(1) then
		do;
			i=2;
			j=1;
		end;
		else
		do;
			i=1;
			j=2;
		end;
		call ioa_("^/^a has more definitions than ^a.",sname(i),sname(j));
	end;

/* RETURN SECTION */

	a_diff = differ;
	return;

/* BADDEFS */

baddefs:	differ = "1"b;
	if ^brief then
	do;
		if first then
		do;
			call ioa_("^/**Definition discrepancies between the 2 segments have been found.^/");
			first = "0"b;
		end;
		do j = 1 to 2;
			call ioa_
("^/^a:^/^-section = ^a^-offset = ^o^-entrypoint = ^o^/^-symbol = ^a^/^-symbol_lng = ^o
^-new_format = ^o^-ignore = ^o^-ep = ^o^-retain = ^o^-descr_sw = ^o",sname(j),section(j),def.offset(j),
def.entrypoint(j),symbol(j),symbol_lng(j),fixed(new_format(j),1),
fixed(ignore(j),1),fixed(flags.entrypoint(j),1),fixed(retain(j),1),fixed(descr_sw(j),1));
			if descr_sw(j) then
			do;
				call ioa_("^-n_args = ^d^/^/^-argument descriptors:^/",n_args(j));
				do i = 1 to n_args(j);
					call ioa_("^-^w",addrel(tp(j),descr_ptr(j)->dptr(i))
					->arg_desc);
				end;
			end;
		end;
		call ioa_("^/");
	end;
	go to comploop;

end;
