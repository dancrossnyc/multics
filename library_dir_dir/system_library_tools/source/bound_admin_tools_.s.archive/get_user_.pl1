/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* program to return the name and project of each user registered on the Multics system */

/* j m grochow 		7/23/70 */

/* upgraded to version II pl1 and
   modified for new SAT / PDT formats by Janice B. Phillipps, March 1972 */

guinit: proc(dirname, code);

dcl ( (satp,					/* pointer to the sat */
     satep,
     pdtep,
     pdtp) ptr,					/* pointer to the pdt */
    (satsize,					/* current size of the sat */
     satindex,					/* where are we now */
     pdtsize,					/* current size of the pdt */
     pdtindex) fixed bin,				/* where are we now */
    (projectname char(9),				/* save the current projectname */
     dirnamepdt char(168)) aligned			/* directory name which contains pdt's */
     ) internal static;				/* all internal static */

dcl  ioa_ external entry options(variable),
     com_err_ external entry options (variable),
     hcs_$initiate external entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     ptr, fixed bin),
     hcs_$terminate_noname external entry (ptr, fixed bin);

dcl (null, addr, substr, fixed, index) builtin;

dcl  p ptr,
     i fixed bin;


dcl (person, proj) char(*);
dcl  dirname char(*) aligned;
dcl  code fixed bin;

%include user_attributes;
%include sat;
%include pdt;



/* ======================================================== */

	call hcs_$initiate(dirname, "sat", "", 0, 1, satp, code);
	if satp = null then do;
	     if code = 0 then code = 1;
	     return;
	end;

	if satp -> sat.version ^= SAT_version then do;
	     call com_err_ (0, "get_user_", "SAT version is inconsistent with declarations used by this program.");
	     return;
	end;


	satsize = satp->sat.current_size;
	satindex = 1;

	dirnamepdt = dirname;
	substr(dirnamepdt, index(dirnamepdt, " "), 4) = ">pdt";
	call initpdt;				/* get the first pdt */

	return;

get_user_: entry(person, proj);

beginloop: do i = pdtindex to pdtsize;

	     p = addr(pdtp->pdt.user(i));

	     if p->user.state = 0 then go to endloop;

	     person = p->user.person_id;		/* person's name */
	     proj = projectname;			/* the current project */

	     pdtindex = i+1;
	     return;

endloop:	end;

/* if we fall through, get another pdt */

	call hcs_$terminate_noname (pdtp, code);	/* terminate the current pdt */
	call initpdt;
	if projectname = " " then do;			/* no more pdt's */
	     person = " ";
	     proj = " ";
	     call hcs_$terminate_noname (pdtp, code);	/* terminate last pdt */
	     call hcs_$terminate_noname (satp, code);	/* terminate sat */

	     return;
	end;

	go to beginloop;


/* internal entry to get another pdt */

initpdt:	proc;

dcl  projfile char(32) aligned,			/* name of project pdt file */
     code fixed bin;				/* for error codes */
dcl  com_err_ external entry options (variable);

dcl (null, addr, substr, fixed) builtin;

	     do i = satindex to satsize;

		p = addr(satp->sat.project(i));

		if p->project.state = 0 then go to endloop1;

		projfile = substr(p->project.project_id, 1, index(p->project.project_id, " ")-1)||".pdt";

		call hcs_$initiate(dirnamepdt, projfile, "", 0, 1, pdtp, code);
		if pdtp = null then do;
		     call ioa_("The following pdt could not be initiated: ^a>^a", dirnamepdt, projfile);
		     go to endloop1;
		end;

		if pdtp -> pdt.version ^= PDT_version then do;
		     call com_err_ (0, "get_user_", "PDT version is inconsistent with the declarations used by this program.");
		     return;
		end;

		projectname = p->project.project_id;
		pdtsize = pdtp->pdt.current_size;
		pdtindex = 1;

		satindex = i+1;
		return;

endloop1:      end;

/* if we fall through, no more pdt's */

	     projectname = " ";

	     return;

	end initpdt;

     end guinit;
