/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_delegated_projects: proc;

dcl (sat_dir, sat_path) char (168) aligned,
     sel_proj char (32) aligned init (""),
     sat_name char (32) aligned,
     datestr char (16) aligned,
    (i, ii, iii, m, lng, sm, jj, slng, ec) fixed bin,
     an fixed bin init (2),
    (argp, satp, satep, pp) pointer,
     arg char (slng) based (argp),
     ct fixed bin init (0),
     ct1 fixed bin init (0);

dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     com_err_ entry options (variable),
     idsort_ entry ((*) char (32) aligned, (*) fixed bin, fixed bin);
dcl  ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     clock_ entry () returns (fixed bin (71)),
     date_time_ entry (fixed bin (71), char (*) aligned);
dcl (addr, null, fixed, substr) builtin;

/* ================================================ */

%include user_attributes;
%include sat;
/* ================================================ */

/* INITIALIZATION - LOCATE AND INITIATE SAT */


	call cu_$arg_ptr (1, argp, slng, ec);		/* 1st argument is path name of sat */
	if ec ^= 0 then do;
	     call com_err_ (ec, "list_delegated_projects", "");
	     return;
	end;

	sat_path = arg;
	if sat_path ^= "sat" then
	     if substr (sat_path, slng-3, 4) ^= ">sat" then
		if substr (sat_path, slng-3, 4) ^= ".sat" then do;
	     slng = slng + 4;
	     substr (sat_path, slng-3, 4) = ".sat";
	end;

	call expand_path_ (addr (sat_path), slng, addr (sat_dir), addr (sat_name), ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "list_delegated_projects", sat_path);
	     return;
	end;

	call hcs_$initiate (sat_dir, sat_name, "", 0, 0, satp, ec);
	if satp = null then do;
	     call com_err_ (ec, "list_delegated_projects", sat_path);
	     return;
	end;
	if sat.version ^= SAT_version then do;
	     call com_err_ (0, "list_delegated_projects",
	     "SAT version is inconsistent with declarations used by this program");
	     go to exit;
	end;

arglp:	call cu_$arg_ptr (an, argp, slng, ec);		/* get next arg -- a project name */
	if ec ^= 0 then go to endarg;			/* last arg? */
	else do;
	     sel_proj = arg;
	end;

next_arg: an = an + 1;
	go to arglp;				/* loop on args */
endarg:	if sel_proj ^= "" then go to quickie;
	call date_time_ ((clock_ ()), datestr);
	call ioa_ ("^/List of Delegated Projects as of ^a^/", datestr);

	call ioa_ ("^/^10xP__r_o_j_e_c_t^4xA__d_m_i_n_i_s_t_r_a_t_o_r^/");

quickie:	sm = sat.current_size;			/* Set up for sort. */
	begin;

dcl  x (sm) char (32) aligned,			/* project sorting array */
     y (sm) fixed bin;				/* grade array sorted with project id */

	     do i = 1 to sat.current_size;
		satep = addr (sat.project (i));
		x (i) = project.project_id;
		y (i) = i;
	     end;
	     if sel_proj = "" then call idsort_ (x, y, sm);

	     do i = 1 to sat.current_size;		/* loop thru SAT looking for delegated projects */
		satep = addr (sat.project (y (i)));	/* get ptr to slide down sat entries */
		if project.state = 1 then do;
		     if sel_proj ^= "" then if sel_proj ^= project.project_id then go to endsatloop;
		     ct = ct + 1;			/* counter to report undelegated projects */
		     if project.admin (1).userid = "" then go to endsatloop;
		     ct1 = ct1 + 1;
		     call ioa_ ("^/^10x^9a  ^a", project.project_id, project.admin (1).userid);
		     do jj = 2 to 4;		/* up to 4 project administrators */
			if project.admin (jj).userid ^= "" then
			     call ioa_ ("^21x^a", project.admin (jj).userid);
		     end;
		end;
endsatloop:    end;
	end;

	if sel_proj ^= "" then if ct = 0 then do;
	     call ioa_ (" Project ^a not found in SAT", sel_proj);
	end;
	else if ct1 = 0 then do;
	     call ioa_ ("^a is not currently a delegated project", sel_proj);
	end;

	call ioa_ ("");
exit:	call hcs_$terminate_noname (satp, ec);
	return;

     end list_delegated_projects;
