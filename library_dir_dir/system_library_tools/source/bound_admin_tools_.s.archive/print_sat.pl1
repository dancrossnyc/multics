/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* PRINT_SAT - procedure to print the binary System Administrator's Table

   coded by Eleanor Stone January 1970 */
/*  modified on 04/13/70 12:59 */

/* modified for new SAT format by Janice B. Phillipps, March 12, 1972 */
/* Modified 741107 by PG for authorizations & audit */
/* Modified by T. Casey, June 1975, for per-user load control groups */
/* Modified May 1976 by T. Casey to print project cutoff limits */
/* Modified May 1978 by T. Casey to print pdir_quota */
/* Modified January 1979 by T. Casey to print max_foreground, max_background, and abs_foreground_cpu_limit. */
/* Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures (UNCA). */
/* Modified June 1981 by E. N. Kittlitz for UNCA rate structures */
/* Modified 1984-07-05 BIM for min and max authorizations. */
/* Modified 1984-12-14 by EJ Sharpe for new audit flags */

print_sat:
     procedure;


/* automatic */

dcl 1 temp aligned like project.at;
dcl 1 global_attr aligned like project.at;
dcl  sat_dir char (168);
dcl  rs_number fixed bin;				/* rate structure index */
dcl  rs_name (0:9) char (32);
dcl  char_string char (256);
dcl  datestr char (24);
dcl  sel_proj char (32) init ("");
dcl  sat_name char (32);
dcl (i, jj) fixed bin;
dcl  code fixed bin (35);
dcl (argp, satp, satep) pointer;
dcl  slng fixed bin (21);
dcl  attr char (512) varying;
dcl  max_rs_number fixed bin;

/* DECLARATION OF BASED STRUCTURES */

dcl  arg char (slng) based (argp);

/* entries */

dcl  convert_access_audit_flags_$to_string entry (bit (36) aligned, char (*), fixed bin (35));
dcl  convert_access_class_$to_string_range_short entry ((2) bit (72) aligned, char (*), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_path_ entry (ptr, fixed bin (21), ptr, ptr, fixed bin (35));
dcl  format_attributes_ entry (ptr, char (*) var);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35));

/* builtin functions */

dcl (addr, char, clock, hbound, length, ltrim, null, reverse, string, substr, verify) builtin;

/* internal static */

dcl  my_name char (9) internal static initial ("print_sat");

/* include files */

/* ================================================ */

%include sat;
%include user_attributes;
/* ================================================ */

/* INITIALIZATION - LOCATE AND INITIATE SAT */

	call system_info_$max_rs_number (max_rs_number);
	do i = 0 to hbound (rs_name, 1);
	     rs_name = " rate structure " || ltrim (char (i));
	end;

	call cu_$arg_ptr (1, argp, slng, code);
	if code ^= 0 then do;
	     call com_err_ (code, my_name, "");
	     return;
	end;

	call expand_path_ (argp, slng, addr (sat_dir), addr (sat_name), code);
	if code ^= 0 then do;
	     call com_err_ (code, my_name, arg);
	     return;
	end;

	i = length (sat_name) - verify (reverse (sat_name), " ") + 1;
	if i > length (".sat")
	then if substr (sat_name, i - 3, 4) ^= ".sat"
	     then substr (sat_name, i + 1, 4) = ".sat";
	     else;
	else if sat_name ^= "sat"
	then substr (sat_name, i + 1, 4) = ".sat";

	call hcs_$initiate (sat_dir, sat_name, "", 0, 0, satp, code);
	if satp = null then do;
	     call com_err_ (code, my_name, "^a>^a", sat_dir, sat_name);
	     return;
	end;

	if satp -> sat.version ^= SAT_version then do;
	     call com_err_ (0, my_name, "SAT version ^d is inconsistent with declarations used by this program (version ^d).", satp -> sat.version, SAT_version);
	     return;
	end;

	call cu_$arg_ptr (2, argp, slng, code);
	if code = 0 then do;
	     sel_proj = arg;
	     go to plp;
	end;

	call date_time_ ((clock ()), datestr);
	call ioa_ ("^//*  ^a>^a  ^a */^/", sat_dir, sat_name, datestr);
	call ioa_ ("/* author.process_group_id:^6x^a; */", satp -> sat.author.proc_group_id);
	call ioa_ ("/* author.w_dir:^17x^a; */", satp -> sat.author.w_dir);

	call ioa_ ("/* max_size:^18x^4d; */", sat.max_size);
	call ioa_ ("/* current_size:^14x^4d; */", sat.current_size);
	call ioa_ ("/* version:^22x^d; */", sat.version);
	call ioa_ ("/* freep:^21x^4d; */", sat.freep);
	call ioa_ ("/* n_projects:^16x^4d; */", sat.n_projects);
	call ioa_ ("   Maxunits:^16x^6d;", sat.max_units);
	if satp -> sat.uwt_size ^= 0 then do;
	     call ioa_ ("/* uwt_size:^20x^2d; */", sat.uwt_size);
	     do i = 1 to satp -> sat.uwt_size;
		call ioa_ ("^3xUwt:^2-^a, ^d;", sat.uwt (i).initproc, sat.uwt (i).units);
	     end;
	end;

	do jj = 1 to 2;
	     if sat.system_admin (jj) ^= ""
	     then call ioa_ ("^3xAdministrator:^-^a;", sat.system_admin (jj));
	end;

/* Compute Global attribute bits */

	string (global_attr) = (36)"1"b;		/* initially assume all are ON */

	do i = 1 to sat.current_size;			/* turn off all non-global attrs */
	     satep = addr (sat.project (i));
	     if project.state ^= 0 then do;
		string (temp) = string (project.at);	/* copy attributes */
		temp.sb_ok = ^(temp.sb_ok);		/* normalize inverted attrs */
		temp.pm_ok = ^(temp.pm_ok);		/* (names are opposite of bits) */
		temp.eo_ok = ^(temp.eo_ok);		/* .. */
		string (global_attr) = string (global_attr) & string (temp);
	     end;
	end;

	string (temp) = string (global_attr);		/* leave global alone, make copy */
	temp.sb_ok = ^(temp.sb_ok);
	temp.pm_ok = ^(temp.pm_ok);
	temp.eo_ok = ^(temp.eo_ok);
	call format_attributes_ (addr (temp), attr);
	call ioa_ ("   Attributes:^6x^a", attr);

/* NOW PRINT OUT ALL PROJECT ENTRIES */

plp:
	do rs_number = 0 to max_rs_number;		/* get all the rate structure names */
	     call system_info_$rs_name (rs_number, rs_name (rs_number), code);
	end;

	do i = 1 to sat.current_size;

	     satep = addr (satp -> sat.project (i));
	     if project.state ^= 0 then do;
		if sel_proj ^= "" then if sel_proj ^= project.project_id then go to skip;
		call ioa_ ("^/^3xprojectid:^-^a;", project.project_id);
		call ioa_ ("/* state:^2-^d; */", project.state);
		call ioa_ ("^3xprojectdir:^-^a;", project.project_dir);
		if project.pdt_ptr ^= null
		then call ioa_ ("/* pdt_ptr:^-^p; */", project.pdt_ptr);
		call ioa_ ("^3xmaxprim:^-^d;", project.max_users);
		call ioa_ ("/* n_users:^-^d; */", project.n_users);
		string (temp) = string (project.at);
		temp.nopreempt = "0"b;		/* only used in PDT */

		if sel_proj = "" then do;		/* if printing whole SAT */
		     temp.sb_ok = ^(temp.sb_ok);
		     temp.pm_ok = ^(temp.pm_ok);
		     temp.eo_ok = ^(temp.eo_ok);
		     string (temp) = string (temp) & ^string (global_attr); /* turn OFF bits that are global */
		     temp.sb_ok = ^(temp.sb_ok);
		     temp.pm_ok = ^(temp.pm_ok);
		     temp.eo_ok = ^(temp.eo_ok);
		end;
		call format_attributes_ (addr (temp), attr);
		call ioa_ ("^3xattributes:^-^a", attr);
		if project.audit ^= ""b then do;
		     call convert_access_audit_flags_$to_string (project.audit, char_string, code);
		     if code ^= 0
		     then call com_err_ (code, my_name, "Could not convert audit flags.");

		     if char_string ^= ""
		     then call ioa_ ("^3xaudit:^2-""^a"";", char_string);
		end;

		call convert_access_class_$to_string_range_short (project.project_authorization, char_string, code);
		if code ^= 0
		then call com_err_ (code, my_name, "Could not convert authorization.");

		if char_string ^= ""
		then call ioa_ ("^3xauthorization:^-""^a"";", char_string);

		if max_rs_number > 0 then
		     call ioa_ ("/* rate_structure:^-^a (^d); */", rs_name (project.rs_number), project.rs_number);

		if project.cutoff ^= " "
		then call ioa_ ("^3xcutoff:^-^-^a;", project.cutoff);
		call ioa_ ("/* days_to_cutoff:^-^d; */", project.days_to_cutoff);
		call ioa_ ("/* pct_balance:^-^d%; */", project.pct_balance);
		call ioa_ ("/* dollars_to_cutoff: $^.2f; */", project.dollars_to_cutoff);
		call ioa_ ("^3xring:^-^-^d,^d;", project.min_ring, project.max_ring);
		if project.alias ^= ""
		then call ioa_ ("^3xalias:^-^-^a;", project.alias);
		call ioa_ ("^3xgroup:^-^-^a;", project.group);
		if project.at.igroup then do;
		     if project.groups (1) ^= "" then do; /* if any authorized groups */
			if project.groups (2) ^= "" then /* if two of them */
			     call ioa_ ("^3xgroups:^-^a, ^a;", project.groups (1), project.groups (2));
			else call ioa_ ("^3xgroups:^-^a;", project.groups (1));
		     end;
		end;
		call ioa_ ("^3xgrace:^2-^d;", project.grace_max);
		call ioa_ ("^3xpdir_quota:^-^d;", project.pdir_quota);
		call ioa_ ("^3xmax_foreground:^-^d;", project.max_foreground);
		call ioa_ ("^3xmax_background:^-^d;", project.max_background);
		call ioa_ ("^3xabs_foreground_cpu_limit:^x^d;", project.abs_foreground_cpu_limit);
		do jj = 1 to 4;
		     if project.admin (jj).userid ^= "" then
			call ioa_ ("^3xadministrator:^-^a;", project.admin (jj).userid);
		end;
	     end;
skip:	end;

	call ioa_ ("");

	if sel_proj = ""
	then call ioa_ ("end;^/");

	call hcs_$terminate_noname (satp, code);
	return;

     end print_sat;
