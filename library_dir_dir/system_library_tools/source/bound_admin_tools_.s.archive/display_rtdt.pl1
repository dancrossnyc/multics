/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_rtdt: proc;

/* This procedure formats and prints the contents of a Resource Type Description Table (RTDT). */
/* Written 03/13/78 by C. D. Tavares */

%include rtdt;

dcl  sysdir char (168) static initial (">system_control_1"),
     sysent char (32) static initial ("rtdt") options (constant);

dcl  null builtin;

dcl  cu_$arg_count ext entry (fixed bin),
     nargs fixed bin;

dcl  cu_$arg_list_ptr ext entry (pointer),
     alp pointer;

	rtdtp = null ();

	call cu_$arg_list_ptr (alp);

	call cu_$arg_count (nargs);

	begin;

dcl  dirname char (168),
     ename char (32);

dcl  temp_name char (128) aligned;

dcl  cu_$arg_ptr_rel ext entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer),
     ap pointer,
     al fixed bin,
     arg based (ap) char (al),
     code fixed bin (35);

dcl  com_err_ ext entry options (variable),
     expand_pathname_$add_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35));

dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin, pointer, fixed bin (35)),
     bc fixed bin (24);

dcl  i fixed bin,
     header_sw bit (1) aligned,
     n_names_to_match fixed bin,
     date_time_string char (24),
     attribute_string char (512) varying;

dcl  ioa_ ext entry options (variable),
     hcs_$terminate_noname ext entry (pointer, fixed bin (35)),
     date_time_ ext entry (fixed bin (52), char (*)),
     clock_ ext entry returns (fixed bin (52));

dcl (error_table_$unimplemented_version,
     error_table_$name_not_found,
     error_table_$badopt) external fixed bin (35) static;

dcl (index, length, null, pointer, reverse, string, substr) builtin,
     cleanup condition;

dcl (convert_authorization_$to_string,
     convert_authorization_$from_string) ext entry (bit (72) aligned, char (*), fixed bin (35));

dcl (SYSTEM_HIGH, SYSTEM_LOW) bit (72) aligned;

dcl  matchnames (nargs) char (32);

dcl  temp_atts (2) bit (72);

dcl  cv_rcp_attributes_$to_string_given_rtde ext entry (pointer, bit (72) dimension (2), char (*) varying, fixed bin (35));

	     call convert_authorization_$from_string (SYSTEM_LOW, "system_low", code);
	     if code ^= 0 then call crump (code, "system_low");
	     call convert_authorization_$from_string (SYSTEM_HIGH, "system_high", code);
	     if code ^= 0 then call crump (code, "system_high");

	     dirname = sysdir;
	     ename = sysent;
	     n_names_to_match = 0;
	     header_sw = "1"b;

	     do i = 1 to nargs;
		call cu_$arg_ptr_rel (i, ap, al, code, alp);
		if code ^= 0 then call crump (code, "obtaining arguments");

		if arg = "-pn" | arg = "-pathname" then do;
		     i = i + 1;
		     call cu_$arg_ptr_rel (i, ap, al, code, alp);
		     if code ^= 0 then call crump (code, "No pathname supplied.");

		     call expand_pathname_$add_suffix (arg, "rtdt", dirname, ename, code);
		     if code ^= 0 then call crump (code, arg);
		end;

		else if arg = "-nhe" | arg = "-no_header" then header_sw = ""b;

		else if substr (arg, 1, 1) = "-" then call crump (error_table_$badopt, arg);

		else do;
		     n_names_to_match = n_names_to_match + 1;
		     matchnames (n_names_to_match) = arg;
		end;
	     end;

	     on cleanup call clean_up;

/* ------------------------- */

clean_up:	     proc;
		if rtdtp ^= null then call hcs_$terminate_noname (rtdtp, 0);
	     end clean_up;

/* ------------------------- */

	     call hcs_$initiate_count (dirname, ename, "", bc, 0, rtdtp, code);
	     if rtdtp = null then
		if ename = "rtdt.rtdt" then do;
		     ename = "rtdt";
		     call hcs_$initiate_count (dirname, ename, "", bc, 0, rtdtp, code);
		end;
	     if rtdtp = null then call crump (code, "^a>^a");

	     if (rtdt.version ^= RTDT_version_2) & (rtdt.version ^= RTDT_version_3) then
		call crump (error_table_$unimplemented_version, "^a>^a");

	     if header_sw then do;
		call date_time_ (clock_ (), date_time_string);
		call ioa_ ("/*	^a>^a -- ^a	*/^/", dirname, ename, date_time_string);

		call ioa_ ("/* Author:	^a */^/", rtdt.author.proc_group_id);
	     end;

	     cttp = pointer (rtdt.charge_type_table_ptr, rtdt.rtdt_area);

	     do rtdep = pointer (rtdt.first_resource, rtdt.rtdt_area)
		     repeat (pointer (rtde.next_resource, rtdt.rtdt_area))
		     while (rtdep ^= null);

		if rtde.valid then do;
		     do i = 1 to n_names_to_match while (matchnames (i) ^= rtde.name);
		     end;

		     if (i <= n_names_to_match | n_names_to_match = 0) then do;

			if i <= n_names_to_match then matchnames (i) = "";

			call ioa_ ("^/^[Volume^;Device^]:^2-^a;", rtde.is_volume, rtde.name);

			if rtde.is_synonym then call ioa_ ("Like:^2-^a;", rtde.syn_to);

			else do;
			     temp_atts (1) = rtde.attributes_valid;
			     temp_atts (2) = rtde.attributes_to_match;
			     call cv_rcp_attributes_$to_string_given_rtde (rtdep, temp_atts, attribute_string, code);
			     if code ^= 0 then do;
				call com_err_ (code, "display_rtdt", "Error displaying attributes for ^a", rtde.name);
				attribute_string = "";
			     end;

			     attribute_string = attribute_string || ";";
			     if attribute_string = ";" then call ioa_ ("Attribute_domain:^-;");
			     else do i = 1 by 1 while (attribute_string ^= "");
				call ioa_ ("^[Attribute_domain:^-^;^2-  ^]^a", (i = 1), knockoff_50_ch (attribute_string));
			     end;

			     call ioa_ ("Limit:^2-^[open^;^d^];", (rtde.process_limit = -1), rtde.process_limit);
			     call ioa_ ("Time:^2-^[open^;^[^d^;^d, ^d^]^];", (rtde.default_time >= 4880),
				(rtde.default_time = rtde.max_time), rtde.default_time, rtde.max_time);

			     if rtde.n_mates = 0 then call ioa_ ("^[Implies^;Accepts^]:^2-;", (rtde.is_volume));

			     else call ioa_ ("^[Implies^;Accepts^]:^2-^v(^a, ^)^a;", (rtde.is_volume),
				rtde.n_mates - 1, rtde.mates (*));

			     call ioa_ ("Manual_clear:^-^[yes^;no^];", rtde.manual_clear);
			     call ioa_ ("Advance_notice:^-^[none^;^d^];", (rtde.advance_notice_time = -1),
				rtde.advance_notice_time);
			     call ioa_ ("Canonicalizer:^-^[^a^;^];", (rtdt.version = RTDT_version_3),
				rtde.precanon_proc);

			     call ioa_ ("");

			     call display_subtype (rtde.name, rtde.registration_defaults, 0);

			     do i = 1 to rtde.n_subtypes;

				call ioa_ ("^/type:^2-^a;", rtde.subtype_name (i));
				temp_name = rtrim (rtde.name) || " (" || rtrim (rtde.subtype_name (i)) || ")";
				call display_subtype (rtde.name, rtde.subtype_defaults (i), 5);
			     end;
			end;
		     end;
		end;

		if n_names_to_match = 0 then call ioa_ ("^//* --------------- */");
	     end;

	     call clean_up;
	     if n_names_to_match = 0 then call ioa_ ("^/end;");

	     else do i = 1 to n_names_to_match;
		if matchnames (i) ^= "" then call com_err_ (error_table_$name_not_found, "display_rtdt", matchnames (i));
	     end;

	     return;

display_subtype: proc (item_name, struc, indent);

dcl  item_name char (*) aligned parameter;

dcl 1 struc like rtde.registration_defaults aligned parameter;

dcl  indent fixed bin parameter;

dcl (low_auth_string, high_auth_string) char (128),
     i fixed bin;

		if struc.potential_attributes_given then do;
		     temp_atts (1) = struc.potential_attributes;
		     temp_atts (2) = ""b;
		     call cv_rcp_attributes_$to_string_given_rtde (rtdep, temp_atts, attribute_string, code);
		     if code ^= 0 then do;
			call com_err_ (code, "display_rtdt",
			     "Error displaying potential attributes for ^a", item_name);
			attribute_string = "";
		     end;

		     attribute_string = attribute_string || ";";

		     if attribute_string = ";" then
			call ioa_ ("^vxpotential_attributes: ;", indent);

		     else do i = 1 by 1 while (attribute_string ^= "");
			call ioa_ ("^[^vxpotential_attributes:^/^2-^vx^;^s^2-^vx  ^]^a", (i = 1),
			     indent, indent, knockoff_50_ch (attribute_string));
		     end;
		end;

		if struc.attributes_given then do;
		     temp_atts (1) = struc.attributes;
		     temp_atts (2) = ""b;
		     call cv_rcp_attributes_$to_string_given_rtde (rtdep, temp_atts, attribute_string, code);
		     if code ^= 0 then do;
			call com_err_ (code, "display_rtdt",
			     "Error displaying attributes for ^a", item_name);
			attribute_string = "";
		     end;

		     attribute_string = attribute_string || ";";

		     if attribute_string = ";" then
			call ioa_ ("^vxattributes: ;", indent);

		     else do i = 1 by 1 while (attribute_string ^= "");
			call ioa_ ("^[^vxattributes:^-^vx^;^s^2-^vx  ^]^a", (i = 1),
			     indent, indent, knockoff_50_ch (attribute_string));
		     end;
		end;

		if struc.charge_type_given then call ioa_ ("^vxcharge_type:^-^vx^a;",
		     indent, indent, charge_type_table.charge_types (struc.charge_type));

		if struc.aim_range_given then do;
		     code = 0;
		     if struc.aim_range (1) = SYSTEM_LOW then low_auth_string = "system_low";
		     else if struc.aim_range (1) = SYSTEM_HIGH then low_auth_string = "system_high";
		     else call convert_authorization_$to_string (struc.aim_range (1), low_auth_string, code);
		     if code ^= 0 then do;
			call com_err_ (code, "display_rtdt",
			     "While converting min access class of ^a.; assuming system_low.", item_name);
			low_auth_string = "system_low";
		     end;

		     if struc.aim_range (2) = SYSTEM_LOW then high_auth_string = "system_low";
		     else if struc.aim_range (2) = SYSTEM_HIGH then high_auth_string = "system_high";
		     else call convert_authorization_$to_string (struc.aim_range (2), high_auth_string, code);
		     if code ^= 0 then do;
			call com_err_ (code, "display_rtdt",
			     "While converting max access class of ^a; assuming system_high.", item_name);
			high_auth_string = "system_high";
		     end;

		     call ioa_ ("^vxaccess_range:^-^vx""^a : ^a"";", indent, indent, low_auth_string, high_auth_string);
		end;

		return;

	     end display_subtype;
	     
knockoff_50_ch: proc (string) returns (char (50) varying);

dcl  string char (512) varying parameter;

dcl  i fixed bin,
     temp char (50) varying;

		if length (string) <= 50 then do;
		     temp = string;
		     string = "";
		     return (temp);
		end;

		i = 51 - index (reverse (substr (string, 1, 50)), ",");
		temp = substr (string, 1, i);
		string = substr (string, i+1);

		return (temp);
	     end knockoff_50_ch;
	     
crump:	     proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

		call com_err_ (code, "display_rtdt", reason, dirname, ename);
		call clean_up;
		goto return_hard;
	     end crump;
	end;					/* end begin block */

return_hard:
	return;

     end display_rtdt;
