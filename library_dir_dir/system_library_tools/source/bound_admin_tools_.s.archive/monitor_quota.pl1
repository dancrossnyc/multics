/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


monitor_quota:
     proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

   Calculates  remaining  storage  of  a  directory  and  will
   send  a  warning  message at the approach of a record quota
   overflow   condition.

   Written by R. Holmstedt 07/09/81

   *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  all_flag init ("0"b) bit (1);
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  argno fixed bin;
dcl  call_flag init ("0"b) bit (1);
dcl  call_limit fixed bin (21) init (0);
dcl  command_line char (command_line_length) based (command_line_ptr); /* argument after -call */
dcl  command_line_length fixed bin;			/* length of command line */
dcl  command_line_ptr ptr;				/* pointer to command line argument */
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71),
     fixed bin (71), fixed bin (35));
dcl  code fixed bin (35);
dcl  console_flag init ("0"b) bit (1);
dcl  console_warn_limit fixed bin (21) init (0);
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl (error_table_$action_not_performed, error_table_$moderr, error_table_$noentry,
     error_table_$no_dir, error_table_$no_append, error_table_$messages_off,
     error_table_$inconsistent, error_table_$bad_arg) fixed bin (35) ext static;
dcl  false init ("0"b) bit (1) internal static options (constant);
dcl  hcs_$quota_read entry (char (*), fixed bin (18), fixed bin (71),
     bit (36) aligned, bit (36), fixed bin (1), fixed bin (18),
     fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  i fixed bin;
dcl  ioa_$rsnnl entry () options (variable);
dcl  linkage_error condition;
dcl  print_flag init ("0"b) bit (1);
dcl  message char (256) varying init ("");
dcl  message_id (10) char (50) init ((10) (1) "");
dcl  monitor_quota$main entry;
dcl  monitor_quota_init_switch init ("0"b) bit (1) int static;
dcl  monitor_quota_ptr ptr int static init (null);
dcl 01 monitor_list aligned based (monitor_quota_ptr),
    02 monitor_count fixed bin,
    02 monitor (0 refer (monitor_list.monitor_count)),
      03 time fixed bin (71),
      03 record_limit fixed bin (21),
      03 path_name char (168) varying,
      03 call_flag bit (1),
      03 call_limit fixed bin (21),
      03 console_flag bit (1),
      03 console_warn_limit fixed bin (21),
      03 warn_flag bit (1),
      03 warn_limit fixed bin (21),
      03 rpt_time fixed bin (71),
      03 rpt_flag bit (1),
      03 message_id (10) char (50),
      03 command_line_length fixed bin,
      03 command_line char (256);
dcl  nargs fixed bin;
dcl  off_flag init ("0"b) bit (1);
dcl  one_big_number fixed bin (71) init (377777777777777777777) internal static options (constant);
dcl  quota fixed bin (18);
dcl  record_limit fixed bin (21);
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  rpt_flag init ("0"b) bit (1);
dcl  rpt_time fixed bin (71);
dcl  path_flag init ("0"b) bit (1);
dcl  path_name char (168);
dcl  pathname char (168);
dcl  percent fixed bin (6, 3);
dcl  phcs_$ring_0_message entry (char (*));
dcl  prog_name char (13) internal static init ("monitor_quota");
dcl  send_mail_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  send_message_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  sons_lvid bit (36);
dcl  test_entry entry variable;
dcl  time_now fixed bin (71);
dcl  timer_manager_$alarm_call entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_alarm_call entry (entry);
dcl  true init ("1"b) bit (1) internal static options (constant);
dcl  trp fixed bin (71);
dcl  tup bit (36) aligned;
dcl  tacc_sw fixed bin (1);
dcl  used fixed bin (18);
dcl  warn char (256) varying;
dcl  warn_flag init ("0"b) bit (1);
dcl  warn_limit fixed bin (21) init (0);
dcl (after, before, convert, null, index, addr, substr, length, rtrim, clock, divide) builtin;
dcl  conversion condition;


/* ***********  S T A R T************* */

command_args:


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure will define the arguments used for     */
/* the command to process. Some checking is done on      */
/* arguments passed in as to valid characters	       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	on conversion goto num_error;

	call cu_$arg_count (nargs);

	do argno = 1 to nargs;


	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 then goto bad_arg;

arg_scan:	     if substr (arg, 1, 1) = "-" then do;

		if arg = "-pathname" | arg = "-pn" then do;
						/* directory to monitor	       */
		     if path_flag then goto dup_arg;
		     path_flag = true;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then goto bad_arg;
		     if substr (arg, 1, 1) = "-" then goto bad_arg;
		     pathname = rtrim (arg);
		     call absolute_pathname_ (pathname, path_name, code);
		     if code ^= 0 then goto bad_arg;
		end;

		else if arg = "-call" then do;
						/* a command line is to be executed if quota used exceeds limit */
		     if call_flag then go to dup_arg;
		     call_flag = true;
		     argno = argno + 1;

		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then goto bad_arg;
		     if substr (arg, 1, 1) = "-" then goto bad_arg;
		     command_line_length = length (arg);
		     command_line_ptr = addr (arg);
		     command_line = arg;
		     argno = argno + 1;		/* see if record count given */
		     if argno > nargs then goto EOL;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then goto bad_arg;
		     if substr (arg, 1, 1) = "-" then goto arg_scan;
		     call_limit = convert (call_limit, (arg));
		end;

		else if arg = "-console" then do;
						/* send warning to system console    */
		     if console_flag then goto dup_arg;
		     console_flag = true;
		     on linkage_error goto test_link_fail;
						/* this is how to test if the user has access or not, before making the call */
		     test_entry = phcs_$ring_0_message;
		     revert linkage_error;
		     argno = argno + 1;		/* see if record count given */
		     if argno > nargs then goto EOL;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then return;
		     if substr (arg, 1, 1) = "-" then goto arg_scan;
		     console_warn_limit = convert (console_warn_limit, (arg));
		end;

		else if arg = "-warn" then do;
						/* send warning to this person       */
		     if warn_flag then goto dup_arg;
		     warn_flag = true;
		     argno = argno + 1;		/* get the person_id.proj_id */
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then goto bad_arg;
		     if index (arg, ".") = 0 then go to bad_arg;
		     send_mail_info.version = send_mail_info_version_2;
		     send_mail_info.mbz1 = false;
		     send_mail_info.mbz = false;
		     send_mail_info.sent_from = "";
		     send_mail_info.wakeup = true;
		     send_mail_info.always_add = false;
		     send_mail_info.never_add = true;
		     send_mail_info.notify = false;
		     send_mail_info.acknowledge = false;
		     do i = 1 to 10 while (index (arg, ".") ^= 0);
			message_id (i) = arg;
			call send_mail_ (arg, "", addr (send_mail_info), code);
			if code ^= 0 then do;
			     if code ^= error_table_$messages_off then do;
				if code = error_table_$noentry | code = error_table_$no_dir then
				     warn = "No mailbox for "||arg;
				else if code = error_table_$no_append then
				     warn = "Insufficient access to add a message to "||arg||" mailbox";
				else warn = "Sending message to  "||arg;
				goto non_fatal_warn;
			     end;
			end;

			argno = argno + 1;		/* get the person_id.proj_id */
			if argno > nargs then goto EOL;
			call cu_$arg_ptr (argno, argp, argl, code);
			if code ^= 0 then goto bad_arg;
		     end;
		     if substr (arg, 1, 1) = "-" then goto arg_scan;
		     warn_limit = convert (call_limit, (arg));
		end;

		else if arg = "-off" then do;
		     if nargs ^= 1 then do;
			warn = "-off must not be given with any other arguments.";
			code = error_table_$inconsistent;
			goto non_fatal_warn;
		     end;

		     off_flag = true;
		end;

		else if arg = "-print" | arg = "-pr" then do;
		     if nargs ^= 1 then do;
			warn = "-print must not be given with any other arguments.";
			code = error_table_$inconsistent;
			goto non_fatal_warn;
		     end;

		     print_flag = true;
		end;

		else if arg = "-repeat" | arg = "-rpt" then do;
		     if rpt_flag then goto dup_arg;
		     rpt_flag = true;
		     argno = argno + 1;		/* get the repeat time */
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0 then goto bad_arg;
		     time_now = clock ();
		     if code ^= 0 then goto bad_arg;
		     call convert_date_to_binary_$relative (arg, rpt_time, time_now, code);
		     if code ^= 0 then goto bad_arg;
						/* now get the difference	       */
		     rpt_time = rpt_time - time_now;


		end;
		else goto bad_arg;
	     end;
	     else goto bad_arg;
	end;
EOL:						/* thats end of line	       */
	revert conversion;

	call set_up ();
	goto fini;


/* \014 */
set_up:	proc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

   This procedure will evaluate the command arguments and provide
   the defaults where needed.

   *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl date_time_ entry (fixed bin(71), char(*));
dcl  get_wdir_ entry () returns (char (168));
dcl  ioa_	entry() options(variable);
dcl  time_to_print char (24);
dcl  user_info_ entry (char (*), char (*), char (*));
dcl  user_name char (22);
dcl  user_proj char (9);
dcl  user_acct char (32);

	     if print_flag then do;	/* show user information on monitors */
		if monitor_quota_init_switch = false then do;
				/* nothing to monitor	       */
		     call ioa_ ("monitor_quota: There are no requests active.");
		     return;
		end;
		
		do i = 1 to monitor_list.monitor_count;
				/* go thru the list		       */

		     call date_time_ (monitor_list.monitor (i).time, time_to_print);
		     call ioa_ ("^/^d)  ^a^/next wakeup interval: ^a  ^/^[warn limit: ^d^;^s^]    ^[console warning limit: ^d^;^s^]    ^[call warning limit: ^d^;^s^]",
		     i,
		     monitor_list.monitor (i).path_name,
		     time_to_print,
		     monitor_list.monitor (i).warn_flag,
		     monitor_list.monitor (i).warn_limit,
		     monitor_list.monitor (i).console_flag,
		     monitor_list.monitor (i).console_warn_limit,
		     monitor_list.monitor (i).call_flag,
		     monitor_list.monitor (i).call_limit);
		end;
		return;
	     end;
	     

	     if off_flag then do;			/* stop all monitoring	       */
		if monitor_quota_init_switch = false then goto fini;
		else call cleanup;
		return;
	     end;


	     if ^path_flag then path_name = get_wdir_ ();
						/* if we don't have a directory get one */

	     call hcs_$quota_read ((path_name), quota, trp, tup, sons_lvid, tacc_sw, used, code);
	     if code ^= 0 then do;
		warn = "Error reading quota for " ||rtrim (path_name)||".";
		goto non_fatal_warn;
	     end;

/* figure out record limit to monitor       */
	     if warn_limit = 0 & console_warn_limit = 0 & quota = 0 & ^call_flag then do;

		code = error_table_$action_not_performed;
		warn = "The quota of "||rtrim (path_name)||" is 0, a record limit needs to be specified.";
		goto non_fatal_warn;
	     end;

	     if call_limit > quota | warn_limit > quota | console_warn_limit > quota then do;
		warn = "Record limit specified is larger than the quota in " ||rtrim (path_name)||".";
		code = error_table_$bad_arg;
		goto non_fatal_warn;
	     end;

	     if warn_limit = 0 & console_warn_limit = 0 then record_limit = quota * .80;
						/* set it to 80% of the dir. quota  */
	     else do;
		if console_warn_limit ^= 0 & warn_limit = 0 then record_limit = console_warn_limit;
		if warn_limit ^= 0 & console_warn_limit = 0 then record_limit = warn_limit;
		if console_warn_limit ^= 0 & warn_limit ^= 0 then do;
		     record_limit = console_warn_limit;
		     if warn_limit < record_limit then record_limit = warn_limit;
		end;
	     end;

	     if call_flag then do;

		if call_limit = 0 & quota = 0 then do;
		     code = error_table_$action_not_performed;
		     warn = "The quota of "||rtrim (path_name)||" is 0, a record limit needs to be specified.";
		     goto non_fatal_warn;
		end;

		if call_limit = 0 then call_limit = quota * .90;
						/* set it to 90% of the dir. if user didn't set it */
		if call_limit < record_limit then record_limit = call_limit;

	     end;

	     if ^rpt_flag then			/* figure out a good repeat time     */
		call repeat_calc (quota, used, rpt_time);


	     if ^warn_flag & ^console_flag & ^call_flag then do;

/* need to find somebody to tell */
		call user_info_ (user_name, user_proj, user_acct);
		message_id (1) = rtrim (user_name)||"."||rtrim (user_proj);
		warn_flag = true;
		warn_limit = record_limit;
	     end;


	     if monitor_quota_init_switch = false then do;
						/* set up static area to keep information about quota */
		call get_temp_segment_ (prog_name, monitor_quota_ptr, code);
		if code ^= 0 then do;
		     warn = "Error from get_temp_segments_.";
		     goto bummer;
		end;

		monitor_list.monitor_count = 0;
		monitor_quota_init_switch = true;
	     end;

	     monitor_list.monitor_count = monitor_list.monitor_count + 1;
						/* add another directory to be monitored */
	     monitor_list.monitor (monitor_count).record_limit = record_limit;
	     monitor_list.monitor (monitor_count).path_name = rtrim (path_name);
	     monitor_list.monitor (monitor_count).call_flag = call_flag;
	     monitor_list.monitor (monitor_count).call_limit = call_limit;
	     monitor_list.monitor (monitor_count).console_flag = console_flag;
	     monitor_list.monitor (monitor_count).console_warn_limit = console_warn_limit;
	     monitor_list.monitor (monitor_count).rpt_time = rpt_time;
	     monitor_list.monitor (monitor_count).rpt_flag = rpt_flag;
	     monitor_list.monitor (monitor_count).warn_flag = warn_flag;
	     monitor_list.monitor (monitor_count).warn_limit = warn_limit;
	     monitor_list.monitor (monitor_count).time = time_now + monitor_list.monitor (monitor_count).rpt_time;

	     if call_flag then do;
		monitor_list.monitor (monitor_count).command_line_length = command_line_length;
		monitor_list.monitor (monitor_count).command_line = command_line;
	     end;
	     else do;
		monitor_list.monitor (monitor_count).command_line_length = 0;
		monitor_list.monitor (monitor_count).command_line = "";
	     end;

	     do i = 1 to 10;
		monitor_list.monitor (monitor_count).message_id (i) = message_id (i);
	     end;

	     if record_limit < used then		/* quota problem already! */
		call convert_date_to_binary_ ("", monitor_list.monitor (monitor_count).time, code);
						/* will look like it matured	       */


	     call main ();
	     return;
	end set_up;
						/* \014 */
repeat_calc: proc (dir_quota, dir_used, repeat);
dcl  dir_quota fixed bin (18);
dcl  dir_used fixed bin (18);
dcl  repeat fixed bin (71);
dcl  percent fixed bin (6, 3);
dcl  time_value char (5) varying;

	     percent = divide ((dir_used * 100), dir_quota, 5, 0) ;

	     if percent < 50 then time_value = "30min";
	     else if percent < 60 then time_value = "20min";
	     else if percent < 70 then time_value = "10min";
	     else if percent < 80 then time_value = "5min";
	     else if percent > 90 then time_value = "1min";
	     else time_value = "2min";

	     time_now = clock ();
	     call convert_date_to_binary_$relative ((time_value), repeat, time_now, code);
	     if code ^= 0 then do;
		warn = "Error on calculation of repeat value "||time_value||".";
		goto bummer;
	     end;
						/* now get the difference	       */
	     repeat = repeat - time_now;

	     return;
	end repeat_calc;
						/* \014 */
main:	entry;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

   This entry scans the monitor_list when the alarm timer
   calls into this entry. The next alarm time is calculated
   for all entrys and  the smallest time is selected for
   the next alarm.
   *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


dcl  alarm_time fixed bin (71);
dcl  j fixed bin;



	alarm_time = one_big_number;
						/* need a starting point to compair */
	call timer_manager_$reset_alarm_call (monitor_quota$main);
	time_now = clock ();			/* get the time now		       */



	do i = 1 to monitor_list.monitor_count;
	     if monitor_list.monitor (i).time < time_now then do;
						/* time to check		       */

		call hcs_$quota_read ((monitor_list.monitor (i).path_name),
		     quota, trp, tup, sons_lvid, tacc_sw, used, code);
		if code ^= 0 then do;
		     warn = "Error reading quota for " ||monitor_list.monitor (i).path_name||".";
		     goto bummer;
		end;

		if quota = 0 then do;    /* this will check if directory quota was changed to 0*/
		     if monitor_list.monitor_count > 1 then monitor_list.monitor (i).time = one_big_number;
						/* this should stop monitoring for this only */
		     code = error_table_$action_not_performed;
		     warn = "The quota for " ||monitor_list.monitor (i).path_name ||" has been changed to zero.";
		     goto non_fatal_warn;
		end;

		if used < monitor_list.monitor (i).record_limit then do;
						/* nothing to worry about 	       */

		     if ^monitor_list.monitor (monitor_count).rpt_flag then
			call repeat_calc (quota, used, monitor_list.monitor (i).rpt_time);

		     monitor_list.monitor (i).time = time_now + monitor_list.monitor (i).rpt_time;
		     if monitor_list.monitor (i).time < alarm_time then
			alarm_time = monitor_list.monitor (i).time;
						/* set wakeup time to lowest time needed */

		end;

		else do;				/* we used more then the limit       */
		     if monitor_list.monitor (i).console_flag then do;
			if monitor_list.monitor (i).console_warn_limit <= used then do;
			     percent = divide ((used * 100), quota, 5, 0) ;
			     message = "";
			     call ioa_$rsnnl ("^a: Storage in ^a is ^d% full.",
				message, (0), prog_name, (monitor_list.monitor (i).path_name), percent);
						/* error message		       */


			     on linkage_error go to call_1_failed;

			     call phcs_$ring_0_message ((message));
			     revert linkage_error;	/* It worked */
			end;
		     end;

		     if monitor_list.monitor (i).warn_flag then do;
			if monitor_list.monitor (i).warn_limit <= used then do;
						/* check to be sure, may only have call limit or console limit */
			     percent = divide ((used * 100), quota, 5, 0) ;
			     message = "";
			     call ioa_$rsnnl ("^a: Storage in ^a is ^d% full.",
				message, (0), prog_name, (monitor_list.monitor (i).path_name), percent);
			     do j = 1 to 10 while (monitor_list.monitor (i).message_id (j) ^= "");
				call send_message_ ((before (monitor_list.monitor (i).message_id (j), ".")),
				     (after (monitor_list.monitor (i).message_id (j), ".")),
				     (message), code);
				if code ^= 0 then
				     call com_err_ (code, prog_name,
				     "Error sending warning to ^a ^/Quota limit reached in ^a. Monitoring will continue.",
				     monitor_list.monitor (i).message_id (j), monitor_list.monitor (i).path_name);
						/* tell someone		       */
			     end;
			end;

		     end;


		     if monitor_list.monitor (i).call_flag then do;
			if monitor_list.monitor (i).call_limit <= used then do;
			     call cu_$cp (addr (monitor_list.monitor (i).command_line),
				length (monitor_list.monitor (i).command_line), code);
			     if code ^= 0 then do;
				warn = "Error calling "||rtrim (monitor_list.monitor (i).command_line)|| ".";
				goto non_fatal_warn;
			     end;
			end;
		     end;
		     if ^monitor_list.monitor (monitor_count).rpt_flag then
			call repeat_calc (quota, used, monitor_list.monitor (i).rpt_time);

		     monitor_list.monitor (i).time = monitor_list.monitor (i).time + monitor_list.monitor (i).rpt_time;

		     if monitor_list.monitor (i).time < alarm_time then
			alarm_time = monitor_list.monitor (i).time;
						/* set wakeup time to lowest time needed */


		end;				/* end of quota problem	       */

	     end;

	     else if monitor_list.monitor (i).time < alarm_time then alarm_time = monitor_list.monitor (i).time;
	end;
						/* set to the next wake up	       */

	call timer_manager_$alarm_call ((alarm_time), "00"b, monitor_quota$main);
	return;






/* \014 */
test_link_fail:
	revert linkage_error;
	code = error_table_$moderr;
	warn = "Access required to phcs_ to send warning to system console.";
	goto non_fatal_warn;
call_1_failed:
	revert linkage_error;
	if monitor_list.monitor_count > 1 then monitor_list.monitor (i).time = one_big_number;
						/* this should stop monitoring for this only */
	code = error_table_$moderr;
	warn = "Access required to phcs_ to send warning to system console.";
	goto non_fatal_warn;
non_fatal_warn:					/* don't delete the other monitor entries */
	if monitor_quota_ptr ^= null then do;
	     if monitor_list.monitor_count >1 then do;
		call com_err_ (code, prog_name, "^/^a", warn);
		return;
	     end;
	end;
	goto bummer;
						/* cleanup and go away	       */

num_error:
	revert conversion;

bad_arg:
	code = error_table_$bad_arg;
	warn = arg;
	call com_err_ (code, prog_name, "^a", warn);
	return;


dup_arg:
	code = error_table_$inconsistent;
	warn = arg || " appears twice on the command line.";
	goto non_fatal_warn;
bummer:
	call com_err_ (code, prog_name, "^/^a", warn);
	call cleanup;
	return;

cleanup:	proc;
	     call timer_manager_$reset_alarm_call (monitor_quota$main);
	     if monitor_quota_init_switch ^= false then do;
		call release_temp_segment_ (prog_name, monitor_quota_ptr, code);
		monitor_quota_init_switch = false;
	     end;
	     return;
	end;
fini:
	return;
%include send_mail_info;
     end monitor_quota;
