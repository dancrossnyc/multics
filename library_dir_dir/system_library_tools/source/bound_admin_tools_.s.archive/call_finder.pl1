/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


call_finder: proc;

/* Finds all calls to entries with a given segment name

   Written by:	Richard A. Barnes 24 January 1974	*/

/*  Modified on 4 June 1975 by J. C. Whitmore to attempt use of system privilege initiate */

/*  Modified 11/10/82 by R. Holmstedt to use the new object_info include file */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */


dcl (alen, i, nargs, nentry, ncompilers, total) fixed bin;
dcl (aptr, sptr) ptr;
dcl (all, added_access) bit (1) aligned;

dcl  root char (168) aligned init (">");
dcl  dir char (168);				/* full directory name */
dcl  ename char (32);				/* entry name */
dcl  target char (32) aligned;

dcl 1 entry (256),
    2 name char (65),
    2 refs fixed bin;

dcl 1 compiler_table (32),
    2 cname char (8),
    2 segs fixed bin,
    2 uses fixed bin;

dcl  arg char (alen) based (aptr);

dcl  have_priv bit (1) int static init ("1"b);		/* assume we have privileges for now */
dcl  code fixed bin (35);
dcl  me char (11) int static init ("call_finder");
dcl  nl char (1) int static init ("
");
dcl  ftotal float bin;
dcl  total_object_segs fixed bin init (0);
dcl  total_segs_with_call fixed bin init (0);

dcl 1 segment_acl aligned,
    2 access_name char (32),
    2 modes bit (36) init ("1"b),			/* r */
    2 zero_pad bit (36) init ("0"b),
    2 status_code fixed bin (35);

dcl 1 delete_acl aligned,
    2 access_name char (32),
    2 status_code fixed bin (35);

dcl  error_table_$moderr fixed bin (35) ext;

dcl  cleanup condition;

dcl (addr, addrel, divide, fixed, float, hbound, index, ltrim, null, rtrim, substr) builtin;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_group_id_ entry () returns (char (32) aligned);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  system_privilege_$initiate_count entry
	(char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  interpret_link_ entry (ptr, ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ios_$write_ptr entry (ptr, fixed bin, fixed bin (7));
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  sweep_disk_ entry (char (168) aligned, entry);



	all = "0"b;
	nentry, ncompilers = 0;
	call cu_$arg_count (nargs);

/* get name of target */

	call cu_$arg_ptr (1, aptr, alen, code);

	if code ^= 0
	then do;
err:	     call com_err_ (code, me,
		"^/Usage: call_finder entry {-all, path}, ^/^-The root is default starting node for path.");
	     return;
	end;
	if substr (arg, 1, 1) = "-" then goto err;
	target = arg;

/* get other 2 args */
	if nargs > 3 then goto err;
	do i = 2 to nargs;
	     call cu_$arg_ptr (i, aptr, alen, code);

	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-all" | arg = "-a" then do;
		     if all = "1"b then goto err;
				/* if all true then second time thru */
		     all = "1"b;
		end;
		else goto err;
	     end;

	     else do;
		call expand_path_ (aptr, alen, addr (root), null, code);
		if code ^= 0 then go to err;
	     end;
	end;

/* Now call the sweeper program */

	segment_acl.access_name,
	     delete_acl.access_name = get_group_id_ ();
	sptr = null;
	added_access = "0"b;
	on condition (cleanup) call clean_up;

	call sweep_disk_ (root, counter);

/* now print out totals */

sum:	total = 0;
	do i = 1 to nentry;
	     total = total + refs (i);
	end;

	ftotal = total;

	call ioa_ ("^/^d total object segments searched^/^d segments call ^a with ^d calls^/",
	     total_object_segs, total_segs_with_call, target, total);

	do i = 1 to nentry;
	     call ioa_ ("^a^65t^4d^70t^7.2f%", name (i), refs (i), 100.0 * (float (refs (i))/ftotal));
	end;

	call ioa_ ("");
	do i = 1 to ncompilers;
	     call ioa_ ("^8a^8d^10d", compiler_table (i).cname, compiler_table (i).segs, compiler_table (i).uses);
	end;
	return;
	
counter:	proc (superior, parent, levels, pename, bptr, nptr);

dcl  superior char (168) aligned,			/* superior directory path */
     parent char (32) aligned,			/* parent directory name */
     levels fixed bin,				/* distance from root */
     pename char (32) aligned,			/* entry name */
     bptr ptr,					/* ptr to branch structure */
     nptr ptr;					/* ptr to names area */

dcl (i, j, n) fixed bin;
dcl (lptr, liptr) ptr;
dcl  reference char (68) varying aligned;
dcl  nbits fixed bin (24);
dcl (first, firstlink) bit (1) aligned;
dcl  code fixed bin (35);
dcl  line char (80);
dcl  written fixed bin (7);

dcl  segment_type bit (2) int static init ("01"b);

dcl 1 branch based aligned,
    2 type bit (2) unal,
    2 nnames bit (16) unal,
    2 nindex bit (18) unal;

dcl 1 link_header based aligned,
    2 object_seg fixed bin,
    2 def_section bit (18) unal,
    2 first_reference bit (18) unal,
    2 section_thread ptr,
    2 linkage_ptr ptr,
    2 begin_links bit (18) unal,
    2 section_length bit (18) unal,
    2 obj_seg bit (18) unal,
    2 combined_length bit (18) unal;

dcl 1 linkword based aligned,
    2 pad bit (30) unal,
    2 ft2 bit (6) unal;

dcl 1 auto_interpret_link_info aligned like interpret_link_info;

dcl (no_read_permission, not_in_read_bracket, seg_fault_error, program_interrupt, record_quota_overflow,
     linkage_error) condition;

dcl  length builtin;

%include object_info;

dcl  1 obj_info like object_info;


%include interpret_link_info;
%page;
/* first, see if we could have an object segment */
               obj_info.version_number = object_info_version_2;
	     if bptr -> branch.type ^= segment_type then return;

	     ename = pename;
	     if index (ename, ".") ^= 0 then return;
	     if substr (ename, 1, 1) = "!" then return;

/* we might have one, so let's initiate it */

	     if superior ^= ""
	     then dir = rtrim (superior) || ">" || parent;
	     else dir = parent;

	     on linkage_error begin;
		have_priv = "0"b;
		go to init_seg;
	     end;

init_seg:

	     if have_priv
	     then call system_privilege_$initiate_count (dir, ename, "", nbits, 1, sptr, code);
	     else call hcs_$initiate_count (dir, ename, "", nbits, 1, sptr, code);

	     revert linkage_error;			/* we have the privilege we need */

	     if sptr = null
	     then if code = error_table_$moderr
		then do;
		     call hcs_$add_acl_entries (dir, ename, addr (segment_acl), 1, code);
		     if code ^= 0 then return;
		     added_access = "1"b;
		     if have_priv
		     then call system_privilege_$initiate_count (dir, ename, "", nbits, 1, sptr, code);
		     else call hcs_$initiate_count (dir, ename, "", nbits, 1, sptr, code);
		     if sptr = null then go to finish;
		end;
		else return;

/* prepare for somebody's interfering with us */

	     on condition (cleanup) call clean_up;
	     on condition (record_quota_overflow) go to finish;
	     on condition (program_interrupt) go to finish;
	     on condition (seg_fault_error) go to finish;
	     on condition (no_read_permission) go to finish;
	     on condition (not_in_read_bracket) go to finish;

/* object_info_ will tell us about the object segment */

	     call object_info_$display (sptr, nbits, addr (obj_info), code);
	     if code ^= 0 then go to finish;

	     total_object_segs = total_object_segs + 1;

/* record count of compiler names. */

	     do j = 1 to ncompilers while (compiler_table (j).cname ^= obj_info.compiler);
	     end;
	     if j <= ncompilers then compiler_table (j).segs = compiler_table (j).segs + 1;
	     else if j <= hbound (compiler_table, 1) then do;
		ncompilers = j;
		compiler_table (j).cname = obj_info.compiler;
		compiler_table (j).segs = 1;
		compiler_table (j).uses = 0;
	     end;
	     else do;
		call com_err_ (0, me, "compiler table full");
		call clean_up;
		go to sum;
	     end;

/* now, we have to look at the links */

	     first, firstlink = "1"b;
	     lptr = addrel (obj_info.linkp, obj_info.linkp -> link_header.begin_links);
	     n = divide (obj_info.llng - fixed (obj_info.linkp -> link_header.begin_links, 18), 2, 17, 0);


	     do i = 1 to n;
		if lptr -> linkword.ft2 = "100110"b	/* fault 2 tag */
		then do;

/* we have a link, see if it points at target seg */

		     auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

		     call interpret_link_ (addr (auto_interpret_link_info), lptr, code);
		     if code ^= 0 then go to finish;

		     if auto_interpret_link_info.segment_name = target
		     then do;

/* PAYDIRT! */

			if firstlink then do;
			     firstlink = "0"b;
			     total_segs_with_call = total_segs_with_call + 1;
			     compiler_table (j).uses = compiler_table (j).uses + 1;
			end;

			reference = rtrim (auto_interpret_link_info.segment_name) ||
			     rtrim (auto_interpret_link_info.entry_point_name) || " ";

/* put entry into table */

			do j = 1 to nentry while (entry (j).name ^= reference);
			end;

			if j <= nentry
			then entry (j).refs = entry (j).refs + 1;
			else if j <= hbound (entry, 1)
			then do;
			     nentry = j;
			     entry (j).name = reference;
			     entry (j).refs = 1;
			end;
			else do;
			     call com_err_ (0, me, "table_overflow");
			     call clean_up;
			     go to sum;
			end;

/* print out information */

			if all then do;
			     if first then do;
				call ioa_ ("^/>^a>^a (^a)", ltrim(dir,">"), ename, obj_info.compiler);
				first = "0"b;
				line = " ";
				written = 1;
			     end;

			     if length (reference) + written >= length (line)
			     then call write;

			     substr (line, written+1, length (reference)) = reference;
			     written = written + length (reference);
			end;
		     end;
		end;

		lptr = addrel (lptr, 2);
	     end;

/* write list line */

	     if ^ first then call write;

/* CLEAN UP! */

clean_up:	     entry;

finish:
	     if sptr ^= null
	     then do;
		call hcs_$terminate_noname (sptr, code);
		sptr = null;
	     end;

	     if added_access
	     then do;
		call hcs_$delete_acl_entries (dir, ename, addr (delete_acl), 1, code);
		added_access = "0"b;
	     end;

	     return;


write:	     proc;

		written = written + 1;
		substr (line, written, 1) = nl;
		call ios_$write_ptr (addr (line), 0, written);
		written = 1;

	     end;

	end;

     end;
