/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* RESET_CDT_METERS - Program to reset the meters kept by dialup_ in
   the header of the Channel Definition Table, and in each CDTE.

   Written 750818 by PG
   cleanup handler added by F.W. Martinson June 1982
*/

reset_cdt_meters:
     procedure;

/* entries */

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     com_err_ entry options (variable),
     expand_path_ entry (ptr, fixed bin (21), ptr, ptr, fixed bin (35)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

/* automatic */

dcl  arg_len fixed bin (21),
     arg_ptr ptr,
     cdtex fixed bin,
     code fixed bin (35),
     dname char (168),
     ename char (32),
     now fixed bin (71);

/* internal static initial */

dcl  my_name char (16) internal static initial ("reset_cdt_meters");

/* based */

dcl  arg_string char (arg_len) based (arg_ptr);

/* builtins */

dcl (addr, clock, null) builtin;

/* conditions */

dcl cleanup condition;

/* include files */

%include author_dcl;
%include cdt;
%include dialup_values;

/* program */

	cdtp = null;
          on cleanup call clean_up;
	dname = ">system_control_1";
	ename = "cdt";

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code = 0 then do;
	     call expand_path_ (arg_ptr, arg_len, addr (dname), addr (ename), code);
	     if code ^= 0 then do;
		call com_err_ (code, my_name, "^a", arg_string);
		return;
	     end;
	end;

	call hcs_$initiate (dname, ename, "", 0, 1, cdtp, code);
	if cdtp = null then do;
	     call com_err_ (code, my_name, "^a>^a", dname, ename);
	     return;
	end;

	cdt.realtime_in_dialup = 0;
	cdt.cpu_in_dialup = 0;
	cdt.pf_in_dialup = 0;
	cdt.pp_in_dialup = 0;
	cdt.entries_to_dialup = 0;
	now = clock ();
	cdt.meters_last_reset = now;

	do cdtex = 1 to cdt.current_size;
	     cdtep = addr (cdt.cdt_entry (cdtex));

	     cdte.n_dialups = 0;
	     cdte.n_logins = 0;
	     cdte.dialed_up_time = 0;
	     if cdte.in_use < NOW_DIALED then
		cdte.dialup_time = 0;
	     else cdte.dialup_time = now;
	end;
          call clean_up;
          return;

clean_up: proc;
          if cdtp ^= null then
	call hcs_$terminate_noname (cdtp, code);
	return;

     end clean_up;
     end reset_cdt_meters;
