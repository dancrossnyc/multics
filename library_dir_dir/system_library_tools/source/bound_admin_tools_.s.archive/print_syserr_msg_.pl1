/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to print a syserr message */

/* Coded November 1975 by Larry Johnson */
/* Modified January 1976 by Larry Johnson */
/* Modified October 1976 by Larry Johnson for new hardware fault messages. */
/* Modified November 1979 by Larry Johnson for detailed device status */
/* Modified June 1982 by E. N. Kittlitz to handle (i.e. do nothing for) config deck. */
/* Modified May 1983 by E. N. Kittlitz to print config decks nicely. (There! that wasn't so hard, was it?) */

/* format: style4 */
print_syserr_msg_: proc (argp, code);


dcl  code fixed bin (35);				/* Status code */
dcl  (ctp, ptp) ptr;				/* Pointers to times */
dcl  cur_time char (24);				/* Current time from date_time_ */
dcl  seq_edit picture "zzzzzzzzzzz9";			/* To edit sequence number field */
dcl  seq_sz fixed bin;				/* Number of chars in sequence number  */
dcl  tpos fixed bin;				/* Current position while scanning text */
dcl  (i, j) fixed bin;
dcl  tlen fixed bin;				/* Length of portion of text being checked */
dcl  room fixed bin;				/* Number of characters on line available for text */
dcl  start fixed bin;				/* Starting position for characters */
dcl  line_length fixed bin;				/* Length of line */
dcl  moved fixed bin (21);				/* Number of characters moved into line */
dcl  fl bit (1) init ("1"b);				/* Set while 1st line is edited */
dcl  line char (1024);				/* Print line is built here */
dcl  aline (1024) char (1) based (addr (line));		/* Another way of addressing line */
dcl  next fixed bin;				/* Next character position available on line */
dcl  restl fixed bin;				/* Length of rest of line */
dcl  restp ptr;					/* Pointer to rest of line */
dcl  rest char (restl) based (restp);			/* Rest of the line */
dcl  arrayl fixed bin;				/* Length of portion of array */
dcl  arrayp ptr;					/* Pointer to portion of array */
dcl  based_array (arrayl) bit (36) aligned based (arrayp);	/* Portion of array */
dcl  work char (1024) var;				/* A temp string */
dcl  work2 char (128) var;				/* Another */
dcl  code_edit picture "zzz9";			/* To edit the action code */
dcl  bin_mode bit (1) init ("0"b);			/* Set while editing the binary part of message */
dcl  first_bin bit (1) init ("0"b);			/* Set until 1st line of binary data printed */
dcl  hold_moved fixed bin;				/* Used during binary editing to save text length */
dcl  nwords fixed bin;				/* Number of words of binary data */
dcl  wordp ptr;					/* Pointer to binary data */
dcl  words (nwords) based (wordp);

dcl  1 tm based,					/* Structure that overlays time from date_time_ */
       2 date char (8) unal,				/* MM/DD/YY */
       2 fill1 char (2) unal,
       2 time char (6) unal,				/* HHMM.T */
       2 fill2 char (1) unal,
       2 zone char (3) unal,				/* ZZZ - time zone */
       2 fill3 char (1) unal,
       2 day char (3) unal;				/* DDD - day of week */

dcl  1 dtl,					/* Date line printed when day changes */
       2 nl1 char (1) unal,				/* A newline */
       2 day char (3) unal,				/* The day of the week */
       2 bl1 char (2) unal,				/* "  " */
       2 date char (8) unal,				/* MM/DD/YY */
       2 bl2 char (2) unal,				/* " (" */
       2 zone char (3) unal,				/* The time zone */
       2 bl3 char (1) unal,				/* ")" */
       2 nl2 char (1) unal;				/* A newline */


dcl  newline char (1) int static init ("
");						/* A new line character */

%include print_syserr_msg_args;

dcl  text_data char (parg.textl) based (parg.textp);	/* Text from param list */
dcl  print_data char (parg.printl) based (parg.printp);

dcl  date_time_ entry (fixed bin (71), char (*));
dcl  ioa_$rsnpnnl entry options (variable);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));

dcl  com_err_ entry options (variable);

dcl  error_table_$smallarg ext fixed bin (35);

dcl  (addr, addrel, bin, divide, index, hbound, length, max, min, reverse, rtrim, string, substr, verify) builtin;

%include syserr_message;
%include mc;

/* Get time of message */

	syserr_msgp = parg.msgp;			/* Get pointer to message */

	call date_time_ ((syserr_msg.time), cur_time);
	ctp = addr (cur_time);			/* Get pointers to time structures */
	ptp = addr (parg.prev_time);
	if ctp -> tm.date ^= ptp -> tm.date then do;	/* If date change */
	     dtl.nl1, dtl.nl2 = newline;		/* Fill in line to print */
	     dtl.day = ctp -> tm.day;
	     dtl.bl1 = "  ";
	     dtl.date = ctp -> tm.date;
	     dtl.bl2 = " (";
	     dtl.zone = ctp -> tm.zone;
	     dtl.bl3 = ")";
	     call iox_$put_chars (iocbp, addr (dtl), length (string (dtl)), code);
	     if code ^= 0 then return;		/* If put_chars error */
	end;
	parg.prev_time = cur_time;			/* Remember for next call */


/* Determine how much space is on line for text */

	line = "";				/* Clear line */
	moved = 0;				/* No characters in it */
	seq_edit = syserr_msg.seq_num;		/* Edit the sequence number */
	seq_sz = max (6, 13 - verify (seq_edit, " "));	/* Characters in edited number with leading spaces removed */
	start = seq_sz + 12;			/* Starting column for text */
	line_length = min (parg.linelen, length (line) - 1);
	room = line_length - start + 1;		/* Characters available in text portion of line */
	if room <= 25 then do;			/* If too small */
	     code = error_table_$smallarg;
	     return;
	end;

	tpos = 1;					/* Start with first character */


/* This routine edits the line. If it is too long, or contains newline, it will be
   broken into several lines */

top:	if tpos > length (print_data) then go to done;	/* Done if finished line */


	i = index (substr (print_data, tpos), newline);
						/* Check for newline */
	if i = 0 then				/* No newline in remaining text */
	     tlen = length (print_data) - tpos + 1;	/* Length to consider is rest of line */
	else if i = 1 then do;			/* If newline is first */
	     tpos = tpos + 1;			/* Skip over it */
	     go to top;
	end;
	else tlen = i - 1;				/* Consider just stuff before newline */

	i = verify (substr (print_data, tpos, tlen), " ");/* Count leading blanks */
	if i = 0 then do;				/* Line is all blank */
	     tpos = tpos + tlen;			/* Skip it all */
	     go to top;
	end;
	if i > 1 then do;				/* Some leading blanks */
	     tpos = tpos + i - 1;			/* Skip them */
	     tlen = tlen - i + 1;			/* Adjust count */
	end;

	if moved ^= 0 then call put;			/* If stuff already on line, dump it */

	if tlen <= room then do;			/* If it all fits */
	     substr (line, start, tlen) = substr (print_data, tpos, tlen); /* Copy it all */
	     moved = tlen;				/* Remember how much */
	     tpos = tpos + tlen;
	end;
	else do;
	     i = index (reverse (substr (print_data, tpos + room - 20, 20)), " ");
						/* Check last 20 characters that fit for a blank */

	     if i = 0 then do;			/* If no blank, break is arbitrary */
		substr (line, start, room) = substr (print_data, tpos, room); /* Fill line */
		moved = room;			/* Remember how much */
		tpos = tpos + room;			/* Skip over what moved */
	     end;
	     else do;				/* Be neat and break on blank */
		tlen = room - i;			/* Length to copy */
		substr (line, start, tlen) = substr (print_data, tpos, tlen); /* Do it */
		moved = tlen;			/* Remember how much */
		tpos = tpos + tlen + 1;		/* Skip over stuff copied, + blank */
	     end;
	end;
	go to top;				/* Back for more */

done:	if parg.bin_sw then if syserr_msg.data_size > 0 then call edit_binary;

	if fl | moved ^= 0 then call put;		/* Write last line */

	code = 0;

finish:	return;

/* Procedure to print 1 line */

put: proc;

	if fl then do;				/* If first line */
	     substr (line, 1, 6) = ctp -> tm.time;	/* Move in time */
	     substr (line, 8, seq_sz) = substr (seq_edit, 13 - seq_sz); /* And sequence number */
	     code_edit = syserr_msg.code;		/* Edit the action code */
	     substr (line, seq_sz + 8, 3) = substr (code_edit, 2, 3); /* Move into line */
	     fl = "0"b;				/* Only do this once */
	end;

	if first_bin then do;			/* If first line of binary data */
	     first_bin = "0"b;
	     if (hold_moved > 0) & (hold_moved ^= moved) then
		moved = moved + 2;			/* This accounts for the 2 spaces between text and data
						   when they both appear on the same line */
	end;
	moved = moved + start;			/* Total length */
	substr (line, moved, 1) = newline;		/* Put new line at end */
	call iox_$put_chars (iocbp, addr (line), moved, code);
	if code ^= 0 then go to finish;
	line = "";				/* Initialize for next line */
	moved = 0;
	if bin_mode then do;			/* Binary editors need extra stuff */
	     restp = addr (aline (start));
	     restl = room;
	end;
	return;

     end put;

/* Procedure to edit binary data */

edit_binary: proc;

dcl  s fixed bin;
dcl  i fixed bin;
dcl  tbuf char (260);

%include syserr_binary_def;

dcl  binary_segmsg_util_ entry (ptr) returns (char (250));
dcl  binary_segmsg_util_$interpret_pvname entry (ptr) returns (char (32));

dcl  special_chars (15) char (32) var int static options (constant) init (/* Table of special messages */
	"ioi_interrupt: I/O error.",
	"op-not-complete fault by ",
	"startup fault by ",
	"shutdown fault by ",
	"parity fault by ",
	"mos_memory_check: EDAC error",
	"cache dir parity fault on",
	"cache store parity fault on",
	"cache store thru parity fault on",
	"cache load parity fault on",
	"parity fault on",
	"startup fault on",
	"shutdown fault on",
	"op_not_complete fault on",
	"command fault on");


	if moved = 0 then next = start;		/* Line empty */
	else next = start + moved + 2;		/* Next available column */
	hold_moved = moved;				/* Save text length */
	bin_mode = "1"b;				/* In binary mode now */
	first_bin = "1"b;				/* Editing first line */
	restp = addr (aline (next));			/* Address of rest of line */
	restl = line_length - next + 1;		/* Length of rest of line */

	if octal_sw then do;			/* Do simple dump */
	     call edit_std;
	     return;
	end;


	if syserr_msg.data_code ^= 0 then do;
	     s = syserr_msg.data_code;
	     if s = SB_mos_err then call edit_mos_memory;
	     else if s = SB_io_err then call edit_ioi;
	     else if s = SB_io_err_detail then call edit_ioi_detail;
	     else if s = SB_ocdcm_err then call edit_ioi;
	     else if s = SB_hw_fault then go to scan;
	     else if s = SB_verify_lock then call edit_fault;
	     else if s = SB_config_deck then call edit_config;
	     else if s < 0 | s > SB_end_of_table then ;
	     else if substr (syserr_binary_seg_damage_mask, s, 1) then do;
		tbuf = "Segment: " || binary_segmsg_util_ (addr (syserr_msg.data));
		go to out_tbuf;
	     end;
	     else if substr (syserr_binary_vol_damage_mask, s, 1) then do;
		tbuf = "Volume: " || binary_segmsg_util_$interpret_pvname (addr (syserr_msg.data));
out_tbuf:		i = length (rtrim (tbuf));
		if i > restl then call put;
		moved = min (i, length (line));
		rest = tbuf;
		call put;
		return;
	     end;
	     else call edit_std;

	     return;
	end;

scan:
	do i = 1 to hbound (special_chars, 1);		/* Scan table of names */
	     if length (text_data) >= length (special_chars (i)) then
		if index (text_data, special_chars (i)) ^= 0 then
		     go to make_call;
	end;

	call edit_std;				/* Use a standard routine */
	return;

make_call: go to c (i);				/* Branch to appropriate call */
c (1):	call edit_ioi;				/* Ioi error */
	return;
c (2):	call edit_old_onc;				/* Op-not-complete fault */
	return;
c (3):	call edit_old_startup;			/* Startup fault */
	return;
c (4):	call edit_old_startup;			/* Shutdown fault */
	return;
c (5):	call edit_old_parity;			/* Parity fault */
	return;
c (6):	call edit_mos_memory;			/* Mos memory EDAC error */
	return;
c (7):						/* Cache dir parity fault */
c (8):						/* Cache store parity fault */
c (9):						/* Cache store thru parity fault */
c (10):						/* Cache load parity fault */
c (11):						/* Parity fault */
c (12):						/* Startup fault */
c (13):						/* Shutdown fault */
c (14):						/* Op not complete fault */
c (15):						/* Command fault */
	call edit_fault;
	return;

     end edit_binary;

/* Procedure to edit unidentified binary data */

edit_std: proc;

	nwords = syserr_msg.data_size;
	wordp = addr (syserr_msg.data);
	call edit_words;
	return;
     end edit_std;


/* Procedure that edits any random words */
/* It will be put on the current line if it fits, otherwise on succeeding lines
   with some power of 2 words per line */

edit_words: proc;

	i = 13 * nwords - 1;			/* Space needed for all words */
	if i <= restl then do;			/* It fits */
all_fits:	     call ioa_$rsnpnnl ("^(^w ^)", rest, (0), words); /* Edit it */
	     moved = moved + i;
	     call put;
	     return;
	end;

	if moved > 0 then call put;			/* Dump current line */
	if i <= restl then go to all_fits;		/* Fits on one line now */

/* Determine number of words to print per line */

	i, j = 1;
	do while (j <= room);
	     i = 2 * i;				/* A power of 2 */
	     j = 13 * i - 1;			/* Space for that many words */
	end;
	i = divide (i, 2, 17, 0);			/* Last power of two that fit */

	do j = 1 by i while (j <= nwords);		/* Loop to print the lines */
	     arrayp = addr (words (j));		/* Addr of current piece */
	     arrayl = min (i, nwords - j + 1);
	     call ioa_$rsnpnnl ("^(^w ^)", rest, moved, based_array);
	     call put;
	end;

	return;

     end edit_words;

/* Procedure to edit a config deck fragment */

edit_config: proc;
dcl  data_left fixed bin;
dcl  field_no fixed bin;
dcl  config_card_field_in_ascii char (4) based;
%include config_deck;
	data_left = syserr_msg.data_size;
	cardp = addr (syserr_msg.data);
	do while (data_left > 0);
	     call ioa_$rsnpnnl ("^a", work, (0), config_card.word);
	     do field_no = 1 to config_card.type_word.n_fields by 1;
		if config_card.type_word.field_type (field_no) = CONFIG_STRING_TYPE
		then call ioa_$rsnpnnl ("^a  ^a", work, (0), work,
			addr (config_card.data_field (field_no)) -> config_card_field_in_ascii);
		else if config_card.type_word.field_type (field_no) = CONFIG_OCTAL_TYPE
		then call ioa_$rsnpnnl ("^a  ^o", work, (0), work, fixed (config_card.data_field (field_no)));
		else if config_card.type_word.field_type (field_no) = CONFIG_DECIMAL_TYPE
		then call ioa_$rsnpnnl ("^a  ^d.", work, (0), work, fixed (config_card.data_field (field_no)));
		else if config_card.type_word.field_type (field_no) = CONFIG_SINGLE_CHAR_TYPE
		then call ioa_$rsnpnnl ("^a  ^a", work, (0), work,
			substr ("abcdefgh", fixed (config_card.data_field (field_no)), 1));
		else ;
	     end;
	     call put;
	     substr (rest, 1, length (work)) = work;
	     moved = moved + length (work);
	     data_left = data_left - size (config_card);
	     cardp = addrel (cardp, size (config_card));
	end;
	call put;
     end edit_config;

/* Procedure to edit an ioi syserr message */

edit_ioi: proc;

dcl  edit_detail bit (1) init ("0"b);
dcl  detailed_status_length fixed bin;
dcl  i fixed bin;
dcl  dtstat (detailed_status_length) bit (8) unal based (addr (io_msg.detailed_status));

%include io_syserr_msg;

edit_ioi_join: io_msgp = addr (syserr_msg.data);
	call ioa_$rsnpnnl ("channel=^a device=^2.3b", work, (0),
	     io_msg.channel, io_msg.device);
	if io_msg.time_out then work = work || "  timeout";
	else do;
	     call ioa_$rsnpnnl ("  status=^w", work2, (0), io_msg.status);
	     work = work || work2;
	end;

	if io_msg.count ^= "0"b then do;
	     call ioa_$rsnpnnl (" (^d times)", work2, (0), bin (io_msg.count, 6) + 1);
	     work = work || work2;
	end;

	if room < length (work) then do;		/* If terminal too short for this message */
	     call edit_std;
	     return;
	end;

	if length (work) > restl then			/* If it won't fit on current line */
	     call put;				/* Dump line */

	substr (rest, 1, length (work)) = work;		/* Copy line */
	moved = moved + length (work);

	if edit_detail then do;
	     call put;
	     detailed_status_length = 27;
	     do i = detailed_status_length to 1 by -1 while (dtstat (i) = "0"b);
	     end;
	     detailed_status_length = max (i, 1);
	     call ioa_$rsnpnnl ("Detailed status:^( ^.4b^)", work, (0), dtstat);
	     substr (rest, 1, length (work)) = work;	/* Copy line */
	     moved = moved + length (work);

	end;

	return;

edit_ioi_detail: entry;

	edit_detail = "1"b;
	go to edit_ioi_join;

     end edit_ioi;

/* Edit message from a fault */

edit_fault: proc;

dcl  fault_msgp ptr;
dcl  1 fault_msg aligned based (fault_msgp),
       2 mcx like mc aligned,
       2 hist_reg (128) bit (36) aligned;

	fault_msgp = addr (syserr_msg.data);
	scup = addr (mcx.scu);
	call edit_text ("Pointer Registers:");
	wordp = addr (fault_msg.prs);
	nwords = 16;
	call edit_words;
	call ioa_$rsnpnnl ("x0-7:^( ^.3b^)", rest, moved, fault_msg.x);
	call put;
	call ioa_$rsnpnnl ("a: ^.3b q: ^.3b e: ^.3b t: ^.3b ralr: ^.3b", rest, moved,
	     fault_msg.a, fault_msg.q, "0"b || fault_msg.e,
	     fault_msg.t, fault_msg.ralr);
	call put;
	call edit_scu (addr (fault_msg.scu));
	call ioa_$rsnpnnl ("Fault Register: ^.3b", rest, moved, fault_msg.fault_reg);
	call put;
	call edit_text ("EIS Info:");
	nwords = 8;
	wordp = addr (fault_msg.eis_info);
	call edit_words;
	call edit_hist (addr (fault_msg.hist_reg), (scu.pad2));
	return;

     end edit_fault;

edit_scu: proc (p);

dcl  p ptr;

	call edit_text ("SCU data:");
	nwords = 8;
	wordp = p;
	call edit_words;
	return;

     end edit_scu;

edit_hist: proc (p, cpu_type);

dcl  p ptr;
dcl  cpu_type bit (9);

	if cpu_type = "0"b then
	     call edit_text ("OU History Reg Data:");
	else call edit_text ("DU/OU History Reg Data:");
	nwords = 32;
	wordp = p;
	call edit_words;
	call edit_text ("CU History Reg Data:");
	wordp = addrel (p, 32);
	call edit_words;
	if cpu_type = "0"b then
	     call edit_text ("DU History Reg Data:");
	else call edit_text ("APU#2 History Reg Data:");
	wordp = addrel (p, 64);
	call edit_words;
	if cpu_type = "0"b then
	     call edit_text ("APU History Reg Data:");
	else call edit_text ("APU#1 History Reg Data:");
	wordp = addrel (p, 96);
	call edit_words;
	return;

     end edit_hist;

edit_text: proc (msg);

dcl  msg char (*);

	if moved > 0 then call put;
	substr (rest, 1, length (msg)) = msg;
	moved = length (msg);
	call put;
	return;

     end edit_text;

/* Edit old style parity message */

edit_old_parity: proc;

dcl  parity_msgp ptr;

dcl  1 parity_msg aligned based (parity_msgp),
       2 scu (8) bit (36) aligned,
       2 inst_addr fixed bin (18),
       2 inst (3) bit (36) aligned,
       2 abs_tsr_valid bit (1) unal,
       2 tsr_repeat bit (1) unal,
       2 fill1 bit (9) unal,
       2 tsr_loc fixed bin (24) unal,
       2 tsr_data bit (36) unal,
       2 abs_psr_valid bit (1) unal,
       2 psr_repeat bit (1) unal,
       2 fill2 bit (9) unal,
       2 psr_loc fixed bin (24) unal,
       2 psr_data bit (36) aligned;

	parity_msgp = addr (syserr_msg.data);
	if moved > 0 then call put;
	call ioa_$rsnpnnl ("inst at ^o: ^w ^w ^w", rest, moved, parity_msg.inst_addr, parity_msg.inst);
	call put;
	call edit_scu (addr (parity_msg.scu));
	call ioa_$rsnpnnl ("PSR: ^o", work, 0, parity_msg.psr_loc);
	if parity_msg.abs_psr_valid then do;
	     call ioa_$rsnpnnl (" (^w)", work2, 0, parity_msg.psr_data);
	     work = work || work2;
	     work = work || " Retry ";
	     if parity_msg.psr_repeat then work = work || "succeeded.";
	     else work = work || "failed.";
	end;
	else work = work || " invalid absaddr.";
	rest = work;
	moved = length (work);
	call put;
	call ioa_$rsnpnnl ("TSR: ^o", work, 0, parity_msg.tsr_loc);
	if parity_msg.abs_tsr_valid then do;
	     call ioa_$rsnpnnl (" (^w)", work2, 0, parity_msg.tsr_data);
	     work = work || work2;
	     work = work || " Retry ";
	     if parity_msg.tsr_repeat then work = work || "succeeded.";
	     else work = work || "failed.";
	end;
	else work = work || " invalid absaddr.";
	rest = work;
	moved = length (work);
	call put;
	return;

     end edit_old_parity;

/* Edit old style op-not-complete fault */

edit_old_onc: proc;

dcl  onc_msgp ptr;
dcl  cpu_type bit (9);
dcl  1 onc_msg aligned based (onc_msgp),
       2 scu (8) bit (36),
       2 inst_addr fixed bin (18),
       2 inst (3) bit (36) aligned,
       2 hist_reg (128) bit (36) aligned;

	onc_msgp = addr (syserr_msg.data);
	cpu_type = substr (scu (3), 19, 9);
	if moved > 0 then call put;
	call ioa_$rsnpnnl ("inst at ^o: ^w ^w ^w", rest, moved, onc_msg.inst_addr, onc_msg.inst);
	call put;
	call edit_scu (addr (onc_msg.scu));
	call edit_hist (addr (onc_msg.hist_reg), cpu_type);
	return;

     end edit_old_onc;

/* Edit old style startup and shutdown faults */

edit_old_startup: proc;

dcl  startup_msgp ptr;
dcl  1 startup_msg aligned based (startup_msgp),
       2 scu (8) bit (36) aligned;

	startup_msgp = addr (syserr_msg.data);
	call edit_scu (addr (startup_msg.scu));
	return;

     end edit_old_startup;

/* Edit message from mos memory EDAC error */

edit_mos_memory: proc;

dcl  edit_mos_rscr_ entry (ptr, char (*) var);

	call edit_mos_rscr_ (addr (syserr_msg.data), work);
	if room < length (work) then do;
	     call edit_std;
	     return;
	end;
	if length (work) > restl then call put;
	substr (rest, 1, length (work)) = work;
	moved = moved + length (work);
	return;

     end edit_mos_memory;

/* Procedure called to print errors by interpreting status from syserr_log_util_$open */

open_err: entry (open_status, caller, code);

dcl  open_status bit (36) aligned;			/* Set by syserr_log_util_$open */
dcl  caller char (*);				/* Name of caller for com_err_ */
dcl  msg_time fixed bin (71);				/* Time of a syserr message */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  sw fixed bin;
dcl  code2 fixed bin (35);

	if substr (open_status, 1, 2) = "11"b then do;	/* If all access needed is present */
	     code = 0;				/* No error */
	     return;
	end;

	if substr (open_status, 1, 2) = "00"b then do;	/* If no access */
	     call com_err_ (code, caller, "Unable to open syserr_log");
	     return;
	end;

	sw = 0;					/* An ioa_ switch */

	if substr (open_status, 1, 2) = "01"b then do;	/* No access to current log */
	     call syserr_log_util_$search (-1, msg_time, msg_seq, code2); /* Get time of last message */
	     if code2 = 0 then do;			/* It workd */
		sw = 1;
		call date_time_ (msg_time, cur_time);
	     end;
	     call com_err_ (code, caller, "Current log not available. ^v(Permanent log ends ^a.^)",
		sw, cur_time);
	     code = 0;
	     return;
	end;

	else do;					/* No access to permanent log */
	     call syserr_log_util_$search (0, msg_time, msg_seq, code2); /* Read oldest message */
	     if code2 = 0 then do;
		sw = 1;
		call date_time_ (msg_time, cur_time);
	     end;
	     call com_err_ (code, caller, "Permanent log not available. ^v(Current log starts ^a.^)",
		sw, cur_time);
	     code = 0;
	     return;
	end;

     end print_syserr_msg_;
