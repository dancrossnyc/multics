/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(90-11-05,Vu), approve(90-11-05,MCR8226), audit(92-09-24,Zimmerman),
     install(92-09-25,MR12.5-1019):
     list_extra_personids aborts when it is run more than once within the same
     process.
                                                   END HISTORY COMMENTS */


/* format: style4 */
list_extra_personids: procedure;

/* Modified May 1982 E. N. Kittlitz. bugfix. */
/* Modified 1984-08-15 by E. Swenson for Version 2 PNTs. */

dcl  1 vrec aligned,				/* record in temporary vfile */
       2 pid char (32),
       2 in_pnt bit,
       2 chain pointer;

dcl  1 reference aligned based (refp),
       2 next pointer,
       2 type char (168);

dcl  temp_area area based (ai.areap);

dcl  temp_file internal file keyed record;

dcl  ME char (32) static options (constant) init ("list_extra_personids");
dcl  sysdir char (168) static init (">system_control_dir");
dcl  pdtdir char (168) static init (">system_control_dir>pdt");

/* External Static */

dcl  error_table_$bad_index fixed bin (35) external static;
dcl  error_table_$checksum_failure fixed bin (35) external static;
dcl  error_table_$no_record fixed bin (35) external static;
dcl  iox_$error_output ptr external static;
dcl  sys_info$max_seg_size fixed bin (19) external static;

/* External Entries */

dcl  com_err_ entry options (variable);
dcl  define_area_ entry (ptr, fixed bin (35));
dcl  get_pdir_ entry returns (char (168));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  pnt_manager_$get_abs_entry entry (fixed bin (35), ptr, fixed bin (35));
dcl  release_area_ entry (ptr);
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl  code fixed bin (35);
dcl  uid char (32);
dcl  rec fixed bin (35);
dcl  1 pnte aligned like pnt_entry;
dcl  atd char (168);
dcl  long bit aligned;
dcl  (satp, pdtp, pdtep, satep, refp) pointer;
dcl  (i, j) fixed bin;
dcl  1 ai aligned like area_info;

/* Builtins */

dcl  (addr, index, null, rtrim, string, substr) builtin;

/* Conditions */

dcl  (cleanup, endfile, key) condition;

/* * * * * * * * * * * * * * * * * * * */

	long = "0"b;

	ai.version = area_info_version_1;
	string (ai.control) = ""b;
	ai.control.extend = "1"b;
	ai.control.no_freeing = "1"b;
	ai.owner = ME;
          ai.size = sys_info$max_seg_size;
	ai.areap = null ();

          on cleanup call clean_up ();
	call define_area_ (addr (ai), code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Defining temporary area.");
	     return;
	end;

	call ioa_$rsnnl ("vfile_ ^a>^a.lxp.temp", atd, (0), get_pdir_ (), unique_chars_ (""b));
	open file (temp_file) title (atd) update;

	call hcs_$initiate (sysdir, "sat", "", 0, 0, satp, code);
	if satp = null () then do;
	     call com_err_ (code, ME, "Initiating SAT.");
               call clean_up ();
	end;

	do j = 1 to 2;
	     call ref (sat.system_admin (j), "System Administrator");
	end;
	do i = 1 to sat.current_size;
	     satep = addr (sat.project (i));
	     if project.state = 1 then do;
		do j = 1 to 4;
		     call ref (project.admin (j).userid, "Project " || rtrim (project.project_id) || " Administrator");
		end;

		call hcs_$initiate (pdtdir, rtrim (project.project_id) || ".pdt", "", 0, 0, pdtp, code);
		if pdtp = null ()
		then call com_err_ (code, ME, "Initiating ^a.pdt.", project.project_id);
		else do;
		     do j = 1 to pdt.current_size;
			pdtep = addr (pdt.user (j));
			if user.state = 1 then call ref ((user.person_id), rtrim (project.project_id) || " Project");
		     end;
		     call hcs_$terminate_noname (pdtp, code);
		end;
	     end;
	end;

	on key (temp_file) begin;
		read file (temp_file) into (vrec) key (uid);
		vrec.in_pnt = "1"b;
		rewrite file (temp_file) from (vrec) key (uid);
	     end;
	do rec = 1 by 1;
	     call pnt_manager_$get_abs_entry (rec, addr (pnte), code);
	     if code = error_table_$bad_index then goto done_pnt;
	     else if code = error_table_$no_record then ;
	     else if code = error_table_$checksum_failure then
		call ioa_$ioa_switch (iox_$error_output, "^a: Checksum error reading PNT entry ^d.", ME, rec);
	     else if code ^= 0 then do;
		call com_err_ (code, ME, "Reading PNT entry ^d.", rec);
                    call clean_up ();
	     end;
	     else do;
		uid = pnte.user_id;
		vrec.pid = uid;
		vrec.chain = null ();
		vrec.in_pnt = "1"b;
		write file (temp_file) from (vrec) keyfrom (uid);
	     end;
	end;
done_pnt: revert key (temp_file);
	close file (temp_file);
	open file (temp_file) title (atd) sequential input;
          on endfile (temp_file) begin;
             call clean_up ();
             goto exit;
          end;

	do while ("1"b);
	     read file (temp_file) into (vrec);
	     if vrec.in_pnt & vrec.chain = null ()
	     then do;
		call ioa_ ("^22a in PNT is not used.", vrec.pid);
	     end;
	     else if long | ^vrec.in_pnt then do;
		call ioa_ ("^22a^[ is not in the PNT.^]", vrec.pid, ^vrec.in_pnt);
		do refp = vrec.chain
		     repeat (reference.next)
		     while (refp ^= null ());
		     call ioa_ ("   ^a", reference.type);
		end;
	     end;
	end;

exit:     return;

clean_up: procedure ();
          close file (temp_file);
          call release_area_ (ai.areap);
	return;
end;

/* * * * * * * * * * REF * * * * * * * * * */

ref: procedure (Pid, Type);
dcl  (Pid, Type) char (*);
dcl  pid char (32);
dcl  i fixed bin;

	i = index (Pid, ".");
	if i = 0
	then pid = Pid;
	else pid = substr (Pid, 1, i - 1);
	if pid = "" | pid = "*" then return;
	allocate reference in (temp_area) set (refp);
	reference.type = Type;
	reference.next = null ();

	vrec.pid = pid;
	vrec.chain = refp;
	vrec.in_pnt = "0"b;
	on key (temp_file) begin;
		read file (temp_file) into (vrec) key (pid);
		reference.next = vrec.chain;
		vrec.chain = refp;
		rewrite file (temp_file) from (vrec) key (pid);
	     end;
	write file (temp_file) from (vrec) keyfrom (pid);
     end;						/* ref */

/* * * * * * * * * * TEST * * * * * * * * * */

test: entry (Dirname);
dcl  Dirname char (*) parameter;

	sysdir = Dirname;
	pdtdir = Dirname || ">pdt";
	return;

%include area_info;
%include pdt;
%include pnt_entry;
%include sat;
%include user_attributes;

     end;						/* list_extra_personids */
