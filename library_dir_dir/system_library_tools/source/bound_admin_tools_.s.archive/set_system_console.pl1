/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: off */

set_system_console:
ssc:
     proc;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*										*/
	/* Purpose:									*/
	/* 										*/
	/*      This module implements the set_system_console operator console reconfiguration command. Its	*/
	/* sole charter in life is to manipulate operator's consoles.				*/
	/*										*/
	/* Syntax:									*/
	/*										*/
	/* 	set_system_console {console_name} {-control_arg}					*/
	/*										*/
	/* Arguments:									*/
	/*										*/
	/*	console_name -	Is the name of the console to be affected by the call. If ommitted	*/
	/*			the bootload console is assumed.				*/
	/*										*/
	/* Control arguments:								*/
	/*										*/
	/* 	-crash		specifies that the system is to crash if all attempts at console	*/
	/*			recovery fail.						*/
	/*										*/
	/*	-reset		resets the bootload console. The given console_name is ignored.	*/
	/*										*/
	/*	-run		specifies that the system should continue to run as long as possible	*/
	/*			without a configured console should all attempts at recovery fail.	*/
	/*										*/
	/*	-state	<state>	specifies that the state of the console should be changed to the 	*/
	/*			given state. The state may have any of the following values:	*/
	/*										*/
	/*		on	makes the specified console the bootload console. The current	*/
	/*			bootload console becomes an I/O device.				*/
	/*										*/
	/*		alt	makes the specified console an alternate console, available for use 	*/
	/*			by console recovery.					*/
	/*										*/
	/*		io	makes the specified console an I/O device, available to IOI.	*/
	/*										*/
	/*		inop	makes the specified console an I/O device, available to IOI.	*/
	/*										*/
	/* The following control arguments are undocumented and are provided for system debug purposes:	*/
	/*										*/
	/*	-enable		enables the previously disabled console service.			*/
	/*										*/
	/*	-disable									*/
	/*	-suspend		both of these arguments can be used to disable / suspend console	*/
	/*			service. If the service is suspended the actions of the system will	*/
	/*			be subject to the current crash / run state. If the system is setup	*/
	/*			to crash on console recovery, it will.				*/
	/*										*/
	/* Note: 	Access to hphcs_ is required to utilize this command.				*/
	/*										*/
	/* Initial Coding:		830820							*/
	/*										*/
	/* Author:		E. A. Ranzenbach	(Ranzenbach.Multics@M)			*/
	/* Location:		System-M.							*/
	/* Release:		MR10.2							*/
	/*										*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*										*/
	/* Modifications:									*/
	/*										*/
	/* Date:   Author			Reason						*/
	/*										*/
	/* 840420  Edward A. Ranzenbach	Added -prompt control argument.			*/
	/*										*/
	/*										*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     call process_arguments ();					/* get command options...		*/

     if setting_prompt then do;
	call hphcs_$ocdcm_set_prompt (prompt_string);
	return;
     end;

     if reconfiguring then do;
	if reconfig_option = RESET_CONSOLE then console_name = "";		/* can only reset the bootload console..*/
	call hphcs_$ocdcm_reconfigure (console_name, reconfig_option, code);	/* and let's do it...		*/
	if code ^= 0 then call err (exit, code, "Operation failed.");
     end;

     return;							/* done...			*/

process_arguments:
     proc;
     
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*										*/
	/* Internal procedure to obtain the argument count, check it for high and low bounds, and last but	*/
	/* not least process the command arguments...						*/
	/*										*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     min_arg_count = 1;
     max_arg_count = 5;
     command_name = "set_system_console";

     call cu_$af_arg_count (arg_count, code);
     if code = 0 then do;
	call err (exit, error_table_$active_function, command_name);	/* can't be invoked as an AF...	*/
     end;
     else if code ^= error_table_$not_act_fnc then do;
	call err (exit, code, command_name);
     end;
     else code = 0;

     if (arg_count < min_arg_count | arg_count > max_arg_count) then do;
USAGE:	call ioa_$rs ("Usage:^-^a {console_name} {-control_args}", err_msg, 0, command_name);
	call err (exit, code, err_msg);
     end;

     do idx = 1 to arg_count;

	good_arg = false;

	call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
	if code ^= 0 then call err (exit, code, "Unable to obtain arg_ptr");

	if arg_leng = 0 then call err (exit, error_table_$badopt,
	     "Null input arguments are not allowed.");

	if substr (arg, 1, 1) = "-" then do;				/* must be a control argument...	*/

	     if arg = "-crash" then do;				/* -crash control argument...		*/
		reconfiguring = true;
		reconfig_option = CRASH_ON_CRF;			/* setup reconfiguration option...	*/
	     end;
	     
	     else if arg = "-run" then do;				/* -run control argument...		*/
		reconfig_option = RUN_ON_CRF;				/* setup reconfiguration option...	*/
		reconfiguring = true;
	     end;
	     
	     else if arg = "-enable" then do;				/* -enable control argument...	*/
		reconfig_option = ENABLE_CONSOLE_SERVICE;		/* setup reconfiguration option...	*/
		reconfiguring = true;
	     end;

	     else if arg = "-suspend" | arg = "-disable" then do;		/* -suspend | -disable control arg...	*/
		reconfig_option = SUSPEND_CONSOLE_SERVICE;		/* setup reconfiguration option...	*/
		reconfiguring = true;
	     end;

	     else if arg = "-reset" then do;				/* -reset control argument...		*/
		reconfig_option = RESET_CONSOLE;			/* setup reconfiguration option...	*/
		reconfiguring = true;
	     end;
	     
	     else if arg = "-state" then do;				/* -state control argument...		*/
		reconfiguring = true;
		idx = idx + 1;					/* get the requested state...		*/
		if idx > arg_count then call err (exit, error_table_$wrong_no_of_args, "A state must be supplied.");
		call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
		if code ^= 0 then call err (exit, code, "Unable to get state.");
		
		if arg = "on" then do;				/* ON state...			*/
		     reconfig_option = MAKE_BOOTLOAD_CONSOLE;		/* setup reconfiguration option...	*/
		end;

		else if arg = "alt" then do;				/* ALT state...			*/
		     reconfig_option = MAKE_ALTERNATE_CONSOLE;		/* setup reconfiguration option...	*/
		end;

		else if arg = "io" then do;				/* IO state...			*/
		     reconfig_option = MAKE_IO_DEVICE;			/* setup reconfiguration option...	*/
		end;

		else if arg = "inop" then do;				/* INOP state...			*/
		     reconfig_option = MAKE_INOP_DEVICE;		/* setup reconfiguration option...	*/
		end;

		else if arg = "off" then do;				/* OFF state...			*/
		     reconfig_option = MAKE_UNAVAILABLE;		/* setup reconfiguration option...	*/
		end;

		else do;						/* BAD state...			*/
		     call ioa_$rs ("^a is not a legal console state.", err_msg, 0, arg);
		     call err (exit, 0, err_msg);			/* and let them know...		*/
		end;
	     end;

	     else if arg = "-prompt" then do;
/*		setting_prompt = true;	UNCOMMENT FOR -prompt FEATURE */
		idx = idx + 1;					/* get the requested prompt...		*/
		if idx <= arg_count then do;				/* get specified prompt...		*/
		     call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
		     if code ^= 0 then call err (exit, code, "Unable to get prompt string.");
		     prompt_string = arg;
		end;
	     end;
	     
	     else do;
		code = error_table_$badopt;				/* setup the proper error...		*/
		call err (exit, code, arg);				/* and let them know...		*/
	     end;
	end;

	else do;							/* must be the console_name...	*/
	     if arg_leng = 4 then do;					/* console names are that long...	*/
		if substr (arg, 1, 3) = "opc" then do;			/* do some preliminary checking...	*/
		     if search (substr (arg, 4, 1), "abcdefgh") = 1 then do;/* must have "opcx" type name...	*/
			console_name = arg;				/* console name looks OK...		*/
			good_arg = true;
		     end;
		end;
	     end;
	     if ^good_arg then do;					/* BAD console name...		*/
		call ioa_$rs ("^a is not a legal console name.", err_msg, 0, arg);
		call err (exit, 0, err_msg);				/* let them know...			*/
	     end;
	end;
     end;

     return;
     
end process_arguments;

err:
     proc (exit_sw, err_code, ctl_str);
	

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*										*/
	/* Internal procedure that reports errors to the user and optionally exits then main procedure.	*/
	/* This last function is dependant upon the value of exit_sw. If found to be on a non-local go to	*/
	/* is made to the "EXIT" label in the main procedure. If off this procedure returns to its caller.	*/
	/*										*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* parameters... (I) = Input, (O) = Output */

     dcl	exit_sw			bit	(1)	parameter;	/* to exit or not to exit...	      (I) */
     dcl	err_code			fixed bin	(35)	parameter;	/* passed to com_err_...	      (I) */
     dcl	ctl_str			char	(*)	parameter;
     /* optional com_err_ ctl string...  (I) */
	
/* entries... */

     dcl	com_err_ entry() options(variable);
     dcl	requote_string_ entry (char(*)) returns(char(*));
	
/* miscellaneous... */

     dcl	requoted_ctl_str		char	(256)	init	("");

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     if index (ctl_str, """") > 0 then do;
	requoted_ctl_str = requote_string_ (ctl_str);
	call com_err_ (err_code, command_name, requoted_ctl_str);
     end;
     else do;
	call com_err_ (err_code, command_name, ctl_str);
     end;
     
     if exit_sw then go to EXIT;

     return;

end err;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*										*/
	/* 				Declarations...					*/
	/* format: off									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* entries... */

     dcl	cu_$af_arg_count entry (fixed bin, fixed bin(35));
     dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
     dcl	hphcs_$ocdcm_reconfigure entry (char (4), fixed bin (17), fixed bin (35));
     dcl	ioa_$rs entry() options(variable);
     dcl	hphcs_$ocdcm_set_prompt entry (char (6));
     
/* builtins... */

     dcl	index			builtin;
     dcl	null			builtin;
     dcl	search			builtin;
     dcl	substr			builtin;
     
/* pointers... */

     dcl	arg_ptr			ptr		init	(null);	/* -> argument...			*/

/* switches... */

     dcl	true			bit	(1)	init	("1"b)
				internal static	options (constant);

     dcl	false			bit	(1)	init	("0"b)
				internal static	options (constant);

     dcl	exit			bit	(1)	init	("1"b)	/* exit -> fatal error...		*/
				internal static	options (constant);

     dcl	good_arg			bit	(1)	init	("0"b);	/* ON => valid argument...		*/
     dcl	reconfiguring		bit	(1)	init	("0"b);	/* ON => were reconfiguring consoles...	*/
     dcl	setting_prompt		bit	(1)	init	("0"b);	/* ON => were changing prompt...		*/

/* error_table_... */

     dcl	error_table_$active_function	fixed bin	(35)	external static;
     dcl	error_table_$badopt		fixed bin	(35)	external static;
     dcl	error_table_$not_act_fnc	fixed bin	(35)	external static;
     dcl	error_table_$wrong_no_of_args	fixed bin	(35)	external static;
     
/* miscellaneous... */

     dcl	arg			char	(arg_leng)		/* argument...			*/
				based	(arg_ptr);
     dcl	arg_count			fixed bin	(17)	init	(0);	/* number of arguments...		*/
     dcl	arg_leng			fixed bin	(21)	init	(0);	/* length, (in bytes), of argument...	*/
     dcl	command_name		char	(32)	init	("");
     dcl	console_name		char	(4)	init	("");	/* name of the console to be affected...*/
     dcl	code			fixed bin	(35)	init	(0);	/* standard Multics error code...	*/
     dcl	err_msg			char	(80)	init	("");	/* to report errors...		*/
     dcl	idx			fixed bin	(17)	init	(0);	/* miscellaneous working index...	*/
     dcl	min_arg_count		fixed bin	(17)	init	(0);	/* minimum number of arguments...	*/
     dcl	max_arg_count		fixed bin	(17)	init	(0);	/* maximum number of arguments...	*/
     dcl	prompt_string		char	(6)	init	("");
     dcl	reconfig_option		fixed bin	(17)	init	(0);	/* action to take...		*/

/* includes... */

%include opc_reconfig_options;

EXIT:

     return;

end set_system_console;
