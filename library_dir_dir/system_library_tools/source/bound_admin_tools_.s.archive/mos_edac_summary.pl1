/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* MOS_EDAC_SUMMARY: Command to summarize MOS Memory EDAC errors from the syserr log */

/* Written June 1979 by Larry Johnson */
/* Most of this program was borrowed from the io_error_summary command. */
/* Completed for installation December 1979 by Rich Coppola */
/* Modified July 1983 by Paul Farley to change call to sys_info_$time_delta,
   which does not exist, to time_data_$time_delta, which also allows for
   per-process time zone selection (phx15295). */

mos_edac_summary: mes:  proc;

dcl  name char (17) int static options (constant) init ("mos_edac_summary"); /* Name of procedure */
dcl  code fixed bin (35);				/* Standard system status code */
dcl  open_status bit (36) aligned;			/* Code from syserr_log_util_$open */
dcl  ptr_array (1) ptr;				/* An array of pointers as required by get_temp_segment_ */
dcl  tab_cnt fixed bin init (0);			/* Number of seperate status found */
dcl  mask bit (36) aligned init ("0"b);			/* Mask of significant bits in status word */
dcl  arg_ptr ptr;					/* Pointer to an argument */
dcl  arg_len fixed bin;				/* Length of an argument */
dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
dcl  arg_count fixed bin;				/* The number of arguments */
dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
dcl  for_len fixed bin;				/* Saved length of -for argument */
dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
dcl  more_args bit (1);				/* Set while there are more arguments to scan */
dcl  from_time fixed bin (71);			/* Time specified on -from */
dcl  to_time fixed bin (71);				/* Time specified on -to */
dcl  for_time fixed bin (71);				/* Time specified on -for */
dcl  count_limit fixed bin init (0);			/* Results for -limit arg */
dcl  day_limit fixed bin init (0);			/* Results for -day_limit arg */
dcl  workp ptr;					/* Pointer to work segment */
dcl  arg_no fixed bin init (1);			/* For scanning argument list */
dcl  errentp ptr;					/* Pointer to status table entry */
dcl  msg_time fixed bin (71);				/* Time of syserr message */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  scu_cnt fixed bin init (0);			/* Number of MEMs requested */
dcl  err_cnt fixed bin init (0);			/* Entries in status table */
dcl  segs_allocated bit (1) init ("0"b);		/* Set after work segments created */
dcl  sort_listp ptr;
dcl  us_per_day fixed bin (71);			/* micro-seconds per day */

dcl 1 work aligned based (workp),			/* Declaration of work segment */
    2 scureq (32) char (7) var,			/* Table of requested MEMs */
    2 buffer (500) bit (36) aligned,			/* Syserr messages are read here */
    2 errentry (err_cnt + 1) like err;			/* Entry for each different error */

dcl 1 err aligned based (errentp),			/* Entry for each different error syndrome found */
    2 mem char (1) unal,
    2 store char (2) unal,
    2 count fixed bin (35),
    2 ZAC_line bit (6) unal,
    2 syndrome bit (8) unal,
    2 identification bit (4) unal,
    2 day_count fixed bin (18) uns unal,
    2 day_list (16) fixed bin (18) uns unal;

dcl 1 sort_list aligned based (sort_listp),
    2 count fixed bin,
    2 errentp (sort_list.count) ptr unal;

dcl  sort_items_$general entry (ptr, entry);
dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  syserr_log_util_$close entry (fixed bin (35));
dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  edit_mos_rscr_$decode entry (ptr, char (*), char (*));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));

dcl  time_data_$time_delta ext fixed bin (71);

dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);

dcl (cleanup, conversion) condition;

dcl (addr, bin, divide, hbound, index, substr) builtin;

/* Initialization */

	on cleanup call clean_up;

	call get_temp_segments_ (name, ptr_array, code);	/* Get a work segment */
	if code ^= 0 then do;
	     call com_err_ (code, name, "Can't get temp segment");
	     go to done;
	end;
	segs_allocated = "1"b;			/* Remember that they are allocated */
	workp = ptr_array (1);			/* Copy pointer to my segment */

	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
	call cu_$arg_count (arg_count);		/* And the length */
	more_args = (arg_count > 0);			/* Set if args to scan */
	call scan_args;				/* Scan the argument list */

	call syserr_log_util_$open (open_status, code);	/* Open the syserr log */
	if code ^= 0 | substr (open_status, 1, 2) ^= "11"b then do; /* If error */
	     call print_syserr_msg_$open_err (open_status, name, code);
	     if code ^= 0 then go to done;		/* Not recoverable */
	end;

	if ^from_sw then do;			/* No -from, so start at beginning */
	     call syserr_log_util_$search (0, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Can't find first message in log.");
		go to done;
	     end;
	     from_time = msg_time;			/* Official starting time */
	end;
	else do;					/* -from used, find right message */
	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Locating first message requested.");
		go to done;
	     end;
	end;

	if for_sw then do;				/* Now can compute -for limit */
	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "-for ^a", for_arg);
		go to done;
	     end;
	     to_sw = "1"b;				/* Now, just as if -to was specified */
	end;
	if ^to_sw then to_time = from_time;		/* Initialize last message time */

	syserr_msgp = addr (work.buffer);		/* Read here */

/* Loop thru the file */

loop:	call syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
	if code ^= 0 then do;
	     if code = error_table_$end_of_info then go to print;
	     call com_err_ (code, name, "Reading syserr log");
	     go to done;
	end;

	if to_sw then do;				/* If time limit */
	     if syserr_msg.time > to_time then go to print;
	end;
	else to_time = syserr_msg.time;		/* Save last message time */

	if syserr_msg.data_code = SB_mos_err & syserr_msg.data_size > 0 then
	     call count_it;
	go to loop;

/* End of log reached */

print:	call sort_it;				/* Sort the table */
	call print_it;				/* Print results */

/* End of command */

done:	call clean_up;
	return;

/* Procedure to scan the argument list */

scan_args: proc;

	     do while (more_args);			/* Do while thins to look at */
		call get_arg;
		if arg = "-from" | arg = "-fm" then do;		/* Start time */
		     from_sw = "1"b;
		     call time_arg (from_time);
		end;
		else if arg = "-to" then do;		/* Ending time */
		     to_sw = "1"b;
		     call time_arg (to_time);
		end;
		else if arg = "-for" then do;		/* Time limit */
		     for_sw = "1"b;
		     call time_arg (for_time);	/* For syntax checking only */
		     for_len = arg_len;		/* Save pointer to this argument */
		     for_ptr = arg_ptr;
		end;
		else if arg = "-limit" then count_limit = decimal_arg ();
		else if arg = "-day_limit" then do;
		     day_limit = decimal_arg ();
		     if day_limit > 16 then do;
			call com_err_ (0, name, "Maximum value for -day_limit is 16.");
			go to done;
		     end;
		     us_per_day = 24*60*60*1000000;
		end;
		else if arg = "-mem" then do; /* List of MEMs */
		     if ^more_args then do;		/* Need more args */
no_scu:			call com_err_ (0, name, "Argument missing after -MEM");
			go to done;
		     end;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then go to no_scu; /* Shouldn't be control arg */
new_scu:
		     if (length (arg) > 1) | (index ("abcdefgh", arg) = 0) then do;
			
			call com_err_ (0, name, "Invalid mem specified ""^a""", arg);
			go to done;
		     end;
		     

		     scu_cnt = scu_cnt + 1;		/* Count MEM found */
		     work.scureq (scu_cnt) = arg;	/* Save name */
		     if more_args then do;		/* If more to scan */
			call get_arg;
			if substr (arg, 1, 1) ^= "-" then do; /* Found another MEM */
			     if scu_cnt < hbound (work.scureq, 1) then go to new_scu;
			     else do;		/* Too many */
				call com_err_ (0, name, "There were more than ^d MEMs specified.",
				     hbound (work.scureq, 1));
				go to done;
			     end;
			end;
			else call put_arg;		/* Went too far, back up 1 */
		     end;
		end;
		else do;				/* Bad arg */
		     call com_err_ (error_table_$badopt, name, "^a", arg);
		     go to done;
		end;
	     end;

	     if to_sw & for_sw then do;		/* Conflict */
		call com_err_ (0, name, "Conflicting arguments: -to and -for");
		go to done;
	     end;

	     return;

	end scan_args;

/* Procedure to return the next argument from command line */

get_arg:	proc;

	     call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	     if code ^= 0 then do;			/* Should never happen */
		call com_err_ (code, name, "Arg ^d", arg_no);
		go to done;
	     end;
	     arg_no = arg_no + 1;			/* For next call */
	     more_args = (arg_no <= arg_count);
	     return;

put_arg:	     entry;				/* Entry to return argument after scanning too far */
	     arg_no = arg_no - 1;
	     more_args = (arg_no <= arg_count);
	     return;

	end get_arg;

/* Procedure to convert a time argument */

time_arg:	proc (t);

dcl  t fixed bin (71);				/* The time to ouput */
dcl  arg_copy char (10) var;				/* Save copy of arg here */

	     arg_copy = arg;
	     if ^more_args then do;			/* Must be more */
		call com_err_ (0, name, "Argument required after ^a.", arg_copy);
		go to done;
	     end;
	     call get_arg;
	     call convert_date_to_binary_ (arg, t, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "^a ^a", arg_copy, arg);
		go to done;
	     end;

	     return;

	end time_arg;

/* Procedure to convert a decimal argument */

decimal_arg: proc returns (fixed bin);

dcl  arg_copy char (10) var;

	     arg_copy = arg;
	     if ^more_args then do;
		call com_err_ (0, name, "Argument required after ^a.", arg_copy);
		go to done;
	     end;
	     call get_arg;
	     on conversion go to bad_dec_arg;
	     return (bin (arg));

bad_dec_arg:   call com_err_ (0, name, "Invalid ^a: ^a", arg_copy, arg);
	     go to done;

	end decimal_arg;

/* Procedure to count an EDAC */

count_it:	proc;

dcl  (i, j) fixed bin;
dcl  found bit (1);
dcl  mem char (1);
dcl  store char (2);
dcl  day_no fixed bin;

	     found = "0"b;
	     scrp = addr (syserr_msg.data);
	     i = index (syserr_msg.text, " mem ");
	     if i = 0 then do;
unparsable:	call com_err_ (0, name, "Unparsable syserr message. Text: ^a", syserr_msg.text);
		return;
	     end;
	     mem = substr (syserr_msg.text, i + 5, 1);

	     if scu_cnt > 0 then
		do j = 1 to scu_cnt while (found = "0"b);
		if mem = work.scureq (j) then
		     found = "1"b;
	     end;

	     if scu_cnt > 0 then
		if ^found then
		return;			/*  don't count this one */
	     else;
	     

	     i = index (syserr_msg.text, " store ");
	     if i = 0 then go to unparsable;
	     store = substr (syserr_msg.text, i+7, 2);
	     if substr (store, 2, 1) = "." then substr (store, 2, 1) = " ";

	     do i = 1 to err_cnt;
		errentp = addr (work.errentry (i));
		if err.mem = mem & err.store = store & err.ZAC_line = scr_su.ZAC_line &
		err.syndrome = scr_su.syndrome & err.identification = scr_su.identification then do;
		     err.count = err.count + 1;
		     go to check_day;
		end;
	     end;

	     err_cnt = err_cnt + 1;
	     errentp = addr (work.errentry (err_cnt));
	     err.mem = mem;
	     err.store = store;
	     err.count = 1;
	     err.day_count = 0;
	     err.ZAC_line = scr_su.ZAC_line;
	     err.syndrome = scr_su.syndrome;
	     err.identification = scr_su.identification;

check_day:     if day_limit <= 0 then return;
	     day_no = divide (syserr_msg.time - time_data_$time_delta, us_per_day, 17, 0);
	     do i = 1 to err.day_count;
		if err.day_list (i) = day_no then return;
	     end;
	     if err.day_count = hbound (err.day_list, 1) then return;
	     err.day_count = err.day_count + 1;
	     err.day_list (err.day_count) = day_no;

	     return;

	end count_it;

/* Procedure to sort the table */

sort_it:	proc;

dcl  i fixed bin;
dcl  sort_count fixed bin;

	     sort_listp = addr (work.errentry (err_cnt + 1)); /* Use next available word */
	     sort_list.count = err_cnt;		/* TEMP FIX */
	     sort_count = 0;
	     do i = 1 to err_cnt;
		errentp = addr (work.errentry (i));
		if err.count >= count_limit & err.day_count >= day_limit then do;
		     sort_count = sort_count+1;
		     sort_list.errentp (sort_count) = addr (work.errentry (i));
		end;
	     end;
	     sort_list.count = sort_count;
	     if sort_count < 2 then return;
	     call sort_items_$general (sort_listp, compare_error);
	     return;

	end sort_it;

compare_error: proc (p1, p2) returns (fixed bin (1));

dcl (p1, p2) ptr unal;

	     if p1 -> err.mem < p2 -> err.mem then return (-1);
	     if p1 -> err.mem > p2 -> err.mem then return (+1);
	     if p1 -> err.store < p2 -> err.store then return (-1);
	     if p1 -> err.store > p2 -> err.store then return (+1);
	     if p1 -> err.count < p2 -> err.count then return (+1);
	     if p1 -> err.count > p2 -> err.count then return (-1);
	     return (0);

	end compare_error;

/* Procedure to print results */

print_it:	proc;

dcl (tm1, tm2) char (24);				/* For editing times */
dcl  work bit (72) aligned;
dcl  mem_type char (32);
dcl  error char (32);
dcl  i fixed bin;
dcl  prev_mem char (1);
dcl  print_mem char (1);
dcl  prev_store char (2);
dcl  print_store char (2);
dcl  prev_type char (32);
dcl  print_type char (32);

	     call date_time_ (from_time, tm1);
	     call date_time_ (to_time, tm2);
	     call ioa_ ("Summary from ^a to ^a^/^/MEM STORE CNT  TYPE                 SYNDROME DECODE", tm1, tm2);
	     prev_mem, prev_store, prev_type = "";
	     scrp = addr (work);
	     do i = 1 to sort_list.count;
		errentp = sort_list.errentp (i);
		work = "0"b;
		scr_su.ZAC_line = err.ZAC_line;
		scr_su.syndrome = err.syndrome;
		scr_su.identification = err.identification;
		call edit_mos_rscr_$decode (scrp, mem_type, error);
		if err.mem = prev_mem then do;
		     print_mem = "";
		     if err.store = prev_store then do;
			print_store = "";
			if mem_type = prev_type then print_type = "";
			else print_type = mem_type;
		     end;
		     else do;
			print_store = err.store;
			print_type = mem_type;
		     end;
		end;
		else do;
		     call ioa_ ("");
		     print_mem = err.mem;
		     print_store = err.store;
		     print_type = mem_type;
		end;
		prev_type = mem_type;
		prev_mem = err.mem;
		prev_store = err.store;
		call ioa_ (" ^1a   ^2a^6d  ^20a ^a", print_mem, print_store, err.count, print_type, error);
	     end;
	     return;

	end print_it;

/* Cleanup handler */

clean_up:	proc;

	     call syserr_log_util_$close (code);

	     if segs_allocated then do;
		segs_allocated = "0"b;
		call release_temp_segments_ (name, ptr_array, code);
	     end;
	     return;

	end clean_up;



%include syserr_message;

%include scr;

%include syserr_binary_def;

     end mos_edac_summary;
