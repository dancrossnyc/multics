/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* DISPLAY_CPU_ERROR: Command to display MCs and hregs from CPU errors from
   the syserr log */

/* Written Oct 1982 by Rich Coppola */
/* Most of this program was borrowed from the mos_edac_summary command. */
/*
   Modified Jan 1984 by Paul Farley to add checking for other syserr entry
   types (Currently hardware_fault and verify_lock), which is defined by
   display_cpu_error_binary_defs.  This is being implemented by using three
   new control arguments "-all", "-match" and "-exclude".  The default will
   be to only examine the hardware_fault entries.
   Modified 1985-02-21, EJ Sharpe: use syserr_fault_msg.incl.pl1, use date_time_$format
*/

display_cpu_error:
     proc;

/* Automatic */

dcl  CPU_TAGS char (16) int static options (constant) init ("ABCDEFGHabcdefgh");

dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
dcl  arg_copy char (15) varying;			/* Temp copy of an argument */
dcl  arg_count fixed bin;				/* The number of arguments */
dcl  arg_len fixed bin;				/* Length of an argument */
dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
dcl  arg_no fixed bin init (1);			/* For scanning argument list */
dcl  arg_ptr ptr;					/* Pointer to an argument */
dcl  argc fixed bin;				/* for getting cpu args */
dcl  def_idx fixed bin;				/* binary_def index */

dcl  code fixed bin (35);				/* Standard system status code */
dcl  cpu_cnt fixed bin init (0);			/* Number of CPUs requested */

dcl  expand_sw bit (1) init ("0"b);			/* Set if user just wants hregs interpreted */

dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
dcl  for_len fixed bin;				/* Saved length of -for argument */
dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
dcl  for_time fixed bin (71);				/* Time specified on -for */
dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
dcl  from_time fixed bin (71);			/* Time specified on -from */

dcl  scan_text bit (1) init ("0"b);			/* Set if -match used */
dcl  match_sw bit (1) init ("0"b);			/* Set if -match used */
dcl  exclude_sw bit (1) init ("0"b);			/* Set if -exclude used */

dcl  hr_switches bit (5);
dcl  mask bit (36) aligned init ("0"b);			/* Mask of significant bits in status word */
dcl  more_args bit (1);				/* Set while there are more arguments to scan */
dcl  area_ptr ptr init (null);			/* Free area pointer */
dcl  free_area area based (area_ptr);			/* Free area for allocating strings */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  msg_time fixed bin (71);				/* Time of syserr message */

dcl  only_scu bit (1) init ("0"b);			/* 1 => don't display hregs */
dcl  open_status bit (36) aligned;			/* Code from syserr_log_util_$open */
dcl  plural_sw bit (1);
dcl  ptr_array (1) ptr;				/* An array of pointers as required by get_temp_segment_ */
dcl  (print_cnt, read_cnt) fixed bin init (-1);

dcl  segs_allocated bit (1) init ("0"b);		/* Set after work segments created */
dcl  tab_cnt fixed bin init (0);			/* Number of seperate status found */
dcl  thread_sw bit (1) init ("1"b);			/* Set to thread hregs */
dcl  (tm1, tm2) char (24);				/* Used to call date_time_ */
dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
dcl  to_time fixed bin (71);				/* Time specified on -to */

dcl  workp ptr;					/* Pointer to work segment */
dcl  1 work aligned based (workp),			/* Declaration of work segment */
       2 cpureq (8) char (1),				/* Table of requested CPUs */
       2 buffer (500) bit (36) aligned;			/* Syserr messages are read here */

dcl  ctext char (512);				/* Text of current message */
dcl  ctextl fixed bin;				/* Length of current message */
dcl  1 string_data based,				/* Data for match or exclude */
       2 first ptr,					/* Pointer to first string */
       2 last ptr,					/* Pointer to last string */
       2 count fixed bin init (0);			/* Number of strings in list */

dcl  1 match_data like string_data automatic;		/* List of match strings */
dcl  1 exclude_data like string_data automatic;		/* List of exclude strings */

dcl  1 str aligned based,				/* Structure allocated for each string */
       2 next ptr init (null),			/* Pointer to next in list */
       2 len fixed bin init (arg_len),			/* Length of messaage */
       2 data char (arg_len refer (str.len));		/* The string */

/* Constants */

dcl  name char (17) int static options (constant) init ("display_cpu_error");
						/* Name of procedure */

/* External entries */

dcl  com_err_ entry options (variable);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cv_bin_$oct entry (fixed bin, char (12));
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl  db_print entry (ptr, char (*) aligned, ptr, char (*), fixed bin, fixed bin, ptr, fixed bin, fixed bin);
dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  hran_$hranl entry (ptr, ptr, bit (1));
dcl  hran_$no_thread entry (ptr, ptr, bit (5));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  iox_$user_output ptr ext;
dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  syserr_log_util_$close entry (fixed bin (35));
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));

dcl  cleanup condition;

dcl  (length, fixed, addr, addrel, baseptr, substr, null, hbound, lbound, bin, index, rtrim, unspec, verify) builtin;

%page;
/* Initialization */

	on cleanup call clean_up;

	call get_temp_segments_ (name, ptr_array, code);	/* Get a work segment */
	if code ^= 0 then do;
	     call com_err_ (code, name, "Can't get temp segment");
	     go to done;
	     end;
	segs_allocated = "1"b;			/* Recpuber that they are allocated */
	workp = ptr_array (1);			/* Copy pointer to my segment */

	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
	call cu_$arg_count (arg_count);		/* And the length */
	more_args = (arg_count > 0);			/* Set if args to scan */
	call scan_args;				/* Scan the argument list */

	call syserr_log_util_$open (open_status, code);	/* Open the syserr log */
	if code ^= 0 | substr (open_status, 1, 2) ^= "11"b then do;
						/* If error */
	     call print_syserr_msg_$open_err (open_status, name, code);
	     if code ^= 0 then go to done;		/* Not recoverable */
	     end;

	if ^from_sw then do;			/* No -from, so start at beginning */
	     call syserr_log_util_$search (0, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Can't find first message in log.");
		go to done;
		end;
	     from_time = msg_time;			/* Official starting time */
	     end;
	else do;					/* -from used, find right message */
	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Locating first message requested.");
		go to done;
		end;
	     end;

	if for_sw then do;				/* Now can compute -for limit */
	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "-for ^a", for_arg);
		go to done;
		end;
	     to_sw = "1"b;				/* Now, just as if -to was specified */
	     end;
	if ^to_sw then to_time = from_time;		/* Initialize last message time */

	syserr_msgp = addr (work.buffer);		/* Read here */
%page;

	call print_header;

/* Loop thru the file */
	read_cnt = 0;
loop:
	call syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
	if code ^= 0 then do;
	     if code = error_table_$end_of_info then go to done;
	     call com_err_ (code, name, "Reading syserr log");
	     go to done;
	     end;

	read_cnt = read_cnt + 1;
	if to_sw then do;				/* If time limit */
	     if syserr_msg.time > to_time then go to done;
	     end;
	else to_time = syserr_msg.time;		/* Save last message time */

	if scan_text then do;
	     do def_idx = lbound (display_cpu_error_binary_defs, 1) to hbound (display_cpu_error_binary_defs, 1);
		if display_cpu_error_binary_defs (def_idx) = syserr_msg.data_code then goto continue_check;
	     end;
	     goto loop;				/* wrong type */

continue_check:
	     if syserr_msg.data_size <= 0 then goto loop; /* no binary data */
	     ctextl = syserr_msg.text_len;		/* Save length */
	     substr (ctext, 1, ctextl) = syserr_msg.text; /* Save data */
	     if match_sw
	     then					/* If matching strings */
		if ^match_string (addr (match_data)) then goto loop;
	     if exclude_sw
	     then					/* If excluding by string */
		if match_string (addr (exclude_data)) then goto loop;
	     call print_it;
	     goto loop;
	     end;					/* DEFAULT */
	if syserr_msg.data_code = SB_hw_fault & syserr_msg.data_size > 0 then call print_it;
	go to loop;

/* End of log reached */

/* End of command */

done:
	if print_cnt = 0 then do;			/* if no messages printed */
	     if read_cnt = 0 then plural_sw = "1"b;
	     call com_err_ (0, name, "No messages matched criteria given. ^d message^v(s ^) read.", read_cnt, plural_sw)
		;
	     end;


	call clean_up;
	return;

miss_err:
	call com_err_ (0, name, "Argument required after ^a.", arg_copy);
	goto done;
%page;
/* Procedure to scan the argument list */

scan_args:
     proc;

	do while (more_args);			/* Do while thins to look at */
	     call get_arg;
	     if arg = "-from" | arg = "-fm" then do;	/* Start time */
		from_sw = "1"b;
		call time_arg (from_time);
		end;
	     else if arg = "-to" then do;		/* Ending time */
		to_sw = "1"b;
		call time_arg (to_time);
		end;
	     else if arg = "-for" then do;		/* Time limit */
		for_sw = "1"b;
		call time_arg (for_time);		/* For syntax checking only */
		for_len = arg_len;			/* Save pointer to this argument */
		for_ptr = arg_ptr;
		end;
	     else if arg = "-expand" | arg = "-exp" then do;
		thread_sw = "0"b;
		expand_sw = "1"b;
		end;
	     else if arg = "-nothread" then thread_sw = "0"b;
	     else if arg = "-mc" then only_scu = "1"b;
	     else if arg = "-cpu" then do;		/* List of CPUs */
		if ^more_args then do;		/* Need more args */
no_cpu:
		     call com_err_ (0, name, "Argument missing after -cpu");
		     go to done;
		     end;
		call get_arg;
		if verify (arg, CPU_TAGS) ^= 0 then do;
new_cpu:
		     call com_err_ (0, name, "Invalid CPU Tag(s) ^a", arg);
		     return;
		     end;

		if arg_len > 8 then do;
		     call com_err_ (0, name, "Too many CPUs specified (^a).", arg);
		     return;
		     end;

		do argc = 1 to arg_len;
		     work.cpureq (argc) = substr (arg, argc, 1);
		     cpu_cnt = cpu_cnt + 1;		/* Count CPU found */
		end;
		end;

	     else if arg = "-all" | arg = "-a" then scan_text = "1"b;
						/* scan all valid syserr types. */
	     else if arg = "-match" then do;
		call string_check (addr (match_data));	/* Add to match string */
		match_sw = "1"b;
		scan_text = "1"b;
		end;

	     else if arg = "-exclude" | arg = "-ex" then do;
		call string_check (addr (exclude_data));/* Add to exclude list */
		exclude_sw = "1"b;
		scan_text = "1"b;
		end;

	     else do;				/* Bad arg */
		call com_err_ (error_table_$badopt, name, "^a", arg);
		go to done;
		end;
	end;

	if to_sw & for_sw then do;			/* Conflict */
	     call com_err_ (0, name, "Conflicting arguments: -to and -for");
	     go to done;
	     end;

	return;

     end scan_args;
%page;
/* Procedure to return the next argument from command line */

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then do;			/* Should never happen */
	     call com_err_ (code, name, "Arg ^d", arg_no);
	     go to done;
	     end;
	arg_no = arg_no + 1;			/* For next call */
	more_args = (arg_no <= arg_count);
	return;

put_arg:
     entry;					/* Entry to return argument after scanning too far */
	arg_no = arg_no - 1;
	more_args = (arg_no <= arg_count);
	return;

     end get_arg;

/* Procedure to convert a time argument */

time_arg:
     proc (t);

dcl  arg_copy char (10) var;				/* Save copy of arg here */
dcl  t fixed bin (71);				/* The time to ouput */


	arg_copy = arg;
	if ^more_args then do;			/* Must be more */
	     call com_err_ (0, name, "Argument required after ^a.", arg_copy);
	     go to done;
	     end;
	call get_arg;
	call convert_date_to_binary_ (arg, t, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "^a ^a", arg_copy, arg);
	     go to done;
	     end;

	return;

     end time_arg;
%page;
/* Procedure to add a string to list of strings */

string_check:
     proc (p);

dcl  p ptr;					/* Pointer to header block */
dcl  1 sdata like string_data based (p);		/* The header block */
dcl  link ptr;					/* A temp pointer */

	arg_copy = arg;				/* Save copy of control argument */
	if ^more_args then go to miss_err;		/* Another argument is needed */
	call get_arg;				/* So get it */
	if area_ptr = null then area_ptr = get_system_free_area_ ();
						/* If this is first allocate */
scheck:
	allocate str in (free_area) set (link);
	if sdata.count = 0
	then sdata.first = link;			/* If first in chain */
	else sdata.last -> str.next = link;		/* If not first, add to chain */
	sdata.last = link;				/* This is last in chain */
	sdata.count = sdata.count + 1;		/* Count it */
	link -> str.data = arg;			/* Copy the real string */
	if ^more_args then return;			/* If no more args, then all done here */
	call get_arg;				/* Get next arg */
	if substr (arg, 1, 1) ^= "-" then go to scheck;	/* If not control arg, treat as string */
	call put_arg;				/* Return argument so next user can get it */
	return;

     end string_check;
%page;
/* Procedure to match a string */

match_string:
     proc (p) returns (bit (1) aligned);

dcl  (p, q) ptr;
dcl  1 mdata like string_data based (p);		/* String list structure */

	if mdata.count = 0 then return ("0"b);		/* Return no if list empty */
	q = mdata.first;				/* Get first in list */
	do while (q ^= null);			/* Do until end */
	     if index (substr (ctext, 1, ctextl), q -> str.data) ^= 0 then return ("1"b);
	     q = q -> str.next;
	end;

	return ("0"b);				/* No match */

     end match_string;
%page;
/* Procedure to print a cpu error entry */

print_it:
     proc;

dcl  PRS (0:7) ptr aligned;
dcl  cpu char (1);
dcl  cpu_tag (8) char (1) init ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  error_msg char (100) aligned;
dcl  found bit (1);
dcl  hr_ptr ptr;
dcl  tcpu char (1);
dcl  (i, j) fixed bin;

	found = "0"b;
	fmsgp = addr (syserr_msg.data);
	scup = addr (mach_cond.scu);
	hr_ptr = addr (fault_msg.hist_reg);
	i = index (syserr_msg.text, " CPU ");
	if i = 0 then do;
	     if cpu_cnt = 0 then goto p_data;		/* any CPU */
	     i = fixed (scu.cpu_no, 17) + 1;
	     cpu = cpu_tag (i);
	     do j = 1 to cpu_cnt while (found = "0"b);
		if cpu = work.cpureq (j) then found = "1"b;
	     end;
	     if ^found then return;			/* This cpu not in list */
	     goto p_data;
	     end;
	tcpu = substr (syserr_msg.text, i + 5, 1);
	cpu = cpu_tag (index ("ABCDEFGH", tcpu));
	if cpu_cnt > 0
	then do j = 1 to cpu_cnt while (found = "0"b);
	     if cpu = work.cpureq (j) then found = "1"b;
	end;

	if cpu_cnt > 0
	then if ^found then return;			/*  don't count this one */

p_data:						/* found one, print it */
	call ioa_ ("^/^a ^d^/^a", date_time_$format ("date_time", (syserr_msg.time), "", ""), syserr_msg.seq_num,
	     syserr_msg.text);
	unspec (PRS) = unspec (mach_cond.prs);
	call ioa_ ("^/Pointer Registers:^-^12p  ^12p  ^12p  ^12p^/^2-^12p  ^12p  ^12p  ^12p", PRS);
	call ioa_ (
	     "^/Index Registers:^-x0: ^6.3b x1: ^6.3b x2: ^6.3b x3: ^6.3b^/^2-x4: ^6.3b x5: ^6.3b x6: ^6.3b x7: ^6.3b",
	     mach_cond.x);
	call ioa_ ("^2-A: ^w Q: ^w EXP: ^3.3b^/^2-Timer: ^9.3b Ring Alarm Reg: ^.3b^/", mach_cond.a, mach_cond.q,
	     "0"b || mach_cond.e, mach_cond.t, mach_cond.ralr);
	if mach_cond.mask ^= "0"b
	then call ioa_ ("Memory Controller Mask: ^12.3b ^12.3b", substr (mach_cond.mask, 1, 36),
		substr (mach_cond.mask, 37, 36));
	if mach_cond.errcode ^= 0 then do;
	     call convert_status_code_ ((mach_cond.errcode), (""), error_msg);
	     call ioa_ ("MC.ERRCODE:^/^a", rtrim (error_msg));
	     end;

	call ioa_ ("MC Fault Time: ^a  (^18.3b)",
	     date_time_$format ("date_time", fixed (mach_cond.fault_time, 71), "", ""), mach_cond.fault_time);
	call interpret_fault_reg ((mach_cond.fault_reg));
	if mach_cond.cpu_type ^= 0
	then if mach_cond.ext_fault_reg ^= "0"b then call interpret_ext_fault_reg ((mach_cond.ext_fault_reg));
	if scu.mif then call ioa_ ("EIS Info:^-^w ^w ^w ^w^/^-^w ^w ^w ^w", mach_cond.eis_info);

	call ioa_ ("^/SCU Data:^2-^w ^w ^w ^w^/^2-^w ^w ^w ^w^/", mach_cond.scu);
	call interp_scu (scup);
	print_cnt = print_cnt + 1;
	if only_scu = "1"b then return;

	hr_switches = expand_sw || "1"b || "1"b || "1"b || "1"b;
	call ioa_ ("^/History Register Data:^/");
	if thread_sw
	then call hran_$hranl (hr_ptr, null, "0"b);
	else call hran_$no_thread (hr_ptr, null, hr_switches);

	return;

     end print_it;
%page;

/* Procedure to print the header line */

print_header:
     proc;


	tm1 = date_time_$format ("date_time", from_time, "", "");
						/* Starting time is easy */

	if to_sw
	then tm2 = date_time_$format ("date_time", to_time, "", "");
						/* Stop time is easy if given */
	else do;					/* Otherwise get last message  */
	     call syserr_log_util_$search (-1, msg_time, msg_seq, code);
						/* Search to eof */
	     if code ^= 0 then do;			/* Should not fail */
log_err:
		call com_err_ (code, name, "From syserr_log_util_$search.");
		return;
		end;

	     tm2 = date_time_$format ("date_time", msg_time, "", "");
						/* Edit time */
	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
						/* Back to first msg */
	     if code ^= 0 then go to log_err;
	     end;

	call ioa_ ("^/Syserr log from ^a to ^a", tm1, tm2);
	print_cnt = 0;
	return;

     end print_header;


%page;
/* Cleanup handler */

clean_up:
     proc;

	call syserr_log_util_$close (code);

	if segs_allocated then do;
	     segs_allocated = "0"b;
	     call release_temp_segments_ (name, ptr_array, code);
	     end;
	return;

     end clean_up;
%page;
/* Internal procedure to print fault reg data */

interpret_fault_reg:
     proc (fault_reg);

dcl  fault_reg bit (36);
dcl  (fault_no, break) fixed bin;
dcl  1 illeg_acts based (addr (fault_reg)),
       (
       2 pad bit (16),
       2 IA (4) bit (4),
       2 pad1 bit (4)
       ) unal;
dcl  port_name (4) char (3) int static options (constant) init ("A: ", "B: ", "C: ", "D: ");

dcl  (line1, line2) char (80) varying;
dcl  (line1_sw, line2_sw) bit (1) init ("0"b);

dcl  FAULT_TYPES (36) char (15) var int static options (constant)
	init ("ILL OP", "ILL MOD", "ILL SLV", "ILL PROC", "NEM", "OOB", "WRT INH", "PROC PAR-UPR", "PROC PAR-LWR",
	"$CON A", "$CON B", "$CON C", "$CON D", "ONC (DA ERR1)", "ONC (DA ERR2)", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "CACHE-PAR DIR", "CACHE-PAR STR", "CACHE-PAR IA", "CACHE-PAR BLK");


dcl  SC_IA_TYPES (1:15) char (42) var int static options (constant)
	init ("Unassigned (01)", "Non-existent Address (02)", "Stop on Condition (03)", "Unassigned (04)",
	"Data Parity, Store to SC (05)", "Data Parity in Store (06)", "Data Parity in Store AND Store to SC (07)",
	"Not Control (10)", "Port Not Enabled (11)", "Illegal Command (12)", "Store Not Ready ( 13)",
	"ZAC Parity, Active Module to SC (14)", "Data Parity, Active Module to SC (15)", "ZAC Parity, SC to Store (16)",
	"Data Parity, SC to Store (17)");


	if fault_reg = "0"b then return;


	line1, line2 = "";

	do fault_no = 1 to 15;
	     if substr (fault_reg, fault_no, 1) = "1"b then do;
		line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		line1_sw = "1"b;
		end;
	end;

	break = 0;
	do fault_no = 1 to 4 while (break = 0);		/* do IAs now */
	     if IA (fault_no) then do;
		line2 = "Ilegal Action on CPU Port " || port_name (fault_no);
		line2 = line2 || SC_IA_TYPES (bin (IA (fault_no), 4)) || ", ";
		line2_sw = "1"b;
		break = 1;
		end;
	end;

	do fault_no = 33 to 36;
	     if substr (fault_reg, fault_no, 1) = "1"b then do;
		line1 = line1 || FAULT_TYPES (fault_no) || ", ";
		line1_sw = "1"b;
		end;
	end;

	if line1_sw
	then					/* remove trailing comma & space */
	     line1 = substr (line1, 1, (length (line1) - 2));
	if line2_sw then line2 = substr (line2, 1, (length (line2) - 2));

	call ioa_ ("^/Fault Register:^-^w^[  (^a)^;^s^]^[^/^18t(^a)^]", fault_reg, line1_sw, line1, line2_sw, line2);

	return;

%page;
interpret_ext_fault_reg:
     entry (ext_fault_reg);

dcl  ext_fault_reg bit (15);
dcl  indx fixed bin;

dcl  EXT_FAULT_TYPES (15) char (39) var int static options (constant)
	init ("Bffr. Ovflw - Port A", "Bffr. Ovflw - Port B", "Bffr. Ovflw - Port C", "Bffr. Ovflw - Port D",
	"Bffr. Ovflw - Primary Dir", "Write Notify Parity Error on ANY Port", "Dup. Dir. LVL 0 Parity Error",
	"Dup. Dir. LVL 1 Parity Error", "Dup. Dir. LVL 2 Parity Error", "Dup. Dir. LVL 3 Parity Error",
	"Dup. Dir. Multi Match Error", "PTW Ass. Mem. Parity Error", "PTW Ass. Mem. Match Error",
	"SDW Ass. Mem. Parity Error", "SDW Ass. Mem. Match Error");


	line1 = "";
	do indx = 1 to 15;
	     if substr (ext_fault_reg, indx, 1) = "1"b then line1 = line1 || EXT_FAULT_TYPES (indx) || ", ";
	end;

	if line1 ^= "" then do;
	     line1 = substr (line1, 1, (length (line1) - 2));
	     call ioa_ ("^/DPS8 Extended Fault Register: ^5.3b^/^32t(^a)", ext_fault_reg, line1);
	     end;


	return;


     end interpret_fault_reg;


%page;
interp_scu:
     proc (scup);

dcl  at_by_wd char (2);
dcl  cpul (0:7) char (1) int static options (constant) init ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  cvbinbuf char (12);
dcl  flt_bf char (24) varying;
dcl  flt_ln char (100);
dcl  fltdtab (0:35) bit (1) based (byptr) unaligned;
dcl  iocbp ptr;
dcl  scup ptr;					/* pointer to SCU Data */
dcl  TAG_ptr ptr;					/* pointer to tag table */
dcl  1 TAG (64) based (TAG_ptr),
       2 code char (4) unal,
       2 pad bit (8) unal,
       2 chain bit (1);

dcl  tag_prt bit (1) init ("0"b);
dcl  tag_ char (4) init ("");
dcl  (lnpos, flt_lng, inst6, i, j) fixed bin;
dcl  (byptr, refptr) ptr;
dcl  tsrpr bit (1);

dcl  1 scud based (scup) aligned,
       2 wd0 unaligned,				/* :: */
         3 prr bit (3),				/* Procedure Ring Register */
         3 psr bit (15),				/* Procedure Segment Register */
         3 apust bit (18),				/* APU Status */
       2 wd1 unaligned,				/* :: */
         3 fid bit (20),				/* fault/interrupt data */
         3 ill_act_lns bit (4),			/* Illegal Action Lines */
         3 ill_act_chan bit (3),			/* Illegal Action Channel (Port) */
         3 con_chan bit (3),				/* Connect Channel (Port) */
         3 fi bit (6),				/* Fault/Interrupt Vector Address */
       2 wd2 unaligned,				/* :: */
         3 trr bit (3),				/* Temporary Ring Register */
         3 tsr bit (15),				/* Temporary Segment Register */
         3 mbz bit (9),				/* :: */
         3 cpu bit (3),				/* Processor Number */
         3 tmd bit (6),				/* :: */
       2 wd3 fixed bin (35),				/* :: */
       2 wd4 unaligned,				/* :: */
         3 ict bit (18),				/* Instruction Counter */
         3 ir bit (18),				/* Indicator Register */
       2 wd5 unaligned,				/* :: */
         3 ca bit (18),				/* Computed Address */
         3 cus bit (12),				/* CU Status */
         3 ct_hold bit (6),				/* remember mod field */
       2 wd6 fixed bin (35),				/* Even Instruction */
       2 wd7 fixed bin (35);				/* Odd Instruction */

/* Constants */

dcl  ill_act (0:15) char (37) varying int static options (constant)
	init ("...", "Unassigned", "Non Existent Address", "Fault on Condition", "Unassigned",
	"Data Parity (Store -> SCU)", "Data Parity in Store", "Data Parity (Store -> SCU & in Store)", "Not Control",
	"Port Not Enabled", "Illegal Command", "Store Not Ready", "ZAC Parity (Processor -> SCU)",
	"Data Parity (Processor -> SCU)", "ZAC parity (SCU -> Store)", "Data Parity (SCU -> Store)");

dcl  indrs (18:31) char (4) varying int static options (constant)
	init ("zero", "neg", "cary", "ovfl", "eovf", "eufl", "oflm", "tro", "par", "parm", "^bar", "tru", "mif", "abs");

dcl  APU (18:32) char (6) varying int static options (constant)
	init ("priv", "xsf", "sdwamm", "sd-on", "ptwamm", "pt-on", "pi-ap", "dsptw", "sdwnp", "sdwp", "ptw", "ptw2",
	"fap", "fanp", "fabs");

dcl  CU (18:29) char (3) varying int static options (constant)
	init ("rf", "rpt", "rd", "rl", "pot", "pon", "xde", "xdo", "itp", "rfi", "its", "fif");

dcl  g1and7flts (5) bit (6) int static options (constant) unaligned init ("01"b3, "11"b3, "21"b3, "31"b3, "37"b3);

dcl  grp1flt (0:19) char (24) varying int static options (constant)
	init ("Illegal Ring Order", "Not in Execute Bracket", "Execute Bit off", "Not In Read Bracket", "Read Bit Off",
	"Not In Write Bracket", "Write Bit Off", "Not A Gate", "Not In Call Bracket", "Outward Call",
	"Bad Outward Call", "Inward Return", "Cross Ring Transfer", "Ring Alarm", "Associative Memory",
	"Out of Segment Bounds", "Processor Parity Upper", "Processor Parity Lower", "SC To Proc. Seq. Error 1",
	"SC To Proc. Seq. Error 2");

dcl  grp2flt (0:6) char (24) varying int static options (constant)
	init ("Illegal Segment Number", "Illegal Op Code", "Illegal Address & Mod", "Illegal Slave Procedure",
	"Illegal Procedure", "Non Existent Address", "Out Of Bounds");

dcl  flt_int_typ (0:63) char (24) varying int static options (constant)
	init ("...", "Shutdown", "...", "Store", "Bulk Store 0 Term", "MME 1", "...", "Fault Tag 1", "IOM 0 Overhead",
	"Timer Runout", "IOM 1 Overhead", "Command", "IOM 2 Overhead", "Derail", "IOM 3 Overhead", "Lockup",
	"IOM 0 Terminate Ch 40-77", "Connect", "IOM 1 Terminate Ch 40-77", "Parity", "Bulk Store 1 Term",
	"Illegal Procedure", "...", "Op Not Complete", "IOM 0 Terminate", "Startup", "IOM 1 Terminate", "Overflow",
	"IOM 2 Terminate", "Divide Check", "IOM 3 Terminate", "Execute", "IOM 0 Marker Ch 40-77", "(DF0) Segment",
	"IOM 1 Marker Ch 40-77", "(DF1) Page", "...", "Directed Fault 2", "...", "Directed Fault 3", "IOM 0 Marker",
	"Access Violation", "IOM 1 Marker", "MME 2", "IOM 2 Marker", "MME 3", "IOM 3 Marker", "MME 4", "...",
	"(FT2) Linkage", "...", "Fault Tag 3", "...", "...", "...", "...", "IOM 0 Special", "...", "IOM 1 Special",
	"...", "IOM 2 Special", "...", "IOM 3 Special", "Trouble");

dcl  TAG_table (8) char (40) int static options (constant) init (
						/* tag table */
	"     au   qu   du   ic   al   ql   dl   ", "x0   x1   x2   x3   x4   x5   x6   x7   ",
	"n*  aau* aqu* ailtg ic* aal* aql* ailtg ", "0*  a1*  a2*  a3*  a4*  a5*  a6*  a7*  a",
	"fi   itp  iltg its  sd   scr  f2   f3   ", "ci   i    sc   ad   di   dic aid   idc a",
	"*n   *au  *qu  iltg *ic  *al  *ql  iltg ", "*0   *1   *2   *3   *4   *5   *6   *7   ");

%page;

	flt_ln, flt_bf = "";
	tsrpr = "0"b;
	flt_bf = flt_int_typ (fixed (scud.wd1.fi, 6));
	if substr (flt_bf, 1, 3) = "..."
	then call ioa_ ("^/Fault/Interrupt (^o), Undefined", fixed (scud.wd1.fi, 6));
	else do;
	     flt_lng = length (flt_int_typ (fixed (scud.wd1.fi, 6)));
	     substr (flt_ln, 1, flt_lng) = substr (flt_bf, 1, flt_lng);
	     byptr = addrel (scup, 1);
	     if fltdtab (35) = "1"b then do;
		substr (flt_ln, flt_lng + 2, 5) = "Fault";
		lnpos = flt_lng + 8;
		do i = 1 to hbound (g1and7flts, 1);	/*  If grp 1 or 7 faults, don't print out tsr|ca */
		     if scud.wd1.fi = g1and7flts (i) then tsrpr = "1"b;
		end;
		end;
	     else do;
		substr (flt_ln, flt_lng + 2, 9) = "Interrupt";
		lnpos = flt_lng + 12;
		tsrpr = "1"b;			/* don't print out tsr|ca for interrupts */
		end;
	     flt_lng = fixed (scud.wd1.fi, 6);
	     call cv_bin_$oct (flt_lng, cvbinbuf);
	     substr (flt_ln, lnpos, 4) = "(" || substr (cvbinbuf, 11, 2) || ")";
	     lnpos = lnpos + 4;
	     j = lnpos;
	     do i = 0 to hbound (grp1flt, 1);
		if fltdtab (i) then do;
		     if substr (flt_ln, 1, 5) = "Store" | substr (flt_ln, 1, 12) = "Illegal Proc"
		     then if i <= 6
			then call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp2flt (i));
			else ;
		     else call ioa_$rsnnl ("^a, ^a", flt_ln, j, flt_ln, grp1flt (i));
		     end;
	     end;
	     call ioa_ ("^a", flt_ln);
	     end;
	if ill_act_lns ^= "0"b then do;		/* display illegal action lines if present */
	     call ioa_ ("Illegal Action Code (^o) - ^a", fixed (scud.wd1.ill_act_lns, 4),
		ill_act (fixed (scud.wd1.ill_act_lns, 4)));
	     end;
	if tsrpr
	then at_by_wd = "At";			/* if not printing tsr */
	else at_by_wd = "By";
	byptr = addrel (baseptr (fixed (scud.wd0.psr, 18)), fixed (scud.wd4.ict, 18));
	if ^tsrpr then refptr = addrel (baseptr (fixed (scud.wd2.tsr, 18)), fixed (scud.wd5.ca, 18));
	call ioa_ ("^a: ^p", at_by_wd, byptr);
	if ^tsrpr
	then					/* if we want to print out tsr|ca */
	     call ioa_ ("Referencing: ^p", refptr);
	call ioa_ ("On: cpu ^a (#^o)", cpul (fixed (scud.wd2.cpu, 3)), fixed (scud.wd2.cpu, 3));
	flt_ln = "";
	byptr = addr (scud.wd4);			/* display Indicator register if any bits present */
	do i = lbound (indrs, 1) to hbound (indrs, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, indrs (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("Indicators: ^a", flt_ln);
	     flt_ln = "";
	     end;
	byptr = addr (scud.wd0);			/* display interpreted APU status if any bits present */
	do i = lbound (APU, 1) to hbound (APU, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, APU (i));
	end;
	if flt_ln ^= "" then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("APU Status: ^a", flt_ln);
	     flt_ln = "";
	     end;
	byptr = addr (scud.wd5);			/* display interprted CU status if any bits present */
	do i = lbound (CU, 1) to hbound (CU, 1);
	     if fltdtab (i) then call ioa_$rsnnl ("^a ^a,", flt_ln, j, flt_ln, CU (i));
	end;

	TAG_ptr = addr (TAG_table);
	i = fixed (wd5.ct_hold);

	if i ^= 0 then do;
	     tag_ = TAG.code (i + 1);
	     tag_prt = "1"b;
	     end;

	if (flt_ln ^= "") | (tag_ ^= "") then do;
	     substr (flt_ln, j, 1) = " ";
	     call ioa_ ("CU Status:  ^a  ^[^/CT Hold: ^a^]", flt_ln, tag_prt, tag_);
	     end;

	iocbp = iox_$user_output;
	call ioa_ ("Instructions: ");			/* display Instructions (words 6 & 7) */
	call db_print (iocbp, iocbp -> iocb.name, addr (scud.wd6), "i", inst6, 1, null, 0, 0);

	call db_print (iocbp, iocbp -> iocb.name, addr (scud.wd7), "i", inst6 + 1, 1, null, 0, 0);
	return;

     end interp_scu;
%page;
%include syserr_message;
%page;
%include syserr_binary_def;
%page;
%include syserr_fault_msg;
%page;
%include mc;
%page;
%include iocb;


     end display_cpu_error;
