/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
display_anst: proc;

/* DISPLAY_ANST - dump answer table on console.

   THVV

   Modified by T. Casey, August 1975 to add dump_autbl and dump_dutbl
   Modified by D. M. Wells, July 1976, to understand about FTP channels
   Modified by G. C. Dixon, April 1978:  rename entry points to
   display_anst, display_aut & display_dut and standardize control arguments.
   Modified by E. N. Kittlitz, September 1982: merge in old dump_anstbl entries.

*/


/****^  HISTORY COMMENTS:
  1) change(87-05-31,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-24,Hartogs), install(87-08-04,MR12.1-1055):
      A) Expand length of -channel operand to hold up to 32 characters.
      B) Allow -channel operand to be a starname.
                                                   END HISTORY COMMENTS */


dcl  al fixed bin (21);
dcl  ansp ptr;
dcl  ap ptr;
dcl  argc fixed bin;
dcl  argn fixed bin;
dcl  bchr char (al) based (ap) unaligned;
dcl  dn char (168);
dcl  ec fixed bin (35);
dcl  en char (32);
dcl  entry_sw fixed bin;
dcl  hdr bit (1) aligned init ("1"b);
dcl  mode fixed bin init (1);
dcl  oct bit (1) aligned init ("0"b);
dcl  old_dump bit (1) aligned;
dcl  path char (168);
dcl  sch_tty char (32) aligned init ("");
dcl  sch_user char (32) aligned init ("");
dcl  star_type fixed bin(2);
dcl  whoami char (12);

dcl  entry_var variable entry (ptr, bit (1) aligned, bit (1) aligned, fixed bin,
	char (*) aligned, char (*) aligned, char (*) aligned);

dcl  ANS fixed bin init (1) static options (constant);
dcl  AUT fixed bin init (2) static options (constant);
dcl  DUT fixed bin init (3) static options (constant);

dcl  (char, null) builtin;

dcl  cleanup condition;

dcl  check_star_name_ entry (char(*), bit(36), fixed bin(2), fixed bin(35));
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  dump_anstbl_ entry (ptr, bit (1) aligned, bit (1) aligned, fixed bin, char (*) aligned, char (*) aligned, char (*) aligned);
dcl  dump_autbl_ entry (ptr, bit (1) aligned, bit (1) aligned, fixed bin, char (*) aligned, char (*) aligned, char (*) aligned);
dcl  dump_dutbl_ entry (ptr, bit (1) aligned, bit (1) aligned, fixed bin, char (*) aligned, char (*) aligned, char (*) aligned);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

dcl  error_table_$badopt fixed bin (35) ext;
%page;
/* -------------------------------------------------------- */

	whoami = "display_anst";
	old_dump = "0"b;
	go to ans_join;

dump_anstbl: entry;

	whoami = "dump_anstbl";
	old_dump = "1"b;

ans_join: path = ">system_control_1>answer_table";
	entry_sw = ANS;
	entry_var = dump_anstbl_;

JOIN:	ansp = null;
	on cleanup begin;
		if ansp ^= null then
		     call terminate_file_ (ansp, 0, TERM_FILE_TERM, (0));
	     end;
	call cu_$arg_count (argc, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, whoami);
	     go to exit;
	end;

	do argn = 1 to argc;
	     call cu_$arg_ptr (argn, ap, al, ec);
	     if char (bchr, 1) = "-" then do;
		if bchr = "-all" then mode = 0;
		else if bchr = "-a" then mode = 0;
		else if bchr = "-lock" then mode = 2;
		else if bchr = "-octal" then oct = "1"b;
		else if bchr = "-oc" then oct = "1"b;
		else if bchr = "-o" & old_dump then oct = "1"b;
		else if bchr = "-no_octal" | bchr = "-noc" then oct = "0"b;
		else if bchr = "-no_header" then hdr = "0"b;
		else if bchr = "-nhe" then hdr = "0"b;
		else if bchr = "-nh" & old_dump then hdr = "0"b;
		else if bchr = "-header" | bchr = "-he" then hdr = "1"b;
		else if bchr = "-name" | bchr = "-nm" |
			old_dump & bchr = "-user" then do;
		     argn = argn + 1;
		     if argn > argc then do;
no_arg:			call com_err_ (ec, whoami, "Control argument ^a requires an operand.", bchr);
			go to exit;
		     end;
		     call cu_$arg_ptr (argn, ap, al, ec);
		     if ec ^= 0 then do;
cu_fail:			call com_err_ (ec, whoami);
			go to exit;
		     end;
		     mode = 9;
		     sch_user = bchr;
		end;
		else if bchr = "-pathname" | bchr = "-pn" then do;
		     argn = argn + 1;
		     if argn > argc then go to no_arg;
		     call cu_$arg_ptr (argn, ap, al, ec);
		     if ec ^= 0 then go to cu_fail;
		     path = bchr;
		end;
		else if bchr = "-active" then mode = 1;
		else if bchr = "-dial" & entry_sw = ANS then mode = 4;
		else if bchr = "-in" then mode = 3;
		else if (bchr = "-channel" | bchr = "-chn") & entry_sw = ANS
		then do;
		     argn = argn + 1;
		     if argn > argc then go to no_arg;
		     call cu_$arg_ptr (argn, ap, al, ec);
		     if ec ^= 0 then go to cu_fail;
CHN:		     call check_star_name_ (bchr,
		          CHECK_STAR_ENTRY_DEFAULT, star_type, ec);
		     if ec ^= 0 then do;
			call com_err_ (ec, whoami, "channel ^a", bchr);
			go to exit;
		     end;
		     else if star_type = STAR_TYPE_MATCHES_EVERYTHING then;
		     else do;
			mode = 9;
			sch_tty = bchr;
		     end;
		end;
		else do;
bad_arg:		     call com_err_ (error_table_$badopt, whoami, "^a", bchr);
		     go to exit;
		end;
	     end;					/* first char is - */
	     else if old_dump then do;		/* old dump, first char not - */
		if char (bchr, 3) = "caa" |
		     char (bchr, 3) = "net" |
		     char (bchr, 3) = "ftp" |
		     char (bchr, 3) = "tty" then go to CHN;
		else path = bchr;			/* it's a pathname */
	     end;
	     else do;				/* new dump, first char not - */
	          go to CHN;
	     end;
nxarg:	end;

	call expand_pathname_ (path, dn, en, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, whoami, "^a", path);
	     go to exit;
	end;
	call initiate_file_ (dn, en, R_ACCESS, ansp, (0), ec);
	if ansp = null then do;
	     call com_err_ (ec, whoami, "^a", pathname_ (dn, en));
	     go to exit;
	end;

	call entry_var (ansp, hdr, oct, mode, sch_tty, sch_user, "user_output");

exit:	call terminate_file_ (ansp, 0, TERM_FILE_TERM, (0));
	return;


dump_autbl: entry;

	old_dump = "1"b;
	whoami = "dump_autbl";
	go to aut_join;

display_aut: entry;

	old_dump = ""b;
	whoami = "display_aut";

aut_join: path = ">system_control_dir>absentee_user_table";
	entry_var = dump_autbl_;
	entry_sw = AUT;
	goto JOIN;


dump_dutbl: entry;

	old_dump = "1"b;
	whoami = "dump_dutbl";
	go to dut_join;

display_dut: entry;

	old_dump = ""b;
	whoami = "display_dut";

dut_join: path = ">system_control_dir>daemon_user_table";
	entry_var = dump_dutbl_;
	entry_sw = DUT;
	goto JOIN;
%page; %include access_mode_values;
%page; %include check_star_name;
%page; %include terminate_file;

     end display_anst;
