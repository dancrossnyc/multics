/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* dump_cmf_, a subroutine to dump the CDT in the form of a CMF,
   such that cv_cmf could regenerate the CDT.

   Coded 5/11/76 by Mike Grady
   Modified November 1976 by T. Casey to generate Baud statements.
   Modified June 1977 by Robert Coren to use new terminal type field and new attributes.
   Modified April 1979 by Larry Johnson for new fnpe stuff.
   Modified 1979 May 25 by Art Beattie to accomodate change in cdt.incl.pl1.
   Modified 1/82 BIM for cdt threads.
   Modified January 1983 by Keith Loepere for generic_destination.
   Modified 84-03-22 BIM for removal of obsolete fields, full AIM.
*/

/* format: style2 */

dump_cmf_:
     proc (acdtp, switch);

	dcl     (acdtp, switch)	 ptr parameter;

	dcl     com_err_		 entry () options (variable),
	        date_time_		 entry (fixed bin (71), char (*)),
	        ioa_$ioa_switch	 entry options (variable),
	        ioa_$rsnnl		 entry options (variable),
	        system_info_$device_prices
				 entry (fixed bin, ptr),
	        system_info_$access_ceiling
				 entry (bit (72) aligned),
	        aim_check_$equal	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
	        convert_authorization_$from_string
				 entry (bit (72) aligned, character (*), fixed binary (35)),
	        convert_authorization_$to_string_range_short
				 entry ((2) bit (72) aligned, character (*), fixed binary (35));

	dcl     cdt_et_$salvage_cdt	 fixed bin (35) ext static;

	dcl     line		 char (160),
	        vline		 char (160) varying;

	dcl     (i, j, len, ndev)	 fixed bin,
	        code		 fixed bin (35);
	dcl     (dft_baud, next_baud, this_baud)
				 fixed bin;

	dcl     system_high		 bit (72) aligned,
	        system_low		 bit (72) aligned,
	        auth_bits		 bit (72) aligned;

	dcl     auth_done		 bit (1);

	dcl     lidx		 fixed bin,
	        count		 fixed bin;

	dcl     1 ac_table		 (10) aligned,
		2 auth_bits	 bit (72) aligned,
		2 count		 fixed bin;

	dcl     date_string		 char (24),
	        auth		 char (100);

	dcl     1 dvt		 (16) aligned,
		2 devid		 char (8),
		2 dev_prices	 (0:7) float;

	dcl     bb72		 bit (72) aligned based;

	dcl     service_types	 (8) char (12) static options (constant)
				 init ("login", "ftp", "mc", "slave", "", "autocall", "inactive", "multiplexer");
%page;
%include cdt;
%page;
%include author_dcl;
%page;
%include ttyp;
%page;
%include dataset_names;
%page;
%include line_types;
%page;
%include dialup_values;
%page;
%include multiplexer_types;


	cdtp = acdtp;
	line = "/* Automatically generated Channel Master File";
	call append_line;
	call date_time_ (clock (), date_string);
	line = "   Generated by display_cdt on " || date_string || " */";
	call append_line;
	line = "";
	call append_line;

	call system_info_$device_prices (ndev, addr (dvt));

	line = "Service:	login;";
	call append_line;
	line = "Charge:	none;";
	call append_line;
	line = "Terminal_type: none;";
	call append_line;
	line = "Line_type: none;";
	call append_line;
	line = "Attributes: none;";
	call append_line;
	line = "Check_acs: none;";
	call append_line;
	line = "Baud: 300;";
	call append_line;
	dft_baud = 300;

/* try and compute the correct access class */

	call system_info_$access_ceiling (system_high);	/* get sys high */
	call convert_authorization_$from_string (system_low, "system_low", code);
	line = "Access_class: ""system_low"";";		/* secure default is no access. Individuals will all be stated. Verbose, but effective. */
	call append_line;

	call ioa_$rsnnl ("FNP_required_up_time: ^d;", line, len, cdt.acceptable_fnp_tbf);
	call append_line;
	call ioa_$rsnnl ("Spare_channel_count: ^d;", line, len, cdt.spare_channel_count);
	call append_line;

	line = "";
	call append_line;

	do i = 1 to 8;				/* dump FNPs */
	     fnpep = addr (cdt.fnp_entry (i));
	     if fnpe.state ^= FNP_FREE
	     then call dump_fnpe;			/* recurses */
	end;

	line = "/* Other top level multiplexers: */";
	call append_line;
	line = "";
	call append_line;
	call dump_subtree (addr (cdt.threads), "Top level chain");

	line = "end;";
	call append_line;

	return;

dump_fnpe:
     proc;

	dcl     mpx_type		 fixed bin;

	mpx_type = fnpe.mpx_type;
	if mpx_type = 0
	then mpx_type = MCS_MPX;

	line = "FNP:	" || substr (collate (), rank ("A") + i, 1) || ";";
	call append_line;
	if fnpe.type ^= 0 | mpx_type = MCS_MPX
	then do;
		call ioa_$rsnnl ("   type:	^a;", line, len, fnp_types (fnpe.type));
		call append_line;
	     end;
	if fnpe.memory ^= 0 | mpx_type = MCS_MPX
	then do;
		call ioa_$rsnnl ("   memory: ^d;", line, len, fnpe.memory);
		call append_line;
	     end;
	if fnpe.nlslas ^= 0 | (fnpe.mpx_type = MCS_MPX & fnpe.type ^= DN6670)
	then do;
		call ioa_$rsnnl ("   lsla:	^d;", line, len, fnpe.nlslas);
		call append_line;
	     end;
	if fnpe.nhslas ^= 0 | mpx_type = MCS_MPX
	then do;
		call ioa_$rsnnl ("   hsla:	^d;", line, len, fnpe.nhslas);
		call append_line;
	     end;
	if mpx_type = MCS_MPX
	then do;
		call ioa_$rsnnl ("   image:	^a;", line, len, fnpe.coreimage);
		call append_line;
	     end;
	else if fnpe.coreimage ^= ""
	then do;
		call ioa_$rsnnl ("   additional_info: ""^a"";", line, len, fnpe.coreimage);
		call append_line;
	     end;
	if fnpe.service_type = INACTIVE
	then do;
		line = "   service: inactive;";
		call append_line;
	     end;
	if fnpe.mpx_type ^= 0
	then do;
		call ioa_$rsnnl ("   multiplexer_type: ^a;", line, len, mpx_types (fnpe.mpx_type));
		call append_line;
	     end;
	line = "";
	call append_line;
	if fnpe.daughter ^= 0
	then call dump_subtree (addr (fnpe.threads), "FNP " || substr (collate (), rank ("A") + i, 1));
	return;

     end dump_fnpe;


dump_subtree:
     procedure (tp, cname);

	declare tp		 pointer;
	declare 1 threads		 aligned like channel_threads based (tp);
	declare cname		 character (32) aligned;
	declare x			 fixed bin;
	declare ccount		 fixed bin;

	if threads.daughter_count = 0 | threads.daughter = 0
	then return;				/* for lazy callers */

	ccount = 0;
	do x = threads.daughter repeat (cdt.cdt_entry (x).next_sister) while (x ^= 0);
	     ccount = ccount + 1;
	     if ccount > threads.daughter_count | ccount > cdt.n_cdtes
	     then do;
		     call com_err_ (cdt_et_$salvage_cdt, "dump_cmf_", "Too many daughters(^d) for ^a", ccount, cname);
		     go to RETURN;
		end;
	     call dump_cdte (addr (cdt.cdt_entry (x)));
	     if cdt.cdt_entry (x).daughter ^= 0
	     then call dump_subtree (addr (cdt.cdt_entry (x).threads), cdt.cdt_entry (x).name);
	end;
     end dump_subtree;

dump_cdte:
     proc (CDTEp);
	declare CDTEp		 pointer;
	declare 1 CDTE		 aligned like cdte based (CDTEp);

	this_baud = CDTE.baud_rate;
	if CDTE.flags.autobaud
	then this_baud = -1;

	if this_baud ^= dft_baud
	then do;
		next_baud = addr (cdt.cdt_entry (i + 1)) -> CDTE.baud_rate;
		if addr (cdt.cdt_entry (i + 1)) -> CDTE.flags.autobaud
		then next_baud = -1;
		if next_baud = this_baud
		then do;
			dft_baud = this_baud;
			if dft_baud = -1
			then line = "Baud: auto;";
			else if dft_baud = 0
			then line = "Baud: none;";
			else call ioa_$rsnnl ("Baud: ^d;", line, len, dft_baud);
			call append_line;
		     end;
	     end;

	call ioa_$rsnnl ("name: ^a;", line, len, CDTE.name);
	call append_line;
	if this_baud ^= dft_baud
	then do;
		if this_baud = -1
		then line = "   baud: auto;";
		else if this_baud = 0
		then line = "   baud: none;";
		else call ioa_$rsnnl ("^3xbaud: ^d;", line, len, CDTE.baud_rate);
		call append_line;
	     end;
	if CDTE.service_type ^= ANS_SERVICE
	then do;
		call ioa_$rsnnl ("^3xservice: ^a;", line, len, service_types (CDTE.service_type));
		call append_line;
	     end;
	if CDTE.service_type = MPX_SERVICE
	then do;
		call ioa_$rsnnl ("^3xmultiplexer_type: ^a", line, len, mpx_types (CDTE.mpx_type));
		if CDTE.mpx_service = INACTIVE
		then call addto_line (", inactive");
		call addto_line (";");
		call append_line;
	     end;
	if CDTE.charge_type > 0
	then do;
		call ioa_$rsnnl ("^3xcharge: ^a;", line, len, dvt (CDTE.charge_type).devid);
		call append_line;
	     end;
	if CDTE.initial_terminal_type ^= ""
	then do;
		call ioa_$rsnnl ("^3xterminal_type: ^a;", line, len, CDTE.initial_terminal_type);
		call append_line;
	     end;
	if CDTE.line_type > 0 | CDTE.line_type = -1
	then do;
		call ioa_$rsnnl ("^3xline_type: ^a", line, len, line_types (CDTE.line_type));
		if CDTE.line_type = LINE_BSC
		then do;
			if CDTE.flags.bsc_ebcdic
			then call addto_line (", ebcdic");
			else call addto_line (", ascii");
			if CDTE.flags.bsc_transparent
			then call addto_line (", transparent");
			else call addto_line (", nontransparent");
		     end;
		call addto_line (";");
		call append_line;
	     end;
	if CDTE.modem_type > 0
	then do;
		call ioa_$rsnnl ("^3xdataset: ^a", line, len, dataset_names (CDTE.modem_type));
		if CDTE.flags.private_line
		then call addto_line (", private_line;");
		else call addto_line (";");
		call append_line;
	     end;
	if ^(aim_check_$equal (system_low, CDTE.access_class (1))
	     & aim_check_$equal (system_low, CDTE.access_class (2)))
	then do;
		call convert_authorization_$to_string_range_short (CDTE.access_class, auth, code);
		call ioa_$rsnnl ("^3xaccess_class: ""^a"";", line, len, auth);
		call append_line;
	     end;
	if CDTE.flags.ck_answerback & (addr (CDTE.answerback) -> bb72 ^= "0"b & CDTE.answerback ^= "")
	then do;
		call ioa_$rsnnl ("^3xanswerback: ""^a"";", line, len, CDTE.answerback);
		call append_line;
	     end;
	if string (CDTE.flags.attributes)
	then do;
		vline = "   attributes: ";
		if CDTE.flags.audit_access_error
		then vline = vline || "audit,";
		if CDTE.flags.hardwired
		then vline = vline || "hardwired,";
		if CDTE.flags.set_modes
		then vline = vline || "set_modes,";
		if CDTE.flags.ck_answerback
		then vline = vline || "check_answerback,";
		if CDTE.flags.dont_read_answerback
		then vline = vline || "dont_read_answerback,";
		substr (vline, length (vline), 1) = ";";
		line = vline;
		call append_line;
	     end;
	if string (CDTE.flags.access_control)
	then do;
		vline = "   check_acs: ";
		if CDTE.flags.dial_out
		then vline = vline || "dial_out,";
		if CDTE.flags.priv_attach
		then vline = vline || "priv_attach,";
		if CDTE.flags.dial_server
		then vline = vline || "dial_server,";
		if CDTE.flags.slave_dial
		then vline = vline || "slave_dial,";
		if CDTE.flags.login
		then vline = vline || "login,";
		substr (vline, length (vline), 1) = ";";
		line = vline;
		call append_line;
	     end;
	if CDTE.flags.execute_initial_command
	     & (addr (CDTE.initial_command) -> bb72 ^= "0"b & CDTE.initial_command ^= "")
	then do;
		call ioa_$rsnnl ("^3xinitial_command: ""^a"";", line, len, CDTE.initial_command);
		call append_line;
	     end;
	if CDTE.flags.generic_destination_present
	     & (addr (CDTE.initial_command) -> bb72 ^= "0"b & addr (CDTE.initial_command) -> generic_destination ^= "")
	then do;
		call ioa_$rsnnl ("^3xgeneric_destination: ""^a"";", line, len,
		     addr (CDTE.initial_command) -> generic_destination);
		call append_line;
	     end;
	if CDTE.comment ^= ""
	then do;					/* put comment last in case user wants to edit CMF to have entire */
		call ioa_$rsnnl ("^3xcomment: ""^a"";", line, len, CDTE.comment);
						/* channel entry on one line */
		call append_line;
	     end;

	line = "";
	call append_line;
	return;

     end;

append_line:
     proc;

	call ioa_$ioa_switch (switch, "^a", line);
	return;

     end;




addto_line:
     proc (thing);

	dcl     thing		 char (*);

	line = substr (line, 1, len) || thing;
	len = len + length (thing);
	return;

     end;




RETURN:
	return;

     end dump_cmf_;
