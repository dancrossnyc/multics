/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(84-12-01,Margulies), approve(), audit(), install():
     Pre-hcom comments.
     Written 1984-12, BIM.
     Modified 1985-02-20, BIM: For daemon and com channel info requests.
  2) change(86-11-24,Lippard), approve(86-11-24,PBF7326),
     audit(86-11-25,GDixon), install(86-11-25,MR12.0-1224):
     Modified to handle abs_command AS requests.
                                                   END HISTORY COMMENTS */


/* list_as_requests: lists and interprets all as requests in the message 
   segment */

/* format: style2,idind30 */

list_as_requests:
     procedure options (variable);

/**** This command is a very simple lister. It lists all requests
      unless the access present is only sufficient for own access.
      Fancy control args will just have to wait. */

	declare ssu_$standalone_invocation    entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	declare ssu_$destroy_invocation       entry (ptr);
	declare ssu_$abort_line	        entry () options (variable);
	declare ssu_$arg_count	        entry (ptr, fixed bin);
	declare ssu_$arg_ptr	        entry (ptr, fixed bin, ptr, fixed bin (21));
	declare com_err_		        entry () options (variable);
	declare cu_$arg_list_ptr	        entry returns (pointer);

	declare display_access_class_	        entry (bit (72) aligned) returns (character (32) aligned);
	declare get_user_free_area_	        entry returns (pointer);
	declare ioa_		        entry () options (variable);
	declare message_segment_$read_message_index
				        entry (fixed bin, ptr, ptr, fixed bin (35));
	declare message_segment_$open	        entry (char (*), char (*), fixed bin, fixed bin (35));
	declare message_segment_$close        entry (fixed bin, fixed bin (35));
	declare message_segment_$get_mode_index
				        entry (fixed bin, bit (36) aligned, fixed bin (35));
	declare request_id_		        entry (fixed binary (71)) returns (character (19));
	declare requote_string_	        entry (character (*)) returns (character (*));

	declare system_info_$request_chn      entry (bit (36) aligned, fixed bin (71), char (*), char (*));

	declare expand_pathname_$add_suffix   entry (character (*), character (*), character (*), character (*),
				        fixed binary (35));


	declare error_table_$noarg	        fixed bin (35) ext static;
	declare error_table_$badopt	        fixed bin (35) ext static;

	declare argx		        fixed bin;
	declare arg_count		        fixed bin;
	declare dir_name		        char (168);
	declare entryname		        char (32);
	declare message_bits	        bit (mmi.ms_len) based (mmi.ms_ptr) aligned;
	declare ms_index		        fixed bin;
	declare ms_mode		        bit (36) aligned;
	declare sci_ptr		        pointer;
	declare code		        fixed bin (35);
	declare ap		        pointer;
	declare al		        fixed bin (21);
	declare argument		        char (al) based (ap);
	declare 1 mmi		        aligned like mseg_message_info;

	declare (addr, currentsize, divide, hbound, lbound, size, substr, unspec) builtin;


	dir_name = "";
	entryname = "";
	ms_index = -1;				/* for cleanup handler */
	call ssu_$standalone_invocation (sci_ptr, "list_as_requests", "", cu_$arg_list_ptr (), SSU_ABORT, code);
	if code ^= 0
	then do;
		call com_err_ (code, "list_as_requests", "Failed to create ssu_ invocation.");
		return;
	     end;

	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count > 0
	then do argx = 1 to arg_count;
		call ssu_$arg_ptr (sci_ptr, argx, ap, al);
		if argument = "-test_ms"
		then do;
			if argx = arg_count
			then call ssu_$abort_line (sci_ptr, error_table_$noarg,
				"-test_ms must be followed by a message segment pathname.");
			argx = argx + 1;
			call ssu_$arg_ptr (sci_ptr, argx, ap, al);
			call expand_pathname_$add_suffix (argument, "ms", dir_name, entryname, code);
			if code ^= 0
			then call ssu_$abort_line (sci_ptr, code, "Invalid pathname ^a.", argument);
		     end;
		else call ssu_$abort_line (sci_ptr, error_table_$badopt, "Invalid control argument ^a.", argument);
	     end;

	if dir_name = ""
	then call system_info_$request_chn ((""b), (0), dir_name, entryname);
	call message_segment_$open (dir_name, entryname, ms_index, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Failed to open message segment ^a>^a.", dir_name, entryname);
	call message_segment_$get_mode_index (ms_index, ms_mode, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Failed to get mode on message segment ^a>^a.", dir_name, entryname);

	unspec (mmi) = ""b;
	mmi.version = MSEG_MESSAGE_INFO_V1;
	mmi.own = ^substr (ms_mode, 3, 1);		/* read mode */
	mmi.message_code = MSEG_READ_FIRST;
	code = 0;
	do while (code = 0);
	     call message_segment_$read_message_index (ms_index, get_user_free_area_ (), addr (mmi), code);
	     if code = 0
	     then do;
		     call PRINT_MESSAGE;
		     free message_bits;
		end;
	     mmi.message_code = MSEG_READ_AFTER_SPECIFIED;
	end;
	call message_segment_$close (ms_index, (0));
	return;

PRINT_MESSAGE:
     procedure;

	declare request_id		        char (19);
	declare ms_id_clock		        fixed bin (71);
	declare ms_length_words	        fixed bin (18);
	declare 1 header		        aligned like as_request_header based (mmi.ms_ptr);

	unspec (ms_id_clock) = mmi.ms_id;
	request_id = request_id_ (ms_id_clock);
	call ioa_ ("Message ^a from ^a (^w) in ring ^d", request_id, mmi.sender_id, mmi.sender_process_id,
	     mmi.sender_level);
	call ioa_ ("        Authorization ^a, Maximum authorization ^a",
	     display_access_class_ (mmi.sender_authorization), display_access_class_ (mmi.sender_max_authorization));

	ms_length_words = divide (mmi.ms_len, 36, 18, 0);
	if ms_length_words < size (as_request_header)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;

	if header.version ^= as_request_version_1
	then do;
		call ioa_ ("        Message header version ^d, but only version ^d is supported.", header.version,
		     as_request_version_1);
		return;
	     end;
	if header.type < ASR_FIRST_TYPE | header.type > ASR_LAST_TYPE
	then do;
		call ioa_ ("        Message type ^d undefined.", header.type);
		call ioa_ ("        Reply channel ^d.", header.reply_channel);
		return;
	     end;
	call ioa_ ("        ^a request. Reply channel ^d.", ASR_REQUEST_NAMES (header.type), header.reply_channel);
	go to TYPE (header.type);

TYPE (1):						/* dial server */
	call PRINT_DIAL_REQUEST;
	return;

TYPE (2):						/* dial out */
	call PRINT_DIAL_REQUEST;
	return;

TYPE (3):						/* fpe causes logout */
TYPE (4):						/* fpe causes new process */
	return;					/* nothing to say */

TYPE (5):						/* "buzzard" -- termination notify */
	call PRINT_BUZZARD;
	return;

TYPE (6):						/* bump */
	call PRINT_BUMP;
	return;

TYPE (7):						/* command execution */
	call PRINT_ADMIN_COMMAND;
	return;

TYPE (8):						/* note pnt changes */
	call PRINT_NOTE_PNT;
	return;

TYPE (9):						/* daemon commands */
	call PRINT_DAEMON_COMMAND;
	return;

TYPE (10):					/* com_channel_info */
	call PRINT_COM_CHANNEL_INFO;
	return;
TYPE (11):					/* abs_command */
	call PRINT_ABS_COMMAND;
	return;


PRINT_DIAL_REQUEST:
     procedure;

	request_ptr = mmi.ms_ptr;
	if ms_length_words < size (dial_server_request)
	then do;
		call ioa_ ("        Message too short.");
		return;
	     end;

	if dial_server_request.version ^= dial_server_request_version_4
	then do;
		call ioa_ ("        Request version ^d, but only ^d is supported.", dial_server_request.version,
		     dial_server_request_version_4);
		return;
	     end;
	call ioa_ ("        dial_control_channel ^d", dial_server_request.dial_control_channel);
	call ioa_ ("        dial_qualifier ^a", dial_server_request.dial_qualifier);
	call ioa_ ("        channel_name ^a", dial_server_request.channel_name);
	call ioa_ ("        dial_out_destination ^a", dial_server_request.dial_out_destination);
	call ioa_ ("        baud_rate ^d^[ not specified^]", dial_server_request.baud_rate,
	     dial_server_request.baud_rate = -1);
	if dial_server_request.line_type >= lbound (line_types, 1)
	     & dial_server_request.line_type <= hbound (line_types, 1)
	then call ioa_ ("        line_type ^d (^a)", dial_server_request.line_type,
		line_types (dial_server_request.line_type));
	else call ioa_ ("        line_type ^d", dial_server_request.line_type);
	call ioa_ ("        server_type ^a", dial_server_request.server_type);
	call ioa_ ("        flags: ^[^^^]start,^[^^^]stop,^[^^^]privileged_attach,^[^^^]release_channel,",
	     ^dial_server_request.start, ^dial_server_request.stop, ^dial_server_request.privileged_attach,
	     ^dial_server_request.release_channel);
	call ioa_ ("               ^[^^^]registered_server,^[^^^]no_hangup,^[^^^]release_dial_id,^[^^^]tandd_attach,",
	     ^dial_server_request.registered_server, ^dial_server_request.no_hangup,
	     ^dial_server_request.release_dial_id, ^dial_server_request.tandd_attach);
	call ioa_ ("               ^[^^^]privileged_server", ^dial_server_request.privileged_server);
	call ioa_ ("        access_class ^a", display_access_class_ (dial_server_request.access_class));
	return;
     end PRINT_DIAL_REQUEST;

PRINT_BUZZARD:
     procedure;

	asr_buzzard_infop = mmi.ms_ptr;
	if ms_length_words < size (asr_buzzard_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_buzzard_info.version ^= asr_buzzard_info_version_1
	then do;
		call ioa_ ("        Request version ^a, but only version ^a is supported.", asr_buzzard_info.version,
		     asr_buzzard_info_version_1);
		return;
	     end;
	call ioa_ ("        info_channel ^d", asr_buzzard_info.info_channel);
	call ioa_ ("        reference_id ^w", asr_buzzard_info.my_reference_id);
	return;
     end PRINT_BUZZARD;


PRINT_BUMP:
     procedure;

	asr_bump_user_info_ptr = mmi.ms_ptr;
	if ms_length_words < size (asr_bump_user_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;

	if asr_bump_user_info.version ^= asr_bump_user_info_version_1
	then do;
		call ioa_ ("        Message version is ^a, but only version ^a is supported.",
		     asr_bump_user_info.version, asr_bump_user_info_version_1);
		return;
	     end;

	call ioa_ ("        process_id ^w", asr_bump_user_info.process_id);
	call ioa_ ("        message ^a", asr_bump_user_info.message);
	call ioa_ ("        grace_time_in_seconds ^d", asr_bump_user_info.grace_time_in_seconds);
	call ioa_ ("        reference_id ^w", asr_bump_user_info.reply_reference_id);
	return;
     end PRINT_BUMP;

PRINT_ADMIN_COMMAND:
     procedure;

	asr_admin_command_info_ptr = mmi.ms_ptr;
	if ms_length_words < currentsize (asr_admin_command_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_admin_command_info.version ^= ASR_AC_VERSION_1
	then do;
		call ioa_ ("        Request version is ^a, but only version ^a is supported.",
		     asr_admin_command_info.version, ASR_AC_VERSION_1);
		return;
	     end;

	call ioa_ ("        flags: ^[^^^]send_start_wakeup,^[^^^]send_completion_wakeup,",
	     ^asr_admin_command_info.flags.send_start_wakeup, ^asr_admin_command_info.flags.send_completion_wakeup);
	call ioa_ ("               ^[^^^]send_completion_message,^[^^^]send_completion_mail",
	     ^asr_admin_command_info.flags.send_completion_message, ^asr_admin_command_info.flags.send_completion_mail);
	call ioa_ ("        mail_destination ^a", asr_admin_command_info.mail_destination);
	call ioa_ ("        command ^a", requote_string_ (asr_admin_command_info.command));
	return;
     end PRINT_ADMIN_COMMAND;

PRINT_NOTE_PNT:
     procedure;

	asr_note_pnt_change_info_ptr = mmi.ms_ptr;
	if ms_length_words < currentsize (asr_note_pnt_change_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_note_pnt_change_info.version ^= ASR_NPC_INFO_VERSION_1
	then do;
		call ioa_ ("        Request version is ^a, but only version ^a is supported.",
		     asr_note_pnt_change_info.version, ASR_NPC_INFO_VERSION_1);
		return;
	     end;
	call ioa_ ("        person_id ^a", asr_note_pnt_change_info.person_id);
	return;
     end PRINT_NOTE_PNT;

PRINT_COM_CHANNEL_INFO:
     procedure;

	asr_com_channel_info_ptr = mmi.ms_ptr;
	if ms_length_words < currentsize (asr_com_channel_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_com_channel_info.version ^= ASR_CCI_VERSION_1
	then do;
		call ioa_ ("        Request version is ^a, but only version ^a is supported.",
		     asr_com_channel_info.version, ASR_CCI_VERSION_1);
		return;
	     end;
	call ioa_ ("        channel_name ^a", asr_com_channel_info.channel_name);
	call ioa_ ("        reply_message_handle ^.3b", asr_com_channel_info.reply_message_handle);

	return;

     end PRINT_COM_CHANNEL_INFO;

PRINT_DAEMON_COMMAND:
     procedure;

	asr_daemon_command_info_ptr = mmi.ms_ptr;
	if ms_length_words < currentsize (asr_daemon_command_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_daemon_command_info.version ^= ASR_DC_INFO_VERSION_1
	then do;
		call ioa_ ("        Request version is ^a, but only version ^a is supported.",
		     asr_daemon_command_info.version, ASR_DC_INFO_VERSION_1);
		return;
	     end;

	call ioa_ ("        action_code ^[login^;logout^;quit^;reply^]", asr_daemon_command_info.action_code);
	call ioa_ ("        user_name ^a", asr_daemon_command_info.user_name);
	call ioa_ ("        project_name ^a", asr_daemon_command_info.project_name);
	call ioa_ ("        source_name ^a", asr_daemon_command_info.source_name);
	call ioa_ ("        command ^a", requote_string_ (asr_daemon_command_info.command));
	return;
     end PRINT_DAEMON_COMMAND;

PRINT_ABS_COMMAND:
     procedure;

	asr_abs_command_info_ptr = mmi.ms_ptr;
	if ms_length_words < currentsize (asr_abs_command_info)
	then do;
		call ioa_ ("        Message length less than minimum.");
		return;
	     end;
	if asr_abs_command_info.version ^= ASR_AC_INFO_VERSION_1
	then do;
		call ioa_ ("        Request version is ^a, but only version ^a is supported.",
		     asr_abs_command_info.version, ASR_AC_INFO_VERSION_1);
		return;
	     end;

	call ioa_ ("        action_code ^[login^;cancel^]", asr_abs_command_info.action_code);
	call ioa_ ("        request_id ^a", request_id_ (asr_abs_command_info.request_id));
	return;
     end PRINT_ABS_COMMAND;
     end PRINT_MESSAGE;

SSU_ABORT:
     procedure;
	go to ABORT;
     end SSU_ABORT;

ABORT:
	if ms_index ^= -1
	then call message_segment_$close (ms_index, (0));
	return;

%include mseg_message_info;
%include as_request_header;
%include as_requests;
%include asr_abs_command;
%include asr_daemon_command;
%include asr_com_channel_info;
%include dial_server_request;
%include line_types;
     end list_as_requests;
