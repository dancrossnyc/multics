/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* set_special_password: Manipulates non-alias non-mte PNTE's */
/* format: style2 */

set_special_password:
     procedure options (variable);

/* BIM 1984-10-08 */


/****^  HISTORY COMMENTS:
  1) change(89-05-23,Beattie), approve(89-09-29,MCR8113),
     audit(89-10-02,Farley), install(89-10-03,MR12.3-1082):
     Display an appropriate error message if the add or update to the
     PNT operation returns a non-zero error code.
  2) change(90-11-22,Vu), approve(90-11-22,MCR8230),
     audit(92-09-30,WAAnderson), install(92-10-19,MR12.5-1029):
     Query the user twice for the password by default.
                                                   END HISTORY COMMENTS */


	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if arg_count = 0
	then do;
		call com_err_$suppress_name (0, ME, USAGE_LINE);
		return;
	     end;

	user_name = "";
	user_index = 0;
	none_flag = "0"b;
	prompt_flag = "1"b;
	password_flag = "0"b;
	password = "";
	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if index (argument, "-") ^= 1
	     then do;
		     if user_name ^= ""
		     then do;
			     call com_err_ (0, ME, "More than one user name supplied.");
			     return;
			end;
		     user_name = argument;
		end;
	     else if argument = "-none"
	     then do;
		     none_flag = "1"b;
		     prompt_flag = "0"b;
		     password = "";
		end;
	     else if argument = "-prompt"
	     then do;
		     prompt_flag = "1"b;
		     none_flag = "0"b;
		     password = "";
		end;
	     else if argument = "-password"
	     then do;
		     prompt_flag = "0"b;
		     none_flag = "0"b;
		     if argx = arg_count
		     then do;
			     call com_err_ (error_table_$noarg, ME, "A password must be given after -password");
			     return;
			end;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, ap, al, (0));
		     password = argument;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, ME, USAGE_LINE);
		     return;
		end;
	end;
	if user_name = ""
	then do;
		call com_err_ (error_table_$noarg, ME, USAGE_LINE);
		return;
	     end;

	do user_index = 1 to hbound (SPECIAL_USER_NAME_ARRAY, 1);
	     if user_name = SPECIAL_USER_NAME_ARRAY (user_index).command_line_name
	     then go to HAVE_USER_INDEX;
	end;
	call com_err_ (0, ME, "The name ""^a"" is not a special person name.", user_name);
	return;

HAVE_USER_INDEX:
	if prompt_flag
          then do;
               call read_password_ ("Password", password);
               save_password = password;
               password = " ";
               call read_password_ ("Password Again", password);
               if password ^= save_password
               then do;
                    call com_err_$suppress_name (0, ME, "Password typed incorrectly second time.");
                    call com_err_$suppress_name (0, ME, "Password has not been changed.");
                    password = " ";
                    save_password = " ";
                    return;
                end;
                save_password = " ";
           end;

	if ^none_flag
	then password = scramble_ (password);
	else password = "";

	pnt_entry_name = SPECIAL_USER_NAME_ARRAY (user_index).pnte_entry_name;

	unspec (PNTE) = ""b;
	call pnt_manager_$admin_get_entry (pnt_entry_name, addr (PNTE), code);
	if code = 0
	then update = "1"b;
	else if code = error_table_$id_not_found
	then do;
		update = "0"b;
		unspec (PNTE) = ""b;
		PNTE.version = PNT_ENTRY_VERSION_2;
		PNTE.user_id = pnt_entry_name;
	     end;
	else do;
		call com_err_ (code, ME, "Looking in PNT for ^a", pnt_entry_name);
		return;
	     end;

	PNTE.private.pw_flags.short_pw = "1"b;
	PNTE.password = password;
	PNTE.alias = "";
	PNTE.default_project = "";
	PNTE.flags = "0"b;
	PNTE.flags.trap, PNTE.flags.lock = "1"b;
	PNTE.flags.has_password = (password ^= "");

	if update
	then call pnt_manager_$update_entry (addr (PNTE), "1"b, "0"b, code);
						/* set password, leave network PW alone */
	else call pnt_manager_$add_entry (pnt_entry_name, addr (PNTE), code);

	if code ^= 0
	then call com_err_ (code, ME, "Error encountered while ^[updating^;adding to^] the PNT.", update);

	return;
%page;
	declare com_err_		 entry () options (variable);
	declare com_err_$suppress_name entry () options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare pnt_manager_$admin_get_entry
				 entry (char (*), pointer, fixed bin (35));
	declare pnt_manager_$update_entry
				 entry (pointer, bit (1) aligned, bit (1) aligned, fixed bin (35));
	declare pnt_manager_$add_entry entry (char (*), pointer, fixed bin (35));
	declare read_password_	 entry (character (*), character (*));
	declare scramble_		 entry (character (8)) returns (character (8));
	declare error_table_$badopt	 fixed bin (35) ext static;
	declare error_table_$id_not_found
				 fixed bin (35) ext static;
	declare error_table_$noarg	 fixed bin (35) ext static;

	declare arg_count		 fixed bin;
	declare argx		 fixed bin;
	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare argument		 char (al) based (ap);
	declare code		 fixed bin (35);
	declare ME		 char (20) int static options (constant) init ("set_special_password");
	declare none_flag		 bit (1) aligned;
	declare prompt_flag		 bit (1) aligned;
	declare password_flag	 bit (1) aligned;
	declare password		 char (8);
	declare pnt_entry_name	 char (32);
          declare save_password          char (8);
	declare USAGE_LINE		 char (80) int static options (constant)
				 init (
				 "Usage: set_special_password special_person_name -prompt|-none|-password PASSWORD"
				 );
	declare user_index		 fixed bin;
	declare user_name		 char (32);
	declare update		 bit (1) aligned;
	declare 1 PNTE		 aligned like pnt_entry;

	declare addr		 builtin;
	declare hbound		 builtin;
	declare index		 builtin;
	declare unspec		 builtin;

%page;
%include pnt_entry;
%page;
%include special_person_names;

     end set_special_password;
