/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ckauth: proc;

/* CKAUTH - check for file authored by given user */


dcl  path char (168) aligned,				/* root of tree */
     ctime char (24) aligned,
    (co, dp) char (64) aligned,			/* titles for report */
    (c1, char1) char (1) aligned,
    (i, j, k, l, m, n) fixed bin,
    (t1, t2) fixed bin,
     rolder (0: 90) fixed bin,
     folder (0: 90) fixed bin,
     movelen fixed bin,
     slp ptr,
     lth fixed bin (24),
     NL char (1) aligned,
     kk fixed bin,
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin,
     total fixed bin int static,
     name char (32) aligned int static init ("Dumper.SysDaemon.a"),
     an fixed bin init (2),
     modsw bit (1) init ("1"b),
    (p, q, p1, q1, p2, q2) ptr;

dcl  clock_ ext entry returns (fixed bin (71)),
     com_err_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
     sweep_disk_ ext entry (char (168) aligned, entry),
     expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin),
     ioa_ entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
     fixed bin (2), ptr, fixed bin),
     get_wdir_ entry returns (char (168) aligned),
     hcs_$get_author entry (char (*) aligned, char (*) aligned, fixed bin, char (*) aligned, fixed bin),
     hcs_$get_bc_author entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin),
     hcs_$acl_add1 entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (5), (3) fixed bin (3), fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin);

dcl  bcs char (262144) aligned based (slp);

dcl (divide, substr, addr, null, index, fixed) builtin;

dcl 1 movetable based aligned,
    2 moveary (movelen) fixed bin (35);

/* --------------------- */

	total = 0;
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then path = ">";
	else path = bchr;

arglp:	call cu_$arg_ptr (an, ap, al, ec);
	if ec = 0 then do;
	     if substr (bchr, 1, 1) = "-" then do;
		if bchr = "-author" | bchr = "-at" then do;
		     modsw = "0"b;
		end;
		else do;
		     call com_err_ (0, "ckauth", "unknown option ^a", bchr);
		     return;
		end;
	     end;
	     else do;				/* not control arg, must be access name */
		name = bchr;
		if index (name, ".") = 0 then do;
		     call com_err_ (0, "ckauth", "no period in access control name ^a", name);
		     return;
		end;
	     end;
	     an = an + 1;
	     go to arglp;
	end;

/* Now, go to work. Call disk sweeper program */

	call sweep_disk_ (path, counter);
	call ioa_ ("Total ^d", total);

	return;

counter:	proc (sdn, sen, lvl, een, bptr, nptr);

dcl  sdn char (168) aligned,				/* superior dir name */
     sen char (32) aligned,				/* dirname */
     lvl fixed bin,					/* distance from root */
     een char (32) aligned,				/* entry name */
     bptr ptr,					/* ptr to info structure */
     nptr ptr;					/* ptr to names structure */

dcl  xp char (168) aligned,
     xi fixed bin,
     hisid char (32) aligned,
     mode fixed bin (5);

dcl 1 branch based (bptr) aligned,			/* thing returned by star_long */
    2 type bit (2) unal,
    2 nname bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 records bit (18) unal;

dcl 1 links based (bptr) aligned,
    2 type bit (2) unal,				/* 00b */
    2 nname bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtd bit (36) unal,
    2 pln bit (18) unal,
    2 pnindex bit (18) unal;

dcl  names (100) char (32) based (nptr);

	xi = fixed (branch.type);
	if xi ^= 1 then return;
	     call ioa_$rsnnl ("^a>^a", xp, xi, sdn, sen);
	     if modsw then call hcs_$get_bc_author (xp, een, hisid, ec);
	     else call hcs_$get_author (xp, een, 0, hisid, ec);
	     if ec ^= 0 then do;
		call com_err_ (ec, "ckauth", "^a>^a", xp, een);
	     end;
	     else do;
		if name = hisid then do;
		     total = total + 1;
		     call ioa_ ("^a>^a", xp, een);
		end;
	     end;

	end counter;

     end ckauth;
