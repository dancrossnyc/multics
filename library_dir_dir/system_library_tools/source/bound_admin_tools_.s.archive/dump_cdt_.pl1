/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* Subroutine to dump the CDT, all fields.
   THVV
   Modified by Mike Grady 5/11/76 to convert to version 2 CDT
   Modified by T. Casey, November 1976 to dump some variables omitted from previous version.
   Modified by Robert Coren, June 1977, for new terminal type fields and dont_read_answerback attribute.
   Modified by T. Casey, September 1977, to get device charge name from installation_parms.
   Modified January 1979 by Larry Johnson for multiplexer data.
   Modified April 1979 by Larry Johnson for new things in fnpe's.
   Modified 1979 May 25 by Art Beattie to accomodate change in cdt.incl.pl1.
   Modified November 1979 by T. Casey for MR8.0 to dump process preservation variables.
   Modified January 1981 by E. N. Kittlitz to eliminate cdte.phone_no.
   Modified July 1981 by T. Casey for MR9.0 to dump some new cdte variables.
   Modified December 1981 (but barely) for trees in the cdt by Benson I. Margulies.
   Modified August 1982 (even less) by E. N. Kittlitz for masked channel state.
   Modified August 1982 by E. N. Kittlitz for check_acs.
   Modified January 1983 by Keith Loepere for generic_destination.
   Modified 831216 by E. N. Kittlitz for required_access_class.
   Modified 84-03-22 BIM for full AIM support, removed obsolete fields.
*/


/****^  HISTORY COMMENTS:
  1) change(87-03-31,Beattie), approve(87-04-06,MCR7656),
     audit(87-07-14,Parisek), install(87-08-04,MR12.1-1055):
     Display new variables that support use of IOCBs in answering service.
                                                   END HISTORY COMMENTS */


/* format: style4 */

dump_cdt_: procedure (Info_ptr, Code);

/* parameters */

dcl  Info_ptr pointer;
dcl  Code fixed bin (35);

/* automatic */

dcl  (i, n) fixed bin;
declare  found_a_match bit (1) aligned;
dcl  (time, avg) float bin;
dcl  indent fixed bin;
dcl  (fnpx, cdtx) fixed bin;
dcl  fnp_find_sw bit (1) aligned;
dcl  temp_dev_name char (8);
dcl  code fixed bin (35);
dcl  error character (100) aligned;

dcl  1 devtab_copy (16) aligned,
       2 device_id char (8) unal,
       2 device_price (0:7) float bin;

dcl  two_digits picture "99";

dcl  visited (2711) bit (1) unaligned;
dcl  tcount fixed bin;

dcl  1 CI aligned like condition_info;

/* internal static */

dcl  fnp_tags (8) char (1) int static options (constant) init
	("a", "b", "c", "d", "e", "f", "g", "h");

dcl  attribute_flag_names (5) char (32) varying int static options (constant) init
	("ck_answerback",
	"audit_access_error",
	"hardwired",
	"set_modes",
	"dont_read_answerback");

dcl  option_flag_names (9) char (32) varying int static options (constant) init
	("execute_initial_command",
	"attached_by_operator",
	"private_line",
	"bsc_ebcdic",
	"bsc_transparent",
	"vip_poll_select",
	"autobaud",
	"generic_destination_present",
	"use_iocb");

dcl  access_check_flag_names (5) char (32) varying init (
	"dial_out",
	"priv_attach",
	"dial_server",
	"login",
	"dial_slave") int static options (constant);

dcl  dialup_flag_names (11) char (32) varying int static options (constant) init
	("ppm",
	"cpo",
	"wakeup_handler",
	"save_arg",
	"nosave_arg",
	"detach_after_hangup",
	"leave_edited",
	"hold_arg",
	"no_hold_arg",
	"immediate_arg",
	"current_access_class_valid");

/* entries */

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  convert_authorization_$to_string_range_short entry ((2) bit (72) aligned, character (*),
	fixed binary (35));
dcl  convert_authorization_$to_string_short entry (bit (72) aligned, character (*), fixed binary (35));
dcl  system_info_$device_prices entry (fixed bin, ptr);
dcl  cdt_mgr_$find_cdt_channel entry (ptr, char (32), fixed bin, bit (1) aligned, fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));

dcl  error_table_$nomatch fixed bin (35) ext static;

/* builtins */

dcl  (addr, divide, fixed, float, hbound, lbound, length, low, ltrim, null, rtrim, string, substr) builtin;

dcl  sub_error_ condition;

/* include files */

%include dump_cdt_args_;

%page;
%include cdt;

%page;
%include author_dcl;
%page;
%include dialup_values;
%page;
%include multiplexer_types;
%page;
%include condition_info_header;
%include sub_error_info;
%include condition_info;

/* ====================================================== */

	Code = 0;
	dca_ptr = Info_ptr;
	cdtp = dump_cdt_args.cdt_ptr;
	indent = 0;

	call system_info_$device_prices ((0), addr (devtab_copy));

	if dump_cdt_args.hdr then do;
	     call ioa_$ioa_switch (switch, "^/Channel Definition Table^/");
	     call ioa_$ioa_switch (switch, "author.proc_group_id:^32t^a", cdt.author.proc_group_id);
	     call ioa_$ioa_switch (switch, "author.lock:^32t^w", cdt.author.lock);

	     call ioa_$ioa_switch (switch, "author.last_install_time:^32t^a", edit_time (cdt.author.last_install_time));
	     call ioa_$ioa_switch (switch, "^31a^a", "author.table:", cdt.author.table);
	     call ioa_$ioa_switch (switch, "author.w_dir:^32t^a", cdt.author.w_dir);
	     call ioa_$ioa_switch (switch, "max_size:^32t^d", cdt.max_size);
	     call ioa_$ioa_switch (switch, "current_size:^32t^d", cdt.current_size);
	     call ioa_$ioa_switch (switch, "version:^32t^d", cdt.version);
	     call ioa_$ioa_switch (switch, "freep:^32t^d", cdt.freep);
	     call ioa_$ioa_switch (switch, "n_cdtes:^32t^d", cdt.n_cdtes);
	     call ioa_$ioa_switch (switch, "meters_last_reset:^32t^a", edit_time (cdt.meters_last_reset));

	     if cdt.realtime_in_dialup ^= 0 then do;
		n = cdt.entries_to_dialup;
		time = cdt.realtime_in_dialup / 1e6;
		avg = time / n;
		call ioa_$ioa_switch (switch, "realtime_in_dialup:^32t^.1f sec^51t^.1f sec avg",
		     time, avg);
		time = cdt.cpu_in_dialup / 1e6;
		avg = time / n;
		call ioa_$ioa_switch (switch, "cpu_in_dialup:^32t^.1f sec^51t^.1f sec avg",
		     time, avg);
		call ioa_$ioa_switch (switch, "pf_in_dialup:^32t^d^51t^d avg",
		     cdt.pf_in_dialup, divide (cdt.pf_in_dialup, n, 17, 0));
		call ioa_$ioa_switch (switch, "pp_in_dialup:^32t^d^51t^d avg",
		     cdt.pp_in_dialup, divide (cdt.pp_in_dialup, n, 17, 0));
		call ioa_$ioa_switch (switch, "entries_to_dialup:^32t^d", cdt.entries_to_dialup);
	     end;
	     call ioa_$ioa_switch (switch, "FNP_required_up_time:^32t^d minutes", cdt.acceptable_fnp_tbf);
	     call ioa_$ioa_switch (switch, "Spare_channel_count:^32t^d", cdt.spare_channel_count);
	     call ioa_$ioa_switch (switch, "");
	end;

	if ^dump_cdt_args.all & ^dump_cdt_args.starname	/* one chan */
	then do;
	     if dump_cdt_args.channel_name = ""
	     then return;				/* just the header */
	     call cdt_mgr_$find_cdt_channel (cdtp, (dump_cdt_args.channel_name), cdtx, fnp_find_sw, code);
	     if code ^= 0
	     then do;
		Code = code;
		return;
	     end;

	     if fnp_find_sw
	     then do;
		if ^dump_cdt_args.subtree
		then call print_fnpe (-cdtx);
		else do;
		     if ^dump_cdt_args.brief
		     then call print_fnpe (-cdtx);
		     call show_children (addr (cdt.fnp_entry (-cdtx).threads), cdtx, "1"b);
		end;
	     end;
	     else do;
		if ^dump_cdt_args.subtree
		then call print_cdte (addr (cdt.cdt_entry (cdtx)));
		else do;
		     if ^dump_cdt_args.brief
		     then call print_cdte (addr (cdt.cdt_entry (cdtx)));
		     call show_children (addr (cdt.cdt_entry (cdtx).threads), cdtx, "0"b);
		end;
	     end;
	     return;
	end;


	if dump_cdt_args.all
	then do;
	     call dump_tree;
	     return;
	end;

/* Starname, may be fnp */

	found_a_match = "0"b;

	do fnpx = 1 to hbound (cdt.fnp_entry, 1);
	     fnpep = addr (cdt.fnp_entry (fnpx));
	     if fnpe.state ^= FNP_FREE
	     then do;
		call match_star_name_ (substr (collate (), rank ("a") + fnpx, 1), (dump_cdt_args.channel_name), code);
		if code = 0 then do;
		     found_a_match = "1"b;
		     if ^dump_cdt_args.subtree then
			if ^dump_cdt_args.brief then call print_fnpe (fnpx);
			else call ioa_$ioa_switch (switch, "^2xFNP ^a (^d,^p)", substr (collate (), rank ("a") + fnpx, 1), fnpx, fnpep);
		     else do;
			if ^dump_cdt_args.brief then call print_fnpe (fnpx);
			if fnpe.threads.daughter_count = 0 & fnpe.threads.daughter = 0
			then ;
			else call show_children (addr (fnpe.threads), -fnpx, "1"b);
		     end;
		end;
	     end;
	end;

/* Or it may be a non-FNP */

	do i = 1 to cdt.current_size;
	     cdtep = addr (cdt.cdt_entry (i));
	     if cdte.in_use ^= NOW_FREE then do;
		call match_star_name_ ((cdte.name), (dump_cdt_args.channel_name), code);
		if code = 0 then do;
		     found_a_match = "1"b;
		     if ^dump_cdt_args.subtree
		     then if ^dump_cdt_args.brief
			then call print_cdte (cdtep);
			else call ioa_$ioa_switch (switch, "Channel ^a (^d,^p)",
				cdte.name, i, cdtep);
		     else do;
			if ^dump_cdt_args.brief
			then call print_cdte (cdtep);
			call show_children (addr (cdt.cdt_entry (i).threads), cdtx, "0"b);
		     end;
		end;
	     end;
	end;

	if ^found_a_match
	then Code = error_table_$nomatch;
	return;

print_fnpe: proc (n);

dcl  n fixed bin;
dcl  mpx_type fixed bin;
dcl  bb72 bit (72) aligned based;

	fnpep = addr (cdt.fnp_entry (n));
	mpx_type = fnpe.mpx_type;
	if mpx_type = 0 then mpx_type = MCS_MPX;

	call ioa_$ioa_switch (switch, "^/FNPE at ^p (FNP ^a)^/", fnpep, edit_desc (n, fnp_tags));

	if fnpe.type ^= 0 | mpx_type = MCS_MPX then
	     call ioa_$ioa_switch (switch, "^5xtype:^26x^d (^a)", fnpe.type, edit_desc (fnpe.type, fnp_types));
	if fnpe.memory ^= 0 | mpx_type = MCS_MPX then
	     call ioa_$ioa_switch (switch, "^5xmemory:^24x^dK", fnpe.memory);
	if fnpe.nlslas ^= 0 | (mpx_type = MCS_MPX & fnpe.type ^= DN6670) then
	     call ioa_$ioa_switch (switch, "^5xlslas:^25x^d", fnpe.nlslas);
	if fnpe.nhslas ^= 0 | mpx_type = MCS_MPX then
	     call ioa_$ioa_switch (switch, "^5xhslas:^25x^d", fnpe.nhslas);
	call ioa_$ioa_switch (switch, "^5xboot event chan:^15x^24.3b", addr (fnpe.boot_ev_chan) -> bb72);
	if mpx_type = MCS_MPX then
	     call ioa_$ioa_switch (switch, "^5xcoreimage:^21x^a", fnpe.coreimage);
	else if fnpe.coreimage ^= "" then
	     call ioa_$ioa_switch (switch, "^5xadditional_info:^15x^a", fnpe.coreimage);
	mpxep = addr (fnpe.mpxe);
	call print_mpxe (fnpe.service_type, mpx_type);
	call ioa_$ioa_switch (switch, "^/");
	return;

     end print_fnpe;

print_mpxe: proc (a_service, a_type);

dcl  a_service fixed bin;
dcl  a_type fixed bin;

dcl  fnp_states (0:4) char (15) int static options (constant) init (
	"not configured",
	"unknown",
	"down",
	"boot started",
	"up");
dcl  mpx_service_types (0:7) char (12) int static options (constant) init (
	"", "active", "", "", "", "", "", "inactive");

	call ioa_$ioa_switch (switch, "^vx^5xMultiplexer data:", indent
	     );
	call ioa_$ioa_switch (switch, "^vx^6xservice_type:^37t^d (^a)", indent, a_service,
	     edit_desc (a_service, mpx_service_types));
	call ioa_$ioa_switch (switch, "^vx^6xmpx_type:^37t^d (^a)", indent, a_type, edit_desc (a_type, mpx_types));
	call ioa_$ioa_switch (switch, "^vx^6xstate:^37t^d (^a)", indent, mpxe.state, edit_desc (mpxe.state, fnp_states));
	call print_time ("initial load:", mpxe.time_initial_load);
	call print_time ("last load:", mpxe.time_last_load);
	call print_time ("last crash:", mpxe.time_last_crash);
	call print_time ("load started:", mpxe.time_load_start);
	call ioa_$ioa_switch (switch, "^vx^6xflags.go:^37t^d", indent, fixed (mpxe.flags.go));
	call ioa_$ioa_switch (switch, "^vx^6xflags.listening:^37t^d", indent, fixed (mpxe.flags.listening));
	call ioa_$ioa_switch (switch, "^vx^6xcurrent_service_type:^37t^d (^a)", indent, mpxe.current_service_type,
	     edit_desc (mpxe.current_service_type, mpx_service_types));
	if mpxe.current_mpx_type ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^6xcurrent_mpx_type:^37t^d (^a)", indent, mpxe.current_mpx_type,
		edit_desc (mpxe.current_mpx_type, mpx_types));
	call ioa_$ioa_switch (switch, "^vx^6xn_bootloads:^37t^d", indent, mpxe.n_bootloads);
	call ioa_$ioa_switch (switch, "^6xlast_tbf:^37t^d", mpxe.last_tbf);
	return;




print_time: proc (name, time);

dcl  name char (*),
     time fixed bin (71);

	     call ioa_$ioa_switch (switch, "^vx^6x^a^37t^a", indent, name, edit_time (time));
	     return;

	end print_time;

     end print_mpxe;

print_cdte: proc (CDTEp);

dcl  (hrs, mins, secs) fixed bin;
dcl  auth_string char (200);
dcl  bb72 bit (72) based;
dcl  code fixed bin (35);
dcl  CDTEp pointer;
dcl  1 CDTE aligned like cdte based (CDTEp);

/* ----------------------------------------------- */

	call ioa_$ioa_switch (switch, "^vx^/CDTE at ^p^/", indent, CDTEp);

	call ioa_$ioa_switch (switch, "^vx^5xin_use:^24x^d (^a)", indent, CDTE.in_use, edit_desc (CDTE.in_use, uses));
	call ioa_$ioa_switch (switch, "^vx^5xname:^26x^a", indent, CDTE.name);
	if CDTE.current_service_type = MPX_SERVICE |
	     (CDTE.service_type = MPX_SERVICE & CDTE.current_service_type = 0) then do; /* running mpx, or mpx in new cdt */
	     mpxep = addr (CDTE.initial_command);
	     call print_mpxe ((CDTE.mpx_service), (CDTE.mpx_type));
	end;
	call convert_authorization_$to_string_range_short (CDTE.access_class, auth_string, code);
	if auth_string = "" then auth_string = "system_low";
	call ioa_$ioa_switch (switch, "^vx^5xaccess_class:^18x^a", indent, auth_string);
	call ioa_$ioa_switch (switch, "^vx^5xcomment:^23x^a", indent, CDTE.comment);
	if CDTE.charge_type < lbound (devtab_copy.device_id, 1) then temp_dev_name = "none";
	else if CDTE.charge_type > hbound (devtab_copy.device_id, 1) then temp_dev_name = "?";
	else temp_dev_name = devtab_copy.device_id (CDTE.charge_type);
	call ioa_$ioa_switch (switch, "^vx^5xcharge_type:^19x^d (^a)", indent, CDTE.charge_type, temp_dev_name);
	call ioa_$ioa_switch (switch, "^vx^5xservice_type:^18x^d (^a)", indent, CDTE.service_type,
	     edit_desc ((CDTE.service_type), service_types));
	call ioa_$ioa_switch (switch, "^vx^5xcurrent_service_type:^10x^d (^a)", indent, CDTE.current_service_type,
	     edit_desc ((CDTE.current_service_type), service_types));
	call ioa_$ioa_switch (switch, "^vx^5xline_type:^21x^d (^a)", indent, CDTE.line_type,
	     edit_desc ((CDTE.line_type), line_types));
	if CDTE.flags.ck_answerback then
	     call ioa_$ioa_switch (switch, "^vx^5xanswerback:^20x^a", indent, CDTE.answerback);
	call ioa_$ioa_switch (switch, "^vx^5xterminal_type:^17x^a", indent, string_edit ((CDTE.initial_terminal_type)));
	call ioa_$ioa_switch (switch, "^vx^5xbaud_rate:^21x^d", indent, CDTE.baud_rate);
	if CDTE.modem_type > 0 then call ioa_$ioa_switch (switch, "^vx^5xmodem_type:^20x^d (^a)", indent, CDTE.modem_type,
		edit_desc ((CDTE.modem_type), dataset_names));
	if string (CDTE.flags.attributes) then
	     call ioa_$ioa_switch (switch, "^vx^5xflags.attributes:^37t^a", indent,
		flag_names (string (CDTE.flags.attributes), attribute_flag_names));
	if string (CDTE.flags.options) then
	     call ioa_$ioa_switch (switch, "^vx^5xflags.options:^37t^a", indent,
		flag_names (string (CDTE.flags.options), option_flag_names));
	if string (CDTE.flags.access_control) then
	     call ioa_$ioa_switch (switch, "^vx^5xflags.access_control:^37t^a", indent, flag_names (string (CDTE.flags.access_control), access_check_flag_names));
	if CDTE.flags.execute_initial_command then
	     call ioa_$ioa_switch (switch, "^vx^5xinitial_command:^15x^a", indent, CDTE.initial_command);
	if CDTE.flags.generic_destination_present then
	     call ioa_$ioa_switch (switch, "^vx^5xgeneric_destination:^11x^a", indent, addr (CDTE.initial_command) -> generic_destination);
	call ioa_$ioa_switch (switch, "^vx^5xevent:^25x^24.3b", indent, addr (CDTE.event) -> bb72);
	call ioa_$ioa_switch (switch, "^vx^5xtra_vec:^23x^d (^a)", indent, CDTE.tra_vec,
	     edit_desc ((CDTE.tra_vec), tra_vec_names));
	call ioa_$ioa_switch (switch, "^vx^5xcount:^25x^d", indent, CDTE.count);
	if string (CDTE.dialup_flags) then
	     call ioa_$ioa_switch (switch, "^vx^5xdialup_flags:^37t^a", indent,
		flag_names (string (CDTE.dialup_flags), dialup_flag_names));
	call ioa_$ioa_switch (switch, "^vx^5xtwx:^27x^d", indent, CDTE.twx);
	call ioa_$ioa_switch (switch, "^vx^5xstate:^20x^5x^d (^a)", indent, CDTE.state, edit_desc (CDTE.state, states));
	call ioa_$ioa_switch (switch, "^vx^5xcurrent_terminal_type:^9x^a", indent, string_edit ((CDTE.current_terminal_type)));
	call ioa_$ioa_switch (switch, "^vx^5xcur_line_type:^17x^d (^a)", indent, CDTE.cur_line_type,
	     edit_desc ((CDTE.cur_line_type), line_types));
	call convert_authorization_$to_string_short (CDTE.current_access_class (1), auth_string, code);
	if auth_string = "" then auth_string = "system_low";
	call ioa_$ioa_switch (switch, "^vx^5xcurrent_access_class:^10x^a", indent, auth_string);
	call ioa_$ioa_switch (switch, "^vx^5xtty_id_code:^19x^a", indent, string_edit (CDTE.tty_id_code));
	call ioa_$ioa_switch (switch, "^vx^5xprocess:^23x^p", indent, CDTE.process);
	if CDTE.dialed_to_procid ^= ""b then
	     call ioa_$ioa_switch (switch, "^vx^5xdialed_to_procid:^14x^w", indent, CDTE.dialed_to_procid);
	call ioa_$ioa_switch (switch, "^vx^5xnext_channel:^15x^3x^d", indent, CDTE.next_channel);
	call ioa_$ioa_switch (switch, "^vx^5xdial_ctl_ring:^14x^3x^d", indent, CDTE.dial_ctl_ring);
	call ioa_$ioa_switch (switch, "^vx^5xuser_name:^21x^a", indent, string (CDTE.user_name));
	if CDTE.disconnected_ate_index ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^5xdisconnected_ate_index:^37t^d", indent, CDTE.disconnected_ate_index);
	call ioa_$ioa_switch (switch, "^vx^5xn_dialups:^21x^d", indent, CDTE.n_dialups);
	call ioa_$ioa_switch (switch, "^vx^5xn_logins:^22x^d", indent, CDTE.n_logins);
	secs = float (CDTE.dialed_up_time, 63);
	mins = divide (secs, 60, 35, 0);
	secs = secs - mins * 60;
	hrs = divide (mins, 60, 35, 0);
	mins = mins - hrs * 60;
	call ioa_$ioa_switch (switch, "^vx^5xdialed_up_time:^16x^d hrs ^d mins ^d secs.", indent, hrs, mins, secs);
	call ioa_$ioa_switch (switch, "^vx^5xdialup_time:^19x^a", indent, edit_time (CDTE.dialup_time));
	if CDTE.disconnected_proc_command ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^5xdisconnected_proc_command:^37t^d", indent, CDTE.disconnected_proc_command);
	if CDTE.disconnected_proc_number ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^5xdisconnected_proc_number:^37t^d", indent, CDTE.disconnected_proc_number);
	if CDTE.n_disconnected_procs ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^5xn_disconnected_procs:^37t^d", indent, CDTE.n_disconnected_procs);
	call ioa_$ioa_switch (switch, "^vx^5xrecent_wakeup_count:^37t^d", indent, CDTE.recent_wakeup_count);
	call ioa_$ioa_switch (switch, "^vx^5xrecent_wakeup_time:^37t^a", indent, edit_time (CDTE.recent_wakeup_time));
	if CDTE.dial_ev_chn ^= 0 then
	     call ioa_$ioa_switch (switch, "^vx^5xdial_ev_chn:^37t^24.3b", indent, addr (CDTE.dial_ev_chn) -> bb72);
	if CDTE.use_iocb then
	     call ioa_$ioa_switch (switch, "^vx^5xiocbp:^37t^p", indent, CDTE.iocbp);

	return;

%include line_types;

%include dataset_names;


dcl  service_types (9) char (12) static options (constant) init (
	"login",
	"ftp",
	"mc",
	"slave",
	"dial",
	"dial out",
	"inactive",
	"multiplexer",
	"tandd");

dcl  states (-1:5) char (15) int static options (constant) init
	("masked", "", "hung up", "listening", "", "", "dialed up");

dcl  uses (-2:7) char (18) int static options (constant) init
	("deleted", "not configured", "unused, free", "hung up", "listening",
	"dialed", "logged in, no proc", "logged in & proc",
	"dialing", "dialed out");

dcl  tra_vec_names (0:25) char (32) int static options (constant) init (
	"",
	"wait_dialup",
	"wait_answerback",
	"wait_login_line",
	"wait_login_args",
	"wait_old_password",
	"wait_password",
	"wait_new_password",
	"wait_logout_sig",
	"wait_logout",
	"wait_logout_hold",
	"wait_detach",
	"wait_new_proc",
	"wait_remove",
	"wait_fin_priv_attach",
	"wait_dial_release",
	"wait_dial_out",
	"wait_hangup",
	"wait_slave_request",
	"wait_greeting_msg",
	"wait_delete_channel",
	"wait_connect_request",
	"wait_tandd_hangup",
	"wait_fin_tandd_attach",
	"wait_discard_wakeups",
	"wait_before_hangup");

     end print_cdte;

string_edit: proc (s) returns (char (128) var);

dcl  s char (*) aligned;

	if s = low (length (s)) then return ("");
	else return (rtrim (s));

     end string_edit;




edit_time: proc (time) returns (char (32) var);

dcl  time fixed bin (71);
dcl  time_string char (24);

	if time = 0 then return ("never");
	call date_time_ (time, time_string);
	return (rtrim (time_string));

     end edit_time;




edit_desc: proc (n, desc) returns (char (32) var);

dcl  n fixed bin;
dcl  desc (*) char (*);

	if n < lbound (desc, 1) | n > hbound (desc, 1) then
	     if n = 0 then return ("");		/* probably just unmitialized */
	     else return ("?");
	else return (rtrim (desc (n)));

     end edit_desc;

flag_names: proc (flags, flag_name_array) returns (char (256) varying);

dcl  flags bit (*) unaligned;
dcl  flag_name_array (*) char (32) varying;
dcl  return_string char (256) varying;

dcl  j fixed bin;

	return_string = "";

	do j = 1 to hbound (flag_name_array, 1);	/* go thru the ones we know the names of */
	     if substr (flags, j, 1) then do;		/* if flag is on, add its name to the return string */
		return_string = return_string || flag_name_array (j);
		return_string = return_string || ",";	/* separate concatenations get better code */
	     end;
	end;
	do j = j to length (flags)			/* go thru the ones we don't know the names of */
	     while (substr (flags, j));		/* as long as there are any more nonzero ones */
	     if substr (flags, j, 1) then do;		/* if unknown flag is on */
		two_digits = j;			/* convert its position to a printable number */
		return_string = return_string || "flag";
		return_string = return_string || ltrim (two_digits);
		return_string = return_string || ",";
	     end;
	end;
	substr (return_string, length (return_string), 1) = ";";
	return (return_string);

     end flag_names;

dump_tree:
     procedure;					/* This does mode=0, whole cdt, treewise */

	tcount = 0;
	indent = 0;
	call ioa_$ioa_switch (switch, "FNP Entries:");
	indent = 2;

	do fnpx = 1 to hbound (cdt.fnp_entry, 1);
	     fnpep = addr (cdt.fnp_entry (fnpx));
	     if fnpe.state ^= FNP_FREE
	     then do;
		call ioa_$ioa_switch (switch, "^2xFNP ^a", substr (collate (), rank ("a") + fnpx, 1));
		if ^dump_cdt_args.brief then call print_fnpe (fnpx);
		if fnpe.threads.daughter_count = 0 & fnpe.threads.daughter = 0
		then ;
		else call show_children (addr (fnpe.threads), -fnpx, "1"b);
	     end;
	end;

/* Other tops */

	indent = 2;
	call ioa_$ioa_switch (switch, "^/Other top level channels:");
	call show_children (addr (cdt.threads), 0, "0"b);


	call ioa_$ioa_switch (switch);
	do cdtx = 1 to cdt.current_size;
	     if cdt.cdt_entry (cdtx).in_use ^= NOW_FREE & ^visited (cdtx)
	     then call ioa_$ioa_switch (switch, "Unthreaded channel: ^a at index ^d.", cdt.cdt_entry (cdtx).name, cdtx);
	end;

	if tcount ^= cdt.n_cdtes
	then call ioa_$ioa_switch (switch, "Total seen is ^d, but cdt.n_cdtes is ^d.", tcount, cdt.n_cdtes);

	return;

     end dump_tree;

show_children:
     procedure (tp, tx, fnp);
declare  cp pointer;
declare  tp pointer;
declare  tx fixed bin;
declare  fx fixed bin;
declare  ffnp_sw bit (1) aligned;
declare  fnp bit (1) aligned;
declare  x fixed bin;
declare  last_sister fixed bin;
declare  dcount fixed bin;				/* daughter count */
declare  1 t aligned like channel_threads based (tp);


	call ioa_$ioa_switch (switch, "^vx^d daughters.", indent, t.daughter_count);
	dcount = 0;
	if t.daughter_count = 0
	then do;
	     if t.daughter ^= 0
	     then do;
		call ioa_$ioa_switch (switch, "^vxdaughter count zero but there are daughters.", indent);
		goto CHASE;
	     end;
	     return;
	end;
CHASE:
	last_sister = 0;

	do x = t.daughter repeat (cdt.cdt_entry (x).threads.next_sister) while (x ^= 0);
	     cp = addr (cdt.cdt_entry (x));
	     call ioa_$ioa_switch (switch, "^vx(^d)^a", indent, x, cp -> cdte.name);
	     if ^dump_cdt_args.brief
	     then call print_cdte (cp);
	     dcount = dcount + 1;
	     tcount = tcount + 1;
	     visited (x) = "1"b;

	     if cp -> cdte.threads.mother ^= tx
	     then call ioa_$ioa_switch (switch, "^vxthreads.mother = ^d, but mother = ^d.", indent, cp -> cdte.mother, tx);
	     if cp -> cdte.threads.prev_sister ^= last_sister
	     then call ioa_$ioa_switch (switch, "^vxthreads.prev_sister = ^d, but prev_sister = ^d.", indent,
		     cp -> cdte.threads.prev_sister, last_sister);
	     last_sister = x;
	     if cp -> cdte.threads.daughter ^= 0
	     then do;
		indent = indent + 2;
		call show_children (addr (cp -> cdte.threads), x, "0"b);
		indent = indent - 2;
	     end;
	     on sub_error_
		begin;
		call find_condition_info_ (null, addr (CI), (0));
		sub_error_info_ptr = CI.info_ptr;
		call convert_status_code_ (sub_error_info.status_code, "", error);
		call ioa_$ioa_switch (switch, "^vxError: ^a ^a",
		     indent, error, sub_error_info.info_string);
		go to ERROR;
	     end;

	     call cdt_mgr_$find_cdt_channel (cdtp, (cp -> cdte.name), fx, ffnp_sw, code);
	     if code = 0
	     then do;
		if fx ^= x			/* wrong place */
		then call ioa_$ioa_switch (switch, "^vxcdt_mgr_ thinks this is cdtx = ^d.", indent, fx);
		if ffnp_sw
		then call ioa_$ioa_switch (switch, "^vxcdt_mgr_ thinks this is a FNP.", indent);
	     end;
ERROR:
	end;					/* the loop */
	if dcount ^= t.daughter_count
	then call ioa_$ioa_switch (switch, "^vxthreads.daughter_count = ^d, but daughter_count = ^d.", indent, t.daughter_count, dcount);

	return;
     end show_children;
     end dump_cdt_;
