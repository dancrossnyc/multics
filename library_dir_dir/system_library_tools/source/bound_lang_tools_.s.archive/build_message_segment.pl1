/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


build_message_segment:	proc(xsource_ptr,xobj_ptr, bitcnt);

/* Modified: 17 Dec 1979 to make all return statements in another_string return value	*/
/*		This program is in sad shape and should be rewritten.		*/

dcl (xsource_ptr, xobj_ptr, source_ptr, obj_ptr) ptr, bitcnt fixed bin(24);

dcl 1 object_segment based(obj_ptr),
      2 index_block(0:500),
        3 message_pointer fixed bin(17), /*Pointer to start of message.*/
        3 severity fixed bin(17), /*Severity level for this message*/
        3 len fixed bin(17),  /*Number of characters for this message.*/
      2 message_block char(248000) aligned; /*Text for all messages.*/

dcl (old_seq_number init(0), new_seq_number,i,
	severity_code) fixed bin(17);

dcl xstring char(64) varying aligned, garbage bit(1) aligned;

dcl	ll fixed bin(15);

dcl ioa_ entry options(variable);

dcl ( s_first,s_last,o_current ) fixed bin(17) init (1);

dcl source_string char(256000) aligned based(source_ptr);

dcl old_first fixed bin(17); /*Beginning of string; to facilitate backing up. */

dcl cur_char char(1) aligned;

dcl white_space char(3) static init("
 	");	/* new_lline, space, tab */


dcl NLNL init("

") char(2) int static;

dcl	(index,length,search,substr)  builtin;





	obj_ptr = xobj_ptr;
	source_ptr=xsource_ptr;


	do while(another_message());
	/*Process sequence number.*/
	  garbage=another_string(xstring); /*Get first string*/
	  new_seq_number=0;
		  do ll=1 to length(xstring);
			new_seq_number=new_seq_number*10+index("123456789",substr(xstring,ll,1));
		  end;
	  if new_seq_number > 500
	  then do;
	         call ioa_("Sequence number > 500--fatal error");
	         return;
	       end;
	  if new_seq_number <= old_seq_number
	  then do;
		call ioa_("Message number ^d is out of sequence--fatal error",new_seq_number);
	         return;
	       end;
	  else do i=old_seq_number+1 to new_seq_number-1;
	  /*Set index block entries for missing messages.*/
	         index_block(i).message_pointer = -1;
	         index_block(i).len = 0;
	         index_block(i).severity = 0;
	       end;

	  old_seq_number = new_seq_number; /*Advance old_seq_number.*/




	/*Process Severity Level Code.*/

	 old_first = s_first; /*To permit backing up if no Severity Code.*/

	  if another_string(xstring)
	  then do;  /*Determine and insert severity level code*/
	         if substr(xstring,1,1) = "("  /*Assume "(" adequate*/
	         then do;
	                do i = 2 by 1 while(substr(xstring,i,1) ^= ")" ); end;
	                /*Extract severity code from enclosing parentheses*/
		      severity_code = index("1234",substr(xstring,2,1));
	                if severity_code > 4
	                then do;
			call ioa_("Invalid severity for message ^d--fatal error",new_seq_number);
	                       return;
	                     end;
	                else index_block(new_seq_number).severity
	                 = severity_code;
	              end;
	         else do;
	                index_block(new_seq_number).severity
	                = 2; /*Default value of two.*/
	                s_first = old_first; /*Back up.*/
	              end;
	       end;
	  else do;  /*No more strings after sequence number*/
		call ioa_("Message number ^d is null--fatal error.");
	         return;
	       end;
	/*End of Severity Level Code Processing.*/




	/* Move message text to object segment. */

dcl cum_length fixed bin(17), delim_count fixed bin(17) init(0);
	  cum_length=0;

	  do s_first = s_first by 1 while
	  (substr(source_string,s_first,2)^=NLNL);
		/*Copy message.*/


	    cur_char=substr(source_string,s_first,1);
	     if search(cur_char,white_space) = 1
	    then do;
	           delim_count=delim_count+1;/*Count redundant delimeters.*/
	           if delim_count = 1 
	           then do;
	                  substr(message_block,o_current,1)=" ";
	                  o_current=o_current+1;
	                  cum_length=cum_length+1;
	                end;
	         end;
	    else do;
	           delim_count=0;
	           substr(message_block,o_current,1)=cur_char;
	           o_current=o_current+1;
	           cum_length=cum_length+1;
	         end;

	  end;

	  index_block(new_seq_number).len = cum_length;
	  index_block(new_seq_number).message_pointer
		=o_current-cum_length;
	  s_first=s_first+2; /*Bypass two trailing nl's.*/


	end; /*End of the major "do while(another_message)" block.*/


	/*Close out object segment by filling in remaining
	index block entries with "null" values. */


	do i=old_seq_number+1 to 500;
	  index_block(i).message_pointer = -1;
	  index_block(i).len = 0;
	  index_block(i).severity = 0;
	end;

	/*Compute bit count for return to command.*/

	bitcnt = 3*501*36+9*o_current;

	return;  /*Processing done.*/



	/*Internal procedure to locate next string in text.*/

another_string:	proc(xstring) returns(bit(1));

	/*another_string locates and returns the next string,
	if there is one, in a message, returning with its function
	value set to "1".  If no more strings exist in the message,
	the value is "0".  another_string is entered with s_first
	pointing to the first character following the previous 
	string in the message.*/

dcl xstring char(64) varying aligned;

dcl k fixed bin, skip_comments bit(1);

	if substr(source_string,s_first,2)^=NLNL 
	then do;

	     skip_comments = "1"b;
	     do while(skip_comments);

		/* skip over white space */

		do while(search(substr(source_string,s_first,1),white_space) ^= 0);
		     s_first = s_first + 1;
		     end;

		if substr(source_string,s_first,2) = "/*"
		then do;
		     k = index(substr(source_string,s_first+2),"*/");

		     if k = 0
		     then do;
			call ioa_("Unbalanced comment--fatal error");
			return("0"b);
			end;

		     s_first = s_first + k + 4;
		     end;
		else skip_comments = "0"b;
		end;

	     /* scan until we hit white space */

	     s_last = s_first + 1;
	     do while(search(substr(source_string,s_last,1),white_space) = 0);
		s_last = s_last + 1;
		end;

	     xstring = substr(source_string,s_first,s_last-s_first);
	     s_first = s_last;

	     return("1"b);
	    end;

	return("0"b); /*End of message.*/

	end another_string;



	/*Internal procedure to determine existance of
	another message in the text.*/

another_message:	proc returns(bit(1));

	/*another_message returns with a function value of
	"1" if there is another message in the text; else
	it returns with a value of "0".*/


dcl xstring char(64) varying aligned;


	old_first=s_first; /*To permit backing up, if necessary.*/
	garbage=another_string(xstring);
	if xstring="(end)" then return("0"b);
	else do;
	       s_first=old_first;  /*Back up.*/
	       return("1"b);
	     end;

	end another_message;



	end build_message_segment;
