/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


generate_compatible: genc: proc;

/* Automatic */

dcl  linep ptr;
dcl  c1 char (1);
dcl  chars72 char (72);
dcl  new bit (1);
dcl  old bit (1);
dcl  error_phase fixed bin;
dcl  next_term fixed bin;
dcl  next_pr fixed bin;
dcl  pname char (36) var;
dcl  search_name char (36) var;
dcl (i, j, k) fixed bin;
dcl  linel fixed bin;
dcl  tx fixed bin;
dcl  pr_ptrs (20) ptr;
dcl  term_names (20) char (36) var;
dcl 1 symbols (200) aligned,
    2 name char (36) var,
    2 nt_ptr ptr unal,
    2 unused bit (1) aligned;
dcl  ptrs (1) ptr;
dcl  N fixed bin;
dcl  matrix (108, 108) bit (1) unal;
dcl  code fixed bin (35);
dcl  txp ptr;
dcl  rootp ptr;
dcl  temp ptr;
dcl  nsymbols fixed bin;
dcl  stack (108) fixed bin;
dcl  depth fixed bin;
dcl  bits (72) bit (72);
dcl  eof bit (1) aligned;


/* Based */

dcl  line char (linel) based (linep);
dcl  total_buffer char (8000) based (txp);
dcl  chars (10000) char (1) unaligned based;
dcl  area area based;
dcl 1 symbol based,
    2 name char (36) var,
    2 nt_ptr ptr unal;


dcl 1 pr based aligned,
    2 numt fixed bin,
    2 dummy bit (1),
    2 term (N refer (pr.numt)),
      3 terminal bit (1) unal,
      3 processed bit (1) unal,
      3 pad bit (34) unal,
      3 value fixed bin,
      3 datap ptr;

dcl 1 nt based aligned,
    2 nump fixed bin,
    2 id char (36) var,
    2 prod (N refer (nt.nump)) ptr;

/* Static */

dcl  formats (10) char (48) aligned static options (constant) init (
     "No ""NL"" found in bnf text.",
     "No ""NL<"" sequence found in bnf text.",
     "Not enough lines in bnf text.",
     "No root production found.",
     "Missing "">"" in line:   ^s^a",
     "Missing "">"" in line:   ^s^a",
     "Keyword lookup failed: ""^a""",
     "Non-terminal ""^a"" is undefined.",
     "Non-terminal ""^a"" has never been referenced.",
     "Missing ""]"" in line:   ^s^a");
dcl  me char (2) static options (constant) init ("gc");
dcl  gc_new bit (1) static init ("1"b);
dcl  gc_diff bit (1) static init ("1"b);
dcl  NL char (1) static options (constant) init ("
");
dcl  NL_LESS char (2) static options (constant) init ("
<");
dcl  WHITE char (3) static options (constant) init ("
	 ");
dcl  cleanup condition;

/* Builtin */

dcl (null, addr, substr, search, verify, index) builtin;

/* External */

dcl  compatible_bnf$ ext;
dcl  incompatible_bnf$ ext;

/* Entries */

dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  area_ entry (fixed bin (19), ptr);

/*  */

/*

   Initialize variables, set up buffer, get ptrs

*/

	txp = addr (compatible_bnf$);
	ptrs (1) = null;
	on cleanup call clean;
	call get_temp_segments_ (me, ptrs, code);
	temp = ptrs (1);
	call area_ (200000, temp);

/* Initially, every attribute is incompatible with every other attribute except itself. */

	do i = 1 to 108;
	     do j = 1 to 108;
		matrix (i, j) = "1"b;
	     end;
	     matrix (i, i) = "0"b;
	end;

/* Mark compatible attributes. */

	error_phase = 0;

	call parse_bnf;
	call mark (rootp, "0"b);

/* Now mark as incompatible certain combinations that fell out
   of the compatible BNF that we didn't want */

	error_phase = 10;
	txp = addr (incompatible_bnf$);

	call parse_bnf;
	call mark (rootp, "1"b);
	do i = 1 to 108;
	     matrix (i, i) = "0"b;
	end;

/*
   Output the compatible matrix, both to user_output and to file
*/

	if gc_new then do;
	     call ioa_ ("^-PROGRAM GENERATED TABLE^2/");
	     call ioa_ ("          111111111122222222223333333333444444444455555555556666666666777");
	     call ioa_ (" 123456789012345678901234567890123456789012345678901234567890123456789012");
	     call ioa_ (" ------------------------------------------------------------------------");
	end;
	do i = 1 to 72;
	     do j = 1 to 72;
		substr (bits (i), j, 1) = matrix (i, j);
	     end;
	     if gc_new then call ioa_ ("""^b""b, /* ^2d ^a */", bits (i), i, lookup_keyword (i));
	end;

	if gc_diff then do;
	     call ioa_ ("^|^2/^-DIFFERENCES FROM REAL TABLE^2/");
	     call ioa_ ("          1111111111222222222233333333334444444444555555555566666666667777777");
	     call ioa_ (" 1234567890123456789012345678901234567890123456789012345678901234567890123456");
	     call ioa_ (" ----------------------------------------------------------------------------");
	     do i = 1 to 72;
		do j = 1 to 72;
		     new = substr (bits (i), j, 1);
		     old = substr (incompatable (i), j, 1);
		     if old = new then c1 = "=";
		     else if old then c1 = "I";
		     else c1 = "C";
		     substr (chars72, j, 1) = c1;
		end;
		substr (chars72, i, 1) = "\";
		call ioa_ ("""^a""b, /* ^2d ^a */", chars72, i, lookup_keyword (i));
	     end;
	     call ioa_ (" ----------------------------------------------------------------------------");
	     call ioa_ ("          1111111111222222222233333333334444444444555555555566666666667777777");
	     call ioa_ (" 1234567890123456789012345678901234567890123456789012345678901234567890123456");
	end;


	call clean;
	return;

GLOBAL_ERROR:
	call clean;
	return;

ERROR:	proc (x);

dcl  x fixed bin;

	     call com_err_ (0, "generate_compatible", "Error ^d while scanning ^[^;in^]compatible_bnf.", x, error_phase=0);
	     call com_err_ (0, "generate_compatible", formats (x), search_name, line);
	     goto GLOBAL_ERROR;
	end;

lookup_keyword: proc (x) returns (char (16) aligned);

dcl  x fixed bin;
dcl  first_i fixed bin;
dcl  i fixed bin;

	     first_i = 0;
	     do i = 1 to hbound (keyword (*), 1);
		if x = bit_index (i)
		then if first_i = 0
		     then first_i = i;
		     else return (keyword (i));	/* short names usually preceed long names... */
	     end;
	     if first_i ^= 0
	     then return (keyword (first_i));

	     do i = 1 to hbound (system_keyword (*), 1);
		if x = system_bit_index (i)
		then return (system_keyword (i));
	     end;

	     return ("***");

	end lookup_keyword;


clean:	proc;

	     call release_temp_segments_ (me, ptrs, code);

	end;

/*  */

/* Subroutines */

parse_bnf: proc;


/* This routine parses the BNF pointed to by txp. It allocates nodes for all terminals and non-terminals
   and threads them together in the indicated fashion (not necessarily tree form).

   The syntax of the BNF is as follows:

   first char on line is "<" implies new non-terminal, i.e. a production that defines a new non-terminal.

   first char on line is blank implies another production for the current non-terminal.

   first chars on line are "eof" implies no more productions.

   any other first char(s) implies line is ignored.

   The total BNF cannot be more than 8K characters.
   A production must be entirely on a single line.
   Nonterminals are distinguished by being enclosed in "<" and ">".
   Symbols must be <= 36 characters.
   The root of the tree is called "<root>".

*/

	     rootp = null;
	     eof = "0"b;
	     nsymbols = 0;
	     depth = 0;
	     linep = txp;
	     next_term = 1;
	     next_pr = 1;
	     pname = "";

/* start scan with first line with a "<" at beginning */

	     if substr (total_buffer, 1, 1) = "<"
	     then do;
		i = index (total_buffer, NL);
		if i <= 0 then call ERROR (1);
		linel = i;
	     end;
	     else do;
		i = index (total_buffer, NL_LESS);
		if i <= 0 then call ERROR (2);
		linep = addr (linep -> chars (i+1));
		linel = index (linep -> total_buffer, NL);
		if linel <= 0 then call ERROR (3);
	     end;

	     do while (linep ^= null);
		call parse_production;
		call finish_production;
		call get_line;
	     end;
	     eof = "1"b;
	     linep = txp;				/* so test in parse_production will not get null ptr ref */
	     call parse_production;			/* to get last NT structure allocated */

/* Now scan all nodes converting pointers to symbols into pointers to non-terminal nodes */

	     rootp = lookup ("<root>") -> symbol.nt_ptr;
	     if rootp = null then call ERROR (4);
	     call scan (rootp);

	     do i = 1 to nsymbols while (symbols (i).unused = "0"b);
	     end;

	     if i <= nsymbols
	     then do;
		     search_name = symbols (i).name;
		     call ERROR (9);
		end;

	     return;

/*  */

get_line:	     proc;

dcl  i fixed bin;

dummy_line:
		linep = addr (linep -> chars (linel+1));
		i = index (linep -> total_buffer, NL);
		if i <= 0 then do;
		     linep = null;
		     return;
		end;
		linel = i;
		if substr (line, 1, 3) = "eof"
		then do;
		     linep = null;
		     return;
		end;
		if substr (line, 1, 1) = "<" | substr (line, 1, 1) = " " | substr (line, 1, 1) = "	" then return;
		goto dummy_line;

	     end get_line;

/*  */

parse_production: proc;

dcl  ntp ptr;

/* called with production in "line". If first char is not "<" then start filling in terms
   at position 2. Else start with position 1 and finish the previous non-terminal.
*/

		tx = 1;
		if (substr (line, 1, 1) = "<" & pname ^= "") | eof
		then do;				/* a new production, clean up previous */
		     N = next_pr - 1;
		     allocate nt in (temp -> area) set (ntp);
		     ntp -> nt.nump = N;
		     ntp -> nt.id = pname;
		     do i = 1 to N;
			ntp -> nt.prod (i) = pr_ptrs (i);
		     end;
		     do i = 1 to nsymbols;
			if pname = symbols (i).name	/* name used on rhs before defined on lhs */
			then do;
			     symbols (i).nt_ptr = ntp;
			     goto done;
			end;
		     end;
		     nsymbols = nsymbols + 1;
		     symbols (nsymbols).name = pname;
		     symbols (nsymbols).nt_ptr = ntp;
		     symbols (nsymbols).unused = "1"b;
done:
		     next_pr = 1;
		end;

		if eof then return;			/* all we wanted was to generate the nt structure */

		if substr (line, 1, 1) = "<" then do;
		     i = index (line, ">");
		     if i <= 0 then call ERROR (5);
		     pname = substr (line, 1, i);
		     tx = i+1;
		end;

/* Now scan for specific terms */
next_token:
		j = verify (substr (line, tx), WHITE)-1;
		if j < 0 then return;		/* all filled in */
		tx = tx + j;
		if substr (line, tx, 1) = "<"
		then do;				/* a non-terminal term */
		     k = index (substr (line, tx), ">");
		     if k <= 0 then call ERROR (6);
		end;
		else if substr (line, tx, 1) = "["	/* optional terminal */
		then do;
		     k = index (substr (line, tx), "]");
		     if k = 0 then call ERROR (10);
		end;
		else do;
		     k = search (substr (line, tx), WHITE)-1;
		     if k < 0 then return;
		end;

		term_names (next_term) = substr (line, tx, k);
		next_term = next_term + 1;
		tx = tx + k;
		goto next_token;

	     end parse_production;

finish_production: proc;

/* input is array of symbols in term_names. This program builds a "pr" structure and fills
   in a pointer to the structure in pr_ptrs (i).

*/

dcl  pp ptr;

		N = next_term - 1;
		allocate pr in (temp -> area) set (pp);
		pp -> pr.numt = N;
		do i = 1 to N;
		     pp -> pr (i).datap = lookup (term_names (i));
		     if substr (term_names (i), 1, 1) ^= "<"
		     then do;
			pp -> pr (i).terminal = "1"b;
			pp -> pr (i).value = map_number (term_names (i));
		     end;
		end;
		pr_ptrs (next_pr) = pp;
		next_pr = next_pr + 1;
		next_term = 1;
		return;

map_number:	proc (name) returns (fixed bin);

dcl  name char (36) var;

dcl  i fixed bin;

		     search_name = name;
		     do i = 1 to hbound (keyword (*), 1) while (keyword (i) ^= name);
		     end;
		     if i <= hbound (keyword (*), 1)
		     then return (bit_index (i));

		     do i = 1 to hbound (system_keyword (*), 1) while (system_keyword (i) ^= name);
		     end;
		     if i <= hbound (system_keyword (*), 1)
		     then return (system_bit_index (i));

		     call ERROR (7);

		end;

	     end /* finish_production */;

lookup:		proc (tname) returns (ptr);

dcl  tname char (36) var;
dcl  i fixed bin;

		     do i = 1 to nsymbols while (symbols (i).name ^= tname);
		     end;
		     if i > nsymbols
		     then do;
			     i, nsymbols = nsymbols + 1;
			     symbols (nsymbols).name = tname;
			     symbols (nsymbols).nt_ptr = null;
			end;

		     symbols (i).unused = "0"b;
		     return (addr (symbols (i)));
		end lookup;


scan:	     proc (rp);

dcl  rp ptr;
dcl (i, j) fixed bin;
dcl (pp, q) ptr;

/* This routine does a recursive walk of the tree changing any non-terminal pointers
   from a pointer to the symbol to a pointer to the allocated node */

		do i = 1 to rp -> nt.nump;		/* scan each production of this non-terminal */
		     pp = rp -> nt.prod (i);
		     do j = 1 to pp -> pr.numt;	/* scan each brother of this production */
			if ^ pp -> pr (j).terminal
			then do;
			     if ^ pp -> pr (j).processed then do;
				q = pp -> pr (j).datap -> symbol.nt_ptr;
				if q = null then do;
				     search_name = pp -> pr (j).datap -> symbol.name;
				     call ERROR (8);
				end;
				pp -> pr (j).datap = q;
				pp -> pr (j).processed = "1"b;
				call scan (q);
			     end;
			end;
		     end;
		end;

	     end scan;

	end parse_bnf;

/*  */

mark:	proc (p, mark_value);

dcl  p ptr;
dcl  mark_value bit (1) aligned;
dcl (i, j) fixed bin;
dcl  pp ptr;
dcl  save_depth fixed bin;
dcl  save_depth1 fixed bin;
dcl  k fixed bin;

/* This routine walks the tree and marks each compatible set of  attributes.
   It does this by keeping a stack of all terminal symbols above the current node of the tree
   that are immediate brothers to non-terminal nodes that are direct ancestors of the current node. That is,
   terminal symbols in the same production as the ancestor non-terminal. Before recursing to
   a lower level (when finding a non-terminal in the tree walk) all immediate brothers (of the same
   production as the non-terminal) that are terminal nodes, are placed on the stack. When a terminal
   node is encountered, it is placed on the stack and "reflect" is called
   to mark all terminals on the stack as being compatible.

*/

	     do i = 1 to p -> nt.nump;
		pp = p -> nt.prod (i);
		save_depth = depth;
		do j = 1 to pp -> pr.numt;
		     if pp -> pr (j).terminal
		     then do;
			depth = depth + 1;
			stack (depth) = pp -> pr (j).value;
		     end;
		end;
		do j = 1 to pp -> pr.numt;
		     save_depth1 = depth;
		     do k = 1 to pp -> pr.numt;
			if (^ pp -> pr (k).terminal) & (j ^= k) then call markt (pp -> pr (k).datap, mark_value);
		     end;
		     if pp -> pr (j).terminal then call reflect (pp -> pr (j).value, mark_value);
		     else call mark (pp -> pr (j).datap, mark_value);
		     depth = save_depth1;
		end;
		depth = save_depth;
	     end;
	     return;

	end mark;

markt:	proc (p, mark_value);

dcl  p ptr;
dcl  mark_value bit (1) aligned;
dcl (dx, v) fixed bin;
dcl (i, j) fixed bin;
dcl  pp ptr;


	     do i = 1 to p -> nt.nump;
		pp = p -> nt.prod (i);
		do j = 1 to pp -> pr.numt;
		     if pp -> pr (j).terminal
		     then do;
			v = pp -> pr (j).value;
			do dx = 1 to depth while (stack (dx) ^= v);
			end;

			if dx > depth
			then do;
				depth = depth + 1;
				stack (depth) = v;
			     end;
		     end;
		     else call markt (pp -> pr (j).datap, mark_value);
		end;
	     end;
	     return;

	end markt;

reflect:	proc (x, mark_value);

dcl  x fixed bin;
dcl  mark_value bit (1) aligned;

dcl  i fixed bin;

	     do i = 1 to depth;
		matrix (x, stack (i)) = mark_value;
		matrix (stack (i), x) = mark_value;
	     end;

	end reflect;


/*  */

gc_set_new: entry;

	gc_new = "1"b;
	return;

gc_reset_new: entry;

	gc_new = "0"b;
	return;

gc_set_diff: entry;

	gc_diff = "1"b;
	return;

gc_reset_diff: entry;

	gc_diff = "0"b;
	return;

/*  */

%include pl1_attribute_table;

     end generate_compatible;
