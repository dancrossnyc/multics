/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
/* convert_MR10_2_pdts - program to set MR11 PDT default values in live pdts.

   1) authorization ranges

   82-03-12  E. N. Kittlitz. stolen from cv_MR9_pdts.
   84-07-05  BIM stolen from cv_MR10_pdts
*/

convert_MR10_2_pdts:
     procedure;


/* automatic */

	dcl     arg_count		 fixed bin;
	dcl     alp		 pointer;
	dcl     ap		 pointer;
	dcl     al		 fixed bin (21);
	dcl     (pdtp, pdtep)	 ptr;
	dcl     (namex, i)		 fixed bin;
	dcl     name		 char (32);
	dcl     code		 fixed bin (35);
	dcl     bit_count		 fixed bin (24);
	dcl     pdt_directory	 char (168);
	dcl     area_ptr		 ptr;

/* based */

	dcl     argument		 char (al) based (ap);

/* builtins */

	dcl     (addr, null, sum)	 builtin;

/* entries */

	dcl     absolute_pathname_	 entry (character (*), character (*), fixed binary (35));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin, ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	dcl     terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));
	dcl     get_system_free_area_	 entry (ptr);
	dcl     com_err_		 entry options (variable);

/* based */

	dcl     system_area		 area (65536 + 24) aligned based (area_ptr);

/* include files */

%include access_mode_values;
%include pdt;
%include star_structures;
%include user_attributes;
%include terminate_file;
%page;

/* program */

	call cu_$arg_list_ptr (alp);
	call do_work (alp, "convert_MR10_2_pdts", format_pdt);
	return;

reset_MR10_2_pdts:
     entry options (variable);

	call cu_$arg_list_ptr (alp);
	call do_work (alp, "reset_MR10_2_pdts", reset_pdt);
	return;


do_work:
     procedure (arg_list_ptr, me, worker_proc);

	declare arg_list_ptr	 pointer;
	declare me		 char (*);
	declare worker_proc		 entry variable;

	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, me);
		return;
	     end;

	if arg_count ^= 1
	then do;
		call com_err_ (0, me, "Usage: ^a PDT_DIR_PATHNAME", me);
		return;
	     end;

	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);
	call absolute_pathname_ (argument, pdt_directory, code);
	if code ^= 0
	then do;
		call com_err_ (code, me, "^a", argument);
		return;
	     end;

	call get_system_free_area_ (area_ptr);
	call map_over_pdts (pdt_directory, worker_proc);
	return;

/* Internal procedure to format all pdts in a given directory */

map_over_pdts:
     procedure (bv_pdt_dir, formatter);

/* parameters */

	dcl     bv_pdt_dir		 char (*) parameter;
	dcl     formatter		 entry (char (*), char (*), char (*)) variable;

/* program */

	call hcs_$star_ (bv_pdt_dir, "**.pdt", 3, area_ptr, star_entry_count, star_entry_ptr, star_names_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_MR10_2_pdts", "^a", bv_pdt_dir);
		return;
	     end;

	do namex = 1 to star_entry_count;
	     name = star_names (star_entries.nindex (namex));
	     call formatter (me, bv_pdt_dir, name);
	end;

	free star_names in (system_area);
	free star_entries in (system_area);
	return;



/* This internal procedure initializes a single PDT.  All PDT entries
   which have ever been used are modified; not just those which are presently
   active.  For MR11, initialize authorization ranges. */


     end map_over_pdts;
     end do_work;


format_pdt:
     proc (me, bv_pdt_dirname, bv_pdt_name);

/* parameters */

	dcl     me		 char (*);
	dcl     (bv_pdt_dirname, bv_pdt_name)
				 char (*) parameter;



/* program */

	call initiate_file_ (bv_pdt_dirname, bv_pdt_name, RW_ACCESS, pdtp, bit_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_MR10_2_pdts", "^a>^a", bv_pdt_dirname, bv_pdt_name);
		return;
	     end;

	if pdt.version = PDT_version
	then go to TERM_RETURN;			/* already done */
	pdt.version = -1;				/* broken while in transition */
	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     user.user_authorization (1) = ""b;		/* system_low */
	     user.user_authorization (2) = user.pad_was_authorization;
	     user.pad_was_authorization = ""b;
	end;
	pdt.version = PDT_version;
TERM_RETURN:
	call terminate_file_ (pdtp, (0), TERM_FILE_TERM, code);

	return;

     end format_pdt;

reset_pdt:
     proc (me, bv_pdt_dirname, bv_pdt_name);

/* parameters */

	dcl     me		 char (*);
	dcl     (bv_pdt_dirname, bv_pdt_name)
				 char (*) parameter;



/* program */

	call initiate_file_ (bv_pdt_dirname, bv_pdt_name, RW_ACCESS, pdtp, bit_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, me, "^a>^a", bv_pdt_dirname, bv_pdt_name);
		return;
	     end;

	if pdt.version = PDT_version - 1		/* already reset */
	then go to TERM_RETURN;
	pdt.version = -1;				/* broken while in transition */
	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     user.pad_was_authorization = user.user_authorization (2);
	     user.user_authorization (*) = ""b;
	end;
	pdt.version = PDT_version - 1;
TERM_RETURN:
	call terminate_file_ (pdtp, (0), TERM_FILE_TERM, code);

	return;

     end reset_pdt;
     end convert_MR10_2_pdts;
