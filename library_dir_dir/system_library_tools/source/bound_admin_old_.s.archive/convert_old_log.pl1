/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: style5 */
convert_old_log:
        procedure options (variable);


/**** Modification history:
      Created 1984-12-18, BIM: from the old print_log command.
      Modified 1985-01-20, BIM: to be run after the first bootload.
      Modified 1985 Jan 21, Art Beattie: display old log names in error messages
      and as conversion progresses. */

        dcl     absolute_pathname_	entry (character (*), character (*),
				fixed binary (35));
        dcl     expand_pathname_	entry (character (*), character (*),
				character (*), fixed binary (35));
        dcl     initiate_file_	entry (character (*), character (*),
				bit (*), pointer, fixed binary (24),
				fixed binary (35));
        dcl     terminate_file_	entry (pointer, fixed binary (24),
				bit (*), fixed binary (35));
        declare pathname_		entry (character (*), character (*))
				returns (character (168));
        dcl     com_err_		entry options (variable);
        dcl     cu_$arg_list_ptr	entry returns (pointer);
        dcl     ioa_		entry () options (variable);
        declare sub_err_		entry () options (variable);
        declare ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr,
				entry, fixed bin (35));
        declare ssu_$destroy_invocation entry (ptr);
        declare ssu_$arg_count	entry (ptr, fixed bin);
        declare ssu_$arg_ptr		entry (ptr, fixed bin, ptr,
				fixed bin (21));
        declare ssu_$abort_line	entry () options (variable);
        dcl     log_read_$open	entry (character (*), character (*),
				pointer, fixed binary (35));
        dcl     log_read_$close	entry (pointer, fixed binary (35));
        dcl     log_write_$open_for_migrate
				entry (character (*), character (*),
				bit (1) aligned, pointer,
				fixed binary (35));
        dcl     log_write_$close	entry (pointer, fixed binary (35));
        dcl     log_write_$general	entry (pointer, fixed binary (35),
				fixed binary, fixed binary,
				character (10) var, pointer,
				fixed binary (35));
        dcl     log_segment_$finish_message
				entry (pointer, pointer,
				fixed binary (35));
        dcl     copy_		entry (pointer);


        dcl     code		fixed bin (35);
        dcl     argument		char (al) based (ap) unaligned;
        dcl     ap			ptr;
        dcl     al			fixed bin (21);
        dcl     old_log_x		fixed bin;
        dcl     an			fixed bin;
        dcl     n_args		fixed bin;
        dcl     total_messages	fixed bin;
        dcl     sci_ptr		pointer;

        dcl     COMMAND_NAME		char (32) int static
				options (constant)
				init ("convert_old_log");
        dcl     error_table_$badopt	ext fixed bin (35);
        dcl     error_table_$too_many_args
				fixed bin (35) ext static;
        dcl     error_table_$noarg	fixed bin (35) ext static;

        dcl     cleanup		condition;
        dcl     no_write_permission	condition;

        declare 1 opt		aligned,
	        2 log_write_ptr	pointer,
	        2 log_read_ptr	pointer,
	        2 pathnames		unaligned,
		3 old_log		unaligned,
		  4 dir_name	char (168),
		  4 entryname	char (32),
		  4 history_dir	char (168),
		3 new_log		unaligned,
		  4 dir_name	char (168),
		  4 entryname	char (32),
		  4 history_dir	char (168),
	        2 n_old_logs	fixed bin,
	        2 old_log_ptrs	(200) pointer,
	        2 old_log_names	(200) char (32);

        declare (addr, length, rtrim)	builtin;


        call ssu_$standalone_invocation (sci_ptr, COMMAND_NAME, "1.0",
	  cu_$arg_list_ptr (), SSU_ABORT, code);
        if code ^= 0 then
	      do;
	      call com_err_ (code, COMMAND_NAME,
		"Failed to create ssu_ invocation");
	      return;
	      end;

        call ssu_$arg_count (sci_ptr, n_args);

        opt.log_write_ptr = null ();
        opt.pathnames = "";
        opt.old_log_ptrs (*) = null ();
        opt.n_old_logs = 0;

        on cleanup call clean_up;

        if n_args = 0 then
	      call ssu_$abort_line (sci_ptr, 0,
		"Usage: ^a OLD_LOG_PATHNAME {-old_history_dir OLD_LOG_DIR_PATH -new_dir NEW_LOG_DIR_PATH -new_history_dir NEW_LOG_HISTORY_PATH}"
		, COMMAND_NAME);

        do an = 1 to n_args;
	      call ssu_$arg_ptr (sci_ptr, an, ap, al);
	      if index (argument, "-") ^= 1 then
		    do;
		    if opt.old_log.dir_name ^= "" then
			  call ssu_$abort_line (sci_ptr,
			      error_table_$too_many_args,
			      "Only one log pathname may be given. ^a is the second."
			      , argument);
		    call expand_pathname_ (argument, opt.old_log.dir_name,
		        opt.old_log.entryname, code);
		    if code ^= 0 then
			  call ssu_$abort_line (sci_ptr, code, "^a",
			      argument);
		    end;
	      else if (argument = "-old_history_dir") | (argument = "-ohd")
		then
		    do;
		    call get_next_arg (
		        "pathname of a dir full of old logs following -history."
		        );
		    call absolute_pathname_ (argument,
		        opt.old_log.history_dir, code);
		    if code ^= 0 then
			  call ssu_$abort_line (sci_ptr, code, "^a",
			      argument);
		    end;
	      else if (argument = "-new_dir") | (argument = "-nd") then
		    do;
		    call get_next_arg (
		        "target directory for converted log.");
		    call absolute_pathname_ (argument, opt.new_log.dir_name,
		        code);
		    if code ^= 0 then
			  call ssu_$abort_line (sci_ptr, code, "^a",
			      argument);
		    end;
	      else if (argument = "-new_history_dir") | (argument = "-nhd")
		then
		    do;
		    call get_next_arg (
		        "target directory for the second and later new log segments."
		        );
		    call absolute_pathname_ (argument,
		        opt.new_log.history_dir, code);
		    if code ^= 0 then
			  call ssu_$abort_line (sci_ptr, code, "^a",
			      argument);
		    end;
	      else
		    call ssu_$abort_line (sci_ptr, error_table_$badopt,
		        "^a", argument);
        end;

        if opt.old_log.dir_name = "" then
	      call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"A log to be converted must be specified.");
        if opt.old_log.history_dir = "" then
	      opt.old_log.history_dir = ">udd>SysAdmin>admin>history";
        if opt.new_log.dir_name = "" then
	      opt.new_log.dir_name = ">system_control_dir>as_logs";
        opt.new_log.entryname = opt.old_log.entryname;
        if opt.new_log.history_dir = "" then
	      opt.new_log.history_dir = ">udd>SysAdmin>admin>history";

/**** Initiate the first (most recent) log. */

        call initiate_file_ (opt.old_log.dir_name, opt.old_log.entryname,
	  R_ACCESS, opt.old_log_ptrs (1), (0), code);
        if code ^= 0 then
	      call ssu_$abort_line (sci_ptr, code, "Failed to initiate ^a.",
		pathname_ (opt.old_log.dir_name, opt.old_log.entryname));
        opt.old_log_names (1) = opt.old_log.entryname;
        opt.n_old_logs = 1;

        call add_to_history (1, opt.old_log.dir_name);  /* get the co-resident segments */
        call add_to_history (opt.n_old_logs, opt.old_log.history_dir);

/**** We now have an array of pointers to old log segments to eat */
/**** We want to write all the messages into segments in the history dir. */
/**** And then move the last one and fix its header. */

        call log_write_$open_for_migrate (opt.new_log.history_dir,
	  opt.new_log.entryname, "1"b, opt.log_write_ptr, code);
        if code ^= 0 then
	      call ssu_$abort_line (sci_ptr, code,
		"Failed to open new log ^a.",
		pathname_ (opt.new_log.dir_name, opt.new_log.entryname));

        total_messages = 0;
        do old_log_x = opt.n_old_logs to 1 by -1;	      /* Work from the oldest */
	      call ioa_ ("convert_old_log: Converting old log segment ^a",
		opt.old_log_names (old_log_x));
	      call write_one_log (opt.old_log_ptrs (old_log_x),
		opt.old_log_names (old_log_x));
        end;

        call log_write_$close (opt.log_write_ptr, (0));
        if opt.new_log.dir_name ^= opt.new_log.history_dir then
	      call fix_history_dir;
        call terminate_old_logs;

        call ioa_ ("convert_old_log: Converted ^d segments, ^d messages.",
	  opt.n_old_logs, total_messages);

        return;


get_next_arg:
        procedure (P_what);

        declare P_what		char (*);

        if n_args = an then
	      call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a", P_what)
		;
        an = an + 1;
        call ssu_$arg_ptr (sci_ptr, an, ap, al);
        return;
        end get_next_arg;

terminate_old_logs:
        procedure;

        declare x			fixed bin;

        do x = 1 to opt.n_old_logs;
	      call terminate_file_ (opt.old_log_ptrs (x), (0), TERM_FILE_TERM,
		(0));
        end;
        return;
        end terminate_old_logs;

add_to_history:
        procedure (P_oldest_index, P_dir_name);

        declare P_oldest_index	fixed bin;
        declare P_dir_name		char (*);

        declare entryname		char (32);
        declare current_log_ptr	pointer;
        declare older_log_ptr		pointer;

        current_log_ptr = opt.old_log_ptrs (P_oldest_index);
        code = 0;
        do while ("1"b);
	      entryname =
		rtrim (opt.old_log.entryname) || ".-."
		|| current_log_ptr -> sys_log_file.lls;
	      call initiate_file_ (P_dir_name, entryname, R_ACCESS,
		older_log_ptr, (0), code);
	      if code ^= 0 then
		    return;
	      opt.n_old_logs = opt.n_old_logs + 1;
	      opt.old_log_ptrs (opt.n_old_logs) = older_log_ptr;
	      opt.old_log_names (opt.n_old_logs) = entryname;
	      current_log_ptr = older_log_ptr;
        end;
        end add_to_history;

write_one_log:
        procedure (P_log_ptr, P_log_name);

        declare P_log_ptr		pointer;
        declare log_ptr		pointer;
        declare 1 log		aligned like sys_log_file
				based (log_ptr);
        declare x			fixed bin;
        declare log_name		char (32);
        declare P_log_name		char (*) aligned;

        log_name = P_log_name;
        log_ptr = P_log_ptr;
        do x = 1 to log.count;
RETRY:
	      total_messages = total_messages + 1;
	      call log_write_$general (opt.log_write_ptr, (0),
		length (rtrim (log.array (x).line)), (0), "",
		log_message_ptr, code);
	      if code ^= 0 then
		    do;
		    call sub_err_ (code, COMMAND_NAME, ACTION_CAN_RESTART,
		        null (), (0),
		        "Failed to add message ^d from segment ^a (^p) to log ^a."
		        , x, log_name, log_ptr, opt.new_log.entryname);
		    go to RETRY;
		    end;
	      log_message.severity = log.array (x).svty;
	      log_message.time = log.array (x).time;
	      log_message.text =
		substr (log.array (x).line, 1, log_message.text_lth);
	      call log_segment_$finish_message (
		setwordno (log_message_ptr, 0), log_message_ptr, code);
	      if code ^= 0 then
		    call sub_err_ (code, COMMAND_NAME, ACTION_CANT_RESTART,
		        null (), (0),
		        "Failed to finish message ^d in new log that was obtained from old log ^a"
		        , log_message.sequence, log_name);
        end;
        end write_one_log;

fix_history_dir:
        procedure;

        call log_read_$open (opt.new_log.dir_name, opt.new_log.entryname,
	  opt.log_read_ptr, code);
        if code ^= 0 then
	      do;
	      call com_err_ (code, "convert_old_log",
		"No log named ^a found in ^a. If you create one, you must use the set_log_history_dir command to link it to the converted log."
		, opt.new_log.entryname, opt.new_log.dir_name);
	      return;
	      end;

        log_segment_ptr =
	  opt.log_read_ptr
	  -> log_read_data
	  .segments (opt.log_read_ptr -> log_read_data.very_first_log_idx)
	  .ptr;
        on no_write_permission go to NO_WRITE;
        log_segment.previous_log_dir = opt.new_log.history_dir;
        revert no_write_permission;
        call log_read_$close (opt.log_read_ptr, (0));
        return;
NO_WRITE:
        call com_err_ (0, "convert_old_log",
	  "You lack w access to the current log ^a, so the previous log dir was not set."
	  , opt.new_log.entryname);
        return;

        end fix_history_dir;


clean_up:
        procedure;

        call terminate_old_logs;
        if opt.log_write_ptr ^= null () then
	      call log_write_$close (opt.log_write_ptr, (0));
        if sci_ptr ^= null () then
	      call ssu_$destroy_invocation (sci_ptr);
        return;
        end clean_up;

SSU_ABORT:
        procedure;

        go to ABORT;
        end SSU_ABORT;

ABORT:
        call clean_up;
        return;

%include log_message;
%include log_segment;
%include log_read_data;
%include syslog;
        declare sys_log_ptr		pointer init (null ());
%include access_mode_values;
%include sub_err_flags;
%include terminate_file;
        end convert_old_log;
