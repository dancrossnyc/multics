/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */
/**** Created 1984-12-11 BIM from the old value command. */


convert_old_value_seg:
     procedure options (variable);

	dcl     entry		 char (32),
	        dir		 char (168),
	        segptr		 ptr,
	        vs_ptr		 pointer,
	        created		 bit (1) aligned,
	        set_first		 bit (1) aligned,
	        i			 fixed bin,
	        ap		 ptr,
	        al		 fixed bin (21),
	        bchr		 char (al) unal based (ap),
	        code		 fixed bin (35);

	dcl     (null, substr, addr, min)
				 builtin;

	dcl     com_err_		 entry options (variable);
	dcl     expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	dcl     expand_pathname_$add_suffix
				 entry (character (*), character (*), character (*), character (*),
				 fixed binary (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	dcl     initiate_file_$create	 entry (character (*), character (*), bit (*), pointer, bit (1) aligned,
				 fixed binary (24), fixed binary (35));
	dcl     pathname_		 entry (character (*), character (*)) returns (character (168));
	dcl     terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));
	dcl     requote_string_	 entry (character (*)) returns (character (*));
	dcl     value_$init_seg	 entry (pointer, fixed binary, pointer, fixed binary (19), fixed binary (35));
	dcl     value_$set		 entry () options (variable);
	dcl     ioa_		 entry options (variable);

	dcl     error_table_$not_seg_type
				 fixed bin (35) ext static;

	dcl     PERMANENT		 bit (36) aligned init ("20000000000"b3) int static options (constant);


	dcl     1 valueseg		 based (segptr) aligned,
		2 laste		 fixed bin,
		2 freep		 fixed bin,
		2 pad		 (6) fixed bin,
		2 arry		 (14506),
		  3 name		 char (32),
		  3 valu		 char (32),
		  3 lth		 fixed bin,
		  3 chain		 fixed bin;


	call cu_$arg_count (i, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg");
		return;
	     end;

	if i ^= 2
	then do;
		call com_err_ (0, "convert_old_value_seg", "Usage: convert_old_value_seg OLD_PATH NEW_PATH.value");
		return;
	     end;

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_ (bchr, dir, entry, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg", "old value seg ^a.", bchr);
		return;
	     end;

	call initiate_file_ (dir, entry, R_ACCESS, segptr, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg", "old value seg ^a.", bchr);
		return;
	     end;

	call cu_$arg_ptr (2, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "value", dir, entry, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg", "new value seg ^a.", bchr);
		return;
	     end;

	call initiate_file_$create (dir, entry, RW_ACCESS, vs_ptr, created, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg", "new value seg ^a.", bchr);
		return;
	     end;

	if created
	then call ioa_ ("convert_old_value_seg: Created ^a.", pathname_ (dir, entry));

	if created
	then call initialize_value_segment;

	set_first = "0"b;

RETRY_CONVERSION:					/* Here if the first set discovered an uninitialized value segment */
	do i = 1 to valueseg.laste;			/* laste is last in use */
	     if (valueseg.chain (i) = 0) & (valueseg.name (i) ^= "")
	     then do;
		     call value_$set (vs_ptr, PERMANENT, valueseg.name (i),
			substr (valueseg.valu (i), 1, valueseg.lth (i)), (""), code);
		     if code = error_table_$not_seg_type
		     then do;
			     if set_first
			     then do;
				     call com_err_ (code, "convert_old_value_seg",
					"The new value segment became invalid after a vaue was set in it.");
				     go to CLEANUP_RETURN;
				end;
			     set_first = "1"b;
			     call initialize_value_segment;
			     go to RETRY_CONVERSION;
			end;
		     if code ^= 0
		     then do;
			     call com_err_ (code, "convert_old_value_seg",
				"Error setting new value seg variable ^a to ^a.",
				requote_string_ ((valueseg.name (i))),
				requote_string_ (substr (valueseg.valu (i), 1, valueseg.lth (i))));
			     go to CLEANUP_RETURN;
			end;
		end;
	end;

CLEANUP_RETURN:
	call terminate_file_ (segptr, (0), TERM_FILE_TERM, (0));
	call terminate_file_ (vs_ptr, (0), TERM_FILE_TERM, (0));
	return;



initialize_value_segment:
     procedure;

	call value_$init_seg (vs_ptr, 0, null (), 0, code);
	if code ^= 0
	then do;
		call com_err_ (code, "convert_old_value_seg", "Unable to initialize ^a as a value segment.",
		     pathname_ (dir, entry));
		go to CLEANUP_RETURN;
	     end;
	return;
     end initialize_value_segment;

%include access_mode_values;
%include terminate_file;
     end convert_old_value_seg;
