/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-12-01,Parisek), approve(89-01-03,MCR8037),
     audit(89-01-16,Farley), install(89-01-19,MR12.3-1006):
     Ignore the error_table_$undefined_order_request error code when
     calling the control order "dump_fnp" in fnp_fetch.  If the order
     is undefined for a particular FNP then we simply don't need to
     display the data produced by the control order.
                                                   END HISTORY COMMENTS */


display_psp:
     proc;




/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* The display_psp command will provide a means to       */
/* assure that products ordered and installed at a site  */
/* is at the correct revison and installed in the	       */
/* proper location. This tool will provide a quick       */
/* means to find the status of a product as to	       */
/* revision, marketing identifier, copyright and title.  */
/* This tool will indicate the correct version of the    */
/* software running only if care is taken at the site    */
/* to update the STI of installed modified software.     */
/* For more information on how to update the STI see     */
/* the generate_copyright command.		       */
/*					       */
/* 0) Written by R. Holmstedt 07/18/81		       */
/* 1) Modified by G. Dixon 10/15/84 - handle missing     */
/*	        source properly.		       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  Ccode fixed bin (35);
dcl  MI_name char (9);
dcl  NL char (1) int static options (constant) init ("
");
dcl 01 Pnotice aligned,
    02 source_C char (1680) init (""),
    02 source_STI char (12) init (""),
    02 object_C char (1680) init (""),
    02 object_STI char (12) init (""),
    02 xecute_C char (1680) init (""),
    02 xecute_STI char (12) init ("");
dcl  QUOTE char (1) int static options (constant) init ("""");
dcl  Sptr ptr;
dcl  no_acc_sw init ("0"b) bit (1);
dcl  active_fnc_err_ entry options(variable);
dcl  af_flag init ("0"b) bit (1);
dcl  all_flag init ("0"b) bit (1);
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  argno fixed bin;
dcl  brief_flag init ("0"b) bit (1);
dcl  code fixed bin (35);
dcl  com_err_ entry () options (variable);
dcl  copyw_flag init ("0"b) bit (1);
dcl  crmod fixed bin int static;
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  datanet_infop ptr internal static;
dcl  ddata_sdw fixed bin (71);
dcl  dn355_datap ptr int static;
dcl  dn355_data_len fixed bin int static;
dcl  dsegp ptr;
dcl (error_table_$incorrect_access, error_table_$noentry,
     error_table_$no_dir, error_table_$improper_data_format,
     error_table_$no_component, error_table_$bad_arg,
     error_table_$inconsistent, error_table_$segknown,
     error_table_$moderr, error_table_$no_info,
     error_table_$noarg, error_table_$wrong_no_of_args,
     error_table_$undefined_order_request) fixed bin (35) ext static;
dcl 01 fnp_infos aligned,				/* Data structure to dump fnp */
    02 fnp_addr fixed bin,
    02 fnp_len fixed bin,
    02 data_ptr ptr,
    02 prev_data_ptr ptr;
dcl  fnp fixed bin;
dcl  fnp_name char (1);
dcl 01 fnptab aligned int static,
    02 per_fnp (0:8),
      03 init_switches,
        04 modtab_init bit (1) unal,
      03 nmodules fixed bin,
      03 per_module (50),
        04 name char (6),
        04 start fixed bin,
        04 date char (6),
        04 sti char (12);
dcl  generic_name char (32) varying;
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  i fixed bin;
dcl  ioa_ entry () options (variable);
dcl  long_flag init ("0"b) bit (1);
dcl  match_flag init ("0"b) bit (1);
dcl  name_flag init ("0"b) bit (1);
dcl  nargs fixed bin;
dcl  parse_pnotice_info_ entry (ptr, fixed bin (35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  phcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  phcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  print_prod fixed bin;
dcl  prog_name char (12) varying;
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ret char (retl) varying based (retp);
dcl  retl fixed bin(21);
dcl  retp pointer;
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin (17), fixed bin (35));
dcl  true init ("1"b) bit (1) internal static options (constant);
dcl  warn char (80) varying;
dcl  xlate (0: 63) char (1) int static options (constant) init (

     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "[", "#", "@", ":", ">", "?",

     " ", "A", "B", "C", "D", "E", "F", "G", "H", "I", "&", ".", "]", "(", "<", "^",

     "|", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "-", "$", "*", ")", ";", "'",

     "+", "/", "S", "T", "U", "V", "W", "X", "Y", "Z", "_", ",", "%", "=", """", "!");

dcl (addr, baseno, before, bin, convert, divide, hbound, index, length, 
     ltrim, min, null, size, substr, rank, rtrim, translate) builtin;


dcl (linkage_error, cleanup) condition;


/* ***********  S T A R T************* */

	Sptr = null;				/* prime pointers incase of error   */
	datanet_infop = null;
	dn355_datap = null;
	prog_name = "display_psp";
	on cleanup call janitor;

	call command_args ();
	call open_files ();
	call get_info ();
	call out_info ();
	goto fini;		/* exit			       */
	
/* \014 */
describe_psp: entry;
	

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*					       */
	/* this entry, describe_psp Marketing_Identifier Key     */
	/* operates as an active function so site and developers */
	/* can write tools based on a psp. Information will be   */
	/* returned based on a key passed in as an argument.     */
	/*					       */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	dcl  message_out char (80) varying;
	prog_name = "describe_psp";
	call cu_$af_return_arg (nargs, retp, retl, code);
				/* check to see if invoked as an active function*/
	if code = 0 then af_flag = true;
	else call cu_$arg_count (nargs);   /* its a command	       */
	

	if nargs ^= 2 then do;	/* 1st is a marketing identifier and 2nd is a key*/
	     code = error_table_$wrong_no_of_args;
	     warn = "Usage: describe_psp Marketing_Identifier Key.";
	     goto bummer;
	end;

	call open_files ();		/* get space to work in	       */
	call get_info ();		/* read the >t>psp_info_ file	       */

				/* get 1st argument		       */
	if af_flag then call cu_$af_arg_ptr (1, argp, argl, code);
	else call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
	     code = error_table_$wrong_no_of_args;
	     warn = "Error in parsing the first argument.";
	     goto bummer;
	end;
	arg = translate(arg, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz");
				/* upper, lower case don't matter    */

	do i = 1 to product.prod_number while (arg ^= product.num(i).MI);
	end;
	if i > product.prod_number then do;
	     warn = "Illegal or unknown marketing identifier used: "||arg||".";
	     code = error_table_$bad_arg;
	     goto bummer;
	end;

				/* get 2nd argument		       */
	if af_flag then call cu_$af_arg_ptr (2, argp, argl, code);
	else call cu_$arg_ptr (2, argp, argl, code);
	if code ^= 0 then do;
	     code = error_table_$noarg;
	     warn = "Error in parsing the second argument.";
	     goto bummer;
	end;

	
	if arg = "title" then  message_out = product.num(i).prod_title;
	else if arg = "name" then  message_out = product.num(i).prod_name;
	else if arg = "sti" then  message_out = product.num(i).prod_STI;
	else if arg = "source" then message_out = rtrim(product.num(i).source_path.dirname)||">"||product.num(i).source_path.entryname;
	else if arg = "object" then message_out = rtrim(product.num(i).object_path.dirname)||">"||product.num(i).object_path.entryname;
	else if arg = "executable" then message_out = rtrim(product.num(i).x_path.dirname)||">"||product.num(i).x_path.entryname;
	else do;
	     warn = "Illegal or unknown key used: "||arg||".";
	     code = error_table_$bad_arg;
	     goto bummer;
	end;
	
	if ^af_flag then call ioa_ ("^a", message_out);
	else ret = message_out;
	goto fini;
	

/* \014 */
command_args: proc ();


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure will define the arguments used for     */
/* the command to process. Some checking is done on      */
/* arguments passed in as to valid characters	       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



	     call cu_$arg_count (nargs);

	     if nargs = 0 then do;			/* no args is ok use defaults	       */
		all_flag = true;
		brief_flag = true;
		return;
	     end;


	     do argno = 1 to nargs;


		call cu_$arg_ptr (argno, argp, argl, code);
		if code ^= 0 then goto bad_arg;

		if substr (arg, 1, 1) = "-" then do;

		     if arg = "-name" | arg = "-nm" then do;
			if name_flag then goto dup_arg;
			name_flag = true;
			argno = argno + 1;
			call cu_$arg_ptr (argno, argp, argl, code);
			if code ^= 0 then goto bad_arg;
			if substr (arg, 1, 1) = "-" then goto bad_arg;
			generic_name = arg;		/* i.e. compose, ted       */
		     end;

		     else if arg = "-match" then do;
			if match_flag then go to dup_arg;
			match_flag = true;
			argno = argno + 1;
			call cu_$arg_ptr (argno, argp, argl, code);
			if code ^= 0 then goto bad_arg;
			if substr (arg, 1, 1) = "-" then goto bad_arg;
			if argl ^= 7 then do;
			     warn = "Using incorrect number of characters for Marketing Identifier "||arg||".";
			     goto bummer;
			end;
			MI_name = arg;
		     end;

		     else if arg = "-brief" | arg = "-bf" then do;
			if brief_flag then goto dup_arg;
			brief_flag = true;
		     end;

		     else if arg = "-long" | arg = "-lg" then do;
			if long_flag then goto dup_arg;
			long_flag = true;
		     end;

		     else if arg = "-copyright" then do;
			if copyw_flag then go to dup_arg;
			copyw_flag = true;
		     end;

		     else if arg = "-all" | arg = "-a" then do;
			if all_flag then goto dup_arg;
			all_flag = true;
		     end;
		     else goto bad_arg;
		end;
		else goto bad_arg;
	     end;
	     if brief_flag & long_flag then do;
		code = error_table_$inconsistent;
		warn = "-brief and -long cannot be used together.";
		goto bummer;
	     end;

	     if match_flag & all_flag then do;
		code = error_table_$inconsistent;
		warn = "-match and -all cannot be used together.";
		goto bummer;
	     end;

	     if name_flag & all_flag then do;
		code = error_table_$inconsistent;
		warn = "-name and -all cannot be used together.";
		goto bummer;
	     end;

	     if match_flag & name_flag then do;
		code = error_table_$inconsistent;
		warn = "-match and -name cannot be used together.";
		goto bummer;
	     end;


	     return;
	end command_args;
						/* \014 */
open_files: proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure gets the working storage needed for    */
/* the command to operate			       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



	     call get_temp_segment_ ((prog_name), Sptr, code);
	     if code ^= 0 then do;
		warn = " Error while getting temporary segment for Sptr.";
		goto bummer;
	     end;

	     SI_ptr = Sptr;				/* let the product structure point to the temp.seg */

	     call get_temp_segment_ ((prog_name), datanet_infop, code);
	     if code ^= 0 then do;
		warn = " Error while getting temporary segment.";
		goto bummer;
	     end;
	     return;
	end open_files;
						/* \014 */
get_info:	proc;



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure calls a rdc program that will read    */
/* the psp_info_ segment and return information	       */
/* contained in the ascii segment for use by the	       */
/* program, see software_pnotice_info_.incl.pl1 as to    */
/* the structure passed.			       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	     call parse_pnotice_info_ (SI_ptr, code);
	     if code ^= 0 then do;
		warn = "Error while reading psp_info_ file.";
		goto bummer;
	     end;

	     return;
	end get_info;

/* \014 */
find_lib_info:
	proc (dirname, entryname, prod_name);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure will probe into the library segments   */
/* and return information contained in them as to the    */
/* STI and protection notice.			       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */




dcl  P_ark_ptr ptr;
dcl  P_ark_bc fixed bin (24);
dcl  P_comp_seg char (P_comp_length) based (P_comp_ptr);
dcl  P_comp_length fixed bin;
dcl  P_comp_ptr ptr;
dcl  P_comp_bc fixed bin (24);
dcl  Tpointer fixed bin;
dcl  archive_$get_component entry (ptr, fixed bin (24), char (*), ptr,
     fixed bin (24), fixed bin (35));
dcl  cl fixed bin;
dcl  dirname char (168);
dcl  entryname char (32);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24),
     fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  i fixed bin;
dcl  num_of_pnotice fixed bin;
dcl  prod_name char (24);
dcl  whitesp char (4) int static options (constant) init (" 	

");
dcl  xx fixed bin;

	     if length (ltrim (rtrim (entryname))) > 7 then do;
						/* do only if not an FNP module name */
		call hcs_$initiate_count (dirname, entryname, "", P_ark_bc, 1, P_ark_ptr, code);
		if code ^= 0 then do;
		     if code ^= error_table_$segknown then do;
						/* ok if we already know	       */
			call hcs_$terminate_noname (P_ark_ptr, Ccode);
			return;			/* let the caller know it don't exist */
		     end;
		     code = 0;			/* seg known is ok		       */
		end;
	     end;


	     if index (entryname, ".s.archive") ^= 0 then do;
						/* this is the routine to get the source info */

		call archive_$get_component
		     (P_ark_ptr, P_ark_bc, "PNOTICE_"||rtrim (prod_name)||".alm", P_comp_ptr, P_comp_bc, code);
						/* get a pointer to the notice component */
		if code ^= 0 then return;

		Pnotice.source_C = "";   /* init the copyright	       */

		P_comp_length = divide (P_comp_bc, 9, 17, 0);
						/* get the length to the pnotice seg */


		Tpointer = index (P_comp_seg, "dec");
						/* points to the version line	       */

		Tpointer = Tpointer + 3 + index ((substr (P_comp_seg, (Tpointer + 3))), "dec");
						/* points to the no. of pnotices     */
		num_of_pnotice = convert (num_of_pnotice, (ltrim (rtrim (before ((
		     substr (P_comp_seg, (Tpointer + 3))), QUOTE), whitesp), whitesp)));
						/* save it away for later	       */



/* next comes the words in the copyright */
		do i = 1 to num_of_pnotice;
		     Tpointer = Tpointer + 3 + index ((substr (P_comp_seg, Tpointer)), "acc");
		     Tpointer = Tpointer + index ((substr (P_comp_seg, Tpointer)), QUOTE);
						/* Tpointer points to the start of the notice */
		     Pnotice.source_C = rtrim (Pnotice.source_C) || substr
			(P_comp_seg, Tpointer, (index ((substr (P_comp_seg, Tpointer)), QUOTE) - 1))
			|| NL;
						/* stuff the words away for printing */
		     Tpointer = Tpointer + index ((substr (P_comp_seg, Tpointer)), QUOTE);
						/* move pointer to end of copyright  */


		end;

/* this is the source STI	       */
		Tpointer = Tpointer + 3 + index ((substr (P_comp_seg, (Tpointer + 3))), "aci");
						/* now suck off the STI	       */
		source_STI = substr ((ltrim (substr (P_comp_seg, (Tpointer + 3)), whitesp)), 2, 12);
						/* always 12 chars		       */
	     end;


	     else if index (entryname, ".archive") ^= 0 then do;
						/* this is the routine to get the object info */

		call archive_$get_component
		     (P_ark_ptr, P_ark_bc, "PNOTICE_"||rtrim (prod_name), P_comp_ptr, P_comp_bc, code);
						/* get a pointer to the notice component */
		if code ^= 0 then return;

		Pnotice.object_C = ""; /* init the area	       */
		

		P_pnotice_sti = P_comp_ptr;
						/* make the PNOTICE_ segment look like the include file */

		Pnotice.object_STI = pnotice_sti.STI (2);

		Tpointer = 1;

		do i = 1 to pnotice_sti.Npnotice;

		     cl = rank (substr (pnotice_sti.pnotice, Tpointer, 1));
		     Pnotice.object_C = 
			rtrim (Pnotice.object_C) || substr (pnotice_sti.pnotice, (Tpointer + 1), cl) || NL;
		     Tpointer = Tpointer + 1 + cl;
		end;
	     end;

	     else do;				/* do executable segments then       */
						/* this is an executable segment     */

		if index (entryname, "bound_") ^= 0 then do;


		     P_pnotice_sti = P_ark_ptr;
						/* make the PNOTICE_ segment look like the include file */
		     Tpointer = 1;
		     if pnotice_sti.Vpnotice_sti_1 ^= 1 then do;
						/* validate that segment has a copyright that can be probed */
			code = error_table_$improper_data_format;
			return;
		     end;
		     if pnotice_sti.Nsti ^= 3 then do;
						/* if not 3 better get out	       */
			code = error_table_$improper_data_format;
			return;
		     end;

		     Pnotice.xecute_C = "";	/* initialize the field    */

		     do i = 1 to pnotice_sti.Npnotice;
			cl = rank (substr (pnotice_sti.pnotice, Tpointer, 1));
			Pnotice.xecute_C = 
			     rtrim (Pnotice.xecute_C) || substr (pnotice_sti.pnotice, (Tpointer + 1), cl) || NL;
			Tpointer = Tpointer + 1 + cl;
		     end;

		     Pnotice.xecute_STI = pnotice_sti.STI (3);
		end;


/* this is a FNP module then	       */

		else if length (ltrim (rtrim (entryname))) <= 6 then do;

						/* need access to the phcs_	       */
		     call ring0_get_$segptr ("", "dseg", dsegp, code);
		     if code ^= 0 then do;
			warn = "Error getting pointer to dseg.";
			goto bummer;
		     end;

		     call get_sdw ("dn355_data", dn355_datap, addr (ddata_sdw));
		     if no_acc_sw =  true then return;


		     sdwp = addr (ddata_sdw);
		     dn355_data_len = (bin (sdw.bound, 14) + 1) * 16;


		     infop = datanet_infop;
		     call ring_zero_peek_ (dn355_datap, infop, dn355_data_len, code);
		     if code ^= 0 then do;
			warn = "Error getting information from dn355_data (ring 0).";
			goto bummer;
		     end;


		     do fnp = 1 to max_no_355s;	/* need to see how many FNPs */
			fnpp = addr (datanet_info.per_datanet (fnp));
			if fnp_info.running then do;
			     fnp_name = rtrim(get_fnp_name_ (fnp));

			     call setup_module_table (code);
			     if code ^= 0 then do;
				if code = error_table_$moderr then no_acc_sw = true;
				return;
			     end;

			     do xx = 1 to fnptab.per_fnp (fnp).nmodules
				while (entryname ^= fnptab.per_fnp (fnp).per_module (xx).name);
			     end;
						/* find the module we need;	       */
			     if xx <= fnptab.per_fnp (fnp).nmodules then

				call ioa_ ("FNP ^a: Module ^a STI ^a", fnp_name,
				fnptab.per_fnp (fnp).per_module (xx).name,
				fnptab.per_fnp (fnp).per_module (xx).sti);
			end;
		     end;
		     code = -1;			/* avoid the print_it proc from printing */

		end;
	     end;


	     return;
	end find_lib_info;

						/* \014 */

/* Procedure to setup internal static fnp table */

setup_module_table: proc (code);

dcl (i, j) fixed bin;
dcl  chainloc fixed bin;
dcl  mod_name char (8);
dcl  mod_sti char (12);
dcl 01 chain aligned,				/* Entry in module chain */
    02 next bit (18) unal,
    02 name (6) bit (6) unal,
    02 start bit (18) unal,
    02 date (6) bit (6) unal,
    02 sti (12) bit (6) unal;
dcl  code fixed bin (35);

	     if fnptab.modtab_init (fnp) then return;	/* Table all setup */

/* need to get start of module chain */
	     symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);

	     do i = 1 to symbol_table.cnt;
		symp = addr (symbol_table.entry (i));
		if ".crmod" = sym.name then do;
		     crmod = sym.value;		/* got the starting point	       */
		end;
	     end;


	     call fnp_fetch (crmod, 1, addr (chain.next), code);
						/* Get module chain start */
	     if code ^= 0 then do;
		if code = error_table_$moderr then
		     call ioa_ ("No access to phcs_ gate; unable to read FNP memory.");
		return;
	     end;

	     chainloc = bin (chain.next);		/* First chain is here */


	     i = 0;

	     do while ((chainloc ^= 0) & (i < hbound (fnptab.per_module, 2)));
		call fnp_fetch (chainloc, 10, addr (chain), code);

		i = i+1;
		fnptab.start (fnp, i) = bin (chain.start);

		mod_name = "";
		do j = 1 to 6;			/* Convert name */
		     substr (mod_name, j, 1) = xlate (bin (chain.name (j)));
		end;
		fnptab.name (fnp, i) = translate (rtrim(mod_name), "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

		do j = 1 to 6;			/* Convert date */
		     substr (fnptab.date (fnp, i), j, 1) = xlate (bin (chain.date (j)));
		end;
		chainloc = bin (chain.next);		/* Next pointer */

		mod_sti = "";
		do j = 1 to 12;			/* Convert name */
		     substr (mod_sti, j, 1) = xlate (bin (chain.sti (j)));
		end;
		fnptab.sti (fnp, i) = mod_sti;
	     end;


	     fnptab.nmodules (fnp) = i;
	     fnptab.modtab_init (fnp) = "1"b;
	     return;


	end setup_module_table;

/* \014 */

fnp_fetch: proc (fnp_addr, arg_fnp_len, arg_data_ptr, code);

dcl  fnp_mem (fnp_len) bit (18) unal based;
dcl  fnp_addr fixed bin (17);
dcl  arg_fnp_len fixed bin (17);
dcl  arg_data_ptr ptr;
dcl  fnp_len fixed bin;
dcl  call_type fixed bin;
dcl  code fixed bin (35);
dcl  state fixed bin;

	     fnp_len = arg_fnp_len;
	     call_type = 0;
	     fnp_infos.fnp_len = arg_fnp_len;
	     fnp_infos.data_ptr = arg_data_ptr;
	     fnp_infos.fnp_addr = fnp_addr;
	     fnp_infos.prev_data_ptr = null;

	     do while (fnp_len > 0);
		fnp_infos.fnp_len = min (fnp_len, 64);
		if call_type = 0 then do;
		     on linkage_error go to call_1_failed;
		     call phcs_$tty_order (fnp, "dump_fnp", addr (fnp_infos), state, code);
		     revert linkage_error;		/* It worked */
		     call_type = 1;
		     go to check_fetch_code;
call_1_failed:	     on linkage_error go to call_2_failed;
		     call phcs_$tty_control (fnp_name, "dump_fnp", addr (fnp_infos), code);
		     revert linkage_error;
		     call_type = 2;
		     go to check_fetch_code;
call_2_failed:	     revert linkage_error;
		     code = error_table_$moderr;
		     return;
		end;
		else if call_type = 1 then call phcs_$tty_order (fnp, "dump_fnp", addr (fnp_infos), state, code);
		else call phcs_$tty_control (fnp_name, "dump_fnp", addr (fnp_infos), code);

check_fetch_code:
		if code = error_table_$undefined_order_request then do;
		     code = 0;			/* dump_fnp order was not defined for the FNP in question */
		     return;			/* don't worry about it.  Nothing will get printed */
		end;
		if code ^= 0 then return;

		fnp_infos.fnp_addr = fnp_infos.fnp_addr + fnp_infos.fnp_len;
						/* Check next address */
		fnp_infos.data_ptr = addr (fnp_infos.data_ptr -> fnp_mem (fnp_infos.fnp_len + 1));
		fnp_len = fnp_len - fnp_infos.fnp_len;
	     end;

	end fnp_fetch;


/* \014 */
get_sdw:
	proc (seg_name, ring_zero_ptr, sdw_ptr);

dcl  seg_name char (*);
dcl  ring_zero_ptr ptr;
dcl  sdw_ptr ptr;


	     call ring0_get_$segptr ("", seg_name, ring_zero_ptr, code);
						/* get pointer to ring 0 seg */
	     if code ^= 0 then do;
		warn = "Error trying to read sdw for dn355_data.";
		no_acc_sw = true;
		return;
	     end;
	     call ring_zero_peek_ (addr (dsegp -> sdwa (bin (baseno (ring_zero_ptr), 18))), sdw_ptr, size (sdw), code);
	     if code ^= 0 then do;
		warn = "Error trying to read sdw for dn355_data.";
		no_acc_sw = true;
		return;
	     end;
	     return;
	end get_sdw;


						/* \014 */
out_info:	proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure will select the information for	       */
/* output to the user. The arguments -all, -match and    */
/* -name will be acted on and the information will be    */
/* passed to print_it for final formatting by the other  */
/* arguments that can be used.		       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
dcl (ii, j) fixed bin;


	     if ^long_flag then brief_flag = true;	/* need one but not both   */

	     if match_flag then do;			/* only want one product	       */
		do i = 1 to product.prod_number while (MI_name ^= product.num (i).MI);
		end;
		print_prod = i;


		if i > product.prod_number then do;	/* oops!	       */
		     warn = "Illegal or unknown marketing identifier used "|| MI_name||".";
		     code = error_table_$bad_arg;
		     goto bummer;
		end;

/* this product is made up of other products, so use them instead */

		if product.num (i).prod_use (1) ^= "" then do;
		     do j = 1 to 10 while (product.num (i).prod_use (j) ^= "");

			do ii = 1 to product.prod_number while (product.num (i).prod_use (j) ^= product.num (ii).MI);
			end;

			if ii > product.prod_number then do; /* oops!	       */
			     warn = "Illegal or unknown marketing identifier from psp_info_ used "|| MI_name||".";
			     code = error_table_$bad_arg;
			     goto bummer;
			end;
			print_prod = ii;
			call print_it;
		     end;
		end;

		else				/* the product is defined use it     */
		call print_it;
	     end;

	     else if name_flag then do;		/* only want one product	       */

		do i = 1 to product.prod_number while (generic_name ^= product.num (i).prod_name);
		end;

		if i > product.prod_number then do;	/* oops!	       */
		     warn = "Illegal or unknown name used "|| generic_name||".";
		     code = error_table_$bad_arg;
		     goto bummer;
		end;

		print_prod = i;

/* this product is made up of other products, so use them instead */

		if product.num (i).prod_use (1) ^= "" then do;
						/* if many products make up this product */
		     do j = 1 to 10 while (product.num (i).prod_use (j) ^= "");

			do ii = 1 to product.prod_number while (product.num (i).prod_use (j) ^= product.num (ii).MI);
			end;			/* check if real product in psp_info_ */


			if ii > product.prod_number then do; /* oops!	       */
			     warn = "Illegal or unknown marketing identifier from psp_info_ used "|| MI_name||".";
			     code = error_table_$bad_arg;
			     goto bummer;
			end;
			print_prod = ii;
			call print_it;
		     end;
		end;

		else				/* use this product no other	       */
		call print_it;
	     end;

	     else					/* all is the default	       */

	     do i = 1 to product.prod_number;


		print_prod = i;			/* bump the count of the product     */


/* just be sure this is a real product, not made up of other products */
		if product.num (i).prod_use (1) = "" then call print_it;

	     end;

	     return;

	end out_info;
						/* \014 */

print_it:	proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*					       */
/* This procedure will output the information in a       */
/* format asked for by the user. The options are -long,  */
/* -brief or -copyright.			       */
/*					       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



	     if long_flag then do;			/* print all info		       */


		call ioa_ ("^/^a.", rtrim (product.num (print_prod).prod_title));
		call ioa_ ("Marketing identifier           ^a.", product.num (print_prod).MI);

		call validate_macro			/* now get source info	       */
		     ((product.num (print_prod).source_path.dirname),
		     (product.num (print_prod).source_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then do;
		     call ioa_ ("STI                            ^a.", Pnotice.source_STI);
		     call ioa_ ("Protection notice from         ^a. ^/^a",
			product.num (print_prod).source_path.entryname,
			ltrim (rtrim (rtrim (Pnotice.source_C), QUOTE), QUOTE));
		end;

/* output object info long format    */

		call validate_macro			/* now get object info	       */
		     ((product.num (print_prod).object_path.dirname),
		     (product.num (print_prod).object_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then do;		/* can't complain if not found       */

		     call ioa_ ("STI                            ^a.", Pnotice.object_STI);
		     call ioa_ ("Protection Notice from         ^a ^/^a",
			product.num (print_prod).object_path.entryname, Pnotice.object_C);
		end;


		call validate_macro			/* now get executable info	       */
		     ((product.num (print_prod).x_path.dirname),
		     (product.num (print_prod).x_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then do;
		     call ioa_ ("STI                            ^a.", Pnotice.xecute_STI);
		     call ioa_ ("Protection Notice from         ^a ^/^a",
			product.num (print_prod).x_path.entryname, Pnotice.xecute_C);

		end;
	     end;

	     else if copyw_flag then do;		/* print the copyright     */

		call validate_macro
		     ((product.num (print_prod).source_path.dirname),
		     (product.num (print_prod).source_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then do;

		     call ioa_ ("Protection notice from            ^a ^/^a",
			product.num (print_prod).source_path.entryname, rtrim (Pnotice.source_C));
		end;


		call validate_macro			/* now do the object info	       */
		     ((product.num (print_prod).object_path.dirname),
		     (product.num (print_prod).object_path.entryname),
		     (product.num (print_prod).prod_name));
		if code = 0 then do;

		     call ioa_ ("Protection notice from            ^a ^/^a",
			product.num (print_prod).object_path.entryname, rtrim (Pnotice.object_C));
		end;

		call validate_macro			/* now do the executable info	       */
		     ((product.num (print_prod).x_path.dirname),
		     (product.num (print_prod).x_path.entryname),
		     (product.num (print_prod).prod_name));
		if code = 0 then do;

		     call ioa_ ("Protection notice from            ^a ^/^a",
			product.num (print_prod).x_path.entryname, rtrim (Pnotice.xecute_C));

		end;
	     end;

	     else if brief_flag then do;		/* print only the STI	       */
		call ioa_ ("^/^a.", rtrim (product.num (print_prod).prod_title));
		call validate_macro
		     ((product.num (print_prod).source_path.dirname),
		     (product.num (print_prod).source_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then
		     call ioa_ ("^a", Pnotice.source_STI);



/* now do for the object	       */
		call validate_macro
		     ((product.num (print_prod).object_path.dirname),
		     (product.num (print_prod).object_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then call ioa_ ("^a", Pnotice.object_STI);


/* now do for the executable segment */
		call validate_macro
		     ((product.num (print_prod).x_path.dirname),
		     (product.num (print_prod).x_path.entryname),
		     (product.num (print_prod).prod_name));

		if code = 0 then call ioa_ ("^a", Pnotice.xecute_STI);

	     end;

	     return;
	end print_it;
						/*  \014 */

validate_macro:
	procedure (dirname, entryname, prod_name);

dcl  dirname char (168);
dcl  entryname char (32);
dcl  prod_name char (24);

	     if dirname = "" & entryname = "" then do;
	          code = -1;
		return;
	     end;

	     call find_lib_info (dirname, entryname, prod_name);


	     if code ^= 0 then do;

		if code = error_table_$noentry then do;
		     call com_err_ (code, prog_name, "^/^a not found.",
		        pathname_ (dirname, entryname));
		     code = -1;
		     return;
		end;

		if code = error_table_$improper_data_format then do;
		     call com_err_ (code, prog_name,
			"^/Could not get pnotice information from ^a.",
			pathname_ (dirname, entryname));
		     code = -1;
		     return;
		end;

		if code = error_table_$no_info then do;
			call com_err_ (code, prog_name, "^/You do not have access to read information from the datanet.");
			code = -1;
			return;
		end;

		if code = error_table_$no_dir then do;
		     call com_err_ (code, prog_name, "^/The path ^a not found installed.", dirname);
		     code = -1;
		     return;
		end;

		else if code = error_table_$moderr then do;
		     call com_err_ (code, prog_name, "^/The entry ^a", entryname);
		     code = -1;
		     return;
		end;
		else if code = error_table_$incorrect_access then do;
		     call com_err_ (code, prog_name, "^/The entry ^a", entryname);
		     code = -1;
		     return;
		end;

		else if code = error_table_$no_component then do;
		     call com_err_ (code, prog_name, "^/archive ^a",
		        pathname_ (dirname, entryname));
		     code = -1;
		     return;
		end;

		else if code = -1 then return;	/* this is an fnp module   */

		warn = "Error while finding library information for "
		     ||rtrim (product.num (print_prod).object_path.entryname)||".";

		goto bummer;

	     end;
	end validate_macro;


/* \014 */
janitor:	proc;

dcl  Ccode fixed bin (35);


	     if Sptr ^= null then
		call release_temp_segment_ ((prog_name), Sptr, Ccode);
						/* release temp segment used for product structure */

	     if datanet_infop ^= null then
		call release_temp_segment_ ((prog_name), datanet_infop, Ccode);
						/* release temp segment used for FNP info	       */


	end janitor;

bad_arg:

	code = error_table_$bad_arg;
	warn = arg;
	goto bummer;


dup_arg:
	code = error_table_$inconsistent;
	warn = arg || " appears twice on the command line.";
	goto bummer;


bummer:
	if af_flag then call active_fnc_err_ (code, prog_name, "^/^a", warn);
	else call com_err_ (code, prog_name, "^/^a", warn);
	call janitor;
	return;

fini:
	call janitor;
	return;

%include software_pnotice_info_;
%include pnotice;
%include dn355_data;
%include sdw;
%include debug_fnp_data;

     end display_psp;
