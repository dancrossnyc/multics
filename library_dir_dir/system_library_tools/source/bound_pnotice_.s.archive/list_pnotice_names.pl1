/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-10,LJAdams), approve(86-02-10,MCR7150),
     audit(86-02-10,Wallman), install(86-02-13,MR12.0-1017):
     Recompiled to use modified include file pnotice_paths.incl.pl1
                                                   END HISTORY COMMENTS */


list_pnotice_names:
	
	proc;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name:	        list_pnotice_names						*/
	/*									*/
	/* Function:								*/
	/*      A simple command wherein a user of the protection software can obtain a list of	*/
	/* the available protection notice templates.					*/
	/*									*/
	/* STATUS:								*/
	/*									*/
	/* CREATED       June 1981 by JM Stansbury					*/
	/* MODIFIED      July 17,1981 by JM Stansbury					*/
	/*	       added clean up handler, changed name from print_pnotice_names to its	*/
	/*               current name per MCR Board.					*/
	/* MODIFIED      December 1981 by JM Stansbury					*/
	/*	       implemented the -check and -all control args. These are used as follows: */
	/*	    -check							*/
	/*	       will cause a list of every template in the search list to be output	*/
	/*               and there will be heuristic checks on the contents of each template.	*/
	/*               Error messages will be output.					*/
	/*	    -all								*/
          /*               will list every template in the search list.	Duplicates will be  */
	/*	       flagged with an asterisk (*), and a short explanatory note will follow	*/
	/*									*/
	/*									*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
%page;
	
/* A U T O M A T I C */
dcl Iarg		          fixed bin,
    Idir		          fixed bin,		/* index for which search dir we are in */
    Idx		          fixed bin,
    Idx2		          fixed bin,
    Larg		          fixed bin (21),
    Nargs		          fixed bin,
    Nprocessed	          fixed bin,
    Parg		          ptr,
    code		          fixed bin (35),
    explain_dups	          bit (1),			/* used to control output of short note */
    v_ptr 	          ptr,			/* for sort */
    i_ptr 	          ptr;			/* for sort */
dcl 1 flags,					/* structure for passing control info to */
						/* the pnotice_paths_ routine */
      2 check_bit	          bit (1) unal,
      2 all_bit		bit (1) unal;


/* E X T E R N A L  E N T R I E S */
dcl com_err_		entry() options(variable),
    cu_$arg_count		entry (fixed bin, fixed bin(35)),
    cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
    ioa_			entry() options(variable),
    pnotice_paths_		entry (char(*), bit(*), ptr, fixed bin(35)),
    release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
    sort_items_indirect_$char	entry (ptr, ptr, fixed bin(24)),
    terminate_file_		entry (ptr, fixed bin(24), bit(*), fixed bin(35));


/* B U I L T I N */
dcl (addr,
     addrel,
     before,
     bin,
     currentsize,
     dim,
     null,
     string)	          builtin;


/* E X T E R N A L   S T A T I C */
dcl error_table_$badopt	fixed bin(35) ext static,
    error_table_$noentry	fixed bin(35) ext static,
    error_table_$wrong_no_of_args
		          fixed bin(35) ext static;
	

/* I N T E R N A L   S T A T I C */
dcl ME		          char (19) int static options(constant) init ("list_pnotice_names"),
    True		          bit(1) int static options (constant) init ("1"b);


/* C O N D I T I O N S */
dcl cleanup	          condition;

/* B A S E D */
dcl argument	          char(Larg) based (Parg);

dcl 1 V		          aligned based (v_ptr),
      2 N		          fixed bin (24),
      2 vector	          (0 refer (V.N)) ptr unaligned;

dcl 1 I		          aligned based (i_ptr),
      2 N		          fixed bin (24),
      2 index		(0 refer (I.N)) fixed bin (24);

%page;
	Ppaths = null;
	explain_dups = "0"b;
	flags = "0"b;
	v_ptr = null;
	i_ptr = null;
	on cleanup call clean_up;
	call cu_$arg_count (Nargs, code);
	if Nargs > 2 then do;
	     code = error_table_$wrong_no_of_args;
	     Parg = addr(Parg);
	     Larg = 0;
	     goto USAGE;
	     end;
	else if code ^= 0 then do;
               Parg = addr(Parg);
	     Larg = 0;
	     goto USAGE;
	     end;
	else do Iarg = 1 to Nargs;
	     call cu_$arg_ptr (Iarg, Parg, Larg, code);
	     if (argument = "-check" | argument = "-ck") then do;
		flags.all_bit = True;
		flags.check_bit = True;
		end;
	     else if (argument = "-all" | argument = "-a") then
		flags.all_bit = True;
	     else do;
		code = error_table_$badopt;
		go to USAGE;
		end;
	     end;

	call ioa_ ("");
	call pnotice_paths_ (ME, string(flags), Ppaths, code);
	if code ^= 0 then do;			/* pnotice_paths_ will complain for us. */
	     call clean_up;
	     return;
	     end;
	if pnotice_paths.Ntemplates = 0 then do;	/* something is really wrong. */
	     call com_err_ (error_table_$noentry, ME, "
Fatal Error - No templates found using the pnotice search list.");
	     call clean_up;
	     return;
	     end;
	Nprocessed = 0;				/* no templates sorted yet. */
	i_ptr = addrel (Ppaths, currentsize(pnotice_paths));

	do Idir = 1 to pnotice_paths.Ndirs;
	     if pnotice_paths.dirs(Idir).Ifirst_template > pnotice_paths.dirs(Idir).Ilast_template then do;
		call ioa_ ("No templates in ^a.^/", pnotice_paths.dirs(Idir).dir_path);
		goto NEXT_DIR;
		end;
	     I.N = pnotice_paths.dirs(Idir).Ilast_template - pnotice_paths.dirs(Idir).Ifirst_template + 1;
	     do Idx = 1 to I.N;
		I.index(Idx) = Idx;
		end;
	     v_ptr = addrel (i_ptr, currentsize(I));
	     V.N = I.N;
	     Idx2 = 0;
	     do Idx = pnotice_paths.dirs(Idir).Ifirst_template to pnotice_paths.dirs(Idir).Ilast_template;
		Idx2 = Idx2 + 1;
		V.vector(Idx2) = addr(pnotice_paths.templates(Idx).primary_name);
		end;
	     call sort_items_indirect_$char (v_ptr, i_ptr, 32);
	     call ioa_ ("Templates in ^a", pnotice_paths.dirs(Idir).dir_path);
	     do Idx = 1 to I.N;
		if pnotice_paths.templates(I.index(Idx)+Nprocessed).duplicate
		   & flags.all_bit then
						/* if ALL and we found dups, a short note is needed. */
		     explain_dups = True;
		call ioa_ ("^[*^]^3t^a^[ (default Trade Secret) ^; (default Copyright)^]^[^/^]",
		     pnotice_paths.templates(I.index(Idx)+Nprocessed).duplicate ^= "0"b,
		     before(pnotice_paths.templates(I.index(Idx)+ Nprocessed).primary_name, ".pnotice"),
		     bin(pnotice_paths.templates(I.index(Idx)+ Nprocessed).defaultC
		     || pnotice_paths.templates(I.index(Idx)+ Nprocessed).defaultTS),
		     Idx = I.N);
		end;
	     Nprocessed = Nprocessed + I.N;		/* keep count of how many we have done */
NEXT_DIR:	     end;
	if explain_dups then
	     call ioa_ ("
The asterisk (*) denotes duplicate templates which will
be ignored given present search path order.");
	call clean_up;
	return;

USAGE:	call com_err_ (code, ME, "^a
Usage: list_pnotice_names {-control_arg(s)}
Control Arg: -check, -ck
             -all, -a", argument);
	return;


clean_up: proc;
	if Ppaths ^= null then do;
	     do Idx = 1 to dim(pnotice_paths.templates, 1);
		call terminate_file_ (pnotice_paths.templates(Idx).Ptemplate,
		   pnotice_paths.templates(Idx).Ltemplate * 9, TERM_FILE_TERM, code);
		end;
	     call release_temp_segment_ (ME, Ppaths, code);
	     end;
	end clean_up;

%page;
%include pnotice_paths;
%page;
%include terminate_file;

	end list_pnotice_names;
