/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-03,LJAdams), approve(85-11-06,MCR7278),
     audit(86-02-19,Gilcrease), install(86-02-19,MR12.0-1021):
     Program to process the pathnames(archive or
     non-archive) passed from the history comment program.
  2) change(85-11-13,LJAdams), approve(85-11-13,MCR7278),
     audit(86-02-19,Gilcrease), install(86-02-19,MR12.0-1021):
     In "process_star_name" added check to not process directories only
     segments.
  3) change(86-08-27,LJAdams), approve(86-08-27,MCR7526),
     audit(86-11-05,GDixon), install(86-11-12,MR12.0-1213):
     In process_archive_comp routine changed arch_janitor so that d.seg.Pseg is
     always reset to Pseg so that if an error occurred archive_$next_component
     will have the proper component ptr as input.
  4) change(87-03-17,LJAdams), approve(87-04-22,MCR7653),
     audit(87-04-02,Gilcrease), install(87-04-26,MR12.1-1026):
     Fixed problem with no error message being displayed if a nonexistant
     component was asked for in an archive.  (phx20689)
                                                   END HISTORY COMMENTS */

hcom_process_path_:
     proc (Pd);

/*  B U I L T I N  */
	dcl     (addr, before, divide, null, reverse, sum)
				 builtin;


/*  C O N D I T I O N S  */
	dcl     cleanup		 condition;


/*  E X T E R N A L   E N T R I E S  */
	dcl     access_$reset	 entry (ptr, fixed bin (35)),
	        access_$set_temporarily entry (char (*), char (*), fixed bin (2), bit (*), ptr, fixed bin (35)),
	        archive		 entry options (variable),
	        archive_$next_component entry (ptr, fixed bin (24), ptr, fixed bin (24), char (*), fixed bin (35)),
	        check_star_name_$entry entry (char (*), fixed bin (35)),
	        expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	        get_equal_name_$component entry (char (*), char (*), char (*), char (*), char (32), char (32),
				 fixed bin (35)),
	        get_pdir_		 entry () returns (char (168)),
	        get_system_free_area_	 entry () returns (ptr),
	        hcom_process_seg_	 entry (ptr, label),
	        hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				 fixed bin (35)),
	        hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
	        initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35)),
	        initiate_file_$component entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24),
				 fixed bin (35)),
	        initiate_file_$create	 entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
				 fixed bin (35)),
	        match_star_name_	 entry (char (*), char (*), fixed bin (35)),
	        pathname_		 entry (char (*), char (*)) returns (char (168)),
	        pathname_$component	 entry (char (*), char (*), char (*)) returns (char (194)),
	        terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));


/*  N A M E D    C O N S T A N T S */
	dcl     BITS_PER_CHAR	 fixed bin int static options (constant) init (9);
          dcl     FALSE                  bit (1) int static options (constant) init ("0"b);
          dcl     TRUE		 bit (1) int static options (constant) init ("1"b);
     

/*  E X T E R N A L   S T A T I C  */
	dcl     (error_table_$bad_arg,
	        error_table_$badstar,
	        error_table_$no_component,
	        error_table_$no_w_permission,
	        error_table_$zero_length_seg)
				 fixed bin (35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Name: hcom_process_path_							*/
/*									*/
/* Overall module structure:							*/
/*									*/
/*                           hcom_process_path_					*/
/*		                 |						*/
/*          	       call process_star_name();				*/
/*		                 |						*/
/*		       call process_seg_by_case();				*/
/*			       |						*/
/* 		SELECTED SEG ENTRYNAME AND COMPONENT NAME			*/
/* 	     NONARCHIVE	ONE ARCHIVE COMP	 STAR ARCHIVE COMP			*/
/*	     =====================================================			*/
/*	           |                |                  |				*/
/*	           |	  call process_archive_comp();			*/
/*	           |	        |						*/
/*	         call process_one_seg();					*/
/*									*/
/* The modules are shown in the code below in the order shown above.			*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* hcom_process_path_:							*/
/*									*/
/* This is the starting point in processing pathnames (both source and -original paths).	*/
/* This initial section of code is responsible for expanding the source and original	*/
/* paths into absolute, archive pathnames.  The code then calls process_star_name, for	*/
/* both star and nonstar entrynames.						*/
/*									*/
/* The input paths are in d.source and d.orig structures, and the expanded dir/ent/comp	*/
/* are placed in those structures as well.					*/
/* If errors have occurred the label ERROR_RETURN_LABEL is being used to activate the	*/
/*    cleanup handlers invoked by those programs that are being wiped off the stack by the*/
/*    unwinder as it does a non-local "goto" to the label specified by the calling program*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	dcl     code		 fixed bin (35);

	call expand_pathname_$component (d.source.path, d.source.dir, d.source.ent, d.source.comp, code);
	call d.check_error$fatal (code, CALLER, "^/^a", d.source.path);

	if d.orig.path ^= "" then do;
		call expand_pathname_$component (d.orig.path, d.orig.dir, d.orig.ent, d.orig.comp, code);
		call d.check_error$fatal (code, CALLER, "^/-orig ^a", d.orig.path);
	     end;

	call process_star_name ();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* process_star_name:							*/
/*									*/
/* This procedure examines the source entryname to determine if it is a starname.  For a	*/
/* nonstar entryname, it moves source d.source.dir/ent/comp into d.seg_arch.dir/ent/comp	*/
/* and calls process_seg_by_case.						*/
/*									*/
/* For a star entryname, this procedure expands the entryname into one or more matching	*/
/* segments in the given source dir.  The segments may be either archives or nonarchive	*/
/* segments.  For each matching segment, d.seg_arch.dir/ent/comp is filled in to	*/
/* identify the matching segment, and process_seg_by_case is called to process that	*/
/* segment.  The procedure is responsible for cleaning up allocations made by hcs_$star_	*/
/* in processing the starname.						*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

process_star_name:
     proc;

	dcl     Ientry		 fixed bin,
	        Parea		 ptr,
	        code		 fixed bin (35);

	dcl     area		 area based (Parea);

	call check_star_name_$entry (d.source.ent, d.source.ent_type);
	if d.source.ent_type = error_table_$badstar then
	     call d.check_error$fatal (d.source.ent_type, CALLER, "^/^a",
		d.source.path);

	if d.source.ent_type = NONSTAR then do;
		d.seg_arch = d.source, by name;
		call process_seg_by_case (NON_STAR_RETURN);
NON_STAR_RETURN:
		return;
	     end;

	Parea = get_system_free_area_ ();
	star_entry_ptr, star_names_ptr = null;
	on cleanup call star_janitor ();

	call hcs_$star_ (d.source.dir, d.source.ent, star_BRANCHES_ONLY, addr (area),
	     star_entry_count, star_entry_ptr, star_names_ptr, code);
	call d.check_error$fatal (code, CALLER,
	     "^/(^a)^/^3xListing entries matching source path.",
	     pathname_ (d.source.dir, d.source.ent));

	d.seg_arch.dir = d.source.dir;
	d.seg_arch.comp = d.source.comp;
	do Ientry = 1 to star_entry_count;
	     if star_entries (Ientry).type = star_SEGMENT then do;
		     d.seg_arch.ent = star_names (star_entries (Ientry).nindex);
		     call process_seg_by_case (STAR_RETURN);
		end;
STAR_RETURN:
	end;
	call star_janitor ();
	return;

star_janitor:
     proc;
	if star_entry_ptr ^= null then do;
		free star_names in (area),
		     star_entries in (area);
		star_entry_ptr, star_names_ptr = null;
	     end;
     end star_janitor;

     end process_star_name;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* process_seg_by_case:							*/
/*									*/
/* This procedure receives the name of a single source segment (in			*/
/* d.seg_arch.dir/ent/comp) as its input.  The procedure determines whether the segment	*/
/* is an archive or a nonarchive segment.  For archive segments, it determines whether a	*/
/* star, nonstar or null string archive component name is given.  A null string		*/
/* component name can be given if the entry name explicitly ends with .archive and no	*/
/* archive pathname is given.  In this situation, a component name of "**" is assumed,	*/
/* meaning that all archive components are processed.				*/
/*									*/
/* For nonarchive segments, processing consists of initiating the source file, checking	*/
/* for proper access to perform the specified operation (MODIFY or NO_MODIFY), setting	*/
/* d.seg.dir/ent/Pseg/Lseg_in to identify the segment, and calling process_one_seg.	*/
/*									*/
/* For archive components, processing consists of initiating the archive, checking for	*/
/* proper access to perform the specified operation (MODIFY or NO_MODIFY), applying the	*/
/* star convention on the archive component name, and processing the components which	*/
/* match by setting d.seg.dir/ent/comp/Pseg/Lseg_in and calling process_archive_comp.	*/
/*									*/
/* Cleanup handlers are established to terminate the archive or nonarchive segment, and	*/
/* to restore access if it was forced in order to perform a MODIFY operation.		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


process_seg_by_case:
     proc (ERROR_RETURN_LABEL);

	dcl     ERROR_RETURN_LABEL	 label variable;

	dcl     Paccess		 ptr,
	        bc		 fixed bin (24),
	        mode		 bit (36),
	        terminate_mode	 bit (5);

	if d.seg_arch.comp = "" then do;		/* no archive component name given.		*/
		if reverse (before (reverse (d.seg_arch.ent), ".")) = "archive" then do;
			d.seg_arch.comp = "**";	/*   an archive, with no component path given, 	*/
			d.seg_arch.comp_type = STARSTAR; /*     means process all components.		*/
		     end;
		else /*   not an archive.			*/
		     d.seg_arch.comp_type = NOCOMP;
	     end;
	else do;					/* archive component name given.		*/
		call check_star_name_$entry (d.seg_arch.comp, d.seg_arch.comp_type);
		if d.seg_arch.comp_type = error_table_$badstar then
		     call d.check_error$fatal (d.seg_arch.comp_type, CALLER, "^/^a",
			d.source.path);		/* Report path in error msg exactly as user typed */
	     end;

	if d.op.type = MODIFY then do;
		mode = RW_ACCESS;
		terminate_mode = TERM_FILE_TRUNC_BC_TERM;
	     end;
	else do;
		mode = R_ACCESS;
		terminate_mode = TERM_FILE_TERM;
	     end;

	Paccess = null;
	d.seg_arch.Pseg = null;
	on cleanup call seg_janitor (TERM_FILE_TERM);

	call initiate_file_ (d.seg_arch.dir, d.seg_arch.ent, mode,
	     d.seg_arch.Pseg, d.seg_arch.Lsegbc, code);
	if d.op.type = MODIFY & code = error_table_$no_w_permission then do;
		call access_$set_temporarily (d.seg_arch.dir, d.seg_arch.ent,
		     (star_SEGMENT), mode, Paccess, code);
		if code = 0 then
		     call initiate_file_ (d.seg_arch.dir, d.seg_arch.ent, mode,
			d.seg_arch.Pseg, d.seg_arch.Lsegbc, code);
		else
		     code = error_table_$no_w_permission;
	     end;
	call d.check_error$fatal (code, CALLER, "^/^a",
	     pathname_ (d.seg_arch.dir, d.seg_arch.ent));
	d.seg_arch.Lseg = divide (d.seg_arch.Lsegbc, BITS_PER_CHAR, 21, 0);
	if d.seg_arch.Lseg = 0 then
	     call d.check_error$fatal (error_table_$zero_length_seg, CALLER, "^/^a",
		pathname_ (d.seg_arch.dir, d.seg_arch.ent));

	goto PROC (d.seg_arch.comp_type);

PROC (-1):					/* nonarchive seg				*/
	d.seg = d.seg_arch, by name;
	d.seg.Lseg_in = d.seg_arch.Lseg;
	call process_one_seg (ERROR_RETURN_LABEL, d.seg.Pseg);
	call seg_janitor (terminate_mode);
SEG_ERROR_EXIT:
	return;

PROC (0):						/* NONSTAR COMPONENT			*/
PROC (1):						/* STAR COMPONENT				*/
PROC (2):						/* STARSTAR COMPONENT			*/

dcl Smatch_found			bit (1);

	d.seg.dir = d.seg_arch.dir;
	d.seg.ent = d.seg_arch.ent;
	d.seg.Pseg = null;

	Smatch_found = FALSE;

	call archive_$next_component (d.seg_arch.Pseg, d.seg_arch.Lsegbc,
	     d.seg.Pseg, bc, d.seg.comp, code);
	call d.check_error$fatal (code, CALLER, "^/Processing:  ^a",
	     pathname_$component (d.seg_arch.dir, d.seg_arch.ent, d.seg_arch.comp));
	do while (d.seg.Pseg ^= null);
	     d.seg.Lseg_in = divide (bc, BITS_PER_CHAR, 21, 0);
	     goto MATCH (d.seg_arch.comp_type);

MATCH (0):
	     if d.seg.comp = d.seg_arch.comp then
		go to MATCH (2);
	     else
		go to NOMATCH;

MATCH (1):
	     call match_star_name_ (d.seg.comp, d.seg_arch.comp, code);
	     if code ^= 0 then
		goto NOMATCH;

MATCH (2):
	     Smatch_found = TRUE;
	     call process_archive_comp (NOMATCH);

NOMATCH:
	     call archive_$next_component (d.seg_arch.Pseg, d.seg_arch.Lsegbc,
		d.seg.Pseg, bc, d.seg.comp, code);
	     call d.check_error$fatal (code, CALLER, "^/Processing:  ^a",
		pathname_$component (d.seg_arch.dir, d.seg_arch.ent, d.seg_arch.comp));
	end;

          if ^Smatch_found then do;
	     code = error_table_$no_component;
	     call d.check_error$fatal (code, CALLER, "^/Processing:  ^a",
		pathname_$component (d.seg_arch.dir, d.seg_arch.ent, d.seg_arch.comp));
	     end;

	call seg_janitor (TERM_FILE_TERM);
	return;

seg_janitor:
     proc (terminate_mode);

	dcl     code		 fixed bin (35),
	        terminate_mode	 bit (*);

	if d.seg_arch.Pseg ^= null then do;
		call terminate_file_ (d.seg_arch.Pseg, d.seg.Lseg_out * BITS_PER_CHAR, terminate_mode, code);
		d.seg_arch.Pseg = null;
	     end;
	if Paccess ^= null then do;
		call access_$reset (Paccess, code);
		Paccess = null;
	     end;
     end seg_janitor;

     end process_seg_by_case;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* process_archive_comp:							*/
/*									*/
/* This routine is responsible for making a copy of an archive component when a MODIFY	*/
/* operation (eg, hcom add, add_field, format, install or replace_field) operation is	*/
/* being performed.  Since archive components cannot be updated in place, a temporary	*/
/* copy of the archive component is made in the process directory, this temp copy is	*/
/* modified (by calling process_one_seg), and then the temp copy is updated back into	*/
/* the archive.  After the archive command is called, the revised bit count of the	*/
/* archive is obtained for use in obtaining the next matching archive component.	*/
/*									*/
/* Note that, to function properly, this strategy depends upon the archive command	*/
/* always updating the component by putting it in the exact same place as its earlier	*/
/* version.  Thus, the pointer to the beginning of the unmodified and modified		*/
/* components is the same; only the component bit count differs following the		*/
/* modification, and that bit count is no longer of interest to us.  What is interesting	*/
/* is that the overall archive bit count has changed.  That is why we obtain the new	*/
/* archive bit count following each archive update operation.			*/
/*									*/
/* This procedure is responsible for cleaning up the temporary copy of the component,	*/
/* and for manipulating d.seg.Pseg to point to the temporary copy while the modify	*/
/* operation is in progress, and to the archived component after the modify is complete.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


process_archive_comp:
     proc (ERROR_RETURN_LABEL);

	dcl     ERROR_RETURN_LABEL	 label variable;

	dcl     code		 fixed bin (35),
	        pdir		 char (168),
	        seg		 char (d.seg.Lseg_in) based (d.seg.Pseg),
	        Pseg		 ptr;

	if d.op.type = NO_MODIFY then do;		/* read-type operations can be done on archive	*/
		call process_one_seg (ERROR_RETURN_LABEL, d.seg.Pseg);
						/*   components in place.			*/
		return;
	     end;

	Pseg = d.seg.Pseg;
	d.seg.Pseg = null;
	on cleanup call arch_janitor ();

	pdir = get_pdir_ ();
	call initiate_file_$create (pdir, d.seg.comp, RW_ACCESS, d.seg.Pseg,
	     "0"b, 0, code);
	if d.seg.Pseg = null then
	     call d.check_error$fatal (code, CALLER,
		"Creating temporary segment in process directory.");
	seg = Pseg -> seg;

	call process_one_seg (ERROR_RETURN_LABEL, Pseg);

	if d.seg.Lseg_in = d.seg.Lseg_out then /* If component was not changed during processing */
	     if Pseg -> seg = seg then do;		/*   then don't update the archive.		*/
		     call arch_janitor ();
		     revert cleanup;
		     d.seg.Pseg = Pseg;
		     return;
		end;

	call terminate_file_ (d.seg.Pseg, d.seg.Lseg_out * BITS_PER_CHAR,
	     TERM_FILE_TRUNC_BC, code);
	call d.check_error$fatal (code, CALLER,
	     "Terminating a temporary segment in the process directory.");

	call archive ("ud", pathname_ (d.seg_arch.dir, d.seg_arch.ent),
	     pathname_ (pdir, d.seg.comp));
	d.seg.Pseg = null;
	revert cleanup;
	d.seg.Pseg = Pseg;

	call hcs_$status_mins (d.seg_arch.Pseg, (0), d.seg_arch.Lsegbc, code);
	call d.check_error$fatal (code, CALLER, "^/^a^/^3xGetting bit count for updated archive.",
	     pathname_ (d.seg_arch.dir, d.seg_arch.ent));
	return;


arch_janitor:
     proc;

	dcl     code		 fixed bin (35);

	if d.seg.Pseg ^= null then
	     call terminate_file_ (d.seg.Pseg, d.seg.Lseg_out * BITS_PER_CHAR, TERM_FILE_DELETE, code);

	d.seg.Pseg = Pseg;

     end arch_janitor;

     end process_archive_comp;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* process_one_seg:								*/
/*									*/
/* This procedure applies the equal convention to the -original pathname, initiates the	*/
/* original segment/component, and calls hcom_process_seg_ to perform the actual	*/
/* operation on the source segment/component.  It is responsible for terminating the	*/
/* original segment/component upon completion of the operation.			*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


process_one_seg:
     proc (ERROR_RETURN_LABEL, APseg);

	dcl     ERROR_RETURN_LABEL	 label variable,
	        APseg		 ptr;

	dcl     bc		 fixed bin (24),
	        code		 fixed bin (35);

	if d.orig.path = "" then do;
		call hcom_process_seg_ (addr (d), ERROR_RETURN_LABEL);
		return;
	     end;

	d.orig_seg.dir = d.orig.dir;
	call get_equal_name_$component (d.seg.ent, d.seg.comp,
	     d.orig.ent, d.orig.comp, d.orig_seg.ent, d.orig_seg.comp, code);
	call d.check_error$fatal (code, CALLER,
	     "-orig ^a^/when applied to source path^/(^a).", d.orig.path,
	     pathname_$component (d.seg.dir, d.seg.ent, d.seg.comp));

	d.orig_seg.Pseg = null;
	on cleanup call one_seg_janitor ();

	call initiate_file_$component (d.orig_seg.dir, d.orig_seg.ent,
	     d.orig_seg.comp, R_ACCESS, d.orig_seg.Pseg, bc, code);
	if d.orig_seg.Pseg = APseg then
	     call d.check_error$fatal (error_table_$bad_arg, CALLER, "^/-orig ^a^/is the same as the source^/(^a).",
		pathname_$component (d.orig_seg.dir, d.orig_seg.comp, d.orig_seg.ent),
		pathname_$component (d.seg.dir, d.seg.comp, d.seg.ent));
	call d.check_error$fatal (code, CALLER, "^/-orig ^a",
	     pathname_$component (d.orig_seg.dir, d.orig_seg.ent, d.orig_seg.comp));
	d.orig_seg.Lseg_in = divide (bc, BITS_PER_CHAR, 21, 0);

	call hcom_process_seg_ (addr (d), ERROR_RETURN_LABEL);
	call one_seg_janitor ();
	return;

one_seg_janitor:
     proc;
	dcl     code		 fixed bin (35);

	if d.orig_seg.Pseg ^= null then do;
		call terminate_file_ (d.orig_seg.Pseg, 0, TERM_FILE_TERM, code);
		d.orig_seg.Pseg = null;
	     end;
     end one_seg_janitor;

     end process_one_seg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include access_mode_values;

%include hcom_data;

%include star_structures;

%include terminate_file;

     end hcom_process_path_;
