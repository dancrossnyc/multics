/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-03,LJAdams), approve(85-11-06,MCR7278),
     audit(86-02-19,Gilcrease), install(86-02-19,MR12.0-1021):
     The default validation program.
  2) change(86-05-01,LJAdams), approve(86-05-19,MCR7386),
     audit(86-05-19,Gilcrease), install(86-06-05,MR12.0-1071):
     Added error message parameter.
                                                   END HISTORY COMMENTS */

hcom_default_validate_:
     proc (P_caller, P_field_name, P_input_value, P_result, P_canonical_value, P_field_type, P_err_msg);

/* *	HCOM_DEFAULT_VALIDATE_
   *
   *	This is the default procedure used to validate values placed in
   *      fields of a history comment or installation description.  
   *
   *	The validation procedure takes an input value to validate, and 
   *	returns a bit indicating the validity.  The name of the field is
   *	supplied to determine what sort of validation will be applied,
   *	and the name of the calling procedure is supplied for use in 
   *	error messages and questions.  An error message is always printed
   *	when the field value is invalid, so the caller of the validation
   *	routine need never print one.
   *
   *	In addition to the valid/invalid result, this procedure also
   *	returns the canonical form of the field value (making appropriate
   *	case translations, etc.), the field type (a character string 
   *	whose value depends on the field itself).
   *
   *	The DEFAULT validation procedure makes the following checks:
   *
   *	"author" field
   *         Validated for "correct" syntax and length restriction
   *	"approval" field
   *	   Validated for "correct" syntax and length restriction
   *	"audit" field
   *         Validated for "correct" syntax and length restriction
   *	"install" field
   *	   At present, validated for syntax only: MRnn.n-####
   *	Other fields
   *	   Always rejected.
   */

/* 85-06-04, Sibert: Initial coding */
/* 85-06-21, Sibert: Name change, creation of $check and $check_long,
   syntactic validation of person IDs */
/* 85-07-01, Adams:  Creation of default version for individual sites */

declare   P_caller char (*) varying parameter;		/* INPUT: Name of validation procedure's caller */
declare   P_field_name char (*) varying parameter;	/* INPUT: Name of field to be validated */
declare   P_input_value char (*) varying parameter;	/* INPUT: Value to be checked for validity */
declare   P_result bit (1) aligned parameter;		/* OUTPUT: Whether input was valid or not */

declare   P_canonical_value char (*) varying parameter;	/* OUTPUT: Canonical text form of above */
declare   P_err_msg char (100) varying parameter;           /* OUTPUT: Error message			*/
declare   P_field_type char (*) varying parameter;	/* OUTPUT: Character prefix of approval value */

declare   UPPERCASE char (26) internal static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
declare   LOWERCASE char (26) internal static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
declare   NAMECASE char (53) internal static options (constant) init
         ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'");
declare   DIGITS char (10) internal static options (constant) init ("0123456789");
declare   HYPHEN char (1) internal static options (constant) init ("-");

declare  (after, before, index, length, reverse, substr, translate, verify) builtin;

/*  */


CHECK_COMMON:
          P_result = "0"b;                                  /* Initialize output values */
          P_canonical_value = P_input_value;                /* Just return the input in case of error */
          P_field_type = "";                                /* Type-dependent values are returned null */
	P_err_msg = "";

/* Call the appropriate (internal) validation procedure, depending on the
   field name.  These procedures are responsible for setting all output
   parameters, issuing all error messages, and asking questions.  When 
   they return, all the results should be set appropriately, since the
   external procedure just returns at that point.  In particular, they must
   all set P_result, since that has been initialized to "0"b already, above.
   */

	if (P_field_name = AUTHOR_FIELD_NAME) then
               call validate_personid (AUTHOR_FIELD_NAME);
	else if (P_field_name = APPROVAL_FIELD_NAME) then
	     call validate_approval ();
	else if (P_field_name = AUDIT_FIELD_NAME) then
               call validate_personid (AUDIT_FIELD_NAME);
	else if (P_field_name = INSTALL_FIELD_NAME) then
	     call validate_install ();
	else 
	     P_err_msg = "Invalid field name";
	

CHECK_RETURNS:
	return;                             	/* All done */


validate_personid:
     procedure (P_type);

declare   P_type char (*) varying parameter;                /* "author" or "audit" -- not used in this implementation */

/* Ideally, perhaps, this would check the person ID against a little database of valid
   values, giving the updater the opportunity to accept or reject one that wasn't
   found.  It could even translate initials or nicknames to the real name. For now,
   though, all it does is make a trivial syntactic check that isn't even correct
   in all cases (deJong, for instance).  This represents an opportunity for people
   to modify this routine to be spiffier. */


          if (length (P_input_value) < 2) then              /* Between 2 and 24 characters */
               P_result = "0"b;
          else if (length (P_input_value) > 24) then
               P_result = "0"b;
          else if verify (P_input_value, NAMECASE) ^= 0 then
               P_result = "0"b;                             /* And be all alphabetic or contain ' */
          else P_result = "1"b;                             /* Otherwise, it's OK */

          return;
          end validate_personid;

/*  */

validate_approval:
     procedure ();


          if (length (P_input_value) = 0) then
            call invalid_approval ("Approval must not be null");
          else
            if (length (P_input_value) > 24) then
              call invalid_approval ("Approval must not be longer than 24");

          P_result = "1"b;                                  /* It's valid */

	return;
          end validate_approval;
       

/*  */

invalid_approval:
     procedure (P_message);

declare   P_message char (*) parameter;

/* This procedure prints an error message and returns a false result,
   for use when the value is invalid */


          P_err_msg = P_message;
	P_result = "0"b;				/* Invalid */
	goto CHECK_RETURNS;

	end invalid_approval;


/*  */

validate_install:
     procedure ();

declare   install_id char (24) varying;
declare   part_1 char (24) varying;
declare   part_2 char (24) varying;
declare   release_suffix char (1) varying;

/* Validate syntax of installation ID:
   - Must begin with "MR"
   - Must be followed by a number, optional decimal point and decimal,
     and optional suffix letter.
   - Must then be followed by a hyphen and following decimal number. 
   */


	install_id = translate (P_input_value, UPPERCASE, LOWERCASE);
	if (index (install_id, HYPHEN) = 0) then	/* Be sure it's hyphenated somewhere */
	     goto INVALID_INSTALL_ID;

	part_1 = before (install_id, HYPHEN);		/* And that it has something before and after the hyphen */
	part_2 = after (install_id, HYPHEN);

	if (length (part_1) < 3) then			/* Must have enough room for MRn, at least */
	     goto INVALID_INSTALL_ID;

	if (substr (part_1, 1, 2) ^= "MR") then		/* Must start with MR release identifier */
	     goto INVALID_INSTALL_ID;

/* Here, we check to see whether there is a suffix letter (as in MR7.0a), 
   and if so, we strip it out, translate to lowercase, and continue. */

	if (index (UPPERCASE, substr (reverse (part_1), 1, 1)) ^= 0) then do;
	     release_suffix = substr (reverse (part_1), 1, 1);
	     release_suffix = translate (release_suffix, LOWERCASE, UPPERCASE);
	     part_1 = substr (part_1, 1, (length (part_1) - 1));
	     if (length (part_1) < 3) then		/* Must still be something besides "MR" left */
		goto INVALID_INSTALL_ID;
	     end;
	else release_suffix = "";			/* None, otherwise */

	if (verify (substr (part_1, 3), "0123456789.") ^= 0) then
	     goto INVALID_INSTALL_ID;			/* Only digits and decimal point "MR" */

	if (part_2 = "") then			/* Must be something there */
	     goto INVALID_INSTALL_ID;

	if (verify (part_2, DIGITS) ^= 0) then
	     goto INVALID_INSTALL_ID;

	P_canonical_value = part_1 || release_suffix || HYPHEN || part_2; 
	P_result = "1"b;				/* It's valid; there is no other info to return */
	return;



INVALID_INSTALL_ID:
          P_err_msg = "Installation id must be of the form MRxx.y-nnnn.";
	P_result = "0"b;				/* Invalid, sorry */
	return;
	end validate_install;

%page; %include hcom_field_names;

end hcom_default_validate_;
