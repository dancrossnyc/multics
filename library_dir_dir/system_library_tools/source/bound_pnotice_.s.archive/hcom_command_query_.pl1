/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
/****^  HISTORY COMMENTS:
  1) change(85-09-03,LJAdams), approve(85-11-06,MCR7278),
     audit(86-02-19,Gilcrease), install(86-02-19,MR12.0-1021):
     Version of command_query_ that allows inputting
     of multiple lines of text for the history comment summary field.
                                                   END HISTORY COMMENTS */
hcom_command_query_:
     procedure (qip, varying_answer);

/* BEGIN DESCRIPTION */

/* function: */

/* The standard procedure to ask a question and read the user's answer: the question is formatted and the condition
   "command_question" is signalled allowing for programs like "answer" to supply answers automatically; the
   "repeat_query" command is also contained herein to reask the last question */

/* history: */

/* Created:  September 1971 by Jerry Stern */
/* Modified: 15 September 1971 by Jerry Stern */
/* Modified: 20 November 1975 by Steve Herbst to add the repeat_query command */
/* Modified: 26 October 1976 by Paul Green to switch to iox_ (get it?) */
/* Modified: 13 June 1978 by Steve Herbst to add the temporary entry point user_io */
/* Modified: July 1978 by J. C. Whitmore to remove user_io entry in favor of extended info structures */
/* Modified: 11 August 1978 by W. O. Sibert to add cu_$cp escape feature and set_allow_cp_escape entrypoint */
/* Modified: 23 January 1979 by William M. York to fix overlength substr assignment bug (see MCR 3661), lengthen the
             internal buffers, and call iox_$put_chars directly, avoiding the 256 char ioa_ restriction */
/* Modified: 7 September 1979 by Steve Herbst to signal command_query_error for bad answers in absentee */
/* Modified: 8 May 1981 by Steve Herbst to add command_query_$yes_no, the explanantion feature, and to accept y/n */
/* Modified: June 1981 by Benson Margulies to set the quiet_restart bit in condition structure */
/* Modified: 6 August 1981 by Richard Lamson to fix out-of-range version numbers in query_info structure */
/* Modified: 11 March 1982 by G. Palter to issue reset_more control order before asking questions */
/* Modified: 12/15/82 by S. Herbst to add literal_sw, prompt_after_explanation, and cp_escape_control value "01"b */
/* Modified: 02/08/84 by S. Herbst to check whether called with varying or nonvarying answer arg */
/* Modified: 02/08/84 by S. Herbst to change length fields in command_question_info.incl.pl1 from fixed to fixed (21) */
/* Modified: 03/27/84 by S. Herbst to say "Answer yes, no, or ? for an explanation" */
/* Modified: 06/14/84 by S. Herbst to call sub_err_ if error from iox_ writing question/reading answer */
/* Modified: 01/08/85 by J. Backs to accept case insensitive yes or no answer by translating answer before testing,
             plus minor changes to include some coding standards for readablity */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */

%page;
/* PARAMETERS */

dcl  varying_answer character (*) varying parameter;
dcl  qip pointer parameter;
dcl  yes_sw bit (1) parameter;
dcl  A_query_code fixed binary (35) parameter;


/* CONSTANTS */
dcl  False bit(1) init("0"b) int static options(constant),
     True bit(1)  init("1"b) int static options(constant);
dcl  GRIPE1 character (27) static options (constant) initial
	("Please answer yes or no.   ");
dcl  GRIPE2 character (50) static options (constant) initial
	("Please answer yes, no, or ? for an explanation.   ");
dcl  LOWERCASE_YN character (5) static options (constant) initial ("yesno");
dcl  NL character (1) static options (constant) initial ("
");
dcl  SPACE_SPACE character (2) static options (constant) init ("  ");
dcl  UPPERCASE_YN character (5) static options (constant) initial ("YESNO");
dcl  WHITE character (5) static options (constant) initial (/* SP HT VT FF NL */ " 	
");

/* BASED */

dcl  alloc_str character (alloc_len) based (alloc_ptr);
dcl  big_str character (big_len) based (big_ptr);
dcl  callername character (question_info.name_lth) based (question_info.name_ptr);
dcl  explanation character (query_info.explanation_len) based (query_info.explanation_ptr);
dcl  fixed_answer char (fixed_answer_len) based (fixed_answer_ptr);
dcl  question character (question_info.question_lth) based (question_info.question_ptr);
dcl  nchars fixed binary (21) based;
dcl  area area based (area_ptr);

dcl  1 input_info aligned based (qip) like query_info;

/* AUTOMATIC */

dcl  (abs_queue, arg_count, bi, callername_index, control_string_index, ndims, scale, type) fixed binary;
dcl  (alloc_len, big_len, fixed_answer_len, fixed21, len) fixed binary (21);
dcl  (alloc_ptr, area_ptr, alp, big_ptr, fixed_answer_ptr) pointer;
dcl  (alloc_sw, allow_cp_escape, fixed_answer_sw, interpret_cp_escape) bit (1) aligned;
dcl  buffer character (1000) aligned;
dcl  code fixed binary (35);
dcl  (ending_delim_found, multi_line_sw) bit(1);
dcl  error_string character (100) aligned;
dcl  Lanswer fixed bin(21);
dcl  output_buffer character (1004) aligned;
dcl  (packed, saved_rflag, timer_set, yn_entry_sw) bit (1) aligned;
dcl  1 question_info aligned like command_question_info;
dcl  retstring character (1000);
dcl  saved_rlabel label variable;
dcl  yn_answer character (500) aligned varying;

/* BUILTINS */

dcl  (addr, addrel, bin, bit, index, length, ltrim, max, maxlength, min, null,
      rtrim, size, substr, translate, unspec) builtin;

/* CONDITIONS */

dcl  cleanup condition;

/* EXTERNAL STATIC */

dcl  iox_$user_input pointer external;
dcl  iox_$user_io pointer external;
dcl  iox_$user_output pointer external;

dcl  error_table_$long_record fixed binary (35) external;

/* INTERNAL STATIC */

dcl  repeat_label label variable static;
dcl  repeat_flag bit (1) aligned initial ("0"b) static;

dcl  first_call bit (1) static initial ("1"b);
dcl  static_allow_cp_escape bit (1) aligned static initial ("0"b);

/* ENTRIES */

dcl  com_err_ entry () options (variable);
dcl  convert_status_code_ entry (fixed binary (35), character (8) aligned, character (100) aligned);
dcl  cu_$arg_count entry (fixed binary);
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$cp entry (pointer, fixed binary (21), fixed binary (35));
dcl  decode_descriptor_
	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
dcl  get_group_id_ entry () returns (character (32));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  ioa_			entry() options(variable);
dcl  ioa_$general_rs
	entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21), bit (1) aligned, bit (1) aligned);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$ioa_switch_nnl entry () options (variable);
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  iox_$get_line entry (pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  iox_$put_chars entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  signal_ entry (character (*), pointer, pointer, pointer);
dcl  sub_err_ entry () options (variable);
dcl  timer_manager_$alarm_call entry (fixed binary (71), bit (2) aligned, entry);
dcl  timer_manager_$reset_alarm_call entry (entry);
dcl  user_info_$absentee_queue entry (fixed binary);
%page;
/* BEGIN */

/* hcom_command_query_: entry (qip, varying_answer); */

	query_info.version = input_info.version;
	if query_info.version < 1 | query_info.version > 7 then do;
						/* Old programs are grandfathered */
	     query_info.version = 2;			/* Harmless version number */
	end;

	yn_entry_sw = "0"b;
	callername_index = 3;
	control_string_index = 4;
	query_info.yes_or_no_sw = input_info.yes_or_no_sw;/* copy the input data */
	query_info.suppress_name_sw = input_info.suppress_name_sw;
	query_info.status_code = input_info.status_code;
	query_info.query_code = input_info.query_code;
	multi_line_sw = False;

	if query_info.version >= 3 then do;		/* if more is defined, use it */
	     if query_info.version >= 4 then do;	/* use new bits */
		query_info.cp_escape_control = input_info.cp_escape_control;
		query_info.suppress_spacing = input_info.suppress_spacing;
		if query_info.version >= 5 then do;
		     query_info.explanation_len = input_info.explanation_len;
		     if query_info.explanation_len ^= 0 then query_info.explanation_ptr = input_info.explanation_ptr;
		     if query_info.version >= 6 then do;
			query_info.literal_sw = input_info.literal_sw;
			query_info.prompt_after_explanation = input_info.prompt_after_explanation;
			if query_info.version >= 7 then do;
			     if input_info.ending_delim ^= "" then do;
				multi_line_sw = True;
				query_info.ending_delim = input_info.ending_delim;
				query_info.ending_delim_description = input_info.ending_delim_description;
				ending_delim_found = False;
			     end;
			end;
		     end;
		end;
	     end;
	     query_info.question_iocbp = input_info.question_iocbp;
	     query_info.answer_iocbp = input_info.answer_iocbp;
	     query_info.repeat_time = input_info.repeat_time;
	end;

	if query_info.literal_sw | query_info.cp_escape_control = "01"b then do;
	     allow_cp_escape = "1"b;
	     interpret_cp_escape = "0"b;
	end;
	else if query_info.cp_escape_control = "11"b then allow_cp_escape, interpret_cp_escape = "1"b;
	else if query_info.cp_escape_control = "10"b then allow_cp_escape, interpret_cp_escape = "0"b;
	else allow_cp_escape, interpret_cp_escape = static_allow_cp_escape;

	go to COMMON;


/* format: off */
/* An easy-to-use entry which requires a yes/no answer:
	call hcom_command_query_$yes_no (yes_sw, status_code, callername, explanation, control_string, args...) */
/* format: on */

yes_no:
     entry (yes_sw, A_query_code);

	yn_entry_sw = "1"b;
	callername_index = 3;
	control_string_index = 5;
	unspec (query_info) = "0"b;
	query_info.yes_or_no_sw = "1"b;
	query_info.query_code = A_query_code;
	query_info.question_iocbp, query_info.answer_iocbp = null;
	allow_cp_escape, interpret_cp_escape = static_allow_cp_escape;


COMMON:
	if first_call then do;			/* be sure the labels are correctly defined */
	     repeat_label = ASK;			/* basis for saved label */
	     repeat_flag = "0"b;
	     first_call = "0"b;			/* done for this process */
	end;
	saved_rflag = repeat_flag;			/* save the state of any previous invocation */
	saved_rlabel = repeat_label;
	repeat_label = ASK;				/* redefine question repeat label to this block */
	repeat_flag = "0"b;				/* but a repeat is not defined yet */
	timer_set = "0"b;				/* no repeat timer set for this block */

	call cu_$arg_count (arg_count);
	call cu_$arg_list_ptr (alp);			/* get arglist ptr */

	if ^yn_entry_sw then do;			/* find out if answer arg is varying or non */
	     call decode_descriptor_ (alp, 2, type, packed, ndims, 0, scale);
	     fixed_answer_sw = (type = char_dtype);
	     if fixed_answer_sw then do;
	        call cu_$arg_ptr (2, fixed_answer_ptr, fixed_answer_len, 0);
	        Lanswer = 0;
	     end;
	     else
                  varying_answer = "";
	end;

	call cu_$arg_ptr (callername_index, question_info.name_ptr, fixed21, 0);
	question_info.name_lth = fixed21;
	call decode_descriptor_ (alp, callername_index, type, packed, ndims, question_info.name_lth, scale);
						/* get data type & length of callername */
	if type = varying_char_dtype then		/* varying string, must get current length */
	     question_info.name_lth = addrel (question_info.name_ptr, -1) -> nchars;
						/* the kludge shows its face */

/* get callername */

	bi = 1;
	buffer = "";
	if ^query_info.suppress_name_sw then
	     if question_info.name_lth ^= 0 then do;	/* put caller name in buffer */
		buffer = rtrim (callername);
		if buffer ^= "" then do;
		     bi = length (rtrim (buffer)) + 3;
		     substr (buffer, bi - 2, 2) = ": ";
		end;
	     end;

/* Get query_code message and verbose explanation of question for $yes_no */

	if yn_entry_sw then do;
	     if A_query_code ^= 0 then do;
		call convert_status_code_ (A_query_code, "", error_string);
		substr(buffer, bi, length(error_string)) = error_string;
		bi = length(rtrim(buffer)) + 3;
	     end;
	     call cu_$arg_ptr (callername_index + 1, query_info.explanation_ptr, query_info.explanation_len, code);
	     if code ^= 0 | query_info.explanation_len = 0 then query_info.explanation_ptr = null;
	end;

/* get user message */

	if arg_count >= control_string_index then do;
	     call ioa_$general_rs (alp, control_string_index, control_string_index + 1, retstring, len, "0"b, "0"b);
	     len = min (len, length (buffer) - bi + 1);
	     substr (buffer, bi, len) = substr (retstring, 1, len);
	     bi = bi + len;
	     if multi_line_sw then do;
		bi = length(rtrim(buffer)) + length(NL);
		substr (buffer,bi,length(NL)) = NL;
		bi = bi + 1;
	     end;
	end;

/* fill in question_info...which will be passed to the handler of the command_question condition. */

get_ready_to_signal:
	question_info.length = size (question_info);
	question_info.version = cq_info_version_7;
	question_info.action_flags.cant_restart = "0"b;
	question_info.action_flags.default_restart = "1"b;
	question_info.action_flags.quiet_restart = "1"b;
	question_info.status_code = query_info.status_code;
	question_info.query_code = query_info.query_code;
	question_info.question_sw = "1"b;		/* by default, print the question */
	question_info.yes_or_no_sw = query_info.yes_or_no_sw;
	question_info.preset_sw = "0"b;		/* don't expect a preset answer */
	question_info.answer_sw = "1"b;		/* but if one comes, print it by default */
	question_info.allow_cp_escape = allow_cp_escape;	/* computed earlier */
	question_info.suppress_spacing = query_info.suppress_spacing;
	question_info.interpret_cp_escape = interpret_cp_escape;
	question_info.literal_sw = query_info.literal_sw;
	question_info.prompt_after_explanation = query_info.prompt_after_explanation;
	question_info.max_question_lth = size (buffer);
	question_info.question_ptr = addr (buffer);
	question_info.question_lth = bi - 1;
	question_info.info_string = substr (buffer, 1, question_info.question_lth);
	if yn_entry_sw then do;
	     question_info.answer_ptr, big_ptr = addrel (addr (yn_answer), 1);
	     question_info.max_answer_lth = maxlength (yn_answer);
	end;
	else do;
	     if fixed_answer_sw then do;
		question_info.answer_ptr, big_ptr = fixed_answer_ptr;
		question_info.max_answer_lth = fixed_answer_len;
	     end;
	     else do;				/* varying answer, skip the length word */
		question_info.answer_ptr, big_ptr = addrel (addr (varying_answer), 1);
		question_info.max_answer_lth = maxlength (varying_answer);
	     end;
	end;
	question_info.question_iocbp = query_info.question_iocbp;
						/* give handler caller's output switch */
	question_info.answer_iocbp = query_info.answer_iocbp;
						/* and input switch */
	question_info.repeat_time = query_info.repeat_time;
						/* and also caller's repeat time */
	question_info.explanation_ptr = query_info.explanation_ptr;
	question_info.explanation_len = query_info.explanation_len;

	alloc_ptr = null;

/* signal command_question */

SIGNAL:
	call signal_ ("command_question", null, addr (question_info), null);

	on cleanup call clean_up;

	if question_info.question_sw & ^question_info.preset_sw then
	     repeat_flag = "1"b;			/* if asking a question */
	else repeat_flag = "0"b;

	if question_info.question_iocbp = null then	/* if no output switch defined by caller or handler */
	     if question_info.preset_sw then
		question_info.question_iocbp = iox_$user_output;
						/* put question in file?? */
	     else question_info.question_iocbp = iox_$user_io;
						/* if really asking, go to the terminal */

	if question_info.answer_iocbp = null then	/* if no input switch defined by caller or handler */
	     question_info.answer_iocbp = iox_$user_input;/* set the default input switch */

ASK:
	if question_info.question_sw then do;		/* do we print the question? */
	     if ^question_info.preset_sw then		/* and if we need a reply ... */
		call iox_$control (question_info.question_iocbp, "reset_more", null (), (0));
						/* ... make sure the user sees the question */
	     call print_question;
	end;

/* process the answer */

	alloc_sw = "0"b;

	if question_info.preset_sw then		/* kludge in the current length */
	     addrel (question_info.answer_ptr, -1) -> nchars, big_len = question_info.answer_lth;
	else do;					/* read the answer from the user's terminal */
READ_ANSWER:
	     if repeat_flag & question_info.repeat_time >= 30 then do;
						/* put 30 second lower limit on repeats */
		call timer_manager_$alarm_call (question_info.repeat_time, "11"b, repeat_query);
		timer_set = "1"b;			/* indicate that a timer is pending */
	     end;

GET_LINE:
	     call iox_$get_line (question_info.answer_iocbp, addr (retstring), length (retstring), len, code);

	     if code = error_table_$long_record then do;
		if ^alloc_sw | big_len + len > alloc_len then do;
						/* need more room */
		     if ^alloc_sw then do;
			alloc_len = length (retstring) * 4;
			area_ptr = get_system_free_area_ ();
		     end;
		     else alloc_len = max (2 * alloc_len, big_len + len);
		     alloc_ptr = null;

		     allocate alloc_str in (area) set (alloc_ptr);

		     if alloc_sw then do;
			substr (alloc_ptr -> big_str, 1, big_len) = substr (big_ptr -> big_str, 1, big_len);
			free big_ptr -> big_str in (area);
		     end;
		     else big_len = 0;

		     big_ptr = alloc_ptr;
		     alloc_sw = "1"b;
		end;

		substr (big_ptr -> big_str, big_len + 1, length (retstring)) = retstring;
		big_len = big_len + length (retstring);
		code = 0;
		go to GET_LINE;
	     end;

	     else if code ^= 0 then do;
ANSWER_ERROR:
		call sub_err_ (code, callername, ACTION_CAN_RESTART, null, 0, "Reading answer.");
		go to GET_LINE;
	     end;

	     if alloc_sw then do;
		if big_len + len > alloc_len then do;
		     alloc_len = big_len + len;

		     allocate alloc_str in (area) set (alloc_ptr);

		     substr (alloc_ptr -> big_str, 1, big_len) = substr (big_ptr -> big_str, 1, big_len);
		     free big_ptr -> big_str in (area);
		     big_ptr = alloc_ptr;
		end;
		substr (big_ptr -> big_str, big_len + 1, len) = substr (retstring, 1, len);
		big_len = big_len + len;
	     end;
	     else do;
		big_ptr = addr (retstring);
		big_len = len;
	     end;

	     if timer_set then call timer_manager_$reset_alarm_call (repeat_query);
	end;

	if ^query_info.literal_sw & ^multi_line_sw & index (WHITE, substr (big_str, 1, 1)) ^= 0 then
	     big_str = ltrim (big_str, WHITE);		/* strip leading white space from answer */

	if substr (big_str, 1, 2) = ".." then do;	/* command processor escape */
	     if ^allow_cp_escape then do;
		call com_err_ (0, callername, "No command processor escape allowed for this question.");
		if question_info.preset_sw then
		     go to SIGNAL;
		else go to ASK;
	     end;

	     if interpret_cp_escape then do;

		call cu_$cp (addr (substr (big_str, 3, 1)), max (0, big_len - 2), code);

		if alloc_sw then do;
		     alloc_sw = "0"b;
		     free alloc_str in (area);
		     alloc_ptr = null;
		end;

		if question_info.preset_sw then
		     go to SIGNAL;
		else do;
		     call iox_$control (question_info.question_iocbp, "reset_more", null (), (0));
		     call ioa_$ioa_switch_nnl (question_info.question_iocbp, "Answer: ");
		     go to READ_ANSWER;		     	/* brief prompt */
		end;
	     end;
	end;

	if ^query_info.literal_sw then big_len = length (rtrim (big_str, WHITE));

	if question_info.preset_sw & question_info.answer_sw then
						/* if preset answer exists & should be printed */
	     if question_info.question_sw | ^(big_str = "")
						/* and if the question was already printed */
	     then call ioa_$ioa_switch (question_info.question_iocbp, "^a", big_str);
						/* print answer and NL */

	if big_str = "?" & query_info.explanation_ptr ^= null & query_info.explanation_len > 0 then do;
						/* asking for an explanation and there is one */
	     call expand_explanation ();

	     call iox_$control (question_info.question_iocbp, "reset_more", null (), (0));
						/* let the user see the explanation */
PRINT_EXPLANATION:
	     if query_info.suppress_spacing then
		call iox_$put_chars (question_info.question_iocbp, addr (retstring), len, code);
	     else call ioa_$ioa_switch_nnl (question_info.question_iocbp,
		"^/^a^[
End input with a line containing just ^a (^a).^;^2s^]^[^/^s^;^[^/^;^2x^]",
		substr(retstring,1,len),
		multi_line_sw & query_info.prompt_after_explanation,
		     query_info.ending_delim_description,
		     query_info.ending_delim,
		query_info.prompt_after_explanation,
		     multi_line_sw);
	     if query_info.prompt_after_explanation then call print_question;
	     go to READ_ANSWER;
	end;

	if query_info.yes_or_no_sw then do;		/* answer must be "yes" or "no" */

	                                                  /* Translate any uppercase letters to lowercase before testing */
	     big_str = translate (big_str, LOWERCASE_YN, UPPERCASE_YN);

	     if big_str ^= "yes" & big_str ^= "y" & big_str ^= "no" & big_str ^= "n" then
		if question_info.preset_sw then do;	/* the handler returned a bum answer */
		     call signal_ ("command_query_error", null, null, null);
		     go to get_ready_to_signal;	/* control may return here if a "start" command is issued */
		end;
		else do;				/* the user has given a bum answer */
		     if get_group_id_ () = "Initializer.SysDaemon.z" then
			abs_queue = -1;
		     else call user_info_$absentee_queue (abs_queue);
		     if abs_queue ^= -1 then do;	/* running in absentee */
			call com_err_ (0, "hcom_command_query_", "Invalid answer to question above.");
			call signal_ ("command_query_error", null, null, null);
			return;
		     end;
		     call iox_$control (question_info.question_iocbp, "reset_more", null (), (0));
PRINT_GRIPE:
		     if query_info.explanation_ptr ^= null & query_info.explanation_len > 0 then
			call iox_$put_chars (question_info.question_iocbp,
			     addr (GRIPE2), length (GRIPE2), code);
		     else call iox_$put_chars (question_info.question_iocbp,
			addr (GRIPE1), length (GRIPE1), code);

		     if code ^=0 then do;
			call sub_err_ (code, callername, ACTION_CAN_RESTART, null, 0, "Writing question.");
			go to PRINT_GRIPE;
		     end;
						/* complain */
		     call iox_$control (question_info.answer_iocbp, "resetread", null, code);
						/* flush any read-ahead */
		     if alloc_sw then do;
			alloc_sw = "0"b;
			free alloc_str in (area);
			alloc_ptr = null;
		     end;

		     go to READ_ANSWER;
		end;

	     if yn_entry_sw then yes_sw = (big_str = "yes" | big_str = "y");
	     else if big_str = "y" then call set_answer ("yes");
	     else if big_str = "n" then call set_answer ("no");
	     else call set_answer (big_str);
	end;

	else call set_answer (big_str);

	repeat_flag = saved_rflag;
	repeat_label = saved_rlabel;

	if alloc_sw then free alloc_str in (area);

          if multi_line_sw & ^ending_delim_found then
            goto GET_LINE;

	return;

%page;
/* INTERNAL PROCEDURES */

set_answer: proc (P_str);

dcl P_str                      char (*);

          if multi_line_sw then do;
	   if P_str = query_info.ending_delim then do;
	      ending_delim_found = True;
	      goto end_answer;
	   end;
	   goto add_to_answer;
	end;

	if fixed_answer_sw then 
            fixed_answer = P_str;
	else
            varying_answer = P_str;

          goto end_answer;

add_to_answer:
  
          if fixed_answer_sw then do;
	   if Lanswer + 1 > length(fixed_answer) then do;
	      call iox_$control (question_info.answer_iocbp, "reset_more", null(), (0));
	      call ioa_ ("Overflow condition - some data may have been lost.");
	      ending_delim_found = True;
	   end;
             else if Lanswer + length(P_str) + length(NL) > length(fixed_answer) then do;
	      substr(fixed_answer,Lanswer+1) = NL || P_str;
	      call iox_$control (question_info.answer_iocbp, "reset_more", null(), (0));
	      call ioa_ ("Overflow condition - some data may have been lost.");
	      ending_delim_found = True;
             end;
	   else if Lanswer = 0 then do;
	      substr(fixed_answer,1) = P_str;
	      Lanswer = length(P_str);
             end;
	   else do;
                substr(fixed_answer,Lanswer+1) = NL || P_str;
                Lanswer = Lanswer + length(P_str) + length(NL);
            end;
          end;
	else do;
	   if length(varying_answer) + length(P_str) + length(NL) > maxlength(varying_answer) then do;
	      varying_answer = varying_answer || NL || P_str;
	      call iox_$control (question_info.answer_iocbp, "reset_more", null(), (0));
	      call ioa_ ("Overflow condition - some data may have been lost.");
	      ending_delim_found = True;
             end;
             else
               if varying_answer = "" then
                 varying_answer = P_str;
	     else
                 varying_answer = varying_answer || NL || P_str;
          end;
	
end_answer:
end set_answer;
%page;
clean_up:
     procedure ();

	if timer_set then call timer_manager_$reset_alarm_call (repeat_query);
	repeat_flag = saved_rflag;
	repeat_label = saved_rlabel;

	if alloc_ptr ^= null then free alloc_ptr -> alloc_str in (area);

     end clean_up;

%page;
/* Substitutes arugments into explanation control string and builds retstring */

expand_explanation:
     procedure ();

dcl  1 arg_list aligned based (alp),
       2 arg_count fixed bin (17) unaligned unsigned,
       2 code bit (19) unaligned,
       2 desc_count fixed bin (17) unaligned unsigned,
       2 mbz bit (19) unaligned,
       2 arg_ptrs (arg_count) ptr,
       2 display_ptr (bin ((arg_list.code & bit (10, 19)) ^= ""b), 1) ptr,
       2 desc_ptrs (arg_count) ptr;

/* For $yes_no, explanation is an argument */

	if yn_entry_sw then
	     call ioa_$general_rs (alp, control_string_index - 1, control_string_index + 1, retstring, len, "0"b, "0"b);

/* Otherwise, have to build an argument list containing it */

	else begin;

dcl  1 new_arg_list aligned,
       2 arg_count fixed bin (17) unaligned unsigned,
       2 code bit (19) unaligned,
       2 desc_count fixed bin (17) unaligned unsigned,
       2 mbz bit (19) unaligned,
       2 arg_ptrs (arg_list.arg_count) ptr,
       2 display_ptr (bin ((arg_list.code & bit (10, 19)) ^= ""b), 1) ptr,
       2 desc_ptrs (arg_list.arg_count) ptr;

%include descriptor;

dcl  desc_size fixed bin (24) unaligned unsigned based (addr (desc_.scale_));

	     new_arg_list = arg_list;			/* replace question arg with explanation arg */
	     desc_.version2_ = "1"b;
	     desc_.type_ = char_dtype;
	     desc_.pack_ = "1"b;
	     desc_.dimension_ = "0"b;

	     desc_size = length (explanation);

	     new_arg_list.desc_ptrs (control_string_index) = addr (desc_);
	     new_arg_list.arg_ptrs (control_string_index) = addr (explanation);

	     call ioa_$general_rs (addr (new_arg_list), control_string_index, control_string_index + 1, retstring, len,
		"0"b, "0"b);

	end;

     end expand_explanation;

%page;
print_question: proc;

PRINT_QUESTION:
	     if query_info.suppress_spacing then do;
		call iox_$put_chars (question_info.question_iocbp, question_info.question_ptr,
		     (question_info.question_lth), code);
		if code ^= 0 then do;
QUESTION_ERROR:
		     call sub_err_ (code, callername, ACTION_CAN_RESTART, null, 0, "Writing question.");
		     go to PRINT_QUESTION;
		end;
	     end;
	     else do;
		substr (output_buffer, 1, 1) = NL;
		substr (output_buffer, 2, (bi - 1) + length(SPACE_SPACE)) =
		     question;
		if multi_line_sw then
		     call iox_$put_chars (question_info.question_iocbp, addr (output_buffer),
			(bi - 1) + length(NL), code);
		else
		     call iox_$put_chars (question_info.question_iocbp, addr (output_buffer),
			(bi - 1) + length(NL) + length(SPACE_SPACE),
			code);
		if code ^= 0 then go to QUESTION_ERROR;
	     end;

end print_question;
%page;

/* Repeat the last question and ask for the answer again */

repeat_query:
rq:
     entry () options (variable);

	if first_call then do;			/* be sure the labels are correctly defined */
	     repeat_label = ASK;			/* basis for saved label */
	     repeat_flag = "0"b;
	     first_call = "0"b;			/* done for this process */
	end;

	if repeat_flag then
	     go to repeat_label;
	else call com_err_ (0, "repeat_query", "No pending query.");

	return;

%page;
/* ENTRYPOINT */

/* Enable/disable use of the command processor escape */

set_cp_escape_enable:
     entry (new_allow_cp_escape, old_allow_cp_escape);

dcl  new_allow_cp_escape bit (1) aligned parameter;	/* whether it is enabled now */
dcl  old_allow_cp_escape bit (1) aligned parameter;	/* was it enabled before? */

	old_allow_cp_escape = static_allow_cp_escape;
	static_allow_cp_escape = new_allow_cp_escape;

	return;

%page;
/* INCLUDE FILES */

%include hcom_query_info;
%page;
%include command_question_info;
%page;
%include condition_info_header;
%page;
%include std_descriptor_types;
%page;
%include sub_err_flags;

end hcom_command_query_;
