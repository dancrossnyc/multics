/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


delete_volume_log: dvl: proc;

/* This command allows the caller to delete  the specified volume log in a consistent manner */

/* DR Vinograd 9/78 */


dcl  suffix char (32);
dcl  new_pool_path char (168);
dcl  contents_name char (32);
dcl  vlx fixed bin;
dcl  volog_name char (32);
dcl  pvolog_name char (32);
dcl  pvolog_dir char (168);
dcl  contents_dir char (168);
dcl  wd_mode bit (1);
dcl  volog_dir char (168);
dcl  volname char (32);
dcl  narg fixed bin;
dcl  j fixed bin;
dcl  arg char (argl) based (argp);
dcl  argl fixed bin;
dcl  argp ptr;
dcl  contentsp ptr;
dcl  manual_free bit (1);
dcl  ac fixed bin;
dcl  code fixed bin (35);
dcl  ignore fixed bin (35);
dcl  vpp ptr;

dcl  myname char (32) init ("delete_volume_log") static options (constant);
dcl  lock_wait_time fixed bin static init (60) options (constant);

dcl  cleanup condition;

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$invalid_lock_reset fixed bin (35) ext;
dcl  error_table_$noentry ext fixed bin (35);;

dcl  get_wdir_ entry returns (char (168));
dcl  ioa_ entry options (variable);
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  manage_volume_pool_$free entry (ptr, entry options (variable), char (*), fixed bin (35));
dcl  manage_volume_pool_$set_pool_path entry (entry options (variable), char (*), ptr, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  error_rnt entry variable options (variable);
dcl  suffixed_name_$make entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);

dcl (null, addr, substr, rtrim) builtin;

%include backup_volume_log;
%include backup_pvol_info;
%include fs_vol_label;
%include backup_volume_header;
%include backup_static_variables;
%include pvolog;

/* set flags */
	wd_mode, manual_free = "0"b;
	error_rnt = com_err_;
	bvlp, pvlp = null;
						/* pick up name of volume log */
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
argerr:	     call com_err_ (0, myname, "USAGE ^a pvname [-manual_free] [-wd | -working_dir]", myname);
	     return;
	end;
	if substr (arg, 1, 1) = "-" then goto argerr;
						/* get pathname */
	volname = arg;
						/* pickup control args if any */
	ac = 2;
	call cu_$arg_count (narg);
	do while (ac <= narg);
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to access arg after", arg);
		goto finish;
	     end;
	     if arg = "-manual_free" then manual_free = "1"b;
	     else if arg = "-wd" | arg = "-working_dir" then wd_mode = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		goto finish;
	     end;
	     ac = ac + 1;
	end;

	code = 0;
						/* set cleanup handler to unlock and release */
	if ^manual_free then do;
	     if wd_mode then new_pool_path = rtrim (get_wdir_ ()) || ">" || "Volume_Dumper";
	     else new_pool_path = ">daemon_dir_dir>volume_backup>Volume_Dumper";
	     call manage_volume_pool_$set_pool_path (error_rnt, new_pool_path, vpp, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to set new volume pool path");
		goto finish;
	     end;
	end;
	if wd_mode then volog_dir, contents_dir, pvolog_dir = get_wdir_ ();
	else do;
	     volog_dir = ">daemon_dir_dir>volume_backup";
	     pvolog_dir = ">daemon_dir_dir>volume_backup>pvolog";
	     contents_dir = ">daemon_dir_dir>volume_backup>contents";
	end;
	on cleanup call finish_;
	call get_volog (volname);
	if bvlp = null then do;
	     call com_err_ (code, myname, "^a>^a.volog", volog_dir, volname);
	     goto finish;
	end;
	call lock_volume_log ;
	do vlx = 1 to backup_volume_log.next;
	     volname = backup_volume_log (vlx).volname;
	     call get_pvolog (volname);
	     if pvlp ^= null then do;
		call lock_pvolog ;
		do j = 1 to pvolog.next;
		     pvlep = addr (pvolog.array (j));
		     if pvle.pvname = backup_volume_log.pvname then do;
			pvle.invocation_count = pvle.invocation_count - 1;
			if pvle.invocation_count = 0 then do;
			     pvolog.in_use = pvolog.in_use - 1;
			     pvle.pvname = "";
			end;
		     end;
		end;
		if pvolog.in_use <= 0 then do;
		     call hcs_$delentry_seg (pvlp, code);
		     if code ^= 0 then
			call com_err_ (code, myname, "Unable to delete output volume log ^a.pvolog.", volname);
		     else pvlp = null;
		     do suffix = "contents", "contents_names";
			call get_contents (volname, suffix);
			if contentsp ^= null then do;
			     call hcs_$delentry_seg (contentsp, code);
			     if code ^= 0 & code ^= error_table_$noentry then
				call com_err_ (code, myname, "Unable to delete ^a.^a", volname, suffix);
			end;
			else call com_err_ (code, myname, "Unable to locate ^a.^a", volname, suffix);
		     end;
		     if ^manual_free then do;
			call manage_volume_pool_$free (vpp, error_rnt, volname, code);
			if code ^= 0 then
			     call com_err_ (code, myname, "Unable to free volume ^a", volname);
			else call ioa_ ("Output volume ^a now available for use.", volname);
		     end;
		end;
		if pvlp ^= null then call unlock_pvolog;
	     end;
	     else call com_err_ (code, myname, "^a>^a.pvolog.", pvolog_dir, volname);
	end;
	call hcs_$delentry_seg (bvlp, code);
	if code ^= 0 then call com_err_ (code, myname, "Unable to delete ^a.volog", volname);
	else bvlp = null;
finish:
	call finish_;
	return;



lock_volume_log: proc ;

/* This proc locks the volume log */

	     call set_lock_$lock (backup_volume_log.lock, lock_wait_time, code);
	     if code = error_table_$invalid_lock_reset then code = 0;
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to lock volume log");
		goto finish;
	     end;
	     return;
	end lock_volume_log;

finish_:	proc;
						/* unlock, terminate, and release as required */
	     if bvlp ^= null then call set_lock_$unlock (backup_volume_log.lock, ignore);
	     if pvlp ^= null then call set_lock_$unlock (pvolog.lock, ignore);
	     if bvlp ^= null then call hcs_$terminate_noname (bvlp, ignore);
	     if pvlp ^= null then call hcs_$terminate_noname (pvlp, ignore);
	     return;

	end finish_;

get_volog: proc (volname);
dcl  volname char (*);
	     bvlp = null;
	     call suffixed_name_$make (volname, "volog", volog_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to construct volog name");
		goto finish;
	     end;
	     call hcs_$initiate (volog_dir, volog_name, "", 0, 0, bvlp, code);
	end get_volog;
get_pvolog: proc (volname);
dcl  volname char (*);
	     pvlp = null;
	     call suffixed_name_$make (volname, "pvolog", pvolog_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to construct pvolog name");
		goto finish;
	     end;
	     call hcs_$initiate (pvolog_dir, pvolog_name, "", 0, 0, pvlp, code);
	end get_pvolog;
get_contents: proc (volname, suffix);
dcl (volname, suffix) char (*);
	     contentsp = null;
	     call suffixed_name_$make (volname, suffix, contents_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to construct contents name");
		goto finish;
	     end;
	     call hcs_$initiate (contents_dir, contents_name, "", 0, 0, contentsp, code);
	end get_contents;

lock_pvolog: proc ;

/* This proc locks an output volume log */

	     call set_lock_$lock (pvolog.lock, lock_wait_time, code);
	     if code = error_table_$invalid_lock_reset then code = 0;
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to lock output log");
		goto finish;
	     end;
	     return;
	end lock_pvolog;
unlock_pvolog: proc ;

/* This proc unlocks an output volume log */

	     call set_lock_$unlock (pvolog.lock, ignore);
	     return;
	end unlock_pvolog;
     end delete_volume_log;
