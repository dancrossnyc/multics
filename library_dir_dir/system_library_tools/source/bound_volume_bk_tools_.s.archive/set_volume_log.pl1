/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-03-03,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
     Added the -incr_sets and -cons_sets control arguments to be used for
     setting the number of dump volume sets to retain in the volume log.
     Add short form of -rg for -reload_group.
                                                   END HISTORY COMMENTS */


set_volume_log: proc;

/* This command allows the caller to set the reload_group filed of the specified volume log */

%page;

/* set flags */
	lock = "0"b;
	volog_dir = ">daemon_dir_dir>volume_backup";
	bvlp = null;
	save_cons_set, save_incr_set = 0;
	set_reload_groups, set_save_cons_set, set_save_incr_set = "0"b;

						/* pick up name of volume log */
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
             call com_err_ (code, myname);
arg_err:       call ioa_ (
"Usage: ^a volog {-control_args}
       control_args:  -working_dir, -wd
                      -reload_groups N, -rg N (N > 1)
                      -cons_sets N, -cs N (N > 0, ""all"", ""a"")
                      -incr_sets N, -is N (N > 0, ""all"", ""a"")", myname);
	     goto finish;
	end;

          if substr (ltrim (arg), 1, length ("-")) = "-" then do;
             call com_err_ (error_table_$bad_arg, myname, "^a", arg);
             goto arg_err;
             end;
          else
             volog = arg;
						/* pickup control args if any */
	ac = 2;
	call cu_$arg_count (nargs);
	do while (ac <= nargs);
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
no_arg:	        call cu_$arg_ptr (ac-1, argp, argl, code);
	        call com_err_ (code, myname, "Unable to access operand following argument ^a.", arg);
		goto finish;
	     end;
               if arg = "-reload_groups" | arg = "-rg" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_arg;
		reload_groups = cv_dec_check_ ((arg), code);
		if code ^= 0 then do;
		     call com_err_ (0, myname, "invalid numeric arg ^a", arg);
		     goto finish;
		end;
		if reload_groups < 1 then reload_groups = 1;
		set_reload_groups = "1"b;
	     end;
	  else
	     if arg = "-incr_sets" | arg = "-is" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_arg;
		if arg = "all" | arg = "a" then
		   save_incr_set = 0;
		else do;
		   save_incr_set = cv_dec_check_ ((arg), code);
		   if code ^= 0 then do;
		      call com_err_ (0, myname, "invalid numeric ^a", arg);
		      goto finish;
		      end;

		   if save_incr_set < 1 then do;
		      call com_err_ (0, myname,
"invalid arg -incr_sets(-is) ^a", arg);
		      goto finish;
		      end;
		   end;
		set_save_incr_set = "1"b;
	     end;
	  else
	     if arg = "-cons_sets" | arg = "-cs" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_arg;
		if arg = "all" | arg = "a" then
		   save_cons_set = 0;
		else do;
		   save_cons_set = cv_dec_check_ ((arg), code);
		   if code ^= 0 then do;
		      call com_err_ (0, myname, "invalid numeric arg ^a", arg);
		      goto finish;
		      end;

		   if save_cons_set < 1 then do;
		      call com_err_ (0, myname,
"invalid arg -cons_sets(-cs) ^a", arg);
		      goto finish;
		      end;		      
		   end;
		set_save_cons_set = "1"b;
	     end;
	     else if arg = "-wd" | arg = "-working_dir" then volog_dir = get_wdir_ ();
	     else do;
		call com_err_ (error_table_$bad_arg, myname, "^a", arg);
		goto arg_err;
	     end;
	     ac = ac + 1;
	end;

	code = 0;
						/* set cleanup handler to unlock and release */
	call get_bvlp (volog);
	on cleanup call finish_;
						/* get temp segs and set flag */
						/* lock volume log and set flag */
	call lock_volume_log;
	lock = "1"b;
						/* build name list of all dump volumes in log */
						/*  initialize what will be new volume log */
	if set_reload_groups then backup_volume_log.reload_groups = reload_groups;
	if set_save_cons_set then backup_volume_log.Nsaved_cons_sets = save_cons_set;
	if set_save_incr_set then backup_volume_log.Nsaved_incr_sets = save_incr_set;

	call unlock_volume_log;
	lock = "0"b;
finish:
	call finish_;
	return;

err:	call com_err_ (code, myname);
	goto finish;


lock_volume_log: proc;

/* This proc locks the volume log */

	     call set_lock_$lock (backup_volume_log.lock, -1, code);
	     if code = error_table_$invalid_lock_reset then code = 0;
	     else if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to lock volog");
		goto finish;
	     end;
	     return;
	end lock_volume_log;

unlock_volume_log: proc;

/* This proc unlocks the volume log */

	     call set_lock_$unlock (backup_volume_log.lock, code);
	     return;
	end unlock_volume_log;



finish_:	proc;
						/* unlock, terminate, and release as required */
	     if lock then call unlock_volume_log;
	     if bvlp ^= null then
		call adjust_bit_count_ (volog_dir, volog_name, "1"b, (0), ignore);
	     if bvlp ^= null   then call hcs_$terminate_noname (bvlp, ignore);
	     bvlp = null;
	end finish_;

get_bvlp:	proc (name);
dcl  name char (32);
	     call suffixed_name_$make (name, "volog", volog_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Unable to contruct volog name for ^a", name);
		goto finish;
	     end;

/* and then ptr */
	     call hcs_$initiate (volog_dir, volog_name, "", 0, 0, bvlp, code);
	     if bvlp = null then do;
		call com_err_ (code, myname, "Unable to get ptr to volog ^a>^a",
		     volog_dir, volog_name);
		goto finish;
	     end;
	end get_bvlp;
%page;
dcl  volog char (32);
dcl  volog_name char(32);
dcl  volog_dir char (168);
dcl  arg char (argl) based (argp);
dcl  myname char (32) int static init ("set_volume_log") options (constant);
dcl  argl fixed bin;
dcl  argp ptr;
dcl  reload_groups fixed bin;
dcl  save_cons_set fixed bin;
dcl  save_incr_set fixed bin;
dcl  lock bit (1) init ("0"b);
dcl  set_reload_groups bit (1);
dcl  set_save_cons_set bit (1);
dcl  set_save_incr_set bit (1);
dcl  nargs fixed bin;
dcl  ac fixed bin;
dcl  code fixed bin (35);
dcl  ignore fixed bin (35);


dcl  cleanup condition;

dcl  error_table_$bad_arg external fixed bin (35);
dcl  error_table_$invalid_lock_reset fixed bin (35) ext;

dcl  adjust_bit_count_ entry (char (*), char (*), bit (1), fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  com_err_ entry options (variable);
dcl  suffixed_name_$make entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  get_wdir_ entry returns (char(168));

dcl  (length, ltrim, null, substr) builtin;

%include backup_volume_log;
%include backup_pvol_info;
%include fs_vol_label;
%include backup_volume_header;
%include backup_static_variables;

     end set_volume_log;
