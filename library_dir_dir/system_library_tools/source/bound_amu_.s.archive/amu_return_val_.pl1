/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_return_val_: proc;
	return;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* This proc will get the miscellaneous values for FDUMPS */

/* cpu_tag_from_idx
   dbr_from_idx
   idx_from_dbr
   cpu_tag_from_dbr

   BITS:
   per_process
*/



dcl  P_amu_info_ptr ptr;
dcl  P_dbr fixed bin (24);
dcl  P_idx fixed bin;
dcl  P_segno fixed bin;


dcl  i fixed bin (17);
dcl  search_dbr fixed bin (24);
dcl  segment fixed bin;

dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));


dcl  (bit, null) builtin;


cpu_tag_from_idx:
     entry (P_amu_info_ptr, P_idx) returns (char (1));
	amu_info_ptr = P_amu_info_ptr;
	i = P_idx;
	return (fdump_process_table.array (i).cpu_name);

/* end cpu_tag_from_idx */

dbr_from_idx:
     entry (P_amu_info_ptr, P_idx) returns (fixed bin (24));
	amu_info_ptr = P_amu_info_ptr;
	i = P_idx;
	return (fdump_process_table.array (i).dbr);

idx_from_dbr:
     entry (P_amu_info_ptr, P_dbr) returns (fixed bin (17));
	amu_info_ptr = P_amu_info_ptr;
	search_dbr = P_dbr;
	do i = 0 to fdump_process_table.size;
	     if search_dbr = fdump_process_table.array (i).dbr then return (i);
	end;
	return (-1);				/* process not dumped */

/* end of idx_from_dbr */


cpu_tag_from_dbr:
     entry (P_amu_info_ptr, P_dbr) returns (char (1));
	amu_info_ptr = P_amu_info_ptr;
	search_dbr = P_dbr;
	do i = 0 to fdump_process_table.size;
	     if search_dbr = fdump_process_table.array (i).dbr then return (fdump_process_table.array (i).cpu_name);
	end;
	return ("");				/* returnn null if not found */
						/* end of cpu_tag_from_dbr */


per_process:
     entry (P_amu_info_ptr, P_segno) returns (bit (1));
	segment = P_segno;
	amu_info_ptr = P_amu_info_ptr;
	if segment <= hardcore_info.hcs_count then do;
	     if segment ^= hardcore_info.segno.prds then
		if segment ^= hardcore_info.segno.dseg then
		     if segment ^= hardcore_info.segno.pds then
			if segment ^= hardcore_info.segno.kst then
			     return ("0"b);
			else ;
		     else ;
		else ;
	     else ;
	     return ("1"b);
	     end;
	return ("1"b);

amu_return_val_$phcs_ok:
     entry () returns (bit (1));
dcl  rs_mode fixed bin (5);
dcl  execute bit (5) init ("00100"b);
dcl  phcsp ptr;
dcl  code fixed bin (35);
	call hcs_$initiate (">system_library_1", "phcs_", "", 0, 0, phcsp, code);
	if phcsp ^= null then do;			/* if can be initiated */
	     call hcs_$fs_get_mode (phcsp, rs_mode, code);/* check caller's access */
	     if code = 0 then
		if bit (rs_mode) & execute then /* if execute, then priv. process */ return ("1"b);
						/* user has access to phcs_, set switch */
	     end;
	return ("0"b);

/* end phcs_ok entry */

%page;
%include amu_info;
%page;
%include amu_fdump_info;
%page;
%include amu_hardcore_info;
%page;
%include amu_process_info;
%page;
%include amu_definitions;
     end amu_return_val_;
