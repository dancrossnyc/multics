/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_do_translation_:
     proc (P_amu_info_ptr, P_segno, P_buf_ptr, P_offset, P_range, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  P_amu_info_ptr ptr;
dcl  P_segno fixed bin;
dcl  P_offset fixed bin (18);
dcl  P_range fixed bin (18);
dcl  P_buf_ptr ptr;
dcl  P_code fixed bin (35);
dcl  P_seg_ptr ptr;
dcl  P_ret_ptr ptr;


dcl  error_table_$out_of_bounds fixed bin (35) ext;

dcl  old_proc_idx fixed bin;
dcl  segno fixed bin;
dcl  seg_base_ptr ptr;
dcl  offset fixed bin (18);
dcl  range fixed bin (18);
dcl  buf_ptr ptr;
dcl  dump_data_ptr ptr;
dcl  buf_size fixed bin (24);
dcl  buf char (buf_size) based (buf_ptr);
dcl  code fixed bin (35);
dcl  (range_1, range_2) fixed bin;
dcl  total_length fixed bin (24);
dcl  (hunt_entry, by_ptr_entry, ptr_entry) bit (1);
dcl  temp_ptr ptr;
dcl  bit_count fixed bin (24);
dcl  1 trans_space like translation;

dcl  amu_$dp_expand_to_ptr entry (ptr, fixed bin, ptr, fixed bin (24));
dcl  amu_$translate_get entry (ptr, fixed bin, ptr, fixed bin (35));
dcl  amu_$translate_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  amu_$fdump_translate_get_translation entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
dcl  amu_$return_val_per_process entry (ptr, fixed bin) returns (bit (1));
dcl  amu_$get_name_ptr_count entry (ptr, ptr, ptr, fixed bin (24));

dcl  (addr, addrel, baseno, baseptr, 
      divide, fixed, null, rel)	builtin;

dcl  (
     error_table_$seg_not_found,
     amu_et_$invalid_segno,
     amu_et_$no_translation
     ) fixed bin (35) ext;

%page;

	by_ptr_entry = "0"b;
	hunt_entry = "0"b;
	ptr_entry = "0"b;
	goto common_do;

amu_do_translation_$hunt:
     entry (P_amu_info_ptr, P_segno, P_buf_ptr, P_offset, P_range, P_code);

	hunt_entry = "1"b;
	ptr_entry = "0"b;
	by_ptr_entry = "0"b;
	goto common_do;

amu_do_translation_$hunt_ptr:
     entry (P_amu_info_ptr, P_seg_ptr, P_ret_ptr, P_code);
	hunt_entry = "1"b;
	ptr_entry = "1"b;
	by_ptr_entry = "1"b;
	goto common_do;

amu_do_translation_$ptr_given_segno:
     entry (P_amu_info_ptr, P_segno, P_ret_ptr, P_code);

/* Given a segno, returns the ptr of the segment. */

	hunt_entry = "1"b;
	ptr_entry = "1"b;
	by_ptr_entry = "0"b;
	amu_info_ptr = P_amu_info_ptr;
	P_code = 0;
	if P_segno >= 4096 then do;
	   P_code = amu_et_$invalid_segno;
	   return;
	   end;
          offset, range = 0;
	segno = P_segno;
	P_ret_ptr, buf_ptr = null();
	goto GET_IT;

amu_do_translation_$by_ptr:
     entry (P_amu_info_ptr, P_seg_ptr, P_range, P_buf_ptr, P_code);
	hunt_entry = "0"b;
	ptr_entry = "0"b;
	by_ptr_entry = "1"b;
	goto common_do;


common_do:
	amu_info_ptr = P_amu_info_ptr;
	P_code = 0;
	if ^by_ptr_entry then do;
	     if P_segno >= 4096 then do;
		P_code = amu_et_$invalid_segno;
		return;
	     end;
	end;
	else do;
	     if fixed(baseno(P_seg_ptr),17) >= 4096 then do;
		P_code = amu_et_$invalid_segno;
		return;
	     end;
	end;

	if ^ptr_entry then do;
	     range = P_range;
	     buf_ptr = P_buf_ptr;
	     if ^by_ptr_entry then do;
		segno = P_segno;
		offset = P_offset;
		end;
	     else do;
		segno = fixed (baseno (P_seg_ptr), 17);
		offset = fixed (rel (P_seg_ptr), 18);
		end;
	     end;
	else do;
	     range = 0;
	     segno = fixed (baseno (P_seg_ptr), 17);
	     offset = fixed (rel (P_seg_ptr), 18);
	     buf_ptr = null;
	     end;


GET_IT:	
	translation_ptr = addr (trans_space);
	old_proc_idx = -1;
	if ^amu_$return_val_per_process (amu_info_ptr, segno) then do;
	     old_proc_idx = amu_info.process_idx;
	     if amu_info.type ^= SAVED_PROC_TYPE then call amu_$fdump_mpt_change_idx (amu_info_ptr, 0);
	     end;

	call amu_$translate_get (amu_info_ptr, segno, translation_ptr, code);
	if code ^= 0 then do;
	     if code = amu_et_$no_translation then do;
		translation_ptr = addr (trans_space);
		seg_base_ptr = baseptr (segno);
		if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then do;
		     call amu_$fdump_translate_get_translation (amu_info_ptr, seg_base_ptr, translation_ptr, code);

		     if code ^= 0 then do;
			if hunt_entry then do;
			     call hunt_for_seg;
			     if code = 0 then goto add_trans;
			     end;

			if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
			P_code = code;
			return;
			end;
		     end;

		if amu_info.type = SAVED_PROC_TYPE then do;
		     if hunt_entry then do;
			call hunt_for_seg;
			if code = 0 then goto add_trans;
			end;
		     P_code = code;
		     return;
		     end;


		end;
add_trans:
	     call amu_$translate_add (amu_info_ptr, translation_ptr, segno, code);
	     if code = 0 then
		goto start_do;
	     else do;
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		P_code = code;
		return;
		end;
	     end;

start_do:
	if ^translation.two_part | translation.in_temp_seg then do;
	     if offset > translation.part1.lth then do;
		if ^ptr_entry then
		     P_range = 0;
		else P_ret_ptr = null ();
		P_code = error_table_$out_of_bounds;
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		return;
		end;
	     if ptr_entry then do;
		P_ret_ptr = addrel (translation.part1.ptr, offset);
		P_code = 0;
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		return;
		end;


	     if offset = translation.part1.lth then range = 1;
	     else if (offset + range) > translation.part1.lth then range = translation.part1.lth - offset;
	     buf_size = 4 * range;
	     dump_data_ptr = addrel (translation.part1.ptr, offset);
	     buf = dump_data_ptr -> buf;
	     P_code = 0;
	     if ^ptr_entry then P_range = range;
	     if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
	     return;
	     end;
	else do;
	     total_length = (translation.part1.lth + translation.part2.lth);
	     if offset > total_length then do;
		if ^ptr_entry then
		     P_range = 0;
		else P_ret_ptr = null ();
		P_code = error_table_$out_of_bounds;
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		return;
		end;
	     if ptr_entry then do;
		if offset > translation.part1.lth then
		     P_ret_ptr = addrel (translation.part2.ptr, (offset - translation.part1.lth));
		else P_ret_ptr = addrel (translation.part1.ptr, offset);
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		P_code = 0;
		return;
		end;


	     if offset = total_length then range = 1;
	     else if (offset + range) > total_length then range = total_length - offset;
	     if offset <= translation.part1.lth then do;
		if (offset + range) <= translation.part1.lth then do;
		     buf_size = 4 * range;
		     dump_data_ptr = addrel (translation.part1.ptr, offset);
		     buf = dump_data_ptr -> buf;
		     P_code = 0;
		     P_range = range;
		     if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		     return;
		     end;
		else do;
		     range_1 = translation.part1.lth - offset;
		     range_2 = range - range_1;
		     buf_size = range_1 * 4;
		     dump_data_ptr = addrel (translation.part1.ptr, offset);
		     buf = dump_data_ptr -> buf;
		     buf_size = range_2 * 4;
		     buf_ptr = addrel (buf_ptr, range_1);
		     dump_data_ptr = translation.part2.ptr;
		     buf = dump_data_ptr -> buf;
		     P_code = 0;
		     P_range = range;
		     if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		     return;
		     end;
		end;
	     else do;
		offset = offset - translation.part1.lth;
		buf_size = range * 4;
		buf = addrel (translation.part2.ptr, offset) -> buf;
		P_code = 0;
		P_range = range;
		if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
		return;
		end;
	     end;
	if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);

hunt_for_seg:
     proc;

	code = 0;
	translation_ptr = addr (trans_space);
	translation.segno = segno;
	translation.flags = ""b;
	translation.part2.ptr = null ();
	translation.part2.lth = 0;
	if amu_info.type = FDUMP_PROCESS_TYPE then
	     call amu_$get_name_ptr_count (amu_info_ptr, baseptr (segno), temp_ptr, bit_count);
	else call amu_$dp_expand_to_ptr (amu_info_ptr, (segno), temp_ptr, bit_count);
	if temp_ptr = null () then do;
	     code = error_table_$seg_not_found;
	     return;
	     end;
	translation.part1.ptr = temp_ptr;
	translation.part1.lth = divide (bit_count, 36, 19);
	translation.flags.in_perm_seg = "1"b;
	return;
     end hunt_for_seg;
%page;
%include amu_translation;
%page;
%include amu_info;


     end amu_do_translation_;




