/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_deadproc_:
     proc;

/*  Modified August 84 by B. Braun to correctly analyze dead processes.
    Modified 10 Jan 85 by B. Braun to add entry $name_to_segno.	
    Modified 11 Jan 85 by B. Braun to
      1) Provide more informative error messages in $init_deadproc and $create_uid_hash.
      2) initialize and correctly assign the release_id in old_uid_table.sys_release.
      3) Get rid of double quotes of the pdir name in the id string.
    Modified 12 Jan 85 by B. Braun to call amu_$kst_util_expand_uid_path and delete the internal proc expand_it.
    Modified 13 Jan 85 by B. Braun to make the uid_hash_table per invocation of selecting the 
      deadproc so users don't write into uid_hash_table in the pdir.
    Modified 18 Jan 85 by B. Braun to store short names of level 1 dirs in the hash table
      via a call to amu_$get_l1dir_shortname.
    Modified 24 Jan 85 by B. Braun to $segno_to_name to inititate P_name to "CANNOT-GET-PATH". 
    Modified 02 Feb 85 by B. Braun to have the dp_dir and dp_name set in $init_deadproc and NOT in $create_uid_hash.
*/

/* parameters */

dcl P_amu_info_ptr			ptr;
dcl P_bt				fixed bin (24);
dcl P_caller			char(*);
dcl P_code			fixed bin (35);
dcl P_dir				char (168);
dcl P_name			char (*);
dcl P_ptr				ptr;
dcl P_segno			fixed bin;

/* External Entries */

dcl amu_$create_translation		entry (ptr, fixed bin);
dcl amu_$do_translation_segno	entry (ptr, fixed bin, ptr, fixed bin (35));
dcl amu_$error_for_caller		entry options (variable);
dcl amu_$hardcore_info_deadproc	entry (char(*), ptr, char (168), fixed bin (35));
dcl amu_$kst_util_expand_uid_path	entry (ptr, (16) bit (36) aligned, char(*), fixed bin(35));
dcl amu_$kst_util_segno_to_uid	entry (ptr, fixed bin, bit (36) aligned, fixed bin (35));
dcl amu_$kst_util_segno_to_uid_path	entry (ptr, fixed bin, (16) bit (36) aligned, fixed bin (35));
dcl amu_$kst_util_uid_to_kstep	entry (ptr, bit (36) aligned, fixed bin (18), fixed bin (35));
dcl  amu_$temp_seg_get		entry (pointer, char (*), pointer, pointer);
dcl amu_$temp_seg_release_all		entry (ptr);
dcl amu_$terminate_translation          entry (ptr);
dcl amu_$translate_allocate		entry (ptr, fixed bin);
dcl amu_$translate_add		entry (ptr, ptr, fixed bin, fixed bin (35));
dcl amu_$translate_get		entry (ptr, fixed bin, ptr, fixed bin (35));
dcl cv_oct_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35));
dcl get_system_free_area_		entry returns (ptr);
dcl get_temp_segment_		entry (char (*), ptr, fixed bin (35));
dcl hash_$opt_size			entry (fixed bin) returns (fixed bin);
dcl hcs_$make_seg			entry (char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35));
dcl hcs_$star_			entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl hcs_$status_long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl initiate_file_			entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl ioa_				entry () options (variable);
dcl iox_$attach_name		entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl iox_$close			entry (ptr, fixed bin (35));
dcl iox_$detach_iocb		entry (ptr, fixed bin (35));
dcl iox_$get_line			entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl iox_$open			entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl pathname_			entry (char(*), char(*)) returns(char(168));
dcl phcs_$initiate			entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl phcs_$ring_0_peek		entry (ptr, ptr, fixed bin);
dcl phcs_$terminate_noname		entry (ptr, fixed bin (35));
dcl release_temp_segment_		entry (char (*), ptr, fixed bin (35));
dcl ring0_get_$segptr		entry (char (*), char (*), ptr, fixed bin (35));
dcl terminate_file_		entry (ptr, fixed bin(24), bit(*), fixed bin(35));

/* External Static  */

dcl (
     amu_et_$make_uid_hash,
     amu_et_$no_amu_ptr,
     amu_et_$no_kst,
     amu_et_$no_uid_hash,
     amu_et_$no_sl1_in_kst,
     amu_et_$no_sl1_uid,
     error_table_$action_not_performed,
     error_table_$end_of_info,
     error_table_$noentry
    )				fixed bin (35) ext static;

/* Automatic */

dcl af_lth			fixed bin (21);
dcl af_ptr			ptr;
dcl af_sw				bit(1);
dcl attach_desc			char (200);
dcl bitcount			fixed bin (24);
dcl code				fixed bin (35);
dcl cur_state			char (1);
dcl deadproc_dir			char (168);
dcl deadproc_name			char (32);
dcl dlen				fixed bin;
dcl dp_dir_path			char(168);
dcl dseg_ptr			ptr;
dcl expand_path			char (168);
dcl i				fixed bin;
dcl ignore			fixed bin(24);
dcl iocbp				ptr;
dcl 1 info,
      2 char_uid char (12),
      2 name char (32),
      2 newline char(1);
dcl info_ptr			ptr;
dcl kste_offset			fixed bin (18);
dcl look_kst			bit (1);
dcl n_read			fixed bin (21);
dcl old_uid			fixed bin (35);
dcl (rzdp, rzdsp)			ptr;
dcl sl1_uid			bit(36) aligned;
dcl system_area_ptr			ptr;
dcl t_kst_path			char(168);
dcl temp_dir			char (168);
dcl temp_name			char (32);
dcl temp_ptr			ptr;
dcl 1 temp_translation		like translation;
dcl temp_uid_table_ptr		ptr;
dcl 1 tsdw			like sdw aligned;
dcl uid_basep			ptr;
dcl uid_path (16)			bit (36) aligned;

/* Based */

dcl af_str			char (af_lth) varying based (af_ptr);
dcl based_uid			bit (36) aligned based (uid_basep);
dcl data				char (n_read) based (info_ptr);

/* Areas */

dcl system_area			area based (system_area_ptr);

/* Internal Static */

dcl who_ami			char (32) init ("amu_deadproc_") int static options(constant);

/* Builtins */

dcl (addr, addrel, after,
     baseno, binary, convert,
     divide, fixed, hbound, index,
     lbound, max, null, ptr,
     reverse, rtrim, size, sum,
     substr, unspec)		builtin;

/* Conditions */

dcl cleanup			condition;
%page;
/*****************************************************************************/

amu_deadproc_$create_uid_hash: entry(P_dir, P_code);

    amu_info_ptr, status_ptr, kstp, old_uid_table_ptr = null ();
    t_kst_path = "";
    code = 0;

    on cleanup begin;
       if status_ptr ^= null() then free status_branch in (amu_area);
       if kstp ^= null() then call terminate_file_(kstp, ignore, "0010"b, (0));
       if old_uid_table_ptr ^= null() then call terminate_file_(old_uid_table_ptr, ignore, "0010"b, (0));
       if amu_info_ptr ^= null () then call amu_$terminate_translation (amu_info_ptr);
       end;

    call expand_pathname_ (P_dir, deadproc_dir, deadproc_name, code);
    if code ^= 0 then goto END_CREATE;

    dp_dir_path = pathname_ (deadproc_dir, deadproc_name);
    t_kst_path = pathname_ (dp_dir_path, "kst");
    call initiate_file_ (dp_dir_path, "kst", R_ACCESS, kstp, (0), code);
    if kstp = null () then do;
       code = amu_et_$no_kst;
       goto END_CREATE;
       end;

    call amu_$create_translation (amu_info_ptr,SAVED_PROC_TYPE);
    if amu_info_ptr = null () then do;
       code = amu_et_$no_amu_ptr;
       goto END_CREATE;
       end;

    allocate status_branch in (amu_area) set (status_ptr);
    call hcs_$status_long (">", "sl1", 0, status_ptr, null (), code);
    if code ^= 0 then do;
       code = amu_et_$no_sl1_uid;
       goto CREATE_UID_ERR;
       end;

    sl1_uid = status_branch.long.uid;

    call hcs_$make_seg (dp_dir_path, "uid_hash_table", "", RW_ACCESS_BIN, old_uid_table_ptr, code);
    if code ^= 0 then do;
       code = amu_et_$make_uid_hash;
       goto CREATE_UID_ERR;
       end;

    allocate_uid_hash = hash_$opt_size (max((kst.highseg - kst.lowseg), divide(fixed("7777"b3,17),3,17)));
    old_uid_table.max_uid_ind = allocate_uid_hash;
    old_uid_table.hash_factor = 3;
    old_uid_table.uid_array (*).uid = ""b;
    old_uid_table.uid_array (*).seg_name,
       old_uid_table.dp_name,
       old_uid_table.dp_dir,
       old_uid_table.sys_release = "";

    call add_sl1_segs_to_hash (sl1_uid, code);
    if code ^= 0 then  goto CREATE_UID_ERR;

CREATE_UID_ERR:

    if status_ptr ^= null () then free status_branch in (amu_area);
    if kstp ^= null() then call terminate_file_(kstp, ignore, "0010"b, (0));
    if old_uid_table_ptr ^= null() then call terminate_file_(old_uid_table_ptr, ignore, "0010"b, (0));
    if amu_info_ptr ^= null () then call amu_$terminate_translation (amu_info_ptr);

END_CREATE:
    P_code = code;    
    return;
%page;
/*****************************************************************************/

amu_deadproc_$cur_dp:
	entry (P_amu_info_ptr);

	cur_state = ">";
	af_sw = "0"b;
	goto COMMON_NAME;	

/*****************************************************************************/

amu_deadproc_$name_dp:
	entry (P_amu_info_ptr);
	cur_state = " ";
	af_sw = "0"b;
	goto COMMON_NAME;

/*****************************************************************************/

amu_deadproc_$name_dp_af:
	entry (P_amu_info_ptr, af_ptr, af_lth);

	cur_state = " ";
	af_sw = "1"b;

COMMON_NAME:

	amu_info_ptr = P_amu_info_ptr;
	old_uid_table_ptr = amu_info.fdump_info_ptr;
	if af_sw then af_str =  rtrim(old_uid_table.dp_dir) || ">" || rtrim(old_uid_table.dp_name);
	else call ioa_ ("^1a DP ""^a"" from directory ^a Sys-Release ^a",cur_state,
	     old_uid_table.dp_name,old_uid_table.dp_dir,
	     old_uid_table.sys_release);
	return;
%page;
/*****************************************************************************/

amu_deadproc_$init_deadproc:
     entry (P_caller, P_dir, P_amu_info_ptr, P_code);

     call amu_$create_translation (amu_info_ptr, SAVED_PROC_TYPE);
     if amu_info_ptr = null () then do;
        P_code = error_table_$action_not_performed;
        call amu_$error_for_caller (amu_info_ptr, P_code, P_caller, "Unable to create the amu_ translation for ^a.", P_dir);
        return;
        end;
     P_amu_info_ptr = amu_info_ptr;
    amu_info.process_info_ptr = null();
    amu_info.fdump_info_ptr = null();
    amu_info.copy_chain = null();
    old_uid_table_ptr = null();
    dseg_ptr, iocbp, temp_ptr, temp_uid_table_ptr = null();

    on cleanup begin;   
       if iocbp ^= null() then do;
          call iox_$close (iocbp, (0));
          call iox_$detach_iocb (iocbp, (0));
	end;
       if temp_uid_table_ptr ^= null() then call terminate_file_(temp_uid_table_ptr, (0), "0010"b, (0));
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
     end;

    allocate process_info in (amu_area) set (amu_info.process_info_ptr);
    call amu_$translate_allocate (amu_info_ptr, 25);

    dp_dir_path = P_dir;
    call expand_pathname_ (P_dir, deadproc_dir, deadproc_name, code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Expanding the pathname ^a.", P_dir);
       P_code = code;
       return;
       end;
    call amu_$hardcore_info_deadproc (P_caller, amu_info_ptr, dp_dir_path, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;
    

    kstp = process_info.kst.local_ptr; 

    /* setup uid_hash_table */

    call initiate_file_ (dp_dir_path, "uid_hash_table", R_ACCESS, temp_uid_table_ptr, (0), code);    
    if temp_uid_table_ptr = null () then do;
       code = amu_et_$no_uid_hash;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Initiating ^a.", pathname_(dp_dir_path, "uid_hash_table"));
       P_code = code;
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto END_INIT;
       end;

    call amu_$temp_seg_get (amu_info_ptr, "DP " || rtrim(deadproc_name), amu_info.copy_chain, old_uid_table_ptr);
    
    /* copy old_uid_hash contents to the user process area. */

    allocate_uid_hash =  temp_uid_table_ptr -> old_uid_table.max_uid_ind;
    old_uid_table_ptr -> old_uid_table = temp_uid_table_ptr -> old_uid_table;

    amu_info.fdump_info_ptr = old_uid_table_ptr;

    /* set name and dir in old_uid_table */
    old_uid_table.dp_dir = deadproc_dir;
    old_uid_table.dp_name = deadproc_name;

    info_ptr = addr (info);
    uid_basep = addr (old_uid);
    attach_desc = "vfile_ " || rtrim (dp_dir_path) || ">pdir_info";
    call iox_$attach_name ("amu_dp_sw", iocbp, attach_desc, null (), code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Attaching switch ^a to read ^a.", 
			    attach_desc, pathname_(dp_dir_path, "pdir_info"));
       P_code = code;
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto END_INIT;
       end;

    call iox_$open (iocbp, 1, "0"b, code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Reading ^a.", pathname_(dp_dir_path, "pdir_info"));
       P_code = code;
       call iox_$detach_iocb (iocbp, code);
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto END_INIT;
       end;

    /* First line is the system release_id */
    call iox_$get_line (iocbp, info_ptr, 45, n_read, code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Reading ^a.", pathname_(dp_dir_path, "pdir_info"));
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto ERROR;
       end;

    old_uid_table.sys_release = rtrim (info.char_uid);
    translation_ptr = addr(temp_translation);
    /* get dseg ptr */
    call amu_$do_translation_segno(amu_info_ptr, 0, dseg_ptr, code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Getting dseg ptr ^a.", pathname_(dp_dir_path, "dseg"));
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto ERROR;
       end;
    
    /* get next line to begin loop */

    call iox_$get_line (iocbp, info_ptr, 45, n_read, code);
    if code ^= 0 then do;
       call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Reading ^a.", pathname_(dp_dir_path, "pdir_info"));
       if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
       goto ERROR;
       end;

    do while (code = 0);
       old_uid = cv_oct_check_ (info.char_uid, code);
       temp_name = info.name;
       call initiate_file_ (dp_dir_path, temp_name, R_ACCESS, temp_ptr, bitcount, code);
       if temp_ptr = null () then do;
          call ioa_ ("Cannot initiate ^a", pathname_(dp_dir_path, temp_name));
	code = 0;
	goto NEXT;
          end;
       call check_name (temp_name, temp_ptr, look_kst);
       if look_kst then do;
	call amu_$kst_util_uid_to_kstep (kstp, based_uid, kste_offset, code);
	if code ^= 0 then do;
	   if code = error_table_$noentry then do;
	      call ioa_ ("Cannot translate ^a with uid ^a.", temp_name, char_uid);
	      code = 0;
	      end;
	  else do; 
	     call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Unable to get the kst entry for ^a with uid ^a.",
				  temp_name, char_uid);
	     code = 0;
	     end;
	  end;
	else do;
	   kstep = addrel (kstp, kste_offset);
	   call add_hash (old_uid, (temp_name),"1"b);
	   call add_trans (temp_ptr, (kste.segno), dseg_ptr, code);
	   if code ^= 0 then do;
                call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Unable to add ^a (segno ^o) to uid_hash_table.",
				   rtrim(temp_name), kste.segno);
	      if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
	      goto ERROR;
	      end;
	   end;
	end;
NEXT:  
       call iox_$get_line (iocbp, info_ptr, 45, n_read, code);
       if (code ^= 0) & (code ^= error_table_$end_of_info) then do;
	call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Getting next line of ^a.",
			       pathname_(dp_dir_path, "pdir_info"));
          if amu_info_ptr ^= null() then call amu_deadproc_$term_deadproc (amu_info_ptr, (0));
          goto ERROR;
	end;
       end;

    code = 0;
    
    call get_stack_base(dp_dir_path, dseg_ptr, code);
ERROR:
    P_code = code;
    call iox_$close (iocbp, (0));
    call iox_$detach_iocb (iocbp, (0));

END_INIT:
    if temp_uid_table_ptr ^= null() then call terminate_file_(temp_uid_table_ptr, (0), "0010"b, (0));
    return;
%page;	
/*****************************************************************************/

amu_deadproc_$segno_to_name:
     entry (P_amu_info_ptr, P_segno, P_name, P_code);

/*  Given a segment number, finds the name of the segment by comparing the uid
    of the segment number with the uids in the kst until a match is found.

    P_amu_info_ptr     pointer to amu_info structure (input).
    P_segno	   segment number (input).
    P_name	   name of the segment (output).
    P_code	   standard error code (output).
*/
    amu_info_ptr = P_amu_info_ptr;
    P_name, expand_path = "CANNOT-GET-PATH";
    P_code, code = 0;

    /* first check to see if one of those "special segnos" */
    if P_segno = hardcore_info.stack_0 then do;
       P_name = "stack_0";
       goto RET_NAME;
       end;

    old_uid_table_ptr = amu_info.fdump_info_ptr;
    kstp = process_info.kst.local_ptr;
    uid_basep = addr (old_uid);

    call amu_$kst_util_segno_to_uid (kstp, P_segno, based_uid, code);  /* get the uid */
    if code ^= 0 then goto RET_NAME;
    call get_name_from_hash (based_uid, expand_path);	/* see if its already in the hash table		*/
    if expand_path = "" then do;			/* Not in the hash table			*/
       call amu_$kst_util_segno_to_uid_path (kstp, P_segno, uid_path, code);
       if code ^= 0 then goto RET_NAME;
       call amu_$kst_util_expand_uid_path (kstp, uid_path, expand_path, code);
       if code ^= 0 then goto RET_NAME;
       else do;
          call add_hash (old_uid, expand_path, "0"b);
	end;
       end;

RET_NAME: 
    P_name = expand_path;
    P_code = code;
    return;
%page;	
/*****************************************************************************/

amu_deadproc_$name_to_segno:
     entry (P_amu_info_ptr, P_name,  P_segno, P_code);

/*  Given a segment name, finds the segment number by looping through the
    uid_hash_table until finding the uid which corressponds with the given
    name. Then, we loop through the kst matching on uids to get the segment 
    number.

    P_amu_info_ptr     pointer to amu_info structure (input).
    P_name	   name of the segment (input).
    P_segno	   segment number (output).
    P_code	   standard error code (output).
*/
dcl no_match bit(1);
dcl segno fixed bin;
dcl match_name char(256) var;

    amu_info_ptr = P_amu_info_ptr;
    P_segno, segno = -1;
    P_code, code = 0;

    old_uid_table_ptr = amu_info.fdump_info_ptr;
    kstp = process_info.kst.local_ptr;
    uid_basep = addr (old_uid);
    match_name = rtrim(P_name);
    if index (match_name, ">" ) > 0 then 		/* In this case match on entryname only		*/
       match_name = reverse(substr(reverse(match_name), 1, index(reverse(match_name), ">") -1));
    
    /* Loop through the uid_hash_table until a match on the names is found. */

    no_match = "1"b;
    do i = 0 to old_uid_table.max_uid_ind while (no_match);
       if index(old_uid_table.uid_array (i).seg_name, match_name) > 0 then do;
          no_match = "0"b;
	based_uid = old_uid_table.uid_array (i).uid;
	end;
       end;

    if no_match then do;
       code = error_table_$noentry;
       goto RET_SEGNO;
       end;

    /* Now, with the uid get its kste which contains the segno. */

    kste_offset = 0;
    call amu_$kst_util_uid_to_kstep (kstp, based_uid, kste_offset, code); 
    kstep = addrel (kstp, kste_offset);
    if code = 0 then segno = kste.segno;

RET_SEGNO: 
    P_segno = segno;
    P_code = code;
    return;
%page;
/*****************************************************************************/

amu_deadproc_$expand_to_ptr:
     entry (P_amu_info_ptr, P_segno, P_ptr, P_bt);
	amu_info_ptr = P_amu_info_ptr;
	old_uid_table_ptr = amu_info.fdump_info_ptr;
	P_ptr = null ();
	P_bt = 0;
	kstp = process_info.kst.local_ptr;
	call amu_$kst_util_segno_to_uid_path (kstp, P_segno, uid_path, code);
	if code ^= 0 then return;

          call amu_$kst_util_expand_uid_path (kstp, uid_path, expand_path, code);
	if code ^= 0 then return;

	call expand_pathname_ (expand_path, temp_dir, temp_name, code);
	if code ^= 0 then return;
	call initiate_file_ (temp_dir, temp_name, R_ACCESS, temp_ptr, bitcount, code);
	P_ptr = temp_ptr;
	P_bt = bitcount;
	return;
%page;
/*****************************************************************************/

amu_deadproc_$term_deadproc:
     entry (P_amu_info_ptr, P_code);

    amu_info_ptr = P_amu_info_ptr;		/* terminate all translated segs */
    if amu_info.translation_table_ptr ^= null then do;
       do i = lbound (translation_table.array, 1) to hbound (translation_table.array, 1);
	if (translation_table.used (i) = "1"b) & (translation_table.array (i).flags.in_dp_dir) then do;
	   temp_ptr = translation_table.array (i).part1.ptr;
	   if temp_ptr ^= null() then call terminate_file_(temp_ptr, (0), "0010"b, (0));
	   end;
	end;
       free translation_table in (amu_area);
       amu_info.translation_table_ptr = null ();
       end;

    if amu_info.process_info_ptr ^= null () then do;
       free process_info in (amu_area);
       amu_info.process_info_ptr = null ();
       end;	
				/* release all temp segs known in copy_chain */
    call amu_$temp_seg_release_all (amu_info.copy_chain);
    return;
%page;
/*****************************************************************************/

add_hash:
     proc (fixed_uid, name,pd_sw);
dcl fixed_uid fixed bin (35);
dcl in_uid bit (36);
dcl name char (168);
dcl ind fixed bin;
dcl pd_sw bit (1);
dcl short_path char(168);
dcl code fixed bin(35);
dcl amu_$get_l1dir_shortname  entry(char(*), char(*), fixed bin(35));  

    short_path = "";
    code = 0;
    ind = hash_uid (fixed_uid);
    in_uid = unspec (fixed_uid);
    old_uidep = addr (old_uid_table.uid_array (ind));
    if old_uide.uid = ""b then goto FILL_TABLE;
    else do;
       if old_uide.uid = in_uid then goto END_ADD_HASH;
       do ind = (ind + 1) to old_uid_table.max_uid_ind;     /* check it sequentially			*/
	old_uidep = addr (old_uid_table.uid_array (ind));
	if old_uide.uid = in_uid then goto END_ADD_HASH;
	if old_uide.uid = ""b then goto FILL_TABLE;
	end;
       end;

FILL_TABLE:
    old_uide.uid = in_uid;
    if pd_sw then old_uide.seg_name = "[pd]>" || rtrim (name);
    else do;
       call amu_$get_l1dir_shortname (name, short_path, code);
       if code = 0 then old_uide.seg_name = short_path;
       else  old_uide.seg_name = rtrim (name);
       end;

END_ADD_HASH:
    return;

end add_hash;
%page;
/*****************************************************************************/

add_sl1_segs_to_hash:   proc (sl1_uid, code);

dcl sl1_uid bit(36) aligned;
dcl code fixed bin(35);

dcl seg_ind fixed bin;
dcl got_one bit(1);

    got_one = "0"b;
    do seg_ind = kst.highseg to kst.lowseg by -1;
       code = 0;
       call amu_$kst_util_segno_to_uid_path (kstp, seg_ind, uid_path, code);
       if code ^= 0 then goto NEXT_ONE;
       if uid_path (2) = sl1_uid then do;
          call amu_$kst_util_expand_uid_path (kstp, uid_path, expand_path, code);
          if code ^= 0 then goto END_ADD_SL1;
          got_one = "1"b;
	call add_hash (fixed(kst_entry(seg_ind).uid,35), expand_path, "0"b);
	end;
NEXT_ONE:
       end;    /* loop */
END_ADD_SL1:
  
    if ^(got_one) then code = amu_et_$no_sl1_in_kst;
    else code = 0;

end add_sl1_segs_to_hash;
%page;
/*****************************************************************************/

add_trans:
     proc (seg_ptr, segnum, dseg_ptr, code);

dcl code fixed bin(35);
dcl  segnum fixed bin;
dcl  seg_ptr ptr;
dcl sdwp ptr;
dcl bound fixed bin(19);
dcl dseg_ptr ptr;

          code = 0;
				/* get a pointer to the SDW for the segment */
          sdwp = addrel(dseg_ptr, 2*segnum);
	
          bound = (binary (sdwp->sdw.bound, 14) +1) * 16; /* get number of words */

	translation.segno = segnum;
	translation.flags = "0"b;
	translation.flags.in_perm_seg = "1"b;
	translation.flags.in_dp_dir = "1"b;
	translation.part1.ptr = seg_ptr;
	translation.part1.lth = bound;
	translation.part2.ptr = null ();
	translation.part2.lth = 0;
	call amu_$translate_add (amu_info_ptr, translation_ptr, (translation.segno), code);
	if code ^= 0 then do;
	     call ioa_ ("translation error segment ^o ^a", segnum, data);
	     call amu_$translate_get (amu_info_ptr,segnum,translation_ptr,code);
	     if code ^= 0 then do;
		call ioa_ ("No trans (get trans)");
		return;
	     end;
	     call ioa_ ("translation is: segno ^o ^[two_part^1x]^[in_dump^x]^[in_temp_seg^x]^[in_perm_seg^x]^[in_dp_dir]",
		     translation.segno, translation.two_part,translation.in_dump,translation.in_temp_seg,
		     translation.in_perm_seg,translation.in_dp_dir);
	     call ioa_ ("Part1.ptr = ^p lth = ^o (oct)",translation.part1.ptr,translation.part1.lth);
	     call ioa_ ("Part2.ptr = ^p lth = ^o (oct)",translation.part2.ptr,translation.part2.lth);
	     return;
	     end;
     end add_trans;
%page;
/*****************************************************************************/

check_name:
     proc (name, seg_ptr, look);
dcl  name char (32);
dcl  seg_ptr ptr;
dcl  look bit (1);

	look = "0"b;
	if name = "dseg" then return;
	if name = "pds" then return;
	if name = "prds" then return;
	if name = "kst" then return;
	if name = "stack_0" then return;
	look = "1"b;
     end check_name;
%page;
/*****************************************************************************/

get_name_from_hash:
     proc (in_uid, segname);

dcl  in_uid bit (36) aligned;
dcl  segname char (*);
dcl  ind fixed bin;

    ind = hash_uid (fixed (in_uid, 35));
    old_uidep = addr (old_uid_table.uid_array (ind));
    if old_uide.uid = in_uid then do;
       segname = old_uide.seg_name;
       return;
       end;
    else if old_uide.uid ^= ""b then do;
       do ind = (ind + 1) to old_uid_table.max_uid_ind while (old_uide.uid ^= ""b);
	old_uidep = addr (old_uid_table.uid_array (ind));
	if old_uide.uid = in_uid then do;
	   segname = old_uide.seg_name;
	   return;
	   end;
	end;
       end;
    segname = "";
    return;
end get_name_from_hash;
%page;
/*****************************************************************************/

get_stack_base: proc (dirname, dseg_ptr, code);

dcl dirname char(*);
dcl code fixed bin (35);
dcl dseg_ptr ptr;
dcl stackbase  char(32);
dcl stackno fixed bin;
dcl sb_ptr ptr;

    code = 0;
    star_entry_ptr = null ();
    star_names_ptr = null ();
    sb_ptr = null();
    system_area_ptr = get_system_free_area_();
    on condition (cleanup) begin;
       if star_names_ptr ^= null () then free star_names in (system_area);
       if star_entry_ptr ^= null () then free star_entries in (system_area);
       end;

    call hcs_$star_ (dirname, "stack_base_*", star_BRANCHES_ONLY, system_area_ptr, star_entry_count, star_entry_ptr, 
		star_names_ptr, code);

    if code ^= 0 | star_entry_count = 0 then do;
       call amu_$error_for_caller (amu_info_ptr, 0, P_caller, "Unable to determine the stack base.");
       code = error_table_$action_not_performed;
       goto END_STACK_BASE;
       end;

    stackbase = "";
    stackbase = after(star_names(1), "stack_base_");
    if stackbase ^= "" then do;
       /* get stack base seg number */
       stackno = convert(stackno, rtrim(stackbase));

       hardcore_info.segno.stack_0 = stackno;
       call initiate_file_ (dirname, "stack_0", R_ACCESS, sb_ptr, (0), code);
       if sb_ptr = null() then do;
          call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Initiating ^a.", pathname_(dirname, "stack_0"));
	code = 0;  /* non-fatal error */
	goto END_STACK_BASE;
	end;
       call add_trans (sb_ptr, stackno, dseg_ptr, code);
       if code ^= 0 then do;
          call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Unable to add ^a (segno ^o) to uid_hash_table.", 
			       pathname_(dirname, "stack_0"), stackno);
          code = 0;
          goto END_STACK_BASE;
          end;
       end;
END_STACK_BASE:
    if star_names_ptr ^= null () then free star_names in (system_area);
    if star_entry_ptr ^= null () then free star_entries in (system_area);
    revert cleanup;

end get_stack_base;
%page;
/*****************************************************************************/

hash_uid:
     proc (in_uid) returns (fixed bin);
dcl  in_uid fixed bin (35);
dcl  rev_uid bit (12);
dcl  hash_ind fixed bin;
	rev_uid = reverse (substr (unspec (in_uid), 25, 12));
	hash_ind = divide (fixed (rev_uid, 17), hash_factor, 17);
	if hash_ind > old_uid_table.max_uid_ind then do;
	     call ioa_ ("hash_ind = ^d  old_uid_table.max_uid_ind = ^d (dec) uid = ^12.3b", 
		     hash_ind, old_uid_table.max_uid_ind, unspec(in_uid));
	end;
	return (hash_ind);
     end hash_uid;
%page;%include access_mode_values;
%page;%include amu_hardcore_info;
%page;%include amu_info;
%page;%include amu_old_uid_table;
%page;%include amu_process_info;
%page;%include amu_translation;
%page;%include dir_entry;
%page;%include dir_header;
%page;%include dir_name;
%page;%include kst;
%page;%include sdw;
%page;%include star_structures;
%page;%include status_structures;


     end amu_deadproc_;
