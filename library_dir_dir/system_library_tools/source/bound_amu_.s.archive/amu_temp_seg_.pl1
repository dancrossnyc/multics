/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_temp_seg_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* This procedure is used to allocate and release temp segments associated with
   various amu_ data structures. These temp segments are kept track of in a chain
   which is linked forward only.
*/

dcl  (
     P_amu_info_ptr pointer,
     P_copy_block_ptr pointer,
     P_caller char (*),
     P_seg_ptr pointer
     ) parameter;

dcl  code fixed bin (35);
dcl  copy_block_ptr pointer;
dcl  next_block pointer;

dcl  1 copy_block aligned based (copy_block_ptr),
       2 next pointer,
       2 seg_ptr pointer,
       2 area_ptr pointer,
       2 caller_name char (32) unaligned;

dcl  system_area_ptr pointer;
dcl  system_area area based (system_area_ptr);

dcl  amu_error_ entry options (variable);
dcl  get_temp_segment_ entry (char (*), pointer, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), pointer, fixed bin (35));

dcl  null builtin;

%page;

amu_temp_seg_$get:
     entry (P_amu_info_ptr, P_caller, P_copy_block_ptr, P_seg_ptr);

	amu_info_ptr = P_amu_info_ptr;
	allocate copy_block in (amu_area) set (copy_block_ptr);

	copy_block.area_ptr = amu_info.area_ptr;
	copy_block.caller_name = P_caller;

TRY_TO_GET_TEMP_SEGMENT:
	call get_temp_segment_ (copy_block.caller_name, copy_block.seg_ptr, code);

	if code ^= 0 then do;
	     call amu_error_ (amu_info_ptr, code, "Try terminating something and type start.");
	     goto TRY_TO_GET_TEMP_SEGMENT;
	     end;

	copy_block.next = P_copy_block_ptr;		/* thread it onto the chain */
	P_copy_block_ptr = copy_block_ptr;

	P_seg_ptr = copy_block.seg_ptr;

	return;					/* all done for this entrypoint */

%page;

amu_temp_seg_$release_all:
     entry (P_copy_block_ptr);

/* This entry is used to release all the copy blocks in a chain. */

	do copy_block_ptr = P_copy_block_ptr repeat (next_block) while (copy_block_ptr ^= null ());

	     call release_temp_segment_ (copy_block.caller_name, copy_block.seg_ptr, (0));

	     system_area_ptr = copy_block.area_ptr;
	     next_block = copy_block.next;

	     free copy_block in (system_area);
	end;

	P_copy_block_ptr = null ();

	return;

%page;
%include amu_info;

     end amu_temp_seg_;
