/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-12-09,Farley), approve(87-07-09,MCR7746),
     audit(87-07-22,Fawcett), install(87-07-28,MR12.1-1049):
     Copied external module get_ast_name_ into an internal proc called
     get_ast_name, so that the current length of an sstnt.name could be
     verified before copying the name.
  2) change(87-01-16,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-22,Fawcett), install(87-07-28,MR12.1-1049):
     Check translation_table for replaced segment (via "replace" request) and
     return the new path instead of the old path.
  3) change(87-06-22,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-22,Fawcett), install(87-07-28,MR12.1-1049):
     Check for screech names on bound_xxx library names and call new
     internal procedure "get_vtoc_pathname" to locate real library name.
                                                   END HISTORY COMMENTS */


amu_get_name_: proc (P_amu_info_ptr, P_segptr) returns (char (*));

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Modified 830830 to keep from scanning the static and symbol sections for the
   offrel, thereby allways searching just text sections to resolve component
   names... -E. A. Ranzenbach

   Modified 12/9/83 by B. Braun to add entrypoint for_structure. This allosw "stack -as" to resolve names porperly.

   Modified 09/28/84 by B. Braun to get rid of error messages in get_kstp routine.
   Modified 10/04/84 by R. A. Fawcett to look at the slt directly for hardcore sega and look for others seg numbers when there is no kst_seg.
   Modified 12/12/84 by B. Braun to fix bug in kst_name which caused it to ALWAYS fail.
   Modified 01/18/85 by B. Braun to change kst_name to call amu_$kst_util_ entries.
   Modified 01/18/85 by B. Braun to create entry get_l1dir_shortname and procedure of the same name.
   Modified 01/24/85 by B. Braun to correct truncation of pathnames returned.
   Modified 02/06/85 by B. Braun to correct bug for special casing the root ">" case.
   Modified 02/08/85 by B. Braun to check init_segs when a dump isn't early but still using them.
*/

/* Parameters */

dcl  P_amu_info_ptr ptr,
     P_count fixed bin (24),
     P_ptr ptr,
     P_segptr ptr;

/* Automatic */

dcl  areap ptr;
dcl  bitcnt fixed bin (24);
dcl  bndsw bit (1);
dcl  bmp ptr;
dcl  1 branch aligned,				/* output structure from hcs_$status_ */
       2 type bit (2) unal,
       2 nnames fixed bin (15) unal,
       2 nrp bit (18) unal,
       2 dtm bit (36) unal,
       2 dtu bit (36) unal,
       2 mode bit (5) unal,
       2 pad bit (13) unal,
       2 rec fixed bin (17) unal;
dcl  code fixed bin (35);
dcl  dirname char (168);
dcl  ename char (32);
dcl  tdname char(168);	     
dcl  tename char(32);
dcl  genp ptr;
dcl  1 hard_ptrs like hardcore_cur;
dcl  key char (1);
dcl  libx fixed bin;
dcl  (ling, k, i, j, mblen, dl) fixed bin;
dcl  namebuf char (168);
dcl  new_sdw fixed bin (71);
dcl  (nmp, nsdwp) ptr;
dcl  offrel fixed bin (18);
dcl  1 oi_area aligned like object_info;
dcl  ptrtmp ptr;
dcl  ret_ptr_sw bit (1);
dcl  sblkp ptr;
dcl  segno fixed bin;
dcl  segptr ptr;					/* ptr to segment and offset in question */
dcl  1 trans_space like translation;

/* Based */

dcl  var_str char (ling) based (ptrtmp);
dcl  dnames (branch.nnames) char (32) aligned based (nmp);

/* Internal Static */

dcl  1 dinfo int static,				/* level one directory assosciative memory */
       2 ndir fixed bin init (0),
       2 l1dir (30),
         3 lg_name char (32),
         3 sht_name char (4);

/* Conditions */

dcl  zerodivide condition;

/* External Static */

dcl  amu_et_$null_sltp fixed bin (35) ext static;
dcl  amu_et_$null_sltnt fixed bin (35) ext static;
dcl  error_table_$action_not_performed fixed bin (35) ext static;

/* External Entries */

dcl  amu_$dp_segno_to_name entry (ptr, fixed bin, char (*), fixed bin (35));
dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  amu_$fdump_translate_contiguous entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_$resolve_virtual_addr entry (ptr, ptr, char (*), fixed bin, fixed bin (18), fixed bin (35));
dcl  amu_$return_val_phcs_ok entry () returns (bit (1));
dcl  amu_$search_path_get_object entry (ptr, fixed bin (35));
dcl  amu_$search_path_set_object entry (ptr, fixed bin (35));
dcl  amu_$translate_force_add entry (ptr, ptr, fixed bin (15), fixed bin (35));
dcl  amu_$translate_get entry (ptr, fixed bin (15), ptr, fixed bin (35));
dcl  amu_do_translation_ entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_bound_seg_info_ entry (ptr, fixed bin (24), ptr, ptr, ptr, fixed bin (35));
dcl  get_system_free_area_ entry (ptr);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));

/* Builtins */

dcl  (null, addr, addrel, baseno, divide, fixed, ptr, rel, substr, baseptr,
     rtrim, index, reverse, length, maxlength) builtin;
%page;
	ret_ptr_sw, bndsw = "0"b;			/* set sw to break out component names and relative offsets */
	go to common;

get_ptr_count:
     entry (P_amu_info_ptr, P_segptr, P_ptr, P_count);
	bndsw = "0"b;
	ret_ptr_sw = "1"b;
	goto common;

no_comp:
     entry (P_amu_info_ptr, P_segptr) returns (char (*));
	bndsw = "1"b;				/* set switch for no component breakout */
	ret_ptr_sw = "0"b;
	goto common;

for_structure:
     entry (P_amu_info_ptr, a_pointer_rep) returns (char (*) varying);

/* This is a kludge identical to get_name_$get_name_ except we get the pointer from the
   string representation. */

dcl  a_pointer_rep char (*) var;
dcl  segname char (256) var;
dcl  offset fixed bin (18);
dcl  dnl fixed bin;
dcl  replaced_path char(168);
dcl  amu_get_name_ entry (ptr, ptr) returns (char (*));
dcl  hcs_$fs_get_path_name entry (ptr, char(*), fixed bin, char(*), fixed bin(35));

	code = 0;
	segname = a_pointer_rep;			/* translate segname to a segno and offset        */
	call amu_$resolve_virtual_addr (P_amu_info_ptr -> amu_info.sci_ptr, P_amu_info_ptr, (segname), segno, offset,
	     code);
	if code ^= 0 then return (segname);		/* don't get pathname */

	return (segname || " " || rtrim (amu_get_name_ (P_amu_info_ptr, addrel (baseptr (segno), offset))));


common:
	amu_info_ptr = P_amu_info_ptr;
	segptr = P_segptr;
	genp = null ();
	hardcore_cur_ptr = addr (hard_ptrs);		/* get pointers to interesting hc */
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	segno = fixed (baseno (segptr), 18);		/* Get segment number */
	offrel = fixed (rel (segptr), 18);		/* Get offset */
	mblen = 168;				/* preset return char length to 168 */
	if segptr = null then do;
	     if ^ret_ptr_sw then
		return ("NULL POINTER");		/* if null ptr stop here */
	     else do;
		P_ptr = null ();
		P_count = 0;
		return;
		end;
	     end;

	if hard_ptrs.sltntp = null then do;
	     if ^ret_ptr_sw then
		return ("Cannot get pointer to SST name table.");
	     else do;
		P_ptr = null ();
		P_count = 0;
		return;
		end;
	     end;

	do i = 1 to translation_table.n_entries while (translation_table.segno (i) ^= segno);
	end;
	if translation_table.flags (i).replaced then do;
	     call hcs_$fs_get_path_name ((translation_table.part1 (i).ptr), dirname, dnl, ename, code);
	     replaced_path = rtrim(dirname) || ">" || rtrim(ename);
	     return (replaced_path);
	end;

	if segno <= hardcore_info.hcs_count |		/* if a hardcore segment */
	     amu_info.early_dump then do;		/* or its an early dump */
	     if segno <= hardcore_info.hcs_count then	/* get name */
		call get_sup_seg_slt (segno, dirname, ename, code);
	     else call get_init_seg_slt (segno, dirname, ename, code);
	     if code ^= 0 then do;
		if ^ret_ptr_sw then
		     return ("not known");
		else do;
		     P_ptr = null ();
		     P_count = 0;
		     return;
		     end;
		end;
	     if bndsw then return (ename);
	     if ^ret_ptr_sw then
		if substr (ename, 1, 5) ^= "bound" then do;
		     call ioa_$rsnnl ("^a|^o", ename, mblen, ename, fixed (rel (segptr)));
		     return (ename);
		     end;
	     namebuf = ename;			/* copy for compatability */
	     go to inithc;				/* initiate hardcore seg from ldd */
	     end;
	else do;					/* Non hardcore segment */
	     if amu_info.type = SAVED_PROC_TYPE then do;
		namebuf = "CANNOT GET NAME";
		call amu_$dp_segno_to_name (amu_info_ptr, segno, namebuf, (0));
		if substr (namebuf, 1, 1) = ">" then goto finish_name;
		return (namebuf);
		end;
	     end;

	nsdwp = addr (new_sdw);			/* get the sdw for segno */
	call amu_do_translation_ (amu_info_ptr, 0, nsdwp, (segno * 2), 2, code);
	astep =
	     ptr (hard_ptrs.sstp,
	     fixed (nsdwp -> sdw.add, 24) - fixed (hard_ptrs.sstp -> sst.ptwbase, 18) - hard_ptrs.sstp -> sst.astsize);
						/* Compute Astep */

/* attempt to ckeck validity of sst_names_ before calling get_ast_name */

	if ^(hard_ptrs.sstntp -> sstnt.valid) then do;	/* chances are it is not valid. */
	     namebuf = "CANNOT-GET-NAME";
	     end;
	else do;
	     namebuf = "";

	     on condition (zerodivide) namebuf = "CANNOT-COMPLETE-PATH";

	     call get_ast_name (astep, hard_ptrs.sstp, hard_ptrs.sstntp, namebuf);
	     revert condition (zerodivide);
	     end;

	call expand_pathname_ (rtrim(namebuf), tdname, tename, code);
	if code ^= 0 then code = 0;
	if substr (tename, 1, 4) = "!BBB" then
	     if ((index (tename, "linker") = 0 & substr(tdname, 1, 4) ^= ">pdd" &
	     substr(tdname, 1, 16) ^= ">process_dir_dir")) then do;
		call get_vtoc_pathname;
		if code ^= 0 then code = 0;
	     end;

	if rtrim (namebuf) = ">" then do;		/* special case the root */
	     if ret_ptr_sw then do;
		P_ptr = null ();
		P_count = 0;
		genp = null;			/* make sure ptr is null */
		call hcs_$initiate_count (namebuf, "", "", bitcnt, 0, genp, code);
		if genp = null then return;
		P_ptr = genp;
		P_count = bitcnt;
		return;
		end;
	     return (namebuf);
	     end;

	if index (namebuf, "CANNOT") ^= 0
	     | (index (reverse (namebuf), "!>") ^= 0 & substr (namebuf, 1, 16) ^= ">process_dir_dir") then
	     if (amu_$return_val_phcs_ok () & get_kstp ()) then
						/* if all this is true, go find name from kst */
		call kst_name (segno, kstp);		/* find the name from kst, sets global namebuf */

	if index (namebuf, "CANNOT") ^= 0 then do;	/* couldn't find in kst */
	     call check_if_early_hardcore_seg (segno, dirname, ename, code);
	     if code ^= 0 then do;
		if index (namebuf, "CANNOT") ^= 1 then	/* have a partial path                            */
		     goto finish_name;

		if ^ret_ptr_sw then
		     return ("CANNOT-GET-NAME");
		else do;
		     P_ptr = null ();
		     P_count = 0;
		     return;
		     end;
		end;
	     if bndsw then return (ename);
	     if ^ret_ptr_sw then
		if substr (ename, 1, 5) ^= "bound" then do;
		     call ioa_$rsnnl ("^a|^o", ename, mblen, ename, fixed (rel (segptr)));
		     return (ename);
		     end;
	     namebuf = ename;			/* copy for compatability */
	     go to inithc;				/* initiate hardcore seg from ldd */
	     end;

finish_name:
	ename, dirname = "";
	call get_l1dir_shortname (namebuf, dirname, ename, code);
	if code = 0 then namebuf = pathname_ (dirname, ename);

	if bndsw then return (namebuf);		/* no need to go further */
	if substr (ename, 1, 6) = "CANNOT" then return (namebuf);
	call expand_path_ (addr (namebuf), length (namebuf), addr (dirname), addr (ename), code);
	if ^ret_ptr_sw then
	     if substr (ename, 1, 5) ^= "bound" then do;
		if (fixed (rel (segptr))) = 0 then
		     return (namebuf);
		else call ioa_$rsnnl ("^a|^o", namebuf, mblen, namebuf, fixed (rel (segptr)));
		return (namebuf);
		end;
	if substr (dirname, 1, 4) = ">sl1" then do;	/* initiate hardcore segments from ldd for bind maps */
inithc:
	     call amu_$search_path_get_object (sl_info_p, code);
	     if sl_info_p = null then			/* set default path */
		call amu_$search_path_set_object (sl_info_p, code);
	     if sl_info_p = null then do;
		namebuf = "CANNOT-COMPLETE-PATH";
		return (namebuf);
		end;

	     genp = null;
	     do libx = 1 to sl_info.num_paths;
		call hcs_$initiate_count (sl_info.paths (libx).pathname, ename, "", bitcnt, 0, genp, code);
		if genp ^= null then goto exit_search;
	     end;
exit_search:
	     if genp = null then
		if ^ret_ptr_sw then return (namebuf);	/* cannot find in search dirs */

	     end;
	else do;
	     genp = null;				/* make sure ptr is null */
	     call hcs_$initiate_count (dirname, ename, "", bitcnt, 0, genp, code);
	     if ^ret_ptr_sw then
		if genp = null then return (namebuf);
	     end;

	if ret_ptr_sw then do;
	     P_ptr = genp;
	     P_count = bitcnt;
	     if P_ptr = null then do;
		call ioa_ ("^-^a not found. Cannot determine arguments.", namebuf);
	     end;
	     return;
	     end;

	oi_area.version_number = object_info_version_2;
	call get_bound_seg_info_ (genp, bitcnt, addr (oi_area), bmp, sblkp, code);
	if code ^= 0 then return (namebuf);		/* We now have a ptr to the bind map */
	if (offrel * 36) > bitcnt then do;		/* offset is out of bounds */
	     call ioa_$rsnnl ("^a|^o Offset OUT-OF-BOUNDS", namebuf, mblen, namebuf, offrel);
	     go to trmnme;
	     end;

	do i = 1 to n_components;
	     j = fixed (bindmap.component (i).text_start, 18);
	     k = fixed (bindmap.component (i).text_lng, 18);
	     if offrel >= j then
		if offrel < j + k then do;		/* We found a match */
		     ptrtmp = addrel (sblkp, bindmap.component (i).name_ptr);
		     ling = fixed (bindmap.component (i).name_lng, 18);
		     call ioa_$rsnnl ("^a$^a|^o", namebuf, mblen, namebuf, var_str, offrel - j);
		     go to trmnme;			/* Go term segment */
		     end;
	end;

	call ioa_$rsnnl ("^a|^o (not in text)", namebuf, namebuf, offrel);
trmnme:
	if genp ^= null () then call hcs_$terminate_noname (genp, code);
	return (namebuf);
%page;
amu_get_name_$get_l1dir_shortname:
     entry (P_segname, P_shortname, P_code);

dcl  P_segname char (*);
dcl  P_shortname char (*);
dcl  P_code fixed bin (35);
dcl  seg_name char (168);

	seg_name = P_segname;
	P_code, code = 0;
	dirname, ename = "";
	call get_l1dir_shortname (seg_name, dirname, ename, code);
	if code = 0 then
	     P_shortname = pathname_ (dirname, ename);
	else do;
	     P_shortname = seg_name;
	     code = 0;
	     end;

	P_code = code;
	return;
%page;
check_if_early_hardcore_seg:
     proc (segno, dirname, ename, code);

dcl  segno fixed bin;
dcl  code fixed bin (35);
dcl  (dirname, ename) char (*);

dcl  1 pid aligned based,
       2 upper bit (18) unal,
       2 lower bit (18) unal;
dcl  pid_ptr ptr;

/*
   If this is the Initializer process, then it's possible he is using early init segs. This happens in
   dumps where it's past the "early dump" stage but not all the way up yet.
*/

/* check if this is the initializer process by looking at the processid */

	code = 0;
	dirname, ename = "";
	if amu_info.process_info_ptr = null () then do;	/* Can't look */
	     code = error_table_$action_not_performed;
	     return;
	     end;

	pid_ptr = addr (process_info.pid);
	if pid_ptr -> pid.lower = "777777"b3 then	/* initializer ID				*/
	     call get_init_seg_slt (segno, dirname, ename, code);

     end check_if_early_hardcore_seg;
%page;
get_init_seg_slt:
     proc (seg_num, ret_dir, ret_name, code);
dcl  seg_num fixed bin;
dcl  ret_name char (*);
dcl  ret_dir char (*);
dcl  code fixed bin (35);
dcl  dpath char (168) based (dpathp);
dcl  dpathp ptr;
	code = 0;
	if hard_ptrs.sltp ^= null () then
	     sltp = hard_ptrs.sltp;
	else do;
	     code = amu_et_$null_sltp;
	     return;
	     end;
	if hard_ptrs.sltntp ^= null () then
	     names_ptr = hard_ptrs.sltntp;
	else do;
	     call ioa_ ("get_init_seg_slt: No slt name segment");
	     return;
	     end;
	if (seg_num < slt.first_init_seg) | (seg_num > slt.last_init_seg) then do;
	     code = error_table_$action_not_performed;
	     return;
	     end;
	sltep = addr (slt.seg (seg_num));
	namep = addrel (names_ptr, slte.names_ptr);
	ret_name = namep -> segnam.names (1).name;
	if slte.branch_required then do;
	     dpathp = addrel (names_ptr, slte.path_ptr);
	     ret_dir = dpath;
	     end;
	else ret_dir = " ";
     end get_init_seg_slt;

%page;
get_l1dir_shortname:
     proc (P_segname, P_dirname, P_ename, P_code);

dcl  P_segname char (*);
dcl  P_dirname char (*);
dcl  P_ename char (*);
dcl  P_code fixed bin (35);

dcl  seg_path char (168);
dcl  dirname char (168);
dcl  ename char (32);
dcl  l1dirname char (32);
dcl  (idx, jdx) fixed bin;
dcl  done bit (1);

	seg_path = P_segname;
	P_dirname, P_ename, dirname, ename = "";
	P_code, code = 0;

	if substr (seg_path, 1, 6) = "CANNOT" then do;
	     P_ename, P_segname = seg_path;
	     P_code = error_table_$action_not_performed;
	     return;
	     end;

	if substr (seg_path, 1, 1) = ">" then do;	/* convert level 1 directories to short form */
	     l1dirname = "";			/* set shortname to all blanks first */
	     idx = index (substr (seg_path, 2), ">") - 1;
	     if idx = 0 then
		l1dirname = rtrim (substr (seg_path, 2));
	     else l1dirname = substr (seg_path, 2, idx);

	     if length (rtrim (l1dirname)) <= 4 then do;	/* Already a shortname just return it */
		goto RETURN_IT;
		end;

	     done = "0"b;
	     if ndir ^= 0 then do;			/*  if we have any dirs in static structure dinfo. */
		do idx = 1 to ndir while (^done);
		     if l1dir.lg_name (idx) = l1dirname then done = "1"b;
		     if l1dir.sht_name (idx) = l1dirname then done = "1"b;
		end;
		end;
	     if ^done then do;			/* did not find in static dinfo */
		ndir = ndir + 1;			/* increment index */
		l1dir.lg_name (ndir) = l1dirname;	/* set in long name */
		l1dir.sht_name (ndir) = "";		/* initially set short name to blanks */
		call get_system_free_area_ (areap);	/* get a place to store names */
		call hcs_$status_ (">", l1dirname, 0, addr (branch), areap, code);
		if code ^= 0 then goto ST_ERR;	/* if we get error, forget it */
		if branch.nnames > 1 | branch.nrp ^= "0"b then do;
		     nmp = ptr (areap, branch.nrp);	/*  form ptr to names */
		     if substr (l1dirname, 1, 15) = "system_library_" then
			if substr (l1dirname, 1, 16) ^= "system_library_1" then
			     key = substr (l1dirname, 16, 1);
						/* get cmp key for system librarys */
			else key = substr (l1dirname, 1, 1);
						/* use first letter of long name for others */
		     else key = substr (l1dirname, 1, 1);
						/* use first letter of long name for others */

		     done = "0"b;			/* reset done condition */
		     do idx = 1 to branch.nnames while (^done);
			if substr (dnames (idx), 1, 1) = key then
			     if length (rtrim (dnames (idx))) <= 4 then do;
						/* found name meetin criteria */
				l1dir.sht_name (ndir) = rtrim(dnames (idx));
				done = "1"b;
				end;
		     end;
		     end;
ST_ERR:
		idx = ndir + 1;			/* set correct index */
		end;

	     if l1dir.sht_name (idx - 1) ^= "" then do;	/* if short name is present */
		dl = length (rtrim (l1dir.lg_name (idx - 1)));
		jdx = length (rtrim (l1dir.sht_name (idx - 1)));
		ling = (length (rtrim (seg_path)) - dl) + 1;
		substr (seg_path, 2, jdx) = substr (l1dir.sht_name (idx - 1), 1, jdx);
		substr (seg_path, jdx + 2) = substr (seg_path, dl + 2);
		substr (seg_path, jdx + ling + 5) = "";
		end;
	     end;

RETURN_IT:
	call expand_pathname_ (seg_path, dirname, ename, code);
	if code ^= 0 then dirname = seg_path;
	P_dirname = dirname;
	P_ename = ename;
	P_code = code;

     end get_l1dir_shortname;
%page;
get_sup_seg_slt:
     proc (seg_num, ret_dir, ret_name, code);
dcl  code fixed bin (35);
dcl  seg_num fixed bin;
dcl  ret_name char (*);
dcl  ret_dir char (*);
dcl  dpath char (168) based (dpathp);
dcl  dpathp ptr;
	code = 0;
	if hard_ptrs.sltp ^= null () then
	     sltp = hard_ptrs.sltp;
	else do;
	     code = amu_et_$null_sltp;
	     return;
	     end;
	if hard_ptrs.sltntp ^= null () then
	     names_ptr = hard_ptrs.sltntp;
	else do;
	     code = amu_et_$null_sltnt;
	     return;
	     end;
	if (seg_num < slt.first_sup_seg) | (seg_num > slt.last_sup_seg) then do;
	     code = error_table_$action_not_performed;
	     return;
	     end;
	sltep = addr (slt.seg (seg_num));
	namep = addrel (names_ptr, slte.names_ptr);
	ret_name = namep -> segnam.names (1).name;
	if slte.branch_required then do;
	     dpathp = addrel (names_ptr, slte.path_ptr);
	     ret_dir = dpath;
	     end;
	else ret_dir = " ";
     end get_sup_seg_slt;

%page;
get_kstp:
     proc returns (bit (1));
	call amu_$translate_get (amu_info_ptr, hardcore_info.segno.kst, translation_ptr, code);

	if translation_ptr = null then goto Trans_it;
	if translation.flags.two_part then do;
Trans_it:						/*             if amu_info.type ^= FDUMP_PROCESS_TYPE then return ("0"b); */
	     translation_ptr = addr (trans_space);
	     code = 0;
	     call amu_$fdump_translate_contiguous (amu_info_ptr, baseptr (hardcore_info.segno.kst), translation_ptr,
		code);
	     if code ^= 0 then return ("0"b);

	     call amu_$translate_force_add (amu_info_ptr, translation_ptr, hardcore_info.segno.kst, code);
	     if code ^= 0 then return ("0"b);
	     end;

	kstp = translation.part1.ptr;
	return ("1"b);
     end get_kstp;
%page;
/* kst_name - internal procedure to find name of segment in kst of dump, from live system */

kst_name:
     proc (P_segn, P_kstp);

dcl  P_segn fixed bin;
dcl  P_kstp ptr;

dcl  segn fixed bin;
dcl  uid_path (16) bit (36) aligned;
dcl  code fixed bin (35);
dcl  expanded_path char (168);
dcl  amu_$kst_util_expand_uid_path entry (ptr, (16) bit (36) aligned, char (*), fixed bin (35));
dcl  amu_$kst_util_segno_to_uid_path entry (ptr, fixed bin, (16) bit (36) aligned, fixed bin (35));

	segn = P_segn;
	kstp = P_kstp;				/* copy ptr for neater code */
	code = 0;
	expanded_path = "";
	uid_path (*) = ""b;
	if segn < kst.lowseg | segn > kst.highseg then return;
						/* no point in using KST */
	call amu_$kst_util_segno_to_uid_path (kstp, segn, uid_path, code);
	if code ^= 0 then return;
	call amu_$kst_util_expand_uid_path (kstp, uid_path, expanded_path, code);
	if code ^= 0 then return;
	namebuf = expanded_path;

     end kst_name;
%page;
/* get_ast_name - internal procedure to find name of segment in sstnt of dump */

get_ast_name:
     proc (a_astep, a_sstp, a_sstnp, retstr);

dcl  (a_astep, a_sstp, a_sstnp) ptr;

dcl  retstr char (*);

	astep = a_astep;
	sstp = a_sstp;
	sstnp = a_sstnp;

	if fixed (rel (astep), 18) < fixed (rel (sstp -> sst.astap), 18) then do;
fail:
	     retstr = "CANNOT GET PATHNAME";
	     return;
	     end;

	if rel (astep) = rel (sstp -> sst.root_astep) then do;
	     retstr = ">";
	     return;
	     end;

	retstr = recurse (astep, length (retstr));
	return;

recurse:
	proc (astep, namel) returns (char (*));

dcl  (ptsi, ra) fixed bin;
dcl  namel fixed bin;
dcl  sstnt_idx fixed bin;
dcl  astep ptr,
     name char (32) varying;

	     ra = fixed (rel (astep), 18);		/* for ease */
	     if ra < fixed (rel (sstp -> sst.astap), 18) then go to fail;
	     do ptsi = 3 to 0 by -1 while (ra < sstnp -> sstnt.ast_offsets (ptsi));
	     end;
	     if ptsi < 0 then go to fail;

	     if ptsi ^= fixed (astep -> aste.ptsi, 2) then go to fail;

	     sstnt_idx =
		divide (ra - sstnp -> sstnt.ast_offsets (ptsi), sstnp -> sstnt.ast_sizes (ptsi), 18, 0)
		+ sstnp -> sstnt.ast_name_offsets (ptsi);

	     if length (sstnp -> sstnt.names (sstnt_idx)) < 0
		| length (sstnp -> sstnt.names (sstnt_idx)) > maxlength (name) then
		name = "CANNOT-GET";		/* sstnt has garbage */

	     else name = sstnp -> sstnt.names (sstnt_idx);

	     if length (name) = 0 then name = "CANNOT-GET";

	     if astep -> aste.par_astep = rel (sstp -> sst.root_astep) then do;
		if length (name) >= namel then
		     return ("");
		else return (">" || name);
		end;


	     if namel = 1 then return (">");
	     if length (name) >= namel then return (recurse (ptr (astep, astep -> aste.par_astep), namel - 1) || ">");

	     return (recurse (ptr (astep, astep -> aste.par_astep), namel - length (name) - 1) || ">" || name);
	end;
     end get_ast_name;
%page;
get_vtoc_pathname: proc;

/* get_vtoc_pathname extracted from Bernard Greenberg's 05/20/76 vtoc_pathname */

dcl  nfsw bit (1) init ("0"b);
dcl  (ioa_, ioa_$rsnnl) entry options (variable);
dcl  1 local_vtoce like vtoce aligned;
dcl  check_gate_access_ entry (char(*), ptr, fixed bin(35));
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  pn char (168);
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36), fixed bin (35));
dcl  myname char (19) init ("amu_get_name_");
dcl  (opvtx, ovtocx) fixed bin;

     vtocep = addr (local_vtoce);
     opvtx = astep->aste.pvtx;
     ovtocx = astep->aste.vtocx;
     call check_gate_access_ ("phcs_", null, code);
     if code ^= 0 then return;
     call phcs_$get_vtoce (opvtx, ovtocx, vtocep, code);
     if code ^= 0 then do;
	call ioa_ ("^-^a: Error getting vtoce ^o on pvtx ^o.", myname, astep->aste.vtocx, astep->aste.pvtx);
	return;
     end;

     if vtoce.uid = "0"b then do;
	if nfsw then return;
	call ioa_ ("^-^a: Error: Vtocx ^o on pvtx ^o is free.", myname, astep->aste.vtocx, astep->aste.pvtx);
          return;
     end;

     pn = "";
     call vpn_cv_uid_path_$ent (addr (vtoce.uid_path), pn, vtoce.uid, code);
     if code ^= 0 then
	call ioa_ ("^-^a: Error: Cannot completely convert uid path", myname);
     call ioa_$rsnnl ("^a", namebuf, 0, pn);
     return;
end get_vtoc_pathname;
%page;
%include vtoce;
%page;
%include disk_table;
%page;
%include amu_hardcore_info;
%page;
%include amu_info;
%page;
%include amu_translation;
%page;
%include aste;
%page;
%include bind_map;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include dir_name;
%page;
%include kst;
%page;
%include object_info;
%page;
%include amu_process_info;
%page;
%include sdw;
%page;
%include sl_info;
%page;
%include sst;
%page;
%include sstnt;
%page;
%include slt;
%page;
%include slte;
%page;
%include pvt;
%page;
%include pvte;

     end amu_get_name_;
