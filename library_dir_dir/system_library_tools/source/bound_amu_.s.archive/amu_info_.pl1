/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_info_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* This procedure is in charge of creating and destroying amu_info structures

   09/06/80 W. Olin Sibert
*/

dcl  (
     P_amu_info_ptr pointer,
     P_type fixed bin
     ) parameter;

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;
dcl  new_aip  pointer;
dcl  code fixed bin (35);
dcl  amu_$check_info entry (pointer);
dcl  amu_$fdump_mgr_really_terminate entry (ptr, fixed bin (35));
dcl  amu_$deadproc_term entry (ptr, fixed bin (35));
dcl  get_system_free_area_ entry () returns (pointer);

dcl  amu_reset bit (1) init ("0"b);


dcl  (clock, null) builtin;

%page;

amu_info_$create:
     entry (P_amu_info_ptr, P_type);

/* This entrypoint allocates and initializes an amu_info */

	system_area_ptr = get_system_free_area_ ();

	allocate amu_info in (system_area) set (amu_info_ptr);

	amu_info.version = AMU_INFO_VERSION_2;
	amu_info.type = P_type;
	amu_info.time_created = clock ();
	amu_info.area_ptr = system_area_ptr;		/* so we can use amu_area from now on */
	amu_info.translation_table_ptr = null ();
	amu_info.fdump_info_ptr = null ();
	amu_info.hardcore_info_ptr = null ();
	amu_info.process_info_ptr = null ();
	amu_info.definitions_info_ptr = null ();
	amu_info.early_dump = "0"b;

/* we have no Idea how to chain this entry so null the chain pointer and let some one who called chain it in (some one that cares */

	amu_info.chain.prev = null ();
	amu_info.chain.next = null ();


	allocate definitions_info in (amu_area) set (amu_info.definitions_info_ptr);
	definitions_info.hash_buckets (*) = null;
	definitions_info.t_ptrs (*).val = null;
	do t_ptr_indx = 0 to 9;
	     definitions_info.t_ptrs (t_ptr_indx).name = init_ptr_names (t_ptr_indx);
	end;

	allocate hardcore_info in (amu_area) set (amu_info.hardcore_info_ptr);

	amu_info.copy_chain = null ();		/* no copies created yet */

	amu_info.process_info_ptr = null ();		/* not specified yet */
	amu_info.process_idx = -1;


	P_amu_info_ptr = amu_info_ptr;		/* all done */
	return;

%page;

amu_info_$destroy:
     entry (P_amu_info_ptr);

/* This entry destroys an amu_info */

	amu_info_ptr = P_amu_info_ptr;
	new_aip = null ();
	call amu_$check_info (amu_info_ptr);

	if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then
	     if amu_info.fdump_info_ptr ^= null () then call amu_$fdump_mgr_really_terminate (amu_info_ptr, code);

	if amu_info.type = SAVED_PROC_TYPE then call amu_$deadproc_term (amu_info_ptr, code);


	system_area_ptr = amu_info.area_ptr;		/* for when it is freed later */

/* now unthread it before doing anything */
/* return prev translation in chain if there is one */
/* if no prev return next, */
/* if next is null then return the null ptr */

	if amu_info.chain.prev ^= null () then do;
	     amu_info.chain.prev -> amu_info.chain.next = amu_info.chain.next;
	     new_aip = amu_info.chain.prev;
	     end;
	if amu_info.chain.next ^= null () then amu_info.chain.next -> amu_info.chain.prev = amu_info.chain.prev;
	if new_aip = null () then new_aip = amu_info.chain.next;

	if amu_info.translation_table_ptr ^= null () then /* free anything which may have been allocated */
	     free translation_table in (system_area);

	if amu_info.hardcore_info_ptr ^= null () then free hardcore_info in (system_area);

/* This will delete one amu_info and default to the last translation in
   The chain if it is valid null if not */

	free amu_info in (system_area);

	P_amu_info_ptr = new_aip;

	return;					/* all done for this entry */

%page;
%include amu_info;
%page;
%include amu_translation;
%page;
%include amu_hardcore_info;
%page;
%include amu_fdump_info;
%page;
%include amu_definitions;
%page;
%include sl_info;


     end amu_info_;
