/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-09,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-17,Fawcett), install(87-07-28,MR12.1-1049):
     Eliminate garbage in displaying process states.
                                                   END HISTORY COMMENTS */


amu_fdump_mpt_: proc (P_amu_info_ptr, P_caller, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* This procedure allocates and fills in the process_table for an
   FDUMP. It is heavily dependent on the silly way that BOS (BCE) constructs
   FDUMP images. The name stands for "Make (Manage) Process Table"
   09/06/80 W. Olin Sibert

   Changed by RAF SEPT 81
   Modified  by B. Braun 06/29/83 to add brief_sw parameter to amu_$fdump_mpt_fill_proc_table.

   This proc has 5 entries
   dcl amu_fdump_mpt_ entry (ptr);
   call amu_fdump_mpt_ (amu_info_ptr)
   where
   amu_info_ptr is the pointer to the main info for this erf.


   This entry point will create the fdump_process_table and init the process_info
   for each process in the fdump.

   dcl amu_$fdump_mpt_current_process entry (ptr);
   call amu_$fdump_mpt_current_process (amu_info_ptr);
   where
   amu_info_ptr is the main info pointer for this erf.


   This entry only prints the FDUMP process index and the dbr of the
   current process


   dcl amu_$fdump_mpt_temp_change_idx entry (ptr,fixed bin);
   call amu_$fdump_mpt_temp_change_idx (amu_info_ptr,new_index);
   where
   amu_info_pointer is a pointer to the maun info.
   new_index is the value of the index into fdump_process_table.array
   of the new process.
   This entry will change the amu_info data to reflect the new process. It is
   intended to be only a temp change the old index is stored in
   amu_info.proc_idx_hold to be used by amu_$fdump_mpt_revert_idx.

   dcl amu_$fdump_mpt_revert_idx entry (ptr);
   call amu_$fdump_mpt_revert_idx (amu_info_ptr);
   where
   amu_info_ptr is the same as above.

   This entry point will revert the amu_info data to the process indicated by
   amu_info.proc_idx_hold. This should have been set by the temp_change_idx entry.


*/
dcl  com_err_ entry () options (variable);
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl		entry() options(variable);
dcl  P_amu_info_ptr pointer parameter;
dcl  P_idx fixed bin;
dcl  P_dbr fixed bin (24);
dcl  P_cpu char (1);
dcl  P_caller char(*);
dcl  P_code fixed bin (35);
dcl  brief_sw bit(1);
dcl  t_ptr ptr;
dcl  temp_ptr ptr;
dcl  t_segno fixed bin;
dcl  based_char char (32) based (t_ptr);
dcl  af_str char (af_len) var based (af_ptr);
dcl  ignore  fixed bin (21);
dcl  af_sw bit(1);
dcl  index_changed bit (1) init ("0"b);
dcl  range fixed bin (18);
dcl  data_buf_ptr ptr;
dcl  t_data (8) fixed bin (35);
dcl  t_offset fixed bin (18);
dcl  pid char(36) var;
dcl  code fixed bin (35);
dcl  prev_segno fixed bin;
dcl  af_ptr ptr;
dcl  af_len fixed bin(21);
dcl  segx fixed bin;
dcl  process_idx fixed bin;
dcl  n_processes fixed bin;
dcl  segment_ptr ptr;
dcl  based_dbr bit (24) based;
dcl  total_offset fixed bin (71);
dcl  search_dbr fixed bin (24);
dcl  cpu_name char (1);
dcl  cpu_no fixed bin (3) based;
dcl  cpu_tag_offset fixed bin (18);
dcl  tag (0:7) char (1) int static options (constant) init ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  1 temp_translation like translation;
dcl  version_id char (8) based (data_buf_ptr);
dcl  system_id char (8) based (data_buf_ptr);
	      

dcl  RUNNING fixed bin init (1) static options (constant);

dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$definition_offset entry (ptr, char (*), char (*), fixed bin (35)) returns (fixed bin (18));
dcl  amu_$definition_ptr entry (ptr, char(*), char(*), fixed bin(35)) returns(ptr);
dcl  amu_$hardcore_info_fdump entry (ptr, char(*), fixed bin (35));
dcl  amu_$return_val_per_process entry (ptr, fixed bin) returns(bit(1));
dcl  amu_$translate_allocate entry (ptr, fixed bin (17));
dcl  amu_$tc_data_find_apte entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  amu_$fdump_mpt_revert_idx entry (ptr);
dcl  amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin);
dcl  amu_$fdump_translate_contiguous entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_$tc_data_find_first_running entry (ptr, fixed bin (24), fixed bin (35));
dcl  amu_$translate_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  amu_$translate_force_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  amu_$return_val_idx_from_dbr entry (ptr, fixed bin (24)) returns (fixed bin);
dcl  get_temp_segment_		entry (char(*), ptr, fixed bin(35));
dcl  release_temp_segment_	entry (char(*), ptr, fixed bin(35));
dcl  (amu_et_$apte_not_found,
     amu_et_$not_fdump,
     amu_et_$trans_exists,
     amu_et_$big_idx
     ) fixed bin (35) ext;

dcl  (addr, addrel, baseptr, divide, 
      fixed, null, binary, size, hbound,
      index, mod, pointer, lbound, baseno, rel)		builtin;

dcl cleanup condition;
%page;
	code = 0;
	amu_info_ptr = P_amu_info_ptr;
	fdump_info.fdump_process_table_ptr = null ();
	dumpptr = fdump_info.dump_seg_ptr (0);
	data_buf_ptr = null();
	on condition(cleanup) begin;
	   if data_buf_ptr ^= null() then call release_temp_segment_ ("amu_fdump_mpt_", data_buf_ptr, (0));
	   end;
	prev_segno = -1;				/* count the number of apparently separate process's in the */
	n_processes = 0;				/* FDUMP, by looping through the array of segnos and counting */
	do segx = 1 to dump.num_segs;			/* each decrease in segnos as a separate process, on the */
	     if binary (dump.segno (segx), 18) < prev_segno then
						/* grounds that all the segments in a process will */
		n_processes = n_processes + 1;	/* have been stored in monotonically increasing order. */
	     prev_segno = binary (dump.segno (segx));
	end;					/* After the loop is run through, add one to the process */
	n_processes = n_processes + 1;		/* count, since the end of last process isn't detected above */

	alloc_fdump_process_table_size = n_processes;

	allocate fdump_process_table in (amu_area) set (fdump_info.fdump_process_table_ptr);

	fdump_process_table.size = n_processes - 1;
	fdump_process_table.array.process_info_ptr (*) = null ();
	fdump_process_table.array.cpu_name (*) = "";
	fdump_process_table.array.dbr (*) = 0;
	fdump_process_table.array.apte_offset (*) = 0;

	process_idx = 0;				/* Now, loop through the array again, finding the bounds of */
	prev_segno = -1;				/* the dumped address space in each process. */
	fdump_process_table (process_idx).first_seg = 1;	/* first process starts with seg #1, of course */

	total_offset = size (dump);			/* set to the first segment in dump */

/* find where this seg starts this should be seg 0 of the process
   The first word of dseg should be the sdw for seg 0 hence the SDW.ADDR
   is the dbr add value
*/

	fp_table_ptr = addr (fdump_process_table.array (process_idx));
	fp_table.dmp_seg_indx = divide (total_offset, fdump_info.dump_seg_lth (0), 17, 0);
	fp_table.dmp_seg_offset = mod (total_offset, fdump_info.dump_seg_lth (0));
	fp_table.dbr =
	     fixed (pointer (fdump_info.dump_seg_ptr (fp_table.dmp_seg_indx), fp_table.dmp_seg_offset) -> based_dbr, 24);

	do segx = 1 to dump.num_segs;
	     if binary (dump.segno (segx), 18) < prev_segno then do;
						/* we've just switched processes */
		fp_table.last_seg = segx - 1;		/* last segment was previous iteration */
		process_idx = process_idx + 1;	/* get the new first segment number and increment the index */
		fp_table_ptr = addr (fdump_process_table.array (process_idx));
		fp_table.first_seg = segx;		/* get the dbr, we have the chance */
		fp_table.dmp_seg_indx = divide (total_offset, fdump_info.dump_seg_lth (0), 17, 0);
		if (fp_table.dmp_seg_indx = fdump_info.n_dump_segs) |
		   fdump_info.dump_seg_ptr (fp_table.dmp_seg_indx) = null then do;
						/* Problems */

		     call com_err_ (0, "amu_fdump_mpt_", "Cannot complete process ^d, no more dump segs.",
			process_idx);
		     fdump_process_table.size = process_idx - 1;
		     process_idx = process_idx - 1;
		     fp_table.dmp_seg_indx = fp_table.dmp_seg_indx -1;
		     fp_table.last_seg = segx - 1;
		     goto no_more_segs;
		     end;
		fp_table.dmp_seg_offset = mod (total_offset, fdump_info.dump_seg_lth (0));
		fp_table.dbr =
		     fixed (pointer (fdump_info.dump_seg_ptr (fp_table.dmp_seg_indx), fp_table.dmp_seg_offset)
		     -> based_dbr, 24);
		end;
	     total_offset = fixed (binary (dump.segs (segx).length, 18) * 64, 71, 0) + total_offset;
	     prev_segno = binary (dump.segno (segx), 18);
	end;
	fp_table.last_seg = dump.num_segs;		/* and last seg of last process is last seg in dump */
no_more_segs:
	process_idx = 0;
	amu_info.process_idx = process_idx;
	fp_table_ptr = addr (fdump_process_table.array (process_idx));
	call init_process_table;

	fp_table.process_info_ptr = amu_info.process_info_ptr;

	call amu_$translate_allocate (amu_info_ptr, 10);	/* default to 10 segs */
	process_info.address_map_ptr = amu_info.translation_table_ptr;
						/* now we have a place to keep the translations for */
						/* the interesting hardcore segs                  */
	call amu_$hardcore_info_fdump (amu_info_ptr, P_caller, code);
	if code ^= 0 then do;			/* msg already printed			*/
	     P_code = code;
	     return;	     
	     end;

	cpu_tag_offset = amu_$definition_offset (amu_info_ptr, "prds", "processor_tag", code);
	if code ^= 0 then return;

	amu_info.type = FDUMP_PROCESS_TYPE;
	
	do process_idx = 0 by 1 to fdump_process_table.size;
	     amu_info.process_idx = process_idx;
	     fp_table_ptr = addr (fdump_process_table.array (process_idx));
	     call create_proc_table();

	     if process_info.prds.foreign_ptr ^= null () then
		fp_table.cpu_name = tag (addrel (process_info.prds.foreign_ptr, cpu_tag_offset) -> cpu_no);
	     else if process_info.prds.local_ptr ^= null () then
		fp_table.cpu_name = tag (addrel (process_info.prds.local_ptr, cpu_tag_offset) -> cpu_no);
	     else fp_table.cpu_name = "";
	end;

				/* now fine the dbr of the first running process to use as default    */
	call amu_$tc_data_find_first_running (amu_info_ptr, search_dbr, code);
	if code ^= 0 then
	     process_idx = 0;
	else do;
	     process_idx = amu_$return_val_idx_from_dbr (amu_info_ptr, search_dbr);
	     if process_idx = -1 then process_idx = 0;
	     end;

	call set_for_proc (process_idx);		/* set the default to proc index one for now      */
	
	call get_temp_segment_ ("amu_fdump_mpt_", data_buf_ptr, code);
	if code ^= 0 then return;

	range = 2;
	temp_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data",
	   "version_id", code);
	if code ^= 0 then go to RET;
	call get_data_ (data_buf_ptr, fixed (baseno (temp_ptr), 17), fixed (rel (temp_ptr), 18), range);

	fdump_info.version_id = version_id;

	temp_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data",
	   "system_id", code);
	if code ^= 0 then go to RET;
	call get_data_ (data_buf_ptr, fixed (baseno (temp_ptr), 17), fixed (rel (temp_ptr), 18), range);
	fdump_info.system_id = system_id;	

RET:	
   if data_buf_ptr ^= null() then call release_temp_segment_ ("amu_fdump_mpt_", data_buf_ptr, code);
return;

amu_fdump_mpt_$current_process:
     entry (P_amu_info_ptr);
	amu_info_ptr = P_amu_info_ptr;
	af_sw = "0"b;
	call what_process;
	return;

amu_fdump_mpt_$current_process_af:
     entry (P_amu_info_ptr, af_ptr, af_len);
	amu_info_ptr = P_amu_info_ptr;
	af_sw = "1"b;
	call what_process;
	return;

amu_fdump_mpt_$temp_change_idx:
     entry (P_amu_info_ptr, P_idx);
	amu_info_ptr = P_amu_info_ptr;
	if amu_info.type = SAVED_PROC_TYPE then return;
	amu_info.proc_idx_hold = amu_info.process_idx;
	call set_for_proc (P_idx);
	return;

amu_fdump_mpt_$change_idx:
     entry (P_amu_info_ptr, P_idx);
	amu_info_ptr = P_amu_info_ptr;
	if amu_info.type = SAVED_PROC_TYPE then return;
	call set_for_proc (P_idx);
	return;


amu_fdump_mpt_$revert_idx:
     entry (P_amu_info_ptr);
	amu_info_ptr = P_amu_info_ptr;
	if amu_info.type = SAVED_PROC_TYPE then return;
	call set_for_proc (amu_info.proc_idx_hold);
	return;


amu_fdump_mpt_$fill_proc_table:
     entry (P_amu_info_ptr, P_dbr, P_idx, P_cpu, brief_sw, P_code);

	amu_info_ptr = P_amu_info_ptr;
	if amu_info.type = FDUMP_TYPE then amu_info.type = FDUMP_PROCESS_TYPE;
	if amu_info.type ^= FDUMP_PROCESS_TYPE then do;
	     P_code = amu_et_$not_fdump;
	     return;
	     end;
	code = 0;
	cpu_name = P_cpu;
	search_dbr = P_dbr;
	process_idx = P_idx;

	if search_dbr ^= 0 & process_idx = -1 then do;
	   do process_idx = lbound (fdump_process_table.array, 1) by 1 to hbound (fdump_process_table.array, 1)
	      while (search_dbr ^= fdump_process_table.array (process_idx).dbr);
	      end;
  	   if process_idx < lbound (fdump_process_table.array, 1) | process_idx > hbound (fdump_process_table.array, 1)
             then do;
	      P_code = amu_et_$apte_not_found;
	      return;
	      end;
             end;
	else if cpu_name ^= "" then do;
	     do process_idx = 0 by 1 to fdump_process_table.size;
		if cpu_name = fdump_process_table.array (process_idx).cpu_name then
		     if fdump_process_table.array (process_idx).process_info_ptr -> process_info.state = RUNNING then
			go to get_p;
	     end;
	     call ioa_ ("No running process for cpu ^a", cpu_name);
	     P_code = 0;
	     return;

	     end;
	if process_idx < lbound (fdump_process_table.array, 1) | process_idx > hbound (fdump_process_table.array, 1)
	then do;
	     P_code = amu_et_$big_idx;
	     return;
	     end;
get_p:
	call set_for_proc (process_idx);
	if ^brief_sw then call what_process_selected;
	return;


amu_fdump_mpt_$terminate:
     entry (P_amu_info_ptr);
dcl  i;
	amu_info_ptr = P_amu_info_ptr;
	if fdump_info.fdump_process_table_ptr ^= null () then do;
	     do i = lbound (fdump_process_table.array, 1) to hbound (fdump_process_table.array, 1);
		amu_info.process_info_ptr = fdump_process_table.array (i).process_info_ptr;
		if amu_info.process_info_ptr ^= null then free process_info in (amu_area);
	     end;
	     free fdump_process_table in (amu_area);
	     end;
	return;

%page;
get_data_:
     proc (data_ptr, seg, word, number);


dcl  data_ptr ptr;
dcl  seg fixed bin;
dcl  (word, number) fixed bin (18);

	if ^amu_$return_val_per_process (amu_info_ptr, seg) then do;
	     index_changed = "1"b;
	     call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, lbound (fdump_process_table.array, 1));
	     end;
	call amu_$do_translation (amu_info_ptr, seg, data_ptr, word, number, code);
	if index_changed = "1"b then do;
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     index_changed = "0"b;
	     end;
     end get_data_;

%page;
what_process:
     proc;
dcl  process_st (0:6) char (9) varying int static options (constant)
	init ("empty", "running", "ready", "waiting", "blocked", "stopped", "ptlocking");
	t_ptr = addr (t_data);
	t_segno = hardcore_info.segno.pds;
	t_offset = amu_$definition_offset (amu_info_ptr, "pds", "process_group_id", code);

	call amu_$do_translation (amu_info_ptr, t_segno, t_ptr, t_offset, 8, code);

	if af_sw then do;
	   call ioa_$rsnnl ("^o", pid, ignore, fixed(process_info.pid));
	   af_str = af_str || " " || pid;
	   end;
	else do;
	   if index (based_char, ".") = 0 then based_char = "";  
	   if process_info.state = RUNNING then call ioa_ ("Proc ^3d DBR ^9o^[ running^39ton cpu ^a^]^3x^a", 
	          amu_info.process_idx, fdump_process_table.array (amu_info.process_idx).dbr, 
		(process_info.state = RUNNING), fdump_process_table.array (amu_info.process_idx).cpu_name, based_char);
  	   else call ioa_ ("Proc ^3d DBR ^9o ^9a last on cpu ^a^3x^a", amu_info.process_idx,
		fdump_process_table.array (amu_info.process_idx).dbr, process_st (process_info.state),
		fdump_process_table.array (amu_info.process_idx).cpu_name, based_char);
             end;

     end what_process;

what_process_selected:
     proc;

	t_ptr = addr (t_data);
	t_segno = hardcore_info.segno.pds;
	t_offset = amu_$definition_offset (amu_info_ptr, "pds", "process_group_id", code);

	call amu_$do_translation (amu_info_ptr, t_segno, t_ptr, t_offset, 8, code);
          call ioa_ ("Process ^3d, ^a, DBR ^9o", amu_info.process_idx, based_char, 
		fdump_process_table.array (amu_info.process_idx).dbr);

     end what_process_selected;


create_proc_table:
     proc;


	if fp_table.process_info_ptr = null () then do;
	     call init_process_table;
	     fp_table.process_info_ptr = amu_info.process_info_ptr;
	     end;
	else amu_info.process_info_ptr = fp_table.process_info_ptr;

	call amu_$tc_data_find_apte (amu_info_ptr, fp_table.dbr, segment_ptr, code);
	if code ^= 0 then do;
	     call ioa_ ("Could not find apte for process_idx ^d^/^5xdbr = ^o", process_idx, fp_table.dbr);
	     return;
	     end;
	if hardcore_info.pointers.tc_data.fptr ^= null () then do;
	     process_info.apte.foreign_ptr = segment_ptr;
	     process_info.apte.local_ptr = null ();
	     fp_table.apte_offset =
		fixed (rel (segment_ptr), 18) - fixed (rel (hardcore_info.pointers.tc_data.fptr), 18);
	     end;
	else do;
	     process_info.apte.foreign_ptr = null ();
	     process_info.apte.local_ptr = segment_ptr;
	     fp_table.apte_offset =
		fixed (rel (segment_ptr), 18) - fixed (rel (hardcore_info.pointers.tc_data.lptr), 18);


	     end;
	aptep = segment_ptr;
	process_info.dbr = apte.dbr;
	process_info.state = fixed (apte.flags.state, 17);
	process_info.pid = apte.processid;
	process_info.idx = process_idx;
	if process_info.address_map_ptr = null () then do;
	     call amu_$translate_allocate (amu_info_ptr, 10);
	     process_info.address_map_ptr = amu_info.translation_table_ptr;
	     end;
	else amu_info.translation_table_ptr = process_info.address_map_ptr;
	process_info.idx = process_idx;
	segment_ptr = baseptr (hardcore_info.prds);
	call fill_ptrs (addr (process_info.prds), segment_ptr);
	segment_ptr = baseptr (hardcore_info.dseg);
	call fill_ptrs (addr (process_info.dseg), segment_ptr);
	segment_ptr = baseptr (hardcore_info.pds);
	call fill_ptrs (addr (process_info.pds), segment_ptr);
	segment_ptr = baseptr (hardcore_info.kst);
	call fill_ptrs (addr (process_info.kst), segment_ptr);


	process_info.dump_segx.first = fp_table.first_seg;
	process_info.dump_segx.last = fp_table.last_seg;



	return;
     end create_proc_table;


init_process_table:
     proc;
	allocate process_info in (amu_area) set (amu_info.process_info_ptr);
	process_info.address_map_ptr = null ();
	process_info.apte.foreign_ptr = null ();
	process_info.apte.local_ptr = null ();
	process_info.prds = process_info.apte;
	process_info.dseg = process_info.apte;
	process_info.pds = process_info.apte;
	process_info.kst = process_info.apte;

     end init_process_table;


set_for_proc:
     proc (p_idx);					/* This proc should not change the amu_info.proc_idx_hold */
dcl  p_idx fixed bin;

	amu_info.type = FDUMP_PROCESS_TYPE;
	amu_info.process_idx = p_idx;
	amu_info.process_info_ptr = fdump_process_table.array (amu_info.process_idx).process_info_ptr;
	amu_info.translation_table_ptr = process_info.address_map_ptr;
     end set_for_proc;


fill_ptrs:
     proc (ppdp, dp);
dcl  1 proc_ptr_data like process_info.apte based (ppdp);
dcl  ppdp ptr;
dcl  dp ptr;
	call amu_$fdump_translate_contiguous (amu_info_ptr, dp, addr (temp_translation), code);
	if temp_translation.flags.in_dump = "1"b then do;
	     proc_ptr_data.foreign_ptr = temp_translation.part1.ptr;
	     proc_ptr_data.local_ptr = null ();
	     end;
	else do;
	     proc_ptr_data.local_ptr = temp_translation.part1.ptr;
	     proc_ptr_data.foreign_ptr = null ();
	     end;
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (dp), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (dp), 17), code);

     end fill_ptrs;

%page;
%include amu_translation;
%page;
%include amu_info;
%page;
%include amu_fdump_info;
%page;
%include amu_process_info;
%page;
%include amu_hardcore_info;
%page;
%include apte;
%page;
%include bos_dump;

     end amu_fdump_mpt_;
