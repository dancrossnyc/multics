/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(1987-07-09,Parisek), approve(1987-07-09,MCR7746),
     audit(1987-07-16,Fawcett), install(1987-07-28,MR12.1-1049):
     Correct dump segment length reference.
  2) change(2019-06-01,Swenson), approve(2019-06-01,MCR10064),
     audit(2019-06-02,GDixon), install(2019-06-02,MR12.6g-0029):
     Fix to handle some early dump tapes where segments are not yet
     present.
                                                   END HISTORY COMMENTS */


/* Modified 02/20/86 by Paul Leatherman to make lth = lth - 1 */

amu_fdump_translate_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  (
     P_amu_info_ptr pointer,
     P_seg_ptr pointer,
     P_translation_ptr pointer,
     P_seg_lth fixed bin (19),
     P_code fixed bin (35)
     ) parameter;

dcl  (base, base_2) pointer;
dcl  (lth, lth_2) fixed bin (19);
dcl  segno fixed bin (15);
dcl  temp_seg_name char (32);
dcl  process_idx fixed bin;

dcl  copy_seg_ptr pointer;

dcl  1 copy_seg aligned based (copy_seg_ptr),
       2 part1 (lth) bit (36) aligned,
       2 part2 (lth_2) bit (36) aligned;

dcl  copy_part1 (lth) bit (36) aligned based (base);
dcl  copy_part2 (lth_2) bit (36) aligned based (base_2);

dcl  amu_et_$seg_not_dumped fixed bin (35) external;
dcl  amu_error_ entry options (variable);
dcl  amu_$temp_seg_get entry (pointer, char (*), pointer, pointer);
dcl  ioa_$rsnnl entry options (variable);

dcl  (addr, binary, baseno, divide, mod, null, pointer) builtin;
%page;

amu_fdump_translate_$get_translation:
     entry (P_amu_info_ptr, P_seg_ptr, P_translation_ptr, P_code);

/* This entry fills in a translation for the specified pointer, without regard
   to whether it is split across dump segment boundaries. It is used when initializing
   the translation array for the first time. */

	call get_amu_info ();			/* set up pointers and indexes */
	translation_ptr = P_translation_ptr;
	segno = binary (baseno (P_seg_ptr), 15);

	call locate_segment (segno, process_idx);	/* sets base & lth */
	if base = null () then do;
	     P_code = amu_et_$seg_not_dumped;
	     return;
	     end;
	translation.flags = "0"b;
	translation.segno = segno;
	translation.part1.ptr = base;
	translation.part1.lth = lth;
	translation.flags.in_dump = "1"b;
	translation.part2.ptr = base_2;
	if base_2 ^= null then do;
	     translation.part2.lth = lth_2;
	     translation.flags.two_part = "1"b;
	     end;
	else do;
	     translation.part2.lth = 0;

	     end;


	return;					/* end of code for this entrypoint */

%page;

amu_fdump_translate_$contiguous:
     entry (P_amu_info_ptr, P_seg_ptr, P_translation_ptr, P_code);

/* This entry fills in a translation for the specified pointer, copying the segment
   contents into a temp segment before doing so if it spans dump segment boundaries.
   This is used the first time it is necessary to have a contiguous segment to reference.
*/

	call get_amu_info ();			/* set up pointers and indexes */
	translation_ptr = P_translation_ptr;
	segno = binary (baseno (P_seg_ptr), 15);

	call locate_segment (segno, process_idx);	/* sets base & lth */
	if base = null () then do;
	     P_code = amu_et_$seg_not_dumped;
	     return;
	     end;
	translation.flags = "0"b;
	if base_2 = null () then do;			/* already contiguous or nonexistent */
	     translation.part1.ptr = base;
	     translation.part1.lth = lth;
	     translation.part2.ptr = null ();
	     translation.part2.lth = 0;
	     translation.segno = segno;
	     translation.flags.in_dump = "1"b;
	     return;
	     end;

	call ioa_$rsnnl ("ERF ^a: seg ^o, proc ^d", temp_seg_name, (0), fdump_info.erf_name, segno, process_idx);

	call amu_$temp_seg_get (amu_info_ptr, temp_seg_name, fdump_info.copy_block_ptr, copy_seg_ptr);

	copy_seg.part1 = copy_part1;			/* now, copy the info */
	copy_seg.part2 = copy_part2;
	translation.flags = "0"b;
	translation.part1.ptr = copy_seg_ptr;
	translation.part1.lth = lth + lth_2;
	translation.part2.ptr = null ();
	translation.part2.lth = 0;
	translation.segno = segno;
	translation.flags.in_temp_seg = "1"b;
	return;					/* all done */

%page;
amu_fdump_translate_$to_temp_seg:
     entry (P_amu_info_ptr, P_seg_ptr, P_translation_ptr, P_code);

/* This entry will translate a seg no from the ERF to a tempseg Put in for stacks */


	call get_amu_info ();			/* set up pointers and indexes */
	translation_ptr = P_translation_ptr;
	segno = binary (baseno (P_seg_ptr), 15);

	call locate_segment (segno, process_idx);	/* sets base & lth */
	if base = null () then do;
	     P_code = amu_et_$seg_not_dumped;
	     return;
	     end;

	call ioa_$rsnnl ("ERF ^a: seg ^o, proc ^d", temp_seg_name, (0), fdump_info.erf_name, segno, process_idx);

	call amu_$temp_seg_get (amu_info_ptr, temp_seg_name, fdump_info.copy_block_ptr, copy_seg_ptr);

	copy_seg.part1 = copy_part1;			/* now, copy the info */
	if base_2 ^= null then copy_seg.part2 = copy_part2;
	translation.flags = "0"b;
	translation.part1.ptr = copy_seg_ptr;
	translation.part1.lth = lth + lth_2;
	translation.part2.ptr = null ();
	translation.part2.lth = 0;
	translation.segno = segno;
	translation.flags.in_temp_seg = "1"b;
	return;					/* all done */

amu_fdump_translate_$get_seg_lth:
     entry (P_amu_info_ptr, P_seg_ptr, P_seg_lth, P_code);

/* This entrypoint returns the length of a segment in process 1. */

	call get_amu_info ();

	call locate_segment (binary (baseno (P_seg_ptr), 15), 1);
	if base = null () then do;
	     P_code = amu_et_$seg_not_dumped;
	     return;
	     end;

	P_code = 0;
	P_seg_lth = lth + lth_2;


	return;					/* all done for this entrypoint */

%page;

get_amu_info:
     proc ();

/* This procedure sets amu_info_ptr and process_idx, and also generates an error
   for any attempt to use an invalid amu_info. */

	amu_info_ptr = P_amu_info_ptr;

	if amu_info.type = FDUMP_TYPE then process_idx = 0;
	else if amu_info.type = FDUMP_PROCESS_TYPE then process_idx = amu_info.process_idx;
	else call amu_error_ (amu_info_ptr, 0, "Invalid type for FDUMP amu_info ^d.", amu_info.type);

	P_code = 0;				/* until something happens */

	return;
     end get_amu_info;

%page;

locate_segment:
     proc (P_segno, P_process_idx);

/* This procedure attempts to locate the specified segment from the set of segments dumped
   for the specified process. It sets base, lth, base_2, and lth_2 as its output.
*/

dcl  (
     P_segno fixed bin (15),
     P_process_idx fixed bin
     ) parameter;

dcl  segx fixed bin;
dcl  dump_seg_idx fixed bin;
dcl  offset fixed bin (24);
dcl  total_lth fixed bin (19);


	if (P_process_idx < 0) | (P_process_idx > fdump_process_table.size) then
	     call amu_error_ (amu_info_ptr, 0, "Process index out of range. ^d", P_process_idx);
	fp_table_ptr = addr (fdump_process_table.array (P_process_idx));

	dumpptr = fdump_info.dump_seg_ptr (0);		/* make the segment table addressable */

	offset = fp_table.dmp_seg_offset;		/* start the offset at the start of the process */

	do segx = fp_table.first_seg to fp_table.last_seg;
	     if binary (dump.segs (segx).segno, 15) = P_segno then /* found it */ goto FOUND_SEGMENT;
	     offset = offset + (64 * binary (dump.segs (segx).length, 18));
	end;

	base = null ();				/* didn't find it */
	base_2 = null ();
	return;

FOUND_SEGMENT:					/* KLUDGEY mechanism for resolving addresses */
	dump_seg_idx = fp_table.dmp_seg_indx + (divide (offset, fdump_info.dump_seg_lth (0), 17, 0));
						/* HIGHLY dependent on exact behaviour of BOS */
	offset = mod (offset, fdump_info.dump_seg_lth (0));

	base = pointer (fdump_info.dump_seg_ptr (dump_seg_idx), offset);

	total_lth = binary (dump.segs (segx).length) * 64;/* length of segment */

	if total_lth = 0 then do;
	     base = null ();
	     base_2 = null ();
	     return;
           end;

	if (offset + total_lth) <= fdump_info.dump_seg_lth (dump_seg_idx) then do;
	     lth = total_lth - 1;			/* image is whole in single dump segment */
	     base_2 = null ();
	     lth_2 = 0;
	     end;

	else do;					/* otherwise, it's split */
	     lth = fdump_info.dump_seg_lth (dump_seg_idx) - offset;
						/* First, use all that remains here */

	     dump_seg_idx = dump_seg_idx + 1;		/* go on to next segment */
	     if fdump_info.dump_seg_ptr (dump_seg_idx) = null then goto LOC_ERR;
	     base_2 = pointer (fdump_info.dump_seg_ptr (dump_seg_idx), 0);
						/* start at the base */
	     lth_2 = (total_lth - lth) - 1;			/* and use up the rest */
	     end;

	if dump_seg_idx > fdump_info.n_dump_segs then do;
LOC_ERR:	   call amu_error_ (amu_info_ptr, 0,
		"While resolving segment ^o in process ^d, referenced nonexistent dump segment ^d.", P_segno,
		P_process_idx, dump_seg_idx);
	     base = null;
	     end;
	return;
     end locate_segment;

%page;
%include amu_info;
%page;
%include amu_fdump_info;
%page;
%include amu_translation;
%page;
%include bos_dump;

     end amu_fdump_translate_;
