/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_error_: proc ();

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* *	This procedure is used to print "internal" error messages for amu_, and
   *	signal amu_error to indicate that an error has occurred, in case there is
   *	some procedure which wishes to handle it.
   *
   *	Cribbed from ssu_error_, 08/25/80 W. Olin Sibert */

dcl  arg_count fixed bin;
dcl  args_needed fixed bin;
dcl  entry fixed bin;
dcl  arg_list_ptr pointer;

dcl  error_code fixed bin (35);
dcl  caller_name char (72) varying;
dcl  aligned_error_message char (100) aligned;
dcl  error_message char (100) varying;
dcl  user_message_buffer char (1500);
dcl  user_message_lth fixed bin (21);
dcl  user_message char (user_message_lth) based (addr (user_message_buffer));

dcl  1 auto_error_info aligned like amu_error_info automatic;
dcl  1 cond_info aligned like condition_info;

dcl  iox_$error_output pointer external static;

dcl  arg_assign_$from_arg entry options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$cl entry (bit (1) aligned);
dcl  cu_$caller_ptr entry (pointer);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  ioa_$ioa_switch entry options (variable);
dcl  signal_ entry options (variable);
dcl  sub_err_ entry options (variable);
dcl  (
     ERROR init (1),
     ERROR_WITH_INFO init (2),
     FOR_CALLER init (3)
     ) fixed bin internal static options (constant);

dcl  (addr, length, null, rtrim, size, string, unspec) builtin;

%page;
/* amu_error_: procedure options (variable);		primary entry -- no info structure */
	entry = ERROR;
	args_needed = 2;
	goto COMMON;


amu_error_$info:					/* entry which also includes an info_ptr */
     entry options (variable);

	entry = ERROR_WITH_INFO;
	args_needed = 3;				/* call amu_error_$info (aip, info_ptr, code, [optional args]) */
	goto COMMON;


amu_error_$for_caller:				/* Entry for com_err_ like messages with a caller-name */
     entry options (variable);

	entry = FOR_CALLER;
	args_needed = 3;
	goto COMMON;


COMMON:
	call cu_$arg_count (arg_count);
	if arg_count < args_needed then do;
INVALID_ERROR_CALL:
	     call sub_err_ (0, "amu_error_", "s", (null ()), 0,
		"Invalid argument list argument missing or type mismatch. ^d arguments needed.", args_needed);
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);

	call arg_assign_$from_arg (arg_list_ptr, 1, amu_info_ptr);
						/* first two arguments are always amu_info_ptr, code */
	call arg_assign_$from_arg (arg_list_ptr, 2, error_code);

	if entry = FOR_CALLER then
	     call arg_assign_$from_arg (arg_list_ptr, 3, caller_name);
	else caller_name = "";
	caller_name = rtrim (caller_name);		/* because assign_$computational_ is too lazy to do it */

	if entry = ERROR_WITH_INFO then
	     call arg_assign_$from_arg (arg_list_ptr, 3, amu_error_info_ptr);
	else amu_error_info_ptr = null ();

	if error_code ^= 0 then do;			/* get the error message */
	     call convert_status_code_ (error_code, (""), aligned_error_message);
	     error_message = rtrim (aligned_error_message);
	     error_message = error_message || " ";
	     end;
	else error_message = "";

	if arg_count > args_needed then		/* pick up optional ioa_ arguments */
	     call ioa_$general_rs (arg_list_ptr, (args_needed + 1), (args_needed + 2), user_message_buffer,
		user_message_lth, ("1"b), ("0"b));

	else user_message_lth = 0;			/* otherwise, no user message */

	if (length (user_message) = 0) & (length (error_message) = 0) then error_message = "Error occurred.";

	if length (caller_name) = 0 then
	     caller_name = "amu_: ";
	else caller_name = caller_name || ": ";

	if amu_error_info_ptr = null () then do;	/* use our automatic copy */
	     amu_error_info_ptr = addr (auto_error_info);
	     unspec (amu_error_info) = ""b;
	     amu_error_info.mc_ptr = null ();
	     end;

	amu_error_info.length = size (amu_error_info);	/* fill in the standard header */
	amu_error_info.version = 1;
	string (amu_error_info.action_flags) = ""b;
	amu_error_info.action_flags.default_restart = "1"b;
						/* restart this by default */
	amu_error_info.status_code = error_code;
	amu_error_info.info_string = caller_name;
	amu_error_info.info_string = amu_error_info.info_string || error_message;
	amu_error_info.info_string = amu_error_info.info_string || user_message;

	amu_error_info.aip = amu_info_ptr;		/* now, fill in some variables */
	call cu_$caller_ptr (amu_error_info.caller_ptr);

	if amu_info_ptr = null () then /* don't signal if nothing there, either */ goto PRINT_MESSAGE;

	if ^amu_info.handler_exists then /* don't bother signalling, since there's nobody there */ goto PRINT_MESSAGE;

	unspec (cond_info) = ""b;
	cond_info.version = 1;			/* fill in everything not copied from the error_info */
	cond_info.condition_name = AMU_ERROR_NAME;
	cond_info.info_ptr = amu_error_info_ptr;
	cond_info.wc_ptr = null ();

	cond_info.mc_ptr = amu_error_info.mc_ptr;
	cond_info.loc_ptr = amu_error_info.caller_ptr;
	cond_info.user_loc_ptr = amu_error_info.caller_ptr;

RESIGNAL_ERROR:
	call signal_ (AMU_ERROR_NAME, amu_error_info.mc_ptr, addr (cond_info), null ());

	if amu_error_info.must_restart then return;

	if amu_error_info.cant_restart then goto RESIGNAL_ERROR;

PRINT_MESSAGE:
	if ^amu_error_info.dont_print_message then	/* default case, where handler did nothing */
	     call ioa_$ioa_switch (iox_$error_output, "^a", amu_error_info.info_string);

	if entry = FOR_CALLER then /* these messages are always nonfatal */ return;

	if ^amu_error_info.amu_handled then do;		/* if not set, wasn't fixed up by amu_ */
	     call ioa_$ioa_switch (iox_$error_output, "amu_error_: Returning to command level.");
	     call cu_$cl ("0"b);
	     end;

	return;					/* all done */

%page;
%include amu_info;
%page;
%include amu_error_info;
%page;
/* %include std_descriptor_types;*/
%page;
%include condition_info;

     end amu_error_;				/* external procedure */
