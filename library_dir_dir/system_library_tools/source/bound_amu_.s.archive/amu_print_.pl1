/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(1999-06-23,Haggett):
     Y2K
  2) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

amu_print_: proc;
	return;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Parameters */

dcl  P_data_ptr ptr;
dcl  (P_number_of_words, P_offset) fixed bin (18);
dcl  P_af_lth fixed bin(21);
dcl  P_af_ptr ptr;
dcl  P_amu_info_ptr ptr;
dcl  P_aptep ptr;
dcl  P_apte_offset fixed bin (18);
dcl  P_apte_idx fixed bin;
dcl dmp ptr;
dcl doffset fixed bin(18);
dcl num_of_words fixed bin;

/* External Entries */

dcl  amu_$definition_offset entry (ptr, char (*), char (*), fixed bin (35)) returns (fixed bin (18));
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin, fixed bin (35));
dcl  amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin);
dcl  amu_$fdump_mpt_revert_idx entry (ptr);
dcl  amu_$get_name entry (ptr, ptr) returns (char (*));
dcl  amu_$print_text_offset entry (ptr, char(*) var, fixed bin(18));
dcl  amu_$return_val_cpu_from_idx entry (ptr, fixed bin) returns (char (1));
dcl  amu_$return_val_idx_from_dbr entry (ptr, fixed bin (24)) returns (fixed bin);
dcl  convert_status_code_	entry (fixed bin(35), char(8) aligned, char(100) aligned);
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  decode_clock_value_$date_time	entry (fixed bin(71), fixed bin, fixed bin, fixed bin, fixed bin,
				     fixed bin, fixed bin, fixed bin(71), fixed bin, char(4),
				     fixed bin(35));
dcl  (
     ioa_,
     ioa_$rsnnl
     ) entry () options (variable);

/* External Static */

dcl  iox_$user_io ptr ext static;

/* Automatic */

dcl  af_sw bit(1);
dcl  all_cpu_mask bit (8) init ("11111111"b);
dcl  bcode fixed bin (35);
dcl  char_sw bit (1) unal;
dcl  chars char (64) var;
dcl  code fixed bin (35);
dcl  cpu_str char (8) var init ("");
dcl  data_ptr ptr;
dcl  dom  fixed bin;
dcl  dow  fixed bin;
dcl  good_proc bit (1);
dcl  hour fixed bin;
dcl  ignore fixed bin;
dcl  i;
dcl  iocb_name char (32) aligned;
dcl  iocbp ptr;
dcl  line_size fixed bin;
dcl  line_ptr ptr;
dcl  lines_to_dump fixed bin;
dcl  long_output bit (1);
dcl  longinfo char(100) aligned;
dcl  min  fixed bin;
dcl  mod8 fixed bin;
dcl  month fixed bin;
dcl  msec fixed bin (71);
dcl  nprt bit (1);
dcl  number_of_words fixed bin;
dcl  opl fixed bin;
dcl  pequal bit (1);
dcl  poffset fixed bin (18);
dcl  pp ptr;
dcl  real_offset fixed bin (18);
dcl  sec  fixed bin;
dcl  shortinfo char(8) aligned;
dcl  start_line fixed bin (18);
dcl  t_data (8) fixed bin (35);
dcl  t_offset fixed bin (18);
dcl  t_idx fixed bin;
dcl  t_ptr ptr;
dcl  t_segno fixed bin;
dcl  tp ptr;
dcl  w (0:7) fixed bin based (pp);
dcl  wait_type char (40) var;
dcl  year fixed bin;
dcl  yr_char char(10);
dcl  zone char(4);

/* Based */

dcl  PTRS (0:7) ptr aligned based (pp);
dcl  PPTRS (0:7) ptr unaligned based (pp);
dcl  based_char char (32) based (t_ptr);
dcl  based_event char (4) based;
dcl  inst_word (number_of_words) bit (36) based (data_ptr);
dcl  wab bit (8 * 36) based;

/* Internal static */

dcl  vfmt char (184) int static options (constant)
	init (
	"^6o ^6o^[ ^w^;^2( ^w^)^;^3( ^w^)^;^4( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^] ^w^;^4( ^w^)^[^2s^;^/^6o ^6o^]^2( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^]^3( ^w^)^;^4( ^w^)^[^2s^;^/^6o ^6o^]^4( ^w^)^]"
	);
dcl  pfmt char (208) int static options (constant)
	init (
	"^6o ^6o^[ ^12p^;^2( ^12p^)^;^3( ^12p^)^;^4( ^12p^)^;^4( ^12p^)^[^2s^;^/^6o ^6o^] ^12p^;^4( ^12p^)^[^2s^;^/^6o ^6o^]^2( ^12p^)^;^4( ^12p^)^[^2s^;^/^6o ^6o^]^3( ^12p^)^;^4( ^12p^)^[^2s^;^/^6o ^6o^]^4( ^12p^)^]"
	);

dcl  process_st (0:6) char (9) varying int static options (constant)
	init ("empty", "running", "ready", "waiting", "blocked", "stopped", "ptlocking");

/* Builtins */

dcl  (addr, addrel, after, convert, 
      divide, fixed, length, mod,
      null, rtrim, substr, 
      translate, unspec)		builtin;
				
%page;
/* This code direct from ol_dump_$util_dump_oct */
/* amu_dump_oct - entry to display words in octal depending on line length */
dump_oct:
     entry (dmp, doffset, num_of_words);

	call ioa_ ("");
	long_output = output_mode ();			/* find terminal line length */
	lines_to_dump = divide (num_of_words, 8, 17, 0);	/* find out how many full lines to dump */
	mod8 = 8;
	pp = dmp;
	tp = null;
	poffset = doffset;
	opl = doffset + num_of_words;
	nprt, pequal = "0"b;

	do i = 0 by 8 while (poffset < opl);
	     if nprt then /* if last line was not printed */ pequal = "1"b;
	     if tp ^= null then			/* if not first line */
		if tp -> wab = pp -> wab then		/* and if last line iss equal to this line */
		     nprt = "1"b;			/* then don't print it */
		else nprt = "0"b;			/* else print the line */
	     if pequal & ^nprt then do;		/* if we have skipped n lines print a string of "=" */
		pequal = "0"b;
		call ioa_ ("^7x========");
		end;
	     if ^nprt | lines_to_dump = 0 then do;	/* if we wandt to print line or if last line */
		if lines_to_dump = 0 then mod8 = mod (num_of_words, 8);
		if mod8 ^= 0 then
		     call ioa_ (vfmt, poffset, i, mod8, w (0), w (1), w (2), w (3), long_output, poffset + 4, i + 4,
			w (4), w (5), w (6), w (7));
		end;
	     tp = pp;				/* copy current line pointer for equal line compare */
	     pp = addrel (pp, 8);			/* increment to nxt line */
	     poffset = poffset + 8;
	     lines_to_dump = lines_to_dump - 1;
	end;
	return;
%page;
amu_print_$af_char_dump:
     entry (P_data_ptr, P_offset, P_number_of_words, P_af_ptr, P_af_lth);

dcl  af_str char (P_af_lth) varying based (P_af_ptr);

	af_sw = "1"b;
	goto CHAR_COMMON;

amu_print_$char_dump:
     entry (P_data_ptr, P_offset, P_number_of_words);

	af_sw = "0"b;
CHAR_COMMON:
	data_ptr = P_data_ptr;
	real_offset = P_offset;
	number_of_words = P_number_of_words;
	char_sw = "1"b;
	line_size = 8;
	do start_line = 0 by 8 while ((number_of_words - start_line) > 7);
	     line_ptr = addrel (data_ptr, start_line);
	     call translate_line_to_dump (line_size, line_ptr, chars);
	     if af_sw then call ioa_$rsnnl ("^x^a^a", af_str, ignore, (af_str), chars);
	     else call ioa_ ("^6o^x^6o^x^a", real_offset, start_line, chars);
	     real_offset = real_offset + line_size;
	end;
	line_size = number_of_words - start_line;
	if line_size > 0 then do;
	     line_ptr = addrel (data_ptr, start_line);
	     call translate_line_to_dump (line_size, line_ptr, chars);
	     if af_sw then call ioa_$rsnnl ("^x^a^a", af_str, ignore, (af_str), chars);
	     else call ioa_ ("^6o^x^6o^x^a", real_offset, start_line, chars);
	     end;
	return;					/* end of char dump */
%page;
amu_print_$inst_dump:
     entry (P_data_ptr, P_offset, P_number_of_words);

	data_ptr = P_data_ptr;
	real_offset = P_offset;
	number_of_words = P_number_of_words;
	iocbp = iox_$user_io;
	iocb_name = iocbp -> iocb.name;



	do i = 1 to number_of_words;
	     call amu_$print_text_offset (addr (inst_word (i)), chars, real_offset);
	     call ioa_ ("^a", chars);
	     real_offset = real_offset + 1;
	end;
	return;					/* end of inst_dump */
%page;
amu_print_$apte_bf:
     entry (P_amu_info_ptr, P_aptep, P_apte_offset);
	amu_info_ptr = P_amu_info_ptr;
	aptep = P_aptep;
	good_proc = "1"b;
	call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, amu_info.process_idx);
						/* this way revert will always work */
	sdwp = addr (aptep -> apte.dbr);
	t_idx = amu_$return_val_idx_from_dbr (amu_info_ptr, fixed (substr (unspec (apte.dbr), 1, 24), 24));
	if t_idx = -1 then do;			/* process is not in dump so this is all we can say */
	   good_proc = "0"b;
             end;
          else do;
	     call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, t_idx);
	     t_ptr = addr (t_data);
	     t_segno = hardcore_info.segno.pds;
	     t_offset = amu_$definition_offset (amu_info_ptr, "pds", "process_group_id", code);
	     if code ^= 0 then good_proc = "0"b;
	     call amu_$do_translation (amu_info_ptr, t_segno, t_ptr, t_offset, 8, code);
	     if code ^= 0 then good_proc = "0"b;
	     end;

	wait_type = "";
	if fixed (apte.state, 3) = 3 then do;
	     if apte.wait_event = "400000000000"b3 then
		call ioa_$rsnnl ("^/^16tAST lock ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "200000000000"b3 then
		call ioa_$rsnnl ("^/^16tTemp wiring lock ^12.3b", wait_type, ignore, apte.wait_event);
	     else if substr (apte.wait_event, 1, 30) = "3330000000"b3 then
		call ioa_$rsnnl ("^/^16tVTOC buffer ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "000000000071"b3 then
		call ioa_$rsnnl ("^/^16tTTY DIM ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "000000000075"b3 then
		call ioa_$rsnnl ("^/^16tIMP DIM (arpa) ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "000000000114"b3 then
		call ioa_$rsnnl ("^/^16tNCP (arpa) ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "000000000105"b3 then
		call ioa_$rsnnl ("^/^16tSYSERR LOG EVENT ^12.3b", wait_type, ignore, apte.wait_event);
	     else if substr (apte.wait_event, 1, 18) = "000000"b3 then do;
		if substr (apte.wait_event, 19, 18) = "707070"b3 then
		     call ioa_$rsnnl ("^/^16t-BUG- ^12.3b", wait_type, ignore, apte.wait_event);
		else call ioa_$rsnnl ("^/^16tPAGE ^o", wait_type, ignore, substr (apte.wait_event, 19, 18));
		end;
	     else if addr (apte.wait_event) -> based_event = "dbm_" then
		call ioa_$rsnnl ("^/^16tVD BIT MAP ^12.3b", wait_type, ignore, apte.wait_event);
	     else if addr (apte.wait_event) -> based_event = "free" then
		call ioa_$rsnnl ("^/^16tSystem Free Seg ^12.3b", wait_type, ignore, apte.wait_event);
	     else if addr (apte.wait_event) -> based_event = "dskw" then
		call ioa_$rsnnl ("^/^16tDisk Offline ^12.3b", wait_type, ignore, apte.wait_event);
	     else if apte.wait_event = "777777777777"b3 then
		call ioa_$rsnnl ("^/^16tROOT DIR LOCK ^12.3b", wait_type, ignore, apte.wait_event);
	     else call ioa_$rsnnl ("^/^16tDir Lock UID ^12.3b", wait_type, ignore, apte.wait_event);
	     end;

	if good_proc then 
	   call ioa_ ("^[^3d^;^s^4t^] ^8.3b^16t^9a^24t^12.3b^[^40t^a^;^s^]^43t^a^[^a^]",
	   t_idx >= 0, t_idx, sdw.add, process_st (fixed (apte.state, 3)), apte.processid, 
	   (fixed (apte.state, 3) = 1), amu_$return_val_cpu_from_idx (amu_info_ptr, t_idx),
	   based_char, wait_type ^= "", wait_type);

          else call ioa_ ("^[^3d^;^s^4t^] ^8.3b^16t^9a^24t^12.3b^[^40t^a^;^s^]^43t^32x^[^a^]",
	   t_idx >= 0, t_idx, sdw.add, process_st (fixed (apte.state, 3)), apte.processid, 
	   (fixed (apte.state, 3) = 1), amu_$return_val_cpu_from_idx (amu_info_ptr, t_idx),
	   wait_type ^= "", wait_type);

	call amu_$fdump_mpt_revert_idx (amu_info_ptr);

	return;
%page;
amu_print_$apte:
     entry (P_amu_info_ptr, P_aptep, P_apte_offset, P_apte_idx);

dcl not_dumped bit(1);

	amu_info_ptr = P_amu_info_ptr;
	aptep = P_aptep;
	sdwp = addr (aptep -> apte.dbr);
          not_dumped = "0"b;

	if P_apte_idx ^= -1 then call ioa_ ("^/APTE #^o at ADDR ^o:", P_apte_idx, P_apte_offset);

	t_idx = amu_$return_val_idx_from_dbr (amu_info_ptr, fixed (substr (unspec (apte.dbr), 1, 24), 24));
	if t_idx = -1 then do;
	   not_dumped = "1"b;;			/* process is not in dump so this is all we can say */
	   end;
	else do;
	   call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, t_idx);
	   t_ptr = addr (t_data);
	   t_segno = hardcore_info.segno.pds;
	   t_offset = amu_$definition_offset (amu_info_ptr, "pds", "process_group_id", code);
	   if code ^= 0 then goto revert;
	   call amu_$do_translation (amu_info_ptr, t_segno, t_ptr, t_offset, 8, code);
	   if code ^= 0 then goto revert;
             end;
        
	call ioa_ ("Processid:  ^12.3b (^[Not Dumped^;^a^]); ^[^s^;DBR:^-  ^o^]", apte.processid,  not_dumped, based_char,
                     not_dumped, fixed (sdw.add, 24));
          zone = "";
	call decode_clock_value_$date_time(apte.state_change_time, month, dom, year, hour, min, sec, msec, dow, zone, code);
	if code ^= 0 then do;
	   call convert_status_code_(code, shortinfo, longinfo);
	   call ioa_("^a: While getting time for apte # ^o.", rtrim(longinfo),P_apte_idx);
             end;
	else do;
	   /*** yr_char = convert(yr_char, year);*/
	   call ioa_ ("State:^-  ^a at ^d/^d/^a ^d:^d:^d.^d", process_st (fixed (apte.state, 3)), 
                          month,dom,mod(year,100),hour,min,sec,msec);
	   end;

revert:
	call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	return;

%page;
dump_ptr:
     entry (dmp, doffset, num_of_words);

	call ioa_ ("");
	long_output = output_mode ();			/* find terminal line length */
	lines_to_dump = divide (num_of_words, 8, 17, 0);	/* find out how many full lines to dump */
	pp = dmp;
	poffset = doffset;
	mod8 = 8;
	opl = doffset + num_of_words;

	do i = 0 by 8 while (poffset <= opl);
	     if lines_to_dump = 0 then mod8 = mod (num_of_words, 8);
	     if mod8 ^= 0 then
		call ioa_ (pfmt, poffset, i, mod8, PTRS (0), PTRS (1), PTRS (2), PTRS (3), long_output, poffset + 8,
		     i + 8, PTRS (4), PTRS (5), PTRS (6), PTRS (7));

	     pp = addrel (pp, 16);			/* increment to nxt line */
	     poffset = poffset + 16;
	     lines_to_dump = lines_to_dump - 1;
	end;
	return;

%page;
dump_ptr_exp:
     entry (P_amu_info_ptr, dmp, doffset, num_of_words);

dcl  PRINT_PTR ptr aligned based (pp);
dcl  ptrs_printed fixed bin;

	amu_info_ptr = P_amu_info_ptr;
	call ioa_ ("");
	pp = dmp;
	poffset = doffset;
	ptrs_printed = 0;

	do i = 0 by 2 while (ptrs_printed < num_of_words);
	     call ioa_ ("^6o ^6o ^12p ^a", poffset, i, PRINT_PTR, amu_$get_name (amu_info_ptr, PRINT_PTR));
	     pp = addrel (pp, 2);			/* increment to nxt line */
	     poffset = poffset + 2;
	     ptrs_printed = ptrs_printed + 1;
	end;
	return;

%page;
dump_pptr:
     entry (dmp, doffset, num_of_words);


	call ioa_ ("");
	long_output = output_mode ();			/* find terminal line length */
	lines_to_dump = divide (num_of_words, 8, 17, 0);	/* find out how many full lines to dump */
	pp = dmp;
	poffset = doffset;
	mod8 = 8;
	opl = doffset + num_of_words;

	do i = 0 by 8 while (poffset <= opl);
	     if lines_to_dump = 0 then mod8 = mod (num_of_words, 8);
	     if mod8 ^= 0 then
		call ioa_ (pfmt, poffset, i, mod8, PPTRS (0), PPTRS (1), PPTRS (2), PPTRS (3), long_output,
		     poffset + 8, i + 8, PPTRS (4), PPTRS (5), PPTRS (6), PPTRS (7));

	     pp = addrel (pp, 8);			/* increment to nxt line */
	     poffset = poffset + 8;
	     lines_to_dump = lines_to_dump - 1;
	end;
	return;

%page;
dump_pptr_exp:
     entry (P_amu_info_ptr, dmp, doffset, num_of_words);

dcl  PRINT_PPTR ptr unaligned based (pp);
dcl  pptrs_printed fixed bin;
dcl  temp_pptr ptr;

	amu_info_ptr = P_amu_info_ptr;
	call ioa_ ("");
	pp = dmp;
	poffset = doffset;
	pptrs_printed = 0;

	do i = 0 by 1 while (pptrs_printed < num_of_words);
	     temp_pptr = PRINT_PPTR;
	     call ioa_ ("^6o ^6o ^12p ^a", poffset, i, PRINT_PPTR, amu_$get_name (amu_info_ptr, temp_pptr));
	     pp = addrel (pp, i);			/* increment to nxt line */
	     poffset = poffset + 1;
	     pptrs_printed = pptrs_printed + 1;
	end;
	return;

%page;
/* output_mode - entry to determine  long/short output mode based on terminal or file line length */

output_mode:
     proc returns (bit (1));

dcl  oml fixed bin;
	oml = get_line_length_$switch (null, bcode);	/* find terminal line length */
	if oml < 118 & bcode = 0 then			/* if ll < 118 and not a file */
	     return ("0"b);				/* 4 words / line */
	else return ("1"b);				/* 8 words / line */
     end output_mode;
%page;
translate_line_to_dump:
     proc (wds_in_line, line_ptr, new_chars_to_print);

/* Formal Parameters */

dcl  wds_in_line fixed bin;
dcl  line_ptr ptr;
dcl  new_chars_to_print char (64) varying;

/* Automatic, structures for accessing the input line and subrutine return args */


dcl  ascii_chars char (wds_in_line * 4) based (line_ptr);

dcl  i fixed bin;					/* character string index */
dcl  temp_overlay char (64);				/* used to make this a quick block */
dcl  temp_ascii char (length (ascii_chars)) based (addr (temp_overlay));

/* Constants */

dcl  dots char (33) aligned internal static options (constant) init ((33)".");
dcl  nonprinting_chars char (33) aligned internal static init (" 	
") options (constant);

dcl  last_ascii char (1) aligned internal static options (constant) initial ("");
						/* last ascii char code */

	new_chars_to_print = "";

	if char_sw then do;
	     temp_ascii = ascii_chars;
	     do i = 1 to length (ascii_chars) by 1;	/* set illegal characters to 0 */
		if substr (ascii_chars, i, 1) > last_ascii then substr (temp_ascii, i, 1) = " ";
	     end;					/* set illegal characters to 0 */
	     new_chars_to_print = translate (temp_ascii, dots, nonprinting_chars);
	     end;

     end translate_line_to_dump;
%page;
%include apte;
%page;
%include amu_info;
%page;
%include sdw;
%page;
%include amu_hardcore_info;
%page;
%include iocb;

     end amu_print_;
