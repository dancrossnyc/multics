/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-01-16,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-17,Fawcett), install(87-07-28,MR12.1-1049):
     Turn on the "replaced" flag in the translation_table when segment is
     replaced.
                                                   END HISTORY COMMENTS */


amu_replace_trans_: proc (P_amu_info_ptr, P_dir_name, P_entry_name, P_segno, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  P_amu_info_ptr ptr;
dcl  P_dir_name char (168);
dcl  P_entry_name char (32);
dcl  P_segno fixed bin;
dcl  P_code fixed bin (35);

dcl  1 trans_space like translation;
dcl  bit_count fixed bin (24);
dcl  seg_ptr ptr;
dcl  changed_idx bit (1);
dcl  code fixed bin (35);
dcl  old_proc_idx fixed bin;
dcl  segno fixed bin;
dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
dcl  amu_$fdump_mpt_revert_idx entry (ptr);
dcl  amu_$return_val_per_process entry (ptr, fixed bin) returns (bit (1));
dcl  amu_$translate_force_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));

dcl (addr, divide, mod, null) builtin;

	segno = P_segno;	
	changed_idx = ""b;
	amu_info_ptr = P_amu_info_ptr;
	translation_ptr = addr (trans_space);
	old_proc_idx = -1;
	if ^amu_$return_val_per_process (amu_info_ptr, segno) then do;
	     old_proc_idx = amu_info.process_idx;
	     if amu_info.type ^= SAVED_PROC_TYPE then call amu_$fdump_mpt_change_idx (amu_info_ptr, 0);
	     changed_idx = "1"b;
	end;

	seg_ptr = null ();
	call hcs_$initiate_count (P_dir_name, P_entry_name, "", bit_count, 1, seg_ptr, code);
	if seg_ptr = null () then do;
	     P_code = code;
	     return;
	     end;
	translation.segno = P_segno;
	translation.flags.two_part = "0"b;
	translation.flags.in_dump = "0"b;
	translation.flags.in_temp_seg = "0"b;
	translation.flags.in_perm_seg = "1"b;
	translation.part1.ptr = seg_ptr;
	translation.part1.lth = divide (bit_count, 36, 19);
	if mod (bit_count, 36) > 0 then translation.part1.lth = translation.part1.lth + 1;
	translation.part2.ptr = null ();
	translation.part2.lth = 0;
	translation.flags.replaced = "1"b;
	call amu_$translate_force_add (amu_info_ptr, translation_ptr, P_segno, code);
	if changed_idx then call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	if code ^= 0 then do;
	     P_code = code;
	     return;

	     end;
	P_code = 0;
	return;
%page;
%include amu_translation;
%page;
%include amu_info;
     end amu_replace_trans_;

