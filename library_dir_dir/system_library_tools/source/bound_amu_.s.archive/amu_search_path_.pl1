/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_search_path_: proc;
	return;					/* not an entry */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  P_dump_path_ptr ptr;
dcl  P_object_path_ptr ptr;
dcl  P_fdump_name char (*);
dcl  P_code fixed bin (35);
dcl  search_paths_$set entry (char (*), ptr, ptr, fixed bin (35));
dcl  search_paths_$get entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
dcl  cleanup condition;
dcl  system_free_area area based (system_free_ptr);
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  (
     error_table_$new_search_list,
     error_table_$action_not_performed,
     error_table_$nomatch,
     error_table_$no_search_list
     ) fixed bin (35) ext static;
dcl  system_free_ptr ptr;
dcl  com_err_ entry () options (variable);
dcl  ecode fixed bin (35);
dcl  sl_name char (32) init ("");
dcl  my_entry_name char (32);
dcl  starname char (32);
dcl  not_found bit (1);
dcl  path_idx fixed bin;
dcl  get_dump_paths bit (1) init ("0"b);
dcl  get_object_paths bit (1) init ("0"b);
dcl  (addr, null, sum) builtin;


%page;
amu_search_path_$get_dump_paths:
     entry (P_dump_path_ptr, P_code);

	my_entry_name = "amu_search_path_$get_dump_paths";
	get_dump_paths = "1"b;
	go to dump_common;

amu_search_path_$set_dump_paths:
     entry (P_dump_path_ptr, P_fdump_name, P_code);

	my_entry_name = "amu_search_path_$set_dump_paths";
	get_dump_paths = "0"b;
dump_common:
	sl_name = "dumps";
	system_free_ptr = get_system_free_area_ ();
	call search_paths_$get (sl_name, sl_control_default, "", null (), system_free_ptr, sl_info_version_1, sl_info_p,
	     ecode);

	if ecode = error_table_$no_search_list then do;	/* set default */
	     sl_info_num_paths = 1;
	     allocate sl_info in (system_free_area) set (sl_info_p);
	     sl_info.version = sl_info_version_1;
	     sl_info.num_paths = 1;
	     sl_info.paths (1).code = 0;
	     sl_info.paths (1).type = ABSOLUTE_PATH;
	     sl_info.paths (1).pathname = ">dumps";

	     call search_paths_$set (sl_name, null (), sl_info_p, ecode);
	     if ecode ^= 0 then do;
		if ecode ^= error_table_$new_search_list then do;
		     P_dump_path_ptr = null ();
		     P_code = ecode;
		     end;
		else ecode = 0;
		end;
	     end;

	else if ecode ^= 0 then do;
	      P_code = ecode;
	     return;
	     end;

	if get_dump_paths = "1"b then do;
	     P_dump_path_ptr = sl_info_p;
	     P_code = ecode;
	     return;
	     end;

	not_found = "1"b;
	do path_idx = 1 to sl_info.num_paths while (not_found);
	     call check_dir (sl_info.paths (path_idx).pathname, not_found);
	     if ^not_found then goto FOUND_DUMP;
	end;
	if not_found then do;
	     P_dump_path_ptr = null ();
	     P_code = ecode;
	     return;
	     end;
FOUND_DUMP:
	P_dump_path_ptr = addr (sl_info.paths (path_idx).pathname);
	P_code = 0;
	return;
%page;
amu_search_path_$get_object_paths:
     entry (P_object_path_ptr, P_code);

	get_object_paths = "1"b;
	go to object_common;

amu_search_path_$set_object_paths:
     entry (P_object_path_ptr, P_code);

	get_object_paths = "0"b;

object_common:
	sl_name = "hardcore";
	system_free_ptr = get_system_free_area_ ();
	call search_paths_$get (sl_name, sl_control_default, "", null (), system_free_ptr, sl_info_version_1, sl_info_p,
	     ecode);
	if ecode = error_table_$no_search_list then do;	/* set default */
	     sl_info_num_paths = 1;
	     allocate sl_info in (system_free_area) set (sl_info_p);
	     sl_info.version = sl_info_version_1;
	     sl_info.num_paths = 1;
	     sl_info.paths (1).code = 0;
	     sl_info.paths (1).type = ABSOLUTE_PATH;
	     sl_info.paths (1).pathname = ">library_dir_dir>hardcore>execution";
	     call search_paths_$set (sl_name, null (), sl_info_p, ecode);
	     if ecode ^= 0 then do;
		if ecode ^= error_table_$new_search_list then do;
		     P_object_path_ptr = null ();
		     P_code = ecode;
		     end;
		else ecode = 0;
		end;
	     end;

	P_object_path_ptr = sl_info_p;
	P_code = ecode;
	return;

%page;
check_dir:
     proc (check_path, not_here);
dcl  check_path char (168);
dcl  not_here bit (1);
dcl  dirname char (168);
	dirname = check_path;
	starname = "*.*.0." || P_fdump_name;
	star_entry_ptr = null ();
	star_names_ptr = null ();

	on condition (cleanup)
	     begin;

		if star_names_ptr ^= null () then free star_names in (system_free_area);
		if star_entry_ptr ^= null () then free star_entries in (system_free_area);
	     end;


	call hcs_$star_ (dirname, starname, star_ALL_ENTRIES, addr (system_free_area), star_entry_count, star_entry_ptr,
	     star_names_ptr, ecode);
	if ecode ^= 0 then do;
	     if ecode = error_table_$nomatch then do;
		not_here = "1"b;
		goto FREE;
		end;
	     else do;
		not_here = "1"b;
		call com_err_ (ecode, my_entry_name, "");
		end;
	     end;					/* found it */
	not_here = "0"b;
FREE:
	if star_names_ptr ^= null () then free star_names in (system_free_area);
	if star_entry_ptr ^= null () then free star_entries in (system_free_area);
	revert condition (cleanup);
	if star_entry_count > 1 then do;		/* must have only one */
	     call ioa_ ("There appear to be several copies of ERF ^a in ^a", P_fdump_name, dirname);
	     ecode = error_table_$action_not_performed;
	     end;

     end check_dir;
%page;
%include sl_info;
%page;
%include sl_control_s;
%page;
%include star_structures;


     end amu_search_path_;



