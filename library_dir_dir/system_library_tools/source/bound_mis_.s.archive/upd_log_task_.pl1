/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(2019-10-20,GDixon), approve(2019-10-26,MCR10068),
     audit(2019-11-03,Swenson), install(2019-11-03,MR12.6g-0033):
      - Fix ticket #193: Initialize Installations.info if created by the $lock call.
      - Modernize code.
      - Always terminate all files which have been initiated.
                                                   END HISTORY COMMENTS */


upd_log_task_:	procedure;


     dcl						/*	automatic variables			*/
	Plock			ptr,		/* ptr to the lock segment.			*/
	Plog			ptr,		/* ptr to log/info segment.			*/
	Stype			fixed bin(2),	/* type of found installation log;  1 = segment,	*/
						/* 2 = directory, 3 = MSF.			*/
	(bitc, bitct)		fixed bin(24),	/* bit count				*/
	created_lock_file_sw	bit(1) aligned,	/* ON if lock file created in this call.	*/
	created_log_file_sw		bit(1) aligned,	/* ON if log  file created in this call.	*/
	dir			char(168),	/* directory part of log_name (absolute) path	*/
	dummy_code		fixed bin(35),	/* dummy code value 			*/
	e			fixed bin,	/* entry variable		 		*/
	entry			char(32),		/* entry part of log_name (absolute) path	*/
	lock_seg			char(32),		/* entry part of properly-suffixed lock seg path.	*/
	log_file			char(32),		/* entry part of found log file's path.		*/
	path			char(168),	/* absolute path name of found installation log.	*/
	time			fixed bin;	/* time (in sec) we will wait for lock to unlock	*/

     dcl						/*	based variables			*/
	1 lock			based (Plock),	/* structure of the lock segment.		*/
	  2 word			bit(36) aligned,	/* the lock word.				*/
	  2 process_group_id	char(32) aligned,	/* installer who has locked the lock.		*/
	  2 program		char(65) aligned;	/* the program he is running which did the locking*/

     dcl  1 acl aligned,				/*  acl structure				*/
	 2  userid char (32),			/* user id				*/
	 2  mode bit(36),				/* access mode				*/
	 2  pad bit(36) init ("0"b),			/* padding				*/
	 2  code fixed bin (35);			/* error code				*/

     dcl  1 diracl aligned,				/* directory acl structure			*/
	 2  userid char (32),			/* user					*/
	 2  dir_mode bit (36),			/* bits 1-3 are "sma"			*/
	 2  code fixed bin (35);			/* error code				*/

     dcl  binary_mode		fixed bin(5),	/* installer's access mode to found log.	*/
	1 string_mode,				/*  - mode converted to a bit string.		*/
	 2 pad1		 	bit (1),
	 2 read			bit (1),
	 2 execute		bit (1),
	 2 write			bit (1),
	 2 pad2			bit (1),
	1 mode,					/*  - mode as a standard bit string.		*/
	 2 read		 	bit (1),
	 2 execute		bit (1),
	 2 write			bit (1);

     dcl						/* 	entries and builtin functions		*/
	(addr, bit, null, string)	builtin,
	cleanup			condition,
	expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	get_group_id_		entry returns (char(32) aligned),
	get_group_id_$tag_star	entry returns (char(32) aligned),
	hcs_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$add_dir_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
          initiate_file_		entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35)),
	initiate_file_$create	entry (char(*), char(*), bit(*), ptr, bit(1) aligned, fixed bin(24), 
				     fixed bin(35)),
	pathname_			entry (char(*), char(*)) returns(char(168)),
	set_lock_$lock		entry (bit(36) aligned, fixed bin, fixed bin(35)),
	set_lock_$unlock		entry (bit(36) aligned, fixed bin(35)),
	suffixed_name_$find		entry (char(*), char(*), char(*), char(32), fixed bin(2), fixed bin(5), 
				       fixed bin(35)),
	suffixed_name_$new_suffix	entry (char(*), char(*), char(*), char(32), fixed bin(35)),
	terminate_file_		entry (ptr, fixed bin(24), bit(*), fixed bin(35)),
	upd_print_err_		entry options (variable);

     dcl						/*	static variables			*/
	directory			fixed bin(2) int static init (2),
	error_table_$dirseg		fixed bin(35) ext static,
	error_table_$file_is_full	fixed bin(35) ext static,
	error_table_$incorrect_access	fixed bin(35) ext static,
	error_table_$invalid_lock_reset
				fixed bin(35) ext static,
	error_table_$locked_by_this_process
				fixed bin(35) ext static,
	error_table_$lock_wait_time_exceeded
				fixed bin(35) ext static,
	error_table_$noentry	fixed bin(35) ext static,
	error_table_$no_r_permission	fixed bin(35) ext static,
	error_table_$no_w_permission	fixed bin(35) ext static,
	msf			fixed bin(2) int static init (3),
	proc			char (13) aligned int static init ("upd_log_task_");
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lock:	entry (log_name, suffix, code);
						/* ARGUMENT DECLARATIONS			*/
  dcl  	log_name			char(*),		/* relative or absolute path of installation log	*/
	suffix			char(*),		/* suffix of file being modified: log or info	*/
	code			fixed bin(35);	/* a status code.				*/

	e = 1;
	go to COMMON;

unlock:	entry (log_name, suffix, code);

	e = 2;

COMMON:   call expand_pathname_$add_suffix (log_name, suffix, dir, entry, code);
	if code ^= 0 then				/* split the path into directory and entry parts.	*/
	     return;
	call suffixed_name_$new_suffix (entry, suffix, "lock", lock_seg, code);
	if code ^= 0 then				/* get name of lock segment assoc. with log.	*/
	     return;

	Plock, Plog = null;				/* Ensure no files remain initiated when this 	*/
	on cleanup call upd_log_task_janitor();		/*  program returns.			*/

	go to start(e);

start(1): acl.userid = get_group_id_$tag_star();		/* find out who the installer is.		*/
	acl.mode = RW_ACCESS;			/* set his "mode" to "rw".			*/
	acl.code = 0;				/* zap error code.				*/
lock_seg_initiate:
	call initiate_file_$create (dir, lock_seg, RW_ACCESS, Plock, created_lock_file_sw, bitc, code);
	if  (code = error_table_$no_r_permission | code = error_table_$no_w_permission)  then do;
						/* Existing segment has wrong access.		*/
	     call hcs_$add_acl_entries (dir, lock_seg, addr(acl), 1, code);
	     if code ^= 0 then			/*  - No access to change lock seg ACL.		*/
		go to RETURN;
	     if Plock = null() then			/*  - Initiate failed due to wrong access.	*/
		go to lock_seg_initiate;		/*     Try to initiate again.	 No infinite loop	*/
	     end;					/*     because added ACL worked above.		*/
	else  if Plock = null  then			/*  - Some other lack-of-access code.		*/
	     go to RETURN;				/*     Cannot access lock segment.		*/
	else  if created_lock_file_sw  then		/* if we had to create the lock segment, then	*/
						/* warn the installer.			*/
	     call upd_print_err_ (0, 0, "Warning", "", proc, "", "^2xCreating  ^a>^a.", dir, lock_seg);

	time = 60;				/* lock the lock segment.  Wait 60 sec for it to	*/
lock_it:	call set_lock_$lock (lock.word, time, code);	/* be unlocked, if its already locked.		*/
	if code ^= 0 then do;
	     if code = error_table_$invalid_lock_reset then do;
		call upd_print_err_ ( code, 0, "Warning", "", proc, "",
		     "^/^a ^R^a>^a^B  ^/^a", "Installation lock segment",
		     dir, lock_seg, "The lock has been re-locked by this process.");
		code = 0;				/* someone had it locked when his process or	*/
		end;				/* system failed.				*/
	     else
		if code = error_table_$locked_by_this_process then
		code = 0;				/* I was the guy that previously locked it.	*/
	     else
		if code = error_table_$lock_wait_time_exceeded then do;
		     if time = 60 then do;		/* if its already locked, tell user.		*/
		          call upd_print_err_ (code, 0, "Warning", "", proc, "",
			     "^/^a  ^R^a>^a^B  ^/^a  ^a (^a).^/^a ^a.", "Installation lock segment",
			     dir, lock_seg, "has been locked for  1  minute by", lock.process_group_id,
			     lock.program, proc, "will continue waiting on this lock for  20  minutes");
		          time = 1200;		/* this time, wait for 20 minutes on the lock.	*/
		          go to lock_it;
		          end;
		     else				/* if lock isn't unlocked after 21 minutes, then	*/
			go to RETURN;		/* quit.					*/
		end;
	     end;
	lock.process_group_id = get_group_id_();	/* it's locked.				*/
	lock.program = proc;			/* let other processes know who's in control.	*/

	call suffixed_name_$find (dir, entry, suffix, log_file, Stype, binary_mode, code);
						/* find the installation log/info file.		*/
	string(string_mode) = bit(binary_mode);		/* Convert mode to standard bit-string form.	*/
	mode = string_mode, by name;
	path = pathname_(dir, log_file);		/* Get absolute pathname of log file.		*/

	if (code = 0 | code = error_table_$incorrect_access) then do;
						/* log exists.				*/
	     if Stype = directory then do;		/* make sure it's not a directory.		*/
		code = error_table_$dirseg;
		go to un_lock;
		end;
	     else if Stype = msf then do;		/* if log is an MSF, then make sure installer is	*/
						/* on the ACL of the MSF directory.		*/
		if suffix = "info" then do;		/*  - unless it's an info file, in which case	*/
		     code = error_table_$file_is_full;	/*    we don't allow further expansion.		*/
		     go to un_lock;
		     end;
		diracl.dir_mode = SMA_ACCESS;		/* who is the installer			*/
		diracl.userid = get_group_id_$tag_star();
		diracl.code = 0;
		call hcs_$add_dir_acl_entries (path, "", addr(diracl), 1, code);
		if code ^= 0 then
		     go to un_lock;
		end;
						/* and if it's a segment,			*/
	     else if  string(mode) & RW_ACCESS ^= RW_ACCESS  then do;
						/*  - make sure installer has access to the log.	*/
		call hcs_$add_acl_entries (dir, log_file, addr(acl), 1, code);
		if code ^= 0 then
		     go to un_lock;
		end;
	     end;
	else
	     if code = error_table_$noentry then do;	/* if there's no entry, then warn the installer	*/
		call upd_print_err_ (0, 0, "Warning", "", proc, "", "^2xCreating  ^a>^a.", dir, log_file);
		call initiate_file_$create (dir, log_file, RW_ACCESS, Plog, created_log_file_sw, bitct, code);
		if code ^= 0 then
		     goto un_lock;
		end;
	else					/* the only other error is incorrect_access.	*/
	     go to un_lock;				/* entlong cannot happen since we already made 	*/
						/* the lock_seg name.  Tell user.		*/
	go to RETURN;


start(2):
	call initiate_file_ (dir, lock_seg, RW_ACCESS, Plock, bitc, code);
	if Plock = null then
	     return;				/* something's wrong.			*/

un_lock:	call set_lock_$unlock (lock.word, dummy_code);	/* unlock the lock segment.			*/
	if dummy_code ^= 0 then
	     call upd_print_err_ (dummy_code, 0, "Warning", "", proc, "^/While unlocking  ^a>^a.",
		dir, lock_seg);

RETURN:	call upd_log_task_janitor();
	return;					/* That's All, Folks!			*/

upd_log_task_janitor:
	proc();

	call terminate_file_(Plock, 0, TERM_FILE_TERM, dummy_code);
	call terminate_file_(Plog,  0, TERM_FILE_TERM, dummy_code);
						/* clean up completely.			*/
	end;
%page;
%include access_mode_values;
%include terminate_file;
	end upd_log_task_;
