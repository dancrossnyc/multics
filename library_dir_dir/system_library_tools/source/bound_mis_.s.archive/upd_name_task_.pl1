/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_name_task_:	procedure
		options ( rename (( alloc_, smart_alloc_)) );

/*

	This procedure includes all name task primitives for the Multics Online
	Updater; the following are entries:

		upd_name_task_$list		list names on branch
		upd_name_task_$list_archive	list archive component names
		upd_name_task_$add		add names
		upd_name_task_$delete	delete names
		upd_name_task_$free		transform (name -> name.1 -> name.2 ...)
					for primary name on segment; otherwise delete name

	Calling sequences are identical for all entries, being:

	     call upd_name_task_$xxx (ctlw, areap, parentp, acode, asev, taskp, seqno,
		dir, seg, uid, np, nn);

	     (1)	ctlw	bit(36) aligned	updater task control word
	     (2)	areap	ptr		caller area pointer
	     (3)	parentp	ptr		parent arglist pointer
	     (4)	acode	fixed bin(35)	status code
	     (5)	asev	fixed bin		severity code
	     (6)	taskp	ptr		task pointer
	     (7)	seqno	fixed bin		task sequence no.
	     (8)	dir	char(168)		dirname of affected segment
	     (9)	seg	char(32)		entryname of segment
	    (10)	msgseg	char(32)		entryname of segment for use in messages
	    (11)	uid	bit(36) aligned	unique id of segment (may be ""b)
	    (12)	np	ptr		pointer to names structure
	    (13)	nn	fixed bin		count of names in structure

	These entry points are restartable, e.g. after a system or process failure,
	and are also invertible, i.e. by repeating the call with c.rsw set, all
	processing which was done may be undone, even after an abnormal termination.
	In order that these functions may operate correctly, it is necessary that
	"acode", "asev", and "taskp" be initialized to "0", "0", and "null",
	respectively, and that for the "add", "delete", and "free" entry points,
	names(i).pcode be initialized to error_table_$not_done, and names(i).rcode
	to "0".  The "list" and "list_archive" entry points properly initialize
	the latter two in "names" arrays output by them.  These two entry points
	additionally require that "np" be initially null.

	P. Bos, May 1972

     Modified: 09/04/81 by GA Texada to call appropriate hcs_ entries on likage_error.

*/
/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	ctlw			bit(36) aligned,	/* updater control word */
	areap			ptr,		/* caller-supplied area */
	parentp			ptr,		/* parent arglist pointer */
	acode			fixed bin(35),	/* status code */
	asev			fixed bin,	/* severity code */
	taskp			ptr,		/* task pointer */
	seqno			fixed bin,	/* task sequence no. */
	dir			char(168),	/* dirname of affected segment */
	seg			char(32),		/* entryname of segment */
	msgseg			char(32),		/* entryname of segment for use in messages */
	uid			bit(36) aligned,	/* unique id of segment */
	np			ptr,		/* pointer to names array */
	nn			fixed bin;	/* count */

     dcl	archive_util_$disected_element entry (ptr, ptr, char(32) aligned, fixed bin(24), fixed bin(35)),
	archive_util_$first_disected	entry (ptr, ptr, char(32) aligned, fixed bin(24), fixed bin(35)),
	chname_file_entry		entry (char(*), char(*), char(*), char(*), fixed bin(35))variable,
	cu_$arg_list_ptr		entry (ptr),
	hcs_$chname_file		entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	hcs_$initiate		entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
	ioa_$ioa_stream		entry options (variable),
	upd_add_task_		entry (char(*), ptr),
	upd_free_name_		entry (char(*), char(*), fixed bin(35)),
	upd_free_name_$restore	entry (char(*), char(*), fixed bin(35)),
	installation_tools_$chname_file	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	upd_print_err_		entry options (variable),
	upd_print_names_		entry (ptr, fixed bin, bit(*)),
	upd_status_		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	upd_status_$long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	upd_task_err_		entry options (variable);

     dcl (addr, fixed, null, ptr)	builtin;

     dcl linkage_error		condition;

     dcl (error_table_$archive_fmt_err,
	error_table_$namedup,
	error_table_$nonamerr,
	error_table_$not_done,
	error_table_$oldnamerr,
	error_table_$segknown,
	error_table_$segnamedup,
	error_table_$too_many_names,
	error_table_$non_matching_uid,
	error_table_$zero_length_seg)	ext fixed bin(35);

     dcl	aname			char(32) aligned,	/* name arg for archive_util_ */
	entry (5)			char(32) int static init (
				"upd_name_task_$list",
				"upd_name_task_$list_archive",
				"upd_name_task_$add",
				"upd_name_task_$delete",
				"upd_name_task_$free"),
						/* name of entry which was called */
	name			char(32) based (nmp),	/* for name changes */
	name_array (n)		char(32) based (p);	/* temp name array (for status_, etc.) */

     dcl	msg (5)			char(15) aligned int static init ("Get names",
				"Get comp names", "Add names", "Delete names", "Free names");

     dcl	argp			ptr,		/* arglist pointer */
	cdp			ptr,		/* base pointer for "cd" */
	cp			ptr,		/* control word pointer */
	nmp			ptr,		/* base pointer for "name" */
         (p, q, r)			ptr,		/* random */
	savep			ptr,		/* copy of archive pointer */
	temp			ptr;		/* random */

     dcl	bc			fixed bin(24),	/* bitcount */
	cc			fixed bin,	/* index for "call" vector */
	cd			fixed bin(35) based (cdp),	/* status code overlaid on "names" element */
	code			fixed bin(35),	/* random status code */
	e			fixed bin,	/* entry switch */
         (i, j, n)			fixed bin,	/* random */
	sev			fixed bin,	/* severity code for name change functions */
	tcode			fixed bin(35);	/* status code */

     dcl	initsw			bit(1) aligned int static init ("0"b),	/* non-zero when "ctable" set up */
	logsw			bit(1) aligned,	/* c.logsw | (c.errsw & asev ^= 0) */
	rsw			bit(1) aligned,	/* copy of c.rsw */
	runsw			bit(1) aligned,	/* c.runsw | c.trunsw */
	sws			bit(2);		/* option bits for upd_print_names_ */

     dcl	area			area based (areap);	/* caller-supplied area */

     dcl	ctable (4)		fixed bin(35) int static,	/* used by name change functions */
	stable (4, 4)		fixed bin int static init (	/* severity matrix to match */
				1, 3, 2, 2,	/* segnamedup */
				2, 3, 2, 2,	/* namedup */
				3, 1, 2, 2,	/* oldnamerr */
				3, 2, 2, 2);	/* nonamerr */

     dcl	1 c			aligned based (cp),	/* exploded control word */
	 (2 rsw			bit(1),		/* non-zero if in reverse mode */
	  2 tasksw		bit(1),		/* non-zero if to set up task */
	  2 compsw		bit(1),		/* non-zero if compile-only task */
	  2 runsw			bit(1),		/* non-zero if call to be processed immediately */
	  2 trunsw		bit(1),		/* non-zero if subtask list to be processed */
	  2 logsw			bit(1),		/* non-zero if in print mode */
	  2 errsw			bit(1),		/* non-zero if to print error tasks only */
	  2 briefsw		bit(1),		/* ignored */
	  2 detailsw		bit(1),		/* non-zero if to list names when logsw is non-zero */
	  2 clear_code_sw		bit(1),		/* non-zero if error codes in name list to be cleared */
	  2 clear_uid_sw		bit(1)) unal;	/* non-zero if segment uid's to be cleared */

     dcl	1 names (n)		aligned based (np),	/* updater-format names array */
	  2 name			char(32) unal,	/* fudge alignment for pl1 */
	  2 pcode			fixed bin(35),	/* process code */
	  2 rcode			fixed bin(35);	/* restore code */

     dcl	1 stat			aligned,		/* data structure for status_ */
	 (2 type			bit(2),		/* entry type */
	  2 nnames		bit(16),		/* number of names returned */
	  2 nrp			bit(18),		/* rel pointer to name array */
	  2 dtm			bit(36),		/* date/time modified */
	  2 dtu			bit(36),		/* date/time used */
	  2 mode			bit(5),		/* t, r, e, w, a */
	  2 pad			bit(13),		/* unused */
	  2 recs			bit(18),		/* pages used */
	  2 dtd			bit(36),		/* date/time dumped */
	  2 dtem			bit(36),		/* date/time entry modified */
	  2 acct			bit(36),		/* accounting data */
	  2 curlen		bit(12),		/* length of segment */
	  2 bitcnt		bit(24),		/* bitcount of segment */
	  2 did			bit(4),		/* device id */
	  2 mdid			bit(4),		/* ? */
	  2 copysw		bit(1),		/* segment copy switch */
	  2 pad2			bit(9),		/* unused */
	  2 rbs (0:2)		bit(6),		/* ring brackets */
	  2 uid			bit(36)) unal;	/* unique id */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


list:		entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, np, nn);

	if ctlw & "10000000011"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear" modes */
	e = 1;					/* set transfer vector index */
	sws = "00"b;				/* don't want to interpret status codes when printing */
	go to common;				/* join common code */


list_archive:	entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, np, nn);

	if ctlw & "10000000011"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear" modes */
	e = 2;					/* t.v. index */
	sws = "00"b;				/* options for printing */
	go to common;				/* skip */


add:		entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, np, nn);

	e = 3;					/* t.v. index */
	sws = "11"b;				/* want to print everything */
	go to common;				/* skip to common code */


delete:		entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, np, nn);

	e = 4;					/* transfer vector index */
	sws = "11"b;				/* want it all */
	go to common;				/* skip */


free:		entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, np, nn);

	e = 5;					/* set t.v. index */
	sws = "11"b;				/* want status codes interpreted */

common:	cp = addr (ctlw);				/* overlay control word with bit structure "c" */
	if c.clear_uid_sw then			/* none of the entries runs in "clear uid" mode */
	     return;
	call cu_$arg_list_ptr (argp);			/* get arglist pointer */
	rsw = c.rsw;				/* it gets used a lot */
	logsw = c.logsw;				/* non-zero if printing */
	if c.errsw then if asev = 0 then		/* errors only? */
	     logsw = "0"b;				/* sure thing */
	runsw = c.runsw | c.trunsw;			/* non-zero if processing */
	if c.clear_code_sw then			/* clear error codes in name lists, if asked */
	     if np ^= null then do i = 1 to nn;
		names(i).pcode = error_table_$not_done;
		names(i).rcode = 0;
	    	end;

	if c.tasksw then				/* is this a task call? */
	     call upd_add_task_((entry(e)), argp);

	if logsw then do;				/* are we talking to him? */
	     if seg = msgseg then
		call ioa_$ioa_stream ("installation_list_", "^5x^R^14a^B ^a>^a", (msg(e)), dir, seg);
	     else
		call ioa_$ioa_stream ("installation_list_", "^5x^R^14a^B ^a>^a  (^a)", (msg(e)), dir, seg, msgseg);
	     if asev ^= 0 then			/* has an error occurred? */
		call upd_print_err_(acode, asev);	/* yes, tell user */
	     end;

	if runsw then do;				/* are we to process it now? */
	     if uid ^= ""b then do;			/* should we verify unique id? */
		if e = 1 then			/* don't waste call to status_ */
		     temp = areap;			/* if "list" function, get names also */
		else				/* but don't waste effort either */
		     temp = null;			/* any other function, skip the names */
		call upd_status_$long (dir, seg, 1, addr (stat), temp, code);
		if code = 0 then if uid ^= stat.uid then	/* does it match? */
		     code = error_table_$non_matching_uid;	/* no, set error code */
		if code ^= 0 then			/* did we get it? */
		     go to error;			/* no, go complain */
		end;
	     go to lbl(e);				/* skip to proper function */
	     end;

prnames:	if logsw then				/* reentry after processing */
	     if (c.detailsw | c.errsw) then		/* print names if user wants them */
		call upd_print_names_(np, nn, sws);
	return;					/* all done, exit */


error:	if seg = msgseg then
	     call upd_task_err_ (code, 3, argp, (entry(e)),
		"^/Referencing ^R^a>^a^B .", dir, seg);
	else
	     call upd_task_err_ (code, 3, argp, (entry(e)),
		"^/Referencing ^R^a>^a^B^/(^a>^a).", dir, seg, dir, msgseg);
	return;					/* can't go no farther */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lbl(1):	if np ^= null then				/* "list" function, see if already done */
	     go to prnames;				/* yes, don't repeat */
	if uid = ""b then do;			/* call status_ if we didn't */
	     call upd_status_(dir, seg, 0, addr (stat), areap, code);
	     if code ^= 0 then			/* error? */
		go to error;			/* yes, skip */
	     end;
	n = fixed (stat.nnames);			/* get count of names returned */
	p = ptr (areap, stat.nrp);			/* get pointer to name array */
	go to common1;				/* join common code */


lbl(2):	if np ^= null then				/* "list_archive" function, see if we did it */
	     go to prnames;				/* yes, don't process again */
	call hcs_$initiate (dir, seg, "", 0, 0, r, code);	/* initiate archive segment */
	if code ^= 0 then if code ^= error_table_$segknown then
	     go to error;				/* trouble, can't initiate it */
	savep = r;				/* copy archive pointer; archive_util_ clobbers it */
	call archive_util_$first_disected (r, q, aname, bc, code);	/* get name of first component */
	if code ^= 0 then do;			/* something amiss? */
	     if code = 1 then			/* archive_util_ has funny error codes */
		code = error_table_$zero_length_seg;	/* fix it up for other people */
	     else if code = 2 then			/* format error in archive */
fmterr:		code = error_table_$archive_fmt_err;	/* get standard code for him too */
acerr:	     call hcs_$terminate_noname (savep, tcode);	/* terminate archive segment, don't destroy code */
	     go to error;				/* and go complain */
	     end;
	i = 1;					/* starting on first name */
	n = 1000;					/* have to have a limit somewhere */
	allocate name_array in (area);		/* get space to collect names */
	go to next1;				/* join loop to insert first name */
next:	call archive_util_$disected_element (r, q, aname, bc, code);	/* get next component */
	if code = 0 then do;			/* got him */
	     if i = 1000 then do;			/* hath our cup run over? */
		if seg = msgseg then
		     call upd_task_err_ (error_table_$too_many_names, 0, argp, (entry(e)),
			"^/For ^R^a>^a^B^/only the first 1000 component names will be listed.", dir, seg);
		else
		     call upd_task_err_ (error_table_$too_many_names, 0, argp, (entry(e)),
			"^/For ^R^a>^a^B^/(^a>^a)^/only the first 1000 component names will be listed.",
			dir, seg, dir, msgseg);
		go to last;			/* exit from loop */
		end;
	     i = i + 1;				/* still room, bump index */
next1:	     name_array(i) = aname;			/* add name to list */
	     go to next;				/* go get next one */
	     end;
	else if code = 1 then do;			/* end of archive reached */
last:	     n = i;				/* set count of names found */
	     call hcs_$terminate_noname (savep, code);	/* terminate archive segment */
	     go to common1;				/* join common code */
	     end;
	else if code = 2 then			/* format error in archive */
	     go to fmterr;				/* go get standard error code */
	else					/* some other error */
	     go to acerr;				/* go terminate seg and exit */

common1:	allocate names in (area) set (q);		/* allocate updater-format names array */
	do i = 1 to n;				/* copy names into it */
	     q -> names(i).name = name_array(i);	/* the name */
	     q -> names(i).pcode = error_table_$not_done;	/* initialize process code */
	     q -> names(i).rcode = 0;			/* restore code */
	     end;
	free name_array in (area);			/* free temporary name array */
	nn = n;					/* set array count */
	np = q;					/* and pointer (pointer must be set last) */
	go to prnames;				/* skip to common exit */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lbl(3):	if ^rsw then				/* "add" function, select proper call */
	     cc = 1;				/* adding name */
	else					/* restore mode, */
	     cc = 2;				/* removing name */
	go to common2;				/* join common code */


lbl(4):	if ^rsw then				/* "delete" function */
	     cc = 2;				/* removing name */
	else					/* restore mode, */
	     cc = 1;				/* putting it back */
	go to common2;				/* skip */


lbl(5):	if ^rsw then				/* "free" function */
	     cc = 3;				/* calling free_name */
	else					/* restore mode */
	     cc = 4;				/* restore_name */

common2:	if ^initsw then do;				/* initialize int static error code table */
	     ctable(1) = error_table_$segnamedup;
	     ctable(2) = error_table_$namedup;
	     ctable(3) = error_table_$oldnamerr;
	     ctable(4) = error_table_$nonamerr;
	     initsw = "1"b;				/* don't do it again */
	     end;

	on linkage_error begin;
	     chname_file_entry = hcs_$chname_file;
	     goto revert_linkage_error;
	     end;
	chname_file_entry = installation_tools_$chname_file;
revert_linkage_error:
	revert linkage_error;

	do i = 1 to nn;				/* hardcore puts names on in right order now */
	     if ^rsw then				/* select proper status code in names array */
		cdp = addr (names(i).pcode);		/* "pcode" if in process mode */
	     else
		cdp = addr (names(i).rcode);		/* "rcode" if in restore mode */
	     if cd ^= 0 then do;			/* if it hasn't been done yet, do it */
		if ^rsw then			/* if processing, */
		     names(i).rcode = error_table_$not_done;	/* initialize restore code */
		else if names(i).pcode ^= 0 then	/* if in restore mode, must have processed it ok */
		     go to skip;			/* skip this name if not */
		nmp = addr (names(i).name);		/* get pointer to this name */
		go to call(cc);			/* select proper call */
call(1):		call chname_file_entry (dir, seg, "", name, cd);	/* adding name */
		go to rejoin;
call(2):		call chname_file_entry (dir, seg, name, "", cd);	/* removing name */
		go to rejoin;
call(3):		if i = 1 then			/* if this is the primary name of segment */
		     call upd_free_name_(dir, name, cd); /* free name by renaming to backup name */
		else				/* if not primary name, then		*/
		     call chname_file_entry ( dir, seg, name, "", cd); /* delete the name */
		go to rejoin;
call(4):		if i = 1 then			/* if primary name, then reverse fxn is to rename it */
		     call upd_free_name_$restore (dir, name, cd); /* inverse of upd_free_name_ */
		else				/* otherwise, we have to put name back on seg */
		     call chname_file_entry ( dir, seg, "", name, cd);
rejoin:		if cd ^= 0 then do;			/* error? */
		     do j = 1 to 4;			/* see if it's one we know about */
			if cd = ctable(j) then do;	/* look up in table */
			     sev = stable(j, cc);	/* found it, get severity code */
			     go to err;		/* skip */
			     end;
			end;
		     sev = 3;			/* unknown error, severity 3 */
err:		     if seg = msgseg then
			call upd_task_err_ (cd, sev, argp, (entry(e)),
			     "^R^a^B^/Referencing ^R^a>^a^B .", name, dir, seg);
		     else
			call upd_task_err_ (cd, sev, argp, (entry(e)),
			     "^R^a^R^/Referencing ^R^a>^a^B^/(^a>^a).", name, dir, seg, dir, msgseg);
		     end;
		else if rsw then			/* successful restore, reinitialize process code */
		     names(i).pcode = error_table_$not_done;	/* so we can repeat task if desired */
skip:		end;				/* here if restore skipped */
	     end;

	go to prnames;				/* done, go to common exit */


	end upd_name_task_;
