/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_print_acl_:	procedure (aclp, n, sws);


/*

	This procedure will print a standard-format access control
	list on the user's terminal.  Procedure cv_acl_ is called to
	format each entry.  Options allow the mode field, 
	and error message corresponding to the status code to be
	suppressed.  When extended access is fully implemented, it
	is expected that a fourth argument to upd_print_acl_ will specify
	the acl type.

	P. Bos, May 1972

	Modified Apr. 3, 1973 by Peter B. Kelley	to change acl structure for new
						hcs_ acl primitives.

*/

     dcl	aclp			ptr,		/* pointer to acl array */
	n			fixed bin,	/* size of array */
	sws			bit(*);		/* option bits */

     dcl	cv_acl_			entry (ptr, fixed bin, char(*), fixed bin, bit(*)),
	ios_$write		entry (char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned);

     dcl (addr, null, substr)		builtin;

     dcl (nl			char(1) init ("
"),	noacl			char(15) init ("	ACL is empty.
"),	tab			char(1) init ("	")) aligned int static;

     dcl	1 characters		auto,
	  2 tab			char (1),		/* tab at beginning of every line. */
	  2 string		char (160);	/* sufficiently large output string */

     dcl (i, len, nelemt)		fixed bin;

     dcl	status_code		bit(72) aligned;	/* an IO system status code. */

     dcl	1 acl (n)			aligned based (aclp),	/* acl array */
	  2 userid		char(32),		/* user name for this entry */
	  2 mode			bit (36),		/* 1-3 "rew", rest 0 */
	  2 pad 			bit (36),		/* must be 0 */
	  2 code			fixed bin (35);     /* error code */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	if aclp ^= null then if n ^= 0 then		/* check for empty acl */
	     go to skip;				/* no, go print */
	call ios_$write ("installation_list_", addr (noacl), 0, 15, nelemt, status_code);
						/* yes, print message, */
	return;					/* and exit */

skip:	characters.tab = tab;			/* initialize tab character. */
	do i = 1 to n;				/* list acl in order */
	     call cv_acl_(aclp, i, string, len, sws);	/* format this entry */
	     len = len + 1;				/* make room for new_line */
	     if len > 160 then			/* make sure our cup doesn't run over */
		len = 160;			/* adjust if so */
	     substr (string, len, 1) = nl;		/* insert new_line */
	     call ios_$write ("installation_list_", addr (characters), 0, len+1, nelemt, status_code);
						/* write it on user_output */
	     end;

	return;					/* done */


	end upd_print_acl_;
