/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


lfree_name: lfn:	procedure (path);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e_s:  lfree_name, lfn							*/
	/*									*/
	/*      This command is part of the Multics Installation System (MIS).  It frees the	*/
	/* entryname portion of its pathname argument so that this entryname may be used	*/
	/* on another segment.  If the final component of the entryname is "._n" where n is an 	*/
	/* integer, then the name is freed by adding one to _n.  Otherwise, the entryname is	*/
	/* freed by appending a component of ".1" to the name.				*/
	/*									*/
	/* E__n_t_r_i_e_s:  lfree_name, lfn							*/
	/*									*/
	/*       This entry frees an entryname.						*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      lfree_name  path_name							*/
	/*									*/
	/* 1) path_name	is the absolute or relative path name of the directory entryname	*/
	/*		which is to be freed. (Input)					*/
	/*									*/
	/* E__n_t_r_i_e_s:  lfree_name$restore, lfn$restore					*/
	/*									*/
	/*      This entry point restores an entryname which has been freed to its original value.*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      lfree_name$restore  path_name						*/
	/*									*/
	/* 1) path_name	is the original absolute or relative path name of the directory	*/
	/*		entryname which is to be restored. (Input)			*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 1) Created:  Jan, 1973 by G. C. Dixon					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


     dcl						/*	parameter				*/
	path			char(*);		/* pathname of the entryname to be freed.	*/

     dcl						/*	automatic variables			*/
 	Nargs			fixed bin,	/* number of input arguments we were passed.	*/
	code			fixed bin(35),	/* a status code.				*/
	dir			char(168) aligned,	/* directory portion of path.			*/
	e			fixed bin,	/* entry point indicator.			*/
	entry			char(32) aligned;	/* entry portion of path.			*/

     dcl						/* 	entries and builtin functions		*/
	addr			builtin,
	com_err_			entry options (variable),
	cu_$arg_count		entry (fixed bin),
	expand_path_		entry (ptr, fixed bin, ptr, ptr, fixed bin(35)),
	length			builtin,
	upd_free_name_		entry (char(*) aligned, char(*) aligned, fixed bin(35)),
	upd_free_name_$restore	entry (char(*) aligned, char(*) aligned, fixed bin(35));

     dcl						/*	static variables			*/
	ep (2)			char(18) aligned int static init (
				     "lfree_name",
				     "lfree_name$restore"),
	error_table_$wrong_no_of_args	fixed bin(35) ext static;

	e = 1;					/* set entry point indicator.			*/
	go to common;

restore:	entry (path);				/* restore name entry point.			*/
	e = 2;					/* set entry point indicator.			*/

common:	call cu_$arg_count (Nargs);			/* make sure we were passed 1 argument.		*/
	if Nargs ^= 1 then
	     go to wrong_no_of_args;
	call expand_path_ (addr(path), length(path), addr(dir), addr(entry), code);
	if code ^= 0 then				/* convert relative path to absolute one.	*/
	     go to err;
	go to call(e);				/* make call appropo to our entry point.	*/

call(1):	call upd_free_name_ (dir, entry, code);
	go to join;
call(2):	call upd_free_name_$restore (dir, entry, code);	/* free or restore the entryname, as appropo	*/

join:	if code ^= 0 then
	     go to err;
	return;

wrong_no_of_args:
	call com_err_ (error_table_$wrong_no_of_args, (ep(e)),
	     "^/Calling sequence is:^-^a <path_name>", (ep(e)));
	return;

err:	call com_err_ (code, (ep(e)), "^a", path);


	end lfree_name;
