/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_copy_seg_task_:	procedure (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, 
			 ndir, nseg, nmsgseg, nuid, max_length, entry_bound, recover);


/*

	This procedure implements the copy_seg task function for the Multics
	Installation System.  Segment dir>seg (with unique id "uid") is copied into
	ndir>nseg; the new segment's unique id is returned in "nuid".  This
	procedure is restartable; if ndir>nseg already exists, it is compared
	with dir>seg, and if found to be identical, is assumed to have been
	in the process of being copied at the time of a process or system
	failure.  If "nuid" is non-zero on input in this case, it is verified
	as well.  "acode", "asev", and "taskp" should be initialized to "0",
	"0", and "null" respectively.

	If "recover" is on, then this task is reversible.

	P. Bos, May 1972

	Modified: May 1974 P. B. Kelley
		turns the safety switch on for all segments.
	Modified: Nov 1974 P. B. Kelley
		sets the maximum length attribute on all segments with optional
		user specification.
	Modified: Mar 1981 E. N. Kittlitz
		sets entry bound if one exists in object map.

*/

     dcl	ctlw			bit(36) aligned,	/* updater control word */
	areap			ptr,		/* caller area pointer */
	parentp			ptr,		/* pointer to parent arglist */
	acode			fixed bin(35),	/* status code */
	asev			fixed bin,	/* severity code */
	taskp			ptr,		/* task pointer */
	seqno			fixed bin,	/* task sequence no. */
	dir			char(168),	/* dirname of source segment */
	seg			char(32),		/* entryname of source segment */
	msgseg			char(32),		/* entryname of source segment used in messages */
	uid			bit(36) aligned,	/* unique id of source segment */
	ndir			char(168),	/* dirname of target segment */
	nseg			char(32),		/* entryname of target segment */
	nmsgseg			char(32),		/* entryname of target segment used in messages */
	nuid			bit(36) aligned,	/* unique id of target segment (output) */
	max_length		fixed bin(18),	/* max length attribute of target segment */
	entry_bound		fixed bin (14),	/* entry bound */
	recover			bit(1);		/* on if segment should be deleted when "run" */
						/* in "reverse" mode. */

     dcl	condition_		entry (char(*), entry),
	cu_$arg_list_ptr		entry (ptr),
	hcs_$append_branch		entry (char(*), char(*), fixed bin(5), fixed bin(35)),
	hcs_$delentry_file		entry (char(*), char(*), fixed bin(35)),
	hcs_$initiate		entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
	hcs_$set_bc		entry (char(*), char(*), fixed bin(24), fixed bin(35)),
	hcs_$set_entry_bound	entry (char (*), char (*), fixed bin (14), fixed bin (35)),
	hcs_$set_max_length		entry (char(*), char(*), fixed bin(18), fixed bin(35)),
	hcs_$set_safety_sw		entry (char(*), char(*), bit(1), fixed bin(35)),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
	ioa_$ioa_stream		entry options (variable),
	reversion_		entry (char(*)),
	upd_add_task_		entry (char(*), ptr),
	upd_print_err_		entry options (variable),
	upd_status_$long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	upd_task_err_		entry options (variable);

     dcl (addr, divide, fixed, null)	builtin;

     dcl (error_table_$badcall,
	error_table_$namedup,
	error_table_$non_matching_uid,
	error_table_$rqover,
	error_table_$segknown,
	error_table_$zero_length_seg)	ext fixed bin(35),
	sys_info$page_size		fixed bin (35) ext static,	/* no words per page. */
	sys_info$max_seg_size	ext fixed bin;		/* max seg size */

     dcl	argp			ptr,		/* arglist pointer for alloc_task, task_err_ */
	cp			ptr,		/* control word pointer */
	dp			ptr,		/* baseptr for "bdir" */
	msp			ptr,		/* baseptr for "bmsgseg" */
         (p, q)			ptr,		/* random */
	sp			ptr;		/* baseptr for "bseg" */

     dcl	bc			fixed bin(24),	/* bitcount */
	code			fixed bin(35),	/* status code for outward calls */
	data (n)			fixed bin(35) based (p), /* used to copy segment */
	bits 			 bit (bc) based,
	err_label			label local,	/* error branch vector. */
	maxl			fixed bin(18),	/* length for max length setting */
	n			fixed bin(35),	/* no. of words to copy */
	tbc			fixed bin(24),	/* temp bitcount for copy */
	tcode			fixed bin(35),	/* temp status code */
	tn			fixed bin,	/* copy of "n" for source segment */
	sev			fixed bin init (3);	/* nornal severity code. */

     dcl	bdir			char(168) based (dp),
	bmsgseg			char(32) based (msp),
	bseg			char(32) based (sp);

     dcl (dupsw			bit(1),		/* non-zero if namedup on append_branch call */
	logsw			bit(1),		/* non-zero if printing */
	nsw			bit(1),		/* non-zero if error refers to target seg */
	runsw			bit(1)) aligned;	/* non-zero if to process */

     dcl	1 c			aligned based (cp),	/* exploded control word */
	 (2 rsw			bit(1),		/* non-zero if in reverse mode */
	  2 tasksw		bit(1),		/* non-zero if to set up task */
	  2 compsw		bit(1),		/* non-zero if compile-only task */
	  2 runsw			bit(1),		/* non-zero if call to be processed immediately */
	  2 trunsw		bit(1),		/* non-zero if subtask list to be processed */
	  2 logsw			bit(1),		/* non-zero if in print mode */
	  2 errsw			bit(1)) unal;	/* non-zero if to print error tasks only */

     dcl	1 stat			aligned,		/* data structure for status_ */
	 (2 type			bit(2),		/* entry type */
	  2 nnames		bit(16),		/* number of names returned */
	  2 nrp			bit(18),		/* rel pointer to name array */
	  2 dtm			bit(36),		/* date/time modified */
	  2 dtu			bit(36),		/* date/time used */
	  2 mode			bit(5),		/* t, r, e, w, a */
	  2 pad			bit(13),		/* unused */
	  2 recs			bit(18),		/* pages used */
	  2 dtd			bit(36),		/* date/time dumped */
	  2 dtem			bit(36),		/* date/time entry modified */
	  2 acct			bit(36),		/* accounting data */
	  2 curlen		bit(12),		/* length of segment */
	  2 bitcnt		bit(24),		/* bitcount of segment */
	  2 did			bit(4),		/* device id */
	  2 mdid			bit(4),		/* ? */
	  2 copysw		bit(1),		/* segment copy switch */
	  2 pad2			bit(9),		/* unused */
	  2 rbs (0:2)		bit(6),		/* ring brackets */
	  2 uid			bit(36)) unal;	/* unique id */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  */
	call cu_$arg_list_ptr (argp);			/* get arglist pointer for alloc_task_, task_err_ */
	cp = addr (ctlw);				/* get control word pointer */
	if c.rsw then if ^recover then		/* this task doesn't run in reverse mode */
	     return;				/* unless caller specified full recovery */
						/* for the segment being copied. */
	if c.tasksw then				/* are we to allocate a task? */
	     call upd_add_task_("upd_copy_seg_task_", argp);
	logsw = c.logsw;				/* non-zero if to print */
	if c.errsw then if asev = 0 then		/* error tasks only? */
	     logsw = "0"b;				/* turn it off if no error */
	runsw = c.runsw | c.trunsw;			/* non-zero if to process */
	if logsw then do;				/* user wants to know what happened */
						/* print path name of source segment */
	     if seg = msgseg then
		call ioa_$ioa_stream ("installation_list_", "^5x^RCopy^B^2-^a>^a", dir, seg);
	     else
		call ioa_$ioa_stream ("installation_list_", "^5x^RCopy^B^2-^a>^a  (^a)", dir, seg, msgseg);
	     if nseg = nmsgseg then			/* print path name of target segment */
		call ioa_$ioa_stream ("installation_list_", "^-^Rto^B^-^a>^a", ndir, nseg);
	     else
		call ioa_$ioa_stream ("installation_list_", "^-^Rto^B^-^a>^a  (^a)", ndir, nseg, nmsgseg);
	     if asev ^= 0 then			/* was there an error? */
		call upd_print_err_(acode, asev);	/* yes, tell user */
	     end;
	if ^runsw then				/* if not in process mode, */
	     go to prtuid;				/* go away */

	p, q = null;				/* zap segment pointers */

	if c.rsw then				/* in "reverse" */
	     go to delete;
						/* ******************************* */
						/*   FORWARD		     */
						/* ******************************* */
	nsw = "0"b;				/* any error now refers to source seg */
	err_label = return;				/* most are fatal errors. */
	call upd_status_$long (dir, seg, 1, addr(stat), null, code);
	if code ^= 0 then				/* error? */
	     go to err;				/* skip if so */
	if uid ^= ""b then if uid ^= stat.uid then do;	/* verify unique id */
	     code = error_table_$non_matching_uid;	/* no match, set error code */
	     go to err;				/* and exit */
	     end;
	n, tn, maxl = fixed (stat.curlen) * sys_info$page_size; /* get word count for segment */
	if n = 0 then do;				/* zero length segment is error */
	     code = error_table_$zero_length_seg;	/* set error code */
	     go to err;				/* skip */
	     end;
	call hcs_$initiate (dir, seg, "", 0, 0, p, code);	/* initiate source segment */
	if code ^= 0 then if code ^= error_table_$segknown then
	     go to err;				/* exit on error */
	bc = fixed (stat.bitcnt);			/* fix bitcount */
	nsw = "1"b;				/* errors from here on are for target seg */
	call hcs_$append_branch (ndir, nseg, 01010b, code);	/* add entry for new segment */
	if code ^= 0 then				/* oops */
	     if code = error_table_$namedup then	/* segment already exists */
		dupsw = "1"b;			/* might be ok, though */
	     else					/* any other error is fatal */
		go to err;			/* skip */
	else					/* code = 0 */
	     dupsw = "0"b;				/* reset switch */
	call upd_status_$long (ndir, nseg, 1, addr(stat), null, code);
	if code ^= 0 then				/* hard to believe... */
	     go to err;				/* skip */
	if nuid = ""b then				/* if uid has not been set in previous invocation */
	     nuid = stat.uid;			/* .. which was interrupted, set it now */
	else if nuid ^= stat.uid then do;		/* uid has been set, compare it */
	     if dupsw then				/* if segment existed prior to call, */
dup:		code = error_table_$namedup;		/* namedup error */
	     else					/* if not, caller forgot to initialize args */
		code = error_table_$badcall;		/* tell him so */
	     go to err;				/* exit */
	     end;
	call hcs_$initiate (ndir, nseg, "", 0, 0, q, code); /* initiate copy */
	if code ^= 0 then if code ^= error_table_$segknown then
	     go to err;
	if dupsw then do;				/* segment may have been partially copied */
	     if bc ^= 0 then if q -> bits ^= p -> bits then	/* compare segment with original */
		go to dup;			/* again namedup error */
	     if n = tn then do;			/* segments are identical */
		tbc = fixed (stat.bitcnt);		/* get bitcount of copy */
		if tbc = bc then			/* was it already set? */
		     go to exit;			/* yes, skip set_bc call */
		go to setbc;			/* go set bitcount */
		end;
	     n = tn;				/* was partially copied; get length & do it again */
	     end;
	call condition_ ("record_quota_overflow", record_quota_overflow);
						/* handle record quota overflows during copy. */
	q -> data = p -> data;			/* copy segment */
	call reversion_ ("record_quota_overflow");	/* disable rqover handler, after copy complete. */
	go to setbc;
rqover:	call reversion_ ("record_quota_overflow");	/* don't handle them any more. */
	if nseg = nmsgseg then
	     call upd_task_err_ (error_table_$rqover, 4, argp, "upd_copy_seg_task_",
		"^/Referencing ^R^a>^a^B .", ndir, nseg);
	else
	     call upd_task_err_ (error_table_$rqover, 4, argp, "upd_copy_seg_task_",
		"^/Referencing ^R^a>^a^B^/(^a>^a).", ndir, nseg, ndir, nmsgseg);

setbc:	if q -> bits ^= p -> bits then do;		/* make sure the hardware did what it's supposed to!!! */
	     if nseg = nmsgseg then			/* CSL's used to fail.  Here we're testing the MLR */
		call upd_task_err_ ( 0, 4, argp, "upd_copy_seg_task_",
		     "Segment not copied correctly:  ^R^a>^a^B^/Please re-initiate and try again.", ndir, nseg );
	     else
		call upd_task_err_ ( 0, 4, argp, "upd_copy_seg_task_",
		     "Segment not copied correctly:  ^R^a>^a^B^/(^R^a>^a^B)^/Please re-initiate and try again.",
			ndir, nseg, ndir, nmsgseg );
	     end;

						/* ******************************* */
						/* SET BIT COUNT		     */
	call hcs_$set_bc (ndir, nseg, bc, code);	/* ******************************* */
	if code ^= 0 then				/* can't do it */
	     if nseg = nmsgseg then
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set bit count on ^R^a>^a^B .", ndir, nseg);
	     else
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set bit count on ^R^a>^a^B^/(^a>^a).", ndir, nseg, ndir, nmsgseg);
exit:						/* always set max length, safety switch & entry bound */
	if max_length > sys_info$max_seg_size then	/* can't set it to > max segment length */
	     maxl = sys_info$max_seg_size;
	else if max_length = 0 then			/* set to current length (maxl) */
	     go to sml;
	else if max_length < maxl then;		/* can't set it less than current length */
	else do;					/* guess value of max_length looks ok */
	     maxl = (divide((max_length + 1023), 1024, 35, 0)) * 1024; /* set temporary to nearest upper page boundary */
	     go to sml;				/* xfer to call */
	     end;
	if nseg = nmsgseg then			/* errors fall thru to here */
	     call upd_task_err_ ( 0, 1, argp, "upd_copy_seg_task_",
		"Attempt to set illegal maximum length on ^R^a>^a^B.", ndir, nseg);
	else
	     call upd_task_err_ ( 0, 1, argp, "upd_copy_seg_task_",
		"Attempt to set illegal maximum length on ^R^a>^a^B.^/(^a>^a).",
		ndir, nseg, ndir, nmsgseg);
						/* if task_err_ call returns, then continue */
	call upd_print_err_ (0, 0, "", "", "Warning", "", "Maximum length will be set to ^d words.", maxl);

						/* ******************************* */
						/* SET MAX LENGTH		     */
sml:	call hcs_$set_max_length ( ndir, nseg, maxl, code);/* ****************************** */
	if code ^= 0 then
	     if nseg = nmsgseg then
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set the maximum length of ^R^a>^a^B.", ndir, nseg);
	     else
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set the maximum length of ^R^a>^a^B (^a>^a).",
		     ndir, nseg, ndir, nmsgseg);
						/* ******************************* */
						/* SET SAFETY SWITCH	     */
	call hcs_$set_safety_sw ( ndir, nseg, "1"b, code);/* ******************************* */
	if code ^= 0 then
	     if nseg = nmsgseg then
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set the safety switch on ^R^a>^a^B .", ndir, nseg );
	     else
		call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		     "^/Unable to set the safety switch on ^R^a>^a^B^/(^a>^a).", ndir, nseg, ndir, nmsgseg);

	if entry_bound > 0				/* ******************************* */
	     then do;				/* SET ENTRY BOUND                 */
						/* ******************************* */
		call hcs_$set_entry_bound (ndir, nseg, entry_bound, code);	
		if code ^= 0 then do;
		     if nseg = nmsgseg then
		          call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		               "^/Unable to set entry bound on ^R^a>^a^B .", ndir, nseg);
		     else
		          call upd_task_err_ (code, 2, argp, "upd_copy_seg_task_",
		               "^/Unable to set entry bound on ^R^a>^a^B^/(^a>^a).", ndir, nseg, ndir, nmsgseg);
		end;
	     end;

	call hcs_$terminate_noname (p, code);		/* terminate source segment */
	call hcs_$terminate_noname (q, code);		/* terminate target segment */

prtuid:	if logsw then if nuid ^= ""b then		/* user wants to know */
	     call ioa_$ioa_stream ("installation_list_", "^-target seg unique id = ^w", nuid);/* tell him */
	return;					/* and finally exit */
/*  */
						/* ****************************** */
						/*   REVERSE		    */
						/* ****************************** */
delete:	nsw = "1"b;				/* errors refer to  new segment. */
	err_label = del_err;			/* these errors can be non-fatal. */
	sev = 1;					/* all errors here are severity 1 */
	call upd_status_$long (ndir, nseg, 1, addr(stat), null, code);
	if code ^= 0 then				/* error ? */
	     go to err;				/* We tried. Tell user. He may want to continue. */
	if nuid ^= ""b then if nuid ^= stat.uid then do;	/* verify unique id to prevent deletion */
	     code = error_table_$non_matching_uid;	/* of the wrong segment. */
	     go to err;
	     end;
	call hcs_$set_safety_sw ( ndir, nseg, "0"b, code); /* turn safety switch off */
						/* we'll find out if successful by next call */
	call hcs_$delentry_file (ndir, nseg, code);	/* delete the segment. */
	if code ^= 0 then				/* oops, an error. */
	     go to err;
del_err:	nuid = ""b;				/* clear out our variables. */
	return;

err:	if p ^= null then				/* if source segment was initiated, */
	     call hcs_$terminate_noname (p, tcode);	/* terminate it */
	if q ^= null then				/* same for target segment */
	     call hcs_$terminate_noname (q, tcode);	/* ignore error codes returned */
	if ^nsw then do;				/* decide which name to use in message */
	     dp = addr (dir);			/* source segment name */
	     sp = addr (seg);
	     msp = addr (msgseg);
	     end;
	else do;
	     dp = addr (ndir);			/* target segment name */
	     sp = addr (nseg);
	     msp = addr (nmsgseg);
	     end;
	if bseg = bmsgseg then
	     call upd_task_err_ (code, sev, argp, "upd_copy_seg_task_",
		"^/Referencing ^R^a>^a^B .", bdir, bseg);
	else
	     call upd_task_err_ (code, sev, argp, "upd_copy_seg_task_",
		"^/Referencing ^R^a>^a^B^/(^a>^a).", bdir, bseg, bdir, bmsgseg);
	go to err_label;				/* all done, back to the shadows */
return:	return;					/* return point from errors. */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


record_quota_overflow:	procedure;		/* handler for record quota overflows. */

	go to rqover;

	end record_quota_overflow;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	end upd_copy_seg_task_;
