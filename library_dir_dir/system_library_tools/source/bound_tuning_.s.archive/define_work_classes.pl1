/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


define_work_classes: dwc: proc;

/* Coded RE Mullen Spring 1975 for priority scheduler */
/* Modified 05/01/81, W. Olin Siebrt, for version 3 MGT */

dcl  linkage_error condition;
% include work_class_info;
% include mgt;
dcl  mgtp ptr;
dcl 1 wci like work_class_info;
dcl  i fixed bin;
dcl  hphcs_$define_work_classes entry (ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (addr, bin, null, unspec) builtin;


dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  al fixed bin;
dcl  ap ptr;
dcl  arg char (al) based (ap);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  percent fixed bin;
dcl  cu_$arg_count entry (fixed bin);
dcl  ac fixed bin;
dcl (ioa_, com_err_) entry options (variable);
dcl  code fixed bin (35);

/* ---------------------------------------------------------------------- */



	unspec (wci) = "0"b;



	call cu_$arg_count (ac);
	if ac = 0 | ac > 16 then do;
USAGE:
	     call ioa_ ("define_work_classes: Usage:");
	     call ioa_ ("^-define_work_classes pct_wc_1 pct_wc_2 pct_wc_3  .. pct_wc_n");
	     call ioa_ ("^-define_work_classes  -sys pct_wc_0");
	     return;
	end;



	call cu_$arg_ptr (1, ap, al, code);
	if arg = "-sys" | arg = "-system" then do;
	     if ac ^= 2 then go to USAGE;
	     wci.set_system_wc = "1"b;
	     i = 2;
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then go to ERR;

	     percent = cv_dec_check_ (arg, code);
	     if code ^= 0 then go to PCT_ERR;

	     wci.system_wc_min_pct = percent;
	end;

	else do;
	     wci.set_user_wc = "1"b;			/* Must be setting user work classes */

	     do i = 1 to ac;
		call cu_$arg_ptr (i, ap, al, code);
		if code ^= 0 then go to ERR;

		percent = cv_dec_check_ (arg, code);
		if code ^= 0 then go to PCT_ERR;

		if percent > 0 then do;
		     wci.user_wc_defined (i) = "1"b;
		     wci.user_wc_min_pct (i) = percent;
		end;
		else if percent < 0 then go to PCT_ERR;
						/* else percent = 0 => undefined */
	     end;					/* of arg-read & set-pct loop */
						/* dont undefine official work classes */
	     mgtp = null ();
	     call hcs_$initiate (">system_control_1", "mgt", "", 0b, 1b, mgtp, code);
	     if mgtp = null () then do;
		call com_err_ (bin (0, 35), "define_work_classes", "Unable to initiate mgt.");
		return;
	     end;
	     if mgt.version_indicator = "VERSION " then do;
		i = MGT_version_3;			/* Cause errmess if wrong vers at compile time */
		do i = 1 to 16;
		     if mgt.user_wc_defined (i) then
			if ^wci.user_wc_defined (i) then do;
			     call com_err_ (bin (0, 35), "define_work_classes", "Work class ^d must exist.", i);
			     call hcs_$terminate_noname (mgtp, code); /* be a good scout */
			     return;
			end;
		end;
	     end;
	     call hcs_$terminate_noname (mgtp, code);	/* be a good scout */
	end;

	on linkage_error begin;
	     call ioa_ ("define_work_classes: This command requires access to hphcs_.");
	     go to RETURN;
	end;

	call hphcs_$define_work_classes (addr (wci), code);
	if code ^= 0 then do;
	     if wci.error_process_id ^= ""b then
		call com_err_ (code, "define_work_classes", "err_pid = ^w, err_wc = ^d",
		wci.error_process_id, wci.error_work_class);
	     else go to ERR;
	end;


	return;
ERR:
	call com_err_ (code, "define_work_classes");
	return;

PCT_ERR:
						/* here if error on input percent */
	call com_err_ (bin (0, 35), "define_work_classes", "invalid percent in arg ^d", i);
	return;


RETURN:	return;
     end define_work_classes;
