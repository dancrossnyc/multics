/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
compare_configuration_deck:
     procedure () options (variable);

/* *	Utility command to compare running config deck with saved copy, print
   *	out differences.
   *
   *	Created: 02/17/80, W. Olin Sibert, from print_configuration_deck.
   *	Modified: 02/01/84, Keith Loepere for -label, also to allow
   *	   comparison of two decks, neither the config_deck. */

	dcl     (argno, nargs)	 fixed bin;
	dcl     (al, rsl)		 fixed bin (21);
	dcl     (ap, rsp)		 pointer;
	dcl     arg		 char (al) based (ap);
	dcl     rs		 char (rsl) varying based (rsp);
	dcl     code		 fixed bin (35);
	dcl     whoami		 char (32);
	dcl     (idx, jdx)		 fixed bin;
	dcl     brief_sw		 bit (1) aligned;
	dcl     af_sw		 bit (1) aligned;
	dcl     label_output	 bit (1) aligned;

	dcl     (old_dname, new_dname) char (168);	/* also pathname for messages */
	dcl     (old_ename, new_ename) char (32);
	dcl     (old_dp, new_dp)	 pointer;
	dcl     (old_bc, new_bc)	 fixed bin (24);
	dcl     (old_recs, new_recs)	 fixed bin;
	dcl     (old_max_recs, new_max_recs) fixed bin;
	dcl     card_str		 char (256) varying;

/* The limit of 32 on the size of the changed_cards array is part of the heuristics
   used to decide whether the decks are "completely different". It is 32 because
   that is a convenient number, rather than from some sort of sacred principle. */

	dcl     n_changed		 fixed bin;
	dcl     1 changed_cards	 (32) aligned,	/* indices of changed cards */
		2 old		 fixed bin,
		2 new		 fixed bin;

	dcl     n_old_mem_cards	 fixed bin;
	dcl     n_new_mem_cards	 fixed bin;

	dcl     1 mem_cards		 (16) aligned,	/* should never be more than 16 memories, right? */
		2 old_idx		 fixed bin,
		2 old_port	 fixed bin (35),
		2 new_idx		 fixed bin,
		2 new_port	 fixed bin (35);

	dcl     decks_different	 bit (1) aligned;
	dcl     mem_cards_different	 bit (1) aligned;
	dcl     n_added		 fixed bin;
	dcl     n_deleted		 fixed bin;

	dcl     added		 bit (1024) aligned;/* bits indicating which cards were added, deleted, changed */
	dcl     deleted		 bit (1024) aligned;/* note that this puts a limit of 1024 cards in a config deck. */

	dcl     complain		 entry variable options (variable);

	dcl     active_fnc_err_	 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     config_deck_parse_$binary_to_ascii entry (ptr, char (256) var);
	dcl     cu_$af_return_arg	 entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), pointer, fixed binary (24), fixed binary (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
     	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	dcl     (error_table_$noarg,
	        error_table_$badopt)	 fixed bin (35) external static;

/* The CARD_OPERANDS list defines all the cards which have several operands to
   be included in the comparison before deciding whether the cards are "changed",
   or deleted and added. */

	dcl     1 CARD_OPERANDS	 (9) aligned internal static options (constant),
		2 name		 char (4) aligned init
				 ("cpu ", "iom ", "mem ", "chnl", "mpc ", "prph", "part", "udsk", "parm"),
		2 count		 fixed bin init
				 (1, 1, 1, 1, 2, 1, 1, 1, 1);

	dcl     cleanup		 condition;

	dcl     (addr, char, copy, divide, hbound, null, rtrim, substr, unspec) builtin;

/*  */

	whoami = "compare_configuration_deck";
	old_dp = null ();
	new_dp = null ();

	on condition (cleanup) call clean_things_up ();

	call cu_$af_return_arg (nargs, rsp, rsl, code);

	if code ^= 0 then do;			/* assume it's a command */
		complain = com_err_;
		af_sw = "0"b;
	     end;

	else do;					/* otherwise, it's an AF */
		complain = active_fnc_err_;
		af_sw = "1"b;
		rs = "";
	     end;

	brief_sw = "0"b;
	label_output = "0"b;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if char (arg, 1) ^= "-" then do;		/* a pathname, perhaps? */
		     if new_dp ^= null () then do;	/* but at most two, thanks */
			     call complain (0, whoami, "At most two pathnames for config decks may be supplied. ^a", arg);
			     goto MAIN_RETURN;
			end;

		     if old_dp = null () then do;
			     call expand_pathname_ (arg, old_dname, old_ename, code);
			     if code ^= 0 then do;
				     call complain (code, whoami, "^a", arg);
				     goto MAIN_RETURN;
				end;

			     call initiate_file_ (old_dname, old_ename, R_ACCESS, old_dp, old_bc, code);
			     if old_dp = null () then do;
				     call complain (code, whoami, "^a", pathname_ (old_dname, old_ename));
				     goto MAIN_RETURN;
				end;
			end;
		     else do;			/* must be second (new) deck */
			     call expand_pathname_ (arg, new_dname, new_ename, code);
			     if code ^= 0 then do;
				     call complain (code, whoami, "^a", arg);
				     goto MAIN_RETURN;
				end;

			     call initiate_file_ (new_dname, new_ename, R_ACCESS, new_dp, new_bc, code);
			     if new_dp = null () then do;
				     call complain (code, whoami, "^a", pathname_ (new_dname, new_ename));
				     goto MAIN_RETURN;
				end;
			end;
		end;

	     else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;
	     else if arg = "-label" | arg = "-lbl" then label_output = "1"b;
	     else if arg = "-no_label" | arg = "-nlbl" then label_output = "0"b;

	     else do;
		     call complain (error_table_$badopt, whoami, "^a", arg);
		     goto MAIN_RETURN;
		end;
	end;					/* of argument loop */

/*  */

	config_n_cards, config_max_cards = 1;		/* eliminate compiler warning */

	if old_dp = null () then do;
		call complain (error_table_$noarg, whoami, "^/^5xUsage:^3x^a pathname_of_old_deck {pathname_of_new_deck} {-brief}", whoami);
		goto MAIN_RETURN;
	     end;

	if new_dp = null () then do;			/* use system copy as new */
		new_dname = ">sl1";
		new_ename = "config_deck";
		call initiate_file_ (new_dname, new_ename, R_ACCESS, new_dp, new_bc, code);
		if new_dp = null () then do;
			call com_err_ (code, whoami, "Unable to initiate >sl1>config_deck");
			goto MAIN_RETURN;
		     end;
	     end;

	old_dname = pathname_ (old_dname, old_ename);
	new_dname = pathname_ (new_dname, new_ename);

	old_max_recs = divide (old_bc, (36 * 16), 17, 0); /* count the cards in each deck */
	new_max_recs = divide (new_bc, (36 * 16), 17, 0);

	call count_cards (new_dp, new_max_recs, new_recs);
	if new_recs < 0 then do;
		call complain (0, whoami, "Config deck ^a appears misformatted.", new_dname);
		goto MAIN_RETURN;
	     end;

	call count_cards (old_dp, old_max_recs, old_recs);
	if old_recs < 0 then do;
		call complain (0, whoami, "Config deck ^a appears misformatted.", old_dname);
		goto MAIN_RETURN;
	     end;


	call compare_decks ();

	if decks_different then do;			/* sorry, too different */
		if af_sw then do;			/* just return false */
			rs = "false";
			goto MAIN_RETURN;
		     end;

		call ioa_ ("Config deck^[s differ substantially.^; ^a differs substantially from ^a.^]",
		     brief_sw, new_dname, old_dname);

		if brief_sw then goto MAIN_RETURN;	/* don't bother printing them */

		call ioa_ ("Config deck 2 (^a):^/", new_dname);

		call print_deck (new_dp, new_recs, 3);

		call ioa_ ("^/Config deck 1 (^a):^/", old_dname);

		call print_deck (old_dp, old_recs, 3);

		call ioa_ ("");
		goto MAIN_RETURN;
	     end;

	if (n_added = 0) & (n_deleted = 0) & (n_changed = 0) & (^mem_cards_different) then do;
		if af_sw then do;
			rs = "true";
			goto MAIN_RETURN;
		     end;

		if ^brief_sw then /* no differences, report that fact, perhaps */
		     call ioa_ ("Decks are identical.^/");
		goto MAIN_RETURN;
	     end;

	if af_sw then do;				/* there are some differences... */
		rs = "false";
		goto MAIN_RETURN;
	     end;

	if n_added > 0 then do;
		if ^brief_sw then
		     call ioa_ ("^/Cards added in deck 2:");

		do idx = 1 to new_recs;
		     if substr (added, idx, 1) = "1"b then do;
			     cardp = addr (new_dp -> config_deck.cards (idx));
			     call get_card_str ();
			     if brief_sw then
				call ioa_ ("New:^2x^a", card_str);
			     else call ioa_ ("^2x^a", card_str);
			end;
		end;
	     end;					/* of processing for added cards */

	if n_deleted > 0 then do;
		if ^brief_sw then
		     call ioa_ ("^/Cards deleted from deck 2:");

		do idx = 1 to new_recs;
		     if substr (deleted, idx, 1) = "1"b then do;
			     cardp = addr (old_dp -> config_deck.cards (idx));
			     call get_card_str ();
			     if brief_sw then
				call ioa_ ("Old:^2x^a", card_str);
			     else call ioa_ ("^2x^a", card_str);
			end;
		end;
	     end;					/* of processing for deleted cards */

	if n_changed > 0 then do;
		if ^brief_sw then
		     call ioa_ ("^/Changed cards:");

		do idx = 1 to n_changed;
		     jdx = changed_cards.old (idx);
		     cardp = addr (old_dp -> config_deck.cards (jdx));
		     call get_card_str ();
		     call ioa_ ("Was:^2x^a", card_str); /* format is the same here, brief or not */

		     jdx = changed_cards.new (idx);
		     cardp = addr (new_dp -> config_deck.cards (jdx));
		     call get_card_str ();
		     call ioa_ ("^6x^a", card_str);
		end;
	     end;					/* of processing for changed cards */

	if mem_cards_different then do;		/* MEM cards are reorganized between the two decks, */
		if ^brief_sw then /* so print all the MEM cards */
		     call ioa_ ("^/MEM cards are reordered:");

		do idx = 1 to n_old_mem_cards;
		     cardp = addr (old_dp -> config_deck.cards (mem_cards.old_idx (idx)));
		     call get_card_str ();
		     call ioa_ ("^[Was:^2x^;^6x^]^a", (idx = 1), card_str);
		end;

		do idx = 1 to n_new_mem_cards;
		     cardp = addr (new_dp -> config_deck.cards (mem_cards.new_idx (idx)));
		     call get_card_str ();
		     call ioa_ ("^[Now:^2x^;^6x^]^a", (idx = 1), card_str);
		end;
	     end;

MAIN_RETURN:
	call clean_things_up ();

	return;

/*  */

count_cards: proc (P_dp, P_max_recs, P_recs);

/* *	This procedure counts the cards in a config deck, and decides whether the
   *	deck is properly formatted. */

	dcl     (P_dp		 pointer,
	        P_max_recs		 fixed bin,
	        P_recs		 fixed bin) parameter;

	dcl     idx		 fixed bin;
	dcl     done		 bit (1) aligned;
	dcl     count		 fixed bin;
	dcl     cp		 pointer;

	count = 0;
	done = "0"b;

	do idx = 1 to P_max_recs while (^done);		/* check format */
	     cp = addr (P_dp -> config_deck.cards (idx));
	     if cp -> config_card.word = FREE_CARD_WORD then done = "1"b; /* found the end */
	     else count = count + 1;			/* record count */
	end;

	if ^done then /* indicate error */
	     P_recs = -1;
	else P_recs = count;			/* otherwise, return count */

	return;
     end count_cards;

/*  */

get_card_str: proc ();

	dcl     idx		 fixed bin;
	dcl     type		 bit (2) aligned;
	dcl     char_field		 char (4);
	dcl     numeric_field	 fixed bin (35);
	dcl     temp_str		 char (16) varying;

	if label_output then call config_deck_parse_$binary_to_ascii (cardp, card_str);
	else do;
		card_str = config_card.word;		/* initialize output string */

		do idx = 1 to config_card.n_fields;	/* look at all words of the card */
		     type = config_card.field_type (idx); /* get the type for the current word */
		     unspec (numeric_field) = unspec (config_card.data_field (idx));

		     if type = CONFIG_OCTAL_TYPE then /* octal number */
			call ioa_$rsnnl ("^o", temp_str, (0), numeric_field);

		     else if type = CONFIG_SINGLE_CHAR_TYPE then /* letter, probably */
			if numeric_field > 8 | numeric_field < 1 then /* apparently not? */
			     call ioa_$rsnnl ("^o", temp_str, (0), numeric_field);
			else temp_str = substr ("abcdefgh", numeric_field, 1);

		     else if type = CONFIG_STRING_TYPE then do; /* string */
			     unspec (char_field) = unspec (config_card.data_field (idx));
			     temp_str = char_field;
			end;

		     else if type = CONFIG_DECIMAL_TYPE then /* decimal number */
			call ioa_$rsnnl ("^d.", temp_str, (0), numeric_field);

		     card_str = card_str || "  ";
		     card_str = card_str || temp_str;
		end;				/* of loop through card fields */
	     end;

	return;
     end get_card_str;

/*  */

compare_decks: proc ();

/* *	This procedure compares the two decks, after deciding whether the
   *	MEM cards should be compared directly or listed in their entirity. */

	dcl     (old_idx, new_idx, idx, jdx) fixed bin;
	dcl     (ocp, ncp)		 pointer;

/* First, we look through each deck to find all the MEM cards. This is done so that it is possible to
   detect whether the cards have been rearranged, and thus whether they should be listed. The object
   of this is to only print all the mem cards if their order is interestingly different; that is, to
   not print them if the only change is the turning on/off of a single memory. If there are a different
   number of MEM cards in the two decks, they are de-facto assumed to have been rearranged. */

	n_old_mem_cards = 0;
	n_new_mem_cards = 0;

	do old_idx = 1 to old_recs;			/* now, locate all the mem cards in the old deck */
	     ocp = addr (old_dp -> config_deck.cards (old_idx));

	     if ocp -> config_card.word = MEM_CARD_WORD then do; /* special-case MEM cards to detect reordering */
		     if n_old_mem_cards >= hbound (mem_cards, 1) then
			goto DECKS_DIFFERENT;

		     n_old_mem_cards = n_old_mem_cards + 1;

		     mem_cards (n_old_mem_cards).old_idx = old_idx; /* record info about this card */
		     mem_cards (n_old_mem_cards).old_port = ocp -> mem_card.tag;
		end;
	end;

	do new_idx = 1 to new_recs;			/* and look in the new deck, too */
	     ncp = addr (new_dp -> config_deck.cards (new_idx));

	     if ncp -> config_card.word = MEM_CARD_WORD then do; /* special-case MEM cards to detect reordering */
		     if n_new_mem_cards >= hbound (mem_cards, 1) then
			goto DECKS_DIFFERENT;

		     n_new_mem_cards = n_new_mem_cards + 1;

		     mem_cards (n_new_mem_cards).new_idx = new_idx; /* record info about this card */
		     mem_cards (n_new_mem_cards).new_port = ncp -> mem_card.tag;
		end;
	end;

	mem_cards_different = "0"b;

	if n_old_mem_cards ^= n_new_mem_cards then /* if different counts, one has been added/deleted, so we want */
	     mem_cards_different = "1"b;		/* to print out all of both sets of mem cards */

	else do;					/* otherwise, look through and see if the order is the same */
		do idx = 1 to n_old_mem_cards while (^mem_cards_different); /* and set the bit if it isn't */
		     if mem_cards.old_port (idx) ^= mem_cards.new_port (idx) then
			mem_cards_different = "1"b;
		end;
	     end;

/* Now, run through the two decks and compare individual cards, ignoring MEM cards if
   they have been determined above to be different. */

	n_changed = 0;
	n_added = new_recs;
	n_deleted = 0;

	substr (added, 1, new_recs) = copy ("1"b, new_recs); /* assume all have been added to start out with */
	substr (deleted, 1, old_recs) = copy ("0"b, old_recs); /* and that none have been deleted */
	decks_different = "0"b;

	do old_idx = 1 to old_recs;			/* look through all cards in the original deck */
	     ocp = addr (old_dp -> config_deck.cards (old_idx));

	     if ocp -> config_card.word = MEM_CARD_WORD then /* special-case MEM cards if necessary */
		if mem_cards_different then
		     goto NEXT_OLD_CARD;

	     do new_idx = 1 to new_recs;		/* compare against new cards */
		if substr (added, new_idx, 1) = "0"b then /* we've already hit this one, and gotten */
		     goto NEXT_NEW_CARD;		/* something from it, so don't compare again */

		ncp = addr (new_dp -> config_deck.cards (new_idx));

		if ncp -> config_card.word = MEM_CARD_WORD then /* ignore MEM cards, if necessary */
		     if mem_cards_different then
			goto NEXT_NEW_CARD;		/* and consider the next new card for comparison */

		if unspec (ocp -> config_card) = unspec (ncp -> config_card) then /* identical cards */
		     goto IDENTICAL;

		if ocp -> config_card.word ^= ncp -> config_card.word then /* see if they're similar */
		     goto DIFFERENT;

/* This loop tests to see whether the cards require any similar operands. Examples of this would be
   MEM cards, PRPH cards, etc. If the card name is not found in our list of cards, it is assumed to
   not need any similar operands, and thus be "changed" as long as the names are the same. */

		do idx = 1 to hbound (CARD_OPERANDS, 1);/* names are the same, see if we need similar operands, too */
		     if ocp -> config_card.word = CARD_OPERANDS.name (idx) then do; /* we know this card */
			     do jdx = 1 to CARD_OPERANDS.count (idx); /* see if the required operands are the same */
				if ocp -> config_card.data_field (jdx) ^= ncp -> config_card.data_field (jdx) then
				     goto DIFFERENT;/* words are different */

				if ocp -> config_card.field_type (jdx) ^= ncp -> config_card.field_type (jdx) then
				     goto DIFFERENT;/* types are different */
			     end;			/* of comparing required same operands */

			     goto CHANGED;		/* the cards are similar */
			end;			/* of checking operands for similarity */
		end;				/* of loop looking for cards which need similar operands */
						/* just fall through if not found */

CHANGED:		if n_changed >= hbound (changed_cards, 1) then /* too many different cards. */
		     goto DECKS_DIFFERENT;		/* decks are probably completely different */

		n_changed = n_changed + 1;		/* record the card indices */
		changed_cards.old (n_changed) = old_idx;
		changed_cards.new (n_changed) = new_idx;

		substr (added, new_idx, 1) = "0"b;	/* record that we've gotten something from this card */
		n_added = n_added - 1;		/* update the count of added cards */
		goto NEXT_OLD_CARD;			/* and get the next old card */

IDENTICAL:	substr (added, new_idx, 1) = "0"b;	/* the cards are identical, so flag it as seen, and continue */
		n_added = n_added - 1;		/* with the next new card */
		goto NEXT_OLD_CARD;

DIFFERENT:	goto NEXT_NEW_CARD;			/* if cards are different, do nothing and try the next card */

NEXT_NEW_CARD: end;					/* of loop through new cards */

	     substr (deleted, old_idx, 1) = "1"b;	/* if we fall out, there was no comprable card, so the old */
	     n_deleted = n_deleted + 1;		/* card has been deleted */

NEXT_OLD_CARD: end;					/* of loop through old cards */

	if mem_cards_different then do;		/* take the MEM cards out of the "added" list */
		do new_idx = 1 to new_recs;
		     ncp = addr (new_dp -> config_deck.cards (new_idx));

		     if ncp -> config_card.word = MEM_CARD_WORD then do;
			     substr (added, new_idx, 1) = "0"b;
			     n_added = n_added - 1;
			end;
		end;				/* of loop through cards */
	     end;

	if (n_added + n_deleted) > hbound (changed_cards, 1) then /* if too many, the decks are different */
	     goto DECKS_DIFFERENT;

	decks_different = "0"b;			/* minor differences, if at all */

	return;					/* normal return */


DECKS_DIFFERENT:					/* come here if the decks appear completely different */
	decks_different = "1"b;
	return;

     end compare_decks;

/*  */

print_deck: proc (P_dp, P_recs, P_indent);

/* *	This procedure prints a config deck */

	dcl     (P_dp		 pointer,
	        P_recs		 fixed bin,
	        P_indent		 fixed bin) parameter;

	dcl     idx		 fixed bin;

	do idx = 1 to P_recs;
	     cardp = addr (P_dp -> config_deck.cards (idx));
	     call get_card_str ();
	     call ioa_ ("^vx^a", P_indent, card_str);
	end;

	return;
     end print_deck;

/*  */

clean_things_up: proc ();

	if old_dp ^= null () then
	     call terminate_file_ (old_dp, 0, TERM_FILE_TERM, (0));

	if new_dp ^= null () then
	     call terminate_file_ (new_dp, 0, TERM_FILE_TERM, (0));

	return;
     end clean_things_up;
%page; %include config_deck;
%page; %include config_mem_card;
%page; %include access_mode_values;
%page; %include terminate_file;
     end compare_configuration_deck;
