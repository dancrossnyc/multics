/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_tuning_parameters:
print_tuning_parameter:
ptp:
	procedure () options (variable);

/* Completely rewritten, for hc_tune, 27 June 1981, W. Olin Sibert */
/* Modified September 1981 by J. Bongiovanni for linkage_error condition */

dcl  argno fixed bin;
dcl  nargs fixed bin;
dcl  al fixed bin (21);
dcl  ap pointer;
dcl  arg char (al) based (ap);
dcl  code fixed bin (35);
dcl  idx fixed bin;

dcl  tp_type fixed bin;
dcl  tp_value bit (36) aligned;
dcl  tp_ptr pointer;
dcl  tp_name char (32);
dcl  tp_short_name char (32);

dcl  special_sw bit (1) aligned;
dcl  long_sw bit (1) aligned;
dcl  have_names bit (1) aligned;

dcl 1 tp_list (tp_list_size) aligned like tp_info based (tp_list_ptr);
dcl  tp_list_ptr pointer;
dcl  tp_list_size fixed bin;
dcl  tp_list_area_ptr pointer;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  ioa_ entry options (variable);
dcl  metering_gate_$get_tuning_parameter entry
    (char (*), fixed bin, bit (36) aligned, pointer, char (*), char (*), fixed bin (35));
dcl  metering_gate_$list_tuning_parameters entry
    (pointer, bit (1) aligned, fixed bin, pointer);

dcl  error_table_$badopt fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("print_tuning_parameters");

dcl  (cleanup, linkage_error) condition;

dcl (addr, char, null) builtin;

/*  */

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
	     return;
	     end;

	special_sw = "0"b;				/* Initialize flags */
	long_sw = "0"b;
	have_names = "0"b;
	tp_list_ptr = null ();

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if (arg = "-short") | (arg = "-sh") then long_sw = "0"b;
	     if (arg = "-long") | (arg = "-lg") then long_sw = "1"b;
	     else if (arg = "-special") | (arg = "-all") | (arg = "-a") then special_sw = "1"b;
	     else if (char (arg, 1) = "-") then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		return;
		end;
	     else have_names = "1"b;
	     end;

	on condition (cleanup) begin;
	     if tp_list_ptr ^= null () then free tp_list;
	     end;

	on condition (linkage_error) begin;
	     call com_err_ (0, WHOAMI, "This routine requires access to metering_gate_");
	     goto main_return;
	end;
	

/*  */

	if ^have_names then do;			/* Must list them all */
	     tp_list_area_ptr = get_system_free_area_ ();
	     call metering_gate_$list_tuning_parameters (tp_list_area_ptr, special_sw, tp_list_size, tp_list_ptr);

	     call ioa_ ("Current system tuning parameters:^/");

	     do idx = 1 to tp_list_size;
		tp_name = tp_list (idx).long_name;
		tp_short_name = tp_list (idx).short_name;
		tp_value = tp_list (idx).value;
		tp_ptr = tp_list (idx).ptr;
		tp_type = tp_list (idx).type;

		call print ();			/* Print this one */
		end;

	     call ioa_ ("");
	     end;

	else do;					/* List individual values */
	     do argno = 1 to nargs;
		call cu_$arg_ptr (argno, ap, al, (0));
		if (char (arg, 1) ^= "-") then do;
		     tp_name = arg;
		     call metering_gate_$get_tuning_parameter
			(tp_name, tp_type, tp_value, tp_ptr, tp_name, tp_short_name, code);
		     if code = 0 then
			call print ();
		     else call com_err_ (code, WHOAMI, "^a", tp_name);
		     end;
		end;
	     end;

main_return:   
	if tp_list_ptr ^= null () then free tp_list;

	return;

/*  */

print: proc ();

/* This procedure prints the value for a single tuning parameter. */

dcl  char_value char (4) aligned;
dcl  scaled_value fixed bin (35, 18);
dcl  binary_value fixed bin (35);
dcl  float_value float bin (27);

	unspec (char_value) = tp_value;
	unspec (scaled_value) = tp_value;
	unspec (binary_value) = tp_value;
	unspec (float_value) = tp_value;

	if ^long_sw then do;
	     if tp_type = TP_CHAR then
		call ioa_ ("^a^28t""^a""", tp_name, char_value);

	     else if tp_type = TP_INTEGER then
		call ioa_ ("^a^28t^d", tp_name, binary_value);

	     else if tp_type = TP_SCALED_INTEGER then
		call ioa_ ("^a^28t^f", tp_name, round (decimal (scaled_value), 4));

	     else if tp_type = TP_MICROSECONDS then
		call ioa_ ("^a^28t^f seconds", tp_name, (float (binary_value) / 1.0e6));

	     else if tp_type = TP_ON_OFF then
		call ioa_ ("^a^28t^[on^;off^]", tp_name, (binary_value ^= 0));

	     else if tp_type = TP_FLOAT then
		call ioa_ ("^a^28t^f", tp_name, float_value);

	     else call ioa_ ("^a^28t^w", tp_name, tp_value);
	     end;

	else do;
	     if tp_type = TP_CHAR then
		call ioa_ ("^a^28t^a^40t""^a""^52t(^p)",
		     tp_name, tp_short_name, char_value, tp_ptr);

	     else if tp_type = TP_INTEGER then
		call ioa_ ("^a^28t^a^40t^d^52t(^p)",
		     tp_name, tp_short_name, binary_value, tp_ptr);

	     else if tp_type = TP_SCALED_INTEGER then
		call ioa_ ("^a^28t^a^40t^f^52t(^p)",
		     tp_name, tp_short_name, round (decimal (scaled_value), 4), tp_ptr);

	     else if tp_type = TP_MICROSECONDS then
		call ioa_ ("^a^28t^a^40t^f seconds^52t(^p)",
		     tp_name, tp_short_name, (float (binary_value) / 1.0e6), tp_ptr);

	     else if tp_type = TP_ON_OFF then
		call ioa_ ("^a^28t^a^40t^[on^;off^]^52t(^p)",
		     tp_name, tp_short_name, (binary_value ^= 0), tp_ptr);

	     else if tp_type = TP_FLOAT then
		call ioa_ ("^a^28t^a^40t^f^52t(^p)",
		     tp_name, tp_short_name, float_value, tp_ptr);
					     

	     else call ioa_ ("^a^28t^a^40t^w^52t(^p)",
		     tp_name, tp_short_name, tp_value, tp_ptr);
	     end;

	return;
	end print;

%page; %include tuning_parameter_info;

	end print_tuning_parameters;
