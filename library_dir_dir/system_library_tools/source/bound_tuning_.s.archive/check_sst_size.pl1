/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: ^inddcls,ind4,ifthenstmt,ifthendo,thendo,ifthen,tree,^case */

check_sst_size: proc;

        call cu_$arg_count (n_args, code);
        if code ^= 0 then go to REPORT_ERROR;

        do arg_no = 1 to n_args;

	  call cu_$arg_ptr (arg_no, argp, argl, code);
	  if code ^= 0 then go to REPORT_ERROR;

	  if expect_4k_value then do;
		expect_4k_value = "0"b;
		ctl_arg = "-4k";
		aste_entries (0) = cv_dec_check_ (arg, code);
		if code ^= 0 then go to REPORT_CV_ERROR;
		if aste_entries (0) < 1 then go to REPORT_VALUE_ERROR;
	      end;

	  else if expect_16k_value then do;
		     expect_16k_value = "0"b;
		     ctl_arg = "-16k";
		     aste_entries (1) = cv_dec_check_ (arg, code);
		     if code ^= 0 then go to REPORT_CV_ERROR;
		     if aste_entries (1) < 1 then go to REPORT_VALUE_ERROR;
		 end;

	       else if expect_64k_value then do;
			expect_64k_value = "0"b;
			ctl_arg = "-64k";
			aste_entries (2) = cv_dec_check_ (arg, code);
			if code ^= 0 then go to REPORT_CV_ERROR;
			if aste_entries (2) < 1 then go to REPORT_VALUE_ERROR;
		      end;

		  else if expect_256k_value then do;
			     expect_256k_value = "0"b;
			     ctl_arg = "-256k";
			     aste_entries (3) = cv_dec_check_ (arg, code);
			     if code ^= 0 then go to REPORT_CV_ERROR;
			     if aste_entries (3) < 1 then go to REPORT_VALUE_ERROR;
			 end;

		       else if expect_pn_value then do;
				ctl_arg = "-pn";
				if index (arg, "-") = 1 & ^accept_hyphen_path then do;
				        if arg = "-name" | arg = "-nm" then accept_hyphen_path = "1"b;
				        else go to REPORT_VALUE_ERROR;
				    end;
				else do;
				        expect_pn_value = "0"b;
				        accept_hyphen_path = "0"b;
				        call expand_pathname_ (arg, config_dir_name, config_ename, code);
				        if code ^= 0 then do;
					      call com_err_ (code, my_name,
						"^/Pathname expansion for config deck: ^a", arg);
					      return;
					  end;

				        have_path = "1"b;
				    end;
			      end;

			  else do;
				if arg = "-4k" then expect_4k_value = "1"b;
				else if arg = "-16k" then expect_16k_value = "1"b;
				     else if arg = "-64k" then expect_64k_value = "1"b;
					else if arg = "-256k" then expect_256k_value = "1"b;
					     else if arg = "-pathname" then expect_pn_value = "1"b;
						else if arg = "-pn" then expect_pn_value = "1"b;
						     else if index (arg, "-") = 1 then do;
							        code = error_table_$badopt;
							        go to REPORT_ARG_ERROR;
							    end;
							else do;
							        code = error_table_$bad_arg;
							        go to REPORT_ARG_ERROR;
							    end;
			      end;		/* ends ctl arg do */

        end;					/* ends arg do loop */

/* Check for missing arguments. */

        if expect_4k_value | expect_16k_value | expect_64k_value | expect_256k_value | expect_pn_value then do;
	      code = error_table_$noarg;
	      go to REPORT_ARG_ERROR;
	  end;

/* If any values were not supplied, find a config deck, and get them. */

        configp = null ();
        do i = 0 to hbound (aste_entries, 1);
	  if aste_entries (i) = 0 then do;
		if configp = null () then do;
		        on cleanup call clean_up ();

		        if have_path then do;
			      call initiate_file_ (config_dir_name, config_ename, R_ACCESS, configp, bitcnt, code);
			      if code ^= 0 then do;
				    call com_err_ (code, my_name,
				        "^/Cannot access config deck with pathname, ^a", pathname_ (config_dir_name, config_ename));
				    return;
				end;
			  end;
		        else do;
			      configp = addr (config_deck$);
			      call hcs_$status_mins (configp, stype, bitcnt, code);
			      if code ^= 0 then do;
				    call com_err_ (code, my_name, "^/Cannot get bit count of config deck.");
				    return;
				end;
			  end;

		        config_n_cards = divide (divide (bitcnt, 36, 17, 0), size (config_card), 17, 0);
		        config_max_cards = 128;	/* a guess */

		        sst_cardp = null ();
		        do card_no = 1 by 1 while (config_deck.cards (card_no).word ^= FREE_CARD_WORD & sst_cardp = null ());
			  cardp = addr (config_deck.cards (card_no));
			  if config_card.word = SST_CARD_WORD then sst_cardp = cardp;
		        end;

		        if sst_cardp = null () then do;
			      call com_err_ (0, my_name, "Unable to find SST card in configuration deck.");
			      return;
			  end;
		    end;				/* ends do if configp = null */

		aste_entries (i) = sst_card.no_aste (i);
	      end;				/* ends do if aste_entries(i) = 0 */
        end;					/* ends do loop through aste_entries */
        call clean_up ();

/* Calculate size of hash table. */

        n_astes = sum (aste_entries);
        n_buckets = divide (n_astes, AVG_HT_DEPTH, 17);
        do i = 1 to hbound (HT_SIZES, 1) while (n_buckets > HT_SIZES (i));
        end;
        if i > hbound (HT_SIZES, 1) then i = hbound (HT_SIZES, 1);
        n_buckets = HT_SIZES (i);

/* Calculate total size of SST. */

        n_sst_words = size (sst) + n_buckets;
        do i = 0 to 3;
	  words_in_aste (i) = size (aste) + PTS (i);
	  n_sst_words = n_sst_words + words_in_aste (i) * aste_entries (i);
        end;

        n_pages = divide (n_sst_words, 1024, 35, 0);
        words_in_last_page = mod (n_sst_words, 1024);
        if words_in_last_page ^= 0 then n_pages = n_pages + 1;

        call ioa_ ("Size of SST header = ^d words^/Size of AST hash table = ^d words", size (sst), n_buckets);
        do i = 0 to 3;
	  call ioa_ ("Size of ^a ASTE pool with ^d entries (^d words in each) = ^d words",
	      aste_name (i), aste_entries (i), words_in_aste (i), words_in_aste (i) * aste_entries (i));
        end;
        call ioa_ ("Total size of SST = ^d words (^d pages^[ with ^d words used in last page^])",
	  n_sst_words,
	  n_pages, (words_in_last_page ^= 0), words_in_last_page
	  );
        return;

REPORT_ERROR:
        call com_err_ (code, my_name);
        go to DISPLAY_USAGE;

REPORT_ARG_ERROR:
        call com_err_ (code, my_name, arg);

DISPLAY_USAGE:
        call ioa_ ("Usage:  ^a <-4k N_4K_ASTE | -16k N_16K_ASTE | -64k N_64K_ASTE | -256k N_256K_ASTE | -pn PATH>", my_name);
        return;

REPORT_CV_ERROR:
        call com_err_ (error_table_$bad_conversion, my_name,
	  "^/Character ^d caused conversion error in arg, ^a, to control argument ""^a"".",
	  code, arg, ctl_arg);
        return;

REPORT_VALUE_ERROR:
        call com_err_ (error_table_$bad_arg, my_name, "^a to control argument ^a.", arg, ctl_arg);
        return;

clean_up: proc;

        if have_path then if configp ^= null then do;
		 call terminate_file_ (configp, 0, TERM_FILE_TERM, (0));
		 configp = null;
	       end;
    end;
%page;
dcl     AVG_HT_DEPTH	 fixed bin init (5) int static options (constant);
dcl     HT_SIZES		 (6) fixed bin init (64, 128, 256, 512, 1024, 2048) int static options (constant);
dcl     PTS		 (0:3) fixed bin init (4, 16, 64, 256);
dcl     accept_hyphen_path	 bit (1) init ("0"b);
dcl     addr		 builtin;
dcl     arg		 char (argl) based (argp);
dcl     argl		 fixed bin (21);
dcl     argp		 pointer;
dcl     arg_no		 fixed bin;
dcl     aste_entries	 (0:3) fixed bin init (0, 0, 0, 0);
dcl     aste_name		 (0:3) char (4) init ("4K", "16K", "64K", "256K");
dcl     bitcnt		 fixed bin (24);
dcl     card_no		 fixed bin;
dcl     cleanup		 condition;
dcl     code		 fixed bin (35);
dcl     com_err_		 entry () options (variable);
dcl     config_dir_name	 char (168);
dcl     config_ename	 char (32);
dcl     ctl_arg		 char (32);
dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl     divide		 builtin;
dcl     error_table_$active_function fixed bin (35) ext static;
dcl     error_table_$bad_arg	 fixed bin (35) ext static;
dcl     error_table_$bad_conversion fixed bin (35) ext static;
dcl     error_table_$badopt	 fixed bin (35) ext static;
dcl     error_table_$noarg	 fixed bin (35) ext static;
dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
dcl     expect_4k_value	 bit (1) init ("0"b);
dcl     expect_16k_value	 bit (1) init ("0"b);
dcl     expect_64k_value	 bit (1) init ("0"b);
dcl     expect_256k_value	 bit (1) init ("0"b);
dcl     expect_pn_value	 bit (1) init ("0"b);
dcl     hbound		 builtin;
dcl     have_path		 bit (1) init ("0"b);
dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl     i			 fixed bin;
dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl     ioa_		 entry () options (variable);
dcl     mod		 builtin;
dcl     my_name		 char (14) init ("check_sst_size") int static options (constant);
dcl     n_args		 fixed bin;
dcl     n_astes		 fixed bin;
dcl     n_buckets		 fixed bin;
dcl     n_pages		 fixed bin;
dcl     n_sst_words		 fixed bin;
dcl     null		 builtin;
dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
dcl     size		 builtin;
dcl     stype		 fixed bin (2);
dcl     sum		 builtin;
dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl     words_in_aste	 (0:3) fixed bin;
dcl     words_in_last_page	 fixed bin;
%page;
%include access_mode_values;
%page;
%include aste;
%page;
%include config_deck;
%page;
%include config_sst_card;
%page;
%include sst;
%page;
%include terminate_file;
    end check_sst_size;
