/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
set_work_class:
swc:
     proc;

/* Coded by RE Mullen, Spring 1975, for priority scheduler */
/* Modified by E. N. Kittlitz. March 1982, for user_table conversion, code cleanup. */


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Hartogs), install(87-08-04,MR12.1-1055):
      A) Upgraded for change to answer_table.incl.pl1 and
         user_table_entry.incl.pl1.
      B) Support newly-added instance tags.
                                                   END HISTORY COMMENTS */


dcl  Person char (32);
dcl  Project char (32);
dcl  Tag char (32);
dcl  ac fixed bin;
dcl  al fixed bin (21);
dcl  ap ptr;
dcl  code fixed bin (35);
dcl  found fixed bin;
dcl  i fixed bin;
dcl  oldwcnum fixed bin;
dcl  pid bit (36) aligned;
dcl  wcnum fixed bin;

dcl  arg char (al) based (ap);

dcl  com_err_ entry options (variable);
dcl  com_err_$suppress_name entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  hphcs_$set_process_work_class entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));

dcl  error_table_$bad_conversion ext static fixed bin (35);
dcl  error_table_$bad_work_class ext static fixed bin (35);
dcl  error_table_$zero_length_seg ext static fixed bin (35);

dcl  ME char (14) internal static options (constant) init ("set_work_class");
dcl  sysdir char (168) int static init (">system_control_1");

dcl  (addr, after, before, bin, bit, index, length, null, rtrim) builtin;

dcl  cleanup condition;
dcl  linkage_error condition;


/* ---------------------------------------------------------- */

/* Usage: swc wc_num id
   where id identifies the proccess to be move to work_class [wc_num]

   if id is not given only the process executing the command will be moved.
   else if id is an octal number then the process with that processid will be moved.
   else if id is of form [pers.proj.tag] then processes with matching names will be moved.
   else error.

   The Initializer is never moved unless the user of this command is
   clever enough to specify the Initializer's processid, or is Izzy hisself.

   Because this command does not modify the MGT, the move will
   will last only until the next shift change or new_proc or  .. */


	ansp, autp, dutp = null ();			/* initialize */
	found = 0;
	call cu_$arg_count (ac, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;

/* Establish handler for noaccess on hphcs_ */

	on linkage_error
	     begin;
		call com_err_ (0, ME, "This command requires access to hphcs_.");
		go to MAIN_RETURN;
	     end;
	on cleanup call CLEANUP;

/* Set work class of self | octal_processid | Per.Proj.tag */

	if (ac = 0) | (ac > 2) then do;
	     call com_err_$suppress_name (0, ME, "Usage: set_work_class wc_number pers.proj.tag");
	     return;
	end;

	call cu_$arg_ptr (1, ap, al, (0));
	wcnum = cv_dec_check_ (arg, code);
	if code ^= 0 then do;
	     call com_err_ (error_table_$bad_conversion, ME, "The first argument must be a workclass number, not ""^a"".", arg);
	     return;
	end;

	if ac = 1 then do;				/* means to set own */
	     pid = get_process_id_ ();
	     call SET_IT;
	     go to MAIN_RETURN;
	end;					/* done setting own */
	else do;
	     call cu_$arg_ptr (2, ap, al, (0));
	     pid = bit (bin (cv_oct_check_ (arg, code), 36), 36);
	     if code = 0 then do;			/* must be octal processid */
		call SET_IT;
		go to MAIN_RETURN;
	     end;
	     else do;				/* must be Person.Project.Tag */
		Person = before (arg, ".");
		Project = before (after (arg, "."), ".");
		Tag = after (after (arg, "."), ".");
		if (index (Tag, ".") > 0) |
		     (Person = "") |
		     (Project = "") |
		     al > length (Person) |
		     index ("ampz*", rtrim (Tag)) = 0 then do;
		     call com_err_ (0, ME, "Illegal syntax in process identifier ^a.", arg);
		     return;
		end;

/* Loop over all the user tables that may contain such a user. */

		call INIT ("answer_table", ansp);	/* need ansp no matter what */
		if Tag = "*" | Tag = "a" |		/* interactive   */
		     Tag = "f" then do;		/* DSA file xfer */
		     do i = 1 to anstbl.current_size;
			utep = addr (anstbl.entry (i));
			call CHECK_IT;
		     end;
		end;

		if Tag = "*" | Tag = "z" then do;
		     call INIT ("daemon_user_table", dutp);
		     do i = 1 to dutbl.current_size;
			utep = addr (dutbl.entry (i));
			call CHECK_IT;
		     end;
		end;

		if Tag = "*" | Tag = "g" |		/* Gcos simulator*/
		     Tag = "m" |			/* absentee job  */
		     Tag = "n" |			/* Cray software */
		     Tag = "p" then do;		/* Proxy absentee*/
		     call INIT ("absentee_user_table", autp);
		     do i = 1 to autp -> autbl.current_size;
			utep = addr (autp -> autbl.entry (i));
			call CHECK_IT;
		     end;
		end;
		if found = 0 then call com_err_ (0, ME, "No users match ^a.^a.^a", Person, Project, Tag);
	     end;					/* for now */

	end;
MAIN_RETURN:
	call CLEANUP;
	return;


CLEANUP: proc;

do_one_seg: proc (a_segp);

dcl  a_segp ptr;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	     if a_segp = null () then return;
	     call terminate_file_ (a_segp, 0, TERM_FILE_TERM, (0));
	end do_one_seg;

	call do_one_seg (ansp);
	call do_one_seg (autp);
	call do_one_seg (dutp);
     end CLEANUP;


CHECK_IT:
     proc;					/* see if user table entry needs work class set */

	if ute.active < NOW_HAS_PROCESS then return;
	if ute.proc_id = anstbl.as_procid then return;	/* I will not be a party to this */
	if Person = "*" then ;			/* Star Person */
	else if Person = ute.person then ;		/* Person matches */
	else if Person ^= "anonymous" then return;	/* nomatch & not want anon */
	else if ute.anonymous ^= 0 then ;		/* found wanted anon */
	else return;

	if Project = "*" then ;			/* Star Project */
	else if Project = ute.project then ;		/* Project matches */
	else return;

	pid = ute.proc_id;				/* set pid for call */
	call SET_IT;

     end CHECK_IT;


SET_IT:
     proc;					/* set one processes work class */

	call hphcs_$set_process_work_class (pid, wcnum, oldwcnum, code);
	if code = 0 then do;
	     found = found + 1;
	end;
	else if code = error_table_$bad_work_class then do;
	     call com_err_ (code, ME, "^d", wcnum);
	     go to MAIN_RETURN;
	end;
	else call com_err_ (code, ME, "Process id ^12.3b", pid);
     end SET_IT;


INIT:
     proc (i_ename, i_segp);

dcl  i_ename char (32);
dcl  i_segp pointer;
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));

	call initiate_file_ (sysdir, i_ename, R_ACCESS, i_segp, (0), code);
	if code ^= 0 & code ^= error_table_$zero_length_seg then do;
	     call com_err_ (code, ME, "^a", pathname_ (sysdir, i_ename));
	     go to MAIN_RETURN;
	end;
     end INIT;


init:
     entry;

	call cu_$arg_ptr (1, ap, al, code);
	if code = 0 then sysdir = arg;

	return;

 %include absentee_user_table;
 %include access_mode_values;
 %include answer_table;
 %include daemon_user_table;
 %include dialup_values;
 %include terminate_file;
 %include user_attributes;
 %include user_table_entry;
 %include user_table_header;

     end set_work_class;
