/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-23,Fawcett), approve(87-06-23,MCR7700),
     audit(87-06-23,Dickson), install(87-07-17,MR12.1-1042):
     Changed to display the negative numeric values as negative integers,
     instead of very positive large numbers.
  2) change(88-01-01,Gilcrease), approve(88-01-19,MCR7830),
     audit(88-01-20,Parisek), install(88-01-26,MR12.2-1018):
               Fix bug where -control argument is ignored.
                                                   END HISTORY COMMENTS */


/* format: style3 */
print_configuration_deck:
pcd:
     proc;

/* **************************************************************************
   *   This routine displays the desired card images in the configuration   *
   *   deck.  It can be called as a command or active function with up to   *
   *   32 card selection arguments, as well as with up to 16 field          *
   *   specification groups to be matched or excluded.                      *
   *   							      *
   *   Coded 1981/1982 by Warren Johnson and Jim Homan.	                *
   *   Modified: 16 January 1983 by G. Palter to add -pathname control      *
   *      control argument					      *
   *   Modified 83 June 15  by Art Beattie to increase length of line       *
   *      displayed.                                                        *
   *   Modified: 09 September 1983 by B. Braun to fix -match and -pathname  *
   *      when it's a zero length seg (phx15746).			      *
   *   Modified: 01 February 1984 by Keith Loepere for -label	      *
   ************************************************************************** */

dcl	(argN, nargs, max_size, card_no, field_no)
			fixed bin;
dcl	(card_args, match_args, exclude_args)
			fixed bin;
dcl	(argl, rsl)	fixed bin (21);
dcl	code		fixed bin (35);
dcl	(argp, rsp)	ptr;
dcl	af_sw		bit (1);
dcl	card_found	bit (1);
dcl	cards		(32) char (4);		/* card names to select */
dcl	label_output	bit (1) aligned;
dcl	match_cards	(16, 14) char (8);
dcl	exclude_cards	(16, 14) char (8);
dcl	out		char (256) varying;		/* output line */
dcl	have_pathname	bit (1);
dcl	config_dirname	char (168);
dcl	config_ename	char (32);
dcl	stype		fixed bin (2);		/* segment type */
dcl	bitcnt		fixed bin (24);		/* bit count of config deck segment */

dcl	error_routine_	entry variable options (variable);
						/* either com_err_ or active_fnc_err_ */

dcl	arg		char (argl) based (argp);
dcl	rs		char (rsl) varying based (rsp);
dcl	config_card_field_in_ascii
			char (4) based;

dcl	(addr, char, divide, fixed, index, null, substr, hbound, rtrim, size, verify)
			builtin;

dcl	cleanup		condition;

dcl	cname		char (24) init ("print_configuration_deck") int static options (constant);

dcl	error_table_$badcall
			fixed bin (35) external;
dcl	error_table_$badopt fixed bin (35) external;
dcl	error_table_$bigarg fixed bin (35) external;
dcl	error_table_$noarg	fixed bin (35) external;
dcl	error_table_$not_act_fnc
			fixed bin (35) external;
dcl	error_table_$too_many_args
			fixed bin (35) external;
dcl	error_table_$zero_length_seg
			fixed bin (35) external;

dcl	active_fnc_err_	entry options (variable);
dcl	com_err_		entry options (variable);
dcl	config_deck_parse_$binary_to_ascii
			entry (ptr, char (256) var);
dcl	cv_oct_		entry (char (*)) returns (fixed bin (35));
dcl	cu_$af_return_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin bin (35));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl	initiate_file_	entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	pathname_		entry (char (*), char (*)) returns (char (168));
dcl	requote_string_	entry (char (*)) returns (char (*));
dcl	terminate_file_	entry (ptr, fixed bin (24), bit (*), fixed bin (35));
%page;
%include config_deck;
%page;
%include access_mode_values;

%include terminate_file;
%page;
	call cu_$af_return_arg (nargs, rsp, rsl, code);
	if code = 0
	then do;
		error_routine_ = active_fnc_err_;
		af_sw = "1"b;
		rs = "";
	     end;
	else if code = error_table_$not_act_fnc
	then do;
		error_routine_ = com_err_;
		af_sw = "0"b;
	     end;
	else do;
		call com_err_ (code, cname);
		return;
	     end;

	cards (*), match_cards (*, *), exclude_cards (*, *) = "";
	card_args, match_args, exclude_args = 0;
	label_output = "0"b;
	have_pathname = "0"b;			/* will default to the live config deck */

/* Argument processing loop. */

	do argN = 1 to nargs by 1;			/* get arguments */
	     call cu_$arg_ptr (argN, argp, argl, code);
	     if code ^= 0
	     then do;
		     call error_routine_ (code, cname, "Error getting argument ^d.", argN);
		     return;
		end;
	     else ;
	     if arg = "-match"			/* -MATCH */
	     then do;
		     call pick_up_match_exclude ("-match", match_cards, match_args, argN, code);
		     if code ^= 0
		     then return;
		end;

	     else if arg = "-exclude" | arg = "-ex"	/* -EXCLUDE */
	     then do;
		     call pick_up_match_exclude ("-exclude", exclude_cards, exclude_args, argN, code);
		     if code ^= 0
		     then return;
		end;				/* end -EXCLUDE */

	     else if arg = "-label" | arg = "-lbl"	/* -LABEL */
	     then label_output = "1"b;
	     else if arg = "-no_label" | arg = "-nlbl"
	     then label_output = "0"b;

	     else if arg = "-pathname" | arg = "-pn"	/* -PATHNAME */
	     then do;
		     if argN = nargs
		     then do;
			     call error_routine_ (error_table_$noarg, cname,
				"Config deck pathname after ""-pathname"".");
			     return;
			end;
		     if have_pathname
		     then do;
			     call error_routine_ (error_table_$too_many_args, cname,
				"Only one pathname may be given.");
			     return;
			end;
		     argN = argN + 1;
		     call cu_$arg_ptr (argN, argp, argl, code);
		     if code ^= 0
		     then do;
			     call error_routine_ (code, cname, "Error getting argument ^d.", argN);
			     return;
			end;
		     call expand_pathname_ (arg, config_dirname, config_ename, code);
		     if code ^= 0
		     then do;
			     call error_routine_ (code, cname, "^a", arg);
			     return;
			end;
		     have_pathname = "1"b;		/* have a config deck pathname now */
		end;

	     else /* cannot be a control argument */
		if substr (arg, 1, 1) = "-"
	     then do;
		     call error_routine_ (error_table_$badopt, cname, arg);
		     return;
		end;
	     else do;				/* must be a card name argument */
		     card_args = card_args + 1;
		     if card_args > hbound (cards, 1)
		     then do;
			     call error_routine_ (error_table_$too_many_args, cname,
				"^/Only the first ^d card arguments will be used.", hbound (cards, 1));
			     card_args = hbound (cards, 1);
			     go to process;
			end;
		     else ;
		     if argl > 4
		     then code = error_table_$bigarg;
		     else if verify (arg, "abcdefghijklmnopqrstuvwxyz") > 0
		     then code = error_table_$badcall;
		     else code = 0;
		     if code ^= 0
		     then do;
			     call error_routine_ (code, cname, "^/Invalid card name specifier ^a.", arg);
			     return;
			end;
		     else cards (card_args) = arg;
		end;
	end;					/* end argument processing */

process:						/* begin processing */
	configp = null ();				/* for cleanup handler */

	on cleanup
	     begin;
		if have_pathname
		then if configp ^= null ()
		     then do;
			     call terminate_file_ (configp, 0, TERM_FILE_TERM, (0));
			     configp = null ();
			end;
	     end;

	if have_pathname
	then do;					/* explicit config deck pathname */
		call initiate_file_ (config_dirname, config_ename, R_ACCESS, configp, bitcnt, code);
		if code ^= 0
		then do;
			call error_routine_ (code, cname, "^a", pathname_ (config_dirname, config_ename));
			return;
		     end;
		if bitcnt = 0
		then do;
			call error_routine_ (error_table_$zero_length_seg, cname, "^a",
			     pathname_ (config_dirname, config_ename));
			return;
		     end;
	     end;

	else do;					/* use live config deck */
		configp = addr (config_deck$);
		call hcs_$status_mins (configp, stype, bitcnt, code);
		if code ^= 0
		then do;
			call error_routine_ (code, cname, "Cannot get bit count of config_deck.");
			return;
		     end;
	     end;

	max_size = divide (bitcnt, 36, 17, 0);		/* get size of config deck seg */
	config_n_cards = divide (max_size, size (config_card), 17, 0);
						/* get number of cards */
	config_max_cards = 128;			/* a guess */

/* Loop through config_deck examining each card. */

	card_found = "0"b;
	if af_sw
	then ;
	else call ioa_ ();

	do card_no = 1 by 1 to config_n_cards while (config_deck.cards (card_no).word ^= FREE_CARD_WORD);
	     cardp = addr (config_deck.cards (card_no));
	     if match_config_card ()
	     then do;				/* display or return this card */
		     card_found = "1"b;
		     if label_output
		     then call config_deck_parse_$binary_to_ascii (cardp, out);
		     else do;
			     call ioa_$rsnnl ("^a", out, (0), config_card.word);
			     do field_no = 1 to config_card.type_word.n_fields by 1;
				if config_card.type_word.field_type (field_no) = CONFIG_STRING_TYPE
				then call ioa_$rsnnl ("^a  ^a", out, (0), out,
					addr (config_card.data_field (field_no)) -> config_card_field_in_ascii);
				else if config_card.type_word.field_type (field_no) = CONFIG_OCTAL_TYPE
				then call ioa_$rsnnl ("^a  ^o", out, (0), out,
					fixed (config_card.data_field (field_no),35,0));
				else if config_card.type_word.field_type (field_no) = CONFIG_DECIMAL_TYPE
				then call ioa_$rsnnl ("^a  ^d.", out, (0), out,
					fixed (config_card.data_field (field_no),35,0));
				else if config_card.type_word.field_type (field_no) = CONFIG_SINGLE_CHAR_TYPE
				then call ioa_$rsnnl ("^a  ^a", out, (0), out,
					substr ("abcdefgh", fixed (config_card.data_field (field_no),35,0), 1));
				else ;
			     end;
			end;
		     if af_sw
		     then rs = rs || requote_string_ ((out)) || " ";
		     else call ioa_ ("^a", out);
		end;
	     else ;
	end;

	if af_sw
	then rs = rtrim (rs, " ");
	else call ioa_ ("^[^;No cards meet the match fields specified.^/^]", card_found);

	if have_pathname
	then if configp ^= null ()
	     then do;
		     call terminate_file_ (configp, 0, TERM_FILE_TERM, (0));
		     configp = null ();
		end;

	return;
%page;
match_config_card:
     proc returns (bit (1));

dcl	(m, f, k, l)	fixed bin;
dcl	fields		(14) char (8);
dcl	(part_match, match, exclude)
			bit (1);

	match = "0"b;

	do m = 1 to card_args by 1 while (^match);
	     match = cards (m) = config_card.word;
	end;

	if match | card_args = 0
	then if match_args + exclude_args > 0
	     then ;
	     else return ("1"b);
	else return ("0"b);

	fields (*) = "";

	do f = 1 to config_card.type_word.n_fields by 1;	/* canonicalize card */
	     if config_card.type_word.field_type (f) = CONFIG_STRING_TYPE
	     then fields (f) = addr (config_card.data_field (f)) -> config_card_field_in_ascii;
	     else if config_card.type_word.field_type (f) = CONFIG_SINGLE_CHAR_TYPE
	     then fields (f) = substr ("abcdefgh", fixed (config_card.data_field (f)), 1);
	     else call ioa_$rsnnl ("^d.", fields (f), (0), fixed (config_card.data_field (f)));
	end;

	match = match_args = 0;

	do m = 1 to match_args by 1 while (^match);

	     do k = 1 by 1 while (match_cards (m, k) ^= "");
		part_match = "0"b;
		if index (match_cards (m, k), "*") > 0
		then l = index (match_cards (m, k), "*") - 1;
		else l = 8;

		do f = 1 to config_card.type_word.n_fields by 1 while (^part_match);
		     part_match = substr (match_cards (m, k), 1, l) = substr (fields (f), 1, l);
		end;

		if part_match
		then ;
		else go to match_skip;

	     end;

	     match = "1"b;

match_skip:
	end;

	if exclude_args = 0 | ^match
	then return (match);
	else exclude = exclude_args = 0;

	do m = 1 to exclude_args by 1 while (^exclude);

	     do k = 1 by 1 while (exclude_cards (m, k) ^= "");
		part_match = "0"b;
		if index (exclude_cards (m, k), "*") > 0
		then l = index (exclude_cards (m, k), "*") - 1;
		else l = 8;

		do f = 1 to config_card.type_word.n_fields by 1 while (^part_match);
		     part_match = substr (exclude_cards (m, k), 1, l) = substr (fields (f), 1, l);
		end;

		if part_match
		then ;
		else go to exclude_skip;

	     end;

	     exclude = "1"b;

exclude_skip:
	end;

	return (^exclude);

     end match_config_card;

%page;
pick_up_match_exclude:
     proc (match_exclude_name, match_exclude_cards, match_exclude_args, arg_no, code);

dcl	match_exclude_name	char (*);
dcl	match_exclude_cards (*, *) char (8);
dcl	match_exclude_args	fixed bin;
dcl	arg_no		fixed bin;
dcl	code		fixed bin (35);
dcl	end_arg		bit (1);
dcl	(j, k)		fixed bin;

	match_exclude_args = match_exclude_args + 1;
	if match_exclude_args > hbound (match_exclude_cards, 1)
	then do;
		code = error_table_$too_many_args;
		call error_routine_ (code, cname, "^/Only ^d ^a arguments allowed.", hbound (match_exclude_cards, 1),
		     match_exclude_name);
		return;
	     end;
	else if arg_no >= nargs
	then do;
		code = error_table_$noarg;
		call error_routine_ (code, cname, "^/Field specifiers must follow ^a argument.", match_exclude_name);
		return;
	     end;
	else ;
	end_arg = "0"b;
	k = 0;
	do j = arg_no + 1 to nargs by 1 while (^end_arg);
	     k = k + 1;
	     call cu_$arg_ptr (j, argp, argl, code);
	     if code ^= 0
	     then do;
		     call error_routine_ (code, cname, "^/Error processing argument ^d; following ^a.", j,
			match_exclude_name);
		     return;
		end;
	     else arg_no = arg_no + 1;
	     if arg = "-match" | arg = "-exclude" | arg = "-ex"
	     then do;
		     end_arg = "1"b;
		     arg_no = arg_no - 1;
		     if k = 1			/* check if anything followed -match */
		     then do;
			     code = error_table_$noarg;
			     call error_routine_ (code, cname, "^/Field specifiers must follow ^a argument.",
				match_exclude_name);
			     return;
			end;
		     else ;
		end;
	     else if substr (arg, 1, 1) = "-"
	     then arg_no = arg_no - 1;		/* assume a control arg, skip */
	     else do;
		     if k > hbound (match_exclude_cards, 2)
		     then do;
			     code = error_table_$too_many_args;
			     call error_routine_ (code, cname, "^/Too many fields specified following ^a.",
				match_exclude_name);
			     return;
			end;
		     else if verify (arg, "01234567") = 0
		     then call ioa_$rsnnl ("^d.", match_exclude_cards (match_exclude_args, k), (0), cv_oct_ (arg));
		     else if char (arg, 1) ^= "*"
		     then match_exclude_cards (match_exclude_args, k) = arg;
		     else do;
			     code = error_table_$badcall;
			     call error_routine_ (code, cname, "^/Illegal field specifier ^a.", arg);
			     return;
			end;
		end;
	end;
     end pick_up_match_exclude;

     end print_configuration_deck;
