/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(81-10-01,Bongiovanni), approve(), audit(), install():
     Pre-hcom comments.
     Written October 1981 by J. Bongiovanni.
  2) change(87-01-14,Lippard), approve(87-02-09,MCR7616),
     audit(87-06-03,Farley), install(87-08-06,MR12.1-1064):
     Modified to use hcs_$set_procs_required.
  3) change(87-08-08,Lippard), approve(87-02-09,PBF7616),
     audit(87-08-11,Farley), install(87-08-18,MR12.1-1090):
     Modified to use hcs_$get_procs_required and
     phcs_$get_system_procs_required.
                                                   END HISTORY COMMENTS */


/* format: style3 */
set_proc_required:
sprq:
     proc;

/*     set_proc_required, list_proc_required

       Program to set and list either the set of CPUs on which this process may
       run, or the system default set of CPUs.
       
       Usage:
       
       set_proc_required {tag1} ... {tagN} {-control_args}
       
            If no CPU tags are specified, the current system default is used.
            
	  -priv sets the system default
       
       list_proc_required {-control_args}
       
            -priv lists the current system default
            
            May be invoked as an active function
*/

/* Automatic */

dcl	af_entry		bit (1);			/* ON => called as active function */
dcl	af_ret_maxl	fixed bin (21);		/* max length of active function return arg */
dcl	af_ret_ptr	ptr;			/* pointer to active function return arg */
dcl	arg_no		fixed bin;		/* current argument number */
dcl	argc		fixed bin (21);		/* character index into current arg */
dcl	argl		fixed bin (21);		/* current argument length */
dcl	argp		ptr;			/* current argument pointer */
dcl	code		fixed bin (35);		/* standard error code */
dcl	gate_entry	entry (bit (8) aligned, fixed bin (35)) variable;
						/* gate to call for set */
dcl	my_name		char (32);		/* name of this command */
dcl	n_args		fixed bin;		/* number of arguments */
dcl	new_cpu_string	bit (8) aligned;		/* bit string for set */
dcl	new_is_default	bit (1) aligned;		/* ON => process CPUs required is system default after set */
dcl	old_cpu_string	bit (8) aligned;		/* former (or current) bit string */
dcl	old_is_default	bit (1) aligned;		/* ON => process CPUs required is system default before set */
dcl	priv_sw		bit (1);			/* ON => -priv given */
dcl	set_entry		bit (1);			/* ON => set_proc_required */

/* Static */

dcl	CPU_TAGS		char (16) int static options (constant) init ("ABCDEFGHabcdefgh");

/* Based */

dcl	af_ret		char (af_ret_maxl) varying based (af_ret_ptr);
dcl	arg		char (argl) based (argp);

/* Entry */

dcl	check_gate_access_	entry (char (*), ptr, fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	cu_$af_return_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	hcs_$get_procs_required
			entry (bit (8) aligned, bit (1) aligned, fixed bin (35));
dcl	hcs_$set_procs_required
			entry (bit (8) aligned, fixed bin (35));
dcl	hphcs_$set_system_procs_required
			entry (bit (8) aligned, fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	phcs_$get_system_procs_required
			entry (bit (8) aligned);

/* External */

dcl	error_table_$active_function
			fixed bin (35) external;
dcl	error_table_$badopt fixed bin (35) external;
dcl	error_table_$noarg	fixed bin (35) external;

/* Builtin */

dcl	char		builtin;
dcl	codeptr		builtin;
dcl	index		builtin;
dcl	length		builtin;
dcl	mod		builtin;
dcl	substr		builtin;
dcl	verify		builtin;
%page;
	set_entry = "1"b;
	my_name = "set_proc_required";
	goto COMMON;

list_proc_required:
     entry;

	set_entry = "0"b;
	my_name = "list_proc_required";

COMMON:
	af_entry = "0"b;

	call cu_$af_return_arg (n_args, af_ret_ptr, af_ret_maxl, code);
						/* find out if we're an active function */
	if code = 0
	then /* active function */
	     if set_entry
	     then do;				/* not allowed for set_proc_required */
		     call com_err_ (error_table_$active_function, my_name);
		     return;
		end;
	     else af_entry = "1"b;

	new_cpu_string = "0"b;
	new_is_default = "0"b;
	old_is_default = "0"b;
	priv_sw = "0"b;

	do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if char (arg, 1) = "-"
	     then do;
		     if arg = "-priv"
		     then priv_sw = "1"b;
		     else do;
BAD_OPT:
			     call com_err_ (error_table_$badopt, my_name, arg);
			     return;
			end;
		end;
	     else do;				/* Probably CPU tag */
		     if ^set_entry
		     then goto BAD_OPT;		/* list_proc_required doesn't take CPU tag */
		     if verify (arg, CPU_TAGS) ^= 0
		     then do;
			     call com_err_ (0, my_name, "Invalid CPU Tag(s) ^a", arg);
			     return;
			end;
		     do argc = 1 to argl;
			substr (new_cpu_string, mod (index (CPU_TAGS, substr (arg, argc, 1)) - 1, 8) + 1, 1) = "1"b;
		     end;
		end;
	end;


	if set_entry & priv_sw & (new_cpu_string = "0"b)
	then do;					/* CPU tags must be supplied with -priv */
		call com_err_ (error_table_$noarg, my_name, "CPU tag(s)");
		return;
	     end;

	if priv_sw
	then do;
		call check_gate_access_ ("phcs_", codeptr (set_proc_required), code);
		if code ^= 0
		then do;
			call com_err_ (code, my_name, "phcs_");
			return;
		     end;

		if set_entry
		then do;
			call check_gate_access_ ("hphcs_", codeptr (set_proc_required), code);
			if code ^= 0
			then do;
				call com_err_ (code, my_name, "hphcs_");
				return;
			     end;
		     end;

		call phcs_$get_system_procs_required (old_cpu_string);
	     end;
	else do;
		call hcs_$get_procs_required (old_cpu_string, old_is_default, code);

		if code ^= 0
		then do;
			call com_err_ (code, my_name, "set_proc_required.acs");
			return;
		     end;
	     end;

	if set_entry
	then do;					/* set_proc_required */
		if priv_sw
		then gate_entry = hphcs_$set_system_procs_required;
		else gate_entry = hcs_$set_procs_required;

		call gate_entry (new_cpu_string, code);
		if code ^= 0
		then do;
			call com_err_ (code, my_name);
			return;
		     end;

		if priv_sw
		then call phcs_$get_system_procs_required (new_cpu_string);
		else do;
			call hcs_$get_procs_required (new_cpu_string, new_is_default, code);

			if code ^= 0
			then do;
				call com_err_ (code, my_name, "set_proc_required.acs");
				return;
			     end;
		     end;

		call ioa_ ("^a: ^[System ^;^]CPUs required changed from ^a^[ (default)^;^] to ^a^[ (default)^;^]",
		     my_name, priv_sw, cpu_tags (old_cpu_string), (old_is_default), cpu_tags (new_cpu_string),
		     (new_is_default));
	     end;
	else do;					/* list_proc_required */
		if af_entry
		then /* active function */
		     af_ret = cpu_tags (old_cpu_string);
		else call ioa_ ("^a: ^[System ^;^]CPUs Required: ^a^[ (default)^;^]", my_name, priv_sw,
			cpu_tags (old_cpu_string), (old_is_default));
	     end;

	return;
%page;
/*     Internal procedure to convert a bit string to a character string
       of CPU tags */

cpu_tags:
     proc (cpu_string) returns (char (*));

dcl	cpu_string	bit (8) aligned;		/* cpu string */

dcl	cpu_ix		fixed bin;
dcl	cpu_tag_string	char (8) varying;

	cpu_tag_string = "";
	do cpu_ix = 1 to length (cpu_string);
	     if substr (cpu_string, cpu_ix, 1)
	     then cpu_tag_string = cpu_tag_string || substr (CPU_TAGS, cpu_ix, 1);
	end;

	return (cpu_tag_string);


     end cpu_tags;
%page;
%include apte;

     end set_proc_required;
