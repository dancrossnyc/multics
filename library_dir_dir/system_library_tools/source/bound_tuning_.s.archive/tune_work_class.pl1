/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


tune_work_class: twc: proc;

/* Coded by RE Mullen Winter '76 */
/* Recoded  RE Mullen Autumn '76 */
/* Modified by M.Pierret 29 October '80 to accept -pin_weight */
/* Modified by J. Bongiovanni June 1981 for governed */
/* Modified by J. Bongiovanni May 1982 for int_queue */

dcl  linkage_error condition;

dcl 1 wctu aligned like work_class_tune_info;

dcl  onf bit (1) aligned;
dcl  f float bin;
dcl  d fixed bin;
dcl  i fixed bin;

dcl  me char (16) aligned internal static options (constant) init ("tune_work_class");

dcl  nargs fixed bin;
dcl  arg char (al) based (ap);
dcl  ap ptr;
dcl  al fixed bin;
dcl  ca char (16) aligned;				/* control arg copied here */

dcl  hphcs_$tune_work_class entry (ptr, fixed bin (35));
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_float_ entry (char (*), fixed bin (35)) returns (float bin);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl (com_err_, ioa_) entry options (variable);
dcl  error_table_$noarg ext static fixed bin (35);

dcl  code fixed bin (35);

dcl  (addr, substr, unspec) builtin;
		  


	unspec (wctu) = ""b;
	wctu.wc_number = -1;			/* If unchanged, user has blundered */
	wctu.version = WCTI_version_3;		/* tell hardcore our vintage */

	nargs = cu_$arg_count ();
	if nargs = 0 then do;			/* the hint convention */

	     call ioa_ ("Usage: tune_work_class -work_class NN param_1 value_1 ..");
	     call ioa_ ("   value in seconds: int_response int_quantum response quantum");
	     call ioa_ ("   value on/off: realtime post_purge io_priority int_queue");
	     call ioa_ ("   integer value: wc_max_eligible pin_weight");
	     call ioa_ ("   governed: off or percent");
	     return;
	end;

	do i = 1 by 2 while (i <= nargs);
						/* pick up parameter name */
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then do;
ERR:
		call com_err_ (code, me, " ");
		return;
	     end;

	     if al = 0 then go to BAD_PARM;
	     if substr (arg, 1, 1) = "-" then do;
		ca = substr (arg, 2, al-1);
	     end;
	     else ca = arg;


/* pick up parameter value */
	     call cu_$arg_ptr (i+1, ap, al, code);
	     if code ^= 0 then go to NOARG;

	     if ca = "wc" | ca = "work_class" then do;
		call fix;
		wctu.wc_number = d;
	     end;
	     else if ca = "ir" | ca = "int_response" then do;
		wctu.set.resp1 = "1"b;
		call flo;
		wctu.resp1 = 1e6 * f;
	     end;
	     else if ca = "r" | ca = "response" then do;
		wctu.set.resp2 = "1"b;
		call flo;
		wctu.resp2 = 1e6 * f;
	     end;
	     else if ca = "iq" | ca = "int_quantum" then do;
		wctu.set.quantum1 = "1"b;
		call flo;
		wctu.quantum1 = 1e6 * f;
	     end;
	     else if ca = "q" | ca = "quantum" then do;
		wctu.set.quantum2 = "1"b;
		call flo;
		wctu.quantum2 = 1e6 * f;
	     end;
	     else if ca = "post_purge" | ca = "pp" then do;
		wctu.set.purging = "1"b;
		call chr;
		wctu.flags.purging = onf;
	     end;
	     else if ca = "wc_maxe" | ca = "wc_max_eligible" then do;
		wctu.set.maxel = "1"b;
		call fix;
		wctu.maxel = d;
	     end;
	     else if ca = "realtime" | ca = "rt" | ca = "realt" then do;
		wctu.set.realtime = "1"b;
		call chr;
		wctu.flags.realtime = onf;
	     end;
	     else if ca = "pin_weight" | ca = "pw" then do;
		wctu.set.pin_weight = "1"b;
		call fix;
		wctu.pin_weight = d;
	     end;
	     else if ca = "io_priority" | ca = "iop" then do;
		wctu.set.io_priority = "1"b;
		call chr;
		wctu.flags.io_priority = onf;
               end;
	     else if ca = "governed" | ca = "gv" then do;
		wctu.set.governed = "1"b;
		if arg = "off" then
		     wctu.max_percent = 0;
		else do;
		     call fix;
		     if d <= 0 | d > 100 then
			goto BAD_PERCENT;
		     wctu.max_percent = d;
		end;
	     end;
	     else if ca = "int_queue" then do;
	          wctu.set.interactive_q = "1"b;
		call chr;
		wctu.flags.interactive_q = onf;
	     end;
	     else go to BAD_PARM;

	end;

	if wctu.wc_number = -1 then do;
	     ca = "work_class";
NOARG:	     call com_err_ (error_table_$noarg, me, "^a", ca);
	     return;
	end;


	on linkage_error begin;
	     call ioa_ ("tune_work_class: This command requires access to hphcs_.");
	     go to MAIN_RETURN;
	end;

	call hphcs_$tune_work_class (addr (wctu), code);
	if code ^= 0 then go to ERR;
MAIN_RETURN: return;				/* come here to bust out */

/* ----------------------------------------------------- */


flo:	proc;

	     f = cv_float_ (arg, code);
	     if code ^= 0 then go to BAD_NUM;
	end flo;



fix:	proc;
	     d = cv_dec_check_ (arg, code);
	     if code ^= 0 then go to BAD_NUM;
	end fix;



chr:	proc;

	     if arg = "on" then onf = "1"b;
	     else if arg = "off" then onf = "0"b;
	     else go to BAD_ONF;
	end chr;


BAD_ONF:	call com_err_ (0, me, "Value for ^a must be ""on"" or ""off""", ca);
	return;

BAD_NUM:	call com_err_ (0, me, "Value for ^a is non-numeric: ^a",
	     ca, arg);
	return;


BAD_PARM:	call com_err_ (0, me, "Unrecognized parameter: ^a", ca);
	return;

BAD_PERCENT:
	call com_err_ (0, me, "^a not percent between 1 and 100", arg);
	return;
	

/*  */
%include work_class_info;
     end tune_work_class;
