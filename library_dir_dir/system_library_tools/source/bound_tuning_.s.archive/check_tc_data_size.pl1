/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: ^inddcls,ind4,ifthenstmt,ifthendo,thendo,ifthen,tree,^case */

check_tc_data_size: proc;

        call cu_$arg_count (n_args, code);
        if code ^= 0 then go to REPORT_ERROR;

        do arg_no = 1 to n_args;

	  call cu_$arg_ptr (arg_no, argp, argl, code);
	  if code ^= 0 then go to REPORT_ERROR;

	  if expect_apt_value then do;
		expect_apt_value = "0"b;
		ctl_arg = "-apt";
		n_apt = cv_dec_check_ (arg, code);
		if code ^= 0 then go to REPORT_CV_ERROR;
		if n_apt < 1 then go to REPORT_VALUE_ERROR;
	      end;
	  else if expect_itt_value then do;
		     expect_itt_value = "0"b;
		     ctl_arg = "-itt";
		     n_itt = cv_dec_check_ (arg, code);
		     if code ^= 0 then go to REPORT_CV_ERROR;
		     if n_itt < 1 then go to REPORT_VALUE_ERROR;
		 end;
	       else if expect_pn_value then do;
			ctl_arg = "-pn";
			if index (arg, "-") = 1 & ^accept_hyphen_path then do;
			        if arg = "-name" | arg = "-nm" then accept_hyphen_path = "1"b;
			        else go to REPORT_VALUE_ERROR;
			    end;
			else do;
			        expect_pn_value = "0"b;
			        accept_hyphen_path = "0"b;
			        call expand_pathname_ (arg, config_dir_name, config_ename, code);
			        if code ^= 0 then do;
				      call com_err_ (code, my_name,
					"^/Pathname expansion for config deck: ^a", arg);
				      return;
				  end;

			        have_path = "1"b;
			    end;
		      end;

		  else do;
			if arg = "-apt" then expect_apt_value = "1"b;
			else if arg = "-itt" then expect_itt_value = "1"b;
			     else if arg = "-pathname" then expect_pn_value = "1"b;
				else if arg = "-pn" then expect_pn_value = "1"b;
				     else if index (arg, "-") = 1 then do;
					        code = error_table_$badopt;
					        go to REPORT_ARG_ERROR;
					    end;
					else do;
					        code = error_table_$bad_arg;
					        go to REPORT_ARG_ERROR;
					    end;
		      end;			/* ends ctl arg do */

        end;					/* ends arg do loop */

/* Check for a missing argument. */

        if expect_apt_value | expect_itt_value | expect_pn_value then do;
	      call com_err_ (error_table_$noarg, my_name, "^/after ^a", arg);
	      return;
	  end;

/* If either value is missing, find a config deck and get it. */

        if n_apt = 0 | n_itt = 0 then do;
	      configp = null ();
	      on cleanup call clean_up ();

	      if have_path then do;
		    call initiate_file_ (config_dir_name, config_ename, R_ACCESS, configp, bitcnt, code);
		    if code ^= 0 then do;
			  call com_err_ (code, my_name,
			      "^/Cannot access config deck with pathname, ^a", pathname_ (config_dir_name, config_ename));
			  return;
		        end;
		end;
	      else do;
		    configp = addr (config_deck$);
		    call hcs_$status_mins (configp, stype, bitcnt, code);
		    if code ^= 0 then do;
			  call com_err_ (code, my_name, "^/Cannot get bit count of config deck.");
			  return;
		        end;
		end;

	      config_n_cards = divide (divide (bitcnt, 36, 17, 0), size (config_card), 17, 0);
	      config_max_cards = 128;			/* a guess */

	      tcd_cardp = null ();
	      do card_no = 1 by 1 while (config_deck.cards (card_no).word ^= FREE_CARD_WORD & tcd_cardp = null ());
		cardp = addr (config_deck.cards (card_no));
		if config_card.word = TCD_CARD_WORD then tcd_cardp = cardp;
	      end;

	      if tcd_cardp = null () then do;
		    call com_err_ (0, my_name, "Unable to find TCD card in configuration deck.");
		    return;
		end;

	      if n_apt = 0 then n_apt = tcd_card.no_apt;
	      if n_itt = 0 then n_itt = tcd_card.no_itt;

	      call clean_up ();
	  end;

        n_tcm_words = size (tcm) - 1;
        n_apt_words = size (apte) * n_apt;
        n_itt_words = size (itt_entry) * n_itt;
        n_tc_data_words = n_tcm_words + n_apt_words + n_itt_words;
        n_pages = divide (n_tc_data_words, 1024, 35, 0);
        words_in_last_page = mod (n_tc_data_words, 1024);
        if words_in_last_page ^= 0 then n_pages = n_pages + 1;

        call ioa_ ("Size of tc_data metering (tcm) = ^d words^/Size of APT with ^d entries, ^d words each = ^d words^/Size of ITT with ^d entries, ^d words each = ^d words^/Size of tc_data = ^d words (^d pages^[ with ^d words in last page^])",
	  n_tcm_words,
	  n_apt, size (apte), n_apt_words,
	  n_itt, size (itt_entry), n_itt_words,
	  n_tc_data_words,
	  n_pages, (words_in_last_page ^= 0), words_in_last_page
	  );
        return;

REPORT_ERROR:
        call com_err_ (code, my_name);
        go to DISPLAY_USAGE;

REPORT_ARG_ERROR:
        call com_err_ (code, my_name, arg);

DISPLAY_USAGE:
        call ioa_ ("Usage:  ^a <-apt N_APTE | -itt N_ITTE | -pathname PATH>", my_name);
        return;

REPORT_CV_ERROR:
        call com_err_ (error_table_$bad_conversion, my_name,
	  "^/Character ^d caused conversion error in arg, ^a, to control argument ""^a"".",
	  code, arg, ctl_arg);
        return;

REPORT_VALUE_ERROR:
        call com_err_ (error_table_$bad_arg, my_name, "^a to control argument ^a.", arg, ctl_arg);
        return;

clean_up: proc;

        if have_path then if configp ^= null then do;
		 call terminate_file_ (configp, 0, TERM_FILE_TERM, (0));
		 configp = null;
	       end;
    end;

dcl     accept_hyphen_path	 bit (1) init ("0"b);
dcl     addr		 builtin;
dcl     arg		 char (argl) based (argp);
dcl     argl		 fixed bin (21);
dcl     argp		 pointer;
dcl     arg_no		 fixed bin;
dcl     bitcnt		 fixed bin (24);
dcl     card_no		 fixed bin;
dcl     cleanup		 condition;
dcl     code		 fixed bin (35);
dcl     com_err_		 entry () options (variable);
dcl     config_$find	 entry (char (4) aligned, ptr);
dcl     config_dir_name	 char (168);
dcl     config_ename	 char (32);
dcl     ctl_arg		 char (32);
dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl     divide		 builtin;
dcl     error_table_$active_function fixed bin (35) ext static;
dcl     error_table_$bad_arg	 fixed bin (35) ext static;
dcl     error_table_$bad_conversion fixed bin (35) ext static;
dcl     error_table_$badopt	 fixed bin (35) ext static;
dcl     error_table_$noarg	 fixed bin (35) ext static;
dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
dcl     expect_apt_value	 bit (1) init ("0"b);
dcl     expect_itt_value	 bit (1) init ("0"b);
dcl     expect_pn_value	 bit (1) init ("0"b);
dcl     have_path		 bit (1) init ("0"b);
dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl     index		 builtin;
dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl     ioa_		 entry () options (variable);
dcl     mod		 builtin;
dcl     my_name		 char (18) init ("check_size_tc_data") int static options (constant);
dcl     n_apt		 fixed bin (35) init (0);
dcl     n_args		 fixed bin;
dcl     n_itt		 fixed bin (35) init (0);
dcl     n_apt_words		 fixed bin (35);
dcl     n_itt_words		 fixed bin (35);
dcl     n_pages		 fixed bin (35);
dcl     n_tc_data_words	 fixed bin (35);
dcl     n_tcm_words		 fixed bin (35);
dcl     null		 builtin;
dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
dcl     size		 builtin;
dcl     stype		 fixed bin (2);
dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl     words_in_last_page	 fixed bin;
%page;
%include access_mode_values;
%page;
%include apte;
%page;
%include config_deck;
%page;
%include config_tcd_card;
%skip (4);
%include itt_entry;
%page;
%include tcm;
%page;
%include hc_lock;
%page;
%include terminate_file;
    end check_tc_data_size;
