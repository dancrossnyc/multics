/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2 */
load_doc_db_ent:
     proc;

/*
DESCRIPTION:

   This command takes the AN50 master index listin file and stores it into the
   online_doc database.  It strips entry names and topics from AN50 master 
   index and stores them as entry_name attributes in the entry_name_rel
   relation in online_doc.db.
*/

/* 
HISTORY:
Originally written by Jim Paradise, autumn 1980.
Modified:
81-02-21 by M. Pierret: added cu_ calls, reformatted.
81-06-05 by M. Pierret: parse =name field to extract entry names,
            exclude parenthetical comments.
83-03-29 by M. Pierret: Changed to use structure database.
83-04-12 by M. Pierret: Added the -entry_name/-topic control args. They are 
            used to specify whether entry names or topics are to be extracted
            from the input file. There are no short forms. This change was
            necessitated by a change in the format of the master index listin.
83-09-28 by M. Pierret: Made strip_blanks and index_end inline subroutines
            instead of including char_utils.incl.pl1.
85-02-08 by Steve Herbst: Fixed uninitialized -topic/-entry_name default and
	  added cleanup handler, improved error messages.
*/

/* DESCRIPTION of PARAMETERS:

mrds_db_path - is the pathname to the online_doc.db database
input_file   - is the pathname of the AN50 master index lister file.
	     This program assumes the file is in the following format:

{ ... }
{ ... }	first 3 lines are ignored
{ ... }
~ =manual _____ =nb AANN =rev _____ =name entry_value
~ =manual _____ =nb AANN =rev _____ =name entry_value
	.
	.
	.

-or-
~ =manual _____ =nb AANN =rev _____ =topic topic_value
~ =manual _____ =nb AANN =rev _____ =topic topic_value
  .
  .
  .

   The =rev field may or may not be present. entry_value may be of
   the forms:
          entry_name
          entry_name (comment -not to be stored)
	entry_name {short_name}
	entry_name {short_name} (comment - not to be stored)
   topic_value may be one of:
          topic
	topic of multiple words
	topic of multiple words (comment - to be stored)

   Everything that is stored is first converted to lower-case
   to provide a canonical version for searching.
*/

/*
ERRORS:

   Any of the errors possible from trying to read a listing segment via vfile_
   unstructured read.
   Any of the errors possible from trying to store data into a MRDS database.

------------------------------------------------------------

NOTES:

   This command should use cu_$ entries.
   This command should use the xxx{.listin} convention.

------------------------------------------------------------ */
%page;
/* Constants */

dcl ME char (32) int static options (constant) init ("load_doc_db_ent");
dcl (NORMAL_EXIT init (1), ON_CLEANUP init (2)) fixed bin int static options (constant);
dcl LOWER_CASE_ALPHA char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
dcl UPPER_CASE_ALPHA char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl NL char (1) int static options (constant) init ("
");

/* Based */

dcl arg char (arg_len) based (arg_ptr);

/* Automatic */

	dcl     order_number	 char (32) varying;
	dcl     last_error_order_number
				 char (32) varying;
	dcl     manual_number	 fixed bin;
	dcl     name_field		 char (64) varying;
	dcl     entry_name		 char (64) varying;
	dcl     topic_or_entry_name_field_indicator
				 char (8) varying;

	dcl     line		 char (1024) var;
	dcl     begin_char		 char (1) var;
	dcl     end_char		 char (1);
	dcl     next_char		 char (1);
	dcl     tuple_name		 char (30);
	dcl     mrds_db_path	 char (168);
	dcl     input_file		 char (168);
	dcl     arg_len		 fixed bin (21);
	dcl     return_arg_len	 fixed bin (21);
	dcl     dbi		 fixed bin (35);
	dcl     nargs		 fixed bin;
	dcl     pos_after_nb	 fixed;
	dcl     pos_after_name	 fixed;
	dcl     end_of_nb_field	 fixed;
	dcl     dummy_idx		 fixed bin;
	dcl     num_lines_read	 fixed;
	dcl     code		 fixed (35);

	dcl     arg_ptr		 ptr;
	dcl     iocb_ptr		 ptr;
	dcl     return_arg_ptr	 ptr;

	dcl     exitting_sw		 bit (1) init ("0"b);
	dcl     more_names_are_present bit (1);
	dcl     open		 bit (1) init ("0"b);
	dcl     is_active_function	 bit (1) aligned;

/* External */

dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$not_act_fnc fixed bin (35) ext;
dcl iox_$error_output ptr ext;
dcl mdbm_error_$dup_store fixed bin (35) ext;

/* Entries */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     absolute_pathname_$add_suffix
				 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     com_err_$suppress_name entry options (variable);
	dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     iox_$attach_ioname	 entry (char (*), ptr, char (*), ptr, fixed (35));
	dcl     iox_$open		 entry (ptr, fixed, bit (1) aligned, fixed (35));
	dcl     iox_$get_line	 entry (ptr, ptr, fixed (21), fixed (21), fixed (35));
	dcl     iox_$close		 entry (ptr, fixed (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed (35));
	dcl     dsl_$open		 entry options (variable);
	dcl     dsl_$store		 entry options (variable);
	dcl     dsl_$close		 entry options (variable);
	dcl     dsl_$retrieve	 entry options (variable);

/* Builtins */

dcl (addr, after, before, index, length, ltrim, null, rtrim, substr, translate, verify) builtin;

/* Conditions */

dcl cleanup condition;
%page;
/* Get the two arguments to this command: mrds_db_path and input_file.
   Return if the arguments are not found or if they refer to objects that
   do not exist. */

	call cu_$af_return_arg (nargs, return_arg_ptr, return_arg_len, code);
	if code = 0
	then is_active_function = "1"b;
	else if code = error_table_$not_act_fnc
	then is_active_function = "0"b;
	else do;
		call com_err_ (code, ME);
		return;
	     end;

	if (nargs ^= 2 & nargs ^= 3) | is_active_function
	then do;
		call com_err_$suppress_name
		     (0, ME, "Usage: ^a database_path input_file {-topic | -entry_name}", ME);
		return;
	     end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	call absolute_pathname_$add_suffix (arg, "db", mrds_db_path, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", arg);
		return;
	     end;

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	call absolute_pathname_$add_suffix (arg, "listin", input_file, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", arg);
		return;
	     end;

	if nargs = 3
	then do;
		call cu_$arg_ptr (3, arg_ptr, arg_len, code);
		if arg = "-topic"
		then topic_or_entry_name_field_indicator = " =topic";
		else if arg = "-entry_name"
		then topic_or_entry_name_field_indicator = " =name";
		else do;
			call com_err_ (error_table_$badopt, ME,
			     "Usage: ^a <database path> <input file> {-topic|-entry_name}", ME);
			return;
		     end;
	     end;
	else topic_or_entry_name_field_indicator = " =name";

	manual_number = 0;
	last_error_order_number = "";

/* Establish cleanup handler */

	dbi = -1;
	iocb_ptr = null;

	on cleanup call clean_up (ON_CLEANUP);

/* Open the MRDS database */

	call dsl_$open (mrds_db_path, dbi, 4, code);
	call check_code ("Calling dsl_$open on " || mrds_db_path);

/* Skip the first three lines */

	do dummy_idx = 1 to 3;
	     call read_line;
	end;

/* Loop through the records, storing */

	do while ("1"b);

	     call read_line_to_eof;

	     pos_after_nb = index_end (line, "=nb ");
	     if pos_after_nb <= 0
	     then call syntax_error ("Missing ""=nb""");
	     end_of_nb_field = index (line, " =rev");
	     if end_of_nb_field <= 0
	     then do;
		     end_of_nb_field = index (line, topic_or_entry_name_field_indicator);
		     if end_of_nb_field <= 0
		     then call syntax_error ("Missing ""=name"" or ""=topic""");
		end;
	     order_number = rtrim (substr (line, pos_after_nb, end_of_nb_field - pos_after_nb));
	     call strip_blanks (order_number);
	     if length (order_number) ^= 4
	     then call syntax_error ("Order number must be 4 characters long.");
	     call dsl_$retrieve (dbi, "-range (x full_name_rel) -select x.manual_number -where x.order_number = .V.",
		order_number, manual_number, code);
	     if code ^= 0
	     then do;
		     if order_number ^= last_error_order_number then
			call com_err_ (code, ME, "^/Order number ^a not found in MRDS database.", order_number);
		     last_error_order_number = order_number;
		     go to END_LOOP;
		end;
	     pos_after_name = index_end (line, topic_or_entry_name_field_indicator || " ");
	     if pos_after_name <= 0
	     then call syntax_error ("Wrong delimiter after ""=name"" or ""=topic""");
	     name_field = substr (line, pos_after_name);
	     call strip_blanks (name_field);
	     if name_field = " "
	     then call syntax_error ("Blank ""=name"" or ""=topic"" value.");

/* Canonicalize name to lower-case and single blanks */

	     do while (index (name_field, "  ") ^= 0);	/* search for two consecutive blanks*/
		name_field = before (name_field, "  ") || " " || after (name_field, "  ");
	     end;
	     name_field = translate (name_field, LOWER_CASE_ALPHA, UPPER_CASE_ALPHA);

/* name_field's which have "{"s in them contain multiple names, and each
   must be extracted. Those that have no " "s are single names and should
   be stored as is. Those that have a "(" following the first " " are
   single entry or subsystem names with parenthetical comments; the single 
   name should be stored.  In all of these cases the parenthetical comments
   should be discarded.
      If none of these conditions is present, one can assume that the 
   name_field contains a section title, and parenthetical comments
   should be retained. 
      Ex:
         print (LINUS request)  => print
         print {pr} (read_mail) => print
			  => pr
         print		  => print
         Interrupted I/O (BOS)  => Interrupted I/O (BOS)
*/

	     if index (name_field, " ") = 0
	     then end_char = NL;			/* case: single entry name */
	     else do;
		     next_char = substr (after (name_field, " "), 1, 1);
		     if next_char = "{" | /* case: entry name followed by short name(s) */ next_char = "("
						/* case: entry name followed by  parenthetical comment */
		     then end_char = " ";
		     else end_char = NL;		/* case: multiple word topic */
		end;

	     begin_char = "";
	     tuple_name = "entry_name_rel";
	     more_names_are_present = "1"b;

	     do while (more_names_are_present);

		entry_name = before (name_field, end_char);
		entry_name = after (entry_name, begin_char);
		call strip_blanks (entry_name);
		name_field = after (name_field, end_char);
		call strip_blanks (name_field);
		begin_char = "{";
		end_char = "}";
		if index (name_field, begin_char) = 0
		then more_names_are_present = "0"b;

		call dsl_$store (dbi, tuple_name, entry_name, manual_number, code);
		if code ^= 0
		then if code ^= mdbm_error_$dup_store
		     then call com_err_ (code, ME, "^/(^d) ^a", num_lines_read, line);
	     end;

END_LOOP:
	end;
RETURN:
	call clean_up (NORMAL_EXIT);

	return;
%page;
clean_up: proc (P_when);

dcl P_when fixed bin;

	exitting_sw = "1"b;
	if dbi ^= -1 then do;
	     call dsl_$close (dbi, code);
	     if P_when = NORMAL_EXIT then call check_code ("dsl_$close");
	end;
	call iox_$close (iocb_ptr, code);
	if P_when = NORMAL_EXIT then call check_code ("iox_$close");
	call iox_$detach_iocb (iocb_ptr, code);
	if P_when = NORMAL_EXIT then call check_code ("iox_$detach_iocb");

end clean_up;
%page;
syntax_error: proc (P_str);

dcl P_str char (*);

	call ioa_$ioa_switch (iox_$error_output,
	     "*** Syntax error on line ^d:  ^a^/Text of line:  ^a", num_lines_read, P_str, line);
	goto END_LOOP;

end syntax_error;
%page;
/* SUPPORT SUBROUTINES */


strip_blanks:
     proc (string);

	dcl     string		 char (*) var;
	dcl     temp_string		 char (1024) varying;
	dcl     first_char_pos	 fixed bin;

	first_char_pos = verify (string, " 	");	/* space, tab */
	if first_char_pos > 0
	then temp_string = substr (string, first_char_pos);
	else temp_string = string;

	if temp_string = ""
	then string = " ";
	else string = rtrim (temp_string);

	return;
     end;


index_end:
     proc (string, search) returns (fixed);

	dcl     string		 char (*) varying;
	dcl     search		 char (*) varying;
	dcl     last_char_pos	 fixed bin;
	dcl     first_char_pos	 fixed bin;

	first_char_pos = index (string, search);
	if first_char_pos ^= 0
	then last_char_pos = first_char_pos + length (search);
	else last_char_pos = first_char_pos;

	return (last_char_pos);
     end index_end;



check_code:
     proc (str);
	dcl     str		 char (*);
	if code = 0
	then return;
	call com_err_ (code, ME, str);
	return;
     end check_code;
%page;
/* get line from input file */


read_line:
     proc;
	dcl     buff_ptr		 ptr;
	dcl     num_chars		 fixed (21);
	dcl     buffer		 char (10000);
	dcl     expect_eof		 bit (1);
	expect_eof = "0"b;
start:
	buff_ptr = addr (buffer);
	if ^open
	then do;
		call iox_$attach_ioname ("f", iocb_ptr, "vfile_ " || input_file, null, code);
		call check_code ("iox_$attach_ioname");
		call iox_$open (iocb_ptr, 1, "0"b, code);
		call check_code ("iox_$open");
		num_lines_read = 0;
		open = "1"b;
	     end;
	call iox_$get_line (iocb_ptr, buff_ptr, length (buffer), num_chars, code);
	if code ^= 0
	then goto error1;
	if num_chars > 10000
	then goto error1;
	num_lines_read = num_lines_read + 1;
	line = substr (buffer, 1, num_chars);
	if substr (line, length (line)) = NL
	then line = substr (line, 1, length (line) - 1);

	return;
error1:
	if ^expect_eof
	then call com_err_ (code, ME, " ^d ^d ^a", num_lines_read, num_chars, substr (buffer, 1, num_chars));
	go to RETURN;

read_line_to_eof:
     entry;
	expect_eof = "1"b;
	goto start;

end read_line;


end load_doc_db_ent;
