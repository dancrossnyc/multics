/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


iodd_misc_cmds: proc;

	return;					/* illegal entry point */

/* This is a procedure to collect several external commands for the driver's use */

/* written by J. C. Whitmore 9/78 */


dcl  normal fixed bin int static options (constant) init (1);
dcl  slave fixed bin int static options (constant) init (2);

dcl  iod_val_segp ptr int static init (null);
dcl  last_sender char (64) int static init ("");

dcl  ap ptr;
dcl  al fixed bin;
dcl  bchr char (al) unal based (ap);

dcl  answer char (168) varying;
dcl  bvcs char (al) varying based (ap);
dcl  count fixed bin;
dcl  ec fixed bin (35);
dcl  idx fixed bin;
dcl  not_af bit (1) init ("1"b);			/* default assumption is not an active function */
dcl  string char (168) aligned;
dcl  msg_pfx char (80);
dcl (first, last) fixed bin;

dcl (null, substr, length, rtrim) builtin;

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  iodd_msg_ entry options (variable);

dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  error_table_$not_act_fnc fixed bin (35) ext;

dcl 1 valueseg based (iod_val_segp) aligned,
    2 laste fixed bin,
    2 freep fixed bin,
    2 pad (6) fixed bin,
    2 arry (1000),
      3 name char (32),
      3 valu char (168),
      3 lth fixed bin,
      3 chain fixed bin;


/* === Entry for drivers to get messages via send_message === */

/* Usage:  accept_messages -pn <mailbox_path> -bf -call iod_driver_message			*/

iod_driver_message: entry (a_number, a_sender, a_time, a_message, a_mbx_seg);

dcl (a_number, a_sender, a_time, a_message, a_mbx_seg) char (*);


	if a_sender = last_sender then msg_pfx = "=";	/* same as last sender, be brief */
	else do;

/*	the sender is formatted like this:    Person.Project (sent from) at <aim_level>		*/
/*	we are most concerned with "sent from" since Person and Project of all drivers is usually equal. */

	     first = index (a_sender, "(");		/* look for start of "(sent from)" field */
	     if first = 0 then do;			/* not there, use the whole thing */
		first = 1;
		last = length (rtrim (a_sender));
	     end;
	     else do;				/* sent from is defined */
		first = first + 1;			/* want the char after the "(" */
		last = index (a_sender, ")");		/* look for the close */
		if last = 0 then last = length (rtrim (a_sender)); /* missing, take all */
		else last = last - 1;
	     end;

	     msg_pfx = "From " || substr (a_sender, first, last - first + 1); /* this is the first part */
	end;

	idx = length (rtrim (msg_pfx));		/* how much was defined */

	msg_pfx = substr (msg_pfx, 1, idx) || " (" || substr (a_time, 11, 6) || ")"; /* the last part */

	call iodd_msg_ (normal, slave, 0, msg_pfx, a_message);

	last_sender = a_sender;			/* save last sender's identity */

	return;

/* === Entry to return per process values from an active function == */

/* Usage:  [iod_val keyword]								*/
/* returns the value associated with the keyword which was last set by the set_iod_val entry.	*/
/* If no value has been set, the string "undefined!" is returned.				*/

iod_val:	entry;

	not_af = "0"b;				/* assume we were called as an active function */

	call cu_$af_arg_count (count, ec);
	if ec ^= 0 then
	     if ec = error_table_$not_act_fnc then do;
		not_af = "1"b;			/* not an active function */
		call cu_$arg_count (count);
	     end;
	     else go to error;

	if count ^= 1 then do;
	     ec = error_table_$wrong_no_of_args;
	     go to error;
	end;

	if iod_val_segp = null then do;
	     call get_temp_segment_ ("iod_val", iod_val_segp, ec);
	     if ec ^= 0 | iod_val_segp = null then do;
error:		if not_af then call com_err_ (ec, "iod_val");
		else call active_fnc_err_ (ec, "iod_val");
		return;
	     end;
	end;

	if not_af then call cu_$arg_ptr (1, ap, al, ec);
	else call cu_$af_arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to error;

	do idx = 1 to laste;
	     if chain (idx) = 0 then if name (idx) ^= "" then
		     if bchr = name (idx) then do;
			answer = substr (valu (idx), 1, lth (idx));
			go to give;
		     end;
	end;
	answer = "undefined!";
give:	if not_af then call ioa_ (answer);
	else do;
	     call cu_$af_return_arg (1, ap, al, ec);
	     if ec ^= 0 then go to error;
	     bvcs = answer;
	end;
	return;


/* === Entry to define keywords and set values for them (returned by iod_val entry) === */

/* Usage:  set_iod_val  keyword {new_value}			*/
/*   if new value is missing, keyword is "undefined!"		*/

set_iod_val: entry;

	if iod_val_segp = null then do;
	     call get_temp_segment_ ("iod_val", iod_val_segp, ec);
	     if ec ^= 0 | iod_val_segp = null then go to error;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to error;
	string = bchr;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then do;
	     do idx = 1 to laste;
		if string = name (idx) then do;
		     chain (idx) = freep;
		     freep = idx;
		     name (idx) = "";
		end;
	     end;
	     return;
	end;

	do idx = 1 to laste;
	     if chain (idx) = 0 then if name (idx) ^= "" then
		     if name (idx) = string then do;
			go to f1;
		     end;
	end;
	if freep = 0 then idx, laste = laste + 1;
	else do;
	     idx = freep;
	     freep = chain (idx);
	end;
	name (idx) = string;
f1:	valu (idx) = bchr;
	chain (idx) = 0;
	lth (idx) = al;

	return;

     end iodd_misc_cmds;
