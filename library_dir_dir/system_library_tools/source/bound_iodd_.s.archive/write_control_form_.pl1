/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

write_control_form_: proc (a_type, a_stream, a_ordatap, a_code);

/* This is the program which acts as a transfer vector for printing control
   forms of different formats based on the a_type argument.  The a_stream is
   passed on to the actual program which knows the format to be used.

   The "write_sample_form_" entry generates a dummy set of data to pass on
   to the form writing program to check alignment.	*/

/* Originally coded in March 1975 by J. C. Whitmore */
/* Modified in Dec 1975 by J. C. Whitmore for new ordata structure info */
/* Modified in April 1976 by J. C. Whitmore to correct the declaration of iodd_ to named ext static */
/* Modified in August 1977 by J. C. Whitmore to special case the form names "head_sheet" and "tail_sheet" */
/* Modified in March 1978 by J. C. Whitmore for new dprint_msg format and new ordata info */
/* Modified by J. C. Whitmore, 8/78, for new output_request_data info */
/* Modified by J. C. Whitmore, 8/79, to add write_sample_prt_banner_ entry */
/* Modified by R. McDonald May 1980 to include page charges for printing. (UNCA) */
/* Modified by E. N. Kittlitz June 1981 for UNCA page charges */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Updated dprint_msg to version 4.
  2) change(88-02-18,Brunelle), approve(88-09-16,MCR7911),
     audit(88-10-20,Wallman), install(88-10-28,MR12.2-1199):
     Added $init entrypoint to take ptr to iodd_static so we can use the
     head/tail sheet entry variables store there.  Change code to use entry
     variables in iodd_static if available.
  3) change(88-08-30,Farley), approve(88-09-16,MCR7911),
     audit(88-10-20,Wallman), install(88-10-28,MR12.2-1199):
     Updated to use version 5 dprint_msg.
                                                   END HISTORY COMMENTS */


/* External Procedures & Variables */

dcl  cu_$ptr_call entry options (variable);
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iodd_$ ext static;				/* so we can find the ref dir of make seg */
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));

/* Parameters */

dcl  a_code fixed bin (35) parameter;			/* error code */
dcl  a_iocbp ptr parameter;				/* user-supplied iocb to output on */
dcl  a_ordatap ptr parameter;				/* user-supplied output request data to use */
dcl  a_prt_ctl_ptr ptr parameter;			/* user-supplied printer control info ptr */
dcl  a_static_ptr ptr parameter;			/* ptr to iodd_static */
dcl  a_stream char (*) parameter;			/* user-supplied stream to output on */
dcl  a_type char (*) parameter;			/* user-supplied type of control form to output */

/* Automatic */

dcl  copies_left fixed bin;				/* number of copies computed for control form output */
dcl  dest char (36);				/* for output */
dcl  head char (64);				/* for output */
dcl  iocbp ptr;					/* iocb ptr to output on. */
						/* if user passed stream name, we will locate the ptr */
dcl  iodd_static_ptr ptr int static init (null ());	/* ptr to drivers iodd_static */
dcl  l fixed bin;
dcl  last_type char (32) int static init ("");
dcl  len fixed bin;
dcl  oprmsg char (256);
dcl  prt_ctl_ptr ptr;				/* prt_ctl ptr to use */
						/* if user didn't pass one, define as null */
dcl  proc_name char (32);
dcl  proc_ptr ptr int static init (null);
dcl  searched bit (1);

dcl  1 request aligned int static like ordata;		/* the rest of the daemon info */
%page;

/* write_control_form_: proc (a_type, a_stream, a_ordatap, a_code);	Main entry	*/

	ordatap = a_ordatap;			/* copy the input data pointer */
	prt_ctl_ptr = null;

/* locate the iocb for the given stream */
	call iox_$look_iocb (a_stream, iocbp, a_code);
	if a_code ^= 0 then
	     return;

common_write: a_code = 0;				/* this is common to both entries */

	if a_type = "undefined" then do;		/* so we can bypass, if desired */
	     a_code = error_table_$action_not_performed;
	     return;
	end;
	if a_type = "std_ctl_msg" then do;		/* this is the default for the normal ctl term */
	     if ordata.separator then do;		/* one message per separator bar */
		copies_left = ordata.copies - ordata.copy_no + 1; /* number we will print */
		dmp = ordata.dpmp;			/* get the pointer to the dprint message */
		head = dprint_msg.heading;
		if substr (head, 1, 5) = " for " then	/* see if dprint added something */
		     head = substr (head, 6);		/* if so get rid of it */
		if head ^= "" then call ioa_$rsnnl ("(for ""^a"" ", oprmsg, l, head);
		else do;
		     l = 1;			/* no heading, get ready for a dest msg */
		     oprmsg = "(";
		end;
		dest = dprint_msg.destination;
		if dest ^= "" then call ioa_$rsnnl ("^vaat ""^a"")", oprmsg, l, (l), substr (oprmsg, 1, l), dest);
		else if l = 1 then oprmsg = "";	/* no head or dest case */
		else substr (oprmsg, l, 1) = ")";	/* heading only case */

		call ioa_$rsnnl ("Request ^d ^a q^d: ^a^/^2x^[(^d copies) ^;^s^]^[priority ^d ^;^s^]from ^a ^a",
		     oprmsg, l, ordata.request_no, ordata.request_type, ordata.queue, ordata.full_path,
		     (copies_left > 1), copies_left, ordata.priority_request, ordata.charge_queue,
		     ordata.requestor, (oprmsg));

		call ioa_$ioa_stream (a_stream, "^a", oprmsg);
	     end;
	     return;
	end;
	if a_type = "head_sheet" then do;
	     call iodd_static_ptr -> iodd_static.print_head_sheet (iocbp, prt_ctl_ptr, ordatap, a_code);
	     return;
	end;
	if a_type = "tail_sheet" then do;
	     call iodd_static_ptr -> iodd_static.print_tail_sheet (iocbp, prt_ctl_ptr, ordatap, a_code);
	     return;
	end;
	if a_type = "separator" then do;
	     call iodd_static_ptr -> iodd_static.print_head_separator (iocbp, prt_ctl_ptr, "separator", a_code);
	     return;
	end;

/*	otherwise we will have to search for the module to call....must be in search path */

	searched = "0"b;				/* havn't searched for the proc name */
	if last_type ^= a_type then do;		/* try for some efficiency */

find:	     call ioa_$rsnnl ("write_^a_", proc_name, len, a_type); /* format to "write_type_" as module name */

	     call hcs_$make_ptr (addr (iodd_$), proc_name, proc_name, proc_ptr, a_code);
	     if a_code ^= 0 then do;			/* this is bad */
		last_type = "";			/* have to set the ptr after re-compile */
		return;
	     end;
	     last_type = a_type;			/* so we don't do this too often */
	     searched = "1"b;			/* we have tried searching */

	end;

	call cu_$ptr_call (proc_ptr, a_stream, ordatap, a_code);
	if a_code ^= 0 then if ^searched then go to find; /* possibly an error on the old pointer */

	return;					/* let the caller handle the error if any */




write_sample_prt_banner_: entry (a_type, a_iocbp, a_prt_ctl_ptr, a_code);

/* this entry is used to print sample head_sheets and tail_sheets */

	if a_type ^= "head_sheet" & a_type ^= "tail_sheet" then do;
not_done:	     a_code = error_table_$action_not_performed;
	     return;
	end;

	iocbp = a_iocbp;
	if iocbp = null then go to not_done;
	prt_ctl_ptr = a_prt_ctl_ptr;

	go to sample_common;


write_sample_form_: entry (a_type, a_stream, a_code);

dcl  init bit (1) int static init ("0"b);		/* initialization flag to avoid extra work */
dcl  (addr, string, null, substr) builtin;
dcl  clock_ entry () returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  alloc_dmp ptr int static init (null);

/* locate the iocb for the given stream */
	call iox_$look_iocb (a_stream, iocbp, a_code);
	if a_code ^= 0 then
	     return;
	prt_ctl_ptr = null;

sample_common:

	ordatap = addr (request);			/* we want the dummy data */
	if alloc_dmp = null then			/* need a copy of dprint_msg too */
	     allocate dprint_msg set (alloc_dmp);

	if ^init then do;				/* first time we set these values */

	     request.dpmp = alloc_dmp;		/* ptr to dummy message */
	     request.requestor = "Username.Project.x";
	     request.full_path = ">user_dir_dir>Project_name>Username>segment_name";
	     request.queue = 3;
	     request.charge_queue = 1;		/* charge at rate for queue 1 */
	     request.copies = 4;
	     request.copy_no = 1;
	     request.request_no = 999999;		/* highest possible request for a driver */
	     request.restart_no = 888888;		/* previous number which was restarted */
	     request.request_type = "request_type_name";	/* Hope this is general enough */
	     request.access_class_string = "-AIM--Field-, Category 2, Category 4";
	     request.punsw = 0;
	     request.delete = 1;
	     request.device_name = "device_name";
	     request.output_mode = "single,noskip,non_edited,ll132,pl60,in10.";
	     request.line_count = 4600;
	     request.page_count = 78;
	     request.cpu_time = 1000000;		/* 1 million microseconds */
	     request.real_time = 20000000;		/* 20 million microseconds */
	     request.page_waits = 3687;
	     request.pre_pages = 2017;
	     request.bit_count = 224745;
	     request.charge = 9.20;			/* $9.20 should be large enough */
	     request.price_per_n_lines = 2.00;		/* try for $2.00 per 1000 lines */
	     request.n_lines_for_price = 1000;		/* this is the per 1000 part */
	     request.price_per_n_pages = 8.00;		/* try for $8.00 per 1000 pages */
	     request.n_pages_for_price = 1000;		/* this is the per 1000 part */
	     request.total_charge = 9.20;
	     request.notify = "1"b;
	     request.continued = "0"b;
	     request.restarted = "1"b;		/* this will show a restarted request - if needed */
	     request.separator = "1"b;		/* indicates a message should be printed */
	     request.saved = "1"b;			/* say we suspended request */
	     request.priority_request = "1"b;		/* this one was high priority */
	     request.contd_no = 0;			/* not a continued request */


/* now for the actual dprint message */


	     dmp = alloc_dmp;			/* copy the ptr for auto based reference */

	     dprint_msg.msg_time = clock_ ();		/* just a legal value */
	     dprint_msg.dirname = ">user_dir_dir>Project_name>Username";
	     dprint_msg.ename = "segment_name";
	     dprint_msg.hdr_version = queue_msg_hdr_version_1;
	     dprint_msg.state = 0;
	     dprint_msg.orig_queue = 3;
	     string (dprint_msg.bit_flags) = ""b;
	     dprint_msg.version = dprint_msg_version_5;
	     dprint_msg.message_type = 1;		/* we are assuming a print request */
	     dprint_msg.copies = 4;
	     dprint_msg.delete_sw = "1"b;
	     dprint_msg.notify = "1"b;
	     dprint_msg.heading_lth = head_max_lth;
	     dprint_msg.top_label_lth = label_max_lth;
	     dprint_msg.bottom_label_lth = label_max_lth;
	     dprint_msg.chan_stop_path_lth = 0;
	     dprint_msg.heading = "-HEAD-BANNER-WITH-NO-BLANKS-WHICH-CAN-GO-ON-FOR-64-CHARS-------*";
	     dprint_msg.output_module = 1;
	     string (dprint_msg.control) = (36)"1"b;
	     dprint_msg.destination = "SAMPLE---DESTINATION";
	     dprint_msg.forms = "";
	     dprint_msg.forms_name_lth = 0;
	     dprint_msg.lmargin = 10;
	     dprint_msg.line_lth = 132;
	     dprint_msg.page_lth = 60;
	     dprint_msg.top_label = (3)"This will appear at the top and bottom of each page.          ";
	     dprint_msg.bottom_label = dprint_msg.top_label;

	     init = "1"b;				/* lets not do this again!! */

	end;

	request.time_start_request = clock_ ();
	call date_time_ (request.time_start_request, request.date_time_start_request);

	go to common_write;

/* entrypoint to save ptr to the drivers iodd_static structure */

init: entry (a_static_ptr);

	iodd_static_ptr = a_static_ptr;
	return;
%page; %include dprint_msg;
%page; %include iod_tables_hdr;
%page; %include iodd_static;
%page; %include output_request_data;
%page; %include queue_msg_hdr;

     end write_control_form_;
