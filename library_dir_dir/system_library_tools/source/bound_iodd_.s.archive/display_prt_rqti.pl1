/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */

/* format: off */

/* Decodes and prints the contents of a binary data table segment produced by cv_rqti.  The format of the printed output
   corresponds exactly to the source language accepted by cv_rqti.  Thus, if output is directed to a file, the resulting
   file can be converted.  */

/* Created:  August 1977 by J. Whitmore */
/* Modified: June 1979 by C. Hornig to define the banner_bars keyword */
/* Modified: 30 November 1981 by G. Palter to recognize new force_ctl_char mode */
/* Modified: November 1983 by C. Marker to recognize force_nsep mode. */

/* format: on */

display_prt_rqti:
     procedure () options (variable);

dcl  arglen fixed bin;				/* length of arg */
dcl  argp ptr;					/* ptr to arg */
dcl  code fixed bin (35);				/* error code */
dcl  date char (24);				/* the date in ascii */
dcl  dir char (168);				/* directory pathname */
dcl  ent char (32);					/* entry name */
dcl  (i, j, k) fixed bin;				/* loop variables */
dcl  nargs fixed binary;
dcl  segp ptr;					/* ptr to compiled segment */
dcl  stops char (48) var;

dcl  arg char (arglen) based (argp);			/* command argument */
dcl  chan_id (16) char (3) int static options (constant)
	init (" 1,", " 2,", " 3,", " 4,", " 5,", " 6,", " 7,", " 8,", " 9,", "10,", "11,", "12,", "13,", "14,", "15,",
	"16,");
dcl  whoami char (24) int static options (constant) init ("display_prt_rqti");

dcl  (hbound, length, null, string, substr, rtrim) builtin;

dcl  cleanup condition;

dcl  (
     com_err_,
     com_err_$suppress_name
     ) entry () options (variable);
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  requote_string_ entry (character (*)) returns (character (*));

/**/

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;					/* not called as a command */
	     call com_err_ (code, whoami);
	     return;
	end;

	if nargs ^= 1
	then do;
	     call com_err_$suppress_name (0, whoami, "Usage: ^a path", whoami);
	     return;
	end;

	call cu_$arg_ptr (1, argp, arglen, code);	/* get pathname arg */
	if code ^= 0
	then do;
	     call com_err_ (code, whoami, "Fetching argument #1.");
	     return;
	end;

	call expand_pathname_ (argp -> arg, dir, ent, code);
						/* get dir and entry names */
	if code ^= 0
	then do;
	     call com_err_ (code, whoami, arg);
	     return;
	end;

	call hcs_$initiate (dir, ent, "", 0, 0, segp, code);
						/* get segment ptr */
	if segp = null ()
	then do;
	     call com_err_ (code, whoami, "^a>^a", dir, ent);
	     return;
	end;

	on condition (cleanup) call hcs_$terminate_noname (segp, (0));

	prt_rqtip = segp;				/* set up for automatic based references */

	call date_time_ (prt_rqti.header.time_created, date);
						/* keep compilation date handy */
	if prt_rqti.header.header_version ^= rqti_header_version_1
	then do;
	     call com_err_ (0, whoami, "Wrong header version number for ^a.  ^d (compilation date: ^a)",
		pathname_ (dir, ent), prt_rqti.header.header_version, date);
	     go to finish;
	end;
	if prt_rqti.type_code = 1
	then					/* check items for printer type only */
	     if prt_rqti.version ^= prt_rqti_version_1
	     then do;
		call com_err_ (0, whoami, "Wrong table version number for ^a.  ^d (compilation date: ^a)",
		     pathname_ (dir, ent), prt_rqti.version, date);
		go to finish;
	     end;

	call ioa_ ("/* Listing of^[ printer^;^] request type info table: ^a */
/* Table created on:  ^a */
/* Header version number:  ^d */
/* Table version number:  ^d */", (prt_rqti.type_code = 1), pathname_ (dir, ent), date, prt_rqti.header.header_version,
	     prt_rqti.version);			/* start with a little background information */

	call ioa_ ("^2//* Driver Info */^/");
	call ioa_ ("driver_attributes:^-^[^;^^^]meter, ^[^;^^^]auto_go;", prt_rqti.meter, prt_rqti.auto_go);
	call ioa_ ("driver_wait_time:^-^d;", prt_rqti.driver_wait_time);

	if prt_rqti.type_code = 1
	then do;					/*  if a printer type rqti display rest of information */
	     if prt_rqti.opr_msg ^= ""
	     then do;				/* print the message and comment only if defined */
		call ioa_ ("^2//* Message to the operator during driver initialization */^/");
		call ioa_ ("message:^/^a;", requote_string_ (rtrim (prt_rqti.opr_msg)));
	     end;

	     call ioa_ ("^2//* Banner Info */^/");
	     call ioa_ ("banner_type:^-^[none^;standard^;brief^;^d^];", (prt_rqti.banner_type + 1),
		prt_rqti.banner_type);
	     call ioa_ ("banner_bars:^-^[double^;single^;none^;^d^];", (prt_rqti.banner_bars + 1), prt_rqti.banner_bars)
		;

	     call ioa_ ("^2//* Control Flags for Printing */^/");
	     call ioa_ (
		"prt_control:^-^[^;^^^]auto_print, ^[^;^^^]force_nep, ^[^;^^^]force_esc, ^[^;^^^]force_ctl_char, ^[^;^^^]force_nsep;"
		, ^prt_rqti.no_auto_print, prt_rqti.force_nep, prt_rqti.force_esc, prt_rqti.force_ctl_char,
		prt_rqti.force_nsep);

	     call ioa_ ("^2//* Physical Paper Info */^/");
	     call ioa_ ("paper_width:^-^d;", prt_rqti.paper_width);
	     call ioa_ ("paper_length:^-^d;", prt_rqti.paper_length);
	     call ioa_ ("lines_per_inch:^4x^-^d;", prt_rqti.lines_per_inch);

	     if string (prt_rqti.channel_stops)
	     then do;				/* if there are any stops defined, print them */
		call ioa_ ("^2//* Logical Channel Stops */^/");
		do i = 1 to hbound (prt_rqti.channel_stops, 1);
						/* look at all the possible values */
		     if prt_rqti.channel_stops (i)
		     then do;			/* but only print the non-null stop data */
			stops = "";		/* clear the stops from the last line */
			do j = 1 to 16;		/* look at each channel for this line */
			     if substr (prt_rqti.channel_stops (i), j, 1)
			     then stops = stops || chan_id (j);
			end;
			k = length (rtrim (stops));	/* change last comma into a semi-colon */
			stops = substr (stops, 1, (k - 1)) || ";";
			call ioa_ ("line(^d):^5x^-^a", i, stops);
						/* print it */
		     end;
		end;
	     end;
	end;

	call ioa_ ("^/end;");


finish:
	call hcs_$terminate_noname (segp, code);

	return;
%page;

%include prt_rqti;

     end display_prt_rqti;
