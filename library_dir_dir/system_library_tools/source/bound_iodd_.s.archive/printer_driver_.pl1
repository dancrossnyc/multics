/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */

/* format: off */

/* I/O Daemon driver module for the printer with settable paper characteristics and logical channel stops */

/* Created:  September 1977 by J. C. Whitmore from the original version of printer_driver_ */
/* Modified: March 1978 by J. C. Whitmore for new dprint message format */
/* Modified: June 1979 by C. Hornig to initialize driver_status.dev_ctl_ptr */
/* Modified: 25 December 1981 by G. Palter to initialize prt_ctl.flags so that any unimplemented features will not be
      accidently left on (eg: force_ctl_char) */
/* Modified: November 1983 by C. Marker added support for force_nsep */
/* Modified: February 23, 1985 by C. Marker to use version 5 message segments */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Update for version 4 dprint_msg and allow previos version(s).
  2) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-19,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 I/O daemon tables.
  3) change(88-08-29,Farley), approve(88-08-19,MCR7911),
     audit(88-10-19,Wallman), install(88-10-28,MR12.2-1199):
     Updated for version 5 dprint_msg.
  4) change(89-06-15,Brunelle), approve(89-09-18,MCR8129),
     audit(89-09-29,Beattie), install(89-10-03,MR12.3-1083):
     Correct generation of major/minor_args_ptr when using offset into the I/O
     daemon tables string area.
                                                   END HISTORY COMMENTS */


/* format: on */


printer_driver_:
     procedure ();

	return;					/* this is not a legal entry */


/* Automatic variables */

dcl  date_string char (24);
dcl  ec fixed bin (35);				/* standard error code for calls */
dcl  ignore fixed bin (35);				/* error code to be ignored */
dcl  i fixed bin;					/* index variable */
dcl  major_args char (major_args_length) based (major_args_ptr);
dcl  major_args_ptr ptr;				/* ptr to major_args string */
dcl  major_args_length fixed bin;
dcl  omode char (256) aligned;
dcl  opr_msg char (160);				/* string for operator messages */
dcl  value char (32);				/* temporary char string */
dcl  p2 ptr;

dcl  io_stat bit (72) aligned;			/* ios_ status code */

dcl  1 st aligned based (addr (io_stat)),		/* breakdown of status code */
       2 code fixed bin (35),
       2 flags bit (36);


dcl  1 form_info aligned,
       2 page_length fixed bin,
       2 line_length fixed bin,
       2 line_no fixed bin,
       2 carriage_position fixed bin,
       2 aligned bit (1) unal,
       2 pad bit (35) unal;
%page;

/* External entries */

dcl  add_char_offset_ entry (ptr, fixed bin(21)) returns(ptr) reducible;
dcl  clock_ entry () returns (fixed bin (71));
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  iodd_listen_ entry (ptr);
dcl  iodd_msg_ entry options (variable);
dcl  iodd_parse_$args entry (char(*) var, char(*)) returns(char(256) var);
dcl  ios_$attach entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$changemode entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$detach entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$order entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*) aligned, ptr, fixed bin (35));
dcl  do_prt_request_ entry (ptr, ptr, fixed bin (35));
dcl  do_prt_request_$error_during_request entry (char (*));
dcl  do_prt_request_$single_copy entry ();
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2) aligned);
dcl  write_sample_form_ entry (char (*) aligned, char (*) aligned, fixed bin (35));
dcl  write_sample_prt_banner_ entry (char (*) aligned, ptr, ptr, fixed bin (35));
%page;

/* Internal static */

dcl  whoami char (24) int static options (constant) init ("printer_driver_");
dcl  master fixed bin int static options (constant) init (1);
dcl  slave fixed bin int static options (constant) init (2);
dcl  both fixed bin int static options (constant) init (0);
dcl  log fixed bin int static options (constant) init (0);
dcl  normal fixed bin int static options (constant) init (1);
dcl  error fixed bin int static options (constant) init (2);
dcl  initial_bit_rate fixed bin int static options (constant) init (7000);
						/* this is a starting value which is betweeen */
						/* the rates for the PRU-1200 and the PRT-301 */

dcl  stream (2) char (32) aligned int static;		/* streams for writing to terminals */
dcl  time fixed bin (71) int static init (1);

dcl  1 ctl aligned int static like prt_ctl;		/* here we hold the defaults used by do_prt_request_ */

/* Builtins */

dcl  (addr, null, substr, length, convert, max, string, mod) builtin;


/* Conditions */

dcl  (cleanup, conversion) condition;


/* External static -- error table entries */

dcl  error_table_$no_operation fixed bin (35) ext static;
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$fatal_error fixed bin (35) ext static;
%page;

init:
     entry (arg_p);

dcl  arg_p ptr;

	stat_p = arg_p;				/* put the arg into static for easy reference */
	driver_status_ptr = iodd_static.driver_ptr;	/* get pointer to driver_status seg */
	driver_status.dev_ctl_ptr, prt_ctl_ptr = addr (ctl);
	text_strings_ptr = iodd_static.text_strings_ptr;	/* get ptr to i/o daemon table text area */
						/* use static device control parameters */
	stream (1) = "user_output";			/* output stream for master terminal */
	stream (2) = iodd_static.slave_output;		/* check for active before use */

	if iodd_static.attach_type ^= ATTACH_TYPE_IOM then do; /* this driver expects an IOM channel */
	     call iodd_msg_ (error, master, error_table_$fatal_error, whoami,
		"This driver requires a printer attached through the IOM.");
	     return;				/* quit now */
	end;

	if iodd_static.assigned_devices > 1 then do;	/* be sure all is correct */
	     call iodd_msg_ (error, master, error_table_$fatal_error, whoami,
		"Multiple minor devices are not supported by the printer driver.");
	     return;
	end;

	if iodd_static.form_type = "undefined_form" then do;
	     iodd_static.form_type = "std_ctl_msg";	/* if set, keep over a re-init */
	     driver_status.form_wait_time = 5;		/* set this as a reasonable default */
	end;

/* locate the major args for the device in the iod_tables */
	major_args_ptr = add_char_offset_ (addr (text_strings.chars), iodd_static.major_args.first_char - 1);
	major_args_length = iodd_static.major_args.total_chars;

	iodd_static.device_dim = iodd_parse_$args ("dim=", major_args);
						/* see if there was a dim given */
	if iodd_static.device_dim = "" then		/* otherwise use our default */
	     iodd_static.device_dim = "prtdim_";	/* this is the default */

	iodd_static.dev_io_stream = "dev_i/o";		/* record the stream name */
	call ios_$attach (iodd_static.dev_io_stream, iodd_static.device_dim, iodd_static.attach_name, "save_vfc",
	     io_stat);
	if st.code ^= 0 then do;
	     call iodd_msg_ (error, master, st.code, whoami, "Fatal error: Unable to attach channel ^a",
		iodd_static.attach_name);
	     return;
	end;

	on cleanup
	     begin;				/* they will try to transfer back to iodd_ by go to */
	     call ios_$detach (iodd_static.dev_io_stream, "", "", io_stat);
	end;

	iodd_static.dev_in_stream = "Daemon_null_stream"; /* just to avoid un-initialized variables */
	driver_status.dev_out_stream = "printer_output";	/* define the stream name for all time */

	call ios_$attach (driver_status.dev_out_stream, "syn", "dev_i/o", "", io_stat);
						/* stick to convention */
	if st.code ^= 0 then do;
	     call iodd_msg_ (error, master, st.code, whoami, "Fatal error: Unable to attach syn to dev_i/o.");
	     go to clean_out;
	end;

	call iox_$find_iocb (driver_status.dev_out_stream, driver_status.dev_out_iocbp, ec);
	if ec ^= 0 then do;
	     call iodd_msg_ (error, master, ec, whoami, "Fatal error: Unable to get iocbp for device stream.");
	     go to clean_out;			/* that's all we can do... */
	end;
%page;

	string (prt_ctl.flags) = ""b;
	if driver_status.rqti_ptr ^= null then do;	/* if there is an rqti seg, use it */

	     prt_rqtip = driver_status.rqti_ptr;	/* make the based references cleaner */
	     if prt_rqti.header.header_version ^= rqti_header_version_1 then do;
		call iodd_msg_ (error, master, error_table_$fatal_error, whoami,
		     "prt rqt info version ^d found (expected ^d)", prt_rqti.header.header_version,
		     rqti_header_version_1);
		go to clean_out;
	     end;

	     prt_ctl.meter = prt_rqti.header.meter;	/* do we save meters for this rqt? */
	     iodd_static.slave_hold = ^(prt_rqti.header.auto_go);
						/* set the initial hold state as requested */
	     iodd_static.wakeup_time = max (30, prt_rqti.header.driver_wait_time);
						/* seconds to wait for a request */
	     if prt_rqti.header.type_code = 0 then go to set_defaults;
						/* this is only a header */
	     else if prt_rqti.header.type_code ^= 1 then do;
		call iodd_msg_ (error, master, error_table_$fatal_error, whoami,
		     "Wrong rqt info seg type for printer.");
		go to clean_out;
	     end;

	     if prt_rqti.version ^= prt_rqti_version_1 then do;
						/* see if it is the right version */
		call iodd_msg_ (error, master, error_table_$fatal_error, whoami,
		     "Wrong version of prt_rqti. Found ^d (expected ^d)", prt_rqti.version, prt_rqti_version_1);
		go to clean_out;
	     end;

	     if prt_rqti.opr_msg ^= "" then call iodd_msg_ (normal, both, 0, "", "^/^a", prt_rqti.opr_msg);
						/* give operator instructions */

	     prt_ctl.phys_page_length = prt_rqti.paper_length;
						/* get paper data for prtdim */
	     prt_ctl.phys_line_length = prt_rqti.paper_width;
	     prt_ctl.lines_per_inch = prt_rqti.lines_per_inch;

	     prt_ctl.channel_stops (*) = prt_rqti.channel_stops (*);
						/* get VFU stops for prtdim */

	     prt_ctl.banner_type = prt_rqti.banner_type;	/* copy control info to writable storage */
	     prt_ctl.force_nep = prt_rqti.force_nep;
	     prt_ctl.force_esc = prt_rqti.force_esc;
	     prt_ctl.force_nsep = prt_rqti.force_nsep;
	     prt_ctl.no_auto_print = prt_rqti.no_auto_print;
	     prt_ctl.banner_bars = prt_rqti.banner_bars;
	     prt_ctl.banner_indent = prt_rqti.banner_indent;
	     prt_ctl.banner_line = prt_rqti.banner_line;
	end;
	else do;					/* no rqti seg, so set some defaults */
	     prt_ctl.meter = "0"b;			/* don't keep any meters */
	     iodd_static.slave_hold = "1"b;		/* be sure to ask for a start command */
	     iodd_static.wakeup_time = 30;		/* check every 30 seconds */
set_defaults:					/* set up the default paper data */
	     prt_ctl.phys_page_length = 66;		/* 11 inch paper at 6 lpi is 66 lines */
	     prt_ctl.phys_line_length = 136;		/* assume the standard printer paper */
	     prt_ctl.lines_per_inch = 6;		/* normal for good readibility */

	     string (prt_ctl.channel_stops) = "0"b;	/* no slew stops are defined */

	     prt_ctl.force_nep = "0"b;		/* let user have his way */
	     prt_ctl.force_esc = "0"b;
	     prt_ctl.force_nsep = "0"b;		/* allow printing of inner head and tail sheets */
	     prt_ctl.no_auto_print = "0"b;		/* print without requesting operator attn */
	     prt_ctl.banner_type = NORMAL_BANNERS;	/* use normal head/tail sheets */
	     prt_ctl.banner_bars = NORMAL_BANNER_BARS;	/* set for overprinting */
	     prt_ctl.banner_indent = 0;		/* again */
	     prt_ctl.banner_line = 1;			/* again */
	end;


/* Now set up the dim with the paper and channel stop data */

	call set_paper_info (slave, ec);
	if ec ^= 0 then go to clean_out;		/* message was printed by proc */

	call iox_$control (driver_status.dev_out_iocbp, "channel_stops", addr (prt_ctl.channel_stops), ec);
	if ec ^= 0 then do;
	     call iodd_msg_ (error, master, ec, whoami, "Fatal error: Unable to perform channel_stops order.");
	     go to clean_out;			/* fatal error */
	end;

	driver_status.generic_type = "printer";		/* this is the type of device we use */
	driver_status.attached = "1"b;
	driver_status.ready = "1"b;
	driver_status.busy = "0"b;
	driver_status.request_pending = (36)"0"b;
	driver_status.elem_size = 9;			/* printer output is in characters - 9 bits each */
	driver_status.message_type = 1;		/* we only want print requests */
	driver_status.bit_rate_est = initial_bit_rate;	/* no history on output rate yet */
	driver_status.defer_time_limit = 0;		/* make operator specify reject time_limit */

	iodd_static.current_devices = iodd_static.assigned_devices;
						/* make them equal */

	if iodd_static.ctl_term.attached then
	     call ios_$changemode (iodd_static.ctl_output, "^hndlquit", omode, io_stat);
						/* we reset read on quit */

	value = iodd_parse_$args ("form_type=", major_args);
						/* check on a ctl term form type */
	if value ^= "" then iodd_static.form_type = substr (value, 1, length (iodd_static.form_type));

	call date_time_ (clock_ (), date_string);	/* get set for ready message */

	call iodd_msg_ (normal, both, 0, "",		/* let the subr do the work */
	     "^/^a driver ready at ^16a^/", driver_status.dev_name_label, date_string);

	call iodd_listen_ (stat_p);

clean_out:
	call ios_$detach (iodd_static.dev_io_stream, "", "", io_stat);

	return;
%page;

request:
     entry ();

/*  This is the entry which is called by the iodd_listen_ procedure when a request
   for this driver has been received from the coordinator.

   The purpose of the code for this entry of the printer driver is to validate
   that the request is one that we expect and can correctly interpret.
   Then we call do_prt_request_ to do all the work of access checking etc.
*/

	driver_status_ptr = iodd_static.driver_ptr;	/* make it general although it will always be the same */
	p2 = addr (driver_status.descriptor);		/* find request descriptor */
	dmp = addr (driver_status.message);		/* get ptr to message */
	prt_ctl_ptr = driver_status.dev_ctl_ptr;	/* only one for this driver */

	if dprint_msg.header.hdr_version ^= queue_msg_hdr_version_1 then do;
						/* trouble */
	     call iodd_msg_ (log, both, 0, "", "Invalid message header.  Cannot read request ^d.^d.",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q);
	     p2 -> request_descriptor.keep_in_queue = "1"b;
						/* save for conversion later */
	     go to be_nice;
	end;
	if dprint_msg.header.message_type ^= driver_status.message_type then do;
	     call iodd_msg_ (log, both, 0, "",		/* log the error */
		"Incorrect message type for printer.^/Request ^d.^d for ^a (segment ^a) not processed.",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dprint_msg.header.ename);
	     p2 -> request_descriptor.cancelled = "1"b;	/* we don't want this one back */
be_nice:
	     p2 -> request_descriptor.dont_delete = "1"b; /* save the user's data */
	     p2 -> request_descriptor.finished = "1"b;	/* mark it done */
	     return;				/* it wasn't for us after all */
	end;
	if dprint_msg.version ^= dprint_msg_version_5	/* Current version */
	     & dprint_msg.version ^= dprint_msg_version_4 /* Previous version */
	     & dprint_msg.version ^= dprint_msg_version_3 /* Previous version */
	then do;					/* other trouble? */
	     call iodd_msg_ (log, both, 0, "",
		"Wrong dprint message version found.^/Request ^d.^d for ^a (segment ^a) not processed",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dprint_msg.header.ename);
	     p2 -> request_descriptor.keep_in_queue = "1"b;
	     go to be_nice;
	end;
	if dprint_msg.version < dprint_msg_version_4 then /* Disallow line numbers before version 4 */
	     dprint_msg.control.line_nbrs = "0"b;
	if dprint_msg.line_lth > prt_ctl.phys_line_length then do;
						/* platten wide enough */
	     call iodd_msg_ (log, both, 0, "",
		"Request ^d.^d for ^a (segment ^a) deferred.^/Requires a device with line length of ^d.",
		p2 -> request_descriptor.seq_id, p2 -> request_descriptor.q,
		p2 -> request_descriptor.mseg_message_info_copy.sender_id,
		dprint_msg.header.ename, dprint_msg.line_lth);
	     p2 -> request_descriptor.keep_in_queue = "1"b;
						/* defer it */
	     go to be_nice;
	end;

	iodd_static.quit_during_request = "0"b;		/* start clean */

	call do_prt_request_ (driver_status.dev_out_iocbp, stat_p, ec);

	if ec ^= 0 then iodd_static.slave_hold = "1"b;	/* on errors go to command level */

	if iodd_static.test_entry then
	     if time > 1 then call timer_manager_$sleep (time, "11"b);
						/* pause if testing */

	return;
%page;

command:
     entry (source, state, arg_list_p, c_code);

dcl  source fixed bin;				/* 1 = master console, 2 = slave */
dcl  state fixed bin;				/* 0 = not quite ready to handle a request */
						/* 1 = drivers are ready */
						/* 2 = command entered after a quit */
dcl  arg_list_p ptr;				/* ptr to structure returned by parse_command_ */
dcl  c_code fixed bin (35);				/* error code: zero if command handled correctly */
dcl  save_code fixed bin (35);			/* saved value of c_code when called */
						/* error_table_ code for bad syntax or unknown command */

dcl  1 arg_list aligned based (arg_list_p),		/* parse_command_ structure */
       2 max_tokens fixed bin,			/* space allocated, do not change */
       2 n_tokens fixed bin,				/* number of tokens from command line (including cmd) */
       2 command char (64) var,			/* the first token is the command */
       2 arg (n_tokens - 1) char (64) var;		/* the other tokens are args to the command */

dcl  new_pl fixed bin;				/* temp for setting the phys page length */
dcl  new_ll fixed bin;				/* temp for the new phys line length */
dcl  new_lpi fixed bin;				/* and for the new lines per inch value */
dcl  not bit (1);


	stream (2) = iodd_static.slave_output;		/* in case it has changed */

	on conversion
	     begin;				/* handler for conversion errors */
	     call iodd_msg_ (normal, source, 0, "", "Argument conversion error. Try again.");
	     go to cmd_error;
	end;

	save_code = c_code;				/* save the called value */
	driver_status_ptr = iodd_static.driver_ptr;	/* make this ready for command use */
	prt_ctl_ptr = driver_status.dev_ctl_ptr;	/* this is the only one for this driver */
	c_code, ec = 0;				/* say we handled it for now */


	if command = "help" then do;
	     call iodd_msg_ (normal, source, 0, "", "^/** Commands for the printer driver **^/");
	     call iodd_msg_ (normal, source, 0, "", "banner_bars [<minor_dev>]  single | double | none");
	     call iodd_msg_ (normal, source, 0, "", "banner_type [<minor_dev>]  standard | brief | none");
	     call iodd_msg_ (normal, source, 0, "",
		"paper_info [<minor_dev>] [-ll <line_len>] [-pl <paper_len>] [-lpi <6 or 8>]");
	     call iodd_msg_ (normal, source, 0, "",
		"prt_control [<minor_dev>] [^]KEY ... (KEYs: force_nep, force_esc, force_nsep, autoprint)");
	     call iodd_msg_ (normal, source, 0, "", "sample_hs [<minor_dev>]");
	     call iodd_msg_ (normal, source, 0, "", "sample_form");
	     call iodd_msg_ (normal, source, 0, "", "single");
	     if test_entry then call iodd_msg_ (normal, source, 0, "", "time [<sleep_time>]");
	     go to end_cmd;
	end;

	if command = "ctl_term" | command = "ctlterm" then do;
						/* this was passed on by iodd_command_processor_ */
						/* to have us set the default form type */
	     iodd_static.form_type = "std_ctl_msg";	/* this is our default */
	     go to end_cmd;				/* the request entry will set the wait time */
	end;

	if command = "time" then
	     if ^iodd_static.test_entry then do;	/* refuse to recognize if not testing */
		ec = save_code;
		go to end_cmd;
	     end;
	     else do;
		if n_tokens > 1 then
		     time = convert (time, arg (1));
		else time = 1;			/* return to the default..full speed */
		go to end_cmd;
	     end;

	if command = "banner_bars" | command = "bannerbars" then do;
	     if arg_list.n_tokens > 1 then		/* some arg given */
		if driver_status.device_id = arg (1) then
		     i = 2;			/* minor device, args can start at number 2 */
		else i = 1;			/* first arg was a value */
	     else i = 1;				/* no args at all */
	     if arg_list.n_tokens = i | arg (i) = "-print" then do;
						/* give value */
		if prt_ctl.banner_bars = NORMAL_BANNER_BARS then opr_msg = "double";
		else if prt_ctl.banner_bars = SINGLE_BANNER_BARS then opr_msg = "single";
		else if prt_ctl.banner_bars = NO_BANNER_BARS then opr_msg = "none";
		else opr_msg = "Undefined value";
		call iodd_msg_ (normal, source, 0, "", "Current value is:  ^a", opr_msg);
		go to end_cmd;
	     end;
	     if arg (i) = "double" then prt_ctl.banner_bars = NORMAL_BANNER_BARS;
	     else if arg (i) = "single" then prt_ctl.banner_bars = SINGLE_BANNER_BARS;
	     else if arg (i) = "none" then prt_ctl.banner_bars = NO_BANNER_BARS;
	     else do;
		call iodd_msg_ (normal, source, 0, "", "Undefined argument ^a.  Use single, double or none.", arg (1))
		     ;
		go to cmd_error;
	     end;

	     go to end_cmd;
	end;

	if command = "single" then do;		/* operator wants to single space FF and VT */
	     if iodd_static.request_in_progress then do;
		call ios_$changemode (driver_status.dev_out_stream, "single.", omode, io_stat);
						/* set mode */
		call do_prt_request_$single_copy ();	/* avoid same problem if another copy requested */
	     end;
	     else call iodd_msg_ (normal, source, 0, "", "No current request.");
	     go to end_cmd;
	end;

	if command = "paper_info" | command = "paperinfo" then do;
	     if arg_list.n_tokens > 1 then		/* some arg given */
		if driver_status.device_id = arg (1) then
		     i = 2;			/* minor device, args can start at number 2 */
		else i = 1;			/* possibly first arg was a value */
	     else i = 1;				/* no args at all */
	     if n_tokens = i | arg (i) = "-print" then do;
		call iodd_msg_ (normal, source, 0, "",
		     "Physical paper width:  ^d characters ^/Physical paper length:  ^d lines (at ^d lines per inch)",
		     prt_ctl.phys_line_length, prt_ctl.phys_page_length, prt_ctl.lines_per_inch);
		go to end_cmd;
	     end;
	     if mod ((n_tokens - i), 2) = 1 then do;
		call iodd_msg_ (normal, source, 0, "",
		     "The paper_info command must have an even number of arguments.");
		go to cmd_error;			/* make him do it right */
	     end;
	     new_ll = prt_ctl.phys_line_length;		/* record the old values as the default */
	     new_pl = prt_ctl.phys_page_length;
	     new_lpi = prt_ctl.lines_per_inch;

	     do i = i to n_tokens - 1 by 2;		/* check the arg pairs */
		if arg (i) = "-ll" then new_ll = convert (new_ll, arg (i + 1));
		else if arg (i) = "-pl" then new_pl = convert (new_pl, arg (i + 1));
		else if arg (i) = "-lpi" then new_lpi = convert (new_lpi, arg (i + 1));
		else do;				/* bad control arg */
		     call iodd_msg_ (normal, source, 0, "", "Invalid control argument:  ^a", arg (i));
		     go to cmd_error;
		end;
	     end;
	     if new_ll < 10 | new_ll > 200 then do;	/* check the range */
		call iodd_msg_ (normal, source, 0, "", "Line length range is 10 to 200.");
		go to cmd_error;
	     end;

	     if ^(new_lpi = 6 | new_lpi = 8) then do;
		call iodd_msg_ (normal, source, 0, "", "Lines per inch must be 6 or 8.");
		go to cmd_error;
	     end;
	     if new_pl < 10 then do;
		call iodd_msg_ (normal, source, 0, "", "Minimum paper length is 10 lines.");
		go to cmd_error;
	     end;
	     if new_pl > 127 then do;
		call iodd_msg_ (normal, source, 0, "", "Maximum paper length is 127 lines.");
		go to cmd_error;
	     end;

	     prt_ctl.phys_line_length = new_ll;
	     prt_ctl.phys_page_length = new_pl;
	     prt_ctl.lines_per_inch = new_lpi;

	     call iodd_msg_ (normal, source, 0, "", "Changing to:  ll ^d, pl ^d at ^d lines per inch.",
		prt_ctl.phys_line_length, prt_ctl.phys_page_length, prt_ctl.lines_per_inch);

	     call set_paper_info (source, ec);

	     go to end_cmd;
	end;


	if command = "sample_form" | command = "sampleform" then do;
	     if iodd_static.ctl_term.attached then do;	/* be sure there is a place to write */
		if iodd_static.forms then do;		/* are we simulating FF? */
		     call ios_$order (iodd_static.ctl_output, "form_status", addr (form_info), io_stat);
		     if st.code ^= 0 then do;		/* OOPS.... */
			iodd_static.master_hold = "1"b;
						/* this is a problem for master terminal */
			call com_err_ (st.code, whoami,
			     "^/form_status order call.  Master terminal action required to continue.");
			go to cmd_error;
		     end;
		     if ^form_info.aligned then
			call ios_$order (iodd_static.ctl_output, "form_aligned", null, io_stat);
						/* this will work */
		end;
		call write_sample_form_ (iodd_static.form_type, iodd_static.ctl_output, ec);
	     end;
	     else call iodd_msg_ (normal, source, 0, "", "Control terminal is not attached.");

	     go to end_cmd;
	end;

	if command = "prt_control" | command = "prtcontrol" then do;
	     if arg_list.n_tokens > 1 then		/* some arg given */
		if driver_status.device_id = arg (1) then
		     i = 2;			/* minor device, args can start at number 2 */
		else i = 1;			/* possibly first arg was a value */
	     else i = 1;				/* no args at all */
	     if n_tokens = i | arg (i) = "-print" then do;/* give the values */
		call iodd_msg_ (normal, source, 0, "",
		     "Values are: ^[^^^]force_nep, ^[^^^]force_esc, ^[^^^]auto_print, ^[^^^]force_nsep",
		     ^prt_ctl.force_nep, ^prt_ctl.force_esc, prt_ctl.no_auto_print, prt_ctl.force_nsep);
	     end;
	     else do;
		do i = i to n_tokens - 1;		/* look at each argument */
		     not = (substr (arg (i), 1, 1) = "^");
						/* was first char a "^" */
		     if not then
			value = substr (arg (i), 2);
		     else value = arg (i);
		     if value = "force_nep" | value = "forcenep" then prt_ctl.force_nep = ^not;
		     else if value = "force_esc" | value = "forceesc" then prt_ctl.force_esc = ^not;
		     else if value = "force_nsep" | value = "forcensep" then prt_ctl.force_nsep = ^not;
		     else if value = "auto_print" | value = "autoprint" then prt_ctl.no_auto_print = not;
		     else call iodd_msg_ (normal, source, 0, "", "Undefined argument: ^a", arg (i));
		end;
	     end;
	     go to end_cmd;
	end;

	if command = "banner_type" | command = "bannertype" then do;
	     if arg_list.n_tokens > 1 then		/* some arg given */
		if driver_status.device_id = arg (1) then
		     i = 2;			/* minor device, args can start at number 2 */
		else i = 1;			/* possibly first arg was a value */
	     else i = 1;				/* no args at all */
	     if n_tokens = i | arg (i) = "-print" then do;/* give the values */
		if prt_ctl.banner_type = NO_BANNERS then opr_msg = "none";
		else if prt_ctl.banner_type = NORMAL_BANNERS then opr_msg = "standard";
		else if prt_ctl.banner_type = BRIEF_BANNERS then opr_msg = "brief";
		else opr_msg = "Undefined value";
		call iodd_msg_ (normal, source, 0, "", "Current value is:  ^a", opr_msg);
		go to end_cmd;
	     end;

	     if arg (i) = "standard" then prt_ctl.banner_type = NORMAL_BANNERS;
	     else if arg (i) = "none" then prt_ctl.banner_type = NO_BANNERS;
	     else if arg (i) = "brief" then prt_ctl.banner_type = BRIEF_BANNERS;
	     else do;
		call iodd_msg_ (normal, source, 0, "", "Banner type ^a is not defined.", arg (i));
		go to cmd_error;
	     end;

	     go to end_cmd;
	end;

	if command = "sample_hs" | command = "samplehs" then do;
	     if arg_list.n_tokens > 1 then		/* some arg given */
		if driver_status.device_id = arg (1) then
		     i = 2;			/* minor device, args can start at number 2 */
		else i = 1;			/* possibly first arg was a value */
	     else i = 1;				/* no args at all */

	     call iox_$control (driver_status.dev_out_iocbp, "reset", null, ignore);
						/* clear everything */
	     call iox_$control (driver_status.dev_out_iocbp, "inside_page", null, ignore);

	     call write_sample_prt_banner_ ("head_sheet", driver_status.dev_out_iocbp, prt_ctl_ptr, ec);

	     call iox_$control (driver_status.dev_out_iocbp, "end_of_page", null, ignore);
	     call iox_$control (driver_status.dev_out_iocbp, "runout", null, ignore);
						/* be sure it prints */

	     go to end_cmd;
	end;

/*	If we come past here, this command is illegal.  So make a clean return without changing anything. */

	c_code = save_code;				/* restore the original value */
	return;

end_cmd:
	c_code = ec;				/* pass back any defined errors */
	return;

cmd_error:
	c_code = error_table_$action_not_performed;	/* cause a resetread */
	return;
%page;

default_handler:
     entry (condition_info_ptr);

dcl  condition char (32);				/* fixed string for the call */

	condition = condition_info.condition_name;	/* this will indent funny */

	if iodd_static.request_in_progress then		/* try to avoid mistakes */
	     call do_prt_request_$error_during_request (condition);
						/* take it away */

	return;					/* do_prt_request_ should not return, but.... */
%page;

set_paper_info:
     procedure (source, code);

dcl  code fixed bin (35);
dcl  source fixed bin;

	code = 0;

	call iox_$control (driver_status.dev_out_iocbp, "paper_info", addr (prt_ctl.paper_info), code);
	if code ^= 0 then
	     if code = error_table_$no_operation then do; /* if dim couldn't, tell the operator */

		call iodd_msg_ (normal, source, 0, "",
		     "Mount VFU tape for ^d lines per page. ^/Set printer for ^d lines/inch.",
		     prt_ctl.phys_page_length, prt_ctl.lines_per_inch);

		iodd_static.slave_hold = "1"b;	/* be sure we let the op load VFU */
		code = 0;

	     end;
	     else do;				/* a real error */
		call iodd_msg_ (normal, source, code, whoami, "Unable to perform paper_info order.");
		return;
	     end;

	return;

     end set_paper_info;
%page; %include condition_info;
%page; %include dprint_msg;
%page; %include driver_status;
%page; %include iod_constants;
%page; %include iod_tables_hdr;
%page; %include iodd_static;
%page; %include mseg_message_info;
%page; %include prt_ctl;
%page; %include prt_order_info;
%page; %include prt_rqti;
%page; %include queue_msg_hdr;
%page; %include request_descriptor;

     end printer_driver_;
