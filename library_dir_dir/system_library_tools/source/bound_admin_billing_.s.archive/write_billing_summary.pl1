/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2018-01-16,Swenson), approve(2018-01-16,MCR10042),
     audit(2018-01-17,GDixon), install(2018-01-17,MR12.6g-0009):
     Update billing programs for 4-digit years and remove 20th century bias.
                                                   END HISTORY COMMENTS */

write_billing_summary: proc;

/* This program writes a summary report, one line per requisition.
   It is a print pass over "reqfile" after "charge_accts" has been run.

   inputs:
   .	"reqfile"		per-account requisition info

   outputs:
   .	"sumry"		one line per requisition showing status & charges
   THVV 11/69 */
/* Modified Feb 1980 by M. B. Armstrong to remove invalid (and useless) call to get prices. */

dcl  ec fixed bin (17),				/* file-system error code */
     subacct1_exit fixed bin,
    (i, j) fixed bin (17),				/* counters */
     old_reqno char (12) aligned,			/* project names */
     old_acctno char (12) aligned,			/* temp account name */
     ocutoff fixed bin (71),
    (coxx, dpxx) char (4) aligned,			/* junk args to "system_info_" */
    (cods, dpds) char (120) aligned,			/* Comapny name & department name for header */
     dtemp char (8) aligned,				/* ... */
    (rv, rb) char (15) aligned,			/* ... */
    (account_total (4), grand_total (4)) float bin (27),	/* totals for summary page */
     open char (15) aligned internal static init ("           open"),
     month (12) char (12) aligned int static init
    ("January", "February", "March", "April", "May", "June", "July",
     "August", "September", "October", "November", "December"),
    (mm, dd, year) fixed bin (17),			/* converted args */
     pp ptr,					/* ptr to "projfile" */
     qp ptr,					/* ptr to "reqfile" */
     page fixed bin (17),				/* page number */
     bchr char (i) unal based (ap),			/* pickup args */
     ap ptr,
     user_count fixed bin (17) init (0);		/* number of users this proj */

dcl (null, substr) builtin;

dcl  sumry char (32) int static aligned init ("sumry");	/* Streamname on which output is written */


/* format statements */

dcl  l3 char (48) aligned int static init
    ("^-^-^-Multics ^a for the month of ^a, ^d^/"),
     xl1 char (72) int static aligned init
    ("^-^-^-The following charges have been billed to account no. ^a^/^/^/"),
     xl2a char (90) aligned int static init
    ("^-^-^4xRequisition^8xCharge^10xRequisition^8xCharge^9xRequisition  Termination"),
     xl2b char (80) aligned int static init
    ("^-^14a  or PO no.^8xthis month^6xAmount^13xthis req.^6xBalance^6xDate"),
     xl3 char (60) aligned int static init
    ("^/^-^12a  ^12a  ^15a  ^15a  ^15a  ^15a  ^8a"),
     dashx char (120) aligned int static init
    ("^/^-------------  ------------^3x--------------^3x--------------^3x--------------^3x--------------  --------");

/* procedures called by this program */

dcl  get_wdir_ entry returns (char (168) aligned),
     ioa_ entry options (variable),
     ioa_$ioa_stream entry options (variable),
     system_info_$titles entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
     date_time_ ext entry (fixed bin (71), char (*) aligned),
     cv_$mwvf ext entry (float bin (27)) returns (char (15) aligned), /* dollar converter */
     cv_dec_check_ entry (char (*) unal, fixed bin) returns (fixed bin), /* ASCII to binary */
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     com_err_ entry options (variable);

%include reqfile;

/* ====================================================================================================== */

	call system_info_$titles (coxx, dpxx, cods, dpds); /* Get installation ID */

	call cu_$arg_ptr (1, ap, i, ec);		/* get date */
	if ec ^= 0 then do;
aer:	     call com_err_ (0, "write_billing_summary", "argument error. mm yyyy");
	     return;
	end;
	mm = cv_dec_check_ (bchr, ec);		/* Convert month to binary. */
	if ec ^= 0 then go to aer;
	if mm > 12 then go to aer;			/* Check for legality. */
	call cu_$arg_ptr (2, ap, i, ec);		/* Get second argument. */
	if ec ^= 0 then go to aer;
          if i ^= 4 then go to aer;                         /* Need 4-digit year */
	year = cv_dec_check_ (bchr, ec);		/* Convert year to binary */
	if ec ^= 0 then go to aer;
	if year < 1969 then go to aer;		/* Check. */

	call hcs_$initiate ((get_wdir_ ()), "reqfile", "", 0, 1, qp, ec);
	if qp = null then do;
err:	     call com_err_ (ec, "write_billing_summary", "reqfile");
	     return;
	end;

	account_total (1), account_total (2), account_total (3), account_total (4) = 0.0e0; /* zero counters */
	grand_total (1), grand_total (2), grand_total (3), grand_total (4) = 0.0e0; /* Clear grand total. */
	call ioa_$ioa_stream (sumry, "^|^-^-^a^/", cods); /* heading on summary */
	call ioa_$ioa_stream (sumry, "^-^-^-^a^/", dpds);
	call ioa_$ioa_stream (sumry, l3, "billing summary", month (mm), year);
	call ioa_$ioa_stream (sumry, xl2a);
	call ioa_$ioa_stream (sumry, xl2b, "Account");
	call ioa_$ioa_stream (sumry, dashx);

	old_reqno = "";
	old_acctno = "";
	do i = 1 to reqfile.nacts;
	     if qdf (i) ^= 0 then if chg_mo (i) = 0.0e0 then go to skipb;
	     if mitacct (i) = "nonbill" then go to skipb;
	     if acctid (i) = "" then go to skipb;	/* skip deleted acct */
	     if reqno (i) ^= old_reqno | mitacct (i) ^= old_acctno then do;
		subacct1_exit = 1;
		go to subacct1;			/* pseudocall */
subacct1_ret1:	account_total (1), account_total (2), account_total (3), account_total (4) = 0.0e0;
		old_reqno = reqno (i);
		old_acctno = mitacct (i);
		ocutoff = cutoff (i);
	     end;
	     account_total (1) = account_total (1) + chg_mo (i); /* Add up charges this month. */
	     account_total (2) = account_total (2) + req_amt (i); /* Add up face amount. */
	     account_total (3) = account_total (3) + chg_tr (i) + chg_mo (i); /* Calculate charges this req. */
	     if req_amt (i) > 0.0e0 then account_total (4) = account_total (4) + req_amt (i) - chg_tr (i) - chg_mo (i);
skipb:	end;
	subacct1_exit = 2;
	go to subacct1;
subacct1_ret2: call ioa_$ioa_stream (sumry, dashx);	/* Write final line of dashes. */
	call ioa_$ioa_stream (sumry, xl3, "", "", cv_$mwvf (grand_total (1)), cv_$mwvf (grand_total (2)),
	     cv_$mwvf (grand_total (3)), cv_$mwvf (grand_total (4)), "");



	call ioa_ ("End of billing summary. Grand total ^a", cv_$mwvf (grand_total (1)));

	call hcs_$terminate_noname (qp, ec);		/* Terminate reqfile. */
	return;					/* FINAL EXIT */

/* - - - - - - - */

subacct1:
	if old_reqno = "" then go to subx;
	if account_total (2) = 0.0e0 then do;		/* Check for OPEN */
	     rv, rb = open;
	end;
	else do;					/* ... no */
	     rv = cv_$mwvf (account_total (2));
	     rb = cv_$mwvf (account_total (4));
	end;
	call date_time_ (ocutoff, dtemp);
	call ioa_$ioa_stream (sumry, xl3, old_acctno, old_reqno, /* Write account line. */
	     cv_$mwvf (account_total (1)), rv, cv_$mwvf (account_total (3)), rb, dtemp);

skipp:	do j = 1 to 4;				/* Add up grand total, reset account total */
	     grand_total (j) = grand_total (j) + account_total (j);
	end;

subx:	if subacct1_exit = 1 then go to subacct1_ret1;
	else go to subacct1_ret2;

     end;
