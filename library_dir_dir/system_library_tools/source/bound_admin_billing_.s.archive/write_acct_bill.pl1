/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2018-01-16,Swenson), approve(2018-01-16,MCR10042),
     audit(2018-01-17,GDixon), install(2018-01-17,MR12.6g-0009):
     Update billing programs for 4-digit years and remove 20th century bias.
                                                   END HISTORY COMMENTS */

write_acct_bill: proc;

/* This program writes a bill for each multics account.
   It is a print pass over "reqfile", and is run after "charge_accts".

   inputs:
   .	"reqfile"		per-account requisition info

   outputs:
   .	"bill"		one page per account, showing project and account status
   .	"mailing_copy"	same as bill, but with breaker page for mailing before each account
   THVV 11/69 */
/* Modified by C. Hornig June 1979 to center titles. */
/* Modified Feb 1980 by M. B. Armstrong to remove invalid (and useless) call to get prices. */
/* Modified 1984-08-01 BIM for some unaligned strings in the projfile. */

dcl  ec fixed bin (17),				/* file-system error code */
     subacct_exit fixed bin,
    (i, j, k) fixed bin (17),				/* counters */
     oproj char (12) aligned,				/* project names */
    (coxx, dpxx) char (4) aligned,			/* junk args to "system_info_" */
    (cods, dpds) char (120) aligned,			/* Comapny name & department name for header */
     dtemp char (8) aligned,				/* ... */
    (rv, rb) char (15) aligned,			/* ... */
    (yy (4), yz (4)) float bin (27),			/* totals for summary page */
     open char (15) aligned internal static init ("           open"),
     month (12) char (12) aligned int static init
    ("January", "February", "March", "April", "May", "June", "July",
     "August", "September", "October", "November", "December"),
    (mm, year) fixed bin (17),			/* converted args */
     qp ptr,					/* ptr to "reqfile" */
     bchr char (i) unal based (ap),			/* pickup args */
     ap ptr,
     dn char (168) aligned,
     user_count fixed bin (17) init (0);		/* number of users this proj */

dcl (divide, length, null, rtrim) builtin;

dcl  bill char (32) int static options (constant) aligned init ("bill"), /* Streamname on which bill is written */
     mc char (32) int static options (constant) init ("mailing_copy"); /* Streamname for mailing copy of bill */

/* format statements */

dcl  l3 char (48) aligned int static options (constant) init
    ("^-^-^-Multics ^a for the month of ^a, ^d^/"),
     xl1 char (72) int static options (constant) aligned init
    ("^-^-^-The following charges have been billed to account no. ^a^/^/^/"),
     xl2a char (90) aligned int static options (constant) init
    ("^-^-^4xRequisition^8xCharge^10xRequisition^8xCharge^9xRequisition  Termination"),
     xl2b char (80) aligned int static options (constant) init
    ("^-^14a  or PO no.^8xthis month^6xAmount^13xthis req.^6xBalance^6xDate"),
     xl3 char (60) aligned int static options (constant) init
    ("^/^-^12a  ^12a  ^15a  ^15a  ^15a  ^15a  ^8a"),
     dashx char (120) aligned int static options (constant) init
    ("^/^-------------  ------------^3x--------------^3x--------------^3x--------------^3x--------------  --------");

/* procedures called by this program */

dcl  ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     get_wdir_ entry returns (char (168) aligned),
     ioa_$ioa_stream entry options (variable),
     system_info_$titles entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
     date_time_ ext entry (fixed bin (71), char (*) aligned),
     cv_$mwvf ext entry (float bin (27)) returns (char (15) aligned), /* dollar converter */
     cv_dec_check_ entry (char (*) unal, fixed bin) returns (fixed bin), /* ASCII to binary */
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     mailing_page_ entry (char (*), char (*), char (*)),
     com_err_ entry options (variable);

%include reqfile;

/* ====================================================================================================== */

	call system_info_$titles (coxx, dpxx, cods, dpds); /* Get installation ID */

	call cu_$arg_ptr (1, ap, i, ec);		/* get date */
	if ec ^= 0 then do;
aer:	     call com_err_ (0, "write_acct_bill", "argument error. mm yyyy");
	     return;
	end;
	mm = cv_dec_check_ (bchr, ec);		/* Convert month to binary. */
	if ec ^= 0 then go to aer;
	if mm > 12 then go to aer;			/* Check for legality. */
	call cu_$arg_ptr (2, ap, i, ec);		/* Get second argument. */
	if ec ^= 0 then go to aer;
	year = cv_dec_check_ (bchr, ec);		/* Convert year to binary */
	if ec ^= 0 then go to aer;
	if i ^=4 then go to aer;                          /* Need 4-digit year */
	if year < 1969 then go to aer;		/* Check. */

	call hcs_$initiate ((get_wdir_ ()), "reqfile", "", 0, 1, qp, ec);
	if qp = null then do;
err:	     call com_err_ (ec, "write_acct_bill", "reqfile");
	     return;
	end;

	oproj = "";				/* force subtotal */
	k = 0;
	do i = 1 to reqfile.nacts;			/* loop through reqfile */
	     if qdf (i) ^= 0 then if chg_mo (i) = 0.0e0 then go to skipa;
	     if mitacct (i) = "nonbill" then go to skipa;
	     if acctid (i) = "" then go to skipa;	/* ... */
	     if oproj ^= mitacct (i) then do;		/* If account changed, subtotal & head. */
		if oproj ^= "" then if k > 1 then do;
			subacct_exit = 1;
			go to subacct;
		     end;
subacct_ret1:	yz (1), yz (2), yz (3), yz (4) = 0.0e0; /* Zero account totals. */
		call mailing_page_ (mc, billing_name (i), billing_addr (i));
		call ioa_$ioa_stream (bill, "^|^vx^a^/", 68 - divide (length (rtrim (cods)), 2, 17), cods); /* write headers */
		call ioa_$ioa_stream (bill, "^vx^a^/", 68 - divide (length (rtrim (dpds)), 2, 17), dpds); /* write headers */
		call ioa_$ioa_stream (bill, l3, "billing", month (mm), year);
		call ioa_$ioa_stream (bill, "^-^-^-To:     ^a; ^a^/", billing_name (i), billing_addr (i));
		call ioa_$ioa_stream (bill, xl1, mitacct (i));
		call ioa_$ioa_stream (bill, xl2a);
		call ioa_$ioa_stream (bill, xl2b, "Project ID");
		call ioa_$ioa_stream (bill, dashx);
		k = 0;				/* count of reqs on acct */
		oproj = mitacct (i);
	     end;
	     k = k + 1;				/* Count requisition. */
	     yy (1) = chg_mo (i);			/* Get charges this month. (just added this up) */
	     yy (2) = req_amt (i);			/* Get face amount of req. */
	     yy (3) = chg_tr (i) + yy (1);		/* Get charges this req. */
	     yy (4) = yy (2) - yy (3);		/* Compute balance. */
	     if yy (2) = 0.0e0 then do;		/* Check for OPEN balance. */
		yy (4) = 0.0e0;			/* Yes. */
		rv, rb = open;
	     end;
	     else do;				/* No. */
		rv = cv_$mwvf (yy (2));
		rb = cv_$mwvf (yy (4));
	     end;
	     call date_time_ (cutoff (i), dtemp);
	     do j = 1 to 4;				/* Add up account total. */
		yz (j) = yz (j) + yy (j);
	     end;
	     call ioa_$ioa_stream (bill, xl3, acctid (i), reqno (i), /* Write requisition line. */
		cv_$mwvf (yy (1)), rv, cv_$mwvf (yy (3)), rb, dtemp);
skipa:	end;
	subacct_exit = 2;
	if k > 1 then go to subacct;			/* last subtotal if necessary */
subacct_ret2:
	call ioa_ ("End of bill.");

	call hcs_$terminate_noname (qp, ec);		/* Terminate reqfile. */
	return;					/* FINAL EXIT */

/* - - - - - - - */

/* This internal procedure does a subtotal for bills */

subacct:	call ioa_$ioa_stream (bill, dashx);		/* Write dashes. */
	if yz (2) = 0.0e0 then rv, rb = open;		/* Check for OPEN */
	else do;
	     rv = cv_$mwvf (yz (2));
	     rb = cv_$mwvf (yz (4));
	end;
	call ioa_$rsnnl ("^d projects", dn, j, k);
	call ioa_$ioa_stream (bill, xl3, dn, "", cv_$mwvf (yz (1)), rv,
	     cv_$mwvf (yz (3)), rb, "");
	if subacct_exit = 1 then go to subacct_ret1;
	else go to subacct_ret2;
     end write_acct_bill;
