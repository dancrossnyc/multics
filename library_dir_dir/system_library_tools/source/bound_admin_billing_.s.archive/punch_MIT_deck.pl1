/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2018-01-17,Swenson), approve(2018-01-16,MCR10042),
     audit(2018-01-17,GDixon), install(2018-01-17,MR12.6g-0009):
     Update billing programs for 4-digit years and remove 20th century bias.
                                                   END HISTORY COMMENTS */

punch_MIT_deck: proc;

/* Punch accounting cards in the peculiar format required by MIT accounting.

   This format is.:

   cc	lth	variable	contents
   -----	---	--------	--------
   01-03  3	-	"   "	(formerly accounting batch number)
   04-09	6	voucher	MIT accounting voucher number for deck (obtain from accounting)
   10-14	5	tacct	current MIT account number for Multics account
   15-17	3	objcd	MIT accounting object code (usually 896, computer service)
   18-20	3	tmon	3-letter month id
   21-24	4	-	", CC" (first two digits of 4-digit year)
   25-26	2	year	last two digits of 4-digit year 
   27-52	26	-	" IPC MULTICS COMPUTER REQ "
   53-62	10	treqn	current MIT requisition number for Multics account
   63-64	2	mm	2-digit month
   65-66	2	dd	2-digit day of last of month
   67-68	2	year	last two digits of 4-digit year
   69-77	9	dols	dollars charged
   78-79	2	cts	cents charged
   80	1	-	"J"

   So an example of a card produced by this program is:

   "   B9999979457896JUL, 1971 IPC MULTICS COMPUTER REQ 123456    07317100014732105J"

   NOTES:
   Object code is "896", computer services, except for the following accounts:
   10000-11149 and 11700-13299 (outside transfer accounts)	where it is "001"
   13565-13649 (IPC internal accounts)	where it is "421"

   Voucher numbers are obtained from the accounting office just before the run.

   No blanks are allowed in cc. 63-79.

   All letters must be capital for the Multics punch DIM.

   Two cards are punched at the end with a minus punch in cc 79.
   They represent the accounting-office credit input for our operating account
   which will result from billing the customers. (one is for IPC use, other for paying.)

   OPERATING INSTRUCTIONS:

   1. iocall attach cards "file_" cardfilename
   2. punch_MIT_deck mm dd yyyy Byyyyy
   3. iocall detach cards
   4. fo cards.print; p80 cardfilename; co
   5. dpunch1 -mcc cardfilename
   6. dprint1 cards.print

   HISTORY:

   Initial coding 7/71, THVV
   Credit vouchers added 11/71, THVV
   001 account range corrected 6/74, JLH

   */

dcl (i, j, k, l, m, n) fixed bin,
     ncards fixed bin init (0),
     requisition_total float bin init (0.0e0),
     tout float bin init (0e0),			/* total accounts 10000-11149, 11700-13299 */
     iptot float bin init (0e0),			/* total IPC */
     paytot float bin init (0e0),			/* total paying */
     cards char (32) aligned int static init ("cards"),
     dols fixed bin,
     cts fixed bin,
     buf char (80) aligned,
     objcd char (3) aligned,
     voucher char (6) aligned,
     tacct char (5) aligned,
     treqn char (10) aligned,
     xreqn char (10) aligned int static init ("CREDIT"),
     tmon char (3) aligned,
    (mm, dd, yy, yr_mod_100) fixed bin,
     oreq char (12) aligned init (""),
     oac char (12) aligned init (""),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin,
     qp ptr;

dcl  minus (0: 9) char (1) aligned int static init ("}", "J", "K", "L", "M", "N", "O", "P", "Q", "R");
dcl  month (12) char (3) aligned int static init ("JAN", "FEB", "MAR", "APR", "MAY", "JUN",
     "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

dcl  uppercase char (26) aligned int static init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     lowercase char (26) aligned int static init ("abcdefghijklmnopqrstuvwxyz");
dcl (divide, index, mod, null, substr, abs) builtin;

dcl  cv_dec_check_ entry (char (*) unal, fixed bin) returns (fixed bin),
     ioa_$rsnnl entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     get_wdir_ entry () returns (char (168) aligned),
     ioa_ entry options (variable),
     ioa_$ioa_stream entry options (variable),
     com_err_ entry options (variable),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, fixed bin,
     ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin);

dcl  punchf char (80) int static aligned init
    ("^3x^6a^5a^3a^3a, ^4d IPC MULTICS COMPUTER REQ ^10a^2d^2d^2d^9d^2dJ");

%include reqfile;

/* =============================================== */
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
aer:	     call com_err_ (0, "punch_MIT_deck", "illegal argument: mm dd yyyy Byyyyy");
	     return;
	end;
	mm = cv_dec_check_ (bchr, ec);
	if ec ^= 0 then go to aer;
	if mm > 12 then go to aer;
	if mm < 1 then go to aer;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then go to aer;
	dd = cv_dec_check_ (bchr, ec);
	if ec ^= 0 then go to er;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then go to aer;
	if al ^= 4 then go to aer;
	yy = cv_dec_check_ (bchr, ec);
	if ec ^= 0 then go to aer;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0 then go to aer;
	if al ^= 6 then go to aer;
	voucher = bchr;
	if substr (voucher, 1, 1) = "b" then substr (voucher, 1, 1) = "B";
	if substr (voucher, 1, 1) = "B" then do;
	     j = cv_dec_check_ (substr (voucher, 2), ec);
	     if ec ^= 0 then go to aer;
	end;
	else go to aer;

	tmon = month (mm);

	call hcs_$initiate ((get_wdir_ ()), "reqfile", "", 0, 1, qp, ec);
	if qp = null then do;
er:	     call com_err_ (ec, "punch_MIT_deck", "reqfile");
	     return;
	end;

	do i = 1 to nacts;
	     if chg_mo (i) = 0 then go to skipb;
	     if acctid (i) = "" then go to skipb;
	     if reqno (i) ^= oreq | mitacct (i) ^= oac then do;
		if oac ^= "" then call sub;
		requisition_total = 0.0e0;
		oreq = reqno (i);
		oac = mitacct (i);
	     end;
	     requisition_total = requisition_total + chg_mo (i);
skipb:	end;
	call sub;
	cts = 100 * (paytot + tout + 0.005e0);		/* compute total billed */
	dols = divide (cts, 100, 17, 0);
	cts = mod (cts, 100);
          yr_mod_100 = mod(yy, 100);
	call ioa_$rsnnl (punchf, buf, j, voucher, "13622", "146",
	     tmon, yy, xreqn, mm, dd, yr_mod_100, dols, cts);
	do j = 63 to 79;
	     if substr (buf, j, 1) = " " then substr (buf, j, 1) = "0";
	end;
	j = mod (cts, 10);
	substr (buf, 79, 1) = minus (j);
	call ioa_$ioa_stream (cards, "^80a", buf);
	cts = 100 * (iptot + 0.005e0);		/* compute internal charges */
	dols = divide (cts, 100, 17, 0);
	cts = mod (cts, 100);
	call ioa_$rsnnl (punchf, buf, j, voucher, "13622", "421",
	     tmon, yy, xreqn, mm, dd, yy, dols, cts);
	do j = 63 to 79;
	     if substr (buf, j, 1) = " " then substr (buf, j, 1) = "0";
	end;
	j = mod (cts, 10);
	substr (buf, 79, 1) = minus (j);
	call ioa_$ioa_stream (cards, "^80a", buf);

	call ioa_$ioa_stream (cards, "^/");		/* run out the punch */

	call hcs_$terminate_noname (qp, ec);

	call ioa_ ("Accounting deck punched, ^d cards", ncards+2);
	call ioa_ ("Total billable $^.2f", paytot + tout);

	return;

/* ------------------------------------------------------- */

sub:	proc;

	     if (oac <= "11149" & oac >= "10000")|
		(oac <= "13299" & oac >= "11700") then do; /* External billing? */
		objcd = "001";
		tout = tout + requisition_total;
	     end;
	     else if oac = "nonbill" then return;
	     else if oac = "system" then return;
	     else if oac <= "13649" & oac >= "13565" then do;
		objcd = "421";
		iptot = iptot + requisition_total;
	     end;
	     else do;				/* paying */
		objcd = "896";			/* .. computer services */
		paytot = paytot + requisition_total;
	     end;
	     if abs(requisition_total) < 0.005e0 then return;	/* skip zero charge */
	     tacct = oac;				/* length */
	     treqn = oreq;
	     cts = 100 * (abs(requisition_total) + 0.005e0);
	     dols = divide (cts, 100, 17, 0);
	     cts = mod (cts, 100);
	     call ioa_$rsnnl (punchf, buf, j, voucher, tacct, objcd,
		tmon, yy, treqn, mm, dd, yy, dols, cts);
	     do j = 63 to 79;			/* change blanks to zero here */
		if substr (buf, j, 1) = "" then substr (buf, j, 1) = "0";
	     end;
	     if requisition_total<0e0
	     then do;
		j=mod(cts,10);
		substr(buf,79,1)=minus(j);
		end;
	     do j = 1 to 80;			/* upshift */
		k = index (lowercase, substr (buf, j, 1));
		if k ^= 0 then substr (buf, j, 1) = substr (uppercase, k, 1);
	     end;
	     call ioa_$ioa_stream (cards, "^80a", buf);
	     ncards = ncards + 1;

	end sub;

     end punch_MIT_deck;
