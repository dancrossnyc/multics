/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-22,Martinson), approve(86-05-22,MCR7412),
     audit(86-05-22,GJohnson), install(86-05-22,MR12.0-1060):
     Improve error message searching and fix bugs in search hueristics.
                                                   END HISTORY COMMENTS */


extract_msg_doc_: proc (segname, segp, lth, iocbp, ec);

/* This procedure extracts message documentation coded in a conventional way
   out of the source of a program. The extracted information is marked for
   sorting and editing and appended to an output file.

   THVV 3/77
   Improved by R. Holmstedt 9/82 to find more error messages.
*/

dcl  segname char (*),				/* Parameters. Name of segment being scanned */
     segp ptr,					/* Ptr to input */
     lth fixed bin (21),				/* Lth of input */
     iocbp ptr,					/* Ptr to output */
     ec fixed bin (35);				/* status code */

/* ec = 1 means no documentation but has call to a logging subroutine
   ec = 2 means has BEGIN but no end
   ec = 3 means has BEGIN - END but no Message:
   any other ec came from vfile_
   */

dcl  START char (28) static options (constant) init ("BEGIN MESSAGE DOCUMENTATION
");
dcl  END char (25) static options (constant) init ("END MESSAGE DOCUMENTATION");
dcl  NL char (1) static options (constant) init ("
");
dcl  NLNL char (2) static options (constant) init ("

");
dcl  NL_QUOTE_NL_QUOTE char (4) static options (constant) init ("
""
""");
dcl  MSG char (9) static options (constant) init ("Message:
");

dcl (beginning_of_documentation, doc_block_size, cur_msg_index, errmess_lth) fixed bin (21);
dcl (pfx_lth, msg_block_start, msg_block_lth) fixed bin (21);
dcl  pfx char (32) var;				/* Chars to discard at begin of each line */

dcl  segment char (lth) based (segp);			/* Input */

dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));

dcl (addr, index, length, reverse, substr, verify) builtin;

	ec = 1;
	beginning_of_documentation = index (segment, START);   /* Scan for BEGIN */
	if beginning_of_documentation = 0 then do;
	     call check_calls;			/* Check if any logging */
	     return;				/* Error 1 no message documentation or Error 0 no */
	     end;					/* message documentation because no logging calls */
	ec = 2;					/* Check Error 2 - Message block has not end      */
	beginning_of_documentation = beginning_of_documentation + length (START);
	doc_block_size = index (substr (segment, beginning_of_documentation), END);	/* Find END. */
	if doc_block_size = 0 then return;
	ec = 3;

	cur_msg_index = index (substr (segment, beginning_of_documentation, doc_block_size), MSG);     /* Find header */
	if cur_msg_index = 0 then do;
	     call check_calls;			/* Check if any logging */
	     return;				/* Error 3, empty message block or Error 0, empty message */
	     end;					/* block because no logging calls	        */
	ec = 0;					/* All is well			        */
	msg_block_start = beginning_of_documentation+cur_msg_index-1;
	pfx_lth = index (reverse (substr (segment, 1, msg_block_start-1)), NL)-1;
	pfx = substr (segment, msg_block_start-pfx_lth, pfx_lth);

	do while (cur_msg_index < doc_block_size);
	     cur_msg_index = cur_msg_index + length (MSG);
	     msg_block_start = beginning_of_documentation+cur_msg_index-1;
	     msg_block_lth = index (substr (segment, msg_block_start, doc_block_size-cur_msg_index+1), MSG)-1;
	     if msg_block_lth <= 0 then msg_block_lth = doc_block_size-cur_msg_index;
	     errmess_lth = index (substr (segment, msg_block_start, msg_block_lth-1), NLNL); /* Standard end of message PL/I source */
	     if errmess_lth = 0 then
	     errmess_lth = index (substr (segment, msg_block_start, msg_block_lth-1), NL_QUOTE_NL_QUOTE);	/* Standard end of message ALM source */
	     if errmess_lth > 0 then do;
		call putc ("[");
		call iox_$put_chars (iocbp, addr (segname), length (rtrim (segname)), 0);
		call putc ("]");
		call putc (" ");
		call move_lines (msg_block_start, errmess_lth);
		call putc ("~");
		call putc (NL);
		call move_lines (msg_block_start+errmess_lth+2-1, msg_block_lth+1-errmess_lth-2);
		call putc ("!");
		call putc (NL);
	     end;
	     cur_msg_index = cur_msg_index + msg_block_lth;
	end;
	return;

check_calls: proc;
	     if index (segment, "call syserr") ^= 0 then return;
	     if index (segment, "call	syserr") ^= 0 then return;	/* callTAB... */
	     if index (segment, "call sys_log_") ^= 0 then return;
	     if index (segment, "call	sys_log_") ^= 0 then return;	/* callTAB... */
	     if index (segment, "call admin_gate_$syserr") ^= 0 then return;
	     if index (segment, "call	admin_gate_$syserr") ^= 0 then return;	/* callTAB... */
	     if index (segment, "call salv_err_msg") ^= 0 then return;
	     if index (segment, "call	salv_err_msg") ^= 0 then return;   /* callTAB... */
	     if index (segment, "call hphcs_$syserr") ^= 0 then return;
	     if index (segment, "call	hphcs_$syserr") ^= 0 then return;  /* callTAB... */
	     ec = 0;				/* Not an error, no logging calls */
             end check_calls;
	
move_lines: proc (a_beg, a_nleft);

dcl (a_beg, a_nleft) fixed bin (21);
dcl (beg, nleft, llth, trim_lth, tpx, nls) fixed bin (21);

	     beg = a_beg;
	     nleft = a_nleft;
	     nls = 0;
	     do while (nleft > 0);
		llth = index (substr (segment, beg, nleft), NL);
		if llth = 0 then llth = nleft+1;
		tpx = min (llth-1, pfx_lth);		/* Discard the "prefix" */
		if substr (segment, beg, tpx) ^= pfx	/* .. which we noted before the first "Message:" */
		then tpx = 0;
		if llth-tpx > 1 then
		     do while (nls > 0);
		     call putc (NL);
		     nls = nls - 1;
		end;
		call iox_$put_chars (iocbp, addr (substr (segment, beg+tpx, 1)), llth-tpx-1, 0);
		nls = nls + 1;
		beg = beg + llth;
		nleft = nleft - llth;
	     end;

	end move_lines;


putc:	proc (c);

dcl  c char (1);

	     call iox_$put_chars (iocbp, addr (c), 1, 0);

	end putc;

     end extract_msg_doc_;
