/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


extract_message_doc: proc;

/* EXTRACT_MESSAGE_DOC - Find error message documentation in source program comment.

   THVV 4/77 */

dcl  i fixed bin;
dcl  ap ptr, al fixed bin, bchr char (al) based (ap) unal;
dcl  me char (19) static options (constant) init ("extract_message_doc");
dcl  segp ptr;
dcl  scc fixed bin (21);
dcl  iocbp ptr;
dcl  bitc fixed bin (24);
dcl  ec fixed bin (35);
dcl  dn char (168);
dcl  en char (32);
dcl  target char (168);
dcl  acptr ptr;
dcl  acsw bit (1) init ("0"b);
dcl  bfsw bit (1) init ("0"b);

dcl  extract_msg_doc_ entry (char (*), ptr, fixed bin (21), ptr, fixed bin (35));

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2),
     ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5),
     ptr, fixed bin (35));
dcl  archive_util_$first_disected entry (ptr, ptr, char (32), fixed bin (24), fixed bin (35));
dcl  archive_util_$disected_element entry (ptr, ptr, char (32), fixed bin (24), fixed bin (35));

dcl  error_table_$badopt fixed bin (35) ext;

dcl (divide, index, length, null, rtrim, substr, verify) builtin;
dcl  cleanup condition;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
er1:	     call com_err_ (ec, me, "");
	     return;
	end;
	call expand_pathname_ (bchr, dn, en, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, me, "^a", bchr);
	     return;
	end;
	call hcs_$initiate_count (dn, en, "", bitc, 1, segp, ec);
	if segp = null then do;
er:	     call com_err_ (ec, me, "^a>^a", dn, en);
	     return;
	end;
	if index (en, ".archive") ^= 0 then do;
	     acsw = "1"b;
	     acptr = segp;
	     call archive_util_$first_disected (acptr, segp, en, bitc, ec);
	     if ec ^= 0 then go to er;
	end;
	scc = divide (bitc, 9, 17, 0);

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then go to er1;
	call absolute_pathname_ (bchr, target, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "^a", bchr);
	     go to exit;
	end;
	call iox_$attach_ioname (unique_chars_ ("0"b), iocbp,
	     "vfile_ " || target || " -extend", ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, me, "Attaching to ^a", target);
	     go to exit;
	end;
	call iox_$open (iocbp, 2, "1"b, ec);

	call cu_$arg_ptr (3, ap, al, ec);
	if ec = 0 then
	     if bchr = "-brief" | bchr = "-bf" then bfsw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, me, "^a", bchr);
		go to wump;
	     end;

	on cleanup begin;
	     call iox_$close (iocbp, 0);
	     call iox_$detach_iocb (iocbp, 0);
	end;

nxac:	call extract_msg_doc_ (en, segp, scc, iocbp, ec);
	if ec = 1
	then if bfsw then;
	     else call com_err_ (0, me, "Documentation missing in ^a", en);
	else if ec ^= 0 then call com_err_ (ec, me, "Error extracting documentation from ^a", en);
	if acsw then do;
	     call archive_util_$disected_element (acptr, segp, en, bitc, ec);
	     if ec = 0 then do;
		scc = divide (bitc, 9, 17, 0);
		go to nxac;
	     end;
	end;

wump:	call iox_$close (iocbp, ec);
	call iox_$detach_iocb (iocbp, ec);
exit:	call hcs_$terminate_noname (segp, ec);

     end extract_message_doc;
