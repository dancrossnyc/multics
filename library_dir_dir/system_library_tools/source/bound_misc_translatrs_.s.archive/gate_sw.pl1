/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gate_sw: proc (name, switch) ;
dcl  name char (*), switch char (*) ;

/* created by A Kobziar to allow the dynamic switching of a gate to one that has calls to user
   proceedures  rather than  system proceedures, for the purpose of testing the user enviroment.
   USAGE:	call gate_sw(name,function);

   1. name char(*)		path name of the gate segment, to be found using standard search rules.

   2. function char(*)	specification of which function to be performed from the following options:

   "sim_init"	this will initialize the user's gate, make the system's gate known by the
   name "real_(name of gate)", and set switch to make calls to user's proceedures.

   "sim"		this will set the switch in the user's gate to make calls to user proceedures.

   "real"		this will set the switch in the user's gate to make calls to system proceedures.

   "revert"		this will terminate the user's gate and initiate system's gate with "(gate's name)".
   This allows the return to system enviroment without doing a new_proc.

   The old gate is made known to the process by the refname "real_|name|.
   Switching back and forth is permitted. */

/* NOTES:
   1. "sim_init" must be the first function executed if the user wants to replace a system gate.
   Otherwize  the "sim" and "real" functions can be used for a private switchable gate.
   2. any number of switchable gates can coexist.
   3. Works because kst is hashed with gate name and ring no.
   */

dcl (save_p, p, gate_ptr, pnamep, dirp, gatedirp, enamep, refp) ptr ;
dcl (hcs_sw, reset_sw) bit (1) aligned;
dcl (pnamel, len) fixed bin ;
dcl  code fixed bin (35);
dcl (dirname, gatedir) char (168), (refname, ename) char (32) ;
dcl  schar char (4) ;
dcl  whoami char (8) aligned ;
dcl (addr, length, null) builtin;

dcl 1 ret_struc aligned,
    2 num fixed bin,
    2 names (22) char (168) aligned ;

dcl 1 lib_sr_struc aligned,
    2 num fixed bin,
    2 name char (168) aligned ;

/* the following ext entry names, except for hcs_, cannot be used as name of user's gate */
dcl  hcs_$get_search_rules ext entry (ptr) ;
dcl  hcs_$initiate_search_rules ext entry (ptr, fixed bin(35)) ;
dcl (hcs_$make_ptr, real_hcs_$make_ptr) ext entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl (hcs_$initiate, real_hcs_$initiate) ext entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl (hcs_$terminate_name, real_hcs_$terminate_name) ext entry (char (*), fixed bin (35));
dcl  term_$nomakeunknown ext entry (ptr, fixed bin(35)) ;
dcl (cu_$ptr_call, com_err_) ext entry options (variable);
dcl  expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin(35)) ;
dcl (hcs_$fs_get_path_name, real_hcs_$fs_get_path_name) ext entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl (hcs_$fs_get_seg_ptr, real_hcs_$fs_get_seg_ptr) ext entry (char(*), ptr, fixed bin (35));
dcl (error_table_$segknown, error_table_$name_not_found) ext fixed bin (35);


	hcs_sw, reset_sw = "0"b ;			/* initialize for gate name not hcs_ */
	whoami = "gate_sw" ;


	pnamep = addr (name) ;
	pnamel = length (name) ;			/* set up for expand path */
	dirp = addr (dirname) ;
	enamep = addr (ename) ;
	refp = addr (refname) ;
	gatedirp = addr (gatedir) ;

	call expand_path_ (pnamep, pnamel, dirp, enamep, code) ;
	if code ^= 0 then do ;
	     call com_err_ (code, whoami, "Expand_path err on ^a", name) ;
	     return ;
	end ;

	if ename = "hcs_" then hcs_sw = "1"b ;		/* gate is hcs_ */

	if switch = "sim_init" then do ;
	     refname = "real_"||ename ;		/* name original gate real_|name| */
	     save_p = addr (ret_struc) ;
	     p = addr (lib_sr_struc) ;
	     lib_sr_struc.num = 1 ;
	     lib_sr_struc.name = "system_libraries" ;

/* must get the pathname of the real gate, which may not be known to process */
	     call hcs_$get_search_rules (save_p) ;	/* pick up user's search rules for safekeeping */

	     call hcs_$initiate_search_rules (p, code) ;	/* search only the sys libraries */
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Setting search rule error") ;
		reset_sw = "1"b;
		goto sr_rl;			/* restor user's search rules */
	     end ;

	     call hcs_$make_ptr (null, ename, "", gate_ptr, code) ; /* get ptr to real gate */
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Err on init of real gate ^a", ename) ;
		reset_sw = "1"b;
		goto sr_rl;
	     end ;

	     call hcs_$fs_get_path_name (gate_ptr, gatedir, len, ename, code); /* get name of real gate */
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Cannot get real gate pathname, ^a", ename) ;
		reset_sw = "1"b;
		goto sr_rl;
	     end ;

	     call hcs_$initiate (gatedir, ename, refname, 0, 1, gate_ptr, code) ; /* add refname real_(name) to old gate */
	     if code ^= error_table_$segknown then
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to add refname ^a to ^a", refname, ename) ;
		reset_sw = "1"b;
		goto sr_rl;
	     end ;

sr_rl:	     call hcs_$initiate_search_rules (save_p, code) ; /* reset user's search rules */
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to reset user's search rules") ;
	     end ;
	     if reset_sw then return ;		/* errors above - quit */

	     call term_$nomakeunknown (enamep, code) ;	/* unlinking references to old gate (name) */
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Err on term of ^a", ename) ;
		return ;
	     end ;

	     if hcs_sw then call real_hcs_$terminate_name (ename, code) ; /* removing reference (name) from old gate */
	     else call hcs_$terminate_name (ename, code) ;

	     if code ^= 0 then if code ^= error_table_$name_not_found then do;
		call com_err_ (code, whoami, "Unable to remove refname ^a", ename) ;
		return ;
	     end ;


/* now must initiate user's gate */
	     if hcs_sw then call real_hcs_$initiate (dirname, ename, ename, 0, 1, p, code) ;
	     else call hcs_$initiate (dirname, ename, ename, 0, 1, p, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to initiate new gate ^a", ename) ;
reset:		
						/* must now init the old gate */
		if hcs_sw then call real_hcs_$initiate (gatedir, ename, ename, 0, 1, p, code) ;
		else call hcs_$initiate (gatedir, ename, ename, 0, 1, p, code) ;
		if code ^= 0 then do ;
		     call com_err_ (code, whoami, "Unable to reinit real_^a with name", ename);
		     return ;
		end;
		call com_err_ (0, whoami, "Real gate reestablished") ;
		return ;
	     end ;

	     schar = "sim" ;
						/* get entry ptr to switch in the user's gate */
setsym:	     if hcs_sw then call real_hcs_$make_ptr (p, ename, schar, gate_ptr, code) ;
	     else call hcs_$make_ptr (p, ename, schar, gate_ptr, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to find entry real in ^a", name) ;
		goto reset ;
	     end ;

	     call cu_$ptr_call (gate_ptr) ;		/* set switch in user's gate for function schar */

	     return ;
	end;

/* the next call must be performed for all other functions */
/* get a pointer to user's gate */
	if hcs_sw then call real_hcs_$initiate (dirname, ename, ename, 0, 1, p, code) ; /* get ptr to user's gate */
	else call hcs_$initiate (dirname, ename, ename, 0, 1, p, code) ;
	if code ^= error_table_$segknown then
	if code ^= 0 then do ;
	     call com_err_ (code, whoami, "Unable to get ptr to ^a", ename) ;
	     return ;
	end ;

	if switch = "sim" then do ;
	     schar = "sim" ;
	     goto setsym ;
	end ;

	if switch = "real" then do ;
	     schar = "real" ;
	     goto setsym ;
	end ;

	if switch = "revert" then do ;		/* want to reestablish old gate */
						/* p pts to user's gate ename in dir dirname */

	     refname = "real_"||ename ;
	     if hcs_sw then call real_hcs_$fs_get_seg_ptr (refname, save_p, code) ; /* pick up ptr to old gate */
	     else call hcs_$fs_get_seg_ptr (refname, save_p, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to get ptr to ^a", refname) ;
		return ;
	     end ;

	     if hcs_sw then call real_hcs_$fs_get_path_name (save_p, gatedir, len, ename, code) ;
	     else call hcs_$fs_get_path_name (save_p, gatedir, len, ename, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to get pathname ^p", save_p) ;
		return ;
	     end ;



	     if hcs_sw then call real_hcs_$terminate_name (ename, code) ; /* terminating user's gate */
	     else call hcs_$terminate_name (ename, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to terminate gate ^a", ename) ;
		return ;
	     end ;

/* must initiate the system gate with refname of |ename| */

	     if hcs_sw then call real_hcs_$initiate (gatedir, ename, ename, 0, 1, p, code) ;
	     else call hcs_$initiate (gatedir, ename, ename, 0, 1, p, code) ;
	     if code ^= error_table_$segknown then
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Initiate err on ^a", ename) ;
		return ;
	     end ;
						/* now will remove name "real_|ename| from sys gate */
	     call hcs_$terminate_name (refname, code) ;
	     if code ^= 0 then do ;
		call com_err_ (code, whoami, "Unable to term name ^a on sys gate", refname) ;
		return ;
	     end ;

	     return ;

	end;

	call com_err_ (0, whoami, "Unable to recognize switch setting desired,please consult documentation for correct name") ;
	return ;
     end gate_sw ;
