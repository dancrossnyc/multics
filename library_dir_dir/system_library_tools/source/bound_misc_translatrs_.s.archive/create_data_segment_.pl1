/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-09-04,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to fix definition threading to not thread definition header into
     backward definition thread and overwrite msf_map_relp value in def header.
  2) change(90-04-23,Huen), approve(90-04-23,MCR8166), audit(90-04-27,Gray),
     install(90-05-17,MR12.4-1009):
     lang_13: Warn users if a level 2 element which is not aligned on a word
     boundary is used.
                                                   END HISTORY COMMENTS */


/* create_data_segment_: A standard object segment generator which uses
   runtime pl1 structure definitions as templates for defining data segment
   segdefs.

   Oct. 15, 1975 by Bernard S. Greenberg.
   Even source map bug, random pad words fixed 7/30/76 by BSG
   Runtime symbol simple bit treated properly -- 12/16/76 BSG
   improved searching for block using return ptr -- 11/07/78 JRDavis
   Fixed bug in creating data segments without text sections -- 2 Oct 1980 Chris Jones
   Fixed bug in call to stu_$decode_runtime_value -- 8 October 1980 M. N. Davidoff
   Changed to use date_time_$format -- 06/19/84 J A Falksen
*/
/* format: style2 */
create_data_segment_:
     procedure (infoptr, rcode);

	dcl     rcode		 fixed bin (35);
	dcl     myname		 char (32) internal static options (constant) init ("create_data_segment_");
	dcl     (infop, infoptr)	 ptr;
	dcl     stucode		 fixed bin;
	dcl     (slen, tlen, llen)	 fixed bin (19);
	dcl     movdef		 bit (1) aligned;
	dcl     (hp, smp, osmp, osymp, defp, class3ptr)
				 ptr;
	dcl     (
	        DEF		 init (1),
	        DEFR		 init (2),
	        LNKR		 init (3),
	        SYMR		 init (4),
	        TXTR		 init (5)
	        )			 fixed bin internal static options (constant);

	dcl     scrps		 (5) ptr;
	dcl     1 relinfo		 aligned based,
		2 decl_version	 fixed bin,
		2 n_bits		 fixed bin;

	dcl     1 rloc		 aligned based (rlocp),
		2 words		 (0:9999) unal,
		  3 (l, r)	 bit (18);

	dcl     1 vrloc		 aligned based (ptr (rlocp, next)) like rloc;
	dcl     rp		 ptr,
	        b18u		 bit (18) unaligned based;

	dcl     (putp, rlocp)	 ptr;
	dcl     1 acc		 aligned based,
		2 acc1		 unal,
		  3 acclen	 fixed bin (8) unal,
		  3 accstr	 char (4 refer (acc.acclen)) unal;
	dcl     (tptr, sptr, lptr)	 ptr;
	dcl     error_table_$translation_failed
				 external fixed bin (35);
	dcl     tssi_$get_segment	 entry (char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     get_temp_segments_	 entry (char (*), (*) ptr, fixed bin (35));
	dcl     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
	dcl     get_wdir_		 entry returns (char (168));
	dcl     match_star_name_	 entry (char (*), char (*), fixed bin (35));
	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     tssi_$finish_segment	 entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
	dcl     (now, dtmc)		 fixed bin (71);
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     1 oi		 like object_info aligned;
	dcl     strptr		 ptr;
	dcl     i			 fixed bin;
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     tssi_$clean_up_segment entry (ptr);
	dcl     cleanup		 condition;

	dcl     sgp		 ptr,
	        aclip		 ptr;
	dcl     dhp		 ptr;
	dcl     (opp, smrcp)	 ptr;
	dcl     copy		 (copylen) bit (36) aligned based;
	dcl     copylen		 fixed bin (19);
	dcl     wordl		 fixed bin;
	dcl     n			 fixed bin;
	dcl     bc		 fixed bin (24);
	dcl     get_group_id_	 entry returns (char (32));
	dcl     prevdef		 ptr;
	dcl     pv		 ptr;
	dcl     next		 fixed bin (18);
	dcl     ojnxt		 fixed bin (18);
	dcl     zeroword		 fixed bin (18);
	dcl     bword		 bit (36) based;
	dcl     strcopy		 char (copylen) based;
	dcl     strcopy1		 char (strcopy1l) based (strc1p);
	dcl     strc1p		 ptr;
	dcl     strcopy1l		 fixed bin;
	dcl     oname		 char (32);

	dcl     stu_$get_runtime_block entry (ptr, ptr, ptr, fixed bin (18));
	dcl     (header_ptr, block_ptr)
				 ptr;
	dcl     (tnode, lnode, snode)	 ptr;
	dcl     cp		 ptr;
	dcl     code		 fixed bin (35);
	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);

	dcl     com_err_		 entry options (variable);
	dcl     stu_$find_runtime_symbol
				 entry (ptr, char (*) aligned, ptr, fixed bin) returns (ptr);
	dcl     stu_$decode_runtime_value
				 entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr, fixed bin)
				 returns (fixed bin (35));
	dcl     (addr, addrel, bin, bit, clock, codeptr, divide, fixed, length, mod, null, ptr, rel, rtrim, size,
	        stackframeptr, substr, unspec)
				 builtin;
	dcl     (lsize, sysize, tsize, dsize, ssize)
				 fixed bin (18);
	dcl     (srel, lrel, drel, syrel)
				 fixed bin (18);

%include cds_args;
%include stack_frame;
%include definition;
%include segname_def;
%include source_map;
%include relbts;
%include object_info;
%include object_map;
%include linkdcl;
%include std_symbol_header;
%include runtime_symbol;

/* Check information supplied by caller.  Locate necessary runtime symbol nodes. */

	infop = infoptr;
	rcode = 0;

	do sp = stackframeptr () -> stack_frame.prev_sp repeat sp -> stack_frame.prev_sp
	     while (sp -> stack_frame_flags.support);
	end;
	cp = sp -> stack_frame.return_ptr;

	call stu_$get_runtime_block (sp, header_ptr, block_ptr, bin (rel (cp), 18));
	if header_ptr = null
	then do;
		call com_err_ (0, myname, "Cannot get symbol table header.");
tranfai:
		rcode = error_table_$translation_failed;
		return;
	     end;

	movdef = infop -> cds_args.defs_in_link;	/* copy bit */
	oname = infop -> cds_args.seg_name;

	if infop -> cds_args.have_text
	then do;
		tptr = infop -> cds_args.sections (1).p;
		tlen = infop -> cds_args.sections (1).len;
		tnode = find_runtime_symbol_node ("text", infop -> cds_args.sections (1).struct_name);
	     end;
	else tnode = null;

	if infop -> cds_args.have_static & infop -> cds_args.separate_static
	then do;
		sptr = infop -> cds_args.sections (2).p;
		slen = infop -> cds_args.sections (2).len;
		snode = find_runtime_symbol_node ("static", infop -> cds_args.sections (2).struct_name);
	     end;
	else snode = null;

	if infop -> cds_args.have_static & ^infop -> cds_args.separate_static
	then do;
		lptr = infop -> cds_args.sections (2).p;
		llen = infop -> cds_args.sections (2).len;
		lnode = find_runtime_symbol_node ("linkage", infop -> cds_args.sections (2).struct_name);
	     end;
	else lnode = null;

/* Check legitimacy of all star names */

	do i = 1 to infop -> cds_args.num_exclude_names;
	     call check_star_name_$entry (infop -> cds_args.exclude_array_ptr -> exclude_names (i), code);
	     if code < 0 | 2 < code
	     then do;
		     call com_err_ (code, myname, "^a", infop -> cds_args.exclude_array_ptr -> exclude_names (i));
		     go to tranfai;
		end;
	end;

/* All parameter checks have been passed.  Now actually generate the object segment. */

	scrps (*) = null;
	aclip = null;
	on cleanup call clupper;

clupper:
     proc;
	call release_temp_segments_ (myname, scrps, code);
	if aclip ^= null
	then call tssi_$clean_up_segment (aclip);
     end clupper;

	call get_temp_segments_ (myname, scrps, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting temporary segments.");
hell:
		call clupper;
		goto tranfai;
	     end;

	call tssi_$get_segment (get_wdir_ (), oname, sgp, aclip, code);
	if sgp = null
	then do;
		call com_err_ (code, myname, "^a", oname);
		goto hell;
	     end;

/* build definitions */

	rlocp = scrps (DEFR);			/* defreloc */
	putp = scrps (DEF);				/* definitions */
	dhp = putp;
	next = 0;
	putp -> definition.new = "1"b;

	putp -> definition.ignore, putp -> definition.new = "1"b;

	rp = ptr (rlocp, next);
	rp -> definition.forward, rp -> definition.backward = rc_dp;
	vrloc (1).l, vrloc (1).r = rc_a;

	prevdef = putp;
	next = next + 2;

/* allocate the zeroword */

	putp = ptr (putp, next);

	putp -> bword = "0"b;
	vrloc (0).r, vrloc (0).l = rc_a;
	zeroword = next;

	next = next + 1;

/* put out segname */

	putp = ptr (putp, next);
	prevdef -> definition.forward = rel (putp);
	putp -> segname_def.backward = bit (bin (zeroword, 18), 18);
	putp -> segname_def.next = bit (zeroword, 18);
	prevdef = putp;
	defp = putp;
	rp = ptr (rlocp, next);
	rp -> segname_def.forward, rp -> segname_def.backward, rp -> segname_def.symbol, rp -> segname_def.defblock =
	     rc_dp;
	rp -> segname_def.next = rc_dp;
	addr (rp -> segname_def.flags) -> b18u = rc_a;

	defp -> segname_def.new = "1"b;
	defp -> segname_def.class = "011"b;
	next = next + size (segname_def);

	strptr = alloc_acc (rtrim (oname));
	defp -> definition.symbol = rel (strptr);
	class3ptr = defp;

/* define symbol_table */

	defp = putp;
	prevdef -> segname_def.defblock = rel (defp);
	prevdef -> segname_def.forward = rel (defp);
	defp -> definition.backward = rel (prevdef);
	prevdef = defp;
	defp -> definition.value = "000000000000000000"b;
	defp -> definition.class = "010"b;		/* symbol */
	defp -> definition.new = "1"b;
	defp -> definition.segname = rel (class3ptr);
	rp = ptr (rlocp, next);
	next = next + size (definition);
	defp -> definition.symbol = rel (alloc_acc ("symbol_table"));
	rp -> definition.forward, rp -> definition.backward, rp -> definition.segname, rp -> definition.symbol = rc_dp;
	rp -> definition.value = rc_s;
	addr (rp -> definition.flags) -> b18u = rc_a;

/* put out text definitions */

	if tnode = null
	then tlen, tsize = 0;
	else do;
		tsize = tlen + mod (tlen, 2);
		call generate_definitions (tnode, tptr, rc_t, 0);
	     end;

/* put out link definitions */

	if lnode = null
	then llen, lsize = 0;
	else do;
		lsize = llen + mod (llen, 2);
		call generate_definitions (lnode, lptr, rc_lp18, 1);
	     end;

/* put out static definitions */

	if snode = null
	then slen, ssize = 0;
	else do;
		ssize = slen + mod (slen, 2);
		call generate_definitions (snode, sptr, rc_is18, 4);
	     end;

	dsize = next + mod (next, 2);
	prevdef -> definition.forward = bit (zeroword, 18);

generate_definitions:
     proc (nptr, struc_ptr, gen_reloc, gen_class);
	dcl     nptr		 ptr;
	dcl     struc_ptr		 ptr;
	dcl     gen_reloc		 bit (18);
	dcl     gen_class		 fixed bin (3);

	dcl     v2		 fixed bin (35);
	dcl     point		 ptr;
	dcl     mod_tst		 (0:7) fixed bin internal static options (constant)
				 init (1, 36, 4, 2, 1, 36, 4, 8);


	do point = nptr repeat addrel (point, point -> runtime_symbol.brother);
	     code = 1;
	     do i = 1 to infop -> cds_args.num_exclude_names while (code ^= 0);
		call match_star_name_ (addrel (point, point -> runtime_symbol.name) -> acc.accstr,
		     infop -> cds_args.exclude_array_ptr -> exclude_names (i), code);
	     end;

	     if code ^= 0
	     then do;
		     if point -> runtime_symbol.bits.simple
		     then stucode, v2 = 0;
		     else do;
			     v2 = stu_$decode_runtime_value (point -> runtime_symbol.offset, block_ptr, sp, null,
				null, struc_ptr, stucode);
			     if stucode ^= 0
			     then do;
				     call com_err_ (0, myname, "stu_$decode_runtime_value complains ^d on ^a",
					stucode, addrel (point, point -> runtime_symbol.name) -> acc.accstr);
				     go to hell;
				end;
			     if mod (v2, mod_tst (fixed (point -> runtime_symbol.units))) ^= 0
			     then do;
				     call com_err_ (0, myname,
					"A level 2 element, ^a, is not word aligned and cannot be turned into an entrypoint.",
					addrel (point, point -> runtime_symbol.name) -> acc.accstr);
				     go to skip_def;
				end;
			end;

		     if gen_class = 1
		     then v2 = v2 + size (virgin_linkage_header);

		     putp = ptr (putp, next);
		     defp = putp;
		     defp -> definition.class = bit (bin (gen_class, 3), 3);
		     defp -> definition.segname = rel (class3ptr);
		     defp -> definition.value = bit (bin (v2, 18), 18);
		     defp -> definition.new = "1"b;
		     rp = ptr (rlocp, next);
		     rp -> definition.forward, rp -> definition.backward, rp -> definition.symbol = rc_dp;
		     addr (rp -> definition.flags) -> b18u = rc_a;
		     rp -> definition.value = gen_reloc;

		     next = next + size (definition);
		     defp -> definition.symbol =
			rel (alloc_acc (addrel (point, point -> runtime_symbol.name) -> acc.accstr));
		     prevdef -> definition.forward = rel (defp);
		     defp -> definition.backward = rel (prevdef);
		     prevdef = defp;
skip_def:
		end;

	     if point -> runtime_symbol.brother = "0"b
	     then return;
	end;
     end generate_definitions;

/* acc generator, which admittedly does some useless work */

alloc_acc:
     proc (cstr) returns (ptr);

	dcl     cstr		 char (*);

	putp = ptr (putp, next);			/* update ptr */
	wordl = divide (length (cstr), 4, 17, 0) + 1;
	do i = 1 to wordl;
	     vrloc (i - 1).r, vrloc (i - 1).l = rc_a;
	end;
	putp -> acc.acclen = length (cstr);
	putp -> acc.accstr = cstr;
	next = next + wordl;
	opp = putp;
	putp = ptr (putp, next);
	return (opp);
     end alloc_acc;

/* cons some junk together */

	ojnxt = 0;
	putp = ptr (sgp, ojnxt);

	if tsize > 0
	then do;
		copylen = tlen;
		putp -> copy = tptr -> copy;
		ojnxt = ojnxt + tsize;
	     end;

	if movdef
	then drel = 0;
	else do;					/* put defs in normal place */
		drel = ojnxt;
		copylen = dsize;
		putp = ptr (putp, ojnxt);
		putp -> copy = scrps (DEF) -> copy;
		ojnxt = ojnxt + dsize;
	     end;

/* Generate separate static */

	srel = ojnxt;
	if ssize > 0
	then do;
		copylen = slen;
		putp = ptr (putp, ojnxt);
		putp -> copy = sptr -> copy;
		ojnxt = ojnxt + ssize;
	     end;

	rlocp = scrps (LNKR);
	rp = rlocp;
	next = 0;

	putp = ptr (sgp, ojnxt);
	lrel = bin (rel (putp), 18);
	hp = putp;
	unspec (putp -> virgin_linkage_header) = "0"b;
	putp -> virgin_linkage_header.def_offset = bit (drel, 18);
	putp -> virgin_linkage_header.link_begin = bit (bin (lsize + size (virgin_linkage_header), 18), 18);
	putp -> virgin_linkage_header.linkage_section_lng = putp -> virgin_linkage_header.link_begin;

	next = next + size (virgin_linkage_header);
	putp = addrel (putp, size (virgin_linkage_header));

	if lsize > 0
	then do;
		copylen = llen;
		putp -> copy = lptr -> copy;
		next = next + lsize;
	     end;
	ojnxt = ojnxt + next;
	if movdef
	then do;					/* Throw defs into link-resident static */
		hp -> virgin_linkage_header.defs_in_link = "010000"b;
		hp -> virgin_linkage_header.def_offset = bit (bin (next, 18), 18);
		drel = ojnxt;
		copylen = dsize;
		putp = ptr (putp, ojnxt);
		putp -> copy = scrps (DEF) -> copy;
		hp -> virgin_linkage_header.linkage_section_lng =
		     bit (bin (bin (hp -> virgin_linkage_header.linkage_section_lng, 18) + dsize, 18), 18);
		ojnxt = ojnxt + dsize;
		next = next + dsize;
	     end;
	lsize = lsize + size (virgin_linkage_header);
	do i = 0 to next - 1;			/* link relocs */
	     rloc (i).r, rloc (i).l = rc_a;
	end;
	rp -> virgin_linkage_header.def_offset = rc_dp;
	rp -> virgin_linkage_header.link_begin = rc_lp18;

/* Create symbol section */

	syrel = ojnxt;
	putp = ptr (sgp, ojnxt);
	rlocp = scrps (SYMR);

	next = 0;
	dtmc, now = clock ();
	pv = ptr (codeptr (create_data_segment_), 0);

	call hcs_$status_mins (pv, 0, bc, code);
	if code = 0
	then do;
		oi.version_number = object_info_version_2;
		call object_info_$brief (pv, bc, addr (oi), code);
		if code = 0
		then dtmc = oi.symbp -> std_symbol_header.object_created;
	     end;

	hp = putp;
	hp -> std_symbol_header.dcl_version = 1;
	hp -> std_symbol_header.identifier = "symbol_t";
	hp -> std_symbol_header.gen_number = 1;
	hp -> std_symbol_header.gen_created = dtmc;
	hp -> std_symbol_header.object_created = now;
	hp -> std_symbol_header.generator = "cds";
	next = size (std_symbol_header);
	putp = addrel (hp, next);
	call putstr ("create_data_segment_, Version II of "
	     || date_time_$format ("^dn, ^mn ^dm, ^9999yc", dtmc, "", ""), hp -> std_symbol_header.gen_version,
	     rlocp -> std_symbol_header.gen_version);
	call putstr (rtrim (get_group_id_ ()), hp -> std_symbol_header.userid, rlocp -> std_symbol_header.userid);

putstr:
     proc (str, struc, rstruc);

	dcl     1 struc		 unaligned,
		2 (of, sz)	 bit (18);
	dcl     1 rstruc		 unaligned,
		2 (rof, rsz)	 bit (18);
	dcl     str		 char (*);

	sz = bit (bin (length (str), 18), 18);
	wordl = divide (length (str) + 3, 4, 17, 0);
	rof, rsz = rc_a;				/* I take no responsibility for this lie */
	copylen = length (str);
	putp = addrel (hp, next);
	of = bit (bin (bin (rel (putp), 18) - bin (rel (hp), 18), 18), 18);
	putp -> strcopy = str;
	next = next + wordl;
	putp = addrel (hp, next);
     end putstr;

/* copy other guy's source map */

	cp = ptr (cp, 0);
	call hcs_$status_mins (cp, 0, bc, code);
	if code = 0
	then do;
		oi.version_number = object_info_version_2;
		call object_info_$brief (cp, bc, addr (oi), code);
	     end;

	osymp = oi.symbp;
	osmp = addrel (osymp, osymp -> std_symbol_header.source_map);
	next = next + mod (next, 2);			/* source map gotta be even */
	hp -> std_symbol_header.source_map = bit (bin (next, 18), 18);
	putp = addrel (hp, next);
	smp = putp;
	smp -> source_map.version = osmp -> source_map.version;
	smp -> source_map.number = osmp -> source_map.number;
	smrcp = ptr (rlocp, next);
	n = smp -> source_map.number;
	next = size (smp -> source_map) + next;
	putp = addrel (hp, next);
	do i = 1 to smp -> source_map.number;
	     strc1p = addrel (osymp, osmp -> source_map.offset (i));
	     strcopy1l = bin (osmp -> source_map.size (i), 18);
	     call putstr (strcopy1, smp -> source_map.pathname (i), smrcp -> source_map.pathname (i));
	     smp -> source_map.dtm (i) = osmp -> source_map.dtm (i);
	     smp -> source_map.uid (i) = osmp -> source_map.uid (i);
	end;

/* generate symbol section relocation */

	rp = scrps (SYMR);
	rp -> std_symbol_header.source_map, rp -> std_symbol_header.area_pointer, rp -> std_symbol_header.rel_text,
	     rp -> std_symbol_header.rel_def, rp -> std_symbol_header.rel_symbol, rp -> std_symbol_header.rel_link =
	     rc_s;

	hp -> std_symbol_header.maxi_truncate, hp -> std_symbol_header.mini_truncate = bit (bin (next, 18), 18);
	hp -> std_symbol_header.text_boundary, hp -> std_symbol_header.stat_boundary = bit (bin (2, 18), 18);
	putp = addrel (hp, next);
	if ^movdef
	then do;
		call relbits (hp -> std_symbol_header.rel_text, tsize, scrps (TXTR));
		call relbits (hp -> std_symbol_header.rel_def, dsize, scrps (DEFR));
		call relbits (hp -> std_symbol_header.rel_link, lsize, scrps (LNKR));
		call relbits (hp -> std_symbol_header.rel_symbol, (next), scrps (SYMR));
	     end;
	sysize = next;
	ojnxt = ojnxt + next;

/* generate the object_map */

	putp = ptr (sgp, ojnxt);
	unspec (putp -> object_map) = "0"b;
	putp -> object_map.decl_vers = object_map_version_2;
	putp -> object_map.identifier = "obj_map";
	putp -> object_map.text_length = bit (bin (tsize, 18), 18);
	putp -> object_map.definition_offset = bit (bin (drel, 18), 18);
	putp -> object_map.definition_length = bit (bin (dsize, 18), 18);
	putp -> object_map.linkage_offset = bit (bin (lrel, 18), 18);
	if movdef
	then putp -> object_map.linkage_length = bit (bin (lsize + dsize, 18), 18);
	else putp -> object_map.linkage_length = bit (bin (lsize, 18), 18);
	if ssize > 0
	then do;
		putp -> object_map.static_offset = bit (bin (srel, 18), 18);
		putp -> object_map.static_length = bit (bin (ssize, 18), 18);
		putp -> object_map.separate_static = "1"b;
	     end;
	else do;
		putp -> object_map.static_offset = bit (bin (lrel + size (virgin_linkage_header), 18), 18);
		putp -> object_map.static_length = bit (bin (lsize - size (virgin_linkage_header), 18), 18);
	     end;
	putp -> object_map.symbol_offset = bit (bin (syrel, 18), 18);
	putp -> object_map.symbol_length = bit (bin (sysize, 18), 18);
	putp -> object_map.break_map_offset, putp -> object_map.break_map_length = "0"b;
	putp -> object_map.standard = "1"b;
	putp -> object_map.relocatable = ^movdef;
	putp = addrel (putp, size (object_map));
	next = bin (rel (putp), 18);
	putp -> map_ptr = bit (bin (next - size (object_map), 18), 18);
	next = next + 1;
	call tssi_$finish_segment (sgp, 36 * next, "1"b, aclip, code);
	aclip = null;
	if code ^= 0
	then call com_err_ (code, myname, "Finishing up segment.");

	call clupper;

	return;

find_runtime_symbol_node:
     procedure (section, structure_name) returns (ptr);

	dcl     section		 char (*);	/* (Input) */
	dcl     structure_name	 char (*) aligned;	/* (Input) */

	dcl     node		 ptr;

	dcl     stufail		 (-5:-1) char (32) internal static options (constant)
				 initial ("Symbol reference is ambiguous", "No declaration found",
				 "Name too long", "More than 64 structure levels", "Block pointer is null");

	node = stu_$find_runtime_symbol (block_ptr, rtrim (structure_name), null, stucode);
	if stucode < 0
	then do;
		call com_err_ (0, myname, "^a for ^a section structure ^a", stufail (stucode), section,
		     structure_name);
		goto tranfai;
	     end;

	if node -> runtime_symbol.son = ""b
	then do;
		call com_err_ (0, myname, "Symbol ^a for ^a section is not a structure.", structure_name, section);
		goto tranfai;
	     end;

	if node -> runtime_symbol.ndims ^= ""b
	then do;
		call com_err_ (0, myname, "Symbol ^a for ^a section is an array.", structure_name, section);
		goto tranfai;
	     end;

	return (addrel (node, node -> runtime_symbol.son));
     end find_runtime_symbol_node;

/* The great relocation hacker */

relbits:
     proc (relans, words, rptr);
	dcl     rhp		 ptr;
	dcl     relans		 bit (18) unal,
	        words		 fixed bin (18),
	        rptr		 ptr;
	dcl     bitstr		 bit (1000000) based (putp) aligned;
	dcl     bitpos		 fixed bin init (1);

	putp -> relinfo.decl_version = 2;
	rhp = putp;
	next = next + size (relinfo);
	putp = addrel (hp, next);

	do i = 0 to words - 1;
	     call irloc (rptr -> rloc (i).l);
	     call irloc (rptr -> rloc (i).r);
	end;

irloc:
     proc (rfld);
	dcl     rfld		 bit (18) unaligned;
	if rfld = "0"b
	then do;
		substr (bitstr, bitpos, 1) = "0"b;
		bitpos = bitpos + 1;
	     end;
	else do;
		substr (bitstr, bitpos, 5) = substr (rfld, 14, 5);
		bitpos = bitpos + 5;
	     end;
     end irloc;

	rhp -> relinfo.n_bits = bitpos - 1;
	bitpos = bitpos + mod (bitpos, 36);
	bitpos = divide (bitpos, 36, 18, 0);
	next = next + bitpos;
	relans = bit (bin (bin (rel (rhp), 18) - bin (rel (hp), 18), 18), 18);
	putp = addrel (putp, bitpos);
     end relbits;

     end create_data_segment_;
