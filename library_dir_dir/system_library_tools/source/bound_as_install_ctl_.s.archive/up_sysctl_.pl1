/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
up_sysctl_:
     procedure (bv_msg_ptr);

/* Update System Control = Event-call driven proc which executes as part of the
   answering service in the system control process. It is invoked by an event
   signal indicating that installation of a system table is requested. It locates the
   appropriate table in a special directory  whose name is "update" and which is appended
   to the current system directory  (i.e.,  sysdir || ">update"), and after proper validation
   installs the table in its appropriate place.

   Initially coded by Michael J. Spier, February 13, 1970
   Revised 10/70 THVV
   Modified 6/72 to give project administrators access to their PDT. J. Phillipps
   Modified 741029 by PG to handle authorization-only updates, etc.
   Modified 760804 by THVV for sending mail
   Modified 03/16/78 by C. D. Tavares to add up_rtdt_
   Modified May 1978 by T. Casey to lengthen answer from up_xxx_ and print it if nonblank, even for successful installs.
   Modified 25 Sept 1979 by T. Casey to make max installs settable and to log all wakeups.
   Modified March 1980 by T. Casey to add metering.
   Modified June 1981 by T. Casey for MR9.0 to do only one install per wakeup.
   Modified July 1981 by E. N. Kittlitz for better proj_admin_seg error handling.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified December 1981, E. N. Kittlitz.  eliminate proj_admin_seg by publishing IPC channel in whotab.
   Modified December 1981 B. I. Margulies to eliminate ttt installations.
   Modified February 1982, E. N. Kittlitz.  part of the xxx.install.acs changes.
   Modified April 1982, E. N. Kittlitz. set ring brackets on the segment.
   Modified May 1982, E. N. Kittlitz. New AS initialization.
   Modified:
   10/05/84 by R. Michael Tague:  Changed $check_acs to use as_data_$acsdir
   as the containing directory for the ACS segments and to return a bit (36)
   mode value instead of fixed bin (5).
   Modified 1984-10-09 BIM to fix above to return standard bit(36) modes.
   Modified 1985-04-19 E. Swenson to fix any_other handler.
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */

/* NOTE NOTE NOTE: this program depends on star_ returning things
   in the order they were appended to the directory.  This should
   be changed.  The wakeup from the user should contain the UID of
   the segment, and there should be some protection for lost wakeups.
   --enk
*/

/* parameters */

declare  bv_msg_ptr ptr parameter;

/* entries */

dcl  (as_meter_$enter, as_meter_$exit) entry (fixed bin);
dcl  asu_$find_process entry (bit (36) aligned, fixed bin, ptr);
dcl  sys_log_$error_log entry options (variable);
dcl  condition_ entry (char (*), entry);
dcl  reversion_ entry (char (*));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  freen_ entry (ptr);				/* subr. to release storage allocated by star */
dcl  get_group_id_ entry () returns (char (32));		/* returns my access name */
dcl  get_process_id_ entry () returns (bit (36));		/* returns my processid */
dcl  as_dump_ entry (char (*) aligned);
dcl  get_system_free_area_ entry (ptr);
dcl  sys_log_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ios_$order entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$mask_ev_calls entry (fixed bin (35));		/* keeps stuff from happening */
dcl  ipc_$unmask_ev_calls entry (fixed bin (35));		/* lets it happen again */
dcl  (up_pdt_, up_sat_, up_mgt_, up_cdt_, up_rtdt_) entry (ptr, fixed bin,
	char (*), char (*), ptr, ptr, ptr, char (*), fixed bin (35));

dcl  hcs_$replace_acl entry (char (*), char (*), ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$get_access_class entry (char (*), char (*), bit (72), fixed bin (35));
dcl  hcs_$get_author entry (char (*), char (*), fixed bin, char (*) aligned, fixed bin (35));
dcl  hcs_$get_user_access_modes entry (char (*), char (*), char (*), fixed bin, bit (36) aligned, bit (36) aligned,
	fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24),
	fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2),
	fixed bin (24), fixed bin (35));
dcl  hcs_$wakeup entry (bit (*) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hphcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  send_mail_$access_class entry (char (*), char (*), ptr, bit (72), fixed bin (35));

dcl  (addr, clock, divide, fixed, length, null, rtrim, substr, unspec) builtin;

/* DECLARATION OF EXTERNAL STATIC VARIABLES */

dcl  error_table_$messages_deferred fixed bin (35) ext;
dcl  error_table_$messages_off fixed bin (35) ext;

/* DECLARATION OF INTERNAL STATIC VARIABLES */

dcl  areap ptr init (null);
dcl  maildir char (168) int static;			/* name of update dir */
dcl  1 acla (1) int static aligned,			/* Handy canned ACL: 1st element is for sysctl */
       2 userid char (32),				/* (my name) */
       2 mode bit (36),
       2 rpad bit (36) init ("0"b),
       2 rcode fixed bin (35);

dcl  ring_brackets (3) fixed bin (3) int static init (7, 7, 7) options (constant);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  idir char (168);				/* Not used. */
dcl  iname char (32);				/* Name of table installed. */
dcl  update_program variable entry (ptr, fixed bin, char (*), char (*),
	ptr, ptr, ptr, char (*), fixed bin (35));
dcl  (i, j, k, n_branches, wordcount) fixed bin;
dcl  code fixed bin (35);
dcl  bitcount fixed bin (24), type fixed bin (2);
dcl  short char (8) aligned, long char (100) aligned;
dcl  message char (200);
dcl  failed bit (1) init ("1"b);
dcl  hisid char (32) aligned;				/* author of table */
dcl  (iptr, bptr, nptr) ptr;				/* ptrs */
dcl  segp ptr;					/* ptr to segment. */
dcl  mailseg char (32);				/* always "**" */
dcl  status bit (72) aligned;				/* IOS status */
dcl  his_auth bit (72);				/* Sender access class */
dcl  name char (4) aligned;				/* kind of table (PDT, etc) */
dcl  answer char (160) init ("");			/* result from installer */
dcl  n_installs fixed bin;
dcl  deferred bit (1) aligned;
dcl  wakeup_msg char (8);				/* copy of message in wakeup data */
dcl  (n_deferred, n_pending) fixed bin;			/* counters for defered and pending installs */

/* based */

declare  1 event based (bv_msg_ptr) aligned,
	 2 event_channel fixed bin (71),
	 2 event_message fixed bin (71),
	 2 sending_process_id bit (36),
	 2 device_signal bit (18) unaligned,
	 2 sending_ring bit (18) unaligned,
	 2 data_ptr ptr;

declare  event_string char (8) based (addr (event.event_message));
dcl  1 branch (20) based (bptr) aligned,		/* structure returned by star */

       (2 type bit (2),				/* segment type */
       2 nname bit (16),				/* number of names */
       2 nindex bit (18)) unaligned;			/* index of first */

dcl  names (30) char (32) aligned based (nptr);		/* names returned by star */

dcl  1 tbl aligned based (segp),			/* dummy declaration of table */
%include author;
	2 dummy;
%page;
	if ^sc_stat_$Multics then return;		/* not initialized */
	ansp = as_data_$ansp;
	anstbl.current_time = clock ();

	call as_meter_$enter (INSTALL_METER);
	call ipc_$mask_ev_calls (code);		/* no recursive updating */

/* See what kind of wakeup we got */

	if event.event_message = 0 then		/* the install command presently sends a zero message */
	     wakeup_msg = "install";			/* pretend it can speak English */
	else wakeup_msg = event_string;		/* copy real message using char overlay */

/* We can't do an install when the anstbl is locked - we might be replacing a table out from under dialup_ */

	if anstbl.lock_count > 0 then do;		/* are we busy? */
	     anstbl.update_pending = "1"b;		/* someone is logging in. we'll get back to this */
	     call sys_log_ (sv, "up_sysctl_: ^a wakeup with anstbl locked", wakeup_msg);
	     go to unmask_return;			/* but give up for now */
	end;
	else anstbl.update_pending = "0"b;		/* clear pending flag. */

/* Initialize a few variables. */

	unspec (send_mail_info) = "0"b;
	send_mail_info.version = 1;
	send_mail_info.wakeup = "1"b;
	send_mail_info.always_add = "1"b;
	send_mail_info.sent_from = "install";
	mailseg = "**";				/* set up name of update dir & look for anything */
	call get_system_free_area_ (areap);
	bptr, nptr = null;

/* Before listing the update directory, we'll drain the event channel.
   That way, we won't lose wakeups that arrive after we have started processing. */

	call ipc_$drain_chn (anstbl.update_channel, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);		/* it better not say "there were none" */
	     call sys_log_$error_log (1, code, "up_sysctl_", "draining update channel.");
	end;					/* what else can we do but go on? */

/* List the update directory. All segments in it are tables to be installed. */

	call hcs_$star_ (maildir, mailseg, 10b, areap, n_branches, bptr, nptr, code);
	if code ^= 0 then n_branches = 0;		/* if directory empty, false alarm */
	if n_branches = 0 | sv > 0 then do;		/* if it is empty, or we're in debug mode, log the wakeup */
	     if n_branches = 0 then			/* log potential harrassment */
		call asu_$find_process (event.sending_process_id, (0), utep);
	     else utep = null;
	     if utep = null then
		call sys_log_ (sv, "up_sysctl_: ^a wakeup with ^d installs pending", wakeup_msg, n_branches);
	     else call sys_log_ (sv, "up_sysctl_: ^a wakeup from ^a.^a with ^d installs pending", wakeup_msg, ute.person, ute.project, n_branches);
	end;

	if n_branches = 0 then goto update_return;	/* quit if nothing to do */

	n_deferred, n_pending = 0;			/* clear counters */
	n_installs = 0;				/* we'll count installs against our limit per wakeup */

/* Since we're not going to try to do all the installs at once, we want to take them in the order
   in which they were requested - oldest first. hcs_$star returns them in that order. */

	do i = 1 to n_branches;			/* go thru entries in update directory */
	     j = fixed (branch (i).nindex, 17);		/* where's a name? */
	     mailseg = names (j);			/* what's in a name? */
	     call condition_ ("any_other", ucs);	/* Set up a handler in case of a fault. */

	     call hphcs_$set_ring_brackets (maildir, mailseg, ring_brackets, code); /* try to get it. ignore failure */
	     call hcs_$replace_acl (maildir, mailseg, addr (acla), 1, "0"b, code);
	     if code ^= 0 then go to try_next;		/* make sure nobody has access to segment */

	     failed = "1"b;
	     deferred = ""b;
	     idir, iname, answer = " ";		/* clear args to update proc */

/* Initiate the table to be installed. */

	     call hcs_$initiate_count (maildir, mailseg, "", bitcount, 0, segp, code);

	     if segp ^= null then do;			/* segment must be there... */
		wordcount = divide (bitcount + 35, 36, 17, 0);
		name = tbl.author.table;		/* obtain kind of segment */

/* Check author's ID and acces class. */

		call hcs_$get_access_class (maildir, mailseg, his_auth, code);
		if code ^= 0 then go to flop;
		call hcs_$get_author (maildir, mailseg, 1, hisid, code);
		if code ^= 0 then go to flop;		/* obtain true author of seg. */
		if tbl.author.proc_group_id ^= hisid then do;
		     answer = "userid should be " || tbl.author.proc_group_id;
		     go to signal;
		end;

/* See what kind of table it is. */

		if name = "SAT " then update_program = up_sat_;
		else if name = "PDT " then update_program = up_pdt_;
		else if name = "MGT " then update_program = up_mgt_;
		else if name = "CDT " then update_program = up_cdt_;
		else if name = "RTDT" then update_program = up_rtdt_;
		else do;				/* Unknown table type. */
		     answer = "Invalid table type " || name;
		     go to signal;
		end;

/* Check for installs (all or PDT) suspended */

		if max_installs = 0 | (name = "PDT" & NO_PDT_sw) then do; /* if this one must be deferred */
		     if tbl.author.deferral_notified then do; /* if we already notified then do; the installer */
			n_deferred = n_deferred + 1;	/* count defered installs for later message to operator */
			goto try_next;		/* go see if there is anything else to do */
		     end;

		     deferred = "1"b;		/* tell following code we deferred this one */
		     goto signal;			/* go build message saying what happened */
		end;

/* We're going to try to install this one. Trying takes as much time, whether it succeeds or fails,
   so we'll count the attempt against our limit of installs per wakeup */

		n_installs = n_installs + 1;

/* Here's where we actually do the install. */

		call update_program (segp, wordcount, idir, iname, iptr, ansp, ip, answer, code);

/* Now, see how it turned out */

flop:		if code = 0 then failed = "0"b;
		else do;				/* Otherwise, fuss. */
		     if answer = "" then do;		/* See if can be explained. */
			call convert_status_code_ (code, short, long);
			answer = long;
		     end;
		end;
signal:		call reversion_ ("any_other");

/* Build a message saying what we did. */

		if iname = "" then iname = name;	/* Make name of segment */

		if deferred then do;		/* if we deferred it, say that */
		     call ioa_$rsnnl ("Installation of ^a for ^a deferred;", message, j, iname, hisid);
		     tbl.author.deferral_notified = "1"b; /* remember that we notified the installer */
		     n_deferred = n_deferred + 1;	/* count deferred installs for later message to operator */
		end;

		else if failed then			/* or if there was an error, say that */
		     call ioa_$rsnnl ("Unable to install ^a for ^a. ^a", message, j,
			iname, hisid, answer);

		else				/* or if we succeeded, say that */
		     call ioa_$rsnnl ("Installed ^a for ^a^[^;^x^a^].", message, j, iname, hisid,
			(answer = ""), answer);	/* a successful install can sometimes produce a warning message */

/* Tell the operator what we did. */

		n_pending = n_branches - i + n_deferred;/* # not looked at + # deferred */
		call sys_log_ (1, "up_sysctl_: ^a^[^x(^d pending)^]", message, (n_pending > 0), n_pending);

/* Tell the installer what we did. */

		k = length (rtrim (hisid)) - 2;	/* length of "Person.Project" without the ".a" */
		call send_mail_to_installer;
		if code ^= 0
		     & code ^= error_table_$messages_off
		     & code ^= error_table_$messages_deferred
		then call sys_log_$error_log (0, code, "up_sysctl_",
			"unable to notify ^a of installation of ^a", hisid, iname);

/* If we deferred his install, send him an additional explanatory message.
   (It's pointless to repeatedly print the explanation as part of the operator message.)
   If we got a serious error sending the first message, we won't bother sending the second one. */

		else				/* if we did not get a serious error sending the first message */
		     if deferred then do;		/* and it was deferred, send the second message */
		     call ioa_$rsnnl ("^[all^;PDT^] installs are suspended - please do not re-issue install command.",
			message, j, (max_installs = 0));
		     call send_mail_to_installer;
		end;

/* Delete the table from the update directory */

		if ^deferred then			/* unless we deferred this installation */
		     call hcs_$delentry_seg (segp, code); /* delete the segment */
	     end;					/* end segment successfully initiated */
try_next:
	     if n_installs >= max_installs then		/* if we have installed our limit */
		if max_installs > 0 then		/* (and the limit isn't zero) */
		     goto more_later;		/* get out of the loop for now */

	end;					/* end loop thru entries in update directory */

more_later: if i < n_branches then			/* if we had not gotten to the last entry */
	     call send_upsysctl_wakeup;		/* send ourselves a wakeup, to do the rest later */
	else					/* if we aren't coming back for a while */
	     if n_deferred > 0 then			/* if there are deferred installs, nag a little */
	     call sys_log_ (1, "up_sysctl_: ^[all^;PDT^] installs are suspended; ^d pending",
		(max_installs = 0), n_deferred);

update_return:
	if bptr ^= null then call freen_ (bptr);	/* clean up free storage */
	if nptr ^= null then call freen_ (nptr);	/* ... */
unmask_return:
	code = 0;					/* get unmasked */
	do i = 1 to 100 while (code = 0);		/* .. so more logins can go */
	     call ipc_$unmask_ev_calls (code);		/* .. */
	     if i > 1 then
		if code = 0 then call ioa_ ("up_sysctl_: error - event calls were masked");
	end;
	call as_meter_$exit (INSTALL_METER);
	return;					/* all done. */

/* We transfer to this label if an unclaimed signal occurs */

cleanup:
	if segp ^= null then do;			/* do we have a user segment? */
	     if answer = "" then answer = "fault";
	     go to signal;				/* tell him we couldn't */
	end;
	else go to update_return;			/* no segment, just give up */

send_mail_to_installer: proc;

	call send_mail_$access_class (substr (hisid, 1, k), substr (message, 1, j), addr (send_mail_info),
	     his_auth, code);
	return;
     end send_mail_to_installer;
send_upsysctl_wakeup: proc;				/* to send ourselves a wakeup to keep installs going */

dcl  upsysctl_msg fixed bin (71) aligned;		/* argument to hcs_$send_wakeup */
dcl  upsysctl_string char (8) based (addr (upsysctl_msg));	/* overlay to store chars in it */

	upsysctl_string = "upsysctl";
	call hcs_$wakeup (anstbl.as_procid, anstbl.update_channel, upsysctl_msg, code);
	if code ^= 0 then
	     call sys_log_$error_log (1, code, "up_sysctl", "Sending upsysctl wakeup");

	return;

     end send_upsysctl_wakeup;

set_max_installs: entry;				/* FOR EMERGENCY USE ONLY */

dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  argp ptr, argl fixed bin, arg char (argl) based (argp);
dcl  (argno, nargs) fixed bin;
dcl  cv_dec_check_ entry (char (*) aligned, fixed bin (35)) returns (fixed bin (35));
dcl  max_installs fixed bin int static init (1);		/* default is 1 install per wakeup; zero shuts off all installs */
dcl  NO_PDT_sw bit (1) aligned int static init (""b);	/* "1"b shuts off just PDT installs */
dcl  sv fixed bin int static init (0);			/* severity of log messages */

	nargs = cu_$arg_count ();
	if nargs = 0 then
	     call sys_log_ (-1, "USAGE: set_max_installs 0|1|-pdt_off|-pdt_on| -loud|-quiet");
	else do argno = 1 to nargs;			/* go thru all arguments */
	     call cu_$arg_ptr (argno, argp, argl, code);	/* look at next argument */
	     if arg = "-pdt_off" then			/* in desperate situations */
		NO_PDT_sw = "1"b;			/* administrator can shut off PDT installs */
	     else if arg = "-pdt_on" then do;		/* hopefully he remembers to turn them back on */
		if NO_PDT_sw then			/* if we're actually turning them back on */
		     call send_upsysctl_wakeup;	/* send ourselves a wakeup to get them started */
		NO_PDT_sw = ""b;
	     end;
	     else if arg = "-loud" then sv = 1;		/* for debugging */
	     else if arg = "-quiet" then sv = 0;	/* back to normal */
	     else do;				/* must be a number */
		i = cv_dec_check_ ((arg), code);
		if (code ^= 0) | (i < 0) | (i > 1) then
		     call sys_log_ (-1, "set_max_installs: ^a is not 0 or 1", arg);
		else do;
		     if max_installs = 0 & i = 1 then	/* if we're actually turning installs back on */
			call send_upsysctl_wakeup;	/* send ourselves a wakeup to get them started */
		     max_installs = i;
		end;				/* end it is 0 or 1 */
	     end;					/* end must be a number */
	end;					/* end loop thru arguments */
	return;
%page;
/* Procedure which is called by "signal_" if any unclaimed fault comes up. */

ucs: proc (mc_ptr, condition, crawlout, infoptr, contin);

dcl  mc_ptr ptr parameter;
dcl  condition char (*) parameter;
dcl  crawlout ptr parameter;
dcl  infoptr ptr parameter;
dcl  contin bit (1) parameter;

dcl  mbuf char (120) aligned, mlth fixed bin;
dcl  non_local_exit bit (1);
dcl  as_check_condition_ entry (char (*), bit (1), bit (1));

	call as_check_condition_ (condition, contin, non_local_exit);
	if contin | non_local_exit then
	     return;

	if iname ^= " " then do;			/* we know what we were doing at fault time */
	     call ioa_$rsnnl ("up_sysctl_: ^a installing ^a for ^a", mbuf, mlth,
		condition, iname, tbl.author.proc_group_id);
	end;
	else call ioa_$rsnnl ("up_sysctl_: Error ^a", mbuf, mlth, condition);

	call sys_log_ (2, "^a", mbuf);
	call as_dump_ (mbuf);
	call ios_$order ("user_i/o", "start", null, status);
	answer = condition;
	go to cleanup;				/* Fall down, gracefully. */

     end ucs;
%page;
/* Access checking entry, used by up_xxx_ programs.
   Determines effective access of installer to >instaldir>xxx.install.acs.
   If the segment does not exist, it is created.
*/

check_acs: entry (a_acs_name, a_group_id, a_ring, a_mode, a_code);

dcl  a_acs_name char (*);
dcl  a_group_id char (*);
dcl  a_ring fixed bin;
dcl  a_mode bit (36) aligned;
dcl  a_code fixed bin (35);
						/* AIM? what's that? */
	call hcs_$get_user_access_modes (as_data_$acsdir, a_acs_name, a_group_id, a_ring, a_mode, ""b, a_code);
	if a_code = error_table_$noentry then begin;
dcl  rings (3) fixed bin (3) init (5, 5, 5);
						/* note: we presume process is system_low */
						/* (not that it's likely to matter) */
	     call sys_log_ (1, "up_sysctl_$check_acs: ^a not found. It will be created.", pathname_ (as_data_$acsdir, a_acs_name));
	     call hcs_$append_branchx (as_data_$acsdir, a_acs_name, RW_ACCESS_BIN, rings, "*.SysAdmin.*", 0, 0, 0, code);
	     if code ^= 0 then do;
		call sys_log_$error_log (1, code, "up_sysctl_$check_acs", "Unable to create ^a.", pathname_ (as_data_$acsdir, a_acs_name));
		a_mode = "0"b;
		return;
	     end;
	     call hcs_$get_user_access_modes (as_data_$acsdir, a_acs_name, a_group_id, a_ring, a_mode, ""b, a_code);
	end;
	return;


/* Initialization entry to setup segments used to hold event channels for
   installing new tables.

   PG 741101
*/

init: entry;

/* automatic */

declare  sat_ptr ptr,
         group_id char (32),
         process_id bit (36);

/* entries */

declare  convert_ipc_code_ entry (fixed bin (35));
declare  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
declare  as_add_admin_acl_$dir entry (char (*), char (*), ptr, entry, bit (*), fixed bin (35));
declare  hcs_$append_branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
declare  sub_err_ entry () options (variable);
declare  up_sysctl_$up_sysctl_ entry ();

/* external static */

declare  error_table_$noentry fixed bin (35) ext static;
declare  error_table_$out_of_sequence fixed bin (35) ext static;

/* program */

	if ^sc_stat_$Multics_typed | sc_stat_$Go_typed then do;
	     code = error_table_$out_of_sequence;
	     go to init_sub_error;
	end;
	ansp = as_data_$ansp;

	process_id = get_process_id_ ();
	group_id = get_group_id_ ();

	maildir = rtrim (anstbl.sysdir) || ">update";
	acla (1).userid = group_id;			/* set up canned ACL */
	acla (1).mode = "101"b;

/* First make sure the installation "update" directory is present. */

	call hcs_$status_minf (anstbl.sysdir, "update", 1, type, bitcount, code);
	if code = error_table_$noentry then do;		/* not there, try to create */
	     type = 2;				/* we are creating a directory */

	     call hcs_$append_branchx (anstbl.sysdir, "update", 01011b /* SMA */, ring_brackets,
		group_id, 1b, 0b, 0, code);
	     if code = 0 then
		call as_add_admin_acl_$dir (anstbl.sysdir, "update", sat_ptr, hcs_$add_dir_acl_entries,
		     "001"b /* A */, code);
	end;

	if (code ^= 0) | (type ^= 2) then do;
	     call sys_log_$error_log (2, code, "up_sysctl_$init", "Cannot find/create ^a>update", anstbl.sysdir);
	     go to init_sub_error;
	end;

/* create and publish IPC channel for installation wakeups */

	call ipc_$create_ev_chn (anstbl.update_channel, code);
	if code ^= 0 then go to ipc_failed;

	call ipc_$decl_ev_call_chn (anstbl.update_channel, up_sysctl_$up_sysctl_, null, INSTALL_PRIO, code);
	if code ^= 0 then go to ipc_failed;
	whotab.installation_request_pid = process_id;
	whotab.installation_request_channel = anstbl.update_channel;

	return;

ipc_failed:
	call convert_ipc_code_ (code);		/* convert non-standard ipc code to std code */
	call sys_log_$error_log (2, code, "up_sysctl_$init", "Cannot make IPC channel.");
init_sub_error:
	call sub_err_ (code, "up_sysctl_$init", "s");


%page; %include access_mode_values;
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_meter_numbers;
%page; %include as_wakeup_priorities;
%page; %include sc_stat_;
%page; %include send_mail_info;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page;
%include whotab;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   up_sysctl_: error - event calls were masked

   S:	sc (error_output)

   T:	$run

   M:	$err
   The system attempts to recover and keep running.

   A:	$notify


   Message:
   up_sysctl_: CONDITION installing TABLE for USER

   S:	as (severity1)

   T:	$run

   M:	Some unexpected error occurred while installing a system
   table.  An Answering Service dump was performed.  Further attempts to install
   system tables may fail until a reset or force is done, but
   logins and logouts should be able to proceed normally.

   A:	$inform_sa


   Message:
   up_sysctl_: Error: REASON

   S:	as (severity2)

   T:	$run

   M:	Some error occurred while installing a system table.
   An Answering Service dump was performed.  Further attempts to install
   system tables may fail until a force or reset is done,
   but logins and logouts should be able to proceed as usual.

   A:	$inform_sa


   Message:
   up_sysctl_$init: ERROR_MESSAGE. cannot find/create >system_control_1>update

   S:	as (severity2)

   T:	$init

   M:	The directory used to update system tables is missing and cannot be created.  No
   installations of new system tables cannot be done.  Logins and logouts
   can go on as usual.

   A:	$inform_sa


   Message:
   up_sysctl_$init: ERROR_MESSAGE. Cannot make IPC channel.

   S:	as (severity2)

   T:	$init

   M:	It was not possible to establish the IPC channel which is used
   to allow users to indicate that an Answering Service table installation
   is to be performed. Installations will not occur.

   A:	$inform_sa


   Message:
   up_sysctl_: Unable to install TABLE for USERID. userid should be USERID1

   S:	as (severity1)

   T:	$run

   M:	A user attempted to install a system table by pretending
   to be some other user.

   A:	$inform_sa


   Message:
   up_sysctl_: Unable to install TABLE for USERID. TEXT

   S:	as (severity1)

   T:	$run

   M:	The user USERID attempted to change the system table
   TABLE but something was wrong.  The reason is given by TEXT.

   A:	$ignore


   Message:
   up_sysctl_: installed TABLE for USERID

   S:	as (severity1)

   T:	$run

   M:	An mgt, sat, cdt, pdt, or rtdt has been installed.

   A:	$ignore


   Message:
   up_sysctl_: NAME wakeup with N installs pending
   up_sysctl_: NAME wakeup from PERSON.PROJECT with N installs pending

   S:	as (severity0)

   T:	$run

   M:	A request to perform a table installation was received.  There were
   N tables found ready for installation at the time of the wakeup.
   If N is 0, the PERSON.PROJECT of the originator of the request is also
   logged.  This message is normally severity0, but the administrator may
   cause it to be severity1.

   A:	$contact
   The administrator may request that he be notified if this occurs.  If a large
   number of these messages are logged with N = 0, it may indicate that a
   user is harassing the installation mechanism.


   Message:
   up_sysctl_$check_acs: PATHNAME not found. It will be created.

   S:     as (severity1)

   T:     $run

   M:     The named segment, which controls a table installation operation,
   does not exist.  The segment will be created with an ACL allowing
   *.SysDaemon.* and *.SysAdmin.* to perform the appropriate table installation.

   A:     $contact
   The system administrator should be notified, so that the ACL of the segment
   may be adjusted to reflect those users that may install the table.


   Message:
   up_sysctl_$check_acs: MESSAGE. Unable to create PATHNAME.

   S:      as (severity1)

   T:      $run

   M:      The named segment does not exist, and it was not possible to
   create it.  Any table installations controlled by this segment will
   be ignored.  (The table submitted for installation will be deleted.)

   A:       $notify
   Notify the system administrator.  Normal servicing of table installations
   will not proceed until this situation is rectified.

   END MESSAGE DOCUMENTATION */

     end up_sysctl_;
