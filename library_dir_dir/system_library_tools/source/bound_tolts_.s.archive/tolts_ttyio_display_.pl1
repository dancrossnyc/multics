/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
tolts_ttyio_display_: proc (event_ptr);

/*
   This procedure displays each line of a queued terminal io message and  is  driven  by  IPC
   call  channels.  The first call is initiated by the tolts_qttyio_ subroutine waking up the
   tty_issue_event channel. Further calls on this  event  channel  are  inhibited  until  the
   entire  message  has  been  displayed. After the first line of a message is displayed, all
   subsequent lines are output by waking up the tty_display_event  channel.  The  tty_display
   event  channel  will  call  the entry tolts_ttyio_display_$nxt_line until all lines of the
   message are output. After the last line of a  message  is  displayed,  the  event  channel
   tty_ccc_event is woken up. This calls the routine tolts_ttyio_end_ for message completion.
   Message  routing  is  determined  by  the  value  of  the  message   entry   page   number
   (mes_buf.page).  If the page number has a value from 0 to 9, then the message is routed to
   the user_output io switch. If the page number has a value greater than  or  equal  to  20,
   then  the  message  is  routed  to  the io switch defined by tolts_info.pf_iocbp. The page
   number is then corrected to its true value (0 to 9) before the tolts_ttyio_end_  entry  is
   signalled.
*/


/* External Entries */

dcl  hcs_$wakeup entry (bit (36) aligned,
	fixed bin (71), ptr, fixed bin (35));		/* arg 3 is suppose to be fixed bin (71) */
dcl  (com_err_, ioa_$ioa_switch_nnl) entry options (variable);
dcl  terminate_process_ entry (char (*), ptr);
dcl  ipc_$cutoff entry (fixed bin (71), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));

/* Entry Parameters */

dcl  event_ptr ptr;

/* Automatic */

dcl  (mep, iocbp) ptr;
dcl  page fixed bin;
dcl  error fixed bin (35);
dcl  npnl bit (1);

/* structures and based variables */

dcl  1 event_info based (event_ptr),
       2 causing_event fixed bin (71),
       2 cmp ptr,
       2 sender bit (36),
       2 origin,
         3 signal bit (18) unaligned,
         3 ring bit (18) unaligned,
       2 in_data_pointer ptr;


dcl  1 fatal_desc aligned,
       2 version fixed bin,
       2 fatal_code fixed bin (35);

dcl  1 mes_buf based (mep) aligned,			/* template for a message queue entry */
       2 page fixed bin,				/* test page number issuing io */
       2 nlines fixed bin,				/* number of array elements in message */
       2 cline fixed bin,				/* line number currently being displayed */
       2 lines (nlines) char (136),			/* array of message lines */
       2 nxt_mes char (1);				/* method to get to next message */

/* Builtins */

dcl  (addr, null) builtin;

/* Static */

dcl  (iox_$user_output, iox_$user_io) ptr ext;


	call ipc_$cutoff (tolts_info.tty_issue_event, error); /* inhibit further calls from tolts_qttyio_ */
	if error ^= 0 then do;
disaster:
	     call com_err_ (error, "tolts_ttyio_display_", "fatal error, terminating process");
	     fatal_desc.fatal_code = error;
	     fatal_desc.version = 0;
	     call terminate_process_ ("fatal_error", addr (fatal_desc));
	end;

/* entry to display more than one line (after first line) */

nxt_line: entry (event_ptr);

	mep = event_info.cmp;			/* copy message ptr */
	tolts_info.term_io_in_prog = "1"b;		/* set io in progress flag */
	if tolts_info.optflag ^= 0 then do;		/* has a quit been signalled? */
	     call wakeup (tolts_info.tty_ccc_event, "1"b);/* yes signal tolts_ttyio_end_ */
	     return;
	end;
	mes_buf.cline = mes_buf.cline + 1;		/* increment current line number */

/* determine if going to printer or terminel */

	page = mes_buf.page;			/* copy page number */
	if page >= 20 then do;			/* if printer flag set */
	     if tolts_info.pf_iocbp ^= null then	/* if print file iocb ptr good */
		iocbp = tolts_info.pf_iocbp;		/* output to print file switch */
	     else iocbp = iox_$user_output;		/* go to terminal */
	     page = page - 20;			/* get right page number */
	end;
	else iocbp = iox_$user_output;		/* otherwise go to terminal */

/* determine if line should end with newline character */

	npnl = "0"b;				/* default is to output new line */
	if page = 9 | page = 19 then			/* if exec read, no newline */
	     if mes_buf.cline = mes_buf.nlines then	/* and this is the last line of message */
		npnl = "1"b;
	     else ;
	else if page > 0 & page ^= 10 then		/* if not exec write */
	     if tolts_info.tadio (page).optrd then	/* and test page requesting options */
		if mes_buf.cline = mes_buf.nlines then	/* and this is the last line of message */
		     npnl = "1"b;			/* don't put out newline */
	call ioa_$ioa_switch_nnl (iocbp, "^a^[ ^;^/^]",
	     mes_buf.lines (mes_buf.cline), npnl);	/* display line */
	if mes_buf.cline = mes_buf.nlines | tolts_info.optflag ^= 0 then /* last line or quit? */
	     call wakeup (tolts_info.tty_ccc_event, "1"b);/* wake up tolts_ttyio_end_ */
	else call wakeup (tolts_info.tty_display_event, "0"b); /* otherwise, wakeup ourself */
	call iox_$control (iox_$user_io, "start", null, error); /* allow cleanup of any blocks */
	return;


/* wakeup - subroutine to wakeup requested event channel */

wakeup: proc (e_chan, last_line);

dcl  e_chan fixed bin (71);
dcl  last_line bit (1);

	if last_line then				/* if last line of message.... */
	     if mes_buf.page >= 20 then		/* and if printer output */
		mes_buf.page = mes_buf.page - 20;	/* correct page number for tolts_ttyio_end_ */
	call hcs_$wakeup (tolts_info.process, e_chan, mep, error); /* wakeup desired channel */
	if error ^= 0 then				/* if some problem... */
	     go to disaster;			/* terminate process */

     end wakeup;


%include tolts_info;

     end tolts_ttyio_display_;
