/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/*   Initial coding 79/03/05 By J. A. Bush
   Modified 10/84 to add delay for a dc_reset of the DAU.
*/




/****^  HISTORY COMMENTS:
  1) change(85-08-01,Fakoury), approve(86-08-22,MCR7514),
     audit(86-11-25,Martinson), install(86-12-04,MR12.0-1235):
     to correct a stringrange error.
                                                   END HISTORY COMMENTS */





/* tolts_load_firmware_ - subroutine to load mpc firmware for all mpc types,
   after ITRs have been run on that mpc, and is called from MME RELEAS   */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_load_firmware_: proc (px, a_error);


/* Entry parameters */

dcl  px fixed bin;					/* test page index */
dcl  a_error fixed bin (35);				/* return error code */

/* External entries */

dcl  ioi_$connect_pcw entry (fixed bin (12), fixed bin (18), bit (36), fixed bin (35));
dcl  ioi_$release_devices entry (fixed bin (12), fixed bin (35));
dcl  ioi_$workspace entry (fixed bin (12), ptr, fixed bin, fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  (ioa_$rsnnl, tolts_qttyio_$rs, opr_query_) entry options (variable);
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  tolts_util_$search entry (ptr, char (32), ptr, fixed bin, fixed bin (35));
dcl  gload_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
dcl  tolts_qttyio_ entry (char (*), fixed bin);
dcl  com_err_$convert_status_code_ entry (fixed bin (35), char (*), char (*));

/* Automatic */

dcl  (catx, cxs, i, j, l, c_len, css, csl, rws, rwl) fixed bin;
dcl  tio_off fixed bin (18);
dcl  error fixed bin (35);
dcl  (err, term) bit (1);
dcl  (t_ptr, l_ptr, idbp, top) ptr;
dcl  shortinfo char (8);
dcl  ov_name char (17);
dcl  longinfo char (100);

/* structures and based variables */

dcl  1 event_out static,
       2 causing_event fixed bin (71),
       2 message fixed bin (71),
       2 sender bit (36),
       2 origin,
         3 signal bit (18) unaligned,
         3 ring bit (18) unaligned,
       2 in_data_pointer ptr;

dcl  1 cata based (io_info.catp) aligned,		/* template for deckfile catalog */
       2 n fixed bin,				/* number of entries */
       2 key (1 refer (cata.n)) char (24);		/* array of key names */

dcl  1 id_blk based (idbp) aligned,			/* template for an mpc deck id block */
       (2 id_name bit (36),				/* BCD id name */
       2 rev_level bit (36),				/* BCD revision */
       2 dk_purpose bit (36),				/* BCD deck purpose */
       2 pad1 bit (36),
       2 rw_start fixed bin (18) unsigned,		/* offset of read/write overlay */
       2 pad2 bit (18),
       2 hx_cs_st fixed bin (18) unsigned,		/* rel. start of control store in hex words */
       2 hx_rw_st fixed bin (18) unsigned,		/* rel. start of read/write overlay in hex words */
       2 pad3 (3) bit (36),
       2 mpcbot bit (36)) unaligned;			/* = "MPCBOT" in BCD */

dcl  buffer (fixed (gload_data.text_len)) bit (36) based (top); /* for moving data to ioi buffer */
dcl  f_wd (10240) bit (36) based (l_ptr);		/* for moving data from temp buffer */

/* constants */

dcl  (addr, addrel, bin, bit, fixed, index, rel, string, substr) builtin;
dcl  error_table_$action_not_performed fixed bin (35) ext;
dcl  ipcw bit (36) int static options (constant) init ("000000770000"b3);
dcl  pcwa bit (36) int static options (constant) init ("000000700000"b3);
%page;
      a_error = 0;					/* preset return code to 0 */
      io_info_ptr = addr (pages (px));			/* get ptr to this test page */
      io_info.io_type = 4;				/* set type for interrupt processor */
      ioi_wksp = io_info.workspace_ptr;			/* get ptr to our workspace */
      tio_off = fixed (rel (addr (tolts_workspace.p_idcw)));/* get buffer offset for ioi */
      l_ptr = addr (tolts_info.firm_buf);		/* place to temp load firmware */
      top = addr (tolts_workspace.data_buf);		/* set ptr to move firmware */
      do catx = 1 to cata.n while (index (cata.key (catx), ".") < 6); /* find first fw module */
      end;
      call fw_load;					/* go load deck in temp buffer */
      if error ^= 0 then do;				/* if some problem, return */
err_1:   a_error = error;
         return;
      end;
      call dc_reset;				/* go send initialize pcw to mpc */
      if error ^= 0 then go to err_1;
      call copy_cs (0, err);				/* copy control store overlay */
      if err then do;				/* if any error ocurred */
err_2:   a_error = error_table_$action_not_performed;	/* set an apropriate error code */
         return;
      end;
      call run_dcw;					/* execute dcw list */
      if error ^= 0 then go to err_1;
      call copy_rw (err);				/* copy read/write overlay */
      if err then go to err_2;
      call run_dcw;					/* execute dcw list */
      if error ^= 0 then go to err_1;			/* get out on error */
      call fw_load_mess;				/* let user and operator know what has been loaded */
      if io_info.mpc_dev_cnt ^= 0 then do;		/* if urcmpc, load device overlays  */
         cxs = catx + 1;				/* save catalog index + 1 */
         do l = 1 to io_info.mpc_dev_cnt;		/* load each overlay type */
	  term = "0"b;				/* reset terminate condition */
	  do catx = cxs to cata.n while (^term);	/* find each key */
	     if substr (cata.key (catx), 15, 4) = io_info.dev_firm (l).edit_name then do; /* found it */
	        term = "1"b;			/* set terminate condition */
	        call fw_load;			/* go copy firmware overlay into temp storage */
	        if error ^= 0 then go to err_1;
	        call copy_cs (1, err);		/* copy control store (offset by 1 word */
	        if err then go to err_2;
	        idcw.command = "36"b3;		/* set overlay command */
	        idcw.device = "01"b3;			/* device code of 1 for device overlays */
	        idcw.chan_cmd = "40"b3;		/* special controller command */
	        buffer (1) = io_info.dev_firm (l).mask;	/* set in port mask */
	        call run_dcw;			/* execute overlay */
	        if error ^= 0 then go to err_1;
	        call fw_load_mess;			/* let user and operator know what has been loaded */
	     end;
	  end;
         end;
      end;
      call ioi_$release_devices (io_info.device_index, error); /* can let ioi do other io now */
      if error ^= 0 then do;				/* can't win */
         call output_status_code (error, "calling ioi_$release_devices");
         go to err_1;
      end;
      io_info.chan_suspended = "0"b;			/* channel is no longer suspended */
      return;
%page;

/* fw_load - internal procedure to find requested deck in deckfile and load core image */

fw_load: proc;

/* find firmware deck in the deckfile */

      call tolts_util_$search (tolts_info.df_iocbp, (cata.key (catx)), t_ptr, c_len, error);
      if error ^= 0 then do;				/* if we couldn't find module */
         call output_status_code (error, "searching for " || cata.key (catx));
         return;
      end;

/* now load core image into temp buffer */

      call gload_ (t_ptr, l_ptr, 0, addr (gload_data), error); /* load it */
      if error ^= 0 then do;
         call output_status_code (error, gload_data.diagnostic || " loading module " || cata.key (catx));
         return;					/* and return */
      end;
      idbp = addrel (l_ptr, fixed (gload_data.text_len) - 10); /* get ptr to id blk */
      css = 1;					/* control store starts at 1 */
      rws = id_blk.rw_start;				/* set start of read/write memory */
      if rws = 0 then do;				/* if read/write overlay non-existant... */
         csl = fixed (gload_data.text_len) - 10;		/* set cs length to loaded blk minus id blk */
         rwl = 0;					/* no read/write overlay */
      end;
      else do;
         csl = rws;
         rwl = fixed (gload_data.text_len) - rws - 10;	/* set lengths */
         rws = rws + 1;
      end;

   end fw_load;


/* output_status_code - internal procedure to queue up a status message */

output_status_code: proc (ecode, mess);

dcl  ecode fixed bin (35);
dcl  mess char (*);

      call com_err_$convert_status_code_ (ecode, shortinfo, longinfo);
      call tolts_qttyio_$rs (0, "^as: ^a^/^a", tolts_info.exec, longinfo, mess);
   end output_status_code;
%page;
/* Procedure to dc reset of an mpc by isuing a reset pcw */

dc_reset: proc;

      idcwp = addr (tolts_workspace.p_idcw);		/* Set up IDCW, although it wont be executed */
      string (idcw) = "0"b;
      idcw.code = "7"b3;
      idcw.chan_cmd = "02"b3;

      call ioi_$connect_pcw (io_info.device_index, tio_off, ipcw, error); /* Do connect */
      if error ^= 0 then do;
         call output_status_code (error, "issuing initialize pcw");
         return;
      end;
      tolts_info.glob_int_cnt = tolts_info.glob_int_cnt + 1;/* increment global IO count */
      io_info.io_in_progress = "1"b;			/* set flag */
      do while (io_info.io_in_progress);		/* make sure we only take interrupt wakeup */
         call ipc_$block (addr (tolts_info.wait_list), addr (event_out), error);
         if error ^= 0 then do;
	  call output_status_code (error, "waiting for ioi timeout from initialize pcw");
	  return;
         end;
      end;
      if tolts_workspace.status.level ^= 3 | ^tolts_workspace.status.timeout then do;
         call tolts_qttyio_$rs (0, "^a No ioi timeout after issuing initialize pcw", io_info.test_hdr);
         error = error_table_$action_not_performed;	/* set phony error */
         return;
      end;

/* Since time out was only simulated by ioi, a real delay must be done to allow the mpc to reset */

      call timer_manager_$reset_alarm_wakeup (tolts_info.gewake_event); /* Be sure no alarm already set */
      call ipc_$drain_chn (tolts_info.gewake_event, error); /* In case event occured */
      if error ^= 0 then do;
         call output_status_code (error, "calling ipc_$drain_chn durring dc_reset");
         return;
      end;
      if io_info.cat_name = "itr.msp800" then
         call timer_manager_$alarm_wakeup (20, "11"b, tolts_info.gewake_event); /* Set 1 second timer */
      else call timer_manager_$alarm_wakeup (1, "11"b, tolts_info.gewake_event); /* Set 1 second timer */
      tolts_info.gewake_active = "1"b;			/* set flag */
      do while (tolts_info.gewake_active);		/* make sure we only take alarm wakeup */
         call ipc_$block (addr (tolts_info.wait_list), addr (event_out), error); /* Wait for a second */
         if error ^= 0 then do;
	  call output_status_code (error, "waiting for dc_reset");
	  return;
         end;
      end;

   end dc_reset;
%page;
/* run_dcw - subroutine to do the actual I/O */

run_dcw: proc;

      call ioi_$connect_pcw (io_info.device_index, tio_off, pcwa, error); /* Do connect */
      if error ^= 0 then do;
         call output_status_code (error, "attempting connect");
         return;
      end;
      tolts_info.glob_int_cnt = tolts_info.glob_int_cnt + 1;/* increment global IO count */
      io_info.io_in_progress = "1"b;			/* set flag */
      do while (io_info.io_in_progress);		/* make sure we only take interrupt wakeup */
         call ipc_$block (addr (tolts_info.wait_list), addr (event_out), error);
         if error ^= 0 then do;
	  call output_status_code (error, "waiting for terminate interrupt");
	  return;
         end;
      end;
      if tolts_workspace.status.level ^= 3 then do;	/* looking for terminate */
         call tolts_qttyio_$rs (0, "^a Unexpected level ^d interrupt while waiting for terminate",
	io_info.test_hdr, tolts_workspace.status.level);
         error = error_table_$action_not_performed;	/* set phony error code */
         return;
      end;
      if tolts_workspace.status.timeout then do;		/* not good */
         call tolts_qttyio_$rs (0, "^a ioi timeout while waiting for terminate", io_info.test_hdr);
         error = error_table_$action_not_performed;	/* set phony error code */
         return;
      end;
      statp = addr (tolts_workspace.status.iom_status);	/* set status ptr */
      if status.power then do;			/* power off status */
         call tolts_qttyio_$rs (0, "^a Unexpected power off status, check MPC",
	io_info.test_hdr);
         error = error_table_$action_not_performed;
         return;
      end;
      if status.major | status.sub | status.channel_stat | status.central_stat then do; /* If any other error */
         call tolts_qttyio_$rs (0, "^a Unexpected IOM status: ^12.3b ^12.3b",
	io_info.test_hdr, substr (tolts_workspace.iom_status, 1, 36),
	substr (tolts_workspace.iom_status, 37, 36));
         error = error_table_$action_not_performed;	/* set phoney error code */
         return;
      end;

   end run_dcw;
%page;
/* copy_cs - subroutine to copy control store overlay from temp buf to ioi workspace */

copy_cs: proc (buf_off, err_bit);

dcl  err_bit bit (1);
dcl  buf_off fixed bin;

      err_bit = "0"b;				/* reset error flag */
      ov_name = "control store";			/* set overlay name */
      call make_dcw ("10"b3, (csl - css + 1) + buf_off, err_bit); /* set up dcw list */
      if ^err_bit then				/* if no error... */
         call copy (css, csl, buf_off, err_bit);		/* go copy the data */

   end copy_cs;

/* copy_rw - subroutine to copy read/write memory overlay from temp buf to ioi workspace */

copy_rw: proc (err_bit);

dcl  err_bit bit (1);

      err_bit = "0"b;				/* reset error flag */
      ov_name = "read/write memory";
      call make_dcw ("11"b3, rwl, err_bit);		/* set up dcw list */
      if ^err_bit then				/* if no error... */
         call copy (rws, rws + rwl - 1, 0, err_bit);	/* go copy the data */

   end copy_rw;

/* fw_load_mess - subroutine to put out message telling the operator and user that firmware has been loaded */

fw_load_mess: proc;

      call ioa_$rsnnl ("^/^a ^as has loaded ^a firmware ^a rev. ^a", longinfo, c_len,
       io_info.test_hdr, tolts_info.exec, substr (cata.key (catx), 8, 6),
       substr (cata.key (catx), 15, 4), substr (cata.key (catx), 20, 2));
      opr_query_info.q_sw = "0"b;			/* we don't want operator response */
      call opr_query_ (addr (opr_query_info), substr (longinfo, 1, c_len)); /* tell operator */
      if ^tolts_info.finish_cond then do;		/* only output message if we still have terminal */
         call tolts_qttyio_ (substr (longinfo, 1, c_len), 0); /* and ourselves what we are loading */
         do while (tolts_info.term_io_req_cnt ^= 0);	/* wait for message to be output */
	  call ipc_$block (addr (tolts_info.wait_list), addr (event_out), error); /* Wait for a second */
	  if error ^= 0 then do;
	     call output_status_code (error, "waiting for firmware load message");
	     return;
	  end;
         end;
      end;

   end fw_load_mess;
%page;
/* make_dcw - subroutine to set up dcw list */

make_dcw: proc (op_code, dlen, err_bit);

dcl  op_code bit (6);
dcl  (dlen, dleft, ovh) fixed bin;
dcl  err_bit bit (1);

      ovh = bin (rel (addr (tolts_workspace.data_buf))) + 2;/* compute overhead length of ioi buf */
      idcwp = addr (tolts_workspace.p_idcw);		/* get ptr to primary idcw loc */
      string (idcw) = "0"b;				/* initialize */
      idcw.command = op_code;				/* copy command */
      idcw.code = "7"b3;				/* this must be set for an idcw */
      dcwp = addr (tolts_workspace.dcw_list (1));		/* set up 1st dcw */
      string (dcw) = "0"b;				/* initialize 1st dcw */
      dcw.address = rel (addr (tolts_workspace.data_buf));	/* set dcw address */
      dleft = dlen;					/* start with entire length */
      do while (dleft > 4096);			/* set up as many dcws as neccessary */
         dcw.type = "01"b;				/* set type to iotp */
         dcw.tally = "0000"b3;			/* 0 = tally of 4096 */
         if io_info.cur_wks_sz < dlen + ovh then		/* if our workspace is to small */
	  if tolts_info.max_wks_sz < dlen + ovh then do;	/* and we can't get enough */
	     err_bit = "1"b;			/* set error indicator */
	     call tolts_qttyio_$rs (0, "^a max workspace size of ^d is less than ^a overlay length of ^d",
	      io_info.test_hdr, tolts_info.max_wks_sz, ov_name, dlen);
	     return;				/* return and report error */
	  end;
	  else do;
	     if io_info.cur_wks_sz + 4096 > tolts_info.max_wks_sz then /* if current + 4k is > max */
	        io_info.cur_wks_sz = tolts_info.max_wks_sz; /* set current size to max */
	     else io_info.cur_wks_sz = io_info.cur_wks_sz + 4096; /* increse by 4k */
	     call ioi_$workspace (io_info.device_index, ioi_wksp, io_info.cur_wks_sz, error);
	     if error ^= 0 then do;			/* ioi_ didn't like it */
	        call output_status_code (error, "setting max workspace size");
	        err_bit = "1"b;			/* set error indicator */
	        return;
	     end;
	  end;
         tdcwp = dcwp;				/* save current dcw ptr */
         dcwp = addrel (dcwp, 1);			/* go to next dcw */
         string (dcw) = "0"b;				/* initialize dcw */
         dcw.address = bit (bin (bin (tdcwp -> dcw.address) + 4096, 18));
         dleft = dleft - 4096;			/* decrement data left */
      end;
      dcw.type = "00"b;				/* last dcw is iotd */
      dcw.tally = bit (bin (dleft, 12));		/* set tally */
      tolts_workspace.buf_size = dlen;			/* set buffer size */

   end make_dcw;
%page;
/* This procedure actually copies the firmware data */

copy: proc (start, stop, b_off, err_bit);

dcl  (start, stop, b_off) fixed bin;			/* The range of words to be copied */
dcl  err_bit bit (1);				/* An error code */
dcl  ck_sum fixed bin (35) init (0);			/* To do check sum calculations */
dcl  ck_bit bit (36) based (addr (ck_sum));		/* Another way of looking at ck_sum */

      j = 1 + b_off;				/* start at one plus offset */
      do i = start to stop;				/* Copy it all */
         buffer (j) = f_wd (i);			/* This moves a word */
         if i < stop then do;				/* If not last word, do checksum calc */
	  call ch_add (ck_sum, bin (substr (f_wd (i), 2, 8) || substr (f_wd (i), 11, 8)));
	  call ch_add (ck_sum, bin (substr (f_wd (i), 20, 8) || substr (f_wd (i), 29, 8)));
         end;
         j = j + 1;
      end;

      ck_sum = -ck_sum;				/* Get complement of check sum */

      if "0"b || substr (ck_bit, 21, 8) || "0"b || substr (ck_bit, 29, 8) ^=
       substr (f_wd (stop), 1, 18) then do;
         call tolts_qttyio_$rs (0, "^a check sum error detected in ^a overlay of ^a firmware - ^a",
	io_info.test_hdr, ov_name, substr (cata.key (catx), 8, 6),
	substr (cata.key (catx), 15, 4));
         err_bit = "1"b;
      end;

      return;

   end copy;


/* This subroutine does 16 bit addition with end around carry to validate check sums */

ch_add: proc (sum, add_val);

dcl  sum fixed bin (35);				/* The accumulated sum */
dcl  add_val fixed bin (16);				/* New value to add */

      sum = sum + add_val;				/* Do the add */
carry: if sum > 1111111111111111b then do;		/* If overflow into 17th bit */
         sum = sum - 10000000000000000b;		/* Subtract it out */
         sum = sum + 1;				/* Do end-around carry */
         go to carry;				/* Check again */
      end;
      return;

   end ch_add;
%page;
%include gload_data;
%page;
%include iom_stat;
%page;
%include mca_data_area;
%page;
%include opr_query_info;
%page;
%include tolts_info;
%page;
%include tolts_workspace;


   end tolts_load_firmware_;
