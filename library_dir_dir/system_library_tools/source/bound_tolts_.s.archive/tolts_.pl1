/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Rewritten 6/78 by J. A. Bush to conform to Multics programming standards
   Modified 79/02/08 by J. A. Bush to call the Multics T & D Slave Interface
   Module (mtdsim_) for Molts and Polts
   Modified 80/02/06 by J. A. Bush to handle the sus_ condition
   Modified 80/12/08 by R. E. Fakoury to handle a colts request.
   Modified 03/83 by Rick Fakoury to change the msg1 to msg and to call tolts_util_$opr_msg. Also added a
   check for user access to system data_bases and gates.
   Modified 10/83 to use access_mode_values.incl as recommended by the auditor.
   Modified 01/84 by R Fakoury to support new tolts debugger call.
   Modified 01/85 by R Fakoury to change the check for tandd.acs.
*/






/****^  HISTORY COMMENTS:
  1) change(85-10-21,Fakoury), approve(86-08-21,MCR7514),
     audit(86-12-01,Martinson), install(86-12-09,MR12.0-1235):
     to check for user access to mca gate & system mca data segs.
                                                   END HISTORY COMMENTS */





/* tolts_ - this is the TOLTS executive that controls execution of POLTS, MOLTS, COLTS, and ISOLTS */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_: proc;

/* AUTOMATIC */

dcl  c_args (32) char (28) varying;
dcl  c_len fixed bin;
dcl  cardp ptr init (null);
dcl  code fixed bin (35);
dcl  com_string char (132) aligned;
dcl  cmd_cnt fixed bin;
dcl  entry_var entry variable;
dcl  tandd_ok bit (1);
dcl  term bit (1);
dcl  ttl_date char (6);
dcl  user_access fixed bin (5);


/*  BUILTINS */

dcl  null builtin;

/*  CONDITIONS */

dcl  linkage_error condition;


/*  CONSTANTS */

dcl  current_ring fixed bin int static options (constant) init (-1);
dcl  no_error_expected fixed bin (35) int static options (constant) init (0);
dcl  pname char (6) static options (constant) init ("tolts_");
dcl  ring_1 fixed bin int static options (constant) init (1);
dcl  sl_dir char (4) int static options (constant) init (">sl1");
dcl  sc_admin_dir char (14) int static options (constant) init (">sc1>admin_acs");
dcl  sc_dir char (4) int static options (constant) init (">sc1");


/* ENTRIES */

dcl  com_err_ entry () options (variable);
dcl  hcs_$get_user_effmode entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  isolts_ entry;
dcl  mca_$attach_mca entry;
dcl  mtdsim_ entry options (variable);
dcl  no_save_on_disconnect entry;
dcl  save_on_disconnect entry;
dcl  tandd_$ring_0_message entry;
dcl  tolts_util_$get_ttl_date entry (entry, char (6));
dcl  tolts_util_$on_off entry (char (6), char (3), char (6));
dcl  tolts_util_$opr_msg entry;
dcl  tolts_util_$query entry (char (*), char (132) aligned, fixed bin, (32) char (28) varying, fixed bin);


/* EXTERNAL */

dcl  error_table_$moderr fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;


%page;


      call no_save_on_disconnect;			/* do not want process saved on terminal disconnect */
      call tolts_util_$get_ttl_date (tolts_, ttl_date);
      call tolts_util_$on_off ("tolts", "on", ttl_date);	/* signon */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
/*											*/
/* Verify user access to system data and system gates.						*/
/*											*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


      call check_access (sc_dir, "opr_query_data",
       RW_ACCESS_BIN, no_error_expected, current_ring);

      call check_access (sc_admin_dir, "tandd.acs",
       RW_ACCESS_BIN, no_error_expected, current_ring);

      call check_access (sc_dir, "cdt",
       R_ACCESS_BIN, no_error_expected, current_ring);

      call check_access (sl_dir, "mca_data_seg",
       RW_ACCESS_BIN, error_table_$noentry, ring_1);


      on linkage_error begin;
         call com_err_ (error_table_$moderr, pname, "^[mca_^;tandd_^]", tandd_ok);
         goto t_off;				/* exit */
      end;

      tandd_ok = "0"b;
      entry_var = tandd_$ring_0_message;
      tandd_ok = "1"b;
      entry_var = mca_$attach_mca;
      revert linkage_error;


%page;


/* Now loop until user quits */

      term = "0"b;					/* reset terminate condition */
      do while (^term);
         call ioa_ (" ^/***enter ""polts"", ""molts"", ""colts"", ""isolts"", ""quit"", or ""msg""");
         call tolts_util_$query ("??? ", com_string, c_len, c_args, cmd_cnt);

/* Now see what user wants to do */

         if c_args (1) = "quit"
	| c_args (1) = "q" then			/* user wants to quit */
	  term = "1"b;
         else if c_args (1) = "polts" then		/* user wants to run polts */
	  call mtdsim_ ("polt");
         else if c_args (1) = "molts" then		/* user wants to run molts */
	  call mtdsim_ ("molt");
         else if c_args (1) = "colts" then		/* user wants to run colts */
	  call mtdsim_ ("colt");
         else if c_args (1) = "isolts" then		/* user wants to run isolts */
	  call isolts_;
         else if c_args (1) = "msg" then		/* user wants to send message to operator */
	  call tolts_util_$opr_msg;
         else call ioa_ ("^/invalid response - ^a", com_string);
      end;

/* User is all done, output Tolts wrap up message */

t_off: call tolts_util_$on_off ("tolts", "off", ttl_date);	/* signoff */
      call save_on_disconnect;			/* restore users save on disconnect state */

      return;

%page;

/* check_access - int proc that will check the user's access to system gates & data bases */

check_access: proc (dir, entry, lowest_access, error_expected, ring);

dcl  error_expected fixed bin (35);
dcl  dir char (*);
dcl  entry char (*);
dcl  lowest_access fixed bin (5);
dcl  ring fixed bin;

      call hcs_$get_user_effmode (dir, entry, "", ring, user_access, code);
      if code ^= 0 then do;
         if code = error_expected then return;
         call com_err_ (code, pname, "attemping to get user access to ^a>^a.",
	dir, entry);
         go to t_off;				/* exit */
      end;

      if user_access >= lowest_access then return;

      call com_err_ (error_table_$moderr, pname, "^a>^a", dir, entry);
      goto t_off;					/* exit */

   end check_access;

%page;

%include access_mode_values;


   end tolts_;					/* thats it */
