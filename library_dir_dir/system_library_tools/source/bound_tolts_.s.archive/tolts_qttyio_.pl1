/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
tolts_qttyio_: proc (message, a_page);

/* tolts_qttyio_ - procedure and related entries to queue up terminal io for tolts, 1 line at a time */
/* the page numbers have the following meaning:
   page = 0 = output to users terminal
   page = 1 - 8 = output from 1 of the test pages, routed to users terminal or print file (see dcw_lp struct)
   page = 9 = output message on users terminal and then read input from user
   page = 10 = output to user terminal or print file, if print file attached (tolts_info.file_attach = "1"b)
*/

/* External Entries */

dcl  hcs_$wakeup entry (bit (36) aligned,
	fixed bin (71), ptr, fixed bin (35));		/* arg 3 is suppose to be fixed bin (71) */
dcl  com_err_ entry options (variable);
dcl  terminate_process_ entry (char (*), ptr);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  tolts_util_$bci_to_ascii entry (bit (*), char (*) varying, fixed bin);

/* Entry Parameters */

dcl  message char (*);
dcl  (a_page, np) fixed bin;
dcl  a_dcwp ptr;

/* Automatic */

dcl  (genp, argp, dcwptr) ptr;
dcl  mep ptr;
dcl  (page, lp, lb, c_len, i) fixed bin;
dcl  (found, pline) bit (1);
dcl  NLFF char (2);
dcl  rs_data char (136);

/* structures and based variables */

dcl  bcd_str bit (c_len * 6) based (genp);

dcl  1 fatal_desc aligned,
       2 version fixed bin,
       2 fatal_code fixed bin (35);

dcl  1 mes_buf based (mep) aligned,			/* template for a message queue entry */
       2 page fixed bin,				/* test page number issuing io */
       2 nlines fixed bin,				/* number of array elements in message */
       2 cline fixed bin,				/* line number currently being displayed */
       2 lines (nlines) char (136),			/* array of message lines */
       2 nxt_mes char (1);				/* method to get to next message */

dcl  1 rcw based (genp),				/* structure for gcos sysout records with rcws */
       (2 dlen fixed bin,				/* number of words */
       2 pad fixed bin) unaligned,			/* reset of  rcw not used */
       2 data bit (rcw.dlen * 36),			/* bcd data as bit string */
       2 nxt_rcw bit (0);				/* used for getting next rcw */

dcl  1 dcw_lp based (dcwptr) aligned,			/* template for tadio dcw ptr */
       (2 add fixed bin (18) unsigned,			/* address of tadio dcw */
       2 type,					/* dcw type */
         3 e bit (1),				/* select terminal/print file by option */
         3 r bit (1),				/* write then read */
         3 m bit (1),				/* master console output */
         3 s bit (1),				/* slaved terminal output */
         3 c bit (1),				/* controlling terminal output */
         3 p bit (1),				/* output to print file */
       2 wc fixed bin (12) unsigned) unaligned;		/* total message word count */

/* Builtins */

dcl  (addr, addrel, length, rel, rtrim, search, substr, unspec, verify) builtin;


	page = a_page;				/* copy test page number */
	if page = 9 then tolts_info.term_io_in_prog = "1"b;
	call que_setup;				/* go set up queue entry */
	if tolts_info.file_attach then		/* if print file attached.... */
	     if page > 0 & page ^= 9 & page ^= 19 then	/* and if exec I/O... */
		pline = "1"b;			/* set print flag */
	c_len = length (rtrim (message));		/* get rtrim(message) length */
	call parse_mess (addr (message), c_len);	/* go parse up message into individual lines */
	call wakeup;				/* go wakeup display event */
	return;					/* thats all folks */


/* dcw_ptr - entry to queue up message given a list of dcw ptrs (for MME TADIOD) */

dcw_ptr: entry (a_dcwp, np, a_page);

	page = a_page;
	dcwptr = a_dcwp;
	do i = 1 to np;				/* process all dcw ptrs */
	     call que_setup;			/* go set up our message queue entry */
	     dcwp = ptr (dcwptr, dcw_lp.add);		/* get ptr to next dcw */
	     if tolts_info.file_attach then		/* if print file attached... */
		if dcw_lp.type.e | dcw_lp.type.p then	/* and line to be printed */
		     pline = "1"b;			/* set flag */
	     call pdcw_list;			/* go process dcw list */
	     call wakeup;				/* go wakeup display event */
	     dcwptr = addrel (dcwptr, 1);		/* increment to next ptr */
	end;
	return;					/* thats all folks */


/* dcw_list - entry to queue up a message given a dcw list */

dcw_list: entry (a_dcwp, a_page);

	page = a_page;				/* copy test page number */
	call que_setup;				/* go get the next avail buffer and initialize */
	dcwp = a_dcwp;				/* copy dcw ptr */
	call pdcw_list;				/* go process the dcw list */
	call wakeup;				/* issue wakeup to tolts_ttyio_display_ */
	return;					/* thats all folks */


/* rs - entry to pass in short messages with ioa_ control args */

rs:  entry (a_page);

	page = a_page;				/* set test page */
	call que_setup;				/* go get next queue loc */
	if tolts_info.file_attach then		/* if print file attached.... */
	     if page > 0 & page ^= 9 & page ^= 19 then
		pline = "1"b;			/* set print flag */
	call cu_$arg_list_ptr (argp);			/* get ptr to our argument list */
	call ioa_$general_rs (argp, 2, 3, rs_data, c_len, "0"b, "0"b); /* format message */
	call parse_mess (addr (rs_data), c_len);	/* go parse message and store in queue */
	call wakeup;				/* wakeup display */
	return;


/* rcw - entry to output a message coded for gcos sysout */

rcw: entry (a_dcwp);

	page = 0;					/* set test page to exec */
	call que_setup;				/* go get next queue loc */
	dcwp = a_dcwp;				/* copy dcw ptr */
	c_len = fixed (dcw.tally);			/* get dcw length */
	i = 0;					/* reset word counter */
	genp = ptr (dcwp, dcw.address);		/* get ptr to first rcw */
	do while (i < c_len);			/* do until we are done */
	     i = i + rcw.dlen + 1;			/* add current rcw length + rcw */
	     call tolts_util_$bci_to_ascii (rcw.data, tolts_info.cv_buf, rcw.dlen * 6); /* convert to ascii */
	     call parse_mess (addrel (addr (tolts_info.cv_buf), 1), length (tolts_info.cv_buf)); /* go parse message */
	     genp = addr (rcw.nxt_rcw);		/* get next rcw address */
	end;
	call wakeup;				/* wakeup display event */
	return;					/* thats it folks */


/* pdcw_list - subroutine to process a dcw list containing messages */

pdcw_list: proc;

	found = "0"b;				/* initiaize terminate condition */
	do while (^found);				/* process all dcws */
	     genp = ptr (dcwp, fixed (dcw.address, 17));	/* get ptr to string */
	     c_len = fixed (dcw.tally) * 6;		/* number of bcd chars */
	     call tolts_util_$bci_to_ascii (bcd_str, tolts_info.cv_buf, c_len);
	     call parse_mess (addrel (addr (tolts_info.cv_buf), 1), length (tolts_info.cv_buf)); /* go parse message */
	     if dcw.type = "00"b then found = "1"b;	/* if last dcw */
	     else dcwp = addrel (dcwp, 1);		/* otherwise get next dcw */
	end;

     end pdcw_list;

/* parse_mess - subroutine to parse terminal messages and store in queue entry message array */

parse_mess: proc (mesp, slen);

dcl  mesp ptr;					/* ptr to message to be parsed */
dcl  slen fixed bin;				/* length of message to be parsed */
dcl  rmess char (slen) based (mesp);			/* template for message to be parsed */

	if slen = 0 then				/* special case null lines */
	     lp = 0;
	else lp = 1;				/* set initial scan position */
	do while (lp <= slen);			/* process entire line */
	     mes_buf.nlines = mes_buf.nlines + 1;	/* update number of lines */
	     mes_buf.lines (nlines) = "";		/* initialize buffer to blanks */
	     if slen ^= 0 then do;			/* if somebody sent over a null string, special case */
		lb = verify (substr (rmess, lp, (slen - lp) + 1), NLFF); /* strip off NLs and Form feeds */
		if lb = 0 then do;			/* if couldn't find... */
		     lp = lp + (slen - lp) + 1;	/* update lp to escape from loop */
		     mes_buf.nlines = mes_buf.nlines - 1; /* get rid of blank line */
		end;
		else do;
		     lp = lp + (lb - 1);		/* correct starting position */
		     lb = search (substr (rmess, lp), NLFF); /* search for next NL or form feed */
		     if lb = 0 then			/* if no more */
			lb = (slen - lp) + 1;	/* set to end of line */
		     else lb = lb - 1;
		     mes_buf.lines (nlines) = substr (rmess, lp, lb); /* save substr as line */
		     lp = lp + lb;			/* update position */
		end;
	     end;
	     else lp = 1;				/* set condition to get out of loop */
	end;

     end parse_mess;


/* que_setup - subroutine to initialize a new queue entry */

que_setup: proc;

	unspec (NLFF) = "012014"b3;			/* set new line and form feed constants */
	mep = tolts_info.mess_buf.nxt;		/* set message ptr to next avail loc */
	mes_buf.page = page;			/* set page number in entry */
	mes_buf.nlines, mes_buf.cline = 0;		/* initialize number of lines and current line */
	pline = "0"b;				/* reset print line flag */

     end que_setup;

/* wakeup - subroutine to set the nxt queue entry address and wakeup tolts_dtty_io_ */

wakeup: proc;

	if pline then				/* if message to be printed... */
	     mes_buf.page = mes_buf.page + 20;		/* set print indicator */
	tolts_info.mess_buf.nxt = addr (mes_buf.nxt_mes); /* set next queue address */
	if rel (tolts_info.mess_buf.nxt) > rel (addr (tolts_info.mess_buf.q_end)) then /* if wrap */
	     tolts_info.mess_buf.nxt = tolts_info.mess_buf.first; /* set to start of queue */
	tolts_info.term_io_req_cnt = tolts_info.term_io_req_cnt + 1; /* increment number of requests */

/* send tolts_dttyio_ a wakeup and send him the message ptr */

	call hcs_$wakeup (tolts_info.process, tolts_info.tty_issue_event, mep, fatal_desc.fatal_code);
	if fatal_desc.fatal_code ^= 0 then do;
	     call com_err_ (fatal_desc.fatal_code, "tolts_qttyio_", "fatal error, terminating process");
	     fatal_desc.version = 0;
	     call terminate_process_ ("fatal_error", addr (fatal_desc));
	end;

     end wakeup;


%include tolts_info;
%include iom_dcw;

     end tolts_qttyio_;
