/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Modified by R.Fakoury 01/81 & 09/81 for colts implementation.
   Modified by R. Fakoury 09/81 to increase wks_sz for mtar.
*/




/****^  HISTORY COMMENTS:
  1) change(86-08-21,Fakoury), approve(86-08-21,MCR7514),
     audit(86-11-11,Martinson), install(86-12-04,MR12.0-1235):
      2/85 to MCA cleanup,
      1/86 for colts RSPD to get a correct workspace size.
                                                   END HISTORY COMMENTS */





/*   The function of the external procedure "tolts_init_" is to perform certain initialization actions for the test
   system. There are three functions to be performed for this initialization:

   1.  Creating a temporary "slave" segment.

   2.  Initializing static variables.

   3.  Creating event channels to handle service requests.

   Creating a temporary "slave" segment:

   A temporary segment of the name of "<exec>_slave", is created, where <exec> is the input parameter by the same
   name  and  can  be "polt", "molt" or "colt". This temporary segment will be used to load the core image of the
   target slave mode exec.

   Initializing static variables:

   "tolts_init_" will initialize static variables in the static structure "tolts_info".

   Creating event channels to handle service requests:

   The following event channels are created by "tolts_init_":

   1.  tolts_info.tty_ccc_event:  (call channel)

   This event channel is used by the routine "term_io_sim_comp_" whenever the simulated tty io termination timer  calls
   "term_io_sim_comp_" to indicate that the tty io should be complete (see "term_io_sim_comp_" for information on this). When
   "term_io_sim_comp_" is called, it will issue a wakeup to the "tolts_info.tty_ccc_event" event channel. The purpose
   of this is to convert the process asychronous timer signal used to indicate that the tty io has been completed
   to a process "sychronous" IPC call channel. In that way, the tty io termination service will only  occur  when
   the process goes blocked for some reason rather than at any time that might not be desirable such as at a time
   when a data base is being altered by the interrupted procedure where "tty_ccc" must also alter that data  data
   base. "tty_ccc" is the procedure called by signalling "tolts_info.tty_ccc_event".

   2.  tolts_info.tty_issue_event:  (call channel)

   This event channel is used to actually issue the tty io. Whenever tty io is buffered for output, this  channel
   is  signalled  and  whenever it is called, the tty io will be issued. By having this channel masked wherever a
   tty io is already in progress, and unmasking it when the current io is complete, tty  io  will  be  issued  in
   succesion as they are requested rather than overlapped.


   3.  tolts_info.request_event:  (call channel)

   This event channel is used to signal the procedure "test_request" for every operator solicited input (after  a
   "???" typeout due to a quit condition and the original input data after "test" that starts the test process).


   4.  tolts_info.wait_list.wait_event_id:  (wait channel)

   This event wait channel is used to allow breaking the test systems only "block" whenever processing is  to  be
   done  other than "call event" type processing. Such "non-call" processing is either dispatching to a test page
   via the "main_dispatcher" or test system termination (either normal or forced).


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */

tolts_init_:   proc (exec, a_error);
  

/* input parameters */

dcl  exec char (4);					/* can be "polt", "molt" or "colt" */
dcl  (a_error, a_err) fixed bin (35);			/* return error codes */
dcl  event_ch fixed bin (71);				/* event channel id to create */
dcl  call bit (1);					/* = "1"b if call channel is to be created */
dcl  call_entry entry;				/* entry to call for call channels */
dcl  odp ptr;					/* ptr to region for data to be pssed */
dcl  prior fixed bin;				/* relative priority of call channel */
dcl  g_time bit (36);				/* return parameter for gc_tod entry */
dcl  slave_exec char (10);


/* external entries */

dcl  add_epilogue_handler_ entry (entry, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  get_process_id_ entry returns (bit (36));
dcl  get_default_wdir_ entry returns (char (168) aligned);
dcl  hcs_$assign_channel entry (fixed bin (71), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$set_call_prior entry (fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  mca_$detach_mca entry (fixed bin, fixed bin (35));
dcl  mtdsim_$mme_fault entry;
dcl  mtdsim_$epilogue entry;
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  sct_manager_$get entry (fixed bin, ptr, fixed bin (35));
dcl  sct_manager_$set entry (fixed bin, ptr, fixed bin (35));
dcl  tolts_alm_util_$ascii_to_bcd_ entry (char (*), bit (*));
dcl  tolts_alrm_util_$gewake entry;
dcl  tolts_alrm_util_$quit entry;
dcl  tolts_file_util_$wdump entry (ptr);
dcl  tolts_ttyio_display_ entry (ptr);
dcl  tolts_ttyio_display_$nxt_line entry (ptr);
dcl  tolts_ttyio_end_ entry;

/* automatic */

dcl  code fixed bin (35);
dcl  data char (36) varying;
dcl  date_str char (8);
dcl  delta fixed bin (71);
dcl  error fixed bin (35);
dcl  gc_date bit (36);
dcl  i fixed bin;

/* constants */

dcl  small_workspace fixed bin int static options (constant) init (4096);
dcl  large_workspace fixed bin int static options (constant) init (9000);
dcl  gewake_prior fixed bin int static options (constant) init (11);
dcl  old_mme1 ptr int static init (null);
dcl  pname char (11) int static options (constant) init ("tolts_init_");
dcl  quith_prior fixed bin int static options (constant) init (8);
dcl  sec_per_day fixed bin (37) int static options (constant) init (86400000000);
dcl  tty_ccc_prior fixed bin int static options (constant) init (9);
dcl  tty_issue_prior fixed bin int static options (constant) init (10);
dcl  sc_dir char (168) static options (constant) init (">system_control_1");
dcl  (addr, clock, date, null, unspec) builtin;
%page;
      a_error = 0;					/* preset return code good */
      tolts_infop = null;				/* preset our info ptr to null */
      call get_temp_segment_ ("tolts_info", tolts_infop, error); /* get a ptr to our info segment */
      if error ^= 0 then do;				/* problem creating info seg */
         call com_err_ (error, pname, "getting temporary segment for tolts_info");
         a_error = error;
         return;
      end;
      unspec (tolts_info) = "0"b;			/* clear entire structure first */
      tolts_info.execp = null;			/* preset exec ptr to null */
      tolts_info.exec = exec;				/* store exec name */
      tolts_info.df_iocbp = null;			/* preset deckfile iocb ptr to null */
      tolts_info.pf_iocbp = null;			/* preset print file iocb ptr to null */
      tolts_info.hdir = get_default_wdir_ ();		/* get users home dir pathname */
      tolts_info.pf_name = "";			/* initialize print file name  to blanks */

/* get a temporary segment for <exec>_slave */

      slave_exec = exec || "_slave";
      call get_temp_segment_ (slave_exec, execp, error);
      if error ^= 0 then do;				/* can't get temporary segment */
         call com_err_ (error, pname, "getting temporary segment for ^a_slave", exec);
         a_error = error;				/* copy error code */
         return;
      end;
      unspec (slave_exec) = "0"b;			/* clear entire slave exec temp seg */

/* initialize the rest of tolts_info */

      fnp (*).cdt_name = "empty";
      tolts_info.process = get_process_id_ ();		/* get our process id */
      tolts_info.wait_list.nchan = 1;
      tolts_info.mess_buf.first, tolts_info.mess_buf.nxt = addr (tolts_info.mess_buf.term_queue); /* set tty io ptrs */
      if exec = "polt"				/* if running polts */
       | exec = "colt" then tolts_info.wks_sz = small_workspace;  /* or colts set workspace for 4K */
      else tolts_info.wks_sz = large_workspace;			/* if molts set it for 9k */

/* set up mme1 condition static handler */

      call sct_manager_$get (mme1_sct_index, old_mme1, error); /* save old mme  sct index */
      if error = 0 then
         call sct_manager_$set (mme1_sct_index, addr (mtdsim_$mme_fault), error); /* and set up static mme handler */
      if error ^= 0 then do;
         call com_err_ (error, pname, "setting up static mme1 handler");
         call clean_up;
         a_error = error;
         return;
      end;

/* set up epilogue handler for process hangups */

      call add_epilogue_handler_ (mtdsim_$epilogue, error); /* add epilogue entry */
      if error ^= 0 then do;
         call com_err_ (error, pname, "setting up epilgue handler");
         call clean_up;
         a_error = error;
         return;
      end;

/* i~\nitialize date time constants in tolts_info */

      call init_time (error);
      if error ^= 0 then do;
         call com_err_ (error, pname, "error from convert_date_to_binary_");
         call clean_up;
         a_error = error;
         return;
      end;
%page;

/* create an event call channel for tty io termination requests */

      data = "original message data";
      call cr_event_chan (tolts_info.tty_ccc_event, "1"b, tolts_ttyio_end_,
       addr (data), tty_ccc_prior, error);
      if error ^= 0 then do;				/* trouble creating event call channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;

/* create an event call channel for tty io initiation requests */

      call cr_event_chan (tolts_info.tty_issue_event, "1"b, tolts_ttyio_display_,
       addr (data), tty_issue_prior, error);
      if error ^= 0 then do;				/* trouble creating event call channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;

/* create an event call channel for tty io display requests */

      call cr_event_chan (tolts_info.tty_display_event, "1"b, tolts_ttyio_display_$nxt_line,
       addr (data), tty_issue_prior, error);
      if error ^= 0 then do;				/* trouble creating event call channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;

/* create an event call channel for user requests (quit condition) */

      call cr_event_chan (tolts_info.quith_event, "1"b, tolts_alrm_util_$quit,
       addr (data), quith_prior, error);
      if error ^= 0 then do;				/* trouble creating event call channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;
%page;

/* create an event call channel for gewake events */

      call cr_event_chan (tolts_info.gewake_event, "1"b, tolts_alrm_util_$gewake,
       addr (data), gewake_prior, error);
      if error ^= 0 then do;				/* trouble creating event call channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;

/* create a "fast" event wait channel for waking up the dispatcher */

      call hcs_$assign_channel (tolts_info.wait_list.wait_event_id (1), error);
      if error ^= 0 then do;				/* trouble creating event wait channel... */
         a_error = error;				/* copy error code */
         call clean_up;				/* go delete event channels already created */
         return;					/* and return */
      end;


/* create an event-wait channel for dial_manger */
      if exec = "colt" then do;
         call ipc_$create_ev_chn (tolts_info.dm_event, code);
         if code ^= 0 then do;
	  a_error = code;
	  call com_err_ (code, pname, "creating an event channel");
	  call clean_up;
         end;

         call hcs_$initiate (sc_dir, "cdt", "", 0, 1, cdtp, code); /* initiate cdt seg */
         if cdtp = null then do;			/* if we can't initiate tell user */
	  call com_err_ (code, " Tolts", "attempting to initiate ^a>cdt", sc_dir);
         end;
         cdtptr = cdtp;
      end;
      return;
%page;

/* cr_event_chan - external entry to create ipc wait or call channels */

cr_event_chan: entry (event_ch, call, call_entry, odp, prior, a_err);

      a_err = 0;					/* preset good return code */

      call ipc_$create_ev_chn (event_ch, code);		/* create requested event channel */
      if code ^= 0 then do;				/* error creating event channel */
         a_err = code;				/* copy return code */
         call com_err_ (code, pname, "creating event channel");
         return;
      end;
      if call then do;				/* if user wants an event call channel */
         call ipc_$decl_ev_call_chn (event_ch, call_entry, odp, prior, code); /* change wait into call chan */
         if code ^= 0 then do;			/* error */
	  a_err = code;				/* copy return error code */
	  call com_err_ (code, pname, "changing wait channel into call channel");
	  return;
         end;
         call ipc_$set_call_prior (code);		/* set call channel with priority over wait channel */
         if code ^= 0 then do;			/* error */
	  a_err = code;				/* copy error code */
	  call com_err_ (code, pname, "setting call channels with priority over wait channels");
	  return;
         end;
      end;
      return;					/* return with no error */
%page;

/* clean_up - external entry to delete event channels and <exec>_slave segment */

clean_up: entry;

/* delete event channels if they exist */

      if tolts_info.dm_event ^= 0 then
         call ipc_$delete_ev_chn (tolts_info.dm_event, code); /* if dial_manager event channel $delete it */
      if tolts_infop ^= null then do;			/* if our info seg exists */
         if tolts_info.wait_list.wait_event_id (1) ^= 0 then/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.wait_list.wait_event_id (1), code);
         if tolts_info.tty_issue_event ^= 0 then		/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.tty_issue_event, code);
         if tolts_info.quith_event ^= 0 then		/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.quith_event, code);
         if tolts_info.gewake_event ^= 0 then		/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.gewake_event, code);
         if tolts_info.tty_ccc_event ^= 0 then		/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.tty_ccc_event, code);
         if tolts_info.tty_display_event ^= 0 then	/* if event channel exists */
	  call ipc_$delete_ev_chn (tolts_info.tty_display_event, code);
         do i = lbound (tolts_info.pages, 1) to hbound (tolts_info.pages, 1);
	  if pages (i).in_use then do;
	     if pages (i).mca_ioi_idx ^= 0 then do;
	        call mca_$detach_mca (pages (i).mca_ioi_idx, 0);
	        pages (i).mca_ioi_idx = 0;
	     end;
	  end;
         end;


         if tolts_info.execp ^= null then		/* if temporary segment exists */
	  call release_temp_segment_ (tolts_info.exec || "_slave", execp, code); /* release temp seg */
         if tolts_info.df_iocbp ^= null then do;		/* detach deck file if attached */
	  call iox_$close (tolts_info.df_iocbp, code);
	  call iox_$detach_iocb (tolts_info.df_iocbp, code);
	  tolts_info.df_iocbp = null;
         end;
         call release_temp_segment_ ("tolts_info", tolts_infop, code); /* release our info seg */
      end;
      if old_mme1 ^= null then			/* if  static handler is set... */
         call sct_manager_$set (mme1_sct_index, old_mme1, error); /* reset it */
      return;
%page;
/* gc_tod - entry to compute gcos time of day (in 1/64th milliseconds since midnight */

gc_tod: entry (g_time);

get_delta:
      delta = clock () - tolts_info.micro_time;		/* get delta usecs since midnight */
      if delta > sec_per_day then do;			/* check for day rollover (86400000000 usec/day) */
         call init_time (error);			/* go reinitialize clock time and date */
         go to get_delta;
      end;
      g_time = bit (multiply (delta, .064, 36, 0), 36);
      return;

/* init_time - subroutine to compute the clock time at midnight and the current date and save in tolts_info */

init_time: proc (code);

dcl  code fixed bin (35);

      call date_time_ (clock (), date_str);		/* get current date in form for convert_date_to_binary_ */
      call convert_date_to_binary_ (date_str || " 0000.001", tolts_info.micro_time, code);
      call tolts_alm_util_$ascii_to_bcd_ (date (), gc_date);
      tolts_info.gc_date = gc_date;
   end init_time;
%page;
%include tolts_info;
%include static_handlers;
%include cdt;
%include author_dcl;
   end tolts_init_;
