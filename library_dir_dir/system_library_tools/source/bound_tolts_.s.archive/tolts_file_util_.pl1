/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* orginal coding by J. A. Bush 79/03/22 */




/****^  HISTORY COMMENTS:
  1) change(85-03-16,Fakoury), approve(86-08-22,MCR7514),
     audit(86-11-24,Martinson), install(86-12-04,MR12.0-1235):
     change dump offset and correct a problem when wdump is called to force a
     dump.
                                                   END HISTORY COMMENTS */





/* tolts_file_util_ - subroutines to manage print file output for polts and molts */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_file_util_: proc;
						/* Constants */

dcl  ds_format_1 bit (11) int static options (constant)
      init ("01000100000"b);				/* display address offset only & data in long format */
dcl  ds_format_2 bit (11) int static options (constant)
      init ("11000100000"b);				/* display address & offset & data in long format */

/* External entries */

dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  dprint_ entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  user_info_ entry (char (*), char (*), char (*));
dcl  dump_segment_ entry (ptr, ptr, fixed bin, fixed bin, fixed bin, bit (*));
dcl  (tolts_qttyio_$rs, ioa_$ioa_switch) entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  tolts_util_$bci_to_ascii entry (bit (*), char (*) varying, fixed bin);

/* Automatic */

dcl  (i, first, c_len) fixed bin;			/* do loop cnters */
dcl  (uname, uproj, uacct) char (32);
dcl  out_str char (136) varying;
dcl  time_str char (24);
dcl  code fixed bin (35);
dcl  (dptr, genp) ptr;
dcl  format bit (11);

/* Entry parameters */

dcl  rcode fixed bin (35);				/* standard system error rcode */
dcl  a_dcwp ptr;
dcl  regp ptr;

/* Builtins */

dcl  (addr, fixed, floor, length, null, ptr, substr, rtrim) builtin;

/* Structures */

dcl  1 regs based (regp) aligned,			/* registers from sregs instruction */
       (2 x (0:7) bit (18),				/* index regs */
       2 a bit (36),				/* a register */
       2 qu fixed bin (18) unsigned,
       2 ql fixed bin (18) unsigned) unaligned;		/* q reg */

dcl  1 rcw based (genp),				/* structure for gcos sysout records with rcws */
       (2 dlen fixed bin,				/* number of words */
       2 pad fixed bin) unaligned,			/* reset of  rcw not used */
       2 data bit (rcw.dlen * 36),			/* bcd data as bit string */
       2 nxt_rcw bit (0);				/* used for getting next rcw */
%page;
/* open - entry to attach and open print file */

open: entry (rcode);

      rcode = 0;					/* initialize return code */
      tolts_info.pf_name = unique_chars_ (""b) || "." || tolts_info.exec || ".dump"; /* form unique name */
      call iox_$attach_name ("err_file", tolts_info.pf_iocbp, /* attach file */
       "vfile_ " || rtrim (tolts_info.hdir) || ">" || tolts_info.pf_name, null, code);
      if code ^= 0 then do;				/* if some problem with attach */
         rcode = code;				/* return error code */
         return;					/* get out now */
      end;
      tolts_info.file_attach = "1"b;			/* indicate our seg is attached */
      call iox_$open (tolts_info.pf_iocbp, 2, "0"b, code);	/* open for stream output */
      if code ^= 0 then do;
         rcode = code;				/* return error code */
         call clean_up;				/* go detach file */
         return;
      end;
      tolts_info.file_open = "1"b;
      call date_time_ ((clock_ ()), time_str);		/* get current time of day */
      call ioa_$ioa_switch (tolts_info.pf_iocbp, "^/^2-^as print file ^a>^a opened at ^a^/",
       tolts_info.exec, tolts_info.hdir, tolts_info.pf_name, time_str);
      return;
%page;
/* close - entry to close and detach print file and queue up dprint */

close: entry;

      call date_time_ ((clock_ ()), time_str);		/* get current time of day */
      call ioa_$ioa_switch (tolts_info.pf_iocbp, "^/^2-^as print file ^a>^a closed at ^a",
       tolts_info.exec, tolts_info.hdir, tolts_info.pf_name, time_str);
      call clean_up;				/* close and detach file */
      call user_info_ (uname, uproj, uacct);		/* get users name and project */
      out_str = rtrim (uname) || "." || rtrim (uproj);	/* form desc line */
      if length (out_str) < 10 then
         i = floor ((14 - length (out_str)) / 2);		/* form center index */
      else i = 1;					/* if name to long, start at collum 1 */
      dpap = addr (dprint_arg_buf);			/* set dprint arg ptr */
      dprint_arg.version = 1;				/* set appropriate args */
      dprint_arg.copies = 1;
      dprint_arg.delete = 1;
      dprint_arg.queue = 3;				/* probably should be queue 1 */
      dprint_arg.pt_pch = 1;
      dprint_arg.notify = 1;				/* might want to make this 0 */
      dprint_arg.output_module = 1;
      substr (dprint_arg.dest, i) = out_str;		/* set in person/project info */
      if tolts_info.exec = "polt" then			/* if polts dump */
         dprint_arg.heading = " for  POLTS DUMP";
      else if tolts_info.exec = "molt" then		/* if molts dump */
         dprint_arg.heading = " for  MOLTS DUMP";
      else if tolts_info.exec = "colt" then		/* if colts dump */
         dprint_arg.heading = " for  COLTS DUMP";
      call dprint_ (tolts_info.hdir, tolts_info.pf_name, dpap, code); /* queue it up */
      call tolts_qttyio_$rs (0, "^as dump file ^a>^a has been queued for printing",
       tolts_info.exec, tolts_info.hdir, tolts_info.pf_name);
      return;
%page;
/* snap - entry to output snap shot dumps */

snap: entry (a_dcwp);

      dcwp = a_dcwp;				/* copy dcw ptr */
      c_len = fixed (dcw.tally);			/* set dump length */
      first = fixed (dcw.address);			/* set first address */
      dptr = ptr (tolts_info.execp, first);		/* and start dump ptr */
      format = ds_format_1;				/* display address offset & data in long format */
      call ioa_$ioa_switch (tolts_info.pf_iocbp, "^/");	/* output blank line */
      call dump_segment_ (tolts_info.pf_iocbp, dptr, 0, first, c_len, format); /* dump it */
      return;					/* thats it */
%page;
/* wdump - entry to output wrap up dumps and dumps with formatted register panal */

wdump: entry (regp);

      call date_time_ ((clock_ ()), time_str);		/* get current date/time */
      if regp ^= execp then do;
         call ioa_$ioa_switch (tolts_info.pf_iocbp,	/* put out dump header line */
	"^/^2-^as ^[master mode^;slave^] dump taken ^a^/",
	tolts_info.exec, (regs.x (2) = "442020"b3), time_str);
         dcwp = addr (regs.a);			/* get dcw ptr */
         c_len = fixed (dcw.tally);			/* get dcw length */
         i = 0;					/* reset word counter */
         genp = ptr (dcwp, dcw.address);		/* get ptr to first rcw */
         do while (i < c_len);			/* do until we are done */
	  i = i + rcw.dlen + 1;			/* add current rcw length + rcw */
	  call tolts_util_$bci_to_ascii (rcw.data, out_str, rcw.dlen * 6); /* convert to ascii */
	  call ioa_$ioa_switch (tolts_info.pf_iocbp, "^a", out_str);
	  genp = addr (rcw.nxt_rcw);			/* get next rcw address */
         end;
      end;
      else call ioa_$ioa_switch (tolts_info.pf_iocbp,	/* put out dump header line */
	  "^/^2-^as master mode dump taken ^a^/",
	  tolts_info.exec, time_str);

      call ioa_$ioa_switch (tolts_info.pf_iocbp, "^/");	/* put out new line */
      if regp = execp | regs.x (2) = "442020"b3 then do;	/* if master mode dump */
         format = ds_format_2;			/* display address & offset & data long format */
         first = -72;
         c_len = 77777;				/* dump the entire seg */
         dptr = execp;				/* set ptr to beginning of seg */
      end;
      else do;
         format = ds_format_2;			/* display address & offset & data long format */
         first = -72;
         c_len = regs.ql;
         dptr = ptr (execp, regs.qu);
      end;
      call dump_segment_ (tolts_info.pf_iocbp, dptr, 0, first, c_len, format); /* dump it */
      return;					/* thats it */
%page;
/* clean_up - internal procedure to close and detach print file */

clean_up: proc;

      if tolts_info.file_open then do;			/* if file open */
         call iox_$close (tolts_info.pf_iocbp, code);
         tolts_info.file_open = "0"b;
      end;
      if tolts_info.file_attach then do;		/* if file attached */
         call iox_$detach_iocb (tolts_info.pf_iocbp, code);
         tolts_info.file_attach = "0"b;
         tolts_info.pf_iocbp = null;
      end;

   end clean_up;
%page;
%include dprint_arg;
%page;
%include mca_data_area;
%page;
%include tolts_info;


   end tolts_file_util_;
