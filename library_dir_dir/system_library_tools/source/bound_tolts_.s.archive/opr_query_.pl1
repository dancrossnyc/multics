/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Initial coding by J. A. Bush 10/78.
   Modified 09/80 to clarify the operator reply expected. - R. Fakoury
   Modified 12/80 to use set_lock_ primitives  - P. B. Kelley
   Modified 03/83 by Rick Fakoury to restructure the operator message format.
   Modified 11/83 to correct a bug.
   Modified 1985-03-08, BIM: phcs_ --> tandd_
*/




/****^  HISTORY COMMENTS:
  1) change(86-08-21,Fakoury), approve(86-08-21,MCR7514),
     audit(86-11-24,Martinson), install(86-12-04,MR12.0-1235):
     to correct the alignment of the operator messages.
                                                   END HISTORY COMMENTS */




/* opr_query_ - subroutine to send message to the system operator and wait for his response */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
opr_query_: proc (oqip);


dcl  oqip ptr;					/* ptr to opr_query_ info structure */
dcl  tandd_$ring_0_message entry (char (*));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1),
      fixed bin (2), ptr, fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  (com_err_, ioa_$rsnnl) entry options (variable);
dcl  (error_table_$invalid_lock_reset, error_table_$locked_by_this_process) ext static fixed bin (35);

dcl  1 oq_info like opr_query_info based (oqip) aligned;

dcl  1 event_info aligned,
       2 cid fixed bin (71),
       2 message fixed bin (71),
       2 sender bit (36),
       2 origin,
         3 dev_signal bit (18) unaligned,
         3 ring bit (18) unaligned,
       2 cx fixed bin;

dcl  argp ptr;
dcl  code fixed bin (35);
dcl  mess char (80);
dcl  len fixed bin;
dcl  (addr, null) builtin;
dcl  cleanup condition;
dcl  sc_dir char (168) static options (constant) init
      (">system_control_1");

      on cleanup go to unlock;			/* unconditionaly unlock lock on cleanup condition */
      if oq_info.q_sw then do;			/* if user wants answer from operator */
         if oqdp = null then do;			/* if first reference in our process */
	  call hcs_$initiate (sc_dir, "opr_query_data", "", 0, 1, oqdp, code); /* initiate opr_query_data segment */
	  if oqdp = null then do;			/* if we can't initiate, tell user */
	     call com_err_ (code, "opr_query_", "attempting to initiate ^a>opr_query_data", sc_dir);
	     oq_info.err_code = code;			/* return error code to user */
	     return;
	  end;
         end;
         call set_lock_$lock (opr_query_data.lock_id, 60, code); /* set lock */
         if code = error_table_$invalid_lock_reset
	then call com_err_ (code, "opr_query_", "^/(referencing ^a>opr_query_data)", sc_dir);
         else if code = error_table_$locked_by_this_process
	then call com_err_ (code, "opr_query_", "^/The lock will remain set by this process.");
         else if code ^= 0 then do;
	  call com_err_ (code, "opr_query_", "^/The lock cannot be set by this process.");
	  oq_info.err_code = code;			/* indicate error to caller */
	  return;
         end;
         opr_query_data.process_id = get_process_id_ ();	/* fill in user's process id */

         call ipc_$create_ev_chn (opr_query_data.event_chan, code); /* create an event chan, for oprs response */
         if code ^= 0 then do;			/* some error */
	  call com_err_ (code, "opr_query_", "attempting to create event wait channel");
	  oq_info.err_code = code;			/* copy error code for caller */
	  go to unlock;				/* and go unlock lock */
         end;
         opr_query_data.nchan = 1;			/* set number of ipc channels to 1 */
         opr_query_data.answer = "";			/* set up the rest of the opr_query data structure */
         opr_query_data.prim = oq_info.prim;
         opr_query_data.alt = oq_info.alt;
         opr_query_data.q_sw = oq_info.q_sw;
         opr_query_data.r_comment = oq_info.r_comment;
      end;
      call cu_$arg_list_ptr (argp);			/* get ptr to our argument list */
      if cu_$arg_count () > 1 then do;			/* if message is to output to opr */
         call ioa_$general_rs (argp, 2, 3, mess, len, "0"b, "0"b); /* format message */
         if len > 80 then len = 80;			/* max length is 80 chars */
         call tandd_$ring_0_message (substr (mess, 1, len));/* and output to operator */
      end;
      if oq_info.q_sw then do;			/* if waiting for operator response */
         call ioa_$rsnnl (" ^[ ^a^;^s ^/ ^] ^[ ^/^3-respond: x oqr ^a^;^s^]^[ ^/^3-^5xor: x oqr ^a^;^s ^] ", mess, len,
	(oq_info.r_comment ^= ""), oq_info.r_comment, (oq_info.prim ^= ""), oq_info.prim, (oq_info.alt ^= ""),
	oq_info.alt);
         if len > 80 then len = 80;
         call tandd_$ring_0_message (substr (mess, 1, len));/* output expected response */
         call ipc_$block (addr (opr_query_data.wait_list), addr (event_info), code); /* wait */
         if code ^= 0 then do;			/* if some error */
	  call com_err_ (code, "opr_query_", "while blocked");
	  oq_info.err_code = code;			/* copy error code for caller */
         end;
         else oq_info.answer = opr_query_data.answer;	/* copy operators answer */
         call ipc_$delete_ev_chn (opr_query_data.event_chan, code);
unlock:
         call set_lock_$unlock (opr_query_data.lock_id, code); /* unlock our lock	*/
         if code ^= 0
	then call com_err_ (code, "opr_query_", "Attempting to unlock the opr_query_data lock.");

      end;
      oq_info.err_code = 0;				/* reset error code, and return */

%include opr_query_data;
%include opr_query_info;

   end opr_query_;
