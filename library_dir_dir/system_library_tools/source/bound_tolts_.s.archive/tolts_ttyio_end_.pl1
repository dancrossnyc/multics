/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Modified on 5/80 by R. Fakoury  to check for mtar request.
   Modified 12/80 by R. Fakoury to implement colts.
   Modified 81/05 by R. Fakoury to correctly handle a Multics command request.
   Modified 04/81 by R. Fakoury to allow clstal requests.
   Modified 03/83 by Rick Fakoury to implement 'test msg' for operator/user communication.
   Modified 08/16/83 by Rick Fakoury to allow partial config messages.
   Modified 11/83 by Rick Fakoury to allow hyperchannel test request.
   Modified 01/84 to allow input prior to first request.
*/




/****^  HISTORY COMMENTS:
  1) change(85-12-21,Fakoury), approve(86-08-21,MCR7514),
     audit(86-11-11,Martinson), install(86-12-04,MR12.0-1235):
     for a test nio request,
     to allow the Colts responder (rsp) request,
     set limit of Molts request line to 11 chars,
     allow single character reply to a tolts query.
                                                   END HISTORY COMMENTS */





/* This procedure is called (via the event call channel id tty_ccc_event) from tolts_ttyio_display_.
   It functions to do any cleanup upon the completion of a terminal io message. If the io request was
   for test page number 9, this is a read request folloiwing the message completion. If this is the
   case, or if a quit was signaled during transmission of the last message, a call is made to
   tolts_util_$query to get input from the user. The input requests are processed accordingly. */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_ttyio_end_: proc (event_ptr);


/* External Entries */

dcl  hcs_$wakeup entry (bit (36) aligned,
      fixed bin (71), ptr, fixed bin (35));		/* arg 3 is suppose to be fixed bin (71) */
dcl  (com_err_, ioa_) entry options (variable);
dcl  terminate_process_ entry (char (*), ptr);
dcl  ipc_$reconnect entry (fixed bin (71), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl  tolts_util_$opr_msg entry;
dcl  tolts_util_$query entry (char (*), char (132) aligned, fixed bin, (32) char (28) varying, fixed bin);
dcl  tolts_alm_util_$ascii_to_bci_ entry (char (*), bit (*));
dcl  tolts_pcd_ entry (char (6), char (*));
dcl  tolts_qttyio_ entry (char (*), fixed bin);

/* Entry Parameters */

dcl  event_ptr ptr;

/* Automatic */

dcl  com_string char (132) aligned;
dcl  args (32) char (28) varying;
dcl  ascii_in char (18);
dcl  bcd_out bit (144);
dcl  bcd_opt bit (6 * 84);
dcl  (page, cmd_cnt, c_len, i, j, term_io_req_cnt_hld) fixed bin;
dcl  mep ptr;
dcl  error fixed bin (35);
dcl  q_str char (5);
dcl  NL char (1) int static options (constant) init ("
");

/* structures and based variables */

dcl  bcd_request (4) bit (36) based (addr (bcd_out));
dcl  opt_str char (c_len) based (addr (com_string));


dcl  fnp_num (0:7) char (1) static options (constant) init
      ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  chn_num (0:14) char (2) static options (constant) init
      ("77", "77", "77", "77", "77", "77", "h0", "h1", "h2", "l0", "l1", "l2", "l3", "l4", "l5");
dcl  cdt_fnp char (1);
dcl  (cdt_chn, cdt_subchan) char (2);

dcl  1 event_info based (event_ptr),
       2 causing_event fixed bin (71),
       2 cmp ptr,
       2 sender bit (36),
       2 origin,
         3 signal bit (18) unaligned,
         3 ring bit (18) unaligned,
       2 in_data_pointer ptr;

dcl  1 fatal_desc aligned,
       2 version fixed bin,
       2 fatal_code fixed bin (35);

dcl  1 mes_buf based (mep) aligned,			/* template for a message queue entry */
       2 page fixed bin,				/* test page number issuing io */
       2 nlines fixed bin,				/* number of array elements in message */
       2 cline fixed bin,				/* line number currently being displayed */
       2 lines (nlines) char (136),			/* array of message lines */
       2 nxt_mes char (1);				/* method to get to next message */

/* Builtins */

dcl  (addr, bin, length, ltrim, null, search, substr) builtin;
dcl  iox_$user_io ptr ext;
%page;

      if ^tolts_info.term_io_in_prog then
         return;					/* not mine  forget it */
      mep = event_info.cmp;				/* get currnet message ptr */
      page = mes_buf.page;				/* extract test page number */
      if tolts_info.optflag ^= 0 then q_str = NL || "??? "; /* if quit signaled output "??? " */
      else q_str = "";
      if page = 9 | page = 19 | tolts_info.optflag ^= 0 then do; /* exec read or quit signaled */
         tolts_info.optflag = 0;			/* reset option request flag */
requery:
         call tolts_util_$query (q_str, com_string, c_len, args, cmd_cnt); /* get user input */
         if page = 19 then do;			/* is it local Multics question? */
	  tolts_info.mult_ans = substr (com_string, 1, 28); /* yes copy answer */
	  go to ck_first;
         end;
         if c_len <= 2 then do;			/* if user just typed nl */
ck_first:
	  if ^tolts_info.first_request_done & page ^= 19 then do; /* and initial read not complete */
	     q_str = NL || "??? ";			/* set up questions for requery */
	     go to requery;				/* go ask again */
	  end;
	  call reconnect;				/* enable term io  again */
	  call wakeup (tolts_info.wait_list.wait_event_id (1), null); /* wake up dispatcher */
	  return;
         end;
         else if args (1) = "reprint" then do;		/* user wants to see last message */
	  if page = 9 then				/* it has already been printed */
	     call ioa_ ("^as: Last message was complete and is not available for reprinting",
	      tolts_info.exec);
	  else do;
	     mes_buf.cline = 0;			/* make tolts_ttyio_display_ start at beginning of message */
	     call wakeup (tolts_info.tty_display_event, mep); /* signal restart of message */
	     if tolts_info.first_request_done then	/* if first request complete */
	        call tolts_qttyio_ ("??? ", 9);		/* queue up another read, but don't reconnect issue channel */
	     return;
	  end;
         end;
         else if args (1) = "msg" then			/* user wants to communicate with the operator */
	  call tolts_util_$opr_msg;
         else if args (1) = "E" | args (1) = "e" | substr (args (1), 1, 2) = ".." then do; /* user wants to execute Multics command */
	  com_string = ltrim (substr (com_string, 2));
	  if substr (args (1), 1, 2) = ".." then com_string = substr (com_string, 2);
	  term_io_req_cnt_hld = tolts_info.term_io_req_cnt;
	  tolts_info.term_io_req_cnt = 0;
	  call cu_$cp (addr (com_string), length (com_string), error); /* execute Multics command */
	  tolts_info.term_io_req_cnt = term_io_req_cnt_hld;
         end;

/* check for improper input */

         else if args (1) ^= "test" then		/* input must be "test piccdd" etc */
	  call ioa_ ("^as: (^a) invalid input;^/use ""test xx--""",
	   tolts_info.exec, com_string);
         else if args (2) = "msg" then			/* user wants to communicate with the operator */
	  call tolts_util_$opr_msg;
         else if args (2) = "pcd" then do;		/* user wants to get config */
	  if cmd_cnt = 3 then call tolts_pcd_ (((exec) || "  "), (args (3)));
	  else call tolts_pcd_ (((exec) || "  "), (""));
	  call reconnect;				/* reconnect ipc channel and give pcd a chance to come out */
	  call wakeup (tolts_info.wait_list.wait_event_id (1), null); /* wakeup the dispatcher */
	  return;
         end;
         else if tolts_info.exec = "polt" then		/* if running polts */
	  if search (args (2), "pwl") ^= 1 | length (args (2)) > 11
	   | substr (args (2), 1, 1) ^= "w" & length (args (2)) < 2 then /* improper input? */

	     call ioa_ ("^as: (^a) invalid input, use:^/^a, ^[^a,^;^s^] ^a, ^a, or ^a",

	      tolts_info.exec, com_string, """test piccddooooo""", (tolts_info.first_request_done),
	      """test pxiccddoooo""", """test w""", """test lstal""", """test pcd""");
	  else call test_request;			/* enter test_request */
         else if tolts_info.exec = "molt" then		/* if running molts */
	  if search (args (2), "lmnw") ^= 1		/* if one of these errors */
	   | length (args (2)) > 11
	   | substr (args (2), 1, 1) ^= "w" & length (args (2)) < 2
	   then call ioa_ ("^as: (^a) invalid input, use:^/^a, ^a, ^a,^/^a, ^a, ^a,^/^a, ^a, ^a,^/^a, ^a, ^a,^/^a, ^a, ^a,^/^a, ^a, or ^a",
	      tolts_info.exec, com_string,
	      """test mdciccooooo""", """test mdriccddooooo""", """test mhpiccooooo""",
	      """test mmticcddoooo""", """test mpciccooooo""", """test mpticcddooooo""",
	      """test mtgiccddoooo""", """test mxdciccoooo""", """test mxdriccddoooo""",
	      """test mxhpiccoooo""", """test mxmticcddoooo""", """test mxpciccoooo""",
	      """test mxpticcddoooo""", """test mxtgiccddoooo""", """test nioi""",
	      """test w""", """test lstal""", """test pcd""");
	  else if length (args (2)) > 2 then do;
	     if (substr (args (2), 1, 3) = "mpc" |
	      substr (args (2), 1, 3) = "mdr") &
	      tolts_info.first_request_done then	/* if user attempting to enter more than one page */
	        call ioa_ ("^as: (^a) only one mpc (itr) or mdr test request may be active at one time",
	         tolts_info.exec, com_string);
	     else call test_request;			/* enter test request */
	  end;

	  else call test_request;			/* enter test request */


         else if tolts_info.exec = "colt" then do;	/* if running colts */
	  if search (args (2), "cwl") ^= 1 |
	   length (args (2)) > 11
	   | substr (args (2), 1, 1) ^= "w" & length (args (2)) < 2 then do;
	     call ioa_ ("^as: (^a) invalid input, use: ^/^a, ^a, ^[^a, ^a,^;^2s^] ^a, ^a, or ^a",
	      tolts_info.exec, com_string, """test Cnccssooooo""", """test Cfrspd""",
	      (tolts_info.first_request_done), """test Cxccssoooo""", """test Cxfrspd""",
	      """test w""", """test lstal""", """test pcd""");
	     go to ck_first;
	  end;
	  if search (args (2), "wl") ^= 1
	   & search (args (2), "loew") ^= 2 then do;

	     if search (args (2), "rsp") ^= 0 then do;
	        do j = lbound (tolts_info.pages, 1) to hbound (tolts_info.pages, 1);
		 if ^pages (j).in_use then do;
		    io_info_ptr = addr (pages (j));
		    io_info.test_req.tt = "71"b3;
		    io_info.fnp_num = (bin (substr (args (2), 2, 1)));
		    j = 8;
		 end;
	        end;
	     end;
	     else do;
	        cdt_fnp = fnp_num (bin (substr (args (2), 2, 1)));
	        cdt_chn = chn_num (bin (substr (args (2), 3, 2)));
	        cdt_subchan = substr (args (2), 5, 2);
	        fnp (bin (substr (args (2), 2, 1))).exec_chan = cdt_fnp || "." || "c000";
	        do j = 1 to 8;
		 if substr (fnp (bin (substr (args (2), 2, 1))).cdt_name (j), 1, 5) = "empty" then do;
		    fnp (bin (substr (args (2), 2, 1))).cdt_name (j) = cdt_fnp || "." || cdt_chn || cdt_subchan;
		    j = 8;
		 end;
	        end;
	     end;
	  end;
	  call test_request;
	  if substr (args (2), 2, 3) = "rsp" then io_info.test_req.fnccss = substr (bcd_out, 7, 18);
         end;

         go to ck_first;				/* go reconnect */
      end;
      if page = 0 | page = 10 | tolts_info.exec_term_io_wait then /* if exec io or waiting to abort */
         go to ck_first;				/* go check if first request complete */
      if tolts_info.tadio (page).optrd then do;		/* test page looking for options */
         tolts_info.tadio (page).optrd = "0"b;		/* reset options flag */
         call tolts_util_$query ("", com_string, c_len, args, cmd_cnt); /* get user input */
         if c_len > 0 then do;			/* if something entered.. */
	  call tolts_alm_util_$ascii_to_bci_ (opt_str, bcd_opt); /* convert to bcd */
	  substr (tolts_info.tadio (page).option, 1, c_len * 6) = substr (bcd_opt, 1, c_len * 6); /* move to buffer */
         end;
      end;
      else tolts_info.tadio (page).inuse = "0"b;		/* release this tadio queue entry */
      i, tolts_info.exec_dta_cnt = tolts_info.exec_dta_cnt + 1; /* increment count */
      tolts_info.exec_dta (i).word (1) = tolts_info.tadio (page).return_word (1);
      tolts_info.exec_dta (i).word (2) = tolts_info.tadio (page).return_word (2);
      tolts_info.exec_dta (i).word (3) = tolts_info.tadio (page).return_word (3);
      call reconnect;				/* reconnect ipc channel */
      call wakeup (tolts_info.wait_list.wait_event_id (1), null); /* wake up dispatcher */
      return;					/* thats all folks */
%page;

/* reconnect - internal procedure to reconnect ipc channel */

reconnect: proc;

/* re enable io issuing */

      tolts_info.term_io_in_prog = "0"b;
      tolts_info.term_io_req_cnt = tolts_info.term_io_req_cnt - 1;
      call ipc_$reconnect (tolts_info.tty_issue_event, error);
      if error ^= 0 then do;				/* term process if error */
         call com_err_ (error, "tolts_ttyio_end_", "fatal error, terminating process");
         fatal_desc.version = 0;
         fatal_desc.fatal_code = error;
         call terminate_process_ ("fatal_error", addr (fatal_desc));
      end;
      call iox_$control (iox_$user_io, "start", null, error); /* allow cleanup of any blocks */
   end reconnect;

/* wakeup - internal procedure to issue wakeup to ipc wait channel */

wakeup: proc (e_chan, wakeup_ptr);

dcl  e_chan fixed bin (71);
dcl  wakeup_ptr ptr;

/*   issue wakeup to dispatcher   */

      call hcs_$wakeup (tolts_info.process, e_chan, wakeup_ptr, error);
      if error ^= 0 then do;				/* term process if error */
         call com_err_ (error, "tolts_ttyio_end_", "fatal error, terminating process");
         fatal_desc.version = 0;
         fatal_desc.fatal_code = error;
         call terminate_process_ ("fatal_error", addr (fatal_desc));
      end;
   end wakeup;

/* test_request - internal procedure to convert test request data and queue it up */

test_request: proc;

      ascii_in = args (2);				/* copy data to convert */
      substr (ascii_in, 12, 7) = "10000t/";		/* use coded logical terminal 1 and "t/" tty code */
      call tolts_alm_util_$ascii_to_bci_ (ascii_in, bcd_out); /* convert to bcd */
      i, tolts_info.exec_dta_cnt = tolts_info.exec_dta_cnt + 1; /* increment count */
      tolts_info.exec_dta (i).word (*) = bcd_request (*);	/* move the data to the queue */
      tolts_info.first_request_done = "1"b;		/* set flag for dispatcher */

   end test_request;
%page;
%include tolts_info;

   end tolts_ttyio_end_;
