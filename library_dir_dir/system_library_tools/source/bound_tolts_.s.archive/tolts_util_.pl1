/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Initially coded 6/78 by J. A. Bush
   Modified by Rich Coppola 9/29/81 to return value of iocbp if non-null so
   caller can clean up.
   Modified by R. Fakoury 3/16/83 to add the get_ttl_date entry.
   Modified by R. Fakoury 6/10/83 to add opr_msg facility.
   Modified by R. Fakoury 8/02/83 to fix a typo in opr_msg.
   Modified by R. Fakoury 10/84 to replace the internal proc, find_card with an external entry of find_card,
   and to remove the obsolete entry config.
*/




/****^  HISTORY COMMENTS:
  1) change(1984-11-01,Fakoury), approve(1986-08-21,MCR7514),
     audit(1986-11-17,Martinson), install(1986-12-04,MR12.0-1235):
     to add the dev0_valid entry.
     to change call hcs_$status_long to hcs_$status_minf.
  2) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */




/* tolts_util_ - a group of utility subroutines for TOLTS, MOLTS, POLTS, and ISOLTS */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_util_: proc;


/* External entries */

dcl  decode_clock_value_ entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4));
dcl  (get_wdir_, get_default_wdir_) entry returns (char (168));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  (ioa_, ioa_$nnl, ioa_$rsnnl, com_err_) entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$seek_key entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  opr_query_ entry options (variable);


/* External static */

dcl  iox_$user_input ptr ext;

/* Entry parameters */

dcl  seg_name entry;
dcl  com_string char (132) aligned;
dcl  mess char (*);
dcl  c_args (32) char (28) varying;
dcl  rcode fixed bin (35);
dcl  cmd_cnt fixed bin;
dcl  c_len fixed bin;
dcl  (a_iocbp, c_ptr) ptr;
dcl  config_name char (4);
dcl  in bit (*);
dcl  out char (*) varying;
dcl  bci_len fixed bin;
dcl  c_name char (32);
dcl  exec char (6);
dcl  state char (3);
dcl  ttl_date char (6);

/* Automatic */

dcl  1 o_info like object_info;
dcl  (month, dom, year, dow) fixed bin;
dcl  tod fixed bin (71);
dcl  zone char (4);
dcl  ttl char (6);
dcl  bc fixed bin (24);
dcl  type fixed bin (2);
dcl  (i, j, lp, escape_cnt) fixed bin;
dcl  rec_len fixed bin (21);
dcl  seek_key char (256) varying;
dcl  ename char (32);
dcl  tim char (12);
dcl  cc char (1);
dcl  (temp_ptr, info_ptr, seg_ptr, iocbp) ptr;
dcl  cur_char bit (6);
dcl  bit_cnt fixed bin (24);
dcl  code fixed bin (35);				/* error code */
dcl  info (20) bit (36);
dcl  gki (20) bit (36);

/* Builtins */

dcl  (addr, addrel, before, date, divide, fixed, hbound, length, ltrim,
     null, rtrim, codeptr, ptr, reverse, search, substr, time, unspec, verify) builtin;

/* Based */

dcl  1 rsi like rs_info aligned;

dcl  1 cata_info based (c_ptr) aligned,			/* info structure for cata_sel entry */
       2 n_keys fixed bin,				/* number of multiple keys */
       2 cata_keys (1 refer (cata_info.n_keys)) char (24);	/* multiple key array */


/* Constants */

dcl  opn_ksi fixed bin int static options (constant) init (8);
dcl  bcd_to_ascii char (64) int static options (constant) init
      ("0123456789[#@:>? abcdefghi&.](<\^jklmnopqr-$*);'+/stuvwxyz_,%=""!");
dcl  lib_dir char (168) int static options (constant) init
      (">system_library_tandd");
dcl  WS char (2) int static options (constant) init (" 	");
dcl  NL char (1) int static options (constant) init ("
");
dcl  NP char (1) int static options (constant) init ("");

%page;

/* query - entry to query and get response from user */

query: entry (mess, com_string, c_len, c_args, cmd_cnt);

      cmd_cnt = 0;					/* initilize parameters */
      c_args = "";
m_retry:
      if length (rtrim (mess)) ^= 0 then		/* only print message if there */
         call ioa_$nnl (mess);			/* print out prompt for user */
      com_string = "";				/* clear out last command */
      call iox_$get_line (iox_$user_input, addr (com_string), length (com_string), rec_len, code);
      if code ^= 0 then do;				/* error reading from  terminal */
         call com_err_ (code, "tolts_util_$query", "reading input from user_input, re-enter");
         go to m_retry;
      end;
      substr (com_string, rec_len) = "";		/* strip out new_line */
      c_len = rec_len;				/* set command line length */
      if rec_len = 1 then return;			/* return if no message */

/* separate arguments into arg array */

      lp = 1;					/* start at beginning of line */
      do i = 1 to hbound (c_args, 1) while (lp < rec_len);
         j = length (ltrim (substr (com_string, lp, rec_len), WS)); /* strip off leading white space */
         lp = (rec_len - j) + lp;			/* lp = starting position of next string */
         j = search (substr (com_string, lp), WS);	/* find end of string */
         c_args (i) = substr (com_string, lp, j - 1);
         lp = lp + (j - 1);				/* update line position */
      end;
      cmd_cnt = i - 1;				/* set arg count for user */
      return;
%page;

/* on_off - entry to display greeting or signoff message from executives */

on_off: entry (exec, state, ttl_date);


      tim = time;

/* output message */

      call ioa_ ("^/***^a executive version ^a ^a ^a at ^a", exec, ttl_date, state, date,
       substr (tim, 1, 2) || "." || substr (tim, 3, 3));

      return;
%page;

/* bci_to_ascii - entry to convert bcd with imbedded escape and ignore characters to ascii */

bci_to_ascii: entry (in, out, bci_len);

      out = "";					/* pad output string with blanks */
      escape_cnt = 0;				/* initialize escape_cnt */

      do i = 1 to bci_len;				/* go through entire input string */
         cur_char = substr (in, 6 * (i - 1) + 1, 6);	/* pick up current bcd char */
         if escape_cnt = 2 then			/* if 2 times through here... */
	  go to use_char;				/* convert the character */
         else if cur_char = "77"b3 then			/* escape character */
	  escape_cnt = escape_cnt + 1;		/* increment escape count */
         else if escape_cnt = 1 then do;		/* if only 1 escape... */
	  lp = fixed (cur_char, 6);			/* get slew count */
	  if lp = 0 then lp = 1;
	  if lp >= 16 then				/* if slew to top of page */
	     out = out || NP;			/* set new page charater in out string */
	  else do j = 1 to lp;			/* put in correct number off new lines */
	     out = out || NL;
	  end;
	  escape_cnt = 0;				/* clear out escape cnt */
         end;
         else if cur_char = "17"b3 then			/* ignore character */
	  escape_cnt = 0;
         else do;					/* valid bcd character */
use_char:
	  cc = substr (bcd_to_ascii, fixed (cur_char, 6) + 1, 1); /* extract current char from table */
	  if cc = ")" | cc = "," then do;		/* check for white space before close paren or comma */
	     j = verify (reverse (out), WS);		/* find leading blank or tab */
	     if j ^= 1 then				/* if we found some */
	        out = substr (out, 1, length (out) - j + 1); /* wipe it out */
	  end;
	  out = out || cc;				/* add in current character */
	  escape_cnt = 0;
         end;
      end;

      return;
%page;

/* search - entry to find and return a pointer to a test page */

search: entry (a_iocbp, c_name, c_ptr, c_len, rcode);

      temp_ptr, c_ptr = null;				/* preset return parameters */
      rcode, c_len = 0;
      iocbp = a_iocbp;				/* copy dkfile iocb ptr */
      ename = c_name;				/* copy search name */

/* attempt to initiate the segment first in working dir, home dir and then in sys lib */

      call hcs_$initiate_count ((get_wdir_ ()), ename, "", bit_cnt, 0, temp_ptr, code);
      if temp_ptr = null then				/* no find, check home dir */
         call hcs_$initiate_count ((get_default_wdir_ ()), ename, "", bit_cnt, 0, temp_ptr, code);
      if temp_ptr = null then				/* no find, check sys dir */
         call hcs_$initiate_count (lib_dir, ename, "", bit_cnt, 0, temp_ptr, code);
      if temp_ptr ^= null then do;			/* found it, return to user */
         c_ptr = temp_ptr;				/* copy seg ptr */
         c_len = divide (bit_cnt, 36, 17, 0);
         return;
      end;

/* couldn't find entry as a ssf, now lets check to see if we have a deckfile */

      if iocbp = null then do;			/* deckfile not attached */
         call find_deckfile ((get_wdir_ ()));		/* try to find deckfile in working dir */
         if code ^= 0 then				/* no deck file there, try sys dir */
	  call find_deckfile (lib_dir);
         if code ^= 0 then do;			/* still couln't find it, return */
	  rcode = code;				/* give user the error */
	  return;
         end;
      end;
      call find_record;				/* go find desired record */
      if code = 0 then do;				/* found it ok */
         a_iocbp = iocbp;				/* return good iocb ptr to user */
         c_ptr = rsi.record_ptr;			/* return ptr to deckfile record */
         c_len = divide (rsi.record_length, 4, 17, 0);	/* and record word length */
      end;
      else rcode = code;				/* else return error */
      return;
%page;
/* cata_sel - entry to find all catalog search keys, given search key head */

cata_sel: entry (a_iocbp, c_name, c_ptr, rcode);

      rcode = 0;
      iocbp = a_iocbp;				/* copy dkfile iocb ptr */
      ename = c_name;				/* copy search name */
      info_ptr = addr (info);				/* set info ptrs */
      unspec (info) = "0"b;				/* clear structure first */
      if iocbp = null then do;			/* deckfile not attached */
         call find_deckfile ((get_wdir_ ()));		/* try to find deckfile in working dir */
         if code ^= 0 then				/* no deck file there, try sys dir */
	  call find_deckfile (lib_dir);
         if code ^= 0 then do;			/* still couln't find it, return */
	  rcode = code;				/* give user the error */
	  if iocbp ^= null then
	     a_iocbp = iocbp;			/* let caller clean up */
	  return;
         end;
      end;
      a_iocbp = iocbp;				/* copy iocb ptr back */
      common_sl_info.version = sl_info_version_0;
      common_sl_info.list_type = 1;			/* set to reuse subset */
      common_sl_info.output_descriptors = "1"b;		/* want descriptors */
      common_sl_info.array_limit = 1;			/* 1 element array */
      common_sl_info.desc_arrayp = null;		/* let vfile_ allocate area for storage */
      hi_sl_info.first_head (1).length, hi_sl_info.last_head (1).length = length (rtrim (ename));
      hi_sl_info.first_head (1).kptr, hi_sl_info.last_head (1).kptr = addr (ename);
      call iox_$control (iocbp, "select", addr (info), code); /* get select info */
      if code ^= 0 then do;				/* problem with select */
         rcode = code;
         return;
      end;
      call iox_$position (iocbp, -1, 0, code);		/* position to beginning of file */
      if code ^= 0 then do;				/* problem with select */
         rcode = code;
         return;
      end;
      cata_info.n_keys = common_sl_info.count;		/* copy number of descriptors */
      gk_info_ptr = addr (gki);			/* set info ptr */
      unspec (gki) = "0"b;				/* clear structure first */
      gk_info.input_desc = "1"b;			/* using input descriptors */
      gk_info.reset_pos = "1"b;			/* don't change position */
      do i = 1 to common_sl_info.count;			/* find each key */
         gk_info.descrip = desc_array (i);		/* insert each descriptor */
         call iox_$control (iocbp, "get_key", addr (gki), code);
         if code ^= 0 then do;			/* error */
	  rcode = code;
	  return;
         end;
         cata_info.cata_keys (i) = gk_info.key;		/* copy key */
      end;
      common_sl_info.list_type = 0;			/* set to reuse subset */
      common_sl_info.subset_no = 0;
      common_sl_info.array_limit = 0;			/* 0 element array */
      common_sl_info.desc_arrayp = null;		/* let vfile_ allocate area for storage */
      call iox_$control (iocbp, "select", addr (info), code); /* reset current subset */
      return;					/* thats it folks */
%page;

/* find_deckfile - int procedure to search for tandd_deck_file and return desired record info if found */

find_deckfile: proc (dir);

dcl  deckfile_dir char (168);
dcl  dir char (168);
dcl  type fixed bin (2) init (0);

      call hcs_$status_minf (dir, "tandd_deck_file", 1, type, 0, code);
      if type = 2 then do;				/* found deck file 0 = link, 1 = seg, 2 = dir */

/* attach and open deck file for keyed seq input */

         call iox_$attach_name ("dk_file_sw", iocbp, "vfile_ " || rtrim (dir) || ">tandd_deck_file", null, code);
         if code ^= 0 then return;

         call iox_$open (iocbp, opn_ksi, "0"b, code);	/* attach ok, open it */
         if code ^= 0 then return;

         unspec (rsi) = "0"b;				/* clear structure */
         rsi.version = rs_info_version_2;		/* set proper version for vfile_ */
         call iox_$control (iocbp, "record_status", addr (rsi), code); /* get record info */
         if code ^= 0 then return;

         call hcs_$fs_get_path_name (rsi.record_ptr, deckfile_dir, 0, "", code); /* code always = 0 */

         if before (deckfile_dir, ">tandd_deck_file") ^= lib_dir then
	  call ioa_ ("Using ^a", deckfile_dir);
      end;

   end find_deckfile;

/* find_record - int precdure to find desired record in deckfile */

find_record: proc;

      seek_key = ename;				/* copy search key */
      call iox_$seek_key (iocbp, seek_key, rec_len, code);	/* find record */
      if code = 0 then do;				/* record exists, get record info */
         unspec (rsi) = "0"b;				/* clear structure */
         rsi.version = rs_info_version_2;		/* set proper version for vfile_ */
         call iox_$control (iocbp, "record_status", addr (rsi), code); /* get record info */
      end;

   end find_record;
%page;

/* find_card - external procedure to search config deck for desired config card */

find_card: entry (config_name, cardp);

%include config_deck;

dcl  config_deck_end fixed bin based (addr (config_card.word));

      if cardp = null then				/* if pointer is null, set it  */
         cardp = addr (config_deck$);
      else cardp = addrel (cardp, 16);			/* else go to next card */

      do while (config_deck_end ^= -1);			/* go through entire deck if necessary */
         if config_card.word = config_name then		/* found the right card */
	  return;
         else cardp = addrel (cardp, 16);		/* get next card */
      end;
      cardp = null;					/* did'nt find it */
      return;
%page;

/* get_ttl_date - entry to find date a obj seg was compiled */

get_ttl_date: entry (seg_name, ttl_date);



      seg_ptr = ptr (codeptr (seg_name), 0);
      o_info.version_number = 2;
      call hcs_$status_mins (seg_ptr, type, bc, code);
      call object_info_$display (seg_ptr, bc, addr (o_info), code);
      call decode_clock_value_ (o_info.compile_time, month, dom, year, tod, dow, zone);
      year = year - 1900;
      call ioa_$rsnnl ("^d^[0^]^d^[0^]^d", ttl, i, year, (month < 10), month, (dom < 10), dom);
      ttl_date = ttl;
      return;
%page;

/* opr_msg - internal procedure to send messages to the operator */


opr_msg: entry;

dcl  tolts_util_$query entry (char (*), char (132) aligned, fixed bin, (32) char (28) var, fixed bin);
dcl  d fixed bin (71) init (1);
dcl  c_string char (132) aligned;
dcl  (clen, c_cnt) fixed bin;
dcl  cargs (32) char (28) varying;


      call ioa_ ("^/enter 1 line message of up to 80 characters");
      call tolts_util_$query ("??? ", c_string, clen, cargs, c_cnt);
      if substr (c_string, clen - 1, 1) = "?" then do;
         opr_query_info.q_sw = "1"b;
         opr_query_info.prim = "";
         opr_query_info.alt = "";
         opr_query_info.r_comment = "Please reply: x oqr followed by message of up to 80 characters";
         if clen > 80 then clen = 80;			/* truncate message length if necessary */
         call opr_query_ (addr (opr_query_info), substr (c_string, 1, clen));
         call ioa_ ("^a", opr_query_info.answer);
      end;
      else do;
         opr_query_info.q_sw = "0"b;			/* no operator response needed */
         call opr_query_ (addr (opr_query_info), substr (c_string, 1, clen));
      end;
      return;


%page;
/*
   The following function returns the value of the first
   disk driver in a string .
*/

dev0_valid: entry (cdp, Model) returns (bit (1));


dcl  (Model, nnames) fixed bin;
dcl  cdp ptr;
dcl  1 cd_model_info based (cdp) aligned,
       2 count fixed bin,
       2 names (nnames) aligned,
         3 model fixed bin,
         3 name char (8),
         3 dev_0_valid bit (1);


      nnames = cd_model_info.count;
      do i = 1 to cd_model_info.count while (cd_model_info.names (i).model ^= Model);
      end;
      if cd_model_info.names (i).dev_0_valid then return ("1"b);
      else return ("0"b);

%page;
%include ak_info;
%page;
%include object_info;
%page;
%include opr_query_info;
%page;
%include rs_info;
%page;
%include select_info;
%page;
%include status_structures;



   end tolts_util_;

