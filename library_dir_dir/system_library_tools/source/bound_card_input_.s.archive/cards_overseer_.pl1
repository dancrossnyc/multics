/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

cards_overseer_:
     procedure options (separate_static);

/* This is an overseer for the SysDaemon process whose sole responsibility is to read
   card decks for users. All it does is attach the card reader and call the read_cards_
   subroutine. Its principal reason for existence is to prevent the card daemon from
   being used at command level.
*/
/* Modified February, 1975 by S. Vestal for security fix */
/* Modified August, 1975 by J. C. Whitmore for new card dim interface */
/* Modified April, 1976 by J. C. Whitmore to resetread after a quit */
/* Modified January, 1978 by DRV to fix bug in cleanup of test entry */
/* Modified January 1978 by J. C. Whitmore to request station id and use iox_ for input */
/* Modified 1984-08-17 by E. Swenson for version 2 PNTs. */

	dcl     com_err_		 entry options (variable);
	dcl     condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$arg_count	 entry () returns (fixed bin);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     debug		 entry;
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     get_at_entry_	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     read_password_	 entry (char (*), char (*));
	dcl     ioa_$ioa_stream	 entry options (variable);
	dcl     ioa_$ioa_stream_nnl	 entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     ios_$attach		 entry (char (*) aligned, char (*), char (*), char (*), bit (72) aligned);
	dcl     (
	        ios_$setsize,
	        ios_$getsize
	        )			 entry (char (*) aligned, fixed bin, bit (72) aligned);
	dcl     ios_$detach		 entry (char (*) aligned, char (*), char (*), bit (72) aligned);
	dcl     ios_$resetread	 entry (char (*), bit (72) aligned);
	dcl     iox_$user_input	 ext ptr;
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     logout		 entry;
	dcl     new_proc		 entry;
	dcl     pool_manager_$init	 entry (char (*) aligned, fixed bin, bit (36) aligned, fixed bin (35));
	dcl     pool_manager_$clean_pool
				 entry (char (*) aligned, fixed bin, fixed bin, fixed bin (35));
	dcl     read_cards_		 entry (char (*) aligned, ptr, char (*), bit (1) aligned, fixed bin (35));
	dcl     read_cards_$set_station
				 entry (char (*), fixed bin (35));
	dcl     scramble_		 entry (char (8)) returns (char (8));
	dcl     standard_default_handler_
				 entry (ptr, char (*), ptr, ptr, bit (1) aligned);
	dcl     validate_card_input_$station
				 entry (char (*), char (*), char (*), fixed bin (35));

	dcl     (any_other, cput, alrm, finish, cleanup, resume)
				 condition;

	dcl     (addr, null, ltrim, substr)
				 builtin;

	dcl     answer		 char (80);
	dcl     age		 fixed bin;
	dcl     a_card_dim		 char (*);
	dcl     a_card_device	 char (*);
	dcl     card_device		 char (32) init ("rdra");
	dcl     card_dim		 char (32) init ("crz");
	dcl     code		 fixed bin (35);
	dcl     dev		 char (32);
	dcl     dim		 char (32);
	dcl     stream_name		 char (32) aligned;
	dcl     iocbp		 ptr;
	dcl     i			 fixed bin;
	dcl     ig		 char (4);
	dcl     nchar		 fixed bin;
	dcl     password		 char (32);
	dcl     station		 char (32);
	dcl     status		 bit (72) aligned;
	dcl     error_msg		 char (132);	/* for message from validate_card_input_ */
	dcl     root_dir		 char (168) aligned init ("System_Card_Pool");
						/*  dir into which we look for card_pool_root */
	dcl     temp_password	 char (8);	/* temporary for password manipulation */
	dcl     test_sw		 bit (1) aligned int static init ("0"b);
						/*  =1 if testing */
	dcl     user_mode		 bit (36) aligned int static init ("100"b || (33)"0"b) options (constant);

	dcl     quit_flag		 bit (1) int static init ("0"b);
	dcl     recursion_flag	 fixed bin int static init (0);
	dcl     resume_label	 label int static;

	dcl     error_table_$ionmat	 ext static fixed bin (35);

	dcl     1 stat		 aligned based (addr (status)),
		2 word1		 fixed bin (35),
		2 iocode		 fixed bin (35);

	dcl     1 stream_info	 aligned like card_stream_info;
						/* allocate the structure for read_cards_ */

%include card_stream_info;

/*  Normal entry point  */

	go to start;

/*  test entry point  */

test:
     entry (a_root_dir, a_card_dim, a_card_device);

	dcl     a_root_dir		 char (*);	/*  input arg for system storage location */

	if cu_$arg_count () ^= 3
	then do;					/* must have 3 args for this entry */
		call ioa_ (
		     "cards_overseer_:  USAGE:  cards_overseer_$test  card_pool_root_dir  card_dim  card_device");
		return;
	     end;
	test_sw = "1"b;				/*  testing in progress */
	root_dir = a_root_dir;			/*  copy the root */
	card_dim = a_card_dim;
	card_device = a_card_device;

start:
	stream_info.n_streams = 0;			/* no streams defined yet */
	stream_info.name (*) = "undefined";
	stream_info.format (*) = "";
	stream_info.control_stream = "undefined";

/* set up a condition wall - we will handle all conditions */

	on cleanup call clean_up;

	on any_other call cards_handler;		/* for all other conditions */

	resume_label = no_attach;
	quit_flag = "0"b;

/* if using message coordinator, attach error_output stuff */

	call get_at_entry_ ("user_i/o", dim, dev, ig, code);
	if dim = "mrd_"
	then do;
		call ios_$attach ("error_i/o", "mrd_", dev, "", status);
		call ios_$attach ("error_output", "syn", "error_i/o", "", status);
	     end;

	iocbp = iox_$user_input;

re_init:
	call ios_$attach ("card_in_stream", card_dim, card_device, "", status);
	if stat.word1 ^= 0				/* oh well */
	then if stat.word1 ^= error_table_$ionmat	/* let it ride if already attached */
	     then do;
		     call com_err_ (stat.word1, "cards_overseer_", "^/Could not attach card reader on channel ^a.",
			card_device);
		     call ioa_ ("Card Daemon: Enter new device channel or type ""quit"".");
		     answer = "";			/* clear junk */
		     call iox_$get_line (iocbp, addr (answer), 80, nchar, code);
		     if code ^= 0
		     then go to no_attach;
		     card_device = substr (answer, 1, nchar - 1);
						/* assume a new channel */
		     if card_device ^= "quit"
		     then go to re_init;		/* try the new channel */

no_attach:
		     call ioa_ ("Card Input Daemon cannot run.");
		     go to exit;
		end;

	if test_sw
	then call ios_$setsize ("card_in_stream", 972, status);

	stream_info.control_stream = "mcc_card_input_";	/* we use this to read control cards */
	stream_info.n_streams = 4;			/* we will support 4 input formats */

	stream_info.format (1) = "mcc";		/* first describe the MCC format stream */
	stream_info.name (1) = "mcc_card_input_";	/* this is also the control stream */

	stream_info.format (2) = "viipunch";		/* next we have the 7 punch format */
	stream_info.name (2) = "viipunch_card_input_";

	stream_info.format (3) = "raw";		/* next is the raw card format */
	stream_info.name (3) = "raw_card_input_";

	stream_info.format (4) = "rmcc";		/* last is rmcc for compatability with remote input */
	stream_info.name (4) = "mcc_card_input_";	/* this is the same as mcc format */

/*	now attach the format dims as we said above */

	stream_name = "mcc_card_input_";		/* use a dummy variable for use in error msg */

	call ios_$attach (stream_name, "mcc_", "card_in_stream", "", status);
	if stat.word1 ^= 0
	then if stat.word1 ^= error_table_$ionmat
	     then do;				/* if attached, assume it is ok */
attach_err:
		     call com_err_ (stat.word1, "cards_overseer_", "^/Unable to attach ^a stream.", stream_name);
		     go to exit;			/* at this point we quit  */
		end;

	stream_name = "viipunch_card_input_";

	call ios_$attach (stream_name, "viipunch_", "card_in_stream", "", status);
	if stat.word1 ^= 0
	then if stat.word1 ^= error_table_$ionmat
	     then go to attach_err;			/* if attached, assume it is ok */

	stream_name = "raw_card_input_";

	call ios_$attach (stream_name, "raw_", "card_in_stream", "", status);
	if stat.word1 ^= 0
	then if stat.word1 ^= error_table_$ionmat
	     then go to attach_err;			/* if attached, assume it is ok */

	do i = 1 to stream_info.n_streams;		/* get the element size for each format stream */
	     call ios_$getsize (stream_info.name (i), stream_info.el_size (i), status);
	     if stat.word1 ^= 0
	     then do;
		     call com_err_ (stat.word1, "cards_overseer_", "^/Unable to get element size for ^a stream.",
			stream_info.name (i));
		     go to no_attach;		/* give the bad news message */
		end;
	end;

	call pool_manager_$init (root_dir, 10, user_mode, code);
	if code ^= 0
	then do;
		call com_err_ (code, "cards_overseer_", "^/Could not initialize pool.");
		go to exit;
	     end;

/* ask the operator for the reader station and validate its password */

	do i = 1 to 5;				/* try five times at most */
	     station, password = "";			/* clear any junk */
	     call ioa_ ("Card Daemon: enter Station_id");
	     call iox_$get_line (iocbp, addr (station), 80, nchar, code);
	     if code ^= 0
	     then go to no_attach;
	     station = substr (station, 1, nchar - 1);
	     call read_password_ ("Enter station password:", password);

	     if password ^= ""
	     then do;
		     temp_password = password;
		     password = scramble_ (temp_password);
		     temp_password = "";
		end;

	     call validate_card_input_$station (station, password, error_msg, code);
	     if code = 0
	     then go to set_station;			/* all was well */

	     call ioa_ ("***:  ^a", error_msg);
	end;
	call ioa_ ("Card Daemon cannot run.");
	go to exit;				/* that's all folks */

set_station:
	call read_cards_$set_station (station, code);	/* pass on the good station name */
	call iox_$control (iocbp, "quit_enable", null, code);
	resume_label = ask;				/* we are ready to come to command level after errors */

ask:
	recursion_flag = 0;				/* we are at the base stack frame */
	quit_flag = "0"b;

	call command_level;				/*  ask the operator what he wants to do */

	call ios_$resetread ("card_in_stream", status);	/* throw out any previous cards */
	if stat.word1 ^= 0
	then do;
		call com_err_ (stat.word1, "cards_overseer_",
		     "^/Invalid resetread to card dim.  Card Daemon cannot run.");
		go to exit;
	     end;

	call read_cards_ (root_dir, addr (stream_info), "user_output", test_sw, code);
	if code ^= 0
	then call com_err_ (code, "cards_overseer_");

	go to ask;				/* what do we do next? */



/* all done, detach reader and log out */

exit:
	call clean_up;				/* detach the streams */

	if test_sw
	then return;
	else call logout;


/* ============================================================================================== */


clean_up:
     proc;

	dcl     status		 bit (72) aligned;	/* use some local variables */
	dcl     i			 fixed bin;

	do i = 1 to stream_info.n_streams;		/* detach the format streams */

	     call ios_$detach (stream_info.name (i), "", "", status);

	end;

	call ios_$detach ("card_in_stream", "", "", status);

     end clean_up;

command_level:
     proc;

/*  This is the procedure that implements card daemon commands */

get_line:
	call ioa_ ("Card Daemon: Command?");

read_again:
	answer = "";
	call iox_$get_line (iocbp, addr (answer), 80, nchar, code);
	if code ^= 0
	then go to no_attach;

	answer = substr (answer, 1, nchar - 1);
	answer = ltrim (answer);

	if answer = ""
	then go to read_again;

	if answer = "."
	then go to get_line;

	if answer = "start"				/* only valid after a quit */
	then if quit_flag
	     then return;
	     else go to only_after_quit;

	if answer = "read_cards"
	then /* not valid after a quit */
	     if ^quit_flag
	     then return;
	     else do;
		     call ioa_ ("The read_cards command is not valid while processing cards. Use start.");
		     go to get_line;
		end;

	if answer = "reinit"
	then do;
		call clean_up;
		quit_flag = "0"b;
		go to re_init;
	     end;

	if answer = "logout"
	then go to exit;

	if answer = "abort"
	then if quit_flag
	     then do;
		     quit_flag = "0"b;
		     go to resume_label;
		end;
	     else go to only_after_quit;

	if test_sw
	then if answer = "return"
	     then go to exit;

	     else if answer = "debug"
	     then do;
		     call ioa_ ("calling debug");
		     call debug;
		     go to get_line;
		end;

	if answer = "clean_pool"
	then do;					/* time for garbage collection */
		call ioa_ ("Enter retention time in days (or 0 to abort):");
		answer = "";
		call iox_$get_line (iocbp, addr (answer), 80, nchar, code);
		if code ^= 0
		then go to no_attach;

		answer = substr (answer, 1, nchar - 1);
		age = cv_dec_check_ ((answer), code);
		if code ^= 0
		then do;
			call ioa_ (
			     "The allowed age of segments to remain in the pool must be a decimal number of days.");
			go to get_line;
		     end;

		if age = 0
		then go to get_line;
		if age < 1
		then do;
			call ioa_ ("The retention time cannot be less than 1 day.");
			go to get_line;
		     end;

		call pool_manager_$clean_pool (root_dir, age, 1, code);
						/* allow 1 page grace quota */
		if code ^= 0
		then call com_err_ (code, "cards_overseer_");
		go to get_line;
	     end;

	if answer = "help"
	then do;
		call ioa_ ("^/** Card Daemon Commands **^/");
		call ioa_ ("read_cards   - begin read operations");
		call ioa_ ("start        - continue after a quit");
		call ioa_ ("logout       - log out the Card Daemon");
		call ioa_ ("clean_pool   - garbage collect the card pool");
		call ioa_ ("reinit       - re-attach the card reader");
		call ioa_ ("abort        - halt current reading after a quit");

		if test_sw
		then do;
			call ioa_ ("return");
			call ioa_ ("debug");
		     end;
		go to get_line;
	     end;

	call ioa_ ("Illegal command: ^a", answer);

	go to get_line;

only_after_quit:
	call ioa_ ("The ^a command is only valid during interrupted card reading.", answer);

	go to get_line;

     end command_level;

cards_handler:
     proc;

/* Unclaimed signal handler. Will print default_error_handler-type message and ask if more
   *  cards are to be read */

	dcl     mcptr		 ptr;
	dcl     condition		 char (32);
	dcl     coptr		 ptr;
	dcl     info_ptr		 ptr;
	dcl     1 cond_info		 aligned,
%include cond_info;

	dcl     code		 fixed bin (35);


	cond_info.version = 1;			/* set the version number for the subr */

	call find_condition_info_ (null, addr (cond_info), code);

	condition = cond_info.condition_name;
	mcptr = cond_info.mcptr;
	coptr = cond_info.wcptr;
	info_ptr = cond_info.infoptr;

	if condition = "mme2"
	then if test_sw
	     then do;
		     call continue_to_signal_ (code);
		     return;
		end;

	if condition = "finish"
	then do;					/* now for the system conditions */
call_sdh:
		call standard_default_handler_ (mcptr, condition, coptr, infoptr, "0"b);
		return;
	     end;

	if condition = "cput"
	then go to call_sdh;
	if condition = "alrm"
	then go to call_sdh;

	if condition = "command_question"
	then return;
	if condition = "command_error"
	then return;

	on cleanup quit_flag = "0"b;			/* be sure this gets reset */

	if condition = "card_command_level"
	then do;					/* we want to go to command level */
		quit_flag = "1"b;			/* this allows different commands */
		call ioa_ ("Use the ""clean_pool"" and ""start"" commands to continue.");
		call command_level;
		quit_flag = "0"b;			/* reset what we did */
		return;
	     end;

	if condition = "quit"
	then do;					/* we'll handle quits ourselves, else big trouble */

		call ios_$resetread ("user_i/o", status);
						/* clear any input junk */

		if quit_flag
		then do;				/* avoid multiple quits */
			call ioa_$ioa_stream ("error_output", "QUIT still in progress.");
			call iox_$control (iocbp, "start", null, code);
			return;
		     end;
		call ioa_ ("QUIT");
		quit_flag = "1"b;

		call command_level;			/* see what operator wants */

		quit_flag = "0"b;			/* we are done */
		call iox_$control (iocbp, "start", null, code);
		return;
	     end;

	on resume go to return_label;

	if recursion_flag ^= 0
	then do;					/* compound unclaimed signals, can't handle */
		call com_err_ (0, "cards_handler",
		     "Condition ^a signalled while handling unclaimed signal. Process terminated.", condition);
		if test_sw
		then do;
			call ioa_ ("Calling debug");
			call debug;
			return;
		     end;

		call new_proc;
	     end;

	recursion_flag = 1;

	call ioa_ ("Cards handler: condition ^a intercepted.", condition);

	call condition_interpreter_ (null, null, 0, 3, mcptr, condition, coptr, info_ptr);

/* if we got a message, print it out */

	if test_sw
	then do;
		call ioa_ ("Calling debug");
		call debug;
	     end;

	go to resume_label;

return_label:
	recursion_flag = 0;				/* reset the flag and ... */
	return;					/* then do a clean return */

     end cards_handler;

     end cards_overseer_;
