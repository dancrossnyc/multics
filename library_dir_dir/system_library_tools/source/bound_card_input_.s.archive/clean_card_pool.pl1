/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


clean_card_pool: proc;

/* Originally written in Feb 1975 by Stan C. Vestal */

dcl  age fixed bin;					/*  age of entries to delete */
dcl  age_flag bit (1) aligned init ("0"b);		/*  on if -age specified */
dcl  arglen fixed bin;				/*  length of an argument */
dcl  argptr ptr init (null);				/*  pointer to argument */
dcl  argstr char (arglen) based (argptr);		/*  argument overlay */
dcl  card_dir char (168) aligned int static init ("System_Card_Pool"); /* path for the card pool root */
dcl  code fixed bin (35);				/*  error return code */
dcl  default_npages fixed bin;			/*  default grace_quota */
dcl  entry char (15);				/*  entryname of the entry point called */
dcl  grace_flag bit (1) aligned init ("0"b);		/*  on if -grace_quota specified */
dcl  grace_quota fixed bin;				/*  quota to leave on undeleted pool dirs */
dcl  i fixed bin;					/*  loop index */
dcl  keyword char (168) aligned;			/*  pool name */
dcl  nargs fixed bin;				/*  number of arguments called with */
dcl  tape_dir char (168) aligned int static init ("System_Tape_Pool"); /* path for the tape pool root */
dcl (error_table_$wrong_no_of_args,
     error_table_$noarg,
     error_table_$bad_arg) ext fixed bin (35);

dcl (substr, null) builtin;

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  pool_manager_$clean_pool entry (char (*) aligned, fixed bin, fixed bin, fixed bin (35));
dcl (com_err_, ioa_) entry options (variable);


/*  */

/*  clean_card_pool entry point */

	entry = "clean_card_pool";			/*  for com_err_ calls */
	keyword = card_dir;
	default_npages = 0;				/* leave no spare pages for cards */
	go to COMMON;


/*  clean_tape_pool entry  */

clean_tape_pool: entry;

	entry = "clean_tape_pool";
	keyword = tape_dir;
	default_npages = 50;			/* more sharing in the tape pool */


/*  Common processing */

COMMON:
	grace_quota = default_npages;			/*  assign the defaults in case user supplies no arguments */
	age = -1;					/* start with an illegal value to be sure it is set */

	call cu_$arg_count (nargs);
	if nargs = 0 then go to PRINT_HELP;		/*  give the user some advice */

	if nargs ^= 2 & nargs ^= 4 then do;		/*  arguments must be in pairs */
	     code = error_table_$wrong_no_of_args;
	     go to ERROR;
	end;

	do i = 1 to nargs;				/*  process the arguments */
	     call cu_$arg_ptr (i, argptr, arglen, code);
	     if code ^= 0 then go to ERROR;
	     if age_flag then do;			/*  already seen the -age argument */
		age_flag = "0"b;
		age = cv_dec_check_ (argstr, code);	/*  this argument must be ndays */
		if code ^= 0 | age < 0 then go to arg_err;
		go to end_arg_loop;
	     end;

	     if grace_flag then do;			/*  already seen the -grace_quota argument */
		grace_flag = "0"b;
		grace_quota = cv_dec_check_ (argstr, code);
		if code ^= 0 | grace_quota < 0 then go to arg_err;
		go to end_arg_loop;
	     end;

	     if argstr = "-age" then do;		/*  -age found */
		age_flag = "1"b;
		go to end_arg_loop;
	     end;

	     if argstr = "-quota" then do;
		grace_flag = "1"b;			/*  -quota found */
		go to end_arg_loop;
	     end;


arg_err:

	     code = error_table_$bad_arg;		/*  unknown argument */
	     call com_err_ (code, entry, "^a", substr (argstr, 1, arglen));
	     return;
end_arg_loop:
	end;

	if age < 0 then do;				/* true if age arg was not given */
	     call com_err_ (error_table_$noarg, entry, "The ""-age N"" control arg must be given.");
	     return;
	end;


	code = 0;					/*  initialize the return code */

	call pool_manager_$clean_pool (keyword, age, grace_quota, code);

ERROR:	if code ^= 0 then do;
	     call com_err_ (code, entry);
	     return;
	end;

	call ioa_ ("All entries older than ^d days have been removed.", age);

	return;


/*  help for operators */

PRINT_HELP:
	call ioa_ ("Usage is:   ^a -age ndays [-quota npages]", entry);

	call ioa_ ("Where ndays is the time segments are allowed to remain in the pool, and npages
is the amount of unused quota for sharing among users of an access class.
When quota is not specified, the default is ^d pages.", default_npages);

	return;


test_card_pool: entry (dir);				/* entry to set the card pool root dirname */

dcl  dir char (*);

	card_dir = dir;
	return;


test_tape_pool: entry (dir);				/* entry to set the tape pool root dirname */

	tape_dir = dir;
	return;

     end clean_card_pool;
