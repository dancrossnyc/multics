/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

read_cards_:
     proc (root, stream_info_ptr, error_stream, test, a_code);

/* Standard card input procedure for Bulk card input and Remote Job Entry */

/* Modified Oct. 1977 by DRV to add new control card formats and RJE function */
/* Modified Jan. 1978 by J. C. Whitmore for minor bug fixes and to restore deletion of aborted decks */
/* Modified 5/78 by DRV to change calling sequence to validate_card_input_ for card input password changing */
/* Modified 12/78 by DRV for general bug fixes */
/* Modified by J. C. Whitmore, 3/79, for several gross bug fixes */
/* Modified by J. C. Whitmore, 5/79, to fix the blank password bug */
/* Modified by J. C. Whitmore, 3/80, to allow 2 EOF records between decks (for HASP) */
/* Modified: 8 October 1981 by G. Palter to bypass the "classic" segment to MSF conversion problem */
/* Modified 1984-08-16 by E. Swenson for Version 2 PNTs. */
/* Modified 1984-12-27 by Keith Loepere for version 2 create_branch_info. */
/* Modified: 03 March 1985 by C. Marker to fix problem where the use of AF brackets or semicolons on the ++RJECONTROL and ++RJEARGS could cause the Multics server to execute random commands. */

	dcl     error_stream	 char (*);	/*  message stream for the caller */
	dcl     a_prt_rqt		 char (*);
	dcl     a_station		 char (*);
	dcl     root		 char (*);	/*  card_pool_root directory */
	dcl     test		 bit (1);		/*  =1 if in test mode */
	dcl     a_code		 fixed bin (35);
	dcl     a_pun_rqt		 char (*);

	dcl     absin_ename		 char (32);
	dcl     absin_online	 bit (1);
	dcl     absin_pname		 char (168) var;
	dcl     absout_pname	 char (168) var;
	dcl     password		 char (8);
	dcl     new_password	 char (8);
	dcl     temp_password	 char (8);
	dcl     aclec		 fixed bin;
	dcl     add_nl		 bit (1);
	dcl     aim_string		 char (720) var;
	dcl     bc		 fixed bin (24);	/*  bit count of seg */
	dcl     cancel_rje		 bit (1);
	dcl     card_buffer		 char (100) aligned;/* read buffer for character input */
	dcl     card_image		 char (160) var;
	dcl     output_string	 char (string_len) based (deckp);
	dcl     string_len		 fixed bin;
	dcl     deck_char_pos	 (200) char (1) based (deckp);
						/* actually only 80 will be used at a time */
	dcl     remaining_chars	 fixed bin (24);
	dcl     left		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     command		 char (1000) var;
	dcl     component		 fixed bin;
	dcl     contin		 bit (1);
	dcl     control_iocbp	 ptr;
	dcl     deck_auth		 bit (72);
	dcl     deck_format		 char (12);	/* requested format form control card */
	dcl     deck_name		 char (32) var;	/*  user supplied name of deck(truncated to 32 chars) */
	dcl     deck_name_prefix	 char (32) var;
	dcl     deckp		 ptr;
	dcl     dirname		 char (168);	/*  pathname of personid directory in pool */
	dcl     done		 bit (1);
	dcl     element_size	 fixed bin;	/* element size for deck format */
	dcl     epilogue_string	 char (256) var;
	dcl     error_iocbp		 ptr;
	dcl     error_msg		 char (132);	/*  message from validate_card_input_ */
	dcl     fcbp		 ptr;
	dcl     field		 (40) char (80) var;
	dcl     field_begin		 fixed bin;
	dcl     field_cnt		 fixed bin;
	dcl     field_len		 fixed bin;
	dcl     header_len		 fixed bin;
	dcl     header_string	 char (600) var;
	dcl     i			 fixed bin;
	dcl     ignore		 fixed bin (35);
	dcl     input_iocbp		 ptr;
	dcl     input_modes		 char (256);
	dcl     input_mode_bits	 bit (36);
	dcl     control_mode_bits	 bit (36);
	dcl     j			 fixed bin;
	dcl     k			 fixed bin;
	dcl     key		 char (32) var;
	dcl     lnd		 fixed bin;	/*  length of new_deck_name with tag */
	dcl     long		 char (100);	/*  space to expand an error_table_ code */
	dcl     lower_case		 bit (1);
	dcl     mode		 fixed bin;
	dcl     nel		 fixed bin (24);
	dcl     nelt		 fixed bin (24);	/*  number of elements transmitted */
	dcl     num_chars_rec	 fixed bin (24);
	dcl     new_deck_name	 char (32);	/*  internal name of deck */
	dcl     overwrite		 bit (1);
	dcl     person		 char (32);	/* person part of personid */
	dcl     personid		 char (32);
	dcl     pool_open		 bit (1);
	dcl     proc_auth		 bit (72);	/*  access class of the process */
	dcl     project		 char (32);	/* and the project part */
	dcl     rje_arg_string	 char (256) var;
	dcl     rje_control_string	 char (256) var;
	dcl     scan_done		 bit (1);
	dcl     prior_read_aborted	 bit (1);		/* flag to attempt to sync control  cards */
	dcl     short		 char (8);	/*  dummy for convert_status_code_ */
	dcl     string		 char (160) var;
	dcl     tag		 fixed bin;	/*  dupe deck counter */
	dcl     trailer_len		 fixed bin;
	dcl     trailer_string	 char (600) var;
	dcl     trim		 bit (1);
	dcl     uid		 char (32) var;	/*  unique ID from first and last cards */

	dcl     (record_quota_overflow, card_command_level, cleanup, command_error, out_of_bounds)
				 condition;
	dcl     any_other		 condition;

	dcl     1 header		 aligned,
		2 system_lines	 (6) char (80) var
				 init ("&command_line off", "rdf;rje_args$set  prt_rqt", "rje_args$set  pun_rqt",
				 "rje_args$set station", "&command_line on",
				 "set_epilogue_command ""dp -dl -rqt [rje_args prt_rqt] [user absout]"";rdn"),
		2 user_lines	 (1) char (120) var init ("");

	dcl     1 trailer		 aligned,
		2 system_lines	 (1) char (80) var init ("logout"),
		2 user_lines	 (1) char (120) var init ("");


	dcl     1 count_structure	 aligned,		/* structure used for the get_count control order */
		2 line		 fixed bin,	/* most fields are pads, because this structure */
		2 page_len	 fixed bin,	/* is based on the printer defined structure */
		2 lmarg		 fixed bin,	/* shown in prt_order_info.incl.pl1 */
		2 rmarg		 fixed bin,
		2 cards		 fixed bin (35),	/* this is the normal line count field */
		2 page_count	 fixed bin;


	dcl     1 cond_info		 aligned,
%include cond_info;

	dcl     1 command_error_info	 aligned based (cond_info.infoptr),
%include cond_info_structure;
	2 name_ptr ptr, 2 name_lth fixed bin, 2 errmess_ptr ptr, 2 errmess_lth fixed bin, 2 max_errmess_lth fixed bin,
	     2 print_sw bit (1);

	dcl     1 acle		 (2) aligned,	/*  ACL entry */
		2 name		 char (32),
		2 mode		 bit (36),
		2 pad		 bit (36),
		2 code		 fixed bin (35);

	dcl     control_modes	 char (32) int static init ("^add_nl,lower_case,^trim.") options (constant);
	dcl     tools_dir		 char (32) var int static init (">system_library_tools") options (constant);
	dcl     space		 char (1) int static init (" ") options (constant);
	dcl     NL		 char (1) int static options (constant) init ("
");

dcl SPECIAL_CHARACTERS char (8) static init ("()[];
") options (constant);
	dcl     tell_user		 bit (1) int static init ("1"b) options (constant);

	dcl     silent		 bit (1) int static init ("0"b) options (constant);
	dcl     data		 fixed bin int static init (1);
	dcl     rje		 fixed bin int static init (2);
	dcl     prt_rqt		 char (32) var init ("printer") int static;
	dcl     pun_rqt		 char (32) var init ("punch") int static;
	dcl     station		 char (32) var int static init ("reader");

	dcl     error_message	 char (command_error_info.errmess_lth) based (command_error_info.errmess_ptr);

	dcl     1 local_cbi		 aligned like create_branch_info auto;

	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     error_table_$short_record
				 ext fixed bin (35);
	dcl     error_table_$end_of_info
				 fixed bin (35) ext;
	dcl     error_table_$ai_restricted
				 ext static fixed bin (35);
	dcl     error_table_$eof_record
				 ext fixed bin (35);
	dcl     error_table_$namedup	 ext static fixed bin (35);

	dcl     card_util_$modes	 entry (char (*), bit (36), char (*), fixed bin (35));
	dcl     card_util_$translate	 entry (bit (36), char (*) var);
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     scramble_		 entry (char (8)) returns (char (8));
	dcl     send_mail_		 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     validate_card_input_$user
				 entry (char (*), char (*), char (*), char (*), char (*), fixed bin, char (*),
				 fixed bin (35));
	dcl     suffixed_name_$make	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     msf_manager_$adjust	 entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
	dcl     aim_check_$equal	 entry (bit (72), bit (72)) returns (bit (1));
	dcl     convert_status_code_	 entry (fixed bin (35), char (8), char (100));
	dcl     convert_authorization_$from_string
				 entry (bit (72), char (*), fixed bin (35));
	dcl     cu_$cp		 entry (ptr, fixed bin, fixed bin (35));
	dcl     cu_$level_get	 entry returns (fixed bin);
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     get_authorization_	 entry returns (bit (72));
	dcl     get_group_id_	 entry returns (char (32));
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     msf_manager_$close	 entry (ptr);
	dcl     msf_manager_$open	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
	dcl     msf_manager_$acl_add	 entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     hcs_$create_branch_	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     ioa_$ioa_stream	 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     iox_$get_chars	 entry (ptr, ptr, fixed bin (24), fixed bin (24), fixed bin (35));
	dcl     iox_$look_iocb	 entry (char (*) aligned, ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*) aligned, ptr, fixed bin (35));
	dcl     pool_manager_$add_quota
				 entry (char (*), fixed bin, fixed bin (35));
	dcl     pool_manager_$close_user_pool
				 entry (char (*), char (*), fixed bin, bit (36), fixed bin (35));
	dcl     pool_manager_$open_user_pool
				 entry (char (*), char (*), char (*), fixed bin (35));

	dcl     (addr, null, index, substr, verify, length, addrel, multiply, hbound, divide)
				 builtin;
	dcl     (rtrim, before, after, unspec, search, ltrim)
				 builtin;

%include card_stream_info;

%include create_branch_info;

%include send_mail_info;

	unspec (send_mail_info) = "0"b;
	send_mail_info.version = send_mail_info_version_2;
	send_mail_info.sent_from = station;
	send_mail_info.wakeup = "1"b;
	send_mail_info.always_add = "1"b;
	send_mail_info.never_add = "0"b;
	send_mail_info.notify = "0"b;
	send_mail_info.acknowledge = "0"b;		/* process arguments */
	call init;
	proc_auth = get_authorization_ ();		/*  get caller's authorization */

	on record_quota_overflow call overflow_handler;

	on command_error
	     begin;
		call find_condition_info_ (null, addr (cond_info), (0));
		if before (error_message, ":") = "enter_abs_request"
		then do;
			call notify_user ("Unable to submit RJE request: " || after (error_message, ":"));
			call ioa_$ioa_stream (error_stream, "^a", error_message);
			call report ("Unable to submit RJE request.", silent);
						/* don't give message twice */
			call clean_up;
			call iox_$control (error_iocbp, "runout", null, code);
						/* be sure operator sees any messages */
			go to start;		/* get back in sync */
		     end;
		else call continue_to_signal_ (0);
	     end;

	on cleanup
	     begin;
		code = 0;
		call report ("Aborting card input. Clear the hopper before continuing.", silent);
						/* don't tell user */
		call clean_up;			/* delete any partial input */
	     end;

	call iox_$look_iocb (card_stream_info.control_stream, control_iocbp, code);
	if code ^= 0
	then call abort ("Unable to find control iocbp.");
	call iox_$look_iocb ((error_stream), error_iocbp, code);
	if code ^= 0
	then call abort ("Unable to find error iocbp.");

	call card_util_$modes (control_modes, control_mode_bits, "", code);
	if code ^= 0
	then call abort ("Unable to set modes on control stream.");

start:
	call init;

	call read_control_card;
	if code ^= error_table_$eof_record
	then do;					/*  not an EOF?  not nice */
		call abort_read ("Deck must begin with ++EOF card.", silent);
	     end;
read_uid:
	call read_control_card;
	if code = error_table_$eof_record
	then do;					/* an EOF? */
		call read_control_card;		/* allow 2 in a row */
		if code = error_table_$eof_record
		then do;				/* but no more */
			call ioa_$ioa_stream (error_stream, "Unexpected ++EOF card. Check deck format.");
			goto finale;
		     end;
	     end;
	if key = "++uid"
	then do;
		uid = field (1);
		if uid = ""
		then call abort_read ("Blank field in ++UID card.", silent);
	     end;
	else call abort_read ("++UID card expected.", silent);

	call read_control_card;
	if code = error_table_$eof_record
	then do;
		if prior_read_aborted
		then goto read_uid;			/* when out of sync, this is probably the next deck */
		call abort_read ("++EOF card found among control cards. Aborting deck.", silent);

	     end;
	call ioa_$ioa_stream (error_stream, "*Begin deck*");

	if key = "++data"
	then do;
		mode = data;
		call parse_first_card ("++DATA");
		personid = rtrim (person) || "." || rtrim (project);
		call check_card_input_password;
		done = "0"b;
		do while (^done);
		     call read_control_card;
		     if code = error_table_$eof_record
		     then call abort_read ("Unexpected ++EOF card among control cards.", tell_user);
		     if key = "++format"
		     then call parse_format_card;
		     else if key = "++aim"
		     then aim_string = aim_string || string;
		     else if key = "++control"
		     then do;
			     if field (1) = "overwrite" & password ^= ""
			     then overwrite = "1"b;
			     else call abort_read ("Invalid ++CONTROL card", tell_user);
			end;
		     else if key = "++input"
		     then done = "1"b;
		     else if key = "++data"
		     then call abort_read ("Out of sequence ++DATA card", tell_user);
		     else call abort_read ("Unrecognized control card key: " || key, tell_user);
		end;
	     end;
	else if key = "++rje"
	then do;
		mode = rje;
		call parse_first_card ("++RJE");
		if substr (deck_name, length (deck_name) - 6) = ".absin"
		then deck_name = substr (deck_name, 1, length (deck_name) - 6);
		personid = rtrim (person) || "." || rtrim (project);
		call check_card_input_password;
		rje_arg_string = "-arguments";
		rje_control_string = "-proxy " || rtrim (personid) || " -sender " || rtrim (station);
		done = "0"b;
		do while (^done);
		     call read_control_card;
		     if code = error_table_$eof_record
		     then call abort_read ("Unexpected ++EOF card among control cards.", tell_user);
		     if key = "++aim"
		     then aim_string = aim_string || string;
		     else if key = "++rjeargs"
		     then rje_arg_string = rje_arg_string || space || string;
		     else if key = "++rjecontrol"
		     then rje_control_string = rje_control_string || space || string;
		     else if key = "++format"
		     then call parse_format_card;
		     else if key = "++epilogue"
		     then epilogue_string = epilogue_string || space || string;
		     else if key = "++absin"
		     then do;
			     absin_online = "1"b;
			     if field_cnt < 1 | field_cnt > 2
			     then call abort_read ("Incorrect ++ABSIN card", tell_user);
			     call expand_pathname_ ((field (1)), dirname, absin_ename, code);
			     if code ^= 0
			     then call abort_read ("Unable to decode ++ABSIN segment definition. " || field (1),
				     tell_user);
			     call suffixed_name_$make ((absin_ename), "absin", absin_ename, code);
			     if code ^= 0
			     then call abort_read ("Bad absin name on ++ABSIN card " || field (1), tell_user);
			     if field (2) ^= ""
			     then do;
				     if field (2) = "system"
				     then do;
					     absin_pname = tools_dir || ">" || absin_ename;
					end;
				     else call abort_read ("Invalid option on ++ABSIN card " || field (2),
					     tell_user);
				     call ioa_$rsnnl (">user_dir_dir>^a>^a>^a.absout", absout_pname, 0, project,
					person, before (absin_ename, ".absin"));
				end;
			     else do;
				     if substr (field (1), 1, 1) = ">"
				     then absin_pname = rtrim (dirname) || ">" || absin_ename;
				     else call ioa_$rsnnl (">user_dir_dir>^a>^a>^a", absin_pname, 0, project,
					     person, absin_ename);
				     absout_pname =
					substr (absin_pname, 1, length (rtrim (absin_pname)) - 6) || ".absout";
				end;
			end;
		     else if key = "++input"
		     then done = "1"b;
		     else if key = "++rje"
		     then call abort_read ("Out of sequence ++RJE card", tell_user);
		     else call abort_read ("Unrecognized control card key: " || key, tell_user);
		end;
	     end;
	else call abort_read ("Unexpected control card key: " || key, tell_user);

	call convert_authorization_$from_string (deck_auth, (aim_string), code);
						/*  and convert the access_class */
	if code ^= 0
	then call abort_read ("Unable to convert deck access class " || aim_string, tell_user);
	if ^aim_check_$equal (proc_auth, deck_auth)
	then do;					/*  wrong level ? */
		a_code = error_table_$ai_restricted;
		return;
	     end;
	if mode = data | mode = rje & ^absin_online
	then do;
		do k = 1 to card_stream_info.n_streams while (card_stream_info.format (k) ^= deck_format);
		end;
		if k > card_stream_info.n_streams
		then call abort_read ("Undefined deck format for this device: " || deck_format, tell_user);
		else do;
			call iox_$look_iocb (card_stream_info.name (k), input_iocbp, code);
			element_size = card_stream_info.el_size (k);
		     end;

		if mode = rje & element_size ^= 9
		then /* require character input for absin segments */
		     call abort_read ("Invalid conversion format for RJE: " || rtrim (deck_format), tell_user);

		call pool_manager_$open_user_pool (root, person, dirname, code);
		if code ^= 0
		then /* pool error is very bad */
		     call abort ("Unable to open pool storage.");
		pool_open = "1"b;			/*  be sure we close the pool on error */

		unspec (local_cbi) = "0"b;
		local_cbi.version = create_branch_version_2;
		local_cbi.mode = "101"b;
		local_cbi.rings (1), local_cbi.rings (2), local_cbi.rings (3) = cu_$level_get ();
		local_cbi.userid = get_group_id_ ();
		local_cbi.access_class = proc_auth;

		tag, code = -1;
		do while (code ^= 0);
		     tag = tag + 1;			/*  change the name to "name.n" */
		     if tag > 499
		     then /* avoid infinite loop, but try hard */
			call abort_read ("Aborting deck: 500 duplicate decks in " || dirname, tell_user);
		     call ioa_$rsnnl ("^a.^d^[.absin^]", new_deck_name, lnd, deck_name, tag, (mode = rje));
		     if lnd > 32
		     then call abort_read ("Entry name too long: " || substr (new_deck_name, 1, lnd), tell_user);

		     call hcs_$create_branch_ (dirname, new_deck_name, addr (local_cbi), code);
		     if code = error_table_$namedup & overwrite
		     then code = 0;
		     if code ^= 0 & code ^= error_table_$namedup
		     then /*  also very bad */
			call abort_read ("Unable to create branch in pool: " || new_deck_name, silent);
		end;
		call msf_manager_$open (dirname, new_deck_name, fcbp, code);
		if fcbp = null
		then call abort_read ("Unable to open new pool entry", silent);
		component = 0;
		call msf_manager_$get_ptr (fcbp, component, "0"b, deckp, bc, code);
		if deckp = null
		then call abort_read ("Unable to initiate new pool entry: " || new_deck_name, silent);
		call ioa_$ioa_stream (error_stream, "Reading ^a (^a) for ^a.", new_deck_name, deck_format, personid);

		if mode = rje
		then do;
			absin_pname = rtrim (dirname) || ">" || new_deck_name;
			deck_name_prefix = substr (new_deck_name, 1, length (rtrim (new_deck_name)) - 6);
			call ioa_$rsnnl (">user_dir_dir>^a>^a>^a.absout", absout_pname, (0), project, person,
			     deck_name_prefix);
			call set_abs_header;
		     end;
		call ioa_$rsnnl ("^[^^^]trim,^[^^^]lower_case,^[^^^]add_nl,^[^^^]contin.", input_modes, (0), ^trim,
		     ^lower_case, ^add_nl, ^contin);
		call card_util_$modes (input_modes, input_mode_bits, "", code);
		if code ^= 0
		then call abort_read ("Unable to set user input modes", tell_user);

		on out_of_bounds go to oob;

		call iox_$control (input_iocbp, "reset", null, ignore);
						/* clear the record totals */
		nel = divide ((sys_info$max_seg_size * 36), element_size, 35);
						/* get number of elements in a segment */

		if element_size ^= 9
		then do;
			call iox_$get_chars (input_iocbp, deckp, nel + 1, nelt, code);
			if code ^= 0
			then do;
				if code = error_table_$eof_record
				then goto end_read_loop;
				else if code = error_table_$end_of_info | code = error_table_$short_record
				then code = 0;
				else call abort_read ("Error while reading user data.  Aborting deck.", silent);
			     end;
			else call abort_read ("Attempted read of more then a segments worth of data succeeded",
				silent);
		     end;
		else do;				/* This group ASSUMES an element size of 9 bits (chars) */
			nelt = header_len;		/* set the number of chars used in last MSF component */
						/* if not RJE, header_len is zero */
			remaining_chars = nel - header_len;
						/* set number of chars remaining in segment */

read_one_card:
			num_chars_rec = 0;
			card_buffer = "";
			call iox_$get_chars (input_iocbp, addr (card_buffer), 80, num_chars_rec, code);
			if code ^= 0
			then do;
				if code = error_table_$eof_record
				then goto end_read_loop;
						/* NORMAL EXIT */

				else if code = error_table_$end_of_info | code = error_table_$short_record
				then code = 0;

				else call abort_read ("Error while reading user data.  Aborting deck.", silent);
						/* ERROR EXIT */
			     end;

			card_image = substr (card_buffer, 1, num_chars_rec);
						/* put into var string for translation */

			call card_util_$translate (input_mode_bits, card_image);
			num_chars_rec = length (card_image);
						/* get the new length after translation */
			left = remaining_chars - num_chars_rec;
						/* must be at least 1 char left to bump ptr */
			if left <= 0
			then do;			/* if not enough, put in part and start new component */
				string_len = remaining_chars;
						/* set size of output_string */
				output_string = substr (card_image, 1, remaining_chars);

				component = component + 1;
						/* start the next MSF component */

				if component = 1
				then do;		/* about to force conversion to MSF ... */
					call pool_manager_$add_quota (root, 260, code);
						/* ... need extra quota during conversion */
					if code ^= 0
					then do;	/* couldn't get it: let the operator try to correct it ... */
						call report (NL
						     || "Insufficient quota in pool to convert to MSF." || NL,
						     silent);
						signal card_command_level;
						call pool_manager_$add_quota (root, 260, code);
						/* ... and try again */
					     end;
					if code ^= 0
					then call abort_read ("Insufficient quota in pool to convert to MSF.",
						silent);
				     end;

				call msf_manager_$get_ptr (fcbp, component, "1"b, deckp, bc, code);
				if deckp = null
				then call abort_read ("Unable to initiate next MSF component", silent);

				if component = 1
				then /* give back the quota we got temporarily */
				     call pool_manager_$add_quota (root, -260, (0));

				if left = 0
				then card_image = "";
						/* if it fit exactly.... */
				else card_image = substr (card_image, remaining_chars + 1);
						/* set image to last part of card */

				string_len = length (card_image);
						/* set the output_string size */
				output_string = card_image;
				deckp = addr (deck_char_pos (string_len + 1));
						/* where the next char goes */
				remaining_chars = nel - string_len;
						/* room left in this component */
				nelt = string_len;	/* restart last component count */
			     end;
			else do;			/* the full card (+ 1 char) will fit this MSF component */
				string_len = length (card_image);
						/* set the length of output_string */
				output_string = card_image;
						/* and write out the data */
				deckp = addr (deck_char_pos (string_len + 1));
						/* where the next char goes */
				remaining_chars = left;
						/* do the accounting */
				nelt = nelt + string_len;
						/* update the number received */
			     end;
			go to read_one_card;
		     end;

end_read_loop:
		unspec (count_structure) = ""b;	/* clear the count in case the control order is unknown */

		call iox_$control (input_iocbp, "get_count", addr (count_structure), ignore);
						/* get the total */
						/* this data can be used for accounting in the future */

/*	now compute the bitcount of the last component */

		if mode = rje
		then do;
			call set_abs_trailer;	/* this will modify nelt and maybe component */
		     end;

		revert out_of_bounds;

		bc = multiply (nelt, element_size, 24, 0);

/*	set bitcount of last component ... all others are max_seg_size * 36 */

		call msf_manager_$adjust (fcbp, component, bc, "111"b, code);
		if code ^= 0
		then call abort_read ("Error setting bit-count.", silent);

		unspec (acle) = "0"b;
		acle (1).name = rtrim (personid) || ".*";
						/*  set the acl */
		acle (1).mode = "1"b;
		if mode = rje
		then do;
			aclec = 2;
			acle (2).name = get_group_id_$tag_star ();
			acle (2).mode = "1"b;
		     end;
		else aclec = 1;
		call msf_manager_$acl_add (fcbp, addr (acle), aclec, code);
		if code ^= 0
		then call abort_read ("Error setting ACL.", silent);
	     end;
	else do;					/* for rje absin online case */
		call read_control_card;
		if code ^= error_table_$eof_record
		then call abort_read ("Unexpected control card " || key, silent);
	     end;

	call read_control_card;
	if key ^= "++uid"
	then call abort_read ("Expected ++UID card not found", silent);
	else if uid ^= field (1)
	then call abort_read ("Mismatched ++UID card. Looking for: " || uid, silent);

	if fcbp ^= null
	then call msf_manager_$close (fcbp);
	fcbp = null;
	if pool_open
	then do;
		call pool_manager_$close_user_pool (root, person, 1, "100"b || (33)"0"b, code);
						/*  close the pool */
		if code ^= 0
		then call abort_read ("Error closing user's pool.", silent);
	     end;
	pool_open = "0"b;				/* all is well */

	call ioa_$ioa_stream (error_stream, "*Successful read^[(^d cards)^]*", (count_structure.cards > 0),
	     count_structure.cards);
	if mode = rje
	then do;					/* submit abs request */
		if index (rje_control_string, " -of ") = 0 & index (rje_control_string, " -output_file ") = 0
		then rje_control_string = rje_control_string || space || "-output_file " || absout_pname;
		command =
		     "enter_abs_request " || absin_pname || " -brief " || rje_control_string || space
		     || rje_arg_string;
		call cu_$cp (addrel (addr (command), 1), length (command), code);
		call notify_user ("RJE job: """ || rtrim (deck_name) || """, queued for absentee.");
	     end;
	else call notify_user ("Successful read of card deck: " || rtrim (deck_name));

	call iox_$control (error_iocbp, "runout", null, code);
						/* be sure operator sees any messages */
	goto start;				/*  see if there is another deck to read */


end_card:
	call ioa_$ioa_stream (error_stream, "++END card read.^/");
	call clean_up;

finale:
	a_code = code;
	return;
oob:
	call abort_read ("Multi-segment input not allowed for card mode" || rtrim (deck_format), tell_user);

set_station:
     entry (a_station, a_code);

	a_code = 0;
	station = a_station;
	return;

set_rqt:
     entry (a_prt_rqt, a_pun_rqt, a_code);

	a_code = 0;
	prt_rqt = a_prt_rqt;
	pun_rqt = a_pun_rqt;
	return;

abort:
     proc (message);
	dcl     message		 char (*);
	call report (message, silent);		/* use the standard messages */
	call clean_up;
	call ioa_$ioa_stream (error_stream, "Unable to continue.");
						/* then say it is bad */
	call iox_$control (error_iocbp, "runout", null, (0));
						/* force out the message */
	goto finale;

     end abort;

abort_read:
     proc (message, tell_user);
	dcl     message		 char (*);
	dcl     tell_user		 bit (1);
	call report (message, tell_user);		/* give an error message and cleanup the pool */
	call clean_up;
	call ioa_$ioa_stream (error_stream, "Skipping to next ++EOF card. ");
	call iox_$control (error_iocbp, "runout", null, (0));
						/* force out the message */

	prior_read_aborted = "1"b;
	do j = 1 by 1;
	     call read_control_card;
	     if code = error_table_$eof_record
	     then do;				/* is this an EOF? */
		     if uid ^= ""
		     then do;			/* are we expecting ++UID match ? */
			     call read_control_card;
			     if code = error_table_$eof_record
			     then call read_control_card;
						/* this one must be good .. */
			     if key = "++uid" & field (1) = uid
			     then goto start;
			end;
		     else do;
			     call init;
			     prior_read_aborted = "1"b;
			     goto read_uid;
			end;
		end;
	end;
	return;

     end abort_read;

report:
     proc (message, tell_user);
	dcl     message		 char (*);
	dcl     tell_user		 bit (1);
	if code ^= 0
	then call convert_status_code_ (code, short, long);
	else long = "";
	on any_other goto report_ret;			/* in case the error stream is not there */
	if tell_user
	then call notify_user ("Aborted card input deck: " || rtrim (deck_name) || NL || message);
	call ioa_$ioa_stream (error_stream,		/*  give message to the operator */
	     "read_cards_: ^[Error while processing deck ""^a"" for ^a^/^;^2s^]^a^/^a", (deck_name ^= ""), deck_name,
	     personid, message, long);
report_ret:
	return;
     end report;

read_control_card:
     proc;

	dcl     i			 fixed bin;

	field_cnt = 0;
	field (*) = "";
	card_buffer, key = "";

	call iox_$get_chars (control_iocbp, addr (card_buffer), 80, nelt, code);
	if code ^= 0
	then do;
		if code = error_table_$eof_record
		then return;
		else if code = error_table_$end_of_info | code = error_table_$short_record
		then code = 0;
		else call abort ("Read error.");
	     end;

	card_image = substr (card_buffer, 1, nelt);
	call card_util_$translate (control_mode_bits, card_image);

	card_image = ltrim (card_image);		/* strip any leading spaces */
	card_image = rtrim (card_image, NL || space);	/* and trailing NL's or spaces */

	i = search (card_image, space);

	if i = 0
	then do;					/* no space, could be ++INPUT */
		key = card_image;			/* try for it */
		if key = "++end"
		then goto end_card;
		return;
	     end;

	key = substr (card_image, 1, i - 1);		/* record the key value */

	if key = "++end"
	then goto end_card;

	string = ltrim (substr (card_image, i + 1));	/* see what is after the space */

	if search (string, SPECIAL_CHARACTERS) > 0
	then call abort ("Special characters in control string.");

	field_begin = 1;
	scan_done = "0"b;
	do i = 1 by 1 while (^scan_done);
	     field_len = search (substr (string, field_begin), " ");
	     if field_len = 0
	     then do;
		     field_len = length (string) - field_begin + 1;
		     scan_done = "1"b;
		end;
	     else field_len = field_len - 1;
	     field (i) = substr (string, field_begin, field_len);
	     field_begin = field_begin + field_len + verify (substr (string, field_begin + field_len), " ") - 1;
	     field_cnt = i;
	end;
	return;

     end read_control_card;

clean_up:
     proc;

	if fcbp ^= null
	then do;
		call msf_manager_$close (fcbp);
		fcbp = null;			/* don't repeat this */
		call delete_$path (dirname, new_deck_name, "100100"b, "", (0));
	     end;
	if pool_open
	then do;
		call pool_manager_$close_user_pool (root, person, 1, "100"b || (33)"0"b, (0));
		pool_open = "0"b;
	     end;
	return;
     end clean_up;

overflow_handler:
     proc;
	call pool_manager_$add_quota (root, 10, code);	/* add 10 pages and keep going */
	if code ^= 0
	then do;
		call report ("^/No available quota in card pool.", silent);
		signal card_command_level;		/* allow operator to respond */
	     end;
	return;					/* restart where we stopped if it returns */

     end overflow_handler;

set_abs_header:
     proc;
	header_string =
	     header.system_lines (1) || NL || header.system_lines (2) || space || prt_rqt || NL
	     || header.system_lines (3) || space || pun_rqt || NL || header.system_lines (4) || space || station
	     || NL || header.system_lines (5) || NL;
	if epilogue_string ^= ""
	then header_string = header_string || "set_epilogue_command """ || epilogue_string || """" || NL;
	else header_string = header_string || header.system_lines (6) || NL;
	do i = 1 to hbound (header.user_lines, 1) while (header.user_lines (i) ^= "");
	     header_string = header_string || header.user_lines (i) || NL;
	end;
	header_len, string_len = length (header_string);
	deckp -> output_string = header_string;
	deckp = addr (deckp -> deck_char_pos (header_len + 1));
	return;

     end set_abs_header;


set_abs_trailer:
     proc;
	trailer_string = trailer.system_lines (1) || NL;
	do i = 1 to hbound (trailer.user_lines, 1) while (trailer.user_lines (i) ^= "");
	     trailer_string = trailer_string || trailer.user_lines (i) || NL;
	end;
	trailer_len, string_len = length (trailer_string);

	left = remaining_chars - trailer_len;		/* will it all fit this segment? */
	if left < 0
	then do;					/* OOPS */
		string_len = remaining_chars;		/* set size of output_string */
		output_string = substr (trailer_string, 1, remaining_chars);

		component = component + 1;		/* start the next MSF component */

		if component = 1
		then do;				/* about to force conversion to MSF ... */
			call pool_manager_$add_quota (root, 260, code);
						/* ... need extra quota during conversion */
			if code ^= 0
			then do;			/* couldn't get it: let the operator try to correct it ... */
				call report (NL || "Insufficient quota in pool to convert to MSF." || NL, silent);
				signal card_command_level;
				call pool_manager_$add_quota (root, 260, code);
						/* ... and try again */
			     end;
			if code ^= 0
			then call abort_read ("Insufficient quota in pool to convert to MSF.", silent);
		     end;

		call msf_manager_$get_ptr (fcbp, component, "1"b, deckp, bc, code);
		if deckp = null
		then call abort_read ("Unable to initiate next MSF component", silent);

		if component = 1
		then /* give back the quota we got temporarily */
		     call pool_manager_$add_quota (root, -260, (0));

		trailer_string = substr (trailer_string, remaining_chars + 1);
						/* set image to last part of card */

		string_len = length (trailer_string);	/* set the output_string size */
		output_string = trailer_string;
		nelt = string_len;			/* restart last component count */
	     end;
	else do;
		output_string = trailer_string;
		nelt = nelt + trailer_len;		/* fix the element count so we can compute the bit count */
	     end;
	return;


     end set_abs_trailer;

init:
     proc;
	a_code, code = 0;
	deck_name, person, project, personid, absin_pname, absin_ename, absout_pname, dirname = "";
	aim_string, rje_control_string, rje_arg_string, epilogue_string = "";
	deck_format = card_stream_info.format (1);	/* set the default to the first stream we use */
	header_len, trailer_len, nelt = 0;
	input_mode_bits = "0"b;
	pool_open = "0"b;				/* the user pool is not yet open */
	add_nl = "1"b;
	absin_online = "0"b;
	lower_case = "0"b;
	overwrite = "0"b;
	cancel_rje = "0"b;
	contin = "0"b;
	trim = "1"b;
	uid = "";					/* get ready for a new uid value */
	deckp, fcbp = null;
	prior_read_aborted = "0"b;
	return;

     end init;
%page;
check_card_input_password:
     proc ();
	call read_control_card;
	if code = error_table_$eof_record
	then call abort_read ("Unexpected ++EOF card looking for password.", tell_user);
	if key ^= "++password"
	then call abort_read ("Expected ++PASSWORD card not found", tell_user);
	if field_cnt = 2 | field_cnt > 3
	then /* allow no PW, PW, or PW -cpw NPW only */
	     call abort_read ("Invalid ++PASSWORD card", tell_user);

	if field (2) = "-cpw"
	then do;
		if field (3) ^= ""
		then do;
			temp_password = field (3);
			new_password = scramble_ (temp_password);
			field (3) = "";
			temp_password = "";
		     end;
		else new_password = "";
	     end;
	else if field (2) ^= ""
	then call abort_read ("Invalid ++PASSWORD control argument.", tell_user);
	else new_password = "";

	if field (1) ^= ""
	then do;
		temp_password = field (1);
		password = scramble_ (temp_password);
		field (1) = "";
		temp_password = "";
	     end;
	else password = "";

	call validate_card_input_$user (person, project, password, new_password, (station), mode, error_msg, code);
	if code ^= 0
	then do;
		code = 0;
		call abort_read (error_msg, tell_user);
	     end;

	personid = rtrim (person) || "." || project;	/* redefine to remove any alias */
	return;

     end check_card_input_password;
%page;
parse_format_card:
     proc;
	if field_cnt < 1
	then call abort_read ("Incorrect ++FORMAT card.", tell_user);
	deck_format = field (1);
	do i = 2 to field_cnt;
	     if field (i) = "trim"
	     then trim = "1"b;
	     else if field (i) = "notrim"
	     then trim = "0"b;
	     else if field (i) = "lowercase"
	     then lower_case = "1"b;
	     else if field (i) = "uppercase"
	     then lower_case = "0"b;
	     else if field (i) = "noconvert"
	     then lower_case = "0"b;
	     else if field (i) = "addnl"
	     then add_nl = "1"b;
	     else if field (i) = "noaddnl"
	     then add_nl = "0"b;
	     else if field (i) = "contin"
	     then contin = "1"b;
	     else if field (i) = "nocontin"
	     then contin = "0"b;
	     else call abort_read ("Undefined mode on ++FORMAT  card: " || field (i), tell_user);
	end;
	return;

     end parse_format_card;



notify_user:
     proc (message);
	dcl     message		 char (*);
	if personid ^= ""
	then call send_mail_ (personid, message, addr (send_mail_info), (0));
	return;

     end notify_user;



parse_first_card:
     proc (string);
	dcl     string		 char (*);
	if field_cnt ^= 3 & field_cnt ^= 2
	then call abort_read ("Incorrect " || string || " card format.", tell_user);
	deck_name = field (1);
	if field_cnt = 3
	then do;
		person = field (2);
		project = field (3);
	     end;
	else if field_cnt = 2
	then do;
		person = before (field (2), ".");
		project = after (field (2), ".");
	     end;
	if person = "*" | person = ""
	then /* a personid of * is illegal */
	     call abort_read ("Person name must be defined.", tell_user);
	if project = "*" | project = ""
	then call abort_read ("Project name must be defined.", tell_user);

     end parse_first_card;

     end read_cards_;
