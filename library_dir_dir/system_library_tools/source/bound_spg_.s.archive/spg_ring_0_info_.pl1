/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Procedure to return the virtual cpu time spent in the
   main gates into ring zero */

/* Last Modified: (Date and Reason)
   09/22/76	Noel I. Morris to use new get_gate_data_
   07/09/75	Steve Webber to work with combined linkage segments for gates
   10/27/73	Steve Webber to take into account call limiter type gates.
   */


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


spg_ring_0_info_: proc (time);

/* Parameters */

dcl  time fixed bin (52);

/* Automatic */

dcl  code fixed bin (35);				/* error code */
dcl  i fixed bin;					/* gate index */
dcl  j fixed bin;					/* entry index */
dcl  nentries fixed bin;				/* number of gate entries */

dcl 1 table (512) like gate_table aligned;		/* table of gate information */

/* Static */

dcl  tempp ptr static init (null ());
dcl  gate_name (6) char (32) static options (constant) init (
	"hcs_",
	"hphcs_",
	"ioi_",
	"netp_",
	"net_",
	"phcs_");

/* Based */

dcl 1 info based aligned,				/* metering info in gate */
    2 cpu_time fixed bin (52),			/* CPU time spent in gate entry */
    2 vcpu_time fixed bin (52),			/* virtual CPU time spent in gate entry */
    2 page_waits fixed bin,				/* number of page waits in gate entry */
    2 calls fixed bin;				/* number of calls to gate entry */

/* Entries */

dcl  get_gate_data_ entry (char (*), 1 dim (*) like gate_table aligned, fixed bin,
	ptr, bit (1) aligned, fixed bin (35)),
     hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));


dcl (hbound, null) builtin;



% include gate_data;



	time = 0;					/* start out with no time spent */

	if tempp = null () then do;
	     call hcs_$make_seg ("", "spg_ring_0_info_.temp", "", 01010b, tempp, code);
	     if code ^= 0 then return;
	end;

	do i = 1 to hbound (gate_name, 1);
	     call get_gate_data_ (gate_name (i), table, nentries, tempp, "1"b, code);
	     if code = 0 then do j = 1 to nentries;
		time = time + table (j).datap -> gate_entry_data.vcpu_time;
	     end;
	end;

	return;


     end;
