/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


tolts_overseer_:  procedure;

/* Modified BIM 5/82 set the homedir. */

dcl iox_$user_io ext static ptr;

dcl	error_code	fixed bin(35);

dcl    1	search_rules  aligned  internal static options (constant),
	2  num_rules  fixed bin  init(5),
	2  rules (5)  char(168)  aligned
	   init (	"initiated_segments",
		"referencing_dir",
		">system_library_standard",
		">system_library_1",
		">system_library_tools");

dcl	( addr, baseptr, pointer )  builtin;

dcl       1 logout_info aligned,
	2 version fixed bin,
	2 hold bit (1) unaligned,
	2 brief bit (1) unaligned,
	2 pad bit (34) unaligned;

dcl       1 init_error aligned,
	2 version fixed bin,
	2 error_code fixed bin (35);
	
dcl       based_quoi                    based;

dcl	homedir	                    char (168);

dcl	any_other                     condition;

dcl	hcs_$initiate_search_rules	entry  (ptr, fixed bin(35));
dcl	ioa_			entry  options (variable);
dcl	iox_$control		entry (ptr, char(*), ptr, fixed bin(35));
dcl       com_err_                      entry  options(variable);
dcl       cu_$set_cl_intermediary	entry (entry);
dcl       cu_$set_command_processor	entry (entry);
dcl	default_error_handler_$wall	entry;
dcl       terminate_process_		entry (character (*), pointer);

dcl	bound_tolts_$tolts_  entry  options(variable);
dcl       change_wdir_         entry (char (168), fixed bin (35));
dcl       user_info_$homedir   entry (char(*));



	call hcs_$initiate_search_rules (addr(search_rules), error_code);
	if   error_code ^= 0
	     then goto ERROR;

	on any_other call default_error_handler_$wall;

          call cu_$set_cl_intermediary (command_level);
          call cu_$set_command_processor (command_level);

	call iox_$control (iox_$user_io, "quit_enable", null (), (0));

	call user_info_$homedir (homedir);
	call change_wdir_ (homedir, (0));
	call bound_tolts_$tolts_;			/* Call main TOLTS program. */

	unspec (logout_info) = ""b; /* correct data is all 0 */
	call terminate_process_ ("logout", addr (logout_info));
LOOP:
	pointer (baseptr (-2), 0) -> based_quoi = 0;
	go to LOOP;

command_level:  entry;                 /* if we ever get to command level we come here. */

	on any_other go to LOOP;
          call ioa_("tolts_overseer_:  Illegal attempt to enter user environment.");
	unspec (logout_info) = ""b;
	logout_info.hold = "1"b;
	call terminate_process_ ("logout", addr (logout_info));
	go to LOOP;

ERROR:
          call com_err_ (error_code, "tolts_overseer_", "Could not set search rules.");
	unspec (init_error) = ""b;
	init_error.error_code = error_code;
	call terminate_process_ ("init_error", addr (init_error));
	go to LOOP;

	end   tolts_overseer_;
