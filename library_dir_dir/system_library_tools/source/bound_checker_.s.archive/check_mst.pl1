/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-01-13,GDixon), approve(87-04-16,MCR7614),
     audit(87-05-21,Farley), install(87-07-15,MR12.1-1040):
     Add support for storing boot program as first segment of MST image stored
     in a file.
                                                   END HISTORY COMMENTS */


/* format: style2 */
/* Command version of Multics checker */
/* Written long ago by someone who probably wouldn't admit it today, anyway */
/* Modified 26 June 1981, W. Olin Sibert, to call get_collection_$init and avoid creeping sizes */
/* Completely rewritten 7/82 BIM */


check_mst:
ckm:
     procedure;

	dcl     (
	        error_table_$noarg,
	        error_table_$inconsistent,
	        error_table_$too_many_args,
	        error_table_$badopt,
	        error_table_$bad_conversion,
	        error_table_$bad_arg
	        )			 ext static fixed bin (35);

	dcl     density		 fixed bin;
	dcl     thing_name		 char (168);
	dcl     filename		 char (168);
	dcl     code		 fixed bin (35);
	dcl     (file, positional, tape)
				 bit (1) aligned;	/* file --> -file, positional --> positional control arg seen, tape --> -tape */
	dcl     ap		 pointer;
	dcl     al		 fixed bin (21);
	dcl     argument		 char (al) based (ap);
	dcl     argx		 fixed bin;
	dcl     n_args		 fixed bin;

	dcl     (addr, before, binary, char, fixed, null, string)
				 builtin;

	dcl     (get_temp_segments_, release_temp_segments_)
				 entry (char (*), dim (*) ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     checker_print_$init	 entry;
	dcl     define_area_	 entry (ptr, fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     tape_reader_$init	 entry (char (*), char (*), fixed bin, bit (1) aligned, fixed bin (35));
	dcl     tape_reader_$final	 entry;
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_wdir_		 entry returns (char (168));

	dcl     checker_init_meters_	 entry;
	dcl     checker_load_MST_	 entry;
	dcl     checker_crossref_	 entry;

	dcl     sslt_manager_$init	 entry (ptr);
	dcl     sslt_init_		 entry (ptr, ptr);

	dcl     cleanup		 condition;
	dcl     checker_fatal_error_	 condition;
	dcl     conversion		 condition;
%page;
%include iox_modes;
%page;
%include iox_entries;
%page;
%include area_info;
	dcl     1 AI		 aligned like area_info;

%page;
%include checker_dcls_;

	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

	dcl     ME		 char (32) init ("check_mst") int static options (constant);


	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	thing_name = "";
	positional = "0"b;
	file = "0"b;
	tape = "0"b;
	density = 0;
	checker_data_$severity = 0;

	do argx = 1 to n_args;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if char (argument, 1) ^= "-"
	     then do;
		     if positional			/* only one positional allowed */
		     then do;
			     call com_err_ (error_table_$too_many_args, ME,
				"Only one MST may be supplied. ^a cannot be processed.", argument);
			     return;
			end;
		     positional = "1"b;
		     thing_name = argument;
		end;
	     else if argument = "-severity" | argument = "-sv"
	     then do;
		     if argx = n_args
		     then do;
			     call com_err_ (error_table_$noarg, ME,
				"-severity must be followed by a severity number.");
			     return;
			end;
		     on conversion
			begin;
			     call com_err_ (error_table_$bad_conversion, ME, "Invalid severity number ^a.",
				argument);
			     go to RETURN;
			end;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, ap, al, (0));
		     checker_data_$severity = fixed (argument);
		     revert conversion;
		     if checker_data_$severity > 4 | checker_data_$severity < 0
		     then do;
			     call com_err_ (error_table_$bad_arg, ME,
				"-severity must be followed by N, for 0 <= N <= 4.");
			     return;
			end;
		end;
	     else if argument = "-tape"
	     then do;
		     if file | tape
		     then
DUP_INPUT:
			do;
			     call com_err_ (error_table_$inconsistent, ME,
				"-tape and -file may not both be specified.");
			     return;
			end;
		     tape = "1"b;
		end;
	     else if argument = "-file"
	     then do;
		     if file | tape
		     then goto DUP_INPUT;
		     file = "1"b;
		end;
	     else if argument = "-density" | argument = "-den"
	     then do;
		     if argx = n_args
		     then do;
			     call com_err_ (error_table_$noarg, ME, "-density must be followed by a density.");
			     return;
			end;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, ap, al, (0));
		     if char (argument, 1) = "-"
		     then do;
			     call com_err_ (error_table_$noarg, ME,
				"-density must be followed by a density, but a control argument, ^a, was found.",
				argument);
			     return;
			end;
		     on conversion
			begin;
			     call com_err_ (error_table_$bad_conversion, ME, "^a is not a valid density.", argument)
				;
			     go to RETURN;
			end;

		     density = binary (argument);
		     revert conversion;
		end;

	     else do;
		     call com_err_ (error_table_$badopt, ME, "Unrecognized control argument ^a", argument);
RETURN:
		     return;
		end;
	end;

	if ^file & ^tape
	then tape = "1"b;
	if thing_name = ""
	then do;
		call com_err_ (error_table_$noarg, ME, "No input specified.");
		return;
	     end;

	if file & density ^= 0
	then do;
		call com_err_ (error_table_$inconsistent, ME, "-density may not be specified with -file.");
		return;
	     end;

	thing_name = before (thing_name, ",");		/* in case of ,den= */

	checker_data_$temp_ptrs (*) = null ();
	checker_data_$input_iocbp, checker_data_$output_iocbp = null;
	on cleanup call clean_up;

	call get_temp_segments_ (ME, checker_data_$temp_ptrs, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "No temp segs to be had.");
		go to EXIT;
	     end;

	call tape_reader_$init (ME, thing_name, density, file, code);
	if code ^= 0
	then go to EXIT;

	AI.version = area_info_version_1;
	AI.owner = "check_mst";
	AI.size = sys_info$max_seg_size;
	AI.areap = checker_data_$area_ptr;
	string (AI.control) = ""b;
	AI.no_freeing = "1"b;
	AI.extend = "1"b;

	call define_area_ (addr (AI), code);
	if code ^= 0
	then do;
		call com_err_ (code, "check_mst", "Could not define def area.");
		go to EXIT;
	     end;

	call expand_pathname_$add_suffix (thing_name, "ckrout", (""), filename, code);
	filename = pathname_ (get_wdir_ (), (filename));

	call iox_$attach_name ("checker_output_", checker_data_$output_iocbp, "vfile_ " || filename, null (), code);
	if code ^= 0
	then do;
outerr:
		call com_err_ (code, "check_mst", "checker output file");
		go to EXIT;
	     end;
	call iox_$open (checker_data_$output_iocbp, Stream_output, "0"b, code);
	if code ^= 0
	then go to outerr;



	call ioa_ ("Begin checker");

	call checker_init_meters_;
	call checker_print_$init;

	call sslt_init_ (checker_data_$slt_ptr, checker_data_$name_table_ptr);
	call sslt_manager_$init (checker_data_$slt_ptr);	/* initialize "simulated slt" */

	on checker_fatal_error_
	     begin;
		call com_err_ (0, ME, "Fatal error. Checker run aborted.");
		go to EXIT;
	     end;

	call checker_load_MST_;

	call checker_crossref_;

	call tape_reader_$final;

	call ioa_ ("End checker");

EXIT:
	call clean_up;

	return;


clean_up:
     proc;


	if checker_data_$temp_ptrs (1) ^= null ()
	then call release_temp_segments_ (ME, checker_data_$temp_ptrs, code);
	checker_data_$temp_ptrs (*) = null;

	call tape_reader_$final ();

	if checker_data_$output_iocbp ^= null
	then do;
		call iox_$close (checker_data_$output_iocbp, code);
		call iox_$detach_iocb (checker_data_$output_iocbp, code);
		checker_data_$output_iocbp = null;
	     end;

	return;
     end;

     end check_mst;
