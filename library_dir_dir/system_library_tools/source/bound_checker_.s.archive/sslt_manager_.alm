" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	Segment Loading Table Manager		MSPM BL.2.02	"
"							"
"	T.H. Van Vleck			5/19/67		"
"	Rewritten by N. I. Morris		12/27/67		"
"	Last modified by N. I. Morris		08/12/76		"
"							"
"	This program is a utility routine for use in system	"
"	initialization.  It is first called by the Bootstrap	"
"	Initializer, and remains useful well into the execution	"
"	of the Initializer Control Program.			"
"							"
"	Note:	THIS IS NOT A PURE PROCEDURE			"
"							"
"	The Segment Loading Table (SLT) contains an entry for	"
"	each segment that is part of the Multics Initializer	"
"	or hard-core supervisor.  Each entry contains useful	"
"	information about the segment, such as its name, number,	"
"	linkage status, etc.				"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	name	slt_manager


"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************


" Miscellaneous Equivalences:
	equ	wdsnm,32/4	words per segment name







	include	slt



	include	slte



	include	stack_header



	include	stack_frame


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	call slt_manager$init(sltptr)
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	use	transfer_vector

	entry	init
	tra	init

	use	main

init:
	epplb	ap|2,*		lb -> SLT pointer
	epplb	lb|0,*		lb -> SLT
	sprilb	slt_ptr		save pointer to the SLT

	eppab	lb|slt.name_seg_ptr,*  ab -> name table segment
	eppbb	lb|slt.first_sup_seg  bb -> limits for sup segs
	tsx2	search		search for and hash in sup seg names

	eppbb	lb|slt.first_init_seg  bb -> limits for init segs
	tsx2	search		search for and hash in init seg names

	tra	return



search:
	ldq	bb|1		get last seg to examine
	sbq	bb|0		minus first seg to examine
	eax5	1,ql		number of segs to examine in X5
	ldq	bb|0		first seg to examine in Q
	eax7	0,ql		place segno in X7
	mpy	slte_size,dl	compute SLT index
	epplp	lb|slt.seg,ql	lp -> SLT entry

search_loop:
	eax5	-1,5		test for completion
	tmi	0,2		return if not in this half of S(S)LT

	ldx0	lp|slte.names_ptr	pick up pointer to names
	eppbp	ab|segnam.name,0	bp -> first name
	tsx6	hash_in		insert names in hash table

	epplp	lp|slte_size	step to next SLT entry
	eax7	1,7		step segment number
	tra	search_loop	and keep looking

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	call slt_manager$build_entry(header, segptr, err)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	use	transfer_vector

	entry	build_entry
	tra	build_entry

	use	main

build_entry:
	tsx1	setup		set everything up

	eppbp	ap|2,*		bp -> header pointer
	eppbp	bp|0,*		bp -> header

	lda	bp|slte.init_seg_word is this an initialization segment?
	cana	slte.init_seg,dl	..
	tze	sup		if zero, supervisor segment

	aos	lb|slt.last_init_seg otherwise, init segment
	ldq	lb|slt.last_init_seg segment number in Q
	tra	jn		..

sup:
	aos	lb|slt.last_sup_seg	supervisor segment
	ldq	lb|slt.last_sup_seg	segment number in Q
	cmpq	lb|slt.first_init_seg are we overlapping the init segs?
	trc	error		fatal error if so

jn:
	lls	36+18		shift to left-half of A
	ora	itspair		make an ITS pair
	staq	ap|4,*		and return pointer to segment
	lrl	36+18		back to the right-half Q
	mpy	slte_size,dl	multiply by length of SLT entry
	epplp	lb|slt.seg,ql	lp -> slot for new SLT entry

	mlr	(pr),(pr)		fill in the SLT entry
	desc9a	bp|0,slte_size*4
	desc9a	lp|0,slte_size*4
	eppbp	bp|slte_size	bp -> next part of header

	eppab	lb|slt.name_seg_ptr,*  ab -> SLT name table
	lxl1	ab|name_seg.next_loc  X1 contains first unused location
	stx1	lp|slte.names_ptr	set name pointer in SLT entry
	eppab	ab|0,1		ab -> place for names

	ldq	bp|segnam.count	count of names in Q
	mpy	wdsnm+1,dl	multiply by length of each name
	adlq	1,dl		add 1 for name count itself
	qls	2		multiply by 4
	mlr	(pr,rl),(pr,rl)	copy the names
	desc9a	bp|0,ql
	desc9a	ab|0,ql
	a9bd	bp|0,ql		step pointers
	a9bd	ab|0,ql		..

	lda	lp|slte.branch_required_word Look for branch-required switch
	cana	slte.branch_required,dl Is path provided
	tze	end_entry		No, all finished for this entry

	eax1	ab|0		X1 -> path name
	sxl1	lp|slte.path_ptr	set path name pointer in SLT entry
	ldq	bp|0		character count of path name in Q
	adlq	7,dl		add in to cover count and round up
	qrl	2		round off
	qls	2		..
	mlr	(pr,rl),(pr,rl)	copy the path name
	desc9a	bp|0,ql
	desc9a	ab|0,ql
	a9bd	bp|0,ql		step pointers
	a9bd	ab|0,ql		..

	ldq	lp|slte.acl_provided_word see if ACL was provided
	canq	slte.acl_provided,du check the bit
	tze	end_entry		no ACL provided
	ldq	bp|0		get number of ACL items
	mpy	11,dl		multiply by item size
	adlq	1,dl		and add one for size word
	qls	2		get character count
	mlr	(pr,rl),(pr,rl)	copy the ACL
	desc9a	bp|0,ql
	desc9a	ab|0,ql
	a9bd	ab|0,ql		bump output pointer

end_entry:
	eax1	ab|0		X1 -> free space in name table
	epbpab	ab|0		ab -> base of name table segment
	sxl1	ab|name_seg.next_loc  save first unused loc'n in name table

	ldx0	lp|slte.names_ptr	get pointer to names again
	ldx7	ap|4,*		X7 contains segment number
	eppbp	ab|segnam.name,0		bp -> first name
	tsx6	hash_in		hash in these names

	tra	return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	call slt_manager$get_seg_ptr(name, ptr, err)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	use	transfer_vector

	entry	get_seg_ptr
	tra	get_seg_ptr

	use	main

get_seg_ptr:
	tsx6	get_seg		go search the SLT

	ora	itspair		make segno into an ITS pair
	ldq	0,dl		clear the Q
	staq	ap|4,*		and return the pointer

	tra	return		return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	call slt_manager$get_seg_num(name, num, err)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	use	transfer_vector

	entry	get_seg_num
	tra	get_seg_num

	use	main

get_seg_num:
	tsx6	get_seg		go search the SLT

	arl	18		right-justify the segment number
	sta	ap|4,*		and return the segment number

	tra	return		return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	call slt_manager$get_text_link_ptr(name, text_ptr, link_ptr, err)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	use	transfer_vector

	entry	get_text_link_ptr
	tra	get_text_link_ptr

	use	main

get_text_link_ptr:
	tsx6	get_seg		go search the SLT

	ora	itspair		make segno into a pointer
	ldq	0,dl		clear the Q
	staq	ap|4,*		return text pointer

	eppbp	sb|stack_header.lot_ptr,*  bp -> LOT
	szn	bp|0,au		linkage for this segment?
	tze	no_lkg		if not, return null lkg ptr
	lprpbp	bp|0,au		bp -> linkage
	spribp	ap|6,*		return linkage ptr to caller
	tra	return		and return

no_lkg:	ldaq	nullptr		make link pointer null
	staq	ap|6,*		..

	tra	return		and then return


" GET_SEG - Search the SLT for a Name.

get_seg:
	tsx1	setup		go to save sequence and initialization
	eppbp	ap|2,*		bp -> segment name (char(32) aligned)

	tsx1	hash_name		generate hash code from name
	ldx2	ab|name_seg.ht,al	get start of thread from hash table
get_seg_loop:
	tze	error		if zero thread, name not found

	eppbb	ab|0,2		bb -> name
	cmpc	(pr),(pr)		is this the one?
	desc9a	bp|0,32
	desc9a	bb|segnam.name-segnam.hp,32
	tze	get_seg_found	if so, return info

	ldx2	bb|0		get thread to next name
	tra	get_seg_loop	and loop

get_seg_found:
	lda	segnam.ref,dl	set referenced bit
	orsa	bb|0		..

	lda	bb|0		get thread word
	als	18-segnam.segno_shift  shift segno to AU
	ana	segnam.segno_mask,du  and mask
	tra	0,6		return to caller with segno in AU



" ERROR - Error Return Sequence.

error:
	ldx7	ap|0		pick up number of arguments
	aos	ap|0,7*		set the error code

" RETURN - Return Sequence.

return:
	eppap	sp|stack_frame.operator_ptr,*  restore ptr to caller's ops
	rtcd	sp|stack_frame.return_ptr  return to caller


" HASH_IN - Enter Names for New Segment in Hash Table.

hash_in:
	lxl3	bp|-segnam.name	count of names in X3

hloop:	tsx1	hash_name		generate hash code from this name
	ldx1	ab|name_seg.ht,al	X1 contains hash table entry
	eax0	bp|-segnam.name+segnam.hp  X0 -> new name
	stx0	ab|name_seg.ht,al	add new name to hash thread
	stx1	bp|-segnam.name+segnam.hp  chain new entry to list
	sxl7	bp|-segnam.name+segnam.hp  insert segno in thread word

	eppbp	bp|wdsnm+1	step to next name
	eax3	-1,3		count names
	tnz	hloop		loop until all names processed
	tra	0,6



" HASH_NAME - Generate Hash Code from Segment Name.

hash_name:
	ldq	bp|0		get first word of name
	erq	bp|2		exclusive in two more words
	erq	bp|3		..
	div	127,dl		divide to generate hash code
	tra	0,1		return with hash code in A

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Subroutines.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "



" SETUP - Execute SAVE Sequence and Get Pointer to SLT Segment.

setup:
	ldx0	ap|0		pick up number of arguments
	stz	ap|0,0*		zero out the error code

	epbplb	slt_ptr,*		lb -> base of SLT segment
	epplp	lb|slt.seg	lp -> beginning of SLT entries
	eppab	lb|slt.name_seg_ptr,*  ab -> name table segment
	tra	0,1		return to caller


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Storage and Constants.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	even
itspair:	its	0,0		ITS pair template
nullptr:	its	-1,1		null pointer

	segref	checker_data_,slt_ptr


	join	/text/transfer_vector,main

	end	slt_manager
