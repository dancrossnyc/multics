/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* CHECKER_PRINT_ - Output Routine for the MST Checker.
   Initial coding - T. Skinner, June 10, 1969 
   Revised by N. I. Morris, October 1, 1969	
   iox'ed November 2, 1976 by N. I. Morris	*/

/* Modified BIM 8/82 new checker */

checker_print_: procedure options (variable);

%include checker_dcls_;
%page;

	dcl     iox_$error_output	 ptr ext static;
	dcl     check_mst_severity_	 fixed bin external;

	dcl     checker_data_$time_string char (24) static;
	dcl     com_err_		 entry () options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

	dcl     ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
	dcl     ioa_$rsnnl		 entry() options (variable);
	dcl     ioa_$ioa_switch	 entry () options (variable);
	dcl     cu_$arg_list_ptr	 entry returns (pointer);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     error_table_$fatal_error fixed bin(35) ext static;
	dcl     (cs, ff)		 fixed bin;
	dcl     (output_buffer, file_message) char (136);
	dcl     message		 char (100) aligned;
	dcl     segname		 char (32);
	dcl     prefix		 char (24);
	dcl     severity		 fixed bin;
	dcl     based_fb		 fixed bin based;
	dcl     based_fb_35		 fixed bin (35) based;
	dcl     ap		 pointer;
	dcl     al		 fixed bin (21);
	dcl     argument		 char (al) based (ap);
	dcl     code		 fixed bin (35);
	dcl     error_switch	 bit (1) aligned;
	dcl     term_switch		 bit (1) aligned;

	dcl     (clock, max, rtrim)	 builtin;

	dcl     checker_fatal_error_	 condition;


	error_switch = "0"b;
	cs = 1;					/* control arg */
	ff = 2;					/* first substitute arg */
	go to COMMON;

error:
     entry options (variable);

/* call checker_print_$error (SEVERITY, CODE, segname, cs, arg1 ... argn); */

	term_switch = "0"b;
	go to ERROR_COMMON;

error_term:
     entry options (variable);

          term_switch = "1"b; /* Print only on terminal */
ERROR_COMMON:
	error_switch = "1"b;
	cs = 4;
	ff = 5;

	call cu_$arg_ptr (1, ap, (0), (0));
	severity = ap -> based_fb;
	call cu_$arg_ptr (2, ap, (0), (0));
	code = ap -> based_fb_35;
	call cu_$arg_ptr (3, ap, al, (0));
	segname = argument;
COMMON:

	output_buffer = "";
	call ioa_$general_rs (cu_$arg_list_ptr (), cs, ff, output_buffer, (0), "1"b, "0"b);

	if ^error_switch
	then do;
		if output_buffer ^= ""
		then call ioa_$ioa_switch (checker_data_$output_iocbp, "^a", output_buffer);
		return;
	     end;

	prefix = ERROR_NAMES (severity);

	message = "";
	if code ^= 0
	then call convert_status_code_ (code, (8)" ", message);

	if ^term_switch 
	then call ioa_$ioa_switch (checker_data_$output_iocbp,
	     "***** ^a: ^a ^a", prefix, message, output_buffer);

	check_mst_severity_ = max (check_mst_severity_, severity);
	if severity <= checker_data_$severity
	then return;				/* No print on terminal */
	call ioa_$ioa_switch (iox_$error_output, "");
	call ioa_$ioa_switch (iox_$error_output,
	     "^a ^a: ^a ^a", prefix, segname, message, output_buffer);
	return;

page:
     entry;
	call ioa_$ioa_switch (checker_data_$output_iocbp, "^|");
	return;

skip:
     entry;
	call ioa_$ioa_switch (checker_data_$output_iocbp, "");
	return;

init: entry;
	check_mst_severity_ = 0;
	return;

final:
     entry;
	if check_mst_severity_ > 2
	then call com_err_ (error_table_$fatal_error, "check_mst",
		"Errors of severity 3 encountered.");
	return;
     end checker_print_;
