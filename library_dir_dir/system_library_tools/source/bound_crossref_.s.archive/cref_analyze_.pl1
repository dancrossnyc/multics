/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */

cref_analyze_: procedure (ename_arg, first_pass);

/* This crossreferencer module digs into object segs and analyzes their
   definitions and links. */

/* Modified 740401 by Paul Green to allow type-6 links
   Modified 750414 by PG to handle type-6 links of form a$
   Much renovated by C. D. Tavares 03/04/76 for environments, 2-pass operation,
   etc.
   Modified by CDT 08/31/76 to use renamed MBZ fields in new linkdcl.incl.pl1
   Modified 09/81 by CDT to track source language suffix.
   Modified November 1982 by CAH to fix bindfile parse.
   Modified January 1983 by BIM to fix bug uncovered by CAH; legal characters
   were rejected in bindfiles.
*/

/* parameters */

dcl  (ename_arg	        char (*),
     first_pass	        bit (1) aligned) parameter;

/* entries */

dcl  com_err_	        entry options (variable),
     cref_filegen_$report_error
		        entry options (variable),
     archive_util_$first_element
		        entry (ptr, fixed bin (35)),
     archive_util_$next_element
		        entry (ptr, fixed bin (35)),
     object_info_$display   entry (ptr, fixed bin (24), ptr, fixed bin (35)),
     decode_definition_$decode_cref
		        entry (ptr, ptr, bit (1) aligned, ptr),
     hcs_$terminate_noname  entry (pointer, fixed bin (35)),
     hcs_$initiate_count    entry (char (*), char (*), char (*),
		        fixed bin (24), fixed bin, ptr, fixed bin (35));

dcl  cref_listman_$get_name entry (pointer) returns (char (32) varying),
     cref_listman_$create_primary_block_char
		        entry (char (*) varying, pointer, pointer, pointer,
		        bit (1) aligned, bit (1) aligned, bit (1) aligned)
		        returns (pointer),
     cref_listman_$predefine_primary_block_char
		        entry (char (*) varying, pointer, pointer,
		        bit (1) aligned, bit (1) aligned, bit (1) aligned)
		        returns (pointer),
     cref_listman_$create_primary_block_acc
		        entry (pointer, pointer, pointer, bit (1) aligned,
		        bit (1) aligned, bit (1) aligned)
		        returns (pointer),
     cref_listman_$create_syn_block
		        entry (char (*) varying, pointer, pointer,
		        bit (1) aligned, pointer),
     cref_listman_$create_environment
		        entry (char (*) varying, bit (1) aligned)
		        returns (pointer),
     cref_listman_$assign_def_block
		        entry (pointer dimension (*), fixed bin, pointer),
     cref_listman_$assign_ref_block
		        entry (pointer dimension (*), fixed bin, pointer),
     cref_listman_$create_include_file_block
		        entry (char (*) varying, bit (72) aligned)
		        returns (pointer),
     cref_listman_$assign_include_file_block
		        entry (pointer dimension (*), fixed bin, pointer);

/* automatic */

dcl  bindfile_char_count    fixed bin (24);

dcl  external_names	        (500) char (32),
     n_external_names       fixed bin;

dcl  1 oi		        aligned like object_info;

dcl  array	        (1000) pointer,
     array_count	        fixed bin,
     offset	        fixed bin (18);

dcl  dirname	        char (168),
     ename	        char (32),
     varying_segname        char (32) varying,
     varying_dir_description
		        char (168) varying,
     component_name	        char (32) varying;

dcl  i		        fixed bin;

dcl  1 arg_structure        aligned,
       2 next_def	        ptr,
       2 last_def	        ptr,
       2 block_ptr	        ptr,
       2 section	        char (4) aligned,
       2 offset	        fixed bin,
       2 entrypoint	        fixed bin,
       2 acc_ptr	        ptr;

dcl  acc_ptr	        ptr,
     linkage_header_ptr     ptr,
     definitions_ptr        ptr,
     seg_ptr	        pointer,
     component_ptr	        pointer,
     nomore	        bit (1) aligned,
     none_found	        bit (1) aligned,
     links_end	        fixed bin (18),
     (link_ptr, type_ptr)   ptr,
     (ltype, dir_idx)       fixed bin (18),
     component_node	        pointer,
     boundseg_node	        pointer,
     dir_node	        pointer,
     code		        fixed bin (35);

dcl  is_external	        bit (1) aligned,
     bitcount	        fixed bin (24);

dcl  (segref_name, defref_name) char (32) varying;

dcl  1 acc_string	        aligned based (acc_ptr),
       2 acclen	        fixed bin (9) unaligned unsigned,
       2 string	        char (acc_string.acclen) unaligned;

/* builtins */

dcl  (addr, addrel, binary,
     divide, empty, hbound,
     index, null, length,
     pointer, reverse, rtrim,
     search, substr, verify) builtin;

dcl  cref_abort_	        condition;

/* external static */

dcl  (error_table_$noalloc,
     error_table_$bad_segment,
     error_table_$noentry)  fixed bin (35) external static;

/* based */

dcl  1 search_dir_struc     aligned based (search_dir_ptr),
       2 make_all_names_external
		        bit (1) aligned,
       2 max_dirs	        fixed bin,
       2 n_dirs	        fixed bin,
       2 item	        (0 refer (search_dir_struc.n_dirs)),
         3 search_dirs      char (168),
         3 search_dir_descriptions
		        char (168) varying;

dcl  search_dir_ptr	        pointer static;

dcl  based_word	        bit (36) aligned based;

dcl  1 archive_header       based (component_ptr) aligned,
       2 pad0	        char (12) unal,
       2 name	        char (32) unal,
       2 pad1	        char (40) unal,
       2 bitcnt	        char (8) unal,
       2 pad2	        char (8) unal,
       2 data	        char (1) unal;

/* include files */

%include object_info;
%include linkdcl;

/* The following include file (source_map) has been copied and modified,
   rather than using the include file because the include file doesn't work
   when source maps occur on odd word boundaries (inside archives) - dtm is
   declared there as fixed bin (71), and gets even-word fetched whether it's
   there or not */

dcl  1 source_map	        aligned based (source_map_p),
       2 version	        fixed bin,
       2 number	        fixed bin,
       2 map	        (0 refer (source_map.number)) aligned,
         3 pathname	        unaligned,
	 4 offset	        bit (18),
	 4 size	        bit (18),
         3 uid	        bit (36),
         3 dtm	        bit (72);

dcl  source_map_p	        pointer,
     source_path_ptr        ptr,
     source_path_len        fixed bin,
     source_path	        char (source_path_len) based (source_path_ptr);
%page;
/* initialize random state variables */

	bindfile_char_count = 0;
	n_external_names = 0;
	oi.version_number = object_info_version_2;
	seg_ptr = null;
	ename = ename_arg;

	none_found = "1"b;


/* Search for this module in all the search directories */

	if search_dir_struc.n_dirs < 1 then do;
		call com_err_ (0, "cref_analyze_",
		     "No search list specified for segment ^a.", ename);
		goto signal_abort;
	     end;

	do dir_idx = 1 to search_dir_struc.n_dirs;

	     varying_segname = rtrim (ename);
	     dirname = search_dirs (dir_idx);

	     call hcs_$initiate_count
		(dirname, ename, "", bitcount, 0, seg_ptr, code);

	     if seg_ptr = null then
		if code = error_table_$noentry then ;	/* well, ok */
		else goto crump;			/* oh oh */

	     else do;				/* we found it */
		     none_found = ""b;
		     varying_dir_description =
			search_dir_descriptions (dir_idx);

		     call process_segment;

		     call hcs_$terminate_noname (seg_ptr, code);

/* Even if found, keep looping to search other dirs unless user said -first */

		     if first_switch then return;
		end;
	end;

	if none_found then
crump:
	     if first_pass then
		call com_err_ (code, "cref_analyze_", ename);

/* We know code is error_table_$noentry at this point.  This is non-fatal */

	return;

returner:
	call hcs_$terminate_noname (seg_ptr, code);
	return;
%page;
process_segment: proc;

	dir_node =
	     cref_listman_$create_environment
	     (varying_dir_description, "1"b);

/* Ignore names of the form "mumble.1"-- this is garbage left by update_seg */

	if length (varying_segname) > length (".1") then
	     if substr (varying_segname,
		length (varying_segname) - 1, 1) = "." then
		if search (substr (varying_segname,
		     length (varying_segname), 1), "0123456789") > 0 then
		     return;

/* Ignore unique names (same reason) */

	if substr (varying_segname, 1, 1) = "!" then return;


/* Now see if the segment we're examining is an archive or standalone.  Process
   each as they deserve. */

	if contains_suffix (varying_segname, ".archive") then do;

		varying_segname =
		     substr (varying_segname, 1,
		     length (varying_segname) - length (".archive"));

/* Check for componented object archives (with names of the form bound_foo_.1,
   bound_foo_.2, etc.  Treat as one archive. */

		i = index (reverse (varying_segname), ".");
		if i > 0 then
		     if verify (reverse (varying_segname), "0123456789")
			= i then
			varying_segname = substr (varying_segname, 1,
			     length (varying_segname) - i);

		if first_pass then
		     call find_bindfile (seg_ptr, varying_segname);

/* The environment of all these components will be the bound segment name and
   the dir description */

		boundseg_node = cref_listman_$create_environment
		     (varying_segname, (bindfile_char_count > 0));

/* Add all synonyms for all components */

		if bindfile_char_count > 0 then call add_bindfile_synonyms;

/* Loop through all components, examining their definitions and links */

		component_ptr = seg_ptr;

		call archive_util_$first_element (component_ptr, code);
		if code ^= 0 then do;
			call com_err_ (code, "cref_analyze_",
			     "Archive format error in ^a.", ename);
			return;
		     end;

		do while (code ^= 1);

/* (which is archive_util_'s clever way of saying it's done) */

		     component_name = rtrim (archive_header.name);

/* Try not to process bindfiles! */

		     if ^contains_suffix (component_name, ".bind") then
			call process_component
			     (component_name, addr (archive_header.data),
			     binary (bitcnt), "1"b);

		     call archive_util_$next_element (component_ptr, code);
		end;
	     end;


/* Otherwise, segment is not an archive. */

	else do;
		boundseg_node = stand_alone_node;

		call process_component
		     (varying_segname, seg_ptr, bitcount, ""b);
	     end;

	return;

     end process_segment;
%page;
process_component: proc (module_name, module_ptr, bitcount, is_archive);

dcl  module_name	        char (*) varying parameter,
     module_ptr	        pointer parameter,
     bitcount	        fixed bin (24) parameter,
     is_archive	        bit (1) aligned parameter;

dcl  hcs_$status_	        entry (char (*), char (*), fixed bin, pointer,
		        pointer, fixed bin (35));

dcl  1 branch_info	        aligned,
       2 type	        bit (2) unaligned,
       2 n_names	        fixed bin (15) unaligned,
       2 names_relp	        bit (18) unaligned,
       2 (dtm, dtu)	        bit (36) unaligned,
       2 mode	        bit (5) unaligned,
       2 pad	        bit (13) unaligned,
       2 records	        fixed bin (17) unaligned;

dcl  name_area	        area (2000);

dcl  names	        (branch_info.n_names) char (32) aligned
		        based (names_ptr),
     names_ptr	        pointer;

dcl  varying_addname        char (32) varying,
     (i, j)	        fixed bin;

dcl  lang_suffix_node       pointer;


/* Get information about object seg. */

	call object_info_$display
	     (module_ptr, bitcount, addr (oi), code);
	if code ^= 0 then do;
		if first_pass then do;
			call cref_filegen_$report_error
			     (code, "cref_analyze_",
			     "^a is non-object.", module_name);
			component_node =
			     cref_listman_$create_primary_block_char
			     (module_name, non_object_node, (dir_node),
			     null, "1"b, "1"b, "1"b); /* do anyway */
		     end;
		return;
	     end;

	if oi.bound then do;

/* A crossref of bound segments is useless, because you can no longer tell
   which outward links are used by which components.  */

		if first_pass then
		     call cref_filegen_$report_error
			(error_table_$bad_segment, "cref_analyze_",
			"^a is bound.", module_name);
		return;
	     end;

	if is_archive then
	     is_external = check_external_name (module_name);
	else is_external = "1"b;

/* Get language suffix if available (some translators like lisp skip it) */

	lang_suffix_node = null;

	if oi.source_map > 0 then do;
		source_map_p = addrel (oi.symbp, oi.source_map);
		source_path_ptr = addrel (oi.symbp,
		     source_map_p -> source_map.offset (1));
		source_path_len =
		     binary (source_map_p -> source_map.size (1));
		i = source_path_len + 2
		     - index (reverse (source_path), ">");
		j = index (substr (source_path, i), ".");
		if j >= 0 then
		     lang_suffix_node = cref_listman_$create_environment
			(substr (source_path, i + j - 1), "0"b);
	     end;

	else source_map_p = null;

/* Enter this name into the Big Book */

	component_node = cref_listman_$create_primary_block_char
	     (module_name, boundseg_node, dir_node, lang_suffix_node,
	     "1"b, first_pass, is_external);


/* Get the info we need on both passes to munch this module */

	linkage_header_ptr = oi.linkp;
	definitions_ptr = oi.defp;

	call decode_definition_$decode_cref
	     (definitions_ptr, addr (arg_structure), nomore,
	     linkage_header_ptr);


	if first_pass then do;

/* On the first pass, we record all necessary synonyms and all existing
   definitions (entrypoints). */

		if ^is_archive then do;

/* Use any added names on the segment as synonyms */

			call hcs_$status_
			     (dirname, ename, 1, addr (branch_info),
			     addr (name_area), code);
			if code ^= 0 then goto crump;

			names_ptr = pointer
			     (addr (name_area), branch_info.names_relp);

/* format: ind3 */

			do i = 1 to branch_info.n_names;
			   if names (i) ^= ename then do;
			         varying_addname = rtrim (names (i));

			         call cref_listman_$create_syn_block
				  (varying_addname, boundseg_node,
				  dir_node, "1"b, component_node);
			      end;
			end;

/* format: revert */

			free names in (name_area);

		     end;


/* Record all external definitions into this object segment. */

		array_count = 0;

		do while (nomore = "0"b);

		     if (section = "text") |
			(section = "link") then do;

			     array_count = array_count + 1;

			     if array_count > hbound (array, 1) then do;
				     explanation = "definitions";
				     goto out_of_space;
				end;

/* Record this definition */
			     array (array_count) =
				cref_listman_$create_primary_block_acc
				(arg_structure.acc_ptr, component_node,
				dir_node, ""b, "1"b, ""b);
			end;

/* Find next definition */

		     call decode_definition_$decode_cref
			(arg_structure.next_def,
			addr (arg_structure), nomore, null);
		end;

		if array_count > 0 then
		     call cref_listman_$assign_def_block
			(array, array_count, component_node);


/* Now get info about include files if requested */

		if (do_include_files & source_map_p ^= null) then do;

			array_count =
			     source_map_p -> source_map.number - 1;

			if array_count > hbound (array, 1) then do;
				explanation = "include files";
				goto out_of_space;
			     end;

/* Start from 2 (1 is the program's own source) */

			do i = 2 to source_map_p -> source_map.number;

			     source_path_ptr = addrel (oi.symbp,
				source_map_p -> source_map.offset (i));
			     source_path_len = binary
				(source_map_p -> source_map.size (i));

/* Strip off dirname */

			     j = source_path_len + 2
				- index (reverse (source_path), ">");

			     array (i - 1) =
				cref_listman_$create_include_file_block
				(substr (source_path, j),
				source_map_p -> source_map.dtm (i));
			end;

			if array_count > 0 then
			     call cref_listman_$assign_include_file_block
				(array, array_count, component_node);

		     end;

		return;
	     end;


	else do;

/* Pass two: record all links denoting outward references from this object
   segment.  */

		array_count = 0;

/* Avoid refugee definitions ("movdef") in linkage section */

		if linkage_header_ptr -> virgin_linkage_header.defs_in_link
		     = "010000"b then
		     links_end = binary (linkage_header_ptr ->
			virgin_linkage_header.def_offset) - 2;

		else links_end = binary (linkage_header_ptr ->
			virgin_linkage_header.linkage_section_lng) - 2;

		do offset =
		     binary (linkage_header_ptr -> header.begin_links)
		     to links_end by 2;

		     link_ptr = addrel (linkage_header_ptr, offset);

/* link.ft2 should be unsnapped link (46 octal) */

		     if link_ptr -> link.ft2 = "46"b3 then do;
			     type_ptr = addrel (definitions_ptr,
				addrel (definitions_ptr, link_ptr ->
				link.exp_ptr) -> exp_word.type_ptr);

			     ltype = binary (type_ptr -> type_pair.type);

			     if ltype < 1 then goto bad_link_type;
			     if ltype > 6 then goto bad_link_type;

/* Get pointer to ACC string with segname in it */

			     acc_ptr = addrel (definitions_ptr,
				type_ptr -> type_pair.seg_ptr);

/* format: comcol40 */

			     goto record_link_segref (ltype);


record_link_segref (1):	         /* myself$ */
record_link_segref (5):	         /* myself$entry */

/* Check for special "*system" link */

			     if binary
				(type_ptr -> type_pair.seg_ptr) = 5
			     then segref_name = "*system";
			     else segref_name = module_name;
			     goto record_link_segref_common;

record_link_segref (3):	         /* segname$ */
record_link_segref (4):	         /* segname$entry */
record_link_segref (6):	         /* either, create-if-not-found */
			     segref_name = acc_string.string;

record_link_segref_common:
			     array_count = array_count + 2;
			     if array_count > hbound (array, 1) then do;
				     explanation = "links";
				     goto out_of_space;
				end;
			     array (array_count - 1) =
				cref_listman_$create_primary_block_char
				(segref_name, boundseg_node, dir_node,
				null, "1"b, ""b, ""b);


/* Get pointer to ACC entryname, if it exists */

			     acc_ptr = addrel (definitions_ptr,
				type_ptr -> type_pair.ext_ptr);

			     goto record_link_defref (ltype);

record_link_defref (6):	         /* either, create-if-not-found */
			     if type_ptr -> type_pair.ext_ptr = ""b then
				goto link_has_no_defname;

			     if acc_ptr -> based_word = ""b then
				goto link_has_no_defname;

record_link_defref (4):	         /* segname$entry */
record_link_defref (5):	         /* myself$entry */
link_has_defname:
			     defref_name = acc_string.string;
			     goto record_link_defref_common;

record_link_defref (1):	         /* myself$ */
record_link_defref (3):	         /* segname$ */
link_has_no_defname:
			     defref_name = segref_name || "$";

record_link_defref_common:
			     array (array_count) =
				cref_listman_$create_primary_block_char
				(defref_name, array (array_count - 1),
				dir_node, null, ""b, ""b, ""b);

			     goto do_next_link;

record_link_segref (2):	         /* obsolete, ITB link */
record_link_defref (2):
bad_link_type:
			     call cref_filegen_$report_error
				(0, "cref_analyze_",
				"Invalid link type ^d found in ""^a""",
				ltype, module_name);
do_next_link:
			end;
		end;

/* format: revert */

		if array_count > 0 then
		     call cref_listman_$assign_ref_block
			(array, array_count, component_node);

		return;
	     end;

     end process_component;
%skip (5);
out_of_space:

dcl  explanation	        char (32);

	call com_err_ (error_table_$noalloc, "cref_analyze_",
	     "Internal table overflow while processing ^a in component ^a",
	     explanation, cref_listman_$get_name (component_node));
signal_abort:
	signal cref_abort_;
	goto signal_abort;
%page;
add_bindfile_synonyms: proc;

dcl  name		        char (32) varying;

dcl  token_pos	        fixed bin (21),
     token	        char (32) varying;

dcl  alphabetics	        char (84) static options (constant) initial
		        ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$0123456789.?/*&^%#@!{}'\|+=-`~"); /* binder and this should take doubled quotes, but since bind dont, we dont have to */

dcl  i		        fixed bin;

dcl  master_node	        pointer;

dcl  is_external	        bit (1) aligned,
     no_synonyms	        bit (1) aligned static;

	if bindfile_char_count = 0 then return;
	if no_synonyms then return;

/* Initialize for token parse */

	token_pos = 1;
	token = "";

/* Scan bindfile until it ends */

/* format: ind3 */

	do while ("1"b);

/* Find next objectname statement */

	   i = index (substr (bindfile, token_pos), "objectname") - 1;

	   if token ^= "objectname" then do;
	         if i < 0 then return;
	         token_pos = token_pos + i + length ("objectname");
	      end;

	   token = get_token ();
	   if token = ":" then do;

/* Record component name */

	         name = get_token ();

	         master_node =
		  cref_listman_$predefine_primary_block_char
		  (name, boundseg_node, dir_node, "1"b, first_pass,
		  check_external_name (name));

	         call flush;			/*  to a ";" */

/* Now search for "synonym:" */

	         token = get_token ();

	         do while (token ^= "objectname");
		  if token ^= "synonym" then call flush;

		  else if get_token () ^= ":" then call flush;

		  else do;

		        token = ",";

		        do while (token = ",");
			 token = get_token ();

			 if all_names_external then
			      is_external = "1"b;

			 else do;
			       do i = 1 to n_external_names
				while (external_names (i)
				^= token);
			       end;

			       if i <= n_external_names then
				  is_external = "1"b;
			       else is_external = ""b;
			    end;

/* Record this synonym */

			 call cref_listman_$create_syn_block
			    (token, boundseg_node, dir_node,
			    is_external, master_node);


			 token = get_token ();	/* "," or ";" */
		        end;

		        if token ^= ";" then do;
			    call com_err_ (0, "cref_analyze_",
			       "Unrecoverable error parsing ^a for ^a",
			       "bindfile", name);
			    goto signal_abort;
			 end;
		     end;

		  token = get_token ();
	         end;
	      end;

	end;

/* format: revert */

return_from_syn_search: return;
%skip (5);
flush: proc;

dcl  i		        fixed bin (21),
     in_comment	        bit (1),
     token	        char (32) varying;

	i = index (substr (bindfile, token_pos), ";");
	if i = 0 then goto return_from_syn_search;

	token_pos = token_pos + i;
	return;

get_token: entry returns (char (32) varying);

dcl  separators	        char (3) static initial ("
	 ");					/* NL, tab, SP */

	in_comment = "1"b;

	do while (in_comment);
	     i = verify (substr (bindfile, token_pos), separators) - 1;
	     if i < 0 then goto return_from_syn_search;
	     token_pos = token_pos + i;

	     if substr (bindfile, token_pos, 2) = "/*" then do;
		     i = index (substr (bindfile, token_pos), "*/");
		     if i = 0 then goto return_from_syn_search;
		     token_pos = token_pos + i + 1;
		end;

	     else in_comment = ""b;
	end;

	i = verify (substr (bindfile, token_pos), alphabetics) - 1;
	if i = -1 then i = bindfile_char_count - token_pos + 1;
	else if i = 0 then i = 1;
	token = substr (bindfile, token_pos, i);
	token_pos = token_pos + i;
	return (token);

     end flush;
%skip (5);
find_bindfile: entry (archive_ptr, archive_name);

dcl  archive_ptr	        pointer parameter,
     archive_name	        char (*) varying;

dcl  header_p	        pointer,
     archive_util_$first_disected
		        entry (ptr, ptr, char (32), fixed bin (24),
		        fixed bin (35)),
     archive_util_$disected_element
		        entry (ptr, ptr, char (32), fixed bin (24),
		        fixed bin (35));

dcl  code		        fixed bin (35),
     bitcount	        fixed bin (24),
     component_name	        char (32),
     bindfile_ptr	        pointer static,
     bindfile	        char (bindfile_char_count) based (bindfile_ptr);


	header_p = archive_ptr;
	bindfile_char_count = 0;
	n_external_names = 0;
	no_synonyms = ""b;
	all_names_external = make_all_names_external;

	call archive_util_$first_disected
	     (header_p, bindfile_ptr, component_name, bitcount, code);

/* Find bindfile */

	do while (code = 0);
	     if index (component_name, ".bind") ^= 0 then
		code = 1;
	     else call archive_util_$disected_element
		     (header_p, bindfile_ptr, component_name, bitcount, code);
	end;

	if bindfile_ptr = null then return;

/* Found bindfile.  Examine it. */

	bindfile_char_count = divide (bitcount, 9, 21, 0);

	if index (bindfile, "synonym") = 0 then
	     no_synonyms = "1"b;

	if all_names_external then return;

	token_pos = 1;
	token = "";

	do while (token ^= ":");

/* Makes sure we pick up "Addname:", not just "Addname" */

	     do while (get_token () ^= "Addname");

/* If we run out of bindfile, get_token will do a non-local return anyway */

	     end;

	     token = get_token ();

	     if token = ";" then do;			/* "Addname;" */
		     all_names_external = "1"b;
		     return;
		end;
	end;

/* We have an "Addname:" statement. */

	do while (token ^= ";");
	     n_external_names = n_external_names + 1;
	     if n_external_names > hbound (external_names, 1) then do;
		     call com_err_ (0, "cref_analyze_",
			"More than ^d addnames in bindfile for ^a.",
			n_external_names - 1, archive_name);
		     goto signal_abort;
		end;

	     external_names (n_external_names) = get_token ();
	     token = get_token ();
	end;

	return;
%skip (5);
check_external_name: entry (testname) returns (bit (1) aligned);

dcl  testname	        char (*) varying;

dcl  all_names_external     bit (1) aligned static;

	if all_names_external then return ("1"b);
	if bindfile_char_count = 0 then return (""b);

	do i = 1 to n_external_names;
	     if external_names (i) = testname then return ("1"b);
	end;

	return (""b);
     end add_bindfile_synonyms;
%skip (5);
contains_suffix: proc (name, suffix) returns (bit (1));

dcl  (name	        char (*) varying,
     suffix	        char (*)) parameter;

	if length (name) ^> length (suffix) then
	     return ("0"b);
	if index (name, suffix) ^=
	     length (name) - length (suffix) + 1 then
	     return ("0"b);
	return ("1"b);
     end contains_suffix;
%skip (5);
init: entry (first_switch_arg, include_file_switch_arg, search_dir_ptr_arg);

dcl  (first_switch_arg,
     include_file_switch_arg) bit (1),
     search_dir_ptr_arg     pointer,
     (first_switch,
     do_include_files)      bit (1) aligned static;
dcl  (stand_alone_node,
     non_object_node)       pointer static;


/* If first_sw = "1"b, we stop after finding first occurrence of an entryname
   in any of the search dirs,  If not, we seek ALL occurrences. */

	first_switch = first_switch_arg;

	do_include_files = include_file_switch_arg;
	search_dir_ptr = search_dir_ptr_arg;

	stand_alone_node = cref_listman_$create_environment
	     ("STAND-ALONE", "1"b);
	non_object_node = cref_listman_$create_environment
	     ("NON-OBJECT", "1"b);
	return;

     end cref_analyze_;
