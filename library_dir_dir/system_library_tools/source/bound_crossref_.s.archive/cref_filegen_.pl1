/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2017-01-01,Anthony), approve(2017-01-01,MCR10022),
     audit(2017-01-08,GDixon), install(2017-01-09,MR12.6f-0010):
     Fix margins so that pcref does not miss entries due to line breaks in lone
     entry point names.
                                                   END HISTORY COMMENTS */

/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5,ind3 */
cref_filegen_: proc (output_seg_ptr_arg, msf_fcb_ptr_arg);

/* This module simply converts all the data in the cross-referencer's
   database into a printable file.

   Completely rewritten 02/03/76 by C. D. Tavares
   Modified 11/19/76 by CDT to allow output to be an MSF.
   Last modified 12/06/80 by CDT to fix bug where random entrypoints of
   non-located modules were being printed without "(?)" after them.
   Modified: 25 March 1985 by G. Palter to fix the bug which causes cref
   to generate a component full of nulls under very rare circumstances.
*/


dcl  output_seg_ptr_arg     pointer parameter,
     msf_fcb_ptr_arg        pointer parameter;

dcl  output_seg_ptr	        pointer,
     msf_fcb_ptr	        pointer;

dcl  output_seg	        char (max_char_count) based (output_seg_ptr),
     max_char_count	        fixed bin (21) initial (sys_info$max_seg_size * 4),
     sys_info$max_seg_size  ext fixed bin (35);

dcl  (char_position,
     line_position,
     last_blackspace)       fixed bin (21),
     cur_component	        fixed bin,
     node		        pointer,
     is_synonym	        bit (1) aligned,
     bucket	        fixed bin;

dcl  (adde, divide, index,
     length, max, mod, null,
     string, substr, unspec) builtin;

dcl  cref_listman_$get_consecutive_segnames
		        entry (pointer, fixed bin) returns (pointer),
     cref_listman_$get_primary_block_long
		        entry (pointer, char (32) varying dimension (*),
		        fixed bin, bit (1) aligned, char (*) varying,
		        char (*) varying),
     cref_listman_$get_defs entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$get_implicit_defs
		        entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$get_name entry (pointer) returns (char (32) varying),
     cref_listman_$get_name_with_suffix
		        entry (pointer) returns (char (32) varying),
     cref_listman_$get_crossrefs
		        entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$get_consecutive_include_files
		        entry (pointer, fixed bin, char (*) varying,
		        bit (72)) returns (pointer),
     cref_listman_$get_include_file_crossrefs
		        entry (pointer, pointer dimension (*), fixed bin);

dcl  include_file_name      char (32) varying,
     date_time_modified     bit (72);

dcl  msf_manager_$get_ptr   entry (pointer, fixed bin, bit (1) aligned,
		        pointer, fixed bin (24), fixed bin (35)),
     msf_manager_$adjust    entry (pointer, fixed bin, fixed bin (24),
		        bit (3) aligned, fixed bin (35)),
     hcs_$truncate_seg      entry (pointer, fixed bin (19), fixed bin (35));

dcl  char_dtm	        char (24);

dcl  date_time_	        entry (bit (72), char (*));

dcl  cref_filegen_$report_error
		        entry options (variable);


dcl  error_table_$no_ext_sym
		        fixed bin (35) static external;

dcl  dir_name	        char (168) varying,
     bound_seg_name	        char (32) varying,
     environment_description
		        char (200) varying;

dcl  (i, j, k)	        fixed bin;

dcl  form_feed	        char (1);

dcl  default_max_line_position
		        fixed bin static options (constant) init (132),
     max_line_position      fixed bin static;

dcl  name_list	        (100) char (32) varying,
     explanation	        char (32) varying,
     n_names	        fixed bin;


dcl  def_array_len	        fixed bin,
     crossref_array_len     fixed bin;

dcl  large_strucp	        pointer static initial (null);

dcl  1 large_struc	        based (large_strucp) aligned,
       2 ndefs	        fixed bin,
       2 def_array	        (NDEFS refer (ndefs)) pointer,
       2 def_ok	        (NDEFS refer (ndefs)) bit (1) unaligned,
       2 crossref_array     (NDEFS refer (ndefs)) pointer,
       2 names	        (NDEFS refer (ndefs)) char (32) varying,
       2 sort_structure     aligned,
         3 n_elements       fixed bin (24),
         3 name_ptrs        (NDEFS refer (ndefs)) ptr unaligned,
       2 index_structure    aligned,
         3 n_elements       fixed bin (24),
         3 indices	        (NDEFS refer (ndefs)) fixed bin (24);

dcl  NDEFS	        fixed bin static initial (2000) options (constant);

dcl  (seg_was_found,
     should_complain)       bit (1) aligned,
     defname	        char (32) varying;

dcl  moby_bar	        char (20) varying static initial ((20)"-");

dcl  (left_margin	        initial (0),
     any_margin	        initial (1000),
     def_margin	        initial (1),
     syn_margin	        initial (50),
     title_margin	        initial (40),
     crossref_margin        initial (20)) fixed bin static;

dcl  bar_margin	        fixed bin,
     interstice	        fixed bin;

dcl  com_err_	        entry options (variable),
     cref_abort_	        condition;

dcl  code		        fixed bin (35);
%page;
      output_seg_ptr = output_seg_ptr_arg;
      msf_fcb_ptr = msf_fcb_ptr_arg;

      char_position = 1;
      cur_component = 0;
      last_blackspace = 1;
      line_position = 1;

      bar_margin = max_line_position - length (moby_bar);
      interstice = max_line_position - 2 * length (moby_bar);

      unspec (form_feed) = "014"b3;

      node = null;
      bucket = 0;

      node = cref_listman_$get_consecutive_segnames (node, bucket);

      do while (node ^= null);

         seg_was_found = ""b;

/* Get all the good dirt about this entry */

         call cref_listman_$get_primary_block_long
	    (node, name_list, n_names, is_synonym, dir_name, bound_seg_name);

         if n_names < 0 then do;
	     explanation = "synonyms";
	     goto out_of_room;
	  end;

         environment_description = "";

         if bound_seg_name = "" then if dir_name = "" then
	     environment_description = "***** NOT FOUND *****";

         if is_synonym then seg_was_found = "1"b;

         if environment_description = "" then do;
	     seg_was_found = "1"b;
	     environment_description = "***** " || bound_seg_name
		|| " in " || dir_name || " *****";
	  end;


         if (^short_switch | seg_was_found) then do;

	     call print_token
		((moby_bar), left_margin, left_margin,
		max_line_position);			/* header */


	     if ^is_synonym then
	        call print_token
		   ((environment_description), any_margin,
		   length (moby_bar) + max (1,
		   divide (interstice -
		   length (environment_description), 2, 17)),
		   max_line_position);

	     call print_token
		((moby_bar), bar_margin, bar_margin, max_line_position);

/* Put out the name of the segment */

	     call print_token
		((name_list (1)), left_margin, left_margin,
		max_line_position);

	     if ^seg_was_found then
	        call print_token (" (?)", max_line_position,
		   left_margin, max_line_position);

	     call print_space;
	     call print_space;

	     if is_synonym then
	        call print_token
		   ("SEE:  " || name_list (2), title_margin,
		   title_margin, max_line_position);

	     else do;

		 if n_names > 1 then do;		/* it has syns */

		       call print_token ("SYNONYM:  ",
			  title_margin, title_margin,
			  max_line_position);

		       do i = 2 to n_names;
			if i > 2 then
			   call print_token (", ", any_margin,
			        syn_margin, max_line_position);
			call print_token ((name_list (i)), any_margin,
			     syn_margin, max_line_position - 2);

/* We don't want a line starting with a comma */
		       end;
		    end;

/* Get the entrypoins of this module */

		 call cref_listman_$get_defs
		      (node, def_array, def_array_len);

		 if def_array_len < 0 then do;
		       explanation = "definitions";
		       goto out_of_room;
		    end;

		 call loop_thru_defs (""b);

/* Now get the defs that should have been there, but weren't */

		 call cref_listman_$get_implicit_defs
		      (node, def_array, def_array_len);

		 if def_array_len < 0 then do;
		       explanation = "implicit definitions";
		       goto out_of_room;
		    end;

		 if def_array_len > 0 then do;
		       string (def_ok) = ""b;
		       if seg_was_found then do;

/* Report that implicit defs were generated for it */

			   should_complain = ""b;

			   do i = 1 to def_array_len;

			      defname = cref_listman_$get_name
				 (def_array (i));

			      if index (defname, "$") =
				 length (defname) then do;

/* links of the form "myself$" are ok; trim the "$" */

				  defname = substr (defname, 1,
				       length (defname) - 1);

				  do j = 1 to n_names while
				       (name_list (j) ^= defname);
				  end;

/* If none of the names matched, complain */

				  if j > n_names then
				     should_complain = "1"b;

				  else def_ok (i) = "1"b;
			         end;

			      else if defname = "symbol_table" then
			         def_ok (i) = "1"b;

			      else should_complain = "1"b;
			   end;

			   if should_complain then

/* Significant error */
			      call cref_filegen_$report_error
				 (error_table_$no_ext_sym,
				 "cref_filegen_",
				 "^a were generated for ^a.",
				 "Implicit definitions",
				 cref_listman_$get_name (node));
			end;
		    end;

		 call loop_thru_defs ("1"b);

	        end;

	     call print_lineskip;
	  end;

         node = cref_listman_$get_consecutive_segnames (node, bucket);
      end;


/* Now list the include files */

      node = null;
      bucket = 0;

      node = cref_listman_$get_consecutive_include_files
	 (node, bucket, include_file_name, date_time_modified);

      if node ^= null then do;

	  call print_formfeed;

	  do while (node ^= null);

	     call print_token
		((moby_bar), left_margin, left_margin, max_line_position);

	     call print_token
		((include_file_name), left_margin, left_margin,
		max_line_position);

	     call print_space;
	     call print_space;

	     call date_time_ (date_time_modified, char_dtm);

	     call print_token
		("***** ", syn_margin, syn_margin, max_line_position);
	     call print_token
		((char_dtm), any_margin, syn_margin, max_line_position);
	     call print_token
		(" *****", any_margin, syn_margin, max_line_position);


	     call cref_listman_$get_include_file_crossrefs
		(node, crossref_array, crossref_array_len);
	     if crossref_array_len < 0 then do;
		 explanation = "include file crossrefs";
		 goto out_of_room;
	        end;

	     do i = 1 to crossref_array_len;
	        if i = 1 then call print_token
		      ("", crossref_margin, crossref_margin,
		      max_line_position);
	        call print_token
		   ((cref_listman_$get_name_with_suffix
		   (crossref_array (i))),
		   any_margin, crossref_margin, max_line_position);
	        call print_tab;
	     end;

	     node = cref_listman_$get_consecutive_include_files
		(node, bucket, include_file_name, date_time_modified);

	     call print_lineskip;
	  end;

	  call print_lineskip;
         end;


/* Now append any waiting error messages to the end of the listing */

      if err_index > 0 then do;

	  call print_formfeed;

	  call put_out_fixedstring
	       (substr (err_messages, 1, err_index));
         end;


      call msf_manager_$adjust
	 (msf_fcb_ptr, cur_component, (char_position - 1) * 9, "111"b, code);
      if code ^= 0 then
         call com_err_
	    (code, "cref_filegen_", "Setting bit count on output file.");

      return;
%skip (5);
out_of_room:
      call com_err_ (0, "cref_filegen_",
	 "Internal table has overflowed.  Too many ^a for ""^a""",
	 explanation, name_list (1));
      signal cref_abort_;
      goto out_of_room;
%page;
loop_thru_defs: proc (defs_are_implicit);

/* This internal subroutine prints the references for each definition, as well
   as printing the definition itself.  */

dcl  defs_are_implicit      bit (1) aligned;

dcl  (i, j)	        fixed bin;

dcl  sort_items_indirect_$varying_char
		        entry (pointer, pointer);


      if def_array_len < 1 then return;

      sort_structure.n_elements, index_structure.n_elements = def_array_len;

      do i = 1 to def_array_len;
         names (i) = cref_listman_$get_name (def_array (i));
         name_ptrs (i) = addr (names (i));
      end;

      if def_array_len > 1 then
         call sort_items_indirect_$varying_char
	    (addr (sort_structure), addr (index_structure));

      else indices (1) = 1;

/* Now print the info about each item */

      do k = 1 to def_array_len;

         i = index_structure.indices (k);

         call print_token
	    ((cref_listman_$get_name (def_array (i))), def_margin,
	    def_margin, max_line_position);

         if defs_are_implicit then
	  if ^def_ok (i) then
	     call print_token
		(" (?)", max_line_position, left_margin,
		max_line_position);
         call print_tab;

         call cref_listman_$get_crossrefs
	    (def_array (i), crossref_array, crossref_array_len);

/* The crossrefs will always be in alphabetical order, because they were
   created via a scan of the database which was performed in alphabetical
   order.  */

         if crossref_array_len < 0 then do;
	     explanation = "cross-references";
	     goto out_of_room;
	  end;

/* Put out the names of all the referencers */

         do j = 1 to crossref_array_len;
	  if j = 1 then call print_token
		("", crossref_margin, crossref_margin, max_line_position);
	  else call print_tab;

	  call print_token
	       (cref_listman_$get_name_with_suffix (crossref_array (j)),
	       any_margin, crossref_margin, max_line_position);
         end;
      end;
   end loop_thru_defs;
%skip (5);
print_token: proc (token, force_column, fold_column, max_column);

/* This internal subroutine places some token into the output file.  The token
   is constrained to appear in a place defined by the other arguments.  Its
   leftmost char cannot appear at any column greater than force_column; if it
   would, it is put on a new line.  The leftmost char of the token cannot
   appear at any column less than fold_column, which is a left-margin
   indicator.  Its rightmost character cannot exceed max_column; if it does,
   it is put on a new line instead.  */

dcl  token	        char (168) varying,

/* If I use (*) I get a non-quick block */

     (force_column, fold_column, max_column) fixed bin;

dcl  token_len	        fixed bin;

dcl  substr	        builtin;

dcl  (tab		        initial ("	"),
     space	        initial (" "),
     nl		        initial ("
")   )		        char (1) varying static;

dcl  (ten_spaces	        char (10) initial ((10)" "),
     thirteen_tabs	        char (13) initial ((13)"	"),
     two_nls	        char (2) varying initial ((2)"
")   )		        static;

dcl  temp		        fixed bin;

      token_len = length (token);

      if line_position > force_column then do;		/* must fold */
	  call backup_to_position (last_blackspace);
	  call put_out ((nl));
	  line_position = 0;
         end;

      if line_position < fold_column then do;
	  temp = divide (fold_column, 10, 17)
	       - divide (line_position, 10, 17);

	  if temp > 0 then do;			/* can use tabs? */
	        call put_out (substr (thirteen_tabs, 1, temp));
	        line_position = 10 * divide (fold_column, 10, 17);
	     end;

	  call put_out (substr (ten_spaces, 1, fold_column - line_position));
	  line_position = fold_column;
         end;

      if token_len + line_position > max_column then do;	/* must fold */
	  call backup_to_position (last_blackspace);
	  call put_out ((nl));

	  if token_len + fold_column > max_column then

/* Too big for line as is, don't fold */
	     line_position = 0;

	  else do;
	        call put_out
		   (substr (thirteen_tabs, 1,
		   divide (fold_column, 10, 17)));
	        call put_out
		   (substr (ten_spaces, 1, mod (fold_column, 10)));
	        line_position = fold_column;
	     end;
         end;

      call put_out (token);
      line_position = line_position + token_len;
      last_blackspace = char_position;
      return;

print_space: entry;

      line_position = line_position + 1;
      if line_position + 1 ^> max_line_position then call put_out ((space));
      return;

print_formfeed: entry;
      call put_out ((form_feed));
      return;

print_lineskip: entry;

      call put_out ((two_nls));
      line_position = 0;
      last_blackspace = char_position;			/* NL's count */
      return;

print_tab: entry;

dcl  new_line_position      fixed bin;

      if line_position > max_line_position then return;

      new_line_position = 10 * (divide (line_position, 10, 17) + 1);
      if new_line_position ^> max_line_position then call put_out ((tab));
      line_position = new_line_position;

      return;
   end print_token;
%skip (5);
put_out: proc (token);

dcl  token	        char (168) varying;

/* If I use (*) I get a non-quick block */

dcl  token_len	        fixed bin;

dcl  chars_left	        fixed bin (21);

      token_len = length (token);
      if token_len = 0 then return;

      chars_left = max_char_count - char_position + 1;

      if token_len >= chars_left then
         call split_across_components ((token), (token_len), chars_left);

      else do;					/* simple case */
	  substr (output_seg, char_position, token_len) = token;
	  char_position = char_position + token_len;
         end;

      return;
   end put_out;

put_out_fixedstring: proc (fixedstring);

dcl  fixedstring	        char (*),
     string_len	        fixed bin (21),
     chars_left	        fixed bin (21);

      string_len = length (fixedstring);
      chars_left = max_char_count - char_position + 1;

      if string_len >= chars_left then
         call split_across_components (fixedstring, string_len, chars_left);

      else do;
	  substr (output_seg, char_position, string_len) = fixedstring;
	  char_position = char_position + string_len;
         end;

      return;
   end put_out_fixedstring;

split_across_components: proc (string, len, chars_left);

dcl  string	        char (*),
     (len, chars_left)      fixed bin (21);

dcl  chars_to_go	        fixed bin (21);

      substr (output_seg, char_position, chars_left) =
	 substr (string, 1, chars_left);		/* all that fits */

      cur_component = cur_component + 1;

      call msf_manager_$get_ptr
	 (msf_fcb_ptr, cur_component, "1"b, output_seg_ptr, 0, code);
      if code ^= 0 then signal cref_abort_;

      char_position = 1;

      chars_to_go = len - chars_left;

      if chars_to_go > 0 then
         substr (output_seg, char_position, chars_to_go) =
	    substr (string, len - chars_to_go + 1, chars_to_go);

      char_position = char_position + chars_to_go;
      return;

   end split_across_components;
%skip (5);
backup_to_position:
   procedure (p_new_position);

dcl  p_new_position	        fixed binary (21) parameter;

      if p_new_position > char_position then do;		/* must backup to previous component */
	  if cur_component = 0 then signal cref_abort_;
	  call hcs_$truncate_seg (output_seg_ptr, 0, (0));
	  cur_component = cur_component - 1;
	  call msf_manager_$get_ptr
	       (msf_fcb_ptr, cur_component, "1"b, output_seg_ptr, 0, code);
	  if code ^= 0 then signal cref_abort_;
         end;

      char_position = p_new_position;

      return;

   end backup_to_position;
%page;
init: entry (err_seg_ptr_arg, brief_arg, short_arg, areap, given_ll);

/* This entry just initializes the error message repository and a few command
   options and allocates some arrays that are too large to keep in automatic
   storage */

dcl  err_seg_ptr_arg        pointer parameter,
     (brief_arg, short_arg) bit (1) aligned parameter,
     areap	        pointer parameter,
     given_ll	        fixed bin parameter;

dcl  cref_area	        area (sys_info$max_seg_size) based (areap);

dcl  (brief_switch,
     short_switch)	        bit (1) aligned static,
     err_seg_ptr	        pointer static;

dcl  1 err_seg	        aligned based (err_seg_ptr),
       2 err_index	        fixed bin (35),
       2 err_messages       char (max_chars) aligned;

dcl  max_chars	        fixed bin (35) static;

      err_seg_ptr = err_seg_ptr_arg;
      short_switch = short_arg;
      brief_switch = brief_arg;
      max_chars = (sys_info$max_seg_size - 1) * 4;

      if given_ll = -1 then max_line_position = default_max_line_position;
      else max_line_position = given_ll;

      err_index = 0;

      allocate large_struc in (cref_area);
      return;
%skip (5);
report_error: entry (errcode, reporter);		/* really is options (variable) */

dcl  errcode	        fixed bin (35) parameter,
     reporter	        char (*) parameter;

dcl  cu_$arg_list_ptr       entry (ptr),
     ioa_$general_rs        entry options (variable),
     ioa_$rs	        entry options (variable),
     cu_$gen_call	        entry (entry, pointer);

dcl  convert_status_code_   entry (fixed bin (35), char (8), char (100)),
     ap		        pointer;

dcl  err_message	        char (100),
     temp_string	        char (168),
     temp_len	        fixed bin;


      if errcode ^= 0 then
         call convert_status_code_ (errcode, "", err_message);
      else err_message = "";

      call cu_$arg_list_ptr (ap);

/* Format the 3rd thru Nth args */

      call ioa_$general_rs (ap, 3, 4, temp_string, 0, "1"b, ""b);

      call ioa_$rs ("^a: ^a  ^a",
	 temp_string, temp_len, reporter, err_message, (temp_string));

      substr (err_messages, err_index + 1, temp_len) =
	 substr (temp_string, 1, temp_len);

      err_index = err_index + temp_len;

      if ^brief_switch then call cu_$gen_call (com_err_, ap);
      return;

   end cref_filegen_;
