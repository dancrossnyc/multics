/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cref_sort_: procedure;

/* This module performs the actual cross-referencing operation on the database
   previously set up by cref_analyze_.  It loops through
   all the known names, seeing what each calls.  Each module called has a crossref block assigned to
   it giving the node number of the block under consideration, i.e., the calling procedure.
   This completes the real crossreferencing procedure.  A check is made after
   each successful crossreference to make sure that the definition being referenced
   actually existed in the segment being referenced.  If not, we create an implicit definition
   which cref_filegen_ will later mark with an asterisk.
   If there were any include files defined by cref_analyze_, it crossrefs those too.

   Rewritten totally by C. D. Tavares, 02/03/76 */

dcl  node pointer;

dcl  bucket fixed bin;

dcl  cref_listman_$get_consecutive_segnames ext entry (pointer, fixed bin) returns (pointer),
     cref_listman_$get_refs ext entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$assign_crossref ext entry (pointer, pointer),
     cref_listman_$get_defs ext entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$get_implicit_defs ext entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$create_implicit_def ext entry (pointer, pointer);

dcl  cref_listman_$get_include_files ext entry (pointer, pointer dimension (*), fixed bin),
     cref_listman_$assign_include_file_crossref ext entry (pointer, pointer);

dcl (i, j) fixed bin;

dcl (ref_array, def_array, imp_def_array) (1000) pointer,
    (ref_array_len, def_array_len, imp_def_array_len) fixed bin;

dcl  com_err_ ext entry options (variable),
     null builtin,
     cref_abort_ condition;


	bucket = 0;				/* start from the beginning */

	node = cref_listman_$get_consecutive_segnames (null, bucket); /* get the first good node */

	do while (node ^= null);			/* until database exhausted */

	     call cref_listman_$get_refs (node, ref_array, ref_array_len); /* see what it calls */
	     if ref_array_len < 0 then goto out_of_room;	/* let's hope not */

	     do i = 1 to ref_array_len by 2;		/* assign the actual crossrefs */

		call cref_listman_$assign_crossref (ref_array (i+1), node);
						/* plug on "node" as a caller of entrypoint ref_array (i+1) */

		call cref_listman_$get_defs (ref_array (i), def_array, def_array_len);
						/* get the existing defs for the called segment */
		if def_array_len < 0 then goto out_of_room; /* oh well */

		do j = 1 to def_array_len while (def_array (j) ^= ref_array (i+1));
		end;				/* the one "node" called better be defined */

		if j > def_array_len then do;		/* but it's not, must create an implicit def */

		     call cref_listman_$get_implicit_defs (ref_array (i), imp_def_array, imp_def_array_len);
						/* have we already created this implicit def? */
		     if imp_def_array_len < 0 then goto out_of_room;

		     do j = 1 to imp_def_array_len while (imp_def_array (j) ^= ref_array (i+1));
		     end;				/* try to find it there */

		     if j > imp_def_array_len then	/* nope, this is a new non-existent entry */
			call cref_listman_$create_implicit_def (ref_array (i), ref_array (i+1));
		end;
	     end;

	     call cref_listman_$get_include_files (node, ref_array, ref_array_len); /* see if there are any include files */
	     if ref_array_len < 0 then goto out_of_room;

	     do i = 1 to ref_array_len;

		call cref_listman_$assign_include_file_crossref (ref_array (i), node);
	     end;

	     node = cref_listman_$get_consecutive_segnames (node, bucket); /* grab the next one */
	end;

	return;


out_of_room:					/* indigestion of the internal storage */
	call com_err_ (0, "cref_sort_", "Internal data area overflow.");
	signal cref_abort_;				/* let daddy know we lost */

     end cref_sort_;
