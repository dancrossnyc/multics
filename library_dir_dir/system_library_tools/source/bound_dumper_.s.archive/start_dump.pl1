/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-09,GWMay), approve(85-12-23,MCR7320), audit(86-11-19,GDixon),
     install(86-11-21,MR12.0-1223):
     Added ability to abort upon return of non-zero code from backup_dump. This
     will allow the dumper to abort tape errors and not continue with the next
     entry in the control file.  The reason this should be done is to protect
     against data loss.
  2) change(87-05-10,Gilcrease), approve(87-07-31,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
      Update dprint_msg version.
                                                   END HISTORY COMMENTS */



/* This is the Multics dumper driver. */
start_dump: proc;

/* Initial coding by T.P. Skinner. */
/* Modified 3 June 1970, R H Campbell. */
/* IPC revision 25 March 1970, N I Morris. */
/* Restart path comparison fixed BIM 12/82 */
/* The Multics dumper driver is called at the time the system is brought up and will run the dumper until the
   end_dump command is given.  If the alarm clock fails to operate properly, the operator may manually start an
   increment by issuing the wakeup_dump command. */
/* Changed to handle -no_primary, bugs fixed 09/24/79 S. Herbst */
/* MCR 4311 Fix error messages 02/08/80 S. Herbst */
/* Add -dprint and -no_dprint 03/19/80 S. Herbst */
/* Changed to detach tape on cleanup 02/25/81 S. Herbst */
/* Changed to prevent calling end_dump first with dumper uninitialized 07/01/81 S. Herbst */
/* Changed dprinting to see -ds, -he, and -rqt 12/01/81 S. Herbst */
/* Fixed restart option (again), Keith Loepere, 1/30/85. */

dcl (m, n, i) fixed bin;				/* Temporary storage. */

dcl (line, p, sp, ap) ptr;				/* .. */

dcl  string based char (n);				/* The argument in the command line. */

dcl  substring based char (n) aligned;			/* For non-copying "substr (dump_dir, 1, n)". */

dcl  dump_in_progress static bit (1);			/* Flag to prevent recursive entry to wakeup_dump. */
dcl  dumper_initialized static bit (1) init ("0"b);	/* Flag to prevent calling end_dump first */

dcl  type static fixed bin,				/* Code for type of dump. */
     pid fixed bin (35),				/* Our process ID. */
    (map_name, err_name) char (32),			/* Name of map "file_". */
     device char (16),
     mode char (6),
     dump_dir char (168),
     efpath char (168) aligned,
     dir char (168) aligned,
     dir_name char (168),
     error_string char (32),
     rings (3) fixed bin (6),
     rb (3) fixed bin (5),
     unique_chars_ entry (bit (*) aligned) returns (char (15) aligned); /* Get new map name. */

dcl  static_map_name char (32) int static;		/* saved for end_dump */
dcl  time_now fixed bin (52),				/* Time this pass started. */
     char1 char (1) based;

dcl  chname static fixed bin (71);			/* IPC event channel name. */

dcl  code fixed bin;				/* Error code. */


dcl  efl_name char (32);

dcl  errsw bit (1) aligned;

dcl  cleanup condition;

dcl  start_dump$wakeup_dump external;			/* Entry to wake up dumper. */

dcl  backup_map_$beginning_line entry (fixed bin (52), ptr, fixed bin),
     backup_dump$abort_on_tape_errors entry (fixed bin),
     backup_util$get_real_name entry (ptr, ptr, fixed bin, fixed bin),
     bk_output$output_finish entry;

dcl (error_table_$noarg,
     error_table_$no_dir,
     error_table_$argerr,
     error_table_$ioname_not_found,
     error_table_$namedup) ext fixed bin (35);

dcl  bk_arg_reader_$dump_arg_reader entry (fixed bin, ptr, fixed bin);

dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71)),
     timer_manager_$reset_alarm_wakeup entry (fixed bin (71)),
     copy_seg_ entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed binary),
     clock_ entry (fixed bin (52)),			/* Get current time. */
     convert_date_to_binary_ entry (char (*), fixed bin (52), fixed bin),
     cu_$arg_list_ptr entry (ptr),			/* Arg list location */
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin), /* Get pointer to an argument */
     cv_dec_ entry (char (*) aligned) returns (fixed bin (35)),
     get_group_id_$get_process_id_ entry (fixed bin (35)),
     ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned),
     ios_$detach entry (char (*), char (*), char (*), bit (72) aligned),
     ios_$get_at_entry_ entry (char (*), char (*), char (*), char (*), fixed bin),
     ios_$order entry (char (*), char (*) aligned, ptr, bit (72) aligned),
     ios_$read entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     ios_$seek entry (char (*), char (*), char (*), fixed bin, bit (72) aligned),
    (ipc_$create_ev_chn, ipc_$delete_ev_chn) entry (fixed bin (71), fixed bin),
     ipc_$decl_ev_call_chn entry (fixed bin (71), ptr, ptr, fixed bin, fixed bin),
     dprint_ entry (char (*) aligned, char (*), ptr, fixed bin),
    (com_err_, ioa_, ioa_$rs, listen_$start) entry options (variable);

dcl  hphcs_$pxss_set_timax entry (fixed bin (35), fixed bin (35));


dcl  hcs_$append_branchx entry (char (*) aligned, char (*), fixed bin (5), (3) fixed bin (6),
     char (*) aligned, fixed bin (1), fixed bin (1), fixed bin (24), fixed bin),
     hcs_$set_ring_brackets entry (char (*) aligned, char (*), (3) fixed bin (5), fixed bin),
     hcs_$add_acl_entries entry (char (*) aligned, char (*), ptr, fixed bin, fixed bin),
     get_group_id_$tag_star returns (char (32) aligned),
     cu_$level_get returns (fixed bin),
     get_wdir_ returns (char (168) aligned);

dcl 1 sysd_acl aligned,
    2 aclname char (32) init ("*.SysDaemon.*"),
    2 aclmode bit (36) init ("101"b),
    2 zeropad bit (36) init (""b),
    2 aclcode fixed bin (35) init (0);

dcl (addr, index, length, max, null, unspec, substr) builtin;


%include bk_ss_;
%include dprint_arg;
%include io_status;
/*  */
	type = 0;					/* Normal entry, indicate "start_dump" called. */
	bk_ss_$myname = "start_dump";
	bk_ss_$datesw = ""b;			/* Reset "dump all since given date" */
	bk_ss_$dtdsw = "1"b;			/* Default. Dump all changed since last dumped */
	go to examine_arguments;			/* Go get arguments. */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

catchup_dump: entry;				/* Exception entry to make cutoff-time pass. */

	type = 2;					/* Indicate catchup dump in progress. */
	bk_ss_$myname = "catchup_dump";
	bk_ss_$dtdsw = ""b;				/* Reset "dump all changed since last dumped" */
	bk_ss_$datesw = "1"b;			/* Use "dump all changed since given date" */
	call convert_date_to_binary_ ("2400.", bk_ss_$date, code); /* Get midnight of this date */
	bk_ss_$date = bk_ss_$date - 172800000000;	/* Default. Dump all changed since midnight 2 days ago. */
	go to examine_arguments;			/* Go get arguments. */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


complete_dump: entry;				/* Entry to do complete dump */

	type = 1;					/* Set up complete_dump code. */
	bk_ss_$myname = "complete_dump";
	bk_ss_$dtdsw, bk_ss_$datesw = ""b;		/* Reset and ignore dates.  We are dumping all. */

examine_arguments: call cu_$arg_list_ptr (ap);		/* Get arg ptr for sub */

	on cleanup call bk_output$output_finish;	/* detach tape if released */

	bk_ss_$control_name = "";			/* Reset for later test */
	bk_ss_$operator = "";
	bk_ss_$tapesw = "1"b;
	bk_ss_$holdsw = "1"b;
	bk_ss_$wakeup_interval = 3600000000;		/* Default, one hour (in micro seconds) */
	code = 0;


	error_string = "Control file path required.";
	m = 1;					/* First arg */
	call cu_$arg_ptr (m, p, n, code);		/* Get first arg - should be control file name */
	if code ^= 0 then do;
arg_error:     call com_err_ (code, bk_ss_$myname, error_string);
	     go to final;
	end;

	if n = 0 then do;				/* Must have first argument */
noarg:	     code = error_table_$noarg;
	     go to arg_error;
	end;

	if p -> char1 = "-" then go to arg_reader;	/* use argument reader if leading hyphen */
	if substr (p -> string, n-4, 5) ^= ".dump"
	then bk_ss_$control_name = p -> string || ".dump";
	else bk_ss_$control_name = p -> string;		/* Got control file name */

	error_string = "Operator name required.";
	m = 2;					/* Second arg */
	call cu_$arg_ptr (m, p, n, code);		/* Get operator */
	if code ^= 0 then go to arg_error;
	if n = 0 then go to noarg;			/* Must have operator */
	if p -> char1 = "-" then go to arg_reader;	/* use standard argument reading routine */

	bk_ss_$operator = p -> string;		/* Got bk_ss_$operator */

	error_string = "";
	m = 3;					/* Get third arg */
	call cu_$arg_ptr (m, p, n, code);		/* Get number of tapes if any */
	if code ^= 0 then
	     if code ^= error_table_$noarg then go to arg_error;
	     else do;				/* Set up default */
		bk_ss_$ntapes = 1;			/* Default is one tape */
		code = 0;
		go to args_done;
	     end;

	if p -> char1 = "-" then go to arg_reader;	/* Go to standard reading routine */
	if p -> string = "2" then bk_ss_$ntapes = 2;
	else bk_ss_$ntapes = 1;			/* Not more than 2 tapes */


	if bk_ss_$myname = "complete_dump" then m = 4;	/* Set up to read next arg */
	else do;					/* Set timer interval if not complete dump */
	     call cu_$arg_ptr (4, p, n, code);		/* Get wakeup interval in minutes */
	     if code ^= 0
	     then if code ^= error_table_$noarg
		then go to arg_error;
		else do;				/* Use default wakeup interval */
		     code = 0;
		     go to args_done;
		end;

	     if p -> char1 = "-" then go to arg_reader;	/* Do standart reading */

	     bk_ss_$wakeup_interval = cv_dec_ ((p -> string));
	     if bk_ss_$wakeup_interval <= 0 then go to interval_error;
	     if bk_ss_$wakeup_interval > 360 then do;
interval_error:	call ioa_ ("^a: Improper wakeup interval, ^d", bk_ss_$myname, bk_ss_$wakeup_interval);
		go to final;
	     end;
	     bk_ss_$wakeup_interval = bk_ss_$wakeup_interval * 60000000; /* in micro seconds */
	     m = 5;				/* set up to read next arg */
	end;

arg_reader:
	call bk_arg_reader_$dump_arg_reader (m, ap, code); /* Get any other arguments */
	if code ^= 0 then go to final;
args_done:

	if bk_ss_$restart_dumpsw & ^bk_ss_$no_primary then
	     call backup_util$get_real_name (addr (bk_ss_$restart_path), addr (bk_ss_$restart_path),
	     bk_ss_$restart_plen, code);		/* Name may be longer or different */

	if bk_ss_$control_name = "" | bk_ss_$operator = "" then do;
	     code = error_table_$argerr;		/* Must have dump control file and operator */
	     call com_err_ (code, bk_ss_$myname, "Missing control file or operator name");
	     go to final;
	end;

	sp = addr (status);				/* Get pointer to status structure. */
	line = addr (dump_dir);			/* Get pointer to IO buffer. */
	call ios_$attach ("dump_control", "file_", bk_ss_$control_name, "r", sp -> status_bits); /* Control segment. */
	if status.code ^= 0 then do;			/* Was an error encountered? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$attach for ^a", bk_ss_$control_name);
	     go to final;				/* Quit. */
	end;

	if type ^= 1 then do;			/* Is this a complete dump? */
	     call ipc_$create_ev_chn (chname, code);	/* Create an event channel. */
	     if code ^= 0 then do;
		call com_err_ (code, bk_ss_$myname, "ipc_$create_ev_chn");
		go to final;
	     end;					/* Make channel into call channel. */
	     call ipc_$decl_ev_call_chn (chname, addr (start_dump$wakeup_dump), null, 1, code);
	     if code ^= 0 then do;			/* OK? */
		call com_err_ (code, bk_ss_$myname, "ipc_$decl_ev_call_chn");
		go to final;			/* Give up. */
	     end;
	end;

	if (^bk_ss_$debugsw) & (type = 2) then do;
	     call get_group_id_$get_process_id_ (pid);	/* Get our process ID. */
	     call hphcs_$pxss_set_timax (pid, 7000000);	/* Help us along with priority. */
	end;

	dump_in_progress = "1"b;			/* Set flag to prevent recursion. */
	dumper_initialized = "1"b;			/* and we're off and runnning... */
	go to over;				/* Start dump pass. */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


wakeup_dump: entry;					/* Enter here on alarm or operator wakeup. */

	sp = addr (status);				/* Get pointer for I/O system status. */
	if dump_in_progress then do;			/* Is a dump pass being done now? */

	     call ioa_ ("wakeup_dump:  Dump pass presently in progress; this call ignored.");

	     call listen_$start;			/* Make sure we don't die. */
	     go to restart_IO;			/* Ignore call. */
	end;

	call timer_manager_$reset_alarm_wakeup (chname);	/* Reset the alarm in case of manual invocation */
	bk_ss_$myname = "wakeup_dump";
	dump_in_progress = "1"b;			/* Set flag. */
	line = addr (dump_dir);			/* Get pointer to directory name. */
	call ioa_ ("^/Dumper waking up.");

over:	call clock_ (time_now);			/* Read the clock. */

	call ios_$seek ("dump_control", "read", "first", 0, sp -> status_bits); /* Reset read pointer. */
	if status.code ^= 0 then do;			/* OK? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$seek for ^a", bk_ss_$control_name);
	     go to stop;				/* Give up. */
	end;

	map_name, static_map_name = unique_chars_ (""b) || ".dump.map";	/* Make up new map name. */
	rings (1), rings (2), rings (3) = max ((cu_$level_get ()), 4);
	dir = get_wdir_ ();
	call hcs_$append_branchx (dir, map_name, 01011b, rings, (get_group_id_$tag_star ()), 0, 0, 0, code);
	if (code = 0) | (code = error_table_$namedup)
	then call hcs_$add_acl_entries (dir, map_name, addr (sysd_acl), 1, code);
	call ios_$attach ("map", "file_", map_name, "w", sp -> status_bits);
	if status.code ^= 0 then do;			/* All OK? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$attach for ^a", map_name);
	     go to stop;
	end;


	call ioa_$rs ("Dump control file: ^a, operator: ^a.", dump_dir, n, bk_ss_$control_name, bk_ss_$operator);

	bk_ss_$mapsw = "1"b;			/* Make sure map is enabled. */
	call backup_map_$beginning_line (time_now, line, n); /* Write the ID line. */

next:	call ios_$read ("dump_control", line, 0, length (dump_dir), n, sp -> status_bits);

	if status.code ^= 0 then do;			/* OK? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$read for ^a", bk_ss_$control_name);
	     go to done;				/* Give up. */
	end;

	n = n - 1;				/* Remove NL from consideration. */
	call ioa_ ("^/^a", line -> substring);		/* Space and type root name. */
						/* Is this a path name or comment? */
	if substr (dump_dir, 1, length (">")) = ">" then do;

	     bk_ss_$save_path = line -> substring;	/* save the pathname */
	     bk_ss_$save_plen = n;			/* and its length */
	     bk_ss_$pathsw = "1"b;			/* and signal its presence */
	     if bk_ss_$restart_dumpsw then do;		/* Restarting this dump */
		if ^bk_ss_$no_primary then call backup_util$get_real_name
		     (addr (bk_ss_$save_path), addr (bk_ss_$save_path), bk_ss_$save_plen, code);
 		if substr (bk_ss_$save_path, 1, bk_ss_$save_plen) ^= substr (bk_ss_$restart_path, 1, bk_ss_$save_plen) then go to check_end;
						/* save path contained within restart path */
		if bk_ss_$save_plen < bk_ss_$restart_plen then
		     if substr (bk_ss_$restart_path, bk_ss_$save_plen + 1, 1) ^= ">" then go to check_end;
						/* if save path ^= restart path, then restart path 
						must be = save path || > || <subdirs> */
	     end;
 	     		                             /* D U M P   S P E C I F I E D   S U B T R E E */
	    call backup_dump$abort_on_tape_errors (code);
	    if code ^= 0 then
	        go to ended;
	end;

check_end:
	if ^ status.bits.end_of_data then		/* Any more lines? */
	     go to next;

done:	call finish_maps (0);			/* Detach and dprint map and error file. */
	bk_ss_$mapsw = ""b;				/* Clear switch to suppress comment from bk_output. */
	if type = 2 then do;			/* Is this exceptional case? */
	     if bk_ss_$no_contin then go to ended;	/*  DONE.  Do not continue */
	     bk_ss_$holdsw = ""b;			/* Dismount tape when finished */
	     if bk_ss_$tapesw then			/* Detach only if tape is present */
		call bk_output$output_finish ();	/* Detach the tape. */
	     call ioa_ ("^/Catchup_dump has finished; start_dump will be called."); /* Announce completion. */
	     type = 0;				/* Reset to normal incremental operation. */
	     bk_ss_$myname = "start_dump";
	     bk_ss_$dtdsw = "1"b;
	     bk_ss_$holdsw = "1"b;
	     bk_ss_$datesw = ""b;			/* Turn off date check */
	     if ^bk_ss_$debugsw then call hphcs_$pxss_set_timax (pid, 0); /* Reset timax */
	     go to over;				/* Start next pass immediately. */
	end;

	call ioa_ ("^/Dump finished.");
	if type ^= 1 then do;			/* Is this either type of incremental dump? */
	     call timer_manager_$alarm_wakeup (time_now + bk_ss_$wakeup_interval, "00"b, chname);
	     call ioa_ ("Dumper going to sleep.^/");

restart_IO:    call ios_$order ("user_i/o", "start", null, sp -> status_bits); /* Ensure tty does not lock up. */

	     if status.code ^= 0 then			/* OK? */
		call com_err_ (status.code, bk_ss_$myname, "ios_$order on user_i/o"); /* No, give error comment. */
	     dump_in_progress = ""b;			/* Indicate dump no longer active. */
	     bk_ss_$myname = "";			/* done for now */
	     return;
	end;

	go to ended;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


end_dump:	entry;					/* Finish up dumping. */

	bk_ss_$myname = "end_dump";

	if ^dumper_initialized then do;
	     call com_err_ (0, bk_ss_$myname, "Dumper not initialized; ""end_dump"" ignored.");
	     return;
	end;

	sp = addr (status);				/* Gotta set it again. */

ended:	bk_ss_$mapsw = ""b;				/* Clear map enabling switch for following comment. */

	bk_ss_$holdsw = ""b;			/* Dismount tape when finished */
	if bk_ss_$tapesw then			/* Detach only if tape present */
	     call bk_output$output_finish ();
	call finish_maps (1);			/* Detach and dprint map and error file. */

stop:	call ios_$detach ("dump_control", "", "", sp -> status_bits); /* Detach control segment. */

	if status.code ^= 0 then			/* Terminated OK? */
	     call com_err_ (status.code, bk_ss_$myname, "ios_$detach for ^a", bk_ss_$control_name); /* Give comment. */
	if type ^= 1 then do;			/* Is this incremental? */
	     call ipc_$delete_ev_chn (chname, code);	/* Remove the event channel. */
	     if code ^= 0 then do;			/* OK? */
		call com_err_ (code, bk_ss_$myname, "ipc_$delete_ev_chn");
		go to final;			/* Give up. */
	     end;
	end;


final:	bk_ss_$myname = "";				/* reset name */

	dumper_initialized = "0"b;			/* can't call end_dump twice in a row */

	return;					/* terminate processing */

/* ------------------------------------------------------ */

finish_maps: proc (detsw);

dcl  detsw fixed bin;				/* 0 if det err file only on complete, 1 if always. */
dcl (have_error_file, have_map) bit (1) aligned init ("0"b);

	     sp = addr (status);
	     dir = get_wdir_ ();
	     call ios_$detach ("map", "", "", sp -> status_bits);
	     if status.code ^= 0 then			/* All OK? */
		if status.code ^= error_table_$ioname_not_found then
		     call com_err_ (status.code, bk_ss_$myname, "ios_$detach for ^a", map_name); /* Give comment. */
		else;
	     else have_map = "1"b;

	     if detsw = 0 then if type ^= 1 then go to skip_errfile;
						/* Detach error file sometimes only. */
	     call ios_$get_at_entry_ ("err_file", device, err_name, mode, status.code); /* see if error file made */
	     if status.code ^= 0 then if status.code ^= error_table_$ioname_not_found
		then call com_err_ (status.code, bk_ss_$myname, "ios_$get_at_entry_ for err_file");
		else;
	     else do;
		call ios_$detach ("err_file", "", "", sp -> status_bits);
		if status.code ^= 0 then if status.code ^= error_table_$ioname_not_found then
			call com_err_ (status.code, bk_ss_$myname, "ios_$detach for ^a", err_name);
		     else;
		else do;
		     have_error_file = "1"b;
		     i = index (dir, " ");		/* make full name */
		     efpath = substr (dir, 1, i-1) || ">" || err_name;
		     rb (1), rb (2), rb (3) = max ((cu_$level_get ()), 4);
		     call hcs_$set_ring_brackets (efpath, "", rb, code);
		     if code ^= 0 then call com_err_ (code, bk_ss_$myname, "hcs_$set_ring_brackets for err file");
		end;
	     end;

/* Queue maps for printing. */

skip_errfile:  if ^bk_ss_$dprintsw then return;
	     dpap = addr (dprint_arg_buf);		/* Set up args to dprint */
	     unspec (dprint_arg) = "0"b;
	     dprint_arg.version = dprint_arg_version_9;
	     dprint_arg.copies = 1;
	     dprint_arg.delete = 1;
	     dprint_arg.queue = bk_ss_$dprint_queue;
	     dprint_arg.pt_pch = 1;
	     dprint_arg.notify = 0;
	     dprint_arg.output_module = 1;
	     dprint_arg.lmargin = 0;
	     dprint_arg.line_lth = -1;
	     dprint_arg.page_lth = -1;
	     dprint_arg.top_label = "";
	     dprint_arg.bottom_label = "";
	     dprint_arg.form_name = "";
	     dprint_arg.chan_stop_path = "";
	     if bk_ss_$dprint_heading_setsw then dprint_arg.heading = bk_ss_$dprint_heading;
	     else
	        dprint_arg.heading = " for " || substr (bk_ss_$control_name, 1, length (dprint_arg.heading) - length (" for "));
	     if bk_ss_$dprint_request_type_setsw then dprint_arg.request_type = bk_ss_$dprint_request_type;
	     else dprint_arg.request_type = "";
	     if have_error_file then do;
		efl_name = err_name;
		dir_name = dir;
		if ^bk_ss_$debugsw then call copy_seg_ (dir_name, efl_name, ">udd>SysDaemon>error_file", efl_name,
		     bk_ss_$myname, errsw, code);
		if code ^= 0 & code ^= error_table_$no_dir then call
		     com_err_ (code, bk_ss_$myname, "copy of error file");
		if bk_ss_$dprint_destination_setsw then dprint_arg.destination = bk_ss_$dprint_destination;
		else dprint_arg.destination = "ERROR FILE";
		call dprint_ (dir, err_name, dpap, code);
		if code ^= 0 then call com_err_ (code, bk_ss_$myname, "Unable to dprint ^a>^a", dir, err_name);
	     end;
	     if ^have_map then return;
	     if type = 0 then do;			/* Is this a normal incremental dump? */
		dprint_arg.destination = "INCREMENTAL";
DPRINT:		if bk_ss_$dprint_destination_setsw then dprint_arg.destination = bk_ss_$dprint_destination;
		call dprint_ (dir, static_map_name, dpap, code);
		if code ^= 0 then
		     call com_err_ (code, bk_ss_$myname, "Unable to dprint ^a>^a", dir, static_map_name);
	     end;
	     else if type = 2 then do;		/* Is this a catchup dump? */
		if bk_ss_$dprint_destination_setsw then dprint_arg.destination = bk_ss_$dprint_destination;
		else dprint_arg.destination = "CATCHUP MAP";
		go to DPRINT;
	     end;
	     else do;				/* This is a complete dump. */
		if bk_ss_$dprint_destination_setsw then dprint_arg.destination = bk_ss_$dprint_destination;
		else dprint_arg.destination = "COMPLETE MAP";
		dprint_arg.copies = bk_ss_$ntapes;	/* Want a map for each set. */
		go to DPRINT;
	     end;

	end finish_maps;

     end start_dump;
