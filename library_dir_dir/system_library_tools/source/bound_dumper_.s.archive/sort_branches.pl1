/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


sort_branches:  procedure(root, a_count);  /* Procedure to sort branches in order of thier primary names. */

/* This proc uses a singleton sort.  It should be able to sort about 2**18 items .
If it bombs out on a lesser number there is a programming error.
*/


dcl
	root ptr,
	pp ptr,
	(i, j, k, l, m, n, q, xi, xj,
	 xk, xl, xq) fixed bin,
	(vxi, vxj, vxk, vxq, bp) ptr,
	Cut fixed bin int static init(12),
	stacki(18) fixed bin,
	stackj(18) fixed bin,
	a_count fixed bin,
	count fixed bin;

% include backup_dir_list;


dcl (addr, divide, null, ptr, rel) builtin;


/* Set up arrays of pointers to names and indices of pointers */

	if root = null then go to sort_ret;

	bp = root;				/* get pointer to first branch structure */
	count = a_count;				/* copy the count of branches */

begin;
dcl x (count) fixed bin;

	do n = 1 to count;
	     x(n) = n;				/* place index into index list */
	end;

	n = n - 1;

	i, m = 1;
	j = n;

/* Now sort */

/* Start by getting and ordering first middle and last elements in current list */
/* Arrange indices accordingly since only they get sorted and set test value to middle value */

sloop:
	k = i;
	l = j;
	q = divide(i+j, 2, 17, 0);

	xi = x(i);
	xj = x(j);
	xq = x(q);

	vxi = ptr(bp, bp->br(xi).namerp);
	vxj = ptr(bp, bp->br(xj).namerp);
	vxq = ptr(bp, bp->br(xq).namerp);



	if vxq->name(1).string < vxi->name(1).string then

	   if vxj->name(1).string < vxi->name(1).string then

	      if vxq->name(1).string < vxj->name(1).string then do;
	         x(i) = xq;
	         x(q) = xj;
	         x(j) = xi;
	         vxq = vxj;
	         end;

	      else do;
	         x(i) = xj;
	         x(j) = xi;
	         end;

	   else do;
	      x(i) = xq;
	      x(q) = xi;
	      vxq = vxi;
	      end;

	else if vxj->name(1).string < vxq->name(1).string then

	   if vxi->name(1).string < vxj->name(1).string then do;
	      x(q) = xj;
	      x(j) = xq;
	      vxq = vxj;
	      end;

	   else do;
	      x(q) = xi;
	      x(i) = xj;
	      x(j) = xq;
	      vxq = vxi;
	      end;

/* Now order into lists above and below the test value  */

lloop:
	l = l - 1;
	xl = x(l);



	if ptr(bp, bp->br(xl).namerp)->name(1).string > vxq->name(1).string then go to lloop;

kloop:
	k = k + 1;
	xk = x(k);



	if ptr(bp, bp->br(xk).namerp)->name(1).string < vxq->name(1).string then go to kloop;



	if k<=l then do;
	   x(k) = xl;
	   x(l) = xk;
	   go to lloop;
	   end;



/* now put the longer list on the stack, and try to sort the smaller.*/
	if l-i<j-k then do;
	   stacki(m) = k;
	   stackj(m) = j;
	   j = l;
	   end;

	else do;
	   stacki(m) = i;
	   stackj(m) = l;
	   i = k;
	   end;

	m = m + 1;


test:

	if j-i>Cut then go to sloop;



	if i=1 then if i<j then go to sloop;

/* Bubble sort if small number of names in this list */
/*  Note that we do this for the lists headed by stacki(n) */

	do i = i+1 by 1 while (i<=j);
	   k = i;
	   xk = x(k);
	   vxk = ptr(bp, bp->br(xk).namerp);
bubble:	   l = k - 1;
	   xl = x(l);
	   if ptr(bp, bp->br(xl).namerp)->name(1).string <= vxk->name(1).string then go to ok;
	   x(k) = xl;
	   x(l) = xk;
	   k = l;
	   go to bubble;
ok:	   end;

/* Start work on the next list */


	m = m - 1;


	if m=0 then go to thread;


	i = stacki(m);

	j = stackj(m);



	go to test;



thread:					/* store branch pointers in the store of the sorted primary names */
	do i = 1 to count;			/* loop over all branches */
	     xi = x(i);			/* get index to next branch  ordered by name */
	     bp->br(i).ix = rel(addr(bp->br(xi)));  /* place rel pointer in appropriate branch */
	end;

end;	/* end begin block in which x array is declared */

sort_ret:
	return;

	end;
