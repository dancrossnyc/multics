/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Change/return modes for the printer DIM */

/* Created:  28 October 1974 by Noel I. Morris */
/* Modified: 15 March 1977 by Noel I. Morris */
/* Modified: September 1979 by D. Vinograd to add the remote_printer_modes_ entry */
/* Modified: Februrary 1979 by J. Whitmore to fix order dependent if statement bug and check ranges of modes */
/* Rewritten: 9 December 1981 by G. Palter to convert to mode_string_ and add "ctl_char" mode */
/* Modified: 9 August 1982 by G. Palter to not append a newline to the returned old modes string */
/* Modified: 26 August 1982 by G. Palter to make indent=N work */
/* Modified: 25 June 1984 by C. Marker changed so that the left margin must be to the left of the right margin or an error code is returned. */


/****^  HISTORY COMMENTS:
  1) change(87-05-11,Gilcrease), approve(87-07-31,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Added the line numbers (line_nbrs) mode.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */


prtdim_changemode:
     procedure (P_sdb_ptr, P_new_modes, P_old_modes, P_iostatus);


/* Parameters */

dcl  P_new_modes character (*) parameter;		/* new modes to be set (if any) */
dcl  P_old_modes character (*) parameter;		/* set to modes in effect prior to change */

dcl  P_sdb_ptr pointer parameter;			/* prtdim_changemode: -> the stream's SDB (data block) */
dcl  P_iostatus bit (72) aligned;			/* prtdim_changemode: set to ios_ status */

dcl  P_iocb_ptr pointer parameter;			/* remote_printer_modes_: -> switch's I/O control block */
dcl  P_code fixed binary (35) parameter;		/* remote_printer_modes_: set to system status code */


/* Local copies of parameters */

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  ios_interface bit (1) aligned;			/* ON => caller used ios_; OFF => caller used iox_ */

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  (single_page_bit, print_bit) bit (1) aligned;	/* copies to build old modes string */
dcl  stop_every_value fixed binary;
dcl  old_modes_lth fixed binary (21);			/* used to construct old modes string */
dcl  i fixed binary (21);

dcl  (mode_idx, array_idx, idx) fixed binary;
dcl  legal_mode bit (1) aligned;

/* format: off */
dcl  save_rmarg fixed bin static;
dcl  BOOLEAN_MODE_NAMES (-3:9) character (32) static options (constant) initial (
	"in",	     "indent",     "stop",	     "default",	/* -2,-1,0: special cased boolean modes */
	"noskip",	     "single",	"non_edited",  "truncate",	"esc",
	"ctl_char",     "line_nbrs",    "1pg",	"print");

dcl  NUMERIC_MODE_NAMES (1:5) character (32) static options (constant) initial (
	"stop",	     "in",	"indent",	     "ll",	"pl");

dcl  NUMERIC_MODE_RANGES (1:5, 2) fixed binary static options (constant) initial (
	0,	9999,				/* stop:   0 through 9999 */
	0,	 250,				/* in:     0 through  250 */
	0,	 250,				/* indent: 0 through  250 */
	2,	 250,				/* ll:	 2 through  250 */
	2,	 127);				/* pl:	 2 through  127 */
/* format: on */

dcl  error_table_$bad_mode fixed binary (35) external;
dcl  error_table_$inconsistent fixed binary (35) external;

dcl  get_system_free_area_ entry () returns (pointer);
dcl  ioa_$rsnnl entry () options (variable);
dcl  mode_string_$parse entry (character (*), pointer, pointer, fixed binary (35));

dcl  (addr, divide, hbound, index, lbound, length, min, null, reverse, rtrim, substr, unspec) builtin;

dcl  cleanup condition;

/**/

/* prtdim_changemode: entry (P_sdb_ptr, P_new_modes, P_old_modes, P_iostatus); */

	ios_interface = "1"b;			/* ios_ calling sequence */

	P_iostatus = ""b;				/* clear returned status */
	substr (P_iostatus, 41, 1) = "1"b;		/* set transaction terminated bit */

	sdb_ptr = P_sdb_ptr;
	adp = null ();				/* iox_ attach description isn't used here */

	pcip = addr (sdb.conv_info);			/* get pointer to conversion info */
	go to COMMON;


/* Change/return modes for a remote printer/teleprinter */

remote_printer_modes_:
     entry (P_iocb_ptr, P_new_modes, P_old_modes, P_code);

	ios_interface = "0"b;			/* iox_ calling sequence */

	P_code = 0;				/* clear return code */

	sdb_ptr = null ();				/* no ios_ stream data block */
	adp = P_iocb_ptr -> iocb.attach_data_ptr;

	pcip = addr (ad.remote_pci);


/* Setup */

COMMON:
	system_area_ptr = get_system_free_area_ ();
	mode_string_info_ptr = null ();		/* for cleanup handler */

	on condition (cleanup)
	     begin;
	     if mode_string_info_ptr ^= null () then free mode_string_info in (system_area);
	end;


/* Build the current mode string and return it to the caller */

	if ios_interface then do;			/* get modes in the attach data ... */
	     single_page_bit = sdb.single_page;
	     print_bit = ^sdb.noprint;
	     stop_every_value = sdb.stop_every;
	end;
	else do;					/* ... for either local or remote printer */
	     single_page_bit = ad.single_page;
	     print_bit = ^ad.noprint;
	     stop_every_value = ad.stop_every;
	end;

	if length (P_old_modes) > 0 then do;		/* only return something if there's some room */
	     call ioa_$rsnnl (
		"^[^;^^^]noskip,^[^;^^^]single,^[^;^^^]non_edited,^[^;^^^]truncate,^[^;^^^]esc,^[^;^^^]ctl_char,^[^;^^^]line_nbrs,^[^;^^^]1pg,^[^;^^^]print,stop=^d,ll=^d,indent=^d,pl=^d."
		, P_old_modes, old_modes_lth, pci.overflow_off, pci.single_space, pci.non_edited, pci.truncate,
		pci.esc, pci.ctl_char, pci.line_nbrs, single_page_bit, print_bit, stop_every_value, pci.rmarg, pci.lmarg,
		pci.page_length);
	     if old_modes_lth > length (P_old_modes) then do;
						/* mode string is too long: truncate at nearest mode */
		i = index (reverse (P_old_modes), ","); /* look for the last comma */
		if (i > 0) then			/* returning some modes: turn last "," into a "." */
		     substr (P_old_modes, (length (P_old_modes) - i + 1)) = ".";
		else P_old_modes = "";		/* nothing fits */
	     end;
	end;


/* Process the new modes (if any) */

	if length (rtrim (P_new_modes)) ^= 0 then do;	/* there are new modes ... */

	     call mode_string_$parse (P_new_modes, system_area_ptr, mode_string_info_ptr, code);
	     if code ^= 0 then go to ERROR_RETURN;


/* Validate that all modes are recognized and have valid values */

	     do mode_idx = 1 to mode_string_info.number;
		mode_value_ptr = addr (mode_string_info.modes (mode_idx));
		if mode_value.char_valuep then	/* ... no mode may be a character value */
		     go to BAD_MODE_VALUE;
		else if mode_value.boolean_valuep then do;
		     legal_mode = "0"b;		/* assume it's not valid */
		     do idx = lbound (BOOLEAN_MODE_NAMES, 1) to hbound (BOOLEAN_MODE_NAMES, 1) while (^legal_mode);
			if mode_value.mode_name = BOOLEAN_MODE_NAMES (idx) then legal_mode = "1"b;
		     end;
		     if ^legal_mode then go to BAD_MODE_VALUE;
		     if (mode_value.mode_name = "default") & (^mode_value.boolean_value) then go to BAD_MODE_VALUE;
						/* default mode can not be negated... */
		     if (mode_value.mode_name = "stop") & (mode_value.boolean_value) then go to BAD_MODE_VALUE;
						/* "^stop" is accepted as a synonym of "stop=0" */
		     if (mode_value.mode_name = "in") & (mode_value.boolean_value) then go to BAD_MODE_VALUE;
						/* "^in" is accepted as a synonym of "in=0" */
		     if (mode_value.mode_name = "indent") & (mode_value.boolean_value) then go to BAD_MODE_VALUE;
						/* "^indent" is accepted as a synonym of "indent=0" */
		end;
		else /* if mode_value.numeric_valuep then */ do;
						/* must be a numeric mode */
		     legal_mode = "0"b;		/* assume it's not valid */
		     do idx = lbound (NUMERIC_MODE_NAMES, 1) to hbound (NUMERIC_MODE_NAMES, 1) while (^legal_mode);
			if mode_value.mode_name = NUMERIC_MODE_NAMES (idx) then legal_mode = "1"b;
		     end;
		     if ^legal_mode then go to BAD_MODE_VALUE;
		     idx = idx - 1;			/* that's the nature of PL/I */
		     if (mode_value.numeric_value < NUMERIC_MODE_RANGES (idx, 1))
			| (mode_value.numeric_value > NUMERIC_MODE_RANGES (idx, 2)) then
			go to BAD_MODE_VALUE;
		end;
	     end;


/* Modes are valid: update the I/O switch's data structures to relect the new modes */

	     do mode_idx = 1 to mode_string_info.number;
		mode_value_ptr = addr (mode_string_info.modes (mode_idx));
		if mode_value.boolean_valuep then do;
		     legal_mode = "0"b;
		     do idx = lbound (BOOLEAN_MODE_NAMES, 1) to hbound (BOOLEAN_MODE_NAMES, 1) while (^legal_mode);
			if mode_value.mode_name = BOOLEAN_MODE_NAMES (idx) then do;
			     legal_mode = "1"b;
			     array_idx = idx;
			end;
		     end;
		     if legal_mode then
			go to SET_BOOLEAN_MODE (array_idx);
		     else go to BAD_MODE_VALUE;	/* shouldn't happen, but... */
		end;
		else /* if mode_value.numeric_valuep then */ do;
		     legal_mode = "0"b;
		     do idx = lbound (NUMERIC_MODE_NAMES, 1) to hbound (NUMERIC_MODE_NAMES, 1) while (^legal_mode);
			if mode_value.mode_name = NUMERIC_MODE_NAMES (idx) then do;
			     legal_mode = "1"b;
			     array_idx = idx;
			end;
		     end;
		     if legal_mode then		/* go set it */
			go to SET_NUMERIC_MODE (array_idx);
		     else go to BAD_MODE_VALUE;	/* shouldn't happen, but ... */
		end;
		go to BAD_MODE_VALUE;		/* should never get here */

SET_BOOLEAN_MODE (0):				/* default */
		if ^mode_value.boolean_value then go to BAD_MODE_VALUE;
						/* was already tested, but ... */
		pci.modes = ""b;			/* reset all modes */
		if ios_interface then do;
		     sdb.mode = ""b;
		     sdb.stop_every = 0;
		end;
		else do;
		     ad.output_modes = ""b;
		     ad.stop_every = 0;
		end;
		pci.top_label_length, pci.bot_label_length = 0;
						/* flush any labels */
		pci.rmarg = pci.phys_line_length;	/* reset line and page lengths also */
		pci.lmarg = 0;
		pci.page_length = pci.phys_page_length - pci.lpi;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (1):				/* noskip */
		pci.overflow_off = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (2):				/* single */
		pci.single_space = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (3):				/* non_edited */
		pci.non_edited = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (4):				/* truncate */
		pci.truncate = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (5):				/* esc */
		pci.esc = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (6):				/* ctl_char */
		pci.ctl_char = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (7):				/* line_nbrs */
	 	pci.line_nbrs = mode_value.boolean_value;
		if pci.line_nbrs then do;		/* set */
		     save_rmarg = pci.rmarg;
		     pci.rmarg = min (pci.rmarg - 10, pci.phys_line_length -10 );
		     pci.line_count = 1;
		     pci.eol = "1"b;
		     pci.eof = "0"b;
		end;
		else do;
		     pci.rmarg = save_rmarg;
		end;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (8):				/* 1pg */
		if ios_interface then
		     sdb.single_page = mode_value.boolean_value;
		else ad.single_page = mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (9):				/* print: sets the noprint switch which is the inverse */
		if ios_interface then
		     sdb.noprint = ^mode_value.boolean_value;
		else ad.noprint = ^mode_value.boolean_value;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (-1):				/* "^stop" is equivalent to "stop=0" */
		mode_value.numeric_value = 0;
SET_NUMERIC_MODE (1):				/* stop */
		if ios_interface then do;
		     sdb.stop_every = mode_value.numeric_value;
		     sdb.stop_counter = 0;
		end;
		else do;
		     ad.stop_every = mode_value.numeric_value;
		     ad.stop_counter = 0;
		end;
		go to SET_NEXT_MODE;

SET_BOOLEAN_MODE (-3):				/* "^indent" is equivalent to "indent=0" */
SET_BOOLEAN_MODE (-2):				/* "^in" is equivalent to "in=0" */
		mode_value.numeric_value = 0;
SET_NUMERIC_MODE (2):				/* in */
SET_NUMERIC_MODE (3):				/* indent */
		pci.lmarg = mode_value.numeric_value;
		go to SET_NEXT_MODE;

SET_NUMERIC_MODE (4):				/* ll */
		pci.rmarg = mode_value.numeric_value;
		go to SET_NEXT_MODE;

SET_NUMERIC_MODE (5):				/* pl */
		pci.page_length = mode_value.numeric_value;
		go to SET_NEXT_MODE;

SET_NEXT_MODE:
	     end;

	     free mode_string_info in (system_area);	/* no longer need this data structure */
	     mode_string_info_ptr = null ();
	end;


/* Insure consistency in the prt_conv_info data structure given the new mode settings */

	pci.rmarg = min (pci.rmarg, pci.phys_line_length);/* insure that line is not too long */
	if pci.lmarg >= pci.rmarg then do;		/* left margin must be to left of right margin */
	     code = error_table_$inconsistent;
	     if length (P_old_modes) > 0 then		/* only return something if there's some room */
		call ioa_$rsnnl ("ll=^d,indent=^d.", P_old_modes, old_modes_lth, pci.rmarg, pci.lmarg);
	     goto ERROR_RETURN;
	end;

	if pci.overflow_off then do;
	     pci.top_label_length,			/* "noskip" and page labels are inconsistent */
		pci.bot_label_length = 0;
	     pci.sheets_per_page = 1;			/* one sheet per page in noskip mode */
	     pci.page_length = pci.phys_page_length - pci.lpi;
						/* reset logical page length */
	end;

	else					/* if "^noskip" mode ... */
	     pci.sheets_per_page =
		divide (pci.page_length + pci.lpi - 1 + pci.phys_page_length, pci.phys_page_length, 17, 0);
						/* compute physical sheets of paper per page */

	return;


/* Error returns */

BAD_MODE_VALUE:
	code = error_table_$bad_mode;


ERROR_RETURN:
	if mode_string_info_ptr ^= null () then free mode_string_info in (system_area);

	if ios_interface then
	     substr (P_iostatus, 1, 36) = unspec (code);
	else P_code = code;

	return;

/**/

%include prt_sdb;
%page;
%include prt_info;
%page;
%include prt_conv_info;
%page;
%include remote_attach_data;
%page;
%include iocb;
%page;
%include mode_string_info;

     end prtdim_changemode;
