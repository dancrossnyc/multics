/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* format: style4 */
/* PRTDIM_UTIL - Utility Functions for the Multics printer DIM.
   coded 6/12/75 by Noel I. Morris			*/
/* modified for new DIM buffer strategy, 9/2/83, E. N. Kittlitz */
/* copied to prtdim_eurc_util for eurc/urmpc partitioning, 83-10-20, E. N. Kittlitz */

prtdim_eurc_util$init: proc (sdb_ptr, rcode);

dcl  rcode fixed bin (35);				/* error code */

dcl  temp_iom_stat bit (72) aligned;			/* temp area to hold iom status */
dcl  load_proc entry (ptr, ptr, entry, fixed bin (35)) variable; /* procedure to load train or VFC image */
dcl  save_buffer (100) fixed bin (35);			/* holding buffer for workspace */
dcl  wseg_low (100) fixed bin (35) based (sdb.wsegp);	/* for saving and restoring workspace */

dcl  1 l_event_call_info aligned like event_call_info;

dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ioi_$connect entry (fixed bin, fixed bin (18), fixed bin (35));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  init_printer_ entry (ptr, ptr, entry, fixed bin (35));
dcl  init_printer_$load_image entry (ptr, ptr, entry, fixed bin (35));
dcl  init_printer_$load_vfc entry (ptr, ptr, entry, fixed bin (35));
dcl  analyze_device_stat_ entry (char (*) aligned, ptr, bit (72) aligned, bit (18) aligned);
dcl  analyze_system_fault_ entry (char (*) aligned, bit (72) aligned);
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));

dcl  error_table_$net_timeout fixed bin (35) ext;
dcl  error_table_$no_operation fixed bin (35) ext;
dcl  error_table_$io_no_permission fixed bin (35) ext static;
dcl  prt_status_table_$prt_status_table_ ext;

dcl  (addr, addrel, bit, rel, string) builtin;

%page;
	pip = addr (sdb.info);			/* Get pointer to printer info. */
	pcip = addr (sdb.conv_info);			/* Get pointer to conversion info. */
	if sdb.aborting then do;
	     rcode = error_table_$io_no_permission;
	     return;
	end;
	call init_printer_ (pip, pcip, sync_io, rcode);	/* Initialize the printer information. */

	sdb.stop_every,
	     sdb.stop_counter = 0;			/* Initialize page stop counters. */
	sdb.mode = "0"b;				/* Clear all mode bits. */

	return;
%page;

prtdim_eurc_util$load_image: entry (sdb_ptr, rcode);


	if sdb.aborting then do;
	     rcode = error_table_$io_no_permission;
	     return;
	end;
	load_proc = init_printer_$load_image;		/* Set procedure pointer. */
	go to load_join;				/* Join common code. */



prtdim_eurc_util$load_vfc: entry (sdb_ptr, rcode);


	if sdb.aborting then do;
	     rcode = error_table_$io_no_permission;
	     return;
	end;
	load_proc = init_printer_$load_vfc;		/* Set procedure pointer. */

load_join:
	pip = addr (sdb.info);			/* Get pointer to printer info. */
	pcip = addr (sdb.conv_info);			/* Get pointer to conversion info. */

	save_buffer = wseg_low;			/* Save the contents of the workspace. */

	call load_proc (pip, pcip, sync_io, rcode);	/* Call out to load the train or VFC image. */

	wseg_low = save_buffer;			/* Restore the workspace. */

	if rcode = 5 then				/* If invalid operation for thi model ... */
	     rcode = error_table_$no_operation;		/* Reflect appropriate error code. */

	return;

%page;
/* finish_abort tries to quiesce the printer and obtain a known (idle) state.
   It does this by changing all print IDCWs to be reset-status (terminates).
   It also patches all DCWs to be 1 word IOTDs, with the target being
   the last word of data space. That word contains a null line (i.e.
   the prt_conv_ equivalent of a carriage return.  As a result, if the printer
   is running, it should stop pretty fast. After we have a terminate status,
   or our patience runs out, we try to do a reset status.
*/

prtdim_eurc_util$finish_abort: entry (sdb_ptr);
dcl  stop_tries fixed bin;
dcl  wait_count fixed bin;
dcl  abort_status bit (1) aligned;

	pip = addr (sdb.info);			/* Get pointer to printer info. */
	pcip = addr (sdb.conv_info);			/* Get pointer to conversion info. */
	do stop_tries = 1 to 2;
	     prt_buffers (*).ddcw (*) = sdb.null_line_dcw;/* clobber dcws to null line */
	     prt_buffers (*).idcw = prt_info.term_idcw;
	     if sdb.running then
		do wait_count = 1 to 10 while (sdb.running); /* max of 63 lines at 10LPS should fit */
		call timer_manager_$sleep (1, "11"b);	/* 1 second */
		isp = sdb.status_ptr;
		statp = addr (istat.iom_stat);
		if istat.st & ^status.marker then	/* looks stopped to me, Ma */
		     sdb.running = "0"b;
	     end;					/* wait_count */
	     sdb.running = "0"b;			/* well, lie about it */
	     call sync_io (prt_info.term_idcw, "00"b, null (), 0, abort_status); /* see if it is */
	     if ^abort_status then do;		/* seems to have worked */
		call prtdim_eurc_util$initialize_workspace (sdb_ptr);
		sdb.aborting = "0"b;
		return;
	     end;
	     else sdb.running = "1"b;			/* try again */
	end;					/* tries */
	return;
%page;

prtdim_eurc_util$initialize_workspace: entry (sdb_ptr);
dcl  i fixed bin;

	unspec (wseg) = ""b;
	do i = 0 to sdb.max_buffers - 1;
	     prt_buffers (i).busy = ""b;
	     prt_buffers (i).number = i;
	     prt_buffers (i).dcw_count = 0;
	end;
	wseg (sdb.data_end) = sdb.null_line_data;	/* that's it there, officer */
	return;
%page;

sync_io: proc (i, rw, d, l, e);			/* internal proc to do synchronous I/O */

dcl  i bit (36) aligned;				/* IDCW */
dcl  rw bit (2) aligned;				/* RW bits */
dcl  d ptr;					/* pointer to data */
dcl  l fixed bin (12);				/* length of data */
dcl  e bit (1) aligned;				/* error flag */

dcl  b bit (18) aligned;				/* status flags */
dcl  dp ptr;					/* pointer to place for data */
dcl  ecode fixed bin (35);				/* internal error code */
dcl  timer_rang bit (1) aligned;

dcl  l_timer_message char (8) based;
dcl  sdata (l) fixed bin based;			/* for copying data */

	if sdb.running then do;
	     e = "1"b;
	     return;
	end;
	idcwp = sdb.wsegp;				/* Get pointer to place for IDCW. */
	string (idcw) = i;				/* Copy the IDCW. */
	dcwp = addrel (idcwp, 1);			/* Get pointer to data xfer DCW. */
	dp = addrel (dcwp, 1);			/* Get pointer to place for data. */

	string (dcw) = "0"b;			/* Clear the DCW. */
	dcw.address = rel (dp);			/* Insert address. */
	dcw.tally = bit (l);			/* And tally. */

	if rw & "01"b then				/* If writing ... */
	     dp -> sdata = d -> sdata;		/* Copy the data in workspace segment. */

redo_sync:
	call ipc_$drain_chn (sdb.evchan, ecode);	/* no leftover nonsense */
	if ecode ^= 0 then do;			/* shouldn't happen */
	     e = "1"b;
	     go to sync_io_return;
	end;
	call ioi_$connect (prt_info.devx, 0, ecode);	/* Fire up the IOM. */
	if ecode ^= 0 then do;			/* might be if we are aborting */
	     e = "1"b;
	     go to sync_io_return;
	end;
%page;
timed_sync_wait:
	call timer_manager_$alarm_wakeup (30, "11"b, sdb.evchan); /* 30 seconds, more than enough... */

sync_wait:
	call ipc_$block (addr (sdb.ev_list), addr (l_event_call_info), ecode);
	call timer_manager_$reset_alarm_wakeup (sdb.evchan); /* be sure it won't happen */
	if ecode ^= 0 then do;			/* Wait for I/O to complete. */
	     e = "1"b;
	     go to sync_io_return;
	end;

	imp = addr (l_event_call_info.message);		/* get pointer to ioi event message */
	if imp -> l_timer_message = "alarm___" then timer_rang = "1"b;
	else do;
	     timer_rang = "0"b;
	     if imess.st &				/* IPC message looks like valid ioi wakeup */
		bin (imess.level) = IO_SPECIAL_INTERRUPT_LEVEL then go to redo_sync; /* if this is a special interupt */
	end;
	isp = sdb.status_ptr;

	if istat.st then do;			/* if status is present */
	     if istat.time_out then do;		/* if timeout occured */
		e = "1"b;				/* error occured */
		ecode = error_table_$net_timeout;	/* caused by time out */
		go to sync_io_return;
	     end;

	     temp_iom_stat = istat.iom_stat;		/* copy status to double word */
	     if istat.level = IO_TERMINATE_INTERRUPT_LEVEL then do; /* If termination ... */
		if istat.er then			/* If error ... */
		     call analyze_device_stat_ (prt_info.devname, addr (prt_status_table_$prt_status_table_),
			temp_iom_stat, b);
	     end;					/* Analyze the status. */

	     else if istat.level = IO_SYSTEM_FAULT_INTERRUPT_LEVEL then /* If system fault ... */
		call analyze_system_fault_ (prt_info.devname, temp_iom_stat);

	     if istat.er then go to sync_wait;		/* If error, wait for special. */
	end;
	else do;					/* no status found */
	     if timer_rang then do;
		e = "1"b;
		go to sync_io_return;
	     end;
	     go to timed_sync_wait;			/* bogus wakeup, but someone's alive. let's wait some more */
	end;

	if rw & "10"b then				/* If reading ... */
	     d -> sdata = dp -> sdata;		/* Copy the data. */

	e = "0"b;					/* Clear the error switch. */

sync_io_return:
	sdb.status_ptr -> istat.st = "0"b;		/* flush workspace status */
	return;					/* Return to caller. */

     end sync_io;




/* format: off */
%page; %include event_call_info;
%page; %include interrupt_levels;
%page; %include ioi_stat;
%page; %include iom_dcw;
%page; %include iom_pcw;
%page; %include iom_stat;
%page; %include prt_sdb;
%page; %include prt_info;
%page; %include prt_conv_info;

     end prtdim_eurc_util$init;
