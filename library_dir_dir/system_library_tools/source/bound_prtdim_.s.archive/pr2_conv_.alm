" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
" PR2_CONV_ - Conversion for PRT202 series printer
"	coded 10/24/74 by Noel I. Morris


"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************


" This module perform the necessary conversion for printing
" on the PRT202 line printers.
"
" The manner in which this procedure is utilized at described in detail
" in the listing of prt_conv_.


	name	pr2_conv_

	segdef	pr2_conv_


	temp	char,case




pr2_conv_:
	tra	pr2_send_init
	tra	pr2_send_chars
	tra	pr2_send_slew_pattern
	tra	pr2_send_slew_count

" 

pr2_send_init:
	stz	case		initial case is upper case

	tra	sb|0		return to caller

" 

pr2_send_chars:
	eax7	0,au		save character count in X7

	eaa	0,2		white space count in AU
	eax2	0		clear count in X2
	lrl	18+3		get low-order 3 bits
	qrl	36-3		in QL
	tze	nosmall		if zero, don't have to insert spaces

	mlr	(),(pr,rl),fill(20)	insert up to 7 blanks
	desc6a	*,0		..
	desc6a	bb|0,ql		..

nosmall:	eax6	0,ql		X6 is output offset

spaceloop:
	eaq	0,al		count of 8 space multiples in QU
	tmoz	nospace		exit loop when finished
	sba	15,dl		can do 15 X 8 spaces at a time
	tmoz	*+2		if more than that many,
	ldq	15,dl		just do 15 this time
	orq	hs_chars		insert skip character and bit
	stq	char		and save

	mlr	(pr),(pr,x6)	move to output string
	desc6a	char(1),2		..
	desc6a	bb|0,2		..

	eax6	2,6		step output offset 2 characters
	tra	spaceloop		and loop

" 

nospace:	ldx4	case		case in X4
	eax5	0		X5 is input offset

charloop:
	mrl	(pr,x5),(pr),fill(0)  get a character
	desc9a	bp|0,1		..
	desc9a	char,4		..

	lda	char		character in AL
xlate:	xec	casetable,4	perform translation
	sta	char		store BCD character

	mlr	(pr),(pr,x6)	copy character into output
	desc6a	char(5),1		..
	desc6a	bb|0,1		..

	eax5	1,5		step input and output offsets
	eax6	1,6		..

	eax7	-1,7		decrease character count
	tnz	charloop		and loop

	stx4	case		save case
	a9bd	bp|0,5		step input pointer
	a6bd	bb|0,6		step output pointer
	tra	sb|0		and return to caller


caseshift:
	erx4	1,du		toggle the case

	mlr	(),(pr,x6),fill(77)	insert two escape characters
	desc6a	*,0		..
	desc6a	bb|0,2		..

	eax6	2,6		step output offset 2 characters
	tra	xlate		now, try translation again


casetable:
	xec	upper_case_table-32,al
	xec	lower_case_table-32,al


" 

pr2_send_slew_pattern:
	ora	=o20,dl		insert correct bit
	lrl	12		place pattern in Q(6-11)

send_slew:
	orq	esc_char		insert escpae character
	stq	char		store completed slew characters

	mlr	(pr),(pr)		move slew character to output
	desc6a	char,2		..
	desc6a	bb|0,2		..

	ldq	2*6+8,dl		step output pointer
	abd	bb|0,ql		round to next 9-bit character

	tra	sb|0		return



pr2_send_slew_count:
	eaq	0,al		place count in QU
	sba	15,dl		can only slew 15 lines at a time
	tmoz	*+2		if more than that many,
	ldq	15,du		start with 15
	qls	6		count in Q(6-11)
	tra	send_slew		join common code

" 

hs_chars:	vfd	o6/,o6/77,o6/40
esc_char:	vfd	o6/77

" 

" Conversion Table for Upper Case Characters.

upper_case_table:
	lda	=o20,dl		040	Space
	tra	caseshift		041	!
	lda	=o76,dl		042	"
	lda	=o13,dl		043	#
	lda	=o53,dl		044	$
	lda	=o74,dl		045	%
	lda	=o32,dl		046	&
	lda	=o57,dl		047	'
	lda	=o35,dl		050	(
	lda	=o55,dl		051	)
	lda	=o54,dl		052	*
	lda	=o60,dl		053	+
	lda	=o73,dl		054	,
	lda	=o52,dl		055	-
	lda	=o33,dl		056	.
	lda	=o61,dl		057	/
	lda	=o00,dl		060	0
	lda	=o01,dl		061	1
	lda	=o02,dl		062	2
	lda	=o03,dl		063	3
	lda	=o04,dl		064	4
	lda	=o05,dl		065	5
	lda	=o06,dl		066	6
	lda	=o07,dl		067	7
	lda	=o10,dl		070	8
	lda	=o11,dl		071	9
	lda	=o15,dl		072	:
	lda	=o56,dl		073	;
	lda	=o36,dl		074	<
	lda	=o75,dl		075	=
	lda	=o16,dl		076	>
	tra	caseshift		077	?

	lda	=o14,dl		100	@
	lda	=o21,dl		101	A
	lda	=o22,dl		102	B
	lda	=o23,dl		103	C
	lda	=o24,dl		104	D
	lda	=o25,dl		105	E
	lda	=o26,dl		106	F
	lda	=o27,dl		107	G
	lda	=o30,dl		110	H
	lda	=o31,dl		111	I
	lda	=o41,dl		112	J
	lda	=o42,dl		113	K
	lda	=o43,dl		114	L
	lda	=o44,dl		115	M
	lda	=o45,dl		116	N
	lda	=o46,dl		117	O
	lda	=o47,dl		120	P
	lda	=o50,dl		121	Q
	lda	=o51,dl		122	R
	lda	=o62,dl		123	S
	lda	=o63,dl		124	T
	lda	=o64,dl		125	U
	lda	=o65,dl		126	V
	lda	=o66,dl		127	W
	lda	=o67,dl		130	X
	lda	=o70,dl		131	Y
	lda	=o71,dl		132	Z
	lda	=o12,dl		133	[
	lda	=o72,dl		134	\
	lda	=o34,dl		135	]
	lda	=o40,dl		136	^
	tra	caseshift		137	_

	lda	=o37,dl		140	`
	tra	caseshift		141	a
	tra	caseshift		142	b
	tra	caseshift		143	c
	tra	caseshift		144	d
	tra	caseshift		145	e
	tra	caseshift		146	f
	tra	caseshift		147	g
	tra	caseshift		150	h
	tra	caseshift		151	i
	tra	caseshift		152	j
	tra	caseshift		153	k
	tra	caseshift		154	l
	tra	caseshift		155	m
	tra	caseshift		156	n
	tra	caseshift		157	o
	tra	caseshift		160	p
	tra	caseshift		161	q
	tra	caseshift		162	r
	tra	caseshift		163	s
	tra	caseshift		164	t
	tra	caseshift		165	u
	tra	caseshift		166	v
	tra	caseshift		167	w
	tra	caseshift		170	x
	tra	caseshift		171	y
	tra	caseshift		172	z
	tra	caseshift		173	{
	tra	caseshift		174	|
	tra	caseshift		175	}
	tra	caseshift		176	~


" 

" Conversion Table for Lower Case Characters.

lower_case_table:
	lda	=o20,dl		040	Space
	lda	=o74,dl		041	!
	lda	=o76,dl		042	"
	lda	=o13,dl		043	#
	lda	=o53,dl		044	$
	tra	caseshift		045	%
	tra	caseshift		046	&
	lda	=o57,dl		047	'
	lda	=o35,dl		050	(
	lda	=o55,dl		051	)
	lda	=o54,dl		052	*
	lda	=o60,dl		053	+
	lda	=o73,dl		054	,
	tra	caseshift		055	-
	lda	=o33,dl		056	.
	lda	=o61,dl		057	/
	lda	=o00,dl		060	0
	lda	=o01,dl		061	1
	lda	=o02,dl		062	2
	lda	=o03,dl		063	3
	lda	=o04,dl		064	4
	lda	=o05,dl		065	5
	lda	=o06,dl		066	6
	lda	=o07,dl		067	7
	lda	=o10,dl		070	8
	lda	=o11,dl		071	9
	lda	=o15,dl		072	:
	lda	=o56,dl		073	;
	lda	=o36,dl		074	<
	lda	=o75,dl		075	=
	lda	=o16,dl		076	>
	lda	=o14,dl		077	?

	tra	caseshift		100	@
	tra	caseshift		101	A
	tra	caseshift		102	B
	tra	caseshift		103	C
	tra	caseshift		104	D
	tra	caseshift		105	E
	tra	caseshift		106	F
	tra	caseshift		107	G
	tra	caseshift		110	H
	tra	caseshift		111	I
	tra	caseshift		112	J
	tra	caseshift		113	K
	tra	caseshift		114	L
	tra	caseshift		115	M
	tra	caseshift		116	N
	tra	caseshift		117	O
	tra	caseshift		120	P
	tra	caseshift		121	Q
	tra	caseshift		122	R
	tra	caseshift		123	S
	tra	caseshift		124	T
	tra	caseshift		125	U
	tra	caseshift		126	V
	tra	caseshift		127	W
	tra	caseshift		130	X
	tra	caseshift		131	Y
	tra	caseshift		132	Z
	tra	caseshift		133	[
	tra	caseshift		134	\
	tra	caseshift		135	]
	lda	=o40,dl		136	^
	lda	=o52,dl		137	_

	lda	=o37,dl		140	`
	lda	=o21,dl		141	a
	lda	=o22,dl		142	b
	lda	=o23,dl		143	c
	lda	=o24,dl		144	d
	lda	=o25,dl		145	e
	lda	=o26,dl		146	f
	lda	=o27,dl		147	g
	lda	=o30,dl		150	h
	lda	=o31,dl		151	i
	lda	=o41,dl		152	j
	lda	=o42,dl		153	k
	lda	=o43,dl		154	l
	lda	=o44,dl		155	m
	lda	=o45,dl		156	n
	lda	=o46,dl		157	o
	lda	=o47,dl		160	p
	lda	=o50,dl		161	q
	lda	=o51,dl		162	r
	lda	=o62,dl		163	s
	lda	=o63,dl		164	t
	lda	=o64,dl		165	u
	lda	=o65,dl		166	v
	lda	=o66,dl		167	w
	lda	=o67,dl		170	x
	lda	=o70,dl		171	y
	lda	=o71,dl		172	z
	lda	=o12,dl		173	{
	lda	=o32,dl		174	|
	lda	=o34,dl		175	}
	lda	=o72,dl		176	~




	end
