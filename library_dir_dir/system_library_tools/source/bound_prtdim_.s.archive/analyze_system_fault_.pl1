/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to analyze IOM system fault status. */
/* Coded 10/31/74 by Noel I. Morris */
/* Modified 1 July 1982 by Chris Jones to add rsnnl entry. */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
analyze_system_fault_:
     proc (p_devname, p_fword);

dcl	p_description	   char (*) varying parameter;/* English description of fault */
dcl	p_devname		   char (*) parameter;	/* device name */
dcl	p_fword		   bit (36) aligned parameter;/* system fault word */

dcl	fword		   bit (36) aligned;	/* copy of faultword */
dcl	message		   char (64) var;		/* error message */
dcl	rs_sw		   bit (1) aligned;		/* whether we return a description or output it */

dcl	com_err_		   entry options (variable);

dcl	(addr, substr)	   builtin;

	rs_sw = "0"b;				/* don't return the message, just output it */
	goto COMMON;

rsnnl:
     entry (p_fword, p_description);

	rs_sw = "1"b;

COMMON:
	fword = p_fword;
	statp = addr (fword);			/* Get pointer to system fault word. */

	if ^rs_sw then
	     call com_err_ (0, p_devname, "IOM system fault on channel ^2.3b.", substr (faultword.channel, 4));


	if (faultword.serv_req & "11100"b) = "00000"b then
	     message = "Invalid";
	else if faultword.serv_req = "00110"b then
	     message = "First list";
	else if (faultword.serv_req & "11110"b) = "00100"b then
	     message = "Second list";
	else if faultword.serv_req = "00111"b then
	     message = "Backup list";
	else if (faultword.serv_req & "11100"b) = "01000"b then
	     message = "Status";
	else if (faultword.serv_req & "11100"b) = "01100"b then
	     message = "Program interrupt";
	else if faultword.serv_req = "10000"b then
	     message = "Indirect single precision data load";
	else if faultword.serv_req = "10001"b then
	     message = "Indirect double precision data load";
	else if faultword.serv_req = "10100"b then
	     message = "Indirect single precision data store";
	else if faultword.serv_req = "10101"b then
	     message = "Indirect double precision data store";
	else if faultword.serv_req = "11000"b then
	     message = "Direct single precision data load";
	else if faultword.serv_req = "11001"b then
	     message = "Direct double precision data load";
	else if faultword.serv_req = "11010"b then
	     message = "Direct read clear";
	else if faultword.serv_req = "11100"b then
	     message = "Direct single precision data store";
	else if faultword.serv_req = "11101"b then
	     message = "Direct double precision data store";

	if rs_sw then
	     p_description = "System fault during """ || message || """ service.";
	else call com_err_ (0, p_devname, "Operation was ""^a service"".", message);


	if faultword.controller_fault = "0010"b then
	     message = "Non-existent address";
	else if faultword.controller_fault = "0011"b then
	     message = "Fault on condition";
	else if faultword.controller_fault = "0101"b then
	     message = "Data parity, store to SC";
	else if faultword.controller_fault = "0110"b then
	     message = "Data parity in store";
	else if faultword.controller_fault = "0111"b then
	     message = "Data parity, store to SC and in store";
	else if faultword.controller_fault = "1000"b then
	     message = "Not control port";
	else if faultword.controller_fault = "1001"b then
	     message = "Port not enabled";
	else if faultword.controller_fault = "1010"b then
	     message = "Illegal instruction";
	else if faultword.controller_fault = "1011"b then
	     message = "Store not ready";
	else if faultword.controller_fault = "1100"b then
	     message = "ZAC parity, active module to SC";
	else if faultword.controller_fault = "1101"b then
	     message = "Data parity, active module to SC";
	else if faultword.controller_fault = "1110"b then
	     message = "ZAC parity, SC to store";
	else if faultword.controller_fault = "1111"b then
	     message = "Data parity, SC to store";

	if faultword.controller_fault then do;
	     if rs_sw then
		p_description = p_description || "  System controller fault was """ || message || """.";
	     else call com_err_ (0, p_devname, "System controller fault was ""^a"".", message);
	end;

	if faultword.io_fault = "000001"b then
	     message = "Illegal channel number";
	else if faultword.io_fault = "000010"b then
	     message = "Illegal service request";
	else if faultword.io_fault = "000011"b then
	     message = "Parity error reading from scratchpad";
	else if faultword.io_fault = "000100"b then
	     message = "Attempt to cross 256K boundary";
	else if faultword.io_fault = "000101"b then
	     message = "Tally runout on connect channel LPW";
	else if faultword.io_fault = "000110"b then
	     message = "Attempt to connect to illegal PCW";
	else if faultword.io_fault = "000111"b then
	     message = "IDCW found when DCW or TDCW expected";
	else if faultword.io_fault = "001000"b then
	     message = "Illegal character position";
	else if faultword.io_fault = "001001"b then
	     message = "No memory response";
	else if faultword.io_fault = "001010"b then
	     message = "Parity error accessing SC";
	else if faultword.io_fault = "001011"b then
	     message = "Illegal connect channel LPW tally";
	else if faultword.io_fault = "001100"b then
	     message = "Attempt to use REL bit in Multics mode";
	else if faultword.io_fault = "001101"b then
	     message = "Attempt to use mod64 DCW in GCOS mode";
	else if faultword.io_fault = "001110"b then
	     message = "LPW extension bit ON in standard GCOS mode";
	else if faultword.io_fault = "001111"b then
	     message = "No memory port selected";

	if faultword.io_fault then do;
	     if rs_sw then
		p_description = p_description || "  I/O fault was """ || message || """.";
	     else call com_err_ (0, p_devname, "I/O fault was ""^a"".", message);
	end;

	return;
%page;
%include iom_stat;

     end analyze_system_fault_;
