/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* format: style4,indattr */

test_system_control:
     procedure options (variable);

/* This command allows a system control (SC) environment to be set up
   from which an answering service (AS) may be started for the purposes
   of debugging the SC and AS software.  The command's only argument is
   the pathname of a test >sc1 directory (do not use the real >sc1
   directory).  In this directory should already be set up all the
   segments needed to run a SC and AS invocation.  If segments are
   missing or incorrectly formatted, error messages will result and the
   SC or AS initialization will fail.  The SC/AS environment is not the most
   robust one, so fatal process errors (although not common) may occur if
   things are improperly setup.  The best way to get a SC/AS running is
   to try to get an >sc1 directory set up with the required segments
   (refer to the acct_start_up.ec to see what needs to be in the >sc1
   directory) and then invoke this command.  Fix all errors which result.
   Another (more frustrating) approach is to invoke this command with
   an empty directory and fix all the errors.

   WARNING:  The SC environment plays with the I/O switches.  Do not expect
   it to work in anything but a virgin environment (no auditing, no video).
   And don't be surprised if your favorite commands (emacs) won't work once
   you've started SC in your process.  (But then, anyone who knows the SC
   environment running in the Initializer process knows what a limited
   environment there is.  */

/****^  HISTORY COMMENTS:
  1) change(86-04-18,Swenson), approve(87-07-13,MCR7741),
     audit(87-07-13,GDixon), install(87-08-04,MR12.1-1055):
     Created in order to run system control in a test process.
                                                   END HISTORY COMMENTS */
/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  sci_ptr	        ptr automatic;
dcl  system_control_dirname char (168) automatic;

/* Entries */

dcl  absentee_user_manager_$term_aum entry ();
dcl  as_who$as_who_init     entry (char (*));
dcl  com_err_	        entry () options (variable);
dcl  mrdim_$test_mrd        entry (char (*));
dcl  pnt_manager_$test      entry (char (*));
dcl  ssu_$abort_subsystem   entry () options (variable);
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
dcl  system_control_        entry ();

/* Conditions */

dcl  cleanup	        condition;

/* Constant */

dcl  ME		        char (32) initial ("test_system_control") internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);
%page;
/* Program */

	sci_ptr = null ();
	on cleanup
	     call Clean_up ();

	call ssu_$standalone_invocation (sci_ptr, ME, "1.0", null (),
	     Abort_subsystem, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Creating standalone subsystem invocation.");
	     goto RETURN;
	end;

	call Process_arguments ();

	sc_stat_$test_mode = TRUE;
	sc_stat_$sysdir = system_control_dirname;
	sc_stat_$log_dir = rtrim (system_control_dirname) || ">as_logs";

	/*** No executing of the system_start_up.ec */

	sc_stat_$did_part1 = TRUE;
	sc_stat_$did_part2 = TRUE;
	sc_stat_$did_part3 = TRUE;

	/*** No ring-0 MCS initialization */

	as_data_$lct_initialized = TRUE;

/**** Ensure we use the test PNT for the admin mode password */
	call pnt_manager_$test (system_control_dirname);
/**** Make sure we don't use the REAL message coordinator */
	call mrdim_$test_mrd (system_control_dirname);
/**** Let's not start up the absentee facility.  If we need to test it,
      we can start it manually. */
	call absentee_user_manager_$term_aum ();
/**** Make as_who in this process use the test answer_table */
	call as_who$as_who_init (system_control_dirname);
	call system_control_ ();
RETURN:
	call Clean_up ();
	return;
%page;
Process_arguments:
     procedure ();

dcl  argument_idx	        fixed bin automatic;
dcl  argument_lth	        fixed bin (21) automatic;
dcl  argument_ptr	        ptr automatic;
dcl  n_arguments	        fixed bin automatic;

dcl  argument	        char (argument_lth) based (argument_ptr);

dcl  absolute_pathname_     entry (char (*), char (*), fixed bin (35));
dcl  ssu_$arg_count	        entry (ptr, fixed bin);
dcl  ssu_$arg_ptr	        entry (ptr, fixed bin, ptr, fixed bin (21));

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 1 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Syntax is: ^a system_control_dirname.", ME);

	call ssu_$arg_ptr (sci_ptr, 1, argument_ptr, argument_lth);

	call absolute_pathname_ (argument, system_control_dirname, code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code, "^a", argument);
	return;
     end Process_arguments;
%page;
Abort_subsystem:
     procedure ();

	goto RETURN;
     end Abort_subsystem;
%page;
Clean_up:
     procedure ();
	if sci_ptr ^= null () then
	     call ssu_$destroy_invocation (sci_ptr);
	return;
     end Clean_up;

/* format: off */
%page; %include as_data_;
%page; %include sc_stat_;
/* format: on */
     end test_system_control;
