/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-11-10,Fawcett), approve(86-11-10,MCR7125),
     audit(87-01-08,Farley), install(87-01-09,MR12.0-1266):
     Changed / Rewritten by Tom Oke. Modified by RAF to use copy_erf_seg_
     instead of copy_out_. copy_out_ was never installed in the system
     libraries. This version calls get_vol_list_ for device and pv names.
  2) change(88-02-22,Parisek), approve(88-02-22,MCR7753),
     audit(88-02-23,Fawcett), install(88-03-01,MR12.2-1031):
     Remove the "-interpret" and "-no_interpret" control arguments and
     remove all references to interpret_sw which is set by these control
     arguments.
                                                   END HISTORY COMMENTS */


disk_queue:
dq:  proc () options (variable);

/* coded 12/17/70 by Noel I. Morris
   revised 4/16/71 by Noel I. Morris
   revised 7/25/72 by Lee J. Scheffler to handle new DSU_170 DIM and
   DSU-181 version I DIM
   Re-coded 04/02/80 W. Olin Sibert, to add FDUMP support, pathname interpretation, many features.
   Modified for new adaptive disk dim modifications and to remove
	paging device support, T. Oke 84-09-24.
   84-12-10 by T. Oke, modified to use get_vol_list_ for volume names and
          release database segments on erf or -rl.
*/

	dcl     areas		 area based;

	dcl     (argno, nargs)	 fixed bin;
	dcl     ap		 ptr;
	dcl     al		 fixed bin (21);
	dcl     arg		 char (al) based (ap);
	dcl     code		 fixed bin (35);
	dcl     cmpp		 ptr;
	dcl     subsystem_name	 char (4) aligned;
	dcl     subsystem_found	 bit (1) aligned;
	dcl     erf_name		 char (32);
	dcl     erf_sw		 bit (1);
	dcl     seg_len		 fixed bin (19) uns;
	dcl     (long_sw, all_sw, live_sw) bit (1) aligned;
	dcl     (sector_sw, record_sw, read_sw, write_sw) bit (1) aligned;
	dcl     entry_count		 fixed bin;
	dcl     idx		 fixed bin;


	dcl     com_err_		 entry options (variable);
	dcl     copy_erf_seg_$name	 entry (char (*), char (*), ptr, uns fixed bin (19), fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     get_vol_list_	 entry (ptr, ptr, ptr, char (8), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     (get_temp_segment_, release_temp_segment_) entry (char (*), ptr, fixed bin (35));
	dcl     request_id_		 entry (fixed bin (71)) returns (char (19));

	dcl     (error_table_$badopt,
	        error_table_$bad_conversion,
	        error_table_$inconsistent,
	        error_table_$noarg)	 fixed bin (35) external static;

	dcl     WHOAMI		 char (32) internal static options (constant) init ("disk_queue");

	dcl     cleanup		 condition;

	dcl     (addr, binary, hbound, lbound, null, ptr, substr) builtin;

/*  */
	disksp, cmpp, sstp, pv_list_ptr, lv_list_ptr = null ();
	all_sw, live_sw, long_sw = "0"b;
	sector_sw, record_sw, read_sw, write_sw = "0"b;
	entry_count = -1;
	erf_name = "-1";
	erf_sw = "0"b;
	subsystem_name = "";
	code = 0;

	on cleanup call clean_up_segs;

	call cu_$arg_count (nargs);
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));
	     if substr (arg, 1, 1) ^= "-" then do;	/* the subsystem name */
		     if subsystem_name ^= "" then do;
			     call com_err_ (0, WHOAMI, "Only one subsystem name may be supplied. ^a", arg);
			     goto MAIN_RETURN;
			end;

		     subsystem_name = arg;
		end;

	     else if arg = "-all" | arg = "-a" then all_sw = "1"b;
	     else if arg = "-live" then live_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf" then long_sw = "0"b;
	     else if arg = "-long" | arg = "-lg" then long_sw = "1"b;
	     else if arg = "-page" | arg = "-pg" | arg = "-record" | arg = "-rec" then record_sw = "1"b;
	     else if arg = "-vtoc" | arg = "-sector" | arg = "-sec" then sector_sw = "1"b;
	     else if arg = "-read" then read_sw = "1"b;
	     else if arg = "-write" then write_sw = "1"b;

	     else if arg = "-erf" then do;		/* pick up ERF number */
		     if argno = nargs then do;
ARG_MISSING:		     call com_err_ (error_table_$noarg, WHOAMI, "After ^a", arg);
			     goto MAIN_RETURN;
			end;

		     argno = argno + 1;
		     call cu_$arg_ptr (argno, ap, al, (0));

		     if erf_sw then do;
			     call com_err_ (0, WHOAMI, "Only one FDUMP name may be supplied. ^a", arg);
			     goto MAIN_RETURN;
			end;

		     erf_name = arg;
		     erf_sw = "1"b;
		end;

	     else if arg = "-last" | arg = "-lt" then do; /* last N finished queue entries */
		     if argno = nargs then goto ARG_MISSING;

		     argno = argno + 1;
		     call cu_$arg_ptr (argno, ap, al, (0));
		     entry_count = cv_dec_check_ (arg, code);
		     if code ^= 0 then do;
			     code = error_table_$bad_conversion;
BAD_ENTRY_COUNT:		     call com_err_ (code, WHOAMI,
				"-last must be followed by a positive, nonzero number, not ^a.", arg);
			     goto MAIN_RETURN;
			end;
		end;				/* of processing for -last */

	     else do;
		     call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		     goto MAIN_RETURN;
		end;
	end;					/* argument loop */

	if all_sw & (entry_count > 0) then do;
		call com_err_ (error_table_$inconsistent, WHOAMI, "-all and -last");
		goto MAIN_RETURN;
	     end;

	if all_sw & live_sw then do;
		call com_err_ (error_table_$inconsistent, WHOAMI, "-all and -live");
		goto MAIN_RETURN;
	     end;

	if (entry_count <= 0) & (^all_sw) & (^live_sw) then /* apply defaults */
	     live_sw = "1"b;

	if all_sw then /* translate into both */
	     live_sw = "1"b;			/* and all the new ones besides */

	if (sector_sw = "0"b) & (record_sw = "0"b) then
	     sector_sw, record_sw = "1"b;

	if (read_sw = "0"b) & (write_sw = "0"b) then
	     read_sw, write_sw = "1"b;

/*  */
	call init_segs;
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI);
		goto MAIN_RETURN;
	     end;

	call copy_erf_seg_$name (erf_name, "disk_seg", disksp, seg_len, code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "disk_seg");
		goto MAIN_RETURN;
	     end;

	call get_vol_list_ (pv_list_ptr, lv_list_ptr, null (), get_vol_list_version, code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot get volume data.");
		goto MAIN_RETURN;
	     end;
%page;
	if all_sw then entry_count = disk_data.free_q_size;
	subsystem_found = "0"b;
	do idx = 1 to disk_data.subsystems;		/* Loop through all subsystems */
	     diskp = ptr (disksp, disk_data.array (idx).offset); /* get pointer to disktab for this subsystem */
	     if (subsystem_name = "") | (subsystem_name = disk_data.array (idx).name) then do; /* print it */
		     call process_subsystem (disk_data.array (idx).name); /* if no name specified, process them all */
		     subsystem_found = "1"b;		/* remember, so not to print error message */
		end;
	end;					/* of loop through subsystems */
	call process_free_queue;

	if ^subsystem_found then call com_err_
		(0, WHOAMI, "Subsystem ^a not found^[ in ERF ^a^].",
		subsystem_name, erf_sw, erf_name);

MAIN_RETURN:
	call clean_up_segs;				/* turf the space */
	return;					/* all done */

init_segs:
     proc;
	if disksp = null () then
	     call get_temp_segment_ (WHOAMI, disksp, code);
	if code ^= 0 then return;

	if sstp = null () then
	     call get_temp_segment_ (WHOAMI, sstp, code);
	if code ^= 0 then return;
	if cmpp = null () then
	     call get_temp_segment_ (WHOAMI, cmpp, code);
	if code ^= 0 then return;
     end init_segs;



clean_up_segs:
     proc;
	if disksp ^= null () then
	     call release_temp_segment_ (WHOAMI, disksp, code);
	if sstp ^= null () then
	     call release_temp_segment_ (WHOAMI, sstp, code);
	if cmpp ^= null () then
	     call release_temp_segment_ (WHOAMI, cmpp, code);

	if pv_list_ptr ^= null () then
	     free pv_list in (pv_list.area_ptr -> areas);


	if lv_list_ptr ^= null () then
	     free lv_list in (lv_list.area_ptr -> areas);

	disksp, sstp, cmpp, lv_list_ptr, pv_list_ptr = null ();
	return;
     end clean_up_segs;
						/*  */

process_subsystem: proc (p_subsystem_name) options (non_quick);

/* This procedure processes a single subsystems worth of data. It expects diskp to
   point to the disktab for the subsystem. */

	dcl     p_subsystem_name	 char (*) parameter;
	dcl     P_subsystem_name	 char (32);

	dcl     last_time		 fixed bin (71);
	dcl     first_sw		 bit (1) aligned;
	dcl     dev		 fixed bin (17);
	dcl     qrp		 bit (18) aligned;
	dcl     qrp_count		 fixed bin;
	dcl     matching_entries	 fixed bin;



	P_subsystem_name = p_subsystem_name;
	first_sw = "1"b;				/* first time around, print header -- do this only once, */
	matching_entries = 0;			/* for both live and dead queue entries */
	if live_sw then do;				/* print info about pending requests */
		last_time = 0;			/* appear to cross a minute boundary on first time thru */

		do dev = lbound (disktab.devtab, 1) to
		     hbound (disktab.devtab, 1);
		     dp = addr (disktab.devtab (dev));
		     qrp = devtab.wq.head;		/* Get rel ptr to head of queue. */
		     do while (qrp ^= ""b);		/* Search through the queue. */
			qp = ptr (disksp, qrp);	/* and print all the live ones */
			call print_queue_entry ();	/* print this one */
			if quentry.used ^= "1"b then do; /* prospect for anomalies */
				call ioa_ ("^4xLast queue entry at ^o is threaded, but not marked in-use.",
				     qrp);
				qrp = "0"b;	/* kill chain */
			     end;
			else qrp = quentry.next;	/* Get index of next queue entry. */
		     end;
		end;

		if first_sw then /* if nothing was outstanding, say so */
		     call ioa_ ("^/^a: Live queue empty.", P_subsystem_name);
	     end;					/* of printing live queue entries & stuff */


	if matching_entries = 0 then
	     call ioa_ ("^a: No^[^s^s^;^[ read^]^[ write^]^] requests^[^s^s^; for^[ VTOC^]^[ page^] I/O^].",
		P_subsystem_name,
		(read_sw & write_sw), read_sw, write_sw, (record_sw & sector_sw), sector_sw, record_sw);

	return;
%page;
process_free_queue:
     entry;

	P_subsystem_name = "Free";
	if entry_count > 0 then do;			/* print most recent queue entries, too */
		qrp = disk_data.free_q.tail;
		qrp_count = 0;
		last_time = 0;
		first_sw = "1"b;
		matching_entries = 0;

		do while (qrp ^= ""b);		/* walk back through the queue, to reverse its order */
		     qrp_count = qrp_count + 1;
		     if qrp_count > disk_data.free_q_size then do; /* can't happen */
			     call ioa_ ("Anomalous threading indicates more than ^d. entries in free queue.",
				disk_data.free_q_size);
			     qrp = ""b;		/* make sure we don't go through again */
			end;

		     else do;

			     qp = ptr (disksp, qrp);
			     call print_queue_entry ();
			     if quentry.used ^= "0"b then /* prospect for anomalies */
				call ioa_ ("^4xLast queue entry at ^o is free, but marked in-use.",
				     qrp);
			     if matching_entries = entry_count then qrp = ""b;
						/* check if enough printed */
			     else qrp = ptr (disksp, qrp) -> quentry.prev;
			end;			/* of printing dead queue entries */
		end;

		if matching_entries = 0 then
		     call ioa_ ("Free: No^[^s^s^;^[ read^]^[ write^]^] requests^[^s^s^; for^[ VTOC^]^[ page^] I/O^].",
			(read_sw & write_sw), read_sw, write_sw, (record_sw & sector_sw), sector_sw, record_sw);

	     end;
	return;

/*  */

print_queue_entry: proc ();

/* This procedure (internal to process_subsystem) prints out a single queue entry.
   It prints the header, as well, the first time it is called. It expects to be
   called with qp pointing to the desired entry. */

	dcl     cyladd		 fixed bin (11);
	dcl     devadd		 fixed bin (20);
	dcl     coreadd		 fixed bin (24);
	dcl     queued_time		 fixed bin (71);
	dcl     (time_str_1, time_str_2) char (24);


/* If we are not a read, and we want reads, or are not a write, and we want
   write, then skip the entry.  Similarily for sector and record IO. */

	if ^((read_sw & ^write_map (quentry.type)) |
	     (write_sw & write_map (quentry.type)))
	then return;				/* not desired */

	if ^((sector_sw & sector_map (quentry.type)) |
	     (record_sw & ^sector_map (quentry.type)))
	then return;				/* not desired */

	cyladd = binary (quentry.cylinder, 11);		/* extract some addresses from the queue entry */
	devadd = binary (quentry.sector, 20);
	coreadd = binary (quentry.coreadd, 24);
	queued_time = binary (quentry.time, 71);


	if first_sw then do;
		if long_sw then
		     call ioa_ ("^/^4a:^2xTime^5xIO Type^5xDev  PV^vx ^3xCyl^3xSector^2xMem Addr^2x(Flags)^/",
			P_subsystem_name,
			pv_list.pv_name_max_length - 4);
		else call ioa_ ("^a:^/^2xIO Type^6xDV ^3xSector^7xMem^3x(Flags)^/",
			P_subsystem_name);		/* Print header. */
		first_sw = "0"b;
	     end;

	matching_entries = matching_entries + 1;

	if long_sw then do;				/* include the time, among other things */
		time_str_1 = request_id_ (last_time);	/* see if we cross a minute boundary here */
		time_str_2 = request_id_ (queued_time);

		if substr (time_str_1, 1, 10) ^= substr (time_str_2, 1, 10) then do; /* if MM/DD/YY HH:MM not same */
			call date_time_ (queued_time, time_str_1);
			call ioa_ ("Queued at ^8a ^2a:^2a:^8a --", /* print substrings from date_time */
			     substr (time_str_1, 1, 8), substr (time_str_1, 11, 2),
			     substr (time_str_1, 13, 2), substr (time_str_2, 11, 9));
		     end;				/* of special processing for crossing a minute boundary */

		call ioa_ ("^2x^9a^2x^10a^1x^8a ^va^2x^4o^2x^7o^2x^8o^[ intrpt^]^[ used^]",
		     substr (time_str_2, 11, 9),	/* SS.mmmmmm -- time queued */
		     io_name (quentry.type), pv_list.pv_info (quentry.pvtx).drive_name,
		     pv_list.pv_name_max_length, pv_list.pv_info (quentry.pvtx).pvname,
		     cyladd, devadd, coreadd, quentry.intrpt, quentry.used);

		last_time = queued_time;		/* remember for next time through */
	     end;

	else do;					/* otherwise, just print brief stuff */
		call ioa_ ("^10a^1x^8a  ^7o  ^8o^[ intrpt^]^[ used^]",
		     io_name (quentry.type), pv_list.pv_info (quentry.pvtx).drive_name, devadd, coreadd, quentry.intrpt, quentry.used);
	     end;

	return;
     end print_queue_entry;				/* internal procedure print_queue_entry */

     end process_subsystem;				/* internal procedure process_subsystem */
%page;

%include dskdcl;
%include disk_tune;
%include get_vol_list_;
%page;

%include cmp;

%page;

%include sst;

     end;						/* external procedure Disk_queue */
