/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


vtoc_pathname: proc;

/* vtoc_pathname  Bernard Greenberg 05/20/76 */

dcl (com_err_, ioa_) entry options (variable);
dcl  nfsw bit (1) init ("0"b);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl 1 local_vtoce like vtoce aligned;
dcl (vtocx, pvtx) fixed bin;
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  arg char (argl) based (argp);
dcl  argl fixed bin, argp ptr;
dcl  i fixed bin;
dcl  q (1) ptr;
dcl  cleanup condition;
dcl  error_table_$pvid_not_found fixed bin (35) ext;
dcl  pn char (168);
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36), fixed bin (35));
dcl  mdc_$read_disk_table entry (ptr, fixed bin (35));
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  error_table_$badopt fixed bin (35) ext;
dcl  code fixed bin (35);
dcl  myname char (19) init ("vtoc_pathname");

	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
usage:	     call com_err_ (code, myname, "Usage: vtoc_pathname pvtx/volname vtocx (octal)");
	     return;
	end;

	pvtx = cv_oct_check_ (arg, code);
	if code ^= 0 then do;
	     on cleanup call release_temp_segments_ (myname, q, (0));
	     call get_temp_segments_ (myname, q, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Getting temp disk_table seg");
		return;
	     end;
	     dtp = q (1);
	     call mdc_$read_disk_table (dtp, code);
	     if code ^= 0 then do;
		call release_temp_segments_ (myname, q, (0));
		call com_err_ (code, myname, "Reading disk table.");
		return;
	     end;
	     do pvtx = 1 to dt.n_entries;
		dtep = addr (dt.array (pvtx));
		if dte.used & dte.storage_system & dte.pvname = arg then go to got_pvtx;
	     end;
	     call release_temp_segments_ (myname, q, (0));
	     call com_err_ (error_table_$pvid_not_found, myname, arg);
	     return;
got_pvtx:	     call release_temp_segments_ (myname, q, (0));
	end;

	call cu_$arg_ptr (2, argp, argl, code);
	if code ^= 0 then go to usage;
	vtocx = cv_oct_check_ (arg, code);
	if code ^= 0 then do;
	     code = 0;
	     go to usage;
	end;

	call cu_$arg_ptr (3, argp, argl, code);
	if code = 0 then do;
	     if arg = "-brief" | arg = "-bf" then nfsw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, myname, arg);
		return;
	     end;
	end;

	vtocep = addr (local_vtoce);
	call phcs_$get_vtoce (pvtx, vtocx, vtocep, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Getting vtoce ^o on pvtx ^o.", vtocx, pvtx);
	     return;
	end;


	if vtoce.uid = "0"b then do;
	     if nfsw then return;
	     call com_err_ (0, myname, "Vtocx ^o on pvtx ^o is free.", vtocx, pvtx);
	     return;
	end;

	pn = "";
	call vpn_cv_uid_path_$ent (addr (vtoce.uid_path), pn, vtoce.uid, code);
	if code ^= 0 then
	     call com_err_ (code, myname, "Cannot completely convert uid path");
	call ioa_ ("Pvtx ^o vtocx ^o = ^a", pvtx, vtocx, pn);
	return;
	%include vtoce;
	 %include disk_table;
     end;
