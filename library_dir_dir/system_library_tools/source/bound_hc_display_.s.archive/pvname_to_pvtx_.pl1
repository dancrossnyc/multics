/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


pvname_to_pvtx_: procedure (P_pvname, P_pvtx, P_pvid, P_code);

/* *	Subroutine to translate pvname arguments (as to storage system
   *	maintenance commands) to the correct PVTX and PVNAME for calling
   *	hardcore interfaces.
   *
   *	06/02/81, W. Olin Sibert
   *	03/20/82, J. Bongiovanni, for new PVTE
   */

dcl  P_pvtx fixed bin parameter;
dcl  P_pvname char (*) parameter;
dcl  P_pvid bit (36) aligned parameter;
dcl  P_code fixed bin (35) parameter;

dcl  code fixed bin (35);
dcl  pvname char (32);
dcl  pvtx fixed bin;
dcl  pvid bit (36) aligned;

dcl  error_table_$pvid_not_found fixed bin (35) external static;

dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin (18), fixed bin (35));
dcl  mdc_$find_volname entry (bit (36) aligned, char (*), char (*), fixed bin (35));
dcl  mdc_$pvname_info entry (char (*), bit (36) aligned, char (*), bit (36) aligned, fixed bin, fixed bin (35));

dcl (addr, ptr, rel, size) builtin;

/*  */

	pvname = P_pvname;

	call mdc_$pvname_info (pvname, pvid, (""), (""b), (0), P_code);
	if P_code ^= 0 then return;			/* can't do it -- probably bad volume */

	call lookup_pvid (pvid);

	P_code = code;
	P_pvid = pvid;
	P_pvtx = pvtx;

	return;

/*  */

pvname_to_pvtx_$pvid: entry (P_pvid, P_pvtx, P_pvname, P_code);

/* This entry converts a PVID to a PVTX and a PVNAME */

	pvid = P_pvid;

	call lookup_pvid (pvid);			/* Try to find it */

	if code = 0 then do;				/* Find out its name, too */
	     call mdc_$find_volname (pvid, pvname, (""), code);
	     P_pvname = pvname;
	     end;

	P_code = code;
	P_pvtx = pvtx;

	return;					/* done with pvid_to_pvtx entrypoint */

/*  */

lookup_pvid: procedure (P_pvid);

/* *	This procedure finds the pvts for the supplied pvid by peeking at the ring zero PVT */

dcl  P_pvid bit (36) aligned parameter;

dcl  already_initialized bit (1) aligned internal static init ("0"b);
dcl  r0_pvt_ptr pointer internal static init (null ());
dcl  1 pvt_header aligned like pvt;			/* temporary copy of PVT header */
	   

dcl 1 pvte_auto aligned like pvte automatic;		/* temporary copy of each PVTE */


	if ^already_initialized then do;
	     call ring0_get_$segptr ("", "pvt", r0_pvt_ptr, code);
	     if code ^= 0 then return;		/* Just return with an error */
	     end;

	call ring_zero_peek_ (r0_pvt_ptr, addr (pvt_header), size (pvt), code);
	if code ^= 0 then return;			/* With indicated error */
	pvt_arrayp = ptr (r0_pvt_ptr, rel (addr (r0_pvt_ptr -> pvt.array)));

	pvtep = addr (pvte_auto);
	do pvtx = 1 to addr (pvt_header) -> pvt.n_entries;
	     call ring_zero_peek_ (addr (pvt_arrayp -> pvt_array (pvtx)), pvtep, size (pvte), code);
	     if code ^= 0 then do;
		pvtx = -1;			/* Make sure it's not valid */
		return;				/* With indicated error */
		end;

	     if pvte.used then
		if pvte.storage_system then
		     if pvte.pvid = P_pvid then return;	/* found it */
	     end; 				/* of loop through pvtes */

	code = error_table_$pvid_not_found;		/* didn't find it */
	pvtx = -1;				/* Error indication */

	return;
	end lookup_pvid;

%page; %include pvt;
%page; %include pvte;

	end pvname_to_pvtx_;
