/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_kst_entry:
dke: proc;

/*

   Written 04/22/76 by Richard Bratt
   Fixed to compile properly, May 1981, W. Olin Sibert
   Modified to remove hdr, Keith Loepere, November 1984.

*/

dcl  ap ptr,
     al fixed bin,
     flags char (168) varying init (""),
     phcs_initiate bit (1) aligned init ("0"b),
     linkage_error condition,
     segno fixed bin (17),
     segptr ptr,
     terminate bit (1) aligned,
     dsegp ptr,
     arg char (al) based (ap),
     dname char (168),
     ename char (32),
     code fixed bin (35);
dcl  kst_copy_buffer (50) fixed bin;
dcl  p ptr;
dcl  sdw_copy_buffer (2) fixed bin;
dcl  s ptr;
dcl  error_table_$invalidsegno ext fixed bin (35);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
    (ioa_, com_err_) entry options (variable),
     cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
    (hcs_$terminate_noname, phcs_$terminate_noname) entry (ptr, fixed bin (35)),
    (hcs_$initiate, phcs_$initiate) entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35)),
     ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));

dcl (addr, baseno, binary, null, pointer, rel, size, unspec) builtin;

/*  */

	terminate = "0"b;
	p = addr (kst_copy_buffer);			/* Used to use init (addr (...)) */
	s = addr (sdw_copy_buffer);

	call cu_$arg_ptr (1, ap, al, code);
	if code ^= 0
	then do;
complain:	     call ioa_ ("USAGE: display_kst_entry <name>|<segno>");
	     return;
	end;
	segno = cv_oct_check_ (arg, code);
	if code ^= 0
	then do;
	     if arg = "-name" | arg = "-nm"
	     then do;
		call cu_$arg_ptr (2, ap, al, code);
		if code ^= 0 then go to complain;
	     end;
	     call expand_path_ (ap, al, addr (dname), addr (ename), code);
	     if code ^= 0 then call abort (code);
	     call hcs_$initiate (dname, ename, "", 0, 1, segptr, code);
	     if segptr = null ()
	     then do;
		on linkage_error call abort (code);
		call phcs_$initiate (dname, ename, "", 0, 1, segptr, code);
		revert linkage_error;
		phcs_initiate = "1"b;
	     end;
	     if segptr = null () then call abort (code);
	     terminate = "1"b;
	     segno = binary (baseno (segptr), 18);
	end;
	call ring0_get_$segptr ("", "kst_seg", kstp, code);
	call ring0_get_$segptr ("", "dseg", dsegp, code);
	call ring_zero_peek_ (kstp, p, 8, code);
	if code ^= 0 then call abort (code);
	if segno < p -> kst.lowseg | segno > p -> kst.highest_used_segno
	then call abort (error_table_$invalidsegno);
	kstep = ptr (kstp, bin (bin (rel (addr (p -> kst.kst_entry (segno))), 18) - bin (rel (p), 18), 18));
	call ring_zero_peek_ (kstep, p, size (kste), code);
	if code ^= 0 then call abort (code);
	call ring_zero_peek_ (addr (dsegp -> sdwa (segno)), s, size (sdw), code);
	if code ^= 0 then unspec (sdw_copy_buffer) = "0"b;

	call ioa_ ("^/segno:^-^o  at  ^p", segno, kstep);
	call ioa_ ("usage:^-^7(^d, ^)^d", p -> kste.usage_count);
	call ioa_ ("entryp:^-^p", p -> kste.entryp);
	call ioa_ ("uid:^-^w", p -> kste.uid);
	call ioa_ ("dtbm:^-^w", p -> kste.dtbm);
	call ioa_ ("mode:^-^o (^d, ^d, ^d)", bin (p -> kste.access, 3),
	     bin (s -> sdw.r1, 3), bin (s -> sdw.r2, 3), bin (s -> sdw.r3, 3));
	if p -> kste.extended_access = "0"b
	then call ioa_ ("ex mode:^-00000000000 (^d, ^d, ^d)",
	     bin (p -> kste.ex_rb (1), 3), bin (p -> kste.ex_rb (2), 3), bin (p -> kste.ex_rb (3), 3));
	else call ioa_ ("ex mode:^-^11o (^d, ^d, ^d)", bin (p -> kste.extended_access, 33),
	     bin (p -> kste.ex_rb (1), 3), bin (p -> kste.ex_rb (2), 3), bin (p -> kste.ex_rb (3), 3));
	if p -> kste.dirsw
	then call ioa_ ("infcount:^-^d", p -> kste.infcount);
	else call ioa_ ("lv index:^-^o", p -> kste.infcount);
	if p -> kste.dirsw then flags = flags || "dirsw ";
	if p -> kste.allow_write then flags = flags || "write ";
	if p -> kste.priv_init then flags = flags || "priv ";
	if p -> kste.tms then flags = flags || "tms ";
	if p -> kste.tus then flags = flags || "tus ";
	if p -> kste.tpd then flags = flags || "tpd ";
	if p -> kste.audit then flags = flags || "audit ";
	if p -> kste.explicit_deact_ok then flags = flags || "deactivate ";
	call ioa_ ("flags:^-^a", flags);
	if terminate
	then if phcs_initiate
	     then call phcs_$terminate_noname (segptr, code);
	     else call hcs_$terminate_noname (segptr, code);
	return;

abort:	proc (code);
dcl  code fixed bin (35);
	     call com_err_ (code, "display_kst_entry");
	     go to return_to_caller;
	end abort;

return_to_caller:
	return;

/*  */

% include kst;

/*  */

% include sdw;

     end display_kst_entry;
