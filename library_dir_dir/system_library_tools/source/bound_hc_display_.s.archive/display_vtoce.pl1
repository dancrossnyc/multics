/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

display_vtoce:
     procedure options (variable);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* dump_vtoce   Bernard Greenberg 4/21/76					*/
/*									*/
/* Modified:    Joe Stansbury 1/82						*/
/*          1) made "brief" the default behavior					*/
/*          2) fixed bug to allow dumping of ncd switch				*/
/*          3) implemented better error msg when pathname is given as an arg		*/
/*          4) allowed octal dumping by activation info, file map, and permanent info.	*/
/*									*/
/* Modified:     J. Bongiovanni, 9/82, synchronized switch, fm_damaged, fm_checksum_valid */
/* Modified:  2/10/83 by GA Texada to add access class to output.			*/
/* Modified:  2/22/83 by GA Texada to allow pathnames				*/
/* Modified:  84-01-21 by BIM. Flush octal printing, save with -dump.
   Display devadds in useful (if more verbose) format.
   add -he/-nhe -fm/-nfm -octal/-no_octal
   add -long as for obscure stuff.
   -octal just dumps the whole thing in dump_segment format. */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/* EXTERNAL ENTRIES */
	dcl     com_err_		 entry () options (variable);
	dcl     com_err_$suppress_name entry () options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cv_oct_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     date_time_$format	 entry (character (*), fixed binary (71), character (*), character (*))
				 returns (character (250) var);
	dcl     dump_segment_	 entry (pointer, pointer, fixed binary, fixed binary (18), fixed binary (18),
				 bit (*));
	dcl     get_temp_segments_	 entry (char (*), (*) ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     mdc_$read_disk_table	 entry (ptr, fixed bin (35));
	dcl     mdc_$find_volname	 entry (bit (36) aligned, char (*), char (*), fixed bin (35));

	dcl     phcs_$get_vtoce	 entry (fixed bin, fixed bin, ptr, fixed bin (35));
	dcl     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
	dcl     requote_string_	 entry (char (*)) returns (char (*));
	dcl     vpn_cv_uid_path_$ent	 entry (ptr, char (*), bit (36) aligned, fixed bin (35));

/* BASED */
	dcl     arg		 char (argl) based (argp);

/* BUILTIN */
	dcl     (addr, divide, fixed, index, lbound, length, hbound, null, reverse, substr, unspec, verify, addwordno, bin, byte, copy, decimal, rtrim, string)
				 builtin;

/* AUTOMATIC */
	dcl     Nargs		 fixed bin;
	dcl     argl		 fixed bin;
	dcl     argp		 ptr;
	dcl     code		 fixed bin (35);
	dcl     fx		 fixed bin;
	dcl     free		 bit (1);		/* is it a free VTOCE? */
	dcl     (i, non_ctl_args)	 fixed bin;
	dcl     (file_map_sw, header_sw, octal_sw, long_sw)
				 bit (1) aligned;
	dcl     last_fme		 bit (18);
	dcl     skipping		 bit (1) aligned;
	dcl     args		 (2) char (168);
	dcl     pname		 char (168);
	dcl     pvname		 char (24);
	dcl     lvname		 char (32);
	dcl     pvtx		 fixed bin;
	dcl     q			 (1) ptr init (null ());
	dcl     sname		 char (32);
	dcl     vtocx		 fixed bin;
	dcl     vpn		 char (168);

/* STATIC */
	dcl     goodstuff		 char (182) varying
				 init (
				 "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.!""#$%&'()=-^~|\{}[]_/?.,<>:*;+@` "
				 ) static internal options (constant);
	dcl     myname		 char (32) int static options (constant) init ("display_vtoce");
	dcl     error_table_$pvid_not_found
				 fixed bin (35) ext static;
	dcl     error_table_$bad_conversion
				 fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$wrong_no_of_args
				 fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr ext static;

/* STRUCTURES */
	dcl     1 local_vtoce	 like vtoce aligned;

/* CONDITIONS */
	dcl     cleanup		 condition;




	free = "0"b;
	header_sw = "1"b;
	long_sw, octal_sw, file_map_sw = "0"b;
	pname, pvname = "";
	non_ctl_args, vtocx, pvtx = 0;
	call cu_$arg_count (Nargs, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname);
		return;
	     end;
	if Nargs < 1
	then
USAGE:
	     do;
		call com_err_$suppress_name (0, myname,
		     "Usage: display_vtoce {Pathname|pvname vtocx(octal)} -he/-nhe -fm/-nfm -octal/-no_octal");
		return;
	     end;

	do i = 1 to Nargs;
	     call cu_$arg_ptr (i, argp, argl, (0));
	     if arg = "-long" | arg = "-lg"
	     then header_sw, long_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf"
	     then do;
		     header_sw = "1"b;
		     long_sw = "0"b;
		end;
	     else if arg = "-octal" | arg = "-oc"
	     then octal_sw = "1"b;
	     else if arg = "-no_octal" | arg = "-noc"
	     then octal_sw = "0"b;
	     else if arg = "-file_map" | arg = "-fm"
	     then file_map_sw = "1"b;
	     else if arg = "-no_file_map" | arg = "-nfm"
	     then file_map_sw = "0"b;
	     else if arg = "-header" | arg = "-he"
	     then header_sw = "1"b;
	     else if arg = "-no_header" | arg = "-nhe"
	     then header_sw = "0"b;
	     else if index (arg, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, myname, "^a", arg);
		     return;
		end;
	     else do;
		     non_ctl_args = non_ctl_args + 1;	/* count these to prevent ambiguity		*/
		     if non_ctl_args > 2
		     then do;
			     code = error_table_$wrong_no_of_args;
			     goto USAGE;
			end;
		     args (non_ctl_args) = arg;
		end;
	end;
	if non_ctl_args = 1
	then do;					/* MUST be a pathname			*/
		pname = args (1);			/* path given, we need to determine everything	*/
		call get_vtocx (pname, vtocx, pvname, code);
						/* get the vtocx and pvname			*/
		if code ^= 0
		then return;			/* errors already given			*/
		call get_pvtx ((pvname));		/* use pvname from above to get pvtx		*/
		if code ^= 0
		then return;
	     end;

	else do;					/* if we have 2 non-ctl args			*/
		pvtx = cv_oct_check_ (args (1), code);	/* it's either a pvtx (in octal)		*/
		if code ^= 0
		then do;
			call get_pvtx (args (1));	/* or a pvname				*/
			if code ^= 0
			then return;
		     end;
		else do;				/* now, got a pvtx, get pvname		*/
			call get_pvname (pvtx, code);
			if code ^= 0
			then return;
		     end;

		vtocx = cv_oct_check_ (args (2), code); /* with either a pvtx or pvname need this	*/
		if code ^= 0
		then do;
			call com_err_ (error_table_$bad_conversion, myname,
			     "Invalid vtocx: ^a. Vtocx must be given in octal.", args (2));
			return;
		     end;
	     end;


	vtocep = addr (local_vtoce);			/* set up for get_vtoce */
	call phcs_$get_vtoce (pvtx, vtocx, vtocep, code); /* get it */
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting vtoce ^o on pvtx ^o.", vtocx, pvtx);
		return;
	     end;

/* Get reasonable printing of name */

	if vtoce.uid = ""b				/* FREE */
	then do;
		free = "1"b;
		sname = "in a free state";
	     end;
	else do;
		if verify (vtoce.primary_name, goodstuff) = 0
		then sname = requote_string_ (rtrim (vtoce.primary_name));
		else begin;
			declare pname_bits		 (32) bit (9) unaligned;
			unspec (pname_bits) = unspec (vtoce.primary_name);
			sname = "";
			call ioa_$rsnnl ("nonASCII name ^(^.3b^)", sname, (0), pname_bits);
		     end;
	     end;

	call ioa_ ("^/VTOCE ^a ^[(Directory)^], vtocx ^o on pvtx ^o (^a)^/", sname, vtoce.dirsw, vtocx, pvtx,
	     pvname);


	if header_sw & ^free
	then do;
		call ioa_ ("UID: ^w, msl: ^3d, csl: ^3d, records: ^3d", vtoce.uid, fixed (vtoce.msl, 9),
		     fixed (vtoce.csl, 9), fixed (vtoce.records, 9));
		if vtoce.dirsw
		then do;
			if vtoce.quota (0) ^= 0 | vtoce.quota (1) ^= 0
			then call ioa_ ("     Quota (S D)^30t(^6d ^6d)", vtoce.quota (0), vtoce.quota (1));
			if vtoce.used (0) ^= 0 | vtoce.used (1) ^= 0
			then call ioa_ ("     Quota used (S D)^30t(^6d ^6d)", vtoce.used (0), vtoce.used (1));
			if vtoce.received (0) ^= 0 | vtoce.received (1) ^= 0
			then call ioa_ ("     Quota received (S D)^30t(^6d ^6d)", vtoce.received (0),
				vtoce.received (1));
			if vtoce.trp (0) ^= 0
			then do;
				call ioa_ (
				     "     Time-record product (S) ^6e page-seconds^/          updated at ^a.",
				     divide (decimal (vtoce.trp (0), 30), 1000000, 30, 6),
				     fs_date_time (vtoce.trp_time (0)));
			     end;
			if vtoce.trp (1) ^= 0
			then do;
				call ioa_ (
				     "     Time-record product (D) ^6e page-seconds^/          updated at ^a.",
				     divide (decimal (vtoce.trp (1), 30), 1000000, 30, 6),
				     fs_date_time (vtoce.trp_time (1)));
			     end;

		     end;
		else call ioa_ ("Usage count = ^d", seg_vtoce.usage);
		call ioa_ ("Created ^12t^a", fs_date_time (vtoce.time_created));
		if vtoce.dtd
		then call ioa_ ("Dumped ^12t^a", fs_date_time (vtoce.dtd));
		else call ioa_ ("Never dumped");
		if vtoce.dtu
		then call ioa_ ("Used ^12t^a", fs_date_time (vtoce.dtu));
		else call ioa_ ("Never used");
		if vtoce.dtm
		then call ioa_ ("Modified ^12t^a", fs_date_time (vtoce.dtm));
		else call ioa_ ("Never modified");
		call flag$$init;
		call flag (vtoce.deciduous, "deciduous");
		call flag (vtoce.per_process, "per_process");
		call flag (vtoce.nqsw, "nqsw");
		call flag (vtoce.master_dir, "master_dir");
		call flag (vtoce.nid, "nid");
		call flag (vtoce.ncd, "ncd");
		call flag (vtoce.dnzp, "dnzp");
		call flag (vtoce.damaged, "damaged");
		call flag (vtoce.synchronized, "synchronized");
		call flag (vtoce.fm_damaged, "fm_damaged");
		call flag (vtoce.fm_checksum_valid, "fm_checksum_valid");
		call flag$$display;
		call get_access_class (vtoce.access_class, code);
		if code ^= 0
		then call ioa_ ("Unable to convert access class information.");
	     end;

	if long_sw
	then do;
		call vpn_cv_uid_path_$ent (addr (vtoce.uid_path), vpn, (vtoce.uid), code);
		if code = 0
		then call ioa_ ("UID path: ^a", vpn);
		else call com_err_$suppress_name (code, myname, "UID path ^(^w^).", vtoce.uid_path);
		call mdc_$find_volname ((vtoce.par_pvid), pvname, lvname, code);
		if code = 0
		then call ioa_ ("Parent vtocx ^o of ^a of LV ^a", vtoce.par_vtocx, pvname, lvname);
		else call com_err_$suppress_name (code, myname, "Parent vtocx ^0 of pvid ^w.", vtoce.par_vtocx,
			vtoce.par_pvid);
		if vtoce.cn_salv_time
		then call ioa_ ("Check-vtoce salvage at ^a.", fs_date_time ((vtoce.cn_salv_time)));
		if vtoce.volid (1)
		then call VOLID (vtoce.volid (1), "incremental");
		if vtoce.volid (2)
		then call VOLID (vtoce.volid (2), "consolidated");
		if vtoce.volid (3)
		then call VOLID (vtoce.volid (3), "complete");
	     end;
	if file_map_sw
	then do;

		last_fme = ""b;			/* unlikely */
		skipping = "0"b;
		call ioa_ ("File map:");
		do fx = 0 to hbound (vtoce.fm, 1);
		     if vtoce.fm (fx) = last_fme & fx < hbound (vtoce.fm, 1)
		     then skipping = "1"b;		/* skip it */
		     else if skipping
		     then do;
			     skipping = "0"b;
			     call ioa_ (" ======");
			end;

		     if ^skipping | fx = hbound (vtoce.fm, 1)
		     then do;
			     last_fme = vtoce.fm (fx);
			     call ioa_$nnl ("^3d ", fx);
			     if vtoce.fm (fx) = create_vtoce_null_addr
			     then call ioa_ ("Null address from create_vtoce");
			     else if vtoce.fm (fx) = update_vtoce_null_addr
			     then call ioa_ ("Null address from update_vtoce");
			     else if vtoce.fm (fx) = truncate_vtoce_null_addr
			     then call ioa_ ("Null address from truncate_vtoce");
			     else if vtoce.fm (fx) = truncate_vtoce_fill_null_addr
			     then call ioa_ ("Null address from truncate_vtoce_fill_vtoce");
			     else if vtoce.fm (fx) = pv_salv_null_addr
			     then call ioa_ ("Null address from pv_salv");
			     else if vtoce.fm (fx) = pv_scav_null_addr
			     then call ioa_ ("Null address from pv_scav");
			     else if vtoce.fm (fx) = volume_reloader_null_addr
			     then call ioa_ ("Null address from volume_reloader");
			     else if vtoce.fm (fx) = salv_truncate_null_addr
			     then call ioa_ ("Null address from salv_truncate");
			     else if substr (vtoce.fm (fx), 1, 1)
			     then call ioa_ ("^a", page_control_null_address (vtoce.fm (fx)));
			     else call ioa_ ("Record ^6o", vtoce.fm (fx));
			end;
		end;
	     end;

	if octal_sw
	then do;
		call ioa_ ("Octal dump:^/");
		call ioa_ (" Part 1:");
		call dump_segment_ (iox_$user_output, addr (local_vtoce), -1, 0, 64, "01000"b);
		call ioa_ ("^/Part 2:");
		call dump_segment_ (iox_$user_output, addwordno (addr (local_vtoce), 64), -1, 0, 64, "01000"b);
		call ioa_ ("^/Part 3:");
		call dump_segment_ (iox_$user_output, addwordno (addr (local_vtoce), 128), -1, 0, 64, "01000"b);
	     end;

	return;
%page;

fs_date_time:
     procedure (dt) returns (char (30));

	declare dt		 bit (36);
	declare 1 clock_		 aligned like clock_value;
	declare time		 fixed bin (71);
	declare sub_error_             condition;

	clock_ = ""b;
	clock_.fs_time = dt;
	unspec (time) = string (clock_);
	go to COMMON;

date_time:
     entry (full_clock) returns (char (30));

	declare full_clock		 fixed bin (71);

	unspec (time) = unspec (full_clock);

COMMON:
	if time = 0
	then
ZERO:
	     return ("ZERO");

	on sub_error_ go to ZERO;
	return (date_time_$format ("iso_long_date_time", time, "", ""));
     end fs_date_time;

get_pvtx:
     proc (in_pvname);

	dcl     in_pvname		 char (*);

	on cleanup call release_temp_segments_ (myname, q, (0));
	call get_temp_segments_ (myname, q, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting temp disk table.");
		return;
	     end;
	dtp = q (1);				/* set up pointer for disk table */
	call mdc_$read_disk_table (dtp, code);		/* get it */
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting disk table.");
		call release_temp_segments_ (myname, q, (0));
		return;
	     end;
	do pvtx = 1 to dt.n_entries;			/* look for given PV */
	     dtep = addr (dt.array (pvtx));		/* set pointer just in case, */
	     if dte.used & dte.storage_system & dte.pvname = in_pvname
	     then go to got_pvtx;			/* found it, continue. */
	end;
	code = error_table_$pvid_not_found;
	call com_err_ (code, myname, "^a", in_pvname);
	call release_temp_segments_ (myname, q, (0));
	return;

got_pvtx:
	pvname = dte.pvname;
	call release_temp_segments_ (myname, q, (0));
     end get_pvtx;

get_pvname:
     proc (in_pvtx, ec);

	dcl     in_pvtx		 fixed bin,
	        ec		 fixed bin (35);

	on cleanup call release_temp_segments_ (myname, q, (0));
	call get_temp_segments_ (myname, q, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, myname, "Getting temp disk table.");
		return;
	     end;
	dtp = q (1);				/* set up pointer for disk table */
	call mdc_$read_disk_table (dtp, ec);		/* get it */
	if ec ^= 0
	then do;
		call com_err_ (ec, myname, "Getting disk table.");
		call release_temp_segments_ (myname, q, (0));
		return;
	     end;
	if (in_pvtx <= hbound (dt.array, 1) & in_pvtx >= lbound (dt.array, 1))
	then ;					/* check bounds to be sure			*/
	else goto no_pvtx;				/* out-of-bounds pvtx			*/
	dtep = addr (dt.array (in_pvtx));		/* set pointer just in case, */
	if dte.used & dte.storage_system
	then pvname = dte.pvname;
	else do;
no_pvtx:
		ec = error_table_$pvid_not_found;
		call com_err_ (ec, myname, "Pvtx = ^d", in_pvtx);
	     end;
	call release_temp_segments_ (myname, q, (0));
	return;

     end get_pvname;

get_vtocx:
     proc (pin, vtocxo, pvname, ec);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This procedure was cribbed from display_branch in its entirety. Very minor changes	*/
/* have been made to fit it in here.						*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	dcl     pin		 char (*),
	        pvname		 char (*),
	        vtocxo		 fixed bin,
	        ec		 fixed bin (35),
	        LINK		 bit (18) unal init ("000000000000000101"b) int static options (constant),
	        (adir, pdir)	 char (168),
	        (ent, pent)		 char (32),
	        (verify, null, addr, ptr, baseno, fixed, size, length, rel, reverse, substr)
				 builtin,
	        q			 ptr,
	        error_table_$noentry	 fixed bin (35) ext,
	        ring0_get_$segptr	 entry (char (*), char (*), ptr, fixed bin (35)),
	        (rzdp, rzdsp)	 ptr,
	        1 tsdw		 like sdw aligned,
	        lvname		 char (32),
	        ppname		 char (168),
	        epname		 char (168),
	        (dirsegno, failct)	 fixed bin,
	        hash_index_		 entry (ptr, fixed bin, fixed bin, fixed bin) returns (fixed bin),
	        dirlen		 fixed bin (17),
	        hsi		 fixed bin,
	        phcs_$initiate	 entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35)),
	        phcs_$terminate_noname entry (ptr, fixed bin (35)),
	        phcs_$ring_0_peek	 entry (ptr, ptr, fixed bin),
	        expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)),
	        get_temp_segment_	 entry (char (*), ptr, fixed bin (35)),
	        release_temp_segment_	 entry (char (*), ptr, fixed bin (35)),
	        (cleanup, out_of_bounds)
				 condition;

%include sdw;

%include dir_header;
%include dir_ht;

%include dir_entry;

%include dir_link;

%include dir_name;

	rzdsp, q = null ();
	ec = 0;
	call ring0_get_$segptr ("", "dseg", rzdsp, ec);
	if ec ^= 0
	then do;
		call com_err_ (0, myname, "Cannot get dseg ptr");
		return;
	     end;
got_ent:
	call expand_pathname_ (pin, adir, ent, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, myname, pin);
		goto RETURN;
	     end;

	if adir = ">"
	then if ent = ""
	     then do;
		     pvname = "rpv";
		     vtocxo = 0;
		     goto RETURN;
		end;

	call expand_pathname_ (adir, pdir, pent, (0));	/* Cannot fail */
	if pdir = ">"
	then ppname = ">" || pent;
	else ppname = substr (pdir, 1, trim (pdir)) || ">" || pent;

	if pent = ""
	then epname = ">" || ent;
	else epname = substr (adir, 1, trim (adir)) || ">" || ent;


	on cleanup goto RETURN;

	call get_temp_segment_ (myname, q, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, myname, "Getting temp segment.");
		goto RETURN;
	     end;

	dp = q;
	call phcs_$initiate (pdir, pent, "", 0, 0, rzdp, ec);
	if rzdp = null
	then do;
		call com_err_ (ec, myname, ppname);
		goto RETURN;
	     end;

	dirsegno = fixed (baseno (rzdp), 18);
	call phcs_$ring_0_peek (rzdp, dp, 1);		/* Cause fault */
	failct = 0;
ftsdw:
	call phcs_$ring_0_peek (addr (rzdsp -> sdwa (dirsegno)), addr (tsdw), 2);
	if tsdw.bound = "0"b
	then go to ftsdw;
	dirlen = fixed (tsdw.bound, 15) * 16 + 16;

	on out_of_bounds go to refetch_dir;
refetch_dir:
	failct = failct + 1;
	if failct > 10
	then do;
		call com_err_ (0, myname, "Cannot get consistent copy of ^a after 10 tries", ppname);
		goto RETURN;
	     end;

	call m_a (dp, size (dir));
	hsi = hash_index_ (addr (ent), trim (ent), 0, (dir.htsize));
	htp = ptr (dp, dp -> dir.hash_table_rp);
	call m_a (htp, (dir.htsize));

	do np = ptr (dp, htp -> hash_table.name_rp (hsi)) repeat ptr (dp, np -> names.hash_thread) while (rel (np));
	     call m_a (np, size (names));
	     if fixed (rel (np), 18) >= dirlen
	     then go to refetch_dir;
	     if np -> names.ht_index ^= hsi
	     then go to refetch_dir;
	     if ent = np -> names.name
	     then do;

		     ep = ptr (dp, np -> names.entry_rp);
		     call m_a (ep, size (entry));
		     if entry.type = LINK
		     then do;
			     pin = link.pathname;
			     call release_temp_segment_ (myname, q, (0));
			     call phcs_$terminate_noname (rzdp, (0));
			     goto got_ent;
			end;
		     vtocxo = entry.vtocx;
		     call mdc_$find_volname ((entry.pvid), pvname, lvname, ec);
		     if ec ^= 0
		     then do;
			     call com_err_ (ec, myname, "^/ Cannot determine vol name for pvid ^w", entry.pvid);
			     lvname, pvname = "-NOT-CLEAR-";
			end;
		     goto RETURN;
		end;
	end;					/* Name not found.  Cleanup and return. */
	call com_err_ (error_table_$noentry, myname, epname);
RETURN:
	if q ^= null ()
	then call release_temp_segment_ (myname, q, (0));
	if rzdp ^= null ()
	then call phcs_$terminate_noname (rzdp, (0));
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


trim:
     proc (ch) returns (fixed bin);
	dcl     ch		 char (*);
	dcl     x			 fixed bin;
	x = verify (reverse (ch), " ");
	if x ^= 0
	then x = length (ch) - x + 1;
	return (x);
     end trim;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


m_a:
     proc (cp, sz);

/* This proc is needed to avoid copying a whole directory out,
   which can, and did one May morning in Phoenix, withdraw a large number
   of pages against the RLV. Writers of similar programs beware. */

	dcl     (cp, rgp)		 ptr,
	        sz		 fixed bin;

	rgp = ptr (rzdp, rel (cp));
	call phcs_$ring_0_peek (rgp, cp, sz);
     end m_a;

     end get_vtocx;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

get_access_class:
     proc (access_class, code);

	dcl     access_class	 bit (72) aligned,
	        (class, temp_string)	 char (336),
	        (class_len, k, kk)	 fixed bin,
	        short_class		 char (32),
	        first		 bit (1),
	        code		 fixed bin (35);
	dcl     convert_authorization_$to_string_short
				 entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     convert_aim_attributes_
				 entry (bit (72) aligned, char (32));

	code = 0;

	call convert_authorization_$to_string_short (access_class, class, code);
	if code ^= 0
	then do;
		call convert_aim_attributes_ (access_class, short_class);
		class = rtrim (short_class) || " (invalid)";
	     end;
	if class = ""
	then call ioa_ ("Access Class:  system_low");
	else do;					/* format access class in lines of 50 chars */
		class_len = index (class, " ") - 1;
		if class_len = -1
		then class_len = 336;
		k = 1;
		first = "1"b;
		do while ((class_len - k + 1) > 50);
		     temp_string = substr (class, k, 50);
		     kk = length (temp_string) + 1 - index (reverse (temp_string), ",");
		     call ioa_ ("^[Access Class:^;             ^]  ^a", (first), substr (class, k, kk));
		     first = "0"b;
		     k = k + kk;
		end;
		call ioa_ ("^[Access Class:  ^;               ^]^a", (first), substr (class, k));
	     end;
     end get_access_class;

VOLID:
     procedure (encoded_volid, type);
	declare encoded_volid	 bit (36);
	declare type		 char (*);

	declare 1 volid		 unaligned,
		2 name		 char (2),
		2 number		 fixed bin (18) unsigned;

	unspec (volid) = encoded_volid;
	call ioa_ ("Last ^a volume dumped on volume ^a^d", type, volid.name, volid.number);
	return;
     end VOLID;

page_control_null_address:
     procedure (fme) returns (char (80) varying);

	declare fme		 bit (18) unaligned;

	declare 1 null_address	 unaligned,
		2 seven_7_7_0	 bit (12) unaligned,/* or 377 */
		2 key		 bit (6);

	declare kx		 fixed bin;
	declare cv_bin_$oct		 entry (fixed binary (18) uns) returns (character (12) aligned);

	string (null_address) = fme;

	kx = bin (null_address.key, 6);
	if kx < lbound (NULLS, 1) | kx > hbound (NULLS, 1)
	then return ("Undocumented null address " || rtrim (cv_bin_$oct (bin (fme))));
	else return ("Page control null address from " || rtrim (NULLS (kx)));

	declare NULLS		 (0:58) char (60) int static options (constant) varying init ("zeros",
						/* 0 */
				 (6) (1)"invalid source",
						/* 1 -> 6 */
				 "pc$move_page_table_1",
						/* 7 */
				 "pc$move_page_table_2",
						/* 10 */
				 "get_aste",	/* 11 */
				 "make_sdw",	/* 12 */
				 "put_aste",	/* 13 */
				 (2) (1)"invalid source",
						/* 15 */
				 "list_deposit",	/* 16 */
				 "get_file_map",	/* 17 */
				 "fill_page_table", /* 20 */
				 "init_sst",	/* 21 */
				 "get_file_map_vt", /* 22 */
				 "unprotected",	/* 23 */
				 "page_bad",	/* 24 */
				 "page_problem",	/* 25 */
				 "page_parity",	/* 26 */
				 "page_devparity",	/* 27 */
				 (34) (1)"invalid source",
						/* 28 - 53 */
				 "get_file_map_dumper" /* 72, sort of */);
     end page_control_null_address;

	declare flags		 (0:1) char (1000) varying;
						/* off, on */
	declare line_used		 (0:1) fixed bin;	/* line length used up on cur line */
	declare line_length		 fixed bin;

flag$$init:
     procedure;

	declare get_line_length_$switch
				 entry (pointer, fixed binary (35)) returns (fixed binary);
	declare iox_$user_output	 ptr ext static;

	line_length = get_line_length_$switch (iox_$user_output, code);
	if code ^= 0
	then line_length = 72;
	flags (0) = "OFF:      ";
	flags (1) = "ON:       ";
	line_used (*) = 10;				/* always prepend space */
	return;

flag:
     entry (flag_bit, flag_name);

	declare flag_bit		 bit (1) unaligned;
	declare flag_name		 char (*);

	declare flag_bin		 fixed bin (1);

	flag_bin = bin (flag_bit, 1);
	if line_used (flag_bin) + length (flag_name) + 1 > line_length
	then do;
		flags (flag_bin) = flags (flag_bin) || byte (10) || copy (" ", 10);
						/* NL */
		line_used (flag_bin) = 10;
	     end;
	flags (flag_bin) = flags (flag_bin) || " " || flag_name;
						/* assume trimmed */
	line_used (flag_bin) = line_used (flag_bin) + 1 + length (flag_name);
	return;

flag$$display:
     entry;

	call ioa_ ("^/^a^/^a^/", flags (1), flags (0));
	return;
     end flag$$init;


%page;
%include vtoce;
%page;
%include disk_table;
%include null_addresses;
%include system_clock_value_;
     end display_vtoce;
