/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
as_meter_: proc (a_tcpu, a_tidle, a_uidle, a_respons, a_wspage, a_thrash, a_avelig, a_avquln);


/* AS_METER_ - procedure to obtain system metering figures for answering service.

   This program copies the header of the SST and the header of TC_DATA
   from ring 0 and derives some useful figures from the data.

   It also reads the configuration deck and sets data about the configuration
   into a special data base.

   It also contains entry points used for metering answering srvice resource usage: asmt_(init enter exit exit_values).
*/

/* * 	Modification history:
   *	71-02-15, THVV: Based on the "tcm" command by Webber
   *	77-04-12, THVV: Modified to use ring 0 defs and to flush core and AST
   *	77-08-21, B. Greenberg: Modified for syserr log scan.
   *	80-03-02, Tom Casey: Modified to add metering of answering
   *	   service resource usage.
   *	80-11-10, Richard Lamson: Modified to fix untimely death of
   *	   core flush mechanism
   *	81-01-10, E. N. Kittlitz: Modified to only count ON CPUs as ON.
   *	81-02-21, J. Bongiovanni: Modified for system virtual time
   *	81-06-05, T. Casey: Modified for MR9.0 to meter the cost of
   *	   doing the answering service metering.
   *	81-07-23, T. Casey: Modified for MR9.0 to fix bug in handling
   *	   of recursive entries.
   *	81-08-17, T. Casey: Modified for AS11.6, MR9.0, to change
   *	   switches in asmt from bit to fixed bin.
   *	81-11-20, E. N. Kittlitz: Modified for user_table_entry conversion.
   *	82-05-01, E. N. Kittlitz: Modified for new AS initialization.
   *	83-06-08, E. N. Kittlitz: Modified to use config_.
   *	84-01-20, BIM: Removed PML support.
   *	84-10-18, Allen Ball: Modified to reflect in syserr messages
   *	   that there is no more `FDUMP`s.
   *	84-11-11, W. Olin Sibert: Moved syserr log segment damage scan
   *	   mechanism to syserr_log_man_
*/

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
  3) change(87-07-23,Brunelle), approve(87-07-23,MCR7741),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Changed to use sys_log_constants constants on sys_log_ calls.
                                                   END HISTORY COMMENTS */

/* DECLARATIONS */

/* Parameters */

dcl  a_tcpu fixed bin (71);				/* total cpu time available */
dcl  a_tidle fixed bin (71);				/* total idle time */
dcl  a_uidle fixed bin (71);				/* "usable" idle (exclude mp idle) */
dcl  a_respons float bin;				/* estimated response in secs */
dcl  a_wspage fixed bin;				/* number of working-set pages */
dcl  a_thrash float bin;
dcl  a_avelig float bin;
dcl  a_avquln float bin;				/* average queue lth */
dcl  slot_no fixed bin;
dcl  a_pf fixed bin;
dcl  a_vcpu fixed bin (71);
dcl  a_rt fixed bin (71);

/* Automatic */

/* binary */
dcl  damage_count fixed bin (35);
dcl  delta_pf fixed bin (34);
dcl  delta_real_time fixed bin (71);
dcl  delta_vcpu fixed bin (71);
dcl  dump_lth fixed bin;
dcl  ec fixed bin (35);
dcl  i fixed bin;
dcl  now fixed bin (71);
dcl  pf fixed bin;
dcl  sst_buffer (512) fixed bin;
dcl  steps fixed bin (35);
dcl  vcpu fixed bin (71);
dcl  (factor, pre_calls, post_calls, temp) float bin;

/* bit */
dcl  return_values bit (1) aligned;
dcl  (dump_valid, dump_valid_355) bit (1);

/* char */
dcl  crashid char (8) aligned;
dcl  dtstr char (16);
dcl  me char (12);
dcl  (dump_ename, dump_ename_355) char (32) aligned;
dcl  err_msg char (256);

/* ptr */
dcl  asmtep ptr init (null);
dcl  sstp3 ptr;
dcl  (sstp2, tcdp2) ptr;


/* Based */

dcl  asteps (0:3) fixed bin (35) based aligned;
dcl  double fixed bin (71) based aligned;
dcl  1 level (0:3) based aligned,
       2 (ausedp, no_aste) fixed bin (17) unal;
dcl  scaled fixed bin (35, 18) based aligned;
dcl  single fixed bin (35) based aligned;
dcl  words128 (128) fixed bin based;

/* Builtin */

dcl  (addr, addrel, clock, divide, hbound, length, null, ptr, substr) builtin;


/* Entries */

dcl  as_dump_ entry (char (*));
dcl  config_$find entry (char (4) aligned, ptr);
dcl  cpu_time_and_paging_ entry (fixed bin, fixed bin (71), fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  get_wdir_ entry returns (char (168) aligned);
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hphcs_$flush_ast_pool entry (fixed bin);
dcl  hphcs_$flush_core entry ();
dcl  hphcs_$get_fdump_num entry (fixed bin, bit (1), char (32) aligned, bit (1), char (32) aligned, fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);		/* ctl_str,ret_str,ret_len,...other args ... */
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  phcs_$ring_0_peek entry (ptr, ptr, fixed bin);
dcl  ring0_get_$definition entry (ptr, char (*), char (*), fixed bin (18), fixed bin, fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  sub_err_ entry () options (variable);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  syserr_log_man_$as_copy_log entry ();
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));

/* External static */

dcl  error_table_$out_of_sequence fixed bin (35) ext static;
dcl  sys_info$max_seg_size fixed bin (35) ext;

/* Internal static */

/* binary - SST and TCM offsets */

dcl  SSTasteps_loc fixed bin (18) static init (0);
dcl  SSTdamage_ct_loc fixed bin (18) static init (0);
dcl  SSTlevel_loc fixed bin (18) static init (0);
dcl  SSTnused_loc fixed bin (18) static init (0);
dcl  SSTpost_purge_calls_loc fixed bin (18) static init (0);
dcl  SSTpre_page_calls_loc fixed bin (18) static init (0);
dcl  SSTpre_page_size_loc fixed bin (18) static init (0);
dcl  SSTthrashing_loc fixed bin (18) static init (0);
dcl  TCMave_eligible_loc fixed bin (18) static init (0);
dcl  TCMavequeue_loc fixed bin (18) static init (0);
dcl  TCMdelta_vcpu_loc fixed bin (18) static init (0);
dcl  TCMidle_loc fixed bin (18) static init (0);
dcl  TCMprocessor_time_loc fixed bin (18) static init (0);
dcl  TCMresponse_count_loc fixed bin (18) static init (0);
dcl  TCMresponse_time_loc fixed bin (18) static init (0);
dcl  TCMsystem_virtual_time_loc fixed bin (18) static init (0);
dcl  TCMworking_set_addend_loc fixed bin (18) static init (0);
dcl  TCMworking_set_factor_loc fixed bin (18) static init (0);
dcl  TCMzero_idle_loc fixed bin (18) static init (0);

/* binary - other */
dcl  MILLION fixed bin (21) static options (constant) init (1000000);
dcl  MAX fixed bin int static init (1);			/* Maximum number of entries. */
dcl  OFFSET fixed bin (71) static options (constant) init (300000000); /* 5 mins */
dcl  core_flush_channel fixed bin (71) static;
dcl  core_flush_time fixed bin (71) static;		/* relative seconds */
dcl  disable_metering bit (1) aligned int static init ("1"b);
dcl  old_ast_steps (0:3) fixed bin (35) static init ((4) 0);
dcl  old_damage_count fixed bin (35) static;
dcl  (ncpu, nmem) fixed bin static;

/* bit */
dcl  asmt_initialized bit (1) aligned int static init (""b);
dcl  debug_sw bit (1) aligned int static init (""b);	/* take asdump on asmt errors, if on */

/* ptr */
dcl  statp ptr int static init (null);			/* pointer to data segment */
dcl  tcdp ptr int static;
dcl  xsstp ptr int static;


/* INCLUDE FILES are at the end, after all the code, but before the message documentation. */

/* MAIN ENTRY POINT as_meter_: proc (eight arguments - see first page) */

	a_tcpu, a_tidle, a_uidle = 0;
	a_respons, a_thrash, a_avelig, a_avquln = 0e0;
	a_wspage = 0;
	if disable_metering then return;

	statistics.index = statistics.index + 1;
	if statistics.index > MAX then do;
	     statistics.index = 1;
	     statistics.wrapped = statistics.wrapped + 1;
	end;

	tcdp2 = addr (statistics.tcdata_contents (statistics.index, 1));
	sstp2 = addr (statistics.sst_contents (statistics.index, 1));
	sstp3 = addr (sst_buffer);

	call phcs_$ring_0_peek (xsstp, sstp3, 512);
	sstp2 -> words128 = sstp3 -> words128;
	call phcs_$ring_0_peek (tcdp, tcdp2, 256);

	a_tcpu = addrel (tcdp2, TCMprocessor_time_loc) -> double - addrel (tcdp2, TCMdelta_vcpu_loc) -> double;
	a_tidle = addrel (tcdp2, TCMidle_loc) -> double;
	a_uidle = addrel (tcdp2, TCMzero_idle_loc) -> double;

	factor = addrel (tcdp2, TCMworking_set_factor_loc) -> scaled;
	pre_calls = addrel (sstp3, SSTpre_page_calls_loc) -> single;
	temp = addrel (sstp3, SSTpre_page_size_loc) -> single;
	if factor = 0e0 then a_wspage = 0;
	else a_wspage = temp / factor - pre_calls * addrel (tcdp2, TCMworking_set_addend_loc) -> single;
	temp = addrel (sstp3, SSTthrashing_loc) -> single;
	post_calls = addrel (sstp3, SSTpost_purge_calls_loc) -> single;
	if post_calls = 0e0 then a_thrash = 0e0;
	else a_thrash = temp / post_calls;

	a_avelig = addrel (tcdp2, TCMave_eligible_loc) -> scaled;
	a_avquln = addrel (tcdp2, TCMavequeue_loc) -> scaled;

	temp = addrel (tcdp2, TCMresponse_time_loc) -> double / 262144e0;
	if addrel (tcdp2, TCMresponse_count_loc) -> single = 0 then a_respons = 0e0;
	else a_respons = temp / addrel (tcdp2, TCMresponse_count_loc) -> single;

/* This section fills in some of the header items in the stat_seg block. */

	call read_deck;

	statistics.time_of = clock ();
	statistics.time (statistics.index) = statistics.time_of;
	statistics.sysid (statistics.index) = substr (whotab.sysid, 1, length (statistics.sysid (statistics.index)));
	statistics.uptime (statistics.index) = whotab.timeup;
	ansp = as_data_$ansp;
	statistics.units (statistics.index) = anstbl.n_units;
	statistics.users (statistics.index) = anstbl.n_users;
	statistics.erfno (statistics.index) = "";	/* System is running now. */
	statistics.crashtime (statistics.index) = 0;
	statistics.ncpu (statistics.index) = ncpu;
	statistics.kmem (statistics.index) = nmem;
	statistics.kbulk (statistics.index) = 0;
	call phcs_$ring_0_peek (ptr (tcdp, TCMsystem_virtual_time_loc),
	     addr (statistics.system_virtual_time (statistics.index)), 2);


/* Check if any AST pool has low steps and force update_vtoce's if needed. */
	if ^debug_sw then do;
	     do i = 0 to 3;
		steps = addrel (sstp3, SSTasteps_loc) -> asteps (i);
		if (steps - old_ast_steps (i)) < addrel (sstp3, SSTlevel_loc) -> level (i).no_aste
		then call hphcs_$flush_ast_pool (i);
		old_ast_steps (i) = steps;
	     end;

	     call scan_syserr_log;
	end;

	return;

/* ADDITIONAL ENTRY POINTS, IN ALPHABETIC ORDER */

asmt_debug: entry;					/* to turn debug_sw on and off */

	debug_sw = ^debug_sw;
	call sys_log_ (SL_LOG, "as_meter_: debug switch turned ^[ON^;OFF^].", debug_sw);
	return;
%page;
asmt_init: entry;					/* Initialize A.S. resource usage metering */

	if ^sc_stat_$Multics_typed | sc_stat_$Go_typed then
	     call sub_err_ (error_table_$out_of_sequence, "as_meter_$asmt_init", "s");
	asmt_initialized = "0"b;			/* not up until we're done */
	debug_sw = as_data_$debug_flag;
	now = clock ();				/* read clock */
	call cpu_time_and_paging_ (pf, vcpu, (0));	/* and meters */
	call hcs_$make_seg ((get_wdir_ ()), "as_meter_table", "", 1010b, asmtp, ec);
	if asmtp = null then do;
	     call sys_log_$error_log (SL_LOG, ec, "as_meter_$asmt_init",
		"Unable to get pointer to as_meter_table; performance metering disabled.");
	     return;
	end;
	call hcs_$truncate_seg (asmtp, (0), ec);	/* zero everything in it */
	if ec ^= 0 then do;
	     call sys_log_$error_log (SL_LOG, ec, "as_meter_$asmt_init",
		"Unable to truncate as_meter_table; performance metering disabled.");
	     return;
	end;

	asmt.version = ASMT_VERSION_1;		/* initialize it */
	asmt.startup_clock = now;			/* remember when we did so */
	asmt.startup_vcpu = vcpu;			/* and remember how much was used before meters were turned on */
	asmt.startup_pf = pf;

/* Meter cost of calls to asmt entry points */
	asmt.asmt_count = asmt.asmt_count + 1;
	asmt.asmt_real_time = asmt.asmt_real_time +
	     (clock () - asmt.startup_clock);
	call cpu_time_and_paging_ (pf, vcpu, (0));
	asmt.asmt_vcpu = asmt.asmt_vcpu +
	     (vcpu - asmt.startup_vcpu);
	asmt.asmt_pf = asmt.asmt_pf +
	     (pf - asmt.startup_pf);

	asmt_initialized = "1"b;

	return;
%page;
asmt_ptr: entry returns (ptr);			/* to save other procs the trouble of initiating as_meter_table */

	return (asmtp);

as_meter_init: entry (atlu, ancrash, anxt_update, aintv);

dcl  atlu fixed bin (71),				/* time of last update in prev run (return) */
     ancrash fixed bin,				/* Number of users thought to be on at crash. */
     anxt_update fixed bin (71),			/* time of next accounting update */
     aintv fixed bin (71);				/* interval in seconds */

	whotab.erfno = "";				/* Assume didn't crash */
	debug_sw = as_data_$debug_flag;
	if ^debug_sw then do;
	     call hphcs_$get_fdump_num (dump_lth, dump_valid, dump_ename, dump_valid_355, dump_ename_355, ec);
	     if ec = 0 then
		if dump_valid then do;		/* Was a dump taken? */
		     crashid = substr (dump_ename, 15); /* Yes. Get dump ID */
		     whotab.erfno = crashid;
		     if ancrash = 0 then ancrash = 1;	/* Make sure crash is noted, if a dump was taken. */
		     call sys_log_ (SL_LOG, "as_meter_: DUMP number is ^a", crashid);
		end;
	end;
	whotab.lastsd = atlu;			/* Initialize whotab. */
	if ancrash ^= 0 then			/* Were there any users who didn't log out? */
	     if whotab.erfno = "" then		/* Yes. So we crashed. Was there a dump? */
		whotab.erfno = "crash";		/* No. Just indicate crash. */

	call ring0_get_$segptr ("", "sst", xsstp, ec);	/* Locate the config info.. */
	if ec ^= 0 then call error ("sst");
	call ring0_get_$segptr ("", "tc_data", tcdp, ec);
	if ec ^= 0 then call error ("tc_data");

	call getloc (xsstp, "asteps", SSTasteps_loc);
	call getloc (xsstp, "damaged_ct", SSTdamage_ct_loc);
	call getloc (xsstp, "level", SSTlevel_loc);
	call getloc (xsstp, "nused", SSTnused_loc);
	call getloc (xsstp, "post_purge_calls", SSTpost_purge_calls_loc);
	call getloc (xsstp, "pre_page_calls", SSTpre_page_calls_loc);
	call getloc (xsstp, "pre_page_size", SSTpre_page_size_loc);
	call getloc (xsstp, "thrashing", SSTthrashing_loc);
	call getloc (tcdp, "ave_eligible", TCMave_eligible_loc);
	call getloc (tcdp, "avequeue", TCMavequeue_loc);
	call getloc (tcdp, "delta_vcpu", TCMdelta_vcpu_loc);
	call getloc (tcdp, "idle", TCMidle_loc);
	call getloc (tcdp, "processor_time", TCMprocessor_time_loc);
	call getloc (tcdp, "response_count", TCMresponse_count_loc);
	call getloc (tcdp, "response_time", TCMresponse_time_loc);
	call getloc (tcdp, "system_virtual_time", TCMsystem_virtual_time_loc);
	call getloc (tcdp, "working_set_addend", TCMworking_set_addend_loc);
	call getloc (tcdp, "working_set_factor", TCMworking_set_factor_loc);
	call getloc (tcdp, "zero_idle", TCMzero_idle_loc);

	call read_deck;				/* Get config, for first maxu auto call. */

	call hcs_$make_seg ((get_wdir_ ()), "stat_seg", "", 1011b, statp, ec);
	if statp = null then call error ("stat_seg");
	if statistics.time_of > atlu then atlu = statistics.time_of;
	whotab.lastsd = atlu;			/* Might be better figure. */

	if statistics.index = 0 then statistics.index = 1;/* Stat_seg did not exist before */
	statistics.erfno (statistics.index) = whotab.erfno; /* Patch up last entry before crash. */
	statistics.crashtime (statistics.index) = whotab.lastsd;
	MAX = divide (sys_info$max_seg_size - STAT_header_lth, STAT_entry_lth, 17, 0);

/* Get initial values for AST steps */

	sstp3 = addr (sst_buffer);
	call phcs_$ring_0_peek (xsstp, sstp3, 512);
	do i = 0 to 3;
	     old_ast_steps (i) = addrel (sstp3, SSTasteps_loc) -> asteps (i);
	end;

	call ipc_$create_ev_chn (core_flush_channel, ec);
	if ec ^= 0 then call error ("flush evchn");
	call ipc_$decl_ev_call_chn (core_flush_channel, core_flush, null, CORE_FLUSH_PRIO, ec);
	if ec ^= 0 then call error ("flush call chn");
	core_flush_time = anxt_update - OFFSET + aintv * MILLION;
	call timer_manager_$alarm_wakeup (core_flush_time, "00"b, core_flush_channel);
	if ^debug_sw then
	     call hphcs_$flush_core;			/* get ball rolling */
	core_flush_time = aintv;			/* do it every so often */

	old_damage_count = 0;

	if ^debug_sw then
	     call scan_syserr_log;

	disable_metering = "0"b;			/* Turn on the metering. */

bust_out: return;

as_meter_stop: entry;

	disable_metering = "1"b;
	return;

core_flush: entry (dataptr);

dcl  dataptr ptr;

	call timer_manager_$alarm_wakeup (core_flush_time, "11"b, core_flush_channel);
	if ^debug_sw then
	     call hphcs_$flush_core;

	return;

/* This entry point is called at the beginning of execution of a subsystem whose usage is being metered. */

enter: entry (slot_no);

	me = "enter";

	if ^asmt_initialized then return;		/* don't fault if called before initialization */

	if slot_no <= 0 | slot_no > hbound (asmt.entry, 1) then do;
bad_slot:	     call ioa_$rsnnl ("as_meter_$^a: called with slot_no=^d.", err_msg, (0), me, slot_no);
	     call error_print;
	     return;
	end;

	now = clock ();				/* read clock */
	call cpu_time_and_paging_ (pf, vcpu, (0));	/* and meters */

	asmt.update_in_progress = 1;			/* so as_meters command can detect an inconsistent copy */

	asmtep = addr (asmt.entry (slot_no));		/* get ptr to table entry for this subsystem */

	if asmte.entered > 0 then do;			/* if subsystem is already entered */
	     if substr (recursion_possible, slot_no, 1) then do; /* if recursive calls to it are legal */
		asmt.global_entered = asmt.global_entered + 1; /* just increment the various entry counters */
		asmte.entered = asmte.entered + 1;
		asmte.entry_count = asmte.entry_count + 1;
		asmte.recursive_entry_count = asmte.recursive_entry_count + 1;
		goto finish_update;			/* and leave without changing the usage values */
	     end;

/* Probably the subsystem took a fault and never called the exit entry point. Complain and then clean up. */

	     call date_time_ (asmte.update_clock, dtstr); /* format time of original entry */
	     call ioa_$rsnnl ("as_meter_$enter: called with slot_no ^d already entered at ^a.", err_msg, (0), slot_no, dtstr);
	     call error_print;
	     if asmte.x ^= 0 then do;			/* clear x values, if any */
		asmte.x_vcpu = 0;
		asmte.x_real_time = 0;
		asmte.x_pf = 0;
		asmte.x = 0;
	     end;
	     asmt.global_entered = asmt.global_entered - 1;
	     asmte.entered = 0;
	end;

	else do;					/* Normal case: subsystem not presently entered */
	     asmt.global_entered = asmt.global_entered + 1; /* count subsystems presently entered */
	     asmte.entered = 1;			/* mark this subsystem as entered */
	     asmte.entry_count = asmte.entry_count + 1;	/* count entries to this subsystem */
	     asmte.entry_pf = pf;			/* remember page faults at entry */
	     asmte.entry_vcpu = vcpu;			/* and vcpu */
	end;

	asmte.update_clock = now;			/* record time of this update */

finish_update:					/* come here to finish update */
	asmt.latest_clock = now;			/* remember current time in header */
	asmt.latest_vcpu = vcpu;			/* and also current usage figures */
	asmt.latest_pf = pf;

/* Meter the cost of calls to asmt entry points */
	asmt.asmt_count = asmt.asmt_count + 1;
	asmt.asmt_real_time = asmt.asmt_real_time +
	     (clock () - asmt.latest_clock);
	call cpu_time_and_paging_ (pf, vcpu, (0));
	asmt.asmt_vcpu = asmt.asmt_vcpu +
	     (vcpu - asmt.latest_vcpu);
	asmt.asmt_pf = asmt.asmt_pf +
	     (pf - asmt.latest_pf);

	asmt.update_in_progress = 0;			/* mark table as consistent now */

	return;

exit: entry (slot_no);

	me = "exit";
	return_values = ""b;			/* don't try to return the usage values */
	goto exit_common;


/* This entry point is like the above, but it also returns the computed usage values to the caller. */

exit_values: entry (slot_no, a_pf, a_vcpu, a_rt);

	me = "exit_values";
	return_values = "1"b;			/* return the computed usage values to the caller */
	a_pf, a_vcpu, a_rt = 0;			/* zero return values; don't return garbage if there's an error */

exit_common:

	if ^asmt_initialized then return;

	if slot_no <= 0 | slot_no > hbound (asmt.entry, 1) then goto bad_slot;

	now = clock ();
	call cpu_time_and_paging_ (pf, vcpu, (0));
	asmt.update_in_progress = 1;			/* mark table as temporarily inconsistent */

	asmtep = addr (asmt.entry (slot_no));		/* get pointer to table entry for this subsystem */

	if asmte.entered <= 0 then do;
	     call ioa_$rsnnl ("as_meter_$^a: called with slot_no ^d not entered (^d).",
		err_msg, (0), me, slot_no, asmte.entered);
	     call error_print;
	end;

	else do;
	     asmte.entered = asmte.entered - 1;		/* decrement recursive call counter */

	     if asmt.global_entered <= 0 then do;	/* and, unless there is an error */
		call ioa_$rsnnl ("as_meter_$^a: called (for slot_no ^d) with global_entered = ^d",
		     err_msg, (0), me, slot_no, asmt.global_entered);
		call error_print;
		asmt.global_entered = 0;
	     end;
	     else asmt.global_entered = asmt.global_entered - 1; /* decrement global entry counter */


	     if asmte.entered = 0 then do;		/* if subsystem is no longer entered, update its meters */

		delta_real_time = now - asmte.update_clock; /* compute values of usage during this entry */
		delta_vcpu = vcpu - asmte.entry_vcpu;
		delta_pf = pf - asmte.entry_pf;

		asmte.update_clock = now;		/* remember time of update */

		asmte.tot_real_time = asmte.tot_real_time + delta_real_time; /* update total values */
		asmte.tot_vcpu = asmte.tot_vcpu + delta_vcpu;
		asmte.tot_pf = asmte.tot_pf + delta_pf;

		if return_values then do;		/* if caller wants usage values, return the total figures */
		     a_rt = delta_real_time;
		     a_vcpu = delta_vcpu;
		     a_pf = delta_pf;
		end;

		if asmte.x ^= 0 then do;		/* if we must exclude the usage charged to called subsystems */
		     delta_real_time = delta_real_time - asmte.x_real_time; /* do it now */
		     delta_vcpu = delta_vcpu - asmte.x_vcpu;
		     delta_pf = delta_pf - asmte.x_pf;

		     asmte.x_real_time = 0;		/* clear the x values */
		     asmte.x_vcpu = 0;
		     asmte.x_pf = 0;
		     asmte.x = 0;			/* remember that there are no x values */
		end;

		asmte.real_time = asmte.real_time + delta_real_time; /* update the "this subsystem only" meters */
		asmte.vcpu = asmte.vcpu + delta_vcpu;
		asmte.pf = asmte.pf + delta_pf;

		if asmt.global_entered > 0 then	/* if other subsystems are entered, record the usage that we just
						   metered, so we can deduct it from their usage when they exit */
		     do i = 1 to hbound (asmt.entry, 1);/* scan for entered subsystems */

		     asmtep = addr (asmt.entry (i));	/* NOTE that we just clobbered asmtep */
		     if asmte.entered > 0 then do;	/* if this subsystem is presently entered */
			asmte.x_real_time = asmte.x_real_time + delta_real_time;
			asmte.x_vcpu = asmte.x_vcpu + delta_vcpu;
			asmte.x_pf = asmte.x_pf + delta_pf;
			asmte.x = 1;		/* remember that this subsystem has x values */
		     end;
		end;				/* end global_entered > 0 */
	     end;					/* end update of subsystem's meters */
	end;					/* end subsystem was entered */

	goto finish_update;

read_config: entry (a_ncpu, a_kmem, a_kbulk);

dcl  (a_ncpu, a_kmem, a_kbulk) fixed bin;

	call read_deck;				/* Find out current configuration. */
	a_ncpu = ncpu;
	a_kmem = nmem;
	a_kbulk = 0;				/* someday we'll take out bulk */

	return;

/* INTERNAL PROCEDURES, IN ALPHABETIC ORDER */

error: proc (id);

dcl  id char (*);

	call sys_log_$error_log (SL_LOG_BEEP, ec, "as_meter_", "Problem getting ""^a"". Metering disabled.", id);
	go to bust_out;

     end error;

error_print: proc;					/* called on errors in asmt entry points */

	call sys_log_ (SL_LOG_SILENT, "^a", err_msg);
	if debug_sw then
	     call as_dump_ (err_msg);
	return;

     end error_print;

getloc: proc (p, name, locn);

dcl  p ptr, name char (*), locn fixed bin (18);
dcl  offset fixed bin (18);

	call ring0_get_$definition (p, "", name, offset, (0), ec);
	if ec ^= 0 then call error (name);
	locn = offset;

     end getloc;

read_deck: proc;

	ncpu, nmem = 0;
	cpu_cardp, mem_cardp = null;
	do while ("1"b);
	     call config_$find ("cpu", cpu_cardp);
	     if cpu_cardp = null then go to found_all_cpus;
	     if cpu_card.state = "on" then ncpu = ncpu + 1;
	end;
found_all_cpus:
	if ncpu = 0 then call error ("config_deck");	/* config_ couldn't find a cpu card */
	do while ("1"b);
	     call config_$find ("mem", mem_cardp);
	     if mem_cardp = null then return;
	     if mem_card.state = "on" then nmem = nmem + mem_card.size;
	end;

     end read_deck;

scan_syserr_log: proc;

/* Get all seg/vol damage messages from last time till now  */
/* We rely on syserr_log_man_ to interpret them and spit them out */

	damage_count = addrel (sstp3, SSTdamage_ct_loc) -> single;
	if damage_count > old_damage_count
	then call syserr_log_man_$as_copy_log ();

	old_damage_count = damage_count;

     end scan_syserr_log;

/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_meter_numbers;
%page; %include as_meter_table;
%page; %include as_wakeup_priorities;
%page; %include config_cpu_card;
%page; %include config_mem_card;
%page; %include sc_stat_;
%page; %include stat_seg;
%page; %include sys_log_constants;
%page; %include user_table_header;
%page; %include whotab;

/* format: on */
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_meter_: FDUMP number is NNN

   S:	as (severity1)

   T:	$init

   M:	The system is coming up after a crash.  There is a dump,
   created by the bce dump command, in the DUMP partition.  Usually,
   system_start_up.ec copies this dump into the directory >dumps.

   A:	Follow site instructions concerning the processing of
   online dumps.  The normal procedure is to log in Print_Dump.SysDaemon
   and request that it process the dump.


   Message:
   as_meter_: Problem getting "ITEM".  Metering disabled.

   S:	as (severity2)

   T:	$init

   M:	The metering module cannot obtain a pointer to the ring 0
   hardcore data item ITEM, used in calculating system usage.  Metering
   figures are scrambled, but the system should be able to run.

   A:	$inform

   END MESSAGE DOCUMENTATION */

     end as_meter_;
