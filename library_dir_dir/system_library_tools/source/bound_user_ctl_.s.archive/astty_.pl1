/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

astty_: proc;

/* ASTTY_ - the Answering Service User Terminal IO Module (formerly aswa_)
   this procedure provides an I/O-switch type write around
   for the answering service.

   Originally, this program handled TTY, NET (old NCP), and G115 protocol.
   Now, it only handles tty, by calling hcs_$tty_*. This removes the need
   for an IOCB per channel.

   Initially coded by Michael J. Spier, March 2 1970.
   Modified 7/22/71 by Edwin W. Meyer, Jr. to include calls for the ARPA Computer Network.
   Test mode removed 11/72 THVV
   Modified 750226 by PG to split astty_$tty_order into $tty_order and $tty_changemodes
   Modified by T. Casey, November 1976 to have changemode check for old mode string too long and not return error code.
   Modified by Robert Coren, July 1977, to process set_term_type order
   Modified by Robert Coren, summer 1978, to use hcs_$tty_get_line and to add get_chars entry point
   Modified August 1979 by Larry Johnson for getmodes entry.
   Modified May 15 1981 by E. N. Kittlitz. tty_read maxlength changed from 100 to 300,
   tty_order to return real status code for dial_out.
   Modified February 1982 by E. N. Kittlitz for error_log, no_error_log entries.
   Modified February 1983 by E. N. Kittlitz for selective tracing.
   Modified 84-04-02 BIM. Removed all multiple "dim" support.
   And fix code return to return -1 ONLY if channel is HUNG UP.
   (io no permission).
   Modified 1984-10-01 BIM to improve severity selection for tracing.
   Now all tracing goes into the log.
*/

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  2) change(87-03-17,LJAdams), approve(87-04-03,MCR7646),
     audit(87-05-05,Gilcrease), install(87-05-14,MR12.1-1030):
     Changed ttd_version to ttd_version_3.
  3) change(87-03-17,Beattie), approve(87-04-06,MCR7656),
     audit(87-08-03,Parisek), install(87-08-04,MR12.1-1055):
     Supports use of IOCBs when connecting to channels that cannot be
     supported by tty_, ie, hasp operator subchannels when set for login
     service.
                                                   END HISTORY COMMENTS */

/* builtins */

dcl  (addr, codeptr, length, rtrim, substr, null) builtin;

/* external static */

dcl  error_table_$smallarg fixed bin (35) external static;

/* entries */

dcl  ioa_$rsnnl entry () options (variable);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  ttt_info_$terminal_data entry (char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$tty_abort entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hphcs_$tty_write_force entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_detach entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_detach_new_proc entry (fixed bin, bit (36) aligned, fixed bin, fixed bin (35));
dcl  hcs_$tty_event entry (fixed bin, fixed bin (71), fixed bin, fixed bin (35));
dcl  hcs_$tty_index entry (char (*) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$tty_read entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_get_line entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, bit (1), fixed bin, fixed bin (35));
dcl  hcs_$tty_state entry (fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_write entry (fixed bin, ptr, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$attach_ptr entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$get_chars entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* DECLARATION OF INTERNAL STATIC VARIABLES */

dcl  el_severity fixed bin int static init (0);
dcl  trace_sw bit (1) aligned int static init ("0"b);
dcl  trace_error_sw bit (1) aligned int static init ("0"b);
dcl  trace_call_sw bit (1) aligned int static init ("0"b);
dcl  trace_select_sw bit (1) aligned int static init ("0"b);
dcl  trace_select_channel char (32) varying int static init ("");
dcl  trace_io_sw bit (1) aligned int static init ("0"b);

/* automatic */

dcl  (nelem, nelemt, offset) fixed bin;
dcl  (iox_nelem, iox_nelemt) fixed bin (21);
dcl  iox_code fixed bin (35);
dcl  nl_found bit (1);
dcl  obsolete bit (1) aligned;
dcl  entrypoint char (9);
dcl  changemode_entry bit (1);
dcl  iocb_ptr ptr;
dcl  order_name char (32);
dcl  order_ptr ptr;
dcl  io_linel fixed bin (21);
dcl  line_status_storage bit (72) aligned;
dcl  ME char (6) int static init ("astty_") options (constant);
        

dcl  1 terminal_data like terminal_type_data;

dcl  1 modes aligned,				/* for order (modes) call */
       2 size fixed bin,
       2 string char (512) unal;

/* based */

dcl  io_line char (io_linel) based (mp);

/* error table */

dcl  error_table_$io_no_permission fixed bin (35) ext static;
dcl  error_table_$mpx_down fixed bin (35) ext static;
dcl  error_table_$line_status_pending fixed bin (35) ext static;
dcl  error_table_$not_a_valid_iocb fixed bin (35) ext static;
%page;
/* ============================================================= */

/* TTY_INDEX - ATTACH THE DEVICE SPECIFIED BY "NAME" AND ASSIGN IT A DEVICE INDEX */

tty_index: entry (p, code);

dcl  p ptr parameter;
dcl  code fixed bin (35) parameter;

	code = 0;
	cdtep = p;				/* copy ptr */

	if cdte.use_iocb then
	     if cdte.iocbp = null () then call create_iocb;

	call hcs_$tty_index (cdte.name, cdte.twx, cdte.state, code);

	call print_num ("index", cdte.twx);
	go to check_state_return;

/* TTY_EVENT - ASSOCIATE THE DEVICE WITH AN EVENT CHANNEL NAME */

tty_event: entry (p, code);

	call validate_cdte ("event");

	if cdte.use_iocb then do;
	     call iox_$control ((cdte.iocbp), "set_event_channel", addr (cdte.event), iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_event (cdte.twx, cdte.event, cdte.state, code);

	call print ("event");
	cdte.wakeup_handler = ""b;			/* assume dialup_ handles wakeups */
	go to check_state_return;


/* TTY_CHANGEMODE - SET THE DEVICE MODES */

tty_changemode:
     entry (p, bv_new_modes, code);

/* parameters to tty_changemode */

dcl  bv_new_modes char (*) unaligned parameter;

	changemode_entry = "1"b;
changemode_join:
	call validate_cdte ("changemode");

	modes.size = length (modes.string);		/* set maximum returned length */
	if changemode_entry then modes.string = bv_new_modes; /* set new modes */
	else modes.string = "";
re_mode:
	if cdte.use_iocb
	then do;
	     call iox_$modes ((cdte.iocbp), modes.string, "", iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_order (cdte.twx, "modes", addr (modes), cdte.state, code);
	call check_line_status (re_mode, "changemode");
	if code ^= 0 then
	     if code = error_table_$smallarg then	/* ... not enough room for returned mode string */
		code = 0;

	if ^changemode_entry then do;
	     bv_modes = modes.string;
	     call print ("getmode");
	end;
	else call print_arg ("changemode", bv_new_modes);
	go to check_state_return;


/* TTY_GETMODE - GET THE DEVICE MODES */

tty_getmode:
     entry (p, bv_modes, code);

dcl  bv_modes char (*);

	changemode_entry = "0"b;
	go to changemode_join;


/* TTY_ORDER - REQUEST MISCELLANEOUS DEVICE-DEPENDENT FUNCTIONS */

tty_order:
     entry (p, bv_order, bv_order_ptr, code);

/* parameters to tty_order */

dcl  (bv_order char (*),
     bv_order_ptr ptr) parameter;

	call validate_cdte ("order");
	order_ptr = bv_order_ptr;
	order_name = bv_order;

	if ^cdte.use_iocb & (order_name = "set_term_type")
	then do;					/* imitate tty_ for this one */
	     terminal_data.version = ttd_version_3;
	     call ttt_info_$terminal_data (order_ptr -> set_term_type_info.name, (cdte.line_type),
		(cdte.baud_rate), addr (terminal_data), code);
	     if code ^= 0 then do;
		call sys_log_$error_log (el_severity, code, ME,
		     "^a has undefined terminal type ^a for set_term_type order.",
		     cdte.name, order_ptr -> set_term_type_info.name);
		go to general_return;
	     end;

	     order_name = "set_terminal_data";
	     order_ptr = addr (terminal_data);
	end;

re_order:
	call print_arg ("order", bv_order);

	if cdte.use_iocb
	then do;
	     call iox_$control ((cdte.iocbp), order_name, order_ptr, iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_order (cdte.twx, order_name, order_ptr, cdte.state, code);
	call check_line_status (re_order, "order");

	if order_name = "hangup" then
	     if cdte.use_iocb then do;
		call destroy_iocb;
		call create_iocb;
		call hcs_$tty_index (cdte.name, cdte.twx, cdte.state, code);
	     end;

	go to check_state_return;

/* TTY_STATE - GET THE STATE OF THE DEVICE */

tty_state: entry (p, code);

	call validate_cdte ("state");

	if cdte.use_iocb
	then do;
	     if cdte.iocbp = null () then do;
		cdte.state = 0;			/* channel not set up yet */
		code = 0;
	     end;
	     else do;
		call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
		if code = error_table_$not_a_valid_iocb
		then do;				/* should not happen but just in case */
		     cdte.state = 0;
		     cdte.iocbp = null ();
		     code = 0;
		end;
	     end;
	end;
	else call hcs_$tty_state (cdte.twx, cdte.state, code);

	call print_num ("state", cdte.state);

/* Error code processing is different here ! */

	if code = error_table_$io_no_permission | code = error_table_$mpx_down /* twx valid, but noone home */
	then do;
	     code = 0;				/* we can report a legitimate and accurate state */
	     if cdte.state > TTY_HUNG
	     then do;
		call sys_log_ (el_severity, "^a: tty_state returned ^d for hung-up line ^a.", ME, cdte.state, cdte.name);
		cdte.state = 0;			/* Lie, to get good results. */
	     end;
	end;
	return;					/* we assume state is 0 or -1 in the io_no_permission case */


/* TTY_ABORT - ABORT ALL PENDING I/O ON THE DEVICE */

tty_abort: entry (p, abortflag, code);

dcl  abortflag fixed bin;

	call validate_cdte ("abort");
re_abort:
	if cdte.use_iocb
	then do;
	     if abortflag = 1 | abortflag = 3		/* reset read */
	     then do;
		call iox_$control ((cdte.iocbp), "resetread", null (), iox_code);
		call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
		if code = 0 then code = iox_code;	/* give precedence to state control order */
		if code ^= 0 then go to bad_abort;
	     end;

	     if abortflag = 2 | abortflag = 3		/* reset write */
	     then do;
		call iox_$control ((cdte.iocbp), "resetwrite", null (), iox_code);
		call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
		if code = 0 then code = iox_code;	/* give precedence to state control order */
	     end;
	end;
	else call hcs_$tty_abort (cdte.twx, abortflag, cdte.state, code);

bad_abort:
	call check_line_status (re_abort, "abort");
	call print_num ("abort", abortflag);
	go to check_state_return;


/* TTY_GET_CHARS - READ WHATEVER INPUT IS AVAILABLE */

tty_get_chars: entry (p, mp, ml, code);

	nelem = 300;
	nelemt = 0;
	offset = 0;
	ml = 0;					/* safe */
	call validate_cdte ("get_chars");
	entrypoint = "get_chars";

re_get_chars:
	if cdte.use_iocb
	then do;
	     iox_nelem = nelem;
	     call iox_$get_chars ((cdte.iocbp), mp, iox_nelem, iox_nelemt, iox_code);
	     nelemt = iox_nelemt;
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_read (cdte.twx, mp, offset, nelem, nelemt, cdte.state, code);
	call check_line_status (re_get_chars, "get_chars");
	go to trace_read;


/* TTY_READ - READ IN A LINE FROM THE DEVICE */

tty_read: entry (p, mp, ml, code);

dcl  mp ptr, ml fixed bin;

	nelem = 300;				/* min(ftp_dialup_ buff size, dialup_ buff size) */
	nelemt = 0;
	offset = 0;
	ml = 0;
	entrypoint = "read";
	call validate_cdte ("read");

re_get_line:
	if cdte.use_iocb
	then do;
	     iox_nelem = nelem;
	     call iox_$get_line ((cdte.iocbp), mp, iox_nelem, iox_nelemt, iox_code);
	     nelemt = iox_nelemt;
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_get_line (cdte.twx, mp, offset, nelem, nelemt, nl_found, cdte.state, code);
	call check_line_status (re_get_line, "read");

trace_read:
	call print_num (entrypoint, nelemt);
	if trace_io_sw then do;
	     io_linel = nelemt;
	     call print_arg (entrypoint, io_line);
	end;
	ml = nelemt;
	go to check_state_return;


/* TTY_WRITE - write out a line on the device. */

tty_write: entry (p, mp, mo, ml1, mt, code);

dcl  (mo, ml1, mt) fixed bin;
dcl  based_chars (0:1) char (1) based unal;		/* used for bumping string pointers */
dcl  data_ptr pointer;

	mt = 0;
	call validate_cdte ("write");
re_write:
	if cdte.use_iocb
	then do;
	     data_ptr = addr (mp -> based_chars (mo));
	     iox_nelem = ml1;
	     call iox_$put_chars ((cdte.iocbp), data_ptr, iox_nelem, iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	     if code = 0 then mt = ml1;
	end;
	else call hcs_$tty_write (cdte.twx, mp, mo, ml1, mt, cdte.state, code);
	call check_line_status (re_write, "write");

	call print_num ("write", ml1);
	if trace_io_sw then do;
	     io_linel = ml1;
	     call print_arg ("write", io_line);
	end;

	go to check_state_return;

/* TTY_FORCE - WRITE OUT A LINE ON THE DEVICE (use special "force" mode) */

tty_force: entry (p, mp, ml, code);

	nelem = ml;
	nelemt = 0;
	offset = 0;

	call validate_cdte ("force");

re_write_force:
	if cdte.use_iocb
	then do;					/* this will work on a well configured system */
	     iox_nelem = nelem;
	     call iox_$put_chars ((cdte.iocbp), mp, iox_nelem, iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	     if code = 0 then nelemt = nelem;
	end;
	else call hphcs_$tty_write_force (cdte.twx, mp, offset, nelem, nelemt, cdte.state, code);
	call check_line_status (re_write_force, "write_force");

	call print_num ("force_write", nelem);
	if trace_io_sw then do;
	     io_linel = nelem;
	     call print_arg ("force_write", io_line);
	end;

	if nelemt = ml then return;
	if cdte.use_iocb then go to check_state_return;	/* one chance only for IOCBs */
re_force_abort:
	call hcs_$tty_abort (cdte.twx, 2, cdte.state, code);
	call check_line_status (re_force_abort, "write_force(abort)");
re_write_force_2:
	call hphcs_$tty_write_force (cdte.twx, mp, offset, nelem, nelemt, cdte.state, code);
	call check_line_status (re_write_force_2, "write_force(2)");
	go to check_state_return;

/* TTY_DETACH - DETACH THE DEVICE AND MAKE IT UNKNOWN  (AND AVAILABLE) */

tty_detach: entry (p, detachflag, code);

dcl  detachflag fixed bin;
dcl  dflag fixed bin;

	call validate_cdte ("detach");

	if cdte.use_iocb & cdte.iocbp ^= null () then do;
	     dflag = detachflag;
	     call iox_$control ((cdte.iocbp), "detach_user_process", addr (dflag), iox_code);
	     if iox_code ^= 0 then			/* need to try all possible avenues to get into hcs_$tty_detach */
		call hcs_$tty_detach (cdte.twx, detachflag, cdte.state, iox_code);

	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	     call destroy_iocb ();
	end;
	else call hcs_$tty_detach (cdte.twx, detachflag, cdte.state, code);

	call print_num ("detach", detachflag);
	return;

/* TTY_NEW_PROC - force tty to attach to new process */

tty_new_proc: entry (p, pid, code);

dcl  pid bit (36) aligned;

	call validate_cdte ("new_proc");
	if cdte.use_iocb
	then do;
	     call iox_$control ((cdte.iocbp), "assign_to_user_process", addr (pid), iox_code);
	     call iox_$control ((cdte.iocbp), "state", addr (cdte.state), code);
	     if code = 0 then code = iox_code;		/* give precedence to state control order */
	end;
	else call hcs_$tty_detach_new_proc (cdte.twx, pid, cdte.state, code);
	call print ("new_proc");
	go to check_state_return;
%page;
/* Trace package */

trace_on: entry;

dcl  cu_$arg_count entry entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  argc fixed bin;
dcl  argp ptr;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);

	trace_io_sw = "0"b;
	go to trace_join;

trace_io: entry;
	trace_io_sw = "1"b;

trace_join:
	trace_sw = "1"b;				/* tracing or logging */
	trace_call_sw = "1"b;			/* definitely tracing */
	trace_select_sw = "0"b;
	call cu_$arg_count (argc, (0));
	if argc = 0 then go to trace_report_return;
	call cu_$arg_ptr (1, argp, argl, (0));
	trace_select_sw = "1"b;
	trace_select_channel = arg;

trace_report_return:
	call sys_log_ (SL_LOG, "^a: tracing is ^[on^[ for channel ^a^;^s^].^;off. ^2sError logging is ^[on, severity ^d^;off^].^]",
	     ME, trace_call_sw, trace_select_sw, trace_select_channel, trace_sw, el_severity);
	return;

trace_off: entry;
	trace_call_sw = "0"b;			/* no more tracing  */
	trace_io_sw = "0"b;
	trace_sw = trace_error_sw;			/* are we still error logging? */
	go to trace_report_return;

log_error: entry;
	el_severity = SL_LOG_SILENT;
	go to log_error_join;

log_error_1: entry;
	el_severity = SL_LOG;

log_error_join:
	trace_sw = "1"b;				/* logging or tracing */
	trace_error_sw = "1"b;			/* definitely error logging */
	go to trace_report_return;

no_log_error: entry;
	trace_error_sw = "0"b;			/* no more error logging */
	trace_sw = trace_call_sw;			/* still tracing? */
	go to trace_report_return;
%page;
/* Internal procedures used to write out tracing messages and log errors. */

print: proc (chars);

dcl  chars char (*);
dcl  lsv fixed bin;
dcl  trace_it bit (1) aligned;

	call should_trace (lsv, trace_it);
	if ^trace_it then return;
	call sys_log_$error_log (lsv, code, ME, "^a ^d ^a", cdte.name, cdte.state, chars);

     end print;


print_arg:
     procedure (bv_arg1, bv_arg2);

dcl  (bv_arg1, bv_arg2) char (*) unaligned parameter;
dcl  lsv fixed bin;
dcl  trace_it bit (1) aligned;

	call should_trace (lsv, trace_it);
	if ^trace_it then return;
	call sys_log_$error_log (lsv, code, ME, "^a ^d ^a ^a", cdte.name, cdte.state, bv_arg1, bv_arg2);

     end print_arg;


print_num:
     procedure (bv_arg1, bv_arg2);

dcl  (bv_arg1 char (*) unaligned,
     bv_arg2 fixed bin) parameter;

dcl  eleven_digits picture "-----------9";		/* 11 digits plus sign */

dcl  verify builtin;

dcl  idx fixed bin;

	if ^trace_call_sw & code = 0 then return;	/* nothing to do */
	eleven_digits = bv_arg2;			/* convert to characters */
	idx = verify (eleven_digits, " ");
	if idx = 0 then idx = 1;			/* if no blanks present, use whole string */

	call print_arg (bv_arg1, substr (eleven_digits, idx));

     end print_num;


should_trace: proc (lsv, trace_it);
dcl  lsv fixed bin;
dcl  trace_it bit (1) aligned;

should_trace_channel: proc returns (bit (1) aligned);
	     if ^trace_call_sw then return ("0"b);
	     else if trace_select_sw then		/* the beginning of this channel's name */
		return (trace_select_channel = substr (cdte.name, 1, length (trace_select_channel)));
	     else return ("1"b);

	end should_trace_channel;

	trace_it = "0"b;
	if ^trace_sw
	then return;
	trace_it = "1"b;
	if code ^= 0 & trace_error_sw then		/* we want to log error */
	     if trace_call_sw then
		if should_trace_channel () then lsv = SL_LOG; /* also tracing, make it print */
		else trace_it = ""b;
	     else lsv = el_severity;			/* error trace, let user decide if we print */
	else do;
	     trace_it = should_trace_channel ();
	     lsv = SL_LOG_SILENT;			/* no error log, just trace */
	end;
	return;
     end should_trace;

/* Checks for line status or hungup characters */

check_line_status:
     procedure (retry_label, caller);

declare  retry_label label local;
declare  acode fixed bin (35);
declare  caller char (32);
declare  octalstatus char (24);

	if code = 0 then return;
	if code ^= error_table_$line_status_pending
	then do;
	     if code = error_table_$io_no_permission | code = error_table_$mpx_down | cdte.state <= TTY_HUNG
	     then
HUNG_UP:		do;
		if cdte.state > TTY_HUNG then
		     call sys_log_$error_log (el_severity, code, ME,
			"^a state ^d > TTY_HUNG on hung-up error code.", cdte.name, cdte.state);

		code = -1;			/* dialup_ expects this */
		call destroy_iocb ();
		go to general_return;
	     end;
	     call print_arg (caller, "ERROR");
	     go to general_return;
	end;
	call hcs_$tty_order (cdte.twx, "line_status", addr (line_status_storage),
	     cdte.state,
	     acode);
	if acode ^= 0 then do;			/* if we got line_status_pending, we had to be dialed up */
	     if acode = error_table_$io_no_permission | code = error_table_$mpx_down
		| cdte.state <= TTY_HUNG
	     then go to HUNG_UP;
	     call sys_log_$error_log (el_severity, acode, ME,
		"^a ^d line_status failed after line_status_pending", cdte.name, cdte.state);
	     code = acode;
	     go to general_return;
	end;

	octalstatus = "";
	call ioa_$rsnnl ("^o", octalstatus, (0), line_status_storage);
	call print_arg ("line_status", octalstatus);
	go to retry_label;
     end check_line_status;
%skip (4);
create_iocb:
     procedure;					/* the cdte.iocbp is expected to be null */

	call iox_$find_iocb ((cdte.name), iocb_ptr, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (el_severity, code, ME, "error finding an IOCB for channel ^a.",
		cdte.name);
	     cdte.state = 0;
	     goto general_return;
	end;

	cdte.iocbp = iocb_ptr;

	call iox_$attach_ptr ((cdte.iocbp),
	     "hasp_stream_ -target hasp_workstation_ -device teleprinter -no_block -comm hasp -tty " ||
	     rtrim (cdte.name) || " -suppress_dial_manager", codeptr (astty_), code);
	if code ^= 0 then do;
	     call sys_log_$error_log (el_severity, code, ME, "error attaching IOCB for channel ^a.",
		cdte.name);
	     cdte.state = 0;
	     call iox_$destroy_iocb ((cdte.iocbp), (0));
	     cdte.iocbp = null ();
	     goto general_return;
	end;

	call iox_$open ((cdte.iocbp), Stream_input_output, obsolete, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (el_severity, code, ME, "error opening IOCB for channel ^a.",
		cdte.name);
	     cdte.state = 0;
	     call iox_$detach_iocb ((cdte.iocbp), (0));
	     call iox_$destroy_iocb ((cdte.iocbp), (0));
	     cdte.iocbp = null ();
	     goto general_return;
	end;

     end create_iocb;
%skip (4);
destroy_iocb:
     procedure;

	if cdte.use_iocb then
	     if cdte.iocbp ^= null () then do;
		call iox_$close ((cdte.iocbp), (0));	/* get rid of IOCB */
		call iox_$detach_iocb ((cdte.iocbp), (0));
		call iox_$destroy_iocb ((cdte.iocbp), (0));
		cdte.iocbp = null ();
	     end;

     end destroy_iocb;
%skip (4);
validate_cdte:
     procedure (caller);

declare  caller char (32);

	code = 0;
	cdtep = p;
	if (cdte.use_iocb & cdte.iocbp = null () & ^(caller = "state" | caller = "detach"))
	     | (^cdte.use_iocb & cdte.twx = 0) then do;	/* not currently valid channel */
	     cdte.state = TTY_HUNG;
	     code = -1;
	     call destroy_iocb ();
	     call print_arg (caller, "call with invalid cdte");
	     go to general_return;
	end;
	return;
     end validate_cdte;

general_return:
	return;

check_state_return:					/* one last chance to note hangup */

/**** The contract between us, the hardcore, and dialup_ is complex.
      tty_index will return io_no_permission if the channel is
      TTY_MASKED, TTY_HUNG_UP (TTY_HUNG) or TTY_LISTENING (TTY_KNOWN).
      dialup_ wants to hear a -1 under the same conditions.
      The fact that the channel is not dialed up takes precedence
      over any other error, since it conditions dialup_'s handling
      of the error.

      This code might do the wrong thing if the line is TTY_KNOWN
      and the operation was valid in that state.
*/

	if code ^= 0 then
	     if cdte.state <= TTY_HUNG | code = error_table_$io_no_permission | code = error_table_$mpx_down
	     then do;
		if cdte.state > TTY_HUNG
		then call sys_log_$error_log (el_severity, code, ME,
			"^a ^d state > TTY_HUNG on hung-up error code.", cdte.name, cdte.state);
		code = -1;
		call destroy_iocb;
	     end;
	return;

%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   astty_: ERROR_TABLE_MESSAGE CHANNEL has undefined terminal type TERM_TYPE for set_term_type order.

   S:     $as0 or $as1

   T:     $run

   M:     The system received the ERROR_TABLE_MESSAGE when an attempt was made
   to set the terminal type of CHANNEL to TERM_TYPE.
   Suspect the terminal type is not known on to the system.  The set_term_type
   control order was ignored.

   A:     $inform

   Message:
   astty_: tty_state returned SSSS for hung-up line CHANNEL.

   S:     $as0 or $as1

   T:     $run

   M:     In processing the astty_$tty_state entry, a call to hcs_$tty_state
   returned a state value of SSSS for hung-up
   CHANNEL which indicates that the channel is active.  However, the returned
   error code indicated that the channel is hung-up.  The channel will be
   hungup.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE CHANNEL state SSSS > TTY_HUNG on hung-up error code.

   S:     $as0 or $as1

   T:     $run

   M:     An error code of ERROR_TABLE_MESSAGE was returned while
   servicing CHANNEL indicating that the channel is not useable.  However, the
   state SSSS of the channel indicates that the channel was active, thus the
   CHANNEL state is inconsistant.  The channel will be hungup.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE CHANNEL SSSS line_status failed after line_status_pending

   S:     $as0 or $as1

   T:     $run

   M:     System received the ERROR_TABLE_MESSAGE when it tried to do a line
   status control order on CHANNEL in state SSSS after it received a
   line_status_pending error code.  The error code for ERROR_TABLE_MESSAGE was
   returned back to the caller.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE error finding an IOCB for channel CCCC.

   S:     $as0 or $as1

   T:     $run

   M:     The system received the ERROR_TABLE_MESSAGE when it attempted to find
   an IOCB for channel CCCC.  The channel was then hungup.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE error attaching IOCB for channel CCCC.

   S:     $as0 or $as1

   T:     $run

   M:     The system received the ERROR_TABLE_MESSAGE attempting to attach to
   channel CCCC using an IOCB.  The channel was then hungup.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE error opening IOCB for channel CCCC.

   S:     $as0 or $as1

   T:     $run

   M:     The system received the ERROR_TALE_MESSAGE attemping to open the
   channel CCCC using an IOCB.  The channel was then hungup.

   A:     $inform

   Message:
   astty_: ERROR_TABLE_MESSAGE CHANNEL NN TEXT

   S:	$as0 or $as1

   T:	$run

   M:	This is tracing or error logging output.
   This output may appear in the AS log, or be printed on the severity1 stream
   as directed by astty_ trace and log_error requests described below.

   A:	$ignore
   Tracing and logging is controlled by the following entries, which
   may be typed as commands in admin mode.
   .br
   astty_$trace - causes tracing of all calls to astty_
   .br
   astty_$notrace - disables tracing
   .br
   astty_$log_error - logs calls to astty_ that get errors. does not print.
   .br
   astty_$log_error_1 - logs and prints calls to astty_ that get errors.
   .br
   astty_$no_log_error - disables error logging.
   .br

   END MESSAGE DOCUMENTATION */

%page;
%include author_dcl;
%page;
%include cdt;
%page;
%include dialup_values;
%page;
%include iox_modes;
%page;
%include set_term_type_info;
%page;
%include terminal_type_data;
%page;
%include sys_log_constants;

     end astty_;
