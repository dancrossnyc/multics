/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,^indattr */

/****^  HISTORY COMMENTS:
  1) change(85-11-27,Herbst), approve(87-07-13,MCR7697),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
     New program.
  2) change(86-01-29,Herbst), approve(87-07-13,MCR7697),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
     Changed to accept initial ring number as argument.
  3) change(87-04-01,Brunelle), approve(87-07-13,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Add inactivity system message to those allowed.
  4) change(87-05-31,GDixon), approve(87-07-13,MCR7697),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
     Set group_id to null string rather than *.*.*, because the message really
     is not directed to all users.
  5) change(88-07-15,Brunelle), approve(88-09-13,MCR7980),
     audit(88-09-13,Beattie), install(88-09-16,MR12.2-1112):
     Change calling sequence to take ptr to UTE instead of individual values.
     Use users process authorization not Initiailizer's when adding message to
     the mailbox.  This way an upgraded user can delete the message when it is
     received.
                                                   END HISTORY COMMENTS */

send_system_message_: proc (P_utep, P_message_ptr, P_code);

/* Sends a message to a specified process_id accompanied by a system_message_
   IPS signal. The receiving process has a static handler,
   system_message_handler_, which responds to this signal by reading all the
   outstanding system messages for that recipient. The message sent by this
   program must be of one of the types listed in system_message.incl.pl1.
   The only types currently implemented are
   .  SYSTEM_MESSAGE_TYPE_AS_WARN, which the Answering Service uses to
   implement the operator "warn" command; and
   .  SYSTEM_MESSAGE_TYPE_AS_INACTIVITY, which the Answering Service uses to
   implement the inactivity mechanism.
*/

/* Parameters */

dcl  P_utep ptr parameter;				/* UTE ptr for user to warn */
dcl  P_message_ptr ptr parameter;			/* ptr to message (Input) */
dcl  P_code fixed bin (35) parameter;

/* Automatic */

dcl  1 auto_asum_add_info aligned like as_user_message_add_info;
dcl  message_len fixed bin (18);

/* External */

dcl  error_table_$bad_version fixed bin (35) ext;
dcl  error_table_$badcall fixed bin (35) ext;

/* Entries */

dcl  as_user_message_$priv_add_message entry (ptr, fixed bin (35));
dcl  hphcs_$ips_wakeup entry (bit (36) aligned, char (*));

/* Builtins */

dcl  (addr, currentsize, null, unspec) builtin;
%page;
	if P_message_ptr = null | P_utep = null then do;
BAD_CALL:
	     P_code = error_table_$badcall;
	     return;
	end;

	utep = P_utep;
	P_code = 0;

	system_message_ptr = P_message_ptr;

	if system_message.version ^= SYSTEM_MESSAGE_VERSION_1 then do;
BAD_VERSION:
	     P_code = error_table_$bad_version;
	     return;
	end;

	if system_message.type = SYSTEM_MESSAGE_TYPE_AS_WARN then do;
	     if system_message.type_version ^= SYSTEM_MESSAGE_AS_WARN_V1 then go to BAD_VERSION;
	     message_len = currentsize (warn_system_message);
	end;
	else if system_message.type = SYSTEM_MESSAGE_TYPE_AS_INACTIVITY then do;
	     if system_message.type_version ^= SYSTEM_MESSAGE_AS_INACTIVITY_V1 then go to BAD_VERSION;
	     message_len = currentsize (inactivity_system_message);
	end;
	else if system_message.type = SYSTEM_MESSAGE_TYPE_DM_SHUT then do;
	     if system_message.type_version ^= SYSTEM_MESSAGE_DM_SHUT_V1 then go to BAD_VERSION;
	     message_len = currentsize (dm_shut_system_message);
	end;
	else go to BAD_CALL;

	unspec (auto_asum_add_info) = "0"b;
	auto_asum_add_info.version = AS_USER_MESSAGE_ADD_INFO_VERSION_1;
	auto_asum_add_info.message_ptr = system_message_ptr;
	auto_asum_add_info.message_length = message_len;
	auto_asum_add_info.message_access_class = ute.process_authorization;
	auto_asum_add_info.destination_info.group_id = "";
						/* process id is used instead. */
	auto_asum_add_info.destination_info.process_id = ute.proc_id;
	auto_asum_add_info.destination_info.handle = SYSTEM_MESSAGE_HANDLE;
	auto_asum_add_info.destination_info.ring = ute.initial_ring;
	auto_asum_add_info.reader_deletes = "1"b;

	call as_user_message_$priv_add_message (addr (auto_asum_add_info), P_code);

	call hphcs_$ips_wakeup (ute.proc_id, "system_message_");

	return;

/* format: off */
%page; %include as_user_message_add;
%page; %include system_message;
%page; %include user_attributes;
%page; %include user_message_handles;
%page; %include user_table_entry;			        

end send_system_message_;


	     
