/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
login_parse_: proc (a_lp, a_ll, a_arg, a_lng, a_used, a_code);

/* LOGIN_PARSE_ - this parsing routine is used by parse_login_line_ and
   several other Answering Service programs.  It returns the first argument
   from the line, and tells how many characters were used up.
   Repeated calls should trim off a_used characters from the front of the line. */

/* rewritten 12/28/81 E. N. Kittlitz. added support for quoted arguments, $password entry. */

dcl  a_lp ptr;					/* ptr to input line */
dcl  a_ll fixed bin;				/* length of input line */
dcl  a_arg char (*);				/* output argument */
dcl  a_lng fixed bin;				/* length of output argument */
dcl  a_used fixed bin;				/* number of characters eaten */
dcl  a_code fixed bin (35);				/* error code */


dcl  argp fixed bin;				/* position in output argument */
dcl  arg_rm fixed bin;				/* amount of space left in a_arg */
dcl  cursor fixed bin;				/* logical start of line */
dcl  had_quote bit (1) aligned;			/* ever see a quotation mark? */
dcl  have_quote bit (1) aligned;			/* looking at a quoted string, even as we speak */
dcl  ll fixed bin;					/* line length */
dcl  lp ptr;					/* pointer to input line */
dcl  scan_inc fixed bin;				/* used to delete illegal characters */
dcl  scan_ln fixed bin;				/* used to delete illegal characters */

dcl  line char (ll) based (lp);

dcl  LEGAL char (93) int static options (constant) init	/* Printables except blank, PAD, quote, semicolon, but with BS */
	("!#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
dcl  PW_LEGAL char (94) int static options (constant) init	/* Printables except blank, PAD, semicolon, but with BS */
	("!#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~""");
dcl  PW_LEGAL_TRAIL char (3) int static options (constant) init  /* space, NL, CR */
	(" 
");
dcl  NL char (1) int static options (constant) init ("
");

dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$unbalanced_quotes fixed bin (35) ext static;
%page;
	a_lng = 0;				/* initialize length */
	a_arg = "";				/* initialize output argument */
	a_used = 0;				/* initialize characters used count */
	a_code = 0;				/* no errors */

	lp = a_lp;				/* local copy of parameter */
	ll = a_ll;				/* local copy of parameter */
	arg_rm = length (a_arg);			/* number of output characters allowed */

	had_quote, have_quote = ""b;			/* never had a quotation mark */
	argp = 1;
	cursor = 1;				/* position in line */

	if ll <= 0 then do;
	     a_code = error_table_$noarg;
	     return;
	end;

	cursor = verify (line, "	 ");		/* space and TAB */
	if cursor = 0 then do;
	     a_used = ll;
	     a_code = error_table_$noarg;
	     return;
	end;

	if substr (line, cursor, 1) = ";" |		/* first thing we get is the end */
	     substr (line, cursor, 1) = NL then do;
	     a_used = cursor;
	     a_code = error_table_$noarg;
	end;

loop:	if have_quote then do;
	     scan_ln = search (substr (line, cursor, ll - cursor + 1), """") - 1;
	     if scan_ln < 0 then do;			/* unbalanced quotation marks */
unbalanced_quotes:	a_code = error_table_$unbalanced_quotes;
		a_arg = "";
		a_used = ll;
		return;
	     end;
	end;
	else do;
	     scan_ln = verify (substr (line, cursor, ll - cursor + 1), LEGAL) - 1;
	     if scan_ln < 0 then scan_ln = ll - cursor + 1;
	end;
	substr (a_arg, argp, min (arg_rm, scan_ln)) = substr (line, cursor, scan_ln); /* copy to output argument */
	argp = argp + scan_ln;			/* bump output index */
	arg_rm = max (0, arg_rm - scan_ln);		/* decrement output space left */
	cursor = cursor + scan_ln;			/* skip over those characters */
	if cursor > ll then go to done;
	if substr (line, cursor, 1) = """" then do;
	     cursor = cursor + 1;
	     if ^have_quote then had_quote, have_quote = "1"b;
	     else if cursor > ll then have_quote = ""b;	/* end of string */
	     else if substr (line, cursor, 1) = """" then do;
		cursor = cursor + 1;
		substr (a_arg, argp, min (arg_rm, 1)) = """"; /* put a quote into the output */
		argp = argp + 1;
	     end;
	     else have_quote = ""b;			/* end of quoted string */
	end;
	if cursor <= ll then
	     if have_quote then go to loop;
	     else if index (LEGAL, substr (line, cursor, 1)) > 0 |
		     substr (line, cursor, 1) = """" then go to loop;

done:
	if have_quote then go to unbalanced_quotes;

	if argp = 1 then
	     if had_quote then a_lng = 0;
	     else
		a_code = error_table_$noarg;
	else a_lng = argp - 1;
	a_used = min (cursor, ll);

	return;


password: entry (a_lp, a_ll, a_arg, a_lng, a_used, a_code);

	a_lng = 0;				/* setup output args */
	a_arg = "";
	a_used = 0;
	a_code = 0;

	lp = a_lp;				/* initialize */
	ll = a_ll;

	if ll <= 0 then do;
	     a_code = error_table_$noarg;
	     return;
	end;

	cursor = verify (line, " 	");		/* space and TAB */
	if cursor = 0 then do;
	     a_used = ll;
	     a_code = error_table_$noarg;
	     return;
	end;

	scan_ln = verify (substr (line, cursor, ll - cursor + 1), PW_LEGAL) - 1;
	if scan_ln < 0 then scan_ln = ll - cursor + 1;
	else if scan_ln = 0 then do;
	     a_code = error_table_$noarg;
	     a_used = cursor;
	     return;
	end;
	substr (a_arg, 1, min (length (a_arg), scan_ln)) = substr (line, cursor, scan_ln);
	a_used = cursor + scan_ln;
	a_lng = scan_ln;
	cursor = cursor + scan_ln;
	if verify (substr (line, cursor, ll - cursor + 1), PW_LEGAL_TRAIL) > 0 then
	     a_code = error_table_$bad_arg;


     end login_parse_;
