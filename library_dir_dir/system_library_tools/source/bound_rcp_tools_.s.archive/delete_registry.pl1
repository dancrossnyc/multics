/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


delete_registry: proc;

/* This command deletes RCP registries. */
/* Written 01/03/79 by C. D. Tavares */

/* automatic */

dcl  ap pointer,
     al fixed bin,
     arg char (al) based (ap),
     argno fixed bin,
     code fixed bin (35),
     delete_sw bit (1) aligned,
     dirname char (168),
     ename char (32),
     myname char (32),
     nargs fixed bin,
     star_index fixed bin,
     suffix char (4);

/* static */

dcl  system_free_ptr pointer initial (null) static;

/* external static */

dcl  error_table_$noarg ext fixed bin (35) static;

/* based */

dcl  system_free_area area based (system_free_ptr);

/* entries */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     com_err_ ext entry options (variable),
     cu_$arg_count entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     hcs_$star_ ext entry (char (*), char (*), fixed bin (2), pointer, fixed bin, pointer, pointer, fixed bin (35)),
     get_system_free_area_ ext entry returns (pointer);

dcl (rcp_admin_$delete_registry,
     rcp_sys_$remove_registry) ext entry (char (*), char (*), fixed bin (35));

/* builtins and conditions */

dcl (hbound, null, sum) builtin,
     cleanup condition;

%include star_structures;


/* delete_registry: proc; */

	delete_sw = "1"b;
	suffix = "old";
	myname = "delete_registry";
	goto common;
	
remove_registry: entry;

	delete_sw = ""b;
	suffix = "rcpr";
	myname = "remove_registry";
	goto common;

common:
	call cu_$arg_count (nargs);
	if nargs = 0 then do;
	     call com_err_ (error_table_$noarg, myname, "Usage:  ^a paths", myname);
	     return;
	end;


	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, ap, al, code);
	     if code ^= 0 then call crump (code, "Getting arg.");

	     call expand_pathname_$add_suffix (arg, suffix, dirname, ename, code);
	     if code ^= 0 then call crump (code, arg);

	     call check_star_name_$entry (ename, code);
	     if code > 2 then call crump (code, ename);

	     if code = 0 then call process (ename);	/* not a starname */

	     else do;				/* starname, handle it */
		star_entry_ptr, star_names_ptr = null;
		if system_free_ptr = null then
		     system_free_ptr = get_system_free_area_ ();

		on cleanup call star_cleanup;

		call hcs_$star_ (dirname, ename, star_BRANCHES_ONLY, system_free_ptr,
		     star_entry_count, star_entry_ptr, star_names_ptr, code);

		if code ^= 0 then call crump (code, "^a>^a");

		do star_index = 1 to star_entry_count;
		     call process ((star_names (star_entries (star_index).nindex)));
		end;

		call star_cleanup;

/* ------------------------- */

star_cleanup:	proc;
		     if star_names_ptr ^= null then free star_names in (system_free_area);
						/* remember to free names before entries! */
		     if star_entry_ptr ^= null then free star_entries in (system_free_area);
		end;

/* ------------------------- */

	     end;

get_next_arg:
	end;

	return;
	
process:	proc (ename);

dcl  ename char (32) parameter;

dcl  sleep_times (4) fixed bin (71) static options (constant) initial (1, 1, 2, 6),
     timer_manager_$sleep ext entry (fixed bin (71), bit (2) aligned),
     error_table_$file_busy ext fixed bin (35) static,
     i fixed bin;

	     do i = 1, i+1 to hbound (sleep_times, 1) + 1 while (code = error_table_$file_busy);

		if delete_sw then
		     call rcp_admin_$delete_registry (dirname, ename, code);
		else call rcp_sys_$remove_registry (dirname, ename, code);

		if code = error_table_$file_busy then
		     if i ^> hbound (sleep_times, 1) then
			call timer_manager_$sleep (sleep_times (i), "11"b); /* relative seconds */
	     end;

	     if code ^= 0 then call com_err_ (code, myname, "^a>^a", dirname, ename);
	     return;
	end process;
	
crump:	proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

	     call com_err_ (code, myname, reason, dirname, ename);
	     goto get_next_arg;
	end crump;

     end delete_registry;

