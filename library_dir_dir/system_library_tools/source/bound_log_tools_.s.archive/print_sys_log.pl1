/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/* format: style2,indcomtxt */

print_sys_log:
psl:
     procedure () options (variable);

/* *	PRINT_SYS_LOG
   *
   *	Log-printing procedure for new-format (MR11) logs. See the info file
   *	for details of options too numerous to mention here.
   *
   *	Modification history:
   *	1984-06-05, W. Olin Sibert: Initial coding, inspired by print_syserr_log
   *	1984-08-23, WOS: Added -procedure, -line_length, -output_switch control arguments
   *	1984-10-09, E. Swenson: Fixed bug preventing "-last N" from working.
   *      1984-10-31, WOS: Added -XXX_format, calls to format_log_message_$adjust
   *      1984-12-05, WOS: Fixed for control argument changes, and to handle expansions
   *      1984-12-06, WOS: Added LOG_SELECTOR control arguments
   *	1984-12-06, WOS: Added -dm_sys_log
   *      1984-12-11, BIM: Converted to ssu_ standalone invocation.
   *	1984-12-20, WOS: Added -continuation_indent
   *	1984-12-26, BIM: Changed implementation of -ci to use -1 to mean "default" and to add "standard" keyword.
   *      1985-01-15, BIM: -pid, -data_class, -match/exclude_data_class.
   *	1985-02-07, Steve Herbst: Changed -dms to call dm_misc_util_$get_log_path.
   *	1985-03-13, Steve Herbst: Fixed to recheck time range at end of find_first_message. Fixes bug where
   *		if no messages within time range, procedure was getting the previous and next messages.
   *	1985-03-14, Steve Herbst: Fixed to reject "/foo", "foo/", and "/"
   *		as invalid regular expressions.
   *	1985-03-21, Steve Herbst: Fixed not to recheck time range if the
   *		argument to -from/-to is a sequence number not a time.
   *	1985-04-16, Steve Herbst: Re-implemented -no_data_class, removed
   *		recently by accident.
   *	1985-05-01, Steve Herbst: Fixed to ensure from_time<=to_time.
*/


/****^  HISTORY COMMENTS:
  1) change(86-04-29,Kissel), approve(86-07-31,MCR7456), audit(86-08-01,Wong),
     install(86-11-03,MR12.0-1149):
     Changed to support DSA system and system aep logs, using the -dsasl and
     -dsasal control arguments.  Also increased the size of an automatic
     string which holds interpreted output so longer interpretations could be
     supported.
                                                   END HISTORY COMMENTS */


	declare DM_READER_PROCEDURE	 char (32) init ("dm_log_read_") int static options (constant);
	declare DSA_READER_PROCEDURE	 char (32) init ("dsa_log_admin_gate_") int static options (constant);

	declare dm_system_log_path	 char (168);
	declare dsa_system_log_path	 char (168);
	declare code		 fixed bin (35);

	declare log_read_data_ptr	 pointer;

	declare 1 opt		 automatic,	/* Miscellaneous options for the command itself; */
		2 log_pathname	 char (168),	/* note that formatting options are kept separately */
		2 log_dname	 char (168),	/* in the log_message_format structure */
		2 log_ename	 char (32),
		2 pointers,
		  3 expand_select_ptr
				 pointer,
		  3 lmd_ptr	 pointer,
		2 limit		 aligned like log_limit_info,
		2 reader_procedure	 char (32) varying,
		2 iocb		 pointer,
		2 flags		 aligned,
		  3 debug_sw	 bit (1),
		  3 dm_system_log_sw bit (1),
		  3 reverse_sw	 bit (1),
		  3 from_sw	 bit (1),
		  3 to_sw		 bit (1),
		  3 for_sw	 bit (1),
		  3 last_sw	 bit (1),
		  3 expand_sw	 bit (1),
		  3 octal_sw	 bit (1),
		  3 interpret_sw	 bit (1),
		  3 log_path_sw	 bit (1),
		  3 no_header_sw	 bit (1),
		  3 limit_sw	 bit (1),
		  3 process_id_sw	 bit (1),
		  3 data_class_sw	 bit (1),
		  3 dsa_system_log_sw
				 bit (1);

	declare expand_this_message	 bit (1) aligned;
	declare expand_mode_ptr	 pointer;
	declare expansion		 char (30000) varying;

	declare (fb71_from_time, fb71_to_time)
				 fixed bin (71);

	declare 1 log_open_info	 aligned like log_read_open_info;

	declare sci_ptr		 pointer;

	declare error_table_$bad_arg	 fixed bin (35) external static;
	declare error_table_$bad_conversion
				 fixed bin (35) external static;
	declare error_table_$badopt	 fixed bin (35) external static;
	declare error_table_$invalid_conversion
				 fixed bin (35) external static;
	declare error_table_$moderr	 fixed bin (35) external static;
	declare error_table_$noentry	 fixed bin (35) external static;
	declare error_table_$no_log_message
				 fixed bin (35) external static;
	declare error_table_$noarg	 fixed bin (35) external static;
	declare error_table_$too_many_args
				 fixed bin (35) external static;


	declare iox_$user_output	 pointer external static;

	declare check_gate_access_	 entry (char (*), ptr, fixed bin (35));
	declare com_err_		 entry options (variable);
	declare convert_date_to_binary_
				 entry (char (*), fixed bin (71), fixed bin (35));
	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	declare cu_$arg_list_ptr	 entry returns (pointer);
	declare dm_misc_util_$get_log_path
				 entry (char (*));
	declare dsa_nit_$get_field	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare get_line_length_$switch
				 entry (pointer, fixed bin (35)) returns (fixed bin);
	declare ioa_$ioa_switch	 entry options (variable);
	declare iox_$look_iocb	 entry (char (*), pointer, fixed bin (35));
	declare iox_$put_chars	 entry (pointer, pointer, fixed bin (21), fixed bin (35));
	declare pathname_		 entry (char (*), char (*)) returns (char (168));

	declare log_format_time_	 entry (fixed bin (71)) returns (char (32) varying);
	declare expand_log_message_	 entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
	declare expand_log_message_$append_octal
				 entry (pointer, pointer, fixed binary, character (*) var);
	declare expand_log_message_$append_process_id
				 entry (pointer, pointer, character (*) var);
	declare expand_log_message_$append_data_class
				 entry (pointer, pointer, character (*) var);
	declare format_log_message_$init
				 entry (pointer);
	declare format_log_message_$adjust
				 entry (pointer, fixed bin (35));
	declare format_log_message_$free
				 entry (pointer);
	declare format_log_message_$format
				 entry (pointer, pointer, pointer, char (*) varying, char (*) varying,
				 fixed bin (35));

	declare log_limit_scan_	 entry (pointer, pointer, bit (1) aligned, pointer);
	declare log_expand_select_$add entry (pointer, char (*), fixed bin (35));
	declare log_expand_select_$free
				 entry (pointer);
	declare log_expand_select_$test
				 entry (pointer, pointer, bit (1) aligned, pointer);
	declare log_match_$add_match	 entry (pointer, char (*));
	declare log_match_$add_exclude entry (pointer, char (*));
	declare log_match_$add_match_data
				 entry (pointer, char (*));
	declare log_match_$add_exclude_data
				 entry (pointer, char (*));
	declare log_match_$add_match_data_class
				 entry (pointer, character (*));
	declare log_match_$add_exclude_data_class
				 entry (pointer, character (*));
	declare log_match_$clear_text_strings
				 entry (pointer);
	declare log_match_$clear_data_strings
				 entry (pointer);
	declare log_match_$clear_data_class_strings
				 entry (pointer);
	declare log_match_$add_severity
				 entry (pointer, fixed bin, fixed bin);
	declare log_match_$clear_severity
				 entry (pointer);
	declare log_match_$free	 entry (pointer);
	declare log_match_$test	 entry (pointer, pointer, char (*) varying) returns (bit (1) aligned);
	declare log_read_$open	 entry (char (*), char (*), pointer, fixed bin (35));
	declare log_read_$open_long	 entry (character (*), character (*), pointer, pointer, fixed binary (35));
	declare log_read_$close	 entry (pointer, fixed bin (35));
	declare log_read_$next_message entry (pointer, pointer, fixed bin (35));
	declare log_read_$prev_message entry (pointer, pointer, fixed bin (35));
	declare ssu_$standalone_invocation
				 entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	declare ssu_$arg_count	 entry (ptr, fixed bin);
	declare ssu_$abort_line	 entry options (variable);
	declare ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	declare ssu_$destroy_invocation
				 entry (ptr);
	declare ssu_$get_area	 entry (ptr, ptr, char (*), ptr);
	declare ssu_$set_debug_mode	 entry (ptr, bit (1) aligned);

	declare cleanup		 condition;

	declare WHOAMI		 char (32) internal static options (constant) init ("print_sys_log");
	declare DEFAULT_LINE_LENGTH	 fixed bin internal static options (constant) init (132);

	declare (abs, addr, addwordno, after, before, char, dimension, index, length, null, substr, unspec)
				 builtin;

/**/

	log_read_data_ptr = null ();
	log_message_format_ptr = null ();
	sci_ptr = null ();

	on cleanup
	     begin;				/* Temporary cleanup handler until opt is initialized */
		if sci_ptr ^= null ()
		then call ssu_$destroy_invocation (sci_ptr);
	     end;

	call ssu_$standalone_invocation (sci_ptr, WHOAMI, "1.0", cu_$arg_list_ptr (), ssu_abort, code);
	if code ^= 0
	then do;
		call com_err_ (code, WHOAMI, "Failed to create ssu_ invocation.");
		return;
	     end;

	call initialize_options ();



	on condition (cleanup) call clean_up ();


	call process_arguments ();


	if opt.reader_procedure = ""
	then call log_read_$open (opt.log_dname, opt.log_ename, log_read_data_ptr, code);
	else do;
		log_open_info.version = LOG_READ_OPEN_INFO_VERSION_1;
		log_open_info.reader_procedure = opt.reader_procedure;
		call ssu_$get_area (sci_ptr, null (), "log_read_ copies", log_open_info.allocation_area_ptr);
		log_open_info.allocate_copies = "0"b;	/* That is the inner-ring's job */
		call log_read_$open_long (opt.log_dname, opt.log_ename, addr (log_open_info), log_read_data_ptr, code)
		     ;
	     end;

	if (code ^= 0)
	then call ssu_$abort_line (sci_ptr, code, "Cannot open ^a", opt.log_pathname);

	call log_limit_scan_ (sci_ptr, addr (opt.limit), opt.reverse_sw, log_read_data_ptr);

	call find_first_message ();

	call print_limits ();

	call process_messages ();

MAIN_RETURN:					/* This is the ONLY return statement for this procedure */
	call clean_up ();				/* do the cleanup in the main activation, not the error procedure. */
	return;


ssu_abort:
     procedure ();					/* procedure called by ssu_ when there is a call to abort_line, which is how all errors are reported */
	goto MAIN_RETURN;

     end ssu_abort;



clean_up:
     procedure ();

	if (opt.lmd_ptr ^= null ())
	then call log_match_$free (opt.lmd_ptr);

	if (opt.expand_select_ptr ^= null ())
	then call log_expand_select_$free (opt.expand_select_ptr);

	if (log_read_data_ptr ^= null ())
	then call log_read_$close (log_read_data_ptr, (0));

	if (log_message_format_ptr ^= null ())
	then call format_log_message_$free (log_message_format_ptr);

	if (sci_ptr ^= null ())
	then call ssu_$destroy_invocation (sci_ptr);
	return;
     end clean_up;

/**/

find_first_message:
     procedure ();

	declare exchange_ptr	 pointer;
	declare total_count		 fixed bin;
	declare match_count		 fixed bin;
	declare matching_message_ptr	 pointer;

/* This procedure locates the message we're going to start with, in case we're
   doing something like "-last 10", where log_limit_scan_ can't determine the
   real starting point because it depends on the content of the messages. */

	total_count = 0;

/* First, we swap the limits if we're going to be printing backwards */

	if opt.reverse_sw
	then do;
		exchange_ptr = opt.first_msg;
		opt.first_msg = opt.last_msg;
		opt.last_msg = exchange_ptr;
	     end;

	if (opt.first_msg ^= null ())
	then /* We know where we're starting */
	     go to FOUND;

/* Otherwise, we look backwards to find where to start.  We are guaranteed,
   by log_limit_scan_, that at least one limit is non-null, and also that if
   one is null, there is a limit count. If, however, we run out of messages
   before we hit the limit, that's still OK, and we print all that we have. */

	match_count = 0;
	log_message_ptr = opt.last_msg;
	matching_message_ptr = null ();		/* Most recent matching message */

	do total_count = 1 by 1 while (match_count < opt.msg_count);
	     if message_matches ()
	     then do;
		     match_count = match_count + 1;
		     matching_message_ptr = log_message_ptr;
		end;

	     call prev_message ();
	     if (log_message_ptr = null ())
	     then /* If we've run out, terminate the loop */
		match_count = opt.msg_count;
	end;

	if (matching_message_ptr = null ())
	then
NO_MESSAGES:
	     call ssu_$abort_line (sci_ptr, 0, "No messages matched criteria. ^d message^[s^] read.", total_count,
		(total_count ^= 1));

	opt.first_msg = matching_message_ptr;
FOUND:
	return;

     end find_first_message;

/**/

print_limits:
     procedure ();

	if opt.no_header_sw
	then return;

	if (opt.first_msg = null ())
	then call ioa_$ioa_switch (opt.iocb, "Log ^a to ^a", opt.log_pathname,
		log_format_time_ ((opt.last_msg -> log_message.time)));

	else if (opt.last_msg = null ())
	then call ioa_$ioa_switch (opt.iocb, "Log ^a from ^a", opt.log_pathname,
		log_format_time_ ((opt.first_msg -> log_message.time)));

	else call ioa_$ioa_switch (opt.iocb, "Log ^a from ^a to ^a", opt.log_pathname,
		log_format_time_ ((opt.first_msg -> log_message.time)),
		log_format_time_ ((opt.last_msg -> log_message.time)));

	return;
     end print_limits;

/**/

process_messages:
     procedure ();

	declare prev_message_ptr	 pointer;
	declare message_limit	 fixed bin (35);
	declare message_count	 fixed bin (35);


	prev_message_ptr = null ();
	log_message_ptr = opt.first_msg;

	if (opt.msg_count > 0)
	then message_limit = opt.msg_count;
	else message_limit = 100000000;		/* Meaning, everything */
	message_count = 0;

	do while (log_message_ptr ^= null ());		/* Catch running out of messages benignly */
	     if message_matches ()
	     then /* Print it if it matches */
		call process_a_message ();

	     if (log_message_ptr = opt.last_msg)
	     then /* All done */
		return;

	     if (message_count >= message_limit)
	     then /* Ran out of requested messages */
		return;

	     call next_message ();
	end;

	return;



process_a_message:
     procedure ();

	declare output_buffer	 char (30000) varying;

/* This is where we put the selection tests */

	message_count = message_count + 1;

	if ^opt.interpret_sw
	then /* If not interpreting, then definitely not */
	     expand_this_message = "0"b;
	else if (dimension (log_message.data, 1) = 0)
	then /* And, if no data, also definitely not */
	     expand_this_message = "0"b;
	else if (opt.expand_select_ptr = null ())
	then do;					/* But if we are interpreting, and no classes were */
		expand_this_message = "1"b;		/* asked for, we do expand this one's data */
		expand_mode_ptr = null ();		/* But, obviously, there were no expand modes asked for */
	     end;
	else call log_expand_select_$test
		/* Otherwise, we ask the selector */ (opt.expand_select_ptr, log_message_ptr, expand_this_message,
		expand_mode_ptr);

	if expand_this_message
	then call expand_log_message_ (log_message_format_ptr, log_message_ptr, expand_mode_ptr, expansion, (0));
	else expansion = "";			/* This one has nothing for the formatter */
	if opt.octal_sw
	then call expand_log_message_$append_octal (log_message_format_ptr, addr (log_message.data),
		(log_message.data_lth), expansion);
	if opt.data_class_sw & log_message.data_class ^= ""
	then call expand_log_message_$append_data_class (log_message_format_ptr, log_message_ptr, expansion);
	if opt.process_id_sw
	then call expand_log_message_$append_process_id (log_message_format_ptr, log_message_ptr, expansion);

	call format_log_message_$format (log_message_format_ptr, log_message_ptr, prev_message_ptr, expansion,
	     output_buffer, (0));

	call iox_$put_chars (opt.iocb, addwordno (addr (output_buffer), 1), length (output_buffer), (0));
						/* Buffer contains own newline */
	prev_message_ptr = log_message_ptr;

	return;
     end process_a_message;

     end process_messages;

/**/

message_matches:
     procedure () returns (bit (1) aligned);

/* This procedure determines whether the current message matches selection
   criteria. It first checks the text of the message, then, if that matches,
   expands the binary data (if any) and tries again. */

	if (^log_match_$test (opt.lmd_ptr, log_message_ptr, ""))
	then return ("0"b);

	if ^opt.interpret_sw
	then return ("1"b);				/* No need to expand */

	if opt.expand_select_ptr = null ()
	then do;
		expand_this_message = "1"b;
		expand_mode_ptr = null ();
	     end;
	else call log_expand_select_$test (opt.expand_select_ptr, log_message_ptr, expand_this_message, expand_mode_ptr)
		;

	if ^expand_this_message
	then return ("1"b);				/* No expand, no exclude on expansion */
	call expand_log_message_ (log_message_format_ptr, log_message_ptr, expand_mode_ptr, expansion, (0));

	return (log_match_$test (opt.lmd_ptr, log_message_ptr, expansion));
     end message_matches;

next_message:
     procedure ();

/* This procedure advances to the next message, returning with log_message_ptr
   set to null when it encounters no further messages. */

	if opt.reverse_sw
	then call log_read_$prev_message (log_read_data_ptr, log_message_ptr, code);
	else call log_read_$next_message (log_read_data_ptr, log_message_ptr, code);

	if (code = error_table_$no_log_message)
	then log_message_ptr = null ();		/* Force quiet loop termination */

	else if (code ^= 0)
	then call ssu_$abort_line (sci_ptr, code, "Reading next message.");

	return;
     end next_message;				/*						*/
prev_message:
     procedure ();

/* This procedure advances to the previous message, returning with log_message_ptr
   set to null when it encounters no further messages. */

	if opt.reverse_sw
	then call log_read_$next_message (log_read_data_ptr, log_message_ptr, code);
	else call log_read_$prev_message (log_read_data_ptr, log_message_ptr, code);

	if (code = error_table_$no_log_message)
	then log_message_ptr = null ();		/* Force quiet loop termination */

	else if (code ^= 0)
	then call ssu_$abort_line (sci_ptr, code, "Reading previous message.");

	return;
     end prev_message;

/**/

initialize_options:
     procedure ();

/* This must be run before the cleanup handler gets set up */

	unspec (opt) = ""b;				/* Turn all options off */
	opt.pointers = null ();			/* Aggregate assignment */
	opt.limit.version = LOG_LIMIT_INFO_VERSION_1;
	opt.limit.to_opt = "";			/* Set up to call the limit scanner */
	opt.limit.from_opt = "";
	opt.limit.for_opt = "";
	opt.limit.last_opt = "";
	opt.log_pathname = "";
	opt.iocb = iox_$user_output;

	call format_log_message_$init (log_message_format_ptr);
	log_message_format.caller = WHOAMI;
	log_message_format.equal_sw = "1"b;		/* Default */

	log_message_format.line_lth = get_line_length_$switch (opt.iocb, code);
	if (code ^= 0)
	then log_message_format.line_lth = DEFAULT_LINE_LENGTH;
						/* Pretend to be a printer, by default */

	call adjust_log_message_format ("Initializing log_message_format structure", "");

	opt.reader_procedure = "";			/* Default */
	return;
     end initialize_options;

/**/

process_arguments:
     procedure ();

	declare arg		 char (arg_lth) based (arg_ptr);
	declare arg_lth		 fixed bin (21);
	declare arg_ptr		 pointer;
	declare arg_count		 fixed bin;
	declare arg_idx		 fixed bin;

	declare looking_for		 fixed bin;
	declare number_arg		 char (20) varying;
	declare pathname_arg	 char (168) varying;
	declare iocb_arg		 char (32) varying;

	declare LOG_PATHNAME	 init (1) fixed bin internal static options (constant);
	declare MATCH_STRING	 init (2) fixed bin internal static options (constant);
	declare EXCLUDE_STRING	 init (3) fixed bin internal static options (constant);
	declare MATCH_DATA_STRING	 init (4) fixed bin internal static options (constant);
	declare EXCLUDE_DATA_STRING	 init (5) fixed bin internal static options (constant);
	declare SEVERITY		 init (6) fixed bin internal static options (constant);
	declare EXPAND_TYPE		 init (8) fixed bin internal static options (constant);
	declare MATCH_DATA_CLASS_STRING
				 init (9) fixed bin internal static options (constant);
	declare EXCLUDE_DATA_CLASS_STRING
				 init (10) fixed bin internal static options (constant);
						/*						*/

	call ssu_$arg_count (sci_ptr, arg_count);

	looking_for = 0 - LOG_PATHNAME;		/* Start out "casually" looking for a pathname */

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_lth);

	     if (looking_for > 0)
	     then do;				/* First one after a control argument */
		     call process_looking_for ();	/* -match -fred matches "-fred", but */
		     looking_for = 0 - looking_for;	/* -match str -fred is an error */
		end;				/* "Casually" looking for signalled by negative value */

	     else if (arg = "-syserr")
	     then call set_pathname (">sl1>syserr_log");
	     else if (arg = "-answering_service") | (arg = "-as")
	     then call set_pathname (">sc1>as_logs>log");
	     else if (arg = "-admin")
	     then call set_pathname (">sc1>as_logs>admin_log");
	     else if (arg = "-pathname") | (arg = "-pn")
	     then do;
		     call get_next_arg (pathname_arg);
		     call set_pathname (pathname_arg);
		end;
	     else if (arg = "-mc_log") | (arg = "-mcl")
	     then do;
		     call get_next_arg (pathname_arg);
		     call set_pathname (">sc1>as_logs>" || pathname_arg);
		end;
	     else if (arg = "-dm_system") | (arg = "-dms")
	     then do;
		     opt.dm_system_log_sw = "1"b;
		     call dm_misc_util_$get_log_path (dm_system_log_path);
		     call set_pathname ((dm_system_log_path));
		     opt.reader_procedure = DM_READER_PROCEDURE;
		end;

	     else if (arg = "-dsa_sys_log") | (arg = "-dsasl")
	     then do;
		     opt.dsa_system_log_sw = "1"b;

		     /*** Check to see if we will succeed. */

		     call check_gate_access_ (DSA_READER_PROCEDURE, null (), code);

		     if code = error_table_$noentry
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "DSA is not installed on this system.")
			     ;
		     else if code = error_table_$moderr
		     then call ssu_$abort_line (sci_ptr, code, "You need e access to ^a to read the DSA log.",
			     DSA_READER_PROCEDURE);
		     else if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code, "Trying to check the access to: ^a.",
			     DSA_READER_PROCEDURE);

		     /*** The code was 0, proceed. */

		     else call dsa_nit_$get_field ("mna_general_info", "", "dsa_system_log", dsa_system_log_path,
			     code);

		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code, "Cannot find the name of the dsa system log.");

		     call set_pathname ((dsa_system_log_path));
		     opt.reader_procedure = DSA_READER_PROCEDURE;
		end;

	     else if (arg = "-dsa_sys_aep_log") | (arg = "-dsasal")
	     then do;
		     opt.dsa_system_log_sw = "1"b;

		     /*** Check to see if we will succeed. */

		     call check_gate_access_ (DSA_READER_PROCEDURE, null (), code);

		     if code = error_table_$noentry
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "DSA is not installed on this system.")
			     ;
		     else if code = error_table_$moderr
		     then call ssu_$abort_line (sci_ptr, code, "You need e access to ^a to read the DSA log.",
			     DSA_READER_PROCEDURE);
		     else if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code, "Trying to check the access to: ^a.",
			     DSA_READER_PROCEDURE);

		     /*** The code was 0, proceed. */

		     else call dsa_nit_$get_field ("mna_general_info", "", "dsa_system_aep_log", dsa_system_log_path,
			     code);

		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code, "Cannot find the name of the dsa system aep log.");

		     call set_pathname ((dsa_system_log_path));
		     opt.reader_procedure = DSA_READER_PROCEDURE;
		end;

	     else if (arg = "-forward") | (arg = "-fwd")
	     then opt.reverse_sw = "0"b;
	     else if (arg = "-reverse") | (arg = "-rv")
	     then opt.reverse_sw = "1"b;
	     else if (arg = "-header") | (arg = "-he")
	     then opt.no_header_sw = "0"b;
	     else if (arg = "-no_header") | (arg = "-nhe")
	     then opt.no_header_sw = "1"b;
	     else if (arg = "-duplicates") | (arg = "-dup")
	     then do;
		     log_message_format.equal_sw = "0"b;
		     call adjust_log_message_format ("Processing -duplicates argument.", "");
		end;

	     else if (arg = "-debug") | (arg = "-db")
	     then do;
		     log_message_format.equal_sw = "0"b;
		     call adjust_log_message_format ("Processing -debug argument.", "");
		     opt.debug_sw = "1"b;
		     call ssu_$set_debug_mode (sci_ptr, "1"b);
		end;

	     else if (arg = "-no_duplicates") | (arg = "-ndup")
	     then do;
		     log_message_format.equal_sw = "1"b;
		     call adjust_log_message_format ("Processing -no_duplicates argument.", "");
		end;

	     else if (arg = "-absolute_pathname") | (arg = "-absp")
	     then opt.log_path_sw = "1"b;
	     else if (arg = "-no_absolute_pathname") | (arg = "-nabsp")
	     then opt.log_path_sw = "1"b;
	     else if (arg = "-limits") | (arg = "-lim")
	     then opt.limit_sw = "1"b;

	     else if (arg = "-match") | (arg = "-mh")
	     then looking_for = MATCH_STRING;
	     else if (arg = "-exclude") | (arg = "-ex")
	     then looking_for = EXCLUDE_STRING;
	     else if (arg = "-match_data") | (arg = "-md")
	     then looking_for = MATCH_DATA_STRING;
	     else if (arg = "-exclude_data") | (arg = "-exd")
	     then looking_for = EXCLUDE_DATA_STRING;
	     else if (arg = "-match_data_class") | (arg = "-mdc")
	     then looking_for = MATCH_DATA_CLASS_STRING;
	     else if (arg = "-exclude_data_class") | (arg = "-exdc")
	     then looking_for = EXCLUDE_DATA_CLASS_STRING;
	     else if (arg = "-all_data_classes") | (arg = "-adc")
	     then call log_match_$clear_data_class_strings (opt.lmd_ptr);
	     else if (arg = "-all_text") | (arg = "-atxt")
	     then call log_match_$clear_text_strings (opt.lmd_ptr);
	     else if (arg = "-all_data") | (arg = "-ad")
	     then call log_match_$clear_data_strings (opt.lmd_ptr);

	     else if (arg = "-severity") | (arg = "-sv") | (arg = "-action")
	     then looking_for = SEVERITY;

	     else if (arg = "-all_severities") | (arg = "-asv")
	     then call log_match_$clear_severity (opt.lmd_ptr);

	     else if (arg = "-process_id") | (arg = "-pid")
	     then opt.process_id_sw = "1"b;

	     else if (arg = "-no_process_id") | (arg = "-npid")
	     then opt.process_id_sw = "0"b;

	     else if (arg = "-data_class") | (arg = "-dc")
	     then opt.data_class_sw = "1"b;

	     else if (arg = "-no_data_class") | (arg = "-ndc")
	     then opt.data_class_sw = "0"b;

/**** -match_data_class, -exclude_data_class, -all_data_classes */

	     else if (arg = "-expand") | (arg = "-exp")
	     then do;
		     looking_for = (0 - EXPAND_TYPE);	/* Don't necessarily eat the next argument */
		     opt.expand_sw = "1"b;
		end;

	     else if (arg = "-no_expand") | (arg = "-nexp")
	     then do;
		     opt.expand_sw = "0"b;
		     opt.octal_sw = "0"b;
		     opt.interpret_sw = "0"b;
		end;

	     else if (arg = "-octal") | (arg = "-oc")
	     then do;
		     opt.expand_sw = "1"b;
		     opt.octal_sw = "1"b;
		end;

	     else if (arg = "-interpret") | (arg = "-int") | (arg = "-it")
	     then do;
		     opt.expand_sw = "1"b;
		     opt.interpret_sw = "1"b;
		end;


	     else if (arg = "-from") | (arg = "-fm")
	     then call get_next_arg (opt.limit.from_opt);
	     else if (arg = "-last") | (arg = "-lt")
	     then call get_next_arg (opt.limit.last_opt);
	     else if (arg = "-to")
	     then call get_next_arg (opt.limit.to_opt);
	     else if (arg = "-for") | (arg = "-next")
	     then call get_next_arg (opt.limit.for_opt);

	     else if (arg = "-procedure") | (arg = "-proc")
	     then call get_next_arg (opt.reader_procedure);

	     else if (arg = "-line_length") | (arg = "-ll")
	     then do;
		     call get_next_arg (number_arg);
		     log_message_format.line_lth = cv_dec_check_ ((number_arg), code);
		     if (code ^= 0) | (log_message_format.line_lth < 25) | (log_message_format.line_lth > 500)
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
			     "Line length must be between 25 and 500, not ^a", number_arg);

		     call adjust_log_message_format ("Processing -line_length.", arg);
		end;				/* Of -line_length processing */

	     else if (arg = "-output_switch") | (arg = "-osw")
	     then do;
		     call get_next_arg (iocb_arg);
		     call iox_$look_iocb ((iocb_arg), opt.iocb, code);
		     if (code ^= 0)
		     then call ssu_$abort_line (sci_ptr, code, "I/O switch ^a", iocb_arg);

		     log_message_format.line_lth = get_line_length_$switch (opt.iocb, code);
		     if (code ^= 0)
		     then /* Must reset the line length, also reapply the default */
			log_message_format.line_lth = DEFAULT_LINE_LENGTH;

		     call adjust_log_message_format ("Setting line length from -output_switch", arg);
		end;				/* Of -line_length processing */

	     else if (arg = "-indent") | (arg = "-ind") | (arg = "-in")
	     then do;
		     call get_next_arg (number_arg);
		     log_message_format.indentation = cv_dec_check_ ((number_arg), code);
		     if (code ^= 0) | (log_message_format.indentation < 0) | (log_message_format.indentation > 50)
		     then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
			     "Indentation must be between 0 and 50, not ^a", number_arg);

		     call adjust_log_message_format ("Processing -indent", arg);
		end;				/* Of -indent processing */

	     else if (arg = "-continuation_indent") | (arg = "-ci")
	     then do;
		     call get_next_arg (number_arg);
		     if number_arg = "standard" | number_arg = "std"
		     then log_message_format.continuation_indent = -1;
		     else do;
			     log_message_format.continuation_indent = cv_dec_check_ ((number_arg), code);
			     if (code ^= 0) | (log_message_format.continuation_indent < 0)
				| (log_message_format.continuation_indent > 50)
			     then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
				     "Continuation indent must be between 0 and 50 or ""standard"", not ^a",
				     number_arg);

			end;
		     call adjust_log_message_format ("Processing -continuation_indent", arg);
		end;				/* Of -continuation_indent processing */

	     else if (arg = "-prefix") | (arg = "-pfx")
	     then do;
		     call get_next_arg (log_message_format.prefix);
		     call adjust_log_message_format ("Processing -prefix", arg);
		end;				/* Of -prefix processing */


	     else if (arg = "-time_format") | (arg = "-tfmt")
	     then do;
		     call get_next_arg (log_message_format.time_format);
		     call adjust_log_message_format ("Processing -time_format", arg);
		end;

	     else if (arg = "-date_format") | (arg = "-dfmt")
	     then do;
		     call get_next_arg (log_message_format.date_format);
		     call adjust_log_message_format ("Processing -date_format", arg);
		end;

	     else if (arg = "-number_format") | (arg = "-nfmt")
	     then do;
		     call get_next_arg (log_message_format.number_format);
		     call adjust_log_message_format ("Processing -number_format", arg);
		end;

	     else if (index (arg, "-") = 1)
	     then call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);

	     else call process_looking_for ();
	end;					/* of loop through arguments */

	call check_options ();

	return;					/* End of argument processing */

/**/

process_looking_for:
     procedure ();

	declare really_looking_for	 fixed bin;
	declare severity1		 fixed bin;
	declare severity2		 fixed bin;


	really_looking_for = abs (looking_for);

/* Weed out invalid regular expressions in match/exclude args */

	if really_looking_for = MATCH_STRING | really_looking_for = EXCLUDE_STRING
	     | really_looking_for = MATCH_DATA_STRING | really_looking_for = EXCLUDE_DATA_STRING
	     | really_looking_for = MATCH_DATA_CLASS_STRING | really_looking_for = EXCLUDE_DATA_CLASS_STRING
	then if substr (arg, 1, 1) = "/" & substr (arg, arg_lth, 1) ^= "/"
	     then
INVALID_REGULAR_EXPRESSION:
		call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "Invalid regular expression ""^a""", arg);
	     else if substr (arg, arg_lth, 1) = "/" & substr (arg, 1, 1) ^= "/"
	     then go to INVALID_REGULAR_EXPRESSION;
	     else if arg = "/"
	     then go to INVALID_REGULAR_EXPRESSION;


	if (really_looking_for = LOG_PATHNAME)
	then call set_pathname ((arg));

	else if (really_looking_for = MATCH_STRING)
	then call log_match_$add_match (opt.lmd_ptr, arg);

	else if (really_looking_for = EXCLUDE_STRING)
	then call log_match_$add_exclude (opt.lmd_ptr, arg);

	else if (really_looking_for = MATCH_DATA_STRING)
	then call log_match_$add_match_data (opt.lmd_ptr, arg);

	else if (really_looking_for = EXCLUDE_DATA_STRING)
	then call log_match_$add_exclude_data (opt.lmd_ptr, arg);

	else if (really_looking_for = MATCH_DATA_CLASS_STRING)
	then call log_match_$add_match_data_class (opt.lmd_ptr, arg);

	else if (really_looking_for = EXCLUDE_DATA_CLASS_STRING)
	then call log_match_$add_exclude_data_class (opt.lmd_ptr, arg);

	else if (really_looking_for = SEVERITY)
	then do;
		severity1 = cv_dec_check_ (before (arg, ":"), code);
		if (code ^= 0)
		then
INVALID_SEVERITY_RANGE:
		     call ssu_$abort_line (sci_ptr, error_table_$invalid_conversion,
			"Invalid severity value ""^a"": must be <N> or <N>:<M>", arg);

		if (index (arg, ":") = 0)
		then /* Not a range, just a single number */
		     severity2 = severity1;
		else severity2 = cv_dec_check_ (after (arg, ":"), code);
		if (code ^= 0)
		then goto INVALID_SEVERITY_RANGE;

		call log_match_$add_severity (opt.lmd_ptr, severity1, severity2);
	     end;

	else if (really_looking_for = EXPAND_TYPE)
	then do;
		call log_expand_select_$add (opt.expand_select_ptr, arg, code);
		if (code ^= 0)
		then call ssu_$abort_line (sci_ptr, code, "Invalid expansion type/modes: ""^a"".", arg);
	     end;

	return;
     end process_looking_for;

/**/

get_next_arg:
     procedure (P_option);

	declare P_option		 char (*) varying parameter;


	if (arg_idx >= arg_count)
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "Value missing after ^a", arg);

	arg_idx = arg_idx + 1;
	call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_lth);

	P_option = arg;

	return;
     end get_next_arg;



set_pathname:
     procedure (P_pathname);

	declare P_pathname		 char (*) varying parameter;

/* This is a separate procedure both for convenience, and also to ease the
   implementation of reading multiple logs-- just take out the restriction,
   and add the proper support in open. */


	if (opt.log_pathname ^= "")
	then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one log pathname: ^a invalid", P_pathname)
		;

	call expand_pathname_ ((P_pathname), opt.log_dname, opt.log_ename, code);
	if (code ^= 0)
	then call ssu_$abort_line (sci_ptr, code, "Invalid log pathname: ^a", P_pathname);

	opt.log_pathname = pathname_ (opt.log_dname, opt.log_ename);
						/* Value used in messages */

	return;
     end set_pathname;

/**/

check_options:
     procedure ();

	dcl     temp_number		 fixed bin;
	dcl     (from_time, to_time)	 fixed bin (71);
	dcl     exchange_opt	 char (50) varying;
	dcl     code		 fixed bin (35);

	if (opt.log_pathname = "")
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage:^-^a  LOG-SELECTOR  {-control_args}", WHOAMI);

	if (looking_for > 0)
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "After ^a", arg);

	if opt.expand_sw & ^(opt.octal_sw | opt.interpret_sw)
	then opt.interpret_sw = "1"b;			/* If neither specified, default is -interpret */

/* Make sure the -from time is less than the -to time */

	if opt.limit.from_opt ^= "" & opt.limit.to_opt ^= ""
	then do;
		temp_number = cv_dec_check_ ((opt.limit.from_opt), code);
		if code ^= 0
		then do;
			temp_number = cv_dec_check_ ((opt.limit.to_opt), code);
			if code ^= 0
			then do;
				call convert_date_to_binary_ ((opt.limit.from_opt), from_time, 0);
				call convert_date_to_binary_ ((opt.limit.to_opt), to_time, 0);
				if from_time > to_time
				then do;
					exchange_opt = opt.limit.from_opt;
					opt.limit.from_opt = opt.limit.to_opt;
					opt.limit.to_opt = exchange_opt;
				     end;
			     end;
		     end;
	     end;

	return;

     end check_options;

     end process_arguments;

/**/

adjust_log_message_format:
     procedure (P_doing_what, P_doing_it_with);

	declare P_doing_what	 char (*) parameter;
	declare P_doing_it_with	 char (*) parameter;


	call format_log_message_$adjust (log_message_format_ptr, code);
	if (code = 0)
	then /* All OK */
	     return;

	call ssu_$abort_line (sci_ptr, code, "^a ^a",	/* Hope this identifies the source of error correctly */
	     P_doing_what, P_doing_it_with);		/* There are many possible errors from $adjust */

     end adjust_log_message_format;

%page;
%include log_message;
%page;
%include log_message_format;
%page;
%include log_limit_info;
%page;
%include log_read_open_info;
     end print_sys_log;
