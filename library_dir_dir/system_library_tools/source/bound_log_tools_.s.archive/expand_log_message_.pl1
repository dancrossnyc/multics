/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
expand_log_message_:
     procedure (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

/* *	EXPAND_LOG_MESSAGE_
   *
   *	This is the procedure used to generate the text expansions of binary
   *	data in sys log messages. Basically, it is just a wrapper for the
   *	per-message formatting routines. For efficiency's sake, it knows the
   *	names of some of them, and references them through links, but it can
   *	find all the others by calling hcs_$make_entry. It must be given a
   *	log_message_format_ptr, created by calling format_log_message_$init, which
   *	it just passes on to the per-message routines.
   *
   *      Modification history:
   *      84-07-04, W. Olin Sibert: Initial coding
   *      84-12-05, WOS: Added "syserr", corrected data class declaration to 16 chars
   *      1985-01-15, BIM: added $append_(process_id, data_class)
   *	1985-01-21, EJ Sharpe: removed "syserr", call $unknown when make_entry fails
   */

declare	P_log_message_format_ptr pointer parameter;
declare	P_log_message_ptr pointer parameter;
declare	P_expand_mode_ptr pointer parameter;
declare	P_expansion char (*) varying parameter;
declare	P_code fixed bin (35) parameter;

declare	expand_class char (16) varying;
declare	expand_proc_name char (32);
declare	expand_proc variable entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));


declare   expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));

declare	hcs_$make_entry entry (pointer, char (*), char (*), entry, fixed bin (35));
declare   ioa_$rsnnl entry options (variable);

declare  (codeptr, rtrim) builtin;

/* */

	log_message_ptr = P_log_message_ptr;
	P_code = 0;
          P_expansion = "";

	if (log_message.data_lth = 0) then return;	/* Nothing to expand */

	expand_class = rtrim (log_message.data_class);

          if (expand_class = "") then expand_proc = expand_log_message_$unknown;
	else do;
	     expand_proc_name = "expand_" || expand_class || "_msg_";
	     call hcs_$make_entry (codeptr (expand_log_message_), expand_proc_name, "format", expand_proc, P_code);
	     if (P_code ^= 0) then expand_proc = expand_log_message_$unknown;
	     end;


          call expand_proc (P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;

/*  */

/* Some utility entrypoints for adding standard-format data to an expanded message. */

expand_log_message_$append_octal:
     entry (P_log_message_format_ptr, P_data_ptr, P_data_size, P_expansion);

declare   P_data_ptr pointer parameter;
declare   P_data_size fixed bin parameter;

declare   words_per_line fixed bin;
declare   available_chars fixed bin;
declare   words_ptr pointer;
declare   words_left fixed bin;
declare   words (min (words_left, words_per_line)) bit (36) aligned based (words_ptr);
declare   temp char (150) varying;


          log_message_format_ptr = P_log_message_format_ptr;

          available_chars = log_message_format.line_lth - log_message_format.continuation_indent;
          do words_per_line = 8, 4, 2, 1;
               if (available_chars > (words_per_line * (12 + 1))) then
                    goto HAVE_CORRECT_SIZE;
               end;

HAVE_CORRECT_SIZE:
          words_left = P_data_size;
          words_ptr = P_data_ptr;

          do while (words_left > 0);
               call ioa_$rsnnl ("^(^w ^)^/", temp, (0), words);
               P_expansion = P_expansion || temp;
               words_left = words_left - words_per_line;
               words_ptr = addrel (words_ptr, words_per_line);
               end;

          return;

expand_log_message_$append_process_id:
	entry (P_log_message_format_ptr, P_log_message_ptr, P_expansion);

	log_message_format_ptr = P_log_message_format_ptr;

	log_message_ptr = P_log_message_ptr;

          available_chars = log_message_format.line_lth - log_message_format.continuation_indent;

	/**** Process ID: NNNNNNNNNNNN */

	if available_chars < 24 then 
	     call ioa_$rsnnl ("PID: ^w^/", temp, (0), log_message.process_id);
	else call ioa_$rsnnl ("Process ID: ^w^/", temp, (0), log_message.process_id);
	P_expansion = P_expansion || temp;
	return;

expand_log_message_$append_data_class:
	entry (P_log_message_format_ptr, P_log_message_ptr, P_expansion);

	log_message_format_ptr = P_log_message_format_ptr;

	log_message_ptr = P_log_message_ptr;
	if log_message.data_class = "" then return; /* Nothing to add */

	call ioa_$rsnnl ("Data class: ^a^/", temp, (0), log_message.data_class);
	P_expansion = P_expansion || temp;
	return;


/*  */

expand_log_message_$unknown:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          call ioa_$rsnnl ("Unknown log message class ""^a"":^/", temp, (0), log_message.data_class);
          P_expansion = P_expansion || temp;

          call expand_log_message_$append_octal (P_log_message_format_ptr,
               addr (log_message.data (1)), dimension (log_message.data, 1), P_expansion);

          return;



/* This is a compatibility entrypoint-- it is used to process unknown messages
   in old-style "syserr" format. */

expand_log_message_$unknown_syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          call ioa_$rsnnl ("Unknown syserr message type ^d:^/", temp, (0),
               binary (log_message.data (1)));
          P_expansion = P_expansion || temp;

          call expand_log_message_$append_octal (P_log_message_format_ptr,
               addr (log_message.data (2)), (dimension (log_message.data, 1) - 1), P_expansion);

          return;

%page; %include log_message;
%page; %include log_message_format;

	end expand_log_message_;
