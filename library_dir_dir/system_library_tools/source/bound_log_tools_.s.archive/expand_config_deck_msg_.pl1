/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
expand_config_deck_msg_:
     procedure ();

/* *      EXPAND_CONFIG_DECK_MSG_
   *
   *      Expander for config deck messages logged during initialization.
   *
   *      84-12-05, W. Olin Sibert: Initial coding, after print_syserr_msg_
   */

declare   P_log_message_format_ptr pointer parameter;
declare   P_log_message_ptr pointer parameter;
declare   P_expand_mode_ptr pointer parameter;
declare   P_expansion char (*) varying parameter;
declare   P_code fixed bin (35) parameter;

declare   first_cardp pointer;
declare   data_left fixed bin;
declare   field_no fixed bin;
declare   temp char (20) varying;
declare   config_card_field_in_ascii char (4) based;

declare   ioa_$rsnnl entry options (variable);

declare  (addr, dimension, length, rtrim, size, string, unspec) builtin;

/*  */

expand_config_deck_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          data_left = dimension (log_message.data, 1);
          cardp = addr (log_message.data (1));

          goto COMMON;



/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_config_deck_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          data_left = dimension (log_message.data, 1) - 1;
          cardp = addr (log_message.data (2));

          goto COMMON;

/*  */

COMMON:
          do while (data_left > 0);
               P_expansion = P_expansion || config_card.word;

               do field_no = 1 to config_card.type_word.n_fields;
                    if (config_card.type_word.field_type (field_no) = CONFIG_STRING_TYPE) then
                         temp = addr (config_card.data_field (field_no)) -> config_card_field_in_ascii;
                    else if (config_card.type_word.field_type (field_no) = CONFIG_OCTAL_TYPE) then
                         call ioa_$rsnnl ("^o", temp, (0), binary (config_card.data_field (field_no)));
                    else if (config_card.type_word.field_type (field_no) = CONFIG_DECIMAL_TYPE) then
                         call ioa_$rsnnl ("^d.", temp, (0), binary (config_card.data_field (field_no)));
                    else if (config_card.type_word.field_type (field_no) = CONFIG_SINGLE_CHAR_TYPE) then
                         temp = substr ("abcdefgh", binary (config_card.data_field (field_no)), 1);
                    else call ioa_$rsnnl ("^w", temp, (0), config_card.data_field (field_no));

                    P_expansion = P_expansion || "  ";      /* Separate items by double blanks */
                    P_expansion = P_expansion || temp;
                    end;

               P_expansion = P_expansion || byte (10);      /* and separate cards by newlines */

               data_left = data_left - size (config_card);  /* Move on to the next card */
               cardp = addrel (cardp, size (config_card));
               end;

          return;

%page; %include log_message;
%page; %include config_deck;

          end expand_config_deck_msg_;
