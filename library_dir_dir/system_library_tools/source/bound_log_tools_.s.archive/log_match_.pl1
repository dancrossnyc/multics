/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
log_match_:
     procedure ();

/* *	LOG_MATCH_
   *
   *	This procedure is in charge of selecting messages from a log.
   *	Given a message, it returns true or false, depending on whether
   *	the message matches the criteria established by earlier calls
   *	that created the lmd ("log match data") structure. This procedure
   *	implements selection by matching/exclusion on the message text,
   *	matching/exclusion on the formatted data, and the severity and
   *	severity class of the message.
   *
   *	It is completely responsible for maintaining the lmd data structure;
   *	this is allocated when first needed, and reallicated as required. For
   *	string matching, it relies on the procedure match_strings_ to do
   *	the necessary management; two sets of strings are maintained, one
   *	for message text, and one for expanded message data.
   *
   *	84-06-08, W. Olin Sibert
   * Modified 1984-10-24 BIM for $print.
   * Modified 1984-11-30 BIM to indent value in $print.
   * Modified 1985-01-16, BIM: added data_class support.
   */

declare	P_IOCB_ptr pointer parameter;
declare	P_log_message_ptr pointer parameter;
declare	P_expanded_string char (*) varying parameter;
declare	P_lmd_ptr pointer parameter;
declare	P_min_severity fixed bin parameter;
declare	P_max_severity fixed bin parameter;
declare	P_string char (*) parameter;
declare   P_indent fixed bin;

declare	lmd_ptr pointer;
declare	lmd_area area based (lmd_ptr);
declare 1 lmd aligned based (lmd_ptr),
	2 area_ptr pointer,
	2 text_string_ptr pointer,
	2 data_string_ptr pointer,
	2 data_class_string_ptr pointer,
	2 select_severity bit (1) aligned,
	2 severity (-256 : 255) bit (1) unaligned;

declare	severity_idx fixed bin;
declare	min_severity fixed bin;
declare	max_severity fixed bin;

declare	get_system_free_area_ entry () returns (pointer);
declare	ioa_$ioa_switch entry() options(variable);
declare   ioa_$rsnnl entry() options(variable);
declare	match_strings_$add entry (pointer, bit (1) aligned, char (*));
declare	match_strings_$free entry (pointer);
declare	match_strings_$test entry (pointer, char (*)) returns (bit (1) aligned);
declare	match_strings_$print entry (pointer /* IOCB */, fixed bin /* indent */, char (*) /* Title */, pointer /* match data */);

declare  (addr, hbound, lbound, length, max, min, null, string, unspec) builtin;

/* */

log_match_$test:
     entry (P_lmd_ptr, P_log_message_ptr, P_expanded_string) returns (bit (1) aligned);

	lmd_ptr = P_lmd_ptr;
	log_message_ptr = P_log_message_ptr;

	if (lmd_ptr = null ()) then return ("1"b);

/* This may not be the optimal ordering for these tests, but it's a reasonable first cut.
   84-07-02, WOS */

	if lmd.select_severity then
	     if ^lmd.severity (log_message.severity) then
		return ("0"b);

	if lmd.text_string_ptr ^= null () then
	     if ^match_strings_$test (lmd.text_string_ptr, log_message.text) then
	          return ("0"b);

	if lmd.data_class_string_ptr ^= null () then
	     if ^match_strings_$test (lmd.data_class_string_ptr, (log_message.data_class)) then
	          return ("0"b);

	if lmd.data_string_ptr ^= null () then 
	     if (log_message.data_lth > 0) then
	          if (length (P_expanded_string) > 0) then begin;
		     declare nv_expanded_string char (length (P_expanded_string)) based (exsp_ptr);
		declare exsp_ptr pointer;
		     exsp_ptr = addwordno (addr (P_expanded_string), 1);
		     if ^match_strings_$test (lmd.data_string_ptr, nv_expanded_string) then
		         return ("0"b);
		end;
	return ("1"b);

/* */

log_match_$free:
     entry (P_lmd_ptr);

	lmd_ptr = P_lmd_ptr;
	P_lmd_ptr = null ();

	if (lmd_ptr = null ()) then return;		/* Nothing to do */

	call match_strings_$free (lmd.text_string_ptr);

	call match_strings_$free (lmd.data_string_ptr);

	call match_strings_$free (lmd.data_class_string_ptr);

	free lmd in (lmd_area);

	return;

/* */

log_match_$add_match:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.text_string_ptr, "1"b, P_string);
	return;



log_match_$add_exclude:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.text_string_ptr, "0"b, P_string);
	return;


log_match_$add_match_data_class:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.data_class_string_ptr, "1"b, P_string);
	return;



log_match_$add_exclude_data_class:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.data_class_string_ptr, "0"b, P_string);
	return;



log_match_$add_match_data:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.data_string_ptr, "1"b, P_string);
	return;



log_match_$add_exclude_data:
     entry (P_lmd_ptr, P_string);

	call get_caller_lmd ();
	call match_strings_$add (lmd.data_string_ptr, "0"b, P_string);
	return;



log_match_$add_severity:
     entry (P_lmd_ptr, P_min_severity, P_max_severity);

	call get_caller_lmd ();
	if (P_min_severity > P_max_severity) then
	     min_severity = max (lbound (lmd.severity, 1), P_max_severity);
	else min_severity = max (lbound (lmd.severity, 1), P_min_severity);
	if (P_min_severity > P_max_severity) then
	     max_severity = min (hbound (lmd.severity, 1), P_min_severity);
	else max_severity = min (hbound (lmd.severity, 1), P_max_severity);

	lmd.select_severity = "1"b;
	do severity_idx = min_severity to max_severity;
	     lmd.severity (severity_idx) = "1"b;
	     end;
	return;

/* */

log_match_$clear_severity:
     entry (P_lmd_ptr);

	if (P_lmd_ptr = null ()) then return;
	call get_caller_lmd ();
	lmd.select_severity = "0"b;
	string (lmd.severity) = ""b;
	return;



log_match_$clear_text_strings:
     entry (P_lmd_ptr);

	if P_lmd_ptr = null ()
	then return;
	call get_caller_lmd ();
	call match_strings_$free (lmd.text_string_ptr);
	return;

log_match_$clear_data_class_strings:
     entry (P_lmd_ptr);

	if P_lmd_ptr = null ()
	then return;
	call get_caller_lmd ();
	call match_strings_$free (lmd.data_class_string_ptr);
	return;



log_match_$clear_data_strings:
     entry (P_lmd_ptr);

	if P_lmd_ptr = null ()
	then return;
	call get_caller_lmd ();
	call match_strings_$free (lmd.data_string_ptr);
	return;


log_match_$print:
     entry (P_lmd_ptr, P_IOCB_ptr, P_indent);

	if P_lmd_ptr = null ()
	then return;
	call get_caller_lmd ();
	if lmd.select_severity
	then call print_severity;
	call match_strings_$print (P_IOCB_ptr, P_indent, "Text", lmd.text_string_ptr);
	call match_strings_$print (P_IOCB_ptr, P_indent, "Data class", lmd.data_class_string_ptr);
	call match_strings_$print (P_IOCB_ptr, P_indent, "Data", lmd.data_string_ptr);
	return;


/* */

get_caller_lmd:
     procedure ();

declare	system_area area based (system_area_ptr);
declare	system_area_ptr pointer;


	lmd_ptr = P_lmd_ptr;

	if (lmd_ptr ^= null ()) then return;

	system_area_ptr = get_system_free_area_ ();
	allocate lmd in (system_area) set (lmd_ptr);

	unspec (lmd) = ""b;
	lmd.text_string_ptr = null ();
	lmd.data_string_ptr = null ();
	lmd.data_class_string_ptr = null ();
	lmd.area_ptr = system_area_ptr;
	P_lmd_ptr = lmd_ptr;			/* Give it back to our caller */

	return;
	end get_caller_lmd;

print_severity:
	procedure options (non_quick);

/**** This program has the unenviable task of turning that bitstring
      into a set of ranges. */

declare ranges_used fixed bin;
declare ranges (512) char (32) unaligned;
declare used_ranges (ranges_used) char (32) unaligned based;

declare last_on_index fixed bin;
declare current_index fixed bin;

	ranges_used = 0;
	unspec (ranges)  = ""b;
	last_on_index = -10000;
	do current_index = lbound (lmd.severity, 1) to hbound (lmd.severity, 1);
	     if last_on_index < lbound (lmd.severity, 1)
	     then if lmd.severity (current_index)
		then last_on_index = current_index;
		else ; /* no pending range, none starts here */
	     else if lmd.severity (current_index)
		then ; /* range continues through here */
		else do; /* terminate a range */
		     ranges_used = ranges_used + 1;
		     call ioa_$rsnnl ("^d^[ to ^d^]", ranges (ranges_used), (0), last_on_index, last_on_index ^= (current_index - 1), current_index - 1);
		     last_on_index = -10000;
		end;
	     end; /* done the loop */
	if ranges_used = 0 then return; /* nothing to say */
	call ioa_$ioa_switch (P_IOCB_ptr, "^vx Severities: ^(^a ^)", P_indent,
	     addr (ranges) -> used_ranges (*));
	return;

	end print_severity;

%page; %include log_message;

	end log_match_;
