/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4 */

expand_mmdam_msg_:
     procedure ();

/* *      EXPAND_MMDAM_MSG_
   *
   *      Expander for memory damage message generated by page_error and hardware_fault.
   *
   *	85-02-21, EJ Sharpe: initial coding
*/

declare  P_log_message_format_ptr pointer parameter;
declare  P_log_message_ptr pointer parameter;
declare  P_expand_mode_ptr pointer parameter;
declare  P_expansion char (*) varying parameter;
declare  P_code fixed bin (35) parameter;

declare  temp char (2000) varying;

declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  ioa_$rsnnl entry options (variable);

declare  (addr, binary, dimension, size) builtin;
%page;

expand_mmdam_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	mmdam_ptr = addr (log_message.data (1));

	if size (mmdam_msg) = dimension (log_message.data, 1)
	then call expand_mmdam ();
	else call expand_log_message_$unknown
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;

/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_mmdam_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	mmdam_ptr = addr (log_message.data (2));

	if (binary (log_message.data (1)) = SB_mmdam)
	     & (size (mmdam_msg) = dimension (log_message.data, 1) - 1)
	then call expand_mmdam ();
	else call expand_log_message_$unknown_syserr
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;
expand_mmdam:
     procedure ();

	call ioa_$rsnnl ("^/Page at addr: ^oo, controller: ^a.", temp, (0), mmdam_msg.addr, mmdam_msg.ctrltag);

	P_expansion = P_expansion || temp;

	return;
     end expand_mmdam;

/* format: off */
%page; %include log_message;
%page; %include log_message_format;
%page; %include syserr_binary_def;
%page; %include syserr_mmdam_msg;

          end expand_mmdam_msg_;
