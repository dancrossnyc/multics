/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style1,insnl,linecom,indcomtxt,^inddcls,^indnoniterdo */

expand_access_audit_msg_:
     procedure ();

/* *      EXPAND_ACCESS_AUDIT_MSG_
   *
   *      Expander for log messages from access_audit_.
   *
   *	85-03-04, EJ Sharpe: remove some unpopular spaces from format
   *	85-01-28, EJ Sharpe: for session_uid, expander entry cache
   *	85-01-22, EJ Sharpe: for new version structures, reformat
   *      85-01-14, EJ Sharpe: changes per code audit
   *      85-01-13, EJ Sharpe: misc fixes
   *      84-12-21, EJ Sharpe: completed first revision
   *      84-12-05, W. Olin Sibert: Initial coding, on advice from Mr. Sharpe.
*/

/*	PARAMETERS	*/

declare P_log_message_format_ptr
			 pointer parameter;
declare P_log_message_ptr	 pointer parameter;
declare P_expand_mode_ptr	 pointer parameter;
declare P_expansion		 char (*) varying parameter;
declare P_code		 fixed bin (35) parameter;


/*	AUTOMATIC		*/

declare info_ptr		 pointer;
declare info_size		 fixed bin;
declare info_type		 fixed bin (9) uns;
declare save_info_size	 fixed bin;

declare audit_record_size	 fixed bin;
declare char8		 char (8) based;
declare fb9unsunal		 fixed bin (9) uns unal based;
declare temp		 char (1000) varying;
declare parent		 char (528);
declare n_subjects		 fixed bin;
declare subject_idx		 fixed bin;
declare expander_proc	 variable entry (pointer, pointer, pointer, fixed bin, char (*) varying, fixed bin (35));
declare entry_name		 char (33);
declare 1 oper_code		 aligned like encoded_access_op;
declare code		 fixed bin (35);
declare object_type_name	 char (32);
declare operation_type_name	 char (32);


/*	INTERNAL STATIC		*/

/* The next two declarations define the expander procedure associative menory
   used so we don't have to call hcs_$make_entry too often within a single session.
   Note that they're dimensioned to 36.  Should the different types of extended
   binary data exceed this number, the dimension should be increased. */

declare expanders_known	 bit (36) int static init (""b);
declare expander_am		 (36) variable int static
			 entry (pointer, pointer, pointer, fixed bin, char (*) varying, fixed bin (35));


/*	ENTRIES		*/

declare expand_log_message_$append_octal
			 entry (pointer, pointer, fixed bin, char (*) varying);
declare ioa_$rsnnl		 entry options (variable);
declare vpn_cv_uid_path_	 entry (pointer, char (*), fixed bin (35));
declare date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
declare cv_fstime_		 entry (bit (36) aligned) returns (fixed bin (71));
declare display_access_class_	 entry (bit (72) aligned) returns (char (32) aligned);
declare hcs_$make_entry	 entry (ptr, char (*), char (*), entry, fixed bin (35));


/*	MISC		*/

declare (addr, addrel, dimension, hbound, lbound, length, null, rtrim, size, substr, unspec)
			 builtin;
%page;

expand_access_audit_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	audit_record_ptr = addr (log_message.data (1));
	audit_record_size = dimension (log_message.data, 1);

	goto ACCESS_AUDIT_COMMON;



/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_access_audit_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	audit_record_ptr = addr (log_message.data (2));
	audit_record_size = dimension (log_message.data, 1) - 1;

	goto ACCESS_AUDIT_COMMON;
%page;

ACCESS_AUDIT_COMMON:

	info_ptr = audit_record_ptr;
	info_size = audit_record_size;
	if audit_record_header_proxy.version = ACCESS_AUDIT_HEADER_VERSION_3
						/* new version */
	then n_subjects = audit_record_header_proxy.type;
	else if audit_record_header_proxy.version = 1 | audit_record_header_proxy.version = 2
						/* old versions */
	then n_subjects = audit_record_header_proxy.version;
	else goto unknown_data;

/* make sure we have a whole header */
	if n_subjects = 1 & info_size < size (audit_record_header)
	then goto unknown_data;
	else if n_subjects = 2 & info_size < size (audit_record_header_proxy)
	then goto unknown_data;

	unspec (oper_code) = audit_record_header_proxy.operation_code;
	if oper_code.object_type = 0
	then object_type_name = "No Object";
	else if oper_code.object_type > hbound (Long_Object_Names, 1)
	then object_type_name = "UNKNOWN OBJECT";	/* new one we don't know abaout */
	else object_type_name = Long_Object_Names (oper_code.object_type);

	if oper_code.access_type = 0
	then operation_type_name = "none";
	else operation_type_name = Long_Level_Names (oper_code.access_type);

	if audit_record_header_proxy.version ^= ACCESS_AUDIT_HEADER_VERSION_3
	then do;
	     call ioa_$rsnnl ("(Old format binary)^/", temp, (0));
	     P_expansion = P_expansion || temp;
	end;

	do subject_idx = 1 to n_subjects;
	     call ioa_$rsnnl (
		"^[Proxy^;Subject^]: ^a.^a.^a^[*^] (ring ^d),^[ PID=^w,^;^s^]^[ Session_UID=^d,^;^s^]^/Auth: ^a, Min: ^a, Max: ^a^/"
		,
		temp, (0),
		((subject_idx = 1) & (n_subjects ^= 1)),
		audit_record_header_proxy.subjects (subject_idx).person,
		audit_record_header_proxy.subjects (subject_idx).project,
		audit_record_header_proxy.subjects (subject_idx).tag,
		audit_record_header_proxy.subjects (subject_idx).anonymous,
		audit_record_header_proxy.subjects (subject_idx).ring,
		(audit_record_header_proxy.subjects (subject_idx).process_id ^= ""b),
		audit_record_header_proxy.subjects (subject_idx).process_id,
		((subject_idx = 1) & (audit_record_header_proxy.session_uid ^= 0)),
		audit_record_header_proxy.session_uid,	/* only AS audit has this at present */
		display_access_class_ (audit_record_header_proxy.subjects (subject_idx).authorization),
		display_access_class_ (audit_record_header_proxy.subjects (subject_idx).authorization_range (1)),
		display_access_class_ (audit_record_header_proxy.subjects (subject_idx).authorization_range (2)));

	     P_expansion = P_expansion || temp;
	end;


	call ioa_$rsnnl (
	     "^a, operation type: ^a^[, operation detail: ^oo^;^s^]^/", temp, (0),
	     object_type_name, operation_type_name, (oper_code.detailed_operation ^= 0), oper_code.detailed_operation);
	P_expansion = P_expansion || temp;

/**** Prepare to deal with extended binary info.

      Some internal or external routine will be called to expand
      the extended binary if it exists.

      (1) The called routine (expander) must check that the info
      passed is larger or equal to the size of the structure it
      uses for expansion.

      (2) The expander must decrease the info_size argument by the
      number of words processed in that routine.  We will loop here
      calling expanders until the info is all processed.

      (3) The expander should end the expanded data with a new line
      to avoid confusion with the set of expanded data.
****/

	if n_subjects = 1
	then do;
	     info_size = info_size - size (audit_record_header);
	     info_ptr = addrel (info_ptr, size (audit_record_header));
	end;
	else do;
	     info_size = info_size - size (audit_record_header_proxy);
	     info_ptr = addrel (info_ptr, size (audit_record_header_proxy));
	end;

	do while (info_size > 0);

	     entry_name = "";			/* init expander entry name */

	     if audit_record_header_proxy.version = ACCESS_AUDIT_HEADER_VERSION_3
	     then do;				/* new version */
		info_type = info_ptr -> fb9unsunal;	/* pick off type */
		if info_type > hbound (audit_binary_expanders, 1) | info_type < lbound (audit_binary_expanders, 1)
		then goto unknown_data;

/* the first two data types we have internal procs for expansion */
		else if info_type = AAB_ss_object
		then call expand_ssobj (info_ptr, info_size);
		else if info_type = AAB_ss_link
		then call expand_link (info_ptr, info_size);

		else do;
		     entry_name = "expand_" || audit_binary_expanders (info_type) || "_audit_info_";
		     if length (rtrim (entry_name)) > 32
		     then goto no_expander;

		     if ^expander_cache$get ((info_type), expander_proc)
		     then do;
			call hcs_$make_entry (null (), entry_name, entry_name, expander_proc, code);
			if code ^= 0
			then goto no_expander;
			else call expander_cache$put ((info_type), expander_proc);
		     end;

		     save_info_size = info_size;
		     call expander_proc (P_log_message_format_ptr, P_expand_mode_ptr,
			info_ptr, info_size, P_expansion, code);
		     if code ^= 0			/* encountered problem?? */
			| save_info_size = info_size	/* did'nt adjust data size?? */
		     then do;
no_expander:
unknown_data:
			call ioa_$rsnnl ("Unknown data (^d words):^/", temp, (0), info_size);
			P_expansion = P_expansion || temp;
			call expand_log_message_$append_octal
			     (P_log_message_format_ptr, info_ptr, info_size, P_expansion);
			info_size = 0;		/* we got it all */
		     end;
		end;
	     end;
	     else do;				/* old version binary data */
		if info_size < 2
		then goto old_unknown_data;		/* need at least 8 chars to identify the type of the data */

/* the first two data types we have internal procs for expansion */
		if (info_ptr -> char8 = "ssobj_v1")
		then call expand_old_ssobj (info_ptr, info_size);
		else if (info_ptr -> char8 = "sslnk_v1")
		then call expand_old_link (info_ptr, info_size);
		else do;
		     entry_name = "expand_" || rtrim (info_ptr -> char8) || "_audit_info_";
		     if length (rtrim (entry_name)) > 32
		     then goto no_old_expander;

/* we don't maintain a cache of these... */
		     call hcs_$make_entry (null (), entry_name, entry_name, expander_proc, code);
		     if code ^= 0
		     then goto no_old_expander;

		     save_info_size = info_size;
		     call expander_proc (P_log_message_format_ptr, P_expand_mode_ptr,
			info_ptr, info_size, P_expansion, code);
		     if code ^= 0			/* encountered problem?? */
			| save_info_size = info_size	/* did'nt adjust data size?? */
		     then do;
no_old_expander:
old_unknown_data:
			call ioa_$rsnnl ("Unknown data (^d words):^/", temp, (0), info_size);
			P_expansion = P_expansion || temp;
			call expand_log_message_$append_octal
			     (P_log_message_format_ptr, info_ptr, info_size, P_expansion);
			info_size = 0;		/* we got it all */
		     end;
		end;
	     end;

	end;					/* do while loop */

	return;
%page;

expand_ssobj:
     procedure (a_info_ptr, a_info_size);

dcl     a_info_ptr		 ptr parameter;
dcl     a_info_size		 fixed bin parameter;

	audit_ssobj_info_ptr = a_info_ptr;
	if info_size < size (audit_ssobj_info)
	then goto unknown_data;

	call vpn_cv_uid_path_ (addr (audit_ssobj_info.parent_uid_path), parent, (0));

	call ioa_$rsnnl ("Object: branch ^w in ^a, DTEM is ^a^/", temp, (0),
	     audit_ssobj_info.entry_uid, parent,
	     date_time_$format ("date_time", cv_fstime_ (audit_ssobj_info.dtem), "", ""));
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl ("Raw mode: ^[null^s^s^s^;^[r^]^[e^]^[w^]^]  Ring brackets: ^d,^d,^d  Class: ^a.",
	     temp, (0), (substr (audit_ssobj_info.raw_mode, 1, 3) = "000"b),
	     substr (audit_ssobj_info.raw_mode, 1, 1), substr (audit_ssobj_info.raw_mode, 2, 1),
	     substr (audit_ssobj_info.raw_mode, 3, 1), audit_ssobj_info.ring_brackets,
	     display_access_class_ (audit_ssobj_info.access_class));
	P_expansion = P_expansion || temp;

	if substr (audit_ssobj_info.ex_mode, 1, 3) ^= "000"b
	     | audit_ssobj_info.ex_ring_brackets (1) ^= "000"b
	     | audit_ssobj_info.ex_ring_brackets (2) ^= "000"b
	     | audit_ssobj_info.ex_ring_brackets (3) ^= "000"b
	then call ioa_$rsnnl (" (Ex mode: ^[null^s^s^s^;^[r^]^[e^]^[w^]^]  Ex Ring brackets: ^d,^d,^d).^/", temp, (0),
		(substr (audit_ssobj_info.ex_mode, 1, 3) = "000"b), substr (audit_ssobj_info.ex_mode, 1, 1),
		substr (audit_ssobj_info.ex_mode, 2, 1), substr (audit_ssobj_info.ex_mode, 3, 1),
		audit_ssobj_info.ex_ring_brackets);
	else call ioa_$rsnnl ("^/", temp, (0));
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl (
	     "Switches: ^[^^^]dirsw,^[^^^]per_process,^[^^^]safety,^[^^^]multiple_class,^[^^^]audit,^[^^^]security_oos,^[^^^]entrypt,^[^^^]master_dir.^/"
	     ,
	     temp, (0), ^audit_ssobj_info.dirsw, ^audit_ssobj_info.per_process_sw, ^audit_ssobj_info.safety_sw,
	     ^audit_ssobj_info.multiple_class, ^audit_ssobj_info.audit_flag, ^audit_ssobj_info.security_oosw,
	     ^audit_ssobj_info.entrypt_sw, ^audit_ssobj_info.master_dir);
	P_expansion = P_expansion || temp;

	a_info_ptr = addrel (a_info_ptr, size (audit_ssobj_info));
	a_info_size = a_info_size - size (audit_ssobj_info);

	return;
     end expand_ssobj;
%page;

expand_link:
     procedure (a_info_ptr, a_info_size);

dcl     a_info_ptr		 ptr parameter;
dcl     a_info_size		 fixed bin parameter;

	audit_link_info_ptr = info_ptr;
	if info_size < size (audit_link_info)
	then goto unknown_data;

	call vpn_cv_uid_path_ (addr (audit_link_info.parent_uid_path), parent, (0));

	call ioa_$rsnnl ("Object: link ^w in ^a, DTEM is ^a^/", temp, (0),
	     audit_ssobj_info.entry_uid, parent,
	     date_time_$format ("date_time", cv_fstime_ (audit_ssobj_info.dtem), "", ""));

	P_expansion = P_expansion || temp;

	a_info_ptr = addrel (a_info_ptr, size (audit_link_info));
	a_info_size = a_info_size - size (audit_link_info);

	return;
     end expand_link;
%page;

/*	OLD ssobj and sslnk expanders		*/

expand_old_ssobj:
     procedure (a_info_ptr, a_info_size);

dcl     a_info_ptr		 ptr parameter;
dcl     a_info_size		 fixed bin parameter;

/* OLD structure declarations */
dcl     old_audit_ssobj_info_ptr
			 pointer;

dcl     1 old_audit_ssobj_info based (old_audit_ssobj_info_ptr) aligned,
	2 info_type	 char (8) unal,
	2 parent_uid_path	 (0:15) bit (36) aligned,
	2 entry_uid	 bit (36),
	2 dtem		 bit (36),
	2 raw_mode	 bit (36),
	2 ex_mode		 bit (36),
	2 access_class	 bit (72),
	2 ring_brackets	 (3) bit (3) unal,
	2 ex_ring_brackets	 (3) bit (3) unal,
	2 flags		 unal,
	  3 (
	       dirsw,
	       per_process_sw,
	       safety_sw,
	       multiple_class,
	       audit_flag,
	       security_oosw,
	       entrypt_sw,
	       master_dir
	       )		 bit (1) unal,
	  3 pad		 bit (10) unal,
	2 pad2		 bit (36) aligned;

/* slightly shorter info for links, first three components are same */

dcl     old_audit_link_info_ptr
			 pointer;

dcl     1 old_audit_link_info	 based (old_audit_link_info_ptr) aligned,
	2 info_type	 char (8) unal,
	2 parent_uid_path	 (0:15) bit (36) aligned,
	2 entry_uid	 bit (36),
	2 dtem		 bit (36);

	old_audit_ssobj_info_ptr = a_info_ptr;
	if info_size < size (old_audit_ssobj_info)
	then goto unknown_data;

	call vpn_cv_uid_path_ (addr (old_audit_ssobj_info.parent_uid_path), parent, (0));

	call ioa_$rsnnl ("Object: branch ^w in ^a, DTEM is ^a^/", temp, (0),
	     old_audit_ssobj_info.entry_uid, parent,
	     date_time_$format ("date_time", cv_fstime_ (old_audit_ssobj_info.dtem), "", ""));
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl ("Raw mode: ^[null^s^s^s^;^[r^]^[e^]^[w^]^]  Ring brackets: ^d,^d,^d  Class: ^a.",
	     temp, (0), (substr (old_audit_ssobj_info.raw_mode, 1, 3) = "000"b),
	     substr (old_audit_ssobj_info.raw_mode, 1, 1), substr (old_audit_ssobj_info.raw_mode, 2, 1),
	     substr (old_audit_ssobj_info.raw_mode, 3, 1), old_audit_ssobj_info.ring_brackets,
	     display_access_class_ (old_audit_ssobj_info.access_class));
	P_expansion = P_expansion || temp;

	if substr (old_audit_ssobj_info.ex_mode, 1, 3) ^= "000"b
	     | old_audit_ssobj_info.ex_ring_brackets (1) ^= "000"b
	     | old_audit_ssobj_info.ex_ring_brackets (2) ^= "000"b
	     | old_audit_ssobj_info.ex_ring_brackets (3) ^= "000"b
	then call ioa_$rsnnl (" (Ex mode: ^[null^s^s^s^;^[r^]^[e^]^[w^]^]  Ex Ring brackets: ^d,^d,^d).^/", temp, (0),
		(substr (old_audit_ssobj_info.ex_mode, 1, 3) = "000"b), substr (old_audit_ssobj_info.ex_mode, 1, 1),
		substr (old_audit_ssobj_info.ex_mode, 2, 1), substr (old_audit_ssobj_info.ex_mode, 3, 1),
		old_audit_ssobj_info.ex_ring_brackets);
	else call ioa_$rsnnl ("^/", temp, (0));
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl (
	     "Switches: ^[^^^]dirsw,^[^^^]per_process,^[^^^]safety,^[^^^]multiple_class,^[^^^]audit,^[^^^]security_oos,^[^^^]entrypt,^[^^^]master_dir.^/"
	     ,
	     temp, (0), ^old_audit_ssobj_info.dirsw, ^old_audit_ssobj_info.per_process_sw,
	     ^old_audit_ssobj_info.safety_sw,
	     ^old_audit_ssobj_info.multiple_class, ^old_audit_ssobj_info.audit_flag,
	     ^old_audit_ssobj_info.security_oosw,
	     ^old_audit_ssobj_info.entrypt_sw, ^old_audit_ssobj_info.master_dir);
	P_expansion = P_expansion || temp;

	a_info_ptr = addrel (a_info_ptr, size (old_audit_ssobj_info));
	a_info_size = a_info_size - size (old_audit_ssobj_info);

	return;


expand_old_link:
     entry (a_info_ptr, a_info_size);

	old_audit_link_info_ptr = info_ptr;
	if info_size < size (old_audit_link_info)
	then goto unknown_data;

	call vpn_cv_uid_path_ (addr (old_audit_link_info.parent_uid_path), parent, (0));

	call ioa_$rsnnl ("Object: link ^w in ^a, DTEM is ^a^/", temp, (0),
	     old_audit_ssobj_info.entry_uid, parent,
	     date_time_$format ("date_time", cv_fstime_ (old_audit_ssobj_info.dtem), "", ""));

	P_expansion = P_expansion || temp;

	a_info_ptr = addrel (a_info_ptr, size (old_audit_link_info));
	a_info_size = a_info_size - size (old_audit_link_info);

	return;

     end expand_old_ssobj;
%page;

/* procedure to keep track of the expanders we know about (to avoid repetitive
   calls to hcs_$make_entry */

expander_cache:
     procedure ();					/* this entry not used */

dcl     a_expander_index	 parameter fixed bin;
dcl     a_expander_entry	 parameter variable entry (ptr, ptr, ptr, fixed bin, char (*) varying, fixed bin (35));

expander_cache$put:					/* entry to save the entry of an expander procedure */
     entry (a_expander_index, a_expander_entry);

	if a_expander_index < 1 | a_expander_index > dimension (expander_am, 1)
	then ;					/* no place to put it */
	else do;
	     substr (expanders_known, a_expander_index, 1) = "1"b;
	     expander_am (a_expander_index) = a_expander_entry;
	end;

	return;


expander_cache$get:					/* entry to retrieve the entry of an expander procedure */
     entry (a_expander_index, a_expander_entry) returns (bit (1) aligned);

	if a_expander_index < 1 | a_expander_index > dimension (expander_am, 1)
	then return ("0"b);				/* no place it could be */

	if substr (expanders_known, a_expander_index, 1)
	then do;
	     a_expander_entry = expander_am (a_expander_index);
	     return ("1"b);
	end;
	else return ("0"b);

     end expander_cache;
%page;
%include log_message;
%page;
%include access_audit_bin_header;
%page;
%include access_audit_binary_def;
%page;
%include access_audit_encoded_op;
%page;
%include access_audit_eventflags;
%page;
%include access_audit_ssobj_info;
%page;
%include access_audit_names;

     end expand_access_audit_msg_;
