/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* format: style5 */

expand_channel_audit_info_:
        procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	  P_info_size, P_expansion, P_code);

/**** This program expands the channel information stored in the binary
      data associated with Answering Service audit records.  */

/* Written 1985-01-28 by E. Swenson */

/* Parameters */

        dcl     P_code		fixed bin (35) parameter;
					      /* status code */
        dcl     P_expand_mode_ptr	ptr parameter;
        dcl     P_expansion		char (*) varying parameter;
					      /* character string to output */
        dcl     P_info_ptr		ptr parameter;  /* pointer to I&A binary info */
        dcl     P_info_size		fixed bin (17) parameter;
					      /* size of binary info */
        dcl     P_log_message_format_ptr
				ptr parameter;

/* Automatic */

        dcl     code		fixed bin (35); /* status code */
        dcl     ioa_$rsnnl		entry () options (variable);
        dcl     p			ptr;	      /* used to reference binary data */
        dcl     temp		char (1024) varying;
					      /* temporary string */

/* Entries */

        dcl     display_access_class_	entry (bit (72) aligned)
				returns (char (32) aligned);
        dcl     display_access_class_$range
				entry ((2) bit (72) aligned)
				returns (char (32) aligned);

/* External */

        dcl     error_table_$bad_arg	fixed bin (35) external static;
        dcl     error_table_$unimplemented_version
				fixed bin (35) external static;

/* Builtin */

        dcl     lbound		builtin;
        dcl     hbound		builtin;
        dcl     size		builtin;

%page;
/* Program */
        p = P_info_ptr;
        if P_info_size < size (as_channel_audit_record_) then
	      do;
	      P_code = error_table_$bad_arg;
	      return;
	      end;

        if p -> as_channel_audit_record_.version
	  ^= AS_AUDIT_RECORD_CHN_VERSION_1 then
	      do;
	      P_code = error_table_$unimplemented_version;
	      return;
	      end;

        P_code = 0;

/**** If a CDT entry pointer is not available at the time of the audit
      message, the channel_info_valid flag is turned on in the audit
      record.  This indicates that the only valid information is the
      channel name. */

        if p -> as_channel_audit_record_.flags.channel_info_valid then
	      do;
	      call ioa_$rsnnl (
		"Channel name = ^a, ^[Current access class = ^a, ^;^s^]Access Class Range = ^a, ^[Current Service type = ^a, ^;^s^]Service type = ^a, Terminal type = ""^a""^[, Userid = ^a.^a^;^s^s^]^/"
		, temp, (0), p -> as_channel_audit_record_.channel_name,
		p
		-> as_channel_audit_record_.flags
		.current_access_class_valid,
		display_access_class_ (p
		-> as_channel_audit_record_.current_access_class (1)),
		display_access_class_$range (p
		-> as_channel_audit_record_.access_class_range),
		(p -> as_channel_audit_record_.current_service_type
		^= p -> as_channel_audit_record_.service_type),
		DISPLAY_SERVICE_TYPE (p
		-> as_channel_audit_record_.current_service_type),
		DISPLAY_SERVICE_TYPE (p
		-> as_channel_audit_record_.service_type),
		p -> as_channel_audit_record_.terminal_type,
		p -> as_channel_audit_record_.authenticated_user.personid,
		p -> as_channel_audit_record_.authenticated_user.projectid);
	      end;
        else
	      call ioa_$rsnnl ("Channel name = ^a", temp, (0),
		p -> as_channel_audit_record_.channel_name);

/**** Update the relevant information for our caller. */

        P_expansion = P_expansion || temp;
        P_info_size = P_info_size - size (as_channel_audit_record_);

        return;
%page;
DISPLAY_SERVICE_TYPE:
        procedure (P_service_type) returns (char (*));

/**** This procedure returns a displayable representation of the
      service type of a channel. */

        dcl     P_service_type	fixed bin (17) unaligned parameter;

        dcl     SERVICE_TYPES		(9) character (10) internal
				static options (constant)
				initial ("login", "ftp", "mc", "slave",
				"dial", "dialout", "inactive", "mpx",
				"t&d");
        if P_service_type < lbound (SERVICE_TYPES, 1)
	  | P_service_type > hbound (SERVICE_TYPES, 1) then
	      return ("unknown");
        else
	      return (SERVICE_TYPES (P_service_type));

        end DISPLAY_SERVICE_TYPE;

/* format: off */
%page; %include access_audit_bin_header;
%page; %include as_audit_structures;
%page; %include user_attributes;
/* format: on */

        end expand_channel_audit_info_;

