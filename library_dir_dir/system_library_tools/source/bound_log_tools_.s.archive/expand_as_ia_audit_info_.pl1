/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* format: style5 */

expand_as_ia_audit_info_:
        procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	  P_info_size, P_expansion, P_code);

/**** This procedure expands the extended binary portion of Answering
      Service Identification and Authentication (I&A) records */

/* Written 1985-01-28 by E. Swenson */

/* Parameters */

        dcl     P_code		fixed bin (35) parameter;
					      /* status code */
        dcl     P_expand_mode_ptr	ptr parameter;
        dcl     P_expansion		char (*) varying parameter;
					      /* character string to output */
        dcl     P_info_ptr		ptr parameter;  /* pointer to I&A binary info */
        dcl     P_info_size		fixed bin (17) parameter;
					      /* size of binary info */
        dcl     P_log_message_format_ptr
				ptr parameter;

/* Automatic */

        dcl     1 abs_info		structure aligned based,
	        2 pathname		char (168),
	        2 proxy_submitter	char (32);
        dcl     attributes_str	char (256) varying;
					      /* character string representation of user attributes */
        dcl     audit_flags_str	char (256);     /* character string representation of audit flags */
        dcl     code		fixed bin (35); /* status code */
        dcl     ioa_$rsnnl		entry () options (variable);
        dcl     p			ptr;	      /* used to reference binary data */
        dcl     rest_ptr		ptr;	      /* temporary to extended binary data */
        dcl     temp		char (1024) varying;
					      /* temporary string */

/* Entries */

        dcl     convert_access_audit_flags_$to_string
				entry (bit (36) aligned, char (*),
				fixed bin (35));
        dcl     format_attributes_	entry (ptr, char (*) varying);

/* External */

        dcl     error_table_$bad_arg	fixed bin (35) external static;
        dcl     error_table_$unimplemented_version
				fixed bin (35) external static;

/* Constants */

        dcl     PROCESS_TYPES		(0:4) char (12) internal static
				options (constant)
				initial ("dial/slave", "interactive",
				"absentee", "daemon", "operator");

/* Builtin */

        dcl     addr		builtin;
        dcl     addwordno		builtin;
        dcl     divide		builtin;
        dcl     length		builtin;
        dcl     size		builtin;
        dcl     substr		builtin;

%page;
/* Program */
        p = P_info_ptr;
        if P_info_size < size (as_ia_audit_record_) then
	      do;
	      P_code = error_table_$bad_arg;
	      return;
	      end;

        if p -> as_ia_audit_record_.version ^= AS_AUDIT_RECORD_IA_VERSION_1 then
	      do;
	      P_code = error_table_$unimplemented_version;
	      return;
	      end;

        P_code = 0;
        call format_attributes_ (addr (p -> as_ia_audit_record_.attributes),
	  attributes_str);

/**** format_attributes_ places an ugly semi-colon at the end of the
      attributes.  We'll remove it for better appearance */

        if substr (attributes_str, length (attributes_str), 1) = ";" then
	      attributes_str =
		substr (attributes_str, 1, length (attributes_str) - 1);

        call convert_access_audit_flags_$to_string (p
	  -> as_ia_audit_record_.audit_flags, audit_flags_str, code);
        if code ^= 0 then
	      audit_flags_str = "-invalid-";

        call ioa_$rsnnl (
	  "Process type = ^a, Min ring = ^d, Max ring = ^d, Attributes = ""^a"", Audit flags = ""^a"", Channel = ^a, Terminal type = ^a, Answerback = ""^a""^/"
	  , temp, (0), PROCESS_TYPES (p -> as_ia_audit_record_.process_type),
	  p -> as_ia_audit_record_.min_ring,
	  p -> as_ia_audit_record_.max_ring, attributes_str, audit_flags_str,
	  p -> as_ia_audit_record_.channel,
	  p -> as_ia_audit_record_.terminal_type,
	  p -> as_ia_audit_record_.answerback);

/**** Update our string so far, and the length remaining to be processed */

        P_expansion = P_expansion || temp;
        P_info_size = P_info_size - size (as_ia_audit_record_);

/**** Handle extra information in the abs and abs_proxy records */

        if p -> as_ia_audit_record_.type ^= AAB_ia_int_dmn then
	      do;
	      rest_ptr = addwordno (p, size (as_ia_audit_record_));
	      call ioa_$rsnnl ("Absentee input path = ^a^/", temp, (0),
		rest_ptr -> abs_info.pathname);
	      P_expansion = P_expansion || temp;
	      P_info_size =
		P_info_size
		- divide (length (rest_ptr -> abs_info.pathname), 4, 17, 0);

	      if p -> as_ia_audit_record_.type = AAB_ia_abs_proxy then
		    do;
		    call ioa_$rsnnl ("Proxy submitter = ^a^/", temp, (0),
		        rest_ptr -> abs_info.proxy_submitter);
		    P_expansion = P_expansion || temp;
		    P_info_size =
		        P_info_size
		        -
		        divide (
		        length (rest_ptr -> abs_info.proxy_submitter), 4,
		        17, 0);
		    end;
	      end;
        else
	      ;

        return;

/* format: off */
%page; %include access_audit_bin_header;
%page; %include access_audit_binary_def;
%page; %include as_audit_structures;
%page; %include user_attributes;
/* format: on */

        end expand_as_ia_audit_info_;

