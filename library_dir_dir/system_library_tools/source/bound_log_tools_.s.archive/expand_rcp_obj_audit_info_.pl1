/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* format: style1,insnl,linecom,indcomtxt,^indnoniterdo,^inddcls */

expand_rcp_obj_audit_info_:
     procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	P_info_size, P_expansion, P_code);

/****
      EXPAND_RCP_OBJ_AUDIT_INFO_

      This is a secondary binary expander for log messages of the
      "access_audit" data class.  It is called by expand_access_audit_msg_
      when the extended binary data is of the proper type.

      History:
      1985-02-26, EJ Sharpe: initial coding
      1985-03-19, E. Swenson to display raw mode and ring brackets
****/

/* Parameters */

dcl     P_code		 fixed bin (35) parameter;	/* status code */
dcl     P_expand_mode_ptr	 ptr parameter;
dcl     P_expansion		 char (*) varying parameter;	/* character string to output */
dcl     P_info_ptr		 ptr parameter;		/* pointer to binary info */
dcl     P_info_size		 fixed bin (17) parameter;	/* size of binary info */
dcl     P_log_message_format_ptr
			 ptr parameter;

/* Automatic */

dcl     auto_attributes	 (2) bit (72);		/* local copy of attributes */
dcl     code		 fixed bin (35);		/* status code */
dcl     temp		 char (1024) varying;	/* temporary string */
dcl     attr_str		 char (256) varying;	/* text rep of attributes */

/* Based */

dcl     based_dblwd		 (2) bit (36) based;	/* to convince ioa_ to display bit(72) values */


/* Entries */

dcl     cv_rcp_attributes_$to_string
			 entry (char (*), (2) bit (72), char (*) var, fixed bin (35));
dcl     display_access_class_$range
			 entry ((2) bit (72) aligned) returns (char (32) aligned);
dcl     ioa_$rsnnl		 entry () options (variable);


/* External */

dcl     error_table_$bad_arg	 fixed bin (35) external static;
dcl     error_table_$unimplemented_version
			 fixed bin (35) external static;

/* Builtin */

dcl     addr		 builtin;
dcl     size		 builtin;
%page;
/* Program */

	audit_rcp_obj_ptr = P_info_ptr;


	if P_info_size < size (rcp_obj_info)
	then do;
	     P_code = error_table_$bad_arg;
	     return;
	end;

	if rcp_obj_info.version ^= AUDIT_RCP_OBJ_INFO_VERSION_1
	then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	P_code = 0;

	call ioa_$rsnnl (
	     "Type: ^a^[ registry^2s^;, Name: ^a, Owner: ^a^], Access class: ^a, Raw mode = ^a^[, Ring brackets = ^d,^d^;^2s^].^/",
	     temp, (0),
	     rcp_obj_info.resource_type, rcp_obj_info.registry, rcp_obj_info.resource_name, rcp_obj_info.owner_id,
	     display_access_class_$range (rcp_obj_info.access_class),
	     SEG_ACCESS_MODE_NAMES (bin (rcp_obj_info.raw_mode)),
	     (rcp_obj_info.rcp_ring_brackets (1) ^= -1),
	     rcp_obj_info.rcp_ring_brackets (1),
	     rcp_obj_info.rcp_ring_brackets (2));

	P_expansion = P_expansion || temp;

	if ^rcp_obj_info.registry
	then do;
	     auto_attributes = rcp_obj_info.attributes;	/* following call need non-aligned version */
	     call cv_rcp_attributes_$to_string ((rcp_obj_info.resource_type), auto_attributes, attr_str, code);
	     if code ^= 0
	     then call ioa_$rsnnl ("Attributes: (Illegal) ^w^w ^w^w^/", temp, (0),
		     addr (rcp_obj_info.attributes (1)) -> based_dblwd,
		     addr (rcp_obj_info.attributes (2)) -> based_dblwd);
	     else call ioa_$rsnnl ("Attributes: ^a^/", temp, (0), attr_str);
	     P_expansion = P_expansion || temp;

	     call ioa_$rsnnl (
		"Flags: ^[^;^^^]device,^[^;^^^]volume,^[^;^^^]usage_locked,^[^;^^^]release_locked,^[^;^^^]awaiting_clear,^[^;^^^]has_acs_path^/"
		,
		temp, (0), rcp_obj_info.device, rcp_obj_info.volume, rcp_obj_info.usage_locked,
		rcp_obj_info.release_locked, rcp_obj_info.awaiting_clear, rcp_obj_info.has_acs_path);
	     P_expansion = P_expansion || temp;
	end;

/* tell expand_access_audit_msg_ how much we've done */
	P_info_size = P_info_size - size (rcp_obj_info);

	return;

/* format: off */
%page; %include access_audit_rcp_info;
%page; %include access_mode_values;

        end expand_rcp_obj_audit_info_;

