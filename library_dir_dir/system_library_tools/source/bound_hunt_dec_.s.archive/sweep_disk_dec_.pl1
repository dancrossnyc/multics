/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


sweep_disk_dec_: proc (path, counter);

/* SWEEP_DISK_ - driver for statistics programs.

   This program is called with a pathname, the root node of a tree
   to sweep, and a function, which will be called for each directory entry.
   The program recursively walks down the directory tree and
   calls the user function for each entry found.

   This version of the program will try to give itself access if it doesn't have it

   THVV

   Modified January 14, 1978 by Peter C. Krupp to be used with hunt_dec.
   Modified March 16, 1977 by S. Webber to remove long entry, and to chase links that go to dirs (via chase_links entry).
   Modified on 9 September 1976 by R. G. Bratt to not terminate and to use (get release)_temp_segments_.
   Modified on 5 June 1975 by J. C. Whitmore to attempt to set system privileges.

   */

dcl  path char (168),				/* path name to sweep */
     counter entry (char (168), char (32), fixed bin,
     char (32), ptr, ptr);

dcl  dummy_dir char (168),
     dummy_ename char (32);

dcl  areap ptr,					/* ptr to area segment. */
     two_ptr (2) ptr init (null,null),
     myname char (15) init ("sweep_disk_dec_") static options (constant),
     n_ids fixed bin init (0),			/* number of dir UIDs we've processed */
     ec fixed bin (35);				/* err code */

dcl  ids (1) bit (36) aligned based (two_ptr (2));

dcl  chase_links_sw bit (1) aligned init ("0"b);		/* Indicates if links to dirs are to be chased */
dcl  priv_off bit (1);				/* flag to tell that system privileges are off */
dcl  priv_set fixed bin (35);				/* this will be zero if we set system privileges */

dcl  sys_info$max_seg_size fixed bin (35) ext;

dcl 1 acla (1) aligned,
    2 userid char (32),
    2 modes bit (36),
    2 erc fixed bin (35);

dcl 1 delacla (1) aligned,
    2 userid char (32),
    2 erc fixed bin (35);


dcl  com_err_ entry options (variable),
     get_group_id_ entry () returns (char (32) aligned),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     area_ entry (fixed bin (35), ptr);

dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
dcl  system_privilege_$dir_priv_off entry (fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$get_link_target entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$delete_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$star_list_ entry (char (*), char (*), fixed bin (3),
     ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35)),
     get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35)),
     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));

dcl (cleanup, linkage_error) condition;
dcl (addr, null, index, fixed) builtin;

/* - - - - */


start:
	call get_temp_segments_ (myname, two_ptr, ec);
	areap = two_ptr (1);
	call area_ (sys_info$max_seg_size, areap);
	acla (1).userid = get_group_id_ ();
	delacla (1).userid = acla (1).userid;
	acla (1).modes = "111"b;

	priv_off = "1"b;				/* assume that we don't have dir privilege */
	priv_set = 1;				/* and that we did not set dir priv */

	on cleanup call clean_up;			/* so we can undo what we did */

/*	Now we will try to set dir privilege so we can look at each dir in the system. */

	on linkage_error go to revert_handler;		/* in case of no access to system_privilege_ */
	call system_privilege_$dir_priv_on (priv_set);	/* try to set it */
	priv_off = "0"b;				/* privileges are on now for sure */
revert_handler:
	revert linkage_error;			/* it was only to catch system_privilege_ error */

	if priv_off then do;			/* see if we now have the dir priv */

	     call com_err_ (0, myname, "Unable to set directory privilege. Access to storage system may not be complete.");
	     priv_set = 1;				/* just to be safe */
	end;
	call expand_pathname_ (path, dummy_dir, dummy_ename, ec); /* Just check for syntax error */
	if ec ^= 0 then do;
	     call com_err_ (ec, myname, "^a", path);
	     call clean_up;
	     return;
	end;
	call process (path, 0);			/* Looks innocent ... */
	call clean_up;

	return;					/* Done. */


/* - - - - - - - - - - - - - - */

process:	proc (apth, lvl);

/* internal doit procedure */

dcl  apth char (168),				/* path of tree to process */
     lvl fixed bin;					/* recursion level */

dcl  npth char (168),				/* new path for recursion */
     dstar char (2) init ("**") internal static options (constant), /* for star, gets all. */
     ddn char (168),				/* ... for expand */
     een char (32),					/* ... */
     c32 char (32),
     new_dirname char (168),
     new_ename char (32),
     ifail fixed bin (35),
    (eptr, nptr) ptr init (null),			/* for star and status */
     ecc fixed bin (35),
    (t, bcount, lc, ii, nix, i) fixed bin;			/* indices */

dcl  names (100) char (32) aligned based (nptr);		/* Structure returned by star_ */

dcl 1 branches (100) aligned based (eptr),		/* ... */
    2 type bit (2) unaligned,				/* 10b is directory */
    2 nnam bit (16) unaligned,			/* number of names this seg */
    2 nindex bit (18) unaligned,			/* index in names structure */
    2 padx bit (108) unaligned;

dcl 1 entry aligned,
    2 type bit (2) unaligned,
    2 nnam fixed bin (15) unaligned,
    2 nindex fixed bin (17) unaligned,
    2 padx bit (288) aligned,
    2 uid bit (36) aligned;

	     on cleanup begin;
		if eptr ^= null then free eptr -> branches;
		if nptr ^= null then free nptr -> names;
		if ifail = 0 then call hcs_$delete_dir_acl_entries (ddn, een, addr (delacla), 1, ecc);
	     end;

	     call expand_pathname_ (apth, ddn, een, ecc); /* needn't check ecc, cause we made path */
						/* except for first time which is checked */

/* Now get UID of the dir and place on stack */

	     call hcs_$status_long (ddn, een, 0, addr (entry), null, ecc);
	     n_ids = n_ids + 1;
	     ids (n_ids) = entry.uid;
	     call hcs_$add_dir_acl_entries (ddn, een, addr (acla), 1, ifail);
	     call hcs_$star_list_ (apth, dstar, 111b, areap, bcount, lc, eptr, nptr, ecc);
	     if ecc = 0 then do;
		do ii = 1 to bcount + lc;		/* Now do all branches, look for sub-dirs. */
		     nix = fixed (eptr -> branches (ii).nindex);
		     c32 = nptr -> names (nix);
		     call counter (ddn, een, lvl, c32, addr (eptr -> branches (ii)), nptr);
		     if eptr -> branches (ii).type = "10"b then do;
			if apth = ">"
			     then npth = ">" || c32;
			     else npth = rtrim (apth) || ">" || c32;
			call process (npth, lvl+1);	/* recursion here */
		     end;

/* Now check to see if we have a link to a directory */

		     else if eptr -> branches (ii).type = "00"b & chase_links_sw then do;
			call hcs_$get_link_target (apth, c32, new_dirname, new_ename, ecc);
			if ecc = 0 then do;
			     call hcs_$status_long (new_dirname, new_ename, 0, addr (entry), null, ecc);
			     if ecc = 0 then do;
				if entry.type = "10"b then do;
				     do i = 1 to n_ids;
					if ids (i) = entry.uid then goto already_done;
				     end;
				     n_ids = n_ids + 1;
				     ids (n_ids) = entry.uid;
				     call process (rtrim (new_dirname) || ">" || new_ename, lvl+1);
				end;
			     end;
			end;
already_done:
		     end;
		end;
		free eptr -> branches;		/* Clean up area. */
		free nptr -> names;			/* ... */
	     end;
	     if ifail = 0 then call hcs_$delete_dir_acl_entries (ddn, een, addr (delacla), 1, ecc);
	end process;				/* Whew. */

/* CHASE_LINK: Entry to chase links to directories */

chase_links: entry (path, counter);

	chase_links_sw = "1"b;
	goto start;



clean_up:	proc;
	     if priv_set = 0 then call system_privilege_$dir_priv_off (priv_set);
	     call release_temp_segments_ (myname, two_ptr, ec);
	     return;
	end clean_up;

     end;
