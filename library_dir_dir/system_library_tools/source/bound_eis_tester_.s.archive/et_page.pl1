/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


et_page: procedure (statement, arg_et_data_ptr, code);



/*	This procedure parses a page statement.
   *
   *	Created  Jan, 73  by  Bill Silver.
   *
   *
   *	The format of a  "page"  statement is:
   *
   *	page   -option . . . -option ;
   *
   *	1.  The first field in the statement MUST be the statement name "page".
   *
   *	2.  The other fields are options which specify what pages are to HAVE page
   *	    faults.   The following page names are defined:
   *
   *	    in1 in2      The 2 pages of the  eis  instruction itself.
   *
   *	    id1 id2 id3  The pages used by descriptors that are referenced via
   *       	                 indirect words.
   *
   *	    d11 d12 d13  The three pages of data referenced by descriptor  1.
   *
   *	    d21 d22 d23  The three pages of data referenced by descriptor  2.
   *
   *	    d31 d32 d32  The three pages of data referenced by descriptor  3.
   *
   *	3.  If the  "-all"  option is entered then  ALL  of the pages defined for this
   *	    instruction will take a page fault.  If other options are entered along
   *	    with the  "-all"  option then the pages specified will NOT have page faults.
*/




/*	The following data items are used as arguments in the call to  et_page. */

dcl  statement char (*),				/* The input string which contains the  "page"
						   *  statement to be parsed.  */

     arg_et_data_ptr ptr,				/* Input pointer to  et_setup_data.  */

     code fixed bin (35);				/* Error code.  */



dcl  state_ptr ptr,					/* Pointer to the  "page"  statement.  */

     start fixed bin (35),				/* The number of characters allready processed
						   *  in this  "page"  statement.  */

     size fixed bin (35),				/* The current size ( in characters )
						   *  of the window on the  "page"  statement. */

     next_statement_x fixed bin;			/* The number of the last character in
						   *  the current statement.  */



/*	This is an overlay of the input  "page"  statement.  */

dcl 1 page_statement based (state_ptr),			/* Used to access the input data statement
						   *  as a stream of characters. */

    2 offset char (start),				/* The part of the  "page"  statement which we
						   *  have allready processed. */

    2 window char (size);				/* The part of the  "page"  statement which we
						   *  are currently accessing.  */



dcl  i fixed bin;					/* Temporary variable. */




/*	The following table defines the names of the pages which are currently
   *	under the control of the user.
*/

dcl  page_names (14) char (4) internal static

     init ("-in1", "-in2",
     "-id1", "-d11", "-d12", "-d13",
     "-id2", "-d21", "-d22", "-d23",
     "-id3", "-d31", "-d32", "-d33");




dcl  com_err_ entry options (variable),
     et_util$skip entry (ptr, fixed bin (35), fixed bin (35));




dcl (addr,
     length,
     substr) builtin;
						/* 	*/
%include et_instr_data_map;
/* 	*/
%include et_setup_data;
/* 	*/
/*	First we must set up the window on the input  "page"  statement.  We will skip the
   *	"page"  field at the beginning of the statement.  Note, the initial values for all of
   *	the entries in the page_faults array is OFF which implies no page faults.
*/

	state_ptr = addr (statement);
	next_statement_x = length (statement);

	et_data_ptr = arg_et_data_ptr;

	start = 4;
	size = next_statement_x - 4;


/*	Now process all of the options in this statement.   */


	do while (code = 0);


/*	Look for the next page name.  We are done when we hit the end of the statement.  */

	     call et_util$skip (state_ptr, start, size);

	     if substr (window, 1, 1) = ";"

	     then return;


/*	Test to see if we have an  "-all"  option.  If not we will assume
   *	that it is a regular page name option.  Note, we will invert the value for all
   *	pages.  If other options are entered then they will will cause the page they represent
   *	to be an exception to the  "-all".
*/

	     if substr (window, 1, 4) = "-all"

	     then do i = 1 to 14;
		page_faults (i) = ^page_faults (i);
	     end;


	     else do;
		call find_page_name;
		if code ^= 0
		then return;
	     end;

	     start = start + 4;			/* Move window past page name. */
	     size = size - 4;

	end;					/*  End of  do  loop.  */


/*	This is the logical end of the  parse_page_statement  procedure.  */
/* 	*/
find_page_name: procedure;



/*	This procedure searches the  page_names  table for the current page name
   *	option which is assumed to be the next three characters  in the window.
   *	If  the page name option is valid then its position in the page_names
   *	table is used to locate it corresponding position in the  page_faults
   *	table and the entry in this table is changed.
*/



	     do i = 1 to 14;


		if substr (window, 1, 4) = page_names (i)

		then do;				/* We have found the page - invert its entry. */
		     page_faults (i) = ^page_faults (i);
		     return;
		end;

	     end;


/*	This page name option was not found so it must be illegal.  */

	     code = 501;
	     call com_err_ (0, "ET", "^d Page names option ^a is invalid.",
		code, substr (window, 1, 3));

	end find_page_name;




     end et_page;
