/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


et_data: procedure (statement, arg_et_data_ptr, code);



/*	This procedure will parse the data in a  "data"  statement that is part of the
   *	input script to the  eis_tester  program.
   *
   *	Created  Jan, 73  by  Bill Silver.
   *
   *
   *	A  "data"  statement has the following format:
   *
   *	data    num    -option    data_field ... data_field;
   *
   *	1.  The first field in the statement  MUST  be   "data".
   *
   *	2.  The second field in the statement  MUST  be the number of the data field.
   *	    It must be either  "1", "2", or "3".  Note, in some cases a  "data 3" statement
   *	    is valid even when there is no third descriptor.  In this case it will be used
   *	    to input test data.
   *
   *	3.  The following option field may occur anywhere after the number field.
   *	    -do  X     The  X  field must be a decimal integer from  -128 to +4096.
   *		     It represents a CHARACTER offset from character 0 of the middle page
   *	    of the data area.  Note, if the descriptor which points to this dat does not
   *	    use AR or REG modification then only offsets that are a multiple of  4  will
   *	    be accepted.
   *
   *	4.  Data may be defined by the following types of data fields.  They may be
   *	    intermixed.  The maximum size of the data is  1088  words ( 4352 characters ).
   *	    Note, the data used by  EIS  instructions is always  STRING type data and thus
   *	    the input modes are limited to the 2 described below.
   *
   *	    a)	ASCII - Input data may be an ASCII string.  It must be enclosed in
   *		quotes.  The maximum size of any one field is  256 characters.
   *		Quote characters may be entered in the string by expressing
   *		them as double quotes.  ("")
   *
   *	    b)	OCTAL - Data may be entered as a string of octal digits.  The first non
   *		octal digit type character found will indicate the end of the string
   *		of octal data.  The converted octal string will be padded on the  RIGHT
   *		with zero bits to make it an integral number of 9 bit characters.
   *
   *	5.  Repetition Factor  ( XX )  -  An unsigned decimal number enclosed in parenthesis
   *	    may be used to specify the repetition of a field.  Only the data field
   *	    immediately following the repetition field will be repeated.
*/
/* 	*/
/*		PARAMETERS  to   et_data.		*/


dcl  statement char (*),				/* The input string containing the   "data"
						   *  statement to be parsed. */

     arg_et_data_ptr ptr,				/* Input pointer to the  et  data.  */

     code fixed bin (35);				/* Error code.  */






/*		AUTOMATIC  DATA		*/


/*	The following data items are used in calls to  et_util. */

dcl  state_ptr ptr,					/* Pointer to the   "data"   input statement. */

     start fixed bin (35),				/* The number of characters allready
						   *  processed in this   "data"   statement.
						   *  The next character is the start of
						   *  the window.  */

     size fixed bin (35),				/* The current size ( in characters )
						   *  of the window on the  "data"  statement. */

     next_statement_x fixed bin;			/* Index of the last character in the
						   *  statement - in effect the number of
						   *  characters in the statement.  */



/*	These are some temporary variables. */

dcl  dec_num fixed bin,				/* Holds converted decimal number. */

     dx fixed bin (17),				/* Index to those tables that are dependent
						   *  on the data statements associated with
						   *  the three descriptors.  */

     i fixed bin,					/* Index.  */

     len fixed bin,					/* Length of a field. */

     rep_num fixed bin (17),				/* The number of times a data field is to
						   *  be repeated.  */

     result_x fixed bin,				/* The number of the descriptor which references
						   *  the result data for this instruction.  */

     save_offset fixed bin,				/* Used to save term from  "-do" option. */

     test_x fixed bin;				/* The number of the data statement used to
						   *  enter test data for this instruction.  */


dcl  data_ptr ptr;					/* Points to the current data area.  */



dcl  temp_buf char (256) aligned,			/* A temporary buffer used in processing the
						   *  input data fields.  */

     temp_buf_len fixed bin,				/* The number of characters currently in
						   *  this buffer.  */

     temp_buf_start fixed bin;			/* The indext to the next unused character
						   *  position in this buffer.  */





/*		BASED  DATA		*/


/*	This is an overlay of the input   "data"   statement.  */

dcl 1 data_statement based (state_ptr),			/* Used to access the input data statement
						   *  as a stream of characters. */

    2 offset char (start),				/* The part of the  "data"  statement which we have
						   *  allready processed. */

    2 window char (size);				/* The part of the  "data"  statement which we are
						   *  currently accessing.  */




/*	This is an overlay of the data areas where the input data will be moved.  */

dcl  data_area char (4352) based (data_ptr) aligned;



/*	This array defines a sting of real octal digits.  This string is placed in
   *	the temporary buffer.
*/
dcl  oct_array (1:768) bit (3) based unaligned;


/*	This is an overlay of one word.  It is used to move decimal and octal words.  */

dcl  char_word char (4) based aligned;



/*	This is an overlay of a descriptor word.  We are only interested in the address
   *	field in the descriptor.
*/

dcl 1 desc_map based,

   (2 pad1 bit (3),

    2 y fixed bin (14),

    2 pad2 bit (18)) unaligned;


/*	This is an overlay of an  mf  field.  */

dcl 1 mf_map based unaligned,
    2 ar bit (1),
    2 rl bit (1),
    2 id bit (1),
    2 reg bit (4);






/*		INTERNAL  STATIC  DATA		*/


/*	These indexes reference the test and result entries in the data_ptrs,
   *	data_lens, and data_offsets  arrays.
*/

dcl (tx fixed bin init (4),

     rx fixed bin init (5)) internal static;


/*	This constant consists of  one  quote character.  */

dcl  quote char (1) internal static init ("""");


/*	These arrays define octal digits and their bit values.  */

dcl  oct_chars (0:7) char (1) internal static
     init ("0", "1", "2", "3", "4", "5", "6", "7");


dcl  oct_bits (0:7) bit (3) internal static
     init ("000"b, "001"b, "010"b, "011"b,
     "100"b, "101"b, "110"b, "111"b);



/*	This array points to the three set up areas in  etx.  This is where the input
   *	data will be placed.
*/

dcl  set_data_ptrs (3) ptr internal static,

     init_flag fixed bin internal static init (0);






/*		EXTERNAL  DATA		*/


/*	The following declarations reference the procedures called by  et_data.
*/

dcl  com_err_ entry options (variable),

     et_util$skip entry (ptr, fixed bin (35), fixed bin (35)),
     et_util$convert_decimal entry (ptr, fixed bin (35), fixed bin (35), fixed bin, fixed bin (35)),
     et_util$char_rel entry (ptr, fixed bin),

     etx$set_data1 external,
     etx$set_data2 external,
     etx$set_data3 external;


dcl (addr,
     addrel,
     divide,
     fixed,
     length,
     null,
     search,
     substr,
     verify) builtin;
						/*  */
%include et_instr_data_map;
/* 	*/
%include et_setup_data;
/* 	*/
/*	Set up the window on the input   "data"   statement.  We will skip the
   *	"data"  field at the beginning of the statement.
*/

	state_ptr = addr (statement);
	next_statement_x = length (statement);

	et_data_ptr = arg_et_data_ptr;		/* Copy this argument.  */

	start = 4;
	size = next_statement_x - 4;

	save_offset = 0;


/*	Get the  num  field which must be next. */

	call et_util$skip (state_ptr, start, size);


/*	Validate and convert the num  field.  */

	len = verify (substr (window, 1, 1), "123");

	if len = 0

	then do;
	     dx = fixed (substr (window, 1, 1), 17);
	     start = start + 1;
	     size = size - 1;
	end;

	else do;
	     code = 401;
	     call com_err_ (0, "ET", "^d Illegal data num  field: ^a", code, substr (window, 1, 1));
	     return;
	end;


/*	Before we do anything more we will retrieve the test and result indexes for this
   *	instruction.  These values are needed in several places.  Also if this is
   *	the first time this procedure in the process we will initialize some
   *	pointers that we need.
*/

	test_x = et_instr_data$instructions (instr_num).test_x;

	result_x = et_instr_data$instructions (instr_num).result_x;

	temp_buf = " ";				/* Initialize mainly for debugging. */

	rep_num = 1;				/* It is reset after each data field is
						   *  moved into the setup area.  */


	if init_flag = 0

	then do;
	     set_data_ptrs (1) = addr (etx$set_data1);
	     set_data_ptrs (2) = addr (etx$set_data2);
	     set_data_ptrs (3) = addr (etx$set_data3);
	     init_flag = 1;
	end;


/*	Now check to see if this data statement is legal.  Only data 3 statements can be
   *	illegal.  They are illegal only if this instruction has no third descriptor and
   *	the  data 3  statement is not used to input test data.
*/

	if dx = 3

	then if (^et_instr_data$instructions (instr_num).desc_3_flag) &

	     (test_x ^= 3)

	     then do;
		code = 403;
		call com_err_ (0, "ET", "^d Illegal  data 3  statement.", code);
		return;
	     end;


/*	Now initialize the pointer to the set up data area in   etx  where this input data
   *	will be placed.
*/

	data_ptr = set_data_ptrs (dx);



/*	Now we can start processing the optional terms in the data statement.  We will continue to
   *	process these terms until we find an error or until there is no more input in this
   *	data statement.
*/


input_loop:


/*	Get the first character of the next field.  If there is no more input for this
   *	statement we will go to the  end of data  to perform some necessary finishing
   *	touches for this data statement.
*/

	call et_util$skip (state_ptr, start, size);

	if substr (window, 1, 1) = ";"
	then goto end_of_data;


/*	There is another field.  The first character of the field tells us what to
   *	do with this field.
*/

	if substr (window, 1, 1) = "("

	then call get_repetition_num;


	else if substr (window, 1, 1) = "-"

	then call get_data_off;


	else if substr (window, 1, 1) = quote

	then call get_ascii_data;


	else call get_octal_data;			/* This is the default.  */


/*	Regardless of which internal procedure was called it will return here.  We must
   *	check the error code it returns.  If there was an error we will print out the whole
   *	data statement and then return.
*/

	if code ^= 0

	then do;
	     start = 0;
	     size = next_statement_x;
	     call com_err_ (0, "ET", "^d data statement:  ^a", code, window);
	     return;
	end;


	goto input_loop;				/* This is the end of the  loop.  Each
						   *  iteration will process 1 input field.  */
						/* 	*/
						/*	We have finished processing all of the  data in this statement.  Now we must
						   *	perform a little special processing that can only be done when all the
						   *	data from this  data  statement are known.
						   *
						   *	The first thing we must do is to set up the  page_ptrs  for this data area.
						   *	Only the pages that are actually used will have non null entries.
						   */

end_of_data:

	if save_offset < 0				/* String starts in page 1. */

	then page_ptrs (3 + (dx-1)*4 + 1) = data_ptrs (dx);


	save_offset = save_offset + data_lens (dx);


	if save_offset > 0				/* String extends into page 2. */

	then page_ptrs (3 + (dx-1)*4 + 2) = addrel (data_ptrs (dx), 64);


	if save_offset > 4096			/* String extends into page 3. */

	then page_ptrs (3 + (dx-1)*4 + 3) = addrel (data_ptrs (dx), 1088);



/*	Now we must see if this statement is used to input  test or result  data.
   *	If so we must set up the array entries that are associated with test and
   *	result data.
*/

	if dx = test_x

	then do;					/* This statement inputs test data. */

	     data_ptrs (tx) = data_ptr;		/* Test data is in setup area. */

	     data_lens (tx) = data_lens (dx);		/* This is both test and result len. */
	     data_lens (rx) = data_lens (dx);

	     data_lens (dx) = 0;			/* This data is NOT set up before
						   *  the instruction is executed. */
	end;


	if dx = result_x

	then do;

	     data_ptrs (rx) = data_ptrs (dx);

	     data_offsets (rx) = data_offsets (dx);

	end;



/*	This is the logical end of the  et_data  procedure.	*/
/* 	*/
get_repetition_num: procedure;


/*	This procedure is called to parse a repetitions number field.  The repetition number
   *	must be enclosed in parenthesis and it must be a positive decimal number.
   *	It will be returned in the variable  "rep_num".
*/



	     start = start + 1;			/* Move the window past the  "(".  */
	     size = size - 1;


/*	Skip to the first decimal digit.  There may be blanks before and after the
   *	repetition number.
*/

	     call et_util$skip (state_ptr, start, size);


/*	Now find the number of digits in the repetition number.  We will also verify that
   *	it is a valiid decimal number.  Note, if the value returned in  "len"  is  0  then
   *	all characters in the rest of the statement are decimal digits.  If   "len"   is
   *	1 then the first character of the decimal number is not a decimal digit.
*/

	     len = verify (window, "0123456789");

	     if len < 2

	     then goto error_missing_right_paren;


	     len = len - 1;				/* Adjust  "len"  to get actual number of
						   *  decimal digits.  */

	     rep_num = fixed (substr (window, 1, len), 17); /* Convert repetition number.  */


	     start = start + len;			/* Move window past decimal number.  */
	     size = size - len;


/*	Now look for right parenthesis.   */

	     call et_util$skip (state_ptr, start, size);

	     if substr (window, 1, 1) ^= ")"
	     then goto error_missing_right_paren;


	     start = start + 1;			/* Move window past the ")".  */
	     size = size - 1;


	     return;




error_missing_right_paren:

	     code = 411;

	     call com_err_ (0, "ET", "^d Error in repetition factor - right parenthesis missing.", code);


	end get_repetition_num;
						/* 	*/
get_data_off: procedure;


/*	This procedure is called to process the  "-do"  option.  The field after the
   *	"-do" must be a decimal number from -128 to +7.  This number will be used to
   *	begin the data string at the CHARACTER which is offset the specified number of
   *	characters from character 0 of the first word of the second page of the data area.
   *	The number may be signed or unsigned.  We will convert and validate this number
   *	and if it is OK we will:
   *	1.  Determine the effective character position in the first word of daata.
   *	    This is stored in the corresponding  data_offsets  entry.
   *	2.  Adjust OUR data pointer for this data field.
   *	3.  Adjust the effective address of the descriptor which points to the data field.
   *	    How this is done depends upon the modification used in this descriptor.
*/



	     if substr (window, 1, 3) ^= "-do"

	     then do;
		code = 421;
		call com_err_ (0, "ET", "^d Unknown data statement option:  ^a",
		     code, substr (window, 1, 5));
		return;
	     end;


	     if save_offset ^= 0

	     then do;
		code = 422;
		call com_err_ (0, "ET", "^d ""-do"" option entered twice.", code);
		return;
	     end;


	     start = start + 3;			/* Move window past the option name.  */
	     size = size - 3;


	     call et_util$skip (state_ptr, start, size);


	     call et_util$convert_decimal (state_ptr, start, size, dec_num, code);

	     if code ^= 0 then return;


	     if (dec_num < -128) | (dec_num > 4096)

	     then do;
		code = 423;
		call com_err_ (0, "ET", "^d Illegal data offset:  ^d", code, dec_num);
		return;
	     end;


/*	Now check to be sure that this data statement may have a  "-do" option field.
   *	Some  data 3  statements are only used to input test data.
*/

	     if (^et_instr_data$instructions (instr_num).desc_3_flag) &
	     (dx = 3) & (test_x = 3)

	     then do;
		code = 424;
		call com_err_ (0, "ET", "^d -do  option not allowed in this  data 3  statement.", code);
		return;
	     end;


	     save_offset = dec_num;			/* Save offset value.  Needed at end. */


/*	Figure out offset of string in first word.  */
	     if dec_num > -1

	     then data_offsets (dx) = dec_num - (divide (dec_num, 4, 17, 0) * 4);

	     else do;
		i = - dec_num;
		data_offsets (dx) = 4 - (i - (divide (i, 4, 17, 0) * 4));
		if data_offsets (dx) = 4
		then data_offsets (dx) = 0;
	     end;


/*	Adjust our own data pointer.  */

	     call et_util$char_rel (data_ptrs (dx), dec_num);


/*	We must adjust the effective address of this data's descriptor.  Note, the offset
   *	is  dec_num  is a character offset.
*/

	     if mf_ptrs (dx) ^= null ()		/* Is there an  mf  field for this descriptor? */


	     then do;				/* YES, see if  AR  modification specified. */

		if mf_ptrs (dx) -> mf_map.ar
		then do;				/* AR mod, adjust pointer. */
		     call et_util$char_rel (pointers (dx), dec_num);
		     return;
		end;
	     end;


/*	Either there was no  mf  field or the mf field did not specify AR or REG modification.
   *	In either case we will have to adjust the word offset field in the descriptor itself.
   *	This implies that the character offset specified by the user must be a multiple
   *	of 4.  If it isn't then there is an error.
*/

	     len = divide (dec_num, 4, 17, 0);

	     if (dec_num - len * 4) ^= 0

	     then do;
		code = 425;
		call com_err_ (0, "ET", "^d Data offset must be multiple of 4 - only word modification possible.", code);
		return;
	     end;

/*	Offset is a multiple of the word size so we will adjust the descriptor offset field.  */

	     addr (descriptors (dx)) -> desc_map.y =
		addr (descriptors (dx)) -> desc_map.y + len;


	end get_data_off;
						/*  */
get_ascii_data: procedure;


/*	This procedure is called to move ASCII type input data into a set up data area in
   *	etx.  It will move all of the data into a temporary buffer.  Then using the
   *	repetiton factor it will move this string into the set up data area.
*/



	     temp_buf_len = 0;			/* Initialize values dealing with  */
	     temp_buf_start = 1;			/* temporary buffer.  */



ascii_loop:					/* This loop will get all the character up to
						   *  then next quote and move them into the
						   *  temporary buffer.  */


	     start = start + 1;			/* Move window past the left quote.  */
	     size = size - 1;


	     len = search (window, quote);		/* Look for the right hand quote.  */

	     if len = 0				/* Did we find a quote?  */
	     then do;				/* NO.  */
		code = 421;
		call com_err_ (0, "ET", "^d Missing right quote in ASCII input string.", code);
		return;
	     end;


	     len = len - 1;				/* Get the actual number of characters in
						   *  the string.  */


/*	If the string is not null and the input buffer will not be overflowed then
   *	we will move the string into the temporary buffer.
*/

	     if temp_buf_len + len > 256		/* Is the input string too long? */

	     then do;				/* YES. */
		code = 422;
		call com_err_ (0, "ET", "^d ASCII input field qreater than 256 characters.", code);
		return;
	     end;


	     if len ^= 0

	     then substr (temp_buf, temp_buf_start, len) = substr (window, 1, len);


/*	Now that the data has been moved add to the temporary totals.  */

	     temp_buf_start = temp_buf_start + len;
	     temp_buf_len = temp_buf_len + len;

	     start = start + len + 1;			/* Move window past the end of this string */
	     size = size - len - 1;			/* and past the right quote.  */


/*	Now look for an embedded quote.  It will be expressed as a dbouble quote.
   *	Thus if the next character is a quote we will move this one character into the
   *	temporary buffer and then go back to the beginning of the loop to finish processing
   *	the rest of the string.
*/

	     if substr (window, 1, 1) = quote

	     then do;

		substr (temp_buf, temp_buf_start, 1) = quote;

		temp_buf_start = temp_buf_start + 1;
		temp_buf_len = temp_buf_len+ 1;

		start = start + 1;
		size = size - 1;

		goto ascii_loop;			/* The loop is set up just to look for
						   *  embedded quotes.  */
	     end;



/*	We have finished processing the whole input ASCII string for the field.  Now using
   *	the repetition factor we will move it into the set up data area.
*/

	     call move_data;


	end get_ascii_data;
						/* 	*/
get_octal_data: procedure;


/*	This procedure is called to process a STRING  of octal digit characters.  The
   *	converted string will be moved into the set up data area using the repition
   *	factor.
*/



	     len = 1;				/* Start converted string at the beginning
						   *  of the temporary buffer.  */


octal_loop:					/* Each iteration of this loop will process
						   *  1 octal digit character.  */

	     do i = 0 to 7;

		if substr (window, len, 1) = oct_chars (i)

		then do;
		     addr (temp_buf) -> oct_array (len) = oct_bits (i);
		     len = len + 1;
		     goto octal_loop;
		end;
	     end;

	     len = len - 1;				/* Get the actual number of octal digits
						   *  found in this string.  */

	     if len < 1
	     then do;
		code = 431;
		call com_err_ (0, "ET", "^d No octal digit found in octal field: ^a",
		     code, substr (window, len, 1));
		return;
	     end;


	     do i = 1 to 2;
		addr (temp_buf) -> oct_array (len+i) = oct_bits (0);
	     end;

	     start = start + len;			/* Move window to after the octal string. */
	     size = size - len;

	     len = len + 2;				/* Get number of characters to move. */
	     temp_buf_len = divide (len, 3, 17, 0);

	     call move_data;



	end get_octal_data;
						/*  */
move_data: procedure;


/*	This procedure is called to move the data in the temporary buffer into the
   *	set up data area for this statement.  This operation will be performed as many
   *	times as specified in the repetiton factor for this field.
*/


	     do i = 1 to rep_num;

		data_lens (dx) = data_lens (dx) + 1;	/* Get starting position in data area. */

		substr (data_area, data_lens (dx), temp_buf_len) =

		     substr (temp_buf, 1, temp_buf_len);

		data_lens (dx) = data_lens (dx) -1 + temp_buf_len;

	     end;


	     rep_num = 1;				/* Reset the repitition number for the
						   *  next field that is input.  The repitition
						   *  number is valid for only one field at
						   *  a time.  */


	end move_data;



     end et_data;
