/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


et_desc: procedure (statement, arg_et_data_ptr, code);



/*	This procedure will parse the data in a "desc" statement that is part of
   *	the input script to the  eis_tester  program.
   *
   *	Originally coded  Nov, 72  by  Bill Silver
   *
   *
   *	A  desc  statement has the following format.
   *
   *	desc	num	-option . . . -option  ;
   *
   *	1.  The first field in the statement MUST be "desc".
   *
   *	2.  The second field in the statement MUST be the number of the
   *	    descriptor.  It MUST be either "1", "2", or "3".
   *
   *	3.  Any number of valid  "desc"  statement options may follow.
   *	    The format is the same for all desc options.  It is:
   *
   *	    -name	  term
   *
   *	4.  name is the two character name of the option and term is the data
   *	    associated with this option.  The valid option names are:
   *
   *	    a)	cp	The original character position within a word of
   *			9 bit characters.  It is used in bit string instructions.
   *			Its term must be a number from  0 - 3.
   *
   *	    b)  	bp	The original bit position within a  9  bit character.
   *			Its term must be a number from  0 - 8.
   *
   *	    c)	cn	The original character number within the data word
   *			referenced by the original data word address.
   *			It is used in character string instructions.  Its term must be
   *			a number from  0 - 7.  The meaning of this term is defined by
   *			the  "ta" and "tn" fields.  NOTE, if the instruction is:
   *			CMPC, SCD, SCDR, SCM,  or  SCMR  then the  "desc 2"  statement
   *			may NOT specify a "ta" field.  Descriptor 2 must use the value
   *			specified in descriptor 1.  To use this feature the  "desc 1"
   *			statement MUST PRECEED the  "desc 2" statement.
   *
   *	    d)	ta	Defines the alphanumeric character type.
   *			Its term must be either:  9, 6, or 4.
   *
   *	    e)	tn	Defines the type of numeric character.
   *			Its term must be either  9 or 4.
   *
   *	    f)	sd	The  sign and decimal  type.
   *			Its term must be one of the following characters:
   *			  f  -  Floating point, leading sign
   *			  l  -  Leading sign,  scaled
   *			  t  -  Trailing sign, scaled
   *			  n  -  No sign,  scaled
   *
   *	    g)	sf	The scaling factor.
   *			Its term is a signed (or unsigned) decimal number.
   *
   *	    h)	ns	The number of characters or bits in a string.
   *			Its term is an unsigned decimal number.
   *
   *	    i)	nn	The number of characters in a numeric string.
   *			Its term is an unsigned decimal number which must not
   *			be greater than  64.
*/









/*		PARAMETER  DATA		*/


dcl  statement char (*),				/* The input string containing the  "desc"
						   *  statement to be parsed. */

     arg_et_data_ptr ptr,				/* Input pointer to the  et  data.  */

     code fixed bin (35);				/* Error code.  */






/*		AUTOMATIC  DATA		*/


/*	The following data items are used in calls to  et_util.  */

dcl  state_ptr ptr,					/* Pointer to the  "desc"  input statement. */

     start fixed bin (35),				/* The number of characters allready
						   *  processed in this  "desc"  statement.
						   *  The next character is the start of
						   *  the window.  */

     size fixed bin (35),				/* The current size ( in characters )
						   *  of the window on the "desc" statement. */

     next_statement_x fixed bin;			/* Index of the last character in the
						   *  statement - in effect the number of
						   *  characters in the statement.  */


/*	These are some temporary variables. */

dcl  dec_num fixed bin,				/* Holds converted decimal number. */

     i fixed bin,

     len fixed bin,					/* Length of a field. */

     desc_ptr ptr,					/* Work pointer to a descriptor word. */

     option_name char (3),				/* Used to temporarily hold option name. */

     option_num fixed bin;				/* Option index.  */


/*	The following data items are used when processing descriptors.  */

dcl  dx fixed bin (17),				/* Index to  those tables
						   *  that are dependent on the three
						   *  descriptors or indirect words. */

     cn_value fixed bin;				/* Character position. */





/*		BASED  DATA		*/


/*	This is an overlay of the input  "desc"  statement.  */

dcl 1 desc_statement based (state_ptr),			/* Used to access the input data statement
						   *  as a stream of characters. */

    2 offset char (start),				/* The part of the "desc" statement which we have
						   *  allready processed. */

    2 window char (size);				/* The part of the "desc" statement which we are
						   *  currently accessing.  */


/*	An overlay of the decimal numbers which hold the input data terms.  */

dcl  bit_word bit (36) based (addr (dec_num)) aligned;


/*	An overlay of an  mf  field.  */

dcl 1 mf_map based unaligned,
    2 ar bit (1),
    2 rl bit (1),
    2 id bit (1),
    2 reg bit (4);


/*	The following three declarations are used to reference fields in the three
   *	types of descriptors  - bit string, alphanumeric, and numeric.
*/

dcl 1 desc_bit_map based aligned,
   (2 pad1 bit (18),
    2 c bit (2),
    2 b bit (4),
    2 n bit (12)) unaligned;

dcl 1 desc_alpha_map based aligned,
   (2 pad1 bit (18),
    2 cn bit (3),
    2 ta bit (2),
    2 pad2 bit (1),
    2 n bit (12)) unaligned;

dcl 1 desc_num_map based aligned,
   (2 pad1 bit (18),
    2 cn bit (3),
    2 tn bit (1),
    2 s bit (2),
    2 sf bit (6),
    2 n bit (6)) unaligned;




/*		INTERNAL  STATIC  DATA	*/


dcl  option_names (9) char (3) internal static
     init ("-cp", "-bp", "-cn", "-ta", "-tn", "-sd", "-sf", "-ns", "-nn");


dcl  sd_table (0:3) char (1) internal static
     init ("f", "l", "t", "n");


/*	This table is a list of the names of the  4  types of  eis  instruction.  */

dcl  instr_type_names (4) char (12) aligned internal static
     init ("alphanumeric", "numeric     ",
     "bit  string ", "conversion  ");





/*		EXTERNAL  DATA		*/


/*	The following declarations reference the procedures called by  et_desc.  */

dcl  com_err_ entry options (variable),

     et_util$get_next entry (ptr, fixed bin (35), fixed bin (35), char (*), fixed bin),
     et_util$skip entry (ptr, fixed bin (35), fixed bin (35)),
     et_util$convert_decimal entry (ptr, fixed bin (35), fixed bin (35), fixed bin,
     fixed bin (35));


dcl (addr,
     fixed,
     length,
     null,
     substr,
     verify) builtin;
						/*  */
%include et_instr_data_map;
/* 	*/
%include et_setup_data;
/* 	*/
/*	Set up the window on the input  "desc"  statement.  We will skip the
   *	"desc" field at the beginning of the statement.
*/

	state_ptr = addr (statement);
	next_statement_x = length (statement);

	et_data_ptr = arg_et_data_ptr;		/* Copy this argument.  */


	start = 4;
	size = next_statement_x - 4;


/*	Get the  num  field which must be next. */

	call et_util$skip (state_ptr, start, size);


/*	Validate and convert the num  field.  */

	len = verify (substr (window, 1, 1), "123");

	if len = 0				/* 0 => number found in string "123".  */

	then dx = fixed (substr (window, 1, 1), 17);

	else do;
	     code = 301;
	     call com_err_ (0, "ET", "^d Illegal desc num  field: ^a",
		code, substr (window, 1, 1));
	     return;
	end;


/*	Now test to see if we should process this descriptor.  Only descriptor 3  is in
   *	question.  If this  num field  is a  3  then check to see if this instruction has
   *	3  descriptors.
*/

	if dx = 3

	then if ^ et_instr_data$instructions (instr_num).desc_3_flag

	     then do;
		code = 302;
		call com_err_ (0, "ET", "^d desc 3 statement invalid - instruction has only 2 descriptors.", code);
		return;
	     end;


/*	Get a pointer to the descriptor we will be working with.  */

	desc_ptr = addr (descriptors (dx));


	start = start + 1;				/* Move window past  num  field. */
	size = size - 1;

	cn_value = -1;				/* Indicate no  cn  option specified.  */




/*	Now start to process the options.  We will test for each possible
   *	option name.  Each iteration of the loop will process one option.
*/


option_loop:


/*	Get the next option name.  If there are no more options then we have processed
   *	all of the options in this  "desc" statement.  Before we return we must set up
   *	the  "cn"  field.
*/

	call et_util$get_next (state_ptr, start, size, "-", len);

	if len = 0
	then goto setup_cn_field;


/*	We will try to find this option name in our list of valid names.  */

	option_name = substr (window, 1, 3);

	do option_num = 1 to 9;
	     if option_names (option_num) = option_name
	     then goto found_option;
	end;

/*	We did not find a valid option name.  There must be an input error.  */

	code = 303;

	call com_err_ (0, "ET", "^d Illegal option ""^a"" in ""desc ^d"" statment.",
	     code, option_name, dx);

	return;


/*	We have found a valid option name.  We will position the window to the beginning
   *	of the term field.  For all but the  "-sd" option the term will be a decimal number.
   *	We will get the decimal term.  Then we will go to the code which processes this
   *	option.
*/

found_option:

	start = start + 3;
	size = size - 3;

	call et_util$skip (state_ptr, start, size);

	if option_name = "-sd"
	then goto option_routine (option_num);

	call et_util$convert_decimal (state_ptr, start, size, dec_num, code);

	if code ^= 0
	then do;
	     call com_err_ (0, "ET", "^d Illegal term for ""^a"" option in ""desc ^d"" statement.",
		code, option_name, dx);
	     return;
	end;

	goto option_routine (option_num);
						/*  */
option_routine (1):					/*  -cp  */

	if instr_type ^= 3				/* Must be  bit string  type. */
	then goto illegal_option;

	if (dec_num < 0) | (dec_num > 3)
	then goto illegal_term;

	desc_ptr -> desc_bit_map.c = substr (bit_word, 35, 2);

	goto option_loop;



option_routine (2):					/*  -bp  */

	if instr_type ^= 3				/* Must be  bit string  type.  */
	then goto illegal_option;

	if (dec_num < 0) | (dec_num > 8)
	then goto illegal_term;

	desc_ptr -> desc_bit_map.b = substr (bit_word, 33, 4);

	goto option_loop;



option_routine (3):					/*  -cn  */

	if instr_type = 3				/* All but bit string type. */
	then goto illegal_option;

	if (dec_num < 0) | (dec_num > 8)
	then goto illegal_term;

	cn_value = dec_num;				/* Save character number.  We don't know
						   *  character size yet.  */
	goto option_loop;



option_routine (4):					/*  -ta  */

	if instr_type ^= 1				/* Must be  alphanumeric  type.  */
	then goto illegal_option;

/*	Check to see if it is legal to specify a character size.  */

	if num_chars (dx) = -1
	then do;
	     code = 305;
	     call com_err_ (0, "ET", "^d ""-ta"" option illegal - must use ""ta"" from descriptor 1.",
		code);
	     return;
	end;

	if num_chars (dx) = 1
	then do;
	     code = 306;
	     call com_err_ (0, "ET", "^d ""-ta"" option illegal - descriptor may only reference words.",
		code);
	     return;
	end;

/*	We will wet up the  "ta" field in the descriptor now.  We will check for valid
   *	input and convert the character size to the correct bits.   We must also change the
   *	num_chars entry if the character size is not the default:  9 bits.
*/

	if dec_num = 9				/* 9 is the default value.  */
	then goto option_loop;

	if dec_num = 6
	then do;					/* 6  6 bit  characters per word. */
	     num_chars (dx) = 6;
	     desc_ptr -> desc_alpha_map.ta = "01"b;
	     goto option_loop;
	end;

	if dec_num = 4
	then do;					/* 8  4 bit  characters per word. */
	     num_chars (dx) = 8;
	     desc_ptr -> desc_alpha_map.ta = "10"b;
	     goto option_loop;
	end;

	goto illegal_term;				/* "ta" term must be 9,6, or 4. */



option_routine (5):					/*  -tn  */

/*	Must be type  numeric or conversion.  */

	if (instr_type = 1) | (instr_type = 3)
	then goto illegal_option;

	num_chars (dx) = dec_num;

	if dec_num = 9
	then goto option_loop;

	if dec_num = 4
	then do;
	     desc_ptr -> desc_num_map.tn = "1"b;
	     goto option_loop;
	end;

	goto illegal_term;




option_routine (6):					/*  -sd  */

/*	Must be  numeric or conversion type.  */

	if (instr_type = 1) | (instr_type = 3)
	then goto illegal_option;

	do dec_num = 0 to 3;			/* Look for a valid term. */

	     if sd_table (dec_num) = substr (window, 1, 1)

	     then do;				/* Found valid term. */
		desc_ptr -> desc_num_map.s = substr (bit_word, 35, 2);
		goto option_loop;
	     end;
	end;

	code = 307;
	call com_err_ (0, "ET", "^d Illegal term for option ""-sd"": ^a", code, substr (window, 1, 1));

	return;



option_routine (7):					/*  -sf  */

/*	Must be  numeric or conversion  type.  */

	if (instr_type = 1) | (instr_type = 3)
	then goto illegal_option;

	if (dec_num < -32) | (dec_num > 31)
	then goto illegal_term;

	desc_ptr -> desc_num_map.sf = substr (bit_word, 31, 6);

	goto option_loop;



option_routine (8):					/*  -ns  */

/*	Must be  alphanumeric or bit string  type.  */

	if (instr_type = 2) | (instr_type = 4)
	then goto illegal_option;

	if (dec_num < 0) | (dec_num > 4096)
	then goto illegal_term;

	desc_ptr -> desc_bit_map.n = substr (bit_word, 25, 12);

	goto check_rl_mod;



option_routine (9):					/*  -nn  */

/*	Must be  numeric or conversion  type.  */

	if (instr_type = 1) | (instr_type = 3)
	then goto illegal_option;

	if (dec_num < 0) | (dec_num > 63)
	then goto illegal_term;

	desc_ptr -> desc_num_map.n = substr (bit_word, 31, 6);


/*	For options  "ns" and "nn" we will check that the user has not also specified
   *	RL  modification.
*/

check_rl_mod:

	if mf_ptrs (dx) ^= null ()

	then if mf_ptrs (dx) -> mf_map.rl

	     then do;
		code = 308;
		call com_err_ (0, "ET", "^d An ""^a"" option is illegal with RL modification.",
		     code, option_name);
		return;
	     end;
	goto option_loop;
						/* 	*/
						/*	We come here when all of the options have been processed.  If a  "-cn" option was
						   *	entered we will figure out what value we should put in the descriptor  "cn"  field.
						   *	It depends upon the character size.
						   */

setup_cn_field:


/*	If the  "cn"  field was never specified then we don't have to set it up.
   *	Either it is not used for this type of instruction or the user wants the default
   *	value.  An exception, however, must be made if this is descriptor 2 of one
   *	of the instructions that must use the  "ta" value from descriptor 1.  If we find
   *	this to be the case we will just change to use the values for descriptor 1.
*/

	if cn_value = - 1				/* No  -cn  option entered. */
	then return;


	if num_chars (dx) = -1
	then dx = 1;


	dec_num = cn_value;				/* Move value to where bit_word will
						   *  reference it.  */

	if num_chars (dx) = 4			/* "ta" or "tn" fields specify 9 bit characters.
						   *  This is the default value.  */
	then do;
	     if cn_value > 3
	     then goto illegal_cn_term;
	     dec_num = dec_num * 2;
	end;

	else if num_chars (dx) = 6

	then if cn_value > 5
	     then goto illegal_cn_term;

/*	If  4 bit characters  we just come here.  Any  cn  value from  0 - 7  is
   *	valid.
*/

	desc_ptr -> desc_alpha_map.cn = substr (bit_word, 34, 3);

	return;





illegal_option:

	code = 320 + option_num;

	call com_err_ (0, "ET", "^d "" ^a "" option is illegal for ^a type instruction.",
	     code, option_name, instr_type_names (instr_type));

	return;




illegal_term:

	code = 330 + option_num;

	call com_err_ (0, "ET", "^d Decimal term  ^d  not valid for option ""^a"".",
	     code, dec_num, option_name);

	return;



illegal_cn_term:

	code = 312;

	call com_err_ (0, "ET", "^d cn value  ^d  illegal for character size ^d",
	     code, cn_value, num_chars (dx));



     end et_desc;
