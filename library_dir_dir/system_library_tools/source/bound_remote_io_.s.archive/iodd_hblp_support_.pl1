/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-06-07,Brunelle), approve(88-06-07,MCR7911),
     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
     Created.
  2) change(88-11-14,Brunelle), approve(88-11-14,PBF7911),
     audit(88-11-14,Wallman), install(88-11-14,MR12.2-1212):
     Correct problem of going into raw output mode for bold faced chars and
     never returning to normal mode.  Also drop the top line on each page
     enough so the page is centered vertically.
  3) change(88-12-05,Brunelle), approve(88-12-05,MECR0005),
     audit(88-12-05,Wallman), install(88-12-05,MR12.2-1219):
     Correct first page of document not being properly aligned at top of page.
                                                   END HISTORY COMMENTS */

/* format: style4 */

iodd_hblp_support_: proc;
	return;					/* no entry here */

/* this module contains the following utility subroutines for the
   Honeywell Bull Model 80 laser printer:

   complete_attach - This completes the attachment for the initial iox_$attach
   call.

   open - iox_$open replacement for remote_printer_,

   control - iox_$control replacement for remote_printer_,

   modes - iox_$modes replacement for remote_printer_,

   put_chars - iox_$put_chars replacement for remote_printer_.

*/

/* Arguments */

dcl  a_code fixed bin (35) parameter;			/* error code */
dcl  a_data_chars fixed bin (21) parameter;		/* # of chars to output */
dcl  a_data_ptr ptr parameter;			/* ptr to data to output */
dcl  a_iocbp ptr parameter;				/* iocb ptr to process on */
dcl  a_mode fixed bin parameter;			/* open mode */
dcl  a_new_modes char (*) parameter;			/* new modes to assign */
dcl  a_old_modes char (*) parameter;			/* current modes */
dcl  a_order char (*) parameter;			/* control order to process */
dcl  a_orderp ptr parameter;				/* options control order info ptr */
dcl  a_sw bit (1) parameter;				/* com_err_ switch for attach */

/* External Procedures and Variables */

dcl  continue_to_signal_ entry (fixed bin (35));
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$bad_mode fixed bin (35) ext static;
dcl  error_table_$not_attached fixed bin (35) ext static;
dcl  error_table_$not_closed fixed bin (35) ext static;
dcl  error_table_$not_open fixed bin (35) ext static;
dcl  error_table_$request_pending fixed bin (35) ext static;
dcl  error_table_$timeout fixed bin (35) ext static;
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  prt_conv_ entry (ptr, fixed bin (21), ptr, fixed bin (21), ptr);
dcl  remote_driver_$problem_notification entry (char (*));
dcl  remote_printer_$remote_printer_position external entry;
dcl  remote_printer_$remote_printer_close external entry;
dcl  remote_printer_control_ entry (ptr, char (*), ptr, fixed bin (35));
dcl  remote_printer_modes_ entry (ptr, char (*), char (*), fixed bin (35));
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  timed_io_$get_chars entry (ptr, fixed bin (71), ptr, fixed bin (21), fixed bin (21), fixed bin (35));

dcl  (addr, copy, currentsize, divide, index, length, mod, null, rtrim, string, substr, unspec) builtin;

dcl  any_other condition;

/* Internal Static */

dcl  VT_or_FF char (2) int static options (constant) init ("");
dcl  CR char (1) int static options (constant) init ("");
dcl  FF char (1) defined VT_or_FF position (2);
dcl  NL char (1) int static options (constant) init ("
");
dcl  last_char_was_ff bit (1) internal static init ("1"b);
dcl  my_area area based (my_area_ptr);
dcl  my_area_ptr ptr int static init (null);
dcl  printer_device char (32) int static options (constant) init ("printer");
dcl  prt_conv_on bit (1) int static init ("1"b);		/* ON if should call prt_conv_ */

/* save data for label processing if needed */
dcl  1 labels int static,
       2 delta_lines fixed bin,			/* number of lines needed for labels */
       2 need_initial_ff bit (1) init ("1"b),
       2 have_labels bit (1) init ("0"b),		/* ON if we have top and/or bottom labels */
       2 have_top_label bit (1) init ("0"b),		/* ON if we have a top label */
       2 have_bottom_label bit (1) init ("0"b);		/* ON if we have a bottom label */

/* Automatic */

dcl  charp ptr;					/* ptr to chars to output */
dcl  code fixed bin (35);				/* error code */
dcl  cur_page fixed bin (24);
dcl  ec fixed bin (35);				/* internal error code */
dcl  get_printer_status bit (1);
dcl  i fixed bin;
dcl  ignore fixed bin (35);
dcl  iocbp ptr;					/* copy of iocb ptr */
dcl  mask bit (36) aligned;				/* for setting ips mask */
dcl  old_modes char (512);
dcl  open_mode fixed bin;				/* copy of opening mode */
dcl  order char (32);				/* copy of order to process */
dcl  output_string char (record_len) based (prt_conv_outp);
dcl  prt_conv_outp ptr;
dcl  record_len fixed bin (21);
dcl  remaining_chars fixed bin (21);			/* # of chars left to process in this put_chars call */
dcl  runout_mode bit (1);				/* set ON if check_printer_status
						   is called for "runout" control order */
dcl  send_raw bit (1);
dcl  temp_line char (1024) varying;
dcl  top_line_drop_count fixed bin;
dcl  total_chars fixed bin (24);			/* # of chars requested by put_chars */

dcl  osdata_ptr ptr;
dcl  osdata_line_count fixed bin;
dcl  osdata_line_size fixed bin;
dcl  osdata_temp_ptr ptr;
dcl  1 osdata based (osdata_ptr),
       2 max_line_count fixed bin,			/* max # overstruck lines */
       2 line_count fixed bin,			/* # overstruck lines */
       2 line_size fixed bin,				/* # chars in each line */
       2 bolding (osdata_line_size refer (osdata.line_size)) bit (1) unaligned,
       2 line (
	  osdata_line_count refer (osdata.max_line_count),
	  osdata_line_size refer (osdata.line_size))
	  char (1) unaligned;
%page;

/* entrypoint to complete the processing for the iox_$attach call in
   remote_printer_.  This starts propagating any special processing required
   for the new device.  In our case, it merely causes the open entry in the
   IOCB to point to our open entry. */

complete_attach: entry (a_iocbp, a_code);

/* copy input args */
	iocbp = a_iocbp;				/* ptr to iocb to alter */
	a_code = 0;

	if my_area_ptr = null then
	     my_area_ptr = get_system_free_area_ ();

/* mask & alter the IOCB */
	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.open = hblp_open;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

/* place init_iocbp does a non-local goto to get out through if not attached */
return_now:
	return;
%page;

/* replacement for iox_$open in remote_printer_ */

/* this entrypoint is identical to that in remote_printer_ EXCEPT

   . it opens it's output switch for input/output where remote_printer_ only
   opens for output.

   . it uses our control, modes and put_chars entrypoints.
*/

hblp_open: entry (a_iocbp, a_mode, a_sw, a_code);

	call init_iocbp ("0"b);

	open_mode = a_mode;
	if ^((open_mode = Stream_output) | (open_mode = Stream_input_output)) then do;
	     a_code = error_table_$bad_mode;
	     return;
	end;

/* We will attempt to open the stream for sequential I/O first.  If that fails
   we will then go for stream I/O.  In either case we will make note of what
   worked in ad.record_io. */
	call iox_$open (ad.terminal_iocbp, Sequential_input_output, "0"b, a_code);
	if a_code = 0 then do;
	     ad.record_io = "1"b;			/* we have record interface approval */
	     call hcs_$make_ptr (null, "remote_conv_", "printer", ad.cv_proc, a_code);
	     if a_code ^= 0 then
		return;
	end;
	else do;
	     ad.record_io = "0"b;			/* we have stream interface only */
	     call iox_$open (ad.terminal_iocbp, Stream_input_output, "0"b, a_code);
	     if a_code ^= 0 then
		return;
	     call hcs_$make_ptr (null, ad.terminal || "conv_", "printer", ad.cv_proc, a_code);
	     if a_code ^= 0 then
		return;
	end;

	ad.open_description = rtrim (iox_modes (open_mode));
	ad.static_overstrike_data_ptr = null;
	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

/* These are system entries */
	iocbp -> iocb.put_chars = hblp_put_chars;
	iocbp -> iocb.control = hblp_control;
	iocbp -> iocb.modes = hblp_modes;

/* these are my entries */
	iocbp -> iocb.position = remote_printer_$remote_printer_position;
	iocbp -> iocb.close = remote_printer_$remote_printer_close;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;

/* replacement for iox_$control in remote_printer_ */

/* this entrypoint is used so we can pre/post process some of the control orders */

hblp_control: entry (a_iocbp, a_order, a_orderp, a_code);

	if debug then call debug_display (1);
	call init_iocbp ("1"b);

	orderp = a_orderp;
	order = a_order;
	code = 0;

	if order = "io_call" then do;			/* set up for command call */
	     if a_orderp = null then do;
		code = error_table_$bad_arg;
		go to control_return;
	     end;
	     order = orderp -> io_call_info.order_name;
	     orderp = null;
	end;

/* remember to ignore or call prt_conv_ when processing data */
	else if order = "prt_conv_on" | order = "prt_conv_off" then do;
	     prt_conv_on = (order = "prt_conv_on");
	     go to control_return;
	end;

/* make sure printer has printed everything sent to it */
	else if order = "runout" then do;
	     runout_mode = "1"b;
	     call check_printer_status;
	end;

/* issued by do_prt_request_ only to get to bottom of current page, 1 line
   past where bottom label would be printed on the page.  If we are not
   outputting labels, fake out prt_conv_ so it thinks it is there, otherwise
   pass the control order on only if we have a bottom label to output. */
	else if order = "end_of_page" then do;
	     if ^labels.have_bottom_label then do;
		pci.line = pci.phys_page_length - 2;
		go to control_return;
	     end;
	end;

/* issued by do_prt_request_ to get to the proper page before starting to
   display.  fake out prt_conv_ by eating the orders here
   else if order = "inside_page" | order = "outside_page" then do;
   go to control_return;
   end;
*/

/* process here so we can handle sheets_per_page properly and return a 0 error
   code if all goes well */
	else if order = "paper_info" then do;		/* Set new physical paper characteristics. */
	     if paper_info.lines_per_inch ^= 6 & paper_info.lines_per_inch ^= 8 then do;
bad_arg:		code = error_table_$bad_arg;
		go to control_return;
	     end;
	     if paper_info.phys_page_length < 10 | paper_info.phys_page_length > 127 then
		go to bad_arg;
	     if paper_info.phys_line_length < 10 | paper_info.phys_line_length > 255 then
		go to bad_arg;

	     pci.phys_page_length = paper_info.phys_page_length;
	     pci.phys_line_length = paper_info.phys_line_length;
	     pci.lpi = paper_info.lines_per_inch;

/* This is the equivalent of call to prtdim_changemode$remote_printer_modes_
   passing in a null new modes.  It insures the consistency of prt_conv_info
   structure.  It was moved here so we can special case the sheets_per_page
   data */

	     pci.rmarg = pci.phys_line_length;
	     pci.lmarg = 0;

	     if pci.overflow_off then do;
		pci.top_label_length,		/* "noskip" and page labels are inconsistent */
		     pci.bot_label_length = 0;
		pci.page_length = pci.phys_page_length; /* max number of lines on each page */
		pci.sheets_per_page = 1;		/* one sheet per page in noskip mode */
	     end;

/* "^noskip" mode, compute module 10 lines perpage & physical sheets of paper per page */
	     else do;
		pci.page_length = pci.phys_page_length - mod (pci.phys_page_length, 10);
		pci.sheets_per_page =
		     divide (pci.page_length - 1 + pci.phys_page_length, pci.phys_page_length, 17, 0);
	     end;

	     go to control_return;
	end;

/* let the prtdim control order processor have at the control order.  If it
   returns an error code, it probabily couldn't handle it.  In that case we
   will pass it to the next I/O module following us which may be able to
   handle it. */
	call remote_printer_control_ (iocbp, order, orderp, code);
	if code ^= 0 then do;			/* if not done or partially completed, pass it on */
	     call iox_$control (ad.terminal_iocbp, order, orderp, ec);
	     if ec = 0 then
		code = 0;				/* let the code from remote_printer_control prevail */
	end;

/* we will post-process the following control orders to allow for any special
   processing required for the laser printer */

/* We will reset pci.page_length to physical page length modulo 10 */
	if order = "reset" then do;
	     unspec (labels) = "0"b;			/* reset our page labels data */
	     last_char_was_ff = "1"b;			/* we will always start on fresh page */
	     prt_conv_on = "1"b;			/* we will always handle conversion ourselves */
	     pci.page_length = pci.phys_page_length - mod (pci.phys_page_length, 10);
	     if ad.static_overstrike_data_ptr ^= null then do;
		free ad.static_overstrike_data_ptr -> osdata;
		ad.static_overstrike_data_ptr = null;
	     end;
	end;

/* set up our internal control orders to handle prt_conv_'s label processing */
	else if order = "page_labels" then do;
	     unspec (labels) = "0"b;			/* reset our page labels data */
	     if pci.top_label_length ^= 0 then do;
		labels.delta_lines = labels.delta_lines + 2;
		labels.have_labels = "1"b;
		labels.have_top_label = "1"b;
		labels.need_initial_ff = "1"b;
	     end;
	     if pci.bot_label_length ^= 0 then do;
		labels.delta_lines = labels.delta_lines + 2;
		labels.have_labels = "1"b;
		labels.have_bottom_label = "1"b;
		labels.need_initial_ff = "1"b;
	     end;
	     if pci.page_length + labels.delta_lines > pci.phys_page_length then
		pci.page_length = pci.phys_page_length - labels.delta_lines;
	end;

control_return:
	a_code = code;

	return;
%page;

/* replacement for iox_$modes in remote_printer_ */

hblp_modes: entry (a_iocbp, a_new_modes, a_old_modes, a_code);

	if debug then call debug_display (2);
	call init_iocbp ("1"b);
	code = 0;

	call remote_printer_modes_ (iocbp, a_new_modes, a_old_modes, a_code);

/* the following is copied from prtdim_changemode.pl1.  It is put here so we
   can recompute the sheets_per_page field properly */
	if ^pci.overflow_off then do;			/* "^noskip" mode */
	     pci.sheets_per_page =
		divide (pci.page_length - 1 + pci.phys_page_length, pci.phys_page_length, 17, 0);
	end;

	if a_new_modes = "default" then do;
	     call iox_$modes (ad.terminal_iocbp, a_new_modes, "", ignore);
	end;
	else if index (a_new_modes, "non_edited") ^= 0 then do;
	     i = index (a_new_modes, "non_edited");
	     if i = 1 then
		call iox_$modes (ad.terminal_iocbp, "non_edited", "", ignore);
	     else if substr (a_new_modes, i - 1, 1) = "^" then
		call iox_$modes (ad.terminal_iocbp, "default", "", ignore);
	     else call iox_$modes (ad.terminal_iocbp, "non_edited", "", ignore);
	end;
	else if index (a_new_modes, "rawo") ^= 0 then do;
	     i = index (a_new_modes, "rawo");
	     if i = 1 then
		call iox_$modes (ad.terminal_iocbp, "rawo", "", ignore);
	     else if substr (a_new_modes, i - 1, 1) = "^" then
		call iox_$modes (ad.terminal_iocbp, "^rawo", "", ignore);
	     else call iox_$modes (ad.terminal_iocbp, "rawo", "", ignore);
	end;

	return;
%page;

/* replacement for iox_$put_chars in remote_printer_ */

hblp_put_chars: entry (a_iocbp, a_data_ptr, a_data_chars, a_code);

dcl  (col_no, line_no) fixed bin;

	if debug then call debug_display (3);
	call init_iocbp ("1"b);
	code = 0;

	if a_data_chars < 0 | a_data_chars > sys_info$max_seg_size * 4 then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	total_chars, remaining_chars = a_data_chars;	/* remaining_chars is decremented as data is sent */
	charp = a_data_ptr;				/* charp is bumped by prt_conv_ as data is sent */

	call iox_$control (ad.terminal_iocbp, "select_device", addr (printer_device), code);
	if code ^= 0 then
	     go to put_chars_ret;

/* allocate the terminal_io_record */
	terminal_io_record_element_size = 9;		/* character data */
	terminal_io_record_n_elements = 3 * ad.phys_line_length; /* enough room for 1 printing character and 2 non-printing
						   characters per column (eg: DC1-u X) */

/* get copy of terminal io record that we will send out */
	allocate terminal_io_record in (my_area) set (terminal_io_record_ptr);

	unspec (terminal_io_record) = "0"b;		/* clear everything */
	terminal_io_record.version = terminal_io_record_version_1;
	terminal_io_record.device_type = ad.device_type;
	terminal_io_record.element_size = terminal_io_record_element_size;
	terminal_io_record.n_elements = terminal_io_record_n_elements;

	if ad.record_io then
	     prt_conv_outp = terminal_io_record_ptr;	/* full record for record interface */
	else prt_conv_outp = addr (terminal_io_record.data); /* use the string portion for stream interface */

	send_raw = "0"b;
	get_printer_status = "0"b;
	osdata_ptr = ad.static_overstrike_data_ptr;
	top_line_drop_count = (pci.phys_page_length - pci.page_length - labels.delta_lines) / 2;
%page;
	do while (remaining_chars > 0 | pci.slew_residue > 0);
						/* so keep trying while there is anything to slew */
	     cur_page = pci.page_count;		/* save the page number */

/* if prt_conv_on switch is ON, use prt_conv_ to parse each line and determine
   when page breaks occur. */
	     if prt_conv_on then do;
		call prt_conv_ (charp, remaining_chars, prt_conv_outp, record_len, pcip);
		if debug then call debug_display (4);

/* see if any overstriking is required for this line */
		if (substr (output_string, record_len, 1) = CR
		     | pci.level > 0
		     | pci.slew_residue < 0)
		     | osdata_ptr ^= null then do;
		     call process_overstrike_string;
		end;
		else send_raw = "0"b;		/* no special processing on this line */
	     end;

/* if prt_conv_on switch is OFF, just pass all characters on.  We will ignore
   any form feeds because they might be binary data instead of a true form feed. */
	     else do;
		prt_conv_outp = charp;
		record_len = remaining_chars;
		remaining_chars = remaining_chars - record_len;
	     end;

/* if we are not printing, just ignore any of the output code */
	     if ad.noprint then
		go to skip_line_print;

/* if we are not running in prt_conv_on mode (raw output), just output the line */
	     if ^prt_conv_on then
		go to send_line_out;

/* skip this line if 2nd sucesssive Form Feed */
	     if output_string = FF then do;		/* have line just containing FF */
		if last_char_was_ff then		/* already ejected one page */
		     go to skip_line_print;		/* so ignore the line */
		last_char_was_ff = "1"b;		/* remember this FF */
	     end;
	     else do;				/* have data */
		last_char_was_ff = (substr (output_string, record_len, 1) = FF); /* remember if this line ends in FF */
	     end;

/* we just found a form feed.  If we are in labels mode, it is
   1) the one just following the top label if top labels are being used.
   .  We have to replace it with a new line.  If this is the first label being
   .  generated, we issue a form feed to get us to the next page then display
   .  the top label.  For all subsequent labels, we just replace the form feed
   .  with a new line since prt_conv_ will space us to the next page properly.
   2) The one just following the bottom label if top labels are not being used.
   .  In this case, we will do nothing.
   If we are not in labels mode, it follows the last line on the previous page
   so adjust the top line down so it is centered vertically on the page */

	     if last_char_was_ff then do;
		if labels.have_labels then do;
		     if labels.have_top_label then do;
			if labels.need_initial_ff then do;
			     labels.need_initial_ff = "0"b;
			     temp_line = FF;
			end;
			else temp_line = "";
			temp_line = temp_line || substr (output_string, 1, record_len - 1);
			temp_line = temp_line || NL;
			temp_line = temp_line || NL;
			record_len = length (temp_line);
			output_string = temp_line;
			if debug then call debug_display (5);
		     end;
		end;
		else do;
		     if top_line_drop_count > 0 then do;
			temp_line = output_string;
			temp_line = temp_line || copy (NL, top_line_drop_count);
			record_len = length (temp_line);
			output_string = temp_line;
		     end;
		end;
	     end;

/* see if the slew residue denotes there are multiple new lines to follow this
   one.  If not zero, add the extra new lines to this record so that only one
   call is made to iox_$put_chars instead of one for each slew residue count. */
	     if pci.slew_residue > 0 then do;
		i = terminal_io_record.n_elements - record_len; /* determine # chars left in record */
		if pci.slew_residue < i then
		     i = pci.slew_residue;
		temp_line = output_string;
		temp_line = temp_line || copy (NL, i);
		record_len = length (temp_line);
		output_string = temp_line;
		pci.slew_residue = pci.slew_residue - i;
	     end;

/* output the data line itself */
send_line_out:
	     if ad.record_io then do;
		call iox_$write_record (ad.terminal_iocbp, terminal_io_record_ptr,
		     4 * currentsize (terminal_io_record), code);
	     end;
	     else do;				/* stream output */
		if send_raw then
		     call iox_$modes (ad.terminal_iocbp, "rawo", old_modes, ignore);
		call iox_$put_chars (ad.terminal_iocbp, prt_conv_outp, record_len, code);
		if send_raw then
		     call iox_$modes (ad.terminal_iocbp, "^rawo", "", ignore);
	     end;
	     if code ^= 0 then
		go to put_chars_ret;		/* trouble */

skip_line_print:

/* compute lines and pages based on function of bytes if running in rawo mode */
	     if ^prt_conv_on then do;
		pci.line = 0;
		pci.line_count = pci.line_count + total_chars / 60;
		pci.page_count = pci.page_count + total_chars / 3600;
	     end;

	     if cur_page ^= ad.page_count then do;	/* did we turn another page? */
		ad.stop_counter = ad.stop_counter + 1;	/* bump the page stop counter */
		if ad.single_page | (ad.stop_every ^= 0 & ad.stop_counter >= ad.stop_every) then do;
		     ad.stop_counter = 0;
		     code = error_table_$request_pending;
						/* say we were not done yet */
		     go to put_chars_ret;		/* exit the loop and return to caller */
		end;
	     end;
prt_conv_loop_end:
	end;

put_chars_ret:

	if terminal_io_record_ptr ^= null then do;
	     free terminal_io_record_ptr -> terminal_io_record in (my_area);
	end;

	ad.static_overstrike_data_ptr = osdata_ptr;

	ad.chars_printed = ad.chars_printed + total_chars - remaining_chars;
						/* record our progress */

	a_code = code;
	return;
%page;
process_overstrike_string: proc;

/* this routine will do the following:

   1. If there is no current overstrike data, it will save the current string
   and let it be output as is.

   2. If there is current overstrike data, compare each character in the new
   string for matches with all other text outputted for this line.  If there
   are matches it will add a 'Begin_bold" before the characters and follow
   them with an 'End_bold' command.  It will use this new line as the output
   line.

   3. If the current line ends in a line feed, it will release the overstrike
   structure */

dcl  Begin_bold char (2) int static options (constant)	/* ESC O */
	init ("O");
dcl  End_bold char (2) int static options (constant)	/* ESC & */
	init ("&");

dcl  tmp_line char (osdata.line_size) based;
dcl  bold_on bit (1);

/* If we have no current overstrike data available, allocate a buffer for 5
   lines.  If we already have more than 5 lines of data allocate a larger
   buffer and add the new line to it */

	if osdata_ptr = null then do;
	     osdata_line_count = 5;
	     osdata_line_size = terminal_io_record.n_elements;
	     allocate osdata in (my_area);
	     osdata.line_count = 0;
	     osdata.line (*, *) = "";
	     osdata.bolding (*) = "0"b;
	end;
	else if osdata.line_count + 1 > osdata.max_line_count then do;
	     osdata_line_count = osdata.max_line_count + 5;
	     osdata_line_size = osdata.line_size;
	     allocate osdata in (my_area) set (osdata_temp_ptr);
	     osdata_temp_ptr -> osdata.line_count = osdata.line_count;
	     osdata_temp_ptr -> osdata.bolding (*) = "0"b;
	     osdata_temp_ptr -> osdata.line (*, *) = "";
	     do i = 1 to osdata.line_count;
		addr (osdata_temp_ptr -> osdata.line (i, 1)) -> tmp_line =
		     addr (osdata.line (i, 1)) -> tmp_line;
	     end;
	     free osdata;
	     osdata_ptr = osdata_temp_ptr;
	end;
	osdata.line_count = osdata.line_count + 1;
	addr (osdata.line (osdata.line_count, 1)) -> tmp_line = output_string;
	send_raw = "0"b;				/* assume no special chars in output line */

/* if this is the first line then just let that line print as is */
	if osdata.line_count = 1 then
	     return;

/* Now process the new data line.  Check each column position outputted so far
   for duplicate chars in this line and turn on the bolding bit if found */
	osdata.bolding (*) = "0"b;			/* no bolding yet */
	do col_no = 1 to record_len;
	     do line_no = 1 to osdata.line_count - 1 while (^osdata.bolding (col_no));
		if osdata.line (osdata.line_count, col_no) ^= " " then do;
		     if osdata.line (osdata.line_count, col_no) = osdata.line (line_no, col_no) then do;
			osdata.bolding (col_no) = "1"b;
		     end;
		end;
	     end;
	end;

/* Now see if any bolding bits were turned on.  If so we have to build a new
   output line putting the Begin/End_bold command sequences around each set of
   characters to be bolded; otherwise just return */
	if index (string (osdata.bolding), "1"b) = 0 then
	     go to process_overstrike_return;

	temp_line = "";
	bold_on = "0"b;
	do col_no = 1 to record_len;
	     if ^osdata.bolding (col_no) then do;
		if bold_on then do;
		     send_raw = "1"b;
		     bold_on = "0"b;
		     temp_line = temp_line || End_bold;
		end;
	     end;
	     else do;
		if ^bold_on then do;
		     send_raw = "1"b;
		     bold_on = "1"b;
		     temp_line = temp_line || Begin_bold;
		end;
	     end;
	     temp_line = temp_line || osdata.line (osdata.line_count, col_no);
	end;
	if bold_on then do;
	     send_raw = "1"b;
	     bold_on = "0"b;
	     temp_line = temp_line || End_bold;
	end;

/* replace the output line with the new one with bolding characters inserted */
	record_len = length (temp_line);
	output_string = temp_line;

/* if this line is last one of an overstrike set, get rid of the overstrike
   data structure */
process_overstrike_return:
	if substr (output_string, record_len, 1) = NL then do;
	     free osdata;
	     osdata_ptr = null;
	     if send_raw then do;
		record_len = record_len + 1;
		substr (output_string, record_len, 1) = CR;
	     end;
	end;
     end process_overstrike_string;
%page;

check_printer_status: proc;

/* this routine will make sure
   1. the printer is still talking to the user.
   2. it is still in an error free condition (has paper & toner, all covers closed)
   3. It has printed everything sent to it. (no data waiting) */

dcl  status_requests char (6) unaligned;

dcl  STX char (1) int static options (constant) init ("");
dcl  PAGE_TIMEOUT fixed bin (71) int static init (15000000);/* 15 seconds */
dcl  PROBLEM_TIMEOUT fixed bin (71) int static init (300000000); /* 5 minutes */

dcl  chars_read fixed bin (21);
dcl  input_buffer char (256);
dcl  stx_loc fixed bin;
dcl  timeout_to_use fixed bin (71);

dcl  1 status_byte_1 unaligned,
       2 pad1 bit (1),
       2 parity bit (1),
       2 test_in_progress bit (1),
       2 no_data bit (1),
       2 cover_open bit (1),
       2 auto_lf bit (1),
       2 no_paper bit (1),
       2 hmi bit (1),
       2 no_toner bit (1);

dcl  1 status_byte_3 unaligned,
       2 pad1 bit (1) unaligned,
       2 parity bit (1) unaligned,
       2 always_zero bit (5) unaligned,
       2 exit_paper_jam bit (1) unaligned,
       2 feed_paper_jam bit (1) unaligned;

	get_printer_status = "0"b;			/* be nice to caller */
	if ("1"b) then return;			/* ignore for now */
	status_requests = Request_status_byte_1 || Request_status_byte_3;
						/* make sure modes are such that we can communicate properly */
	call iox_$modes (ad.terminal_iocbp, "breakall,rawo,rawi", old_modes, ec);
	timeout_to_use = PAGE_TIMEOUT;		/* allow 15 seconds for it to respond */

request_status_again:				/* request the status */
	call iox_$put_chars (ad.terminal_iocbp, addr (status_requests), length (status_requests), ec);

/* wait for status return from the printer. */
read_status_again:
	call timed_io_$get_chars (ad.terminal_iocbp, timeout_to_use, addr (input_buffer),
	     length (input_buffer), chars_read, ec);

/* if the get_chars times out, it's because the communications stopped.
   It might be that comm is gone or the printer itself may have a problem.
   Warn someone about the problem. then wait to see if the have corrected */
	if ec ^= 0 then do;
	     if ec = error_table_$timeout then do;
		call remote_driver_$problem_notification ("The printer is not responding.");
		timeout_to_use = PROBLEM_TIMEOUT;	/* wait for 5 minutes before complaining again */
		go to read_status_again;
	     end;
	end;

/* got a response from the printer, look for the STX which starts the message */
	stx_loc = index (input_buffer, STX);
	if stx_loc = 0 then				/* not there */
	     goto read_status_again;			/* must be more to read */

/* Now that we have start of message, isolate the status byte and check it */
	unspec (status_byte_1) = unspec (substr (input_buffer, stx_loc + 1, 1));
	unspec (status_byte_3) = unspec (substr (input_buffer, stx_loc + 3, 1));

	if status_byte_1.cover_open then do;
	     call remote_driver_$problem_notification ("The printer has a cover open.");
	     go to request_status_again;
	end;

	if status_byte_1.no_paper then do;
	     call remote_driver_$problem_notification ("The printer is out of paper.");
	     go to request_status_again;
	end;

	if status_byte_3.feed_paper_jam then do;
	     call remote_driver_$problem_notification ("The printer has a feed paper jam.");
	     go to request_status_again;
	end;

	if status_byte_3.exit_paper_jam then do;
	     call remote_driver_$problem_notification ("The printer has a exit paper jam.");
	     go to request_status_again;
	end;

	if ^status_byte_1.no_data then		/* still has some data in it */
	     go to request_status_again;

/* reset modes back to the way they were when we started */
	call iox_$modes (ad.terminal_iocbp, old_modes, "", ec);

     end check_printer_status;
%page;

/* subroutines */

/* This proc handles faults that occur while masked */

handler: procedure ();

dcl  ignore fixed bin (35);				/* dummy error code */

	if mask then
	     call hcs_$reset_ips_mask (mask, mask);

	mask = ""b;

	call continue_to_signal_ (ignore);

	return;

     end handler;


init_iocbp: proc (check_for_open);

/* set up all required variables from the iocb */

dcl  check_for_open bit (1);				/* if ON,  check for iocb being open */
						/* if OFF, check for iocb being closed */

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	if adp = null then do;
	     a_code = error_table_$not_attached;
	     go to return_now;
	end;
	if ^check_for_open then do;
	     if iocbp -> iocb.open_descrip_ptr ^= null then do;
		a_code = error_table_$not_closed;
		go to return_now;
	     end;
	end;
	else do;
	     if iocbp -> iocb.open_descrip_ptr = null then do;
		a_code = error_table_$not_open;
		go to return_now;
	     end;
	end;

	pcip = addr (ad.remote_pci);
	a_code = 0;

     end init_iocbp;
%page;
dcl  debug bit (1) int static init ("0"b);
dcl  ioa_ entry () options (variable);

dbgn: entry;
	debug = "1"b;
	goto dbg_report;

dbgf: entry;
	debug = "0"b;
	goto dbg_report;

dbgs: entry;
dbg_report:
	call ioa_ ("Debug is ^[ON^;OFF^]", debug);
	return;

debug_display: proc (which_display);

dcl  which_display fixed bin;

	if which_display = 1 then
	     call ioa_ ("hblp_control - order = ^a", a_order);
	else if which_display = 2 then
	     call ioa_ ("hblp_modes - new_modes = ^a", a_new_modes);
	else if which_display = 3 then
	     call ioa_ ("hblp_put_chars - string length = ^d", a_data_chars);
	else if which_display = 4 then
	     call ioa_ ("^5d ^5d ^5d ^5d ^5d ^5d ^5d     ^[NL^]^[FF^]^[CR^]     ^a",
		pci.page_count, pci.line_count, pci.line, pci.func,
		pci.level, pci.slew_residue, record_len - 1,
		(substr (output_string, record_len, 1) = NL),
		(substr (output_string, record_len, 1) = FF),
		(substr (output_string, record_len, 1) = CR),
		substr (output_string, 1, record_len - 1));
	else if which_display = 5 then
	     call ioa_ ("print_the_line changing FF to NL & outputting FF");

     end debug_display;
%page; %include io_call_info;
%page; %include iocb;
%page; %include iod_tables_hdr;
%page; %include iodd_hblp_commands;
%page; %include iox_modes;
%page; %include mode_string_info;
%page; %include prt_conv_info;
%page; %include prt_info;
%page; %include prt_order_info;
%page; %include q_group_tab;
%page; %include remote_attach_data;
%page; %include terminal_io_record;

     end iodd_hblp_support_;
