/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

convert_string_: proc;

/* Created by wholesale modification of tty_read 1/78 by D. Vinograd */
/* Modified by D. Vinograd, 11/78, to avoid calling canonicalize_ unless really necessary. */


/****^  HISTORY COMMENTS:
  1) change(88-01-26,Brunelle), approve(88-01-26,MCR7813),
     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
     Upgraded to handle special char sequences of 15 instead of 3 chars
     (c_chars).
                                                   END HISTORY COMMENTS */


/* PARAMETERS */

dcl  input_string char (*) var;
dcl  output_string char (*) var;
dcl  specp ptr;
dcl  seqp ptr;
dcl  mvtp ptr;
dcl  tctp ptr;
dcl  code fixed bin (35);

/* AUTOMATIC */

dcl  kill_char char (1);
dcl  erase_char char (1);
dcl  entry fixed bin;
dcl  escape_index fixed bin;
dcl  buffer_1 char (720) aligned;
dcl  buffer_2 char (720) aligned;
dcl  digit fixed bin;
dcl  break_found bit (1);
dcl  chars_moved bit (1);
dcl  source_ptr ptr;
dcl  target_ptr ptr;
dcl  old_sourcep ptr;
dcl  old_targetp ptr;
dcl  source_len fixed bin;
dcl  ret_len fixed bin;
dcl  target_len fixed bin;
dcl  xr fixed bin;					/* used for result of index builtin */
dcl  bx fixed bin;					/* used in verify of white space */
dcl  i fixed bin;					/* temporary work variable */
dcl  next_char char (1) aligned;

dcl 1 seq based (seqp) aligned like c_chars;		/* template of special chars sequence */

dcl 1 octal aligned,
    2 pad bit (27) unal,
    2 result fixed bin (8) unal;			/* so arithmetic value can be easily addressed as char */

dcl 1 util aligned,					/* structure passed to convert_string_util_$tct */
						/* first 3 items in this structure are */
						/* also used as general automatic variables */
    2 stringp ptr,
    2 stringl fixed bin,
    2 ctally fixed bin,
    2 tablep ptr,
    2 indicator fixed bin,
    2 pad (3) fixed bin;				/* workspace for convert_string_util_ */

/* INTERNAL STATIC CONSTANTS */

dcl  backspace char (1) int static init ("") options (constant); /* backspace */
dcl  space char (1) static init (" ");
dcl  tab char (1) static init ("	");
dcl  cr char (1) static init ("");
dcl  input fixed bin static init (1);
dcl  output fixed bin static init (2);

/* various strange-looking character strings */

dcl  right_motion char (2) aligned int static options (constant) init
    ("	 ");					/* HT, SP */


dcl  nl char (1) aligned int static options (constant) init
    ("
");						/* NL */

dcl  bs char (1) aligned int static options (constant) init (""); /* BS */



dcl  based_onechar char (1) based;

/* ENTRIES */

dcl  convert_string_util_$find_char entry (ptr);
dcl  canonicalize_ entry (ptr, fixed bin, ptr, fixed bin, fixed bin (35));
dcl  convert_string_util_$tct entry (ptr);
dcl  convert_string_util_$mvt entry (ptr);

/* EXTERNAL STATIC */

dcl  error_table_$improper_data_format ext static fixed bin (35);


/* BASED */

dcl  based_chars (0:10) char (1) unal based;
dcl  based_one_char char (1) unal based;
dcl  based_string char (util.stringl) based (util.stringp);
dcl  based_ret char (source_len) based (source_ptr);
dcl  based_source char (source_len) based (old_sourcep);
dcl  based_target char (target_len) based (old_targetp);
dcl  table (0: 127) fixed bin (8) unaligned based;

dcl  based_fb8 fixed bin (8) unal based;

dcl 1 mvt_args aligned based (addr (util)),		/* overlay of util structure for convert_string_util_$mvt */
    2 stringp ptr,
    2 stringl fixed bin,
    2 pad fixed bin,
    2 tablep ptr,
    2 targetp ptr;


/* BUILTINS */

dcl (addr, index, null, substr, verify, length, reverse) builtin;

%include remote_ttt_info;
%include prt_info;
%include prt_conv_info;
%include tty_convert;

input:	entry (input_string, rttp, output_string, code);

	entry = input;
	mvtp = remote_ttt_info.input_mvtp;
	tctp = remote_ttt_info.input_tctp;
	goto common;

output:	entry (input_string, rttp, output_string, code);

	entry = output;
	mvtp = remote_ttt_info.output_mvtp;
	tctp = remote_ttt_info.output_tctp;
common:
	specp = remote_ttt_info.specp;
	erase_char = remote_ttt_info.erase_char;
	kill_char = remote_ttt_info.kill_char;
	buffer_1 = input_string;
	buffer_2 = "";
	source_ptr = addr (buffer_1);
	target_ptr = addr (buffer_2);
	source_len = length (input_string);		/* the number of chars in buffer_1 now */
	util.stringp = source_ptr;

	if entry = output then do;
	     if remote_ttt_info.escape_output then
		call escape_output;
	     if remote_ttt_info.translate_output then
		call translate;
	end;
	else do;
	     if remote_ttt_info.translate_input then
		call translate;
	     if remote_ttt_info.escape_input then
		call escape_input;
	     if remote_ttt_info.erase_input then
		call erase;
	     if remote_ttt_info.canonicalize_input &
	     index (based_ret, cr || tab || backspace) ^= 0 then
		call canonicalize_ (source_ptr, source_len, source_ptr, source_len, code);
	end;

	ret_len = source_len;
	output_string = based_ret;
finish:
	return;
table_error:
	code = error_table_$improper_data_format;
	goto finish;

translate: proc;
	     if mvtp ^= null
	     then do;
		mvt_args.stringp = source_ptr;
		mvt_args.stringl = source_len;
		mvt_args.tablep = mvtp;
		mvt_args.targetp = target_ptr;

		call convert_string_util_$mvt (addr (util)); /* this does the translation */

		source_ptr = mvt_args.targetp;
		target_ptr = mvt_args.stringp;
		target_len = source_len;
	     end;
	end translate;

erase:	proc;
						/* ** ERASE/KILL PROCESSING ** */
	     old_sourcep = source_ptr;
	     old_targetp = target_ptr;
	     if entry = output then do;
		util.ctally = 0;
		target_len = 0;
		util.stringl = source_len ;
		util.stringp = source_ptr;
	     end;
	     else do;
		util.stringl = source_len;
		util.stringp = source_ptr;
	     end;
						/* kill first */
	     xr = 0;
	     do while (xr < util.stringl);
						/* search from the right, only last kill is interesting */
		xr = util.stringl - index (reverse (based_string), kill_char);
		if xr < util.stringl		/* found one */
		then do;
		     xr = xr + 1;			/* makes xr actual index of kill */
		     if ^escaped ()			/* it's a real kill */
		     then do;
			source_ptr,
			     util.stringp = addr (util.stringp -> based_chars (xr)); /* point to char after kill */
			source_len = source_len - xr;
			xr = util.stringl;		/* so as not to index again */
		     end;
		     else do;			/* it was escaped, we must scan rest of string */
			util.stringl = xr - 2;
			xr = 0;
		     end;
		end;
	     end;					/* finished with kills */
						/* now erase */
	     util.stringl = source_len;
	     target_len = 0;
	     xr = 1;
	     do while (xr ^= 0 & util.stringl > 0);
		xr = index (based_string, erase_char);	/* look for first erase */
		if xr = 1				/* first char */
		then do;
		     if target_len ^= 0		/* if not first char in whole string */
		     then do;			/* we have to erase some already copied chars */
			bx = verify (reverse (based_target), right_motion); /* skip white space */
			if bx = 0			/* all white */
			then do;
			     target_ptr = old_targetp; /* wipe it all out */
			     target_len = 0;
			end;
			else do;
			     if bx ^= 1		/* there's some white space */
			     then util.ctally = bx - 1; /* we'll erase it all */
						/* no white, check for overstrikes */
			     else do util.ctally = 1 to target_len - 2 by 2
				     while (substr (based_target, target_len-util.ctally, 1) = bs);
			     end;
			     target_len = target_len - util.ctally;
			     target_ptr = addr (old_targetp -> based_chars (target_len));
			end;
		     end;
		     if target_len <= 0		/* we erased whole target string */
		     then source_len = util.stringl - 1;
		end;
						/* not first char, see if it's escaped */
		else
		if xr ^= 0
		then do;
		     if escaped ()
		     then util.ctally = xr;		/* copy everything */
		     else do;
			bx = verify (reverse (substr (based_string, 1, xr-1)), right_motion);
			if bx = 0			/* all white */
			then util.ctally = 0;	/* copy nothing */
			else if bx ^= 1		/* some white */
			then util.ctally = xr - bx;	/* which will not be copied */
			else do util.ctally = xr - 2 to 2 by -2
				while (substr (based_string, util.ctally, 1) = bs);
			end;
		     end;
		     if util.ctally > 0
		     then call copy_chars;
		     else source_len = source_len - xr;
		end;
		if xr > 0				/* if we're going around again */
		then do;
		     source_ptr,
			util.stringp = addr (util.stringp -> based_chars (xr)); /* point past erase */
		     util.stringl = util.stringl - xr;
		end;
	     end;					/* end of erase search */
	     if target_len > 0			/* if we moved any */
	     then do;
		if util.stringl > 0			/* if there are any more */
		then do;
		     util.ctally = util.stringl;
		     call copy_chars;
		end;
		source_len = target_len ;
		source_ptr = old_targetp;
		target_ptr = old_sourcep;		/* switch buffers */
	     end;
	end erase;

escape_output: proc;
	     if tctp ^= null			/* must have output conversion table */
	     & specp ^= null			/* and special chars table too */
	     then do;
		old_targetp = target_ptr;
		old_sourcep = source_ptr;
		chars_moved = "0"b;
		util.tablep = tctp;
		target_len = 0;			/* initially */
		util.ctally = 0;
		util.stringp = source_ptr;
		util.stringl = source_len ;
		do while (util.stringl > 0);		/* main formatting loop */
		     call convert_string_util_$find_char (addr (util)); /* find next interesting character */
		     if util.indicator = 0 & util.stringl = 0 & ^chars_moved then; /* nothing found */
		     else do;
			chars_moved = "1"b;		/* we'll have to do some moving */
			if util.ctally > 0		/* we have some uninteresting ones to pick up */
			then
			     call copy_chars;	/* do it */
						/* now examine indicator */
			if util.indicator = 0	/* no interesting characters */
			then;			/* otherwise go around again */
			else if util.indicator = 3	/* tab or multiple blank */
			then do;
			     util.ctally = 1;
			     do while (util.stringl > 0
				     & (util.stringp -> based_onechar = space | util.stringp -> based_onechar = tab));
				call copy_chars;
				util.stringl = util.stringl - 1;
				util.stringp = addr (util.stringp -> based_chars (1));
			     end;
			end;
			else if util.indicator > 16 then do; /* special escape sequence */
			     escape_index = util.indicator - 16;
			     if escape_index > specp -> special_chars.escape_length /* not a good index */
			     then goto table_error;
			     if remote_ttt_info.edited then
				seqp = addr (specp -> special_chars.edited_escapes (escape_index));
			     else seqp = addr (specp -> special_chars.not_edited_escapes (escape_index));
			     call insert_sequence ;

			end;
			else goto table_error;
			if util.stringl > 0		/* if we're going around again */
			then source_ptr = util.stringp; /* update source pointer */
		     end;
		end;
		if target_len ^= 0
		then do;
		     source_ptr = old_targetp;
		     source_len = target_len ;
		     target_ptr = old_sourcep;
		end;
	     end;
	     return;
	end escape_output;

escape_input: proc;
						/* ** ESCAPE AND BREAK PROCESSING ** */
	     if tctp ^= null			/* can't do this without input conversion table */
	     then do;
		old_targetp = target_ptr;
		target_len = 0;
		break_found = "0"b;
		util.stringp = source_ptr;
		util.stringl = source_len;
		util.tablep = tctp;
		do while (util.stringl > 0);
		     call convert_string_util_$tct (addr (util)); /* scan string */
		     if util.indicator = 0 & util.stringl = 0 & target_len = 0 /* never no nothing */
		     then;
		     else do;			/* there's work to do */
			if util.ctally > 0		/* copy uninteresting characters */
			then do;
			     old_sourcep = source_ptr;
			     call copy_chars;
			end;
			if util.indicator = 0
			then;
			else
			if util.indicator = 1	/* break char */
			then do;
			     break_found = "1"b;	/* it can't be escaped or we'd have found the escape */
			     if util.ctally > 0	/* scan back for preceding white space */
			     then do;
				bx = verify (reverse (substr (based_source, 1, util.ctally)), right_motion) - 1;
				if bx < 0		/* all white */
				then bx = util.ctally;
				if bx > 0		/* any white */
				then do;
				     target_len = target_len - bx;
				     target_ptr = addr (old_targetp -> based_chars (target_len));
				end;
			     end;
						/* target_ptr shows where to put nl now in any case */
			     go to insert_and_update;
			end;
			else
			if util.indicator = 2	/* escape char */
			then do;
			     if util.stringl <= 1	/* there's nothing after it */
			     then go to insert_and_update;
			     if util.ctally > 0	/* check for overstruck escape */
			     then do;
				i = -1;		/* necessary to make compiler accept next statement */
				if util.stringp -> based_chars (i) = bs
				then go to insert_and_update;
			     end;
			     next_char = util.stringp -> based_chars (1);
			     if next_char = bs
			     then go to insert_and_update;
			     if util.stringl > 2	/* check for following character overstruck */
			     then if util.stringp -> based_chars (2) = bs
				then go to insert_and_update;
			     if tctp -> table (addr (next_char) -> based_fb8) = 2 | /* next char is escape */
			     next_char = erase_char |
			     next_char = kill_char
			     then do;
				util.stringp = addr (util.stringp -> based_chars (1)); /* skip over escape */
				util.stringl = util.stringl - 1;
				go to insert_and_update; /* put in following char as is */
			     end;
						/* check for octal escape */
			     digit = char_value (next_char);
			     if digit >= 0
			     then do;		/* we have octal digit(s) */
				octal.result = 0;
				util.stringp = addr (util.stringp -> based_chars (1)); /* look at next */
				do i = 1 to 3 while (digit >= 0);
				     octal.result = 8*octal.result + digit;
				     if util.stringl > i & i < 3
				     then do;
					digit = char_value ((util.stringp -> based_chars (i)));
					if digit >= 0 /* next char is digit, see if it's overstruck */
					then if util.stringl > i + 1
					     then if util.stringp -> based_chars (i+1) = bs
						then digit = -1;
				     end;
				     else digit = -1; /* no more chars, or we already have 3 */
				end;
				call insert_char ((addr (octal.result) -> based_one_char));
				util.stringp = addr (util.stringp -> based_chars (i-1)); /* skip over octal digits */
				util.stringl = util.stringl - i;
			     end;
						/* check for escaped nl with white space */
			     else
			     if verify (substr (based_string, 2, util.stringl-2), right_motion) = 0
			     & substr (based_string, util.stringl, 1) = nl
			     then do;
				if util.stringl = source_len /* first thing in the string? */
				then source_len = 0; /* then nothing */
				util.stringl = 0;	/* we've reached end */
			     end;
			     else do;		/* look up next_char in input escape table */
				if specp = null	/* no table means no escapes */
				| specp -> special_chars.input_escapes.len = 0
				then go to insert_and_update;
				xr = index (specp -> special_chars.input_escapes.str, next_char);
				if xr ^= 0	/* it's there */
				then do;
				     call insert_char ((substr (specp -> special_chars.input_results.str,
					xr, 1)));
				     util.stringp = addr (util.stringp -> based_chars (2)); /* move ptr */
				     util.stringl = util.stringl - 2;
				end;
				else go to insert_and_update;
			     end;
			end;			/* of escape character */
			else
			if util.indicator = 3	/* throw away */
			then call skip (1);
			else
			if util.indicator = 4	/* form feed */
			then do;
insert_and_update:
			     call insert_char ((util.stringp -> based_one_char));
			     util.stringp = addr (util.stringp -> based_chars (1));
			     util.stringl = util.stringl - 1;
			end;
			else
			if util.indicator = 5	/* hardware control sequence */
			then ;
			else goto table_error;	/* what else could it be? */
			source_ptr = util.stringp;
		     end;
		end;				/* of tct loop */
		if target_len ^= 0
		then do;
		     source_ptr = old_targetp;
		     source_len = target_len;
		end;
	     end;
	end escape_input;

/* ** INTERNAL PROCEDURES ** */
copy_chars: proc;

/* this procedure copies util.ctally characters from source_ptr to target_ptr. It updates both pointers */
/* and increments target_len by util.ctally */

dcl  tally_chars char (util.ctally) based;

	     target_ptr -> tally_chars = source_ptr -> tally_chars;

	     source_ptr = addr (source_ptr -> based_chars (util.ctally));
	     target_ptr = addr (target_ptr -> based_chars (util.ctally));
	     target_len = target_len + util.ctally;

	     return;

	end copy_chars;

insert_char: proc (i_char);

/* this procedure inserts one character at target_ptr, and increments target_ptr and target_len by one character */

dcl  i_char char (1) ;

	     target_ptr -> based_one_char = i_char;
	     target_ptr = addr (target_ptr -> based_chars (1));
	     target_len = target_len + 1;
	     return;

	end insert_char;

skip:	proc (to_skip);

/* this procedure discards a specified number of characters from util.stringp */

dcl  to_skip fixed bin;

	     util.stringp = addr (util.stringp -> based_chars (to_skip)); /* skip over character */
	     if source_len = util.stringl		/* if it's first character in the string */
	     then source_len = source_len - to_skip;	/* then make sure it doesn't get picked up */
	     util.stringl = util.stringl - to_skip;
	end skip;

escaped:	proc returns (bit (1) aligned);

/* this procedure returns "1"b if the character at index xr in the string based on util.stringp */
/* is preceded by a non-overstruck escape character; otherwise it returns "0"b */

	     if xr <= 1				/* no preceding character */
	     then return ("0"b);

	     if tctp = null				/* no conversion table so no escapes */
	     then return ("0"b);

	     if tctp -> table (addr (substr (based_string, xr-1, 1)) -> based_fb8) ^= 2 /* not preceded by an escape */
	     then return ("0"b);

	     if xr = 2				/* escape can't be overstruck, it's first char */
	     then return ("1"b);

	     if substr (based_string, xr-2, 1) = bs	/* escape is overstruck */
	     then return ("0"b);

	     else return ("1"b);

	end escaped;

char_value: proc (a_char) returns (fixed bin);

/* this procedure returns the numeric equivalent of an ASCII character if the character is 0 to 7; */
/* otherwise it returns -1 */

dcl  a_char char (1) aligned;
dcl  numeric fixed bin;

	     numeric = addr (a_char) -> based_fb8;
	     if numeric >= 48			/* i.e., "0" */
	     & numeric <= 55			/* i.e., "7" */
	     then return (numeric - 48);

	     else return (-1);

	end char_value;
insert_sequence: proc ;

/* This procedure inserts the character sequence pointed to by seqp */

dcl  i fixed bin;

	     if seq.count = 0
	     then return;				/* no sequence */

	     if seq.count < 0 | seq.count > hbound (seq.chars, 1)	/* probably not a real sequence */
	     then go to table_error;

	     target_len = target_len + seq.count;

	     do i = 1 to seq.count;
		target_ptr -> based_onechar = seqp -> seq.chars (i);
		target_ptr = addr (target_ptr -> based_chars (1)); /* bump pointer */
	     end;

	     return;

	end insert_sequence ;
     end convert_string_;
