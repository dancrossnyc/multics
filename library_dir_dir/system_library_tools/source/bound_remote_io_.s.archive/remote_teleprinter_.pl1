/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */

/* format: off */

/* remote_teleprinter_: An I/O module for communicating with the operator console function of a remote device. */

/* Created:  March 1977 by David Vinograd */
/* Modified: May 1978 by David Vinograd for user TTFs */
/* Modified: November 1978 by J. C. Whitmore to make the attach options consistent among all remote_xxx_ dims */
/* Modified: March 1979 by J. C. Whitmore to initialize so get_line function returns a NL char and cleanup returned modes */
/* Modified: March 1980 by J. C. Whitmore to use the terminal_io_record interface to the terminal IO module */
/* Modified: 13 December 1981 by G. Palter to not use illegal PL/I and provide sufficient extra space for prt_conv_ to
      output control sequences */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Corrected pl1 warning about terminal_io_record_data_chars_varying_max_len
     being referenced, but never set.
                                                   END HISTORY COMMENTS */


/* format: on */


remote_teleprinter_:
     procedure ();


/* Parameters */

dcl  a_iocbp ptr parameter;
dcl  a_option (*) char (*) var parameter;		/* Options for attach */
dcl  a_sw bit (1) parameter;				/* com_err_ switch for attach */
dcl  a_code fixed bin (35) parameter;
dcl  a_mode fixed bin parameter;			/* The open mode */
dcl  a_buf_ptr ptr parameter;
dcl  a_data_ptr ptr parameter;
dcl  a_buf_chars fixed bin (21) parameter;
dcl  a_data_chars fixed bin (21) parameter;
dcl  a_pos_type fixed bin parameter;
dcl  a_pos_value fixed bin (21) parameter;
dcl  a_order char (*) parameter;
dcl  a_infop ptr parameter;
dcl  a_old_modes char (*) parameter;
dcl  a_new_modes char (*) parameter;


/* Automatic */

dcl  (prt_modes, card_modes) char (160);
dcl  last_char char (1);
dcl  last_pos fixed bin;

dcl  com_err_sw bit (1);				/* Set if com_err_ sould be called on attach error */
dcl  charp ptr;
dcl  device_opt char (32) var;
dcl  ignore fixed bin (35);
dcl  (code, ec, prt_code, card_code) fixed bin (35);
dcl  iocbp ptr;
dcl  arg char (32);
dcl  argp ptr;
dcl  mask bit (36) aligned;				/* For setting ips mask */
dcl  i fixed bin (21);
dcl  idx fixed bin;
dcl  open_mode fixed bin;
dcl  remaining_chars fixed bin (21);
dcl  data_chars fixed bin (21);
dcl  order char (32);
dcl  prt_conv_outp ptr;				/* pointer to output workspace for prt_conv_ */
dcl  record_len fixed bin;
dcl  infop ptr;
dcl  temp_iocbp ptr;
dcl  runout_spacing_cnt fixed bin;
dcl  terminal_switch_name char (32) var;
dcl  my_options char (256) var;
dcl  terminal_attach_options char (256) var;
dcl  terminal_attach_desc char (256) var;
dcl  nl_string char (32);				/* temp string of nl chars */


/* Based */

dcl  char_string char (1024) based;
dcl  info_fixed fixed bin based;
dcl  my_area area based (get_system_free_area_ ());


/* Internal Static */

dcl  put_chars_since_last_runout bit (1) static init ("1"b);
dcl  attach_count fixed bin int static init (0);
dcl  static_comerr_sw bit (1) int static init ("0"b);


/* Constants */

dcl  remote_device_name char (19) int static options (constant) init ("remote_teleprinter_");
dcl  teleprinter char (32) int static init ("teleprinter") options (constant);
dcl  space char (1) static init (" ") int options (constant);
dcl  Card_Util_Char_Max fixed bin int static init (2000) options (constant);
dcl  NL char (1) static init ("
") int static options (constant);


/* External stuff */

dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  card_util_$modes entry (char (*), bit (36) aligned, char (*), fixed bin (35));
dcl  card_util_$translate entry (bit (36) aligned, char (*) var);
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  prt_conv_ entry (ptr, fixed bin (21), ptr, fixed bin, ptr);
dcl  remote_printer_modes_ entry (ptr, char (*), char (*), fixed bin (35));
dcl  remote_printer_control_ entry (ptr, char (*), ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$propagate entry (ptr);
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$get_chars entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$err_no_operation entry;

dcl  sys_info$max_seg_size fixed bin ext;

dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$eof_record ext fixed bin (35);
dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$not_closed ext fixed bin (35);
dcl  error_table_$data_loss ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$unimplemented_version ext fixed bin (35);


/* Conditions and Builtins */

dcl  (conversion, any_other, cleanup) condition;

dcl  (addr, bin, hbound, length, min, max, copy, null, substr, ltrim, rtrim, convert, unspec, index, char, currentsize,
     size) builtin;

/**/

remote_teleprinter_attach:
     entry (a_iocbp, a_option, a_sw, a_code);

	iocbp = a_iocbp;
	com_err_sw = a_sw | static_comerr_sw;		/* report errors if either is on */
	code, a_code = 0;

	adp = null;
	if iocbp -> iocb.attach_descrip_ptr ^= null
	then do;
	     code = error_table_$not_detached;
	     call abort_attach (code, "Switch name: ^a", iocbp -> iocb.name);
	end;

	if hbound (a_option, 1) < 1
	then do;					/* Must be at least one */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach (code, "Bad attach description.", "");
	end;

	on cleanup call clean_up;			/* if we abort, be sure to clean up */

	allocate ad in (my_area) set (adp);		/* create the attach data structure for this attachment */

/* Initialize the Attach Data Structure variables */

	ad.bits = "0"b;
	ad.fixed = 0;
	ad.ptrs = null;
	ad.chars = "";
	unspec (ad.remote_pci) = "0"b;
	ad.device_type = TELEPRINTER_DEVICE;		/* for the terminal_io_record structure */
	ad.sheets_per_page = 1;
	ad.phys_line_length = 80;
	ad.phys_page_length = 66;
	ad.lpi = 6;
	ad.line = 1;
	ad.cv_proc = null;				/* co-routine is undefined until switch is opened */

	call card_util_$modes ("lower_case,trim,add_nl.", ad.input_modes, "", code);
	if code ^= 0
	then call abort_attach (code, "Unable to set initial modes.", "");

/* Process options */

	my_options = "";
	terminal_attach_options = "";
	terminal_attach_desc = "";
	device_opt = "teleprinter";			/* this is our default */

	do idx = 1 to hbound (a_option, 1);
	     if a_option (idx) = "-physical_line_length" | a_option (idx) = "-pll"
	     then do;
		ad.phys_line_length = cv_dec_arg (idx);
		terminal_attach_options = terminal_attach_options || " -pll " || a_option (idx);
	     end;
	     else if a_option (idx) = "-physical_page_length" | a_option (idx) = "-ppl"
	     then do;
		ad.phys_page_length = cv_dec_arg (idx);
		my_options = my_options || " -ppl " || a_option (idx);
	     end;
	     else if a_option (idx) = "-device"
	     then device_opt = get_arg (idx);		/* we specify this */
	     else if a_option (idx) = "-horizontal_tab" | a_option (idx) = "-htab"
	     then do;
		ad.ht = "1"b;
		terminal_attach_options = terminal_attach_options || " -htab";
	     end;
	     else if a_option (idx) = "-runout_spacing" | a_option (idx) = "-runsp"
	     then do;
		ad.runout_spacing = max (0, min (cv_dec_arg (idx), 32));
						/* set the value within the range */
		my_options = my_options || " -runsp " || a_option (idx);
	     end;
	     else if a_option (idx) = "-terminal"
	     then do;
		ad.terminal = get_arg (idx);
		my_options = my_options || " -terminal " || ad.terminal;
	     end;
	     else terminal_attach_options = terminal_attach_options || space || a_option (idx);
	end;

/* Check out the options we were given */

	if ad.terminal = ""
	then do;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "No terminal IO module specified.", "");
	end;

	if ad.phys_line_length < 1 | ad.phys_line_length > 256
	then do;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid line length specified.", "");
	end;

	if ad.phys_page_length < 10 | ad.phys_page_length > 128
	then do;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid page length specified.", "");
	end;

	if device_opt ^= "teleprinter"
	then do;					/* was it changed? */
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid -device option: ^a", (device_opt));
	end;

/* Attach through terminal dim */

	attach_count = attach_count + 1;		/* new attach name tag number each time */
	if attach_count > 999
	then attach_count = 1;
	terminal_switch_name = remote_device_name || ltrim (char (attach_count));
						/* make the  switch name */

	terminal_attach_options = ltrim (terminal_attach_options) || " -device " || device_opt;
	terminal_attach_desc = ad.terminal || space || terminal_attach_options;
	ad.attach_desc = remote_device_name || my_options || space || terminal_attach_options;

	call iox_$attach_ioname ((terminal_switch_name), temp_iocbp, (terminal_attach_desc), code);
	if code ^= 0
	then call abort_attach (code, "Unable to attach to terminal ", "");

	ad.terminal_iocbp = temp_iocbp;

/* Now mask and complete the iocb */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_desc);
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = remote_teleprinter_open;
	iocbp -> iocb.detach_iocb = remote_teleprinter_detach;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	call remote_printer_control_ (iocbp, "reset", null, code);
	if code ^= 0
	then call abort_attach (code, "Unable to reset printer data", "");

	call remote_printer_modes_ (iocbp, "noskip.", "", code);
	if code ^= 0
	then call abort_attach (code, "Unable to set default modes", "");

attach_return:
	return;

/**/

remote_teleprinter_detach:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null
	then do;
	     code = error_table_$not_closed;
	     return;
	end;

	call clean_up;				/* detach terminal, free attach data, clear the iocb */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

/**/

remote_teleprinter_open:
     entry (a_iocbp, a_mode, a_sw, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null
	then do;
	     code = error_table_$not_closed;
	     return;
	end;

	open_mode = a_mode;
	if open_mode ^= Stream_input_output
	then do;
	     a_code = error_table_$bad_mode;
	     return;
	end;

	call iox_$open (ad.terminal_iocbp, Sequential_input_output, "0"b, a_code);
	if a_code = 0
	then do;
	     ad.record_io = "1"b;			/* we have record interface approval */
	     call hcs_$make_ptr (null, "remote_conv_", "teleprinter", ad.cv_proc, a_code);
	     if a_code ^= 0
	     then return;
	end;
	else do;
	     ad.record_io = "0"b;			/* try for stream interface */
	     call iox_$open (ad.terminal_iocbp, Stream_input_output, "0"b, a_code);
	     if a_code ^= 0
	     then return;
	     call hcs_$make_ptr (null, ad.terminal || "conv_", "teleprinter", ad.cv_proc, a_code);
	     if a_code ^= 0
	     then return;
	end;

	ad.open_description = rtrim (iox_modes (open_mode));
	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.get_chars = remote_teleprinter_get_chars;
	iocbp -> iocb.get_line = remote_teleprinter_get_chars;
	iocbp -> iocb.put_chars = remote_teleprinter_put_chars;
	iocbp -> iocb.control = remote_teleprinter_control;
	iocbp -> iocb.modes = remote_teleprinter_modes;
	iocbp -> iocb.position = remote_teleprinter_position;
	iocbp -> iocb.close = remote_teleprinter_close;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

/**/

remote_teleprinter_close:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	call iox_$close (ad.terminal_iocbp, a_code);
	if a_code = error_table_$not_open | a_code = error_table_$not_attached
	then a_code = 0;				/* make it easy to re-synch the attachments */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = remote_teleprinter_open;
	iocbp -> iocb.detach_iocb = remote_teleprinter_detach;
	iocbp -> iocb.control = iox_$err_no_operation;
	iocbp -> iocb.position = iox_$err_no_operation;
	iocbp -> iocb.modes = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

/**/

remote_teleprinter_put_chars:
     entry (a_iocbp, a_data_ptr, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	if a_data_chars < 0 | a_data_chars > sys_info$max_seg_size * 4
	then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	terminal_io_record_ptr = null ();		/* for the cleanup handler */

	call iox_$control (ad.terminal_iocbp, "select_device", addr (teleprinter), code);
						/* HACK FOR THE ibm2780_ TERMINAL */
	if code ^= 0
	then goto put_chars_ret;

	put_chars_since_last_runout = "1"b;
	pcip = addr (ad.remote_pci);			/* get ptr to pci structure */
	remaining_chars = a_data_chars;		/* This is decremented as data is sent */
	charp = a_data_ptr;

	terminal_io_record_element_size = 9;		/* always character data */
	terminal_io_record_n_elements = 3 * ad.phys_line_length;
						/* enough room for 1 printing character and 2 non-printing
						   characters per column (eg: DC1-u X) */

	on cleanup
	     begin;
		if terminal_io_record_ptr ^= null ()
		then free terminal_io_record_ptr -> terminal_io_record in (my_area);
	     end;

	call alloc_tio_rec;				/* allocate and initialize the terminal_io_record */

	if ad.record_io
	then prt_conv_outp = terminal_io_record_ptr;	/* full record for record interface */
	else prt_conv_outp = addr (terminal_io_record.data);
						/* use the string for stream interface */

	do while (remaining_chars > 0 | pci.slew_residue > 0);
						/* runout chars and trailing NLs */
	     pci.line = 1;				/* fool prt_conv_ and say this is always line one */
						/* we are assuming noskip mode and want to suppress */
						/* the FF used to align each physical page */

	     call prt_conv_ (charp, remaining_chars, prt_conv_outp, record_len, pcip);

	     if ad.record_io
	     then do;
		call iox_$write_record (ad.terminal_iocbp, terminal_io_record_ptr,
		     4 * currentsize (terminal_io_record), code);
	     end;
	     else do;				/* stream output */
		call iox_$put_chars (ad.terminal_iocbp, prt_conv_outp, record_len, code);
	     end;

	     if code ^= 0
	     then goto put_chars_ret;
	end;

	call iox_$control (ad.terminal_iocbp, "runout", null, code);
						/* make the terminal IO Module ship the message */

put_chars_ret:
	if terminal_io_record_ptr ^= null ()
	then free terminal_io_record_ptr -> terminal_io_record in (my_area);

	a_code = code;

	return;

/**/

/* Get_chars  and  Get_line entry points */

remote_teleprinter_get_chars:
     entry (a_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	a_data_chars = 0;				/* clear the return values */
	code, a_code = 0;

	terminal_io_record_ptr = null;		/* for the cleanup handler */
	terminal_io_record_element_size = 9;		/* always character data */
	terminal_io_record_n_elements = a_buf_chars;	/* allow for max buffer size */

	on cleanup
	     begin;
		if terminal_io_record_ptr ^= null
		then free terminal_io_record_ptr -> terminal_io_record in (my_area);
	     end;

	call alloc_tio_rec;				/* allocate and initialize terminal_io_record */

	if ad.record_io
	then do;
	     call iox_$read_record (ad.terminal_iocbp, terminal_io_record_ptr, 4 * size (terminal_io_record),
		record_len, code);
	     if code = error_table_$eof_record
	     then code = 0;
	     if code ^= 0
	     then go to get_chars_ret;
	     if terminal_io_record.version ^= terminal_io_record_version_1
	     then do;
		code = error_table_$unimplemented_version;
		go to get_chars_ret;
	     end;

/*	assume that the data string doesn't have any slew specified (ignore any that was sent) */

	end;
	else do;
	     call iox_$get_chars (ad.terminal_iocbp, addr (terminal_io_record.data), (a_buf_chars), record_len, code);
	     if code = error_table_$eof_record
	     then code = 0;
	     if code ^= 0
	     then go to get_chars_ret;
	     terminal_io_record.n_elements = record_len;	/* make a legal varying string */
	end;

/*	at this point, we must have a record of the form:  <text chars><slew chars> */
/*	where the slew chars are missing - hopefully - for the teleprinter */

/*	use card_util_ to do escape processing and adding NL if desired */

	terminal_io_record_data_chars_varying_max_len = Card_Util_Char_Max;
	call card_util_$translate (ad.input_modes, terminal_io_record_data_chars_varying);
						/* can only shorten the string */


	data_chars = terminal_io_record.n_elements;	/* get the updated count */
	if data_chars > a_buf_chars
	then code = error_table_$data_loss;		/* tell caller we truncated the record */

	a_data_chars = min (a_buf_chars, data_chars);
	substr (a_buf_ptr -> char_string, 1, a_data_chars) = substr (terminal_io_record_data_chars, 1, a_data_chars);

get_chars_ret:
	free terminal_io_record_ptr -> terminal_io_record in (my_area);
	revert cleanup;

	a_code = code;

	return;

/**/

remote_teleprinter_control:
     entry (a_iocbp, a_order, a_infop, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	infop = a_infop;
	order = a_order;
	code, ec, a_code = 0;

	if order = "runout_spacing"
	then do;
	     if infop = null
	     then do;
		code = error_table_$bad_arg;
		go to control_ret;
	     end;
	     ad.runout_spacing = max (0, min (infop -> info_fixed, 32));
	end;
	else if order = "end_write_mode"
	then go to do_control;			/* CHECK THIS OUT */
	else if order = "runout"
	then do;
	     if ^put_chars_since_last_runout
	     then return;				/* ignore multiple runouts per switch */
	     put_chars_since_last_runout = "0"b;
	     if ad.runout_spacing = 0
	     then go to do_control;			/* for another common case */
	     nl_string = copy (NL, ad.runout_spacing);	/* get the right number of new lines */

	     call iox_$put_chars (iocbp, addr (nl_string), ad.runout_spacing, ignore);
						/* let the normal entry do the work */
	     goto do_control;
	end;
	else if order = "io_call"
	then call remote_teleprinter_io_call;
	else do;
	     call remote_printer_control_ (iocbp, order, infop, ec);
	     if ec ^= 0
	     then do;
do_control:
		call iox_$control (ad.terminal_iocbp, order, infop, code);
		if code ^= 0 & ec ^= 0
		then code = ec;			/* use first code if this fails */
	     end;
	     if order = "reset"
	     then call iox_$control (ad.terminal_iocbp, order, null, 0);
	end;

control_ret:
	a_code = code;

	return;

/**/

remote_teleprinter_modes:
     entry (a_iocbp, a_new_modes, a_old_modes, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	code, a_code = 0;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	prt_modes, card_modes = "";			/* get ready to pickup old modes */

	call remote_printer_modes_ (iocbp, a_new_modes, prt_modes, prt_code);

	call card_util_$modes (a_new_modes, ad.input_modes, card_modes, card_code);

	if prt_code = 0 | card_code = 0
	then a_code = 0;				/* say OK if one was good */
	else a_code = prt_code;

	if a_new_modes = "default"
	then do;
	     call iox_$modes (ad.terminal_iocbp, a_new_modes, "", 0);
	end;
	else if index (a_new_modes, "non_edited") ^= 0
	then do;
	     i = index (a_new_modes, "non_edited");
	     if i = 1
	     then call iox_$modes (ad.terminal_iocbp, "non_edited", "", 0);
	     else if substr (a_new_modes, i - 1, 1) = "^"
	     then call iox_$modes (ad.terminal_iocbp, "default", "", 0);
	     else call iox_$modes (ad.terminal_iocbp, "non_edited", "", 0);
	end;

	last_pos = length (rtrim (prt_modes));		/* check last char so we give a good mode string */
	last_char = substr (prt_modes, last_pos, 1);
	if last_char = "," | last_char = "."
	then last_pos = last_pos - 1;			/* we'll put it back */

	a_old_modes = rtrim (substr (prt_modes, 1, last_pos) || "," || card_modes);
						/* put it all together */

	return;

/**/

remote_teleprinter_position:
     entry (a_iocbp, a_pos_type, a_pos_value, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	code, a_code = 0;

	if adp = null
	then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null
	then do;
	     code = error_table_$not_open;
	     return;
	end;

	call iox_$position (ad.terminal_iocbp, a_pos_type, a_pos_value, a_code);

	return;




flip_com_err_sw:
     entry ();

	static_comerr_sw = ^static_comerr_sw;		/* flip the bit */

	call ioa_ ("The teleprinter com err sw is now: ^[on^;off^]", static_comerr_sw);

	return;

/**/

get_arg:
     procedure (idx) returns (character (*));

dcl  idx fixed bin;

	idx = idx + 1;				/* advance the index of the major loop */
	if idx > hbound (a_option, 1)
	then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	end;

	return (a_option (idx));

     end get_arg;



cv_dec_arg:
     procedure (idx) returns (fixed binary);

dcl  idx fixed bin;

	idx = idx + 1;				/* advance the index of the major loop */
	if idx > hbound (a_option, 1)
	then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	end;

	on conversion go to bad_dec_arg;

	return (bin (a_option (idx)));
bad_dec_arg:
	code = error_table_$bad_conversion;
	call abort_attach (code, "Invalid decimal number. ^a", (a_option (idx)));

     end cv_dec_arg;



abort_attach:
     procedure (code, str1, str2);

dcl  code fixed bin (35);
dcl  (str1, str2) char (*) aligned;

/* This proc handles attach errors */

	if com_err_sw
	then call com_err_ (code, remote_device_name, str1, str2);

	a_code = code;				/* we were called because code ^= 0 */

	call clean_up;

	go to attach_return;			/* do a direct non-local return */

     end abort_attach;

/**/

alloc_tio_rec:
     procedure ();

	allocate terminal_io_record in (my_area) set (terminal_io_record_ptr);

	unspec (terminal_io_record) = "0"b;		/* clear everything */

	terminal_io_record.version = terminal_io_record_version_1;
						/* our view of the record structure */
	terminal_io_record.device_type = ad.device_type;
	terminal_io_record.element_size = terminal_io_record_element_size;
						/* set by our caller */

	return;

     end alloc_tio_rec;



clean_up:
     procedure ();

/* this is for any form of abort during attachment */

	if adp ^= null
	then do;
	     if ad.terminal_iocbp ^= null
	     then call iox_$detach_iocb (ad.terminal_iocbp, ignore);
	     free adp -> ad in (my_area);
	     adp = null;
	end;

	iocbp -> iocb.attach_descrip_ptr = null;	/* be sure iox_ knows */
	iocbp -> iocb.attach_data_ptr = null;
	iocbp -> iocb.open = iox_$err_no_operation;


	return;

     end clean_up;


handler:
     procedure ();

/* This proc handles faults that occur while masked */

	if mask
	then					/* were we saving any mask bits? */
	     call hcs_$reset_ips_mask (mask, mask);

	mask = ""b;

	call continue_to_signal_ (ignore);

	return;

     end handler;

/**/

/* Handles the io_call orders by mapping them into control order calls to this dim */

remote_teleprinter_io_call:
     procedure ();

	if infop = null
	then do;
	     code = error_table_$bad_arg;
	     return;
	end;

	io_call_infop = infop;
	order = io_call_info.order_name;
	if io_call_info.nargs > 0
	then do;
	     arg = io_call_info.args (1);
	     argp = addr (arg);
	end;
	else argp = null;
	if order = "runout_spacing"
	then do;
	     on conversion goto io_call_err;
	     runout_spacing_cnt = convert (runout_spacing_cnt, io_call_info.args (1));
	     call iox_$control (iocbp, order, addr (runout_spacing_cnt), code);
	end;
	else call iox_$control (iocbp, order, argp, code);
	return;
io_call_err:
	code = error_table_$bad_conversion;
	return;

     end remote_teleprinter_io_call;

/**/

%include remote_attach_data;
%page;
%include prt_conv_info;
%page;
%include prt_info;
%page;
%include iocb;
%page;
%include iox_modes;
%page;
%include io_call_info;
%page;
%include terminal_io_record;

     end remote_teleprinter_;
