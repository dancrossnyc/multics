/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

remote_punch_: proc;

/* remote_punch_: An I/O module for communicating with a remote punch or its equivilent. */

/* Coded March 1977 by David Vinograd */
/* Modified for user TTFs and cleaned up May 1978 by D. Vinograd */
/* Modified by J. C. Whitmore, 11/78, to make the attach options consistent among all remote_xxx_ dims */
/* Modified by J. C. Whitmore, 10/79, to support binary_punch mode (control order) */
/* Modified by J. C. Whitmore,  2/80, to do full record IO to terminal dim */


/****^  HISTORY COMMENTS:
  1) change(87-11-23,Beattie), approve(87-12-21,MCR7821),
     audit(88-01-13,Brunelle), install(88-01-19,MR12.2-1014):
     Prevent splitting of card images that span component boundaries
     of MSFs. (phx21014)
                                                   END HISTORY COMMENTS */


/* format: style4 */

/* Parameters */

dcl  a_iocbp ptr parameter;
dcl  a_option (*) char (*) var parameter;		/* Options for attach */
dcl  a_sw bit (1) parameter;				/* com_err_ switch for attach */
dcl  a_code fixed bin (35) parameter;
dcl  a_mode fixed bin parameter;			/* The open mode */
dcl  a_data_ptr ptr parameter;
dcl  a_data_count fixed bin (24) parameter;
dcl  a_pos_type fixed bin parameter;
dcl  a_pos_value fixed bin (24) parameter;
dcl  a_order char (*) parameter;
dcl  a_infop ptr parameter;
dcl  old_modes char (*) parameter;
dcl  new_modes char (*) parameter;

/* Attach entry point */

remote_punch_attach: entry (a_iocbp, a_option, a_sw, a_code);

	iocbp = a_iocbp;
	com_err_sw = a_sw | static_com_err_sw;
	code, a_code = 0;

	adp = null;
	if iocbp -> iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     call abort_attach (code, "Switch name: ^a", iocbp -> iocb.name);
	end;

	if areap = null then do;			/* first time called, make attach area */
	     call get_temp_segment_ (remote_device_name, areap, code); /* Temp segment for attach data area */
	     if code ^= 0 then call abort_attach (code, "Unable to allocate temp segment.", "");
	     areap -> my_area = empty ();		/* initialize the area */
	end;

	on cleanup call clean_up_handler;		/* be sure to free attach data on abort */

	allocate ad in (my_area) set (adp);		/* create the attach data for this switch */

/* Initialize attach data variables */

	ad.bits = "0"b;
	ad.fixed = 0;
	ad.ptrs = null;
	ad.chars = "";
	ad.edited = "1"b;				/* always default to the edited mode */
	ad.stream_output = "1"b;			/* use the stream interface until records are fully defined */
	ad.card_ll = 80;				/* default number of columns per card */
	ad.device_type = PUNCH_DEVICE;		/* default to output to a punch device */

/* Process attach options */

	if hbound (a_option, 1) < 1 then do;		/* Must be at least one */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach (code, "Bad attach description.", "");
	end;

	terminal_attach_options = "";
	my_options = "";
	terminal_attach_desc = "";
	terminal_attach_name = "";

	device_type = "";				/* mark as no -device option given */

	on conversion begin;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Attach option conversion error.", "");
	end;

	do idx = 1 to hbound (a_option, 1);
	     if a_option (idx) = "-runout_spacing" | a_option (idx) = "-runsp" then do; /* skip it and next option */
		dummy = get_arg (idx);
		my_options = my_options || " -runsp " || dummy;
	     end;
	     else if a_option (idx) = "-htab" | a_option (idx) = "-horizontal_tab" then do;
		ad.htab = "1"b;			/* allow tabs to be sent to remote */
		my_options = my_options || " -htab";
	     end;
	     else if a_option (idx) = "-non_edited" then do;
		ad.edited = "0"b;			/* allow ctl chars to be sent to remote */
		my_options = my_options || " -non_edited";
	     end;
	     else if a_option (idx) = "-card_ll" then do;
		dummy = get_arg (idx);
		my_options = my_options || " -card_ll " || dummy;
		ad.card_ll = convert (ad.card_ll, dummy); /* get it into fixed bin form */
	     end;
	     else if a_option (idx) = "-physical_page_length" | a_option (idx) = "-ppl" then do; /* absorb this too */
		dummy = get_arg (idx);
		my_options = my_options || " -ppl " || dummy;
	     end;
	     else if a_option (idx) = "-device" then do;
		device_type = get_arg (idx);		/* record this */
		my_options = my_options || " -device " || rtrim (device_type);
	     end;
	     else if a_option (idx) = "-terminal" then
		ad.terminal = get_arg (idx);
	     else terminal_attach_options = terminal_attach_options || space || a_option (idx);
	end;

/* Attach through terminal dim */

	if ad.terminal = "" then do;			/* must specify the next level */
	     code = error_table_$badopt;
	     call abort_attach (code, "Missing option -terminal.", "");
	end;

	if device_type = "" then device_type = "punch";	/* choose the default if not specified */
	else do;					/* otherwise check it out more ... */
	     if device_type = "reader_simulator" then do;
		device_type = "reader";		/* we are to simulate the reader of a workstation */
		ad.device_type = READER_DEVICE;
	     end;
	     else if device_type ^= "punch" then do;	/* the only other one we will accept */
		code = error_table_$bad_arg;
		call abort_attach (code, "Invalid -device option: ^a", (device_type));
	     end;
	end;

	if ad.card_ll < 1 | ad.card_ll > 160 then do;	/* validate the line length */
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid card line length", "");
	end;

	attach_count = attach_count + 1;		/* new attach name each time */
	if attach_count > 999 then attach_count = 1;
	terminal_attach_name = remote_device_name || ltrim (character (attach_count));

	ad.attach_desc = remote_device_name || " -terminal " || ad.terminal ||
	     terminal_attach_options || my_options;
	terminal_attach_desc = ad.terminal || terminal_attach_options || " -device " || rtrim (device_type);

	call iox_$attach_ioname ((terminal_attach_name), ad.terminal_iocbp, (terminal_attach_desc), code);
	if code ^= 0 then call abort_attach (code, "Unable to attach to terminal ", "");

/* Now mask and complete the iocb */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_desc);
	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = remote_punch_open;
	iocbp -> iocb.detach_iocb = remote_punch_detach;

	call iox_$propagate (iocbp);

	revert cleanup;				/* we are now comitted; require a detach */

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

attach_return:

	a_code = code;

	return;

/* Detach entry point */

remote_punch_detach: entry (a_iocbp, a_code);

	iocbp = a_iocbp;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

/*	First, kill the switch defination known by iox_ */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = null;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

/*	Now kill the terminal IO switch.  If this fails, there isn't anything we can do about it.  */
/*	So, ignore any errors ... we tried at least. */

	call iox_$detach_iocb (ad.terminal_iocbp, ignore);

	if ad.stat_term_rec_ptr ^= null then do;
	     free ad.stat_term_rec_ptr -> terminal_io_record in (my_area);
	     ad.stat_term_rec_ptr = null;
	end;

	free adp -> ad in (my_area);

	adp = null;

	return;

/* Open entry point */

remote_punch_open: entry (a_iocbp, a_mode, a_sw, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

	open_mode = a_mode;
	if ^((open_mode = Stream_output) | (open_mode = Stream_input_output)) then do;
	     a_code = error_table_$bad_mode;
	     return;
	end;

	call iox_$open (ad.terminal_iocbp, Sequential_output, "0"b, a_code); /* try for record interface first */
	if a_code = 0 then ad.stream_output = "0"b;	/* we have it, so use it */
	else do;
	     ad.stream_output = "1"b;			/* this is all that's left if it works */
	     call iox_$open (ad.terminal_iocbp, Stream_output, "0"b, a_code);
	     if a_code ^= 0 then return;		/* too bad, abort the open */
	end;

	ad.open_description = rtrim (iox_modes (open_mode));

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.put_chars = write_elements;
	iocbp -> iocb.get_chars = iox_$err_no_operation;
	iocbp -> iocb.get_line = iox_$err_no_operation;
	iocbp -> iocb.control = remote_punch_control;
	iocbp -> iocb.modes = remote_punch_modes;
	iocbp -> iocb.position = remote_punch_position;
	iocbp -> iocb.close = remote_punch_close;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	return;

/* Close entry point */

remote_punch_close: entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

/*	Try to close the terminal IO switch.  If it fails, there isn't anything we can do about it. */
/*	So just ignore the error code.  Our switch will be closed successfully. */

	call iox_$close (ad.terminal_iocbp, ignore);

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = remote_punch_open;
	iocbp -> iocb.detach_iocb = remote_punch_detach;
	iocbp -> iocb.control = iox_$err_no_operation;
	iocbp -> iocb.position = iox_$err_no_operation;
	iocbp -> iocb.modes = iox_$err_no_operation;
	iocbp -> iocb.put_chars = iox_$err_no_operation;
	iocbp -> iocb.get_chars = iox_$err_no_operation;
	iocbp -> iocb.get_line = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	return;

/* Put_chars entry point */

write_elements: entry (a_iocbp, a_data_ptr, a_data_count, a_code);

/* This entry takes data defined by the data ptr and the data length count as stream input and breaks
   the data into card image records for the terminal IO module.  Both character and binary card images
   are supported by remote_punch_.  This module can be called for each component of an MSF and card
   images will not be broken.  The "runout" control order flushes the last card if present in the
   output buffer. */

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if ad.binary then max_size = BITS_PER_SEGMENT;	/* max bit count */
	else max_size = CHARS_PER_SEGMENT;		/* max char count */

	if a_data_count < 0 | a_data_count > max_size then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	call iox_$control (ad.terminal_iocbp, "select_device", addr (punch_device), code);
	if code ^= 0 then go to put_chars_ret;

	remaining_count = a_data_count;		/* This is decremented as data is sent */
	wp = a_data_ptr;				/* set local pointer to callers workspace */
	in_pos = 1;				/* start with the first input element */

	if ad.binary then do;			/* for binary punch output */
	     if ad.stat_term_rec_ptr = null then do;	/* if we haven't already done this */
		terminal_io_record_element_size = 1;	/* setup for allocation of output record */
		terminal_io_record_n_elements = 960;	/* max record length of 960 bits in binary mode */
		call allocate_tio_rec;		/* make an output record block */
		terminal_io_record.binary = "1"b;	/* mark this as a binary record */
	     end;
	     else terminal_io_record_ptr = ad.stat_term_rec_ptr;

	     do while (remaining_count > 0);

		if ad.rec_len > 0 then do;		/* there is data here from last call */
		     data_len = min (960 - ad.rec_len, remaining_count);
		     substr (terminal_io_record_data_bits, ad.rec_len + 1) = substr (wp -> bit_string, in_pos, data_len);
		     ad.rec_len = ad.rec_len + data_len;
		     if ad.rec_len < 960 then go to put_chars_ret;
		     call send_binary;
		     in_pos = in_pos + data_len;
		     remaining_count = remaining_count - data_len;
		end;				/* data here from last call */

		else do;
		     ad.rec_len = min (960, remaining_count); /* records are 1 to 960 bits long */
		     terminal_io_record_data_bits = substr (wp -> bit_string, in_pos, ad.rec_len);
						/* define the record and pad with zeros */
		     if ad.rec_len < 960 then go to put_chars_ret;
						/* there may be mor in a later call */

		     call send_binary;
		     in_pos = in_pos + ad.rec_len;	/* bump the workspace index */
		     remaining_count = remaining_count - ad.rec_len; /* and decrement the remainder count */
		end;				/* no data in buffer from previous call */
	     end;					/* while data to send */
	end;					/* if binary to send */

	else do;					/* for character output */
	     if ad.stat_term_rec_ptr = null then do;	/* done only once per file */
		terminal_io_record_element_size = 9;	/* 9 bits per character in the record */
		terminal_io_record_n_elements = ad.card_ll; /* max record size */
		call allocate_tio_rec;		/* make an output record block */
		residue = 0;			/* space residue from HT processing */
		ad.tab_idx = 1;			/* virtual carriage position for tab calc */
	     end;
	     else terminal_io_record_ptr = ad.stat_term_rec_ptr;

	     if ad.out_pos > 1 then go to next_char;	/* we already have some data in output record */

	     do while (remaining_count > 0);
		terminal_io_record.n_elements = ad.card_ll; /* reset to max length each time */
		terminal_io_record_data_chars = "";	/* clear the card image, we need spaces for tab padding */
		ad.out_pos = 1;			/* build card image starting in col 1 */
		if residue > 0 then do;
		     ad.out_pos = ad.out_pos + residue; /* move over extra spaces */
		     residue = 0;			/* reset the space residue */
		end;


next_char:	if remaining_count <= 0 then go to put_chars_ret;
						/* if done with input due to editing, just stop */
						/* may get more */
		char = substr (wp -> char_string, in_pos, 1); /* pickup next character */

		in_pos = in_pos + 1;		/* bump the index */
		remaining_count = remaining_count - 1;	/* and decrement the remainder */

		if rank (char) < rank (" ") then do;	/* look for control chars */
		     if char = CR | char = NL | char = VT | char = FF then do; /* card terminators */
			ad.tab_idx = 1;		/* reset the virtual carriage */
			go to send;		/* send off the card */
		     end;
		     if char = HT then do;		/* for tabs, put out spaces, let terminal compress */
			if ^ad.htab then do;	/* if not sending the tab char, pad it out */
			     tab_stop = divide (ad.tab_idx + 9, 10, 0) * 10 + 1; /* 11, 21, 31,  ... */
			     count = tab_stop - ad.tab_idx; /* spaces we are to move */
			     ad.tab_idx = tab_stop;	/* move the virtual carriage to new stop */
			     if ad.out_pos + count > ad.card_ll then do; /* fold spaces? */
				residue = (ad.out_pos - 1) + count - ad.card_ll; /* save the extra for later */
				go to send;	/* and send off this card image */
			     end;
			     ad.out_pos = ad.out_pos + count; /* just step over spaces already there */
			     go to next_char;	/* and go on to the next character */
			end;
		     end;
		     else if ad.edited then go to next_char;
						/* edit out back space and ctl chars not handled */
		end;				/* if control character */
		else if rank (char) > rank ("~") then go to next_char; /* drop all above 176 octal */

		substr (terminal_io_record_data_chars, ad.out_pos, 1) = char; /* put the char into the output record */

		ad.out_pos = ad.out_pos + 1;		/* that position is used up */
		ad.tab_idx = ad.tab_idx + 1;		/* also move the virtual carriage */
		if ad.out_pos <= ad.card_ll then go to next_char; /* fill up the card through col ad.card_ll */
		else if remaining_count > 0 then do;	/* check for terminating char if more input */
		     char = substr (wp -> char_string, in_pos, 1); /* get the next char */
		     if char = CR | char = NL | char = VT | char = FF then do;
			remaining_count = remaining_count - 1; /* skip over the terminator */
			in_pos = in_pos + 1;
		     end;
		end;
send:
		call send_chars;
	     end;					/* start a new card image */
	end;					/* character output */

put_chars_ret:
	a_code = code;

	return;

/* Control entry point */

remote_punch_control: entry (a_iocbp, a_order, a_infop, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     code = error_table_$not_attached;
	     return;
	end;

	infop = a_infop;
	order = a_order;
	code, a_code = 0;

	if order = "reset" then do;
	     ad.records_sent = 0;			/* reset the accounting data */
	     ad.binary = "0"b;			/* back to the default of character output */
	     ad.rec_len, ad.out_pos = 0;		/* forget any held output */
	     if ad.stat_term_rec_ptr ^= null then do;
		free ad.stat_term_rec_ptr -> terminal_io_record in (my_area);
		ad.stat_term_rec_ptr = null;
	     end;
	     go to pass_it_on;			/* let it go to the terminal also */
	end;
	else if order = "binary_punch" then do;
						/* cannot allow ad.binary to change during an IO */
	     if ad.binary & ad.rec_len > 0 then go to noop_error;
	     else if ad.out_pos > 1 then go to noop_error;

	     call iox_$control (ad.terminal_iocbp, order, infop, code); /* see if terminal can do it */
	     if code = 0 then ad.binary = "1"b;		/* set binary mode only if terminal agrees on binary */
	     else ad.binary = "0"b;			/* otherwise, keep character mode */
	end;
	else if order = "get_count" then do;		/* give the accounting data */
	     if infop ^= null then do;
		infop -> counts.line_count = ad.records_sent; /* use the line count as card count */
		infop -> counts.page_count = 0;	/* not valid data for a punch */
	     end;
	     else

noop_error:
		code = error_table_$no_operation;
	end;
	else if order = "runout" then do;
	     if ad.binary & ad.rec_len > 0 then call send_binary;
	     else if ad.out_pos > 1 then call send_chars;
	     if ad.stat_term_rec_ptr ^= null then do;
		free ad.stat_term_rec_ptr -> terminal_io_record in (my_area);
		ad.stat_term_rec_ptr = null;
	     end;
	     go to pass_it_on;
	end;
	else do;
pass_it_on:
	     call iox_$control (ad.terminal_iocbp, order, infop, code);
	end;

	a_code = code;

	return;

/* Modes entry point */

remote_punch_modes: entry (a_iocbp, new_modes, old_modes, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	a_code = 0;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	call iox_$modes (ad.terminal_iocbp, new_modes, old_modes, a_code);

	return;

/* Position entry point */

remote_punch_position: entry (a_iocbp, a_pos_type, a_pos_value, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	a_code = 0;

	call iox_$position (ad.terminal_iocbp, a_pos_type, a_pos_value, a_code);

	return;





flip_com_err_sw: entry;				/* entry to flip the com_err_sw */


	static_com_err_sw = ^static_com_err_sw;		/* that's it */

	return;

get_arg: proc (idx) returns (char (*));

dcl  idx fixed bin;

	idx = idx + 1;				/* advance the option index to the option arg */
	if idx > hbound (a_option, 1) then do;		/* check the range */
	     code = error_table_$noarg;
	     call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	end;
	return (a_option (idx));

     end get_arg;




abort_attach: proc (code, str1, str2);

dcl  (str1, str2) char (*) aligned;
dcl  code fixed bin (35);

/* This proc handles attach errors */

	if com_err_sw then call com_err_ (code, remote_device_name, str1, str2);

	call clean_up_handler;

	go to attach_return;

     end abort_attach;

clean_up_handler: proc;

	if adp ^= null then do;
	     if ad.terminal_iocbp ^= null then call iox_$detach_iocb (ad.terminal_iocbp, ignore);
	     free adp -> ad in (my_area);
	     if ad.stat_term_rec_ptr ^= null then do;
		free ad.stat_term_rec_ptr -> terminal_io_record in (my_area);
		ad.stat_term_rec_ptr = null;
	     end;
	     adp = null;
	end;

	return;

     end clean_up_handler;


handler: proc;

/* This proc handles faults that occur while masked */

	if mask then call hcs_$reset_ips_mask (mask, mask);

	mask = "0"b;

	call continue_to_signal_ (ignore);

	return;

     end handler;



allocate_tio_rec: proc;

	allocate terminal_io_record in (my_area) set (ad.stat_term_rec_ptr);
	terminal_io_record_ptr = ad.stat_term_rec_ptr;

	unspec (terminal_io_record) = "0"b;		/* clear any garbage */

	terminal_io_record.version = terminal_io_record_version_1; /* announce our view of the record structure */
	terminal_io_record.device_type = ad.device_type;	/* inform the terminal dim if we are a reader or punch */
	terminal_io_record.element_size = terminal_io_record_element_size; /* set by our caller */
	terminal_io_record.n_elements = terminal_io_record_n_elements;

	return;

     end allocate_tio_rec;

send_binary: proc;

	terminal_io_record.n_elements = ad.rec_len;	/* set the data record size */

	if ad.stream_output then			/* for the stream interface to the terminal */
	     call iox_$put_chars (ad.terminal_iocbp, addr (terminal_io_record.bits), ad.rec_len, code);
	else do;
	     call iox_$write_record (ad.terminal_iocbp, terminal_io_record_ptr,
		4 * currentsize (terminal_io_record), code);
	end;
	if code ^= 0 then go to put_chars_ret;

	ad.records_sent = ad.records_sent + 1;		/* account for all records we send */
	ad.rec_len = 0;				/* not holding any data */

     end send_binary;




send_chars: proc;

	terminal_io_record.n_elements = ad.out_pos - 1;	/* define the final length of this record */
	if ad.stream_output then
	     call iox_$put_chars (ad.terminal_iocbp, addr (terminal_io_record.bits), ad.out_pos - 1, code);
	else call iox_$write_record (ad.terminal_iocbp, terminal_io_record_ptr,
		4 * currentsize (terminal_io_record), code);
	if code ^= 0 then go to put_chars_ret;
	ad.records_sent = ad.records_sent + 1;		/* for the accounting, only count successful writes */
	ad.out_pos = 1;				/* start in column 1 */

     end send_chars;

/* Automatic */

dcl  code fixed bin (35);
dcl  com_err_sw bit (1);				/* Set if com_err_ sould be called on attach error */
dcl  count fixed bin;				/* number of spaces to move to tab stop */
dcl  device_type char (32);				/* temp for value of the -device att opt */
dcl  dummy char (32) var;
dcl  idx fixed bin;					/* index variable for do loops */
dcl  ignore fixed bin (35);
dcl  in_pos fixed bin (24);				/* index of next element in callers data */
dcl  infop ptr;
dcl  iocbp ptr;
dcl  mask bit (36) aligned;				/* For setting ips mask */
dcl  max_size fixed bin (24); dcl char char (1);		/* test char for editing output */
dcl  my_options char (64) var;			/* this should be small */
dcl  open_mode fixed bin;
dcl  order char (32);
dcl  data_len fixed bin;				/* length of data to fill out current output record */
dcl  remaining_count fixed bin (24);			/* number of data elements to be punched */
dcl  residue fixed bin;				/* spaces to be added to next card image */
dcl  tab_stop fixed bin;				/* next tab stop for tab calculations */
dcl  terminal_attach_desc char (256) var;
dcl  terminal_attach_name char (32) var;
dcl  terminal_attach_options char (256) var;
dcl  wp ptr;					/* input data workspace pointer */

/* Internal Static	*/

dcl  attach_count fixed bin int static init (0);
dcl  areap ptr int static init (null);
dcl  static_com_err_sw bit (1) int static init ("0"b);	/* for testing attach options */

/* Based variables */

dcl  my_area area (WORDS_PER_SEGMENT) based (areap);

dcl  bit_string bit (BITS_PER_SEGMENT) based;		/* input data for binary punching */
dcl  char_string char (CHARS_PER_SEGMENT) based;		/* input data for character punching */

/* Constants */

dcl  remote_device_name char (13) int static options (constant) init ("remote_punch_");
dcl  punch_device char (32) int static options (constant) init ("punch");
dcl  space char (1) static init (" ") int options (constant);
dcl  HT char (1) int static options (constant) init ("	");
dcl  NL char (1) int static options (constant) init ("
");
dcl  CR char (1) int static options (constant) init ("");
dcl  VT char (1) int static options (constant) init ("");
dcl  FF char (1) int static options (constant) init ("");

/* External stuff */

dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  com_err_ entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  iox_$position entry (ptr, fixed bin, fixed bin (24), fixed bin (35));
dcl  iox_$err_no_operation entry;

dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$not_closed ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$no_operation ext fixed bin (35);


/* Conditions and Builtins */

dcl  (addr, character, convert, currentsize, divide, empty, hbound, ltrim, min, null, rank, rtrim, substr, unspec) builtin;

dcl  (any_other, cleanup, conversion) condition;

dcl  adp ptr;

dcl  1 ad aligned based (adp),
       2 fixed,
         3 device_type fixed bin,			/* one of the codes defined in terminal_io_record.incl.pl1 */
         3 records_sent fixed bin,			/* for accounting, card images sent */
         3 card_ll fixed bin,				/* number of columns per card starting in col 1 */
         3 out_pos fixed bin,				/* next available output buffer element index */
         3 rec_len fixed bin,				/* length of bits in record */
         3 tab_idx fixed bin,				/* virtual carriage position for tab calculations */
       2 bits,
         3 binary bit (1) unal,			/* TRUE when in binary punch mode */
         3 edited bit (1) unal,			/* TRUE when character editing is to be done */
         3 htab bit (1) unal,				/* TRUE when HT chars are allowed to be sent */
         3 stream_output bit (1) unal,			/* TRUE if stream interface to terminal is needed */
       2 ptrs,
         3 terminal_iocbp ptr,			/* iocbp for terminal dim of this attachment */
         3 stat_term_rec_ptr ptr,			/* pointer to data record */
       2 chars,
         3 terminal char (32) var,			/* name of the terminal dim */
         3 attach_desc char (256) var,			/* attach description of this attachment */
         3 open_description char (24) var;		/* open desc for this attachment */

dcl  1 counts aligned based (infop),			/* accounting data for caller */
       2 line fixed bin,				/* for printers */
       2 page_len fixed bin,				/*     "        */
       2 lmarg fixed bin,				/*     "         */
       2 rmarg fixed bin,				/*     "        */
       2 line_count fixed bin,			/* this is the relavent information */
       2 page_count fixed bin;			/* this could be used, set to zero */

%include terminal_io_record;

%include iocb;

%include iox_modes;

%include system_constants;

     end remote_punch_;
