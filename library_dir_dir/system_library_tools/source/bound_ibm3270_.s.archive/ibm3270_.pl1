/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* IBM3270_: An I/O module for controling multi-station 3270 controllers */

/* Written September 1977 by Larry Johnson */

ibm3270_: proc;

/* Parameters */

dcl  arg_iocbp ptr;
dcl  arg_option (*) char (*) var;			/* Options for attach */
dcl  arg_sw bit (1);				/* Com_err_ switch for attach */
dcl  arg_code fixed bin (35);
dcl  arg_mode fixed bin;				/* The open mode */
dcl  arg_event_call_infop ptr;

/* Automatic */

dcl  com_err_sw bit (1);				/* Set if com_err_ sould be called on attach error */
dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  mask bit (36) aligned;				/* For setting ips mask */
dcl  state fixed bin;
dcl  ch char (1);
dcl 1 my_area_info aligned like area_info automatic;

dcl 1 mode_data aligned,
    2 req_len fixed bin,
    2 req char (256);

dcl 1 event_info aligned,
    2 channel_id fixed bin (71),
    2 message fixed bin (71),
    2 sender bit (36),
    2 origon,
      3 dev_signal bit (18) unal,
      3 ring bit (18) unal,
    2 channel_index fixed bin (17);

dcl  event_call_infop ptr;
dcl 1 event_call_info aligned based (event_call_infop),
    2 channel_id fixed bin (71),
    2 message fixed bin (71),
    2 sender bit (36),
    2 origon,
      3 dev_signal bit (18) unal,
      3 ring bit (18) unal,
    2 data_ptr ptr;

dcl 1 rw_status aligned,				/* For read_status and write_status */
    2 channel fixed bin (71),
    2 flag bit (1);

dcl 1 poll_addr aligned,
    2 length fixed bin,
    2 data char (4);

dcl  dial_msg_chan char (6);				/* Variables for dial manager */
dcl  dial_msg_module char (32);
dcl  dial_msg_ndialed fixed bin;

dcl 1 dma aligned,
    2 version fixed bin,
    2 dial_qual char (22),
    2 event_channel fixed bin (71),
    2 channel_name char (32);

dcl 1 dial_msg_flags aligned,
    2 dialed_up bit (1) unal,
    2 hung_up bit (1) unal,
    2 control bit (1) unal,
    2 pad bit (33) unal;

/* Constants */

dcl  iomodule_name char (8) int static options (constant) init ("ibm3270_");

/* External stuff */

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  release_area_ entry (ptr);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  ipc_$decl_ev_wait_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$propagate entry (ptr);
dcl  com_err_ entry options (variable);
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  dial_manager_$privileged_attach entry (ptr, fixed bin (35));
dcl  convert_dial_message_ entry (bit (72) aligned, char (*), char (*), fixed bin, 1 like dial_msg_flags aligned,
     fixed bin (35));
dcl  hcs_$tty_attach entry (char (*), fixed bin (71), fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_detach entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  ibm3270_control_$control ext entry;
dcl  ibm3270_control_$timer_handler ext entry;
dcl  ibm3270_control_$wakeup_handler ext entry;

dcl (addr, hbound, length, null, rtrim, string, unspec) builtin;

dcl  sys_info$max_seg_size ext fixed bin (35);
dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$line_status_pending ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$action_not_performed ext fixed bin (35);
dcl  error_table_$request_pending ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);

dcl  conversion condition;




%include iocb;

%include iox_modes;


%include area_info;

%include bisync_line_data;

%include ibm3270_attach_data;

/* Attach entry point */

ibm3270_attach: entry (arg_iocbp, arg_option, arg_sw, arg_code);

	iocbp = arg_iocbp;
	com_err_sw = arg_sw;
	arg_code = 0;

	area_infop = addr (my_area_info);
	area_info.version = area_info_version_1;
	string (area_info.control) = "0"b;
	area_info.extend = "1"b;
	area_info.zero_on_free = "1"b;
	area_info.owner = iomodule_name;
	area_info.size = sys_info$max_seg_size;
	area_info.areap = null;
	adp = null;

	if iocbp -> iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     call abort_attach ("^a", iocbp -> iocb.name);
	end;

	call define_area_ (area_infop, code);
	if code ^= 0 then call abort_attach ("Unable to allocate temp area.", "");
	allocate ad in (area_info.areap -> work_area);
	unspec (ad) = "0"b;
	ad.work_areap = area_info.areap;
	ad.processid = get_process_id_ ();

/* Process options */

	if hbound (arg_option, 1) < 1 then do;		/* Must be exactly one */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach ("Bad attach description.", "");
	end;

	ad.device = arg_option (1);

	do i = 2 to hbound (arg_option, 1);
	     if arg_option (i) = "-ebcdic" then ad.ascii = "0"b;
	     else if arg_option (i) = "-ascii" then ad.ascii = "1"b;
	     else if arg_option (i) = "-async" then ad.async = "1"b;
	     else if arg_option (i) = "-retry_limit" then do; /* Times to retry i/o */
		i = i + 1;			/* Check next arg */
		if i > hbound (arg_option, 1) then do;
		     code = error_table_$noarg;
		     call abort_attach ("^a", "After -retry_limit");
		end;
		on conversion begin;		/* In case bad arg */
		     code = 0;
		     call abort_attach ("Invalid retry limit: ^a", (arg_option (i)));
		end;
		ad.retry_limit = bin (arg_option (i));
		revert conversion;
		if ad.retry_limit < 0 then ad.retry_limit = 0;
	     end;
	     else do;
		code = error_table_$badopt;
		call abort_attach ("^a", (arg_option (i)));
	     end;
	end;

	ad.nchan = 1;
	call create_channel (ad.user_channel);
	call create_channel (ad.io_channel);
	call create_channel (ad.attach_channel);
	call create_channel (ad.timer_channel);

/* Now mask and complete the iocb */

	ad.attach_description = iomodule_name;
	do i = 1 to hbound (arg_option, 1);
	     ad.attach_description = ad.attach_description || " ";
	     ad.attach_description = ad.attach_description || arg_option (i);
	end;
	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_description);
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = ibm3270_open;
	iocbp -> iocb.control = ibm3270_control_$control;
	iocbp -> iocb.detach_iocb = ibm3270_detach;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);
attach_return:
	return;


/* Internal procedure to handle attach errors */

abort_attach: proc (str1, str2);

dcl (str1, str2) char (*) aligned;

	     if com_err_sw then call com_err_ (code, iomodule_name, str1, str2);
	     if code = 0 then code = error_table_$badopt;
	     arg_code = code;

	     if adp ^= null then do;
		if ad.user_channel ^= 0 then call ipc_$delete_ev_chn (ad.user_channel, code);
	     end;
	     if area_info.areap ^= null then call release_area_ (area_info.areap);
	     go to attach_return;

	end abort_attach;

/* Internal procedure used by attach to create event channels */

create_channel: proc (ch);

dcl  ch fixed bin (71);

	     call ipc_$create_ev_chn (ch, code);
	     if code = 0 then return;
	     call convert_ipc_code_ (code);
	     call abort_attach ("Creating event channel.", "");

	end create_channel;

/* Detach entry point */

ibm3270_detach: entry (arg_iocbp, arg_code);

	iocbp = arg_iocbp;
	arg_code = 0;

	adp = iocbp -> iocb.attach_data_ptr;

	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.attach_descrip_ptr = null;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);

	call ipc_$delete_ev_chn (ad.user_channel, code);
	call ipc_$delete_ev_chn (ad.timer_channel, code);
	call ipc_$delete_ev_chn (ad.attach_channel, code);
	call ipc_$delete_ev_chn (ad.io_channel, code);
	call release_area_ (addr (work_area));

	return;

/* Open entry point */

ibm3270_open: entry (arg_iocbp, arg_mode, arg_sw, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;
	arg_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if arg_mode ^= Stream_input_output then do;
	     code = error_table_$bad_mode;
	     go to report_open_code;
	end;

/* See if we are completing a previously started open */

	if ad.open_in_progress then do;
	     if ad.open_wakeup_occured then do;		/* Got the wakeup */
		ad.open_in_progress, ad.open_wakeup_occured = "0"b;
		go to complete_open;
	     end;
	     code = error_table_$request_pending;	/* Still not done */
	     go to report_open_code;
	end;

/* Get bisync channel from answering service. */

	dma.version = 1;				/* Setup dial manager data structure */
	dma.event_channel = ad.attach_channel;
	dma.channel_name = ad.device;
	dma.dial_qual = "";
	call dial_manager_$privileged_attach (addr (dma), code);
	if code = error_table_$action_not_performed then go to maybe_mine_already;
	if code ^= 0 then go to report_open_code;

/* Make ansering service call us back when line is ready */

	call ipc_$decl_ev_call_chn (ad.attach_channel, open_wakeup_handler, iocbp, 1, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     go to report_open_code;
	end;

	ad.open_in_progress = "1"b;
	if ad.async then do;			/* Cant block here */
	     code = error_table_$request_pending;
	     go to report_open_code;
	end;
	call block;				/* Wait for answering service */
	ad.open_in_progress, ad.open_wakeup_occured = "0"b;
	if code ^= 0 then go to report_open_code;

complete_open:
	call convert_dial_message_ (unspec (ad.open_event_message), dial_msg_chan, dial_msg_module,
	     dial_msg_ndialed, dial_msg_flags, code);
	if code ^= 0 then go to report_open_code;
maybe_mine_already:

/* Attach the device */

	call hcs_$tty_attach ((ad.device), ad.io_channel, ad.tty_index, state, code);
	if code ^= 0 then go to report_open_code;
retry_modes:
	mode_data.req_len = length (mode_data.req);
	mode_data.req = "rawi,rawo";
	call hcs_$tty_order (ad.tty_index, "modes", addr (mode_data), state, code);
	if code = error_table_$line_status_pending then do;
	     call flush_line_status;
	     if code = 0 then go to retry_modes;
	end;
	if code ^= 0 then go to report_open_code;

retry_message_size:
	i = 256;
	call hcs_$tty_order (ad.tty_index, "set_input_message_size", addr (i), state, code);
	if code = error_table_$line_status_pending then do;
	     call flush_line_status;
	     if code = 0 then go to retry_message_size;
	end;
	if code ^= 0 then go to report_open_code;

	call line_control (SET_3270_MODE, 0);
	if code ^= 0 then go to report_open_code;
	call line_control (SET_BID_LIMIT, 3);
	if code ^= 0 then go to report_open_code;
	call line_control (CONFIGURE, 1);
	if code ^= 0 then go to report_open_code;
	call line_control2 (SET_TTD_PARAMS, 2, 2);
	if code ^= 0 then go to report_open_code;


	call ipc_$decl_ev_call_chn (ad.io_channel, ibm3270_control_$wakeup_handler, iocbp, 1, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     go to report_open_code;
	end;

	call ipc_$decl_ev_call_chn (ad.timer_channel, ibm3270_control_$timer_handler, iocbp, 1, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     go to report_open_code;
	end;

/* Initialize attach data variables */

	ad.first_read_infop = null;
	ad.last_read_infop = null;
	ad.header_buf_len = 16;
	allocate header_buf in (work_area);
	ad.input_buf_len = 4096;
	allocate input_buf in (work_area);
	ad.text_buf_len = 4096;
	allocate text_buf in (work_area);
	ad.output_buf_len = 56*40;			/* FNPs arbitrary limit */
	allocate output_buf in (work_area);
	ad.header_len, ad.text_len, ad.unscanned_data_len = 0;
	ad.input_state = 1;
	ad.last_device_polled = -2;			/* Set to invalid number */
	ad.last_device_selected = -2;
	ad.cur_out_reqp = null;			/* No output */
	ad.first_out_reqp (*) = null;
	ad.last_out_reqp (*) = null;
	ad.min_dev, ad.max_dev = -1;
	ad.pend_interval = 30000000;			/* 30 seconds */
	ad.pend_time (*) = 0;
	ad.close_in_progress = "0"b;
	ad.output_in_progress = "0"b;
	ad.input_line_status, ad.output_line_status = 0;
	ad.general_poll, ad.polling_in_progress = "0"b;
	ad.device_responded = "0"b;
	ad.first_poll_reqp, ad.last_poll_reqp = null;

	unspec (ad.stx) = "002"b3;
	unspec (ad.etx) = "003"b3;
	unspec (ad.soh) = "001"b3;
	unspec (ad.sf) = "035"b3;
	unspec (ad.sba) = "021"b3;
	unspec (ad.ic) = "023"b3;
	unspec (ad.eua) = "022"b3;
	if ad.ascii then do;
	     unspec (ad.etb) = "027"b3;
	     unspec (ad.eot) = "004"b3;
	     unspec (ad.pt) = "011"b3;
	     unspec (ad.ra) = "024"b3;
	     unspec (ad.esc) = "033"b3;
	end;
	else do;
	     unspec (ad.etb) = "046"b3;
	     unspec (ad.eot) = "067"b3;
	     unspec (ad.pt) = "005"b3;
	     unspec (ad.ra) = "074"b3;
	     unspec (ad.esc) = "047"b3;
	end;

	do i = 0 to 63;				/* Set up usavble form of address_mapping array */
	     unspec (ch) = "0"b || address_mapping (i);
	     ad.bit6_char (i) = ch;
	end;

	ad.open_description = rtrim (iox_modes (arg_mode));

	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.close = ibm3270_close;
	iocbp -> iocb.control = ibm3270_control_$control;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
report_open_code:
	arg_code = code;
	return;

/* This entry is the event call handeler for the attach channel during opens */

open_wakeup_handler: entry (arg_event_call_infop);

	event_call_infop = arg_event_call_infop;
	iocbp = event_call_info.data_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if ^ad.open_in_progress then return;		/* Came at bad time */
	ad.open_event_message = event_call_info.message;	/* Save the message */
	ad.open_wakeup_occured = "1"b;
	call hcs_$wakeup (ad.processid, ad.user_channel, 0, code);
	return;

/* Close entry point */

ibm3270_close: entry (arg_iocbp, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;
	arg_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	ad.close_in_progress = "1"b;
	call line_control (STOP_AUTO_POLL, 0);
	call hcs_$tty_detach (ad.tty_index, 0, state, code);
	call ipc_$decl_ev_wait_chn (ad.io_channel, code);
	call ipc_$decl_ev_wait_chn (ad.attach_channel, code);
	call ipc_$decl_ev_wait_chn (ad.timer_channel, code);

	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = ibm3270_open;
	iocbp -> iocb.detach_iocb = ibm3270_detach;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);

	call ipc_$drain_chn (ad.user_channel, code);
	call ipc_$drain_chn (ad.io_channel, code);
	call ipc_$drain_chn (ad.attach_channel, code);
	call timer_manager_$reset_alarm_wakeup (ad.timer_channel);
	call ipc_$drain_chn (ad.timer_channel, code);

	free header_buf;
	free text_buf;
	free input_buf;
	free output_buf;

	return;

/* Control/* Internal procedure to block */

block:	proc;

	     call ipc_$block (addr (ad.wait_list), addr (event_info), code);
	     if code ^= 0 then call convert_ipc_code_ (code);
	     return;

	end block;

/* Procedure to do a line control order */

line_control: proc (op, val1);

dcl (op, val1, val2) fixed bin;

	     line_ctl.val = 0;
line_control_join:
	     line_ctl.val (1) = val1;
	     line_ctl.op = op;
retry_line_control:
	     call hcs_$tty_order (ad.tty_index, "line_control", addr (line_ctl), state, code);
	     if code = error_table_$line_status_pending then do;
		call flush_line_status;
		if code = 0 then go to retry_line_control;
	     end;
	     return;

line_control2: entry (op, val1, val2);

	     line_ctl.val = 0;
	     line_ctl.val (2) = val2;
	     go to line_control_join;

	end line_control;

flush_line_status: proc;

	     call hcs_$tty_order (ad.tty_index, "line_status", addr (line_stat), state, code);
	     return;

	end flush_line_status;


     end ibm3270_;
