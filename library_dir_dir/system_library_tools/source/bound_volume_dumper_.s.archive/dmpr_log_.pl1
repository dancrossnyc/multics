/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-10,GWMay), approve(86-07-10,MCR7445), audit(86-11-20,GDixon),
     install(86-12-09,MR12.0-1238):
     modified the code which allocates the storage for the entrynames in a
     directory to check the number of names. If the names are <0 or greater
     than the calculated limit, the program will report the directory as having
     a problem.  Before this fix the dumper would try to allocate very large
     amounts of storage and blow up.
     
     Changed to use actual file storage for contents names vs allocated
     storage and then assignment.
     
     Changed to use pathname_ and expand_pathname_$add_suffix instead of
     an internal routine.
     
     Changed to check for available space in the .contents_names segment
     instead of using an out_of_bounds condition.
     
     Changed error messages to be more descriptive and fit within 80 chars.
  2) change(86-12-01,GWMay), approve(86-12-01,PBF7445), audit(86-12-01,GDixon),
     install(86-12-09,MR12.0-1238):
     moved call to msf_manager_$adjust after the call to msf_manager_$get_ptr.
     removed calls to terminate_file_ which msf_manager_$adjust was intended
     to replace.
  3) change(89-01-06,GWMay), approve(89-01-06,MCR8039), audit(89-01-09,Farley),
     install(89-01-17,MR12.3-1002):
     Changed to call msf_mgr_$adjust to correctly set the size of the
     <volname>.contents_names segments.
  4) change(89-08-31,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-12,MR12.3-1092):
     Added support for version 3 backup_volume_log.incl.pl1 structures.
     Initialized new structure values backup_volume_log.Nsaved_(cons
     incr)_sets.
  5) change(89-10-18,GWMay), approve(89-10-18,PBF1089),
     audit(89-10-18,Beattie), install(89-10-18,MR12.3-1094):	
     Fix bug where the values of the new variables were not copied to the
     new log.
                                                   END HISTORY COMMENTS */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

dmpr_log_: proc;

/* This routine provides all the record keeping functions that the volume dumper subsystem requires. It creates
   in use, and the prev output log. In addition this routine creates and updates the contents segment one of
   which exists for each dump volume and the account segment, one of which exists for each dump volume.  The volume log
   contains a record of all dump volumes that contain information taken from that physical volume, the times during
   which the dump volume was written, and some statistics about what was written. The output volume log contains
   a record  of each physical volume written on this  dump volume and a count of how many times it was done.
   The prev volume log contains a record of the last/previous dump volumes that have been written. The contents segment
   contains a uid of every object that was written on a dump volume. The volume log is used by the
   volume reloader and retriever to determine which dump volumes should be read to recover the data. The
   output log is used by the dumper to protect dump volumes from destruction while they still have useful
   information on them. The contents segment is used by the volume retriever to save time by searching the online
   contents segment rather then having to search the dump volume. */
/* Modified:  11/16/81 by GA Texada to not lock the volume log in open_volume_log
	    if the previous volume log wasn't closed before returning.
   Modified:  11/24/81 by GAT to not make a "names" seg unless -names was 
	    specified.
   Modified:  04/05/83 by GA Texada to add a trace capability.
   Modified:  04/84 by GA Texada for version 2 volume logs.

*/
dcl Lall_entry_names     fixed bin (21);
dcl Pall_entry_names     ptr;
dcl all_entry_names	     char (Lall_entry_names) based (Pall_entry_names);
dcl accountp	     ptr;
dcl bit_count	     fixed bin (24);
dcl code		     fixed bin (35);
dcl counted_number_of_entries
		     fixed bin;
dcl counted_number_of_entry_names
		     fixed bin;
dcl dname		     char (168);
dcl ename		     char (32);
dcl found		     bit (1);
dcl i		     fixed bin;
dcl pname		     char (168);
dcl stored_number_of_entry_names
		     fixed bin;
dcl uid_path	     (0:16) bit (36);

dcl account_dir	     char (168) static init (">system_control_1>volume_backup_accounts") options (constant);
dcl dump_idx	     fixed bin int static init (-1);
dcl lock_wait_time	     fixed bin static init (60) options (constant);
dcl max_entry_names	     fixed bin internal static;
dcl max_dir_entries	     fixed bin internal static;
dcl myname	     char (32) static init ("dmpr_log_") options (constant);
dcl set_bc_n_truncate    bit (3) int static init ("110"b) options (constant);
dcl truncate_only	     bit (3) int static init ("010"b) options (constant);

dcl out_of_bounds	     condition;

dcl (addr, bin, clock, divide, fixed, hbound, lbound, length,
  null, ptr, unspec, rel, rtrim, size, substr)
		     builtin;

dcl 1 add_key	     aligned,
    2 flags,
    ( 3 input_key	     bit (1),
      3 input_desc	     bit (1),
      3 mbz	     bit (34)) unal,
    2 desc,
    ( 3 type	     fixed bin (2),
      3 records	     fixed bin (9),
      3 mbz1	     bit (23)) unal,
    2 key_len	     fixed bin,
    2 key		     char (68);

dcl error_table_$action_not_performed ext fixed bin (35);
dcl error_table_$bad_dir fixed bin (35) ext static;
dcl error_table_$bad_index fixed bin (35) ext static;
dcl error_table_$bad_segment fixed bin (35) ext;
dcl error_table_$bad_volid ext fixed bin (35);
dcl error_table_$invalid_lock_reset ext fixed bin (35);
dcl error_table_$namedup fixed bin (35) external;
dcl error_table_$noentry ext fixed bin (35);

dcl sys_info$default_dir_max_length fixed bin (17) ext static;

dcl adjust_bit_count_    entry (char (*), char (*), bit (1), fixed bin, fixed bin (35));
dcl dmpr_report_$online_output entry options (variable);
dcl dmpr_report_$error_output entry options (variable);
dcl expand_pathname_     entry (char (*), char (*), char (*), fixed bin (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl hcs_$chname	     entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl hcs_$make_seg	     entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl hcs_$truncate_seg    entry (ptr, fixed bin, fixed bin (35));
dcl ioa_$rsnnl	     entry options (variable);
dcl iox_$attach_ioname   entry (char (*), ptr, char (*), fixed bin (35));
dcl iox_$close	     entry (ptr, fixed bin (35));
dcl iox_$control	     entry (ptr, char (*), ptr, fixed bin (35));
dcl iox_$detach_iocb     entry (ptr, fixed bin (35));
dcl iox_$open	     entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl msf_manager_$adjust  entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl msf_manager_$close   entry (ptr);
dcl msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin, fixed bin (35));
dcl msf_manager_$open    entry (char (*), char (*), ptr, fixed bin (35));
dcl pathname_	     entry (char (*), char (*)) returns (char (168));
dcl set_lock_$lock	     entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl set_lock_$unlock     entry (bit (36) aligned, fixed bin (35));
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


create_pvolog: entry (a_volname, code);

dcl a_volname	     char (*);

/* This entry creates the output log , and if successful initializes it */

    code = 0;
    dmpr_data_.pvlp = null;
    dname = "";
    ename = "";
    pname = "";

    pname = rtrim (dmpr_data_.sys_dir) || ">pvolog";
    pname = pathname_ (pname, a_volname);
    call expand_pathname_$add_suffix (pname, "pvolog", dname, ename, code);
    if code ^= 0 then goto log_err;

    pname = pathname_ (dname, ename);
    call hcs_$make_seg (dname, ename, "", 01010b, pvlp, code);
    if code ^= 0 then do;
log_err: call dmpr_report_$error_output (code, myname,
	   "Error creating: ^/^a^/reason",
	   pname);
        code = error_table_$bad_volid;
        return;
      end;

    pvolog.version = pvolog_version_1;
    pvolog.dump_type = dmpr_data_.dump_type;
    pvolog.volid = dmpr_data_.volid;
    pvolog.mount_time = clock;

    dmpr_data_.pvlp = pvlp;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


update_pvolog: entry (code);

/* This entry adds a physical volume name to an output log, if not there already, and increases the usage count
   associated with that physical volume name by one */

    code = 0;
    pvlp = dmpr_data_.pvlp;

    call lock_pvolog;
    if code ^= 0 then return;

    found = "0"b;
    do i = 1 to pvolog.next while (^found);
      pvlep = addr (pvolog.array (i));
      if pvle.pvname = dmpr_data_.pvname then do;
	found = "1"b;
	pvle.invocation_count = pvle.invocation_count + 1;
        end;
    end;
    if ^found then do;
        pvolog.next = pvolog.next + 1;
        pvolog.in_use = pvolog.in_use + 1;
        pvlep = addr (pvolog.array (pvolog.next));
        pvle.invocation_count = 1;
        pvle.pvname = dmpr_data_.pvname;
      end;
    call unlock_pvolog;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


log_object: entry (code);

/* This entry adds the uid of the object to the contents segment and
   the uid pathname of the object to the account segment. */

    code = 0;
    if dmpr_data_.contentsp = null then do;
        code = error_table_$noentry;
        return;
      end;

    contentsp = dmpr_data_.contentsp;
    recordp = dmpr_data_.recordp;

    backup_volume_contents.next = backup_volume_contents.next + 1;
    backup_volume_contents.uid (backup_volume_contents.next) =
         backup_volume_record.uid;
    backup_volume_contents.tape_loc (backup_volume_contents.next) = 0;
    backup_volume_contents.pad1 (backup_volume_contents.next) = "0"b;
    backup_volume_contents.offset (backup_volume_contents.next) = 0;
    backup_volume_contents.component (backup_volume_contents.next) = 0;

    if dmpr_data_.names & backup_volume_record.dirsw then do;

        dp = dmpr_data_.dirp;

        if able_to_count_entry_names () then
	if entry_names_are_ok () then
	  if entry_names_fit_in_contents_seg (Pall_entry_names) then
	    call put_entry_names_in_contents_seg ();
      end;

    if dmpr_data_.accounting then
      call update_accounting_info ();

    if dmpr_data_.trace then
      call dmpr_report_$online_output (0, myname,
	 "Dumping ^12.3b: ^a.",
	 backup_volume_record.uid, convert_puid_ ());

    return;
%page;
/* ************************************************************************* */

able_to_count_entry_names: proc () returns (bit (1) aligned);

/* ************************************************************************* */

    on out_of_bounds begin;
        call dmpr_report_$error_output (error_table_$bad_index, myname,
	   "Due to an out_of_bounds condition,
the names of the entries in the following directory cannot be logged or added
to the contents names segment.
directory uid: ^o
 primary name: ^a
       pvname: ^a
        vtocx: ^o
       reason",
	   dir.uid, backup_volume_record.primary_name,
	   dmpr_data_.pvname, backup_volume_record.vtocx);

        goto exit_count;
      end;

    Lall_entry_names = 0;
    counted_number_of_entry_names = 0;
    counted_number_of_entries = 0;
    stored_number_of_entry_names = 0;

    do ep = ptr (dp, dir.entryfrp) repeat ptr (ep, entry.efrp) while
         (rel (ep) ^= "0"b & counted_number_of_entries <= max_dir_entries);

      stored_number_of_entry_names = stored_number_of_entry_names
	 + entry.nnames;
      counted_number_of_entries = counted_number_of_entries + 1;

      do np = ptr (ep, entry.name_frp) repeat ptr (ep, np -> names.fp)
	 while (rel (np) ^= "0"b & counted_number_of_entry_names <= max_entry_names);

        counted_number_of_entry_names = counted_number_of_entry_names + 1;
        Lall_entry_names = Lall_entry_names
	   + length (rtrim (np -> names.name)) + length (">");

      end;
    end;

    Lall_entry_names = Lall_entry_names + length (">");
    return ("1"b);

exit_count:
    return ("0"b);

  end able_to_count_entry_names;
%page;
/* ************************************************************************* */

entry_names_are_ok: proc () returns (bit (1) aligned);

/* ************************************************************************* */

dcl Serror	     bit (1) aligned;

    Serror = "1"b;

    if stored_number_of_entry_names ^= counted_number_of_entry_names
    then do;
        call dmpr_report_$error_output (error_table_$bad_dir, myname,
	   "The actual number of entry names in the directory does not match
the number of entry names stored in the directory entries.
counted: ^d   stored: ^d
directory uid: ^o
 primary name: ^a
       pvname: ^a
        vtocx: ^o
       reason",
	   counted_number_of_entry_names, stored_number_of_entry_names,
	   dir.uid, backup_volume_record.primary_name,
	   dmpr_data_.pvname, backup_volume_record.vtocx);
        Serror = "0"b;
      end;

    if stored_number_of_entry_names < 0
         | stored_number_of_entry_names > max_entry_names then do;

        call dmpr_report_$error_output (error_table_$bad_dir, myname,
	   "The total number of names referenced by directory entries is
negative or exceeds the maximum number of names a directory will hold.
         value: ^d
 directory uid: ^o
  primary name: ^a
        pvname: ^a
         vtocx: ^o
        reason",
	   stored_number_of_entry_names, dir.uid,
	   backup_volume_record.primary_name, dmpr_data_.pvname,
	   backup_volume_record.vtocx);
        Serror = "0"b;
      end;
    return (Serror);
  end entry_names_are_ok;
%page;
/* ************************************************************************* */

entry_names_fit_in_contents_seg: proc (Pentry_name_storage)
       returns (bit (1) aligned);

/* ************************************************************************* */

dcl Pentry_name_storage  ptr,
  return_bit	     bit (1) aligned;

dcl next_word_offset     fixed bin (19);

dcl sys_info$max_seg_size fixed bin (35) ext static;

    Pentry_name_storage = null;
    return_bit = "0"b;
    next_word_offset = 0;
    contents_namesp = dmpr_data_.contents_namesp;

    next_word_offset = backup_volume_contents_names.offset
         + divide (Lall_entry_names + (CHARS_PER_WORD - 1),
         CHARS_PER_WORD, 18, 0);

    if next_word_offset > sys_info$max_seg_size then do;
        bit_count = backup_volume_contents_names.offset * BITS_PER_WORD;
        call msf_manager_$adjust (dmpr_data_.fcbp, dmpr_data_.component,
	   bit_count, set_bc_n_truncate, code);

        if code ^= 0 then do;
	  dmpr_data_.names = "0"b;
	  call dmpr_report_$online_output (code, dmpr_data_.myname,
	       "Unable to truncate component in multisegment file:
^a>contents>^a.contents,
Attempting to truncate and set bit count for component ^d.
Names collection turned OFF.^/reason",
	       dmpr_data_.sys_dir, dmpr_data_.volname,
	       dmpr_data_.component);
	  return ("0"b);
	end;

        dmpr_data_.component = dmpr_data_.component + 1;
        call msf_manager_$get_ptr (dmpr_data_.fcbp, dmpr_data_.component,
	   "1"b, contents_namesp, 0, code);

        if code ^= 0 then do;
	  dmpr_data_.names = "0"b;
	  call dmpr_report_$online_output (code, dmpr_data_.myname,
	       "Unable to get next component in multisegment file:
^a>contents>^a.contents,
Attempting to get component ^d. Names collection turned OFF.^/reason",
	       dmpr_data_.sys_dir, dmpr_data_.volname,
	       dmpr_data_.component);
	  return ("0"b);
	end;

        else do;
	  dmpr_data_.contents_namesp = contents_namesp;
	  backup_volume_contents_names.version =
	       backup_volume_contents_version_3;
	  backup_volume_contents_names.offset =
	       bin (rel (addr (backup_volume_contents_names.begin)));
	  backup_volume_contents_names.pad (*) = "0"b;

	  next_word_offset = backup_volume_contents_names.offset
	       + divide (Lall_entry_names + (CHARS_PER_WORD - 1),
	       CHARS_PER_WORD, 18, 0);
	end;
      end;

    Pentry_name_storage =
         ptr (contents_namesp, backup_volume_contents_names.offset);

    backup_volume_contents.offset (backup_volume_contents.next) =
         backup_volume_contents_names.offset;

    backup_volume_contents.component (backup_volume_contents.next) =
         dmpr_data_.component;

    backup_volume_contents_names.offset = next_word_offset;

    return ("1"b);
  end entry_names_fit_in_contents_seg;
%page;
/* ************************************************************************* */

put_entry_names_in_contents_seg: proc ();

/* ************************************************************************* */

dcl Lcurrent_name	     fixed bin,
  current_position	     fixed bin;

    Lcurrent_name = 0;
    all_entry_names = "";
    current_position = 1;

    do ep = ptr (dp, dir.entryfrp) repeat ptr (ep, entry.efrp)
         while (rel (ep) ^= "0"b);

      do np = ptr (ep, entry.name_frp)
	 repeat ptr (ep, np -> names.fp) while (rel (np) ^= "0"b);

        Lcurrent_name = length (rtrim (np -> names.name));
        substr (all_entry_names, current_position, Lcurrent_name)
	   = substr (np -> names.name, 1, Lcurrent_name);

        current_position = current_position + Lcurrent_name;
        Lcurrent_name = length (">");
        substr (all_entry_names, current_position, Lcurrent_name) = ">";

        current_position = current_position + Lcurrent_name;
      end;
    end;

    Lcurrent_name = length (">");
    substr (all_entry_names, current_position, Lcurrent_name) = ">";
    return;

  end put_entry_names_in_contents_seg;
%page;
/* ************************************************************************* */

update_accounting_info: proc ();

/* ************************************************************************* */

    do i = lbound (backup_volume_record.uid_path, 1) to
         hbound (backup_volume_record.uid_path, 1)
         while (backup_volume_record.uid_path (i) ^= "0"b);

      uid_path (i) = backup_volume_record.uid_path (i);
    end;
    i = i + 1;
    uid_path (i) = backup_volume_record.uid;
    add_key.input_key = "1"b;
    add_key.input_desc = "1"b;
    add_key.key_len = i * 4;
    unspec (add_key.key) = unspec (uid_path);
    add_key.records = fixed (backup_volume_record.records, 9);
    add_key.type = dmpr_data_.dump_type;
    call iox_$control (dmpr_data_.account_iocbp, "add_key", addr (add_key),
         code);
    if code ^= 0 then
      call dmpr_report_$error_output (code, myname,
	 "Error adding key to account file:^/^a>^a.account^/reason",
	 account_dir, dmpr_data_.volname);

    return;
  end update_accounting_info;

/*  end dmpr_log_$log_object */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


close_account_file: entry (code);

/* This entry closes down an account file */

    if dmpr_data_.account_iocbp = null then return;
    call iox_$close (dmpr_data_.account_iocbp, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, myname,
	   "Unable to close account file:^/^a>^a^/reason",
	   account_dir, dmpr_data_.volname);
        return;
      end;
    call iox_$detach_iocb (dmpr_data_.account_iocbp, code);
    if code ^= 0 then
      call dmpr_report_$error_output (code, myname,
	 "Unable to detach account file:^/^a>^a^/reason",
	 account_dir, dmpr_data_.volname);
    dmpr_data_.account_iocbp = null;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init_account_file: entry (code);

/* This entry creates the account segment in a specified directory and if successful initializes it and
   sets a pointer to in static. */

    code = 0;
    dname = "";
    ename = "";
    pname = "";

    pname = pathname_ (account_dir, (dmpr_data_.volname));
    call expand_pathname_$add_suffix (pname, "account", dname, ename, code);
    if code ^= 0 then goto acct_err;

    pname = pathname_ (dname, ename);
retry_acc: call hcs_$make_seg (dname, ename, "", 01010b, accountp, code);
    if code ^= 0 then do;
        if code = error_table_$namedup then do;
	  call rename_account_file (dname, ename, ename, 1, code);
	  if code = 0 then goto retry_acc;
	end;
acct_err: call dmpr_report_$error_output (code, myname,
	   "Error creating:^/^a^/reason",
	   pname);
        return;
      end;

    call iox_$attach_ioname ("account_file", dmpr_data_.account_iocbp,
         "vfile_ " || rtrim (pname) || " -dup_ok", code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, myname,
	   "Error attaching account file:^/^a^/reason",
	   pname);
        return;
      end;
    call iox_$open (dmpr_data_.account_iocbp, Direct_update, "0"b, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, myname,
	   "Error opening account file:^/^a^/reason",
	   pname);
        return;
      end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


open_volume_log: entry (code);

/* This entry creates a volume log entry. It also takes care to close off any old entries
   which this entries superceeds. This must be done as the volume retriever will not use an entry that
   is not closed. If it were to do so the first entry it would use would be the volume presently mounted.  This,
   of course restricts the volume dumper such that now two dumper processes should dump the same physical volume
   in the same mode of operation */

    code = 0;
    if dump_idx ^= -1 then return;			/* two updates without a close */
    bvlp = dmpr_data_.bvlp;

    call lock_volume_log;				/* protect against two updates */
    if code ^= 0 then return;


    do i = backup_volume_log.next to 1 by -1;
      bvlep = addr (backup_volume_log.array (i));
      if bvle.close_time = 0 & bvle.dump_type = dmpr_data_.dump_type then do;
	bvle.close_time = clock;
	if dmpr_data_.restart_pvname ^= "" then
	  dmpr_data_.cycle_uid = bvle.cycle_uid;
        end;
    end;

    backup_volume_log.next = backup_volume_log.next + 1;
    backup_volume_log.rpv_pvid = dmpr_data_.rpv_pvid;
    dump_idx = backup_volume_log.next;
    bvlep = addr (backup_volume_log.array (dump_idx));

    bvle.dump_type = dmpr_data_.dump_type;		/* update new record */
    bvle.volid = dmpr_data_.volid;
    bvle.volname = dmpr_data_.volname;
    bvle.open_time = clock;
    bvle.cycle_uid = dmpr_data_.cycle_uid;
    bvle.close_time = 0;
    bvle.io_module = dmpr_data_.io_module;
    bvle.dir_num, bvle.dir_rec = -1;
    bvle.seg_num, bvle.seg_rec = -1;
    dmpr_data_.vol_log_dir_num = 0;
    dmpr_data_.vol_log_dir_rec = 0;
    dmpr_data_.vol_log_seg_num = 0;
    dmpr_data_.vol_log_seg_rec = 0;
open_ret:
    call unlock_volume_log;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


close_volume_log: entry (code);

/* This entry closes a volume log entry. The internal static variable dump_indx is used in attemp to remenber
   what entry was in use, but it must be checked as a purge of the volume log can shift entries. If things have moved
   a linear search is made for the previous entry. In either case the entry is closed. */

    code = 0;
    if dump_idx = -1 then return;			/* its closed already */

    bvlp = dmpr_data_.bvlp;

    call lock_volume_log;
    if code ^= 0 then return;

    bvlep = addr (backup_volume_log.array (dump_idx));

    if (bvle.volname = dmpr_data_.volname
         & bvle.dump_type = dmpr_data_.dump_type
         & bvle.cycle_uid = dmpr_data_.cycle_uid
         & bvle.close_time = 0) then ;
    else do;
        do dump_idx = 1 to backup_volume_log.next;	/* it may have moved */
	bvlep = addr (backup_volume_log.array (dump_idx));
	if (bvle.volname = dmpr_data_.volname
	     & bvle.dump_type = dmpr_data_.dump_type
	     & bvle.cycle_uid = dmpr_data_.cycle_uid
	     & bvle.close_time = 0) then goto close_log_entry;
        end;
        code = error_table_$action_not_performed;
        call dmpr_report_$error_output (code, myname,
	   "Unable to close:^/^a.volog^/reason",
	   dmpr_data_.pvname);
        goto reset_log_data;
      end;
close_log_entry:
    bvle.close_time = clock;
    bvle.dir_num = dmpr_data_.vol_log_dir_num;
    bvle.dir_rec = dmpr_data_.vol_log_dir_rec;
    bvle.seg_num = dmpr_data_.vol_log_seg_num;
    bvle.seg_rec = dmpr_data_.vol_log_seg_rec;
reset_log_data:
    dmpr_data_.vol_log_dir_num = 0;
    dmpr_data_.vol_log_dir_rec = 0;
    dmpr_data_.vol_log_seg_num = 0;
    dmpr_data_.vol_log_seg_rec = 0;
    call set_bc (bvlp);
    call unlock_volume_log;
    dump_idx = -1;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init_contents_seg: entry (code);

/* This entry create a contents segment and, if successful, initializes it. Note that since contents are written
   out they must contain a logical record header. */

    code = 0;

    dname = "";
    ename = "";
    pname = "";

    pname = rtrim (dmpr_data_.sys_dir) || ">contents";
    pname = pathname_ (pname, (dmpr_data_.volname));
    call expand_pathname_$add_suffix (pname, "contents", dname, ename, code);
    if code ^= 0 then goto cont_err;

    pname = pathname_ (dname, ename);
    call hcs_$make_seg (dname, ename, "", 01010b, contentsp, code);
    if contentsp ^= null then do;
        call hcs_$truncate_seg (contentsp, 0, code);
        if code ^= 0 then do;
	  call dmpr_report_$error_output (code, myname,
	       "Unable to truncate:^/^a^/reason",
	       pname);
	  code = 0;
	  return;
	end;
      end;
    else do;
cont_err: call dmpr_report_$error_output (code, myname,
	   "Error creating:^/^a^/reason",
	   pname);
        return;
      end;
    call init_header (contentsp, contents_type);
    dmpr_data_.contentsp = contentsp;
    backup_volume_contents.version = backup_volume_contents_version_3;
    backup_volume_contents.volname = dmpr_data_.volname;
    backup_volume_contents.volid = dmpr_data_.volid;
    backup_volume_contents.next = 0;
    backup_volume_contents.pad (*) = "0"b;

    if dmpr_data_.names then do;
        if dmpr_data_.contents_namesp ^= null then do;
	  bit_count = backup_volume_contents_names.offset * BITS_PER_WORD;
	  call msf_manager_$adjust (dmpr_data_.fcbp, dmpr_data_.component,
	       bit_count, set_bc_n_truncate, code);
	  call msf_manager_$close (dmpr_data_.fcbp);
	end;

        dmpr_data_.fcbp = null;
        dmpr_data_.contents_namesp = null;
        pname = rtrim (dmpr_data_.sys_dir) || ">contents>" ||
	   rtrim (dmpr_data_.volname) || ".contents_names";

        call expand_pathname_ (pname, dname, ename, code);

        if code ^= 0 then do;
name_err:	  dmpr_data_.names = "0"b;
	  call dmpr_report_$error_output (code, myname,
	       "Error creating:^/^a^/- names collection aborted.^/reason",
	       pname);
	  return;
	end;
        dmpr_data_.component = 0;
        call msf_manager_$open (dname, ename, dmpr_data_.fcbp, code);
        if code ^= 0 & code ^= error_table_$noentry then do;
	  call dmpr_report_$error_output (code, myname,
	       "Unable to open:^/^a^/- names collection aborted.^/reason",
	       pname);
	  dmpr_data_.names = "0"b;
	  code = 0;
	  return;
	end;
        call msf_manager_$get_ptr (dmpr_data_.fcbp, dmpr_data_.component, "1"b, contents_namesp, 0, code);
        if code ^= 0 then go to name_err;

        call msf_manager_$adjust (dmpr_data_.fcbp, dmpr_data_.component, 0, truncate_only, code);

        dmpr_data_.contents_namesp = contents_namesp;
        backup_volume_contents_names.version = backup_volume_contents_version_3;
        backup_volume_contents_names.offset =
	   bin (rel (addr (backup_volume_contents_names.begin)));
        backup_volume_contents_names.pad (*) = "0"b;

        max_entry_names = divide (sys_info$default_dir_max_length - size (dir)
	   - size (entry), size (names), 17);

        max_dir_entries = divide (sys_info$default_dir_max_length - size (dir),
	   size (entry), 17);
      end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init_volume_log: entry (code);

/* This entry locates the volume log. If one does not exist it is created and initialized. Note that since volume
   logs are written out they must have a logical record header. */

    code = 0;
    dmpr_data_.bvlp = null;
    dname = "";
    ename = "";
    pname = "";
    pname = pathname_ ((dmpr_data_.sys_dir), (dmpr_data_.pvname));
    call expand_pathname_$add_suffix (pname, "volog", dname, ename, code);
    if code ^= 0 then goto vol_err;

    pname = pathname_ (dname, ename);
    call hcs_$make_seg (dname, ename, "", 01010b, bvlp, code);
    if code = 0 then do;
        call dmpr_report_$online_output (0, myname,
	   "new volume log created:^/^a",
	   pname);
        backup_volume_log.pvname = dmpr_data_.pvname;
        backup_volume_log.pvid = dmpr_data_.pvid;
        backup_volume_log.reload_groups = 2;		/* default value */
        backup_volume_log.version = backup_volume_log_version_3;
        backup_volume_log.disk_type = dmpr_data_.disk_type;
        backup_volume_log.rpv_pvid = dmpr_data_.rpv_pvid;
        backup_volume_log.Nsaved_cons_sets = -1;
        backup_volume_log.Nsaved_incr_sets = -1;
      end;
    else if bvlp ^= null then do;
        code = 0;
        if (backup_volume_log.pvname = dmpr_data_.pvname
	   & backup_volume_log.pvid = dmpr_data_.pvid) then do;
	  if backup_volume_log.version = backup_volume_log_version_1 |
	     backup_volume_log.version = backup_volume_log_version_2 |
	     backup_volume_log.version = backup_volume_log_version_3 then do;
	     backup_volume_log.version = backup_volume_log_version_3;
	     backup_volume_log.disk_type = dmpr_data_.disk_type;
	     backup_volume_log.rpv_pvid = dmpr_data_.rpv_pvid;
	     end;
	  else goto invalid_volog;
	end;
        else do;
invalid_volog: code = error_table_$bad_segment;
	  call dmpr_report_$error_output (code, myname,
	       "Invalid ^a.volog^/reason",
	       dmpr_data_.pvname);
	  return;
	end;
      end;
    else do;
vol_err: call dmpr_report_$error_output (code, myname,
	   "Error getting ptr to:^/^a^/reason",
	   pname);
        return;
      end;

    if backup_volume_log.pattern1 ^= pattern1
         | backup_volume_log.pattern2 ^= pattern2
         | backup_volume_log.pattern3 ^= pattern3 then
      call init_header (bvlp, volume_log_type);
    dmpr_data_.bvlp = bvlp;
    return;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


/* The following six internal proc lock and unlock the various logs. They are all very similar except
   that they deal with different logs. They all assume that the local pointer has been set from its static
   value.  */

lock_pvolog: proc;
    call set_lock_$lock (pvolog.lock, lock_wait_time, code);
    if code ^= 0 then do;
        if code = error_table_$invalid_lock_reset then code = 0;
        else call dmpr_report_$error_output (code, myname,
	        "Unable to lock ^a.pvolog^/reason",
	        dmpr_data_.volname);
      end;
    return;

  end lock_pvolog;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


unlock_pvolog: proc;
    call set_lock_$unlock (pvolog.lock, code);
    if code ^= 0 then
      call dmpr_report_$error_output (code, myname,
	 "Error unlocking ^a.pvolog^/reason",
	 dmpr_data_.volname);
    return;

  end unlock_pvolog;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


lock_volume_log: proc;
    call set_lock_$lock (backup_volume_log.lock, lock_wait_time, code);
    if code ^= 0 then do;
        if code = error_table_$invalid_lock_reset then code = 0;
        else call dmpr_report_$error_output (code, myname,
	        "Unable to lock ^a.volog^/reason",
	        dmpr_data_.pvname);
      end;
    return;

  end lock_volume_log;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


unlock_volume_log: proc;
    call set_lock_$unlock (backup_volume_log.lock, code);
    if code ^= 0 then
      call dmpr_report_$error_output (code, myname,
	 "Error unlocking ^a.volog^/reason",
	 dmpr_data_.pvname);
    return;

  end unlock_volume_log;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init_header: proc (tp, type);

/* This proc initializes the logical volume header that is a part of all objects, except segments
   and directories, which it preceeds, which are written out. */

dcl tp		     ptr;
dcl type		     fixed bin;

    tp -> backup_volume_log.pattern1 = pattern1;
    tp -> backup_volume_log.pattern2 = pattern2;
    tp -> backup_volume_log.pattern3 = pattern3;

    tp -> backup_volume_log.rec1_type = type;
    tp -> backup_volume_log.rec2_len = 0;
    tp -> backup_volume_log.rec2_type = null_type;
    return;

  end init_header;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


set_bc: proc (p);
dcl p		     ptr;
dcl dn		     char (168);
dcl en		     char (32);
dcl ldn		     fixed bin;
    call hcs_$fs_get_path_name (p, dn, ldn, en, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, myname,
	   "Unable to convert ptr to pathname for bit count setting^/reason");
        code = 0;
        return;
      end;
    call adjust_bit_count_ (dn, en, "0"b, (0), code);
    if code ^= 0 then
      call dmpr_report_$error_output (code, myname,
	 "Unable to set bit count of ^a>^a^/reason",
	 dn, en);
    code = 0;
  end set_bc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


rename_account_file: proc (dn, prefix, en, a_suffix, ec);

/* This proc recursively renames account segs with a numeric suffix utile a namedup is not encountered. This
   preserves the account segs in reverse numeric order for later processing. */

dcl dn		     char (*);
dcl prefix	     char (*);
dcl en		     char (*);
dcl new_en	     char (32);
dcl suffix	     fixed bin;
dcl a_suffix	     fixed bin;
dcl ec		     fixed bin (35);
    suffix = a_suffix;
    call ioa_$rsnnl ("^a.^d", new_en, (0), prefix, suffix);
retry_rn: call hcs_$chname (dn, en, en, new_en, ec);
    if ec = error_table_$namedup then do;
        call rename_account_file (dn, prefix, new_en, suffix + 1, ec);
        if ec = 0 then goto retry_rn;
      end;

  end rename_account_file;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/* This proc is used to convert a unique id pathname to an ascii pathname  */

convert_puid_: proc returns (char (168));

dcl (dn, ret_dn)	     char (168);
dcl en		     char (32);
dcl ec		     fixed bin (35);
dcl seg_fault_error	     condition;
dcl error_table_$root    ext fixed bin (35);
dcl hc_backup_$decode_uidpath entry options (variable);
    on seg_fault_error goto ret_unk;

    call hc_backup_$decode_uidpath (backup_volume_record.uid_path, dn, en, ec);
    if ec = error_table_$root then ;
    else if ec ^= 0 then
ret_unk: return ("UNKNOWN_PATH>" || rtrim (backup_volume_record.primary_name, "  "));
    call ioa_$rsnnl ("^a^[>^]^[^a>^;^s^]^a", ret_dn, (0), dn, dn ^= ">", en ^= "", en, backup_volume_record.primary_name);
    return (ret_dn);
  end convert_puid_;
%page;
%include backup_static_variables;
%page;
%include backup_volume_contents;
%page;
%include backup_volume_header;
%page;
%include backup_volume_record;
%page;
%include backup_volume_log;
%page;
%include backup_pvol_info;
%page;
%include dir_header;
%page;
%include dir_name;
%page;
%include dir_entry;
%page;
%include dmpr_data_;
%page;
%include fs_vol_label;
%page;
%include iox_modes;
%page;
%include pvolog;
%page;
%include system_constants;
%page;
%include vtoce;
  end dmpr_log_;
