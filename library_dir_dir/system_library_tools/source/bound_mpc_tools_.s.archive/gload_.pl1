/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Initially coded March 1978 by J. A. Bush
   Modified July 1978 by J. A. Bush to add checksum capability
   Modified March 1979 by J. A. Bush to process octal and hex patch cards
   Modified August 1981 by J. A. Bush to load object decks produced by 355map
   Modified June 1983 by G. C. Dixon to add $allow_zero_checksums entrypoint. */


/****^  HISTORY COMMENTS:
  1) change(86-10-13,Fakoury), approve(86-10-29,MCR7565),
     audit(86-11-24,Parisek), install(86-12-01,MR12.0-1229):
     Modified to correct errors in patch code.
                                                   END HISTORY COMMENTS */



/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
gload_: proc (deck_ptr, a_load_ptr, a_ld_offset, info_ptr, code);

dcl  caller char (*);				/* naming of calling program used in warnings. */
dcl  dir char (*);					/* dir/ent of firmware file being loaded. */
dcl  ent char (*);
dcl  deck_ptr ptr;					/* pointer to gcos ssf object deck */
dcl  a_load_ptr ptr;				/* pointer to segment in which to load core image */
dcl  a_ld_offset fixed bin (18);			/* relocation offset */
dcl  info_ptr ptr;					/* ptr to load_data structure */
dcl  code fixed bin (35);				/* standard status code */

dcl  core_ptr ptr;					/* pointer to core image during loading */
dcl  (ldp, load_ptr) ptr;
dcl  accum bit (36);				/* checksum accumulator */
dcl  allow_zero_checksums bit (1);			/* "1"b => zero checksums are allowed in decks. */
						/* The 0 is replaced by computed checksum. */
dcl  fnp_sw bit (1);				/* "1"b => the fnp entry was called */
dcl  (load_len, ld_offset, dlen) fixed bin (18);		/* words loaded by loader */
dcl  (preface, obj_flag, eof, first_reloc, first_abs, tmr, two_wd) bit (1); /* flags */
dcl  (i, j, k, l, m, n) fixed bin;			/* do loop counters */
dcl  blk_len fixed bin;				/* physical block length counter */
dcl  cbsn fixed bin;				/* current block serial number */
dcl  lst_ld_entry fixed bin;				/* last entry in load table */
dcl  lx fixed bin;					/* load_table index */
dcl  vcb fixed bin;					/* v count bit index */
dcl  last_seq fixed bin;				/* last sequence number */
dcl  last_assigned fixed bin (18);			/* last assigned address in relocatable deck */
dcl  final fixed bin (18);				/* final address for relocation */
dcl  symref_vec fixed bin (18);			/* symref vector location */
dcl  blank_common fixed bin (18);			/* address of blank common, if present */
dcl  blank_common_len fixed bin (18);			/* length of blank common */
dcl  lcwp ptr;					/* pointer to loader control word */
dcl  cptr ptr;					/* pointer to card image */
dcl  idbp ptr;					/* pointer to mpc deck id block */
dcl  p_ptr ptr;					/* patch card ptr */
dcl  obj_buf char (80);				/* char buffer for $ object card */
dcl  card_buf char (80);				/* char buffer for patch card */
dcl  mpc_checksum bit (16);
dcl  dk_rev char (6);
dcl  (pa, tp, mpcp (2)) bit (36);
dcl  (fw_low, fw_high, ovl, a_cnt) fixed bin;
dcl  mem_name char (14);
dcl  data_move char (l) unaligned based;		/* to move data as a character string */
dcl  fnp_seg (0:262143) bit (18) unaligned based (load_ptr);
dcl  ld_wd bit (36) based (core_ptr);
dcl  halfs (2) fixed bin (18) unsigned unaligned based (ldp);
dcl  p_word (2) fixed bin (18) unsigned unaligned based (p_ptr);
dcl  error_table_$fatal_error fixed bin (35) ext;
dcl  (addr, addrel, bin, bit, char, currentsize, fixed, index, length,
     ltrim, mod, ptr, rel, rtrim, search, substr, unspec) builtin;

dcl  1 spec_halfs (2) unaligned based (ldp),
       2 sign bit (1),				/* relocation sign bit */
       2 rindex bit (vcb),				/* relocation index in load table */
       2 addend bit (17 - vcb);			/* relative addend */

dcl  1 ld_table aligned,				/* load table */
         (2 ld_entry (256),				/* array of entries */
         3 ld_offset fixed bin (18),			/* program offset */
         3 pad1 bit (13),
         3 ld_type fixed bin (3)) unaligned;		/* symbol type */

dcl  bcd_to_ascii_ entry (bit (*), char (*));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  gload_cksum_ entry (ptr, fixed bin (18), bit (36));

dcl  1 preface_card based (cptr) aligned,		/* relocatable preface card format */
         (2 cw like lcw,				/* close enough to use */
       2 checksum bit (36),				/* checksum of columns 1-3 and 7-72 */
       2 blk_cmn_len fixed bin (18) unsigned,		/* length of blank common */
       2 mb8 bit (1),				/* if on, program should be loaded mod 8 */
       2 cob_68 bit (1),				/* if on, program is a cobol 68 deck */
       2 reserved bit (1),				/* reserved for future use */
       2 sym_x2 bit (15),				/* 2 times the number of symbols */
       2 sym_pair (10),				/* symbol definitions */
         3 bcd_sym bit (36),				/* 6 char bcd symbol name */
         3 sym_pos fixed bin (18) unsigned,		/* relative position of sym within sub pgm */
         3 mod8 bit (1),				/* if set, blk comn is set to next mod8 loc */
         3 sym_ref_ptr bit (14),			/* ptr to card  and block for symref */
         3 sym_type fixed bin (3) unsigned) unaligned;	/* symbol type */

dcl  1 reloc_card based (cptr) aligned,			/* relocatable binary card format */
       2 cw like lcw unaligned,			/* loader control word goes here */
       2 checksum bit (36),				/* checksum of columns 1-3 and 7-72 */
       2 reloc_data (3) unaligned,			/* relocation data */
         3 rloc (7),				/* relocation identifiers */
	 4 reserved bit (1),
	 4 hwds (2) fixed bin (2) unsigned,		/* relocation for each half word */
         3 mbz bit (1),
       2 data (0:18) bit (36);			/* data words */

dcl  1 abs_card based (cptr) aligned,			/* absolute binary card format */
       2 cw like lcw unaligned,			/* loader control word goes here */
       2 checksum bit (36),				/* checksum of columns 1-3 and 7-72 */
       2 data (0:22) bit (36);			/* data words */

dcl  1 bin_card based (cptr) aligned,			/* any binary card */
       (2 data (rcw.rsize - 3) bit (36),		/* all words but seq number */
       2 edit_name (4) bit (12),			/* bcd data read in binary mode */
       2 sn (4),					/* 4 sequence numbers */
         3 pad1 bit (2),
         3 seq_num bit (10),				/* bcd seq number  read in bin mode */
       2 pad2 bit (12)) unaligned;

dcl  1 fnp_card based (cptr) unaligned,			/* FNP binary card format */
       2 cw like lcw,				/* loader control word goes here */
       2 checksum bit (36),				/* checksum of columns 1-3 and 7-72 */
       2 data (0:44) bit (18);			/* data words */

dcl  1 lcw unaligned based (lcwp),			/* template for loader control word */
       (2 type fixed bin (3),				/* 1 = abs, 2 = reloc, 0 = xfer, 4 = preface */
       2 rel_sym fixed bin (6),			/* if reloc, symbol to which card to be loaded */
       2 mb5 fixed bin (3),				/* must be 5 for binary card */
       2 count fixed bin (6),				/* count of data words on this card */
       2 l_addr fixed bin (18)) unsigned;		/* load address */

dcl  1 o_card based (addr (obj_buf)) aligned,		/* template for an object card */
       (2 pad1 char (15),
       2 library char (6),				/* col 16 - either "hmpcj1" or "htnd  " */
       2 ld_type char (1),				/* col 22, module type */
       2 ss_type char (1),				/* col 23, subsystem type */
       2 pad2 char (3),
       2 m_applic char (1),				/* Multics applicability, non blank means not applicable */
       2 pad3 char (15),
       2 model char (6),				/* for hmpcj1 decks, controller model # */
       2 version char (6),				/* for hmpcj1 decks, model version # */
       2 pad4 char (5),
       2 assem char (1),				/* "m" for mpc assembler, "g" for gmap */
       2 call_name char (6),				/* module call name, or gecall name */
       2 ttl_date char (6),				/* date module assembled */
       2 edit_name char (4)) unaligned;			/* module edit name */

dcl  1 o_patch based (addr (card_buf)) aligned,		/* template for octal patch card */
       (2 add char (6),				/* patch address */
       2 blk1 char (1),
       2 octal char (5),				/* either "octal" or "mask " */
       2 blk2 char (3),
       2 p_fld char (57),				/* variable filed (patch data) */
       2 lbl char (4)) unaligned;			/* edit name */


dcl  1 h_patch based (addr (card_buf)) aligned,		/* template for hex patch card */
       (2 h_add char (6),				/* (c1) hex patch address */
       2 cr char (1),				/* (c7) = "c" for cs, "r" for r/w mem */
       2 hex char (3),				/* (c8) = "hex" for hex patch */
       2 pad1 char (5),
       2 inst (2) char (4),				/* (c16) 2 - 4 hex digit instructions */
       2 pad2 char (23),
       2 rev char (6),				/* (c48) should equal word 2 of deck id block */
       2 pad3 char (20),
       2 lbl char (4)) unaligned;			/* (c75) = deck edit name */

dcl  1 id_blk based (idbp) aligned,			/* template for ident block */
       (2 ident bit (36),				/* module identification */
       2 revision,
         3 rev_dot bit (24),				/* char string "rev." */
         3 rev bit (12),				/* alpa-numeric revision */
       2 type_code bit (18),				/* module type (itr, mdr or firmware) */
       2 pad1 bit (18),
       2 dk_purpose bit (24),
       2 pad2 bit (12),
       2 rw_start fixed bin (18) unsigned,		/* offset of read/write overlay */
       2 pad3 bit (18),
       2 hx_cs_st fixed bin (18) unsigned,		/* rel. start of control store in hex words */
       2 hx_rw_st fixed bin (18) unsigned,		/* rel. start of read/write overlay in hex words */
       2 pad4 bit (108),
       2 mpcbot bit (36)) unaligned;			/* = "MPCBOT" */

dcl  1 p_array aligned,				/* storage for parsed patch cards */
       2 patches (20),				/* 20 patches possible */
         (3 rloc (2) bit (1),				/* relocation for both halfs */
         3 ppad bit (34),
         3 ul (2) bit (18)) unaligned;			/* upper and lower half */

dcl  1 fw based (load_ptr),				/* A memory overlay */
       2 fw_word (fw_low:fw_high) unal,
         3 fill1 bit (1) unal,
         3 byte1 bit (8) unal,
         3 fill2 bit (1) unal,
         3 byte2 bit (8) unal;

dcl  btp (2) bit (18) unaligned based (addr (tp));
dcl  1 load_data based (info_ptr) like gload_data aligned;	/* pertinent info  generated from loader */

dcl  bcd_obj bit (78) int static options (constant) init
      ("53202020202020462241252363"b3);			/* "$      object" in bcd */
dcl  bcd_dkend bit (72) int static options (constant) init
      ("532020202020202442254524"b3);			/* "$      dkend" in bcd */
dcl  (max_abs_wds init (22),
     max_reloc_wds init (19),
     max_fnp_wds init (44)) fixed bin int static options (constant);
%page;
      allow_zero_checksums = "0"b;
      go to COMMON;

allow_zero_checksums:
   entry (caller, dir, ent, deck_ptr, a_load_ptr, a_ld_offset, info_ptr, code);

      allow_zero_checksums = "1"b;

COMMON: ld_offset = a_ld_offset;			/* copy load offset */
      load_ptr = a_load_ptr;				/* copy load ptr */
      preface, obj_flag, eof, first_reloc, first_abs = "0"b;/* initialize some things */
      load_data.deck_name, load_data.diagnostic = "";
      load_data.sym_cnt = 0;
      load_data.deck_type, load_data.text_len = "0"b;
      code, load_len, symref_vec, last_seq = 0;
      prptr = deck_ptr;				/* set first block pointer */
      cbsn = bcw.bsn;				/* load block serial number counter */

      do while (^eof);				/* iterate through entire deck */
         lrptr = addr (gc_phy_rec.gc_phy_rec_data (1));	/* get pointer to first logical record */
         blk_len = 0;				/* initialize block length counter */
         do while (blk_len < bcw.blk_size);
	  if rcw.media_code = 2 then do;		/* bcd card image */
	     if substr (gc_log_rec_bits, 1, 78) = bcd_obj then do; /* object card */
	        call bcd_to_ascii_ (gc_log_rec_bits, obj_buf); /* convert to ascii */
	        obj_flag = "1"b;
	        load_data.deck_name = o_card.edit_name;	/* set name for user */
	        call CK_TD_LOAD;			/* go add in relocation (if required) */
	     end;
	     else if substr (gc_log_rec_bits, 1, 72) = bcd_dkend then /* dkend card */
	        eof = "1"b;				/* set flag to get out */
	     else do;				/* must be patch card or bad bcd card */
	        call CK_PATCH;			/* go check if valid patch */
	        if code ^= 0 then return;		/* not valid patch, quit now */
	     end;
	  end;
	  else if rcw.media_code = 1 then do;		/* bin card image */
	     cptr = addr (gc_log_rec.gc_log_rec_data);	/* set card pointer */
	     if ^obj_flag then do;			/* we must have object card first */
	        code = error_table_$fatal_error;	/* cards out of sequence */
	        call ioa_$rsnnl ("Binary card at ^p, appears before $ object card",
	         load_data.diagnostic, i, cptr);
	        return;
	     end;
	     if reloc_card.mb5 ^= 5 then do;		/* not column binary card */
	        code = error_table_$fatal_error;
	        call ioa_$rsnnl ("Card type - ^12.3b at ^p, is not a column binary card",
	         load_data.diagnostic, i, cptr -> ld_wd, cptr);
	        return;
	     end;
	     if reloc_card.type > 4 then do;		/* illegal card type */
	        code = error_table_$fatal_error;
	        call ioa_$rsnnl ("Card type - ^12.3b at ^p, is not a loadable binary card",
	         load_data.diagnostic, i, cptr -> ld_wd, cptr);
	        return;
	     end;
	     j = 0;
	     do i = 1 to 4;				/* 4 digits of seq number */
	        j = j * 10 + (index (bin_card.seq_num (i), "1"b) - 1);
	     end;
	     if j ^= last_seq + 1 then do;		/* seq num error */
	        code = error_table_$fatal_error;
	        call ioa_$rsnnl ("Binary card sequence error at ^p. Sequence number is ^d; S/B ^d",
	         load_data.diagnostic, i, cptr, j, last_seq + 1);
	        return;
	     end;
	     last_seq = j;
	     if abs_card.type ^= 0 then		/* if not absolute xfer card */
	        if CKSUM_CARD () then return;		/* if checksum error return with error */
	     if fnp_sw then
	        call DO_FNP;			/* go load fnp deck */
	     else if preface_card.type = 4 then		/* preface card */
	        call DO_PREFACE;
	     else if abs_card.type < 2 then		/* absolute card */
	        call DO_ABS;
	     else if reloc_card.type < 4 then		/* relocatable card */
	        call DO_RELOC;

	     else do;
	        code = error_table_$fatal_error;	/* unrecognizeable card type */
	        call ioa_$rsnnl ("Card type - ^12.3b at ^p, is not recognizable by loader",
	         load_data.diagnostic, i, cptr -> ld_wd, cptr);
	     end;
	     if code ^= 0 then return;		/* must have had error */
	  end;
	  else if rcw.media_code = 0 & rcw.file_mark = 15 then eof = "1"b; /* if eof */
	  else do;				/* card type we do not process */
	     code = error_table_$fatal_error;		/* illegal type */
	     call ioa_$rsnnl ("Logical record media code - ^o at ^p, is not processed by loader",
	      load_data.diagnostic, i, rcw.media_code, lrptr);
	     return;
	  end;
	  blk_len = blk_len + rcw.rsize + 1;		/* increment running block length */
	  lrptr = addrel (lrptr, currentsize (gc_log_rec)); /* set next logical record */
         end;
         if ^eof then do;				/* if we haven't reached last block */
	  prptr = addrel (prptr, bcw.blk_size + 1);	/* set phy rcd ptr to nxt word */
	  if bcw.bsn = 0 then			/* if nxt blk not appended... */
	     prptr = ptr (prptr, bin (rel (prptr)) + (320 - mod (bin (rel (prptr)), 320)));
	  if bcw.bsn ^= cbsn + 1 then do;		/* block serial number error */
	     code = error_table_$fatal_error;
	     call ioa_$rsnnl ("Block serial number error at ^p. Block serial number is ^o; S/B ^o",
	      load_data.diagnostic, i, prptr, bcw.bsn, cbsn + 1);
	     return;
	  end;
	  cbsn = cbsn + 1;				/* increment current block serial number */
         end;
      end;
      dlen = load_len;				/* save loaded length */
      if preface then				/* if relocatable */
         load_len = last_assigned;			/* offset already added in */
      else load_len = load_len + ld_offset;
      load_data.text_len = bit (load_len);		/* set length for user */
      accum = "0"b;					/* initialize checksum accumulator */
      call gload_cksum_ (load_ptr, dlen, accum);		/* calculate deck checksum */
      load_data.checksum = accum;			/* and save for user */

%page;

/* DO_RELOC - internal procedure to process relocatable binary cards */

DO_RELOC: proc;

      if ^first_reloc then do;
         first_reloc = "1"b;
         if ^preface then do;				/* must have preface card first */
	  code = error_table_$fatal_error;		/* no preface card */
	  call ioa_$rsnnl ("Relocatable text card at ^p, appears before preface card",
	   load_data.diagnostic, i, cptr);
	  return;
         end;
         if blank_common_len ^= 0 then do;		/* we have blank common to assign */
	  blank_common = last_assigned;		/* set address of blank common */
	  last_assigned = last_assigned + blank_common_len; /* set last address */
         end;
         lst_ld_entry = lx;				/* set last load table entry */
      end;
      lcwp = addr (reloc_card.cw);			/* set initial control word ptr */
      a_cnt = lcw.count;				/* load control word count */
      l, m, n = 0;					/* start at first data word */
      tmr, two_wd = "0"b;				/* reset flags */
      if lcw.rel_sym ^= 0 | lcw.type = 3 then do;		/* do we have an addend? */
         call ADD_COMMON;				/* yes */
         if code ^= 0 then return;			/* return if some problem */
      end;
      else core_ptr = addrel (load_ptr, lcw.l_addr);
      ldp = addr (reloc_card.data (m));			/* set address of first data word */
      do i = 1 to 3 while (^tmr);			/* relocate each word */
         do j = 1 to 7 while (^tmr);
	  if unspec (reloc_data (i).rloc (j)) = "0"b then /* if no relocation this word */
	     ld_wd = ldp -> ld_wd;			/* move the whole thing as is */
	  else do k = 1 to 2;			/* relocate each half */
	     go to reloc (reloc_data (i).rloc (j).hwds (k));
reloc (0):					/* absolute, copy as is */
	     core_ptr -> halfs (k) = halfs (k);
	     go to reloc_end;
reloc (1):					/* relocate relative to load address */
	     core_ptr -> halfs (k) = halfs (k) + ld_offset;
	     go to reloc_end;
reloc (2):					/* relocate relative to beginning of blank common */
	     core_ptr -> halfs (k) = halfs (k) + blank_common;
	     go to reloc_end;
reloc (3):					/* special relocation */
	     lx = fixed (rindex (k), 7);		/* form load table index */
	     if ld_entry (lx).ld_type ^= 5 then do;	/* if not symref */
	        if fixed (addend (k), 12) ^= -1 then	/* if we do not have to use next word */
		 if ^sign (k) then			/* and not minus */
		    final = ld_entry (lx).ld_offset + fixed (addend (k), 12);
		 else final = ld_entry (lx).ld_offset - fixed (addend (k), 12);
	        else do;				/* Must use the nxt word */
		 two_wd = "1"b;
		 if ^sign (k) then			/* if positive number */
		    final = ld_entry (lx).ld_offset + addrel (ldp, 1) -> halfs (k);
		 else final = ld_entry (lx).ld_offset - addrel (ldp, 1) -> halfs (k);
	        end;
	        core_ptr -> halfs (k) = final;		/* set in load area */
	     end;
	     else do;				/* sym ref, set up mme gebort */
	        if symref_vec = 0 then do;		/* if we havn't set up vector yet */
		 symref_vec = last_assigned;		/* set it now */
		 last_assigned = last_assigned + 2;	/* add vector to total length */
		 ptr (load_ptr, symref_vec) -> ld_wd =	/* set first word in vector */
		  "004301236007"b3;			/* to ldq =hol1,dl */
		 ptr (load_ptr, symref_vec + 1) -> ld_wd = /* set up second word */
		  "000010001000"b3;			/* to mme gebort */
	        end;
	        if k = 1 then do;			/* if upper half reloc */
		 core_ptr -> halfs (1) = symref_vec;	/* set up a tsx7 to */
		 core_ptr -> halfs (2) = bin ("707000"b3, 18); /* symref_vector */
		 k = 2;				/* set k so we don't come back */
	        end;
	        else core_ptr -> halfs (k) = symref_vec;	/* if lower set address of vector */
	        if fixed (addend (k), 12) = -1 then	/* if two word entry */
		 two_wd = "1"b;			/* skip second word */
	     end;
reloc_end:
	  end;
	  core_ptr = addrel (core_ptr, 1);
	  ldp = addrel (ldp, 1);			/* increment deck ptr */
	  m = m + 1;
	  if two_wd then do;			/* if two word addend */
	     two_wd = "0"b;				/* reset flag */
	     ldp = addrel (ldp, 1);			/* skip next word */
	     m = m + 1;
	  end;
	  if m = a_cnt then do;			/* control word exhausted? */
	     l = l + lcw.count + n;			/* increment total load count */
	     if l = max_reloc_wds then tmr = "1"b;	/* if max length card */
	     else if (l < max_reloc_wds & reloc_card.data (l) = "0"b) then
	        tmr = "1"b;				/* if no more control words */
	     else do;				/* more control words + data */
	        lcwp = addr (reloc_card.data (l));	/* set control word ptr */
	        a_cnt = lcw.count;			/* load control word count */
	        m = 0;				/* reset load index */
	        n = 1;				/* set control word skip */
	        if lcw.rel_sym ^= 0 | lcw.type = 3 then do; /* do we have an addend? */
		 call ADD_COMMON;			/* yes */
		 if code ^= 0 then return;		/* return if some problem */
	        end;
	        else core_ptr = addrel (load_ptr, lcw.l_addr);
	        ldp = addrel (ldp, 1);		/* increment load ptr past control word */
	     end;
	  end;

         end;
      end;

   end DO_RELOC;

%page;

/* DO_PREFACE - internal procedure to process binary preface cards */

DO_PREFACE: proc;

      if ^preface then do;				/* if we haven't been here already */
         vcb = preface_card.rel_sym;			/* set vcb index */
         if preface_card.mb8 then			/* if pgm to be loaded mod 8 */
	  if mod (ld_offset, 8) ^= 0 then		/* and if not already mod 8 */
	     ld_offset = ld_offset + (8 - mod (ld_offset, 8));
         load_len = preface_card.l_addr;
         last_assigned = load_len + ld_offset;		/* set initial value */
         lx = 0;					/* initialize load table index */
         blank_common_len = preface_card.blk_cmn_len;	/* save blank common length */
         load_data.deck_type = "1"b;			/* relocatable deck */
         preface = "1"b;
      end;
      do i = 1 to (preface_card.count - 1) / 2 while (bcd_sym (i) ^= "0"b);
         call bcd_to_ascii_ (bcd_sym (i), load_data.definition (i + load_data.sym_cnt).symbol);
         j, load_data.definition (i + load_data.sym_cnt).sym_type = sym_pair (i).sym_type; /* set symbol type */
         if j = 0 | j = 1 then do;			/* symdefs */
	  final = sym_pair (i).sym_pos + ld_offset;	/* add in offset */
	  load_data.definition (i + load_data.sym_cnt).offset = bit (final);
         end;
         else if j = 3 then
	  load_data.definition (i + load_data.sym_cnt).offset = bit (sym_pair (i).sym_pos, 18);
         else if j ^= 2 then do;			/* Must be common or symref, if not cobol seg  */
	  lx = lx + 1;				/* increment load table index */
	  ld_entry (lx).ld_type = j;			/* set symbol type in load table */
	  if j ^= 5 then do;			/* if not symref */
	     if sym_pair (i).mod8 then		/* if mod 8 required */
	        if mod (last_assigned, 8) ^= 0 then	/* set it mod 8 if necessary */
		 last_assigned = last_assigned + (8 - mod (last_assigned, 8));
	     ld_entry (lx).ld_offset = last_assigned;	/* set address in load table */
	     load_data.definition (i + load_data.sym_cnt).offset = bit (ld_entry (lx).ld_offset);
	     last_assigned = last_assigned + sym_pair (i).sym_pos;
	  end;
	  else load_data.definition (i + load_data.sym_cnt).offset = "0"b;
         end;
      end;
      load_data.sym_cnt = load_data.sym_cnt + (i - 1);	/* set new load_data.sym_cnt */

   end DO_PREFACE;

%page;

/* DO_ABS - internal procedure to process absolute binary cards */

DO_ABS: proc;

      lcwp = addr (abs_card.cw);			/* set initial control word ptr */
      go to absc (lcw.type);				/* process proper card type */

absc (0):						/* absolute binary xfer card */

      load_data.definition (1).symbol = "xfer  ";		/* set symbol and xfer */
      load_data.definition (1).offset = bit (lcw.l_addr, 18); /* address for user */
      load_data.sym_cnt = 1;				/* set symbol count for user */
      return;

absc (1):						/* absolute binary text card */
      if ^first_abs then do;				/* if first time through */
         first_abs = "1"b;
         ld_offset = lcw.l_addr;			/* set offset from zero */
      end;
      m = 0;					/* start with first data word */
      tmr = "0"b;
      do while (^tmr);				/* do while there is more data */
         ldp = addr (abs_card.data (m));		/* set load address */
         core_ptr = addrel (load_ptr, lcw.l_addr);	/* set core address */
         l = lcw.count * 4;				/* generate character count */
         core_ptr -> data_move = ldp -> data_move;	/* move the data */
         load_len = load_len + lcw.count;		/* increment loaded length */
         m = m + lcw.count;				/* increment total count, this card */
         if m = max_abs_wds then tmr = "1"b;		/* if max length card */
         else if (m < max_abs_wds & abs_card.data (m) = "0"b) then
	  tmr = "1"b;				/* if no more control wds */
         else do;					/* more control wds + data */
	  lcwp = addr (abs_card.data (m));		/* set control word ptr */
	  m = m + 1;				/* increment data word index */
         end;
      end;
      return;

   end DO_ABS;
%page;

/* DO_FNP - internal subroutine to load object decks generated by the 355map assembler */

DO_FNP: proc;

      lcwp = addr (fnp_card.cw);			/* set initial control word ptr */
      go to fnpc (lcw.type);				/* process proper card type */

fnpc (0):						/* absolute binary xfer card */
      load_data.definition (1).symbol = "xfer  ";		/* set symbol and xfer */
      load_data.definition (1).offset = bit (lcw.l_addr, 18); /* address for user */
      load_data.sym_cnt = 1;				/* set symbol count for user */
      return;

fnpc (1):						/* absolute binary text card */
      m = 0;					/* set word index */
      core_ptr = addr (fnp_seg (lcw.l_addr));		/* set ptr to move */
      if ^first_abs | fnp_seg (lcw.l_addr) = "000000"b3 then do;
         l = 4;
         if ^first_abs then
	  core_ptr -> data_move = o_card.edit_name;	/* move the data */
         first_abs = "1"b;
      end;
      core_ptr = addrel (core_ptr, 1);			/* set ptr to move */
      go to fnp_com;				/* and go to common code */

fnpc (2):						/* relocatable binary text card */
      m = 5;					/* set word index to ignore relocation */
      core_ptr = addr (fnp_seg (lcw.l_addr + ld_offset));	/* set ptr to move */

fnp_com:						/* common to type 1 and 2 text cards */
      tmr = "0"b;
      do while (^tmr);				/* do while there is more data */
         ldp = addr (fnp_card.data (m));		/* move ptr to nxt data field */
         l = lcw.count * 2;				/* generate character count */
         load_len = load_len + lcw.count;		/* increment loaded length */
         core_ptr -> data_move = ldp -> data_move;	/* move the data */
         m = m + lcw.count;				/* increment total count, this card */
         if m = max_fnp_wds then tmr = "1"b;		/* if max length card */
         else if (m < max_fnp_wds & fnp_card.data (m) = "0"b) then
	  tmr = "1"b;				/* if no more control wds */
         else do;
	  lcwp = addr (fnp_card.data (m));		/* set new control word ptr */
	  m = m + 2;				/* adjust index for control word */
         end;
      end;
      return;


fnpc (4):						/*  preface card */
      preface, load_data.deck_type = "1"b;		/* relocatable deck */
      last_assigned = preface_card.l_addr + ld_offset;	/* set length */
      return;					/* thats all for now */

   end DO_FNP;
%page;

/* ADD_COMMON - internal subroutine to add in common symbol reference from preface card */

ADD_COMMON: proc;

      lx = lcw.rel_sym;
      if lcw.type = 3 then				/* if we must */
         lx = lx + 64;
      if lx > lst_ld_entry then do;			/* OH OH */
         code = error_table_$fatal_error;		/* more symbols than we have */
         call ioa_$rsnnl ("Card type ^12.3b at ^p refs. symbol # ^d, but only ^d symbols are defined",
	load_data.diagnostic, i, lcwp -> ld_wd, lcwp, lx, lst_ld_entry);
      end;
      else core_ptr = addrel (load_ptr, ld_entry (lx).ld_offset + lcw.l_addr); /* set core ptr */

   end ADD_COMMON;

/* CKSUM_CARD - internal procedure to compute and check checksum on a binary card */

CKSUM_CARD: proc returns (bit (1));

      accum = bin_card.data (1);			/* add in first word */
      call gload_cksum_ (addrel (cptr, 2), 22, accum);	/* add in rest of card - cksum word and last word */
      if accum ^= reloc_card.checksum then do;
         if allow_zero_checksums & reloc_card.checksum = "0"b then do;
	  call ioa_ ("^a: ZERO checksum at ^p; Checksum S/B ^12.3b.
Loading ^a>^a.  Checksum will be adjusted.",
	   caller, cptr, accum, dir, ent);
	  reloc_card.checksum = accum;
	  return ("0"b);
         end;
         else do;
	  code = error_table_$fatal_error;		/* if checksum error */
	  call ioa_$rsnnl ("Checksum error at ^p. Checksum is ^12.3b; S/B ^12.3b.",
	   load_data.diagnostic, i, cptr, reloc_card.checksum, accum);
	  return ("1"b);				/* return error */
         end;
      end;
      else return ("0"b);				/* checksum ok */

   end CKSUM_CARD;

%page;

/* CK_TD_LOAD - internal procedure to special case "hmpcj1" and "htnd" library decks */

CK_TD_LOAD: proc;

      if o_card.assem = " " then do;			/* if this is true, it is a 355map deck */
         fnp_sw = "1"b;				/* set indicator switch */
         return;					/* thats all we need here */
      end;
      else fnp_sw = "0"b;
      if o_card.library = "hmpcj1" | o_card.library = "htnd  " then do;
         if o_card.ld_type = "d" then			/* if data deck */
	  ld_offset = 0;				/* no relocation, load in place */
         else if o_card.ld_type = "p" then do;		/* if program deck */
	  ld_offset = 72;				/* offset 110 oct */
	  load_ptr = addrel (load_ptr, 72);		/* load at offset 110 */
         end;
         else if o_card.ld_type = "r" then do;		/* if relocatable deck */
	  load_ptr = addrel (load_ptr, 72);		/* add 110 offset */
	  ld_offset = fixed (rel (load_ptr), 18) - ld_offset; /* and subtract base */
         end;
      end;
      else load_ptr = addrel (load_ptr, ld_offset);	/* if not special case, addin  ld offset */

   end CK_TD_LOAD;


/* CK_PATCH - internal procedure to check a bcd card image for a ligit patch card */

CK_PATCH: proc;

      call bcd_to_ascii_ (gc_log_rec_bits, card_buf);	/* convert to ascii */
      if o_patch.octal = "octal" | o_patch.octal = "mask " then /* if octal patch card */
         call O_PATCH;				/* go process it */
      else if h_patch.hex = "hex" then			/* if hex patch card */
         call H_PATCH;				/* go process it */
      else do;					/* unrecognized bcd card image */
         code = error_table_$fatal_error;		/* Illegal bcd card */
         call ioa_$rsnnl ("Bcd card at ^p, is not $ object, $ dkend, or valid patch - ""^a""",
	load_data.diagnostic, i, addrel (lrptr, 1), card_buf);
      end;

   end CK_PATCH;

%page;

/* O_PATCH - internal procedure to process octal and mask octal patch cards */

O_PATCH: proc;

      if o_patch.lbl ^= o_card.edit_name then		/* edit names don't agree */
         call PATCH_ERR ("octal", "edit name does not agree with edit name from $ object card");
      else if ^CV_AB (8, o_patch.add, pa) then		/* if error in address */
         call PATCH_ERR ("octal", "error converting octal address");
      if code ^= 0 then return;			/* if error already */
      p_ptr = addrel (load_ptr, bin (pa, 18));		/* set patch address */
      l = 1;					/* set scan position to 1 */
      tmr = "0"b;					/* reset terminate condition */
      do i = 1 to 20 while (^tmr);			/* get patches into patch array */
         patches (i).rloc (1), patches (i).rloc (2) = "0"b;
         if substr (o_patch.p_fld, l, 1) = "r" then do;	/* if left half relocation */
	  patches (i).rloc (1) = "1"b;		/* set relocation indicator */
	  l = l + 1;				/* update field position */
         end;
         else if index ("01234567", substr (o_patch.p_fld, l, 1)) = 0 then do;
	  call PATCH_ERR ("octal", "illegal relocation indicator in octal patch " || char (i));
	  return;
         end;
         j = search (substr (o_patch.p_fld, l), ", ");	/* search for comma or blank */
         k = j - 1;					/* set  to field length */
         if substr (o_patch.p_fld, l + k, 1) = " " | l + j >= length (o_patch.p_fld) then
	  tmr = "1"b;				/* if at end of patch field */
         if substr (o_patch.p_fld, l + k - 1, 1) = "r" then do; /* if right half relocation */
	  patches (i).rloc (2) = "1"b;		/* set relocation indicator */
	  k = k - 1;				/* subtract 1 from fild length */
         end;
         else if index ("01234567", substr (o_patch.p_fld, l + k - 1, 1)) = 0 then do;
	  call PATCH_ERR ("octal", "illegal relocation indicator in octal patch " || char (i));
	  return;
         end;
         if ^CV_AB (8, substr (o_patch.p_fld, l, k), tp) then do;
	  call PATCH_ERR ("octal", "error converting octal patch " || char (i));
	  return;
         end;
         patches (i).ul (*) = btp;			/* copy patch data */
         l = l + k + 1;				/* update string start */
      end;
      do j = 1 to i - 1;				/* now do the patching */
         do k = 1 to 2;				/* apply patch to each half word */
	  if patches (j).rloc (k) then		/* if relocation this half... */
	     p_word (k) = bin (patches (j).ul (k), 18) + ld_offset; /* add in relocation */
	  else p_word (k) = bin (patches (j).ul (k), 18); /* otherwise just use value as is */
         end;
         p_ptr = addrel (p_ptr, 1);			/* increment to next word */
      end;

   end O_PATCH;

%page;

/* H_PATCH - internal procedure to process hexadecimal patch cards for mpc decks */

H_PATCH: proc;

      idbp = ptr (load_ptr, last_assigned - 10);		/* set ptr to id blk */
      call bcd_to_ascii_ (bit (id_blk.revision.rev), dk_rev); /* convert rev to ascii */

/* do some consistancy checks on the hex patch card */

      if h_patch.cr ^= "c" & h_patch.cr ^= "r" then	/* if not for control store of r/w mem */
         call PATCH_ERR ("hex", "collum 7 must be ""c"" or ""r""");
      else if o_card.assem ^= "m" then			/* if not assembled by mpc assembler */
         call PATCH_ERR ("hex", "object deck to be patched not produced with mpc assembler");
      else if h_patch.lbl ^= o_card.edit_name then	/* edit names don't agree */
         call PATCH_ERR ("hex", "edit name does not agree with edit name from $ object card");
      else if h_patch.rev ^= dk_rev then		/* revisions don't agree */
         call PATCH_ERR ("hex", "revision does not agree with revision from ident block");
      else if h_patch.cr = "r" & id_blk.rw_start = 0 then	/* no r/w memory overlay */
         call PATCH_ERR ("hex", "r/w memory overlay non existant");
      else if ^CV_AB (16, h_patch.h_add, pa) then		/* error converting address */
         call PATCH_ERR ("hex", "error converting hex address");
      else if substr (unspec (pa), 36, 1) & h_patch.inst (2) ^= "" then /* odd add and 2 patches */
         call PATCH_ERR ("hex", "only one patch allowed for odd address");
      else if ^CV_AB (16, h_patch.inst (1), mpcp (1)) then
         call PATCH_ERR ("hex", "error converting first hex patch");
      else if h_patch.inst (2) ^= "" then		/* if 2nd inst exists */
         if ^CV_AB (16, h_patch.inst (2), mpcp (2)) then	/* error converting 2nd inst */
	  call PATCH_ERR ("hex", "error converting second hex patch");
      if code ^= 0 then return;			/* if error already return */
      if h_patch.cr = "r" then do;			/* if patching r/w memory */
         fw_low = id_blk.hx_rw_st;			/* set diminsion limits */
         ovl = last_assigned - id_blk.rw_start - 10;
         mem_name = "read/write";
      end;
      else do;					/* patching control store */
         fw_low = id_blk.hx_cs_st;			/* set diminsion limits */
         if id_blk.rw_start = 0 then			/* if no r/w mem overlay */
	  ovl = last_assigned - 10;
         else ovl = id_blk.rw_start;
         mem_name = "control store";
      end;
      fw_high = fw_low + 2 * ovl - 1;			/* compute high range in 16 bit words */
      if bin (pa, 18) < fw_low | bin (pa, 18) > fw_high - 2 | /* check patch card range */
       (h_patch.inst (2) ^= "" & bin (pa, 18) + 1 > fw_high - 2) then do;
         code = error_table_$fatal_error;		/* set error code */
         call ioa_$rsnnl ("Hex patch address(s) not within ^a memory range of ^.4b to ^.4b^/""^a""",
	load_data.diagnostic, i, mem_name, bit (bin (fw_low, 16), 16),
	bit (bin (fw_high - 2, 16), 16), card_buf);
         return;
      end;
      call MPC_CHECKSUM;				/* compute initial checksum */
      if GET_WORD (fw_high - 1) ^= mpc_checksum then do;	/* error in initial mpc_checksum */
         code = error_table_$fatal_error;
         call ioa_$rsnnl ("Checksum error detected in ^a memory before hex patch at ^p applied",
	load_data.diagnostic, i, mem_name, addrel (lrptr, 1));
         return;
      end;

/* now apply the patches */

      do i = 1 to 2 while (h_patch.inst (i) ^= "");
         j = bin (pa, 18) - 1 + i;
         call PUT_WORD (j, bit (bin (mpcp (i), 16), 16));
      end;
      call MPC_CHECKSUM;				/* compute new mpc_checksum */
      call PUT_WORD (fw_high - 1, mpc_checksum);		/* and store */

   end H_PATCH;

%page;

/* PATCH_ERR - subroutine to set diagnostic for patch card error */

PATCH_ERR: proc (type, mess);

dcl  (type, mess) char (*);

      code = error_table_$fatal_error;			/* set error code */
      call ioa_$rsnnl ("Error in ^a patch card at ^p: ^a.^/""^a""", load_data.diagnostic, i,
       type, addrel (lrptr, 1), mess, card_buf);

   end PATCH_ERR;

/* CV_AB - function to convert ascii characters to binary */

CV_AB: proc (base, ain, cv) returns (bit (1));

dcl  ain char (*);
dcl  cv bit (36);
dcl  v fixed bin (36);
dcl  (base, i, j) fixed bin;
dcl  aw char (32);

      v = 0;					/* initialize bin number */
      aw = "";					/* initialize working storage */
      aw = ltrim (ain);				/* strip off leading white space */
      do i = 1 to length (rtrim (aw));
         j = index (substr ("0123456789abcdef", 1, base), substr (aw, i, 1)); /* convert char to bin */
         if j = 0 then return ("0"b);			/* return error */
         v = base * v + j - 1;			/* add in current value */
         if base = 16 then				/* if converting hex */
	  if v > 1111111111111111b then		/* if number not in range 0-FFFF */
	     return ("0"b);
      end;
      cv = bit (v, 36);				/* return converted number */
      return ("1"b);				/* return good */

   end CV_AB;

%page;

/* Procedure that can reconstruct a firmware word */

GET_WORD: proc (i) returns (bit (16));


dcl  i fixed bin;

      return (fw.byte1 (i) || fw.byte2 (i));

   end GET_WORD;

/* Procedure which can store a firmware word */

PUT_WORD: proc (i, new_word);

dcl  i fixed bin;
dcl  new_word bit (16);

      fw.byte1 (i) = substr (new_word, 1, 8);
      fw.byte2 (i) = substr (new_word, 9, 8);
      return;

   end PUT_WORD;

/* Procedure that can compute a mpc_checksum from a mpc memory image */

MPC_CHECKSUM: proc;

dcl  sum fixed bin (35);
dcl  i fixed bin;

      sum = 0;
      do i = fw_low to fw_high - 2;
         sum = sum + bin (GET_WORD (i), 16);
         do while (sum > 1111111111111111b);
	  sum = sum - 10000000000000000b;
	  sum = sum + 1;
         end;
      end;
      sum = -sum;
      mpc_checksum = substr (unspec (sum), 21);		/* Get last 16 bits */
      return;

   end MPC_CHECKSUM;
%page;
%include gload_data;
%include gcos_ssf_records;

   end gload_;
