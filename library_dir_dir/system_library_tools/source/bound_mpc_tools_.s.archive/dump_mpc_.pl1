/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* DUMP_MPC_ - Print Memory Image for MPC.
   coded 7/8/75 by Noel I. Morris       */
/*
   Modified June 1984 by Paul Farley for DAU support, use a pointer
   parameter to reference the MPC memory image and implement duplicate
   output line supression (i.e. "===='s").
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


dump_mpc_:
     proc (image_ptr, sw, mpc_datap, short_sw);

dcl  image_ptr ptr parameter;
dcl  image (0:4095) bit (16) unal based (image_ptr);	/* MPC memory image */
dcl  sw ptr,					/* IOX_ switch for output */
     short_sw bit (1);				/* Switch for short line */

dcl  loc fixed bin (16),				/* current location in trace */
     dt char (24);					/* current date and time */

dcl  sub_image_ptr ptr;				/* pointer to data printed of current line */
dcl  sub_image (16) bit (16) unal based (sub_image_ptr);	/* Portion of data that fits on 1 line */
dcl  eurc_sub_image (32) bit (8) unal based (sub_image_ptr);/* ditto for EURC */
dcl  match_image bit (256) unal based (match_image_ptr);
dcl  check_image bit (256) unal based (check_image_ptr);
dcl  (match_image_ptr, check_image_ptr) ptr;
dcl  (duplicate, displayed_equal) bit (1);
dcl  (line_count, page_count) fixed bin;
dcl  ioa_$ioa_switch entry options (variable);
dcl  date_time_ entry (fixed bin (52), char (*));
dcl  urp_sw bit (1) init ("0"b);
dcl  eurc_addr fixed bin (16) uns;
dcl  dau_addr fixed bin (16) uns;
dcl  (addr, bit, clock, hbound, substr) builtin;

%page;


	call date_time_ (clock (), dt);		/* Get current date and time. */

	if substr (mpc_data.type, 1, 3) = "urp" then urp_sw = "1"b;
	line_count = 56;
	page_count = 0;
	duplicate, displayed_equal = "0"b;
	do loc = 0 to hbound (image, 1) by 16;		/* Iterate through the memory image. */
	     if line_count = 56 then do;		/* Every 56 lines, start a new page. */
		page_count = page_count + 1;
		call ioa_$ioa_switch (sw, "^|^5xDump of ^a controller. ^[FW Rev. ^a^;^s^]^3x^a^2xPage: ^d^/",
		     mpc_data.name, ^urp_sw, mpc_data.fw_rev, dt, page_count);
		line_count = 0;
		end;

/* get pointer to data for current line */
	     sub_image_ptr, check_image_ptr = addr (image (loc));
	     if ^duplicate & loc ^= 0 then match_image_ptr = addr (image (loc - 16));
	     duplicate = "0"b;
	     if loc ^= 0 & loc + 16 < hbound (image, 1)
	     then if match_image = check_image then duplicate = "1"b;
	     if duplicate
	     then if ^displayed_equal
		then if (line_count > 0 & line_count < 55) then do;
			call ioa_$ioa_switch (sw, "====");
			line_count = line_count + 1;
			displayed_equal = "1"b;
			end;
		     else goto display_line;
		else ;
	     else do;
display_line:
		if short_sw
		then call ioa_$ioa_switch (sw, "^4.4b ^8( ^2(^4.4b^)^)", bit (loc, 16), sub_image);
		else call ioa_$ioa_switch (sw, "^4.4b ^2(  ^4( ^2( ^4.4b^)^)^)", bit (loc, 16), sub_image);
		line_count = line_count + 1;
		duplicate, displayed_equal = "0"b;
		end;
	end;
	return;
%page;
dump_mpc_$eurc:
     entry (image_ptr, sw, mpc_datap, short_sw);
dcl  eurc_image (0:3071) bit (16) unal based (image_ptr);


	call date_time_ (clock (), dt);		/* Get current date and time. */

	eurc_addr = 32768;				/* thats 8000Hex */
	line_count = 56;
	page_count = 0;
	duplicate, displayed_equal = "0"b;
	do loc = 0 to hbound (eurc_image, 1) by 16;	/* Iterate through the memory image. */
	     if line_count = 56 then do;		/* Every 56 lines, start a new page. */
		page_count = page_count + 1;
		call ioa_$ioa_switch (sw, "^|^5xDump of ^a controller.^3x^a^2xPage: ^d^/", mpc_data.name, dt,
		     page_count);
		line_count = 0;
		end;

/* get pointer to data for current line */
	     sub_image_ptr, check_image_ptr = addr (eurc_image (loc));
	     if ^duplicate & loc ^= 0 then match_image_ptr = addr (eurc_image (loc - 16));
	     duplicate = "0"b;
	     if loc ^= 0 & loc + 16 < hbound (eurc_image, 1)
	     then if match_image = check_image then duplicate = "1"b;
	     if duplicate
	     then if ^displayed_equal
		then if (line_count > 0 & line_count < 55) then do;
			call ioa_$ioa_switch (sw, "====");
			line_count = line_count + 1;
			displayed_equal = "1"b;
			end;
		     else goto eurc_display;
		else ;
	     else do;
eurc_display:
		if short_sw
		then call ioa_$ioa_switch (sw, "^4.4b ^8( ^4(^2.4b^)^)", bit (eurc_addr, 16), eurc_sub_image);
		else call ioa_$ioa_switch (sw, "^4.4b ^2(  ^8( ^2(^2.4b^)^)^)", bit (eurc_addr, 16), eurc_sub_image);
		line_count = line_count + 1;
		duplicate, displayed_equal = "0"b;
		end;
	     eurc_addr = eurc_addr + 32;
	end;
	return;

%page;
dump_mpc_$dau:
     entry (image_ptr, sw, mpc_datap, short_sw);
dcl  dau_image (0:16383) bit (16) unal based (image_ptr);


	call date_time_ (clock (), dt);		/* Get current date and time. */
	line_count = 56;
	page_count = 0;
	dau_addr = 0;
	duplicate, displayed_equal = "0"b;
	do loc = 0 to hbound (dau_image, 1) by 16;	/* Iterate through the memory image. */
	     if line_count = 56 then do;		/* Every 56 lines, start a new page. */
		page_count = page_count + 1;
		call ioa_$ioa_switch (sw, "^|^5xDump of DAU ^a. FW Rev. ^a, HW Rev. ^2.4b(hex)^3x^a^2xPage: ^d^/",
		     mpc_data.name, mpc_data.fw_rev, mpc_data.dau_rev, dt, page_count);
		line_count = 0;
		end;

/* get pointer to data for current line */
	     sub_image_ptr, check_image_ptr = addr (dau_image (loc));
	     if ^duplicate & loc ^= 0 then match_image_ptr = addr (dau_image (loc - 16));
	     duplicate = "0"b;
	     if loc ^= 0 & loc + 16 < hbound (dau_image, 1)
	     then if match_image = check_image then duplicate = "1"b;
	     if duplicate
	     then if ^displayed_equal
		then if (line_count > 0 & line_count < 55) then do;
			call ioa_$ioa_switch (sw, "====");
			line_count = line_count + 1;
			displayed_equal = "1"b;
			end;
		     else goto dau_display;
		else ;
	     else do;
dau_display:
		if short_sw
		then call ioa_$ioa_switch (sw, "^4.4b ^8( ^2(^4.4b^)^)", bit (dau_addr, 16), sub_image);
		else call ioa_$ioa_switch (sw, "^4.4b ^2(  ^4( ^2( ^4.4b^)^)^)", bit (dau_addr, 16), sub_image);
		line_count = line_count + 1;
		duplicate, displayed_equal = "0"b;
		end;
	     if loc < hbound (dau_image, 1) - 16 then dau_addr = dau_addr + 32;
	end;
	return;

%page;
%include dump_mpc_data;

     end dump_mpc_;
