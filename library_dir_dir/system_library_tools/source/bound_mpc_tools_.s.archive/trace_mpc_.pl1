/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* TRACE_MPC_ - Print Trace Table for MPC.
   coded 7/8/75 by Noel I. Morris       */
/* Modified April 1982 by Rich Coppola to add EURC support and fix some bugs */
/* Modified Oct 1982 by Rich Coppola to correct trace of EURC */
/* Modified Jan 1983 by Rich Coppola to correctly translate MPC specials */
/*
   Modified June 1984 by Paul Farley for DAU support and to use a pointer
   parameter to reference the MPC memory image.
   Modified Halloween 1984 by Paul Farley for enhancments to the DAU trace.
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


trace_mpc_:
     proc (image_ptr, sw, mpc_datap);

dcl  image_ptr ptr parameter;
dcl  image (0:4095) bit (16) unal based (image_ptr);	/* MPC memory image */
dcl  sw ptr;					/* IOX_ switch for output */

dcl  p ptr,					/* Pointer to trace word */
     eurc_trace_ptr ptr,				/* Pointer to EURC trace */
     word bit (16) aligned,				/* Trace word */
     loc fixed bin (16),				/* Current location in trace */
     dt char (24);					/* Current date and time */

dcl  1 mword based (p) aligned,			/* MPC trace word format */
       (
       2 st bit (1),				/* "1"b if status word */
       2 a bit (7),					/* First half info */
       2 type bit (2),				/* Trace word type */
       2 b bit (6)
       ) unal;					/* Second half info */

dcl  1 uword based (p) aligned,			/* URMPC trace word format */
       (
       2 type bit (2),				/* Trace word type */
       2 code bit (6),				/* Info */
       2 device bit (4),				/* Device number */
       2 pad bit (4)
       ) unal;

dcl  1 spec_uword based (p) aligned,
       (
       2 type bit (8),				/* SPECIAL TYPE */
       2 opi bit (4),				/* mux port opi change */
       2 opic bit (4)
       ) unal;					/* mux port opi-C */

dcl  1 eurc_trace (0:15) based (eurc_trace_ptr) unal,
       (
       2 module bit (4),				/* The calling module */
       2 pad1 bit (2),
       2 LCN bit (2),
       2 reason bit (8),
       2 pad2 bit (1),
       2 command bit (3),
       2 major_status bit (4),
       2 pad3 bit (2),
       2 minor_status bit (6),
       2 pad4 bit (2),
       2 chan_status bit (6),
       2 card_state bit (4),
       2 card_substate bit (4),
       2 print_state bit (4),
       2 print_substate bit (4),
       2 iom_state bit (4),
       2 iom_substate bit (4),
       2 tnd_state bit (4),
       2 tnd_substate bit (4),
       2 queue_id bit (4),
       2 link_status bit (4),
       2 pad5 bit (2),
       2 idcw_op bit (6),
       2 pad6 bit (2),
       2 idcw_dev bit (6),
       2 pad7 bit (2),
       2 idcw_add_ext bit (6),
       2 pad8 bit (2),
       2 idcw_flags bit (6),
       2 pad9 bit (2),
       2 idcw_chan_inst bit (6),
       2 pad10 bit (2),
       2 idcw_rec_tly bit (6)
       ) unal;


dcl  ioa_$ioa_switch entry options (variable);
dcl  date_time_ entry (fixed bin (52), char (*));
dcl  urp_sw bit (1) init ("0"b);
dcl  STR char (25) var init ("");
dcl  i fixed bin;
dcl  (addr, clock, substr, bin, bit, fixed, length) builtin;

dcl  mth_spec_type (7) char (15) var int static options (constant)
	init ("REWIND COMPLETE", "UNLOAD COMPLETE", "MTH READY", "MTH in STANDBY", "STANDBY LOADED", "RELEASED",
	"MTH MALFUNCTION");

dcl  urc_svc_codes (0:15) char (45) var int static options (constant)
	init ("PRT WENT FROM HALT TO READY.", "PRINT ONE LINE OR CRZ/CPZ READY.",
	"FWD SPACE ONE LINE OR CRZ/CPZ RELEASED.", "FWD SPACE TO T.O.P.", "INVALID LINE.",
	"OPERATOR KILLED THIS REPORT.", "BACKUP ONE LINE & REPRINT.", "BACKUP ONE PAGE & REPRINT.", "UNDEFINED",
	"UNDEFINED", "UNDEFINED", "UNDEFINED", "UNDEFINED", "TERMINATE THIS CHANNEL PROGRAM.", "UNDEFINED", "UNDEFINED")
	;

dcl  eurc_module (0:15) char (15) var int static options (constant)
	init ("CORE", "UNDEFINED", "PR54", "CARD", "IOM", "PR71", "PR54", "UNDEFINED", "LINK", "UNDEFINED", "UNDEFINED",
	"UNDEFINED", "UNDEFINED", "SCC", "FIRMWARE ERROR", "UNDEFINED");
%page;

	p = addr (word);				/* Get pointer to trace word. */

	call date_time_ (clock (), dt);		/* Get current date and time. */

	if substr (mpc_data.type, 1, 3) = "urp" then urp_sw = "1"b;

	call ioa_$ioa_switch (sw, "^|^5xTrace of ^a controller. ^[FW Rev. ^a^;^s^]^3x^a^/", mpc_data.name, ^urp_sw,
	     mpc_data.fw_rev, dt);


	do loc = mpc_data.trace_start to (mpc_data.trace_start + mpc_data.trace_size - 1);
						/* Iterate through the trace table. */
	     if loc = mpc_data.trace_cur
	     then					/* If at current position of trace ... */
		call ioa_$ioa_switch (sw, "**************************************************");

	     word = image (loc);			/* Get word from trace. */
	     if word = "0"b then go to skip_zeroes;

	     if word = "ffff"b4 then do;
		call ioa_$ioa_switch (sw, "^4.4b^-Unknown trace type (FFFF).");
		go to skip_zeroes;
		end;

	     if mpc_data.type = "urp" then do;		/* If tracing URMPC ... */
		if spec_uword.type = "fe"b4
		then call ioa_$ioa_switch (sw, "^4.4b^-DEVICE POWER CHANGE^-^[OPI CHANGED on MUX PORT=^4b^]", word,
			spec_uword.opic, spec_uword.opic);

		else if spec_uword.type = "ff"b4 then call ioa_$ioa_switch (sw, "^4.4b^-OPI DROPPED", word);

		else if spec_uword.type = "7f"b4 then call ioa_$ioa_switch (sw, "^4.4b^-MPC ERROR INTERRUPT", word);

		else if uword.type = "00"b
		then				/* Type 00 = COMMAND */
		     call ioa_$ioa_switch (sw, "^4.4b^-COMMAND^-OPCODE=^2.3b^2-DEVICE PORT=^4b", word, uword.code,
			uword.device);
		else if uword.type = "01"b
		then				/* Type 01 = STATUS */
		     call ioa_$ioa_switch (sw, "^4.4b^-TERMINATE STATUS^-MAJOR=^2.3b^-DEVICE PORT=^4b^/", word,
			uword.code, uword.device);
		else if uword.type = "10"b
		then				/* Type 10 = SPECIAL */
		     call ioa_$ioa_switch (sw,
			"^4.4b^-SPECIAL INTERRUPT STORED^-LA=^1b,PSI=^1b,LOG-CHAN=^3b,DEVICE PORT=^4b", word,
			substr (uword.code, 2, 1), substr (uword.code, 3, 1), substr (uword.code, 4, 3),
			uword.device);
		else if uword.type = "11"b
		then				/* Type 11 = INTERRUPT */
		     call ioa_$ioa_switch (sw, "^4.4b^-INTERRUPT^-SERVICE CODE=^4b^-DEVICE PORT=^4b^/^-^a", word,
			substr (uword.code, 3), uword.device, urc_svc_codes (bin (substr (uword.code, 3, 4), 4)));
		go to skip_zeroes;
		end;


	     else if ((substr (mpc_data.type, 1, 3) = "mtp") & mpc_data.model = 610) then do;
						/* If MTP610 */
		if mword.st then do;		/* IIW STATUS */
		     if mword.type = "10"b
		     then call ioa_$ioa_switch (sw,
			     "^4.4b^-IIW STATUS^-FAULT BYTE=^2.4b^-TCA=^1b,PSI=^1b,LOG-CHAN=^1b^/", word,
			     substr (word, 7, 2) || substr (word, 11, 6), substr (word, 2, 1), substr (word, 3, 1),
			     substr (word, 4, 1));
		     else if mword.type = "11"b then do;/* either MPC or dev special status */
			if mword.b = "0"b
			then			/* MPC special */
			     call ioa_$ioa_switch (sw,
				"^4.4b^-MPC SPECIAL STATUS TYPE=^[SUSPEND^]^[RELEASE^]^-TCA=^1b,PSI=^1b,LOG-CHAN=^1b^/"
				, word, substr (word, 8, 1), substr (word, 7, 1), substr (word, 2, 1),
				substr (word, 3, 1), substr (word, 4, 1));
			else do;			/* DEVICE SPECIAL STATUS */
			     STR = "";
			     do i = 1 to 7 while (STR = "");
				if substr (word, i + 1, 1) then STR = mth_spec_type (i);
			     end;
			     call ioa_$ioa_switch (sw, "^4.4b^-SPECIAL^-TYPE=^8b^-DEVICE=^2.3b (^a)", word,
				substr (word, 1, 8), mword.b, STR);
			     end;
			end;
		     end;

/* This must be checked TWICE as bit 0 'mword.st' may or may not be on for this
   trace type */

		if (mword.type = "11"b & mword.b ^= "0"b) then do;
						/* DEVICE SPECIAL STATUS */
		     STR = "";
		     do i = 1 to 7 while (STR = "");
			if substr (word, i + 1, 1) then STR = mth_spec_type (i);
		     end;
		     call ioa_$ioa_switch (sw, "^4.4b^-SPECIAL^-TYPE=^8b^-DEVICE=^2.3b (^a)", word,
			substr (word, 1, 8), mword.b, STR);
		     end;

		if mword.type = "00"b
		then				/* INCOMING IDCW */
		     call ioa_$ioa_switch (sw, "^4.4b^-INCOMING IDCW^2-DEVICE=^2.3b^-TCA=^1b,PSI=^1b,LOG-CHAN=^1b",
			word, mword.b, substr (word, 2, 1), substr (word, 3, 1), substr (word, 4, 1));

		else if mword.type = "01"b
		then				/* EXECUTION IDCW */
		     call ioa_$ioa_switch (sw, "^4.4b^-IDCW EXECUTION^-OP=^2.3b^-DEVICE=^2.3b", word,
			substr (word, 3, 6), mword.b);

		else if mword.type = "10"b
		then				/* TERM STATUS */
		     call ioa_$ioa_switch (sw,
			"^4.4b^-TERMINATE STATUS^-MAJOR=^2.3b^-SUB=^2.3b^-TCA=^1b,PSI=^1b,LOG-CHAN=^1b^/", word,
			"00"b || substr (word, 5, 4), mword.b, substr (word, 2, 1), substr (word, 3, 1),
			substr (word, 4, 1));
		go to skip_zeroes;
		end;				/* If not URMPC or MTP610 ... */
	     if mword.st
	     then					/* If status ... */
		call ioa_$ioa_switch (sw,
		     "^4.4b^-TERMINATE STATUS^-MAJOR=^2.3b^-SUB=^2.3b^-LA=^1b,PSI=^1b,LOG-CHAN=^.3b^/", word,
		     "00"b || substr (word, 7, 4), mword.b, substr (mword.a, 1, 1), substr (mword.a, 2, 1),
		     substr (mword.a, 3, 3));
	     else					/* If not status ... */
		if mword.type = "00"b
	     then					/* Type 00 = COMMAND */
		call ioa_$ioa_switch (sw, "^4.4b^-COMMAND^2-OP=^2.3b^-DEVICE=^2.3b", word, substr (mword.a, 2, 6),
		     mword.b);


	     else if mword.type = "10"b
	     then					/* Type 10 = IDCW */
		call ioa_$ioa_switch (sw, "^4.4b^-IDCW^3-DEVICE=^2.3b^-LA=^1b,PSI=^1b,LOG-CHAN=^.3b", word, mword.b,
		     substr (mword.a, 1, 1), substr (mword.a, 2, 1), substr (mword.a, 3, 3));
	     else if mword.type = "11"b then do;	/* Type 11 = SPECIAL */
		if substr (mpc_data.type, 1, 3) = "mtp" then do;
		     STR = "";
		     do i = 1 to 7 while (STR = "");
			if substr (mword.a, i + 1, 1) = "1"b then STR = mth_spec_type (i);
		     end;

		     call ioa_$ioa_switch (sw, "^4.4b^-SPECIAL^-TYPE=^8b^-DEVICE=^2.3b^/^a", word, mword.a, mword.b,
			STR);
		     end;

		else do;
		     if substr (word, 9, 3) = "111"b
		     then				/* RPS TYPE */
			call ioa_$ioa_switch (sw, "^4.4b^-RPS FLAG^3-DEVICE=^2.3b", word, "0"b || substr (word, 12))
			     ;

		     else call ioa_$ioa_switch (sw,
			     "^4.4b^-SPECIAL^-TYPE=^2b^2-DEVICE=^2.3b^-LA=^1b,PSI=^1b,LOG-CHAN=^.3b", word,
			     substr (mword.a, 6, 2), mword.b, substr (mword.a, 1, 1), substr (mword.a, 2, 1),
			     substr (mword.a, 3, 3));
		     end;
		end;

	     else if mword.type = "01"b
	     then					/* Type 01 = POLLING */
		if substr (mpc_data.type, 1, 3) = "msp"
		then call ioa_$ioa_switch (sw, "^4.4b^-POLLING^2-CA=^2b", word, substr (mword.b, 5));


skip_zeroes:
	end;
	return;

trace_mpc_$eurc:
     entry (image_ptr, sw, mpc_datap);

	call date_time_ (clock (), dt);		/* Get current date and time. */
	call ioa_$ioa_switch (sw, "^|^5xTrace of ^a controller.^3x^a^/", mpc_data.name, dt);

	eurc_trace_ptr = image_ptr;

	do loc = 0 to 15;				/* 16 entries, 16 bytes each */
	     call ioa_$ioa_switch (sw, "^2.4b^-MODULE=^a^-LOG-CHAN=^.2b",
		eurc_trace (loc).module || eurc_trace (loc).pad1 || eurc_trace (loc).LCN,
		eurc_module (bin (eurc_trace (loc).module, 4)), eurc_trace (loc).LCN);
	     call ioa_$ioa_switch (sw, "^2.4b^-REASON=^2.4b", eurc_trace (loc).reason, eurc_trace (loc).reason);
	     call ioa_$ioa_switch (sw, "^2.4b^-COMMAND=^.3b^2-^2xMAJOR STATUS=^2.3b",
		eurc_trace (loc).pad2 || eurc_trace (loc).command || eurc_trace (loc).major_status,
		eurc_trace (loc).command, "00"b || eurc_trace (loc).major_status);
	     call ioa_$ioa_switch (sw, "^2.4b^3-^4xSUB STATUS=^2.3b",
		eurc_trace (loc).pad3 || eurc_trace (loc).minor_status, eurc_trace (loc).minor_status);
	     call ioa_$ioa_switch (sw, "^2.4b^3-CHANNEL STATUS=^2.3b",
		eurc_trace (loc).pad4 || eurc_trace (loc).chan_status, eurc_trace (loc).chan_status);
	     call ioa_$ioa_switch (sw, "^2.4b^-CARD STATE=^.4b^-SUBSTATE=^.4b",
		eurc_trace (loc).card_state || eurc_trace (loc).card_substate, eurc_trace (loc).card_state,
		eurc_trace (loc).card_substate);
	     call ioa_$ioa_switch (sw, "^2.4b^-PRINT STATE=^.4b^-SUBSTATE=^.4b",
		eurc_trace (loc).print_state || eurc_trace (loc).print_substate, eurc_trace (loc).print_state,
		eurc_trace (loc).print_substate);
	     call ioa_$ioa_switch (sw, "^2.4b^-IOM STATE=^.4b^-SUBSTATE=^.4b",
		eurc_trace (loc).iom_state || eurc_trace (loc).iom_substate, eurc_trace (loc).iom_state,
		eurc_trace (loc).iom_substate);
	     call ioa_$ioa_switch (sw, "^2.4b^-TND STATE=^.4b^-SUBSTATE=^.4b",
		eurc_trace (loc).tnd_state || eurc_trace (loc).tnd_substate, eurc_trace (loc).tnd_state,
		eurc_trace (loc).tnd_substate);
	     call ioa_$ioa_switch (sw, "^2.4b^-QUEUE ID=^.4b^-LINK STATUS=^.4b",
		eurc_trace (loc).queue_id || eurc_trace (loc).link_status, eurc_trace (loc).queue_id,
		eurc_trace (loc).link_status);
	     call ioa_$ioa_switch (sw, "^2.4b^-IDCW OP CODE^-^2.3b^/^2.4b^-IDCW DEVICE ADDRESS^-^2.3b",
		eurc_trace (loc).pad5 || eurc_trace (loc).idcw_op, eurc_trace (loc).idcw_op,
		eurc_trace (loc).pad6 || eurc_trace (loc).idcw_dev, eurc_trace (loc).idcw_dev);
	     call ioa_$ioa_switch (sw, "^2.4b^-IDCW ADDR EXTENSION^-^o^/^2.4b^-IDCW FLAGS^-^6b",
		eurc_trace (loc).pad7 || eurc_trace (loc).idcw_add_ext, eurc_trace (loc).idcw_add_ext,
		eurc_trace (loc).pad8 || eurc_trace (loc).idcw_flags, eurc_trace (loc).idcw_flags);
	     call ioa_$ioa_switch (sw, "^2.4b^-IDCW CHAN INSTR^-^2.3b^/^2.4b^-IDCW RECORD TALLY^-^2.3b",
		eurc_trace (loc).pad9 || eurc_trace (loc).idcw_chan_inst, eurc_trace (loc).idcw_chan_inst,
		eurc_trace (loc).pad10 || eurc_trace (loc).idcw_rec_tly, eurc_trace (loc).idcw_rec_tly);

	     call ioa_$ioa_switch (sw, "----------------------------------------------------------------------------");
	end;
	return;
%page;
trace_mpc_$dau:
     entry (image_ptr, sw, mpc_datap);

dcl  dau_image (0:127) bit (16) unal based (image_ptr);	/* DAU trace table */
dcl  dau_image_for_eight (8) bit (16) unal based (eight_ptr);
dcl  DH (6) bit (16) unal;
dcl  (hold_idx, poll_rpt_cnt) fixed bin;
dcl  spec_mess char (80) var;
dcl  dau_addr fixed bin (8) uns;
dcl  (eight_ptr, key_ptr) ptr;
dcl  1 key unal based (key_ptr),
       2 F bit (4),
       2 Index fixed bin (4) uns unal,
       2 mbz bit (2),
       2 PSI fixed bin (2) uns unal,
       2 mbz1 bit (1),
       2 LC fixed bin (3) uns unal;

	call date_time_ (clock (), dt);		/* Get current date and time. */
	call ioa_$ioa_switch (sw, "^|^5xTrace of ^a controller.^3x^a^/", mpc_data.name, dt);
	hold_idx = 0;
	do loc = 0 to 127;
	     if substr (dau_image (loc), 1, 4) = "f"b4 then do;
		key_ptr = addr (dau_image (loc));
		goto Ftype (key.Index);
		end;
stow_away:
	     if hold_idx > 0
	     then do i = hold_idx to 1 by -1;		/* move data down */
		DH (i + 1) = DH (i);
	     end;
	     DH (1) = dau_image (loc);		/* save data */
	     hold_idx = hold_idx + 1;			/* update index */
next_loc:
	end;

	call ioa_$ioa_switch (sw, "^/^60(=^)^2/^5xRaw Trace Table Data^/");

	dau_addr = 0;
	do loc = 0 to 127 by 8;
	     eight_ptr = addr (dau_image (loc));
	     call ioa_$ioa_switch (sw, "^10x^2.4b ^8(  ^4.4b^)", bit (dau_addr, 8), dau_image_for_eight);
	     if loc ^= 120 then dau_addr = dau_addr + 16;
	end;

	return;					/* All done! */

Ftype (0):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 2 then do;			/* Not enough! */
	     if hold_idx = 0
	     then call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Initial IDCW Recieved. [BOTH DATA WORDS MISSING!]",
		     key.PSI, key.LC);
	     else call ioa_$ioa_switch (sw,
		     "(PSI-^d, LC-^d) Initial IDCW Recieved. OP Code= ^1.3b^1.3b, Device= ^2.3b [LAST DATA WORD MISSING!]"
		     , key.PSI, key.LC, substr (DH (1), 2, 3), substr (DH (1), 6, 3), substr (DH (1), 11, 6));
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw,
	     "(PSI-^d, LC-^d) Initial IDCW Recieved. OP Code= ^1.3b^1.3b, Device= ^2.3b^[^[^/^36x^]^[ (Marker)^; (Continue)^; (Continue-Marker)^]^[ (Channel inst.=^2.3b)^]^]"
	     , key.PSI, key.LC, substr (DH (1), 2, 3), substr (DH (1), 6, 3), substr (DH (1), 11, 6),
	     (substr (DH (2), 9, 8) ^= "0"b), (substr (DH (2), 11, 6) ^= "0"b & substr (DH (2), 9, 2) ^= "0"b),
	     fixed (substr (DH (2), 9, 2)), (substr (DH (2), 11, 6) ^= "0"b), substr (DH (2), 11, 6));
	hold_idx = 0;
	goto next_loc;

Ftype (1):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx ^= 0 then goto stow_away;		/* Should be ZERO */
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Initial IDCW Initiated (from CPW Queue).", key.PSI, key.LC);
	goto next_loc;

Ftype (2):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Seek Command Initiated. [DATA WORD MISSING!]", key.PSI, key.LC);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Seek Command Initiated. Cylinder/Head= ^d/^d", key.PSI, key.LC,
	     fixed (substr (DH (1), 9, 2) || substr (DH (1), 1, 8)), fixed (substr (DH (1), 11, 6)));
	hold_idx = 0;
	goto next_loc;

Ftype (3):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Continue IDCW Initiated. [DATA WORD MISSING!]", key.PSI, key.LC)
		;
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw,
	     "(PSI-^d, LC-^d) Continue IDCW Initiated. OP Code= ^1.3b^1.3b^[^[^/^38x^]^[ (Marker)^; (Continue)^; (Continue-Marker)^]^[ (Channel inst.=^2.3b)^]^]"
	     , key.PSI, key.LC, substr (DH (1), 2, 3), substr (DH (1), 6, 3), (substr (DH (1), 9, 8) ^= "0"b),
	     (substr (DH (1), 11, 6) ^= "0"b & substr (DH (1), 9, 2) ^= "0"b), fixed (substr (DH (1), 9, 2)),
	     (substr (DH (1), 11, 6) ^= "0"b), substr (DH (1), 11, 6));
	hold_idx = 0;
	goto next_loc;

Ftype (4):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Read Operation Started. [DATA WORD MISSING!]", key.PSI, key.LC);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Read Operation Started. ^d Record^[^;s^] Transfered.", key.PSI,
	     key.LC, fixed (DH (1)), (fixed (DH (1)) = 1));
	hold_idx = 0;
	goto next_loc;

Ftype (5):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Write Operation Started. [DATA WORD MISSING!]", key.PSI, key.LC)
		;
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Write Operation Started. ^d Record^[^;s^] Transfered.", key.PSI,
	     key.LC, fixed (DH (1)), (fixed (DH (1)) = 1));
	hold_idx = 0;
	goto next_loc;

Ftype (6):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Termination Status. [DATA WORD MISSING!]", key.PSI, key.LC);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Termination Status (^1.3b^1.3b/^1.3b^1.3b).", key.PSI, key.LC,
	     substr (DH (1), 2, 3), substr (DH (1), 6, 3), substr (DH (1), 10, 3), substr (DH (1), 14, 3));
	hold_idx = 0;
	goto next_loc;

Ftype (7):
	if key.mbz ^= "0"b |			/* Check KEY */
	     key.mbz1 ^= "0"b
	then goto stow_away;
	if hold_idx ^= 0 then goto stow_away;		/* Should be ZERO */
	call ioa_$ioa_switch (sw, "(PSI-^d, LC-^d) Device Released.", key.PSI, key.LC);
	goto next_loc;

Ftype (8):
Ftype (9):
	goto stow_away;				/* Must be data */

Ftype (10):
	if key.mbz ^= "0"b | key.mbz1 ^= "0"b |		/* Check KEY */
	     key.LC ^= 0
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xAbort Status. [DATA WORD MISSING!]", key.PSI);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw,
	     "^4x(PSI-^d)^3xAbort Status (^[Channel/IOM status= ^1.3b/^1.3b^4s^;^2sMaj/Sub status= ^1.3b^1.3b/^1.3b^1.3b^])."
	     , key.PSI, (substr (DH (1), 1, 8) = "0"b), substr (DH (1), 10, 3), substr (DH (1), 14, 3),
	     substr (DH (1), 2, 3), substr (DH (1), 6, 3), substr (DH (1), 10, 3), substr (DH (1), 14, 3));
	hold_idx = 0;
	goto next_loc;

Ftype (11):
	if key.mbz ^= "0"b | key.mbz1 ^= "0"b |		/* Check KEY */
	     key.LC ^= 0
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xIIW Processing Initiated. [DATA WORD MISSING!]", key.PSI);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xIIW Processing Initiated. Fault Byte= ^2.4b, Device= ^2.3b", key.PSI,
	     substr (DH (1), 1, 8), substr (DH (1), 11, 6));
	hold_idx = 0;
	goto next_loc;

Ftype (12):
	if key.mbz ^= "0"b | key.mbz1 ^= "0"b |		/* Check KEY */
	     key.LC ^= 0
	then goto stow_away;
	if hold_idx ^= 0 then goto stow_away;		/* Should be ZERO */
	call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xDrop of OPerational In (OPI).", key.PSI);
	goto next_loc;

Ftype (13):
	if key.mbz ^= "0"b | key.mbz1 ^= "0"b |		/* Check KEY */
	     key.LC ^= 0
	then goto stow_away;
	if hold_idx < 1 then do;			/* Not enough! */
	     call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xSpecial Interrupt. [DATA WORD MISSING!]", key.PSI);
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xSpecial Interrupt. Special Type= ^2.4b, Device= ^2.3b", key.PSI,
	     substr (DH (1), 1, 8), substr (DH (1), 11, 6));
	spec_mess = "";
	if substr (DH (1), 1, 1) then spec_mess = spec_mess || "Alt Channel in Control, ";
	if substr (DH (1), 8, 1) then spec_mess = spec_mess || "Disc Powered ON/Suspend, ";
	if substr (DH (1), 7, 1) then spec_mess = spec_mess || "Device Released, ";
	if substr (DH (1), 6, 1) then spec_mess = spec_mess || "Disc Powered OFF, ";
	if spec_mess ^= "" then call ioa_$ioa_switch (sw, "^33x(^a)", substr (spec_mess, 1, length (spec_mess) - 2));
	hold_idx = 0;
	goto next_loc;

Ftype (14):
	if key.mbz ^= "0"b | key.mbz1 ^= "0"b |		/* Check KEY */
	     key.LC ^= 0
	then goto stow_away;
	if hold_idx < 5 then do;			/* Not enough! */
	     if hold_idx = 0
	     then call ioa_$ioa_switch (sw, "^4x(PSI-^d)^3xHardware Interrupt. [ALL FIVE DATA WORDS MISSING!]", key.PSI)
		     ;
	     else if hold_idx = 1
	     then call ioa_$ioa_switch (sw,
		     "^4x(PSI-^d)^3xHardware Interrupt. Instruction PTR= ^4.4b. [FOUR DATA WORDS MISSING!]", key.PSI,
		     DH (1));
	     else if hold_idx = 2
	     then call ioa_$ioa_switch (sw,
		     "^4x(PSI-^d)^3xHardware Interrupt. Instruction PTR= ^4.4b, OP Code= ^1.3b^1.3b, Device= ^2.3b. [THREE DATA WORDS MISSING!]"
		     , key.PSI, DH (1), substr (DH (2), 2, 3), substr (DH (2), 6, 3), substr (DH (2), 11, 6));
	     else if hold_idx = 3 then do;
		call ioa_$ioa_switch (sw,
		     "^4x(PSI-^d)^3xHardware Interrupt. Instruction PTR= ^4.4b, OP Code= ^1.3b^1.3b, Device= ^2.3b",
		     key.PSI, DH (1), substr (DH (2), 2, 3), substr (DH (2), 6, 3), substr (DH (2), 11, 6));
		call ioa_$ioa_switch (sw, "^35xci_status= ^2.4b, psi_status= ^2.4b. [TWO DATA WORDS MISSING!]",
		     substr (DH (3), 1, 8), substr (DH (3), 9, 8));
		end;
	     else do;
		call ioa_$ioa_switch (sw,
		     "^4x(PSI-^d)^3xHardware Interrupt. Instruction PTR= ^4.4b, OP Code= ^1.3b^1.3b, Device= ^2.3b",
		     key.PSI, DH (1), substr (DH (2), 2, 3), substr (DH (2), 6, 3), substr (DH (2), 11, 6));
		call ioa_$ioa_switch (sw, "^35xci_status= ^2.4b, psi_status= ^2.4b, seq_status= ^2.4b",
		     substr (DH (3), 1, 8), substr (DH (3), 9, 8), substr (DH (4), 1, 8));
		call ioa_$ioa_switch (sw, "^35xseq_s1= ^2.4b. [LAST DATA WORD MISSING!]", substr (DH (4), 9, 8));
		end;
	     hold_idx = 0;
	     goto next_loc;
	     end;
	call ioa_$ioa_switch (sw,
	     "^4x(PSI-^d)^3xHardware Interrupt. Instruction PTR= ^4.4b, OP Code= ^1.3b^1.3b, Device= ^2.3b", key.PSI,
	     DH (1), substr (DH (2), 2, 3), substr (DH (2), 6, 3), substr (DH (2), 11, 6));
	call ioa_$ioa_switch (sw, "^35xci_status= ^2.4b, psi_status= ^2.4b, seq_status= ^2.4b", substr (DH (3), 1, 8),
	     substr (DH (3), 9, 8), substr (DH (4), 1, 8));
	call ioa_$ioa_switch (sw, "^35xseq_s1= ^2.4b, buf_status= ^2.4b, mp_status= ^2.4b", substr (DH (4), 9, 8),
	     substr (DH (5), 1, 8), substr (DH (5), 9, 8));
	hold_idx = 0;
	goto next_loc;

Ftype (15):
	if hold_idx ^= 0 then do;			/* Should be ZERO */
	     if hold_idx = 1 & DH (1) = ""b
	     then hold_idx = 0;			/* ignore */
	     else goto stow_away;			/* save */
	     end;
	if substr (dau_image (loc), 9, 8) = "ff"b4 then do;
	     poll_rpt_cnt = 0;
	     do loc = loc to 126 while (dau_image (loc + 1) = "ffff"b4);
						/* count multiples */
		poll_rpt_cnt = poll_rpt_cnt + 1;
	     end;
	     call ioa_$ioa_switch (sw, "^4x-------^3x***** DAU Initialization *****^[ (Repeats ^d time^[s^])^]",
		(poll_rpt_cnt ^= 0), poll_rpt_cnt, (poll_rpt_cnt > 1));
	     goto next_loc;
	     end;
	if dau_image (loc) ^= "fffe"b4 then goto stow_away;
						/* must be data */
	poll_rpt_cnt = 0;
	do loc = loc to 126 while (dau_image (loc + 1) = "fffe"b4);
						/* count multiples */
	     poll_rpt_cnt = poll_rpt_cnt + 1;
	end;
	call ioa_$ioa_switch (sw, "^4x-------^3xDevice Polling^[ (Repeats ^d time^[s^])^]", (poll_rpt_cnt ^= 0),
	     poll_rpt_cnt, (poll_rpt_cnt > 1));
	goto next_loc;
%page;
%include dump_mpc_data;


     end trace_mpc_;
