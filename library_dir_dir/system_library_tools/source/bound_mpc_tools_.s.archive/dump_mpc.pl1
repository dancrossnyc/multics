/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* DUMP_MPC: Command to perform dump of MPC read/write memory */
/* Written July 1975 by Larry Johnson */
/* Updated January 1977 for disk mpcs and to add -iom and -channel args */
/* Modified 10/09/79 for new MPC card format by Michael R. Jordan */
/* Modified January 1980 by Larry Johnson to dump MPC's by their name */
/* Modified December 1980 by Rich Coppola to default output to user_io */
/* Modified January 1981 by Rich Coppola to add -mpc arg to display only mpc stats */
/* Modified Apr 1 1982 by Rich Coppola to dump MPCs in ASCII. This is required for
   the EURC and most likely Dipper "MPCs". */
/* Modified August 1982 by Rich Coppola to correct the output_file ctl_arg
   recognition. It was missing the "-".
   Modified June 1984 by Paul Farley to add MSP800(DAU) support.
   Modified March 1985 by Paul Farley to double DAU config area, for 64 devices (PBF).
*/

dump_mpc:
     proc;

dcl  code fixed bin (35);				/* Standard system status code */
dcl  name char (8) init ("dump_mpc");
dcl  io_code fixed bin;
dcl  workp ptr;					/* Pointer to IOI buffer segment */
dcl  ws_size_needed fixed bin (18);			/* IOI workspace size */
dcl  (i, j) fixed bin;
dcl  dev_name char (32) var;				/* Name of device to assign */
dcl  n_args fixed bin;				/* Number of command arguments */
dcl  arg_ptr ptr;					/* Pointer to a command argument */
dcl  arg_len fixed bin;				/* Length of a command argument */
dcl  arg char (arg_len) based (arg_ptr);		/* Command argument described by arg_ptr,arg_len */
dcl  path_ptr ptr;					/* Pointer to path name of listing */
dcl  path_len fixed bin;				/* Length of pathname of listing */
dcl  path char (path_len) based (path_ptr);		/* Hence, this is the pathname */
dcl  default_path char (32);				/* A default listing segment will be built here */
dcl  line_length fixed bin (17);			/* value returned by get_line_length */
dcl  mpc_list_ptr ptr;				/* Pointer to IOCB of mpc_list */
dcl  list_attach bit (1) init ("0"b);			/* Set if list switch has been attached */
dcl  list_open bit (1) init ("0"b);			/* Set when list switch has been opened */
dcl  of_sw bit (1) init ("0"b);			/* Set if an output file is specified */
dcl  mpc_only_sw bit (1) init ("0"b);			/* Set if only MPC data is wanted (-mpc) */
dcl  stat_sw bit (1) init ("0"b);			/* Set if -stat used */
dcl  trace_sw bit (1) init ("0"b);			/* Set if -trace used */
dcl  dump_sw bit (1) init ("0"b);			/* Set if -dump used */
dcl  extend_sw bit (1) init ("0"b);			/* To extend old listing segment */
dcl  short_sw bit (1) init ("0"b);			/* To set display to 80 char line */
dcl  eurc_sw bit (1) init ("0"b);			/* We have an EURC */
dcl  dau_sw bit (1) init ("0"b);			/* MSP800 (DAU) */
dcl  attach_desc char (256) var;
dcl  mpc_memory_size fixed bin;			/* size of MPC memory */
dcl  dau_data_bytes fixed bin;
dcl  error_message char (256) var;

dcl  1 my_mpc_data aligned like mpc_data automatic;
dcl  1 my_attach_data aligned like attach_mpc_data automatic;
dcl  1 my_event_wait_info aligned like event_wait_info;

dcl  1 wait_list aligned,				/* Wait list for ipc_$block */
       2 nchan fixed bin init (1),			/* Always 1 channel */
       2 ev_chan fixed bin (71);			/* Which is this */

dcl  1 buf aligned based (workp),			/* The IOI buffer segment */
       2 idcw1 bit (36),				/* Will be read controller main memory */
       2 dcw1 bit (36),				/* Addr=buf.control, tally=1 */
       2 idcw2 bit (36),				/* Will be initiate read data transfer */
       2 dcw2 bit (36),				/* Address=buf.mem, tally=rest of segment */
       2 control,					/* Describes where data is in mpc */
         3 addr bit (16) unal,			/* Addr in mpc memory */
         3 tally bit (16) unal,			/* Count in mpc words */
         3 fill bit (4) unal,
       2 mem (0:mpc_memory_size - 1) bit (18) unal;	/* This is the mpc memory in ASCII */

dcl  1 stat_buf aligned based (workp),			/* The IOI buffer segment */
       2 idcw1 bit (36),				/* Will be read controller main memory */
       2 dcw1 bit (36),				/* Addr=stat_buf.control, tally=1 */
       2 idcw2 bit (36),				/* Will be initiate read data transfer */
       2 dcw2 bit (36),				/* Address=stat_buf.mem, tally=rest of segment */
       2 control,					/* Describes where data is in mpc */
         3 addr bit (16) unal,			/* Addr in mpc memory */
         3 tally bit (16) unal,			/* Count in mpc words */
         3 fill bit (4) unal,
       2 stats (0:83) bit (18) unal;			/* EURC statistics in ASCII */

dcl  1 trace_buf aligned based (workp),			/* The IOI buffer segment */
       2 idcw1 bit (36),				/* Will be read controller main memory */
       2 dcw1 bit (36),				/* Addr=trace_buf.control, tally=1 */
       2 idcw2 bit (36),				/* Will be initiate read data transfer */
       2 dcw2 bit (36),				/* Address=trace_buf.mem, tally=rest of segment */
       2 control,					/* Describes where data is in mpc */
         3 addr bit (16) unal,			/* Addr in mpc memory */
         3 tally bit (16) unal,			/* Count in mpc words */
         3 fill bit (4) unal,
       2 trace (0:255) bit (9) unal;			/* EURC trace in ASCII */

dcl  1 eurc_dump_buf aligned based (workp),		/* The IOI buffer segment */
       2 idcw1 bit (36),				/* Will be read controller main memory */
       2 dcw1 bit (36),				/* Addr=dump_buf.control, tally=1 */
       2 idcw2 bit (36),				/* Will be initiate read data transfer */
       2 dcw2 bit (36),				/* Address=dump_buf.mem, tally=rest of segment */
       2 control,					/* Describes where data is in mpc */
         3 addr bit (18) unal,			/* Addr in mpc memory */
         3 tally bit (18) unal,			/* Count in mpc words */
       2 eurc_dump (0:3071) bit (18) unal;		/* EURC dump in ASCII */

dcl  1 dau_buf aligned based (workp),			/* The IOI buffer segment */
       2 list (20),					/* DCW List */
         3 idcw bit (36),
         3 dcw bit (36),
       2 control (8),				/* Read memory info */
         3 addr bit (16) unal,
         3 tally bit (16) unal,
         3 fill bit (4) unal,
       2 data (0:dau_data_bytes - 1) bit (18) unal;	/* data from DAU in ASCII format */

dcl  dau_config_idx fixed bin,			/* offsets in dau_buf.data */
     dau_stat_idx fixed bin,				/* statistic offset */
     dau_trace_idx fixed bin,				/* trace offset */
     dau_dump_idx fixed bin;				/* dump offset */

dcl  eurc_mem_bin (0:3071) bit (16) unal;		/* eurc mem converted to bin */
dcl  mpc_mem_bin (0:4095) bit (16) unal;		/* mpc mem converted to binary */
dcl  eurc_trace (0:255) bit (8) unal;			/* eurc trace data converted to bin */
dcl  eurc_stats (0:83) bit (16) unal;			/* eurc stats converted to bin */
dcl  dau_datap ptr init (null);
dcl  dau_data (0:dau_data_bytes - 1) bit (16) unal based (dau_datap);

%page;
/* Entry variables */

dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35));
dcl  ioi_$connect entry (fixed bin, fixed bin (18), fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  char_mpc_ entry (ptr, ptr);
dcl  dump_mpc_ entry (ptr, ptr, ptr, bit (1));
dcl  dump_mpc_$dau entry (ptr, ptr, ptr, bit (1));
dcl  dump_mpc_$eurc entry (ptr, ptr, ptr, bit (1));
dcl  stat_mpc_ entry (ptr, ptr, ptr, bit (1));
dcl  stat_mpc_$dau entry (ptr, ptr, ptr, bit (1));
dcl  stat_mpc_$eurc entry (ptr, ptr, ptr, bit (1));
dcl  stat_mpc_$mpc_stats_ entry (ptr, ptr, ptr, bit (1));
dcl  stat_mpc_$dau_stats_ entry (ptr, ptr, ptr, bit (1));
dcl  trace_mpc_ entry (ptr, ptr, ptr);
dcl  trace_mpc_$dau entry (ptr, ptr, ptr);
dcl  trace_mpc_$eurc entry (ptr, ptr, ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  iox_$user_output ptr ext;
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  attach_mpc_ entry (ptr, fixed bin (35));
dcl  detach_mpc_ entry (ptr, fixed bin (35));
dcl  parse_io_channel_name_ entry (char (*), fixed bin (3), fixed bin (6), fixed bin (35));
dcl  analyze_device_stat_$rsnnl entry (char (*) var, ptr, bit (72), bit (18));

dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$request_not_recognized ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);

dcl  (length, substr, null, bit, rel, bin, size, addr, rtrim, unspec, hbound, multiply) builtin;

dcl  (cleanup, sus_) condition;
%page;
/* Scan command arguments */

	code = 0;
	arg_ptr = null;

	call cu_$arg_count (n_args);			/* First, find out how many */
	if n_args = 0 then do;			/* None is illegal */
no_dev:
	     call com_err_ (error_table_$noarg, name, "MPC name");
	     go to usage;
	     end;

	attach_mpc_datap = addr (my_attach_data);
	unspec (attach_mpc_data) = "0"b;
	attach_mpc_data.version = attach_mpc_data_version_1;
	attach_mpc_data.mpc_name = "";
	event_wait_info_ptr = addr (my_event_wait_info);

	path_ptr = null;				/* Listing segment path pointer not known */
	mpc_list_ptr = iox_$user_output;		/* Set default output */

	line_length = get_line_length_$switch (null (), code);
	if line_length < 132 then short_sw = "1"b;
	if code ^= 0 then short_sw = "0"b;


	do i = 1 to n_args;				/* Scan all args */
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);/* Get argument */
	     if code ^= 0 then go to err;		/* This should not happen */
	     if substr (arg, 1, 1) = "-" then do;	/* If a control argument */
		if arg = "-dump" then dump_sw = "1"b;
		else if arg = "-stat" then stat_sw = "1"b;
		else if arg = "-trace" then trace_sw = "1"b;
		else if arg = "-mpc" then mpc_only_sw = "1"b;
		else if arg = "-extend" then extend_sw = "1"b;
		else if arg = "-short" then short_sw = "1"b;
		else if arg = "-long" then short_sw = "0"b;

		else if arg = "-of" | arg = "-output_file" then do;
		     of_sw = "1"b;
		     short_sw = "0"b;		/* use long line for fo */

		     j = i + 1;
		     call cu_$arg_ptr (j, arg_ptr, arg_len, code);
						/* Get pathname */

		     if code ^= 0 then path_ptr = null; /* Set for default file name */

		     else if substr (arg, 1, 1) = "-" then path_ptr = null;
						/* Set for default file name */

		     else do;
			path_ptr = arg_ptr;
			path_len = arg_len;
			i = i + 1;
			end;
		     end;


		else if arg = "-channel" | arg = "-ch" | arg = "-chn" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			call com_err_ (code, name, "After -channel");
			go to done;
			end;
		     call parse_io_channel_name_ (arg, attach_mpc_data.iom, attach_mpc_data.channel, code);
		     if code ^= 0 then do;
			call com_err_ (code, name, "^a", arg);
			go to done;
			end;
		     attach_mpc_data.channel_required = "1"b;
		     end;
		else do;
		     code = error_table_$badopt;
		     go to arg_err;
		     end;
		end;
	     else if attach_mpc_data.mpc_name = "" then attach_mpc_data.mpc_name = arg;
						/* If no device found yet, this is it */


	     else do;				/* Bad command argument */
		code = error_table_$request_not_recognized;
		go to arg_err;
		end;
	end;

/* Now perform some basic checks on the arguments found */

	if attach_mpc_data.mpc_name = "" & ^attach_mpc_data.channel_required then go to no_dev;
						/* Device name should have been specified */

	if ^(dump_sw | stat_sw | trace_sw | mpc_only_sw) then stat_sw = "1"b;
						/* If no control args given, assume statistics */
%page;
/* Attach the mpc */

	on cleanup call clean_up;
	on sus_ call clean_up;

	attach_mpc_data.report = "1"b;		/* Let it print errors */
	attach_mpc_data.caller_name = name;		/* Me */
	call attach_mpc_ (attach_mpc_datap, code);
	if code ^= 0 then return;

/* When an entry is created in ioi_ to check the state of the suspend
   devices flag for an MPC, the following should be added to skip the
   MPC if the IO is suspended. This way dump_mpc will not hang!

   *	call ioi_$check_suspend_state (or whatever)
   *	     (attach_mpc_data.ioi_index, io_suspended, code);
   *	if io_suspended then do;
   *	     call clean_up;
   *	     return;
   *	end;
*/

	mpc_datap = addr (my_mpc_data);
	mpc_data.name = attach_mpc_data.mpc_name;
	mpc_data.model = attach_mpc_data.model;
	mpc_data.type = attach_mpc_data.type;
	wait_list.ev_chan = attach_mpc_data.ioi_channel;

	eurc_sw = "0"b;
	if (substr (mpc_data.name, 1, 3) = "urp")
	then do i = 1 to hbound (eurc_model_numbers, 1) while (eurc_sw = "0"b);

	     if mpc_data.model = eurc_model_numbers (i) then eurc_sw = "1"b;
	end;

	else if (substr (mpc_data.name, 1, 3) = "msp") & mpc_data.model = 800 then dau_sw = "1"b;

/* Create IOI workspace segment */

	if dau_sw then do;
	     call get_temp_segment_ ("dump_mpc", dau_datap, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "getting a temporary segment.");
		goto done;
		end;
	     dau_data_bytes = 130;			/* config data */
	     if (stat_sw | mpc_only_sw) then dau_data_bytes = dau_data_bytes + 630;
	     if trace_sw then dau_data_bytes = dau_data_bytes + 128;
	     if dump_sw
	     then					/* 32K of memory */
						/* 16K (16-bit) bytes */
		dau_data_bytes = dau_data_bytes + 16384;
	     ws_size_needed = size (dau_buf);
	     end;
	else do;
	     mpc_memory_size = 4096;
	     ws_size_needed = size (buf);
	     end;
	if ws_size_needed > attach_mpc_data.max_workspace_size then do;
						/* Can't create big enough work space */
	     call com_err_ (0, name, "Required work space of ^d words exceeds maximum of ^d.", ws_size_needed,
		attach_mpc_data.max_workspace_size);
	     go to done;
	     end;
	call ioi_$workspace (attach_mpc_data.ioi_index, workp, ws_size_needed, code);
	if code ^= 0 then go to work_err;

	if eurc_sw then do;				/* special case the EURC */

	     if mpc_only_sw then do;
		call ioa_ ("^a: The -mpc ctl_arg is not applicable to the EURC.");
		go to done;
		end;

	     if dump_sw then do;
		call build_eurc_dump_dcw;
		call do_io (io_code);
		if io_code ^= 0 then go to do_io_err (io_code);

		do i = 0 to 3071;
		     substr (eurc_mem_bin (i), 1, 8) = substr (eurc_dump_buf.eurc_dump (i), 2, 8);
		     substr (eurc_mem_bin (i), 9, 8) = substr (eurc_dump_buf.eurc_dump (i), 11, 8);
		end;

		end;

	     if stat_sw then do;
		call build_stat_dcw;
		call do_io (io_code);
		if io_code ^= 0 then go to do_io_err (io_code);
		do i = 0 to 83;			/* convert it to binary */
		     substr (eurc_stats (i), 1, 8) = substr (stat_buf.stats (i), 2, 8);
		     substr (eurc_stats (i), 9, 8) = substr (stat_buf.stats (i), 11, 8);
		end;
		end;

	     if trace_sw then do;
		call build_trace_dcw;
		call do_io (io_code);
		if io_code ^= 0 then go to do_io_err (io_code);
		do i = 0 to 255;			/* convert it to binary */
		     substr (eurc_trace (i), 1, 8) = substr (trace_buf.trace (i), 2, 8);
		end;
		end;
	     end;


	else do;
	     if dau_sw
	     then call build_dau_dcw;			/* DAU */
	     else call build_dump_dcw;		/* Normal MPC */
	     call do_io (io_code);
	     if io_code ^= 0 then go to do_io_err (io_code);
	     end;
%page;

/* Prepare a listing segment */

	if of_sw then do;				/* User specified output file */
	     if path_ptr = null then do;		/* If path name not given in command */
		default_path = rtrim (attach_mpc_data.mpc_name) || ".list";
		path_ptr = addr (default_path);
		path_len = length (default_path);
		end;
	     attach_desc = "vfile_ " || rtrim (path);
	     if extend_sw then attach_desc = rtrim (attach_desc) || " -extend";
	     call iox_$attach_ioname ("mpc_list", mpc_list_ptr, (attach_desc), code);
	     if code ^= 0 then go to iox_err;
	     list_attach = "1"b;			/* Remember to detach it */
	     call iox_$open (mpc_list_ptr, 2, "0"b, code);/* Open for stream_output */
	     if code ^= 0 then go to iox_err;
	     list_open = "1"b;			/* Remember to close it */
	     end;


/* Now convert data to binary  */

	if dau_sw
	then					/* DAU? */
	     do i = 0 to dau_data_bytes - 1;
	     substr (dau_data (i), 1, 8) = substr (dau_buf.data (i), 2, 8);
	     substr (dau_data (i), 9, 8) = substr (dau_buf.data (i), 11, 8);
	end;

	else if ^eurc_sw
	then					/* if old style MPC or URC dump */
	     do i = 0 to mpc_memory_size - 1;
	     substr (mpc_mem_bin (i), 1, 8) = substr (buf.mem (i), 2, 8);
	     substr (mpc_mem_bin (i), 9, 8) = substr (buf.mem (i), 11, 8);
	end;



/* Don't need MPC any more so detach it */

	call detach_mpc_ (attach_mpc_datap, code);

/* Now print out the data */

/* Learn about mpc */
	if dau_sw
	then call char_mpc_ (addr (dau_data (dau_config_idx)), mpc_datap);
	else call char_mpc_ (addr (mpc_mem_bin), mpc_datap);

	if dump_sw then do;
	     if eurc_sw then call dump_mpc_$eurc (addr (eurc_mem_bin), mpc_list_ptr, mpc_datap, short_sw);
	     else if dau_sw then call dump_mpc_$dau (addr (dau_data (dau_dump_idx)), mpc_list_ptr, mpc_datap, short_sw);
	     else call dump_mpc_ (addr (mpc_mem_bin), mpc_list_ptr, mpc_datap, short_sw);
	     end;

	if trace_sw then do;
	     if eurc_sw then call trace_mpc_$eurc (addr (eurc_trace), mpc_list_ptr, mpc_datap);
	     else if dau_sw then call trace_mpc_$dau (addr (dau_data (dau_trace_idx)), mpc_list_ptr, mpc_datap);
	     else call trace_mpc_ (addr (mpc_mem_bin), mpc_list_ptr, mpc_datap);
	     end;

	if stat_sw then do;
	     if eurc_sw then call stat_mpc_$eurc (addr (eurc_stats), mpc_list_ptr, mpc_datap, short_sw);
	     else if dau_sw
	     then call stat_mpc_$dau (addr (dau_data (dau_config_idx)), mpc_list_ptr, mpc_datap, short_sw);
	     else call stat_mpc_ (addr (mpc_mem_bin), mpc_list_ptr, mpc_datap, short_sw);
	     end;

	if (mpc_only_sw & ^eurc_sw) then do;
	     if dau_sw
	     then call stat_mpc_$dau_stats_ (addr (dau_data (dau_config_idx)), mpc_list_ptr, mpc_datap, short_sw);
	     else call stat_mpc_$mpc_stats_ (addr (mpc_mem_bin), mpc_list_ptr, mpc_datap, short_sw);
	     end;

do_io_err (3):
done:
	call clean_up;
	return;
%page;
/* Error routines */
do_io_err (2):
ipc_err:
	call convert_ipc_code_ (code);
err:
	call com_err_ (code, name);
	go to done;

att_err:
	call com_err_ (code, name, "Attaching ^a.", dev_name);
	go to done;

work_err:
	call com_err_ (code, name, "Creating buffer of ^d words.", ws_size_needed);
	go to done;

do_io_err (1):
io_err:
	call com_err_ (code, name, "Issuing connect.");
	go to done;

arg_err:
	call com_err_ (code, name, "^a", arg);
usage:
	call ioa_ ("^a: Usage is ""dump_mpc MPC_NAME {-control_args}""", name);
	call ioa_ ("Valid control_args are:^/^25t-dump^/^25t-trace^/^25t-stat");
	call ioa_ ("^25t-mpc^/^25t-channel IOM_TAG_CC, -ch IOM_TAG_CC^/^25t-output_file PATH, -of PATH");
	call ioa_ ("^25t-extend^/^25t-long^/^25t-short ");
	return;

iox_err:
	call com_err_ (code, name, "I/O switch mpc_list.");
	go to done;

/* Cleanup handler */

clean_up:
     proc;


	call detach_mpc_ (attach_mpc_datap, code);

	if list_open then do;
	     list_open = "0"b;
	     call iox_$close (mpc_list_ptr, code);
	     end;
	if list_attach then do;
	     list_attach = "0"b;
	     call iox_$detach_iocb (mpc_list_ptr, code);
	     end;
	if dau_datap ^= null then call release_temp_segment_ ("dump_mpc", dau_datap, code);

	return;

     end clean_up;
%page;
do_io:
     proc (err_code);
dcl  err_code fixed bin;


/* Do the io operation */

	call ioi_$connect (attach_mpc_data.ioi_index, 0, code);
	if code ^= 0 then do;
	     err_code = 1;				/* io_err */
	     return;
	     end;


	call ipc_$block (addr (wait_list), event_wait_info_ptr, code);
						/* Wait for completion */
	if code ^= 0 then do;			/* ipc_err */
	     err_code = 2;
	     return;
	     end;


	imp = addr (event_wait_info.message);		/* Status is here */
	if imess.er then do;			/* Error */
	     if imess.time_out
	     then error_message = "Timeout.";
	     else call analyze_device_stat_$rsnnl (error_message, attach_mpc_data.status_tablep, (imess.status), ("0"b))
		     ;
	     call com_err_ (0, name, "I/O error occured: ^a", error_message);
	     err_code = 3;
	     return;
	     end;

	err_code = 0;
	return;
     end do_io;
%page;

build_dump_dcw:
     proc;


/* Build dcw list to dump R/W memory */

	idcwp = addr (buf.idcw1);			/* First IDCW */
	buf.idcw1 = "0"b;
	idcw.command = "02"b3;			/* Command is read controller main memory (ASCII) */
	idcw.code = "111"b;				/* This makes it an IDCW */
	idcw.control = "10"b;			/* Set continue bit */
	idcw.chan_cmd = "40"b3;			/* Indicate special controller command */

	dcwp = addr (buf.dcw1);
	buf.dcw1 = "0"b;
	dcw.address = rel (addr (buf.control));		/* Get offset to control word */
	dcw.tally = "000000000001"b;

	idcwp = addr (buf.idcw2);			/* Second IDCW */
	buf.idcw2 = "0"b;
	idcw.command = "06"b3;			/* Command is initiate read data transfer */
	idcw.code = "111"b;				/* Code is 111 to make it an idcw */
	idcw.chan_cmd = "40"b3;			/* Special controller command */

	dcwp = addr (buf.dcw2);
	buf.dcw2 = "0"b;
	dcw.address = rel (addr (buf.mem));		/* Offset to core image */
	dcw.tally = bit (bin (size (buf) - bin (rel (addr (buf.mem)), 18), 12));
						/* Rest of seg */


	buf.addr = "0"b;				/* Mpc address to start is 0 */
	buf.tally = bit (bin (mpc_memory_size, 16), 16);
	buf.fill = "0"b;
	return;
     end build_dump_dcw;
%page;

build_eurc_dump_dcw:
     proc;

/* Build dcw list to get RW mem dump  from EURC MPC */

	idcwp = addr (eurc_dump_buf.idcw1);		/* First IDCW */
	eurc_dump_buf.idcw1 = "0"b;
	idcw.command = "02"b3;			/* Command is readmemory ASCII */
	idcw.code = "111"b;				/* This makes it an IDCW */
	idcw.control = "10"b;			/* Set continue bit */
	idcw.chan_cmd = "40"b3;			/* Indicate special controller command */

	dcwp = addr (eurc_dump_buf.dcw1);
	eurc_dump_buf.dcw1 = "0"b;
	dcw.address = rel (addr (eurc_dump_buf.control)); /* Get offset to control word */
	dcw.tally = "000000000001"b;

	idcwp = addr (eurc_dump_buf.idcw2);		/* Second IDCW */
	eurc_dump_buf.idcw2 = "0"b;
	idcw.command = "06"b3;			/* Command is initiate read data transfer */
	idcw.code = "111"b;				/* Code is 111 to make it an idcw */
	idcw.chan_cmd = "40"b3;			/* Special controller command */

	dcwp = addr (eurc_dump_buf.dcw2);
	eurc_dump_buf.dcw2 = "0"b;
	dcw.address = rel (addr (eurc_dump_buf.eurc_dump));
						/* Offset to core image */
	dcw.tally = bit (bin (size (eurc_dump_buf) - bin (rel (addr (eurc_dump_buf.eurc_dump)), 18), 12));
						/* Rest of seg */

	eurc_dump_buf.addr = "200000"b3;		/* Mpc address to start is 8000 hex */
	eurc_dump_buf.tally = "1800"b4;		/* Count is 1800 ascii (9-bit) bytes */
	return;
     end build_eurc_dump_dcw;
%page;

build_stat_dcw:
     proc;


/* Build dcw list to get statistics from EURC MPC */

	idcwp = addr (stat_buf.idcw1);		/* First IDCW */
	stat_buf.idcw1 = "0"b;
	idcw.command = "31"b3;			/* Command is read Statistics */
	idcw.code = "111"b;				/* This makes it an IDCW */
	idcw.control = "10"b;			/* Set continue bit */
	idcw.chan_cmd = "41"b3;			/* Indicate special controller command */
	idcw.count = "15"b3;

	dcwp = addr (stat_buf.dcw1);
	stat_buf.dcw1 = "0"b;
	dcw.address = rel (addr (stat_buf.control));	/* Get offset to control word */
	dcw.tally = "000000000010"b;

	idcwp = addr (stat_buf.idcw2);		/* Second IDCW */
	stat_buf.idcw2 = "0"b;
	idcw.command = "06"b3;			/* Command is initiate read data transfer */
	idcw.code = "111"b;				/* Code is 111 to make it an idcw */
	idcw.chan_cmd = "40"b3;			/* Special controller command */

	dcwp = addr (stat_buf.dcw2);
	stat_buf.dcw2 = "0"b;
	dcw.address = rel (addr (stat_buf.stats));	/* Offset to core image */
	dcw.tally = "0052"b3;			/* It returns 42 words */
	return;
     end build_stat_dcw;
%page;

build_trace_dcw:
     proc;


/* Build dcw list to get trace dump from EURC MPC */

	idcwp = addr (trace_buf.idcw1);		/* First IDCW */
	trace_buf.idcw1 = "0"b;
	idcw.command = "31"b3;			/* Command is Diagnostic Mode */
	idcw.code = "111"b;				/* This makes it an IDCW */
	idcw.control = "10"b;			/* Set continue bit */
	idcw.chan_cmd = "41"b3;			/* Indicate special controller command */
	idcw.count = "10"b3;
	dcwp = addr (trace_buf.dcw1);
	trace_buf.dcw1 = "0"b;
	dcw.address = rel (addr (trace_buf.control));	/* Get offset to control word */
	dcw.tally = "000000000010"b;

	idcwp = addr (trace_buf.idcw2);		/* Second IDCW */
	trace_buf.idcw2 = "0"b;
	idcw.command = "06"b3;			/* Command is initiate read data transfer */
	idcw.code = "111"b;				/* Code is 111 to make it an idcw */
	idcw.chan_cmd = "40"b3;			/* Special controller command */

	dcwp = addr (trace_buf.dcw2);
	trace_buf.dcw2 = "0"b;
	dcw.address = rel (addr (trace_buf.trace));	/* Offset to core image */
	dcw.tally = "0100"b3;			/* It returns 64 words */
	return;
     end build_trace_dcw;


%page;

build_dau_dcw:
     proc;

/* Build dcw list to get all needed data from DAU. */

dcl  (list_idx, next_idx) fixed bin;

	list_idx = 1;
	idcwp = addr (dau_buf.list (list_idx).idcw);	/* First IDCW */
	dau_buf.list (list_idx).idcw = "0"b;
	idcw.command = "24"b3;			/* Read Config */
	idcw.code = "111"b;				/* IDCW */
	idcw.chan_cmd = "30"b3;			/* Want list in dev# order */
	dcwp = addr (dau_buf.list (list_idx).dcw);
	dau_buf.list (list_idx).dcw = "0"b;
	dcw.address = rel (addr (dau_buf.data (0)));
	dcw.tally = "0101"b3;			/* 65 words */
	dau_config_idx = 0;
	next_idx = 130;

	if stat_sw | mpc_only_sw then do;
	     idcw.control = "10"b;			/* set continue bit for prev IDCW */
	     dau_stat_idx = next_idx;
	     list_idx = list_idx + 1;
	     idcwp = addr (dau_buf.list (list_idx).idcw);
	     dau_buf.list (list_idx).idcw = "0"b;
	     idcw.command = "26"b3;			/* Read Statistics */
	     idcw.code = "111"b;			/* IDCW */
	     dcwp = addr (dau_buf.list (list_idx).dcw);
	     dau_buf.list (list_idx).dcw = "0"b;
	     dcw.address = rel (addr (dau_buf.data (next_idx)));
	     dcw.tally = "0473"b3;			/* 315 words */
	     next_idx = next_idx + 630;
	     end;

	if trace_sw then do;
	     idcw.control = "10"b;			/* set continue bit for prev IDCW */
	     dau_trace_idx = next_idx;
	     list_idx = list_idx + 1;
	     idcwp = addr (dau_buf.list (list_idx).idcw);
	     dau_buf.list (list_idx).idcw = "0"b;
	     idcw.command = "03"b3;			/* Read Trace table */
	     idcw.code = "111"b;			/* IDCW */
	     idcw.chan_cmd = "40"b3;			/* Controller cmd */
	     dcwp = addr (dau_buf.list (list_idx).dcw);
	     dau_buf.list (list_idx).dcw = "0"b;
	     dcw.address = rel (addr (dau_buf.data (next_idx)));
	     dcw.tally = "0100"b3;			/* 64 words */
	     next_idx = next_idx + 128;
	     end;

	if dump_sw then do;
	     idcw.control = "10"b;			/* set continue bit for prev IDCW */
	     dau_dump_idx = next_idx;			/* remember index */
						/* DAU memory size is 32K bytes. It will require eight sets */
						/* of IDCW/DCW/IDCW/DCW pairs to extract the data, */
						/* because we are limited to 4K bytes per I/O. */

	     do i = 1 to 8;
		list_idx = list_idx + 1;
		idcwp = addr (dau_buf.list (list_idx).idcw);
		dau_buf.list (list_idx).idcw = "0"b;
		idcw.command = "02"b3;		/* Read Memory */
		idcw.code = "111"b;			/* IDCW */
		idcw.control = "10"b;		/* set continue bit */
		idcw.chan_cmd = "40"b3;		/* Controller cmd */
		dcwp = addr (dau_buf.list (list_idx).dcw);
		dau_buf.list (list_idx).dcw = "0"b;
		dcw.address = rel (addr (dau_buf.control (i)));
		dcw.tally = "000000000001"b;
		dau_buf.control (i).addr = bit (multiply ((i - 1), 4096, 16), 16);
		dau_buf.control (i).tally = "1000"b4;	/* 4K bytes */
		dau_buf.control (i).fill = "0"b;
		list_idx = list_idx + 1;
		idcwp = addr (dau_buf.list (list_idx).idcw);
		dau_buf.list (list_idx).idcw = "0"b;
		idcw.command = "06"b3;		/* Do the read! */
		idcw.code = "111"b;			/* IDCW */
		idcw.control = "10"b;		/* set continue bit */
		idcw.chan_cmd = "40"b3;		/* Controller cmd */
		dcwp = addr (dau_buf.list (list_idx).dcw);
		dau_buf.list (list_idx).dcw = "0"b;
		dcw.address = rel (addr (dau_buf.data (next_idx)));
		dcw.tally = "2000"b3;		/* 1024 words */
		next_idx = next_idx + 2048;		/* 2K double-bytes */
	     end;
	     idcw.control = "00"b;			/* Reset continue bit on last IDCW */
	     end;
	return;
     end build_dau_dcw;


%page;
%include iom_pcw;
%page;
%include iom_dcw;
%page;
%include ioi_stat;
%page;
%include event_wait_info;
%page;
%include dump_mpc_data;
%page;
%include attach_mpc_data;
%page;
%include eurc_model_numbers;
     end dump_mpc;
