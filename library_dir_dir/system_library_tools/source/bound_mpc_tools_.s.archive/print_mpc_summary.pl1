/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* PRINT_MPC_SUMMARY - Print MPC and Device Statistics for MPC.
   coded December 1980 by Rich Coppola */
/* Modified May 1982 by Rich Coppola to add EURC support */
/* Modified June 1983 by Paul Farley to fix EURC bug. */
/* Modified June 1984 by Paul Farley for DAU (MSP800) support and
   to change "MTC Read Count" to "MTC Read Retry Count" */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

print_mpc_summary:
     proc (a_mpc_data_summaryp, a_sw, short_sw, a_bf_sw);

/* Arguments */

dcl  a_mpc_data_summaryp ptr;				/* Pointer to mpc data structure */
dcl  a_sw ptr;					/* Pointer to ioa_switch */
dcl  short_sw bit (1);				/* Set to fit display on 80 char terminal */
dcl  a_bf_sw bit (1);				/* set if only errordat to be printed */


/* Automatic */

dcl  sw ptr;					/* Pointer to ioa_switch */

dcl  (i, j, k) fixed bin;				/* Iteration variables */
dcl  pic8 picture "zzzzzzz9";
dcl  pic99 picture "99";
dcl  pic9 picture "9";
dcl  ndev fixed bin;
dcl  num_to_print fixed bin;
dcl  nprint fixed bin;
dcl  nblabel fixed bin;
dcl  blabelp ptr;
dcl  hint bit (1);
dcl  tape_sw bit (1);
dcl  mpc_only bit (1) init ("0"b);
dcl  bf_sw bit (1) init ("0"b);
dcl  print_mpc_line bit (1);
dcl  (urp_sw, eurc_sw) bit (1) init ("0"b);
dcl  dau_sw bit (1) init ("0"b);
dcl  (nonzero_cntrs) bit (1);
dcl  header_line char (136);
dcl  retl fixed bin (21);
dcl  SUBSYSTEM char (3);
dcl  temp_value float bin (21);
dcl  temp_con float bin (21);
dcl  temp fixed bin;
dcl  temp_float float (21);
dcl  indx fixed bin;
dcl  (ratio_need, stat_need) bit (1);
dcl  prev_drive_sw bit (1) init ("0"b);
dcl  ratio_wanted bit (1) init ("0"b);


dcl  1 line unal,
       2 title char (28),
       2 field (16) char (8);

dcl  1 liner unal,
       2 title char (28) init ("     Ratio"),
       2 field (16) char (8);


/* Constants */
dcl  eurlabel (15) char (28) static options (constant)
	init ("PDSI Receiver Errors", "PDSI Transmission Errors", "Cards Punched", "Cards Read", "PDSI Frames Received",
	"PDSI Frames Transmitted", "Connect PCW's", "Total PCW's", "IOM Transactions (L)", "IOM Transactions (U)",
	"IOM Word Transmissions (L)", "IOM Word Transmissions (U)", "Lines Printed", "PDSI Re-Transmissions",
	"Pages printed");

dcl  tlabel (8) char (28) static options (constant)
	init ("Records Read", "Records Written", "Records with Write Error", "Records with Read Error",
	"Transfer Timing Errors", "Marginal Records", "Single Track Corrections", "MTC Read Retry Count");

dcl  dlabel (16) char (28) int static options (constant)
	init ("Movement Seeks", "Data Sectors Written", "Data Sectors Read", "Data Transfer Commands",
	"Seek Incompletes", "Header Verification Errors", "Transfer Timing Errors", "Data Check Character Alerts",
	"Count Check Character Alerts", "Parity Errors", "Alternate Tracks Processed", "EDAC Correctable Errors",
	"EDAC Uncorrectable Errors", "Positioner Offsets", "Data Correction Init", "Search Alerts");

dcl  daulabel (16) char (28) int static options (constant)
	init ("Movement Seeks", "Data Sectors Written", "Data Sectors Read", "Data Transfer Commands",
	"Seek Incompletes", "Header Verification Errors", "Transfer Timing Errors", "Data Check Character Alerts",
	"Count Check Character Alerts", "Interface Errors", "Alternate Tracks Processed", "EDAC Correctable Errors",
	"EDAC Uncorrectable Errors", "Latencies", "Record Retry", "Sync Failures");


/* Based */


dcl  blabel (nblabel) char (28) based (blabelp);

/* External Entries */

dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$ioa_switch_nnl entry options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  ioa_$rs entry () options (variable);
dcl  decode_mpc_stats_$stat_ctrs_for_summary_ entry (ptr, ptr);
dcl  decode_mpc_stats_$dau_stat_ctrs_for_summary_ entry (ptr, ptr);
dcl  decode_mpc_stats_$err_data_for_summary_ entry (ptr, ptr);
dcl  (addr, divide, hbound, length, min, rtrim, string, substr) builtin;
dcl  (size, zerodivide) condition;


summary:
     entry (a_mpc_data_summaryp, a_sw, short_sw, a_bf_sw);
start:
	mpc_data_summaryp = a_mpc_data_summaryp;
	sw = a_sw;
	bf_sw = a_bf_sw;

	if short_sw
	then num_to_print = 6;
	else num_to_print = 12;
	ndev = mpc_data_summary.n_devices;

	if substr (mpc_data_summary.name, 1, 3) = "urp" then do;
	     header_line = "";
	     retl = 0;
	     urp_sw = "1"b;
	     eurc_sw = "0"b;
	     do i = 1 to hbound (eurc_model_numbers, 1) while (eurc_sw = "0"b);
		if mpc_data_summary.model = eurc_model_numbers (i) then eurc_sw = "1"b;
	     end;
	     if eurc_sw = "1"b then do;		/* If EURC controller ... */
		nblabel = hbound (eurlabel, 1);
		blabelp = addr (eurlabel);
		go to display_eurc;
		end;
	     end;


	else if substr (mpc_data_summary.name, 1, 3) = "mtp" then do;
						/* If tape controller ... */
	     call ioa_$rs ("FW Rev. ^a", header_line, retl, mpc_data_summary.firmware_rev);
	     nblabel = hbound (tlabel, 1);
	     blabelp = addr (tlabel);
	     tape_sw = "1"b;
	     SUBSYSTEM = "tap";
	     end;

	else if substr (mpc_data_summary.name, 1, 3) = "msp" then do;
						/* If disk controller ... */
	     if mpc_data_summary.model = 800 then do;	/* DAU? */
		call ioa_$rs ("FW Rev. ^a, HW Rev. ^2.4b(hex)", header_line, retl, mpc_data_summary.firmware_rev,
		     mpc_data_summary.hw_rev);
		nblabel = hbound (daulabel, 1);
		blabelp = addr (daulabel);
		dau_sw = "1"b;
		end;
	     else do;
		call ioa_$rs ("FW Rev. ^a", header_line, retl, mpc_data_summary.firmware_rev);
		nblabel = hbound (dlabel, 1);
		blabelp = addr (dlabel);
		end;
	     tape_sw = "0"b;
	     SUBSYSTEM = "dsk";
	     end;

	call ioa_$ioa_switch (sw, "^/^[^23x^;^47x^]^a^/", short_sw, substr (header_line, 1, retl));

	allocate mpc_stat_anal;
	print_mpc_line = "0"b;


	if ^urp_sw & ^dau_sw then do;			/* old disk & tape */
	     nonzero_cntrs = "0"b;
	     do i = 1 to 12 while (^nonzero_cntrs);
		if mpc_data_summary.polled_stat_counters (i) ^= 0 then nonzero_cntrs = "1"b;
	     end;

	     if nonzero_cntrs then do;
		call decode_mpc_stats_$stat_ctrs_for_summary_ (mpc_data_summaryp, mpc_stat_analp);

		call ioa_$ioa_switch (sw, "^/The LA-PSI ERROR COUNTERS contain the following information:");

		do i = 1 to mpc_stat_anal.num_ctr_interps;
		     call ioa_$ioa_switch (sw, "^a = ^d", rtrim (mpc_stat_anal.interp_stat_ctrs (i)),
			mpc_stat_anal.stat_cntr_cnt (i));
		end;
		print_mpc_line = "1"b;		/* remember */
		call ioa_$ioa_switch (sw, "^/");
		end;

	     end;

	else if dau_sw then do;			/* DAU? */
	     call ioa_$ioa_switch (sw, "^/Latest Channel Interface Configuration:");
	     call ioa_$ioa_switch_nnl (sw, "^xCI-0 ^[on^;off^]line, CI-1 ^[on^;off^]line, ",
		mpc_data_summary.ci_0_online, mpc_data_summary.ci_1_online);
	     call ioa_$ioa_switch_nnl (sw, "^xPSI-0 ^[2^;4^]trip, PSI-1 ^[2^;4^]trip, ", mpc_data_summary.psi0_2trip,
		mpc_data_summary.psi1_2trip);
	     call ioa_$ioa_switch (sw, "^xPSI-2 ^[2^;4^]trip, PSI-3 ^[2^;4^]trip^/", mpc_data_summary.psi2_2trip,
		mpc_data_summary.psi3_2trip);

	     nonzero_cntrs = "0"b;
	     do i = 1 to 20 while (^nonzero_cntrs);
		if mpc_data_summary.psi_cntr (i) ^= 0 then nonzero_cntrs = "1"b;
	     end;

	     if nonzero_cntrs | mpc_data_summary.err_interrupts ^= 0 then do;
		call decode_mpc_stats_$dau_stat_ctrs_for_summary_ (mpc_data_summaryp, mpc_stat_analp);

		call ioa_$ioa_switch (sw, "^/The DAU/PSI ERROR COUNTERS contain the following information:");

		do i = 1 to mpc_stat_anal.num_ctr_interps;
		     call ioa_$ioa_switch (sw, "^a = ^d", rtrim (mpc_stat_anal.interp_stat_ctrs (i)),
			mpc_stat_anal.stat_cntr_cnt (i));
		end;

		if mpc_data_summary.err_interrupts ^= 0 then do;
		     call ioa_$ioa_switch (sw, "^/Last DAU Extended Error Info (72 Bytes):^3(^/^24( ^2.4b^)^)",
			mpc_data_summary.err_info);
		     end;
		print_mpc_line = "1"b;		/* remember */
		call ioa_$ioa_switch (sw, "^/");
		end;

	     end;


	if mpc_data_summary.register ^= "0"b then do;
	     call decode_mpc_stats_$err_data_for_summary_ (mpc_data_summaryp, mpc_stat_analp);

	     if mpc_stat_anal.num_interps ^= 0 then print_mpc_line = "1"b;
						/* remember */
	     call ioa_$ioa_switch (sw, "^/The MPC ERROR DATA REGISTER contains the following information:");

	     do i = 1 to mpc_stat_anal.num_interps;
		if mpc_stat_anal.HINT (i) ^= ""
		then hint = "1"b;
		else hint = "0"b;
		call ioa_$ioa_switch (sw, "^a^[ Suspect: ^a^]", rtrim (mpc_stat_anal.message (i)), hint,
		     rtrim (mpc_stat_anal.HINT (i)));
	     end;

	     call ioa_$ioa_switch (sw, "The last INTAR address is:^2x^4.4b", mpc_stat_anal.intar);

	     if SUBSYSTEM = "dsk"
	     then					/* AUXAR only valid for disk MPCs */
		call ioa_$ioa_switch (sw, "The last AUXAR address is:^2x^4.4b", mpc_stat_anal.auxar);
	     call ioa_$ioa_switch (sw, "The ERROR INTERRUPT COUNTER is: ^6d^/", mpc_stat_anal.err_ctr);

	     end;


	if print_mpc_line = "0"b & (mpc_only | urp_sw)
	then call ioa_$ioa_switch (sw, "^/^11tNo error indications encountered for MPC ^a.^2/", mpc_data_summary.name);

	if (urp_sw | mpc_only) then return;

display_eurc:
	if eurc_sw then do;				/* do eurc specifics */
	     call ioa_$ioa_switch (sw, "PROM	  CORE  IOM  SPECIAL-CONTROLLER  LINK/EDIT  PDSI  SELF-TEST  DAI");
	     call ioa_$ioa_switch (sw, "REVISION^15t^2.4b^20t^2.4b^40t^2.4b^51t^2.4b^57t^2.4b^68t^2.4b^73t^2.4b",
		mpc_data_summary.core, mpc_data_summary.iom, mpc_data_summary.special_controller,
		mpc_data_summary.link_edit, mpc_data_summary.pdsi_application, mpc_data_summary.self_test,
		mpc_data_summary.dai_application);
	     call ioa_$ioa_switch (sw, "^/Uptime Clock-seconds ^12d", mpc_data_summary.uptime_clock);
	     end;



	do i = 1 to ndev by num_to_print;
	     nprint = min (num_to_print, ndev + 1 - i);


/* start info about device  */

	     string (line) = "";
	     if eurc_sw
	     then line.title = "Device Name";
	     else line.title = "Subsystem";

	     if ^eurc_sw
	     then do j = 1 to nprint;
		substr (line.field (j), 5) = SUBSYSTEM || mpc_data_summary.subsystem (i + j - 1);
	     end;

	     else do j = 1 to nprint;
		substr (line.field (j), 9 - length (rtrim (mpc_data_summary.dev_name (i + j - 1)))) =
		     mpc_data_summary.dev_name (i + j - 1);
	     end;

	     call ioa_$ioa_switch (sw, "^a", string (line));

	     string (line) = "";
	     if ^eurc_sw
	     then line.title = "Drive";

	     else line.title = "Logical Channel";

	     do j = 1 to nprint;
		pic8 = mpc_data_summary.driveno (i + j - 1);
		line.field (j) = pic8;
	     end;
	     call ioa_$ioa_switch (sw, "^a", string (line));


	     if ^eurc_sw then do;
		string (line) = "";
		line.title = "Prev_drive";
		do j = 1 to nprint;
		     if mpc_data_summary.prev_driveno (i + j - 1) ^= 0 then do;
			pic8 = mpc_data_summary.prev_driveno (i + j - 1);
			line.field (j) = pic8;
			prev_drive_sw = "1"b;
			end;
		end;

		if prev_drive_sw then call ioa_$ioa_switch (sw, "^a", string (line));
		end;

	     string (line) = "";
	     line.title = "Model";
	     do j = 1 to nprint;
		substr (line.field (j), 9 - length (rtrim (mpc_data_summary.dev_model (i + j - 1)))) =
		     mpc_data_summary.dev_model (i + j - 1);
	     end;
	     call ioa_$ioa_switch (sw, "^a", string (line));

	     string (line) = "";

	     if eurc_sw then do;
display_eurc_stats:
		do k = 1 to hbound (blabel, 1);
		     string (line) = "";
		     string (liner) = "";
		     line.title = blabel (k);

		     do j = 1 to nprint;
			indx = (i + j - 1);
			pic8 = mpc_data_summary.dev_stat (indx).value (k);
			line.field (j) = pic8;
		     end;
		     call ioa_$ioa_switch (sw, "^a", string (line));
		end;

		call ioa_$ioa_switch (sw, "^2/");
		go to end_eurc_dev;
		end;


	     if tape_sw then do;
		if mpc_data_summary.model < 610
		then line.title = "Port";
		else line.title = "TM/Port";
		end;

	     else line.title = "CA/Port";

	     do j = 1 to nprint;
		line.field (j) = "";
		if (^tape_sw) | (mpc_data_summary.model > 602) then do;
		     pic9 = mpc_data_summary.ca (i + j - 1);
		     pic99 = mpc_data_summary.port (i + j - 1);
		     substr (line.field (j), 5) = pic9 || "/" || pic99;

		     end;

		else do;
		     pic8 = mpc_data_summary.port (i + j - 1);
		     line.field (j) = pic8;
		     end;
	     end;

	     call ioa_$ioa_switch (sw, "^a", string (line));

	     line.title = "OPI";
	     do j = 1 to nprint;
		line.field (j) = "";
		if mpc_data_summary.opi (i + j - 1)
		then line.field (j) = "      ON";
		else line.field (j) = "     OFF";
	     end;

	     call ioa_$ioa_switch (sw, "^a^/", string (line));


	     on zerodivide
		begin;
		liner.field (j) = "  ******";
		goto pr_stat;
	     end;

	     on size
		begin;
		line.field (j) = "  ******";
		goto recover_size;
	     end;


	     do k = 1 to hbound (blabel, 1);
		string (line) = "";
		string (liner) = "";
		if ^tape_sw
		then liner.title = "     Ratio * 100";
		else liner.title = "     Ratio";
		line.title = blabel (k);

		ratio_need, stat_need = "0"b;
		do j = 1 to nprint;

		     indx = (i + j - 1);

		     if mpc_data_summary.dev_stat (indx).value (k) ^= 0 then do;
			if bf_sw
			then			/* dont display anything but error counters */
			     if k <= 2 then goto skip_print;
			     else if ^tape_sw & k <= 4 then goto skip_print;
			stat_need = "1"b;
			pic8 = mpc_data_summary.dev_stat (indx).value (k);
			line.field (j) = pic8;
recover_size:
			if ^tape_sw
			then if k > 4 then do;
				ratio_need = "1"b;
				temp_value = mpc_data_summary.dev_stat (indx).value (k);
				goto msp_dev (k);
end_msp_dev:
				temp_float = divide (temp_value, temp_con, 21);
				call ioa_$rsnnl ("^8.3f", liner.field (j), temp, temp_float);
				end;
			     else ;
			else if k > 2 then do;
			     ratio_need = "1"b;
			     temp_value = mpc_data_summary.dev_stat (indx).value (k);
			     goto mtp_dev (k);
end_mtp_dev:
			     temp_float = divide (temp_value, temp_con, 21);

			     call ioa_$rsnnl ("^8.3f", liner.field (j), temp, temp_float);
			     end;
			end;
		end;
pr_stat:
		if stat_need then do;
		     call ioa_$ioa_switch (sw, "^a", string (line));
		     if ratio_need & ratio_wanted then call ioa_$ioa_switch (sw, "^a", string (liner));
		     end;
skip_print:
		ratio_need, stat_need = "0"b;
	     end;
end_eurc_dev:
	     call ioa_$ioa_switch (sw, "^2/");
	end;
	return;

msp_dev (5):
msp_dev (6):
msp_dev (7):
msp_dev (8):
msp_dev (9):
msp_dev (10):
msp_dev (12):
msp_dev (13):
msp_dev (15):
msp_dev (16):
	temp_con = mpc_data_summary.dev_stat (indx).value (4) * 100;
	goto end_msp_dev;

msp_dev (11):
msp_dev (14):
	temp_con = mpc_data_summary.dev_stat (indx).value (1) * 100;
	goto end_msp_dev;

mtp_dev (5):
mtp_dev (6):
	temp_con = mpc_data_summary.dev_stat (indx).value (1) + mpc_data_summary.dev_stat (indx).value (2);
	goto end_mtp_dev;

mtp_dev (3):
	temp_con = mpc_data_summary.dev_stat (indx).value (2);
	goto end_mtp_dev;

mtp_dev (4):
mtp_dev (7):
mtp_dev (8):
	temp_con = mpc_data_summary.dev_stat (indx).value (1);
	goto end_mtp_dev;

%page;
display_mpc_:
     entry (a_mpc_data_summaryp, a_sw, short_sw, a_bf_sw);

	mpc_only = "1"b;
	go to start;

%page;
%include poll_mpc_data;
%page;
%include dump_mpc_data;
%page;
%include eurc_model_numbers;
     end print_mpc_summary;

