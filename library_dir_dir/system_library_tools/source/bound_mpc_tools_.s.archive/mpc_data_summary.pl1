/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* MPC_DATA_SUMMARY: Command to summarize mpc data from the syserr log collected by poll_mpc */

/* Written MAY 1981 by Rich Fawcett  */
/* Most of this program was borrowed from the mos_edac_summary command. */
/* Modified May 1982 by Rich Coppola for EURC support */
/* Modified June 1983 by Paul Farley to fix EURC bugs. */
/* Modified Sept. 1983 to change "-mpc" arg to set mpc_only flag and to
   only update stats_data.polled_error_data if error_data reg is NON-ZERO.
   Modified Jan 1984 by Paul Farley to fix "-ext" function (phx16436).
   Modified June 1984 by Paul Farley to add DAU (MSP800) support.
   Modified March 1985 by Paul Farley to increase the size of psi_cntr (PBF).
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

mpc_data_summary:
     proc;

dcl  name char (17) int static options (constant) init ("mpc_data_summary");
						/* Name of procedure */
dcl  check_mpc fixed bin;
dcl  code fixed bin (35);				/* Standard system status code */
dcl  open_status bit (36) aligned;			/* Code from syserr_log_util_$open */
dcl  ptr_array (2) ptr;				/* An array of pointers as required by get_temp_segment_ */
dcl  tab_cnt fixed bin init (0);			/* Number of seperate status found */
dcl  mask bit (36) aligned init ("0"b);			/* Mask of significant bits in status word */
dcl  arg_ptr ptr;					/* Pointer to an argument */
dcl  arg_len fixed bin;				/* Length of an argument */
dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
dcl  arg_count fixed bin;				/* The number of arguments */
dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
dcl  for_len fixed bin;				/* Saved length of -for argument */
dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
dcl  more_args bit (1);				/* Set while there are more arguments to scan */
dcl  short_display_sw bit (1) init ("1"b);
dcl  short_arg bit (1) init ("0"b);
dcl  top_of_page_req bit (1) init ("0"b);
dcl  mpc_only bit (1) init ("0"b);
dcl  bf_sw bit (1) init ("0"b);
dcl  all_mpcs bit (1) init ("0"b);			/* all mpc's that we find will be summarized
						   if no mpc name are in put this will set set  */
dcl  (output_file, of_file_att, of_file_open) bit (1) init ("0"b);
						/* output file to be used and if it is attached and open */
dcl  ext_file bit (1) init ("0"b);			/* set if the output file is to be extended */
dcl  expand_sw bit (1) init ("0"b);			/* set if each entry found is the syserr_log is to also be printed */
dcl  segs_allocated bit (1) init ("0"b);		/* Set after work segments created */
dcl  (urp_sw, eurc_sw, dau_sw) bit (1) init ("0"b);
dcl  from_time fixed bin (71);			/* Time specified on -from */
dcl  to_time fixed bin (71);				/* Time specified on -to */
dcl  for_time fixed bin (71);				/* Time specified on -for */
dcl  count_limit fixed bin init (0);			/* Results for -limit arg */
dcl  day_limit fixed bin init (0);			/* Results for -day_limit arg */
dcl  workp ptr;					/* Pointer to work segment */
dcl  arg_no fixed bin init (1);			/* For scanning argument list */
dcl  msg_time fixed bin (71);				/* Time of syserrmessage */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  mpc_cnt fixed bin init (0);			/* Number of MPCs requested */
dcl  temp fixed bin;

dcl  output_iocbp ptr;				/* pointer to the output iocb */
dcl  of_path char (168);				/* path name used for output file */
dcl  attach_desc char (180);				/* variable used to build description used
						   for output file when attached */

dcl  1 work aligned based (workp),			/* Declaration of work segment */
       2 mpcreq (32) char (4),			/* Table of requested MPCs */
       2 stats_block (32, size (stats_data)) bit (36),	/* stats for each mpc */
       2 buffer (500) bit (36) aligned;			/* Syserr messages are read here */



dcl  1 stats_data aligned based (stats_block_ptr),
       2 version fixed bin,
       2 name char (4),				/* Name of MPC */
       2 model fixed bin,
       2 firmware_rev char (2),			/* Firmware revision */
						/* *old* MSP, MTP and URP specific data */
       2 config_sw bit (16),				/* Configuration switches */
       2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
       2 interrupt_counter fixed bin (35),		/* the error interrupt counter */
       2 register bit (16),				/* the MPC's error data register */
       2 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
       2 INTAR bit (16),				/* thar addr at which the error occurred */
						/* EURC Specific data */
       2 eurc_specifics,
         3 uptime_clock fixed bin (32) uns,
         3 prom_revision,
	 4 core bit (8),
	 4 iom bit (8),
	 4 special_controller bit (8),
	 4 link_edit bit (8),
	 4 pdsi_application bit (8),
	 4 self_test bit (8),
	 4 dai_application bit (8),			/* DAU specific data */
       2 hw_rev bit (8) unal,				/* DAU Revision */
       2 config unal,
         3 ci_0_online bit (1),
         3 ci_1_online bit (1),
         3 psi0_2trip bit (1),			/* 0= 4trip, 1= 2trip */
         3 psi1_2trip bit (1),
         3 psi2_2trip bit (1),
         3 psi3_2trip bit (1),
       2 err_interrupts fixed bin (35),
       2 err_info (72) bit (8) unal,
       2 psi_cntr (20) fixed bin (35),			/* Misc. data */
       2 the_mtp_sw bit (1),
       2 the_msp_sw bit (1),
       2 the_urp_sw bit (1),
       2 the_eurc_sw bit (1),
       2 the_dau_sw bit (1),
       2 type_other fixed bin,			/* = 0 device stats stored by device number,
						   = 1 device stats stored by ca number and port number
						   = 2 device stats stored by ca number, port number
						   and logical device */
       2 entries_found fixed bin,			/* number of syserr_log entries */
       2 first_time fixed bin (71) unaligned,		/* time fo the first syserr_log entry found fo this mpc */
       2 last_time fixed bin (71) unaligned,		/* time of the last syserr_log entry found for this mpc */
       2 dev_stat (0:3, 0:16, 0:1) like dev_stat,		/* array for disk with removable device number
						   indexed by ca and port */
       2 end_of_status_data fixed bin;


dcl  1 my_dev_info (my_n_devices) like dev_info based (my_dev_ptr);
dcl  1 my_stat_info (my_n_stats) like stat_info based (my_stat_ptr);

dcl  (my_n_devices, my_n_stats) fixed bin;
dcl  (my_dev_ptr, my_stat_ptr) ptr;
dcl  stats_block_ptr ptr;				/* pointers used to optmize arrays */
dcl  (F_TIME, L_TIME) char (24);

/* entrys for syserr_log */

dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
dcl  syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  syserr_log_util_$close entry (fixed bin (35));
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));

/* io type entrys */

dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$user_output ext ptr;

/* misc entries */

dcl  com_err_ entry options (variable);
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  print_mpc_summary entry (ptr, ptr, bit (1), bit (1));
dcl  print_mpc_summary$display_mpc_ entry (ptr, ptr, bit (1), bit (1));
dcl  display_mpc_data_ entry (ptr, ptr, bit (1));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);

/* error_table_ */

dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);

dcl  cleanup condition;

dcl  (addr, hbound, low, mod, null, rtrim, size, substr, unspec) builtin;

/* Initialization */

	on cleanup call clean_up;
	output_iocbp = iox_$user_output;
	call get_temp_segments_ (name, ptr_array, code);	/* Get a work segment */
	if code ^= 0 then do;
	     call com_err_ (code, name, "Can't get temp segment");
	     go to done;
	     end;
	segs_allocated = "1"b;			/* Remember that they are allocated */
	workp = ptr_array (1);			/* Copy pointer to my segment */

	stats_block (*, *) = ""b;			/* zero status area */

	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
	call cu_$arg_count (arg_count);		/* And the length */
	more_args = (arg_count > 0);			/* Set if args to scan */
	call scan_args;				/* Scan the argument list */

	if mpc_cnt = 0 then all_mpcs = "1"b;


	if output_file then do;
	     if short_arg
	     then short_display_sw = "1"b;
	     else short_display_sw = "0"b;
	     attach_desc = "vfile_ " || rtrim (of_path);
	     if ext_file then attach_desc = rtrim (attach_desc) || " -extend";
	     call iox_$attach_ioname ("mpc_sum_sw", output_iocbp, attach_desc, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "attaching ^a", rtrim (of_path));
		goto done;
		end;
	     of_file_att = "1"b;
	     call iox_$open (output_iocbp, 2, "0"b, code);/* open for stream output */
	     if code ^= 0 then do;
		call com_err_ (code, name, "opening ^a", rtrim (of_path));
		goto done;
		end;
	     of_file_open = "1"b;
	     end;
	temp = get_line_length_$switch (output_iocbp, code);
	if ^short_arg then do;
	     if code ^= 0 | temp > 80
	     then short_display_sw = "0"b;
	     else short_display_sw = "1"b;
	     end;
	else short_display_sw = "1"b;
	if code ^= 0 | output_file
	then top_of_page_req = "1"b;
	else top_of_page_req = "0"b;


	call syserr_log_util_$open (open_status, code);	/* Open the syserr log */
	if code ^= 0 | substr (open_status, 1, 2) ^= "11"b then do;
						/* If error */
	     call print_syserr_msg_$open_err (open_status, name, code);
	     if code ^= 0 then go to done;		/* Not recoverable */
	     end;

	if ^from_sw then do;			/* No -from, so start at beginning */
	     call syserr_log_util_$search (0, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Can't find first message in log.");
		go to done;
		end;
	     from_time = msg_time;			/* Official starting time */
	     end;
	else do;					/* -from used, find rightmessage */
	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Locating first message requested.");
		go to done;
		end;
	     end;

	if for_sw then do;				/* Now can compute -for limit */
	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "-for ^a", for_arg);
		go to done;
		end;
	     to_sw = "1"b;				/* Now, just as if -to was specified */
	     end;
	if ^to_sw then to_time = from_time;		/* Initialize lastmessage time */

	syserr_msgp = addr (work.buffer);		/* Read here */

/* Loop thru the file */

loop:
	call syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
	if code ^= 0 then do;
	     if code = error_table_$end_of_info then go to print;
	     call com_err_ (code, name, "Reading syserr log");
	     go to done;
	     end;

	if to_sw then do;				/* If time limit */
	     if syserr_msg.time > to_time then go to print;
	     end;
	else to_time = syserr_msg.time;		/* Save lastmessage time */

	if syserr_msg.data_code = SB_mpc_poll & syserr_msg.data_size > 0 then do;
	     poll_mpc_datap = addr (syserr_msg.data);
	     if look_for (poll_mpc_data.name, stats_block_ptr) then call count_it;
	     end;

	go to loop;

/* End of log reached */

print:
	call print_it;				/* Print results */

/* End of command */

done:
	call clean_up;
	return;




count_it:
     proc;

/* This proc will take the syserr entry in poll_mpc_data format and
   expand it to the stats_data so that the tracking by ca,port,logical */

dcl  (i, st, logical, ca_num, port_num, st_inx) fixed bin;

	if poll_mpc_data.version ^= poll_mpc_data_version_2 then do;
						/* wrong version? */
	     if ^bf_sw
	     then call com_err_ (0, name, "Syserr#^d contains a non-supported version of ^d, message skipped.",
		     syserr_msg.seq_num, poll_mpc_data.version);
	     return;
	     end;
	poll_mpc_specp = addr (poll_mpc_data.specific);
	if stats_data.first_time = 0 then do;
	     stats_data.version = poll_mpc_data.version;
	     stats_data.name = poll_mpc_data.name;
	     stats_data.model = poll_mpc_data.model;
	     stats_data.first_time = syserr_msg.time;

	     if substr (stats_data.name, 1, 3) = "urp" then do;
		stats_data.the_urp_sw = "1"b;
		stats_data.firmware_rev = "";
		do i = 1 to hbound (eurc_model_numbers, 1) while (stats_data.the_eurc_sw = "0"b);
		     if stats_data.model = eurc_model_numbers (i) then stats_data.the_eurc_sw = "1"b;
		end;
		end;
	     else if substr (stats_data.name, 1, 3) = "mtp" then do;
		stats_data.the_mtp_sw = "1"b;
		stats_data.firmware_rev = poll_mtp_data.firmware_rev;
		end;
	     else if substr (stats_data.name, 1, 3) = "msp" then do;
		stats_data.the_msp_sw = "1"b;
		if stats_data.model = 800 then do;
		     stats_data.the_dau_sw = "1"b;
		     stats_data.firmware_rev = poll_dau_data.fw_rev;
		     end;
		else stats_data.firmware_rev = poll_msp_data.firmware_rev;
		end;
	     end;
	stats_data.entries_found = stats_data.entries_found + 1;
	stats_data.last_time = syserr_msg.time;

	if expand_sw then call expand_syserr_entry;	/* user wants each entry expanded */

	urp_sw = stats_data.the_urp_sw;
	eurc_sw = stats_data.the_eurc_sw;
	dau_sw = stats_data.the_dau_sw;

	if ^urp_sw & ^dau_sw
	then					/* URC & EURC dont have any */
	     do i = 1 to 12;
	     stats_data.polled_stat_counters (i) =
		stats_data.polled_stat_counters (i) + poll_mtp_data.polled_stat_counters (i);
	end;

	else if dau_sw
	then do i = 1 to 20;
	     stats_data.psi_cntr (i) = stats_data.psi_cntr (i) + poll_dau_data.psi_cntr (i);
	end;

	if ^eurc_sw & ^dau_sw & poll_mtp_data.register ^= "0"b then do;
						/* any error bits on? */
	     if stats_data.the_mtp_sw then do;
		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_mtp_data.interrupt_counter;
		stats_data.register = stats_data.register | poll_mtp_data.register;
		stats_data.AUXAR = poll_mtp_data.AUXAR;
		stats_data.INTAR = poll_mtp_data.INTAR;
		end;
	     else if stats_data.the_msp_sw then do;
		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_msp_data.interrupt_counter;
		stats_data.register = stats_data.register | poll_msp_data.register;
		stats_data.AUXAR = poll_msp_data.AUXAR;
		stats_data.INTAR = poll_msp_data.INTAR;
		end;
	     else if stats_data.the_urp_sw then do;
		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_urp_data.interrupt_counter;
		stats_data.register = stats_data.register | poll_urp_data.register;
		stats_data.INTAR = poll_urp_data.INTAR;
		end;
	     end;

	if eurc_sw then do;
	     stats_data.uptime_clock = poll_eurc_data.uptime_clock + stats_data.uptime_clock;
	     stats_data.core = poll_eurc_data.core;
	     stats_data.iom = poll_eurc_data.iom;
	     stats_data.special_controller = poll_eurc_data.special_controller;
	     stats_data.link_edit = poll_eurc_data.link_edit;
	     stats_data.pdsi_application = poll_eurc_data.pdsi_application;
	     stats_data.self_test = poll_eurc_data.self_test;
	     stats_data.dai_application = poll_eurc_data.dai_application;
	     end;

	else if dau_sw then do;
	     stats_data.hw_rev = poll_dau_data.hw_rev;
	     stats_data.config = poll_dau_data.config;
	     if poll_dau_data.ext_size ^= 0 then stats_data.err_info (*) = poll_dau_data.err_info;
	     stats_data.err_interrupts = stats_data.err_interrupts + poll_dau_data.err_interrupts;
	     end;

	if mpc_only | urp_sw then return;		/* all done? */

	if eurc_sw then do;
	     my_n_devices = poll_eurc_data.n_devices;
	     my_dev_ptr = addr (poll_eurc_data.dev_info);
	     my_n_stats = poll_eurc_data.n_stats;
	     my_stat_ptr = addr (poll_eurc_data.stat_info);
	     end;


	else if dau_sw then do;
	     my_n_devices = poll_dau_data.n_devices;
	     my_dev_ptr = addr (poll_dau_data.dev_info);
	     my_n_stats = poll_dau_data.n_stats;
	     my_stat_ptr = addr (poll_dau_data.stat_info);
	     end;

	else if stats_data.the_mtp_sw | stats_data.the_msp_sw then do;
	     my_n_devices = poll_mtp_data.n_devices;
	     my_dev_ptr = addr (poll_mtp_data.dev_info);
	     my_n_stats = poll_mtp_data.n_stats;
	     my_stat_ptr = addr (poll_mtp_data.stat_info);
	     end;

	do st = 1 to my_n_stats;
	     stat_info_ptr = addr (my_stat_info (st));
	     dev_info_ptr = addr (my_dev_info (stat_info.dev_index));

/* MPC can return a device number but not if opi is down, then data is invalid */

	     if ^dev_info.opi
	     then if ^eurc_sw then goto skip_dev_no_opi;
	     port_num = dev_info.driveno;		/* setup as if type_other = 0 */
	     ca_num = 0;
	     logical = 0;				/* now see what type is is */
	     if stats_data.the_msp_sw then do;
		if substr (dev_info.dev_model, 4, 1) = "5"
		then if substr (dev_info.dev_model, 6, 1) ^= "9" then do;
			logical = mod (dev_info.driveno, 2);
			type_other = 2;
			end;
		     else ;
		else ;
		ca_num = dev_info.ca;
		port_num = dev_info.port;
		if stats_data.type_other < 1 then stats_data.type_other = 1;
		end;
	     if stats_data.the_mtp_sw & stats_data.model >= 610 then do;
		ca_num = dev_info.ca;
		port_num = dev_info.port;
		if stats_data.type_other < 1 then stats_data.type_other = 1;
		end;
	     dev_stat_ptr = addr (stats_data.dev_stat (ca_num, port_num, logical));
	     dev_stat.subsystem = dev_info.subsystem;
	     if dev_stat.driveno ^= dev_info.driveno then dev_stat.prev_driveno = dev_stat.driveno;
	     dev_stat.driveno = dev_info.driveno;
	     dev_stat.opi = dev_info.opi;
	     dev_stat.ca = dev_info.ca;
	     dev_stat.port = dev_info.port;
	     dev_stat.dev_model = dev_info.dev_model;
	     dev_stat.dev_name = substr (dev_info.dev_name, 1, 6);
	     st_inx = stat_info.stat_index;
	     dev_stat.value (st_inx) = dev_stat.value (st_inx) + stat_info.value;
skip_dev_no_opi:
	end;

     end count_it;


look_for:
     proc (mpc_name, stat_ptr) returns (bit (1));

/* This proc will return a bit = "1"b then we want to count this data */

dcl  mpc_name char (4) aligned;
dcl  stat_ptr ptr;
dcl  i;
look:
	do i = 1 to mpc_cnt;
	     if mpc_name = work.mpcreq (i) then do;
		stat_ptr = addr (work.stats_block (i, 1));
		return ("1"b);
		end;
	end;
	if all_mpcs then do;			/* count all we find */
	     mpc_cnt = mpc_cnt + 1;
	     work.mpcreq (mpc_cnt) = mpc_name;
	     stat_ptr = addr (work.stats_block (mpc_cnt, 1));
	     return ("1"b);
	     end;
	stat_ptr = null ();
	return ("0"b);
     end look_for;


/* Procedure to print results */

print_it:
     proc;
dcl  idx fixed bin;

	do idx = 1 to mpc_cnt;
	     stats_block_ptr = addr (stats_block (idx, 1));
	     if stats_data.entries_found ^= 0 then do;
		stats_data.end_of_status_data = 1;
		mpc_data_summaryp = ptr_array (2);
		call pack;			/* set up format for printing */
		call date_time_ ((stats_data.first_time), F_TIME);
		call date_time_ ((stats_data.last_time), L_TIME);
		if top_of_page_req
		then call ioa_$ioa_switch (output_iocbp, "^|");
		else call ioa_$ioa_switch (output_iocbp, "^2/");
		if short_display_sw
		then call ioa_$ioa_switch (output_iocbp,
			"^23x^d syserr_log entries for ^a^/^23xfrom: ^a^/^23x^2xto: ^a", stats_data.entries_found,
			stats_data.name, F_TIME, L_TIME);

		else call ioa_$ioa_switch (output_iocbp,
			"^47x^d syserr_log entries for ^a^/^47xfrom: ^a^/^47x^2xto: ^a", stats_data.entries_found,
			stats_data.name, F_TIME, L_TIME);
		if mpc_only
		then call print_mpc_summary$display_mpc_ (mpc_data_summaryp, output_iocbp, short_display_sw, bf_sw);
		else call print_mpc_summary (mpc_data_summaryp, output_iocbp, short_display_sw, bf_sw);
		end;

	     else do;
		call date_time_ (from_time, F_TIME);
		call date_time_ (to_time, L_TIME);
		if top_of_page_req
		then call ioa_$ioa_switch (output_iocbp, "^|");
		else call ioa_$ioa_switch (output_iocbp, "^2/");
		call ioa_$ioa_switch (output_iocbp,
		     "^[^23x^;^47x^]No syserr_log entries found for ^a^/^[^23x^;^47x^]from: ^a^/^[^25x^;^49x^]to: ^a",
		     short_display_sw, work.mpcreq (idx), short_display_sw, F_TIME, short_display_sw, L_TIME);
		end;
	end;


     end print_it;


pack:
     proc;

dcl  (logical, ca_num, port_num, m, n) fixed bin;
dcl  from_data char (80) based (from_ptr);
dcl  to_data char (80) based (to_ptr);
dcl  1 next_stat like dev_stat based (next_ptr);
dcl  (next_ptr, to_ptr, from_ptr) ptr;


	unspec (mpc_data_summary) = ""b;		/* zero area */
	mpc_data_summary.version = mpc_data_summary_version_2;
	mpc_data_summary.name = stats_data.name;
	mpc_data_summary.model = stats_data.model;
	mpc_data_summary.firmware_rev = stats_data.firmware_rev;
	mpc_data_summary.config_sw = stats_data.config_sw;
	mpc_data_summary.polled_stat_counters (*) = stats_data.polled_stat_counters (*);
	mpc_data_summary.interrupt_counter = stats_data.interrupt_counter;
	mpc_data_summary.register = stats_data.register;
	mpc_data_summary.AUXAR = stats_data.AUXAR;
	mpc_data_summary.INTAR = stats_data.INTAR;
	mpc_data_summary.uptime_clock = stats_data.uptime_clock;
	mpc_data_summary.prom_revision = stats_data.prom_revision;
	mpc_data_summary.hw_rev = stats_data.hw_rev;
	mpc_data_summary.config = stats_data.config;
	mpc_data_summary.err_interrupts = stats_data.err_interrupts;
	mpc_data_summary.psi_cntr (*) = stats_data.psi_cntr (*);
	mpc_data_summary.n_devices = 0;
	if mpc_only then return;
	do logical = 0 to 1;
	     do ca_num = 0 to 3;
		do port_num = 0 to 16;
		     dev_stat_ptr = addr (stats_data.dev_stat (ca_num, port_num, logical));
		     if dev_stat.subsystem ^= low (1) then call add_dev;
		end;
		if stats_data.type_other = 0 then return;
	     end;
	     if stats_data.type_other = 1 then return;
	end;
	return;


add_dev:
	proc;

	     mpc_data_summary.n_devices = mpc_data_summary.n_devices + 1;
	     dev_sum_ptr = addr (mpc_data_summary.dev_stat (mpc_data_summary.n_devices));
	     do m = 1 to mpc_data_summary.n_devices - 1;
		next_ptr = addr (mpc_data_summary.dev_stat (m));
		if dev_stat.driveno < next_stat.driveno then do;
		     do n = mpc_data_summary.n_devices by -1 to m + 1;
			from_ptr = addr (mpc_data_summary.dev_stat (n - 1));
			to_ptr = addr (mpc_data_summary.dev_stat (n));
			to_data = from_data;
		     end;
		     next_ptr -> to_data = dev_stat_ptr -> from_data;
		     return;
		     end;
	     end;
	     dev_sum_ptr -> to_data = dev_stat_ptr -> from_data;

	end add_dev;

     end pack;

/* expand each entry */

expand_syserr_entry:
     proc;
	call date_time_ ((stats_data.last_time), F_TIME);
	call ioa_$ioa_switch (output_iocbp, "Entry number ^d at ^a", stats_data.entries_found, F_TIME);


	call display_mpc_data_ (poll_mpc_datap, output_iocbp, short_display_sw);
     end expand_syserr_entry;


/* Cleanup handler */

clean_up:
     proc;

	call syserr_log_util_$close (code);
	if output_file then do;
	     if of_file_open then call iox_$close (output_iocbp, code);
	     if of_file_att then call iox_$detach_iocb (output_iocbp, code);
	     end;


	if segs_allocated then do;
	     segs_allocated = "0"b;
	     call release_temp_segments_ (name, ptr_array, code);
	     end;
	return;

     end clean_up;

/* Procedure to scan the argument list */
scan_args:
     proc;

	do while (more_args);			/* Do while things to look at */
	     call get_arg;

	     if substr (arg, 1, 1) ^= "-" then do;	/* assume MPC name */
new_mpc:
		if substr (arg, 1, 3) ^= "msp"
		then if substr (arg, 1, 3) ^= "mtp"
		     then if substr (arg, 1, 3) ^= "urp" then do;
			     call com_err_ (0, name, "Invalid mpc specified ""^a""", arg);
			     go to done;
			     end;
			else ;
		     else ;
		else ;

		do check_mpc = 1 to mpc_cnt;
		     if arg = work.mpcreq (check_mpc) then goto skip_mpc;
		end;

		mpc_cnt = mpc_cnt + 1;		/* Count MPC found */
		all_mpcs = "0"b;
		work.mpcreq (mpc_cnt) = arg;		/* Save name */
skip_mpc:
		if more_args then do;		/* If more to scan */
		     call get_arg;
		     if substr (arg, 1, 1) ^= "-" then do;
						/* Found another MPC */
			if mpc_cnt < hbound (work.mpcreq, 1)
			then go to new_mpc;
			else do;			/* Too many */
			     call com_err_ (0, name, "There were more than ^d MPCs specified.",
				hbound (work.mpcreq, 1));
			     go to done;
			     end;
			end;
		     else call put_arg;		/* Went too far, back up 1 */
		     end;
		end;

	     else if arg = "-from" | arg = "-fm" then do; /* Start time */
		from_sw = "1"b;
		call time_arg (from_time);
		end;

	     else if arg = "-to" then do;		/* Ending time */
		to_sw = "1"b;
		call time_arg (to_time);
		end;

	     else if arg = "-for" then do;		/* Time limit */
		for_sw = "1"b;
		call time_arg (for_time);		/* For syntax checking only */
		for_len = arg_len;			/* Save pointer to this argument */
		for_ptr = arg_ptr;
		end;

	     else if arg = "-short" then short_arg = "1"b;

	     else if arg = "-long" | arg = "-lg" then bf_sw = "0"b;

	     else if arg = "-bf" | arg = "-brief" then bf_sw = "1"b;

	     else if arg = "-expand" then expand_sw = "1"b;

	     else if arg = "-all" | arg = "-a" then all_mpcs = "1"b;

	     else if arg = "-of" | arg = "output_file" then do;
		if more_args then do;
		     call get_arg;

		     if substr (arg, 1, 1) ^= "-"
		     then of_path = arg;
		     else do;
			of_path = rtrim (name) || ".output";
			call put_arg;
			end;
		     end;
		else of_path = rtrim (name) || ".output";
		short_display_sw = "0"b;
		output_file = "1"b;
		end;

	     else if arg = "-ext" | arg = "-extend" then ext_file = "1"b;

	     else if arg = "-mpc" then mpc_only = "1"b;

	     else do;				/* Bad arg */
		call com_err_ (error_table_$badopt, name, "^a", arg);
		go to done;
		end;
	end;

	if to_sw & for_sw then do;			/* Conflict */
	     call com_err_ (0, name, "Conflicting arguments: -to and -for");
	     go to done;
	     end;
	if ext_file & ^output_file then do;
	     call com_err_ (0, name, "Arg error extent argument but no output_file ");
	     go to done;
	     end;


	return;

     end scan_args;

/* Procedure to return the next argument from command line */

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then do;			/* Should never happen */
	     call com_err_ (code, name, "Arg ^d", arg_no);
	     go to done;
	     end;
	arg_no = arg_no + 1;			/* For next call */
	more_args = (arg_no <= arg_count);
	return;

put_arg:
     entry;					/* Entry to return argument after scanning too far */
	arg_no = arg_no - 1;
	more_args = (arg_no <= arg_count);
	return;

     end get_arg;

/* Procedure to convert a time argument */

time_arg:
     proc (t);

dcl  t fixed bin (71);				/* The time to ouput */
dcl  arg_copy char (10) var;				/* Save copy of arg here */

	arg_copy = arg;
	if ^more_args then do;			/* Must be more */
	     call com_err_ (0, name, "Argument required after ^a.", arg_copy);
	     go to done;
	     end;
	call get_arg;
	call convert_date_to_binary_ (arg, t, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "^a ^a", arg_copy, arg);
	     go to done;
	     end;

	return;

     end time_arg;


%page;
%include syserr_message;
%page;
%include poll_mpc_data;
%page;
%include eurc_model_numbers;
%page;
%include syserr_binary_def;

     end mpc_data_summary;
