/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ATTACH_MPC_ - Subroutine interface for attaching an MPC. */
/* Written January 1980 by Larry Johnson */
/* Modified October 1982 by C. Hornig for new PRPH TAP card. */
/* Modified June 1984 by Paul Farley to correct attaching by channel
   when it is required to be on a primary channel. Also now use
   hcs_$get_user_effmode to check access to rcp_priv_.
*/

/* format: style4,indattr,insnl,delnl */

attach_mpc_:
     proc (arg_attach_mpc_datap, arg_code);

/* Parameters */

dcl  arg_attach_mpc_datap   ptr;
dcl  arg_code	        fixed bin (35);

/* Automatic */

dcl  mpc_type	        char (3);
dcl  (i, j)	        fixed bin;
dcl  rs_mode	        fixed bin (5);
dcl  execute	        bit (5) init ("00100"b);
dcl  code		        fixed bin (35);
dcl  n_tried	        fixed bin;
dcl  dev_tried	        (4) char (32);
dcl  rcp_info_ptr	        ptr;
dcl  1 auto_printer_info    like printer_info aligned automatic;
dcl  1 auto_device_info     like device_info aligned automatic;

/* External */

dcl  com_err_	        entry options (variable);
dcl  config_$find_2	        entry (char (4) aligned, char (4) aligned, ptr);
dcl  find_config_card_$mpc_for_channel
		        entry (fixed bin (3), fixed bin (6), ptr);
dcl  find_config_card_$prph_for_channel
		        entry (fixed bin (3), fixed bin (6), ptr);
dcl  ioa_$rsnnl	        entry options (variable);
dcl  ipc_$create_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  convert_ipc_code_      entry (fixed bin (35));
dcl  rcp_priv_$attach       entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35));
dcl  rcp_$check_attach      entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (71), fixed bin,
		        fixed bin (35));
dcl  rcp_$detach	        entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
dcl  ipc_$delete_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  ioi_$set_channel_required
		        entry (fixed bin, fixed bin (3), fixed bin (6), fixed bin (35));
dcl  hcs_$get_user_effmode  entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));

dcl  error_table_$unimplemented_version
		        fixed bin (35) ext static;
dcl  error_table_$invalid_device
		        fixed bin (35) ext static;
dcl  error_table_$bad_channel
		        fixed bin (35) ext static;
dcl  error_table_$no_connection
		        fixed bin (35) ext static;
dcl  error_table_$device_busy
		        fixed bin (35) ext static;

dcl  disk_status_table_$disk_status_table_
		        ext;

dcl  (addr, bit, hbound, null, rtrim, substr)
		        builtin;
%page;
/* Attach entry */

	attach_mpc_datap = arg_attach_mpc_datap;
	if attach_mpc_data.version ^= attach_mpc_data_version_1 then do;
	     code = error_table_$unimplemented_version;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name);
	     go to error_return;
	end;
	attach_mpc_data.ioi_index = 0;
	attach_mpc_data.ioi_channel = 0;
	attach_mpc_data.rcp_id = "0"b;
	attach_mpc_data.max_workspace_size = 0;
	attach_mpc_data.max_time_limit = 0;
	attach_mpc_data.mpc_cardp = null ();
	attach_mpc_data.prph_cardp = null ();
	attach_mpc_data.device_name = "";
	attach_mpc_data.status_tablep = addr (disk_status_table_$disk_status_table_);
						/* Any table should work ok */

/* Check for no mpc name given.  If so, attach mpc on channel specified */

	if attach_mpc_data.mpc_name = "" then do;
	     if ^attach_mpc_data.channel_required then do;
no_mpc_for_chan:
		code = error_table_$bad_channel;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "No MPC found for channel specified.");
		go to error_return;
	     end;
	     call find_config_card_$mpc_for_channel (attach_mpc_data.iom, (attach_mpc_data.channel), mpc_cardp);
	     attach_mpc_data.mpc_name = mpc_card.name;	/* This is what to attach */
	end;

/* Check mpc name */

	mpc_type = substr (attach_mpc_data.mpc_name, 1, 3);
	if ^(mpc_type = "msp" | mpc_type = "mtp" | mpc_type = "urp") then do;
	     code = error_table_$invalid_device;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name, "^a", attach_mpc_data.mpc_name);
	     go to error_return;
	end;

/* Locate mpc card for this mpc */

	call config_$find_2 ("mpc", substr (attach_mpc_data.mpc_name, 1, 4), mpc_cardp);
	if mpc_cardp = null () then do;
	     code = error_table_$invalid_device;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name, "MPC ^a not configured.", attach_mpc_data.mpc_name);
	     go to error_return;
	end;
	attach_mpc_data.mpc_cardp = mpc_cardp;
	attach_mpc_data.model = mpc_card.model;
	attach_mpc_data.type = mpc_type;

/* Be sure channel requested consistent with this mpc */

	if attach_mpc_data.channel_required then do;
	     if ^attach_mpc_data.bootload_channel then do;
		if channel_on_mpc ()
		then go to channel_ok;
		code = error_table_$bad_channel;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Requested channel not on mpc ^a.",
			attach_mpc_data.mpc_name);
		go to error_return;
	     end;
	     else do;
		if attach_mpc_data.channel = 0 then do; /* none specified */
		     attach_mpc_data.iom = mpc_card.iom (1);
						/* Use lowest channel */
		     attach_mpc_data.channel = mpc_card.chan (1);
		     goto channel_ok;
		end;
		do i = 1 to hbound (mpc_card.port, 1) while (mpc_card.iom (i) ^= -1);
		     if attach_mpc_data.iom = mpc_card.iom (i) &
						/* primary channel? */
			attach_mpc_data.channel = mpc_card.chan (i)
		     then goto channel_ok;
		end;
		code = error_table_$bad_channel;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name,
			"Requested channel, not valid primary on mpc ^a.", attach_mpc_data.mpc_name);
		go to error_return;
	     end;
	end;
channel_ok:
	if mpc_type = "urp"
	then go to unit_record_attach;
%page;
/* Attach disk or tape mpc */

	if attach_mpc_data.channel_required then do;
	     call find_prph (attach_mpc_data.iom, attach_mpc_data.channel);
	     if attach_mpc_data.prph_cardp = null () then do;
		code = error_table_$no_connection;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Unable to get to mpc ^a thru ^a.",
			attach_mpc_data.mpc_name, edit_channel ());
		go to error_return;
	     end;
	     call attach_special;
	     if code = 0
	     then go to attach_complete;
	     else do;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Unable to attach ^a to get to mpc ^a.",
			attach_mpc_data.device_name, attach_mpc_data.mpc_name);
		go to error_return;
	     end;
	end;
	else do;
	     n_tried = 0;
	     do i = 1 to hbound (mpc_card.port, 1);	/* Try all ports */
		call find_prph ((mpc_card.iom (i)), (mpc_card.chan (i)));
		if attach_mpc_data.prph_cardp ^= null () then do;
		     do j = 1 to n_tried;		/* Dont try same device twice */
			if dev_tried (j) = attach_mpc_data.device_name
			then go to next_port;
		     end;
		     n_tried = n_tried + 1;
		     dev_tried (n_tried) = attach_mpc_data.device_name;
		     call attach_special;
		     if code = 0 then do;
			attach_mpc_data.iom = mpc_card.iom (i);
			attach_mpc_data.channel = mpc_card.chan (i);
			go to attach_complete;
		     end;
		end;
next_port:
	     end;
	end;
report_failure:
	if n_tried = 0 then do;
	     code = error_table_$no_connection;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name, "Unable to find path to ^a.",
		     attach_mpc_data.mpc_name);
	     go to error_return;
	end;
	else do;
	     code = error_table_$device_busy;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name, "Unable to attach ^a.", attach_mpc_data.mpc_name);
	end;
	go to error_return;
%page;
/* Attach unit record mpc */

unit_record_attach:
	if attach_mpc_data.channel_required then do;
	     call find_prph (attach_mpc_data.iom, attach_mpc_data.channel);
	     if attach_mpc_data.prph_cardp = null () then do;
		code = error_table_$no_connection;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Unable to get to mpc ^a thru channel ^a.",
			attach_mpc_data.mpc_name, edit_channel ());
		go to error_return;
	     end;
	     call attach_unit_record;
	     if code = 0
	     then go to attach_complete;
	     else do;
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Unable to attach ^a to get to mpc ^a.",
			attach_mpc_data.device_name, attach_mpc_data.mpc_name);
		go to error_return;
	     end;
	end;

	n_tried = 0;
	do i = 1 to mpc_card.nchan (1);
	     call find_prph ((mpc_card.iom (1)), mpc_card.chan (1) + i - 1);
	     if attach_mpc_data.prph_cardp ^= null () then do;
		n_tried = n_tried + 1;
		call attach_unit_record;
		if code = 0 then do;
		     attach_mpc_data.iom = mpc_card.iom (1);
		     attach_mpc_data.channel = mpc_card.chan (1) + i - 1;
		     go to attach_complete;
		end;
	     end;
	end;
	go to report_failure;

attach_complete:
	call ioi_$set_channel_required (attach_mpc_data.ioi_index, attach_mpc_data.iom, attach_mpc_data.channel, code);
	if code ^= 0 then do;
	     if attach_mpc_data.report
	     then call com_err_ (code, attach_mpc_data.caller_name, "Unable to force use of ^a for ^a.",
		     edit_channel (), attach_mpc_data.mpc_name);
	     go to error_return;
	end;

	arg_code = 0;
	return;

error_return:
	call detach_mpc_ (attach_mpc_datap, (0));
	arg_code = code;
	return;
%page;
/* Entry to detach an mpc */

detach_mpc_:
     entry (arg_attach_mpc_datap, arg_code);

	attach_mpc_datap = arg_attach_mpc_datap;

	if attach_mpc_data.rcp_id ^= "0"b
	then call rcp_$detach (attach_mpc_data.rcp_id, "0"b, 0, "", code);
	attach_mpc_data.rcp_id = "0"b;
	if attach_mpc_data.ioi_channel ^= 0
	then call ipc_$delete_ev_chn (attach_mpc_data.ioi_channel, code);
	attach_mpc_data.ioi_channel = 0;
	arg_code = 0;
	return;
%page;
/* Attach a special device to get to a tape or disk mpc */

attach_special:
     proc;

	call fill_device_info;
	call attach ("special");

	return;

     end attach_special;

attach_unit_record:
     proc;

dcl  dev_type	        char (32);

	if substr (attach_mpc_data.device_name, 1, 3) = "prt" then do;
	     dev_type = "printer";
	     rcp_info_ptr, printer_info_ptr = addr (auto_printer_info);
	     printer_info.version_num = 1;
	     printer_info.usage_time = 0;
	     printer_info.wait_time = 0;
	     printer_info.system_flag = "0"b;
	     printer_info.device_name = substr (attach_mpc_data.device_name, 1, 8);
	     printer_info.model = 0;
	     printer_info.print_train = 0;
	     printer_info.line_length = -1;
	end;
	else do;
	     call fill_device_info;
	     if substr (attach_mpc_data.device_name, 1, 3) = "rdr"
	     then dev_type = "reader";
	     else if substr (attach_mpc_data.device_name, 1, 3) = "pun"
	     then dev_type = "punch";
	     else dev_type = "special";		/* Probably wrong, but what else is there? */
	end;
	call attach (dev_type);

	return;

     end attach_unit_record;

fill_device_info:
     proc;

	rcp_info_ptr, device_info_ptr = addr (auto_device_info);
	device_info.version_num = 1;
	device_info.usage_time = 0;
	device_info.wait_time = 0;
	device_info.system_flag = "0"b;
	device_info.device_name = substr (attach_mpc_data.device_name, 1, 8);
	device_info.model = 0;
	device_info.qualifiers (*) = 0;
	return;

     end fill_device_info;
%page;
attach:
     proc (dev_type);

dcl  dev_type	        char (*);
dcl  state	        fixed bin;
dcl  rcp_comment	        char (100);

	if attach_mpc_data.ioi_channel = 0 then do;
	     call ipc_$create_ev_chn (attach_mpc_data.ioi_channel, code);
	     if code ^= 0 then do;
		call convert_ipc_code_ (code);
		if attach_mpc_data.report
		then call com_err_ (code, attach_mpc_data.caller_name, "Unable to create event channel.");
		go to error_return;
	     end;
	end;

/* Check callers access to rcp_priv_ */

	call hcs_$get_user_effmode (">system_library_1", "rcp_priv_", "", -1, rs_mode, code);

	if code ^= 0 then do;
	     call com_err_ (code, attach_mpc_data.caller_name, "Cannot get effective access to >sl1>rcp_priv_.");
	     return;
	end;

	if bit (rs_mode) & execute
	then ;
	else do;
	     call com_err_ (code, attach_mpc_data.caller_name, "Improper access to gate >sl1>rcp_priv_.");
	     return;
	end;


	call rcp_priv_$attach (dev_type, rcp_info_ptr, attach_mpc_data.ioi_channel, "", attach_mpc_data.rcp_id, code);
	if code ^= 0
	then return;

	call rcp_$check_attach (attach_mpc_data.rcp_id, rcp_info_ptr, rcp_comment, attach_mpc_data.ioi_index,
	     attach_mpc_data.max_workspace_size, attach_mpc_data.max_time_limit, state, code);
	if state ^= 0
	then if code = 0
	     then code = state;

	return;

     end attach;

edit_channel:
     proc returns (char (32) var);

dcl  temp		        char (32) var;

	call ioa_$rsnnl ("IOM ^[a^;b^;c^;d^;e^;f^;g^;h^], channel ^d", temp, (0), attach_mpc_data.iom,
	     attach_mpc_data.channel);
	return (temp);

     end edit_channel;

channel_on_mpc:
     proc returns (bit (1));

dcl  i		        fixed bin;

	do i = 1 to hbound (mpc_card.port, 1) while (mpc_card.iom (i) ^= -1);
	     if mpc_card.iom (i) = attach_mpc_data.iom & mpc_card.chan (i) <= attach_mpc_data.channel
		& mpc_card.chan (i) + mpc_card.nchan (i) > attach_mpc_data.channel
	     then return ("1"b);
	end;
	return ("0"b);

     end channel_on_mpc;
%page;
/* Procedure, that given an iom and channel, will find device necessary to attach to that channel */

find_prph:
     proc (iom, chan);

dcl  iom		        fixed bin (3);
dcl  chan		        fixed bin (6);

	call find_config_card_$prph_for_channel (iom, (chan), prph_cardp);
	if prph_cardp = null () then do;
	     attach_mpc_data.prph_cardp = null ();
	     attach_mpc_data.device_name = "";
	     return;
	end;

	attach_mpc_data.prph_cardp = prph_cardp;
	attach_mpc_data.device_name = prph_card.name;
	if substr (attach_mpc_data.device_name, 1, 3) = "dsk" | substr (attach_mpc_data.device_name, 1, 3) = "tap"
	then attach_mpc_data.device_name = rtrim (attach_mpc_data.device_name) || "_00";
	return;

     end find_prph;
%page;
%include attach_mpc_data;
%include config_mpc_card;
%include config_prph_card;
%include rcp_device_info;
%include rcp_printer_info;

     end attach_mpc_;
