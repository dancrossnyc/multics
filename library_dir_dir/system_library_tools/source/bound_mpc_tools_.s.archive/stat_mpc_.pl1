/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* STAT_MPC_ - Gather MPC and Device Statistics for MPC's.
   coded 7/8/75 by Noel I. Morris	*/
/* Major rewrite March 1980 by Larry Johnson to print more detailed info. */
/* Modified 10/80 by Rich Coppola to fix bug in tape port determination
   develop tape   and disk drive model numbers from data retained in mpc mem.
   Also added code to capture and display statistics for the mpc itself. */
/* Modified 12/80 by Rich Coppola to remove the display routine and make
   it a subroutine so it could be used to display data from dump_mpc or
   mpc data placed in the syserr_log by poll_mpc. */
/* Modified Aug 1981 by Rich Coppola to add recognition of MTP611 and DSC611/612
   to the code. */
/* Modified May 1982 by Rich Coppola to add support for the EURC */
/* Modified October by C. Hornig for new PRPH TAP card format. */
/* Modified Oct 1982 by Rich Coppola to correct display of EURC up-time ctr */
/* Modified Apr 1983 by Paul Farley to correct a problem with the short_sw
   parm interacting with the arg_eurc_sw parm (TR phx15060). */
/* Modified June 1983 by Paul Farley to correct a problem with printing
   zero TAPE statistics.
   Modified June 1984 by Paul Farley for DAU support and to use a pointer
   parameter to reference the MPC memory image.
   Modified March 1985 by Paul Farley to double DAU config area, for 64 devices (PBF).
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
stat_mpc_:
     proc (image_ptr, sw, mpc_datap, arg_short_sw);

/* Arguments */

dcl  image_ptr ptr parameter;
dcl  image (0:4095) bit (16) unal based (image_ptr);	/* MPC memory image */
dcl  dau_data (0:759) bit (16) unal based (image_ptr);	/* DAU config and statistic data */
dcl  sw ptr,					/* IOX_ switch for output */
     arg_short_sw bit (1);				/* To display 80 char line */

dcl  arg_code fixed bin (35);
dcl  arg_poll_mpc_datap ptr;
dcl  arg_eurc_sw bit (1);

/* Automatic */

dcl  p ptr,					/* Pointer to trace word */
     (i, j, k) fixed bin;				/* Iteration variables */
dcl  eurc_image (1:168) bit (8) unal based (image_ptr);
dcl  ndev fixed bin;
dcl  code fixed bin (35);
dcl  (dau_dev_number, dau_port, pair_idx) fixed bin;
dcl  model_num char (4);
dcl  (dau_config_ptr, dau_stats_ptr) ptr;
dcl  disk_dev_tablep ptr;
dcl  cross_barred bit (1);
dcl  dual_personality bit (1);
dcl  device_namep ptr;
dcl  ca_port_tablep ptr;
dcl  device_modelp ptr;
dcl  device_drivenop ptr;
dcl  err_int_ptr ptr;
dcl  err_data_ptr ptr;
dcl  mpc_stat_addrp ptr;
dcl  return_info bit (1);
dcl  n_pad_words fixed bin;
dcl  tape_dev_tablep ptr;
dcl  mpc_only bit (1) init ("0"b);
dcl  tape_sw bit (1);
dcl  short_sw bit (1);
dcl  statx fixed bin;
dcl  found fixed bin;
dcl  (urp_sw, eurc_sw, dau_sw) bit (1) init ("0"b);
dcl  LC (0:3) char (4) init ((4) (""));
dcl  eurc_lc_model (0:3) fixed bin;
dcl  1 auto_mpc_stat_info like mpc_stat_info aligned automatic;

/* Constants */

dcl  tape_model (8) char (6) static options (constant)
	init ("   610", "", "   600", "   500", "   410", "   P30", "   630", "");

dcl  ddev_model (0:223) char (6) static options (constant)
	init ((84) (""), "  190A", (52) (""), "  190B", "   401", "  190B", (14) (""), "   451", (31) (""), "   402",
	(13) (""), "   500", "   501", "   500", "   501", "   500", "   501", "   500", "   501", (9) (""), "   509",
	"", "   509", "", "   509", "", "   509");


/* based */

dcl  1 tstat (16) based (p) unal,			/* Tape statistics */
       2 stat (8) fixed bin (16) uns unal;		/* Statistics for device */

dcl  1 dstat (64) based (p) unal,
       2 stat (16) fixed bin (16) uns;

dcl  eurc_stat (60) fixed bin (16) uns based (p) unal;	/* RAW Stats for EURC devs */

dcl  1 estat (4),					/* matricised properly */
       2 stat (15) fixed bin (16) uns;

dcl  1 d451_dev_table aligned based (disk_dev_tablep),
       2 per_dev (32) unal,
         3 opi bit (1) unal,
         3 pad1 bit (2) unal,
         3 ca fixed bin (1) uns unal,
         3 port fixed bin (4) uns unal,
         3 pad bit (24) unal;

dcl  1 d601_dev_table aligned based (disk_dev_tablep),
       2 per_dev (64) unal,
         3 opi bit (1) unal,
         3 pad1 bit (2) unal,
         3 ca fixed bin (1) uns unal,
         3 port fixed bin (4) uns unal,
         3 pad bit (8) unal;

dcl  1 dau_char based (dau_config_ptr) unaligned,		/* Config data */
       2 type bit (8),				/* = 12 HEX */
       2 hw_rev bit (8) unal,				/* DAU rev */
       2 fw_maj_rev bit (8) unal,			/* firmware rev letter */
       2 fw_sub_rev fixed bin (8) uns unal,		/* firmware rev number */
       2 dev (64),					/* seq'ed by dev# */
						/* all 4 bytes zero, if device NEVER configured */
         3 type fixed bin (8) uns unal,			/* device type */
         3 number fixed bin (8) uns unal,		/* device number, =FF if not configured */
         3 summary_status bit (8) unal,			/* device SS reg */
         3 port_number fixed bin (8) uns unal;		/* device DAU port */

dcl  1 dau_stats based (dau_stats_ptr) unaligned,		/* Status data */
       2 port_data (0:15, 2) unal,			/* posibly two logical devices per port */
         3 number fixed bin (8) uns unal,		/* device number */
         3 type fixed bin (8) uns unal,			/* device type */
         3 pad bit (16) unal,				/* MBZ */
         3 stat (16) fixed bin (16) uns unal,		/* device counters */
       2 dau_type fixed bin (8) uns unal,		/* HEX 12 */
       2 fw_maj_rev bit (8) unal,			/* firmware rev letter */
       2 fw_sub_rev bit (8) unal,			/* firmware rev number */
       2 dau_flags unal,
         3 ci_0_online bit (1) unal,			/* channel interface */
         3 ci_1_online bit (1) unal,
         3 mbz bit (2) unal,
         3 psi0_2trip bit (1) unal,			/* ci-0 port-0 */
         3 psi1_2trip bit (1) unal,			/* ci-0 port-1 */
         3 psi2_2trip bit (1) unal,			/* ci-1 port-0 */
         3 psi3_2trip bit (1) unal,			/* ci-1 port-1 */
       2 special_dau_cmds fixed bin (16) uns unal,	/* controller commands cntr */
       2 sus_rlse_cmds fixed bin (16) uns unal,		/* suspend/release commands cntr */
       2 write_spc fixed bin (16) uns unal,		/* write type special controller commands */
       2 read_spc fixed bin (16) uns unal,		/* read type special controller commands */
       2 psi_cntr (20) fixed bin (8) uns unal,		/* all PSI counters */
       2 err_interrupts fixed bin (16) uns unal,		/* dau error counter */
       2 pad bit (16) unal,				/* MBZ */
       2 ext_dau_info (72) bit (8) unal;		/* extended DAU info */

dcl  1 t600_dev_table aligned based (tape_dev_tablep),
       2 per_dev (16) unal,
         3 opi bit (1),
         3 pad bit (9),
         3 tm bit (4),
         3 port fixed bin (2) uns,
         3 pad1 bit (16),
         3 tape_models bit (8),
         3 pad2 bit (8),
         3 pad_words (5) bit (16);


dcl  1 t500_dev_table aligned based (tape_dev_tablep),
       2 per_dev (16) unal,
         3 opi bit (1),
         3 pad bit (11),
         3 port fixed bin (4) uns,
         3 pad_words (n_pad_words) bit (16);

dcl  1 ca_port_table (0:31) based (ca_port_tablep) unal,
       2 ddev_type fixed bin (8) uns,
       2 ddev_table_ptr bit (8);

dcl  device_name (64) char (4) based (device_namep);
dcl  device_model (64) fixed bin based (device_modelp);
dcl  device_driveno (64) fixed bin based (device_drivenop);

dcl  t500_err_int_ctr fixed bin (16) uns based (err_int_ptr);
dcl  1 t500_err_data based (err_data_ptr) unal,
       2 reg bit (16),
       2 intar bit (16),
       2 pad bit (16);


dcl  1 t600_err_data based (err_int_ptr) unal,
       2 pad bit (8),
       2 int_ctr fixed bin (8) uns,
       2 reg bit (16),
       2 intar bit (16),
       2 pad1 bit (16);

dcl  1 dsk_err_data based (err_int_ptr) unal,
       2 pad bit (8),
       2 int_ctr fixed bin (8) uns,
       2 reg bit (16),
       2 auxar bit (16),
       2 intar bit (16);


dcl  1 urp_err_data based (err_int_ptr) unal,
       2 pad bit (8),
       2 err_int_ctr fixed bin (8) uns,
       2 err_data_reg bit (16),
       2 err_data_intar bit (16),
       2 pad1 bit (16);

dcl  1 mpc_err_stat based (mpc_stat_addrp) unal,
       2 ctrs (12) fixed bin (8) uns;


/* Static */

dcl  nmpcs fixed bin int static init (0);
dcl  mpc_names (16) char (4) int static;
dcl  mpc_device_names (16) ptr int static;
dcl  mpc_device_models (16) ptr int static;
dcl  mpc_device_drivenos (16) ptr int static;


/* External */

dcl  ioa_$ioa_switch entry options (variable);
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  config_$find_2 entry (char (4) aligned, char (4) aligned, ptr);
dcl  find_config_card_$prph_for_channel entry (fixed bin (3), fixed bin (6), ptr);
dcl  display_mpc_data_ entry (ptr, ptr, bit (1));
dcl  display_mpc_data_$display_mpc_ entry (ptr, ptr, bit (1));
dcl  error_table_$incorrect_device_type ext fixed bin (35);

dcl  (addr, bin, char, hbound, ltrim, rtrim, mod, null, size, substr) builtin;
%page;
start:
	short_sw = arg_short_sw;			/* save switch */
	return_info = "0"b;

join:
	mpc_stat_infop = addr (auto_mpc_stat_info);
	err_int_ptr = addr (image (mpc_data.mpc_err_int_ctr_addr));
	err_data_ptr = addr (image (mpc_data.mpc_err_data_reg_addr));
	mpc_stat_addrp = addr (image (mpc_data.mpc_stat_addr));
	mpc_stat_info.mpc_name = substr (mpc_data.name, 1, 4);

	if mpc_data.type = "urp" then urp_sw = "1"b;

	if eurc_sw then do;				/* If it is an EURC */
	     call decode_eurc_config;
	     ndev, mpc_stat_info.ndev = 0;
	     mpc_stat_info.stat_counters (*) = 0;
	     mpc_stat_info.int_counter = 0;
	     mpc_stat_info.register = "0"b;
	     mpc_stat_info.auxar = "0"b;
	     mpc_stat_info.intar = "0"b;
	     p = image_ptr;				/* starts at 0 */
	     do i = 1 to 4;				/* fill the stat matrice from raw data */
		k = 0;
		do j = i to 60 by 4;
		     k = k + 1;
		     estat.stat (i, k) = eurc_stat (j);
		end;
	     end;

	     do i = 1 to 4;
		if LC (i - 1) ^= "" then go to use_eurc_dev;
		do j = 1 to 15;
		     if estat.stat (i, j) ^= 0 then go to use_eurc_dev;
		end;
		go to next_eurc_dev;
use_eurc_dev:
		ndev, mpc_stat_info.ndev = ndev + 1;
		found = 0;
		dev_stat_infop = addr (mpc_stat_info.dev_info (ndev));
		dev_stat_info.subsystem = LC (i - 1);
		dev_stat_info.driveno = i - 1;	/* equate to log chan */
		dev_stat_info.model = ltrim (rtrim (char (eurc_lc_model (i - 1))));
		dev_stat_info.opi = "0"b;
		dev_stat_info.port, dev_stat_info.ca = 0;
		do j = 1 to 15;
		     dev_stat_info.stat (j) = estat.stat (i, j);
		end;
		dev_stat_info.stat (16) = 0;
next_eurc_dev:
	     end;

	     mpc_stat_info.uptime_clock =
		bin (eurc_image (123) || eurc_image (124) || eurc_image (121) || eurc_image (122), 32);
	     mpc_stat_info.prom_revision.core = eurc_image (129);
	     mpc_stat_info.prom_revision.iom = eurc_image (130);
	     mpc_stat_info.prom_revision.special_controller = eurc_image (131);
	     mpc_stat_info.prom_revision.link_edit = eurc_image (132);
	     mpc_stat_info.prom_revision.pdsi_application = eurc_image (133);
	     mpc_stat_info.prom_revision.self_test = eurc_image (134);
	     mpc_stat_info.prom_revision.dai_application = eurc_image (135);

	     end;

	else if dau_sw then do;			/* If its a DAU */
	     dau_config_ptr = image_ptr;		/* config area */
	     dau_stats_ptr = addr (dau_data (130));	/* statistics area */
	     ndev, mpc_stat_info.ndev = 0;
	     if mpc_only then go to fill_poll_mpc;
	     dual_personality, cross_barred = "0"b;	/* not used on dau */
	     call decode_disk_config;
	     do i = 1 to 64;			/* process attached device list */
		if dau_char.dev (i).type = 0 then goto next_dau_dev;

		dau_port = dau_char.dev (i).port_number;
		if dau_char.dev (i).number = 255 then do;
						/* FF hex */
		     dau_dev_number = i;
		     model_num = ltrim (ddev_model (dau_char.dev (i).type));
		     if model_num = "500" | model_num = "501" | model_num = "509" then do;
			if mod (dau_dev_number, 2) ^= 0
			then pair_idx = 1;		/* device was ODD# */
			else pair_idx = 2;		/* Device was EVEN# */
			end;
		     else pair_idx = 1;		/* All others get first port slot */
		     do j = 1 to 16;
			if dau_stats.port_data (dau_port, pair_idx).stat (j) ^= 0 then go to use_the_data;
		     end;
		     goto next_dau_dev;
		     end;
		else do;
		     dau_dev_number = dau_char.dev (i).number;
		     if dau_dev_number = dau_stats.port_data (dau_port, 1).number then pair_idx = 1;
		     else if dau_dev_number = dau_stats.port_data (dau_port, 2).number then pair_idx = 2;
		     else goto next_dau_dev;
		     end;

		if device_name (dau_dev_number) ^= ""
		then do j = 1 to 16;
		     if dau_stats.port_data (dau_port, pair_idx).stat (j) ^= 0 then go to use_the_data;
		end;

		go to next_dau_dev;

use_the_data:
		ndev, mpc_stat_info.ndev = ndev + 1;
		dev_stat_infop = addr (mpc_stat_info.dev_info (ndev));
		dev_stat_info.driveno = device_driveno (dau_dev_number);
		dev_stat_info.subsystem = device_name (dau_dev_number);
		dev_stat_info.port = dau_port;
		dev_stat_info.ca = 0;		/* always zero */

		dev_stat_info.model = ddev_model (dau_char.dev (i).type);
		dev_stat_info.opi = (dau_char.dev (i).number ^= 255);
						/* FF hex */
		do j = 1 to 16;
		     dev_stat_info.stat (j) = dau_stats.port_data (dau_port, pair_idx).stat (j);
		end;
next_dau_dev:
	     end;

	     end;

	else if mpc_data.type = "mtp" then do;		/* If tape controller ... */
	     tape_sw = "1"b;
	     p = addr (image (mpc_data.dev_stat_addr));	/* Get pointer to statistics block. */

	     call decode_tape_config;
	     ndev, mpc_stat_info.ndev = 0;
	     tape_dev_tablep = addr (image (10000000b));
	     mpc_stat_info.stat_counters (*) = 0;
	     if (mpc_data.model > 502) & (mpc_data.model < 610)
	     then n_pad_words = 7;
	     else n_pad_words = 1;

	     do i = 1 to 8;				/* gather the mpc stat counters */
		mpc_stat_info.stat_counters (i) = mpc_err_stat.ctrs (i);
	     end;

	     if mpc_data.model < 601 then do;
		mpc_stat_info.error_data.int_counter = t500_err_int_ctr;
		mpc_stat_info.error_data.register = t500_err_data.reg;
		mpc_stat_info.error_data.auxar = "0"b;
		mpc_stat_info.error_data.intar = t500_err_data.intar;
		end;

	     else do;
		t600_err_data.pad = "0"b;
		mpc_stat_info.error_data = t600_err_data;
		mpc_stat_info.error_data.intar = mpc_stat_info.error_data.auxar;
		mpc_stat_info.error_data.auxar = "0"b;
		end;

	     if mpc_only then go to fill_poll_mpc;

	     do i = 1 to 16;
		if device_name (i) ^= ""
		then do j = 1 to 8;
		     if tstat.stat (i, j) ^= 0 then go to use_tape;
		end;
		go to next_tape;
use_tape:
		ndev, mpc_stat_info.ndev = ndev + 1;
		found = 0;
		dev_stat_infop = addr (mpc_stat_info.dev_info (ndev));
		dev_stat_info.driveno = device_driveno (i);
		dev_stat_info.subsystem = device_name (i);

		if mpc_data.model < 610 then do;
		     dev_stat_info.model = ltrim (char (mpc_data.model));
		     dev_stat_info.port = t500_dev_table.port (dev_stat_info.driveno);
		     dev_stat_info.opi = t500_dev_table.opi (dev_stat_info.driveno);
		     end;

		else if mpc_data.model = 610 | mpc_data.model = 611 then do;
		     dev_stat_info.port = t600_dev_table.port (dev_stat_info.driveno);
		     dev_stat_info.opi = t600_dev_table.opi (dev_stat_info.driveno);
		     if dev_stat_info.opi
		     then do j = 1 to 7 while (found = 0);
			if j = 2 then j = 3;	/* bypass the GCR bit */
			if substr (t600_dev_table.tape_models (dev_stat_info.driveno), j, 1) = "1"b then do;
			     dev_stat_info.model = tape_model (j);
			     found = 1;
			     end;
		     end;

		     else dev_stat_info.model = "";

		     found = 0;

		     do j = 1 to 4 while (found = 0);
			if substr (t600_dev_table.tm (dev_stat_info.driveno), j, 1) = "1"b then do;
			     dev_stat_info.ca = j - 1;
			     found = 1;
			     end;
		     end;
		     end;

		else go to bad_dev;

		do j = 1 to 8;
		     dev_stat_info.stat (j) = tstat.stat (i, j);
		end;
		do j = 9 to 16;
		     dev_stat_info.stat (j) = 0;
		end;
next_tape:
	     end;
	     end;

	else if mpc_data.type = "msp" & ^dau_sw then do;
	     tape_sw = "0"b;
	     p = addr (image (mpc_data.dev_stat_addr));
	     ndev, mpc_stat_info.ndev = 0;

	     mpc_stat_info.stat_counters = mpc_err_stat.ctrs;
						/* gather mpc stat counters */
	     mpc_stat_info.error_data = dsk_err_data;	/* and the error data reg */
	     if mpc_only then go to fill_poll_mpc;


	     if mpc_data.model < 600 then do;
		cross_barred = substr (mpc_data.config_sw, 11, 1);
		dual_personality = substr (mpc_data.config_sw, 9, 1);
		call decode_disk_config;
		ca_port_tablep = addr (image (100100000b));
		disk_dev_tablep = addr (image (10000000b));
		do i = 1 to 32;

		     if ^d451_dev_table.opi (i) then do;/* If not powered on, see if any stats */
			do j = 1 to 16;
			     if dstat.stat (i, j) ^= 0 then go to use_d451;
			end;
			end;

		     if device_name (i) ^= ""
		     then do j = 1 to 16;
			if dstat.stat (i, j) ^= 0 then go to use_d451;
		     end;

		     go to next_disk1;

use_d451:
		     ndev, mpc_stat_info.ndev = ndev + 1;
		     dev_stat_infop = addr (mpc_stat_info.dev_info (ndev));
		     dev_stat_info.driveno = device_driveno (i);
		     dev_stat_info.subsystem = device_name (i);
		     dev_stat_info.port = d451_dev_table.port (i);
		     dev_stat_info.ca = d451_dev_table.ca (i);
		     if dev_stat_info.ca = 0
		     then k = 0;
		     else k = 16;

		     dev_stat_info.model = ddev_model (ca_port_table.ddev_type (dev_stat_info.port + k));
		     dev_stat_info.opi = d451_dev_table.opi (i);
		     do j = 1 to 16;
			dev_stat_info.stat (j) = dstat.stat (i, j);
		     end;
next_disk1:
		end;
		end;
	     else if mpc_data.model >= 600 then do;
		dual_personality, cross_barred = "0"b;	/* not used on this mpc */
		call decode_disk_config;
		ca_port_tablep = addr (image (101000000b));
		disk_dev_tablep = addr (image (10000000b));
		do i = 1 to 64;

		     if ^d601_dev_table.opi (i) then do;/* If not powered on, see if any stats */
			do j = 1 to 16;
			     if dstat.stat (i, j) ^= 0 then go to use_d601;
			end;
			end;

		     if device_name (i) ^= ""
		     then do j = 1 to 16;
			if dstat.stat (i, j) ^= 0 then go to use_d601;
		     end;

		     go to next_disk2;

use_d601:
		     ndev, mpc_stat_info.ndev = ndev + 1;
		     dev_stat_infop = addr (mpc_stat_info.dev_info (ndev));
		     dev_stat_info.driveno = device_driveno (i);
		     dev_stat_info.subsystem = device_name (i);
		     dev_stat_info.port = d601_dev_table.port (i);
		     dev_stat_info.ca = d601_dev_table.ca (i);
		     if dev_stat_info.ca = 0
		     then k = 0;
		     else k = 16;

		     dev_stat_info.model = ddev_model (ca_port_table.ddev_type (dev_stat_info.port + k));
		     dev_stat_info.opi = d601_dev_table.opi (i);
		     do j = 1 to 16;
			dev_stat_info.stat (j) = dstat.stat (i, j);
		     end;
next_disk2:
		end;
		end;
	     else go to bad_dev;
	     end;


	else if (mpc_data.type = "urp" & ^eurc_sw) then do;
	     mpc_stat_info.error_data = urp_err_data;
	     mpc_stat_info.error_data.intar = mpc_stat_info.error_data.auxar;
	     mpc_stat_info.error_data.auxar = "0"b;
	     mpc_stat_info.ndev = 0;
	     end;


	else do;
bad_dev:
	     if return_info then do;
		arg_code = error_table_$incorrect_device_type;
		return;
		end;
	     else call ioa_$ioa_switch (sw, "^5/^2-How to decode statistics for mpc ^a model ^d not known.",
		     mpc_data.name, mpc_data.model);
	     return;
	     end;


/* *******************************************************************
   *   Now fill the poll_mpc_data structure so it can be displayed   *
   ******************************************************************* */

fill_poll_mpc:
	poll_mpc_data_n_devices = mpc_stat_info.ndev;
	poll_mpc_data_n_stats = 0;
	do i = 1 to mpc_stat_info.ndev;
	     dev_stat_infop = addr (mpc_stat_info.dev_info (i));
	     do j = 1 to hbound (dev_stat_info.stat, 1);
		if dev_stat_info.stat (j) ^= 0 then poll_mpc_data_n_stats = poll_mpc_data_n_stats + 1;
	     end;
	end;
	if ^return_info then call get_temp_segment_ ("stat_mpc_", poll_mpc_datap, code);
	poll_mpc_specp = addr (poll_mpc_data.specific);
	poll_mpc_data.version = poll_mpc_data_version_2;
	poll_mpc_data.name = mpc_stat_info.mpc_name;
	poll_mpc_data.model = mpc_data.model;
	if eurc_sw then do;				/* EURC? */
	     poll_eurc_data.uptime_clock = mpc_stat_info.uptime_clock;
	     poll_eurc_data.core = mpc_stat_info.core;
	     poll_eurc_data.iom = mpc_stat_info.iom;
	     poll_eurc_data.special_controller = mpc_stat_info.special_controller;
	     poll_eurc_data.link_edit = mpc_stat_info.link_edit;
	     poll_eurc_data.pdsi_application = mpc_stat_info.pdsi_application;
	     poll_eurc_data.self_test = mpc_stat_info.self_test;
	     poll_eurc_data.dai_application = mpc_stat_info.dai_application;
	     poll_mpc_data.n_words = size (poll_eurc_data) + 4;
	     end;
	else if dau_sw then do;			/* DAU? (msp800) */
	     poll_dau_data.n_devices = poll_mpc_data_n_devices;
	     poll_dau_data.n_stats = poll_mpc_data_n_stats;
	     poll_dau_data.fw_rev = mpc_data.fw_rev;
	     poll_dau_data.hw_rev = mpc_data.dau_rev;
	     poll_dau_data.ci_0_online = dau_stats.ci_0_online;
	     poll_dau_data.ci_1_online = dau_stats.ci_1_online;
	     poll_dau_data.psi0_2trip = dau_stats.psi0_2trip;
	     poll_dau_data.psi1_2trip = dau_stats.psi1_2trip;
	     poll_dau_data.psi2_2trip = dau_stats.psi2_2trip;
	     poll_dau_data.psi3_2trip = dau_stats.psi3_2trip;
	     poll_dau_data.err_interrupts = dau_stats.err_interrupts;
	     poll_dau_data.psi_cntr (*) = dau_stats.psi_cntr (*);
	     if dau_stats.err_interrupts > 0 then do;
		poll_dau_data.ext_size = 72;
		poll_dau_data.err_info (*) = dau_stats.ext_dau_info (*);
		end;
	     else poll_dau_data.ext_size = 0;
	     poll_mpc_data.n_words = size (poll_dau_data) + 4;
	     end;
	else if (mpc_data.type = "urp" & ^eurc_sw) then do;
						/* old URP */
	     poll_urp_data.interrupt_counter = mpc_stat_info.error_data.int_counter;
	     poll_urp_data.register = mpc_stat_info.error_data.register;
	     poll_urp_data.INTAR = mpc_stat_info.error_data.intar;
	     poll_mpc_data.n_words = size (poll_urp_data) + 4;
	     end;
	else do;					/* old disk & tape */
	     poll_mtp_data.config_sw = mpc_data.config_sw;
	     poll_mtp_data.pad = "0"b;
	     poll_mtp_data.firmware_rev = mpc_data.fw_rev;
	     poll_mtp_data.n_devices = poll_mpc_data_n_devices;
	     poll_mtp_data.n_stats = poll_mpc_data_n_stats;
	     poll_mtp_data.polled_stat_counters = mpc_stat_info.stat_counters;
	     poll_mtp_data.polled_error_data = mpc_stat_info.error_data;
	     poll_mpc_data.n_words = size (poll_mtp_data) + 4;
	     end;

	if mpc_only then go to display_mpc;

	statx = 1;
	do i = 1 to mpc_stat_info.ndev;
	     dev_stat_infop = addr (mpc_stat_info.dev_info (i));
	     if eurc_sw then do;
		poll_eurc_data.subsystem (i) = substr (dev_stat_info.subsystem, 4, 1);
		poll_eurc_data.driveno (i) = dev_stat_info.driveno;
		poll_eurc_data.opi (i) = dev_stat_info.opi;
		poll_eurc_data.ca (i) = dev_stat_info.ca;
		poll_eurc_data.port (i) = dev_stat_info.port;
		poll_eurc_data.dev_model (i) = dev_stat_info.model;
		poll_eurc_data.dev_name (i) = dev_stat_info.subsystem;
		do j = 1 to 16;
		     if dev_stat_info.stat (j) ^= 0 then do;
			poll_eurc_data.dev_index (statx) = i;
			poll_eurc_data.stat_index (statx) = j;
			poll_eurc_data.value (statx) = dev_stat_info.stat (j);
			statx = statx + 1;
			end;
		end;
		poll_mpc_data.n_words = size (poll_eurc_data) + 4;
		end;
	     else if dau_sw then do;
		poll_dau_data.subsystem (i) = substr (dev_stat_info.subsystem, 4, 1);
		poll_dau_data.driveno (i) = dev_stat_info.driveno;
		poll_dau_data.opi (i) = dev_stat_info.opi;
		poll_dau_data.ca (i) = 0;
		poll_dau_data.port (i) = dev_stat_info.port;
		poll_dau_data.dev_model (i) = dev_stat_info.model;
		poll_dau_data.dev_name (i) = dev_stat_info.subsystem;
		do j = 1 to 16;
		     if dev_stat_info.stat (j) ^= 0 then do;
			poll_dau_data.dev_index (statx) = i;
			poll_dau_data.stat_index (statx) = j;
			poll_dau_data.value (statx) = dev_stat_info.stat (j);
			statx = statx + 1;
			end;
		end;
		poll_mpc_data.n_words = size (poll_dau_data) + 4;
		end;
	     else if mpc_data.type = "msp" |		/* old style */
		     mpc_data.type = "mtp" then do;	/* disk or tape */
		poll_mtp_data.subsystem (i) = substr (dev_stat_info.subsystem, 4, 1);
		poll_mtp_data.driveno (i) = dev_stat_info.driveno;
		poll_mtp_data.opi (i) = dev_stat_info.opi;
		poll_mtp_data.ca (i) = dev_stat_info.ca;
		poll_mtp_data.port (i) = dev_stat_info.port;
		poll_mtp_data.dev_model (i) = dev_stat_info.model;
		poll_mtp_data.dev_name (i) = "";
		do j = 1 to 16;
		     if dev_stat_info.stat (j) ^= 0 then do;
			poll_mtp_data.dev_index (statx) = i;
			poll_mtp_data.stat_index (statx) = j;
			poll_mtp_data.value (statx) = dev_stat_info.stat (j);
			statx = statx + 1;
			end;
		end;
		poll_mpc_data.n_words = size (poll_mtp_data) + 4;
		end;
	end;

	if return_info then do;			/* return data */
	     arg_code = 0;
	     return;
	     end;


/* ****************************************************
   *   Now go display the data or place it in a seg    *
   **************************************************** */


	call display_mpc_data_ (poll_mpc_datap, sw, short_sw);
	poll_mpc_specp = null ();
	call release_temp_segment_ ("stat_mpc_", poll_mpc_datap, code);
	return;

display_mpc:
	call display_mpc_data_$display_mpc_ (poll_mpc_datap, sw, short_sw);
	poll_mpc_specp = null ();
	call release_temp_segment_ ("stat_mpc_", poll_mpc_datap, code);
	return;


return_mpc_data:
     entry (image_ptr, arg_poll_mpc_datap, mpc_datap, arg_eurc_sw, arg_code);

	return_info = "1"b;
	poll_mpc_datap = arg_poll_mpc_datap;
	short_sw = "0"b;
	eurc_sw = arg_eurc_sw;
	go to join;

mpc_stats_:
     entry (image_ptr, sw, mpc_datap, arg_short_sw);

	mpc_only = "1"b;
	go to start;

eurc:
     entry (image_ptr, sw, mpc_datap, arg_short_sw);

	eurc_sw = "1"b;
	go to start;

dau_stats_:
     entry (image_ptr, sw, mpc_datap, arg_short_sw);

	mpc_only = "1"b;
	dau_sw = "1"b;
	go to start;

dau:
     entry (image_ptr, sw, mpc_datap, arg_short_sw);

	dau_sw = "1"b;
	go to start;

return_dau_data:
     entry (image_ptr, arg_poll_mpc_datap, mpc_datap, arg_code);

	return_info = "1"b;
	poll_mpc_datap = arg_poll_mpc_datap;
	short_sw = "0"b;
	dau_sw = "1"b;
	go to join;

%page;
/* Procedure to figure out which devices are configured on a EURC and relate
   them to a logical channel on the EURC */

decode_eurc_config:
     proc;

dcl  la fixed bin;
dcl  chan fixed bin (6);

	call config_$find_2 ("mpc", substr (mpc_data.name, 1, 4), mpc_cardp);
	if mpc_cardp = null () then return;
	la = 0;
	eurc_lc_model (*) = 0;
	do chan = mpc_card.chan (1) to (mpc_card.chan (1) + mpc_card.nchan (1) - 1);
	     call find_config_card_$prph_for_channel ((mpc_card.iom (1)), chan, prph_cardp);
	     if prph_cardp ^= null () then do;
		LC (la) = prph_card.name;
		eurc_lc_model (la) = prph_card.model;
		end;
	     la = la + 1;
	end;
	return;

     end decode_eurc_config;

%page;


/* Procedure to figure out what disks are connected to a disk mpc */

decode_disk_config:
     proc;

dcl  la fixed bin;
dcl  drive fixed bin;
dcl  chan fixed bin (6);
dcl  (i, j) fixed bin;

	if processed_mpc () then return;
	do i = 1 to 64;
	     if dual_personality | cross_barred
	     then device_driveno (i) = mod (i - 1, 16) + 1;
	     else device_driveno (i) = i;
	end;

	call config_$find_2 ("mpc", substr (mpc_data.name, 1, 4), mpc_cardp);
	if mpc_cardp = null () then return;
	do la = 1 to 2 while (mpc_card.iom (la) ^= -1);	/* Chase channels on each la */
	     do chan = mpc_card.chan (la) to (mpc_card.chan (la) + mpc_card.nchan (la) - 1);
		call find_config_card_$prph_for_channel ((mpc_card.iom (la)), chan, prph_dsk_cardp);
		if prph_dsk_cardp = null () then go to next_channel;
		if substr (prph_dsk_card.name, 1, 3) ^= "dsk" then go to next_channel;
		drive = 1;
		do i = 1 to hbound (prph_dsk_card.group, 1) while (prph_dsk_card.model (i) ^= -1);
		     do j = 1 to prph_dsk_card.ndrives (i);
			if prph_dsk_card.model (i) ^= 0 then do;
			     if cross_barred then do;
				device_name (drive), device_name (drive + 16) = prph_dsk_card.name;
				end;
			     else if dual_personality then do;
				device_name (16 * (la - 1) + drive) = prph_dsk_card.name;
				end;
			     else do;
				device_name (drive) = prph_dsk_card.name;
				end;
			     end;
			drive = drive + 1;
		     end;
		end;
next_channel:
	     end;
	end;
	return;

     end decode_disk_config;
%page;
decode_tape_config:
     proc;

dcl  la fixed bin;
dcl  drive fixed bin;
dcl  chan fixed bin (6);
dcl  (i, j) fixed bin;

	if processed_mpc () then return;
	call config_$find_2 ("mpc", substr (mpc_data.name, 1, 4), mpc_cardp);
	if mpc_cardp = null () then return;
	do la = 1 to 2 while (mpc_card.iom (la) ^= -1);
	     do chan = mpc_card.chan (la) to (mpc_card.chan (la) + mpc_card.nchan (la) - 1);
		call find_config_card_$prph_for_channel ((mpc_card.iom (la)), chan, prph_tap_cardp);
		if prph_tap_cardp = null () then go to next_channel;
		if substr (prph_tap_card.name, 1, 3) ^= "tap" then go to next_channel;
		drive = 1;
		do i = 1 to hbound (prph_tap_card.group, 1) while (prph_tap_card.model (i) ^= -1);
		     do j = 1 to prph_tap_card.ndrives (i);
			if prph_tap_card.model (i) ^= 0 then do;
			     device_name (drive) = prph_tap_card.name;
			     device_driveno (drive) = drive;
			     end;
			drive = drive + 1;
		     end;
		end;
next_channel:
	     end;
	end;
	return;

     end decode_tape_config;
%page;
processed_mpc:
     proc returns (bit (1));

dcl  i fixed bin;

	do i = 1 to nmpcs;				/* See if already analyzed */
	     if mpc_data.name = mpc_names (i) then do;
		device_namep = mpc_device_names (i);
		device_modelp = mpc_device_models (i);
		device_drivenop = mpc_device_drivenos (i);
		return ("1"b);
		end;
	end;
	allocate device_name;
	allocate device_model;
	allocate device_driveno;
	if nmpcs < hbound (mpc_names, 1) then do;
	     nmpcs = nmpcs + 1;
	     mpc_names (nmpcs) = substr (mpc_data.name, 1, 4);
	     mpc_device_names (nmpcs) = device_namep;
	     mpc_device_models (nmpcs) = device_modelp;
	     mpc_device_drivenos (nmpcs) = device_drivenop;
	     end;

	device_name (*) = "";
	device_model (*) = 0;
	device_driveno (*) = 0;
	return ("0"b);

     end processed_mpc;
%page;
%include config_mpc_card;
%page;
%include config_prph_card;
%page;
%include config_prph_dsk_card;
%page;
%include config_prph_tap_card;
%page;
%include dump_mpc_data;
%page;
%include poll_mpc_data;

     end stat_mpc_;
