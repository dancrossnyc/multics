/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

get_ips_mask:
     proc () options (variable);

/* DESCRIPTION:
   Utility commands for manipulating IPS masks.
*/

/* HISTORY:
Written by W. Olin Sibert, 02/16/80.
Modified:
07/16/84 by R. Michael Tague:  To work work 32 char IPS signal names.
*/


/* START OF DECLARATIONS */

dcl	(argno, nargs)	fixed bin;
dcl	al		fixed bin (21);
dcl	ap		pointer;
dcl	arg		char (al) based (ap);
dcl	code		fixed bin (35);
dcl	whoami		char (32);
dcl	(brief_sw, all_sw)	bit (1) aligned;

dcl	(old_mask, new_mask, current_mask)
			bit (36) aligned;
dcl	temp_mask		bit (36) aligned;
dcl	mask_string	char (1188) varying;	/* 35 signals * 32 char names
			           + (35-1) * length(", ") */

dcl	com_err_		entry options (variable);
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	hcs_$get_ips_mask	entry (bit (36) aligned);
dcl	hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl	ioa_		entry options (variable);
dcl	ioa_$nnl		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);

dcl	(
	error_table_$noarg,
	error_table_$inconsistent,
	error_table_$badopt
	)		fixed bin (35) external static;

dcl	1 sys_info$ips_mask_data
			aligned external static,
	  2 count		fixed bin,
	  2 masks		(35),
	    3 name	char (32) aligned,
	    3 mask	bit (35) aligned;

dcl	ALL_IPS_MASK	bit (36) aligned internal static options (constant) init ("000000000000"b3);
dcl	NO_IPS_MASK	bit (36) aligned internal static options (constant) init ("777777777777"b3);
dcl	LAST_MASK_BIT	bit (36) aligned internal static options (constant) init ("000000000001"b3);

dcl	(addr, copy, substr, rel, bit, binary, null)
			builtin;

/* END OF DECLARATIONS */
%page;

/* get_ips_mask: proc () options (variable) */

	whoami = "get_ips_mask";			/* this entry prints the current list of masked signals */
	brief_sw = "0"b;

	call cu_$arg_count (nargs);
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if arg = "-brief" | arg = "-bf"
	     then brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg"
	     then brief_sw = "0"b;

	     else do;
BADOPT:
		     call com_err_ (error_table_$badopt, whoami, "^a", arg);
		     goto MAIN_RETURN;
		end;
	end;					/* of this argument loop */

	call hcs_$get_ips_mask (current_mask);

	call get_mask_string (current_mask);

	current_mask = current_mask & (^LAST_MASK_BIT);	/* turn off last bit, for ease of comuptation */
	if brief_sw
	then do;					/* print the masked signals in brief format */
		if current_mask = ALL_IPS_MASK
		then call ioa_ ("All IPS signals masked.");
		else if mask_string ^= ""
		then call ioa_ ("^a", mask_string);
	     end;

	else do;
		if current_mask = ALL_IPS_MASK
		then call ioa_ ("All IPS signals are masked.");
		else if mask_string ^= ""
		then /* if anything is masked, print it */
		     call ioa_ ("Masked IPS signals: ^a.", mask_string);
		else call ioa_ ("No IPS signals are masked.");
	     end;

MAIN_RETURN:
	return;					/* end of code for get_ips_mask */

/*  */

reset_ips_mask:
     entry () options (variable);

	whoami = "reset_ips_mask";			/* this entry resets specified masks or all masks */
	goto SET_IPS_MASK_COMMON;


set_ips_mask:
     entry () options (variable);

	whoami = "set_ips_mask";			/* this entry masks signals -- either those specified or all */
	goto SET_IPS_MASK_COMMON;


SET_IPS_MASK_COMMON:
	brief_sw = "0"b;
	all_sw = "0"b;

	new_mask = NO_IPS_MASK;

	call cu_$arg_count (nargs);
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if substr (arg, 1, 1) ^= "-"
	     then do;				/* a signal name */
		     temp_mask = get_mask_bit (arg);	/* find out what bit to turn off */
		     if temp_mask = NO_IPS_MASK
		     then do;
			     call com_err_ (0, whoami, "Unknown IPS signal ""^a"".", arg);
			     goto MAIN_RETURN;
			end;

		     new_mask = new_mask & temp_mask;	/* turn off the corresponding bit */
		end;

	     else if arg = "-brief" | arg = "-bf"
	     then brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg"
	     then brief_sw = "0"b;
	     else if arg = "-all" | arg = "-a"
	     then all_sw = "1"b;

	     else goto BADOPT;
	end;					/* of this argument loop */

	if all_sw & (new_mask ^= NO_IPS_MASK)
	then do;
		call com_err_ (error_table_$inconsistent, whoami, "-all and any signal names.");
		goto MAIN_RETURN;
	     end;

	if (^all_sw) & (new_mask = NO_IPS_MASK)
	then do;
		call com_err_ (error_table_$noarg, whoami, "^/^5xUsage:^3x^a signal_name(s)|-all {-brief}", whoami);
		goto MAIN_RETURN;
	     end;

	if all_sw
	then new_mask = ALL_IPS_MASK;			/* if we're to mask them all, get all zero bits */

	call hcs_$get_ips_mask (current_mask);

	if whoami = "reset_ips_mask"
	then /* complement mask bits and set new ones to 1 */
	     new_mask = current_mask | (^new_mask);	/* turn all bits in the mask as specified */
	else new_mask = current_mask & new_mask;	/* otherwise, turn off specified bits in current_mask */

	call hcs_$reset_ips_mask (new_mask, (""b));	/* set it */

	current_mask = current_mask & (^LAST_MASK_BIT);	/* turn off last bit, for ease of comuptation */
	if ^brief_sw
	then do;					/* and print the results, if desired */
		call get_mask_string (current_mask);

		if current_mask = ALL_IPS_MASK
		then call ioa_ ("All IPS signals were previously masked.");
		else if mask_string ^= ""
		then /* if anything is masked, print it */
		     call ioa_ ("Previously masked IPS signals: ^a.", mask_string);
		else call ioa_ ("No IPS signals were previously masked.");
	     end;

	goto MAIN_RETURN;

/*  */

get_mask_string:
     proc (P_mask);

/* *	This procedure sets mask_string according to the signals indicated as masked
   *	in P_mask. P_mask is assumed to be in the normal format; that is, a "1" bit
   *	indicates that the corresponding signal is NOT masked. */

dcl	P_mask		bit (36) aligned parameter;

dcl	idx		fixed bin;
dcl	(all_on, all_off)	bit (1) aligned;
dcl	all_masks		bit (36);
dcl	temp_mask		bit (36) aligned;
dcl	temp_str		char (50) varying;

	mask_string = "";
	temp_mask = P_mask & (^LAST_MASK_BIT);		/* turn off last bit, of course */
	all_masks = ""b;

	do idx = 1 to sys_info$ips_mask_data.count;
	     if ((^temp_mask) & sys_info$ips_mask_data.mask (idx)) ^= ""b
	     then do;				/* found one with the right bit */
		     if length (mask_string) > 0
		     then /* format real pretty now */
			mask_string = mask_string || ", ";

		     mask_string = mask_string || rtrim (sys_info$ips_mask_data.name (idx));
						/* and add the signal name */
		end;

	     all_masks = all_masks | sys_info$ips_mask_data.mask (idx);
	end;

/* At this point, a bit will be set in all_masks for each valid mask, and temp_mask will have
   a zero for all masked signals. */

	all_on, all_off = "1"b;

	do idx = 1 to 35;
	     if substr (all_masks, idx, 1) = "0"b
	     then do;				/* not a defined mask */
		     if substr (temp_mask, idx, 1) = "0"b
		     then all_on = "0"b;		/* keep a pair of bits describing the state of all */
		     else all_off = "0"b;		/* the nonstandard signals */
		end;
	end;

	if ^(all_on | all_off)
	then do;					/* something nonstandard */
		if length (mask_string) > 0
		then /* add formatting, regardless */
		     mask_string = mask_string || ", ";

		call ioa_$rsnnl ("<undefined signals: ^w>", temp_str, (0), temp_mask);
		mask_string = mask_string || temp_str;
	     end;

	return;

     end get_mask_string;

/*  */

get_mask_bit:
     proc (P_name) returns (bit (36) aligned);

/* *	This procedure returns a bit string to mask the named signal; the bit
   *	string is in the normal format, such that all bits will be "1"b except
   *	for the one indicating the specified signal. If the named signal does not
   *	exist, the returned mask will be equal to NO_IPS_MASK. */

dcl	P_name		char (*) parameter;

dcl	mask		bit (36) aligned;
dcl	idx		fixed bin;

	mask = NO_IPS_MASK;

	do idx = 1 to sys_info$ips_mask_data.count;
	     if P_name = sys_info$ips_mask_data.name (idx)
	     then do;
		     mask = ^sys_info$ips_mask_data.mask (idx);
		     return (mask);			/* found it */
		end;
	end;

	return (mask);
     end get_mask_bit;

     end get_ips_mask;

