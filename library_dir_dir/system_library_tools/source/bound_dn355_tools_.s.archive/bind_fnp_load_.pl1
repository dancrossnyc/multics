/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
bind_fnp_load_:
     proc (bind_fnp_ptr, fatal_error);

/*
   Written by S. E. Barr  5/76.
   Modified 1/9/78 by J. Stern to produce symbol cross reference.
   Modified 3/15/78 by J. Stern to process trace macros identified by secondary defs.
   Modified 1979 May 27 by Art Beattie to add support for DN6670 paging mechanism and
   separate trace buffer from module chain.
   Modified 1981 Jan 22 by Robert Coren to process metering macros identified by secondary defs.
   Modified 1982 April 21 by Robert Coren to set up buffer page table entry pointer and to eliminate all references to 355 simulator.
   Modified 1982 July 29 by Robert Coren to check size of core image against maximum loadable.
*/

/* parameter */

dcl  bind_fnp_ptr ptr;				/* ptr to binder information */
dcl  fatal_error bit (1) unal;			/* ON if binding unsuccessful */

/* automatic */

dcl  address fixed bin (17);				/* core_image offset */
dcl  card_id bit (12);
dcl  card_len fixed bin;
dcl  card_ptr ptr;					/* ptr to card image from GCOS read */
dcl  chain_links fixed bin;				/* number of links in the module chain for a single segment */
dcl  code fixed bin (35);
dcl  core_len fixed bin;				/* index of last word loaded in core image */
dcl  def_used bit (hbound (b.def, 1)) unal;		/* one flag for each SYMDEF.  ON if def was referenced */
dcl  entry_offset fixed bin;				/* offset of entry at which to begin execution */
dcl  eof bit (1);					/* ON if end of segment was reached */
dcl  extra_len fixed bin;				/* length of unused table space */
dcl  input_attached bit (1) unal;			/* ON is segment is attached for GCOS read */
dcl  iseg fixed bin;				/* index of segment being loaded */
dcl  last_chain fixed bin;				/* module name chain offset */
dcl  load_offset fixed bin;				/* offset in core image to segment being loaded */
dcl  message char (300);				/* error message printed by print */
dcl  message_len fixed bin;				/* error message length */
dcl  module_nums_used (18) fixed bin;			/* holds indices into b.segs, relates module numbers to segments */
dcl  num_defs fixed bin;				/* number of defs */
dcl  num_refs fixed bin;				/* number of refs for current segment */
dcl  num_trace_defs fixed bin;			/* number of secondary defs identifying trace macros */
dcl  num_meter_defs fixed bin;			/* number of secondary defs identifying metering macros */
dcl  obj_date char (32);				/* date core image segment was created */
dcl  print_count fixed bin;				/* number of items that have been printed */
dcl  sym_field_len fixed bin;				/* number of bits used for symbol reference field */
dcl  text_size fixed bin;				/* number of 18 bit words in segment to be loaded */
dcl  reflist char (130) varying;
dcl  word fixed bin (35);
dcl  (i, j, k, cnt) fixed bin;

dcl  cleanup condition;
dcl  (addr, bit, divide, fixed, hbound, length, mod, rel, substr, unspec, bin) builtin;

/* based */

dcl  1 b based (bind_fnp_ptr) aligned like bind_fnp_info;
dcl  1 core aligned based (b.obj_ptr),
       2 count fixed bin (35),
       2 loc (0:32765) bit (18) unal;
dcl  1 core_image unal based (b.obj_ptr),
       2 count fixed bin (35),		/* number of 36 bit words in rest of segment */
       2 header unal,
         3 not_set (0:415) bit (18) unal,
         3 date_time_loaded fixed bin (71),		/* date of loading */
         3 date_time_boot bit (72) unal,		/* not set */
         3 buffer bit (18) unal,			/* not set */
         3 last_loc_memory fixed bin (17) unal,		/* offset of last location in core image */
         3 num_buffers bit (18) unal,
         3 iom_table fixed bin (17) unal,		/* offset of iom table */
         3 num_hsla fixed bin (17) unal,		/* number of hsla's configured */
         3 num_lsla fixed bin (17) unal,		/* number of lsla's configured */
         3 console_enable bit (18) unal,		/* console enabled flag */
         3 module_chain fixed bin (17) unal,		/* starting address of module chain */
         3 next_buffer bit (18) unal,
         3 trace_mask bit (18) unal,			/* trace entry enable mask */
         3 trace_table fixed bin (17) unal,		/* base address of trace table */
         3 next_trace fixed bin (17) unal,		/* next avialable location in trace table */
         3 fault_data fixed bin (17) unal,		/* pointer to fault data storage */
         3 tib_table_base fixed bin (17) unal,		/* base of tib table */
         3 tib_table_end fixed bin (17) unal,		/* end of tib table */
         3 first_delay_table bit (18) unal,		/* not set */
         3 version char (4) unal,			/* version number */
         3 breakpoint_addr bit (18) unal,		/* not set */
         3 trace_sw bit (18) unal,			/* not set */
         3 next_smal_space bit (18) unal,		/* not set */
         3 num_small_buffers bit (18) unal,		/* not set */
         3 cct_desc bit (18) unal,			/* address of first cct descriptor */
         3 sked_data_blk bit (18) unal,			/* address of scheduler data block */
         3 echo_tables fixed bin (17) unal,		/* address of list of echo-negotiation bit tables */
         3 cpu_page_table fixed bin (17) unal,		/* address of cpu page table */
         3 cpu_page_table_entry fixed bin (17) unal,	/* address of variable cpu page table entry */
         3 trace_size fixed bin (17) unal,		/* size of trace buffer */
         3 meter_flag fixed bin (17) unal,		/* nonzero if metering enabled */
         3 tandd_tib_addr bit (18) unal,		/* not set */
         3 buffer_time_meter_addr bit (18) unal,		/* not set */
         3 next_high_memory_buffer bit (18) unal,		/* not set */
         3 buffer_page_table_entry fixed bin (17) unal,	/* address of page table entry for buffer addresses */
         3 pad (39) bit (18) unal,
         3 copyright_notice char (28) unal,		/* image copyright notice */
         3 crash_loc fixed bin (17) unal,		/* offset used for unresolved REF's */
         3 crash_op bit (18) unal,			/* crash instruction */
         3 hsla_com bit (512 * 18 * b.num_hsla) unal,
         3 page_table bit (128 * 18 * fixed ((b.memory >= 64), 17)) unal,
						/* must start on mod 128 boundary */
         3 iom_channel (0:15) unal,
	 4 multiple_channel bit (1) unal,		/* ON if multiple channel device */
	 4 pad bit (2) unal,
	 4 device_number bit (3) unal,		/* device number (for multiple channel devices) */
	 4 pad_2 bit (3) unal,
	 4 device_type fixed bin (4) unal,		/* code for type of device */
	 4 device_speed bit (4) unal,
	 4 offset fixed bin (17) unal,		/* offset ofchannel table */
         3 hsla_table bit (32 * 36 * b.num_hsla),
         3 lsla_table bit (54 * 36 * b.num_lsla),
         3 start_load fixed bin;

dcl  1 core_fragment aligned based (b.obj_ptr),
       2 count fixed bin (35),
       2 loaded (0:load_offset) bit (18) unal,
       2 extra (extra_len) bit (18) unal;

/* external */

dcl  clock_ entry () returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  error_table_$noentry fixed bin (35) ext;
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$ioa_switch_nnl entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ios_$attach entry (char (*), char (*), char (*), char (*), bit (72));
dcl  ios_$detach entry (char (*), char (*), char (*), bit (72));
dcl  ios_$setsize entry (char (*), fixed bin, bit (72));
dcl  iox_$error_output ptr ext;
dcl  com_err_ entry options (variable);
dcl  gcos_cv_gebcd_ascii_ entry (ptr, fixed bin, ptr);
dcl  gcos_gsr_read_$gsr_read_init entry (char (*), fixed bin (35));
dcl  gcos_gsr_read_ entry (char (*), ptr, fixed bin, bit (12), bit (1), fixed bin (35));
dcl  gcos_gsr_read_$gsr_read_close entry (char (*), fixed bin (35));
dcl  get_group_id_ entry () returns (char (32));
dcl  get_wdir_ entry () returns (char (168));

/* constants */

dcl  INPUT char (8) int static options (constant) init ("bind_fnp");
dcl  TRACE fixed bin int static options (constant) init (3);/* b.module (3) = trace type */
dcl  LOAD_BASE fixed bin int static options (constant) init (512);
dcl  LOW_CORE_SIZE fixed bin int static options (constant) init (32768);

%include bind_fnp_info;

	core_len = core_offset (addr (core_image.start_load)) - 1;
	last_chain = core_offset (addr (core_image.module_chain));
	def_used, input_attached = "0"b;
	num_defs, num_unresolved = 0;
	module_nums_used (*) = 0;
	on cleanup call detach_segment;

	do iseg = 1 to b.num_segs;
	     call get_segment (b.segs (iseg).seg_name);
	     call preface_cards;
	     call relocate_text;
	     call detach_segment;
	end;

	core.loc (last_chain) = ""b;			/* zero forward ptr in last link of module chain */
	call set_load_info;

/* Print warning messages for SYMDEF's that were not referenced. */

	if b.list & substr (^def_used, 1, num_defs)
	then do;
	     call ioa_$ioa_switch (b.list_ptr,
		"^/^/The following symbols were defined, but were not referenced:^/^/^1x^4(Symbol Module^19x^)");
	     j = 0;
	     do i = 1 to num_defs;
		if ^substr (def_used, i, 1) & b.def (i).offset ^= 0
		then call print_symbol (j, b.def (i).offset, b.def (i).name);
	     end;
	end;

/* Fill in unresolved references from table.  There is only one error message for each symbol.  After the error
   message has been printed, the offset in def is set to -1, so future references will not cause a message.
*/

	cnt = 0;
	do i = 1 to num_unresolved;
	     j = b.unresolved (i).core_loc;
	     k = b.unresolved (i).index_def;
	     address = b.def (k).offset;
	     if address <= 0
	     then do;
		if b.list & address = 0
		then do;
		     if cnt = 0
		     then call ioa_$ioa_switch (b.list_ptr,
			     "^/^/The following symbols were referenced, but were not defined:^/^/^1x^4(Symbol Module^19x^)"
			     );
		     call print_symbol (cnt, j, b.def (k).name);
		     b.def (k).offset = -1;
		end;
		address = core_offset (addr (core_image.crash_loc));
	     end;
	     word = fixed (core.loc (j), 35) + address;
	     core.loc (j) = substr (unspec (word), 19, 18);
	end;

/* Print symbol table */

	if b.list
	then do;
	     call shell_sort (b.def, num_defs);
	     call ioa_$ioa_switch (b.list_ptr, "^/^/^/^/The following symbols were defined:^/^/^6(Symbol  Offset^3x^)");
	     print_count = 0;
	     do i = 1 to num_defs;
		if b.def (i).offset > 0
		then do;
		     if mod (print_count, 6) = 0
		     then call ioa_$ioa_switch (b.list_ptr, "");
		     print_count = print_count + 1;
		     call ioa_$ioa_switch_nnl (b.list_ptr, "^6a^8o^3x", ascii (b.def (i).name), b.def (i).offset);
		end;
	     end;
	end;

	if b.list
	then do;
	     call date_time_ ((core_image.date_time_loaded), obj_date);
	     call ioa_$ioa_switch (b.list_ptr, "^|Bindmap for ^a>^a, Version ^a^/Created on ^a, by ^a", get_wdir_ (),
		b.obj_name, b.version, obj_date, get_group_id_ ());
	     call ioa_$ioa_switch (b.list_ptr, "^/Component^16x^[^6x^;Modnum^]  Start  Length  Date Compiled   Directory^/",
		unspec (module_nums_used) = ""b);
	     do i = 1 to b.num_segs;
		call ioa_$ioa_switch (b.list_ptr, "^25a^[^s^6x^;^6d^]^7o^8o  ^a  ^a", b.segs (i).seg_name,
		     b.segs (i).modnum = 0, b.segs (i).modnum, b.segs (i).offset, b.segs (i).length, b.segs (i).date,
		     b.segs (i).dir_found);
	     end;
	end;

/* print symbol cross reference */

	if b.cross_ref
	then do;
	     call ioa_$ioa_switch (b.list_ptr, "^|Symbol cross reference by module:^/");
	     do i = 1 to num_defs;
		if b.def (i).offset > 0
		then do;
		     k = b.def (i).def_module;
		     call ioa_$ioa_switch (b.list_ptr, "^/^6a^8o   (^a|^o)", ascii (b.def (i).name), b.def (i).offset,
			b.segs (k).seg_name, b.def (i).offset - b.segs (k).offset);
		     reflist = "";
		     do j = 1 to b.num_segs;
			if substr (b.def (i).ref_modules, j, 1)
			then do;
			     if length (reflist) + length (b.segs (j).seg_name) + 2 > 130
			     then do;
				call ioa_$ioa_switch (b.list_ptr, "^a", reflist);
				reflist = "";
			     end;
			     reflist = reflist || "  " || b.segs (j).seg_name;
			end;
		     end;
		     if reflist ^= ""
		     then call ioa_$ioa_switch (b.list_ptr, "^a", reflist);
		end;
	     end;
	end;

RETURN:
	return;

/* This procedure converts a BCD bit string into an ASCII character string */


ascii:
     proc (bit_string) returns (char (80) var);

dcl  bit_string bit (*);
dcl  char_string char (80);
dcl  num_chars fixed bin;

	num_chars = divide (length (bit_string), 6, 17);
	call gcos_cv_gebcd_ascii_ (addr (bit_string), num_chars, addr (char_string));

	return (substr (char_string, 1, num_chars));

     end ascii;

/*  * This procedure sets up the next segment to be loaded.
   *	1.  It locates the segment using the specified search rules. (the suffix .objdk is assumed)
   *	2.  It makes the io attachment of the input stream to the segment and sets input_attached.
   *	3.  It makes the initializing call to the GCOS read procedure.
*/


get_segment:
     proc (name);

dcl  name char (*) var;				/* The segment name without .objdk */

/* automatic */

dcl  i fixed bin;
dcl  status bit (72);
dcl  code fixed bin (35) based (addr (status));

	do i = 1 to b.num_directories;
	     call ios_$attach (INPUT, "file_", b.directory (i) || ">" || name || ".objdk", "r", status);
	     if code = 0
	     then do;
		b.segs (iseg).dir_found = b.directory (i);
		input_attached = "1"b;
		call ios_$setsize (INPUT, 36, status);
		if code = 0
		then do;
		     call gcos_gsr_read_$gsr_read_init (INPUT, code);
		     if code = 0
		     then return;
		end;
	     end;

	     else if code ^= error_table_$noentry
	     then call abort (code, b.directory (i) || ">" || name || ".objdk");
	end;

	call abort (error_table_$noentry, name || ".objdk");

     end get_segment;

/* * This procedure reads the preface cards for the object segment and fills in the ref table and def table
   * It sets:
   *	load_offset	Location to begin loading text.
   *	text_size		The length of the text.  (It may be longer than the number of words to be loaded
   *			if table space was reserved at the end of the text)
   *	sym_field_len	Number of bits in the symbol reference field
*/


preface_cards:
     proc;

/* automatic */

dcl  (i, j) fixed bin;
dcl  cnt fixed bin;
dcl  time fixed bin;
dcl  num_symbols fixed bin;

/* based */

dcl  1 binary aligned based (card_ptr),
       2 word_1 aligned,
         3 id_1 bit (3) unal,				/* must be '4' */
         3 sym_ref_field bit (6) unal,			/* number of bits for symbol reference  */
         3 id_2 bit (3) unal,				/* must be '5' */
         3 preface_len bit (6) unal,			/* number 18 bit words from word 3 */
         3 text_len bit (18) unal,			/* number of words in text */
       2 checksum bit (36) aligned,
       2 word_3 aligned,
         3 blank_common_len bit (18) unal,		/* not used */
         3 load_mod_code bit (3) unal,			/* 0,1,2,3, = mod 2, 8, 16, 64 */
         3 num_symbols_2 bit (15) unal,			/* 2 * number of SYMDEF's, SYMREF's and common */
       2 symbol (num_symbols) aligned,
         3 name bit (36),
         3 offset fixed bin (17) unal,
         3 pad bit (15) unal,
         3 symbol_code bit (3) unal;

dcl  1 h aligned based (card_ptr),			/* header card */
       2 pad (10) bit (36),
       2 ten_hr fixed bin (5) unal,
       2 one_hr fixed bin (5) unal,
       2 decimal_pt bit (6) unal,
       2 ten_min fixed bin (5) unal,
       2 one_min fixed bin (5) unal,
       2 pad_2 bit (6) unal,				/* ignore last digit of time */
       2 month bit (12) unal,
       2 day bit (12) unal,
       2 year bit (12) unal;

/* constant */

dcl  BIN_CARD bit (3) int static options (constant) init ("100"b);
dcl  CHAIN_ID bit (12) int static options (constant) init ("3323"b3);
						/* BCD for .c */
dcl  TRACE_ID bit (6) int static options (constant) init ("67"b3);
						/* BCD for x */
dcl  METER_ID bit (6) int static options (constant) init ("44"b3);
						/* BCD for m */
dcl  LOAD_MOD (0:4) fixed bin int static options (constant) init (2, 8, 16, 32, 64);

	call gcos_gsr_read_ (INPUT, card_ptr, card_len, card_id, eof, code);

	if b.list
	then do;
	     time = ten_hr * 1000 + one_hr * 100 + divide (60 * (ten_min * 10 + one_min), 100, 17, 0);
	     call ioa_$rsnnl ("^a/^a/^a ^4d", b.segs (iseg).date, i, ascii (h.month), ascii (h.day), ascii (h.year), time);
	end;
	load_offset, num_refs, cnt, chain_links, num_trace_defs, num_meter_defs = 0;
	do while ("1"b);
	     call gcos_gsr_read_ (INPUT, card_ptr, card_len, card_id, eof, code);
	     if code ^= 0
	     then do;
		call ioa_$rsnnl ("Attempting to read ^a>^a.objdk", message, message_len, b.segs (iseg).dir_found,
		     b.segs (iseg).seg_name);
		call abort (code, message);
	     end;
	     if load_offset = 0
	     then do;
		i = fixed (binary.load_mod_code, 17);
		load_offset = core_len + LOAD_MOD (i) - mod (core_len, LOAD_MOD (i));
		text_size = fixed (binary.text_len, 17);
		sym_field_len = fixed (binary.sym_ref_field, 17) + 1;
		call special_module (text_size);
		if b.list
		then do;
		     b.segs (iseg).offset = load_offset;
		     b.segs (iseg).length = text_size;
		end;

	     end;
	     if binary.id_1 = BIN_CARD
	     then do;
		num_symbols = divide (fixed (binary.preface_len, 35) - 2, 4, 35);
		do i = 1 to num_symbols;

/* The chain is specified by a secondary DEF for a symbol with a name that begins with ".c" */

		     if symbol (i).symbol_code = "001"b
		     then do;
			if substr (symbol (i).name, 1, length (CHAIN_ID)) = CHAIN_ID
			then do;
			     chain_links = chain_links + 1;
			     if chain_links > 1
			     then do;
				call ioa_$rsnnl ("^d secondary DEFS found for module chain in ^a.objdk", message,
				     message_len, chain_links, b.segs (iseg).seg_name);
				call print ();
			     end;

			     core.loc (last_chain) = bit (load_offset + symbol (i).offset, 18);
			     last_chain = load_offset + symbol (i).offset;
			end;

/* A trace macro is identified by a secondary DEF for a symbol with a name that begins with "x" */

			else if substr (symbol (i).name, 1, length (TRACE_ID)) = TRACE_ID
			then do;
			     num_trace_defs = num_trace_defs + 1;
			     b.trace_offset (num_trace_defs) = load_offset + symbol (i).offset;
			end;

/* A metering macro is identified by a secondary DEF for a symbol with a name that begins with "m" */

			else if substr (symbol (i).name, 1, length (METER_ID)) = METER_ID
			then do;
			     num_meter_defs = num_meter_defs + 1;
			     b.meter_offset (num_meter_defs) = load_offset + symbol (i).offset;
			end;


			else do;
			     call ioa_$rsnnl ("Unexpected secondary DEF  ^a in ^a.objdk", message, message_len,
				ascii ((symbol (i).name)), b.segs (iseg).seg_name);
			     call print ();
			end;
		     end;
		     else do;
			do j = 1 to num_defs while (symbol (i).name ^= b.def (j).name);
			end;
			if j > num_defs
			then do;
			     num_defs = num_defs + 1;
			     b.def (j).name = symbol (i).name;
			end;

/* SYMREF:  put index of symbol in DEF table into REF table */

			if symbol (i).symbol_code = "101"b
			then do;
			     num_refs = num_refs + 1;
			     b.ref (num_refs) = j;
			end;

/* Primary DEF:  put actual offset into DEF table */

			else if symbol (i).symbol_code = "000"b
			then do;
			     if b.def (j).offset ^= 0
			     then do;		/* already have a DEF with same name */
				call ioa_$rsnnl ("DEF ^a in ^a.objdk previously defined in ^a.objdk", message,
				     message_len, ascii (b.def (j).name), b.segs (iseg).seg_name,
				     b.segs (b.def (j).def_module).seg_name);
				call print ();
			     end;

			     b.def (j).offset = load_offset + symbol (i).offset;
			     b.def (j).def_module = iseg;
			     if b.entry = ascii ((symbol (i).name))
			     then do;
				entry_offset = b.def (j).offset;
				substr (def_used, j, 1) = "1"b;
			     end;
			end;
			else do;
			     call ioa_$rsnnl ("Illegal symbol code while processing ^a>^a.objdk", message, message_len,
				b.segs (iseg).dir_found, b.segs (iseg).seg_name);
			     call abort (0, message);
			end;
		     end;
		end;
		cnt = cnt + num_symbols;
		if 2 * cnt = fixed (binary.num_symbols_2)
		then do;
		     if chain_links = 0
		     then do;
			call ioa_$rsnnl ("Module chain link missing for ^a.objdk", message, message_len,
			     b.segs (iseg).seg_name);
			call print ();
		     end;
		     return;
		end;
	     end;
	     else do;
		call ioa_$rsnnl ("Binary card expected while processing ^a>^a.objdk", message, message_len,
		     b.segs (iseg).dir_found, b.segs (iseg).seg_name);
		call abort (0, message);
	     end;
	end;

     end preface_cards;

/* * This procedure special cases the lsla, hsla and trace type modules.
   *
   *	lsla, hsla	the length of the text is reduced by the amount of unused table space.
   *			(size * number of LSLA's not used)
*/


special_module:
     proc (text_len);

dcl  text_len fixed bin;				/* number of words of text to load */

dcl  i fixed bin;

/* constants */

dcl  MAX_LSLA fixed bin int static options (constant) init (6);
dcl  MAX_HSLA fixed bin int static options (constant) init (3);

	do i = 1 to 3 while (b.module (i).name ^= b.segs (iseg).seg_name);
	end;
	if i = 1
	then text_len = text_len - (MAX_LSLA - b.num_lsla) * b.module (1).size;
	else if i = 2
	then text_len = text_len - (MAX_HSLA - b.num_hsla) * b.module (2).size;

	return;

     end special_module;

/* * This procedure loads and modifies text using the relocation bits specified on the text cards.
   * Text cards may contain one or more blocks of 18 bit words to be loaded.  If the word following a block that
   * has just been loaded contains a relocation id, then another block follows.  The format of the first block
   * on the card is described by 'text'.  The format of successive blocks is described by 'extra'.  There are
   * a maximum of 39 words per card.
*/


relocate_text:
     proc;

dcl  i fixed bin;
dcl  num_instr fixed bin;				/* number of instructions to load  */
dcl  p ptr;

/* constant */

dcl  REL_CARD bit (12) int static options (constant) init ("010000000101"b);
						/* '2005' */

/* based */

dcl  1 text unal based (card_ptr),
       2 id bit (12) unal,				/* must be '2005' */
       2 num bit (6) unal,				/* number 18 bit words in this block to load  */
       2 base_rel_offset fixed bin (17) unal,		/* load offset  */
       2 check_sum bit (36) unal,
       2 reloc (39) bit (2) unal,
       2 pad bit (12) unal,
       2 instr (num_instr) bit (18) unal,		/*  words to be loaded */
       2 next_block bit (18) unal;
dcl  1 extra unal based (p),
       2 id bit (12) unal,
       2 num bit (6) unal,
       2 base_rel_offset fixed bin (17) unal,
       2 instr (num_instr) bit (18) unal,
       2 next_block bit (18) unal;


	do while (^eof);
	     call gcos_gsr_read_ (INPUT, card_ptr, card_len, card_id, eof, code);
	     if ^eof
	     then do;
		if setup_block (0, card_ptr)
		then do;
		     call load (0, addr (text.instr (1)));
		     p = addr (text.next_block);
		     i = num_instr;
		     do while (setup_block (i, p));
			call load (i, addr (extra.instr (1)));
			p = addr (extra.next_block);
			i = i + num_instr;
		     end;
		end;
	     end;
	end;

	call process_trace_defs ();
	call process_meter_defs ();
	load_offset = load_offset + text_size - 1;
	extra_len = core_len - load_offset;		/* get length of unused table space */
	if extra_len > 0
	then unspec (core_fragment.extra) = ""b;
	core_len = load_offset;

	return;

/* This procedure checks the next word on a text card.  It it has a relocation id, it computes the new load offset
   and the number of words to be loaded.
*/


setup_block:
     proc (num_instr_loaded, p) returns (bit (1) unal);

dcl  num_instr_loaded fixed bin;			/* number of instructions already loaded from this card */
dcl  p ptr;

dcl  1 extra unal based (p),
       2 id bit (12) unal,
       2 num bit (6) unal,
       2 base_rel_offset fixed bin (17) unal,
       2 instr (num_instr) bit (18) unal,
       2 next_block bit (18) unal;

	if num_instr_loaded < 39
	then if extra.id = REL_CARD
	     then do;
		num_instr = fixed (extra.num, 17);
		core_len = load_offset + extra.base_rel_offset;
		return ("1"b);
	     end;

	return ("0"b);

     end setup_block;

/* * This procedure loads the words using the relocation code specified by text.reloc in the first block of the
   * text card.
   *
   *	"00"b	no relocation
   *	"01"b	address is relative to the load address of the module
   *	"11"b	symbol reference
*/


load:
     proc (index_rel, p);

dcl  index_rel fixed bin;				/* index of last relocation bits */
dcl  p ptr;					/* ptr to instructions to be loaded */

dcl  (i, j) fixed bin;
dcl  word fixed bin (35);

/* based */

dcl  instr (num_instr) bit (18) unal based (p);		/* words to be loaded */
dcl  1 sym_ref based (addr (word)),			/* word that contains a symbol reference */
       2 pad bit (18) unal,
       2 tag bit (3) unal,
       2 id bit (sym_field_len) unal,			/* symbol reference number */
       2 address bit (18 - sym_field_len) unal;

	do i = 1 to num_instr;
	     if text.reloc (index_rel + i) = "00"b
	     then core.loc (core_len) = instr (i);
	     else do;
		word = fixed (instr (i), 35);
		if text.reloc (index_rel + i) = "01"b
		then word = word + load_offset;

/* SYMREF  load relative to symbol reference and set flag to indicate SYMDEF was used.
   Check for overflow of the address field (all 1's)
*/
		else if text.reloc (index_rel + i) = "11"b
		then do;
		     j = fixed (sym_ref.id, 17, 0);
		     sym_ref.id = "0"b;
		     if j <= num_refs & j > 0
		     then do;
			if ^sym_ref.address = "0"b
			then do;
			     call ioa_$rsnnl ("Indirection through external symbol is not supported in ^a.objdk",
				message, message_len, b.segs (iseg).seg_name);
			     call print ();
			end;
			j = b.ref (j);		/* get def index for reference */

/* add location to unresolved table if offset is zero */

			if b.def (j).offset = 0
			then do;
			     num_unresolved = num_unresolved + 1;
			     b.unresolved (num_unresolved).core_loc = core_len;
			     b.unresolved (num_unresolved).index_def = j;
			end;
			else word = word + b.def (j).offset;
			substr (def_used, j, 1) = "1"b;
			substr (b.def (j).ref_modules, iseg, 1) = "1"b;
		     end;
		     else do;
			call ioa_$rsnnl ("Invalid reference to #^d in ^a.objdk", message, message_len, j,
			     b.segs (iseg).seg_name);
			call print ();
		     end;
		end;
		else do;
		     call ioa_$rsnnl ("Invalid relocation code ^b in ^a.objdk", message, message_len,
			text.reloc (index_rel + i), b.segs (iseg).seg_name);
		     call print ();
		end;
		core.loc (core_len) = substr (unspec (word), 19, 18);
		;
	     end;
	     core_len = core_len + 1;
	end;
	return;

     end load;

/* This procedure enables trace macros for a module if the
   trace mask indicates that they should be enabled.  Otherwise,
   no action is taken which leaves the trace macros in their
   disabled state.
*/


process_trace_defs:
     proc;

dcl  i fixed bin;
dcl  module_num fixed bin;


	if chain_links ^= 1				/* module chain messed up for this module */
	then return;

	module_num = bin (core.loc (last_chain), 18);
	if module_num < 0 | module_num > 18
	then do;
	     call ioa_$rsnnl ("Invalid module number ^d found for ^a.objdk", message, message_len, module_num,
		b.segs (iseg).seg_name);
	     call print ();
	     return;
	end;

	if module_num ^= 0
	then do;
	     if module_nums_used (module_num) ^= 0
	     then do;
		call ioa_$rsnnl ("Module number ^d in ^a.objdk previously used for ^a.objdk", message, message_len,
		     module_num, b.segs (iseg).seg_name, b.segs (module_nums_used (module_num)).seg_name);
		call print ();
		return;
	     end;

	     b.segs (iseg).modnum = module_num;
	     module_nums_used (module_num) = iseg;
	end;

	if num_trace_defs = 0
	then return;

	if module_num = 0
	then do;
	     call ioa_$rsnnl ("Zero module number found for ^a.objdk which contains trace DEFs", message, message_len,
		b.segs (iseg).seg_name);
	     call print ();
	end;

	if ^substr (b.mask, module_num, 1)		/* want trace macros disabled */
	then return;				/* so leave them alone */
	call patch_defs (num_trace_defs, b.trace_offset, "Trace");

     end process_trace_defs;

process_meter_defs:
     proc;

/* This procedure enables metering macros for a module if the bindfile indicates
   that metering is to be enabled. Otherwise, they are left disabled.
*/

	if num_meter_defs > 0
	then if b.flags.metering_enabled
	     then call patch_defs (num_meter_defs, b.meter_offset, "Metering");
	return;

     end process_meter_defs;

patch_defs:
     proc (p_num_defs, offset_array, type_name);

/* Procedure used by process_meter_defs and process_trace_defs to patch TRAs marked
   by secondary symdefs to NOPs
*/

dcl  p_num_defs fixed bin;
dcl  offset_array (*) fixed bin;
dcl  type_name char (*);

dcl  TRA_OPCODE bit (6) int static options (constant) init ("71"b3);
dcl  NOP bit (18) int static options (constant) init ("233100"b3);


	do i = 1 to p_num_defs;			/* enable all the specified macros */
	     if substr (core.loc (offset_array (i)), 4, 6) ^= TRA_OPCODE
	     then do;
		call ioa_$rsnnl ("^a macro at ^a.objdk|^o does not begin with TRA instruction", message, message_len,
		     type_name, b.segs (iseg).seg_name, offset_array (i) - load_offset);
		call print ();
	     end;
	     else core.loc (offset_array (i)) = NOP;
	end;
	return;
     end patch_defs;

     end relocate_text;

/* This procedure fills in the header and trailer for the core image */


set_load_info:
     proc;

dcl  i fixed bin (35);

dcl  1 trailer unal based (addr (core.loc (core_len))),
       2 start fixed bin (17) unal,			/* start of core image */
       2 end fixed bin (17) unal,			/* offset of end of core image */
       2 length fixed bin (17) unal,			/* number of 18 bit words in core image */
       2 start_entry fixed bin (17) unal;		/* offset to begin execution */

dcl  MCS_BCD bit (36) int static init ("011011100100010011110010011011010000"b);
						/* BCD .mcs.  octal 334423623320 */

dcl  (
     FIRST_HSLA_CH init (6),
     FIRST_LSLA_CH init (9)
     ) fixed bin int static options (constant);

	core_image.date_time_loaded = clock_ ();
	core_image.last_loc_memory = b.memory * 1024 - 1; /* memory starts at 0 */
	if b.memory >= 64
	then do;
	     core_image.cpu_page_table = core_offset (addr (substr (core_image.page_table, 1)));
	     core_image.cpu_page_table_entry = core_image.cpu_page_table + 127;
	     core_image.buffer_page_table_entry = core_image.cpu_page_table + 126;
	end;
	core_image.iom_table = core_offset (addr (core_image.iom_channel (0)));
	core_image.num_hsla = b.num_hsla;
	core_image.num_lsla = b.num_lsla;
	core_image.trace_mask = b.mask;
	core_image.version = b.version;
	core_image.crash_loc = 0;
	core_image.crash_op = "000101001000000010"b;	/* octal 051002 */
	core_image.trace_size = b.module (TRACE).size;
	if b.flags.metering_enabled
	then core_image.meter_flag = 1;
	else core_image.meter_flag = 0;
	core_image.copyright_notice = "COPR. (C) H.I.S. INC. 1981";

/* Fill in iom channel table.  Device type codes:
   *	0  not implemented		4  lsla
   *	1  clock			5  console
   *	2  dia			6  printer
   *	3  hsla
*/
	if b.console
	then core_image.iom_channel (0).device_type = 5;	/* console */
	if b.printer
	then core_image.iom_channel (2).device_type = 6;	/* printer */
	core_image.iom_channel (4).device_type = 2;	/* dia */
	if b.memory >= 64				/* if modern core image */
	then do;
	     core_image.iom_channel (3).device_type,	/* dia may be on any of 3, 4, 5, or 12 */
	     core_image.iom_channel (5).device_type,
	     core_image.iom_channel (12).device_type = 2;
	end;
	core_image.iom_channel (15).device_type = 1;	/* clock */

	do i = 1 to b.num_hsla;
	     core_image.iom_channel (FIRST_HSLA_CH + i - 1).multiple_channel = "1"b;
	     core_image.iom_channel (FIRST_HSLA_CH + i - 1).device_type = 3;
	     core_image.iom_channel (FIRST_HSLA_CH + i - 1).device_number = substr (unspec (i), 34, 3);
	     core_image.iom_channel (FIRST_HSLA_CH + i - 1).offset =
		core_offset (addr (substr (core_image.hsla_table, 32 * 36 * (i - 1) + 1)));
	end;

	do i = 1 to b.num_lsla;
	     core_image.iom_channel (FIRST_LSLA_CH + i - 1).multiple_channel = "1"b;
	     core_image.iom_channel (FIRST_LSLA_CH + i - 1).device_type = 4;
	     core_image.iom_channel (FIRST_LSLA_CH + i - 1).device_number = substr (unspec (i), 34, 3);
	     core_image.iom_channel (FIRST_LSLA_CH + i - 1).device_speed = "0100"b;
	     core_image.iom_channel (FIRST_LSLA_CH + i - 1).offset =
		core_offset (addr (substr (core_image.lsla_table, 54 * 36 * (i - 1) + 1)));
	end;

/* Add 4 word block at end of core image for FNP loader */

	core_len = core_len + 4 - mod (core_len, 4);
	trailer.start = 0;
	trailer.end, trailer.length = core_len + 4;
	trailer.start_entry = entry_offset;
	core_len = core_len + 4;

/* Make sure core image will fit in 32K with gicb */

	if core_len + LOAD_BASE > LOW_CORE_SIZE		/* it won't */
	then call abort (0, "Core image is too large to load in 32K.");

	b.obj_len = divide (core_len, 2, 17, 0) + 1;
	core_image.count = b.obj_len - 1;

     end set_load_info;

/* The procedure is given an address within the core_image and it returns the index in loc that corresponds to
   that address.
*/


core_offset:
     proc (item_ptr) returns (fixed bin (17));

dcl  item_ptr ptr;
dcl  offset fixed bin (17) unal;

%include its;


	offset = fixed (rel (item_ptr), 18) - 1;
	offset = offset * 2;
	if addr (item_ptr) -> its.bit_offset
	then offset = offset + 1;
	return (offset);

     end core_offset;

detach_segment:
     proc;
dcl  status bit (72);

	call gcos_gsr_read_$gsr_read_close (INPUT, code);
	call ios_$detach (INPUT, "", "", status);

     end detach_segment;




print_symbol:
     proc (print_count, offset, name);

dcl  print_count fixed bin;
dcl  offset fixed bin;
dcl  name bit (36);

dcl  i fixed bin;

	do i = 1 to b.num_segs while (offset >= b.segs (i).offset);
	end;
	i = i - 1;

	if mod (print_count, 4) = 0
	then call ioa_$ioa_switch_nnl (b.list_ptr, "^/ ");
	call ioa_$ioa_switch_nnl (b.list_ptr, "^6a ^25a", ascii (name), b.segs (i).seg_name);
	print_count = print_count + 1;

     end print_symbol;

abort:
     proc (code, message);

dcl  code fixed bin (35);
dcl  message char (*);

	fatal_error = "1"b;
	call com_err_ (code, "bind_fnp", message);
	call detach_segment;
	goto RETURN;

     end abort;




print:
     proc ();

	fatal_error = "1"b;
	if b.list
	then do;
	     if ^b.error_header
	     then do;
		b.error_header = "1"b;
		call ioa_$ioa_switch (b.list_ptr, "ERROR MESSAGES^/");
	     end;
	     call ioa_$ioa_switch (b.list_ptr, substr (message, 1, message_len));
	end;
	call ioa_$ioa_switch (iox_$error_output, "bind_fnp:  ^a", substr (message, 1, message_len));

     end print;

/* This shell sort is taken from Knuth, The Art of Computer Probramming, Volume 3, "Sorting and Searching", via Tom Casey
*/


shell_sort:
     proc (array, len);

dcl  1 array (*) aligned like bind_fnp_info.def;
dcl  len fixed bin;					/* number of defs */
dcl  (incr, next_incr) fixed bin;

	incr = 4;
	next_incr = 13;
	do while (next_incr < len);
	     incr = next_incr;
	     next_incr = 3 * next_incr + 1;
	end;

	do while (incr > 1);
	     incr = divide (incr - 1, 3, 17, 0);
	     call insertion_sort (array, len, incr);
	end;

	return;




insertion_sort:
     proc (array, len, h);

dcl  1 array (*) aligned like bind_fnp_info.def;
dcl  (len, h, i, j) fixed bin;
dcl  1 temp aligned like bind_fnp_info.def;

	do j = h + 1 to len;
	     temp = array (j);
	     if fixed (temp.name, 36, 0) < fixed (array (j - h).name, 36, 0)
	     then do;
		do i = j - h repeat i - h while (i > 0 & fixed (temp.name, 36, 0) < fixed (array (i).name, 36, 0));
		     array (i + h) = array (i);
		end;
		array (i + h) = temp;
	     end;
	end;

     end insertion_sort;

     end shell_sort;

     end bind_fnp_load_;
