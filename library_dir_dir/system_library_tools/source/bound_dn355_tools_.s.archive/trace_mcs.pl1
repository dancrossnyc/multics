/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
trace_mcs:
mcm_trace:
     procedure () options (variable);

/* MCS Tracing command procedure: */
/* This procedure is used to control MCS tracing, and print the results */

/* Derived from an earlier version by C. Hornig */
/* Completely rewritten 10 March 82, W. Olin Sibert 
   Modified: 1984-09-19 to stop using decimal_date_time...JAFalksen
   Modified: October 1984 by Greg Texada to change the calling sequence for copy_erf_seg_.		*/

	declare arg_count		 fixed bin;
	declare arg_index		 fixed bin;
	declare arg_lth		 fixed bin (21);
	declare arg_ptr		 pointer;
	declare arg		 char (arg_lth) based (arg_ptr);
	declare code		 fixed bin (35);
	declare operation		 char (32) varying;

	declare brief_sw		 bit (1) aligned;
	declare reset_sw		 bit (1) aligned;
	declare all_sw		 bit (1) aligned;
	declare reverse_sw		 bit (1) aligned;
	declare on_sw		 bit (1) aligned;
	declare off_sw		 bit (1) aligned;
	declare force_sw		 bit (1) aligned;
	declare print_sw		 bit (1) aligned;

	declare last_count		 fixed bin;
	declare table_size		 fixed bin;
	declare new_modes		 char (120);
	declare erf_name		 char (32);

	declare n_excludes		 fixed bin;
	declare exclude		 (20) char (40) varying;
	declare n_matches		 fixed bin;
	declare match		 (20) char (40) varying;
	declare n_channels		 fixed bin;
	declare channel		 (20) char (32) varying;
	declare temp_segs		 (2) pointer;
	declare areap		 pointer;

	declare trace_mode_bits	 bit (18) unaligned;
	declare trace_mode_string	 char (120) varying;

	declare trace_idx		 fixed bin;

	declare last_trace_time	 fixed binary (71) internal static initial (0);
	declare last_trace_idx	 fixed binary internal static initial (0);

	declare error_table_$noarg	 fixed bin (35) external static;
	declare error_table_$badopt	 fixed bin (35) external static;
	declare error_table_$too_many_args fixed bin (35) external static;
	declare error_table_$bad_conversion fixed bin (35) external static;
	declare error_table_$bad_mode	 fixed bin (35) external static;
	declare error_table_$inconsistent fixed bin (35) external static;
	declare error_table_$bigarg	 fixed bin (35) external static;

	declare check_star_name_$entry entry (char (*), fixed bin (35));
	declare command_query_$yes_no	 entry options (variable);
	declare com_err_		 entry options (variable);
	declare copy_erf_seg_$name	 entry (char (*), char (*), pointer, fixed bin (19), fixed bin (35));
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	declare date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
	declare get_temp_segments_	 entry (char (*), (*) pointer, fixed bin (35));
	declare ioa_		 entry options (variable);
	declare ioa_$rsnnl		 entry options (variable);
	declare match_star_name_	 entry (char (*), char (*), fixed bin (35));
	declare mode_string_$parse	 entry (char (*), pointer, pointer, fixed bin (35));
	declare release_temp_segments_ entry (char (*), (*) pointer, fixed bin (35));

	declare hphcs_$set_mcm_trace_table_size entry (fixed bin, fixed bin (35));
	declare hphcs_$set_mcm_global_trace entry (bit (*), fixed bin (35));
	declare hphcs_$set_mcm_channel_trace entry (fixed bin, bit (2) aligned, fixed bin (35));

	declare WHOAMI		 char (32) internal static options (constant) init ("trace_mcs");

	declare (linkage_error, cleanup) condition;

	declare (addr, binary, empty, float, hbound, index, length) builtin;
	declare (maxlength, mod, null, pointer, rel, rtrim, size) builtin;
	declare (string, substr, unspec) builtin;

/*  */

	temp_segs (*) = null ();
	brief_sw = "0"b;
	reset_sw = "0"b;
	all_sw = "0"b;
	reverse_sw = "0"b;
	on_sw = "0"b;
	off_sw = "0"b;
	print_sw = "0"b;
	force_sw = "0"b;

	erf_name = "";
	table_size = -1;
	new_modes = "";
	n_channels = 0;
	n_excludes = 0;
	n_matches = 0;
	last_count = -1;

	on condition (cleanup)
	     call cleanup_procedure ();

	call cu_$arg_count (arg_count, code);
	if (code ^= 0) then do;
		call com_err_ (code, WHOAMI);
		goto MAIN_RETURN;
	     end;

	if (arg_count < 1) then do;
		call com_err_ (error_table_$noarg, WHOAMI,
		     "^/Usage:^-^a modes|chn|table_size|print {-control_args}", WHOAMI);
		goto MAIN_RETURN;
	     end;

	arg_index = 1;
	call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	if (arg = "table_size") | (arg = "ts") then goto PROCESS_TABLE_SIZE;
	else if (arg = "channel") | (arg = "chan") | (arg = "chn") then goto PROCESS_CHANNEL;
	else if (arg = "modes") then goto PROCESS_MODES;
	else if (arg = "print") | (arg = "pr") | (arg = "p") then goto PROCESS_PRINT;
	else if (arg = "reset") | (arg = "rs") then goto PROCESS_RESET;
	else do;
		call com_err_ (0, WHOAMI, "Unknown function: ^a", arg);
		goto MAIN_RETURN;
	     end;


BADOPT_ERROR:
	call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
	goto MAIN_RETURN;


inconsistent:
     procedure (P_error);

	declare P_error		 char (*) parameter;

	call com_err_ (error_table_$inconsistent, WHOAMI, P_error);
	goto MAIN_RETURN;
     end inconsistent;


MAIN_RETURN:
	call cleanup_procedure ();

	return;

/*  */

PROCESS_TABLE_SIZE:
	operation = "set trace table size";

	do arg_index = 2 to arg_count;
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	     if (arg = "-erf") then call get_erf_argument;

	     else if (index (arg, "-") = 1) then goto BADOPT_ERROR;

	     else do;				/* Anything else is supposed to be a table size */
		     if (table_size >= 0) then do;
			     call com_err_ (error_table_$too_many_args, WHOAMI, "Extra table size ^a", arg);
			     goto MAIN_RETURN;
			end;

		     table_size = cv_dec_check_ (arg, code);
		     if (code ^= 0) | (table_size < 0) then do;
			     call com_err_ (error_table_$bad_conversion, WHOAMI,
				"Table size must be a positive decimal integer, (0 for off), not ""^a"".", arg);
			     goto MAIN_RETURN;
			end;
		end;
	end;

	if (table_size < 0) then do;			/* Print the current value */
		call get_tty_segs ();

		if (trace_array_ptr = null ()) then
		     call ioa_ ("MCS Tracing is not enabled^[ in ERF ^a^;^s^].",
			(erf_name ^= ""), erf_name);

		else call ioa_ ("MCS Trace table size is ^d^[ in ERF ^a^;^s^].",
			trace_array.num_entries, (erf_name ^= ""), erf_name);
	     end;

	else call set_table_size ();

	goto MAIN_RETURN;				/* All done for table_size */

/*  */

PROCESS_MODES:
	operation = "set trace modes";

	do arg_index = 2 to arg_count;
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	     if (arg = "-erf") then call get_erf_argument;
	     else if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
	     else if (arg = "-long") | (arg = "-lg") then brief_sw = "1"b;

	     else if (index (arg, "-") = 1) then goto BADOPT_ERROR;

	     else do;				/* Anything else is supposed to be a mode string */
		     if (new_modes ^= "") then do;
			     call com_err_ (error_table_$too_many_args, WHOAMI, "Extra mode string ^a", arg);
			     goto MAIN_RETURN;
			end;

		     new_modes = arg;
		end;
	end;

	call get_tty_segs ();
	trace_mode_bits = string (tty_buf.trace.flags);	/* Get the current bit string value */

	if (new_modes = "") then do;			/* Print the current value */
		call get_trace_modes ();

		call ioa_ ("MCS Trace modes^[ in ERF ^a^;^s^]: ^a",
		     (erf_name ^= ""), erf_name, trace_mode_string);
	     end;

	else do;
		call check_if_update_allowed ();

		call set_trace_modes (new_modes);

		call hphcs_$set_mcm_global_trace (trace_mode_bits, code);
		if code ^= 0 then call com_err_ (code, WHOAMI,
			"Cannot change trace modes to ^a", new_modes);
		else if ^brief_sw then do;
			call get_trace_modes ();
			call ioa_ ("New MCS trace modes: ^a", trace_mode_string);
		     end;
	     end;

	goto MAIN_RETURN;				/* All done for mode setting */

/*  */

PROCESS_CHANNEL:
	operation = "set channel tracing";

	do arg_index = 2 to arg_count;
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	     if (arg = "-erf") then call get_erf_argument;
	     else if (arg = "-print") | (arg = "-pr") then print_sw = "1"b;
	     else if (arg = "-force") | (arg = "-fc") then force_sw = "1"b;
	     else if (arg = "-on") then on_sw = "1"b;
	     else if (arg = "-off") then off_sw = "1"b;

	     else if (index (arg, "-") = 1) then goto BADOPT_ERROR;

	     else call add_to_array /* Anything else is supposed to be a channel name */
		     (arg, channel, n_channels, "channel name", "1"b);
	end;					/* Of argument loop */

	if (on_sw & off_sw) then call inconsistent ("-on and -off");
	if (force_sw & ^(on_sw | off_sw)) then call inconsistent ("-force and not -on");

	if ^(on_sw | off_sw | print_sw) then do;
		call com_err_ (error_table_$noarg, WHOAMI,
		     "At least one of -on, -off, or -print must be specified to ^a", operation);
		goto MAIN_RETURN;
	     end;

	if (n_channels = 0) then do;
		call com_err_ (error_table_$noarg, WHOAMI,
		     "At least one channel name must be specified to ^a", operation);
		goto MAIN_RETURN;
	     end;

	if (on_sw | off_sw) then
	     call check_if_update_allowed ();

	call get_tty_segs ();

	call set_channel_tracing ();

	goto MAIN_RETURN;				/* All done for setting per- channel tracing */

/*  */

PROCESS_RESET:
	operation = "reset MCS tracing";

	if (arg_count > 2) then do;
		call com_err_ (error_table_$too_many_args, WHOAMI, "No additional arguments are permitted.");
		goto MAIN_RETURN;
	     end;

	call check_if_update_allowed ();

	call get_tty_segs ();

	call set_trace_modes ("off,^default,none");	/* Everything off */

	call hphcs_$set_mcm_global_trace (trace_mode_bits, code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot set tracing modes to reset state.");
		goto MAIN_RETURN;
	     end;

	call hphcs_$set_mcm_trace_table_size (0, code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot set trace table size to zero.");
		goto MAIN_RETURN;
	     end;

	begin;

	     declare chan_idx	      fixed bin;
	     declare chan_name	      char (32);

	     do chan_idx = 1 to lct.max_no_lctes;
		lctep = addr (lct.lcte_array (chan_idx));

		if (lcte.trace | lcte.trace_force) then do;
			chan_name = lcnt.names (chan_idx);
			if (unspec (chan_name) = ""b) then chan_name = "";

			call hphcs_$set_mcm_channel_trace (chan_idx, "00"b, code);
			if code ^= 0 then call com_err_ (code, WHOAMI,
				"Cannot reset channel tracing for devx ^d.^[ (^a)^]",
				chan_idx, (chan_name ^= ""), chan_name);
		     end;
	     end;					/* Of loop through LCTEs */
	end;					/* Begin block */

	goto MAIN_RETURN;

/*  */

PROCESS_PRINT:
	operation = "print trace entries";

	do arg_index = 2 to arg_count;
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	     if (arg = "-erf") then call get_erf_argument;
	     else if (arg = "-reset") | (arg = "-rs") then reset_sw = "1"b;
	     else if (arg = "-all") | (arg = "-a") then all_sw = "1"b;
	     else if (arg = "-reverse") | (arg = "-rev") | (arg = "-rv") then reverse_sw = "1"b;

	     else if (arg = "-last") | (arg = "-lt") then do;
		     if (last_count > 0) then do;
			     call com_err_ (error_table_$too_many_args, WHOAMI, "Extra -last count ^a", arg);
			     goto MAIN_RETURN;
			end;

		     call get_next_argument ("Count for -last");
		     last_count = cv_dec_check_ (arg, code);
		     if (code ^= 0) | (last_count <= 0) then do;
			     call com_err_ (error_table_$bad_conversion, WHOAMI,
				"Count for -last must be a number greater than zero, not ""^a"".", arg);
			     goto MAIN_RETURN;
			end;
		end;

	     else if (arg = "-channel") | (arg = "-chan") | (arg = "-chn") then do;
		     call get_next_argument ("Channel name");
		     call add_to_array (arg, channel, n_channels, "channel name", "1"b);
		end;

	     else if (arg = "-match") | (arg = "-mh") then do;
		     call get_next_argument ("Match string");
		     call add_to_array (arg, match, n_matches, "match string", "0"b);
		end;

	     else if (arg = "-exclude") | (arg = "-ex") then do;
		     call get_next_argument ("Exclude string");
		     call add_to_array (arg, exclude, n_excludes, "exclude string", "0"b);
		end;

	     else if (index (arg, "-") = 1) then goto BADOPT_ERROR;

	     else call add_to_array /* Anything else is supposed to be a channel name */
		     (arg, channel, n_channels, "channel name", "1"b);

	end;					/* Of argument loop */

	if reverse_sw & ^(all_sw | (last_count > 0)) then
	     call inconsistent ("-reverse without -last or -all");

	call get_tty_segs ();

	if (trace_array_ptr = null ()) then
	     call ioa_ ("^a: There is no MCS trace array defined^[ in ERF ^a^;^s^].",
		WHOAMI, (erf_name ^= ""), erf_name);

	else if (binary (trace_array.idx, 36) <= 1) then
	     call ioa_ ("^a: The MCS trace array is empty^[ in ERF ^a^;^s^]",
		WHOAMI, (erf_name ^= ""), erf_name);

	else call print_trace_entries ();

	goto MAIN_RETURN;				/* All done for printing trace entries */

/*  */

get_tty_segs:
     procedure ();

	declare erf_number		 char (32);

	call get_temp_segments_ (WHOAMI, temp_segs, code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Getting termporary segments.");
		goto MAIN_RETURN;
	     end;

	ttybp = temp_segs (1);
	areap = temp_segs (2);

	if (erf_name = "") then erf_number = "-1";
	else do;
		erf_number = erf_name;
		last_trace_time, last_trace_idx = 0;
	     end;
	call copy_erf_seg_$name (erf_number, "tty_buf", ttybp, (0), code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot copy tty_buf.");
		goto MAIN_RETURN;
	     end;

	call copy_erf_seg_$name (erf_number, "tty_area", areap, (0), code);
	if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Cannot copy tty_area.");
		goto MAIN_RETURN;
	     end;

	lctp = pointer (ttybp, rel (tty_buf.lct_ptr));
	lcntp = pointer (areap, rel (lct.lcnt_ptr));

	if (tty_buf.trace.data_offset = ""b) then
	     trace_array_ptr = null ();
	else do;
		trace_array_ptr = pointer (ttybp, tty_buf.trace.data_offset);
		if last_trace_idx = 0 then last_trace_idx = trace_array.num_entries;
		if trace_array.entry (last_trace_idx).time = last_trace_time then
		     trace_idx = mod (last_trace_idx, trace_array.num_entries) + 1;
		else trace_idx = mod (binary (trace_array.idx, 18), trace_array.num_entries) + 1;
	     end;

	return;
     end get_tty_segs;

/*  */

check_if_update_allowed:
     procedure ();

	declare temp_entry		 entry variable;


	if (erf_name ^= "") then do;
		call com_err_ (0, WHOAMI,
		     "MCS Tracing parameters may not be altered in an FDUMP. Cannot ^a.", operation);
		goto MAIN_RETURN;
	     end;

	on condition (linkage_error) begin;
		call com_err_ (0, WHOAMI, "This operation requires access to hphcs_. Cannot ^a.", operation);
		goto MAIN_RETURN;
	     end;

	temp_entry = hphcs_$set_mcm_trace_table_size;

	revert condition (linkage_error);

	return;
     end check_if_update_allowed;

/*  */

set_table_size:
     procedure ();

	declare yes_sw		 bit (1) aligned;
	declare new_size		 fixed bin (18);
	declare new_free		 fixed bin (18);
	declare percent_used	 float bin;


	call check_if_update_allowed ();

	call get_tty_segs ();

	new_size = size (trace_entry) * table_size;

	if (trace_array_ptr ^= null ()) then
	     new_free = tty_buf.bleft + (size (trace_entry) * trace_array.num_entries);
	else new_free = tty_buf.bleft;

	percent_used = 100.0e0 * (float (new_size) / float (new_free));

	if (percent_used > 50.0e0) then do;
		call command_query_$yes_no (yes_sw, 0, WHOAMI, "",
		     "The new table will use ^.1f percent of the free space in tty_buf.^/Do you still wish to set table size to ^d?",
		     percent_used, table_size);

		if ^yes_sw then goto MAIN_RETURN;
	     end;

	if (trace_array_ptr ^= null ()) then do;	/* Just clear out the old one first */
		call hphcs_$set_mcm_trace_table_size (0, code);
		if code ^= 0 then do;
			call com_err_ (code, WHOAMI, "Cannot remove old trace table.");
			goto MAIN_RETURN;
		     end;
	     end;

	call hphcs_$set_mcm_trace_table_size (table_size, code);
	if code ^= 0 then
	     call com_err_ (code, WHOAMI, "Setting trace table size to ^d", table_size);

	return;
     end set_table_size;

/*  */

set_trace_modes:
     procedure (P_new_modes);

	declare P_new_modes		 char (*) parameter;
	declare modes_area		 area (1000);
	declare idx		 fixed bin;


	call mode_string_$parse (P_new_modes, addr (modes_area), mode_string_info_ptr, code);
	if (code ^= 0) then do;
		call com_err_ (code, WHOAMI, "Mode string ^a", P_new_modes);
		goto MAIN_RETURN;
	     end;

	do idx = 1 to mode_string_info.number;
	     mode_value_ptr = addr (mode_string_info.modes (idx));
	     if (^mode_value.boolean_valuep) then do;
		     call com_err_ (error_table_$bad_mode, WHOAMI,
			"The value for the ^a mode must be boolean^[, not character^]^[, not numeric^].",
			mode_value.mode_name, mode_value.char_valuep, mode_value.numeric_valuep);
		     goto MAIN_RETURN;
		end;

	     call set_single_mode (mode_value.mode_name, mode_value.boolean_value);
	end;

	return;
     end set_trace_modes;

/*  */

/* This procedure is used both for setting modes and building the mode string.
   The reason for its hirsute flow of control is to allow all the correspondence
   between mode names and mode bit names to be centralized in a single place:
   the list of calls to process_mode. To add new modes, just put in a new call
   to process_mode in the right place in the list (either before or after the
   assignment to set_all_modes, depending on whether the mode should be affected
   by use of the "all" or "none" mode names. */

process_modes:
     procedure ();

	declare P_new_mode_value	 bit (1) unaligned parameter;
	declare P_set_mode_name	 char (*) parameter;

	declare 1 trace_modes	 unaligned like tty_buf.trace.flags;

	declare function		 char (16) varying;
	declare all_mode_sw		 bit (1) aligned;	/* Means we are processing "all" or "none" */
	declare all_mode_value	 bit (1) aligned;	/* Value for above */
	declare set_all_modes	 bit (1) aligned;	/* Set to indicate start of modes in "all" set */


get_trace_modes:
     entry ();

	function = "add";

	trace_mode_string = "";

	goto PROCESS_MODES_COMMON;


set_single_mode:
     entry (P_set_mode_name, P_new_mode_value);

	function = "set";
	set_all_modes = "0"b;

	if (P_set_mode_name = "all") then do;
		if P_new_mode_value = "0"b then goto BAD_MODE_VALUE;
		all_mode_sw = "1"b;
		all_mode_value = "1"b;
	     end;

	else if (P_set_mode_name = "none") then do;
		if P_new_mode_value = "0"b then goto BAD_MODE_VALUE;
		all_mode_sw = "1"b;
		all_mode_value = "0"b;
	     end;

	else all_mode_sw = "0"b;

	if (P_set_mode_name = "off") then do;
		P_set_mode_name = "on";
		P_new_mode_value = ^P_new_mode_value;
	     end;

PROCESS_MODES_COMMON:
	string (trace_modes) = trace_mode_bits;		/* Get the current values */

	call process_mode (trace_modes.enable, "on");
	call process_mode (trace_modes.default_mode, "default");

	set_all_modes = all_mode_sw;

	call process_mode (trace_modes.read, "read");
	call process_mode (trace_modes.write, "write");
	call process_mode (trace_modes.data, "data");
	call process_mode (trace_modes.control, "control");
	call process_mode (trace_modes.modes, "modes");
	call process_mode (trace_modes.interrupt, "interrupt");
	call process_mode (trace_modes.init, "init_mpx");
	call process_mode (trace_modes.start, "start_mpx");
	call process_mode (trace_modes.shutdown, "stop_mpx");
	call process_mode (trace_modes.space_man, "space_man");

	if (function = "set") & (^all_mode_sw) then do;	/* We fell through to here without finding the mode */
BAD_MODE_VALUE:
		call com_err_ (error_table_$bad_mode, WHOAMI,
		     "^[^^^]^a", P_new_mode_value, P_set_mode_name);
		goto MAIN_RETURN;
	     end;

FINISHED_SETTING_MODE:
	if (function = "set") then /* Update the bit string */
	     string (trace_mode_bits) = string (trace_modes);

	return;

/*  */

/* Procedure to either add a single mode to the string, or, if the mode
   name matches, set the mode value for a single mode. */

process_mode:
     procedure (P_mode_bit, P_mode_name);

	declare P_mode_bit		 bit (1) unaligned parameter;
	declare P_mode_name		 char (16) varying;

	if function = "add" then do;
		if (length (trace_mode_string) > 0) then
		     trace_mode_string = trace_mode_string || ",";

		if P_mode_bit then
		     trace_mode_string = trace_mode_string || P_mode_name;
		else trace_mode_string = trace_mode_string || "^" || P_mode_name;
	     end;

	else if function = "set" then do;
		if set_all_modes then do;
			P_mode_bit = all_mode_value;
			return;
		     end;

		if P_set_mode_name ^= P_mode_name then return; /* Not the right one */
		P_mode_bit = P_new_mode_value;
		goto FINISHED_SETTING_MODE;
	     end;

     end process_mode;

     end process_modes;

/*  */

/* This procedure sets tracing for specified channels, and/or prints the state o tracing */

set_channel_tracing:
     procedure ();

	declare chan_idx		 fixed bin;
	declare name_idx		 fixed bin;
	declare channel_name	 char (32);
	declare trace_flags		 bit (2) aligned;
	declare matching_channels	 fixed bin;
	declare old_state		 char (16) varying;
	declare new_state		 char (16) varying;


	trace_flags = ""b;
	substr (trace_flags, 1, 1) = on_sw;
	substr (trace_flags, 2, 1) = force_sw;
	call ioa_$rsnnl ("^[on^;off^]^[, default^]", new_state, (0), on_sw, force_sw);

	matching_channels = 0;

	do chan_idx = 1 to lct.max_no_lctes;
	     lctep = addr (lct.lcte_array (chan_idx));
	     channel_name = lcnt.names (chan_idx);

	     if unspec (channel_name) = ""b then goto NEXT_CHANNEL;
	     if channel_name = "" then goto NEXT_CHANNEL;

	     do name_idx = 1 to n_channels;
		call match_star_name_ (channel_name, (channel (name_idx)), code);
		if code = 0 then goto THIS_CHANNEL;
	     end;

	     goto NEXT_CHANNEL;			/* Matched none of the possibilities */

THIS_CHANNEL:
	     matching_channels = matching_channels + 1;
	     if (matching_channels = 1) & print_sw then /* Print header */
		call ioa_ ("Devx^2xName^36tState (default is ^[on^;off^])",
		     tty_buf.trace.flags.default_mode);

	     call ioa_$rsnnl ("^[on^;off^]^[, force^]",
		old_state, (0), lcte.trace, lcte.trace_force);

	     if (on_sw | off_sw) then do;
		     call hphcs_$set_mcm_channel_trace (chan_idx, trace_flags, code);
		     if code ^= 0 then call com_err_ (code, WHOAMI,
			     "Cannot set tracing on ^a to ^a.", channel_name, new_state);
		     if print_sw then call ioa_ ("^4d^2x^a^36t^a (was ^a)",
			     chan_idx, channel_name, new_state, old_state);
		end;

	     else if print_sw then
		call ioa_ ("^4d^2x^a^36t^a",
		     chan_idx, channel_name, old_state);

NEXT_CHANNEL:
	end;

	if (matching_channels = 0) then
	     call ioa_ ("^a: No channels matched supplied names.", WHOAMI);

	else if print_sw then call ioa_ ("");

	return;
     end set_channel_tracing;

/*  */

print_trace_entries:
     procedure ();

	declare channel_name	 char (32);
	declare first_idx		 fixed bin;
	declare last_idx		 fixed bin;
	declare increment		 fixed bin;
	declare entry_idx		 fixed bin;
	declare real_entry_idx	 fixed bin;


	if all_sw then last_count = trace_array.num_entries; /* Fake up printin them all */

	if (last_count > 0) then do;
		if (last_count > trace_array.num_entries) then do;
			call ioa_ ("Cannot print last ^d entries; maximum will be ^d",
			     last_count, trace_array.num_entries);
			last_count = trace_array.num_entries;
		     end;

		if reverse_sw then do;
			increment = -1;
			first_idx = binary (trace_array.idx) - 1;
			last_idx = (first_idx - last_count) + 1;
		     end;
		else do;
			increment = 1;
			last_idx = binary (trace_array.idx) - 1;
			first_idx = (last_idx - last_count) + 1;
		     end;

		do entry_idx = first_idx to last_idx by increment;

		     real_entry_idx = 1 + mod ((entry_idx - 1), trace_array.num_entries);
		     trace_entry_ptr = addr (trace_array.entry (real_entry_idx));
		     channel_name = lcnt.names (trace_entry.devx);

		     if (trace_entry.time > 0) then
			if entry_matches () then
			     call print_single_entry ();
		end;				/* Of loop through trace entries */

		return;				/* All done here */
	     end;					/* Of case for -last */

	do while ((trace_array.entry (trace_idx).time + 10000 > last_trace_time)
	     & (trace_array.entry (trace_idx).time > 0));

	     trace_entry_ptr = addr (trace_array.entry (trace_idx));
	     channel_name = lcnt.names (trace_entry.devx);

	     if entry_matches () then call print_single_entry ();

NEXT_TRACE_ENTRY:
	     last_trace_idx = trace_idx;
	     last_trace_time = trace_entry.time;
	     trace_idx = mod (trace_idx, trace_array.num_entries) + 1;
	end;

	return;

/*  */


entry_matches:
     procedure () returns (bit (1) aligned);

	declare name_idx		 fixed bin;


	do name_idx = 1 to n_channels;
	     call match_star_name_ (channel_name, (channel (name_idx)), code);
	     if code = 0 then goto CHECK_FOR_STRINGS;
	end;

	if (n_channels > 0) then return ("0"b);		/* No channels matched */

CHECK_FOR_STRINGS:
	do name_idx = 1 to n_excludes;
	     if index (rtrim (trace_entry.message), exclude (name_idx)) ^= 0 then
		return ("0"b);			/* Exclude strig matches */
	end;

	do name_idx = 1 to n_matches;
	     if index (rtrim (trace_entry.message), match (name_idx)) ^= 0 then
		return ("1"b);			/* Match string matches */
	end;

	if (n_matches > 0) then return ("0"b);		/* If none matched, and there were some, just go on */

	return ("1"b);
     end entry_matches;

/*  */

print_single_entry:
     procedure ();

	declare time_form		 char (22) int static options (constant) init ("^Hd:^MH:^99v.999999SM");
	if (channel_name = "") | (unspec (channel_name) = ""b) then
	     call ioa_$rsnnl ("^o", channel_name, (0), trace_entry.devx);

	call ioa_ ("^16a ^a: ^a",
	     date_time_$format (time_form, trace_entry.time, "", ""),
	     channel_name, trace_entry.message);

	return;
     end print_single_entry;

     end print_trace_entries;

/*  */

get_erf_argument:
     procedure ();

	call get_next_argument ("ERF name");

	if (erf_name ^= "") then do;
		call com_err_ (error_table_$too_many_args, WHOAMI, "Extra ERF name ^a", arg);
		goto MAIN_RETURN;
	     end;

	erf_name = arg;

	return;
     end;



get_next_argument:
     procedure (P_name);

	declare P_name		 char (*) parameter;


	if (arg_index >= arg_count) then do;
		call com_err_ (error_table_$noarg, WHOAMI, "^a after ^a", P_name, arg);
		goto MAIN_RETURN;
	     end;

	arg_index = arg_index + 1;
	call cu_$arg_ptr (arg_index, arg_ptr, arg_lth, (0));

	return;
     end get_next_argument;

/*  */

add_to_array:
     procedure (P_name, P_array, P_array_size, P_description, P_check_starname);

	declare P_name		 char (*) parameter;
	declare P_array		 (*) char (*) varying parameter;
	declare P_array_size	 fixed bin;
	declare P_description	 char (*);
	declare P_check_starname	 bit (1) aligned;


	if P_check_starname then do;
		call check_star_name_$entry (P_name, code);
		if (code ^= 0) & (code ^= 1) & (code ^= 2) then do;
			call com_err_ (code, WHOAMI, "Invalid ^a: ^a",
			     P_description, P_name);
			goto MAIN_RETURN;
		     end;
	     end;

	if (P_array_size >= hbound (P_array, 1)) then do;
		call com_err_ (error_table_$too_many_args, WHOAMI,
		     "Too many ^as. Max is ^d.", P_description, hbound (P_array, 1));
		goto MAIN_RETURN;
	     end;

	if (length (P_name) > maxlength (P_array (1))) then do;
		call com_err_ (error_table_$bigarg, WHOAMI,
		     "The ^a may only be ^d characters long. ^a",
		     P_description, maxlength (P_array (1)), P_name);
		goto MAIN_RETURN;
	     end;

	P_array_size = P_array_size + 1;
	P_array (P_array_size) = P_name;

	return;
     end add_to_array;

/*  */

cleanup_procedure:
     procedure ();

	if (temp_segs (1) ^= null ()) then
	     call release_temp_segments_ (WHOAMI, temp_segs, (0));

	return;
     end cleanup_procedure;

%page; %include mode_string_info;
%page; %include tty_buf;
%page; %include lct;
%page; %include mcs_trace_data;

     end trace_mcs;
