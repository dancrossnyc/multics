/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


bind_fnp: proc;

/*
   This command produces a core image from FNP object segments.

   Written by S.E. Barr 5/76
   Modified 1/9/78 by J. Stern to add -cross_ref control arg.
   Modified 3/15/78 by J. Stern to not require a trace module.
   Modified 1979 May 9 by Art Beattie to accept FNP memory size of 64.
   Modified 1981 Jan 22 by Robert Coren to accept "meter" keyword.
   Modified 1981 June by R Holmstedt to search only working dir for object.
   Modified 1982 April by Robert Coren to allow memory sizes up to 256K and
    to eliminate the -simulator control argument.
*/

dcl  bind_info_ptr ptr;				/* ptr to scratch area for bindfile information */
dcl  bind_len fixed bin;				/* number of characters in bindfile */
dcl  bind_ptr ptr;					/* ptr to bindfile */
dcl  cleanup condition;
dcl  code fixed bin (35);				/* standard Multics code */
dcl  fatal_error bit (1) unal;			/* ON if fatal error */
dcl  get_search_rules bit (1) unal;			/* ON if user supplied search rules */
dcl  list_attach bit (1) unal;			/* ON if iox_ attach was completed */
dcl  list_open bit (1) unal;				/* ON if iox_ open was completed */
dcl  list_ptr ptr;
dcl  obj_acl_ptr ptr;				/* acl information used for tssi_ cleanup */
dcl  obj_ptr ptr;					/* ptr to core image segment */
dcl  arg_version char (4);				/* version number supplied as arg */

/* based */

dcl 1 b aligned based (bind_info_ptr) like bind_fnp_info;
dcl  ptr_array (1) ptr based;

dcl (addr, divide, hbound, index, length, verify, mod, null, reverse, search, substr, string, unspec) builtin;

/* external */

dcl  bind_fnp_load_ entry (ptr, bit (1) unal);
dcl  com_err_ entry options (variable);
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  get_wdir_ entry () returns (char (168));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$error_output fixed bin (35) ext;
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  tssi_$clean_up_segment entry (ptr);
dcl  tssi_$finish_segment entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
dcl  tssi_$get_segment entry (char (*), char (*), ptr, ptr, fixed bin (35));

%include bind_fnp_info;

	bind_info_ptr, bind_ptr, list_ptr, obj_ptr = null;
	arg_version = "";
	num_unresolved = 0;				/* to prevent error message at compile */
	on cleanup call cleanup_proc ("1"b);

	call get_temp_segments_ ("bind_fnp", addr (bind_info_ptr) -> ptr_array, code);
	call parse_args;

	b.metering_enabled = "1"b;			/* for now, at least, let's make metering the default */
	call parse_bindfile;
	if ^fatal_error then do;
	     if arg_version ^= "" then b.version = arg_version;
	     b.list_ptr = list_ptr;
	     b.obj_ptr = obj_ptr;
	     call bind_fnp_load_ (bind_info_ptr, fatal_error);
	end;
	if ^fatal_error then do;
	     call tssi_$finish_segment (obj_ptr, b.obj_len*36, "11"b, obj_acl_ptr, code);
	     call cleanup_proc ("0"b);
	end;
	else call abort (0, "Binding unsuccessful");

RETURN:
	return;

/*  This procedure prints error messages on error_output and into the list segment.
*/


print:	proc (message);

dcl  message char (*);

	     if b.list then do;
		if ^b.error_header then do;
		     b.error_header = "1"b;
		     call ioa_$ioa_switch (list_ptr, "ERROR MESSAGES^/^/");
		end;
		call ioa_$ioa_switch (list_ptr, "^a", message);
	     end;

	     call ioa_$ioa_switch (iox_$error_output, message);

	     return;

	end print;

abort:	proc (code, message);

dcl  code fixed bin (35);
dcl  message char (*);

	     call com_err_ (code, "bind_fnp", message);
	     call cleanup_proc ("1"b);
	     goto RETURN;

	end abort;




cleanup_proc: proc (error);

dcl  error bit (1) unal;				/* ON if called by cleanup condition */

dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));

	     if bind_info_ptr ^= null then call release_temp_segments_ ("bind_fnp", addr (bind_info_ptr) -> ptr_array,
		code);
	     if bind_ptr ^= null then call hcs_$terminate_noname (bind_ptr, code);
	     if obj_ptr ^= null then if error then call tssi_$clean_up_segment (obj_acl_ptr);
	     if list_ptr ^= null then do;
		if list_open then do;
		     list_open = "0"b;
		     call iox_$close (list_ptr, code);
		     if code ^= 0 then call com_err_ (code, "Attempted to close .list segment.");
		end;

		if list_attach then do;
		     list_attach = "0"b;
		     call iox_$detach_iocb (list_ptr, code);
		     if code ^= 0 then call com_err_ (code, "Attempted to detach .list segment.");
		end;
	     end;

	end cleanup_proc;

parse_args: proc ;

dcl  arg char (arg_len) based (arg_ptr);
dcl  path char (168);
dcl  dir_name char (168);
dcl  entry_name char (32);
dcl  arg_len fixed bin;
dcl  arg_ptr ptr;
dcl  bit_count fixed bin (24);
dcl  nargs fixed bin;
dcl  i fixed bin;

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;

	     b.list, list_open, list_attach, get_search_rules = "0"b;
	     path = "";

	     call cu_$arg_count (nargs);
	     if nargs > 0 then do;
		do i = 1 to nargs;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then call abort (code, "Attempted to get argument.");
		     if substr (arg, 1, 1) = "-" then do;
			if arg = "-list" | arg = "-ls" then b.list = "1"b;
			else if arg = "-search" | arg = "-se" then get_search_rules = "1"b;
			else if arg = "-version" | arg = "-vers" then do;
			     i = i + 1;
			     if i > nargs then call abort (error_table_$wrong_no_of_args, "Version not supplied");
			     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
			     if code ^= 0 then call abort (code, "");
			     arg_version = arg;
			end;
			else if arg = "-cross_ref" | arg = "-cref" then b.list, b.cross_ref = "1"b;
			else call abort (error_table_$badopt, arg);
		     end;

		     else do;
			if path = "" then do;
			     if arg_len < 10 | substr (arg, arg_len - 8, 9) ^= ".bind_fnp"
			     then path = arg || ".bind_fnp";
			     else path = arg;
			end;
			else call abort (error_table_$badopt, arg);
		     end;
		end;
	     end;

	     else call abort (error_table_$wrong_no_of_args,
		"Usage:  bind_fnp path {-list} {-search} {-simulator} {-version} {-cross_ref}");

	     if path = "" then call abort (error_table_$wrong_no_of_args, "Pathname missing");


/* get pointers to bindfile (bind_ptr), listing output (list_ptr), and core image segment (obj_ptr) */

	     i = length (path) + 1 - verify (reverse (path), " ");
	     call expand_path_ (addr (path), i, addr (dir_name), addr (entry_name), code);
	     if code = 0 then do;
		call hcs_$initiate_count (dir_name, entry_name, "", bit_count, 0, bind_ptr, code);
		if bind_ptr ^= null then do;
		     bind_len = divide (bit_count, 9, 21, 0);
		     dir_name = get_wdir_ ();
		     i = length (entry_name) - index (reverse (entry_name), reverse (".bind_fnp")) - 8;
		     b.obj_name, entry_name = substr (entry_name, 1, i);
		     call tssi_$get_segment (dir_name, entry_name, obj_ptr, obj_acl_ptr, code);

/* if list option, get segment and make vfile_ attachment */

		     if code = 0 & b.list then do;
			entry_name = substr (entry_name, 1, i) || ".list";
			call iox_$attach_ioname ("bind_fnp_list", list_ptr, "vfile_ " || substr (entry_name, 1, i+5), code);
			if code = 0 then do;
			     list_attach = "1"b;
			     call iox_$open (list_ptr, 2, "0"b, code);
			     if code = 0 then list_open = "1"b;
			end;
		     end;
		end;

		if code = 0 then do;
		     call set_search_directories (substr (entry_name, 1, i));
		     return;
		end;

		call abort (code, substr (dir_name, 1, length (dir_name) + 1 - verify (reverse (dir_name), " "))
		     || ">" || entry_name);
	     end;

	     else call abort (code, path);

	end parse_args;

/* If the user specified a segment of search rules, it must be in the working directory and have the same name
   as the object segment with a suffix of ".search".  Otherwise the working directory and the default directory will
   be used.
*/


set_search_directories: proc (name);

dcl  name char (*);

dcl  bit_count fixed bin (24);
dcl  seg_ptr ptr;
dcl  seg_end fixed bin;				/* length of search rules segment */
dcl  seg_start fixed bin;				/* index to current directory */

/* constants */

dcl  WHITE_SPACE char (3) int static options (constant) init ("
");						/* tab blank new_line */
dcl  seg char (seg_end) based (seg_ptr);

	     if get_search_rules then do;
		call hcs_$initiate_count (get_wdir_ (), name || ".search", "", bit_count, 0, seg_ptr, code);
		if seg_ptr ^= null then do;
		     seg_start = 1;
		     seg_end = divide (bit_count, 9, 17, 0);
		     b.num_directories = 0;
		     do while (get_directory ());
		     end;
		     if b.num_directories < 1 then call print ("No search rules were specified");
		     call hcs_$terminate_noname (seg_ptr, (0));
		end;
		else call abort (code, name || ".search");
	     end;
	     else do;
		b.num_directories = 1;    /* we only do working dir by default.*/
		call get_working_dir (b.directory (1));
	     end;

	     return;




get_working_dir: proc (dir);

dcl  dir char (*) var;

		dir = get_wdir_ ();
		dir = substr (dir, 1, length (dir) + 1 - verify (reverse (dir), " "));

	     end get_working_dir;

get_directory: proc () returns (bit (1) unal);

dcl  i fixed bin;

		i = verify (substr (seg, seg_start), WHITE_SPACE) -1;
		if i > -1 then do;
		     seg_start = seg_start + i;
		     i = search (substr (seg, seg_start), WHITE_SPACE) -1;
		     if i > -1 then do;
			b.num_directories = b.num_directories + 1;
			if b.num_directories <= hbound (b.directory, 1) then do;
			     if substr (seg, seg_start, i) = "working_dir"
			     then call get_working_dir (b.directory (b.num_directories));
			     else b.directory (b.num_directories) = substr (seg, seg_start, i);
			     seg_start = seg_start + i;
			     return ("1"b);
			end;
			else do;
			     fatal_error = "1"b;
			     call print ("Too many directories specified " || substr (seg, seg_start, i));
			end;
		     end;
		     else call print ("Search file must end with a new line character");
		end;

		return ("0"b);

	     end get_directory;

	end set_search_directories;

parse_bindfile: proc;

dcl  b_len fixed bin;
dcl  b_ptr ptr;
dcl  break fixed bin;
dcl  break_char char (break_len) based (break_ptr);
dcl  break_len fixed bin;
dcl  break_ptr ptr;
dcl  eof fixed bin;
dcl  found_console_man bit (1) init ("0"b);
dcl  module_name char (32);
dcl  module_size fixed bin;
dcl  module_type fixed bin;
dcl  token char (token_len) based (token_ptr);
dcl  token_len fixed bin;
dcl  token_ptr ptr;
dcl (i, k) fixed bin;
dcl 1 parse_flags aligned,
    2 got_hsla bit (1) unal,
    2 got_lsla bit (1) unal,
    2 got_memory bit (1) unal,
    2 got_console bit (1) unal,
    2 got_printer bit (1) unal,
    2 got_entry bit (1) unal,
    2 got_order bit (1) unal,
    2 got_mask bit (1) unal,
    2 got_vers bit (1) unal,
    2 got_meters bit (1) unal;
dcl  got_end bit (1) unal;

/* constant */

dcl  PRINT_TOKEN bit (1) unal int static options (constant) init ("1"b);
dcl  N_REQUIRED_KEYWORDS fixed bin int static options (constant) init (9);
dcl  default_size (3) fixed bin int static options (constant) init (92, 92, 256);
dcl  type_keyword (3) char (5) int static init ("lsla", "hsla", "trace");
dcl  keyword (13) char (12) var int static init ("hsla", "lsla", "memory", "console", "printer", "entry", "order",
     "mask", "version", "meter", "module", "type", "size");
						/* external */

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  parse_file_$parse_file_init_ptr entry (ptr, fixed bin);
dcl  parse_file_$parse_file_unset_break entry (char (*));
dcl  parse_file_$parse_file_ptr entry (ptr, fixed bin, fixed bin, fixed bin);
dcl  parse_file_$parse_file_line_no entry () returns (fixed bin);

/* print header and bindfile if listing was requested */

	     if b.list then do;
		call ioa_$ioa_switch (list_ptr, "^-^-Bindfile for ^a^/^/", b.obj_name);
		call iox_$put_chars (list_ptr, bind_ptr, bind_len, code);
		call ioa_$ioa_switch (list_ptr, "^|");
	     end;

	     b_ptr = bind_ptr;
	     b_len = bind_len;

	     call parse_file_$parse_file_init_ptr (b_ptr, b_len);
	     call parse_file_$parse_file_unset_break (">_$.-+");
	     b.error_header, fatal_error, string (parse_flags), got_end = "0"b;
	     module_name, b.module (*).name = "";
	     b.num_segs = 0;

continue_parse: do while (get_token ());

/* get keyword followed by ':'  */

		if break_char = ":" then do;
		     k = 0;
		     do i = 1 to hbound (keyword, 1) while (k = 0);
			if keyword (i) = token then do;
			     k = i;
			     if k <= 10 then do;
				if ^substr (string (parse_flags), i, 1) then
				     substr (string (parse_flags), i, 1) = "1"b;
				else call parse_error (PRINT_TOKEN, "statement already specified");
			     end;
			end;
		     end;

		     if k = 0 then call parse_error (PRINT_TOKEN, "unrecognized keyword");
		     call parse_statement (k);
		end;

/* check for end statement */


		else if token = "end" & break_char = ";" then do;
		     got_end = "1"b;
		     if get_token () then call parse_error (PRINT_TOKEN, "information follows end statement");
		end;

		else call parse_error (PRINT_TOKEN, "syntax error in statement");

	     end;

	     call set_module;			/* finish module statement */

	     if b.module (3).name = "" then do;		/* no trace module */
		b.module (3).size = 0;
		parse_flags.got_mask = "1"b;
		b.mask = ""b;
	     end;

/* make sure all required keywords were present */

	     if ^substr (string (parse_flags), 1, N_REQUIRED_KEYWORDS) ^= ""b then do;
		do i = 1 to N_REQUIRED_KEYWORDS;
		     if ^substr (string (parse_flags), i, 1) then call print (keyword (i) || " statement missing");
		     fatal_error = "1"b;
		end;
	     end;
	     if ^got_end then call print ("End statement is missing"); /* warning only */

/* make sure special module types were specified and were present in the order statement */

	     if got_order then do;
		do i = 1 to 3;
		     if b.module (i).name ^= "" then do;
			do k = 1 to b.num_segs while (b.module (i).name ^= b.segs (k).seg_name);
			end;
			if k > b.num_segs then do;
			     fatal_error = "1"b;
			     call print ("Module missing from order statement """ || b.module (i).name || """");
			end;
		     end;
		end;
	     end;

/* console_man has to be in module list if a console is configured */

	     if b.console & ^found_console_man then do;
		fatal_error = "1"b;
		call print ("Console was configured without console_man module");
	     end;


	     return;

parse_statement: proc (k);

dcl  k fixed bin;

		if keyword (k) ^= "order" then do;
		     if get_token () then do;
			if break_char ^= ";" then call parse_error (PRINT_TOKEN, "break character "";"" is missing ");
		     end;
		     else return;
		end;
		goto label (k);

/* hsla */
label (1):
		b.num_hsla = cv_dec_check_ (token, code);

		if code = 0 then if b.num_hsla >= 0 & b.num_hsla <= 3 then return;

		call parse_error (PRINT_TOKEN, "illegal value");

/* lsla */
label (2):
		b.num_lsla = cv_dec_check_ (token, code);
		if code = 0 then if b.num_lsla >= 0 & b.num_lsla <= 6 then return;

		call parse_error (PRINT_TOKEN, "illegal value");

/* memory */
label (3):
		b.memory = cv_dec_check_ (token, code);
		if code = 0 then if b.memory <= 256 & b.memory > 0 & mod (b.memory, 32) = 0 then return;

		call parse_error (PRINT_TOKEN, "illegal value");


/* console */
label (4):
		if token = "yes" | token = "no" then do;
		     b.console = (token = "yes");
		     return;
		end;

		call parse_error (PRINT_TOKEN, "yes or no expected");


/* printer  */
label (5):
		if token = "yes" | token = "no" then do;
		     b.printer = (token = "yes");
		     return;
		end;

		call parse_error (PRINT_TOKEN, "yes or no expected");


/* entry */
label (6):
		if token_len <= length (b.entry) then do;
		     b.entry = token;
		     return;
		end;

		call parse_error (PRINT_TOKEN, "entry name too long");


/* order */
label (7):
		do while (get_token ());
		     if token_len > 6 then if substr (token, token_len - 5, 6) = ".objdk"
			then token_len = token_len -6;
		     if token_len <= 25 then do;	/* source must be name.map355 */
			do i = 1 to b.num_segs;
			     if token = b.segs (i).seg_name then call parse_error (PRINT_TOKEN, "duplication in order statement");
			end;
			b.num_segs = b.num_segs + 1;
			b.segs (b.num_segs).seg_name = token;
			if token = "console_man" then found_console_man = "1"b;
		     end;
		     else call parse_error (PRINT_TOKEN, "segment name too long");
		     if break_char = ";" then return;
		end;
		return;

/* mask  */
label (8):
		if module_name = ""
		then call parse_error (^PRINT_TOKEN, "module and type statements must precede mask");
		if module_type = 0
		then call parse_error (^PRINT_TOKEN, "type statement must precede mask");
		if module_type ^= 3
		then call parse_error (^PRINT_TOKEN, "mask statement invalid for modules not of type trace");
		if token_len = 6 then do;
		     i = cv_oct_check_ (token, code);
		     b.mask = substr (unspec (i), 19, 18);
		     if code = 0 then return;
		end;
		call parse_error (PRINT_TOKEN, "mask must be 6 octal digits");

/* version */
label (9):
		if token_len <= 4 then do;
		     b.version = token;
		     return;
		end;
		call parse_error (PRINT_TOKEN, "Invalid version number");

/* meter */
label (10):
		if token = "yes" | token = "no" then do;
		     b.metering_enabled = (token = "yes");
		     return;
		end;

		call parse_error (PRINT_TOKEN, "yes or no expected");

/* module */
label (11):
		call set_module;			/* store values from previous module */
		if token_len <= length (module_name) then do;
		     module_name = token;
		     return;
		end;
		call parse_error (PRINT_TOKEN, "module name too long");

/* type */
label (12):
		if module_name ^= "" then do;
		     if module_type = 0 then do;
			do i = 1 to 3 ;
			     if token = type_keyword (i) then do;
				module_type = i;
				if b.module (module_type).name = "" then return;
				module_type = 0;
				call parse_error (PRINT_TOKEN, "type already specified");
			     end;
			end;
			call parse_error (PRINT_TOKEN, "illegal type specified");
		     end;
		     call parse_error (^PRINT_TOKEN, "type already specified");
		end;
		call parse_error (^PRINT_TOKEN, "module statement must precede type");

/* size */
label (13):
		if module_name ^= "" then do;
		     if module_size = -1 then do;
			module_size = cv_dec_check_ (token, code);
			if code = 0 & module_size >= 0 then return;
			call parse_error (PRINT_TOKEN, "illegal value for size");
		     end;
		     else call parse_error (PRINT_TOKEN, "size  statement already specified");
		end;
		else call parse_error (^PRINT_TOKEN, "module statement must precede size");
		return;


	     end parse_statement;

set_module:    proc;
		if module_name ^= "" then do;
		     if module_type > 0 then do;
			b.module (module_type).name = module_name;
			if module_size = -1 then do;
			     module_size = default_size (module_type);
			     call print ("Using default size for " || module_name);
			end;

			b.module (module_type).size = module_size;
		     end;
		     else do;
			module_type = 0;
			module_size = -1;
			call print ("Type statement missing for "|| module_name);
			fatal_error = "1"b;
		     end;
		end;
		module_type = 0;
		module_size = -1;
		return;

	     end set_module;

/* * This procedure finds the next token and break character.
   *
   *	FOUND		ACTION
   *
   *	token + break	return "1"b
   *	end of file	return "0"b
   *	break + token	error message	non-local goto continue_parse
   *	token + token	error message	non-local goto continue_parse
*/


get_token:     proc () returns (bit (1) unal);

		call parse_file_$parse_file_ptr (b_ptr, b_len, break, eof);
		if eof ^= 0 then return ("0"b);
		token_ptr = b_ptr;
		token_len = b_len;
		if break = 0 then do;
		     call parse_file_$parse_file_ptr (b_ptr, b_len, break, eof);
		     if eof ^= 0 then return ("0"b);
		     break_ptr = b_ptr;
		     break_len = b_len;
		     if break ^= 0 then return ("1"b);
		     else call parse_error (PRINT_TOKEN, "break character is missing");
		end;

		call parse_error (PRINT_TOKEN, "extra break character");

	     end get_token;

/*  This procedure prints error messages from parsing the bindfile.  It skips to the end of the statement
   so there is only one error message per statement.  It also sets fatal_error so binding will be terminated
   after all bindfile parsing is completed.
*/


parse_error:   proc (print_token, message);

dcl  print_token bit (1) unal;			/* ON if token should be printed */
dcl  message char (*);				/* error message */

dcl  temp char (150);				/* error message + line number */
dcl  temp_len fixed bin;				/* length of reformatted message */

/* print error message */

		if print_token then call ioa_$rsnnl ("^a ""^a"" in line # ^d", temp, temp_len, message, token,
		     parse_file_$parse_file_line_no ());
		else call ioa_$rsnnl ("^a in line # ^d", temp, temp_len, message,
		     parse_file_$parse_file_line_no ());
		call print (substr (temp, 1, temp_len));

/* skip to end of statement */

		fatal_error = "1"b;

		do while (break_char ^= ";"& eof = 0);
		     call parse_file_$parse_file_ptr (break_ptr, break_len, break, eof);
		end;

		goto continue_parse;

	     end parse_error;

	end parse_bindfile;

     end bind_fnp;
