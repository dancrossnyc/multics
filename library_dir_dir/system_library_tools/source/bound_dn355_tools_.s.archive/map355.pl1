/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-02-23,Swenson), approve(2016-02-23,MCR10008),
     audit(2016-04-03,GDixon), install(2016-04-05,MR12.6e-0003):
     Fix to not reference options variable before it is set. This prevents
     incorrect argument processing that mis-constructs segment names and
     incorrectly reports an error
                                                   END HISTORY COMMENTS */

map355:
     procedure ();


/*	     "map355" -- command to assemble a Macro Assembly for	*/
/*	the DataNet-355 computer.  This assembly process is	*/
/*	currently performed by invoking the GCOS simulator.  This	*/
/*	particular method has the drawbacks that 1) it tends to use */
/*	features of the Honeywell/6180 which Multics does not use	*/
/*	(and thus are more unlikely to work properly) and 2) it	*/
/*	uses the GCOS simulator which is actually designed for use	*/
/*	by the GCOS Daemon.  It is this particular problem which	*/
/*	causes this program to do such things as link to things	*/
/*	in the process directory (to get temporary segments).	*/

/*	Originally coded by D. M. Wells in Spring, 1973.		*/
/*	Modified by D. M. Wells in February, 1974, to prepare	*/
/*	     for installation.				*/
/*	Modified by T. Casey, May 1974, for compatibility with new	*/
/*	     gcos simulator.				*/
/*	Modified by M. Grady, May, 1976, to fix core size and	*/
/*	     cleanup code.					*/
/*	Modified by Robert coren, April, 1978, to supply severity value */



/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare
        ((num_args, pddl) fixed binary (17),
        (arg_length, bit_count, string_len) fixed binary (24),
         err_code bit (36) aligned,
         NP character (1),				/* cant put this in a canonicalized file		*/
         ename character (32),
         dirname character (168),
        (base_name, job_name, map355_options) character (32) varying,
        (gcos_list_pathname, list_pathname, macro_file_pathname, jobdeck_pathname,
         process_dir, source_dir, working_dir, pdd) character (168) varying,
         argsw bit (1) aligned init ("0"b),
         args char (200) varying init ("-brief"),
         var_line char (300) varying init (""),
         command_line char (300) init (""),
        (acl_info_ptr, arg_ptr, object_seg_ptr) pointer)
         automatic;

declare
         1 options unaligned automatic,
         2 only_check bit (1),
         2 from_comdk bit (1),
         2 make_comdk bit (1),
         2 make_list bit (1),
         2 make_gcos_list bit (1);

declare
         1 status aligned automatic,
         2 error_code bit (36) aligned,
         2 detail_info unaligned,
         3 successful_logical_initiation bit (1),
         3 successful_logical_completion bit (1),
         3 successful_physical_initiation bit (1),
         3 successful_physical_completion bit (1),
         3 transaction_terminated bit (1),
         3 unassigned_bits_42_to_45 (42 : 45) bit (1),
         3 end_of_logical_data_indicator bit (1),
         3 end_of_physical_data_indicator bit (1),
         3 unassigned_bits_48_to_51 (48 : 51) bit (1),
         3 stream_name_detached bit (1),
         3 unassigned_bit_53 bit (1),
         3 transaction_aborted bit (1),
         3 transaction_index bit (18);

/* * * * * TEXT SECTION REFERENCES * * * * * * * */

declare
         NL initial ("
")
         character (1) internal static;

declare
        (comdk_suffix character (6) initial (".comdk"),
         source_suffix character (7) initial (".map355"),
         job_deck_stream character (16) initial ("map355_job_deck_"))
         internal static;

/* * * * * BASED & TEMPLATE DECLARATIONS * * * * */

declare
         based_argument character (arg_length)
         based;

/* * * * * EXTERNAL STATIC DECLARATIONS  * * * * */

declare
         error_table_$badopt
         bit (36) aligned external static;
declare
	map355_severity_ fixed bin (35) ext static;

/* * * * * ENTRY & PROCEDURE DECLARATIONS  * * * */

declare
         adjust_bit_count_ entry (char (168), char (32), bit (1) aligned, fixed bin (24), bit (36) aligned),
         com_err_ entry options (variable),
         cu_$arg_count entry (fixed bin (17)),
         cu_$arg_list_ptr entry () returns (ptr),
         cu_$arg_ptr_rel entry (fixed bin (17), ptr, fixed bin (24), bit (36) aligned, ptr),
         cu_$cp ext entry (ptr, fixed bin, bit (36) aligned),
         delete_$path entry (char (*), char (*), bit (6), char (*), bit (36) aligned),
         expand_path_ entry (ptr, fixed bin (24), ptr, ptr, bit (36) aligned),
         get_pdir_ entry () returns (char (168) aligned),
         get_shortest_pathname_ entry (char (*), char (*), bit (36) aligned),
         get_wdir_ entry () returns (char (168) aligned),
         hcs_$append_link entry (char (*), char (*), char (*), bit (36) aligned),
         hcs_$delentry_file entry (char (*), char (*), bit (36) aligned),
         hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, bit (36) aligned),
         hcs_$set_bc entry (char (*), char (*), fixed bin (24), bit (36) aligned),
         hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), bit (36) aligned),
         hcs_$terminate_noname entry (ptr, bit (36) aligned),
         ioa_ entry options (variable),
         ioa_$ioa_stream entry options (variable),
         ios_$attach entry (char (*), char (*), char (*), char (*), 1 aligned like status),
         ios_$detach entry (char (*), char (*), char (*), 1 aligned like status),
         ios_$seek entry (char (*), char (*), char (*), fixed bin (24), 1 aligned like status),
         ios_$write_ptr entry (ptr, fixed bin (24), fixed bin (24)),
         tssi_$finish_segment entry (ptr, fixed bin (24), bit (36) aligned, ptr, bit (36) aligned),
         tssi_$get_segment entry (char (*), char (*), ptr, ptr, bit (36) aligned);

declare
        (addr, divide, index, length, null, reverse, substr, unspec, verify)
         builtin;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	map355_severity_ = 0;			/* initially */
	unspec (NP) = "000001100"b;

	dirname = get_pdir_ ();
	string_len = length (dirname) - verify (reverse (dirname), " ") + 1;
	process_dir = substr (dirname, 1, string_len);

	dirname = get_wdir_ ();
	string_len = length (dirname) - verify (reverse (dirname), " ") + 1;
	working_dir = substr (dirname, 1, string_len);

	call ioa_ ("MAP355");

	call cu_$arg_count (num_args);

	if num_args = 0
	then do;
	     call ioa_ ("Usage is:^/^10xmap355 source -options-");
	     call ioa_ ("Current options are: -list, -comdk, -check, -noconvert, -gcos_list, -macro_file <path> -ag <gcos args>");
	     map355_severity_ = 2;
	     return;
	end;

	call process_options (cu_$arg_list_ptr (), num_args);

	pddl = length (process_dir) - index (reverse (process_dir), ">"); /* get length of pdd */
	pdd = substr (process_dir, 1, pddl);		/* get process dir dir name */
	call reduce_path_name (pdd);			/* reduce pdd name */
	process_dir = pdd || substr (process_dir, pddl + 1); /* reconstruct name */

	call reduce_path_name (working_dir);
	call reduce_path_name (source_dir);
	call reduce_path_name (macro_file_pathname);

	jobdeck_pathname = process_dir || ">" || job_name || ".jobdk_";

	call ios_$attach ((job_deck_stream), "file_", (jobdeck_pathname), "w", status);
	if status.error_code ^= ""b
	then do;
	     err_code = status.error_code;
	     goto print_err_code;
	end;

	call ios_$seek ((job_deck_stream), "write", "first", 0, status);

	call ioa_$ioa_stream ((job_deck_stream), "$      snumb   assm");
	call ioa_$ioa_stream ((job_deck_stream), "$      ident   1234,ident");

	map355_options = "";
	if options.only_check
	then map355_options = map355_options || "ndeck,";
	else map355_options = map355_options || "deck,";
	if options.make_comdk
	then map355_options = map355_options || "comdk,";
	else map355_options = map355_options || "ncomdk,";

	map355_options = substr (map355_options, 1, length (map355_options) - 1);
	call ioa_$ioa_stream ((job_deck_stream), "$      355map  ^a", map355_options);
	call ioa_$ioa_stream ((job_deck_stream), "$      limits  20,128k         0.20 = 12 minutes");

	if options.from_comdk
	then call ioa_$ioa_stream ((job_deck_stream), "$      prmfl   g*,r,l,^a>^a.comdk", source_dir, base_name);
	else do;
	     call ioa_$ioa_stream ((job_deck_stream), "$      data    g*");
	     call ioa_$ioa_stream ((job_deck_stream), "$      select  ^a>^a^x-ascii", (source_dir), base_name ||
		source_suffix);
	end;


	call ioa_$ioa_stream ((job_deck_stream), "$      prmfl   **,r,r,^a", macro_file_pathname);
	if options.make_gcos_list
	then gcos_list_pathname = working_dir || ">" || base_name || ".glist";
	else gcos_list_pathname = process_dir || ">" || base_name || ".glist_";

	call ioa_$ioa_stream ((job_deck_stream), "$      prmfl   p*,r/w,l,^a", gcos_list_pathname);

	if ^ options.only_check
	then call ioa_$ioa_stream ((job_deck_stream), "$      prmfl   c*,r/w,l,^a>^a.objdk", working_dir, base_name);

	if options.make_comdk
	then call ioa_$ioa_stream ((job_deck_stream), "$      prmfl   k*,r/w,l,^a>^a.comdk", working_dir, base_name);

	call ioa_$ioa_stream ((job_deck_stream), "$      endjob");

	call ios_$seek ((job_deck_stream), "bound", "write", 0, status);

	call ios_$detach ((job_deck_stream), "", "", status);

	if ^ options.only_check
	then do;
	     call tssi_$get_segment ((working_dir), base_name || ".objdk", object_seg_ptr, acl_info_ptr, err_code);
	     if err_code ^= ""b
	     then do;
		call com_err_ (err_code, "map355", "Attempting to create object segment.");
		map355_severity_ = 2;
		return;
	     end;
	end;

	call hcs_$append_link ((working_dir), (job_name || ".jobdk_.job_deck"),
	     (jobdeck_pathname || ".job_deck"), err_code);

	var_line = "gcos " || jobdeck_pathname || " -hd -tnc " || args;
	command_line = var_line;
	call cu_$cp (addr (command_line), length (var_line), err_code);

	if options.make_list
	then list_pathname = working_dir || ">" || base_name || ".list";
	else list_pathname = process_dir || ">" || base_name || ".list_";

	var_line = "gcos_sysprint " || gcos_list_pathname || " " || list_pathname || " -lower_case";
	command_line = var_line;
	call cu_$cp (addr (command_line), length (var_line), err_code);

	call check_error_messages ((list_pathname));

	if ^ options.only_check
	then do;
	     call adjust_bit_count_ ((working_dir), base_name || ".objdk", "0"b, bit_count, err_code);
	     call tssi_$finish_segment (object_seg_ptr, bit_count, "1000"b, acl_info_ptr, err_code);
	     if err_code ^= ""b
	     then do;
		call com_err_ (err_code, "map355", "Calling tssi_$finish_segment.");
		map355_severity_ = 2;
		return;
	     end;
	end;

	if options.make_comdk
	then call abc_new_comdk ();

	dirname = process_dir;			/* copy process dir name for calls to hardcore    */

	if ^ options.make_list
	then call delete_$path (dirname, base_name || ".list_", "100110"b, "map355", err_code);

	if ^ options.from_comdk
	then call delete_$path (dirname, base_name || ".comdk_", "100110"b, "map355", err_code);

	call hcs_$delentry_file (dirname, job_name || ".jobdk_", err_code);
	call hcs_$delentry_file (dirname, job_name || ".jobdk_.job_deck", err_code);

	if ^ options.make_gcos_list
	then call delete_$path (dirname, base_name || ".glist_", "100110"b, "map355", err_code);

	dirname = working_dir;

	call hcs_$delentry_file (dirname, job_name || ".jobdk_.sysprint", err_code);
	call hcs_$delentry_file (dirname, job_name || ".jobdk_.job_deck", err_code);

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * */

print_err_code:
unexpected_error:
	call com_err_ (err_code, "map355", "");
	map355_severity_ = 2;

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * */

path_name_error:
	call com_err_ ((36)"0"b, "map355", "path_name_error");

return_to_caller:
	map355_severity_ = 2;
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

reduce_path_name:
	procedure (bv_path_name);

/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

declare
         bv_path_name character (168) varying
         parameter;

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare
         string_len fixed binary (24)
         automatic;

/* * * * * * * * * * * * * * * * * * * * * * * * */

	     dirname = bv_path_name;

	     call get_shortest_pathname_ (dirname, dirname, err_code);
	     if err_code ^= ""b then goto print_err_code;

	     string_len = length (dirname) - verify (reverse (dirname), " ") + 1;
	     bv_path_name = substr (dirname, 1, string_len);

	     return;

	end reduce_path_name;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

abc_new_comdk:
	procedure ();

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare
         bit_count fixed binary (24)
         automatic;

/* * * * * * * * * * * * * * * * * * * * * * * * */

	     call hcs_$status_minf ((working_dir), base_name || ".comdk", 1b, (0), bit_count, err_code);
	     if err_code ^= ""b
	     then do;
		call com_err_ (err_code, "map355", "unable to set bit count on new comdk");
		map355_severity_ = 2;
		return;
	     end;

	     bit_count = divide (bit_count, 36, 24, 0);
	     bit_count = divide (bit_count, 320, 24, 0);
	     bit_count = bit_count * 320;
	     bit_count = bit_count + 320;
	     bit_count = bit_count * 36;

	     call hcs_$set_bc ((working_dir), base_name || ".comdk", bit_count, err_code);
	     if err_code ^= ""b
	     then do;
		call com_err_ (err_code, "map355", "unable to set bit count (^d) on new comdk", bit_count);
		map355_severity_ = 2;
		return;
	     end;

	     return;

	end abc_new_comdk;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

check_error_messages:
	procedure (bv_list_pathname);

/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

declare
         bv_list_pathname character (*)
         parameter;

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare
        (seg_type fixed binary (2),
        (message_seg, seg_indx) fixed binary (12),
        (bit_count, cur_position, last_char, newline_pos, temp_pos, the_end_pos) fixed binary (24),
         seg_length (0 : 9) fixed binary (24),
         temp_char character (1),
         entry_name character (32),
         dir_name character (168),
         seg_pointer (0 : 9) pointer)
         automatic;

/* * * * * TEXT SECTION REFERENCES * * * * * * * */

declare
         number (0 : 9) character (1) initial ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
         internal static;

/* * * * * BASED & TEMPLATE REFERENCES * * * * * */

declare
         based_seg character (last_char)
         based;

/* * * * * STACK REFERENCES  * * * * * * * * * * */

declare
         program_interrupt condition;

/* * * * * * * * * * * * * * * * * * * * * * * * */
	     call expand_path_ (addr (bv_list_pathname), length (bv_list_pathname), addr (dir_name), addr (entry_name),
		err_code);
	     if err_code ^= ""b
	     then goto err;

	     call hcs_$status_minf (dir_name, entry_name, 1b, seg_type, bit_count, err_code);
						/* see if this is a multisegment file             */
	     if err_code ^= ""b
	     then goto err;

	     if seg_type = 2
	     then do;				/* this is a directory (read: multi-segment file) */
		call expand_path_ (addr (bv_list_pathname), length (bv_list_pathname), addr (dir_name),
			null (), err_code);
		do seg_indx = 0 to bit_count - 1;
		     call hcs_$initiate_count (dir_name, (number (seg_indx)), "", seg_length (seg_indx), 0,
			seg_pointer (seg_indx), err_code);
		     if seg_pointer (seg_indx) = null ()
		     then goto err;
		end;

/* seg_pointer and seg_length arrays now hold addresses and */
/* bit_counts of each of N segs from 0 to N - 1             */
	     end;
	     else do;
		bit_count = 1;
		call hcs_$initiate_count (dir_name, entry_name, "", seg_length (0), 0, seg_pointer (0), err_code);
		if seg_pointer (0) = null ()
		then goto err;
	     end;

	     seg_indx = bit_count;

	     cur_position = 0;
	     do while (cur_position = 0);
		seg_indx = seg_indx - 1;
		if seg_indx < 0
		then do;
		     call com_err_ ((36)"0"b, "map355", "can't find assembly error count message");
		     goto terminate;
		end;

		last_char = divide (seg_length (seg_indx), 9, 24, 0); /* get char lenth of a seg    */
		cur_position, the_end_pos = index (seg_pointer (seg_indx) -> based_seg,
					"warning flags in the above assembly");
						/* look for assembly total error count            */
	     end;

/*      Now, character cur_position in segment seg_indx     */
/* points to the middle of the error count line, if this              */
/* count is non-zero, we also want to print the error lines   */

	     message_seg = seg_indx;

	     call ios_$write_ptr (seg_pointer (message_seg), cur_position - 19, 54);
	     if substr (seg_pointer (message_seg) -> based_seg, cur_position - 4, 2) ^= "no"
	     then do;				/* if there are any errors, print messages        */
		map355_severity_ = 1;		/* and remember the fact */
		on program_interrupt		/* if user doesn't want to see these lines,       */
		     goto terminate;		/* let him suppress the printing of them          */

		do seg_indx = 0 by 1 to message_seg;	/* loop to print errors                           */
		     last_char = divide (seg_length (seg_indx), 9, 24, 0); /* get char length of a seg  */
		     if seg_indx = 0
		     then do;
			cur_position = index (substr (seg_pointer (0) -> based_seg, 1, last_char), "program break");
						/* don't print alter listing                      */
			if cur_position = 0
			then do;
			     call com_err_ ((36)"0"b, "map355", "can't find ""program break"".");
			     cur_position = 1;
			end;
		     end;
		     else cur_position = 1;

		     do while (cur_position < last_char);
			if (seg_indx = message_seg) & (cur_position >= the_end_pos)
			then goto terminate;	/* no need to look further                        */

			newline_pos = index (substr (seg_pointer (seg_indx) -> based_seg, cur_position,
			     last_char + 1 - cur_position), NL);
			if newline_pos = 0
			then goto done;		/* done with this segment                         */

			temp_char = substr (seg_pointer (seg_indx) -> based_seg, cur_position + newline_pos, 1);
			if (temp_char ^= " ") & (temp_char ^= NP) &
			   (index ("0123456789", temp_char) = 0) & (temp_char ^= NL)
			then do;
			     temp_pos = index (substr (seg_pointer (seg_indx) -> based_seg,
				cur_position + newline_pos, last_char - cur_position - newline_pos + 1), NL);
						/* look for next newline                          */
			     if temp_pos = 0
			     then temp_pos = last_char - cur_position - newline_pos + 1; /* this indicates   */
						/* error in last line in seg -- NP      */
			     call ioa_ (substr (seg_pointer (seg_indx) -> based_seg, cur_position + newline_pos,
				temp_pos - 1));
						/* print line in error                            */
			end;
			cur_position = cur_position + newline_pos;
		     end;
done:		end;
	     end;

terminate:
	     revert program_interrupt;

	     do seg_indx = 0 to bit_count - 1;
		call hcs_$terminate_noname (seg_pointer (seg_indx), err_code);
	     end;

	     return;

/* * * * * * * * * * * * * * * * * * * * * * * * */

err:
	     call com_err_ (err_code, "map355", "checking for error messages in listing file.");
	     map355_severity_ = 2;			/* couldn't find error message, something must be wrong */

	     return;

	end check_error_messages;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

process_options:
	procedure (bv_arg_list_ptr, bv_num_args);

/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

declare
        (bv_num_args fixed binary (17),
         bv_arg_list_ptr pointer)
         parameter;

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare
        (indx fixed binary (17),
         string_len fixed binary (24))
         automatic;

/* * * * * * * * * * * * * * * * * * * * * * * * */

	     call cu_$arg_ptr_rel (1, arg_ptr, arg_length, err_code, bv_arg_list_ptr);
	     if err_code ^= ""b
	     then goto unexpected_error;

	     call expand_path_ (arg_ptr, arg_length, addr (dirname), addr (ename), err_code);
	     if err_code ^= ""b
	     then goto print_err_code;

	     macro_file_pathname = ">ldd>mcs>info>355_macros";

	     options.only_check = "0"b;
	     options.make_comdk = "0"b;
	     options.from_comdk = "0"b;
	     options.make_list = "0"b;
	     options.make_gcos_list = "0"b;

	     do indx = 2 by 1 to bv_num_args;
		call cu_$arg_ptr_rel (indx, arg_ptr, arg_length, err_code, bv_arg_list_ptr);
		if err_code ^= ""b
		then goto unexpected_error;

		call process_control_argument (arg_ptr -> based_argument);
	     end;

	     string_len = length (dirname) - verify (reverse (dirname), " ") + 1;
	     source_dir = substr (dirname, 1, string_len);

	     string_len = length (ename) - verify (reverse (ename), " ") + 1;
	     if options.from_comdk then do;
		if string_len > length (comdk_suffix)
		then if substr (ename, string_len + 1 - length (comdk_suffix), length (comdk_suffix)) = comdk_suffix
		     then string_len = string_len - length (comdk_suffix);
	     end;
	     else do;
		if string_len > length (source_suffix)
		then if substr (ename, string_len + 1 - length (source_suffix), length (source_suffix)) = source_suffix
		     then string_len = string_len - length (source_suffix);
	     end;

	     base_name = substr (ename, 1, string_len);

	     if length (base_name) > 11 then
		job_name = substr (base_name, 1, 11);
	     else job_name = base_name;

	     return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

process_control_argument:
	     procedure (bv_control_argument);

/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

declare
         bv_control_argument character (*)
         parameter;

/* * * * * * * * * * * * * * * * * * * * * * * * */

		if argsw then do;
		     args = args || " " || bv_control_argument;
		     return;
		end;

		if (bv_control_argument = "-ag" | bv_control_argument = "-arguments") then do;
		     argsw = "1"b;
		     args = "";			/* clear the default of -brief */
		     return;
		end;

		if bv_control_argument = "-noconvert"
		then do;
		     options.from_comdk = "1"b;
		     return;
		end;

		if (bv_control_argument = "-list") | (bv_control_argument = "-ls")
		then do;
		     options.make_list = "1"b;
		     return;
		end;

		if bv_control_argument = "-comdk"
		then do;
		     options.make_comdk = "1"b;
		     return;
		end;

		if bv_control_argument = "-check"
		then do;
		     options.only_check = "1"b;
		     return;
		end;

		if (bv_control_argument = "-gcos_list") | (bv_control_argument = "-gcls")
		then do;
		     options.make_gcos_list = "1"b;
		     return;
		end;

		if (bv_control_argument = "-macro_file")
		then do;
		     indx = indx + 1;
		     call cu_$arg_ptr_rel (indx, arg_ptr, arg_length, err_code, bv_arg_list_ptr);
		     if err_code ^= ""b
		     then do;
			call com_err_ (err_code, "map355", "getting pathname of macros");
			goto return_to_caller;
		     end;
		     call expand_path_ (arg_ptr, arg_length, addr (dirname), null (), err_code);
		     if err_code ^= ""b
		     then do;
			call com_err_ (err_code, "map355", "Expanding pathname of macro file.");
			goto return_to_caller;
		     end;
		     macro_file_pathname = dirname;
		     return;
		end;

		call com_err_ (error_table_$badopt, "map355", bv_control_argument);

		goto return_to_caller;

	     end process_control_argument;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	end process_options;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

     end map355;
