/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


coreload: proc;

/* coreload is a program to make an absolute object deck
   produced by map355 into a coreimage file.

   Coded by R.B.Snyder many moons ago.
   Re-written by Mike Grady 5/21/76 to make better. */

/* Automatic storage */

dcl (i, argl, code, reclen, loc, full_count) fixed bin;
dcl (argp, hdrp, wdp, segp, bufp) pointer;

dcl  dir char (168);
dcl  ename char (32);
dcl  ascii_card char (80);
dcl (in_name, out_name) char (32);
dcl  fname char (168);
dcl  eofsw bit (1);
dcl  rcrdhdr bit (12);
dcl  st bit (72);

/* Based storage */

dcl  err fixed bin based (addr (st));

dcl 1 card aligned based (bufp),
    2 hdrw bit (36) unal,
    2 cksum bit (36) unal,
    2 words (44) bit (18) unal;

dcl 1 header unaligned based (hdrp),			/* model of text header word */
    2 type bit (12) unaligned,
    2 count bit (6) unaligned,
    2 reladdr bit (18) unaligned;

dcl  words (44) bit (18) unal based (wdp);

dcl 1 seg aligned based (segp),
    2 count fixed bin,
    2 core (0:32768) bit (18) unal;

dcl  name char (argl) based (argp);

/* builtins */

dcl  null builtin;

/* External Entries */

dcl  gcos_gsr_read_ ext entry (char (*), pointer, fixed bin, bit (12), bit (1), fixed bin);
dcl  gcos_gsr_read_$gsr_read_init ext entry (char (*), fixed bin);
dcl  gcos_gsr_read_$gsr_read_close entry (char(*), fixed bin);
dcl  ios_$attach ext entry (char (*), char (*), char (*), char (*), bit (72));
dcl  ios_$setsize ext entry (char (*), fixed bin, bit (72));
dcl (ioa_, com_err_) ext entry options (variable);
dcl  cu_$arg_count ext entry returns (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin);
dcl  gcos_cv_gebcd_ascii_ ext entry (pointer, fixed bin, pointer, fixed bin);
dcl  expand_path_ ext entry (pointer, fixed bin, pointer, pointer, fixed bin);
dcl  ios_$detach ext entry (char (*), char (*), char (*), bit (72));
dcl  hcs_$make_seg ext entry (char (*) aligned, char (*), char (*), fixed bin (5), pointer, fixed bin);
dcl  hcs_$set_bc_seg ext entry (ptr, fixed bin, fixed bin);
dcl  get_wdir_ ext entry returns (char (168) aligned);

	if cu_$arg_count () = 0 then do;		/* tell user how to use command */
	     call com_err_ (0, "coreload", "Usage: coreload {name - objdk from map355}");
	     return;
	end;

	call cu_$arg_ptr (1, argp, argl, code);		/* get input file name */
	call expand_path_ (argp, argl, addr (dir), addr (ename), code); /* get entry name */
	if code ^= 0 then go to error;

	if index (ename, ".objdk") > 0 then do;
	     in_name = ename;
	     out_name = substr (ename, 1, index (ename, ".") -1);
	end;
	else do;
	     in_name = substr (ename, 1, index (ename, " ") -1) || ".objdk";
	     out_name = ename;
	end;
	fname = substr (dir, 1, index (dir, " ") -1) || ">" || in_name;

	call ios_$attach ("in", "file_", fname, "r", st);	/* attach name "in" to file */
	if err ^= 0 then go to ios_err;
	call ios_$setsize ("in", 36, st);		/* set el size to 1 word */

	call hcs_$make_seg (get_wdir_ (), out_name, "", 01010b, segp, code); /* make new seg */
	if segp = null then go to error;

	call gcos_gsr_read_$gsr_read_init ("in", code);	/* init reading */
	if code ^= 0 then go to gc_error;
loop:	call gcos_gsr_read_ ("in", bufp, reclen, rcrdhdr, eofsw, code); /* get a record */
	if code ^= 0 then go to gc_error;
	if eofsw then go to finis;

	if substr (rcrdhdr, 5, 2) = "10"b then do;	/* hollerith card image */
	     call gcos_cv_gebcd_ascii_ (bufp, reclen*6, addr (ascii_card), 0); /* convert to ascii */
	     call ioa_ ("^a", ascii_card);		/* let's see it */
	     go to loop;
	end;

	if substr (rcrdhdr, 5, 2) ^= "01"b then do;	/* non-binary card image */
	     call com_err_ (0, "coreload", "illegal card type, not hollerith or binary");
	     go to det;
	end;

	full_count = 0;
	hdrp = addr (card.hdrw);

	if header.type = "000000000101"b then go to finis; /* transfer card, end of deck */
	if header.type ^= "001000000101"b then do;
	     call com_err_ (0, "coreload", "Illegal card type. Not abs text.");
	     return;
	end;

	loc = fixed (header.reladdr);
	wdp = addr (card.words);

	do while (setup_block());
	     do i = 1 to fixed (header.count);
		seg.core (loc) = words (i);
		loc = loc + 1;
	     end;
	     full_count = full_count + fixed (header.count);
	end;
	go to loop;

finis:	seg.count = divide (loc + 1, 2, 17, 0);
	call hcs_$set_bc_seg (segp, seg.count*36, code);
	if code ^= 0 then go to error;

det:	call gcos_gsr_read_$gsr_read_close("in", code);
	call ios_$detach ("in", "", "", st);
	return;

ios_err:	call com_err_ (err, "coreload", "^a", in_name);
	go to det;

error:	call com_err_ (code, "coreload", "^a", name);
	go to det;

gc_error:	call com_err_ (code, "coreload", "From gcos_gsr_read_");
	go to det;


setup_block: proc returns (bit (1) aligned);

dcl  nhdr fixed bin;

	if full_count = 0 then return ("1"b);
	if full_count > 42 then return ("0"b);

	nhdr = fixed (header.count) + 1;
	hdrp = addr (words (nhdr));

	if header.type ^= "001000000101"b then return ("0"b);

	wdp = addr (words (nhdr + 2));
	full_count = full_count + 2;
	loc = fixed (header.reladdr);
	return ("1"b);

     end;

     end coreload;
