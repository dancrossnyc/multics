/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1974 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


manipulate_pathname_:
          procedure ();

/*	     "manipulate_pathname_" -- procedure that contains	*/
/*	several routines to manipulate pathnames (as opposed to	*/
/*	dirnames and enames).  Such manipulations include getting	*/
/*	the equivalent pathname which is of the shortest character	*/
/*	length, the equivalent pathname which contains only	    */
/*	primary enames, etc.  It is a feature of the routines that	*/
/*	the caller may use the same string for input and output	*/
/*	pathnames.  Also note that the concept of directory links	*/
/*	is ignored by these routines.				*/

/*	Originally coded by D. M. Wells in Spring, 1973.	  */
/*	Last modified by D. M. Wells to February, 1974 to prepare	*/
/*	     for installation.				*/


          /* * * * * PARAMETER DECLARATIONS  * * * * * * * */

     declare
          (bv_err_code bit (36) aligned,
          bv_input_pathname character (*),
          bv_output_pathname character (*))
               parameter;

          /* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

     declare
          ((indx, output_ename_indx) fixed binary (17),
          (cur_loc, name_len, next_loc, output_ename_len) fixed binary (24),
          desired_type character (8),
          name character (32),
          (in_name, out_name) character (168) varying,
          (area_ptr, link_ptr, names_ptr) pointer)
               automatic;

     declare
          1 entry_branch unaligned automatic,
             2 type bit (2) unaligned,
             2 nnames bit (16) unaligned,
             2 nrp bit (18) unaligned,
             2 dtm bit (36) unaligned,
             2 dtu bit (36) unaligned,
             2 mode bit (5) unaligned,
             2 padding bit (13) unaligned,
             2 records bit (18) unaligned;

          /* * * * * DEFINED DECLARATIONS  * * * * * * * * */

     declare
          1 link_branch unaligned defined (entry_branch),
             2 type bit (2) unaligned,
             2 nnames bit (16) unaligned,
             2 nrp bit (18) unaligned,
             2 dtem bit (36) unaligned,
             2 dtd bit (36) unaligned,
             2 pnl bit (18) unaligned,
             2 pnrp bit (18) unaligned;

          /* * * * * BASED & TEMPLATE DECLARATIONS * * * * */

     declare
          (based_names (1 : 1) character (32) aligned,
          based_link_pathname character (binary (link_branch.pnl, 18)) aligned,
          based_area area)
               based;

          /* * * * * EXTERNAL STATIC DECLARATIONS  * * * * */

     declare
          error_table_$bad_segment
               bit (36) aligned external static;


          /* * * * * ENTRY & PROCEDURE DECLARATIONS  * * * */

     declare
          establish_cleanup_proc_ constant entry (entry),
          get_system_free_area_ constant entry () returns (ptr),
          hcs_$status_ constant entry (char (*), char (*), fixed bin (1), ptr, ptr, bit (36) aligned);

     declare
          (addr, binary, index, length, max, pointer, reverse, substr, verify)
               builtin;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

					/*      Entry point to prepare the shortest equivalent	*/
					/* pathname (as measured in characters).		*/

get_shortest_pathname_:
          entry (bv_input_pathname, bv_output_pathname, bv_err_code);

          desired_type = "shortest";

          goto common_code;

          /* * * * * * * * * * * * * * * * * * * * * * * * */

					/*      Entry point to prepare the longest equivalent	*/
					/* pathname (as measured in characters).		*/

get_longest_pathname_:
          entry (bv_input_pathname, bv_output_pathname, bv_err_code);

          desired_type = "longest ";
          goto common_code;

          /* * * * * * * * * * * * * * * * * * * * * * * * */

					/*      Entry point to prepare the equivalent pathname	*/
					/* using only primary entry names.			*/

get_primary_pathname_:
          entry (bv_input_pathname, bv_output_pathname, bv_err_code);

          desired_type = "primary ";

          goto common_code;

          /* * * * * * * * * * * * * * * * * * * * * * * * */

common_code:
          name_len = length (bv_input_pathname) - verify (reverse (bv_input_pathname), " ") + 1;
          in_name = substr (bv_input_pathname, 1, name_len) || ">";

          cur_loc = 1;
          out_name = "";

          area_ptr = get_system_free_area_ ();
          names_ptr = null ();
          link_ptr = null ();

          entry_branch.nrp = ""b;
          link_branch.pnrp = ""b;

          call establish_cleanup_proc_ (cleanup);

          do while ("1"b);
               next_loc = index (substr (in_name, cur_loc + 1), ">");
               if next_loc = 0 then goto almost_done;

               next_loc = cur_loc + next_loc;

               call hcs_$status_ (substr (in_name, 1, max (cur_loc - 1, 1)), substr (in_name, cur_loc + 1, next_loc - cur_loc - 1),
                    0b, addr (entry_branch), area_ptr, bv_err_code);
               if bv_err_code ^= ""b
               then return;

               names_ptr = pointer (area_ptr, entry_branch.nrp);
               entry_branch.nrp = ""b;

               if entry_branch.type = "00"b
               then link_ptr = pointer (area_ptr, link_branch.pnrp);
               else link_ptr = null ();
               link_branch.pnrp = ""b;

               if desired_type = "primary " then do;
                    output_ename_indx = 1;
                    output_ename_len = length (names_ptr -> based_names (1)) - verify (reverse (names_ptr -> based_names (1)), " ") + 1;
                    out_name = out_name || ">" || substr (names_ptr -> based_names (output_ename_indx), 1, output_ename_len);
                    end;
               else if desired_type = "shortest" then do;
                         output_ename_len = 33;
                         output_ename_indx = 0;

                         do indx = 1 by 1 to binary (entry_branch.nnames, 16);
                              name = names_ptr -> based_names (indx);
                              name_len = length (name) - verify (reverse (name), " ") + 1;
                              if name_len < output_ename_len then do;
                                   output_ename_indx = indx;
                                   output_ename_len = name_len;
                                   end;
                              end;
                         out_name = out_name || ">" || substr (names_ptr -> based_names (output_ename_indx), 1, output_ename_len);
                         end;
                    else if desired_type = "longest " then do;
                              output_ename_len = -1;
                              output_ename_indx = 0;

                              do indx = 1 by 1 to binary (entry_branch.nnames, 16);
                                   name = names_ptr -> based_names (indx);
                                   name_len = length (name) - verify (reverse (name), " ") + 1;
                                   if name_len > output_ename_len then do;
                                        output_ename_indx = indx;
                                        output_ename_len = name_len;
                                        end;
                                   end;
                              out_name = out_name || ">" || substr (names_ptr -> based_names (output_ename_indx), 1, output_ename_len);
                              end;
                         else goto something_got_messed_up_in_here;

               call cleanup ();

               cur_loc = next_loc;
               end;

                    /* * * * * * * * * * * * * * * * * * * */

almost_done:
          bv_output_pathname = out_name;

          bv_err_code = ""b;

          return;

          /* * * * * * * * * * * * * * * * * * * * * * * * */

something_got_messed_up_in_here:
          bv_err_code = error_table_$bad_segment;           /* only this time, its us that's bad              */

          return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

cleanup:
          procedure ();

          /* * * * * * * * * * * * * * * * * * * * * * * * */

          if names_ptr ^= null ()
          then free names_ptr -> based_names in (area_ptr -> based_area);

          if link_ptr ^= null ()
          then free link_ptr -> based_link_pathname in (area_ptr -> based_area);
          else if (entry_branch.type = "00"b) & (link_branch.pnrp ^= ""b)
               then free pointer (area_ptr, link_branch.pnrp) -> based_link_pathname in (area_ptr -> based_area);

          return;

end cleanup;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

end manipulate_pathname_;
