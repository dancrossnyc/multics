/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modified 9/79 by R.J.C. Kissel to handle 6250 bpi tapes. */
/* Modified 3 February 1980, M. R. Jordan, to use parse_tape_reel_name_. */
/* Modified 1 April 1981, W. Olin Sibert, to fix bug in above, and convert for strings as error messages */
/* Modified 31 July 1981, WOS, to always detach mst_tape even if errors occurred in closing it */
/* Modified 1985-05-16, BIM: set async mode on tape attachment, clean up
		    some of the archaisms. */

/* format: style3,ind3,dclind6,idind32 */
gm_util1_:
   procedure;

dcl   a_ptr		        ptr,		/* pointer to array of directories to be searched */
      a_path_list_name	        char (168) aligned,	/* path name of list of directories */
      number_of_directories	        fixed bin (17),	/* number of directories to be searched */
      header_path		        char (168),		/* path name of driving header */
      header_dir		        char (168),		/* directory porion of header path */
      header_ent		        char (32),		/* entry portion of header path */
      header_ptr		        ptr,		/* pointer to header */
      a_ioname2		        char (32) aligned,	/* ioname 2 for attaching tape */
      output_seg_name	        char (32) aligned,	/* name of output listing */
      code		        fixed bin (35),	/* error code */
      error_message		        char (*),		/* error type */
      sysid		        char (8),		/* system id */
      time		        char (256),		/* time string */
      do_sw		        bit (1) aligned,	/* discard output switch */
      db_sw		        bit (1) aligned,	/* debug switch for file attachment */
      mst_tape_iocbp	        ptr,
      gm_output_iocbp	        ptr;


dcl   path_list_iocbp	        static ptr init (null);


dcl   (list_has_been_attached, tape_has_been_attached, output_file_was_created)
			        fixed bin static;

dcl   initial_state		        fixed bin static init (0),
      attached_state	        fixed bin static init (1),
      open_state		        fixed bin static init (2);

dcl   atom		        char (32) aligned;

dcl   atd			        char (256) varying;

dcl   b_path_list_name	        char (168) int static,/* static copies of arguments for call to close */
      path_list_name	        char (length_pnl) based (addr (b_path_list_name)),
      length_pnl		        fixed bin int static,
      ioname2		        char (32) int static;

dcl   line_read		        char (168) aligned,	/* buffer for ios_read */
      num_chars_read	        fixed bin (21);	/* number of characters read into buffer */

dcl   i			        fixed bin (17);	/* do loop index */
dcl   j			        fixed bin;

dcl   path_array		        (number_of_directories) char (168) based (a_ptr);
						/* for looking at path array */
dcl   t_err		        fixed bin (17);	/* number of tape errors */
dcl   s_db_sw		        bit (1) aligned static;

/* external variables */

dcl   error_table_$short_record       ext fixed bin (35);
dcl   error_table_$end_of_info        ext fixed bin (35);

/* external entries */


%include iox_entries;
%include iox_modes;

declare	absolute_pathname_		  entry (character (*), character (*), fixed binary (35));
declare	expand_pathname_		  entry (character (*), character (*), character (*), fixed binary (35));
declare	date_time_$format		  entry (character (*), fixed binary (71), character (*), character (*))
				  returns (character (250) var);

dcl   com_err_$suppress_name	        ext entry options (variable),
      ioa_		        entry options (variable),
      ioa_$ioa_switch	        entry options (variable),
      parse_file_$parse_file_init_name
			        entry (char (*), char (*), ptr, fixed bin (35));

dcl   (addr, before, clock, index, null, rtrim, substr)
			        builtin;		/*  */
open:
   entry (a_ptr, a_path_list_name, number_of_directories, header_path, header_ptr, a_ioname2, mst_tape_iocbp,
        gm_output_iocbp, output_seg_name, code, error_message, db_sw, do_sw, sysid);

      number_of_directories = 0;
      error_message = "";

      length_pnl = index (a_path_list_name, " ") - 1;
      if length_pnl < 0
      then length_pnl = 168;
      b_path_list_name = a_path_list_name;
      ioname2 = a_ioname2;

      s_db_sw = db_sw | do_sw;


      list_has_been_attached, tape_has_been_attached, output_file_was_created = initial_state;


/*  attach the path list  */
/* ---------------------- */

      call iox_$attach_name ("path_list", path_list_iocbp, "vfile_ " || path_list_name, null (), code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to reference search file";
	  go to ERROR;
         end;
      else list_has_been_attached = attached_state;

      call iox_$open (path_list_iocbp, Stream_input, "0"b, code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to reference search file";
	  go to ERROR;
         end;

      else list_has_been_attached = open_state;

/*  fill the path name array  */
/* -------------------------- */

      do i = 1 to 10;
         call iox_$get_line (path_list_iocbp, addr (line_read), 168, num_chars_read, code);
         if code ^= 0
         then
	  do;
	     if code = error_table_$short_record
	     then
	        do;
		 num_chars_read = num_chars_read + 1;	/* adjust for no new line character */
		 code = 0;
	        end;
	     else if code = error_table_$end_of_info
	     then
	        do;
		 code = 0;
		 go to FINISHED_LIST;
	        end;
	     else
	        do;
		 error_message = "Unable to read path list";
		 go to ERROR;
	        end;
	  end;
         num_chars_read = num_chars_read - 1;
         line_read = substr (line_read, 1, num_chars_read); /* strip off trailing CR */
         call absolute_pathname_ (substr (line_read, 1, num_chars_read), path_array (i), code);
         if code ^= 0
         then
	  do;
	     error_message = "Unable to expand pathname in path list";
	     go to ERROR;
	  end;
         number_of_directories = number_of_directories + 1; /*
						   if status.end_of_data = "1"b then go to FINISHED_LIST;
						   */
      end;

/*
   if (^status.end_of_data)			/* too many path names */
/*
   then do;
   error_message = "Too many names in path list";
   go to ERROR;
   end;
*/

FINISHED_LIST:					/*  initiate the header  */
						/* --------------------- */
      call expand_pathname_ (header_path, header_dir, header_ent, code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to expand header pathname";
	  go to ERROR;
         end;

      call parse_file_$parse_file_init_name (header_dir, header_ent, header_ptr, code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to initiate header";
	  go to ERROR;
         end;

/*  attach the tape  */
/* ----------------- */

      atd = "";
      if do_sw
      then atd = "discard_";
      else if db_sw
      then atd = "vfile_ " || ioname2;
      else
         do;
	  atd = "tape_mult_ ";
	  i = index (ioname2, ",");
	  if i = 0
	  then atd = atd || rtrim (ioname2);
	  else
	     do;
	        atd = atd || before (ioname2, ",");
	        do while (i ^= 0);
		 j = index (substr (ioname2, i + 1), ",");
		 if j = 0
		 then atom = substr (ioname2, i + 1);
		 else
		    do;
		       j = j + i;
		       atom = substr (ioname2, i + 1, j - i - 1);
		    end;
		 if atom = "7track"
		 then atd = atd || " -tk 7";
		 else if atom = "9track"
		 then atd = atd || " -tk 9";
		 else if index (atom, "=800") ^= 0
		 then atd = atd || " -den 800";
		 else if index (atom, "=1600") ^= 0
		 then atd = atd || " -den 1600";
		 else if index (atom, "=6250") ^= 0
		 then atd = atd || " -den 6250";
		 else if atom = "800"
		 then atd = atd || " -den 800";
		 else if atom = "1600"
		 then atd = atd || " -den 1600";
		 else if atom = "6250"
		 then atd = atd || " -den 6250";
		 else atd = atd || " -com " || atom;
		 i = j;
	        end;
	     end;
	  if index (atd, " -den") = 0
	  then atd = atd || " -den 800";
	  atd = atd || " -wrt";
         end;

      call iox_$attach_name ("mst_tape", mst_tape_iocbp, (atd), null (), code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to attach tape";
	  go to ERROR;
         end;
      else tape_has_been_attached = attached_state;

      call iox_$open (mst_tape_iocbp, Stream_output, "0"b, code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to attach tape";
	  go to ERROR;
         end;

      else tape_has_been_attached = open_state;

      if ^(do_sw | db_sw)
      then call iox_$modes (mst_tape_iocbp, "async", "", (0));
						/* Set tape to async mode */

/*  initiate the output file  */
/* -------------------------- */

      call iox_$attach_name ("gm_output", gm_output_iocbp, "vfile_ " || output_seg_name, null (), code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to create output file";
	  go to ERROR;
         end;
      else output_file_was_created = attached_state;

      call iox_$open (gm_output_iocbp, Stream_output, "0"b, code);
      if code ^= 0
      then
         do;
	  error_message = "Unable to create output file";
	  go to ERROR;
         end;

      else output_file_was_created = open_state;

      time = date_time_$format ("date_time", clock (), "", "");

      call ioa_$ioa_switch (gm_output_iocbp, "^-^-Generation of System ^a on Tape ^a at ^a^/^/", sysid, ioname2, time);

      call ioa_$ioa_switch (gm_output_iocbp, "^-NAME^-^-     DATE CHANGED^-      AUTHOR^-      LANG^-PATHNAME^/^/");

      call ioa_ ("begin generation");

ERROR:
      return;

/*  */

close:
   entry (gm_output_iocbp, mst_tape_iocbp, hold_sw);

dcl   hold_sw		        bit (1) aligned;

dcl   error_code		        fixed bin (35);

      error_code = 0;
      if output_file_was_created ^= initial_state
      then
         do;
	  if output_file_was_created = open_state
	  then call iox_$close (gm_output_iocbp, error_code);
	  output_file_was_created = attached_state;
	  if error_code = 0
	  then call iox_$detach_iocb (gm_output_iocbp, error_code);
	  output_file_was_created = initial_state;
	  if error_code ^= 0
	  then call com_err_$suppress_name (error_code, "gm_util1_", "detach ^a", path_list_name);
         end;

      if tape_has_been_attached ^= initial_state
      then
         do;
	  if s_db_sw = "0"b
	  then
	     do;
	        t_err = 0;
	        if tape_has_been_attached = open_state
	        then call iox_$control (mst_tape_iocbp, "error_count", addr (t_err), error_code);
	        call ioa_ ("tape errors = ^d", t_err);
	     end;
	  if tape_has_been_attached = open_state
	  then call iox_$close (mst_tape_iocbp, error_code);
	  tape_has_been_attached = attached_state;
	  if ^hold_sw
	  then if error_code = 0
	       then call iox_$detach_iocb (mst_tape_iocbp, error_code);
	       else call iox_$detach_iocb (mst_tape_iocbp, (0));
						/* If code is already nonzero, preserve it */
	  tape_has_been_attached = initial_state;
	  if error_code ^= 0
	  then call com_err_$suppress_name (error_code, "gm_util1_", "detach tape");
         end;

      if list_has_been_attached ^= initial_state
      then
         do;
	  if list_has_been_attached = open_state
	  then call iox_$close (path_list_iocbp, error_code);
	  list_has_been_attached = attached_state;
	  if error_code = 0
	  then call iox_$detach_iocb (path_list_iocbp, error_code);
	  list_has_been_attached = initial_state;
	  if error_code ^= 0
	  then call com_err_$suppress_name (error_code, "gm_util1_", "detach ^a", path_list_name);
         end;

      return;

   end gm_util1_;
