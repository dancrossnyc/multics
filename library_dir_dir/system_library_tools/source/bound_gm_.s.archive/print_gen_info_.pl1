/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

print_gen_info_: proc (p, bc, stream, code);

dcl  p ptr,
     bc fixed bin,
     stream char (*),
     code fixed bin;

dcl 1 oi like object_info aligned;

dcl 1 info aligned,
    2 pad bit (36),
    2 dtm bit (36);

dcl (len, i) fixed bin,
     dirname char (168) aligned,
     ename char (32) aligned,
     time char (16),
     component_only bit (1) aligned init ("0"b),
     tran_id char (12) aligned,
     author char (24) aligned,
     based_name char (len) based (sp),
    (symb_ptr, sp, sblkp, bmp) ptr,
    (error_table_$oldobj, error_table_$not_bound, error_table_$bad_segment) fixed bin ext,
    (addrel, fixed, null) builtin;

dcl 1 spec based aligned,				/* special structure for looking at old symbol sections */
    2 pad bit (36) aligned,
    2 pad_again bit (9) unal,
    2 zeros bit (9) unal;


dcl (ioa_$ioa_stream, get_bound_seg_info_, hcs_$fs_get_path_name, hcs_$get_bc_author, hcs_$status_) entry options (variable),
     date_time_$fstime entry (bit (36) aligned, char (*)),
     date_time_ entry (fixed bin (71), char (*));

join:	
	code = 0;

	call hcs_$fs_get_path_name (p, dirname, i, ename, code); /* get name of segment */
	if code ^= 0 then return;

	oi.version_number = object_info_version_2;
	call get_bound_seg_info_ (p, bc, addr (oi), bmp, symb_ptr, code);
	if code ^= 0 then if (code = error_table_$not_bound) | (code = error_table_$oldobj) then code = 0;
	else if code = error_table_$bad_segment then do;	/* non-standard object segment */
	     call hcs_$get_bc_author (dirname, ename, author, code); /* get author of seg */
	     if code ^= 0 then return;
	     call hcs_$status_ (dirname, ename, 1, addr (info), null, code); /* get DTM */
	     if code ^= 0 then return;
	     call date_time_$fstime (info.dtm, time);			/* convert */
	     call ioa_$ioa_stream (stream, "^32a  ^16a  ^24aNON-OBJECT ^44a^/", ename, time, author, dirname);
	     return;
	end;
	else return;

	call date_time_ (oi.compile_time, time);	/* get time of creation */
	if oi.userid = "" then call hcs_$get_bc_author (dirname, ename, oi.userid, code);

	if ^component_only then			/* If we want the entire segment ... */
	call ioa_$ioa_stream (stream, "^32a  ^16a  ^24a^12a^44a", ename, time, oi.userid, oi.compiler, dirname);

/* Now check to aee if the segment is a bound segment */

	if bmp ^= null then do;			/* if this is a bound seg with a bindmap ... */
	     do i = 1 to bmp -> bindmap.n_components;	/* loop through all of them */
		sblkp = addrel (oi.symbp, bmp -> bindmap.component (i).symb_start); /* get pointer to symbol section */
		len = fixed (bmp -> bindmap.component (i).name.name_lng, 18);
		ename = addrel (symb_ptr, bmp -> bindmap.component (i).name.name_ptr) -> based_name;
		if component_only then if ename ^= comp_name then goto next_component;
		if sblkp -> spec.zeros then do;	/* new format symbol section */
		     call date_time_ (sblkp -> sb.obj_creation_time, time); /* get time of compilation/assembly */
		     len = fixed (sblkp -> sb.uid_length, 18);
		     author = addrel (sblkp, sblkp -> sb.uid_offset) -> based_name;
		     tran_id = sblkp -> sb.generator;	/* get name of compiler */
		end;
		else do;				/* old style symbol section for this component */
		     call date_time_ (sblkp -> symbol_header.times.translation, time);
		     author = "";
		     tran_id = bmp -> bindmap.component (i).comp_name;
		end;
		call ioa_$ioa_stream (stream, "  ^32a^16a  ^24a^12a", ename, time, author, tran_id);
		if component_only then return;
next_component:	
	     end;
	end;
	if component_only then do;
	     code = error_table_$not_bound;
	     return;
	end;

	if ^component_only then
	call ioa_$ioa_stream (stream, " ");
	return;

component: entry (p, bc, stream, code, comp_name);

dcl  comp_name char (*);

	component_only = "1"b;
	goto join;
						/*  */
% include symbol_block;
% include symbol_header;
% include bind_map;
% include object_info;

     end;
