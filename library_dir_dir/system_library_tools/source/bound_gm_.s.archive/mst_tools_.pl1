/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style2 */

mst_tools_:
     procedure;

/* NOT A RETAINED ENTRYPOINT */

copy_mst:
     entry;
	function = "copy_mst";
	severityp = addr (copy_mst_severity_);
	go to join;
excerpt_mst:
     entry;
	function = "excerpt_mst";
	severityp = addr (excerpt_mst_severity_);
	go to join;
list_mst:
     entry;
	function = "list_mst";
	severityp = addr (list_mst_severity_);

/***** Old style MST utilities, used for BOS tapes (and copying Multics tapes) */
/* from merge_mst. */
/* Bernard Greenberg, 1/12-13/76
   10/20/76 for tapes with defs
   2/80 by Michael R.Jordan to add call to parse_tape_reel_name_ and fix bugs.
  Modified so it would compile again, and maybe still work afterwards,
    10/21/80 W.Olin Sibert 
  Modified by J.A.Bush to copy boot labels from input to output tapes 
  Modified 10/82 BIM remove merge, write.
  Modified 05/85 GW May call tape_mult_ in async mode to avoid sync padding. */


/****^  HISTORY COMMENTS:
  1) change(87-01-12,GDixon), approve(87-04-16,MCR7614),
     audit(87-05-21,Farley), install(87-07-15,MR12.1-1040):
     Support copying from or to disk file images of a Multics System Tape, in
     addition to copying from/to tapes.  Also, add severity variables to report
     success/failure of copy/excerpt/list operations.
                                                   END HISTORY COMMENTS */


	declare check_star_name_$entry entry (character (*), fixed binary (35));
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare (
	        ioa_,
	        com_err_,
	        com_err_$suppress_name
	        )			 entry options (variable);
	declare date_time_		 entry (fixed bin (71), char (*));
	declare absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	declare get_shortest_path_	 entry (char (*)) returns (char (168));
	declare get_temp_segments_	 entry (char (*), (*) ptr, fixed bin (35));
	declare get_wdir_		 entry returns (char (168));
	declare initiate_file_$create	 entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
				 fixed bin (35));
	declare object_info_$display	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	declare pathname_		 entry (char (*), char (*)) returns (char (168));
	declare parse_tape_reel_name_	 entry (char (*), char (*));
	declare release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
	declare terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	declare unique_chars_	 entry (bit (*)) returns (char (15));

	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare argx		 fixed bin;
	declare arg_count		 fixed bin;
	declare arg		 character (al) based (ap);
	declare optp		 ptr;
	declare optl		 fixed bin (21);
	declare opt		 char (optl) based (optp);

	declare boot_label		 bit (1) aligned;
	declare code		 fixed bin (35);
	declare date_time_compiled	 char (32);
	declare function		 char (32);

	declare (in, out)		 pointer;
	declare out_seg_ptr		 pointer;
	declare severityp		 pointer;

	declare temp_seg_ptrs	 (3) ptr;
	declare header_ptr		 pointer defined (temp_seg_ptrs (1));
	declare contents_ptr	 pointer defined (temp_seg_ptrs (2));
	declare boot_program_guts_ptr	 pointer defined (temp_seg_ptrs (3));

	declare (name_len, seg_len)	 fixed bin (18) uns unal;
	declare header_wc		 fixed bin (18) uns unal;
	declare copy		 (seg_len) bit (36) aligned based;

	declare 1 select_list	 aligned,
		2 count		 fixed bin,
		2 names		 (get_arg_count ()),
		  3 arg_ptr	 pointer,
		  3 arg_length	 fixed bin (21);

	declare atd		 char (256);
	declare (in_den, out_den)	 fixed bin;
	declare (in_file_name, out_file_name)
				 character (168);
	declare (in_tape_name, out_tape_name)
				 character (32);
	declare inout		 fixed bin,
	        (
	        UNSET		 init (0),
	        IN		 init (1),
	        OUT		 init (2)
	        )			 fixed bin int static options (constant);

	declare (copy_mst_severity_, excerpt_mst_severity_, list_mst_severity_)
				 fixed bin (35) ext static init (0);
	declare error_table_$bad_arg	 fixed bin (35) ext static;
	declare error_table_$badopt	 fixed bin (35) ext static;
	declare error_table_$end_of_info
				 fixed bin (35) ext static;
	declare error_table_$inconsistent
				 fixed bin (35) ext static;
	declare error_table_$noarg	 fixed bin (35) ext static;

	dcl     cleanup		 condition;

	dcl     1 control_word	 aligned,
		2 type		 fixed bin (17) unaligned,
		2 count		 fixed bin (18) uns unal;

	dcl     1 collection_mark	 aligned,
		2 major		 fixed bin (17) unaligned,
		2 minor		 fixed bin (17) unaligned;

	dcl     1 oi		 like object_info aligned;

	dcl     1 header		 aligned based (header_ptr),
		2 slte		 like slte_uns,
		2 segnam		 like segnam;

	dcl     severity		 fixed bin (35) based (severityp);

	declare (expect_seg, expect_link, expect_defs)
				 bit (1) aligned;


	declare COPY		 char (32) init ("copy_mst") int static options (constant);
	declare LIST		 char (32) init ("list_mst") int static options (constant);
	declare EXCERPT		 char (32) init ("excerpt_mst") int static options (constant);
	declare (addr, char, codeptr, convert, divide, index, length, ltrim, null, rtrim, size)
				 builtin;



join:
	severity = 4;				/* assume error  */
	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, function);
		return;
	     end;

	if arg_count = 0
	then
USAGE:
	     do;
		if function = COPY
		then call com_err_$suppress_name (0, function, "Usage: copy_mst INPUT_SPEC OUTPUT_SPEC");
		else if function = LIST
		then call com_err_$suppress_name (0, function, "Usage: list_mst TAPE");
		else if function = EXCERPT
		then call com_err_$suppress_name (0, function, "Usage: excerpt_mst TAPE name1 name2 ... nameN");
		return;
	     end;

	boot_label = "0"b;
	in, out, temp_seg_ptrs = null;		/* init for cleanup */
	on cleanup call clean_up;

/* Parse */

	if function = COPY
	then if arg_count < 2
	     then go to USAGE;

	in_tape_name, in_file_name, out_tape_name, out_file_name = "";
	in_den, out_den = UNSET;
	inout = UNSET;
	select_list.count = 0;

	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if index (arg, "-") = 1
	     then do;
		     if arg = "-input_volume" | arg = "-ivol"
		     then do;
			     in_tape_name, in_file_name = "";
			     inout = IN;
			     if argx = arg_count
			     then do;
				     call com_err_ (error_table_$noarg, function,
					"^a must be followed by a tape volume name.", arg);
				     go to RETURN;
				end;
			     else do;
				     argx = argx + 1;
				     call cu_$arg_ptr (argx, optp, optl, (0));
				     in_tape_name = opt;
				end;
			end;
		     else if arg = "-input_file" | arg = "-if"
		     then do;
			     in_tape_name, in_file_name = "";
			     inout = UNSET;
			     if argx = arg_count
			     then do;
				     call com_err_ (error_table_$noarg, function,
					"^a must be followed by a file name.", arg);
				     go to RETURN;
				end;
			     else do;
				     argx = argx + 1;
				     call cu_$arg_ptr (argx, optp, optl, (0));
				     in_file_name = opt;
				end;
			end;
		     else if (arg = "-output_volume" | arg = "-ovol") & function = COPY
		     then do;
			     out_tape_name, out_file_name = "";
			     inout = OUT;
			     if argx = arg_count
			     then do;
				     call com_err_ (error_table_$noarg, function,
					"^a must be followed by a tape volume name.", arg);
				     go to RETURN;
				end;
			     else do;
				     argx = argx + 1;
				     call cu_$arg_ptr (argx, optp, optl, (0));
				     out_tape_name = opt;
				end;
			end;
		     else if (arg = "-output_file" | arg = "-of") & function = COPY
		     then do;
			     out_tape_name, out_file_name = "";
			     inout = UNSET;
			     if argx = arg_count
			     then do;
				     call com_err_ (error_table_$noarg, function,
					"^a must be followed by a file name.", arg);
				     go to RETURN;
				end;
			     else do;
				     argx = argx + 1;
				     call cu_$arg_ptr (argx, optp, optl, (0));
				     out_file_name = opt;
				end;
			end;
		     else if arg = "-density" | arg = "-den"
		     then do;
			     if argx = arg_count
			     then do;
				     call com_err_ (error_table_$noarg, function,
					"^a must be followed by a tape density.", arg);
				     go to RETURN;
				end;
			     else do;
				     argx = argx + 1;
				     call cu_$arg_ptr (argx, optp, optl, (0));
				     if opt = "800" | opt = "1600" | opt = "6250"
				     then do;
					     if inout = IN
					     then in_den = convert (in_den, opt);
					     else if inout = OUT
					     then out_den = convert (in_den, opt);
					     else do;
						     call com_err_ (error_table_$inconsistent, function,
							"^a ^a must follow either -ivol or -ovol.", arg,
							opt);
						     go to RETURN;
						end;
					end;
				     else do;
					     call com_err_ (error_table_$bad_arg, function,
						"^a ^a^/Allowed densities are: 800, 1600, 6250.", arg, opt);
					     go to RETURN;
					end;
				end;
			end;
		     else do;
			     call com_err_ (error_table_$badopt, function, arg);
			     go to RETURN;
			end;
		end;
	     else if in_tape_name = "" & in_file_name = ""
	     then in_tape_name = arg;
	     else if (out_tape_name = "" & out_file_name = "") & function = COPY
	     then out_tape_name = arg;
	     else if function = LIST | function = EXCERPT
	     then do;
		     call check_star_name_$entry (arg, code);
		     if code ^= 0 & code ^= 1 & code ^= 2
		     then do;
			     call com_err_ (code, function, "^a", arg);
			     go to RETURN;
			end;
		     select_list.count = select_list.count + 1;
		     select_list.arg_ptr (select_list.count) = ap;
		     select_list.arg_length (select_list.count) = al;
		end;
	     else do;
		     call com_err_ (error_table_$bad_arg, function, arg);
		     go to RETURN;
		end;
	end;

/* We know what we want */

	call get_temp_segments_ (function, temp_seg_ptrs, (0));

/* There is always an input tape */

	call get_in_medium ();

/* Output if copy */

	if function = COPY
	then do;
		call get_out_medium ();
	     end;


/* YET ANOTHER VERSION OF SEGMENT_LOADER */

	severity = 0;				/* no errors now */
	expect_seg, expect_link, expect_defs = "0"b;

loop:
	call get_data (addr (control_word), size (control_word));
	if control_word.type = 0			/* read the control word */
	then do;					/* header control word */
		header_wc = control_word.count;
		call get_data (header_ptr, header_wc);	/* read in header */
		expect_seg = "1"b;
		if function = COPY
		then do;
			call put_data (addr (control_word), size (control_word));
			call put_data (header_ptr, header_wc);
		     end;

	     end;

	else if control_word.type = 1
	then do;					/*  A segment */
		expect_seg = "0"b;
		seg_len = control_word.count;
		call get_data (contents_ptr, seg_len);	/* get real seg */

		if expect_link
		then do;
			if ^header.slte.link_sect
			then call MST_format_error ("missing linkage segment");

			expect_link = "0"b;
			expect_defs = "1"b;
		     end;

		else if expect_defs
		then do;
			if ^header.slte.defs
			then call MST_format_error ("missing defs segment");

			expect_defs = "0"b;

		     end;

		else do;
			if header.slte.defs | header.slte.link_sect
			then call MST_format_error ("unexpected link or defs segment");
			expect_link = header.slte.link_provided;
		     end;

		if function = COPY
		then do;
			call put_data (addr (control_word), size (control_word));
			call put_data (contents_ptr, control_word.count);
		     end;

		else /* tree */
		     if NAME_MATCHES ()
		then if function = LIST
		     then do;
			     oi.version_number = 2;
			     call object_info_$display (contents_ptr, (header.slte.bit_count), addr (oi), code);
			     if code = 0
			     then do;
				     call date_time_ (oi.compile_time, date_time_compiled);
				     date_time_compiled = rtrim (oi.compiler || " " || date_time_compiled);
				end;
			     else date_time_compiled = "";
			     call ioa_ ("^a^35t^d^-words ^a", NAME (), control_word.count, date_time_compiled);
			end;
		     else if function = EXCERPT
		     then do;
			     call ioa_ ("Excerpting ^a.", pathname_ (get_wdir_ (), NAME ()));
			     call initiate_file_$create (get_wdir_ (), NAME (), RW_ACCESS, out_seg_ptr, ""b, 0,
				code);
			     if out_seg_ptr = null
			     then do;
				     call com_err_ (code, function, "Could not write ^a>^a.", get_wdir_ (),
					NAME ());
				     severity = 4;
				     go to loop;
				end;
			     out_seg_ptr -> copy = contents_ptr -> copy;
			     call terminate_file_ (out_seg_ptr, (header.slte.bit_count), TERM_FILE_TRUNC_BC_TERM,
				(0));
			end;
	     end;
	else if control_word.type = 2
	then do;					/* Collection mark */

		if expect_link | expect_defs
		then call MST_format_error ("missing defs or link segment");
		call get_data (addr (collection_mark), 1);

		call ioa_ ("Processed collection ^d.^d", collection_mark.major, collection_mark.minor);
		if function = COPY
		then do;

			call put_data (addr (control_word), size (control_word));
			call put_data (addr (collection_mark), 1);
		     end;

		expect_seg = "1"b;
	     end;

	else call MST_format_error ("unrecognized control word");
	go to loop;


/* Subroutines that read and write */

get_arg_count:
     proc returns (fixed bin);

	dcl     arg_count		 fixed bin,
	        code		 fixed bin (35);

	call cu_$arg_count (arg_count, code);
	return (arg_count);
     end get_arg_count;


get_in_file:
     proc;

	call absolute_pathname_ (in_file_name, in_file_name, code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "-if ^a", in_file_name);
		go to RETURN;
	     end;

	in_file_name = get_shortest_path_ (in_file_name);

	call iox_$attach_name ("mst_tools_.input." || unique_chars_ (""b), in, "vfile_ " || in_file_name || " -old",
	     codeptr (mst_tools_), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot attach input file ^a", in_file_name);
		go to RETURN;
	     end;

	call iox_$open (in, Stream_input, ("0"b), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot open input file ^a", in_file_name);
		go to RETURN;
	     end;

	call get_data (addr (control_word), size (control_word));
	if control_word.type = -1
	then do;					/* bootload program control word */
						/* It is written as a name, followed by the pgm.	*/

		boot_program_info.version = BOOT_PROGRAM_INFO_VERSION_1;
						/* set version */
		boot_label = "1"b;			/* set flag to copy onto output tape */
		name_len = divide (length (boot_program_info.boot_program_name), CHARS_PER_WORD, 18, 0);
		seg_len = control_word.count - name_len;/* set copy length */
		call get_data (addr (boot_program_info.boot_program_name), name_len);
		call get_data (boot_program_guts_ptr, seg_len);
						/* copy boot program in to temp seg */
		boot_program_info.boot_program_ptr = boot_program_guts_ptr;
						/* set new boot program ptr */
		boot_program_info.boot_program_text_length = seg_len;
	     end;
	else do;
		boot_label = "0"b;
		call iox_$close (in, (0));
		call iox_$open (in, Stream_input, ""b, (0));
	     end;

     end get_in_file;


get_in_medium:
     proc;

	if in_file_name ^= ""
	then call get_in_file ();
	else if in_tape_name ^= ""
	then call get_in_tape ();
	else do;
		call com_err_ (error_table_$noarg, function,
		     "An input tape or file must be specified via -ivol or -if.");
		go to RETURN;
	     end;
     end get_in_medium;

get_in_tape:
     proc;

	call parse_tape_reel_name_ (in_tape_name, atd);
	if in_den ^= UNSET
	then atd = rtrim (atd) || " -density " || ltrim (char (in_den));

	call iox_$attach_name ("mst_tools_.input." || unique_chars_ (""b), in, "tape_mult_ " || rtrim (atd),
	     codeptr (mst_tools_), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot attach input tape ^a", atd);
		go to RETURN;
	     end;

	call iox_$open (in, Stream_input, ("0"b), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot open input tape ^a", atd);
		go to RETURN;
	     end;

	boot_program_info.version = BOOT_PROGRAM_INFO_VERSION_1;
						/* set version */
	call iox_$control (in, "get_boot_program", addr (boot_program_info), code);
	if code ^= 0
	then do;					/* can't do it */
		call com_err_ (code, function, "getting the input tape boot label");
		go to RETURN;
	     end;

	if boot_program_info.boot_program_ptr ^= null
	then do;					/* if this tape has a boot label... */
		boot_label = "1"b;			/* set flag to copy onto output tape */
		seg_len = boot_program_info.boot_program_text_length;
						/* set copy length */
		boot_program_guts_ptr -> copy = boot_program_info.boot_program_ptr -> copy;
						/* copy boot program in to temp seg */
		boot_program_info.boot_program_ptr = boot_program_guts_ptr;
						/* set new boot program ptr */
	     end;
     end get_in_tape;


get_out_file:
     proc;

	call absolute_pathname_ (out_file_name, out_file_name, code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "-if ^a", out_file_name);
		go to RETURN;
	     end;

	out_file_name = get_shortest_path_ (out_file_name);

	call iox_$attach_name ("mst_tools_.output." || unique_chars_ (""b), out, "vfile_ " || out_file_name,
	     codeptr (mst_tools_), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot attach output file ^a", out_file_name);
		go to RETURN;
	     end;

	call iox_$open (out, Stream_output, ("0"b), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot open output file ^a", out_file_name);
		go to RETURN;
	     end;

	if boot_label
	then do;					/* bootload program control word */
						/* It is written as a name, followed by the pgm.	*/

		name_len = divide (length (boot_program_info.boot_program_name), CHARS_PER_WORD, 18, 0);
		seg_len = boot_program_info.boot_program_text_length;

		control_word.type = -1;
		control_word.count = name_len + seg_len;

		call put_data (addr (control_word), size (control_word));
		call put_data (addr (boot_program_info.boot_program_name), name_len);
		call put_data (boot_program_guts_ptr, seg_len);
						/* copy boot program in to temp seg */
	     end;

     end get_out_file;


get_out_medium:
     proc;

	if out_file_name ^= ""
	then call get_out_file ();
	else if out_tape_name ^= ""
	then call get_out_tape ();
	else do;
		call com_err_ (error_table_$noarg, function,
		     "An output tape or file must be specified via -ovol or -of.");
		go to RETURN;
	     end;

     end get_out_medium;

get_out_tape:
     proc;
	call parse_tape_reel_name_ (out_tape_name, atd);
	if out_den ^= UNSET
	then atd = rtrim (atd) || " -density " || ltrim (char (out_den));

	call iox_$attach_name ("mst_tools_.output." || unique_chars_ (""b), out,
	     "tape_mult_ " || rtrim (atd) || " -write", codeptr (mst_tools_), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot attach output tape ^a.", out_tape_name);
		go to RETURN;
	     end;

	if boot_label
	then do;					/* if we have to copy input boot label program */
		call iox_$control (out, "boot_program", addr (boot_program_info), code);
		if code ^= 0
		then do;				/* can't do it */
			call com_err_ (code, function, "writing boot label program");
			go to RETURN;
		     end;
	     end;

	call iox_$open (out, Stream_output, ("0"b), code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Cannot open output tape ^a.", out_tape_name);
		go to RETURN;
	     end;
	call iox_$modes (out, "async", (""), (0));
     end get_out_tape;


put_data:
     proc (data_ptr, data_words);
	declare data_ptr		 pointer;
	declare data_words		 fixed bin (18) uns unal;

	call iox_$put_chars (out, data_ptr, data_words * 4, code);
	if code ^= 0
	then do;
		call com_err_ (code, function, "Fatal error writing output MST^[ ^a^;^s^]^[ ^a^;^s^].",
		     (out_tape_name ^= ""), out_tape_name, (out_file_name ^= ""), out_file_name);
		severity = 4;
		go to RETURN;
	     end;
	return;

get_data:
     entry (data_ptr, data_words);

	call iox_$get_chars (in, data_ptr, data_words * 4, (0), code);
	if code = error_table_$end_of_info
	then go to DONE;
	else if code ^= 0
	then do;
		call com_err_ (code, function, "Fatal error reading input MST^[ ^a^;^s^]^[ ^a^;^s^].",
		     (in_tape_name ^= ""), in_tape_name, (in_file_name ^= ""), in_file_name);
		severity = 4;
		go to RETURN;
	     end;
	else return;

     end put_data;

NAME:
     procedure returns (character (32));


	return (header.segnam.names (1).name);
     end NAME;

NAME_MATCHES:
     procedure returns (bit (1) aligned);
	declare starx		 fixed bin;
	declare match_star_name_	 entry (character (*), character (*), fixed binary (35));

	if select_list.count = 0
	then return ("1"b);

	do starx = 1 to select_list.count;
	     begin;
		declare starname		 char (select_list.names (starx).arg_length)
					 based (select_list.names (starx).arg_ptr);

		call match_star_name_ (NAME (), starname, code);

		if code = 0
		then return ("1"b);
	     end;
	end;
	return ("0"b);

     end NAME_MATCHES;

MST_format_error:
     procedure (what);
	declare what		 char (*);

	call com_err_ (0, function, "MST format error, ^a. Use check_mst to diagnose it.", what);
	severity = 4;
	go to RETURN;
     end;

RETURN:
DONE:
	call clean_up;
	return;

clean_up:
     procedure;
	if in ^= null
	then call clean_up_switch (in);
	if out ^= null
	then call clean_up_switch (out);

	if temp_seg_ptrs (1) ^= null
	then call release_temp_segments_ (function, temp_seg_ptrs, (0));

	in, out, temp_seg_ptrs = null;
     end clean_up;

clean_up_switch:
     procedure (switch);

	declare switch		 pointer;

	call iox_$close (switch, (0));
	call iox_$detach_iocb (switch, (0));

     end clean_up_switch;







/* format: off */
%page; %include access_mode_values;
%page; %include iox_entries;
%page; %include iox_modes;
%page; %include object_info;
%page; %include slt;
%page; %include slte;
%page; %include system_constants;
%page; %include tape_mult_boot_info;
%page; %include terminate_file;
     end;
