/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gm_write_first_seg_: proc (sltep, seg_bitcnt, fseg_ptr, iocb_ptr, object_segment_error, code);


/*

   The first segment is written out as follows:

   1) a header control word

   2) the slte data

   3) padding of minus ones to make up 22 written words

   4) a segment control word.  the right half of this word contains a value of
   32 less than the actual word length of the first segment

   (the 24 words thus written plus the first 8 words of tape record information
   make up the first 32 words on the tape)

   5) the segment itself, beginning at word 33



   */

/* Modified 31 July 1981, W. Olin Sibert, for gm_write_boot_program_ compatibility */

/*  argument declarations  */

dcl  fseg_ptr ptr;					/* pointer to segment */

dcl  seg_bitcnt fixed bin (24);			/* length of segment */
dcl  code fixed bin (35);				/* error code */

/*  program declarations  */


dcl  1 minus_one aligned static options (constant),	/* for writing padding */
       2 part1 bit (6 * 36) init ((216)"1"b),
       2 part2 bit (6 * 36) init ((216)"1"b),
       2 part3 bit (6 * 36) init ((216)"1"b),
       2 part4 bit (4 * 36) init ((144)"1"b);

dcl 1 control_word aligned,				/* control word structure */
       2 ident fixed bin (17) unal,
       2 length fixed bin (17) unal;

dcl  first_ptr ptr,					/* pointer to word 33 of segment */
     first_seg_word_length fixed bin (17);		/* number of words to be written */

dcl  object_segment_error bit (1) aligned;

dcl  iocb_ptr ptr;

dcl size builtin;

% include slte;
% include object_info;

dcl  1 oi aligned like object_info;

dcl  iox_$put_chars entry (ptr, ptr, fixed bin (35), fixed bin(35)),
     object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));

dcl  (addr, addrel, bin, bit, divide) builtin;

/*  */
	object_segment_error = "0"b;

	oi.version_number = object_info_version_2;

	call object_info_$brief (fseg_ptr, seg_bitcnt, addr (oi), code);
						/* take text portion only */
	if code ^= 0 then do;
	     object_segment_error = "1"b;		/* so main routine will know */
	     return;
	end;

	first_seg_word_length = oi.tlng + oi.dlng;
	slte.cur_length = bit (divide (first_seg_word_length+1023, 1024, 9, 0), 9); /* reset current length */
	slte.bit_count = bit (bin(first_seg_word_length * 36, 24), 24);	/* and bitcount */
	first_seg_word_length = first_seg_word_length - 32;
	control_word.ident = 0;			/* create a header control word */
	control_word.length = 10110b;	/* relative offset of end of header */

	call iox_$put_chars (iocb_ptr, addr (control_word), 4, code);
	if code ^= 0 then return;

	call iox_$put_chars (iocb_ptr, sltep, size (slte)*4, code);
	if code ^= 0 then return;

	call iox_$put_chars (iocb_ptr, addr (minus_one), (22-size (slte))*4, code);
	if code ^= 0 then return;

	control_word.ident = 1;	/* set up a segment control word */
	control_word.length = first_seg_word_length; /* subtract header length */

	first_ptr = addrel (oi.textp, 32);		/* prepare for writing from word 33 */

	call iox_$put_chars (iocb_ptr, addr (control_word), 4, code);
	if code ^= 0 then return;

	call iox_$put_chars (iocb_ptr, first_ptr, first_seg_word_length*4, code);

	return;

     end gm_write_first_seg_;
