/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-03-18,Fawcett), approve(86-03-18,MCR7374),
     audit(86-09-05,Lippard), install(86-09-16,MR12.0-1159):
     Created to control the MCA for online use. This is mainly used by online
     T&D.
                                                   END HISTORY COMMENTS */

/* format: style4 */
/* Created Nov 1984 by R. A. Fawcett */
mca_tandd_:
     proc;
	return;


dcl  a_code fixed bin (35);
dcl  a_ioi_idx fixed bin (17);
dcl  a_mca_status bit (36);
dcl  a_mcad_ptr ptr;
dcl  a_ret_len fixed bin (21);
dcl  a_user_ptr ptr;
dcl  a_user_words fixed bin (17);

dcl  basic_size fixed bin (17);
dcl  code fixed bin (35);
dcl  1 event_info_area like event_wait_info;
dcl  ev_info_ptr ptr;
dcl  idcw1_cmd bit (6);
dcl  ioi_ws_size fixed bin (18);
dcl  offset_of_data_2 fixed bin;
dcl  ret_len fixed bin (21);
dcl  ret_data char (ret_len) based;
dcl  1 sk_mca_area like mca_area;
dcl  sk_ioi_idx fixed bin;
dcl  tally_num fixed bin (17);
dcl  temp_bits bit (16);
dcl  user_iop ptr;
dcl  user_size fixed bin;
dcl  user_level fixed bin;

dcl  CHARS_PER_WORD fixed bin init (4) static options (constant);
dcl  CONT_NO_MARKER bit (2) init ("10"b) static options (constant);
dcl  DATA_TYPE bit (6) init ("15"b3) static options (constant);
dcl  ENABLE_CONT_CMD bit (6) init ("40"b3) static options (constant);
dcl  IDCW_ID bit (3) init ("7"b3) static options (constant);
dcl  IOTD bit (2) init ("00"b) static options (constant);
dcl  MAX_DATA_SIZE fixed bin (17) init (16384) static options (constant);
dcl  MAX_TALLY fixed bin (17) init (4096) static options (constant);
dcl  READ_TYPE bit (6) init ("03"b3) static options (constant);
dcl  TEXT_TYPE bit (6) init ("13"b3) static options (constant);


dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  get_ring_ entry () returns (fixed bin (3));
dcl  convert_ipc_code_ entry options (variable);
dcl  ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  mca_parse_ entry (ptr, fixed bin (21), ptr, fixed bin, fixed bin (35));
dcl  mca_util_$connect entry (ptr, fixed bin (35));
dcl  mca_util_$io_event_mca entry (ptr, ptr, ptr, fixed bin (35));
dcl  mca_util_$mca_ptr entry (fixed bin, fixed bin (35)) returns (ptr);

dcl  (addr, bin, divide, fixed, length, low, min, mod, rel, size, substr, unspec) builtin;

dcl  cleanup condition;

dcl  error_table_$area_too_small fixed bin (35) ext static;
dcl  sys_info$page_size fixed bin ext static;
%page;
mca_tandd_$read_data:
     entry (a_ioi_idx, a_user_ptr, a_user_words, a_mca_status, a_code);

/* This entry is to read the remaining data from the MCA if any */

	idcw1_cmd = READ_TYPE;
	goto TANDD_COMMON;

%skip (4);
mca_tandd_$write_data:
     entry (a_ioi_idx, a_user_ptr, a_user_words, a_mca_status, a_code);

/* This entry is used for the HOST MCA dialog */

	idcw1_cmd = DATA_TYPE;
	goto TANDD_COMMON;
%skip (4);
mca_tandd_$write_text:
     entry (a_ioi_idx, a_user_ptr, a_user_words, a_mca_status, a_code);

/* This entry is used to cause the MCA to affect some IPC */

	idcw1_cmd = TEXT_TYPE;

TANDD_COMMON:

	sk_ioi_idx = a_ioi_idx;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	mcad_ptr = mca_util_$mca_ptr (sk_ioi_idx, code);
	if code ^= 0 then goto ERROR_EXIT;

	code = 0;

	if idcw1_cmd = READ_TYPE then call build_read_io_blk;
	else call build_write_io_blk;

	if code ^= 0 then goto ERROR_EXIT;

/* now get set for the IO completion */
/* don't return the mca_dcw_list, start at the status_area */

	mcad.entry_to_return_data = mca_tandd_$return_data;
	mcad.user_ptr = addr (user_iop -> mca_work_space.status_area);
	mcad.return_data_ptr = addr (mca_work_space.status_area);

/* requests the connect */

	call mca_util_$connect (mcad_ptr, code);
	if code ^= 0 then goto ERROR_EXIT;
	if ^mcad.async_io then do;

/* the user has requested in the attachment that we wait
   for the IO to complete */

	     call wait;

/* alway tell status */
	     a_mca_status = substr (mca_area.mca_status, 1, length (a_mca_status));


	     if code ^= 0 then goto ERROR_EXIT;
	end;

	else a_mca_status = "0"b;			/* no status yet */
	a_code = 0;
	call cu_$level_set (user_level);
	return;
%skip (4);
mca_tandd_$return_data:
     entry (a_mcad_ptr, a_ret_len, a_code);

/* called by mca_util_$io_event entries for both sync and async IO modes */

	mcad_ptr = a_mcad_ptr;
	mca_work_space_ptr = mcad.ioi_wks_ptr;
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	idcwp = addr (mca_dcw_list.idcw1);
	if idcw.control = "00"b			/* read-data */
	then dcwp = addr (mca_dcw_list.dcw1);		/* use first dcw */
	else dcwp = addr (mca_dcw_list.dcw2);		/* write text/data & read-data, use second */

/* find the offset of data_2 */
	io_param_blk_ptr = mcad.io_param_ptr;
	offset_of_data_2 = fixed (rel (io_param_blk_ptr), 17) + size (io_parameter_block);

/* find the size in chars of data_2 */

	temp_bits = io_parameter_block.source_len_msb || io_parameter_block.source_len_lsb;
	data_size_2 = fixed (temp_bits, 21);
	tally_num = bin (dcw.tally, 17);		/* find amount requested */
	if tally_num = 0 then tally_num = MAX_TALLY;
	tally_num = (tally_num - size (data_header)) * CHARS_PER_WORD;
	data_size_2 = min (data_size_2, tally_num);	/* use smallest */

/* we will return from the status offset to the end of the returned data */
	ret_len = (CHARS_PER_WORD * (offset_of_data_2 - mcad.status_offset)) + data_size_2;
	mcad.user_ptr -> ret_data = mcad.return_data_ptr -> ret_data;
	a_code = 0;
	a_ret_len = ret_len;
	return;
%skip (4);
ERROR_EXIT:
	a_code = code;
	call cu_$level_set (user_level);
	return;
%page;

build_read_io_blk:
     proc;

/* internal proc to build the ioi_work_space for read entries.
   This will build the IDCWs and DCWs based on the entry and the
   way the io_block is built. */

	user_iop = a_user_ptr;
	user_size = a_user_words;
	basic_size = size (mca_dcw_list) + size (istat) + size (data_header);
	data_size_1 = MAX_DATA_SIZE;			/* max the mca can send */
	data_size_2 = 0;
	call get_ws_size;
	if code ^= 0 then return;

/* now set up the idcw and dcw */
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	unspec (mca_dcw_list) = ""b;
	isp = addr (mca_work_space.status_area);
	unspec (mca_work_space.status_area) = ""b;

/* idcw command based on entry */
	idcwp = addr (mca_dcw_list.idcw1);
	unspec (idcw) = "0"b;
	dcwp = addr (mca_dcw_list.dcw1);
	unspec (dcw) = "0"b;

/* for read the data will always be returned in the second io_blk */
	data_header_ptr = addr (mca_work_space.data_header_1);
	mca_work_space.data_1 = low (data_size_1);

/* remember where we tell the MCA to return the data */
	mcad.io_param_ptr = addr (data_header.io_param_blk);
	unspec (idcw) = "0"b;
	idcw.command = READ_TYPE;
	idcw.code = IDCW_ID;
	idcw.chan_cmd = ENABLE_CONT_CMD;
	dcw.address = rel (data_header_ptr);
	dcw.type = IOTD;

/* Tally in words */
	tally_num = size (data_header) + (divide (data_size_1, CHARS_PER_WORD, 17));
	if mod (data_size_1, CHARS_PER_WORD) > 0 then tally_num = tally_num + 1;
	if tally_num > MAX_TALLY then tally_num = MAX_TALLY; /* trim to 4k */
	dcw.tally = substr (unspec (tally_num), 25, 12);

     end build_read_io_blk;

%page;
build_write_io_blk:
     proc;

/* internal proc to build the ioi_work_space for write entries.
   This will build the IDCWs and DCWs based on the entry and the
   way the io_block is built. This proc will call mca_parse_
   if the write_text entry was called */

	user_iop = a_user_ptr;
	user_size = a_user_words;
	basic_size = size (mca_dcw_list) + size (istat)
	     + (2 * size (data_header));
	io_param_blk_ptr = addr (user_iop -> mca_work_space.data_header_1.io_param_blk);

/* find out how large the mca command is */

	temp_bits = io_parameter_block.dest_len_msb || io_parameter_block.dest_len_lsb;
	data_size_1 = fixed (temp_bits, 21);
	data_size_2 = MAX_DATA_SIZE;
	call get_ws_size;
	if code ^= 0 then return;

	io_param_blk_ptr = addr (mca_work_space.data_header_1.io_param_blk);
	unspec (mca_work_space.data_header_1) = ""b;
	unspec (mca_work_space.list_of_dcw) = ""b;
	unspec (mca_work_space.status_area) = ""b;
	mca_work_space.data_1 = low (data_size_1);
						/*  copy the first part of the user data_header */
	mca_work_space.data_header_1 = user_iop -> mca_work_space.data_header_1;

/* copy the mca command */

	mca_work_space.data_1 = user_iop -> mca_work_space.data_1;

	if idcw1_cmd = TEXT_TYPE then do;

/* if this is a call for the write_text entry check the mca command */

	     call mca_parse_ (addr (mca_work_space.data_1), data_size_1,
		mcad_ptr, user_level, code);

/* if parse found some thing wrong get out of here now. */
	     if code ^= 0 then return;
	end;

	unspec (mca_work_space.data_header_2) = ""b;
						/* OK copy over the rest of the user info */
	mca_work_space.data_header_2 = user_iop -> mca_work_space.data_header_2;

/* now set up the idcws and dcws */
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	isp = addr (mca_work_space.status_area);
	idcwp = addr (mca_dcw_list.idcw1);
	unspec (idcw) = "0"b;

/* idcw command based on entry */
	idcw.command = idcw1_cmd;
	idcw.code = IDCW_ID;
	idcw.control = CONT_NO_MARKER;
	idcw.chan_cmd = ENABLE_CONT_CMD;
	dcwp = addr (mca_dcw_list.dcw1);
	unspec (dcw) = "0"b;
	data_header_ptr = addr (mca_work_space.data_header_1);
	dcw.address = rel (data_header_ptr);
	dcw.type = IOTD;

/* Tally in words + 1 */
	tally_num = size (data_header) + divide (data_size_1, CHARS_PER_WORD, 17);
	if mod (data_size_1, CHARS_PER_WORD) ^= 0 then tally_num = tally_num + 1;
	if tally_num > MAX_TALLY then tally_num = MAX_TALLY; /* trim to 4k */
	dcw.tally = substr (unspec (tally_num), 25, 12);

/* now set up the second data block for the returned data */

	data_header_ptr = addr (mca_work_space.data_header_2);

/* remember where we tell the MCA to return the data */
	mcad.io_param_ptr = addr (data_header.io_param_blk);
	idcwp = addr (mca_dcw_list.idcw2);
	unspec (idcw) = "0"b;
	idcw.command = READ_TYPE;
	idcw.code = IDCW_ID;
	idcw.chan_cmd = ENABLE_CONT_CMD;
	dcwp = addr (mca_dcw_list.dcw2);
	unspec (dcw) = "0"b;
	dcw.address = rel (data_header_ptr);
	dcw.type = IOTD;
	mca_work_space.data_2 = low (data_size_2);
						/* Tally in words */
	tally_num = size (data_header) + (divide (data_size_2, CHARS_PER_WORD, 17) + 1);
	if tally_num > MAX_TALLY then tally_num = MAX_TALLY; /* trim to 4k */
	dcw.tally = substr (unspec (tally_num), 25, 12);
     end build_write_io_blk;
%page;
get_ws_size:
     proc;
dcl  pages fixed bin;
	mca_work_space_ptr = mcad.ioi_wks_ptr;
						/* check user space */
	if user_size < basic_size + divide (data_size_1, CHARS_PER_WORD, 17) then do;
	     if idcw1_cmd ^= READ_TYPE then do;
		code = error_table_$area_too_small;
		return;
	     end;
	     else if user_size < basic_size then do;
		code = error_table_$area_too_small;
		return;
	     end;
	end;

/* make sure the current ioi_work_space is large enough to get started */
	ioi_ws_size = basic_size + divide (data_size_1, CHARS_PER_WORD, 17) + divide (data_size_2, CHARS_PER_WORD, 17);
	pages = divide (ioi_ws_size, sys_info$page_size, 17);
	if mod (ioi_ws_size, sys_info$page_size) ^= 0 then pages = pages + 1;
	ioi_ws_size = pages * sys_info$page_size;	/* ioi increments in pages */
	if mcad.current_ws_size < ioi_ws_size then do;
	     call ioi_$workspace (mcad.ioi_idx, mcad.ioi_wks_ptr,
		ioi_ws_size, code);
	     if code ^= 0 then return;
	     mcad.current_ws_size = ioi_ws_size;
	end;
	mca_work_space_ptr = mcad.ioi_wks_ptr;

	if user_size < ioi_ws_size then do;
	     if idcw1_cmd ^= READ_TYPE then
						/* decrease then size of data_2 */
		data_size_2 = data_size_2 - (CHARS_PER_WORD * (ioi_ws_size - user_size));

	     else					/* must be a read type so decrease then size of data_1 */
		data_size_1 = CHARS_PER_WORD * (user_size - basic_size);
	end;
     end get_ws_size;
%page;
wait:
     proc;

/* the connect is on its way and the IO mode is sync so we will wait here */
	ev_info_ptr = addr (event_info_area);
	mca_area_ptr = addr (sk_mca_area);
	event_wait_channel.channel_id (1) = mcad.event_chn;
	call ipc_$block (addr (event_wait_channel), ev_info_ptr, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     return;
	end;

/* Now that something has happened the IO event will be processed, and it
   is known what MCA this should be for */

	call mca_util_$io_event_mca
	     (mcad_ptr, ev_info_ptr, mca_area_ptr, code);
     end wait;
%page;
%include event_wait_info;
%skip (3);
%include event_wait_channel;
%page;
%include mca_area;
%page;
%include mca_data;
%page;
%include mca_data_area;
     end mca_tandd_;
