/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-18,Fawcett), approve(86-03-18,MCR7374),
     audit(86-09-05,Lippard), install(86-09-16,MR12.0-1159):
     Created to control the MCA for online use. This is mainly used by online
     T&D.
  2) change(86-10-21,Fawcett), approve(86-10-21,PBF7374),
     audit(86-10-23,Farley), install(86-10-30,MR12.0-1203):
     Change entry mca_attach_$finish_detach to only set the mcad.state to
     MCA_FREE if the state is greater than MCA_FREE.
  3) change(87-03-31,Fawcett), approve(87-04-23,MCR7667),
     audit(87-04-23,Farley), install(87-04-26,MR12.1-1025):
     Changed to set the error code returned to 0 if the IPC attached is not
     in the Multics config deck.
                                                   END HISTORY COMMENTS */

/* format: style4 */
/* Created Nov 1984 by R. A. Fawcett */
/* Modified Oct 1985 by Paul Farley for multiple attachments per IPC and
   to check for the correct version in the mca_data_seg. */

mca_attach_:
     proc;
dcl  a_force bit (1);
dcl  a_name char (*);				/* name of the MCA to be attached */
dcl  a_ev_chn fixed bin (71);				/* event channel for the attachement */
dcl  a_ioi_idx fixed bin;				/* the ioi_index for this MCA */
dcl  a_code fixed bin (35);				/* is returned to indicate success */
dcl  a_ipc_id char (*);
dcl  a_ipc_operational bit (1);			/* used during ipc detachment */
dcl  a_ipc_num fixed bin;
dcl  a_mca_status bit (72) parm;
dcl  bc fixed bin (24);
dcl  channel_number fixed bin (17);
dcl  code fixed bin (35);
dcl  dev_name char (3);
dcl  dev_type char (32);
dcl  ev_chan fixed bin (71);

dcl  (dev_00_sw, fips_sw) bit (1);
dcl  (force_detach_entry, force_reset_entry) bit (1);
dcl  group_index fixed bin (17);
dcl  ioi_max_ws fixed bin (19);
dcl  ipc_id char (5) var;
dcl  ipc_index fixed bin;
dcl  ipc_num fixed bin (17);
dcl  ipc_operational bit (1);
dcl  loc_async bit (1);
dcl  loc_ev_chn fixed bin (71);
dcl  loc_ioi_idx fixed bin;
dcl  loc_rcp_id bit (36) aligned;
dcl  max_time fixed bin (71);
dcl  mca_index fixed bin (3);
dcl  multiple_prph_on_ipc bit (1);
dcl  name char (4);
dcl  need_to_del_evchn bit (1);
dcl  prph_index fixed bin;
dcl  rcp_msg char (132);
dcl  rcp_state fixed bin;
dcl  save_code fixed bin (35);
dcl  1 sk_dev_info like device_info;
dcl  1 sk_printer_info like printer_info;
dcl  status_from_reset bit (72);
dcl  user_level fixed bin;

dcl  p99 pic "99" based;

/* Entries */
dcl  admin_gate_$syserr entry options (variable);
dcl  config_$find entry (char (4) aligned, ptr);
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_group_id_ entry () returns (char (32));
dcl  get_ring_ entry () returns (fixed bin (3));
dcl  get_process_id_ entry () returns (bit (36));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioi_$set_channel_required
	entry (fixed bin, fixed bin (3), fixed bin (7), fixed bin (35));
dcl  ioi_$set_status entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  ioi_$timeout entry (fixed bin, fixed bin (71), fixed bin (35));
dcl  ioi_$release_devices entry (fixed bin, fixed bin (35));
dcl  ioi_$suspend_devices entry (fixed bin, fixed bin (35));
dcl  ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  mca_util_$reset entry (fixed bin, bit (72), fixed bin (35));
dcl  mca_util_$force_reset entry (fixed bin, bit (72), fixed bin (35));
dcl  mca_util_$mca_ptr entry (fixed bin, fixed bin (35)) returns (ptr);
dcl  mca_util_$force_mca_ptr entry (fixed bin, fixed bin (35)) returns (ptr);
dcl  rcp_$check_attach entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (71),
	fixed bin, fixed bin (35));
dcl  rcp_$detach entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
dcl  rcp_priv_$attach entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35));

/* Error codes */

dcl  error_table_$bad_channel fixed bin (35) ext static;
dcl  error_table_$io_not_configured fixed bin (35) ext static;
dcl  error_table_$name_not_found fixed bin (35) ext static;
dcl  error_table_$not_attached fixed bin (35) ext static;
dcl  error_table_$resource_not_free fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;

/* Constant */

dcl  FIFTEEN_SEC fixed bin (71) init (15000000) static options (constant);
dcl  MCA_CHAN fixed bin (7) init (3) static options (constant);
dcl  MCA_NAME (1:4) char (4) static options (constant)
	init ("mcaa", "mcab", "mcac", "mcad");
dcl  lower char (7) static options (constant)
	init ("abcdimp");
dcl  UPPER char (7) static options (constant)
	init ("ABCDIMP");

dcl  sys_info$page_size fixed bin (17) ext static;

dcl  (addr, clock, convert, fixed, hbound, lbound, null, rel, substr, translate, unspec) builtin;

dcl  cleanup condition;



%page;
mca_attach_$mca_attach:
     entry (a_name, a_ev_chn, a_ioi_idx, a_code);

/* This entry will attach a MCA. It is called via the mca_$attach_mca gate */

/* The MCA is attached via rcp_, it may be attached for sync_io or async_io
   depending on the value of a_ev_chn. After rcp_ has attached the MCA the
   configuration data stored in the MCA must be read into the mca_data_seg
   for this MCA. The sequence of events for sync_io and async_io must be done
   in the same order and attempt has been made to use the same procedures for
   both sync_io and async_io.

   1) check to see if MCA is CONFIGURED and FREE.

   2) attach via rcp

   3) setup mcad entry

   4) call mca_util_$reset,
   This step causes a reset status command,
   and then read config command to be issued.
   If the IO is async then the user must call via gates to invoke
   the process io routines.
   If sync IO then wait routine invokes the process io routines upon io
   completion.
   Most of the above actions are in mca_util.
*/

	force_reset_entry = "0"b;

	goto ATTACH_COMMON;

mca_attach_$force_reset_mca:
     entry (a_name, a_mca_status, a_code);

/* This entry will reset and mask a MCA. It is called via the
   mca_priv_$force_reset gate. */


	force_reset_entry = "1"b;

ATTACH_COMMON:

	code = 0;
	name = translate (a_name, lower, UPPER);
	if ^force_reset_entry then loc_ev_chn = a_ev_chn;
	else loc_ev_chn = 0;
	call cu_$level_get (user_level);
	need_to_del_evchn, force_detach_entry = "0"b;
	mcad_ptr = null ();

	on cleanup begin;
	     call clean_up_attach;
	     call set_back_level;
	end;

	call cu_$level_set (get_ring_ ());
	if mca_data_seg_ptr = null () then do;
	     call initiate_file_ (SYSTEM_DIR, DATA_SEG, "0"b,
		mca_data_seg_ptr, bc, code);
	     if mca_data_seg_ptr = null () then

/*           Trouble in River City            */

		goto ATTACH_ENDS;
	end;

	if mca_data_seg.version ^= MCA_data_version_1 then do; /* Bad News */
	     code = error_table_$unimplemented_version;
	     goto ATTACH_ENDS;
	end;

	do mca_index = lbound (MCA_NAME, 1) to hbound (MCA_NAME, 1) while (name ^= MCA_NAME (mca_index));
	end;
	if mca_index > hbound (MCA_NAME, 1) then do;
	     code = error_table_$name_not_found;
	     goto ATTACH_ENDS;
	end;

	mcad_ptr = addr (mca_data_seg.array (mca_index));

	if mcad.state ^= MCA_FREE then do;
	     if mcad.state = MCA_NOT_CONFIGURED then
		code = error_table_$io_not_configured;
	     else code = error_table_$resource_not_free;
	     goto ATTACH_ENDS;
	end;


	device_info_ptr = addr (sk_dev_info);
	device_info.version_num = DEVICE_INFO_VERSION_1;
	device_info.wait_time = 0;
	device_info.system_flag = "1"b;
	device_info.device_name = MCA_NAME (mca_index);
	device_info.model = 0;
	device_info.qualifiers (*) = 0;
	dev_type = DEVICE_TYPE (MCA_DTYPEX);

/* check to see if the user wants async_io, or no event channel passed. */
	if loc_ev_chn = 0 | loc_ev_chn = 1 then do;
	     loc_async = "0"b;

/* if not async_io then set up a ring1_ event channel */
	     call ipc_$create_ev_chn (ev_chan, code);
	     if code ^= 0 then do;
		call convert_ipc_code_ (code);
		goto ATTACH_ENDS;
	     end;
	     need_to_del_evchn = "1"b;
	end;
	else do;
	     loc_async = "1"b;
	     ev_chan = loc_ev_chn;
	end;

/* try to attach the MCA */

	loc_rcp_id = "0"b;
	call rcp_priv_$attach (dev_type, device_info_ptr, ev_chan, "",
	     loc_rcp_id, code);

	if code ^= 0 then goto ATTACH_ENDS;

	mcad.event_chn = ev_chan;
	mcad.async_io = loc_async;
	mcad.rcp_id = loc_rcp_id;

	call rcp_$check_attach (mcad.rcp_id, device_info_ptr, rcp_msg,
	     loc_ioi_idx, ioi_max_ws, max_time, rcp_state, code);
	if rcp_state ^= 0 then do;
	     if code = 0 then code = rcp_state;
	     goto ATTACH_ENDS;
	end;

/* Not really attached until reset & read config I/O is completed */

	mcad.state = MCA_ATTACHING;
	mcad.config_data_requested = "0"b;
	mcad.attach_time = clock ();
	mcad.attach_pid = get_process_id_ ();
	mcad.last_status = ""b;
	mcad.current_ws_size = 0;
	mcad.ioi_idx = loc_ioi_idx;
	mcad.max_time_out = max_time;
	mcad.max_ws_size = ioi_max_ws;

	call ioi_$set_channel_required
	     (mcad.ioi_idx, mca_index, MCA_CHAN, code);
	if code ^= 0 then goto ATTACH_ENDS;

	mcad.current_ws_size = sys_info$page_size;
	call ioi_$workspace (mcad.ioi_idx, mcad.ioi_wks_ptr,
	     (mcad.current_ws_size), code);
	if code ^= 0 then goto ATTACH_ENDS;

	mca_work_space_ptr = mcad.ioi_wks_ptr;

	mcad.status_offset = fixed (rel (addr (mca_work_space.status_area)), 17);
	call ioi_$set_status (mcad.ioi_idx, mcad.status_offset, 1, code);
	if code ^= 0 then goto ATTACH_ENDS;

	call ioi_$timeout (mcad.ioi_idx, FIFTEEN_SEC, code);
	if code ^= 0 then goto ATTACH_ENDS;
	if force_reset_entry then do;
	     call mca_util_$force_reset (mcad.ioi_idx, status_from_reset, code);
	     a_mca_status = status_from_reset;
	end;
	else do;
	     call mca_util_$reset (mcad.ioi_idx, status_from_reset, code);
	     if code ^= 0 then goto ATTACH_ENDS;
	     else a_ioi_idx = mcad.ioi_idx;
	end;

	goto MAIN_EXIT;

ATTACH_ENDS:
	call clean_up_attach;
	goto MAIN_EXIT;

/* end mca_attach */

mca_attach_$mca_detach:
     entry (a_ioi_idx, a_code);

/* This entry will detach the MCA. It will first check to see if any of
   the IPCs are attached if so it will detach them. This is called via
   the mca_$detach_mca gate. */

	loc_ioi_idx = a_ioi_idx;
	code = 0;
	force_detach_entry = "0"b;
	call cu_$level_get (user_level);

	on cleanup begin;
	     call set_back_level;
	end;

	call cu_$level_set (get_ring_ ());
	mcad_ptr = mca_util_$mca_ptr (loc_ioi_idx, code);
	if code ^= 0 then do;
	     if code ^= error_table_$not_attached then goto MAIN_EXIT;
	     if mcad_ptr = null () then goto MAIN_EXIT;
	     if mcad.state <= MCA_FREE then goto MAIN_EXIT;
	end;

	if mcad.state = MCA_FREE then do;
	     code = error_table_$not_attached;
	     goto MAIN_EXIT;
	end;

	call rcp_$detach (mcad.rcp_id, "0"b, 0, "", code);/* RCP will call mca_attach_$finish_detach */
	if code ^= 0 then goto MAIN_EXIT;
	goto MAIN_EXIT;

/* end mca_detach */

mca_attach_$ipc_attach:
     entry (a_ipc_id, a_ioi_idx, a_ipc_num, a_code);


/* This entry will attach an IPC. The MCA must be attached to the process.
   This is called via mca_$attach_mca gate. */

	loc_ioi_idx = a_ioi_idx;
	ipc_id = translate (a_ipc_id, lower, UPPER);
	call cu_$level_get (user_level);
	on cleanup begin;
	     call set_back_level;
	end;
	call cu_$level_set (get_ring_ ());
	call set_up_ipc;
	if code ^= 0 then goto MAIN_EXIT;
	force_detach_entry = "0"b;
	ipc_operational = "1"b;			/* in case we have to detach */
	ipcd.ipc_name = "ipc" || convert (p99, ipc_num);
	ipcd.prph_attachments = 0;
	unspec (ipcd.attach_data) = ""b;
	multiple_prph_on_ipc = "1"b;
	do prph_index = 1 to ipcd.nchan while (multiple_prph_on_ipc);
	     channel_number = ipcd.channel + prph_index - 1;
	     ipcd.attach_data (prph_index).attached_thru_rcp = "0"b;
	     ipcd.attach_data (prph_index).io_suspended = "0"b;
	     ipcd.attach_data (prph_index).prph_name = "";
	     call dev_info;
	     if code ^= 0 then do;

/* if the ipc channel is not known to Multics then it is OK to let the user
   think it is attached  */

		if code = error_table_$io_not_configured then do;
		     code = 0;
		     goto not_known_ok;
		end;
		goto ERROR_DT_IPC;
	     end;
	     call rcp_priv_$attach (dev_type, device_info_ptr, mcad.event_chn,
		"", ipcd.attach_data (prph_index).ipc_rcp_id, code);
	     if code ^= 0 then goto ERROR_DT_IPC;
	     ipcd.attach_data (prph_index).attached_thru_rcp = "1"b;
	     call rcp_$check_attach (ipcd.attach_data (prph_index).ipc_rcp_id, device_info_ptr, rcp_msg,
		ipcd.attach_data (prph_index).ipc_ioi_idx, ioi_max_ws, max_time, rcp_state, code);
	     if rcp_state ^= 0 then do;
		if code = 0 then code = rcp_state;
		goto ERROR_DT_IPC;
	     end;
	     call ioi_$set_channel_required
		(ipcd.attach_data (prph_index).ipc_ioi_idx, (mcad.imu_number), (channel_number), code);
	     if code ^= 0 then goto ERROR_DT_IPC;

	     if dev_type = "special" & dev_name ^= "fnp" then do;
		call ioi_$suspend_devices (ipcd.attach_data (prph_index).ipc_ioi_idx, code);
		if code ^= 0 then do;

ERROR_DT_IPC:
		     save_code = code;
		     call detach_this_ipc;
		     code = save_code;
		     goto MAIN_EXIT;
		end;
		ipcd.attach_data (prph_index).io_suspended = "1"b;
		call admin_gate_$syserr (LOG, "MCA: IO suspended on ^a (^a in IMU-^a) for ^a.",
		     ipcd.attach_data (prph_index).prph_name, ipcd.ipc_name,
		     translate (mcad.name, UPPER, lower), get_group_id_ ());
	     end;

not_known_ok:

	     ipcd.attach_data (prph_index).attach_time = clock ();
	     ipcd.prph_attachments = prph_index;
	end;
	ipcd.state = IPC_ATTACHED;
	a_ipc_num = ipc_num;
	goto MAIN_EXIT;

/* end ipc_attach */
%skip (4);
mca_attach_$ipc_detach:
     entry (a_ipc_id, a_ioi_idx, a_ipc_operational, a_code);

/* called via the mca_$detach_ipc gate to detach an ipc */
	force_detach_entry = "0"b;
	loc_ioi_idx = a_ioi_idx;
	ipc_id = translate (a_ipc_id, lower, UPPER);
	call cu_$level_get (user_level);
	on cleanup begin;
	     call set_back_level;
	end;
	call cu_$level_set (get_ring_ ());
	call set_up_ipc;
	if code ^= 0 then goto MAIN_EXIT;
	ipc_operational = a_ipc_operational;
	call detach_this_ipc;
	goto MAIN_EXIT;

/* end ipc_detach */



MAIN_EXIT:

/* Things seem ok */

	a_code = code;
	call cu_$level_set (user_level);
	return;
%skip (6);
mca_attach_$finish_detach:
     entry (a_ioi_idx, a_force, a_code);

/* This entry is called by rcp_detach_ to clear out the mca_data_seg, and
   is not a ring_1 gate target it is only callable in ring_1 */

	loc_ioi_idx = a_ioi_idx;
	force_detach_entry = a_force;
	ipc_operational = "1"b;			/* force the flag */
	mcad_ptr = mca_util_$force_mca_ptr (loc_ioi_idx, code);
	if mcad_ptr = null () then do;
	     a_code = code;
	     return;
	end;

/* Are there any IPC'S attached ?? */

check_ipc_attached:
	do ipc_index = lbound (mcad.ipcd_array, 1) to hbound (mcad.ipcd_array, 1);
	     ipcd_ptr = addr (mcad.ipcd_array (ipc_index));
	     if ipcd.state >= IPC_ATTACHED then do;

/* OK detach this IPC */
		call detach_this_ipc;
		if code ^= 0 & ^force_detach_entry then goto MAIN_EXIT;
	     end;
	end;
	if ^mcad.async_io then
						/* delete the ring_1 event channel */
	     call ipc_$delete_ev_chn (mcad.event_chn, code);
	unspec (mcad.flags) = "0"b;
	mcad.rcp_id = "0"b;
	if mcad.state > MCA_FREE then mcad.state = MCA_FREE;
	mcad.attach_pid = "0"b;
	if force_detach_entry then mcad.lock = "0"b;
	code = 0;
	return;
%page;
clean_up_attach:
     proc;
	save_code = code;
	if mca_data_seg_ptr = null () then return;	/* Never got started */
	if mcad_ptr = null () then return;		/* Never got MCA attached */
	if need_to_del_evchn then call ipc_$delete_ev_chn (ev_chan, code);
	if loc_rcp_id ^= "0"b then do;
	     mcad.state = MCA_FREE;
	     call rcp_$detach (loc_rcp_id, "0"b, 0, "", code);
						/* RCP will call mca_attach_$finish_detach */
	end;
	code = save_code;
     end clean_up_attach;
%page;
set_back_level:
     proc;
	call cu_$level_set (user_level);
     end set_back_level;

detach_this_ipc:
     proc;

/* This proc will detach the IPC as per the ipcd_ptr */

	do prph_index = hbound (ipcd.attach_data, 1) to lbound (ipcd.attach_data, 1) by -1;
	     if ipcd.attach_data (prph_index).attached_thru_rcp then do;
		if ipcd.attach_data (prph_index).io_suspended then do;
		     if ipc_operational then do;
			call ioi_$release_devices (ipcd.attach_data (prph_index).ipc_ioi_idx, code);
			if code ^= 0 then
			     call admin_gate_$syserr (ANNOUNCE, "MCA: IO not released on ^a (^a in IMU-^a), ^a.",
				ipcd.attach_data (prph_index).prph_name, ipcd.ipc_name,
				translate (mcad.name, UPPER, lower), get_group_id_ ());
			else do;
			     ipcd.attach_data (prph_index).io_suspended = "0"b;
			     call admin_gate_$syserr (LOG, "MCA: IO released on ^a (^a in IMU-^a), ^a.",
				ipcd.attach_data (prph_index).prph_name, ipcd.ipc_name,
				translate (mcad.name, UPPER, lower), get_group_id_ ());
			end;
		     end;
		     else call admin_gate_$syserr (LOG, "MCA: IO not released on ^a (^a in IMU-^a), ^a.",
			     ipcd.attach_data (prph_index).prph_name, ipcd.ipc_name,
			     translate (mcad.name, UPPER, lower), get_group_id_ ());
		end;
		call rcp_$detach (ipcd.attach_data (prph_index).ipc_rcp_id, "0"b, 0, "", code);
		ipcd.attach_data (prph_index).attached_thru_rcp = "0"b;
		ipcd.attach_data (prph_index).ipc_ioi_idx = 0;
	     end;
	end;
	ipcd.prph_attachments = 0;
	ipcd.state = IPC_FREE;
     end detach_this_ipc;
%page;
dev_info:
     proc;

/* This entry will build the dev info structure for the PRPH */

	dev_00_sw, fips_sw = "0"b;
	if ipcd.type_index = PSIA_2_TRIP |
	     ipcd.type_index = PSIA_4_TRIP then do;
	     dev_00_sw = "1"b;
	end;
	else if ipcd.type_index = IPC_TAPE_FIPS |
	     ipcd.type_index = IPC_DISK_FIPS then do;
	     fips_sw = "1"b;
	end;
	chnl_cardp, prph_cardp = null ();
	call config_$find (PRPH_CARD_WORD, prph_cardp);
	do while (prph_cardp ^= null ());
	     if prph_card.iom = mcad.imu_number then do;
		if prph_card.chan = channel_number then do;
		     dev_name = substr (prph_card.name, 1, 3);
		     ipcd.attach_data (prph_index).prph_name = prph_card.name;
		     goto found_dev;
		end;
	     end;
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
	end;
	call config_$find (CHNL_CARD_WORD, chnl_cardp);
	do while (chnl_cardp ^= null ());
	     do group_index = lbound (chnl_card.group, 1) to hbound (chnl_card.group, 1) while
		(chnl_card.group (group_index).iom ^= -1);
		if chnl_card.group (group_index).iom = mcad.imu_number then do;
		     if chnl_card.group (group_index).chan = channel_number then do;
			dev_name = substr (chnl_card.name, 1, 3);
			ipcd.attach_data (prph_index).prph_name = chnl_card.name;
			prph_cardp = chnl_cardp;
			goto found_dev;
		     end;
		end;
	     end;
	     call config_$find (CHNL_CARD_WORD, chnl_cardp);
	end;
	dev_name = "";
	code = error_table_$io_not_configured;
	return;
found_dev:
	if dev_name = "prt" then do;
	     dev_type = "printer";
	     printer_info_ptr = addr (sk_printer_info);
	     printer_info.version_num = PRINTER_INFO_VERSION_1;
	     printer_info.wait_time = 0;
	     printer_info.system_flag = "1"b;
	     printer_info.device_name = prph_card.name;
	     printer_info.print_train = 0;
	     printer_info.line_length = -1;
	     printer_info.model = 0;
	     device_info_ptr = printer_info_ptr;
	     multiple_prph_on_ipc = "1"b;
	     return;
	end;
	multiple_prph_on_ipc = "0"b;			/* normally only one device per IPC */
	device_info_ptr = addr (sk_dev_info);
	device_info.version_num = DEVICE_INFO_VERSION_1;
	device_info.wait_time = 0;
	device_info.system_flag = "1"b;
	device_info.model = 0;
	device_info.qualifiers (*) = 0;
	if dev_name = "rdr" then do;
	     dev_type = "reader";
	     device_info.device_name = prph_card.name;
	     multiple_prph_on_ipc = "1"b;
	end;
	else if dev_name = "pun" then do;
	     dev_type = "punch";
	     device_info.device_name = prph_card.name;
	     multiple_prph_on_ipc = "1"b;
	end;
	else if dev_name = "opc" then do;
	     dev_type = "console";
	     device_info.device_name = prph_card.name;
	end;
	else do;
	     dev_type = "special";
	     if dev_00_sw then
		device_info.device_name = prph_card.name || "_00";
	     else device_info.device_name = prph_card.name;
	end;
     end dev_info;
%page;
set_up_ipc:
     proc;
dcl  chan_number fixed bin;

	code = 0;
	mcad_ptr = mca_util_$mca_ptr (loc_ioi_idx, code);
	if code ^= 0 then goto MAIN_EXIT;
	if mcad.state < MCA_ATTACHED then do;
	     code = error_table_$not_attached;
	     return;
	end;

	if substr (ipc_id, 1, 3) = "ipc" then do;
	     ipc_num = cv_dec_check_ (substr (ipc_id, 4), code);
	     if code ^= 0 then do;
		code = error_table_$bad_channel;
		return;
	     end;
	     if ipc_num < lbound (mcad.ipcd_array, 1) | ipc_num > hbound (mcad.ipcd_array, 1) then do;
		code = error_table_$bad_channel;
		return;
	     end;
	     ipcd_ptr = addr (mcad.ipcd_array (ipc_num));
	     goto ipc_found;
	end;
	else do;
	     if substr (ipc_id, 1, 1) ^= mcad.name then do;
		code = error_table_$bad_channel;
		return;
	     end;
	     chan_number = cv_dec_check_ (substr (ipc_id, 2, 2), code);
	     if code ^= 0 then do;
		code = error_table_$bad_channel;
		return;
	     end;
	     do ipc_index = lbound (mcad.ipcd_array, 1) to hbound (mcad.ipcd_array, 1);
		ipcd_ptr = addr (mcad.ipcd_array (ipc_index));
		if ipcd.state > IPC_NOT_CONFIGURED then do;
		     if (ipcd.channel <= chan_number) &
			(chan_number < (ipcd.channel + ipcd.nchan)) then do;
			ipc_num = ipc_index;
			goto ipc_found;
		     end;
		end;
	     end;
	     code = error_table_$io_not_configured;
	     return;
	end;
ipc_found:
	return;
     end set_up_ipc;

%page;
%include config_chnl_card;
%page;
%include config_prph_card;
%page;
%include mca_constants;
%page;
%include mca_data;
%page;
%include mca_data_area;
%page;
%include rcp_device_info;
%page;
%include rcp_printer_info;
%page;
%include rcp_resource_types;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   MCA: IO suspended on DEVICE (ipcNN in IMU-X) for PERSON.PROJ.T.

   S:	$log

   T:	$run

   M:	This message is stating that the normal flow of I/O for
   this device is being suspended. This allows the user to stop
   or alter/reload an IPC without affecting the system.

   A:	$ignore

   Message:
   MCA: IO released on DEVICE (ipcNN in IMU-X), PERSON.PROJ.T.

   S:	$log

   T:	$run

   M:	This message is stating that the normal flow of I/O for
   this device is being resumed.

   A:	$ignore

   Message:
   MCA: IO not released on DEVICE (ipcNN in IMU-X), PERSON.PROJ.T.

   S:	$warn

   T:	$run

   M:	The user is detaching the IPC, but does not want the IO to be
   resumed.

   A:	This is normally because the IPC is defective or no longer capable
   of handling normal I/O.

   END MESSAGE DOCUMENTATION */

     end mca_attach_;
