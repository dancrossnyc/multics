/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-03-18,Fawcett), approve(86-03-18,MCR7374),
     audit(86-09-05,Lippard), install(86-09-16,MR12.0-1159):
     Created to control the MCA for online use. This is mainly used by online
     T&D.
  2) change(86-09-23,Fawcett), approve(86-09-23,PBF7374),
     audit(86-10-23,Farley), install(86-10-30,MR12.0-1203):
     Changed to check the mcad_ptr for null after a call to idx_to_ptr
     instead of the code being non-zero.
                                                   END HISTORY COMMENTS */

/* format: style4 */
/* Created Nov 1984 by R. A. Fawcett */
mca_util_:
     proc;
	return;

dcl  a_code fixed bin (35);
dcl  a_dsk_num fixed bin;
dcl  a_ev_info_ptr ptr;
dcl  a_ioi_idx fixed bin;
dcl  a_ipc_num fixed bin;
dcl  a_mca_area_ptr ptr;
dcl  a_mca_status bit (72);
dcl  a_mcad_ptr ptr;
dcl  a_on bit (1);
dcl  a_options bit (3);
dcl  a_ret_len fixed bin (21);
dcl  a_ret_size fixed bin (21);
dcl  a_trace_state char (40);
dcl  a_read_type char (*);
dcl  a_user_ptr ptr;
dcl  bc fixed bin (24);
dcl  code fixed bin (35);
dcl  dsk_num fixed bin;
dcl  1 event_info based (ev_info_ptr),			/* Structure returned by ipc */
       2 channel_id fixed bin (71),
       2 message fixed bin (71),
       2 sender bit (36),
       2 origin,
         3 dev_signal bit (18) unaligned,
         3 ring bit (18) unaligned,
       2 channel_index fixed bin;

dcl  ev_info_ptr ptr;
dcl  1 event_info_area like event_info;

dcl  1 event_list,					/* A list of ipc events */
       2 ev_count fixed bin,
       2 ev_chan fixed bin (71);


dcl  1 pcw_auto aligned,
       2 pcwa bit (36),
       2 pcwb bit (36);

dcl  expected_chars fixed bin (21);
dcl  file_ptr ptr;
dcl  force_entry bit (1);
dcl  foo_len fixed bin (21);
dcl  index_of_chan fixed bin;
dcl  ioi_ws_size fixed bin (18);
dcl  io_event_entry bit (1);
dcl  ipc_num fixed bin;
dcl  ipc_pic pic "99";
dcl  loc_ioi_idx fixed bin;
dcl  mca_command char (80);
dcl  mca_index fixed bin;
dcl  read_type char (80);
dcl  ret_len_bits bit (16);
dcl  ret_data char (ret_data_len) based;
dcl  ret_data_len fixed bin (21);
dcl  1 sk_mca_area like mca_area;
dcl  tally_num fixed bin;
dcl  trace_on bit (1);
dcl  trace_types bit (3);
dcl  trace_what char (20);
dcl  user_level fixed bin;

/* Entries */
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  convert_ipc_code_ entry options (variable);
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_ring_ entry () returns (fixed bin (3));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  ioi_$connect entry (fixed bin, fixed bin (18), fixed bin (35));
dcl  ioi_$connect_pcw entry (fixed bin, fixed bin, bit (36) aligned, fixed bin (35));
dcl  ioi_$timeout entry (fixed bin, fixed bin (71), fixed bin (35));
dcl  ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35));
dcl  rcp_$detach entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));


/* Builtin  */

dcl  (addr, addrel, bin, divide, fixed, hbound, lbound, length, min, mod,
     null, rel, rtrim, search, size, substr, unspec) builtin;

dcl  cleanup condition;


/* ERROR TABLE */

dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$area_too_small fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$not_attached fixed bin (35) ext static;
dcl  error_table_$timeout fixed bin (35) ext static;

/* Constants */

dcl  CHARS_PER_WORD fixed bin (17) init (4) static options (constant);
dcl  COMPLETE bit (6) unal init ("02"b3) static options (constant);
dcl  CONT_MARKER bit (2) init ("11"b) static options (constant);
dcl  CONT_NO_MARKER bit (2) init ("10"b) static options (constant);
dcl  IDCW_ID bit (3) init ("7"b3) static options (constant);
dcl  IOTD bit (2) init ("00"b) static options (constant);
dcl  MAX_TALLY fixed bin (17) init (4096) static options (constant);
dcl  NOT_COMPLETE bit (6) unal init ("40"b3) static options (constant);
dcl  ONE_K fixed bin (17) init (1024) static options (constant);
dcl  READ_TYPE bit (6) init ("03"b3) static options (constant);
dcl  READY bit (4) unal init ("0"b) static options (constant);
dcl  RESET_STATUS bit (6) init ("40"b3) static options (constant);
dcl  STATUS_MASK bit (72) init ("370000770000000000000000"b3) static options (constant);
dcl  TEXT_TYPE bit (6) init ("13"b3) static options (constant);
dcl  TRACE_FAULT bit (3) init ("4"b3) static options (constant);
dcl  TRACE_BOOT bit (3) init ("2"b3) static options (constant);
dcl  TRACE_DEBUG bit (3) init ("1"b3) static options (constant);

mca_util_$display:
     entry (a_user_ptr, a_ret_size, a_ret_len, a_code);

/* This entry returns the contents of the mca_data_seg, and is called via
   the mca_$display gate. */

	code = 0;
	file_ptr = a_user_ptr;
	mcad_ptr = null ();
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	if mca_data_seg_ptr = null () then do;
	     call initiate_file_ (SYSTEM_DIR, DATA_SEG, "0"b,
		mca_data_seg_ptr, bc, code);
	     if mca_data_seg_ptr = null () then do;
		a_ret_len = 0;
		goto NORMAL_EXIT;
	     end;
	end;
	ret_data_len = a_ret_size;
	if ret_data_len > size (mca_data_seg) * CHARS_PER_WORD then ret_data_len = size (mca_data_seg) * CHARS_PER_WORD;
	file_ptr -> ret_data = mca_data_seg_ptr -> ret_data;
	a_ret_len = ret_data_len;
	goto NORMAL_EXIT;


mca_util_$io_event:
     entry (a_ioi_idx, a_ev_info_ptr, a_mca_area_ptr, a_code);

/* This entry is called via the mca_$process_io_event gate when the
   user has attached the MCA indicating the async_io mode */

	loc_ioi_idx = a_ioi_idx;
	ev_info_ptr = a_ev_info_ptr;
	mca_area_ptr = a_mca_area_ptr;
	io_event_entry = "1"b;
	force_entry = "0"b;
	code = 0;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());

	call idx_to_ptr;
	if (mcad_ptr = null ()) then do;
	     unspec (a_mca_area_ptr -> mca_area) = ""b;
	     goto ERROR_EXIT;
	end;
          code = 0;
	call common_io_event;
	if code ^= 0 then goto ERROR_EXIT;
	goto NORMAL_EXIT;

%skip (4);
mca_util_$load_ipc:
     entry (a_ioi_idx, a_ipc_num, a_mca_status, a_code);

/* Request the MCA to load the FW of the selected ipc  */

	code = 0;
	loc_ioi_idx = a_ioi_idx;
	ipc_num = a_ipc_num;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	if ipc_num < lbound (mcad.ipcd_array, 1) | ipc_num > hbound (mcad.ipcd_array, 1) then do;
	     code = error_table_$bad_arg;
	     a_mca_status = ""b;
	     goto ERROR_EXIT;
	end;
	ipc_pic = ipc_num;
	mca_command = "LOAD IPC " || ipc_pic;
	goto load_reset_common;
%skip (4);
mca_util_$reset_ipc:
     entry (a_ioi_idx, a_ipc_num, a_mca_status, a_code);

/* This entry will reset the selected ipc (a_ipc_num) it is called via the
   mca_ gate */

	code = 0;
	loc_ioi_idx = a_ioi_idx;
	ipc_num = a_ipc_num;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	if ipc_num < lbound (mcad.ipcd_array, 1) | ipc_num > hbound (mcad.ipcd_array, 1) then do;
	     code = error_table_$bad_arg;
	     a_mca_status = "0"b;
	     goto ERROR_EXIT;
	end;
	ipc_pic = ipc_num;
	mca_command = "RESET IPC " || ipc_pic;
	goto load_reset_common;
%skip (4);
load_reset_common:

/* The load and reset a requested IPC entries come here after setting
   the acsii MCA command in mca_command */

	io_event_entry = "0"b;
	force_entry = "0"b;
	call idx_to_ptr;
	if mcad_ptr = null () then goto ERROR_EXIT;
	ipcd_ptr = addr (mcad.ipcd_array (ipc_num));
	if ipcd.state < IPC_ATTACHED then do;
	     code = error_table_$not_attached;
	     goto ERROR_EXIT;
	end;
	expected_chars = CHARS_PER_WORD;
	call set_ws_connect;
	if code ^= 0 then goto ERROR_EXIT;
	mcad.entry_to_return_data = mca_util_$ret_load_reset_ipc;
	if ^mcad.async_io then do;
	     call wait;
	     a_mca_status = mca_area.mca_status;
	     if code ^= 0 then goto ERROR_EXIT;
	end;
	else a_mca_status = "0"b;
	goto NORMAL_EXIT;

/* end load_ipc reset_ipc */
%skip (4);
mca_util_$load_all_ipcs:
     entry (a_ioi_idx, a_mca_status, a_code);

/* Entry called via mca_priv_ gate to request the MCA to load FW
   in all the IPCs */

	mca_command = "LOAD IPCS";
	goto common_all_ipcs;
%skip (4);
mca_util_$reset_all_ipcs:
     entry (a_ioi_idx, a_mca_status, a_code);

/* Entry called via mca_priv_ gate to request the MCA to reset all the IPCs */

	mca_command = "RESET IPCS";
	goto common_all_ipcs;

common_all_ipcs:

/* load and reset "all ipcs" entries come here after setting the
   ascii MCA command in mca_command */

	loc_ioi_idx = a_ioi_idx;
	code = 0;
	io_event_entry = "0"b;
	force_entry = "0"b;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	call idx_to_ptr;
	if mcad_ptr = null () then goto ERROR_EXIT;

/* Make sure the user has requested and mca_attach_ has granted the attach
   of all the IPCs */

	do ipc_num = lbound (mcad.ipcd_array, 1) to hbound (mcad.ipcd_array, 1);
	     if mcad.ipcd_array (ipc_num).state < IPC_ATTACHED then do;
						/* NO CAN DO */
		code = error_table_$not_attached;
		goto ERROR_EXIT;
	     end;
	end;
	call set_ws_connect;
	if code ^= 0 then goto ERROR_EXIT;
	mcad.entry_to_return_data = mca_util_$ret_load_reset_ipc;
	if ^mcad.async_io then do;
	     call wait;
	     a_mca_status = mca_area.mca_status;
	     if code ^= 0 then goto ERROR_EXIT;
	end;
	goto NORMAL_EXIT;
%skip (4);
mca_util_$diskette_read:
     entry (a_ioi_idx, a_read_type, a_dsk_num, a_user_ptr, a_ret_size,
	a_ret_len, a_mca_status, a_code);

/* This entry is to read one of the MCA diskettes it is called via the
   mca_$diskette_read gate  */

	loc_ioi_idx = a_ioi_idx;
	io_event_entry = "0"b;
	force_entry = "0"b;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	call idx_to_ptr;
	if mcad_ptr = null () then goto ERROR_EXIT;
	dsk_num = a_dsk_num;
	read_type = a_read_type;

	if read_type = "DIRECTORY" then goto format_with_num;
	else if read_type = "HDR" then goto format_with_num;
	else if substr (read_type, 1, 2) = "P=" then goto format_with_num;
	else if search (read_type, "/") ^= 0 then do;
	     call ioa_$rsnnl ("READ^x^a", mca_command, foo_len,
		rtrim (read_type));
	     goto have_format;
	end;
	else do;
	     code = error_table_$bad_arg;
	     goto ERROR_EXIT;
	end;
format_with_num:
	if dsk_num < 0 | dsk_num > 1 then do;
	     code = error_table_$bad_arg;
	     goto ERROR_EXIT;
	end;
	call ioa_$rsnnl ("READ^x^a,^d", mca_command,
	     foo_len, rtrim (read_type), dsk_num);
have_format:
	expected_chars = min (16128, a_ret_size);
	goto common_read;
%skip (4);
mca_util_$read_config:
     entry (a_ioi_idx, a_user_ptr, a_ret_size,
	a_ret_len, a_mca_status, a_code);

/* This entry is called via the mca_$config gate to read the MCA configuration file */
	loc_ioi_idx = a_ioi_idx;
	a_mca_status = "0"b;
	io_event_entry = "0"b;
	force_entry = "0"b;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	call idx_to_ptr;
	if mcad_ptr = null () then goto ERROR_EXIT;
	expected_chars = (size (mca_config_file) * CHARS_PER_WORD);
	if a_ret_size < expected_chars then do;
	     code = error_table_$area_too_small;
	     goto ERROR_EXIT;
	end;
	mca_command = "READ CONFIG";
	goto common_read;

%skip (4);
mca_util_$read_data:
     entry (a_ioi_idx, a_user_ptr, a_ret_size,
	a_ret_len, a_mca_status, a_code);

/* This entry is to read data from the MCA called via mca_$read_data gate */

	loc_ioi_idx = a_ioi_idx;
	io_event_entry = "0"b;
	force_entry = "0"b;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	call idx_to_ptr;
	if mcad_ptr = null () then goto ERROR_EXIT;

	expected_chars = min (16128, a_ret_size);
	mca_command = "";				/* This will indicate that there is no ascii */
						/* command to the MCA */
common_read:

/* diskette_read, read_config and read_data come here after setting the ascii
   MCA command in mca_command */

	call set_ws_connect;
	if code ^= 0 then do;
	     a_mca_status = ""b;
	     a_ret_len = 0;
	     goto ERROR_EXIT;
	end;
	mcad.user_ptr = a_user_ptr;
	mcad.return_data_ptr = file_ptr;
	mcad.entry_to_return_data = mca_util_$return_data;
	if ^mcad.async_io then do;
	     call wait;
	     a_mca_status = mca_area.mca_status;
	     a_ret_len = mca_area.ret_len;
	     if code ^= 0 then goto ERROR_EXIT;
	end;
	else do;
	     a_mca_status = "0"b;
	     a_ret_len = 0;
	end;
	goto NORMAL_EXIT;


/* end read_config, read_data, and diskette_read */

mca_util_$trace_sw:
     entry (a_ioi_idx, a_options, a_on, a_trace_state, a_mca_status, a_code);

/* Entry called via mca_priv_ gate to change the tracing */

	loc_ioi_idx = a_ioi_idx;
	trace_types = a_options;
	io_event_entry = "0"b;
	call cu_$level_get (user_level);
	on cleanup begin;
	     call cu_$level_set (user_level);
	end;
	call cu_$level_set (get_ring_ ());
	code = 0;
	trace_what = " ";
	trace_on = a_on;
	if trace_types = "0"b then do;
	     a_mca_status = "0"b;
	     code = error_table_$bad_arg;
	     goto ERROR_EXIT;
	end;
	force_entry = "0"b;
	call idx_to_ptr;
	if mcad_ptr = null () then do;
	     a_mca_status = "0"b;
	     goto ERROR_EXIT;
	end;
	call ioa_$rsnnl
	     ("TRACE^x^[ON^;OFF^]^[^xFAULT^]^[^xBOOT^]^[^xDEBUG^]",
	     mca_command, foo_len, trace_on,
	     (trace_types & TRACE_FAULT),
	     (trace_types & TRACE_BOOT),
	     (trace_types & TRACE_DEBUG));
	expected_chars = 32;
	call set_ws_connect;
	if code ^= 0 then do;
	     a_mca_status = "0"b;
	     goto ERROR_EXIT;
	end;
	mcad.user_ptr = addr (a_trace_state);
	mcad.return_data_ptr = addr (mca_work_space.data_2);
	mcad.entry_to_return_data = mca_util_$ret_trace_state;
	if ^mcad.async_io then do;
	     call wait;
	     a_mca_status = mca_area.mca_status;
	     if code ^= 0 then goto ERROR_EXIT;
	end;
	goto NORMAL_EXIT;
%skip (4);
mca_util_$reset:
     entry (a_ioi_idx, a_mca_status, a_code);

/* This entry is called via mca_$reset gate, and in ring_1 by mca_attach_
   to reset the mca and read the config data from the MCA. */

	loc_ioi_idx = a_ioi_idx;
	code = 0;
	io_event_entry = "1"b;
	force_entry = "0"b;
	call cu_$level_get (user_level);

	on cleanup begin;
	     call cu_$level_set (user_level);
	end;

	call cu_$level_set (get_ring_ ());

	call idx_to_ptr;

	if mcad_ptr = null () then do;
	     a_mca_status = "0"b;
	     goto ERROR_EXIT;
	end;
	call reset_status;
	mcad.entry_to_return_data = mca_util_$no_data;
	if mcad.async_io then do;
	     a_mca_status = "0"b;
	     goto NORMAL_EXIT;
	end;

	call wait;
	a_mca_status = mca_area.mca_status;
	if code ^= 0 & mcad.state ^= MCA_ATTACHING then goto ERROR_EXIT;
	if mcad.state = MCA_ATTACHING & ^mcad.config_data_requested then do;
	     call mca_util_$attach_config (mcad_ptr, code);
	     if code ^= 0 then do;
		goto ERROR_EXIT;
	     end;
	     mcad.config_data_requested = "1"b;
	end;
	goto NORMAL_EXIT;

%skip (4);

NORMAL_EXIT:

/* All seems to be well */

	a_code = code;
	call cu_$level_set (user_level);
	return;
%skip (4);
ERROR_EXIT:

/* Something is wrong */

	a_code = code;
	if mcad_ptr ^= null () then
	     if mcad.state = MCA_ATTACHING then do;
		if mcad.rcp_id ^= "0"b then do;
		     call rcp_$detach (mcad.rcp_id, "0"b, 0, "", code);
		end;
	     end;
	     else ;
	call cu_$level_set (user_level);
	return;
%page;

/* Start non-gate entries */

mca_util_$force_mca_ptr:
     entry (a_ioi_idx, a_code) returns (ptr);
	force_entry = "1"b;
	goto mca_ptr_common;

mca_util_$mca_ptr:
     entry (a_ioi_idx, a_code) returns (ptr);

/* This entry will return a pointer to the mca_data for the MCA
   indicated by a_ioi_idx. If the ioi_idx is not found or the MCA is not
   attached to this process, the pointer will be null and an error code
   of error_table_$not_attached will be returned.  */

	force_entry = "0"b;
mca_ptr_common:

	loc_ioi_idx = a_ioi_idx;
	mcad_ptr = null ();
	code = 0;
	io_event_entry = "0"b;
	call idx_to_ptr;
	a_code = code;
	return (mcad_ptr);

/* end mca_ptr entry */
%skip (4);
mca_util_$attach_config:
     entry (a_mcad_ptr, a_code);

/* called by ring1 mca_attach after the rcp attachment to issue the connect to
   read in the config data from the MCA. Some parts of the config data are
   placed into the mca_data_seg for this MCA entry on completion of the IO.
   This is done by mca_util_$fill_config_data */

	mca_command = "READ CONFIG";
	expected_chars = (size (mca_config_file) * CHARS_PER_WORD);
	mcad_ptr = a_mcad_ptr;
	call set_ws_connect;
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;
	mcad.return_data_ptr = file_ptr;
	mcad.user_ptr = null ();
	mcad.entry_to_return_data = mca_util_$fill_config_data;
	if ^mcad.async_io then do;
sync_io_loop:
	     call wait;
	     if code ^= 0 then do;
		a_code = code;
		return;
	     end;
	     statp = addr (mca_area.mca_status);
	     if status.sub ^= "02"b3 then do;
		mca_command = "";
		expected_chars = MAX_TALLY;
		call set_ws_connect;
		if code ^= 0 then return;
		mcad.return_data_ptr = file_ptr;
		mcad.entry_to_return_data = mca_util_$no_data;
		goto sync_io_loop;
	     end;
	     else do;
		call ioi_$timeout (mcad.ioi_idx, mcad.max_time_out, code);
		if code ^= 0 then do;
		     a_code = code;
		     return;
		end;
		mcad.state = MCA_ATTACHED;
	     end;
	end;
	a_code = code;
	return;
%skip (4);
mca_util_$connect: entry (a_mcad_ptr, a_code);

/* This entry will always assume that the dcw_list starts at the base
   of the work space. It can only be called by ring1_ procs */

	mcad_ptr = a_mcad_ptr;
	code = 0;
	call do_connect;
	a_code = code;
	return;

/* end connect entry */
%skip (4);
mca_util_$force_reset:
     entry (a_ioi_idx, a_mca_status, a_code);

/* This is only called in ring_1 */

	loc_ioi_idx = a_ioi_idx;
	force_entry = "1"b;
	code = 0;
	call idx_to_ptr;
	if mcad_ptr = null () then do;
	     a_code = code;
	     a_mca_status = "0"b;
	     return;
	end;
	pcw_auto = "0"b;
	pcwp = addr (pcw_auto);
	pcw.code = IDCW_ID;
	pcw.mask = "1"b;
	pcw.control = CONT_MARKER;
	mca_work_space_ptr = mcad.ioi_wks_ptr;
	idcwp = addr (mca_work_space.list_of_dcw);
	unspec (idcw) = "0"b;
	idcw.code = IDCW_ID;
	call ioi_$connect_pcw (mcad.ioi_idx, 0, pcw_auto.pcwa, code);
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;
	mcad.entry_to_return_data = mca_util_$no_data;
	if mcad.async_io then do;
	     a_mca_status = "0"b;
	     a_code = code;
	     return;
	end;
	call wait;
	a_mca_status = mca_area.mca_status;
	if imess.time_out then code = 0;		/* This is what is expected */
	a_code = code;
	return;
%skip (4);
mca_util_$io_event_mca:
     entry (a_mcad_ptr, a_ev_info_ptr, a_mca_area_ptr, a_code);

/* This entry is called by ring1 mca_ modules when in sync_io mode after the
   IO event has happened */

	mcad_ptr = a_mcad_ptr;
	ev_info_ptr = a_ev_info_ptr;
	mca_area_ptr = a_mca_area_ptr;
	code = 0;
	call common_io_event;
	a_code = code;
	return;
%page;

/* The next entries are used to return the data back to the user at the
   completion of the IO. These are called by the io_event entries.

   The call is:
   call mcad.entry_to_return_data (mcad_ptr,ret_len,code);

   the entry var, mcad.entry_to_return_data is set by the code that requests
   the IO be started. The same code will set the mcad.user_ptr, if the
   user changes his mind it is too bad for him. The mcad.io_param_blk_ptr
   is set before the connect is requested. This is a pointer to the io_param
   filled in by the MCA for the data it returns.

   It is done this way for ASYNC_IO and SYNC_IO to keep
   the code simple (???). The load and reset commands do not return data,
   however due to the constant way the MCA manager should work an entry is
   here. */

mca_util_$ret_load_reset_ipc:
mca_util_$no_data:

     entry (a_mcad_ptr, a_ret_len, a_code);

/* There is no data returned	so don't return any but say so */

	a_code = 0;
	a_ret_len = 0;
	return;

/* end ret_load_ipc */
%skip (4);
mca_util_$ret_trace_state:
     entry (a_mcad_ptr, a_ret_len, a_code);

/* This entry returns the ascii data from the MCA data called form ring_1 */

	mcad_ptr = a_mcad_ptr;
	io_param_blk_ptr = mcad.io_param_ptr;
	ret_len_bits = (io_parameter_block.source_len_msb || io_parameter_block.source_len_lsb);

/* if the data returned by MCA is greater that the area for the user (40)
   then only return the first 40 chars (the length of a_trace_state) */

	ret_data_len = min (fixed (ret_len_bits, 21), length (a_trace_state));
	mcad.user_ptr -> ret_data = mcad.return_data_ptr -> ret_data;
	a_ret_len = ret_data_len;
	a_code = 0;
	return;
%skip (4);
mca_util_$return_data:
     entry (a_mcad_ptr, a_ret_len, a_code);

/* this is called by io_events to return data from read configuration and
   read diskette entries. This is called only from ring_1 */
	code = 0;
	mcad_ptr = a_mcad_ptr;
	mca_work_space_ptr = mcad.ioi_wks_ptr;
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	idcwp = addr (mca_dcw_list.idcw1);
	if idcw.control = READ_TYPE			/* read data */
	then dcwp = addr (mca_dcw_list.dcw1);		/* use first dcw */
	else dcwp = addr (mca_dcw_list.dcw2);		/* read conf/diskette, use second */
	io_param_blk_ptr = mcad.io_param_ptr;

/* calculate the data size returned by the MCA */

	ret_len_bits = (io_parameter_block.source_len_msb || io_parameter_block.source_len_lsb);
	ret_data_len = fixed (ret_len_bits, 21);

/* calculate the amount of data requested from the MCA */

	tally_num = bin (dcw.tally, 17);
	if tally_num = 0 then tally_num = MAX_TALLY;
	tally_num = (tally_num - size (data_header)) * CHARS_PER_WORD;
	ret_data_len = min (ret_data_len, tally_num);	/* use smallest value */

	mcad.user_ptr -> ret_data = mcad.return_data_ptr -> ret_data;
	a_ret_len = ret_data_len;
	a_code = code;
	return;
%skip (4);
mca_util_$fill_config_data:
     entry (a_mcad_ptr, a_ret_len, a_code);

/* this will fill in the config data of the mcad from the mca config file .
   It will change the state for this MCA from ATTACHING to ATTACHED. It is only callable in ring_1 */

	mcad_ptr = a_mcad_ptr;
	mca_config_file_ptr = mcad.return_data_ptr;
	do index_of_chan = lbound (mca_config_file.channel_data, 1) to hbound (mca_config_file.channel_data, 1);
	     ipcd_ptr = addr (mcad.ipcd_array (index_of_chan));
	     unspec (ipcd) = "0"b;
	     ipcd.channel =
		mca_config_file.channel_data (index_of_chan).prim_ch_num;
	     ipcd.nchan =
		mca_config_file.channel_data (index_of_chan).num_of_log_ch;
	     ipcd.no_level_2_info =
		mca_config_file.channel_data (index_of_chan).no_lev_2;
	     ipcd.is_micro_cont =
		mca_config_file.channel_data (index_of_chan).micro_ctl;
	     ipcd.fbus_disable_latch =
		mca_config_file.channel_data (index_of_chan).fbus_latch;
	     ipcd.type_index =
		mca_config_file.channel_data (index_of_chan).lvl_1_id_type;
	     ipcd.level_1_state =
		mca_config_file.channel_data (index_of_chan).lvl_1_state;
	     if ipcd.level_1_state <=
		PH_NOT_PRESENT then ipcd.state = IPC_NOT_CONFIGURED;
	     else ipcd.state = IPC_FREE;
	end;
	a_code = 0;
	return;
%page;

/* Start of internal procedures */
common_io_event: proc;

/* Only one version now. In future we may want to check this to see
   if it is correct */

	call process_io_event;
	if code ^= 0 then return;
	if mcad.state = MCA_ATTACHING & ^mcad.config_data_requested then do;
	     call mca_util_$attach_config (mcad_ptr, code);
	     if code ^= 0 then return;
	     mcad.config_data_requested = "1"b;
	     if mcad.async_io then goto NORMAL_EXIT;	/* wait for IO to finish */
	end;
	if mcad.state = MCA_ATTACHING & mcad.async_io then do;
	     statp = addr (mca_area.mca_status);
	     if status.major = READY then do;
		if status.sub = COMPLETE then do;
		     call ioi_$timeout (mcad.ioi_idx, mcad.max_time_out, code);
		     if code ^= 0 then return;
		     mcad.state = MCA_ATTACHED;
		end;
		else if status.sub = NOT_COMPLETE then do;
		     mca_command = "";
		     expected_chars = ONE_K;
		     call set_ws_connect;
		     if code ^= 0 then return;
		end;
	     end;
	end;
	mca_area.mca_attach_state = mcad.state;

     end common_io_event;
%skip (4);
do_connect:
     proc;
	code = 0;
	call ioi_$connect (mcad.ioi_idx, 0, code);

     end do_connect;
%page;
idx_to_ptr:
     proc;

/* this proc sets the mcad_ptr to the mca_data_seg array that contains the
   requested ioi_idx (loc_ioi_idx) */

	mcad_ptr = null ();
	code = 0;

	if mca_data_seg_ptr = null () then do;
	     call initiate_file_ (SYSTEM_DIR, DATA_SEG, "0"b,
		mca_data_seg_ptr, bc, code);
	     if mca_data_seg_ptr = null () then
						/* Trouble in River City */
		return;
	end;

	do mca_index = lbound (mca_data_seg.array, 1) to hbound (mca_data_seg.array, 1)
	     while (mca_data_seg.array (mca_index).ioi_idx ^= loc_ioi_idx);
	end;

	if mca_index > hbound (mca_data_seg.array, 1) then do;

/* none of the array entries has the ioi_idx */

	     code = error_table_$not_attached;
	     return;
	end;

/* This array entry is the one we want */

	mcad_ptr = addr (mca_data_seg.array (mca_index));

	if force_entry then return;			/* no need to check attachments */

/* Now see if the process we are running in has it attached */

	if mcad.attach_pid ^= get_process_id_ () then do;

/* user must have made lucky gess */

	     mcad_ptr = null ();
	     code = error_table_$not_attached;
	     return;
	end;

	if mcad.state <= MCA_ATTACHING then do;
	     code = error_table_$not_attached;

/* could be that we where called after the completion of the IO to read
   the config at attach time and mca_util_$fill_config_data hasn't set the
   state to ATTACHED yet */

	     if io_event_entry & (mcad.state = MCA_ATTACHING) then return;

/* OK this is not an IO entry so make it looked non attached */
	     else mcad_ptr = null ();
	end;

     end idx_to_ptr;
%page;
process_io_event:
     proc;

/* this proc will set up the returned mca_area structure and call the entry in
   mcad.entry_to_return_data to return the data to the user (clever name) */

	unspec (mca_area) = ""b;
	mca_area.version = MCA_area_version_1;
	mca_area.mca_attach_state = mcad.state;
	imp = addr (event_info.message);
	if imess.completion.time_out then do;
	     code = error_table_$timeout;
	     return;
	end;
	if ^imess.completion.st then do;
	     code = error_table_$action_not_performed;
	     return;
	end;
	isp = addrel (mcad.ioi_wks_ptr, mcad.status_offset);
	statp = addr (istat.iom_stat);
	mcad.last_status = substr (istat.iom_stat, 1, length (mcad.last_status));
	mca_area.mca_status = mcad.last_status;

	if unspec (status) & STATUS_MASK then do;
	     unspec (code) = substr (mcad.last_status, 1, 36);
	     mca_area.io_outstanding = "0"b;
	     if substr (status.sub, 1, 1) = "1"b then
		call mcad.entry_to_return_data
		     (mcad_ptr, mca_area.ret_len, code);
	     else mca_area.ret_len = 0;
	     return;
	end;
	else do;
	     if substr (status.sub, 5, 1) = "1"b then	/* The MCA is all done */
		mca_area.io_outstanding = "0"b;
	     else mca_area.io_outstanding = "1"b;
	     if substr (status.sub, 1, 1) = "1"b then	/* The MCA has sent data */
		call mcad.entry_to_return_data
		     (mcad_ptr, mca_area.ret_len, code);
	     else mca_area.ret_len = 0;
	     return;
	end;
     end process_io_event;
%page;
reset_status:
     proc;
	mca_work_space_ptr = mcad.ioi_wks_ptr;
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	isp = addr (mca_work_space.status_area);
	unspec (mca_dcw_list) = ""b;
	idcwp = addr (mca_dcw_list.idcw1);
	idcw.command = RESET_STATUS;
	idcw.code = IDCW_ID;
	call do_connect;
     end reset_status;
%skip (4);
set_ws_connect:
     proc;

/* this proc sets up the work space for all the mca_util_$ entries that send
   command to the MCA. It will build the data headers and io_param_blocks
   based on the mca_command and the expected_chars setup by the caller. The
   dcw list is set up based on the two data headers */

	mca_work_space_ptr = mcad.ioi_wks_ptr;
	data_size_1 = length (rtrim (mca_command));
	data_size_2 = expected_chars;
	ioi_ws_size = size (mca_work_space);
	if ioi_ws_size > mcad.current_ws_size then do;
	     call ioi_$workspace (mcad.ioi_idx, mcad.ioi_wks_ptr,
		ioi_ws_size, code);
	     if code ^= 0 then return;
	     mca_work_space_ptr = mcad.ioi_wks_ptr;
	     mcad.current_ws_size = ioi_ws_size;
	end;
	mca_dcw_list_ptr = addr (mca_work_space.list_of_dcw);
	isp = addr (mca_work_space.status_area);
	data_header_ptr = addr (mca_work_space.data_header_1);
	unspec (data_header) = ""b;
	unspec (mca_dcw_list) = ""b;
	idcwp = addr (mca_dcw_list.idcw1);
	dcwp = addr (mca_dcw_list.dcw1);
	if mca_command = "" then ;
	else do;
	     data_header.file_name = "";
	     data_header.definer = CON_DATA_FROM_HOST;
	     data_header.rd_flpy = 1;
	     data_header.dest_len.dest_len_msb
		= substr (unspec (data_size_1), 21, 8);
	     data_header.dest_len.dest_len_lsb =
		substr (unspec (data_size_1), 29, 8);
	     data_1 = substr (mca_command, 1, data_size_1);
	     idcw.command = TEXT_TYPE;
	     idcw.code = IDCW_ID;
	     idcw.control = CONT_NO_MARKER;
	     dcw.address = rel (data_header_ptr);
	     dcw.type = IOTD;

/* Tally in words (next highest) */
	     tally_num = size (data_header) + divide (data_size_1, CHARS_PER_WORD, 17);
	     if mod (data_size_1, CHARS_PER_WORD) ^= 0 then tally_num = tally_num + 1;
	     dcw.tally = substr (unspec (tally_num), 25, 12);
	     idcwp = addr (mca_dcw_list.idcw2);
	     dcwp = addr (mca_dcw_list.dcw2);
	end;

/* now set up the second data block for the returned data */

READ_PART:

	data_header_ptr = addr (mca_work_space.data_header_2);
	unspec (data_header) = ""b;

	mcad.io_param_ptr = addr (data_header_2.io_param_blk);
	file_ptr = addr (mca_work_space.data_2);
	idcw.command = READ_TYPE;
	idcw.code = IDCW_ID;
	dcw.address = rel (data_header_ptr);
	dcw.type = IOTD;

/* Tally in words (next highest) */
	tally_num = size (data_header) + (divide (data_size_2, CHARS_PER_WORD, 17) + 1);

	dcw.tally = substr (unspec (tally_num), 25, 12);


/* Requests the IO */

	call do_connect;
	return;
     end set_ws_connect;
%page;
wait:
     proc;

/* At attach time the user indicated that the IO mode would be sync */

	mca_area_ptr = addr (sk_mca_area);
	event_list.ev_count = 1;			/* only one */
	event_list.ev_chan = mcad.event_chn;		/* This is it */
	ev_info_ptr = addr (event_info_area);
	call ipc_$block (addr (event_list), ev_info_ptr, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     return;
	end;
	call process_io_event;
     end wait;

%page;
%include iom_stat;
%page;
%include mca_area;
%page;
%include mca_constants;
%page;
%include mca_data;
%page;
%include mca_config_file;
%page;
%include mca_data_area;
     end mca_util_;

