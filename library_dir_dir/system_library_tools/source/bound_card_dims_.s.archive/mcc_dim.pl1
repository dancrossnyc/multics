/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* "Outer module" to read Multics card codes.  Major facelifting of a Ken Thompson original by MAP, 12/69.
   Deals only with character (9 bit) elements; if 80 or less requested, will read one card; if >80 requested,
   will read number of cards necessary to get nel.  Assumes reader attached.  . */

/* Last modified by J. Stern on 7/29/71 to add standard SDB declaration
   and to delete "mcc_attach" and "mcc_detach" entry points.  Common
   attach and detach entry points for all card pseudo-DIMs are now in raw_dim. */


/* Rewritten 6/27/75 by Noel I. Morris	*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


mcc_read: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);

dcl  wksp ptr,					/* ptr to caller's workspace */
     off fixed bin,					/* offset of data */
     nel fixed bin,					/* number of elements to transmit */
     nelt fixed bin,				/* number actually transmitted */
     iostatus bit (72) aligned;			/* status bits */

dcl  i fixed bin,					/* index */
     code fixed bin (35),				/* error code */
     j fixed bin,					/* count of cards punched or read */
     cardx fixed bin,
     in ptr,					/* input pointer */
     out ptr,					/* output pointer */
     len fixed bin,					/* length of caller's string */
     nleft fixed bin,				/* number of characters left to transmit */
     character char (1) aligned,			/* single ASCII character */
     num fixed bin,					/* translation table index */
     zone fixed bin (3),				/* zone bits */
     one_seven bit (7) aligned,			/* rows 1 thru 7 */
     eight_nine fixed bin (2),			/* rows 8 and 9 */
     illeg_char bit (1) aligned,			/* "1"b if illegal character code read */
     NL char (1) static init ("
");

dcl 1 raw aligned,					/* raw column binary card image */
    2 col (1:80) bit (12) unal,			/* 80 columns */
    2 pad bit (12) unal;				/* padding to word boundary */

dcl  card_image char (80) ;			/* ASCII card image */

dcl  wks char (nleft) based unal;			/* used to reference caller's workspace */

dcl  card_codes_$mcc_reader_codes (0:255) char (1) unal ext, /* reader translation table */
     card_codes_$mcc_punch_codes (0:127) bit (12) unal ext, /* punch translation table */
     error_table_$eof_record fixed bin (35) ext,
     error_table_$short_record fixed bin (35) ext;

dcl  ios_$read entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

dcl (addr, bin, index, min, substr, unspec, length, divide) builtin;

/*  */

% include card_sdb;

/*  */

	iostatus = "0"b;				/* Clear status bits. */
	in = addr (raw);				/* Set input pointer. */
	out = addr (substr (wksp -> wks, off+1));	/* Get pointer into caller's workspace. */
	nelt = 0;					/* Initialize number of chars xmitted. */
	nleft = nel;

	do cardx = 1 to divide (nel + 79, 80, 17, 0);


/* Read a card. */

	     call ios_$read (stream, in, 0, 1, j, iostatus); /* Read a card. */
	     if substr (iostatus, 1, 36) & substr (iostatus, 1, 36) ^= unspec (error_table_$eof_record) then do;
bad_read:		substr (iostatus, 46, 1) = "0"b;	/* Make sure trouble is noticed */
		return;
	     end;

	     if j = 0 then				/* If nothing was read ... */
		if substr (iostatus, 46, 1) then return;
		else go to bad_read;


/* Convert column binary to ASCII card image. */

	     card_image = "";			/* initialize to all blank */
	     do i = 1 to 80;			/* Process 80 columns. */
		zone = bin (substr (raw.col (i), 1, 3), 3); /* Get zone bits. */
		one_seven = substr (raw.col (i), 4, 7); /* Get rows 1 thru 7. */
		eight_nine = bin (substr (raw.col (i), 11, 2)); /* Get rows 8 and 9. */

		illeg_char = "0"b;			/* Clear illegal punch flag. */

		if one_seven then do;		/* If any punches in rows 1 thru 7 ... */
		     num = index (one_seven, "1"b);	/* Look for a punch. */
		     if substr (one_seven, num+1) then	/* Must only be one punch. */
			illeg_char = "1"b;		/* Otherwise, punch is illegal. */
		     else
		     num = 8 - num;			/* Compute index from punch. */
		end;
		else				/* If no punches in rows 1 thru 7 ... */
		num = 0;				/* Index is 0. */

		if illeg_char then			/* If punch was illegal ... */
		     unspec (character) = (9)"1"b;	/* Use ASCII 777 for this case. */
		else do;
		     num = (zone * 8 + num) * 4 + eight_nine;
						/* Compute index from punches. */
		     character = card_codes_$mcc_reader_codes (num);
		end;				/* Get correct character from table. */
		substr (card_image, i, 1) = character;	/* Insert character in ASCII card image. */
	     end;

	     len = length (card_image);

/* Copy card image into caller's workspace. */

	     len = min (len, nleft);			/* Copy as much as caller has room for. */
	     substr (out -> wks, 1, len) = card_image;	/* Copy the card image. */
	     nelt = nelt + len;			/* Count these chars as being transmitted. */
	     nleft = nleft - len;
	     out = addr (substr (out -> wks, len+1));	/* Step output pointer. */
	end;
	if nel ^= nelt then substr (iostatus, 1, 36) = unspec (error_table_$short_record);
	return;


mcc_write: entry (sdb_ptr, wksp, off, nel, nelt, iostatus);

	iostatus = "0"b;				/* Clear status bits. */
	out = addr (raw);				/* Set output pointer. */
	in = addr (substr (wksp -> wks, off+1));	/* Get pointer into caller's workspace. */
	nelt = 0;					/* Clear count of chars transferred. */

	raw.pad = "0"b;				/* Clear padding in column binary card image. */

	do nleft = nel repeat nleft - len while (nleft > 0); /* Process characters until exhausted. */


/* Examine input to get a line or 80 characters, whichever is shortest. */

	     i = index (in -> wks, NL);		/* Search for end of line in input. */
	     if i = 0 then				/* If no NL can be found ... */
		i, len = min (80, nleft);		/* Take up to 80 characters. */
	     else if i > 81 then			/* If line too long ... */
		i, len = 80;			/* Take only 80 characters. */
	     else do;
		len = i;				/* NL can be no further than 81 chars into string. */
		i = len - 1;			/* We do not copy the NL. */
	     end;


/* Copy the input and convert to column binary card image. */

	     card_image = (81)" ";			/* initialize to all blank */
	     card_image = substr (in -> wks, 1, i);	/* Copy up to but not including NL. */

	     do i = 1 to 80;			/* Process each column. */
		character = substr (card_image, i, 1);	/* Extract a character. */
		num = bin (unspec (character), 9);	/* Convert to binary integer. */
		raw.col (i) = card_codes_$mcc_punch_codes (num);
	     end;					/* Look up and insert column binary punches. */


/* Write out the card and step to next one. */

	     call ios_$write (stream, out, 0, 1, j, iostatus); /* Write out the card. */
	     if substr (iostatus, 1, 36) ^= "0"b | j = 0 then do; /* If error ... */
		substr (iostatus, 46, 1) = "0"b;
		return;
	     end;

	     nelt = nelt + len;			/* Increment count of characters transferred. */
	     in = addr (substr (in -> wks, len+1));	/* Step pointer to next line. */
	end;

	return;

mcc_getsize: entry (sdb_ptr, el_size, iostatus);
dcl  el_size fixed bin;

	iostatus = "0"b;				/* Clear status bits. */

	el_size = 9;				/* Size is 9 bits. */

	return;



mcc_changemode: entry (sdb_ptr, new_mode, old_mode, iostatus);

dcl  new_mode char (*),				/* new mode setting */
     old_mode char (*);				/* old mode setting */


	old_mode = "";
	iostatus = "0"b;


	return;



     end mcc_read;
