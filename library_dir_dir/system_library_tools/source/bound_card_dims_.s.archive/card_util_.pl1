/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


card_util_: proc;

/* This procedure implements the mapping of mode names to a compact bit string. */
/* The bit string is used when calling the translate entry to set the operations which are performed. */

/* Created by DRV in 1977 */
/* Modified by J. C. Whitmore, Feb 1980, to remove the punch_nl and binary modes (unused) and to increase the */
/*	size of the orig_string variable to 2000 chars for HASP records */


dcl  test_mode char (*);
dcl  new_modes char (*);
dcl  old_modes char (*);
dcl  mode_bits bit (36);
dcl  a_code fixed bin (35);
dcl  string char (*) var;

dcl  last_char fixed bin;
dcl  char char (1);
dcl  orig_len fixed bin;
dcl  orig_string char (2000) aligned;			/* our copy of the card image */
dcl  pos fixed bin;
dcl  i fixed bin;
dcl  n fixed bin;
dcl  mode_len fixed bin;
dcl  val bit (1);
dcl  mode char (32) var;
dcl  ret_modes char (256) var;

dcl 1 modes based (addr (mode_bits)),
    2 trim bit (1) unal,
    2 lower_case bit (1) unal,
    2 add_nl bit (1) unal,
    2 contin bit (1) unal,
    2 pad bit (30) unal;

dcl  space char (1) int static init (" ");
dcl  lower_case char (26) int static init ("abcdefghijklmnopqrstuvwxyz");
dcl  upper_case char (26) int static init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  NL char (1) int static init ("
");

dcl  error_table_$bad_mode ext fixed bin (35);

dcl (substr, rtrim, ltrim, search, verify, reverse, length, translate, copy) builtin;


modes:	entry (new_modes, mode_bits, old_modes, a_code);

	a_code = 0;

	if modes.lower_case then ret_modes = "lower_case,";
	else ret_modes = "^lower_case,";
	if modes.add_nl then ret_modes = ret_modes || "add_nl,";
	else ret_modes = ret_modes || "^add_nl,";
	if modes.contin then ret_modes = ret_modes || "contin,";
	else ret_modes = ret_modes || "^contin,";
	if modes.trim then ret_modes = ret_modes || "trim.";
	else ret_modes = ret_modes || "^trim.";
	old_modes = ret_modes;


	n = verify (reverse (new_modes), " .,;");	/* any thing there? */
	if n = 0 then return;			/* guess not */
	mode_len = length (new_modes) - n + 1;

	do i = 1 repeat i + n while (i < mode_len);
	     n = search (substr (new_modes, i), ",;.");
	     if n = 0 then n = mode_len - i + 2;	/* no breaks, take remaining */
	     mode = ltrim (rtrim (substr (new_modes, i, n - 1))); /* get mode */
	     if substr (mode, 1, 1) = "^" then do;
		val = "0"b;
		pos = 2;
	     end;
	     else do;
		val = "1"b;
		pos = 1;
	     end;
	     if substr (mode, pos) = "trim" then modes.trim = val;
	     else if substr (mode, pos) = "lower_case" then modes.lower_case = val;
	     else if substr (mode, pos) = "add_nl" then modes.add_nl = val;
	     else if substr (mode, pos) = "contin" then modes.contin = val;

	     else a_code = error_table_$bad_mode;
	end;
	return;

translate: entry (mode_bits, string);

	orig_len = length (string);			/* save the original string length */
	last_char = length (rtrim (string));		/* find last non-blank */
	if modes.lower_case & last_char > 0 then do;
	     orig_string = string;			/* copy the string */
	     string = "";				/* we will rebuild it */
	     do i = 1 to last_char;			/* look at each char given */
		char = substr (orig_string, i, 1);	/* get the next char */
		if char = "\" & i < last_char then do;	/* don't convert a trailing \ */
		     i = i + 1;
		     char = substr (orig_string, i, 1); /* skip the escape char */
		     if char = "<" then char = "[";
		     else if char = ">" then char = "]";
		     else if char = "(" then char = "{";
		     else if char = ")" then char = "}";
		end;
		else char = translate (char, lower_case, upper_case);
		string = string || char;		/* add to the input string */
	     end;
	     string = string || copy (" ", orig_len - length (string)); /* pad out to orig length */
	end;
	if modes.trim then string = rtrim (string);
	if modes.contin then do;
	     i = length (rtrim (string));		/* find last non-blank char */
	     if i > 0 then do;
		if substr (string, i, 1) ^= "\" & modes.add_nl then string = string || NL;
		else if substr (string, i, 1) = "\" then string = substr (string, 1, i - 1); /* drop contin mark */
	     end;
	     else if modes.add_nl then string = string || NL;
	end;
	else if modes.add_nl then string = string || NL;
	return;

test_mode: entry (mode_bits, test_mode) returns (bit (1));

	return ("0"b);

     end card_util_;
