/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Flip cards "outer module".  Assumes card_out_stream attached to punch and creates and punches
   flip card(s) for specified number of characters   coded by MAP, 3/70  */

/* Modified by J. Stern on 7/29/71 to add standard SDB declaration
   and to delete "flipper_attach" and "flipper_detach" entry points.  Common
   attach and detach entry points for all card pseudo-DIMs are now in card_dim.  */

/* Last modified 6/27/75 by Noel I. Morris	*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


flipper_write: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);

dcl  wksp ptr,					/* pointer to caller's workspace */
     off fixed bin,					/* offset of caller's data */
     nel fixed bin,					/* number of elements to transmit */
     nelt fixed bin,				/* number of elements actually transmitted */
     iostatus bit (72) aligned;			/* status bits */

dcl  nleft fixed bin,				/* number of elements remaining to transmit */
     in ptr,					/* input pointer */
     out ptr,					/* output pointer */
     len fixed bin,					/* length of data on each iteration */
     pos fixed bin,					/* cell position on flip card */
     num fixed bin (9),				/* numeric value of ASCII character */
     i fixed bin,					/* character index */
     j fixed bin;					/* cell index */

dcl  ios_$write ext entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

dcl  card (0:159) bit (6) unal;			/* flip card cells */

dcl  wks char (nleft) based unal;			/* caller's workspace */

dcl  fliptab$flip_codes (0:127, 0:5) bit (6) ext unaligned;

dcl (addr, bin, min, substr, unspec) builtin;


		/*  */

% include card_sdb;

		/*  */

	iostatus = "0"b;				/* Clear status bits. */
	out = addr (card);				/* Get pointer to flip card image. */
	in = addr (substr (wksp -> wks, off+1));	/* Get pointer to caller's data. */
	nelt = 0;					/* Initialize count of elements transmitted. */

	do nleft = nel by -22 while (nleft > 0);	/* Process 22 characters at a time. */
	     card = "0"b;				/* Clear the card image. */
	     card (1), card (159) = "000101"b;		/* Insert 7-9 punches in columns 1 and 80. */
	     pos = 154;				/* Set position of first cell. */

	     len = min (22, nleft);			/* Take up to 22 characters. */
	     do i = 0 to len - 1;			/* Process each character. */
		num = bin (unspec (substr (in -> wks, i+1, 1)), 9);
						/* Grab a character and convert to binary. */
		do j = 0 to 5;			/* Fill in cells to make flip character. */
		     card (pos) = fliptab$flip_codes (num, j);
		     pos = pos - 2;			/* Chars go from right to left so card can be flipped. */
		end;
		pos = pos - 2;			/* Leave some blank space. */
		if pos <= 0 then pos = pos + 155;	/* After 11 characters, do bottom row. */
	     end;

	     call ios_$write (stream, out, 0, 1, j, iostatus);
	     if substr (iostatus, 1, 36) then return;

	     nelt = nelt + len;			/* Increment elements transmitted. */
	     in = addr (substr (in -> wks, len+1));	/* Step input pointer. */
	end;

	return;


		/*  */

flipper_getsize: entry (sdb_ptr, size, iostatus);

dcl  size fixed bin;

	iostatus = "0"b;

	size = 9;					/* Works with 9-bit elements only */

	return;



     end flipper_write;
