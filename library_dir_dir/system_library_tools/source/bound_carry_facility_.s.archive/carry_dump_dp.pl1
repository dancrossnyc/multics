/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


carry_dump_dp: procedure ( dir_path, map_dir_name, sys_map_name, err_file_name );

	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* This procedure dprints the user maps made	 */
	/* during a carry_dump run.			 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */

	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* Declarations				 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */

declare ( dir_path,						/* pathname of outer directory */
	map_dir_name,					/* entry name of user map directory */
	sys_map_name,					/* entry name of system map */
	err_file_name ) char(*);				/* entry name of error file */

declare ( map_dir_path,					/* path name of user map directory */
	sys_map_path,					/* path name of system map */
	err_file_path,					/* path name of error file */
	name_path,					/* path name of a user map */
	dir_name ) char(168);				/* name of old user map directory */

declare	header char(200) aligned,				/* dp header for user maps */
	header_len fixed bin;				/* length of user headers */

declare	user_map char(user_map_len) based(user_map_ptr);

declare ( dir_len,						/* real length of a dir pathname */
	name_len ) fixed bin;				/* real length of an entry name */

declare	(i, j, k, start, user_map_len) fixed bin;

declare	code fixed bin(35);					/* standard status code */

declare	(time1, time2, one_day) fixed bin(71);

declare	type fixed bin(2),					/* for call to status_minf */
	bit_count fixed bin(24);				/* = */

declare	rings(3) fixed bin(5) internal static initial ( 4, 4, 4 );	/* for call to set_ring_brackets */

declare	area_ptr pointer,					/* pointer to area for star_ */
	eptr pointer,					/* pointer to star_ entry array */
	nptr pointer,					/* pointer to star_ name array */
	user_map_ptr pointer,
	ecount fixed bin,					/* star_ entry count */

	1 entry(ecount) based(eptr),				/* star_ entry array structure */
	  2 type bit(2) unaligned,				/* entry type */
	  2 nnames bit(16) unaligned,				/* number of names on entry */
	  2 nindex bit(18) unaligned,				/* index of first name in name array */

	name(2) char(32) based(nptr);				/* star_ name array */

declare 1 branch_status aligned,
        ( 2 type bit(2),
	2 nnames fixed bin(15),
	2 nrp bit(18),
	2 dtcm bit(36),
	2 dtu bit(36),
	2 mode bit(5),
	2 pad bit(13),
	2 records fixed bin(17)) unaligned;

declare  error_table_$noentry fixed bin (35) ext;

declare	area_ entry ( fixed bin, ptr ),			/* external procedures */
	clock_ entry returns ( fixed bin(71) ),
	com_err_ entry options ( variable ) ,
	convert_date_to_binary_ entry(char(*),fixed bin(71),fixed bin(35)),
	delete_$path entry ( char(*), char(*), bit(6), char(*), fixed bin(35) ),
	dprint$dp entry options ( variable ) ,
	hcs_$delentry_file entry (char (*), char (*), fixed bin(35) ),
	hcs_$delentry_seg entry ( ptr, fixed bin(35) ),
	hcs_$initiate_count entry(char(*),char(*),char(*),fixed bin(24),fixed bin(1),ptr,fixed bin(35)),
	hcs_$make_seg entry ( char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35) ),
	hcs_$set_ring_brackets entry ( char(*), char(*), (3) fixed bin(5), fixed bin(35) ),
	hcs_$star_ entry ( char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35) ),
	hcs_$status_ entry ( char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35) ),
	hcs_$status_minf entry ( char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35) ),
	hcs_$terminate_seg entry(ptr,fixed bin(1),fixed bin(35)),
	ioa_$rsnnl entry options ( variable );

declare ( addr,						/* builtin functions */
	fixed,
	index,
	null,
	substr ) builtin;

	/* 	*/

	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* Create the various pathnames for the user map	 */
	/* directory, the system map, and the error file	 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */

	dir_len = index ( dir_path, " " ) - 1;			/* get length of directory portion */

	name_len = index ( map_dir_name, " " ) - 1;		/* get length of map dir entry name */
	if name_len = -1					/* is it 32 characters ? */
	   then name_len = 32;				/* yes, make it so */
	map_dir_path = substr ( dir_path, 1, dir_len )		/* make up the full pathname */
		     || ">"
		     || substr ( map_dir_name, 1, name_len );

	name_len = index ( sys_map_name, " " ) - 1;		/* get length of sys map entry name */
	if name_len = -1					/* is it 32 characters ? */
	   then name_len = 32;				/* yes, make it so */
	sys_map_path = substr ( dir_path, 1, dir_len )		/* make up the full pathname */
		     || ">"
		     || substr ( sys_map_name, 1, name_len );

	name_len = index ( err_file_name, " " ) - 1;		/* get length of err file entry name */
	if name_len = -1					/* is it 32 characters ? */
	   then name_len = 32;				/* yes, make it so */
	err_file_path = substr ( dir_path, 1, dir_len )		/* make up the full pathname */
		      || ">"
		      || substr ( err_file_name, 1, name_len );

	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* dprint the system map and error file if they	 */
	/* actually exist.				 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */
							/* see if the system map exists */
	call hcs_$status_minf ( dir_path, sys_map_name, 1, type, bit_count, code );
	if code ^= 0					/* is it there ? */
	   then go to get_err_file ;				/* no, don't dprint it */
							/* set the ring brackets properly */
	call hcs_$set_ring_brackets ( dir_path, sys_map_name, rings, code );

get_err_file:					/* check to see if the error file is there */
	call hcs_$status_minf ( dir_path, err_file_name, 1, type , bit_count, code);
	if code = error_table_$noentry then go to get_user_maps;
	     call hcs_$set_ring_brackets ( err_file_path, "", rings, code );
	if bit_count = 0 then call hcs_$delentry_file ( err_file_path, "", code );
/**/
	/* * * * * * * * * * * * * * * * * * * * * * * * */
	/*					*/
	/* Get set up to dprint the user maps.		*/
	/*					*/
	/* * * * * * * * * * * * * * * * * * * * * * * * */

get_user_maps:					/* first get a seg for star area */
	call hcs_$make_seg( "", "carry_dump_area_", "", 01111b, area_ptr, code );
	if area_ptr = null()
	   then do;
	      call com_err_ ( code, "carry_dump_dp",
		"^/Unable to create area segment, unable to dprint user maps.");
	      return;
	   end;

	call area_ (60000, area_ptr);			/* initialize the allocation area */

						/* get the entry list */
	call hcs_$star_ (map_dir_path, "**", 3, area_ptr, ecount, eptr, nptr, code );
	if code ^= 0				/* error getting names ? */
	   then do;				/* yes, then complain and leave */
	      call com_err_ ( code, "carry_dump_dp",
		"^/Unable to obtain names of user maps, unable to dprint user maps." );
	      go to delete_old_dirs;
	   end;
						/* are there entries ? */
	if ecount = 0
	   then go to delete_old_dirs;			/* no, leave */

	dir_len = index ( map_dir_path, " " ) - 1;	/* get length of user map dir path */

/**/

	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* Having set everything up, loop through the maps */
	/* printing them for the users.		 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */

	do i = 1 to ecount;

	   j = fixed ( eptr->entry(i).nindex );		/* get offset in name array */
						/* generate header string */
	   call ioa_$rsnnl ( "^a", header, header_len, nptr->name(j) );

	   name_len = index ( nptr->name(j), " ") - 1;	/* get length of user name */
	   if name_len = -1				/* is it 32 characters ? */
	      then name_len = 32;			/* yes, make it so */

	   name_path = substr ( map_dir_path, 1, dir_len)	/* make up map path name */
		     || ">"
		     || substr (nptr->name(j), 1, name_len);
						/* set the proper ring brackets */
	   call hcs_$set_ring_brackets ( map_dir_path, nptr->name(j), rings, code );

/* Dprint this user map only if there were errors */

	     call hcs_$initiate_count(name_path,"","",bit_count,0,user_map_ptr,code);
	     if user_map_ptr=null then do;
dprint_map:	call dprint$dp("-bf","-dl","-he",substr(header,1,header_len),name_path);
	     end;
	     else do;
		if bit_count^=0 then do;
		     user_map_len = divide(bit_count,9,17,0);
		     start = 1;
		     do while(start>0);
			k = index(substr(user_map,start),":");
			if k=0 then start = 0;
			else do;
			     if k<11 | substr(user_map,start+k-11,11)^="Tape label:" then do;
				call hcs_$terminate_seg(user_map_ptr,0,code);
				go to dprint_map;
			     end;
			     start = start+k;
			end;
		     end;
		end;
		call delete_$path(name_path,"","000101"b,"",code);
	     end;

	end;

/**/
	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* Delete all old user map directories.		 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */


delete_old_dirs:
	call hcs_$star_ (dir_path, "**.map_dir", 2, area_ptr, ecount, eptr, nptr, code);
	if code^=0 | ecount<2 then go to delete_area;

	do i = 1 to ecount;
	     dir_name = nptr->name(fixed(eptr->entry(i).nindex));
	     if eptr->entry(i).type="10"b then
		if dir_name^=map_dir_name then do;
		     call hcs_$status_(dir_path,dir_name,1,addr(branch_status),null,code);
		     if code=0 then do;
			time1 = fixed(branch_status.dtcm)*2**16;  /* microseconds, */
			time2 = clock_();		/* microseconds, */
			call convert_date_to_binary_("1 day",one_day,code);
			if time2-time1>one_day then
			     call delete_$path (dir_path, dir_name, "011000"b, "carry_dump", code);
		     end;
		end;
	end;



	/* * * * * * * * * * * * * * * * * * * * * * * * * */
	/*					 */
	/* All done.  Delete the area seg and leave.	 */
	/*					 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * */


delete_area:
	call hcs_$delentry_seg (area_ptr, code );	/* that's got it */

	return;

end carry_dump_dp;
