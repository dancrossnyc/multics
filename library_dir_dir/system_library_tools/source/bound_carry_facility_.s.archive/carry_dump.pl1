/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


carry_dump: proc;

/* This command reads a queue of carry requests and produces:
   a backup tape containing the named segments and directory
   subtrees, a tape log segment called TAPE_NUMBER.tape_log,
   a list of requests called TAPE_NUMBER.input used to remake a tape,
   and a directory named mail_to_carry containing PERSON.PROJECT
   ASCII segments ("...loaded at...") which are carried on the tape
   and mailed at the target site to notify requestors that their
   requests have been loaded.

   Usage:	  carry_dump tape_number {queue_path} {-control_arg}

   where control_arg can be -force or -fc to write a tape even
   if there are no requests in the queue.
   If queue_path is not specified, the default pathname is:

   >daemon_dir_dir>carry_dir>carry.ms

   The remake_carry_tape command reads the file <tape_number>.input
   that was written when tape <tape_number> was first made, and
   makes another tape. The tape made can have a number different
   from <tape_number>.

   Usage:	  remake_carry_tape tape_number {new_tape_number}
   {-queue_dir path}
   Steve Herbst 7/9/76
-notify feature added 04/18/79 S. Herbst */
/* -trim added and bugs fixed 08/03/79 S. Herbst */
/* -user added 01/09/80 S. Herbst */
/* Modified to set dir_quota on append, Keith Loepere December 1984. */

%include backup_control;
dcl 1 request_info (request_index) aligned based,
    2 sender char (32),
    2 new_user char (32),
    2 type_string char (32),
     2 notify bit (1) aligned;

dcl SP_HT char (2) int static options (constant) init (" 	");
dcl (mseg_dir, queue_dir) char (168) init (">daemon_dir_dir>carry_dir");
dcl  mseg_name char (32) init ("carry.ms");

dcl (dn, input_path, mail_dir_path, path, new_dir_path, tape_log_path) char (168);

dcl  line char (line_len) based (line_ptr);
dcl  arg char (arg_len) based (arg_ptr);
dcl  return_string char (return_len) varying based (return_ptr);
dcl  mail_seg char (mail_seg_len) based (mail_seg_ptr);
dcl (buffer, header, warning_msg) char (500);
dcl  err_string char (100);
dcl (en, new_user_id, sender_id, type_str) char (32);
dcl  atime char (24);
dcl  destination char (23);
dcl  tape_number char (32);
dcl  new_tape_number char (32) int static;
dcl  newline char (1) int static init ("
");
dcl  id (id_limit) bit (72) aligned based (id_ptr);

dcl  use_tape_number bit (1) aligned int static;
dcl  active_function bit (1) aligned;
dcl  remake_tape bit (1) aligned;
dcl (got_number, got_new_number, got_queue, got_tape) bit (1) aligned;
dcl (force_sw, new_dir_sw, no_requests, notify_sw, trim_sw, warn_subtree_sw) bit (1) aligned;
dcl  tape_attached bit (1) aligned init ("0"b);

dcl  area area based (area_ptr);

dcl (bk_iocb, input_iocb, mail_iocb, tape_log_iocb) ptr init (null);
dcl (eptr, nptr, id_ptr) ptr init (null);
dcl (area_ptr, arg_ptr, line_ptr, mail_seg_ptr, names_ptr, new_id_ptr, return_ptr) ptr;
dcl  ptrs (2) ptr;
dcl (control_ptr, info_ptr) ptr init (null);

dcl (arg_count, arg_len, buffer_len, ecount, error_count, header_len, id_index, id_limit) fixed bin;
dcl (i, j, line_len, mail_count, mail_seg_len, names_count, request_index, return_len) fixed bin;
dcl  mseg_index fixed bin init (0);
dcl  type fixed bin (2);
dcl  rings7 (3) fixed bin (3) init ((3)7);
dcl  mail_seg_bc fixed bin (24);
dcl  code fixed bin (35);

dcl 1 entries (ecount) aligned based (eptr),
    2 type bit (2) unaligned,
    2 nnames fixed bin (15) unaligned,
    2 nindex fixed bin (17) unaligned;

dcl  star_names (99) char (32) aligned based (nptr);
%include branch_status;
dcl  names (names_count) char (32) based (names_ptr);

%include create_branch_info;
dcl 1 cb_info like create_branch_info;

%include mseg_return_args;
dcl 1 mseg_args like mseg_return_args;

%include send_mail_info;
dcl 1 dir_acl (1) aligned,
     2 access_name char (32),
     2 modes bit (36),
     2 status_code fixed bin (35);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$end_of_info fixed bin (35) ext;
dcl  error_table_$entlong fixed bin (35) ext;
dcl  error_table_$no_message fixed bin (35) ext;
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$not_act_fnc fixed bin (35) ext;
dcl  error_table_$not_attached fixed bin (35) ext;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl  backup_dump_ entry (ptr, fixed bin (35));
dcl  backup_util$get_real_name entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  clock_ entry returns (fixed bin (71));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (*), char (*));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_group_id_ entry returns (char (32));
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$create_branch_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$del_dir_tree entry (char (*), char (*), fixed bin (35));
dcl  hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (1), ptr, fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_file entry (char (*), char (*), fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$rs entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$error_output ptr ext;
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1), fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  message_segment_$close entry (fixed bin, fixed bin (35));
dcl  message_segment_$delete_index entry (fixed bin, bit (72)aligned, fixed bin (35));
dcl  message_segment_$incremental_read_index entry (fixed bin, ptr, bit (2)aligned, bit (72), ptr, fixed bin (35));
dcl  message_segment_$open entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  message_segment_$read_index entry (fixed bin, ptr, bit (1)aligned, ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));
dcl  send_mail_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  send_message_$notify_mail entry options (variable);

dcl (addr, divide, fixed, index, length, null, ptr, reverse, rtrim, substr, unspec, verify) builtin;

dcl  cleanup condition;
						/*  */
	remake_tape = "0"b;

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then active_function = "0"b;
	else active_function = "1"b;
	if arg_count = 0 then do;
USAGE:	     if active_function then call active_fnc_err_$suppress_name (0, "carry_dump",
		"Usage:  [carry_dump tape_number {queue_path} {-force}]");
	     else call com_err_$suppress_name (0, "carry_dump",
		"Usage:  carry_dump tape_number {queue_path} {-force}");
	     return;
	end;

	force_sw, got_tape, got_queue, no_requests = "0"b;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if substr (arg, 1, 1) = "-" then
		if arg = "-force" | arg = "-fc" then force_sw = "1"b;
		else do;
		     code = error_table_$badopt;
		     if active_function then call active_fnc_err_ (code, "carry_dump", "^a", arg);
		     else call com_err_ (code, "carry_dump", "^a", arg);
		     return;
		end;
	     else if ^got_tape then do;
		got_tape = "1"b;
		tape_number, new_tape_number = arg;
	     end;
	     else do;
		if got_queue then go to USAGE;	/* two queue paths given */
		got_queue = "1"b;
		call expand_pathname_ (arg, mseg_dir, mseg_name, code);
		if code ^= 0 then do;
		     call warn (code, "carry_dump", arg);
		     return;
		end;
		queue_dir = mseg_dir;
		j = length (mseg_name)+1-verify (reverse (mseg_name), " ");
		if j<4 | substr (mseg_name, j-2, 3) ^= ".ms" then
		     if j+3>length (mseg_name) then do;
			call warn (error_table_$entlong, "carry_dump", rtrim (mseg_name) || ".ms");
			return;
		     end;
		     else substr (mseg_name, j+1, 3) = ".ms";
	     end;
	end;

	if active_function then return_string = "false";	/* initialize */

	call message_segment_$open (mseg_dir, mseg_name, mseg_index, code);
	if mseg_index = 0 then do;
	     call warn (code, "carry_dump", rtrim (mseg_dir) || ">" || mseg_name);
	     return;
	end;

	on condition (cleanup) call clean_up;

/* See if we can read first request */

	area_ptr = get_system_free_area_ ();
	call message_segment_$read_index (mseg_index, area_ptr, "0"b, addr (mseg_args), code);
	if code ^= 0 then
	     if force_sw then no_requests = "1"b;
	     else do;
MSEG_ERROR:	if code = error_table_$no_message then
		     if active_function then call ioa_$ioa_switch (iox_$error_output,
			"Queue ^a>^a is empty.", mseg_dir, mseg_name);
		     else call com_err_ (0, "carry_dump", "Queue ^a>^a is empty.", mseg_dir, mseg_name);
		else call warn (code, "carry_dump", rtrim (mseg_dir) || ">" || mseg_name);
RETURN:		call clean_up;
		return;
	     end;
	call ioa_$rsnnl ("^a>^a.input", input_path, (0), queue_dir, tape_number);
	call hcs_$truncate_file (input_path, "", 0, code); /* prepare to write <tape_number>.input */
	call hcs_$set_bc (input_path, "", 0, code);
	call iox_$attach_name ("carry_input", input_iocb, "vfile_ "||input_path, null, code);
	if code ^= 0 then do;
INPUT_ERROR:   call warn (code, "carry_dump", "^/Unable to attach ""carry_input"" to " || input_path);
	     go to RETURN;
	end;
	call iox_$open (input_iocb, 3, "0"b, code);
	if code ^= 0 then do;
	     call warn (code, "carry_dump", "^/Unable to write " || input_path);
	     go to RETURN;
	end;

/* Allocate room for message id's */

	id_limit = 128;
	allocate id in (area) set (id_ptr);
	id_index = 0;

	i = index (mseg_name, ".");			/* get destination from queue name prefix */
	if i ^= 0 & substr (mseg_name, i+1, 8) = "carry.ms" then do;
GET_DS:	     destination = substr (mseg_name, 1, i-1);
	end;
	else do;					/* name given has no destination prefix */
	     call hcs_$status_ (mseg_dir, mseg_name, 1, addr (branch_status), area_ptr, code);
	     if code ^= 0 then do;
NO_DS:		call warn (code, "carry_dump", "^/Unable to determine carry destination.
Please give destination - prefixed name of queue " || rtrim (mseg_dir) || ">" || mseg_name);
		go to RETURN;
	     end;
	     names_ptr = ptr (area_ptr, branch_status.names_rel_pointer);
	     names_count = fixed (branch_status.number_names);
	     do j = 1 to names_count;
		mseg_name = names (j);
		i = index (mseg_name, ".");
		if i ^= 0 & substr (mseg_name, i+1, 8) = "carry.ms" then do;
		     free names in (area);
		     go to GET_DS;
		end;
	     end;
	     free names in (area);
	     code = 0;
	     go to NO_DS;
	end;

/* Write header line in <tape_number>.input */

	call date_time_ (clock_ (), atime);
	call ioa_$rs ("Carry tape ^a to ^a written ^a", header, header_len, tape_number, destination, atime);
	call iox_$put_chars (input_iocb, addr (header), header_len, code);
	if code ^= 0 then do;
	     call warn (code, "carry_dump", "^/Unable to write " || input_path);
	     go to RETURN;
	end;

	if no_requests then go to MAKE_BLANK_TAPE;

/* Read queue into <tape_number>.input */

	code = 0;

	do while (code = 0);

	     id_index = id_index+1;			/* remember message id for later deletion */
	     if id_index>id_limit then do;		/* need more room for id array */
		id_limit = id_limit+64;
		allocate id in (area) set (new_id_ptr);
		do j = 1 to id_index-1;
		     new_id_ptr -> id (j) = id_ptr -> id (j);
		end;
		free id_ptr -> id in (area);
		id_ptr = new_id_ptr;
	     end;
	     id (id_index) = mseg_args.ms_id;

	     sender_id = mseg_args.sender_id;
	     line_ptr = mseg_args.ms_ptr;
	     line_len = divide (mseg_args.ms_len+8, 9, 17, 0);
	     if substr (line, line_len, 1) = newline then line_len = line_len-1;
	     if substr (line, line_len - 5, 6) = " -hold" then do; /* hold request */
		line_len = line_len-6;
		id_index = id_index-1;		/* do not delete it from queue */
	     end;
	     if substr (line, line_len - 7, 8) = " -notify" then do;
		notify_sw = "1"b;
		line_len = line_len - 8;
	     end;
	     else notify_sw = "0"b;
	     j = index (line, " -new_dir ");
	     if j ^= 0 then do;
		new_dir_path = substr (line, j + 10);
		line_len = j - 1;
	     end;
	     else new_dir_path = "";
	     if substr (line, line_len - 5, 6) = " -trim" then do;
		trim_sw = "1"b;
		line_len = line_len - 6;
	     end;
	     else trim_sw = "0"b;

	     j = index (line, " -user ");
	     if j ^= 0 then do;
		new_user_id = substr (line, j + 7);
		line_len = j - 1;
	     end;
	     else new_user_id = "";

	     if substr (line, 1, 8) ^= "Segment " & substr (line, 1, 8) ^= "Subtree " then do;
		call hcs_$status_minf ((line), "", 1, type, 0, code);
		if code ^= 0 then go to NEXT;
		if type = 2 then type_str = "Subtree";
		else type_str = "Segment";
		call ioa_$rs ("^a ^a  ^a^[ -user ^a^;^s^]^[ -trim^]^[ -notify^]", buffer, buffer_len,
		     type_str, substr (line, 1, line_len), sender_id,
		     new_user_id ^= "", new_user_id, trim_sw, notify_sw);
	     end;
	     else call ioa_$rs ("^a  ^a^[ -user ^a^;^s^]^[ -trim^]^[ -notify^]", buffer, buffer_len,
		substr (line, 1, line_len), sender_id, new_user_id ^= "", new_user_id, trim_sw, notify_sw);

	     if new_dir_path ^= "" then do;
		substr (buffer, buffer_len, 10) = " -new_dir" || newline;
		buffer_len = buffer_len + 9;
	     end;

	     call iox_$put_chars (input_iocb, addr (buffer), buffer_len, code);

	     if new_dir_path ^= "" then
		call ioa_$ioa_switch (input_iocb, "^10xMove to directory ^a", new_dir_path);

NEXT:	     call message_segment_$incremental_read_index /* read next request from queue */
		(mseg_index, area_ptr, "01"b, mseg_args.ms_id, addr (mseg_args), code);
	     if code ^= 0 & code ^= error_table_$no_message then go to MSEG_ERROR;
	end;

/* Position back and read header line from <tape_number>.input */

	call iox_$position (input_iocb, -1, 0, code);

	call iox_$get_line (input_iocb, addr (buffer), length (buffer), line_len, code);
	if code ^= 0 then do;
	     call warn (code, "carry_dump", "^/Unable to read " || input_path);
	     go to RETURN;
	end;
	go to COMMON;
						/*  */
remake_carry_tape: entry;

	remake_tape = "1"b;

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then active_function = "0"b;
	else active_function = "1"b;
	if arg_count = 0 then do;
USAGE2:	     if active_function then call active_fnc_err_$suppress_name (0, "remake_carry_tape",
		"Usage:  [remake_carry_tape tape_number {new_tape_number} {-queue_dir path}]");
	     else call com_err_$suppress_name (0, "remake_carry_tape",
		"Usage:  remake_carry_tape tape_number {new_tape_number} {-queue_dir path}]");
	     return;
	end;

	got_number, got_new_number = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-" then
		if arg = "-queue_dir" | arg = "-qd" then do;
		     i = i+1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     call absolute_pathname_ (arg, queue_dir, code);
		     if code ^= 0 then do;
			call com_err_ (code, "remake_carry_tape", "^a", arg);
			return;
		     end;
		end;
		else do;
		     code = error_table_$badopt;
		     if active_function then call active_fnc_err_ (code, "remake_carry_tape", "^a", arg);
		     else call com_err_ (code, "remake_carry_tape", "^a", arg);
		     return;
		end;
	     else if ^got_number then do;
		tape_number = arg;
		got_number = "1"b;
	     end;
	     else if ^got_new_number then do;
		new_tape_number = arg;
		got_new_number = "1"b;
	     end;
	     else go to USAGE2;
	end;
	if ^got_number then go to USAGE2;
	if ^got_new_number then new_tape_number = tape_number;

	call ioa_$rsnnl ("^a>^a.input", input_path, (0), queue_dir, tape_number);
	call iox_$attach_name ("carry_input", input_iocb, "vfile_ "||input_path, null, code);
	if code ^= 0 then go to INPUT_ERROR;

	call iox_$open (input_iocb, 1, "0"b, code);
	if code ^= 0 then do;
	     call warn (code, "carry_dump", "Unable to read " || input_path);
	     go to RETURN;
	end;

	call iox_$get_line (input_iocb, addr (buffer), length (buffer), line_len, code);
	if code ^= 0 then do;
	     call warn (code, "carry_dump", "Unable to read " || input_path);
	     go to RETURN;
	end;

/* Get destination from input file header */

	line_ptr = addr (buffer);
	i = index (line, " written ");
	j = index (reverse (substr (line, 1, i-1)), " ")-1;
	destination = substr (line, i-j, j);

/* Build header line */

	call date_time_ (clock_ (), atime);
	call ioa_$rs ("Carry tape ^a to ^a written ^a", header, header_len, new_tape_number, destination, atime);
						/*  */
COMMON:	call initialize_backup;

	call attach_tape_log;			/* write header line in <tape_number>.tape_log */

	use_tape_number = "1"b;			/* make $tape_entry return tape id */

/* Create directories to hold mail segs */

	cb_info.version = create_branch_version_2;
	unspec (cb_info.switches) = "0"b;
	cb_info.dir_sw, cb_info.parent_ac_sw = "1"b;
	cb_info.mode = "111"b;
	cb_info.mbz2, cb_info.access_class = "0"b;
	cb_info.rings = rings7;
	cb_info.userid = get_group_id_ ();
	cb_info.bitcnt, cb_info.quota, cb_info.dir_quota = 0;

	call ioa_$rsnnl ("^a>mail_to_carry", mail_dir_path, 168, queue_dir);

	call create_mail_dir ("mail_to_carry");
	call create_mail_dir ("mail_to_send");
						/*  */
/* Queue input file to be dumped */

	request_index, control_ptr -> backup_control.request_count = 1;
	control_ptr -> backup_control.path (1) = input_path;
	control_ptr -> backup_control.new_path (1) = "";
	info_ptr -> request_info.type_string (1) = "Segment";
	info_ptr -> request_info.sender (1) = get_group_id_ ();
	info_ptr -> request_info.new_user (1) = "";

/* Queue carry requests (add them to backup_control structure) */

	call iox_$get_line (input_iocb, addr (buffer), length (buffer), buffer_len, code);

	do while (code ^= error_table_$end_of_info);

	     request_index, control_ptr -> backup_control.request_count = request_index+1;
	     control_ptr -> backup_control.no_primary_sw (request_index) = "1"b;

	     line_ptr = addr (buffer);
	     line_len = buffer_len;
	     if substr (line, line_len, 1) = newline then line_len = line_len-1;
	     if substr (line, line_len - 8, 9) = " -new_dir" then do;  /* carry -new_dir */
		new_dir_sw = "1"b;
		line_len = line_len - 9;
	     end;
	     else new_dir_sw = "0"b;
	     if substr (line, line_len - 7, 8) = " -notify" then do;
		info_ptr -> request_info.notify (request_index) = "1"b;
		line_len = line_len - 8;
	     end;
	     else info_ptr -> request_info.notify (request_index) = "0"b;
	     if substr (line, line_len - 5, 6) = " -trim" then do;
		control_ptr -> backup_control.trim_sw (request_index) = "1"b;
		line_len = line_len - 6;
	     end;
	     else control_ptr -> backup_control.trim_sw (request_index) = "0"b;
	     i = index (line, " -user ");
	     if i ^= 0 then do;
		info_ptr -> request_info.new_user (request_index) = substr (line, i + 7);
		line_len = i - 1;
	     end;
	     else info_ptr -> request_info.new_user (request_index) = "";
	     line_len = length(rtrim(substr(line,1,line_len)));
	     i = line_len+1-index(reverse(substr(line,1,line_len))," ");  /* find last space */
	     info_ptr -> request_info.sender (request_index) = substr (line, i+1);
	     info_ptr -> request_info.type_string (request_index) = substr (line, 1, 7);
	     path = substr (line, 9, i - 9);

	     control_ptr -> backup_control.path (request_index) = path;
	     if new_dir_sw then do;			/* -new_dir */
		call expand_pathname_ (path, dn, en, code);
		call iox_$get_line (input_iocb, addr (buffer), length (buffer), buffer_len, code);
		i = index (buffer, "Move to directory ") + 18;  /* start of new pathname */
		control_ptr -> backup_control.new_path (request_index) =
		     substr (buffer, i, buffer_len - i) || ">" || en;
	     end;
	     else control_ptr -> backup_control.new_path (request_index) = "";

	     call iox_$get_line (input_iocb, addr (buffer), length (buffer), buffer_len, code);
	end;

/* Dump <tape_number>.input and carry requests */

	tape_attached = "1"b;
	control_ptr -> backup_control.hold_sw = "1"b;

	call backup_dump_ (control_ptr, code);

	if code ^= 0 then do;
	     if code = error_table_$not_attached then
		call warn (0, "carry_dump", "Tape " || rtrim (new_tape_number) || " is not available.");
	     else call warn (code, "carry_dump", "^/Tape not written.");
	     go to RETURN;
	end;

	tape_attached = "0"b;
	if active_function then return_string = "true";	/* tape written */
/**/
/* Look for errors and build segs to mail. These segs are named Person.Project
   after the requestors and go in either of two directories: mail_to_send for
   sending at this site and mail_to_carry for sending at the target site */

	error_count, mail_count = 0;

	do i = 1 to control_ptr -> backup_control.request_count;

	     path = control_ptr -> backup_control.path (i);
	     type_str = info_ptr -> request_info.type_string (i);
	     sender_id = info_ptr -> request_info.sender (i);
						/* remove instance tag */
	     sender_id = substr (sender_id, 1, length (sender_id) - index (reverse (sender_id), "."));

	     if control_ptr -> backup_control.status_code (i) ^= 0 then do;

		if substr (control_ptr -> backup_control.error_name (i), 1, 13) = "(in subtree) " then do;
		     warn_subtree_sw = "1"b;
		     call convert_status_code_
			(control_ptr -> backup_control.status_code (i), "", err_string);
		     warning_msg = "Omitted some entries in " || control_ptr -> backup_control.path (i);
		     warning_msg = rtrim (warning_msg) || "^/^-";
		     warning_msg = rtrim (warning_msg) || substr (control_ptr -> backup_control.error_name (i), 14);
		     warning_msg = rtrim (warning_msg) || ":^x";
		     warning_msg = rtrim (warning_msg) || err_string;
		     call warn (0, "Warning", rtrim (warning_msg, SP_HT));
		end;
		else do;
		     warn_subtree_sw = "0"b;
		     error_count = error_count + 1;
		     call warn (control_ptr -> backup_control.status_code (i),
			control_ptr -> backup_control.error_name (i),
			control_ptr -> backup_control.path (i));
		end;

/* Mail goes to requestor at this site */

		mail_count = mail_count + 1;
		call ioa_$rsnnl ("vfile_ ^a>mail_to_send>^a -extend",
		     buffer, buffer_len, queue_dir, sender_id);
		call iox_$attach_name ("carry_mail", mail_iocb, buffer, null, code);
		call iox_$open (mail_iocb, 2, "0"b, code);
		if warn_subtree_sw then call ioa_$ioa_switch (mail_iocb, "Warning: " || warning_msg);
		else do;
		     call ioa_$ioa_switch (mail_iocb, "Unable to dump carry request ^a on tape ^a.",
			path, new_tape_number);
		     call convert_status_code_ (control_ptr -> backup_control.status_code (i), "", err_string);
		     call ioa_$ioa_switch (mail_iocb, "^a: ^a",
			control_ptr -> backup_control.error_name (i), err_string);
		end;
	     end;

	     else do;

		if info_ptr -> request_info.notify (i) then do;
		     mail_count = mail_count + 1;
		     call ioa_$rsnnl ("vfile_ ^a>mail_to_send>^a -extend",
			buffer, buffer_len, queue_dir, sender_id);
		     call iox_$attach_name ("carry_mail", mail_iocb, buffer, null, code);
		     call iox_$open (mail_iocb, 2, "0"b, code);
		     call ioa_$ioa_switch (mail_iocb, "Dumped ^a on tape ^a.", path, new_tape_number);
		     call iox_$close (mail_iocb, code);
		     call iox_$detach_iocb (mail_iocb, code);
		end;

/* Notification of loading gets carried and mailed to requestor at target site */

		if i > 1 then do;			/* not <tape_number>.input */
		     call ioa_$rsnnl ("vfile_ ^a>mail_to_carry>^a -extend",
			buffer, buffer_len, queue_dir, sender_id);
		     call iox_$attach_name ("carry_mail", mail_iocb, buffer, null, code);
		     call iox_$open (mail_iocb, 2, "0"b, code);
		     if control_ptr -> backup_control.new_path (i) ^= "" then
			path = control_ptr -> backup_control.new_path (i);
		     call ioa_$ioa_switch (mail_iocb, "^a ^a loaded at ^a from tape ^a.",
			type_str, path, destination, new_tape_number);
		end;

/* Append to <tape_number>.tape_log that this request was dumped */

		new_user_id = info_ptr -> request_info.new_user (i);
		if control_ptr -> backup_control.new_path (i) ^= "" then do;
		     call expand_pathname_ (control_ptr -> backup_control.new_path (i), dn, en, code);
		     call ioa_$ioa_switch (tape_log_iocb,
			"^a ^a  ^a^[ -user ^a^;^s^]^[ -trim^] -new_dir^/^10xMove to directory ^a",
			type_str, control_ptr -> backup_control.path (i), sender_id, new_user_id^="", new_user_id,
			control_ptr -> backup_control.trim_sw (i), dn);
		end;
		else call ioa_$ioa_switch (tape_log_iocb, "^a ^a  ^a^[ -user ^a^;^s^]^[ -trim^]",
		     type_str, path, sender_id, new_user_id ^= "", new_user_id,
		     control_ptr -> backup_control.trim_sw (i));
	     end;

	     if mail_iocb ^= null then do;
		call iox_$close (mail_iocb, code);
		call iox_$detach_iocb (mail_iocb, code);
	     end;
	end;

/* Dump <tape_number>.tape_log and mail_to_carry directory */

	control_ptr -> backup_control.request_count = 2;
	control_ptr -> backup_control.path (1) = tape_log_path;
	control_ptr -> backup_control.new_path (1) = "";
	control_ptr -> backup_control.path (2) = mail_dir_path;
	control_ptr -> backup_control.new_path (2) = "";
	control_ptr -> backup_control.hold_sw = "0"b;

	tape_attached, use_tape_number = "1"b;

	call backup_dump_ (control_ptr, code);

	if code ^= 0 then do;
	     buffer = "carry_dump";
NO_TAPE_LOG:   if active_function then return_string = "false";
	     call warn (code, buffer, "Segment " || rtrim (tape_log_path) || " not dumped.^/Tape is invalid.");
	     go to RETURN;
	end;

	tape_attached = "0"b;
	code = control_ptr -> backup_control.status_code (1);
	if code ^= 0 then do;
	     buffer = control_ptr -> backup_control.error_name (1);
	     go to NO_TAPE_LOG;
	end;

/* Delete all processed requests from queue */

	if ^remake_tape then do i = 1 to id_index;
	     call message_segment_$delete_index (mseg_index, id (i), code);
	end;

	call clean_up;

/* Send mail to requestors */

	if mail_count ^= 0 then do;
	     area_ptr = get_system_free_area_ ();
	     send_mail_info.version = 2;
	     send_mail_info.sent_from = "";
	     unspec (send_mail_info.switches) = "0"b;
	     send_mail_info.always_add = "1"b;
	     call ioa_$rsnnl ("^a>mail_to_send", mail_dir_path, 168, queue_dir);

	     eptr, nptr = null;
	     on condition (cleanup) begin;
		if eptr ^= null then free eptr -> entries in (area);
		if nptr ^= null then free nptr -> star_names in (area);
	     end;

	     call hcs_$star_ (mail_dir_path, "**", 3 /* all */, area_ptr, ecount, eptr, nptr, code);

	     do i = 1 to ecount;
		sender_id = star_names (entries (i).nindex);
		call hcs_$initiate_count (mail_dir_path, sender_id, "", mail_seg_bc, 0, mail_seg_ptr, code);
		if mail_seg_ptr ^= null then do;
		     mail_seg_len = divide (mail_seg_bc, 9, 17, 0);

		     call send_mail_ (sender_id, mail_seg, addr (send_mail_info), code);
		     call send_message_$notify_mail (sender_id, "", code);  /* send notification */
		     call hcs_$terminate_noname (mail_seg_ptr, code);
		end;
	     end;
	     if eptr ^= null then free eptr -> entries in (area);
	     if nptr ^= null then free nptr -> star_names in (area);
	end;

	call ioa_ ("carry_dump: Normal termination.");
	if error_count ^= 0 then call ioa_ ("^d request^[s^] omitted.", error_count, error_count > 1);

	return;
						/*  */
MAKE_BLANK_TAPE:

/* Write a tape containing only <tape_number>.input and no requests */

	call attach_tape_log;			/* write header line in <tape_number>.tape_log */
	call ioa_$ioa_switch (tape_log_iocb, "Segment " || rtrim (tape_log_path) || "  "
	     || rtrim (get_group_id_$tag_star (), ".*"));
	call ioa_$ioa_switch (tape_log_iocb, "No requests submitted.");
	call iox_$close (tape_log_iocb, code);
	call iox_$detach_iocb (tape_log_iocb, code);
	tape_log_iocb = null;

	call ioa_$ioa_switch (input_iocb, "No requests submitted.");
	call iox_$close (input_iocb, code);
	call iox_$detach_iocb (input_iocb, code);
	input_iocb = null;

	call initialize_backup;

	use_tape_number = "1"b;

	control_ptr -> backup_control.request_count = 1;
	control_ptr -> backup_control.path (1) = tape_log_path;
	control_ptr -> backup_control.new_path (1) = "";
	control_ptr -> backup_control.status_code (1) = 0;

	call backup_dump_ (control_ptr, code);

	if code ^= 0 then do;
	     call warn (code, "carry_dump", "Tape " || rtrim (new_tape_number) || " not written.");
	     if active_function then return_string = "false";
	end;
	else if control_ptr -> backup_control.status_code (1) ^= 0 then do;
	     call warn (control_ptr -> backup_control.status_code (1),
		control_ptr -> backup_control.error_name (1),
		"Error dumping " || rtrim (control_ptr -> backup_control.path (1))
		|| "^/Tape " || rtrim (new_tape_number) || " not written.");
	     if active_function then return_string = "false";
	end;
	else do;
	     call ioa_ ("No requests. Tape contains only ^a", tape_log_path);
	     if active_function then return_string = "true";
	end;

	call clean_up;

	return;
						/*  */
carry_tape_entry: entry (tape_label);

/* This entry point, called by backup_dump_, returns carry_dump's tape_number
   argument the first time it is called and "(another)" succeeding times. */

dcl  tape_label char (32);

	if use_tape_number then tape_label = new_tape_number;
	else tape_label = "(another)";
	use_tape_number = "0"b;
	return;
						/*  */
initialize_backup: proc;

/* This internal procedure allocates a control structure to drive backup_dump_ */

	     call get_temp_segments_ ("carry_dump", ptrs, code);
	     if code ^= 0 then do;
		call warn (code, "carry_dump", "Unable to allocate temp segs in process directory.");
		go to RETURN;
	     end;

	     control_ptr = ptrs (1);
	     info_ptr = ptrs (2);

	     control_ptr -> backup_control.version = BACKUP_CONTROL_VERSION_5;
	     control_ptr -> backup_control.tape_entry = carry_tape_entry;
	     unspec (control_ptr -> backup_control.options) = "0"b;
	     control_ptr -> backup_control.debug_sw = "1"b;
	     control_ptr -> backup_control.request_count = 0;

	end initialize_backup;


attach_tape_log: proc;

/* This internal procedure opens a tape log segment for writing and puts in a header line */

	     call ioa_$rsnnl ("^a>^a.tape_log", tape_log_path, (0), queue_dir, new_tape_number);
	     call hcs_$truncate_file (tape_log_path, "", 0, code);
	     call hcs_$set_bc (tape_log_path, "", 0, code);

	     call iox_$attach_name ("carry_tape_log", tape_log_iocb, "vfile_ "||tape_log_path, null, code);
	     if code ^= 0 then do;
		call warn (code, "carry_dump", "Unable to attach ""carry_tape_log"" to " || tape_log_path);
		go to RETURN;
	     end;
	     call iox_$open (tape_log_iocb, 2, "0"b, code);
	     if code ^= 0 then do;
		call warn (code, "carry_dump", "Unable to write " || tape_log_path);
		go to RETURN;
	     end;
	     call iox_$put_chars (tape_log_iocb, addr (header), header_len, code);
	     if code ^= 0 then do;
		call warn (code, "carry_dump", "Unable to write " || tape_log_path);
		go to RETURN;
	     end;

	end attach_tape_log;
						/**/
create_mail_dir: proc (a_name);

dcl a_name char (*);

/* This internal procedure deletes the old mail directory and creates a new one */

	call hcs_$status_minf (queue_dir, a_name, 1, 0, 0, code);
	if code ^= error_table_$noentry then do;
	     dir_acl (1).access_name = cb_info.userid;
	     dir_acl (1).modes = "111"b;
	     call hcs_$add_dir_acl_entries (queue_dir, a_name, addr (dir_acl), 1, code);
	     call hcs_$del_dir_tree (queue_dir, a_name, code);
	     call hcs_$delentry_file (queue_dir, a_name, code);
	end;

	call hcs_$create_branch_ (queue_dir, a_name, addr (cb_info), code);
	if code ^= 0 then do;
	     call ioa_$rsnnl ("^a^[>^]^a", mail_dir_path, 168, queue_dir, queue_dir ^= ">", a_name);
	     call warn (code, "carry_dump", "^/Unable to create directory " || mail_dir_path);
	     go to RETURN;
	end;

end create_mail_dir;
						/*  */
warn:	proc (a_code, a_name, a_string);

/* This internal procedure prints an error message on error_output without signalling
   in the case of an active function. In the case of a command, it calls com_err_.
   We don't want active function error messages to abort exec_com's. */

dcl  a_code fixed bin (35);
dcl (a_name, a_string) char (*);

	     if active_function then do;
		if a_name = "" then a_name = "carry_dump";
		if a_code = 0 then call ioa_$ioa_switch (iox_$error_output, "^a: " || a_string, a_name);
		else do;
		     call convert_status_code_ (a_code, "", err_string);
		     call ioa_$ioa_switch (iox_$error_output, "^a: ^a " || a_string, a_name, err_string);
		end;
	     end;

	     else if a_name = "" then call com_err_$suppress_name (a_code, "carry_dump", a_string);
	     else call com_err_ (a_code, a_name, a_string);

	end warn;


clean_up:	proc;

	     if tape_attached then do;
		call iox_$find_iocb ("bk_output_1", bk_iocb, code);
		call iox_$close (bk_iocb, code);
		call iox_$detach_iocb (bk_iocb, code);
	     end;
	     if input_iocb ^= null then do;
		call iox_$close (input_iocb, code);
		call iox_$detach_iocb (input_iocb, code);
	     end;
	     if tape_log_iocb ^= null then do;
		call iox_$close (tape_log_iocb, code);
		call iox_$detach_iocb (tape_log_iocb, code);
	     end;
	     if control_ptr ^= null then call release_temp_segments_ ("carry_dump", ptrs, code);

	     if mseg_index ^= 0 then call message_segment_$close (mseg_index, code);

	     if id_ptr ^= null then free id in (area);

	end clean_up;


     end carry_dump;
