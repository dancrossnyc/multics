/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2  */
create_daemon_queues:
cdq:
     procedure options (variable);

/* Command for creating the dprint request queues and setting general access to them */
/* Uses iod_tables file to find out what request_types to create queues
   *  for. Already existing queues are left alone.
   *
   *  create_daemon_queues PATH {-control_args}
   *
   *      PATH is the pfull pathname of an iod_tables segment
   *
   *
   *      -dr path
   *	-directory path
   *		the queues will be created in the directory "path".
   *		Defaults to >daemon_dir_dir>io_daemon_dir.
   *		The iod tables iod_tables are used
   *
   *	-reset_access  forces default acl terms if queues already exist.
   *
   * Coded October 1973 by Robert S. Coren
   * Modified by J. Stern, 12/30/74
   * Modified by J. C. Whitmore, 4/78, for max queues per request type.
   * Modified by J. C. Whitmore, 10/78, for version 3 iod_tables format.
   * Modified by Benson I. Margulies for PATHnames
*/


/****^  HISTORY COMMENTS:
  1) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-17,Wallman), install(88-10-28,MR12.2-1199):
     Changed to handle version 5 i/o daemon tables.
                                                   END HISTORY COMMENTS */



	dcl     aim_check_$equal	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_max_authorization_ entry returns (bit (72) aligned);
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     message_segment_$create
				 entry (char (*), char (*), fixed bin (35));
	dcl     message_segment_$ms_acl_add
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     system_info_$access_ceiling
				 entry (bit (72) aligned);


	dcl     system_high		 bit (72) aligned;
	dcl     max_auth		 bit (72) aligned;
	dcl     testing		 bit (1) aligned;
	dcl     code		 fixed bin (35);
	dcl     table_name		 char (32);
	dcl     (dir, table)	 char (256);
	dcl     dir_name		 char (168);
	dcl     i			 fixed bin;
	dcl     j			 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     mseg_name		 char (32);
	dcl     max_queues		 fixed bin;
	dcl     reset_access	 bit (1);
	dcl     (got_pn, got_dr)	 bit (1);

	dcl     AROS		 bit (36) int static options (constant) init ("10111"b);
	dcl     NONE		 bit (36) int static options (constant) init (""b);

	declare Default_io_daemon_dir	 init (">daemon_dir_dir>io_daemon_dir") char (168) int static options (constant);
	declare Default_iod_tables	 init ("iod_tables") char (32) int static options (constant);

	dcl     1 acla		 (4) aligned int static options (constant),
		2 userid		 char (32) init ("IO.SysDaemon.*", "*.SysDaemon.*", "*.*.*", "*.*.*"),
		2 access		 bit (36) init ((4) (1)"111"b),
						/* REW real access for all acl terms */
		2 ex_access	 bit (36) init ("11111"b, (2) (1)"10111"b, "00000"b),
						/* ADROS AROS AROS NULL */
		2 errcode		 fixed bin (35);

	dcl     1 an_acl		 (4) aligned like acla;
						/* automatic version */
	dcl     nacl		 fixed bin;	/* number of acl entries defined above */


	dcl     argptr		 ptr;
	dcl     arglen		 fixed bin;
	dcl     arg		 char (arglen) based (argptr);


	dcl     (
	        error_table_$badopt,
	        error_table_$namedup,
	        error_table_$inconsistent,
	        error_table_$noarg,
	        error_table_$too_many_args
	        )			 fixed bin (35) ext static;

	dcl     myname		 char (20) int static init ("create_daemon_queues");
	dcl     cleanup		 condition;

	dcl     (addr, after, null, ptr, substr)
				 builtin;
%page;

	testing = "0"b;				/* not testing unless "-dir" option specified */
	reset_access = "0"b;			/* do not set access on existing queues */

/* find arguments if any */

	call cu_$arg_count (nargs, code);		/* get number of arguments given */
	if code ^= 0
	then do;
		call com_err_ (code, myname);
		return;				/* We do not make a very useful AF */
	     end;

	table = "";
	dir = "";
	reset_access, got_pn, got_dr = ""b;
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argptr, arglen, (0));	/* guaranteed by the doloop limit */

	     if substr (arg, 1, 1) = "-"
	     then do;				/* control argument */

		     if arg = "-dr" | arg = "-dir" | arg = "-directory"
		     then do;

/* REMOVE -dir SOMEDAY --bim */
			     i = i + 1;		/* look at next arg */
			     if i > nargs
			     then do;
no_dp:
				     call com_err_ (error_table_$noarg, myname, "-directory requires a pathname.")
					;
				     return;
				end;
			     call cu_$arg_ptr (i, argptr, arglen, (0));
						/* we know how many we have */
			     if substr (arg, 1, 1) = "-"
			     then do;
				     call com_err_ (error_table_$noarg, myname,
					"-directory requires a pathname. Control argument ^a was in error.",
					arg);
				     return;
				end;
			     if got_pn
			     then do;
				     call com_err_ (error_table_$inconsistent, myname,
					"-directory may not be given if a iod table pathname is given.");
				     return;
				end;

			     if got_dr
			     then do;
				     call com_err_ (error_table_$inconsistent, myname,
					"-directory may not be supplied twice");
				     return;
				end;
			     got_dr = "1"b;
			     dir = arg;		/* do absolute pathname later */
			     testing = "1"b;	/* test dir specified */
			end;

		     else if arg = "-reset_access"
		     then reset_access = "1"b;	/* set access on existing queues */
		     else do;
			     call com_err_ (error_table_$badopt, myname, arg);
			     return;
			end;
		end;				/* the control arg dept. */
	     else do;				/* a pathname */
		     if got_pn
		     then do;
			     call com_err_ (error_table_$too_many_args, myname,
				"Only one pathname may be supplied.");
			     return;
			end;
		     got_pn = "1"b;
		     table = arg;
		     testing = "1"b;
		end;				/* the pathname */
	end;					/* the control arg loop */


	if got_dr
	then do;
		call absolute_pathname_ (dir, dir_name, code);
		if code ^= 0
		then do;
			call com_err_ (code, myname, "directory pathname ^a.", dir);
			return;
		     end;
		table_name = Default_iod_tables;
	     end;
	else if got_pn
	then do;
		call expand_pathname_ (table, dir_name, table_name, code);
		if code ^= 0
		then do;
			call com_err_ (code, myname, "table pathname ^a.", table);
			return;
		     end;
	     end;
	else do;					/* vanilla case */
		table_name = Default_iod_tables;
		dir_name = Default_io_daemon_dir;
	     end;

/* If we're not testing, make sure caller's max authorization is "system_high". */
/* If it's not, any queues created will not be accessible at all authorizations. */

	if ^testing
	then do;
		max_auth = get_max_authorization_ ();
		call system_info_$access_ceiling (system_high);
		if ^aim_check_$equal (system_high, max_auth)
		then /* max authorization is not system high */
		     call com_err_ (0, myname, "Warning -- Your maximum authorization is not ""system_high"".");
	     end;

/* get a pointer to the iod_tables segment */

	ithp = null ();
	on cleanup
	     begin;
		if ithp ^= null ()
		then call hcs_$terminate_noname (ithp, (0));
	     end;
	call hcs_$initiate (dir_name, table_name, "", (0), (0), ithp, code);
	if ithp = null ()
	then do;
		call com_err_ (code, myname, "^a>^a", dir_name, table_name);
		return;
	     end;

	if iod_tables_hdr.version ^= IODT_VERSION_5
	then do;					/* check version number */
		call com_err_ (0, myname, "Wrong version number for iod_tables.");
		go to finish;
	     end;

/*  now create the queues */

	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);
						/* get q group table ptr */

	do j = 1 to q_group_tab.n_q_groups;

	     qgtep = addr (q_group_tab.entries (j));
	     an_acl = acla;
	     max_queues = qgte.max_queues;		/* get max queues for this request type */
	     if qgte.driver_id = "IO.SysDaemon.*"
	     then do;				/* standard system driver */
		     an_acl (2).ex_access = AROS;	/* let SysDaemons use it like other users */
		     an_acl (3).userid = "*.*.*";	/* this queue is for all users */
		     an_acl (3).ex_access = AROS;	/* give them all access */
		     nacl = 3;			/* say only three entries are defined */
		end;
	     else do;				/* non-standard driver for this queue */
		     an_acl (2).ex_access = NONE;	/* project must request SysDaemon access */
		     an_acl (3).userid = "*." || after (qgte.driver_id, ".");
						/* give access to all on project */
		     an_acl (3).ex_access = AROS;	/* give them all access */
		     nacl = 4;			/* we have four entries now */
		end;

	     do i = 1 to max_queues;
		call ioa_$rsnnl ("^a_^d.ms", mseg_name, arglen, qgte.name, i);
		call message_segment_$create (dir_name, mseg_name, code);

		if code = 0
		then do;				/* created one, set up acl. */
			call ioa_ ("^a created.", mseg_name);
set_access:
			call message_segment_$ms_acl_add (dir_name, mseg_name, addr (an_acl), nacl, code);
			if code ^= 0
			then call com_err_ (code, myname, "Adding extended acl to ^a", mseg_name);
		     end;

		else if code ^= error_table_$namedup
		then call com_err_ (code, myname, "Could not create ^a", mseg_name);
		else if reset_access
		then go to set_access;		/* if queue exists, skip set_acl unless asked */
	     end;
	end;


finish:
	call hcs_$terminate_noname (ithp, code);

	return;
%page;
%include iod_tables_hdr;
%page;
%include q_group_tab;

     end create_daemon_queues;
