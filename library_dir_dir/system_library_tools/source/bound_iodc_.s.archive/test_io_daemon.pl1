/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* command interface for IOD testing */
/* format: style2 */

/* History:
   Coded Fall 1980 Benson I. Margulies 
*/

test_io_daemon:
     procedure options (variable);

	declare iod_overseer_$test_path
				 entry (char (*), char (*));
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	declare com_err_		 entry options (variable);
	declare absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare n_args		 fixed bin;
	declare code		 fixed bin (35);
	declare dir		 char (168);
	declare entryname		 char (32);
	declare got_pn		 bit (1);
	declare got_dr		 bit (1);
	declare current_argument	 fixed bin;
	declare arg_ptr		 pointer;
	declare arg_len		 fixed bin (21);
	declare argument		 char (arg_len) based (arg_ptr);

	declare ME		 char (14) init ("test_io_daemon") int static options (constant);
	declare Default_entryname	 char (32) init ("iod_tables") int static options (constant);

	declare (
	        error_table_$noarg,
	        error_table_$badopt,
	        error_table_$too_many_args,
	        error_table_$inconsistent
	        )			 fixed bin (35) ext static;

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;
	if n_args = 0
	then do;
		call com_err_ (0, ME, "Usage: test_io_daemon {IOD_TABLE_PATH} {-directory TEST_DIR_PATH}.");
		return;
	     end;
	got_pn, got_dr = ""b;
	current_argument = 0;
	do while (current_argument < n_args);
	     current_argument = current_argument + 1;
	     call cu_$arg_ptr (current_argument, arg_ptr, arg_len, (0));
						/* we know how many arguments */
	     if index (argument, "-") ^= 1
	     then do;				/* noncontrol */
		     if got_pn
		     then do;
			     call com_err_ (error_table_$too_many_args, ME,
				"Only one pathname may be given, ^a was in error.", argument);
			     return;
			end;
		     if got_dr
		     then goto pn_and_dr_given;

		     call expand_pathname_ (argument, dir, entryname, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, ME, "^a.", argument);
			     return;
			end;
		     got_pn = "1"b;
		end;				/* only one possible noncontrol */
	     else do;				/* control argument */
		     if argument = "-directory" | argument = "-dr"
		     then do;
			     if got_dr
			     then do;
				     call com_err_ (error_table_$inconsistent, ME,
					"-directory may only be given once.");
				     return;
				end;
			     if got_pn
			     then do;
pn_and_dr_given:
				     call com_err_ (error_table_$inconsistent, ME,
					"-directory may not be given with a pathname.");
				     return;
				end;

			     if current_argument = n_args
			     then do;
				     call com_err_ (error_table_$noarg, ME,
					"A directory pathname must be given with ^a.", argument);
				     return;
				end;
			     current_argument = current_argument + 1;
			     call cu_$arg_ptr (current_argument, arg_ptr, arg_len, (0));
			     if substr (argument, 1, 1) = "-"
			     then do;		/* no path */
				     call com_err_ (error_table_$noarg, ME,
					"A pathname must be given following -directory. Control argument ^a was in error."
					, argument);
				     return;
				end;
			     call absolute_pathname_ (argument, dir, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, ME, "^a", argument);
				     return;
				end;
			     entryname = Default_entryname;
			     got_dr = "1"b;
			end;			/* processing -dir */
		     else do;			/* bad control arg */
			     call com_err_ (error_table_$badopt, ME, "Control argument ^a not recognized.", argument);
			     return;
			end;
		end;				/* control args */
	end;					/* arg loop */
	call iod_overseer_$test_path (dir, entryname);
	return;
     end test_io_daemon;
