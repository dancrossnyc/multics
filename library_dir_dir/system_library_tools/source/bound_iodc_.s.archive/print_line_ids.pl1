/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


print_line_ids: prt: proc;

/* This command prints a list of line ids handled by the
   IO daemon as determined by inspecting the "iod_working_tables"
   segment.  For each line id, the associated channel is printed.
*/

/* Written by J. C. Whitmore, 10/78, modeled after print_request_types.pl1 */
/* Modified by E. N. Kittlitz, 6/81, to use version_4 iod_tables_hdr */



/****^  HISTORY COMMENTS:
  1) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-18,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to handle version 5 I/O daemon tables.  Also displays comments
     store in the line table entry.  Display columns are based on length of
     longest entry for each column.
                                                   END HISTORY COMMENTS */


	dcl     argp		 ptr;		/* ptr to arg */
	dcl     arglen		 fixed bin;	/* length of arg */
	dcl     arg		 char (arglen) based (argp); /* command argument */

	dcl     bfsw		 bit (1) aligned;	/* ON for brief option */
	dcl     sysdir		 char (168) aligned;/* directory containing iod_working_tables */
	dcl     ent_name		 char (32) aligned;

	dcl     i			 fixed bin;
	dcl     code		 fixed bin (35);	/* error code */
	dcl     nargs		 fixed bin;
	dcl     (max_chan_id, max_line_id) fixed bin;

	dcl     whoami		 char (19) aligned int static options (constant) init ("print_line_ids");

	dcl     error_table_$badopt	 fixed bin (35) ext;

	dcl     (addr, null, length, ptr, rtrim, substr) builtin;

	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     expand_pathname_	 entry (char (*), char (*) aligned, char (*) aligned, fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*) aligned, char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     hcs_$terminate_noname	 entry (ptr, fixed bin (35));
%page;

/* initialize control argument defaults */

	bfsw = "0"b;
	sysdir = ">daemon_dir_dir>io_daemon_dir";

/* look for arguments */

	call cu_$arg_count (nargs);

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, arglen, code);
	     if code ^= 0 then go to noarg;
	     if arg = "-bf" | arg = "-brief" then bfsw = "1"b;
	     else if arg = "-dir" | arg = "-directory" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then do;
noarg:			     call com_err_ (code, whoami);
			     return;
			end;
		     call expand_pathname_ (arg, sysdir, ent_name, code); /* take apart and put it back together */
		     if code ^= 0 then do;
			     call com_err_ (code, whoami, arg);
			     return;
			end;
		     if sysdir = ">" then sysdir = ">" || ent_name;
		     else sysdir = rtrim (sysdir) || ">" || ent_name;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, whoami, arg);
		     return;
		end;
	end;

/* get a pointer to the line table */

	call hcs_$initiate (sysdir, "iod_working_tables", "", 0, 1, ithp, code);
	if ithp = null then do;
		call com_err_ (code, whoami, "^a>iod_working_tables", sysdir);
		return;
	     end;

	if iod_tables_hdr.version ^= IODT_VERSION_5 then do;
		call com_err_ (0, whoami, "Wrong version number for iod_working_tables.");
		return;
	     end;

	ltp = ptr (ithp, iod_tables_hdr.line_tab_offset);
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);

/* first find the lengths for the longest line_id & chan_id */
	max_line_id = 7;
	max_chan_id = 7;
	do i = 1 to line_tab.n_lines;
	     ltep = addr (line_tab.entries (i));
	     if length (rtrim (lte.line_id)) > max_line_id then
		max_line_id = length (rtrim (lte.line_id));
	     if length (rtrim (lte.chan_id)) > max_chan_id then
		max_chan_id = length (rtrim (lte.chan_id));
	end;

/* now print the table */
	do i = 1 to line_tab.n_lines;
	     ltep = addr (line_tab.entries (i));

	     if i = 1 then
		if ^bfsw then call ioa_ ("^/Line ID^vxChannel^vxComment^/",
			max_line_id - 7 + 2, max_chan_id - 7 + 2);

	     call ioa_ ("^va  ^va  ^a", max_line_id, lte.line_id,
		max_chan_id, lte.chan_id,
		substr (text_strings.chars, lte.comment.first_char, lte.comment.total_chars));
	end;

	if line_tab.n_lines > 0 then call ioa_ ("");	/* throw in an extra blank line */
	else call ioa_ ("No line ids specified in iod_working_tables.");

	call hcs_$terminate_noname (ithp, code);
%page;
%include iod_line_tab;
%include iod_tables_hdr;

     end print_line_ids;
