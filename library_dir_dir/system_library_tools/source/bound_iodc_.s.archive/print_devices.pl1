/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

print_devices: proc;

/* This command prints a list of devices for each request type
   handled by the IO daemon as determined by inspecting the
   iod_working_tables segment.  If more than one device class
   is defined for a request type, then the device classes
   are treated separately.  For each request type, the
   associated driver access name and authorization is
   printed.  An asterisk is placed immediately before a device
   name if the corresponding request type (device class) is
   the default for the device.
*/

/* Written by J. Stern, 5/9/75 */
/* Modified by J. C. Whitmore, 4/78, for new iod_tables format */
/* Modified by J. C. Whitmore, 10/78, to use version 3 iod_tables */
/* Modified by E. N. Kittlitz, 6/81, to use version 4 iod_tables */


/****^  HISTORY COMMENTS:
  1) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-18,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to handle version 5 I/O daemon tables.  Also displays comments
     store in the major and minor device entries.  Display columns are based
     on length of longest entry for each column.
                                                   END HISTORY COMMENTS */


	dcl     argp		 ptr;		/* ptr to arg */
	dcl     arglen		 fixed bin;	/* length of arg */
	dcl     arg		 char (arglen) based (argp); /* command argument */

	dcl     bfsw		 bit (1) aligned;	/* ON for brief option */
	dcl     rqt_found		 bit (1) aligned;	/* ON if desired request type found */
	dcl     an_found		 bit (1) aligned;	/* ON if desired access name found */
	dcl     select		 bit (1) aligned;	/* ON if selecting subset of request types */
	dcl     match		 bit (1) aligned;	/* ON if request type or access name matched */
	dcl     accname		 char (32) aligned; /* access name */
	dcl     req_type		 char (32) aligned; /* request type name */
	dcl     rqt_name		 char (32) aligned; /* request type name */
	dcl     dev_name		 char (32) aligned; /* device name */
	dcl     sysdir		 char (168) aligned;/* directory containing iod_working_tables */
	dcl     ent_name		 char (32) aligned;

	dcl     (i, j, k)		 fixed bin;
	dcl     did_len		 fixed bin;	/* driver id length */
	dcl     code		 fixed bin (35);	/* error code */
	dcl     star		 char (1) aligned;	/* to indicate default request type for device */
	dcl     count		 fixed bin;	/* count of queue groups printed */
	dcl     nargs		 fixed bin;

	dcl     system_high		 bit (72) aligned;	/* system high access authorization */
	dcl     auth_string		 char (170);	/* authorization string */

	dcl     whoami		 char (13) aligned int static init ("print_devices");

	dcl     error_table_$badopt	 fixed bin (35) ext;

	dcl     (addr, substr, ptr, null, before, rtrim, length) builtin;

	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     com_err_		 entry options (variable);
	dcl     expand_pathname_	 entry (char (*), char (*) aligned, char (*) aligned, fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*) aligned, char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	dcl     convert_authorization_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     system_info_$access_ceiling entry (bit (72) aligned);
%page;

/* initialize control argument defaults */

	bfsw = "0"b;
	an_found, rqt_found = "1"b;
	accname, req_type = "";
	sysdir = ">daemon_dir_dir>io_daemon_dir";

/* look for arguments */

	call cu_$arg_count (nargs);

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, arglen, code);
	     if code ^= 0 then go to noarg;
	     if arg = "-bf" | arg = "-brief" then bfsw = "1"b;
	     else if arg = "-an" | arg = "-access_name" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then do;
noarg:			     call com_err_ (code, whoami);
			     return;
			end;
		     accname = arg;
		     an_found = "0"b;
		end;
	     else if arg = "-rqt" | arg = "-request_type" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then go to noarg;
		     req_type = arg;
		     rqt_found = "0"b;
		end;
	     else if arg = "-dir" | arg = "-directory" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then go to noarg;
		     call expand_pathname_ (arg, sysdir, ent_name, code); /* take apart and put it back together */
		     if code ^= 0 then do;
			     call com_err_ (code, whoami, arg);
			     return;
			end;
		     if sysdir = ">" then sysdir = ">" || ent_name;
		     else sysdir = rtrim (sysdir) || ">" || ent_name;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, whoami, arg);
		     return;
		end;
	end;

	select = ^(an_found & rqt_found);

/* get a pointer to the iod_working_tables */

	call hcs_$initiate (sysdir, "iod_working_tables", "", 0, 1, ithp, code);
	if ithp = null then do;
		call com_err_ (code, whoami, "^a>iod_working_tables", sysdir);
		return;
	     end;

	if iod_tables_hdr.version ^= IODT_VERSION_5 then do;
		call com_err_ (0, whoami, "Wrong version number for iod_working_tables.");
		return;
	     end;

	idtp = ptr (ithp, iod_tables_hdr.device_tab_offset);
	mdtp = ptr (ithp, iod_tables_hdr.minor_device_tab_offset);
	dctp = ptr (ithp, iod_tables_hdr.dev_class_tab_offset);
	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);

/* print the table */

	call system_info_$access_ceiling (system_high);
	count = 0;

	do i = 1 to q_group_tab.n_q_groups;
	     qgtep = addr (q_group_tab.entries (i));
	     did_len = length (before (qgte.driver_id, ".*")); /* compiler ensures it ends with ".*" */

	     if select then do;
		     match = "1"b;
		     if req_type ^= "" then
			if req_type = qgte.name then rqt_found = "1"b;
			else match = "0"b;
		     if accname ^= "" then
			if accname = substr (qgte.driver_id, 1, did_len) then an_found = "1"b;
			else match = "0"b;
		     if ^match then go to next;
		end;

	     do j = qgte.first_dev_class to qgte.last_dev_class;
		dctep = addr (dev_class_tab.entries (j));

		do k = 1 to minor_device_tab.n_minor;
		     count = count + 1;
		     if substr (dcte.device_list, k, 1) then do;
			     mdtep = addr (minor_device_tab.entries (k));
			     idtep = addr (iod_device_tab.entries (mdte.major_index));
			     dev_name = idte.dev_id;
			     if idte.last_minor > idte.first_minor
				| dev_name ^= mdte.dev_id then
				dev_name = rtrim (dev_name) || "." || mdte.dev_id;
			     if mdte.default_dev_class = j then star = "*";
			     else star = " ";

			     if count = 1 then
				if ^bfsw then call ioa_ ("^/  Device^-^-Request type^-Access name^/");

			     if substr (dcte.device_list, 1, k - 1) = ""b then do;
				     rqt_name = qgte.name;
				     if qgte.last_dev_class > qgte.first_dev_class
					| rqt_name ^= dcte.id then
					rqt_name = rtrim (rqt_name) || "." || dcte.id;

				     auth_string = "";
				     call convert_authorization_$to_string_short (dcte.max_access, auth_string, code);
				     if auth_string ^= "" then
					if dcte.max_access = system_high then auth_string = "system_high";

				     call ioa_ ("^1a ^18a^20a^20a^a", star, dev_name, rqt_name,
					substr (qgte.driver_id, 1, did_len), auth_string);
				end;
			     else call ioa_ ("^1a ^a", star, dev_name);
			end;
		end;
	     end;
next:	end;

	if ^rqt_found then call com_err_ (0, whoami, "Request type not found: ^a", req_type);
	if ^an_found then call com_err_ (0, whoami, "Access name not found: ^a", accname);
	if rqt_found & an_found then
	     if count = 0 then call com_err_ (0, whoami, "No devices.");
	     else call ioa_ ("");			/* throw in an extra blank line */

	call hcs_$terminate_noname (ithp, code);
%page; %include device_class;
%page; %include iod_device_tab;
%page; %include iod_tables_hdr;
%page; %include q_group_tab;

     end print_devices;
