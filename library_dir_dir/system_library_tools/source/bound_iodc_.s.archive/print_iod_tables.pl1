/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

print_iod_tables: piodt: proc;


/* This command decodes and prints the contents of an object
   segment produced by the iod_tables_compiler.  The format
   of the printed output corresponds exactly to the source
   language accepted by iod_tables_compiler.  Thus, if output
   is directed to a file, the resulting file can be compiled.
*/

/* Written by J. Stern, 1/31/75 */
/* Modified by J. Stern, 12/9/75 */
/* Modified by J. C. Whitmore, April 1978, for new iodt version and keywords. */
/* Modified by J. C. Whitmore, 10/78, for version 3 and line tables */
/* Modified by E. N. Kittlitz 6/81, for rate-structures */


/****^  HISTORY COMMENTS:
  1) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to handle version 5 I/O daemon tables.  This includes the
     addition of the forms table entries.
  2) change(89-09-18,Brunelle), approve(89-09-18,MCR8129),
     audit(89-09-29,Beattie), install(89-10-03,MR12.3-1083):
     Correct display of line_charge and page_charge to that it is compatible
     with the iod_tables_compiler.  Also correct the following unreported
     problems: 1) outputting forms_table instead of forms_info in each forms
     specification in device and request type; 2) add missing size value for
     holes type specifications.
                                                   END HISTORY COMMENTS */


/* External Procedures & Variables */

dcl  com_err_ entry () options (variable);
dcl  convert_authorization_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  error_table_$badarg fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  ioa_$rsnpnnl entry () options (variable);
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  system_info_$access_ceiling entry (bit (72) aligned);

dcl  (addr, divide, hbound, index, length, null, ptr, rank, rtrim, search, substr) builtin;

dcl  cleanup condition;

/* Internal Static */

dcl  NO_ATTACH_TYPE fixed bin int static options (constant) init (-1);
dcl  QUOTE_SPACE_HTAB char (3) int static options (constant) init (""" 	");
dcl  whoami char (16) aligned int static init ("print_iod_tables");

/* Internal Automatic */

dcl  (i, j, k, group) fixed bin;			/* loop variables */
dcl  arg char (arglen) based (argp);			/* command argument */
dcl  argcount fixed bin;
dcl  arglen fixed bin (21);				/* length of arg */
dcl  argp ptr;					/* ptr to arg */
dcl  brief_mode bit (1);
dcl  code fixed bin (35);				/* error code */
dcl  date char (24);				/* the date in ascii */
dcl  dir char (168);				/* directory pathname */
dcl  ent char (32);					/* entry name */
dcl  keyword char (20);				/* holds a keyword */
dcl  string char (128) var;
dcl  text_strings_array (text_strings.length) char (1) unaligned based (text_strings_array_ptr);
dcl  text_strings_array_ptr ptr;
%page;

	brief_mode = "1"b;				/* start in brief mode */
	call cu_$arg_count (argcount, code);
	call cu_$arg_ptr (1, argp, arglen, code);	/* get pathname arg */
	if code ^= 0 then do;
	     call com_err_ (error_table_$noarg, whoami);
	     return;
	end;

	call expand_pathname_ (arg, dir, ent, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami, arg);
	     return;
	end;

	ithp = null;
	on cleanup go to finish;

	call hcs_$initiate (dir, ent, "", 0, 0, ithp, code); /* get segment ptr */
	if ithp = null then do;
	     call com_err_ (code, whoami, "^a>^a", dir, ent);
	     return;
	end;

	if iod_tables_hdr.version ^= IODT_VERSION_5 then do;
	     call com_err_ (0, whoami, "Wrong version number for ^a.", ent);
	     go to finish;
	end;

	call date_time_ (date_time_compiled, date);	/* keep compilation date handy */

	do i = 2 to argcount;
	     call cu_$arg_ptr (i, argp, arglen, code);
	     if arg = "-brief" | arg = "-bf" then
		brief_mode = "1"b;
	     else if arg = "-long" | arg = "-lg" then
		brief_mode = "0"b;
	     else do;
		call com_err_ (error_table_$badarg, whoami, "Argument (^a).", arg);
		go to finish;
	     end;
	end;

/* start with a little background information */
	call ioa_ ("^//* Listing of segment ^a>^a */
/* compiled on:  ^a */
/* object segment version number:  ^a */",
	     dir, ent, date, iod_tables_hdr.version);

/* Global parameters are next */

	call ioa_ ("^2//* Global parameters */");
	call ioa_ ("^/Time:^-^-^d;", divide (grace_time, 60000000, 35, 0));
	call ioa_ ("^/Max_queues:^-^d;", iod_tables_hdr.max_queues);

/* get ptrs to the various tables */

	ltp = ptr (ithp, iod_tables_hdr.line_tab_offset);
	idtp = ptr (ithp, iod_tables_hdr.device_tab_offset);
	mdtp = ptr (ithp, iod_tables_hdr.minor_device_tab_offset);
	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);
	dctp = ptr (ithp, iod_tables_hdr.dev_class_tab_offset);
	ifitp = ptr (ithp, iod_tables_hdr.forms_info_tab_offset);
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);
	text_strings_array_ptr = addr (text_strings.chars);
%page;

	if line_tab.n_lines > 0 then			/* if we have line descriptions */
	     call print_line_table_entries;		/* then print them */

	call print_device_entries;			/* print the device descriptions */

	call print_request_type_entries;		/* print the request type descriptions */

	if iod_forms_info_tab.n_groups > 0 then		/* if we have forms data */
	     call print_forms_info;			/* then print it */

	call ioa_ ("^2/End;");

finish:	if ithp ^= null then
	     call hcs_$terminate_noname (ithp, code);
	return;
%page;
print_line_table_entries: proc;

	call ioa_ ("^2//* Lines */");

	do i = 1 to line_tab.n_lines;
	     ltep = addr (line_tab.entries (i));
	     call ioa_ ("^/Line:^2-^a;", lte.line_id);
	     if lte.comment.total_chars > 0 then
		call ioa_ ("  comment:^-^a;", display_string (lte.comment, "0"b, "0"b));
	     call ioa_ ("  channel:^-^a;", lte.chan_id);	/* ZZZ */
	     call ioa_ ("  att_desc:^-^a;", requote_string_ (extract_string (lte.att_desc)));
	     do k = 1 to iod_device_tab.n_devices;
		if substr (lte.maj_dev_list, k, 1) then do;
		     idtep = addr (iod_device_tab.entries (k));
		     call ioa_ ("  device:^2-^a;", idte.dev_id);
		end;
	     end;
	end;

     end print_line_table_entries;
%page;
print_device_entries: proc;

	call ioa_ ("^2//* Devices */");

	do i = 1 to iod_device_tab.n_devices;
	     idtep = addr (iod_device_tab.entries (i));
	     call ioa_ ("^/Device:^-^-^a;", idte.dev_id);
	     if idte.comment.total_chars > 0 then
		call ioa_ ("  comment:^-^a;", display_string (idte.comment, "0"b, "0"b));
	     call ioa_ ("  driver_module:^-^a;", display_string (idte.driver_module, "0"b, "0"b)); /* ZZZ */
	     if idte.args.total_chars ^= 0 then
		call ioa_ ("  args:^-^-^a;", display_string (idte.args, "0"b, "1"b));

	     if idte.attach_type ^= NO_ATTACH_TYPE then do;
		if idte.attach_type = ATTACH_TYPE_IOM then
		     keyword = "prph";
		else if idte.attach_type = ATTACH_TYPE_TTY then
		     keyword = "line";
		else if idte.attach_type = ATTACH_TYPE_DIAL then
		     keyword = "dial_id";
		else if idte.attach_type = ATTACH_TYPE_VARIABLE_LINE then
		     keyword = "line";
		call ioa_ ("  ^a:^2-^a;", keyword, idte.attach_name);
	     end;

	     if idte.ctl_attach_type ^= NO_ATTACH_TYPE then do;
		if idte.ctl_attach_type = CTL_ATTACH_TYPE_TTY then
		     keyword = "ctl_line";
		else if idte.ctl_attach_type = CTL_ATTACH_TYPE_DIAL then
		     keyword = "ctl_dial_id";
		else if idte.ctl_attach_type = CTL_ATTACH_TYPE_MC then
		     keyword = "ctl_source";
		call ioa_ ("  ^a:^-^a;", keyword, idte.ctl_attach_name);
	     end;

	     if idte.head_sheet.total_chars ^= 0 then
		call ioa_ ("  head_sheet:^-^a;", display_string (idte.head_sheet, "0"b, "0"b));
	     if idte.tail_sheet.total_chars ^= 0 then
		call ioa_ ("  tail_sheet:^-^a;", display_string (idte.tail_sheet, "0"b, "0"b));
	     if idte.paper_type > 0 then do;
		if idte.paper_type = PAPER_TYPE_SINGLE then
		     keyword = "single";
		else keyword = "continuous";
		call ioa_ ("  paper_type:^-^a;", keyword);
	     end;
	     if idte.forms_table.total_chars ^= 0 then
		call ioa_ ("  forms_info:^-^a;", extract_string (idte.forms_table));
	     if idte.forms_validation.total_chars ^= 0 then
		call ioa_ ("  forms_validation:^-^a;", extract_string (idte.forms_validation));
	     if idte.font_dir.total_chars ^= 0 then
		call ioa_ ("  font_dir:^-^a;", extract_string (idte.font_dir));
	     do j = idte.first_minor to idte.last_minor;
		mdtep = addr (minor_device_tab.entries (j));
		if idte.last_minor > idte.first_minor
		     | mdte.dev_id ^= idte.dev_id then
		     call ioa_ ("^/ minor_device:^-^a;", mdte.dev_id);
		if mdte.comment.total_chars > 0 then
		     call ioa_ ("  comment:^-^a;", display_string (mdte.comment, "0"b, "0"b));
		if mdte.args.total_chars ^= 0 then
		     call ioa_ ("  minor_args:^-^a;", display_string (mdte.args, "0"b, "1"b));
		if mdte.default_form.total_chars ^= 0 then
		     call ioa_ ("  default_form:^-^a;", display_string (mdte.default_form, "0"b, "0"b));
		if mdte.default_dev_class ^= 0 then do;
		     dctep = addr (dev_class_tab.entries (mdte.default_dev_class));
		     qgtep = addr (q_group_tab.entries (dcte.qgte_index));
		     if qgte.last_dev_class > qgte.first_dev_class
			| dcte.id ^= qgte.name
			| dcte.min_banner ^= ""b then
			call ioa_ ("  default_type:^-^a;", rtrim (qgte.name) || "." || rtrim (dcte.id));
		     else call ioa_ ("  default_type:^-^a;", qgte.name);
		end;
	     end;
	end;
     end print_device_entries;
%page;
print_request_type_entries: proc;

	call ioa_ ("^2//* Request types */");

	do i = 1 to q_group_tab.n_q_groups;
	     qgtep = addr (q_group_tab.entries (i));
	     call ioa_ ("^/Request_type:^-^a;", qgte.name);
	     if qgte.comment.total_chars > 0 then
		call ioa_ ("  comment:^-^a;", display_string (qgte.comment, "0"b, "0"b));
	     call ioa_ ("  generic_type:^-^a;", qgte.generic_type); /* ZZZ */
	     j = length (rtrim (qgte.driver_id)) - 2;	/* drop the ".*" put there by iodtc */
	     call ioa_ ("  driver_userid:^-^a;", substr (qgte.driver_id, 1, j));
	     call ioa_ ("  accounting:^-^a;", display_string (qgte.accounting, "0"b, "0"b));

	     if qgte.rqti_seg_name ^= "" then
		call ioa_ ("  rqti_seg:^-^a;", qgte.rqti_seg_name);

	     if qgte.forms_validation.total_chars ^= 0 then
		call ioa_ ("  forms_validation:^-^a;", display_string (qgte.forms_validation, "0"b, "0"b));

	     if qgte.font_dir.total_chars ^= 0 then
		call ioa_ ("  font_dir:^-^a;", display_string (qgte.font_dir, "0"b, "0"b));

	     if qgte.forms_table.total_chars ^= 0 then
		call ioa_ ("  forms_info:^-^a;", display_string (qgte.forms_table, "0"b, "0"b));

	     if qgte.default_form.total_chars ^= 0 then
		call ioa_ ("  default_form:^-^a;", display_string (qgte.default_form, "0"b, "0"b));

	     if qgte.max_queues ^= iod_tables_hdr.max_queues then
		call ioa_ ("  max_queues:^-^d;", qgte.max_queues);

	     call ioa_ ("  default_queue:^-^d;", qgte.default_queue);

	     if qgte.line_charge.queue (1) ^= "" then do; /* if not default charges, print price names */
		string = "";
		do k = 1 to qgte.max_queues;
		     string = string || rtrim (qgte.line_charge.queue (k)) || ",";
		end;
		k = length (string) - 1;		/* omit the last comma-space */
		call ioa_ ("  line_charge:^-^a;", substr (string, 1, k));
	     end;
	     if qgte.page_charge.queue (1) ^= "" then do; /* if not default charges, print price names */
		string = "";
		do k = 1 to qgte.max_queues;
		     string = string || rtrim (qgte.page_charge.queue (k)) || ",";
		end;
		k = length (string) - 1;
		call ioa_ ("  page_charge:^-^a;", substr (string, 1, k));
	     end;

	     do j = qgte.first_dev_class to qgte.last_dev_class;
		dctep = addr (dev_class_tab.entries (j));
		if qgte.last_dev_class > qgte.first_dev_class
		     | dcte.id ^= qgte.name then
		     call ioa_ (" device_class:^-^a;", dcte.id);
		if dcte.max_access | dcte.min_access | dcte.min_banner then do; /* don't bother if all zero */
		     call ioa_ ("  min_access_class:^-^a;", get_access_class_string (dcte.min_access));
		     call ioa_ ("  max_access_class:^-^a;", get_access_class_string (dcte.max_access));
		     call ioa_ ("  min_banner:^-^a;", get_access_class_string (dcte.min_banner));
		end;

		do k = 1 to minor_device_tab.n_minor;
		     if substr (dcte.device_list, k, 1) then do;
			mdtep = addr (minor_device_tab.entries (k));
			idtep = addr (iod_device_tab.entries (mdte.major_index));
			if idte.last_minor > idte.first_minor
			     | mdte.dev_id ^= idte.dev_id then
			     call ioa_ ("  device:^-^-^a;", rtrim (idte.dev_id) || "." || rtrim (mdte.dev_id));
			else call ioa_ ("  device:^-^-^a;", idte.dev_id);
		     end;
		end;
	     end;
	end;
     end print_request_type_entries;
%page;
print_forms_info: proc;

	call ioa_ ("^2//* Forms Information */");

/* process one group at a time */
	do group = 1 to iod_forms_info_tab.n_groups;
	     call ioa_ ("^/Forms_table:^-^a;", iod_forms_info_tab (group).name);
	     if iod_forms_info_tab (group).comment.total_chars ^= 0 then
		call ioa_ ("  comment:^-^a;", display_string (iod_forms_info_tab (group).comment, "0"b, "1"b));

/* set up ptr to 1st element for this group */
	     fep = addr (iod_forms_info_tab.element_data_block (iod_forms_info_tab (group).first_element_index));

element_display_loop:
	     string = extract_string (element_common.names (1));
	     if element_common.n_names > 1 then do;
		do j = 2 to element_common.n_names;
		     string = string || ",";
		     string = string || extract_string (element_common.names (j));
		end;
	     end;
	     call ioa_ ("^/  name:^2-^a;", output_the_string ((string)));

	     if element_common.comment.total_chars ^= 0 then
		call ioa_ ("  comment:^-^a;", display_string (element_common.comment, "0"b, "1"b));

	     if element_common.type = TYPE_USES then do;	/* uses */
		string = "";
		do j = 1 to uses_element.n_indices;
		     if j ^= 1 then
			string = string || ",";
		     string = string || extract_string (uses_element.name (j));
		end;
		call ioa_ ("  uses:^2-^a;", string);
	     end;
	     else do;
		call ioa_ ("  type:^2-^a;",
		     FORMS_TYPE_STRINGS (element_common.type));
		if element_common.type = TYPE_SPECIAL then do;
		     call ioa_ ("  string:^2-^a;", display_string (special_element.special_string, "0"b, "0"b));
		end;
		else if element_common.type = TYPE_FONT_NAME
		     | element_common.type = TYPE_PREAMBLE
		     | element_common.type = TYPE_POSTAMBLE then do;
		     if orientation_element.escape_string.total_chars ^= 0 then
			call ioa_ ("  string:^2-^a;", display_string (orientation_element.escape_string, "1"b, "0"b));
		end;
		else if element_common.type = TYPE_ORIENTATION
		     | element_common.type = TYPE_HOLES
		     | element_common.type = TYPE_FONT_DESC
		     | element_common.type = TYPE_LINE_DESC then do;
		     if element_common.type = TYPE_ORIENTATION
			| element_common.type = TYPE_HOLES then do;
			call display_forms_size (orientation_element.height, "page_height",
			     orientation_element.factors (1));
			call display_forms_size (orientation_element.width, "page_width",
			     orientation_element.factors (2));
		     end;
		     else if element_common.type = TYPE_FONT_DESC then do;
			call display_forms_size (orientation_element.height, "char_height",
			     orientation_element.factors (1));
			call display_forms_size (orientation_element.width, "char_width",
			     orientation_element.factors (2));
		     end;
		     else if element_common.type = TYPE_LINE_DESC then do;
			call display_forms_size (orientation_element.height, "line_height",
			     orientation_element.factors (1));
			call display_forms_size (orientation_element.width, "line_width",
			     orientation_element.factors (2));
		     end;
		     if orientation_element.escape_string.total_chars ^= 0 then
			call ioa_ ("  string:^2-^a;", display_string (orientation_element.escape_string, "1"b, "0"b));
		end;
	     end;
	     if element_common.next_element_index ^= -1 then do;
		fep = addr (iod_forms_info_tab.element_data_block (element_common.next_element_index));
		go to element_display_loop;
	     end;
	end;
     end print_forms_info;
%page;

extract_string: proc (target_offset) returns (char (*));

dcl  1 target_offset like text_offset;

	if target_offset.total_chars = 0 then
	     return ("");
	else return (substr (text_strings.chars, target_offset.first_char, target_offset.total_chars));

     end extract_string;


get_access_class_string: proc (access_class) returns (char (200) aligned);

/* procedure which takes a binary access class and returns an ascii access class string. */

dcl  access_class bit (72) aligned;			/* binary access class */
dcl  ac_string char (200);				/* string representation of above */
dcl  system_high bit (72) aligned;			/* access class for system_high */
dcl  1 dblword aligned based (addr (access_class)),	/* for error message */
       2 word1 fixed bin (35),
       2 word2 fixed bin (35);

	call convert_authorization_$to_string_short (access_class, ac_string, code);
	if code ^= 0 then
	     call com_err_ (code, whoami, "Access class = ^w ^w", word1, word2);
	else if ac_string = "" then
	     ac_string = "system_low";

	if length (rtrim (ac_string)) > 30 then do;	/* if long, check for system_high */
	     call system_info_$access_ceiling (system_high); /* get binary ceiling */
	     if access_class = system_high then
		ac_string = "system_high";		/* this is cleaner */
	end;

	return (ac_string);

     end get_access_class_string;
%page;

display_forms_size: proc (item, item_title, factor);

dcl  item float bin unaligned;
dcl  item_title char (*);
dcl  factor fixed bin unaligned;
dcl  temp_string char (10) varying;

	if item = -1 then return;
	if item = 0 then return;
	if factor ^= FACTOR_LPI then
	     call ioa_$rsnpnnl ("^.2f", temp_string, (0), item / SIZE_FACTORS (factor));
	else call ioa_$rsnpnnl ("^.2f", temp_string, (0), SIZE_FACTORS (factor) / item);

	temp_string = rtrim (temp_string, "0");
	temp_string = rtrim (temp_string, ".");
	call ioa_ ("  ^a:^-^a^[in^;cm^;pt^;lpi^];",
	     item_title, temp_string, factor);

     end display_forms_size;

output_the_string: proc (string_to_check) returns (char (*));

dcl  string_to_check char (*);
	if index (rtrim (string_to_check), " ") = 0 then
	     return (rtrim (string_to_check));
	else return (requote_string_ (rtrim (string_to_check)));
     end output_the_string;
%page;
display_string: proc (string_data, special_process, force_requote) returns (char (*));

dcl  special_process bit (1);
dcl  force_requote bit (1);
dcl  1 string_data unaligned like text_offset;

dcl  input_string char (input_string_len) based (input_string_ptr);
dcl  input_string_len fixed bin;
dcl  input_string_ptr ptr;

dcl  return_string char (1024) varying;

dcl  (i, j) fixed bin;

	return_string = "";
	input_string_ptr = addr (text_strings_array (string_data.first_char));
	input_string_len = string_data.total_chars;
	if ^special_process then do;
	     if search (input_string, QUOTE_SPACE_HTAB) ^= 0 | force_requote then
		return_string = requote_string_ (input_string);
	     else return_string = input_string;
	end;
	else do i = 1 to input_string_len;
	     call count_text;
	     if j > 1 then do;
		return_string = return_string
		     || requote_string_ (substr (input_string, i, j));
		i = i + j - 1;
	     end;
	     else return_string = return_string || tchar (substr (input_string, i, 1));
	     return_string = return_string || " ";
	end;

	return (return_string);

count_text: proc;

	     do j = i to input_string_len
		while (rank (substr (input_string, j, 1)) >= 32
		& rank (substr (input_string, j, 1)) <= 126);
	     end;
	     j = j - i;
	end count_text;

     end display_string;

/* return prettyest representation of a character */

tchar: proc (c) returns (char (4) var);

dcl  c char (1);
dcl  i fixed bin;
dcl  temp char (4);

dcl  asc_value (0:32) char (3) static options (constant) init
	("NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL",
	"BS ", "TAB", "LF ", "VT ", "FF ", "CR ", "SO ", "SI ",
	"DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB",
	"CAN", "EM ", "SUB", "ESC", "FS ", "GS ", "RS ", "US ", "SP ");

	i = rank (c);
	if i <= hbound (asc_value, 1) then return (rtrim (asc_value (i)));
	if i > 126 then do;
	     if i = 127 then
		return ("DEL");
	     call ioa_$rsnnl ("^o", temp, (0), i);
	     return (temp);
	end;
	if index ("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", c) > 0 then return (c);
	if c = """" then return ("""""""""");
	else return ("""" || c || """");

     end tchar;
%page; %include device_class;
%page; %include iod_forms_info_tab;
%page; %include iod_constants;
%page; %include iod_device_tab;
%page; %include iod_line_tab;
%page; %include iod_tables_hdr;
%page; %include q_group_tab;

     end print_iod_tables;
