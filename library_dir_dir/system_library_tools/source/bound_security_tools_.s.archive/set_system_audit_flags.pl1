/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style1,^inddcls,^indnoniterdo,insnl,linecom,indcomtxt */

set_system_audit_flags:
ssaf:
     procedure;

/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* SET_SYSTEM_AUDIT_FLAGS							*/
	/*									*/
	/* Command to set the system access audit enable flags and thresholds per command line	*/
	/* per command line arguments.						*/
	/*									*/
	/* Usage:	     set_system_audit_flags -control_args				*/
	/*									*/
	/*									*/
	/* DISPLAY_SYSTEM_AUDIT_FLAGS							*/
	/*									*/
	/* Command to display the current values of the system access auditing enable flags and	*/
	/* thresholds.								*/
	/*									*/
	/* Usage:	     display_system_audit_flags					*/
	/*									*/
	/*									*/
	/* History:								*/
	/* 84-12-14 EJ Sharpe - changed display format					*/
	/* 84-12-12 EJ Sharpe - initial coding						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */


/* AUTOMATIC */

dcl     covert_channel_sw	 bit (1) aligned;
dcl     covert_channel_threshold
			 bit (72) aligned;
dcl     successful_access_sw	 bit (1) aligned;
dcl     successful_access_threshold
			 bit (72) aligned;
dcl     unsuccessful_access_sw bit (1) aligned;
dcl     unsuccessful_access_threshold
			 bit (72) aligned;

dcl     ME		 char (32);
dcl     arglistptr		 pointer;
dcl     arglen		 fixed bin (21);
dcl     argptr		 pointer;
dcl     class_str		 char (172);
dcl     n_args		 fixed bin;
dcl     ec		 fixed bin (35);


/* EXTERNAL CONSTANT */

dcl     error_table_$bad_arg	 fixed bin (35) external;
dcl     error_table_$noarg	 fixed bin (35) external;

dcl     sys_info$audit_covert_channel
			 bit (1) aligned external;
dcl     sys_info$covert_channel_threshold
			 bit (72) aligned external;
dcl     sys_info$audit_successful_access
			 bit (1) aligned external;
dcl     sys_info$successful_access_threshold
			 bit (72) aligned external;
dcl     sys_info$audit_unsuccessful_access
			 bit (1) aligned external;
dcl     sys_info$unsuccessful_access_threshold
			 bit (72) aligned external;


/* MISC */

dcl     addr		 builtin;
dcl     arg		 char (arglen) based (argptr);
dcl     based_dblwd		 (2) bit (36) aligned based;	/* for octal display of access class */

/* ENTRIES */

dcl     hphcs_$set_sys_audit_thresholds
			 entry (bit (1) aligned, bit (72) aligned,
			 bit (1) aligned, bit (72) aligned,
			 bit (1) aligned, bit (72) aligned,
			 fixed bin (35));

dcl     com_err_		 entry options (variable);
dcl     convert_access_class_$to_string_short
			 entry (bit (72) aligned, char (*), fixed bin (35));
dcl     convert_access_class_$from_string
			 entry (bit (72) aligned, char (*), fixed bin (35));
dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
dcl     cu_$arg_count_rel	 entry (fixed bin, pointer, fixed bin (35));
dcl     cu_$arg_list_ptr	 entry (pointer);
dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl     ioa_		 entry () options (variable);
%page;

/* set_system_audit_flags: procedure (); */


	ME = "set_system_audit_flags";

	call copy_values;

	call cu_$arg_list_ptr (arglistptr);

	call process_arguments;

	call hphcs_$set_sys_audit_thresholds (covert_channel_sw, covert_channel_threshold,
	     successful_access_sw, successful_access_threshold,
	     unsuccessful_access_sw, unsuccessful_access_threshold,
	     ec);
	if ec ^= 0
	then call ERROR (ec, "Could not set access audit parameters.");

	return;



display_system_audit_flags:
dsaf:
     entry ();

	ME = "display_system_audit_flags";

	call cu_$arg_count (n_args, ec);
	if ec ^= 0
	then call ERROR (ec, "");

	if n_args ^= 0
	then call ERROR (ec, "No arguments are recognized by this command.");

	call copy_values;

	call display_values;

	return;
%page;

/* COPY_VALUES - Internal procedure to copy the audit enable flags and thresholds out of sys_info */

copy_values:
     proc ();

	covert_channel_sw = sys_info$audit_covert_channel;
	covert_channel_threshold = sys_info$covert_channel_threshold;
	successful_access_sw = sys_info$audit_successful_access;
	successful_access_threshold = sys_info$successful_access_threshold;
	unsuccessful_access_sw = sys_info$audit_unsuccessful_access;
	unsuccessful_access_threshold = sys_info$unsuccessful_access_threshold;

     end copy_values;


/* DISPLAY_VALUES - Internal procedure to display the current values of the access audit enable flags and thresholds */

display_values:
     proc ();

	call ioa_ ("Covert channel auditing ^[enabled,^;disabled.^]", covert_channel_sw);
	if covert_channel_sw
	then do;
	     call convert_access_class_$to_string_short (covert_channel_threshold, class_str, ec);
	     if class_str = ""
	     then class_str = "system_low";
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal covert channel threshold ^w ^w.",
		     addr (covert_channel_threshold) -> based_dblwd);
	     else call ioa_ ("   threshold = ^a.", class_str);
	end;

	call ioa_ ("Successful access auditing ^[enabled,^;disabled.^]", successful_access_sw);
	if successful_access_sw
	then do;
	     call convert_access_class_$to_string_short (successful_access_threshold, class_str, ec);
	     if class_str = ""
	     then class_str = "system_low";
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal successful access threshold ^w ^w.",
		     addr (successful_access_threshold) -> based_dblwd);
	     else call ioa_ ("   threshold = ^a.", class_str);
	end;

	call ioa_ ("Unsuccessful access auditing ^[enabled,^;disabled.^]", unsuccessful_access_sw);
	if unsuccessful_access_sw
	then do;
	     call convert_access_class_$to_string_short (unsuccessful_access_threshold, class_str, ec);
	     if class_str = ""
	     then class_str = "system_low";
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal unsuccessful access threshold ^w ^w.",
		     addr (unsuccessful_access_threshold) -> based_dblwd);
	     else call ioa_ ("   threshold = ^a.", class_str);
	end;

	return;

     end display_values;
%page;

/* PROCESS_ARGUMENTS - Internal procedure to process the command line arguments */
/*	(used only by SET_system_audit_flags entrypoint)	*/

process_arguments:
     procedure ();

dcl     arg_no		 fixed bin;

	call cu_$arg_count_rel (n_args, arglistptr, ec);
	if ec ^= 0
	then call ERROR (ec, "Unable to get argument count.");

	if n_args < 1
	then call ERROR (error_table_$noarg, "");

	arg_no = 1;
	do while (arg_no <= n_args);
	     call get_arg ("next control argument");
	     if arg = "-covert_channel"
		| arg = "-cch"
	     then do;
		call get_thresh ("covert channel threshold string", covert_channel_threshold);
		covert_channel_sw = "1"b;
	     end;

	     else if arg = "-no_covert_channel"
		| arg = "-ncch"
	     then covert_channel_sw = "0"b;

	     else if arg = "-successful_access"
		| arg = "-sa"
	     then do;
		call get_thresh ("successful access threshold string", successful_access_threshold);
		successful_access_sw = "1"b;
	     end;

	     else if arg = "-no_successful_access"
		| arg = "-nsa"
	     then successful_access_sw = "0"b;

	     else if arg = "-unsuccessful_access"
		| arg = "-usa"
	     then do;
		call get_thresh ("unsuccessful access threshold string", unsuccessful_access_threshold);
		unsuccessful_access_sw = "1"b;
	     end;

	     else if arg = "-no_unsuccessful_access"
		| arg = "-nusa"
	     then unsuccessful_access_sw = "0"b;

	     else call ERROR (error_table_$bad_arg, arg);

	     arg_no = arg_no + 1;

	end;					/* LOOP */

	return;

get_thresh:
     procedure (arg_name, thresh_var);			/* procedure internal to process_arguments to get a
						   threshold command line argument */

dcl     arg_name		 char (*) parameter;
dcl     thresh_var		 bit (72) aligned parameter;

	arg_no = arg_no + 1;
	call get_arg (arg_name);

	call convert_access_class_$from_string (thresh_var, arg, ec);
	if ec ^= 0
	then call ERROR (ec, arg);

	return;

     end get_thresh;


get_arg:
     procedure (arg_name);				/* procedure internal to process_arguments to get the next argument */

dcl     arg_name		 char (*) parameter;

	call cu_$arg_ptr_rel (arg_no, argptr, arglen, ec, arglistptr);

	if ec ^= 0
	then call ERROR (ec, arg_name);

	return;

     end get_arg;

     end process_arguments;
%page;

/* ERROR - internal procedure to report an error and exit the command */

ERROR:
     procedure (code, msg);

dcl     code		 fixed bin (35) parameter;
dcl     msg		 char (*) parameter;

	call com_err_ (code, ME, msg);

	goto ERROR_EXIT;

     end ERROR;


ERROR_EXIT:

     end set_system_audit_flags;
