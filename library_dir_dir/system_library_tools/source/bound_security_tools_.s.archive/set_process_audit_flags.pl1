/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-17,EJSharpe), approve(86-03-17,MCR7364),
     audit(86-03-21,Margolin), install(86-04-23,MR12.0-1045):
     Initial coding (taken from version which supported functional test
     debugging).
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

set_process_audit_flags:
     procedure ();


/* *
   *	SET_PROCESS_AUDIT_FLAGS
   *
   *	This module contains the privileged commands which manipulate
   *	the process audit flags.
   *
   *	display_process_audit_flags {-long|-brief}
   *		Displays the audit flags for the current process.
   *
   *	set_process_audit_flags {STR}
   *		Sets the audit flags to the given string.  If the
   *		string is not supplied, a request loop is entered
   *		where the current values are displayed, and new values
   *		are requested.  Flags not specified are turned off.
   *		A "." terminates the loop.
   *
   *	edit_process_audit_flags {STR}
   *		Operates like set_process_audit_flags but changes
   *		only the values of flags specified, leaving others
   *		intact.
   *
   *	The commands accept the following keywords in lieu of the
   *	audit flags string:
   *
   *		default	- uses default values from sys_admin_data
   *		all	- turns all flags on and levels to maximum
   *		none	- turns all flags off and levels to minimum
   *
   *	Notes:
   *	As a future enhancement, the commands should accept a "-user STR"
   *	argument which would allow manipulation of audit flags for other
   *	live processes.
   *
   *	History:
   *	1985-05-22, EJ Sharpe: initial coding
   *	1985-07-18, EJ Sharpe: cosmetic cleanup
   *
*/
%page;
/* AUTOMATIC */

dcl  ME		        automatic char (32);		/* self identification */
dcl  argl		        automatic fixed bin (21);	/* command arg length */
dcl  arglp	        automatic ptr;		/* command arg list ptr */
dcl  argp		        automatic ptr;		/* command arg ptr */
dcl  auto_audit_flags       automatic bit (36) aligned;	/* the binary flags */
dcl  code		        automatic fixed bin (35);	/* status code */
dcl  edit_sw	        automatic bit (1) aligned;	/* to distinguish the set and edit entries */
dcl  flags_string	        automatic char (1024);	/* audit flags converted from binary */
dcl  input_flags	        automatic char (512);		/* input audit flags */
dcl  long_sw	        automatic bit (1);		/* controls whether display of flags is long format */
dcl  nargs	        automatic fixed bin;		/* number of command line arguments */
dcl  sadp		        automatic pointer;		/* pointer to sys_admin_data */


/* BASED */

dcl  arg		        char (argl) based (argp);	/* command argument */


/* ENTRIES */

dcl  access_audit_gate_$get_process_audit_flags entry (bit (36) aligned);
dcl  com_err_	        entry () options (variable);
dcl  command_query_	        entry () options (variable);
dcl  convert_access_audit_flags_$to_string entry (bit (36) aligned, char (*), fixed bin (35));
dcl  convert_access_audit_flags_$to_string_long entry (bit (36) aligned, char (*), fixed bin (21), fixed bin (35));
dcl  convert_access_audit_flags_$edit_from_string entry (char (*), bit (36) aligned, fixed bin (35));
dcl  convert_access_audit_flags_$from_string entry (char (*), bit (36) aligned, fixed bin (35));
dcl  cu_$arg_count	        entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr       entry (ptr);
dcl  cu_$arg_ptr_rel        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  ioa_		        entry () options (variable);
dcl  ioa_$general_rs        entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  initiate_file_	        entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  pathname_	        entry (char (*), char (*)) returns (char (168));
dcl  system_privilege_$set_process_audit_flags entry (bit (36) aligned);
dcl  terminate_file_        entry (ptr, fixed bin (24), bit (*), fixed bin (35));


/* MISC */

dcl  error_table_$bad_arg   fixed bin (35) external;

dcl  PROMPT_EXPLANATION     char (50) init ("Enter audit flags string or ""."" to exit.^/")
		        static options (constant);

dcl  addr		        builtin;
dcl  length	        builtin;
dcl  null		        builtin;
dcl  rtrim	        builtin;
%page;
/* The flag setting procedures */

/* set_process_audit_flags: */
spaf:
     entry ();

	call cu_$arg_list_ptr (arglp);

	call SETUP ("set_process_audit_flags");

	edit_sw = "0"b;

	goto SET_EDIT_COMMON;


edit_process_audit_flags:
epaf:
     entry ();

	call cu_$arg_list_ptr (arglp);

	call SETUP ("edit_process_audit_flags");

	edit_sw = "1"b;


SET_EDIT_COMMON:

	input_flags = "";

	call PROCESS_SET_EDIT_ARGS ();

	/*** get current flags */
	call access_audit_gate_$get_process_audit_flags (auto_audit_flags);

	if input_flags ^= ""
	then do;					/* new flags given on command line */
	     call PROCESS_INPUT_FLAGS (input_flags, auto_audit_flags, "0"b);

	     call system_privilege_$set_process_audit_flags (auto_audit_flags);
	end;

	else do;					/* caller wants interactive loop */

	     call convert_access_audit_flags_$to_string (auto_audit_flags, flags_string, code);
	     if code ^= 0
	     then call FATAL_ERROR (code, "Process audit flags in error.");

	     call ioa_ ("current flags: ^a", flags_string);

	     input_flags = "";			/* prime the loop */
	     /*** set up for the queries */
	     query_info.version = query_info_version_6;
	     query_info.suppress_spacing = "1"b;
	     query_info.prompt_after_explanation = "1"b;
	     query_info.suppress_name_sw = "1"b;
	     query_info.explanation_ptr = addr (PROMPT_EXPLANATION);
	     query_info.explanation_len = length (rtrim (PROMPT_EXPLANATION));

	     do while (input_flags ^= ".");
		call command_query_ (addr (query_info), input_flags, ME, "enter flags:   ");

		if input_flags ^= "."
		then do;
		     call PROCESS_INPUT_FLAGS (input_flags, auto_audit_flags, "1"b);

		     call convert_access_audit_flags_$to_string (auto_audit_flags, flags_string, code);

		     if code ^= 0
		     then call FATAL_ERROR (code, "Internal error: converted flags in error.");

		     call ioa_ ("^/new flags:     ^a", flags_string);
		end;
	     end;					/* loop */

	     /*** we arrive here with the converted flags to be set for the process */

	     call system_privilege_$set_process_audit_flags (auto_audit_flags);

	end;

	return;
%page;
/* The flag display procedure */

display_process_audit_flags:
dpaf:
     entry ();

	call cu_$arg_list_ptr (arglp);

	call SETUP ("display_process_audit_flags");

	call PROCESS_DISPLAY_ARGS ();

	call access_audit_gate_$get_process_audit_flags (auto_audit_flags);
	flags_string = "";
	if long_sw
	then call convert_access_audit_flags_$to_string_long (auto_audit_flags, flags_string, (0), code);
	else call convert_access_audit_flags_$to_string (auto_audit_flags, flags_string, code);

	if code ^= 0
	then call FATAL_ERROR (code, "Process audit flags in error.");
	else call ioa_ ("^a", flags_string);

	return;
%page;

SETUP:
     procedure (P_entrypoint_name);

dcl  P_entrypoint_name      char (*) parameter;		/* entrypoint code */

	ME = P_entrypoint_name;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then call FATAL_ERROR (code);


	return;

     end SETUP;
%page;

PROCESS_DISPLAY_ARGS:
     procedure;					/* procedure to process args for the display entry */

dcl  arg_index	        automatic fixed bin;		/* loop index */


	/*** All we may have is the "-long" or "-brief" args */

	long_sw = "0"b;

	do arg_index = 1 to nargs;
	     call cu_$arg_ptr_rel (arg_index, argp, argl, code, arglp);
	     if code ^= 0
	     then call FATAL_ERROR (code, "Unexpected error getting argument.");

	     if arg = "-long" | arg = "-lg"
	     then long_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf"
	     then long_sw = "0"b;
	     else goto USAGE;
	end;

	return;

USAGE:
	call FATAL_ERROR (error_table_$bad_arg, "Usage is:  ^a {-long|-brief}", ME);

	return;

     end PROCESS_DISPLAY_ARGS;
%page;

PROCESS_SET_EDIT_ARGS:
     procedure ();					/* procedure to process args for the set and edit entries */

	if nargs > 1
	then goto USAGE;


	if nargs = 1
	then do;
	     call cu_$arg_ptr_rel (1, argp, argl, code, arglp);
	     if code ^= 0
	     then call FATAL_ERROR (code, "Unexpected error getting arg.");

	     input_flags = arg;
	end;

	return;

USAGE:
	call FATAL_ERROR (0, "Usage is:  ^a {FLAGS_STR}", ME);

	return;

     end PROCESS_SET_EDIT_ARGS;
%page;

FATAL_ERROR:
     procedure options (variable);


/* Automatic */

dcl  ec_ptr	        automatic ptr;		/* pointer to error code argument */
dcl  fatal_error	        automatic bit (1);		/* indicates which entry we approached */
dcl  ignore_len	        automatic fixed bin (21);	/* dummy argument */
dcl  l_arglp	        automatic ptr;		/* arg list ptr for this proc */
dcl  l_code	        automatic fixed bin (35);	/* error code to use in this proc */
dcl  message_buff	        automatic char (512);		/* buffer for formatting caller's message */
dcl  message_ptr	        automatic ptr;		/* pointer to the formatted message */
dcl  message_len	        automatic fixed bin (21);	/* length of formatted message */


/* Based */

dcl  ec		        fixed bin (35) based (ec_ptr);	/* caller's error code (first arg) */
dcl  message	        char (message_len) based (message_ptr); /* formatted message */


	fatal_error = "1"b;
	goto ERROR_JOIN;
WARNING:
     entry options (variable);

	fatal_error = "0"b;

ERROR_JOIN:

	message_ptr = addr (message_buff);
	message_len = length (message_buff);

	call cu_$arg_list_ptr (l_arglp);
	call cu_$arg_ptr_rel (1, ec_ptr, ignore_len, l_code, l_arglp);
	if l_code ^= 0
	then do;
	     call com_err_ (l_code, ME, "Internal error: Error occurred during error handling.");
	     goto MAIN_EXIT;			/* punt */
	end;

	call ioa_$general_rs (l_arglp, 2, 3, message, message_len, "0"b, "0"b);

	call com_err_ (ec, ME, message);

	if fatal_error
	then goto MAIN_EXIT;

     end FATAL_ERROR;

MAIN_EXIT:
	return;
%page;

PROCESS_INPUT_FLAGS:
     procedure (P_input, P_audit_flags, P_interactive);

dcl  P_input	        char (*) parameter;
dcl  P_audit_flags	        bit (36) aligned parameter;
dcl  P_interactive	        bit (1) aligned parameter;

	if P_input = "default"
	then call GET_DEFAULT_FLAGS (P_audit_flags);
	else if P_input = "all"
	then call SET_ALL_FLAGS_ON (P_audit_flags);
	else if P_input = "none"
	then call SET_ALL_FLAGS_OFF (P_audit_flags);
	else do;					/* we're supplied with a possible set of flags */
	     if edit_sw
	     then call convert_access_audit_flags_$edit_from_string (P_input, P_audit_flags, code);
	     else call convert_access_audit_flags_$from_string (P_input, P_audit_flags, code);

	     if code ^= 0
	     then if P_interactive
		then call WARNING (code, "Input was: ^a.", P_input);
		else call FATAL_ERROR (code, "Input was: ^a.", P_input);
	end;

	return;
%page;

GET_DEFAULT_FLAGS:
	proc (P_flags);

dcl  P_flags	        bit (36) aligned parameter;

dcl  ADMIN_DIR	        char (168) init (">udd>SysAdmin>admin") static options (constant);
dcl  SYS_ADMIN_DATA	        char (32) init ("sys_admin_data") static options (constant);
dcl  ignore_bc	        automatic fixed bin (24);	/* dummy argument */

dcl  cleanup	        condition;

	     sadp = null ();			/* pointer is global due to incl requirement */

	     on cleanup call CLEAN_UP ();

	     call initiate_file_ (ADMIN_DIR, SYS_ADMIN_DATA, R_ACCESS, sadp, ignore_bc, code);
	     if code ^= 0
	     then call WARNING (code, "Could not open ^a.", pathname_ (ADMIN_DIR, SYS_ADMIN_DATA));
	     else do;
		P_flags = sys_admin_data.default_audit_flags;
		call CLEAN_UP ();			/* terminate reference */
	     end;

	     return;

CLEAN_UP:
	     proc ();

dcl  tsadp	        automatic pointer;		/* temporary */

		tsadp = sadp;
		if tsadp ^= null ()
		then do;
		     sadp = null ();
		     call terminate_file_ (tsadp, (0), TERM_FILE_TERM, code);
		end;

	     end CLEAN_UP;


	end GET_DEFAULT_FLAGS;
%page;

SET_ALL_FLAGS_ON:
	procedure (P_flags);

dcl  P_flags	        bit (36) aligned parameter;

dcl  flags	        automatic bit (36) aligned;

	     flags = "777777777777"b3;
	     addr (flags) -> audit_flags.pad = "0"b;	/* clear pad */

	     P_flags = flags;

	     return;

	end SET_ALL_FLAGS_ON;
%page;

SET_ALL_FLAGS_OFF:
	procedure (P_flags);

dcl  P_flags	        bit (36) aligned parameter;

	     P_flags = "0"b;			/* this one's easy! */

	     return;

	end SET_ALL_FLAGS_OFF;

     end PROCESS_INPUT_FLAGS;
%page;
%include access_audit_flags;
%page;
%include access_mode_values;
%page;
%include terminate_file;
%page;
%include query_info;
%page;
%include sys_admin_data;

     end set_process_audit_flags;
