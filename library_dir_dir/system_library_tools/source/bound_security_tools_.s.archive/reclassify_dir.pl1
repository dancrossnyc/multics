/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


reclassify_dir:  proc;


/* first version coded 09/29/74 J.C.Whitmore */

/* This procedure is used to change the access class of a segment, a directory
   and all immediately inferior segments, or a ring 1 multiple access class segment

   The three entry points are:

   1. reclassify_dir  path  [access_class]

   2. reclassify_seg  path

   3. reclassify_sys_seg  path  [access_class]

   If the optional access_class argument is omitted, the access class of
   the parent directory is assumed.  Access to the system_privilege_
   gate is assumed.
*/

dcl  aptr ptr,
     alen fixed bin,
     arg char (alen) based (aptr),
     acc_class bit (72) aligned,
     ec fixed bin (35),
     d_priv fixed bin (35) init (1),			/* 0 if we set dir priv here */
     os_priv fixed bin (35) init (1),			/* 0 if we set out-of-service priv here */
     dir char (168),
     ent char (32),
    (rd_entry, rs_entry, rss_entry) bit (1) init ("0"b),
     whoami char (24),
     addr builtin;

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     com_err_ entry options (variable),
     convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35)),
     hcs_$get_access_class entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
     system_privilege_$dir_priv_on entry (fixed bin (35)),
     system_privilege_$dir_priv_off entry (fixed bin (35)),
     system_privilege_$soos_priv_on entry (fixed bin (35)),
     system_privilege_$soos_priv_off entry (fixed bin (35)),
     system_privilege_$reclassify_branch entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
     system_privilege_$reclassify_node entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
     system_privilege_$reclassify_sys_seg entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));

dcl  error_table_$noarg ext static fixed bin (35);
dcl  (linkage_error, cleanup) condition;


	whoami = "reclassify_dir";			/* name the entry point for com_err */
	rd_entry = "1"b;				/* reclass dir entry switch */
	go to start;

reclassify_seg:  entry;

	whoami = "reclassify_seg";			/* ....for com_err */
	rs_entry = "1"b;				/* reclass seg entry switch */
	go to start;

reclassify_sys_seg:  entry;

	whoami = "reclassify_sys_seg";		/* ....for com_err */
	rss_entry = "1"b;				/* reclass sys seg entry switch */

start:	call cu_$arg_ptr (1, aptr, alen, ec);		/* get the pathname */
	if ec ^= 0 then do;

err:	     call com_err_ (ec, whoami);
	     go to clean_up;				/* be sure we reset privileges */

	end;

	if arg = "-wd" | arg = "-wdir" then alen = 0;

	call expand_path_ (aptr, alen, addr (dir), addr (ent), ec);
	if ec ^= 0 then go to err;

	on linkage_error go to abort;			/* do something intelligent if user doesn't have access */

	on cleanup go to clean_up;  /* cleanup after a "quit" or ..... */

	call system_privilege_$soos_priv_on (os_priv);	/* be sure we have the needed privilege */
	call system_privilege_$dir_priv_on (d_priv);

	if rs_entry then				/* do one seg at access class of parent */

	     call system_privilege_$reclassify_branch (dir, ent, "0"b, ec); /* access class is ignored */

	else do;					/* the other entries may have another arg */

	     call cu_$arg_ptr (2, aptr, alen, ec);	/* see if an access class was specified */
	     if ec ^= 0 then
		if ec = error_table_$noarg then	/* none supplied so, */
		     if rss_entry then do;		/* user really wanted to make the sys seg normal */

			call system_privilege_$reclassify_branch (dir, ent, "0"b, ec);

			rss_entry = "0"b;		/* we are done, this will make us fall through */

		     end;
		     else do;
			call hcs_$get_access_class (dir, ent, acc_class, ec); /* assume level of parent */
			if ec ^= 0 then go to err;	/* not much we can do */
		     end;

		else go to err;			/* wrong error from arg_ptr */

	     else do;				/* we got a second argument */

		call convert_authorization_$from_string (acc_class, arg, ec); /* convert to binary access class */
		if ec ^= 0 then go to err;		/* bad access class string */

	     end;

	     if rd_entry then
		call system_privilege_$reclassify_node (dir, ent, acc_class, ec);
	     else if rss_entry then			/* see if we still want a sys seg */
		call system_privilege_$reclassify_sys_seg (dir, ent, acc_class, ec);

	end;

	if ec ^= 0 then do;
	     if dir = ">  " then dir = "";		/* special case root for com_err */
	     call com_err_ (ec, whoami, "^a>^a", dir, ent);
	end;

clean_up:	if d_priv = 0 then call system_privilege_$dir_priv_off (ec); /* turn off if we set it */
	if os_priv = 0 then call system_privilege_$soos_priv_off (ec);

	return;

abort:	call com_err_ (0, whoami, "This command requires privileged access not given to this user.");
						/* we don't have to worry about reseting privileges */
						/* since we got here because user didn't have access */

	return;

     end reclassify_dir;
