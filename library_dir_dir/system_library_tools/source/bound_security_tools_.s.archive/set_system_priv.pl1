/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style4 */
set_system_priv: proc;


/* initially coded by J. Whitmore - 10/15/74 */
/* modified at some point by C.T. Tavares for rcp priv. */
/* modified for better usage message, 1/81 by M.R. Jordan */
/* modified for comm privilege, 5/83 by E. N. Kittlitz */

/* This command allows the user with access to the system_privilege_ gate
   to turn on and off the individual system privilege bits for his process */


dcl  ME char (15) static options (constant) init ("set_system_priv");

dcl  aptr ptr,
     alen fixed bin,
     arg char (alen) based (aptr);

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_count entry (fixed bin, fixed bin (35)),
     (ioa_, com_err_) entry options (variable),
     (system_privilege_$ipc_priv_on,
     system_privilege_$ipc_priv_off,
     system_privilege_$dir_priv_on,
     system_privilege_$dir_priv_off,
     system_privilege_$seg_priv_on,
     system_privilege_$seg_priv_off,
     system_privilege_$ring1_priv_on,
     system_privilege_$ring1_priv_off,
     system_privilege_$soos_priv_on,
     system_privilege_$soos_priv_off,
     system_privilege_$rcp_priv_on,
     system_privilege_$rcp_priv_off,
     system_privilege_$comm_priv_on,
     system_privilege_$comm_priv_off) entry (fixed bin (35));

dcl  ec fixed bin (35),
     action fixed bin (35),
     nargs fixed bin,
     ind fixed bin;

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$noarg fixed bin (35) ext;

dcl  linkage_error condition;
%page;
	call cu_$arg_count (nargs, ec);
	if ec ^= 0
	then do;
	     call com_err_ (ec, ME);
	     return;
	end;

	if nargs = 0
	then do;
	     call com_err_ (error_table_$noarg, ME,
		"^/Usage: set_system_priv privnames^/^7xwhere a privname can be: ipc, dir, seg, soos, ring1, rcp, or comm.^/^7xEach may be preceeded by ""^"" for negation.");
	     return;
	end;

	on linkage_error go to abort;			/* do something intelligent if user doesn't have access */

	do ind = 1 to nargs;

	     call cu_$arg_ptr (ind, aptr, alen, ec);
	     if ec ^= 0 then do;

		call com_err_ (ec, ME, "^/Accessing argument ^d.", ind);
		return;

	     end;

	     if arg = "ipc" then call system_privilege_$ipc_priv_on (action);
	     else if arg = "^ipc" then call system_privilege_$ipc_priv_off (action);
	     else if arg = "dir" then call system_privilege_$dir_priv_on (action);
	     else if arg = "^dir" then call system_privilege_$dir_priv_off (action);
	     else if arg = "seg" then call system_privilege_$seg_priv_on (action);
	     else if arg = "^seg" then call system_privilege_$seg_priv_off (action);
	     else if arg = "soos" then call system_privilege_$soos_priv_on (action);
	     else if arg = "^soos" then call system_privilege_$soos_priv_off (action);
	     else if arg = "ring1" then call system_privilege_$ring1_priv_on (action);
	     else if arg = "^ring1" then call system_privilege_$ring1_priv_off (action);
	     else if arg = "rcp" then call system_privilege_$rcp_priv_on (action);
	     else if arg = "^rcp" then call system_privilege_$rcp_priv_off (action);
	     else if arg = "communications" | arg = "comm" then call system_privilege_$comm_priv_on (action);
	     else if arg = "^communications" | arg = "^comm" then call system_privilege_$comm_priv_off (action);
	     else do;
		action = 0;
		ec = error_table_$badopt;
		call com_err_ (ec, ME, "^a", arg);
	     end;
	     if action ^= 0 then call ioa_ ("Privilege already in state requested: ^a", arg);

	end;


	return;

abort:	call com_err_ (0, ME,
	     "This command requires privileged access not given to this user.");
						/* don't worry about the state of the privileges, because */
						/* we got here do to insufficient access to the gate */
	return;

     end set_system_priv;
