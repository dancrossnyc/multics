/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* update_heals_log copies messages from the syserr_log
   into the heals_log.  Coded by A. Downing 09/76 as part of
   Multics HEALS */
/* Modified by A. Downing March 1978 to
   repair cleanup handling */
/* Modified by A. Downing Dec. 1978 to make several
   minor bug fixes. */
/* Modified by F. W. Martinson 10/82 to correct bugs and add standard
   locking strategy. */
update_heals_log: proc;
%include heals_arg_info;
%include heals_state;
%include heals_message;
dcl  hcs_$make_seg entry (char (*), char (*), char (*),
     fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$status_minf entry
    (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*),
     fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  clock_ entry returns (fixed bin (71));
dcl  get_pdir_ entry returns (char (168));
dcl  heals_collect_data_ entry (ptr, fixed bin (35));
dcl (com_err_, ioa_) entry options (variable);
dcl (iox_$close, iox_$detach_iocb) entry (ptr, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$delete_record entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  log_path char (168) ext static aligned init (">system_control_1>heals_dir>heals_log"); /* default log */
dcl  error_table_$noentry ext static fixed bin (35);
dcl  error_table_$lock_wait_time_exceeded ext static fixed bin (35);
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  code fixed bin (35);
dcl  ind fixed bin;
dcl  temp_date_time fixed bin (71);
dcl  one_day fixed bin (71) int static init (86400000000);	/* one day of micro/sec */
dcl  chase fixed bin (1) init (1);
dcl  type fixed bin (2);
dcl  bit_count fixed bin (24);
dcl  save_seq_num fixed bin (35);
dcl  cleanup condition;
dcl  me char (32) varying;
dcl (abs, addr, before, bin, null, verify) builtin;

	me = "update_heals_log";
	heals_arg_info.iocbp = null ();
	heals_arg_info.heals_log_path_name = log_path;
	ind = index (reverse (heals_log_path_name), ">");
	ind = length (heals_log_path_name) - ind ;
	call hcs_$initiate
	     (substr (heals_log_path_name, 1, ind),
	     "heals_log_info", "", 0, 0, heals_state_p, code);
	if heals_state_p = null () then do;
	     call hcs_$make_seg
		(substr (heals_log_path_name, 1, ind),
		"heals_log_info", "", 01010b, heals_state_p, code);
	     if heals_state_p = null () then do;
		call com_err_ (code, me, "could not initiate heals_log_info.");
		return;
	     end;
	end;
	call set_lock_$lock (heals_state.busy, 0, code);
	if code = error_table_$lock_wait_time_exceeded then do;
	     call com_err_ (code, me, "heals log busy");
	     call clean_up;
	     return;
	end;

	on cleanup call clean_up;
	save_seq_num = last_message_seq_num;
	call hcs_$status_minf
	     (substr (heals_log_path_name, 1, ind),
	     substr (heals_log_path_name, ind +2),
	     chase, type, bit_count, code);
	if code = error_table_$noentry |
	type ^= 2 then do;				/* must create */
	     call ioa_ ("^a: Creating heals_log^/^a", me, heals_log_path_name);
	     call iox_$attach_ioname ("heals_io", heals_arg_info.iocbp,
		"vfile_ " || before (heals_log_path_name, " "), code);
	     if code ^= 0 then do;
		call com_err_ (code, me, "could not create ^a.", heals_log_path_name);
		call clean_up;
		return;
	     end;
	end;
	else do;					/* heals log exists ok */
	     call iox_$attach_ioname ("heals_io", heals_arg_info.iocbp,
		"vfile_ " || before (heals_log_path_name, " ") || " -extend", code);
	     if code ^= 0 then do;
		call com_err_ (code, me, "could not attach to heals_io stream.");
		call clean_up;
		return;
	     end;
	end;

	from_time = last_message_time+1;
	to_time = clock_ ();
	info_selection = "0"b;			/* init */
	substr (info_selection, 1, 7) = (7)"1"b;
	call heals_collect_data_ (addr (heals_arg_info), code);
	if heals_arg_info.err_nb ^= 0 | code ^= 0 then do;
	     call com_err_ (code, me, "heals_log could not be completely updated.");
	     call clean_up;
	     return;
	end;
	call ioa_ (
	     "^5x^d message^v(s^) processed,^/^5xsyserr seq_num ^d through^/^5xsyserr seq_num ^d.",
	     abs (last_message_seq_num - save_seq_num), bin (abs (last_message_seq_num - save_seq_num) ^= 1, 17),
	     save_seq_num, last_message_seq_num);

	call clean_up;
	return;
						/*  */
						/* truncate_heals_log truncates messages from the
						   heals_log */
truncate_heals_log: entry;
dcl  reset_last_msg bit (1) init ("0"b);
dcl  no_deleted fixed bin (35) init (0);
dcl  error_table_$badopt ext static fixed bin (35);
dcl  i fixed bin init (1);
dcl  buffer char (2048) aligned;
dcl  length builtin;
dcl  act_len fixed bin (21);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  arg char (arg_len) based (arg_p);
dcl  arg_len fixed bin;
dcl  arg_p ptr;
	me = "truncate_heals_log";
	heals_arg_info.iocbp = null ();
	heals_arg_info.heals_log_path_name = log_path;
	ind = index (reverse (heals_log_path_name), ">");
	ind = length (heals_log_path_name) - ind ;
	call hcs_$initiate
	     (substr (heals_log_path_name, 1, ind),
	     "heals_log_info", "", 0, 0, heals_state_p, code);
	if heals_state_p = null () then do;
	     call com_err_ (code, me, "could not initiate heals_log_info");
	     return;
	end;

	call set_lock_$lock (heals_state.busy, 0, code);
	if code = error_table_$lock_wait_time_exceeded then do;
	     call com_err_ (code, me, "heals log busy");
	     call clean_up;
	     return;
	end;
	heals_message_p = addr (buffer);
	heals_state.busy = "1"b;
	on cleanup call clean_up;
	to_time = clock_ ();
	from_time = 0;
	if cu_$arg_count () < 1 then do;
	     call com_err_ (0, me, "Usage:
truncate_heals_log -from TIME -to TIME |
truncate_heals_log Ndays");
	     call clean_up;
	     return;
	end;
	else do while (i <= cu_$arg_count ());
	     call cu_$arg_ptr (i, arg_p, arg_len, code);
	     if code ^= 0 then go to arg_error;
	     if arg = "-from" | arg = "-fm" then do;
		i = i + 1;
		call cu_$arg_ptr (i, arg_p, arg_len, code);
		if code ^= 0 then do;
arg_error:	     call com_err_ (code, me, "error while analyzing argument ^d.", i);
		     call clean_up;
		     return;
		end;
		call convert_date_to_binary_ (arg, temp_date_time, code);
		if code ^= 0 then go to arg_error;
		else from_time = temp_date_time;
	     end;
	     else if arg = "-to" then do;
		i = i + 1;
		call cu_$arg_ptr (i, arg_p, arg_len, code);
		if code ^= 0 then go to arg_error;
		call convert_date_to_binary_ (arg, temp_date_time, code);
		if code ^= 0 then go to arg_error;
		else to_time = temp_date_time;
	     end;
	     else if verify (arg, "0123456789") = 0 then do; /* number of days */
		from_time = 0;
		to_time = clock_ () - (bin (arg, 17) * one_day);
	     end;
	     else do;				/* bad_arg */
		call com_err_ (error_table_$badopt, me, "^a.", arg);
		call clean_up;
		return;
	     end;
	     i = i + 1;
	end;					/* end of argument parsing loop */
	call iox_$attach_ioname
	     ("heals_io", iocbp,
	     "vfile_ " || before (heals_log_path_name, " ") || " -extend", code);
	if code ^= 0 then do;
could_not_truncate:
	     call com_err_ (code, me,
		"could not truncate ^a as requested.",
		before (heals_log_path_name, " "));
	     call clean_up;
	     return;
	end;
	call iox_$open (iocbp, 7 /* seq update */, "0"b, code);
	if code ^= 0 then go to could_not_truncate;
	call iox_$read_record (iocbp, heals_message_p, length (buffer), act_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, me, "error while positioning heals_io.");
	     call clean_up;
	     return;
	end;
	do while (code = 0 & heals_message.time < from_time);
	     call iox_$read_record (iocbp, heals_message_p, length (buffer), act_len, code);
	     if code ^= 0 then
		if code ^= error_table_$end_of_info then
		     go to could_not_truncate;
		else call clean_up;
	     return;
	end;
deletion_loop:
	do while (code = 0 & heals_message.time < to_time);
	     if last_message_time = heals_message.time then
		reset_last_msg = "1"b;
	     call iox_$delete_record (iocbp, code);
	     if code = 0 then
		no_deleted = no_deleted + 1;
	     call iox_$read_record (iocbp, heals_message_p,
		length (buffer), act_len, code);
	end;
	if no_deleted > 0 then
	     call ioa_ ("^4x^d record^v(s^) deleted from:^/^a.",
	     no_deleted, bin (no_deleted > 1, 1, 0),
	     before (heals_log_path_name, " "));
	else call ioa_ ("^4xNo records were deleted from:^/^a.",
	     before (heals_log_path_name, " "));
	if reset_last_msg | code = error_table_$end_of_info then do;
	     call iox_$position (iocbp, 1, 0, code);
	     call iox_$position (iocbp, 0, -1, code);
	     if code = error_table_$end_of_info then do;
		last_message_seq_num = 0;
		last_message_time = 0;
	     end;
	     else do;
		call iox_$read_record (iocbp, heals_message_p,
		     length (buffer), act_len, code);
		last_message_seq_num = heals_message.seq_num;
		last_message_time = heals_message.time;
	     end;
	     code = 0;
	     reset_last_msg = "0"b;
	end;
	if code ^= 0 then call com_err_ (me, code);
	call clean_up;
	return;
						/*  */
clean_up:	proc;
	     if iocbp ^= null () then do;
		call iox_$close (iocbp, code);
		call iox_$detach_iocb (iocbp, code);
	     end;
	     call set_lock_$unlock (heals_state.busy, code);
	     return;
	end clean_up;
						/* 
						   The test entry sets the value of log_path to allow the use of
						   several different heals logs.
						   Added Nov. 1976 by A. Downing. */
test:	entry;
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
	if cu_$arg_count () = 0 then do;
	     log_path = ">system_control_1>heals_dir>heals_log"; /* default value */
	     call ioa_
		("Resetting heals_log path to:^/^168a",
		before (log_path, " "));
	end;
	else do;					/* get path name from argument list */
	     call cu_$arg_ptr (1, arg_p, arg_len, code);
	     call expand_path_ (arg_p, (arg_len), addr (log_path), null (), code);
	     if code ^= 0 then do;
		call com_err_ (code, "update_heals_log", "could not assign log path name ^a", arg);
		return;
	     end;
	     else call ioa_ ("Setting heals_log path to:^/^168a", log_path);
	end;
	return;

     end update_heals_log;
