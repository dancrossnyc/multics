/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This routine copies selected syserr_log messages
   into the Heals log.  Record selection is based upon
   a time range, as well as a data type.
   Coded by A. Downing Feb. 1976.
*/
/* Modified Feb. 1979 by A. Downing in preparation
   of MR7.0; several bug fixes and some code clarification made.
*/
heals_collect_data_: proc (datap, code);
%include heals_arg_info;
%include heals_message;
%include heals_state;
%include syserr_message;
%include iocb;
dcl 1 arg_info like heals_arg_info based (datap);
dcl  datap ptr;
dcl  qip ptr;
dcl 1 query_info aligned,
    2 version fixed bin init (1),
    2 yes_or_no_sw bit (1) unal init ("1"b),		/* Require "yes" or "no" answer. */
    2 suppress_name_sw bit (1) unal init ("0"b),		/* Print name with question. */
    2 status_code fixed bin (35),			/* Set to code of error prompting question. */
    2 query_code fixed bin (35) init (0);
dcl  sysmsgp ptr;
dcl  code fixed bin (35);
dcl  i fixed bin (21);
dcl  log_code fixed bin (35);				/* code for syserr_log_util_ calls. */
dcl  no_of_recs_copied fixed bin (35) init (0);
dcl  answer char (8) init ("");
dcl (error_table_$no_record, error_table_$key_duplication, error_table_$key_order) ext static fixed bin (35);
dcl  error_table_$bad_arg ext static fixed bin (35);
dcl  error_table_$file_busy ext static fixed bin (35);
dcl (error_table_$not_open, error_table_$not_closed, error_table_$not_attached)
     ext static fixed bin (35);
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  last_msg_tallied fixed bin (35);
dcl  last_msg_tallied_time fixed bin (71);
dcl  m_len fixed bin (21);
dcl  input_record char (2048) init ("");
dcl  output_record char (2048) init ("");
dcl  io_data bit (1) unal defined arg_info.info_selection pos (1);
dcl  mpc_data bit (1) unal defined arg_info.info_selection pos (2);
dcl  cpu_data bit (1) unal defined arg_info.info_selection pos (3);
dcl  mos_edac_data bit (1) unal defined arg_info.info_selection pos (4);
dcl  sorted_io_data bit (1) unal defined arg_info.info_selection pos (5);
dcl  disk_data bit (1) unal defined arg_info.info_selection pos (6);
dcl  bulk_data bit (1) unal defined arg_info.info_selection pos (7);
dcl  command_query_ entry options (variable);
dcl (com_err_, ioa_) entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*),
     fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  syserr_log_util_$status entry (ptr, fixed bin (35));
dcl  syserr_log_util_$read entry (ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  syserr_log_util_$close entry (fixed bin (35));
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));
dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  syserr_log_util_$position entry (fixed bin (24), fixed bin (71), fixed bin (35), fixed bin (35));
dcl  buffering bit (1) aligned init ("0"b);
dcl  first_record bit (1) init ("1"b);
dcl (ioi_type, rcp_type, cpu_type, mos_type, disk_type,
     dn355_type, iom_type, bulk_type) bit (1) aligned;
dcl  keyed_sequential_output fixed bin int static init (9); /* iox value */
dcl  last_message_copied bit (1) init ("0"b) aligned;
dcl (cleanup, record_quota_overflow) condition;
dcl (addr, bin, index, null, reverse, substr) builtin;
dcl  slu_statusp ptr;
dcl 1 slu_status aligned,
    2 version fixed bin;				/* thats it for now */
dcl  open_status bit (36) aligned;
dcl (search_time, rtime) fixed bin (71);
dcl  rseq fixed bin (35);

	arg_info.err_nb = -1;			/* if we abort without satisfaction */
	qip = addr (query_info);
	i = index (reverse (arg_info.heals_log_path_name), ">");
	i = length (arg_info.heals_log_path_name) - i;
	call hcs_$initiate
	  (substr (arg_info.heals_log_path_name, 1, i), "heals_log_info", "",
	  0, 0, heals_state_p, code);
	if heals_state_p = null () then signal cleanup;
	code = 0;
	log_code = 0;
	if arg_info.from_time > arg_info.to_time then do;
	  code = error_table_$bad_arg;
	  call com_err_ (code, "heals_collect_data_", "the time range for data processing is incompatible.");
	  return;
	end;
	slu_statusp = addr (slu_status);
	call syserr_log_util_$status (slu_statusp, log_code);
	if log_code ^= 0 then do;
	  call com_err_ (log_code, "heals_collect_data_", "error while obtaining syserr_log status.");
	  code = error_table_$not_attached;
	  return;
	end;
	syserr_msgp = addr (input_record);
	heals_message_p = addr (output_record);
	on condition (record_quota_overflow) begin;
	  call com_err_ (0, "heals_collect_data_",
	    "There is not enough quota on the directory containing the heals log to permit its extention.");
	  call syserr_log_util_$close (log_code);
	  arg_info.err_nb = -1;
	  go to ret;
	end;

open_syserr_log:
	call syserr_log_util_$open (open_status, log_code);
	if log_code ^= 0 then do;
	  if log_code = error_table_$not_closed then do;
	    call syserr_log_util_$close (log_code);
	    go to open_syserr_log;
	  end;
	  if open_status = "0"b then
	    call com_err_ (log_code, "heals_collect_data_", "error while opening syserr_log");
	  else go to syserr_log_is_open;		/* we have something */
	  go to early_return;
	end;
syserr_log_is_open:
	if substr (open_status, 1, 2) ^= "11"b then
	  call com_err_ (0, "heals_collect_data_",
	  "part of the syserr_log is unavailable, processing will continue with the available part.");
	call syserr_log_util_$search
	  (arg_info.from_time, rtime, rseq, log_code);
	if log_code ^= 0 then do;
	  call com_err_ (log_code, "heals_collect_data_", "could not read syserr_log.");
early_return:
	  arg_info.err_nb = 1;
	  call syserr_log_util_$close (log_code);
	  code = log_code;
	  return;
	end;

	if rseq < heals_state.last_message_seq_num |
	rtime < heals_state.last_message_time then do;
	  query_info.status_code = 0;			/* init */
get_answer: call command_query_ (qip, answer, "heals_collect_data_",
	    "The syserr_log may have been reinitialized,
   do you want to continue copying messages?	");
	  if substr (answer, 1, 3) = "yes" then go to continue_to_copy;
	  else go to early_return;
	end;

	if rseq < heals_state.last_message_seq_num then
	  call ioa_
	  ("the syserr_log may have been reinitialized after seq_num ^d; copying continues.",
	  last_message_seq_num);

continue_to_copy:
	call datap -> arg_info.iocbp -> iocb.open (
	  datap -> arg_info.iocbp, (keyed_sequential_output), "0"b, code);
	if code ^= 0 then
	  if code = error_table_$file_busy then do;
	    call com_err_ (code, "heals_collect_data_", "The permanent heals log is being updated.");
	    call syserr_log_util_$close (log_code);
	    return;
	  end;
	  else do;
	    call syserr_log_util_$close (log_code);
	    return;
	  end;


copy_data: begin;
%include io_syserr_msg;
dcl  message_length fixed bin (21);
dcl  copy_this_one bit (1) aligned;
copy_loop:  do while ("1"b);
	    call syserr_log_util_$read
	      (addr (input_record), size (input_record), message_length, log_code);
	    if log_code ^= 0 then
	      if log_code ^= error_table_$end_of_info then do;
	        call com_err_ (log_code, "heals_collect_data_", "error while reading syserr_log.");
	        call syserr_log_util_$close (code);
	        return;
	      end;
	      else go to finish;
	    else;
	    if syserr_msg.time > arg_info.to_time then go to finish;
	    if syserr_msg.time >= arg_info.from_time then do;
	      copy_this_one, ioi_type, disk_type, rcp_type,
	        bulk_type, mos_type, cpu_type, dn355_type, iom_type = "0"b;
	      if io_data | sorted_io_data then do;
	        if index (syserr_msg.text, "RCP:") > 0 then rcp_type = "1"b;
	        else if index (syserr_msg.text, "dn355:") > 0 then dn355_type = "1"b;
	        else if index (syserr_msg.text, "iom_manager:") > 0 then iom_type = "1"b;
	        else if index (syserr_msg.text, "ioi_") > 0 then ioi_type = "1"b;
	        else if index (syserr_msg.text, "ocdcm_:") > 0 then ioi_type = "1"b;
	        io_msgp = addr (syserr_msg.data (1));
	      end;
	      if cpu_data then
	        if index (syserr_msg.text, "hardware_fault:") > 0 then do;
		cpu_type = "1"b;			/* a cpu record of some sort */
	        end;
	      if mos_edac_data then
	        if index (syserr_msg.text, "mos_memory_check:") > 0 then do;
		mos_type = "1"b;
	        end;
	      if disk_data then
	        if index (syserr_msg.text, "disk_control") > 0 then do;
		disk_type = "1"b;
	        end;
	      if bulk_data then
	        if index (syserr_msg.text, "bulk_store_control:") > 0 then do;
		bulk_type = "1"b;
	        end;

have_rec_type:
	      if first_record then do;
	        first_record = "0"b;
	        buffering = "0"b;
	        last_message_copied = "0"b;

/* initialize this first heals_message for later comparison with syserr_msg values */
	        heals_message.data_size = syserr_msg.data_size;
	        heals_message.text_len = syserr_msg.text_len;
	        unspec (heals_message.rest_of_record) = ""b; /* zero every field out */
	        heals_message.text = "";
	        heals_message.data (*) = ""b;
	        heals_message.tally = 0;
	        m_len = message_length * 4 +4;
	      end;
	      if cpu_type | ioi_type | bulk_type | disk_type | dn355_type | mos_type | iom_type | rcp_type
	      then copy_this_one = "1"b;
	      if copy_this_one then
	        if last_message_copied then do;


/* check for message tallying */
		if syserr_msg.text = heals_message.text then
		  if syserr_msg.data_size = heals_message.data_size then do;
		    if ioi_type then
		      if (substr (unspec (heals_message.data), 1, 30) ||
		      substr (unspec (heals_message.data), 37, 72)) =
		      (substr (unspec (syserr_msg.data), 1, 30) ||
		      substr (unspec (syserr_msg.data), 37, 72)) then do;
		        heals_message.tally =
			heals_message.tally + bin (count, 6, 0) + 1;
		        go to keep_text;
		      end;
		      else;
		    else if unspec (heals_message.data) =
		    unspec (syserr_msg.data) then do;	/* compare octal data for similarity */
		      heals_message.tally = heals_message.tally + 1;
		      go to keep_text;
		    end;
		  end;
		  else;
		else;

/* must not be similar to last record */
		if buffering then call copy_message;	/* write old rec */
		if ioi_type then heals_message.tally =
		  bin (count, 6, 0) + 1;
		else heals_message.tally = 1;
		m_len = message_length * 4 +4;
		heals_message.seq_num = syserr_msg.seq_num;
		heals_message.time = syserr_msg.time;
		heals_message.code = syserr_msg.code;
		heals_message.data_size = syserr_msg.data_size;
		heals_message.text_len = syserr_msg.text_len;
		heals_message.data (*) = syserr_msg.data (*);
		heals_message.text = syserr_msg.text;
keep_text:
		buffering = "1"b;
		last_message_copied = "1"b;
		last_msg_tallied = syserr_msg.seq_num;
		last_msg_tallied_time = syserr_msg.time;
	        end;				/* end of last_message_copied being true */
	        else do;				/* last_message_copied was false */
		if buffering then
		  call copy_message;
		buffering = "1"b;
		heals_message.data_size = syserr_msg.data_size; /* because of refer option */
		heals_message.text_len = syserr_msg.text_len; /* because of refer option */
		heals_message.rest_of_record = syserr_msg;
		m_len = message_length * 4 +4;
		if ioi_type then heals_message.tally = bin (count, 6, 0) + 1;
		else heals_message.tally = 1;
		last_message_copied = "1"b;
	        end;				/* end of last_message_copied being false */
	      else do;				/* copy_this_one is false */
	        last_message_copied = "0"b;
	        last_msg_tallied = syserr_msg.seq_num;
	        last_msg_tallied_time = syserr_msg.time;
	        if buffering then do;
		call copy_message;
		buffering = "0"b;
	        end;
	      end;
	    end;
	  end copy_loop;
	end copy_data;
finish:
	if arg_info.err_nb = 0 then
	  if buffering then
	    call copy_message;
	if no_of_recs_copied > 0 then
	  call ioa_
	  ("^5x^d message^v(s^) copied into:^/^a",
	  no_of_recs_copied, bin (no_of_recs_copied > 1, 1, 0),
	  before (arg_info.heals_log_path_name, " "));
	call datap -> arg_info.iocbp -> iocb.close (
	  datap -> arg_info.iocbp, code);
	call syserr_log_util_$close (code);
	if code ^= 0 then
ret:	  return;
	arg_info.err_nb = 0;			/* indicate satisfactory return */
	return;

/* proc to copy heals messages. */
copy_message: proc;
dcl  based_key char (8) based (addr (heals_message.time));
dcl  key char (256) varying;
	  key = based_key;				/* for seek_key operation */
	  call arg_info.iocbp -> iocb.seek_key
	    (arg_info.iocbp, key, 0, code);
	  if code = error_table_$no_record then do;
	    call arg_info.iocbp -> iocb.write_record (arg_info.iocbp,
	      heals_message_p, m_len, code);
	    if code = 0 then do;
	      no_of_recs_copied = no_of_recs_copied + 1;
	      heals_state.last_message_seq_num = last_msg_tallied;
	      heals_state.last_message_time = last_msg_tallied_time;
	    end;
	    else do;
	      call com_err_
	        (code, "heals_collect_data_",
	        "error writing record ^d into heals_log.", heals_message.seq_num);
copy_error:
	      arg_info.err_nb = -1;
	      go to finish;
	    end;
	  end;
	  else if code ^= error_table_$key_order
	  then do;				/* bad code from seek_key operation above. */
	    call com_err_ (code, "heals_collect_data_", "could not create a key for message ^d.",
	      heals_message.seq_num);
	    go to copy_error;
	  end;
	  heals_message.tally = 0;			/* reset it */
	  if heals_message.data_size > 0 then
	    heals_message.data (*) = "0"b;
	  return;
	end copy_message;
        end heals_collect_data_;
