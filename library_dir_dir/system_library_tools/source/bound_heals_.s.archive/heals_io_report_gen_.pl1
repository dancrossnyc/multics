/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
heals_io_report_gen_: proc (heals_arg_info_p, heals_ior_args_p, r_code);

/* ******************************************************************************
   *								*
   *  Comments:							*
   *								*
   *	Written by RH Morrison  Dec. 1, 1976	 			*
   *	Last modified by RH Morrison  01/03/77				*
   *								*
   ****************************************************************************** */

/* FF */
/* ********	DECLARATIONS	******** */

/* ****	PROCEDURE ARGUMENTS   **** */

dcl  heals_arg_info_p ptr;
dcl  heals_ior_args_p ptr;
dcl  r_code fixed bin (35);

/* ****	EXTERNAL STATIC	**** */

dcl  error_table_$end_of_info ext static fixed bin (35);

/* ****	ENTRIES		**** */

dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

/* ****	POINTERS		**** */
dcl  flags_p ptr init (null);
dcl  work_p1 ptr init (null);

/*   Arguments  */
dcl  inbuf_p ptr init (null);
dcl  insw_p ptr init (null);
dcl  outsw_p ptr init (null);

/* Pointers declared elsewhere:
   ior_flags_p
   ior_parms_p
   ch_nfo_p
   ior_avars_p
   ioerr_rec_p
   io_msgp
   statp
   */

/* ****	CHARACTER STRING VARIABLES    **** */
dcl  inbuf char (inbuf_len) aligned;
dcl  rprt_from_time char (16);
dcl  rprt_to_time char (16);
dcl  old_date char (8);
dcl  date char (8);
dcl  time char (6);
dcl  date_time char (16);
dcl  ch_nr pic "99";
dcl  dev_nr pic "99";

/*   Arguments  */
dcl  whoami char (20) init ("heals_io_report_gen_");
dcl  version_date char (8) init ("12/15/76");

/* ****	ARITHMETIC VARIABLES    **** */
dcl  clock_time fixed bin (71);
dcl  line_cnt fixed bin;
dcl  max_line_cnt fixed bin;
dcl  page_nb fixed bin;

/*   Arguments  */
dcl  code fixed bin (35);
dcl  version_nb fixed bin init (1);
dcl  inrec_len fixed bin (21);
dcl  inbuf_len fixed bin (21) int static init (1024);
dcl  seq_in fixed bin int static init (4);

/* ****	BIT STRING VARIABLES    **** */
dcl  flags_word bit (36) aligned;
dcl  eof bit (1) aligned;

/*   Arguments  */
dcl  unused bit (1) aligned int static init ("0"b);

/* ****	BASED VARIABLES   **** */
dcl 1 flags aligned based (flags_p),
    (2 trace bit (1),
    2 db bit (1),
    2 hdrs bit (1),
    2 no_recs bit (1),
    2 fill (1)
     ) unal;

dcl 1 arg_info like heals_arg_info aligned based (heals_arg_info_p);

/* ****	MISC. DECLARATIONS		**** */

dcl (addr, fixed, null, substr) builtin;
dcl  cleanup condition;

/* FF */
/* ****	INCLUDE FILES	**** */
%include heals_arg_info;
%include heals_io_report_args;
%include heals_ioerr_rec;
%include io_syserr_msg;
%include iom_stat;
/* ****	END OF DECLARATIONS   **** */
/* FF */
/* ********	PROCEDURE		******** */

/* ****	Procedure Initialization	**** */

	on cleanup call clean_up;

/*  Init returns.  */
	r_code = 0;
	arg_info.err_nb = 0;

/*  Init pointers.  */
	flags_p = addr (flags_word);
	insw_p = ioerr_log_sw_p;
	outsw_p = arg_info.report_iocbp;
	inbuf_p = addr (inbuf);
	ioerr_rec_p = addr (inbuf);
	io_msgp = addr (ioerr_rec.data);
	statp = addr (io_msg.status);

/*  Init control flags.  */
	flags_word = "0"b;
	flags.hdrs = "1"b;
	flags.no_recs = ior_flags.no_recs;
	eof = "0"b;

/*  Init all else.  */

	code = 0;
	old_date = "";
	page_nb = 0;
	line_cnt = 0;
	max_line_cnt = max_line_cnt_a;
	call date_time_ (arg_info.from_time, rprt_from_time);
	call date_time_ (arg_info.to_time, rprt_to_time);

/* ****	End Procedure Initialization    **** */

/*  Run information.  */
	clock_time = clock_ ();
	call date_time_ (clock_time, date_time);
	date = substr (date_time, 1, 8);
	time = substr (date_time, 11, 6);
	if flags.trace
	| ior_flags.trace
	then call ioa_ ("^a run info: date ^a, time ^a, version ^d of ^a.",
	  whoami, date, time, version_nb, version_date);

/*  Open heals_ioerr_log file and read first record.  */
	if ^flags.no_recs
	then do;
	  call iox_$open (insw_p, seq_in, unused, code);
	  if code ^= 0 then call proc_err (30);
	  call iox_$read_record (insw_p, inbuf_p, inbuf_len, inrec_len, code);
	  if code ^= 0
	  then if code = error_table_$end_of_info
	    then flags.no_recs = "1"b;
	    else call proc_err (35);
	end;

/*  Record processing loop.  */
io_report_line_loop:
	do while (^eof);
	  if flags.hdrs
	  then do; page_nb = page_nb + 1;
	    line_cnt = 5;
	    call ioa_$ioa_switch (outsw_p,
	      "^|IO_ERROR_REPORT:^x^a^xTO^x^a^12xPAGE^x^2d^/",
	      rprt_from_time, rprt_to_time, page_nb);

	    call ioa_$ioa_switch (outsw_p,
	      "S_Y_S_E_R_R_____L_O_G_^3x_____D_E_V_I_C_E_____^3xS_T_A_T_U_S__^3xTLY^3xTAPE_NO^2xSTATUS_RETURN
TIME   NUMBER^3xNAME I-CC-DD CM^3xMJ-SB-I^9xDISK_AD");

	    if flags.no_recs then eof = "1"b;
	  end;

/* Write date line. */
	  if ^eof
	  then do; if sort_date ^= old_date | flags.hdrs	/* write date line after headers */
	    then do; old_date = sort_date;
	      flags.hdrs = "0"b;
	      line_cnt = line_cnt + 4;
	      call ioa_$ioa_switch (outsw_p, "^/^72(_^)^/DATE:^x^a^vxDATE:^x^a^/",
	        sort_date, 44, sort_date);
	    end;

	    ch_nr = fixed (ch_nb);			/* pad one digit numbers on left */
	    dev_nr = fixed (dev_nb);

/*  Write io_error report line.  */
	    line_cnt = line_cnt + 1;

	    if rprt_flags.ioerr
	    then call ioa_$ioa_switch (outsw_p,
	      "^6a^x^6d^3x^4a^x^1d-^2a-^2a^x^2.3b^3x^2.3b-^2.3b-^1a^3x^3d^3x^7a^3x^w",
	      log_time, seq_nb, dev_nm, iom_nb, ch_nr, dev_nr, dev_cmnd, maj_st, sub_st, ntrpt_nm,
	      tally_nb, tapno_diskad, io_msg.status);

	    else if rprt_flags.diskerr
	    then do; call ioa_$ioa_switch (outsw_p,
	        "^6a^x^6d^3x^4a^x^1d-^2a-^2a^x^2.3b^3x^2.3b-^2.3b-^1a^3x^3d^3x^7a^3x^w^/^34x^a",
	        log_time, seq_nb, dev_nm, iom_nb, ch_nr, dev_nr, dev_cmnd, maj_st, sub_st, ntrpt_nm,
	        tally_nb, tapno_diskad, io_msg.status, ioerr_rec.msg);
	      line_cnt = line_cnt + 1;
	    end;

	    else if rprt_flags.disk_addr
	    then call ioa_$ioa_switch (outsw_p,
	      "^6a^x^6d^3x^4a^x^1d-^2a-^2a^x^2.3b^19x^7a",
	      log_time, seq_nb, dev_nm, iom_nb, ch_nr, dev_nr, dev_cmnd, tapno_diskad);

	    else if rprt_flags.ext_stat | rprt_flags.iom_rec
	    then call ioa_$ioa_switch (outsw_p,
	      "^6a^x^6d^3x^4a^x^1d-^2a-^2a^x^2.3b^3x^a",
	      log_time, seq_nb, dev_nm, iom_nb, ch_nr, dev_nr, dev_cmnd, ioerr_rec.msg);

	    else if rprt_flags.msg
	    then call ioa_$ioa_switch (outsw_p, "^a", ioerr_rec.msg);

	    else if rprt_flags.bulk
	    then call ioa_$ioa_switch (outsw_p,
	      "^6a^x^6d^3x^a",
	      log_time, seq_nb, ioerr_rec.msg);

	    else if rprt_flags.bad_rec
	    then call ioa_$ioa_switch (outsw_p,
	      "^6a^x^6d^3x^4a^x^1d-^2a-^2a^6x^a",
	      log_time, seq_nb, dev_nm, iom_nb, ch_nr, dev_nr, ioerr_rec.msg);

/* Read next ioerr_log record. */
	    call iox_$read_record (insw_p, inbuf_p, inbuf_len, inrec_len, code);
	    if code ^= 0
	    then if code = error_table_$end_of_info
	      then eof = "1"b;
	      else call proc_err (32);

/*  Date change.  */
	    if sort_date ^= old_date
	    then if line_cnt > max_line_cnt - 10	/* too near bottom of page */
	      then flags.hdrs = "1"b;			/* so start new page */

	  end;

	  if line_cnt > max_line_cnt
	  then flags.hdrs = "1"b;
	end io_report_line_loop;

/* end of file on heals_ioerr_log */
	if flags.no_recs
	then call ioa_$ioa_switch (outsw_p,
	  "^/^11xThere were no io_errors during the report period.");
	call ioa_$ioa_switch (outsw_p,
	  "^/END: IO_ERROR_REPORT");
	if ^flags.no_recs
	then do; call iox_$close (ioerr_log_sw_p, code);
	  if code ^= 0 then call proc_err (33);
	end;
	return;

/* FF */
proc_err:	proc (proc_err_nb);
dcl  proc_err_nb fixed bin;
	  r_code = code;
	  arg_info.err_nb = proc_err_nb;
	  call com_err_ (code, whoami, "Procedure error number = ^d.", proc_err_nb);
	  call clean_up;
	  goto err_return;
	end proc_err;

clean_up:	proc;
	  call iox_$close (ioerr_log_sw_p, code);
	  return;
	end clean_up;

err_return: return;

        end heals_io_report_gen_;
