/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
heals_io_reports_: proc (heals_arg_info_p, r_code);	/* (ptr, fixed bin (35)) */

/* ******************************************************************************
   *								*
   *  This procedure processes syserr_log messages for HEALS and generates	*
   *  one or more of the following HEALS reports:				*
   *  	io_error_report						*
   *	sorted_io_error_report					*
   *								*
   *  The procedure reads  heals_log records (which are selected and modified	*
   *  syserr_log records), converts binary data to ascii, processes the data,	*
   *  and writes the processed records to heals_ioerr_log.			*
   *								*
   *  For each report type, the heals_ioerr_log records are read, sorted,	*
   *  summmarized, and the report formatted and written to a print file.	*
   *								*
   *	Written by RH Morrison  Feb. 18, 1976	 			*
   *	Last modified by RH Morrison  01/03/77				*
   *								*
   ****************************************************************************** */

/* FF  */
/* ********	DECLARATIONS	******** */


/* ****	PROCEDURE ARGUMENTS   **** */
dcl  heals_arg_info_p pointer;
dcl  r_code fixed bin (35);


/* ****	EXTERNAL STATIC	**** */
dcl  error_table_$noarg ext static fixed bin (35);


/* ****	ENTRIES		**** */
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  delete_$path entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  get_pdir_ entry returns (char (168));
dcl  heals_scan_config_ entry (ptr, fixed bin (35));
dcl  heals_gen_ioerr_log_ entry (ptr, ptr, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  clock_ entry returns (fixed bin (71));
dcl  heals_io_report_gen_ entry (ptr, ptr, fixed bin (35));
dcl  heals_sorted_report_gen_ entry (ptr, ptr, fixed bin (35));
dcl  heals_media_sort_gen_ entry (ptr, ptr, fixed bin (35));


/* ****	POINTERS		**** */
dcl  flags_p ptr init (null);

/*   Arguments  */
dcl  heals_ior_args_p ptr init (null);
dcl  ch_nfo_ar_p ptr init (null);
dcl  outsw_p ptr init (null);
dcl 1 real_p aligned like ior_ptrs;

/* pointers declared elsewhere:
   heals_arg_info_p
   ior_flags_p
   ior_prms_p
   ch-nfo_ar_p
   ioerr_log_sw_p
   ch_nf_p
*/


/* ****	CONTROL VARIABLES   **** */
/*  Parameters  */
dcl  whoami char (17) int static init ("heals_io_reports_");
dcl  version_date char (8) init ("12/15/76");
dcl  version_nb fixed bin init (2);
dcl  max_iom_nb fixed bin int static init (4);
dcl  max_ch_nb fixed bin int static init (63);
dcl  max_tape_nb fixed bin int static init (16);
dcl  max_line_cnt fixed bin int static init (58);

/*  Flags  */
dcl 1 flags aligned based (flags_p),
    (2 trace bit (1),
    2 db bit (1),
    2 io_error bit (1),
    2 sorted_io_error bit (1),
    2 media_rprt bit (1),
    2 fill bit (1)
     ) unal;

dcl  io_rprt bit (1) unal defined arg_info.info_selection pos (1);
dcl  mpc_data bit (1) unal defined arg_info.info_selection pos (2);
dcl  cpu_data bit (1) unal defined arg_info.info_selection pos (3);
dcl  mos_edac_data bit (1) unal defined arg_info.info_selection pos (4);
dcl  sorted_io_rprt bit (1) unal defined arg_info.info_selection pos (5);
dcl  media_data bit (1) unal defined arg_info.info_selection pos (8);

/*  Arguments  */
dcl 1 real_ior_prms aligned like ior_prms;


/* ****	CHARACTER STRING VARIABLES    **** */
dcl  date char (8);
dcl  time char (6);

/*   Arguments  */
dcl  date_time char (16);
dcl  ioerr_log_sw char (12) int static init ("ioerr_log_sw");


/* ****	ARITHMETIC VARIABLES    **** */
dcl  ch_nr pic "99";
dcl (i, j) fixed bin;

/*   Arguments  */
dcl  code fixed bin (35);
dcl  clock_time fixed bin (71);
dcl 1 real_ior_avars aligned like ior_avars;


/* ****	BIT STRING VARIABLES    **** */
dcl  flags_word bit (36) aligned init ("0"b);

/*   Arguments  */
dcl  dl_sws bit (6) int static init ("100100"b);
dcl  ior_flags_word bit (36) aligned;


/* ****	ARRAY VARIABLES		**** */
dcl 1 ch_nfo_ar (1:max_iom_nb) aligned,
    2 ch_entry (0:max_ch_nb) like ch_nfo;


/* ****	BASED   **** */

/*   Arguments  */
dcl 1 arg_info like heals_arg_info aligned based (heals_arg_info_p);


/* ****	MISC. DECLARATIONS		**** */
dcl (addr, before, null, substr) builtin;
dcl  cleanup condition;

/* FF */

/* ****	INCLUDE FILES	**** */
%include heals_arg_info;
%include heals_io_report_args;
%include iocb;

/* ********	END OF DECLARATIONS 	******** */

/* FF */
/* ********	PROCEDURE		******** */

/* ****	Procedure Initialization	**** */

	on cleanup call clean_up;

/*  Init returns.  */
	r_code = 0;

/*  Init pointers.  */
	flags_p = addr (flags_word);
	heals_ior_args_p = addr (real_p);

/*  Init heals_ior_args pointers.  */
	real_p.ior_flags_p = addr (ior_flags_word);
	real_p.ior_prms_p = addr (real_ior_prms);
	real_p.ch_nfo_ar_p = addr (ch_nfo_ar);
	real_p.ioerr_log_sw_p = null ();
	real_p.ior_avars_p = addr (real_ior_avars);

/*  Init flags.  */
	ior_flags_word = "0"b;
	if io_rprt then flags.io_error = "1"b;		/* flag for io_error_report */
	if sorted_io_rprt then flags.sorted_io_error = "1"b; /* flag for sorted_io_error_report */
	if media_data then flags.media_rprt = "1"b;
	if ^flags.io_error & ^flags.sorted_io_error & ^flags.media_rprt
	then do;					/* then return with error code */
	  arg_info.err_nb = 11;
	  r_code = error_table_$noarg;
	  return;
	end;
	if trace_sw then flags.trace = "1"b;
	else flags.trace = "0"b;
	ior_flags.trace = flags.trace;

/*  Init heals_ior_args parameters.  */
	ior_prms.max_iom_nb_a = max_iom_nb;
	ior_prms.max_ch_nb_a = max_ch_nb;
	ior_prms.max_tape_nb_a = max_tape_nb;
	ior_prms.max_line_cnt_a = max_line_cnt;

/*  Init all else.  */
	arg_info.err_nb = 0;

/* ****	End Procedure Initialization    **** */

/*  Run information.  */
	clock_time = clock_ ();
	call date_time_ (clock_time, date_time);
	date = substr (date_time, 1, 8);
	time = substr (date_time, 11, 6);
	if flags.trace
	then call ioa_ ("^a run info: date ^a, time ^a, version ^d of ^a.",
	  whoami, date, time, version_nb, version_date);

/*  Set iom, channel, and device data.  */
	call heals_scan_config_ (heals_ior_args_p, code);
	if code ^= 0 then call proc_err (19);

/* ****	Generate HEALS io reports.   * *** */

/*  Attach heals_ioerr_log file  */
	call iox_$attach_ioname (ioerr_log_sw, real_p.ioerr_log_sw_p, "vfile_ " ||
	  before (get_pdir_ (), " ") || ">heals_ioerr_log", code);
	if code ^= 0 then call proc_err (12);

	call heals_gen_ioerr_log_ (heals_arg_info_p, heals_ior_args_p, code);
	if code ^= 0 then call proc_err (18);

/*  Set output switch pointer to heals_reports switch pointer.  */
	if arg_info.report_iocbp = null () then call proc_err (21);
	outsw_p = arg_info.report_iocbp;

/*  Print configuration table.  */
	if ^ior_flags.no_recs
	then do;
	  call ioa_$ioa_switch (outsw_p,
	    "^vxCHANNEL ASSIGNMENT TABLE AT TIME OF HEALS RUN
^vxRUN DATE: ^a^vxRUN TIME: ^a,
^vxSYSTEM_ID:^x^13a^2xSITE_ID:^x^a^/",
	    13, 13, date, 1, time,
	    13, arg_info.system_id, arg_info.installation_id);

	  call ioa_$ioa_switch (outsw_p,
	    "^13xIOM^8xCHNL^9xDEVICE^10xMODEL
^13xNUM^9xNUM^11xNAME^9xNUMBER^/");

	  do i = 1 to max_iom_nb;			/* run through ch_nfo_ar */
	    do j = 0 to max_ch_nb;
	      ch_nfo_p = addr (ch_nfo_ar.ch_entry (i, j));
	      if ch_nfo.i_set
	      then do; ch_nr = j;
	        if ch_nfo.model = 9999		/* dummy model number */
	        then call ioa_$ioa_switch (outsw_p,
		"^15x^1d^10x^2a^11x^4a",
		i, ch_nr, ch_nfo.dev_nam);
	        else call ioa_$ioa_switch (outsw_p,
		"^15x^1d^10x^2a^11x^4a^11x^d",
		i, ch_nr, ch_nfo.dev_nam, ch_nfo.model);
	      end;
	    end;
	  end;
	  call ioa_$ioa_switch (outsw_p, "^|");
	end;

/*  Select reports.  */
	if flags.io_error
	then call heals_io_report_gen_ (heals_arg_info_p, heals_ior_args_p, code);
	if code ^= 0 then call proc_err (29);
	if flags.sorted_io_error
	then call heals_sorted_report_gen_ (heals_arg_info_p, heals_ior_args_p, code);
	if code ^= 0 then call proc_err (28);
	if flags.media_rprt
	then call heals_media_sort_gen_ (heals_arg_info_p, heals_ior_args_p, code);
						/*  Clean up and return to heals_report.  */
	call clean_up;
	return;					/* all done, normal return */

/* FF  */
proc_err:	proc (proc_err_nb);
dcl  proc_err_nb fixed bin;
	  r_code = code;				/* return error code */
	  arg_info.err_nb = proc_err_nb;		/* return unique proc_err number */
	  call com_err_ (code, whoami, "Procedure error number = ^d.", proc_err_nb);
	  call clean_up;
	  goto err_return;
	end proc_err;

clean_up:	proc;
	  if code ^= 0 then call iox_$close (arg_info.iocbp, code); /* close heals_log file */
	  if real_p.ioerr_log_sw_p ^= null ()
	  then do; if real_p.ioerr_log_sw_p -> iocb.open_descrip_ptr ^= null ()
	    then call real_p.ioerr_log_sw_p -> iocb.close (real_p.ioerr_log_sw_p, code);
	    if real_p.ioerr_log_sw_p -> iocb.attach_descrip_ptr ^= null ()
	    then call real_p.ioerr_log_sw_p -> iocb.detach_iocb (real_p.ioerr_log_sw_p, code);
	  end;
	  call delete_$path (get_pdir_ (), "heals_ioerr_log", dl_sws, whoami, code);
	  call delete_$path (get_pdir_ (), "heals_sort_log", dl_sws, whoami, code);
	  return;
	end clean_up;

err_return:
	return;

trace: tr: entry;
dcl  trace_sw bit (1) aligned int static init ("0"b);
dcl  trace_state char (3);

	trace_sw = ^trace_sw;
	if trace_sw
	then trace_state = "on";
	else trace_state = "off";
	call ioa_ ("Trace state is ^a.", trace_state);
	return;

        end heals_io_reports_;
