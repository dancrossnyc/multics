/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Coded by A. Downing July 1976.
   Modified by A. Downing 02/07/77 to report un-implemented arguments.
   print_heals_message is a utility for inspecting and/or modifying messages in
   the perminent heals log */
phm: print_heals_message: proc;
%include heals_arg_info;
%include heals_state;
%include heals_message;
dcl  buffer char (2048) aligned;
dcl  match_sw bit (1) init ("0"b);
dcl  update_sw bit (1) init ("0"b);
dcl  match_string char (64) varying init ("");
dcl  mt fixed bin (71) init (0);
dcl  m_time char (16) init ("");
dcl  sn fixed bin (35) init (0);
dcl (div_part, remainder, skip) fixed bin;
dcl  args fixed bin;
dcl  arg char (arg_len) based (arg_p);
dcl  arg_len fixed bin;
dcl  arg_p ptr init (null ());
dcl  i fixed bin;
dcl  act_len fixed bin (21);
dcl  command char (16) varying init ("");
dcl  code fixed bin (35);
dcl  iocbp ptr init (null ());
dcl  hcs_$initiate entry (char (*), char (*), char (*),
     fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  read_list_$prompt entry options (variable);
dcl (ioa_, com_err_) entry options (variable);
dcl (iox_$close, iox_$detach_iocb) entry (ptr, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$delete_record entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  log_path char (168) ext static aligned init (">system_control_1>heals_dir>heals_log"); /* default log */
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  error_table_$badopt ext static fixed bin (35);
dcl  error_table_$noarg ext static fixed bin (35);
dcl  error_table_$file_busy ext static fixed bin (35);
dcl  cleanup condition;

	heals_log_path_name = log_path;
	i = index (reverse (heals_log_path_name), ">");
	i = length (heals_log_path_name) - i;
	call hcs_$initiate
	  (substr (heals_log_path_name, 1, i),
	  "heals_log_info", "", 0, 0, heals_state_p, code);
	args = cu_$arg_count ();
	if args < 2 then do;
	  call com_err_ (error_table_$noarg, "print_heals_message", "at least two arguments are required.");
	  go to finished;
	end;
	i = 1;
	do while (i <= args);
	  call cu_$arg_ptr (i, arg_p, arg_len, code);
	  if code ^= 0 then do;
	    call com_err_ (code, "print_heals_message");
	    go to finished;
	  end;
	  if arg = "-seq_num" then do;
	    i = i + 1;
	    call cu_$arg_ptr (i, arg_p, arg_len, code);
	    if code ^= 0 then do;
	      call com_err_ (code, "print_heals_message");
	      go to finished;
	    end;
	    sn = convert (sn, arg);
	  end;
	  else if arg = "-match" then do;
	    i = i + 1;
	    call cu_$arg_ptr (i, arg_p, arg_len, code);
	    if code ^= 0 then do;
	      call com_err_ (code, "print_heals_message");
	      go to finished;
	    end;
	    match_string = arg;
	    match_sw = "1"b;
	  end;
	  else if arg = "-time" then do;
	    i = i + 1;
	    call cu_$arg_ptr (i, arg_p, arg_len, code);
	    if code ^= 0 then do;
	      call com_err_ (code, "print_heals_message");
	      go to finished;
	    end;
	    call convert_date_to_binary_ (arg, mt, code);
	    if code ^= 0 then do;
	      call com_err_ (code, "print_heals_message", "error converting message time ^a", arg);
	      go to finished;
	    end;
	  end;
	  else if arg = "-update" then
	    update_sw = "1"b;
	  else do;
	    call com_err_ (error_table_$badopt, "print_heals_message",
	      "^a", arg);
	    go to finished;
	  end;
	  i = i + 1;
	end;					/* end of arg loop */
	heals_message_p = addr (buffer);
	on cleanup call terminate;
	if ^update_sw then
	  call iox_$attach_ioname ("heals_io", iocbp,
	  "vfile_ " || before (heals_log_path_name, " "), code);
	else call iox_$attach_ioname ("heals_io", iocbp,
	  "vfile_ " || before (heals_log_path_name, " ") ||
	  " -extend", code);
	if code ^= 0 then do;
iox_error:
	  call com_err_ (code, "print_heals_message");
	  go to finished;
	end;
	if ^update_sw then
	  call iox_$open (iocbp, 4 /* seq in */, "0"b, code);
	else call iox_$open (iocbp, 10 /* keyed_seq update */, "0"b, code);
	if code ^= 0 then go to iox_error;

	call iox_$read_record (iocbp, heals_message_p, length (buffer), act_len, code);
	if code ^= 0 then do;
read_error:
	  call com_err_ (code, "print_heals_message", "error reading from heals_log.");
	  go to iox_error;
	end;
	call read_log;				/* get started with 1st msg */
read_loop: do while ("1"b);
	  if heals_message.time >= mt then do;
	    do while (heals_message.seq_num < sn);
	      call read_log;
	    end;
	    if match_sw then
	      do while (index (heals_message.text, match_string) = 0);
	      call read_log;
	    end;
	    call date_time_ ((heals_message.time), m_time);
	    call ioa_ ("seq_num ^d at ^a tally of ^d; ^/text: ^a.",
	      heals_message.seq_num, m_time, heals_message.tally, heals_message.text);
	    if update_sw then
command_loop:   do while ("1"b);
	      call get_command;
	      if command = "delete" then do;
	        call iox_$delete_record (iocbp, code);
	        if code ^= 0 then do;
		call com_err_ (code, "print_heals_message",
		  "could not delete the record.");
		go to finished;
	        end;
	      end;
	      else if command = "next" then go to next_msg;
	      else if command = "data" |
	      command = "display_data" then do;
	        div_part = divide (heals_message.data_size, 8, 17, 0);
	        remainder = mod (heals_message.data_size, 8);
	        skip = bin (remainder > 0, 17, 0);
	        call ioa_ (
		"octal data:^v(^/^w ^w ^w ^w ^w ^w ^w ^w^)^v(^/^)^v(^w ^)",
		div_part, skip, remainder, heals_message.data);
	      end;
	      else if command = "quit" |
	      command = "q" |
	      command = "stop" |
	      command = "s" then
	        go to finished;
	    end command_loop;
	  end;
next_msg:
	  call read_log;
	end read_loop;

finished:	call terminate;
	return;

terminate: proc;					/* for preparing to return to command level */
	  if iocbp ^= null () then
	    call iox_$close (iocbp, code);
	  if iocbp ^= null () then
	    call iox_$detach_iocb (iocbp, code);
	  iocbp = null ();
	  return;
	end terminate;

read_log:	proc;					/* for getting heals_log messages */
	  call iox_$read_record (iocbp, heals_message_p, length (buffer), act_len, code);
	  if code ^= 0 then
	    if code ^= error_table_$end_of_info then go to read_error;
	    else go to finished;
	  else;
	  return;
	end read_log;
get_command: proc;

queery:
	  call read_list_$prompt ("enter command	", command);
	  if command ^= "delete" &
	  command ^= "next" &
	  command ^= "data" &
	  command ^= "display_data" &
	  command ^= "quit" &
	  command ^= "q" &
	  command ^= "s" &
	  command ^= "stop" then do;
bad_command:
	    call ioa_ ("^a is not a valid command.", command);
	    go to queery;
	  end;
	  return;
	end get_command;
        end print_heals_message;
