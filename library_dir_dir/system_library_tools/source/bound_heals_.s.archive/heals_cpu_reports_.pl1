/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* Coded March 1976 by A. Downing.
   This routine is responsible for printing heals cpu error messages that
   are found in the heals log. */
/* Modified 11-82 by F. W. Martinson to fix bugs in report column alignment
   and pointer register reporting */
heals_cpu_reports_: proc (datap, code);
%include heals_arg_info;
%include syserr_message;
%include heals_message;
%include mc;/*mc for machine conditions.*/
dcl  datap ptr;
dcl  code fixed bin (35);
dcl  bin_clock fixed bin (71) init (clock_ ());
dcl  runtime char (16) init ("");
dcl						/* declare temporary registers */
     index_regs (0:7) bit (36) aligned,			/* actually each index fits in right half */
     exponent_register bit (36) aligned,		/* put in right end of word */
     timer_register bit (36) aligned,			/* put in right end */
     fault_reg bit (36) aligned,
     ralr bit (36) aligned;				/* 3 last bits for ring alarm reg */
dcl  hist_reg (0:127) bit (36) aligned based (hist_reg_ptr);
dcl (i, j) fixed bin;
dcl  hist_reg_ptr ptr init (null ());
dcl 1 arg_info aligned based (datap) like heals_arg_info;
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  error_table_$long_record ext static fixed bin (35);
dcl  title char (132) varying int static aligned init
    ("^-cpu_error report for Multics system ^a.");
dcl (time1, time2) char (16);
dcl  dummy_p (8) ptr aligned,
     even_word_buf fixed bin (71) aligned dim (8) based;
dcl  buffer char (2048) aligned;
dcl  buf_p ptr init (null ());
dcl  buf_len fixed bin (21);
dcl  act_len fixed bin (21);
dcl  clock_ entry returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  com_err_ entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  hran_$hranl entry (ptr, ptr, bit (1));
dcl  hran_$hrlgnd entry (ptr);
dcl (addr, addrel, index, null) builtin;
dcl  cleanup condition;
dcl  cpu_fault_count fixed bin (21) init (0);

	call date_time_ (bin_clock, runtime);
	buf_p, heals_message_p = addr (buffer);
	buf_len = length (buffer);
	syserr_msgp = addr (heals_message.rest_of_record);
	arg_info.err_nb = 0;
	on cleanup begin;
	     arg_info.err_nb = -1;
	     call clean_up;
	end;
	if arg_info.report_iocbp = null () then do;
	     arg_info.err_nb = -1;
	     call com_err_ (0, "heals_cpu_reports_",
		"the report stream is not open.");
	     return;
	end;
	call date_time_ ((arg_info.from_time), time1);
	call date_time_ ((arg_info.to_time), time2);
	call ioa_$ioa_switch (arg_info.report_iocbp,
	     "^|CPU_ERROR_REPORT:^8xfrom^x^16a^7xto^x^16a
HEALS RUN OF ^16a ON SYSTEM ^a^3/",
	     time1, time2, runtime, arg_info.system_id);
	do while ("1"b);
	     call iox_$read_record (arg_info.iocbp,
		buf_p, buf_len, act_len, code);
	     if code ^= 0 then
		if code = error_table_$end_of_info then go to copying_done;
		else do;
		     if code = error_table_$long_record then
			arg_info.err_nb = 16;
		     else arg_info.err_nb = -1;
		     call clean_up;
		     return;
		end;
	     else;
	     if heals_message.time > arg_info.to_time then go to copying_done; /* finished */
	     if index (heals_message.text, "hardware_fault:") > 0 then do;
		unspec (addr (dummy_p) -> even_word_buf) = unspec (heals_message.data);
		mcp = addr (heals_message.data (1));
		hist_reg_ptr = addrel (mcp, size (mc)); /* point at history register data */
		if cpu_fault_count = 0 then
		     call hran_$hrlgnd (arg_info.report_iocbp);
		call date_time_ ((heals_message.time), time1);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "^|syserr sequence #^d, at ^a;", heals_message.seq_num, time1);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "syserr_log text: ^a", heals_message.text);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "^/scu_data:^2-^x^2(^4(^w^x^)^/^2-^x^)", mc.scu);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "pointer registers:^1-^x^2(^4(^12p^2x^)^/^2-^x^)", dummy_p);

/* copy register data into aligned fields */
		index_regs (*) = ""b;
		exponent_register, timer_register, ralr = ""b;
		substr (index_regs (*), 19, 18) = mc.x (*); /* copy */
		substr (exponent_register, 29, 8) = mc.e; /* copy */
		substr (timer_register, 10, 27) = mc.t; /* copy */
		substr (ralr, 34, 3) = mc.ralr;	/* copy */
		fault_reg = mc.fault_reg;		/* copy */
						/* data copied into aligned fields for ioa_ */

		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "index registers:^1-^x^2(^4(^6w^x^)^/^2-^x^)", index_regs);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "^/a: ^w q: ^w  exp: ^3w timer: ^9w ring_alarm: ^1w",
		     mc.a, mc.q, exponent_register, timer_register, ralr);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "^/eis_info:^2-^x^2(^4(^w^x^)^/^2-^x^)", mc.eis_info);
		call ioa_$ioa_switch (arg_info.report_iocbp,
		     "fault register:^1-^1x^w", fault_reg);
		call ioa_$ioa_switch (arg_info.report_iocbp, "^/NUM^-OU registers^2-^7xCU registers");
		j = 0;
		do i = 0 by 2 to 30;
		     j = j+1;
		     call ioa_$ioa_switch (arg_info.report_iocbp, "^o^-^w ^w^12x^w ^w",
			j, hist_reg (i), hist_reg (i+1),
			hist_reg (i+32), hist_reg (i+33));
		end;
		call ioa_$ioa_switch (arg_info.report_iocbp, "^/NUM^-DU registers^3-AU registers");
		do i = 64 by 2 to 94;
		     j = j+1;
		     call ioa_$ioa_switch (arg_info.report_iocbp, "^o^-^w ^w^12x^w ^w",
			j-16, hist_reg (i), hist_reg (i+1),
			hist_reg (i+32), hist_reg (i+33));
		end;
		call ioa_$ioa_switch (arg_info.report_iocbp, "");
		call hran_$hranl (hist_reg_ptr, arg_info.report_iocbp, "0"b);
		cpu_fault_count = cpu_fault_count + 1;
	     end;					/* end of copying onc fault record */
	end;					/* end of while loop */
copying_done:
	arg_info.err_nb = 0;
	if cpu_fault_count = 0 then
	     call ioa_$ioa_switch (arg_info.report_iocbp,
	     "^/^-NO CPU FAULTS FOUND DURING SPECIFIED TIME RANGE.");
	call ioa_$ioa_switch (arg_info.report_iocbp,
	     "^/END: CPU_ERROR_REPORT");
	call clean_up;

clean_up:	proc;
	     if arg_info.iocbp ^= null () then
		call iox_$close (arg_info.iocbp, code);
	     return;
	end clean_up;
	return;
     end heals_cpu_reports_;
