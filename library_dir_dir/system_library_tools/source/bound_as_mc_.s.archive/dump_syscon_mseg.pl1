/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-09-02,Parisek), approve(87-09-03,MECR0005),
     audit(87-09-02,GDixon), install(87-09-03,MR12.1-1098):
     Expand the quit_bits display to include all possible 504 bits. (phx20974)
                                                   END HISTORY COMMENTS */


dump_syscon_mseg:
dump_msg: proc;

/* automatic */

dcl  argl fixed bin,				/* Length of current argument */
     argno fixed bin,				/* Number of current argument */
     code fixed bin,				/* For errors */
     i fixed bin,					/* A temporary index */
     j fixed bin,					/* Another */
     k fixed bin,					/* Another */
     n_blocks fixed bin,
     highest_quit_bits fixed bin(24),			/* quit_bits to display */
    (temp_stream, temp_source) char (32);
	

declare
         argp pointer,				/* Pointer to current argument */
         messp pointer,				/* Pointer to current block */
         msegp pointer;				/* Pointer to the message segment */

declare
         barg char (argl) based (argp),			/* For getting arguments */
         date_string char (25),
         dirname char (168),
         entname char (32),
         flagn_arr (4) char (16) varying int static init ("continue, ", "introduction, ", "farewell, ", "sentinel, "),
         list char (64) varying;			/* For printing bit names &c */

declare
         addr builtin,
         length builtin,
         null builtin,
         rel builtin,
         string builtin,	
         substr builtin,
         unspec builtin;

declare
         com_err_ entry options (variable),
         cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
         date_time_$hundredths entry (fixed bin (71), char (*)),
         expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
         find_bit_$last_on entry (bit (*) aligned) returns (fixed bin (24)),
         hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin),
         ioa_ entry options (variable);

/* include files */

%include syscon_mseg;

/* program */


/* This program dumps a "message" segment of the message routing facility */

/* First get the pathname of the seg from the command line */
	argno = 1;
	call cu_$arg_ptr (argno, argp, argl, code);
	if code ^= 0 then do;
	     call com_err_ (code, "dump_msg", "Pathname of message segment");
	     return;
	end;

	call expand_path_ (argp, argl, addr (dirname), addr (entname), code);
	if code ^= 0 then do;
	     call com_err_ (code, "dump_msg", "^a", barg);
	     return;
	end;

	call hcs_$initiate (dirname, entname, "", 0, 1, msegp, code);
	if msegp = null then do;
	     call com_err_ (code, "dump_msg", "^a>^a", dirname, entname);
	     return;
	end;

	call ioa_ ("lock:^2-^12.3b^/locked_by_pid:^-^12.3b",
	     msegp -> syscon_mseg.mlock, msegp -> syscon_mseg.locked_by_pid);

	call ioa_ ("process_id:^-^12.3b", msegp -> syscon_mseg.current_process_id);

	call ioa_ ("regular channel:^-^72.3b", unspec (msegp -> syscon_mseg.ipc_el.channel));

	call ioa_ ("protocol channel:^-^72.3b", unspec (msegp -> syscon_mseg.proto_el.channel));

/* Prepare list of flags that are on & print it */
	list = "";
	highest_quit_bits = find_bit_$last_on (msegp->syscon_mseg.quit_bits);
	if msegp -> syscon_mseg.flags.test_mode then
	     list = "test_mode, ";
	if msegp -> syscon_mseg.flags.receiver_woken then
	     list = list || "receiver_woken, ";
	if list ^= ""
	then call ioa_ ("flags:^2-^a", substr (list, 1, length (list) - 2));

	call ioa_ ("first_free_buffer:^-^d", msegp -> syscon_mseg.first_free_buffer);
	call ioa_ ("last_assigned_buffer:^-^d", msegp -> syscon_mseg.last_assigned_buffer);
	call ioa_ ("no_of_streams:^-^d", msegp -> syscon_mseg.no_of_streams);

	call ioa_ ("quit bits:^-^.3b", substr (msegp -> syscon_mseg.quit_bits, 1, highest_quit_bits));
	call ioa_ ("mescount:^2-^d", msegp -> syscon_mseg.mescount);
	call ioa_ ("output_wait:^-^[ON^;OFF^]", msegp -> syscon_mseg.output_wait);

	n_blocks = msegp -> syscon_mseg.last_assigned_buffer;

	begin;					/* allocate space to hold trace flags */

dcl  already_printed bit (n_blocks) unaligned;

	     already_printed = "0"b;

	     call print_chain ("protocol", msegp -> syscon_mseg.first_proto);
	     call print_chain ("regular", msegp -> syscon_mseg.first_message);
	     call print_chain ("free", msegp -> syscon_mseg.first_free_buffer);

	     if (^already_printed) ^= ""b then do;
		call ioa_ ("Not in any chain:");
		do k = 1 to n_blocks;
		     if substr (already_printed, k, 1) = "0"b
		     then call print_block (k);
		end;
	     end;

	     return;


print_chain:   proc (chain_name, chain_head);

declare
         chain_name char (*),
         chain_head fixed bin,
         chainlen fixed bin,
         this_message fixed bin;

		chainlen = 0;
		this_message = chain_head;

		do while (this_message ^= 0);		/* find out how long chain is */
		     if ^substr (already_printed, this_message, 1)
		     then do;
			substr (already_printed, this_message, 1) = "1"b;
			chainlen = chainlen + 1;
			this_message = msegp -> syscon_mseg.message (this_message).next_message;
		     end;
		     else this_message = 0;		/* quit because we've looped back */
		end;
		call ioa_ ("There are ^d blocks in the ^a chain", chainlen, chain_name);

		if chainlen = 0 then return;		/* No chain to print */

		call ioa_ ("OFFSET  # NEXT SOURCE     STREAM       INDICES TIME        FLAGS");

pb:		this_message = chain_head;
		do i = 1 to chainlen;
		     messp = addr (msegp -> syscon_mseg.message (this_message));

		     if messp -> debug_info.flag = -1 then do; /* debugging info block */
			call ioa_ ("^6.3b ^3d  DEBUG INFO:", rel (messp), this_message);
			call date_time_$hundredths (messp -> debug_info.time, date_string);
			call ioa_ ("^-time:^-^a", date_string);
			call ioa_ ("^-last_pid:^-^12.3b", messp -> debug_info.last_pid);
			call ioa_ ("^-first_msg:^-^d", messp -> debug_info.first_msg);
			call ioa_ ("^-last_msg:^-^d", messp -> debug_info.last_msg);
			call ioa_ ("^-first_pro:^-^d", messp -> debug_info.first_pro);
			call ioa_ ("^-last_pro:^-^d", messp -> debug_info.last_pro);
			call ioa_ ("^-free_chain:^-^d", messp -> debug_info.free_chain);
			go to next_block;
		     end;

		     list = "";
		     do j = 1 to 4;
			if substr (string (message_block.flags), j, 1) then
			     list = list || flagn_arr (j);
		     end;

		     if list ^= ""
		     then list = substr (list, 1, length (list) -2);

		     call date_time_$hundredths (message_block.time_sent, date_string);
		     if unspec (message_block.from_source) = ""b
		     then temp_source = "(unset)";
		     else temp_source = message_block.from_source;

		     if unspec (message_block.from_stream) = ""b
		     then temp_stream = "(unset)";
		     else temp_stream = message_block.from_stream;

		     call ioa_ ("^6.3b ^3d ^3d ^10a ^10a ^3d ^3d ^a ^a",
			rel (messp),
			this_message,
			message_block.next_message,
			temp_source,
			temp_stream,
			message_block.source_index,
			message_block.stream_index,
			date_string, list);
		     call ioa_ ("^3d ^a", message_block.length,
			substr (message_block.message_body, 1, message_block.length));
		     this_message = message_block.next_message;

next_block:
		end;
		return;

print_block:	entry (chain_head);
		chainlen = 1;
		goto pb;

	     end print_chain;

	end;
     end dump_syscon_mseg;
