/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style4 */
mc_quiesce_: proc;

/* Just a little something to wait until all message coordinator terminals are done. */
/* 82-10-28 Written  E. N. Kittlitz. */
/* Modified 1984-10-29 BIM for iox_ */

/****^  HISTORY COMMENTS:
  1) change(86-07-01,Swenson), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek):
     Added support for test system control; no hanging up of process' login
     channel.
  2) change(87-02-05,GDixon), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek):
     Modified for change to mc_anstbl.incl.pl1.
                                                   END HISTORY COMMENTS */

dcl  atex fixed bin;
dcl  code fixed bin (35);
dcl  have_queued_output bit (1) aligned;
dcl  qp ptr;
dcl  quiesce_tries fixed bin;

dcl  1 write_status_info aligned,
       2 evchn fixed bin (71),
       2 output_pending bit (1);

dcl  ME char (12) static init ("mc_quiesce_") options (constant);

dcl  (addr, null) builtin;

dcl  error_table_$out_of_sequence fixed bin (35) ext static;

dcl  get_process_id_ entry () returns (bit (36));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  mc_wakeups_$set_shutdown_limits entry;
dcl  phcs_$ring_0_message entry (char (*) aligned);
dcl  sub_err_ entry () options (variable);
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));

	mc_ansp = sc_stat_$mc_ansp;
	if ^sc_stat_$mc_is_on |
	     get_process_id_ () ^= mc_anstbl.mc_procid then
	     call sub_err_ (error_table_$out_of_sequence, ME, ACTION_CANT_RESTART);
	call mc_wakeups_$set_shutdown_limits;
	have_queued_output = "1"b;

	do quiesce_tries = 1 to 10 while (have_queued_output);
	     have_queued_output = "0"b;
	     do atex = 1 to mc_anstbl.current_size;
		mc_atep = addr (mc_anstbl.entry (atex));
		qp = mc_ate.queue_ptr;
		if mc_ate.active &			/* shall we even LOOK at this entry? */
		     mc_ate.tra_vec > MC_WAIT_ANSWERBACK &
		     qp ^= null then do;		/* really has a queue segment */
		     if device_queue.no_of_messages > 0 then do;
			have_queued_output = "1"b;	/* have something that can reasonably be done */
			call hcs_$wakeup (mc_anstbl.mc_procid, device_queue.channel, 0, (0));
			call timer_manager_$sleep (1, "10"b); /* 1 micro-second */
		     end;
		end;				/* active mc_ate */
	     end;					/* for each entry in the answer table */
	end;					/* try it a bunch of times */
	if have_queued_output then			/* still stuff left over */
	     call phcs_$ring_0_message ("mc_quiesce_: Unable to quiesce message coordinator. Some queued messages will be lost.");

/* now wait for ttys to stop chattering */

	have_queued_output = "1"b;
	do quiesce_tries = 1 to 60 while (have_queued_output); /* try for up to one minute */
	     have_queued_output = "0"b;
	     do atex = 1 to mc_anstbl.current_size;
		mc_atep = addr (mc_anstbl.entry (atex));
		call iox_$control (mc_ate.iocb, "write_status", addr (write_status_info), code);
		if code ^= 0 | ^write_status_info.output_pending
		then do;
		     call iox_$control (mc_ate.iocb, "hangup", null (), (0));
		     mc_ate.tra_vec = -1;
		end;
		else have_queued_output = "1"b;	/* STILL more */
	     end;					/* tty to check */

	     call timer_manager_$sleep (1, "11"b);	/* sleep 1 second */
	end;					/* try for 1 minute */

	if have_queued_output then
	     call phcs_$ring_0_message ("mc_quiesce_: some terminals still have output in progress. They will be hungup.");

	return;
%page;
%include device_queue;
%page;
%include mc_anstbl;
%page;
%include sc_stat_;
%page;
%include sub_err_flags;
%include iox_entries;
     end mc_quiesce_;
