/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */

/* format: style2,idind30,indcomtxt */

/* Typed-segment primitives for Message Coordinator ACS segments  */

/**** 1984-12-21, BIM: created from suffix_ms_ */

suffix_mcacs_:
     procedure ();


/* Common Parameters */

	dcl     P_desired_version	        character (*) parameter;
	dcl     P_dirname		        character (*) parameter;
						/* directory containing the message segment */
	dcl     P_ename		        character (*) parameter;
						/* name of the message segment */
	dcl     P_code		        fixed binary (35) parameter;

/* suffix_info and list_switches Parameters */

	dcl     P_switch_list_ptr	        ptr parameter;
	dcl     P_suffix_info_ptr	        ptr parameter;

/* chname_file Parameters */

	dcl     P_old_name		        character (*) parameter;
						/* name to be deleted */
	dcl     P_new_name		        character (*) parameter;
						/* name to be added */

/* copy parameters */

	dcl     P_copy_options_ptr	        ptr parameter;

/* Parameters used by most ACL entries */

	dcl     P_acl_ptr		        pointer parameter;
						/* -> an ACL array structure */


/* list_acl Parameters */

	dcl     P_user_area_ptr	        pointer parameter;
						/* -> area where to allocate listed_acl if non-null */


/* replace_acl Parameters */

	dcl     P_no_sysdaemon	        bit (1) parameter;
						/* ON => do not add explicit *.SysDaemon.* term */

/* switch Parameters */

	dcl     P_switch_name	        char (*) parameter;
	dcl     P_value		        bit (1) aligned parameter;

/* (get set)_max_length and bit_count parameters */

	dcl     P_max_length	        fixed bin (19) parameter;

/* get_user_access_modes parameters */

	dcl     (P_modes, P_exmodes)	        bit (36) aligned;
	dcl     P_ring		        fixed bin;
	dcl     P_user_name		        char (*);

/* ring brackets */

	dcl     P_rings		        (2) fixed bin (3);

/* Remaining declarations */

	dcl     acl_error		        bit (1) aligned;
	dcl     ex_acl_ptr		        pointer;
	dcl     user_area_ptr	        pointer;
	dcl     user_area		        area based (user_area_ptr);
	dcl     system_free_area	        area based (get_system_free_area_ ());

	dcl     idx		        fixed binary;

	dcl     error_table_$argerr	        fixed binary (35) external;
	dcl     error_table_$unsupported_operation
				        fixed binary (35) external;
	dcl     error_table_$unimplemented_version
				        fixed bin (35) ext static;
	declare error_table_$not_seg_type     fixed bin (35) ext static;

	declare cu_$generate_call	        entry (entry, ptr);
	declare cu_$arg_list_ptr	        entry returns (pointer);
	dcl     (get_system_free_area_, get_user_free_area_)
				        entry () returns (pointer);

	dcl     hcs_$get_user_access_modes    entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				        bit (36) aligned, fixed bin (35));
	dcl     sub_err_		        entry () options (variable);


	declare V_entry		        entry variable options (variable);

	dcl     cleanup		        condition;

	dcl     null		        builtin;

	declare VALID_ACL_XMODES	        bit (36) aligned init
						/** abcdefghijklmnopqrstuvwxyz */
				        /*         */ ("001100000000000011000000000000000000"b) int static
				        options (constant);


/**** format: off */
%page; %include suffix_info;
%page; %include acl_structures;
%page; %include access_mode_values;
%include sub_err_flags;
%include copy_flags;
%include file_system_operations;
/* format: on */



/* Deletes a message segment */

delentry_file:
     entry (P_dirname, P_ename, P_code);

	call FORWARD (FS_DELENTRY_FILE, cu_$arg_list_ptr ());
	return;



chname_file:
     entry (P_dirname, P_ename, P_old_name, P_new_name, P_code);

	call FORWARD (FS_CHNAME_FILE, cu_$arg_list_ptr ());
	return;


copy:
     entry (P_copy_options_ptr, P_code);

	call FORWARD (FS_COPY, cu_$arg_list_ptr ());
	return;


validate:
     entry (P_dirname, P_ename, P_code);

	P_code = error_table_$not_seg_type;
	if index (P_ename, ".") > 0
	then if before (reverse (rtrim (P_ename)), ".") = reverse ("mcacs")
	     then P_code = 0;
	return;


suffix_info:
     entry (P_suffix_info_ptr);

	suffix_info_ptr = P_suffix_info_ptr;

	if suffix_info.version ^= SUFFIX_INFO_VERSION_1
	then call sub_err_ (error_table_$unimplemented_version, "bad suffix info version", ACTION_CANT_RESTART, null (),
		(0), "Invalid version ^a in call to suffix_ms_$suffix_info.", suffix_info.version);

	suffix_info.type = "mcacs";
	suffix_info.type_name = "Message Coordinator source ACS";
	suffix_info.plural_name = "Message Coordinator source ACS's";
	string (suffix_info.flags) = ""b;
	suffix_info.extended_acl = "0"b;
	suffix_info.has_switches = "0"b;
	suffix_info.modes = "cdqr";
	suffix_info.max_mode_len = 4;
	suffix_info.num_ring_brackets = 2;		/* gate bracket dull */
	string (suffix_info.copy_flags) = ""b;
	suffix_info.copy_flags.names, suffix_info.copy_flags.acl, suffix_info.copy_flags.max_length,
	     suffix_info.copy_flags.safety_switch = "1"b;

	suffix_info.info_pathname = "extended_access.gi.info";

	return;

%page;

add_acl_entries:
     entry (P_dirname, P_ename, P_acl_ptr, P_code);

	acl_ptr = P_acl_ptr;
	if acl_ptr = null ()
	then do;
		P_code = error_table_$argerr;
		return;
	     end;

	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then do;
		P_code = error_table_$unimplemented_version;
		return;
	     end;

	acl_error = "0"b;
	general_acl.entries (*).status_code = 0;
	do idx = 1 to general_acl.count;
	     if (general_acl.entries (idx).mode & VALID_ACL_XMODES) ^= ""b
	     then do;
		     general_acl.entries (idx).status_code = error_table_$argerr;
		     acl_error = "1"b;
		end;
	end;
	if acl_error
	then do;
		P_code = error_table_$argerr;
		return;
	     end;

	acl_count = general_acl.count;
	allocate general_extended_acl in (system_free_area) set (ex_acl_ptr);
	ex_acl_ptr -> general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
	do idx = 1 to acl_count;
	     ex_acl_ptr -> general_extended_acl.entries (idx).access_name = general_acl.entries (idx).access_name;
	     ex_acl_ptr -> general_extended_acl.entries (idx).mode = ""b;
	     ex_acl_ptr -> general_extended_acl.entries (idx).extended_mode = general_acl.entries (idx).mode;
	     ex_acl_ptr -> general_extended_acl.entries (idx).status_code = 0;
	end;

	call MAKE_ENTRY (FS_ADD_EXTENDED_ACL_ENTRIES);
	call V_entry (P_dirname, P_ename, ex_acl_ptr, P_code);

	general_acl.entries (*).status_code = ex_acl_ptr -> general_extended_acl.entries (*).status_code;
	free general_extended_acl;
	return;


list_acl:
     entry (P_dirname, P_ename, P_desired_version, P_user_area_ptr, P_acl_ptr, P_code);

	acl_ptr = P_acl_ptr;
	ex_acl_ptr = null ();

	if acl_ptr ^= null ()
	then do;					/* wants to list specific entries */
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then do;
			P_code = error_table_$unimplemented_version;
			return;
		     end;

		acl_count = general_acl.count;
		if acl_count = 0
		then return;
		allocate general_extended_acl in (system_free_area) set (ex_acl_ptr);
		ex_acl_ptr -> general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
		do idx = 1 to acl_count;
		     ex_acl_ptr -> general_extended_acl.entries (idx).access_name =
			general_acl.entries (idx).access_name;
		     ex_acl_ptr -> general_extended_acl.entries (idx).status_code = 0;
		end;

		call MAKE_ENTRY (FS_LIST_EXTENDED_ACL);
		call V_entry (P_dirname, P_ename, "", null (), ex_acl_ptr, P_code);
		do idx = 1 to acl_count;
		     general_acl.entries (idx).mode = ex_acl_ptr -> general_extended_acl.entries (idx).extended_mode;
		     general_acl.entries (idx).status_code =
			ex_acl_ptr -> general_extended_acl.entries (idx).status_code;
		end;
		free ex_acl_ptr -> general_extended_acl;
	     end;


	else do;					/* wants to list an acl entirely */
		if P_desired_version ^= GENERAL_ACL_VERSION_1
		then do;
			P_code = error_table_$unimplemented_version;
			return;
		     end;

		user_area_ptr = P_user_area_ptr;
		if user_area_ptr = null ()
		then user_area_ptr = get_user_free_area_ ();

		call MAKE_ENTRY (FS_LIST_EXTENDED_ACL);
		call V_entry (P_dirname, P_ename, GENERAL_EXTENDED_ACL_VERSION_1, get_system_free_area_ (),
		     ex_acl_ptr, P_code);

		if P_code ^= 0
		then return;

		if ex_acl_ptr = null ()
		then do;
			P_acl_ptr = null ();
			return;
		     end;

		acl_count = max (1, ex_acl_ptr -> general_extended_acl.count);
		allocate general_acl in (user_area);
		P_acl_ptr = acl_ptr;
		general_acl.count = ex_acl_ptr -> general_extended_acl.count;
		if general_acl.count = 0
		then go to LIST_FREE_RETURN;

		general_acl.version = GENERAL_ACL_VERSION_1;
		do idx = 1 to acl_count;
		     general_acl.entries (idx).access_name =
			ex_acl_ptr -> general_extended_acl.entries (idx).access_name;
		     general_acl.entries (idx).mode = ex_acl_ptr -> general_extended_acl.entries (idx).extended_mode;
		     general_acl.entries (*).status_code = 0;
		end;
LIST_FREE_RETURN:
		free ex_acl_ptr -> general_extended_acl;
	     end;

	return;
%page;

delete_acl_entries:
     entry (P_dirname, P_ename, P_acl_ptr, P_code);

	acl_ptr = P_acl_ptr;
	if acl_ptr = null ()
	then do;
		P_code = error_table_$argerr;
		return;
	     end;

	call FORWARD (FS_DELETE_ACL_ENTRIES, cu_$arg_list_ptr ());

%page;

/**** NOTE -- the default SysDaemon access for an mcacs is null.
      Therefore, the no_sysdaemon switch is a noop. */

replace_acl:
     entry (P_dirname, P_ename, P_acl_ptr, P_no_sysdaemon, P_code);

	ex_acl_ptr = null ();

	acl_ptr = P_acl_ptr;
	if acl_ptr = null ()
	then do;
		P_code = error_table_$argerr;
		return;
	     end;

	on cleanup
	     begin;
		if ex_acl_ptr ^= null ()
		then do;
			free ex_acl_ptr -> general_extended_acl;
			ex_acl_ptr = null ();
		     end;
	     end;

	acl_count = general_acl.count;

	call MAKE_ENTRY (FS_REPLACE_EXTENDED_ACL);


	if acl_count = 0				/* cannot have no_sysdaemon */
	then do;
		acl_count = 1;
		allocate general_extended_acl in (system_free_area) set (ex_acl_ptr);
		ex_acl_ptr -> general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
		ex_acl_ptr -> general_extended_acl.count = 0;
		call V_entry (P_dirname, P_ename, ex_acl_ptr, "1"b, P_code);
		free ex_acl_ptr -> general_extended_acl;
		return;
	     end;

	allocate general_extended_acl in (system_free_area) set (ex_acl_ptr);
	ex_acl_ptr -> general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;

	do idx = 1 to acl_count;			/* no need to splice in funny acl */
	     ex_acl_ptr -> general_extended_acl.entries (idx).access_name = general_acl.entries (idx).access_name;
	     ex_acl_ptr -> general_extended_acl.entries (idx).extended_mode = general_acl.entries (idx).mode;
	     ex_acl_ptr -> general_extended_acl.entries (idx).mode = ""b;
	     ex_acl_ptr -> general_extended_acl.entries (idx).status_code = 0;

	end;

	call V_entry (P_dirname, P_ename, ex_acl_ptr, "1"b, P_code);

	general_acl.entries (*).status_code = ex_acl_ptr -> general_extended_acl.entries (*).status_code;
	free ex_acl_ptr -> general_extended_acl;

	return;


get_switch:
     entry (P_dirname, P_ename, P_switch_name, P_value, P_code);

	call FORWARD (FS_GET_SWITCH, cu_$arg_list_ptr ());

set_switch:
     entry (P_dirname, P_ename, P_switch_name, P_value, P_code);

	call FORWARD (FS_SET_SWITCH, cu_$arg_list_ptr ());

%page;
get_max_length:
     entry (P_dirname, P_ename, P_max_length, P_code);

	call FORWARD (FS_GET_MAX_LENGTH, cu_$arg_list_ptr ());

set_max_length:
     entry (P_dirname, P_ename, P_max_length, P_code);

	call FORWARD (FS_SET_MAX_LENGTH, cu_$arg_list_ptr ());

list_switches:
     entry (P_desired_version, P_user_area_ptr, P_switch_list_ptr, P_code);

	call FORWARD (FS_LIST_SWITCHES, cu_$arg_list_ptr ());


get_ring_brackets:
     entry (P_dirname, P_ename, P_rings, P_code);

	declare three_rings		        (3) fixed bin (3);

	call MAKE_ENTRY (FS_GET_RING_BRACKETS);
	call V_entry (P_dirname, P_ename, three_rings, P_code);
	P_rings (1) = three_rings (1);
	P_rings (2) = three_rings (2);
	return;

set_ring_brackets:
     entry (P_dirname, P_ename, P_rings, P_code);

	three_rings (1) = P_rings (1);
	three_rings (2), three_rings (3) = P_rings (2);
	call MAKE_ENTRY (FS_SET_RING_BRACKETS);
	call V_entry (P_dirname, P_ename, three_rings, P_code);
	return;


get_user_access_modes:
     entry (P_dirname, P_ename, P_user_name, P_ring, P_modes, P_exmodes, P_code);

	P_exmodes = ""b;				/* msegs, like dirs, have only modes, no exmodes */
	call hcs_$get_user_access_modes (P_dirname, P_ename, P_user_name, P_ring, ((36)"0"b), P_modes, P_code);
	return;


MAKE_ENTRY:
     procedure (OP);

	declare OP		        char (64);

	call MAKE_ENTRY_ (OP);
	return;
FORWARD:
     entry (OP, Arg_list_ptr);

	declare Arg_list_ptr	        pointer;

	call MAKE_ENTRY_ (OP);
	call cu_$generate_call (V_entry, Arg_list_ptr);
	go to FORWARD_RETURNS;
     end MAKE_ENTRY;

FORWARD_RETURNS:
	return;

MAKE_ENTRY_:
     procedure (OP);

	declare OP		        char (64);
	declare code		        fixed bin (35);

	declare fs_util_$make_entry_for_type  entry (character (*), character (*), entry, fixed binary (35));

	call fs_util_$make_entry_for_type ("-segment", (OP), V_entry, code);
	if code ^= 0
	then call sub_err_ (code, "suffix_mcacs_", ACTION_CANT_RESTART, null (), (0),
		"Failed to find entrypoint for ""^a"" for segments.", OP);
     end MAKE_ENTRY_;

     end suffix_mcacs_;
