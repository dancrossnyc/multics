/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* 82-10-26 Written  E. N. Kittlitz */
/* Modified for oper info... -E. A. Ranzenbach */
/* Modified for iox_ BIM 1984-10-30 */

/****^  HISTORY COMMENTS:
  1) change(86-03-31,MSharpe), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek):
     Modified to recognize new mc_acte structure; to accept -pending & -p to
     print pending entries; to print pending entries, as well as active ones,
     by default.
  2) change(87-02-05,GDixon), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek):
     Modified for change to mc_anstbl.incl.pl1.
                                                   END HISTORY COMMENTS */

/* format: style2 */
display_mc_anstbl:
     procedure options (variable);

	dcl     argc		 fixed bin;
	dcl     argl		 fixed bin (21);
	dcl     argn		 fixed bin;
	dcl     argp		 ptr;
	dcl     code		 fixed bin (35);
	dcl     dn		 char (168);
	dcl     en		 char (32);
	dcl     found_a_channel	 bit (1) aligned;
	dcl     header_sw		 bit (1) aligned;
	dcl     header_only_sw	 bit (1) aligned;
	dcl     mode		 fixed bin init (1);
	dcl     name_count		 fixed bin;
	dcl     name_error_printed_sw	 bit (1) aligned;
	dcl     names		 (100) char (32);
	dcl     octal_sw		 bit (1) aligned;
	dcl     path		 char (168);
	dcl     prev_argl		 fixed bin (21);
	dcl     prev_argp		 ptr;

	dcl     ME		 char (32) init ("display_mc_anstbl") static options (constant);

	dcl     arg		 char (argl) based (argp) unaligned;
	dcl     prev_arg		 char (prev_argl) based (prev_argp) unaligned;

	dcl     (addr, null, char, codeptr, environmentptr, hbound, rtrim, unspec)
				 builtin;

	dcl     cleanup		 condition;

	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     date_time_$format	 entry (character (*), fixed binary (71), character (*), character (*))
				 returns (character (250) var);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     match_star_name_	 entry (char (*), char (*), fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	dcl     error_table_$noarg	 fixed bin (35) ext static;
%page;
	mc_ansp = null;
	header_sw = "1"b;
	octal_sw = "0"b;
	header_only_sw = "0"b;
	path = "";
	mode = 1;
	name_error_printed_sw = "0"b;
	name_count = 0;

	on cleanup call clean_up;

	call cu_$arg_count (argc, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		go to exit;
	     end;

	do argn = 1 to argc;
	     call cu_$arg_ptr (argn, argp, argl, code);
	     if char (arg, 1) = "-"
	     then do;
		     if arg = "-all"
		     then mode = 0;
		     else if arg = "-a"
		     then mode = 0;
		     else if arg = "-pending"
		     then mode = 3;
		     else if arg = "-p"
		     then mode = 3;
		     else if arg = "-octal"
		     then octal_sw = "1"b;
		     else if arg = "-oc"
		     then octal_sw = "1"b;
		     else if arg = "-no_octal" | arg = "-noc"
		     then octal_sw = "0"b;
		     else if arg = "-no_header"
		     then header_sw = "0"b;
		     else if arg = "-nhe"
		     then header_sw = "0"b;
		     else if arg = "-header" | arg = "-he"
		     then header_sw = "1"b;
		     else if arg = "-header_only"
		     then header_only_sw = "1"b;
		     else if arg = "-pathname" | arg = "-pn"
		     then do;
			     if path ^= ""
			     then do;
				     call com_err_ (0, ME, "^a specified more than once.", arg);
				     return;
				end;
			     prev_argp = argp;
			     prev_argl = argl;
			     argn = argn + 1;
			     if argn > argc
			     then do;
missing_arg:
				     call com_err_ (error_table_$noarg, ME, "Following: ^a.", prev_arg);
				     return;
				end;
			     call cu_$arg_ptr (argn, argp, argl, code);
			     if char (arg, 1) = "-"
			     then go to missing_arg;
			     path = arg;
			end;
		     else if arg = "-active"
		     then mode = 1;
		     else if arg = "-entire"
		     then mode = 2;
		end;				/* -control_arg */
	     else do;				/* no leading -, call it a tty name */
		     if name_count >= hbound (names, 1)
		     then do;
			     if ^name_error_printed_sw
			     then do;
				     name_error_printed_sw = "1"b;
				     call com_err_ (0, ME,
					"More than ^d channel names specified. Starting with ""^a"", channel names ignored.",
					hbound (names, 1), arg);
				end;
			end;			/* too many names */
		     else do;			/* add name */
			     name_count = name_count + 1;
			     names (name_count) = arg;
			end;			/* add name */
		end;				/* non -control_arg */
	end;					/* argument processing loop */

	if path = ""
	then path = ">system_control_1>mc_anstbl";
	call expand_pathname_ (path, dn, en, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", path);
		go to exit;
	     end;
	call initiate_file_ (dn, en, R_ACCESS, mc_ansp, (0), code);
	if mc_ansp = null
	then do;
		call com_err_ (code, ME, "^a", pathname_ (dn, en));
		go to exit;
	     end;

	call do_dump;

	if ^header_only_sw & ^found_a_channel
	then call com_err_ (0, ME, "No MC terminals ^[matched selection criteri^[on^;a^]^;found^].", (name_count > 0),
		(name_count = 1));

exit:
	call clean_up;
	return;


clean_up:
     proc;
	if mc_ansp ^= null
	then call terminate_file_ (mc_ansp, 0, TERM_FILE_TERM, (0));
     end clean_up;

%page;
do_dump:
     proc;

	dcl     i			 fixed bin;
	dcl     j			 fixed bin;
	dcl     limit		 fixed bin;
	dcl     mcode		 fixed bin (35);

	found_a_channel = "0"b;
	call ioa_ ("^/DUMP OF ^a", pathname_ (dn, en));
	if header_sw | header_only_sw
	then do;
		call ioa_ ("max_size: ^21t^d", mc_anstbl.max_size);
		call ioa_ ("current_size: ^21t^d", mc_anstbl.current_size);
		call ioa_ ("mc_procid:^21t^w", mc_anstbl.mc_procid);
		call ioa_ ("sysdir:^21t^a", mc_anstbl.sysdir);
		call ioa_ ("mrtp:^21t^p", mc_anstbl.mrtp);
		call ioa_ ("vconsp:^21t^p", mc_anstbl.vconsp);
		call ioa_ ("cons_cont_proc:^21t^p, ^p", codeptr (mc_anstbl.cons_cont_proc),
		     environmentptr (mc_anstbl.cons_cont_proc));
		call ioa_ ("con_rec");
		call ioa_ ("  mc_ate_ptr:^21t^p", mc_anstbl.mc_ate_ptr);
		call ioa_ ("  ec_id:^21t^24.3b", unspec (mc_anstbl.ec_id));
		call ioa_ ("  seq_num:^21t^d", mc_anstbl.seq_num);
		call ioa_ ("  offset:^21t^oo", mc_anstbl.offset);
		call ioa_ ("  flags");
		call ioa_ ("    enabled:^21t^[on^;off^]", mc_anstbl.con_rec.flags.enabled);
		call ioa_ ("    active:^21t^[on^;off^]", mc_anstbl.con_rec.flags.active);
		call ioa_ ("n_sources:^21t^d", mc_anstbl.n_sources);
		call ioa_ ("max_sources:^21t^d", mc_anstbl.max_sources);
		call ioa_ ("current_time:^21t^a", date_time_$format ("date_time", mc_anstbl.current_time, "", ""));
	     end;					/* header_sw */
	if header_only_sw
	then go to done_dump;

	if mode = 2
	then limit = mc_anstbl.max_size;
	else limit = mc_anstbl.current_size;
	do i = 1 to limit;
	     mc_atep = addr (mc_anstbl.entry (i));
	     if ^mc_ate.pending & mode = 3
	     then goto next_ate;
	     else if ^(mc_ate.pending | mc_ate.active) & mode = 1
	     then go to next_ate;
	     if name_count > 0
	     then do;				/* must match a specified name */
		     mcode = -1;			/* no match yet */
		     do j = 1 to name_count while (mcode ^= 0);
						/* scan the entire list */
			call match_star_name_ ((mc_ate.real_tty_name), names (j), mcode);
			if mcode ^= 0		/* may have specified the vchn name */
			then call match_star_name_ ((mc_ate.virtual_tty_name), names (j), mcode);
		     end;
		     if mcode ^= 0
		     then go to next_ate;
		end;
	     found_a_channel = "1"b;
	     call ioa_ ("^/ENTRY AT ^p", mc_atep);
	     call ioa_ ("virtual_tty_name:^21t^a", rtrim (mc_ate.virtual_tty_name, " "));
	     call ioa_ ("real_tty_name:^21t^a", rtrim (mc_ate.real_tty_name, " "));
	     call ioa_ ("flags:");
	     call ioa_ ("  active:^21t^[on^;off^]", mc_ate.active);
	     call ioa_ ("  virtual:^21t^[on^;off^]", mc_ate.virtual);
	     call ioa_ ("  pending:^21t^[on^;off^]", mc_ate.pending);
	     call ioa_ ("  the_system_console:^21t^[on^;off^]", mc_ate.flags.the_system_console);
	     call ioa_ ("  a_system_console:^21t^[on^;off^]", mc_ate.flags.a_system_console);
	     call ioa_ ("  signed_on:^21t^[on^;off^]", mc_ate.flags.signed_on);
	     call ioa_ ("  reply_restricted:^21t^[on^;off^]", mc_ate.flags.reply_restricted);
	     call ioa_ ("  broadcast:^21t^[on^;off^]", mc_ate.flags.broadcast);
	     call ioa_ ("  broadcast_all:^21t^[on^;off^]", mc_ate.flags.broadcast_all);
	     call ioa_ ("  vchn_requires_accept:^21t^[on^;off^]", mc_ate.flags.vchn_requires_accept);

	     call ioa_ ("oper_info:");
	     call ioa_ ("^2xpersonid:^21t""^a""", rtrim (mc_ate.oper_info.personid, " "));
	     call ioa_ ("^2xlast_input_time:^21t^a",
		date_time_$format ("date_time", mc_ate.oper_info.last_input_time, "", ""));
	     call ioa_ ("cdte_ptr:^21t^p", mc_ate.cdtep);
	     call ioa_ ("restrict_reply:^21t^a", rtrim (mc_ate.restrict_reply, " "));
	     call ioa_ ("n_casts:^21t^d", mc_ate.n_casts);
	     call ioa_$nnl ("cast:^21t");
	     do j = 1 to hbound (mc_ate.cast, 1) - 1;
		call ioa_$nnl ("^a, ", rtrim (mc_ate.cast (j), " "));
	     end;
	     call ioa_ ("^a", rtrim (mc_ate.cast (j), " "));
	     call ioa_ ("sci_ptr:^21t^p", mc_ate.sci_ptr);
	     call ioa_ ("iocb:^21t^p", mc_ate.iocb);
	     call ioa_ ("tra_vec:^21t^d", mc_ate.tra_vec);
	     call ioa_ ("queue_ptr:^21t^p", mc_ate.queue_ptr);
	     call ioa_ ("queue_event:^21t^24.3b", unspec (mc_ate.queue_event));
	     call ioa_ ("event:^21t^24.3b", unspec (mc_ate.event));

	     call ioa_ ("ls_procid:^21t^w", mc_ate.ls_procid);
	     call ioa_ ("ls_term_ev_chn:^21t^24.3b", unspec (mc_ate.ls_term_ev_chn));
	     call ioa_ ("ls_resp_ev_chn:^21t^24.3b", unspec (mc_ate.ls_resp_ev_chn));
	     call ioa_ ("ls_handle:^21t^2w", unspec (mc_ate.ls_handle));
	     call ioa_ ("authority");
	     call ioa_ ("  privilege:^21t^w", mc_ate.privilege);
	     call ioa_ ("control");
	     call ioa_ ("  inhibit:^21t^[on^;off^]", mc_ate.control.inhibit);
	     call ioa_ ("  output_wait:^21t^[on^;off^]", mc_ate.control.output_wait);
	     call ioa_ ("  output_pending:^21t^[on^;off^]", mc_ate.control.output_pending);
next_ate:
	end;					/* do over mc_anstbl ate's */

done_dump:
	call ioa_ ("^/END DUMP OF ^a", pathname_ (dn, en));

     end do_dump;
%page;
%include access_mode_values;
%page;
%include mc_anstbl;
%page;
%include terminate_file;

     end display_mc_anstbl;
