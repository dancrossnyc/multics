/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_vct: proc;

/* DUMP_VCT - dump virtual console table

   THVV */

dcl (path, dn) char (168) aligned,
     en char (32) aligned,
     srch (10) char (32) aligned,
     line char (120) aligned,
     datstr char (16) aligned,
     vstr char (64) aligned,
    (i, j, k, l, m, n) fixed bin,
    (time, fb71) fixed bin (71),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35),
    (p, q) ptr;

dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;

dcl  clock_ entry () returns (fixed bin (71)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

%include vcons_tab;

dcl  vconsp ptr;
dcl  vcep ptr;

dcl  typer (3) char (4) aligned int static init ("tty", "log", "sink");

/* ------------------------------------------------------- */

	m = 0;
	l = 0;
	k = 2;
	path = ">system_control_1>vcons_tab";
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to vct1;
	path = bchr;
arglp:	call cu_$arg_ptr (k, ap, al, ec);
	if ec ^= 0 then go to vct1;
	m = m + 1;
	if m > 10 then go to vct1;
	if bchr = "*" then l = m;
	srch (m) = bchr;
	k = k + 1;
	go to arglp;

vct1:	i = index (path, " ");
	call expand_path_ (addr (path), i, addr (dn), addr (en), ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "dump_vct", "^a", path);
	     return;
	end;
	call hcs_$initiate (dn, en, "", 0, 1, vconsp, ec);
	if vconsp = null then go to er;

	if m = 0 then do;
	     call date_time_ ((clock_ ()), datstr);
	     call ioa_ ("^/Virtual Console Table - ^a^/", datstr);

	     call ioa_ ("lock:^15x^w", vcons_tab.lock);
	     call ioa_ ("no_of_vcons:^8x^d", vcons_tab.no_of_vcons);
	     call ioa_ ("flags:^14x^w", vcons_tab.flags);
	end;

	if l ^= 0 then do;
	     srch (l) = "";
	     go to pvv;
	end;
	if m = 0 then do;
pvv:	     call ioa_ ("^/VIRTUAL CONSOLE: ^a^/", vcons_tab.star_entry.vcons);
	     call pvcons (addr (vcons_tab.star_entry));
	end;

	do i = 1 to vcons_tab.no_of_vcons;
	     if ^vcons_tab.vcons (i).flags.inuse then go to skip;
	     if m = 0 then go to pvv1;
	     do n = 1 to m;
		if vcons_tab.vcons (i).vcons = srch (n) then do;
		     srch (n) = "";
		     go to pvv1;
		end;
	     end;
	     go to skip;

pvv1:	     call ioa_ ("^/VIRTUAL CONSOLE: ^a^/", vcons_tab.vcons (i).vcons);
	     call pvcons (addr (vcons_tab.vcons (i)));

skip:	end;

	if m = 0 then call ioa_ ("^/End^/");
	else do i = 1 to m;
	     if srch (i) ^= "" then call ioa_ ("vcons ""^a"" not in vcons_tab", srch (i));
	end;
	call hcs_$terminate_noname (vconsp, ec);
	return;

pvcons:	proc (sp);

dcl  sp ptr;

dcl  k fixed bin,
     vstr char (64) varying,
     vconst char (32) aligned;

	     vcep = sp;
	     vstr = "inuse";
	     call ioa_ ("^5xflags:^9x^a", vstr);
	     call ioa_ ("^5xno_of_dest:^4x^d^/", vcons.no_of_dest);
	     do k = 1 to vcons.no_of_dest;

		call ioa_ ("^10xdest ^d:^3x^4a ^a ^p", k,
		typer (vcons.dest (k).type), vcons.dest (k).dest, vcons.dest (k).queue_seg_ptr);

	     end;

	end pvcons;

     end dump_vct;
