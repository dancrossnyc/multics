/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
mc_wakeups_: procedure;

/* This procedure is part of the message coordinator.  It receives
   all wakeups handled by the message coordinator.

   The message coordinator was originally created by Dennis Capps
   with help from TH VanVleck in October of 1972.
   "mc_wakeups_" originally created by Bill Silver in May, 74.
   Modified 751215 by PG to make any_other handler just return, and fix error handling
   Modified June 1976 by Larry Johnson to use new ocdim_ alarm order call
   Modified August 1976 by Robert Coren to use CDT entry for tty channels
   Modified 770725 by PG to fix bug in folding of multi-line messages
   Modified 25 Sept 1979 by T. Casey to allow setting of message limits.
   Modified June 1981 by T. Casey for MR9.0 to add metering.
   Modified 830620 by E. A. Ranzenbach for new console recovery scheme...
   *	84-11-16, W. Olin Sibert: Modified to handle zero wakeup from
   *	   ocdcm_ as signal to deactivate console recovery.
   *    1985-01-02, BIM: new logging and other improvements.
*/

/****^  HISTORY COMMENTS:
  1) change(86-02-21,MSharpe), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek), install(87-08-06,MR12.1-1054):
     Modified to use new version of mc_anstbl.incl.pl1;  Fixed bug in "router"
     that lost stream.source when using the star_entry.
  2) change(87-02-05,GDixon), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek), install(87-08-06,MR12.1-1054):
     Modified for a change to mc_anstbl.incl.pl1.  All entrypoints that refer
     to mc_anstbl must now set the automatic variable mc_ansp from
     mc_ansp_stat.
  3) change(87-09-17,Parisek), audit(87-09-21,GDixon),
     approve(87-09-21,MECR0008), install(87-09-21,MR12.1-1114):
     Return with error if status code equals error_table_$unable_to_do_io from
     calling mrd_util_.  This status code represents a condition error
     signalled from mrd_util_. (phx20928)
                                                   END HISTORY COMMENTS */

/* Declaration of Parameters */
declare
         arg_mc_ansp ptr,
         arg_mcmp ptr,
         arg_messp ptr,
         arg_event_call_info_ptr ptr,
         arg_temp_SDBp ptr;

/* Declarations of POINTERS  */
declare
         buffer_ptr pointer,
         log_buffer_ptr pointer,
         tty_buffer_ptr pointer,
         hismp ptr,					/* to message seg of a source */
         linep ptr,					/* to something in a device queue to be printed */
         mc_ansp_stat ptr int static init (null ()),	/* to mc_anstbl */
         mcmp ptr int static init (null),		/* to message seg for message coordinator */
         messp ptr int static init (null),		/* to a particular message */
         mrtp ptr int static init (null),		/* to Message Routing Table */
         qp ptr,					/* to queue of lines to be typed on a device */
         streamp ptr,				/* to a stream entry in MRT */
         temp_SDBp ptr int static init (null),		/* to temp_SDB */
         vcep ptr,					/* to an entry in virtual console table */
         vconsp ptr int static init (null);		/* to Virtual CONSole table */

/* Fixed binary quantities */
declare
         ackn fixed bin (71) init (0),			/* event message for calls to hcs_$wakeup */
         code fixed bin (35),				/* error code */
         dest fixed bin,				/* Index when looping thru phys devices in vcons_tab */
         i fixed bin,				/* a temporary index */
         k fixed bin,				/* loop counter for protocol and router */
         last_line fixed bin,				/* 1 link back in q of lines to be typed */
         limit fixed bin,				/* No of lines typer_out will try to type */
         lng fixed bin,				/* Length of formatted string for output */
         mrt_source fixed bin,			/* Index of source entry in MRT */
         mrt_stream fixed bin,			/* Index of stream entry in source entry in MRT */
         n fixed bin (21),				/* No of characters to be typed */
         nt fixed bin (21),				/* No of characters actually typed */
         offset fixed bin,				/* No of characters already typed */
         this_line fixed bin,				/* Current link in q of lines to be typed */
         ucs_recursion fixed bin initial (0),		/* Recursion counter for any_other handler */
         vc fixed bin,				/* Index when looping thru vcons in MRT */
         vce fixed bin,				/* Index of Virtual Console table Entry */
         wait_time fixed bin (71) int static init (5),	/* Settable time to wait til try to print some more */
         max_limit fixed bin int static init (20),	/* settable number of messages to print before waiting */
         when_sent fixed bin (71);			/* Postmark from each message. */
declare  log_buffer_length fixed bin (21);
declare  state fixed bin;

/* Character strings */

declare  (buffer_space,
         log_buffer_space) char (500) unaligned;

declare  tty_buffer_space char (132) unaligned;
declare  timestamp char (50) varying;

declare
         buffer char (nt) based (buffer_ptr),
         chain char (8),				/* whence the message is to be taken */
         log_buffer char (log_buffer_length) based (log_buffer_ptr),
         stream_source char (32),			/* saves the stream.source in case star entry is used */
         pigeon_hole char (32),			/* Name of a message segment to be initiated */
         sysdir char (168) int static init (">system_control_1"), /* ditto */
						/* where to find the message segs */
         time char (24);				/* for putting in messages */

dcl  NL char (1) aligned int static options (constant) init ("
");
dcl  stars char (16) aligned int static options (constant) init ("
***********
");						/* There are three BEL chars in this string */

/* BIT strings */
declare
         created_seg (8) bit (1) init ((8) (1)"0"b),	/* In case we want to write messages */
         dont_log bit (1),				/* "1"b=>Sentinel-- Needn't be logged */
         sendalarm bit (1);				/* TRUE if alarm message, at distribute */

/* builtins */

dcl  (addr, index, max, min, null, string, substr, length, addcharno, byte, rtrim)
			 builtin;

dcl  any_other condition;

/* EXTERNAL ENTRIES */
declare
         as_any_other_handler_ entry (character (*), entry, label, label),
         com_err_ entry options (variable),
         com_err_$suppress_name entry () options (variable),
         date_time_$format entry (character (*), fixed binary (71), character (*), character (*))
	    returns (character (250) var),
         hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
         hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35)),
         ioa_$rsnnl entry () options (variable),
         ioa_ entry options (variable),
         mc_con_rec_$output entry (fixed bin (71)),
         mc_util_$mrt_source entry (char (*) aligned, fixed bin, fixed bin (35)),
         mc_util_$mrt_stream entry (fixed bin, char (*) aligned, ptr, fixed bin, fixed bin (35)),
         mc_util_$queue entry (ptr, bit (1), ptr, fixed bin, fixed bin, fixed bin (35)),
         mrd_util_$discard_remainder entry (ptr, fixed bin, fixed bin (35)),
         mrd_util_$read entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (21), char (*), ptr, fixed bin, fixed bin (35)),
         timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));

declare  log_write_$message entry (pointer, fixed binary, character (*), pointer, fixed binary (35));

declare  hphcs_$syserr entry options (variable);
declare  hphcs_$syserr_error_code entry options (variable);
declare  sys_log_ entry options (variable);
declare  sys_log_$error_log entry options (variable);
declare  timed_io_$put_chars entry (pointer, fixed binary (71), pointer, fixed binary (21), fixed binary (21),
	    fixed binary (35));
declare  (as_$meter_enter, as_$meter_exit) entry (fixed bin);

/* EXTERNAL constants */
declare
         (
         error_table_$ioname_not_found,
         error_table_$no_message ext,
         error_table_$notalloc,
         error_table_$timeout,
         error_table_$unable_to_do_io) fixed bin (35) ext static;

/* STRUCTURES */
declare
         1 based_ackn based,
	 2 source_index fixed bin (35),
	 2 stream_index fixed bin (35);

%page;

/* Program */

init: entry (arg_mc_ansp, arg_temp_SDBp, arg_mcmp, arg_messp);

/* This entry is called by mc_util_$init.  It sets up the internal static
   variables that were once part of the unified message_coordr_ procedure.
*/

	mc_ansp, mc_ansp_stat = arg_mc_ansp;
	temp_SDBp = arg_temp_SDBp;
	mcmp = arg_mcmp;
	messp = arg_messp;

	sysdir = mc_anstbl.sysdir;
	mrtp = mc_anstbl.mrtp;
	vconsp = mc_anstbl.vconsp;

	return;


/* This entry is called when a wakeup arrives on the
   message coordinator's protocol channel.  This happens
   whenever a source attaches an i/o stream through mrd_
   or detaches such a stream (if no previous protocol message is still pending)
   or when this program sends itself a wakeup after processing 20 messages. */

protocol: entry (arg_event_call_info_ptr);

	event_call_info_ptr = arg_event_call_info_ptr;
	on any_other call as_any_other_handler_ ("mc_wakeups_$prototol", mc_wakeups_handler_, ABORT_EXIT, ABORT_EXIT);
	call as_$meter_enter (MSGCORD_METER);		/* meter cpu time and paging used by this procedure */
	chain = "proto";
	do k = 1 to 20;				/* Do at most 20 messages. */

/* Read part (or all) of the first available message in the chain
   and get its index. */
	     call mrd_util_$read (temp_SDBp, addr (buffer_space), 0, length (buffer_space), nt, chain, messp, state, code);
	     if code = error_table_$no_message |
		code = error_table_$unable_to_do_io then goto METER_EXIT;
						/* There weren't 20 messages. */
	     when_sent = message_block.time_sent;
	     if message_block.flags.introduction then goto introduction;
	     if message_block.flags.farewell then goto farewell;

/* If we get here, complain and */
	     call hphcs_$syserr (ANNOUNCE, "mc_wakeups_: Bad protocol: index = ^d", message_block.next_message);
	     goto attached;

introduction:					/* This is where we fill in the MRT so that
						   the router can do its work .      */

/* Get indices in MRT */
/* First the source */
	     call mc_util_$mrt_source (message_block.from_source, mrt_source, code);
	     if code ^= 0 then
		if code ^= error_table_$ioname_not_found then /* A real error */
		     do;
gripe:		     call hphcs_$syserr_error_code (ANNOUNCE, code, "mc_wakeups_", "Protocol error: ^a ^a",
			message_block.from_source, message_block.from_stream);
		     goto attached;
		end;
		else do;				/* This is a source for which no routing has been provided.  Make one. */
		     if mrt_source = 0 then mrt_source, /* Need to allocate new entry */
			     MRT.no_of_sources = MRT.no_of_sources + 1;
		     MRT.source (mrt_source).source = message_block.from_source;
		     MRT.source (mrt_source).hismess = null;
		     MRT.source (mrt_source).no_of_streams = 0;
		     MRT.source (mrt_source).flags.init = "0"b; /* "message" segment not initiated */
		     MRT.source (mrt_source).flags.valid = "1"b; /* info otherwise correct */
		     goto make_stream;
		end;

/* Next the stream. */
	     call mc_util_$mrt_stream (mrt_source, message_block.from_stream, streamp, mrt_stream, code);
	     if code ^= 0 then
		if code ^= error_table_$ioname_not_found then goto gripe; /* A real error */
		else do;				/* No routing provided for this stream.  Make new entry. */
		     if mrt_stream = 0 then		/* Need to allocate new entry */
			if MRT.source (mrt_source).no_of_streams < 8 then /* Room for another? */
make_stream:		     mrt_stream,
				MRT.source (mrt_source).no_of_streams = MRT.source (mrt_source).no_of_streams + 1;
			else do;			/* No room. */
			     code = error_table_$notalloc;
			     goto gripe;
			end;
		     streamp = addr (MRT.source (mrt_source).stream (mrt_stream));
		     string (stream.flags) = "0"b;
		     stream.flags.valid = "1"b;	/* Entry contains correct info */
		     stream.source = message_block.from_source;
		     stream.stream = message_block.from_stream;
		     stream.ourmess = mcmp;
		     stream.source_index = mrt_source;
		     stream.stream_index = mrt_stream;

		     stream.no_of_vcons = MRT.star_entry.stream.no_of_vcons;

		     do vc = 1 to stream.no_of_vcons;
			stream.vcons (vc) = MRT.star_entry.stream.vcons (vc);
			stream.vcons_index (vc) = MRT.star_entry.stream.vcons_index (vc);
		     end;

		end;

/* now fill in pointer to message segment for this source */
	     if MRT.source (mrt_source).flags.init then hismp = MRT.source (mrt_source).hismess;
	     else do;				/* first time through, initiate it. */
		i = index (stream.source, " ") - 1;
		pigeon_hole = substr (stream.source, 1, i) || ".message";
		call hcs_$initiate (sysdir, pigeon_hole, "", 0, 1, hismp, code);
		if hismp = null then go to gripe;	/* EEK. message segment missing. */
		MRT.source (mrt_source).hismess = hismp;
		MRT.source (mrt_source).flags.init = "1"b; /* "message" segment now initiated */
	     end;

	     stream.hismess = MRT.source (mrt_source).hismess;
	     stream.flags.active = "1"b;		/* stream attached and sending */

/* Acknowledge the protocol, sending the indeces in the MRT */
	     addr (ackn) -> based_ackn.source_index = mrt_source;
	     addr (ackn) -> based_ackn.stream_index = mrt_stream;
	     call hcs_$wakeup (hismp -> syscon_mseg.current_process_id,
		hismp -> syscon_mseg.proto_el.channel,
		ackn, code);
	     if code ^= 0 then call com_err_ (code, "mc_wakeups_",
		     "Protocol cannot wake ^a", stream.source);
	     goto attached;

/* Reset active and send acknowledgement. */
farewell:
	     mrt_source = message_block.source_index;
	     mrt_stream = message_block.stream_index;

	     streamp = addr (MRT.source (mrt_source).stream (mrt_stream));
	     stream.flags.active = "0"b;

	     hismp = stream.hismess;

	     if hismp -> syscon_mseg.no_of_streams = 0 then MRT.source (mrt_source).flags.init = "0"b; /* More tidy */

	     ackn = 0;
	     call hcs_$wakeup (hismp -> syscon_mseg.current_process_id,
		hismp -> syscon_mseg.proto_el.channel,
		ackn, code);
attached:	     call mrd_util_$discard_remainder (temp_SDBp, state, code); /* Leave campsite as clean as found it */

	end;					/* When we have done 20, give rest of process a chance
						   But remember to do more later. */
	call hcs_$wakeup (mcmp -> syscon_mseg.current_process_id,
	     mcmp -> syscon_mseg.proto_el.channel, 0, code);
	goto METER_EXIT;

/* ROUTER - called when a wakeup arrives on the "normal" event channel.
   Daemons send a wakeup after they have sent output, and router sends itself
   a wakeup after processing 20 messages.

   Under most circumstances (stream.source <= 4 chars), the maximum line length
   will be 118 characters...just enough to fit on a TermiNet */

router: entry (arg_event_call_info_ptr);

          mc_ansp = mc_ansp_stat;
	event_call_info_ptr = arg_event_call_info_ptr;
	on any_other call as_any_other_handler_ ("mc_wakeups_$router", mc_wakeups_handler_, ABORT_EXIT, ABORT_EXIT);
	call as_$meter_enter (MSGCORD_METER);		/* meter cpu time and paging used by this procedure */
	chain = "normal";

	buffer_ptr = addr (buffer_space);
	log_buffer_ptr = addr (log_buffer_space);
	tty_buffer_ptr = addr (tty_buffer_space);

	do k = 1 to 20;				/* Do 20 messages at a time. */

/* Read part (or all) of first available message in the chain */

	     call mrd_util_$read (temp_SDBp, buffer_ptr, 0, length (buffer_space), nt, chain, messp, state, code);
	     if mc_anstbl.trace
	     then call trace_mrd_util_read;

	     if code = error_table_$no_message |
		code = error_table_$unable_to_do_io then goto METER_EXIT;
						/* There weren't 20 things in queue. */
						/* Find the MRT entry */
	     mrt_source = message_block.source_index;
	     mrt_stream = message_block.stream_index;

	     if mrt_source = 0 | mrt_stream = 0 then do;	/* AARGH! */
		call hphcs_$syserr (ANNOUNCE, "mc_wakeups_: bad message from ^a.", message_block.from_source);
		call hphcs_$syserr (ANNOUNCE, "mc_wakeups_: message is ""^a"".", substr (message_block.message_body, 1, message_block.length));
		call mrd_util_$discard_remainder (temp_SDBp, state, code);
		go to METER_EXIT;			/* for now */
	     end;

	     when_sent = message_block.time_sent;	/* Get this too while at it. */
	     streamp = addr (MRT.source (mrt_source).stream (mrt_stream));
	     hismp = stream.hismess;
	     stream_source = stream.source;		/* save this, as you won't find it in the star entry */
	     if stream.no_of_vcons = 0 then streamp = addr (MRT.star_entry.stream); /* Whoops! */

/* Set up line to be typed  */
another:	     dont_log = "0"b;
	     if message_block.flags.sentinel then do;	/* No special format */
		dont_log = "1"b;
		if nt = 0 then go to get_rest;	/* Unlikely */
		tty_buffer_ptr = addr (buffer_space);	/* reset ptr */
		lng = nt;
	     end;
	     else do;
		time = date_time_$format ("^Hd^MH", when_sent, "", "");
		if substr (buffer, nt, 1) = NL then nt = nt - 1; /* Remove extraneous nl */
		timestamp = "";			/* varying string, initialize */
		call ioa_$rsnnl (" ^a  ^4a ", timestamp, (0), time, stream_source); /* just prepare stamp */
		call ioa_$rsnnl ("^va  ^a", log_buffer_space, log_buffer_length, max (4, length (rtrim (stream_source))), stream.source, buffer);
	     end;

	     do vc = 1 to stream.no_of_vcons;		/* Send message to each virtual console */
		vce = stream.vcons_index (vc);
		sendalarm = substr (stream.flags.alarm, vc, 1); /* Set alarm switch. */
		vcep = addr (vcons_tab.vcons (vce));
		if vcons.no_of_dest = 0 then vcep = addr (vcons_tab.star_entry); /* Whoops! */

		do dest = 1 to vcons.no_of_dest;	/* Send it to each physical device */
		     if vcons.dest (dest).type = 1 then do; /* This is a typewriter */
			qp = vcons.dest (dest).queue_seg_ptr;
			if dont_log		/* just a sentinel */
			then do;
			     call mc_util_$queue (qp, sendalarm, tty_buffer_ptr, lng, mrt_source, code);
			     hismp -> syscon_mseg.mescount = hismp -> syscon_mseg.mescount + 1;
			end;
			else call queue_tty_message;	/* send one or more messages as needed to fit in 132 per message char limit */
		     end;
		     else if vcons.dest (dest).type = 2 then do; /* This is a log */
			if sendalarm then i = 2;
			else i = 1;
			if ^dont_log then		/* Interesting later? */
			     call log_write_$message (vcons.dest (dest).queue_seg_ptr, i, log_buffer, (null ()), (0));
		     end;
		     else if vcons.dest (dest).type = 3 then ; /* Sink */
		end;

	     end;
	     call check_off_message;
get_rest:	     if state ^= 0 then do;			/* Message cont more than 1 line or more chars than asked. */
		call mrd_util_$read (temp_SDBp, addr (buffer_space), 0, length (buffer_space), nt, chain, messp, state, code);
		if mc_anstbl.trace then call trace_mrd_util_read;
		if code = error_table_$unable_to_do_io then goto METER_EXIT;
		if nt ^= 0 then goto another;
	     end;
	end;
	call hcs_$wakeup (mcmp -> syscon_mseg.current_process_id,
	     mcmp -> syscon_mseg.ipc_el.channel, 0, code);
	goto METER_EXIT;				/* Fell out of loop. Big backlog.
						   Allow rest of process a chance, but insure we come back. */

check_off_message: proc;

	hismp -> syscon_mseg.mescount = hismp -> syscon_mseg.mescount - 1;
	if hismp -> syscon_mseg.mescount <= 0 then do;
	     hismp -> syscon_mseg.mescount = 0;
	     if hismp -> syscon_mseg.output_wait then do;
		hismp -> syscon_mseg.output_wait = "0"b;
		call hcs_$wakeup (hismp -> syscon_mseg.current_process_id,
		     hismp -> syscon_mseg.ipc_el.channel, 0, code);
	     end;
	end;

     end check_off_message;


/* This entry is called when a wakeup arrives on the event
   channel associated with a device queue.  This can happen
   in three ways.  When a line is placed in a previously empty queue
   a wakeup is sent to initiate processing by the typer_out.
   If the typer_out cannot complete typing all messages in a
   queue, it sets a timer to wake itself later to try again.
   If the typer_out cannot type all the characters of a given
   message it sets the output_wait switch in the mc answer
   table entry for this typewriter and expects system_control_$tty_aught
   to send a wakeup when hardcore is ready for more work.

   No lock is necessary on the device queues because mc$router and mc$typer_out
   are executed in the same process.  */

typer_out: entry (arg_event_call_info_ptr);

          mc_ansp = mc_ansp_stat;
	event_call_info_ptr = arg_event_call_info_ptr;
	on any_other call as_any_other_handler_ ("mc_wakeups_$typer_out", mc_wakeups_handler_, ABORT_EXIT, ABORT_EXIT);
	call as_$meter_enter (MSGCORD_METER);		/* meter cpu time and paging used by this procedure */

	qp = event_call_info.data_ptr;		/* What queue are we processing? */
	if device_queue.no_of_messages = 0 then goto METER_EXIT; /* Nothing to do. */
	mc_atep = device_queue.mc_atep;
	cdtep = mc_ate.cdtep;
	if mc_ate.control.inhibit then		/* Waiting for operator? */
	     do;					/* Tell mc_tty_ to talk to us */
	     mc_ate.control.output_pending = "1"b;
	     goto METER_EXIT;
	end;

	n, last_line = 0;
	this_line = device_queue.top_of_queue;		/* First message to type. */
	limit = min (max_limit, device_queue.no_of_messages); /* Total number to type. */

	do i = 1 to limit;
	     mrt_source = device_queue.line (this_line).source;
	     if mrt_source = 0 then hismp = null;
	     else hismp = MRT.source (mrt_source).hismess;
	     linep = addr (device_queue.line (this_line).string);
	     offset = device_queue.line (this_line).offset;
	     n = device_queue.line (this_line).line_length - offset;
	     if mc_anstbl.trace then begin;
declare  line char (n) based (addcharno (linep, offset));
		call sys_log_ (SL_LOG_SILENT,
		     "MC (mc_wakeups_ - typer_out): tty: ^a^[; physical channel: ^a^;^s^]; this_line: ^d; line_length: ^d; offset: ^d; n: ^d; line: ^a",
		     mc_ate.virtual_tty_name, mc_ate.virtual,
		     mc_ate.real_tty_name, this_line,
		     device_queue.line (this_line).line_length,
		     device_queue.line (this_line).offset, n, line);
	     end;
	     nt = 0;

	     if device_queue.line (this_line).alarm	/* alarm needed */
	     then if mc_ate.the_system_console
		then call iox_$control (mc_ate.iocb, "alarm", null, code);
		else call timed_io_$put_chars (mc_ate.iocb, 5 * 1000 * 1000, addr (stars), length (stars), (0), code); /* allow this to wait */

	     device_queue.line (this_line).alarm = "0"b;

	     if mc_ate.the_system_console
	     then do;
		call iox_$put_chars (mc_ate.iocb, addcharno (linep, offset), n, code);
		if code = 0 then nt = n;
	     end;
	     else do;
		call timed_io_$put_chars (mc_ate.iocb, 0, addcharno (linep, offset), n, nt, code);
		if code = error_table_$timeout then code = 0;
	     end;
	     if mc_anstbl.trace
	     then call sys_log_$error_log (SL_LOG_SILENT, code, "MC (mc_wakeups_ - typer_out)", "called put_chars nt: ^d", nt);

	     if code ^= 0 then do;
		nt = 0;
		go to finish;
	     end;

	     if nt ^= n then go to finish;		/* Hardcore buffers full. Can't do any more now */
	     last_line = this_line;			/* Useful below when unchaining */
	     this_line = device_queue.line (this_line).next_line; /* Next message to type. */
	     if hismp ^= null then call check_off_message;
	end;

	device_queue.line (last_line).next_line = device_queue.free_top; /* Unchain */
	device_queue.free_top = device_queue.top_of_queue;
	device_queue.top_of_queue = this_line;
	device_queue.no_of_messages = device_queue.no_of_messages - limit;
	if this_line = 0 then device_queue.end_of_queue = 0;
	else call timer_manager_$alarm_wakeup (wait_time, "11"b, /* More to do. Come back later. */
		device_queue.channel);
	mc_ate.control.output_wait = "0"b;		/* Did all wanted to do. */
	goto exit;

finish:
	if mc_anstbl.trace
	then call sys_log_ (SL_LOG_SILENT,
		"MC (mc_wakeups - finish): tty: ^a^[; physical channel: ^a^;^s^]; length: ^d; length transmitted ^d; offset: ^d",
		mc_ate.virtual_tty_name, mc_ate.virtual,
		mc_ate.real_tty_name, n, nt, offset);
	mc_ate.control.output_wait = "1"b;		/* Tell tty_aught to wake us when hardcore ready. */
	device_queue.line (this_line).offset = nt + offset; /* Remember how much got typed. */
	device_queue.line (this_line).not_done = "1"b;
	device_queue.no_of_messages = device_queue.no_of_messages - i + 1;
	if last_line = 0 then goto exit;		/* Stuck on first one? */
	device_queue.line (last_line).next_line = device_queue.free_top; /* No. Unchain. */
	device_queue.free_top = device_queue.top_of_queue;
	device_queue.top_of_queue = this_line;
exit:	if mc_ate.the_system_console then call iox_$control (mc_ate.iocb, "start", null, code); /* In case we stole a wakeup */
	goto METER_EXIT;

con_rec: entry (arg_event_call_info_ptr);

/* This entry is called when a wakeup arrives on the console recovery
   event channel. The event message will contain either a positive value which
   is used to recover a syserr message or a negative value which will be
   used to retrieve the message from oc_data. This message will be sent to
   used to retrieve the message from oc_data. This message will be sent to
   mc_con_rec_ for the actual work. If the event message is zero, it means
   that the console has come back into operation, and console recovery is
   deactivated; this is all handled by mc_con_rec_.
*/

          mc_ansp = mc_ansp_stat;
	event_call_info_ptr = arg_event_call_info_ptr;
	on any_other call as_any_other_handler_ ("mc_wakeups_$con_rec", mc_wakeups_handler_, ABORT_EXIT, ABORT_EXIT);
	call as_$meter_enter (MSGCORD_METER);		/* meter cpu time and paging used by this procedure */

	if ^mc_anstbl.con_rec.flags.enabled		/* Ignore wakeup if console recovery not enabled. */
	then goto METER_EXIT;

	call mc_con_rec_$output (event_call_info.message);/* process the message...		*/

	goto METER_EXIT;

/* ALL RETURNS MUST COME HERE TO TURN OFF METERING BEFORE RETURNING !!! */

ABORT_EXIT:
METER_EXIT:
	call as_$meter_exit (MSGCORD_METER);		/* turn off metering before returning */
	return;

queue_tty_message:
     procedure;

declare  SPACE_IN_A_QUEUE_ENTRY fixed bin init (131) int static options (constant); /* device_queue.string = 132,  NL = 1 */
declare  to_go fixed bin (21);
declare  to_go_1 fixed bin;
declare  n_sent fixed bin (21);
declare  max_to_send fixed bin;
declare  done bit (1) aligned;

	max_to_send = SPACE_IN_A_QUEUE_ENTRY - length (timestamp);
	to_go = nt;
	n_sent = 0;
	to_go_1 = 0;

/**** This loop must be executed at least once to insure that blank lines
      are processed. Since we haven't got do until, we simulate with
      the "done" flag. to_go is decremented at the end of the loop
      so it is co-located with recalculating done. */

	done = "0"b;
	do while (^done);
	     to_go_1 = min (to_go, max_to_send);	/* Zero is fine */
	     substr (tty_buffer_space, 1, length (timestamp)) = timestamp;
	     substr (tty_buffer_space, length (timestamp) + 1, to_go_1) = substr (buffer_space, n_sent + 1, to_go_1); /* Zero length is fine */
	     substr (tty_buffer_space, length (timestamp) + 1 + to_go_1, 1) = byte (10);
	     call mc_util_$queue (qp, sendalarm, addr (tty_buffer_space),
		to_go_1 + length (timestamp) + 1, mrt_source, code); /*  l(timestamp)+ NL */
	     if code ^= 0 then call hphcs_$syserr_error_code (LOG, code,
		"mc_wakeups_", "Failed to queue message for ^a.",
		device_queue.mc_atep -> mc_ate.virtual_tty_name);
	     sendalarm = "0"b;			/* Once is enough per message */
	     hismp -> syscon_mseg.mescount = hismp -> syscon_mseg.mescount + 1;
	     if mc_anstbl.trace
	     then call sys_log_ (SL_LOG_SILENT, "MC (mc_wakeups_ - queue_tty_message): n_sent: ^d; to_go: ^d; to_go_1: ^d; this_line: ^a",
		     n_sent, to_go, to_go_1, substr (tty_buffer_space, 1, to_go_1 + length (timestamp)));
	     n_sent = n_sent + to_go_1;
	     to_go = to_go - to_go_1;			/* This many left */
	     done = (to_go <= 0);			/* none left? Note that if to_go started as zero (a blank line), then to_go_1 will be zero, 0-0 = 0, so this terminates */
	end;
	return;
     end queue_tty_message;

mc_wakeups_handler_:
     procedure;

/*	This procedure is a handler for the "any_other" condition.
*/

/**** Nothing to do here? Not even send some protocol wakeups? */


     end mc_wakeups_handler_;

set_mc_message_limits: entry;

dcl  (argval, nargs) fixed bin;
dcl  l_wait_time fixed bin (71);
dcl  l_max_limit fixed bin;
dcl  ct_dly bit (1) aligned;

dcl  mcl_me char (24) init ("set_mc_message_limits") static options (constant);

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  argp ptr, argl fixed bin (21), arg char (argl) based (argp);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;

	l_wait_time = wait_time;
	l_max_limit = max_limit;
	call cu_$arg_count (nargs, code);
	if code ^= 0 then call com_err_ (code, "set_mc_message_limits");
	if nargs < 1 then do;
	     call com_err_$suppress_name (0, mcl_me, "USAGE: set_mc_message_limits {-count N} {-delay N} {-print}");
	     return;
	end;

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if arg = "-count" | arg = "-ct" |
		arg = "-delay" | arg = "-dly" then do;
		i = i + 1;
		if i > nargs then do;
		     call com_err_ (error_table_$noarg, mcl_me, "Following ^a.", arg);
		     return;
		end;
		ct_dly = substr (arg, 2, 1) = "c";
		call cu_$arg_ptr (i, argp, argl, code);
		argval = cv_dec_check_ ((arg), code);
		if (code ^= 0 | argval <= 0) then do;
		     call com_err_ (0, mcl_me, "^a is not a positive decimal number", arg);
		     return;
		end;
		if ct_dly then l_max_limit = argval;
		else l_wait_time = argval;
	     end;
	     else if arg = "-print" | arg = "-pr" then
		call ioa_ ("^a: Message coordinator message limit is ^d messages per ^d seconds.", mcl_me, l_max_limit, l_wait_time);
	     else do;
		call com_err_ (error_table_$badopt, mcl_me, "^a", arg);
		return;
	     end;
	end;

	max_limit = l_max_limit;
	wait_time = l_wait_time;
	return;


set_shutdown_limits: entry;

	max_limit = 131071;
	wait_time = 1;
	return;

trace_mrd_util_read:
     procedure;

	call sys_log_$error_log (SL_LOG_SILENT, code, "mc_wakeups_ (router)", "buffer: ^a; nt: ^d; chain: ^a; state: ^d",
	     substr (buffer_space, 1, nt),
	     nt, chain, state);
	call sys_log_ (SL_LOG_SILENT, "mc_wakeups_ (router): time ^a; from_source ^a; from_stream ^a; source_index ^d; stream_index ^d; next_message ^d; ^[continue^] ^[introduction^] ^[farewell^] ^[sentinel^]",
	     date_time_$format ("time", message_block.time_sent, "", ""),
	     message_block.from_source,
	     message_block.from_stream,
	     message_block.source_index,
	     message_block.stream_index,
	     message_block.next_message,
	     message_block.continue,
	     message_block.introduction,
	     message_block.farewell,
	     message_block.sentinel);
	call sys_log_ (SL_LOG_SILENT, "mc_wakeups_ (router): length: ^d; message ^a", message_block.length, substr (message_block.message_body, 1, message_block.length));
	return;
     end trace_mrd_util_read;

/* include files */
/* format: off */
%page; %include iox_entries;
%page; %include as_meter_numbers;
%page; %include syscon_mseg;
%page; %include mess_route_table;
%page; %include vcons_tab;
%page; %include device_queue;
%page; %include mc_anstbl;
%page; %include cdt;
%page; %include author_dcl;
%page; %include event_call_info;
%page; %include syserr_constants;
%page; %include sys_log_constants;

     end mc_wakeups_;
