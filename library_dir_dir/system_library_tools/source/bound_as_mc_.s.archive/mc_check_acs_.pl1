/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* mc_check_acs_ -- access control for Message Coordinator */
/* format: style2 */

mc_check_acs_:
     procedure;

/**** Modification History:
      Created 1984-12-26, BIM.
      Modified 1985-01-29 by E. Swenson to add auditing
*/


/****^  HISTORY COMMENTS:
  1) change(87-02-23,GDixon), approve(87-06-12,MCR7690),
     audit(87-05-07,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.  Add copyright notice.
                                                   END HISTORY COMMENTS */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* NOTES ON AUDITING:					       */
/*							       */
/* This procedure is responsible for access checks and auditing in the       */
/* usual manner. If the redundancy level gets out of hand (in terms of       */
/* duplicate messages) then a solution will have to be found.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	declare P_source_name	 char (*);
	declare P_user_name		 char (*);
	declare P_code		 fixed bin (35);
	declare P_ring		 fixed bin (3);

	declare global_access_op	 bit (36) aligned;
	declare modes		 bit (36) aligned;

	declare rtrim		 builtin;

	declare convert_access_operation_
				 entry (bit (36) aligned) returns (char (50));
	declare hcs_$get_user_access_modes
				 entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				 bit (36) aligned, fixed bin (35));
	declare sys_log_		 entry options (variable);

	declare (
	        GRANT		 initial ("1"b),
	        DENY		 initial ("0"b)
	        )			 bit (1) aligned internal static options (constant);

	declare (
	        access_operations_$daemon_daemon_login,
	        access_operations_$daemon_reply,
	        access_operations_$daemon_login,
	        access_operations_$daemon_logout,
	        access_operations_$daemon_quit
	        )			 ext static bit (36) aligned;

	declare (
	        error_table_$mc_no_c_permission,
	        error_table_$mc_no_d_permission,
	        error_table_$mc_no_q_permission,
	        error_table_$mc_no_r_permission
	        )			 fixed bin (35) ext static;



reply:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_reply);	/* returns non-locally if checking is disabled */

	call hcs_$get_user_access_modes (sc_stat_$mc_acs_dir, rtrim (P_source_name) || ".mcacs", P_user_name, (P_ring),
	     (""b), modes, P_code);
	if P_code = 0
	then if (modes & MCACS_R_ACCESS) = ""b
	     then P_code = error_table_$mc_no_r_permission;

	if P_code = 0
	then call AUDIT (GRANT);
	else call AUDIT (DENY);
	return;

quit:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_quit);	/* returns non-locally if checking is disabled */

	call hcs_$get_user_access_modes (sc_stat_$mc_acs_dir, rtrim (P_source_name) || ".mcacs", P_user_name, (P_ring),
	     (""b), modes, P_code);
	if P_code = 0
	then if (modes & MCACS_Q_ACCESS) = ""b
	     then P_code = error_table_$mc_no_q_permission;

	if P_code = 0
	then call AUDIT (GRANT);
	else call AUDIT (DENY);
	return;

log_daemon_in:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_login);	/* returns non-locally if checking is disabled */
	go to CONTROL_COMMON;

log_daemon_out:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_logout);	/* returns non-locally if checking is disabled */
	go to CONTROL_COMMON;

new_proc_daemon:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_quit);	/* returns non-locally if checking is disabled */

CONTROL_COMMON:
	call hcs_$get_user_access_modes (sc_stat_$mc_acs_dir, rtrim (P_source_name) || ".mcacs", P_user_name, (P_ring),
	     (""b), modes, P_code);
	if P_code = 0
	then if (modes & MCACS_C_ACCESS) = ""b
	     then P_code = error_table_$mc_no_c_permission;

	if P_code = 0
	then call AUDIT (GRANT);
	else call AUDIT (DENY);
	return;

log_in_as_daemon:
     entry (P_user_name, P_ring, P_source_name, P_code);

	call setup (access_operations_$daemon_daemon_login);
						/* returns non-locally if checking is disabled */
	call hcs_$get_user_access_modes (sc_stat_$mc_acs_dir, rtrim (P_source_name) || ".mcacs", P_user_name, (P_ring),
	     (""b), modes, P_code);
	if P_code = 0
	then if (modes & MCACS_D_ACCESS) = ""b
	     then P_code = error_table_$mc_no_d_permission;

	if P_code = 0
	then call AUDIT (GRANT);
	else call AUDIT (DENY);
	return;

setup:
     procedure (access_op);
	declare access_op		 bit (36) aligned;

	P_code = 0;
	global_access_op = access_op;
	if ^installation_parms.validate_daemon_commands
	then go to EXIT_NONLOCAL;

	return;

     end setup;

EXIT_NONLOCAL:
	return;

AUDIT:
     procedure (P_grant_sw);

/**** This procedure is responsible for auditing all message coordinator
      access.  P_grant_sw indicates if the access check resulted in a 
      GRANT of DENY. */

	dcl     P_grant_sw		 bit (1) aligned parameter;

	call sys_log_ (SL_LOG_SILENT, "Audit: ^[GRANTED^;DENIED^] ^a for ^a Level=^d to ^a", P_grant_sw,
	     convert_access_operation_ (global_access_op), P_user_name, P_ring, P_source_name);
	return;

     end AUDIT;

%include as_data_;

%include installation_parms;
	declare ip		 pointer defined (as_data_$rs_ptrs (0));

%include mcacs_access_modes;

%include sc_stat_;

%include sys_log_constants;
     end mc_check_acs_;
