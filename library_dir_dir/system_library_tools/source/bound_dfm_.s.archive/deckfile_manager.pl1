/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-08-21,Fakoury), approve(86-08-21,MCR7515),
     audit(87-01-07,Farley), install(87-01-08,MR12.0-1263):
     Originally coded 0682 by R. Fakoury for MR12.
  2) change(89-11-08,Fakoury), approve(89-11-20,MECR0014),
     audit(89-11-09,Parisek), install(89-11-20,MR12.3-1120):	
     To correct the path for the info dir.
  3) change(89-11-20,Fakoury), approve(89-11-20,PBF8146),
     audit(89-11-20,Parisek), install(89-11-20,MR12.3-1120):	
     Again, correct info dir problem. Let ssu_ figure it out.
                                                   END HISTORY COMMENTS */


/* The deckfile_manager command provides the functionallity to maintain a tandd_deck_file */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
deckfile_manager:
dfm: proc ();


/* Automatic */

dcl  ab_sw bit (1) aligned;
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  arg_num fixed bin;
dcl  code fixed bin (35);
dcl  debug_sw bit (1) aligned;
dcl  deckfile_length fixed bin (21);
dcl  deckfile_ptr ptr;
dcl  nargs fixed bin;
dcl  profile_dir char (168);
dcl  profile_entry char (32);
dcl  profile_length fixed bin (21);
dcl  profile_ptr ptr;
dcl  profile_sw bit (1);
dcl  prompt_length fixed bin (21);
dcl  prompt_ptr ptr;
dcl  prompt_sw bit (1);
dcl  quit_sw bit (1);
dcl  request_loop_sw bit (1);
dcl  ready_sw bit (1) aligned;
dcl  request_sw bit (1);
dcl  request_line_length fixed bin (21);
dcl  request_line_ptr ptr;
dcl  sci_ptr ptr;
dcl  startup_sw bit (1);

/*  Based */

dcl  arg char (argl) based (argp);
dcl  deckfile_string char (deckfile_length) based (deckfile_ptr);
dcl  free_area area based (get_system_free_area_ ());
dcl  profile_string char (profile_length) based (profile_ptr);
dcl  prompt_string char (prompt_length) aligned based (prompt_ptr);


/*  Builtins */

dcl  addr builtin;
dcl  codeptr builtin;
dcl  null builtin;


/* Conditions */

dcl  cleanup condition;


/* Constants */

dcl  dfm_version_1 char (4) int static options (constant) init ("1.0a");
dcl  false bit (1) int static options (constant) init ("0"b);
dcl  last_position fixed bin int static options (constant) init (9999);
dcl  max_prompt_length fixed bin int static options (constant) init (64);
dcl  myname char (3) int static options (constant) init ("dfm");
dcl  true bit (1) int static options (constant) init ("1"b);

/* Entries */

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry () options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_list_ptr entry () returns (ptr);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$generate_call entry (entry, ptr);
dcl  dfm_$clean_up entry (ptr, ptr);
dcl  dfm_$pi_handler entry;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ssu_$add_info_dir entry (ptr, char (*), fixed bin, fixed bin (35));
dcl  ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$execute_line entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  ssu_$execute_start_up entry () options (variable);
dcl  ssu_$get_temp_segment entry (ptr, char (*), ptr);
dcl  ssu_$listen entry (ptr, ptr, fixed bin (35));
dcl  ssu_$record_usage entry (ptr, ptr, fixed bin (35));
dcl  ssu_$release_temp_segment entry (ptr, ptr);
dcl  ssu_$set_abbrev_info entry (ptr, ptr, ptr, bit (1) aligned);
dcl  ssu_$set_debug_mode entry (ptr, bit (1) aligned);
dcl  ssu_$set_ec_suffix entry (ptr, char (32));
dcl  ssu_$set_procedure entry (ptr, char (*), entry, fixed bin (35));
dcl  ssu_$set_prompt entry (ptr, char (64) var);
dcl  ssu_$set_prompt_mode entry (ptr, bit (*));
dcl  ssu_$set_ready_mode entry (ptr, bit (1) aligned);

/* External */

dcl  dfm_request_table_$dfm_request_table_ fixed bin ext static;
dcl  error_table_$active_function fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$bigarg fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  error_table_$not_act_fnc fixed bin (35) ext static;
dcl  ssu_et_$subsystem_aborted fixed bin (35) ext static;
dcl  ssu_et_$program_interrupt fixed bin (35) ext static;
dcl  ssu_et_$null_request_line fixed bin (35) ext static;
dcl  ssu_et_$request_line_aborted fixed bin (35) ext static;
dcl  ssu_info_directories_$standard_requests char (168) external;
dcl  ssu_request_tables_$standard_requests bit (36) aligned external;


%page;

      call cu_$af_return_arg (nargs, null (), 0, code);
      if code ^= error_table_$not_act_fnc then do;
         if code = 0 then call active_fnc_err_ (error_table_$active_function, myname);
         else call com_err_ (code, myname);
         return;
      end;

      call dfm_init ();

      on cleanup call deckfile_manager_cleanup ();

      do arg_num = 1 to nargs;			/* process all the arguments			*/
         call cu_$arg_ptr (arg_num, argp, argl, code);
         if code ^= 0 then call complain (code, myname, "Getting arg ptr.");

         if arg = "-abbrev" | arg = "-ab" then ab_sw = true;

         else if arg = "-debug" | arg = "-db" then debug_sw = true;

         else if arg = "-deckfile" | arg = "-dkf" then do;
	  call next_arg (deckfile_ptr, deckfile_length, code);
	  if code ^= 0 then call complain (code, myname, "Getting deckfile pathname.");
	  call expand_pathname_ (deckfile_string, dfm_info.deckfile_dir,
	   dfm_info.deckfile_entry, code);
	  if code ^= 0 then call complain (code, myname, "Expanding deckfile pathname.");
         end;

         else if arg = "-no_abbrev" | arg = "-nab" then ab_sw = false;

         else if arg = "-no_debug" | arg = "-ndb" then debug_sw = false;

         else if arg = "-no_prompt" then prompt_sw = false;

         else if arg = "-no_startup" | arg = "-nsu" then startup_sw = false;

         else if arg = "-profile" | arg = "-pf" then do;
	  call next_arg (profile_ptr, profile_length, code);
	  if code ^= 0 then call complain (code, myname, "Getting profile pathname.");
	  call expand_pathname_$add_suffix (profile_string, "profile", profile_dir, profile_entry, code);
	  if code ^= 0 then call complain (code, myname, "Expanding profile pathname.");
	  call initiate_file_ (profile_dir, profile_entry, R_ACCESS, profile_ptr, 0, code);
	  if profile_ptr = null () then call complain (code, myname,
	      "Initiating the profile ^a>^a.", profile_dir, profile_entry);

	  ab_sw, profile_sw = true;
         end;

         else if arg = "-prompt" then do;
	  call next_arg (prompt_ptr, prompt_length, code);
	  if code ^= 0 then call complain (code, myname, "Getting prompt string");
	  if prompt_length > max_prompt_length then
	     call complain (error_table_$bigarg, myname,
	      "The prompt may be a maximum of ^d characters", max_prompt_length);
	  prompt_sw = true;
         end;

         else if arg = "-quit" | arg = "-q" then
	  quit_sw, dfm_info.flags.force_quit = true;

         else if arg = "-ready_off" | arg = "-rdf" then ready_sw = false;

         else if arg = "-ready_on" | arg = "-rdn" then ready_sw = true;

         else if arg = "-request" | arg = "-rq" then do;
	  if request_sw then call complain (error_table_$inconsistent,
	      myname, "Only one request per invocation");
	  call next_arg (request_line_ptr, request_line_length, code);
	  if code ^= 0 then call complain (code, myname, "Getting request line");
	  request_sw = true;
         end;

         else if arg = "-request_loop"
	| arg = "-rql" then request_loop_sw = true;

         else if arg = "-startup" | arg = "su" then startup_sw = true;

         else call complain (error_table_$badopt, myname, "^a", arg);

      end;					/* end argument processing */

      call ssu_$create_invocation (myname, dfm_version_1, dfm_infop,
       addr (dfm_request_table_$dfm_request_table_), ">doc>subsystem>dfm", sci_ptr, code);
      if code ^= 0 then call complain (code, myname, "Creating subsystem invocation.");

      call ssu_$record_usage (sci_ptr, codeptr (dfm), 0);

      call ssu_$add_info_dir (sci_ptr, ssu_info_directories_$standard_requests, last_position, code);
      if code ^= 0 then call complain (code, myname, "Adding ssu info dir.");

      call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests), last_position, code);
      if code ^= 0 then call complain (code, myname, "Adding ssu request table.");

      call ssu_$set_procedure (sci_ptr, "program_interrupt", dfm_$pi_handler, code);
      if code ^= 0 then call complain (code, myname, "Adding pi handler.");

      call ssu_$set_ec_suffix (sci_ptr, "dfmec");

      call ssu_$get_temp_segment (sci_ptr, "dfm_data", dfm_info.dfm_data_ptr);

      call ssu_$set_abbrev_info (sci_ptr, profile_ptr, profile_ptr, ab_sw);

      call ssu_$set_debug_mode (sci_ptr, debug_sw);

      if prompt_sw & prompt_length > 0 then
         call ssu_$set_prompt (sci_ptr, (prompt_string));

      call ssu_$set_prompt_mode (sci_ptr, ^prompt_sw);

      call ssu_$set_ready_mode (sci_ptr, ready_sw);

      if startup_sw then do;
         call ssu_$execute_start_up (sci_ptr, code);
         if code ^= 0 then call complain (code, myname, "Executing ssu startup.");
      end;

      if request_sw then do;
         call ssu_$execute_line (sci_ptr, request_line_ptr, request_line_length, code);
         if code ^= 0 then do;
	  if (code = ssu_et_$null_request_line
	   | code = ssu_et_$program_interrupt
	   | code = ssu_et_$request_line_aborted)
	   & request_loop_sw then goto listen;
	  else if code = ssu_et_$subsystem_aborted then goto subsystem_wrapup; /* normal end of subsystem */
	  else call complain (code, myname, "Encountered while executing request line");
         end;
      end;

      if quit_sw then goto subsystem_wrapup;


listen:
      call ssu_$listen (sci_ptr, null (), code);
      if code ^= ssu_et_$subsystem_aborted then
         call com_err_ (code, myname, "Calling the listener.");

subsystem_wrapup:
      call deckfile_manager_cleanup ();
      return;
%page;

/* complain - an internal proc to print an error message and wrapup. */


complain: proc () options (variable);

      call cu_$generate_call (com_err_, cu_$arg_list_ptr ());
      goto subsystem_wrapup;


   end complain;



%page;

/* deckfile_manager_cleanup - internal proc to cleanup a deckfile_manager invocation. */


deckfile_manager_cleanup: proc ();

      if dfm_infop ^= null then do;

         if dfm_info.flags.request_active then call dfm_$clean_up (sci_ptr, dfm_infop);

         if dfm_info.dfm_data_ptr ^= null () then
	  call ssu_$release_temp_segment (sci_ptr, dfm_info.dfm_data_ptr);

         if sci_ptr ^= null then call ssu_$destroy_invocation (sci_ptr);

         free dfm_info in (free_area);
         dfm_infop = null;
      end;


   end deckfile_manager_cleanup;
%page;

/* Internal proc that initializes dfm variables */

dfm_init: proc ();

      dfm_infop = null;
      allocate dfm_info in (free_area) set (dfm_infop);

      ab_sw = false;
      debug_sw = false;
      dfm_info.deckfile_dir = "";
      dfm_info.deckfile_entry = "";
      dfm_info.dfm_data_ptr = null;
      dfm_info.page_number = 0;
      dfm_info.flags.request_active = false;
      dfm_info.force_quit = false;
      dfm_info.pad = "0"b;
      dfm_info.version = dfm_info_version_1;
      profile_ptr = null;
      profile_sw = false;
      prompt_length = 0;
      prompt_ptr = null;
      prompt_sw = true;				/* default is to prompt */
      quit_sw = false;
      request_loop_sw = false;
      ready_sw = false;
      request_sw = false;
      request_line_length = 0;
      request_line_ptr = null;
      sci_ptr = null;
      startup_sw = false;

   end dfm_init;

%page;

/*  Internal proc that gets the next argument from the argument string, complaining if it's not there  */

next_arg: proc (nargp, nargl, nacode);

dcl  nargp ptr;
dcl  nacode fixed bin (35);
dcl  nargl fixed bin (21);

      arg_num = arg_num + 1;
      call cu_$arg_ptr (arg_num, nargp, nargl, nacode);


   end next_arg;

%page;
%include access_mode_values;
%page;
%include dfm_info;
%page;
%include ssu_prompt_modes;

   end deckfile_manager;
