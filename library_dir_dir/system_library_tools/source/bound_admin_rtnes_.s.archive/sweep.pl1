/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-10-06,Parisek), approve(88-02-03,MCR7845),
     audit(88-04-12,Lippard), install(88-04-26,MR12.2-1043):
     Implement multi-segment file application for possible >256K disk_stat
     segment.
                                                   END HISTORY COMMENTS */


/* format: style4 */
sweep:
     procedure options (variable);

/* This procedure does a "getquota" on all directories and puts the returned values in a file.
   The quota, used, and time-page product figures for both segments and directories are recorded.
   Output segment is "disk_stat" unless "-of PATH" is specified.
   Root node is ">" unless a non-control arg is encountered.
   If a directory has no quota, the subtree under it is not scanned, since quota must be in an
   unbroken chain (so we need not look at all directories).
   The program attempts to give itself access as needed and clean up later.
   THVV
*/

/* Modified June 1975 by J. C. Whitmore for setting directory privilege. */
/* Modified April 1976 by THVV and TAC to implement recording of directory pages used under NSS */
/* Modified December 1980 by C. Hornig for connection failures */
/* Modified 83-09-25 by E. N. Kittlitz, per SGH (UNCA) to clean up AST if privileged */

dcl  path char (168) init (">");
dcl  dn char (168) init (get_wdir_ ());
dcl  pdir char (168) init (get_pdir_ ());
dcl  en char (32) init ("disk_stat");
dcl  areap ptr;
dcl  fcbp ptr;
dcl  (quota, tot_dquota, tot_squota) fixed bin (35) init (0); /* GLOBAL variables, total quota */
dcl  (used, tot_dused, tot_sused) fixed bin (35) init (0);	/* GLOBAL variables, total use */
dcl  hpriv bit (1) aligned;
dcl  ppriv bit (1) aligned;
dcl  seg_ptr ptr;
dcl  uid bit (36) aligned;
dcl  (n, tn) fixed bin;				/* GLOBAL variable, number of dirs */
dcl  bitc fixed bin (24);
dcl  an fixed bin;
dcl  ap ptr;					/* ptr to arg */
dcl  al fixed bin;					/* lth of arg */
dcl  bchr char (al) based (ap) unaligned;
dcl  ec fixed bin (35);				/* err code */
dcl  starting_level fixed bin;			/* level in hierarchy where the sweep starts (root = 0) */
dcl  (i, j) fixed bin;
dcl  bfsw bit (1) aligned init ("1"b);			/* default to brief mode */
dcl  pddsw bit (1) aligned init ("0"b);			/* default is to omit >pdd from the sweep */
dcl  priv_off bit (1) aligned;			/* flag to tell that system privileges are off */
dcl  priv_set fixed bin (35);				/* this will be zero if we set system privileges */
dcl  cpx fixed bin;

dcl  (addr, clock, index, null, rtrim, substr, sum) builtin;

dcl  (cleanup, linkage_error, seg_fault_error) condition;

%include disk_stat;

dcl  com_err_ entry options (variable);
dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  get_system_free_area_ entry () returns (ptr);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  (get_pdir_, get_wdir_) entry () returns (char (168));
dcl  get_group_id_ entry () returns (char (32));
dcl  hcs_$get_uid_seg entry (ptr, bit (36) aligned, fixed bin (35));
dcl  hcs_$quota_read
	entry (char (*), fixed bin, fixed bin (71), fixed bin (35), bit (36), fixed bin (1), fixed bin, fixed bin (35));
dcl  hcs_$dir_quota_read
	entry (char (*), fixed bin, fixed bin (71), fixed bin (35), bit (36), fixed bin (1), fixed bin, fixed bin (35));
dcl  hphcs_$quota_read
	entry (char (*), fixed bin, fixed bin (71), fixed bin (35), bit (36), fixed bin (1), fixed bin, fixed bin (35));
dcl  hphcs_$dir_quota_read
	entry (char (*), fixed bin, fixed bin (71), fixed bin (35), bit (36), fixed bin (1), fixed bin, fixed bin (35));
dcl  hphcs_$deactivate entry (bit (36) aligned, fixed bin (35));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$msf_get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open entry (char (*), char (*), ptr, fixed bin (35));
dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
dcl  system_privilege_$dir_priv_off entry (fixed bin (35));
dcl  phcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  phcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hphcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));

dcl  (
     error_table_$badopt,
     error_table_$noarg
     ) ext fixed bin (35);

dcl  1 acla aligned,
       2 userid char (32),
       2 mode bit (36),
       2 rcode fixed bin (35);

dcl  1 acld aligned,
       2 userid char (32),
       2 rcode fixed bin (35);
dcl  cp_array (0:4) ptr;

%page;
	ec = 0;
	do an = 1 by 1 while (ec = 0);
	     call cu_$arg_ptr (an, ap, al, ec);
	     if ec = 0 then do;
		if /* case */ substr (bchr, 1, 1) ^= "-" then do;
		     call absolute_pathname_ (bchr, path, ec);
		     if ec ^= 0 then do;
			call com_err_ (ec, "sweep", "^a", bchr);
			return;
		     end;
		end;
		else if bchr = "-bf" then bfsw = "1"b;
		else if bchr = "-brief" then bfsw = "1"b;
		else if bchr = "-lg" then bfsw = "0"b;
		else if bchr = "-long" then bfsw = "0"b;
		else if bchr = "-pdd" then pddsw = "1"b;
		else if bchr = "-of" | bchr = "-output_file" then do;
		     an = an + 1;
		     call cu_$arg_ptr (an, ap, al, ec);
		     if ec ^= 0 then do;
			call com_err_ (error_table_$noarg, "sweep", "after ""-output_file""");
			return;
		     end;
		     call expand_pathname_ (bchr, dn, en, ec);
		     if ec ^= 0 then do;
			call com_err_ (ec, "sweep", "^a", bchr);
			return;
		     end;
		end;
		else do;
		     call com_err_ (error_table_$badopt, "sweep", "^a", bchr);
		     return;
		end;
	     end;
	end;

	priv_off = "1"b;				/* assume that we don't have dir privilege */
	priv_set = 1;				/* and that we did not set dir priv */
	hpriv = "0"b;
	ppriv = "0"b;
	on cleanup
	     begin;				/* so we can undo what we did */
		if priv_set = 0 then call system_privilege_$dir_priv_off (priv_set);
	     end;

/*	Now we will try to set dir privilege so we can look at each dir in the system. */

	on linkage_error go to revert_handler;		/* in case of no access to system_privilege_ */

	call system_privilege_$dir_priv_on (priv_set);	/* try to set it */
	priv_off = "0"b;				/* privileges are on now for sure */
revert_handler:
	revert linkage_error;			/* it was only to catch system_privilege_ error */
	on linkage_error go to revert1;
	call hphcs_$star_ (">", "**", 0, null (), 0, null (), null (), 0);
	hpriv = "1"b;				/* Didn't fault, so im super */
revert1:
	revert linkage_error;

	on linkage_error goto revert2;
	call phcs_$initiate (">", "", "", 0, 0, null (), 0);
	ppriv = "1"b;
revert2:	revert linkage_error;

	if priv_off then do;			/* see if we now have the dir priv */
	     if bfsw
	     then call com_err_ (0, "sweep",		/* give this message if we supress others */
		     "Unable to set directory privilege. Access to storage system may not be complete.");
	     priv_set = 1;				/* just to be safe */
	end;

	cp_array (*), fcbp, sp = null ();
	cpx = 0;
	call msf_manager_$open (dn, en, fcbp, ec);
	if fcbp = null () then do;
	     call com_err_ (ec, "sweep", "");
	     return;
	end;

	call msf_manager_$get_ptr (fcbp, cpx, "1"b, cp_array (0), 0, ec);
	if cp_array (0) = null () then do;
	     call com_err_ (ec, "sweep", "^a", en);
	     return;
	end;
	if ec ^= 0 then do;
	     call com_err_ (ec, "sweep", "");
	     return;
	end;

	sp = cp_array (0);
	n, tn = 0;				/* Start with no directories. */

	acla.userid = get_group_id_ ();
	acld.userid = acla.userid;
	acla.mode = "111"b;

	areap = get_system_free_area_ ();

/* Compute starting level, so that a given directory will always have the same level number,
   no matter where the sweep starts */

	i = 2;					/* skip the leading ">" since the root is level zero */
	j = 1;					/* just to get past the "while" the first time */
	do starting_level = -1 by 1			/* count ">"s in path */
	     while (j ^= 0);			/* and quit when there are no more */
	     j = index (substr (path, i), ">");		/* look for one */
	     if j ^= 0
	     then					/* if there was one */
		i = i + j;			/* move past it */
	end;					/* increment starting_level, then go test j */
						/* for root, we fall thru after setting starting_level to zero */

	call process (path, starting_level);		/* Looks innocent ... */

	if cpx > 0 then do;
	     sp = cp_array (0);
	     tn = tn + n;
	end;
	else tn = n;				/* to set dents below */
	disk_stat.dtime = clock ();			/* read clock */
	quota = tot_dquota + tot_squota;
	used = tot_dused + tot_sused;
	call ioa_ ("^d/^d", quota, used);		/* type total */
	call ioa_ ("dir: ^d/^d", tot_dquota, tot_dused);
	call ioa_ ("seg: ^d/^d", tot_squota, tot_sused);
	disk_stat.dents = tn;
	if fcbp ^= null then call msf_manager_$close (fcbp);
	bitc = 36 * (lodh + tn * lode);		/* Compute bit count. */
	call hcs_$set_bc (dn, en, bitc, ec);		/* ... */

	if priv_set = 0 then call system_privilege_$dir_priv_off (priv_set);
						/* reset if we did it */

	return;					/* Done. */
%page;
process:
     procedure (apth, lvl);

/* internal doit procedure */

dcl  apth char (168),				/* path of tree to process */
     lvl fixed bin;					/* recursion level */

dcl  npth char (168),				/* new path for recursion */
     ddn char (168),				/* ... for expand */
     een char (32),					/* ... */
     error_table_$nomatch fixed bin (35) ext,
     (stpp, dtpp) fixed bin (71),			/* args for quota_read */
     updatime fixed bin (35),
     (squota, dquota, sused, dused) fixed bin,
     slvid bit (36),
     (dquota_sw, squota_sw) fixed bin (1),
     ifail fixed bin,
     ecc fixed bin (35),
     (ii, nix) fixed bin;				/* indices */
dcl  sys_info$max_seg_size fixed bin (35) ext static;

	star_entry_ptr, star_names_ptr = null ();
	on cleanup
	     begin;				/* get ready to undo everything */
		if star_names_ptr ^= null then free star_names;
		if star_entry_ptr ^= null then free star_entries;
		if ifail = 0 then call hcs_$delete_dir_acl_entries (ddn, een, addr (acld), 1, ecc);
	     end;

	call expand_pathname_ (apth, ddn, een, ecc);
	if ecc ^= 0 then do;
	     call com_err_ (ecc, "sweep", "^a", apth);
	     return;
	end;

	if hpriv
	then ifail = 2;
	else do;
	     call hcs_$add_dir_acl_entries (ddn, een, addr (acla), 1, ecc);
	     if ecc ^= 0
	     then ifail = 1;
	     else ifail = 0;
	end;

	on seg_fault_error goto pexit;

	if hpriv
	then call hphcs_$dir_quota_read (apth, dquota, dtpp, updatime, slvid, dquota_sw, dused, ecc);
	else call hcs_$dir_quota_read (apth, dquota, dtpp, updatime, slvid, dquota_sw, dused, ecc);
	if ecc ^= 0 then goto gq_err;

	if hpriv
	then call hphcs_$quota_read (apth, squota, stpp, updatime, slvid, squota_sw, sused, ecc);
	else call hcs_$quota_read (apth, squota, stpp, updatime, slvid, squota_sw, sused, ecc);
	if ecc ^= 0 then do;
gq_err:
	     if ^bfsw then call com_err_ (ecc, "sweep", "getquota on ^a", apth);
	     go to pexit;
	end;

	if dquota_sw + squota_sw ^= 0 then do;		/* if either dir quota or seg quota nonzero,
						   add it in and keep recursing */
	     tot_dused = tot_dused + dused;		/* add up global use */
	     tot_sused = tot_sused + sused;
	     tot_dquota = tot_dquota + dquota;		/* and global quota */
	     tot_squota = tot_squota + squota;

	     if (lodh + (n+1) * lode) > sys_info$max_seg_size then do;
		cpx = cpx + 1;
		call msf_manager_$msf_get_ptr (fcbp, cpx, "1"b, cp_array (cpx), 0, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, "sweep", "Cannot expand MSF for ^a", en);
		     goto pexit;
		end;
		sp = cp_array (cpx);
		tn = tn + n;
		n = 0;
	     end;
	     n = n + 1;				/* allocate a new slot */
	     disk_stat.spth (n) = apth;		/* fill in path name */
	     disk_stat.sqta (n) = squota;		/* segment quota */
	     disk_stat.dqta (n) = dquota;		/* directory quota */

	     if squota = 0 then stpp = 0;		/* clear possible garbage, in case the */
	     if dquota = 0 then dtpp = 0;		/* storage system is not careful about doing so */

	     disk_stat.suse (n) = sused;		/* segment pages used */
	     disk_stat.duse (n) = dused;		/* directory pages used */
	     disk_stat.slvid (n) = slvid;		/* son's lvid */
	     disk_stat.stpp (n) = stpp;		/* segment time-page product */
	     disk_stat.dtpp (n) = dtpp;		/* directory time-page product */
	     disk_stat.slev (n) = lvl;		/* .. recursion level */

	     if hpriv
	     then call hphcs_$star_ (apth, "**", star_BRANCHES_ONLY, areap, star_entry_count, star_entry_ptr,
		     star_names_ptr, ecc);
	     else call hcs_$star_ (apth, "**", star_BRANCHES_ONLY, areap, star_entry_count, star_entry_ptr,
		     star_names_ptr, ecc);
	     revert seg_fault_error;
	     if ecc = error_table_$nomatch then go to pexit;
						/* Get all names. If none, go. */
	     if ecc ^= 0 then do;			/* If any other error from star, name it. */
		if ^bfsw then call com_err_ (ecc, "sweep", "star on ^a", apth);
		go to pexit;
	     end;
inloop:
	     do ii = 1 to star_entry_count;		/* Now do all branches, look for sub-dirs. */
		if star_entries (ii).type = star_DIRECTORY then do;
		     nix = star_entries (ii).nindex;
		     if apth ^= ">"			/* Fabricate path name. */
		     then npth = rtrim (apth) || ">" || star_names (nix);
		     else do;			/* The root is special. */
			npth = ">" || star_names (nix);
			if ^pddsw
			then			/* unless user said to sweep >pdd */
			     if (npth = ">process_dir_dir")
						/* if this is >pdd */
				| (npth = ">pdd") | (substr (npth, 1, 6) = ">pdd.!")
			     then goto nopdir;
		     end;
		     call process (npth, lvl + 1);	/* recursion here */
nopdir:
		end;
	     end inloop;
	     free star_names;
	     free star_entries;
	end;
pexit:
	if ppriv & hpriv then			/* if privileged, prepare to clean up */
	     call phcs_$initiate (ddn, een, "", 0, 0, seg_ptr, ecc);
	else seg_ptr = null;

	if (ifail = 0) & (apth ^= pdir) & ^pddsw
	then					/* don't deny user access to his own pdir */
	     call hcs_$delete_dir_acl_entries (ddn, een, addr (acld), 1, ecc);

	if seg_ptr ^= null then do;			/* now hardcore can't possibly want to touch the thing */
	     call hcs_$get_uid_seg (seg_ptr, uid, ecc);
	     if ecc = 0 then call hphcs_$deactivate (uid, ecc);
	     call phcs_$terminate_noname (seg_ptr, ecc);
	end;
	ecc = 0;
%page;
%include star_structures;

     end process;					/* Whew. */
%include access_mode_values;
%page;

     end sweep;
