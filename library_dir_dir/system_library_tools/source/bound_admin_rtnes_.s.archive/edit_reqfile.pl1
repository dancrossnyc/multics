/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

edit_reqfile: erf: proc;

/* requisition file editor */

dcl (path, dn) char (168) aligned,			/* path and directory name */
     en char (32) aligned,				/* entry name */
     pj char (12) aligned,				/* acct id for find */
    (ec, j, nq, num) fixed bin,			/* integers */
     num24 fixed bin (24),
     code char (8),					/* change code */
     func char (8) aligned,				/* edit request */
     chdt char (8),					/* date temp */
     ftemp float bin,				/* floating temp */
     flg fixed bin,					/* flag from ask */
    (qp, qpp) ptr,					/* ptr to reqfile */
     ap ptr,					/* ptr to arg */
     bchr char (168) based (ap) unaligned,		/* pickup for arg */
     al fixed bin;					/* lth of arg */

dcl (ask_, ask_$ask_cint, ask_$ask_n, ask_$ask_line, ask_$ask_clr) entry options (variable),
     com_err_ entry options (variable),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     ioa_ entry options (variable),
     ask_$ask_flo entry options (variable),
     date_time_ entry (fixed bin (71), char (*)),
     hcs_$delentry_seg entry (ptr, fixed bin),
     clock_ entry () returns (fixed bin (71)),
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     hcs_$set_bc entry (char (*) aligned, char (*) aligned, fixed bin (24), fixed bin);

dcl (addr, substr, null) builtin;

dcl  reqfile_zap (num24) fixed bin based;


%include reqfile;

/* - - - - - - - - - - */

	call cu_$arg_ptr (1, ap, al, ec);		/* see if any args */
	if ec ^= 0 | al = 0 then do;			/* if not, then ... */
	     path = "reqfile";			/* set up default */
	     al = 7;				/* ... */
	end;
	else path = substr (bchr, 1, al);		/* get pathname of reqfile */

	call expand_path_ (addr (path), al, addr (dn), addr (en), ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "edit_reqfile", path);
	     return;				/* die */
	end;
	call hcs_$initiate (dn, en, "", 0, 1, qpp, ec);	/* Initiate real requisition file. */
	if qpp = null then go to er;
	call hcs_$make_seg ("", "", "", 1011b, qp, ec);	/* Make scratch seg */
	if qp = null then go to er;
	nq = qpp -> reqfile.nacts;
	num24 = loqh + nq * loqe;
	qp -> reqfile_zap = qpp -> reqfile_zap;
	call hcs_$terminate_noname (qpp, ec);

	if nq = 0 then
	     call ioa_ ("WARNING: reqfile is empty.");

cmain:	j = nq;					/* Set pointer to last entry */
cmain1:	call ask_$ask_clr;				/* Clear input buffer. */
main:	call ask_ ("type    ", func);			/* Ask for editing function. */

	if func = "f" then go to find;
	if func = "find" then go to find;

	if func = "c" then go to change;
	if func = "change" then go to change;

	if func = "p" then go to print;
	if func = "print" then go to print;

	if func = "file" then go to file;
	if func = "w" then go to file;
	if func = "q" then go to quit;
	if func = "quit" then go to quit;

	if func = "d" then go to delete;
	if func = "delete" then go to delete;

	if func = "n" then go to next;
	if func = "next" then go to next;

	if func = "a" then go to add;
	if func = "add" then go to add;

	if func = "t" then go to top;
	if func = "top" then go to top;

	if func = "help" then do;
	     call ioa_ ("Instructions:");
	     call ioa_ ("""f id""^-to find");
	     call ioa_ ("""c code val code val ... *"" to change");
	     call ioa_ ("""p -n-""^-to print");
	     call ioa_ ("""file""^-to file");
	     call ioa_ ("""a id""^-to add");
	     call ioa_ ("""n -n-""^-to go to next");
	     call ioa_ ("""t""^-to go to top");
	     call ioa_ ("""help""^-for instructions");
	     go to main;
	end;

	call ioa_ ("""^a"" illegal. Type ""help"" for instructions.", func);
	go to cmain1;				/* Clear line buffer and go */

/* Search for an ID */

find:	call ask_ ("id      ", pj);			/* Get req to search for. */
	if pj = acctid (j) then go to main;		/* Skip out if we're there. */

	do j = 1 to nq;				/* Otherwise, look at all id's. */
	     if pj = acctid (j) then go to main;	/* ... */
	end;

	call ioa_ ("Account ""^a"" not found.", pj);	/* Missing. Gripe. */
	go to cmain;				/* Go and clear line buffer. */

/* Modify an entry */

change:	call ask_$ask_n (code, flg);			/* Peek to see if any more on line. */
	if flg = 0 then call ioa_ ("Type changes.");	/* If not, suggest something. */

clp:	call ask_ ("code    ", code);			/* Get a change code. */

	if code = "*" then go to main;		/* Star for done. */

	if code = "id" then do;			/* Change project id? */
	     call ask_ (code, acctid (j));
	end;
	else if code = "acct" then do;		/* Change MIT account no.? */
	     call ask_ (code, mitacct (j));
	end;
	else if code = "req" then do;			/* change requisition no? */
	     call ask_ (code, reqno (j));
	end;
	else if code = "name" then do;		/* change billing anme */
	     call ask_$ask_line (code, billing_name (j));
	end;
	else if code = "addr" then do;		/* change billing address? */
	     call ask_$ask_line (code, billing_addr (j));
	end;
	else if code = "amt" | code = "$" then do;
	     call ask_$ask_flo (code, ftemp);
	     req_amt (j) = ftemp;
	end;
	else if code = "chg_mo" | code = "mo" then do;
	     call ask_$ask_flo (code, ftemp);
	     chg_mo (j) = ftemp;
	end;
	else if code = "chg_tr" | code = "tr" then do;
	     call ask_$ask_flo (code, ftemp);
	     chg_tr (j) = ftemp;
	end;
	else if code = "cutoff" then do;
	     cutoff (j) = gdate (code);		/* change cutoff date */
	end;
	else if code = "on" then do;			/* change date on? */
	     qdn (j) = gdate (code);
	end;
	else if code = "off" then do;			/* change date off? */
	     qdf (j) = gdate (code);
	end;
	else do;					/* Unknown change code. Gripe. */
	     call ioa_ ("Illegal change code ""^a"".", code);
	     call ask_$ask_clr;			/* Clear line. */
	end;

	go to clp;				/* Go look for another code. */

/* Print an entry */

print:	call ask_$ask_cint (num, flg);		/* see how many */
	if flg ^= 1 then num = 1;
ploop:	call ioa_ ("^a - ^a - ^a.", acctid (j), mitacct (j), reqno (j));
	call date_time_ (cutoff (j), chdt);		/* make date printable */
	call ioa_ ("^-$^15.2f, cutoff ^a", req_amt (j), chdt);
	call date_time_ (qdn (j), chdt);
	call ioa_ ("^-date on ^a", chdt);
	if qdf (j) ^= 0 then do;
	     call date_time_ (qdf (j), chdt);
	     call ioa_ ("^-date off ^a", chdt);
	end;
	call ioa_ ("^-^a", billing_name (j));
	call ioa_ ("^-^a", billing_addr (j));
	call ioa_ ("^-this mo $^15.2f, this req $^15.2f", chg_mo (j), chg_tr (j));
	num = num - 1;
	if num <= 0 then go to main;			/* see if done */
	j = j + 1;				/* no, do next */
	if j > nq then go to eof;			/* ... if any */
	go to ploop;

/* Go to nentry */

next:	call ask_$ask_cint (num, flg);		/* Check for a number. */
	if flg ^= 1 then num = 1;			/* If none there, assume one. */
	j = j + num;				/* Bump index. */
	if j > nq then do;				/* Check range. */
eof:	     call ioa_ ("EOF");			/* Remark if too big. */
	     go to cmain;				/* clear buffer */
	end;
	go to main;

/* Delete an entry */

delete:	call ioa_ ("Deleting ""^a"".", acctid (j));	/* say, just in case */
	qdf (j) = clock_ ();
	go to main;

/* Add a new entry */

add:	nq = nq + 1;				/* Allocate new slot. */
	j = nq;					/* Set pointer. */
	call ask_ ("id      ", acctid (j));
	call ask_ ("MITacct ", mitacct (j));
	call ask_ ("reqno   ", reqno (j));
	call ask_$ask_flo ("amount  ", ftemp);
	req_amt (j) = ftemp;
	cutoff (j) = gdate ("cutoff  ");
	call ask_$ask_line ("name    ", billing_name (j));
	call ask_$ask_line ("address ", billing_addr (j));
	chg_mo (j), chg_tr (j) = 0.0e0;
	qflag (j) = "";
	qdn (j) = clock_ ();
	qdf (j) = 0;
	go to main;

/* Go to top */

top:	j = 1;					/* whee */
	go to main;

/* Finish up. */

file:	qp -> reqfile.nacts = nq;			/* set count back in file */
	num24 = loqh + nq * loqe;			/* compute # of wds in file */
	call hcs_$initiate (dn, en, "", 0, 1, qpp, ec);	/* initiate real file */
	if qpp = null then go to er;
	qpp -> reqfile_zap = qp -> reqfile_zap;		/* copy new into old */
	num24 = 36 * num24;				/* compute new bit count */
	call hcs_$set_bc (dn, en, num24, ec);		/* ... */
	call hcs_$terminate_noname (qpp, ec);		/* terminate input */
	if func = "w" then go to main;

quit:	call hcs_$delentry_seg (qp, ec);		/* delete scratch copy */
	call ioa_ ("");

gdate:	proc (xcode) returns (fixed bin (71));		/* date getter */
dcl  xcode char (*);				/* argument */
dcl  temp char (12) aligned, b71 fixed bin (71),		/* temps */
     convert_date_to_binary_ entry (char (*) aligned, fixed bin (71), fixed bin);

xgdate:	     call ask_ (xcode, temp);			/* ask for the date */
	     call convert_date_to_binary_ (temp, b71, ec);
	     if ec ^= 0 then do;			/* was it illegal? */
		call ioa_ ("Illegal date for ""^a"": ""^a""", xcode, temp);
		call ask_$ask_clr;			/* illegal date. clear input */
		go to xgdate;			/* try again */
	     end;
	     return (b71);				/* good date, return it */
	end gdate;
     end;
