/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_tpp: stpp: proc;

/* Procedure to print and set the time-page-product of a directory.
   To be used by system administrators to repair clobbered directories,
   avoiding loss of disk storage revenue, and keeping the diskreport job happy.

   Usage: set_tpp directory -control_args-

   directory	is the pathname of the directory to be operated upon.

   control_args	may be chosen from the following and may appear in any order:

   -print, -pr		causes the current tpp and equivalent dollar charge to be printed.
   -long, -lg	causes the above, plus the quota, used time-tpp-updated, sons lvid, and quota switch to be printed.
   -directory, -dr	sets command to operate on directory page figures.
   -segment, -sm	sets the command to operate on segment page figures. This is the default.
   -set value	causes the tpp to be modified as specified by value

   value can be in dollars and cents (preceeded by a "$") or in page-seconds.
   It can have a "+" or "-" sign preceeding it, indicating a change
   to the current tpp, or be unsigned, indicating an absolute value to be set,
   replacing the current tpp. Setting of an absolute value is only approximate, since
   the tpp is growing while the command is being executed, and the
   primitive that makes the change only accepts relative values, to modify
   the current tpp.


   Written by T. Casey, April 1976
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.

*/

/* Ext Entries */

dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cv_dec_check_ entry (char (*) aligned, fixed bin (35)) returns (fixed bin (35));
dcl  cv_float_ entry (char (*) aligned, fixed bin (35)) returns (float bin (27));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  date_time_$fstime entry (bit (36), char (*));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$quota_read entry (char (*), fixed bin (18), fixed bin (71), bit (36), bit (36), fixed bin (1), fixed bin (18),
     fixed bin (35));
dcl  hcs_$dir_quota_read entry (char (*), fixed bin (18), fixed bin (71), bit (36), bit (36), fixed bin (1),
     fixed bin (18), fixed bin (35));
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  hphcs_$get_reset_quota entry (char (*), fixed bin (71), fixed bin (35));
dcl  hphcs_$dir_get_reset_quota entry (char (*), fixed bin (71), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  system_info_$prices_rs entry (fixed bin, (0:7)float bin, (0:7)float bin, (0:7)float bin,
    (0:7) float bin, float bin, float bin);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  search_sat_$rs_number entry (char (*), fixed bin, fixed bin (35));
dcl  search_sat_$clean_up entry;
dcl  error_table_$noentry external fixed bin (35);

/* Bit */

dcl (dollar_sw, expecting_val, got_path, long_sw, print_sw, set_sw) bit (1) aligned init (""b);
dcl (slvid, uptime) bit (36);

/* Fixed bin */

dcl (del_tpp, set_val, tpp) fixed bin (71);
dcl  code fixed bin (35);
dcl (quota, used) fixed bin (18);
dcl  rs_number fixed bin;
dcl  rs_count fixed bin;
dcl (aix, argl, argno, i, nargs) fixed bin;
dcl  operation fixed bin;
dcl  ADD fixed bin int static init (1);
dcl  SUBTRACT fixed bin int static init (2);
dcl  SET fixed bin int static init (3);
dcl  quota_sw fixed bin (1);

/* Float Bin */

dcl  dummy (0:7) float bin;
dcl (cur_charge, del_charge, disk_price, dollar_val, dummy1) float bin;

/* Char */

dcl  path char (168) init ("");
dcl  message char (168) init ("^a");
dcl  aligned_arg char (32) aligned;
dcl  date char (16);
dcl  dir_seg char (9) init ("segment");
dcl  me char (8) init ("set_tpp");
dcl  inc_dec char (8);
dcl  answer char (3) varying;

/* Ptr */

dcl (argp, dummy_ptr, segp) ptr init (null);

/* Based */

dcl  arg char (argl) based (argp);

/* Builtin */

dcl (addr, after, before, index, null, ptr, substr, verify) builtin;

/* Condition */

dcl  linkage_error condition;

/* Ext */

dcl (error_table_$bad_arg, error_table_$badopt, error_table_$noarg) ext fixed bin (35);

/* Include */

%include query_info;

/* Procedure */

	call cu_$arg_count (nargs);
	if nargs = 0 then do;
	     call com_err_ (0, me, "Usage: set_tpp path -print/-long -dr/-sm -set N/+N/-N/$N/$+N/$-N");
	     return;
	end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 then do;
		message = "";
		goto call_com_err;
	     end;

	     if expecting_val then do;		/* previous argument was -set */
		expecting_val = ""b;
		aix = 1;				/* scan for + - or $ starting at char 1 */
		operation = SET;			/* default, if + or - not given */
val_loop:		if verify (substr (arg, aix), "0123456789.") = 0 /* if nothing but those chars in rest of arg */
		then goto numeric;			/* then go convert it */
		i = index ("+-", substr (arg, aix, 1)); /* see if next char is + or - */
		if i ^= 0 then do;			/* it was one of them */
		     operation = i;			/* 1 = ADD, 2 = SUBTRACT */
		     aix = aix + 1;			/* skip to next char */
		     goto val_loop;			/* and go see if it is special */
		end;

		if substr (arg, aix, 1) = "$" then do;
		     dollar_sw = "1"b;
		     aix = aix + 1;			/* go to next char */
		     goto val_loop;			/* and go see if it is special */
		end;
bad_val:		message = "Error converting decimal argument: ""^a""";
		code = 0;
		goto arg_err;

numeric:		aligned_arg = substr (arg, aix);	/* copy rest of arg to aligned string */
		if dollar_sw then
		     dollar_val = cv_float_ (aligned_arg, code); /* convert to float bin */
		else set_val = cv_dec_check_ (aligned_arg, code); /* convert to fixed bin */
		if code ^= 0 then goto bad_val;
	     end;					/* end expecting */

	     else if substr (arg, 1, 1) ^= "-" then do;	/* not ctl arg */
		if ^got_path then do;
		     call expand_path_ (argp, argl, addr (path), null (), code);
		     if code ^= 0 then do;
arg_err:			path = arg;
call_com_err:		call com_err_ (code, me, message, path);
			return;
		     end;
		     got_path = "1"b;		/* remember we already got the dir path */
		end;

		else do;				/* we already have the path. this arg is no good */
		     code = error_table_$bad_arg;
		     goto arg_err;
		end;
	     end;					/* end not ctl arg */

/* must be control arg */

	     else if arg = "-print" | arg = "-pr" then print_sw = "1"b;
	     else if arg = "-s" | arg = "-sm" | arg = "-seg" | arg = "-segment" then dir_seg = "segment";
	     else if arg = "-d" | arg = "-dr" | arg = "-dir" | arg = "-directory" then dir_seg = "directory";
	     else if arg = "-lg" | arg = "-long" then print_sw, long_sw = "1"b;
	     else if arg = "-set" then set_sw, expecting_val = "1"b;
	     else do;
		code = error_table_$badopt;
		goto arg_err;
	     end;

	end;					/* and loop thru args */
	if ^got_path then do;
	     message = "directory path";
noarg_err:     code = error_table_$noarg;
	     goto call_com_err;
	end;

	if expecting_val then do;
	     message = "after -set";
	     goto noarg_err;
	end;

/* Now do the work */
	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */
	if rs_count > 0 then			/* if it does, */
	     call get_rs_number (path, rs_number);	/* we must get the correct rate_structure */
	else rs_number = 0;				/* if not, use the default (the only one at the site) */
	call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, disk_price, dummy1); /* get disk price */
	call get_quota;				/* int proc to get dir or seg quota */
	if code ^= 0 then goto call_com_err;

	cur_charge = tpp * disk_price;		/* compute current charge for the dir */

	if ^print_sw & ^set_sw then			/* if user said neither -print nor -set */
	     print_sw = "1"b;			/* presumably he did want us to do something */
	if print_sw then do;			/* if printing current values */
	     if long_sw then do;
		call date_time_$fstime (uptime, date);
		call ioa_ ("q=^d,u=^d,tpp=^d ($^.2f),updt=^a,slvid=^w,qsw=^d",
		     quota, used, tpp, cur_charge, date, slvid, quota_sw);
	     end;
	     else if quota_sw = 1 then		/* if dir has a quota and tpp */
		call ioa_ ("tpp=^d ($^.2f)", tpp, cur_charge);
	     else call ioa_ ("no quota or tpp on this directory");
	end;					/* end printing current values */

	if set_sw then do;				/* if setting new values */
	     on linkage_error goto no_hphcs;		/* see if user has hphcs_ access, before querying him */
	     call hcs_$make_ptr (null (), "hphcs_", "get_reset_quota", dummy_ptr, code);
	     if code = 0 then goto yes_hphcs;
no_hphcs:	     call com_err_ (code, me, "The set operation requires access to the hphcs_ gate");
	     return;
yes_hphcs:     revert linkage_error;

	     if dollar_sw then			/* compute tpp from given dollar value */
		set_val = dollar_val/disk_price;	/* floating point division, assigned to fixed bin */

	     if operation = SET then			/* user wants to set absolute value */
		del_tpp = tpp - set_val;		/* we can only approximate that */
	     else if operation = ADD then
		del_tpp = -set_val;			/* but we can make a +/- change exactly */
	     else del_tpp = set_val;

	     del_charge = - del_tpp * disk_price;

/* The apparent sign reversal error here is not an error.
   The confusion arises from the fact that the reset primitive subtracts del_tpp from the current tpp. */

	     if del_charge < 0e0 then
		inc_dec = "DECREASE";
	     else inc_dec = "INCREASE";
	     query_info.yes_or_no_sw = "1"b;
	     call command_query_ (addr (query_info), answer, me,
		"This operation will ^a the ^a page charge on ^a by $^.2f,to ^d ($^.2f). Do you want to do that?",
		inc_dec, dir_seg, path, del_charge, tpp-del_tpp, cur_charge+del_charge);
	     if answer = "no" then return;

	     if dir_seg = "directory" then
		call hphcs_$dir_get_reset_quota (path, del_tpp, code);
	     else call hphcs_$get_reset_quota (path, del_tpp, code);
	     if code ^= 0 then
		call com_err_ (code, me, "trying to reset tpp of ^a", path);

	     call get_quota;			/* look at result of what we did */
	     if code ^= 0 then goto call_com_err;
	     cur_charge = tpp * disk_price;
	     call ioa_ ("tpp is now ^d ($^.2f)", tpp, cur_charge);
	end;					/* end setting new values */
	return;

get_quota: proc;
	     if dir_seg = "directory" then
		call hcs_$dir_quota_read (path, quota, tpp, uptime, slvid, quota_sw, used, code);
	     else call hcs_$quota_read (path, quota, tpp, uptime, slvid, quota_sw, used, code);
	     return;
	end get_quota;

get_rs_number: proc (path, rs_number);

dcl (path, work) char (168);
dcl  rs_number fixed bin;

dcl (code, sat_code) fixed bin (35);
dcl (entry, project_entry) char (32);
dcl  area area based (area_ptr);
dcl (area_ptr, name_ptr init (null)) ptr;
dcl  primary_name char (32) aligned based (name_ptr);

dcl 1 status aligned,				/* status info structure */
   (2 type bit (2),
    2 nnames fixed bin (15),
    2 nrp bit (18),					/* rel ptr to names */
    2 dtm bit (36),
    2 dtu bit (36),
    2 mode bit (5),
    2 pad bit (13),
    2 records fixed bin (17)) unaligned;

dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));

	     rs_number,
		sat_code = 0;

	     work = after (path, ">");		/* get rid of root */
	     entry = before (work, ">");		/* and grab 1st level directory */
	     if entry ^= "udd" then
		if entry ^= "UDD" then
		     if entry ^= "user_dir_dir" then return; /* doesn't belong to a project */
	     work = after (work, ">");
	     entry = before (work, ">");		/* finally - the project name (one of them) */
	     project_entry = entry;
	     if entry = "" then return;		/* sorry - not a project */

	     area_ptr = get_system_free_area_ ();	/* get some working space */
	     call hcs_$status_ (">udd", (entry), 0, addr (status), area_ptr, code); /* we want the primary name */
	     if code = 0 & status.nrp ^= "0"b then do;
		name_ptr = ptr (area_ptr, status.nrp);	/* find the names array */
		project_entry = primary_name;		/* get the primary name */
		free primary_name in (area);		/* clean up */
		call search_sat_$rs_number ((project_entry), rs_number, sat_code); /* try for the rate */
		call search_sat_$clean_up;		/* tidy up */
		if sat_code = 0 then return;		/* home run */
	     end;

	     call search_sat_$rs_number ((entry), rs_number, sat_code); /* try the name given to us */
	     call search_sat_$clean_up;		/* tidy up */
	     if sat_code = 0 then return;		/* 1-0 for the good guys */
	     if code ^= 0 then			/* We tried! Heaven knows, we tried!! */
		call com_err_ (code, me, "Attempting to access project directory >udd>^a.", entry);
	     if sat_code = error_table_$noentry then
		call com_err_ (sat_code, me, "Trying to locate project ""^a"".  Default rates will be used.",
		project_entry);
	     else call com_err_ (sat_code, me, "Accessing the sat.  Default rates will be used");
	     return;
	end get_rs_number;

     end set_tpp;
