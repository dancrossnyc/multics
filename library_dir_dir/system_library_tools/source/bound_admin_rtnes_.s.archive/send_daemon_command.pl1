/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(91-03-11,Vu), approve(91-03-11,MCR8242), audit(91-12-06,Zimmerman),
     install(91-12-12,MR12.5-1008):
     Confusing error message for the command send_daemon_command
                                                   END HISTORY COMMENTS */


/* format: style2 */

send_daemon_command:
     procedure options (variable);

/**** Created 1985-02-19, BIM, from send_admin_command */
/**** Modified 1985-03-14, E. Swenson, to allow passing of login arguments */
/**** Modified 1985-04-03, E. Swenson to use keywords. */

/* Entries */

	dcl     com_err_		 entry () options (variable);
	dcl     com_err_$suppress_name entry () options (variable);
	dcl     cu_$arg_list_ptr	 entry returns (ptr);
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$standalone_invocation
				 entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     ssu_$destroy_invocation
				 entry (ptr);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);

	dcl     send_as_request_$block entry (pointer, fixed binary, bit (72) aligned, bit (72) aligned,
				 fixed binary (35));

/* Automatic */

	dcl     al		 fixed bin (21);
	dcl     ap		 pointer;
	dcl     code		 fixed bin (35);
	dcl     argx		 fixed bin;
	dcl     arg_count		 fixed bin;
	dcl     first_request_argument fixed bin;
	dcl     reply_bits		 bit (72) aligned;
	dcl     sci_ptr		 pointer;
	dcl     stringx		 fixed bin (21);
	dcl     argument		 char (al) based (ap) unal;
	dcl     source_seen		 bit (1) aligned;
	dcl     a_action		 fixed bin;
	dcl     a_source_name	 char (32);
	dcl     a_user_name		 char (32);
	dcl     a_project_name	 char (32);
	dcl     1 flags		 aligned,
		2 brief		 bit;

/* Constant */

	dcl     MAX_LENGTH		 fixed bin init (20000) int static options (constant);
	dcl     ME		 char (32) init ("send_daemon_command") int static options (constant);

/* Builtin */

          dcl     addr                   builtin;
          dcl     after                  builtin;
          dcl     before                 builtin;
          dcl     byte                   builtin;
          dcl     currentsize            builtin;
          dcl     index                  builtin;
          dcl     max                    builtin;
	dcl     null		 builtin;
	dcl     substr		 builtin;

/* External */

	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$bigarg	 fixed bin (35) ext static;
	dcl     error_table_$insufficient_access
				 fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;

/* Conditions */

	dcl     cleanup		 condition;
%page;

/* Program */

	sci_ptr = null ();
	asr_daemon_command_info_ptr = null ();
	on cleanup call clean_up;

	call ssu_$standalone_invocation (sci_ptr, ME, "1.0", cu_$arg_list_ptr (), SSU_ABORT, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "Failed to create ssu_ invocation.");
		return;
	     end;

	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0
	then do;
		call com_err_$suppress_name (0, ME,
		     "Usage: send_daemon_command (login|logout|reply|quit) source_name {arguments}");
		go to ABORT;
	     end;

/**** First argument to send_daemon_command is an action keyword.  This
      is a required, positional argument.  The existence of this argument
      has already been determined by the above check. */

	call ssu_$arg_ptr (sci_ptr, 1, ap, al);

	if argument = "login"
	then a_action = ASR_DC_LOGIN;
	else if argument = "logout"
	then a_action = ASR_DC_LOGOUT;
	else if argument = "reply"
	then a_action = ASR_DC_REPLY;
	else if argument = "quit"
	then a_action = ASR_DC_QUIT;
	else call ssu_$abort_line (sci_ptr, 0, "Invalid keyword ^a.", argument);

/**** We next parse all control arguments to the send_daemon_command 
      command.  The end of the control arguments is signalled by an
      argument which does not begin with a "-".   This argument must
      be the source_id. */

	a_user_name, a_project_name = "";
	flags = "0"b;				/* aggregate */

	source_seen = "0"b;				/* not yet */
	first_request_argument = -1;			/* none found yet */

	do argx = 2 to arg_count while (first_request_argument = -1);
	     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
	     if index (argument, "-") ^= 1		/* non-control */
	     then do;
		     if ^source_seen
		     then do;
			     a_source_name = argument;
			     source_seen = "1"b;
			end;
		     else first_request_argument = argx;
		end;
	     else if argument = "-brief"
	     then flags.brief = "1"b;
	     else if argument = "-long"
	     then flags.brief = "0"b;
	     else call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", argument);
	end;


	if ^source_seen
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "No source_name specified.");

	if a_action = ASR_DC_LOGIN
	then /* login */
	     if first_request_argument = -1
	     then /* didn't say who */
		call ssu_$abort_line (sci_ptr, error_table_$noarg, "User.Project must be specified.");
	     else do;
		     call ssu_$arg_ptr (sci_ptr, first_request_argument, ap, al);

		     a_user_name = before (argument, ".");
		     a_project_name = after (argument, ".");
		     if a_user_name = "" | a_project_name = "" | index (a_user_name, ".") > 0
			| index (a_project_name, ".") > 0
		     then call ssu_$abort_line (sci_ptr, error_table_$badopt,
			     "^/Usage: ^a login channel User.Project", ME);
/**** The Personid.Projectid argument did not really count as a request
      argument.  Update things to reflect this. */

		     first_request_argument = first_request_argument + 1;
		     if first_request_argument > arg_count
		     then first_request_argument = -1;
		end;

	if first_request_argument = -1 & a_action = ASR_DC_REPLY
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "No reply command line given.");

	asr_dc_length = 0;
	if first_request_argument ^= -1
	then do;
		if (a_action = ASR_DC_QUIT | a_action = ASR_DC_LOGOUT)
		then call ssu_$abort_line (sci_ptr, 0, "No additional arguments are valid for logout or quit.");

/**** Establish length of command line */

		do argx = first_request_argument to arg_count;
		     call ssu_$arg_ptr (sci_ptr, argx, (null ()), al);
		     asr_dc_length = asr_dc_length + al + 1;
						/* space on the end */
		end;

		if a_action ^= ASR_DC_REPLY
		then /* leave room for the NL */
		     asr_dc_length = asr_dc_length - 1;
		asr_dc_length = max (0, asr_dc_length);

		if asr_dc_length > MAX_LENGTH
		then call ssu_$abort_line (sci_ptr, error_table_$bigarg,
			"Command line exceeds ^d characters in length.", MAX_LENGTH);
	     end;

	asr_daemon_command_info_ptr = null ();
	allocate asr_daemon_command_info;
	asr_daemon_command_info.header.version = as_request_version_1;
	asr_daemon_command_info.header.type = ASR_DAEMON_COMMAND;
	asr_daemon_command_info.version = ASR_DC_INFO_VERSION_1;
	asr_daemon_command_info.action_code = a_action;
	asr_daemon_command_info.command = "";
	asr_daemon_command_info.source_name = a_source_name;
	asr_daemon_command_info.user_name = a_user_name;
	asr_daemon_command_info.project_name = a_project_name;

	if first_request_argument ^= -1
	then do;
		stringx = 1;
		do argx = first_request_argument to arg_count;
		     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
		     if argx < arg_count
		     then do;
			     substr (asr_daemon_command_info.command, stringx, al + 1) = argument || " ";
			     stringx = stringx + al + 1;
			end;
		     else if a_action = ASR_DC_REPLY
		     then substr (asr_daemon_command_info.command, stringx, al + 1) = argument || byte (10);
		     else substr (asr_daemon_command_info.command, stringx, al) = argument;
		end;
	     end;

	call send_as_request_$block (asr_daemon_command_info_ptr, currentsize (asr_daemon_command_info), (""b),
	     reply_bits, code);

	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Failed to send request to answering service.");

	asr_reply_dc_ptr = addr (reply_bits);
	if asr_reply_daemon_command.code ^= 0
	then do;
		if asr_reply_daemon_command.no_access_to_daemon
		then call ssu_$abort_line (sci_ptr, error_table_$insufficient_access, "On daemon source ""^a"".",
			a_source_name);
		else if asr_reply_daemon_command.command_refused
		then call ssu_$abort_line (sci_ptr, error_table_$insufficient_access, "Cannot send daemon commands.");
		else if asr_reply_daemon_command.no_such_daemon
		then call ssu_$abort_line (sci_ptr, 0, "No daemon logged in over daemon source ""^a"".",
			a_source_name);
		else call ssu_$abort_line (sci_ptr, asr_reply_daemon_command.code);
	     end;

	call clean_up ();
	return;
%page;
SSU_ABORT:
     procedure ();

	goto ABORT;
     end SSU_ABORT;
ABORT:
	call clean_up ();
	return;

clean_up:
     procedure ();

	call ssu_$destroy_invocation (sci_ptr);
	if asr_daemon_command_info_ptr ^= null
	then free asr_daemon_command_info;
	return;
     end clean_up;

/* format: off */
%page; %include asr_daemon_command;
%page; %include as_request_header;

     end send_daemon_command;
