/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1992   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(92-09-23,Zimmerman), approve(92-09-23,MCR8268), audit(92-10-13,Vu),
     install(92-10-21,MR12.5-1034):
     edit_proj changed to allow deletion of project alias from SAT (phx21304)
                                                   END HISTORY COMMENTS */


/* format: style2 */
edit_proj:
     procedure options (variable);


/* EDIT_PROJ - This program is used by User Accounts to  modify projects.

   Written by T. H. VanVleck in 1973
   Modified June 1975 by T. Casey to add groups
   Modified August 1977 by T. Casey to add min_ring and max_ring
   Modified May 1978 by T. Casey to add pdir_quota.
   Modified November 1978 by T. Casey for MR7.0 to add new absentee control parameters.
   Modified April 1979 by T. Casey for MR7.0a to fix bug in $change_all entry point.
   Modified October 1979 by T. Casey for MR8.0 to fix another bug in $change_all entry point.
   Modified November 1979 by T. Casey to add -long ctl arg and change default to not -long.
   Modified June 1980 by J.N. R. Barnecut to support multiple rate structure feature.
   Modified March 1982 by E. N. Kittlitz to eliminate proj_admin_seg. 
   Modified 1984-07-09 BIM to restructure, add B2 things, dir quota.
   Modified 1984-09-14 BIM to go to V3 edit_proj_args and pass the mgtp.
   Modified 1984-09-20 BIM to correct acl determination on delegation.
   Modified 1985-02-15 E. Swenson: Since Benson was just kidding, above, I
   really corrected acl determination on delegation.
   Modified 1985-04-25 EJ Sharpe: fixed bad subscript in CHANGE_ACLS
*/

	dcl     argx		 fixed bin;
	dcl     arg_count		 fixed bin;
	dcl     ap		 pointer;
	dcl     al		 fixed bin (21);
	dcl     argument		 char (al) based (ap);
	dcl     change_all_match_all	 bit (1) aligned;
	dcl     changed		 bit (1) aligned;
	dcl     changed_count	 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     debug_switch	 bit (1) aligned init ("0"b);
	dcl     dir_priv_code	 fixed bin (35) init (-1);
	dcl     error		 bit (1) aligned;
	dcl     me		 char (32);
	dcl     mylock		 bit (1) aligned init ("0"b);
	dcl     project_name	 char (32);
	dcl     projfile_index	 fixed bin init (-1);
	dcl     reqfile_index	 fixed bin init (-1);
	dcl     satx		 fixed bin;
	dcl     (pp, qp, sadp, satp, satep, mgtp)
				 pointer;		/* to famous data segments */
	dcl     1 EPA		 aligned like edit_proj_arg;
	dcl     uid		 char (32);

/* static (or nearly) */

	dcl     USER_RING		 fixed bin (3) init (4);

	dcl     udd		 char (168) int static init (">user_dir_dir");
	dcl     sc1_pdt		 char (168) int static init (">system_control_1>pdt");
	dcl     sc1		 char (168) int static init (">system_control_1");


/* Entrypoints */

	dcl     absolute_pathname_	 entry (character (*), character (*), fixed binary (35));
	dcl     aim_check_$greater	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
	dcl     com_err_		 entry () options (variable);
	dcl     command_query_$yes_no	 entry () options (variable);
	dcl     continue_to_signal_	 entry (fixed binary (35));
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     edit_proj_$check	 entry (pointer);
	dcl     edit_proj_		 entry (pointer);
	dcl     expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	dcl     find_condition_info_	 entry (pointer, pointer, fixed binary (35));
	dcl     get_group_id_	 entry () returns (char (32));
	dcl     get_wdir_		 entry () returns (character (168));
	dcl     hcs_$add_acl_entries	 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_acl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_inacl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
	dcl     hcs_$delete_acl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$delete_dir_acl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$delete_dir_inacl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     (
	        hcs_$quota_move,
	        hcs_$dir_quota_move
	        )			 entry (char (*), char (*), fixed bin (18), fixed bin (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	dcl     mdc_$set_mdir_quota	 entry (char (*), char (*), bit (1) aligned, fixed bin (18), fixed bin (35));
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed binary, fixed binary (35));
	dcl     set_lock_$unlock	 entry (bit (36) aligned, fixed binary (35));
	dcl     sub_err_		 entry () options (variable);
	dcl     system_privilege_$dir_priv_on
				 entry (fixed bin (35));
	dcl     system_privilege_$dir_priv_off
				 entry (fixed bin (35));
	dcl     terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

	declare error_table_$too_many_args
				 fixed bin (35) ext static;
	declare error_table_$badopt	 fixed bin (35) ext static;
	declare error_table_$noentry	 fixed bin (35) ext static;
	declare error_table_$locked_by_this_process
				 fixed bin (35) ext static;
	declare error_table_$invalid_lock_reset
				 fixed bin (35) ext static;
%page;
%include user_attributes;
%include sys_admin_data;
%include projfile;
%include reqfile;
%include sat;
%include condition_info;
%include condition_info_header;
%include sub_error_info;
%include status_structures;
%include access_mode_values;
%include terminate_file;
%include edit_proj_arguments_;
%include acl_structures;
%include edit_proj_keywords_;
%include sub_err_flags;

	dcl     1 Nsate		 aligned like project;
	dcl     1 Nprojfile		 aligned like projfile.projfiletab;
	dcl     1 Nreqfile		 aligned like reqfile.reqfiletab;
          dcl     (addr, hbound, index, null, rtrim, unspec) builtin;
	dcl     (cleanup, sub_error_)	 condition;


/**** Normal call:
      edit_proj Project                                      prompts for all.
      edit_proj Project keyword			 prompts for one.
      edit_proj Project keyword new_value		 sets key to value
      edit_proj Project keyword new_value -long		 sets key to value and reports result.
      edit_proj Project match_keyword old_value {new_value} {-long}
						looks up old_value in set of values for match_keyword and optionally replaces. 
*/

	me = "edit_proj";
	call command_setup;

	if arg_count < 1
	then
USAGE:
	     do;
		call com_err_ (0, me, "Usage: edit_proj Project {key} {old_value} {new_value}");
		return;
	     end;

	project_name = "";

	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if index (argument, "-") ^= 1
	     then do;				/* non-control */
		     if project_name = ""
		     then project_name = argument;
		     else if EPA.value_index = -1
		     then call lookup_keyword ();
		     else if matching_keyword ()
		     then if EPA.match_value.ptr = null ()
			then do;
				EPA.match = "1"b;
				EPA.match_value.ptr = ap;
				EPA.match_value.length = al;
			     end;
			else if EPA.new_value.ptr = null ()
			then do;
				EPA.new_value.ptr = ap;
				EPA.new_value.length = al;
			     end;
			else do;
				call com_err_ (error_table_$too_many_args, me,
				     "Usage: edit_proj Project ^a old_value {new_value} {-control_args}.",
				     PROJ_KEY_NAMES (EPA.value_index));
				go to return;
			     end;
		     else /* not matching form */
			if EPA.new_value.ptr = null ()
		     then do;
			     EPA.new_value.ptr = ap;
			     EPA.new_value.length = al;
			end;
		     else do;
			     call com_err_ (error_table_$too_many_args, me,
				"Usage: edit_proj Project ^a {new_value} {-control_args}.",
				PROJ_KEY_NAMES (EPA.value_index));
			     go to return;
			end;
		end;
	     else if argument = "-long" | argument = "-lg"
	     then EPA.long = "1"b;
	     else if argument = "-brief" | argument = "-bf"
	     then EPA.long = "0"b;
	     else if argument = "-debug"
	     then debug_switch = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, me, """^a"".", argument);
		     go to return;
		end;
	end;

	if project_name = ""			/* cannot abide without that */
	then go to USAGE;

	mgtp, sadp, pp, qp, satp = null ();
	dir_priv_code = -1;				/* priv disabled */
	on cleanup call cleanup_segments;		/* and priv */
	on sub_error_ call sub_error_handler;

	call initiate_segments;			/* and other misc setup */
	EPA.mgtp = mgtp;				/* use the version we found */

/**** Now, look for the specified project */

	do satx = 1 to sat.current_size;
	     satep = addr (sat.project (satx));
	     if project.state = 1
	     then if project.project_id = project_name
		then go to GOT_PROJECT;
	end;

	call com_err_ (error_table_$noentry, me, "Project ""^a"" not defined in SAT.", project_name);
	call cleanup_segments;
	go to return;

GOT_PROJECT:
	Nsate = project;				/* Now we have temporary copy */

/**** However, we have to turn up the matching reqfile and projfile entries */

	call find_and_copy_other_tables (project_name, reqfile_index, projfile_index, error);

	if error
	then do;					/* message already printed */
		call cleanup_segments;
		go to return;
	     end;

	if EPA.value_index = -1
	then EPA.all = "1"b;			/* all of them */

	EPA.satep = addr (Nsate);
	EPA.projfile_ep = addr (Nprojfile);
	EPA.reqfile_ep = addr (Nreqfile);

/**** At this point, EPA is completely filled in. */

	if ^EPA.all
	then call edit_proj_$check (addr (EPA));
	call edit_one_project (("0"b));		/* ignore changed flag */
	if EPA.match
	then if ^EPA.changes.anything
	     then call com_err_ (0, me, "No match for ^a ^a.", PROJ_KEY_NAMES (EPA.value_index), match_value_string);

	call cleanup_segments;
	return;


change_all:
     entry options (variable);

/**** edit_proj$change_all keyword new_value {-long}
      edit_proj$change_all match_keyword old_value new_value {-long}
*/

	me = "edit_proj$change_all";
	call command_setup;
	EPA.brief_match = "1"b;			/* never complain about this in the all case, very few will match */
	EPA.report_project_name = "1"b;

	if arg_count < 2
	then
CA_USAGE:
	     do;
		call com_err_ (0, me, "Usage: new_prog$change_all Keyword {old_value} {new_value} {-long}");
		go to return;
	     end;

	change_all_match_all = "0"b;
	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if index (argument, "-") ^= 1
	     then do;				/* non-control */
		     if EPA.value_index = -1
		     then call lookup_keyword ();
		     else if EPA.match_value.ptr = null ()
		     then do;
			     EPA.match = "1"b;
			     EPA.match_value.ptr = ap;
			     EPA.match_value.length = al;
			end;
		     else if EPA.new_value.ptr = null ()
		     then do;
			     EPA.new_value.ptr = ap;
			     EPA.new_value.length = al;
			end;
		     else do;
			     call com_err_ (error_table_$too_many_args, me,
				"Usage: edit_proj$change_all ^a {old_value} {new_value} {-control_args}.",
				PROJ_KEY_NAMES (EPA.value_index));
			     go to return;
			end;
		end;
	     else if argument = "-all"
	     then change_all_match_all = "1"b;
	     else if argument = "-long" | argument = "-lg"
	     then EPA.long = "1"b;
	     else if argument = "-brief" | argument = "-bf"
	     then EPA.long = "0"b;
	     else if argument = "-debug"
	     then debug_switch = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, me, """^a"".", argument);
		     go to return;
		end;
	end;

	if EPA.value_index = -1			/* Must know what keyword */
	then go to CA_USAGE;

	if change_all_match_all
	then do;
		if EPA.new_value.ptr ^= null ()
		then do;
			call com_err_ (0, me,
			     "-all may not be specified with a match value, since it matches all values of the field."
			     );
			go to return;
		     end;
		EPA.new_value.ptr = EPA.match_value.ptr;
		EPA.new_value.length = EPA.match_value.length;
		EPA.match_value.ptr = null ();
		EPA.match_value.length = 0;
		EPA.match = "0"b;			/* no match required, just do it. */
	     end;

	if ^EPA.match & EPA.new_value.ptr ^= null ()	/* set all, unconditionally? */
	then do;
		call command_query_$yes_no (error, 0, me,
		     "If you answer ""yes"" to this query, ALL PROJECT will be changed.",
		     "Do you wish to change the ^a field of ALL projects on the system to ""^a""?",
		     PROJ_KEY_NAMES (EPA.value_index), new_value_string);
		if ^error
		then go to return;
	     end;

/**** Okay, we have arguments (we have arguments, earther.) */
/**** However, we want to validate the new value BEFORE we go tearing
   off through the SAT. */

	call edit_proj_$check (addr (EPA));		/* signals sub_error_ if it is displeasing */

/**** We have a valid new value and match, to the extent that we know how. */
/**** Now to loop through the SAT (with the greatest of ease.) */

	sadp, pp, qp, satp = null ();
	dir_priv_code = -1;				/* priv disabled */
	on cleanup call cleanup_segments;		/* and priv */
	on sub_error_ call sub_error_handler;

	call initiate_segments;			/* assuming, of course, that the crucial goodies are to be had. */

	changed_count = 0;
	do satx = 1 to sat.current_size;
	     satep = addr (sat.project (satx));
	     if project.state = 1			/* in business? */
	     then do;
		     Nsate = project;
		     project_name = Nsate.project_id;
		     call find_and_copy_other_tables (project_name, reqfile_index, projfile_index, error);
		     if ^error
		     then do;
			     EPA.changes = "0"b;	/* expunge leftovers */
			     EPA.satep = addr (Nsate);
			     EPA.projfile_ep = addr (Nprojfile);
			     EPA.reqfile_ep = addr (Nreqfile);
			     call edit_one_project (changed);
						/* do the work */
			     if changed
			     then changed_count = changed_count + 1;
			end;
		end;				/* all done! */
	end;

	if changed_count = 0
	then call ioa_ ("^a: No projects were changed.", me);
	else call ioa_ ("^a: ^d projects changed.", me, changed_count);
	call cleanup_segments;
	return;


edit_one_project:
     procedure (changed);

	declare changed		 bit (1) aligned;

/**** call edit_proj_ to do make changes in N*.
      It leaves us notes when things change that require FS adjustments. */

	changed = "0"b;
	call edit_proj_ (addr (EPA));			/* no errors save sub errors */
	if ^EPA.changes.anything
	then return;				/* dull! */

	changed = "1"b;

	if EPA.changes.acls
	then call CHANGE_ACLS;
	if EPA.changes.alias & Nsate.alias ^= ""  /* If null then alias deleted from SAT */
	then call CHANGE_ALIAS;
	if EPA.changes.seg_quota
	then call CHANGE_SEG_QUOTA;
	if EPA.changes.dir_quota
	then call CHANGE_DIR_QUOTA;

	project = Nsate;				/* ZOOM */
	projfile.projfiletab (projfile_index) = Nprojfile;
	reqfile.reqfiletab (reqfile_index) = Nreqfile;
	return;
%page;
CHANGE_ACLS:
     procedure;

	declare delete_me		 (4) char (32);
	declare add_me		 (4) char (32);
	declare add_idx		 fixed bin;
	declare delete_idx		 fixed bin;
	declare oldx		 fixed bin;
	declare newx		 fixed bin;
	declare x			 fixed bin;
	declare 1 seg_acl_array	 (4) aligned like segment_acl_entry;
	declare 1 dir_acl_array	 (4) aligned like directory_acl_entry;
	declare 1 dl_acl_array	 (4) aligned like delete_acl_entry;

	delete_me (*) = project.admin (*).userid;
	add_me (*) = Nsate.admin (*).userid;
	do oldx = 1 to 4;
	     if delete_me (oldx) ^= ""
	     then do newx = 1 to 4;
		     if delete_me (oldx) = add_me (newx)
		     then delete_me (oldx), add_me (newx) = "";
		end;
	end;

/**** Now, delete_me is a possibly sparse array of entries to remove,
      and add_me is a possibly sparse array of entries to add. */

	delete_idx, add_idx = 0;

	do x = 1 to 4;
	     if delete_me (x) ^= ""
	     then do;
		     delete_idx = delete_idx + 1;
		     dl_acl_array (delete_idx).access_name = rtrim (delete_me (x)) || ".*";
		     dl_acl_array (delete_idx).status_code = 0;
		end;
	     if add_me (x) ^= ""
	     then do;
		     add_idx = add_idx + 1;
		     seg_acl_array (add_idx).access_name, dir_acl_array (add_idx).access_name =
			rtrim (add_me (x)) || ".*";
		     seg_acl_array (add_idx).mode = R_ACCESS;
						/* >sc1>pdt>PDT */
		     seg_acl_array (add_idx).extended_mode = ""b;
		     dir_acl_array (add_idx).mode = SMA_ACCESS;
						/* project dir */
		     seg_acl_array (add_idx).status_code, dir_acl_array (add_idx).status_code = 0;
		end;
	end;

/**** Now, we know we have something to do, and we have the arrays */

	if add_idx = 0 & delete_idx = 0
	then return;				/* nothing to do */

	call SET_DIR_PRIVILEGE_AS_NEEDED;

	if delete_idx > 0
	then do;
		call hcs_$delete_acl_entries (sc1_pdt, rtrim (Nsate.project_id) || ".pdt", addr (dl_acl_array),
		     delete_idx, code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not delete acl entries for removed administrators from ^a>^a.pdt", sc1_pdt,
			Nsate.project_id);
		call hcs_$delete_dir_acl_entries (udd, (Nsate.project_id), addr (dl_acl_array), delete_idx, code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not delete acl entries for removed administrators from ^a>^a.", udd,
			Nsate.project_id);
		call hcs_$delete_dir_inacl_entries (udd, (Nsate.project_id), addr (dl_acl_array), delete_idx,
		     USER_RING, code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not delete initial acl entries for removed administrators from ^a>^a.", udd,
			Nsate.project_id);
	     end;

	if add_idx > 0
	then do;
		call hcs_$add_acl_entries (sc1_pdt, rtrim (Nsate.project_id) || ".pdt", addr (seg_acl_array), add_idx,
		     code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not add acl entries for added administrators to ^a>^a.pdt", sc1_pdt,
			Nsate.project_id);
		call hcs_$add_dir_inacl_entries (udd, (Nsate.project_id), addr (dir_acl_array), add_idx, USER_RING,
		     code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not add initial acl entries for added administrators to ^a>^a.", udd,
			Nsate.project_id);
		call hcs_$add_dir_acl_entries (udd, (Nsate.project_id), addr (dir_acl_array), add_idx, code);
		if code ^= 0
		then call com_err_ (code, me, "Warning: Could not add acl entries for added administrators to ^a>^a.",
			udd, Nsate.project_id);

		dir_acl_array (*).mode = A_ACCESS;	/* prepare to fool with >sc1>update */
		call hcs_$add_dir_acl_entries (sc1, "update", addr (dir_acl_array), add_idx, code);
		if code ^= 0
		then call com_err_ (code, me,
			"Warning: Could not add append access to ^a>update for added administrators.", sc1);
		return;
	     end;
     end CHANGE_ACLS;

CHANGE_ALIAS:
     procedure;

/* Fix the alias if it changed. */
	
	call SET_DIR_PRIVILEGE_AS_NEEDED;

	call hcs_$chname_file (udd, (Nsate.project_id), "", (Nsate.alias), code);
						/* don't remove old one, people may be used to it! */
	if code ^= 0
	then call com_err_ (code, me, "Warning: Could not add new name ^a to ^a>^a.", Nsate.alias, udd,
		Nsate.project_id);

	return;
     end CHANGE_ALIAS;


CHANGE_SEG_QUOTA:
     procedure;

	declare 1 SL		 aligned like status_branch;
	declare q_delta		 fixed bin (18);

	q_delta = Nprojfile.disk_quota - projfile.projfiletab (projfile_index).disk_quota;

	call hcs_$status_long (udd, (Nsate.project_id), (1), addr (SL), null (), code);
	if code ^= 0
	then do;
		call com_err_ (code, me, "Warning: Could not retrieve LVID of ^a>^a. Segment quota not changed.", udd,
		     Nsate.project_id);
		return;
	     end;

	call SET_DIR_PRIVILEGE_AS_NEEDED;

	if SL.mdir_switch
	then call mdc_$set_mdir_quota (udd, (Nsate.project_id), "1"b, q_delta, code);
	else call hcs_$quota_move (udd, (Nsate.project_id), q_delta, code);
	if code ^= 0
	then call com_err_ (code, me, "Warning: could not move segment quota ^d for ^a>^a", q_delta, udd,
		Nsate.project_id);
	return;
     end CHANGE_SEG_QUOTA;



CHANGE_DIR_QUOTA:
     procedure;

	declare q_delta		 fixed bin (18);

	q_delta = Nprojfile.dir_disk_quota - projfile.projfiletab (projfile_index).dir_disk_quota;

	call SET_DIR_PRIVILEGE_AS_NEEDED;

	call hcs_$dir_quota_move (udd, (Nsate.project_id), q_delta, code);
	if code ^= 0
	then call com_err_ (code, me, "Warning: could not move directory quota ^d for ^a>^a", q_delta, udd,
		Nsate.project_id);
	return;
     end CHANGE_DIR_QUOTA;
     end edit_one_project;


test:
     entry (asc1, audd);
	dcl     (asc1, audd)	 char (*);

	call absolute_pathname_ (asc1, sc1, (0));
	call absolute_pathname_ (audd, udd, (0));

	sc1_pdt = rtrim (sc1) || ">pdt";
	call ioa_ ("sc1 = ^a, udd = ^a.", sc1, udd);
	return;


SET_DIR_PRIVILEGE_AS_NEEDED:
     procedure;

	declare udd_acc		 bit (72) aligned;
	declare pj_acc		 bit (72) aligned;
	declare uddd		 char (168);
	declare udde		 char (32);

	if dir_priv_code = 0
	then return;				/* already on */
	call expand_pathname_ (udd, uddd, udde, code);
	if code ^= 0
	then call sub_err_ (code, me, ACTION_CANT_RESTART, null (), (0), "Could not expand pathname of ^a.", udd);
	call hcs_$get_access_class (uddd, udde, udd_acc, code);
	if code ^= 0
	then call sub_err_ (code, me, ACTION_CANT_RESTART, null (), (0), "Could not get access class of ^a.", udd);
	call hcs_$get_access_class (udd, (Nsate.project_id), pj_acc, code);
	if code ^= 0
	then call sub_err_ (code, me, ACTION_CANT_RESTART, null (), (0), "Could not get access class of ^a>^a.", udd,
		Nsate.project_id);
	if ^aim_check_$greater (pj_acc, udd_acc)
	then return;
	call system_privilege_$dir_priv_on (dir_priv_code);
						/* atomic over code setting */
	return;
     end SET_DIR_PRIVILEGE_AS_NEEDED;

command_setup:
     procedure;					/* has to be quick ... */

	unspec (EPA) = ""b;
	edit_proj_arg_ptr = addr (EPA);
	EPA.seg_pointers = null ();
	EPA.new_value.ptr = null ();
	EPA.match_value.ptr = null ();
	EPA.value_index = -1;
	EPA.version = EDIT_PROJ_ARGS_V_2;
	EPA.caller = me;

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, me);
		go to return;
	     end;
	return;
     end command_setup;

lookup_keyword:
     procedure;
	declare kx		 fixed bin;

	do kx = 1 to hbound (PROJ_KEY_NAMES, 1);
	     if argument = PROJ_KEY_NAMES (kx)
	     then do;
		     EPA.value_index = PROJ_KEY_VALUES (kx);
		     return;
		end;
	end;

	call com_err_ (0, me, "Invalid keyword ""^a"".", argument);
	go to return;
     end lookup_keyword;

matching_keyword:
     procedure returns (bit (1) aligned);

	declare kx		 fixed bin;

	do kx = 1 to hbound (PROJ_KEYS_MATCH, 1);
	     if EPA.value_index = PROJ_KEYS_MATCH (kx)
	     then return ("1"b);
	end;
	return ("0"b);
     end matching_keyword;

sub_error_handler:
     procedure;

	declare 1 CI		 aligned like condition_info;
	if debug_switch
	then call continue_to_signal_ ((0));
	else do;
		CI.version = condition_info_version_1;
		call find_condition_info_ (null (), addr (CI), (0));
		sub_error_info_ptr = CI.info_ptr;
		call com_err_ (sub_error_info.status_code, me, "^a", sub_error_info.info_string);
		go to ERROR_EXIT;
	     end;
     end sub_error_handler;

initiate_segments:
     procedure;

	declare dn		 char (168);
	declare en		 char (32);

	dn = get_wdir_ ();
	en = "sys_admin_data";
	call initiate_file_ (dn, en, R_ACCESS, sadp, (0), code);
	if code ^= 0
	then go to segment_error;
	call set_lock_$lock (sys_admin_data.lock, 60, code);
	if code ^= 0
	then if code = error_table_$locked_by_this_process
	     then mylock = "1"b;
	     else if code ^= error_table_$invalid_lock_reset
	     then do;
		     call com_err_ (code, "edit_proj", "Sys_admin_data is locked by ^a", sys_admin_data.locker);
		     call terminate_file_ (sadp, (0), TERM_FILE_TERM, (0));
		     go to return;
		end;

	uid = get_group_id_ ();

	en = "smf.cur.sat";
	call initiate_file_ (dn, en, RW_ACCESS, satp, (0), code);
	if code ^= 0
	then go to segment_error;

	en = "projfile";
	call initiate_file_ (dn, en, RW_ACCESS, pp, (0), code);
	if code ^= 0
	then go to segment_error;
	en = "reqfile";
	call initiate_file_ (dn, en, RW_ACCESS, qp, (0), code);
	if code ^= 0
	then go to segment_error;
	dn = sc1;
	en = "mgt";
	call initiate_file_ (dn, en, R_ACCESS, mgtp, (0), code);
	if code ^= 0
	then go to segment_error;
	return;

segment_error:
	call com_err_ (code, "edit_proj", "^a>^a", dn, en);
	call cleanup_segments;
	go to return;
     end initiate_segments;


find_and_copy_other_tables:
     procedure (project_name, reqfile_index, projfile_index, error);

	declare error		 bit (1) aligned;
	declare project_name	 char (*);
	declare reqfile_index	 fixed bin;
	declare projfile_index	 fixed bin;
	declare tx		 fixed bin;

	error = "0"b;
	reqfile_index, projfile_index = -1;

	do tx = 1 to reqfile.nacts while (project_name ^= reqfile.acctid (tx));
	end;
	if tx > reqfile.nacts
	then do;
		call com_err_ (0, me, "Project ^a not in reqfile.", project_name);
		error = "1"b;
		return;
	     end;
	if reqfile.qdf (tx) ^= 0
	then call ioa_ ("^a: Warning: Project ""^a"" deleted from reqfile.", me, project_name);

	reqfile_index = tx;
	Nreqfile = reqfile.reqfiletab (tx);

	do tx = 1 to projfile.nproj while (project_name ^= projfile.id (tx));
	end;
	if tx > projfile.nproj
	then do;
		call com_err_ (0, me, "Project ""^a"" is not in projfile.", project_name);
		error = "1"b;
		return;
	     end;
	if projfile.off (tx) ^= 0
	then call ioa_ ("^a: Warning: project ""^a"" deleted from projfile.", me, project_name);
	Nprojfile = projfile.projfiletab (tx);
	projfile_index = tx;
	return;
     end find_and_copy_other_tables;

cleanup_segments:
     procedure;

	if dir_priv_code = 0
	then call system_privilege_$dir_priv_off (code);
	if pp ^= null ()
	then call terminate_file_ (pp, 36 * (loph + projfile.nproj * lope), TERM_FILE_TRUNC_BC_TERM, (0));
	if qp ^= null ()
	then call terminate_file_ (qp, 36 * (loqh + reqfile.nacts * loqe), TERM_FILE_TRUNC_BC_TERM, (0));
	if satp ^= null ()
	then call terminate_file_ (satp, 36 * (SAT_header_lth + sat.current_size * SAT_entry_lth),
		TERM_FILE_TRUNC_BC_TERM, (0));
	if sadp ^= null ()
	then do;
		if ^mylock
		then call set_lock_$unlock (sys_admin_data.lock, code);
		call terminate_file_ (sadp, (0), TERM_FILE_TERM, (0));
	     end;
	if mgtp ^= null ()
	then call terminate_file_ (mgtp, 0, TERM_FILE_TERM, (0));

     end cleanup_segments;

ERROR_EXIT:
	call cleanup_segments;
	return;

return:
	return;

     end edit_proj;
