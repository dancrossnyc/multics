/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_disk: proc;

/* This program prints out a disk usage listing
   from the disk usage figures in "projfile"
   which were placed there by "charge_disk".

   THVV 4/70
   Modified by T. Casey April 1976 to print directory pages used column.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.
*/

dcl (hp, pp) ptr,					/* pointer to input */
     tid char (9) aligned,
    (path, dn) char (168) aligned,			/* file system names */
     en char (32) aligned,				/* .. */
    (coxx, dpxx) char (64) aligned,			/* company & department */
     temp fixed bin (71),				/* temp for disk use */
     dols float bin,				/* dollar charge */
     tdols float bin init (0.0e0),			/* total charge */
     tqta fixed bin (35) init (0),			/* total quota */
    (tduse, tuse) fixed bin (35) init (0),		/* total use */
     qta fixed bin (35),				/* project quota */
    (duse, use) fixed bin (35),			/* project use */
     disk_price (0:9) float bin,
     dummy1 float bin,
     dummy (0: 7) float bin,
    (i, np) fixed bin;				/* misc */
dcl  ec fixed bin (35);
dcl  rs_number fixed bin;				/* rate structure index */
dcl  rs_name char (32);
dcl  rs_count fixed bin;

dcl  get_wdir_ entry () returns (char (168) aligned),
     system_info_$titles entry (char (*) aligned, char (*) aligned),
     system_info_$prices_rs entry (fixed bin,
    (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, float bin, float bin),
     system_info_$rs_name entry (fixed bin, char (*), fixed bin (35)),
     system_info_$max_rs_number entry (fixed bin),
     search_sat_$rs_number entry (char (*), fixed bin, fixed bin (35)),
     search_sat_$clean_up entry,
     ioa_ entry options (variable),			/* output printing procedure */
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),	/* file system */
     com_err_ entry options (variable);			/* error reporter */
dcl  error_table_$noentry external fixed bin (35);

dcl (hbound, null) builtin;

dcl  format char (32) int static aligned init		/* output formats */
    ("^-^9a^4x^6d^4x^6d^4x^6d^4x^15.2f"),
     head char (49) aligned int static init
    ("^/^/^-Project^5xs-quota^5xs-use^5xd-use^13xCharge"),
     dash char (54) aligned int static init
    ("^----------^5x-----^5x-----^5x-----^5x--------------^/");

%include projfile;

/* - - - - */

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */
	call hcs_$initiate ((get_wdir_ ()), "projfile", "", 0, 1, pp, ec);
	if pp = null then do;
	     call com_err_ (ec, "print_disk", "projfile");
	     return;
	end;

	do rs_number = 0 to hbound (disk_price, 1);	/* get all rates */
	     call system_info_$rs_name (rs_number, rs_name, ec); /* check if this is a valid rs_number */
	     if ec ^= 0 then disk_price (rs_number) = disk_price (0); /* assumes default rates are valid */
	     else call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, disk_price (rs_number), dummy1);
	end;

	np = projfile.nproj;			/* get number of projects */
	call system_info_$titles (coxx, dpxx);
	call ioa_ ("^|^-^a^/^/^-^a", coxx, dpxx);
	call ioa_ ("^/^/^-Disk usage report");
	call ioa_ (head);				/* write heading. */
	call ioa_ (dash);				/* .. */

	do i = 1 to np;				/* loop on all projects */
	     if id (i) = "" then go to skip;
	     if off (i) ^= 0 then if disk_psec (i) = 0 then go to skip;
		else tid = "*" || id (i);
	     else tid = id (i);
	     qta = disk_quota (i);			/* extract project quota */
	     use = disk_use (i);			/* use */
	     duse = dir_disk_use (i);
	     temp = disk_psec (i);			/* page-seconds */
	     if rs_count > 0 then do;			/* only if site has multiple rate structures */
		call search_sat_$rs_number ((id (i)), rs_number, ec); /* get rate index */
		if ec ^= 0 then
		     if ec = error_table_$noentry then
			call com_err_ (ec,
			"print_disk",
			"Trying to locate project ""^a"" in the sat.  Default rates will be used.", id (i));
		     else call com_err_ (ec, "print_disk", "Accessing the sat.  Default rates will be used");
	     end;
	     else rs_number = 0;
	     dols = temp * disk_price (rs_number);	/* compute charge */
	     tdols = tdols + dols;			/* accumulate totals */
	     tqta = tqta + qta;
	     tuse = tuse + use;
	     tduse = tduse + duse;
	     call ioa_ (format, tid, qta, use, duse, dols);
skip:	end;
	call ioa_ (dash);				/* write footing */
	call ioa_ (format, "TOTAL", tqta, tuse, tduse, tdols);
	call hcs_$terminate_noname (pp, ec);		/* terminate input */
	if rs_count > 0 then call search_sat_$clean_up;	/* tidy up */
     end print_disk;
