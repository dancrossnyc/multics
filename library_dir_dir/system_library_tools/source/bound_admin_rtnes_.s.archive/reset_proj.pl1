/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to subtract resource usage from a PDT in an admin directory from resource usage info
   in the system copy of a PDT: this procedure modifies the system copy only.
   See the "reset_usage" command for a command which does all pdt's listed in a SAT.

   This procedure takes two arguments:

   1) path of system copy of Project Definition Table (PDT)
   2) path of admin copy of PDT

   THVV 7/73
   Janice B. Phillipps, April 14, 1972
   Modified by R. McDonald May 1980 to include page charges.
*/


reset_proj: procedure;

dcl (argp, hp, sp, pp, cp, cpdtp, pdtp, pdtep, satp, satep, csatp) ptr,
    (arglg, code, i, j, k, kk) fixed bin,
     delta fixed bin,
     doubledelta fixed bin (71),
     doubletime fixed bin (71),
     deltafloat float bin,
     twodays fixed bin (35) int static init (2880000000);

dcl (addr, null, divide) builtin;

dcl  c32 char (32) aligned,
     pdt_name char (32) aligned,
     pdt_dir char (168) aligned,
     cpdt_dir char (168) aligned;

dcl  clock_ entry () returns (fixed bin (71)),
     com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     hcs_$delentry_file entry (char (*) aligned, char (*) aligned, fixed bin),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin),
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     hcs_$truncate_seg entry (ptr, fixed bin, fixed bin),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin),
     set_lock_$unlock entry (bit (36) aligned, fixed bin);

dcl  error_table_$lock_wait_time_exceeded fixed bin ext;



%include user_attributes;
%include pdt;


/* ======================================================= */

	doubletime = clock_ ();			/* get time for PDT time_last_update */

	call cu_$arg_ptr (1, argp, arglg, code);
	if code ^= 0 then do;
error:	     call com_err_ (code, "reset_proj", "");
	     return;
	end;
	call expand_path_ (argp, arglg, addr (pdt_dir), addr (pdt_name), code);
	if code ^= 0 then go to error;
	call cu_$arg_ptr (2, argp, arglg, code);
	if code ^= 0 then go to error;
	call expand_path_ (argp, arglg, addr (cpdt_dir), addr (pdt_name), code);
	if code ^= 0 then go to error;

	call hcs_$initiate (cpdt_dir, pdt_name, "", 0, 0, cpdtp, code); /* initiate admin copy of PDT */
	if cpdtp = null then go to error;
	call hcs_$initiate (pdt_dir, pdt_name, "", 0, 0, pdtp, code); /*  get ptr to sys version of the PDT */
	if pdtp = null then go to error;

	do j = 1 to pdt.current_size;			/* loop thru each PDT to reset all users */
	     sp = addr (pdtp -> pdt.user (j));		/* system copy of PDT */
	     cp = addr (cpdtp -> pdt.user (j));		/* admin copy of PDT */
	     if sp -> user.state = 2 then do;		/* if user was deleted during month, free up slot on chain */
		sp -> user.state = 0;
		sp -> user.chain = pdtp -> pdt.freep;
		pdtp -> pdt.freep = j;		/* index of freed slot on chain */
	     end;
	     else if sp -> user.state = 1 then do;

		if sp -> user.person_id ^= cp -> user.person_id then do;
		     call com_err_ (0, "reset_proj",
			"copy of ^a is out of phase; name in system copy: ^a name in admin copy: ^a; Continuing to next user.",
			pdt_name, sp -> user.person_id, cp -> user.person_id);
		     go to skip1;			/* set next user */
		end;

		call set_lock_$lock (sp -> user.lock, 600, code); /* lock data base while resetting */
		if code = error_table_$lock_wait_time_exceeded then do;
		     call com_err_ (code, "reset_proj", "^a ^a", pdt_name, sp -> user.person_id);
		     go to locked;
		end;
		if doubletime - sp -> user.time_last_reset < twodays then do;
		     call com_err_ (code, "reset_proj",
			"Warning, reset_proj has been run within last two days!",
			"Skipping over ^a.^a", sp -> user.person_id, pdt_name);
		     go to skip1;
		end;

		deltafloat = sp -> user.dollar_charge - cp -> user.dollar_charge; /* total user charge */
		if deltafloat >= 0 then
		     sp -> user.dollar_charge = deltafloat;

		delta = sp -> user.logins - cp -> user.logins;
		if delta >= 0 then
		     sp -> user.logins = delta;	/* number of logins */
		delta = sp -> user.crashes - cp -> user.crashes; /* sessions abnormally terminated */
		if delta >= 0 then
		     sp -> user.crashes = delta;


		do k = 0 to 7;			/* interactive use shifts 0 - 7 */
		     deltafloat = sp -> user.interactive.charge (k) - cp -> user.interactive.charge (k);
		     if deltafloat >= 0e0 then
			sp -> user.interactive.charge (k) = deltafloat; /* total dollar charge this shift */

		     doubledelta = sp -> user.interactive.cpu (k) - cp -> user.interactive.cpu (k);
		     if doubledelta >= 0 then
			sp -> user.interactive.cpu (k) = doubledelta; /* cpu usage in microseconds */

		     doubledelta = sp -> user.interactive.core (k) - cp -> user.interactive.core (k);
		     if doubledelta >= 0 then
			sp -> user.interactive.core (k) = doubledelta;

		     doubledelta = sp -> user.interactive.connect (k) - cp -> user.interactive.connect (k);
		     if doubledelta >= 0 then
			sp -> user.interactive.connect (k) = doubledelta; /* total console time in microseconds */

		     doubledelta = sp -> user.interactive.io_ops (k) - cp -> user.interactive.io_ops (k);
		     if doubledelta >= 0 then
			sp -> user.interactive.io_ops (k) = doubledelta; /* total io_ops time in microsecs */
		end;

		do k = 1 to 4;			/* absentee use of queues 1 - 4 */
		     deltafloat = sp -> user.absentee.charge (k) - cp -> user.absentee.charge (k);
		     if deltafloat >= 0 then
			sp -> user.absentee.charge (k) = deltafloat; /* dollar charge this queue */

		     delta = sp -> user.absentee.jobs (k) - cp -> user.absentee.jobs (k); /* jobs submitted */
		     if delta >= 0 then
			sp -> user.absentee.jobs (k) = delta;

		     doubledelta = sp -> user.absentee.cpu (k) - cp -> user.absentee.cpu (k); /* time in usecs */
		     if doubledelta >= 0 then
			sp -> user.absentee.cpu (k) = doubledelta;

		     doubledelta = sp -> user.absentee.memory (k) - cp -> user.absentee.memory (k);
		     if doubledelta >= 0 then
			sp -> user.absentee.memory (k) = doubledelta;

		end;

		do k = 1 to 4;			/* io daemon use queues 1 - 4 */
		     deltafloat = sp -> user.iod.charge (k) - cp -> user.iod.charge (k); /* $ charge this queue */
		     if deltafloat >= 0e0 then
			sp -> user.iod.charge (k) = deltafloat;

		     delta = sp -> user.iod.pieces (k) - cp -> user.iod.pieces (k);
		     if delta >= 0 then
			sp -> user.iod.pieces (k) = delta;

		     doubledelta = sp -> user.iod.pages (k) - cp -> user.iod.pages (k);
		     if doubledelta >= 0 then
			sp -> user.iod.pages (k) = doubledelta;

		     doubledelta = sp -> user.iod.lines (k) - cp -> user.iod.lines (k);
		     if doubledelta >= 0 then
			sp -> user.iod.lines (k) = doubledelta;

		end;

		do k = 1 to 16;			/* device charges */
		     deltafloat = sp -> user.devices (k) - cp -> user.devices (k);
		     if deltafloat >= 0 then
			sp -> user.devices (k) = deltafloat;
		end;

		sp -> user.time_last_reset = doubletime;
		call set_lock_$unlock (sp -> user.lock, code);
	     end;


	     go to skip1;
locked:	     call ioa_ ("Continuing on to next user.");
	     go to skip1;
neg_delta:     if sp -> user.state ^= 0 then do;
		call com_err_ (code, "reset_proj", "Warning, encountered a negative delta for ^a.^a",
		     sp -> user.person_id, pdt_name);
	     end;
skip1:	end;					/* end of user loop */
	call hcs_$terminate_noname (pdtp, code);
	call hcs_$terminate_noname (cpdtp, code);

     end reset_proj;
