/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-10-15,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
     Suppress error reporting of non existent pdt for a renamed project.
                                                   END HISTORY COMMENTS */



compute_bill: procedure options (variable);

/* daily billing program.

   This program computes the usage charge for each project and places it in the reqfile.

   inputs:
   .	"sat"		copy of system administrator's table
   .	Proj.pdt		copy of each project's pdt
   .	"reqfile"		per-account requisition info
   .	"projfile"	per-project disk and misc charges and supervisor name
   .	"miscfile"	misc charges detail info for the month
   output:
   .      "reqfile"           per account chg_mo replaced

   When called at the update_pdts_from reqfile entry, it copies each projects
   reqfile entry and projfile entry into its PDT header.


   THVV 11/69 - KAW 6/71
   Modified by T. casey April 1976 to zero projfiletab.dir_disk_use for new projfile entry.
   Modified by John Gintell  May 1977 to add update_pdts_from_reqfile.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.
   Mdified 1984-07-11 BIM for versions in projfile and reqfile.
*/

dcl  dn char (168) aligned,				/* segment names */
     en char (32) aligned,				/* ... */
     pdtdir char (168) aligned,
     wdir char (168) aligned,
     pdtename char (32) aligned,
     uproj char (12) aligned,
     ec fixed bin (17),				/* file-system error code */
     ap ptr,
     al fixed bin,
     arg char (al) based (ap),
    (sati, pdti, proji, j, reqi) fixed bin (17),		/* counters */
    (req_notfound, proj_notfound) bit (1),
     dum (0: 7) float bin,				/* Dummy. Don't need these prices */
     u1 float bin,
     compute bit (1) init ("1"b),			/* on for compute_bill , off for update_pdts_from reqfile */
     command_name char (32),
     satp ptr,					/* ptr to sat */
     satep ptr,					/* ptr to sat entry */
     satstuff based bit (52*36) aligned,		/* mess of stuff based to copy from sat entry */
     pdtp ptr,					/* ptr to pdt */
     pdtep ptr,					/* ptr to pdt entry for user */
     pp ptr,					/* ptr to "projfile" */
     miscfilep ptr,					/* ptr to "miscfile" */
     qp ptr,					/* ptr to "reqfile" */
     nproj fixed bin (17),				/* number of projects */
     nreq fixed bin (17),				/* number of accounts */
     proj_usage float bin (63);
dcl (addr, clock, hbound, null, rtrim, unspec, abs) builtin;
dcl  crank_cant_run condition;
dcl 1 pdp (1000) based (pdp_ptr),			/* temporary to hold disk prices */
    2 disk_price float bin,
    2 price_set bit (1);				/* off when allocated; on if disk_price has been set */
						/*  need price_set as a disk_price of "0" is valid */
dcl  pdp_ptr ptr;
dcl  rs_number fixed bin;
dcl  rs_name char (32);
dcl 1 prices (0:9),					/* holds all possible prices */
    2 disk_price float bin,
    2 reg_price float bin;

/* procedures called by this program */

dcl  ioa_ ext entry options (variable),			/* output routine */
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
     expand_pathname_ entry (char (*), char (*) aligned, char (*) aligned, fixed bin),
     absolute_pathname_ entry (char (*), char (*) aligned, fixed bin),
     system_info_$rs_name entry (fixed bin, char (*), fixed bin),
     system_info_$prices_rs ext entry (fixed bin,
    (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, float bin, float bin),

     get_wdir_ entry () returns (char (168) aligned),
     com_err_ entry options (variable),
     hcs_$terminate_noname entry (ptr, fixed bin),
     hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin);

%include user_attributes;
%include sat;
%include pdt;
%include projfile;
%include reqfile;
%include miscfile;

	command_name = "compute_bill";
	go to START;

update_pdts_from_reqfile: entry;

	command_name = "update_pdts_from_reqfile";
	compute = ""b;
START:
	call cu_$arg_ptr (1, ap, al, ec);		/* First arg is pathname of SAT */
	if ec ^= 0 then do;
ER1:	     call com_err_ (ec, command_name, "");
	     return;
	end;
	call expand_pathname_ (arg, dn, en, ec);
	if ec ^= 0 then do;
ER2:	     call com_err_ (ec, command_name, arg);
	     return;
	end;
	call hcs_$initiate (dn, en, "", 0, 1, satp, ec);	/* Initiate sat. */
	if satp = null then do;
ERR:	     call com_err_ (ec, command_name, en);
	     return;
	end;

	call cu_$arg_ptr (2, ap, al, ec);		/* second arg is pathname of PDT dir */
	if ec ^= 0 then go to ER1;
	call absolute_pathname_ (arg, pdtdir, ec);
	if ec ^= 0 then go to ER2;

	en = "reqfile";				/* Now get requisition file. */
	wdir = get_wdir_ ();
	call hcs_$initiate (wdir, en, "", 0, 1, qp, ec);	/* Initiate reqfile. */
	if qp = null then go to ERR;
	nreq = reqfile.nacts;			/* ... */
	if nreq = 0 then do;
ABORT:	     call ioa_ ("^a: ^a is empty. FATAL ERROR", command_name, en);
	     signal condition (crank_cant_run);
	end;

	en = "projfile";				/* Now get project file. */
	call hcs_$initiate (wdir, en, "", 0, 1, pp, ec);	/* Initiate projfile. */
	if pp = null then go to ERR;
	nproj = projfile.nproj;			/* Get number of entries. */
	if nproj = 0 then do;
	     go to ABORT;
	end;

	if compute then do;
	     en = "miscfile";			/* Now get misc charges journal */
	     call hcs_$initiate (wdir, en, "", 0, 1, miscfilep, ec);
	     if miscfilep = null then go to ERR;

	     en = "[pd]>proj_prices";
	     call hcs_$make_seg ("", "proj_prices", "", 1010b, pdp_ptr, ec); /* get a temporary seg */
	     if pdp_ptr = null then goto ERR;
	     do rs_number = 0 to hbound (prices, 1);	/* now get all the prices */
		call system_info_$rs_name (rs_number, rs_name, ec); /* is this a valid number? */
		if ec ^= 0 then prices (rs_number) = prices (0);
		else call system_info_$prices_rs (rs_number, dum, dum, dum, dum, prices (rs_number).disk_price,
		     prices (rs_number).reg_price);
	     end;

	     do reqi = 1 to nreq;			/* clear charges this month in reqfile */
		reqfile.chg_mo (reqi) = 0e0;
		reqfile.procssd (reqi) = 0;
	     end;
	end;


/* Loop through SAT to find all current projects. */

	do sati = 1 to sat.current_size;
	     satep = addr (sat.project (sati));
	     if project.state = 0 | project.state = 3 then go to SKIP_PROJ;
						/* skip renamed projects so com_err_ isn't called */
	     pdtename = rtrim (project.project_id) || ".pdt";
	     call hcs_$initiate (pdtdir, pdtename, "", 0, 1, pdtp, ec);
	     if pdtp = null then do;
		call com_err_ (ec, command_name, "^a", pdtename);
		go to SKIP_PROJ;
	     end;

	     call findreq;

	     if compute then do;
		pdp (reqi).disk_price = prices (project.rs_number).disk_price; /* save what we know when we know it */
		pdp (reqi).price_set = "1"b;		/*     and mark it as being saved */
		proj_usage = 0e0;

		do pdti = 1 to pdt.current_size;
		     pdtep = addr (pdt.user (pdti));
		     if user.state ^= 0 then
			proj_usage = proj_usage + user.dollar_charge + prices (project.rs_number).reg_price;
		end;

/* End of loop on users in project. Place total into reqfile */


		if reqfile.mitacct (reqi) ^= "nonbill" then /* Check for non-billable account. */
		     reqfile.chg_mo (reqi) = reqfile.chg_mo (reqi) + proj_usage; /* add project charge into reqfile */
	     end;
	     else do;
		uproj = project.project_id;		/* implicit argument to findproj */
		pdt.date_reqfile_copied = clock ();
		call findproj;
		if proj_notfound then projfile_version = 0;
		else do;
		     pdt.projfile_version = projfile.version;
		     pdt.projentry = unspec (projfiletab (proji));
		end;
		if req_notfound then reqfile_version = 0;
		else do;
		     pdt.reqfile_version = reqfile.version;
		     pdt.reqentry = unspec (reqfiletab (reqi));
		end;
		if sat.version ^= SAT_version then pdt.sat_version = -1;
		else do;
		     pdt.sat_version = sat.version;
		     pdt.satentry = addr (project.at) -> satstuff; /* sorry about this */
		end;
		pdt.rs_number = project.rs_number;	/* guarantee rs_number is up-to-date */
	     end;

/* On to next project. */

	     call hcs_$terminate_noname (pdtp, ec);
SKIP_PROJ: end;

	call hcs_$terminate_noname (satp, ec);

/* Loop through reqfile updating disk charges from projfile */

	if compute then do;
	     do reqi = 1 to nreq;
		if reqfile.acctid (reqi) = "" then go to SKIP_REQ;
		uproj = reqfile.acctid (reqi);
		proj_usage = 0e0;
		call findproj;

/* charge for disk usage-disk_psec should only be until termination */

		if pdp (reqi).price_set then proj_usage = proj_usage
		     +pdp (reqi).disk_price * projfile.disk_psec (proji); /* the price saved above */
		else proj_usage = proj_usage+prices (0).disk_price * projfile.disk_psec (proji); /* use default */

		if projfile.n_misc (proji) > 0 then do; /* any misc charges? */
		     u1 = 0;			/* Yes. */
		     do j = 1 to misc_ents;		/* search journal */
			if mproj (j) = uproj then do;
			     u1 = u1 + mamt (j);	/* add amount of all misc charges */
			end;
		     end;
		     if abs (u1 - projfile.misc_charges (proji)) > .01e0 then /* file consistency check. */
			call ioa_ ("^a: ^a misc charges ^.2f in projfile, ^.2f in miscfile", command_name,
			uproj, projfile.misc_charges (proji), u1);
		     proj_usage = proj_usage + u1;	/* increase proj total by misc chgs */
		end;

		if reqfile.mitacct (reqi) ^= "nonbill"	/* charges should not be added to nonbill accts */
		then reqfile.chg_mo (reqi) = reqfile.chg_mo (reqi)+proj_usage; /* add disk and misc charges to reqfile */
SKIP_REQ:	     end;

	     projfile.nproj = nproj;			/* May have added dummy project. */
	end;
	call hcs_$terminate_noname (pp, ec);		/* Terminate projfile. */
	if compute then do;
	     reqfile.nacts = nreq;			/* May have added dummy req. */
	     call hcs_$terminate_noname (miscfilep, ec);	/* terminate miscfile */
	     call hcs_$terminate_noname (pdp_ptr, ec);	/* terminate disk prices seg */
	end;
	call hcs_$terminate_noname (qp, ec);		/* Terminate reqfile. */

/* Internal procedures to look up entries in reqfile and projfile */
/* findreq finds reqfile entry corresponding to project.project_id
   findproj finds projfile entry corresponding to uproj */

findreq:	proc;

	     do reqi = 1 to nreq while (project.project_id ^= reqfile.acctid (reqi));end; /* look up account in file */
	     req_notfound = ""b;
	     if reqi = nreq + 1 then do;		/* not found, add it */
		if ^compute then do;
		     req_notfound = "1"b;
		     return;
		end;
		call ioa_ ("^a: reqfile entry for ^a missing. Dummy created.", command_name, project.project_id);
		nreq = reqi;			/* not in "reqfile", add */
		reqi = nreq;

		reqfile.acctid (reqi) = project.project_id; /* Fill in new entry. */
		reqfile.mitacct (reqi), reqfile.reqno (reqi),
		     reqfile.billing_name (reqi), reqfile.billing_addr (reqi) = "(unknown)";
		reqfile.chg_tr (reqi), reqfile.req_amt (reqi), reqfile.chg_mo (reqi) = 0e0;
		reqfile.cutoff (reqi) = 0;
		reqfile.qdf (reqi) = 0;
		reqfile.qdn (reqi) = clock ();
	     end;
	end findreq;

findproj:	proc;
	     do proji = 1 to nproj while (uproj ^= projfile.id (proji)); end; /* find project entry in "projfile" */
	     proj_notfound = ""b;
	     if proji = nproj + 1 then do;		/* missing, add it */
		if ^compute then do;
		     proj_notfound = "1"b;
		     return;
		end;
		nproj = proji;
		call ioa_ ("^a: projfile entry for ^a missing. Dummy created.", command_name, uproj);
		projfile.id (proji) = uproj;		/* initialize entry */
		projfile.title (proji), projfile.inv (proji), projfile.sup (proji), projfile.inv_addr (proji),
		     projfile.sup_addr (proji), projfile.sup_phone (proji) = "(unknown)";
		projfile.misc_charges (proji) = 0e0;
		projfile.disk_quota (proji), projfile.disk_use (proji), projfile.dir_disk_use (proji) = 0;
		projfile.disk_psec (proji) = 0;
		projfile.off (proji) = 0;
		projfile.on (proji) = clock ();
		projfile.n_misc (proji) = 0;
	     end;
	end findproj;
     end compute_bill;
