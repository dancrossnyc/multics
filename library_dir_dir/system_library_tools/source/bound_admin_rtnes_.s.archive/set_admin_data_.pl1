/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

set_admin_data_: proc;

/* originally coded by K.Willis 3/26/71 */

%include sys_admin_data;

dcl  sadp ptr int static init (null),			 /* ptr to sys_admin_data */
     null builtin,
     ec fixed bin,
     user_info_ entry options (variable),
     myname char (32) aligned,			 /* name of caller */
     myproj char (9),				 /* project of caller */
     get_wdir_ entry returns (char (168) aligned),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     com_err_ entry options (variable),
     ioa_ entry options (variable),
     set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin),
     set_lock_$unlock entry (bit (36) aligned, fixed bin);

dcl  error_table_$invalid_lock_reset fixed bin ext,
     error_table_$locked_by_this_process fixed bin ext;

/* this entry unlocks sys_admin_data only if called by the locker */
unlock:	entry;
	if sadp = null then call setup;
	call set_lock_$unlock (sadp -> lock, ec);
	return;



/* If sys_admin_data was locked by the same caller since system initialization, this entry returns the value 2.
   If sys_admin_data was locked by a different caller since the system was initialized, this entry returns
   the value 1 indicating that the caller should not use the table.  Otherwise it locks the table
   and returns the value 0 indicating that the caller may use sys_admin_data_ but noe one else
   will be permitted to use it until the caller unlocks it.  */


lock:	entry returns (fixed bin);
	if sadp = null then call setup;		 /* get pointer to sys_admin_data */
	call set_lock_$lock (sadp -> lock, 1, ec);
	if ec = 0 then do;
ok:	     call user_info_ (myname, myproj);		 /* get name of caller */
	     sadp -> locker = myname;			 /* fill in locker's name */
	     return (0);				 /* show success */
	end;
	else if ec = error_table_$invalid_lock_reset then go to ok;
	else if ec = error_table_$locked_by_this_process then do;
	     return (2);
	end;
	else do;
	     call ioa_ ("sys_admin_data is locked by ^a", sadp -> locker);
	     return (1);
	end;

setup:	proc;

	     call hcs_$initiate ((get_wdir_ ()), "sys_admin_data", "", 0, 1, sadp, ec);
	     if sadp = null then call com_err_ (ec, "set_admin_data_", "sys_admin_data");

	end setup;

     end set_admin_data_;
