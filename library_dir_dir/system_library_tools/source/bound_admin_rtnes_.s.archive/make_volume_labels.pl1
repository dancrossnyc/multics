/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


make_volume_labels: proc;

/* This command generates data used to print paper labels for
   tape reels, disk packs, etc.

   Written (read "cribbed after make_tape_labels") 03/79 by C. D. Tavares
   Modified 09/81 by M.R. Jordan to fix a bug in -height processing. */

dcl  cu_$arg_count ext entry (fixed bin),
     cu_$arg_list_ptr ext entry (pointer),
     cu_$arg_ptr_rel ext entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer),
    (com_err_, com_err_$suppress_name, ioa_$rsnnl) ext entry options (variable);

dcl  authenticate_ ext entry (char (*)) returns (char (3) aligned),
     bigletter_$five ext entry (char (*) aligned, entry),
     resource_info_$canonicalize_name entry (char (*), char (*), char (*), fixed bin (35));

dcl  alp pointer,
     nargs fixed bin;

dcl (NEWLINE char (1) initial ("
"),
     RETURN char (1) initial (""),
     usage_line char (128) initial
    ("Usage:  make_volume_labels resource_name1 {-to resource_nameN} {-control_args}")) static options (constant);

dcl (error_table_$bad_arg,
     error_table_$bad_conversion,
     error_table_$inconsistent,
     error_table_$badopt,
     error_table_$noarg) ext fixed bin (35) static;

%include iox_dcls;

%include rcp_resource_types;

	call cu_$arg_count (nargs);
	if nargs = 0 then call crump (error_table_$noarg, usage_line);

	call cu_$arg_list_ptr (alp);

	begin;

dcl 1 arg_structure aligned automatic,
    2 n_used fixed bin initial (0),
    2 each (nargs) aligned,
      3 label char (32) varying,
      3 multiple bit (1) aligned,
      3 label_prefix char (32) varying,
      3 first_value fixed bin (35),
      3 last_value fixed bin (35),
      3 field_size fixed bin,
      3 label_suffix char (32) varying;

dcl  ap pointer,
    (skip_name_label, skip_auth_label) bit (1) aligned initial (""b),
     al fixed bin,
     auth char (3) aligned,
    (i, j) fixed bin,
    (prefix_len, suffix_len, len_wo_suffix) fixed bin,
     code fixed bin (35),
     temp char (32),
     temp_len fixed bin,
     temp_var char (32) varying,
     prefix char (512) varying,
     resource_type char (32) initial (VOLUME_TYPE (TAPE_VOL_VTYPEX)),
     switchname char (32) initial ("label_stream"),
     switch_ptr pointer;

dcl  sticker_width fixed bin initial (50),
     sticker_height fixed bin initial (9);

dcl  max_linel fixed bin,
     partial_linel fixed bin,
     max_label_chars fixed bin,
     partial_label_chars fixed bin;

dcl  arg char (al) based (ap);

dcl (rtrim, addrel, translate, substr, verify) builtin;
dcl (addr, binary, copy, divide, index, length, max, min, mod, reverse, search) builtin;

dcl  NUMERICS char (10) static options (constant) initial ("0123456789"),
     UPPERCASE char (26) static options (constant) initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

	     do i = 1 to nargs;

		call cu_$arg_ptr_rel (i, ap, al, code, alp);
		if code ^= 0 then call crump (code, "Obtaining argument.");

		if substr (arg, 1, 1) = "-" then do;
		     if arg = "-to" then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then call crump (code, "After -to.");

			if arg_structure.n_used = 0 then call crump (error_table_$inconsistent, usage_line);

			if arg_structure.multiple (n_used) = "1"b then
			     call crump (error_table_$inconsistent, "-to specified more than once.");

			arg_structure.multiple (n_used) = "1"b;

			temp_var = arg_structure.label (n_used);

			j = search (reverse (temp_var), NUMERICS);
			if j = 0 then
			     call crump (error_table_$bad_arg,
			     "No numeric portion in " || arg_structure.label (n_used));

			len_wo_suffix = length (temp_var) - j + 2;
			if len_wo_suffix ^> length (temp_var) then do;
			     arg_structure.label_suffix (n_used) = substr (temp_var, len_wo_suffix);
			     temp_var = substr (temp_var, 1, len_wo_suffix-1);
			end;

			suffix_len = length (arg_structure.label_suffix (n_used));
			prefix_len = length (rtrim (temp_var, NUMERICS));
			arg_structure.label_prefix (n_used) = substr (temp_var, 1, prefix_len);
			arg_structure.field_size (n_used) = length (arg_structure.label (n_used)) - prefix_len
			     - length (arg_structure.label_suffix (n_used));
			arg_structure.first_value (n_used) = binary (substr (temp_var, prefix_len+1));

			call resource_info_$canonicalize_name (resource_type, arg, temp, code);
			if code ^= 0 then
			     call crump (code, rtrim (resource_type) || " " || arg);

			if substr (temp, 1, prefix_len) ^= substr (temp_var, 1, prefix_len) then
						/* prefix check */
dissimilar:		     call crump (error_table_$bad_arg, "Resource name is not similar:  " || temp);

			temp_len = length (rtrim (temp));
			if verify (substr (temp, prefix_len+1, temp_len-suffix_len-prefix_len), NUMERICS) > 0 then
			     goto dissimilar;	/* numeric field check */

			arg_structure.last_value (n_used) = binary (substr (temp, prefix_len+1,
			     temp_len - suffix_len - prefix_len));

			j = temp_len - suffix_len + 1;
			if substr (temp, j) ^= arg_structure.label_suffix (n_used) then
			     goto dissimilar;	/* suffix check */

			if arg_structure.last_value (n_used) < arg_structure.first_value (n_used) then
			     call crump (error_table_$bad_arg, "Numeric portion of " || temp
			     || "greater than that of " || arg_structure.label (n_used));
		     end;

		     else if arg = "-auth_only" then
			skip_name_label = "1"b;

		     else if arg = "-name_only" then
			skip_auth_label = "1"b;

		     else if arg = "-width" | arg = "-height" then do;
			temp_var = arg;

			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then call crump (error_table_$noarg, "No number after " || temp_var);

			if verify (arg, NUMERICS) > 0 then
			     call crump (error_table_$bad_conversion, "Non-numeric:  " || arg);

			j = binary (arg);

			if temp_var = "-width" then do;
			     if j < 19 then call crump (error_table_$bad_arg, "Width less than 19 characters.");
			     sticker_width = j;
			end;

			else do;
			     if j < 8 then call crump (error_table_$bad_arg, "Height less than 8 lines.");
			     sticker_height = j;
			end;
		     end;

		     else if arg = "-output_switch" | arg = "-osw" then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then call crump (code, "After -output_switch.");
			switchname = arg;
		     end;

		     else if arg = "-resource_type" | arg = "-rst" then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then call crump (code, "After -resource_type.");
			resource_type = arg;
		     end;


		     else call crump (error_table_$badopt, arg);
		end;

		else do;
		     call resource_info_$canonicalize_name (resource_type, arg, temp, code);
		     if code ^= 0 then
			call crump (code, rtrim (resource_type) || " " || arg);

		     arg_structure.n_used = arg_structure.n_used + 1;
		     arg_structure.label (n_used) = rtrim (temp);
		     arg_structure.multiple (n_used) = ""b;
		     arg_structure.label_prefix (n_used),
			arg_structure.label_suffix (n_used) = "";
		     arg_structure.first_value (n_used),
			arg_structure.last_value (n_used),
			arg_structure.field_size (n_used) = 0;
		end;
	     end;

	     if skip_name_label & skip_auth_label then
		call crump (error_table_$inconsistent, "-auth_only and -name_only");

	     max_label_chars = divide (sticker_width + 2, 7, 17, 0);
	     partial_label_chars = divide (sticker_width, 7, 17, 0);
	     partial_linel = sticker_width - 2 - max (mod (sticker_width - 3, 7) - 4, 0);

	     call iox_$look_iocb (switchname, switch_ptr, code);
	     if code ^= 0 then call crump (code, switchname);

/* Now we have all the arguments.  Process them. */

	     do i = 1 to arg_structure.n_used;

/* Do the first one first */

		if ^skip_name_label then
		     if length (arg_structure.label (i)) > max_label_chars then
			call com_err_$suppress_name (0, "make_volume_labels",
			"Warning:  Only the first ^d complete characters of ^[^s^a^a^a^;^a^] will appear on the label.",
			partial_label_chars, arg_structure.multiple (i),
			arg_structure.label (i),
			arg_structure.label_prefix (i), copy ("_n", arg_structure.field_size (i)),
			arg_structure.label_suffix (i));

		call make_label (arg_structure.label (i));

		if arg_structure.multiple (i) = "1"b then /* have a set of them to make */
		     do j = arg_structure.first_value (i) + 1 to arg_structure.last_value (i);

		     call ioa_$rsnnl ("^a^vd^a", temp_var, 0, arg_structure.label_prefix (i),
			arg_structure.field_size (i), j,
			arg_structure.label_suffix (i));

		     temp_var = translate (temp_var, "0", " "); /* change blanks to zeroes */

		     call make_label (temp_var);
		end;
	     end;

	     return;
	     
make_label:    proc (label);

dcl  label char (32) varying parameter;
dcl  i fixed bin,
    (extra_lines, leading_spaces) fixed bin,
     data_len fixed bin,
     buffer char (1024) varying;

		auth = authenticate_ ((label));
		leading_spaces = max (divide (sticker_width - 5 - length (label), 2, 17, 0), 0);
		extra_lines = sticker_height - 7;

		if ^ skip_name_label then do;
		     i = divide (sticker_width + 2 - (7 * length (label)), 2, 17, 0);
		     if i > 0 then prefix = copy (" ", i);
		     else prefix = "";

		     data_len = length (label);
		     if data_len <= max_label_chars then
			max_linel = data_len * 7 - 2;
		     else max_linel = partial_linel;

		     call bigletter_$five ((label), line_proc);

		     buffer = prefix;

		     do i = 1 to min (max_label_chars, length (label));
			if index (UPPERCASE, substr (label, i, 1)) > 0 then
			     buffer = buffer || "-=-=-=-=-=  ";
			else buffer = buffer || "       ";
		     end;

		     buffer = buffer || copy (NEWLINE, 2);

		     call iox_$put_chars (switch_ptr, addrel (addr (buffer), 1), length (buffer), code);
		     if code ^= 0 then call crump (code, "while printing label");

		     call ioa_$rsnnl ("^vx^a^2x^3a", buffer, 0,
			leading_spaces, label, auth);

		     buffer = buffer || RETURN || buffer;
		     buffer = buffer || copy (NEWLINE, extra_lines);

		     call iox_$put_chars (switch_ptr, addrel (addr (buffer), 1), length (buffer), code);
		     if code ^= 0 then call crump (code, "while printing label");
		end;

		if ^ skip_auth_label then do;
		     i = divide (sticker_width - 19, 2, 17, 0);
		     prefix = copy (" ", i);

		     data_len = 3;
		     max_linel = 19;		/* 3 * 7 - 2 */

		     call bigletter_$five (auth, line_proc);

		     call ioa_$rsnnl ("^vx^a^2x^3a", buffer, 0,
			leading_spaces, label, auth);

		     buffer = buffer || RETURN || buffer;
		     buffer = copy (NEWLINE, 2) || buffer || copy (NEWLINE, extra_lines);

		     call iox_$put_chars (switch_ptr, addrel (addr (buffer), 1), length (buffer), code);
		     if code ^= 0 then call crump (code, "while printing label");
		end;

		return;
		
line_proc:	proc (linep, linel);

dcl  linep pointer parameter,
     linel fixed bin parameter;

dcl  line char (max_linel) based (linep);

dcl  buffer char (512) aligned varying,
     i fixed bin;

dcl  ANVZ_at_number char (11) static options (constant) initial ("ANVZ@#");

		     buffer = prefix;

		     do i = 1 to length (line);
			if substr (line, i, 1) = " " then buffer = buffer || " ";
			else buffer = buffer || ANVZ_at_number;
		     end;

		     if data_len > max_label_chars then buffer = buffer || " /";
		     buffer = buffer || NEWLINE;

		     call iox_$put_chars (switch_ptr, addrel (addr (buffer), 1), length (buffer), code);

		     return;
		end line_proc;
	     end make_label;
	end;					/* begin block */
	
crump:	proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

	     call com_err_ (code, "make_volume_labels", reason);
	     goto returner;
	end crump;

returner:	return;
     end;
