/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-10-06,Parisek), approve(88-02-03,MCR7845),
     audit(88-04-18,Lippard), install(88-04-26,MR12.2-1043):
     Implement multi-segment file application for possible >256K disk_stat
     segment.
                                                   END HISTORY COMMENTS */


/* format: style4 */
disk_stat_print: dsp: proc;

/*
   Completely rewritten by TAC, April 1976
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.
   Modified June 1982 by E. N. Kittlitz to set rs_number if search_sat_ complains.
*/

/* This procedure prints the disk_stat file that is created by sweep.
   The segment "disk_stat" in the working directory is used, unless a pathname is given.
   Optional control arguments allow the user to specify:
   1 - printing of just the totals figures;
   2 - printing only those directories at or above a specified level,
   -   with the usage figures of the entire subtree below that directory being
   -   included in the figures printed for that directory;
   3 - printing of per-level subtotals each time level decreases;
   4 - printing of a per-logical-volume summary of disk usage, following the totals lines.

   Usage: dsp -path- -total (-tt) -logical_volume (-lv) -subtotal (-stt) -level (-lev) N

*/

/* Declarations */

/* Ext Entries */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_$mwvf entry (float bin) returns (char (15));	/* library routines */
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_wdir_ entry () returns (char (168));
dcl  search_sat_$rs_number entry (char (*), fixed bin, fixed bin (35));
dcl  search_sat_$clean_up entry;
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  mdc_$find_lvname entry (bit (36) aligned, char (*) aligned, fixed bin (35));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open entry (char (*), char (*), ptr, fixed bin (35));
dcl  user_info_$rs_number entry (fixed bin);
dcl  user_info_$rs_name entry (char (*));
dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35));
dcl  system_info_$prices_rs entry (fixed bin,
	(0:7) float bin, (0:7) float bin, (0:7) float bin, (0:7) float bin, float bin, float bin);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  system_info_$titles entry (char (*), char (*));

/* Bit */

dcl  (msf, no_sat, subtot_sw, total_sw, volume_sw) bit (1) aligned init ("0"b);

/* Fixed bin */

dcl  ttemp fixed bin (71);				/* clock value */
dcl  (code, bad_lvid_code) fixed bin (35) init (0);

dcl  (acpx, al, an, cpx, dlev, i, j, k, lvl, nxtlev, ti) fixed bin;
						/* misc counters */
dcl  n_bad_lvids fixed bin init (0);
dcl  (lvix, nlv, root_lvix) fixed bin;			/* indices in lv_totals structure */
dcl  fmt_ix fixed bin init (1);			/* which formats to use */
dcl  maxlev fixed bin init (16);			/* print all levels, by default */
dcl  ROOT fixed bin;				/* level of first dir in disk_stat (normally 0 for root) */
dcl  rs_name char (32);
dcl  rs_number fixed bin;
dcl  rs_count fixed bin;
dcl  last_dent fixed bin;
		  
/* Float bin */

dcl  dummy (0:7) float bin;
dcl  dummy1 float bin;
dcl  disk_price (0:9) float bin;

/* Char */

dcl  path char (168);				/* for printing pathname from disk_stat entry */
dcl  dn char (168) init (get_wdir_ ());			/* both for getting disk stat file and printing its entries */
dcl  (coxx, dpxx) char (64);				/* company and department names, for heading */
dcl  en char (32) init ("disk_stat");
dcl  old_project_entry char (32) init ("");
dcl  (ttmp1, ttmp2) char (24);			/* from-date and to-date for heading */
dcl  errmsg char (64) varying;			/* error info */

/* Automatic Structure */

dcl  1 subtot (0:16),
       2 (dquota, dused, squota, sused, dvolx, dsix) fixed bin,
       2 (dcharge, scharge) float bin;

dcl  cp_array (0:4) ptr;
		  

/* Format strings for ioa_ */

dcl  dir_formats (2) char (36) int static init (
	"^7d ^7d^15a ^7d ^7d^15a ^5d ^s^a",
	"^7d ^7d^15a ^7d ^7d^15a ^5d ^4d ^a");

dcl  heading_dashes (2) char (99) int static init (
	"------- ------- -------------- ------- ------- -------------- ----- ------------------------^/",
	"------- ------- -------------- ------- ------- -------------- ----- ---- ------------------------^/");

dcl  heading_words (2) char (72) int static init (
	"^/^2xs-qta^3xs-use^7xs-charge^3xd-qta^3xd-use^7xd-charge^3xlev path",
	"^/^2xs-qta^3xs-use^7xs-charge^3xd-qta^3xd-use^7xd-charge^3xlev lvix path");

dcl  sub_total_formats (2) char (32) int static init (
	"^7d ^7d^15a ^7d ^7d^15a^7x^a",
	"^7d ^7d^15a ^7d ^7d^15a^12x^a");

dcl  total_formats (2) char (24) int static init (
	"^/^31x^7d ^7d^15a^7x^a",
	"^/^31x^7d ^7d^15a^12x^a");

dcl  vol_format char (26) int static init (
	"^31x^7d ^7d^15a ^5x ^4d ^a");

/* Ptr */

dcl  (ap, fcbp, lvtp, pdtep, pdtp) ptr;

/* Based */


dcl  bchr char (al) based (ap);

dcl  1 lv_totals (-1:nlv) aligned based (lvtp),
       2 lv_name char (32),
       2 lv_tpp float bin,
       2 lv_id bit (36),
       2 lv_quota fixed bin,
       2 lv_used fixed bin;

/* Builtin */

dcl  (addr, after, before, hbound, null, substr) builtin;

/* Ext */

dcl  (error_table_$badopt, error_table_$bad_arg, error_table_$noentry) ext fixed bin (35);
dcl  sys_info$max_seg_size fixed bin (35) ext static;

/* Procedure */

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */

	code = 0;
	sp = null;
	fcbp = null;

	do an = 1 by 1 while (code = 0);		/* go thru all arguments */

	     call cu_$arg_ptr (an, ap, al, code);

	     if code = 0 then do;			/* if there is an argument */

		if substr (bchr, 1, 1) = "-" then do;	/* control argument */

		     if bchr = "-tt" | bchr = "-total" then
			total_sw = "1"b;

		     else if bchr = "-stt" | bchr = "-subtotal" then
			subtot_sw = "1"b;

		     else if bchr = "-lv" | bchr = "-vol" | bchr = "-volume"
			     | bchr = "-lvol" | bchr = "-logical_volume" then do;
			volume_sw = "1"b;
			fmt_ix = 2;		/* use formats with place for lvix column */
		     end;

		     else if bchr = "-lev" | bchr = "-level" then do;
			an = an + 1;
			call cu_$arg_ptr (an, ap, al, code);
			if code ^= 0 then do;	/* must be error_table_$noarg */
			     en = "after -level";
			     goto er;
			end;

			maxlev = cv_dec_check_ (bchr, code);
			if code ^= 0 then do;
			     code = 0;		/* not an error_table_ code */
			     en = "illegal decimal number: " || bchr;
			     goto er;
			end;

			if maxlev < 0 | maxlev > 16 then do;
			     en = "level must be >= 0 and <= 16";
			     goto er;
			end;
		     end;				/* end -level do group */

		     else do;			/* unrecognized control arg */
			code = error_table_$badopt;
			en = bchr;
			goto er;
		     end;

		end;				/* end control arg do group */

		else if sp = null then do;		/* must be pathname of disk_stat file */
		     call expand_path_ (ap, al, addr (dn), addr (en), code);
		     if code ^= 0 then go to er;
		end;

		else do;
		     code = error_table_$bad_arg;
		     en = bchr;
		     goto er;
		end;

	     end;					/* end there-is-an-arg do group */
	end;					/* end arg loop */

	call msf_manager_$open (dn, en, fcbp, code);
	if code ^= 0 then do;
	     call com_err_ (code, "disk_stat_print", "Cannot obtain MSF control block pointer.");
	     return;
	end;
	acpx, cpx, ti = 0;
cpx_loop: call msf_manager_$get_ptr (fcbp, cpx, "0"b, cp_array (cpx), 0, code);
	if code = 0 then do;
	     cpx = cpx + 1;
	     goto cpx_loop;
	end;
	if cp_array (0) = null () then do;
er:	     call com_err_ (code, "disk_stat_print", en);
	     return;
	end;

	sp = cp_array (0);

	do rs_number = 0 to hbound (disk_price, 1);	/* get all the rates */
	     call system_info_$rs_name (rs_number, rs_name, code); /* this here to check for a valid rate */
	     if code ^= 0 then disk_price (rs_number) = disk_price (0); /* assumes default will not give an error */
	     else call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, disk_price (rs_number), dummy1);
	end;

	if volume_sw then do;			/* initialize for presenting per-logical-volume data */
	     call hcs_$make_seg ("", "lv_totals", "", 1010b, lvtp, code);
	     if lvtp = null then do;
lv_er:		en = "[pd]>lv_totals";
		goto er;
	     end;

	     call hcs_$truncate_seg (lvtp, 0, code);	/* make sure there is no junk in it */
	     if code ^= 0 then goto lv_er;

	     lv_totals (-1).lv_name = "Unknown volumes";
						/* slot zero is unused, for convenience of implementation */
	     lv_totals (1).lv_name = "root";		/* reserve slot for rlv, so we will know */
	     root_lvix = 1;				/* where to record directory page use */
	     nlv = 1;
	end;

	if ^total_sw then do;			/* print heading, unless just printing totals */
	     call system_info_$titles (coxx, dpxx);
	     call ioa_ ("^|^a^/^/^a", coxx, dpxx);
	     ttemp = dtime;
	     call date_time_ (ttemp, ttmp2);
	     ttemp = dreset;
	     call date_time_ (ttemp, ttmp1);
	     call ioa_ ("^/Disk usage for ^a to ^a", ttmp1, ttmp2);

	     dn = "";				/* initialize for later pathname printing */
	end;					/* end print-heading do group */

/* print one line heading even if printing totals only */
	call ioa_ (heading_words (fmt_ix));

	if ^total_sw then				/* if not being terse */
	     call ioa_ (heading_dashes (fmt_ix));

	ROOT = disk_stat.slev (1);			/* get level of first dir in disk_stat */
	dlev = ROOT - 1;				/* initialize dlev to facilitate detection of
						   decreasing level number, for printing subtotals */

/* Start main loop */

	last_dent = dents;
begin:	
	do i = 1 to last_dent + 1;			/* go thru all dirs in disk_stat, plus one more time
						   to print the last line or subtree */

	     if i = last_dent + 1 then			/* if this is that one more time */
		nxtlev = ROOT;			/* pretend there is another root at the end of disk_stat */
	     else nxtlev = disk_stat.slev (i);		/* else get level of next dir */
print_lev:					/* need to know where to come if MSF */
	     if ^total_sw				/* if we are printing directory lines */
		& i > 1				/* and there is a previous directory */
		& dlev <= maxlev			/* and it is in the range of levels being printed */
		& nxtlev <= maxlev then		/* and next dir is not part of a non-printing subtree under it */
		call print_dir_line (dlev);		/* then print a line for the previous dir now */

/* If the next dir is not at a higher level number than the previous one,
   this loop gets executed one or more times, to free the subtotal array entry
   in which we want to store the figures for the next dir */

	     do lvl = dlev by -1 to nxtlev		/* back up thru levels, from last dir's to this one's */
		while (lvl > ROOT);			/* but stop one level sooner if nxtlev=ROOT */

		call add_up_subtot (lvl - 1, lvl);	/* add inferior subtree's figures to its superior */

		if lvl - 1 <= maxlev & ^total_sw then do; /* if printing is wanted for level just added to */
		     if lvl - 1 = maxlev		/* if superior is a subtree waiting to be printed */
			& nxtlev <= maxlev then	/* and next dir is not part of it */
			call print_dir_line (lvl - 1);/* print a line for the subtree */

		     else				/* but if superior is not a subtree waiting to be printed */
			if subtot_sw then		/* and user wants subtotals */
			if nxtlev <= lvl - 1 then	/* and next dir is equal to or superior to the superior */
			     call print_subtot_line (lvl - 1); /* print a subtotal line for the superior */
		end;				/* end printing-wanted-for-level do group */

	     end;					/* end loop backing up through the levels */
	     if msf then goto next_component;

/* Now, level nxtlev in the subtot array is free to be stored into */

	     dlev = nxtlev;				/* now, next dir becomes this dir */

	     if i <= last_dent then do;		/* if this dir is real, and not the imaginary
						   root at the end of disk_stat, store its figures
						   into the appropriate subtotal array entry */

		if dlev < 1 | rs_count = 0 then rs_number = 0; /* if ^project dir or site has no rate structures */
		else call set_disk_price_index (i, rs_number); /* find the correct price */
		subtot (dlev).dquota = disk_stat.dqta (i);
		subtot (dlev).squota = disk_stat.sqta (i);
		subtot (dlev).dused = disk_stat.duse (i);
		subtot (dlev).sused = disk_stat.suse (i);
		subtot (dlev).dcharge = disk_stat.dtpp (i) * disk_price (rs_number);
		subtot (dlev).scharge = disk_stat.stpp (i) * disk_price (rs_number);
		subtot (dlev).dsix = i;		/* so we can find pathname of dir where subtree starts */

		if volume_sw then do;		/* if we are supposed to save per-volume information */
		     do lvix = 1 to nlv		/* look up this directory's logical volume */
			while (lv_totals (lvix).lv_id ^= disk_stat.slvid (i));
		     end;

		     if lvix = nlv + 1 then do;	/* if this volume is not in our list yet */
			call mdc_$find_lvname (disk_stat.slvid (i), lv_totals (lvix).lv_name, code);
			if code ^= 0 then do;	/* if mdc_ does not recognize the lvid */
			     lvix = -1;		/* use the "Unknown volumes" entry */
			     n_bad_lvids = n_bad_lvids + 1; /* count these, for one error message at end */
			     if bad_lvid_code = 0 then/* remember the code, too */
				bad_lvid_code = code;
			end;

			else if lv_totals (lvix).lv_name = "root" then /* root logical volume */
			     lvix = 1;		/* slot 1 is reserved for it */

			else nlv = lvix;		/* otherwise, we have a new logical volume */

			lv_totals (lvix).lv_id = disk_stat.slvid (i); /* save the lvid */

		     end;				/* end volume-not-in-list do group */

/* segment data gets added to the lvid entry */
		     lv_totals (lvix).lv_tpp = lv_totals (lvix).lv_tpp + disk_stat.stpp (i) * disk_price (rs_number);
		     lv_totals (lvix).lv_quota = lv_totals (lvix).lv_quota + disk_stat.sqta (i);
		     lv_totals (lvix).lv_used = lv_totals (lvix).lv_used + disk_stat.suse (i);

/* but directory data gets added to the rlv's entry */
		     lv_totals (root_lvix).lv_tpp = lv_totals (root_lvix).lv_tpp + disk_stat.dtpp (i) * disk_price (rs_number);
		     lv_totals (root_lvix).lv_quota = lv_totals (root_lvix).lv_quota + disk_stat.dqta (i);
		     lv_totals (root_lvix).lv_used = lv_totals (root_lvix).lv_used + disk_stat.duse (i);

		     subtot (dlev).dvolx = lvix;	/* remember lvix of dir that starts this subtree */

		end;				/* end save-per-volume-information do group */

	     end;					/* end this-is-a-real-dir do group */
	     if (lodh + (i+1) * lode) > sys_info$max_seg_size then do;
		msf = "1"b;
		goto print_lev;
next_component:	msf = "0"b;
		ti = ti + i;
		last_dent = dents - ti;
		acpx = acpx + 1;
		sp = cp_array (acpx);
		goto begin;
	     end;
	end;					/* end main loop thru disk_stat */

/* Now, print totals and volume summary, if user wants it */

	if n_bad_lvids > 0 then
	     call com_err_ (bad_lvid_code, "disk_stat_print", "There were ^d directories with unknown lvid's", n_bad_lvids);

	if ^total_sw then
	     call ioa_ (heading_dashes (fmt_ix));

	call ioa_ (sub_total_formats (fmt_ix),
	     subtot (ROOT).squota, subtot (ROOT).sused, cv_$mwvf (subtot (ROOT).scharge),
	     subtot (ROOT).dquota, subtot (ROOT).dused, cv_$mwvf (subtot (ROOT).dcharge),
	     "SUBTOTALS");

	call ioa_ (total_formats (fmt_ix),
	     subtot (ROOT).squota + subtot (ROOT).dquota,
	     subtot (ROOT).sused + subtot (ROOT).dused,
	     cv_$mwvf (subtot (ROOT).scharge + subtot (ROOT).dcharge),
	     "TOTALS (SEGMENTS + DIRECTORIES)");

	if ^total_sw then call ioa_;			/* skip a line if not being terse */

	if volume_sw then				/* if user so requested,   */
	     do i = -1 to nlv;			/* print per-logical-volume data */
	     if i >= 1 |				/* if this is a real volume, or */
		lv_totals (i).lv_quota > 0 then	/* the dummy entry has some data in it */
		call ioa_ (vol_format,
		     lv_totals (i).lv_quota, lv_totals (i).lv_used,
		     cv_$mwvf (lv_totals (i).lv_tpp),
		     i, lv_totals (i).lv_name);
	end;


finish:	
	if fcbp ^= null then
	     call msf_manager_$close (fcbp);
	if volume_sw then do;			/* clean up temp seg if we had one */
	     call hcs_$truncate_seg (lvtp, 0, code);
	     call hcs_$terminate_noname (lvtp, code);
	end;
	if rs_count > 0 then call search_sat_$clean_up;	/* tidy up */

	return;
err_finish:
	call com_err_ (0, "disk_stat_print", errmsg);
	goto finish;

add_up_subtot: proc (l, ll);				/* procedure to add level ll subtotals to level l subtotals */

dcl  (l, ll) fixed bin;				/* ll is usually l+1, to add, for example,
						   a user's figures to the project's subtotal */

	subtot (l).dquota = subtot (l).dquota + subtot (ll).dquota;
	subtot (l).dused = subtot (l).dused + subtot (ll).dused;
	subtot (l).squota = subtot (l).squota + subtot (ll).squota;
	subtot (l).sused = subtot (l).sused + subtot (ll).sused;
	subtot (l).dcharge = subtot (l).dcharge + subtot (ll).dcharge;
	subtot (l).scharge = subtot (l).scharge + subtot (ll).scharge;

/*             subtot(l).dsix is not modified after being set; it lets us find path of dir that begins this subtree */

	if subtot (l).dvolx ^= subtot (ll).dvolx then	/* if level l and level ll dirs not on same lvol */
	     subtot (l).dvolx = 0;			/* say "more than one volume" */

	return;

     end add_up_subtot;


print_dir_line: proc (l);				/* procedure to print line for single dir or subtree */

dcl  l fixed bin;

	path = disk_stat.spth (subtot (l).dsix);	/* get full path of this dir */

	path = spth (subtot (l).dsix);		/* decide how much of the pathname to print */
	k = 0;
	do j = 2 to 168;				/* find leading components that are same as in previous one */
	     if substr (path, j, 1) = ">" then do;
		if substr (path, 1, j) = substr (dn, 1, j) then k = j;
	     end;
	end;
	substr (path, 1, k) = "";			/* blank out portion of path that is same as previous one */

	dn = spth (subtot (l).dsix);			/* then save this one's complete pathname,
						   for use in deciding how much of the next pathname to print */

	call ioa_ (dir_formats (fmt_ix),
	     subtot (l).squota, subtot (l).sused, cv_$mwvf (subtot (l).scharge),
	     subtot (l).dquota, subtot (l).dused, cv_$mwvf (subtot (l).dcharge),
	     l, subtot (l).dvolx, path);

	return;

     end print_dir_line;


print_subtot_line: proc (l);				/* procedure to print subtotal for a subtree */

dcl  l fixed bin;

	call ioa_ (heading_dashes (fmt_ix));		/* draw line under dirs to be subtotaled */
	call ioa_ (dir_formats (fmt_ix),
	     subtot (l).squota, subtot (l).sused, cv_$mwvf (subtot (l).scharge),
	     subtot (l).dquota, subtot (l).dused, cv_$mwvf (subtot (l).dcharge),
	     l, subtot (l).dvolx, disk_stat.spth (subtot (l).dsix)); /* print full pathname for subtotals */
	call ioa_ (heading_dashes (fmt_ix));		/* surround subtotal with lines */
	call ioa_;				/* skip one line */

	return;

     end print_subtot_line;

set_disk_price_index: proc (i, rs_number);		/* determines the correct rate to use */

dcl  rs_number fixed bin;
dcl  i fixed bin;
dcl  project_entry char (32);
dcl  path char (168);
dcl  ec fixed bin (35);

	path = after (disk_stat.spth (i), ">");		/* get rid of root */
	project_entry = before (path, ">");		/* and grab 1st level directory */
	if project_entry ^= "udd" then
	     if project_entry ^= "UDD" then
		if project_entry ^= "user_dir_dir" then do; /* doesn't belong to a project */
		     rs_number = 0;			/* use default */
		     old_project_entry = "";
		     return;
		end;
	path = after (path, ">");
	project_entry = before (path, ">");		/* finally - the project name (one of them) */
	if project_entry = old_project_entry then return; /* avoid some work */
	old_project_entry = project_entry;
	if ^no_sat then call search_sat_$rs_number (project_entry, rs_number, code); /* get rate index */
	if no_sat | code ^= 0 then do;
	     rs_number = 0;				/* assume the worst */
	     if code = error_table_$noentry then
		call com_err_ (code, "disk_stat_print",
		     "Trying to locate project ""^a"" in the sat.  Default rates will be used.",
		     project_entry);
	     else do;
		project_entry = before (project_entry, " ") || ".pdt";
		call hcs_$initiate (">sc1>pdt", project_entry, "", 0, 1, pdtp, ec); /* get the pdt */
		if pdtp ^= null then rs_number = pdt.rs_number;
		else do;				/* last effort is to use the pit.rs_number */
		     call user_info_$rs_number (rs_number);
		     call user_info_$rs_name (rs_name);
		     if no_sat then call com_err_ (0, "disk_stat_print",
			     "Insufficient access for >sc1>pdt>^a.", project_entry);
		     else call com_err_ (ec, "disk_stat_print", "Cannot access the sat or >sc1>pdt>^a.^/Using rate structure ""^a"" defined for this process.",
			     project_entry, rs_name);
		end;
		no_sat = "1"b; ;			/* indicate cannot get the sat */
	     end;
	end;
	return;

     end set_disk_price_index;
%page;
%include disk_stat;
%page;
%include pdt;
%page;
%include user_attributes;

     end disk_stat_print;
