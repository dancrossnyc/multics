/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

system_daily_report:
     procedure options (variable);

/* SYSTEM_DAILY_REPORT - Generate Multics system usage statistics. */

/* Modified 1984-08-31 BIM for V3 usage totals. */

dcl	dn		char (168),		/* Directory name */
	en		char (32),		/* Entry name */
	datstr		char (24),		/* Formatted date of start */
	datstr1		char (24),		/* Formatted date end */
	(i, j, k, l, m, n)	fixed bin,		/* indices */
	conn		fixed bin (71),		/* total connect time in microseconds today */
	nlogins		fixed bin,		/* # sessions today */
	ncshd		fixed bin,		/* # crashed sessions today */
	nabs		fixed bin,		/* # abs jobs today */
	dollar_delta	float bin,		/* charge today */
	(fract, fract1)	float bin,		/* used in percent calculation */
	(tnlogins, tncsh, tnabs, tqta, tusage, tnproj, tnusers)
			fixed bin init (0),
	tconn		fixed bin (71) init (0),
	qlim		fixed bin,
	(dayunits, munits)	fixed bin,
	(dayconfigs, mconfigs)
			fixed bin,
	(xcpu, xmem, xbulk) fixed bin,
	ztime		fixed bin (71),
	dummy		char (10),		/* dummy title */
	comp		char (120),		/* company title */
	dept		char (120),		/* department title */
	ap		ptr,			/* ptr to arg */
	al		fixed bin (21),		/* lth of arg */
	bchr		char (al) unaligned based (ap),
						/* access struc for arg */
	ec		fixed bin (35),		/* err code */
	xtotp		ptr;			/* ptr to yesterday's data */
dcl	arg_count		fixed bin;

dcl	heading		char (120) int static
			init (
			"Group^26xMonth^7xToday Logins  Crashed  Abs Jobs  Connect^4xQuota^5xUsed  Projects  Users^/"
			);

dcl	(addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs)
			builtin;

dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;

dcl	system_info_$titles entry (char (*), char (*), char (*), char (*));
dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	date_time_	entry (fixed bin (71), char (*));
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	com_err_		entry options (variable);

dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl	cleanup		condition;
dcl	ME		char (32) init ("system_daily_report") int static options (constant);

%page;

%include access_mode_values;
%include terminate_file;
%include use_totals;



	use_totals_ptr, xtotp = null ();
	on cleanup call clean_up;
	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ME, ec);
		return;
	     end;
	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, ME,
		     "Usage: system_daily_report today.use_totals yesterday.use_totals");
		return;
	     end;
	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
	if ec ^= 0
	then
PN_ERROR:
	     do;
		call com_err_ (ec, ME, "Invalid use totals pathname ^a.", bchr);
		go to ERROR;
	     end;

	call initiate_file_ (dn, en, R_ACCESS, use_totals_ptr, (0), ec);
	if ec ^= 0
	then
INITIATE_ERROR:
	     do;
		call com_err_ (ec, ME, "^a", pathname_ (dn, en));
		go to ERROR; /* it might be the second seg */
	     end;

	if use_totals.version ^= USE_TOTALS_VERSION_3
	then
UT_VERSION_ERROR:
	     do;
		call com_err_ (error_table_$unimplemented_version, ME, "^a is not version 3", pathname_ (dn, en));
		go to ERROR;
	     end;

	call cu_$arg_ptr (2, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
	if ec ^= 0
	then go to PN_ERROR;
	call initiate_file_ (dn, en, R_ACCESS, xtotp, (0), ec);
	if ec ^= 0
	then go to INITIATE_ERROR;
	if xtotp -> use_totals.version ^= USE_TOTALS_VERSION_3
	then go to UT_VERSION_ERROR;

	call system_info_$titles (dummy, dummy, comp, dept);
						/* Get report titles */

	call ioa_ ("^-^a^/^/^-^-^a", comp, dept);	/* Start report */
	call date_time_ (xtotp -> period_end, datstr);	/* Make printable date */
	call date_time_ (use_totals.period_end, datstr1);
	call ioa_ ("^/Multics usage report from ^a^/^23xto ^a", datstr, datstr1);

	munits = 0;
	dayunits = 0;
	xcpu, xmem = -1;
	mconfigs = -1;
	dayconfigs = 0;

	do i = 1 to use_totals.max_day_log;
	     if i = use_totals.max_day_log
	     then qlim = use_totals.max_qhour;
	     else qlim = 96;
	     do j = 1 to qlim;
		ztime = use_totals.daylog (i).qh (j).time;
		if ztime = 0
		then go to skip;
		if use_totals.daylog (i).qh (j).cpu = xcpu
		then if use_totals.daylog (i).qh (j).kmem = xmem
		     then go to sameconf;

		if use_totals.daylog (i).qh (j).cpu = 0
		then go to sameconf;
		if ztime > xtotp -> use_totals.period_end
		then dayconfigs = dayconfigs + 1;
		mconfigs = mconfigs + 1;
		xcpu = use_totals.daylog (i).qh (j).cpu;
		xmem = use_totals.daylog (i).qh (j).kmem;
sameconf:
		if use_totals.daylog (i).qh (j).nunits > dayunits
		then if ztime > xtotp -> use_totals.period_end
		     then dayunits = use_totals.daylog (i).qh (j).nunits;
		if use_totals.daylog (i).qh (j).nunits > munits
		then munits = use_totals.daylog (i).qh (j).nunits;
skip:
	     end;
	end;

	call ioa_ ("^/^9xStarts  Crashes^6xUptime   CPU avail.^6x%Idle  %Overhead  Max load units  Reconfigurations");
	call ioa_ ("^/Month^3x^7d^2x^7d^5x^7a^5x^7a^5x^7.1f^4x^7.1f^9x^7.1f^11x^7d", sys_starts, sys_crash,
						/* Write month-to-date totals */
	     tcv (uptime), tcv (cpu_avail), (idle * 1e2) / cpu_avail,
	     ((cpu_avail - idle - total_cpu) * 1e2) / cpu_avail, munits / 1e1, mconfigs);
	conn = cpu_avail - xtotp -> cpu_avail;		/* Calculate CPU available today */
	if conn = 0
	then fract = 0e0;				/* Aviod zdiv in case system_total was not run */
	else fract = ((idle - xtotp -> idle) * 1e2) / conn;
	if conn = 0
	then fract1 = 0e0;
	else fract1 = ((conn - idle - total_cpu + xtotp -> idle + xtotp -> total_cpu) * 1e2) / conn;
	call ioa_ ("Today^3x^7d^2x^7d^5x^7a^5x^7a^5x^7.1f^4x^7.1f^9x^7.1f^11x^7d", sys_starts - xtotp -> sys_starts,
	     sys_crash - xtotp -> sys_crash, tcv (uptime - xtotp -> uptime), tcv (cpu_avail - xtotp -> cpu_avail),
	     fract, fract1, dayunits / 1e1, dayconfigs);
	call ioa_ ("^/^3xCurrent system: ^8a^6xMonth-to-date MTBF: ^7a^/", last_sysid,
	     tcv (divide (uptime, sys_crash + 1, 71, 0)));
	call ioa_ ("^3xCurrent disk capacity: ^6d recs, ^5.1f% full^/^/", use_totals.disk_available,
	     ((use_totals.disk_available - use_totals.disk_left) * 1e2) / use_totals.disk_available);

	call ioa_ (heading);			/* Now user statistics part of report */
	do i = 2 to ntypes, 1;			/* Put paying customers at bottom of report */
	     dollar_delta = dollar_charge (i) - xtotp -> dollar_charge (i);
	     nlogins = logins (i) - xtotp -> logins (i);	/* Calculate usage for today */
	     tnlogins = tnlogins + nlogins;
	     ncshd = crashes (i) - xtotp -> crashes (i);	/* ... */
	     tncsh = tncsh + ncshd;
	     conn = 0;				/* Must add up connect time in each shift */
	     do j = 0 to 7;				/* Loop on shifts */
		conn = conn + (connect (i, j) - xtotp -> connect (i, j));
	     end;
	     tconn = tconn + conn;
	     nabs = 0;				/* Get count of abs jobs */
	     do j = 1 to 4;				/* Loop on queues */
		nabs = nabs + absentee.jobs (i, j) - xtotp -> absentee.jobs (i, j);
	     end;
	     tnabs = tnabs + nabs;
	     tqta = tqta + disk_quota (i);
	     tusage = tusage + disk_usage (i);
	     tnproj = tnproj + nproj (i);
	     tnusers = tnusers + nusers (i);
	     call ioa_ ("^24a  ^10.2f  ^10.2f  ^5d  ^7d  ^8d  ^7a  ^7d  ^7d  ^8d  ^5d", utype (i), dollar_charge (i),
		dollar_delta, nlogins, ncshd, nabs, tcv (conn), disk_quota (i), disk_usage (i), nproj (i), nusers (i))
		;
	end;
	call ioa_ ("^/TOTAL^45x^5d  ^7d  ^8d  ^7a  ^7d  ^7d  ^8d  ^5d", tnlogins, tncsh, tnabs, tcv (tconn), tqta,
	     tusage, tnproj, tnusers);

	call ioa_ ("");				/* End of loop on bins. */

ERROR:
	call clean_up;
	return;

/* internal procedure to format time for printing */

tcv:
     proc (x) returns (char (7));

dcl	x		fixed bin (71);

dcl	(a, b, c, d)	fixed bin (35),
	cc		char (7);

	a = divide (x, 1000000, 35, 0);
	b = divide (a, 60, 35, 0);
	a = mod (a, 60);
	c = divide (b, 60, 35, 0);
	b = mod (b, 60);
	call ioa_$rsnnl ("^4d:^2d", cc, d, c, b);
	if substr (cc, 6, 1) = " "
	then substr (cc, 6, 1) = "0";
	return (cc);

     end tcv;

clean_up:
     procedure;

	if use_totals_ptr ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	if xtotp ^= null ()
	then call terminate_file_ (xtotp, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;
     end system_daily_report;
