/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-10-06,Parisek), approve(88-02-03,MCR7845),
     audit(88-04-18,Lippard), install(88-04-26,MR12.2-1043):
     Implemment multi-segment file application for possible >256K disk_stat
     segment.
                                                   END HISTORY COMMENTS */


charge_disk: proc;

/* procedure to run through the daily disk statistics and store usage values into the projfile.
   Modified by TAC and THVV, April 1976, to charge for directory pages under NSS
   Modified by T. casey, Sept 1977 to charge for all lv's when none specified.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.
   Modified 1984-07-09 BIM for dir_disk_quota in projfile.
   */

dcl  path char (168),
     acpx fixed bin,
     cpx fixed bin,	   
     dn char (168) init (get_wdir_ ()),
     en char (32) init ("disk_stat"),
     ap ptr, al fixed bin, bchr char (al) based (ap),
     fcbp ptr,
     pp ptr,					/* projfile ptr */
     proj char (32),				/* project id */
     oldx fixed bin,				/* length of proj id */
    (i, j, k, nd, np, nn, ti) fixed bin,		/* indices */
     ec fixed bin (35);				/* error code */

dcl  ioa_ entry options (variable),
     get_wdir_ entry () returns (char (168)),
     com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$initiate entry (char (*), char (*), char (*),
     fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     msf_manager_$close entry (ptr),
     msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35)),
     msf_manager_$open entry (char (*), char (*), ptr, fixed bin (35));     	   
dcl  search_sat_$rs_number entry (char (*), fixed bin, fixed bin (35));
dcl  search_sat_$clean_up entry;
dcl  system_info_$prices_rs entry (fixed bin,
    (0:7) float bin, (0:7) float bin, (0:7) float bin, (0:7) float bin, float bin, float bin);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  rs_count fixed bin;
dcl  rs_number fixed bin;
dcl  mdc_$find_lvid entry (char (*), bit (36) aligned, fixed bin (35));
dcl  proj_psec fixed bin (71) init (0);
dcl  lvname char (32);
dcl  lvid (50) bit (36) aligned;			/* more than enough */
dcl (bad_lv_count, lv_count) fixed bin init (0);
dcl  npd fixed bin init (0);
dcl  lv_arg bit (1) aligned init (""b);
dcl  lvi fixed bin;
dcl  cp_array (0:4) ptr;
dcl  dummy (0:7) float bin;
dcl  dummy1 float bin;
dcl  disk_price float bin;
dcl (error_table_$badopt, error_table_$too_many_args, error_table_$noentry) ext fixed bin (35);
dcl last_nd fixed bin;
dcl (addr, hbound, null, substr, rtrim, index) builtin;
dcl sys_info$max_seg_size fixed bin (35) ext static;

%include projfile;

%include disk_stat;

/* ======================================================== */

	ec = 0;
	do i = 1 by 1 while (ec = 0);
	     call cu_$arg_ptr (i, ap, al, ec);
	     if ec = 0 then do;
		if lv_arg then do;			/* all remaining args are lv names */
		     lv_count = lv_count + 1;
		     if lv_count > hbound (lvid, 1) then do;
			ec = error_table_$too_many_args;
arg_err:			call com_err_ (ec, "charge_disk", "^a", bchr);
			return;
		     end;
		     lvname = bchr;
		     call mdc_$find_lvid (lvname, lvid (lv_count), ec);
		     if ec ^= 0 then do;
			call com_err_ (ec, "charge_disk", "^a", bchr);
			lv_count = lv_count - 1;
			bad_lv_count = bad_lv_count + 1;
		     end;
		end;
		else if bchr = "-lv" | bchr = "-logical_volume" then
		     lv_arg = "1"b;			/* all remaining args are lvnames */

		else if substr (bchr, 1, 1) = "-" then do;
		     ec = error_table_$badopt;
		     goto arg_err;
		end;
		else do;
		     call expand_path_ (ap, al, addr (dn), addr (en), ec);
		     if ec ^= 0 then go to arg_err;
		end;
	     end;
	end;

	if bad_lv_count > 0 then
	     call com_err_ (0, "charge_disk",
	     "Error in logical volume specification. Segment page charges may be incorrect.");

	if lv_count = 0 then
	     call com_err_ (0, "charge_disk",
	     "No logical volumes specified. Storage on all logical volumes will be charged for.");

	call msf_manager_$open (dn, en, fcbp, ec);
	if ec ^= 0 then go to init_err;
	acpx, cpx, ti = 0;
cpx_loop:
	call msf_manager_$get_ptr (fcbp, cpx, "0"b, cp_array (cpx), 0, ec);
	if ec = 0 then do;
	     cpx = cpx + 1;
	     goto cpx_loop;
	end;

	call hcs_$initiate ((get_wdir_ ()), "projfile", "", 0, 1, pp, ec); /* initiate projfile */
	if pp = null then do;
	     dn = get_wdir_ ();
	     en = "projfile";
init_err:	     call com_err_ (ec, "charge_disk", "^a>^a", dn, en);
	     return;
	end;

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */

	sp = cp_array (0);
	nd = disk_stat.dents;			/* Get number of dirs we have disk statistics on. */
	np = projfile.nproj;			/* Get number of projects we have in projfile. */
	nn = 0;					/* count of dirs with disk statistics stored into projfile */

	do i = 1 to np;				/* clear disk use for project */
	     projfile.projfiletab (i).disk_quota = 0;	/* clear quota for project */
	     projfile.projfiletab (i).dir_disk_quota = 0; /* ditto for dir flavor */
	     projfile.projfiletab (i).disk_use = 0;	/* clear disk use for project */
	     projfile.projfiletab (i).dir_disk_use = 0;
	end;
	oldx = 32;				/* set max lngth of projname */
	proj = (32)"!";				/* set proj to schreek */
	j = 0;					/* initialize projfile entry index */
	
	last_nd = nd;
comp_loop:
	do i = 1 to last_nd;			/* Look at every dir we have disk statistics (quota) on. */
	     if disk_stat.dtab (i).slev < 2 then go to skip;
						/* ignore superstructure */

	     dn = disk_stat.dtab (i).spth;		/* Get directory name. */
	     if substr (dn, 1, 4) ^= ">udd"		/* Ignore those not in >udd */
	     then if substr (dn, 1, 4) ^= ">UDD"	/* ... */
		then if substr (dn, 1, 13) ^= ">user_dir_dir" then go to skip;

	     if lv_count > 0 then			/* if a list of logical volumes to charge for was given */
		do lvi = 1 to lv_count		/* see if this dir's sons lvid is in the list */
		     while (lvid (lvi) ^= disk_stat.dtab (i).slvid);
	     end;					/* if no match, lvi = lv_count+1, which is checked below */
	     else lvi = -1;				/* fool that guy below into charging for this one */
	     substr (dn, 1, 1) = " ";			/* Remove root (>) */
	     k = index (dn, ">");			/* Find beginning of project name. */
	     path = substr (dn, k+1, 168-k);		/* Get directory name. */
	     if substr (path, 1, oldx) = proj & substr (path, oldx+1, 1) = ">" then do;
add_dir_to_project:	nn = nn + 1;			/* Same project as last one. Count. */
		npd = npd + 1;			/* count dirs belonging to this project */
		projfile.projfiletab (j).disk_quota
		     = projfile.projfiletab (j).disk_quota + disk_stat.dtab (i).sqta;
		projfile.projfiletab (j).dir_disk_quota
		     = projfile.projfiletab (j).dir_disk_quota + disk_stat.dtab (i).dqta;
		projfile.projfiletab (j).disk_use
		     = projfile.projfiletab (j).disk_use + disk_stat.dtab (i).suse;
		projfile.projfiletab (j).dir_disk_use
		     = projfile.projfiletab (j).dir_disk_use + disk_stat.dtab (i).duse;

		proj_psec = proj_psec + disk_stat.dtab (i).dtpp; /* charge for all dirs - they are on the RLV */
		if lvi <= lv_count then		/* if we are charging for seg pages on this lvol */
		     proj_psec = proj_psec + disk_stat.dtab (i).stpp; /* do so */

	     end;

	     else do;				/* New project. */

		if npd > 0 then			/* if there were dirs belonging to a previous project */
		     call charge_proj;		/* go record those charges, if they look reasonable */

		if disk_stat.dtab (i).slev > 2 then do; /* This should be a project directory. */
		     call ioa_ ("charge_disk: ^a not at level 2 but shd be project dir", path);
		     go to skip;			/* If not, ignore it. Look for next proj. */
		end;
		proj = rtrim(path);			/* Save project name for comparison. */
		do j = 1 to np while (proj ^= projfile.id (j)); end;
		if j > np then do;
		     call ioa_ ("charge_disk: project ^a not in projfile", proj);
		     proj = " ";			/* Blank proj id */
		end;				/* Ignore missing project. */

		else do;				/* new project looks ok */
		     oldx = index (path, " ") - 1;	/* get length of project name */
		     goto add_dir_to_project;		/* go add figures for this dir into projfile entry */
		end;

	     end;
skip:	     if (lodh + (i+1) * lode) > sys_info$max_seg_size then do;
		ti = ti + i;		
		last_nd = nd - ti;
		acpx = acpx + 1;
		sp = cp_array (acpx);
		goto comp_loop;
	     end;
	end;

	if npd > 0 then				/* if last few dirs belonged to a project */
	     call charge_proj;			/* go record the charges */

	call hcs_$terminate_noname (sp, ec);		/* Terminate stats */
 	call hcs_$terminate_noname (pp, ec);		/* ... and projfile */

	if fcbp ^= null then
	     call msf_manager_$close (fcbp);

	if rs_count > 0 then
	     call search_sat_$clean_up;		/* tidy up */

	call ioa_ ("charge_disk: charged ^d dirs out of ^d to ^d projects", nn, nd, np);

	return;

charge_proj: proc;					/* procedure to check reasonableness of project disk charge, and
						   either record it if it looks ok, or complain if it doesn't */

/* For now, we just check for charge decreasing (impossible unless something has  been clobbered);
   later, checks for unreasonably large increases can be added. */
	     if proj_psec < projfile.projfiletab (j).disk_psec then do;
		if rs_count > 0 then do;		/* if site has multiple rate structures */
		     call search_sat_$rs_number (projfile.projfiletab (j).id, rs_number, ec); /* get rate index */
		     if ec ^= 0 then
			if ec = error_table_$noentry then
			     call com_err_ (ec, "charge_disk",
			     "Trying to locate project ""^a"" in the sat.  Default rates will be used.",
			     projfile.projfiletab (j).id);
			else call com_err_ (ec, "charge_disk", "Accessing the sat.  Default rates will be used");
		end;
		else rs_number = 0;
		call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, disk_price, dummy1);
						/* get disk price, just for printing charge in error messages */
		call ioa_ ("charge_disk: Total tpp of ^a project's directories (^d, $^.2f) is less than the
^-previous value (^d, $^.2f) in projfile; the projfile value has not been modified;",
		     projfile.projfiletab (j).id, proj_psec, (disk_price*proj_psec),
		     projfile.projfiletab (j).disk_psec, (disk_price*projfile.projfiletab (j).disk_psec));
		call ioa_ ("^-whichever value is incorrect must be adjusted before billing is run.");
	     end;

	     else projfile.projfiletab (j).disk_psec = proj_psec;

	     proj_psec = 0;				/* clear the adder so the next project starts at zero */
	     npd = 0;				/* same for the count of dirs charged to the project */

	     return;

	end charge_proj;

     end charge_disk;

