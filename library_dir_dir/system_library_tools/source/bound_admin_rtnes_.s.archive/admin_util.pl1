/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
admin_util: proc;

/* originally coded by K.Willis  4/5/71  */
/* upgraded for version 2 pl/1 July 1972 by J.Phillipps */
/* Modified by T.H. VanVleck, .... 1974 to include default values for a new project */
/* Modified by T. Casey, Feb 1975 to fix bugs */
/* Modified by T. Casey, September 1977 to allow deletions of uwt table entries. */
/* Modified by E. N. Kittlitz, June 1982 for user_attributes.incl.pl1. */
/* Modified 1984-09-11 BIM for removal of max_users. */
/* Modified 1984-12-14 by EJ Sharpe for addition of default_audit_flags, also
   removed log_control references for Benson */

dcl  bchr char (al) based (ap) unaligned,
     ap ptr,
     (i, j) fixed bin,
     al fixed bin,
     ec fixed bin (35),
     ttt fixed bin init (60),
     dum char (12) aligned,
     (has, hasnt) bit (36),
     uname char (24) aligned,
     key char (32) aligned,
     wt fixed bin,
     sadp ptr,
     (satp, satep) ptr init (null),
     atts char (512) var,
     flags_str char (256),
     datstr char (24) aligned;

dcl  parse_attributes_ entry (char (*) aligned, bit (36), bit (36), fixed bin (35)),
     format_attributes_ entry (ptr, char (*) var),
     date_time_ entry (fixed bin (71), char (*) aligned),
     get_wdir_ entry () returns (char (168) aligned),
     user_info_ entry options (variable),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
	fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     error_table_$lock_wait_time_exceeded fixed bin (35) ext,
     error_table_$badopt fixed bin (35) ext,
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     com_err_ entry options (variable),
     set_lock_$unlock entry (bit (36) aligned, fixed bin (35)),
     set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35)),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     signal_ entry (char (*)),
     ioa_ entry options (variable),
     convert_access_audit_flags_$from_string entry (char (*), bit (36) aligned, fixed bin (35)),
     convert_access_audit_flags_$to_string entry (bit (36) aligned, char (*), fixed bin (35));


dcl  (addr, null) builtin;

dcl  1 default_attributes aligned based (addr (sys_admin_data.default_proj_attributes)),
       2 at aligned like user_attributes;

/* ----------------------------------- */

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "admin_util", "");
	     return;
	end;
	call hcs_$initiate ((get_wdir_ ()), "sys_admin_data", "", 0, 1, sadp, ec);
	if sadp = null then go to er;
	if bchr = "lock" then do;
	     call cu_$arg_ptr (2, ap, al, ec);
	     if ec ^= 0 then ttt = 60;
	     else do;
		ttt = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to badarg;
	     end;
	     call lock_sad;
	end;
	else if bchr = "unlock" then do;
	     call set_lock_$unlock (sadp -> sys_admin_data.lock, ec);
	     if ec ^= 0 then go to er;
	end;
	else if bchr = "print" then do;
	     call ioa_ ("^/SYS ADMIN DATA");
	     if sys_admin_data.lock = (36)"0"b then dum = "-unlocked-"; else dum = "-locked-";
	     call ioa_ ("^/lock:^-^-^a", dum);
	     call ioa_ ("locker:^-^-^a", sys_admin_data.locker);
	     call ioa_ ("");
	     call ioa_ ("user_accts_office:^-^a", sys_admin_data.user_accounts_office);
	     call ioa_ ("user_accts_addr:^-^a", sys_admin_data.user_accounts_addr);
	     call ioa_ ("user_accts_phone:^-^a", sys_admin_data.user_accounts_phone);
	     call ioa_ ("mailing banner:");
	     do i = 1 to 3;
		call ioa_ ("^10xb^d:^-^a", i, sys_admin_data.mailing_banner (i));
	     end;
	     call ioa_ ("^/Default project attributes:");
	     call format_attributes_ (addr (sys_admin_data.default_proj_attributes), atts);
	     call ioa_ ("Attributes:^-^a", atts);
	     call ioa_ ("Init_ring:^-^d", sys_admin_data.default_proj_ring1);
	     call ioa_ ("Max_ring:^-^-^d", sys_admin_data.default_proj_ring2);
	     call ioa_ ("Group:^-^-^a", sys_admin_data.default_proj_group);
	     call ioa_ ("Grace:^-^-^d", sys_admin_data.default_proj_grace);
	     call convert_access_audit_flags_$to_string (sys_admin_data.default_audit_flags, flags_str, ec);
	     if ec ^= 0 then flags_str = "invalid binary flags";
	     call ioa_ ("Audit flags:^-^a", flags_str);
	end;
	else if bchr = "dft" then go to dfts;
	else if bchr = "default" then go to dfts;
	else if bchr = "set" then do;
dfts:	     call cu_$arg_ptr (2, ap, al, ec);
	     if ec ^= 0 then go to er;
	     key = bchr;
	     call cu_$arg_ptr (3, ap, al, ec);
	     if ec ^= 0 then go to er;
	     call lock_sad;
	     if key = "user_accts" then sys_admin_data.user_accounts_office = bchr;
	     else if key = "user_accts_addr" then sys_admin_data.user_accounts_addr = bchr;
	     else if key = "user_accts_phone" then sys_admin_data.user_accounts_phone = bchr;
	     else if key = "user_accts_office" then sys_admin_data.user_accounts_office = bchr;
	     else if key = "b1" then sys_admin_data.mailing_banner (1) = bchr;
	     else if key = "b2" then sys_admin_data.mailing_banner (2) = bchr;
	     else if key = "b3" then sys_admin_data.mailing_banner (3) = bchr;
	     else if key = "attributes" then do;
		call parse_attributes_ ((bchr), has, hasnt, ec);
		if ec ^= 0 then go to badarg1;

/* The meanings of the primary, secondary (standby), and edit_only bits
   in the attributes word are reversed for internal versus external use.
   Internally, a 1-bit means a user is allowed to log in as a primary,
   secondary, or edit_only user. Externally, when an administrator edits attributes, he
   must type the keywords no_primary, no_secondary, or no_edit_only (for historical reasons).
   The parse_attributes_ subroutine returns a 1-bit for no_prime, and a 0-bit for ^no_prime, for example.
   To resolve this incompatibility, we complement the current internal values of these bits,
   so they become compatible with the external input values. Then we make the requested changes.
   Finally, we complement these 3 bits back to their internal values.
*/

		default_attributes.at.pm_ok = ^default_attributes.at.pm_ok;
		default_attributes.at.sb_ok = ^default_attributes.at.sb_ok;
		default_attributes.at.eo_ok = ^default_attributes.at.eo_ok;
		sys_admin_data.default_proj_attributes = sys_admin_data.default_proj_attributes & ^hasnt;
		sys_admin_data.default_proj_attributes = sys_admin_data.default_proj_attributes | has;
		default_attributes.at.pm_ok = ^default_attributes.at.pm_ok;
		default_attributes.at.sb_ok = ^default_attributes.at.sb_ok;
		default_attributes.at.eo_ok = ^default_attributes.at.eo_ok;
	     end;
	     else if key = "init_ring" then do;
		sys_admin_data.default_proj_ring1 = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to badarg1;
	     end;
	     else if key = "max_ring" then do;
		sys_admin_data.default_proj_ring2 = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to badarg1;
	     end;
	     else if key = "group" then sys_admin_data.default_proj_group = bchr;
	     else if key = "grace" then do;
		sys_admin_data.default_proj_grace = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to badarg1;
	     end;
	     else if key = "audit" | key = "audit_flags" then do;
		call convert_access_audit_flags_$from_string (bchr,
		     sys_admin_data.default_audit_flags, ec);
		if ec ^= 0 then go to badarg1;
	     end;
	     else if key = "uwt" then do;
		if bchr = "dl" | bchr = "delete" | bchr = "-dl" | bchr = "-delete"
		then wt = -1;			/* remember to delete it */
		else do;				/* convert weight */
		     wt = cv_dec_check_ (bchr, ec);
		     if ec ^= 0 | wt < 0 then go to badarg1;
		end;
		call cu_$arg_ptr (4, ap, al, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, "admin_util", "");
		     go to badarg2;
		end;
		call get_sat;
		do i = 1 to sat.uwt_size while (sat.uwt (i).initproc ^= bchr); end;
		if wt = -1 & i > sat.uwt_size then do;	/* if one to be deleted was not found */
		     call com_err_ (0, "admin_util", "^a not in table", bchr);
		     goto badarg2;
		end;
		if i > 24 then do;
		     call com_err_ (0, "admin_util", "UWT overflow. Maximum 24");
		     go to badarg2;
		end;
		if wt = -1 then do;			/* delete this one */
		     do j = i + 1 to sat.uwt_size;	/* move the others up */
			sat.uwt (j - 1).initproc = sat.uwt (j).initproc;
			sat.uwt (j - 1).units = sat.uwt (j).units;
		     end;
		     sat.uwt_size = sat.uwt_size - 1;	/* decrement the count */
		end;
		else do;				/* add this one */
		     sat.uwt_size = max (i, sat.uwt_size);
		     sat.uwt (i).initproc = bchr;
		     sat.uwt (i).units = wt;
		end;
	     end;
	     else if key = "administrator1" then do;
		call get_sat;
		sat.system_admin (1) = bchr;
	     end;
	     else if key = "administrator2" then do;
		call get_sat;
		sat.system_admin (2) = bchr;
	     end;
	     else if key = "max_units" then do;
		call get_sat;
		sat.max_units = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to badarg1;
	     end;
	     else do;
badarg1:		call com_err_ (error_table_$badopt, "admin_util", bchr);
	     end;
badarg2:	     call set_lock_$unlock (sys_admin_data.lock, ec);
	     if ec ^= 0 then go to er;
	     if satp ^= null then call hcs_$terminate_noname (satp, ec);
	end;
	else do;
badarg:	     call com_err_ (error_table_$badopt, "admin_util", bchr);
	end;
	call hcs_$terminate_noname (sadp, ec);

/* ----------------------------------------- */

lock_sad: proc;

	call set_lock_$lock (sadp -> sys_admin_data.lock, ttt, ec);
	if ec = error_table_$lock_wait_time_exceeded then do;
	     call com_err_ (ec, "admin_util", "sys_admin_data locked by ^a", locker);
	     call signal_ ("program_interrupt");	/* can't use pl1 signal - default_error_handler_ */
	     return;
	end;
	call user_info_ (uname);
	sys_admin_data.locker = uname;

     end;

get_sat: proc;

	call hcs_$initiate ((get_wdir_ ()), "smf.cur.sat", "", 0, 1, satp, ec);
	if satp = null then go to er;

     end;
%page;
%include sat;
%page;
%include sys_admin_data;
%page;
%include user_attributes;

     end admin_util;
