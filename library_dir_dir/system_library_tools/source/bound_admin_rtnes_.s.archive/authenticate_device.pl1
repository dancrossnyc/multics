/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-04-10,Fawcett), approve(86-04-10,MCR7383),
     audit(86-05-15,Martinson), install(86-07-18,MR12.0-1098):
     Add the error codes auth_incorrect and auth_unknown problem found when
     implementing subvolumes.
                                                   END HISTORY COMMENTS */


authenticate_device:
     proc;

/*
   This command is used by the operator to authenticate a tape or disk volume.
   It takes two arguments: the device name of the drive on which the volume is
   mounted, and for tapes, the three letter authenticaion code printed on the tape
   label (note that "***" will authenticate any label), or for disks, one of the
   codes "ss", "io", "urd", "urg", or "no" which must match the type of volume
   in the authentication message (note that "no" denies authentication).
   It then calls a gate in RCP to check the authenticaiton code against the user
   specified volume.
*/

/*
   Written by R.J.C. Kissel in September 1977.
   Modified by R.J.C. Kissel 1/79 to handle disk authentication.
   Modified by C. D. Tavares 04/24/79 for new authentication levels.
*/

dcl  device_name char (8);				/* Unique physical device name. */
dcl  authentication_code char (3);			/* Authentication code for the volume. */
dcl  err_msg char (128) varying;			/* Informative message for com_err_ call */
dcl  nargs fixed bin;				/* Number of args this command was called with. */
dcl  dlen fixed bin;				/* Length of the device_name. */
dcl  code fixed bin (35);				/* Error code. */

dcl  arg char (arg_len) based (arg_ptr);
						/* Overlay for the command arguments. */
dcl  arg_len fixed bin;
dcl  arg_ptr ptr;

dcl  rcp_sys_$authenticate_device entry (char (*), char (*), fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);

dcl (error_table_$auth_incorrect,
     error_table_$auth_unknown,
     error_table_$noarg,
     error_table_$too_many_args,
     error_table_$improper_data_format,
     error_table_$action_not_performed) external fixed bin (35);

dcl (substr, verify) builtin;

	call cu_$arg_count (nargs);

	if nargs > 2
	then do;
	     call com_err_ (error_table_$too_many_args, "authenticate_device",
		"Usage is: authenticate_device device_name authentication_code.");
	     return;
	end;

	if nargs <= 1
	then do;
	     call com_err_ (error_table_$noarg, "authenticate_device",
		"Usage is: authenticate_device device_name authentication_code.");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);

	if code ^= 0
	then do;
	     call com_err_ (code, "authenticate_device");
	     return;
	end;

	device_name = arg;
	dlen = arg_len;
	call cu_$arg_ptr (2, arg_ptr, arg_len, code);

	if code ^= 0
	then do;
	     call com_err_ (code, "authenticate_device");
	     return;
	end;

	authentication_code = arg;

/*
   Make a consistency check on the device name.
*/

	if substr (device_name, dlen-2, 1) ^= "_"
	| verify (substr (device_name, dlen-1, 2), "0123456789") ^= 0
	| verify (substr (device_name, 1, dlen-3), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") ^= 0
	then do;
	     call com_err_ (0, "authenticate_device", "Invalid device name: ^a.", device_name);
	     return;
	end;

/*
   Make a consistency check on the authentication code.
*/

	if verify (authentication_code, " abcdefghijklmnopqrstuvwxyz*") ^= 0
	then do;
	     call com_err_ (0, "authenticate_device", "Invalid authentication code: ^a.", authentication_code);
	     return;
	end;

/*
   For disks make one more check of the authentication code.
*/

	if substr (device_name, 1, 3) = "dsk"
	then do;
	     if authentication_code ^= "ss" & authentication_code ^= "io" & authentication_code ^= "urd"
	     & authentication_code ^= "urg" & authentication_code ^= "no"
	     then do;
		call com_err_ (0, "authenticate_device", "Unknown disk authentication code: ^a.",
		     authentication_code);
		return;
	     end;
	end;

/*
   Everything looks good here.
*/

	call rcp_sys_$authenticate_device (device_name, authentication_code, code);

	if code ^= 0
	then do;

	     if code = error_table_$action_not_performed then do;
		code = 0;
		err_msg = "Device ^a not requesting authentication.";
	     end;
	     else if code = error_table_$improper_data_format then do;
		code = 0;
		err_msg = "Authentication ""***"" not allowed for device ^a.";
	     end;
	     else if code = error_table_$auth_incorrect |
	          code = error_table_$auth_unknown then err_msg = "For device ^a";
	     else err_msg = "Device ^a not found.";

	     call com_err_ (code, "authenticate_device", err_msg, device_name);
	end;

	return;

     end authenticate_device;
