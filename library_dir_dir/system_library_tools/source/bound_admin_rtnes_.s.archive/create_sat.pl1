/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* create_sat.pl1 -- minimal program to invent an empty sat. */
/* This replaces cv_smf, since we no longer manipulate smf's */
/* format: style2 */
/* BIM 1984-07-05 */
/* Modified 1984-10-11 by E. Swenson to fix sat.current_size initializaton. */

create_sat:
     procedure options (variable);

	declare com_err_		 entry () options (variable);
	declare command_query_$yes_no	 entry () options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	declare get_group_id_	 entry () returns (char (32));
	declare get_wdir_		 entry() returns(character (168));
	declare initiate_file_$create	 entry (character (*), character (*), bit (*), pointer, bit (1) aligned,
				 fixed binary (24), fixed binary (35));
	declare pathname_		 entry (character (*), character (*)) returns (character (168));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

	declare error_table_$namedup	 fixed bin (35) ext static;

	declare arg_count		 fixed bin;
	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare argument		 char (al) based (ap);
	declare code		 fixed bin (35);
	declare created		 bit (1) aligned;
	declare dir_name		 char (168);
	declare entryname		 char (32);
	declare (satp, satep)	 pointer;
	declare yes_sw		 bit (1) aligned;

	declare ME		 char (32) init ("create_sat") int static options (constant);

%include sat;
%include user_attributes;
%include access_mode_values;
%include terminate_file;


	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if arg_count ^= 1
	then do;
		call com_err_ (0, ME, "Usage: ^a NEW_SAT_PN.sat", ME);
		return;
	     end;

	satp = null ();

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_ (argument, dir_name, entryname, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", argument);
		return;
	     end;

	call initiate_file_$create (dir_name, entryname, RW_ACCESS, satp, created, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", pathname_ (dir_name, entryname));
		return;
	     end;

	if ^created
	then do;
		call command_query_$yes_no (yes_sw, error_table_$namedup, ME,
		     "The create_sat command will discard all information in an existing SAT.^/ Answer ""no"" unless you are sure that you want to discard the information in this segment."
		     , "SAT ^a already exists. Do you wish to overwrite it.?", pathname_ (dir_name, entryname));
		if ^yes_sw
		then do;
			call terminate_file_ (satp, (0), TERM_FILE_TERM, (0));
			return;
		     end;
	     end;
	sat.version = -1;				/* BROKEN */
	sat.author.proc_group_id = get_group_id_ ();
	sat.author.lock = ""b;
	sat.author.update_attributes, sat.author.update_authorization, sat.author.deferral_notified = "0"b;
	sat.last_install_time = 0;
	sat.table = "SAT";
	sat.w_dir = get_wdir_ ();

	sat.max_size = hbound (sat.project, 1);
	sat.current_size = 0;
	sat.freep = 1;
	sat.n_projects = 0;
	sat.max_units = 0;
	sat.uwt_size = 0;
	sat.uwt (*).initproc = "";
	sat.uwt (*).units = 0;
	sat.system_admin (*) = "";
	sat.pad1 = 0;
	sat.project (1) = 0;			/* zero first project */
	sat.version = SAT_version;
	call terminate_file_ (satp, wordno (addr (sat.project (2))), TERM_FILE_BC | TERM_FILE_TERM, (0));
	return;
     end create_sat;
