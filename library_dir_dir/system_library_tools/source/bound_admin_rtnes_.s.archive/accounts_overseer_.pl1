/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
accounts_overseer_: proc;

/* Special login responder for user accounts */
/* modified July 1972 by J.Phillipps to get ready for v2 pl/1  */
/* iox'ed and cleaned up August 1981 by E. N. Kittlitz */
/* master_ec_error_ added as synonym for program_interrupt, September 1982, E. N. Kittlitz. */


/****^  HISTORY COMMENTS:
  1) change(87-08-25,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29,MR12.2-1093):
     Avoid doing iox_$control quit_enable when running as absentee; abs_io_
     does not implement this control so we produce an unnecessary error
     message. (phx16088)
                                                   END HISTORY COMMENTS */


dcl  cl_safe_intermediary entry variable;
dcl  code fixed bin (35);
dcl  command char (32) defined (whole_line) pos (1);
dcl  i fixed bin;
dcl  input_line char (224) defined (whole_line) pos (33);
dcl  k fixed bin;
dcl  ll fixed bin (21);
dcl  m fixed bin;
dcl  ml fixed bin;
dcl  mp ptr;
dcl  path char (168);
dcl  sp ptr;
dcl  whole_line char (256);

dcl  setup_handlers bit (1) int static init ("0"b);
dcl  testmode bit (1) int static init ("0"b);

dcl  change_wdir_ entry (char (168) aligned, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  condition_ entry (char (*), entry);
dcl  condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl  cu_$get_cl_intermediary entry (entry);
dcl  cu_$ready_proc entry;
dcl  cu_$set_cl_intermediary entry (entry);
dcl  cu_$stack_frame_ptr entry (ptr);
dcl  debug entry;
dcl  get_system_free_area_ entry (ptr);
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch_nnl entry () options (variable);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$user_input ptr external static;
dcl  iox_$user_io ptr external static;
dcl  program_interrupt entry;
dcl  trace_stack_ entry (ptr, fixed bin, fixed bin, char (32) aligned);
dcl  user_info_$homedir entry (char (*));
dcl  user_info_$process_type entry returns (fixed bin);

dcl  (addr, index, length, null, search, substr, verify) builtin;

dcl  ncoms fixed bin int static init (36),
     comnam (36) char (32) aligned int static init
	("list", "mail", "status", "listacl", "who",
	"ls", "ml", "st", "la", "",
	"enter_abs_request", "value$set", "value$dump", "getquota", "movequota",
	"ear", "", "", "gq", "mq",
	"logout", "list_abs_requests", "cancel_abs_request", "setacl", "deleteacl",
	"", "lar", "car", "sa", "da",
	"y0", "y1", "y2", "y3", "y4", "y5");

dcl  INTERACTIVE init(1) fixed bin int static options(constant);
dcl  NL char (1) aligned int static init ("
");

dcl  berrm char (ml) based (mp) unaligned;


/* ============================================================================== */


start:
	call cu_$get_cl_intermediary (cl_safe_intermediary);
	call cu_$set_cl_intermediary (quit);
	setup_handlers = "1"b;
	call condition_ ("any_other", ucs);
	call condition_ ("master_ec_error_", pi_h);
	call condition_ ("program_interrupt", pi_h);
	call condition_ ("quit", quit);
	if user_info_$process_type() = INTERACTIVE then do;
	     call iox_$control (iox_$user_io, "quit_enable", null, code);
	     if code ^= 0 then
	          call com_err_ (code, "accounts_overseer_", "");
	     end;					/* don't enable quits in absentee, abs_io_ complains */

	if ^testmode then do;
	     call user_info_$homedir (path);
	     call change_wdir_ ((path), code);
	     if code ^= 0 then do;
		call com_err_ (code, "accounts_overseer_", "Unable to set working directory ^a.", path);
		return;
	     end;
	end;

	command = "exec_com start_up";
	call cu_$cp (addr (command), length (command), code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");

restart:	call cu_$ready_proc;
restart1:
	call iox_$get_line (iox_$user_input, addr (input_line), length (input_line), ll, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");
	if ll <= 1 then go to restart1;
	substr (input_line, ll) = "";
	if index (substr (input_line, 1, ll), ";") ^= 0 then do;
	     call ioa_ ("Illegal syntax");
	     go to restart;
	end;
	i = verify (substr (input_line, 1, ll), " 	"); /* Strip leading blanks and tabs. */
	if i = 0 then go to restart1;			/* If all blanks */
	k = search (substr (input_line, i, ll - i + 1), " 	"); /* Find end of command. */
	if k = 0 then command = substr (input_line, i, ll - i + 1);
	else command = substr (input_line, i, k - 1);
	if command = "" then go to restart1;

	do i = 1 to ncoms;
	     if command = comnam (i) then do;
		call cu_$cp (addr (input_line), ll, code);
		if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");
		go to restart;
	     end;
	end;

	if testmode then do;
	     if (command = "debug" | command = "db") then do;
		call debug;
		go to restart;
	     end;
	     else if command = "quit" | command = "q" | command = "exit" then do;
		if setup_handlers then
		     call cu_$set_cl_intermediary (cl_safe_intermediary);
		return;
	     end;
	end;					/* testmode */

	command = "exec_com master";
	call cu_$cp (addr (command), ll + 32, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");

	go to restart;

test: entry;

	testmode = "1"b;
	setup_handlers = "0"b;
	go to restart;

test_with_handlers: entry;

	testmode = "1"b;
	go to start;

/* ============================================================================== */

ucs: proc (mcptr, cname, coptr, infoptr, contin);

dcl  (mcptr, coptr, infoptr, areap) ptr,
     contin bit (1),
     cname char (*);

dcl  k fixed bin,
     i fixed bin;

	if cname = "cleanup" then return;
	if cname = "finish" then return;
	if cname = "mme2" then do; contin = "1"b; return; end;
	if cname = "command_error" then return;
	if cname = "command_query" then return;
	if cname = "command_question" then return;

	call get_system_free_area_ (areap);
	call condition_interpreter_ (areap, mp, ml, 3, mcptr, cname, coptr, infoptr);
	k = 1;
	do i = 1 to ml;
	     if substr (berrm, i, 1) = NL then do;
		if i - k > 0 then call ioa_ ("^a", substr (berrm, k, i - k));
		k = k + i;
	     end;
	end;
	free berrm;


quit: entry;

queep:
	call iox_$control (iox_$user_input, "resetread", null, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "performing resetread");
	call ioa_$ioa_switch_nnl (iox_$user_io, "^/^B??? ");
	m = 0;
	call iox_$control (iox_$user_io, "start", null, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");
	call iox_$get_line (iox_$user_input, addr (input_line), length (input_line), ll, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "");
	substr (input_line, ll) = "";			/* clear rest of line */
	if substr (input_line, 1, 2) = "db" |
	     substr (input_line, 1, 5) = "debug" then
	     if testmode then call debug;
	     else do;
		call cu_$stack_frame_ptr (sp);
		call trace_stack_ (sp, 1, -1, "error_output");
		go to queep;
	     end;
	else if substr (input_line, 1, 2) = "sr" then go to do_sr;
	else if substr (input_line, 1, 5) = "start" then do;
do_sr:	     return;
	end;
	else if substr (input_line, 1, 2) = "pi" then call program_interrupt; /* the auditor said I could */
	else go to queep;

     end ucs;

pi_h: proc;

	call iox_$control (iox_$user_input, "resetread", null, code);
	if code ^= 0 then call com_err_ (code, "accounts_overseer_", "performing resetread");
	go to restart;

     end pi_h;

     end;
