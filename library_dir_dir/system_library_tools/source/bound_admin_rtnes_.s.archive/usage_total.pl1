/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style3 */
/* Modified 1984-08-31 BIM for v3 use_totals */

/****^  HISTORY COMMENTS:
  1) change(86-10-15,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
     Suppress error reporting of a non existent pdt of a renamed project.
  2) change(88-04-27,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29,MR12.2-1093):
      A) Add misc charges from projfile into use_totals.dollar_charge, in
         addition to summing them in the misc field. (as 471, phx19221)
                                                   END HISTORY COMMENTS */

usage_total:
     procedure options (variable);

/* program to clear all usage in pdt's */

dcl	satp		ptr,			/* pointer to the sat */
	pdtp		ptr,			/* pointer to the pdt */
	pp		ptr,			/* ptr to projfile */
	satep		ptr,			/* ptr to sat entry */
	pdtep		ptr,			/* ptr to pdt entry  */
	ap		ptr,
	dtemp		fixed bin (71),
	ftemp		float bin,
	disk_price	float bin,
	al		fixed bin (21),
	(sat_dir, pdtdir, tot_dir, projfile_dir)
			char (168),
	(sat_ename, projfile_ename, tot_ename, pdt_ename)
			char (32);

dcl	arg		char (al) based (ap);

dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;

dcl absolute_pathname_ entry (character (*), character (*), fixed binary (35));
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	system_info_$prices_rs
			entry (fixed bin, (0:7) float bin, (0:7) float bin, (0:7) float bin, (0:7) float bin,
			float bin, float bin);

dcl	(addr, null, rtrim, clock)
			builtin;

dcl	ec		fixed bin (35),
	t		fixed bin,		/* user type index */
	(i, j, k)		fixed bin;
declare	arg_count		fixed bin;
declare	ME		char (32) init ("usage_total") int static options (constant);
declare	cleanup		condition;

%page;
%include terminate_file;
%include access_mode_values;
%include sat;
%include pdt;
%include projfile;
%include use_totals;
%include user_attributes;


	satp, pdtp, use_totals_ptr, pp = null ();
	on cleanup call clean_up;
	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME);
		return;
	     end;
	if arg_count ^= 4
	then do;
		call com_err_$suppress_name (0, ME,
		     "Usage: usage_totals SAT_path PDT_dir_path PROJFILE_path USE_TOTALS_path");
		return;
	     end;

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (arg, "", sat_dir, sat_ename, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid sat pathname ^a.", arg);
		go to ERROR;
	     end;
	call initiate_file_ (sat_dir, sat_ename, R_ACCESS, satp, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a.", pathname_ (sat_dir, sat_ename));
		go to ERROR;
	     end;
	call cu_$arg_ptr (2, ap, al, (0));
	call absolute_pathname_ (arg, pdtdir, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid PDT directory pathname ^a.", arg);
		go to ERROR;
	     end;
	call cu_$arg_ptr (3, ap, al, (0));
	call expand_pathname_$add_suffix (arg, "", projfile_dir, projfile_ename, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid projfile pathname ^a.", arg);
		go to ERROR;
	     end;
	call initiate_file_ (projfile_dir, projfile_ename, R_ACCESS, pp, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (projfile_dir, projfile_ename));
		goto ERROR;
	     end;

	call cu_$arg_ptr (4, ap, al, (0));
	call expand_pathname_$add_suffix (arg, "use_totals", tot_dir, tot_ename, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid use totals pathname ^a.", arg);
		go to ERROR;
	     end;
	call initiate_file_ (tot_dir, tot_ename, RW_ACCESS, use_totals_ptr, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (tot_dir, tot_ename));
		go to ERROR;
	     end;
	if use_totals.version ^= USE_TOTALS_VERSION_3
	then do;
		call com_err_ (error_table_$unimplemented_version, ME, "^a is version 2, but it should be version 3.",
		     pathname_ (tot_dir, tot_ename));
		go to ERROR;
	     end;

	use_totals.generated = clock ();
	use_totals.period_begin = clock ();
	use_totals.period_end = 0;
	use_totals.total_cpu = 0;			/* Recalculate this. */
	do t = 1 to use_totals.ntypes;
	     use_totals.ut (t).dollar_charge = 0e0;
	     use_totals.ut (t).logins = 0;
	     use_totals.ut (t).crashes = 0;
	     use_totals.ut (t).nproj = 0;
	     use_totals.ut (t).nusers = 0;
	     use_totals.ut (t).disk_psec = 0;
	     use_totals.ut (t).disk_quota = 0;
	     use_totals.ut (t).disk_usage = 0;
	     use_totals.ut (t).misc = 0e0;
	     do i = 0 to 7;
		use_totals.ut (t).interactive (i).charge = 0e0;
		use_totals.ut (t).interactive (i).cpu = 0;
		use_totals.ut (t).interactive (i).core = 0;
		use_totals.ut (t).interactive (i).connect = 0;
		use_totals.ut (t).interactive (i).io_ops = 0;
	     end;
	     do i = 1 to 4;
		use_totals.ut (t).absentee (i).charge = 0e0;
		use_totals.ut (t).absentee (i).jobs = 0;
		use_totals.ut (t).absentee (i).cpu = 0;
		use_totals.ut (t).absentee (i).memory = 0;
	     end;
	     do i = 1 to 4;
		use_totals.ut (t).iod (i).charge = 0e0;
		use_totals.ut (t).iod (i).pieces = 0;
		use_totals.ut (t).iod (i).pages = 0;
		use_totals.ut (t).iod (i).lines = 0;
	     end;
	     do i = 1 to 16;
		use_totals.ut (t).devices (i) = 0e0;
	     end;
	end;

	do j = 1 to satp -> sat.current_size;
	     satep = addr (satp -> sat.project (j));
	     if project.state = 0 | project.state = 3	/* skip renamed project also to suppress error messages */
	     then go to endloop1;

	     pdt_ename = rtrim (project.project_id) || ".pdt";

	     do i = 1 to use_totals.n_select;		/* classify project into bin */
		if select_proj (i) = project.project_id
		then do;
			t = select_ut (i);
			go to scan3;
		     end;
	     end;
	     t = 1;
scan3:
	     use_totals.ut (t).nproj = use_totals.ut (t).nproj + 1;

	     call system_info_$prices_rs ((project.rs_number), (0), (0), (0), (0), disk_price, (0));

	     do i = 1 to projfile.nproj;		/* look up project disk usage */
		if projfile.id (i) = project.project_id
		then do;
			use_totals.ut (t).disk_quota = use_totals.ut (t).disk_quota + projfile.disk_quota (i);
			use_totals.ut (t).disk_usage = use_totals.ut (t).disk_usage + projfile.disk_use (i);
			dtemp = projfile.disk_psec (i);
			use_totals.ut (t).disk_psec = use_totals.ut (t).disk_psec + dtemp;
			ftemp = disk_price * dtemp;
			use_totals.ut (t).dollar_charge = use_totals.ut (t).dollar_charge + ftemp;
			use_totals.ut (t).misc = use_totals.ut (t).misc + projfile.misc_charges (i);
			use_totals.ut (t).dollar_charge = use_totals.ut (t).dollar_charge + projfile.misc_charges (i);
			go to getpdt;
		     end;
	     end;
	     call com_err_ (0, ME, "Projfile entry missing for ^a", project.project_id);

getpdt:
	     call initiate_file_ (pdtdir, pdt_ename, RW_ACCESS, pdtp, (0), ec);
	     if ec ^= 0
	     then do;
		     call com_err_ (ec, ME, "^a", pathname_ (pdtdir, pdt_ename));
		     go to endloop1;
		end;

	     do k = 1 to pdtp -> pdt.current_size;	/* loop on users in project */
		pdtep = addr (pdtp -> pdt.user (k));
		if user.state = 0
		then go to endloop;

		if user.state = 1
		then /* Find out when month began. */
		     if user.time_last_reset ^= 0
		     then if user.time_last_reset < use_totals.period_begin
			then use_totals.period_begin = user.time_last_reset;
		if user.last_update > use_totals.period_end
		then if user.last_update < use_totals.generated
		     then use_totals.period_end = user.last_update;
		     else user.last_update = use_totals.generated;

		use_totals.ut (t).nusers = use_totals.ut (t).nusers + 1;
		use_totals.ut (t).dollar_charge = use_totals.ut (t).dollar_charge + user.dollar_charge;
		use_totals.ut (t).logins = use_totals.ut (t).logins + user.logins;
		use_totals.ut (t).crashes = use_totals.ut (t).crashes + user.crashes;
		do i = 0 to 7;
		     use_totals.ut (t).interactive (i).charge =
			use_totals.ut (t).interactive (i).charge + user.interactive (i).charge;
		     use_totals.ut (t).interactive (i).cpu =
			use_totals.ut (t).interactive (i).cpu + user.interactive (i).cpu;
		     use_totals.total_cpu = use_totals.total_cpu + user.interactive (i).cpu;
		     use_totals.ut (t).interactive (i).core =
			use_totals.ut (t).interactive (i).core + user.interactive (i).core;
		     use_totals.ut (t).interactive (i).connect =
			use_totals.ut (t).interactive (i).connect + user.interactive (i).connect;
		     use_totals.ut (t).interactive (i).io_ops =
			use_totals.ut (t).interactive (i).io_ops + user.interactive (i).io_ops;
		end;
		do i = 1 to 4;
		     use_totals.ut (t).absentee (i).charge =
			use_totals.ut (t).absentee (i).charge + user.absentee (i).charge;
		     use_totals.ut (t).absentee (i).jobs =
			use_totals.ut (t).absentee (i).jobs + user.absentee (i).jobs;
		     use_totals.ut (t).absentee (i).cpu = use_totals.ut (t).absentee (i).cpu + user.absentee (i).cpu;
		     use_totals.total_cpu = use_totals.total_cpu + user.absentee (i).cpu;
		     use_totals.ut (t).absentee (i).memory =
			use_totals.ut (t).absentee (i).memory + user.absentee (i).memory;
		end;
		do i = 1 to 4;
		     use_totals.ut (t).iod (i).charge = use_totals.ut (t).iod (i).charge + user.iod (i).charge;
		     use_totals.ut (t).iod (i).pieces = use_totals.ut (t).iod (i).pieces + user.iod (i).pieces;
		     use_totals.ut (t).iod (i).pages = use_totals.ut (t).iod (i).pages + user.iod (i).pages;
		     use_totals.ut (t).iod (i).lines = use_totals.ut (t).iod (i).lines + user.iod (i).lines;
		end;
		do i = 1 to 16;
		     use_totals.ut (t).devices (i) = use_totals.ut (t).devices (i) + user.devices (i);
		end;

endloop:
	     end;
	     call terminate_file_ (pdtp, (0), TERM_FILE_TERM, (0));

endloop1:
	end;

ERROR:
	call clean_up;
	return;



clean_up:
     procedure;

	if pdtp ^= null ()
	then call terminate_file_ (pdtp, (0), TERM_FILE_TERM, (0));
	if pp ^= null ()
	then call terminate_file_ (pp, (0), TERM_FILE_TERM, (0));
	if use_totals_ptr ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	if satp ^= null ()
	then call terminate_file_ (satp, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;

     end usage_total;
