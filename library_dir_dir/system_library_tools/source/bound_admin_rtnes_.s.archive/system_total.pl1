/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

system_total:
     procedure options (variable);

/* SYSTEM_TOTAL - this program scans the system samples from "stat_seg" and puts them in "use_totals".

   stat_seg was created by the initializer process, which samples the system statistics every 15 minutes
   and saves the SST header, the TC_DATA header, and several other magic numbers, such as the configuration.
   These meters are kept in "stat_seg" and copied by "copy_as_meters" once a day.
   This program is then run to extract figures of lasting interest and to record them in "use_totals"
   for use by various reporting programs.

   THVV */
/* modified 4/77 to use hardcore defs THVV */
/* Modified 1984-08-31 BIM for v2 use_totals */

dcl	dn		char (168),
	en		char (32),
	statp		ptr,
	(tcmp, tcdp)	ptr,
	tot_dir		char (168),
	tot_ename		char (32),
	meter_time	float bin,
	cpu_time		float bin,
	time		float bin,
	upt		fixed bin (71) init (0),
	dayx		fixed bin init (0),
	(qlo, qhi)	fixed bin,
	last_dump		fixed bin (18),
	last_shutdown	bit (1) aligned,
	(fday, fqh)	fixed bin,
	(i, j, n)		fixed bin,
	ap		ptr,
	al		fixed bin (21),
	bchr		char (al) unaligned based (ap),
	double		fixed bin (71) aligned based,
	ec		fixed bin (35);
dcl	arg_count		fixed bin;

dcl	TCMidle_loc	fixed bin (18);
dcl	TCMinitialize_time_loc
			fixed bin (18);
dcl	TCMlast_time_loc	fixed bin (18);
dcl	TCMmp_idle_loc	fixed bin (18);
dcl	TCMprocessor_time_loc
			fixed bin (18);
dcl	TCMzero_idle_loc	fixed bin (18);
dcl	offset		fixed bin (18);

dcl	(mm, dd, yy, hh, min, ss, absda, wkd, shf, qtr)
			fixed bin;

dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;

dcl	datebin_		entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			fixed bin, fixed bin, fixed bin);
dcl	datebin_$revert	entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71));
dcl	ring0_get_$segptr	entry (char (*), char (*), ptr, fixed bin (35));
dcl	ring0_get_$definition
			entry (ptr, char (*), char (*), fixed bin (18), fixed bin, fixed bin (35));
dcl	disk_left_	entry (fixed bin (35), fixed bin (35));

dcl	cv_dec_check_	entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	com_err_		entry options (variable);

dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl	(addr, addrel, null, substr, divide, mod)
			builtin;

dcl	ME		char (32) init ("system_total") int static options (constant);

dcl	cleanup		condition;

%page;
%include access_mode_values;
%include terminate_file;
%include use_totals;
%include stat_seg;


	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME);
		return;
	     end;
	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, ME, "Usage: system_total METER_DATA USE_TOTALS");
		return;
	     end;

	statp, use_totals_ptr = null ();
	on cleanup call clean_up;

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "", dn, en, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid meter data pathname ^a.", bchr);
		return;
	     end;
	call initiate_file_ (dn, en, R_ACCESS, statp, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (dn, en));
		return;
	     end;

	call cu_$arg_ptr (2, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", tot_dir, tot_ename, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid use_totals pathname ^a.", bchr);
		go to ERROR;
	     end;
	call initiate_file_ (tot_dir, tot_ename, RW_ACCESS, use_totals_ptr, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (tot_dir, tot_ename));
		go to ERROR;
	     end;

	if use_totals.version ^= USE_TOTALS_VERSION_3
	then do;
		call com_err_ (error_table_$unimplemented_version, ME, "^a is not version 3.",
		     pathname_ (tot_dir, tot_ename));
		go to ERROR;
	     end;

/* Obtain a pointer to the ring 0 segment tc_data, and use its definitions */

	call ring0_get_$segptr ("", "tc_data", tcdp, ec);
	if ec ^= 0
	then call error ("tc_data");
	call ring0_get_$definition (tcdp, "", "last_time", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.last_time");
	TCMlast_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "idle", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.idle");
	TCMidle_loc = offset;
	call ring0_get_$definition (tcdp, "", "initialize_time", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.initialize_time");
	TCMinitialize_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "processor_time", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.processor_time");
	TCMprocessor_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "zero_idle", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.zero_idle");
	TCMzero_idle_loc = offset;
	call ring0_get_$definition (tcdp, "", "mp_idle", offset, (0), ec);
	if ec ^= 0
	then call error ("tcm.mp_idle");
	TCMmp_idle_loc = offset;

	n = statistics.index;
	fday = use_totals.max_day_log;
	fqh = use_totals.max_qhour;
	i = 0;
redoit:
	i = i + 1;
	if i > n
	then go to exit;
	tcmp = addr (statistics.tcdata_contents (i, 1));

	if statistics.uptime (i) < clock ()
	then do;					/* Check validity */
		if statistics.uptime (i) > use_totals.time_last_boot
		then do;
			use_totals.uptime_since_boot = 0;
			use_totals.cpu_avail_since_boot = 0;
			use_totals.idle_since_boot = 0;
			use_totals.zidle_since_boot = 0;
			use_totals.mpidle_since_boot = 0;
			if use_totals.n_users_on > 0
			then use_totals.sys_crash = use_totals.sys_crash + 1;
			use_totals.sys_starts = use_totals.sys_starts + 1;
		     end;
		use_totals.time_last_boot = statistics.uptime (i);
		use_totals.time_last_sample = statistics.time (i);
		use_totals.last_sysid = statistics.sysid (i);
	     end;
	use_totals.n_users_on = statistics.users (i);
	meter_time = addrel (tcmp, TCMlast_time_loc) -> double - addrel (tcmp, TCMinitialize_time_loc) -> double;
	use_totals.uptime = use_totals.uptime + (meter_time - use_totals.uptime_since_boot);
	use_totals.uptime_since_boot = meter_time;
	cpu_time = addrel (tcmp, TCMprocessor_time_loc) -> double;
	use_totals.cpu_avail = use_totals.cpu_avail + (cpu_time - use_totals.cpu_avail_since_boot);
	use_totals.cpu_avail_since_boot = cpu_time;
	time = addrel (tcmp, TCMidle_loc) -> double;
	use_totals.idle = use_totals.idle + (time - use_totals.idle_since_boot);
	use_totals.idle_since_boot = time;
	time = addrel (tcmp, TCMzero_idle_loc) -> double;
	use_totals.zidle = use_totals.zidle + (time - use_totals.zidle_since_boot);
	use_totals.zidle_since_boot = time;
	time = addrel (tcmp, TCMmp_idle_loc) -> double;
	use_totals.mpidle = use_totals.mpidle + (time - use_totals.mpidle_since_boot);
	use_totals.mpidle_since_boot = time;
	if statistics.time (i) < clock ()
	then do;					/* Don't die if oprs set clock wrong. */
		call datebin_ (statistics.time (i), absda, mm, dd, yy, hh, min, ss, wkd, shf);
		qtr = hh * 4 + divide (min, 15, 17, 0) + 1;
		if use_totals.origin = 0
		then do;
			call datebin_$revert (mm, dd, yy, 0, 0, 0, use_totals.origin);
			dayx = 1;
		     end;
		else do;
			qtr = divide (statistics.time (i) - use_totals.origin, 900000000, 35, 0);
			dayx = divide (qtr, 96, 35, 0) + 1;
			qtr = mod (qtr, 96) + 1;
		     end;

		if dayx > hbound (use_totals.daylog, 1)
		then do;
			call com_err_ (0, ME,
			     "Billing cycle is greater than maximum ^d. No more usage statistics can be recorded.",
			     hbound (use_totals.daylog, 1));
			go to ERROR;
		     end;

		use_totals.max_day_log = dayx;
		use_totals.max_qhour = qtr;
		use_totals.daylog (dayx).qh (qtr).time = statistics.time (i);
		use_totals.daylog (dayx).qh (qtr).sysid = statistics.sysid (i);
		use_totals.daylog (dayx).qh (qtr).cpu = statistics.ncpu (i);
		use_totals.daylog (dayx).qh (qtr).kmem = statistics.kmem (i);
		use_totals.daylog (dayx).qh (qtr).nunits = statistics.units (i);
		use_totals.daylog (dayx).qh (qtr).dump_number = cv_dec_check_ ((statistics.erfno (i)), ec);
		if ec ^= 0
		then use_totals.daylog (dayx).qh (qtr).dump_number = 0;
		use_totals.daylog (dayx).qh (qtr).starttime = statistics.uptime (i);
		use_totals.daylog (dayx).qh (qtr).crashtime = statistics.crashtime (i);
	     end;
	go to redoit;

exit:
	if fday = 0
	then fday = 1;
	if fqh = 0
	then fqh = 1;
	last_dump = 0;
	last_shutdown = "0"b;
	call check ("fday", fday, 1, hbound (use_totals.daylog, 1), 1);
	call check ("dayx", dayx, 1, hbound (use_totals.daylog, 1), hbound (use_totals.daylog, 1));
	do i = fday to dayx;
	     if i = fday
	     then qlo = fqh;
	     else qlo = 1;
	     if i = dayx
	     then qhi = qtr;
	     else qhi = 96;
	     call check ("qlo", qlo, 1, hbound (use_totals.daylog.qh, 2), 1);
	     call check ("qhi", qhi, 1, hbound (use_totals.daylog.qh, 2), hbound (use_totals.daylog.qh, 2));
	     do j = qlo to qhi;
		if use_totals.daylog (i).qh (j).time = 0
		then do;
			use_totals.daylog (i).qh (j).dump_number = last_dump;
			use_totals.daylog (i).qh (j).shutdown = last_shutdown;
		     end;
		else if use_totals.daylog (i).qh (j).nunits = 0
		then do;
			use_totals.daylog (i).qh (j).shutdown = "1"b;
			use_totals.daylog (i).qh (j).dump_number = 0;
		     end;
		else do;
			last_dump = use_totals.daylog (i).qh (j).dump_number;
			last_shutdown = use_totals.daylog (i).qh (j).shutdown;
		     end;
	     end;
	end;

/* Obtain the amount of disk available and left. */

	call disk_left_ (use_totals.disk_available, use_totals.disk_left);
ERROR:
	call clean_up;

error:
     proc (x);

dcl	x		char (*);

	call com_err_ (ec, ME, "cannot locate ^a", x);
	go to ERROR;

     end error;

check:
     proc (varn, var, lo, hi, dft);

dcl	varn		char (*);
dcl	(var, lo, hi, dft)	fixed bin;

	if var >= lo & var <= hi
	then return;
	call com_err_ (0, ME, "range err: ^a = ^d, not ^d-^d. set to ^d", varn, var, lo, hi, dft);
	var = dft;

     end check;

clean_up:
     procedure;

	if statp ^= null ()
	then call terminate_file_ (statp, (0), TERM_FILE_TERM, (0));
	if use_totals_ptr ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;

     end system_total;
