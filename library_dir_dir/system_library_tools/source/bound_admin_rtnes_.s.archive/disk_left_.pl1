/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


disk_left_: proc (avail, left);

dcl (avail, left) fixed bin (35);			/* Return arguments. */

/* DISK_LEFT_ - This program is called by system_total to find out the current disk occupancy.

   Method stolen from the device_meters command written by NIM.

   THVV 
   Modified March, 1982, J. Bongiovanni, for new PVTE and considerable clean-up
*/

dcl  j fixed bin;					/* Counter. */
dcl  ec fixed bin (35);				/* error code from ring0_get_ */
dcl  pvt_size fixed bin (19);
dcl  pvt_lth fixed bin;

dcl  MYNAME char (10) int static options (constant) init ("disk_left_");

dcl  com_err_ entry options (variable);
dcl  get_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  release_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl  ring_zero_peek_$get_max_length entry (char(*), fixed bin(19), fixed bin(35));
dcl  ring_zero_peek_$by_name entry (char(*), fixed bin(18), ptr, fixed bin(19), fixed bin(35));


dcl (addr, addrel, baseno, bin, null, size) builtin;

dcl  cleanup condition;
	  

/* ======================================================= */

	avail, left = 0;				/* Clear arguments. */

	pvtp = null ();
	on cleanup call clean_out;
	
	call get_temp_segment_ (MYNAME, pvtp, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, MYNAME, "Getting temp segment.");
	     return;
	end;
	
	call ring_zero_peek_$get_max_length ("pvt", pvt_size, ec);
	if ec ^= 0 then do;
CANNOT_GET_PVT:
	     call com_err_ (ec, MYNAME, "pvt");
	     return;
	end;
	call ring_zero_peek_$by_name ("pvt", 0, pvtp, pvt_size, ec);
	if ec ^= 0 then goto CANNOT_GET_PVT;
	
	pvt_arrayp = addr (pvt.array);
	do j = 1 to pvt.n_entries;
	     pvtep = addr (pvt_array (j));
	     if pvte.used then do;
		left = left + pvte.nleft;	/* Obtain records left. */
		avail = avail + pvte.totrec;
						/* Close enough for now.. shd use true value someday */
	     end;
	end;

	call clean_out;
	return;
	
clean_out:
	proc;
	
	if pvtp ^= null ()
	     then call release_temp_segment_ (MYNAME, pvtp, ec);
	pvtp = null ();
	
end clean_out;


%page; %include pvt;
%page; %include pvte;
       

     end disk_left_;
