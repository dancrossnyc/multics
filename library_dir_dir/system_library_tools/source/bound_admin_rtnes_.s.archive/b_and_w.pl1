/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

b_and_w:
     procedure options (variable);

/* produce "black and white" chart */

/* Modified 1984-08-31 BIM for v3 usage totals */

dcl	dn		char (168),
	en		char (32),
	(l1, l2)		char (120),
	xx		char (1),
	datstr		char (16),
	datstr1		char (16),
	fmts		char (4) init ("from"),
	c4		char (4),
	(i, j, k, l, m, n)	fixed bin,
	time2		fixed bin (71),
	ap		ptr,
	al		fixed bin (21),
	an		fixed bin init (2),
	bchr		char (al) unaligned based (ap),
	ec		fixed bin (35),
	xtotp		ptr;

dcl	(absda, mm, dd, yy, hh, mmm, ss, wkd, xwkd, xmm, xdd, xyy, shf)
			fixed bin;

declare	arg_count		fixed bin;

dcl	(addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs)
			builtin;

dcl	datebin_$revert	entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71));
dcl	datebin_		entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			fixed bin, fixed bin, fixed bin);
dcl	system_info_$titles entry options (variable);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	date_time_	entry (fixed bin (71), char (*));
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	com_err_		entry options (variable);

dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl	error_table_$badopt fixed bin (35) ext;
dcl	error_table_$unimplemented_version
			fixed bin (35) ext;

dcl	linex		char (130) int static init ((130)"-");
dcl	format		char (44) int static init ("|^4a|^16a|^16a|^16a|^16a|^16a|^16a|^16a|^4a|");
dcl	head		char (132) int static
			init (
			" Time Sunday^10x Monday^10x Tuesday^9x Wednesday^7x Thursday^8x Friday^10x Saturday^8x Time"
			);

declare	cleanup		condition;
declare	ME		char (32) init ("b_and_w") int static options (constant);

%page;
%include access_mode_values;
%include terminate_file;
%include use_totals;


	use_totals_ptr = null ();
	on cleanup call clean_up;
	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME);
		return;
	     end;
	if arg_count = 0
	then do;
		call com_err_$suppress_name (0, ME, "Usage: b_and_w USE_TOTALS");
		return;
	     end;
	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid use totals pathname ^a.", bchr);
		return;
	     end;
	call initiate_file_ (dn, en, R_ACCESS, use_totals_ptr, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (dn, en));
		return;
	     end;

	if use_totals.version ^= USE_TOTALS_VERSION_3
	then
UT_VERSION_ERROR:
	     do;
		call com_err_ (error_table_$unimplemented_version, ME, "^a is not version 3.", pathname_ (dn, en));
		go to ERROR;
	     end;

	call datebin_ (use_totals.time_last_sample, absda, mm, dd, yy, hh, mmm, ss, wkd, shf);
	if wkd = 7
	then wkd = 0;

	call datebin_$revert (mm, dd - wkd, yy, 0, 0, 0, time2);
	call date_time_ (time2, datstr1);
	call date_time_ (use_totals.time_last_sample, datstr);

	do an = 2 to arg_count;
	     call cu_$arg_ptr (an, ap, al, (0));
	     if bchr = "-week"
	     then do;
		     call datebin_$revert (mm, dd - wkd - 1, yy, 23, 59, 0, time2);
						/* 2359 saturday */
		     call date_time_ (time2, datstr);	/* Change title to last date. */
		     datstr1 = "last week";
		     fmts = "for";
		     wkd = wkd + 7;
		end;
	     else if index (bchr, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, ME, "^a", bchr);
		     go to ERROR;
		end;
	     else do;
		     call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
		     if ec ^= 0
		     then do;
			     call com_err_ (ec, ME, "Invalid second use totals pathname ^a", bchr);
			     go to ERROR;
			end;
		     call initiate_file_ (dn, en, R_ACCESS, xtotp, (0), ec);
		     if ec ^= 0
		     then do;
			     call com_err_ (ec, ME, "^a", pathname_ (dn, en));
			     go to ERROR;
			end;
		     call datebin_ (xtotp -> use_totals.time_last_sample, absda, xmm, xdd, xyy, hh, mmm, ss, xwkd,
			shf);
		     if xwkd = 7
		     then xwkd = 0;
		     if xtotp -> use_totals.version ^= USE_TOTALS_VERSION_3
		     then goto UT_VERSION_ERROR;
		end;
	end;

	call system_info_$titles (xx, xx, l1, l2);
	call ioa_ ("^|^-^-^a^/^/^-^-^-^a^/", l1, l2);
	call ioa_ ("^-^-Multics availability ^a ^a to ^a^/", fmts, datstr1, datstr);
	call ioa_ (head);
	call ioa_ (linex);
	do i = 0 to 95;
	     c4 = timef (i);
	     if c4 = "0800"
	     then call ioa_ (linex);
	     else if c4 = "1200"
	     then call ioa_ ("^|");
	     else if c4 = "1800"
	     then call ioa_ (linex);
	     call ioa_ (format, c4, block (i, 0), block (i, 1), block (i, 2), block (i, 3), block (i, 4), block (i, 5),
		block (i, 6), c4);
	end;
	call ioa_ (linex);

ERROR:
	call clean_up;
	return;


timef:
     proc (ii) returns (char (4));

dcl	ii		fixed bin;

dcl	t		fixed bin,
	tstr		char (4),
	ti		fixed bin;

	t = divide (ii, 4, 17, 0);
	call ioa_$rsnnl ("^2d00", tstr, ti, t);
	if substr (tstr, 1, 1) = " "
	then substr (tstr, 1, 1) = "0";
	t = mod (ii, 4);
	if t = 0
	then ;
	else if t = 1
	then tstr = "";
	else if t = 2
	then substr (tstr, 3, 2) = "30";
	else if t = 3
	then tstr = "";
	return (tstr);

     end timef;

block:
     proc (qhour, dow) returns (char (16));		/* This procedure returns the data for a particular time */

dcl	(qhour, dow)	fixed bin;		/* INPUT args: quarter-hour and day-of-week */

dcl	answer		char (16);		/* Assembly area for answer */
dcl	(ix, xix)		fixed bin,		/* Indices in this (and last) month's data */
	junk		fixed bin,
	q		fixed bin;		/* One plus quarter-hour */

	q = qhour + 1;
	ix = use_totals.max_day_log + dow - wkd;	/* Get "day number" in use_totals database. */
	if ix > use_totals.max_day_log
	then answer = "";				/* Return blanks for future */
	else if (ix = use_totals.max_day_log) & (q > use_totals.max_qhour)
	then answer = "";
	else if ix <= 1
	then do;					/* First day of month, or before? */
		xix = xtotp -> use_totals.max_day_log + dow - xwkd;
						/* YES. Use last month. */
		if xix > xtotp -> use_totals.max_day_log
		then answer = "";			/* GAP here */
		else if (xix = xtotp -> use_totals.max_day_log) & (q > xtotp -> use_totals.max_qhour)
		then go to zurk;			/* Falls in this month after all. */
		else if xix <= 0
		then answer = "";			/* Shouldn't happen. Off begin of prev month. */
		else if xtotp -> use_totals.daylog (xix).qh (q).dump_number > 0
		then answer = "    " || ltrim (char (xtotp -> use_totals.daylog (xix).qh (q).dump_number));
		else if xtotp -> use_totals.daylog (xix).qh (q).shutdown
		then answer = "    shutdown";
		else if xtotp -> use_totals.daylog (xix).qh (q).cpu = 0
		then answer = "      DOWN";
		else call ioa_$rsnnl ("^6.1f ^1d ^3d", answer, junk,
			xtotp -> use_totals.daylog (xix).qh (q).nunits / 10e0,
			xtotp -> use_totals.daylog (xix).qh (q).cpu, xtotp -> use_totals.daylog (xix).qh (q).kmem);

		return (answer);			/* Found in prev month. */
	     end;					/* .. preceding is genuine bruteforce solution. */
	else /* Must be in this month. */
zurk:
	     if use_totals.daylog (ix).qh (q).dump_number > 0
						/* See if ERF number is set, indicate crash */
	then answer = "    " || ltrim (char (use_totals.daylog (ix).qh (q).dump_number));
	else if use_totals.daylog (ix).qh (q).shutdown
	then answer = "    shutdown";
	else if use_totals.daylog (ix).qh (q).cpu = 0
	then answer = "      DOWN";
	else call ioa_$rsnnl ("^6.1f ^1d ^3d", answer, junk, use_totals.daylog (ix).qh (q).nunits / 10e0,
		use_totals.daylog (ix).qh (q).cpu, use_totals.daylog (ix).qh (q).kmem);

	return (answer);				/* puff puff */

     end block;

clean_up:
     procedure;

	if use_totals_ptr ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	if xtotp ^= null ()
	then call terminate_file_ (xtotp, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;
     end;
