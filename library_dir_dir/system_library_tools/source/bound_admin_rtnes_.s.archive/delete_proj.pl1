/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


delete_proj: proc;

/* DELETE_PROJ - Program used by user accounts to delete a project.

   THVV */

dcl  dn char (168) aligned,
     en char (32) aligned,
    (i, j, k, l, m, n) fixed bin,
     mylock bit (1) init ("0"b),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35);

dcl (new_pdt, old_pdt) char (32) aligned;

dcl  udd char (64) aligned int static init (">user_dir_dir"),
     sc1_pdt char (64) aligned int static init (">system_control_1>pdt"),
     sc1 char (64) aligned int static init (">system_control_1");
dcl  pp ptr,					/* ptr to projfile */
     qp ptr,					/* ptr to reqfile */
     satp ptr,					/* ptr to sat */
     sadp ptr,					/* ptr to sys_admin_data */
     satep ptr,					/* ptr to sat entry. */
     p ptr,					/* ptr to new table entry */
     q ptr;					/* ptr to dummy entry */

dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35)),
     set_lock_$unlock entry (bit (36) aligned, fixed bin (35)),
     error_table_$locked_by_this_process fixed bin (35) ext,
     error_table_$invalid_lock_reset fixed bin (35) ext;

dcl (addr, null, substr, index, verify, search, reverse, length, bit, fixed, divide, mod) builtin;

dcl  clock_ entry () returns (fixed bin (71)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_wdir_ entry () returns (char (168) aligned),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     com_err_ entry options (variable);


dcl  hcs_$chname_file entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));


%include user_attributes;
%include sys_admin_data;
%include projfile;
%include reqfile;
%include sat;

dcl 1 Nsate aligned like project;

/* ======================================================== */

	dn = get_wdir_ ();
	en = "sys_admin_data";
	call hcs_$initiate (dn, en, "", 0, 1, sadp, ec);
	if sadp = null then go to er;
	call set_lock_$lock (sys_admin_data.lock, 60, ec);
	if ec ^= 0 then
	     if ec = error_table_$locked_by_this_process then mylock = "1"b;
	     else if ec ^= error_table_$invalid_lock_reset then do;
		call com_err_ (ec, "delete_proj", "Sys_admin_data is locked by ^a", sys_admin_data.locker);
		go to exit1;
	     end;

	en = "smf.cur.sat";
	call hcs_$initiate (dn, en, "", 0, 1, satp, ec);
	if satp = null then do;
er:	     call com_err_ (ec, "delete_proj", en);
	     go to abend;
	end;
	en = "projfile";
	call hcs_$initiate (dn, en, "", 0, 1, pp, ec);
	if pp = null then go to er;
	en = "reqfile";
	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);
	if qp = null then go to er;

	en = "";
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to er;
	Nsate.project_id = bchr;

	do i = 1 to sat.current_size;
	     satep = addr (sat.project (i));
	     if Nsate.project_id = project.project_id then
		if project.state = 1 then do;
		     project.state = 2;		/* Flag proj as deleted. */
		     go to check_req;
		end;
		else if project.state = 2 then do;
		     call com_err_ (0, "delete_proj", "Project ""^a"" has already been deleted.",
			Nsate.project_id);
		     go to abend;
		end;
	end;
	call com_err_ (0, "delete_proj", "Project ""^a"" not found in SAT", Nsate.project_id);
	go to abend;

check_req: do i = 1 to reqfile.nacts while (Nsate.project_id ^= reqfile.acctid (i)); end;
	if i <= reqfile.nacts then
	     if reqfile.qdf (i) ^= 0 then do;
		call com_err_ (0, "delete_proj", "Project ""^a"" is deleted from reqfile.", Nsate.project_id);
		go to abend;
	     end;
	     else reqfile.qdf (i) = clock_ ();		/* Delete him */
	else do;
	     call com_err_ (0, "delete_proj", "Project ""^a"" not found in reqfile.",
		Nsate.project_id);
	     go to abend;
	end;

	do i = 1 to projfile.nproj while (Nsate.project_id ^= projfile.id (i)); end;
	if i <= projfile.nproj then
	     if projfile.off (i) ^= 0 then do;
		call com_err_ (0, "delete_proj", "Project ""^a"" is deleted from projfile.", Nsate.project_id);
		go to abend;
	     end;
	     else projfile.off (i) = clock_ ();
	else do;
	     call com_err_ (0, "delete_proj", "Project ""^a"" not found in projfile.",
		Nsate.project_id);
	     go to abend;
	end;

	call ioa_$rsnnl ("^a.pdt", old_pdt, i, Nsate.project_id);
	call ioa_$rsnnl ("delete.^a.pdt", new_pdt, i, Nsate.project_id);
	call hcs_$chname_file (sc1_pdt, old_pdt, "", new_pdt, ec);
	if ec ^= 0 then call com_err_ (ec, "delete_proj", "Cannot add name ^a to ^a>^a",
	     new_pdt, sc1_pdt, old_pdt);

/* Could delete project dir here.. Might interfere with installation policy tho. */
/* Note that we cannot necessarily remove project admins. */
/* ..aha: we can if they have a project ID of this project. */
/* .. do that later */

/* Terminate all segments. */

abend:	call hcs_$terminate_noname (pp, ec);
	call hcs_$terminate_noname (qp, ec);
	call hcs_$terminate_noname (satp, ec);
exit1:	if ^mylock then call set_lock_$unlock (sys_admin_data.lock, ec);
	call hcs_$terminate_noname (sadp, ec);
	return;

/* -------------------------------------------------------- */

test:	entry (asc1, audd);
dcl (asc1, audd) char (*);

	sc1 = asc1;
	udd = audd;
	call ioa_ ("udd = ^a^/sc1 = ^a", udd, sc1);
	call ioa_$rsnnl ("^a>pdt", sc1_pdt, j, sc1);
	return;

     end;
