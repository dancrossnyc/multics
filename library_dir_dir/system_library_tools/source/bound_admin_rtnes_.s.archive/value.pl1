/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


value: proc;

dcl  en char (32) aligned int static,
     dn char (168) aligned int static,
     segptr ptr int static init (null),
     ap ptr, al fixed bin, bchr char (al) unal based (ap),
     answer char (32) varying,
     bvcs char (al) varying based (ap),
     ec fixed bin,
     i fixed bin,
     string char (168) aligned;

dcl (null, substr, addr, min) builtin;

dcl  com_err_ entry options (variable),
     adjust_bit_count_ entry (char (*) aligned, char (*) aligned, bit (1), fixed bin (24), fixed bin (17)),
     get_wdir_ entry () returns (char (168) aligned),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     active_fnc_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$af_arg_count entry (fixed bin, fixed bin),
     cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin),
     error_table_$wrong_no_of_args fixed bin ext,
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (5), ptr, fixed bin),
     ioa_ entry options (variable);

dcl 1 valueseg based (segptr) aligned,
    2 laste fixed bin,
    2 freep fixed bin,
    2 pad (6) fixed bin,
    2 arry (14506),
      3 name char (32),
      3 valu char (32),
      3 lth fixed bin,
      3 chain fixed bin;

/* ========================================= */

	if segptr = null then do;

	     dn = get_wdir_ ();
	     en = "value_seg";
	     call hcs_$initiate (dn, en, "", 0, 1, segptr, ec);
	     if segptr = null then do;
aer:		call active_fnc_err_ (ec, "value", "^a>^a", dn, en);
		return;
	     end;
	end;

	call cu_$af_arg_count (i, ec);
	if ec ^= 0 then go to aer;
	if i ^= 1 then do;
	     ec = error_table_$wrong_no_of_args;
	     go to aer;
	end;
	call cu_$af_arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to aer;

	do i = 1 to laste;
	     if chain (i) = 0 then if name (i) ^= "" then
		     if bchr = name (i) then go to found;
	end;
	answer = "undefined!";
	go to give;

found:	answer = substr (valu (i), 1, lth (i));
give:	call cu_$af_return_arg (i, ap, al, ec);
	if ec ^= 0 then go to aer;
	bvcs = answer;
	return;

/* ---------------------------------- */

set:	entry;

	if segptr = null then do;
	     dn = get_wdir_ ();
	     en = "value_seg";
	     call hcs_$initiate (dn, en, "", 0, 1, segptr, ec);
	     if segptr = null then do;
er:		call com_err_ (ec, "value", "^a>^a", dn, en);
		return;
	     end;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to er;
	string = bchr;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then do;
	     do i = 1 to laste;
		if string = name (i) then do;
		     chain (i) = freep;
		     freep = i;
		     name (i) = "";
		end;
	     end;
	     return;
	end;

	do i = 1 to laste;
	     if chain (i) = 0 then if name (i) ^= "" then
		     if name (i) = string then do;
			go to f1;
		     end;
	end;
	if freep = 0 then i, laste = laste + 1;
	else do;
	     i = freep;
	     freep = chain (i);
	end;
	name (i) = string;
f1:	valu (i) = bchr;
	chain (i) = 0;
	lth (i) = min (al, 32);

	call adjust_bit_count_ (dn, en, "0"b, (0), ec);

	return;

/* ----------------------------------- */

set_seg:	entry;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to er;
	string = bchr;
	call expand_path_ (addr (string), al, addr (dn), addr (en), ec);
	if ec ^= 0 then go to er;
	call hcs_$initiate (dn, en, "", 0, 1, segptr, ec);
	if segptr = null then do;
	     call hcs_$make_seg (dn, en, "", 1011b, segptr, ec);
	     if segptr = null then go to er;
	     call ioa_ ("value: Creating ^a>^a", dn, en);
	end;
	return;

/* ------------------------------------------ */

dump:	entry;

	if segptr = null then do;
	     dn = get_wdir_ ();
	     en = "value_seg";
	     call hcs_$initiate (dn, en, "", 0, 1, segptr, ec);
	     if segptr = null then go to er;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	do i = 1 to laste;
	     if name (i) = "" then go to nop;
	     if chain (i) = 0 then do;
		if ec = 0 then if name (i) ^= bchr then go to nop;
		call ioa_ ("^-^a^-^a", name (i), substr (valu (i), 1, lth (i)));
	     end;
nop:	end;
	call ioa_ ("");

     end;
