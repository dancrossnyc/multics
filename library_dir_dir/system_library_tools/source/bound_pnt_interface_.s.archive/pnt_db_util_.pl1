/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/* PNT_DB_UTIL_: This program supports the database interfaces to PNTs.
   It assumes its caller is in the inner ring and trusts the PNT ptr
   (not really a pointer to the PNT, but to the descriptor for the PNT).
   It does no parameter copying or validation level manipulations (this
   is the responsibility of pnt_db_interface_.  It makes no assumptions
   about THE PNT (>sc1>PNT.pnt) and accepts pathnames to open and close
   the PNT and PNT ptrs to perform other manipulations on PNTs. */

pnt_db_util_:
     procedure ();

	return;

/* Written 1984-08-09 by E. Swenson
   Modification history:
   1985-01-25 by E. Swenson to add auditing of PNT changes.
*/

/* Parameters */

	dcl     P_audit_flag	 bit (1) aligned parameter;
						/* whether to audit or not */
	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_pnt_info_ptr	 ptr parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_num_entries	 fixed bin (35) parameter;
	dcl     P_password		 char (*) parameter;
	dcl     P_person_id		 char (*) parameter;
	dcl     P_pnt_entry_ptr	 ptr parameter;
	dcl     P_pnt_ptr		 ptr parameter;
	dcl     P_record_no		 fixed bin (35) parameter;
	dcl     P_set_password	 bit (1) aligned parameter;
	dcl     P_set_network_password bit (1) aligned parameter;
	dcl     P_short_password	 bit (1) aligned parameter;

/* Automatic */

	dcl     audit_flag		 bit (1) aligned;	/* whether to audit or not */
	dcl     brief_description	 char (256) varying;/* brief description of modifications */
	dcl     code		 fixed bin (35);
	dcl     1 event_flags	 aligned like audit_event_flags automatic;
	dcl     key		 char (32);	/* Key used by ms_table_mgr_ for hashing */
	dcl     notify_as		 bit (1) aligned;	/* whether to notify A.S. of PNT change */
	dcl     operation_code	 bit (36) aligned;	/* access_operations_ code */
	dcl     1 PAR		 aligned like pnt_audit_record automatic;
	dcl     pnt_entry_ptr	 ptr;		/* Copy of caller-supplied pnt entry ptr */
	dcl     pnt_ptr		 ptr;		/* Copy of caller supplied pnt tag. */
	dcl     tcode		 fixed bin (35);	/* Temporary status code for alias processing */

	dcl     1 local_pnt_entry	 aligned like pnt_entry automatic;

/* Based */

	dcl     1 new_pnt_entry	 aligned like pnt_entry based (pnt_entry_ptr);

/* External Entries */

	dcl     access_audit_r1_$check_general
				 entry (bit (36) aligned, bit (36) aligned) returns (bit (1) aligned);
	dcl     access_audit_r1_$log_general
				 entry options (variable);
	dcl     hcs_$level_get	 entry (fixed bin (3));
	dcl     ms_table_mgr_$abs_entry
				 entry (ptr, fixed bin (35), char (*), bit (1) aligned, ptr, fixed bin (35),
				 fixed bin (35));
	dcl     ms_table_mgr_$close	 entry (ptr, fixed bin (35));
	dcl     ms_table_mgr_$delete_entry
				 entry (ptr, char (*), fixed bin (35));
	dcl     ms_table_mgr_$delete_entry_ignore_mylock
				 entry (ptr, char (*), fixed bin (35));
	dcl     ms_table_mgr_$find_entry
				 entry (ptr, char (*), ptr, bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     ms_table_mgr_$get_change_clock
				 entry (ptr, fixed bin (35), fixed bin (35));
	dcl     ms_table_mgr_$new_entry
				 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     ms_table_mgr_$new_entry_ignore_mylock
				 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     ms_table_mgr_$open	 entry (char (*), char (*), char (*) aligned, ptr, ptr, fixed bin (35));
	dcl     ms_table_mgr_$table_data
				 entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));
	dcl     ms_table_mgr_$unlock	 entry (ptr, fixed bin (35));
	dcl     ms_table_mgr_$update_entry
				 entry (ptr, ptr, fixed bin (35));
	dcl     ms_table_mgr_$update_entry_dont_unlock
				 entry (ptr, ptr, fixed bin (35));
	dcl     pnt_notify_as_	 entry (char (*), fixed bin (35));

/* External Static */

	dcl     access_operations_$pnt_entry_add
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_admin_read
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_delete
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_login_read
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_modify
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_network_read
				 bit (36) aligned external;
	dcl     access_operations_$pnt_entry_priv_read
				 bit (36) aligned external;
	dcl     error_table_$bad_arg	 fixed bin (35) external static;
	dcl     error_table_$bad_password
				 fixed bin (35) external static;
	dcl     error_table_$checksum_failure
				 fixed bin (35) external static;
	dcl     error_table_$no_record fixed bin (35) external static;
	dcl     error_table_$unimplemented_version
				 fixed bin (35) external static;

/* Constant */

	dcl     ME		 char (32) initial ("pnt_db_util_") internal static options (constant);

	dcl     RING_1		 fixed bin (3) initial (1) internal static options (constant);

	dcl     (
	        ADD		 initial (1),
	        DELETE		 initial (2),
	        MODIFY		 initial (3),
	        ADMIN_READ		 initial (4),
	        PRIV_READ		 initial (5),
	        NETWORK_READ	 initial (6),
	        LOGIN_READ		 initial (7)
	        )			 fixed bin (17) internal static options (constant);

/* Builtin */

	dcl     addr		 builtin;
	dcl     null		 builtin;
	dcl     size		 builtin;
	dcl     string		 builtin;
	dcl     substr		 builtin;
	dcl     unspec		 builtin;
%page;
/* Program */
/* * * * * * * * * * OPEN * * * * * * * * * * * * * */
open:
     entry (P_dirname, P_entryname, P_audit_flag, P_pnt_ptr, P_code);

/**** This entry opens the specified PNT.  At present, we do no 
      auditing for PNT opens and closes and rely on the actual
      retrieve/updtate entries for auditing.  The audit flag for this
      entry is ignored, but available for future use.
****/

	audit_flag = P_audit_flag;
	P_code = 0;
	call ms_table_mgr_$open (P_dirname, P_entryname, "PNT", P_pnt_ptr, (null ()), code);
	goto RETURN_TO_CALLER;
%page;
/* * * * * * * * * * CLOSE * * * * * * * * * */
close:
     entry (P_pnt_ptr, P_audit_flag, P_code);

/**** This entry closes the specified PNT.  At present we do no auditing
      of PNT opens and closes, but rely on the retrieve/update entries to
      perform auditing.  The ignored audit_flag is for possible future use
      if required. */

	audit_flag = P_audit_flag;
	P_code = 0;
	call ms_table_mgr_$close (P_pnt_ptr, code);
	goto RETURN_TO_CALLER;
%page;
/* * * * * * * * * * GET_ABS_ENTRY * * * * * * * * * */

/**** This entrypoint returns an arbitrary entry in the PNT,
      identified by record number. It does not return passwords.
      On a checksum failure, it returns the error code, since
      none of the data is very trustworthy.
      */

get_abs_entry:
     entry (P_pnt_ptr, P_audit_flag, P_record_no, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call get_local_entry (P_record_no, key, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/**** Don't return alias entries */

	if local_pnt_entry.user_id ^= key
	then do;					/* alias */
		code = error_table_$no_record;
		goto RETURN_TO_CALLER;
	     end;

	local_pnt_entry.password, local_pnt_entry.network_password = "";
	local_pnt_entry.short_pw, local_pnt_entry.short_network_pw = "0"b;
	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (ADMIN_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * PRIV_GET_ABS_ENTRY * * * * * * * * */

/**** This entrypoint returns an arbitrary entry, including passwords.
      It treats checksum failures like get_abs_entry. */

priv_get_abs_entry:
     entry (P_pnt_ptr, P_audit_flag, P_record_no, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call get_local_entry (P_record_no, key, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/**** Don't return alias entries */

	if local_pnt_entry.user_id ^= key
	then do;					/* alias */
		code = error_table_$no_record;
		goto RETURN_TO_CALLER;
	     end;

	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (PRIV_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * ADMIN_GET_ENTRY * * * * * * * * * */

/**** This entrypoint takes a user name and returns the entry.
      It will return data in spite of a checksum failure,
      but it returns the error code as well. It returns
      no passwords. If the checksum is on the alias, though, 
      we have to give up (and return no-entry). */

admin_get_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);
	if code ^= 0 & code ^= error_table_$checksum_failure
	then go to RETURN_TO_CALLER;

	local_pnt_entry.password, local_pnt_entry.network_password = "";
	local_pnt_entry.short_pw, local_pnt_entry.short_network_pw = "0"b;

	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (ADMIN_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * LOGIN_GET_ENTRY * * * * * * * * * */

/**** This entrypoint takes a user name and a password,
and returns the entry (with passwords blanked).
The incoming password must be scrambled, to encourage early scrambling.
This entrypoint will return entry checksum errors
to the user, and NOT return the entry. 

Note that we have to return the entry even on bad password,
so that the answering service can continue to maintain all
the last bad password garbage. This should be changed. */

login_get_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_password, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);
	if code ^= 0
	then go to RETURN_TO_CALLER;			/* checksum errors and all */

/**** Note that we return the error code error_table_$bad_password if
      either there is no password for this entry, or if the password
      was incorrectly specified.  We return the entry anyway since the
      answering service must be able to update the bad password info. */

	if ^pnt_entry.flags.has_password
	then code = error_table_$bad_password;
	else if (local_pnt_entry.short_pw & (substr (P_password, 1, 8) ^= substr (local_pnt_entry.password, 1, 8)))
	     | (^local_pnt_entry.short_pw & (P_password ^= pnt_entry.password))
	then code = error_table_$bad_password;

	local_pnt_entry.password, local_pnt_entry.network_password = "";
	local_pnt_entry.short_pw, local_pnt_entry.short_network_pw = "0"b;
	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (LOGIN_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * NETWORK_GET_ENTRY * * * * * * * * * */

/**** This entry is just like the one above, save that it
      works with the network password. */

network_get_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_password, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);	/* does alias processing */
	if code ^= 0
	then go to RETURN_TO_CALLER;			/* checksum errors and all */

	if ^local_pnt_entry.flags.has_network_password
	then do;
		code = error_table_$bad_password;	/* no_password? */
		go to RETURN_TO_CALLER;
	     end;

	if (local_pnt_entry.short_network_pw
	     & (substr (P_password, 1, 8) ^= substr (local_pnt_entry.network_password, 1, 8)))
	     | (^local_pnt_entry.short_network_pw & (P_password ^= local_pnt_entry.network_password))
	then do;
		code = error_table_$bad_password;
		go to RETURN_TO_CALLER;
	     end;

	local_pnt_entry.password, local_pnt_entry.network_password = "";
	local_pnt_entry.short_pw, local_pnt_entry.short_network_pw = "0"b;
	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (NETWORK_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * PRIV_GET_ENTRY * * * * * * * * * */

/**** This entrypoint returns the entire text of the entry, including
      the passwords! */

priv_get_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);
	if code ^= 0 & code ^= error_table_$checksum_failure
	then go to RETURN_TO_CALLER;

	P_pnt_entry_ptr -> pnt_entry = local_pnt_entry;
	call AUDIT_READ (PRIV_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * GET_NETWORK_PASSWORD * * * * * * * * * */

/**** This entrypoint returns the network password (encrypted)
      for a specified user. Why do we have this? Because there
      are applications that have to transmit the network password
      out over networks. Obviously, access to this entrypoint must 
      be handed out very sparingly (though not as sparingly as 
      priv_get_entry).  This entry returns error_table_$bad_password
      if there is no network password associated with the supplied
      person_id. */

get_network_password:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_password, P_short_password, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);
	if code ^= 0
	then go to RETURN_TO_CALLER;

	if local_pnt_entry.public.flags.has_network_password
	then do;
		P_password = local_pnt_entry.network_password;
		P_short_password = local_pnt_entry.short_network_pw;
	     end;
	else do;
		P_password = "";
		P_short_password = "0"b;
		code = error_table_$bad_password;
	     end;
	call AUDIT_READ (NETWORK_READ);
	go to RETURN_TO_CALLER;
%page;
/* * * * * * * * * * UPDATE_ENTRY * * * * * * * * * */

/**** This entry replaces an entry with a new copy. All 
      data is copied, but passwords are handled specially as per
      parameters. However, the has_X_password flags overrule 
      the P_set_password parameters. */

update_entry:
     entry (P_pnt_ptr, P_audit_flag, P_pnt_entry_ptr, P_set_password, P_set_network_password, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	pnt_entry_ptr = P_pnt_entry_ptr;
	P_code = 0;
	if new_pnt_entry.version ^= PNT_ENTRY_VERSION_2
	then do;
		code = error_table_$unimplemented_version;
		go to RETURN_TO_CALLER;
	     end;

	if new_pnt_entry.alias ^= "" & new_pnt_entry.alias = new_pnt_entry.user_id
	then do;
		code = error_table_$bad_arg;
		goto RETURN_TO_CALLER;
	     end;

	call find_update_entry ((new_pnt_entry.user_id), code);
	if code = error_table_$checksum_failure
	then code = 0;

	if code ^= 0
	then go to RETURN_TO_CALLER;

	if audit_flag
	then do;
		call AUDIT_CHECK (MODIFY, audit_flag);
		if audit_flag
		then call AUDIT_SETUP (MODIFY);
		else ;
	     end;
	else ;

	notify_as = CHECK_FOR_AS_NOTIFICATION ();

	if pnt_entry.alias ^= new_pnt_entry.alias
	then do;
		if new_pnt_entry.alias ^= ""
		then do;
			call add_alias (addr (new_pnt_entry), tcode);
			if tcode ^= 0
			then do;			/* put it back */
				call replace_entry (code);
				if code = 0
				then code = tcode;
				goto RETURN_TO_CALLER;
			     end;
		     end;
		if pnt_entry.alias ^= ""
		then call delete_alias (pnt_entry.alias, (0));
	     end;

	pnt_entry.public = new_pnt_entry.public;
	if P_set_password & new_pnt_entry.has_password
	then do;
		pnt_entry.password = new_pnt_entry.password;
		pnt_entry.short_pw = new_pnt_entry.short_pw;
	     end;
	if P_set_network_password & new_pnt_entry.has_network_password
	then do;
		pnt_entry.network_password = new_pnt_entry.network_password;
		pnt_entry.short_network_pw = new_pnt_entry.short_network_pw;
	     end;
	if P_set_password & ^new_pnt_entry.has_password
	then pnt_entry.password = "";
	if P_set_network_password & ^new_pnt_entry.has_network_password
	then pnt_entry.network_password = "";

	call replace_entry (code);
	if code = 0
	then do;
		if audit_flag
		then call AUDIT (MODIFY);
		if notify_as
		then call pnt_notify_as_ ((new_pnt_entry.user_id), (0));
	     end;

	goto RETURN_TO_CALLER;
%page;
/* * * * * * * * * * ADD_ENTRY * * * * * * * * * */

/**** Adds a brand-new entry to our table. */

add_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_pnt_entry_ptr, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	local_pnt_entry = P_pnt_entry_ptr -> pnt_entry;

	if local_pnt_entry.version ^= PNT_ENTRY_VERSION_2
	then do;
		code = error_table_$unimplemented_version;
		go to RETURN_TO_CALLER;
	     end;

	call ms_table_mgr_$new_entry (P_pnt_ptr, P_person_id, pntep, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	if audit_flag
	then do;
		call AUDIT_CHECK (ADD, audit_flag);
		if audit_flag
		then call AUDIT_SETUP (ADD);
		else ;
	     end;
	else ;

	pnt_entry = local_pnt_entry;			/* the whole wazzo */
	call ms_table_mgr_$update_entry_dont_unlock (pnt_ptr, pntep, P_code);
	if P_code ^= 0
	then do;
		call ms_table_mgr_$unlock (pnt_ptr, (0));
		go to RETURN_TO_CALLER;
	     end;

	if local_pnt_entry.alias ^= ""
	then do;
		call add_alias (addr (local_pnt_entry), code);
		if code ^= 0
		then do;
			call ms_table_mgr_$delete_entry (P_pnt_ptr, (local_pnt_entry.user_id), (0));
						/* make it go away */
			goto RETURN_TO_CALLER;
		     end;
	     end;
	else call ms_table_mgr_$unlock (pnt_ptr, (0));

	if audit_flag
	then call AUDIT (ADD);

	goto RETURN_TO_CALLER;
%page;
/* * * * * * * * * * REMOVE_ENTRY * * * * * * * * * */

/**** Remove a user from the PNT */

remove_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;
	call find_local_entry (P_person_id, code);	/* no need to write-lock yet */
	if code = error_table_$checksum_failure
	then code = 0;

	if code ^= 0
	then go to RETURN_TO_CALLER;

	if audit_flag
	then do;
		call AUDIT_CHECK (DELETE, audit_flag);
		if audit_flag
		then call AUDIT_SETUP (DELETE);
		else ;
	     end;
	else ;

	if pnt_entry.alias ^= ""
	then call delete_alias (pnt_entry.alias, (0));	/* failure will log */
	call ms_table_mgr_$delete_entry (P_pnt_ptr, P_person_id, code);

	if code = 0
	then do;
		if audit_flag
		then call AUDIT (DELETE);
		call pnt_notify_as_ (P_person_id, (0));
	     end;

	goto RETURN_TO_CALLER;
%page;
table_data:
     entry (P_pnt_ptr, P_audit_flag, P_pnt_info_ptr, P_num_entries, P_code);

	audit_flag = P_audit_flag;
	call ms_table_mgr_$table_data (P_pnt_ptr, P_pnt_info_ptr, (null ()), P_num_entries, P_code);
	return;
%page;
/* * * * * * * * * * VALIDATE_ENTRY * * * * * * * * * */

/**** This entrypoint, given a user_id validates that the entry exists.
      No password checking is done.  This entrypoint is used by IMFT
      to validate the a user is registered on the system. */

validate_entry:
     entry (P_pnt_ptr, P_audit_flag, P_person_id, P_code);

	pnt_ptr = P_pnt_ptr;
	audit_flag = P_audit_flag;
	P_code = 0;

	call find_local_entry (P_person_id, code);
	if code = error_table_$checksum_failure
	then code = 0;
	go to RETURN_TO_CALLER;
%page;
/* Global return point */

RETURN_TO_CALLER:
	P_code = code;
	return;
%page;
/* Internal Procedures */

find_local_entry:
     procedure (P_name, P_code);

	declare P_name		 char (*) parameter;
	declare P_code		 fixed bin (35) parameter;
	declare name		 char (32);
	declare change_clock	 fixed bin (35);
	declare new_change_clock	 fixed bin (35);

	P_code = 0;
	name = P_name;

find_again:
	call ms_table_mgr_$find_entry (pnt_ptr, name, pntep, "0"b, change_clock, P_code);
	if pntep = null ()
	then return;

	local_pnt_entry = pnt_entry;
	call ms_table_mgr_$get_change_clock (pnt_ptr, new_change_clock, P_code);
	if P_code ^= 0
	then return;

	if change_clock ^= new_change_clock
	then go to find_again;

	if name ^= pnt_entry.user_id
	then do;					/* aliasing */
		name = pnt_entry.user_id;
		goto find_again;
	     end;

     end find_local_entry;
%page;
find_update_entry:
     procedure (P_name, P_code);

	dcl     P_name		 char (*) parameter;
	declare name		 char (32);
	declare P_code		 fixed bin (35) parameter;
	declare change_clock	 fixed bin (35);
	declare new_change_clock	 fixed bin (35);

	P_code = 0;
	name = P_name;

find_again:
	call ms_table_mgr_$find_entry (pnt_ptr, name, pntep, "0"b, change_clock, P_code);
	if pntep = null ()
	then return;

	local_pnt_entry = pnt_entry;

	call ms_table_mgr_$get_change_clock (pnt_ptr, new_change_clock, P_code);
	if P_code ^= 0
	then return;

	if change_clock ^= new_change_clock
	then go to find_again;

	if name ^= pnt_entry.user_id
	then do;					/* aliasing */
		name = pnt_entry.user_id;
		goto find_again;
	     end;

	/*** now we have the right name */
	call ms_table_mgr_$find_entry (pnt_ptr, name, pntep, "1"b, (0), P_code);
						/* so get it under the lock */
	return;
     end find_update_entry;
%page;
add_alias:
     procedure (P_entry_ptr, P_code);

	dcl     P_entry_ptr		 ptr parameter;
	dcl     P_code		 fixed bin (35) parameter;

	dcl     pep		 pointer;

	call ms_table_mgr_$new_entry_ignore_mylock (pnt_ptr, (P_entry_ptr -> pnt_entry.alias), pep, P_code);
	if P_code ^= 0
	then return;

	pep -> pnt_entry = P_entry_ptr -> pnt_entry;
	call ms_table_mgr_$update_entry (pnt_ptr, pep, P_code);
	return;
     end add_alias;
%page;
delete_alias:
     procedure (P_alias, P_code);

	dcl     P_alias		 char (8) aligned parameter;
	dcl     P_code		 fixed bin (35) parameter;

	call ms_table_mgr_$delete_entry_ignore_mylock (pnt_ptr, (P_alias), P_code);
     end delete_alias;
%page;
replace_entry:
     procedure (P_code);

	declare P_code		 fixed bin (35);

	call ms_table_mgr_$update_entry (pnt_ptr, pntep, P_code);
	if P_code ^= 0
	then call ms_table_mgr_$unlock (pnt_ptr, (0));
	return;
     end replace_entry;
%page;
get_local_entry:
     procedure (P_record, P_name, P_code);

	dcl     P_record		 fixed bin (35) parameter;
	dcl     P_name		 char (*) parameter;
	dcl     P_code		 fixed bin (35) parameter;

	dcl     (change_clock, new_change_clock)
				 fixed bin (35);

get_again:
	call ms_table_mgr_$abs_entry (pnt_ptr, P_record, P_name, "0"b, pntep, change_clock, P_code);
	if P_code ^= 0 & P_code ^= error_table_$checksum_failure
	then return;

	local_pnt_entry = pnt_entry;
	call ms_table_mgr_$get_change_clock (pnt_ptr, new_change_clock, P_code);
	if P_code ^= 0
	then return;

	if change_clock ^= new_change_clock
	then go to get_again;

	return;
     end get_local_entry;
%page;
AUDIT_CHECK:
     procedure (P_operation, P_audit_flag);

/**** This entry decides whether we are to audit at all.  It calls
      access_audit_r1_ to make this decision, based on the operation */

	dcl     P_operation		 fixed bin (17) parameter;
						/* kind of operation */
	dcl     P_audit_flag	 bit (1) aligned parameter;
						/* whether to audit */
	dcl     validation_level	 fixed bin (3) automatic;
						/* user's level */

	call hcs_$level_get (validation_level);
	if validation_level ^= RING_1
	then do;
		P_audit_flag = "0"b;		/* turn auditing off */
		return;				/* can't call access_audit_r1_ except in ring 1 */
	     end;

	operation_code = ""b;			/* initialize, so we can check later */

	if P_operation = ADD
	then operation_code = access_operations_$pnt_entry_add;
	else if P_operation = DELETE
	then operation_code = access_operations_$pnt_entry_delete;
	else if P_operation = MODIFY
	then operation_code = access_operations_$pnt_entry_modify;
	else if P_operation = ADMIN_READ
	then operation_code = access_operations_$pnt_entry_admin_read;
	else if P_operation = PRIV_READ
	then operation_code = access_operations_$pnt_entry_priv_read;
	else if P_operation = NETWORK_READ
	then operation_code = access_operations_$pnt_entry_network_read;
	else if P_operation = LOGIN_READ
	then operation_code = access_operations_$pnt_entry_login_read;

	if operation_code ^= ""b			/* have we set it? */
	then do;

		unspec (event_flags) = ""b;
		event_flags.grant = "1"b;
		event_flags.admin_op = "1"b;

		P_audit_flag = access_audit_r1_$check_general (unspec (event_flags), operation_code);
	     end;
	else P_audit_flag = "0"b;			/* no auditing */
	return;
     end AUDIT_CHECK;
%page;
AUDIT_SETUP:
     procedure (P_operation);

	dcl     P_operation		 fixed bin (17) parameter;
						/* what kind of operation */

	PAR.type = AAB_pnt_entry;
	PAR.version = PNT_AUDIT_RECORD_VERSION_1;
	PAR.pad1 = ""b;
	string (PAR.flags) = ""b;

	if P_operation = ADD
	then do;
		PAR.flags.add = "1"b;
		PAR.user_id = P_person_id;
		call FILL_PNT_AUDIT_ENTRY (addr (PAR.pnt_entry_1), addr (local_pnt_entry));
	     end;
	else if P_operation = DELETE
	then do;
		PAR.flags.delete = "1"b;
		PAR.user_id = pnt_entry.user_id;
		call FILL_PNT_AUDIT_ENTRY (addr (PAR.pnt_entry_1), addr (local_pnt_entry));
	     end;
	else if P_operation = MODIFY
	then do;
		PAR.flags.modify = "1"b;
		PAR.user_id = new_pnt_entry.user_id;
		call FILL_PNT_AUDIT_ENTRY (addr (PAR.pnt_entry_1), addr (local_pnt_entry));
		call FILL_PNT_AUDIT_ENTRY (addr (PAR.pnt_entry_2), addr (new_pnt_entry));
		if (pnt_entry.password ^= new_pnt_entry.password) & P_set_password
		then PAR.flags.password_changed = "1"b;
		if (pnt_entry.network_password ^= new_pnt_entry.network_password) & P_set_network_password
		then PAR.flags.network_password_changed = "1"b;
		call SETUP_BRIEF_DESCRIPTION ();

	     end;
	else audit_flag = "0"b;			/* can't audit if we don't know op */

	return;
     end AUDIT_SETUP;
%page;
FILL_PNT_AUDIT_ENTRY:
     procedure (P_paep, P_pntep);

/**** This procedure fills in the security-relevant information into the
      audit record from the specified pnt entry. */

	dcl     P_paep		 ptr parameter;	/* pointer to audit record pnt info */
	dcl     P_pntep		 ptr parameter;	/* pointer to PNT entry */

	P_paep -> pnt_audit_entry.flags = P_pntep -> pnt_entry.public.flags;
	P_paep -> pnt_audit_entry.alias = P_pntep -> pnt_entry.alias;
	P_paep -> pnt_audit_entry.authorization_range = P_pntep -> pnt_entry.person_authorization;
	P_paep -> pnt_audit_entry.password_timelock = P_pntep -> pnt_entry.password_timelock;
	P_paep -> pnt_audit_entry.audit_flags = P_pntep -> pnt_entry.audit;
	return;
     end FILL_PNT_AUDIT_ENTRY;
%page;
AUDIT:
     procedure (P_operation);

	dcl     P_operation		 fixed bin (17) parameter;
						/* type of operation */
	dcl     object_name		 char (50) automatic;
						/* name of object for access_audit_ */
	dcl     binary_info_size	 fixed bin (21) automatic;
						/* size of binary info */

	object_name = "PNT entry " || PAR.user_id;
	if P_operation = ADD | P_operation = DELETE
	then binary_info_size = size (PAR) - size (pnt_audit_entry) - 1;
	else binary_info_size = size (PAR);

	call access_audit_r1_$log_general (ME, RING_1, unspec (event_flags), operation_code, object_name, 0, addr (PAR),
	     binary_info_size, "^[Changed:^a^]", (P_operation = MODIFY), brief_description);

	return;
     end AUDIT;
%page;
CHECK_FOR_AS_NOTIFICATION:
     procedure () returns (bit (1) aligned);

/**** This internal procedure is used to check to see if the A.S. needs
      to be nofified of this PNT change.  For modifications of PNT entries,
      we notify the A.S. if the authorization range is made more restrictive
      of if the "lock" flags is set in a PNT entry.  For deletes of PNT
      entries, we always notify the answering service. */

	if ^local_pnt_entry.flags.lock & new_pnt_entry.flags.lock
	then return ("1"b);
	else if new_pnt_entry.person_authorization (2) < local_pnt_entry.person_authorization (2)
	then return ("1"b);
	else if new_pnt_entry.person_authorization (1) > local_pnt_entry.person_authorization (1)
	then return ("1"b);
	else ;
	return ("0"b);				/* no need to notify the answering service */

     end CHECK_FOR_AS_NOTIFICATION;
%page;
SETUP_BRIEF_DESCRIPTION:
     procedure ();

/**** This procedure is used to set up the additional information in the text 
      portion of a PNT audit record for PNT entry modifications.  This is
      a human readable summary of the changes to the PNT entry. */

	brief_description = "";
	if PAR.flags.password_changed
	then call ADD_STRING ("password");
	if PAR.flags.network_password_changed
	then call ADD_STRING ("network password");
	if unspec (PAR.pnt_entry_1.flags) ^= unspec (PAR.pnt_entry_2.flags)
	then call ADD_STRING ("flags");
	if PAR.pnt_entry_1.alias ^= PAR.pnt_entry_2.alias
	then call ADD_STRING ("alias");
	if PAR.pnt_entry_1.authorization_range (1) ^= PAR.pnt_entry_2.authorization_range (1)
	then call ADD_STRING ("min auth");
	if PAR.pnt_entry_1.authorization_range (2) ^= PAR.pnt_entry_2.authorization_range (2)
	then call ADD_STRING ("max auth");
	if PAR.pnt_entry_1.audit_flags ^= PAR.pnt_entry_2.audit_flags
	then call ADD_STRING ("audit flags");
	if PAR.pnt_entry_1.password_timelock ^= PAR.pnt_entry_2.password_timelock
	then call ADD_STRING ("password timelock");
	if brief_description = ""
	then brief_description = "nothing";
	return;


ADD_STRING:
     procedure (P_str_to_add);

	dcl     P_str_to_add	 char (*) parameter;/* an item that changed */

	if brief_description = ""
	then brief_description = P_str_to_add;
	else brief_description = brief_description || "," || P_str_to_add;

	return;
     end ADD_STRING;
     end SETUP_BRIEF_DESCRIPTION;			/* format: off */
%page;
AUDIT_READ:
     procedure (P_operation);

/**** This procedure is responsible for auditing PNT reads. */

dcl     P_operation		 fixed bin (17) parameter; /* what kind of operation */
dcl object_name char (50) automatic;

     call AUDIT_CHECK (P_operation, audit_flag);
     if audit_flag then do;
	object_name = "PNT entry " || local_pnt_entry.user_id;
	call access_audit_r1_$log_general (ME, RING_1, unspec (event_flags), operation_code, object_name, 0, null (), 0);   
	end;
     return;				      

end AUDIT_READ;
%page; %include access_audit_binary_def;
%page; %include access_audit_eventflags;
%page; %include pnt_audit_record;
%page; %include pnt_entry;
%page; %include pnt_header;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   AUDIT (pnt_db_util_): GRANTED addition of pnt entry (Admin_op) for PERSON.PROJECT.TAG (AUTH) Level=1 to PNT entry USERID (no access class).

   S:	$access_audit

   T:	$run

   M:	The user, PERSON.PROJECT.TAG, added a new PNT entry for USERID

   A:	$ignore


   Message:
   AUDIT (pnt_db_util_): GRANTED modification of pnt entry (Admin_op) for PERSON.PROJECT.TAG (AUTH) Level=1 to PNT entry USERID: CHANGES (no access class).

   S:	$access_audit

   T:	$run

   M:	The user PERSON.PROJECT.TAG modified the PNT entry for USERID. 
   CHANGES describes in brief format what security relevant changes were
   made.  See the binary information in the audit message for further
   details.
   
   A:	$ignore

   Message:
   AUDIT (pnt_db_util_): GRANTED deletion of pnt entry (Admin_op) for PERSON.PROJECT.TAG (AUTH) Level=1 to PNT entry USERID (no access class).

   S:	$access_audit

   T:	$run

   M:	The user PERSON.PROJECT.TAG deleted the PNT entry for USERID.
   
   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end pnt_db_util_;
