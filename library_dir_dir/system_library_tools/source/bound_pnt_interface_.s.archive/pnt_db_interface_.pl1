/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/* PNT_DB_INTERFACE_: This is one of two programs that are the target
   of PNT-related gates.  This program is primarily the gate-level
   interface to pnt_db_util_ which does the actual work of database
   related manipulations of PNTs.  Pnt_fs_interface_ is the gate-level
   interface to pnt_fs_util_ which does the actual work of file system
   related manipulations of the PNT.  

   This program, and pnt_fs_interface_, being the target of ring-1 gates,
   copy arguments, manipulate the validation level, and call supporting
   routines. 

   The only caller of these entrypoints through pnt_db_gate_ are
   callers of pnt_manager_ who manipulate only THE PNT (>sc1>PNT.pnt).
   Therefore, to spare them the agony and time of opening and closing
   the pnt, and maintaining and passing a pointer to it for each call,
   this program maintains a static pointer which it passes on each
   call to pnt_db_util_.  */

pnt_db_interface_:
     procedure ();

	return;					/* Not a valid entrypoint */

/* Written 1984-08-09 by E. Swenson.
   Modified 1985-01-25 by E. Swenson for auditing. 
*/

/* Parameters */

	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_num_entries	 fixed bin (35) parameter;
	dcl     P_password		 char (*) parameter;
	dcl     P_person_id		 char (*) parameter;
	dcl     P_pnt_entry_ptr	 ptr parameter;
	dcl     P_pnt_info_ptr	 ptr parameter;
	dcl     P_record_no		 fixed bin (35) parameter;
	dcl     P_set_network_password bit (1) parameter;
	dcl     P_set_password	 bit (1) parameter;
	dcl     P_short_password	 bit (1) parameter;

/* Automatic */

	dcl     code		 fixed bin (35);	/* status code */
	dcl     num_entries		 fixed bin (35);	/* for $table_data entrypoint */
	dcl     person_id		 char (32);
	dcl     password		 char (32);
	dcl     pnt_entry_ptr	 ptr;
	dcl     pnt_info_ptr	 ptr;
	dcl     record_no		 fixed bin (35);
	dcl     saved_level		 fixed bin (3);	/* saved validation level */
	dcl     set_network_password	 bit (1);
	dcl     set_password	 bit (1);
	dcl     short_password	 bit (1);

	dcl     1 pnt_entry_copy	 aligned like pnt_entry automatic;
	dcl     1 pnt_info_copy	 aligned like ms_table_info automatic;
						/* External Entries */

	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     hcs_$level_get	 entry (fixed bin (3));
	dcl     hcs_$level_set	 entry (fixed bin (3));
	dcl     pnt_db_util_$add_entry entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$admin_get_entry
				 entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$close	 entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     pnt_db_util_$get_abs_entry
				 entry (ptr, bit (1) aligned, fixed bin (35), ptr, fixed bin (35));
	dcl     pnt_db_util_$get_network_password
				 entry (ptr, bit (1) aligned, char (*), char (*), bit (1), fixed bin (35));
	dcl     pnt_db_util_$login_get_entry
				 entry (ptr, bit (1) aligned, char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$network_get_entry
				 entry (ptr, bit (1) aligned, char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$open	 entry (char (*), char (*), bit (1) aligned, ptr, fixed bin (35));
	dcl     pnt_db_util_$priv_get_abs_entry
				 entry (ptr, bit (1) aligned, fixed bin (35), ptr, fixed bin (35));
	dcl     pnt_db_util_$priv_get_entry
				 entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$remove_entry
				 entry (ptr, bit (1) aligned, char (*), fixed bin (35));
	dcl     pnt_db_util_$table_data
				 entry (ptr, bit (1) aligned, ptr, fixed bin (35), fixed bin (35));
	dcl     pnt_db_util_$update_entry
				 entry (ptr, bit (1) aligned, ptr, bit (1), bit (1), fixed bin (35));
	dcl     pnt_db_util_$validate_entry
				 entry (ptr, bit (1) aligned, char (*), fixed bin (35));


/* Static */

	dcl     initialized		 bit (1) internal static initial ("0"b);
	dcl     pnt_ptr		 ptr internal static initial (null ());

/* Constant */

	dcl     DO_AUDIT		 bit (1) aligned initial ("1"b) internal static options (constant);
	dcl     PNT_DIRNAME		 char (168) internal static options (constant) initial (">system_control_1");
	dcl     PNT_ENTRYNAME	 char (32) internal static options (constant) initial ("PNT.pnt");

/* Conditions */

	declare cleanup		 condition;
%page;
get_abs_entry:
     entry (P_record_no, P_pnt_entry_ptr, P_code);

	record_no = P_record_no;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$get_abs_entry (pnt_ptr, DO_AUDIT, record_no, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
priv_get_abs_entry:
     entry (P_record_no, P_pnt_entry_ptr, P_code);

	record_no = P_record_no;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$priv_get_abs_entry (pnt_ptr, DO_AUDIT, record_no, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
admin_get_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	person_id = P_person_id;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$admin_get_entry (pnt_ptr, DO_AUDIT, person_id, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
login_get_entry:
     entry (P_person_id, P_password, P_pnt_entry_ptr, P_code);

	person_id = P_person_id;
	password = P_password;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$login_get_entry (pnt_ptr, DO_AUDIT, person_id, password, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
network_get_entry:
     entry (P_person_id, P_password, P_pnt_entry_ptr, P_code);

	person_id = P_person_id;
	password = P_password;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$network_get_entry (pnt_ptr, DO_AUDIT, person_id, password, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
priv_get_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	person_id = P_person_id;
	pnt_entry_ptr = P_pnt_entry_ptr;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$priv_get_entry (pnt_ptr, DO_AUDIT, person_id, addr (pnt_entry_copy), code);

	pnt_entry_ptr -> pnt_entry = pnt_entry_copy;
	goto RETURN_TO_CALLER;
%page;
get_network_password:
     entry (P_person_id, P_password, P_short_password, P_code);

	person_id = P_person_id;

	password = "";
	short_password = "0"b;
	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$get_network_password (pnt_ptr, DO_AUDIT, person_id, password, short_password, code);

	P_password = password;
	P_short_password = short_password;
	goto RETURN_TO_CALLER;
%page;
update_entry:
     entry (P_pnt_entry_ptr, P_set_password, P_set_network_password, P_code);

	pnt_entry_ptr = P_pnt_entry_ptr;
	set_password = P_set_password;
	set_network_password = P_set_network_password;

	pnt_entry_copy = pnt_entry_ptr -> pnt_entry;	/* Copy whole structure */

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$update_entry (pnt_ptr, DO_AUDIT, addr (pnt_entry_copy), set_password, set_network_password,
	     code);

	goto RETURN_TO_CALLER;
%page;
add_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	person_id = P_person_id;
	pnt_entry_ptr = P_pnt_entry_ptr;		/* Copy the pointer */

	pnt_entry_copy = pnt_entry_ptr -> pnt_entry;	/* And the entire structure */

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$add_entry (pnt_ptr, DO_AUDIT, person_id, addr (pnt_entry_copy), code);

	goto RETURN_TO_CALLER;
%page;
remove_entry:
     entry (P_person_id, P_code);

	person_id = P_person_id;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$remove_entry (pnt_ptr, DO_AUDIT, person_id, code);

	goto RETURN_TO_CALLER;
%page;
table_data:
     entry (P_pnt_info_ptr, P_num_entries, P_code);

	pnt_info_ptr = P_pnt_info_ptr;
	num_entries = 0;
	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level;

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$table_data (pnt_ptr, DO_AUDIT, addr (pnt_info_copy), num_entries, code);
	pnt_info_ptr -> ms_table_info = pnt_info_copy;
	P_num_entries = num_entries;

	goto RETURN_TO_CALLER;
%page;
validate_entry:
     entry (P_person_id, P_code);

	person_id = P_person_id;

	code = 0;

	saved_level = -1;
	on condition (cleanup) call reset_level ();
	call set_level ();

	if ^initialized
	then call INITIALIZE ();

	call pnt_db_util_$validate_entry (pnt_ptr, DO_AUDIT, person_id, code);
	goto RETURN_TO_CALLER;
%page;
/* Global return point */

RETURN_TO_CALLER:
	call reset_level ();
	P_code = code;
	return;
%page;
/* Internal Procedures */
INITIALIZE:
     procedure ();

	code = 0;
	call pnt_db_util_$open (PNT_DIRNAME, PNT_ENTRYNAME, DO_AUDIT, pnt_ptr, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	initialized = "1"b;
	return;
     end INITIALIZE;
%page;
reset_level:
     procedure ();

/* This procedure resets the validation level, it it was previously
   set by calling entry. */

	if saved_level ^= -1
	then do;
		call hcs_$level_set (saved_level);
		saved_level = -1;
	     end;
	return;
     end reset_level;
%page;
set_level:
     procedure ();

/* This procedure gets the current validation level and saves it away in
   saved_level.  It then sets the validation level to the PNT level (1). */

	call hcs_$level_get (saved_level);
	call hcs_$level_set (get_ring_ ());
	return;
     end set_level;

/* format: off */
%page;%include ms_table_info;
%page;%include pnt_entry;
/* format: on */

     end pnt_db_interface_;
