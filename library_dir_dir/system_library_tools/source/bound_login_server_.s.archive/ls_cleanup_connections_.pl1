/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-08-01,Coren), approve(87-07-10,MCR7679), audit(87-03-18,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-18,GDixon), approve(87-07-10,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.
  3) change(87-05-28,GDixon), approve(87-07-10,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
      A) Remove orphan connections from active_connection_list which DSA does
         not know about.
      B) Remove orphan connections from active_connection_list which have no
         force_disconnect entry.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

ls_cleanup_connections_:
     procedure ();

/* This routine is called during login_server initialization. Its job is to
   go through the active_connection_list and find any connections whose owner
   and user (if different) are both dead (i.e., invalid process IDs), and try
   to disconnect them.
*/

/* AUTOMATIC */

dcl  code fixed bin (35);
dcl  more bit (1);
dcl  offset bit (18);
dcl  owner_process_id bit (36) aligned;
dcl  user_process_id bit (36) aligned;
dcl  orphan bit (1);
dcl  force_disconnect_name char (64);

dcl  1 current_active_connection_info aligned like active_connection_info;

dcl  1 next_active_connection_info aligned like active_connection_info;


/* ENTRIES */

dcl  com_err_ entry () options (variable);
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  hcs_$validate_processid entry (bit (36) aligned, fixed bin (35));
dcl  hpriv_connection_list_$delete_name entry (char (*) aligned, fixed bin (35));
dcl  hpriv_connection_list_$get_next entry (bit (18), ptr, fixed bin (35));

dcl  entry_to_call entry (char (*), fixed bin (35)) variable;


/* EXTERNAL STATIC */

dcl  (
     error_table_$io_no_permission,
     error_table_$noentry,
     error_table_$process_unknown
     ) fixed bin (35) external static;


/* INTERNAL STATIC */

dcl  PROG_NAME char (23) internal static options (constant) initial ("ls_cleanup_connections_");


/* BUILTINS & CONDITIONS */

dcl  (addr, null) builtin;
%page;
	next_active_connection_info.version = ACT_INFO_VERSION_1;

	more = Get_next (""b);
	do while (more);
	     offset = next_active_connection_info.offset;

	     owner_process_id = next_active_connection_info.owner_process_id;
	     call hcs_$validate_processid (owner_process_id, code);
	     if code ^= 0
	     then do;
		if code ^= error_table_$process_unknown
		then call com_err_ (code, PROG_NAME, "From hcs_$validate_processid.");

		user_process_id = next_active_connection_info.user_process_id;
		if user_process_id = ""b
		then orphan = "1"b;

		else if user_process_id = owner_process_id
		then orphan = "1"b;

		else do;
		     call hcs_$validate_processid (user_process_id, code);
		     orphan = (code ^= 0);
		     if code ^= 0 & code ^= error_table_$process_unknown
		     then call com_err_ (code, PROG_NAME, "From hcs_$validate_processid.");

		end;

		if orphan
		then current_active_connection_info = next_active_connection_info;
	     end;

	     else orphan = "0"b;

/* Have to get the next one before we process this one, because force_disconnect
   will probably result in current one's deletion */

	     more = Get_next (offset);

	     if orphan
	     then do;
		force_disconnect_name = current_active_connection_info.force_disconnect_entry;

		if force_disconnect_name ^= ""
		then do;

		     entry_to_call = cv_entry_ (force_disconnect_name, null (), code);
		     if code = 0
		     then call entry_to_call ((current_active_connection_info.connection_name), code);


		     if code ^= 0
		     then call com_err_ (code, PROG_NAME, "Force disconnecting ^a using ^a.",
			     current_active_connection_info.connection_name, force_disconnect_name);
		     if code = error_table_$io_no_permission
			& current_active_connection_info.network_service_type = "DSA"
		     then do;			/* DSA no longer recognizes session. */
			call hpriv_connection_list_$delete_name (current_active_connection_info.connection_name,
			     code);
			if code ^= 0
			then call com_err_ (code, PROG_NAME, "Deleting ^a from connection list.",
				current_active_connection_info.connection_name);
		     end;
		end;

		else do;
		     call com_err_ (0, PROG_NAME, "No force_disconnect entry for ^a.",
			current_active_connection_info.connection_name);
		     call hpriv_connection_list_$delete_name (current_active_connection_info.connection_name, code);
		     if code ^= 0
		     then call com_err_ (code, PROG_NAME, "Deleting ^a from connection list.",
			     current_active_connection_info.connection_name);
		end;
	     end;
	end;

EXIT:
	return;
%page;
Get_next:
     procedure (a_offset) returns (bit (1));

dcl  a_offset bit (18);

dcl  offset bit (18);
dcl  code fixed bin (35);

	offset = a_offset;
	call hpriv_connection_list_$get_next (offset, addr (next_active_connection_info), code);
	if code = error_table_$noentry
	then return ("0"b);

	else if code ^= 0
	then do;
	     call com_err_ (code, PROG_NAME, "Calling hpriv_connection_list_$get_next.");
	     go to EXIT;
	end;

	else return ("1"b);
     end Get_next;
%page;
%include active_connection_info;

     end ls_cleanup_connections_;
