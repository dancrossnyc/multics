/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-08-01,Coren), approve(87-06-26,MCR7679), audit(87-02-27,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-03,GDixon), approve(87-06-26,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Add a pnotice, sort declarations.
      B) Add ls_report_error_ entrypoint.
  3) change(87-05-06,GDixon), approve(87-06-26,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Avoid recursion when ls_dump_ calls us, after we have called it.
  4) change(87-05-26,GDixon), approve(87-06-26,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
      A) Add take_dump parameter to ls_report_subr_error_ to restrict the
         kinds of failures that cause dumps.
  5) change(87-06-26,GDixon), approve(87-06-26,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
      A) Don't report existence of lsdump when none was taken.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */
ls_report_subr_error_:
     procedure (a_code, a_caller_name, a_cp_info_ptr, a_subr_name,
        a_tell_user, a_take_dump);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/*							       */
/* This subroutine, and its entrypoint ls_report_internal_error_, cause      */
/* messages to be written on the parent control point's error output switch  */
/* (thereby either alerting an operator or writing in an MC log, or both).   */
/* If the "tell_user" switch is on, they also write a message on the	       */
/* connection.						       */
/*							       */
/* Since the current control point can't get at the parent's I/O switches, a */
/* wakeup is sent to a handler in the parent control point, using the	       */
/* ls_error_info structure.  In order to avoid taking the current control    */
/* point and its attendent information out from under the handler, this      */
/* procedure blocks until the handler sends a wakeup over the	       */
/* reply_event_channel to let us know that it's finished.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/* PARAMETERS */

dcl  a_code fixed bin (35) parameter;
dcl  a_caller_name char (*) parameter;
dcl  a_cp_info_ptr pointer parameter;
dcl  a_subr_name char (*) parameter;
dcl  a_tell_user bit (1) aligned parameter;
dcl  a_take_dump bit (1) aligned parameter;
dcl  a_arg_list_ptr pointer parameter;
dcl  a_ioa_ctl_str_no fixed bin parameter;
dcl  a_ioa_args_no fixed bin parameter;


/* AUTOMATIC */

dcl  arg_list_ptr pointer;
dcl  argl fixed bin (21);
dcl  argp pointer;
dcl  caller_message char (256);
dcl  caller_message_len fixed bin (21);
dcl  caller_message_val char (caller_message_len) based (addr (caller_message));
dcl  caller_name char (32);
dcl  code fixed bin (35);
dcl  dump_entryname char (32);
dcl  error_message char (256) varying;
dcl  event_message fixed bin (71);
dcl  ipc_code fixed bin (35);
dcl  long_message char (100) aligned;
dcl  subr_name char (64);
dcl  take_ls_dump bit (1) aligned;
dcl  tell_user bit (1) aligned;


/* AUTOMATIC STRUCTURES */

dcl  1 auto_event_wait_info aligned like event_wait_info;


/* BASED */

dcl  arg char (argl) based (argp);
dcl  based_bit1 bit (1) based;
dcl  based_fb35 fixed bin (35) based;
dcl  based_ptr pointer based;


/* ENTRIES */

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  get_process_id_ entry () returns (bit (36));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ls_dump_$report_error entry (char (*) var, ptr, char (32));
dcl  ls_message_$print_error entry options (variable);

/* CONSTANTS */

dcl  NL char (1) int static options (constant) init ("
");

/* BUILTINS */

dcl  (addr, length, rtrim, unspec) builtin;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ls_report_subr_error_:					       */
/*   This entrypoint reports errors in supporting subroutines called by the  */
/*   login server.  It takes a fixed number of arguments, one of which is    */
/*   the name of the subroutine which returned the error.		       */
/*							       */
/* Syntax:  call ls_report_subr_error_ (code, caller, ls_cp_info_ptr,	       */
/*	       subroutine_name, tell_user, take_dump);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	take_ls_dump = a_take_dump;
	code = a_code;
	caller_name = a_caller_name;
	ls_cp_info_ptr = a_cp_info_ptr;
	subr_name = a_subr_name;
	tell_user = a_tell_user;

	call convert_status_code_ (code, (""), long_message);
	error_message = rtrim (long_message);
	error_message = error_message || " from ";
	error_message = error_message || subr_name;
	go to REPORT_JOIN;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ls_report_internal_error_:					       */
/*   This entrypoint reports errors detected by the login server programs    */
/*   themselves.						       */
/*							       */
/* Syntax:  call ls_report_internal_error_ (code, caller, ls_cp_info_ptr,    */
/*	       tell_user, ioa_ctl_string, ioa_args...);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ls_report_internal_error_:
     entry options (variable);

	take_ls_dump = "1"b;
	call cu_$arg_ptr (1, argp, argl, (0));
	code = argp -> based_fb35;

	call cu_$arg_ptr (2, argp, argl, (0));
	caller_name = arg;

	call cu_$arg_ptr (3, argp, argl, (0));
	ls_cp_info_ptr = argp -> based_ptr;

	call cu_$arg_ptr (4, argp, argl, (0));
	tell_user = argp -> based_bit1;

	if code ^= 0
	then call convert_status_code_ (code, (""), long_message);
	else long_message = "";

	call cu_$arg_list_ptr (arg_list_ptr);
	call ioa_$general_rs (arg_list_ptr, 5, 6, caller_message, caller_message_len, "0"b, "0"b);

	error_message = rtrim (long_message);
	error_message = error_message || " ";
	error_message = error_message || caller_message_val;
	go to REPORT_JOIN;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ls_report_error_:					       */
/*   This entrypoint reports errors detected by the login server programs    */
/*   themselves, and reported via an internal procedure of the caller.       */
/*   Since the caller's internal error procedure takes a variable number of  */
/*   arguments, it passes us a pointer to its argument list so we can	       */
/*   extract the ioa_ctl_str and ioa_args from that arg list.	       */
/*							       */
/* Syntax:  call ls_report_internal_error_ (code, caller, ls_cp_info_ptr,    */
/*	       tell_user, arg_list_ptr, ioa_ctl_string_no, ioa_args_no...); */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ls_report_error_:
     entry (a_code, a_caller_name, a_cp_info_ptr, a_tell_user, a_arg_list_ptr, a_ioa_ctl_str_no, a_ioa_args_no);

	take_ls_dump = "1"b;
	code = a_code;
	caller_name = a_caller_name;
	ls_cp_info_ptr = a_cp_info_ptr;
	tell_user = a_tell_user;
	arg_list_ptr = a_arg_list_ptr;

	if code ^= 0
	then call convert_status_code_ (code, (""), long_message);
	else long_message = "";

	call ioa_$general_rs (arg_list_ptr, a_ioa_ctl_str_no, a_ioa_args_no, caller_message, caller_message_len, "0"b,
	     "0"b);

	error_message = rtrim (long_message);
	error_message = error_message || " ";
	error_message = error_message || caller_message_val;
	go to REPORT_JOIN;

REPORT_JOIN:
	if tell_user
	then call ls_message_$print_error (code, "Internal error.");

	if take_ls_dump
	then do;
	     call ls_dump_$report_error (rtrim (caller_name) || ": " || error_message, ls_cp_info_ptr, dump_entryname);
	     error_message = error_message || NL;
	     error_message = error_message || "See lsdump:  ";
	     error_message = error_message || rtrim (dump_entryname);
	end;

	ls_error_info_ptr = ls_cp_info.error_info_ptr;
	ls_error_info.caller_name = caller_name;
	ls_error_info.error_message_length = length (error_message);
	ls_error_info.error_message = error_message;

	unspec (event_message) = unspec (ls_cp_info_ptr);
	call hcs_$wakeup ((get_process_id_ ()), ls_cp_info.error_event_channel, event_message, ipc_code);

	if ipc_code = 0
	then do;					/* wait for error handler to run so as not to destroy control point out from under it */
	     event_wait_channel.channel_id (1) = ls_error_info.reply_event_channel;
	     call ipc_$block (addr (event_wait_channel), addr (auto_event_wait_info), ipc_code);
	end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

%include ls_cp_info;

%include ls_error_info;

%include event_wait_channel;

%include event_wait_info;

     end ls_report_subr_error_;
