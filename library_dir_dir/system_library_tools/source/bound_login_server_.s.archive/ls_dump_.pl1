/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-04-08,GDixon), approve(87-07-10,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
     Created from as_dump_.
  2) change(87-04-29,GDixon), approve(87-07-10,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
     Add dump_entryname parameter.
  3) change(87-05-06,GDixon), approve(87-07-10,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
     Add $report_error entrypoint to avoid calling ls_report_subr_error_ when
     it called us.
  4) change(87-05-14,GDixon), approve(87-07-10,MCR7679),
     audit(87-07-02,Parisek), install(87-08-04,MR12.1-1055):
     Ignore errors in submitting dprint of lsdump.
                                                   END HISTORY COMMENTS */

ls_dump_: proc (dumpid, a_ls_cp_info_ptr, dump_entryname);


/* PARAMETERS */

dcl	dumpid			char (*) varying parameter;
						/* caller msg    */
dcl	a_ls_cp_info_ptr		ptr;		/* connect. info */
dcl	dump_entryname		char(32);		/* ename (Out)   */
	

/* AUTOMATIC */

dcl	ABORT_LABEL		label,		/* escape route  */
	call_ls_report		bit(1),
	dir			char (168),	/* put dump here */
	doing_stack_trace		bit (1),
	code			fixed bin (35),
	iocbP			ptr,
	iqct			fixed bin,
	outname			char (32),
	quota			fixed bin(18),
	sp			ptr,
	stream			char(32),
	taccsw			fixed bin (1),
	time			fixed bin(71),
	trp			fixed bin (35),
	tup			bit (36) aligned,
	ucs_recursion		fixed bin,
	used			fixed bin;


/* INTERNAL STATIC */

dcl	ENOUGH			fixed bin int static init(64),
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1)
				     int static options(constant),
	PROC			char(8) int static options(constant) init("ls_dump_");


/* EXTERNAL STATIC */

dcl	error_table_$rqover		fixed bin(35) ext static;


/* ENTRIES */

dcl	condition_		entry (char(*), entry);
dcl	cu_$arg_list_ptr		entry returns(ptr);
dcl	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21),
				     fixed bin(35));
dcl	cu_$stack_frame_ptr		entry (ptr);
dcl	date_time_$format		entry (char(*), fixed bin(71),
				     char(*), char(*))
				     returns(char(250) var);
dcl	dprint_			entry (char(*), char(*), ptr,
				     fixed bin(35));
dcl	hcs_$quota_get		entry (char(*), fixed bin(18),
				     fixed bin(35), bit(36) aligned,
				     fixed bin, fixed bin(1),
				     fixed bin, fixed bin(35));
dcl	ioa_$ioa_switch		entry() options(variable);
dcl	iox_$attach_name		entry (char(*), ptr, char(*), ptr,
				     fixed bin(35));
dcl	iox_$close		entry (ptr, fixed bin(35));
dcl	iox_$destroy_iocb		entry (ptr, fixed bin(35));
dcl	iox_$detach_iocb		entry (ptr, fixed bin(35));
dcl	iox_$open			entry (ptr, fixed bin, bit(1) aligned,
				     fixed bin(35));
dcl       ls_report_error_		entry (fixed bin(35), char(*), ptr,
				     bit(1) aligned, ptr, fixed bin,
				     fixed bin);
dcl	pathname_			entry (char(*), char(*))
				     returns(char(168));
dcl	trace_stack_$hregs		entry (ptr, fixed bin, fixed bin,
				     char(32) aligned, fixed bin);
dcl	user_info_$homedir		entry (char(*));


/* BUILTINS and CONDITIONS */

dcl       (addr, clock, null)
				builtin;
dcl	cleanup			condition;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


	call_ls_report = TRUE;
	go to JOIN;
	
report_error:
	entry (dumpid, a_ls_cp_info_ptr, dump_entryname);
	
	call_ls_report = FALSE;
	go to JOIN;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* INITIALIZATION:						       */
/* 1) Access information describing the connection.		       */
/* 2) Establish a cleanup handler to close I/O switches if an error occurs.  */
/* 3) Establish an any_other handler to trap errors which occur while taking */
/*    the dump.  Recursive errors are fatal.			       */
/* 4) Get path of directory in which to place dumps.		       */
/* 5) Check to ensure there is enough quota in dump dir to hold another dump.*/
/* 6) Attach/open I/O switch on which dump will be written.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

JOIN:	ls_cp_info_ptr = a_ls_cp_info_ptr;
	ls_connection_desc_ptr = ls_cp_info.connection_desc_ptr;

	iocbP = null;
	on cleanup call Cleanup;

	doing_stack_trace = FALSE;
	ucs_recursion = 0;
	ABORT_LABEL = TRY_TO_CLEANUP;
	call condition_ ("any_other", Fatal_condition);	/* No recursion! */

	call user_info_$homedir (dir);

	call hcs_$quota_get (dir, quota, trp, tup, iqct, taccsw, used, code);
	call Abort (code, "Dump aborted, getting quota of dump dir^/(^a).",
	   dir);
	if quota ^= 0 then				/* Make sure there is room for the dump. */
	if (quota - used) < ENOUGH then 
	   call Abort (error_table_$rqover,
	      "Dump aborted, too little quota in dump dir^/(^a).", dir);

	time = clock();
	outname = date_time_$format ("lsdump.^yc^my^dm^Hd^MH." ||
	   ls_connection_desc.name, time, "system_zone", "system_lang");
	dump_entryname = outname;
	stream = "ls_dump_." || ls_connection_desc.name;

	call iox_$attach_name (stream, iocbP,
	   "vfile_ " || pathname_ (dir, outname) || " -extend",
	   null (), code);
	call Abort (code, "Dump aborted, could not attach lsdump^/(^a).",
	   pathname_ (dir, outname));
	call iox_$open (iocbP, Stream_output, ""b, code);
	call Abort (code, "Dump aborted, could not open lsdump^/(^a).",
	   pathname_ (dir, outname));

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* TRACE STACK:						       */
/* 1) Emit header for the dump.				       */
/* 2) Trace the stack.					       */
/* 3) Emit trailer for the dump.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	call ioa_$ioa_switch (iocbP, "^a  ^a^2/",
	   date_time_$format ("^<iso_date_time> ^da", time,
	   "system_zone", "system_lang"), dumpid);

	call cu_$stack_frame_ptr (sp);
	doing_stack_trace = TRUE;
	call trace_stack_$hregs (sp, 2, -1, (stream), 1);
	doing_stack_trace = FALSE;

	call ioa_$ioa_switch (iocbP, "^/End of dump.^/");

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* EPILOGUE:						       */
/* 1) Close/detach lsdump I/O switches.				       */
/* 2) Make recursive conditions simply cause a return.		       */
/* 3) Dprint the lsdump.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

TRY_TO_CLEANUP:
	call Cleanup();

	ABORT_LABEL = JUST_RETURN;			/* any errors from now on will return and not try to cleanup */

	dpap = addr (dprint_arg_buf);			/* Set up to print segment. */
	dprint_arg.version = 1;
	dprint_arg.copies = 1;
	dprint_arg.delete = 0;
	dprint_arg.queue = 1;
	dprint_arg.pt_pch = 1;
	dprint_arg.notify = 0;
	dprint_arg.heading = " for lsdump " || dumpid;
	dprint_arg.output_module = 1;
	dprint_arg.dest = "SysAdmin";
	call dprint_ (dir, outname, dpap, code);	/* Request IO daemon to print the dump. */
						/* Ignore dprint errors, if any. */

	if call_ls_report then
	   call Abort (-1, "^a  Dprinted lsdump^/(^a).",
	   dumpid, pathname_(dir, outname));

JUST_RETURN:
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Internal procedure to report errors in the Login_Server root      */
/*	 control point (on its message coordinator terminal and in its     */
/*	 log.						       */
/*							       */
/* Syntax:  call Abort (code, ioa_ctl_str, args);			       */
/*							       */
/* 1) Access code arg.  If 0 then return (no error, no Abort).	       */
/* 2) If code = -1, then set it to zero (no code msg) but continue	       */
/*    diagnosing an error.					       */
/* 3) Call ls_report_error_.					       */
/* 4) Go to ABORT_LABEL.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


Abort:	procedure options (variable);

dcl	ARGS_NO			fixed bin int static options(constant) init(3),
	IOA_CTL_STR_NO		fixed bin int static options(constant) init(2),
	TELL_USER			bit (1) aligned int static options(constant) init("1"b),
	codeP			ptr,
	code			fixed bin(35) based (codeP);

	call cu_$arg_ptr (1, codeP, 0, 0);
	if code = 0 then return;
	if code = -1 then code = 0;

	call ls_report_error_ (code, PROC, addr(ls_cp_info),
	   TELL_USER, cu_$arg_list_ptr(), IOA_CTL_STR_NO, ARGS_NO);

	go to ABORT_LABEL;

	end Abort;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Cleanup:	procedure;

dcl	code			fixed bin(35);

	if iocbP ^= null then do;
	   call iox_$close (iocbP, code);
	   call iox_$detach_iocb (iocbP, code);
	   call iox_$destroy_iocb (iocbP, code);
	   iocbP = null;
	   end;

	end Cleanup;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Fatal_condition:
	proc (mcptr, cname, coptr, infoptr, cont);

dcl  (mcptr, coptr, infoptr) ptr, cname char (*), cont bit (1);

	if cname = "cleanup" then return;
	if cname = "storage" then go to CONTINUE_TO_SIGNAL;
	if cname = "command_error" then go to CONTINUE_TO_SIGNAL;
	if cname = "stack" then go to CONTINUE_TO_SIGNAL;
	if cname = "finish" then go to CONTINUE_TO_SIGNAL;
	if cname = "mme2" then go to CONTINUE_TO_SIGNAL;
	if cname = "cput" then go to CONTINUE_TO_SIGNAL;
	if cname = "alrm" then go to CONTINUE_TO_SIGNAL;
	if cname = "program_interrupt" then go to CONTINUE_TO_SIGNAL;
	if cname = "signal_io_" then go to CONTINUE_TO_SIGNAL;
	if cname = "quit" then do;
CONTINUE_TO_SIGNAL:
	   cont = TRUE;
	   return;
	   end;

	ucs_recursion = ucs_recursion + 1;		/* error occurred*/
	if ucs_recursion = 1 then do;			/* while dumping */
	   call Abort (-1,
	      "Dump aborted, condition ^a occurred is lsdump^/(^a).",
	      pathname_ (dir, outname));
	   end;

	ls_cp_info.no_io_switches = TRUE;
	go to JUST_RETURN;				/* error while   */
						/* aborting      */

	end Fatal_condition;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
 %include dprint_arg;
 %include iox_modes;
 %include ls_connection_desc;
 %include ls_cp_info;

 	end ls_dump_;
