//  Rcom -- read command and declaration.
//  Last modified on 06/06/74 at 18:20:51 by R F Mabee.
//  Installed on 6180 with Version 3.4 by R F Mabee.
//  First installed on 645 with Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cae_head"

let Rcom (n) = valof		//  n = 0 means read to end of containing block or program,
				//  n = 8 means accept exactly one command (definitions not allowed),
				//  n = 4 allows definitions but if first item is command, stops after it.
     $(	let A, B, C, D = nil, nil, nil, nil
  Top:	let Op = Symb logor LineCount lshift Left
	switchon Symb into
	     $(	case LET_S:
		case MANIFEST_S: case GLOBAL_S:
		case EXTERNAL_S: case STATIC_S:
			if n ge 8 do CaeReport (MisplacedDeclaration)
			Nextsymb ()
			test (Op & Right) = LET_S
			then A := Rdef ()
			or A := Rblock (Rdeclbody, Op & Right)
			B := Rcom (0)
			resultis List3 (Op, A, B)

		case SEMICOLON_S:
			unless n = 0 resultis 0
			Nextsymb ()
			goto Top

		case SECTBRA_S:
		case SECTBEGIN_S:
			A := Rblock (Rcom, 0)
			goto MORE

		case SECTKET_S:
		case SECTEND_S:
		case ENDPROG_S:
			resultis 0


		case NAME_S: case NUMBER_S: case STRINGCONST_S: case CHARCONST_S:
		case TRUE_S: case FALSE_S: case LV_S: case RV_S: case NOT_S:
		case RBRA_S: case VALOF_S: case PLUS_S: case MINUS_S:
		case LIST_S: case TABLE_S:
			A := ReadList (false)
			Op := Symb logor LineCount lshift Left
			if Symb = ASSIGN_S do
			     $(	Nextsymb ()
				B := ReadList (true)
				A := List3 (Op, A, B)
				goto MORE
			     $)
			if Symb = COLON_S do
			     $(	unless (A!0 & Right) = NAME_S do CaeReport (NameExpected)
				Nextsymb ()
				B := Rcom (n = 0 -> 4, n)		//  Stop at end of command.
				A := List5 (Op, A, B, LabelList, 0)
				LabelList := A
				goto MORE
			     $)
			if (A!0 & Right) = FNAP_S do
			     $(	A!0 := A!0 + RTAP_S - FNAP_S
				goto MORE
			     $)
			CaeReport (IncompleteCommand)
			goto Drain

		case GOTO_S: case RESULTIS_S:
			Nextsymb ()
			A := List2 (Op, Rexp (0))
			goto MORE

		case CALL_S:
			Nextsymb ()
			A := List2 (Op, Rexp (0))
			goto MORE

		case IF_S: case UNLESS_S:
		case WHILE_S: case UNTIL_S:
			Nextsymb ()
			A := Rexp (0)
			test Symb = DO_S
			then Nextsymb ()
			or CaeReport (MissingDO)
			B := Rcom (8)
			A := List3 (Op, A, B)
			goto MORE

		case TEST_S:
			Nextsymb ()
			A := Rexp (0)
			D := Symb
			unless D = DO_S logor D = IFSO_S logor D = IFNOT_S do
			     $(	CaeReport (MalformedTest)
				goto Drain
			     $)
			Nextsymb ()
			B := Rcom (8)
			unless Symb = (D = DO_S -> OR_S, D = IFSO_S -> IFNOT_S, IFSO_S) do
			     $(	CaeReport (MalformedTest)
				Op := D = IFNOT_S -> UNLESS_S, IF_S
				A := List3 (Op, A, B)
				goto Drain
			     $)
			Nextsymb ()
			C := Rcom (8)
			if D = IFNOT_S do
			     $(	let q = B
				B := C
				C := q
			     $)
			A := List4 (Op, A, B, C)
			goto MORE

		case FOR_S:
			Nextsymb ()
			A := Rname ()
			unless Symb = VALDEF_S do
			     $(	CaeReport (ValdefExpected)
				goto Drain
			     $)
			Nextsymb ()
			B := Rexp (0)
			D := 0
			if Symb = BY_S do
			     $(	Nextsymb ()
				D := Rexp (0)
			     $)
			test Symb = TO_S
			then $(	Nextsymb ()
				C := Rexp (0)
			     $)
			or   $(	CaeReport (MissingTO)
				C := ErrorNode
			     $)
			if Symb = BY_S & D = 0 do
			     $(	Nextsymb ()
				D := Rexp (0)
			     $)
			test Symb = DO_S
			then Nextsymb ()
			or CaeReport (MissingDO)
			A := List6 (Op, A, B, C, D, Rcom (8))
			goto MORE

		case BREAK_S: case LOOP_S:
		case RETURN_S: case FINISH_S:
		case ENDCASE_S:
			Nextsymb ()
			A := List1 (Op)
			goto MORE

		case SWITCHON_S:
			Nextsymb ()
			A := Rexp (0)
			test Symb = INTO_S
			then Nextsymb ()
			or CaeReport (MissingINTO)
			B := Rblock (Rcom, 0)
			A := List3 (Op, A, B)
			goto MORE

		case CASE_S:
			Nextsymb ()
			A := Rexp (0)
			B := 0
			if Symb = TO_S do
			     $(	Nextsymb ()
				B := Rexp (0)
			     $)
			test Symb = COLON_S
			then Nextsymb ()
			or CaeReport (MissingCOLON)
			C := Rcom (n = 0 -> 4, n)		//  Pick up just one command.
			A := List4 (Op, A, B, C)
			goto MORE

		case DEFAULT_S:
			Nextsymb ()
			test Symb = COLON_S
			then Nextsymb ()
			or CaeReport (MissingCOLON)
			A := List2 (Op, Rcom (n = 0 -> 4, n))		//  Stop at end of next command.
			goto MORE

		default:	CaeReport (UnrecognizedCommand)

		  Drain:	A := 0
			while true do switchon Symb into		//  Skip past rest of bad command.
			     $(	case SEMICOLON_S:
					if n = 0 goto MORE	//  We're supposed to pick up succeeding commands too.
				case SECTKET_S:		//  All the cases which must begin a new command.
				case SECTEND_S:
				case ENDPROG_S:
				case LET_S:
				case GLOBAL_S:
				case MANIFEST_S:
				case STATIC_S:
				case EXTERNAL_S:
					resultis A
				case AND_S:		//  Botched definition, read rest of it.
					Nextsymb ()
					A := Rdef ()
					loop
				case SECTBRA_S:
				case SECTBEGIN_S:
					A := Rblock (Rcom, 0)
					loop
				default:	Nextsymb ()
			     $)		//  Note indefinite looping.
	     $)

  MORE:	Op := Symb logor LineCount lshift Left
	switchon Symb into
	     $(	case REPEAT_S:
			Nextsymb ()
			A := List2 (Op, A)
			goto MORE

		case REPEATWHILE_S:
		case REPEATUNTIL_S:
			Nextsymb ()
			B := Rexp (0)
			A := List3 (Op, A, B)
			goto MORE

		case SEMICOLON_S:
			unless n = 0 resultis A		//  If we're supposed to read only one command.
			Nextsymb ()
			B := Rcom (0)		//  This picks up all following commands.
			resultis List3 (Op, A, B)

		case SECTKET_S:		//  All the symbols which force the end of the current command.
		case SECTEND_S:
		case ENDPROG_S:
		case LET_S:
		case GLOBAL_S:
		case MANIFEST_S:
		case STATIC_S:
		case EXTERNAL_S:
		case AND_S:
		case OR_S:
			resultis A

		default:	CaeReport (IncompleteCommand)
			goto Drain
	     $)
     $)
