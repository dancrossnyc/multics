//  Routines to manage labels, literals, and CG temporaries.
//  Last modified on 06/14/74 at 01:14:45 by R F Mabee.
//  Revised for 6180 and installed with Version 3.4 of the compiler, R F Mabee.
//  First installed with Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

let LookupTemp (a) = valof
     $(	let h = CgTempList
	until h = 0 do
	     $(	if h!0 = a resultis h
		h := h!CgTempSize
	     $)
	resultis 0
     $)
and MakeCgTemp (a) = valof
     $(	let h = LookupTemp (a)
	if h ne 0 resultis h
	h := Newvec (CgTempSize)
	h!CgTempSize := CgTempList
	CgTempList := h
	h!0, h!1 := a, 0
	resultis h
     $)

let IsNumber (t) = valof
  switchon t!0 into
     $(	case NUMBER_S: case CONSTANT_S: case CHARCONST_S: case TRUE_S: case FALSE_S:
		resultis true
	default:	resultis false
     $)
and EvalNumber (Op, N) = valof
  switchon Op into
     $(	case NUMBER_S:
		resultis ConvertStoN (N)
	case CONSTANT_S:
		resultis N
	case CHARCONST_S:
		resultis FormCharconst (N)
	case TRUE_S:
		resultis true
	case FALSE_S:
		resultis false
	default:	CGreport (UnexpectedCase, Op, "EvalNumber")
		resultis 0
     $)
and IsZero (t) = IsNumber (t) -> EvalNumber (t!0, t!1) = 0, false
and IsAddress (t) = valof
  switchon t!0 into
     $(	case STRINGCONST_S: case EXTERNAL_S: case TABLE_S:
	case LABEL_S: case RTDEF_S:
	case LV_GLOBAL: case LV_LOCAL: case LV_STATIC:
	case LV_TEMP: case LV_ARG_OUT:
		resultis true
	case TEMP_S:
		let h = LookupTemp (t!1)
		if h = 0 resultis false
		resultis h!1 = REGISTER_S -> Satisfactory (h!2, AnyPr), h!1 = LVECAP_S
	case GLOBAL_S: case LOCAL_S: case STATIC_S:
	case NUMBER_S: case CONSTANT_S: case CHARCONST_S: case TRUE_S: case FALSE_S:
		resultis false
	default:	CGreport (UnexpectedCase, t!0, "IsAddress")
		resultis false
     $)
and IsStored (t) = valof
  switchon t!0 into
     $(	case GLOBAL_S: case LOCAL_S: case STATIC_S:
		resultis true
	case TEMP_S:
		let h = LookupTemp (t!1)
		if h = 0 resultis true
		resultis h!1 = VECAP_S
	default:	resultis false
     $)
and FindInRegister (t, r) = valof
     $(	unless t!0 = TEMP_S resultis 0
	let h = LookupTemp (t!1)
	if h = 0 resultis 0
	test h!1 = REGISTER_S
	then if Satisfactory (h!2, r) resultis h!2
	or if h!1 = LVECAP_S & IsZero (lv h!5) & h!8 = 0 resultis FindInRegister (lv h!2, r)
	resultis 0
     $)
and InRegister (t, r) = (FindInRegister (t, r) ne 0)

and CombineAddress (Pointer, Index, Delta) be
     $(	let Pr = GetRegister (AnyPr)		//  Might not need it.
	and Xr = IsZero (Index) -> 0, LoadIndex (Index, AnyXr)
	SetupAddr (Pointer)
	Comment := 0		//  Misleading comment.
	test (Tag & TagXrMask) ne 0 & Xr ne 0 logor (Tag & Star) ne 0 & Delta ne 0
	then $(	Outop (FormOpcode (Eapap, Pr))
		Address, Tag, Param := Delta, FormTag (Xr) | FormTag (Pr), 0
	     $)
	or   $(	Address := Address + Delta
		unless Xr = 0 do
		     $(	Tag := Tag | FormTag (Xr)
			if (Tag & Star) ne 0 do Tag := Tag + StarThenReg - Star
		     $)
	     $)
     $)
and ClaimRegister (r, t) be
	test r = 0
	then DisclaimRegister (t)		//  Was already stored.
	or test t!0 = LV_TEMP
	then $(	let h = MakeCgTemp (t!1)
		h!1, h!2 := REGISTER_S, Preserve (r)
		RegisterTemps!r := h
	     $)
	or   $(	StoreRegister (r, t)
		DisclaimRegister (t)
	     $)
and DisclaimRegister (t) be
     $(	unless t!0 = TEMP_S return
	let h = LookupTemp (t!1)
	if h = 0 return
	test h!1 = REGISTER_S
	then RegisterTemps!(h!2), RegisterUsage!(h!2) := 0, 0
	or   $(	DisclaimRegister (lv h!2)
		DisclaimRegister (lv h!5)
	     $)
	let p = lv CgTempList
	until rv p = 0 do
	     $(	if rv p = h do
		     $(	rv p := h!CgTempSize
			break
		     $)
		p := lv ((rv p)!CgTempSize)
	     $)
	Freevec (h, CgTempSize)
     $)

let Complab (L) be
     $(	unless DeferredJumpLabel = 0 do
	     $(	unless DeferredJumpLabel = L do
		     $(	Jumpsw := false
			Outop2 (Tra, DeferredJumpLabel)
		     $)
		DeferredJumpLabel := 0
	     $)
	ClearRegisters ()
	ClearMemory ()
	if Listing do Format (OUTPUT, "L^d:", L)
	PutCode (LabelSwitch, L, LC)
	DefineLab (L, LC)
	Jumpsw, IndicatorsSetBy := false, 0
     $)
and DefineLab (L, n) be
     $(	let P = LabelCell (L)
	unless rv P = 0 do CGreport (DupLabel, L)
	rv P := 1 lshift Left logor n
     $)
and LookupLabel (L) = rv LabelCell (L)
and LabelCell (L) = valof
     $(	unless 0 < L < LabTableSize * 100 do
	     $(	CGreport (BadLabel, L)
		L := 0
	     $)
	let Q = L / 100
	let P = LabTable!Q
	if P = 0 do
	     $(	P := Newvec (100 - 1)
		for i = 0 to 100 - 1 do P!i := 0
		LabTable!Q := P
	     $)
	resultis lv P!(L rem 100)
     $)
and Compjump (n) be
     $(	unless Jumpsw do DeferredJumpLabel := n
	Jumpsw := true
     $)
and ClearMemory () be
	return
and ClearRegisters () be
     $(	let T = table Xr2, Xr3, Xr4, Xr5, Xr6, Apr, Abr, Bpr, Bbr, Lbr, Ar, Qr, EAQr
	for i = 0 to 12 do GetRegister (T!i)
     $)

and Outstring (s) be
     $(	let v = vec Vmax
	let Len = FormStringconst (s, v)
	Comment := s
	for i = 0 to Len do OutData (v!i)
     $)
and OutLiterals () be
     $(	if NewLiteralsList = 0 return
	ClearRegisters ()
	SectionHeader ("*nLiteral pool")
	let HaveAlignmentRequirements = true
	until NewLiteralsList = 0 do
	     $(	let Alignment = 2 - (LC & 1)
		if HaveAlignmentRequirements do
		     $(	let t, B = NewLiteralsList, false
			until t = 0 do
			     $(	if t!3 = Alignment do
				     $(	PutOneLiteral (t)
					goto OuterLoop
				     $)
				if t!3 ne 0 do B := true
				t := t!4
			     $)
			HaveAlignmentRequirements := B
		     $)
		let t = NewLiteralsList
		until t = 0 do
		     $(	if t!3 = 0 do
			     $(	t!3 := Alignment
				PutOneLiteral (t)
				goto OuterLoop
			     $)
			t := t!4
		     $)
		HaveAlignmentRequirements := true
		Comment := "padding"
		OutData (0)
	OuterLoop:
	     $)
     $)
and PutOneLiteral (t) be
     $(	let u = lv NewLiteralsList
	until rv u = t do u := lv (rv u)!4
	rv u := t!4
	Comment := t!2
	let P = t!0
	for i = 0 to t!1 * 2 - 2 by 2 do
	     $(	unless P!i = 0 do Complab (P!i)
		OutData (P!(i + 1))
	     $)
	t!4 := OldLiteralsList
	OldLiteralsList := t
     $)

and AddLiteral (P, Len, C, Alignment) be
     $(	let Data, Ent = Newvec (Len * 2 - 1), Newvec (4)
	for i = 0 to Len - 1 do Data!(i * 2), Data!(i * 2 + 1) := 0, P!i
	Ent!0, Ent!1, Ent!2, Ent!3, Ent!4 := Data, Len, C, Alignment, NewLiteralsList
	NewLiteralsList := Ent

	let t = Ent!4
	until t = 0 do
	     $(	if CombineLiteral (Ent, t) return
		t := t!4
	     $)
	t := OldLiteralsList
	until t = 0 do
	     $(	if CombineLiteral (Ent, t) return
		t := t!4
	     $)
	t := Ent!4
	until t = 0 do
	     $(	CombineLiteral (t, Ent)
		t := t!4
	     $)
	if Data!0 = 0 do Data!0 := Nextparam ()
	Address, Tag, Param, Comment := 0, 0, Data!0, C
     $)
and CombineLiteral (New, Old) = valof
     $(	let Ndata, Odata = New!0, Old!0
	for i = 0 to Old!1 - New!1 do
	     $(	for j = 0 to New!1 - 1 if Ndata!(j * 2 + 1) ne Odata!((i + j) * 2 + 1)
					| Ndata!(j * 2) ne 0 & Odata!((i + j) * 2) ne 0 goto OuterLoop
		if New!3 ne 0 test Old!3 ne 0
			then unless ((New!3 + Old!3 + i) & 1) = 0 goto OuterLoop
			or Old!3 := 2 - ((New!3 + i) & 1)
		for j = 0 to New!1 - 1 if Ndata!(j * 2) ne 0 do Odata!((i + j) * 2) := Ndata!(j * 2)
		Address, Tag, Param := i, 0, Odata!0
		let u = lv NewLiteralsList
		until rv u = New do u := lv (rv u)!4
		rv u := New!4
		Freevec (Ndata, New!1 * 2 - 1)
		Freevec (New, 4)
		resultis true
	OuterLoop:
	     $)
	resultis false
     $)
