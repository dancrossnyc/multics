//  Primitives to manipulate registers and addresses.
//  Last modified on 06/06/74 at 18:22:13 by R F Mabee.
//  Revised for 6180 and installed with Version 3.4 of the compiler, R F Mabee.
//  First installed with Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

//  LoadRegister moves a CG operand into an arithmetic register.

let LoadRegister (t, r) = valof
     $(	let q = FindInRegister (t, r)
	if q ne 0 resultis Preserve (q)
	if r = Ar | r = Qr then if FindInRegister (t, Qr + Ar - r) ne 0 do
	     $(	SwapAandQ ()
		resultis Preserve (r)
	     $)
	if IsNumber (t) resultis LoadNumber (EvalNumber (t!0, t!1), r, t!2)
	r := GetRegister (r)
	Makeaddressable (t)
	Outop (r = EAQr -> Fld, FormOpcode (Lda, r))
	IndicatorsSetBy := r
	resultis Preserve (r)
     $)
and LoadNumber (n, r, c) = valof
     $(	r := GetRegister (r)
	let Op = Lda
	test r = EAQr
	then Op := Fld
	or if n < 0 then unless n = (1 lshift 35) do Op, n := Lca, - n	//  Can't complement most negative number.
	Literal (n, c)
	Outop (FormOpcode (Op, r))
	IndicatorsSetBy := r
	resultis Preserve (r)
     $)
and SwapAandQ () be
     $(	Outop4 (Llr, 36, 0, "exchange A and Q")
	IndicatorsSetBy := 0
	let p, q = RegisterTemps!Ar, RegisterTemps!Qr
	RegisterTemps!Ar, RegisterTemps!Qr := q, p
	if p ne 0 do p!2 := Qr
	if q ne 0 do q!2 := Ar
     $)
and LoadPointer (t, r) = valof
     $(	let q = FindInRegister (t, r)
	if q ne 0 resultis Preserve (q)
	r := GetRegister (r)
	test IsAddress (t)
	then $(	SetupAddr (t)
		Outop (FormOpcode (Eapap, r))
	     $)
	or   $(	Makeaddressable (t)
		Outop (FormOpcode (Lprpap, r))
	     $)
	resultis Preserve (r)
     $)
and LoadIndex (t, r) = valof
     $(	let q = FindInRegister (t, r)
	if q = 0 & r = AnyXr do q := FindInRegister (t, AorQr)	//  A and Q can be used as index registers.
	if q ne 0 resultis Preserve (q)
	r := GetRegister (r)
	test IsAddress (t)
	then $(	SetupAddr (t)
		Outop (FormOpcode (Eax0, r))
	     $)
	or   $(	Makeaddressable (t)
		Outop (FormOpcode (Lxl0, r))
	     $)
	IndicatorsSetBy := r
	resultis Preserve (r)
     $)
and LoadAppropriateRegister (t, r) = valof
     $(	if r = 0 do
	     $(	r := FindInRegister (t, AorQr)
		if r = 0 do r := FindInRegister (t, AnyPr)
		if r = 0 do r := FindInRegister (t, EAQr)
		if r ne 0 resultis Preserve (r)
		r := IsAddress (t) -> AnyPr, AorQr
	     $)
	if r = AorQr | Satisfactory (r, AorQr) | r = EAQr resultis LoadRegister (t, r)
	if r = AnyPr | Satisfactory (r, AnyPr) resultis LoadPointer (t, r)
	CGreport (UnexpectedCase, r, "LoadAppropriateRegister")
	resultis Ar
     $)

and Makeaddressable (t) be
     $(	test IsNumber (t)
	then Literal (EvalNumber (t!0, t!1), t!2)
	or test IsStored (t)
	then SetATP (t)
	or   $(	let u = list LV_GLOBAL, 0, 0		//  Temporary cell.
		Store (t, u)
		Address, Tag, Param := 0, Sp, 0
	     $)
	unless t!2 = 0 do Comment := t!2
     $)
and SetupAddr (t) be
     $(	test IsAddress (t)
	then SetATP (t)
	or   $(	let r = LoadPointer (t, AnyPr)
		Address, Tag, Param := 0, FormTag (r), 0
	     $)
	unless t!2 = 0 do Comment := t!2
     $)
and SetATP (t) be
     $(	Address, Tag, Param := 0, 0, 0
	switchon t!0 into
	     $(	case GLOBAL_S: case LV_GLOBAL:
			Address, Tag := t!1, Sp
			endcase
		case TEMP_S:
			let h = LookupTemp (t!1)
			if h ne 0 then if h!1 = VECAP_S | h!1 = LVECAP_S do
			     $(	CombineAddress (lv h!2, lv h!5, h!8)
				endcase
			     $)
		case LOCAL_S: case LV_LOCAL:
		case LV_TEMP:
			Address, Tag := t!1 + SaveSpaceSize, StackRefTag
			endcase
		case LV_ARG_OUT:
			Address, Tag, Param := t!1 + SaveSpaceSize, StackRefTag, LabMaxSSP
			endcase
		case STATIC_S: case LV_STATIC:
			Address, Tag := t!1 + 8, Lp
			endcase
		case EXTERNAL_S:
			Tag, Param := Lp | Star, Compexternal (t!1)
			endcase
		case LABEL_S: case RTDEF_S:
			Param := t!1
			endcase
		case STRINGCONST_S:
			Compstring (t!1)
			endcase
		case TABLE_S:
			Comptable (t!1)
			endcase
		default:	CGreport (UnexpectedCase, t!0, "SetATP")
	     $)
	CheckAddr ()
     $)
and CompareToZero (t) be
     $(	let r = FindInRegister (t, AorQr)
	test r ne 0
	then unless r = IndicatorsSetBy do
	     $(	Outop3 (FormOpcode (Cmpa, r), 0, Dl)
		IndicatorsSetBy := r
	     $)
	or   $(	Makeaddressable (t)
		Outop (Szn)
		IndicatorsSetBy := 0
	     $)
     $)

and StoreRegister (r, To) be
     $(	let Op = valof switchon r into
	     $(	case Ar: case Qr:
		default:
			resultis Sta
		case Apr: case Abr: case Bpr: case Bbr: case Lbr:
			resultis Sprpap
		case EAQr:
			resultis Fstr
	     $)
	SetupAddr (To)
	test Machine = 645 & Op = Sprpap
	then $(	let A, T, P = Address, Tag, Param
		Outop (FormOpcode (Sprpap, r + 1))
		Outop3 (Eax0, 0, FormTag (r))
		Address, Tag, Param := A, T, P
		Outop (Sxl0)
	     $)
	or Outop (FormOpcode (Op, r))
	RegisterUsage!r := 0		//  Indicate register not needed for anything.
     $)
and Store (From, To) be
	test IsZero (From)
	then $(	SetupAddr (To)
		Outop (Stz)
	     $)
	or   $(	let r = LoadAppropriateRegister (From, 0)
		StoreRegister (r, To)
	     $)

and Preserve (r) = valof
     $(	UsageCounter := UsageCounter + 1
	RegisterUsage!r := UsageCounter
	resultis r
     $)
and GetRegister (r) = valof
     $(	switchon r into
	     $(	default:	CGreport (UnexpectedCase, r, "GetRegister")
			r := Ar

		case Ar: case Qr:
			MakeAvailable (EAQr)		//  EAQr overlaps both Ar and Qr.
			endcase

		case EAQr:
			MakeAvailable (Ar)
			MakeAvailable (Qr)
			endcase

		case Xr2: case Xr3: case Xr4: case Xr5: case Xr6:
		case Apr: case Abr: case Bpr: case Bbr: case Lbr:
			endcase

		case AorQr:
			r := RegisterUsage!Ar < RegisterUsage!Qr -> Ar, Qr
			MakeAvailable (EAQr)
			endcase

		case AnyPr:
			r := RegisterUsage!Bpr < RegisterUsage!Apr -> Bpr, Apr
			if Machine = 6180 do
			     $(	let T = table Abr, Bbr, Lbr
				for i = 0 to 2 if RegisterUsage!(T!i) < RegisterUsage!r do r := T!i
			     $)
			endcase

		case AnyXr:
			r := Xr2
			let T = table Xr3, Xr4, Xr5, Xr6
			for i = 0 to 3 if RegisterUsage!(T!i) < RegisterUsage!r do r := T!i
			endcase
	     $)
	MakeAvailable (r)
	resultis r
     $)
and Satisfactory (r, q) = valof
     $(	switchon q into
	     $(	case AnyXr:
			if r = Xr2 | r = Xr3 | r = Xr4 | r = Xr5 | r = Xr6 resultis true
			resultis false
		case AorQr:
			if r = Ar | r = Qr resultis true
			resultis false
		case AnyPr:
			if r = Apr | r = Abr | r = Bpr | r = Bbr | r = Lbr resultis true
			resultis false
		default:	resultis r = q
	     $)
     $)
and MakeAvailable (r) be
     $(	let h = RegisterTemps!r
	if h = 0 return
	let To = list LV_TEMP, h!0, "temporary"
	StoreRegister (r, To)
	RegisterTemps!r, RegisterUsage!r := 0, 0
	h!0 := -1
     $)

and Literal (n, c) be
     $(	Address, Tag, Param, Comment := n & $8777777, Dl, 0, c
	if Address = n return
	test Address = 0
	then Address, Tag := n rshift 18, Du
	or AddLiteral (lv n, 1, c, 0)
     $)
