//  The command interface for the compiler.
//  Last modified on 06/06/74 at 18:25:47 by R F Mabee.
//  Installed on 6180 as Version 3.4, R F Mabee.
//  ACL rings changed to V,V,V and installed as Version 2.8, R F Mabee.
//  First installed as Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"		//  Declarations for whole BCPL library, because driver uses things not in bcpl_compiler_head.
get "bcpl_compiler_head"	//  Declarations for compiler routines and global cells.
get "bcpl_metering_head"	//  Declarations for compiler metering tools.

external
     $(	BcplCommand = "bcpl_driver$bcpl"
	BcplMeters = "bcpl_driver$meters"

	Wdir = "get_wdir_"		//  call get_wdir_ (return dir name)
	GetGroupId = "get_group_id_"	//  call get_group_id_ (return userid)
	LevelGet = "cu_$level_get"	//  call cu_$level_get (return validation ring number)
	Initiate = "hcs_$initiate"	//  call hcs_$initiate (dir name, ent name, ref name, 0, 1, return ptr, return code)
	MakeSeg = "hcs_$make_seg"	//  call hcs_$make_seg (dir name, ent name, ref name, mode, return ptr, return code)
	AclAddOne = "hcs_$acl_add1"	//  call hcs_$acl_add1 (dir name, ent name, userid, mode, rings, return code)
	AclDelete = "hcs_$acl_delete"	//  call hcs_$acl_delete (dir name, entry name, acl ptr, count, return code)
	UnsnapLinks = "term_$nomakeunknown" // call term_$nomakeunknown (pointer, return code)

	SymbolTable = "bound_bcpl_$symbol_table"	//  Compiler's own symbol table contains time compiler updated.

	BadOpt = "error_table_$badopt"
	TranslationFailed = "error_table_$translation_failed"
     $)
static
     $(	StaticMeterData = 0
	StaticMeteringSw = false

	RE = 12
	RWA = 11
	Zero = 0
	One = 1
     $)
manifest
     $(	Empty = $8707070  $)	//  Used to indicate undefined state of truth value.


let BcplCommand () be main
     $(	Errcode, ProgramID := 0, "bcpl"
  Clp:	MONITOR := Open (Console + Write)
	OUTPUT := MONITOR
	let StartingTime = GetCpuUsage ()

	if Pl1NumbArgs () = 0 do
		Complain ("Pathname of source file is required as first argument.  Options:*n^a*n^a",
			"General:  list  source  xref  alist  check  uppercase  symbols  map  optimize  quiet",
			"Compiler debug:  time  print_meters  tree  crep  pprep  645  ocode")

//  Process options.
	let Source, Alist = Empty, Empty
	and List, Time, DumpTree, MetersPrintSw, Check = false, false, false, false, false
	and Followon = true			//  This is the 6180 version.
	Xref, LineMap, Optimize := Empty, Empty, Empty
	Crep, PPrep, OcodeSw, QuietSw, Symbols, UpperCase := false, false, false, false, false, false

	let Names = list "list", "xref", "source", "alist", "tree",
			"check", "uppercase", "symbols", "map", "optimize",
			"crep", "pprep", "time", "quiet", "print_meters",
			"645", "ocode"
	and Pointers = list lv List, lv Xref, lv Source, lv Alist, lv DumpTree,
			lv Check, lv UpperCase, lv Symbols, lv LineMap, lv Optimize,
			lv Crep, lv PPrep, lv Time, lv QuietSw, lv MetersPrintSw,
			lv Followon, lv OcodeSw
	and Flags = table OptNegatable, OptNegatable, OptNegatable, OptNegatable, OptNegatable,
			OptNegatable, OptNegatable, OptNegatable, OptNegatable, OptNegatable,
			OptNegatable, OptNegatable, OptNegatable, OptNegatable, OptNegatable,
			OptNegatable | OptNegate, OptNegatable
	ArgIndex := 2		//  Used by GetNextCommandArg.
	OptionParse (GetNextCommandArg, 17, Names, Pointers, Flags, 0)
			//  Apply complicated defaults.
	if Xref = Empty do Xref := List
	if Source = Empty do Source := List | Xref
	if Alist = Empty do Alist := List
	Check := Check | Crep
	if Optimize = Empty do Optimize := Source & not (Check | Symbols)	//  Guess whether this compilation is final version.
	if LineMap = Empty do LineMap := not (Optimize | Check)
	LineMap := LineMap | Symbols

	HaveListingFile := (Source | Xref | Alist | DumpTree | OcodeSw | PPrep) & not Crep
	Machine := Followon -> 6180, 645
	Metering := MetersPrintSw logor StaticMeteringSw
	let TimeSummary, TimeTemp = Time | HaveListingFile, nil
			//  Make list of options used.
	OptionString := vec 128
	SetLength (OptionString, 0)
	if Source do AddOption ("source")
	if Xref do AddOption ("xref")
	if DumpTree do AddOption ("tree")
	if Alist do AddOption ("alist")
	if Check do AddOption ("check")
	if UpperCase do AddOption ("uppercase")
	if Symbols do AddOption ("symbols")
	if LineMap do AddOption ("map")
	if Optimize do AddOption ("optimize")
	if PPrep do AddOption ("pprep")
	if OcodeSw do AddOption ("ocode")
	AddOption (Followon -> "6180", "645")

//  Process file name argument.
	let Arg = vec 100
	Pl1ArgString (1, Arg, 100 * 4)
	let Len = Length (Arg)
	if Len > 5 do		//  If the ".bcpl" suffix might already be present.
	     $(	let w = vec 5
		Substr (w, Arg, Len - 4, 5)
		if EqualString (w, ".bcpl") do SetLength (Arg, Len - 5)
	     $)
	let Path, Dir, Ent = vec 50, vec 50, vec 10
	ExpandPathname (Arg, Path)
	SplitPathname (Path, Dir, Ent)
	unless Errcode = 0 do Complain (Arg)
	ProgramName := vec 8
	MakeBcplString (Ent, 32, ProgramName)

//  Set up some more environment things.
		//  Temporary kludge to check for stack segment too full to allow for Newvec space.
	if (ProgramName & Right) ge 45000 do Complain ("Not enough room left in stack to perform compilation. Type 'release'.")

	let v = vec 10000
	UtilitiesInit (v, 10000, StartingTime)
	let v = vec 20
	SetHandler ("cleanup", Cleanup, v)
	SetOverflowMask (true)	//  Turn off overflow faults.

	Errorsw := false
	NAMECHAIN := 0

	GetVersion ()		//  Compiler version info is isolated in small easily changed program.

		//  Get date/time compiler was updated (bound) from symbol table of bound segment.
	CompilerDTM, TimeNow := vec 2, vec 2
	CompilerDTM!0, CompilerDTM!1 := SymbolTable!6, SymbolTable!7
	RawClockTime (TimeNow)
	CompilerDTMString, TimeNowString := MakeTimeString (CompilerDTM), MakeTimeString (TimeNow)

	UserID := vec 8
	let v = vec 8
	call GetGroupId (v char 32)
	MakeBcplString (v, 32, UserID)

//  Open input and output files.
	test Crep
	then $(	INPUT := Open (Console + Read)
		FilesInfo!0, FilesInfo!1, FilesInfo!2, FilesInfo!3 := "console", 0, 0, 0
		FileNames!0 := "console"
		LineCount := FileCount lshift FileShift
		WriteS (MONITOR, "Type program:*n")
	     $)
	or   $(	GetStream (Arg, 0)		//  0 indicates no previous input stream for searching.
		if HaveListingFile do
		     $(	let w = vec 50
			OUTPUT := Open (EntryName + Write + MultiSegmentFile, Concatenate (w, 32, ProgramName, ".list"))
			unless Errcode = 0 do Complain (w)
			Format (OUTPUT, "Compilation listing of file ^s.*n", FilesInfo!0)
			Format (OUTPUT, "Compilation performed for ^s at ^s.*n", UserID, TimeNowString)
			Format (OUTPUT, "Compiled by ^s.  Compiler updated at ^s.*n",
								CompilerVersionString, CompilerDTMString)
			Format (OUTPUT, "Options applied:  ^s.*n*n", OptionString)
		     $)
		WriteS (MONITOR, "BCPL*n")
	     $)

//  Read source program and construct syntax tree.
	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if TimeSummary do TimeTemp := GetCpuUsage ()
	Listing := Source

	LexInit ()
	let A = CAE ()
	if Crep & A = 0 & not Errorsw finish	//  Escape from type-in mode.
	if Metering do
	     $(	MeterData!TotalLines_Count := TotalLines
		RecordUsage (SyntaxAnalysis_Meter, UsageTemp)
	     $)
	Close (INPUT)
	INPUT := 0
	if TimeSummary do Wrtime ("CAE", GetCpuUsage () - TimeTemp, "source lines", TotalLines, Time)

//  Put out optional cross reference and tree listings.
	if Xref do
	     $(	Writech (OUTPUT, Crep -> '*n', '*f')
		WriteS ("cross reference table*n*n")
		Pname (NAMECHAIN)
	     $)
	if DumpTree do
	     $(	Writech (OUTPUT, Crep -> '*n', '*f')
		WriteS ("abstract syntax tree*n*n")
		Plist (A, 0)
	     $)

//  Perform semantic translation on syntax tree, generating machine code and listing.
	unless Errorsw do
	     $(	Listing := Alist & Check		//  Generate only partial listing during Trans.
		if Metering do UsageTemp := SaveOldUsage ()
		if TimeSummary do TimeTemp := GetCpuUsage ()
		CgInit ()
		Trans (A)
		if Metering do
		     $(	MeterData!TextWords_Count := TotalWords
			RecordUsage (SemanticTranslation_Meter, UsageTemp)
		     $)
		if TimeSummary do Wrtime ("Trans", GetCpuUsage () - TimeTemp, "object words", TotalWords, Time)
		if Alist & not Check do WriteObjectListing ()	//  Generate full listing in separate pass.
	     $)
	unless OUTPUT = MONITOR do
	     $(	Close (OUTPUT)
		OUTPUT := MONITOR
	     $)

//  Form object segment out of internally-stored machine code program.
	unless Check | Errorsw do
	     $(	let x, y = nil, nil
		let v = vec 2
		if Metering do UsageTemp := SaveOldUsage ()
		call Wdir (Dir char 168)
		call Initiate (Dir char 168, Ent char 32, "" char 0, lv Zero, lv One, v pointer, lv Errcode)
		let P = BCPLaddr (v)
		unless Errcode = 0 do
			test P = Null
			then $(	call MakeSeg (Dir char 168, Ent char 32, "" char 0, lv RE, v pointer, lv Errcode)
				P := BCPLaddr (v)
				if P = Null do Complain ("Unable to create object segment ^a.", ProgramName)
			     $)
			or call UnsnapLinks (ITS (P, v), lv Errcode)	// Segment in use, unlink it.
		let AclArray, Rings = vec 8, vec 3
		MakePl1String (UserID, AclArray, 32)
		AclArray!8 := 0
		call LevelGet (lv x)
		Rings!0, Rings!1, Rings!2 := x, x, x
		call AclAddOne (Dir char 168, Ent char 32, AclArray char 32, lv RWA, Rings, lv Errcode)
		unless Errcode = 0 do Complain ("Unable to change ACL of object segment ^a.", ProgramName)
		x := BuildObject (P)
		SetBitCount (P, x)
		call AclDelete (Dir char 168, Ent char 32, ITS (AclArray, v) pointer, lv One, lv Errcode)
		Terminate (P)
		if Metering do RecordUsage (MakeObject_Meter, UsageTemp)
	     $)

//  Print or save meter values as required.
	if Metering do
	     $(	RecordUsage (DriverOverhead_Meter, 0)
		let Elapsed, Total, Calls = GetCpuUsage () - StartingTime, 0, 0
		for i = 0 to MeteringOverhead_Meter - 1 by 3 do
			Total, Calls := Total + MeterData!i, Calls + MeterData!(i + 1)
		MeterData!MeteringOverhead_Meter := Elapsed - Total
		MeterData!(MeteringOverhead_Meter + 1) := Calls
		for i = 0 to MeteringOverhead_Meter by 3 unless MeterData!i = 0 do MeterData!(i + 2) := Total
		MeterData!DictionaryDepth_Count := DictionaryDepth
		if StaticMeteringSw do for i = 0 to Meters_Length do StaticMeterData!i := StaticMeterData!i + MeterData!i
		if MetersPrintSw do PrintMeters (MeterData)
	     $)

//  Almost done.  Clean up and report success/failure in form suitable for programmed interpretation.
	Cleanup ()
	RevertHandler ("cleanup")
	Close (MONITOR)
	if Crep goto Clp		//  "C_ompile and _r_e_peat" - jump back to beginning of driver.

	if Errorsw do
	     $(	Errcode := rv TranslationFailed
		Complain (Arg)
	     $)
     $)

and AddOption (s) be		//  Append option name to list in OptionString.
	test Length (OptionString) = 0
	then CopyString (s, OptionString)
	or Concatenate (OptionString, 511, OptionString, "  ", s)
and Wrtime (ID, Usage, Thing, Nthings, Time) be	//  Report time used, etc. in listing and console streams.
     $(	let Rate = Nthings * 1000 * 1000 / Usage
	Usage := Usage / 100 / 1000
	let a, b = Usage / 10, Usage rem 10
	if Time do Format (MONITOR, "^s time ^d.^d, ^d ^s per second.*n", ID, a, b, Rate, Thing)
	if HaveListingFile do Format (OUTPUT, "*n*n*n^s time ^d.^d, ^d ^s per second.*n", ID, a, b, Rate, Thing)
     $)

let BcplMeters () be main		//  Entry to control static metering of compiler.
     $(	Errcode, ProgramID := 0, "bcpl$meters"
	if Pl1NumbArgs () = 0 do Complain ("Options are:  print  reset  meter  no_meter")

	let Print, Reset, Start = false, false, Empty
	let Names = list "print", "reset", "meter"
	and Pointers = list lv Print, lv Reset, lv Start
	and Flags = list OptNegatable, OptNegatable, OptNegatable
	ArgIndex := 1
	OptionParse (GetNextCommandArg, 3, Names, Pointers, Flags, 0)

	if StaticMeterData = 0 do
	     $(	let x = Allocate (Meters_Length + 1)
		for i = 0 to Meters_Length do x!i := 0
		StaticMeterData := x
	     $)
	unless Start = Empty do StaticMeteringSw := Start
	if Print do
	     $(	if StaticMeterData!(MeteringOverhead_Meter + 1) = 0 do Complain ("No metering data available.")
		OUTPUT := Open (Console + Write)
		PrintMeters (StaticMeterData)
		Close (OUTPUT)
	     $)
	if Reset then for i = 0 to Meters_Length do StaticMeterData!i := 0
     $)
