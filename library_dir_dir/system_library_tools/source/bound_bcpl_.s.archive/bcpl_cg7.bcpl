//  These routines generate the definitions and linkage sections of the object segment.
//  Last modified on 06/06/74 at 18:23:04 by R F Mabee.
//  Modified for 6180 conversion, and installed as Version 3.4 by R F Mabee.
//  First installed as Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

global
     $(	NamesList : 398
	DefsList : 399
     $)

manifest
     $(	NewFlag = 1 lshift 17
	IgnoreFlag = 1 lshift 16
	EntryFlag = 1 lshift 15
	ClassMask = $8777
     $)


let WriteGetlp () be
     $(	SectionHeader ("*nLocal subroutine to find linkage section by looking in LOT")
	Complab (GetLpLabel)
	Outop3 (Stcd, 18, Sp | Star)
	Outop3 (Ldx7, 18, Sp | Star)
	Outop3 (Lda, 22, Sb | StarThenReg | X7)
	Outop3 (Eablb, 0, Au)
	Outop3 (Eablp, 0, Al)
	Outop3 (Tra, 0, X0)
     $)
and WriteEntry () be
     $(	SectionHeader ("*nLocal subroutine to help enter BCPL environment")
	Complab (EntryLabel)
	Outop4 (Eax7, 2048, 0, "Multics save sequence")
	Outop3 (Tsbbp, 32, Sb | Star)
	Outop3 (Eax1, 400, Machine = 6180 -> Sp, 0)
	Outop3 (Stplp, 24, Sp)	//  Operator pointer.
	Outop3 (Eapap, Machine = 6180 -> -3, -2, X0)	//  Def ptr.
	Outop3 (Stpap, 22, Sp)	//  Entry pointer.
	Outop4 (Tsbbp, 0, X0, "simulate standard BCPL call")
	OutData (0)
	Compfinish ()
     $)

//  This routine generates the entire definition section.  LC must be zero at entry.

let WriteDefs (EntriesList) be
     $(	let v, w = vec Vmax, vec Vmax
	SectionHeader ("*fDefinition section part one - external entry points")
	let ZeroWordLab = Nextparam ()
	NamesList, DefsList := 0, List4 (0, ZeroWordLab lshift Left | NewFlag | 3, ProgramName, Nextparam ())

//  Insert each entry point in the appropriate place in DefsList.
	let p = EntriesList
	until p = 0 do
	     $(	Split (p!1, v, w)
		let L = p!2
		if Listing do
		     $(	Format (OUTPUT, "*tequ*t^s,L^d*n", p!1, L)
			Format (OUTPUT, "*tsegdef*t^s*n", p!1)
		     $)
		let q, DefLabel = MainEntriesList, 0
		until q = 0 do		//  Determine whether this definition is referenced from text.
		     $(	if q!0 = L do q!0, DefLabel := 0, q!1
			q := q!3
		     $)
		AddDefinition (L lshift Left | NewFlag | EntryFlag | 0, StoreString (w), DefLabel, v)
		p := p!0
	     $)

//  Insert the symbol_table definition required by certain system tools.
	AddDefinition (0 lshift Left | NewFlag | 2, "symbol_table", 0, ProgramName)

//  If there are any names in MainEntriesList which were not in EntriesList, add dummy definitions for them.
	let q = MainEntriesList
	until q = 0 do
	     $(	if q!0 ne 0 do AddDefinition (q!0 lshift Left | NewFlag | EntryFlag | IgnoreFlag | 0, q!2, q!1, ProgramName)
		q := q!3
	     $)

//  Put out definitions header.
	Param, Reloc := DefsList!3, RelDef lshift Left
	OutW2 (0, "pointer to first definition")
	OutW2 (NewFlag | IgnoreFlag, "flags: new format, ignore header")
	let ZeroWord = LC
	DefineLab (ZeroWordLab, ZeroWord)
	OutW2 (0, "list terminator*n")

//  Put out all the names belonging to definitions.
	p := DefsList
	until p = 0 do
	     $(	p!3 := p!3 | GetName (p!2) lshift Left
		p := p!0
	     $)

//  Put out the definitions.
	let PreviousDef, NextDef, SegnameDef = ZeroWord, LC, nil
	and RelCodesTable = table RelText lshift Left, RelLink18 lshift Left, RelSymbol lshift Left, RelDef lshift Left
	p := DefsList
	until p = 0 do
	     $(	let ThisDef = NextDef
		unless ThisDef = LC do CGreport (PhaseError, "WriteDefs")
		NextDef := p!0 = 0 -> ZeroWord, ThisDef + 3
		let DefLabel, Class = p!3 & Right, p!1 & ClassMask
		and SegnameInfo, SegnameComment = nil, nil
		test Class = 3		//  I.e., this is a segname definition.
		then $(	Concatenate (v, Vmax, "*nSegname definition for ", p!2)
			SegnameDef := ThisDef
			SegnameInfo, SegnameComment := NextDef, "name pointer, first entry def"
		     $)
		or   $(	Concatenate (v, Vmax, "*nDefinition for ", p!2)
			SegnameInfo, SegnameComment := SegnameDef, "name pointer, segname def pointer"
		     $)
		SectionHeader (StoreString (v))
		if DefLabel ne 0 do DefineLab (DefLabel, ThisDef)
		Reloc := RelDef lshift Left | RelDef
		OutW2 (NextDef lshift Left | PreviousDef, "forward, backward threads")
		Param, Reloc := p!1 rshift Left, RelCodesTable!Class
		OutW2 (p!1 & Right, "value defined, class flags")
		Reloc := RelDef lshift Left | RelDef
		OutW2 ((p!3 & not Right) | SegnameInfo, SegnameComment)
		PreviousDef := ThisDef
		p := p!0
	     $)

//  Put out link info.
	SectionHeader ("*fDefinition section part two - symbolic info for external references")
	p := LinkList
	until p = 0 do
	     $(	Split (p!1, v, w)
		if EqualString (v, ProgramName) do CGreport (LinkRefersThis, p!1)
		let x, y, z, r = GetName (StoreString (v)), 0, 3, 0
		unless Length (w) = 0 do y, z, r := GetName (StoreString (w)), 4, RelDef
		Reloc := RelDef lshift Left
		p!3 := LC
		OutW (LC + 1 lshift Left)
		OutW (z lshift Left)
		Reloc := RelDef lshift Left logor r
		OutW (x lshift Left logor y)
		p := p!0
	     $)
     $)

and Split (s, v, w) be
     $(	let t, u = vec Vmax, vec Vmax
	RemoveEscapes (s, t)
	Unpackstring (t, u)
	for i = 1 to u!0 if u!i = '$' do
	     $(	let j = u!0 - i		//  Found '$' - separate parts before and after.
		for k = 1 to j do t!k := u!(i + k)
		u!0, t!0 := i - 1, j
		Packstring (u, v)
		Packstring (t, w)
		return
	     $)
	Packstring (u, v)		//  No '$' - both parts equal to whole.
	Packstring (u, w)
     $)
and GetName (s) = valof
     $(	let p = NamesList
	until p = 0 do
	     $(	if EqualString (p!0, s) resultis p!1
		p := p!2
	     $)
	NamesList := List3 (s, LC, NamesList)
	let w = vec Vmax + 4
	Concatenate (w, Vmax, "*"", s, "*"")
	Comment := StoreString (w)
	Unpackstring (s, w)
	let Len = w!0
	w!(Len + 1), w!(Len + 2), w!(Len + 3) := 0, 0, 0
		//  An ACC string has the length in the first nine bits.
	for i = 0 to Len by 4 do OutW (w!i lshift 27 | w!(i + 1) lshift 18 | w!(i + 2) lshift 9 | w!(i + 3))
	resultis NamesList!1
     $)
and AddDefinition (ValueLabel, Name, DefLabel, Segname) be
     $(	let New = Newvec (3)
	New!1, New!2, New!3 := ValueLabel, Name, DefLabel
	let Dp = DefsList			//  Try to find segname block where this def belongs.
	until Dp = 0 do
	     $(	if (Dp!1 & ClassMask) = 3 then if EqualString (Dp!2, Segname) do
		     $(	     $(	let q = Dp!0		//  Find end of block.
				if q = 0 break
				if (q!1 & ClassMask) = 3 break
				Dp := q
			     $)	repeat
			goto GotSegname
		     $)
		Dp := Dp!0
	     $)

//  No match for Segname, must create a new segname definition.
	Dp := Newvec (3)
	Dp!0, Dp!1, Dp!2, Dp!3 := DefsList, DefsList!3 lshift Left | NewFlag | 3, StoreString (Segname), Nextparam ()
	DefsList := Dp
  GotSegname:
	New!0 := Dp!0
	Dp!0 := New
     $)

//  This routine generates the entire linkage section.  LC must be zero at entry.

let WriteLinkage (StaticList) be
     $(	SectionHeader ("*fLinkage section - static variables and external links")

//  Calculate lengths of the various components of the linkage section.

	let HeaderLength, StaticLength, LinksLength = 8, 0, 0
	and t = StaticList
	until t = 0 do t, StaticLength := t!0, StaticLength + 1
	t := LinkList
	until t = 0 do t, LinksLength := t!0, LinksLength + 2
	unless LinksLength = 0 do StaticLength := StaticLength + 1 & Even	//  Links must start at evan address.
	let TotalLength = HeaderLength + StaticLength + LinksLength

//  Put out the linkage header.
	OutW2 (0, "linkage header")
	Reloc := RelText lshift Left
	OutW2 ((TextLength + 1 & Even) lshift Left, "address of defs")
	for i = 1 to 4 do OutW (0)
	Reloc := RelLink18 lshift Left
	OutW2 ((HeaderLength + StaticLength) lshift Left | TotalLength, "offset to links, total length")
	OutW2 (TotalLength, "obsolete length")		//  Still required by lot_maintainer in August 1973.

	if StaticList ne 0 do
	     $(	SectionHeader ("*nStatic variables")
		if Listing do
		     $(	WriteS ("*tuse*tlinkc*n")
			WriteS ("*tjoin*t/link/linkc*n")
		     $)
		t := StaticList
		until t = 0 do
		     $(	unless LC = t!1 + HeaderLength do CGreport (PhaseError, "WriteLinkage")
			Comment := t!2
			OutData (EvalNumber (t!3, t!4))
			t := t!0
		     $)
	     $)

	if LinkList ne 0 do
	     $(	unless (LC & 1) = 0 do OutW (0)	     //  Force even alignment for links.
		SectionHeader ("*nExternal link pairs")
		t := LinkList
		until t = 0 do
		     $(	DefineLab (t!2, LC)
			PutCode (LabelSwitch, t!2, LC)
			Comment := t!1
			Reloc := RelNegLink18 lshift Left
			OutW (-LC lshift Left logor Ft2)
			Reloc := RelDef lshift Left
			OutW (t!3 lshift Left)
			if Listing do
			     $(	let v, w = vec Vmax, vec Vmax
				Split (t!1, v, w)
				Format (OUTPUT, "*tlink*tL^d,<^s>|", t!2, v)
				test Length (w) = 0
				then WriteS (OUTPUT, "0*n")
				or Format (OUTPUT, "[^s]*n", w)
			     $)
			t := t!0
		     $)
	     $)

	unless LC = TotalLength do CGreport (PhaseError, "WriteLinkage")
     $)
