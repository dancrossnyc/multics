//  These routines store the object code in an internal representation.
//  Last modified on 06/06/74 at 18:22:35 by R F Mabee.
//  Changes for 6180 code generation installed with Version 3.4 by R F Mabee.
//  First installed with Version 2.7 of the compiler, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

let CompRel (r) be
     $(	test r = 0
	then $(	if AbsRelBits ge 1023 do PutAbsBits ()
		AbsRelBits := AbsRelBits + 1
	     $)
	or   $(	unless AbsRelBits = 0 do PutAbsBits ()
		PutBits (r, 5)
	     $)
     $)
and PutAbsBits () be
     $(	test AbsRelBits le 15
	then PutBits (0, AbsRelBits)
	or PutBits (RelExtendedAbs lshift 10 | AbsRelBits, 15)
	AbsRelBits := 0
     $)
and PutBits (r, n) be
     $(	RelbitsOffset := RelbitsOffset + n
	test RelbitsOffset le 36
	then RelbitsList!0 := RelbitsList!0 | r lshift (36 - RelbitsOffset)
	or   $(	RelbitsOffset := RelbitsOffset - 36
		RelbitsList!0 := RelbitsList!0 | r rshift RelbitsOffset
		let New = Newvec (1)
		RelbitsList!1 := New
		RelbitsList, RelbitsLength := New, RelbitsLength + 1
		RelbitsList!0 := r lshift (36 - RelbitsOffset)
	     $)
     $)

let PutCode (Flags, a, b) be
     $(	if CodeP ge CodeSize - 3 do
	     $(	let y = Newvec (CodeSize)
		CodeV!0, CodeV!1 := y, CodeP
		CodeV, CodeP := y, 2
	     $)
	CodeV!CodeP, CodeV!(CodeP + 1), CodeV!(CodeP + 2) := Flags, a, b
	CodeP := CodeP + 3
     $)
and OutWord (x, ListType) be
     $(	PutCode (Param lshift Left | ListType, x, Comment)
	CompRel (Reloc rshift Left)
	CompRel (Reloc & Right)
	LC, Param, Reloc, Comment := LC + 1, 0, 0, 0
     $)

let SetLineNumber (n) be
     $(	PutCode (LineCountSwitch, n)
	if LineMap do
	     $(	unless (LineMapList!0 rshift Left) = LC do
		     $(	let New = Newvec (1)
			LineMapList!1 := New
			LineMapList, LineMapLength := New, LineMapLength + 1
		     $)
		LineMapList!0 := LC lshift Left | n
	     $)
     $)
and SectionHeader (Comment) be
	PutCode (HeaderSwitch, 0, Comment)

let OutW (x) be
     $(	if Jumpsw return
	OutWord (x, CodeSwitch)
     $)
and OutW2 (x, c) be
     $(	Comment := c
	OutW (x)
     $)

and Outop (Op) be
     $(	if Jumpsw return
	let a, t = Address, Tag
	if Reloc = 0 then test t = 0 & Param ne 0
	then a, t := a - LC, t | Ic
	or if (t & TagPrMask) = Lp do Reloc := (t & Star) = 0 -> RelStat15 lshift Left, RelLink15 lshift Left
	if (t & TagPrMask) ne 0 do a := a & $877777
	let Ext, Rest = Op rshift 9, Op & $8777
	let Word = (a lshift 18) | (Rest lshift 9) | (Ext lshift 8) | t
	if Listing do
	     $(	WriteInstruction (Word, Param)
		Writech (OUTPUT, '*n')
	     $)
	OutWord (Word, InstructionSwitch)
     $)
and Outop2 (Op, P) be
     $(	Address, Tag, Param := 0, 0, P
	Outop (Op)
     $)
and Outop3 (Op, A, T) be
     $(	Address, Tag, Param := A, T, 0
	CheckAddr ()
	Outop (Op)
     $)
and Outop4 (Op, A, T, C) be
     $(	Address, Tag, Param, Comment := A, T, 0, C
	CheckAddr ()
	Outop (Op)
     $)

and OutData (w) be
     $(	if Jumpsw return
	if Listing do
	     $(	WriteData (w, Param)
		Writech (OUTPUT, '*n')
	     $)
	OutWord (w, DataSwitch)
     $)

and FormOpcode (Op, r) = valof
     $(	let OpAB, OpLP = nil, nil
	switchon Op into
	     $(	case Ada: case Als: case Ana: case Ansa:
		case Arl: case Asa: case Cmpa: case Era:
		case Ersa: case Lca: case Lda: case Ora:
		case Orsa: case Sba: case Ssa: case Sta:
			if r = Ar resultis Op
			if r = Qr resultis Op + 1
			endcase

		case Mpy: case Div:
			if r = Qr resultis Op
			endcase

		case Fad: case Fcmp: case Fdi: case Fdv:
		case Fld: case Fmp: case Fneg: case Fsb:
		case Fstr:
			if r = EAQr resultis Op
			endcase

		case Eax0: case Lxl0:
			switchon r into
			     $(	case Xr0:	resultis Op
				case Xr1:	resultis Op + 1
				case Xr2:	resultis Op + 2
				case Xr3: resultis Op + 3
				case Xr4:	resultis Op + 4
				case Xr5:	resultis Op + 5
				case Xr6:	resultis Op + 6
				case Xr7:	resultis Op + 7
				default:
			     $)
			endcase

		case Eabap:
			OpAB, OpLP := 1, Eablp - Eabap
			goto Bases
		case Eapap:
			OpAB, OpLP := Eapab - Eapap, Eaplp - Eapap
			goto Bases
		case Stpap:
			OpAB, OpLP := Stpab - Stpap, Stplp - Stpap
			goto Bases
		case Lprpap: case Sprpap:
			OpAB, OpLP := 1, 4		//  Normal case.
		  Bases:
			switchon r into
			     $(	case Apr:	resultis Op
				case Abr:	resultis Op + OpAB
				case Bpr:	resultis Op + 2
				case Bbr:	resultis Op + 2 + OpAB
				case Lpr:	resultis Op + OpLP
				case Lbr:	resultis Op + OpLP + OpAB
				case Spr:	resultis Op + OpLP + 2
				case Sbr:	resultis Op + OpLP + 2 + OpAB
				default:
			     $)
		default:
	     $)
	CGreport (BadRegOpPair, r, Op)
	resultis Op
     $)
and FormTag (r) = valof
  switchon r into
     $(	case Ar:	resultis Al
	case Qr:	resultis Ql
	case Xr0:	resultis X0
	case Xr1:	resultis X1
	case Xr2:	resultis X2
	case Xr3:	resultis X3
	case Xr4:	resultis X4
	case Xr5:	resultis X5
	case Xr6:	resultis X6
	case Xr7:	resultis X7
	case Apr:	resultis Ap
	case Abr:	resultis Ab
	case Bpr:	resultis Bp
	case Bbr:	resultis Bb
	case Lpr:	resultis Lp
	case Lbr:	resultis Lb
	case Spr:	resultis Sp
	case Sbr:	resultis Sb
	default:	CGreport (UnexpectedCase, r, "FormTag")
		resultis 0
	case 0:	resultis 0
     $)


and CheckAddr () be
     $(	manifest
	     $(	TwoToTheEighteenth = 1 lshift 18
		TwoToTheFourteenth = 1 lshift 14
	     $)
	unless - TwoToTheEighteenth le Address < TwoToTheEighteenth do CGreport (BadAddress, Address)
	if (Tag & $8100) ne 0 then unless - TwoToTheFourteenth le Address < TwoToTheFourteenth do
	     $(	let t, p, c = Tag, Param, Comment
		Tag, Param, Comment := Tag & TagXrMask, 0, "compute offset"
		Outop (Eax7)
		IndicatorsSetBy := Xr7
		Address, Tag, Param, Comment := 0, (t & not TagXrMask) | X7, p, c
	     $)
     $)
