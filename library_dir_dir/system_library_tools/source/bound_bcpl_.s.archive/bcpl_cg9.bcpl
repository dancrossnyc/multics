//  These routines write the assembly-format listing.
//  Last modified on 06/06/74 at 18:24:47 by R F Mabee.
//  Changes for 6180 code generation installed with Version 3.4 by R F Mabee.
//  First installed with Version 2.7 of the compiler, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

let OpcodeName (Op) = valof
  switchon Op into
     $(	default:		CGreport (UnexpectedCase, Op, "OpcodeName")
			resultis "<error>"

	case Abd:		resultis "abd"
	case Ada:		resultis "ada"
	case Ada + 1:	resultis "adq"
	case Adlx1:	resultis "adlx1"
	case Als:		resultis "als"
	case Als + 1:	resultis "qls"
	case Ana:		resultis "ana"
	case Ana + 1:	resultis "anq"
	case Ansa:	resultis "ansa"
	case Ansa + 1:	resultis "ansq"
	case Anx0:	resultis "anx0"
	case Aos:		resultis "aos"
	case Arl:		resultis "arl"
	case Arl + 1:	resultis "qrl"
	case Asa:		resultis "asa"
	case Asa + 1:	resultis "asq"
	case Cmpa:	resultis "cmpa"
	case Cmpa + 1:	resultis "cmpq"
	case Div:		resultis "div"
	case Dvf:		resultis "dvf"
	case Eabap:	resultis "eabap"
	case Eabap + 1:	resultis "eabab"
	case Eabap + 2:	resultis "eabbp"
	case Eabap + 3:	resultis "eabbb"
	case Eablp:	resultis "eablp"
	case Eablp + 1:	resultis "eablb"
	case Eapap:	resultis "eapap"
	case Eapab:	resultis "eapab"
	case Eapap + 2:	resultis "eapbp"
	case Eapab + 2:	resultis "eapbb"
	case Eaplp:	resultis "eaplp"
	case Eaplb:	resultis "eaplb"
	case Eaplp + 2:	resultis "eapsp"
	case Eaplb + 2:	resultis "eapsb"
	case Eax0:	resultis "eax0"
	case Eax0 + 1:	resultis "eax1"
	case Eax0 + 2:	resultis "eax2"
	case Eax0 + 3:	resultis "eax3"
	case Eax0 + 4:	resultis "eax4"
	case Eax0 + 5:	resultis "eax5"
	case Eax0 + 6:	resultis "eax6"
	case Eax0 + 7:	resultis "eax7"
	case Epaq:	resultis "epaq"
	case Era:		resultis "era"
	case Era + 1:	resultis "erq"
	case Ersa:	resultis "ersa"
	case Ersa + 1:	resultis "ersq"
	case Fad:		resultis "fad"
	case Fcmp:	resultis "fcmp"
	case Fdi:		resultis "fdi"
	case Fdv:		resultis "fdv"
	case Fld:		resultis "fld"
	case Fmp:		resultis "fmp"
	case Fneg:	resultis "fneg"
	case Fsb:		resultis "fsb"
	case Fstr:	resultis "fstr"
	case Fszn:	resultis "fszn"
	case Lca:		resultis "lca"
	case Lca + 1:	resultis "lcq"
	case Lda:		resultis "lda"
	case Lda + 1:	resultis "ldq"
	case Ldaq:	resultis "ldaq"
	case Ldx7:	resultis "ldx7"
	case Llr:		resultis "llr"
	case Lprpap:	resultis "lprpap"
	case Lprpap + 1:	resultis "lprpab"
	case Lprpap + 2:	resultis "lprpbp"
	case Lprpap + 3:	resultis "lprpbb"
	case Lprplp:	resultis "lprplp"
	case Lprplp + 1:	resultis "lprplb"
	case Lprplp + 2:	resultis "lprpsp"
	case Lprplp + 3:	resultis "lprpsb"
	case Lrl:		resultis "lrl"
	case Lxl0:	resultis "lxl0"
	case Lxl0 + 1:	resultis "lxl1"
	case Lxl0 + 2:	resultis "lxl2"
	case Lxl0 + 3:	resultis "lxl3"
	case Lxl0 + 4:	resultis "lxl4"
	case Lxl0 + 5:	resultis "lxl5"
	case Lxl0 + 6:	resultis "lxl6"
	case Lxl0 + 7:	resultis "lxl7"
	case Mpy:		resultis "mpy"
	case Neg:		resultis "neg"
	case Negl:	resultis "negl"
	case Ora:		resultis "ora"
	case Ora + 1:	resultis "orq"
	case Orsa:	resultis "orsa"
	case Orsa + 1:	resultis "orsq"
	case Sba:		resultis "sba"
	case Sba + 1:	resultis "sbq"
	case Sblx1:	resultis "sblx1"
	case Sprpap:	resultis "sprpap"
	case Sprpap + 1:	resultis "sprpab"
	case Sprpap + 2:	resultis "sprpbp"
	case Sprpap + 3:	resultis "sprpbb"
	case Sprplp:	resultis "sprplp"
	case Sprplp + 1:	resultis "sprplb"
	case Sprplp + 2:	resultis "sprpsp"
	case Sprplp + 3:	resultis "sprpsb"
	case Sreg:	resultis "sreg"
	case Ssa:		resultis "ssa"
	case Ssa + 1:	resultis "ssq"
	case Sta:		resultis "sta"
	case Sta + 1:	resultis "stq"
	case Staq:	resultis "staq"
	case Stb:		resultis "stb"
	case Stc1:	resultis "stc1"
	case Stcd:	resultis "stcd"
	case Stpap:	resultis "stpap"
	case Stpab:	resultis "stpab"
	case Stpap + 2:	resultis "stpbp"
	case Stpab + 2:	resultis "stpbb"
	case Stplp:	resultis "stplp"
	case Stplb:	resultis "stplb"
	case Stplp + 2:	resultis "stpsp"
	case Stplb + 2:	resultis "stpsb"
	case Stx0:	resultis "stx0"
	case Stz:		resultis "stz"
	case Sxl0:	resultis "sxl0"
	case Sxl1:	resultis "sxl1"
	case Szn:		resultis "szn"
	case Tmi:		resultis "tmi"
	case Tmoz:	resultis "tmoz"
	case Tnz:		resultis "tnz"
	case Tpl:		resultis "tpl"
	case Tpnz:	resultis "tpnz"
	case Tra:		resultis "tra"
	case Trc:		resultis "trc"
	case Tsbap:	resultis "tsbap"
	case Tsbbp:	resultis "tsbbp"
	case Tsblp:	resultis "tsblp"
	case Tsx0:	resultis "tsx0"
	case Tze:		resultis "tze"
     $)
and RegisterName (Reg) = valof
  switchon Reg & TagXrMask into
     $(	case 0:	resultis "n"
	case Au:	resultis "au"
	case Al:	resultis "al"
	case Qu:	resultis "qu"
	case Ql:	resultis "ql"
	case Du:	resultis "du"
	case Dl:	resultis "dl"
	case Ic:	resultis "ic"
	case X0:	resultis "x0"
	case X1:	resultis "x1"
	case X2:	resultis "x2"
	case X3:	resultis "x3"
	case X4:	resultis "x4"
	case X5:	resultis "x5"
	case X6:	resultis "x6"
	case X7:	resultis "x7"
     $)
and BaseName (Base) = valof
  switchon Base & TagPrMask into
     $(	case Ap:	resultis "ap"
	case Ab:	resultis "ab"
	case Bp:	resultis "bp"
	case Bb:	resultis "bb"
	case Lp:	resultis "lp"
	case Lb:	resultis "lb"
	case Sp:	resultis "sp"
	case Sb:	resultis "sb"
     $)

let WriteH (x) be
     $(	Writech (OUTPUT, '*s')
	for i = 15 to 0 by -3 do
		Writech (OUTPUT, '0' + ((x rshift i) & 7))
     $)
and WriteNcount (n) be
     $(	let v = vec 20
	ConvertNtoS (n, v, 10)
	WriteS (OUTPUT, v)
	Column := Column + Length (v)
     $)
and WriteAddress (Address, Param) be
     $(	if Param ne 0 do
	     $(	Writech (OUTPUT, 'L')
		Column := Column + 1
		WriteNcount (Param)
		if Address = 0 return
		if (Address & (1 lshift 17)) = 0 do
		     $(	Writech (OUTPUT, '+')
			Column := Column + 1
		     $)
	     $)
	if (Address & (1 lshift 17)) ne 0 do
	     $(	Writech (OUTPUT, '-')
		Column := Column + 1
		Address := - (Address | (true lshift 18))
	     $)
	WriteNcount (Address)
     $)

let WriteInstruction (Word, Param) be
     $(	Format (OUTPUT, "*t^s*t", OpcodeName ((Word rshift 9) & $8777 | (Word lshift 1) & $81000))
	if (Word & $8100) ne 0 do
	     $(	Format (OUTPUT, "^s|", BaseName (Word))
		Column := Column + 3
		test (Word & (1 lshift 32)) = 0
		then Word := Word & (true rshift 3)
		or Word := Word | (true lshift 33)
	     $)
	if (Word & $877) = Ic do Word := Word + (LC lshift 18) - Ic	//  Simulate ic modifier.
	WriteAddress (Word rshift Left, Param)
	if (Word & $877) ne 0 do
	     $(	let Reg = RegisterName (Word & $817)
		switchon Word & $860 into
		     $(	case $800:
				Format (OUTPUT, ",^s", Reg)
				Column := Column + Length (Reg) + 1
				endcase
			case $820:
				if (Word & $817) = 0 do Reg := ""
				Format (OUTPUT, ",^s**", Reg)
				Column := Column + Length (Reg) + 2
				endcase
			case $840:
				Format (OUTPUT, ",^o", Word & $877)
				Column := Column + 3
				endcase
			case $860:
				Format (OUTPUT, ",**^s", Reg)
				Column := Column + Length (Reg) + 2
		     $)
	     $)
     $)
and WriteData (Word, Param) be
     $(	WriteS (OUTPUT, "*tzero*t")
	WriteAddress (Word rshift Left, Param)
	if (Word & Right) ne 0 do
	     $(	Writech (OUTPUT, ',')
		Column := Column + 1
		WriteAddress (Word & Right, 0)
	     $)
     $)

let ListCodeItem (p) be
     $(	let Flags, Word, Comment = p!0, p!1, p!2
	switchon Flags & Right into
	     $(	case CodeSwitch:
		case InstructionSwitch:
		case DataSwitch:
		Writech (OUTPUT, GetRelCode ())
			Writech (OUTPUT, GetRelCode ())
			WriteH (LC)
			Writech (OUTPUT, '*s')
			WriteH (Word rshift 18)
			WriteH (Word & $8777777)
			Column := 0
			test (Flags & Right) = InstructionSwitch
			then $(	if LineCount ne 0 do
				     $(	Format (OUTPUT, "  ^d", LineCount)
					LineCount := 0
				     $)
				Writech (OUTPUT, '*t')
				let Param = Flags rshift Left
				if Param ne 0 test (Word & TagXrMask) = X1
					then Param := 0
					or Word := Word - (LookupLabel (Param) lshift 18)
				WriteInstruction (Word, Param)
			     $)
			or if (Flags & Right) = DataSwitch do
			     $(	Writech (OUTPUT, '*t')
				WriteData (Word, 0)
			     $)
			if Comment ne 0 do
			     $(	if Column < 10 do Writech (OUTPUT, '*t')
				Format (OUTPUT, "*t*" ^s", Comment)
			     $)
			Writech (OUTPUT, '*n')
			LC := LC + 1
			return

		case LabelSwitch:
			Format (OUTPUT, "*t*t*tL^d:*n", Word)
			return

		case LineCountSwitch:
			LineCount := Word
			return

		case HeaderSwitch:
			let v = vec Vmax
			Unpackstring (Comment, v)
			Format (OUTPUT, "^c*t*"*t", v!1)
			for i = 2 to v!0 do Writech (OUTPUT, v!i)
			WriteS (OUTPUT, "*n*n")
			return

		case SectionSwitch:
			LC := Word
			RelbitsList, RelbitsOffset, AbsRelBits := Comment, 0, 0
			return

		default:	CGreport (UnexpectedCase, Flags, "ListCodeItem")
	     $)
     $)
and GetRelCode () = valof
     $(	if AbsRelBits > 0 do
	     $(	AbsRelBits := AbsRelBits - 1
		resultis 'a'
	     $)
	if GetBits (1) = 0 resultis 'a'
	let c = GetBits (4)
	if c = (RelExtendedAbs & $817) do
	     $(	AbsRelBits := GetBits (10) - 1
		resultis 'a'
	     $)
	resultis '0' + c
     $)
and GetBits (n) = valof
     $(	RelbitsOffset := RelbitsOffset + n
	if RelbitsList = 0 do
	     $(	CGreport (PhaseError, "GetBits")
		resultis 0
	     $)
	let r = nil
	test RelbitsOffset le 36
	then r := RelbitsList!0 rshift (36 - RelbitsOffset)
	or   $(	RelbitsOffset := RelbitsOffset - 36
		r := RelbitsList!0 lshift RelbitsOffset
		RelbitsList := RelbitsList!1
		r := r | RelbitsList!0 rshift (36 - RelbitsOffset)
	     $)
	resultis r & true rshift (36 - n)
     $)
