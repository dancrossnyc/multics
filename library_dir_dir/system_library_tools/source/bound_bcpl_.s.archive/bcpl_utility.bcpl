//  Simple routines used throughout the compiler.
//  Last modified on 08/06/74 at 17:34:26 by R F Mabee.
//  Prepared for installation as Version 3.4 after 6180 bootstrap, R F Mabee.
//  First installed as Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"
get "bcpl_compiler_head"
get "bcpl_metering_head"

external
     $(	TranslatorInfo = "translator_info_$get_source_info"
			//  call translator_info_$get_source_info (pointer, return dir name, return entry name,
			//					return 52-bit DTM, return UID, return code)
	DateTime = "date_time_"	//  call date_time_ (52-bit time, return 24-character date-time string)
	MaxSegSize = "sys_info$max_seg_size"	//  dcl sys_info$max_seg_size external static fixed binary
     $)
global
     $(	TimeNotAccountedFor	: 158		//  Metering temporaries.
	TimingFudgeFactor	: 159

	FreeareaP		: 160
	FreeareaT		: 161
	FreeList		: 162
	FreeListArray	: 163
	TempsegID		: 164
	ParamNumber	: 165
	GetP		: 166
     $)
static
     $(	OverflowCount = 0  $)

let Newvec (n) = valof
     $(	if n < 0 do n := 0
	test n < 20
	then $(	let p = FreeListArray!n
		unless p = 0 do
		     $(	FreeListArray!n := p!0
			resultis p
		     $)
	     $)
	or   $(	let q = lv FreeList
		     $(	let p = rv q
			if p = 0 break
			if p!1 = n do
			     $(	rv q := p!0
				resultis p
			     $)
			q := lv p!0
		     $)	repeat
	     $)

	let p = FreeareaP
	FreeareaP := FreeareaP + n + 1
	if FreeareaP < FreeareaT resultis p
	Errcode := 0
	unless TempsegID = 0 do Complain ("Out of space in Newvec.")
	OverflowCount := OverflowCount + 1
	TempsegID := OverflowCount
	p := MakeTempSeg (TempsegID, "Newvec")
	FreeareaP, FreeareaT := p + n + 1, p + rv MaxSegSize
	resultis p
     $)
and List1 (a) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 1
	if FreeareaP > FreeareaT do p := Newvec (0)
	p!0 := a
	resultis p
     $)
and List2 (a, b) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 2
	if FreeareaP > FreeareaT do p := Newvec (1)
	p!0, p!1 := a, b
	resultis p
     $)
and List3 (a, b, c) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 3
	if FreeareaP > FreeareaT do p := Newvec (2)
	p!0, p!1, p!2 := a, b, c
	resultis p
     $)
and List4 (a, b, c, d) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 4
	if FreeareaP > FreeareaT do p := Newvec (3)
	p!0, p!1, p!2, p!3 := a, b, c, d
	resultis p
     $)
and List5 (a, b, c, d, e) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 5
	if FreeareaP > FreeareaT do p := Newvec (4)
	p!0, p!1, p!2, p!3, p!4 := a, b, c, d, e
	resultis p
     $)
and List6 (a, b, c, d, e, f) = valof
     $(	let p = FreeareaP
	FreeareaP := FreeareaP + 6
	if FreeareaP > FreeareaT do p := Newvec (5)
	p!0, p!1, p!2, p!3, p!4, p!5 := a, b, c, d, e, f
	resultis p
     $)
and Freevec (p, n) be
     $(	test n < 20
	then $(	p!0 := FreeListArray!n
		FreeListArray!n := p
	     $)
	or   $(	p!0, p!1 := FreeList, n
		FreeList := p
	     $)
     $)
and StoreString (s) = valof		//  Make safe-stored copy of string s in free storage.
     $(	let l = LengthInWords (s)
	let x = Newvec (l - 1)
	Move (x, s, l)
	resultis x
     $)

let MakeTimeString (t) = valof	//  Convert double-word time to string and allocate it.
     $(	let v, w = vec 24, vec 24
	call DateTime (t fixed double, w char 24)
	MakeBcplString (w, 24, v)
	resultis StoreString (v)
     $)


let Nextparam () = valof
     $(	ParamNumber := ParamNumber + 1
	resultis ParamNumber
     $)

let GetStream (Arg, ParentStream) be		//  Open new stream for input.
     $(	let Name = vec Vmax
	RemoveEscapes (Arg, Name)
	FileNames!FileCount := StoreString (Name)
	Concatenate (Name, Vmax, Name, ".bcpl")
	INPUT := ParentStream = 0 -> Open (PathName + Read + MultiSegmentFile, Name),
				Open (SearchName + Read + MultiSegmentFile, Name, ParentStream)
	unless Errcode = 0 do Complain (Name)

//  Acquire and save some information about the source file needed for the symbol table.
	let Dir, Ent = vec 50, vec 10
	and Path, w = vec 50, vec 10
	let Info = lv FilesInfo!(FileCount * 4)
	call TranslatorInfo (ITS (StreamPointer (INPUT), w) pointer, Dir char 168, Ent char 32, lv Info!2 fixed double,
							lv Info!1 bit 36, lv Errcode)
	unless Errcode = 0 do Complain (Name)
	Info!0 := StoreString (JoinPathname (Dir, Ent, Path))

	LineCount := FileCount lshift FileShift		//  Reset counter to agree with new stream.
     $)

let PushInput (NewName) be		//  Open new stream, saving current stream and line count.
     $(	FileCount := FileCount + 1
	if FileCount ge 32 do Complain ("The number of head files has exceeded the implementation limit of 32.")
	let x = Newvec (2)
	x!0, x!1, x!2 := GetP, INPUT, LineCount
	GetP := x
	INPUT := 0		//  Policy: INPUT should not be a duplicate or closed stream.
	GetStream (NewName, GetP!1)
     $)
and PopInput () be			//  Revert to previous stream.
     $(	Close (INPUT)
	INPUT, LineCount := GetP!1, GetP!2
	let x = GetP
	GetP := GetP!0
	Freevec (x, 2)
     $)

let SaveOldUsage () = valof		//  Half of the metering provision.
     $(	let T = GetCpuUsage ()
	let R = TimeNotAccountedFor
	TimeNotAccountedFor := T
	resultis R - T
     $)
and RecordUsage (MeterSlot, OldT) be	//  Other half, called at end of interval to be metered.
     $(	let T = GetCpuUsage ()
	MeterData!MeterSlot := MeterData!MeterSlot + (T - TimeNotAccountedFor - TimingFudgeFactor)
	MeterData!(MeterSlot + 1) := MeterData!(MeterSlot + 1) + 1
	TimeNotAccountedFor := T + OldT + TimingFudgeFactor
     $)

let FormCharconst (s) = valof
     $(	let R, v, w = 0, vec Vmax, vec Vmax
	Unpackstring (RemoveEscapes (s, v), w)
	for i = 1 to w!0 do R := R lshift ByteSize | w!i
	resultis R
     $)
and FormStringconst (s, Space) = valof		//  Returns length in words (minus one).
     $(	let v, w = vec Vmax, vec Vmax + 4	//  Form a BCPL-format string explicitly -
	Unpackstring (RemoveEscapes (s, v), w)	//  this is where the string format is defined.
	let Len, Nwords = w!0, 0
	w!(Len + 1), w!(Len + 2), w!(Len + 3) := 0, 0, 0
	test Machine = 6180
	then $(	Space!0 := Len lshift 18 | w!1 lshift 9 | w!2
		Nwords := 1
		for i = 3 to Len by 4 do
		     $(	Space!Nwords := w!i lshift 27 | w!(i + 1) lshift 18 | w!(i + 2) lshift 9 | w!(i + 3)
			Nwords := Nwords + 1
		     $)
	     $)
	or for i = 0 to Len by 4 do
	     $(	Space!Nwords := w!i lshift 27 | w!(i + 1) lshift 18 | w!(i + 2) lshift 9 | w!(i + 3)
		Nwords := Nwords + 1
	     $)
	resultis Nwords - 1
     $)

let UtilitiesInit (v, Len, StartingTime) be
     $(	TempsegID, FreeList := 0, 0
	FreeListArray := v
	for i = 0 to 20 do FreeListArray!i := 0
	FreeareaP, FreeareaT := v + 21, v + Len

	ParamNumber := 0

	FileNames, FileCount, FilesInfo := Newvec (32), 0, Newvec (32 * 4)
	FilesInfo := (FilesInfo + 1) & Even		//  Even alignment required to hold clock values.
	GetP, INPUT := 0, 0

	if Metering do
	     $(	MeterData := Newvec (Meters_Length)
		for i = 0 to Meters_Length do MeterData!i := 0
		TimeNotAccountedFor, TimingFudgeFactor := StartingTime, 0
		let t = vec 10		//  Calculate time spent to read clock.
		RecordUsage (MeteringOverhead_Meter, SaveOldUsage ())
		MeterData!MeteringOverhead_Meter := 0		//  First time doesn't count.
		for i = 1 to 10 do t!i := SaveOldUsage ()
		for i = 10 to 1 by -1 do RecordUsage (MeteringOverhead_Meter, t!i)
		TimingFudgeFactor := MeterData!MeteringOverhead_Meter / 19
	     $)
     $)
and Cleanup () be			//  Things that get done on normal or abnormal termination.
     $(	until GetP = 0 do
	     $(	Close (GetP!1)
		GetP := GetP!0
	     $)
	unless TempsegID = 0 do
	     $(	DeleteTempSeg (TempsegID, "Newvec")
		TempsegID := 0
	     $)
	unless INPUT = 0 do
	     $(	Close (INPUT)
		INPUT := 0
	     $)
     $)
