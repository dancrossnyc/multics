//  Miscellaneous short routines for Trans.
//  Last modified on 06/06/74 at 18:26:32 by R F Mabee.
//  Installed on 6180 as Version 3.4 by R F Mabee.
//  First installed as part of Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"

let Addname (x, Type, Val) be
     $(	test (x!0 & Right) = NAME_S
	then $(	let New = Newvec (DvecSize)
		New!DvecSize := DvecP
		DvecP := New
		DvecP!0, DvecP!1, DvecP!2, DvecP!3 := x, Type, Val, x!2
	     $)
	or Transreport (NotName, x)
     $)
and Checkdistinct () be
     $(	let Cp = DvecP
	until Cp = DvecC do
	     $(	let b, Dict = Cp!DvecSize, Cp!0
		until b = DvecC do
		     $(	if b!0 = Dict do
			     $(	Transreport (DupName, Dict)
				break
			     $)
			b := b!DvecSize
		     $)
		Dict!2 := Cp
		Cp := Cp!DvecSize
	     $)
	DvecC := DvecP
     $)
and Cellwithname (Name) = valof
     $(	let Dp = Name!2
	if Dp = 0 do
	     $(	Transreport (UndefName, Name)
		Addname (Name, GLOBAL_S, 0)		//  Create dummy declaration to avoid extra error messages.
		Name!2, DvecC, Dp := DvecP, DvecP, DvecP
	     $)
	resultis Dp
     $)
and Removenames (p) be
     $(	until DvecP = p do
	     $(	if DvecP!1 = LOCAL_S do DeallocateLocal (DvecP!2 & Right)		//  Reclaim space.
		DvecP!0!2 := DvecP!3
		let Old = DvecP
		DvecP := DvecP!DvecSize
		DvecC := DvecP
		Freevec (Old, DvecSize)
	     $)
     $)
and SaveEnv () = valof
     $(	let t, u = DvecP, 0
	until t = EnvBase do
	     $(	let New = Newvec (DvecSize)
		New!0, New!1, New!2, New!3 := t!0, t!1, t!2, t!3
		New!DvecSize := u
		u := New
		t := t!DvecSize
	     $)
	resultis u
     $)
and RestoreEnv (u) be
     $(	until u = 0 do
	     $(	let Old = u
		u := Old!DvecSize
		Old!DvecSize := DvecP
		DvecP := Old
		DvecP!0!2 := DvecP
	     $)
     $)

and Declnames (x) be
     $(	switchon x!0 & Right into
	     $(	default:	return		//  Error message for this case is produced later.

		case AND_S:
			Declnames (x!1)
			Declnames (x!2)
			return

		case VALDEF_S:
			WalkList (x!1, Addlocal, 0)
			return

		case FNDEF_S:
		case RTDEF_S:
			let L = Nextparam ()
			let T = x!1!2		//  Previous value of this name.
			if T ne 0 then if T!1 = EXTERNAL_S do
				DefList := List3 (DefList, T!2, L)
			Addname (x!1, RTDEF_S, L)
			return
	     $)
     $)
and Transdef (x) be
     $(
  Top:	let Op = x!0
	     $(	let NewLine = Op rshift Left
		if NewLine ne LineCount & (NewLine rshift FileShift) = 0 do GenerateLineNumber (NewLine)
		LineCount := NewLine
	     $)
	Op := Op & Right
	switchon Op into
	     $(	default:	CGreport (UnexpectedCase, Op, "Transdef")
			return

		case AND_S:
			     $(	let a, b = x!1, x!2
				if (RandomI () & 1) ne 0 do a, b := x!2, x!1	//  Make order undefined.
				Transdef (a)
				x := b		//  Same as "Transdef (b); return" but saves stack space.
				goto Top
			     $)

		case VALDEF_S:
			Assignlist (x!1, x!2)
			return

		case FNDEF_S:
		case RTDEF_S:
			test InsideRtdef
			then $(	let New = Newvec (3)
				New!0, New!1, New!2, New!3 := x, SaveEnv (), RtdefNesting, RtdefList
				RtdefList := New
			     $)
			or   $(	InsideRtdef, RtdefNesting, EnvBase := true, 1, DvecP
				TransRtdef (x)
				Removenames (EnvBase)
				until RtdefList = 0 do		//  Translate all embedded routines.
				     $(	let Old = RtdefList
					RtdefList := Old!3
					RestoreEnv (Old!1)
					RtdefNesting := Old!2 + 1
						TransRtdef (Old!0)
					Removenames (EnvBase)
					Freevec (Old, 3)
				     $)
				InsideRtdef, RtdefNesting := false, 0
			     $)
	     $)
     $)
and TransRtdef (x) be
     $(	let FunctSw, MainSw = ((x!0 & Right) = FNDEF_S), (x!5 = MAIN_S)
	and Dp = DvecP
	and M = Cellwithname (x!1)!2		//  Label of entry point.
	WalkList (x!2, AddFormalParameter, 0)
	Decllabels (x!4)
	Checkdistinct ()
	GenerateRtdefBegin (M, x!1!1, FunctSw, MainSw)
	ResetSSP (ListSize (x!2))		//  First n locals are formal parameters.
	test FunctSw
	then $(	let Desc = vec DescSize
		ReturnLabel := 0		//  RETURN not allowed in function definition.
		CompileOperand (x!3, Desc)
		GenerateRtdefEnd (Desc)
	     $)
	or   $(	ReturnLabel := Nextparam ()
		Transbody (x!3)
		GenerateLabel (ReturnLabel)
		GenerateRtdefEnd (0)
	     $)

	Removenames (Dp)
	PutBackTemps (0)
	until FreeLocalList = 0 do
	     $(	let t = FreeLocalList
		FreeLocalList := FreeLocalList!2
		Freevec (t, 2)
	     $)
	SSP := 0
     $)
and AddFormalParameter (Name, Loc) be
	unless (Name!0 & Right) = NIL_S do Addname (Name, LOCAL_S, (RtdefNesting lshift Left) | Loc)
and Decllabels (x) be
     $(	until x = 0 do
	     $(	let L = Nextparam ()
		Addname (x!1, LABEL_S, L)
		x!4 := L
		x := x!3
	     $)
     $)

and Addlocal (x) be
     $(	let p = AllocateLocal (1)
	Addname (x, LOCAL_S, p logor (RtdefNesting lshift Left))
     $)

let Declitem (Op, Name, Val) be
     $(	let n = valof switchon Op into
	     $(	case EXTERNAL_S:
			unless Val = 0 do
			     $(	if (Val!0 & Right) = STRINGCONST_S resultis Val!1
				Transreport (BadLink, Val)
			     $)
			resultis Name!1

		case MANIFEST_S:
			let v = vec 2
			PartialEvalconst (Val, v)
			Op := v!0
			resultis v!1

		case GLOBAL_S:
			resultis Evalconst (Val)

		case STATIC_S:
			let New = Newvec (4)
			New!0, New!1, New!2 := 0, StaticAllocationCounter, Name!1
			PartialEvalconst (Val, lv New!3)
			test StaticList = 0
			then StaticFirst := New
			or StaticList!0 := New
			StaticList := New
			StaticAllocationCounter := StaticAllocationCounter + 1
			resultis StaticAllocationCounter - 1

		default:	CGreport (UnexpectedCase, Op, "Declitem")
			resultis Val
	     $)
	Addname (Name, Op, n)
     $)
