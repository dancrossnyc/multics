//  Functions to aid CompileExpression in evaluating expressions.
//  Last modified on 06/06/74 at 18:27:11 by R F Mabee.
//  First installed with Version 3.4 by R F Mabee.
//  Written in March 1973 as part of cleanup accompanying 6180 bootstrap.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"

let CountTemporaries (x) = valof
     $(	switchon x!0 & Right into
	     $(	case NAME_S:
			resultis IsNameConst (Cellwithname (x)) -> 0, 1

		case NUMBER_S:
		case CHARCONST_S:
		case CONSTANT_S:
		case TRUE_S:
		case FALSE_S:
		case NIL_S:
			resultis 0

		case STRINGCONST_S:
		case TABLE_S:
		case VEC_S:
			resultis 1

		case POS_S: case POS_F:
		case NEG_S: case NEG_F:
		case NOT_S:
		case RV_S:
		case LV_S:
			let C = CountTemporaries (x!1)
			if C = 1 resultis 2
			resultis C

		case PLUS_S: case PLUS_F:
		case MINUS_S: case MINUS_F:
		case MULT_S: case MULT_F:
		case DIV_S: case DIV_F:
		case REM_S:
		case LOGOR_S:
		case LOGAND_S:
		case EQV_S:
		case NEQV_S:
		case LSHIFT_S:
		case RSHIFT_S:
		case VECAP_S:
			let C1, C2 = CountTemporaries (x!1), CountTemporaries (x!2)
			if C1 = 0 do
			     $(	if C2 = 0 resultis 0
				C1 := 1
			     $)
			if C1 > C2 resultis C1
			if C1 < C2 resultis C2
			resultis C1 + 1

		case FNAP_S:
		case VALOF_S:
		case COND_S:
		case REL_S:
		case LIST_S:
		default:	resultis 100		//  Don't know, guess wild.
	     $)
     $)
and IsNameConst (T) = valof
  switchon T!1 into
     $(	case CONSTANT_S: case NUMBER_S: case CHARCONST_S: case TRUE_S: case FALSE_S:
		resultis true
	default:	resultis false
     $)
let PartialEvalconst (x, v) be
     $(	let Op = x!0 & Right
	switchon Op into
	     $(	case NAME_S:
			let T = Cellwithname (x)
			unless IsNameConst (T) endcase
			v!0, v!1 := T!1, T!2
			return
		case NUMBER_S:
		case CHARCONST_S:
			v!0, v!1 := Op, x!1
			return
		case TRUE_S:
		case FALSE_S:
			v!0, v!1 := Op, Op = TRUE_S
			return
		default:
	     $)
	v!0, v!1 := CONSTANT_S, Evalconst (x)
     $)
and FinalEvalconst (Op, N) = valof
  switchon Op into
     $(	case NUMBER_S:	resultis ConvertStoN (N)
	case CHARCONST_S:	resultis FormCharconst (N)
	case TRUE_S:	resultis true
	case FALSE_S:	resultis false
	case CONSTANT_S:	resultis N
	default:		CGreport (UnexpectedCase, Op, "FinalEvalconst")
			resultis N
     $)

and Evalconst (x) = valof
     $(	let Op = x!0 & Right
	switchon Op into
	     $(	case NAME_S:
			     $(	let T = Cellwithname (x)
				unless IsNameConst (T) endcase		//  Go produce error message.
				resultis FinalEvalconst (T!1, T!2)
			     $)

		case NUMBER_S:
		case CHARCONST_S:
		case TRUE_S:
		case FALSE_S:
			resultis FinalEvalconst (Op, x!1)

		case CONSTANT_S:
			resultis x!1

		case POS_S: case POS_F:
		case NEG_S: case NEG_F:
		case NOT_S:
			resultis EvaluateOperator (Op, Evalconst (x!1))

		case PLUS_S: case PLUS_F:
		case MINUS_S: case MINUS_F:
		case MULT_S: case MULT_F:
		case DIV_S: case DIV_F:
		case REM_S:
		case LOGOR_S:
		case LOGAND_S:
		case EQV_S:
		case NEQV_S:
		case LSHIFT_S:
		case RSHIFT_S:
			resultis EvaluateOperator (Op, Evalconst (x!1), Evalconst (x!2))

		case COND_S:
			resultis Evalconst (Evalconst (x!1) -> x!2, x!3)

		case REL_S:
			x := x!1
			     $(	let A = Evalconst (x!1)
				while IsRelational (x!2) do
				     $(	let Middle = Evalconst (x!2!1)
					unless EvaluateOperator (x!0 & Right, A, Middle) resultis false
					x, A := x!2, Middle
				     $)
				resultis EvaluateOperator (x!0 & Right, A, Evalconst (x!2))
			     $)

		case VECAP_S:
			if (x!1!0 & Right) = STRINGCONST_S do
			     $(	let v = vec Vmax
				let Len = FormStringconst (x!1!1, v)
				let i = Evalconst (x!2)
				if 0 le i le Len resultis v!i
			     $)
			endcase

		default:
	     $)
//  Fall out to here if not a valid constant expression.
	Transreport (NotConstant, x)
	resultis RandomI ()
     $)

and IsRelational (x) = valof
	switchon x!0 & Right into
	     $(	case EQ_S: case EQ_F:
		case NE_S: case NE_F:
		case LS_S: case LS_F:
		case LE_S: case LE_F:
		case GR_S: case GR_F:
			resultis true

		default:	resultis false
	     $)

and EvaluateOperator (Op, a, b) = valof switchon Op into
     $(	default:		CGreport (UnexpectedCase, Op, "EvaluateOperator")
			resultis RandomI ()

	case POS_S:	resultis  + a
	case POS_F:	resultis .+ a
	case NEG_S:	resultis  - a
	case NEG_F:	resultis .- a
	case NOT_S:	resultis not a

	case PLUS_S:	resultis a  + b
	case PLUS_F:	resultis a .+ b
	case MINUS_S:	resultis a  - b
	case MINUS_F:	resultis a .- b
	case MULT_S:	resultis a  * b
	case MULT_F:	resultis a .* b
	case DIV_S:	resultis a  / b
	case DIV_F:	resultis a ./ b
	case REM_S:	resultis a rem b
	case EQV_S:	resultis a eqv b
	case NEQV_S:	resultis a neqv b
	case LOGOR_S:	resultis a logor b
	case LOGAND_S:	resultis a logand b

	case LSHIFT_S:	resultis a lshift b
	case RSHIFT_S:	resultis a rshift b
	case EQ_S:	resultis a  = b
	case EQ_F:	resultis a .= b
	case NE_S:	resultis a  ne b
	case NE_F:	resultis a .ne b
	case LS_S:	resultis a  < b
	case LS_F:	resultis a .< b
	case LE_S:	resultis a  le b
	case LE_F:	resultis a .le b
	case GR_S:	resultis a  > b
	case GR_F:	resultis a .> b
	case GE_S:	resultis a  ge b
	case GE_F:	resultis a .ge b
     $)

let IsConst (x) = valof
     $(
  Top:	switchon x!0 & Right into
	     $(	case NAME_S:
			resultis IsNameConst (Cellwithname (x))

		case NUMBER_S:
		case CHARCONST_S:
		case CONSTANT_S:
		case TRUE_S:
		case FALSE_S:
			resultis true

		case POS_S: case POS_F:
		case NEG_S: case NEG_F:
		case NOT_S:
		case REL_S:
			x := x!1
			goto Top

		case PLUS_S: case PLUS_F:
		case MINUS_S: case MINUS_F:
		case MULT_S: case MULT_F:
		case DIV_S: case DIV_F:
		case REM_S:
		case LOGOR_S:
		case LOGAND_S:
		case EQV_S:
		case NEQV_S:
		case LSHIFT_S:
		case RSHIFT_S:
		case EQ_S: case EQ_F:
		case NE_S: case NE_F:
		case LS_S: case LS_F:
		case LE_S: case LE_F:
		case GR_S: case GR_F:
		case GE_S: case GE_F:
			unless IsConst (x!1) resultis false
			x := x!2
			goto Top

		case COND_S:
			if IsConst (x!1) resultis IsConst (Evalconst (x!1) -> x!2, x!3)
			resultis false

		default:	resultis false
	     $)
     $)
