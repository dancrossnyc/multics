//  Error reporting routines for all phases of the BCPL compiler.
//  Last modified on 06/06/74 at 18:26:13 by R F Mabee.
//  Revisions for 6180 bootstrap installed with Version 3.4, R F Mabee.
//  First installed as Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_compiler_head"
get "bcpl_lex_codes"
get "bcpl_cae_codes"
get "bcpl_trans_codes"
get "bcpl_cg_codes"

let WriteMessage (Stream, n, a, b) be
     $(	let Fatal = true
	let s = valof switchon n into
	     $(	default:	resultis "Unknown error code"

		//  General-purpose error message.
		case UnexpectedCase:
			resultis "Internal error - case ^d not expected in ^s"

		//  Lexical analysis error messages.
		case BadCharacter:
			resultis "Illegal character ^o"

		case BadDollar:
			resultis "Illegal character after '$' ^o"

		case BadFloat:
			resultis "Illegal use of '.'"

		case BadNumber:
			resultis "Malformed number"

		case BadSystemword:
			resultis "Unknown system word ^s"

		case GetStringMissing:
			resultis "File name missing after 'get'"

		case TokenTooLong:
			Fatal := false
			resultis "String part of token exceeds implementation limit of ^d characters"

		//  Syntactic analysis error messages.
		case BlockExpected:
			resultis "Block expected"

		case ExpressionMissing:
			resultis "Expression missing"

		case IncompleteCommand:
			resultis "Incomplete command"

		case MalformedDeclaration:
			resultis "Malformed declaration"

		case MalformedTest:
			resultis "Malformed 'test' command"

		case MisplacedDeclaration:
			resultis "Misplaced declaration"

		case MissingCOLON:
			Fatal := false
			resultis "Missing colon"

		case MissingCOMMA:
			Fatal := false
			resultis "Missing comma"

		case MissingDO:
			Fatal := false
			resultis "Missing 'do'"

		case MissingINTO:
			Fatal := false
			resultis "Missing 'into'"

		case MissingRKET:
			Fatal := false
			resultis "Missing ')'"

		case MissingSECTKET:
			resultis "Closing section bracket missing"

		case MissingSKET:
			Fatal := false
			resultis "Missing ']'"

		case MissingTO:
			Fatal := false
			resultis "Missing 'to'"

		case NameExpected:
			resultis "Name expected"

		case PrematureTermination:
			resultis "Program is prematurely terminated"


		case UnrecognizedCommand:
			resultis "Unrecognized command"

		case ValdefExpected:
			resultis "'=' expected in 'for' command"

		//  Semantic translation error messages.
		case BadCall:
			resultis "Bad format in 'call' command"

		case BadDescriptors:
			resultis "Incompatible descriptor information in 'call' command."

		case BadLink:
			resultis "Unrecognized expression in external declaration (^s)"

		case Conformality:
			resultis "Conformality error - lists in assignment different lengths"

		case DupDefault:
			resultis "Two defaults in one switchon"

		case DupName:
			resultis "Duplicate name ^s"

		case FreeVar:
			resultis "Reference to a variable ^s local to another routine body"

		case LmodeRequired:
			resultis "Expression invalid for Lmode context (^s)"

		case NegVector:
			resultis "Vector length is negative"

		case NoLoop:
			resultis "Command ^s not inside a loop"

		case NoSwitch:
			resultis "Command ^s not inside a switchon"

		case NotConstant:
			resultis "Expression invalid for constant context (^s)"

		case NotInsideRtdef:
			resultis "Command ^s not inside a routine body"

		case NotName:
			resultis "Name expected in definition"

		case NoValof:
			resultis "Command ^s not inside a valof block"

		case UndefName:
			resultis "Undefined name ^s"

		case UnrecognizedExpression:
			resultis "Expression could not be recognized (^s)"

		//  Code generator error messages.
		case BadAddress:
			resultis "Compiler error: Address field too large ^o"

		case BadLabel:
			resultis "Compiler error: Internal label ^d out of range"

		case BadRegOpPair:
			resultis "Compiler error: Incompatible register/opcode pair in FormOpcode ^o/^o"

		case DupCase:
			resultis "Duplicate case constant ^d"

		case DupLabel:
			resultis "Compiler error: Internal label ^d doubly defined"

		case LinkRefersThis:
			Fatal := false
			resultis "External reference to same segment ^s"

		case OverCase:
			resultis "The number of cases in a switchon exceeds the implementation limit of ^d"

		case PhaseError:
			resultis "Compiler error: Discrepancy between passes detected in ^s"

		case UndefLab:
			resultis "Compiler error: Internal label ^d not defined"
	     $)

	Errorsw := Errorsw | Fatal

	Format (Stream, "Error ^d: ", n)
	Format (Stream, s, a, b)
	unless LineCount = 0 do Format (Stream, " in line ^d", LineCount & LineMask)
	let f = LineCount rshift FileShift
	unless f = 0 do Format (Stream, " of file ^s", FileNames!f)
	WriteS (Stream, ".*n")
     $)

let CaeReport (n, a, b) be
     $(	unless QuietSw do WriteMessage (MONITOR, n, a, b)
	if HaveListingFile do
	     $(	Writech (OUTPUT, '*n')
		WriteMessage (OUTPUT, n, a, b)
	     $)
     $)
and Transreport (n, x) be
     $(	let Id = ""
	unless x = 0 do
	     $(	Id := FindPrintName (x)
		if LineCount = 0 do LineCount := x!0 rshift Left
	     $)
	CaeReport (n, Id)
     $)
and CGreport (n, a, b) be
	CaeReport (n, a, b)
