//  This routine walks the command nodes of the tree.
//  Last modified on 06/06/74 at 18:26:24 by R F Mabee.
//  Installed with Version 3.4 for 6180 bootstrap by R F Mabee.
//  First installed as Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"

let Transbody (x) be
     $(
  Top:	if x = 0 return
	let Op = x!0
	     $(	let NewLine = Op rshift Left
		if NewLine ne LineCount & (NewLine rshift FileShift) = 0 do GenerateLineNumber (NewLine)
		LineCount := NewLine
	     $)
	Op := Op & Right
	let a, b = x!1, x!2
	let s, p = nil, nil
	switchon Op into
	     $(	default:	CGreport (UnexpectedCase, Op, "Transbody")
			return

		case LET_S:
			s, p := SSP, DvecP
			Declnames (a)
			Checkdistinct ()
			Transdef (a)
			Transbody (b)
			Removenames (p)
			ResetSSP (s)
			return

		case MANIFEST_S:
		case EXTERNAL_S:
		case STATIC_S:
		case GLOBAL_S:
			p := DvecP
			until a = 0 do
			     $(	Declitem (Op, a!1, a!2)
				a := a!3
			     $)
			Checkdistinct ()
			Transbody (b)
			Removenames (p)
			return

		case LABDEF_S:
			p := DvecP
			Decllabels (b)
			Checkdistinct ()
			Transbody (a)
			Removenames (p)
			return

		case ASSIGN_S:
			Assignlist (a, b)
			return

		case SEMICOLON_S:
			Transbody (a)
			x := b			//  Same as "Transbody (b); return" but saves stack space.
			goto Top

		case RTAP_S:
			TransFnap (0, a, b)
			return

		case CALL_S:
			TransSystemCall (a)
			return

		case GOTO_S:
			p := Target (x)
			test p ne 0
			then GenerateJump (p)		//  Optimize common hop.
			or   $(	let PT, Desc = PendingTemps, vec DescSize
				CompileOperand (a, Desc)
				GenerateGoto (Desc)
				PutBackTemps (PT)
			     $)
			return

		case COLON_S:
			GenerateLabel (x!4)
			Transbody (b)
			return

		case FINISH_S:
			GenerateFinish ()
			return

		case LOOP_S:
		case BREAK_S:
		case RETURN_S:
		case ENDCASE_S:
			GenerateJump (Target (x))
			return

		case RESULTIS_S:
			test ValofFlag
			then $(	p := PendingTemps
				SetResult (a)
				GenerateJump (ValofLabel)
				PutBackTemps (p)
			     $)
			or Transreport (NoValof, x)
			return

		case IF_S:
		case UNLESS_S: $(	let Sense = (Op = IF_S)
				if Optimize do
				     $(	if IsConst (a) do
					     $(	if Evalconst (a) eqv Sense do Transbody (b)
						return
					     $)
					let M = Target (b)
					if M ne 0 do	//  b is a loop, break, return, or goto command.
					     $(	TransConditional (a, Sense, M)
						return
					     $)
				     $)
				let L = Nextparam ()
				TransConditional (a, not Sense, L)
				Transbody (b)
				GenerateLabel (L)
				return
			     $)

		case TEST_S:   $(	let c = x!3
				if Optimize then if IsConst (a) do
				     $(	Transbody (Evalconst (a) -> b, c)
					return
				     $)
				let L, M = Nextparam (), Nextparam ()
				TransConditional (a, false, L)
				Transbody (b)
				GenerateJump (M)
				GenerateLabel (L)
				Transbody (c)
				GenerateLabel (M)
				return
			     $)

		case WHILE_S:
		case UNTIL_S:
			TransLoop (b, a, Op = WHILE_S, Nextparam ())
			return

		case REPEAT_S:
			TransLoop (a, 0, 0, 0)
			return

		case REPEATWHILE_S:
		case REPEATUNTIL_S:
			TransLoop (a, b, Op = REPEATWHILE_S, 0)
			return

		case FOR_S:
			TransFor (x)
			return

		case SWITCHON_S:
			     $(	s := SSP
				let El, Dl = EndcaseLabel, DefaultLabel
				let Cf, Cl, Sf = CaseFirst, CaseList, SwitchFlag
				EndcaseLabel, DefaultLabel := Nextparam (), 0
				CaseFirst, CaseList, SwitchFlag := 0, 0, true

				let Begin = Nextparam ()
				GenerateJump (Begin)
				Transbody (x!2)
				GenerateJump (EndcaseLabel)

				GenerateLabel (Begin)
				let PT, Val = PendingTemps, vec DescSize
				CompileOperand (x!1, Val)
				GenerateSwitch (Val, CaseFirst, DefaultLabel, EndcaseLabel)
				PutBackTemps (PT)
				GenerateLabel (EndcaseLabel)

				EndcaseLabel, DefaultLabel := El, Dl
				CaseFirst, CaseList, SwitchFlag := Cf, Cl, Sf
				ResetSSP (s)
				return
			     $)

		case CASE_S:
			p := Nextparam ()
			GenerateLabel (p)
			unless SwitchFlag do Transreport (NoSwitch, x)
			     $(	let t = Newvec (5)
				t!0, t!1 := 0, p
				PartialEvalconst (x!1, lv t!2)
				test x!2 = 0
				then t!4, t!5 := t!2, t!3		//  Limit same as first value.
				or PartialEvalconst (x!2, lv t!4)
				test CaseList = 0
				then CaseFirst := t
				or CaseList!0 := t
				CaseList := t
				x := x!3
				if x = 0 break
			     $)	repeatwhile (x!0 & Right) = CASE_S	//  This is to economize on labels.
			Transbody (x)
			return

		case DEFAULT_S:
			test SwitchFlag
			then $(	unless DefaultLabel = 0 do Transreport (DupDefault, x)
				DefaultLabel := Nextparam ()
				GenerateLabel (DefaultLabel)
			     $)
			or Transreport (NoSwitch, x)
			Transbody (a)
			return
	     $)
     $)
