//  Interface module between semantic translator and code generator of BCPL compiler.
//  Last modified on 06/06/74 at 18:24:52 by R F Mabee.
//  First installed as Version 3.4 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"
get "bcpl_cg_head"
get "bcpl_metering_head"

let WriteOperand (Desc) be
     $(	if Desc = 0 do
	     $(	WriteS (OUTPUT, "*t0")
		return
	     $)
	Format (OUTPUT, "*t(^s", SymbolName (Desc!0))
	switchon Desc!0 into
	     $(	case NUMBER_S: case STRINGCONST_S: case CHARCONST_S: case EXTERNAL_S:
			Format (OUTPUT, " ^s", Desc!1)
			endcase
		case CONSTANT_S: case GLOBAL_S: case LV_GLOBAL: case LOCAL_S: case LV_LOCAL:
		case TEMP_S: case LV_TEMP: case STATIC_S: case LV_STATIC: case LABEL_S: case RTDEF_S:
			Format (OUTPUT, " ^d", Desc!1)
			endcase
		case TRUE_S: case FALSE_S:
			endcase
		case TABLE_S:
			Format (OUTPUT, " ^d", Desc!1!0)
			for i = 1 to Desc!1!0 do WriteConst (lv Desc!1!(i * 2 - 1))
			endcase
		default:	CGreport (UnexpectedCase, Desc!0, "WriteOperand")
			Format (OUTPUT, " ^o", Desc!1)
		     $)
	unless Desc!2 = 0 do Format (OUTPUT, "  /^s/", Desc!2)
	Writech (OUTPUT, ')')
     $)
and WriteConst (v) be
     $(	Writech (OUTPUT, '*s')
	switchon v!0 into
	     $(	case CONSTANT_S:
			WriteN (OUTPUT, v!1)
			return
		case NUMBER_S: case CHARCONST_S:
			WriteS (OUTPUT, v!1)
			return
		case TRUE_S:
			WriteS (OUTPUT, "TRUE")
			return
		case FALSE_S:
			WriteS (OUTPUT, "FALSE")
			return
		default:	CGreport (UnexpectedCase, v!0, "WriteConst")
	     $)
     $)

let GenerateJump (L) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "JUMP ^d*n", L)
	Compjump (L)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateLabel (L) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "LAB ^d*n", L)
	Complab (L)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

let GenerateRtdefBegin (L, ID, Functsw, Mainsw) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "^s ^d ^s ^b*n", (Functsw -> "FNDEF", "RTDEF"), L, ID, Mainsw)
	Compentry (L, ID, Functsw, Mainsw)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateRtdefEnd (Desc) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, Desc = 0 -> "RETURN", "RETURN_VAL")
		if Desc ne 0 do WriteOperand (Desc)
		Writech (OUTPUT, '*n')
	     $)
	Compreturn (Desc)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

let GenerateGoto (Desc) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, "GOTO")
		WriteOperand (Desc)
		Writech (OUTPUT, '*n')
	     $)
	Compgoto (Desc)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateFinish () be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do WriteS (OUTPUT, "FINISH*n")
	Compfinish ()
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and ReserveArglist (Nargs) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "ARGLIST ^d*n", Nargs)
	CreateArglist (Nargs)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateArg (i, Desc) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	Format (OUTPUT, "ARG ^d", i)
		WriteOperand (Desc)
		Writech (OUTPUT, '*n')
	     $)
	StoreArg (i, Desc)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateFnap (Result, F) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, Result = 0 -> "RTAP", "FNAP")
		WriteOperand (F)
		unless Result = 0 do WriteOperand (Result)
		Writech (OUTPUT, '*n')
	     $)
	Compfnap (Result, F)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and ReserveSystemArglist (Nargs) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "SYSTEM_ARGLIST ^d*n", Nargs)
	CreateSystemArglist (Nargs)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateSystemArg (i, Arg, Offset, Type, Length, StringSw) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	Format (OUTPUT, "SYSTEM_ARG ^d", i)
		WriteOperand (Arg)
		WriteOperand (Offset)
		WriteOperand (Type)
		WriteOperand (Length)
		if StringSw do Writech (OUTPUT, " STRING")
		Writech (OUTPUT, '*n')
	     $)
	StoreSystemArg (i, Arg, Offset, Type, Length, StringSw)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateSystemCall (F) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, "SYSTEM_CALL ")
		WriteOperand (F)
		Writech (OUTPUT, '*n')
	     $)
	CompSystemCall (F)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

let GenerateResultBlock () be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do WriteS (OUTPUT, "RESULT_BLOCK*n")
	ResultBlockBegin ()
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateResultValue (Desc) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, "SET_RESULT")
		WriteOperand (Desc)
		Writech (OUTPUT, '*n')
	     $)
	ResultSet (Desc)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateClaimResult (Desc) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, "CLAIM_RESULT")
		WriteOperand (Desc)
		Writech (OUTPUT, '*n')
	     $)
	ResultGet (Desc)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

and GenerateSwitch (Desc, CaseList, DefaultL, EndcaseL) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, "SWITCHON")
		WriteOperand (Desc)
		let Ncases, t = 0, CaseList
		until t = 0 do t, Ncases := t!0, Ncases + 1
		Format (OUTPUT, " ^d ^d ^d", DefaultL, EndcaseL, Ncases)
		t := CaseList
		until t = 0 do
		     $(	Format (OUTPUT, " (^d", t!1)
			WriteConst (lv t!2)
			WriteConst (lv t!4)
			Writech (OUTPUT, ')')
			t := t!0
		     $)
		Writech (OUTPUT, '*n')
	     $)
	Compswitch (Desc, CaseList, DefaultL, EndcaseL)
	if Metering test Optimize
		  then RecordUsage (CompileSwitchWithOptimizing_Meter, UsageTemp)
		  or RecordUsage (CompileSwitchWithoutOptimizing_Meter, UsageTemp)
     $)

let GenerateMonadicOperator (Op, Result, Desc1) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, SymbolName (Op))
		WriteOperand (Result)
		WriteOperand (Desc1)
		Writech (OUTPUT, '*n')
	     $)
	Lrand := Desc1
	ApplyMonadicOperator (Op, Result)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateDiadicOperator (Op, Result, Desc1, Desc2) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, SymbolName (Op))
		WriteOperand (Result)
		WriteOperand (Desc1)
		WriteOperand (Desc2)
		Writech (OUTPUT, '*n')
	     $)
	Lrand, Rrand := Desc1, Desc2
	ApplyDiadicOperator (Op, Result)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateOffsetOperator (Op, Result, Desc1, Desc2, Offset) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	WriteS (OUTPUT, SymbolName (Op))
		WriteOperand (Result)
		WriteOperand (Desc1)
		WriteOperand (Desc2)
		Format (OUTPUT, " + ^d*n", Offset)
	     $)
	Lrand, Rrand := Desc1, Desc2
	ApplyOffsetOperator (Op, Result, Offset)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

let GenerateMonadicConditional (Op, L, Desc1) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	Format (OUTPUT, "JUMP_^s ^d", SymbolName (Op), L)
		WriteOperand (Desc1)
		Writech (OUTPUT, '*n')
	     $)
	Lrand := Desc1
	MonadicJumpcond (Op, L)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateDiadicConditional (Op, L, Desc1, Desc2) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	Format (OUTPUT, "JUMP_^s ^d", SymbolName (Op), L)
		WriteOperand (Desc1)
		WriteOperand (Desc2)
		Writech (OUTPUT, '*n')
	     $)
	Lrand, Rrand := Desc1, Desc2
	DiadicJumpcond (Op, L)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

let GenerateSSP (P) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "SSP ^d*n", P)
	NewSSP (P)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and GenerateLineNumber (n) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do Format (OUTPUT, "LINE ^d*n", n)
	SetLineNumber (n)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
and StoreAll () be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do WriteS (OUTPUT, "STORE_ALL*n")
	ClearRegisters ()
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)

and CgFinish (Static, Defs) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	if OcodeSw do
	     $(	let t = Static
		until t = 0 do
		     $(	Format (OUTPUT, "STATIC ^d", t!1)
			WriteConst (lv t!3)
			Format (OUTPUT, "*t/^s/*n", t!2)
			t := t!0
		     $)
		t := Defs
		until t = 0 do
		     $(	Format (OUTPUT, "ENTRY ^s ^d*n", t!1, t!2)
			t := t!0
		     $)
	     $)
	FinishText (Static, Defs)
	if Metering do RecordUsage (CodeGeneration_Meter, UsageTemp)
     $)
