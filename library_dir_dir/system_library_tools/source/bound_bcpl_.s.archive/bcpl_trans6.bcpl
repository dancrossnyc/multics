//  More subroutines to augment Transbody.
//  Last modified on 06/26/74 at 22:19:29 by R F Mabee.
//  First installed as Version 3.4 by R F Mabee.
//  Separated from bcpl_trans2 and bcpl_trans3 during 6180 conversion.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.


get "bcpl_trans_head"

let AllocateLocal (n) = valof
     $(	test n = 1
	then unless FreeLocalList = 0 do
	     $(	let t, p = FreeLocalList, FreeLocalList!1
		FreeLocalList := t!2
		Freevec (t, 2)
		resultis p
	     $)
	or unless SSP rem 2 = 0 do		//  Make multi-word blocks even addresses.
	     $(	ResetSSP (SSP + 1)		//  This is a kludge for the Multics implementation.
		DeallocateLocal (SSP - 1)
	     $)
	let p = SSP
	ResetSSP (p + n)
	resultis p
     $)
and DeallocateLocal (p) be
     $(	let New = Newvec (2)
	New!0, New!1, New!2 := 0, p, FreeLocalList
	FreeLocalList := New
     $)
and ResetSSP (p) be
     $(	let t = PendingTemps
	until t = 0 do
	     $(	if t!1 ge p do p := t!1 + 1
		t := t!2
	     $)
	if p = SSP return
	SSP := p
	GenerateSSP (SSP)
	t := lv FreeLocalList
	until rv t = 0 do		//  Dis-remember all temporaries outside new SSP.
	     $(	let u = rv t
		test u!1 ge SSP
		then $(	rv t := u!2
			Freevec (u, 2)
		     $)
		or t := lv u!2
	     $)
     $)
and MakeTemp () = valof
     $(	let Temp = AllocateLocal (1)
	let New = Newvec (2)
	New!0, New!1, New!2 := TEMP_S, Temp, PendingTemps
	PendingTemps := New
	resultis New
     $)
and MakeCopy (x) = valof
     $(	let P = MakeTemp ()
	P!0 := LOCAL_S
	CompileExpression (P, x)
	resultis P
     $)
and PutBackTemps (PT) be
	until PendingTemps = PT | PendingTemps = 0 do
	     $(	let Old = PendingTemps
		PendingTemps := PendingTemps!2
		Old!2 := FreeLocalList
		FreeLocalList := Old
	     $)

let ContainsFnap (x) = valof
  switchon x!0 & Right into
     $(	case FNAP_S: case VALOF_S: case LIST_S: case COND_S: case REL_S:
	default:	resultis true

	case POS_S: case POS_F: case NEG_S: case NEG_F: case NOT_S: case RV_S: case LV_S:
		resultis ContainsFnap (x!1)

	case PLUS_S: case PLUS_F: case MINUS_S: case MINUS_F:
		case MULT_S: case MULT_F: case DIV_S: case DIV_F:
	case REM_S: case LOGOR_S: case LOGAND_S: case EQV_S: case NEQV_S:
	case LSHIFT_S: case RSHIFT_S: case VECAP_S:
		if ContainsFnap (x!1) resultis true
		resultis ContainsFnap (x!2)

	case NAME_S: case NUMBER_S: case CHARCONST_S: case CONSTANT_S: case STRINGCONST_S:
	case NIL_S: case TRUE_S: case FALSE_S: case TABLE_S:
		resultis false
     $)

let TransFnap (ResultDesc, F, Args) be
     $(	let Nargs = ListSize (Args)
	and Ai, PT = ArgInfo, PendingTemps
	if ContainsFnap (F) do F := MakeCopy (F)
	ArgInfo := Newvec (Nargs - 1)
	WalkList (Args, PreCheckArg, 0)
	ReserveArglist (Nargs)
	let TempDesc = vec DescSize
	for i = 0 to Nargs - 1 do
	     $(	CompileOperand (ArgInfo!i, TempDesc)
		GenerateArg (i, TempDesc)
	     $)
	Freevec (ArgInfo, Nargs - 1)
	ArgInfo := Ai
	StoreAll ()
	CompileOperand (F, TempDesc)
	GenerateFnap (ResultDesc, TempDesc)
	PutBackTemps (PT)
     $)
and PreCheckArg (x, n) be
     $(	if ContainsFnap (x) do x := MakeCopy (x)
	ArgInfo!n := x
     $)

let TransSystemCall (x) be
     $(	test (x!0 & Right) = FNAP_S
	then $(	let Nargs = ListSize (x!2)
		and Ai, PT = ArgInfo, PendingTemps
		ArgInfo := Newvec (Nargs * 5)
		WalkList (x!2, StoreSystemArg, 0)
		ReserveSystemArglist (Nargs)
		for i = 0 to Nargs - 1 do
		     $(	let Info = lv ArgInfo!(i * 5)
			and Arg, Offset, Type, Length = vec DescSize, vec DescSize, vec DescSize, vec DescSize
			CompileOperand (Info!0, Arg)
			test Info!1 = 0
			then Offset := 0
			or CompileOperand (Info!1, Offset)
			CompileOperand (Info!2, Type)
			test Info!3 = 0
			then Length := 0
			or CompileOperand (Info!3, Length)
			GenerateSystemArg (i, Arg, Offset, Type, Length, Info!4)
		     $)
		Freevec (ArgInfo, Nargs * 5)
		ArgInfo := Ai
		StoreAll ()
		let TempDesc = vec DescSize
		CompileOperand (x!1, TempDesc)
		GenerateSystemCall (TempDesc)
		PutBackTemps (PT)
	     $)
	or Transreport (BadCall, x)
     $)
and StoreSystemArg (x, Ai) be
     $(	let TypeC, TypeE, LengthE, OffsetE = 1, 0, 0, 0
	let String, Double = false, false
	     $(	switchon x!0 & Right into
		     $(	default:	break
			case FIXED_S:
				TypeC := 1
				endcase
			case FLOAT_S:
				TypeC := 3
				endcase
			case DOUBLE_S: 
				Double := true
				endcase
			case POINTER_S:
				TypeC := 13
				endcase
			case TYPE_S:
				TypeE := x!2
				endcase
			case CHAR_S:
				LengthE := x!2
				TypeC := 21
				endcase
			case BIT_S:
				LengthE := x!2
				TypeC := 19
				endcase
			case OFFSET_S:
				OffsetE := x!2
				endcase
			case LENGTH_S:
				LengthE := x!2
				endcase
			case STRING_S:
				String := true
				TypeC := 21
				endcase
		     $)
		x := x!1
	     $)	repeat

	if Double test TypeE = 0 & (TypeC = 1 | TypeC = 3)
		then TypeC := TypeC + 1
		or Transreport (BadDescriptors, x)
	if TypeE = 0 do TypeE := List2 (CONSTANT_S, TypeC)
	if String & LengthE = 0 then if (x!0 & Right) = STRINGCONST_S do
		     $(	let v = vec Vmax
			RemoveEscapes (x!1, v)
			LengthE := List2 (CONSTANT_S, Length (v))
		     $)

	if ContainsFnap (x) do x := MakeCopy (x)
	if OffsetE ne 0 then if ContainsFnap (OffsetE) do OffsetE := MakeCopy (OffsetE)
	if ContainsFnap (TypeE) do TypeE := MakeCopy (TypeE)
	if LengthE ne 0 then if ContainsFnap (LengthE) do LengthE := MakeCopy (LengthE)
	let Info = lv ArgInfo!(Ai * 5)
	Info!0, Info!1, Info!2, Info!3, Info!4 := x, OffsetE, TypeE, LengthE, String
     $)
