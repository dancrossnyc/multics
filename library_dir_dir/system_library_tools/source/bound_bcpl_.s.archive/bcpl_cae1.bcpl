//  Rexp --  read an expression.
//  Last modified on 06/06/74 at 18:03:27 by R F Mabee.
//  Prepared for installation as part of Version 3.4, R F Mabee.
//  First installed as Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cae_head"

let Rexp (n) = valof		//  n is minimum precedence to be read.  It is zero except on recursive calls.
     $(	let A, B, C = nil, nil, nil
	let Op = Symb logor LineCount lshift Left
	A := valof switchon Symb into
	     $(	default:	CaeReport (ExpressionMissing)
			resultis ErrorNode

		case NAME_S:
		case NUMBER_S:
		case CHARCONST_S:
		case STRINGCONST_S:
			B := DictionaryEntry
			Nextsymb ()
			resultis B

		case NIL_S:
		case TRUE_S:
		case FALSE_S:
			Nextsymb ()
			resultis List1 (Op)

		case PLUS_F:
			Op := POS_F
			goto Arith
		case PLUS_S:
			Op := POS_S
			goto Arith
		case MINUS_F:
			Op := NEG_F
			goto Arith
		case MINUS_S:
			Op := NEG_S
		  Arith:	Op := Op logor LineCount lshift Left
			B := 32
			goto Unary
		case NOT_S:
			B := 22
			goto Unary
		case LV_S:
		case RV_S:
			B := 40
		  Unary:	Nextsymb ()
			B := Rexp (B)
			resultis List2 (Op, B)

		case VEC_S:
			Nextsymb ()
			B := Rexp (0)
			resultis List2 (Op, B)

		case LIST_S:
		case TABLE_S:
			Nextsymb ()
			B := ReadList (true)
			resultis List2 (Op, B)

		case VALOF_S:
			Nextsymb ()
			B := Rcom (8)
			resultis List2 (Op, B)

		case RBRA_S:
			Nextsymb ()
			B := Rexp (0)
			test Symb = RKET_S
			then Nextsymb ()
			or CaeReport (MissingRKET)
			resultis B
	     $)

  MORE:
	Op := Symb logor LineCount lshift Left
	B := valof switchon Symb into
	     $(	default:	goto EXIT

		case RBRA_S:
			Op := FNAP_S logor LineCount lshift Left
			Nextsymb ()
			B := Symb = RKET_S -> 0, ReadList (true)
			test Symb = RKET_S
			then Nextsymb ()
			or CaeReport (MissingRKET)
			A := List3 (Op, A, B)
			goto MORE

		case VECAP_S:
			resultis 44

		case SBRA_S:
			if n ge 44 goto EXIT
			Op := VECAP_S logor LineCount lshift Left
			Nextsymb ()
			B := Rexp (0)
			test Symb = SKET_S
			then Nextsymb ()
			or CaeReport (MissingSKET)
			A := List3 (Op, A, B)
			goto MORE

		case MULT_S:
		case MULT_F:
		case DIV_S:
		case DIV_F:
		case REM_S:
			resultis 36

		case PLUS_S:
		case PLUS_F:
		case MINUS_S:
		case MINUS_F:
			resultis 32

		case VALDEF_S:
			Op := EQ_S logor LineCount lshift Left
		case EQ_S:
		case EQ_F:
		case NE_S:
		case NE_F:
		case LS_S:
		case LS_F:
		case LE_S:
		case LE_F:
		case GR_S:
		case GR_F:
		case GE_S:
		case GE_F:
			if n > 28 goto EXIT
			Nextsymb ()
			B := Rexp (28)
			A := List3 (Op, A, B)
			unless n = 28 do A := List2 (REL_S logor LineCount lshift Left, A)
			goto MORE

		case LSHIFT_S:
		case RSHIFT_S:
			resultis 24

		case LOGAND_S:
			resultis 20

		case LOGOR_S:
			resultis 16

		case EQV_S:
			resultis 14

		case NEQV_S:
			resultis 12

		case COND_S:
			if n > 8 goto EXIT
			Nextsymb ()
			B := Rexp (8)
			test Symb = COMMA_S
			then Nextsymb ()
			or CaeReport (MissingCOMMA)
			C := Rexp (8)
			A := List4 (Op, A, B, C)
			goto MORE

		case CHAR_S:
		case BIT_S:
		case TYPE_S:
		case OFFSET_S:
		case LENGTH_S:
			resultis 6

		case FIXED_S:
		case FLOAT_S:
		case DOUBLE_S:
		case POINTER_S:
		case STRING_S:
			if n ge 6 goto EXIT
			A := List2 (Op, A)
			Nextsymb ()
			goto MORE
	     $)
	if n ge B goto EXIT
	Nextsymb ()
	B := Rexp (B)
	A := List3 (Op, A, B)
	goto MORE

  EXIT:
	resultis A
     $)
