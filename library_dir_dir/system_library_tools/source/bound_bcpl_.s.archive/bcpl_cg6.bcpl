//  These routines generate the code for switchons.
//  Last modified on 06/06/74 at 18:22:41 by R F Mabee.
//  Converted to 6180 and installed in Version 3.4, R F Mabee.
//  First installed in Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

global
     $(	NoDefault : GlobalTemp  $)

let Compswitch (Val, CaseList, DefaultL, EndcaseL) be
     $(		//  Copy cases into a vector, evaluated and sorted.
	let CaseV = vec 1000 + 2
	and CaseP = 0
	let t = CaseList
	until t = 0 do
	     $(	for i = EvalNumber (t!2, t!3) to EvalNumber (t!4, t!5) do
		     $(	let j = CaseP
			while j > 0 & CaseV!j > i do j := j - 2
			if j > 0 & CaseV!j = i do
			     $(	CGreport (DupCase, i)
				loop
			     $)
			for k = CaseP to j + 2 by -2 do CaseV!(k + 2), CaseV!(k + 3) := CaseV!k, CaseV!(k + 1)
			CaseV!(j + 2), CaseV!(j + 3) := i, t!1
			test CaseP ge 1000
			then CGreport (OverCase, 1000 / 2)
			or CaseP := CaseP + 2
		     $)
		t := t!0
	     $)
	NoDefault := DefaultL = 0 & Optimize
	let Min, Max = 1 lshift 35, not (1 lshift 35)
	if NoDefault do Min, Max := CaseV!2, CaseV!CaseP
	SectionHeader ("*nBegin switchon")
	LoadRegister (Val, Ar)
	AnySwitch (lv CaseV!2, lv CaseV!CaseP, Min, Max, DefaultL = 0 -> EndcaseL, DefaultL)
	DisclaimRegister (Val)
     $)
and AnySwitch (Lp, Up, Ll, Ul, DefaultL) be
     $(	let n = (Up - Lp) / 2 + 1
		// Number of cases.
	if NoDefault -> n < 4, n < 3 do
	     $(	LinearSwitch (Lp, Up, Ll, Ul, DefaultL)
		return
	     $)
	let a, b, c, d = 0, Lp + (n & Even), 0, 0
	if Optimize do
	     $(	let u, w, x, y, z = 0, 0, 0, 0, 0
		let v = vec 2000
		w := Lp!0
		for p = Lp to Up by 2 do
		     $(	let q, r = p!1, p!0 - w
			for i = 1 to a do if q = v!i goto L
			a := a + 1
			v!a := q
		     L:	test q = x & (NoDefault | r = 1)
			then z := z + 1
			or   $(	if z ge c do b, c := y, z
				x, y, z := q, p, 0
			     $)
			if r > u do d, u := p, r
			w := p!0
		     $)
		if z > c do b, c := y, z
		if c = 0 do b := u ge n -> d, Lp + (n & Even)
			// Here a is the number of distinct labels
			// and b points to c adjacent cases.
		if c < n / 4 do
		     $(	let r = Up!0 - Lp!0
			if r < 0 do r := 30000000000
				// Now r is the range of cases covered.
			let i, j, k = a, n * 4, r - 2
			unless NoDefault do i, j, k := n, n * 2, k / 2 + 2
			if j > k do j := k
				// Here i is the minimum hash table size,
				// j is a reasonable limit for i,
				// and k is the size beyond which a direct switch is better.
			while i < j do
			     $(	for m = 0 to i do v!m := 0
				for p = Lp to Up by 2 do
				     $(	let m = p!0
					for s = 35 to 0 by -1 do if (m rshift s) ge i do m := m - (i lshift s)
					let t = p!1
					unless v!m = 0 | v!m = t & NoDefault goto M
					v!m := t
				     $)
				HashSwitch (Lp, Up, i, DefaultL)
				return
			     M:	i := i + 1
			     $)
			if k le j & u < n do
			     $(	DirectSwitch (Lp, Up, Ll, Ul, DefaultL)
				return
			     $)
		     $)
	     $)
	BinarySwitch (Lp, Up, Ll, Ul, b, c, DefaultL)
     $)
and LinearSwitch (Lp, Up, Ll, Ul, DefaultL) be
     $(	let LastL = DefaultL
	if NoDefault | (Lp!0 = Ll & Up!0 = Ul & Ul - Ll = (Up - Lp) / 2) do
	     $(	LastL := Up!1
		Up := Up - 2
	     $)
	for p = Lp to Up by 2 do Swjump (p!0, Tze, p!1)
	Compjump (LastL)
     $)
and HashSwitch (Lp, Up, i, DefaultL) be
     $(	let v = vec 2000
	and w = vec 2000
	for j = 0 to i do v!j, w!j := DefaultL, 0
	for p = Lp to Up by 2 do
	     $(	let m, n = p!0, 0
		for s = 35 to 0 by -1 do
		     $(	n := n lshift 1
			if (m rshift s) ge i do m, n := m - (i lshift s), n + 1
		     $)
		v!m, w!m := p!1, n
	     $)
	Outop3 (Lrl, 35, 0)
	Literal (i, "hash table size")
	Outop (Dvf)
	let Tl = 0
	unless NoDefault do
	     $(	Tl := Nextparam ()
		Address, Tag, Param, Reloc := 0, Ql, Tl, RelText lshift Left
		Outop (Cmpa)
		Outop2 (Tnz, DefaultL)
	     $)
	let Lab = Nextparam ()
	Address, Tag, Param, Reloc := 0, Ql, Lab, RelText lshift Left
	Outop (Tra)
	Complab (Lab)
	for j = 0 to i - 1 do Outop2 (Tra, v!j)
	unless NoDefault do
	     $(	Complab (Tl)
		for j = 0 to i - 1 do OutData (w!j)
	     $)
     $)
and DirectSwitch (Lp, Up, Ll, Ul, DefaultL) be
     $(	let n = (Up - Lp) / 10 + 2
	let x = 0
	test NoDefault
	then Ll, Ul := Lp!0, Up!0
	or test Ul - n ge Up!0
	then $(	let r, t = Up!0, Tpl
		Ul := r
		if Ll + n < Lp!0 do
		     $(	test 0 le Lp!0 le n
			then Ll := 0
			or   $(	Outop3 (Sba, Lp!0, Dl)
				Ll := Lp!0
				x, r := Ll, Ul - Ll
			     $)
			t := Trc
		     $)
		Swjump (r + 1, t, DefaultL)
	     $)
	or if Ll + n < Lp!0 do
	     $(	Ll := Lp!0
		Swjump (Ll, Tmi, DefaultL)
	     $)
	let Lab = Nextparam ()
	Address, Param, Tag, Reloc := x - Ll, Lab, Al, RelText lshift Left
	Outop (Tra)
	Complab (Lab)
	for i = Ll to Ul do
		test Lp!0 = i
		then $(	Outop2 (Tra, Lp!1)
			Lp := Lp + 2
		     $)
		or Outop2 (Tra, DefaultL)
     $)
and BinarySwitch (Lp, Up, Ll, Ul, b, c, DefaultL) be
     $(	let Tl = 0
	let d = b + c + c
	let s, t = false, false
	unless b = Lp & (NoDefault | Ll = Lp!0) do
	     $(	test b le Lp + 2 & (NoDefault | b = Lp | Ll = Lp!0 & b!0 = Ll + 1)
		then Swjump (b!0, Tmi, b = Lp -> DefaultL, Lp!1)
		or   $(	Tl := Nextparam ()
			Swjump (b!0, Tmi, Tl)
		     $)
		s := true
	     $)
	test d = Up & (NoDefault | Ul = Up!0)
	then $(	Compjump (d!1)
		t := true
	     $)
	or test c = 0 & s
	   then Outop2 (Tze, b!1)
	   or Swjump (d!0 + 1, Tmi, d!1)
	unless t test d = Up
	then unless NoDefault | Ul = Up!0 do Compjump (DefaultL)
	or AnySwitch (d + 2, Up, d!0 + 1, Ul, DefaultL)
	unless Tl = 0 do
	     $(	Complab (Tl)
		AnySwitch (Lp, b - 2, Ll, b!0 - 1, DefaultL)
	     $)
     $)
and Swjump (n, t, l) be
     $(	Literal (n, 0)
	Outop (Cmpa)
	Outop2 (t, l)
     $)
