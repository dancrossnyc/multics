/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


deactivate_seg: proc ();

/* Written April 1, 1976 by R. Bratt for testing of demand deactivate
   Added -force control argument, for hphcs_, 04/21/81, W. Olin Sibert
   Fixed error msg. 1/23/84 C Spitzer
   */

dcl (argno, nargs) fixed bin;
dcl  code fixed bin (35);
dcl  ap ptr;
dcl  al fixed bin (21);
dcl  arg char (al) based (ap);

dcl  segno fixed bin (17);
dcl  segptr ptr;
dcl  dname char (168);
dcl  ename char (32);
dcl  force_sw bit (1) aligned;
dcl  terminate_sw bit (1) aligned;
dcl  uid bit (36) aligned;

dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$too_many_args fixed bin (35) external static;

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$get_uid_seg entry (pointer, bit (36) aligned, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hphcs_$deactivate entry (bit (36) aligned, fixed bin (35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  phcs_$deactivate entry (ptr, fixed bin (35));
dcl  phcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));

dcl  WHOAMI char (32) internal static options (constant) init ("deactivate_seg");

dcl (cleanup, linkage_error) condition;

dcl (baseptr, char, null) builtin;

/*  */

	segno = -1;
	dname = "";
	terminate_sw = "0"b;
	force_sw = "0"b;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
MAIN_RETURN:   return;
	     end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));
	     if (arg = "-force") | (arg = "-fc") then force_sw = "1"b;
	     else if (char (arg, 1) = "-") then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else do;				/* segno or pathname */
		if (segno >= 0) | (dname ^= "") then do;
		     code = error_table_$too_many_args;
		     goto USAGE;
		     end;

		segno = cv_oct_check_ (arg, code);
		if code ^= 0 then do;		/* Not a segno, try a pathname */
		     call expand_pathname_ (arg, dname, ename, code);
		     if code ^= 0 then do;
			call com_err_ (code, WHOAMI, "^a", arg);
			goto MAIN_RETURN;
			end;
		     else segno = -1;		/* reset to default */
		     end;
		end;
	     end; 				/* of argument loop */

	if (segno = -1) & (dname = "") then do;
	     code = error_table_$noarg;
USAGE:	     call com_err_ (code, WHOAMI, "^/Usage:^-^a segno|pathname {-force}", WHOAMI);
	     goto MAIN_RETURN;
	     end;

/*  */

	on condition (linkage_error) begin;
	     call com_err_ (0, WHOAMI, "This procedure requires privileged access: phcs_^[, hphcs_^].", force_sw);
	     goto MAIN_RETURN;
	     end;

	on condition (cleanup) begin;
	     if terminate_sw then
		if segptr ^= null () then
		     call hcs_$terminate_noname (segptr, (0));
	     segptr = null ();
	     end;

	if (dname ^= "") then do;			/* must initiate it first */
	     call hcs_$initiate (dname, ename, "", 0, 1, segptr, code);
	     if segptr = null () then 		/* A directory, maybe? */
		call phcs_$initiate (dname, ename, "", 0, 0, segptr, code);
	     else terminate_sw = "1"b;

	     if segptr = null () then do;		/* If still null, give up */
PATH_ERROR:	call com_err_ (code, WHOAMI, "^a^[>^]^a", dname, (dname ^= ">"), ename);
		goto MAIN_RETURN;
		end;

	     call hcs_$get_uid_seg (segptr, uid, code);
	     if code ^= 0 then goto PATH_ERROR;
	     end;

	else do;					/* Otherwise, just get the UID */
	     segptr = baseptr (segno);
	     call hcs_$get_uid_seg (segptr, uid, code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Segment ^o", segno);
		goto MAIN_RETURN;
		end;
	     end;

	if force_sw then				/* Highly privileged */
	     call hphcs_$deactivate (uid, code);
	else call phcs_$deactivate (segptr, code);

	if code ^= 0 then				/* Mention it */
	     call com_err_ (code, WHOAMI, "Deactivating ^[^o^;^s^a^]",
		(segno >= 0), segno, pathname_ (dname, ename));

	if terminate_sw then call hcs_$terminate_noname (segptr, (0));

	goto MAIN_RETURN;				/* All done */

	end deactivate_seg;
