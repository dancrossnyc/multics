/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_statement:	procedure(p,sourceb,tree_level);

/*	Modified on:	22 September 1970 by PG. */
/*	Modified on:	 7 January 1971 by BLW	*/
/*	Modified on:	24 May 1971 by ACF	*/
/*	Modified on:	25 July 1971 by PG */
/*	Modified on:	6 June 1977 by RAB */
/*	Modified on:	29 Nov 1979 by PCK to print a tree level indented listing */
/*	Modified on:	17 Mar 1980 by PCK to display expanded_by_name */

dcl	(p, q) ptr,
	tree_level fixed bin,
	sourceb bit(1) aligned,
	cu_$arg_count entry returns(fixed bin),
	display_any_node_name ext entry(char(*) aligned, ptr,fixed bin),
	(ioa_,ioa_$nnl) ext entry options(variable), display_exp ext entry(ptr,fixed bin),
	decode_node_id entry(ptr,bit(1) aligned) returns(char(120) varying),
	ios_$write_ptr entry(ptr,fixed bin,fixed bin),
	(addr,fixed,length,min,null,ptr) builtin,
	n fixed bin(15);

dcl	itype fixed bin(15),
	line char(132) aligned varying,
	st(0:38) char(12) int static options(constant)
	init("unknown", "allocate", "assignment", "begin", "call", "close",
	     "declare", "delay", "delete", "display", "do", "else clause",
	     "end", "entry", "exit", "format", "free", "get", "go to", "if",
	     "locate", "null", "on", "open", "procedure", "put", "read",
	     "return", "revert", "rewrite", "signal", "stop",
	     "system", "unlock", "wait", "write", "default","continue","pause");

%include list;
%include nodes;
%include source_list;
%include statement;
%include token_list;

begin:
	if p=null
	then do;
		call ioa_("^/^vxdisplay_statement: ptr is NULL^/",tree_level);
		return;
	     end;
	if p->node.type^=statement_node
	then do;
		call display_any_node_name("display_statement: arg is not a statement node,
arg =",p,tree_level+1);
		return;
	     end;
	itype=fixed(p->statement.statement_type,17,0);
	if itype > hbound(st,1) then itype = 0;
	call ioa_("^/^vx^a STATEMENT ^p, next = ^p, back = ^p",tree_level,st(itype),p,p->statement.next,
		p->statement.back);
	call ioa_("^vx^a",tree_level,decode_node_id(p,"0"b));

	if cu_$arg_count() > 1
	then if sourceb
	     then do;
		m = p->statement.source.segment;
		if p->statement.source.length ^= 0
		then do; 
			call ioa_$nnl("^vxSOURCE:	",tree_level);
			call ios_$write_ptr((source.seg_ptr),(p->statement.
source.start),min(p->statement.source.length,120));
			call ioa_("");
		     end;
		end;
	m = p -> object.start;
	if m ^= 0
	then if m = p->object.finish then call ioa_("^vxno object code, ic = ^o",tree_level,m);
	     else call ioa_("^vxobject code start = ^o, finish = ^o",tree_level,m,p->object.finish);

	if p->statement.prefix ^= "111110000000"b then call ioa_("^vxprefix = o^4o",tree_level,
			fixed(p->statement.prefix,12,0));
	line = "";
	if p->statement.optimized then line = "optimized ";
	if p->statement.generated then line = line || "generated ";
	if p->statement.free_temps then line = line || "free_temps ";
	if p->statement.LHS_in_RHS then line = line || "LHS_in_RHS ";
	if p->statement.processed then line = line || "processed ";
	if p->statement.put_in_profile then line = line || "put_in_profile ";
	if p->statement.snap then line = line || "snap ";
	if p->statement.system then line = line || "system ";
	if p->statement.irreducible then line = line || "irreducible ";
	if p->statement.checked then line = line || "checked ";
	if p->statement.save_temps then line = line || "save_temps ";
	if p->statement.suppress_warnings then line = line || "suppress_warnings ";
	if p->statement.force_nonquick then line = line || "force_nonquick ";
	if p->statement.expanded_by_name then line = line || "expanded_by_name ";
	if length(line) ^= 0 then call ioa_("^vx^a",tree_level,line);
	m=p->statement.reference_count;
	if m ^= 0
	then call ioa_("^vxreference count = ^d",tree_level,m);
	q=p->statement.reference_list;
	if q ^= null then call ioa_("^vxreference list = ^p",tree_level,q);
	q = p -> statement.state_list;
	if q ^= null then call ioa_("^vxstate list = ^p",tree_level,q);
	q=p->statement.labels;
	if q ^= null
	then do;
		call ioa_("^vxlabels:",tree_level);
		do while(q^=null);
		if q->list.element(2)->node.type=token_node
		then call ioa_(q->list.element(2)->t_table.string);
		else call display_exp((q->list.element(2)),tree_level+1);		/* for arrays */
		q=q->list.element(1);
		end;
	     end;
	q=p->statement.root;
	if q ^= null
	then do;
		call ioa_("^vxroot:",tree_level);
		call display_exp(q,tree_level+1);
	     end;
	call ioa_("^vxEND ^a STATEMENT ^p^/",tree_level,st(itype),p);
	return;
end display_statement;
