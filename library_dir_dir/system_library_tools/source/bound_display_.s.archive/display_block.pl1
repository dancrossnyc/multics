/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_block:
	procedure(node_ptr,walk,no_dcls,source,tree_level);

/*	Modified on:	11 August 1971 by PG */
/*	Modified on:	22 September 1971 by PAB */
/*	Modified on:	28 February 1978 by PCK for options(main) */
/*	Modified on:	29 November 1979 by PCK to display output with tree level indentation */

dcl	(p, q, node_ptr) ptr;

dcl	(addr, fixed, null, length, string, substr) builtin;

dcl	 display_exp entry(ptr,fixed bin);

dcl	display_any_node_name	ext entry(char(*) aligned,ptr,fixed bin),
	display_statement		ext entry(ptr,bit(1) aligned,fixed bin),
	display_symbol		ext entry(ptr,fixed bin),
	display_block		ext entry(ptr,bit(1) aligned,bit(1) aligned,bit(1) aligned,fixed bin),
	ioa_			ext entry options(variable),
	decode_node_id entry(ptr,bit(1) aligned) returns(char(120) varying),
	convert_binary_integer_$decimal_string entry(fixed bin(15)) returns(char(12) varying),
	ii			fixed bin(18),
	tree_level		fixed bin,
	(no_dcls,source,walk)	bit(1) aligned,
	(i,j)			fixed bin(17);

dcl	display_stat_$brief_display bit(1) ext static;


dcl	context_bits(20) bit(1) unaligned based(addr(q->context.types)),
	context_bit_names(20) char(11) aligned int static init(
	"structure","fixed","float","bit","char","ptr","offset","area","label",
	"entry","file","label_const","entry_const","file_const","condition",
	"format","builtin","generic","picture","parameter");


dcl	n fixed bin(15);

dcl	btype char(12),
	block_type(6) char(12) int static init(" root block", "n ext proc",
	 "n int proc", " begin block", "n on unit", " quick sub"),
	itype fixed bin(15);

dcl	bit_names(5) char(16) static varying
	init("like ", "no_stack ", "get_data ", "flush_at_call ", "text_displayed ");

dcl	nonquick_reasons (13) char (24) internal static varying
	init ("auto_adjustable ", "returns_star ", "stack_extended ", "invoked_by_format ",
	"format_stmt ", "io_stmts ", "assigned_to_entry_var ",
	"condition_stmts ", "no_owner ", "recursive_call ", "options_non_quick ", "options_variable ",
	"never_referenced ");

dcl	line char(80) varying,
	word bit(36) unaligned based,
	b36 bit(36) aligned;

dcl	pl1_stat_$constant_list ptr ext static,
	pl1_stat_$defined_list ptr ext static,
	pl1_stat_$temporary_list ptr ext static;


%include token;
%include block;
%include default;
%include list;
%include statement;
%include symbol;
%include context;
%include nodes;

			/*eject*/
	p=node_ptr;
start:
	if p=null
	then do;
		call ioa_("^vxblock ptr is NULL",tree_level);
		go to ret;
	     end;

	if p->node.type^=block_node
	then do;
		call display_any_node_name("display_block: arg is not a block node,
arg =",p,tree_level+1);
		go to ret;
	     end;

	itype= fixed(p->block.block_type,9);
	if itype<=6 & itype>=1 
	then btype=block_type(itype);
	else btype = convert_binary_integer_$decimal_string(itype);

	call ioa_("^/^vxBLOCK ^p is a^a",tree_level,p,btype);
	call ioa_("^vx^a",tree_level,decode_node_id(p,"0"b));
	i=p->block.level;
	if i ^= 0 then call ioa_("^vxlevel = ^d",tree_level,i);

	ii=p->block.symbol_block;
	if ii ^= 0 then call ioa_("^vxruntime symbol block is ^6w",tree_level,ii);

	i = p -> block.last_auto_loc;
	if i ^= 0 then call ioa_("^vxlast auto loc = ^6w",tree_level,i);

	i = p -> block.number_of_entries;
	if i ^= 0 then call ioa_("^vxnumber of entries = ^d",tree_level,i);

	call ioa_("^vxprefix = ^4o",tree_level,fixed(p->block.prefix,12));
	call ioa_("^vxfather = ^p",tree_level,p->block.father);

	if p->block.options_main
	     then call ioa_("^vxoptions_main",tree_level);

	line = "";
	b36 = addr(p -> block.like_attribute) -> word;

	do i = 1 to hbound(bit_names,1);
	     if substr(b36,i,1)
	     then line = line || bit_names(i);
	     end;

	if length(line) ^= 0 then call ioa_("^vx^a",tree_level,line);

	line = "nonquick reasons: ";
	do i = 1 to hbound (nonquick_reasons, 1);
	     if substr (string (p -> block.why_nonquick), i, 1) = "1"b
	     then do;
		     if length (line) + length (nonquick_reasons (i)) > 80
		     then do;
			     call ioa_ ("^vx^a",tree_level,line);
			     line = "                  ";
			end;

		     line = line || nonquick_reasons (i);
		end;
	end;

	if length (line) > length ("nonquick reasons: ")
	then call ioa_ ("^vx^a",tree_level,line);

	call ioa_("^vxnumber = ^d",tree_level,p->block.number);

	if p->block.owner ^= null
	     then call ioa_("^vxowner = ^p",tree_level,p->block.owner);

	q = p -> block.return_values;
	if q^=null
	then do;
		if display_stat_$brief_display then call ioa_("^vxreturn values = ^p",tree_level,q);
		else do;
		call ioa_("^vxreturn values:",tree_level);

		do while(q^=null);
			call display_exp((q->list.element(2)),tree_level+1);
			q=q->list.element(1);
			end;
		end;
	end;

	q = p -> block.return_count;
	if q^=null
	then do;
	     if display_stat_$brief_display then call ioa_("^vxreturn count = ^p",tree_level,q);
	     else do;
		call ioa_("^vxreturn count:",tree_level);
		call display_exp(q,tree_level+1);
		end;
	end;

	do i = 1 to 3;
	     q = p -> block.free_temps(i);
	     if q ^= null then call ioa_("^vxfree temps(^d) = ^p",tree_level,i,q);
	     end;

	i = p -> block.enter.start;
	j = p -> block.enter.end;
	if i + j ^= 0
	then call ioa_("^vxenter.start = ^o, enter.end = ^o",tree_level,i,j);

	i = p -> block.leave.start;
	j = p -> block.leave.end;
	if i + j ^= 0
	then call ioa_("^vxleave.start = ^o, leave.end = ^o",tree_level,i,j);

	q = p -> block.entry_list;
	if q ^= null then call ioa_("^vxentry list = ^p",tree_level,q);

	q=p->block.plio_ps;
	if q ^= null then call ioa_("^vxplio_ps= ^p",tree_level,q);

	q=p->block.plio_fa;
	if q ^= null then call ioa_("^vxplio_format_area= ^p",tree_level,q);

	q=p->block.plio_ffsb;
	if q ^= null then call ioa_("^vxplio_ffsb= ^p",tree_level,q);

	q=p->block.plio_ssl;
	if q ^= null then call ioa_("^vxplio_ssl= ^p",tree_level,q);

	q=p->block.plio_fab2;
	if q ^= null then call ioa_("^vxplio_fab2= ^p",tree_level,q);

	q = p -> block.declaration;
	if q = null
	then call ioa_("^vxno dcls",tree_level);
	else do;
	     if display_stat_$brief_display | no_dcls then call ioa_("^vxdeclarations = ^p",tree_level,q);
	     else do;
		call ioa_("^vxdeclarations:",tree_level);
dcl_loop: 	call display_symbol(q,tree_level+1);
		q=q->symbol.next;
		if q^=null then go to dcl_loop;
		end;
	     end;

ck_context:
	q=p->block.context;
	if q = null
	then call ioa_("^vxno context",tree_level);
	else do;
	     if display_stat_$brief_display then call ioa_("^vxcontext = ^p",tree_level,q);
	     else do;
		call ioa_("^vxcontext:",tree_level);
ctxt_loop:	call ioa_("^vxidentifier is ^a, attributes are:",tree_level,q->context.token->token.string);
		do i = 1 to 20;
		if context_bits(i) then call ioa_("^vx^a",tree_level,context_bit_names(i));
		end;
		q=q->context.next;
		if q^=null then go to ctxt_loop;
	     end;
	     end;

	if p->block.father=null
	then do;
		if pl1_stat_$constant_list^=null
		then do;
		     if display_stat_$brief_display then call ioa_("^vxconstants = ^p",tree_level,pl1_stat_$constant_list);
		     else do;
			call ioa_("^vxconstants:",tree_level);

			q=pl1_stat_$constant_list;
			do while(q^=null);
				call display_symbol(q,tree_level+1);
				q=q->symbol.multi_use;
			end;
		     end;
		end;

		if pl1_stat_$temporary_list^=null
		then do;
		     if display_stat_$brief_display then call ioa_("^vxtemporaries = ^p",tree_level,pl1_stat_$temporary_list);
		     else do;
			call ioa_("^vxtemporaries:",tree_level);

			q=pl1_stat_$temporary_list;
			do while(q^=null);
				call display_symbol(q,tree_level+1);
				q=q->symbol.multi_use;
			end;
		     end;
		end;

		if pl1_stat_$defined_list ^= null
		then do;
		     if display_stat_$brief_display
		     then call ioa_("^vxdefined overlays = ^p",tree_level,pl1_stat_$defined_list);
		     else do;
			call ioa_("^vxdefined overlays:",tree_level);

			do q = pl1_stat_$defined_list repeat q -> symbol.multi_use while(q ^= null);
			     call display_symbol(q,tree_level+1);
			     end;
			end;
		     end;
	end;

	q=p->block.default;
	if q^=null then do;
	     if display_stat_$brief_display then call ioa_("^vx^vxdefaults = ^p",tree_level,tree_level,q);
	     else do;
		call ioa_("^vxdefault:",tree_level);
default_loop:	call display_symbol(q,tree_level+1);
		q=q->default.next;
		if q^=null then go to default_loop;
	     end;
		end;

	q = p -> block.prologue;
	if q = null
	then call ioa_("^vxno prologue",tree_level);
	else do;
	     if display_stat_$brief_display then call ioa_("^vxprologue = ^p",tree_level,q);
	     else do;
		call ioa_("^vxprologue:",tree_level);
pro_loop: 	call display_statement(q,"0"b,tree_level+1);
		q=q->statement.next;
		if q^=null then go to pro_loop;
		end;
	     end;

	q = p -> block.main;
	if q = null
	then call ioa_("^vxno main",tree_level);
	else do;
	     if display_stat_$brief_display then call ioa_("^vxmain = ^p",tree_level,q);
	     else do;
		call ioa_("^vxmain:",tree_level);
main_loop:	call display_statement(q,source,tree_level+1);
		q=q->statement.next;
		if q^=null then go to main_loop;
		end;
	     end;


	q=p->block.son;
	if q = null
	then call ioa_("^vxno sons",tree_level);
	else if ^walk | display_stat_$brief_display then call ioa_("^vxson = ^p",tree_level,q);
		else do;
			call ioa_("^vxson:",tree_level);
			call display_block(q,walk,no_dcls,source,tree_level+1);
		     end;

	if p->block.brother=null
	then call ioa_("^vxno brothers",tree_level);
	else if ^walk | display_stat_$brief_display then call ioa_("^vxbrother = ^p",tree_level,p->block.brother);
		else do;
			call ioa_("^vxEND BLOCK ^p^/",tree_level,p);
			p=p->block.brother;
			call ioa_("^vxbrother:",tree_level);
			go to start;
		     end;

ret:	call ioa_("^vxEND BLOCK ^p^/",tree_level,p);
	return;
end display_block;
