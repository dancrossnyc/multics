/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	Modified on:	10 August 1971 by PG */
/*	Modified on: 14 July 1978 by PCK for unsigned binary */
/*	Modified on: 25 April 1979 by PCK to implement 4-bit decimal */
/*	Modified on: 29 November 1979 by PCK to print a tree level indented listing */

/* This program prints a formatted dump of the symbol table pointed to
    by p. */

display_symbol: proc(a,tree_level);

dcl (a,p,q,vector) ptr, 
    line char(96),
    tree_level fixed bin,
    lp fixed bin;

dcl i fixed bin(31);
dcl n fixed bin(15);
dcl k fixed bin;
dcl	based_bitstring bit(36) aligned based;

dcl display_any_node_name ext entry(char(*) aligned, ptr,fixed bin);
dcl ioa_ ext entry options(variable);
dcl decode_node_id entry(ptr,bit(1)) returns(char(120) varying);
dcl ( display_array, display_exp, display_constant)
	ext entry(ptr,fixed bin);
dcl (fixed,string,length,null) builtin;

dcl	display_stat_$brief_display bit(1) ext static;

dcl boundary_type(0:7) char(5) int static aligned init("----","bit ","digit","byte","half","word","mod2","mod4");
dcl declare_type(0:5) char(8) int static init("--------","declare ","expl ctx","context ",
					"implicit","compiler");


% include symbol;
%include default;
%include label;
%include statement;
% include nodes;
%include token_list;
%include list;
%include label_array_element;
%include declare_type;

dcl names(89) char(20) varying int static initial(

	 /* data_type */

"structure",
"fixed",
"float",
"bit",
"char",
"ptr",
"offset",
"area",
"label",
"entry",
"file",
"arg_descriptor",
"storage_block",
"unused_1",
"condition",
"format",
"builtin",
"generic",
"picture",

	 /* misc_attributes */

"dimensioned",
"initialed",
"aligned",
"unaligned",
"signed",
"unsigned",
"precision",
"varying",
"local",
"decimal",
"binary",
"real",
"complex",
"variable",
"reducible",
"irreducible",
"returns",
"position",
"internal",
"external",
"like",
"member",
"non_varying",
"options",
"variable_arg_list",	 /* options(variable) */
"alloc_in_text",		 /* options(constant) */

	 /* storage_class */

"auto",
"based",
"static",
"controlled",
"defined",
"parameter",
"param_desc",
"constant",
"temporary",
"return_value",

	 /* file_attributes */

"print",
"input",
"output",
"update",
"stream",
"reserved_1",
"record",
"sequential",
"direct",
"interactive",	 /* env(interactive) */
"reserved_2",
"reserved_3",
"stringvalue",	 /* env(stringvalue) */
"keyed",
"reserved_4",
"environment",

	 /* compiler_developed */

"aliasable",
"packed",
"passed_as_arg",
"allocate",
"set",
"exp_extents",
"refer_extents",
"star_extents",
"isub",
"put_in_symtab",
"contiguous",
"put_data",
"overlayed",
"error",
"symtab_processed",
"overlayed_by_builtin",
"defaulted",
"connected"
);

p=a;

if p = null then do;
	call ioa_("^/^vxdisplay_symbol: ptr is NULL^/",tree_level);
	return;
	end;

if p->node.type=label_node
 then do;
	call ioa_("^/^vxLABEL ^p is ^a",tree_level,p,p->label.token->t_table.string);
	if p->label.statement ^= null
	then if ^ p->label.array
	     then call ioa_("^vxfor ^a",tree_level,decode_node_id((p -> label.statement),"0"b));
	     else do;
		call ioa_("^vxfor:",tree_level);
		vector = p->label.statement;

		if vector -> node.type = label_array_element_node
		then do while(vector ^= null);
		     call ioa_("^vx^4x^a",tree_level,decode_node_id((vector->label_array_element.statement),"0"b));
		     vector = vector->label_array_element.next;
		     end;

		else do i = 1 to vector->list.number;
		     if vector->element(i) = null
			then call ioa_("^vx^4xNULL",tree_level);
			else call ioa_("^vx^4x^a",tree_level,decode_node_id((vector->element(i)),"0"b));
		     end;
		end;
	call ioa_("^vxdeclared by ^a",tree_level,declare_type(fixed(p->label.dcl_type,3,0)));
	call ioa_("^vxblock = ^p, token = ^p, next = ^p, statement = ^p",tree_level,
		p->label.block_node,p->label.token,p->label.next,p->label.statement);
	if p->label.allocated then call ioa_("^vxallocated bit is ON",tree_level);
	i=p->label.location;
	if i ^= 0 then call ioa_("^vxlocation = ^6w",tree_level,i);
	if p->label.array then call ioa_("^vxarray bit is ON, low bound = ^d, high bound = ^d",tree_level,
	 p -> label.low_bound,p -> label.high_bound);
	call ioa_("^vxEND LABEL ^p^/",tree_level,p);
	return;
    end;


	if p->node.type = default_node
	then do;
		call ioa_("^/^vxDEFAULT ^p, ^a",tree_level,p,decode_node_id(p,"0"b));

		q = p -> default.predicate;
		if q ^= null then call show_exp("predicate");

		if p->default.system then call ioa_("^vxdefault is system",tree_level);
		if p->default.error then call ioa_("^vxdefault is error",tree_level);
		if p->default.no_defaults then call ioa_("^vxdefault is no defaults",tree_level);

		call ioa_("^vxsymbol for default follows",tree_level);
		call display_symbol((p -> default.symbol),tree_level+1);

		call ioa_("^vxEND DEFAULT ^p^/",tree_level,p);
		return;

	     end;

if p->symbol.node_type ^= symbol_node then do;
	call display_any_node_name("display_symbol: arg is not a symbol node,
arg =",p,tree_level+1);
	return;
	end;

call ioa_("^/^vxSYMBOL ^p, is ^a",tree_level,p,p->symbol.token->t_table.string);
if p -> symbol.dcl_type = by_declare
then call ioa_("^vxdeclared by declare on ^a",tree_level,decode_node_id(p,"0"b));
else call ioa_("^vxdeclared by ^a",tree_level,declare_type(fixed(p -> symbol.dcl_type,17,0)));

call ioa_("^vxblock = ^p, token = ^p, next = ^p",tree_level,
	p->symbol.block_node,p->symbol.token,
	p->symbol.next);

if p->symbol.multi_use ^= null then call ioa_("^vxmulti_use = ^p",tree_level,p->symbol.multi_use);

k = p->symbol.level;
if k ^= 0 then call ioa_("^vxlevel = ^d",tree_level,k);

k = p->symbol.scale;
if k ^= 0 then call ioa_("^vxscale = ^d",tree_level,k);

k = fixed(p -> symbol.runtime,18);
if k ^= 0 then call ioa_("^vxruntime = ^o",tree_level,k);

k = fixed(p -> symbol.runtime_offset,18);
if k ^= 0 then call ioa_("^vxruntime offset = ^o",tree_level,k);

if p->symbol.father ^= null then call ioa_("^vxfather = ^p",tree_level,p->symbol.father);
if p->symbol.brother ^= null then call ioa_("^vxbrother = ^p",tree_level,p->symbol.brother);
if p->symbol.son ^= null then call ioa_("^vxson = ^p",tree_level,p->symbol.son);

i=p->symbol.boundary;
if i ^= 0 then call ioa_("^vxboundary is ^a",tree_level,boundary_type(i));

if p->symbol.allocated then call ioa_("^vxallocated bit is ON",tree_level);

i=p->symbol.location;
if i^= 0 then call ioa_("^vxlocation = ^6w (^d decimal)",tree_level,i,i);

q=p->symbol.cross_references;
if q ^= null then call ioa_("^vxcross_ref = ^p",tree_level,q);

i=p->symbol.c_word_size;
if i ^= 0 then call ioa_("^vxc_word_size = ^d",tree_level,i);

i=p->symbol.c_bit_size;
if i ^= 0 then call ioa_("^vxc_bit_size = ^d",tree_level,i);

i=p->symbol.c_dcl_size;
if i ^= 0 then call ioa_("^vxc_dcl_size = ^d",tree_level,i);

if string(p -> symbol.attributes) = "0"b
then do;
     call ioa_("^vxNo attributes",tree_level);
     goto long;
     end;

line = "Attributes:";
lp = 13;

do i = 1 to length(string(p -> symbol.attributes));
     if substr(string(p -> symbol.attributes),i,1)
     then if i <= hbound(names,1)
	then do;
	     n = length(names(i));
	     substr(line,lp,n) = names(i);
	     lp = lp + n + 1;

	     if lp > 72
	     then do;
		call ioa_("^vx^a",tree_level,line);
		line = "";
		lp = 1;
		end;

	     end;
     end;

if lp > 1 then call ioa_("^vx^a",tree_level,line);

long:	if p -> node.type ^= symbol_node then goto done;

	q=p->symbol.initial;
	if p->symbol.constant
	then if q = null then call ioa_("^vxconstant value ptr is NULL",tree_level);
		       else call display_constant(p,tree_level+1);
	else do;
		if q ^= null
		 then if q->node.type ^= list_node then call display_any_node_name("initial= ",q,tree_level+1);
		else call show("initial attributes",display_initial);
	end;

	if p->symbol.picture
	then do;
		call ioa_("^vxpicture attributes follows:",tree_level);
		if p->pic_fixed then call ioa_("^vxpic_fixed",tree_level);
		if p->pic_float then call ioa_("^vxpic_float",tree_level);
		if p->pic_char  then call ioa_("^vxpic_char ",tree_level);

		call ioa_("^vxpic_scale = ^d, pic_size = ^d",tree_level,p->pic_scale,p->pic_size);
		call ioa_("^vxend of picture attributes",tree_level);
	end;


q=p->symbol.array;
if q ^= null then call show("array data",display_array);

q=p->symbol.descriptor;
if q ^= null then call show_exp("descriptor");

q=p->symbol.equivalence;
if q ^= null then call show_exp("equivalences");

q=p->symbol.reference;
if q ^= null then do;
	call ioa_("^vxreference follows:",tree_level);
	call display_exp(q,tree_level+1);
	end;


q = p->symbol.general;
if q ^= null then call display_any_node_name("general = ",q,tree_level+1);

q = p -> symbol.word_size;
if q ^= null then call show_exp("word size exp");

q=p->symbol.bit_size;
if q ^= null then call show_exp("bit size exp");

q=p->symbol.dcl_size;
if q ^= null then call show_exp("dcl size exp");

q = p -> symbol.symtab_size;
if q ^= null then call show_exp("symtab size exp");

done:

	call ioa_("^vxEND SYMBOL ^p^/",tree_level,p);

return;

show_exp:	proc(message);

dcl		message char(*) aligned;

		if display_stat_$brief_display
		then call ioa_("^vx^a = ^p",tree_level,message,q);
		else do;
		     call ioa_("^vx^a:",tree_level,message);
		     call display_exp(q,tree_level+1);
		     end;

		end;

show:		proc(message,prog);

dcl		message char(*) aligned,
		prog entry(ptr,fixed bin);

		if display_stat_$brief_display
		then call ioa_("^vx^a = ^p",tree_level,message,q);
		else do;
		     call ioa_("^vx^a:",tree_level,message);
		     call prog(q,tree_level+1);
		     end;

		end;

display_initial: proc(listp);

dcl	(listp,q) ptr;

	q=listp;
	do while(q^=null);
	call ioa_("^vxfactor = ",tree_level);
	call display_exp((q->list.element(1)),tree_level+1);
	if q->list.element(2) ^= null
	then if q->list.element(2)->node.type ^= list_node
	     then do;
		call ioa_("^vxvalue =",tree_level);
		call display_exp((q->list.element(2)),tree_level+1);
		end;
	     else call display_initial((q->list.element(2)));
	else call ioa_("vx^a",tree_level,"value = ""*""");
	q=q->list.element(3);
	end;
end display_initial;

end display_symbol;
