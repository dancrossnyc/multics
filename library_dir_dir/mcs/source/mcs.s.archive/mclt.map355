* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* ***********************************************************
	lbl	,colts
	ttl	 mclt multics hc fnp colts exec rev c 821015
	bci	2,821015
	cpr	1981
*
*
* insert comments on purpose of module
*
*
	pcc	on
	pmc	off
	editp	on
	detail	on
	symdef	mclt
	symdef	colts
	symdef	tdip
	symref	begin
	symref	g3wjt
	symref	mdisp
	symref	secdsp
	symref	dspqur
	symref	getbuf
	symref	setbpt
	symref	frebuf
	symref	itest
	symref	gettib
	symref	setptw
	symref	denq
	symref	tdhung
	symref	cvabs
	pmc	save,on
mclt	null
	start	mclt
	tib
	csbits
	tconst
	hwcm
	sfcm
	buffer
	global
	comreg
	ttls	test tib extension definitions
*
	tibex	tb3wjt,word
	tibex	tbscid,word
	tibex	tbiflg,word
	tibex	tbaicw,word
	tibex	tbaiw2,word
	tibex	tbconf,word
	tibex	tbcnf2,word
	tibex	tberc1,word
	tibex	tberc2,word
	tibex	tbhcrb,word
	tibex	tbcbfs,word
	tibex	tbtmp1,word
	tibex	tbtmp2,word
	tibex	tbtmp3,word
	tibex	tbtmp4,word
	tibex	tbtcur,word
	tibex	tbrtib,word
	tibex	tbaux1,word
	tibex	tbvtib,word
	tibex	tbaux2,word
	tibex	tbbufr,word
	tibex	tbbufs,word
	tibex	tbmtal,word
	tibex	tbbtal,word
	tibex	tbspar,word
	tibex	tbsic1,word
	tibex	tbsice,word
*
 	pmc	restore
	ttls	colts executive line handler
*
colts	tstflg	tflisn,slisn
	wait	0,0,begin
*
slisn	signal	dialup
	wait	0,sendr,tshang
*
tshang	tstflg	tfhang,shang
	waitm
*
shangc	calasm	t6dis
shang	signal	hangup
	goto	tdhung
*
sendr	clrflg	tfwrit
	calasm	tdac1
	tstflg	tfupsf,gtibex
sndicm	calasm	tstc11
	tstflg	tfhang,shangc
	sendin
	signal	sndout
	wait	0,sendr,tshngc
*
tshngc	tstflg	tfhang,shangc
	waitm
*
gtibex	clrflg	tfupsf
	getext	tibxsz,texerr
	calasm	tstc3
	goto	sndicm
texerr	calasm	tstc2
	goto	sndicm
*
	ttls	colts test page line handler
*
ctest	wait	0,schan,tchang
*
tchang	tstflg	tfhang,chang
	waitm
*
chang	calasm	t6dtp
	retext
	signal	hangup
	goto	tdhung
*
schan	clrflg	tfwrit
	calasm	tdac2
schana	tstflg	tfofc,schanb
	calasm	prcmes
stcht	setime	1
	wait	timer,0,tchng
*
tchng	tstflg	tfhang,chang
	tstflg	tfacu,timer
	waitm
*
timer	setime	0
	calasm	timprc
sndtes	tstflg	tfhang,chang
	sendin
	signal	sndout
	goto	ctest
*
schanc	clrflg	tfwrit
	calasm	tdac7
	goto	schana
*
schanb	clrflg	tfofc
	signal	sndout
	wait	0,schanc,tthang
tthang	tstflg	tfhang,chang
	waitm
*
       ttls    process dac icm from 600
tdac1	subr	td1
	lda	t.ocp,1	get outbuf ptr
	sta	t.ocur,1	save as current
	stz	t.ocp,1	clear orig ptr
	iaa	2	step to start of icm
	tsy	xsbpt-*,*	set ptr in buff page table for icm base
	sta	t.occh,1	save relative addr of icm
	cax2		copy icm addr to index reg
	lda	t600cd,2	get command code from icm
	icmpa	toplx2	is it link nrx2?
	tze	lnorx2-*	yes, go link it
	icmpa	toplx1	is it link nrx1?
	tze	lnorx1-*	yes, go link
	ldx2	pnores-*	see if non-res exec already linked
	tze	tdac8-*	no, bad news
	icana	toplk2
	tnz	lkmod2-*	go link tp submod2
	icana	toplk1
	tnz	lkmod1-*	go link tp submod1
	icana	topsrt
	tnz	tstc-*	go start test
tdac8	ila	topinv
prcend	sta	temp3-*	save reply code
	ldx2	zerov-*
	return	tdac1	return to op blocks
*
tstc9	ila	topgo	load op complete code
	tra	prcend-*	and return
       rem
rtdac9	ind	tdac9
*
	ttls	process tp dac icm
*
prcmes	subr	pr2
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpproc,2	process msg
	icmpa	0	is it bad icm?
	tnz	tpdac8-*	yes, send back icm
	ldx2	dsp1bs-*	get tp submod ptr
	lda	rtdac9-*	set up return from submod
	sta	ep15,2	save ptr in submod
	tra	ep11,2	go to submod icm decode
*
tdac9	null
	ldx1	-tbvtib,1	restore test tib ptr
	ldx2	t.elnk,1	get tib ext ptr
	lda	-tbtmp2,2	get desired timer value
	sta	stcht+1-*	save for setime
	ldx2	zerov-*
	return	prcmes
*
tpdac8	ldx2	sndtst-*	get op block return ptr
	return	prcmes
*
tdac2	subr	td2
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpda2,2
	ldx2	zerov-*
	return	tdac2	return to op blocks
*
tdac7	subr	td7
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpda7,2
	ldx2	zerov-*
	return	tdac7	return to op blocks
*
       ttls    return icm to 600/6000
*
tstc11	subr	t11
	ldx2	t.occh,1	get icm ptr
	lda	temp3-*	get reply code
	stz	temp3-*	clear temp loc
	sta	t355cd,2	save reply in exec icm
	ldx3	t.ocur,1	set up inp buff ptrs
	stx3	t.icp,1	first buff addr
	ldx3	t.olst,1	last buff addr
	stx3	t.ilst,1
	ldx3	t.ocnt,1	output buff count
	stx3	t.icpl,1	use as input buff count
	stz	t.ocur,1	clear pointers
	stz	t.occh,1
	ldx2	zerov-*
	return	tstc11	return to op blocks
*
tstc2	subr	tc2
	ila	topbuf	get buffer denial code
	ldx2	zerov-*
	return	tstc2	return to op blocks
*
tstc3	subr	tc3
	ldx2	pnores-*	get ptr to nrx1
	tsy	tptc3,2	set up test channel
	ldx2	zerov-*
	return	tstc3	return to op blocks
*
xsbpt	ind	setbpt	set buffer page base
xcvab	ind	cvabs	convert virtual to abs address
sndtst	ind	sndtes
pnores	ind	**	ptr to nrx1
zerov	oct	0
       ttls    channel test request
*
tstc   null        initiate test start
	ldx2	pnores-*	get nrx1 ptr
	tsy	tptstc,2
	icmpa	topinv	check for bad icm
	tze	prcend-*	invalid icm
	icmpa	topbuf	check for buffer denial

	tze	prcend-*	buff denial return
	tra	tstc9-*	normal return
*
       ttls    line dis connect processor
t6dis	subr	t6d
	ldx2	pnores-*	get nrx1 addr
	tze	t6ret-*	gone, so return
	lda	tpmodu,2	get number of users
	tze	t6ds1-*	none, so release nr exec
	stx1	execfl-*	tp still active so set exec disc flag
	tra	t6ret-*	return
t6ds1	tsy	relex-*	release nr exec
t6ret	ldx2	zerov-*
	return	t6dis	return to op blocks
*
modrsl	zero
	ldq	1,3	load size of buffer
	qrl	10	position to num of wds
	iaq	bufsiz	correct count
	tsy	tdlblk-*,*	release it
	tra	modrsl-*,*	return
*
relex	zero
	ldx2	pnores-*	get nrx1 ptr
	tze	relex-*,*	nr exec gone so return
	ldx3	tpxm2,2	get nrx2 ptr
	tze	rlx1-*	already gone
	tmi	rlx1-*	likewise
	tsy	modrsl-*	release nrx2
rlx1	ldx3	pnores-*	get nrx1 ptr
	tsy	modrsl-*	release nrx1
	stz	pnores-*	clear ptr
	tra	relex-*,*	return
*
t6dtp	subr	t6p
	ldx2	dsp1bs-*	get submod addr
       tze     wrapup-*        submod 1 not loaded
       szn     ep10,2          is part 2 loaded?
       tpl     ep14,2          yes go to submod wrapup
wrapup inh
	ldx2	pnores-*	get ptr to nrx1
	tsy	tpdis,2	go finish disconnect
	eni
	lda	dsp1bs-*	get tp submod ptr
	tnz	wrpend-*	tp still present
	lda	execfl-*	tp gone,check if exec disc
	tze	wrpend-*	exec still active
	tsy	relex-*	release non res exec mods
	stz	execfl-*	clear flag
wrpend	ldx2	zerov-*
	return	t6dtp	return to op blocks
*
execfl	oct	0
*
	ttls	link exec non-resident submods
*
lnorx1	null		link nrx1
	szn	pnores-*	get possible ptr to nrx1
	tnz	tstc9-*	already linked, return icm
	tsy	mvblk-*	move to contig buffer
	icmpa	0	check for normal return
	tnz	prcend-*	bad news, buff denied
	ldx2	temp3-*	get nrx1 ptr
	stx2	pnores-*	save it
	stx2	tpxm1,2	save in nrx1 also
	ldaq	tdmdsp-*	set up ptrs in nrx1
	staq	tpmdsp,2	mdisp,secdsp
	ldaq	tdgbuf-*
	staq	tpgbuf,2	getbuf,frebuf
	lda	tdqur2-*
	sta	tpdspq,2	dspqur
	lda	tg3wjt-*
	sta	tpg3w,2	g3wjt
	lda	getadr-*
	sta	tpgtib,2	gettib
	lda	convad-*
	sta	tpsptw,2	setptw
	lda	iitest-*
	sta	tpitst,2	itest
	lda	sigsnd-*
	sta	tpdenq,2	denq
	lda	dsp1bp-*
	sta	tpd1bs,2	dsp1bs
	ldaq	tdsnp-*
	staq	tpsnd,2	tdsnds,wrapup
	lda	testop-*
	sta	tpctst,2	ctest
	lda	icktim-*
	sta	tpchkt,2	cktime
	lda	imodrl-*
	sta	tpmrsl,2	modrsl
	lda	xsbpt-*
	sta	tpsbpt,2	setbpt
	lda	xcvab-*
	sta	tpcvab,2	cvabs
lnxret	stz	temp3-*	clear temp ptr
	tra	tstc9-*	return icm
*
imodrl	ind	modrsl
*
lnorx2	null		link nrx2
	ldx3	pnores-*	check if nrx1 linked
	tze	tstc9-*	no, so return icm
	szn	tpxm2,3	check if nrx2 already linked
	tnz	tstc9-*	yes, return icm
	tsy	mvblk-*	put in contig buffer
	icmpa	0	check for bad return
	tnz	prcend-*	bad news, buff denied
	ldx2	pnores-*	get nrx1 ptr
	lda	temp3-*	get nrx2 ptr
	sta	tpxm2,2	link nrx2 to nrx1
	tsy	tpinz,2	go to nrx1 init
	tra	lnxret-*	return icm
*
	ttls	pointers & entry points in nrx1
*
tpmdsp	equ	2	mdisp
tpsecd	equ	3	secdsp
tpdspq	equ	4	dspqur
tpg3w	equ	5	g3wjt
tpgbuf	equ	6	getbuf
tpfrbf	equ	7	frebuf
tpgtib	equ	8	gettib
tpsptw	equ	9	setptw
tpitst	equ	10	itest
tpdenq	equ	11	denq
tpxm1	equ	12	nrx1
tpxm2	equ	13	nrx2
tpsubm	equ	14	submod1
tpd1bs	equ	15	dsp1bs
tpsnd	equ	16	tdsnds
tpwrp	equ	17	wrapup
tpxtab	equ	18	abs addr xtib
tpmodu	equ	19	moduse
tpchkt	equ	20	cktime
tpsbpt	equ	21	setbpt
tpcvab	equ	22	cvabs
tpmrsl	equ	23	modrsl
tpctst	equ	24	ctest
*
tpip	equ	25	interrupt processor
*
tpinz	equ	27	non-res exec init
*
tpdis	equ	29	disconnect tp
*
tpda2	equ	31
*
tpda7	equ	33
*
tptstc	equ	35
*
tptc3	equ	37
*
tpls1	equ	39	link submod1
*
tpls2	equ	42	link submod2
*
tptim	equ	45	elapsed time proc
*
tpctm	equ	48	check timer
*
tpproc	equ	51	process msg
*
tpsen	equ	54	prepare icm for return
*
       ttls    link t/d submodules
lkmod1 null    link submodule -1-
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpls1,2	go link submod1
	icmpa	0	ck for error
	tnz	prcend-*	error, so exit
	tra	tstc9-*	return icm
*
*
*      module -1- link address table
*
dsp1bs	ind	**	ptr to submod1
*
*
lkmod2 null    link submodule -2-
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpls2,2	go link submod2
	icmpa	0	ck for error
	tnz	prcend-*	error, so exit
	tra	tstc9-*	return icm
*
*
*      submodule 1 header format
*
ep0    equ     0               submodule data
ep1    equ     1               submodule data
ep2    equ     2               exec control
ep3    equ     3               exec control
ep4    equ     4               master dispatcher address
ep5    equ     5               event dispatcher address
ep6    equ     6               tib timeout dispatch address
ep7    equ     7               grts dispatch queuer address
ep8    equ     8               address of icm send routine
ep9    equ     9               exec return address after wrapup
ep10   equ     10              part 2 address and flag
ep11   equ     11              icm decode
ep12   equ     12              process interrupt
ep13   equ     13              process tib timeout
ep14   equ     14              test line wrapup
ep15   equ     15              initialize submodule (entered via tsy)
ep17	equ	17	ptr to getbuf
ep18	equ	18	ptr to frebuf
ep19	equ	19	ptr to setbpt
*
       ttls    colts system symbols and definitions
tdispp bool    26              colts dispatcher priority
trlbkp bool    14              rellbf priority
tdmdspeind     mdisp           master dispatcher
tddisp ind     secdsp          secondary dispatcher
tdsnp eind     tdsnds          return icm to 600
tdwrp  ind     wrapup          exec return address after wrapup
timout	ind	timprc	test tib timeout processor ptr
tdqur2 ind     dspqur          dispatcher queuer
tdgbufeind	getbuf	ptr to getbuf
tdlblk ind     frebuf           frebuf address
*              define icm format
tmcksm equ     2               checksum word
tmcsta	equ	3	355 reply in test icm
t600cd equ     4
t355cd equ     5
tmcid1 equ     6
tmcid2 equ     7
tmcid3 equ     8
tmcid4 equ     9
tmcid5 equ     10
tmcid6 equ     11
       rem     600 to 355 op-codes
topsrt bool    17                                                              
toplk1 bool    100                                                             
toplk2 bool    200                                                             
toplx1	bool	300	link nrx1
toplx2	bool	370	link nrx2
       rem     355 to 600 op-codes
topgo  bool    41              operation complete op-code
topinv bool    42              invalid icm op-code
topact bool    45              channel active op-code
topdis bool    46              line disconnected op-code
topnlk bool    47              module not linked op-code
topbuf bool    50              bufferdenial op-code
       ttls    test system interrupt processor
*
tdip   null
	ldx2	pnores-*	get nrx1 ptr
	tze	tdmdsp-*,*	no nrx1, exit to disp
	tra	tpip,2	process interrupt
*
tg3wjt	ind	g3wjt	get 3rd word of jump table
*
       ttls    time out processor
*
timprc	subr	tim
	ldx2	pnores-*	get nrx1 ptr
	tsy	tptim,2	go proc timer
	lda	t.ocur,1	get abs addr icm buff
	tsy	xsbpt-*,*	set bpt for icm
	ldx2	dsp1bs-*	get submod1 ptr
	tnz	ep13,2	go proc tib timeout
tdsnds	null
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpsen,2	go prepare icm for return
	ldx2	zerov-*
	return	timprc	return to op blocks
*
*
*
cktime	null
	ldx2	pnores-*	get nrx1 ptr
	tsy	tpctm,2	check elapsed time
	ldx1	-tbrtib,3	get abs test tib addr
	tra	tddisp-*,*	exit to secdsp
*
iitest	ind	itest
*
temp2	oct	0
temp3	oct	0
*
       ttls    subroutine      - move icm to contiguous buffer
*
mvblk  zero
	lda	0,2
	sta	temp2-*	save total number 36-bit wds
       als     1               convert to 18-bit wd count
       iaa     bufsiz          force to next even bufsiz
       iana    -bufsiz         mask residue
       caq
       tsy     tdgbuf-*,*      get system buffers - contiguous
       tra     wtmem-*         no go joe
	stx3	temp3-*	save addr for caller
mvblk4 ldaq    2,2             move the data
       staq    2,3
	iacx2	2	increment icm ptr
       iacx3   2               increment block pointer
       ila     -1              decrement move count
       asa     temp2-*
       tnz     mvblk4-*        not done yet
	lda	zerov-*	set to zero for normal return
       tra     mvblk-*,*       move complete
       rem
wtmem  null    can't get contiguous buffers
       ila     topbuf          denied buffers op-code
	tra	mvblk-*,*	return
*
*
*
dsp1bp	ind	dsp1bs
sigsnd	ind	denq
testop	ind	ctest
icktim	vfd	3/0,15/cktime
getadr	ind	gettib
convad	ind	setptw
*
       rem
       end
