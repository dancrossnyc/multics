* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	ttl	module to monitor performce by sampling ic
	lbl	,ic_sampler
	pmc	off
	pcc	on
	editp	on
	rem
	symref	etrip	start of elapsed timer handler - contains ic
	symref	sked	lowest address to check
	symref	idlmrk	start of idle loop
	symref	idlend	end of idle loop
	symref	intp	beginning of interpreter
	symref	intend	end of interpreter
	rem
	symdef	icmon	routine to do the work
	symdef	icmdat	data base for external programs
	rem
	rem
*	this module is controlled by data in the following table.
*	the format of this table is known to ring-4 multics
*	software (debug_fnp), from where it is read and patched.
	rem
icsamp	null
	start	icsamp
	rem
	even
icmdat	null
action	oct	0	multics sets this to request action
	rem		1 = start monitoring
	rem		2 = stop monitoring
	rem		3 = clear table
confrm	oct	0	we set this to confirm receipt of action
	rem		1 = action performed
	rem		2 = illegal action
enable	oct	0	when non-zero, monitoring is on
tbaddr	ind	table	address of data area
tblen	ind	ltable	number of words (2 per bucket)
shift	oct	5	amount to shift address (bucket size)
base	ind	sked	lowest address to watch
	even
orange	oct	0,0	count of out-of-range samples
ilpcnt	oct	0,0	count of samples in idle loop
	eject
icmon	subr	icm,(x1,x2)
	rem
*	first, perform any outstanding actions
*	ring-4 multics software sets an action code. this module responds
*	by performing the action next time is is called and
*	storing a confirmation in 'confrm'
	rem
	lda	action-*	pick up the code
	tze	icm070-*	no request
	icmpa	1	start?
	tze	icm010-*
	icmpa	2	stop?
	tze	icm020-*
	icmpa	3	clear?
	tze	icm030-*
	ila	2	invalid action
	tra	icm060-*	go report it
	rem
icm010	ila	1	start
	sta	enable-*
	tra	icm050-*
	rem
icm020	stz	enable-*	stop
	tra	icm050-*
	rem
icm030	ldx1	tbaddr-*	first addr to clear
	ila	0
	sba	tblen-*	get -length
	ars	1	convert to -double words
	sta	icmtmp-*
	ila	0
	ilq	0
icm040	staq	0,1	clear the table
	iacx1	2
	aos	icmtmp-*
	tmi	icm040-*
	staq	orange-*	clear out-of-range too
	staq	ilpcnt-*	and times at the dis
	rem
icm050	ila	1	report success
icm060	sta	confrm-*
	stz	action-*
	eject
*	now, compute a bucket number and record ic
	rem
icm070	szn	enable-*	are we monitoring?
	tze	icmret-*	no
	lda	shift-*	build shift instruction
	ora	l.a001-*	=arl 0
	sta	icm080-*
	lda	a.a001-*,*	=etrip, the ic interrupted
	cmpa	a.a003-*	=addr(idloop-1) are we in idle loop?
	tmi	icm075-*	no, we're before the beginning
	cmpa	a.a005-*	=addr(idlend+1) check end
	tmi	icm110-*	we're idle, meter it as such
icm075	cmpa	a.a006-*	addr(intp) within interpreter?
	tmi	icm077-*	no
	cmpa	a.a007-*	addr(intend) maybe
	tpl	icm077-*	no
	lda	icmsx2-*	yes, use x2 instead (op block address)
icm077	sba	base-*	get offset
	tmi	icm090-*	out of range
icm080	arl	*-*	divide to get bucket number
	als	1	multiply by 2 (for double word)
	cmpa	tblen-*	too high?
	tpl	icm090-*	yes
	ada	tbaddr-*	compute bucket address
	cax1
	tra	icm100-*
	rem
icm110	ldx1	a.a004-*	=ilpcnt, addr of idle bucket
	tra	icm100-*
	rem
icm090	ldx1	a.a002-*	use out-or-range bucket
	rem
icm100	ila	0
	ilq	1	build a 1
	adaq	0,1
	staq	0,1
	rem
icmret	return	icmon
	rem
	rem
icmtmp	bss	1
a.a001	ind	etrip
a.a002	ind	orange
a.a003	ind	idlmrk	one location before idloop
a.a004	ind	ilpcnt
a.a005	ind	idlend+1
a.a006	ind	intp
a.a007	ind	intend
l.a001	arl	0
	rem
	rem
	even
table	bss	2000
ltable	equ	*-table
	rem
	end
