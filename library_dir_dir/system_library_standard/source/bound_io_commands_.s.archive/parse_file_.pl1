/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* PARSE_FILE_ - Character String Parsing Program.
   1/22/70 - Noel I. Morris
   with apologies to C. Garman		*/

/* last modified by E Stone on 14 Dec 1970 */

parse_file_$parse_file_init_name: proc (dir, entry, p, code);

dcl  name char (*),					/* segment name of segment to be examined */
     p ptr,					/* pointer to segment (returned) */
     code fixed bin (35);				/* error code */

dcl (segp ptr,					/* static pointer to segment */
     cur_pos fixed bin (17),				/* current scanning index */
     cur_nl fixed bin (17),				/* index of last NL encountered */
     line_no fixed bin,				/* current line number */
     msl fixed bin (17)) static;			/* maximum number of characters in segment */
						/*  less one */

dcl  NL char (1) static init ("
");

dcl 1 break_table static aligned,			/* table of break characters */
    2 bit (0:127) bit (1) unaligned;

dcl  bitcnt fixed bin (24),				/* bit count of segment */
     i fixed bin (17),				/* loop index */
     dir char (*),					/* directory path name of segment */
     dname char (168),
     entry char (*),				/* entry name of segment */
     ename char (32);

dcl (null, index, addr, divide, min, substr, fixed, unspec) builtin;

dcl (expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     com_err_ entry options (variable)) ext;


/*  */

/* PARSE_FILE_INIT_NAME - Initialize Program.

   Calling Sequence:
   call parse_file_init_name (dir, entry, p, code);

   Where:
   dir	= directory path name of segment to be examined (input)
   entry	= entry name of segment to be examined (input)
   p	= pointer to segment (returned)
   code	= error code (returned)

*/

	code = 0;					/* Clear the error code. */

	call hcs_$initiate_count (dir, entry, "", bitcnt, 0, segp, code);
	if segp = null then return;			/* Test for null pointer returned. */
	code = 0;					/* Clear any residual error code. */

	p = segp;					/* Return pointer to segment. */
	msl = divide (bitcnt, 9, 18, 0) - 1;		/* Compute character count from bit count. */

common:
	cur_pos, cur_nl = 0;			/* Zero the position indices. */
	line_no = 1;				/* Start with the first line. */

	do i = 0 to 47, 58 to 64, 91 to 96, 123 to 127;	/* Set up the break table. */
	     break_table.bit (i) = "1"b;
	end;
	do i = 48 to 57, 65 to 90, 97 to 122;		/* 0-9, A-Z, a-z are not break characters. */
	     break_table.bit (i) = "0"b;
	end;

	return;					/* Return to caller. */


/*  */

/* PARSE_FILE_INIT_PTR - Initialize Program with Supplied Pointer.

   Calling Sequence:
   call parse_file_init_ptr (p, cc);

   Where:
   p	= pointer to segment (supplied).
   cc	= character count.

*/

parse_file_init_ptr: entry (p, cc);

dcl  cc fixed bin (17);				/* character count */


	segp = p;					/* Save pointer to segment. */
	msl = cc - 1;				/* Save character count. */

	go to common;				/* Tom VV says we should do this. */


/*  */

/* PARSE_FILE_SET_BREAK - Define Break Character(s).

   Calling Sequence:
   call parse_file_set_break (cs);

   Where:
   cs	= control string.  A break will be set for each
   character in the control string.

*/

parse_file_set_break: entry (cs);

dcl  cs char (*);					/* control string */

dcl  setting bit (1);				/* table setting */


	setting = "1"b;				/* Setting is on. */

set:
	do i = 1 to length (cs);			/* Scan the control string. */
	     c1 = substr (cs, i, 1);
	     break_table.bit (fixed (unspec (c1), 9)) = setting;
						/* Set appropriate bit. */
	end;

	return;


/*  */

/* PARSE_FILE_UNSET_BREAK - Undefine Break Character(s).

   Calling Sequence:
   call parse_file_unset_break (cs);

*/

parse_file_unset_break: entry (cs);


	setting = "0"b;				/* Setting is off. */
	go to set;				/* Join common code. */


/*  */

/* PARSE_FILE_ - Return Atom from Text.

   Calling Sequence:
   call parse_file_ (ci, cc, break, eof);

   Where:
   ci	= character index of start of atom (1st char = 1)
   cc	= count of characters in atom
   break	= non-zero if atom is single-character break
   eof	= non-zero if end of segment encountered

*/

parse_file_: entry (ci, cc, break, eof);

dcl  ci fixed bin (17),				/* character index */
     break fixed bin (1),				/* break indicator */
     eof fixed bin (1);				/* end-of-file indicator */

dcl  c1 char (1),					/* current character */
     sw fixed bin (1);				/* non-zero if pointer to be returned */

dcl 1 text based (segp) aligned,			/* text overlay declaration */
    2 ch (0:65535) char (1) unaligned;


	sw = 0;					/* Clear the return pointer switch. */

loop:
	if cur_pos > msl then do;			/* Test for end of file. */
seteof:	     eof = 1;				/* Set end-of-file switch. */
	     return;				/* Return to caller. */
	end;

	c1 = text.ch (cur_pos);			/* Grab current character. */

	if c1 <= " " then do;			/* Ignore all blanks and control characters. */
	     cur_pos = cur_pos + 1;			/* Step character position. */
	     if c1 = NL then do;			/* Test for new line character. */
		cur_nl = cur_pos;			/* Save position of beginning of line. */
		line_no = line_no + 1;		/* Count one line. */
	     end;
	     go to loop;				/* Try for another character. */
	end;

	if c1 = "/" then if cur_pos < msl then if text.ch (cur_pos + 1) = "*" then do;
						/* Test for a comment. */
		     do i = cur_pos + 2 to msl - 1;	/* Scan for end of comment. */
			if text.ch (i) = NL then line_no = line_no + 1; /* look for newlines in comment */
			if text.ch (i) = "*" then if text.ch (i + 1) = "/" then
				go to end_comment;
		     end;
		     go to seteof;			/* Hit the end of file. */
end_comment:
		     cur_pos = i + 2;		/* Step over the comment. */
		     go to loop;			/* And continue scan. */
		end;


/*  */

/* Arrive here after finding a non-break, non-comment sequence. */

break_search:
	do i = cur_pos to msl;			/* Scan through the text. */
	     c1 = text.ch (i);			/* Pick up current character. */
	     if break_table.bit (fixed (unspec (c1), 9)) then go to break_found;
						/* Exit loop on break character. */
	     if c1 = "/" then if text.ch (i + 1) = "*" then
		     go to break_found;		/* Test for sneaky comment. */
	end break_search;

break_found:
	if i = cur_pos then do;			/* Test for single character break. */
	     i = cur_pos + 1;			/* Step to character following break. */
	     break = 1;				/* Indicate break character found. */
	end;
	else					/* Non-break sequence. */
	break = 0;				/* Turn of break indication. */

	if sw = 0 then				/* If index desired ... */
	     ci = cur_pos + 1;			/* Return character index. */
	else
	p = addr (text.ch (cur_pos));			/* Return pointer to string. */
	cc = i - cur_pos;				/* Return character count. */
	eof = 0;					/* Turn off end-of-file switch. */
	cur_pos = i;				/* Update current character position. */

	return;


/*  */

/* PARSE_FILE_PTR - Return Pointer to Atom.

   Calling Sequence:
   call parse_file_ptr (p, cc, break, eof);

   Where:
   p	= pointer to atom (with bit offset)

*/

parse_file_ptr: entry (p, cc, break, eof);


	sw = 1;					/* Set switch. */
	go to loop;				/* Enter main scanning loop. */


/*  */

/* PARSE_FILE_CUR_LINE - Return Current Line Being Scanned.

   Calling Sequence:
   call parse_file_cur_line (ci, cc);

*/

parse_file_cur_line: entry (ci, cc);


	do i = cur_pos to msl while (text.ch (i) ^= NL);
						/* Scan to end of file or NL. */
	end;

	ci = cur_nl + 1;				/* Return index to beginning of line. */
	cc = min (i, msl) - cur_nl + 1;		/* Return correct character count. */

	return;


/*  */

/* PARSE_FILE_LINE_NO - Return the current line number in text.

   Calling sequence:
   call parse_file_line_no (ci);

   Where:
   ci	= current line number (returned)

*/

parse_file_line_no: entry (ci);


	ci = line_no;				/* This is a complicated entry. */
	return;					/* Isn't it? */



/*  */

/* PARSE_FILE_INIT - Initialize Program.

   Calling Sequence:
   call parse_file_init (name, p, code);

   Where:
   name	= name of segment to be examined
   p	= pointer to segment (returned)
   code	= error code

*/

parse_file_init: entry (name, p, code);


	code = 0;					/* Clear the error code. */

	call expand_pathname_ (name, dname, ename, code);
						/* Convert segment name. */
	if code ^= 0 then do;			/* Test for error. */
error:	     call com_err_ (code, "parse_file_", name);	/* Print error message. */
	     return;
	end;

	call hcs_$initiate_count (dname, ename, "", bitcnt, 0, segp, code);
	if segp = null then go to error;		/* Test for null pointer returned. */
	code = 0;					/* Clear any residual error code. */

	p = segp;					/* Return pointer to segment. */
	msl = divide (bitcnt, 9, 18, 0) - 1;		/* Compute character count from bit count. */

	go to common;

     end;
