/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* timed_io_: 1982.09.08 by Richard Lamson					*/
	/*									*/
	/* timed_io_ provides an interface to control orders in I/O modules which allow the	*/
	/* caller to specify that it only wants to wait a certain duration before returning,	*/
	/* whether the I/O has completed or not.					*/
	/*									*/
	/* The following entry points are implemented:					*/
	/*									*/
	/* timed_io_$get_chars (iocbp, timeout, buffer_ptr, buffer_length, chars_read, code);	*/
	/*									*/
	/* timed_io_$get_line  (iocbp, timeout, buffer_ptr, buffer_length, chars_read, code);	*/
	/*									*/
	/* timed_io_$put_chars (iocbp, timeout, buffer_ptr, buffer_length, chars_written, code);	*/
	/*									*/
	/* These entry points perform the same function as the equivalent iox_ entry points,	*/
	/* except that they return in approximately "timeout" microseconds, whether or not their	*/
	/* task is completed.  In the case of put_chars, the number of characters actually	*/
	/* written is returned.							*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	

timed_io_:
	procedure ();
	return;

timed_io_$get_chars:
	entry (P_iocb_ptr, P_timeout, P_buffer_ptr, P_buffer_length, P_characters_read, P_status);

	control_order = "get_chars_timeout";
	go to get_common;

timed_io_$get_line:
	entry (P_iocb_ptr, P_timeout, P_buffer_ptr, P_buffer_length, P_characters_read, P_status);

	control_order = "get_line_timeout";
get_common:
	input_timeout_data.timeout = P_timeout;
	input_timeout_data.buffer_pointer = P_buffer_ptr;
	input_timeout_data.buffer_length = P_buffer_length;
	call iox_$control (P_iocb_ptr, control_order, addr (input_timeout_data), P_status);
	P_characters_read = input_timeout_data.characters_read;
	return;

timed_io_$put_chars:
	entry (P_iocb_ptr, P_timeout, P_buffer_ptr, P_buffer_length, P_characters_written, P_status);

	control_order = "put_chars_timeout";
	output_timeout_data.timeout = P_timeout;
	output_timeout_data.buffer_pointer = P_buffer_ptr;
	output_timeout_data.buffer_length = P_buffer_length;
	call iox_$control (P_iocb_ptr, control_order, addr (output_timeout_data), P_status);
	P_characters_written = output_timeout_data.characters_written;
	return;

%page;
declare  (P_iocb_ptr, P_buffer_ptr) pointer;
declare	P_timeout fixed binary (71);
declare  (P_buffer_length, P_characters_read, P_characters_written) fixed binary (21);
declare	P_status fixed binary (35);

%include io_timeout_info;
declare 1 input_timeout_data aligned like input_timeout_info;
declare 1 output_timeout_data aligned like output_timeout_info;

declare	iox_$control entry (ptr, char(*), ptr, fixed bin(35));

declare	addr builtin;
declare	control_order character (32);

     end;
