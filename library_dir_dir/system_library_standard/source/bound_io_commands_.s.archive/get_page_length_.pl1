/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2020-07-06,GDixon), approve(2020-07-06,MCR10082),
     audit(2020-07-22,Swenson), install(2020-07-22,MR12.6g-0048):
     Created from get_line_length_.pl1 code.
                                                   END HISTORY COMMENTS */

/* GET_PAGE_LENGTH_ - subroutine to return the page length of a given
   stream or switch.

   Based on code for get_line_length_.pl1, written 750206 by PG from a program by the SIPB.
   Modified 801104  by JRD to use mode_string_$parse (MCR 4721)
*/

/* format:  style3,ll122,idind30,ifthenstmt */

get_page_length_:
     procedure;

declare	P_stream			char (*) parameter,
	P_switch_ptr		ptr parameter,
	P_status			fixed bin (35) parameter;

declare	(addr, null)		builtin;

declare	mode_string		char (512),
	switch_ptr		ptr,
	status			fixed bin (35);

declare	1 mv			aligned like mode_value;

declare	error_table_$action_not_performed
				fixed bin (35) external;

declare	mode_string_$get_mode	entry (char (*), char (*), ptr, fixed bin (35));
%page;
%include iox_dcls;
%page;
%include mode_string_info;
%page;
get_page_length_$stream:
     entry (P_stream, P_status) returns (fixed bin (17));

	if P_stream = ""
	then switch_ptr = iox_$user_output;
	else do;
		call iox_$look_iocb (P_stream, switch_ptr, status);
		if status ^= 0 then go to RETURN_CODE;
	     end;
	goto JOIN;


get_page_length_$switch:
     entry (P_switch_ptr, P_status) returns (fixed bin (17));

	switch_ptr = P_switch_ptr;
	if switch_ptr = null () then switch_ptr = iox_$user_output;

JOIN:
	P_status = 0;
	call iox_$modes (switch_ptr, "", mode_string, status);
	if status ^= 0 then go to RETURN_CODE;

	mv.version = mode_value_version_3;
	call mode_string_$get_mode (mode_string, "pl", addr (mv), status);
	if status ^= 0 then goto RETURN_CODE;

	if ^mv.numeric_valuep then goto RETURN_NO_ACTION;

	return (mv.numeric_value);

RETURN_NO_ACTION:
	status = error_table_$action_not_performed;

RETURN_CODE:
	P_status = status;
	return (23);				/* return default page length (policy decision) */

     end get_page_length_;
