/****^  *********************************************************
        *                                                       *
        * Copyright, (C) BULL HN Information Systems Inc., 1990 *
        *                                                       *
        * Copyright, (C) Honeywell Bull Inc., 1988              *
        *                                                       *
        ********************************************************* */


/****^  HISTORY COMMENTS:
  1) change(88-06-09,Brunelle), approve(88-06-09,MCR7911),
     audit(88-10-26,Wallman), install(88-10-28,MR12.2-1199):
     Created.
  2) change(88-11-11,Brunelle), approve(88-11-11,MCR7911),
     audit(88-11-14,Wallman), install(88-11-14,MR12.2-1212):
     Allow -rqt argument; call enter_output_request$request_type to allow user
     defined request type evaluation.
  3) change(90-09-10,Itani), approve(90-09-10,MCR8197), audit(90-09-25,Bubric),
     install(90-10-05,MR12.4-1038):
     Display a usage message if no arguments are entered.
                                                   END HISTORY COMMENTS */

/* format: style4 */

display_forms_info: dfi: proc;

/*  This command displays a list of all forms options available for a given
   request type */

/* External Procedures & Variables */

dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  enter_output_request$request_type entry (char (*), char (*), char (*), fixed bin, fixed bin, fixed bin (35));
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$no_forms_table_defined fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  ioa_ entry () options (variable);
dcl  iod_info_$forms_info entry (char (*), ptr, ptr, fixed bin (35));

dcl  cleanup condition;

dcl  (index, length, null, rtrim) builtin;

/* Internal Static */

dcl  myname char (32) int static options (constant) init ("display_forms_info");

/* Automatic */

dcl  arg char (argl) based (argp);
dcl  argc fixed bin;
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  error fixed bin (35);
dcl  first fixed bin;
dcl  (i, j, k) fixed bin;
dcl  last fixed bin;
dcl  max_name_length fixed bin;
dcl  need_header bit (1);
dcl  request_type_name char (32);
dcl  (queue_default, queue_max) fixed bin;
%page;

/* actual program begins here */

	call cu_$arg_count (argc, error);
	if error ^= 0 then do;
	     call com_err_ (error, myname, "Getting arg count");
	     return;
	end;

          if argc = 0 then do;
               call com_err_ (error_table_$noarg, myname, "^/^6xUsage: ^a {-rqt} rqt_name ", myname);
               return;
	end;

/* get name of request type to process */
	do i = 1 to argc;
	     call cu_$arg_ptr (i, argp, argl, error);
	     if error ^= 0 then do;
get_arg_error:	call com_err_ (error, myname, "Getting argument ^d", i);
		return;
	     end;
	     if index (arg, "-") = 1 then do;		/* have control arg of some type */
		if arg = "-request_type" | arg = "-rqt" then do;
		     if i + 1 > argc then do;
missing_arg:		call com_err_ (error_table_$noarg, myname);
			return;
		     end;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, argl, error);
		     if error ^= 0 then go to get_arg_error;
		     if index (arg, "-") = 1 then go to missing_arg;
		end;
		else do;
		     call com_err_ (error_table_$bad_arg, myname, "^a", arg);
		     return;
		end;
	     end;
	     call display_the_info (arg);
	end;
	return;

clean_up: proc;
	if forms_info_ptr ^= null () then
	     free forms_info;
     end clean_up;
%page;
display_the_info: proc (arg_name);

/* internal procedure to call out and display all return forms info */

dcl  arg_name char (*);				/* user supplied name of the request type */

	call enter_output_request$request_type (arg_name, "printer", request_type_name, queue_default, queue_max, error);
	if error ^= 0 then do;
	     call com_err_ (error, myname, "Processing ^a.", arg);
	     return;
	end;

	forms_info_ptr = null ();

	on cleanup call clean_up;

	call iod_info_$forms_info (request_type_name, null (), forms_info_ptr, error);
	if error ^= 0 then do;
	     if error = error_table_$no_forms_table_defined then
		if arg_name = request_type_name then
		     call ioa_ ("Request type ^a has no forms defined.", request_type_name);
		else call ioa_ ("Request type ^a (-rqt ^a) has no forms defined.", arg_name, request_type_name);
	     else do;
		if arg_name = request_type_name then
		     call com_err_ (error, myname, "Getting forms info for ^a", request_type_name);
		else call com_err_ (error, myname, "Getting forms info for ^a (-rqt ^a)", arg_name, request_type_name);
	     end;
	     go to get_out;
	end;

	max_name_length = 0;
	do i = 1 to forms_info.no_entries;
	     do j = forms_info.entry (i).first_name_index to forms_info.entry (i).last_name_index;
		if length (rtrim (forms_info.names (j))) > max_name_length then
		     max_name_length = length (rtrim (forms_info.names (j)));
	     end;
	end;

/* display the header information */
	if arg_name = request_type_name then
	     call ioa_ ("Request type ^a", request_type_name);
	else call ioa_ ("Request type ^a (-rqt ^a)", arg_name, request_type_name);
	call ioa_ ("Default form: ^[^a^;None Supplied^]",
	     forms_info.default_forms_length ^= 0, forms_info.default_form);

	do i = TYPE_USES, TYPE_ORIENTATION, TYPE_FONT_DESC, TYPE_FONT_NAME,
	     TYPE_FONT_SIZE, TYPE_LINE_DESC, TYPE_SPECIAL, TYPE_HOLES,
	     TYPE_PREAMBLE, TYPE_POSTAMBLE;
	     need_header = "1"b;
	     do j = 1 to forms_info.no_entries;
		if forms_info.types (forms_info.entry (j).type_index) = i then do;
		     first = forms_info.entry (j).first_name_index;
		     last = forms_info.entry (j).last_name_index;
		     if need_header then do;
			if i = TYPE_USES then
			     call ioa_ ("^/Forms - combinations");
			else call ioa_ ("^/Forms - ^a", FORMS_TYPE_STRINGS (i));
			need_header = "0"b;
		     end;
		     do k = first to last;
			if k = first then do;
			     call ioa_ ("  ^va  ^[No description supplied.^s^;^a^]",
				max_name_length, forms_info.names (k),
				forms_info.entry (j).comment_index = 0,
				forms_info.comments (forms_info.entry (j).comment_index));
			     if first = last then
				if i = TYPE_USES then
				     call ioa_ ("  ^vx    Uses: ^a",
					max_name_length, forms_info.uses (forms_info.entry (j).uses_index));
			end;
			else do;
			     call ioa_ ("    ^va^[  Uses: ^a",
				max_name_length, forms_info.names (k),
				((k = first + 1) & (i = TYPE_USES)), forms_info.uses (forms_info.entry (j).uses_index));
			end;
		     end;
		end;
	     end;
	end;
get_out:	call clean_up;

     end display_the_info;
%page; %include iod_tables_hdr;
%page; %include iod_forms_info_tab;
%page; %include user_forms_info;

     end display_forms_info;
