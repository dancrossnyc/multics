/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This program is called by enter_output_request.  eor stored user-defined default	*/
	/* control argument settings in the default value segment as binary data values.  This	*/
	/* program converts these values from version 6 to version 7 format.  The only		*/
	/* difference between versions is that version 7 supports -dupt.			*/
	/*									*/
	/* Status:								*/
	/* Created:    June, 1982 by R. Kovalcik from eor_cv5_6_.pl1.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

eor_cv6_7_:
	proc(Pdefault_header, code);



%include dprint_arg;



%include value_structures;



    dcl	Pdefault_header		ptr,
	code			fixed bin(35);

    dcl	Pd			ptr,
    	Pnd			ptr,
	area			area(4096),
	dft_name			char(28) varying,
	d_size			fixed bin(18),
	i			fixed bin;

   dcl	Vdefault_header_7		fixed bin int static options(constant) init(7);
						/* Version 7 supports -dupt.			*/

    dcl	DEFAULT_VALUE_SEG		ptr int static options(constant) init(null),
	PERM			bit(36) aligned int static options(constant) init("01"b);
	


    dcl	1 default_header		aligned based(Pdefault_header),
	  					/* Structure containing default request types */
	  2 version		fixed bin,
	  2 default_request_type (3)	char(24) unal,

	1 default,				/* Structure containing general argument defaults	*/
	  2 header,
	    3 Ntype		fixed bin,
	    3 name		char(24) unal,
	    3 size		fixed bin(18),

	1 d			aligned based(Pd),
	  2 header		like default.header,
	  2 data (d_size - size(default))
				fixed bin,

	1 default_print		aligned,		/* Structure containing print argument defaults	*/
	  2 header,
	    3 Ntype		fixed bin,
	    3 name		char(24) unal,
	    3 size		fixed bin(18),
	  2 Odft,					
	    3 request_type		char(24) unal,
	    3 form_name		char(24) unal,
	  2 Sdft,
	    3 processing_control,
	      4 brief		bit(1),
	      4 force		bit(1),
	    3 carriage_control,
	      4 nep		bit(1),
	      4 single		bit(1),
	      4 non_edited		bit(1),
	      4 truncate		bit(1),
	    3 label,
	      4 top		bit(1),
	      4 bottom		bit(1),
	      4 access		bit(1),
	  2 Ndft,
	    3 pt_pch		fixed bin,
	    3 delete		fixed bin,
	    3 notify		fixed bin,
	    3 copies		fixed bin,
	    3 queue		fixed bin,
	    3 output_module		fixed bin,
	    3 lmargin		fixed bin,
	    3 line_lth		fixed bin,
	    3 page_lth		fixed bin,

	1 old_print		aligned based(Pd),
	  2 header		like default_print.header,
	  2 Odft			like default_print.Odft,
	  2 Sdft			like default_print.Sdft,
	  2 Ndft			like default_print.Ndft,
	  2 data (d_size - size(default_print))
				fixed bin,

	1 new_print		aligned based(Pnd),
	  2 header		like default_print.header,
	  2 Odft			like default_print.Odft,
	  2 Sdft			like default_print.Sdft,
	  2 Ndft			like default_print.Ndft,
	  2 defer_until_process_termination fixed bin,
	  2 data (d_size - size(default_print))
				fixed bin,

	1 default_punch		aligned,		/* Structure containing punch and plot argument defaults */
	  2 header,
	    3 Ntype		fixed bin,
	    3 name		char(24) unal,
	    3 size		fixed bin(18),
	  2 Odft,
	    3 request_type		char(24),
	  2 Sdft,
	    3 processing_control,
	      4 equal_header	bit(1),
	      4 brief		bit(1),
	      4 force		bit(1),
	  2 Ndft,
	    3 pt_pch		fixed bin,
	    3 delete		fixed bin,
	    3 notify		fixed bin,
	    3 copies		fixed bin,
	    3 queue		fixed bin,
	    3 output_module		fixed bin,

	1 old_punch		aligned based(Pd),
	  2 header		like default_punch.header,
	  2 Odft			like default_punch.Odft,
	  2 Sdft			like default_punch.Sdft,
	  2 Ndft			like default_punch.Ndft,
	  2 data (d_size - size(default_punch))
				fixed bin,

	1 new_punch		aligned based(Pnd),
	  2 header		like default_punch.header,
	  2 Odft			like default_punch.Odft,
	  2 Sdft			like default_punch.Sdft,
	  2 Ndft			like default_punch.Ndft,
	  2 defer_until_process_termination fixed bin,
	  2 data (d_size - size(default_punch))
				fixed bin;



    dcl	1 mi			aligned,		/* Automatic copy of match_info		*/
	  2 version		fixed bin init(1),
	  2 name_count		fixed bin init(1),
	  2 max_name_length		fixed bin init(30),
	  2 name_array (1),
	    3 exclude_sw		bit(1) unal init("0"b),
	    3 regexp_sw		bit(1) unal init("0"b),
	    3 pad			bit(34) unal init("0"b),
	    3 name		char(30) varying;



    dcl  (addr, after, empty, index, length, null, search, size, substr, translate)
				builtin;

    dcl	value_$delete_data		entry (ptr, bit(36) aligned, char(*), fixed bin(35)),
	value_$get_data		entry (ptr, bit(36) aligned, char(*), ptr, ptr, fixed bin(18),
				     fixed bin(35)),
	value_$list_data_names	entry (ptr, bit(36) aligned, ptr, ptr, ptr, fixed bin(35)),
	value_$set_data		entry (ptr, bit(36) aligned, char(*), ptr, fixed bin(18), ptr, ptr,
				     fixed bin(18), fixed bin(35));



	code = 0;					/* No error yet.				*/

	mi.name(1) = "eor.**.*._";
	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr(mi),
	   addr(area), value_list_info_ptr, code);	/* Get a list of eor-related data items.	*/

	do i = 1 to value_list_info.pair_count;		/* Convert each one.			*/

	   dft_name = substr(value_list_info.chars,
	      value_list_info.pairs(i).name_index,
	      value_list_info.pairs(i).name_len);	/* Get a name.				*/
	   dft_name = after(dft_name,".");
	   dft_name = substr(dft_name,1,length(dft_name)-2);

	   call value_$get_data (DEFAULT_VALUE_SEG, PERM,
	      "eor." || dft_name || "._",
	      addr(area), Pd, d_size, code); 		/* Get the associated data.			*/ 
	   if code ^= 0 then go to ERROR_EXIT;

	   if d.Ntype = DP_PRINT then do;		/* These are print defaults.			*/
	      allocate new_print in (area);		/* Convert them.				*/
	      new_print = old_print, by name;
	      new_print.defer_until_process_termination = 0;
	      call value_$set_data (DEFAULT_VALUE_SEG, PERM,
	         "eor." || dft_name || "._", Pnd, size (new_print),
	         null, null, 0, code);
	      if code ^= 0 then go to ERROR_EXIT;
	      free new_print in (area);
	   end;					/* End of print conversion.			*/

	   else if (d.Ntype = DP_PUNCH) | (d.Ntype = DP_PLOT) then do;  /* These are punch or plot defaults. */
	      allocate new_punch in (area);		/* Convert them.				*/
	      new_punch = old_punch, by name;
	      new_punch.defer_until_process_termination = 0;
	      call value_$set_data (DEFAULT_VALUE_SEG, PERM,
	         "eor." || dft_name || "._", Pnd, size (new_punch),
	         null, null, 0, code);
	      if code ^= 0 then go to ERROR_EXIT;
	      free new_punch in (area);		
	   end;					/* End of punch and plot conversion.		*/

	   free d in (area);			/* Free the data.				*/

	end;					/* End of conversion loop.			*/

	default_header.version = Vdefault_header_7;	/* Set info in header.			*/
	call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor._",
	   Pdefault_header, size(default_header), null, null, 0, code);

ERROR_EXIT:
	return;					/* All done. 				*/

	end eor_cv6_7_;
