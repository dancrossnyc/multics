/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* get_com_channel_info_ -- subroutine interface to the
   as_request for com_channel_info. */

/* format: style2 */

get_com_channel_info_:
     procedure (P_info_ptr, P_code);

/**** Created 1985-02-19, BIM */


	declare P_info_ptr		 pointer;
	declare P_code		 fixed bin (35);

	declare as_user_message_$user_read_message
				 entry (pointer, pointer, fixed bin (35));
	declare get_system_free_area_	 entry () returns (ptr);
	declare send_as_request_$block entry (pointer, fixed binary, bit (72) aligned, bit (72) aligned,
				 fixed binary (35));

/* format: off */
%page; %include as_user_message_info;
%page; %include as_request_header;
%page; %include asr_com_channel_info;
%page; %include as_com_channel_info;
/* format: on */

	declare 1 asum_info		 aligned like as_user_message_info;
	declare 1 asrcci		 aligned like asr_com_channel_info;
	declare unique_bits_	 entry () returns (bit (70));
	declare asr_reply		 bit (72) aligned;
	declare error_table_$unimplemented_version
				 fixed bin (35) ext static;
	declare cleanup		 condition;

	declare addr		 builtin;
	declare currentsize		 builtin;
	declare null		 builtin;
	declare unspec		 builtin;

	as_com_channel_info_ptr = P_info_ptr;
	if as_com_channel_info.version ^= AS_COM_CHANNEL_INFO_VERSION_1
	then do;
		P_code = error_table_$unimplemented_version;
		return;
	     end;

	unspec (asrcci) = ""b;
	asrcci.header.version = as_request_version_1;
	asrcci.header.type = ASR_COM_CHANNEL_INFO;
	asrcci.version = ASR_CCI_VERSION_1;
	asrcci.channel_name = as_com_channel_info.channel_name;
	asrcci.reply_message_handle = unique_bits_ ();
	asrcci.reply_version_requested = AS_COM_CHANNEL_INFO_VERSION_1;

	unspec (asum_info) = ""b;
	asum_info.message_ptr = null ();
	on cleanup
	     begin;
		declare to_free		 (asum_info.message_length) bit (36) aligned
					 based (asum_info.message_ptr);
		if asum_info.message_ptr ^= null ()
		then free to_free;
	     end;

	asr_reply = ""b;
	call send_as_request_$block (addr (asrcci), currentsize (asrcci), (""b), asr_reply, P_code);
	if P_code ^= 0
	then return;

	asr_reply_cci_ptr = addr (asr_reply);
	P_code = asr_reply_com_channel_info.code;
	if P_code ^= 0
	then return;

	asum_info.version = AS_USER_MESSAGE_INFO_VERSION_1;
	asum_info.message_handle = asrcci.reply_message_handle;
	asum_info.message_ptr = null ();
	call as_user_message_$user_read_message (get_system_free_area_ (), addr (asum_info), P_code);
	if P_code ^= 0
	then return;
	as_com_channel_info = asum_info.message_ptr -> as_com_channel_info;
	begin;
	     declare to_free	      (asum_info.message_length) bit (36) aligned based (asum_info.message_ptr);
	     free to_free;
	end;
	return;
     end get_com_channel_info_;
