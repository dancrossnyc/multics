/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style4,delnl,insnl,^ifthendo */

/* format: off */

dprint_: proc (dirname, ename, dpap, ec);

/*  The dprint_ subroutine accepts a segment name and an argument structure and formats a message for
   the IO.SysDaemon.  The message is placed in the specified queue of the specified request type.

   THVV 7/72   */


/****^  HISTORY COMMENTS:
  1) change(73-04-01,Coren), approve(), audit(), install():
     (Polished by R. S. Coren 4/73)
     Modified for use with I/O daemon coordinator and device classes, October 1973,
     *  by Robert S. Coren
     Modified by J. Stern, 2/14/75
     Modified by J. C. Whitmore, 4/78, for new dprint_msg structure and enhancements
     Modified: 10 April 1981 by G. Palter to accept request type names > 8 characters in length
     Modified: by G. C. Dixon, 1/82, remove limit on max copies allowed.
     Modified: by R. Kovalcik, 6/82, to add defer_until_process_termination (version 7).
     Modified+ by C. Marker November 1983 to add no_separator
  2) change(86-01-17,Gilcrease), approve(86-01-17,MCR7319),
     audit(86-01-24,RBarstad), install(86-02-03,MR12.0-1012):
               Added the request_id entry point to return the message identifier
               of the request being enqueued SCP 6296.
  3) change(87-02-15,Gilcrease), approve(87-03-26,MCR7645),
     audit(87-03-26,Blair), install(87-04-03,MR12.1-1021):
               Initialize queue-entry count in queue_contents entry.
  4) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Implement line-numbered printouts.
  5) change(88-08-25,Farley), approve(88-09-16,MCR7911),
     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
     Updated to use version 5 dprint_msg and version 10 dprint_arg.
                                                   END HISTORY COMMENTS */

/* format: on */

dcl  dirname char (*),				/* directory where segment resides */
     ename char (*),				/* entry name of segment */
     requestid fixed bin (71),			/* output, message identifier, request_id entry */
     ec fixed bin (35);				/* status code */

dcl  sysdir char (168) aligned int static init (">daemon_dir_dir>io_daemon_dir"),
     sys_msg_seg char (32) aligned,
     mess_id bit (72) aligned based (addr (mess_idx)),
     mess_idx fixed bin (71);

dcl  return_request_id bit (1);
dcl  rqt_name char (24);
dcl  generic_type char (32);
dcl  rqt_generic_type char (32);
dcl  default_q fixed bin;
dcl  max_q fixed bin;

dcl  area_space area (1000) based (areap);
dcl  areap ptr int static init (null);

dcl  queue_pic pic "9";				/* for converting queue number to char */

dcl  error_table_$request_not_recognized ext fixed bin (35);
dcl  error_table_$invalid_lock_reset ext fixed bin (35);
dcl  error_table_$locked_by_this_process ext fixed bin (35);

dcl  clock_ entry returns (fixed bin (71));
dcl  get_system_free_area_ entry (ptr);
dcl  iod_info_$generic_type entry (char (*), char (*), fixed bin (35));
dcl  iod_info_$queue_data entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl  message_segment_$add_file
	entry (char (*) aligned, char (*) aligned, ptr, fixed bin, bit (*) aligned, fixed bin (35));
dcl  message_segment_$get_message_count_file entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));

dcl  (null, addr, bit, substr, string, length, rtrim, currentsize) builtin;

dcl  cleanup condition;

%include queue_msg_hdr;
%include dprint_msg;
%include dprint_arg;

	return_request_id = "0"b;			/* main entry */
	go to dprint_join;

request_id:
     entry (dirname, ename, dpap, requestid, ec);

	return_request_id = "1"b;

dprint_join:
	if areap = null
	then call get_system_free_area_ (areap);	/* get an area for the dprint message */

	allocate dprint_msg in (area_space) set (dmp);
	on cleanup free dmp -> dprint_msg in (area_space);

	dprint_msg.dirname = dirname;			/* make up the default message */
	dprint_msg.ename = ename;
	dprint_msg.hdr_version = queue_msg_hdr_version_1;
	dprint_msg.version = dprint_msg_version_5;
	dprint_msg.msg_time = clock_ ();
	if return_request_id
	then requestid = dprint_msg.msg_time;
	dprint_msg.message_type = 1;
	dprint_msg.copies = 1;
	string (dprint_msg.bit_flags) = "0"b;
	dprint_msg.state = 0;			/* Daemon has not seen this yet */
	dprint_msg.dupt_lock = "0"b;
	string (dprint_msg.control) = "0"b;
	dprint_msg.output_module = 1;
	dprint_msg.lmargin = 0;
	dprint_msg.line_lth = 0;
	dprint_msg.page_lth = 0;
	dprint_msg.forms = "";
	dprint_msg.destination = "";
	dprint_msg.heading_lth = 0;
	dprint_msg.top_label_lth = 0;
	dprint_msg.bottom_label_lth = 0;
	dprint_msg.chan_stop_path_lth = 0;
	dprint_msg.orig_queue = 0;			/* no queue yet, request the default */
	rqt_name = "printer";			/* assume the default request type for now */
	generic_type = "printer";			/* assume the default generic type for the request type */

	if dpap = null
	then go to send;				/* if no args, send the default message */

	if dprint_arg.pt_pch = DP_PRINT
	then do;					/* this is a print request, make sure */
	     if dprint_arg.output_module ^= 1
	     then do;
		ec = error_table_$request_not_recognized;
		go to free;
	     end;
	end;

	else if dprint_arg.pt_pch = DP_PUNCH
	then do;					/* this is a punch request, check format code */
	     rqt_name = "punch";			/* the default request type is punch */
	     generic_type = "punch";			/* the generic type is punch */
	     if dprint_arg.output_module < 2 | dprint_arg.output_module > 4
	     then do;				/* known format? */
		ec = error_table_$request_not_recognized;
		go to free;
	     end;
	end;

	else if dprint_arg.pt_pch = DP_PLOT
	then do;					/* this is a plotter request.  Make sure the 	*/
	     rqt_name = "plotter";			/* default request type and generic type are set	*/
	     generic_type = "plotter";		/* to plotter.  Only one output mode is supported. */
	     if dprint_arg.output_module ^= 5
	     then do;
		ec = error_table_$request_not_recognized;
		go to free;
	     end;
	end;

	else do;					/* this is bad news */
	     ec = error_table_$request_not_recognized;
	     go to free;
	end;
	dprint_msg.orig_queue = dprint_arg.queue;
	dprint_msg.message_type = dprint_arg.pt_pch;
	dprint_msg.heading_lth = length (rtrim (dprint_arg.heading));
						/* make the string the right length */
	dprint_msg.heading = dprint_arg.heading;
	dprint_msg.output_module = dprint_arg.output_module;
	dprint_msg.delete_sw = (dprint_arg.delete = 1);
	dprint_msg.copies = dprint_arg.copies;
	if dprint_arg.version < dprint_arg_version_5
	then					/* use a different variable after version 5 */
	     dprint_msg.destination = dprint_arg.dest;
	else dprint_msg.destination = dprint_arg.destination;

	if dprint_arg.version = dprint_arg_version_1
	then go to send;				/* limit of version 1 data */
	dprint_msg.nep = dprint_arg.nep;
	dprint_msg.single = dprint_arg.single;
	dprint_msg.non_edited = dprint_arg.non_edited;
	dprint_msg.truncate = dprint_arg.truncate;
	dprint_msg.center_top_label = dprint_arg.center_top_label;
	dprint_msg.center_bottom_label = dprint_arg.center_bottom_label;
	if dprint_arg.version < dprint_arg_version_5
	then dprint_msg.forms_name = dprint_arg.forms;	/* forms location changed with version 5 */
	else if dprint_arg.version < dprint_arg_version_10
	then dprint_msg.forms_name = dprint_arg.form_name;/* forms location changed with version 10 */
	else dprint_msg.forms_name = dprint_arg.forms_name;
						/* new forms location */
	dprint_msg.forms_name_lth = length (rtrim (dprint_msg.forms_name));
						/* make the string the right length */
	dprint_msg.lmargin = dprint_arg.lmargin;
	dprint_msg.line_lth = dprint_arg.line_lth;
	dprint_msg.notify = (dprint_arg.notify = 1);

	if dprint_arg.version = dprint_arg_version_2
	then go to send;				/* limit of version 2 data */
	dprint_msg.page_lth = dprint_arg.page_lth;

	if (dprint_arg.version < dprint_arg_version_6)
	then					/* before version 6: use 8 character request type */
	     if dprint_arg.class ^= ""
	     then rqt_name = dprint_arg.class;
	     else ;
	else if (dprint_arg.request_type ^= "")
	then					/* version 6 and beyond: use long request type name */
	     rqt_name = dprint_arg.request_type;

	if dprint_arg.version = dprint_arg_version_3
	then go to send;				/* limit of version 3 data */
	dprint_msg.top_label_lth = length (rtrim (dprint_arg.top_label));
	dprint_msg.bottom_label_lth = length (rtrim (dprint_arg.bottom_label));
	dprint_msg.top_label = dprint_arg.top_label;
	dprint_msg.bottom_label = dprint_arg.bottom_label;

	if dprint_arg.version = dprint_arg_version_4
	then go to send;				/* limit of version 4 data */
	dprint_msg.bit_count = dprint_arg.bit_count;
	dprint_msg.esc = dprint_arg.esc;
	dprint_msg.chan_stop_path_lth = length (rtrim (dprint_arg.chan_stop_path));
	dprint_msg.chan_stop_path = dprint_arg.chan_stop_path;

	if dprint_arg.version < dprint_arg_version_7
	then go to send;				/* limit of version 6 data */
	dprint_msg.defer_until_process_termination = (dprint_arg.defer_until_process_termination = 1);
						/* see if we want "defer_until_process_termination */
	if dprint_msg.defer_until_process_termination
	then do;					/* if we request deferal until process termination,
						   then we must set up a lock */
	     call set_lock_$lock (dprint_msg.dupt_lock, 1, ec);
	     if ec ^= 0
	     then if (ec = error_table_$invalid_lock_reset) | (ec = error_table_$locked_by_this_process)
		then ec = 0;			/* if it's an OK error, zero it */
		else go to free;			/* else, go barf */
	     else ;
	end;
	if dprint_arg.version = dprint_arg_version_7
	then go to send;				/* limit version 7 data */
	dprint_msg.no_separator = dprint_arg.no_separator;

	if dprint_arg.version = dprint_arg_version_8
	then go to send;				/* limit version 8 */
	dprint_msg.line_nbrs = dprint_arg.line_nbrs;

send:
	call iod_info_$generic_type (rqt_name, rqt_generic_type, ec);
	if ec ^= 0
	then go to free;

	if rqt_generic_type ^= generic_type
	then do;					/* be sure we have the right type of request */
	     ec = error_table_$request_not_recognized;
	     go to free;
	end;

	if dprint_msg.copies < 1
	then dprint_msg.copies = 1;			/* check for consistency */

	if dprint_msg.orig_queue < 1
	then do;					/* do we want the default queue? */
	     call iod_info_$queue_data (rqt_name, default_q, max_q, ec);
	     if ec ^= 0
	     then go to free;
	     dprint_msg.orig_queue = default_q;
	     if dpap ^= null
	     then dprint_arg.queue = default_q;		/* tell caller number of default queue */
	end;

	queue_pic = dprint_msg.orig_queue;		/* convert to a character string */
	sys_msg_seg = rtrim (rqt_name) || "_" || queue_pic || ".ms";
						/* make message seg name */

	call message_segment_$add_file (sysdir, sys_msg_seg, dmp, currentsize (dprint_msg) * 36, mess_id, ec);
free:
	free dmp -> dprint_msg in (area_space);
	return;

/**/

qfull:
     entry (qq, count, ec1, a_rqt_name);

dcl  a_rqt_name char (8);
dcl  (qq, count) fixed bin,
     ec1 fixed bin (35);

	call queue_contents (a_rqt_name, qq, count, ec1); /* invoke the new, modern entry */
	return;


/* Returns number of request already present in a particular queue of the specified request type */

queue_contents:
     entry (a_request_type, a_queue, a_count, ec2);

dcl  a_request_type character (*);
dcl  (a_queue, a_count) fixed binary;
dcl  ec2 fixed binary (35);

	if a_request_type = ""
	then rqt_name = "printer";
	else rqt_name = a_request_type;
	a_count = 0;				/* Initialize queue entries count */

	if a_queue < 1
	then do;					/* if the default queue is requested, find it */
	     call iod_info_$queue_data (rqt_name, default_q, max_q, ec2);
	     if ec2 ^= 0
	     then return;
	     a_queue = default_q;
	end;
	else if a_queue > 4
	then do;					/* illegal value? */
	     ec2 = error_table_$request_not_recognized;
	     return;
	end;

	queue_pic = a_queue;			/* convert queue number to char */
	sys_msg_seg = rtrim (rqt_name) || "_" || queue_pic || ".ms";

	call message_segment_$get_message_count_file (sysdir, sys_msg_seg, a_count, ec2);
	return;

/**/

access_check:
     entry (dirname, ename, a_rqt_name, del_acc, read_acc, stat_acc, ret_accname, ec3);

dcl  del_acc bit (1) aligned;
dcl  read_acc bit (1) aligned;
dcl  stat_acc bit (1) aligned;
dcl  ret_accname char (*);
dcl  ec3 fixed binary (35);

	call check_daemon_access (dirname, ename, a_rqt_name, del_acc, read_acc, stat_acc, ret_accname, ec3);
						/* invoke the new, modern entry */
	return;


/* This entry is used to find out if the I/O daemon
   *  process that will perform this request will have sufficient access to do so.
   *  del_acc will be set to "0"b if the segment cannot be deleted. read_acc
   *  will be set to "0"b if the driver for the specified request_type does not have
   * "r" access on the segment. stat_acc will be set to "0"b if the driver does
   *  not have "s" access on the containing directory.
*/

/* Entry added Dec. 28, 1973 by Robert S. Coren */
/* Modified: 10 April 1981 by G. Palter */

check_daemon_access:
     entry (dirname, ename, a_request_type2, del_acc, read_acc, stat_acc, ret_accname, ec3);

dcl  a_request_type2 character (*);
dcl  cu_$level_get entry returns (fixed bin);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$get_user_effmode entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
dcl  iod_info_$driver_access_name entry (char (*), char (32), fixed bin (35));
dcl  hcs_$get_link_target entry (char (*), char (*), char (*), char (*), fixed bin (35));

dcl  dir char (168);
dcl  ent char (168);
dcl  dirdir char (168);
dcl  dirent char (32);
dcl  accname char (32);
dcl  level fixed bin;
dcl  mode fixed bin (5);
dcl  bit5 bit (5);					/* Inserted to avoid compiler error. */

dcl  df_print_name char (32) int static init ("");	/* driver access name for default print request type */
dcl  df_punch_name char (32) int static init ("");	/* driver access name for default punch request type */

	stat_acc, read_acc, del_acc = "0"b;
	ec3 = 0;
	rqt_name = a_request_type2;

	if rqt_name = "printer"
	then do;
	     if df_print_name = ""
	     then do;
		call iod_info_$driver_access_name ("printer", df_print_name, ec3);
		if ec3 ^= 0
		then return;
	     end;
	     accname = df_print_name;
	end;

	else if rqt_name = "punch"
	then do;
	     if df_punch_name = ""
	     then do;
		call iod_info_$driver_access_name ("punch", df_punch_name, ec3);
		if ec3 ^= 0
		then return;
	     end;
	     accname = df_punch_name;
	end;

	else do;
	     call iod_info_$driver_access_name (rqt_name, accname, ec3);
	     if ec3 ^= 0
	     then return;
	end;

	ret_accname = accname;			/* group id of driver process reading segment */

	level = cu_$level_get ();

/* Determine true pathname of target segment */

	call hcs_$get_link_target (dirname, ename, dir, ent, ec3);
	if ec3 ^= 0
	then return;

	call hcs_$get_user_effmode (dir, ent, accname, level, mode, ec3);
						/* get driver's access to seg */
	if ec3 ^= 0
	then return;

/* read access is second bit */

	read_acc = substr (bit (mode, 5), 2, 1);

/* separate off directory name to check for modify (also status) */

	call expand_pathname_ (dir, dirdir, dirent, ec3);
	if ec3 ^= 0
	then return;

	call hcs_$get_user_effmode (dirdir, dirent, accname, level, mode, ec3);
						/* get driver's access to directory */
	if ec3 ^= 0
	then return;

	stat_acc = substr (bit (mode, 5), 2, 1);

	call hcs_$get_user_effmode (dirdir, dirent, "IO.SysDaemon.*",
						/* see if IO Coord can delete the seg */
	     level, mode, ec3);
	if ec3 ^= 0
	then return;

	bit5 = bit (mode, 5);
	del_acc = substr (bit5, 2, 1) & substr (bit5, 4, 1);
	return;

/**/

/* Set the system directory used to find the queues to permit testing of new version of I/O daemon tables and software */

test:
     entry (test_dir);

dcl  test_dir char (*);
dcl  iod_info_$test entry (char (*));

	sysdir = test_dir;
	df_print_name, df_punch_name = "";
	call iod_info_$test (test_dir);
	return;

     end dprint_;
