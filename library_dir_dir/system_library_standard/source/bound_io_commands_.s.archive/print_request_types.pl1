/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

print_request_types:
prt: proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This command prints a list of request types handled by the IO daemon as determined by	*/
/* inspecting the "iod_working_tables" segment.  For each request type, the associated	*/
/* driver access name and the generic type are printed.				*/
/*									*/
/* Status									*/
/*									*/
/* 0) Written by J. Stern, 2/18/75						*/
/* 1) Modified by J. C. Whitmore, 6/78, for version 2 iod_tables and general upgrade	*/
/* 2) Modified by J. C. Whitmore, 10/78, to use version 3 iod_tables			*/
/* 3) Modified by G. C. Dixon, 12/81						*/
/*      - make prt work as active function					*/
/*      - interface with eor (ie, display user-defined request type names which eor	*/
/*	allows								*/
/*      - support -print, -punch, -plot to more easily select request types associated	*/
/*	with a given generic type						*/
/*      - sort output by generic type, then by name of target request type, finally by	*/
/*	name of user-defined request type					*/
/*      - change output format to shorten line length and eliminate redundant		*/
/*	information							*/
/*      - allow starname request type names to be given to select by request type name.	*/
/* 4) Modified:  May 3, 1982 by G. C. Dixon - add -user_defined control arg.		*/
/* 5) Modified: July 1984 by C. Marker so that when print_request_types is used as an     */
/*      active_function and given a starname, only names matching that starname will be   */
/*      returned.                                                                         */
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/****^  HISTORY COMMENTS:
  1) change(88-09-23,Brunelle), approve(88-09-23,MCR7911),
     audit(88-10-17,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to handle Version 5 I/O daemon tables.  Added comment in
     request_type entries to the output display.
                                                   END HISTORY COMMENTS */


	dcl     accname		 char (32),	/* access name */
	        acc_pers		 char (22),
	        acc_proj		 char (9),
	        an_found		 bit (1),		/* ON if desired access name found */
	        af_sw		 bit (1),		/* ON if invoked as an active function. */
	        argp		 ptr,		/* ptr to arg */
	        arglen		 fixed bin (21),	/* length of arg */
	        arg		 char (arglen) based (argp),
						/* command argument */
	        bfsw		 bit (1),		/* ON for brief option */
	        code		 fixed bin (35),	/* error code */
	        comment_string		 char (300) varying,/* pgms using rqt as default, etc.		*/
	        comment_len		 fixed bin,
	        count		 fixed bin,
	        gen_type		 char (32),	/* generic type name */
	        gt_found		 bit (1),		/* ON if desired generic type found */
	        (i, j)		 fixed bin,
	        match		 bit (1),		/* ON if access name and/or generic type matched */
	        (max_acc, max_rqt)	 fixed bin,
	        nargs		 fixed bin,
	        nrqt_starnames	 fixed bin,
	        prev_gen_type	 char (32),
	        qgt_size		 fixed bin,
	        ret		 char (ret_len) varying based (retp),
	        ret_len		 fixed bin (21),
	        retp		 ptr,
	        rqt_starnames	 (20) char (32),
	        rqt_startypes	 (20) fixed bin,
	        select		 bit (1),		/* ON if selecting a subset of request types */
	        sysdir		 char (168),	/* directory containing iod_working_tables */
	        user_defined	 bit (1);		/* ON if -user_defined given.			*/

	dcl     (addr, after, before, copy, dim, hbound, index, lbound, length,
	        max, null, ptr, rtrim, substr)
				 builtin,
	        cleanup		 condition;

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35)),
	        active_fnc_err_	 entry () options (variable),
	        arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)) variable,
	        com_err_		 entry () options (variable),
	        check_star_name_$entry entry (char (*), fixed bin (35)),
	        cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	        cu_$af_arg_ptr	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	        cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	        enter_output_request$default_count
				 entry (fixed bin),
	        enter_output_request$list_defaults
				 entry (ptr, ptr, fixed bin (35)),
	        err		 entry options (variable) variable,
	        get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin),
	        hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35)),
	        hcs_$terminate_noname	 entry (ptr, fixed bin (35)),
	        ioa_		 entry () options (variable),
	        ll		 fixed bin,
	        match_star_name_	 entry (char (*), char (*), fixed bin (35)),
	        sort_items_$char	 entry (ptr, fixed bin (24));

	dcl     (FALSE		 init ("0"b),
	        TRUE		 init ("1"b)) bit (1) int static options (constant),
	        NL		 char (1) int static options (constant) init ("
"),
	        SP		 char (1) int static options (constant) init (" "),
	        (error_table_$badopt,
	        error_table_$too_many_names) fixed bin (35) ext static,
	        whoami		 char (19) int static options (constant) init ("print_request_types");

%include eor_defaults;

%include iod_tables_hdr;


%include q_group_tab;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/*  initialize control argument defaults					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	bfsw, user_defined = FALSE;
	an_found, gt_found = TRUE;
	acc_pers, acc_proj, gen_type = "";
	ll = 0;
	nrqt_starnames = 0;
	sysdir = ">daemon_dir_dir>io_daemon_dir";


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* See how we were invoked (command/af), and process arguments.			*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	call cu_$af_return_arg (nargs, retp, ret_len, code);
	if code = 0 then do;
		af_sw = TRUE;
		arg_ptr = cu_$af_arg_ptr;
		err = active_fnc_err_;
		ret = "";
	     end;
	else do;
		af_sw = FALSE;
		arg_ptr = cu_$arg_ptr;
		err = com_err_;
	     end;

	do i = 1 to nargs;
	     call arg_ptr (i, argp, arglen, code);
	     if arg = "-bf" | arg = "-brief"
	     then bfsw = TRUE;
	     else if arg = "-an" | arg = "-access_name" then do;
		     i = i + 1;
		     call arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then do;
noarg:			     call err (code, whoami, "
^a requires an operand.", arg);
			     return;
			end;
		     accname = arg;
		     acc_pers = before (arg, ".");
		     if acc_pers = "*" then
			acc_pers = "";
		     acc_proj = before (after (arg, "."), ".");
		     if acc_proj = "*" then
			acc_proj = "";
		     an_found = (acc_pers = "") & (acc_proj = "");
		end;				/* an_found is OFF until we find a match	*/

	     else if arg = "-gt" | arg = "-gen_type" | /* -gen_type is hold-over from earlier version	*/
		arg = "-generic_type" then do;
		     i = i + 1;
		     call arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then go to noarg;
		     gen_type = arg;
		     gt_found = FALSE;		/* gt_found is OFF until we find a match.	*/
		end;
	     else if arg = "-pr" | arg = "-print" then do;
		     gen_type = "printer";
		     gt_found = FALSE;
		end;
	     else if arg = "-pch" | arg = "-punch" then do;
		     gen_type = "punch";
		     gt_found = FALSE;
		end;
	     else if arg = "-plot" then do;
		     gen_type = "plotter";
		     gt_found = FALSE;
		end;
	     else if arg = "-udf" | arg = "-user_defined" then do;
		     user_defined = TRUE;
		end;
	     else if arg = "-dr" | arg = "-dir" | arg = "-directory" then do;
		     i = i + 1;			/* -dir is hold-over from earlier version of code.*/
		     call arg_ptr (i, argp, arglen, code);
		     if code ^= 0 then go to noarg;
		     call absolute_pathname_ (arg, sysdir, code); /* take apart and put it back together */
		     if code ^= 0 then do;
			     call err (code, whoami, arg);
			     return;
			end;
		end;
	     else if index (arg, "-") ^= 1 then do;
		     nrqt_starnames = nrqt_starnames + 1;
		     if nrqt_starnames > dim (rqt_starnames, 1) then do;
			     call err (error_table_$too_many_names, whoami, "^a
Only ^d request type starnames may be given.", arg, dim (rqt_starnames, 1));
			     return;
			end;
		     rqt_starnames (nrqt_starnames) = arg;
		     call check_star_name_$entry (arg, code);
		     if 0 <= code & code <= 2 then
			rqt_startypes (nrqt_starnames) = code;
		     else do;
			     call err (code, whoami, arg);
			     return;
			end;
		end;
	     else do;
		     call err (error_table_$badopt, whoami, arg);
		     return;
		end;
	end;

	select = ^(an_found & gt_found) | nrqt_starnames > 0;
						/* selection occurs if any starnames were given	*/
						/* or if -an, -gt, -pr, -pch or -plot were given. */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* get a pointer to the queue group table					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	ithp = null;
	on cleanup begin;
		call hcs_$terminate_noname (ithp, code);
	     end;
	call hcs_$initiate (sysdir, "iod_working_tables", "", 0, 1, ithp, code);
	if ithp = null then do;
		call err (code, whoami, "^a>iod_working_tables", sysdir);
		return;
	     end;

	if iod_tables_hdr.version ^= IODT_VERSION_5 then do;
		call err (0, whoami, "Wrong version number for iod_working_tables.");
		go to EXIT;
	     end;
	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Set sizes required for adjustable storage allocated in begin block below.		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	qgt_size = q_group_tab.n_q_groups;		/* Number of system-defined request types.	*/
	call enter_output_request$default_count (Nrequest_types);
						/* Number of user-defined request types (eor 	*/
						/*   supports user-defined request types).	*/

BLOCK:	begin;

	     dcl	   1 eor_rqts	      aligned,
		     2 header	      like eor_defaults.header,
		     2 rqt	      (Nrequest_types) like eor_defaults.request_type,
		   name		      char (32),
		   1 q		      (qgt_size + Nrequest_types) aligned,
		     2 generic_type	      char (24),
		     2 target_request_type char (24),
		     2 name	      char (24),
		     2 access_name	      char (32),
                         2 comment unaligned like text_offset,
		     2 S,
		     ( 3 ignored_by_eor,
		       3 dprint_default,
		       3 dpunch_default,
		       3 dplot_default,
		       3 eor_print_default,
		       3 eor_punch_default,
		       3 eor_plot_default,
		       3 imft_default)    bit (1) unal,
		       3 mbz	      bit (28) unal,
		   1 qb		      aligned like q based (Pqb),
		   Pqb		      ptr,
		   1 v		      aligned,	/* Array for sorting entries.			*/
		     2 n		      fixed bin (24),
		     2 p		      (qgt_size + Nrequest_types)
				      ptr unal;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* get a list of user-defined request types from eor.				*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     eor_rqts.version = Veor_defaults_1;
	     eor_rqts.N = Nrequest_types;
	     call enter_output_request$list_defaults (null, addr (eor_rqts), code);
	     if code ^= 0 then do;
		     call err (code, whoami, "
Getting user-defined request types known to enter_output_request.");
		     go to EXIT;
		end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Add user-defined request types at beginning of the q structure.  This structure is	*/
/* used to merge info for user-defined request types and system-defined request types	*/
/* (from q_group_tab) into a common format.  The remainder of prt deals only with this	*/
/* common format structure (the q structure).					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     count = 0;
	     do i = 1 to Nrequest_types;
		count = count + 1;
		Pqb = addr (q (count));
		qb.generic_type = eor_rqts.rqt (i).generic_type;
		qb.target_request_type = eor_rqts.rqt (i).target_request_type_name;
		qb.name = eor_rqts.rqt (i).name;

		do j = lbound (q_group_tab.entries, 1) to /* copy access name from target request type	*/
		     hbound (q_group_tab.entries, 1) /*   into user-defined request type entry.	*/
		     while (q_group_tab.entries (j).name ^= qb.target_request_type);
		end;
		if j <= hbound (q_group_tab.entries, 1) then do;
		     qb.access_name = q_group_tab.entries (j).driver_id;
		     qb.comment = q_group_tab.entries (j).comment;
		end;
		else do;
		     qb.access_name = "";
		     qb.comment.first_char, qb.comment.total_chars = 0;
		end;

		qb.S = FALSE;
		if qb.generic_type = "printer" then
		     qb.S.eor_print_default = eor_rqts.rqt (i).Sdefault;
		else if qb.generic_type = "punch" then
		     qb.S.eor_punch_default = eor_rqts.rqt (i).Sdefault;
		else if qb.generic_type = "plotter" then
		     qb.S.eor_plot_default = eor_rqts.rqt (i).Sdefault;
	     end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Copy information from q_group_tab into q structure.				*/
/*									*/
/* CASE 1:  ^user_defined							*/
/* Eliminate any system-defined request type whose name duplicates a user-defined	*/
/* request type (when user-defined request type references the system-defined type as	*/
/* its target request type).  Flag any system-defined request type whose name is	*/
/* superceded by a user-defined request type (when user-defined request type references	*/
/* another request type as its target).						*/
/*									*/
/* CASE 2: user_defined, ^af_sw						*/
/* Include only those system-defined request types that are referenced as the target	*/
/* request type for a user-defined request type.  Eliminate duplicates as in case 1.  Do	*/
/* not flag superceded system-defined request types.				*/
/*									*/
/* CASE 3: user_defined, af_sw						*/
/* Do nothing with system-defined request types.					*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     if user_defined & af_sw then ;		/* CASE 3					*/
	     else do i = lbound (q_group_tab.entries, 1) to
		     hbound (q_group_tab.entries, 1);
		     qgtep = addr (q_group_tab.entries (i));
		     count = count + 1;
		     Pqb = addr (q (count));
		     qb.generic_type = substr (qgte.generic_type, 1, length (qb.generic_type));
		     qb.target_request_type = qgte.name;
		     qb.name = "";			/* system request names have no user-defined name */
		     qb.access_name = qgte.driver_id;

		     qb.comment = qgte.comment;

		     qb.S = FALSE;
		     if qgte.default_generic_queue = 1 then
			if qgte.generic_type = "printer" then
			     qb.S.dprint_default = TRUE;
			else if qgte.generic_type = "punch" then
			     qb.S.dpunch_default = TRUE;
			else if qgte.generic_type = "plotter" then
			     qb.S.dplot_default = TRUE;
			else if qgte.generic_type = "imft" then
			     qb.S.imft_default = TRUE;

		     if ^user_defined then do;	/* CASE 1					*/
			     do j = 1 to Nrequest_types /* search user-defined request types for one 	*/
				while (qgte.name ^= q (j).name); /*   having the same name.			*/
			     end;
			     if j <= Nrequest_types then
				if q (j).name = q (j).target_request_type then do;
						/* user-define type duplicates system type	*/
					q (j).S.dprint_default = qb.S.dprint_default;
					q (j).S.dpunch_default = qb.S.dpunch_default;
					q (j).S.dplot_default = qb.S.dplot_default;
					q (j).S.imft_default = qb.S.imft_default;
					q (j).name = ""; /* copy attributes from system type entry, make	*/
					count = count - 1; /*   user entry look like system type entry	*/
				     end;		/*   and delete the system type entry.		*/
				else
				     qb.S.ignored_by_eor = TRUE; /* flag system type entry as being ignored by 	*/
			end;			/*   cor/eor/lor/mor because of user-defined	*/
						/*   request type of same name.		*/

		     else do;			/* CASE 2					*/
			     do j = 1 to Nrequest_types
				while (qgte.name ^= q (j).target_request_type);
			     end;
			     if j > Nrequest_types then /*   system rqt not referenced by any user rqt	*/
				count = count - 1;
			     else if q (j).name = qgte.name then do; /*   user rqt has same name as its corresponding	*/
						/*   system rqt.				*/
				     q (j).S.dprint_default = qb.S.dprint_default;
				     q (j).S.dpunch_default = qb.S.dpunch_default;
				     q (j).S.dplot_default = qb.S.dplot_default;
				     q (j).S.imft_default = qb.S.imft_default;
				     q (j).name = ""; /* copy attributes from system type entry, make	*/
				     count = count - 1; /*   user entry look like system type entry	*/
				end;
			end;
		end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Select entries to be printed.  Columns widths of the display are computed as entries	*/
/* are selected.  Selection is made by access name of the IO Daemon process, by generic	*/
/* type of the request type (printer, punch or plotter), or by comparision with request	*/
/* type star names.								*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     v.n = 0;
	     if bfsw then do;			/* Prepare to compute column widths for printed	*/
		     max_rqt = 0;			/*    entries				*/
		     max_acc = 0;
		end;
	     else do;				/* If heading given, min column width is limited	*/
		     max_rqt = length ("Request type"); /*   by size of column headers.		*/
		     max_acc = length ("Access name");
		end;

	     do i = 1 to Nrequest_types, i to count while (^user_defined);
		Pqb = addr (q (i));
		match = TRUE;
		if select then do;
			if acc_pers ^= "" then
			     if acc_pers = before (qb.access_name, ".") then
				an_found = an_found | (acc_proj = "");
			     else
				match = FALSE;
			if acc_proj ^= "" then
			     if acc_proj = before (after (qb.access_name, "."), ".") then
				an_found = an_found | match;
			     else
				match = FALSE;
			if gen_type ^= "" then
			     if gen_type = qb.generic_type then gt_found = TRUE;
			     else match = FALSE;
			if match & nrqt_starnames > 0 then do;
				match = FALSE;
				if qb.name = "" then
				     name = qb.target_request_type;
				else
				     name = qb.name;
				do j = 1 to nrqt_starnames while (^match);
				     go to MATCH (rqt_startypes (j));

MATCH (0):			     match = (name = rqt_starnames (j));
				     go to END_MATCH;

MATCH (1):			     call match_star_name_ ((name), rqt_starnames (j), code);
				     match = (code = 0);
				     go to END_MATCH;

MATCH (2):			     match = TRUE;
END_MATCH:			end;
			     end;
		     end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This loop places matching entries into the array of entries to be sorted/displayed.	*/
/* A loop is used because, for user-defined request types, we want to display the	*/
/* system-defined target request type, no matter whether it would be normally selected	*/
/* or not.  Execution usually goes through the loop once, or at most twice.		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

		do while (match);
		     do j = 1 to v.n while (Pqb ^= v.p (j)); /* Don't put entry in array if it is already there*/
		     end;
		     if j > v.n then do;
			     v.n = v.n + 1;		/* Add entry to the display array.		*/
			     v.p (v.n) = Pqb;
			     if qb.name = "" then /* Compute max length of request type and access	*/
				max_rqt = max (max_rqt, length (rtrim (qb.target_request_type)));
			     else /*   name display fields.			*/
				max_rqt = max (max_rqt, length (rtrim (qb.name)) + 2,
				     length (rtrim (qb.target_request_type)));
			     max_acc = max (max_acc, length (rtrim (before (qb.access_name, ".*"))));
			     if qb.name ^= "" & ^af_sw then do; /* For user-defined type, insure that 		*/
				     do j = 1 to count /*   system-defined target request type is also	*/
					while (q (j).target_request_type ^= qb.target_request_type |
					q (j).name ^= ""); /*   selected unless it is an active function.	*/
				     end;
				     if j <= count then
					Pqb = addr (q (j)); /*   add target to list.			*/
				     else
					match = FALSE; /*   no target found.			*/
				end;
			     else
				match = FALSE;	/* system-defined request type.		*/
			end;
		     else
			match = FALSE;		/* entry is already in the array.		*/
		end;
	     end;
	     max_rqt = max_rqt + 3;			/* allow 3 chars between columns.		*/
	     max_acc = max_acc + 3;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Sort the list to be displayed (or returned as AF value).				*/
/*									*/
/* If command invocation, then sort first by generic type, then by target request type,	*/
/* finally by user-defined request type.					*/
/*									*/
/* If af invocation, sort by name returned as active function value.			*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     if af_sw then do;			/*   Kludge af sorting by putting name returned	*/
		     do i = 1 to v.n;		/*   in af string into the gen_type field.	*/
			Pqb = v.p (i);
			if qb.name = "" then
			     qb.generic_type = qb.target_request_type;
			else
			     qb.generic_type = qb.name;
		     end;
		     if v.n > 1 then do;		/* sort if more than 1.			*/
			     call sort_items_$char (addr (v), length (qb.generic_type));
			end;
		end;
	     else do;
		     if v.n > 1 then do;		/* sort if more than 1.			*/
			     call sort_items_$char (addr (v), length (qb.generic_type) +
				length (qb.target_request_type) + length (qb.name));
			end;
		end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Now display the selected entries, or add them to the AF return string.  When		*/
/* displaying, a separate heading is put out for each generic type, identifying the	*/
/* generic type and the various output columns.  Columns include: (name of) Request	*/
/* type; Access name; and Comments.  The comments indicate which request types are	*/
/* default for dprint, for dpunch, for dplot and for eor -print, -punch and -plot.  Note	*/
/* that dprint and eor -print may well have different defaults, because eor allows the	*/
/* user to change the name of his default request type.  The comment also indicates any	*/
/* system-defined request types which are not accessible from cor/eor/lor/mor (because	*/
/* they have been overridden by a user-defined request type of the same name).		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     prev_gen_type = "";
	     do i = 1 to v.n;
		Pqb = v.p (i);
		if qb.generic_type ^= prev_gen_type then
		     if ^af_sw then do;
			     call ioa_ ("^/^[^;^/^-^]GENERIC TYPE:  ^a^[^5s^;^/^va^va^a^/^]",
				bfsw, qb.generic_type, bfsw, max_rqt, "Request type",
				max_acc, "Access name", "Comments");
			     prev_gen_type = qb.generic_type;
			end;
		if af_sw then do;
			ret = ret || rtrim (qb.generic_type);
			ret = ret || SP;
		     end;
		else do;
			comment_string = "";
			comment_len = max_rqt + max_acc;
			if qb.comment.total_chars ^= 0 then
			     call add_to_comment (substr (text_strings.chars,
			     qb.comment.first_char, qb.comment.total_chars) || ";");
			if qb.S.dprint_default then
			     call add_to_comment ("default for dprint");
			else if qb.S.dpunch_default then
			     call add_to_comment ("default for dpunch");
			else if qb.S.dplot_default then
			     call add_to_comment ("default for dplot");
			else if qb.S.imft_default then
			     call add_to_comment ("default for eir");
			if qb.S.eor_print_default then
			     if comment_string = "" then
				call add_to_comment ("default for eor -print");
			     else do;
				     call add_to_comment ("&");
				     call add_to_comment ("eor -print");
				end;
			else if qb.S.eor_punch_default then
			     if comment_string = "" then
				call add_to_comment ("default for eor -punch");
			     else do;
				     call add_to_comment ("&");
				     call add_to_comment ("eor -punch");
				end;

			else if qb.S.eor_plot_default then
			     if comment_string = "" then
				call add_to_comment ("default for eor -plot");
			     else do;
				     call add_to_comment ("&");
				     call add_to_comment ("eor -plot");
				end;
			if qb.S.ignored_by_eor then do;
				if comment_string ^= "" then do;
					comment_string = comment_string || ";";
					comment_len = comment_len + 1;
				     end;
				call add_to_comment ("ignored by eor -");
				do j = 1 to Nrequest_types
				     while (qb.target_request_type ^= q (j).name);
				end;
				call add_to_comment (rtrim (q (j).name));
				call add_to_comment ("is a");
				call add_to_comment ("user-defined");
				call add_to_comment ("name");
				call add_to_comment ("on the");
				call add_to_comment (rtrim (q (j).target_request_type));
				call add_to_comment ("request type");
			     end;
			call ioa_ ("^[^va^va^a^;^5s^2x^va^[^vx^a^;^2s^]",
			     qb.name = "",
			     max_rqt, qb.target_request_type,
			     max_acc, before (qb.access_name, ".*"), comment_string,
			     max_rqt - 2, qb.name,
			     comment_string ^= "", max_acc, comment_string);
		     end;
	     end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Emit errors diagnosing selection failures.  Handle completion of display or AF return	*/
/* string (remove trailing SP from AF return string).  Terminate the iod_working_tables.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     if ^an_found then call err (0, whoami, "Access name not found: ^a", accname);
	     if ^gt_found then call err (0, whoami, "Generic type not found: ^a", gen_type);
	     if an_found & gt_found & v.n = 0 & ^af_sw then
		call err (0, whoami, "No request types meet selection criteria:^[
  -access_name ^a^;^s^]^[
  -generic_type ^a^;^s^]^[
  -user_defined^]^[
  request_type name matching:^v(
    ^a^)", acc_pers ^= "" | acc_proj ^= "", accname,
		     gen_type ^= "", gen_type,
		     user_defined,
		     nrqt_starnames > 0, nrqt_starnames, rqt_starnames);
	     if v.n > 0 then do;
		     if af_sw then /* remove trailing SP from return string.	*/
			ret = substr (ret, 1, length (ret) - 1);
		     else
			call ioa_ ("");		/* throw in an extra blank line */
		end;
	end BLOCK;

EXIT:	call hcs_$terminate_noname (ithp, code);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


add_to_comment:
     proc (str);

	dcl     str		 char (*);

	if ll = 0 then do;				/* Tailor length of comments to terminal line len */
		ll = get_line_length_$switch (null, code); /*   Comments too long are folded onto several	*/
		if code ^= 0 then ll = 136;		/*   lines.				*/
	     end;
	if comment_string = "" then ;
	else if comment_len + length (SP) + length (str) > ll then do;
		comment_string = comment_string || NL;
		comment_string = comment_string || copy (SP, max_rqt + max_acc + 2);
		comment_len = max_rqt + max_acc + 2;
	     end;
	else if comment_string ^= "" then do;
		comment_string = comment_string || SP;
		comment_len = comment_len + length (SP);
	     end;
	comment_string = comment_string || str;
	comment_len = comment_len + length (str);
     end add_to_comment;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

     end print_request_types;
