/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-02-25,Brunelle), approve(88-06-09,MCR7911),
     audit(88-10-25,Wallman), install(88-11-08,MR12.2-1199):
     Created.
  2) change(88-11-03,Brunelle), approve(88-11-03,MCR7911),
     audit(88-11-03,Wallman), install(88-11-08,MR12.2-1199):
     Corrected case where mode_string_$parse broke a mode of elite6 into two
     parts, "elite" and "6".  Put the pieces back together.
  3) change(88-11-11,Brunelle), approve(88-11-11,MCR7911),
     audit(88-11-11,Wallman), install(88-11-14,MR12.2-1212):
     Corrected error messages for both a bad forms string and an invalid forms
     option.
                                                   END HISTORY COMMENTS */

/* format: style4 */

iod_forms_: proc;
	return;					/*  no entry here */

/* this module contains the common routines to evaluate a given forms option
   and to return forms information for a given request type */

/* Arguments */

dcl  a_area_ptr ptr parameter;			/* ptr to user area */
dcl  a_code fixed bin (35) parameter;			/* error code */
dcl  a_input_ptr ptr parameter;			/* ptr to input data structure */
dcl  a_output_ptr ptr parameter;			/* ptr to allocated return data structure */

/* External Procedures and Variables */

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$bad_forms_option fixed bin (35) ext static;
dcl  error_table_$bad_mode_syntax fixed bin (35) ext static;
dcl  error_table_$no_table fixed bin (35) ext static;
dcl  error_table_$no_forms_table_defined fixed bin (35) ext static;
dcl  error_table_$notalloc fixed bin (35) ext static;
dcl  error_table_$null_info_ptr fixed bin (35) ext static;
dcl  ioa_$rsnpnnl entry () options (variable);
dcl  mode_string_$parse entry (char (*), ptr, ptr, fixed bin (35));

dcl  (addr, char, hbound, length, ltrim, null, ptr, rtrim, substr, unspec) builtin;

dcl  (area, cleanup) condition;

/* Internal Static */

/* Automatic */

dcl  code fixed bin (35);				/* error code */
dcl  element_index fixed bin;
dcl  i fixed bin;					/* misc indices */
dcl  return_error_string char (1024) varying;
dcl  return_escape_string char (1024) varying;
dcl  return_forms_string char (512) varying;
dcl  return_special_string char (1024) varying;
dcl  user_area area based (user_area_ptr);
dcl  user_area_ptr ptr;

/* the following structure defines the following data elements
   1) The start index for the first forms element in the forms table defined
   .  by either the device or request type entries in the I/O daemon tables
   2) indices within the forms elements in the forms table for each of the
   .  types of forms elements currently allowed.  These indices are for both
   .  the default forms string and the user supplied forms string. */

dcl  1 parse_info,
       2 forms_table_start_index fixed bin,
       2 default_type_indices (hbound (FORMS_TYPE_STRINGS, 1)) fixed bin,
       2 user_type_indices (hbound (FORMS_TYPE_STRINGS, 1)) fixed bin;

dcl  1 size_info,
       2 page_height float bin,
       2 page_width float bin,
       2 char_height float bin,
       2 char_width float bin,
       2 line_height float bin,
       2 pagelength fixed bin,
       2 linelength fixed bin,
       2 lpi fixed bin;
%page;

/* given pointers to a request type and major/minor device entries in the i/o
   daemon tables and a user supplied forms string, evaluate the the elements
   in the string are legal and return the max line & page length to the user
*/

evaluate: entry (a_input_ptr, a_output_ptr, a_code);

/* copy args */
	evaluate_forms_info_input_ptr = a_input_ptr;
	a_output_ptr = null;
	a_code = 0;

/* get ptrs to appropriate places in the i/o daemon tables */
	ithp = evaluate_forms_info_input.ithp;
	qgtep = evaluate_forms_info_input.qgtep;
	idtep = evaluate_forms_info_input.idtep;
	mdtep = evaluate_forms_info_input.mdtep;
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);
	ifitp = ptr (ithp, iod_tables_hdr.forms_info_tab_offset);

/* initialize internal version of output variables */
	size_info.page_height,
	     size_info.page_width,
	     size_info.char_height,
	     size_info.char_width,
	     size_info.line_height = 0e0;
	size_info.pagelength,
	     size_info.linelength,
	     size_info.lpi = 0;
	return_error_string,
	     return_escape_string,
	     return_forms_string,
	     return_special_string = "";

	unspec (parse_info) = "0"b;

/* locate the forms table to use to evaluate the default and user forms string */
	call locate_forms_table;
	if code ^= 0 then go to evaluate_forms_option_return;

/* evaluate the default forms string.  the default forms string for the
   device/minor device takes precedence but if there is none and the request
   type has one then use it. */
	parse_info.default_type_indices (*) = 0;
	if idtep ^= null then do;
	     if mdtep ^= null then do;
		if mdte.default_form.total_chars > 0 then do;
		     call process_forms_string (return_string (mdte.default_form),
			parse_info.default_type_indices, code);
		end;
	     end;
	end;
	else if qgtep ^= null then do;
	     if qgte.default_form.total_chars > 0 then do;
		call process_forms_string (return_string (qgte.default_form),
		     parse_info.default_type_indices, code);
	     end;
	end;
	else code = error_table_$no_table;
	if code ^= 0 then go to evaluate_forms_option_return;

/* evaluate the user forms string */
	parse_info.user_type_indices (*) = 0;
	call process_forms_string ((evaluate_forms_info_input.forms_string),
	     parse_info.user_type_indices, code);
	if code ^= 0 then go to evaluate_forms_option_return;

/* now let's do something with the values we've found.  Evaluate elements to
   get the dimensions and set up the return strings */
	call evaluate_the_form_type (TYPE_SPECIAL);
	call evaluate_the_form_type (TYPE_PREAMBLE);
	call evaluate_the_form_type (TYPE_FONT_DESC);
	call evaluate_the_form_type (TYPE_FONT_NAME);
	call evaluate_the_form_type (TYPE_FONT_SIZE);
	call evaluate_the_form_type (TYPE_ORIENTATION);
	call evaluate_the_form_type (TYPE_LINE_DESC);
	call evaluate_the_form_type (TYPE_HOLES);
	call evaluate_the_form_type (TYPE_POSTAMBLE);

/* now compute lines per page and chars per line */
	if size_info.line_height = 0 then do;
	     if size_info.char_height > 0 then do;
		size_info.pagelength = size_info.page_height / size_info.char_height;
		size_info.lpi = 72 / size_info.char_height;
	     end;
	end;
	else do;
	     size_info.pagelength = size_info.page_height / size_info.line_height;
	     size_info.lpi = 72 / size_info.line_height;
	end;
	if size_info.char_width > 0 then
	     size_info.linelength = size_info.page_width / size_info.char_width;

evaluate_forms_option_return:
	user_area_ptr = evaluate_forms_info_input.area_ptr; /* area to put output in */

/* set up lengths of all strings we will be returning */
	system_returned_forms_length = length (return_forms_string);
	system_error_string_length = length (return_error_string);
	system_escape_string_length = length (return_escape_string);
	system_special_string_length = length (return_special_string);
	allocate evaluate_forms_info_output in (user_area);

	evaluate_forms_info_output.version = EVALUATE_FORMS_INFO_OUTPUT_VERSION_1;
	evaluate_forms_info_output.lines_per_page = size_info.pagelength;
	evaluate_forms_info_output.chars_per_line = size_info.linelength;
	evaluate_forms_info_output.lines_per_inch = size_info.lpi;
	evaluate_forms_info_output.error_string = return_error_string;
	evaluate_forms_info_output.escape_string = return_escape_string;
	evaluate_forms_info_output.special_string = return_special_string;

	a_output_ptr = evaluate_forms_info_output_ptr;
	a_code = code;
	return;
%page;

/* given a request type name, return all forms entries allowed for the given
   request type in a user supplied area */

info: entry (a_input_ptr, a_area_ptr, a_code);

/* copy args */
	evaluate_forms_info_input_ptr = a_input_ptr;
	a_area_ptr = null;
	a_code = 0;

/* get ptrs to appropriate places in the i/o daemon tables */
	ithp = evaluate_forms_info_input.ithp;
	qgtep = evaluate_forms_info_input.qgtep;
	idtep = evaluate_forms_info_input.idtep;
	mdtep = evaluate_forms_info_input.mdtep;
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);
	ifitp = ptr (ithp, iod_tables_hdr.forms_info_tab_offset);

	user_area_ptr = evaluate_forms_info_input.area_ptr;

	if user_area_ptr = null then do;		/* no place to put the data */
	     a_code = error_table_$null_info_ptr;
	     return;
	end;

/* locate the forms table */
	call locate_forms_table;
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;

/* loop through all the entries in the table so we can get counts to define
   size of the allocation structure */
	forms_info_entry_count,
	     forms_info_name_count,
	     forms_info_comment_count,
	     forms_info_types_count,
	     forms_info_uses_count,
	     forms_info_specials_count = 0;

	element_index = parse_info.forms_table_start_index;
	do while (element_index > 0);
	     fep = addr (iod_forms_info_tab.element_data_block (element_index));

	     forms_info_entry_count = forms_info_entry_count + 1;
	     forms_info_name_count = forms_info_name_count + element_common.n_names;
	     if element_common.comment.total_chars ^= 0 then
		forms_info_comment_count = forms_info_comment_count + 1;
	     if element_common.type = TYPE_USES then
		forms_info_uses_count = forms_info_uses_count + 1;
	     if element_common.type = TYPE_SPECIAL then
		forms_info_specials_count = forms_info_specials_count + 1;
	     element_index = element_common.next_element_index;
	end;
	forms_info_types_count = forms_info_entry_count;
	forms_info_default_forms_length = qgte.default_form.total_chars;

/* allocate the return info structure & clear the beastie out */
	on area go to no_allocation;

	allocate forms_info in (user_area);

	revert area;

	forms_info.entry (*) = 0;
	forms_info.names (*),
	     forms_info.comments (*),
	     forms_info.uses (*),
	     forms_info.specials (*) = "";
	forms_info.types (*) = -1;
	forms_info.default_form = return_string (qgte.default_form);

/* now loop through the entries again, copying out the data for the user */
	forms_info_entry_count,
	     forms_info_name_count,
	     forms_info_comment_count,
	     forms_info_types_count,
	     forms_info_uses_count,
	     forms_info_specials_count = 0;

	element_index = parse_info.forms_table_start_index;
	do while (element_index > 0);
	     fep = addr (iod_forms_info_tab.element_data_block (element_index));

	     forms_info_entry_count = forms_info_entry_count + 1; /* processing next entry */

/* save name information for the element */
	     forms_info.entry (forms_info_entry_count).first_name_index = forms_info_name_count + 1;
	     do i = 1 to element_common.n_names;
		forms_info_name_count = forms_info_name_count + 1;
		forms_info.names (forms_info_name_count) = return_string (element_common.names (i));
	     end;
	     forms_info.entry (forms_info_entry_count).last_name_index = forms_info_name_count;

/* if the element has comments, save them; else return 0 */
	     if element_common.comment.total_chars ^= 0 then do;
		forms_info_comment_count = forms_info_comment_count + 1;
		forms_info.entry (forms_info_entry_count).comment_index = forms_info_comment_count;
		forms_info.comments (forms_info_comment_count) = return_string (element_common.comment);
	     end;
	     else forms_info.entry (forms_info_entry_count).comment_index = 0;

/* save the string describing the type of element this is */
	     forms_info_types_count = forms_info_types_count + 1;
	     forms_info.types (forms_info_types_count) = element_common.type;
	     forms_info.entry (forms_info_entry_count).type_index = forms_info_types_count;

/* if this is a uses element, build & save the uses name string; else return 0 */
	     if element_common.type = TYPE_USES then do;
		forms_info_uses_count = forms_info_uses_count + 1;
		forms_info.entry (forms_info_entry_count).uses_index = forms_info_uses_count;
		do i = 1 to uses_element.n_indices;
		     forms_info.uses (forms_info_uses_count) = rtrim (forms_info.uses (forms_info_uses_count))
			|| return_string (uses_element.index_blocks (i).name);
		     if i ^= uses_element.n_indices then
			forms_info.uses (forms_info_uses_count) = rtrim (forms_info.uses (forms_info_uses_count)) || ",";
		end;
	     end;
	     else forms_info.entry (forms_info_entry_count).uses_index = 0;

/* if this is a special element, return the special string; else 0 */
	     if element_common.type = TYPE_SPECIAL then do;
		forms_info_specials_count = forms_info_specials_count + 1;
		forms_info.entry (forms_info_entry_count).special_index = forms_info_specials_count;
		forms_info.specials (forms_info_specials_count) = return_string (special_element.special_string);
	     end;
	     else forms_info.entry (forms_info_entry_count).special_index = 0;
	     element_index = element_common.next_element_index;
	end;

/* tell user where we put the data */
	a_area_ptr = forms_info_ptr;

	return;

/* when we can't allocate in the supplied area */
no_allocation:
	a_code = error_table_$notalloc;
	return;
%page;

process_forms_string: proc (string_to_process, parse_indices, parse_error);

/* subroutine to parse the forms string and locate matching data in the
   forms table starting at parse_info.start_index */

dcl  string_to_process char (*) parameter;		/* forms string to parse out */
dcl  parse_indices (*) fixed bin parameter;		/* type indices to fill in */
dcl  parse_error fixed bin (35) parameter;		/* my error code */

dcl  element_index fixed bin;
dcl  error_string_long char (100) aligned;
dcl  error_string_short char (8) aligned;
dcl  got_a_match bit (1);
dcl  (i, j) fixed bin;
dcl  parsed_element_name char (64) varying;

/* initialize things */
	parse_indices (*) = 0;
	mode_string_info_ptr = null;
	on cleanup go to process_forms_string_cleanup;

/* now parse the given mode string */
	call mode_string_$parse (string_to_process, null, mode_string_info_ptr, parse_error);
	if parse_error ^= 0 then do;
	     if parse_error = error_table_$bad_mode_syntax then
		parse_error = error_table_$bad_arg;
	     go to process_forms_string_cleanup;
	end;

/* now let's see what we got.  loop for each forms element parsed */
	do i = 1 to mode_string_info.number;
	     mode_value_ptr = addr (mode_string_info.modes (i)); /* get info for parsed element */

/* if there were any problems, add descriprive error comment to error string
   and continue to next parsed forms element */
	     if mode_value.code ^= 0 then do;
		parse_error = mode_value.code;
		call convert_status_code_ (parse_error, error_string_short, error_string_long);
		call ioa_$rsnpnnl ("^a^/^a: option ^a",
		     return_error_string, (0),
		     return_error_string,
		     error_string_long, mode_value.mode_name);
		goto skip_this_mode_entry;
	     end;

/* scan through all the forms elements defined for the forms table looking for
   an element which matches the parsed element name (this includes looking at
   any additional names each forms element may have).

   If we find a match, we save the elements index within the forms table in
   the parse indices in the slot corresponding to the type of element defined
   by the element index.

   If the element is a USES element (made up of one or more other elements),
   call another routine to expand the USES element into its component types */
	     got_a_match = "0"b;
	     element_index = parse_info.forms_table_start_index;
	     parsed_element_name = rtrim (mode_value.mode_name);
	     if mode_value.char_valuep then
		parsed_element_name = parsed_element_name || mode_value.char_value;
	     else if mode_value.numeric_valuep then
		parsed_element_name = parsed_element_name || ltrim (rtrim (char (mode_value.numeric_value)));
	     do while (element_index > 0 & ^got_a_match);
		fep = addr (iod_forms_info_tab.element_data_block (element_index));
		do j = 1 to element_common.n_names;
		     if return_string (element_common.names (j)) = parsed_element_name then do;
			parse_indices (element_common.type) = element_index;
			if element_common.type = TYPE_USES then /* expand 'uses' if found */
			     call expand_uses_definitions (parse_indices (TYPE_USES), parse_indices);
			got_a_match = "1"b;
		     end;
		end;
		element_index = element_common.next_element_index;
	     end;

/* if no element was found matching the parsed element, add a descriptive
   error string to the error string we are going to return to the user */
	     if ^got_a_match then do;
		parse_error = error_table_$bad_forms_option;
		call ioa_$rsnpnnl ("^a^/Option ^a invalid.",
		     return_error_string, (0),
		     return_error_string, mode_value.mode_name);
	     end;

skip_this_mode_entry:
	end;

process_forms_string_cleanup:				/* clean up after ourselves */
	if mode_string_info_ptr ^= null then do;
	     free mode_string_info;
	     mode_string_info_ptr = null;
	end;

     end process_forms_string;
%page;
locate_forms_table: proc;

/* locate the default forms table and return the starting index of the forms
   entries to use.  The logic it will use to find the table is
   1. if there is a device entry defined
   .  1a. if there is a forms_table string defined, use that.
   .  1b. if no forms string defined, go to step 2.
   2. if there is a request type entry defined and it has a forms_table string
   .  defined, use that.
   3. return no table error */

dcl  forms_table_name char (32);

/* first locate the name of the forms table to use */
	forms_table_name = "";
	code = 0;
	if idtep ^= null then
	     forms_table_name = return_string (idte.forms_table);
	if forms_table_name = "" then
	     if qgtep ^= null then
		forms_table_name = return_string (qgte.forms_table);

	if forms_table_name = "" then do;
	     code = error_table_$no_forms_table_defined;
	     return;
	end;

/* locate the given forms table */
	do i = 1 to iod_forms_info_tab.n_groups
	     while (forms_table_name ^= iod_forms_info_tab.groups.name (i));
	end;
	if i > iod_forms_info_tab.n_groups then do;	/* not there! */
	     code = error_table_$no_table;
	     return;
	end;

/* remember where the table starts for this forms table  */
	parse_info.forms_table_start_index = iod_forms_info_tab.groups.first_element_index (i);

     end locate_forms_table;
%page;

evaluate_the_form_type: proc (type_index);

/* given a particular type index, take the element index from parse_info for
   that type index slot and evaluate it.  This evaluation will set one or more
   of the size parameters and the return_escape or return_special strings */

dcl  type_index fixed bin parameter;

/* if the user specified this type of element, use it; else use the default */
	element_index = parse_info.user_type_indices (type_index);
	if element_index <= 0 then
	     element_index = parse_info.default_type_indices (type_index);

/* if this type of element was specified, set up the information for it */
	if element_index > 0 then do;
	     fep = addr (iod_forms_info_tab.element_data_block (element_index));
	     if type_index = TYPE_PREAMBLE then do;
		return_escape_string = return_escape_string
		     || return_string (preamble_element.escape_string);
	     end;
	     else if type_index = TYPE_ORIENTATION then do;
		return_escape_string = return_escape_string
		     || return_string (orientation_element.escape_string);
		size_info.page_height = orientation_element.height;
		size_info.page_width = orientation_element.width;
	     end;
	     else if type_index = TYPE_FONT_DESC then do;
		return_escape_string = return_escape_string
		     || return_string (font_element.escape_string);
		size_info.char_height = font_element.height;
		size_info.char_width = font_element.width;
	     end;
	     else if type_index = TYPE_FONT_NAME then do;
		return_escape_string = return_escape_string
		     || return_string (font_element.escape_string);
	     end;
	     else if type_index = TYPE_FONT_SIZE then do;
		return_escape_string = return_escape_string
		     || return_string (font_element.escape_string);
		size_info.char_height = font_element.height;
		size_info.char_width = font_element.width;
	     end;
	     else if type_index = TYPE_LINE_DESC then do;
		return_escape_string = return_escape_string
		     || return_string (line_element.escape_string);
		size_info.line_height = line_element.height;
	     end;
	     else if type_index = TYPE_HOLES then do;
		return_escape_string = return_escape_string
		     || return_string (holes_element.escape_string);
		size_info.page_height = size_info.page_height - orientation_element.height;
		size_info.page_width = size_info.page_width - orientation_element.width;
	     end;
	     else if type_index = TYPE_POSTAMBLE then do;
		return_escape_string = return_escape_string
		     || return_string (postamble_element.escape_string);
	     end;
	     else if type_index = TYPE_SPECIAL then do;
		return_special_string = return_special_string
		     || return_string (special_element.special_string);
	     end;
	end;

     end evaluate_the_form_type;
%page;

expand_uses_definitions: proc (element_to_use, save_elements);

/* Expand the given uses element by going through the indices stored in the
   uses element to get the indices and types of the elements referred to by
   the uses element. */

dcl  element_to_use fixed bin parameter;
dcl  save_elements (*) fixed bin parameter;

dcl  i fixed bin;
dcl  temp_fep ptr;

	fep = addr (iod_forms_info_tab.element_data_block (element_to_use));
	do i = 1 to uses_element.n_indices;
	     temp_fep = addr (iod_forms_info_tab.element_data_block (uses_element.index (i)));
	     if temp_fep -> element_common.type = TYPE_USES then
		call expand_uses_definitions ((temp_fep -> uses_element.index (i)), save_elements);
	     else save_elements (temp_fep -> element_common.type) = uses_element.index (i);
	end;

     end expand_uses_definitions;


return_string: proc (target) returns (char (*));

/* small procedure to extract a string from text_strings.chars in the I/O daemon tables */

dcl  1 target like text_offset parameter;

	if target.total_chars = 0 then
	     return ("");
	else return (substr (text_strings.chars, target.first_char, target.total_chars));
     end return_string;
%page; %include iod_device_tab;
%page; %include iod_tables_hdr;
%page; %include iod_forms_info_tab;
%page; %include mode_string_info;
%page; %include q_group_tab;
%page; %include system_forms_info;
%page; %include user_forms_info;

     end iod_forms_;
