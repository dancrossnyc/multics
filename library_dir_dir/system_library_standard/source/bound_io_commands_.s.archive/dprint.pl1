/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to call object_lib_$initiate to check if a file is an object
     segment or MSF instead of calling object_info_.
  2) change(88-10-24,Brunelle), approve(88-10-24,MCR7911),
     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
     Dprint_arg_version_7 removed from declaration in program because now
     defined in dprint_arg include file.
                                                   END HISTORY COMMENTS */


/* dprint and dpunch commands: request the I/O daemon to print or punch a segment */

/* Initially coded in April 1969 by V. Voydock */
/* Modified on February 12, 1970 at 5:50 P. M. by V. Voydock */
/* Modified by Nate Adleman on December 20, 1969 at 1123 to add the no_questions entry which does not ask the user
	any questions */
/* Modified for punching by M A Padlipsky April 1970 */
/* Modified by M. Weaver 22 April 1970--added  test_init1 entry for on-line testing */
/* Modified by E. Stone 10/21/70 to add the call to com_query_ */
/* Modified by Dennis Capps 11/02/71 to change the call to com_query_ to a call to command_query_ */
/* Modified by M. Weaver 15 January 1971 22:30 */
/* Modified by Paul Green on January 23, l971 to clean up the incredible mess, and to add the number_of_copies feature */
/* Modified April 1973 by R. S. Coren to interface through dprint_ using message segments, and to add the -destination
	and -queue control arguments */
/* Modified October 1973 by Robert S. Coren to accept -device_class control argument and handle submission errors more
	cleanly */
/* Modified by J. Stern 3/11/75 to add -request_type control arg */
/* Bug with -bf at end of line fixed 12/8/75 Steve Herbst */
/* Changed not to query in most error cases 10/18/76 S. Herbst */
/* Modified by J. C. Whitmore, 5/78, for new dprint_arg structure during Daemon upgrade, bug fixes and removal of -dvc */
/* Modified to reject object segments by S. Herbst, 10/25/78 */
/* Modified to allow object segments to be punched, but not printed 02/03/79 W. Olin Sibert */
/* Modified: 8 March 1981 by G. Palter to ignore error_table_$no_s_permission, accept "-ind" for "-indent" and do some
	minor cleanup of the code */
/* Modified: 10 April 1981 by G. Palter to allow request type names longer than 8 characters */
/* Modified: 8 September 1981 by G. Palter to accept -forms control argument */
/* Modified: June 1982 by R. Kovalcik to accept -defer_until_process_termination */
/* Modified: 84-11-01 by EJ Sharpe for new mdc_$get_lv_access arglist, also
     		create internal dprint_arg_version_7 constant since include
		file has been upgraded to version 8 */

dprint:
dp:  procedure () options (variable);


	dcl     count		 fixed bin;	/* number of segs already queued by this invocation */
	dcl     indx		 fixed bin;
	dcl     lng		 fixed bin;
	dcl     lcnt		 fixed bin;	/* number of realready quests already queued */
	dcl     nargs		 fixed bin;
	dcl     i			 fixed bin;
	dcl     queue		 fixed bin;
	dcl     mode		 bit (36) aligned;
	dcl     pub_bit		 bit (1) aligned;	/* Public flag returned from mdc_$get_lv_access */
	dcl     code		 fixed bin (35);
	dcl     bc		 fixed bin (24);	/* for bit count of MSF component */
	dcl     fcbp		 ptr;
	dcl     dum		 ptr;		/* dummy pointer arg */

	dcl     max_queues		 fixed bin int static options (constant) init (4);
	dcl     MAX_PAGE_WIDTH	 fixed bin int static options (constant) init (136); /* For prt300, etc. */
	dcl     io_coord		 char (16) int static options (constant) init ("IO.SysDaemon");

	dcl     (addr, index, length, max, null, substr, fixed, rtrim, string) builtin;

	dcl     cleanup		 condition;

	dcl     punching		 initial ("0"b) bit (1); /* punch or print? */
	dcl     no_questions	 initial ("0"b) bit (1); /* mainly for use by daemons */

	dcl     control_arg		 bit (1);		/* last arg was a control arg */
	dcl     some_path		 bit (1);		/* some pathname in command line */
	dcl     brief		 bit (1);		/* for brief option */
	dcl     top_lbl_sw		 bit (1);
	dcl     bottom_lbl_sw	 bit (1);
	dcl     access_lbl_sw	 bit (1);

	dcl     (del_acc, r_acc)	 bit (1) aligned;
	dcl     s_acc		 bit (1) aligned;

	dcl     access_class	 bit (72) aligned;
	dcl     access_label	 char (136);

	dcl     accname		 character (32);
	dcl     generic_type	 char (32);
	dcl     rqt_gen_type	 char (32);
	dcl     last_arg		 char (32);

	dcl     argptr		 ptr;
	dcl     seg_ptr		 ptr;
	dcl     based_arg		 char (lng) based (argptr) unaligned;
	dcl     arg		 char (32) aligned;
	dcl     ans		 char (12) varying;

	dcl     question		 char (132);
	dcl     quest_len		 fixed bin;

	dcl     dname		 char (168);	/* directory in which segment to be printed lies */
	dcl     ename		 char (32);	/* entry name of segment to be printed */
	dcl     lvname		 char (32);
	dcl     suf		 char (1) aligned;
	dcl     id		 char (6) aligned;

	dcl     (error_table_$lock_wait_time_exceeded, error_table_$dirseg, error_table_$no_s_permission, error_table_$noentry,
	        error_table_$nostars, error_table_$moderr, error_table_$badopt, error_table_$notalloc, error_table_$id_not_found,
	        error_table_$zero_length_seg)
				 fixed binary (35) external;

	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     dprint_		 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     dprint_$check_daemon_access entry (character (*), character (*), character (*), bit (1) aligned, bit (1) aligned,
				 bit (1) aligned, character (*), fixed binary (35));
	dcl     dprint_$queue_contents entry (character (*), fixed binary, fixed binary, fixed binary (35));
	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     cu_$arg_ptr		 ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin, fixed binary (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     (com_err_, com_err_$suppress_name) entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$ioa_stream	 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     command_query_	 entry options (variable);
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     mdc_$find_lvname	 entry (bit (36), char (*), fixed bin (35));
	dcl     mdc_$get_lv_access	 entry (char (*), fixed bin (3), bit (36) aligned, bit (1) aligned, fixed bin (35));
	dcl     iod_info_$generic_type entry (char (*), char (32), fixed bin (35));
	dcl     msf_manager_$open	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     msf_manager_$close	 entry (ptr);
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));

	dcl     hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	dcl     object_lib_$initiate	 entry (char (*), char (*), char (*), bit (1), ptr, fixed bin (24), bit (1), fixed bin (35));

%include dprint_arg;

%include query_info;

%include branch_status;

/* dprint: dp: procedure () options (variable); */

	queue = 0;				/* we want the default queue */
	go to start_1;


no_questions:
     entry () options (variable);
	no_questions = "1"b;
	queue = 0;				/* want the default queue */
	go to start_1;


dp1: entry () options (variable);
	queue = 1;
	go to start_1;

dp2: entry () options (variable);
	queue = 2;
	go to start_1;

dpunch:
dpn: entry () options (variable);
	punching = "1"b;
	queue = 0;				/* again the default queue */
	go to start_1;

dpn1: entry () options (variable);
	punching = "1"b;
	queue = 1;
	go to start_1;

dpn2: entry () options (variable);
	punching = "1"b;
	queue = 2;


start_1:	call init_variables;			/* get everything set up */

	if punching then do;
		dprint_arg.pt_pch = 2;		/* indicate to dprint_ that its a punch request */
		dprint_arg.output_module = 3;		/* assume mcc format as a default */
		generic_type,
		     dprint_arg.request_type = "punch";
		id = "dpunch";
	     end;
	else do;
		dprint_arg.pt_pch = 1;		/* otherwise this is a print request */
		dprint_arg.output_module = 1;
		generic_type,
		     dprint_arg.request_type = "printer";
		id = "dprint";
	     end;


	on cleanup begin;
		if fcbp ^= null then call msf_manager_$close (fcbp);
	     end;

	call cu_$arg_count (nargs, code);		/* check if called as a command also */
	if code ^= 0 then do;
		call com_err_ (code, id);
		return;
	     end;

	do indx = 1 to nargs;
	     call cu_$arg_ptr (indx, argptr, lng, code);	/* get args, one at a time */
	     arg = based_arg;			/* copy into temp for option testing */

	     if index (based_arg, "-") = 1 then call process_control_arg;
	     else do;				/* Process path name */
		     some_path = "1"b;
		     control_arg = "0"b;		/* seen a pathname since last control arg */
		     call expand_pathname_ (based_arg, dname, ename, code);
		     if code ^= 0 then do;
			     call com_err_ (code, id, "^a", based_arg);
			     go to no_request;
			end;
		     else do;
			     call check_star_name_$entry (ename, code);
			     if code ^= 0 then do;
				     if code <= 2 then /* a legal star name */
					code = error_table_$nostars;
				     call com_err_ (code, id, "^a^[>^]^a", dname, (dname ^= ">"), ename);
				     go to no_request;
				end;
			     else do;
						/* See if file to be printed exists */
				     call hcs_$status_long (dname, ename, 1, addr (branch_status), null, code);
				     if (code ^= 0) & (code ^= error_table_$no_s_permission) then do;
					     call com_err_ (code, id, "^a^[>^]^a", dname, (dname ^= ">"), ename);
no_request:				     call com_err_$suppress_name (0, id, "Request not submitted.");
					end;
				     else do;

/* Make sure it's not an object segment. */

					     if ^punching then do;
						     call object_lib_$initiate (dname, ename, "", "1"b, seg_ptr, (0), (""b), code);
						     if seg_ptr ^= null then do;
							     call hcs_$terminate_noname (seg_ptr, (0)); /* we're done with it */
							     call com_err_ (0, id, "^a^[>^]^a is an object segment.",
								dname, (dname ^= ">"), ename);
							     go to no_request;
							end;
						end;

/* Check that user has access, length nonzero, public volume */

					     if ^substr (branch_status.mode, 2, 1) then do; /* check "r" access */
						     code = error_table_$moderr;
CALL_COM:						     call com_err_ (code, id, "^a^[>^]^a", dname, (dname ^= ">"), ename);
						     go to no_request;
						end;

					     dprint_arg.bit_count = 0; /* start with no length */

					     if branch_status.type = directory_type then do; /* directory or MSF */
						     if branch_status.bit_count = "0"b then do; /* a directory */
							     code = error_table_$dirseg;
							     go to CALL_COM;
							end;

/*				For the MSF case, get the total bit count of the file */

						     call msf_manager_$open (dname, ename, fcbp, code);
						     if code ^= 0 then go to CALL_COM;

						     do i = 0 to fixed (branch_status.bit_count, 17, 0) - 1;
							bc = 0;
							call msf_manager_$get_ptr (fcbp, i, "0"b, dum, bc, code);
							if code ^= 0 then go to CALL_COM;
							dprint_arg.bit_count = dprint_arg.bit_count + bc; /* add the bit count */
						     end;

						     call msf_manager_$close (fcbp);
						     fcbp = null;
						end;
					     else dprint_arg.bit_count = fixed (branch_status.bit_count, 24);

					     if dprint_arg.bit_count = 0 then do;
						     code = error_table_$zero_length_seg;
						     go to CALL_COM;
						end;

/* Check that the volume is public. */
					     call mdc_$find_lvname (branch_status.lvid, lvname, code);
					     if code ^= 0 then go to CALL_COM;
					     call mdc_$get_lv_access (lvname, 1, mode, pub_bit, code);
					     if code ^= 0 then go to CALL_COM; /* The daemon driver won't mount it */
					     if ^pub_bit then do;
						     call com_err_ (0, id, "^a^[>^]^a is not on a public volume.",
							dname, (dname ^= ">"), ename);
						     go to no_request;
						end;

/* find out if daemon has access to the segment. If not, warn the user */

					     call dprint_$check_daemon_access (dname, ename, dprint_arg.request_type, del_acc,
						r_acc, s_acc, accname, code);
					     if code ^= 0 then /* We couldn't figure it out. */
						call com_err_ (0, id, "Warning: Unable to check IO daemon access to ^a^[>^]^a",
						     dname, (dname ^= ">"), ename);
					     else do;
						     if ^r_acc then do;
							     call com_err_ (0, id, "^a requires r access to ^a^[>^]^a",
								accname, dname, (dname ^= ">"), ename);
							     go to no_request;
							end;
						     if ^s_acc then
							call ask ("^a does not have status access on ^a^s");
						     if ^del_acc & (dprint_arg.delete ^= 0) then
							call com_err_ (0, "Warning", "^a has insufficient access to delete ^a^[>^]^a",
							     io_coord, dname, (dname ^= ">"), ename); /* this is info only */
						end;

QUEUE_IT:					     if access_lbl_sw then call make_access_lbl;
					     dprint_arg.queue = queue; /* want default or from -q arg */
					     code = 0;
					     call dprint_ (dname, ename, dpap, code);
					     if code ^= 0 then do;
						     call com_err_ (code, id, "Queue ^d for request type ^a",
							dprint_arg.queue, dprint_arg.request_type);
						     if code = error_table_$lock_wait_time_exceeded then do; /* Queue locked */
							     if no_questions then go to next_arg; /* If he won't answer questions, skip it. */
							     query_info.status_code = code;
							     call command_query_ (addr (query_info), ans, id, "Do you wish to try again?");
							     if ans = "yes" then go to QUEUE_IT;
							end;

						     else if code = error_table_$noentry then
							call ioa_$ioa_stream ("error_output",
							     "Request type or queue argument is probably invalid.");

						     else if code = error_table_$notalloc then
							call ioa_$ioa_stream ("error_output", "Queue is full at present.");
						     go to no_request;
						end;

					     else count = count + 1;
					end;
				end;
			end;
		end;
next_arg: end;

	if count > 0 | ^some_path then call print_counts;
	if some_path then if control_arg then call com_err_ (0, id,
		     "Warning: Control arguments following last pathname are ignored.");

RETURN:	return;

/* ===================================================== */

process_control_arg: proc;

	if arg = "-bf" | arg = "-brief" then do;	/* Check for brief option */
		brief = "1"b;
		return;				/* allow -bf at end of line */
	     end;

	control_arg = "1"b;				/* must be an option if it has "-" */

	if arg = "-dl" | arg = "-delete" | arg = "-d" then /* Check for "print and delete" */
	     dprint_arg.delete = 1;
	else if arg = "-he" | arg = "-header" | arg = "-h" then do; /* Check for heading option */
		call get_parameter;
		dprint_arg.heading = " for " || based_arg;
	     end;
	else if arg = "-ds" | arg = "-destination" then do; /* Check for destination */
		call get_parameter;
		dprint_arg.destination = based_arg;
	     end;
	else if arg = "-rqt" | arg = "-request_type" then do;
		if count > 0 then call print_counts;
		call get_parameter;
		call iod_info_$generic_type (based_arg, rqt_gen_type, code);
		if code ^= 0 then
		     if code = error_table_$id_not_found then do;
			     call com_err_ (0, id, "Unknown request type.  ^a", based_arg);
			     go to RETURN;
			end;
		     else call com_err_ (0, id, "Warning -- Unable to check request type ^a.", based_arg);
		else if rqt_gen_type ^= generic_type then do;
			call com_err_ (0, id, "Request type ^a is not of generic type ^a.", based_arg, generic_type);
			go to RETURN;
		     end;
		else if length (rtrim (based_arg)) > length (dprint_arg.request_type) then do;
			call com_err_ (0, id, "Request type name ""^a"" must be ^d characters or less in length.",
			     based_arg, length (dprint_arg.request_type));
			go to RETURN;
		     end;
		else dprint_arg.request_type = based_arg;
	     end;
	else if arg = "-cp" | arg = "-copy" then do;	/* Check for number of copies */
		call get_parameter;
		dprint_arg.copies = cv_dec_check_ (based_arg, code);
		if code ^= 0 | dprint_arg.copies < 1 then do;
			call com_err_ (0, id, "Invalid copy request ^a", based_arg);
			go to RETURN;
		     end;
		else if dprint_arg.copies > 4 then do;
			dprint_arg.copies = 4;
			call com_err_ (0, id, "Too many copies specified; 4 will be supplied.");
		     end;
	     end;
	else if arg = "-nt" | arg = "-notify" then /* Check for "notify me when printed" */
	     dprint_arg.notify = 1;
	else if arg = "-q" | arg = "-queue" then do;	/* Check for queue number */
		if count > 0 then call print_counts;
		call get_parameter;
		queue = cv_dec_check_ (based_arg, code);
		if code ^= 0 | queue < 1 | queue > max_queues then do; /* dprint_ makes the real check */
			call com_err_ (0, id, "Invalid queue number ^a", based_arg);
			go to RETURN;
		     end;
	     end;
	else if arg = "-dupt" | arg = "-defer_until_process_termination" then /* Check for "don't process request until requesting process terminates" */
	     dprint_arg.defer_until_process_termination = 1;
	else if ^punching then do;			/* If printing, lots of new interesting args. */
		if arg = "-nep" | arg = "-no_endpage" then do;
			dprint_arg.nep = "1"b;
			go to NL_OPT;		/* no_label implied */
		     end;
		else if arg = "-ned" | arg = "-non_edited" then
		     dprint_arg.non_edited = "1"b;
		else if arg = "-tc" | arg = "-truncate" then
		     dprint_arg.truncate = "1"b;
		else if arg = "-ll" | arg = "-line_length" then do;
			call get_parameter;
			dprint_arg.line_lth = cv_dec_check_ (based_arg, code);
			if code ^= 0 | dprint_arg.line_lth < 1 then do;
				call com_err_ (0, id, "Invalid line length ^a", based_arg);
				go to RETURN;
			     end;
			if dprint_arg.line_lth > MAX_PAGE_WIDTH then
			     call com_err_ (0, "Warning", "Specified line length is greater then normal printer maximum.");
		     end;
		else if arg = "-in" | arg = "-ind" | arg = "-indent" then do;
			call get_parameter;
			dprint_arg.lmargin = cv_dec_check_ (based_arg, code);
			if code ^= 0 | dprint_arg.lmargin < 0 | dprint_arg.lmargin > MAX_PAGE_WIDTH then do;
				call com_err_ (0, id, "Invalid indentation ^a", based_arg);
				go to RETURN;
			     end;
		     end;
		else if arg = "-sg" | arg = "-single" then
		     dprint_arg.single = "1"b;
		else if arg = "-pl" | arg = "-page_length" then do;
			call get_parameter;
			dprint_arg.page_lth = cv_dec_check_ (based_arg, code);
			if code ^= 0 | dprint_arg.page_lth < 1 then do;
				call com_err_ (0, id, "Invalid page length ^a", based_arg);
				go to RETURN;
			     end;
		     end;
		else if arg = "-lbl" | arg = "-label" then do;
			call get_parameter;
			if dprint_arg.nep then do;
skip_labels:			call com_err_ (0, id, "Warning: Labels are ignored with -no_endpage.");
				return;
			     end;
			dprint_arg.top_label,
			     dprint_arg.bottom_label = based_arg;
			access_lbl_sw = "0"b;	/* don't try to add access labels */
			top_lbl_sw, bottom_lbl_sw = "1"b; /* this is like giving both */
			dprint_arg.center_top_label,
			     dprint_arg.center_bottom_label = "0"b; /* only center access labels */
		     end;
		else if arg = "-tlbl" | arg = "-top_label" then do;
			call get_parameter;
			if dprint_arg.nep then go to skip_labels;
			dprint_arg.top_label = based_arg;
			if bottom_lbl_sw then access_lbl_sw = "0"b; /* when both cancel access labels */
			top_lbl_sw = "1"b;
			dprint_arg.center_top_label = "0"b; /* in case this was set from last path */
		     end;
		else if arg = "-blbl" | arg = "-bottom_label" then do;
			call get_parameter;
			if dprint_arg.nep then go to skip_labels;
			dprint_arg.bottom_label = based_arg;
			if top_lbl_sw then access_lbl_sw = "0"b; /* when both cancel access labels */
			bottom_lbl_sw = "1"b;
			dprint_arg.center_bottom_label = "0"b; /* only for access labels */
		     end;
		else if arg = "-albl" | arg = "-access_label" then do;
			if dprint_arg.nep then go to skip_labels;
			access_lbl_sw = "1"b;
			top_lbl_sw, bottom_lbl_sw = "0"b;
		     end;
		else if arg = "-nlbl" | arg = "-no_label" then do;
NL_OPT:			access_lbl_sw = "0"b;
			top_lbl_sw, bottom_lbl_sw = "0"b;
			dprint_arg.center_top_label, dprint_arg.center_bottom_label = "0"b;
			dprint_arg.top_label, dprint_arg.bottom_label = "";
		     end;
		else if arg = "-forms" then do;
			call get_parameter;
			if length (rtrim (based_arg)) > length (dprint_arg.form_name) then do;
				call com_err_ (0, id, "Forms specification ""^a"" must be ^d characters or less in length.",
				     based_arg, length (dprint_arg.form_name));
				go to RETURN;
			     end;
			dprint_arg.form_name = based_arg;
		     end;
		else do;				/* Bad dprint option */
BAD_OPT:			call com_err_ (error_table_$badopt, id, " ^a ", based_arg);
			go to RETURN;
		     end;
	     end;					/* of print-only */
	else if punching then do;			/* punch args only for dpunch */
		if arg = "-mcc" then
		     dprint_arg.output_module = 3;
		else if arg = "-raw" then
		     dprint_arg.output_module = 4;
		else if arg = "-7p" | arg = "-7punch" then
		     dprint_arg.output_module = 2;
		else go to BAD_OPT;			/* Bad dpunch option */
	     end;

     end process_control_arg;

print_counts: proc;

	if ^brief then do;
		dprint_arg.queue = queue;		/* use the queue we would have requested */
						/* find out how many requests have already been queued */
		call dprint_$queue_contents (dprint_arg.request_type, dprint_arg.queue, lcnt, code);
		if code ^= 0 then
		     call com_err_ (code, id, "Cannot get count for request type ^a, queue ^d",
			dprint_arg.request_type, dprint_arg.queue);

		else if count = 0 then do;
			if lcnt = 1 then suf = ""; else suf = "s";
			call ioa_ ("^d request^a in ^a queue ^d", lcnt, suf, dprint_arg.request_type, dprint_arg.queue);
		     end;
		else do;
			if count = 1 then suf = ""; else suf = "s";
			call ioa_ ("^d request^a signalled, ^d already in ^a queue ^d", count, suf, max (0, lcnt - count),
			     dprint_arg.request_type, dprint_arg.queue);
			count = 0;
		     end;

	     end;

     end print_counts;

ask: proc (format);

	dcl     format		 char (*);

	if no_questions then go to next_arg;
	call ioa_$rsnnl (format, question, quest_len, accname, dname, ename);
	query_info.status_code = code;
	call command_query_ (addr (query_info), ans, id, "^a.  Do you still wish request?  ", question);
	if substr (ans, 1, 3) ^= "yes" then go to next_arg;
	go to QUEUE_IT;				/* User wants request anyway */

     end ask;

make_access_lbl: proc;

	access_label = "";
	call hcs_$get_access_class (dname, ename, access_class, code);
	if code ^= 0 then go to CALL_COM;
	call convert_authorization_$to_string (access_class, access_label, code);
	if ^top_lbl_sw then do;
		dprint_arg.top_label = access_label;
		dprint_arg.center_top_label = "1"b;
	     end;
	if ^bottom_lbl_sw then do;
		dprint_arg.bottom_label = access_label;
		dprint_arg.center_bottom_label = "1"b;
	     end;
     end make_access_lbl;




get_parameter: proc;

	last_arg = arg;
	indx = indx + 1;
	call cu_$arg_ptr (indx, argptr, lng, code);
	if code ^= 0 then do;
		call com_err_ (0, id, "No value specified for ^a.", last_arg);
		go to RETURN;
	     end;

     end get_parameter;

init_variables: proc;

	fcbp = null;				/* no MSF's open yet */
	count = 0;				/* number of requests already signalled */

	query_info.yes_or_no_sw = "1"b;		/* only want yes or no on queries */

	control_arg = "0"b;
	some_path = "0"b;
	brief = "0"b;
	top_lbl_sw = "0"b;
	bottom_lbl_sw = "0"b;
	access_lbl_sw = "1"b;			/* we want access labels by default if not blank */

	dpap = addr (dprint_arg_buf);			/* initialize template dprint args */
	dprint_arg.version = dprint_arg_version_7;
	dprint_arg.queue = queue;			/* initialize the queue as requested */
	dprint_arg.notify = 0;			/* establish some default values */
	dprint_arg.copies = 1;
	dprint_arg.delete = 0;
	dprint_arg.dest = "";			/* be sure the old fields are set */
	dprint_arg.forms = "";
	dprint_arg.heading = "";
	string (dprint_arg.carriage_control) = "0"b;
	dprint_arg.lmargin = 0;
	dprint_arg.line_lth = 0;
	dprint_arg.page_lth = 0;
	dprint_arg.top_label = "";
	dprint_arg.bottom_label = "";
	dprint_arg.chan_stop_path = "";
	dprint_arg.destination = "";			/* just be sure this is clear */
	dprint_arg.form_name = "";			/* and this too */
	dprint_arg.defer_until_process_termination = 0;

     end init_variables;

     end dprint;
