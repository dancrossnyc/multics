/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* A procedure to extract information from the Terminal Type Table (TTT) */



/****^  HISTORY COMMENTS:
  1) change(77-06-13,JStern), approve(), audit(), install():
     Coded by J. Stern 6/13/77
     Modified 5/29/81 by Suzanne Krupp to add ttt_info_$function_key_data entry
        Also to make all entries reject noncurrent version of ttt.
     December 1981, Better update detection -- Benson I. Margulies
  2) change(84-12-17,Negaret), approve(87-07-23,MCR7742),
     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1055):
     Add the support of the entry point dsa_tm_neg_info to obtain the
     negotiation info to open a session on a DSA network.
  3) change(85-11-25,Swenson), approve(87-07-23,MCR7742),
     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1055):
     Fixed misuse of boolean evaluation order in if statement for calculating
     pointer to DSA TM extended table.
  4) change(87-03-10,LJAdams), approve(87-04-03,MCR7646),
     audit(87-05-05,Gilcrease), install(87-05-08,MR12.1-1030):
     Support TTT_version_3 which includes the protocol field.
  5) change(88-04-27,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
      A) Remove (translate to spaces) control characters appearing in
         answerback sequences, because of their possible impact on as
         operator terminal. (Answering_Service 406, phx19102)
  6) change(88-09-28,Brunelle), approve(88-01-26,MCR7813),
     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
     Upgrade to TTT_version_4 which includes c_chars expansion.
                                                   END HISTORY COMMENTS */


/* format: style2,idind25 */

ttt_info_:
     proc;

/* Parameters */

	dcl     pm_tt_name		   char (*);	/* terminal type name (Input) (Output) */
	dcl     pm_line_type	   fixed bin;	/* line type number (Input) */
	dcl     pm_baud		   fixed bin;	/* baud rate (Input) */
	dcl     pm_ttd_ptr		   ptr;		/* ptr to terminal_type_data structure (Input) */
	dcl     pm_code		   fixed bin (35);	/* status code (Output) */
	dcl     pm_modes		   char (*);	/* mode string (Output) */
	dcl     pm_initial_string	   char (*) varying;/* terminal initialization string (Output) */
	dcl     pm_additional_info	   char (*) varying;/* data provided for IO modules other than tty_ (Output) */
	dcl     pm_answerback	   char (*);	/* terminal answerback string (Input) */
	dcl     pm_id		   char (4);	/* terminal identifier (Output) */
	dcl     pm_ppm_flag		   bit (1);	/* print preaccess message flag (Output) */
	dcl     pm_cpo_flag		   bit (1);	/* conditional printer off flag (Output) */
	dcl     pm_command_name	   char (*);	/* preaccess command name */
	dcl     pm_coded_type	   fixed bin;	/* terminal type code number (Input) (Output) */
	dcl     pm_dname		   char (*);	/* TTT directory pathname */
	dcl     pm_ename		   char (*);	/* TTT entry name */
	dcl     pm_ttyvtblp		   ptr;		/* pointer to a video table */
	dcl     pm_dsatmdevp	   ptr;		/* pointer to a dsatm_device structure */
	dcl     pm_areap		   ptr;		/* pointer to user area for allocating table */
	dcl     pm_function_key_data_ptr ptr;		/* pointer to function key data structure */

/* Automatic */

	dcl     saved_install_time	   fixed bin (71);
	dcl     my_name		   char (32);
	dcl     (i, j)		   fixed bin;
	dcl     (tte_table_array_ptr, ttd_table_array_ptr)
				   ptr;
	dcl     stringp		   ptr;
	dcl     stringl		   fixed bin (21);
	dcl     next_offset		   fixed bin (18);
	dcl     (scanx, defx)	   fixed bin;
	dcl     ab		   char (100) varying;
	dcl     termp		   ptr;
	dcl     key		   char (1) aligned;
	dcl     value		   fixed bin;
	dcl     save_id		   char (4) varying;
	dcl     dname		   char (168);
	dcl     ename		   char (32);
	dcl     ec		   fixed bin (35);
	dcl     re_init_label	   label internal;
	dcl     areap		   ptr;
	dcl     char_time		   float bin;
	dcl     p			   ptr;
	dcl     sourcep		   ptr;
	dcl     targetp		   ptr;

/* Based */

	dcl     tte_table_rp	   (5) fixed bin (18) based (tte_table_array_ptr);
	dcl     ttd_table_ptr	   (5) ptr based (ttd_table_array_ptr);
	dcl     based_string	   char (stringl) based (stringp);
	dcl     user_area		   area based (areap);

	dcl     1 term		   unal based (termp),
		2 key		   char (1) unal,
		2 value		   fixed bin (8) unal,
		2 string		   char (0 refer (term.value));


/* Internal static */

	declare 1 ttt_info_data_	   aligned external,
		2 saved_tttp	   pointer init (null ()),
		2 saved_dname	   char (168) init (">system_control_1") unaligned,
		2 saved_ename	   char (32) init ("ttt") unaligned;

	dcl     capital_letters	   char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	dcl     small_letters	   char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
	dcl     digits		   char (10) int static options (constant) init ("0123456789");


/* External static */

	dcl     dsatm_data_$device_multics_dft
				   ext static aligned;

	dcl     (
	        error_table_$noalloc,
	        error_table_$no_table,
	        error_table_$no_term_type,
	        error_table_$invalid_line_type,
	        error_table_$incompatible_term_type,
	        error_table_$unimplemented_version,
	        error_table_$smallarg,
	        error_table_$improper_data_format,
	        error_table_$invalid_preaccess_command,
	        error_table_$badopt,
	        error_table_$wrong_no_of_args
	        )			   fixed bin (35) external;


/* Conditions */

	dcl     seg_fault_error	   condition;
	dcl     area		   condition;
	dcl     out_of_bounds	   condition;

/* Builtins */

	dcl     (addr, collate, float, index, length, min, null, ptr, rtrim, search, string, substr, translate)
				   builtin;


/* procedures */

	dcl     initiate_file_	   entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     terminate_file_	   entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	dcl     cu_$arg_ptr		   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_count	   entry (fixed bin);
	dcl     expand_pathname_	   entry (char (*), char (*), char (*), fixed bin (35));
	dcl     ioa_		   entry options (variable);
	dcl     com_err_		   entry options (variable);
	dcl     com_err_$suppress_name   entry options (variable);
	dcl     get_system_free_area_	   entry returns (ptr);

terminal_data:
     entry (pm_tt_name, pm_line_type, pm_baud, pm_ttd_ptr, pm_code);

	re_init_label = terminal_data_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
terminal_data_init:
	call initialize;				/* gets install time */
	call find_tte;

	if pm_line_type > 0				/* don't ignore line type */
	then do;					/* make sure term type is compatible with line type */
		if pm_line_type > 72
		then do;
			pm_code = error_table_$invalid_line_type;
			return;
		     end;
		if ^substr (tte.line_types, pm_line_type, 1)
		then do;
			pm_code = error_table_$incompatible_term_type;
			return;
		     end;
	     end;

	ttdp = pm_ttd_ptr;
	if ttdp = null				/* no data wanted */
	then return;

	if terminal_type_data.version > ttd_version_3 | terminal_type_data.version <= 0
	then do;
		pm_code = error_table_$unimplemented_version;
		return;
	     end;

	terminal_type_data.old_type = tte.old_type;
	terminal_type_data.name = tte.name;

	tte_table_array_ptr = addr (tte.tables);
	ttd_table_array_ptr = addr (terminal_type_data.tables);
	do i = 1 to 5;
	     if tte_table_rp (i) = 0
	     then ttd_table_ptr (i) = null;
	     else ttd_table_ptr (i) = addr (ptr (tttp, tte_table_rp (i)) -> table_entry.table);
	end;

	if tte.delay_rp = 0
	then terminal_type_data.delay_ptr = null;
	else do;					/* find delay table for specified baud */
		delay_tablep = ptr (tttp, tte.delay_rp);
		j = 0;
		do i = 1 to delay_table.n_bauds while (delay_table.baud_rate (i) ^= pm_baud);
		     if delay_table.baud_rate (i) = 0	/* matches any baud */
		     then j = i;
		end;
		if i <= delay_table.n_bauds		/* found an exact match */
		then terminal_type_data.delay_ptr = addr (delay_table.version (i));
		else if j ^= 0			/* found a "match any"  */
		then terminal_type_data.delay_ptr = addr (delay_table.version (j));
		else terminal_type_data.delay_ptr = null;
						/* no delay table for specified baud */
	     end;

	terminal_type_data.erase = tte.erase;
	terminal_type_data.kill = tte.kill;
	string (terminal_type_data.framing_chars) = string (tte.framing_chars);
	string (terminal_type_data.flags) = ""b;
	terminal_type_data.keyboard_locking = tte.keyboard_addressing;
	terminal_type_data.line_delimiter = tte.line_delimiter;

	if terminal_type_data.version >= ttd_version_2	/* version 2 stuff */
	then do;
		string (terminal_type_data.flow_control_chars) = string (tte.flow_control_chars);
		terminal_type_data.output_buffer_size = tte.output_buffer_size;
		terminal_type_data.input_timeout = tte.input_timeout;
		terminal_type_data.output_block_acknowledge = tte.output_block_acknowledge;
	     end;

          if terminal_type_data.version = ttd_version_3	/* version 3 stuff */
          then terminal_type_data.protocol = tte.protocol;

	go to EXIT;

modes:
     entry (pm_tt_name, pm_modes, pm_code);

	re_init_label = modes_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
modes_init:
	call initialize;
	call find_tte;

	pm_modes = tte.modes;
	if length (rtrim (tte.modes)) > length (pm_modes)
	then pm_code = error_table_$smallarg;

	go to EXIT;

video_info:
     entry (pm_tt_name, pm_baud, pm_areap, pm_ttyvtblp, pm_code);

	re_init_label = video_infop_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
video_infop_init:
	call initialize;
	call find_tte;

	if tte.extended_tables_rp = 0
	then do;
no_video:
		pm_ttyvtblp = null ();
		pm_code = error_table_$no_table;
		go to EXIT;
	     end;
	extended_tablesp = ptr (tttp, tte.extended_tables_rp);
	if extended_tables.ntables < VIDEO_RP
	then go to no_video;
	if extended_tables.tables_rp (VIDEO_RP) = 0
	then go to no_video;

	if pm_baud > 0
	then char_time = 1.0 / (float (pm_baud) / 10.);
	else char_time = 0.0;

	areap = pm_areap;
	if areap = null ()
	then areap = get_system_free_area_ ();

	ttyvtblp = ptr (tttp, extended_tables.tables_rp (VIDEO_RP));
	tty_video_table_video_chars_len = tty_video_table.video_chars_len;
	on area call AREA_FULL;
	allocate tty_video_table in (user_area) set (p);
	p -> tty_video_table = tty_video_table;
	ttyvtblp = p;

	do i = 1 to min (N_VIDEO_SEQUENCES, tty_video_table.nseq);
	     ttyvseqp = addr (tty_video_table.sequences (i));
	     if tty_video_seq.present
	     then do;
		     ttyvseqp = addr (tty_video_table.sequences (i));
		     if tty_video_seq.cpad_present & ^tty_video_seq.cpad_in_chars
		     then do;
			     if char_time = 0.0
			     then tty_video_seq.cpad_present = "0"b;
			     else do;
				     tty_video_seq.cpad =
					((float (tty_video_seq.cpad) / 1.0e4) / char_time) + .9999;
				     tty_video_seq.cpad_in_chars = "1"b;
				     if tty_video_seq.cpad = 0
				     then tty_video_seq.cpad_present, tty_video_seq.cpad_in_chars = "0"b;
				end;
			end;
		end;
	end;
	pm_ttyvtblp = ttyvtblp;
	go to EXIT;





function_key_data:
     entry (pm_tt_name, pm_areap, pm_function_key_data_ptr, pm_code);

	re_init_label = function_key_data_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;

function_key_data_init:
	call initialize;
	call find_tte;
	if tte.fkey_rp = 0
	then do;
		pm_function_key_data_ptr = null;
		pm_code = error_table_$no_table;
		goto EXIT;
	     end;
	pm_code = 0;
	fkey_tablep = ptr (tttp, tte.fkey_rp);
	function_key_data_ptr = addr (fkey_table.fkey_data);

	if pm_areap = null
	then areap = get_system_free_area_ ();		/* default area for function_key_data */
	else areap = pm_areap;			/* user specifcied area for function_key_data */

	function_key_data_highest = function_key_data.highest;
	on area call AREA_FULL;
	allocate function_key_data in (user_area) set (pm_function_key_data_ptr);
	pm_function_key_data_ptr -> function_key_data = function_key_data;
	on area call AREA_FULL;
	allocate function_key_seqs in (user_area) set (pm_function_key_data_ptr -> function_key_data.seq_ptr);
	sourcep = ptr (tttp, fkey_table.seq_offset);
	targetp = pm_function_key_data_ptr -> function_key_data.seq_ptr;
	targetp -> function_key_seqs = sourcep -> function_key_seqs;

	go to EXIT;



dsatm_device:
     entry (pm_tt_name, pm_areap, pm_dsatmdevp, pm_code);

	re_init_label = dsatm_device_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
dsatm_device_init:
	call initialize;
	call find_tte;

	if tte.extended_tables_rp = 0
	then dsatmdevp = addr (dsatm_data_$device_multics_dft);

	else do;

		extended_tablesp = ptr (tttp, tte.extended_tables_rp);

		if extended_tables.ntables >= DSATM_DEVICE_RP
		then if extended_tables.tables_rp (DSATM_DEVICE_RP) ^= 0
		     then dsatmdevp = ptr (tttp, extended_tables.tables_rp (DSATM_DEVICE_RP));
		     else dsatmdevp = addr (dsatm_data_$device_multics_dft);
		else dsatmdevp = addr (dsatm_data_$device_multics_dft);
	     end;

	areap = pm_areap;
	if areap = null ()
	then areap = get_system_free_area_ ();

	on area call AREA_FULL;
	allocate dsatm_device in (user_area) set (p);

	p -> dsatm_device = dsatmdevp -> dsatm_device;
	p -> dsatm_device.terminal_type = pm_tt_name;
	pm_dsatmdevp = p;

	go to EXIT;



preaccess_type:
     entry (pm_command_name, pm_tt_name, pm_code);

	re_init_label = preaccess_type_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
preaccess_type_init:
	call initialize;

	if pm_command_name = "MAP"
	then i = ttt.type_map;
	else if pm_command_name = "963"
	then i = ttt.type_963;
	else if pm_command_name = "029"
	then i = ttt.type_029;
	else do;
		pm_code = error_table_$invalid_preaccess_command;
		return;
	     end;

	if i = 0
	then pm_tt_name = "";
	else pm_tt_name = ttt.tt_entries (i).name;

	go to EXIT;

initial_string:
     entry (pm_tt_name, pm_initial_string, pm_code);

	re_init_label = initial_string_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
initial_string_init:
	call initialize;
	call find_tte;

	if tte.initial_string.offset = 0
	then pm_initial_string = "";
	else do;
		stringp = ptr (tttp, tte.initial_string.offset);
		stringl = tte.initial_string.length;
		pm_initial_string = based_string;
		if stringl > length (pm_initial_string)
		then pm_code = error_table_$smallarg;
	     end;

	go to EXIT;





additional_info:
     entry (pm_tt_name, pm_additional_info, pm_code);

	re_init_label = additional_info_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
additional_info_init:
	call initialize;
	call find_tte;

	if tte.additional_info.offset = 0
	then pm_additional_info = "";
	else do;
		stringp = ptr (tttp, tte.additional_info.offset);
		stringl = tte.additional_info.length;
		pm_additional_info = based_string;
		if stringl > length (pm_additional_info)
		then pm_code = error_table_$smallarg;
	     end;

	go to EXIT;

dialup_flags:
     entry (pm_tt_name, pm_ppm_flag, pm_cpo_flag, pm_code);

	re_init_label = dialup_flags_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
dialup_flags_init:
	call initialize;
	call find_tte;

	pm_ppm_flag = tte.flags.print_preaccess_message;
	pm_cpo_flag = tte.flags.conditional_printer_off;

	go to EXIT;





default_term_type:
     entry (pm_line_type, pm_baud, pm_tt_name, pm_code);

	re_init_label = default_term_type_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
default_term_type_init:
	call initialize;

	pm_tt_name = "";
	if ttt.default_type_offset = 0		/* no default type table */
	then return;
	dfttp = ptr (tttp, ttt.default_type_offset);

/* find matching line type and baud in default type table (0 => "match any") */
	do i = 1 to dftt.dft_count
	     while (
	     ^((dftte (i).line_type = 0 | dftte (i).line_type = pm_line_type)
	     & (dftte (i).baud = 0 | dftte (i).baud = pm_baud)));
	end;
	if i <= dftt.dft_count			/* found a match */
	then pm_tt_name = ttt.tt_entries (dftte (i).term_type_index).name;

	go to EXIT;

decode_answerback:
     entry (pm_answerback, pm_line_type, pm_tt_name, pm_id, pm_code);

	pm_tt_name, pm_id = "";
	if pm_line_type > 72
	then do;
		pm_code = error_table_$invalid_line_type;
		return;
	     end;

	re_init_label = decode_answerback_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
decode_answerback_init:
	call initialize;

	ab = translate (pm_answerback, capital_letters, small_letters);
						/* capitalize all letters */
	if length (ab) = 0
	then return;

	do next_offset = ttt.answerback_offset repeat answerback_entry.next while (next_offset ^= 0);
						/* search thru answerback entries */

	     answerback_entry_ptr = ptr (tttp, next_offset);
	     scanx = 1;				/* init scan index for answerback string */
	     save_id = "";				/* id is null until we discover otherwise */

	     do defx = 1 by 2 to def_string.length;	/* scan the answerback entry definition string */
		termp = addr (def_string.chars (defx)); /* get ptr to next term in definition string */
		key = term.key;			/*  get single-letter keyword symbol */
		value = term.value;			/* get argument to keyword */

		if key = "k"			/* "skip" keyword */
		then do;
			scanx = scanx + value;
			if scanx < 1 | scanx > length (ab)
			then go to next_ab_entry;
			go to next_term;
		     end;

		if scanx > length (ab)		/* end of answerback string */
		then go to next_ab_entry;

		if key = "m"			/* "match" keyword */
		then do;
			if value <= 0
			then do;
				if value = -1	/* match a letter */
				then do;
					if index (capital_letters, substr (ab, scanx, 1)) = 0
					then go to next_ab_entry;
				     end;
				else if value = -2	/* match a digit */
				then do;
					if index (digits, substr (ab, scanx, 1)) = 0
					then go to next_ab_entry;
				     end;
				else go to bad_data;/* illegal value */
				scanx = scanx + 1;
			     end;
			else do;			/* match string */
				if scanx + value - 1 > length (ab)
						/* match string exceeds answerback string */
				then go to next_ab_entry;
				if substr (ab, scanx, value) ^= term.string
				then go to next_ab_entry;
				scanx = scanx + value;
				defx = defx + value;
			     end;
		     end;

		else if key = "s"			/* "search" keyword */
		then do;
			if value <= 0
			then do;
				if value = -1	/* search for a letter */
				then do;
					i = search (substr (ab, scanx), capital_letters);
					if i = 0
					then go to next_ab_entry;
				     end;
				else if value = -2	/* search for a digit */
				then do;
					i = search (substr (ab, scanx), digits);
					if i = 0
					then go to next_ab_entry;
				     end;
				else go to bad_data;/* illegal value */
				scanx = scanx + i;
			     end;
			else do;			/* search for string */
				i = index (substr (ab, scanx), term.string);
				if i = 0
				then go to next_ab_entry;
				scanx = scanx + i + value - 1;
				defx = defx + value;
			     end;
		     end;

		else if key = "i"			/* "id" keyword */
		then do;
			if value = 0		/* rest of answerback is id */
			then do;
				save_id = substr (pm_answerback, scanx);
						/* ID as it actually appeared */
				scanx = length (ab) + 1;
			     end;
			else if value >= 1 & value <= 4
			then do;			/* next 1 to 4 chars of answerback is id */
				if scanx + value - 1 > length (ab)
				then go to next_ab_entry;
				save_id = substr (pm_answerback, scanx, value);
				scanx = scanx + value;
			     end;
			else go to bad_data;	/* illegal value */
		     end;

		else do;				/* unknown key */
bad_data:
			pm_code = error_table_$improper_data_format;
			return;
		     end;

next_term:
	     end;					/* Come here if a matching answerback entry was found */

	     if answerback_entry.term_type_index ^= 0	/* terminal type indicated */
	     then do;
		     ttep = addr (ttt.tt_entries (answerback_entry.term_type_index));
		     if pm_line_type > 0		/* don't ignore line type */
		     then if ^substr (tte.line_types, pm_line_type, 1)
			then go to next_ab_entry;
		     pm_tt_name = tte.name;		/* set terminal type indicated by answerback */
		end;

	     pm_id = translate (save_id, (32)" ", substr (collate (),1,32));
						/* return id without trailing control chars */

	     return;

next_ab_entry:
	end;

	go to EXIT;

encode_type:
     entry (pm_tt_name, pm_coded_type, pm_code);

	re_init_label = encode_type_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
encode_type_init:
	call initialize;
	call find_tte;

	pm_coded_type = tte.coded_type;

	go to EXIT;





decode_type:
     entry (pm_coded_type, pm_tt_name, pm_code);

	re_init_label = decode_type_init;
	on seg_fault_error, out_of_bounds go to RE_INIT;
decode_type_init:
	call initialize;

	do i = 1 to ttt.n_tt_entries;
	     ttep = addr (ttt.tt_entries (i));
	     if tte.coded_type = pm_coded_type
	     then do;
		     pm_tt_name = tte.name;
		     return;
		end;
	end;

	pm_tt_name = "";

	go to EXIT;

set_ttt_path:
     entry options (variable);			/* command to change ttt pathname */

	my_name = "set_ttt_path";
	call cu_$arg_count (i);
	if i ^= 1
	then do;
		call com_err_$suppress_name (error_table_$wrong_no_of_args, my_name,
		     "Usage:  set_ttt_path [path | -reset]");
		return;
	     end;
	call cu_$arg_ptr (1, stringp, stringl, (0));

	if substr (based_string, 1, 1) = "-"
	then if based_string = "-reset" | based_string = "-rs"
	     then do;
		     dname = ">system_control_1";
		     ename = "ttt";
		end;
	     else do;
		     call com_err_ (error_table_$badopt, my_name, based_string);
		     return;
		end;
	else do;					/* not control arg, its a PATH */
		call expand_pathname_ (based_string, dname, ename, ec);
		if ec ^= 0
		then do;
			call com_err_ (ec, my_name, based_string);
			return;
		     end;
	     end;

	call initiate_file_ (dname, ename, R_ACCESS, tttp, (0), ec);
	if tttp = null
	then do;
		call com_err_ (ec, my_name, "^a>^a", dname, ename);
		return;
	     end;

/* Make a plausibility check */

	if ttt.version ^= TTT_version_4
          then do;
	          call com_err_(error_table_$unimplemented_version, my_name, "^/^a>^a is version ^d; the current version is ^d.^/Please recompile your ttf.^/", dname, ename, ttt.version, TTT_version_4);
		return;
                end;

          else if n_tt_entries ^> 0 | total_ttt_size ^> n_tt_entries
	then do;
		call com_err_ (error_table_$improper_data_format, my_name, "^/^a>^a does not appear to be a valid TTT",
		     dname, ename);
		return;
	     end;


	if saved_tttp ^= null
	then call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
	saved_tttp = tttp;
	saved_dname = dname;
	saved_ename = ename;

	return;



print_ttt_path:
     entry;

	call ioa_ ("^a>^a", saved_dname, saved_ename);
	return;


ttt_path:
     entry (pm_dname, pm_ename);

	pm_dname = saved_dname;
	pm_ename = saved_ename;

	return;

EXIT:
	if tttp ^= null
	then if ttt.last_install_time ^= saved_install_time
	     then go to re_init_label;		/* Try Again */

	return;

/* Come here on seg_fault_error, out_of_bounds.  Assume that a new TTT was installed. */

RE_INIT:
	if saved_tttp ^= null
	then do;
		call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
		saved_tttp = null;			/* forget the old TTT */
	     end;

	revert seg_fault_error, out_of_bounds;		/* ya only go 'round once */
	go to re_init_label;			/* try again */





reset:
     entry;					/* called BEFORE replacing the TTT */

	if saved_tttp ^= null
	then do;
		call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
		saved_tttp = null;
		return;
	     end;

initialize:
     proc;					/* gets ptr to the TTT */

	if saved_tttp = null
	then do;
		call initiate_file_ (saved_dname, saved_ename, R_ACCESS, saved_tttp, (0), ec);
		if saved_tttp = null
		then go to EXIT;
	     end;

	tttp = saved_tttp;
	pm_code = 0;

	if ttt.version ^= TTT_version_4
	then do;
		saved_tttp = null;
		pm_code = error_table_$unimplemented_version;
		go to EXIT;
	     end;
	saved_install_time = ttt.last_install_time;	/* p clock */
     end initialize;

find_tte:
     proc;					/* gets a ptr to the tte specified by tt_name */

	dcl     ttex		   fixed bin;

	do ttex = 1 to ttt.n_tt_entries;
	     ttep = addr (ttt.tt_entries (ttex));
	     if tte.name = pm_tt_name			/* found it */
	     then return;
	end;

	pm_code = error_table_$no_term_type;
	go to EXIT;

     end find_tte;

AREA_FULL:
     procedure;
	pm_code = error_table_$noalloc;
	tttp = null;				/* dont bother with change time */
	go to EXIT;
     end AREA_FULL;

%include access_mode_values;

%include author_dcl;

%include dsatm_attn_fcn_info;

%include dsatm_negotiate_info;

%include function_key_data;

%include terminal_type_data;
dcl  ttd_version_2 fixed bin int static options (constant) init (2);

%include terminate_file;

%include ttt;

%include tty_video_tables;

     end ttt_info_;
