/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and readability and changed errname to use a caller
     supplied value instead of "binder_".
                                                   END HISTORY COMMENTS */

/* format: style3,^indnoniterdo */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/********************************************************************/
/*							*/
/*	Name:	decode_link_				*/
/*	Input:	structure_ptr				*/
/*	Function:	given the offset of a link in the linkage section	*/
/*		(from loffset in ext), extract the following	*/
/*		information from the link:			*/
/*		  Tm modifier	- from tag field of link	*/
/*				  stored in ext.link_tm	*/
/*		  Td modifier	- from tag field of link	*/
/*				  store in ext.link_td	*/
/*		  expression value	- from expression word in	*/
/*				  definition section	*/
/*				  store in ext.expr		*/
/*		  link type	- from type-pair in defn scn	*/
/*				  store in ext.type		*/
/*		  trap pointer	- from type-pair in defn scn	*/
/*				  store in ext.trap		*/
/*		  segname		- from segname ACC string in	*/
/*				  defn scn or decoded from	*/
/*				  type and segpointer:	*/
/*				    tp 1, sp 0 = *text	*/
/*				    tp 1, sp 1 = *link	*/
/*				    tp 1, sp 2 = *symbol	*/
/*				    tp 1, sp 4 = *static	*/
/*				    tp 5, sp 5 = *system	*/
/*				    tp 5 = component filename	*/
/*				    other = segname ACC str	*/
/*				  store in ext.segname	*/
/*		  entryname	- from entryname ACC string	*/
/*				  for type 4, 5, 6 links only	*/
/*				  store in ext.entryname	*/
/*		The flag ext.dont_prelink is also set for *system	*/
/*		links since they must remain external		*/
/*	Output:	code					*/
/*							*/
/********************************************************************/

/* Designed and coded by Michael J. Spier February 13,1971 */
/* modified 6/20/75 by M. Weaver for separate static */
/* modified 10/22/76 by M. Weaver for *system */


decode_link_:
     procedure (structure_ptr, code);

declare	structure_ptr	pointer,
	code		bit (1) aligned;



/* DECLARATION OF EXTERNAL ENTRIES */

declare	com_err_		external entry options (variable);

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	errname		char (16) aligned internal static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, type)		fixed bin (18);
declare	(extp, defptr)	pointer;
declare	(linkp, expp, typep, ACCp)
			pointer;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bit, index, substr, unspec)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 ext		aligned based (extp) like external_ref;


declare	1 link		aligned like object_link based (linkp);
declare	1 exp		aligned like exp_word based (expp);
declare	1 loffset_overlay	aligned based (addr (ext.loffset)),
	  2 dum		bit (35) unaligned,
	  2 odd		bit (1) unaligned;
declare	1 type_pr		aligned like type_pair based (typep);
declare	1 segname_ACC	aligned based (addr (ext.segname)) like acc_string;
declare	1 entryname_ACC	aligned based (addr (ext.entryname)) like acc_string;
declare	1 ACC		aligned like acc_string based (ACCp);
declare	segname_overlay	bit (297) aligned based (addr (ext.segname));
declare	entryname_overlay	bit (2313) aligned based (addr (ext.entryname));


/*  */

%include object_link_dcls;

/*  */

%include definition_dcls;

/*  */

%include extref;

/*  */

%include bindext;

/*  */

%include comptbl;

/*  */


	extp = structure_ptr;			/* copy pointer to external ref structure */
	ctep = ext.compent_ptr;			/* copy argument into stack for efficiency */
	defptr = comp.cdefp;			/* copy pointer to component object's def section */
	code = "0"b;				/* reset return value */



	if loffset_overlay.odd
	then /* compiler error,should refer to an even location */
	     do;
	     call com_err_ (0, errname, "^a|^o of ^a referencing odd location in linkage section.", ext.section,
		ext.offset, comp.filename);
	     goto error_skip;
	end;
	linkp = addrel (comp.clnkp, ext.loffset);	/* pointer to link fault */
	if link.tag ^= "100110"b
	then do;
	     call com_err_ (0, errname, "link|^o referenced by ^a|^o of ^a not linkfault (46)8.", ext.loffset,
		ext.section, ext.offset, comp.filename);
	     goto error_skip;
	end;
	ext.link_tm = substr (link.modifier, 1, 2);	/* get link's TM modifier */
	ext.link_td = substr (link.modifier, 3, 4);	/* get link's TD modifier */
	segname_overlay, entryname_overlay = "0"b;	/* clear ACC strings */
	ext.slng, ext.elng = 0;			/* and their respective lengths */
	expp = addrel (defptr, link.expression_relp);	/* get pointer to expression word */
	ext.expr = unspec (exp.expression);		/* get expression  value */
	typep = addrel (defptr, exp.type_relp);		/* get pointer to type-pair */
	ext.type = bit (type_pr.type);		/* get type */
	ext.trap = bit (type_pr.trap_relp);		/* and trap pointer */
	type = type_pr.type;
	if type ^= 3
	then if type ^= 4
	     then if type ^= 1
		then if type ^= 5
		     then if type ^= 6
			then do;
			     call com_err_ (0, errname,
				"External link type ^o in link|^o of ^a; not handled by current version.", type,
				ext.loffset, comp.filename);
			     goto error_skip;
			end;
	ext.code15 = bit (type_pr.segname_relp);	/* copy types 1 & 5 segbase code */
	i = type_pr.segname_relp;			/* convert segpointer to fix for type-1 link */
	if type = 1
	then /*  *|expr,m  link */
	     do;
	     segname_ACC.count = 5;			/* preset char count */
	     if i = 0
	     then segname_ACC.string = "*text";
	     else if i = 1
	     then segname_ACC.string = "*link";
	     else if i = 2
	     then do;
		segname_ACC.count = 7;
		segname_ACC.string = "*symbol";
	     end;
	     else if i = 4
	     then do;
		segname_ACC.count = 7;
		segname_ACC.string = "*static";
	     end;
	     else do;
		call com_err_ (0, errname, "type-1 link at link|^o of ^a has illegal seg-ptr value ^o", ext.loffset,
		     comp.filename, i);
		goto error_skip;
	     end;
	     ext.slng = segname_ACC.count + 1;
	     goto extract_symbol;
	end;
	if type = 5
	then /*  *|symbol+exp,m link */
	     do;
	     if i = 5
	     then do;				/* *system, not ordinary type 5 */
		segname_ACC.count = 7;
		segname_ACC.string = "*system";
	     end;
	     else do;				/* make segname = filename  */
		segname_ACC.count = index (comp.filename, " ") - 1;
		segname_ACC.string = substr (comp.filename, 1, segname_ACC.count);
	     end;
	     ext.slng = segname_ACC.count + 1;		/* length of entire ACC string (incl. count) */
	     goto extract_symbol;
	end;					/* get pointer to segment name */
	ACCp = addrel (defptr, type_pr.segname_relp);
	segname_ACC.count = ACC.count;		/* get ACC string length */
	if segname_ACC.count > 32
	then /* string too long */
	     do;
	     call com_err_ (0, errname, "external segname ^a longer than 32 chars; segname truncated.", ACC.string);
	     segname_ACC.count = 32;
	end;
	ext.slng = segname_ACC.count + 1;		/* store length in structure */
						/* and copy string into structure */
	segname_ACC.string = substr (ACC.string, 1, segname_ACC.count);
extract_symbol:
	if type = 4 | type = 5 | type = 6
	then /* there is an entryname */
	     do;
	     ACCp = addrel (defptr, type_pr.offsetname_relp);
	     entryname_ACC.count = ACC.count;
	     if entryname_ACC.count > 256
	     then do;
		call com_err_ (0, errname, "external entryname ^a longer than 256 chars; entryname truncated.",
		     ACC.string);
		entryname_ACC.count = 256;
	     end;
	     ext.elng = entryname_ACC.count + 1;
	     entryname_ACC.string = substr (ACC.string, 1, entryname_ACC.count);
	end;					/* *system must be external */
	if ((type = 5) & (i = 5))
	then ext.dont_prelink = "1"b;

	return;

error_skip:
	code = "1"b;				/* error occurred, return code */
	return;

init:
     entry;					/* set error message caller name */
	if bx_$debug = 1
	then errname = "decode_link_";
	else errname = bx_$caller;

	return;

     end decode_link_;
