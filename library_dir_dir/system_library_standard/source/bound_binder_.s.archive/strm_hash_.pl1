/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1978 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation.
                                                   END HISTORY COMMENTS */


/* External procedures to implement hash-coded lookup of
   the STRINGMAP table (strm).

   Sept 1978, David Spector. */

/* format: style3,^indnoniterdo */

make_entry:
     procedure (new_string, entry_nr);

/**********************************************************************/
/*							*/
/*	Name:	strm_hash_$make_entry			*/
/*	Input:	new_string, entry_nr			*/
/*	Function:	stores a new entry into the strm hash table.	*/
/*		Given a string (in ACC format) and the entry	*/
/*		number in the hash table, calculate the hash	*/
/*		function to determine the bucket and thread the	*/
/*		new entry into the appropriate bucket.		*/
/*		Each entry is a bit (18) relative offset in the	*/
/*		definition section of the new object segment	*/
/*		of a string (ACC format) being used in some	*/
/*		definition. The hash table (strm.hash_table)	*/
/*		contains fixed bin(17) array subscripts which	*/
/*		point to the first strm.entry in the particular	*/
/*		hash bucket of entries.  Empty buckets are	*/
/*		represented by zeros in the hash table.  Each	*/
/*		bucket contains a list of entries; the forward	*/
/*		thread for the list is an array subscript	*/
/*		(fixed bin(17)) in strm.entry.hash_thread for	*/
/*		each entry in the bucket.  The end of the list	*/
/*		(or chain) of entries is marked by a hash thread	*/
/*		of zero.					*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

declare	new_string	char (*);			/* new entry's string */
declare	trial_string	char (*);
declare	entry_nr		fixed binary (17);		/* array subscript (location) of new entry */

declare	hash_index	fixed binary (34);		/* array subscript of bucket in hash table */

declare	bx_$strmp		external ptr;		/* global base of strm */
declare	bx_$tdefp		external ptr;		/* global base of def section */

declare	p		ptr;
declare	defbase		ptr;

declare	(addrel, length, substr)
			builtin;

declare	acc_string	char (257) based;

%include bndtbl;

	strmp = bx_$strmp;				/* locate STRINGMAP table */
	call hash_code (new_string, hash_index);	/* hash code the string */
	strm.entry (entry_nr).hash_thread = strm.hash_table (hash_index);
						/* push new entry into hash-code bucket */
	strm.hash_table (hash_index) = entry_nr;
	return;

lookup:
     entry (trial_string, entry_nr);

/**********************************************************************/
/*							*/
/*	Name:	strm_hash_$lookup				*/
/*	Input:	trial_string				*/
/*	Function:	Given a string (trial_string) in ACC format,	*/
/*		compute the hash function on it, and compare the	*/
/*		trial string with each string in the bucket until	*/
/*		a match is found or the bucket is exhausted.  If	*/
/*		the string is found, return the array subscript	*/
/*		of the strm.entry.  If not found, return zero.	*/
/*	Output:	entry_nr					*/
/*							*/
/**********************************************************************/

	strmp = bx_$strmp;				/* locate STRINGMAP table */
	defbase = bx_$tdefp;			/* locate base of def section */
	call hash_code (trial_string, hash_index);	/* hash code the string */
	do entry_nr = strm.hash_table (hash_index) repeat strm.entry (entry_nr).hash_thread while (entry_nr ^= 0);
						/* search the hash-code bucket for the string */
	     p = addrel (defbase, strm.entry (entry_nr).map);
						/* locate strm string */
	     if substr (p -> acc_string, 1, length (trial_string)) = trial_string
	     then return;				/* success: entry_nr is non-zero */
	end;					/* continue scanning this bucket */
	return;					/* failure: entry_nr is zero */

hash_code:
     procedure (char_string, hash_index);

/**********************************************************************/
/*							*/
/*	Name:	hash_code					*/
/*	Input:	char_string				*/
/*	Function:	given a character string, calculates the hash	*/
/*		function and returns the array index of the first	*/
/*		strm hash_table entry in the resulting bucket.	*/
/*	Output:	hash_index				*/
/*							*/
/**********************************************************************/

declare	char_string	char (*);			/* input: string */
declare	hash_index	fixed binary (34);		/* output: subscript of hash bucket */

declare	pos		fixed binary;

declare	(bin, hbound, length, min, mod, unspec)
			builtin;

	hash_index = 0;
	do pos = 1 to min (length (char_string), 24);	/* prevent overflow of hash_index */
	     hash_index = 2 * hash_index + bin (unspec (substr (char_string, pos, 1)), 9);
	end;
	hash_index = mod (hash_index, hbound (strm.hash_table, 1) + 1);
	return;
     end;						/* end of hash_code */

     end;						/* end of make_entry */
