/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Changed errname to use caller supplied name instead of "binder_", improved
     documentation and readability, deleted obsolete nonstandard object
     support, and added code to create the link_regeneration_table.
  2) change(86-07-02,Elhard), approve(86-07-02,MCR7284),
     audit(86-07-23,JRGray), install(86-08-06,MR12.0-1119):
     Modified to not use segname definitions already in the component as search
     names for resolving intercomponent calls.
                                                   END HISTORY COMMENTS */

/**********************************************************************/
/*							*/
/*	Name:	dissect_object_				*/
/*	Input:	compent_ptr				*/
/*	Function:	breaks down the object segment specified by the	*/
/*		component table entry pointed to by compent and	*/
/*		fills in the rest of the component table entry.	*/
/*		This procedure is also responsible for the	*/
/*		following:				*/
/*		  1) copying the component's text section into	*/
/*		     the new object	segment, padding the end of	*/
/*		     the the previous text section if required	*/
/*		     to get the proper text section alignment,	*/
/*		     and calculating the new text section	*/
/*		     relocation counter.			*/
/*		  2) calculate the relocation counter for the	*/
/*		     internal static section and pad the static	*/
/*		     section of the previous component if reqd	*/
/*		     to align the current component's static	*/
/*		     section on the proper boundary.		*/
/*		  3) the segname table is updated to include the	*/
/*		     new component.				*/
/*		  4) copy the definition section into the insym	*/
/*		     table.				*/
/*		  5) determine the number of symbol blocks that	*/
/*		     are present in the object segment.		*/
/*		  6) allocate the link_regeneration_table for the	*/
/*		     component.				*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* Designed and initially coded by Michael J. Spier, August 20, 1970	*/
/* modified 75.06.20 by M. Weaver for separate static		*/

/* format: style3,^indnoniterdo */
dissect_object_:
     procedure (compent_ptr);

declare	compent_ptr	pointer;



/* DECLARATION OF EXTERNAL ENTRIES */

declare	decode_definition_$full
			external entry (pointer, pointer, pointer) returns (bit (1) aligned);
declare	object_info_$long	external entry (pointer, fixed bin (24), pointer, fixed bin (35));
declare	com_err_		external entry options (variable);
declare	ioa_		external entry options (variable);
declare	temp_mgr_$allocate	external entry (fixed bin);
declare	temp_mgr_$reserve	external entry (pointer);

/* DECLARATION OF EXTERNAL STATIC */

declare	error_table_$bad_segment
			external fixed bin (35);
declare	error_table_$unimplemented_version
			external fixed bin (35);

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	last_insym	pointer internal static initial (null);
declare	(text_relc, is_relc)
			fixed bin internal static initial (0);
declare	errname		char (16) aligned internal static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	i		fixed bin;
declare	(def_begin, def_offset, val, lng)
			fixed bin (18);
declare	code		fixed bin (35);
declare	(p, sblkp, ddp, oip)
			pointer;
declare	(defp, insymp, insymep)
			pointer;
declare	type_string	char (5) aligned;
declare	link_start	fixed bin (18) unsigned;
declare	link_end		fixed bin (18) unsigned;
declare	lrt_len		fixed bin;
declare	lrt_word_count	fixed bin;

declare	1 dd		aligned,			/* output structure for decode_definition_ */
	  2 next_def	pointer,
	  2 last_def	pointer,
	  2 block_ptr	pointer,
	  2 section	char (4) aligned,
	  2 value		fixed bin (18),
	  2 entrypoint	fixed bin,
	  2 symbol	char (256) aligned,
	  2 symbol_lng	fixed bin,		/* actual length of symbol */
	  2 flags,
	    3 new_format	bit (1) unaligned,
	    3 ignore	bit (1) unaligned,		/* def is to be ignored but will be regenerated */
	    3 entrypoint	bit (1) unaligned,		/* def is for entrypoint */
	    3 retain	bit (1) unaligned,
	    3 arg_count	bit (1) unaligned,		/* there is an arg count for entry */
	    3 descr_sw	bit (1) unaligned,		/* there are descriptors for entry */
	    3 unused	bit (13) unaligned,
	  2 n_args	fixed bin,		/* no of args entry expects */
	  2 descr_ptr	ptr;			/* ptr to array of rel ptrs to descriptors in def section */

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, divide, fixed, min, null, ptr, rel, substr, trunc)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 insyme		aligned like is based (insymep);
declare	1 symbol_acc	aligned based (addr (insyme.symbol)),
	  2 len		fixed bin (9) unsigned unaligned,
	  2 text		char (32 refer (symbol_acc.len)) unaligned;
declare	1 rhb		based aligned,
	  2 dum		bit (35) unaligned,
	  2 odd		bit (1) unaligned;		/* to determine if a value is even/odd */

declare	textsection	(lng) fixed bin based (p);

/*  */

%include bindext;

/*  */

%include comptbl;

/*  */

%include bndtbl;

/*  */

%include insym;

/*  */

declare	1 oi		aligned like object_info;

%include object_info;

/*  */

%include object_link_dcls;

/*  */

%include symbol_block;


%include pl1_symbol_block;


declare	1 firstref_block	aligned based,
	  2 version	fixed bin,
	  2 n_traps	fixed bin,
	  2 traps		(0 refer (firstref_block.n_traps), 2) bit (18) unaligned;

declare	1 lh		aligned based (oi.linkp),
	  2 defseg	fixed bin,		/* 0->defs in text, 16->defs in link  */
	  2 defptr	bit (18) unaligned,		/* offset of definition section */
	  2 first_reference bit (18) unaligned,		/* offset of first ref trap array */
	  2 fthread	pointer,			/* unused */
	  2 bthread	pointer,			/* unused */
	  2 link_begin	bit (18) unaligned,		/* offset in linkage section of linkage info */
	  2 block_lng	bit (18) unaligned,
	  2 dum2		bit (18) unaligned,
	  2 linkage_lng	bit (18) unaligned;



/*  */

	ctep = compent_ptr;				/* copy pointer to component table entry */
	sntp = bx_$sntp;				/* pointer to segname table */
	oip = addr (oi);				/* initialize */

	oi.version_number = object_info_version_2;
	call object_info_$long (comp.ctxtp, comp.cbitcount, addr (oi), code);
	if code ^= 0
	then do;					/* bad object segment */
faterr:
	     call com_err_ (code, errname, comp.filename);
	     bx_$fatal_error = 1;
	     return;
	end;

	if ^oi.format.standard
	then do;
	     code = error_table_$bad_segment;		/* don't process non-standard new objects */
	     go to faterr;				/* this is fatal */
	end;

	if oi.bmapp ^= null
	then do;					/* also a no-no */
	     call com_err_ (0, errname, "Component ^a has a break map.", comp.filename);
	     bx_$fatal_error = 1;
	     return;
	end;

	if ^oi.format.relocatable
	then do;
	     if oi.compiler = "binder  "
	     then type_string = "bound";
	     else type_string = "";
	     call com_err_ (0, errname, "Component ^a is a nonrelocatable ^a segment.", comp.filename, type_string);
	     bx_$fatal_error = 1;
	     return;				/*  don't generate all those name  conflict messages  */
	end;

/* find the number of links to determine the size of the linke_regeneration table */
/* and allocate it.							  */

	if oi.linkp -> virgin_linkage_header.defs_in_link = "010000"b
	then link_end = oi.linkp -> virgin_linkage_header.def_offset;
	else link_end = oi.linkp -> virgin_linkage_header.linkage_section_lng;

	if oi.linkp -> virgin_linkage_header.first_ref_relp ^= 0
	then link_end = min (link_end, oi.linkp -> virgin_linkage_header.first_ref_relp);

	link_start = oi.linkp -> virgin_linkage_header.link_begin;

	lrt_len = (link_end - link_start) * 0.5;	/* calculate number of links */
	lrt_word_count = trunc ((lrt_len + 1) * 0.5) + 2; /* calculate number of words reqd for table */
	call temp_mgr_$allocate (lrt_word_count);	/* allocate the table */
	lrtp, comp.clrtp = bx_$freep;
	call temp_mgr_$reserve (addrel (lrtp, lrt_word_count));

	lrt.count = lrt_len;			/* initialize lrt */
	lrt.start_offset = link_start;
	lrt.regenerated (*) = ""b;

	comp.clngt, val = oi.tlng;			/* get length of pure-text section */
	if addr (comp.clngt) -> rhb.odd
	then comp.cpadt = 1;			/* if text length odd number, pad text with one word */
	if oi.text_boundary ^= 2			/* text must sit on 4,8,16,64 boundary */
	then if comp.cindex ^= 1			/* and this is not first entry */
	     then do;
		i = oi.text_boundary;		/* copy for convenience */
		val = divide (text_relc + i - 1, i, 17, 0) * i;
						/* compute new base */
		i = val - text_relc;		/* get difference	*/
		if i > 0
		then /* there was a difference */
		     do;
		     p = bx_$ctp -> comp_tbl (comp.cindex - 1);
						/* get previous entry */
		     p -> comp.cpadt = p -> comp.cpadt + i;
						/* extend previous pad */
		     text_relc = val;		/* adjust new base address */
		end;
	     end;
	comp.crelt = text_relc;			/* get relocation counter value for this text section */
	i = comp.clngt + comp.cpadt;			/* compute effective length of text section */
	bx_$textlng, text_relc = text_relc + i;		/* compute relocation value for next text section */

	comp.cdefp = oi.defp;			/* pointer to definition section */
	comp.clngd = oi.dlng;			/* length of definition section */

	comp.csymp = oi.symbp;			/* pointer to symbol section */
	comp.clngs = oi.slng;			/* length of symbol section */
	comp.clngns = oi.default_truncate;		/* length of symbol section without relbits */
	comp.clngss = oi.optional_truncate;		/* length of symbol section without relbits or table */

/* if there is a symbol table and it is needed by v2pl1 io, we must make
   a note of it so that we will not delete it later */
	if oi.compiler = "v2pl1" | oi.compiler = "PL/I"	/* so far only compiler that can have this */
	then if oi.standard				/* only std objs have the special flags */
	     then if oi.symbp -> sb.area_ptr		/* there might be a symbol table */
		then if addrel (oi.symbp, oi.symbp -> sb.area_ptr) -> pl1_symbol_block.flags.io
		     then comp.io_table = 1;		/* table is needed by runtime io */

	comp.clngi = oi.ilng;			/* length of internal static */
	if addr (comp.clngi) -> rhb.odd
	then comp.cpadi = 1;			/* if length of int static odd number, then pad */
	if oi.static_boundary ^= 2
	then /* if static must start at mod 4,8,16,64 */
	     if comp.cindex ^= 1
	     then /* if this is not first entry */
		do;
		i = oi.static_boundary;		/* copy for convenience */
		val = divide (is_relc + i - 1, i, 17, 0) * i;
		i = val - is_relc;			/* get difference */
		if i > 0
		then do;
		     p = bx_$ctp -> comp_tbl (comp.cindex - 1);
						/* pointer to previous entry */
		     p -> comp.cpadi = p -> comp.cpadi + i;
		     is_relc = is_relc + i;
		end;
	     end;
	comp.creli = is_relc;			/* get relocation counter value for this internal static */
	i = comp.clngi + comp.cpadi;			/* get effective length of static */
	bx_$tintlng, is_relc = is_relc + i;
	comp.clnkp = oi.linkp;			/* pointer to linkage section header */
	comp.cstatp = oi.statp;
	comp.separate_static = 0;			/* initialize */
	if oi.ilng > 0
	then do;					/* don't worry about 0 length static */
	     if oi.format.separate_static
	     then do;
		bx_$has_sep_stat = 1;
		comp.separate_static = 1;		/* this variable is needed by rebuild_object_ */
	     end;
	     else bx_$has_comb_stat = 1;
	end;
	bx_$maxlinklng = bx_$maxlinklng + oi.llng + (comp.separate_static * comp.clngi);
						/*  vble used to allocate space for both  stat + link */
	bx_$maxdeflng = bx_$maxdeflng + comp.clngd;	/* compute size of temporary for new linkage section */

	comp.crltp = oi.rel_text;
	comp.crllp = oi.rel_link;
	comp.crlsp = oi.rel_symbol;			/* pointers to relocation information */

	comp.standard_object = fixed (oi.format.standard, 1);
						/* copy object format indicator */

	dd.symbol = comp.filename;			/* put in structure for compatibility */
	do i = 32 to 1 by -1 while (substr (comp.filename, i, 1) = " ");
	end;
	dd.symbol_lng = i;				/* fill in length too */
	call update_segname_table;			/* put name in segment name table */

/* scan definition section to buildup insym entry for this object segment */

	insymp, comp.insymentp = bx_$freep;		/* get pointer to new area for insym entry */
	if last_insym ^= null
	then last_insym -> insym.thread = insymp;	/* thread insym entries together */
	else bx_$isp = insymp;			/* remember beginning of insym-table */
	last_insym = insymp;			/* remember pointer to current entry */
	insymp -> insym.thread = null;		/* indicate this last entry */
	defp, dd.next_def = oi.defp;			/* set up definition search */
	def_begin = bin (rel (defp), 18);
	ddp = addr (dd);				/* initialize before loop */

follow_defs:					/* get offset of next def rel to defp */
	def_offset = bin (rel (dd.next_def), 18) - def_begin;
	if decode_definition_$full (dd.next_def, ddp, oip) = "1"b
	then /* get next definition */
	     do;					/* make a last null entry for type 3 links */
	     insymp -> insym.n_insyms, i = insymp -> insym.n_insyms + 1;
	     insymep = addr (insymp -> insym.entry (i));
	     insyme.null_entry = "1"b;		/* set null entry indicator */
	     goto identify_format;
	end;

	if dd.section = "segn"
	then goto follow_defs;

	insymp -> insym.n_insyms, i = insymp -> insym.n_insyms + 1;
						/* get current insym-table index */
	insymep = addr (insymp -> insym.entry (i));	/* and get pointer to next entry */
	insyme.value = bit (bin (dd.value, 18), 18);
	if dd.section = "link"
	then insyme.class = "000000000000000001"b;
	else if dd.section = "symb"
	then insyme.class = "000000000000000010"b;
	else if dd.section = "stat"
	then insyme.class = "000000000000000100"b;
	symbol_acc.len = dd.symbol_lng;		/* get ACC length */
	symbol_acc.text = substr (dd.symbol, 1, dd.symbol_lng);
	insyme.lng = symbol_lng + 1;
	insyme.entrypoint = dd.flags.entrypoint;
	insyme.ignore = dd.flags.ignore;		/* def is probably for unofficial entryname */
	insyme.retain_flag = dd.flags.retain;
	insyme.def_offset = def_offset;		/* keep track of loc so we can relocate later */
	insyme.nargs = dd.n_args;
	insyme.descr_ptr = dd.descr_ptr;		/* get ptr to descr ptr list */
	insyme.has_descr = dd.flags.descr_sw;		/* copy switch indicating valid descriptors */
	goto follow_defs;

identify_format:
	comp.compiler = oi.compiler;			/* get compiler name */
	if comp.standard_object = 1
	then do;
standard_format:
	     comp.format = "standard";
	     if lh.first_reference
	     then do;				/* have some traps to regenerate */
		comp.cfrtp = addrel (oi.linkp, lh.first_reference);
		if comp.cfrtp -> firstref_block.version ^= 1
		then do;
		     call com_err_ (error_table_$unimplemented_version, errname,
			"A version ^d trap on first reference encountered.", comp.cfrtp -> firstref_block.version);
		     bx_$fatal_error = 1;
		end;
		bx_$n_firstrefs = bx_$n_firstrefs + comp.cfrtp -> firstref_block.n_traps;
	     end;
	     else comp.cfrtp = null;
	     if oi.format.procedure
	     then bx_$bproc = 1;			/* for obj map--bound seg is part proc */
	     go to block_number;			/* anything else will turn off standard flag */
	end;
	else do;
	     call com_err_ (0, errname, "object ^a is not a standard object segment", comp.filename);
	     bx_$fatal_error = 1;
	end;

	bx_$standard = 0;				/* at least one component is non-standard */

/* find number of symbol blocks this component has */

block_number:
	comp.n_sym_blks = 1;			/* object has to have at least 1 */
	sblkp = oi.symbp;				/* start with first block and thread */

block_loop:
	if sb.next_block = "0"b
	then go to return;				/* no more blocks */
	sblkp = addrel (oi.symbp, sb.next_block);	/* get ptr to next block */
	comp.n_sym_blks = comp.n_sym_blks + 1;		/* found another one */
	go to block_loop;				/* see if there are any more */

return:
	call temp_mgr_$reserve (addr (insymp -> insym.entry (insymp -> insym.n_insyms + 1)));
						/* reserve area allocated for insym table */

/* now copy text section into new bound object */

	p = ptr (bx_$temp_bsegp, comp.crelt);		/* pointer to new text location */
	lng = comp.clngt;
	p -> textsection = oi.textp -> textsection;	/* and copy the stuff */

	return;


init:
     entry;

/**********************************************************************/
/*							*/
/*	Name:	dissect_object_$init			*/
/*	Input:	none					*/
/*	Function:	initializes the static variables used by dissect	*/
/*		object prior to the first invocation.  The text	*/
/*		and static section relocation counters are	*/
/*		cleared, and clear various external static flags	*/
/*		and counters.				*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

	last_insym = null;				/* initialize INSYM thread */
	text_relc, is_relc = 0;
	bx_$maxlinklng = 128;			/* give it a small margin of safety */
	bx_$n_firstrefs = 0;			/* so far, seen none */
	bx_$bproc = 0;				/* turn on if any component is a proc */
	bx_$standard = 1;				/* assume standard output; turn off if any component is not */
	bx_$has_sep_stat, bx_$has_comb_stat = 0;	/* will count  only nonzero length static */
	if bx_$debug = 1
	then errname = "dissect_object_";
	else errname = bx_$caller;
	return;


/*  */

update_segname_table:
     procedure;

declare	i		fixed bin;
declare	sntep		ptr;
declare	val		fixed bin;
declare	acc_actual	char (33) aligned;
declare	acc_overlay	bit (297) based (addr (acc_actual));
declare	acc_str		char (val) based (addr (acc_actual));
declare	01 acc		aligned based (addr (acc_actual)),
	  02 len		fixed bin (9) unsigned unaligned,
	  02 text		char (32 refer (acc.len)) unaligned;
declare	01 snte		aligned based (sntep) like seg;

	val = symbol_lng;
	if symbol_lng > 32
	then do;					/* not acceptable for segnames */
	     call ioa_ (
		"Warning: Segment name ^a^/in definitions for component ^a^/is being truncated to 32 characters.",
		dd.symbol, comp.filename);
	     val = 32;
	end;
	acc_overlay = "0"b;				/* pad ACC temporary with zeroes */
	acc.len = val;
	acc.text = substr (dd.symbol, 1, val);

	val = val + 1;				/* adjust length to entire ACC string */
	do i = 1 to snt.n_names;			/* lookup segment name table */
	     sntep = addr (snt.entry (i));
	     if acc_str = substr (snte.name, 1, val)
	     then do;
		if snte.comp = ctep
		then return;			/* OK, its same component */
		call com_err_ (0, errname, "Segment name ^a for component ^a^/^-already used for component ^a",
		     dd.symbol, comp.filename, snte.comp -> comp.filename);
		bx_$fatal_error = 1;
		return;
	     end;
	end;
	snt.n_names, i = snt.n_names + 1;
	if i > snt.max_size
	then do;
	     call com_err_ (0, errname, "Segname table overflow; please contact maintenance");
	     snt.n_names = 1;
	     bx_$fatal_error = 1;
	     return;
	end;
	sntep = addr (snt.entry (i));			/* pointer to new entry */
	substr (snte.name, 1, val) = acc_str;
	snte.lng = val;
	snte.comp = ctep;

     end update_segname_table;


     end dissect_object_;
