/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation, removed red/black shifts, changed errname to use
     the caller-supplied name instead of "binder_", removed obsolete
     nonstandard object support, modified to update the link_regeneration_table
     with a flag ("777777"b3) to indicate internal link resolution.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/**********************************************************************/
/*							*/
/*	Name:	int_link_					*/
/*	Input:	argument_pointer				*/
/*	Function:	given a pointer to an external_ref structure	*/
/*		(argument_pointer), determine whether the target	*/
/*		of the reference is in a component of the bound	*/
/*		object segment and perform the pre-linking.  The	*/
/*		determination is done in the following manner:	*/
/*		  -- if the dont_prelink flag is on in the	*/
/*		     external_ref structure, just return since	*/
/*		     this must remain external.		*/
/*		  -- for type 3, 4, 5, or 6 links, determine	*/
/*		     whether the entryname is in the segname	*/
/*		     table (type 1 have no segname, they are	*/
/*		     self-references).  If the component is not	*/
/*		     found an external link must be regenerated.	*/
/*		  -- for type 4, 5, or 6 links, scan the insym	*/
/*		     list for the target component to find the	*/
/*		     target definition (type 1 and 3 links do not	*/
/*		     refer to a definition but to the base of a	*/
/*		     section/component). If the definition is not	*/
/*		     found, display a message indicating that the	*/
/*		     target could not be found and enter the name	*/
/*		     into the oddname table to prevent duplicate	*/
/*		     messages.				*/
/*		  -- if the reference is a type 1 or type 5 ref	*/
/*		     to the static section and we have a separate	*/
/*		     static section, generate an external link	*/
/*		     since we don't know where the static section	*/
/*		     will be.				*/
/*		  -- if the reference is a type 1 reference to	*/
/*		     the static section, relocate the reference,	*/
/*		     adjust the instruction, and return.	*/
/*		  -- if the reference is a type 1 link to the	*/
/*		     text section, relocate it, patch the	*/
/*		     instruction and return.			*/
/*		  -- if the reference is a type 1 link to a	*/
/*		     different section, create a repatch table	*/
/*		     entry for it to be filled in later since we	*/
/*		     don't know where the other stuff will be,	*/
/*		     patch the instruction and return.		*/
/*		  -- if the target of the link is to the static	*/
/*		     section of another component, we transform	*/
/*		     the link into a type 1 link to *static by	*/
/*		     adjusting the external_ref structure and	*/
/*		     then returning so that the call to ext_link_	*/
/*		     will generate the type 1 link.		*/
/*		  -- if the link has an indirect modifier, and	*/
/*		     the compiler is "PASCAL", and the target of	*/
/*		     the link refers to the linkage section, then	*/
/*		     we have an indirect reference to a link in	*/
/*		     another component.  This is resolved by	*/
/*		     removing the indirection and changing the	*/
/*		     instruction to refer directly to the target	*/
/*		     link.  We then call int_link_ recursively	*/
/*		     to try to resolve that link internally.  If	*/
/*		     that fails, we call ext_link_ to generate	*/
/*		     it externally.				*/
/*		  -- if the links has a modifier and the	*/
/*		     instruction has other than a simple	*/
/*		     indirection modifier, then generate an	*/
/*		     external link and print a message indicating	*/
/*		     that this link cannot be resolved internally	*/
/*		  -- now the link is resolved depending on the	*/
/*		     target section of the referenced definition.	*/
/*		     The following procedures are used for the	*/
/*		     different sections:			*/
/*		       -- Text section			*/
/*			The definition value is relocated, the	*/
/*			instruction word is patched, and the	*/
/*			modifier from the link is copied into	*/
/*			the instruction.			*/
/*		       -- Linkage section			*/
/*			If the reference is within the static	*/
/*			storage portion of the linkage section,	*/
/*			(ie. an ALM segdef), the definition	*/
/*			value is relocated, the instruction	*/
/*			word is patched, and the modifier from	*/
/*			the link copied into the instruction	*/
/*			modifier.  Otherwise an error message	*/
/*			is printed indicating that an illegal	*/
/*			sequence into the linkage section was	*/
/*			found.				*/
/*		       --	Symbol section			*/
/*			The symbol relocation is calculated and	*/
/*			a repatch table entry for the halfword	*/
/*			is generated and the instruction is	*/
/*			patched and the modifier copied.	*/
/*		       -- Static section			*/
/*		       	Since by this point we know we are not	*/
/*			creating a separate static section, we	*/
/*			adjust the static section reference for	*/
/*			the linkage header, and then treat as a	*/
/*			segdef in the linkage section.	*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* Designed and initially coded by Michael J. Spier, October 6, 1970	*/
/* modified June, July 1975 by M. Weaver for separate static */
/* modified 9/78 by David Spector for hash coding "snt" */
/* modified Dec 78 by David Spector to make repatch table automatically extensible */

/* modified Oct 80 by JMAthane to allow relocation of reference to PASCAL REF variables
   and internal text references through link section */
/* modified October 1983 by Melanie Weaver to fix *text relocation and add error message to above */

int_link_:
     procedure (argument_pointer, result);

declare	argument_pointer	pointer,
	result		bit (1) aligned;


/* DECLARATION OF EXTERNAL SYMBOLS */

declare	com_err_		external entry options (variable);
declare	ioa_		external entry options (variable);
declare	temp_mgr_$allocate	ext entry (fixed bin);
declare	temp_mgr_$reserve	ext entry (ptr);
dcl	ext_link_		entry (ptr);
dcl	decode_link_	entry (ptr) returns (bit (1));

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	(text_relocation, symbol_relocation)
			fixed bin internal static;
declare	errname		char (16) aligned internal static;
declare	internally_resolved bit (18) static options (constant) init ("777777"b3);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, val, type, ndefs, class, toffset, value, expression, link_modifier, int_limit)
			fixed bin (18);
declare	hash_index	fixed bin (34);
declare	hash_ptr		ptr;
declare	pos		fixed bin;
declare	wnpt		fixed bin;
declare	lrt_index		fixed bin;
declare	force_retain	bit (1) aligned;
declare	(p, refp, ap, ip, dp, targp)
			pointer;
declare	modp		pointer;
declare	string		char (33) aligned;
declare	wsegname		char (32) aligned;
declare	wentryname	char (256) aligned;
declare	oddname		char (65) aligned;
declare	estring		char (257) aligned based (addr (ebit));
declare	ebit		bit (2340) aligned init ("0"b);
						/* will be acc string */
dcl	my_result		bit (1) aligned;
dcl	1 my_ext		aligned like external_ref;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, fixed, hbound, min, mod, null, rel, substr, unspec)
			builtin;
declare	size		builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 ext		aligned based (ap) like external_ref;
declare	1 insyme		aligned based (dp) like is;
declare	1 word		aligned based,
	  2 lhe18		bit (18) unaligned,
	  2 rhe18		bit (18) unaligned;
declare	1 instr		aligned based,
	  2 dum1		bit (3) unaligned,
	  2 lhe15		bit (15) unaligned,
	  2 op_code	bit (9) unaligned,
	  2 dum2		bit (2) unaligned,
	  2 bit29		bit (1) unaligned,
	  2 modifier	bit (6) unaligned;
declare	1 modifier_overlay	aligned based (modp),
	  2 dum		bit (30) unaligned,
	  2 tm		bit (2) unaligned,
	  2 td		bit (4) unaligned;
declare	1 b5		aligned based (p),
	  2 dum		bit (21) unaligned,
	  2 rhe15		bit (15) unaligned;


/*  */
%include extref;

/*  */
%include bindext;

/*  */
%include comptbl;

/*  */
%include bndtbl;

/*  */
%include insym;

/*  */


	ctp = bx_$ctp;
	sntp = bx_$sntp;
	ap = argument_pointer;			/* copy argument into stack */
	result = "0"b;				/* preset return argument */
	if ext.dont_prelink = "1"b
	then return;				/* ******* */
	p = ext.compent_ptr -> comp.insymentp;		/* pointer to referencing object's definitions */
	force_retain = "0"b;
	if p -> insym.global_nolink = "1"b
	then force_retain = "1"b;			/* retain referenced entry for nolink */
	wsegname = substr (ext.segname, 2, ext.slng - 1);
	if ext.elng > 1
	then wentryname = substr (ext.entryname, 2, ext.elng - 1);
						/* copy ACC strings into regular format */
	else wentryname = " ";			/* there is no entryname */
	refp = ext.ref_ptr;				/* copy into stack for efficiency */
	ctep = ext.compent_ptr;			/* copy pointer to referencing component's entry */
	lrtp = comp.clrtp;
	lrt_index = ((ext.loffset - lrt.start_offset) * 0.5) + 1;
	link_modifier = 0;
	modp = addr (link_modifier);
	modifier_overlay.tm = ext.link_tm;		/* get modifier of original ext.link */
	modifier_overlay.td = ext.link_td;		/* ... */
	val = 0;					/* reset conversion variable */
	type = fixed (ext.type, 18);

	if type = 1
	then go to have_target;			/* it's an internal type-1 link */
	string = ext.segname;			/* copy ext.segname for efficiency */

/* Perform hash-coded lookup of snt. */

/* Hash-code the string (segname to be found) */

	hash_index = 0;
	do pos = 1 to min (ext.slng, 24);		/* prevent overflow of hash_index */
	     hash_index = 2 * hash_index + bin (unspec (substr (string, pos, 1)), 9);
	end;
	hash_index = mod (hash_index, hbound (snt.hash_table, 1) + 1);

/* Do linear search of this hash-code "bucket" (chain of entries) for
   entry having segname=string. */

	do hash_ptr = snt.hash_table (hash_index) repeat hash_ptr -> seg.hash_thread while (hash_ptr ^= null);
						/* search chain of links */
	     if hash_ptr -> seg.name = string
	     then goto segname_found;			/* success */
	end;
	goto return;				/* failure */

segname_found:
	substr (estring, 1, ext.elng) = substr (ext.entryname, 1, ext.elng);
						/* copy def for efficiency; remove substr when all names are 257 */
	targp = hash_ptr -> seg.comp;			/* pointer to referenced component's entry */
	int_limit = targp -> comp.clngi + 8;		/* scope of internal static */
	text_relocation = targp -> comp.crelt;		/* relocation counter for target component */
	symbol_relocation = targp -> comp.crels;	/* ... */
	ip = targp -> comp.insymentp;			/* pointer to component's definitions */
	if ip -> insym.global_nolink = "1"b
	then goto return;				/* target component not to be prelinked */
	ndefs = ip -> insym.n_insyms;			/* get number of defs for this component */
	if (type = 6 & ext.elng = 1)
	then go to null_ent;			/* treat like type 3 */
	if type = 3
	then /* its a segname|expresiion,m link */
	     do;
null_ent:
	     dp = addr (ip -> insym.entry (ndefs));	/* entry for null-name is the last */
	     goto definition_found;
	end;

/* its a type-4 or type-5 segname|entryname+expression,m  link */

	else do i = 1 to ndefs - 1;			/* scan definitions */
		dp = addr (ip -> insym.entry (i));	/* pointer to a definition entry */
		if estring = insyme.symbol
		then goto definition_found;
	     end;
	oddname = wsegname;
	substr (oddname, ext.slng, 1) = "$";
	substr (oddname, ext.slng + 1, ext.elng - 1) = wentryname;
	odnp = bx_$odnp;
	do i = 1 to od.n_odds;			/* lookup oddname table */
	     if oddname = od.entry (i).name
	     then goto return;			/* message already printed */
	end;

	if type = 5
	then do;
	     result = "1"b;				/* this is an internal link by definition */
	     lrt.regenerated (lrt_index) = internally_resolved;
	     i = fixed (ext.code15, 18);
	     if i = 0
	     then wsegname = "*text";
	     else if i = 1
	     then wsegname = "*link";
	     else if i = 2
	     then wsegname = "*symbol";
	     else if i = 4
	     then wsegname = "*static";
	     call com_err_ (0, errname, "cannot locate ^a|^a for file ^a", wsegname, wentryname, comp.filename);
	     bx_$fatal_error = 1;
	end;
	else call ioa_ ("Warning: cannot match symbol ^a; external link generated.", oddname);
	if i = od.max_size
	then do;
	     od.n_odds = i + 1;
	     call com_err_ (0, errname, "oddname table overflow; please notify maintenance.");
	     goto return;
	end;
	od.entry (i).name = oddname;			/* make new entry */
	od.n_odds = i;
	goto return;

definition_found:
	if insyme.no_link = "1"b
	then goto return;				/* this symbol must not be prelinked to */
	if force_retain = "1"b
	then do;
	     insyme.delete = "0"b;			/* retain symbol referenced by nolink component */
	     insyme.retain = "1"b;
	end;
have_target:
	expression = fixed (ext.expr, 18);		/* get expression from link */
	if substr (ext.expr, 1, 1)
	then expression = -fixed (^ext.expr, 18) - 1;

	if type = 1 | type = 5
	then do;					/* check   for *static */
	     if bin (ext.code15, 18) = 4
	     then do;				/* *static */
		if bx_$bound_sep_stat = 1
		then return;			/* addr of static not known */
						/* the following treatment of *static links is inconsistent
						   in that they are relocated whereas *link links are not */
		if type = 1
		then do;				/* must change to internal reference to static in linkage */
		     value = 8;			/* must adjust for linkage header */
		     targp = ctep;			/* selfreference */
		     result = "1"b;
		     lrt.regenerated (lrt_index) = internally_resolved;
		     go to segdef_in_linkage;
		end;
	     end;
	end;
	if type = 1
	then /* internal link relative to sections */
	     do;
	     result = "1"b;				/* this is an internal reference */
	     lrt.regenerated (lrt_index) = internally_resolved;
	     if wsegname = "*text"
	     then toffset = comp.crelt;		/* all type-1 links relative to base of section */
	     else do;				/* reference to linkage and symbol must be done in two steps */
		call create_rpt_entry;		/* wnpt = index of repatch table entry */
		rptep = addr (rpt.entry (wnpt));
		rpte.halfword = ext.side;
		rpte.poffset = rel (refp);		/* remember referencing instruction */
		rpte.pbase = "t";			/* relative to text section */
		rpte.pexpr = "0"b;			/* no expression value */
		toffset = 0;			/* type-1 links refer to base of section */
		if wsegname = "*link"
		then /* self reference to linkage section */
		     rpte.code = "l";
		else if wsegname = "*symbol"
		then /* self reference to symbol section */
		     rpte.code = "s";
		else call ioa_ ("int_link_: programming error 1;name=^a", wsegname);
	     end;
	     toffset = toffset + expression;		/* put new address in referencing instruction */
	     refp -> word.lhe18 = addr (toffset) -> word.rhe18;
	     goto patch_modifier;
	end;

	class = fixed (insyme.class, 18);		/* get class of entrypoint */
						/* can't prelink to separate static */
	value = fixed (insyme.value, 18);		/* get value */

	if class = 4
	then if bx_$bound_sep_stat = 1
	     then do;				/* Transform a link to another component's
						   static to a type 1 link to *static. To do
						   this we  change the info in ext so that
						   ext_link_ will generate the right link. */
		if type = 6
		then ext.trap = "0"b;		/* target won't need to be created */
		ext.type = bit (bin (1, 18), 18);
		ext.code15 = bit (bin (4, 18), 18);
		ext.expr = bit (bin (value + targp -> comp.creli + expression, 18), 18);
						/* keep segname and entryname for messages and to distinguish diddled structure */

		go to return;

	     end;

	if link_modifier ^= 0
	then do;					/* the original link had a modifier in it */
	     if comp.compiler = "PASCAL  "
	     then do;
		if link_modifier = 16
		then do;				/* 20 octal (indirect) */
		     if class = 1
		     then do;

/* This link indirects through another link.  We now want to resolve the
   reference directly to the other link (or to its target, if internal).
   We do this by pretending that the reference is actually to the other link. */

			refp -> instr.lhe15 = addr (value) -> rhe15;
			my_ext.ref_ptr = ext.ref_ptr;
			my_ext.compent_ptr = targp;
			my_ext.loffset = value;
			if decode_link_ (addr (my_ext)) = "1"b
			then do;
			     call com_err_ (0, errname, "Cannot regenerate target link of indirect link ^a|^a,*",
				wsegname, wentryname);
			     bx_$fatal_error = 1;
			     return;
			end;
			call int_link_ (addr (my_ext), my_result);
			if my_result = "0"b
			then call ext_link_ (addr (my_ext));
		     end;
		     else if class = 4
		     then do;
			value = value + targp -> comp.creli + 8;
			refp -> instr.lhe15 = addr (value) -> rhe15;
		     end;
		     result = "1"b;
		     lrt.regenerated (lrt_index) = internally_resolved;
		     return;
		end;
	     end;
	     if refp -> modifier_overlay.td ^= "0000"b
	     then /* the referencing instruction has a modifier as well */
		do;
		call ioa_ ("Warning: Modifier at ^a|^o cannot be handled by binder; external link generated.",
		     comp.filename, ext.offset);
		insyme.delete = "0"b;		/* make sure def gets regenerated */
		insyme.retain = "1"b;
		goto return;
	     end;
	end;


	result = "1"b;				/* this is an internal link */
	lrt.regenerated (lrt_index) = internally_resolved;

	if class = 0
	then do;
	     toffset = text_relocation + value + expression;
	     goto update_reference;
	end;

	if class = 1
	then do;
	     p = targp -> comp.clnkp;			/* pointer to base of target's old linkage section */
	     p = addrel (p, value);			/* pointer to symbol's entry sequence in linkage section */
	     if (refp -> modifier_overlay.tm = "11"b) | (value < int_limit)
	     then /* an ALM segdef */
		do;
segdef_in_linkage:
		val = value + targp -> comp.creli + expression;
						/* compute new address of internal static */
		refp -> instr.lhe15 = addr (val) -> rhe15;
						/* and store in referencing instruction */
		if link_modifier = 0
		then refp -> modifier_overlay.tm = "00"b;
		else refp -> instr.modifier = bit (bin (link_modifier, 6), 6);
		if type ^= 1
		then insyme.snapped = "1"b;		/* dp not defined for type 1 */
		goto return;
	     end;

illegal_entry:
	     call com_err_ (0, errname, "illegal ^a entry sequence in link|^o for ^a$^a", targp -> comp.compiler, value,
		targp -> comp.filename, wentryname);
	     bx_$fatal_error = 1;
	     goto return;

	end;


	if class = 2
	then do;
	     toffset = symbol_relocation + value + expression;
	     call create_rpt_entry;			/* wnpt = index of repatch table entry */
	     rpt.entry (wnpt).halfword = ext.side;
	     rpt.entry (wnpt).poffset = rel (refp);	/* remember to finish relocation later */
	     rpt.entry (wnpt).pbase = "t";		/* relative to text section */
	     rpt.entry (wnpt).pexpr = "0"b;		/* no expression value */
	     rpt.entry (wnpt).code = "s";
	     goto update_reference;
	end;

	if class = 4
	then do;					/* in static, but will be combined */
	     value = value + 8;			/* must account for linkage header */
	     go to segdef_in_linkage;
	end;

	call com_err_ (0, errname, "internal entrypoint ^a in file ^a has unrecognized class ^o", wentryname,
	     targp -> comp.filename, class);
	bx_$fatal_error = 1;
	goto return;

update_reference:					/* put new address in referencing instruction */
	refp -> word.lhe18 = addr (toffset) -> word.rhe18;
	insyme.snapped = "1"b;

patch_modifier:
	refp -> instr.bit29 = "0"b;
	if link_modifier = 0
	then refp -> modifier_overlay.tm = "00"b;	/* remove indirection */
	else refp -> instr.modifier = bit (bin (link_modifier, 6), 6);
						/* copy modifier from original link */
	goto return;

illegal_reference:
	call com_err_ (0, errname, "illegal ^a external reference in ^a|^o", comp.compiler, comp.filename, ext.offset);
	bx_$fatal_error = 1;

return:
	return;




init:
     entry;

	if bx_$debug = 1
	then errname = "int_link_";
	else errname = bx_$caller;

	return;

create_rpt_entry:
     procedure;					/* wnpt = index of new repatch table entry */

	rptp = bx_$last_rptp;
	wnpt, rpt.npt = rpt.npt + 1;
	if wnpt = hbound (rpt.entry, 1)
	then do;					/* allocate new chunk of repatch table */
	     call temp_mgr_$allocate (size (rpt));
	     rpt.thread = bx_$freep;
	     rptp = bx_$freep;
	     bx_$last_rptp = rptp;
	     rpt.thread = p;
	     call temp_mgr_$reserve (addrel (rptp, size (rpt)));
	     rpt.thread = null;
	     rpt.npt = 0;
	end;

     end;


     end;						/* End of int_link_ */
