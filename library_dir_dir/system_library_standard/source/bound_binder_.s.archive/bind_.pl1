/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Modified cleanup handler to work with new bound object being created in a
     temp segment and then copied into the working dir.
  2) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Generate first_ref_traps must be called after make_defs because make_defs
     my generate links when binding PASCAL objects. First ref traps must be
     generated after links.
                                                   END HISTORY COMMENTS */


/* This is the main program of the binder.

   Designed and initially coded by Michael J. Spier, August 19, 1970,
   Completely revised by Michael J. Spier, December 23, 1971  */
/* modified 75.06.20 by M. Weaver for separate static */
/* modified 5/76 by M. Weaver  for -brief option */
/* modified 1/77 by Melanie Weaver to call ext_link_$finish */
/* modified 8/77 by Melanie Weaver to check for perprocess static in non-standard  */
/* modified 9/78 by David Spector to release temp segments on cleanup */
/* modified Dec 78 by David Spector to make repatch table automatically extensible */
/* Modified 01/14/81 W. Olin Sibert for new format of input structure, and -force_order */
/* Modified 01/21/81, WOS, to rename to bind_ so binder_ could remain "compatible" */
/* Modified 05/3/83 by Melanie Weaver to add handler for fatal_binder_error condition */
/* Modified  10/20/84 by M. Sharpe to use new binder_input_.incl.pl1; to check for bindfile
   errors before wiping out the old bound segment */

/* Warning: several places in the binder a fixed bin variable is referenced as
   based bit or based char; currently, referencing them via addr(variable)
   will make the pl1 compiler realize what is really being changed. */

/* format: style4,^indattr,^indcomtxt */

bind_: procedure (argp);

declare  argp pointer;


/* DECLARATION OF EXTERNAL ENTRIES */

declare  relocate_symbol_ external entry ();
declare  com_err_ external entry options (variable);
declare  decode_link_$init external entry ();
declare  dissect_object_ external entry (pointer);
declare  dissect_object_$init external entry ();
declare  ext_link_$init external entry ();
declare  ext_link_$finish entry ();
declare  generate_def_$init external entry ();
declare  get_temp_segment_ external entry (char (*), ptr, fixed bin (35));
declare  form_bind_map_ external entry (pointer, fixed bin (35));
declare  form_link_info_ external entry (pointer, fixed bin (35));
declare  get_wdir_ external entry () returns (char (168) aligned);
declare  generate_first_ref_traps_ external entry ();
declare  int_link_$init external entry ();
declare  hcs_$set_bc_seg external entry (pointer, fixed bin (24), fixed bin (35));
declare  hcs_$chname_seg ext entry (ptr, char (*) aligned, char (*) aligned, fixed bin (35));
declare  ioa_ external entry options (variable);
declare  ioa_$rs external entry options (variable);
declare  incorporate_options_ external entry ();
declare  make_bindmap_ external entry ();
declare  make_defs_$regenerate_block external entry (pointer);
declare  make_defs_$open_section external entry ();
declare  make_defs_$close_section external entry ();
declare  make_bound_object_map_ external entry (fixed bin (35));
declare  parse_bindfile_ external entry ();
declare  rebuild_object_$init external entry ();
declare  rebuild_object_ external entry (pointer);
declare  release_temp_segment_ external entry (char (*), ptr, fixed bin (35));
declare  temp_mgr_$allocate external entry (fixed bin);
declare  temp_mgr_$reserve external entry (pointer);
declare  temp_mgr_$init external entry ();
declare  temp_mgr_$make_object external entry ();
declare  temp_mgr_$close_files external entry ();
declare  terminate_file_ external entry (ptr, fixed bin (24), bit (*), fixed bin (35));
declare  tssi_$clean_up_segment external entry (pointer);
declare  tssi_$get_segment external entry (char (*) aligned, char (*) aligned, ptr, ptr, fixed bin (35));
declare  tssi_$finish_segment external entry (pointer, fixed bin (24), bit (36) aligned,
	    ptr, fixed bin (35));

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare  (i, pos, nobjects) fixed bin;
declare  hash_index fixed bin (34);
declare  (val, lng, symb_relc) fixed bin (18);
declare  code fixed bin (35);
declare  list_acinfop pointer;
declare  (inpp, linkptr, old_ptr, p, sp, textp) pointer;
declare  (dirname char (168), segname char (32)) aligned;
declare  listname char (32) aligned;
declare  whalf char (3) aligned;

declare  1 x aligned,
	 2 obj_ptr pointer,
	 2 list_ptr pointer,
	 2 list_bc fixed bin (24),
	 2 long fixed bin,
	 2 nopts fixed bin;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare  (addr, addrel, bin, bit, divide, fixed, hbound, index, min, mod, null, rel, substr, unspec) builtin;
declare  size builtin;
declare  rank builtin;

declare  cleanup condition;
declare  fatal_binder_error condition;

/* DECLARATION OF EXTERNAL STATIC */

declare  (error_table_$pathlong, error_table_$segnamedup) ext fixed bin (35);

/* DECLARATION OF INTERNAL STATIC */

declare  BINDER_INPUT_VERSION_1 char (4) aligned internal static options (constant) init ("BI.1");
declare  NL char (1) static options (constant) init ("
");
declare  FF char (1) static options (constant) init ("");

/* DECLARATION OF BASED STRUCTURES */

declare  linksection (val) aligned fixed bin based;
declare  1 halfword aligned based,
	 2 lhe18 bit (18) unaligned,
	 2 rhe18 bit (18) unaligned;
declare  1 pr_offset aligned based,
	 2 dum1 bit (3) unaligned,
	 2 lhe15 bit (15) unaligned,
	 2 dum2 bit (3) unaligned,
	 2 rhe15 bit (15) unaligned;
declare  1 clngns_overlay aligned based (addr (comp.clngns)),
	 2 dum bit (35) unaligned,
	 2 odd bit (1) unaligned;
declare  reset_bx (bx_$size) fixed bin (35) based (addr (bx_$area_begin));
declare  based_string char (10000) based (p);

declare  1 temp_seg based aligned,			/* Format of temp segments */
	 2 next_temp_ptr ptr,			/* ptr to next temp seg in chain */
	 2 storage bit (0);				/* Start of temp_mgr_ storage */

%page;

/* PROLOGUE - Initialize binder's temporaries, and validate format of
   bindfile before starting actual binding.			*/


	inpp = argp;				/* copy pointer to input structure */

	reset_bx (*) = 0;				/* reset main data base to zeros */

	bx_$inpp = inpp;				/* record address of input structure */
	bx_$caller = inp.caller_name;

	list_acinfop,
	     old_ptr,
	     bx_$temp,
	     bx_$bsegp,
	     bx_$temp_bsegp,
	     bx_$bseg_acinfop = null;


	on cleanup begin;				/* delete the temp copy of the bound seg on a fault */
	     if bx_$temp_bsegp ^= null then call terminate_file_ (bx_$temp_bsegp, 0, TERM_FILE_DELETE, 0);
						/* clean up temp for new bound object */
	     if list_acinfop ^= null then call tssi_$clean_up_segment (list_acinfop);
						/* clean up temp for list segment */

/* Return all temp segments to free pool. */

	     if old_ptr ^= null then do;		/* release the temp seg we got for version 2 input */
		call release_temp_segment_ ("bind_", inpp, (0));
		inpp = old_ptr;
	     end;

	     do p = bx_$temp repeat sp while (p ^= null); /* Follow chain of temp segments */
		sp = p -> temp_seg.next_temp_ptr;	/* Get ptr to next temp segment */
		call release_temp_segment_ ("bind", p, code);
		if code ^= 0 then
		     do;
		     call com_err_ (code, inp.caller_name);
		     return;
		end;
	     end;
	end;


	if inp.version = BINDER_INPUT_VERSION_1 then call CONVERT_I_TO_II (); /* convert to new version */
	else if inp.version ^= BINDER_INPUT_VERSION_2 then do; /* Complain and give up */
	     call com_err_ (0, inp.caller_name, "Invalid version ""^4a"" in binder input structure.", inp.version);
	     return;
	end;


	bx_$debug = fixed (inp.debug, 1);		/* copy debug flag */
	bx_$brief = bin (inp.brief_opt, 1);		/* copy brief flag */
	bx_$force_order = bin (inp.force_order_opt, 1);	/* Copy command-line Force_order option */
						/* (this may also get set in parse_bindfile)_ */
	on fatal_binder_error begin;
	     bx_$fatal_error = 1;
	     go to return;
	end;



	call temp_mgr_$init;
						/* create temp segment, return pointer to main database */
	if bx_$fatal_error = 1 then goto return;

	bx_$v_lng = rank (substr (bx_$vers_name, 1, 1));	/* get length of version name */

	sntp,
	     bx_$sntp = bx_$freep;			/* allocate segname table */
	snt.max_size = bx_$snt_limit;
	call temp_mgr_$reserve (addr (snt.entry (snt.max_size + 1))); /* determine end of table */
						/* reserve the area allocated to main table */
	if bx_$fatal_error ^= 0 then goto return;

	odnp,
	     bx_$odnp = bx_$freep;			/* oddname table  */
	od.max_size = bx_$oddname_limit;
	call temp_mgr_$reserve (addr (od.entry (od.max_size + 1)));

	rptp = bx_$freep;				/* Reserve first chunk of repatch table */
	bx_$first_rptp,
	     bx_$last_rptp = rptp;
	call temp_mgr_$reserve (addrel (addr (rpt), size (rpt)));
	rpt.thread = null;				/* No more chunks */
	rpt.npt = 0;				/* No entries in chunk */

	bx_$ncomp = inp.nobj;
	bx_$adnp = null;

	call parse_bindfile_;			/* parse the bindfile, if there is one */
	if bx_$fatal_error = 1 then goto return;

	inpp = bx_$inpp;				/* refresh, in case it was modified by parse_bindfile_ */

	if list_seg then do;			/* be sure segname || ".list" is <= 32 chars */
	     i = index (bx_$bound_segname, " ");	/* get length of name */
	     if ((i = 0) | (i > 27)) then do;
		call com_err_ (error_table_$pathlong, inp.caller_name, "Cannot add .list to ^a", bx_$bound_segname);
		bx_$fatal_error = 1;
		go to return;			/* don't make user have to delete empty seg */
	     end;
	end;

	ctp,
	     bx_$ctp = bx_$freep;			/* allocate component table */
	nobjects = bx_$ncomp;			/* get number of component objects */
	call temp_mgr_$reserve (addr (comp_tbl (nobjects + 1))); /* reserve area for component table */
	if bx_$fatal_error = 1 then goto return;


	call temp_mgr_$make_object;			/* create the new bound segment */
	if bx_$fatal_error = 1 then goto return;

	if ^inp.brief_opt then call ioa_ ("Binding ^a", bx_$bound_segname);


%page;

/* FIRST PASS OF BINDER = obtain ITS pointers to all relevant parts (e.g., definition
   section, relocation bits, etc.) of every object to be bound, and copy the text
   sections into the new bound segment.				*/


	call dissect_object_$init;

	do i = 1 to nobjects;			/* start processing components */
	     ctep,
		comp_tbl (i) = bx_$freep;		/* allocate entry for this component */
	     call temp_mgr_$reserve (addr (comp.last_item));
	     unspec (comp) = ""b;			/* iniitalize structure; seems to be necessary */
	     comp.cindex = i;			/* remember entry's index in table */
	     comp.filename = inp.obj (i).filename;	/* store object's filename */
	     lng = index (comp.filename, " ");		/* compute filename's length */
	     if lng = 0 then lng = 32;
	     else lng = lng - 1;
	     comp.fn_lng = lng;			/* remember length */
	     comp.ctxtp = inp.obj (i).base;		/* get pointer to object segment */
	     comp.cbitcount = inp.obj (i).bitcount;	/* and its bitcount */
	     call dissect_object_ (ctep);		/* and process this object segment */
	end;

	if bx_$tintlng >= 16384 then do;		/* max is 16K because of 15-bit link offsets */
	     call com_err_ (0, inp.caller_name,
		"length of internal static >= 16384, the maximum static section length");
	     bx_$fatal_error = 1;
	end;

	bx_$maxlinklng = min (bx_$maxlinklng, 16384);	/* enforce usable size */
	if (bx_$has_comb_stat = 0 & bx_$has_sep_stat = 1)
	then bx_$bound_sep_stat = 1;			/* have at  least 1 nonzero sep stat and no comb stat */
	else bx_$bound_sep_stat = 0;

	if bx_$fatal_error = 1 then go to return;

	call incorporate_options_;
	if bx_$fatal_error = 1 then goto return;

/* Create hash table for segname table (snt), all of whose entries have already been stored. */

	do hash_index = 0 to hbound (snt.hash_table, 1);
	     snt.hash_table (hash_index) = null;	/* Clear hash table */
	end;
	do i = 1 to snt.n_names;			/* Scan entire snt */

/* Hash code segment name from table. */

	     hash_index = 0;
	     do pos = 1 to min (snt.entry (i).lng, 24);	/* 24 times max */
		hash_index = 2 * hash_index + bin (unspec (substr (snt.entry (i).name, pos, 1)), 9);
	     end;
	     hash_index = mod (hash_index, hbound (snt.hash_table, 1) + 1);

/* Push snt entry into bucket thus found. */

	     snt.entry (i).hash_thread = snt.hash_table (hash_index);
	     snt.hash_table (hash_index) = addr (snt.entry (i));
	end;

%page;

/* SECOND PASS OF THE BINDER = allocate temporary area for construction of
   new linkage section, relocate all text sections building up the linkage
   section in the process, and finally construct the new definition section
   of the new bound object segment.				*/

	val = bx_$textlng;				/* get length of text portion */
	val = divide (val + 1, 2, 17, 0) * 2;		/* make it a 0 mod 2 value */
	bx_$textlng = val;				/* and restore to data base */


	bx_$tdefp = addrel (bx_$temp_bsegp, val);
	call temp_mgr_$allocate (bx_$maxlinklng);	/* make sure an area of sufficient size available */
	if bx_$bound_sep_stat = 1 then do;
	     bx_$tintp = bx_$freep;			/* static will be between defs and link */
	     val = 8;				/* locatiion of first link */
	     linkptr,
		bx_$tlinkp = addrel (bx_$tintp, bx_$tintlng); /*  ptr to temp linkage section */
	end;
	else do;					/* bound segment has static in linkage */
	     linkptr,
		bx_$tlinkp = bx_$freep;		/*  linkage immediately follows defs */
	     val = bx_$tintlng + 8;
	     bx_$tintp = addrel (linkptr, 8);
	end;
	call temp_mgr_$reserve (addrel (bx_$freep, bx_$maxlinklng)); /* and reserve area */

	strmp,
	     bx_$strmp = bx_$freep;			/* get pointer to generated string map */
	strm.max_size = bx_$stringmap_limit;
	call temp_mgr_$reserve (addr (strm.entry (strm.max_size + 2)));

/* now fabricate a new header for this linkage section */

	linkptr -> virgin_linkage_header.link_begin = bit (bin (val, 18), 18); /* and store in header */
	bx_$tlinklng = val;				/* remember current length of linkage section */

/* now compute length of first part of binder's symbol block */

	bx_$n_lng = index (bx_$bound_segname, " ") - 1;
	if bx_$n_lng = -1 then bx_$n_lng = 32;

/* make symbol section header length mod 8 */
	i = divide (bx_$v_lng + 3, 4, 17, 0);		/* compute length of version name in words */
	bx_$s_lng = divide ((27 + i), 8, 17, 0) * 8;	/* 27 for 20 + 7 */
	call rebuild_object_$init;
	call decode_link_$init;
	call int_link_$init;
	call make_defs_$open_section;			/* must call before ext_link_$init */
	call ext_link_$init;
	call generate_def_$init;

	symb_relc = bx_$s_lng;
	do i = 1 to nobjects;
	     ctep = comp_tbl (i);			/* pointer to component entry */
						/* the following must be done here because incorporate_options_ may have changed comp.clngns */
	     if clngns_overlay.odd then comp.cpads = 1;
	     comp.crels = symb_relc;
	     symb_relc = symb_relc + comp.clngns + comp.cpads;
						/* compute new relocation counter */
	     if comp.ignore = 0 then call rebuild_object_ (ctep);
	end;


	do i = 1 to nobjects;
	     ctep = comp_tbl (i);			/* pointer to component entry */
	     if comp.ignore = 0 then call make_defs_$regenerate_block (ctep);
	end;

	if bx_$n_firstrefs > 0 then call generate_first_ref_traps_ ();
						/* combine first ref trap arrays of each  component */


	call make_defs_$close_section;		/* close new definition section */

	call ext_link_$finish;			/* print out multiple init messages */
	if bx_$fatal_error = 1 then goto return;


%page;

/* FINAL PASS OF THE BINDER = copy new linkage section into new object segment,
   and relocate symbol sections into it 			*/

	val = bx_$curdeflng;			/* length of new definition section */
	val = divide (val + 1, 2, 17, 0) * 2;		/* make it a 0 mod 2 value */
	bx_$curdeflng = val;			/* restore just in case */
	if bx_$bound_sep_stat = 0 then do;		/*  int static is inside linkage */
	     bx_$blnkp = addrel (bx_$tdefp, val);	/* ptr to location of new  linkage sectiin */
	     val = bx_$tlinklng;			/* includes static */
	     bx_$blnkp -> linksection = bx_$tlinkp -> linksection;
	     bx_$bstatp = addrel (bx_$blnkp, 8);
	end;
	else do;					/*  static precedes linkage */
	     bx_$bstatp = addrel (bx_$tdefp, val);
	     val = bx_$tintlng + bx_$tlinklng;		/* get length of link and static */
	     bx_$bstatp -> linksection = bx_$tintp -> linksection; /* copy linkage and static into object */
	     bx_$blnkp = addrel (bx_$bstatp, bx_$tintlng);/* get ptr to linkage in object */
	     val = bx_$tlinklng;			/* fill in length of actual linkage */
	end;
	bx_$t_lng = bx_$textlng + bx_$curdeflng;	/* length of new text section */
	val = divide (val + 1, 2, 17, 0) * 2;		/* make length of linkage section 0 mod 2 value */
	bx_$l_lng = val;				/* and store in main data base */
	bx_$bdefp = bx_$tdefp;
	bx_$d_lng = bx_$curdeflng;
	bx_$i_lng = bx_$tintlng;

	bx_$blnkp -> virgin_linkage_header.linkage_section_lng = bit (bin (bx_$l_lng, 18), 18);
	bx_$blnkp -> virgin_linkage_header.def_offset = rel (bx_$bdefp);
	bx_$blnkp -> virgin_linkage_header.static_length = bit (bin (bx_$i_lng, 18), 18);

	bx_$bsymp = addrel (bx_$blnkp, bx_$l_lng);	/* compute base of symbol section */

	call relocate_symbol_;			/* relocate and assemble symbol sections */
	if bx_$fatal_error = 1 then goto return;


/* EPILOG - make bindmap and object map, and complete addresses and values
   which were not available at some previous point of time. Close all
   files and terminate names.				*/

	call make_bindmap_;


	do rptp = bx_$first_rptp repeat rpt.thread while (rptp ^= null);
						/* Scan repatch table */
	     do i = 1 to rpt.npt;			/* Scan chunk of repatch table */
		rptep = addr (rpt.entry (i));		/* pointer to next repatch table entry */
		if rpte.pbase = "t" then textp = bx_$temp_bsegp;
		else if rpte.pbase = "l" then textp = bx_$blnkp;
		else if rpte.pbase = "s" then textp = bx_$bsymp;
		textp = addrel (textp, rpte.poffset);	/* get pointer to instruction to patch */
		whalf = rpte.halfword;		/* determine which halfword to patch */
		if whalf = "lhe" then val = fixed (textp -> halfword.lhe18, 18);
		else if whalf = "l15" then val = fixed (textp -> pr_offset.lhe15, 15);
		else if whalf = "rhe" then val = fixed (textp -> halfword.rhe18, 18);
		val = val + fixed (rpte.pexpr, 18);	/* add expression value */
		if rpte.code = "l" then val = val + bin (rel (bx_$blnkp), 18);
		else if rpte.code = "s" then val = val + bin (rel (bx_$bsymp), 18);
		if whalf = "lhe" then textp -> halfword.lhe18 = bit (bin (val, 18), 18);
		else if whalf = "l15" then textp -> pr_offset.lhe15 = addr (val) -> pr_offset.rhe15;
		else textp -> halfword.rhe18 = bit (bin (val, 18), 18);
	     end;
	end;


/* and now, at last, make an object map for the new object segment */

	call make_bound_object_map_ (code);
	if code ^= 0 then
	     do;
	     call com_err_ (0, inp.caller_name, "Cannot generate object map");
	     bx_$fatal_error = 1;
	     bx_$o_lng = bx_$t_lng + (bx_$bound_sep_stat * bx_$i_lng) + bx_$l_lng + bx_$s_lng; /* to get bitcount */
	     bx_$bseg_bitcount = bx_$o_lng * 36;	/* ... */
	end;

	bx_$o_lng = divide (bx_$bseg_bitcount, 36, 17, 0);


	if bx_$fatal_error = 1 then goto return;
	call hcs_$set_bc_seg (bx_$temp_bsegp, bx_$bseg_bitcount, code);

	if list_seg = "1"b then			/* produce a listing segment */
	     do;
	     dirname = get_wdir_ ();			/* get directory name */
	     segname = bx_$bound_segname;		/* get name of bound object segment */
	     i = index (segname, " ");
	     substr (segname, i, 5) = ".list";
	     list_ptr = null;
	     call tssi_$get_segment (dirname, segname, list_ptr, list_acinfop, code); /* create segment */
	     if list_ptr = null then
		do;
		call com_err_ (code, inp.caller_name, segname);
		bx_$fatal_error = 1;
		goto return;
	     end;
	     listname = segname;			/* copy segment name */
	     substr (listname, i, 5) = ".map ";
	     call hcs_$chname_seg (list_ptr, "", listname, code);
	     if code ^= 0 then			/* name duplication */
		if code ^= error_table_$segnamedup then
		     do;
		     call com_err_ (0, inp.caller_name, "Cannot add name ^a to segment ^a", listname, segname);
		end;
	     obj_ptr = bx_$temp_bsegp;		/* pointer to new bound object segment */
	     list_bc = 0;
	     if list_opt = "1"b then
		do;				/* copy bindfile, if any */
		if inp.bindfilep = null then goto output_bindmap;
		p = list_ptr;			/* copy for convenience */
		call ioa_$rs ("^/^/^-^-Bindfile for ^a^/", dirname, val, bx_$bound_segname);
		substr (based_string, 1, val) = substr (dirname, 1, val);
		lng = divide (inp.bindfile_bc, 9, 17, 0); /* get character count */
		substr (based_string, val + 1, lng) = substr (bindfilep -> based_string, 1, lng);
		lng = lng + val;
		substr (based_string, lng + 1, 2) = FF || NL;
		list_bc = (lng + 2) * 9;		/* set bitcount of list segment */
	     end;
output_bindmap:
	     long = 1;
	     nopts = 0;
	     if map_opt = "1"b then call form_bind_map_ (addr (x), code); /* go produce bindmap information */
	     if list_opt = "1"b then
		do;
		unspec (x.long) = "740000000000"b3;	/* fabricate form_link_info_ arguments */
		lng = divide (list_bc, 9, 17, 0);	/* get length in chars of list seg */
		substr (list_ptr -> based_string, lng + 1, 2) = FF || NL;
		list_bc = list_bc + 18;		/* increase length by 2 chars */
		call form_link_info_ (addr (x), code);	/* output link info  */
	     end;
	     if list_ptr ^= null then call tssi_$finish_segment
		     (list_ptr, list_bc, "1011"b, list_acinfop, code);
	end;

return:
	if bx_$fatal_error = 1 then
	     do;
	     bx_$addname = 0;
	     call com_err_ (0, inp.caller_name,
		"Fatal error has occurred; binding of ^a unsuccessful.^/The incomplete version exists in [pd]>^a.",
		bx_$bound_segname, bx_$bound_segname);
	end;

	call temp_mgr_$close_files;

	if old_ptr ^= null then do;			/* release the temp seg we got for version 2 input */
	     call release_temp_segment_ ("bind_", inpp, (0));
	     inpp = old_ptr;
	end;


	return;
%page;

CONVERT_I_TO_II:
     proc ();

/* program to convert version 1 inp to version 2 inp. */

/*  Automatic  */

dcl  idx fixed bin;

/*  Based */

dcl  1 v1_inp aligned based (old_ptr),			/* the now-obsolete version 1 binder_input */
       2 version char (4) aligned,
       2 caller_name char (32) unaligned,		/* Name of command on whose behalf binder is being invoked */

       2 bound_seg_name char (32) unaligned,		/* name of new bound segment */

       2 narc fixed bin,				/* number of input archive files */
       2 nupd fixed bin,				/* number of update archive files */

       2 archive (30) aligned,			/* info about input archives, for source map, etc. */
         3 path char (168) unaligned,			/* for identifying archive */
         3 real_path char (168) unaligned,		/* determined by translator_info_ */
         3 ptr pointer,				/* pointer to archive */
         3 bc fixed bin (24),				/* and its bitcount */
         3 uid bit (36) aligned,			/* unique id of archive */
         3 dtm fixed bin (71),			/* date-time modified of archive */

       2 bindfilep pointer,				/* pointer to bindfile */
       2 bindfile_bc fixed bin (24),			/* bitcount of bindfile */
       2 bindfile_name char (32) unaligned,		/* name of bindfile */
       2 bindfile_time_up fixed bin (71),		/* date updated in archive */
       2 bindfile_time_mod fixed bin (71),		/* date last modified */
       2 bindfile_idx fixed bin,			/* index of archive bindfile was in */

       2 options aligned,
         3 debug bit (1) unaligned,			/* 1-> debug option ON */
         3 list_seg bit (1) unaligned,			/* 1 -> make list seg */
         3 map_opt bit (1) unaligned,			/* 1 -> map option  */
         3 list_opt bit (1) unaligned,			/* 1 -> list option */
         3 brief_opt bit (1) unaligned,			/* 1 -> brief option */
         3 force_order_opt bit (1) unaligned,		/* 1 -> force_order option from command line */
         3 flags_pad bit (30) unaligned,

       2 nobj fixed bin,				/* number of objects to be bound */

       2 v1_obj (400) aligned like v1_obj;

dcl  1 v1_obj aligned based (p),			/* dcl of single input entry for version 1 binder_input */
       2 filename char (32) unaligned,
       2 base pointer,				/* pointer to base of object segment */
       2 bitcount fixed bin (24),			/* bitcount of object segment */
       2 option bit (18) unaligned,			/* pointer into option structure */
       2 flag bit (1) unaligned,			/* This word of unaligned bits ought to be a substructure, */
       2 pad bit (17) unaligned,			/* but if it is, pl1 scope-of-names stupidly rejects refs */
						/* to obj.flag as "ambiguous", because of inp.obj.flag */
       2 archive_idx fixed bin,			/* index of archive from which this component comes */
       2 time_mod fixed bin (71),			/* DTCM of component (from archive) */
       2 time_up fixed bin (71);			/* Time updated in archive */

	old_ptr = inpp;
	call get_temp_segment_ ("bind_", inpp, code);
	if code ^= 0 then do;
	     call com_err_ (code, "bind_", "Could not get temporary segment for version 2 input structure");
	     bx_$fatal_error = 1;
	     goto return;
	end;

	inp.version = BINDER_INPUT_VERSION_2;
	inp.caller_name = v1_inp.caller_name;
	inp.bound_seg_name = v1_inp.bound_seg_name;
	inp.narc = v1_inp.narc;
	inp.nupd = v1_inp.nupd;
	inp.ntotal = inp.narc + inp.nupd;
	inp.nobj = v1_inp.nobj;

	inp.bindfilep = v1_inp.bindfilep;
	inp.bindfile_bc = v1_inp.bindfile_bc;
	inp.bindfile_name = v1_inp.bindfile_name;
	inp.bindfile_time_up = v1_inp.bindfile_time_up;
	inp.bindfile_time_mod = v1_inp.bindfile_time_mod;
	inp.bindfile_idx = v1_inp.bindfile_idx;

	unspec (inp.options) = unspec (v1_inp.options);

	do idx = 1 to inp.ntotal;
	     inp.archive (idx) = v1_inp.archive (idx), by name;
	     inp.archive (idx).standalone_seg = "0"b;
	end;

	do idx = 1 to inp.nobj;
	     inp.obj (idx) = v1_inp.v1_obj (idx), by name;
	     inp.obj (idx).new_order = 0;
	     inp.obj (idx).to_be_ignored,
		inp.obj (idx).objectname_stmt = "0"b;
	end;

	return;

     end CONVERT_I_TO_II;


%page; %include bindext;
%page; %include comptbl;
%page; %include bndtbl;
%page; %include linkdcl;
%page; %include binder_input;
%page; %include terminate_file;

     end bind_;
