/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1978 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and remove nonstandard object segment support.
                                                   END HISTORY COMMENTS */

/* format: style3,^indnoniterdo */
get_relinfo_:
     procedure (argp);

/**********************************************************************/
/*							*/
/*	Name:	get_relinfo_				*/
/*	Input:	none					*/
/*	Function:	returns the word_offset, halfword identifier,	*/
/*		and relocation type of the next non-absolute	*/
/*		halfword in the current blcok of relocation	*/
/*		info.  The current relocation block and the last	*/
/*		halfword returned are maintained in static	*/
/*		storage.  Expanded_absolute relocation bits are	*/
/*		also skipped over.  get_relinfo_$init must be	*/
/*		called prior to calling get_relinfo_ to initiate	*/
/*		the sequential search through the specified block	*/
/*		of relocation information.			*/
/*	Output:	word_offset, halfword_selector, relocation_code	*/
/*							*/
/**********************************************************************/

/* Initially coded by M. J. Spier on 24 August 1970
Completely re-written for efficiency by M. B. Weaver on 21 November 1972   */
/* modified Sept 1978 by David Spector to correct precision declarations */

declare	type		fixed bin;
declare	j		fixed bin (19);

declare	i		fixed bin (19) int static;
declare	nhwords		fixed bin (19) aligned int static;
declare	bitcount		fixed bin (24) int static;
declare	baseptr		pointer int static;
declare	symb		(0:15) char (8) aligned int static
			initial ("text    ", "negtext ", "lnk18   ", "neglnk18", "lnk15   ", "def     ", "symb    ",
			"negsymb ", "int18   ", "int15   ", "selfrel ", "unused  ", "unused  ", "unused  ",
			"exp_abs ", "escape  ");

declare	(ap, argp)	pointer;

declare	(addr, bin, divide, index, substr)
			builtin;

declare	relsection	bit (bitcount) based (baseptr);

declare	1 arg		aligned based (ap),
	  2 offset	fixed bin,
	  2 side		char (3) aligned,
	  2 relinfo	char (8) aligned;

declare	1 word		aligned based,
	  2 pad		bit (35) unaligned,
	  2 odd		bit (1) unaligned;

/**/

	ap = argp;				/* copy argument */
loop:
	j = index (substr (relsection, i), "1"b);	/* find next non-abs rel bit */
	if j = 0
	then do;					/* no more rel bits for this section */
	     arg.relinfo = "overflow";
	     go to fill_loc;			/* return location info of last call */
	end;

	i = i + j + 4;				/* set bit counter after current half word info */
						/* find type of relocation */
	type = bin (substr (relsection, i - 4, 4), 4);

	if type = 14
	then do;					/* have expanded absolute */
	     nhwords = nhwords + j + bin (substr (relsection, i, 10), 10) - 1;
						/* just skipping over */
						/* determine number of half words to skip */
	     i = i + 10;				/* skip bit counter 10 more in this case */
	     go to loop;				/* don't have real relocation info yet */
	end;
	else nhwords = nhwords + j;			/* update half word count */

/* fill in return info */

	arg.relinfo = symb (type);			/* fill in type indicator */
fill_loc:
	if addr (nhwords) -> word.odd
	then arg.side = "lhe";
	else arg.side = "rhe";			/* get word offset */
	arg.offset = divide (nhwords - 1, 2, 17, 0);

	return;

/**/

init:
     entry (rel_base);

/**********************************************************************/
/*							*/
/*	Name:	get_relinfo_$init				*/
/*	Input:	rel_base					*/
/*	Function:	initializes a static pointer to the beginning of	*/
/*		the string of relocation bits, saves the bitcount	*/
/*		in static storage and sets the word position	*/
/*		counter (nhwords) to zero and sets the bit string	*/
/*		index (i) to the start of the bit string.  	*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

declare	rel_base		pointer;

declare	1 relinfo		aligned based (rel_base),
	  2 decl_vers	fixed bin,
	  2 n_bits	fixed bin,
	  2 bits		bit (0 refer (relinfo.n_bits));

/* initialize counters */
	i = 1;					/* current index into rel bit string */
	nhwords = 0;				/* # of half words covered so far */

	bitcount = relinfo.n_bits;
	baseptr = addr (relinfo.bits);

	return;



     end get_relinfo_;
