/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation, and force source_map onto a doubleword boundary.
                                                   END HISTORY COMMENTS */


/**********************************************************************/
/*							*/
/*	Name:	make_bindmap_				*/
/*	Input:	none					*/
/*	Function:	Creates the source map, setting the pointer to it	*/
/*		in the symbol header, and creates the bindmap,	*/
/*		setting the area_pointer in the symbol header to	*/
/*		point to it.				*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* Coded sometime in 1972, by Melanie Weaver, as an adaptation of what is
   now called old_make_bindmap_ */
/* Modified 01/14/81 W. Olin Sibert for new format of input structure */
/* Modified 11/14/84 by M. Sharpe to forget non-standard objects ever existed */

/* format: style3,^indnoniterdo */
make_bindmap_:
     procedure;					/* DECLARATION OF EXTERNAL SYMBOLS */

declare	date_time_	entry (fixed bin (71), char (*) aligned);
declare	get_group_id_	entry () returns (char (32) aligned);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, lng, val, ncomp)
			fixed bin;
declare	block_offset	fixed bin (18);
declare	(p, bmp, sblkp, inpp, smp)
			pointer;
declare	w_string1		char (32) aligned;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, divide, fixed, index, length, rel, rtrim, substr)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 block_offset_overlay
			aligned based (addr (block_offset)),
	  2 dum		bit (35) unaligned,
	  2 odd		bit (1) unaligned;

declare	1 source_map	aligned based (smp),	/* declaration of standard source map */
	  2 decl_vers	fixed bin,
	  2 size		fixed bin,		/* number of source segments */
	  2 map		(size) aligned,		/* one for each input and update archive */
	    3 pathname_offset
			bit (18) unaligned,
	    3 pathname_length
			bit (18) unaligned,
	    3 uid		bit (36) aligned,		/* uid of the source segment */
	    3 dtm		fixed bin (71);		/* last date/time modified of source */

%page;

	ctp = bx_$ctp;
	inpp = bx_$inpp;
	sblkp = bx_$bsymp;
	block_offset = bx_$s_lng;			/* this part of binder's block is at end */

	w_string1 = get_group_id_ ();			/* get user id for symbol header */
	lng = index (w_string1, " ") - 1;		/* get relevant length of user id */
	if lng = -1
	then lng = 32;				/* generate userid string */
	call gen_string (addr (sb.uid_offset), substr (w_string1, 1, lng));

/* generate source map */

	ncomp = inp.ntotal;				/* list both input and update archives */
	if block_offset_overlay.odd
	then block_offset = block_offset + 1;		/* align source map on an even boundary */

	smp = addrel (sblkp, block_offset);		/* get address of source map */
	sb.source_map = bit (bin (block_offset, 18), 18); /* allocate map area */
	block_offset = block_offset + (ncomp * 4) + 2;
	source_map.decl_vers = 1;
	source_map.size = ncomp;
	do i = 1 to ncomp;				/* fill in info for each archive */
	     call gen_string (addr (source_map.map (i).pathname_offset), rtrim (inp.archive (i).real_path));
	     source_map.map (i).uid = inp.archive (i).uid;
	     source_map.map (i).dtm = inp.archive (i).dtm;
	end;

	if block_offset_overlay.odd
	then block_offset = block_offset + 1;		/* start bindmap of even word boundary */

/* generate bind map proper */

	bmp = addrel (sblkp, block_offset);		/* pointer to bindmap structure */
	bindmap.dcl_version = 2;			/* constant '2' to identify structure used */
						/* and remember relpointer */
	sb.area_ptr = bit (bin (block_offset, 18), 18);
	ncomp = inp.nobj;				/* number of bound objects */
	p = addr (bindmap.component (ncomp + 1));	/* compute size of structure */
	val = fixed (rel (p), 18) - fixed (rel (bmp), 18) + 13;
	block_offset = block_offset + val;		/* grow symbol block */
	n_components = ncomp;			/* put size in bindmap */

	do i = 1 to ncomp;				/* generate bindmap */
	     ctep = comp_tbl (i);			/* pointer to component's entry */
	     call gen_string (addr (component (i).name), substr (comp.filename, 1, comp.fn_lng));
	     component (i).comp_name = comp.compiler;
	     component (i).text_start = bit (bin (comp.crelt, 18), 18);
	     component (i).text_lng = bit (bin ((comp.clngt + comp.cpadt), 18), 18);
	     component (i).stat_start = bit (bin (comp.creli, 18), 18);
	     component (i).stat_lng = bit (bin ((comp.clngi + comp.cpadi), 18), 18);
	     component (i).symb_start = bit (bin (comp.crels, 18), 18);
	     component (i).defblock_ptr = bit (bin (comp.defthread, 18), 18);
	     component (i).symb_lng = bit (bin ((comp.clngns + comp.cpads), 18), 18);
	     component (i).n_blocks = bit (bin (comp.n_sym_blks, 18), 18);
	end;

	call gen_string (addr (bindmap.bf_name), rtrim (inp.bindfile_name));
	call date_time_ (inp.bindfile_time_up, bindmap.bf_date_up);
	call date_time_ (inp.bindfile_time_mod, bindmap.bf_date_mod);

/* make block offset even */
	if block_offset_overlay.odd
	then block_offset = block_offset + 1;
	block_size = bit (bin (block_offset - bin (sb.uid_offset, 18) + bin (sb.next_block, 18), 18), 18);
						/* set size of symbol block */
	bx_$s_lng = block_offset;			/* update length of symbol section */

	return;


gen_string:
     procedure (stringpointer, string);

/**********************************************************************/
/*							*/
/*	Name:	gen_string				*/
/*	Input:	stringpointer, string			*/
/*	Function:	given a string and a pointer to a symbol table	*/
/*		string reference (18 bit relp and 18 bit length),	*/
/*		allocate the space for the string at the end of	*/
/*		the symbol section, and set the relp and length.	*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

declare	stringpointer	pointer,
	string		char (*);
declare	p		pointer;
declare	(lng, delta)	fixed bin;
declare	1 sp		aligned based (stringpointer),
	  2 relp		bit (18) unaligned,
	  2 n_chars	bit (18) unaligned;
declare	newstring		char (10000) aligned based (p);

	lng = length (string);			/* get length of new string */
	n_chars = bit (bin (lng, 18), 18);		/* and store in strinpointer */
	relp = bit (bin (block_offset, 18), 18);	/* store relpointer to string */
	p = addrel (sblkp, block_offset);		/* ITS pointer to string */
	delta = divide (lng + 3, 4, 17, 0);		/* compute block increment */
	substr (newstring, 1, delta * 4) = string;
	block_offset = block_offset + delta;

     end gen_string;

%page;
%include bindext;
%page;
%include comptbl;
%page;
%include binder_input;
%page;
%include symbol_block;
%page;
%include bind_map;

     end make_bindmap_;
