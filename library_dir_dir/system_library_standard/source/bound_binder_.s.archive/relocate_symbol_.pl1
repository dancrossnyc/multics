/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and readability, changed errname to use the
     caller-supplied name instead of "binder_"
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */

relocate_symbol_:
     procedure;

/* modified 6/75 by M. Weaver for separate static */
/* modified 11/76 by M. Weaver  to clean up symbol tree thread */
/* Modified 01/15/81 W. Olin Sibert to remove red shifts */

/**********************************************************************/
/*							*/
/*	Name:	relocate_symbol_				*/
/*	Input:	none					*/
/*	Function:	copies the symbol sections of the input object	*/
/*		segments into the new bound object segment and	*/
/*		relocates the references.			*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* source map and user_id are actually filled in by make_bindmap_	*/
/* since they, like the bindmap, are variable and are put at the	*/
/* end of the symbol section				*/


/* DECLARATION OF EXTERNAL ENTRIES */

declare	com_err_		external entry options (variable);
declare	bx_$symbol_table	external fixed bin;
declare	clock_		external entry () returns (fixed bin (71));
declare	get_relinfo_$init	external entry (ptr);
declare	get_relinfo_	external entry (ptr);


/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, substr, string)
			builtin;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	i		fixed bin;
declare	(previous_length, lng, relocate)
			fixed bin;
declare	(textoffset, intoffset, symboffset)
			fixed bin (18);
declare	(p, sblkp, previous_block, wordp, pl1_sbp)
			pointer;
declare	errname		char (16) aligned;

declare	1 ext		aligned,
	  2 offset	fixed bin,
	  2 side		char (3) aligned,
	  2 relinfo	char (8) aligned;

/* DECLARATION OF BASED STRUCTURES */

declare	1 word		aligned based (wordp),
	  2 lhe18		bit (18) unaligned,
	  2 rhe18		bit (18) unaligned;
declare	1 pl1_sb		aligned like pl1_symbol_block based (pl1_sbp);

declare	vers_string	char (10000) aligned based;
declare	symbolsection	(lng) fixed bin based;

/*  */

	if bx_$debug = 1
	then errname = "relocate_symbol_";
	else errname = bx_$caller;

	ctp = bx_$ctp;				/* copy pointer to component table */

/* Make a symbol section header for the new bound object */
/* IMPORTANT: length of this header is preset in 'relocate_symbol_$init'
	   and must not be exceeded unless its preset length is accordingly modified */

	sblkp = bx_$bsymp;				/* copy pointer to symbol section */
	sb.decl_vers = 1;
	sb.identifier = "bind_map";
	sb.gen_version_number = bx_$vers_number;
	p = addr (bx_$symbol_table);			/* ptr to binder's own symbol table */
	sb.gen_creation_time = p -> sb.obj_creation_time; /* get creation date of executing binder */
	sb.obj_creation_time = clock_ ();
	sb.generator = "binder";
	sb.gen_name_offset = bit (bin (20, 18), 18);
	lng = bx_$v_lng;
	sb.gen_name_length = bit (bin (lng, 18), 18);
	substr (addrel (sblkp, 20) -> vers_string, 1, lng) = substr (bx_$vers_name, 2, lng);
	p = ctp -> comp_tbl (1) -> comp.csymp;		/* get ptr to first component's symbol section */
	sb.tbound = p -> sb.tbound;			/* use tbound  of first component */
	sb.stat_bound = p -> sb.stat_bound;		/* same with stat_bound */
	sb.symb_base = "0"b;			/* this is first block in symbol section */

/* the rest of the header items are filled in by make_bindmap_ */

/* Now move all symbol tables over and relocate them */

	previous_length = bx_$s_lng;
	previous_block = sblkp;

	i = 0;
copy_tables:
	i = i + 1;
	if i > bx_$ncomp
	then goto return;				/* all components processed */
	ctep = comp_tbl (i);			/* pointer to component entry */
	if comp.ignore = 1
	then goto copy_tables;
	sblkp = addrel (bx_$bsymp, bx_$s_lng);		/* pointer to location of new section */
	lng = comp.clngns;				/* length of section to be copied */
	sblkp -> symbolsection = comp.csymp -> symbolsection;
						/* copy symbol section */
	sblkp -> sb.symb_base = bit (-bin (bx_$s_lng, 18), 18);
	textoffset = comp.crelt;
	intoffset = comp.creli;
	if bx_$bound_sep_stat = 0
	then if comp.separate_static = 1
	     then intoffset = intoffset + 8;		/* must account for linkage header */
	symboffset = comp.crels;			/* copy relocation counter values */

	call get_relinfo_$init (comp.crlsp);		/* initiate relocation bit lookup */
	ext.offset = 0;
relocate_table:
	call get_relinfo_ (addr (ext));
	if relinfo = "overflow"
	then goto thread_blocks;
	if ext.offset > lng
	then goto thread_blocks;
	wordp = addrel (sblkp, ext.offset);		/* pointer to relocatable word */
	if side = "lhe"
	then relocate = bin (word.lhe18, 18);
	else relocate = bin (word.rhe18, 18);

	if relinfo = "text    "
	then do;
	     relocate = relocate + textoffset;
	     goto restore_halfword;
	end;

	else if relinfo = "lnk18   "
	then do;
	     relocate = 0;				/* zero out to be repatched */
	     goto restore_halfword;
	end;

	else if relinfo = "symb    "
	then do;
	     relocate = relocate + symboffset;
	     goto restore_halfword;
	end;

	else if relinfo = "int18   "
	then do;
	     relocate = relocate + intoffset;
	     goto restore_halfword;
	end;

	else if relinfo = "negsymb "
	then do;
	     relocate = -1;
	     if side = "lhe"
	     then addr (relocate) -> word.rhe18 = word.lhe18;
	     else addr (relocate) -> word.rhe18 = word.rhe18;
	     relocate = relocate + symboffset;
	     goto restore_halfword;
	end;

	else if relinfo = "def     "
	then do;
	     call com_err_ (0, errname, "relocation ^a for word ^o in symbol of ^a not currently handled by binder",
		relinfo, ext.offset, comp.filename);
	     goto relocate_table;
	end;

	else if relinfo = "selfrel  "
	then goto relocate_table;

	call com_err_ (0, errname, "relocation ^a illegal for word ^o in symbol of ^a", relinfo, ext.offset,
	     comp.filename);
	bx_$fatal_error = 1;
	goto relocate_table;

restore_halfword:
	if side = "lhe"
	then word.lhe18 = addr (relocate) -> word.rhe18;
	else word.rhe18 = addr (relocate) -> word.rhe18;
	goto relocate_table;

thread_blocks:
	previous_block -> sb.next_block = bit (bin (bx_$s_lng, 18), 18);
	previous_length = comp.clngns + comp.cpads;
	bx_$s_lng = bx_$s_lng + previous_length;
	previous_block = sblkp;
	if comp.table_deleted = 1			/* symbol section has been truncated */
	then if sblkp -> sb.area_ptr
	     then do;

		pl1_sbp = addrel (sblkp, sblkp -> sb.area_ptr);
		if pl1_sb.identifier = "pl1info"
		then do;				/* don't leave dangling thread */
		     pl1_sb.root = "0"b;
		     string (pl1_sb.map) = "0"b;
		     pl1_sb.flags.table_removed = "1"b;
		end;
	     end;
	goto copy_tables;

return:
	return;

%page;
%include bindext;
%page;
%include comptbl;
%page;
%include symbol_block;
%page;
%include pl1_symbol_block;

     end relocate_symbol_;
