/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


bind:
oldbind:
bd:
	procedure ();

/* *	BIND -- the command procedure of the Multics binder
   *
   *
   *	Redesigned and coded by Michael J. Spier, September 17, 1970
   *	Modified 75.06.24 by M. Weaver to remove no_old_alm option
   *	Modified 5/76 by M. Weaver to add -brief option, identify bad control args and improve names in messages
   *	Completely reimplemented, to make comprehensible, 01/14/81 W. Olin Sibert; Added several features:
   *	  warning for no bindfile, -force_order, -force_update, warning for update by earlier version.
   *	Modified 11/22/83 by M. Weaver to initialize inp.bindfile_name
   *	Modified 11/06/84 by M. Sharpe to implement -segment, -archive and -bindfile;
   *	  bind now uses a new version of binder_input.incl.pl1 which removes the limitation
   *	  on the number of archives/segments and object components.
   *	Modified 01/07/84 by M. Sharpe to correct problem with control argument processing;
   */

/*   Automatic   */

dcl  access_mode			bit (3);
dcl  archive_dname			char (168);
dcl  archive_ename			char (32);
dcl  archive_idx			fixed bin;
dcl (argno, nargs)			fixed bin;
dcl  argp				pointer;
dcl  argl				fixed bin (21);
dcl  bindfile_flag			bit (1) aligned init ("0"b);
dcl  bindfile_to_use		char (32);
dcl  code				fixed bin (35);
dcl  component_name			char (32) init ("");
dcl  comp_ptr			pointer;
dcl 1 comp_info			aligned like archive_component_info;
dcl  ctl_arg			char (10) varying;
dcl  (inpp, p)			pointer;   /* pointers which must be declared to use binder_input.incl.pl1 */
dcl  error_sw			bit (1) aligned;
dcl  ignore_not_found		bit (1) aligned;
dcl  obj_idx			fixed bin;
dcl  real_dname			char (168);
dcl  real_ename			char (32);
dcl  standalone_segment		bit (1) aligned init ("0"b);
dcl  update_idx			fixed bin;

/*   Based   */

dcl  arg				char (argl) based (argp);


/*   Builtin   */

dcl  (addr, char, index, length,
	  null, reverse, rtrim,
	  search, substr) 	builtin;

/*   Condition   */

dcl  cleanup			condition;

/*   Entries   */

dcl  absolute_pathname_		entry (char(*), char(*), fixed bin(35));
dcl  absolute_pathname_$add_suffix	entry (char (*), char (*), char (*), fixed bin (35));
dcl  archive_$next_component_info	entry (pointer, fixed bin (24), pointer, pointer, fixed bin (35));
dcl  bind_			entry (pointer);
dcl  com_err_			entry options (variable);
dcl  cu_$arg_count			entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr			entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  date_time_			entry (fixed bin (71), char (*));
dcl  expand_pathname_$component	entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  expand_pathname_$add_suffix	entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_temp_segment_		entry (char(*), ptr, fixed bin(35));
dcl  hcs_$terminate_noname		entry (pointer, fixed bin (35));
dcl  initiate_file_			entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  release_temp_segment_		entry (char(*), ptr, fixed bin(35));
dcl  translator_info_$get_source_info	entry (pointer, char (*), char (*), fixed bin (71), bit (36) aligned,
				       fixed bin (35));

/*   External Static   */

dcl  error_table_$archive_pathname	fixed bin (35) external static;
dcl  error_table_$badopt		fixed bin (35) external static;
dcl  error_table_$noarg		fixed bin (35) external static;
dcl  error_table_$noentry		fixed bin (35) external static;
dcl  error_table_$pathlong		fixed bin (35) external static;

/*   Internal Static   */

dcl  ARCHIVE_SUFFIX			char (7) internal static options (constant) init ("archive");
dcl  WHOAMI			char (32) internal static options (constant) init ("bind");

dcl  binder_invoked			bit (1) aligned internal static init ("0"b);	/* Prevent recursion */


%page;

	if binder_invoked then do;
	     call com_err_ (0, WHOAMI, "^a^/^a",
		"The binder may not be invoked while a previous invocation is",
		"suspended. Use the ""release"" or ""start"" command first.");
	     return;				/* Avoid resetting the flag, of course */
	     end;


	inpp = null;
	on cleanup call CLEAN_UP ();


	binder_invoked = "1"b;			/* Set recursion-prevention flag */

	call get_temp_segment_ (WHOAMI, inpp, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Could not obtain temporary segment. Report to maintainer.");
	     return;
	end;

	inp.ntotal = 0;

	inp.version = BINDER_INPUT_VERSION_2;
	inp.caller_name = WHOAMI;

	inp.bindfilep = null ();
	inp.bindfile_name = "";

	update_idx = 0;
	archive_idx = 0;
	error_sw = "0"b;				/* Only set when multiple errors might occur */
	ignore_not_found = "0"b;


	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);

MAIN_RETURN:   if error_sw then			/* Make mention of the fact that nothing will happen */
		call com_err_ (0, WHOAMI, "Fatal errors have occurred; binding will not be attempted.");

	     call CLEAN_UP ();			/* This is the ONLY exit from this program */
	     return;				/* except for the one which prevents recursion */
	     end;

%page;


/* Now, loop through the arguments, picking up the options and the archive pathnames.
   This loop initiates all the supposed archives, and fills in inp.archive_file for
   each one, but does not inspect their contents.
   */

/* The first part of the loop handles the simple control argument options */

	argno = 1;
	do while (argno <= nargs);
	     call cu_$arg_ptr (argno, argp, argl, (0));

	     if (arg = "-debug") | (arg = "-db") then
		inp.debug = "1"b;

	     else if (arg = "-map") then do;
		inp.list_seg = "1"b;
		inp.map_opt = "1"b;
		end;

	     else if (arg = "-list") | (arg = "-ls") then do;
		inp.list_opt = "1"b;
		inp.list_seg = "1"b;
		inp.map_opt = "1"b;
		end;

	     else if (arg = "-brief") | (arg = "-bf") then
		inp.brief_opt = "1"b;

	     else if (arg = "-force_order") | (arg = "-fco") then
		inp.force_order_opt = "1"b;

%page;


/* The next portion of the loop handles some of the more complicated control arguments */

	     else if (arg = "-update") | (arg = "-ud") then do;
		if inp.narc = 0 then do;
NO_PRIMARY_ARCHIVE:      call com_err_ (0, WHOAMI, "^a specified before any primary archive names.", arg);
		     goto MAIN_RETURN;
		     end;

		if update_idx > 0 then do;
MULTIPLE_UPDATES:	     call com_err_ (0, WHOAMI, "Multiple -update or -force_update control arguments not allowed.");
		     goto MAIN_RETURN;
		     end;

		update_idx = inp.narc + 1;		/* Start updating with the next archive */
		end;

	     else if (arg = "-force_update") | (arg = "-fud") then do;
		if inp.narc = 0 then
		     goto NO_PRIMARY_ARCHIVE;
		if update_idx > 0 then
		     goto MULTIPLE_UPDATES;

		ignore_not_found = "1"b;		/* Set the flag to ignore update archives not found */
		update_idx = inp.narc + 1;		/* Start updating with the next archive */
		end;

%page;

/* This portion handles control args that require another argument immediatedly following them */
	     else if (arg = "-segment") | (arg = "-sm") then do;
		if argno = nargs then goto MISSING_ARG;

		ctl_arg = arg;
		call cu_$arg_ptr (argno+1, argp, argl, (0)); /* Just checking! */
		if char (arg, 1) = "-" then do;
		     call com_err_ (error_table_$badopt, WHOAMI,
			"^a ^a^/ ^a must be followed by a pathname.^/", ctl_arg, arg, ctl_arg);
		     goto MAIN_RETURN;
		end;

		standalone_segment = "1"b;
	     end;

	     else if (arg = "-archive") | (arg = "-ac") then do;

		if argno = nargs then do;
MISSING_ARG:	     call com_err_ (error_table_$noarg, WHOAMI, "^a must be followed by a pathname", arg);
		     goto MAIN_RETURN;
		end;

		ctl_arg = arg;
		call cu_$arg_ptr (argno+1, argp, argl, (0)); /* Just checking! */
		if char (arg, 1) = "-" then do;
		     call com_err_ (error_table_$badopt, WHOAMI,
			"^a ^a^/ ^a must be followed by a pathname.^/", ctl_arg, arg, ctl_arg);
		     goto MAIN_RETURN;
		end;

		standalone_segment = "0"b;
	     end;
	     
	     else if (arg = "-bindfile") | (arg = "-bdf") then do;
		if bindfile_flag then do;
		     call com_err_ (0, WHOAMI, "Multiple -bindfile control args not allowed.");
		     goto MAIN_RETURN;
		end;

		if argno = nargs then do;
		     call com_err_ (error_table_$noarg, WHOAMI,
			"^a must be followed by an entry name.", arg);
		     goto MAIN_RETURN;
		end;

		bindfile_flag = "1"b;		/* don't use this arg again */

		ctl_arg = arg;
		argno = argno + 1;
		call cu_$arg_ptr (argno, argp, argl, (0));
		if (search (arg, "<>") > 0) | (index (arg, "-") = 1)
		then do;
		     call com_err_ (0, WHOAMI,
			"^a must be followed by an entry name ^[not^;not a pathname.^] ^a.",
			ctl_arg, (index (arg,"-") = 1), arg);
		     error_sw = "1"b;
		end;

		if (argl > 4 & index (arg, ".bind") = argl - 4) then do;  /* has .bind suffix */
		     if argl > 32 then do;		/* too long */
			call com_err_ (0, WHOAMI, "Bindfile name is too long. ^a", arg);
			error_sw = "1"b;
		     end;
		     else bindfile_to_use = arg;
		end;

		else do;				/* no .bind suffix */
		     if argl > 27 then do;		/* too long */
			call com_err_ (0, WHOAMI, "Bindfile name is too long. ^a", arg);
			error_sw = "1"b;
		     end;
		     else bindfile_to_use = arg || ".bind";
		end;
	     end;					/* -bindfile */

	     else if char (arg, 1) = "-" then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

%page;
/* The final portion deals with initiating archives and getting information about them */

	     else do;				/* If not a control argument, must be an archive name */
		inp.ntotal,			/* update the array bound */
		archive_idx = archive_idx + 1;	/* and the index */
		inp.archive(archive_idx).ptr = null;	/* initialize the ptr so that CLEAN_UP won't break */


		if standalone_segment then call absolute_pathname_
		     (arg, inp.archive (archive_idx).path, code);
		else call absolute_pathname_$add_suffix
		     (arg, ARCHIVE_SUFFIX, inp.archive (archive_idx).path, code);
		if code ^= 0 then do;
BAD_ARCHIVE_PATH:	     call com_err_ (code, WHOAMI, "^a", arg);
		     goto MAIN_RETURN;
		     end;

		if standalone_segment then call expand_pathname_$component
		     (inp.archive (archive_idx).path, archive_dname, archive_ename, component_name, code);
		else call expand_pathname_$add_suffix (inp.archive (archive_idx).path,
		     ARCHIVE_SUFFIX, archive_dname, archive_ename, code);
		if code ^= 0 then
		     goto BAD_ARCHIVE_PATH;
		if component_name ^= "" then do;
		     call com_err_ (error_table_$archive_pathname, "bind_", inp.archive (archive_idx).path);
		     component_name = "";
		     archive_idx = archive_idx - 1;
		     goto SKIP_ARCHIVE;
		end;

		inp.archive(archive_idx).entryname = archive_ename;

		call initiate_file_ (archive_dname, archive_ename, access_mode,
		     inp.archive (archive_idx).ptr, inp.archive (archive_idx).bc, code);

		if inp.archive (archive_idx).ptr = null () then do;
		     if ignore_not_found then		  /* We can skip it */
			if code = error_table_$noentry then do;
			     archive_idx = archive_idx - 1; /* Keep this one out of the array */
			     goto SKIP_ARCHIVE;
			     end;

BAD_SEGMENT:	     call com_err_ (code, WHOAMI, "^a", inp.archive (archive_idx).path);
		     goto MAIN_RETURN;
		     end;

		if ^inp.brief_opt			/* Warn about empties */
		     & inp.archive (archive_idx).bc = 0 then
		     call com_err_ (0, WHOAMI, "Warning: ^a is empty.", inp.archive (archive_idx).path);

		call translator_info_$get_source_info (inp.archive (archive_idx).ptr, real_dname, real_ename,
		     inp.archive (archive_idx).dtm, inp.archive (archive_idx).uid, code);
		if code ^= 0 then
		     goto BAD_SEGMENT;

		if (length (rtrim (real_dname)) + length (rtrim (real_ename)) + 1) > 168 then do;
		     call com_err_ (error_table_$pathlong, WHOAMI, "^a>^a", real_dname, real_ename);
		     goto MAIN_RETURN;
		     end;

		inp.archive (archive_idx).real_path = rtrim (real_dname) || ">" || rtrim (real_ename);

		inp.archive (archive_idx).standalone_seg = standalone_segment;

		if archive_idx = 1 then		/* Apply default value for output segment */
		     inp.bound_seg_name = substr (archive_ename, 1,
			(length (rtrim (archive_ename)) - (length (ARCHIVE_SUFFIX) + 1)));

		if update_idx > 0 then		/* Update the counts in the input */
		     inp.nupd = inp.nupd + 1;
		else inp.narc = inp.narc + 1;
SKIP_ARCHIVE:
	     end;				/* Of processing one archive */
	     if char (arg, 1) = "-" & arg ^= "-segment" & arg ^= "-sm" then standalone_segment = "0"b;
					/* -segment is only in effect until the next control argument. */
	     argno = argno + 1;

	end; 					/* Of loop through arguments */

	if inp.narc = 0 then do;
	     call com_err_ (error_table_$noarg, WHOAMI,
		"^/Usage:^-^a archive_path{s} {-update update_archive_path{s}} {-control_args}", WHOAMI);
	     goto MAIN_RETURN;
	     end;

	if (update_idx > 0) & (inp.nupd = 0) & (^ignore_not_found) then do;
	     call com_err_ (0, WHOAMI, "-update was specified, but not followed by any update archive names.");
	     goto MAIN_RETURN;
	     end;

%page;
	comp_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;  /* In preparation for calling archive */

	do archive_idx = 1 to inp.ntotal;		/* Go through all the input archives */
	     comp_ptr = null ();			/* Set up to loop through components */

GET_NEXT_OBJECT:
	     if inp.archive (archive_idx).standalone_seg then do;
		comp_info.comp_ptr = inp.archive (archive_idx).ptr;
		comp_info.comp_bc = inp.archive (archive_idx).bc;
		comp_info.name = inp.archive (archive_idx).entryname;
		comp_info.time_updated,
		     comp_info.time_modified = inp.archive (archive_idx).dtm;
	     end;

	     else do;
		call archive_$next_component_info
		     (inp.archive (archive_idx).ptr, inp.archive (archive_idx).bc, comp_ptr, addr (comp_info), code);

		if code ^= 0 then do;
		     call com_err_ (code, WHOAMI, "Searching ^a.", inp.archive (archive_idx).path);
		     goto MAIN_RETURN;
		end;

		if comp_ptr = null () then		/* Nothing more in this archive */
		     goto GET_NEXT_ARCHIVE;
	     end;

	     if substr (reverse (rtrim (comp_info.name)), 1, 5) = reverse (".bind") then do; /* A bindfile */
		if bindfile_flag then do;		/* -bindfile was specified */
		     if comp_info.name ^= bindfile_to_use then goto IGNORE_BINDFILE;
		end;

		else if inp.bindfilep ^= null () then do;
		     if archive_idx <= inp.narc then do; /* We are not processing an update archive */
			if ^inp.brief_opt then	/* Complain about it if not brief */
			     call com_err_ (0, WHOAMI, "Warning: Multiple bindfile ^a in ^a ignored.",
				comp_info.name, inp.archive (archive_idx).path);

			goto IGNORE_BINDFILE;	/* and ignore it in any case */
		     end;				/* of case for duplicate bindfile in non-update archive */

		     if ^inp.brief_opt then		/* Mention it if not brief */
			call com_err_ (0, WHOAMI, "Warning: ^a of ^a^/^2xreplaced by: ^a of ^a",
			     inp.bindfile_name, inp.archive (inp.bindfile_idx).path,
			     comp_info.name, inp.archive (archive_idx).path);
		end;				/* of checking for duplicate bindfile */

		inp.bindfilep = comp_info.comp_ptr;	/* In any case, make this the bindfile */
		inp.bindfile_bc = comp_info.comp_bc;
		inp.bindfile_idx = archive_idx;	/* Index of archive from which this came */
		inp.bindfile_name = comp_info.name;
		inp.bindfile_time_up = comp_info.time_updated;
		inp.bindfile_time_mod = comp_info.time_modified;

IGNORE_BINDFILE:					/* Now that we have it, go on to the next component */
		if inp.archive (archive_idx).standalone_seg then goto GET_NEXT_ARCHIVE;
		else goto GET_NEXT_OBJECT;	
		end;				/* Of processing a bindfile entry */
%page;

/* If we get here, we are known to be processing a "object" component. Put it in
   the list, perhaps replacing one which was there earlier, and complaining about
   a variety of things. */

	     do obj_idx = 1 to inp.nobj;		/* Look for this one elsewhere in the input stream */
		if inp.obj (obj_idx).filename = comp_info.name then do;
		     if archive_idx <= inp.narc then do;
			call com_err_ (0, WHOAMI, "Duplicate object ^a in ^a",
			     comp_info.name, inp.archive (archive_idx).path);

			error_sw = "1"b;		/* Report all of these, but don't try binding */

			if inp.archive (archive_idx).standalone_seg then goto GET_NEXT_ARCHIVE;
			else goto GET_NEXT_OBJECT;	

			end;

		     inp.obj (obj_idx).base = comp_info.comp_ptr; /* Replace the previous entry for this component */
		     inp.obj (obj_idx).bitcount = comp_info.comp_bc; /* The name, of course, is already correct */

		     if inp.obj (obj_idx).time_mod > comp_info.time_modified then
			if ^inp.brief_opt then	/* Mention it, in case the user has made a mistake */
			     call com_err_ (0, WHOAMI,
				"Note: ^a in ^a (modified ^a)^/^3xreplaced by earlier (^a) copy in ^a",
				comp_info.name, inp.archive (inp.obj (obj_idx).archive_idx).path,
				DATE_TIME (inp.obj (obj_idx).time_mod), DATE_TIME (comp_info.time_modified),
				inp.archive (archive_idx).path);

		     inp.obj (obj_idx).time_mod = comp_info.time_modified;
		     inp.obj (obj_idx).time_up = comp_info.time_updated;
		     inp.obj (obj_idx).archive_idx = archive_idx;

	     inp.obj(obj_idx).to_be_ignored = (inp.obj(obj_idx).bitcount = 0);
						/* set ignore bit if seg is zero length; */
						/* reset it if it was previously set & bitcount > 0 */
	     if inp.obj(obj_idx).bitcount = 0 then inp.zeroseg_seen = "1"b;
						/* Tell parse_bindfile_ to check for zsegs */
						/* Having found the replacement, look no further */
		     if inp.archive (archive_idx).standalone_seg then goto GET_NEXT_ARCHIVE;
		     else goto GET_NEXT_OBJECT;	

		     end; 			/* Of replacing a component */
		end;				/* of loop through objects */

%page;

/* If we fall through to here, the object we are processing was not already in our
   list of objects, so we must add it to the list. */


	     obj_idx = inp.nobj + 1;

	     inp.obj (obj_idx).filename = comp_info.name; /* These items need only be set the first time */
	     inp.obj (obj_idx).option = ""b;		/* No options yet, of course */

	     inp.obj (obj_idx).base = comp_info.comp_ptr;
	     inp.obj (obj_idx).bitcount = comp_info.comp_bc;
	     inp.obj (obj_idx).time_mod = comp_info.time_modified;
	     inp.obj (obj_idx).time_up = comp_info.time_updated;
	     inp.obj (obj_idx).archive_idx = archive_idx;

	     inp.obj(obj_idx).to_be_ignored = (inp.obj(obj_idx).bitcount = 0);
						/* set ignore bit if seg is zero length; */
						/* reset it if it was previously set & bitcount > 0 */
	     if inp.obj(obj_idx).bitcount = 0 then inp.zeroseg_seen = "1"b;
						/* Tell parse_bindfile_ to check for zsegs */
	     inp.nobj = obj_idx;

	     if ^inp.archive (archive_idx).standalone_seg
		then goto GET_NEXT_OBJECT;		/* Having added it, go find another */

GET_NEXT_ARCHIVE:					/* This "loop" is only reached after running out of */
						/* components in an archive or processing a standalone */
	     end; 				/* segment -- see the top of the loop for details. */

/* Having done all the processing of the input archives, we now just call
   the subroutine which does the real work, and hope for the best.
   */

	if error_sw then				/* Reject the binding attempt, because something happened */
	     goto MAIN_RETURN;

	if inp.bindfilep = null () then do;		/* Make this be more useful */
	     if bindfile_flag then do;		/* Bindfile specified but not found -- ERROR */
		call com_err_ ((0), WHOAMI,
		     "Specified bindfile ^a was not found in the input archive^[s^].",
		     bindfile_to_use, ((inp.narc + inp.nupd) ^= 1));
		goto MAIN_RETURN;
	     end;

	     else					/* No bindfiles specified or found -- Warning */
		if ^inp.brief_opt then 		/* But only if we're allowed to be noisy */
		call com_err_ (0, WHOAMI, "Warning: No bindfile was found in the input archive^[s^].",
		     ((inp.narc + inp.nupd) ^= 1));
	end;

	call bind_ (inpp);

	goto MAIN_RETURN;				/* All done. Finish up, and return */

%page;

CLEAN_UP: proc ();

/* cleanup and exit procedure -- terminates all the input archives */

dcl  idx fixed bin;
dcl  tempp pointer;

	if inpp ^= null then do;
	     do idx = 1 to inp.ntotal;
		if inp.archive (idx).ptr ^= null () then do;
		     tempp = inp.archive (idx).ptr;
		     inp.archive (idx).ptr = null ();
		     call hcs_$terminate_noname (tempp, (0));
		end;
	     end;

	     call release_temp_segment_ (WHOAMI, inpp, (0));
	     binder_invoked = "0"b;			/* Always turn off the flag */
	end;

	return;
	end CLEAN_UP;



DATE_TIME: proc (P_time) returns (char (14));

dcl  P_time fixed bin (71) parameter;

dcl  ret_str char (14);
dcl  date_str char (24);


	call date_time_ (P_time, date_str);

	substr (ret_str, 1, 8) = substr (date_str, 1, 8);
	substr (ret_str, 9, 1) = " ";
	substr (ret_str, 10, 2) = substr (date_str, 11, 2);
	substr (ret_str, 12, 1) = ":";
	substr (ret_str, 13, 2) = substr (date_str, 13, 2);

	return (ret_str);
	end DATE_TIME;

%page;	%include binder_input;
%page;	%include archive_component_info;

	end bind;
