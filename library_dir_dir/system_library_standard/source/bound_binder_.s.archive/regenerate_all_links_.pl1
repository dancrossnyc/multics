/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Rewritten to regenerate any *system links remaining unresolved in the
     link_regeneration_table rather than all links in the linkage section.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */

regenerate_all_links_:
     proc (ctep);

/**********************************************************************/
/*							*/
/*	Name:	regenerate_all_links_			*/
/*	Input:	ctep (component table entry pointer)		*/
/*	Function:	scans the link_regeneration_table for the given	*/
/*		component and regenerates any link that has not	*/
/*		already been regenerated.  This is primarily used	*/
/*		to pick up unreferenced *system links for fortran	*/
/*		block_data subprograms.			*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

dcl	i		fixed bin;
dcl	extp		ptr;
dcl	addr		builtin;
dcl	fixed		builtin;
dcl	decode_link_	entry (ptr) returns (bit (1) aligned);
dcl	ext_link_		entry (ptr);

dcl	1 ext		aligned like external_ref;	/**/
%include extref;

/**/
%include comptbl;

/**/
%include linkdcl;

/**/
%include bndtbl;

/**/
	extp = addr (ext);
	lrtp = comp.clrtp;
	ext.compent_ptr = ctep;
	ext.section = "none";
	ext.offset = 0;
	ext.dont_relocate = "1"b;
	ext.ref_ptr = comp.clnkp;			/* initialize so ext_link_ won't blow up */

	do i = 1 to lrt.count;
	     if lrt.regenerated (i) = UNRESOLVED
	     then do;
		ext.loffset = lrt.start_offset + ((i - 1) * 2);
		if ^decode_link_ (extp)
		then if (fixed (ext.type, 18) = 5) & (fixed (ext.code15, 18) = 5)
		     then call ext_link_ (extp);
	     end;
	end;

     end regenerate_all_links_;
