/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


resolve_linkage_error: rle: proc;

/* RESOLVE_LINKAGE_ERROR - satisfy a linkage_error with a specified pointer.

   THVV 2/77, after Max Smith */
/* Usage message added 11/02/79 S. Herbst */
/* Modified 7 Nov 83 by C Spitzer. use cv_ptr_ if cv_entry_ fails. Maybe not an object segment */

dcl  argl fixed bin,				/* length of arg */
     bchr char (argl) based (tp) unal,			/* for looking at argument */
     argno fixed bin,				/* steps thru argument list to command */
     stackp ptr,					/* pointer to rle's stack frame */
     p ptr,					/* ptr to user proc */
     entry_to_use entry variable,
     link_pair_ptr ptr,				/* ptr to linkage fault */
     faultsp ptr,
     tp ptr,					/* work pointer */
     got_entry bit (1),
     ec fixed bin (35);				/* system error code */

dcl (addr, baseno, baseptr, null, ptr, rel) builtin;

dcl 1 instr (0:1) based aligned,
    2 address bit (18) unal,
    2 op_code bit (12) unal,
    2 mod bit (6) unal;

dcl 1 condinfo aligned,				/* return struc from find_condition_info_ */
    2 mcptr ptr,
    2 version fixed bin,
    2 condition_name char (32) var,
    2 infoptr ptr,
    2 wcptr ptr,
    2 loc_ptr ptr,
    2 flags,
      3 crawlout bit (1) unal,
      3 pad1 bit (35) unal,
    2 user_loc_ptr ptr,
    2 pad (4) bit (36);

dcl 1 link based (link_pair_ptr) aligned,
    2 tbr bit (18) unal,
    2 xx bit (12) unal,
    2 ft bit (6) unal,
    2 ca bit (18) unal,
    2 xx1 bit (18) unal;

dcl 1 based_entry_overlay based (addr (entry_to_use)) aligned,
    2 procedure_ptr ptr,
    2 stack_ptr ptr;

dcl error_table_$no_linkage fixed bin(35) ext static;

dcl (com_err_, com_err_$suppress_name) entry options (variable),
     find_condition_frame_ entry (ptr) returns (ptr),
     cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry),
     cv_ptr_ entry (char(*), fixed bin(35)) returns(ptr),
     prepare_mc_restart_ entry (ptr, fixed bin (35)),
     find_condition_info_ entry (ptr, ptr, fixed bin (35)),
     cu_$stack_frame_ptr entry (ptr),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));

/* ======================================================= */

	call cu_$stack_frame_ptr (stackp);		/* get current stack pointer */
	condinfo.version = 1;
	ec = 0;
	got_entry = "0"b;
	do argno = 1 by 1 while (ec = 0);
	     call cu_$arg_ptr (argno, tp, argl, ec);	/* look at all arguments */
	     if ec = 0 then do;
		if got_entry then do;
USAGE:		     call com_err_$suppress_name (0, "resolve_linkage_error",
			"Usage:  resolve_linkage_error virtual_entry");
		     return;
		end;
		got_entry = "1"b;
		entry_to_use = cv_entry_ (bchr, null, ec);
		if ec ^= 0 then do;
		     if ec = error_table_$no_linkage then do;
			p = cv_ptr_ (bchr, ec);
			if ec ^= 0 then goto nent;
		     end;
		     else do;
nent:			call com_err_ (ec, "resolve_linkage_error", "cannot locate ^a", bchr);
			return;
		     end;
		end;
	          else do;
		     p = based_entry_overlay.procedure_ptr;
		     if p = null then go to nent;
		end;
	     end;
	end;
	if ^got_entry then go to USAGE;

loop:	faultsp = find_condition_frame_ (stackp);	/* Search for fault frame. */
	if faultsp = null then do;			/* .. error if not found */
	     call com_err_ (0, "resolve_linkage_error", "no linkage fault on stack");
	     return;
	end;
	call find_condition_info_ (faultsp, addr (condinfo), ec); /* Decode the frame */
	if condinfo.condition_name = "linkage_error" then do;
	     scup = addr (condinfo.mcptr -> mc.scu);	/* Found linkage error. */
	     link_pair_ptr = ptr (baseptr ("000"b || scu.tpr.tsr), scu.ca); /* Locate link */
	     if link.ft ^= "46"b3 then do;		/* Check that it's really a link fault */
		call com_err_ (0, "resolve_linkage_error", "Link pair at ^p lacks FT2 modifier. No change.",
		     link_pair_ptr);
		return;
	     end;
	     link.tbr = baseno (p);			/* Patch link to be entry found above */
	     link.ca = rel (p);
	     link.ft = "43"b3;			/* Over-write fault tag 2 */
	     call prepare_mc_restart_ (condinfo.mcptr, ec); /* Check that MC are restartable */
	     if ec ^= 0 then call com_err_ (ec, "resolve_linkage_error", "");
	     return;				/* Success */
	end;
	stackp = faultsp;				/* Wrong fault frame */
	go to loop;

%include mc;

     end resolve_linkage_error;
