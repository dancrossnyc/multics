/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


prepare_mc_restart_: proc (amcptr, code);

/* PREPARE_MC_RESTART_ - Modify machine conditions and
   insure that control unit can be restored.

   This program has four entry points:

   prepare_mc_restart_	Just check machine conditions.

   prepare_mc_restart_$retry	Make faulting instruction retry from the beginning.

   prepare_mc_restart_$replace Replace faulting instruction with argument, then
   .			continue in sequence.

   prepare_mc_restart_$tra	Restart execution at some other location in virtual memory.

   THVV */

/* parameters */

dcl  amcptr ptr,					/* ptr to machine conditions */
     code fixed bin (35);				/* err code */

/* automatic */

dcl  dummy ptr;					/* Temporary ptr for $tra check */
dcl (high, low) fixed bin;				/* Current segment number maxima */

/* based */

dcl 1 dum aligned based (addr (dummy)),			/* Overlay for a pointer. */
    2 xxw bit (3) unal,
    2 segno bit (15) unal,				/* .. segment number */
    2 ring bit (3) unal,				/* .. ring number */
    2 xxx bit (9) unal,
    2 its bit (6) unal,				/* .. ITS modifier */
    2 offset bit (18) unal,				/* .. segment address */
    2 xxy bit (3) unal,
    2 bit_offset bit (6) unal,			/* .. bit offset */
    2 xxz bit (3) unal,
    2 mod bit (6) unal;				/* .. further indirection */

/* external static */

dcl  error_table_$bad_arg_acc fixed bin (35) ext,		/* Return if bad mcptr */
     error_table_$no_restart fixed bin (35) ext,		/* Return if mc are illegal. */
     error_table_$bad_ptr fixed bin (35) ext;		/* Return if restart loc is unlegal. */

/* entries */

dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);	/* Obtain size of address space from KST */
dcl  get_ring_ entry () returns (fixed bin);		/* Obtain current execution ring. */

/* builtins */

dcl (addr, fixed, null) builtin;

/* include files */

%include mc;

/* ======================================================= */

	call check_mc;				/* All he wants is a check of mach cond. */
	if code ^= 0 then return;			/* If there is an error. */
	return;					/* Restart is plausible. */

/* ------------------------------------------------------ */

retry:	entry (amcptr, code);

	call check_mc;				/* Check machine cond. */
	if code ^= 0 then return;			/* Give up if no good. */

	scu.rfi = "1"b;				/* Refetch the instruction. */
	scu.if = "1"b;				/* ... */
	return;

/* ------------------------------------------------------ */

replace:	entry (amcptr, new_instr, code);

dcl  new_instr bit (36);				/* The instruction to replace faulting instr. */

	call check_mc;				/* Make sure valid machine cond. */
	if code ^= 0 then return;			/* Die if no good. */

	scu.rfi = "0"b;				/* No refetch instruction. */
	scu.if = "0"b;				/* Fault not in instruction fetch (so I buffer is good) */
	scu.even_inst = new_instr;			/* Replace instruction */
	return;

/* ------------------------------------------------------ */

tra:	entry (amcptr, newppr, code);

dcl  newppr ptr;					/* New execution point desired. */

	call check_mc;				/* Validate machine conditions. */
	if code ^= 0 then return;			/* Error if no good. */
	dummy = newppr;				/* Copy pointer. */
	if fixed (dum.segno, 15) > low + high then do;	/* Check segment which is target of transfer. */
ilret:	     code = error_table_$bad_ptr;		/* Nasty. This would cause a segment fault. */
	     return;
	end;
	if dum.its ^= "100011"b then go to ilret;	/* Our argument should be a regular pointer. */
	if dum.ring ^= scu.ppr.prr then go to ilret;	/* Don't change rings. */
	if dum.bit_offset then go to ilret;		/* Silly, can't start in middle of a word. */
	if dum.mod then go to ilret;			/* This program does not handle further indirection. */

	scu.ppr.psr = dum.segno;			/* Copy segment number. */
	scu.ilc = dum.offset;			/* Copy offset. */

	scu.rfi = "1"b;				/* Invalidate I buffer, so next instruction will be */
	scu.if = "1"b;				/* .. pulled from memory. */
	return;

/* ======================================================= */

check_mc:	proc;

dcl  i fixed bin;

	     mcp = amcptr;				/* Copy user machine cond ptr. */
	     code = error_table_$bad_arg_acc;		/* Assume failure. */
	     if mcp = null then return;		/* Die right away if he has no machine cond. */
	     scup = addr (mc.scu);			/* Get ptr to SCU data. */
	     code = error_table_$no_restart;		/* Assume mc are garbage. */

	     call hcs_$high_low_seg_count (low, high);	/* Get address space range. */

	     do i = 0 to 7;				/* First check the PR's. */
		dummy = prs (i);			/* Each should be an ITS */
		if dum.its ^= "100011"b then return;	/* ... */
		if dum.mod then return;		/* .. and have no junk. */
	     end;
	     if fixed (dum.segno, 15) > low + high then return; /* Validate SB */

	     if fixed (scu.ppr.prr, 3) ^= get_ring_ () then return; /* Forbid ring switches. */

	     if ^(scu.cu.rpt|scu.cu.rd) then go to ok1;	/* Check repeat-double bits. Must have 0 or 1 */
	     if ^(scu.cu.rpt|scu.cu.rl) then go to ok1;	/* .. */
	     if ^(scu.cu.rd|scu.cu.rl) then go to ok1;	/* .. */
	     return;				/* Bad. Has two repeat bits on at once. CPU wd hang. */

ok1:	     if scu.cu.xde then if scu.cu.xdo then return; /* Cannot have both XDE and XDO. Hangs CPU */

	     if scu.cu.pot then if scu.cu.pon then return; /* Similarly here. No IT with returns. */

	     if scu.ir.abs then return;		/* No absolute mode. */

	     if scu.ppr.p then return;		/* No return into privileged procedure. */

	     if scu.ir.parm then return;		/* User not to mask parity. */

	     if fixed (scu.ppr.psr, 15) > low + high then return; /* Validate ppr. */
	     if fixed (scu.tpr.tsr, 15) > low + high then return; /* Validate tpr. */

	     code = 0;				/* Success. Machine conditions look pretty good. */

	end check_mc;

     end prepare_mc_restart_;
