/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


reprint_error:
re:
     procedure;

/* This procedure looks back in the stack for frames belonging to default_error_handler_
   and calls default_error_handler_ with the argument list it has then.  It would
   normally be used if one wanted his messages in a diferent mode (long instead of brief, etc.) */

/* initially coded by M. Weaver 13 July 1971 */
/* modified by M. Weaver 17 August 1971 */
/* modified by M. Weaver 28 January 1974 for change to condition frames */
/* Modified 761026 by PG to convert to iox_ */
/* modified 14 November 1979 by M. Weaver to make -depth work again */

/* conditions */

	dcl     cleanup		 condition;

/* based */

	dcl     arg		 char (alng) based (aptr);
						/* so we can refer to our arguments */
	dcl     message		 char (mlng) based (mptr);
						/* to refer to message from condition_interpreter_ */
	dcl     sys_area		 area (1000) based (areap);
						/* to use in free statement */

/* automatic */

	dcl     (lngsw, depth, nd, i)
				 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     (alng, mlng)	 fixed bin (21);
	dcl     argdh		 (100) fixed bin aligned;
						/* holds values */
	dcl     (allsw, depsw)	 bit (1) aligned init ("0"b);
	dcl     (aptr, areap)	 ptr;
	dcl     mptr		 ptr init (null);
	dcl     verb		 char (3) aligned;
	dcl     suf		 char (1) aligned;	/* to distinguish singular error message */

/* entries */

	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     default_error_handler_$reprint_error_message_
				 entry (ptr, ptr, fixed bin (21), fixed bin, fixed bin, fixed bin (35));
	dcl     get_system_free_area_	 entry (ptr);
	dcl     ioa_$nnl		 entry options (variable);
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* external static */

	dcl     (
	        iox_$user_output	 ptr,
	        error_table_$badopt	 fixed bin (35)
	        )			 external static;

/* internal static */

	dcl     me		 char (13) internal static init ("reprint_error") options (constant);

/* builtin */

	dcl     (null, substr)	 builtin;

/* program */

	lngsw = 1;				/* normal length message */
	depth = 1;				/* default is most recent frame */
	nd = 1;
	argdh (1) = 1;
	i = 0;

read:
	i = i + 1;
	call cu_$arg_ptr (i, aptr, alng, code);
	if code ^= 0
	then go to process;				/* have finished reading in args */
	if substr (arg, 1, 1) = "-"
	then do;					/* possible option */
		if arg = "-brief" | arg = "-bf"
		then lngsw = 2;			/* want brief message */
		else if arg = "-long" | arg = "-lg"
		then lngsw = 3;
		else if arg = "-all" | arg = "-a"
		then allsw = "1"b;			/* look at all deh frames */
		else if arg = "-depth" | arg = "-dh"
		then do;				/* process (one) depth count */
			if depsw
			then do;			/* don't allow more than 1 */
				call com_err_ (0, me, "Only one depth may be specified at a time.");
				return;
			     end;
			depsw = "1"b;		/* indicate that we have found depth option */
			i = i + 1;		/* get next arg specially */
			call cu_$arg_ptr (i, aptr, alng, code);
						/* get depth number */
			if code ^= 0
			then do;
				call com_err_ (code, me, "Missing depth number.");
				return;
			     end;
			argdh (1) = cv_dec_check_ (arg, code);
						/* convert arg to numerical depth */
			if code ^= 0
			then do;
				call com_err_ (0, me, "Non-decimal digit in position ^d of ""^a"".", code, arg);
				return;
			     end;
		     end;
		else do;
err:
			call com_err_ (error_table_$badopt, me, "^a", arg);
			return;
		     end;
		go to read;			/* get next argument */
	     end;
	else go to err;				/* don't recognize numbers by themselves */

process:
	if allsw
	then do;					/* want all depths; fill array as if they had been typed */
		nd = 100;				/* current maximum */
		do i = 1 to 100;
		     argdh (i) = i;
		end;
	     end;

	call get_system_free_area_ (areap);		/* get area for message */
	on condition (cleanup)
	     begin;
		if mptr ^= null
		then free message in (sys_area);	/* always clean up area */
	     end;
	do i = 1 to nd;

/* if depths are not given in monotonically increasing order, and not all of them
   exist, some messages may not get printed */

	     call default_error_handler_$reprint_error_message_ (areap, mptr, mlng, lngsw, argdh (i), code);
	     if code = 0
	     then do;				/* default_error_handler_ has no active frames */
		     call com_err_ (0, me, "There are no active condition frames.");
		     return;
		end;
	     else if code < argdh (i)
	     then do;
		     if code = -1
		     then go to end_loop;		/*  couldn't get info for this depth */
		     if ^allsw
		     then do;
			     if code = 1
			     then do;
				     verb = "is";
				     suf = " ";
				end;
			     else do;
				     verb = "are";
				     suf = "s";
				end;
			     call com_err_ (0, me, "There ^a only ^d condition frame^a.", verb, code, suf);
			end;
		     return;
		end;
	     call ioa_$nnl ("^/depth ^d:^/", argdh (i));	/* print out depth number */
	     call iox_$put_chars (iox_$user_output, mptr, mlng, code);
	     free message in (sys_area);		/* clear to make room for the next */
	     mptr = null;				/* so wont try to free before it gets reset */
end_loop:
	end;

	return;
     end;
