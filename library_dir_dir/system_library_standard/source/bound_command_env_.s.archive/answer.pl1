/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Provides a canned answer when any question is asked during the execution of a command or request line */

/* Created:  by THVV after R. Lamson */
/* Rewritten: 20 March 1978 by G. Palter */
/* Partially rewriten: 2 June 1978 by S.Herbst */
/* Modified: July 1978 by J. C. Whitmore to use new command_query_info structure */
/* Modified: 3 October 1979 by S. Herbst to fix usage message */
/* Modified: 18 February 1980 by S. Herbst to add -call */
/* Modified: 5 June 1981 by S. Herbst to add -match/-exclude and a warning for non-yes/no answer */
/* Modified: 16 February 1982 by G. Palter to add ssu_answer_request_ and convert to a standalone invocation */
/* Modified: 8 September 1982 by G. Palter to propogate subsystem/request line aborts */
/* Modified: 27 March 1984 by S. Herbst to fix "Ignoring response FOO" message with -call */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


answer:
     procedure () options (variable);


dcl  P_sci_ptr pointer parameter;			/* ssu_answer_request_: -> SCI of the subsystem */
dcl  P_info_ptr pointer parameter;			/* ssu_answer_request_: -> subsystem's internal data */

dcl  sci_ptr pointer;

dcl  1 answer_node aligned based (answer_node_ptr),	/* holds one answer */
       2 query_sw bit (1),
       2 call_sw bit (1),
       2 call_ptr pointer,
       2 call_len fixed binary (21),
       2 times fixed binary,
       2 next_ptr pointer,
       2 answer_len fixed binary (21),
       2 answer character (arg_len refer (answer_node.answer_len));
dcl  answer_node_ptr pointer;

dcl  1 match_node aligned based (match_node_ptr),
       2 exclude_sw bit (1),
       2 regexp_sw bit (1),
       2 next_ptr pointer,
       2 match_len fixed binary (21),
       2 match_str character (arg_len refer (match_node.match_len)) unaligned;
dcl  match_node_ptr pointer;

%include cp_active_string_types;

dcl  arg character (arg_len) based (arg_ptr) unaligned;
dcl  based_answer character (answer_max_len) based;

dcl  (arg_ptr, first_match_ptr, first_node_ptr, next_node_ptr, old_node_ptr, temp_ptr) pointer;

dcl  area area based (area_ptr);
dcl  area_ptr pointer;

dcl  (standalone_invocation, brief_sw, call_opt_sw, found_first_answer, is_yes_or_no, yes_no) bit (1) aligned;

dcl  (arg_count, arg_index, n) fixed binary;
dcl  (answer_max_len, arg_len) fixed binary (21);
dcl  code fixed binary (35);

dcl  error_table_$bad_conversion fixed binary (35) external;
dcl  error_table_$badopt fixed binary (35) external;
dcl  ssu_et_$null_request_line fixed binary (35) external;
dcl  ssu_et_$subsystem_aborted fixed binary (35) external;

dcl  iox_$user_io pointer external;
dcl  iox_$user_output pointer external;

dcl  request_sw bit (1) aligned;
dcl  request_line character (request_len) aligned based (request_ptr);
dcl  request_ptr pointer;
dcl  (request_len, request_start, start) fixed binary (21);

dcl  com_err_ entry () options (variable);
dcl  command_query_ entry () options (variable);
dcl  condition_ entry (character (*), entry);
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  search_file_
	entry (pointer, fixed binary (21), fixed binary (21), pointer, fixed binary (21), fixed binary (21),
	fixed binary (21), fixed binary (21), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$execute_line entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$evaluate_active_string
	entry (pointer, pointer, character (*), fixed binary, character (*) varying, fixed binary (35));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));

dcl  (addr, binary, index, min, null, substr) builtin;

dcl  (cleanup, command_question) condition;
%page;
%include query_info_;
%page;
%include condition_info_header;
%include command_question_info;
%page;

/* Multics answer command */

/* answer: entry () options (variable); */

	standalone_invocation = "1"b;			/* must create a standalone subsystem to do this */
	call ssu_$standalone_invocation (sci_ptr, "answer", "1.0", cu_$arg_list_ptr (), abort_answer_command, code);
	if code ^= 0 then do;
	     call com_err_ (code, "answer", "Can not establish standalone subsystem invocation.");
	     return;
	end;
	go to COMMON;


/* Standard subsystem answer request */

ssu_answer_request_:
     entry (P_sci_ptr, P_info_ptr);

	standalone_invocation = "0"b;			/* caller supplied the subsystem */
	sci_ptr = P_sci_ptr;
	go to COMMON;


/* Actual work starts here */

COMMON:
	area_ptr = get_system_free_area_ ();
	answer_node_ptr, match_node_ptr, request_ptr, first_match_ptr, first_node_ptr, temp_ptr = null ();

	on condition (cleanup) call clean_up ();

	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0 then			/* abort_line never returns */
USAGE:
	     call ssu_$abort_line (sci_ptr, 0, "Usage:  ^a string {-control_args} ^[command^;request^] line",
		ssu_$get_request_name (sci_ptr), standalone_invocation);


	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);

	call add_answer_node ();
	first_node_ptr = answer_node_ptr;

	brief_sw, call_opt_sw = "0"b;
	found_first_answer = ""b;			/* this will be set when first answer is found */
	request_sw = "0"b;
	request_start = 0;
	request_len = 0;

	do arg_index = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
	     if ^request_sw then			/* haven't begun imbedded request line yet */
		if substr (arg, 1, 1) = "-" then
		     if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
						/* don't print question & answer */
		     else if arg = "-times" then do;
			if ^found_first_answer then	/* this is only defined after some answer */
no_first:
			     call ssu_$abort_line (sci_ptr, 0, "First answer missing before ""^a"".", arg);
			arg_index = arg_index + 1;
			if arg_index > arg_count then
NO_CONTROL_VALUE:
			     call ssu_$abort_line (sci_ptr, 0, "No value specified for ""^a"".", arg);
			call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
			n = cv_dec_check_ (arg, code);
			if code ^= 0 then
			     call ssu_$abort_line (sci_ptr, error_table_$bad_conversion, "-times ""^a""", arg);
			answer_node.times = n;
		     end;
		     else if arg = "-call" then do;	/* expand active function to get answer */
			call_opt_sw = "1"b;
			arg_index = arg_index + 1;
			if arg_index > arg_count then go to NO_CONTROL_VALUE;
			call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
			if found_first_answer then
			     call add_answer_node ();
			else found_first_answer = "1"b;
			answer_node.call_sw = "1"b;
			answer_node.call_ptr = arg_ptr;
			answer_node.call_len = arg_len;
		     end;
		     else if arg = "-exclude" | arg = "-ex" then do;
			arg_index = arg_index + 1;
			if arg_index > arg_count then go to NO_CONTROL_VALUE;
			call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
			call add_match_node ();
			match_node.exclude_sw = "1"b;
MATCH_ARG:
			if substr (arg, 1, 1) = "/" & substr (arg, arg_len, 1) = "/" then do;
			     match_node.regexp_sw = "1"b;
			     match_node.match_len = arg_len - 2;
			     match_node.match_str = substr (arg, 2, arg_len - 2);
			end;
			else do;			/* starname */
			     match_node.regexp_sw = "0"b;
			     match_node.match_str = arg;
			end;
		     end;
		     else if arg = "-match" then do;
			arg_index = arg_index + 1;
			if arg_index > arg_count then go to NO_CONTROL_VALUE;
			call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
			call add_match_node ();
			match_node.exclude_sw = "0"b;
			go to MATCH_ARG;
		     end;
		     else if arg = "-query" then do;
			if found_first_answer then	/* node is there for first answer */
			     call add_answer_node ();
			answer_node.query_sw = "1"b;
			found_first_answer = "1"b;	/* we have an answer now */
		     end;
		     else if arg = "-then" then do;
			if ^found_first_answer then go to no_first;
			arg_index = arg_index + 1;
			if arg_index > arg_count then go to NO_CONTROL_VALUE;
			call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
			call add_answer_node ();
			answer_node.answer = arg;
		     end;
		     else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", arg);
		else do;
		     if ^found_first_answer then do;	/* this must be the first answer */
			answer_node.answer = arg;
			found_first_answer = "1"b;	/* say we got it */
		     end;
		     else do;			/* otherwise this is the start of request line */
			request_sw = "1"b;		/* begin request line */
			request_start = arg_index;	/* remember where it started */
			request_len = arg_len + 1;	/* start computing length */
		     end;
		end;

	     else request_len = request_len + arg_len + 1;
	end;

	if request_len = 0 then go to USAGE;
	answer_node_ptr = first_node_ptr;

	if call_opt_sw then call ssu_$get_temp_segment (sci_ptr, "answer", temp_ptr);

	call condition_ ("command_question", answer_handler);
						/* setup handler */

	allocate request_line in (area) set (request_ptr);
	request_line = "";

	start = 1;				/* build request line */
	do arg_index = request_start to arg_count;
	     call ssu_$arg_ptr (sci_ptr, arg_index, arg_ptr, arg_len);
	     substr (request_line, start, arg_len) = arg;
	     start = start + arg_len + 1;
	end;

	call ssu_$execute_line (sci_ptr, addr (request_line), start - 2, code);
						/* execute request line */
	if ^standalone_invocation & (code ^= 0) & (code ^= ssu_et_$null_request_line) then
	     if code = ssu_et_$subsystem_aborted then
		call ssu_$abort_subsystem (sci_ptr);
	     else call ssu_$abort_line (sci_ptr);

RETURN:
	call clean_up ();

	return;



/* Internal procedure invoked by ssu_$abort_line if answer was invoked as a Multics command (stanalone invocation) */

abort_answer_command:
     procedure ();

	go to RETURN;				/* message has been printed: now we can punt */

     end abort_answer_command;

%page;

/* This internal procedure supplies the answer when command_question is signalled.
*/

answer_handler:
     procedure (mcptr, name, coptr, infoptr, continue_sw);

dcl  (mcptr, coptr, infoptr) pointer parameter;
dcl  name character (*) parameter;
dcl  continue_sw bit (1) aligned parameter;

%include query_info;

dcl  1 as aligned based (inp),			/* version 2 answer structure */
       2 version fixed binary,			/* ... always 2 */
       2 status_code fixed binary (35),			/* errorcode */
       2 query_code fixed binary,
       2 question_sw bit (1) unaligned,			/* 1 to print question */
       2 yes_or_no_sw bit (1) unaligned,		/* 1 if must be yes/no */
       2 preset_sw bit (1) unaligned,			/* 1 if we answered */
       2 answer_sw bit (1) unaligned,			/* 1 if print answer */
       2 np pointer,				/* ptr to asker name */
       2 nl fixed binary,				/* len */
       2 question_ptr pointer,			/* ptr to question */
       2 question_len fixed binary (21),		/* len */
       2 max_question_len fixed binary (21),
       2 answer_ptr pointer,				/* ptr to answer */
       2 answer_len fixed binary (21),
       2 max_answer_len fixed binary (21);

declare  1 cqi aligned based (inp) like command_question_info;
						/* version 3 or 4 answer structure */
dcl  inp pointer;

dcl  temp_answer character (4 * sys_info$max_seg_size - 4) varying based (temp_ptr);
dcl  sys_info$max_seg_size fixed binary (35) external;
dcl  question_string character (question_len) based (question_ptr);
dcl  buffer character (buffer_len) based (buffer_ptr);
dcl  (buffer_ptr, question_ptr) pointer;
dcl  buffer_len fixed binary (21);
dcl  question_len fixed binary (21);
dcl  length builtin;

	inp = infoptr;

	if as.version = 2 then do;
	     question_ptr = as.question_ptr;
	     question_len = as.question_len;
	end;
	else do;
	     question_ptr = cqi.question_ptr;
	     question_len = cqi.question_lth;
	end;

	if first_match_ptr ^= null () then do;		/* some -match or -exclude args specified */
	     call process_selections (continue_sw, question_ptr, question_len);
	     if continue_sw then return;		/* don't answer this question */
	end;

	if answer_node_ptr = null ()			/* have run out of answers */
	     | (as.version ^= 2 & cqi.version < 3)	/* unsupported answer structure */
	then do;
	     continue_sw = "1"b;
	     return;
	end;

	if answer_node.call_sw then do;		/* answer -call ACTIVE_STRING */
	     buffer_ptr = answer_node.call_ptr;
	     buffer_len = answer_node.call_len;
	     on command_question system;
	     call ssu_$evaluate_active_string (sci_ptr, null (), buffer, NORMAL_ACTIVE_STRING, temp_answer, code);
	     if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "[^a]", buffer);
		query_info.suppress_name_sw = "1"b;
		if as.version = 2 then
		     query_info.yes_or_no_sw = as.yes_or_no_sw;
		else query_info.yes_or_no_sw = cqi.yes_or_no_sw;

		call command_query_ (addr (query_info), temp_answer, ssu_$get_subsystem_and_request_name (sci_ptr),
		     "Please type answer to the following question:^/^a", question_string);
	     end;
	     revert command_question;
	     if as.version = 2 then
		yes_no = as.yes_or_no_sw;
	     else yes_no = cqi.yes_or_no_sw;
	     if temp_answer = "true" then temp_answer = "yes";
	     else if temp_answer = "false" then temp_answer = "no";
	     if temp_answer = "yes" | temp_answer = "y" | temp_answer = "no" | temp_answer = "n" then
		is_yes_or_no = "1"b;
	     else is_yes_or_no = "0"b;
	     answer_node.answer_len = length (temp_answer);
	     go to SET_ANSWER;
	end;

	else if answer_node.query_sw then do;		/* -query */
	     if cqi.version >= 4 then do;		/* iocbp's are defined in version 4 */
		cqi.question_iocbp = iox_$user_io;	/* ask question on user i/o */
		cqi.answer_iocbp = iox_$user_io;	/* and get answer from same place */
	     end;
	     continue_sw = "1"b;
	end;

	else do;
	     if answer_node.answer = "yes" | answer_node.answer = "y" | answer_node.answer = "no"
		| answer_node.answer = "n" then
		is_yes_or_no = "1"b;
	     else is_yes_or_no = "0"b;
SET_ANSWER:
	     if as.version = 2 then do;		/* old version structure */
		if as.yes_or_no_sw & ^is_yes_or_no then do;
REJECT_NON_YES_NO:
		     if answer_node.call_sw then
			call ssu_$print_message (sci_ptr, 0,
			     "Ignoring response ""^a"" to yes-or-no question:^/^a",
			     temp_answer, question_string);
		     else call ssu_$print_message (sci_ptr, 0,
			     "Ignoring response ""^a"" to yes-or-no question:^/^a",
			     answer_node.answer, question_string);
		     continue_sw = "1"b;		/* continue to signal */
		     return;
		end;
		answer_max_len = as.max_answer_len;
		as.answer_len = min (answer_max_len, answer_node.answer_len);
						/* careful of string lth */
		if answer_node.call_sw then
		     substr (as.answer_ptr -> based_answer, 1, as.answer_len) = temp_answer;
		else substr (as.answer_ptr -> based_answer, 1, as.answer_len) = answer_node.answer;
		as.preset_sw = "1"b;		/* preset answer given */
		as.question_sw, as.answer_sw = ^brief_sw;
	     end;					/* print if ^brief */

	     else if cqi.version >= 3 then do;
		if cqi.yes_or_no_sw & ^is_yes_or_no then go to REJECT_NON_YES_NO;
		answer_max_len = cqi.max_answer_lth;
		cqi.answer_lth = min (answer_node.answer_len, answer_max_len);
						/* careful of string lth */
		if answer_node.call_sw then
		     substr (cqi.answer_ptr -> based_answer, 1, cqi.answer_lth) = temp_answer;
		else substr (cqi.answer_ptr -> based_answer, 1, cqi.answer_lth) = answer_node.answer;
		cqi.preset_sw = "1"b;		/* preset answer */
		cqi.question_sw, cqi.answer_sw = ^brief_sw;
		if cqi.version > 3 then		/* if iocbp's are defined */
		     cqi.question_iocbp = iox_$user_output;
	     end;					/* print question and answer on user_output */

	     else do;				/* don't handle other versions */
		continue_sw = "1"b;
		return;
	     end;
	end;

	answer_node.times = answer_node.times - 1;
	if answer_node.times = 0 then answer_node_ptr = answer_node.next_ptr;

	return;

     end answer_handler;
%page;
add_answer_node:
     procedure ();

	old_node_ptr = answer_node_ptr;

	allocate answer_node in (area) set (answer_node_ptr);

	answer_node.next_ptr = null ();		/* this is the last node in the chain */

	if old_node_ptr ^= null () then do;		/* chain the nodes together */
	     old_node_ptr -> answer_node.next_ptr = answer_node_ptr;
	     if old_node_ptr -> answer_node.times = -1 then old_node_ptr -> answer_node.times = 1;
						/* if -times not given, assume 1 */
	end;

	answer_node.query_sw = "0"b;
	answer_node.call_sw = "0"b;
	answer_node.times = -1;			/* mark as not given yet */

     end add_answer_node;



add_match_node:
     procedure ();

	old_node_ptr = match_node_ptr;

	allocate match_node in (area) set (match_node_ptr);

	match_node.next_ptr = null ();		/* this is the last node in the chain */

	if old_node_ptr ^= null () then		/* thread onto last node */
	     old_node_ptr -> match_node.next_ptr = match_node_ptr;

	if first_match_ptr = null () then first_match_ptr = match_node_ptr;

     end add_match_node;


clean_up:
     procedure ();

	if request_ptr ^= null () then free request_line in (area);

	if temp_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, temp_ptr);

	do answer_node_ptr = first_node_ptr repeat next_node_ptr while (answer_node_ptr ^= null ());
	     next_node_ptr = answer_node.next_ptr;
	     free answer_node in (area);
	end;

	do match_node_ptr = first_match_ptr repeat next_node_ptr while (match_node_ptr ^= null ());
	     next_node_ptr = match_node.next_ptr;
	     free match_node in (area);
	end;

	if standalone_invocation then			/* we created the invocation for ourselves... */
	     call ssu_$destroy_invocation (sci_ptr);

     end clean_up;
%page;
process_selections:
     procedure (P_continue_sw, P_question_ptr, P_question_len);

dcl  P_continue_sw bit (1) aligned;			/* ON = do not answer this question */
dcl  P_question_ptr pointer;
dcl  P_question_len fixed binary (21);
dcl  (match_node_ptr, mp) pointer;

	match_node_ptr = first_match_ptr;

	if match_node_ptr -> match_node.exclude_sw then
	     P_continue_sw = "0"b;			/* excluding first: assume any question matches */
	else P_continue_sw = "1"b;

	do mp = match_node_ptr repeat (mp -> match_node.next_ptr) while (mp ^= null ());
	     if mp -> match_node.exclude_sw then do;	/* exclude_sw if it matches */
		if ^P_continue_sw then		/* only if still under consideration */
		     if match_one (mp, P_question_ptr, P_question_len) then P_continue_sw = "1"b;
	     end;
	     else if P_continue_sw then		/* -match: include only if already excluded */
		if match_one (mp, P_question_ptr, P_question_len) then P_continue_sw = "0"b;
	end;

	return;


/* Returns "1"b if the question matches the given -match or -exclude string */

match_one:
	procedure (P_mp, P_ptr, P_len) returns (bit (1));

dcl  P_mp pointer;					/* ptr to the next match node */
dcl  P_ptr pointer;					/* ptr to the question being considered */
dcl  P_len fixed binary (21);				/* length of the question */
dcl  question_string character (P_len) based (P_ptr);

	     if P_mp -> match_node.regexp_sw then
		call search_file_ (addr (P_mp -> match_node.match_str), 1, P_mp -> match_node.match_len, P_ptr, 1,
		     P_len, 0, 0, code);

	     else code = binary ((index (question_string, P_mp -> match_node.match_str) = 0), 35, 0);
						/* yields 1 if matches, 0 otherwise */

	     return (code = 0);			/* or vice-versa */

	end match_one;

     end process_selections;

     end answer;
