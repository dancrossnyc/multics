/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-11-12,Fawcett), approve(86-11-12,PBF7473),
     audit(86-11-13,Gilcrease), install(86-11-14,MR12.0-1218):
     Changed to work with version 3 of timere_manager_schedule.incl.pl1.
                                                   END HISTORY COMMENTS */


/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */
display_timers: proc;

/* This command prints a list of the timer_manager_ timers scheduled to
   occur in the process.

   Written in 1980 by C. D. Tavares
   Modified 8 September 1982 by Richard Lamson to work with version 2 schedule
*/

/* AUTOMATIC */

dcl  (code	        fixed bin (35),
     date_time_string       char (24),
     dirname	        char (168),
     ename	        char (32),
     i		        fixed bin,
     strp		        pointer) automatic;

/* STATIC */

dcl  sys_area_p	        pointer initial (null);

/* BASED */

dcl  sys_area	        area (sys_info$max_seg_size) based (sys_area_p);

/* EXTERNAL STATIC */

dcl  (error_table_$improper_data_format,
     error_table_$unimplemented_version,
     sys_info$max_seg_size) ext fixed bin (35) static;

/* ENTRIES */

dcl  com_err_	        entry options (variable),
     date_time_	        entry (fixed bin (71), char (*)),
     get_control_point_id_  entry () returns (bit (36)),
     get_system_free_area_  entry () returns (ptr),
     hcs_$fs_get_path_name  entry (pointer, char (*), fixed bin, char (*),
		        fixed bin (35)),
     interpret_ptr_	        entry (pointer, pointer, pointer),
     ioa_		        entry options (variable),
     ioa_$rsnnl	        entry options (variable),
     timer_manager_$get_schedule
		        entry (pointer, pointer, fixed bin (35));

/* BUILTINS */

dcl  (addr, clock, codeptr,
     environmentptr, min,
     null, unspec, vclock)  builtin;

/* CONDITIONS */

dcl  cleanup	        condition;
%page;
%include interpret_ptr_struc;
%page;
%include timer_manager_schedule;
%page;
	if sys_area_p = null then
	     sys_area_p = get_system_free_area_ ();

	schedule_ptr = null;

	on cleanup call cleaner_up;


	call timer_manager_$get_schedule (sys_area_p, schedule_ptr, code);
	if code ^= 0 then call crump (code, "Obtaining timers.");

	if schedule.version < timer_manager_schedule_version_1
	     | schedule.version > timer_manager_schedule_version_3
	     then call crump (error_table_$unimplemented_version, "");

	call date_time_ (clock (), date_time_string);

	call ioa_ ("^[No timers^s^;1 timer^s^;^d timers^] scheduled.
Current time is ^a; current CPU usage is ^.2f^/",
	     min (schedule.n_timers + 1, 3), schedule.n_timers,
	     date_time_string, vclock () / 1e6);


	do i = 1 to schedule.n_timers;

	     if schedule.version < timer_manager_schedule_version_2 then timer (i).data_ptr_provided = "0"b;

	     if timer.call (i) then do;
		     call hcs_$fs_get_path_name
			(codeptr (timer.routine (i)), dirname, 0, ename,
			code);
		     if code ^= 0 then
			call crump (code,
			     "Interpreting a timer's entry variable.");

		     call interpret_ptr_
			(codeptr (timer.routine (i)),
			environmentptr (timer.routine (i)),
			addr (strbuf));
		end;

	     else if ^timer (i).wakeup then
		call crump
		     (error_table_$improper_data_format,
		     "Timer neither call nor wakeup.");

	     if timer.alarm (i) then
		call date_time_ (timer.time (i), date_time_string);
	     else if timer.cpu (i) then
		call ioa_$rsnnl
		     ("^6.3f CPU seconds", date_time_string, 0,
		     timer.time (i) / 1e6);
	     else call crump
		     (error_table_$improper_data_format,
		     "Timer neither alarm nor CPU.");

	     call ioa_
		("Timer ^2d is ^[inhibited ^;^]^[alarm^;CPU^] timer scheduled at ^a
^9xto ^[^scall ^a^a ^[(^p)^;^s^]^/^9x(^a>^a|^a; ^a)^;wakeup on channel ^24.3b^].",
		i, timer.inhibit (i), timer.alarm (i), date_time_string,
		timer.call (i), unspec (timer.channel (i)),
		strbuf.segment, strbuf.entryn,
		timer (i).data_ptr_provided, timer (i).data_ptr,
		dirname, ename, strbuf.offset, strbuf.compiler);

	     if schedule.version >= timer_manager_schedule_version_3 then do;
		     if timer (i).control_point_id ^= get_control_point_id_ () then
			call ioa_ ("^9xfor control_point ^w", timer.control_point_id);
		end;

	end;

returner:
	call cleaner_up;
	return;
%skip (2);
cleaner_up: proc;

	if schedule_ptr ^= null then
	     free schedule in (sys_area);
     end cleaner_up;
%skip (2);
crump: proc (code, reason);

dcl  code		        fixed bin (35),
     reason	        char (*);

	call com_err_ (code, "display_timers", reason);
	goto returner;
     end crump;
     end display_timers;
