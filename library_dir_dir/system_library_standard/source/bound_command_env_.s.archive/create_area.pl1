/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


create_area: proc;

/* This command  either creates or innitializes an area */
/* coded  76/11/01 by M. Weaver  */

dcl (i, alng, segid_type) fixed bin;
dcl  aptr ptr;
dcl  arg char (alng) based (aptr);
dcl  dir char (168);
dcl  ent char (32);
dcl  code fixed bin (35);
dcl  me char (12) aligned init ("create_area") static options (constant);
dcl  fatal bit (1) aligned;

dcl  cu_$arg_count entry () returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (ioa_, com_err_) entry options (variable);
dcl  cv_ptr_ entry (char (*), fixed bin (35)) returns (ptr);
dcl  cv_ptr_$terminate entry (ptr);
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  define_area_ entry (ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (18));
dcl  get_group_id_ entry () returns (char (32) aligned);

dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  sys_info$max_seg_size fixed bin (18) ext;
dcl (addr, null, string, substr) builtin;

dcl 1 info aligned like area_info;

%include area_info;


/* first initialize the area info structure */

	info.version = area_info_version_1;
	string (info.control) = "0"b;
	info.owner = get_group_id_ ();
	info.size = sys_info$max_seg_size;
	info.areap = null;
	segid_type = 0;
	fatal = "0"b;

/* now overwrite portions of the structure according to the arguments */

	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, aptr, alng, code);
	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-extend" then info.control.extend = "1"b;
		else if arg = "-zero_on_alloc" then info.control.zero_on_alloc = "1"b;
		else if arg = "-zero_on_free" then info.control.zero_on_free = "1"b;
		else if arg = "-dont_free" then info.control.dont_free = "1"b;
		else if arg = "-no_freeing" then info.control.no_freeing = "1"b;
		else if arg = "-size" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, alng, code);
		     if code ^= 0 then do;
			call com_err_ (code, me, "size");
			fatal = "1"b;
		     end;
		     else do;
			info.size = cv_oct_check_ (arg, code);
			if code ^= 0 then do;
			     fatal = "1"b;
			     call com_err_ (0, me, "Size ^a should be an octal number.", arg);
			end;
		     end;
		end;
		else if arg = "-id" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, alng, code);
		     if code ^= 0 then do;
			call com_err_ (error_table_$noarg, me, "ID string");
			fatal = "1"b;
		     end;
		     else info.owner = arg;
		end;
		else do;
		     call com_err_ (error_table_$badopt, me, arg);
		     fatal = "1"b;
		end;
	     end;					/*  end of control argument group */

	     else do;				/* must have address */
		if segid_type ^= 0 then do;		/* this is not the first address */
		     call com_err_ (0, me, "Only 1 virtual address is allowed.");
		     fatal = "1"b;
		end;
		else do;				/* first address */
		     segid_type = 1;
		     info.areap = cv_ptr_ (arg, code);	/* get ptr to area, if it exists */
		     if code ^= 0 then do;		/* null  ptr given meane create temp */
			segid_type = 2;		/* don't want to call cv_ptr_$terminate */
			call expand_pathname_ (arg, dir, ent, code);
			if code ^= 0 then do;
path_error:		     call com_err_ (code, me, arg);
			     fatal = "1"b;
			end;
			else do;
			     call hcs_$make_seg (dir, ent, "", 01010b, info.areap, code);
			     if info.areap = null then goto path_error;
			end;
		     end;
		end;
	     end;
	end;

	if fatal then do;
	     if segid_type = 1 then call cv_ptr_$terminate (info.areap);
	     return;
	end;
	if segid_type = 0 then do;			/* no name was given */
	     call com_err_ (error_table_$noarg, me, "virtual address");
	     return;
	end;

	call define_area_ (addr (info), code);
	if code ^= 0 then call com_err_ (code, me);
	else call ioa_ ("area pointer = ^p", info.areap);

	if segid_type = 0 then call cv_ptr_$terminate (info.areap);

	return;
     end;
