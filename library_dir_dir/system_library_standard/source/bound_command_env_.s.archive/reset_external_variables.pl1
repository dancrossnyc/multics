/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7420), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     change the parameters of list init
                                                   END HISTORY COMMENTS */


reset_external_variables:
rev:
     proc;

/* This command resets or deletes selected external
   variables (*system link targets). */
/* coded October 1976 by M. Weaver */
/* modified October 1977 by Melanie Weaver to handle links snapped directly */
/* Modified November 12 1982 by T Oke to cleanup and handle Very Large Arrays */
/* Modified April 22 1983 by M. Weaver to remove references to init_info_ptr */
/* Modified October 26 1984 by M. Mabey to explicitly zero a variable that is
		initialized with list templates.  This has to be done in
		reponse to a change in list_init_ which no longer zeros
		skipped over data. */

	dcl     (i, j, n, whox, alng, nnames, nprocessed, high_seg, hcscnt, nchars)
				 fixed bin;
	dcl     vsize		 fixed bin (35);
	dcl     code		 fixed bin (35);
	dcl     (fatal, deleted)	 bit (1) aligned;
	dcl     (tp, np, aptr, vptr, lotptr, tnp, old_np, alp)
				 ptr;
	dcl     arg		 char (alng) based (aptr);
	dcl     vname		 char (65);
	dcl     me		 (2) char (25) static options (constant)
				 init ("reset_external_variables", "delete_external_variables");
	dcl     variable		 (vsize) bit (36) based;
	dcl     do_it		 entry () variable;
	dcl     (
	        error_table_$badopt,
	        error_table_$too_many_args,
	        error_table_$bigarg
	        )			 ext fixed bin (35);
	dcl     error_table_$noarg	 ext fixed bin (35);
	dcl     (addr, addrel, baseno, bin, bit, fixed, hbound, 
	        lbound, null, ptr, rel, substr, stackbaseptr, 
	        unspec, empty)
				 builtin;
	dcl     (com_err_, ioa_)	 entry options (variable);
	dcl     cu_$arg_count	 entry () returns (fixed bin);
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
	dcl     cu_$arg_list_ptr	 entry () returns (ptr);
	dcl     hcs_$high_low_seg_count
				 entry (fixed bin, fixed bin);
	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));

	dcl     fortran_storage_manager_$free
				 entry (ptr);
	dcl     list_init_		 entry (ptr, ptr, fixed bin (35), 
				 ptr, ptr, fixed bin (35));
	dcl     list_init_$variable_already_zero
				 entry (ptr, ptr, fixed bin (35),
				 ptr, ptr, fixed bin (35));
	dcl     sys_info$max_seg_size	 fixed bin (35) external;


	whox = 1;
	do_it = reset_it;

/* find out if there are any external variables */

join:
	code = 0;
	sb = ptr (addr (nnames), 0);
	tp = sb -> stack_header.sys_link_info_ptr;
	if tp = null
	then do;
no_variables:
		call com_err_ (0, me (whox), "There are no external variables.");
		return;
	     end;
	if tp -> variable_table_header.cur_num_of_variables < 1
	then goto no_variables;
	lotptr = sb -> stack_header.lot_ptr;

	fatal = "0"b;
	nnames = 0;
	nprocessed = 0;
	alp = cu_$arg_list_ptr ();
	n = cu_$arg_count ();

	begin;
	     dcl	   1 list		      (n) aligned,
		     2 name	      char (65),
		     2 nsize	      fixed bin (17) unal,
		     2 found	      bit (1) unal,
		     2 pad	      bit (17) unal;


/* process all the arguments */

	     do i = 1 to n;
		call cu_$arg_ptr_rel (i, aptr, alng, code, alp);
		if code ^= 0
		then do;
			call com_err_ (code, me (whox), arg);
			fatal = "1"b;
		     end;
		else if substr (arg, 1, 1) = "-"
		then do;
			if arg = "-unlabelled_common" | arg = "-uc"
			then do;
				nnames = nnames + 1;
				list (nnames).name = "blnk*com";
				list (nnames).nsize = 8;
				list (nnames).found = "0"b;
			     end;
			else do;
				call com_err_ (error_table_$badopt, me (whox), arg);
				fatal = "1"b;
			     end;
		     end;
		else do;
			nnames = nnames + 1;
			if nnames > hbound (list, 1)
			then do;
				call com_err_ (error_table_$too_many_args, me (whox), "^d names maximum",
				     hbound (list, 1));
				return;
			     end;
			if alng > 65
			then do;
				call com_err_ (error_table_$bigarg, me (whox), arg);
				fatal = "1"b;
			     end;
			list (nnames).name = arg;
			list (nnames).nsize = alng;
			list (nnames).found = "0"b;
		     end;
	     end;

	     if fatal
	     then return;
	     if nnames = 0
	     then do;
		     call com_err_ (error_table_$noarg, me (whox));
		     return;
		end;

/* loop through system name list, printing info for desired variables */


	     do i = lbound (tp -> variable_table_header.hash_table, 1)
		to hbound (tp -> variable_table_header.hash_table, 1);
		old_np = addr (tp -> variable_table_header.hash_table (i));
		tnp = tp -> variable_table_header.hash_table (i);
		do while (tnp ^= null);
		     deleted = "0"b;
		     np = tnp;
		     tnp = np -> variable_node.forward_thread;
						/* update now in case node gets deleted */
		     do j = 1 to nnames;		/* see if this name matches any on list */
			if ^list (j).found
			then do;
				if list (j).nsize = np -> variable_node.name_size
				then if list (j).name = np -> variable_node.name
				     then do;
					     call do_it;
					     list (j).found = "1"b;
					     nprocessed = nprocessed + 1;
					     if nprocessed = nnames
					     then return;
					     go to next_name;
					end;
			     end;
		     end;
next_name:
		     if ^deleted
		     then old_np = np;		/* current node didn't get deleted */
		end;
	     end;

	     call ioa_ ("^/The following variables were not found:");
	     do i = 1 to nnames;
		if ^list (i).found
		then do;
			if list (i).name = "blnk*com"
			then vname = "unlabelled common";
			else vname = list (i).name;
			call ioa_ ("^a", vname);
		     end;
	     end;

	end;					/* of begin block */

	return;



delete_external_variables:
dev:
     entry;

	whox = 2;
	do_it = delete_it;
	call hcs_$high_low_seg_count (high_seg, hcscnt);
	goto join;

/*  */
reset_it:
     proc;

	dcl     code		 fixed bin (35);

%include system_link_init_info;

	dcl     based_vbl_area	 area (vsize) based;

          code = 0;
	
	if (np -> variable_node.init_type = TEMPLATE_INIT) & (np -> variable_node.init_ptr = null)
	then do;					/* this will not happen with blank common */
		call com_err_ (0, me (whox), "External variable ^a could not be reset.", np -> variable_node.name);
		return;
	     end;

	vsize = np -> variable_node.vbl_size;

	if np -> variable_node.init_type = NO_INIT
	then call list_init_ (np -> variable_node.vbl_ptr, null (), 
		vsize,stackbaseptr(),null(), code);

	else if np -> variable_node.init_type = EMPTY_AREA_INIT
	then np -> variable_node.vbl_ptr -> based_vbl_area = empty;

	else if np -> variable_node.init_type = LIST_TEMPLATE_INIT
	then do;					/* First the variable is zeroed. */
		call list_init_ (np -> variable_node.vbl_ptr,
		     null (), vsize, stackbaseptr(),null(), code);
						/* Then it is initialized. */
		call list_init_$variable_already_zero (
		     np -> variable_node.vbl_ptr,
		     addr (np -> variable_node.init_ptr -> list_init_info.template), 
		     vsize, stackbaseptr(), np ->variable_node.seg_ptr,
		     code);
	     end;

	else unspec (np -> variable_node.vbl_ptr -> variable) =
		unspec (np -> variable_node.init_ptr -> init_info.init_template);
	if code ^= 0 then
	     call com_err_ (code,me," while referencing ^a",
		np->variable_node.name);
	     
	return;
     end;						/* of reset_it */

/*  */
delete_it:
     proc;

	dcl     based_ptr		 ptr based;
	dcl     based_area		 area based;
	dcl     based_double	 bit (72) aligned based;
	dcl     block_end		 bit (18) aligned;
	dcl     code		 fixed bin (35);
	dcl     (headptr, defstartptr, linkstartptr, itsptr, vlp, lptr)
				 ptr;
	dcl     segno		 fixed bin;

%include its;


%include lot;



          code = 0;
	vptr = np -> variable_node.vbl_ptr;		/* get value links would have */

	do segno = hcscnt + 1 to hcscnt + high_seg;
	     if rel (lotptr -> lot.lp (segno)) ^= "0"b
	     then do;
		     headptr = lotptr -> lot.lp (segno);
		     defstartptr = headptr -> header.def_ptr;
						/* pointer to beginning of def section */
		     linkstartptr = addrel (headptr, headptr -> header.stats.begin_links);
						/* pointer to beginning of links */

/* check for defs in linkage section and compute end of links */

		     if (baseno (linkstartptr) = baseno (defstartptr))
			& (fixed (rel (defstartptr), 18) > fixed (rel (linkstartptr), 18))
		     then block_end = rel (defstartptr);/* end of links before end of block if defs follow links */
		     else block_end = rel (addrel (headptr, headptr -> header.stats.block_length));
						/* end of links and end of block are the same	*/


		     do itsptr = linkstartptr repeat (addrel (itsptr, 2)) /* loop through all links */
			while (bin (rel (itsptr), 18) < bin (block_end, 18));
			if itsptr -> its.its_mod = "100011"b
			then do;			/* see if link is snapped */
				lptr = itsptr -> based_ptr;
						/* do ptr copy to pick up any indirection */
				if lptr = vptr
				then do;
					vlp = headptr -> header.original_linkage_ptr;
					itsptr -> based_double =
					     addrel (vlp,
					     bit (bin (bin (rel (itsptr), 18) - bin (rel (headptr), 18), 18)))
					     -> based_double;
				     end;
			     end;
		     end;
		end;
	end;

	vsize = np -> variable_node.vbl_size;

	if vsize > sys_info$max_seg_size
	then call fortran_storage_manager_$free (np);

	else if rel (np -> variable_node.vbl_ptr) = "0"b	/* separate seg */
	then call delete_$ptr (np -> variable_node.vbl_ptr, "010100"b, me (whox), code);
	else free np -> variable_node.vbl_ptr -> variable in (sb -> stack_header.user_free_ptr -> based_area);
	tp -> variable_table_header.total_allocated_size = tp -> variable_table_header.total_allocated_size - vsize;

	nchars = np -> variable_node.name_size;		/* set so that free will work correctly */
	old_np -> variable_node.forward_thread = tnp;	/* thread around node to be deleted */
	free np -> variable_node in (sb -> stack_header.system_free_ptr -> based_area);
	tp -> variable_table_header.cur_num_of_variables = tp -> variable_table_header.cur_num_of_variables - 1;

	deleted = "1"b;
	return;
     end;						/* of delete_it */

%page;
/* Include Files */
%include system_link_names;
%page;
%include stack_header;
%page;
%include linkdcl;


     end;
