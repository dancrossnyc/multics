/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-01-30,JRGray), approve(89-04-17,MCR8064), audit(89-04-18,Huen),
     install(89-06-09,MR12.3-1055):
     Modified to handle explicit archive component pathnames.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
translator_info_:
     procedure ();

/*	     "translator_info_" -- this procedure contains utility routines	*/
/*	needed by the various system translators.  They are centralized here	*/
/*	to avoid repetitions in each of the individual translators.		*/

/*	Created by D. M. Wells in May, 1972.				*/

/*	Modified by D. M. Wells on 3 August, 1972 to add comments prior	*/
/*		to installation.					*/
/*	Modified by M. Weaver on 12 July 1983 to add the			*/
/*		dummy entrypoint component_get_source_info		*/

/* * * * * PARAMETER DECLARATIONS  * * * * * * * */

declare	(
	bv_seg_ptr	pointer,
	bv_dirname	char (*),
	bv_ename		char (*),
	bv_compname	char (*),
	bv_date_time_modified
			fixed binary (71),
	bv_unique_id	bit (36) aligned,
	bv_error_code	fixed bin (35)
	)		parameter;

/* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */

declare	(
	ename		char (32),
	compname		char (32),
	dirname		char (168)
	)		automatic;

declare	find_component	bit (1);

declare	1 branch		aligned automatic,
	  2 type		bit (2) unaligned,
	  2 nnames	bit (16) unaligned,
	  2 nrp		bit (18) unaligned,
	  2 dtm		bit (36) unaligned,
	  2 dtu		bit (36) unaligned,
	  2 mode		bit (5) unaligned,
	  2 padding	bit (13) unaligned,
	  2 records	bit (18) unaligned,
	  2 dtd		bit (36) unaligned,
	  2 dtem		bit (36) unaligned,
	  2 acct		bit (36) unaligned,
	  2 curlen	bit (12) unaligned,
	  2 bitcnt	bit (24) unaligned,
	  2 did		bit (4) unaligned,
	  2 mdid		bit (4) unaligned,
	  2 copysw	bit (1) unaligned,
	  2 pad2		bit (9) unaligned,
	  2 rbs		(0:2) bit (6) unaligned,
	  2 unique_id	bit (36) unaligned;

declare	archive_header_ptr	ptr;
declare	01 ah		like archive_header based (archive_header_ptr);

/* * * * * ENTRY CONSTANT DECLARATIONS * * * * * */

declare	convert_date_to_binary_
			entry (char (*), fixed bin (71), fixed bin (35));
declare	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin (17), char (*), fixed bin (35)),
	hcs_$status_long	entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
declare	error_table_$archive_fmt_err
			ext fixed bin (35);

declare	(addr, fixed, null) builtin;

/* * * * * VALID ARCHIVE HEADER CONSTANTS * * * * */

dcl	valid_header_begin	char (8) int static options (constant) init ("



		");
dcl	valid_pad1	char (4) int static options (constant) init ("    ");
dcl	valid_pad		char (4) int static options (constant) init ("    ");
dcl	valid_header_end	char (8) int static options (constant) init ("



");


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

get_source_info:
     entry (bv_seg_ptr, bv_dirname, bv_ename, bv_date_time_modified, bv_unique_id, bv_error_code);

	find_component = "0"b;
	goto join;

component_get_source_info:
     entry (bv_seg_ptr, bv_dirname, bv_ename, bv_compname, bv_date_time_modified, bv_unique_id, bv_error_code);

	find_component = "1"b;

/* find out where in storage system this is	*/
join:
	call hcs_$fs_get_path_name (bv_seg_ptr, dirname, (0), ename, bv_error_code);
	if bv_error_code ^= 0
	then return;

/* get the structure with all the info		*/
	call hcs_$status_long (dirname, ename, 0b, addr (branch), null (), bv_error_code);
	if bv_error_code ^= 0
	then return;

	bv_dirname = dirname;			/* Notice that we used our own "dirname" and	*/
	bv_ename = ename;				/* "ename" because the caller may have given us	*/
						/* too short a string to hold the names, e.g.,	*/
						/* a string of zero length.			*/

	bv_date_time_modified = fixed (branch.dtm || (16)"0"b, 71);
						/* branch.dtm is a storage system time	*/
	bv_unique_id = branch.unique_id;

	if find_component
	then do;
	     bv_compname = "";
	     if fixed (rel (bv_seg_ptr)) >= size (archive_header)
	     then do;				/* can be archive component */
		archive_header_ptr = addrel (bv_seg_ptr, -size (archive_header));
		if ah.header_begin = valid_header_begin & ah.pad1 = valid_pad1 & ah.pad = valid_pad
		     & ah.header_end = valid_header_end
		then do;
		     bv_compname = ah.name;
		     call convert_date_to_binary_ (ah.timeup, bv_date_time_modified, bv_error_code);
		end;
		else bv_error_code = error_table_$archive_fmt_err;
	     end;
	end;

%page;

%include archive_header;

     end translator_info_;
