/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-30,JRGray), approve(89-04-17,MCR8064), audit(89-04-18,Huen),
     install(89-06-09,MR12.3-1055):
     Modified to work with explicit archive component pathnames.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

find_source_file_:
     proc (p_pathname, p_suffix, p_source_name, p_source_ptr, p_source_bit_count, p_code);

/* DESCRIPTION:

         Find  a source file given a pathname (including archive component 
     pathname) and optional suffix to apply to the entryname portion.  The
     results given back to the caller  are the sourcename, pointer to, and
     bit count of the source file.  A  status code is returned to indicate
     a fatal error; it only indicates a fatal error if it   is   non-zero
     on   return.      There   are   three   entrypoints:
     find_source_file_, $look_in_wdir, and $search_path.  The first looks only
     where its input arguments tell it.  $look_in_wdir will use the processes'
     current  working_dir  if  the  first check fails.  The $search_path entry
     will only use the search path specified in the argument list.
*/

/* HISTORY:

Written by Melanie Weaver, 07/12/83:  based on a version by
	  J. R. Gray, 04/25/83.
Modified:
08/18/83 by S. Herbst: fix bug that only found segs in wdir.
08/29/83 by Lee A. Newcomb: add $search_paths entry to implement probe
	  search paths, see MCR 6240 as amended.
*/
%page;
/* START OF DECLARATIONS */
/* Parameter */
dcl  (
     p_pathname		        char (*),		/* full pathname of source file to find */
     p_suffix		        char (*),		/* (optional) suffix to be apply */
     p_search_list_name	        char (*),		/* name of search list to use */
     p_source_name		        char (*),		/* entryname of the file found */
     p_source_ptr		        ptr,		/* pointer to the file found */
     p_source_bit_count	        fixed bin (24),	/* size of the file found */
     p_code		        fixed bin (35)	/* status code, ^= 0 only error occurred */
     )			        parameter;

/* Automatic */
dcl  (
     component_name		        char (32),		/* archive component name. */
     dir_name		        char (528),		/* curr. dir to look in, 528 max. depth */
     entry_name		        char (32),
     ref_dir		        char (528),		/* only used in $search_path entry */
     working_dir_name	        char (528)		/* only used in $look_in_wdir */
     )			        automatic;

/* Builtin */

dcl  null			        builtin;

/* Entry */
dcl
     expand_pathname_$component_add_suffix entry (char (*), char (*), char (*), char (*), char (*), fixed bin (35)),
     get_wdir_		        entry () returns (char (168)),
     initiate_file_$component	        entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35)),
     search_paths_$find_dir	        entry (char (*), ptr, char (*), char (*), char (*), fixed bin (35));


/* END OF DECLARATIONS */
%page;
/* find_source_file_:
/*      proc (p_pathname, p_suffix, p_source_name, p_source_ptr, p_source_bit_count, p_code); */

	call COMMON_INIT ();			/* init output params. & parse p_pathname */
	if p_code ^= 0 then return;			/* will be zero if no error */

	call initiate_file_$component (dir_name, entry_name, component_name, R_ACCESS, p_source_ptr, p_source_bit_count, p_code);
	return;

/* end find_source_file_; */


look_in_wdir:
     entry (p_pathname, p_suffix, p_source_name, p_source_ptr, p_source_bit_count, p_code);

/* do the same as the main entry, but look in the working directory */
/* if we do not find the file where p_pathname says it is */

	call COMMON_INIT ();			/* init output params. & parse p_pathname */
	if p_code ^= 0 then return;			/* will be zero if no error */

	call initiate_file_$component (dir_name, entry_name, component_name, R_ACCESS, p_source_ptr, p_source_bit_count, p_code);
	if p_code = 0 then return;

/* if we get here, we need to look in the working directory */

	working_dir_name = get_wdir_ ();
	if working_dir_name ^= dir_name then do;	/* only do if not dup. effort */
	     call initiate_file_$component (working_dir_name, entry_name, component_name, R_ACCESS, p_source_ptr, p_source_bit_count, p_code);
	     if p_code = 0 then return;
	end;

	if component_name ^= "" then			/* look for unarchived source in working_dir */
	     call initiate_file_$component (working_dir_name, component_name, "", R_ACCESS, p_source_ptr, p_source_bit_count, p_code);

	return;

/* end find_source_file_$look_in_wdir; */
%page;
search_path:
     entry (p_pathname, p_suffix, p_search_list_name, p_source_name, p_source_ptr, p_source_bit_count, p_code);

/* This entry only uses the search list given to find the source file. */
/* This is currently being added for support of the probe search list. */

	call COMMON_INIT ();			/* get entryname to look for */
	if p_code ^= 0 then return;			/* will be zero if no error */

/* set the ref_dir from dir_name so dir_name will be the resultant dir */

	ref_dir = dir_name;
	call search_paths_$find_dir (p_search_list_name, null (), entry_name, ref_dir, dir_name, p_code);
	if p_code = 0 then do;
	     call initiate_file_$component (dir_name, entry_name, component_name,
		R_ACCESS, p_source_ptr, p_source_bit_count, p_code);
	     if p_code = 0 then return;
	end;

	if component_name = "" then return;

/* couldn't find archive?, look for unarchived source */
	call search_paths_$find_dir (p_search_list_name, null (), component_name, ref_dir, dir_name, p_code);
	if p_code ^= 0 then return;

	call initiate_file_$component (dir_name, component_name, "", R_ACCESS, p_source_ptr, p_source_bit_count, p_code);
	return;

/* end find_source_file_$search_path; */




COMMON_INIT:
     proc ();

/* This procedure parses the input pathname into its directory and entryname */
/* portions.  If the input is an archive pathname, we return a status code   */
/* until support for them is added.  First, all output parameters are        */
/* initialized, just for safety.				       */

	p_source_name = "";
	p_source_ptr = null;
	p_source_bit_count = 0;

	call expand_pathname_$component_add_suffix (p_pathname, p_suffix, dir_name, entry_name, component_name, p_code);
	if p_code ^= 0 then return;			/* bad input */

	if component_name ^= "" then p_source_name = component_name;
	else p_source_name = entry_name;
     end COMMON_INIT;


/* INCLUDE FILES start next page */
%page;
%include access_mode_values;


     end find_source_file_;
