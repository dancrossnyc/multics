/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to allow initiation of MSFs by initiating component 0 of the MSF.
                                                   END HISTORY COMMENTS */


initiate: in: proc;

/* The initiate command:

	initiate path {reference_names} {-control_args}

Rewritten 01/11/80 by S. Herbst */


%include branch_status;

dcl names (99 /* arbitrary */) char (32) aligned based (names_ptr);

dcl arg char (arg_len) based (arg_ptr);
dcl (dn, act_dn) char (168);
dcl (en, act_en, refname) char (32);

dcl type fixed bin (2);
dcl bc fixed bin (24);

dcl area area based (area_ptr);

dcl (all_sw, chase_sw, force_sw, forced, got_path, got_refname) bit (1);
dcl (long_sw, second_refname, some_args) bit (1);

dcl (area_ptr, arg_ptr, names_ptr, seg_ptr) ptr;

dcl (arg_count, arg_len, i, j, names_count, segno) fixed bin;
dcl code fixed bin (35);

dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$dirseg fixed bin (35) ext;
dcl error_table_$namedup fixed bin (35) ext;
dcl error_table_$segknown fixed bin (35) ext;

dcl active_fnc_err_ entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl ioa_ entry options (variable);
dcl term_$single_refname entry (char (*), fixed bin (35));

dcl (addr, addrel, baseno, bin, fixed, null, rtrim, substr) builtin;

dcl cleanup condition;
/**/
	call cu_$af_return_arg (arg_count, null, 0, code);
	if code = 0 then do;
	     call active_fnc_err_ (0, "initiate", "Cannot be called as an active function.");
	     return;
	end;

	all_sw, force_sw, long_sw, some_args = "0"b;
	chase_sw = "1"b;
	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) ^= "-" then some_args = "1"b;

	     else if arg = "-all" | arg = "-a" then all_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf" then long_sw = "0"b;
	     else if arg = "-long" | arg = "-lg" | arg = "-s" then long_sw = "1"b;
	     else if arg = "-chase" then chase_sw = "1"b;
	     else if arg = "-no_chase" then chase_sw = "0"b;
	     else if arg = "-force" | arg = "-fc" then force_sw = "1"b;
	     else if arg = "-no_force" | arg = "-nfc" then force_sw = "0"b;
	     else do;
		call com_err_ (error_table_$badopt, "initiate", "^a", arg);
		return;
	     end;
	end;

	if ^some_args then do;
	     call com_err_$suppress_name (0, "initiate",
		"Usage:  initiate path {reference_names} {-control_args}");
	     return;
	end;

	names_ptr = null;
	got_path, got_refname, second_refname = "0"b;
	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-" then go to NEXT_ARG;

	     if ^got_path then do;
		call expand_pathname_ (arg, dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, "initiate", "^a", arg);
		     return;
		end;
		got_path = "1"b;

		if all_sw then do;
		     got_refname = "1"b;
		     area_ptr = get_system_free_area_ ();

		     on condition (cleanup) call clean_up;

		     call hcs_$status_ (dn, en, fixed (chase_sw, 1), addr (branch_status), area_ptr, code);
		     if code ^= 0 then do;
			call com_err_ (code, "initiate",
			     "Unable to get names of ^a^[>^]^a", dn, dn ^= ">", en);
			return;
		     end;
		     names_ptr = addrel (area_ptr, branch_status.names_rel_pointer);
		     names_count = bin (branch_status.number_names);
		     do j = 1 to names_count;
			refname = names (j);	/* initiate by each name on seg */

			call init;
		     end;
		end;
	     end;
	     else do;				/* reference name specified */
		if got_refname then second_refname = "1"b;  /* err msg for first refname only */
		got_refname = "1"b;
		refname = arg;

		if ^all_sw then call init;

		else do;
		     do j = names_count by -1 to 1 while (names (j) ^= refname); end;
						/* only do those names not already init'd by -all */
		     if j = 0 then call init;
		end;
	     end;
NEXT_ARG:	end;

	if ^got_refname then do;
	     refname = en;				/* no refnames specified: initiate by entryname */

	     call init;
	end;

RETURN:	if all_sw then call clean_up;
	return;
/**/
init: proc;

/* This internal procedure initiates a segment by one reference name */

	forced = "0"b;

	act_dn = dn;
	act_en = en;
INITIATE:	call hcs_$initiate (act_dn, act_en, refname, 0, 0, seg_ptr, code);
	if code ^= 0 & code ^= error_table_$segknown then  /* OK if seg already known by same name */
	     if code = error_table_$namedup then	/* a different seg known by this name */
		if force_sw & ^forced then do;
		     forced = "1"b;
		     call term_$single_refname (refname, code);  /* terminate old reference to refname */
		     if code ^= 0 then call com_err_ (code, "initiate",
			"Unable to terminate reference name ^a", refname);
		     else go to INITIATE;
		end;
		else call com_err_ (code, "initiate", "^a", refname);
	     else if code = error_table_$dirseg then do;
		call hcs_$status_minf (dn, en, 1, type, bc, code);
		if code = 0 & type = 2 & bc > 0 then do;
		     act_dn = rtrim (dn) || ">" || en;
		     act_en = "0";
		     goto INITIATE;
		end;
		else do;
		     call com_err_ (error_table_$dirseg, "initiate",  "^a^[>^]^a", dn, dn ^= ">", en);
		     go to RETURN;
		end;
	     end;
	     else do;
		if ^second_refname then call com_err_ (code, "initiate", "^a^[>^]^a", dn, dn ^= ">", en);
		if seg_ptr = null then go to RETURN;	/* can't initiate the segment at all */
	     end;

	else if long_sw then do;			/* success */
	     segno = bin (baseno (seg_ptr), 17);
	     call ioa_ ("^a>^a initiated with segment number ^o", dn, en, segno);
	     long_sw = "0"b;			/* print only for first refname */
	end;

end init;




clean_up: proc;

	if names_ptr ^= null then free names in (area);
	names_ptr = null;

end clean_up;


end initiate;
