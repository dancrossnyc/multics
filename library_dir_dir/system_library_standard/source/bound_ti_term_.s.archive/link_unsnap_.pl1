/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* LINK_UNSNAP is a proceedure to unsnap links in a combined linkage section. */
/* it also gives a warning and unsnaps trap before link linkage */
/* Modification record: 				*/
/* first coded by M.A.Meer and completed 10/69 */
/* converted to v2 PL/I and changed to validate the linkage template	  */
/* pointer in the linkage section header (to get around a bug in HC)	*/
/* by D. M. Wells on 1974.05.02 (MCR 476 - part iii)		*/
/* 11/6/74 by S. Webber to allow lots to begin other than at the base of a segment */
/* 5/17/76 by M. Weaver to check for links to separate static */
/* 6/11/76 by M. Weaver to fix bug that unsnaps almost all links */

link_unsnap_: proc (lotptr, isotptr, linkageptr, hcsc, high_seg);

dcl (addrel, baseno, bit, bin, fixed, null, rel) builtin;
dcl  term_segno bit (15) aligned;			/* Seg. no. of seg. to be discarded. */
dcl  term_link_segno bit (15) aligned;			/* Seg. no. of linkage to be discarded. */
dcl  term_static_segno bit (15) aligned;		/* seg. no. of static to be discarded */
dcl  sep_static_sw bit (1) aligned;			/* ON if static is separate from linkage */
dcl  bptr bit (72) aligned based;
dcl  based_ptr ptr based;

dcl (lotptr,					/* pointer to linkage offset tabel */
     linkageptr,					/* pointer to linkage section to be discarded */
     headptr,					/* pointer to beginning of block -- header */
     defstartptr,					/* pointer to beginning of definition section for this block */
     linkstartptr,					/* pointer to beginning of links in this block */
     itsptr,					/* pointer to a link -- its pair */
     vlp,						/* pointer to virgin linkage section */
     isotptr,					/* pointer to static offset table */
     nxtblkptr) ptr;				/* pointer to next block in this section */

dcl (hcsc,					/* hard core segment count */
     segno,
     hard_core_seg_count,
     high_seg) fixed bin (17);			/* highest segment number used minus hcsc */
dcl  t_segno fixed bin (18);


dcl  fword fixed bin (35) based (lotp);			/* useful way of addressing a word */


dcl (relbeginptr,					/* relative ptr to beginning of linkage section to be discarded */
     block_end,					/* rel ptr to end of links in this block */
     rel_end_ptr) bit (18) aligned;			/* end of linkage section to be discarded */

dcl (static_relbeginptr,				/* relative ptr to beginning of static to be discarded */
     static_rel_end_ptr) bit (18) aligned;		/* end of static section to be discarded */



%include its;
%include lot;
%include linkdcl;

/*  */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	hard_core_seg_count = hcsc;
	if rel (linkageptr) = (18)"1"b then do;		/* initialize for no linkage section to be discarded */
	     term_segno = bit (bin (baseno (linkageptr), 15, 0), 15);
	     headptr = null ();
	     relbeginptr = "0"b;
	     rel_end_ptr = "0"b;
	     term_link_segno = "0"b;
	     sep_static_sw = "0"b;
	end;
	else do;					/* for segments with linkage sections to be discarded */
	     headptr = linkageptr;			/* header pointer for linkage section to be discarded */
	     relbeginptr = rel (headptr);		/* rel ptr to beginning of linkage section to be discarded */

/* first set up variables relating to linkage to be discarded */

	     rel_end_ptr = bit (bin (bin (headptr -> header.block_length, 18)+bin (relbeginptr, 18)-1, 18));
	     term_segno = bit (bin (headptr -> header.stats.segment_number, 15, 0), 15); /* segment to be discarded */
	     term_link_segno = bit (bin (baseno (headptr), 15, 0), 15); /* segment number of linkage to be discarded */
	     t_segno = bin (term_segno, 18);		/*  see if we have a separate static section allocated */
	     if isotptr -> isot1 (t_segno).flags.fault = "11"b then sep_static_sw = "0"b;
	     else if isotptr -> isot.isp (t_segno) = lotptr -> lot.lp (t_segno) then sep_static_sw = "0"b;
	     else do;
		sep_static_sw = "1"b;
		static_relbeginptr = rel (isotptr -> isot.isp (t_segno));
		static_rel_end_ptr = bit (bin (bin (headptr -> header.static_length, 18)
		     + bin (static_relbeginptr, 18) - 1, 18));
		term_static_segno = bit (bin (baseno (isotptr -> isot.isp (t_segno)), 15), 15);
	     end;
	end;

/* next fiddle with the linkage offset table to start down the combined linkage section */

	do segno = hard_core_seg_count+1 to hard_core_seg_count+high_seg;
	     if rel (lotptr -> lot.lp (segno)) ^= "0"b then do;
		headptr = lotptr -> lot.lp (segno);
		defstartptr = headptr -> header.def_ptr; /* pointer to beginning of def section */
		linkstartptr = addrel (headptr, headptr -> header.stats.begin_links); /* pointer to beginning of links */

/* check for defs in linkage section and compute end of links */

		if (baseno (linkstartptr) = baseno (defstartptr)) & (fixed (rel (defstartptr), 18) > fixed (rel (linkstartptr), 18))
		then block_end = rel (defstartptr);	/* end of links before end of block if defs follow links */
		else block_end = rel (addrel (headptr, headptr -> header.stats.block_length));
						/* end of links and end of block are the same	*/

/* GET LINK PAIRS */


		do itsptr = linkstartptr repeat (addrel (itsptr, 2)) /* loop through all ITS ptrs here	*/
			while (bin (rel (itsptr), 18) < bin (block_end, 18));
		     if itsptr -> its.its_mod ^= "100011"b then go to next_lk; /* not a snapped link */
		     if fixed (itsptr -> its.segno, 18) < hard_core_seg_count then
			go to next_lk;		/* an aos count should never get this big */

/* now check for segment or linkage section to be deleted */

		     if itsptr -> its.segno ^= term_segno
		     then do;			/* need to check more to see if should unsnap	*/
			if itsptr -> its.segno ^= term_link_segno then goto check_static;
			if itsptr -> its.offset > rel_end_ptr then goto check_static;
			if itsptr -> its.offset >= relbeginptr then goto unsnap;
						/* link is to linkage section to be discarded */
check_static:		if sep_static_sw then do;	/*  check to see if link points to separate static */
			     if itsptr -> its.segno ^= term_static_segno then goto next_lk;
			     if itsptr -> its.offset > static_rel_end_ptr then goto next_lk;
			     if itsptr -> its.offset < static_relbeginptr then goto next_lk;
			end;
			else goto next_lk;		/* no separate static */
		     end;

unsnap:		     vlp = headptr -> header.original_linkage_ptr;
		     itsptr -> bptr = addrel (vlp, bit (bin (bin (rel (itsptr), 18)-bin (rel (headptr), 18), 18))) -> bptr;

next_lk:
		end;

	     end;

	end;

	return;

     end;
