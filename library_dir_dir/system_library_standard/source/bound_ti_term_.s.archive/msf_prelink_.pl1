/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     First reference trap procedure for object multisegment files.  This
     procedure completes snapping of all inter-component links in an object
     MSF, and runs any first reference traps in the other MSF components.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll79,initcol0,dclind4,idind24,struclvlind1,comcol41 */

msf_prelink_:
  proc (info_linkp);		/** ptr to info link    (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	msf_prelink_				*/
  /***	Input:	info_linkp				*/
  /***	Function:	given a pointer to an object MSF linkage section	*/
  /***		header,  (derived from the unsnapped link passed	*/
  /***		to it), initiate each of the MSF components,	*/
  /***		combine their linkage sections if necessary, scan	*/
  /***		their linkage sections completing the snapping of	*/
  /***		any partially snapped links, and running the	*/
  /***		first reference traps of all of the other	*/
  /***		components (ie. other than the component whos	*/
  /***		firstref trap cause the procedure to be invoked	*/
  /***		in the first place.)			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  /* parameters */

  dcl info_linkp		ptr parameter;

  /* based */

  dcl 01 comp		(0:n_comp) aligned like component based (ctp);
  dcl 01 dh		aligned like definition_header based (dhp);
  dcl 01 lh		aligned like linkage_header based (lhp);
  dcl 01 mm		aligned like msf_map based (mmp);
  dcl system_free_area	area based (system_free_areap);

  dcl 01 component		aligned based,
       02 segp		ptr,
       02 linkp		ptr,
       02 statp		ptr,
       02 symbp		ptr;

  /* automatic */

  dcl c			fixed bin;
  dcl ctp			ptr;
  dcl dhp			ptr;
  dcl dir_name		char (168);
  dcl ec			fixed bin (35);
  dcl entry_name		char (32);
  dcl lhp			ptr;
  dcl mmp			ptr;
  dcl n_comp		fixed bin;
  dcl ring		fixed bin;
  dcl seg_no		fixed bin;
  dcl system_free_areap	ptr;

  /* procedures */

  dcl cu_$make_entry_value	entry (ptr, entry);
  dcl get_ring_		entry () returns (fixed bin (3));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl hcs_$link_force	entry (ptr, fixed bin, fixed bin (35));
  dcl hcs_$combine_linkage	entry (ptr, fixed bin, fixed bin (35));
  dcl initiate_file_	entry (char (*), char (*), bit (*), ptr,
			fixed bin (24), fixed bin (35));

  /* conditions */

  dcl cleanup		condition;
  dcl object_msf_damaged_	condition;

  /* builtin */

  dcl addwordno		builtin;
  dcl char		builtin;
  dcl codeptr		builtin;
  dcl hbound		builtin;
  dcl lbound		builtin;
  dcl ltrim		builtin;
  dcl min			builtin;
  dcl null		builtin;
  dcl segno		builtin;
  dcl size		builtin;
  dcl stackbaseptr		builtin;
  dcl unspec		builtin;
  dcl wordno		builtin;
  
  system_free_areap = get_system_free_area_ ();

  /* get address of start of linkage section */

  lhp = addwordno (info_linkp, info_linkp -> object_link.header_relp);

  /* get definition section header */

  dhp = lh.def_ptr;

  if dh.msf_map_relp = 0
    then signal object_msf_damaged_;

  /* get msf_map */

  mmp = addwordno (dhp, dh.msf_map_relp);

  /* set up cleanup handler for component table */

  ctp = null;

  on cleanup
    begin;
    if ctp ^= null
      then free comp in (system_free_area);
  end;

  n_comp = mm.component_count - 1;
  allocate comp in (system_free_area);

  /* get the containing directory name */

  call hcs_$fs_get_path_name (dhp, dir_name, (0), entry_name, ec);

  /* get pointers to the components */

  do c = lbound (comp, 1) to hbound (comp, 1);;
    entry_name = ltrim (char (c));
    call initiate_file_ (dir_name, entry_name, RE_ACCESS, comp (c).segp,
         0, ec);
    if ec ^= 0
      then signal object_msf_damaged_;
  end;

  /* get the linkage, static, and symbol pointers for the components,	*/
  /* combining their linkage sections as necessary		*/

  sb = stackbaseptr ();
  lotp = stack_header.lot_ptr;
  isotp = stack_header.isot_ptr;
  ring = get_ring_ ();
  
  do c = lbound (comp, 1) to hbound (comp, 1);
    seg_no = segno (comp (c).segp);
    if seg_no > stack_header.cur_lot_size
      then signal object_msf_damaged_;
    if unspec (lot.lp (seg_no)) = lot_fault
      then do;
        call hcs_$combine_linkage (comp (c).segp, ring, ec);
        if ec ^= 0
	then signal object_msf_damaged_;
      end;
    comp (c).linkp = lot.lp (seg_no);
    comp (c).statp = isot.isp (seg_no);
    comp (c).symbp = comp (c).linkp -> linkage_header.symbol_ptr;
  end;

  /* now we complete the prelinking in all of the components */

  do c = lbound (comp, 1) to hbound (comp, 1);
    call prelink_component (ctp, n_comp, c);
  end;

  /* then run the firstref_traps in each of the components, taking	*/
  /* care not to invoke msf_prelink_ again.			*/

  do c = lbound (comp, 1) to hbound (comp, 1);
    if c ^= mm.my_component		/* this will occur later anyway */
      then call execute_firstref_traps (ctp, n_comp, c);
  end;

  free comp in (system_free_area);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


prelink_component:
  proc (ctp,			/** component table ptr (in )	*/
       n_comp,			/** component count	    (in )	*/
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	prelink_component				*/
  /***	Input:	component_table, component_index		*/
  /***	Function:	completes the prelinking of the links in a single	*/
  /***		components linkage section.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl ctp			ptr;
  dcl n_comp		fixed bin;
  dcl c			fixed bin;

  /* based */

  dcl 01 comp		(0:n_comp) aligned like component based (ctp);
  dcl 01 its_ptr		aligned like its_unsigned based (linkp);
  dcl 01 lh		aligned like linkage_header based (lhp);
  dcl 01 lk		aligned like partial_link based (linkp);
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);

  /* automatic */

  dcl lhp			ptr;
  dcl link		fixed bin(18);
  dcl linkp		ptr;
  dcl lk_end		fixed bin;
  dcl t			fixed bin;
  dcl type		fixed bin;
  dcl vlhp		ptr;

  /* builtin */

  dcl segno		builtin;

  lhp = comp (c).linkp;
  vlhp = lh.original_linkage_ptr;

  /* calculate the number of links */

  if vlh.defs_in_link = "20"b3
    then lk_end = vlh.def_offset;
    else lk_end = vlh.linkage_section_lng;

  if vlh.first_ref_relp ^= 0
    then lk_end = min (lk_end, vlh.first_ref_relp);

  /* scan the linkage section for pre-snapped links */

  do link = vlh.link_begin 
         to lk_end - size (object_link)
         by size (object_link);

    /* get a pointer to the current link */

    linkp = addwordno (lhp, link);

    /* if it has a "47"b3 fault tag 3 rather than a "46"b3 fault tag 2 */

    if its_ptr.its_mod = FAULT_TAG_3
      then do;
        type = lk.type;
        t = lk.component;
        its_ptr.pad1 = ""b;

        /* snap text links to the object segment */

        if type = CLASS_TEXT
	then its_ptr.segno = segno (comp (t).segp);

        /* snap linkage links to the copied linkage section */

        else if type = CLASS_LINKAGE
	then do;
	  its_ptr.offset = lk.offset + wordno (comp (t).linkp);
	  its_ptr.segno = segno (comp (t).linkp);
	end;

        /* snap static links to the copied static section */

        else if type = CLASS_STATIC
	then do;
	  its_ptr.offset = lk.offset + wordno (comp (t).statp);
	  its_ptr.segno = segno (comp (t).statp);
	end;
	
        /* snap symbol links to the object segment */
        
        else if type = CLASS_SYMBOL
	then do;
	  its_ptr.offset = lk.offset + wordno (comp (t).symbp);
	  its_ptr.segno = segno (comp (t).symbp);
	end;
        else signal object_msf_damaged_;
	  
        its_ptr.its_mod = ITS_MODIFIER;
        its_ptr.ringno = get_ring_ ();
      end;
  end;

  end prelink_component;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


execute_firstref_traps:
  proc (ctp,			/** component table ptr (in ) */
       n_comp,			/** component count	    (in )	*/
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	execute_firstref_traps			*/
  /***	Input:	component_table, component_index		*/
  /***	Function:	executes the firstref traps in a given component	*/
  /***		if they have not already run.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl ctp			ptr;
  dcl n_comp		fixed bin;
  dcl c			fixed bin;

  /* based */

  dcl call_ptr		ptr based (call_ptr_ptr);
  dcl 01 comp		(0:n_comp) aligned like component based (ctp);
  dcl 01 lh		aligned like linkage_header based (lhp);
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);
  dcl 01 frt		aligned like fr_traps based (frtp);

  /* automatic */

  dcl call_ptr_ptr		ptr;
  dcl info_ptr_ptr		ptr;
  dcl lhp			ptr;
  dcl frtp		ptr;
  dcl linkp		ptr;
  dcl trap		fixed bin;
  dcl trap_proc		entry variable options (variable);
  dcl vlhp		ptr;

  /* there are no firstref traps or they have already run. */

  if comp (c).linkp -> its.pad4 = ""b
    then return;

  /* make sure we don't run them again */

  comp (c).linkp -> its.pad4 = ""b;

  lhp = comp (c).linkp;
  vlhp = lh.original_linkage_ptr;

  if vlh.first_ref_relp = 0
    then return;

  /* get the firstref block */

  frtp = addwordno (lhp, vlh.first_ref_relp);

  if frt.decl_vers ^= FR_TRAPS_VERSION_1
    then signal object_msf_damaged_;

  linkp = comp (c).linkp;

  do trap = 1 to frt.n_traps;
    call_ptr_ptr = addwordno (linkp, frt.trap_array (trap).call_relp);
    if frt.trap_array (trap).info_relp = 0
      then info_ptr_ptr = null;
      else info_ptr_ptr = addwordno (linkp, frt.trap_array (trap).info_relp);
    call hcs_$link_force (call_ptr_ptr, (0), ec);
    if ec ^= 0
      then signal object_msf_damaged_;

    /* don't re-run msf_prelink_ */

    if call_ptr ^= codeptr (msf_prelink_)
      then do;
        call cu_$make_entry_value (call_ptr, trap_proc);
        call trap_proc (info_ptr_ptr);
      end;
  end;

  end execute_firstref_traps;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include definition_dcls;
%include its;
%include lot;
%include object_link_dcls;
%include stack_header;

  end msf_prelink_;
