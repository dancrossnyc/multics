/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(90-03-21,Vu), approve(90-03-21,MCR8165), audit(90-03-29,Zimmerman),
     install(90-04-19,MR12.4-1006):
     Fix -bf argument for terminate_refname.
                                                   END HISTORY COMMENTS */


terminate: tm: proc;

/* Implements the terminate commands:

	terminate paths {-control_args}

	terminate_segno segment_numbers {-control_args}

	terminate_refname reference_names {-control_args}

	terminate_single_refname reference_names {-control_args}

The first three terminate segments; the last terminates only specified refnames.
Rewritten 01/11/80 by S. Herbst */
/* Changed to not abort for error_table_$seg_unknown 03/04/81 S. Herbst */


dcl arg char (arg_len) based (arg_ptr);
dcl dn char (168);
dcl (en, myname, refname, usage) char (32);

dcl (brief_sw, some_args) bit (1);

dcl (arg_ptr, seg_ptr) ptr;

dcl (arg_count, arg_len, i, segno) fixed bin;
dcl code fixed bin (35);

dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$invalidsegno fixed bin (35) ext;
dcl error_table_$name_not_found fixed bin (35) ext;
dcl error_table_$seg_unknown fixed bin (35) ext;

dcl active_fnc_err_ entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_wdir_ entry returns (char (168));
dcl term_ entry (char (*), char (*), fixed bin (35));
dcl term_$refname entry (char (*), fixed bin (35));
dcl term_$seg_ptr entry (ptr, fixed bin (35));
dcl term_$single_refname entry (char (*), fixed bin (35));

dcl (baseptr, null, substr) builtin;
/**/
	myname = "terminate";
	usage = "paths";
	go to COMMON;

terminate_segno: tms: entry;

	myname = "terminate_segno";
	usage = "segment_numbers";
	go to COMMON;

terminate_refname: tmr: entry;

	myname = "terminate_refname";
	usage = "reference_names";
	go to COMMON;

terminate_single_refname: tmsr: entry;

	myname = "terminate_single_refname";
	usage = "reference_names";


COMMON:	call cu_$af_return_arg (arg_count, null, 0, code);
	if code = 0 then do;
	     call active_fnc_err_ (0, myname, "Cannot be called as an active function.");
	     return;
	end;

	brief_sw, some_args = "0"b;
	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) ^= "-" then some_args = "1"b;

	     else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;
	     else if arg = "-name" | arg = "-nm" then do;
		i = i + 1;
		if i > arg_count then do;
		     call com_err_ (0, myname, "No value specified for -name");
		     return;
		end;
		some_args = "1"b;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		return;
	     end;
	end;

	if ^some_args then do;
	     call com_err_$suppress_name (0, myname, "Usage:  ^a ^a {-control_args}", myname, usage);
	     return;
	end;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) ^= "-" then do;

TERMINATE:	if myname = "terminate" then do;
		     call expand_pathname_ (arg, dn, en, code);
		     if code ^= 0 then do;
			call com_err_ (code, myname, "^a", arg);
			return;
		     end;
TERM_PATH:	     call term_ (dn, en, code);
		     if code ^= 0 then do;
			if ^brief_sw | code ^= error_table_$seg_unknown then
			     call com_err_ (code, myname, "^a^[>^]^a", dn, dn ^= ">", en);
			if code ^= error_table_$seg_unknown then return;
		     end;
		end;
		else if myname = "terminate_segno" then do;
		     segno = cv_oct_check_ (arg, code);
		     if code ^= 0 then do;
			call com_err_ (0, myname, "Invalid octal number ^a", arg);
			return;
		     end;
		     seg_ptr = baseptr (segno);
		     call term_$seg_ptr (seg_ptr, code);
		     if code ^= 0 then do;
             		if ^brief_sw | (code ^= error_table_$seg_unknown & code ^= error_table_$invalidsegno) then
			     call com_err_ (code, myname, "^a", arg);
			if code ^= error_table_$seg_unknown then return;
		     end;
		end;
		else if myname = "terminate_refname" then do;
		     refname = arg;
		     call term_$refname (refname, code);
		     if code ^= 0 then do;
TERM_ERROR:		if ^brief_sw | (code ^= error_table_$seg_unknown & code ^= error_table_$name_not_found) then
			     call com_err_ (code, myname, "^a", arg);
			if code ^= error_table_$seg_unknown then return;
		     end;
		end;
		else do;				/* terminate_single_refname */
		     refname = arg;
		     call term_$single_refname (refname, code);
		     if code ^= 0 then go to TERM_ERROR;
		end;
	     end;
	     else if arg = "-name" | arg = "-nm" then do;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if myname = "terminate" then do;	/* pathname */
		     dn = get_wdir_ ();
		     en = arg;
		     go to TERM_PATH;
		end;
		else go to TERMINATE;
	     end;
	end;

end terminate;
