/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Written and never journalized, God knows when (probably by Tavares). */
/* Modified April 1985 by Chris Jones to not print AIM range of free resources. */

interpret_resource_desc_: proc (resource_desc_ptr, nth, callername, rst_control, called_as_af, return_string, code);

dcl  nth fixed bin parameter,
     called_as_af bit (1) aligned parameter,
     return_string char (*) varying parameter,
     callername char (*) parameter,
     code fixed bin (35) parameter;

dcl  SYSTEM_HIGH bit (72) aligned;

%include resource_control_desc;
%include rst_control;

dcl 1 itemx based (itemptr) aligned like resource_descriptions.item,
     itemptr pointer;

dcl (ioa_$rsnnl, ioa_, ioa_$nnl, com_err_, active_fnc_err_) ext entry options (variable);

dcl (i, j) fixed bin,
    (first, last) fixed bin,
     saved_code fixed bin (35),
     acc (2) char (256),
    (want_acc, want_pacc) bit (1) aligned,
     error_table_$unimplemented_version ext fixed bin (35) static,
     pacc (2) char (256),
     temp_atts (2) bit (72) aligned,
     attstring char (512) varying;

dcl  mode_strings (8) char (4) varying static options (constant) initial
    ("null", "w", "e", "ew", "r", "rw", "re", "rew");

dcl  convert_authorization_$to_string ext entry (bit (72) aligned, char (*), fixed bin (35)),
     convert_authorization_$from_string ext entry (bit (72) aligned, char (*), fixed bin (35)),
     cv_rcp_attributes_$to_string ext entry (char (*) aligned, (2) bit (72) aligned, char (*) varying, fixed bin (35)),
     cv_rcp_attributes_$to_string_rel ext entry (char (*) aligned, (4) bit (72) aligned, char (*) varying, fixed bin (35));

	saved_code = 0;

	if resource_descriptions.version_no ^= resource_desc_version_1 then do;
	     code = error_table_$unimplemented_version;
	     return;
	end;

	call convert_authorization_$from_string (SYSTEM_HIGH, "system_high", code);
	if code ^= 0 then call err (code, "converting system_high");

	if nth = 0 then do;
	     first = 1;
	     last = resource_descriptions.n_items;
	end;
	else first, last = nth;

	do i = first to last;

	     itemptr = addr (resource_descriptions.item (i));

	     if rst_control.name
	     | rst_control.default
	     | rst_control.any_given_item
	     | (first ^= last) then
		call ioa_ ("Resource: ^a ^a^[^; (not by name)^]",
		itemx.type, itemx.name, itemx.given.name);

	     if (rst_control.uid
	     | (itemx.given.uid & rst_control.any_given_item)) then
		if called_as_af then
		     call ioa_$rsnnl ("^w", return_string, 0, itemx.uid);
		else call ioa_ ("Unique ID:^-^w", itemx.uid);

	     if (rst_control.potential_attributes
	     | (itemx.given.potential_attributes & rst_control.any_given_item)) then do;
		unspec (temp_atts) = ""b;
		temp_atts (1) = itemx.potential_attributes;
		call cv_rcp_attributes_$to_string (itemx.type, temp_atts, attstring, code);
		if code ^= 0 then call err (code, "Potential attributes");

		else if called_as_af then return_string = attstring;
		else call ioa_ ("Potential Attributes:^/^2-^a", attstring);
	     end;

	     if rst_control.attributes then do;
		call cv_rcp_attributes_$to_string (itemx.type, itemx.attributes (*), attstring, code);
		if code ^= 0 then call err (code, "Attributes");

		else if called_as_af then return_string = attstring;
		else call ioa_ ("Attributes:^-^a", attstring);
	     end;

	     if (rst_control.desired_attributes
	     | (itemx.given.desired_attributes & rst_control.any_given_item)) then do;
		call cv_rcp_attributes_$to_string_rel (itemx.type, itemx.desired_attributes (*), attstring, code);
		if code ^= 0 then call err (code, "Desired attributes");
		else if called_as_af then return_string = attstring;
		else call ioa_ ("Desired attributes:^-^a", attstring);
	     end;

	     if (rst_control.owner
	     | (itemx.given.owner & rst_control.any_given_item)) then
		if called_as_af then return_string = rtrim (itemx.owner, " ");
		else call ioa_ ("Owner:^2-^a", itemx.owner);

	     if (rst_control.acs_path
	     | (itemx.given.acs_path & rst_control.any_given_item)) then
		if called_as_af then
		     if itemx.acs_path = "" then return_string = """""";
		     else return_string = rtrim (itemx.acs_path, " ");
		else call ioa_ ("ACS Pathname:^-^[none^;^a^]", (itemx.acs_path = ""), itemx.acs_path);

	     want_pacc = (rst_control.potential_aim_range
		| (itemx.given.potential_aim_range & rst_control.any_given_item));
	     want_acc = (rst_control.aim_range
		| (itemx.given.aim_range & rst_control.any_given_item));

	     if want_pacc | want_acc then do;

		do j = 1 to 2;
		     code = 0;
		     if itemx.potential_aim_range (j) = ""b then pacc (j) = "system_low";
		     else if itemx.potential_aim_range (j) = SYSTEM_HIGH then pacc (j) = "system_high";
		     else call convert_authorization_$to_string (itemx.potential_aim_range (j), pacc (j), code);
		     if want_pacc then
			if code ^= 0 then do;
			     call err (code, "Potential AIM range");
			     want_pacc = ""b;
			end;

		     code = 0;
		     if itemx.aim_range (j) = ""b then acc (j) = "system_low";
		     else if itemx.aim_range (j) = SYSTEM_HIGH then acc (j) = "system_high";
		     else call convert_authorization_$to_string (itemx.aim_range (j), acc (j), code);
		     if want_acc then
			if code ^= 0 then do;
			     call err (code, "AIM range");
			     want_acc = ""b;
			end;
		end;

		if want_pacc then
		     if called_as_af then
			if pacc (1) = pacc (2) then return_string = rtrim (pacc (1), " ");
			else return_string = rtrim (pacc (1), " ") || "; " || rtrim (pacc (2), " ");
		     else call ioa_ ("Potential AIM ^[Class:^/^2-^a^;Range:^/^2-^a : ^a", (pacc (1) = pacc (2)), pacc);

		if want_acc then
		     if called_as_af then
			if acc (1) = acc (2) then return_string = rtrim (acc (1), " ");
			else return_string = rtrim (acc (1), " ") || "; " || rtrim (acc (2), " ");
		     else if itemx.owner ^= "free" then
			call ioa_ ("AIM ^[Class:^-^a^;Range:^-^a : ^a^]", (acc (1) = acc (2)), acc);
	     end;

	     if (rst_control.location
	     | (itemx.given.location & rst_control.any_given_item)) then
		if called_as_af then return_string = """" || rtrim (itemx.location, " ") || """";
		else call ioa_ ("Location:^2-^[""""^;^a^]", (itemx.location = ""), itemx.location);

	     if (rst_control.comment
	     | (itemx.given.comment & rst_control.any_given_item)
	     | (itemx.comment ^= "" & rst_control.default)) then
		if called_as_af then return_string = """" || rtrim (itemx.comment, " ") || """";
		else call ioa_ ("Comment:^2-^[""""^;^a^]", (itemx.comment = ""), itemx.comment);

	     if (rst_control.charge_type
	     | (itemx.given.charge_type & rst_control.any_given_item)) then
		if called_as_af then return_string = """" || rtrim (itemx.charge_type, " ") || """";
		else call ioa_ ("Charge type:^-^[""""^;^a^]", (itemx.charge_type = ""), itemx.charge_type);

	     if rst_control.mode then
		if called_as_af then return_string = mode_strings (binary (itemx.rew) + 1);
		else call ioa_ ("Mode:^2-^a", mode_strings (binary (itemx.rew) + 1));

	     if (rst_control.usage_lock
	     | (itemx.given.usage_lock & rst_control.any_given_item)
	     | (itemx.usage_lock & rst_control.default)) then
		if called_as_af then
		     if itemx.usage_lock then return_string = "true";
		     else return_string = "false";
		else call ioa_ ("Usage Lock:^-^[on^;off^]", itemx.usage_lock);

	     if (rst_control.release_lock
	     | (itemx.given.release_lock & rst_control.any_given_item)
	     | (itemx.release_lock & rst_control.default)) then
		if called_as_af then
		     if itemx.release_lock then return_string = "true";
		     else return_string = "false";
		else call ioa_ ("Release Lock:^-^[on^;off^]", itemx.release_lock);

	     if (rst_control.awaiting_clear
	     | (itemx.awaiting_clear & rst_control.default)) then
		if called_as_af then
		     if itemx.awaiting_clear then return_string = "true";
		     else return_string = "false";
		else call ioa_ ("Awaiting Clear:^-^[yes^;no^]", itemx.awaiting_clear);

	     if (rst_control.user_alloc
	     | (itemx.given.user_alloc & rst_control.any_given_item)
	     | rst_control.default) then
		if called_as_af then
		     if itemx.user_alloc then return_string = "true";
		     else return_string = "false";
		else call ioa_ ("Allocation state:^-^[allocated^;free^]", itemx.user_alloc);

	     if rst_control.given_flags then do;
		call ioa_ ("Given flags:");
		if itemx.given.name then call ioa_ ("^-name");
		if itemx.given.uid then call ioa_ ("^-uid");
		if itemx.given.potential_attributes then call ioa_ ("^-potential_attributes");
		if itemx.given.desired_attributes then call ioa_ ("^-desired_attributes");
		if itemx.given.potential_aim_range then call ioa_ ("^-potential_aim_range");
		if itemx.given.owner then call ioa_ ("^-owner");
		if itemx.given.acs_path then call ioa_ ("^-acs_path");
		if itemx.given.location then call ioa_ ("^-location");
		if itemx.given.comment then call ioa_ ("^-comment");
		if itemx.given.charge_type then call ioa_ ("^-charge_type");
		if itemx.given.usage_lock then call ioa_ ("^-usage_lock");
		if itemx.given.release_lock then call ioa_ ("^-release_lock");
		if itemx.given.user_alloc then call ioa_ ("^-alloc");
	     end;

	     if i ^= last then call ioa_ ("");
	end;

	code = saved_code;
	return;

err:	proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

	     if called_as_af then call active_fnc_err_ (code, callername, reason);
	     else call com_err_ (code, callername, reason);

	     if called_as_af then return_string = "";
	     saved_code = code;
	end err;

     end interpret_resource_desc_;
