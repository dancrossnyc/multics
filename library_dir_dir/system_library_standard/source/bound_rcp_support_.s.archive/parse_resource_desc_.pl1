/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-28,Hartogs), approve(86-07-28,MCR7463),
     audit(86-08-06,Lippard), install(86-08-14,MR12.0-1123):
     Make changes to disallow specifying less than 1 resource for reservation.
  2) change(87-06-08,Rauschelbach), approve(87-07-07,MCR7728),
     audit(87-07-08,Farley), install(87-07-15,MR12.1-1040):
     Changed to set the variable err_msg only when this segment is called
     throught the check entry point.
                                                   END HISTORY COMMENTS */

/* format: off */

parse_resource_desc_:
     proc (desc_str, area_ptr, resource_desc_ptr, resource_res_ptr, code);

/*
   This subroutine takes a reservation description string as input and
   returns pointers to two structures containing the necessary information to
   make a reservation of the described resources.  It calls
   cv_rcp_attributes_$from_string_rel to convert the attributes character
   string to a bit string if necessary.
*/

/*
   Written by R.J.C. Kissel 3/78.
   Modified by R.J.C. Kissel 1/79 to handle the new resource description in a compatible fashion.
   Modified by R.J.C. Kissel 3/79 to communicate in a kludgey way with build_resource_desc_.
*/

/* Arguments */

dcl  desc_str char (*);				/* The reservation description string. */
dcl  area_ptr ptr;					/* Area in which to allocate structures. */
						/* See the resource_control_desc.incl.pl1 for ptr declarations. */

dcl  code fixed bin (35);				/* Standard system status code. */

/* Local Variables */

dcl  check bit (1);					/* Syntax checking flag. */
dcl  arg_string char (256) varying;
						/* To hold individual arguments. */
dcl  volume bit (1);				/* Resource type is device or volume. */
dcl  count fixed bin;				/* Count of allocations. */
dcl  cur_pos fixed bin;				/* Current position in desc_str. */
dcl  i fixed bin;					/* Index for accessing structures. */
dcl  junk_bit bit (1);
dcl  rsc_type char (32);				/* primary resource type */

dcl  new ptr;					/* Pointer to a new parse_info structure. */
dcl  head ptr;					/* Pointer to the head of the parse_info list. */
dcl  tail ptr;					/* Pointer to the tail of the parse_info list. */

dcl 1 parse_info based,				/* Structure to save info from each resource description. */
    2 next ptr,					/* Next structure in the list. */
    2 rsc_type char (32),				/* The resource type. */
    2 rsc_name char (32),				/* The resource name. */
    2 attr bit (72) dim (4),				/* The resource attributes. */
    2 number fixed bin;				/* How many of this resource to get. */

/* Local Constants */

/* Local Overlays */

dcl  based_area area (261129) based;
						/* Area overlay. */

/* Include Files */

%include resource_control_desc;

%include rcp_resource_types;

/* External Entries */

dcl  cv_rcp_attributes_$from_string_rel
     entry (char (*), bit (72) dim (4), char (*) varying, fixed bin (35));
dcl  get_system_free_area_
     entry returns (ptr);
dcl  resource_info_$get_primary_type
     entry (char (*), char (*), fixed bin (35));
dcl  resource_info_$get_type
     entry (char (*), bit (1), fixed bin (35));
dcl  get_group_id_ entry returns (char (32));
dcl  build_resource_desc_$reserve
     entry ((*) char (*) varying, ptr, ptr, ptr, ptr, ptr, char (*) varying, fixed bin (35));

/* External Constants */

dcl  error_table_$badcall
     fixed bin (35) external;
dcl  error_table_$noarg fixed bin (35) external;
dcl  error_table_$name_not_found
     fixed bin (35) external;
dcl  error_table_$bad_conversion
     fixed bin (35) external;
dcl  error_table_$bad_index
     fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$inconsistent
     fixed bin (35) external;
dcl  error_table_$unbalanced_quotes
     fixed bin (35) external;
dcl  error_table_$resource_type_unknown
     fixed bin (35) external;
dcl  error_table_$resource_spec_ambiguous
     fixed bin (35) external;
dcl  error_table_$area_too_small
     fixed bin (35) external;

/* Builtin Functions and Conditions */

dcl (lbound, hbound, unspec, length, null, convert, substr, ltrim, rtrim)
     builtin;
dcl (cleanup, conversion, area)
     condition;

	check = "0"b;

	if area_ptr = null
	then area_ptr = get_system_free_area_ ();	/* Default area for this entry. */

	goto START;				/* This is the only reference to this label. */

check:
	entry (desc_str, area_ptr, resource_desc_ptr, resource_res_ptr, err_msg, code);

/* *
   This entry takes the same inputs and returns the same outputs as
   parse_resource_desc_.  However, more complete diagnostics are available
   in case an error is detected.
*/

/* Arguments */

dcl  err_msg char (*) varying;			/* A description of an error if one occurs. */

	err_msg = "";
	check = "1"b;

START:						/* There is only one reference to this label. */
dcl 1 token based aligned,
    2 next ptr,
    2 index fixed bin (24),
    2 length fixed bin (24);

dcl  tp ptr;					/* Token pointer. */
dcl  outidx fixed bin (24);
dcl  inidx fixed bin (24);
dcl  token_head_ptr ptr;				/* Start of token list. */
dcl  num_of_tokens fixed bin;
dcl  max_token_length fixed bin (24);
dcl  token_array dim (num_of_tokens) char (max_token_length) varying based;
dcl  tap ptr;					/* Token array pointer. */
dcl  aidx fixed bin;				/* Token array index. */
dcl  token_string char (string_length) based;
dcl  tsp ptr;					/* Token string pointer. */
dcl  string_length fixed bin (24);
dcl  token_index fixed bin (24);
dcl  token_length fixed bin (24);
dcl  token_exists bit (1);
dcl  error_msg char (256) varying;
dcl  new_code fixed bin (35);
dcl  ridx fixed bin;				/* Resource description index. */

	num_of_tokens = 0;
	max_token_length = 0;
	token_head_ptr = null ();
	tap = null ();
	tsp = null ();
	tp = null ();

	on cleanup
	     call Cleanup_Handler;

	string_length = length (desc_str);
	on area
	     goto ERROR_area;
	allocate token_string set (tsp);
	revert area;

	inidx = 1;
	outidx = 1;
	tsp -> token_string = "";

	call Get_Next_Token (desc_str, tsp -> token_string, inidx, outidx, token_index, token_length, token_exists);

	on area
	     goto ERROR_area;

/*
   Push tokens onto a LIFO stack, keeping track of how many there are
   and the length of the longest one.
*/

	do while (token_exists);

	     allocate token set (tp);

	     tp -> token.index = token_index;
	     tp -> token.length = token_length;
	     tp -> token.next = token_head_ptr;

	     token_head_ptr = tp;
	     num_of_tokens = num_of_tokens + 1;

	     if token_length > max_token_length
	     then max_token_length = token_length;

	     call Get_Next_Token (desc_str, tsp -> token_string, inidx, outidx, token_index, token_length, token_exists);
	end;

	if num_of_tokens > 0
	then allocate token_array set (tap);
	else goto ERROR_notype;

	revert area;

/*
   Now fill in the token_array from the end so that the tokens
   will be in their original order.
*/

	do aidx = hbound (tap -> token_array, 1) to lbound (tap -> token_array, 1) by -1;

	     tp = token_head_ptr;
	     if tp = null ()
	     then goto ERROR_internal;

	     tap -> token_array (aidx) = substr (tsp -> token_string, tp -> token.index, tp -> token.length);

	     token_head_ptr = tp -> token.next;
	     free tp -> token;			/* Clean up as we go. */
	end;

	free tsp -> token_string;			/* This is no longer needed. */

/*
   Now call build_resource_desc_$reserve to do the real parsing work
   and error checking.
   Note that for now, build_resource_desc_ can return a zero error
   code and a non-null error message of "User speicfied attributes.".
   This will be used as explained in a comment below.
*/

	call build_resource_desc_$reserve (tap -> token_array, area_ptr, null (), resource_desc_ptr, resource_res_ptr,
	     null (), error_msg, new_code);
	if new_code ^= 0
	then goto ERROR_rdesc;

/*
   Now check the resource description structures to make sure they
   adhere to the very limited rules currently allowed.
*/

	if resource_desc_ptr ^= null ()
	then do;
	     Resource_count = resource_descriptions.n_items;

	     do ridx = 1 to Resource_count by 1;

/*
   Check for possible old description which would be parsed correctly.
*/

		if resource_descriptions.item (ridx).name = VOLUME_TYPE (TAPE_VOL_VTYPEX)
		| resource_descriptions.item (ridx).name = DEVICE_TYPE (TAPE_DRIVE_DTYPEX)
		| resource_descriptions.item (ridx).name = VOLUME_TYPE (DISK_VOL_VTYPEX)
		| resource_descriptions.item (ridx).name = DEVICE_TYPE (DISK_DRIVE_DTYPEX)
		then do;
		     new_code = 0;
		     error_msg = "";
		     call Cleanup_Handler ();
		     revert cleanup;
		     goto OLD_DESCRIPTION_PARSER;
		end;

		call resource_info_$get_primary_type ((resource_descriptions.item (ridx).type), rsc_type, code);
		if code ^= 0 then goto ERROR_type;
		if rsc_type ^= VOLUME_TYPE (TAPE_VOL_VTYPEX)
		& rsc_type ^= DEVICE_TYPE (TAPE_DRIVE_DTYPEX)
		& rsc_type ^= VOLUME_TYPE (DISK_VOL_VTYPEX)
		& rsc_type ^= DEVICE_TYPE (DISK_DRIVE_DTYPEX)
		then goto ERROR_type;

		if (unspec (resource_descriptions.item (ridx).given) & "337777777777"b3) ^= "0"b
		then goto ERROR_carg;

/*
   The following is a kludge agreed upon by parse_resource_desc_ and
   build_resource_desc_.  It allows build_resource_desc_ to pass back information
   about what the user really specified so that parse_resource_desc_ can use it
   here to restrict the acceptable syntax of  a resource description.  This
   must be done because when build_resource_desc_ sets defaults
   the attributes given bit will always be set so that rcp_reserve_ can use
   the defaults even if the user didn't specify any attributes.  This destroys
   any information that build_resource_desc_ could return about what the
   user really said on his command line which is the information that parse_resource_desc_
   currently needs.
*/

		if resource_descriptions.item (ridx).given.name & resource_descriptions.item (ridx).status_code = 1
		then goto ERROR_nmattr;

		if (resource_descriptions.item (ridx).type = VOLUME_TYPE (TAPE_VOL_VTYPEX)
		| resource_descriptions.item (ridx).type = VOLUME_TYPE (DISK_VOL_VTYPEX))
		& ^resource_descriptions.item (ridx).given.name
		then goto ERROR_volnm;
	     end;
	end;

/*
   Done with the extra checks for MR7.0.
*/

	free tap -> token_array;			/* Finish freeing everything. */

	if check
	then err_msg = "";
	code = 0;
	revert cleanup;

	return;

ERROR_type:
	code = error_table_$resource_type_unknown;
	if check
	then err_msg = resource_descriptions.item (ridx).type;
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_carg:
	code = error_table_$badopt;
	if check
	then err_msg = "A control arg other than -attributes or -number was given.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_volnm:
	code = error_table_$resource_spec_ambiguous;
	if check
	then err_msg = "Names must be given for volume resource types.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_nmattr:
	code = error_table_$inconsistent;
	if check
	then err_msg = "If a name is given then attributes may not be given.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_noroom:
	code = error_table_$bad_index;
	if check
	then err_msg = "Internal error in parse_resource_desc_.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_noquote:
	code = error_table_$unbalanced_quotes;
	if check
	then err_msg = "Rest of string is: " || substr (desc_str, inidx);
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_internal:
	code = error_table_$bad_index;
	if check
	then err_msg = "Internal indexing error in parse_resource_desc_.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_notype:
	code = error_table_$resource_spec_ambiguous;
	if check
	then err_msg = "At least a resource type must be specified.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_area:
	code = error_table_$area_too_small;
	if check
	then err_msg = "Not enough area storage to allocate internal structures.";
	call Cleanup_Handler ();
	revert cleanup;
	return;

ERROR_rdesc:					/*
						   For now we have the new error code and the error message, so we will
						   let the old parser have a chance.  If it works, then we will be happy
						   and report no errors.  If it fails then we will report the code and
						   error found here.
						   */
	call Cleanup_Handler ();
	revert cleanup;
	goto OLD_DESCRIPTION_PARSER;

Get_Next_Token:
	proc (P_instr, P_outstr, P_inidx, P_outidx, P_tidx, P_tlen, P_texists);

dcl (
     P_instr char (*),				/* Input  -- string of tokens. */
     P_outstr char (*),				/* Input/Output -- string into which tokens are copied. */
     P_inidx fixed bin (24),				/* Input/Output -- index into P_instr. */
     P_outidx fixed bin (24),				/* Input/Output -- index into P_outstr. */
     P_tidx fixed bin (24),				/* Output -- index in P_outstr of the current token. */
     P_tlen fixed bin (24),				/* Output -- length of the current token. */
     P_texists bit (1)				/* Output -- true if the current token exists. */
     ) parameter;

/*
   D_E_S_C_R_I_P_T_I_O_N_

   This subroutine takes a character string and parses it into
   tokens.  A token is delimited by white space (space, horizontal tab,
   vertical tab, form feed, carrige return, or new line).
   Quoted tokens are handled correctly and are returned with one
   level of quotes stripped.  The token is returned by giving its index
   and length in P_outstr.
   Notice that P_outstr need be no longer than P_instr (because
   quotes and white space are only removed, never added).
   Also, the caller should never modify the Input/Output parameters:
   P_inidx, P_outidx, and P_outstr.  However, on the first call both
   P_inidx and P_outidx should be initialized to 1, and P_outstr should
   be initailized to the null string.  P_instr is never modified by
   this subroutine.


   J_O_U_R_N_A_L_I_Z_A_T_I_O_N_

   1) Written 11/78 by R.J.C. Kissel.
*/

/* Local Variables */

dcl  start_of_token fixed bin (24);
dcl  length_of_token fixed bin (24);
dcl  subtoken_len fixed bin (24);
dcl  subtoken_idx fixed bin (24);
dcl  outidx fixed bin (24);
dcl  more_string bit (1);


/* Local Constants */

dcl  C_true bit (1) init ("1"b);
dcl  C_false bit (1) init ("0"b);
dcl  C_quote char (1) init ("""");
dcl  C_white_space char (6) init (" 	
");
						/* SP, HT, VT, FF, CR, NL */

/* Builtin Fucntions and Conditions */

dcl (length, substr, search, verify)
     builtin;

	     if P_inidx = length (P_instr) + 1
	     then do;				/* The input string is already processed. */
		P_tidx = 0;
		P_tlen = 0;
		P_texists = C_false;
		return;
	     end;					/* The input string is already processed. */

	     length_of_token = 0;
	     start_of_token = verify (substr (P_instr, P_inidx), C_white_space) + P_inidx - 1;

	     if start_of_token = P_inidx - 1
	     then do;				/* There is no token, only white space. */
		P_inidx = length (P_instr) + 1;	/* Last character index + one. */
		P_tidx = 0;
		P_tlen = 0;
		P_texists = C_false;
	     end;					/* There is no token, only white space. */

	     else do;				/* There is a token to process. */
		if substr (P_instr, start_of_token, 1) ^= C_quote
		then do;				/* Process a regular token. */
		     length_of_token = search (substr (P_instr, start_of_token), C_white_space) - 1;
		     if length_of_token = -1
		     then length_of_token = length (substr (P_instr, start_of_token));

		     if search (substr (P_instr, start_of_token, length_of_token), C_quote) ^= 0
		     then goto ERROR_noquote;		/* Don't allow embedded quotes. */

		     if P_outidx + length_of_token - 1 > length (P_outstr)
		     then goto ERROR_noroom;
		     substr (P_outstr, P_outidx, length_of_token) = substr (P_instr, start_of_token, length_of_token);
						/* copy the token. */

		     P_tidx = P_outidx;
		     P_tlen = length_of_token;
		     P_texists = C_true;

		     P_inidx = start_of_token + length_of_token;
		     P_outidx = P_outidx + length_of_token;
		end;				/* Process a regular token. */

		else do;				/* Process a quoted string token. */
		     outidx = P_outidx;
		     subtoken_idx = start_of_token;
		     more_string = C_true;

		     do while (more_string);
			subtoken_idx = subtoken_idx + 1;
						/* Skip the initial quote. */
			subtoken_len = search (substr (P_instr, subtoken_idx), C_quote) - 1;
						/* Look for the next quote. */
			if subtoken_len = -1
			then goto ERROR_noquote;

/*
   Now copy the subtoken we just found without the final quote and
   checking for the null string.
*/

			if subtoken_len > 0
			then do;			/* There is something to copy. */
			     if outidx + subtoken_len - 1 > length (P_outstr)
			     then goto ERROR_noroom;
			     substr (P_outstr, outidx, subtoken_len) =
				substr (P_instr, subtoken_idx, subtoken_len);
						/* copy the token. */
			     outidx = outidx + subtoken_len;
						/* Move the index in P_outstr to the next available position. */
			end;			/* There is something to copy. */

			length_of_token = length_of_token + subtoken_len;
						/* Keep track of the total length of the token. */

			subtoken_idx = subtoken_idx + subtoken_len + 1;
						/* Skip the final quote in the subtoken. */

			if substr (P_instr, subtoken_idx, 1) = C_quote
			then do;			/* Take care of a doubled quote. */
			     if outidx + 1 - 1 > length (P_outstr)
			     then goto ERROR_noroom;

			     substr (P_outstr, outidx, 1) = C_quote;
						/* Copy the quote. */
			     outidx = outidx + 1;
						/* Move the index in P_outstr to the next available position. */
			     length_of_token = length_of_token + 1;
						/* Keep track of the total length of the token. */
			end;			/* Take care of a doubled quote. */

			else if verify (substr (P_instr, subtoken_idx, 1), C_white_space) ^= 0
			then goto ERROR_noquote;

			else more_string = C_false;
						/* Done with the quoted token. */
		     end;

		     P_tidx = P_outidx;
		     P_tlen = length_of_token;
		     P_texists = C_true;

		     P_inidx = subtoken_idx;
		     P_outidx = P_outidx + length_of_token;
		end;				/* Process a quoted string token. */
	     end;					/* There is a token to process. */

	end Get_Next_Token;

Cleanup_Handler:
	proc ();

	     if tap ^= null ()
	     then free tap -> token_array;

	     if tsp ^= null ()
	     then free tsp -> token_string;

	     if tp ^= null () & tp ^= token_head_ptr
	     then free tp -> token;			/* A small window. */

	     do while (token_head_ptr ^= null ());
		tp = token_head_ptr;
		token_head_ptr = tp -> token.next;
		free tp -> token;
	     end;

	     if area_ptr ^= null ()
	     then do;
		if resource_desc_ptr ^= null ()
		then do;
		     free resource_descriptions in (area_ptr -> based_area);
		     resource_desc_ptr = null ();
		end;

		if resource_res_ptr ^= null ()
		then do;
		     free reservation_description in (area_ptr -> based_area);
		     resource_res_ptr = null ();
		end;
	     end;
	end Cleanup_Handler;

OLD_DESCRIPTION_PARSER:				/* Initialize pointers and local variables. */
	resource_desc_ptr = null;
	resource_res_ptr = null;
	code = 0;

	arg_string = "";
	volume = "0"b;
	count = 0;
	cur_pos = 0;

	new = null;
	head = null;
	tail = null;


	on cleanup
	     call cleanup_handler;

	arg_string = get_next_arg (desc_str, cur_pos);

	if arg_string = ""
	then goto BAD_DESC;

	do while (arg_string ^= "");			/* Process one resource description at a time. */

/* Check the validity of the resource type argument. */

	     call resource_info_$get_type ((arg_string), volume, code);

	     if code ^= 0
	     then goto BAD_TYPE;

/* Process all the arguments for one resource description. */

	     allocate parse_info set (new);
	     new -> parse_info.next = null;
	     new -> parse_info.rsc_type = arg_string;
	     new -> parse_info.rsc_name = "";
	     new -> parse_info.attr = "0"b;
	     new -> parse_info.number = 1;		/* There is at least one. */

	     if head = null
	     then head = new;

	     if tail ^= null
	     then tail -> parse_info.next = new;

	     tail = new;

	     if ^volume
	     then do;				/* This is a device type resource. */
		arg_string = get_next_arg (desc_str, cur_pos);

		if arg_string = ""
		then do;				/* All defaults apply and we are done. */
		     call cv_rcp_attributes_$from_string_rel (new -> parse_info.rsc_type,
			new -> parse_info.attr, "", code);

		     if code ^= 0
		     then goto BAD_DEFAULT;
		end;				/* All defaults apply and we are done. */

		else if arg_string = "-name" | arg_string = "-nm"
		then do;				/* A strange name argument. */
		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string = ""
		     then goto BAD_NAME_ARG;

		     new -> parse_info.rsc_name = arg_string;
		     arg_string = get_next_arg (desc_str, cur_pos);
		end;				/* A strange name argument. */

		else if arg_string = "-attributes" | arg_string = "-attr"
		then do;				/* Attributes argument. */
		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string = ""
		     then goto BAD_ATTR_ARG;

		     call cv_rcp_attributes_$from_string_rel (new -> parse_info.rsc_type,
			new -> parse_info.attr, arg_string, code);

		     if code ^= 0
		     then goto BAD_ATTR;

		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string = "-number" | arg_string = "-nb"
		     then do;			/* We can have a number in this case. */
			arg_string = get_next_arg (desc_str, cur_pos);

			if arg_string = ""
			then goto BAD_NUM_ARG;

			on conversion
			     goto BAD_NUMBER;

			new -> parse_info.number = convert (new -> parse_info.number, arg_string);
			revert conversion;

			if new -> parse_info.number <= 0 then
			   goto BAD_NUMBER;

			arg_string = get_next_arg (desc_str, cur_pos);

		     end;				/* We can have a number in this case. */
		end;				/* Attributes argument. */

		else if arg_string = "-number" | arg_string = "-nb"
		then do;				/* Number argument. */
		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string = ""
		     then goto BAD_NUM_ARG;

		     on conversion
			goto BAD_NUMBER;

		     new -> parse_info.number = convert (new -> parse_info.number, arg_string);
		     revert conversion;

		     if new -> parse_info.number <= 0 then
		        goto BAD_NUMBER;

		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string ^= "-attributes" & arg_string ^= "-attr"
		     then do;			/* Get default attributes. */
			call cv_rcp_attributes_$from_string_rel (new -> parse_info.rsc_type,
			     new -> parse_info.attr, "", code);

			if code ^= 0
			then goto BAD_DEFAULT;

		     end;				/* Get default attributes. */

		     else do;			/* Attributes argument. */
			arg_string = get_next_arg (desc_str, cur_pos);

			if arg_string = ""
			then goto BAD_ATTR_ARG;

			call cv_rcp_attributes_$from_string_rel (new -> parse_info.rsc_type,
			     new -> parse_info.attr, arg_string, code);

			if code ^= 0
			then goto BAD_ATTR;

			arg_string = get_next_arg (desc_str, cur_pos);
		     end;				/* Attributes argument. */
		end;				/* Number argument. */

		else do;				/* A device name may have been given. */

		     call resource_info_$get_type ((arg_string), junk_bit, code);
						/* Just want the code. */

		     if code ^= 0
		     then do;			/* A device name. */
			if code = error_table_$name_not_found
			then do;
			     code = 0;
			     new -> parse_info.rsc_name = arg_string;
			     arg_string = get_next_arg (desc_str, cur_pos);
			end;

			else goto BAD_ERROR;
		     end;				/* A device name. */
		end;				/* A device name may have been given. */
	     end;					/* This is a device type resource. */

	     else do;				/* This is a volume type resource. */
		arg_string = get_next_arg (desc_str, cur_pos);

		if arg_string = ""
		then goto BAD_VOL_NAME;

		if arg_string = "-name" | arg_string = "-nm"
		then do;				/* Strange name argument. */
		     arg_string = get_next_arg (desc_str, cur_pos);

		     if arg_string = ""
		     then goto BAD_NAME_ARG;

		     new -> parse_info.rsc_name = arg_string;
		end;				/* Strange name argument. */

		else if substr (arg_string, 1, 1) = "-"
		then goto BAD_VOL_NAME;

		else new -> parse_info.rsc_name = arg_string;

		arg_string = get_next_arg (desc_str, cur_pos);
	     end;					/* This is a volume type resource. */

	     count = count + tail -> parse_info.number;

	end;					/* Process one resource description at a time. */

/* Now build the structures to return in the appropriate area. */

	if area_ptr = null
	then do;					/* We are done. */
	     code = 0;
	     call cleanup_handler;
	     return;
	end;					/* We are done. */

	Resource_count = count;			/* Need this to allocate the structures. */

	on area
	     goto BAD_AREA;
	allocate resource_descriptions in (area_ptr -> based_area) set (resource_desc_ptr);
	allocate reservation_description in (area_ptr -> based_area) set (resource_res_ptr);
	revert area;

/* Fill in the constant parts of the structures with the given information and defaults. */

	resource_descriptions.version_no = resource_desc_version_1;
	resource_descriptions.n_items = Resource_count;

	reservation_description.version_no = resource_res_version_1;
	reservation_description.reserved_for = get_group_id_ ();
	reservation_description.reserved_by = get_group_id_ ();
	reservation_description.group_starting_time = 0;
	reservation_description.asap_duration = 0;
	reservation_description.auto_expire = "0"b;
	reservation_description.asap = "0"b;
	reservation_description.rel = "1"b;
	reservation_description.sec = "0"b;
	reservation_description.n_items = Resource_count;

/* Fill in the variable parts of the structures with the given information and defaults. */

	new = head;

	do i = 1 to Resource_count by 1;
	     resource_descriptions.item (i).type = new -> parse_info.rsc_type;
	     resource_descriptions.item (i).name = new -> parse_info.rsc_name;
	     resource_descriptions.item (i).uid = "0"b;
	     resource_descriptions.item (i).potential_attributes = "0"b;
	     resource_descriptions.item (i).desired_attributes (*) = new -> parse_info.attr (*);
	     resource_descriptions.item (i).owner = "";
	     resource_descriptions.item (i).acs_path = "";
	     resource_descriptions.item (i).aim_range (*) = "0"b;
	     resource_descriptions.item (i).potential_aim_range (*) = "0"b;
	     resource_descriptions.item (i).location = "";
	     resource_descriptions.item (i).comment = "";
	     resource_descriptions.item (i).charge_type = "";

	     unspec (resource_descriptions.item (i).given) = "0"b;
						/* Set everything off to start. */
	     resource_descriptions.item (i).given.name = (resource_descriptions.item (i).name ^= "");
	     resource_descriptions.item (i).given.uid = (resource_descriptions.item (i).uid ^= "0"b);

	     if (resource_descriptions.item (i).desired_attributes (1)
	     | resource_descriptions.item (i).desired_attributes (2)
	     | resource_descriptions.item (i).desired_attributes (3)
	     | resource_descriptions.item (i).desired_attributes (4)) = "0"b
	     then resource_descriptions.item (i).given.desired_attributes = "0"b;
	     else resource_descriptions.item (i).given.desired_attributes = "1"b;

	     resource_descriptions.item (i).given.owner = (resource_descriptions.item (i).owner ^= "");

	     if (resource_descriptions.item (i).aim_range (1) | resource_descriptions.item (i).aim_range (2)) = "0"b
	     then resource_descriptions.item (i).given.aim_range = "0"b;
	     else resource_descriptions.item (i).given.aim_range = "1"b;

	     resource_descriptions.item (i).rew = "0"b;
	     resource_descriptions.item (i).usage_lock = "0"b;
	     resource_descriptions.item (i).release_lock = "0"b;
	     resource_descriptions.item (i).awaiting_clear = "0"b;
	     resource_descriptions.item (i).user_alloc = "0"b;
	     resource_descriptions.item (i).pad2 = "0"b;
	     resource_descriptions.item (i).state = "0"b;
	     resource_descriptions.item (i).status_code = 0;

	     reservation_description.reservation_group (i).starting_time = 0;
	     reservation_description.reservation_group (i).duration = 0;

	     if new -> parse_info.number = 1
	     then new = new -> parse_info.next;
	     else new -> parse_info.number = new -> parse_info.number - 1;
	end;					/* Fill in variable parts. */

	if check
	then err_msg =
	     "Warning: the old format resource description """ || ltrim (rtrim (desc_str))
	     || """ should be converted to the new format.";

	code = 0;
	return;

/* Error handling section */

BAD_ERROR:
	if new_code = 0
	then do;
	     if check
	     then err_msg = "An error occurred in RCP, contact a systems programmer.";
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_DESC:
	if new_code = 0
	then do;
	     code = error_table_$noarg;
	     if check
	     then err_msg = "At least one resource type must be given in the resource description.";
	end;

	else do;
	     code = new_code;
	     if check
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_NUMBER:
	if new_code = 0
	then do;
	     code = error_table_$bad_conversion;
	     if check
	     then err_msg = "Invalid number: " || arg_string;
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_TYPE:
	if new_code = 0
	then do;
	     code = error_table_$badcall;
	     if check
	        then err_msg = "The specified resource type is not valid: " || arg_string;
	end;

	else do;
	     code = new_code;
	     if check
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_DEFAULT:
	if new_code = 0
	then do;
	     if check
	        then err_msg = "An error occurred setting default attributes for " || new -> parse_info.rsc_type;
	end;

	else do;
	     code = new_code;
	     if check
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_NAME_ARG:
	if new_code = 0
	then do;
	     code = error_table_$noarg;
	     if check
	        then err_msg = "Name argument missing for resource type " || new -> parse_info.rsc_type;
	end;

	else do;
	     code = new_code;
	     if check
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_ATTR_ARG:
	if new_code = 0
	then do;
	     code = error_table_$noarg;
	     if check
	     then err_msg = "Attribute argument missing for resource type " || new -> parse_info.rsc_type;
	end;

	else do;
	     code = new_code;
	     if check
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_ATTR:
	if new_code = 0
	then do;
	     if check
	     then err_msg = "Error converting attribute string: " || arg_string;
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_NUM_ARG:
	if new_code = 0
	then do;
	     code = error_table_$noarg;
	     if check
	     then err_msg = "Number argument missing for resource type " || new -> parse_info.rsc_type;
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_VOL_NAME:
	if new_code = 0
	then do;
	     code = error_table_$noarg;
	     if check
	     then err_msg = "The volume name must be specified for resource type " || new -> parse_info.rsc_type;
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

BAD_AREA:
	if new_code = 0
	then do;
	     code = error_table_$badcall;
	     if check
	     then err_msg = "The specified area is not big enough to hold the necessary structures.";
	end;

	else do;
	     code = new_code;
	     if check 
	        then err_msg = error_msg;
	end;

	call cleanup_handler;
	return;

get_next_arg:
	proc (in_string, position) returns (char (256) varying);

/*
   This subroutine takes a character string as input and picks out the next
   argument delimited by blanks.  It returns the null string if there are no
   more arguments.
*/

/* Arguments */

dcl  in_string char (*);				/* Input string. */
dcl  position fixed bin;				/* An index always left pointing just after the arg */
						/* returned in in_string. */
dcl  arg char (256) varying;
						/* The returned argument. */

/* Local Variables */

dcl  pos1 fixed bin;				/* Start of string. */
dcl  pos2 fixed bin;				/* End of string. */

/* Builtin Functions and Conditions */

dcl (substr, verify, search, length)
     builtin;

	     if position = length (in_string)
	     then do;				/* No more args left. */
		arg = "";
		return (arg);
	     end;					/* No more args left. */

	     if position = 0
	     then position = 1;			/* Ready for use in substr. */

	     pos1 = verify (substr (in_string, position), " ");

	     if pos1 = 0
	     then do;				/* String is all blanks. */
		arg = "";
		position = length (in_string);
		return (arg);
	     end;					/* String is all blanks. */

	     pos1 = pos1 + position - 1;		/* Get index in the whole string. */
	     pos2 = search (substr (in_string, pos1), " ");

	     if pos2 = 0
	     then do;				/* Last arg in string. */
		arg = substr (in_string, pos1);
		position = length (in_string);
		return (arg);
	     end;					/* Last arg in string. */

	     else do;				/* Some middle arg in the string. */
		pos2 = pos2 + pos1 - 1;		/* Get index in the whole string. */
		arg = substr (in_string, pos1, pos2 - pos1);
		position = pos2;
		return (arg);
	     end;					/* Some middle arg in the string. */

	end get_next_arg;

cleanup_handler:
	proc;

	     if head ^= null | tail ^= null | new ^= null
	     then do;				/* Free the parse_info list. */

		if tail ^= new
		then do;
		     if new ^= null
		     then free new -> parse_info;
		     if tail ^= null
		     then tail -> parse_info.next = null;
						/* Make sure the list ends. */
		end;

		if head ^= null
		then do;				/* Free the list from head to tail. */

		     do while (head ^= null);
			new = head -> parse_info.next;
			free head -> parse_info;
			head = new;
		     end;
		end;				/* Free the list from head to tail. */
	     end;					/* Free the parse_info list. */

	     if area_ptr ^= null
	     then do;				/* Free the output structures. */

		if resource_desc_ptr ^= null
		then do;
		     free resource_descriptions in (area_ptr -> based_area);
		     resource_desc_ptr = null;
		end;

		if resource_res_ptr ^= null
		then do;
		     free reservation_description in (area_ptr -> based_area);
		     resource_res_ptr = null;
		end;
	     end;					/* Free the output structures. */

	     call Cleanup_Handler ();

	end cleanup_handler;
     end parse_resource_desc_;
