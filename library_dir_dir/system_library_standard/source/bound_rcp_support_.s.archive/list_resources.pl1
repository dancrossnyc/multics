/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-06-02,Rauschelbach), approve(87-07-07,MCR7728),
     audit(87-07-08,Farley), install(87-07-15,MR12.1-1040):
     A seperate error message was added for -awaiting_clear without a -type
     argument instead of the same message as -acquisitions without -type.
                                                   END HISTORY COMMENTS */


/* format: indattr,inddcls,dclind5,idind30,struclvlind5,ifthenstmt,ifthendo,^inditerdo,^indnoniterend,case,^tree,^indproc,^indend,^delnl,^insnl,comcol81,indcom,linecom,^indcomtxt */

list_resources: lr: procedure;

	/*	This program is a command that may be called to list the resources that
   *	have been assigned to or mounted by the calling process by RCP.
   *	Created on 01/07/75 by Bill Silver.
   *	Changed on 04/08/76 by Bill Silver for "-lv" option and to use temp
   *		segments.
   *	Changed on 05/24/78 by Michael R. Jordan for tape_drive/disk_drive
   *		changes.
   *	Changed on 10/31/78 by C. D. Tavares to add -acquisitions portion and
   *		change -attachments to -mounts.
   *	Changed on 11/18/78 by M. R. Jordan for -reservations and speed
   *		qualifier for tapes.
   *	Changed on 05/10/79 by CDT to add -awaiting_clear control arg.
   *	Modified 831218 to call request_id_... BIM
   *	Modified 831220 to correctly list console types... -E. A. Ranzenbach
   *
   * 	(-type | -tp)	This option specifies that all of the devices of
   *			this type are to be listed.  It value argument
   *			must be the name of the device type to be
   *			listed.
   *	(-dv  | -device)	Specifies that a specific device is to be
   *			listed.  Its value argument must be the name of
   *			the device.  RCP will list information about
   *			only this one device.
   *	(-lg  | -long)	This command option specifies that the user
   *			wants all of the information known about the
   *			assignment or mount.  This option argument
   *			is not followed by a value argument.
   *	(-lv  | -logical_volumes)
   *			Specifies that only attached logical volumes are
   *			to be listed.
   *	(-resv | -reservations)
   *			Specifies that only reservations are to be
   *			listed.
   *	(-asm | -assignments)
   *			Specifies that only device assignments are to be
   *			listed.
   *	(-mts | -mounts)	Specifies that only mounts are to be listed.
   *	(-atm | -attachments) 	 (as above, kept for compatibility.)
   *	(-acq | -acquisitions)
   *			Specifies that only owned resources are to be
   *			listed.
   *	(-user userid)	Specifies that user or project's acquisitions
   *	(-awaiting_clear)	Specifies those resources awaiting manual
   *			clearing.
   */

	/* 	AUTOMATIC  DATA		*/

	dcl  alp			     pointer;			/* pointer to arg list */
	dcl  arg_len		     fixed bin;			/* Length of an argument string. */
	dcl  arg_ptr		     ptr;				/* Pointer to an argument string. */
	dcl  argx			     fixed bin;			/* Number of the current argument. */
	dcl  awaiting_clear		     bit (1) initial (""b);		/* ON if wants list of resources awaiting clear */
	dcl  called_as_af		     bit (1) aligned;		/* O if called as active function */
	dcl  cu_arg_ptr_entry	     entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer) variable;
	dcl  density_comment	     char (30) varying;		/* Used to print density capabilities. */
	dcl  density_ptr		     ptr;				/* Pointer to density characteristics. */
	dcl  device_name		     char (32);			/* Device name. */
	dcl  resource_type		     char (32);			/* Device type. */
	dcl  dtypex		     fixed bin;			/* Device type index. */
	dcl  vtypex		     fixed bin;			/* Volume type index */
	dcl  typex		     fixed bin;			/* scratch variable */
	dcl  ecode		     fixed bin (35);		/* error_table_ code. */
	dcl  (i, k)		     fixed bin;
	dcl  is_volume		     bit (1) aligned;
	dcl  list_index		     fixed bin;			/* 0 => all,  1 => type,  2 => device. */
	dcl  listed_flag		     bit (1);			/* ON => something has been listed. */
	dcl  long_flag		     bit (1);			/* ON => user wants all available information. */
	dcl  num_args		     fixed bin;			/* Number of command arguments. */
	dcl  num_listed		     fixed bin;			/* Number of entries actually listed. */
	dcl  option		     char (32);			/* Command option string. */
	dcl  option_code		     fixed bin;			/* 0 => none,  1 => string,  2 => binary. */
	dcl  rcp_list_copied	     bit (1) initial (""b);		/* if on, don't recopy it */
	dcl  request_control	     bit (36);			/* one bit for each control arg */
	dcl  return_argp		     pointer;			/* points to af return arg */
	dcl  return_argl		     fixed bin (21);		/* length of same */
	dcl  seconds		     fixed bin;			/* Max IOI time-out intraval. */
	dcl  seg_size		     fixed bin (19);		/* Size of temp segment. */
	dcl  speed_comment		     char (30) varying;		/* Used to print speed capabilities. */
	dcl  speed_ptr		     ptr;				/* Pointer to speed qualifier for tape drives. */
	dcl  temp_seg_ptr		     ptr;				/* for temp segment namager. */
	dcl  time_string		     char (24);			/* Used to list state time. */
	dcl  user_id		     char (32);			/* for acquisition section */

	/* 	BASED  DATA		*/

	dcl  argument		     char (arg_len) based (arg_ptr);	/* Used to reference argument string. */

	dcl  based_density		     bit (5) based (density_ptr) aligned;

	dcl  based_speed		     bit (3) based (speed_ptr) aligned;

	dcl  return_arg		     char (return_argl) varying based (return_argp);


	/* 	INTERNAL STATIC DATA	*/

	dcl  1 static_option_data	     (1:11) internal static options (constant),
		2 brief_options	     char (16) initial		/* Brief form of command options. */
				     ("-tp", "-dv", "-lg", "-asm", "-mts", "-lv", "-acq", "-user", "-atm",
				     "-resv", "-awaiting_clear"),
		2 long_options	     char (19) initial		/* Long  form of command options. */
				     ("-type", "-device", "-long", "-assignments", "-mounts",
				     "-logical_volumes", "-acquisitions", "-user", "-attachments",
				     "-reservations", "-awaiting_clear"),
		2 option_codes	     fixed bin initial
				     (1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0),
		2 af_usage_allowed	     bit (1) aligned initial
				     ("1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "1"b, "1"b, "0"b, "0"b, "1"b);

	dcl  (Unset		     initial ("000000"b),
	     Default		     initial ("111101"b),
	     Assignments		     initial ("010000"b),
	     Mounts		     initial ("001000"b),
	     Logical_volumes	     initial ("000100"b),
	     Acquisitions		     initial ("000010"b),
	     Reservations		     initial ("000001"b)) bit (36) static options (constant);

	dcl  operation_states	     (5) char (12)			/* Assignment and mounting states. */
				     internal static init ("assigning", "assigning", "mounting", "mounting", "mounted");

	dcl  density_names		     (5) char (5) varying		/* Used to print device density characteristics. */
				     internal static init ("200 ", "556 ", "800 ", "1600 ", "6250 ");

	dcl  console_model_names	     (3) char (4)			/* Operator's console model names. */
				     internal static init ("EMC", "EMC", "LCC");
	dcl  console_models		     (3) fixed bin (17) internal static init (6001, 6004, 6601);

	dcl  speed_names		     (3) char (4)			/* Tape drive speed names. */
				     internal static init ("75 ", "125 ", "200 ");

	dcl  registry_dir		     char (168) static initial (">system_control_1>rcp");

	/* 	EXTERNAL ENTRIES CALLED	*/

	dcl  cleanup		     condition;			/* Used to release temp segment. */

	dcl  (addr, after, before, clock, hbound, length, max, null, rtrim, substr, unspec) builtin;

	dcl  (error_table_$badcall,
	     error_table_$badopt,
	     error_table_$inconsistent,
	     error_table_$not_act_fnc,
	     error_table_$odd_no_of_args,
	     error_table_$resource_type_inappropriate,
	     error_table_$wrong_no_of_args) fixed bin (35) external;

	dcl  (com_err_, active_fnc_err_)   entry options (variable);
	dcl  cu_$af_return_arg	     entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	dcl  (cu_$arg_ptr_rel, cu_$af_arg_ptr_rel) entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
	dcl  cu_$arg_list_ptr	     ext entry (pointer);
	dcl  date_time_		     entry (fixed bin (71), char (*));
	dcl  ioa_			     entry options (variable);
	dcl  hcs_$get_max_length_seg	     entry (ptr, fixed bin (19), fixed bin (35));
	dcl  get_temp_segment_	     entry (char (*), ptr, fixed bin (35));
	dcl  release_temp_segment_	     entry (char (*), ptr, fixed bin (35));
	dcl  rcp_$copy_list		     entry (ptr, fixed bin (19), fixed bin (35));
	dcl  resource_info_$get_rtypex     entry (char (*), char (*), fixed bin, bit (1) aligned, fixed bin (35));

%include rcp_list_info;

	/* list_resources: */

	temp_seg_ptr = null;
	ecode,							/* Initialize. */
	     list_index = 0;					/* 0 => all devices of all types. */
	dtypex, vtypex, typex = 0;
	request_control = Unset;
	user_id = "";						/* default is myself */
	resource_type = "";

	long_flag = "0"b;						/* Default = minimum of information. */

	call cu_$af_return_arg (num_args, return_argp, return_argl, ecode);	/* Get total number of arguments. */
	if ecode = error_table_$not_act_fnc then do;
		called_as_af = ""b;
		cu_arg_ptr_entry = cu_$arg_ptr_rel;
	     end;
	else if ecode ^= 0 then do;
		call active_fnc_err_ (ecode, "list_resources", "Obtaining argument information.");
		if return_argp ^= null then return_arg = "";
		return;
	     end;
	else do;
		called_as_af = "1"b;
		cu_arg_ptr_entry = cu_$af_arg_ptr_rel;
	     end;

	call cu_$arg_list_ptr (alp);

	do argx = 1 to num_args;					/* Process each argument. */
	     call PROCESS_ARG;					/* Most will be processed in pairs. */
	     if ecode ^= 0 then return;				/* If error, abort */
	end;

	if request_control = Unset then request_control = Default;

	if called_as_af then					/* was more than one option specified? */
	     if after (request_control, "1"b) ^= ""b then do;
		     call active_fnc_err_ (error_table_$inconsistent, "list_resources",
			"More than one category of information requested in active function mode.");
		     return_arg = "";
		end;


	/*  Now that we have valid arguments, get a work segment.  Then call RCP
   to get the information about the resources associated with this process. */

	on cleanup begin;						/* Cleanup handler for temp seg releasing. */
		if temp_seg_ptr ^= null () then
		     call release_temp_segment_ ("list_resources", temp_seg_ptr, ecode);
	     end;

	call GET_TEMP_SEG;						/* Get temporary working segment. */
	if ecode ^= 0 then return;


	/* Now process the requests. */

	listed_flag = ""b;

	/* List assignments. */

	if (request_control & Assignments) ^= "0"b then do;
		call COPY_RCP_LIST;

		if (rli.head.num_dassign ^= 0)			/* if device assignments */
		     | (request_control ^= Default) then do;		/* or not default case */
			listed_flag = "1"b;				/* Something will be listed. */
			call ioa_ ("Device Assignments");
			call LIST_DASSIGN;				/* List all device assignments. */
		     end;
	     end;

	/* List mounts. */

	if (request_control & Mounts) ^= "0"b then do;
		call COPY_RCP_LIST;

		if (rli.head.num_attach ^= 0)				/* if device mounts */
		     | (request_control ^= Default) then do;		/* or not default case */
			listed_flag = "1"b;				/* Something will be listed. */
			call ioa_ ("Mounts");
			call LIST_MOUNTS;				/* List all device assignments. */
		     end;
	     end;

	/* List logical volumes. */

	if (request_control & Logical_volumes) ^= "0"b then do;
		call COPY_RCP_LIST;

		if (rli.head.num_lv ^= 0)				/* if logical volumes */
		     | (request_control ^= Default) then do;		/* or not default case */
			listed_flag = "1"b;				/* Something will be listed. */
			call ioa_ ("Logical Volumes");
			call LIST_LV;				/* List all device assignments. */
		     end;
	     end;


	/* List reservations. */

	if (request_control & Reservations) ^= "0"b then do;
		call COPY_RCP_LIST;

		if (rli.head.num_device_resv + rli.head.num_vol_resv ^= 0)	/* if reservations */
		     | (request_control ^= Default) then do;		/* or not default case */
			listed_flag = "1"b;				/* Something will be listed. */
			call ioa_ ("Resource Reservations");
			call LIST_RESERVATIONS;
		     end;
	     end;

	/* List acquisitions. */

	if (request_control & Acquisitions) ^= "0"b then do;

		if request_control ^= Acquisitions then			/* other things too */
		     call ioa_ ("Resource Acquisitions");
		listed_flag = "1"b;					/* Something will be listed. */
		call LIST_ACQUISITIONS;
	     end;


	if ^listed_flag then					/* Did we list anything? */
	     call ioa_ ("list_resources: No resources selected.");		/* No. */

RETURN:	if temp_seg_ptr ^= null then
	     call release_temp_segment_ ("list_resources", temp_seg_ptr, ecode);
	return;

PROCESS_ARG: procedure;

	/* This procedure is called to process one option argument.  Many of these
   options have an accompanying value argument.  This value must be the next
   argument.  In this case we will process the value argument too.  */

	call cu_arg_ptr_entry (argx, arg_ptr, arg_len, ecode, alp);
	if ecode ^= 0
	then call crump (ecode, "while obtaining arguments.");

	option = argument;						/* Save option argument. */
	do i = 1 to hbound (long_options, 1);				/* Look for valid option name. */
	     if (option = brief_options (i)) |				/* Is it this brief name? */
		(option = long_options (i))				/* Or this long name? */
	     then do;						/* Yes, one of them. */
		     if called_as_af then
			if ^af_usage_allowed (i) then do;
				call active_fnc_err_ (error_table_$badcall, "list_resources",
				     "^a not available in active function mode.", option);
				return_arg = "";
				return;
			     end;

		     call GET_VALUE (i);				/* Get value argument if any. */
		     if ecode ^= 0					/* Check for errors. */
		     then return;
		     goto OPTION (i);				/* Go process this option. */
		end;
	end;

	call crump (error_table_$badopt, option);			/* Option name not found. */
	return;

OPTION (1):							/* "-tp" or "-type" */
	list_index = max (1, list_index);				/* 1 => list all devices of this type. */

	dtypex, vtypex = 0;
	call resource_info_$get_rtypex (argument, resource_type, typex, is_volume, ecode);
	if ecode ^= 0 then
	     call crump (ecode, argument);

	if is_volume then vtypex = typex;
	else dtypex = typex;
	return;

OPTION (2):							/* "-dv" or "-device" */
	list_index = 2;						/* 2 => list only this one device. */
	device_name = argument;					/* Get device name. */
	return;
OPTION (3):							/* "-lg" or "-long" */
	long_flag = "1"b;						/* User wants all available information. */
	return;
OPTION (4):							/* "-asm" or "-assignments" */
	request_control = request_control | Assignments;			/* User wants device assignments. */
	return;
OPTION (9):							/* "-atm" or "-attachments" */
	call ioa_ ("list_resources:  Warning-- -mounts (-mts) should be used rather than -attachments (-atm).");
OPTION (5):							/* "-mts" or "-mounts" */
	request_control = request_control | Mounts;
	return;
OPTION (6):							/* "-lv" or "-logical_volumes" */
	request_control = request_control | Logical_volumes;		/* User wants attached logical volumes. */
	return;

OPTION (7):							/* "-acq" or "-acquisitions" */
	request_control = request_control | Acquisitions;
	return;

OPTION (8):							/* "-user" */
	if awaiting_clear then
	     call crump (error_table_$inconsistent, "-awaiting_clear and -user");

	user_id = argument;
	return;

OPTION (10):							/* "-reservations" or "-resv" */
	request_control = request_control | Reservations;
	return;

OPTION (11):							/* "-awaiting_clear" */
	request_control = request_control | Acquisitions;
	if user_id ^= "" then
	     call crump (error_table_$inconsistent, "-awaiting_clear and -user.");

	user_id = "*.*";
	awaiting_clear = "1"b;
	return;

     end PROCESS_ARG;

GET_VALUE: procedure (option_num);

	/* This procedure is called to get any value argument associated with this option.
   Processing of the value argument depends upon the option code value associated
   with this option.  The option code values are:
   0.	This option argument has no accompanying value argument.
   1.	This option argument has a string type value argument. */

	dcl  option_num		     fixed bin;			/* Number that identifies this option. */

	option_code = option_codes (option_num);			/* Get code value for this option. */

	if option_code = 0						/* Is there an accompanying argument value? */
	then return;						/* No, nothing else to do. */

	/* Get accompanying argument value. */

	if argx = num_args then					/* Is this the last argument? */
	     call crump (error_table_$odd_no_of_args, "No value argument for " || option);

	argx = argx + 1;						/* Get the next argument. */
	call cu_arg_ptr_entry (argx, arg_ptr, arg_len, ecode, alp);
	if ecode ^= 0 then
	     call crump (ecode, "while obtaining arguments.");

	if substr (argument, 1, 1) = "-" then				/* Is next argument a control option? */
	     call crump (error_table_$wrong_no_of_args, "No value argument for " || option);

     end GET_VALUE;

COPY_RCP_LIST: proc;

	if rcp_list_copied then return;

	rli.head.version_num = rli_version_4;				/* Tell RCP version we are working with. */
	call rcp_$copy_list (rli_ptr, seg_size, ecode);
	if ecode ^= 0 then
	     call crump (ecode, "Error copying RCP list information.");

	rcp_list_copied = "1"b;

	return;

     end COPY_RCP_LIST;

LIST_DASSIGN: procedure;

	/* This procedure is called to list device assignments.  The device
   assignments that will be listed depend upon the list_index variable.
   We will list the assignments of all devices, all devices of a specified
   type, or one specific device. */

	num_listed = 0;
	goto DASSIGN (list_index);					/* Decide which device assignments to list. */

DASSIGN (0):							/* List all device assignments. */
	if rli.head.num_dassign = 0					/* Any devices assigned? */
	then do;							/* No. */
		call ioa_ ("No devices assigned.");
		return;
	     end;
	if long_flag						/* If in long mode tell how many. */
	then if rli.head.num_dassign = 1
	     then call ioa_ ("1 device assigned");
	     else call ioa_ ("^d devices assigned", rli.head.num_dassign);
	do i = 1 to rli.head.num_dassign;				/* Process each device assignment block. */
	     dassign_ptr = addr (rli.dassigns (i));
	     call LIST_DASSIGNMENT;					/* List each one. */
	end;
	return;

DASSIGN (1):							/* All device assignments of specified type. */
	if is_volume then
	     call crump (error_table_$resource_type_inappropriate, rtrim (resource_type) || " is not a device type.");
	do i = 1 to rli.head.num_dassign;				/* Look at each device assignment block. */
	     dassign_ptr = addr (rli.dassigns (i));
	     if dtypex = dassign.dtypex				/* Is this the device type specified? */
	     then call LIST_DASSIGNMENT;				/* Yes, list this device assignment. */
	end;
	if num_listed = 0						/* Did we find any for this device type? */
	then call ioa_ ("^5xNo ^a type devices assigned.", resource_type);
	return;

DASSIGN (2):							/* List specific device assignment. */
	if is_volume then
	     call crump (error_table_$resource_type_inappropriate, rtrim (resource_type) || " is not a device type.");
	do i = 1 to rli.head.num_dassign;				/* Look through all device assignments. */
	     dassign_ptr = addr (rli.dassigns (i));
	     if device_name = dassign.device_name
	     then do;						/* We found the device. */
		     call LIST_DASSIGNMENT;				/* List its assignment info. */
		     return;					/* No need to look further. */
		end;
	end;
	call ioa_ ("^5xDevice ^a is not assigned", device_name);

     end LIST_DASSIGN;

LIST_MOUNTS: procedure;

	/* This procedure is called to list mounts.  The mounts that will be listed
   depend upon the list_index variable.  We will list info on all devices, all
   devices of a specified type, or one specific device.  */

	num_listed = 0;
	goto MOUNTS (list_index);					/* Decide which mounts to list. */

MOUNTS (0):							/* List all mounts. */
	if rli.head.num_attach = 0					/* Any mounts? */
	then do;							/* No. */
		call ioa_ ("No mounts.");
		return;
	     end;
	if long_flag then						/* If in long mode tell how many. */
	     call ioa_ ("^d mount^[s^;^]", rli.head.num_attach,
		(rli.head.num_attach = 1));

	do i = 1 to rli.head.num_attach;				/* Process each mount. */
	     attach_ptr = addr (rli.attaches (i));
	     call LIST_SINGLE_MOUNT;					/* List each one. */
	end;
	return;

MOUNTS (1):							/* All mounts of specified type. */
	if is_volume then
	     call crump (error_table_$resource_type_inappropriate, rtrim (resource_type) || " is not a device type.");
	do i = 1 to rli.head.num_attach;				/* Look at each mount block. */
	     attach_ptr = addr (rli.attaches (i));
	     if dtypex = attach.dtypex				/* Is this the device type specified? */
	     then call LIST_SINGLE_MOUNT;
	end;
	if num_listed = 0						/* Did we find any for this device type? */
	then call ioa_ ("^5xNo ^a type devices mounted.", resource_type);
	return;

MOUNTS (2):							/* List specific device mount. */
	if is_volume then
	     call crump (error_table_$resource_type_inappropriate, rtrim (resource_type) || " is not a device type.");
	do i = 1 to rli.head.num_attach;				/* Look through all mounts. */
	     attach_ptr = addr (rli.attaches (i));
	     if device_name = dassign.device_name
	     then do;						/* We found the device. */
		     call LIST_SINGLE_MOUNT;				/* List its mount info. */
		     return;
		end;
	end;
	call ioa_ ("^5xDevice ^a is not mounted.", device_name);

     end LIST_MOUNTS;

LIST_LV: procedure;

	/* This procedure is called to list attached logical volumes.
   All logical volumes attached for the calling process will be listed. */

	if rli.head.num_lv = 0					/* Any logical volumes attached? */
	then do;							/* No. */
		call ioa_ ("No logical volumes");
		return;
	     end;

	do i = 1 to rli.num_lv;					/* List all attached logical volumes. */
	     lv_ptr = addr (rli.lvs (i));				/* Get pointer to lv info. */
	     call ioa_ ("^5x^a", lv.volume_name);
	     if long_flag						/* Does user want more info? */
	     then do;						/* Yes. */
		     call ioa_ ("^-State^-=  attached");
		     call date_time_ (lv.state_time, time_string);
		     call ioa_ ("^-Time^-=  ^a", time_string);
		end;
	end;

     end LIST_LV;

LIST_RESERVATIONS: procedure;

	/*   This procedure is called to list information about reservations.
   The reservations that will be listed depend on the control arguments
   specified by the caller. */

	do i = 1 to rli.head.num_device_resv;				/* First look at the devices. */
	     device_resv_ptr = addr (rli.device_resvs (i));
	     if device_resv.reservation_id ^= 0 then			/* This one looks like a good one to list. */
		call LIST_RESERVATION (device_resv.reservation_id);
	end;


	do i = 1 to rli.head.num_vol_resv;				/* Then make sure we haven't missed any volumes. */
	     vol_resv_ptr = addr (rli.vol_resvs (i));
	     if vol_resv.reservation_id ^= 0 then			/* List this one. */
		call LIST_RESERVATION (vol_resv.reservation_id);
	end;


	return;


     end LIST_RESERVATIONS;

LIST_DASSIGNMENT: procedure;

	/* This procedure is called to list the assignment information for
   one device.  If we are in long mode we will list all of the
   device characteristics. */

	num_listed = num_listed + 1;

	if dassign.device_name ^= " "					/* Do we know device name? */
	then call ioa_ ("^5xDevice ^a", dassign.device_name);
	else call ioa_ ("^5xDevice not yet assigned");

	if dassign.state = 0					/* State = 0 => free due to force unassign. */
	then do;
		call ioa_ ("^-State^-=  force unassigned");
		return;
	     end;

	if ^long_flag						/* Does caller want all information? */
	then return;						/* No. */

	if dassign.state = 5					/* State = 5 => assignment completed. */
	then call ioa_ ("^-State^-=  assigned");
	else call ioa_ ("^-State^-=  assigning");
	call date_time_ (dassign.state_time, time_string);
	call ioa_ ("^-Time^-=  ^a", time_string);
	if substr (dassign.disposition, 1, 1)				/* ON => retain,  OFF => unassign. */
	then call ioa_ ("^-Disp^-=  retain");
	else call ioa_ ("^-Disp^-=  unassign");

	if dassign.flags.attached
	then call ioa_ ("^-Device Mounted");

	call ioa_ ("^-Level^-=  ^d", dassign.level);

	if dassign.state ^= 5					/* Is device assignment completed? */
	then return;						/* No, don't print device characteristics. */

	call ioa_ ("^-Model^-=  ^d", dassign.model);

	goto DTYPE (dassign.dtypex);					/* Process device type specific data. */

DTYPE (1):							/* TAPE */
	call ioa_ ("^-Tracks^-=  ^d", dassign.qualifiers (1));
	density_ptr = addr (dassign.qualifiers (2));
	density_comment = "";
	do k = 1 to hbound (density_names, 1);				/* Check for each possible density. */
	     if substr (based_density, k, 1)
	     then density_comment = density_comment || density_names (k);
	end;
	call ioa_ ("^-Densities^-=  ^a", density_comment);
	speed_ptr = addr (dassign.qualifiers (3));
	speed_comment = "";
	do k = 1 to hbound (speed_names, 1);				/* Check for each possible speed. */
	     if substr (based_speed, k, 1)
	     then speed_comment = speed_comment || speed_names (k);
	end;
	call ioa_ ("^-Speed^-=  ^a", speed_comment);
	return;

DTYPE (3):							/* CONSOLE */
	do k = 1 to hbound (console_models, 1);
	     if dassign.model = console_models (k) then do;
		     call ioa_ ("^-Type^-=  ^a", console_model_names (k));
		     return;
		end;
	end;

	call crump (0, "Illegal console model number.");

	return;

DTYPE (4):							/* PRINTER */
	call ioa_ ("^-Train^-=  ^d", dassign.qualifiers (1));
	if dassign.qualifiers (2) = -1				/* -1 => line length not given on PRPH card. */
	then call ioa_ ("^-Line Len^-=  not specified");
	else call ioa_ ("^-Line Len^-=  ^d", dassign.qualifiers (2));
	return;

DTYPE (2):							/* DISK */
DTYPE (5):							/* PUNCH */
DTYPE (6):							/* READER */
DTYPE (7):							/* SPECIAL */

     end LIST_DASSIGNMENT;

LIST_SINGLE_MOUNT: procedure;

	/* This procedure is called to list the information about one mount.
   If we are in long mode we will list all available information. */

	num_listed = num_listed + 1;

	if attach.device_name ^= " "
	then call ioa_ ("^5xDevice ^a", attach.device_name);
	else call ioa_ ("^5xDevice not yet assigned");

	if attach.volume_name ^= " "
	then call ioa_ ("^-Volume^-=  ^a", attach.volume_name);

	if attach.state = 0						/* State = 0 => free due to force unassignment. */
	then do;
		call ioa_ ("^-State^-=  force unassigned");
		return;
	     end;

	if ^long_flag						/* Does user want all available info? */
	then return;						/* No. */

	call ioa_ ("^-State^-=  ^a", operation_states (attach.state));
	call date_time_ (attach.state_time, time_string);
	call ioa_ ("^-Time^-=  ^a", time_string);

	if attach.flags.priv
	then call ioa_ ("^-Attached with privilege");
	if attach.flags.writing
	then call ioa_ ("^-Attached for writing");

	call ioa_ ("^-Level^-=  ^d", attach.level);
	k = attach.workspace_max / 1024;
	call ioa_ ("^-WS Max^-=  ^d K", k);
	seconds = attach.timeout_max / 1000000;
	call ioa_ ("^-TO Max^-=  ^d seconds", seconds);

     end LIST_SINGLE_MOUNT;

LIST_RESERVATION: procedure (arg_rid);


	dcl  arg_rid		     fixed bin (71);
	dcl  request_id_		     entry (fixed bin (71)) returns (char (19));
	dcl  header_printed		     bit (1);			/* Bit to tell whether we have printed resource class. */
	dcl  k			     fixed bin;
	dcl  rid			     fixed bin (71);		/* Reservation to list. */
	dcl  rid_string		     char (32);			/* String representation of reservation id. */


	rid = arg_rid;						/* copy reservation id */


	rid_string = request_id_ (rid);
	if long_flag then						/* Print full reservation id. */
	     call ioa_ ("^/^2xReservation ^a (claimed)", rid_string);
	else call ioa_ ("^/^2xReservation ^a (claimed)", substr (rid_string, 7, 6));


	header_printed = "0"b;
	do k = 1 to rli.head.num_device_resv;				/* Look at all device entries. */
	     device_resv_ptr = addr (rli.device_resvs (k));
	     if device_resv.reservation_id = rid then do;			/* Got one. */
		     if ^header_printed then do;			/* Print header. */
			     call ioa_ ("^5xDevices");
			     header_printed = "1"b;
			end;
		     call ioa_ ("^-^a", device_resv.device_name);
		     device_resv.reservation_id = 0;
		end;
	end;


	header_printed = "0"b;
	do k = 1 to rli.head.num_vol_resv;				/* Look at all vol entries. */
	     vol_resv_ptr = addr (rli.vol_resvs (k));
	     if vol_resv.reservation_id = rid then do;			/* Got one. */
		     if ^header_printed then do;			/* Print header. */
			     call ioa_ ("^5xVolumes");
			     header_printed = "1"b;
			end;
		     call ioa_ ("^-^a", vol_resv.volume_name);
		     vol_resv.reservation_id = 0;
		end;
	end;


	return;


     end LIST_RESERVATION;

LIST_ACQUISITIONS: proc;

	dcl  sys_info$max_seg_size	     ext fixed bin (35) static;

	dcl  define_area_		     ext entry (pointer, fixed bin (35)),
	     release_area_		     ext entry (pointer),
	     get_group_id_		     ext entry returns (char (32)),
	     (rcp_$list_resources, rcp_admin_$list_resources, rcp_admin_$list_awaiting_clear)
				     entry (char (*), char (*), char (*), pointer, fixed bin (35), pointer, fixed bin (35));

	dcl  group_id		     char (32),
	     uname		     char (32),
	     pname		     char (32),
	     n_resources		     fixed bin (35),
	     priv_sw		     bit (1) aligned;

	dcl  1 auto_area_info	     like area_info aligned automatic;

%include area_info;
%include resource_list;

	if resource_type = "" then
	     if awaiting_clear
	     then call crump (error_table_$wrong_no_of_args,
		     "-type must be specified with -awaiting_clear.");
	     else call crump (error_table_$wrong_no_of_args,
		     "-type must be specified with -acquisitions.");

	unspec (auto_area_info) = ""b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.extend,
	     auto_area_info.no_freeing = "1"b;
	auto_area_info.owner = "list_resources";
	auto_area_info.size = sys_info$max_seg_size;
	auto_area_info.areap = temp_seg_ptr;

	call define_area_ (addr (auto_area_info), ecode);
	if ecode ^= 0 then
	     call crump (ecode, "defining temporary area.");

	on cleanup call release_area_ (temp_seg_ptr);			/* no real window exists here -- */
								/* this is only necessary after call to ring 1
						   may extend area to multi segments */

	group_id = get_group_id_ ();
	group_id = substr (group_id, 1, length (rtrim (group_id, " ")) - 2);	/* cut off tag */

	if user_id = "" then user_id = group_id;
	if user_id = group_id then priv_sw = ""b;
	else do;
		uname = before (user_id, ".");
		pname = after (user_id, ".");
		if (uname = "*") & (pname ^= "*") then priv_sw = ""b;
		else priv_sw = "1"b;
	     end;

	if awaiting_clear then
	     call rcp_admin_$list_awaiting_clear (resource_type, registry_dir,
		user_id, temp_seg_ptr, n_resources, resource_list_ptr, ecode);
	else if priv_sw then
	     call rcp_admin_$list_resources (resource_type, registry_dir,
		user_id, temp_seg_ptr, n_resources, resource_list_ptr, ecode);
	else call rcp_$list_resources (resource_type, registry_dir,
		user_id, temp_seg_ptr, n_resources, resource_list_ptr, ecode);

	if ecode ^= 0 then
	     call crump (ecode, "Resource type " || rtrim (resource_type)
		|| " for " || user_id);

	if called_as_af then return_arg = "";
	else do;
		call date_time_ (clock (), time_string);

		call ioa_ ("^[No resources^2s^;^[1 resource^s^;^d resources^]^] of type ^a ^[awaiting manual clear.^;acquired by ^a^[.^; at ^a:^/^]^]",
		     (n_resources = 0), (n_resources = 1), n_resources, resource_type,
		     awaiting_clear, user_id, (n_resources = 0), time_string);
	     end;

	do resource_list_ptr = resource_list_ptr repeat (resource_list.forward_ptr)
	     while (resource_list_ptr ^= null);

	     do i = 1 to resource_list.n_resources;
		if called_as_af then do;
			return_arg = return_arg || rtrim (resource_list.resource_name (i));
			return_arg = return_arg || " ";
		     end;

		else call ioa_ ("^a", resource_list.resource_name (i));
	     end;
	end;

	if called_as_af then
	     return_arg = rtrim (return_arg);

	call release_area_ (temp_seg_ptr);

	return;

     end LIST_ACQUISITIONS;

GET_TEMP_SEG: procedure;

	/* This procedure is called to get a temporary work segment for
   the RLI structure. */

	call get_temp_segment_ ("list_resources", temp_seg_ptr, ecode);
	if ecode ^= 0 then
	     call crump (ecode, "Error getting temporary segment");

	call hcs_$get_max_length_seg (temp_seg_ptr, seg_size, ecode);
	if ecode ^= 0 then
	     call crump (ecode, "Error getting max seg length of temp segment");

	rli_ptr = temp_seg_ptr;

     end GET_TEMP_SEG;

crump: proc (ecode, reason);

	dcl  ecode		     fixed bin (35) parameter,
	     reason		     char (*) parameter;

	dcl  com_err_entry		     entry variable options (variable);

	if called_as_af then com_err_entry = active_fnc_err_;
	else com_err_entry = com_err_;

	call com_err_entry (ecode, "list_resources", "^a", reason);

	if called_as_af then return_arg = "";
	goto RETURN;
     end crump;

test: entry (new_sysdir);

	dcl  new_sysdir		     char (*) parameter;

	if new_sysdir = "" then registry_dir = ">system_control_1>rcp";
	else registry_dir = new_sysdir;
	return;

     end list_resources;
