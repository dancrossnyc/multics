/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

quick_get_edit_:
plio2_qge_: proc (pspp) options (support);

/* Written by R.Schoeman Spring 1977 to replace plio2_gve_ with faster algorithms & code.	*/
/* Modified 780223 by PG to fix 1709 (get edit failed when very first thing was column format). */
/* Modified 780406 by RAB to fix 1724 (seg fault with get string edit doing col format with no newline). */
/* Modified 780718 by RAB to make slightly more quit-start proof */

/*	plio2_qge_$
   is called from the user's procedure to get one
   value in edit-directed mode and, of course, to
   perform such control functions as may correspond
   to formats preceeding the next data format.

   This procedure is called from put_format_.alm in the operators,
   which has already walked the format list and gotten the next prepared format
   item. This procedure gets the input field of the length defined by that
   format and does the necessary conversions, finally assigning the
   value to the variable specified by the ps.
  It is analagous to the latter half of put_format_.alm, which does
   the output conversions for pl1 edit_directed io.
*/

dcl (erno init (999), ftype, nval, i, j,
     radix_factor, first_bit,
     to_move, targ_index, si, cc,
     string_start, first_char_len,
     old_nl, from_old_nl,
     oncharind, icomplex) fixed bin (15);

dcl (char_pic_format, warned) bit (1) aligned;

dcl  code fixed bin (35);
dcl  x char (1) aligned;
dcl  conname char (12);
dcl  ctl_char char (1) aligned;
dcl  ctl_chars char (4) aligned init (
     "	
") options (constant) int static;

/* The preceding four characters were , in order: carriage_return, horizontal tab, new_line, and new_page 	*/

dcl  based_char256 char (256) based;
dcl  based_packed_ptr ptr unaligned based;
dcl  char_array (1000) char (1) unaligned based;

dcl 1 based_byte_array (60) unal based (addr (buffer (icomplex))),
    2 unused bit (1) unal,
    2 exp_fac fixed bin (7) unal;

dcl  buf1000 char (1000);
dcl  new_line char (1) aligned int static options (constant) init ("
");

dcl  tab char (1) aligned int static options (constant) init ("	");



dcl (error_table_$short_record,
     error_table_$long_record,
     error_table_$end_of_info) external static fixed bin (35);

dcl (pspp, psp, fp, pic_ptr, targ_ptr, in_ptr) ptr;

dcl 1 facts (2),
    2 (pow, sc, iw, ef, use) fixed bin (15);


dcl 1 info_struct,
    2 next_position fixed (21),			/* output */
    2 last_position fixed (21);			/* output */


dcl (n_read, n_left, tk) fixed bin (21);


dcl 1 fb based (ps.format_area_p),
    2 type fixed bin (15),
    2 nval fixed bin (15),
    2 val (3) fixed bin (15);

dcl 1 fbc (0:2) based (fp),
    2 type fixed bin (15),
    2 nval fixed bin (15),
    2 val (3) fixed bin (15);

dcl  types (2) fixed bin (17),

     scale_prec (2) fixed bin (35),

     1 fo (2) based (addr (scale_prec (1))) aligned,
     2 scale fixed bin (17) unal,
     2 prec fixed bin (17) unal;

dcl 1 dec_fixed (2) based (addr (space)) unal,
    2 sign_of_mantissa char (1) unal,
    2 mantissa char (info.inprec) unal;

dcl 1 dec_float (2) based (addr (space)) unal,
    2 sign_of_mantissa char (1) unal,
    2 mantissa char (info.inprec) unal,
    2 unused bit (1) unal,
    2 exponent fixed bin (7) unal;

dcl (dec_pos, e_pos, exp_sign_pos) fixed bin (17);

dcl  buffer (2) char (64) aligned,
     space char (128) aligned;



dcl (addr, addrel, fixed, index, min, max, mod, length, search, substr, unspec, reverse, size,
     ltrim, rtrim) builtin;


dcl  put_copy_ ext entry (ptr, fixed bin (21));

dcl  iox_$get_chars ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$get_line ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  plio2_signal_$s_ ext entry (ptr, char (*), char (*), fixed bin (15));
dcl  plio2_signal_$s_r_ ext entry (ptr, char (*), char (*), fixed bin (15));
dcl  plio2_signal_$conversion_error_ ext entry (ptr, char (*), fixed bin (15), ptr, fixed bin (15), fixed bin (15), fixed bin (15));
dcl  plio2_resig_ ext entry (ptr);

dcl  conversion condition;

%include pl1_stack_frame;
%include desc_dcls;
%include desc_types;
%include radix_factor_constants;
%include descriptor;
%include picture_desc_;
%include picture_image;
%include picture_types;
%include picture_util;
%include plio_format_codes;
%include plio2_ps;
%include system;


/* QUICK declarations, i.e. dcls for quick_get_edit */

dcl 1 def_desc structure aligned based (addr (ps.descr)) like desc_;
%include plio2_fsb;

dcl  iocbp ptr;
dcl (targ_type) fixed bin (17) aligned;

dcl 1 scale_prec_ aligned,
    2 scale fixed bin (17) unal,
    2 prec fixed bin (17) unal;

dcl  fb35_based fixed bin (35) based aligned;

dcl 1 s,
    2 width fixed bin (17),
    2 chars char (256);

dcl  def_string char (256) varying based (addr (s));
dcl  imag_def_string varying char (256);

dcl  bit_str bit (256) aligned;
dcl  max_io_string_length int static options (constant) fixed bin (17) init (256);

/*		*/

	psp = pspp;

	on conversion call plio2_resig_ (psp);

	ps.auxp = addr (s);
	icomplex = 1;	/* This index is used to cycle through the 2 conversions
			   needed for a complex format. If its not a complex format,
			   this index is always "1".	*/
	nval = fb.nval;
	ftype = fb.type;
	iocbp = ps.fsbp -> fsb.iocb_p;
	if ftype ^= bn_format
	then s.width = fb.val (1);
	else s.width = fb.val (2);
	goto char_length_action (ftype);

char_length_action (3):				/* complex stuff */

	fp = ps.format_area_p;

	do i = 1 to 2;
	     if fbc (i).nval < 1
	     then goto err148;

	     facts.iw (i) = fbc (i).val (1);
	     if facts.iw (i) < 0
	     then goto err145;
	end;
	s.width = facts.iw (1) + facts.iw (2);
					/* The length of a complex format item is the
					   sum of the lengths of its real & cplx parts.	*/

/* INTENTIONAL FALL THROUGH HERE !!	*/

char_length_action (1):
						/*	 l_paren	*/
char_length_action (2):
						/*	r_format	*/
char_length_action (4):
						/*	f_format	*/
char_length_action (5):
						/*	e_format	*/
char_length_action (6):
						/*	b_format	*/
char_length_action (7):
						/*	a_format	*/
char_length_action (8):
						/*	x_format	*/
char_length_action (13):
						/*	picture_format	*/
char_length_action (14):				/* normal input chars */
						/*	bn_format	*/

	if nval < 1
	then goto err148;

	if s.width < 0
	then goto err145;
	else if s.width > max_io_string_length
	then goto err149;

/* Although it would be nice to optimize the case of char input string going to
   a char target, the problem of padding if too short and raising stringsize if too
   long means that a prohibitive amount of processing by hand would have to be done. */

	if s.width>0
	then do;
	     targ_ptr = addr (s.chars);
	     to_move = s.width;
	     call get_chars;			/* targ_ptr & to_move are the pseudo_args */
	end;


	goto process_format (ftype);


char_length_action (9):				/* input lines */
						/* skip format	*/
	if nval < 1
	then call get_skip (1);
	else call get_skip (s.width);


	goto all_done;


char_length_action (10):
						/* column format */
	if fb.nval ^= 1				/* This test should be unnecessary, because compiler should prevent this case from occuring */
	then goto err148;

	if fb.val (1) < 1
	then goto err145;
	else tk = fb.val (1)-1;
				/* tk is the target column number, starting at 0,
				   therefore it is equal to the pl1 col #,
				   which starts at one, minus 1.	*/


	if fsb.kol = tk
	then goto all_done;

	warned = "0"b;

	if fsb.kol > tk
	then call get_skip (1);
				/* If the present column is greater than the
				   desired column, look for that column on the
				   NEXT line.	*/

	n_left = chars_left_on_line ();
				/* This internal subroutine returns the number of
				   chars left on the present line. If there are
				   enough to go to the requested column,move the
				   requisite distance, otherwise AG94 says skip to
				   the next line & you're done.	*/

	if n_left > tk-fsb.kol
	then do;
	     to_move = tk-fsb.kol;
	     if to_move > 1000
	     then goto err180;
	     targ_ptr = addr (buf1000);
	     call get_chars;
	     if index (substr (buf1000, 1, to_move), tab) > 0
	     then call tab_in_col_input;
	     goto all_done;
	end;
	else do;
	     call get_skip (1);
	     goto all_done;
	end;

char_length_action (11):
char_length_action (12):				/* illegal input format */
	goto err147;



null_string:
	intype = char_desc * 2;
	in_ptr = addr (s.chars);
	inscale_prec = 0;
	goto final_conv;

process_format (3):					/* complex */

	first_char_len = ps.format_area_p -> fbc (1).val (1);
	imag_def_string = substr (def_string, first_char_len+1);
	def_string = substr (def_string, 1, first_char_len);

	do icomplex = 1 to 2;

	     ps.format_area_p = addrel (ps.format_area_p, size (fb));
	     if icomplex = 2
	     then def_string = imag_def_string;
	     if fb.type = picture_format
	     then call p_format_proc;
	     else if fb.type = e_format
	     then call e_format_proc;
	     else if fb.type = f_format
	     then call f_format_proc;
	     else goto err259;
	     types (icomplex) = intype;
	     scale_prec (icomplex) = inscale_prec;
	end;

	ps.format_area_p = addrel (ps.format_area_p, -2* (size (fb)));
	if types (1) = D_fixed_real_desc*2
	& types (2) = D_fixed_real_desc*2
	then do;
	     intype = D_fixed_real_desc*2+1;
	     info.inprec = min (max_p_dec, max (fo.prec (1)-fo.scale (1), fo.prec (2)-fo.scale (2))+max (fo.scale (1), fo.scale (2))+1);
	     info.inscale = max (fo.scale (1), fo.scale (2));

	     do i = 1 to 2;
		call assign_ (addr (dec_fixed (i)), intype, inscale_prec, addr (buffer (i)),
		     types (i), scale_prec (i));
	     end;

	     intype = D_fixed_cplx_desc*2+1;
	end;
	else do;
	     intype = D_float_real_desc*2+1;
	     info.inprec = max (fo.prec (1), fo.prec (2));
	     info.inscale = 0;

	     do i = 1 to 2;
		call assign_ (addr (dec_float (i)), intype, inscale_prec, addr (buffer (i)),
		     types (i), scale_prec (i));
	     end;

	     intype = D_float_cplx_desc*2+1;
	end;

	in_ptr = addr (space);
	goto final_conv;

process_format (4):					/* fixed format */
	string_start = 1;
	in_ptr = addr (buffer (icomplex));
	call f_format_proc;
	goto final_conv;


process_format (5):					/* e_format */
	string_start = 1;
	in_ptr = addr (buffer (icomplex));
	call e_format_proc;
	goto final_conv;


process_format (6):					/* b_format */
process_format (14):				/* bn_format */

	def_string = ltrim (rtrim (def_string));
	if s.width = 0
	then goto null_string;
	if ftype = b_format
	| fb.val (1) = 1
	then do;
	     call assign_ (addr (bit_str), bit_desc * 2, addr (s.width) -> fb35_based, addr (s.chars), char_desc * 2, addr (s.width) -> fb35_based);
	     radix_factor = 1;
	end;
	else do;
ce_return:
	     radix_factor = fb.val (1);
	     if s.width * radix_factor > max_io_string_length
	     then goto err144;

	     if radix_factor = 4
	     then if search (def_string, capital_hex) > 0
		then substr (digits (4), 11, 6) = capital_hex;
		else substr (digits (4), 11, 6) = lower_case_hex;

	     do i = 1 to length (def_string);
		x = substr (def_string, i, 1);
		si = index (digits (radix_factor), x);
		if si = 0
		then goto CE_for_bn;
		first_bit = (radix_factor* (si-1))+1;
		substr (bit_str, radix_factor* (i-1)+1, radix_factor) =
		     substr (expand_bits (radix_factor), first_bit, radix_factor);
	     end;
	end;

	in_ptr = addr (bit_str);
	intype = bit_desc * 2;			/* bit_desc * 2 */
	inscale_prec = s.width*radix_factor;
	goto final_conv;

process_format (7):					/* a_format	*/


/* 1st figure out output type, from ps.descr & ps.value_p, then call assign_	*/
/* to convert it & store result in ps.value_p.				*/

	intype = char_desc * 2;			/* char_desc * 2	*/
	in_ptr = addr (s.chars);
	inscale_prec = s.width;

final_conv:
	if ps.descr = "0"b
	then do;
	     pic_ptr = psp -> ps.stack_frame_p -> pl1_stack_frame.text_base_ptr;
	     pic_ptr = addrel (pic_ptr, psp -> ps.top_half);

	     call set_pic_args;
	     if targ_type = char_desc * 2 & ftype = picture_format & char_pic_format
	     then do;
		if scale_prec_.prec < inscale_prec
		then call plio2_signal_$s_ (psp, "stringsize", "quick_get_edit", -1);
		else if scale_prec_.prec > inscale_prec
		then substr (s.chars, s.width+1) = "";
		call pack_picture_ (ps.value_p -> char1, pic_ptr -> char1,
		     addr (s.chars) -> char1);
	     end;
	     else do;
		call assign_ (addr (buffer (1)), targ_type, addr (scale_prec_) -> fb35_based,
		     in_ptr, intype, inscale_prec);
		call pack_picture_ (ps.value_p -> char1, pic_ptr -> char1, addr (buffer (icomplex)) -> char1);
	     end;
	     goto all_done;
	end;
	unspec (desc_) = unspec (ps.descr);
	targ_type = desc_.type_ * 2+ fixed (desc_.pack_, 17, 0);
	if targ_type = v_char_desc * 2 | targ_type = v_bit_desc * 2
	then targ_ptr = addrel (ps.value_p, -1);
	else targ_ptr = ps.value_p;
	scale_prec_.scale = desc_.scale_;
	scale_prec_.prec = desc_.precision_;
	call assign_ (targ_ptr, targ_type, addr (scale_prec_) -> fb35_based,
	     in_ptr, intype, inscale_prec);
	goto all_done;

process_format (13):				/* picture format */
	string_start = 1;
	in_ptr = addr (buffer (icomplex));
	call p_format_proc;
	goto final_conv;


/*		*/
err180:
	erno = 180;
	goto allerr;

err181:
	erno = 181;
	goto allerr;

err182:
	erno = 182;
	goto allerr;

err145:
	erno = 145;
	goto allerr;

eof163:
	erno = 163;
	conname = "ENDFILE";
	goto sandr;

err147:
	erno = 147;
	goto allerr;

err162:
	erno = 162;
	goto allerr;

err163:
	erno = 163;
	goto allerr;

err148:
	erno = 148;
	goto allerr;

err144:
	erno = 144;
	goto allerr;

err149:
	erno = 149;
	goto allerr;

err150:
	erno = 150;
	goto allerr;

err216:
	erno = 216;
	goto allerr;

err217:
	erno = 217;
	goto allerr;

err259:
	erno = 259;
	goto allerr;
allerr:
	conname = "ERROR";

/* One can NEVER return from these error-raising calls except for conversion_error !	*/

sandr:
	call plio2_signal_$s_r_ (psp, conname, "quick_get_edit", erno);

CE_for_bn:
	call plio2_signal_$conversion_error_ (psp, "quick_get_edit_bn", 151, addr (s.chars), 1,
	     (s.width), i);
	goto ce_return;

raise_transmit:
	call plio2_signal_$s_r_ (psp, "TRANSMIT", "quick_get_edit", 183);

process_format (8):					/* x_format is total ignore so KEEP label on all_done */
all_done:
	return;
						/*		*/
p_format_proc: proc;

	     pic_ptr = addr (fb.val (2)) -> based_packed_ptr;
val_pic:
	     call validate_picture_ (addr (s.chars) -> char1, pic_ptr -> char1,
		erno, oncharind);
	     if erno ^= 0
	     then do;
		call plio2_signal_$conversion_error_ (psp, "quick_get_edit", erno,
		     addr (s.chars), 1, (s.width), oncharind);
		goto val_pic;
	     end;
	     if pic_ptr -> picture_image.type = char_picture /* char */
	     then do;
		in_ptr = addr (s.chars);
		intype = char_desc * 2;
		inscale_prec = s.width;
		char_pic_format = "1"b;
	     end;

	     else do;
		call unpack_picture_ (addr (buffer (icomplex)) -> char1,
		     pic_ptr -> char1, addr (s.chars) -> char1);
		intype = type (pic_ptr -> picture_image.type);
		info.inscale = pic_ptr -> picture_image.scale - pic_ptr -> picture_image.scalefactor;
		info.inprec = pic_ptr -> picture_image.prec; /* type cant be  char cause that already has been filtered out prior to unpack  call */
		in_ptr = addr (buffer (icomplex));
		char_pic_format = "0"b;
	     end;


	end p_format_proc;

/*		*/
f_format_proc: proc;

	     def_string = ltrim (rtrim (def_string));
	     dec_pos = index (def_string, ".");

	     if length (def_string) = 0
	     then def_string = "0";			/* else char_to_numeric will call it fixed bin, not fixed dec */

	     call char_to_numeric_ (addr (buffer (icomplex)), intype, inscale_prec, addr (s.chars), length (def_string));

	     if intype ^= D_fixed_real_desc*2
	     then goto err150;

	     if dec_pos > 0
	     then info.inscale = length (def_string) - dec_pos;
	     else if fb.nval > 1
	     then info.inscale = fb.val (2);
	     if fb.nval > 2
	     then info.inscale = info.inscale - fb.val (3);

	     if info.inscale < min_scale
	     then goto err217;
	     else if info.inscale > max_scale
	     then goto err216;

	end f_format_proc;

/*		*/
e_format_proc: proc;

	     def_string = ltrim (rtrim (def_string));
	     dec_pos = index (def_string, ".");
	     e_pos = index (def_string, "e");
	     if length (def_string) = 0
	     then def_string = "0e0";			/* KLUDGE to make zero-len string work	*/
	     else do;
		exp_sign_pos = search (substr (def_string, 2), "+-")+1;

		if e_pos = 0
		then if exp_sign_pos = 1
		     then def_string = def_string||"e0";
		     else def_string = substr (def_string, 1, exp_sign_pos-1)||"e"||substr (def_string, exp_sign_pos);
	     end;

	     call char_to_numeric_ (addr (buffer (icomplex)), intype, inscale_prec, addr (s.chars), length (def_string));

	     if intype ^= D_float_real_desc*2
	     then goto err182;

	     if dec_pos = 0
	     then if fb.val (2) ^= 0
		then do;
		     based_byte_array (inscale_prec+2).exp_fac = based_byte_array (inscale_prec+2).exp_fac-fb.val (2);
		     if based_byte_array (inscale_prec+2).exp_fac > max_scale
		     then goto err216;
		     else if based_byte_array (inscale_prec+2).exp_fac < min_scale
		     then goto err217;
		end;


	end e_format_proc;


/*		*/
set_pic_args: proc;
	     targ_type = type (pic_ptr -> picture_image.type);
	     scale_prec_.scale = pic_ptr -> picture_image.scale - pic_ptr -> picture_image.scalefactor;
	     if targ_type = char_desc * 2		/* char_desc * 2 */
	     then scale_prec_.prec = pic_ptr -> picture_image.varlength;
	     else scale_prec_.prec = pic_ptr -> picture_image.prec;
	end;


/*		*/
get_chars: proc;
						/* INPUT ARGS are targ_ptr, to_move 	*/

	     targ_index = 1;

scan:	     si = min (to_move, fsb.blc-fsb.bnc+1);

	     cc = search (substr (xbuf, fsb.bnc, si), ctl_chars);

	     if cc = 0
	     then do;
		substr (targ_ptr -> based_char256, targ_index, si) = substr (xbuf, fsb.bnc, si);
		fsb.bnc = fsb.bnc + si;
		targ_index = targ_index + si;
		fsb.kol = fsb.kol + si;

		if to_move = si
		then return;

		to_move = to_move - si;

		call refill_buffer;

		if code ^= 0
		then if targ_index = 1
		     then goto eof163;
		     else goto err163;

		goto scan;
	     end;

	     ctl_char = substr (xbuf, fsb.bnc+cc-1, 1);

	     if ctl_char ^= tab
	     then do;
						/* The remaining ctl chars are new_line, new_page, and carriage return	*/
		substr (targ_ptr -> based_char256, targ_index, cc-1) = substr (xbuf, fsb.bnc, cc-1);
		to_move = to_move - cc + 1;
		fsb.bnc = fsb.bnc+cc;
		targ_index = targ_index+cc-1;
		if ctl_char = new_line
		then fsb.kol = 0;
		else fsb.kol = fsb.kol+cc-1;
		goto scan;
	     end;

	     substr (targ_ptr -> based_char256, targ_index, cc) = substr (xbuf, fsb.bnc, cc);
	     fsb.bnc = fsb.bnc+cc;
	     targ_index = targ_index+cc;
	     to_move = to_move-cc;

	     fsb.kol = fsb.kol + cc;
	     fsb.kol = fsb.kol+10-mod (fsb.kol, 10);
	     goto scan;

	end get_chars;
						/*		*/
refill_buffer: proc;

	     if ps.copy
	     then do;
		call put_copy_ (psp, fsb.blc);
		ps.start_copy = 1;
	     end;

	     if ps.string
	     then goto err162;

	     fsb.blc = 0;	/* protects us somewhat from quit-start */
	     fsb.bnc = 1;	/* .. */

	     if fsb.console
	     then call iox_$get_line (iocbp, fsb.bptr, fsb.bsize, fsb.blc, code);
	     else call iox_$get_chars (iocbp, fsb.bptr, fsb.bsize, fsb.blc, code);

	     fsb.bnc = 1;

	     if code ^= 0
	     then if code = error_table_$long_record|code = error_table_$short_record
		then code = 0;
	     else if code = error_table_$end_of_info
	     then ;
	     else goto raise_transmit;



	end refill_buffer;


/*		*/
chars_left_on_line: proc returns (fixed bin (21));

dcl  n_left fixed bin (21);


	     if fsb.blc = 0				/* never have read from file... */
	     then call refill_buffer;

	     n_left = index (substr (xbuf, fsb.bnc, fsb.blc-fsb.bnc+1), new_line);

	     if n_left > 0
	     then return (n_left);

	     /* Have partial input line (no final NL). Find out why. */

	     from_old_nl = index (reverse (substr (xbuf, 1, fsb.blc)), new_line);

	     if from_old_nl = 0
	     then do;
		if ps.string
		     then return(fsb.blc - fsb.bnc + 1);

		call iox_$get_line (iocbp, addr (xbuf), fsb.bsize, n_read, code);

		if code = error_table_$end_of_info
		then return (fsb.blc - fsb.bnc + 1);
		else goto err181;
	     end;

						/* It should be noted here that if we just returned 0, the col format
						   handling mechanism will shorty raise an end_of_file anyway, by calling
						   a guaranteed subsequent "get_skip(2)"	*/

	     old_nl = fsb.blc-from_old_nl;

	     if ps.copy
	     then do;
		call put_copy_ (psp, fsb.blc);
		ps.start_copy = 1;
	     end;

	     if ps.string
	     then goto err162;



	     substr (xbuf, 1, from_old_nl) = substr (substr (xbuf, 1, from_old_nl), old_nl+1, from_old_nl); /* the +1 is to flush the last NL, too */
	     call iox_$get_line (iocbp, addr (addr (xbuf) -> char_array (from_old_nl+1)),
		fsb.bsize-from_old_nl, n_read, code);
	     if code ^= 0
	     then if code = error_table_$long_record
		then goto err181;
		else if code = error_table_$short_record|code = error_table_$end_of_info
		then code = 0;
		else goto raise_transmit;


	     fsb.bnc = fsb.bnc - old_nl;
	     fsb.blc = from_old_nl+n_read;
	     n_left = fsb.blc-fsb.bnc+1;

	     return (n_left);
	end;
						/*		*/
get_skip:	proc (skip_count_param);

dcl (skip_count, skip_count_param) fixed bin (17) aligned;


	     skip_count = skip_count_param;
	     fsb.kol = 0;

	     do while (skip_count > 0);

		j = index (substr (xbuf, fsb.bnc, fsb.blc-fsb.bnc+1), new_line);

		if j = 0
		then do;
		     call refill_buffer;

		     if code ^= 0
		     then goto eof163;

		end;

		else do;

		     fsb.bnc = fsb.bnc + j;
		     skip_count = skip_count-1;
		end;

	     end;


	end;


/*		*/
tab_in_col_input: proc;

	     if ^warned
	     then call plio2_signal_$s_ (psp, "ERROR", "quick_get_edit", 157);

	     warned = "1"b;
	     return;

	end;
     end;
