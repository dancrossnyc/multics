/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_fl_:
fl_:
fl:format_list:proc options(support);
	/* updated 73-11-8:  picture formats added */

				/*		D E B U G    I N F O
				
				   (plio2_$)dcfi will turn on or turn off display mode
				   (plio2_$)dcfi25 will display the next 25 formats obtained.  */
				


% include plio_format_codes;
%include picture_image;
dcl 1  fb aligned based(fbxp),
	2 bits,
		3 code	bit(9) unaligned,
		3 nval	bit(9) unaligned,
		3 offset	bit(18) unaligned,
	2 rep fixed bin(35),
	2 val(3) fixed bin(35);



dcl 1 fx aligned based(flxp),
	2 fe(3)	,		/* cur, two more for the complex case */
		3 type	fixed bin(15),
		3 nval	fixed bin(15),
		3 val(3)	fixed bin(15),
	2 cur_rep fixed bin(15),	/* octal offset 17  */
	2 cur_sfp	ptr,		/* octal offset 20,21   */
	2 cur_fep	ptr,
	2 first_open_paren_sw bit(18),
	2 stk_index fixed bin(15),
	2 frame(10),		/* push down for "(" in a format list */
		3 sf1p	ptr,
		3 sf2p	ptr,
		3 fe1p	ptr,
		3 fe2p	ptr,
		3 rep	fixed bin(15),
		3 type	fixed bin(15);

	/* facts about the form of FORMAT LISTSs in object
	   programs are given herein in passim */


	dcl (pspp,fbxp,psp,flxp,blp,block_sym_tab_p,qq) ptr;
	dcl (indexlimit,irep,ival,realstype) fixed bin(35);
	dcl stu_$decode_runtime_value ext entry(fixed bin(35),ptr,ptr,ptr,ptr,ptr,fixed bin(35)) returns(fixed bin(35));
	dcl stu_$remote_format ext entry(fixed bin(35),ptr,ptr,label)
	returns(fixed bin(35));
	dcl flabel label;
	dcl icode fixed bin(35);
	dcl i fixed bin(15);
	dcl erno fixed bin(15);
	dcl bl(2) ptr based(blp);
	dcl based_int fixed bin (35) based;

	dcl ( addr,addrel,fixed,null,baseptr,baseno,rel,substr ) builtin;
	dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));

	dcl (ioa_,ioa_$nnl) entry ext options(variable);
	dcl format_letters char(44) aligned static int
	init	("   r   c   f   e   b   a   xskip colpageline");
	dcl (dcfi_sw,dcfi_ct) fixed bin(15) static internal init(0);
	dcl node(5) based(p) fixed bin(15);
	dcl p ptr;
	dcl c4 char(4) aligned;

% include plio2_ps;
/*  */
reset_:entry(pspp);
	psp=pspp;
	flxp=ps.format_area_p;
	ps.new_format=0;



	   /* fx.fe(1) is the structure passed to get edit and put edit
	   which contains the current fully evaluated format item.
	   In the case of the complex format, if fe(1).nval=1 then
	   fe(2) gives both real formats; if fe(1).nval=2 then
	   fe(2) and fe(3) give the two real formats.  */


	fx.stk_index=1;
	fx.cur_rep=0;

	fx.cur_fep=ps.special_list_p;
	if fx.cur_fep->based_int^=0 then goto err196; 

		/* Note: the compiled format list begins with 
		   a word of ZEROs to distinguish a format_label
		   from any other label on the basis of the material
		   pointed to by it.  */

	fx.frame(1).sf1p,fx.frame(1).fe1p=null;
	fx.frame(1).sf2p=ps.stack_frame_p;
	fx.frame(1).fe2p=addrel(ps.special_list_p,1);	/* since first word is zeros */
	return;


/* 	GET	GET	*/



get_next_:entry(pspp);

		/* gets next format item and leaves it, fully
		   evaluated, in fe(1).    REP factors are evaluated
		   before any of the rest of the format item is examined.
		   PARAMs are evaluated before EACH use of the item. */


	psp=pspp;
	block_sym_tab_p=null;	/* used in call to decode value,
				   should be pointer to the ST for
				   the block of the (remote) format.
				   detail a little unsettled now, so
				   I'll use NULL */
	flxp=ps.format_area_p;
	if ps.p1p2 then indexlimit =6;
	else /* ordinary PL2 case */ indexlimit=10;


/*   */
test_rep:
	if fx.cur_rep>0 then
		do;
		fx.cur_rep=fx.cur_rep-1;
		if fx.fe(1).type=c_format then
			do;
			fx.fe(2).val(1)=0;	/* compiler bug made fx.fe(2).val(*)=0 very costly  */
			fx.fe(2).val(2)=0;
			fx.fe(2).val(3)=0;
			fx.fe(3).val(1)=0;
			fx.fe(3).val(2)=0;
			fx.fe(3).val(3)=0;
			if fx.fe(1).nval <1 then goto err194;
			fbxp=addrel(fx.cur_fep,fx.fe(1).val(1));

			if fx.fe(2).type = picture_format
			then	call decode_picture_format(2);

			else	do i=1 to fx.fe(2).nval;
				ival=fbxp->fb.val(i);
				if ival<0 then
					do;
					ival=stu_$decode_runtime_value
					(ival,block_sym_tab_p,fx.cur_sfp,null,null,null,icode);
					if icode^=0 then goto err195;
					end;
				fx.fe(2).val(i)=ival;
				end;

			if fx.fe(1).nval<2 
			then	do;
				fx.fe(3).val(1)=fx.fe(2).val(1);
				fx.fe(3).val(2)=fx.fe(2).val(2);
				fx.fe(3).val(3)=fx.fe(2).val(3);
				end;
			else	do;
				fbxp=addrel(fx.cur_fep,fixed(fx.fe(1).val(2),18));

				if fx.fe(3).type = picture_format
				then	call decode_picture_format(3);
				else	do i=1 to fx.fe(3).nval;
					ival=fbxp->fb.val(i);
					if ival<0 then
						do;
						ival=stu_$decode_runtime_value
						(ival,block_sym_tab_p,fx.cur_sfp,null,null,null,icode);
						if icode^=0 then goto err195;
						end;
					fx.fe(3).val(i)=ival;
					end;

				end;
			end;

		else	do;	/* non COMPLEX case */
			fbxp=fx.cur_fep;
			fx.fe(1).val(1)=0;
			fx.fe(1).val(2)=0;
			fx.fe(1).val(3)=0;

			if fx.fe(1).type = picture_format
			then	call decode_picture_format(1);

			else	do i=1 to fx.fe(1).nval;
				ival=fbxp->fb.val(i);
				if ival<0 then
					do;
					ival=stu_$decode_runtime_value
					(ival,block_sym_tab_p,fx.cur_sfp,null,null,null,icode);
					if icode^=0 then goto err195;
					end;
				fx.fe(1).val(i)=ival;
				end;
			end;
		go to get_fb_exit;
		end;


decode_picture_format:	proc(number);

dcl	number fixed bin(15),
	p ptr;

	p = addrel(fbxp,fb.val(1));

	fx.fe(number).nval = 3;
	fx.fe(number).val(1) = p->picture_image.varlength;
	fx.fe(number).val(2) = fixed(baseno(p),18);
	fx.fe(number).val(3) = fixed(rel(p),18);

end decode_picture_format;



test_next:
	tb18=fx.cur_fep->fb.bits.offset;
	dcl tb18 bit(18);
	if tb18="0"b then go to test_fx_stack;
	fx.cur_fep=addrel(fx.cur_fep,tb18);

set_rep:
	irep=fx.cur_fep->fb.rep;
	if irep<0 then
		do;
		irep=stu_$decode_runtime_value(irep,block_sym_tab_p,fx.cur_sfp,null,null,null,icode);
		if icode^=0 then goto err195;
		end;
	fx.cur_rep=irep;
	fx.fe(1).type=fixed(fx.cur_fep->fb.bits.code,9);
	fx.fe(1).nval=fixed(fx.cur_fep->fb.bits.nval,9);

	if fx.fe(1).type> c_format  then go to test_rep;	/* non special */
	if fx.cur_rep<1 then go to test_next;


/* for n>0
   nC or n( or nR  */


	if fx.fe(1).type= c_format  then
		do;
c_formatx:
		fx.fe(1).val(*)=fx.cur_fep->fb.val(*);

		if fx.fe(1).nval<1 then goto err194;
		fbxp=addrel(fx.cur_fep,fx.cur_fep->fb.val(1));
		fx.fe(2).type,realstype=fixed(fbxp->fb.bits.code,9);
		     /*   if realstype^=f_format
			then if realstype^=e_format
			then if realstype^=picture_format
			then goto err194;  */
		fx.fe(2).nval=fixed(fbxp->fb.bits.nval,9);

		if fx.fe(1).nval<2 then
			do;
			fx.fe(3).type=fx.fe(2).type;
			fx.fe(3).nval=fx.fe(2).nval;
			end;


		else	do;
			fbxp=addrel(fx.cur_fep,fx.cur_fep->fb.val(2));
			fx.fe(3).type,realstype=fixed(fbxp->fb.bits.code,9);
			      /*  if realstype^=f_format
				then if realstype^=e_format
				then if realstype^=picture_format
				then goto err194;  */
			fx.fe(3).nval=fixed(fbxp->fb.bits.nval,9);
			end;

		go to test_rep;
		end;





open_paren:



	fx.stk_index=fx.stk_index+1;
	if fx.stk_index>indexlimit then goto err197;
	fx.frame(fx.stk_index).sf1p=fx.cur_sfp;
	fx.frame(fx.stk_index).fe1p=fx.cur_fep;

	fx.frame(fx.stk_index).rep=fx.cur_rep;

	if fx.fe(1).type= r_format  then
		do;
r_formatx:
		icode=stu_$remote_format(fx.cur_fep->fb.val(1),
					fx.cur_sfp,null,flabel);
		if icode^=0 then goto err195;
		blp=addr(flabel);
		fx.frame(fx.stk_index).sf2p=bl(2);	/* assumes LABEL=(format-list-p,stack-frame-p) */
		if bl(1)->based_int^=0 then goto err196;
		fx.frame(fx.stk_index).fe2p=addrel(bl(1),1);
		end;

	else	do;
		fx.frame(fx.stk_index).sf2p=fx.cur_sfp;
		fx.frame(fx.stk_index).fe2p=addrel(fx.cur_fep,fixed(fx.cur_fep->fb.val(1),18));
		end;

test_fx_stack:
	if fx.stk_index=1 then go to inner_cycle;


	if fx.frame(fx.stk_index).rep>0 then
		do;
		fx.frame(fx.stk_index).rep=fx.frame(fx.stk_index).rep -1;
		go to inner_cycle;
		end;


	fx.cur_sfp=fx.frame(fx.stk_index).sf1p;
	fx.cur_fep=fx.frame(fx.stk_index).fe1p;
	fx.stk_index=fx.stk_index-1;
	go to test_next;

inner_cycle:
	fx.cur_sfp=fx.frame(fx.stk_index).sf2p;
	fx.cur_fep=fx.frame(fx.stk_index).fe2p;
	go to set_rep;


err194:	/* bad_complex_pair */
	erno=194;
	go to error_exit;

err195:	/* decode error */
	erno=195;
	goto error_exit;

err196:	/* first-word-of-format-not-zero  */
	erno=196;
	goto error_exit;

err197:	/* exceeds the depth of the format STACK  */
	erno=197;
	goto error_exit;
error_exit:
	call plio2_signal_$s_r_(psp,"ERROR","format_list_processor",erno);

get_fb_exit:

	if dcfi_sw=1 then
		do;
		dcfi_ct=dcfi_ct - 1;
		if dcfi_ct=0 then dcfi_sw=0;

		p=addr(fx.fe(1));
		if node(1)=3 then goto disp_c;

		call disp_f;
		goto disp_ret;

disp_c:
		call ioa_$nnl("complex(");
		p=addrel(p,5);
		call disp_f;
		call ioa_$nnl(",");
		p=addrel(p,5);
		call disp_f;
		call ioa_$nnl(")");

disp_ret:
		call ioa_("");
		end;
	return;	/* return from disp OR from normal get_next_  */


disp_f:proc;
	if node(1)=13
	then	do;
		qq=addrel(baseptr(node(4)),node(5));
		call ioa_$nnl("p ""^a""",qq->picture_image.chars);
		end;
	else	do;
		c4=substr(format_letters,node(1)*4-7,4);
		if node(2)=3 then call ioa_$nnl("^a(^d,^d,^d)",	c4,node(3),node(4),node(5));
		if node(2)=2 then call ioa_$nnl("^a(^d,^d)",	c4,node(3),node(4));
		if node(2)=1 then call ioa_$nnl("^a(^d)",	c4,node(3));
		if node(2)=0 then call ioa_$nnl("^a",		c4);
		end;
end disp_f;

dcfi:entry;
	dcfi_sw=1-dcfi_sw;
	return;

dcfi25:entry;
	dcfi_sw=1;
	dcfi_ct=25;
	return;


end plio2_fl_;
