/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_ldi_:proc(pspp) options(support);


/* updated 5-5-71 */
/* updated 10-73 for
	a) new conversion routines
	b) new BASIS/1-10 inspired converting rules
*/

dcl  based_chars char (1044480) based;
dcl ( oncharind,oci,bnc,blc,istore,istate,erno,i,fnb,sn) fixed bin(15);

dcl	(sp,bp,psp,pspp,picture_p) ptr;

dcl temp_answer bit(2304) aligned;
dcl output256 char(256) aligned based(addr(temp_answer));
dcl bit256varying bit(256) aligned varying;
dcl x char(1) aligned;

dcl	buffer char(64) aligned;

dcl 1 ldi aligned based,
	2 l fixed bin(15),
	2 char256 char(256) aligned;

dcl QUOTE char(1) aligned static internal init("""");
dcl char_vector(1000) unaligned based;

dcl	(addr,addrel,bit,fixed,substr,unspec,length,verify) builtin;

dcl	plio2_signal_$s_ ext entry(ptr,char(*),char(*),fixed bin(15));
dcl	plio2_signal_$conversion_error_ ext entry(ptr,char(*),fixed bin(15),ptr,fixed bin(15),fixed bin(15),fixed bin(15));

dcl	plio2_resig_ ext entry(ptr);
dcl	conversion condition;

%include desc_dcls;
%include desc_types;
%include descriptor;
%include picture_util;
% include plio2_ps;

/* A character string, S, is given which is not of zero length.
   It has neither leading nor trailing blanks or other spaces.
   (get_util_ returns the string ldi.chars _w_i_t_h leading <space>s
   but gvd and gvl remove them before calling ldi.)

   Case 1.  S::= {"xxx"}...
	remove outside quotes, doubled inside quotes to yield SS
	assign SS to target, leaving "assign" to raise CONVERSION.
   Case 2.  S::= {"xxx"}...b
	remove outside quotes and final b and doubled inside quotes to obtain SS
	assign SS to bit256varying to obtain a bit string B of effective length L
	("assign" may raise CONVERSION)
	assign B-L to target.
   Case 3.  S::= something else.
	assign S to target, leaving "assign" to raise CONVERSION.

C A U T I O N

   This is a very new idea, obtained from BASIS/1-10 with a lot of SALT.
   Examine BASIS/1-11 and BASIS/1-12 carefully for conformance.

   Also note that a lot of error-numbers are no longer used (here at least),
   since CONVERSION will now be raised by "assign" in ALL cases.

				P. A. Belmont  10-13-73
*/
	psp=pspp;
	istore=0;
	blc=ps.auxp->ldi.l;
	if blc > 256
	then call plio2_signal_$s_(psp,"ERROR","ldi",242);

	bp=addr(ps.auxp->ldi.char256);




	on conversion call plio2_resig_(psp);

	x=substr(bp->based_chars,1,1);
	if x=QUOTE then go to is_quoted;

output_original_CS:

	sp=bp;
	sn=blc;
	intype=char_desc*2;

output:
	call assign_type_d(ps.descr,psp,picture_p,outtype,outscale_prec);

	if ps.descr="0"b
	then do;
		call assign_(addr(buffer),outtype,outscale_prec,sp,intype,(sn));
		call pack_picture_(ps.vp->char1,picture_p->char1,addr(buffer)->char1);
	end;
	else do;
		unspec(desc_) = ps.descr;
		if type_=v_bit_desc
		|  type_=v_char_desc
		then	ps.vp = addrel(ps.vp,-1);

		call assign_(ps.vp,outtype,outscale_prec,sp,intype,(sn));
	end;

	if ps.switch.transmit_error then
		do;
		ps.switch.transmit_error="0"b;
		call plio2_signal_$s_(psp,"TRANSMIT","ldi",153);
		end;
	return;

is_quoted:
	istate=1;
	bnc=2;

get_x:
	if bnc>blc then
		do;
		if istate=1 then goto output_original_CS;
found_CS:
		intype = char_desc*2;
		sn = istore;
		sp=addr(output256);

		go to output;
		end;

	x=substr(bp->based_chars,bnc,1);
	bnc=bnc+1;
	go to action(istate);



action(1):
	if x=QUOTE then
		do;
		istate=2;
		go to get_x;
		end;

store_char:
	istore=istore+1;
	substr(output256,istore,1)=x;
	go to get_x;

action(2):
	if x=QUOTE then
		do;
		istate=1;
		go to store_char;
		end;

	if x^="b" then goto output_original_CS;
	bit256varying=bit(substr(output256,1,istore));
	sn=length(bit256varying);	/* if CONVERSION is signalled, length may no longer be = istore */
	sp=addr(bit256varying);
	intype=v_bit_desc*2;
	goto output;

end;
