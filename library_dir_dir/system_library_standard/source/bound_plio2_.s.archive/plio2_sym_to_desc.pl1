/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_sym_to_desc:proc(sp,l1p,psp,new_sfp) returns(bit(36) aligned) options(support);

/*	Modified:	4 April 1978 by RAB to partially fix 1720 */
/*	Modified: 1 May 1978 by PCK to implement unsigned binary */

dcl	based_bit36 bit (36) aligned based;
	dcl (sp,l1p,psp,new_sfp) ptr;
	dcl (sfp,tp,tbp,sym_p,ref_p) ptr;
	dcl (bit,fixed,null,addrel,substr,addr) builtin;
	dcl ( i,icode ) fixed bin(15);
	dcl d bit(36) aligned;
	dcl old_type fixed bin(12);
	dcl size fixed bin(35);
	dcl old_symbol based bit(12) aligned;
dcl	data_type fixed bin (6);

	dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));
	dcl stu_$decode_runtime_value ext entry(fixed bin(35),ptr,ptr,ptr,ptr,ptr,fixed bin(15)) returns(fixed bin(35));
dcl	stu_$get_implicit_qualifier entry(ptr,ptr,ptr,ptr,ptr) returns(ptr);

%include stu_frame;
/*  */
%include runtime_symbol;
%include symbol_node;
%include plio2_ps;
%include desc_types;
/*  */

start:
	sym_p=sp;
	size=sym_p->runtime_symbol.size;
	if size < 0 then
		do;
		sfp=new_sfp;
		if sfp=null then
			do;
			sfp=ps.stack_frame_p;
			tp=addrel(l1p,l1p->runtime_symbol.father);
			tbp=ps.ST_block_p;

loop:
			if tbp ^= tp then
				do;
				if ^tbp->runtime_block.quick then sfp=sfp->frame.display;
				tbp=addrel(tbp,tbp->runtime_symbol.father);
				goto loop;
				end;

			end;	/* sfp is symbol's stack_frame_ptr */

		if sym_p -> runtime_symbol.class = "0011"b	/* NOTE: if stu_ interface changes, this must change */
		     then ref_p = stu_$get_implicit_qualifier(tbp,sym_p,sfp,null,null);
		     else ref_p = null;

		size=stu_$decode_runtime_value(size,tbp,sfp,null,null,ref_p,icode);
			/* NB: uses  ST_block (tbp) and Stack_Frame (sfp) of
			   proper block, not necessarily of current block. */
		if icode^=0 then call plio2_signal_$s_r_(psp,"ERROR","s_to_d",239);
		end;

test:
	d="0"b;
	if sym_p->runtime_symbol.flag then goto new_desc;
	old_type=fixed(sym_p->old_symbol,12);
		if old_type>524 then old_type=old_type-6;
		if old_type<519
		&  old_type>16 then old_type=old_type-16;

		substr(d,4,12)=bit(old_type,12);


	if substr(d,1,6) then go to make_string_desc;
	substr(d,19,1)=sym_p->symbol_node.bits.decimal;
	substr(d,20,8)=sym_p->symbol_node.scale;
	substr(d,28,9)=bit(fixed(size,9));
	goto exit;
make_string_desc:
	substr(d,19,18)=bit(fixed(size,18));
	goto exit;
/*  */

new_desc:
	substr(d,1,1)="1"b;
	substr(d,2,6)=sym_p->runtime_symbol.type;	/* no bits need be removed for arrays */
	substr(d,8,1)=sym_p->runtime_symbol.bits.packed;

	data_type = fixed (sym_p -> runtime_symbol.type, 6);

	if data_type >= bit_desc & data_type <= v_char_desc
	then substr(d,13,24)=bit(fixed(size,24));
	else do;
		substr(d,17,8)=sym_p->runtime_symbol.scale;
		if substr(d,17,1) then substr(d,13,4)="1111"b;	/* negative scale */
		substr(d,25,12)=bit(fixed(size,12));
	     end;

exit:
	return(d);

end plio2_sym_to_desc;
