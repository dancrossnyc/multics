/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

	/* Modified: 05/01/78 by PCK to implement unsigned binary	*/

plio2_ldo_:proc(pspp) options(support);
put_value_list_:entry(pspp);

dcl	(pspp,psp,picture_p) ptr;

dcl	based_bit36 bit (36) aligned based;
dcl	based_chars char (1044480) based;
dcl	p_vector (100) ptr based;
	dcl based_bits bit(1000) unal based;
	dcl (code,erno,n_out,i ) fixed bin(15);
	dcl output char(516) unaligned;

	dcl v_output char(516) varying;

	dcl (addr,addrel,fixed,length,substr,unspec) builtin;

	dcl plio2_signal_$s_ ext entry(ptr,char(*),char(*),fixed bin(15));
	dcl plio2_put_util_$put_field_ ext entry(ptr,ptr,fixed bin(15));
	dcl plio2_put_util_$put_prep_ ext entry(ptr);
	dcl dnd$with_strings ext entry(bit(36) aligned,ptr,fixed bin(15));

	dcl plio2_resig_ ext entry(ptr);
	dcl conversion condition;


	dcl based_VL fixed bin(35) based;

	dcl x char(1) aligned;
	dcl 1 descriptive aligned,
		2 type5 aligned,
			3 (cr,bd,ff,ls,pack) char(1) unal,
		2 ( prec,scale,bit_length,type) fixed bin(15);


%include desc_dcls;
%include desc_types;
%include descriptor;
%include picture_image;
%include picture_types;
%include picture_util;
% include plio2_fsb;
% include plio2_ps;
/* 		START   */
	psp=pspp;
	if ps.prep^=0 then call plio2_put_util_$put_prep_(psp);

	ps.vp=ps.value_p;
	ps.descr=ps.descriptor;
	go to common;


err232:
		/* bad descriptor of output item */
	erno=232;
	goto sandr;

string_too_big:
err242:
		/* strings of length >256 not handled */
	erno=242;
	goto sandr;

sandr:	call plio2_signal_$s_(psp,"ERROR","LDO",erno);
	return;

ldo_for_data:entry(pspp);
	psp=pspp;
		/*  desc & ptr have already been moved to ps.vp,ps.descr
		    and put_prep_ has already been called             */



common:
	on conversion call plio2_resig_(psp);

	i=0;
	substr(addr(i)->based_bit36,30,7)=substr(ps.descr,1,7);
	if i<77 then goto standard_types;		/* arithmetic data types 1-12	*/
	if i<83 then goto non_standard_types;		/* address, area, structure data types 13-18	*/
	if i<87 then goto standard_types;		/* string data types 19-22	*/
	if i=87 then goto non_standard_types;		/* file data type 23	*/
						/* unsigned binary and packed decimal data types 33-46	*/
standard_types:

	call dnd$with_strings(ps.descr,addr(descriptive),code);
	if code=1 then goto err232;
	if type5.cr="s" then go to is_string;

	call assign_type_d(ps.descr,psp,picture_p,intype,inscale_prec);

	if ps.descr="0"b
	then do;
		intype = char_desc*2;
		if picture_p->picture_image.type = cplx_fixed_picture
		|  picture_p->picture_image.type = cplx_float_picture
		then inscale_prec = picture_p->picture_image.varlength * 2;	/* a cplx pic's varlength is len of real part only */
		else inscale_prec = picture_p->picture_image.varlength;
	end;

	call assign_(addr(v_output),v_char_desc*2,516,ps.vp,intype,inscale_prec);

	n_out = length(v_output);
	output = v_output;

publish:


	/* put_field will put on the terminal blank
	   or, if it is the last data directed, the semi in due course
	   as "    x=5 "  OR  "     x=5;"    */

	call plio2_put_util_$put_field_(psp,addr(output),n_out);
	return;

is_string:
	if type5.ff="v"  /* varying */ then descriptive.prec=addrel(ps.vp,-1)->based_VL;
	if descriptive.prec > 256 then goto string_too_big;
	if type5.bd="b" then go to bits;
	if ps.fsbp->fsb.switch.print then if ps.job.list then
		do;
		n_out=descriptive.prec;
		substr(output,1,n_out)=substr(ps.vp->based_chars,1,n_out);
		go to publish;
		end;

	substr(output,1,1)="""";
	n_out=2;

	do i=1 to descriptive.prec;
	x=substr(ps.vp->based_chars,i,1);
	if x="""" then
		do;
		substr(output,n_out,1)="""";
		n_out=n_out+1;
		end;
	substr(output,n_out,1)=x;
	n_out=n_out+1;
	end;

	substr(output,n_out,1)="""";
	go to publish;

bits:

	substr(output,1,1)="""";
	do i=1 to descriptive.prec;
	if substr(ps.vp->based_bits,i,1) then x="1";
	else x="0";
	substr(output,i+1,1)=x;
	end;

	n_out=descriptive.prec+3;
	substr(output,n_out-1,2)="""b";
	go to publish;

/*  */

	dcl packed bit(1) aligned;
	dcl b36 bit(36) aligned;
	dcl pt ptr;
	dcl based_ptr ptr based;
	dcl based_packed_ptr ptr unaligned based;
	dcl title5 char(5) aligned;
	dcl title7 char(7) aligned;
	dcl ioa_$rsnnl entry options(variable);

non_standard_types:

	packed=substr(ps.descr,8,1);
	goto nst(i);

nst(77):
	if packed then pt=ps.vp->based_packed_ptr;
	          else pt=ps.vp->based_ptr;

	title7="pointer";
single_ptr:
	call ioa_$rsnnl("^a(^p)",output,n_out,title7,pt);
	goto publish;

nst(78):
	if packed then b36=substr(ps.vp->based_bits,1,36);
	          else b36=ps.vp->based_bit36;
	call ioa_$rsnnl("offset(^w)",output,n_out,b36);
	goto publish;

nst(79):
	title5="label";
	goto double_ptr;

nst(80):
	title5="entry";
	goto double_ptr;

nst(87):
	title5="file ";
	goto double_ptr;

double_ptr:
	call ioa_$rsnnl("^a(^p,^p)",output,n_out,title5,ps.vp->p_vector(1),ps.vp->p_vector(2));
	goto publish;

nst(82):
	title7="area at";
	goto single_ptr;

nst(81):
	substr(output,1,9)="structure";
	n_out=9;
	goto publish;

end plio2_ldo_;
