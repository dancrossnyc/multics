/****^  ******************************************************
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287), audit(86-07-16,Mabey),
     install(86-07-28,MR12.0-1105):
     Change by M Mabey (installed by Ginter) to report an error if an argument
     is supplied or if used as an active function.
                                                   END HISTORY COMMENTS */


display_pl1io_error: dpe:
     procedure ();

/* Modified 850515 by MM to report an error if an argument is supplied or   */
/*	if used as an active function.			      */
/* Modified 770829 by PG for read/write to stream files */

/* automatic */

dcl  bad_job bit (36);
dcl (psp, fsbp) ptr;
dcl (i, j) fixed bin (15);
dcl arg_count fixed bin;
dcl code fixed bin (35);

dcl  vs char (128) varying;
dcl  attribute_conflict bit (1) aligned;
dcl  bad_code bit (1) aligned;
dcl  pseudo_file bit (1) aligned;
dcl  file_name_string char (40) varying;

/* builtins */

dcl (null, substr, length, string) builtin;

/* entries */

dcl  ioa_ entry external options (variable);
dcl  ioa_$nnl entry external options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  error_table_$too_many_args fixed bin(35) ext static;

/* internal static */

dcl  ME char (20) init ("display_pl1io_error") int static options (constant);
dcl  test_conflicts (20) bit (20) internal static init (

/* .  zzvopiousnrsdixxskne   */
/* .  ooeprnuptoeeinxxtemn   */
/* .  ttreiptdrkcqrtxxvylv   */
/* .    snnupamerueexxaes      */
/* .    2 tttt ydecr  ldt      */
     "00000001001110001100"b,				/* data	*/
     "00000001001110001100"b,				/* edit	*/
     "00000001001110001100"b,				/* list	*/
     "00000011001111001100"b,				/* get	*/
     "00000101001110001100"b,				/* put	*/
     "00000101001110001100"b,				/* page	*/
     "00000001001110001100"b,				/* line	*/
     "00000001001110001100"b,				/* skip	*/
     "00001010000001000000"b,				/* read	*/
     "00000100000000000000"b,				/* write	*/
     "00001110100001000000"b,				/* rewrite	*/
     "00001110100001000000"b,				/* delete	*/
     "00001101100001000000"b,				/* locate	*/
     "00001000110001000000"b,				/* key	*/
     "00001010110011000000"b,				/* keyto	*/
     "00001100110001000000"b,				/* keyfrom	*/
     "00001010100001000000"b,				/* set	*/
     "00001010000001000000"b,				/* into	*/
     "00001010100011000000"b,				/* ignore	*/
     "00000100000000000000"b);			/* from	*/

dcl  switch_word (36) char (15) varying static internal
     init ("zot1 ", "zot2 ", "version2 ",
     "open ", "print ", "input ",
     "output ", "update ", "stream ",
     "notkeyed ", "record ", "sequential ",
     "direct ", "interactive ", "not_used_pos15 ",
     "not_used_pos16 ", "stringvalue ", "keyed ",
     "namelist ", "environment ", "end_of_file ",
     "transmit_error ", "buffer_in_use ", "copy ",
     "detach ", "te_hold ", "prelim_eof ",
     "internal ", "threaded ", "fsb_in_use ",
     "not_used_pos31 ", "emptyline ", "iox_close ",
     "not_used_pos34 ", "not_used_pos35 ", "not_used_pos36 ");

dcl  nono_word (18) char (12) varying static internal
     init ("lock ", "unlock ", "read ",
     "write ", "rewrite ", "delete ",
     "locate ", "key ", "keyto ",
     "keyfrom ", "set ", "into ",
     "ignore ", "from ", "nofrom ",
     "nokey ", "nokeyfrom ", "nolock");

dcl  bad_job_word (20) char (12) varying static internal
     init (
     "data ", "edit ", "list ",
     "get ", "put ", "page ",
     "line ", "skip ",
     "read ", "write ", "rewrite ",
     "delete ", "locate ", "key ",
     "keyto ", "keyfrom ", "set ",
     "into ", "ignore ", "from ");

dcl  switch_nonos (5:18) bit (14) internal static init (

/* .  piousnrsdixxsk   */
/* .  rnuptoeeinxxte   */
/* .  iptdrkcqrtxxvy   */
/* .  nupamerueexxae   */
/* .  tttt ydecr  ld   */
     ""b,						/* print		*/
     "1"b,					/* input		*/
     "01"b,					/* output		*/
     "011"b,					/* update		*/
     "0001"b,					/* stream		*/
     "00000"b,					/* notkeyed	*/
     "100010"b,					/* record		*/
     "0000100"b,					/* sequential	*/
     "00001101"b,					/* direct		*/
     "010100101"b,					/* interactive	*/
     "0000000000"b,					/* notused	*/
     "00000000000"b,				/* notused	*/
     "000010000100"b,				/* stringvalue	*/
     "0000110001000"b);				/* keyed		*/

/* include files */

%include plio2_fsb;
%include plio2_ps;

/* program */

	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;
	if arg_count ^= 0 then do;
	     call com_err_ (error_table_$too_many_args, ME, "No arguments are permitted.");
	     return;
	end;

	fsbp = plio2_data_$badfsbp;
	bad_job = plio2_data_$badjob;
	if fsbp = null
	then do;
	     call ioa_ ("^/There was no error raised during PL/I i/o in this process.");
	     return;
	end;

	pseudo_file = substr (bad_job, 2, 1);		/* string option bit	*/

	if pseudo_file
	then file_name_string = "^/Error on string option pseudo-file ";
	else file_name_string = "^/Error on file ^a";

	call ioa_$nnl (file_name_string, fsb.filename);

	bad_job = substr (bad_job, 4, 8)||substr (bad_job, 16, 12)|| (16)"0"b;

	if fsb.lnzc > 0 & ^fsb.switch.stream
	then call show_code;			/* stream errors are not generally associated with a system error */
	else call ioa_ ("");			/* because ioa_$nnl was used, we need a trailing new_line	*/

	call show_fsb;
	if plio2_data_$undef_file_sw
	then do;
	     attribute_conflict = "0"b;
	     call ioa_$nnl ("Error in opening or closing ^a", fsb.filename);
	     call show_badfile;
	     if ^attribute_conflict
	     then do;
		bad_code = "0"b;
		if fsb.switch.stream
		then call show_code;
		if ^bad_code then call ioa_ ("");	/* insert the final trailing new-line */
	     end;
	end;
	else do;
	     call show_job;
	     call show_conflicts;
	end;
	return;

show_fsb:	proc;
	     if fsb.filename ^= """get_string_option"""
	     & fsb.filename ^= """put_string_option"""
	     then call ioa_ ("Title: ^a", fsb.path_name);
	     vs = "Attributes: ";
	     call print_attributes ((string (fsb.switch)));

	     if substr (fsb.declared_attributes (1), 4, 33)
	     then if ^pseudo_file			/* fake fsb's do not have a valid decl_attrs field */
		then do;
		     vs = "Permanent attributes: ";
		     call print_attributes (fsb.declared_attributes (1));
		end;
	     return;
	end show_fsb;


show_job:	proc;
	     if bad_job = "0"b
	     then call ioa_ ("No i/o job found.");
	     else do;
		vs = "Last i/o operation attempted: ";
		do i = 1 to 20;
		     if substr (string (bad_job), i, 1) then vs = vs||bad_job_word (i);
		     if length (vs)>65 then call print_vs;
		end;
		if length (vs) ^= 0 then call print_vs;
	     end;
	     return;
	end show_job;

print_vs:	proc;
	     call ioa_ ("^a", vs);
	     vs = "";
	end print_vs;


print_attributes: proc (bit_str);
dcl  bit_str bit (36) aligned;
	     do i = 4 to 14, 16 to 20, 24, 28;
		if substr (string (bit_str), i, 1) then vs = vs||switch_word (i);
		if length (vs)>65 then call print_vs;
	     end;
	     if length (vs) ^= 0 then call print_vs;
	end print_attributes;

show_code: proc;
dcl  c1 char (8) aligned;
dcl  c2 char (100) aligned;
dcl  c3 char (100) varying;
	     call convert_status_code_ ((fsb.lnzc), c1, c2);
	     c3 = c2;
	     if length (c3)>0
	     then do;
		call ioa_ (", status code: ^a", c3);
		bad_code = "1"b;
	     end;
	end show_code;


show_conflicts: proc;
	     do i = 1 to 20;
		if substr (bad_job, i, 1) then do;
		     if string (fsb.switch)&test_conflicts (i) then do;
			vs = "Attempted """||bad_job_word (i)||""" operation conflicts with";
			call print_vs;
			do j = 1 to 20;
			     if substr (string (fsb.switch), j, 1)&substr (test_conflicts (i), j, 1) then do;
				vs = "	file """||switch_word (j)||""" attribute.";
				j = 20;
			     end;
			end;
		     end;
		     if vs ^= "" then call print_vs;
		end;
	     end;
	end show_conflicts;


show_badfile: proc;
	     do i = 5 to 18;
		if substr (string (fsb.switch), i, 1)
		then do j = 5 to 18;
		     if substr (switch_nonos (i), j-4, 1) & substr (string (fsb.switch), j, 1)
		     then do;
			if ^attribute_conflict then call ioa_ (""); /* give trailing NL to last line */
			call ioa_ ("The ^a attribute conflicts with the ^a attribute.",
			     switch_word (i), switch_word (j));
			attribute_conflict = "1"b;
		     end;
		end;
	     end;
	     return;
	end show_badfile;


     end						/* display_pl1io_error */;
