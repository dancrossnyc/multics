/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* written 05.30.73 by A. Downing to suport put data; */
/* modified 04.04.78 by R. Barnes to more properly decide when to call stu_$get_implicit_qualifier */
/*	Modified: 05/01/78 by PCK to implement unsigned binary	*/
put_data_var_all_: proc (duplication, n, vp, bounds_p, psp) options(support);
dcl (link_p, text_p, ref_p) ptr init (null ());
dcl 1 bounds (128) based (bounds_p),
    2 lower fixed bin,
    2 upper fixed bin;
dcl  ss_list (0:128) int static fixed bin (26);
dcl  ssl (128) fixed bin (26) based (sslp),
     sslp ptr;

   dcl 1 val_struct based,
	2 flag bit(2) unal,
	2 type bit(4) unal,
	2 rest bit(30) unal;

dcl  duplication fixed bin,				/* number of duplicate variable declarations encountered */
    (vp, bounds_p, var_ptr) ptr,
   p ptr,
     search_ptr ptr,				/* used in searching through duplication chains */
     psp ptr,					/* points at the sp */
     duplication_list (1000) bit (18) int static,		/* holds the offset of the duplicated variable actually (put) */
     more bit (1),
    (item_type,i, j, k, l, n, father_n, own_dims) fixed bin (26),
     com_err_ ext entry options (variable),
     plio2_signal_$s_r_ ext entry (ptr, char (*), char (*), fixed bin (15)),
     stu_$decode_runtime_value ext entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr, fixed bin (26)) returns (fixed bin),
     stu_$get_implicit_qualifier ext entry (ptr,ptr,ptr,ptr,ptr) returns(ptr),
     stu_$get_runtime_address ext entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr),
     plio2_pdt_ ext entry (ptr),
    (addrel,addr, fixed, convert, null,rel,bit) builtin;

%include runtime_symbol;
%include plio2_ps;

	var_ptr = vp;
	ps.ss_list_p = addr (ss_list);
	sslp = addr (ss_list (n+1));
	father_n = n;
top:	
	n = fixed (var_ptr -> runtime_symbol.ndims, 6);
	ss_list (0) = n;
	own_dims = n - father_n;
	search_ptr = addrel (var_ptr, var_ptr -> runtime_symbol.name);
	search_ptr = addrel (search_ptr, -1);
	search_ptr = addrel (search_ptr, search_ptr -> runtime_token.dcl);
	if search_ptr -> runtime_symbol.address.next ^= (14)"0"b then do;
	     if fixed (var_ptr -> runtime_symbol.level, 6) < 2 then do;
		do i = 1 to duplication;
		     if rel (search_ptr) = duplication_list (i) then go to found;
		end;				/* end of i loop */
		duplication = duplication + 1;
		duplication_list (duplication) =
		rel (search_ptr);
	     end;					/* end of looking at and adding to duplication_list */
	end;					/* end of do group */
	do l = father_n + 1 to n;
	     if var_ptr -> runtime_symbol.bounds (l).lower >= 0 then
	     bounds_p -> bounds (l).lower = var_ptr -> runtime_symbol.bounds (l).lower;
	     else do;

		if ref_p = null & var_ptr -> runtime_symbol.class = "0011"b
		then ref_p = stu_$get_implicit_qualifier(ps.ST_block_p,var_ptr,ps.stack_frame_p,
						  link_p,text_p);
		else;

		bounds_p -> bounds (l).lower =
		stu_$decode_runtime_value (var_ptr -> runtime_symbol.bounds (l).lower, ps.ST_block_p, ps.stack_frame_p, null,
		null, ref_p, i);
		if i ^= 0 then go to bounds_error;
	     end;
	     if var_ptr -> runtime_symbol.bounds (l).upper >= 0 then
	     bounds_p -> bounds (l).upper = var_ptr -> runtime_symbol.bounds (l).upper;
	     else do;

		if ref_p = null & var_ptr -> runtime_symbol.class = "0011"b
		then ref_p = stu_$get_implicit_qualifier(ps.ST_block_p,var_ptr,ps.stack_frame_p,
						  link_p,text_p);
		else;

		bounds_p -> bounds (l).upper = stu_$decode_runtime_value
		(var_ptr -> runtime_symbol.bounds (l).upper,ps.ST_block_p,ps.stack_frame_p,null,null,ref_p,i);
		if i ^= 0 then go to bounds_error;
	     end;
	end;					/* end of filling in lower and upper bounds */
	if var_ptr -> runtime_symbol.son ^= (18)"0"b then do;
	     if n = father_n then
	     call put_data_var_all_ (duplication, n, addrel (var_ptr, var_ptr -> runtime_symbol.son), bounds_p, psp);
	     else do;				/* we have arrayness at this level */
		do l = father_n + 1 to n -1;
		     ss_list (l) = bounds_p -> bounds (l).lower;
		end;
		more = "1"b;
		do while (more);
		     do i = bounds_p -> bounds (n).lower to
			bounds_p -> bounds (n).upper;
			ss_list (n) = i;
			call put_data_var_all_ (duplication, n, addrel (var_ptr, var_ptr -> runtime_symbol.son), bounds_p, psp);
		     end;				/* end of do i */
		     j = n -1;
		     do while (j > father_n & ss_list (j)+1 > bounds_p ->
			bounds (j).upper);
			j = j - 1;
		     end;
		     if j > father_n then do;
			ss_list (j) = ss_list (j) + 1;
			do i = j + 1 to n - 1;
			     ss_list (i) = bounds_p -> bounds (i).lower;
			end;			/* end of i loop */
		     end;
		     else more = "0"b;
		end;				/* end of outer while */
	     end;					/* end of having subscripts at this level */
	end;					/* end of having a son pointer */
	else do;					/* we are at the end of a branch */
		item_type=fixed(var_ptr->runtime_symbol.type,6);

		if (item_type>23 & item_type<33) | (item_type>46 & item_type<63)
		then go to found;	/* skip this item */

	     k = fixed (rel (var_ptr), 18) - fixed (rel (ps.ST_top_p), 18);
	     ps.offset = bit (fixed (k, 18), 18);
	     if own_dims = 0 then call put;
	     else do;				/* its an array */
		do i = 1 to own_dims;
		     ssl (i) = bounds_p -> bounds (i + father_n).lower;
		end;
		more = "1"b;
		do while (more);
		     do i = bounds_p -> bounds (n).lower to
			bounds_p -> bounds (n).upper;
			ssl (own_dims) = i;
			call put;
		     end;				/* end of i loop */
		     j = own_dims -1;
		     do while (j > 0 &ssl (j) +1 > bounds_p -> bounds (j + father_n).upper);
			j = j -1;
		     end;				/* end of do while */
		     if j > 0 then do;
			ssl (j) = ssl (j) + 1;
			do k = j+1 to own_dims - 1;
			     ssl (k) = bounds_p -> bounds (k + father_n).lower;
			end;
		     end;				/* end of do group */
		     else more = "0"b;
		end;				/* end of outer do while */
	     end;					/* end of its an array */
	end;					/* end of handling a terminal element */
found:	
	n = father_n;				/* reset n */
	ss_list (0) = n;
	if var_ptr -> runtime_symbol.brother ^= (18)"0"b then
	do;
	     var_ptr = addrel (var_ptr, var_ptr -> runtime_symbol.brother);
	     go to top;
	end;
	return;

/* 



*/
put:	proc;
	     ps.value_p = stu_$get_runtime_address
	     (ps.ST_block_p, var_ptr, ps.stack_frame_p, link_p, text_p, ref_p, addr (ss_list (1)));
	     if ps.value_p = null () then do;
		call com_err_
		(0, "put_data_var_all_", "Can not get runtime address for symbol table offset ^o", fixed (ps.offset, 18));
		go to found;
	     end;

		if item_type^=20 
		     then if item_type^=22
			then goto non_varying;
		ps.value_p=addrel(ps.value_p,1);

		/* plio2_pdt_ needs the address of varying strings as for parameter passing */

non_varying:
	     call plio2_pdt_ (psp);

	     return;
	end put;

bounds_error:
	call com_err_
	(i, "put_data_var_all_", "Cannot decode runtime bounds for symbol table offset ^d", fixed (ps.offset, 18));
	call plio2_signal_$s_r_ (psp, "ERROR", "put_data_var_all_", 239);
	go to found;
     end put_data_var_all_;
