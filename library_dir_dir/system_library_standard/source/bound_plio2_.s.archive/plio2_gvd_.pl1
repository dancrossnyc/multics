%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_gvd_:
gvd_:gvd:
get_value_data_:proc(pspp) options(support);


/* updated 9-13-72 */
	/* 9-13-72: conforming to AG94 */



	dcl ( erno init(999), ignore,tsub,num_sw,sign,
	     bnc,blc,oi,ns_len,vs_len,first_non_space) fixed bin(15);
	dcl ( pspp,psp,bp) ptr;

	dcl 1 ldi aligned,
		2 l fixed bin(15),
		2 chars char(256) aligned,
		2( name_l,isub,sub(128)) fixed bin(15);

	dcl condition_name char(5);
	dcl value_saved char(256) aligned;
	dcl name_saved char(256) aligned;	/* needed since ldi.chars is
				   overwritten in the call to
				   get_field_list.   */



	dcl based_int fixed bin (35) based;
	dcl 1 fakeint aligned based(addr(xint)),
		2 aaa char(3) unaligned,
		2 xchar char(1) unaligned;
	dcl xint init(0) fixed bin(15);
	dcl x char(1) aligned;
	dcl (iaction,istate,itype,iactstate,strlen) fixed bin(15);
	dcl fake_arg bit(1) unaligned based;


	dcl plio2_gdt_$get_data_temp_ ext entry(ptr);
	dcl plio2_get_util_$get_field_data_ ext entry(ptr);
	dcl plio2_get_util_$get_field_list_ ext entry(ptr);
	dcl plio2_get_util_$get_prep_ ext entry(ptr);
	dcl plio2_get_util_$get_terminate_ ext entry(ptr);
	dcl plio2_ldi_ ext entry(ptr);
	dcl plio2_signal_$s_l_ ext entry(ptr,char(*),char(*),fixed bin(15),char(*),fixed bin(15),fixed bin(15),fixed bin(15));
	dcl plio2_signal_$s_ ext entry(ptr,char(*),char(*),fixed bin(15));
	dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));

dcl ( addr,divide,min,mod,null,substr ) builtin;

% include plio2_ps;






/*  	CODE STARTS  */

	psp=pspp;
	ps.auxp=addr(ldi);
	/* there is no need to call GET_PREP
	   for GVD is called from GET_PREP after prep work is done */
	ps.switch.semi_sep="0"b;
loop:
	if ps.switch.semi_sep then go to exit;
	call plio2_get_util_$get_field_data_(psp);
	if ldi.l>256 then goto err143;
	name_saved=ldi.chars;
	ns_len=ldi.l;

	if substr(ldi.chars,ldi.l,1)=";" then goto exit;
	if ldi.l=0 then goto loop;

get_datum:
	call plio2_get_util_$get_field_list_(psp);
	if ldi.l=0 then goto loop;
	value_saved=ldi.chars;
	vs_len=ldi.l;
	first_non_space=ldi.name_l;
	if substr(value_saved,first_non_space,1)=";" then goto exit;


	ldi.chars=name_saved;
	ldi.l=ns_len;

	goto id_parse;
OK:
	call plio2_gdt_$get_data_temp_(psp);
	if ps.vp=null then
		do;
		addr(erno)->based_int=addr(ps.descr)->based_int;
		erno=erno+63;	/* yields 135-140: see plio2_gdt_  */
		go to NG_1;
		end;


	ldi.l,vs_len=vs_len+1-first_non_space;
	ldi.chars=substr(value_saved,first_non_space,vs_len);

	call plio2_ldi_(psp);
	go to loop;

/*  */
NG:
	erno=istate+125;
		/*   (...) appears illegally in datum identifier:

			126:misc		127:numeric	128:sign
			129:comma		130:equal		131:parens
			132:dollar-or-_	133:dot		134:alphabetic
		*/
NG_1:
	vs_len=min(vs_len,256-ns_len);
	name_saved=substr(name_saved,1,ns_len)
	         ||substr(value_saved,1,vs_len);
	ns_len=ns_len+vs_len;
	if ps.job.string then condition_name="ERROR";
	else condition_name="NAME";
	call plio2_signal_$s_l_(psp,condition_name,"get_data",erno,
			substr(name_saved,1,ns_len),1,ns_len,0);

		do;
		ps.switch.transmit_error="0"b;
		goto loop;
		end;

	goto loop;

err123:
		/* problem in scan of datum identifier */
	erno=123;
	goto sandr;

err124:
	erno=124;
	goto sandr;	/* more than 128 subscripts */

err143:
			/* identifier longer than 256 */
	erno=143;
	goto sandr;


sandr:
	call plio2_signal_$s_r_(psp,"ERROR","get_data",erno);



exit:
	/* there is no need to call GET_TERMINATE for
	   GVD is called from GET_PREP from GET_TERMINATE itself ! !  */
	return;
/*   */
dcl data_char_class(0:127) fixed bin(9) internal static init(
		(9)10,	/* 000...010 */
		(2)11,	/* TAB,NL */
		(3)11,	/* VTAB, NPAGE, CRETURN */
		(18)10,	/* 016 ... 037 */
		11,	/* BLANK */
		10,	/* 041 */
		10,	/* QUOTE */
		10,	/* 043 */
		1,	/* DOLLAR */
		(3)10,	/* 045 ... 047 */
		6,7,	/* OPEN_PAR, CLOSE_PAR */
		10,	/* 052 */
		4,5,4,9,	/* PLUS, COMMA, MINUS, DOT */
		10,	/* 057 */
		(2)3,	/* ZERO, ONE */
		(8)3,	/* TWO, THREE, . . . NINE */
		10,	/* 072 */
		10,	/* SEMI */
		10,	/* 074 */
		8,	/* EQUAL */
		(3)10,	/* 076 ... 080 */
		(26)2,	/*  CAPS */
		(4)10,	/* 133 ... 136 */
		1,	/* UNDERSCORE */
		10,	/* 140 */
		(26)2,	/* LOWER CASE */
		(5)10	/* 173 ... 177 */
					);

/*	dollar,underscore	1
	letters		2
	numerals		3
	plus/minus	4
	comma		5
	open paren	6
	close paren	7
	equal sign	8
	dot		9
	junk		10
	ignorable		11 */


/*	field has NOT had leading  and intervening blank, tab, newpage, and newline
	characters removed by get_util_$get_field_data_.
	field terminates with the first equalsign or semicolon after the first character   */



	dcl data_mat(5,10) fixed bin(9) static internal init(
/* STATE		  $_   ALPH NUM  SIGN CMMA OPEN CLOZ EQU  DOT  JUNK*/
/* 1-prep */	  37,  12,  32,  33,  34,  36,  36,  35,  38,  31,
/* 2-name  */	  12,  12,  12,  33,  34,  23,  36,  00,  11,  31,
/* 3- presubscr */	  37,  39,  64,  64,  34,  36,  36,  35,  38,  31,
/* 4-subscr */	  37,  39,  74,  33,  83,  36,  85,  35,  38,  31,
/* 5- endlist */	  37,  39,  32,  33,  34,  36,  36,  00,  11,  31); 

/*
		(   ACTION    ,     new STATE      )


	actions:


	0	OK
	1	move
	2 	get
	3	NG
	6	set sign for ss
	7	set ss digit
	8	store ss
*/
/*  */
id_parse:
	istate=1;
	bnc=1;
	blc=ldi.l;
	ldi.isub=0;

	oi=0;
	go to action(2);

action(0):
	ldi.name_l=oi;	/* index of last character of name */
	go to OK;

action(1):
	/* ldi.chars already contains the identifier ("as.you.like.it(1,2,-3)=")
	   left adjusted.   */

	oi=oi+1;
	substr(ldi.chars,oi,1)=x;


action(2):
GET:
	if bnc>blc then goto err123;
	x=substr(ldi.chars,bnc,1);
	bnc=bnc+1;
	xchar=x;
	if xint>127 then
		do;
		itype=10;
		go to re_act;
		end;
	itype=data_char_class(xint);
	if itype=11 then goto GET;	/* ignore blanks and so on. */
re_act:
	iactstate=data_mat(istate,itype);
	istate=mod(iactstate,10);
	iaction=divide(iactstate,10,15,0);
transfer:
	go to action(iaction);

action(3):
	go to NG;

action(6):
	if x="-" then sign=1;
	else sign=0;

	tsub=0;
	if itype=4 then
		do;		/* sign */
		num_sw=0;
		goto GET;
		end;
	num_sw=1;			/* a number has appeared in the current subscript */

action(7):
	num_sw=1;
	tsub=10*tsub+xint -48;
	go to GET;

action(8):
	if num_sw=0 then
		do;		/* bad subscript consisting of a sign only */
		istate=itype-1;
		goto NG;
		end;
	if sign=1 then tsub=-tsub;
	isub=isub+1;
	if isub>128 then goto err124;
	ldi.sub(ldi.isub)=tsub;
	go to GET;


end plio2_gvd_;
