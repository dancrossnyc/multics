/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_get_util_:proc options(support);

/* updated 73-12-6  */
	/* 76-09-08: changed to use iox_$get_line call forwarder	*/
	/* 73-12-6: updated to replace ios_ with iox_ */

	/* 73-10-25:
		changed to comply with BASIS.
		Check how our guesses are when BASIS/1-12 comes out.
	*/
	/* 9-13-72: AG94 redefines the scanning for list
		and data-directed fields.  We implement these
		changes here.  */


	/* 7-26-71: brought SKIP and COLUMN into the fold by
		adding them to the table-driven department.

		made eob = blc for a one-level rather than a two-level
		scanning strategy.     */

	/* 5-20-71: fixed get_prep to call get_value_data when appropriate.
		there will thus only have to be the one call to terminate. */

	/* 5-18-71: fixed get_edit so that it does not count
	            or transmit NL characters.  */


/*
	This is the only procedure in the stream-directed input package
	which actually touches the input stream itself, hence does actual
	reads.
					*/


dcl (addr, addrel, divide, index, mod, null, string, substr) builtin;
dcl  based_int fixed bin (35) based;
dcl  p_vector (100) ptr based;
	dcl ( off_end_sw init(0),return_sw ,i,erno,gcn,gsn,
	      lout,gsi,count ) fixed bin(15);

	dcl (psp,pspp,fsbp) ptr;

	dcl condition char(10) init("ERROR");
	dcl ermsg char(9) init("plio2_get_util_");

	dcl ( ctl_char$np,ctl_char$nl,ctl_char$ht ) char(1) aligned external static;

	dcl x char(1) aligned;
	dcl 1 fakeinteger aligned based(addr(xint)),
		2 xx char(3) unaligned,
		2 intchar char(1) unaligned;
	dcl xint fixed bin(15) init(0);

	dcl ( iaction,iactstate,istate,itype,last_space) fixed bin(15);


	dcl 1 getfab2 aligned internal static,
		2 gfs bit(36) init("001001001"b),
		2 gfn char(32) init(""),
		2 ( gfbs,gfls,gfps) fixed bin(15) init(0);

	dcl 1 gu_data aligned based(ps.auxp),
		2 ii fixed bin(15),
		2 char256al char(256) aligned,
		2 first_non_space fixed bin(15);

	dcl plio2_get_util_$get_prep_ ext entry(ptr);
	dcl iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
	dcl plio2_open_$open_implicit_ ext entry(ptr);
	dcl put_copy_ ext entry(ptr,fixed bin(21));
	dcl plio2_gvd_ ext entry(ptr);
	dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));
	dcl ioa_ ext entry options(variable);

dcl iocb_p ptr;
dcl iocb_status fixed bin(35);
dcl error_table_$short_record fixed bin(35) external;
dcl error_table_$long_record fixed bin(35) external;
% include plio2_fsb;
% include plio2_ps;
% include iocb;




/*    	GET FIELD and SPACING ENTRIES */
get_field_data_:entry(pspp);
	/* will signal EOF unless field of length >0 of the form:
	   [<space>]...[<something>] {;|=}
	   is scanned.  MAY RETURN SHORT FIELD: {;|=}
	   leading <space>s are NOT returned
	   no <newline> characters are returned.
	   For the sake of "onfield" included <space>s are left, so
	   a field of the form:
	     "a(3, 5).          b(88  ,  99 )   ="
	   is possible.
	*/

	istate=2;
field_prep:
	psp=pspp;
	fsbp=ps.fsbp;
	lout=0;
	go to get_next_char;




get_field_edit_:entry(pspp);
	return_sw=1;
edit_set_up:
	psp=pspp;
	istate=1;
	count=ii;
	if count>256 then goto err149;
	go to field_prep;




get_field_list_:entry(pspp);
	/* will signal EOF or ERROR.
	   lout=0 returned to indicate [<space>]... {EOF | ,}
	   leading <space>s are required for "onfield", so
	   all <space>s except <newline>s (which are removed)
	   are left in place.  Thus, for example, a character representation
	   may not contain a <newline> (usefully, anyhow), for a <newline>
	   will not be returned.

	   Sets  first_non_space  for ease of scanning.
	*/
	istate=4;
	last_space=0;
	go to field_prep;




get_x_format_:entry(pspp);
	return_sw=0;
	go to edit_set_up;


get_skip_:entry(pspp);
	psp=pspp;
	gsn=ii;
	gsi=2;	/* return*/
	fsbp=ps.fsbp;
	go to do_skip;


get_column_:entry(pspp);
	psp=pspp;
	gcn=ii-1;		/* we shall skip to and over the column
			   preceding the named column so that the 
			   NEXT get will be from the numbered column */
	if gcn<0 then gcn=0;
	fsbp=ps.fsbp;
	go to do_column;



/* ******************************** */

return_field:
	ii=lout;
	first_non_space=last_space+1;

check_transmission_error:
	if fsb.switch.transmit_error then go to set_trans_error;
	if fsb.switch.te_hold then
		do;
		fsb.switch.te_hold="0"b;
set_trans_error:
		ps.switch.transmit_error="1"b;
		end;

place(2):
gc_exit:
	return;

/*   	plio2_get_util_ character class table  */

	dcl gu_cc(0:61) fixed bin(3) internal static init(
	(9)0,	/* 000 ... 010 */
	3,4,	/* TAB,NL  */
	0,4,(19)0,	/* 013, NP, 015 ... 037 */
	2,0,7,	/* BLANK, 041, QUOTE  */
	(9)0,	/* 043 ... 053  */
	1,	/* COMMA */
	(14)0,	/* 055 ... 072 */
	5,0,6);	/* SEMI, 074 , EQUAL  */

/* ACTIONS and STATES - look O.K. 12-21-70 */

	dcl gu_matrix(9,0:8) fixed bin(9) static internal init(

/* STATE		OTHER COMMA BLANK   TAB  NPNL  SEMI EQUAL QUOTE OFFEND */
/*		    0     1     2     3     4     5     6     7     8  */

/* 1-edit */	   61,   61,   61,   61,   11,   61,   61,   61,   51,
/* 2-data prep */	   23,   12,   12,   12,   12,   32,   32,   23,   52,
/* 3-data loop */	   23,   23,   23,   23,   13,   33,   33,   23,   53,

/* 4-list prep */	   29,   44,   24,   24,   14,   74,   29,   25,   54,
/* 5-list odd  quote*/ 25,   25,   25,   25,   25,   25,   25,   26,   55,
/* 6-list even quote */29,   76,   76,   76,   76,   76,   29,   25,   76,
/* 7-skip */			(8)87,57,
/* 8-column */			(8)98,58,
/* 9-unquoted */	   29,   76,   76,   76,   76,   76,   29,   29,   79);

/*   (action code, next state code )	*/


/* actions:
	1-get		2-move		3-move,exit
	4-list's comma	5-off the end	6-count for edit		
	7-eo_list		8-skip		9-column		*/

action(3):
		/* returns terminating EQ or SEMI
		   that character must be re-scanned and then
		   removed in the calling program  */
	lout=lout+1;
	if lout<257 then substr(char256al,lout,1)=x;
	go to return_field;

action(4):
			/* list-prep sees [<space>]...{EOF|,}  */
	lout=0;
	if fsb.lsep=1 | ^ps.job.list then goto return_field;	/* this is a second comma */
	fsb.lsep=1;	/* this is a first comma - mark it */
	go to get_next_char;
			/* lout=0 insures that the comma will not be passed
			   since there is nothing to move, "get next character"  */


action(5):
	/* off-end may be either ENDFILE or ERROR depending
	   on file/string
	   and on stoppage DURING meaningful scan or before (or after)
	   meaningful scan.  BASIS is unclear about purposes, but
	   generally says that EOF or EOS before the <space>s have
	   been scanned leads to EOF, but in the midst of a scan leads
	   to ERROR.  */

	if istate=2 then condition="ENDFILE";
	if istate=4 then if lout=0 then condition="ENDFILE";
				else goto action(4);
	if istate=1 then if lout=0 then condition="ENDFILE";

	goto err162;

action(6):
	/* count for edit and get_x_format_ */
	lout=lout+1;
	if return_sw^=0 then substr(char256al,lout,1)=x;
	if lout=count then  go to check_transmission_error;
	go to action(1);

action(7):
	/* we seem to have found an <input delimiter>  */
	if itype=8 /* off-end */
	then goto return_field;

	if x=";" then if ps.job.list then
		do;
		istate=9;
		goto action(2);
		end;
	else if istate=4 then lout=0;

	fsb.lsep=index(", 	"||"
;",x);
	if x=";" then
		ps.switch.semi_sep="1"b;
	go to return_field;

/*   */
err149:
		/* will not extract field of length over 256 */
	erno=149;
	goto sandr;

err162:
		/* string of string-option too short */
	if ^ps.job.string then goto err163;
	erno=162;
	goto sandr;

err163:
		/* EOF while scanning */
	erno=163;
	goto signal_endfile;

/*
err164:
		/* EOF already encountered 
	erno=164;
	goto signal_endfile;
*/

err165:
		/* get requires   input,stream  */
	erno=165;
	goto sandr;

err166:
		/* target of COLUMN lies inside a TAB */
	erno=166;
	goto sandr;

signal_endfile:
	condition="endfile";
	goto sandr;

sandr:
	if ps.job.string then condition="ERROR";

	call plio2_signal_$s_r_(psp,condition,ermsg,erno);
	/* signals and causes abnormal return */

/*  */
move:
action(2):		/*  <newline> is never made part of the string to be returned   */
	if x=ctl_char$nl then goto get_next_char;

	lout=lout+1;
	if istate=4 then last_space=lout;
	if lout>256 then go to return_field;
	substr(char256al,lout,1)=x;

get_next_char:
action(1):
	if bnc>blc then
		do;
get_replenish:
		bnc=1;	/* we will attempt to fill up the buffer
			   and we start at position 1		*/
		if ps.job.copy then
			do;
			call put_copy_(psp,fsb.blc);
			ps.start_copy=1;
			end;

		if ps.job.string then goto string_is_empty;
		if fsb.switch.not_used_4 then goto file_at_eof; 	/* OLD EOF FLAG */
		if fsb.switch.transmit_error then
			do;
			fsb.switch.transmit_error="0"b;
			fsb.switch.te_hold="1"b;
			end;

		iocb_p=fsb.iocb_p;
		call iox_$get_line(iocb_p,fsb.bptr,fsb.bsize,fsb.blc,iocb_status);
		if iocb_status ^=0 then
			do;
			if iocb_status=error_table_$long_record then;  else
			if iocb_status=error_table_$short_record  then;  else
			fsb.transmit_error = "1"b;
			end;

		if fsb.blc^=0 then go to buffer_replenished;
file_at_eof:
		fsb.switch.not_used_4="1"b;		/* EOF ACTION */
string_is_empty:
		off_end_sw=1;
buffer_replenished:
		if off_end_sw^=0 then
			do;
			itype=8;
			go to re_act;
			end;
		end;

	x=substr(xbuf,bnc,1);
	bnc=bnc+1;

	if x=ctl_char$nl then
			/* new line character . . .   */
		do;
		kol=0;
		go to get_itype;
		end;

	if x=ctl_char$ht then
			/* horizontal tab character */
		do;
		kol=10+10*(divide(kol,10,15,0));
		go to get_itype;
		end;

	if x=ctl_char$np then goto get_itype;
			/* new page character  */

	kol=kol+1;

get_itype:
	intchar=x;
	if xint>61 then itype=0;	/* other */
	else itype=gu_cc(xint);

re_act:
	iactstate=gu_matrix(istate,itype);
	iaction=divide(iactstate,10,15,0);
	istate=mod(iactstate,10);
	go to action(iaction);


/*  */
/*  CODE for SKIP and COLUMN  */




do_column:
	if kol=gcn then go to gc_exit;
	if kol > gcn then
		do;
		gsi=4;
		gsn=1;
		go to do_skip;	/* try to find column in next line */
place(4):		go to do_column;
		end;
	istate=8;
	go to get_next_char;
action(9):
	if kol=0 then go to gc_exit;
	if kol=gcn then go to gc_exit;
	if kol<gcn then go to get_next_char;

	/* kol > gcn :      a tab has carried us over the desired column */
	goto err166;


do_skip:
	istate=7;

	if fsb.lsep=4 /* NL */ then gsn=gsn-1;

	do i= 1 to gsn;
	go to get_next_char;
action(8):
	if x=ctl_char$nl then go to dse;		/* kol=0      doesn't work now that there is NP */
	go to get_next_char;
dse:	end;

	if gsi=6 then goto return_from_prep_skip;
	go to place(gsi);

/* 	TERMINATE and PREP  for GET     */
get_terminate_:entry(pspp);
	psp=pspp;
	if ps.prep^=0 then call plio2_get_util_$get_prep_(psp);
				/* Due to a change in pl1_operator_'s
				   entry stream_prep, the prep work will
				   be done prior to the first transmission
				   or terminate call.   */
	fsbp=ps.fsbp;
	if ps.job.copy then call put_copy_(psp,fsb.bnc-1);
	if ^ps.job.list then fsb.lsep=1;	/* so that following comma
					   will be 2nd comma */
	return;

get_prep_:entry(pspp);
	plio2_data_$pspstat,
	psp=pspp;
	ps.prep=0;

	string(ps.switch)="0"b;
     /* STRING OPTION */
	if ps.job.string then
		do;
		plio2_data_$pliostringfsbp,
		plio2_data_$fsbpstat,
		ps.fsbp,
		fsbp=	ps.source_p;		/* for STRING OPTION
					   source_p points to the fake FSB
					   and fake FSB's bptr is addr(string).
					   length(string) is in ps.number */

		bnc=1;
		kol=0;

		if ps.varying_string then i=addrel(bptr,-1)->based_int;
		else i=ps.number;

		bsize,blc=i;

		fsb.title,fsb.filename="""get_string_option""";
		/* for string option,
			fsb.buffer,
			fsb.path_name,
			fsb.declared_attributes(2)
		   must not be used - fake_fsb is too short */


		string(fsb.switch)="001101001"b;
		ps.file_p=null;
		go to prep_exit;
		end;

     /* FILE OPTION - EXPLICIT OR IMPLICIT */
	if ps.job.explicit_file then
		ps.file_p=ps.source_p;
	else	do;
		call ioa_("error in get prep: no explicit file");
		ps.file_p=addr_sysin();
		ps.job.explicit_file="1"b;
		end;

	ps.fsbp,fsbp,plio2_data_$fsbpstat=ps.file_p->p_vector(2);
	if fsb.switch.open then go to open1;
	plio2_data_$fab2pstat,ps.fab2p=addr(getfab2);
	call plio2_open_$open_implicit_(psp);
open1:
	/* if fsb.switch.eof then goto err164;  */
	if fsb.switch.input="0"b|fsb.switch.stream="0"b then goto err165;
prep_exit:
	if ps.job.copy then
		do;
		ps.start_copy=bnc;
		call put_copy_(psp,-1);	/* SIGNAL to OPEN the COPY-FILE */
		end;
	if ps.job.skip then
		do;
		gsi=6;	/* and then return */
		gsn=ps.number;
		go to do_skip;
return_from_prep_skip:
place(6):
		end;

	if ps.job.data then call plio2_gvd_(psp);

	return;

addr_sysin:proc returns(ptr);
	dcl sysin file input stream;
	return(addr(sysin));
end addr_sysin;

end plio2_get_util_;
