/****^  *********************************************************
        *                                                       *
        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
        *                                                       *
        * Copyright (c) 1972 by Massachusetts Institute of      *
        * Technology and Honeywell Information Systems, Inc.    *
        *                                                       *
        ********************************************************* */


/****^  HISTORY COMMENTS:
  1) change(89-03-24,Huen), approve(89-03-24,MCR8102), 
     audit(89-09-15,Vu), install(89-21-09,MR12.3-1071):	
     Modify r_ to branch to the correct label "work_1" instead of the label
     "work" so that the parameter "condition_name" which is undefined will not
     be referenced.  (pl1_2197)
                                                   END HISTORY COMMENTS */

/* updated 5-13-72 by PAB to shift burden to HELP_PLIO2_SIGNAL_  */


plio2_signal_: proc options(support);


/* 	plio2_signal_$
   s_			signals
   s_l_			signals with datafield
   s_r_			signals and does abnormal return
   s_r_l_			signals with datafield and does abnormal return
   r_                         does abnormal return
   conversion_error_	signals conversion condition, repairs string */

/* 	DECLARATION */

dcl c fixed bin (15);              /* conversion */
dcl l fixed bin (15);              /* data field */
dcl r fixed bin (15);              /* abnormal return */
dcl s fixed bin (15);              /* signal */
dcl (erno, n1,n2,n3,oncharind) fixed bin(15);
dcl (addr, null, string, substr) builtin;
dcl CN char(20) aligned;
dcl (psp,pspp,fsbp,chp,file_ptr,p2(2) based) ptr;
dcl based_chars char (1044480) based;
dcl based_label label based;
dcl onsource char(256) varying;
dcl (condition_name,msg,datafield) char(*);
dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));
dcl plio2_put_util_$put_publish_ ext entry (ptr);
dcl put_copy_ ext entry(ptr,fixed bin(15));
dcl pl1_signal_$help_plio2_signal_ ext entry(char(*),ptr,fixed bin(15),char(256) varying,fixed bin(15));

% include plio2_fsb;
% include plio2_ps;
% include plio2_psr;
						/* 	ENTRIES	 */

s_:	entry(pspp,condition_name,msg,erno);
	s = 1;
	c,l,r = 0;
	go to work;

r_:	entry(pspp);
	r = 1;
	c,l,s = 0;
	CN="";                                    /* bug 2197 */
	go to work_1;

s_r_:	entry(pspp,condition_name,msg,erno);
	r,s = 1;
	c,l = 0;
	go to work;

s_r_l_:	entry(pspp,condition_name,msg,erno,datafield);
	s,r,l = 1;
	c = 0;
	go to work;

s_l_:	entry(pspp,condition_name,msg,erno,datafield);
	s,l = 1;
	c,r = 0;
	go to work;

conversion_error_: entry(pspp,msg,erno,chp,n1,n2,n3);
	c,s = 1;
	l,r = 0;
	CN="CONVERSION";
	go to work_1;

work:

	CN=condition_name;
work_1:
	psp = pspp;
	if CN = "UNDEFINEDFILE"
	then plio2_data_$undef_file_sw = "1"b;
	else plio2_data_$undef_file_sw = "0"b;

	if psp^=null 
	then do;
		fsbp=ps.fsbp;
		plio2_data_$badfsbp = ps.fsbp;
		plio2_data_$badjob = string(psr.job);	/* MUST use psr.job, not ps.job, to get all 36 bits! */
		end;
	else goto work_2;

	if CN = "UNDEFINEDFILE" then goto work_2;	/* ps.job is garbage if error was in plio2_open_ ! */


	/* Here there may be materials which need to be "put":
	   either the present contents of the output buffer for PUT
	   or the current content of the COPY-STACK for GET/COPY  */

	if ps.job.copy then
		do;
		call put_copy_(psp,fsb.bnc-1);
		ps.start_copy=fsb.bnc;
		end;

	if ps.job.put then if ^ps.job.string then call plio2_put_util_$put_publish_(psp);

work_2:
	if s^=1 then go to return_test;
	oncharind=0;
	onsource="";


	if psp^=null then file_ptr=ps.file_p;
	else file_ptr=null;
	if file_ptr^=null then
		do;
		fsbp=file_ptr->p2(2);
		if CN = "ENDFILE"
		|  CN = "TRANSMIT"
		|  CN = "UNDEFINEDFILE"
		|  CN = "KEY"
		|  CN = "RECORD"
		then;
		else fsb.lnzc = 0;

		if fsb.switch.record & fsb.switch.keyed then
			do;
			onsource=msg;
			oncharind=-1;
			end;
		/* SEVERAL conditions will be accompanied with KEY */
		end;


	if CN = "CONVERSION"	then CN = "conversion";
  else	if CN = "SIZE"		then CN = "size";
  else	if CN = "ENDFILE"		then CN = "endfile";
  else	if CN = "ENDPAGE"		then CN = "endpage";
  else	if CN = "TRANSMIT"		then CN = "transmit";
  else	if CN = "UNDEFINEDFILE"	then CN = "undefinedfile";
  else	if CN = "NAME"		then CN = "name";
  else	if CN = "KEY"		then CN = "key";
  else	if CN = "RECORD"		then CN = "record";
  else	if CN = "ERROR"		then CN = "error";
  else	if CN = "OVERFLOW"		then CN = "overflow";
  else	if CN = "UNDERFLOW"		then CN = "underflow";
  else	if CN="MATH_ERROR"		then CN = "error";
  else	if CN="FIXEDOVERFLOW"	then CN = "fixedoverflow";
  else	if CN="ZERODIVIDE"		then CN = "zerodivide";
  else	if CN="STRINGRANGE"		then CN = "stringrange";
  else	if CN="STRINGSIZE"		then CN = "stringsize";
  else	if CN="SUBSCRIPTRANGE"	then CN = "subscriptrange";


	if c = 1 then
	do;
	     if n1>n2|n3<n1|n3>n2 then
		call plio2_signal_$s_r_(psp,"ERROR","CE",116);
	     onsource = substr(chp->based_chars,n1,n2+1-n1);
	     oncharind=n3-n1+1;
	end;

	if l = 1 then onsource = datafield;
	call pl1_signal_$help_plio2_signal_((CN),pspp,erno,onsource,oncharind);
	if c = 1 then substr(chp->based_chars,n1,n2+1-n1) = onsource;

return_test: 
	if r = 1 then go to addr(ps.ab_return)->based_label;     /* ABNORMAL RETURN */
	return;

end plio2_signal_;
