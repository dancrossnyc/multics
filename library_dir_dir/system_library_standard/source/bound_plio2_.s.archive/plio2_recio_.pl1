/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_recio_:
     procedure (pspp) options (support);

/* Modified 780830 by RAB to fix bug 1755 (reads of lines > 848 chars fail) */
/* Modified 780718 by RAB to make stream I/O slightly more quit-start proof */
/* Modified 770825 by PG to implement read/write to stream files */
/* 76-09-08:  changed to use the iox_$foo call forwarder	*/
/* 75-07-01:  changed the error handling for rewrite statements
   to fix bug 1378.			*/

/* 75-05-08:  changed the keyto_assignment_made bit to the keyto_keyset bit
   in the psr to support quick keyed record i/o and added code to
   the error entry block.			*/

/* 74-12-31:  changed the rewrite error codes from the incorrect "480", "481",
   to the correct "280", "281".			*/

/* 74-12-17: updated to support bit_string stringvalue io and rewrite
   stringvalue io; to check that varying_array is off before
   accepting that stringvalue is valid; error entry and associated
   code added for use by quick record io.		*/

/* 74-12-2: updated to support env(stringvalue) */

/* 74-8-5: fixed for version-2 of compiler which sets ab-ret label
   in the KEYTO case.   seereferences to keyto_keyset.  */

/* fixed to perform the KEYTO copy before the SET/INTO copy
   74-7-1  B U G :     if abnormal return to user, KEYTO post-copy may copy JUNK */


/* 73-12-12: updated for change from File Manager to iox_
   please note that the new KEY is char256v, the old KEY
   is c32, both starting in the same place.  */

/* 1-3-73:	removed all traces of locking.
   corrected test for no-file to include no-dir
   as well as noentry.  */

/* parameters */

dcl (error_status fixed bin (35),
     pspp ptr
     ) parameter;

/* automatic */

dcl  buffer_len fixed bin (21);
dcl  bytes_read fixed bin(21);
dcl  char_buffer bit (1) aligned;
dcl  conname char (16);
dcl  copy_len fixed bin (21);
dcl (psp, fsbp, wptr, copyp, statep) ptr;
dcl (i, erno init (975), code init (0), ballocn) fixed bin (17);
dcl (wlen, release, copyn, rlength, xrlength, vlength) fixed bin (21);
dcl  ends_in_NL bit (1) aligned;
dcl  iocb_p ptr;
dcl  iocb_status fixed bin (35);
dcl  onkeyx char (256) varying;
dcl 1 reciofab aligned,
    2 sw bit (36),
    2 name char (32);
dcl  scan_index fixed bin (21);
dcl  signal_record bit(1) aligned;
dcl (test_18, job_18) bit (18) aligned;
dcl  valid_stringvalue bit (1) aligned;
dcl  vptr ptr;
dcl  w_char_buffer bit (1) aligned;
dcl 1 work aligned like psr.job;

/* based */

dcl  based_pointer ptr based;
dcl 1 buffer_state based (statep) aligned,
    2 blen fixed bin (15),
    2 bmax fixed bin (15),
    2 bptr ptr,
    2 bsw aligned,
      3 (exists, pad, use) bit (1) unaligned;
dcl  balloc char (ballocn) aligned based;		/* ballocn must be a byte-length */
dcl  based_packedptr ptr unaligned based;
dcl  bc32 char (32) aligned based;
dcl  based_label label based;
dcl  release_bits bit (36) aligned based (addr (release));
dcl  string_len fixed bin (24) based;
dcl  variable_overlay char (vlength) based (vptr);
dcl 1 work_overlay aligned based (addr (work)),
    2 pad1 bit (27) unal,
    2 nofrom bit (1) unal,
    2 nokey bit (1) unal,
    2 nokeyfrom bit (1) unal,
    2 nolock bit (1) unal,
    2 close bit (1) unal,
    2 pad2 bit (4) unal;

/* NOTE: the bits of "job" and, thus, of "work"
   ending on the 34-th (six bits
   are reserved) contain the "release-number" of
   the io_semantics which produced the calling
   program.  Since these bits are reused by
   RECIO, the release number must be extracted
   and its bits reset to zero.

   release 1:     implements the 256-char var KEY
   sets the not_bytebuffer bit.

   release 2:	implements ab-return in KEYTO case.
   */

/* entries */

dcl  iox_$delete_record entry (ptr, fixed bin (35)),
     iox_$get_chars entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$seek_key entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$read_key entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
dcl  iox_$read_length entry (ptr, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$rewrite_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  plio2_signal_$s_ ext entry (ptr, char (*), char (*), fixed bin (17));
dcl  plio2_open_$open_implicit_ ext entry (ptr);

/* builtins */

dcl (addr, addrel, divide, fixed, index, length, min, mod, string, substr) builtin;

/* external static */

dcl (plio2_data_$pspstat,
     plio2_data_$fsbpstat) ptr external;
dcl (error_table_$no_record,
     error_table_$long_record,
     error_table_$short_record,
     error_table_$key_order,
     error_table_$end_of_info
     ) fixed bin (35) external;

/* internal static */

dcl  NL char (1) internal static options(constant) init ("
");

/* include files */

%include pl1_file_value;
%include plio2_fsb;
%include plio2_fsbr;
%include plio2_psr;
%include its;

/* program */

	plio2_data_$pspstat,
	     psp = pspp;

	string (work) = string (psr.job);
	release = 0;
	substr (release_bits, 31, 6) = substr (string (work), 28, 6); /* release number of io_semantics */
	substr (string (work), 28, 6) = "000000"b;	/* these bits are re-used by RECIO */

	if work.keyto then psr.keyto_keyset = "0"b;
	else addr (psr.ab_return) -> based_label = EXIT;
						/* ab-ret label is set by compiler/runtime
						   only for KEYTO, version 2 and later. */

	psr.file_p = psr.source_p;
	plio2_data_$fsbpstat,
	     fsbp, psr.fsbp = psr.file_p -> file_value.fsb_ptr;

	if ^fsbr.switch.open
	then do;
	     psr.fab2p = addr (reciofab);
	     reciofab.name = " ";
	     if work.read then reciofab.sw = "00000100001"b;
	     if work.write then reciofab.sw = "00000010001"b;
	     if work.rewrite then reciofab.sw = "00000001001"b;
	     if work.delete then reciofab.sw = "0000000100101"b;
	     if work.locate then reciofab.sw = "000000100011001"b;
	     call plio2_open_$open_implicit_ (psp);
	end;

	valid_stringvalue = fsbr.switch.stringvalue & work.varying_string & ^work.varying_array;
	iocb_p = fsbr.iocb_p;
	vlength = psr.variable_bitlen;
	if work.varying_string & ^valid_stringvalue then
	     do;
						/* special code inserted here to handle anomalous case
						   of "into" or "from" option where "target" is a varying
						   string.  For the compiler addresses the data portion
						   of such a string only. */
						/* More queer, an array of varying strings
						   is given its correct length but the address
						   of its second word - whereas a scalar varying string
						   is given the length of its data portion and the
						   address of its data portion. */
	     if ^work.varying_array then vlength = vlength + 36;
	     psr.variable_p = addrel (psr.variable_p, -1);
	end;

	onkeyx = "";

	if work.read & substr (string (work), 24, 3) = "000"b /* (set, into, ignore) = 0 */
	then do;
	     work.ignore = "1"b;
	     psr.number = 1;
	end;

	if (work.write | work.rewrite) & ^work.from
	then work_overlay.nofrom = "1"b;

	if work.write | work.locate
	then if ^work.keyfrom
	     then work_overlay.nokeyfrom = "1"b;
	     else;
	else if ^work.key
	then work_overlay.nokey = "1"b;

	if work_overlay.nokeyfrom & work_overlay.nokey
	then psr.keytemp = "";

/*	TESTING AND SIGNALLING */

	job_18 = substr (string (work), 14, 18);
	test_18 = job_18 & string (fsbr.nono);

	if test_18 ^= "0"b then
	     do;
	     i = index (test_18, "1"b);
	     erno = 251;				/* required option missing */
	     if i<15 then erno = 250;			/* illegal option present or implied */
	     if i<8 then erno = 249;			/* statement type conflicts with file attributes */

signal_error:
	     conname = "ERROR";
	     goto sandr1;

sandr:
	     conname = "TRANSMIT";
sandr1:
	     if iocb_status ^= 0 then fsbr.lnzc = iocb_status;
	     call plio2_signal_$s_ (psp, conname, substr (onkeyx, 1, length (onkeyx)), erno);

	     if work.keyto then if ^psr.keyto_keyset then goto addr (psr.ab_return) -> based_label;

/* The abnormal label is only different from the following return statement
   if KEYTO is specified.  We take it whenever the assignment to the KEYTO-
   TARGET has not been done.  */

EXIT:
						/* the label EXIT M_ U_ S_ T_ identify this return statement !! */

	     return;

sig_rec:
	     conname = "RECORD";
	     go to sandr1;

sig_eof:
	     conname = "ENDFILE";
	     go to sandr1;

sig_key:
	     conname = "KEY";
	     go to sandr1;
	end;


/*	CHECK FOR READ/WRITE TO A STREAM FILE */

	if fsbr.switch.stream			/* A stream file... */
	then do;

	     if work.varying_string
	     then vptr = addrel (psr.variable_p, 1);
	     else vptr = psr.variable_p;

	     if work.read				/* A READ STATEMENT */
	     then do;

		if ^fsb.switch.input
		then do;
		     erno = 289;			/* Stream file referenced by read statement isn't input */
		     go to signal_error;
		end;

/* Fill input buffer, if necessary */

		if fsb.bnc > fsb.blc		/* buffer is empty */
		then do;
		     fsb.blc = 0;
		     call fill_stream_input_buffer ("0"b);
		end;

/* Now grab 1 line out of the buffer */

		/* initialize loop for reading */

		vlength = divide(vlength,9,21,0);

		if work.varying_string
		then vlength = vlength - 4;

		bytes_read = 0;
		signal_record = "0"b;
		ends_in_NL = "0"b;

		/* loop until line is read */

		do while( ^ ends_in_NL & fsb.blc ^= 0);

		     /* scan for a newline */

		     buffer_len = fsb.blc - fsb.bnc + 1;
		     scan_index = index(substr(xbuf, fsb.bnc, buffer_len), NL) - 1;

		     /* remember if newline found */

		     if scan_index >= 0
		     then ends_in_NL = "1"b;
		     else scan_index = buffer_len;

		     /* check if buffer_load will fit in target */

		     if scan_index > vlength - bytes_read
		     then do;
			signal_record = "1"b;
			copy_len = vlength - bytes_read;
			end;
		     else copy_len = scan_index;

		     /* move buffer_load into target */

		     if copy_len > 0
		     then do;
			substr(variable_overlay, bytes_read + 1, copy_len) =
			     substr(xbuf, fsb.bnc, copy_len);
			bytes_read = bytes_read + copy_len;
			end;

		     /* if newline not found, get another buffer_load,
		        otherwise, step past the newline */

		     if ^  ends_in_NL
		     then do;
			fsb.blc = 0;
			call fill_stream_input_buffer("1"b);
			end;
		     else fsb.bnc = fsb.bnc + (scan_index + 1);
		     end;

		fsb.kol = 0;

		/* finish assignment */

		if work.varying_string
		then psr.variable_p -> string_len = bytes_read;
		else if bytes_read < vlength
		     then substr(variable_overlay, bytes_read + 1) = " ";

		if signal_record
		then call plio2_signal_$s_(psp,"RECORD","",294);	/* input line too long */
	     end;
	     else if work.write			/* A WRITE STATEMENT */
	     then do;

		if ^fsb.switch.output
		then do;
		     erno = 290;			/* Stream file referenced by write statement isn't output */
		     go to signal_error;
		end;

		if work.varying_string
		then vlength = psr.variable_p -> string_len;
		else vlength = divide (vlength, 9, 21, 0);

/* Check that the record will fit on the current line. */

		if vlength > fsb.lsize - fsb.kol
		then do;
		     call plio2_signal_$s_ (psp, "RECORD", "", 288);
		     vlength = fsb.lsize - kol;
		     end;
		call iox_$put_chars (iocb_p, vptr, vlength, iocb_status);
		if iocb_status ^= 0 then go to write_error;

		call iox_$put_chars (iocb_p, addr (NL), 1, iocb_status);
		if iocb_status ^= 0 then go to write_error;

		fsb.kol = 0;

		if fsb.switch.print
		then do;
		     fsb.lineno = fsb.lineno + 1;

		     if fsb.lineno = fsb.psize + 1
		     then call plio2_signal_$s_ (psp, "ENDPAGE", "", 234);
		end;
	     end;
	     return;
	end;

/* if FROM/INTO then prepare for buffer operations.
   IOX_ wants to use aligned byte buffers but the program may
   specify a buffer that is not byte aligned OR which is not byte-lengthed,
   either of which necessitates use of bitcopies.   */

	if (work.locate | work.from | work.into) then
	     do;
	     vlength = divide (vlength+8, 9, 21, 0);	/* must be in units of words AND must be tested !! */
	     if release>0 then if ^work.not_bytebuffer then char_buffer = "1"b;
		else do;
		     if mod (psr.variable_bitlen, 9) ^= 0 then goto not_byteish;
		     if mod (fixed (addr (psr.variable_p) -> its.bit_offset, 6), 9) = 0
		     then char_buffer = "1"b; else
not_byteish:	     char_buffer = "0"b;
		end;
	end;

/* buffer is described as follows:
   char_buffer="1"b		length in bytes given by _v_l_e_n_g_t_h
   char_buffer="0"b		length in bits  given by _p_s_r.__v_a_r_i_a_b_l_e___b_i_t_l_e_n  */

/*  	DISPATCH ....................DISPATCH */

	if job_18 & "0001001"b then go to WL;		/* write and locate */
	if job_18 & "000011"b then go to RD;		/* rewrite and delete */

/*  READ  */

free_inbuf:
	if fsbr.inbuf_sw.exists then
	     do;
	     ballocn = fsbr.inbuf_maxlen;
	     free fsbr.inbuf_ptr -> balloc;
	     fsbr.switch.buffer_in_use,
		fsbr.inbuf_sw.exists = "0"b;
	end;

	if work_overlay.close
	then go to EXIT;

	if work.key then
	     do;
	     if release>0 then onkeyx = psr.keytemp;
	     else onkeyx = addr (psr.keytemp) -> bc32;
						/* we can handle old as well as new KEYs */
	     call iox_$seek_key (iocb_p, onkeyx, rlength, iocb_status);
	     if iocb_status ^= 0 then goto read_error;
	     fsbr.key_saved = onkeyx;
	end;

	if work.ignore then
	     do;
	     if psr.number<1 then goto EXIT;
	     call iox_$position (iocb_p, 0, psr.number, iocb_status);
	     if iocb_status ^= 0 then goto read_error;
	     fsbr.rec_valid = "1"b;
	     goto EXIT;
	end;

	if ^work.key & work.keyto then
	     do;
	     call iox_$read_key (iocb_p, fsbr.key_saved, rlength, iocb_status);
	     if iocb_status ^= 0 then goto read_error;
	end;
	fsbr.rec_valid = "1"b;

	if work.keyto then
	     do;
	     if release>0 then psr.keytemp = fsbr.key_saved;
	     else addr (psr.keytemp) -> bc32 = fsbr.key_saved;
	     keyto_keyset = "1"b;
	end;


	if work.set then
	     do;
	     statep = addr (fsbr.inbuf_curlen);
	     if ^work.key & ^work.keyto		/* if either of these, rlength has been already set	*/
	     then do;
		call iox_$read_length (iocb_p, rlength, iocb_status);
		if iocb_status ^= 0 then goto read_error;
	     end;

	     vlength = rlength;			/* keyed or not, rlength is the length of the record in the file */
	     call obtain_buffer;
	     copyp = buffer_state.bptr;

	     if work.packedptr then psr.set_p_p -> based_packedptr = buffer_state.bptr;
	     else psr.set_p_p -> based_pointer = buffer_state.bptr;
	     char_buffer = "1"b;
	end;

	else /* INTO  */ if char_buffer then copyp = psr.variable_p; /* vlength having been set  above  */


	if char_buffer
	then do;
	     call iox_$read_record (iocb_p, copyp, vlength, xrlength, iocb_status);
	     if iocb_status ^= 0 then goto read_error;

	     if valid_stringvalue
	     then if work.bit_string
		then addrel (copyp, -1) -> string_len = xrlength*9;
		else addrel (copyp, -1) -> string_len = xrlength;
	     else if vlength ^= xrlength then goto short_record;
	end;

	else					/* BEGIN BLOCK to allocate a temporary bit-buffer */
	begin;					/* this is a READ INTO with a target which
						   is either not byte-aligned or not an even
						   number of bytes long.  */
dcl  tempbuffer char (vlength) aligned;			/* vlength has been corrected, above */
dcl  bitbuffer bit (nnn) unaligned based;
dcl  nnn fixed bin (17);

	     call iox_$read_record (iocb_p, addr (tempbuffer), vlength, xrlength, iocb_status);
	     if iocb_status ^= 0 then if iocb_status ^= error_table_$long_record then goto read_error;
	     nnn = 9*min (vlength, xrlength);
	     psr.variable_p -> bitbuffer = addr (tempbuffer) -> bitbuffer;
	     if iocb_status = error_table_$long_record then goto long_record;
	     if vlength ^= xrlength then goto short_record;
						/* ASSUMPTION: that record length equals variable length
						   if variable_bitlen+8/9 = record_length  */
	end;

	return;

read_error:
	if iocb_status = error_table_$end_of_info then
	     do;
	     erno = 258;
						/* unable to read beyond EOF in sequential file */
	     goto sig_eof;
	end;

	if iocb_status = error_table_$no_record then
	     do;
	     erno = 292;
						/* unable to perform keyed lookup - key not found */
	     goto sig_key;
	end;

	if iocb_status = error_table_$long_record then
	     do;
long_record:
	     erno = 253;
						/* record in data set  larger than variable */
	     goto sig_rec;
	end;

/* mysterious case:     */
	erno = 293;
						/* unable to perform sequential access */
	goto sandr;

short_record:
	erno = 254;
						/* record in data set smaller than variable */
	iocb_status = error_table_$short_record;	/* this is so fsb.lnzc gets set, so dpe  gets good info */

	goto sig_rec;

/* 	WRITE and LOCATE                */

WL:	if fsbr.outbuf_sw.use then
	     do;
	     w_char_buffer = "1"b;
	     wptr = fsbr.outbuf_ptr;
	     wlen = fsbr.outbuf_curlen;

	     call write_x;

	     ballocn = fsbr.outbuf_maxlen;
	     free fsbr.outbuf_ptr -> balloc;
	     fsbr.outbuf_sw.exists,
		fsbr.outbuf_sw.use = "0"b;
	end;

	if work_overlay.close
	then go to free_inbuf;

	if work.locate then
	     do;
	     fsbr.outbuf_sw.use = "1"b;
	     if fsbr.switch.keyed
	     then do;
		if release>0 then fsbr.outbuf_key = psr.keytemp;
		else fsbr.outbuf_key = addr (psr.keytemp) -> bc32;
	     end;
	     statep = addr (fsbr.outbuf_curlen);
	     call obtain_buffer;
	     if work.packedptr then psr.set_p_p -> based_packedptr = buffer_state.bptr;
	     else psr.set_p_p -> based_pointer = buffer_state.bptr;
	end;
	else do;
	     fsbr.outbuf_sw.use = "0"b;
	     w_char_buffer = char_buffer;
	     wptr = psr.variable_p;
	     if valid_stringvalue
	     then if work.bit_string
		then wlen = divide (addrel (psr.variable_p, -1) -> string_len+8, 9, 21, 0);
		else wlen = addrel (psr.variable_p, -1) -> string_len;
	     else wlen = vlength;

	     call write_x;

	end;
	return;

write_error:
	if iocb_status = error_table_$key_order then
	     do;
	     erno = 282;
						/* unable to add record to keyed sequential output
						   file : keys must be distinct and ascending */
	     goto sig_key;
	end;

	if iocb_status = 0 then
	     do;
	     erno = 296;
						/* unable to create keyed record because the
						   specified key has already been used. */
	     goto sig_key;
	end;

	else do;
	     erno = 284;
						/* unable to create new record for write,
						   locate, or close statement.  */
	     goto sandr;
	end;					/* mysterious */

/*  		rewrite,delete . . . . . . . . . . . . . . . . .   */

RD:
	if work.key then
	     do;
	     onkeyx = psr.keytemp;
	     call iox_$seek_key (iocb_p, onkeyx, rlength, iocb_status);
	     if iocb_status ^= 0 then goto rewrite_error;
	     fsbr.recio.rec_valid = "1"b;
	end;
	else if fsbr.switch.keyed then onkeyx = fsbr.key_saved;

	if fsbr.recio.rec_valid = "0"b
	then do;
	     erno = 256;
	     go to sandr;
	end;
						/* record to be rewritten or deleted has already
						   been deleted.  */
	if work.delete then
	     do;
	     call iox_$delete_record (iocb_p, iocb_status);
	     if iocb_status ^= 0 then goto rewrite_error;
						/* unable to delete designated record. */
	     fsbr.recio.rec_valid = "0"b;		/* cannot be deleted, rewritten  */
	     go to EXIT;
	end;

	if work.from then wptr = psr.variable_p;
	else do;
	     if fsbr.inbuf_sw.use = "0"b then
		do; erno = 255; go to sandr; end;
						/* There is no FROM OPTION or input buffer */
	     vlength = fsbr.inbuf_curlen;
	     wptr = fsbr.inbuf_ptr;
	     char_buffer = "1"b;
	end;

	if valid_stringvalue
	then if work.bit_string
	     then vlength = divide (addrel (psr.variable_p, -1) -> string_len+8, 9, 21, 0);
	     else vlength = addrel (psr.variable_p, -1) -> string_len;

	if char_buffer then call iox_$rewrite_record (iocb_p, wptr, vlength, iocb_status);
	else begin;

dcl  tempbuffer_r char (vlength) aligned;
dcl  bitbuffer_r bit (9*vlength) unaligned based;

	     addr (tempbuffer_r) -> bitbuffer_r = wptr -> bitbuffer_r;
	     call iox_$rewrite_record (iocb_p, addr (tempbuffer_r), vlength, iocb_status);
	end;

	if iocb_status ^= 0 then
	     do;
rewrite_error: if iocb_status = error_table_$long_record then
		do;
		erno = 280;
		goto sig_rec;
	     end;
	     if iocb_status = error_table_$short_record then
		do;
		erno = 280;
		goto sig_rec;
	     end;
	     if iocb_status = error_table_$no_record then
		do;
		erno = 292;
		goto sig_key;
	     end;
						/* unable to rewrite record. */
	     if psr.job.delete
	     then erno = 285;
	     else erno = 281;
	     goto sandr;
	end;
	return;

recio_close_: entry (pspp);
	psp = pspp;
	fsbp = psr.source_p -> file_value.fsb_ptr;
	iocb_p = fsbr.iocb_p;
	string (work) = "00000000000000000000000000000001"b; /* close */

	go to WL;

error:	entry (pspp, error_status);
	psp = pspp;
	string (work) = string (psr.job);
	psr.file_p = psr.source_p;
	plio2_data_$fsbpstat,
	     fsbp, psr.fsbp = psr.file_p -> file_value.fsb_ptr;
	if fsbr.switch.keyed
	then onkeyx = psr.keytemp;
	else onkeyx = "";
	iocb_status = error_status;
	if psp -> psr.job.read
	then if iocb_status>0
	     then goto read_error;
	     else goto short_record;
	if psp -> psr.job.write then goto write_error;
	goto rewrite_error;

/* INTERNAL PROCEDURES */

fill_stream_input_buffer:
	procedure (bv_ignore_eof);

/* parameters */

declare bv_ignore_eof bit (1) aligned parameter;

/* automatic */

declare  buffer_ptr ptr,
         max_read_len fixed bin (21),
         read_len fixed bin (21);

/* based */

declare  buffer_array_overlay char (1) dim (fsb.bsize) based (fsb.bptr);

/* program */

	     buffer_ptr = addr (buffer_array_overlay);
	     max_read_len = fsb.bsize;

	     fsb.bnc = 1;	/* redundant stmt protects us somewhat from quit-start */

	     if fsb.console
	     then call iox_$get_line (iocb_p, buffer_ptr, max_read_len, read_len, iocb_status);
	     else call iox_$get_chars (iocb_p, buffer_ptr, max_read_len, read_len, iocb_status);

	     fsb.bnc = 1;

	     if iocb_status ^= 0
	     then if iocb_status = error_table_$short_record | iocb_status = error_table_$long_record
		then iocb_status = 0;
		else if iocb_status = error_table_$end_of_info
		then do;
		     if bv_ignore_eof
		     then do;
			iocb_status = 0;
			return;
		     end;
		     erno = 291;			/* EOF during read to stream file */
		     go to sig_eof;
		end;
		else do;
		     erno = 295;			/* transmit */
		     go to sandr;
		end;

	     fsb.blc = fsb.blc + read_len;

	end fill_stream_input_buffer;

obtain_buffer:
	procedure ();

	     if ^bsw.exists | vlength > bmax
	     then do;
		if bsw.exists
		then do;
		     ballocn = bmax;
		     free buffer_state.bptr -> balloc;
		end;
		ballocn = vlength;
		allocate balloc set (buffer_state.bptr);
		bmax = ballocn;
		bsw.exists = "1"b;
	     end;

	     blen, copyn = vlength;
	     fsbr.switch.buffer_in_use,
		bsw.use = "1"b;

	end obtain_buffer;

write_x:	proc;
	     if fsbr.switch.keyed then
		do;
		if fsbr.outbuf_sw.use then onkeyx = fsbr.outbuf_key;
		else do;
		     if release>0 then onkeyx = psr.keytemp;
		     else onkeyx = addr (psr.keytemp) -> bc32;
		end;
		call iox_$seek_key (iocb_p, onkeyx, xrlength, iocb_status);
		if iocb_status ^= error_table_$no_record then goto write_error;
	     end;

	     if w_char_buffer
	     then call iox_$write_record (iocb_p, wptr, wlen, iocb_status);
	     else begin;

dcl  tempbuffer_w char (wlen) aligned;
dcl  bitbuffer_w bit (9*vlength) unaligned based;

		addr (tempbuffer_w) -> bitbuffer_w = psr.variable_p -> bitbuffer_w;
		call iox_$write_record (iocb_p, addr (tempbuffer_w), wlen, iocb_status);
	     end;
	     if iocb_status ^= 0 then goto write_error;
	     fsbr.switch.buffer_in_use = "0"b;
	     if fsbr.switch.keyed then fsbr.key_saved = onkeyx;
	     fsbr.recio.rec_valid = "1"b;
	end write_x;

     end						/* plio2_recio_ */;
