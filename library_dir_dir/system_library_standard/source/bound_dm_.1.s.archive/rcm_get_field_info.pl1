/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          This routine gets the field_table of the specified record collection
     and constructs from that field_table a typed_vector_array whose
     dimension_table describes the fields of the collection.
*/

/* HISTORY:
Written by Matthew Pierret 05/05/82.
Modified:
09/07/82 by Matthew Pierret:  Changed to use rm_get_opening_info.
03/16/83 by Matthew Pierret:  Changed to receive from rm_get_opening_info the
            record_collection_opening_info structure.
03/24/83 by Lindsey Spratt:  Changed to use version 2 field_table, removed
	  CHECK_VERSION.
07/28/83 by Matthew Pierret: Changed name from rm_get_field_info to
            rcm_get_field_info, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin:  Renamed the parameters to coincide with all the other
            rcm_XX routines.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3.
09/27/84 by Maggie Sharpe:  corrected program format; cleaned up declarations;
            added some comments.
11/27/84 by Lindsey L. Spratt:  Changed to use dm_vector_util_ instead of
            vector_util_.
*/

/* format: style2,ind3 */

rcm_get_field_info:
   proc (p_file_opening_id, p_record_collection_id, p_work_area_ptr, p_typed_vector_array_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_record_collection_id bit (36) aligned;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    dimension_idx	       fixed bin;
      dcl	    descriptor_string_ptr  ptr;
      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    descriptor_string      bit (36) aligned based (descriptor_string_ptr);
      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

      dcl	    (max, null, substr)    builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("rcm_get_field_info") char (32) varying int static options (constant);

/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    dm_vector_util_$init_typed_vector_array
			       entry options (variable);

/* External */

      dcl	    sys_info$max_seg_size  ext fixed bin (35);
      dcl	    error_table_$bad_arg   ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      work_area_ptr = p_work_area_ptr;
      if work_area_ptr = null
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

      call rcm_get_opening_info (p_file_opening_id, p_record_collection_id, record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
	 "record_collection_opening_info");

      field_table_ptr = record_collection_opening_info.field_table_ptr;

      call CHECK_VERSION (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      tva_maximum_dimension_name_length = 0;
      do dimension_idx = 1 to field_table.number_of_fields;
         tva_maximum_dimension_name_length =
	    max (tva_maximum_dimension_name_length, field_table.field (dimension_idx).length_of_name);
      end;

      call dm_vector_util_$init_typed_vector_array (work_area_ptr, 0, (field_table.number_of_fields),
	 (tva_maximum_dimension_name_length), typed_vector_array_ptr, p_code);
      if p_code ^= 0
      then return;

      do dimension_idx = 1 to typed_vector_array.number_of_dimensions;
         typed_vector_array.dimension_table (dimension_idx).name =
	    substr (field_table.field_names, field_table.field (dimension_idx).location_of_name,
	    field_table.field (dimension_idx).length_of_name);
         if field_table.field (dimension_idx).flags.descriptor_is_varying
         then ;					/* Aggragate storage items are not supported at this time */
         else
	  do;
	     alloc descriptor_string in (work_area);
	     descriptor_string = field_table.field (dimension_idx).descriptor;
	  end;
         typed_vector_array.dimension_table (dimension_idx).descriptor_ptr = descriptor_string_ptr;
      end;

      p_typed_vector_array_ptr = typed_vector_array_ptr;

      return;
%page;
CHECK_VERSION:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^a"" of ^a structure; received ""^a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_field_table;
%page;
%include vu_typed_vector_array;
%page;
%include sub_err_flags;

   end rcm_get_field_info;
