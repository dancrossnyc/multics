/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine creates an index in a relation.  The fields in the keys
     of the index are either all of the fields of the record tuples if
     p_id_list_ptr is null, or those fields identified by
     p_id_list_ptr->id_list if non-null.  The keys also have one addition
     field, which is the tuple_id of the tuple which the key identifies.  This
     field is bit (36) aligned.
          Before creating the index, all of the records of the relation are
     retrieved in a typed_vector_array.  If there are no records in the
     relation, a typed_vector_array whose dimension_table describes the fields
     of the keys is created by hand.  index_manager_$create_index stores the
     keys in the typed_vector_array, if there are any, after creating the
     index. 
*/

/* HISTORY:
Written by Matthew Pierret, 06/01/82.
Modified:
06/18/82 by Matthew Pierret: Removed BEGINNING_OF_ELEMENT argument from
            put_element calling sequence.
09/22/82 by Matthew Pierret:  Changed to use id_list and to create unique or
            non-unique indices.
09/30/82 by Matthew Pierret:  Changed to use the area pointed to by
            dm_area_ptr.  Added cleanup handler.
10/12/82 by Matthew Pierret:  Changed to get and reset the opening info.
            Changed to allocate descriptor_string in dm_area rather than
            use an automatic structure so that vu_$free_typed_vector_array
            doesn't blow out.
            Changed to use index_manager_$create_index instead of
	  $create_collection.
11/30/82 by Lindsey Spratt:  Added the (nosubrg) condition prefix to protect
	  statements for which the compiler emits the wrong code (i.e., when
	  assigning from an array into another array which are different
	  instances of the same structure, with different refer extents).
12/02/82 by Lindsey Spratt:  Fixed to copy the attribute_descriptor array
	  when extending the index_attribute_map.
03/01/83 by Matthew Pierret: Added copyright notice. Removed the create_index 
            label. Changed to use relation_opening_info, and to update the
            file copy of index_attribute_map via rlm_update_opening_info.
06/14/83 by Matthew Pierret:  Changed to load the newly created index if there
            are any data already stored in the relation.  This is done by
            retrieving the appropriate fields and the record_id of each record
            in the record collection, and passing the typed_vector_array
            holding these values to index_manager_$create_index, which stores
            them as keys after creating the index.  The record_id is retrieved
            by specifying a value of -1 for the last field_id in the 
            retrieval_id_list.  
            Also added the ERROR_RETURN routine to replace the
            "do;call FINISH;return;end;" cliche with 
            "call ERROR_RETURN (code);".
            Changed BUILD_TVA to use local variables and a parameter.
09/20/83 by Lindsey L. Spratt:  Changed to use
            dm_relation_index_flags.incl.pl1.
04/13/84 by Lee Baldwin:  Changed the calling sequence of 
            record_manager_$get_records_by_spec which no longer takes
            typed_vector_array_version.
05/29/84 by Matthew Pierret:  Changed to RELATION_HEADER_VERSION_3.  Changed
            to copy p_code and p_id_list_ptr parameters into local variables.
            Moved setting of dm_area_ptr and establishment of cleanup handler
            to just before they are needed.
06/07/84 by Lee Baldwin:  Renamed dm_error_$nonempty_relation to
            dm_error_$non_empty_relation.
10/31/84 by Stanford S. Cox: MAIN - Added p_style check.  GET_OR_CREATE_* - Added
   	  index_attribute_map version asgn.
11/01/84 by Lindsey L. Spratt:  Changed to use error_table_$unsupported
            operation instead of the (obsolete) dm_error_$not_implemented.
12/20/84 by Lindsey L. Spratt:  Fixed to use dm_vector_util_ instead of
            vector_util_.
02/05/85 by Lindsey L. Spratt:  Fixed to handle the case where the keys to be
            loaded won't all fit into a single TVA.
02/14/85 by Lindsey L. Spratt:  Moved "on cleanup" statement to precede the
            define_area_ call and changed FINISH to test and release
            local_area_info.areap instead of vector_area_ptr.  Changed
            PUT_REST_OF_KEYS to simply return if the prok_code =
            dm_error_$record_not_found.  Fixed the builtin dcls to be only
            those builtins actually used.
*/

/* format: style2,ind3 */

rlm_create_index:
   proc (p_rel_opening_id, p_id_list_ptr, p_flags, p_style, p_index_collection_id, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_rel_opening_id       bit (36) aligned;
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_flags	       bit (36) aligned;
      dcl	    p_style	       fixed bin (17);
      dcl	    p_index_collection_id  bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    attribute_idx	       fixed bin;
      dcl	    code		       fixed bin (35);
      dcl	    index_all_attributes   bit (1) aligned init ("0"b);
      dcl	    index_idx	       fixed bin;
      dcl	    1 local_area_info      aligned like area_info;
      dcl	    number_of_key_fields   fixed bin;
      dcl	    relation_is_nonempty   bit (1) aligned init (NO);
      dcl	    there_are_more_records bit (1) aligned init (NO);
      dcl	    vector_area_ptr	       ptr init (null ());

      dcl	    (descriptor_string_ptr, index_cursor_ptr, input_id_list_ptr, old_index_attribute_map_ptr, record_cursor_ptr,
	    retrieval_id_list_ptr) ptr init (null);

/* Based */

      dcl	    descriptor_string      bit (36) aligned based (descriptor_string_ptr);
      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);
      dcl	    vector_area	       area (sys_info$max_seg_size) based (vector_area_ptr);

/* Builtin */

      dcl	    (addr, hbound, max, null, unspec, string)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rlm_create_index") char (32) varying;
      dcl	    BITS_PER_WORD	       init (36) fixed bin int static options (constant);
      dcl	    MAXIMUM_RANGE_SIZE_FOR_SUBSEQUENT_RETRIEVALS
			       init (131072 /* 2**17 */) fixed bin (35) int static options (constant);
      dcl	    TREE_STYLE_INDEX       init (1) fixed bin int static options (constant);
      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    ioa_$rsnnl	       entry () options (variable);
      dcl	    define_area_	       entry (ptr, fixed bin (35));
      dcl	    dm_vector_util_$free_typed_vector_array
			       entry (ptr, ptr, fixed bin (35));
      dcl	    dm_vector_util_$merge_typed_vector_array
			       entry (ptr, fixed bin (17), ptr, ptr, ptr, fixed bin (35));
      dcl	    record_manager_$get_field_info
			       entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
      dcl	    release_area_	       entry (ptr);
      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$index_attribute_map
			       entry (ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$record_not_found,
	    dm_error_$non_empty_relation,
	    error_table_$area_too_small,
	    error_table_$unimplemented_version,
	    error_table_$unsupported_operation
	    )		       fixed bin (35) ext;

      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* Static */

      dcl	    dm_area_ptr	       ptr init (null) internal static;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */


      p_code, code = 0;
      typed_vector_array_ptr = null;
      input_id_list_ptr = p_id_list_ptr;
      if p_style ^= TREE_STYLE_INDEX			/* hash index is not implemented */
      then call ERROR_RETURN (error_table_$unsupported_operation);

/**** Get opening information structures for this relation. */

      call rlm_opening_info$get (p_rel_opening_id, relation_opening_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);			/* relation not open */

      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      attribute_info_ptr = relation_opening_info.attribute_info_ptr;
      call CHECK_VERSION ("attribute_info", attribute_info.version, ATTRIBUTE_INFO_VERSION_1);

      index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);

/**** Determine how many fields will make up the key. One is added to the number
      of attributes selected because all keys have an extra field for the tuple
      identifier. */

      if input_id_list_ptr = null
      then
         do;
	  index_all_attributes = "1"b;
	  number_of_key_fields = attribute_info.number_of_attributes + 1;
         end;
      else
         do;
	  call CHECK_VERSION_FB ("id_list", (input_id_list_ptr -> id_list.version), (ID_LIST_VERSION_1));
	  number_of_key_fields = input_id_list_ptr -> id_list.number_of_ids + 1;
         end;

/**** Get a pointer to an area and set up a cleanup handler. */

      if dm_area_ptr = null
      then dm_area_ptr = get_dm_free_area_ ();

      local_area_info.version = area_info_version_1;
      local_area_info.owner = myname;
      string (local_area_info.control) = "0"b;
      local_area_info.control.zero_on_alloc = YES;
      local_area_info.areap = null ();


      local_area_info.size = sys_info$max_seg_size;

      on cleanup call FINISH ();

      call define_area_ (addr (local_area_info), code);
      if code ^= 0
      then call ERROR_RETURN (code);

      vector_area_ptr = local_area_info.areap;


/**** Find an entry in the index_attribute_map.index array for the new index.
      If all of the entries are in use, the array must be extended. */

      index_idx = -1;

      call GET_OR_CREATE_INDEX_ATTRIBUTE_MAP_ENTRY
	 ((index_attribute_map.number_of_indices = index_attribute_map.maximum_number_of_indices),
	 (number_of_key_fields - 1 > index_attribute_map.maximum_number_of_attributes_per_index), index_idx);

/**** Retrieve the field values that will be stored in the new index
      in a typed_vector_array, or, if there are no data in the relation,
      create a typed_vector_array with a dimension_table describing the
      fields of the keys of the new index. */

      call BUILD_ID_LIST_WITH_TUPLE_ID (number_of_key_fields, input_id_list_ptr, retrieval_id_list_ptr);

      call record_manager_$create_cursor (p_rel_opening_id, relation_header.record_collection_id, dm_area_ptr,
	 record_cursor_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call record_manager_$get_records_by_spec (null (), retrieval_id_list_ptr, vector_area_ptr, record_cursor_ptr,
	 typed_vector_array_ptr, code);
      if code = 0
      then
         do;
	  relation_is_nonempty = YES;
	  there_are_more_records = NO;
         end;
      else if code = dm_error_$record_not_found
      then
         do;
	  there_are_more_records = NO;
	  relation_is_nonempty = NO;
         /*** There are no tuples in the relation. This is not an error.
	    Create a typed_vector_array by hand to use in creating the index. */

	  code = 0;
	  call BUILD_TVA (typed_vector_array_ptr);
         end;
      else if code = error_table_$area_too_small
      then
         do;
	  code = 0;
	  there_are_more_records = YES;
	  relation_is_nonempty = YES;
         end;
      else call ERROR_RETURN (code);

      if addr (p_flags) -> relation_index_flags.relation_must_be_empty & relation_is_nonempty = YES
      then call ERROR_RETURN (dm_error_$non_empty_relation);


/**** Create the new index collection. Use the typed_vector_array to
      describe the fields in the keys of the new index, and set up
      the number of duplication fields (the third argument in the calling
      sequence of index_mananager_$create_index).  If the index is to be
      unique, the number of duplication fields is equal to the number of
      fields excluding the field which contains the tuple_id.  Otherwise,
      the number of duplication fields is equal to the number of key fields.
*/

      if addr (p_flags) -> relation_index_flags.index_is_unique
      then call index_manager_$create_index (p_rel_opening_id, typed_vector_array_ptr, number_of_key_fields - 1,
	      index_attribute_map.index (index_idx).collection_id, code);
      else call index_manager_$create_index (p_rel_opening_id, typed_vector_array_ptr, number_of_key_fields,
	      index_attribute_map.index (index_idx).collection_id, code);

      if code ^= 0
      then call ERROR_RETURN (code);

      if there_are_more_records
      then
         do;
	  call index_manager_$create_cursor (p_rel_opening_id, index_attribute_map.index (index_idx).collection_id,
	       dm_area_ptr, index_cursor_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  call PUT_REST_OF_KEYS (record_cursor_ptr, retrieval_id_list_ptr, vector_area_ptr, index_cursor_ptr,
	       typed_vector_array_ptr);
         end;


/**** Update the index_attribute_map to reflect the exixtence of the new
      index. */

      index_attribute_map.number_of_indices = index_attribute_map.number_of_indices + 1;
      index_attribute_map.index (index_idx).number_of_attributes = number_of_key_fields - 1;
      do attribute_idx = 1 to number_of_key_fields - 1;
         if index_all_attributes
         then index_attribute_map.index (index_idx).attribute_id (attribute_idx) = attribute_idx;
         else index_attribute_map.index (index_idx).attribute_id (attribute_idx) =
	         input_id_list_ptr -> id_list.id (attribute_idx);
      end;

/**** Update the opening copy of the index_attribute_map, as well as the file
      copy and any necessary updates to relation_header to keep the relation
      consistent. */

      call rlm_update_opening_info$index_attribute_map (relation_opening_info_ptr, index_attribute_map_ptr, code);

      if code ^= 0
      then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	      "The index was created, but an error occurred while resetting the opening information.");


/**** Set return argument and return. */

      p_index_collection_id = index_attribute_map.index (index_idx).collection_id;

      call FINISH ();

MAIN_RETURN:
      return;
%page;
CHECK_VERSION:
   proc (p_structure_name, p_received_version, p_expected_version);

      dcl	    p_received_version     char (8) aligned;
      dcl	    p_expected_version     char (8) aligned;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_FB:
   proc (p_structure_name, p_received_version, p_expected_version);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION_FB;
%page;
ERROR_RETURN:
   proc (er_code);

      dcl	    er_code	       fixed bin (35);

      p_code = er_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;


FINISH:
   proc ();

      if local_area_info.areap ^= null
      then call release_area_ (local_area_info.areap);

      if retrieval_id_list_ptr ^= null
      then free retrieval_id_list_ptr -> id_list in (dm_area);

      if record_cursor_ptr ^= null
      then call record_manager_$destroy_cursor (record_cursor_ptr, (0));

      if index_cursor_ptr ^= null
      then call index_manager_$destroy_cursor (index_cursor_ptr, (0));

      if old_index_attribute_map_ptr ^= index_attribute_map_ptr
      then if old_index_attribute_map_ptr ^= null
	      & old_index_attribute_map_ptr ^= relation_opening_info.index_attribute_map_ptr
	 then free old_index_attribute_map_ptr -> index_attribute_map in (dm_area);
	 else if index_attribute_map_ptr ^= null
	      & index_attribute_map_ptr ^= relation_opening_info.index_attribute_map_ptr
	 then free index_attribute_map in (dm_area);


   end FINISH;
%page;
BUILD_ID_LIST_WITH_TUPLE_ID:
   proc (bil_number_of_key_fields, bil_input_id_list_ptr, bil_output_id_list_ptr);

      dcl	    bil_number_of_key_fields
			       fixed bin parameter;
      dcl	    bil_input_id_list_ptr  ptr parameter;
      dcl	    bil_output_id_list_ptr ptr parameter;
      dcl	    bil_id_idx	       fixed bin;


      il_number_of_ids = bil_number_of_key_fields;
      alloc id_list in (dm_area) set (bil_output_id_list_ptr);
      bil_output_id_list_ptr -> id_list.version = ID_LIST_VERSION_1;

      if bil_input_id_list_ptr = null
      then
         do bil_id_idx = 1 to bil_number_of_key_fields - 1;
	  bil_output_id_list_ptr -> id_list.id (bil_id_idx) = bil_id_idx;
         end;
      else
         do bil_id_idx = 1 to bil_number_of_key_fields - 1;
	  bil_output_id_list_ptr -> id_list.id (bil_id_idx) = bil_input_id_list_ptr -> id_list.id (bil_id_idx);
         end;
      bil_output_id_list_ptr -> id_list.id (bil_id_idx) = -1;

      return;

   end BUILD_ID_LIST_WITH_TUPLE_ID;
%page;
BUILD_TVA:
   proc (bt_key_typed_vector_array_ptr);

      dcl	    bt_key_typed_vector_array_ptr
			       ptr parameter;
      dcl	    bt_record_typed_vector_array_ptr
			       ptr;
      dcl	    bt_dimension_name      char (32) varying init ("");
      dcl	    bt_code	       fixed bin (35);

      call record_manager_$get_field_info (p_rel_opening_id, relation_header.record_collection_id, vector_area_ptr,
	 bt_record_typed_vector_array_ptr, bt_code);
      if bt_code ^= 0
      then call ERROR_RETURN (bt_code);

      call CHECK_VERSION_FB ("typed_vector_array", (bt_record_typed_vector_array_ptr -> typed_vector_array.version),
	 (TYPED_VECTOR_ARRAY_VERSION_2));

      if index_all_attributes
      then number_of_key_fields = bt_record_typed_vector_array_ptr -> typed_vector_array.number_of_dimensions + 1;

      call dm_vector_util_$merge_typed_vector_array (vector_area_ptr, number_of_key_fields, input_id_list_ptr,
	 bt_record_typed_vector_array_ptr, bt_key_typed_vector_array_ptr, bt_code);
      if bt_code ^= 0
      then call ERROR_RETURN (bt_code);

      call CHECK_VERSION_FB ("typed_vector_array", (bt_key_typed_vector_array_ptr -> typed_vector_array.version),
	 (TYPED_VECTOR_ARRAY_VERSION_2));

/*
   Append the tuple_id field to the end.
*/

      alloc descriptor_string in (vector_area);
      arg_descriptor_ptr = descriptor_string_ptr;
      unspec (descriptor_string) = "0"b;
      fixed_arg_descriptor.flag = "1"b;
      fixed_arg_descriptor.type = bit_dtype;
      fixed_arg_descriptor.precision = 36;

      bt_key_typed_vector_array_ptr -> typed_vector_array.dimension_table (number_of_key_fields).name = "0";
      bt_key_typed_vector_array_ptr -> typed_vector_array.dimension_table (number_of_key_fields).descriptor_ptr =
	 arg_descriptor_ptr;

      return;

   end BUILD_TVA;
%page;
GET_OR_CREATE_INDEX_ATTRIBUTE_MAP_ENTRY:
   proc (p_extend_index_array, p_increase_maximum_number_of_attributes, p_index_idx);

      dcl	    p_extend_index_array   bit (1) aligned;
      dcl	    p_increase_maximum_number_of_attributes
			       bit (1) aligned;
      dcl	    p_index_idx	       fixed bin;
      dcl	    iam_idx	       fixed bin;
      dcl	    attribute_idx	       fixed bin;

      old_index_attribute_map_ptr = index_attribute_map_ptr;

      if p_extend_index_array | p_increase_maximum_number_of_attributes
      then
ALLOCATE_NEW_IAM:
         do;
	  if p_extend_index_array
	  then iam_maximum_number_of_indices =
		  hbound (old_index_attribute_map_ptr -> index_attribute_map.index, 1) + INITIAL_NUMBER_OF_INDICES;
	  else iam_maximum_number_of_indices = hbound (old_index_attribute_map_ptr -> index_attribute_map.index, 1);

	  iam_maximum_number_of_attributes_per_index =
	       max (old_index_attribute_map_ptr -> index_attribute_map.maximum_number_of_attributes_per_index,
	       number_of_key_fields - 1);

	  alloc index_attribute_map in (dm_area);
	  index_attribute_map.version = INDEX_ATTRIBUTE_MAP_VERSION_2;
	  index_attribute_map.number_of_indices = old_index_attribute_map_ptr -> index_attribute_map.number_of_indices;

	  do iam_idx = 1 to hbound (old_index_attribute_map_ptr -> index_attribute_map.index, 1);
	     if ^p_increase_maximum_number_of_attributes
	     then
(nosubrg):
	        index_attribute_map.index (iam_idx) =
		   old_index_attribute_map_ptr -> index_attribute_map.index (iam_idx);
	     else
	        do;
(nosubrg):
		 index_attribute_map.index (iam_idx).collection_id =
		      old_index_attribute_map_ptr -> index_attribute_map.index (iam_idx).collection_id;
(nosubrg):
		 index_attribute_map.index (iam_idx).style =
		      old_index_attribute_map_ptr -> index_attribute_map.index (iam_idx).style;
(nosubrg):
		 index_attribute_map.index (iam_idx).number_of_duplication_fields =
		      old_index_attribute_map_ptr -> index_attribute_map.index (iam_idx).number_of_duplication_fields;
(nosubrg):
		 index_attribute_map.index (iam_idx).number_of_attributes =
		      old_index_attribute_map_ptr -> index_attribute_map.index (iam_idx).number_of_attributes;
		 index_attribute_map.index (iam_idx).attribute_id (*) = 0;

		 do attribute_idx = 1 to index_attribute_map.index (iam_idx).number_of_attributes;
(nosubrg):
		    index_attribute_map.index (iam_idx).attribute_id (attribute_idx) =
		         old_index_attribute_map_ptr
		         -> index_attribute_map.index (iam_idx).attribute_id (attribute_idx);
		 end;
	        end;
	  end;

	  if p_extend_index_array
	  then
	     do;

	        p_index_idx = iam_idx;

	        do iam_idx = iam_idx to index_attribute_map.maximum_number_of_indices;
		 unspec (index_attribute_map.index (iam_idx)) = "0"b;
	        end;
	     end;
         end ALLOCATE_NEW_IAM;

      if p_index_idx = -1
      then
         do p_index_idx = 1 to hbound (index_attribute_map.index, 1)
	    while (index_attribute_map.index (p_index_idx).number_of_attributes ^= UNUSED_INDEX_ATTRIBUTE_MAP_ENTRY);
         end;

      return;

   end GET_OR_CREATE_INDEX_ATTRIBUTE_MAP_ENTRY;
%page;
PUT_REST_OF_KEYS:
   proc (prok_p_record_cursor_ptr, prok_p_record_id_list_ptr, prok_p_vector_area_ptr, prok_p_index_cursor_ptr,
        prok_p_typed_vector_array_ptr);
      dcl	    prok_p_record_cursor_ptr
			       ptr parm;
      dcl	    prok_p_record_id_list_ptr
			       ptr parm;
      dcl	    prok_p_vector_area_ptr ptr parm;
      dcl	    prok_p_index_cursor_ptr
			       ptr parm;
      dcl	    prok_p_typed_vector_array_ptr
			       ptr parm;

      dcl	    prok_p_vector_area     area based (prok_p_vector_area_ptr);

      dcl	    prok_code	       fixed bin (35) init (0);
      dcl	    1 prok_numeric_specification
			       aligned like numeric_specification;
      dcl	    prok_there_are_more_records
			       bit (1) aligned init (YES);

      prok_numeric_specification.head.version = SPECIFICATION_VERSION_4;
      prok_numeric_specification.head.type = RELATIVE_NUMERIC_SPECIFICATION_TYPE;
      prok_numeric_specification.position_number = 1;
      prok_numeric_specification.range_size = MAXIMUM_RANGE_SIZE_FOR_SUBSEQUENT_RETRIEVALS;

      do while (prok_there_are_more_records);

         call release_area_ (prok_p_vector_area_ptr);
         local_area_info.areap = null ();
         call define_area_ (addr (local_area_info), prok_code);
         prok_p_vector_area_ptr = local_area_info.areap;

         prok_p_typed_vector_array_ptr = null ();

         call record_manager_$get_records_by_spec (addr (prok_numeric_specification), prok_p_record_id_list_ptr,
	    prok_p_vector_area_ptr, prok_p_record_cursor_ptr, prok_p_typed_vector_array_ptr, prok_code);
         if prok_code = 0
         then prok_there_are_more_records = NO;
         else if prok_code = error_table_$area_too_small
         then prok_there_are_more_records = YES;
         else if prok_code = dm_error_$record_not_found
         then return;
         else call ERROR_RETURN (prok_code);

         call index_manager_$put_key_array (prok_p_typed_vector_array_ptr, prok_p_index_cursor_ptr, prok_code);
         if prok_code ^= 0
         then call ERROR_RETURN (prok_code);
      end;
   end PUT_REST_OF_KEYS;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_id_list;
%page;
%include vu_typed_vector_array;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_specification;
%page;
%include dm_specification_head;
%page;
%include dm_relation_index_flags;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include area_info;
%page;
%include sub_err_flags;
   end rlm_create_index;
