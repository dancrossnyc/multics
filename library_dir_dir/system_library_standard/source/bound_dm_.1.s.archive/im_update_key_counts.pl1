/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This subroutine takes a key_count_array and increments or decrements
     it  by  one  in each partial duplicate count for which the "current" is a
     partial duplicate of the previous or following keys.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 10/28/82.
Modified:
11/15/82 by Matthew Pierret:  Changed to not try to free the leaf_ci_header
            pointed to by temp_leaf_ci_header_ptr if equal to
	  leaf_ci_header_ptr.
12/09/82 by Lindsey Spratt:  Changed to use the dm_key_count_array incl file.
	  Changed to check error codes after calls.
02/10/83 by Lindsey Spratt:  Changed to use automatic buffers for local,
	  temporary  copies of leaf_ci_headers.  There is no longer any
	  explicit freeing or allocation of leaf_ci_headers.  Also, fixed to
	  not set the 0-th key_count when doing the "previous key" key_count
	  adjustment and there was no previous key.  This was done by
	  initializing the previous_first_inequal_field_id to 1 instead of 0.
02/28/83 by Lindsey Spratt:  Changed to use version 3 of the index_cursor.
04/03/83 by Lindsey L. Spratt:  Changed to call
            data_mgmt_util_$compare_string_to_string instead of
            im_compare_key_and_key.
11/08/83 by Lindsey L. Spratt:  Changed to use the "buffered" access method.
            Also, converted to use the "call ERROR RETURN(code)" protocol.
06/07/84 by Matthew Pierret:  Re-named cm_$setup_buffered_ci to
            cm_$setup_ci_buffer, cm_$simple_get_buffered_element to
            cm_$simple_get_from_ci_buffer, cm_$get_element_buffered to
            cm_$get_from_ci_buffer.
            Changed to use data_format_util_ instead of data_mgmt_util_.
10/13/84 by Lindsey L. Spratt:  Added the current_key_string_length to the
            calling sequence.  This is necessary for using a caller supplied
            key.
10/29/84 by Lindsey L. Spratt:



            Changed to use version 2 key_count_array.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

im_update_key_counts:
   proc (p_node_buffer_ptr, p_index_cursor_ptr, p_work_area_ptr, p_field_table_ptr, p_is_being_inserted,
        p_leaf_ci_header_ptr, p_current_key_id, p_current_key_ptr, p_current_key_string_length, p_key_count_array_ptr,
        p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_node_buffer_ptr      ptr parameter;
      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_field_table_ptr      ptr parameter;
      dcl	    p_is_being_inserted    bit (1) aligned parameter;
      dcl	    p_leaf_ci_header_ptr   ptr parameter;
      dcl	    p_current_key_id       bit (36) aligned parameter;
      dcl	    p_current_key_ptr      ptr parameter;
      dcl	    p_current_key_string_length
			       fixed bin (35) parameter;
      dcl	    p_key_count_array_ptr  ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    count_idx	       fixed bin;
      dcl	    current_key_ptr	       ptr init (null);
      dcl	    current_key_string_length
			       fixed bin (35) init (0);
      dcl	    current_node_buffer_ptr
			       ptr init (null);

      dcl	    (local_main_ci_header_buffer, local_temp_ci_header_buffer)
			       bit (LEAF_CI_HEADER_LENGTH_IN_BITS) aligned;
      dcl	    local_node_buffer      bit (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES * BITS_PER_BYTE) aligned;

      dcl	    temp_key_ptr	       init (null) ptr;
      dcl	    temp_key_string_length fixed bin (35) init (0);
      dcl	    temp_leaf_ci_header_ptr
			       ptr init (null);
      dcl	    (previous_first_inequal_field_id, next_first_inequal_field_id)
			       fixed bin (17) init (1);
      dcl	    work_area_ptr	       ptr init (null);

/* Based */

      dcl	    temp_key	       bit (temp_key_string_length) based (temp_key_ptr);
      dcl	    current_key	       bit (current_key_string_length) based (current_key_ptr);
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (null, bin)	       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    ALL_FIELDS	       init (-1) fixed bin (17) internal static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin (17) internal static options (constant);

      dcl	    myname	       init ("im_update_key_counts") char (32) varying internal static options (constant);

/* Entry */

      dcl	    data_format_util_$compare_string_to_string
			       entry (ptr, ptr, fixed bin (24), ptr, fixed bin (24), fixed bin unal, fixed bin,
			       bit (1) aligned, bit (1) aligned, fixed bin (35));


      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$wrong_cursor_type,
	    dm_error_$bad_first_key_idx,
	    dm_error_$bad_last_key_idx,
	    dm_error_$bad_leaf_node
	    )		       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;
      work_area_ptr = p_work_area_ptr;
      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected a an index type cursor, type ^d,. Received a cursor of type ^d.", INDEX_CURSOR_TYPE,
	      index_cursor.type);

      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      current_node_buffer_ptr = p_node_buffer_ptr;
      element_id_string = p_current_key_id;
      leaf_ci_header_ptr = p_leaf_ci_header_ptr;

      on cleanup call FINISH;


      if leaf_ci_header_ptr = null
      then
         do;
	  leaf_ci_header_ptr = addr (local_main_ci_header_buffer);
	  call GET_CI_HEADER (current_node_buffer_ptr, (element_id.control_interval_id), leaf_ci_header_ptr);
         end;

      current_key_ptr = p_current_key_ptr;
      current_key_string_length = p_current_key_string_length;
      if current_key_ptr = null
      then call GET_KEY (current_node_buffer_ptr, element_id_string, current_key_ptr, current_key_string_length);


      key_count_array_ptr = p_key_count_array_ptr;
      call CHECK_VERSION_CHAR (key_count_array.version, KEY_COUNT_ARRAY_VERSION_2, "key_count_array");

/* check previous key. */

      element_id.index = element_id.index - 1;
      if element_id.index < leaf_ci_header.common.key_range.first
      then
         do;
	  element_id.control_interval_id = leaf_ci_header.common.previous_id;
	  if element_id.control_interval_id ^= 0
	  then
	     do;

	        current_node_buffer_ptr = addr (local_node_buffer);
	        call SETUP_NODE_BUFFER ((element_id.control_interval_id), current_node_buffer_ptr);

	        temp_leaf_ci_header_ptr = addr (local_temp_ci_header_buffer);
	        call GET_CI_HEADER (current_node_buffer_ptr, element_id.control_interval_id, temp_leaf_ci_header_ptr);
	        element_id.index = temp_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.last;
	     end;
         end;
      else temp_leaf_ci_header_ptr = leaf_ci_header_ptr;

      if temp_leaf_ci_header_ptr ^= null
      then
         do;
	  call GET_KEY (current_node_buffer_ptr, element_id_string, temp_key_ptr, temp_key_string_length);
	  call data_format_util_$compare_string_to_string (p_field_table_ptr, current_key_ptr,
	       (current_key_string_length), temp_key_ptr, (temp_key_string_length), (ALL_FIELDS),
	       previous_first_inequal_field_id, "0"b, "0"b, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  do count_idx = 1 to previous_first_inequal_field_id - 1;
	     key_count_array.count (count_idx) =
		key_count_array.count (count_idx) + 1 + -2 * bin (^p_is_being_inserted);
	  end;
         end;

      if temp_key_ptr ^= null
      then
         do;

	  free temp_key_ptr -> temp_key in (work_area);
	  temp_key_ptr = null;
         end;

      element_id_string = p_current_key_id;		/* Reset to the current key. */

/* Check for duplications with next key. */

      current_node_buffer_ptr = p_node_buffer_ptr;

      element_id.index = element_id.index + 1;
      if element_id.index > leaf_ci_header.common.key_range.last
      then
         do;
	  element_id.control_interval_id = leaf_ci_header.common.next_id;
	  if element_id.control_interval_id ^= 0
	  then
	     do;

	        current_node_buffer_ptr = addr (local_node_buffer);
	        call SETUP_NODE_BUFFER ((element_id.control_interval_id), current_node_buffer_ptr);
	        temp_leaf_ci_header_ptr = addr (local_temp_ci_header_buffer);
	        call GET_CI_HEADER (current_node_buffer_ptr, element_id.control_interval_id, temp_leaf_ci_header_ptr);
						/* If a ci_header was gotten for the previous key, this would overwrite it. */
	        element_id.index = temp_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.first;
	     end;
         end;
      else temp_leaf_ci_header_ptr = leaf_ci_header_ptr;

      if element_id.control_interval_id ^= 0
      then
         do;
	  call GET_KEY (current_node_buffer_ptr, element_id_string, temp_key_ptr, temp_key_string_length);

	  call data_format_util_$compare_string_to_string (p_field_table_ptr, current_key_ptr,
	       (current_key_string_length), temp_key_ptr, (temp_key_string_length), (ALL_FIELDS),
	       next_first_inequal_field_id, "0"b, "0"b, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  do count_idx = max (1, previous_first_inequal_field_id) to next_first_inequal_field_id - 1;
	     key_count_array.count (count_idx) =
		key_count_array.count (count_idx) + 1 + -2 * bin (^p_is_being_inserted);
	  end;
         end;

      if temp_key_ptr ^= null
      then free temp_key_ptr -> temp_key in (work_area);
      temp_key_ptr = null;

      key_count_array.count (0) = key_count_array.count (0) + 1 + -2 * bin (^p_is_being_inserted);
MAIN_RETURN:
      call FINISH;
      return;
%page;
FINISH:
   proc;
      if current_key_ptr ^= null & p_current_key_ptr ^= current_key_ptr
      then free current_key in (work_area);
      if temp_key_ptr ^= null
      then free temp_key in (work_area);
   end FINISH;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35);
      call FINISH;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned parameter;
      dcl	    p_expected_version     char (8) aligned parameter;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION_CHAR;
%page;
GET_CI_HEADER:
   proc (gch_p_node_buffer_ptr, gch_p_control_interval_id, gch_p_leaf_ci_header_ptr);
      dcl	    gch_p_node_buffer_ptr  ptr;
      dcl	    gch_p_control_interval_id
			       fixed bin (24) unsigned unal;
      dcl	    gch_p_leaf_ci_header_ptr
			       ptr;
      dcl	    gch_code	       fixed bin (35) init (0);


      element_id.control_interval_id = gch_p_control_interval_id;
      element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;

      call collection_manager_$simple_get_from_ci_buffer (gch_p_node_buffer_ptr, index_cursor.collection_id,
	 element_id_string, gch_p_leaf_ci_header_ptr, length (unspec (gch_p_leaf_ci_header_ptr -> leaf_ci_header)), (0),
	 gch_code);
      if gch_code ^= 0
      then call ERROR_RETURN (gch_code);

      if ^gch_p_leaf_ci_header_ptr -> common_ci_header.is_leaf
      then call ERROR_RETURN (dm_error_$bad_leaf_node);
      else if gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.first < 0
      then call ERROR_RETURN (dm_error_$bad_first_key_idx);
      else if gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.last
	      < gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.first
      then call ERROR_RETURN (dm_error_$bad_last_key_idx);

      return;
%include dm_element_id;
   end GET_CI_HEADER;
%page;
GET_KEY:
   proc (gk_p_node_buffer_ptr, gk_p_key_id_string, gk_p_leaf_key_ptr, gk_p_leaf_key_string_length);
      dcl	    gk_p_node_buffer_ptr   ptr;
      dcl	    gk_p_key_id_string     bit (36) aligned;
      dcl	    gk_p_leaf_key_ptr      ptr;
      dcl	    gk_p_leaf_key_string_length
			       fixed bin (35);
      dcl	    gk_code	       fixed bin (35);


      call collection_manager_$get_from_ci_buffer (gk_p_node_buffer_ptr, index_cursor.file_opening_id,
	 index_cursor.collection_id, gk_p_key_id_string, gk_p_leaf_key_ptr, gk_p_leaf_key_string_length, work_area_ptr,
	 "0"b, gk_p_leaf_key_ptr, gk_p_leaf_key_string_length, gk_code);
      if gk_code ^= 0
      then call ERROR_RETURN (gk_code);

   end GET_KEY;
%page;
SETUP_NODE_BUFFER:
   proc (snb_p_control_interval_id, snb_p_buffer_ptr);
      dcl	    snb_p_control_interval_id
			       fixed bin (24) unsigned;
      dcl	    snb_p_buffer_ptr       ptr;

      dcl	    snb_code	       fixed bin (35) init (0);

      call collection_manager_$setup_ci_buffer (index_cursor.file_opening_id, index_cursor.collection_id,
	 snb_p_control_interval_id, snb_p_buffer_ptr, CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES * BITS_PER_BYTE,
	 snb_code);
      if snb_code ^= 0
      then call ERROR_RETURN (snb_code);

   end SETUP_NODE_BUFFER;
%page;
%include sub_err_flags;
%page;
%include dm_im_cursor;
%page;
%include dm_im_ci_header;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_key_count_array;
%page;
%include dm_ci_lengths;
   end im_update_key_counts;
