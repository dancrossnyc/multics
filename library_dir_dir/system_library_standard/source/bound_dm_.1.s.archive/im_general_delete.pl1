/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This module is used to delete a specific key, either a leaf or
     branch.  If the leaf key being deleted is the last key in the node, then
     the node is deleted and im_general_delete is recursively invoked to
     delete its parent key.  If the branch being deleted is not the low branch
     id, then the key is simply deleted and the procedure is done.  If the
     branch being deleted is the low_branch_id and there exist one or more
     keys in the branch node, then the lowest key in the node is deleted and
     its branch is made the low_branch_id, and the procedure is done.  The
     last case is if the branch being deleted is the low_branch_id and there
     are no keys in the branch node (i.e., it is a "degenerate" node).  In
     this situation, the branch node is freed and im_general_delete is
     recursively invoked to delete the parent key.

     This module does not directly modify the contents of a file.  All 
     modifications are actually made by the support routine im_simple_delete.
     
     This module accesses data via the "direct access" method, which involves
     first getting a pointer to a control interval then getting data from it
     by calling collection_manager_$simple_get_by_ci_ptr or
     $get_portion_from_ci_buffer.

     ***** This module must not attempt to modify the contents of the   *****
     ***** current node/control interval.  All modification is done     *****
     ***** in the subroutine im_simple_delete.  This includes both      *****
     ***** modifications via collection_manager_ and via direct access. *****
*/

/* HISTORY:

Written by Lindsey L. Spratt, 08/06/82.
Modified:
10/18/82 by Matthew Pierret:  Added '"s", null, 0' arguments to sub_err_ call
            in check_version.  Updated to use INDEX_CURSOR_VERSION_2 and
            cm_$get_element_portion where appropriate.
11/09/82 by Lindsey Spratt:  Changed calling sequence to remove
	  index_header_ptr.  Changed to set the new root_id via the
	  im_update_opening_info$root_id, rather than doing so directly.
12/10/82 by Lindsey Spratt:  Changed to do a delete_node when deleting the
	  last key in a leaf node, rather than doing a simple_delete.
	  Changed to set the root_id to 0 after deleting the root (leaf)
	  node.  Also, changed to not re-use the ci_header space provided by
	  the  caller when doing a recursive delete on the parent node, but
	  to use a local ci_header.
02/28/83 by Lindsey Spratt:  Changed to use version 3 index_cursor.
04/27/83 by Lindsey L. Spratt:  Fixed to update the parent_id_string of the
            new root node to be "0"b.
04/28/83 by Lindsey L. Spratt:  Fixed to update the parent_id_string of the
            node pointed to by the low_branch_id.
11/07/83 by Lindsey L. Spratt:  CHanged to use the "buffered" technology.
            Also, converted to use the "call ERROR_RETURN(code)" protocol.
03/27/84 by Matthew Pierret:  Changed from the "buffered access" technology
            to the "direct access" technology, in which a pointer to a
            control interval in the file is obtained.  Changed to not
            replace the ci buffer contents after recursively invoking
            itself.  All modifications are actually made by the support
            routine im_simple_delete.
06/07/84 by Matthew Pierret:  Re-named cm_$simple_get_element_ptr to
            cm_$simple_get_by_ci_ptr, cm_$get_element to cm_$get,
            cm_$get_element_portion_buffered to cm_$get_portion_from_ci_buffer,
            cm_$put_element to cm_$modify, PUT_ELEMENT to MODIFY_ELEMENT.
10/28/84 by Lindsey L. Spratt:  Removed dm_im_header.incl.pl1.  Made
            index_opening_info_ptr local to the internal proc which references
            it.
*/

/* format: style2,ind3 */
%page;
im_general_delete:
   proc (p_node_ptr, p_index_cursor_ptr, p_common_ci_header_ptr, p_key_id_string, p_deleted_node, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_node_ptr	       ptr parameter;
      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_common_ci_header_ptr ptr parameter;
      dcl	    p_key_id_string	       bit (36) aligned;
      dcl	    p_deleted_node	       bit (1) aligned;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    local_ci_header_buffer bit (max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS)) aligned;

      dcl	    (node_ptr, parent_node_ptr, parent_branch_ci_header_ptr)
			       ptr init (null);
      dcl	    (parent_node_id, new_root_id)
			       fixed bin (24) uns init (0);
      dcl	    parent_key_id_string   bit (36) aligned;
      dcl	    (new_buffer_was_allocated, deleted_node)
			       bit (1) aligned init ("0"b);
      dcl	    local_key_buffer       bit (BRANCH_KEY_HEADER_LENGTH_IN_BITS) aligned;
      dcl	    local_node_buffer      bit (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES * BITS_PER_BYTE) aligned;


/* Based */
/* Builtin */

      dcl	    (null, addr, length)   builtin;

/* Constant */

      dcl	    DEFAULT_AREA_PTR       init (null) ptr internal static options (constant);
      dcl	    (
	    DEFAULT_ELEMENT_LENGTH init (-1),
	    BITS_PER_BYTE	       init (9)
	    )		       fixed bin (35) internal static options (constant);

      dcl	    myname	       init ("im_general_delete") char (17) internal static options (constant);

/* Entry */

      dcl	    im_get_opening_info    entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    im_update_opening_info$root_id
			       entry (ptr, uns fixed bin (24), fixed bin (35));
      dcl	    im_simple_delete       entry (ptr, ptr, ptr, bit (36) aligned, fixed bin (35));
      dcl	    im_delete_node	       entry (ptr, fixed bin (24) unsigned, ptr, fixed bin (35));
      dcl	    im_general_delete      entry (ptr, ptr, ptr, bit (36) aligned, bit (1) aligned, fixed bin (35));
      dcl	    im_update_branches$single
			       entry (ptr, bit (36) aligned, bit (36) aligned, ptr, uns fixed bin (24) unal,
			       uns fixed bin (12) unal, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$wrong_cursor_type,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;
      p_deleted_node = "0"b;
      node_ptr = p_node_ptr;
      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected an ""index"" type cursor (type ^d).  
Received a cursor of type ^d instead.", INDEX_CURSOR_TYPE, index_cursor.type);

      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      common_ci_header_ptr = p_common_ci_header_ptr;

      if common_ci_header.is_leaf
      then
         do;
	  leaf_ci_header_ptr = common_ci_header_ptr;
	  if leaf_ci_header.common.key_range.last > leaf_ci_header.common.key_range.first
	  then /* There is more than one key in the ci. */
	     do;
	        call im_simple_delete (node_ptr, index_cursor_ptr, leaf_ci_header_ptr, p_key_id_string, p_code);
	        if p_code ^= 0
	        then call ERROR_RETURN (p_code);
	     end;
	  else
	     do;
	        parent_key_id_string = leaf_ci_header.common.parent_id_string;

	        call im_delete_node (index_cursor_ptr, (addr (p_key_id_string) -> element_id.control_interval_id),
		   common_ci_header_ptr, p_code);
	        if p_code ^= 0
	        then call ERROR_RETURN (p_code);

	        common_ci_header.key_range.first, common_ci_header.key_range.last = 0;
	        p_deleted_node = "1"b;		/* To indicate that the current leaf node is empty and gone. */
	        if parent_key_id_string = "0"b
	        then call UPDATE_ROOT_ID (0);
	        else
		 do;

		    parent_branch_ci_header_ptr = addr (local_ci_header_buffer);
		    call GET_PARENT_NODE ((addr (parent_key_id_string) -> element_id.control_interval_id),
		         parent_node_id, parent_node_ptr);
		    call GET_CI_HEADER_PTR (parent_node_ptr, parent_node_id, parent_branch_ci_header_ptr);

		    call im_general_delete (parent_node_ptr, index_cursor_ptr, parent_branch_ci_header_ptr,
		         parent_key_id_string, deleted_node, p_code);
		    if p_code ^= 0
		    then call ERROR_RETURN (p_code);
		 end;
	     end;
         end;
      else if common_ci_header.parent_id_string = "0"b
	      & common_ci_header.key_range.first = common_ci_header.key_range.last
	      & common_ci_header.key_range.first > 0
      then
         do;					/* Current node is the root node, and the "upcoming" */
						/* deletion will leave it "degenerate".  Rather than */
						/* have a degenerate root node, this root node is deleted */
						/* and the single child of its degenerate form is made */
						/* the new root node. */
	  branch_ci_header_ptr = common_ci_header_ptr;

	  if addr (p_key_id_string) -> element_id.index > 0
	  then new_root_id = branch_ci_header.low_branch_id;
	  else
	     do;
	        bk_string_length = 0;
	        element_id.control_interval_id = addr (p_key_id_string) -> element_id.control_interval_id;
	        element_id.index = branch_ci_header.common.key_range.first;
	        call collection_manager_$get_portion_from_ci_buffer (node_ptr, index_cursor.file_opening_id,
		   index_cursor.collection_id, element_id_string, addr (local_key_buffer), length (local_key_buffer),
		   null, 1, BRANCH_KEY_HEADER_LENGTH_IN_BITS, new_buffer_was_allocated, branch_key_ptr, (0), p_code);
	        if p_code ^= 0
	        then call ERROR_RETURN (p_code);
	        new_root_id = branch_key.branch_id;
	     end;
	  call im_delete_node (index_cursor_ptr, (addr (p_key_id_string) -> element_id.control_interval_id),
	       common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  p_deleted_node = "1"b;

/* The node which is to become the new root node must have its
parent_id_string updated to be "0"b, indicating it is the root node. */

	  common_ci_header_ptr = addr (local_ci_header_buffer);
	  call GET_CI_HEADER ((new_root_id), common_ci_header_ptr);

	  common_ci_header.parent_id_string = "0"b;

	  call PUT_CI_HEADER ((new_root_id), common_ci_header_ptr);

/* The root_id values in the index_opening_info and the index header must be
updated. */

	  call UPDATE_ROOT_ID (new_root_id);
         end;
      else if addr (p_key_id_string) -> element_id.index > 0
      then call im_simple_delete (node_ptr, index_cursor_ptr, common_ci_header_ptr, p_key_id_string, p_code);
      else if common_ci_header.key_range.first > 0
      then
         do;
	  branch_ci_header_ptr = common_ci_header_ptr;

	  bk_string_length = 0;
	  element_id.control_interval_id = addr (p_key_id_string) -> element_id.control_interval_id;
	  element_id.index = branch_ci_header.common.key_range.first;
	  call collection_manager_$get_portion_from_ci_buffer (node_ptr, index_cursor.file_opening_id,
	       index_cursor.collection_id, element_id_string, addr (local_key_buffer), length (local_key_buffer), null,
	       1, BRANCH_KEY_HEADER_LENGTH_IN_BITS, new_buffer_was_allocated, branch_key_ptr, (0), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  branch_ci_header.low_branch_id = branch_key.branch_id;
	  call im_simple_delete (node_ptr, index_cursor_ptr, branch_ci_header_ptr, element_id_string, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

/* im_simple_delete knows to update the branches grater than or equal to
element_id.index, but the 0'th branch (the low_branch_id) must also be
updated. */

	  call im_update_branches$single (node_ptr, index_cursor.file_opening_id, index_cursor.collection_id,
	       branch_ci_header_ptr, element_id.control_interval_id, 0, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

         end;
      else
         do;
	  parent_key_id_string = common_ci_header.parent_id_string;

	  call im_delete_node (index_cursor_ptr, (addr (p_key_id_string) -> element_id.control_interval_id),
	       common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  p_deleted_node = "1"b;

	  common_ci_header.key_range.first, common_ci_header.key_range.last = 0;
						/* This indicates that the node in question is empty (gone, as well). */

	  call GET_PARENT_NODE ((addr (parent_key_id_string) -> element_id.control_interval_id), parent_node_id,
	       parent_node_ptr);

	  parent_branch_ci_header_ptr = addr (local_ci_header_buffer);
	  call GET_CI_HEADER_PTR (parent_node_ptr, parent_node_id, parent_branch_ci_header_ptr);

	  call im_general_delete (parent_node_ptr, index_cursor_ptr, parent_branch_ci_header_ptr, parent_key_id_string,
	       deleted_node, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

         end;

MAIN_RETURN:
      return;
%page;
FINISH:
   proc ();
   end FINISH;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35);
      call FINISH;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;


CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ^d of the ^a structure. Received version ^d instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
UPDATE_ROOT_ID:
   proc (uri_p_root_id);
      dcl	    uri_p_root_id	       fixed bin (24) uns;
      dcl	    uri_code	       fixed bin (35) init (0);
      dcl	    uri_index_opening_info_ptr
			       ptr init (null);

      call im_get_opening_info (index_cursor.file_opening_id, index_cursor.collection_id, uri_index_opening_info_ptr,
	 uri_code);
      if uri_code ^= 0
      then call ERROR_RETURN (uri_code);

      call im_update_opening_info$root_id (uri_index_opening_info_ptr, uri_p_root_id, uri_code);
      if uri_code ^= 0
      then call ERROR_RETURN (uri_code);
   end UPDATE_ROOT_ID;
%page;
GET_CI_HEADER:
   proc (gch_p_control_interval_id, gch_p_ci_header_ptr);
      dcl	    gch_p_control_interval_id
			       fixed bin (24) unsigned;
      dcl	    gch_p_ci_header_ptr    ptr;
      dcl	    gch_p_node_ptr	       ptr;
      dcl	    gch_by_node_ptr	       bit (1) aligned;

      gch_by_node_ptr = "0"b;
      goto GCH_JOIN;

GET_CI_HEADER_PTR:
   entry (gch_p_node_ptr, gch_p_control_interval_id, gch_p_ci_header_ptr);
      gch_by_node_ptr = "1"b;
GCH_JOIN:
      if gch_by_node_ptr
      then call GET_ELEMENT_PTR (gch_p_node_ptr, gch_p_control_interval_id, (DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT),
	      gch_p_ci_header_ptr, max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS), (0));
      else call GET_ELEMENT (gch_p_control_interval_id, (DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT), gch_p_ci_header_ptr,
	      max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS), (0));
   end GET_CI_HEADER;




PUT_CI_HEADER:
   proc (pch_p_control_interval_id, pch_p_ci_header_ptr);
      dcl	    pch_p_control_interval_id
			       fixed bin (24) unsigned;
      dcl	    pch_p_ci_header_ptr    ptr;
      dcl	    pch_p_node_ptr	       ptr;

      call MODIFY_ELEMENT (pch_p_control_interval_id, (DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT),
	 DEFAULT_ELEMENT_LENGTH, pch_p_ci_header_ptr);
   end PUT_CI_HEADER;
%page;
GET_ELEMENT:
   proc (ge_p_control_interval_id, ge_p_slot_index, ge_p_buffer_ptr, ge_p_buffer_length, ge_p_element_length);

      dcl	    ge_p_control_interval_id
			       fixed bin (24) uns;
      dcl	    ge_p_slot_index	       fixed bin (12) uns;
      dcl	    ge_p_buffer_ptr	       ptr;
      dcl	    ge_p_buffer_length     fixed bin (35);
      dcl	    ge_p_element_length    fixed bin (35);
      dcl	    ge_p_node_ptr	       ptr;

      dcl	    ge_code	       fixed bin (35) init (0);

      dcl	    1 ge_element_id	       aligned based (addr (ge_element_id_string)) like element_id;
      dcl	    ge_element_id_string   bit (36) aligned;
      dcl	    ge_by_node_ptr	       bit (1) aligned;

      ge_by_node_ptr = "0"b;
      goto GE_JOIN;

GET_ELEMENT_PTR:
   entry (ge_p_node_ptr, ge_p_control_interval_id, ge_p_slot_index, ge_p_buffer_ptr, ge_p_buffer_length,
        ge_p_element_length);

      ge_by_node_ptr = "1"b;
GE_JOIN:
      ge_element_id.control_interval_id = ge_p_control_interval_id;
      ge_element_id.index = ge_p_slot_index;

      if ge_by_node_ptr
      then call collection_manager_$simple_get_by_ci_ptr (ge_p_node_ptr, index_cursor.collection_id, ge_element_id_string,
	      ge_p_buffer_ptr, ge_p_buffer_length, ge_p_element_length, ge_code);
      else call collection_manager_$get (index_cursor.file_opening_id, index_cursor.collection_id, ge_element_id_string,
	      (0), ge_p_buffer_ptr, ge_p_buffer_length, null, ("0"b), null, ge_p_element_length, ge_code);
      if ge_code ^= 0
      then call ERROR_RETURN (ge_code);

   end GET_ELEMENT;
%page;
MODIFY_ELEMENT:
   proc (me_p_control_interval_id, me_p_slot_index, me_p_element_length, me_p_element_ptr);
      dcl	    me_p_control_interval_id
			       fixed bin (24) uns;
      dcl	    me_p_slot_index	       fixed bin (12) uns;
      dcl	    me_p_element_length    fixed bin (35);
      dcl	    me_p_element_ptr       ptr;
      dcl	    me_p_node_ptr	       ptr;

      dcl	    me_code	       fixed bin (35) init (0);

      dcl	    1 me_element_id	       aligned based (addr (me_element_id_string)) like element_id;
      dcl	    me_element_id_string   bit (36) aligned;

      me_element_id.control_interval_id = me_p_control_interval_id;
      me_element_id.index = me_p_slot_index;

      call collection_manager_$modify (index_cursor.file_opening_id, index_cursor.collection_id, me_p_element_ptr,
	 me_p_element_length, me_element_id_string, (0), me_code);
      if me_code ^= 0
      then call ERROR_RETURN (me_code);

   end MODIFY_ELEMENT;
%page;
GET_PARENT_NODE:
   proc (gpn_p_node_id, gpn_p_parent_node_id, gpn_p_parent_node_ptr);

      dcl	    (gpn_p_node_id, gpn_p_parent_node_id)
			       fixed bin (24) unsigned;
      dcl	    gpn_p_parent_node_ptr  ptr;

      dcl	    gpn_code	       fixed bin (35) init (0);

      gpn_p_parent_node_id = gpn_p_node_id;

      call collection_manager_$get_control_interval_ptr (index_cursor.file_opening_id, index_cursor.collection_id,
	 gpn_p_parent_node_id, gpn_p_parent_node_ptr, gpn_code);
      if gpn_code ^= 0
      then call ERROR_RETURN (gpn_code);

   end GET_PARENT_NODE;
%page;
%include dm_im_cursor;
%page;
%include dm_im_key;
%page;
%include dm_im_ci_header;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;
   end im_general_delete;
