/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  module  update  the index_opening_info data.  Separate entries
     are provided for updating  the  root_id  and  the  key_count_array.
     For the key_count_array entry, this module maintains an increments array.
     This is an array of increments that are to be applied to the actual key
     count array in the index when the transaction commits.  When this entry is
     called, the key count array that is passed (pointed to by pkca_ptr) is
     compared to the opening key count array (pointed to by okca_ptr), the
     differences are applied to the internal increments array (pointed to by
     ikca_ptr), and the opening key count array is updated.  If increments
     key_count_array has never been allocated, that is, this is the first time
     this entry has been called for this index since this index has been opened
     in this process, then the increments structure is allocated in the DM free
     area.  If this is the first time this entry has been called for this index
     since the current transaction began or since a rollback occured, a
     postcommit handler is written that will cause the file key count array
     to be updated with the increments key_count_array at postcommit time.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 10/28/82.
Modified:
12/09/82 by Lindsey Spratt: Changed to use dm_key_count_array incl file.
04/28/83 by Matthew Pierret:  Changed $key_count_array to use the new
            collection_manager_$put_unprotected_header.  This entry does not
            obtain an exclusive lock while writing the header.  This is
            considered safe because only the information in the header
            pertaining to key_counts is changed, and this information is not
            critical.  This change was made in the hopes of relieving a major
            concurrency bottleneck.
10/27/84 by Lindsey L. Spratt:  Changed to use version 2 index_opening_info,
            version 4 index_header, version 2 key_count_array.  Changed to put
            the key_count_array (rather than modify it) when the
            key_count_array was not previously in the index (this is the
            second step in the conversion of the index to using version 4
            index_headers from version 3).
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
03/11/85 by R. Michael Tague:  Changed the $key_count_array entry to manage a
            increments structure instead of simply replacing the 
	  key_count_array in the collection.  A postcommit handler is written
	  to insure that the key_count_array is eventually updated.  Removed
	  the index_header automatic version conversion.
03/25/85 by R. Michael Tague:  Changed to update the key count array of 
	  unprotected files by calling UPDATE_UNPROTECTED_COUNTS and to 
	  maintain index_opening_info.flags.key_count_unprotected_file.
*/

/* format: style2,ind3 */
im_update_opening_info$key_count_array:
   proc (p_index_opening_info_ptr, p_key_count_array_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_key_count_array_ptr  ptr parameter;
      dcl	    p_root_id	       fixed bin (24) uns parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (update_key_counts, update_root_id)
			       bit (1) aligned init ("0"b);
      dcl	    pkca_ptr	       ptr;		/* parameter (passed) kca ptr */
      dcl	    okca_ptr	       ptr;		/* opening info kca ptr */
      dcl	    ikca_ptr	       ptr;		/* increments kca ptr */
      dcl	    1 increment_info       aligned like cm_increment_info;

/* Based */

      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (addr, bin, length, null, rel, unspec)
			       builtin;

/* Constant */

      dcl	    BITS_PER_WORD	       fixed bin init (36) internal static options (constant);
      dcl	    HEADER_COLLECTION_ID   bit (36) aligned init ("000000000001"b3) internal static options (constant);
      dcl	    myname	       init ("im_update_opening_info") char (32) varying internal static options (constant);
      dcl	    work_area_ptr	       ptr init (null) internal static;

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$file_must_be_protected
			       fixed bin (35) ext static;
      dcl	    dm_error_$programming_error
			       fixed bin (35) ext static;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext static;

/* END OF DECLARATIONS */

/* key_count_array:
   entry (p_index_opening_info_ptr, p_key_count_array_ptr, p_code);
*/
      update_key_counts = "1"b;
      pkca_ptr = p_key_count_array_ptr;
      goto JOIN;

root_id:
   entry (p_index_opening_info_ptr, p_root_id, p_code);
      update_root_id = "1"b;
JOIN:
      p_code = 0;
      index_opening_info_ptr = p_index_opening_info_ptr;
      call CHECK_VERSION (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      index_header_ptr = index_opening_info.index_header_ptr;
      call CHECK_VERSION (index_header.version, INDEX_HEADER_VERSION_4, "index_header");

      if update_key_counts
      then
         do;
	  call CHECK_VERSION (pkca_ptr -> key_count_array.version, KEY_COUNT_ARRAY_VERSION_2, "passed key_count_array");
	  okca_ptr = index_opening_info.key_count_array_ptr;
	  call CHECK_VERSION (okca_ptr -> key_count_array.version, KEY_COUNT_ARRAY_VERSION_2,
	       "opening info key_count_array");
	  if index_opening_info.key_count_unprotected_file
	  then call UPDATE_UNPROTECTED_COUNTS ();
	  else call UPDATE_PROBABLY_PROTECTED_COUNTS ();
         end;
      else
         do;
	  index_header.root_id = p_root_id;
	  call collection_manager_$put_header (index_opening_info.file_opening_id, index_opening_info.collection_id,
	       index_header_ptr, length (unspec (index_header)), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;
MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned parameter;
      dcl	    p_expected_version     char (8) aligned parameter;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
/* *************************************************************************
   * SET_UP_KEY_INCREMENTS_ARRAY - This procedure allocates a key count    *
   * array in the DM work area the same size as the opening info key count *
   * array.  This allocated array is used to hold the key count increments *
   * that the postcommit handler uses to update the index's key count	     *
   * array.						     *
   *							     *
   * A pointer to the created array is returned.			     *
   ************************************************************************* */

SET_UP_KEY_INCREMENTS_ARRAY:
   proc (p_ikca_ptr);
      dcl	    p_ikca_ptr	       ptr;

      if work_area_ptr = null
      then work_area_ptr = get_dm_free_area_ ();
      kca_number_of_counts = okca_ptr -> key_count_array.number_of_counts;
      alloc key_count_array in (work_area);
      key_count_array.version = KEY_COUNT_ARRAY_VERSION_2;
      unspec (key_count_array.count) = ""b;

      p_ikca_ptr = addr (key_count_array);
   end SET_UP_KEY_INCREMENTS_ARRAY;
%page;
/* *************************************************************************
   * UPDATE_INCREMENTS_ARRAY - This procedure updates the increments key   *
   * count array with the difference of parameter key count and opening    *
   * key count.  Afterwards the opening key count array is set equal to    *
   * the passed (parameter) key count array.			     *
   ************************************************************************* */

UPDATE_INCREMENTS_ARRAY:
   proc ();

      dcl	    uia_key_count_index    fixed bin;

      do uia_key_count_index = lbound (okca_ptr -> key_count_array.count, 1)
	 to hbound (okca_ptr -> key_count_array.count, 1);
         ikca_ptr -> key_count_array.count (uia_key_count_index) =
	    ikca_ptr -> key_count_array.count (uia_key_count_index)
	    + (pkca_ptr -> key_count_array.count (uia_key_count_index)
	    - okca_ptr -> key_count_array.count (uia_key_count_index));
         okca_ptr -> key_count_array.count (uia_key_count_index) =
	    pkca_ptr -> key_count_array.count (uia_key_count_index);
      end;
   end UPDATE_INCREMENTS_ARRAY;
%page;
/* *************************************************************************
   * UPDATE_PROBABLY_PROTECTED_COUNTS - This procedure updates the key     *
   * count array for protected files.  The first time this procedure is    *
   * called for a given file, a postcommit handler is written.  If the     *
   * handler cannot be written because the file is not protected then      *
   * UPDATE_UNPROTECTED_COUNTS is called and index_opening_info.flags.     *
   * key_count_unprotected_file is set so that future updates on this file *
   * will use UPDATE_UNPROTECTED_COUNTS.			     *
   ************************************************************************* */

UPDATE_PROBABLY_PROTECTED_COUNTS:
   proc ();

      dcl	    uppc_code	       fixed bin (35);

      ikca_ptr = index_opening_info.key_count_increments_ptr;
      if ikca_ptr = null
      then
         do;
	  call SET_UP_KEY_INCREMENTS_ARRAY (ikca_ptr);
	  index_opening_info.key_count_increments_ptr = ikca_ptr;
         end;
      else call CHECK_VERSION (ikca_ptr -> key_count_array.version, KEY_COUNT_ARRAY_VERSION_2,
	      "increment key_count_array");

      if okca_ptr -> key_count_array.number_of_counts ^= pkca_ptr -> key_count_array.number_of_counts
	 | okca_ptr -> key_count_array.number_of_counts ^= ikca_ptr -> key_count_array.number_of_counts
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/The sizes of the opening key_count_array, the passed key_count_array, and^/the increments key_count_array arrays are inconsistant."
	      );

      if ^index_opening_info.flags.key_count_postcommit_written
      then
         do;
	  call WRITE_INCREMENTS_POSTCOMMIT_HANDLER (uppc_code);
	  if uppc_code = dm_error_$file_must_be_protected
	  then
	     do;
	        call UPDATE_UNPROTECTED_COUNTS ();
	        index_opening_info.flags.key_count_unprotected_file = "1"b;
	     end;
	  else if uppc_code ^= 0
	  then call ERROR_RETURN (uppc_code);
	  else
	     do;
	        index_opening_info.flags.key_count_postcommit_written = "1"b;
	        call UPDATE_INCREMENTS_ARRAY ();
	     end;
         end;
      else call UPDATE_INCREMENTS_ARRAY ();
   end UPDATE_PROBABLY_PROTECTED_COUNTS;
%page;
/* *************************************************************************
   * UPDATE_UNPROTECTED_COUNTS - Updates the opening info key count array  *
   * and then writes this array out to the unprotected index file.	     *
   ************************************************************************* */

UPDATE_UNPROTECTED_COUNTS:
   proc ();

      dcl	    upc_code	       fixed bin (35);

      okca_ptr -> key_count_array.count = pkca_ptr -> key_count_array.count;
      call collection_manager_$modify_unprotected (index_opening_info.file_opening_id, HEADER_COLLECTION_ID,
	 okca_ptr, length (unspec (okca_ptr -> key_count_array)), unspec (index_header.key_count_array_element_id), (0),
	 upc_code);
      if upc_code ^= 0
      then call ERROR_RETURN (upc_code);
   end UPDATE_UNPROTECTED_COUNTS;
%page;
/* *************************************************************************
   * WRITE_INCREMENTS_POSTCOMMIT_HANDLER - Builds the increment info       *
   * structure and tries to write the increments postcommit handler.  The  *
   * postcommit handler is given a pointer to the local increments array   *
   * so that an update can be made using stacq's at postcommit time.	     *
   ************************************************************************* */

WRITE_INCREMENTS_POSTCOMMIT_HANDLER:
   proc (wiph_code);
      dcl	    wiph_code	       fixed bin (35);

      unspec (ikca_ptr -> key_count_array.count) = ""b;
      unspec (increment_info) = ""b;
      increment_info.version = CM_INCREMENT_INFO_VERSION_1;
      increment_info.increments_ptr = ikca_ptr;
      increment_info.offset_in_bits =
	 BITS_PER_WORD * (bin (rel (addr (ikca_ptr -> key_count_array.count (0)))) - bin (rel (ikca_ptr)));
      increment_info.number_of_words =
	 hbound (ikca_ptr -> key_count_array.count, 1) - lbound (ikca_ptr -> key_count_array.count, 1) + 1;
      call collection_manager_$postcommit_increments (index_opening_info.file_opening_id, HEADER_COLLECTION_ID,
	 unspec (index_header.key_count_array_element_id), addr (increment_info), wiph_code);
   end WRITE_INCREMENTS_POSTCOMMIT_HANDLER;
%page;
%include dm_cm_increment_info;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_element_id;
%page;
%include dm_key_count_array;
%page;
%include dm_im_header;
%page;
%include dm_im_opening_info;
%page;
%include sub_err_flags;

   end im_update_opening_info$key_count_array;
