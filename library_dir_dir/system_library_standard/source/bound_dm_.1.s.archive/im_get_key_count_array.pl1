/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
         This  subroutine  returns  the  key_count_array  for  a  given index
     collection.
*/

/* HISTORY:
Written by Lindsey L. Spratt, 12/06/82.
Modified:
02/28/83 by Lindsey Spratt:  Changed to use version 3 of the index_cursor.
03/23/83 by Lindsey Spratt:  Changed to use version 2 of the field_table.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3.
10/28/84 by Lindsey L. Spratt:  Changed to use version 4 index_opening_info.
            Changed to use ERROR_RETURN; Changed to simply return
            index_opening_info.key_count_array_ptr.
01/10/85 by Lindsey L. Spratt:  Removed some unreferenced include files.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
*/

/* format: style2,ind3 */

im_get_key_count_array:
   proc (p_index_cursor_ptr, p_work_area_ptr, p_key_count_array_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_key_count_array_ptr  ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    work_area_ptr	       ptr init (null);

/* Based */

      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (addr, null)	       builtin;

/* Constant */

      dcl	    myname	       init ("im_get_key_count_array") char (32) varying internal static options (constant);

/* Entry */

      dcl	    im_get_opening_info    entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      index_cursor_ptr = p_index_cursor_ptr;
      work_area_ptr = p_work_area_ptr;
      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      call im_get_opening_info (index_cursor.file_opening_id, index_cursor.collection_id, index_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      call CHECK_VERSION_CHAR (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      call CHECK_VERSION_CHAR (index_opening_info.key_count_array_ptr -> key_count_array.version,
	 KEY_COUNT_ARRAY_VERSION_2, "key_count_array");

      kca_number_of_counts = index_opening_info.key_count_array_ptr -> key_count_array.number_of_counts;

      alloc key_count_array in (work_area);
      key_count_array = index_opening_info.key_count_array_ptr -> key_count_array;

      p_key_count_array_ptr = key_count_array_ptr;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
%include sub_err_flags;
%page;
%include dm_key_count_array;
%page;
%include dm_im_opening_info;
%page;
%include dm_im_cursor;
   end im_get_key_count_array;
