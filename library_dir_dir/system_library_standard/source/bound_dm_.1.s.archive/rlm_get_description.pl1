/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         Return  a  description of the specified relation.  The relation must
     be open, and the description is based solely on  the  relation's  opening
     information (relation_opening_info, attribute_info, relation_header and
     index_attribute_map).
*/

/* HISTORY:

Written by Matthew Pierret, 09/22/82.
Modified:
12/09/82 by Matthew Pierret:  Added setting of record_collection_id.
            Changed to RELATION_DESCRIPTION_VERSION_2.
02/18/83 by Matthew Pierret:  Changed to RELATION_DESCRIPTION_VERSION_3,
            which contains attribute names. Currently attribute names are
            not supported in index_attribute_map, so a canonical name "x"
            is returned for all attributes.
03/01/83 by Matthew Pieret:  Changed to use relation_opening_info instead of
            relation_info.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
11/01/84 by Stanford S. Cox:  LOOP_OVER_INDICES: Changed to use hbound of rel_dscp 
	  instead of iam.   FINISH: Added as cleanup handler.
            CV: Added unique var prefix, removed dup var dcls.
*/

/* format: style2,ind3 */

rlm_get_description:
   proc (p_rel_opening_id, p_work_area_ptr, p_relation_description_ptr, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_rel_opening_id       bit (36) aligned parameter;
      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_relation_description_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    attribute_idx	       fixed bin (17);
      dcl	    description_index_idx  fixed bin (17);
      dcl	    index_attribute_idx    fixed bin (17);
      dcl	    iam_index_idx	       fixed bin (17);

      dcl	    based_descriptor_string_ptr
			       ptr;

/* Based */

      dcl	    p_work_area	       area (sys_info$max_seg_size) based (p_work_area_ptr);
      dcl	    based_descriptor_string
			       bit (36) aligned based (based_descriptor_string_ptr);

/* Builtin */

      dcl	    (hbound, null, string) builtin;

/* Constant */

      dcl	    myname	       init ("rlm_get_description") char (19) internal static options (constant);

/* Condition */

      dcl	    cleanup	       condition;

/* Entry */

      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* END OF DECLARATIONS */

      p_relation_description_ptr, relation_description_ptr = null ();
      p_code = 0;

      call rlm_opening_info$get (p_rel_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION ("relation_opening_info", (relation_opening_info.version), (RELATION_OPENING_INFO_VERSION_2));

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      attribute_info_ptr = relation_opening_info.attribute_info_ptr;
      call CHECK_VERSION ("attribute_info", attribute_info.version, ATTRIBUTE_INFO_VERSION_1);

      index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);

      rd_maximum_number_of_attributes_per_index = index_attribute_map.maximum_number_of_attributes_per_index;
      rd_number_of_indices = index_attribute_map.number_of_indices;
      rd_number_of_attributes = attribute_info.number_of_attributes;
      rd_maximum_attribute_name_length = attribute_info.maximum_attribute_name_length;

      on cleanup call FINISH ();
      alloc relation_description in (p_work_area);

      relation_description.version = RELATION_DESCRIPTION_VERSION_3;

      relation_description.record_collection_id = relation_header.record_collection_id;

      description_index_idx = 0;
LOOP_OVER_INDICES:
      do iam_index_idx = 1 to hbound (relation_description.index, 1);
         if index_attribute_map.index (iam_index_idx).number_of_attributes > 0
         then
	  do;
	     description_index_idx = description_index_idx + 1;

	     relation_description.index (description_index_idx).collection_id =
		index_attribute_map.index (iam_index_idx).collection_id;
	     relation_description.index (description_index_idx).style = index_attribute_map.index (iam_index_idx).style;
	     relation_description.index (description_index_idx).number_of_attributes =
		index_attribute_map.index (iam_index_idx).number_of_attributes;
	     string (relation_description.index (description_index_idx).flags) = "0"b;
	     relation_description.index (description_index_idx).flags.is_unique =
		(index_attribute_map.index (iam_index_idx).number_of_duplication_fields
		= attribute_info.number_of_attributes);

	     do index_attribute_idx = 1 to relation_description.index (description_index_idx).number_of_attributes;
	        relation_description.index (description_index_idx).attribute (index_attribute_idx) =
		   index_attribute_map.index (iam_index_idx).attribute_id (index_attribute_idx);
	     end;
	  end;
      end LOOP_OVER_INDICES;

LOOP_OVER_ATTRIBUTES:
      do attribute_idx = 1 to hbound (relation_description.attribute, 1);
         alloc based_descriptor_string in (p_work_area);
         based_descriptor_string = attribute_info.attribute (attribute_idx).descriptor;
         relation_description.attribute (attribute_idx).descriptor_ptr = based_descriptor_string_ptr;
         relation_description.attribute (attribute_idx).name = attribute_info.attribute (attribute_idx).name;
      end LOOP_OVER_ATTRIBUTES;

      p_relation_description_ptr = relation_description_ptr;

      return;
%page;
FINISH:
   proc ();

      if p_relation_description_ptr = null ()		/*unsuccessful*/
      then if relation_description_ptr ^= null ()
	 then free relation_description;
   end;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_received_version, cv_p_expected_version);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_relation_description;
%page;
%include sub_err_flags;
   end rlm_get_description;
