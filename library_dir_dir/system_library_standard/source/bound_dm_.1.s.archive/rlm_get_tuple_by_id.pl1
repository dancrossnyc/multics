/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */



/* DESCRIPTION:

          Gets a tuple or set of tuples identified by a tuple_id or an array
     of tuple_ids (p_element_id_list_ptr).  The tuples returned consist of the
     subset of attributes identified by the attribute id_list (p_id_list_ptr).
     The tuples returned are actually simple_typed_vectors.  The relation and
     record collection from which to get the tuples are identified in the
     supplied relation_cursor.  If the cursor is not a relation_cursor (e.g.,
     is an index_cursor), the call is in error.
     
          Three entries exist: rlm_get_tuple_by_id$single takes a single
     tuple_id and returns a single simple_typed_vector_ptr;
     rlm_get_tuple_by_id$list takes an array of tuple_ids and returns an array
     of simple_typed_vector_ptrs in a typed_vector_list;
     rlm_get_tuple_by_id$array takes an array of tuple_ids and returns a
     typed_vector_array.
*/

/* HISTORY:
Written by Matthew Pierret 05/10/82.
Modified:
09/24/82 by Matthew Pierret:  Changed to check to see if the supplied cursor
            contains the proper record collection id.  Made to use opening
            information (relation_info) via rlm_opening_info$get.
12/21/82 by Matthew Pierret:  Changed to convert dm_error_$record_not_found to 
            dm_error_$no_tuple_id.
01/18/83 by Matthew Pierret:  Changed to use relation_info version 2.
03/01/83 by Matthew Pierret:  Changed to not use relation_info. Use instead
            relation_opening_info.
05/23/83 by Matthew Pierret:  Changed to use relation_cursor. Added 
            ERROR_RETURN routine. Moved p_relation_cursor_ptr (formerly
            p_record_cursor_ptr) to first in all calling sequences.
            Changed calling sequences: moved p_id_list_ptr to immediately
            before p_work_area_ptr. Changed the name of 
            p_attribute_id_list_ptr to simply p_id_list_ptr.
06/24/83 by Lindsey L. Spratt:  Changed to use version 2 of the
            relation_cursor.
04/13/84 by Lee Baldwin:  Changed calling sequences of record_manager_$get_record_by_id
            and $get_records_by_id_list.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
11/02/84 by Stanford S. Cox:  MAIN: Asgn. of tva_ptr to null.
   	  FINISH: Added free of tva.  CV: Added unique var prefixes.
*/

/* format: style2,ind3 */

rlm_get_tuple_by_id:
   proc ();

      return;					/* Not a real entry */

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_tuple_id	       bit (36) aligned;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_relation_cursor_ptr  ptr;
      dcl	    p_simple_typed_vector_ptr
			       ptr;
      dcl	    p_typed_vector_list_ptr
			       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    get_single_tuple       bit (1) aligned init ("0"b);
      dcl	    get_list_of_tuples     bit (1) aligned init ("0"b);
      dcl	    get_array_of_tuples    bit (1) aligned init ("0"b);
      dcl	    vector_idx	       fixed bin;
      dcl	    record_collection_cursor_ptr
			       ptr init (null);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("rlm_get_tuple_by_id") char (32) varying static options (constant);

/* Entry */

      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$record_not_found,
	    dm_error_$tuple_not_found_id
	    )		       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

single:
   entry (p_relation_cursor_ptr, p_tuple_id, p_id_list_ptr, p_work_area_ptr, p_simple_typed_vector_ptr, p_code);

      get_single_tuple = "1"b;
      goto JOIN;


list:
   entry (p_relation_cursor_ptr, p_element_id_list_ptr, p_id_list_ptr, p_work_area_ptr, p_typed_vector_list_ptr, p_code);

      get_list_of_tuples = "1"b;
      goto JOIN;


array:
   entry (p_relation_cursor_ptr, p_element_id_list_ptr, p_id_list_ptr, p_work_area_ptr, p_typed_vector_array_ptr, p_code);

      get_array_of_tuples = "1"b;
      goto JOIN;
%page;
JOIN:
      p_code = 0;
      typed_vector_array_ptr = null ();

      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_VERSION ("relation_cursor", (relation_cursor.version), (RELATION_CURSOR_VERSION_2));

      call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION ("relation_opening_info", (relation_opening_info.version), (RELATION_OPENING_INFO_VERSION_2));

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      on cleanup call FINISH ();

      record_collection_cursor_ptr = SET_RECORD_COLLECTION_CURSOR_PTR ();

/* if relation_info.flags.protected then call lock_manager_$lock */

      if get_single_tuple
      then
         do;
	  call record_manager_$get_record_by_id (p_tuple_id, p_id_list_ptr, p_work_area_ptr,
	       record_collection_cursor_ptr, p_simple_typed_vector_ptr, p_code);
	  if p_code ^= 0
	  then if p_code = dm_error_$record_not_found
	       then call ERROR_RETURN (dm_error_$tuple_not_found_id);
	       else call ERROR_RETURN (p_code);
         end;
      else
         do;
	  call record_manager_$get_records_by_id_list (p_element_id_list_ptr, p_id_list_ptr, p_work_area_ptr,
	       record_collection_cursor_ptr, typed_vector_array_ptr, p_code);
	  if p_code ^= 0
	  then if p_code = dm_error_$record_not_found
	       then call ERROR_RETURN (dm_error_$tuple_not_found_id);
	       else call ERROR_RETURN (p_code);


	  call CHECK_VERSION_FB ("typed_vector_array", (typed_vector_array.version), (TYPED_VECTOR_ARRAY_VERSION_2));

	  if get_array_of_tuples
	  then p_typed_vector_array_ptr = typed_vector_array_ptr;
	  else
	     do;
	        typed_vector_list_ptr = p_typed_vector_list_ptr;
	        call CHECK_VERSION_FB ("typed_vector_list", (typed_vector_list.version), (TYPED_VECTOR_LIST_VERSION_1));

	        typed_vector_list.number_of_vectors =
		   min (typed_vector_list.maximum_number_of_vectors, typed_vector_array.number_of_vectors);

	        do vector_idx = 1 to typed_vector_list.number_of_vectors;
		 typed_vector_list.vector_ptr (vector_idx) = typed_vector_array.vector_slot (vector_idx);
	        end;

	        p_typed_vector_list_ptr = typed_vector_list_ptr;
	     end;

         end;

RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_code);

      dcl	    er_code	       fixed bin (35);

      p_code = er_code;
      goto RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

      if typed_vector_array_ptr ^= null ()
      then free typed_vector_array;
      if record_collection_cursor_ptr ^= null & record_collection_cursor_ptr ^= relation_cursor.current.cursor_ptr
      then call record_manager_$destroy_cursor (record_collection_cursor_ptr, (0));

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_received_version, cv_p_expected_version);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_FB:
   proc (cvf_p_structure_name, cvf_p_received_version, cvf_p_expected_version);

      dcl	    cvf_p_received_version fixed bin (35);
      dcl	    cvf_p_expected_version fixed bin (35);
      dcl	    cvf_p_structure_name   char (*);

      if cvf_p_received_version ^= cvf_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", cvf_p_expected_version, cvf_p_structure_name, cvf_p_received_version);

   end CHECK_VERSION_FB;
%page;
SET_RECORD_COLLECTION_CURSOR_PTR:
   proc () returns (ptr);

      dcl	    srccp_record_collection_cursor_ptr
			       ptr init (null);
      dcl	    srccp_code	       fixed bin (35) init (0);

      if relation_cursor.flags.current_state_is_consistent
	 & relation_cursor.current.collection_id = relation_header.record_collection_id
      then srccp_record_collection_cursor_ptr = relation_cursor.current.cursor_ptr;
      else
         do;
	  call record_manager_$create_cursor (relation_cursor.file_opening_id, relation_header.record_collection_id,
	       relation_cursor.work_area_ptr, srccp_record_collection_cursor_ptr, srccp_code);
	  if srccp_code ^= 0
	  then call ERROR_RETURN (srccp_code);
         end;

      return (srccp_record_collection_cursor_ptr);

   end SET_RECORD_COLLECTION_CURSOR_PTR;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include vu_typed_vector;
%page;
%include vu_typed_vector_array;
%page;
%include dm_typed_vector_list;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include sub_err_flags;

   end rlm_get_tuple_by_id;
