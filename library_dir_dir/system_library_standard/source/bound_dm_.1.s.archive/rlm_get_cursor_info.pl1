/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This  routine is a utility which returns selected information stored
     in the relation_cursor structure  pointed  to  by  p_relation_cursor_ptr.
     The only error situation occurs when the relation_cursor structure is not
     a  valid  relation_cursor  (relation_cursor.version  is  not equal to the
     correct version).  This error is reported via sub_err_.

     The entry points are:

          $area_ptr - returns the value of relation_cursor.work_area_ptr

          $opening_id - returns the value of relation_cursor.file_opening_id.
*/

/* HISTORY:

Written by Matthew Pierret, 05/23/84.
Modified:
11/01/84 by Stanford S. Cox:  MAIN: changed nonparm p_ variable prefixes to local_.
   CHECK_VERSION: Added cv_ prefixes.
*/

/* format: style2,ind3 */

rlm_get_cursor_info:
   proc ();

      return;

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_relation_cursor_ptr  ptr;		/*points to a relation_cursor created by either the
                                                              create_cursor or copy_cursor operation.*/

/* Automatic */

      dcl	    local_area_ptr	       ptr;		/*points to the area 
in which
the cursor was allocated.*/
      dcl	    local_rel_opening_id   bit (36) aligned;	/*is the opening identifier of the*/
						/*relation for which the cursor is
defined.*/

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("rlm_get_cursor_info") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

area_ptr:
   entry (p_relation_cursor_ptr) returns (ptr);

      relation_cursor_ptr = p_relation_cursor_ptr;

      call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");

      local_area_ptr = relation_cursor.work_area_ptr;

      return (local_area_ptr);


opening_id:
   entry (p_relation_cursor_ptr) returns (bit (36) aligned);

      relation_cursor_ptr = p_relation_cursor_ptr;

      call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");

      local_rel_opening_id = relation_cursor.file_opening_id;

      return (local_rel_opening_id);

%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_rlm_cursor;
%page;
%include sub_err_flags;
   end rlm_get_cursor_info;
