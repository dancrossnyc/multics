/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

     $get:
         Gets a pointer to the relation_opening_info structure associated with
     the current opening of the specified relation.  If the relation is not 
     open, dm_error_$relation_not_open is returned. If this is the first "get"
     for a transaction, "refresh" also. 

     $get_dont_refresh:
          Same as above, but never "refresh."

     $refresh:
          Re-read the opening information out of the file. If the 
     header_info_update_count is unchanged, the attribute_info and
     index_attribute_map have not been changed, so need not be read again.

     $init:
          Allocate a relation_opening_info structure in the dm free area
     and record a pointer to it in the opening table.
     
     $free:
          Free the relation_opening_info structure and remove the entry
     in the opening table.
     
         The  opening_manager_  is  used  to  keep  a  table of openings.  The
     pointer   to   that   table   is    kept    in    a    static    variable
     (static_opening_table_ptr).
          NOTE: p_file_opening_id is the same as the file_opening_id for the page
     file in which the relation resides.
*/

/* HISTORY:

Written by Matthew Pierret, 07/27/82.
Modified:
10/12/82 by Matthew Pierret:  Changed $set to interpret a non-null p_opening_info_ptr
            to be a pointer to an old relation_info_ptr that must be freed.
            Fixed subscript range bug encountered when index_attribute_map.index
            and relation_info.index are of different extent.
02/25/83 by Matthew Pierret: Changed to use relatin_opening_info instead of
            relation_info. Removed $set; added $free. This module now deals
            only with the relation_opening_info structure and interactions
            with opening_manager_.
03/10/83 by Matthew Pierret: Fixed $free to use roi.pp.file_opening_id
            instead of p_file_opening_id.
            Fixed attempts to do "currentsize (XXX)" when XXX_ptr was null.
            Changed to correctly set roi.pp.index_cursor_array_ptr after
            allocating an index_cursor_array for the first time.
            Changed to refresh whenever any roi pointers are null.
03/14/83 by Matthew Pierret: Changed CURRENT_TRANSACTION_ID to use a local
            variable (cti_code) instead of p_code, so that the non-error
            dm_error_$no_current_transaction is not reported.
03/16/83 by Matthew Pierret: Added $get_dont_refresh. This entry is used by
            rlm_$close and rlm_$set_scope to get only the 
            relation_opening_info structure. No refreshing is done because
            these operations are defined to work outside of transactions.
03/21/83 by Matthew Pierret: Changed to always create a record cursor if
            none exists (in $get, $refresh).
03/24/83 by Matthew Pierret: Moved creation of record cursor ($get, $refresh)
            after retrieval of relation_header, because the relation_header
            is needed to create the cursor. Removed maintenance of 
            old_relation_header_ptr: there should never be an "old" 
            relation_header. Changed FINISH to free old_XXX_ptr->XXX
            instead of XXX.
03/24/83 by Jeffrey D. Ives for Matthew Pierret: changed the logic following
            the call to opening_manager_$get_opening after "GET:" to return
            an error code when the relation is not open instead of falling
            through with a null relation_opening_info_ptr.
04/11/83 by Lindsey L. Spratt:  Changed to return immediately after
            determining that the static_opening_table_ptr is null (and,
            therefore, the desired opening can't exist).
04/19/84 by Lindsey L. Spratt:  Fixed $free to also close the DM file.  Fixed
            $init to signal a sub_err_ when the relation_opening_info to be
            initialized already exists.
           Changed to use transaction_manager_$get_current_ids to get both
            the transaction_id and the rollback_count.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get.

10/25/84 by Stanford S.  Cox:  REFRESH - Changed call to rm_$create_cursor to use 
	  local variable instead of record_cursor_ptr, added asgn. of
	  index_cursor_array.version.  $init - Added cleanup handler, asgmt.
	  of p_relation_opening_info_ptr to null, asgn. of
	  relation_opening_info.version.  $free - Moved call to fm_$close to
	  rlm_open 
03/17/85 by Lindsey L. Spratt:  Fixed setting of
            roi.per_process.record_cursor_ptr to use local_record_cursor_ptr.
            Was mistakenly using "record_cursor_ptr", which turned into a
            reference to relation_opening_info.per_process.record_cursor_ptr,
            which was null, so the record_cursor_ptr would always be null.
*/

/* format: style2,ind3 */

rlm_opening_info:
   proc ();

      call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	 "^/^a$^a is not a valid entrypoint", myname, myname);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_relation_opening_info_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (attribute_info_buffer_length, index_attribute_map_buffer_length)
			       fixed bin (35) init (0);
      dcl	    header_info_update_count
			       fixed bin (17) init (-1);
      dcl	    index_idx	       fixed bin (17);
      dcl	    current_rollback_count fixed bin (35);
      dcl	    (get, dont_refresh, init, refresh)
			       bit (1) aligned init ("0"b);
      dcl	    current_transaction_id bit (36) aligned;
      dcl	    om_file_opening_id     bit (72) aligned;
      dcl	    (local_record_cursor_ptr, old_attribute_info_ptr, old_index_attribute_map_ptr, old_index_cursor_array_ptr)
			       ptr init (null);

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (static_dm_area_ptr);

/* Builtin */

      dcl	    (currentsize, hbound, length, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rlm_opening_info") char (32) varying internal static options (constant);
      dcl	    BITS_PER_WORD	       init (36) fixed bin internal static options (constant);
      dcl	    NUMBER_OF_BUCKETS      init (20) fixed bin internal static options (constant);
      dcl	    CANONICAL_SECOND_WORD_OF_RELATION_OPENING_ID
			       init ("0"b) bit (36) aligned internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$put_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$init  entry (fixed bin, ptr, fixed bin (35));
      dcl	    opening_manager_$free_opening
			       entry (ptr, bit (72) aligned, fixed bin (35));
      dcl	    record_manager_$create_cursor
			       entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    transaction_manager_$get_current_ids
			       entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));

/* External */

      dcl	    dm_error_$no_opening   ext fixed bin (35);
      dcl	    dm_error_$programming_error
			       ext fixed bin (35);
      dcl	    dm_error_$relation_not_open
			       ext fixed bin (35);
      dcl	    error_table_$fatal_error
			       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* Static */

      dcl	    (static_opening_table_ptr, static_dm_area_ptr)
			       ptr init (null) internal static;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

get:
   entry (p_file_opening_id, p_relation_opening_info_ptr, p_code);

      get = "1"b;
      p_relation_opening_info_ptr = null;
      goto GET_REFRESH_JOIN;

get_dont_refresh:
   entry (p_file_opening_id, p_relation_opening_info_ptr, p_code);

      get, dont_refresh = "1"b;
      p_relation_opening_info_ptr = null;
      goto GET_REFRESH_JOIN;

refresh:
   entry (p_relation_opening_info_ptr, p_code);

      refresh = "1"b;
      relation_opening_info_ptr = p_relation_opening_info_ptr;
      call CHECK_VERSION ("relation_opening_info", (relation_opening_info.version), (RELATION_OPENING_INFO_VERSION_2));

      call CURRENT_TRANSACTION_ID (current_transaction_id, current_rollback_count);
      goto GET_REFRESH_JOIN;

GET_REFRESH_JOIN:
      p_code = 0;

      if get
      then
GET:
         do;
	  om_file_opening_id = p_file_opening_id || CANONICAL_SECOND_WORD_OF_RELATION_OPENING_ID;

	  if static_opening_table_ptr = null
	  then
	     do;
	        p_code = dm_error_$relation_not_open;
	        return;
	     end;
	  else
	     do;
	        call opening_manager_$get_opening (static_opening_table_ptr, om_file_opening_id,
		   relation_opening_info_ptr, p_code);
	        if p_code ^= 0
	        then
		 do;
		    if p_code = dm_error_$no_opening
		    then p_code = dm_error_$relation_not_open;
		    return;
		 end;
	        else /* p_code = 0 */
		   if relation_opening_info_ptr = null
	        then
		 do;
		    p_code = dm_error_$relation_not_open;
		    return;
		 end;
	        else
		 do;
		    call CHECK_VERSION ("relation_opening_info", (relation_opening_info.version),
		         (RELATION_OPENING_INFO_VERSION_2));

		    if ^dont_refresh
		    then
		       do;

		       /*** See if the opening info needs to be refreshed. */

			call CURRENT_TRANSACTION_ID (current_transaction_id, current_rollback_count);

			if relation_opening_info.per_process.current_transaction_id ^= current_transaction_id
			then refresh = "1"b;
			else if relation_opening_info.per_process.current_rollback_count ^= current_rollback_count
			then refresh = "1"b;
		       end;
		 end;
	     end;
         end GET;

      if refresh
      then
REFRESH:
         do;
	  if static_dm_area_ptr = null
	  then static_dm_area_ptr = get_dm_free_area_ ();


	  on cleanup call FINISH ();

	  if relation_opening_info.relation_header_ptr = null
	  then header_info_update_count = -1;
	  else header_info_update_count =
		  relation_opening_info.relation_header_ptr -> relation_header.header_info_update_count;

         /*** Get the relation_header structure. */

	  call collection_manager_$get (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	       CALLER_HEADER_ELEMENT_ID, 0, relation_opening_info.relation_header_ptr,
	       length (unspec (relation_header)), static_dm_area_ptr, ("0"b), relation_header_ptr, (0), p_code);
	  if p_code ^= 0
	  then return;

	  call CHECK_VERSION ("relation_header", (relation_header.version), (RELATION_HEADER_VERSION_3));

	  if relation_opening_info.per_process.record_cursor_ptr = null
	  then
	     do;

	     /*** No record cursor exists for this process, so create one. */

	        call record_manager_$create_cursor (relation_opening_info.per_process.file_opening_id,
		   relation_header.record_collection_id, static_dm_area_ptr, local_record_cursor_ptr, p_code);
	        if p_code ^= 0
	        then return;
	        else relation_opening_info.per_process.record_cursor_ptr = local_record_cursor_ptr;
	     end;

	  if relation_header.header_info_update_count ^= header_info_update_count
	  then
REFRESH_UPDATED_HEADER_INFO:
	     do;

	     /*** Either some header information has been updated since the last time the
		information was retrieved or this is the first retrieval of the header
		information. First, get the attribute_info structure. */

	        if relation_opening_info.attribute_info_ptr ^= null
	        then attribute_info_buffer_length =
		        currentsize (relation_opening_info.attribute_info_ptr -> attribute_info) * BITS_PER_WORD;
	        call collection_manager_$get (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
		   relation_header.attribute_info_element_id, 0, relation_opening_info.attribute_info_ptr,
		   attribute_info_buffer_length, static_dm_area_ptr, ("0"b), attribute_info_ptr, (0), p_code);
	        if p_code ^= 0
	        then return;

	        call CHECK_VERSION ("attribute_info", (attribute_info.version), (ATTRIBUTE_INFO_VERSION_1));

	     /*** Get index_attribute_map. */

	        if relation_opening_info.index_attribute_map_ptr ^= null
	        then index_attribute_map_buffer_length =
		        currentsize (relation_opening_info.index_attribute_map_ptr -> index_attribute_map)
		        * BITS_PER_WORD;

	        call collection_manager_$get (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
		   relation_header.index_attribute_map_element_id, 0, relation_opening_info.index_attribute_map_ptr,
		   index_attribute_map_buffer_length, static_dm_area_ptr, ("0"b), index_attribute_map_ptr, (0),
		   p_code);
	        if p_code ^= 0
	        then return;

	        call CHECK_VERSION ("index_attribute_map", (index_attribute_map.version),
		   (INDEX_ATTRIBUTE_MAP_VERSION_2));

	        if relation_opening_info.per_process.index_cursor_array_ptr = null
	        then
		 do;

		 /*** No index_cursor_array exists, so set one up with a null cursor_ptr for each index. */

		    ica_number_of_indices = hbound (index_attribute_map.index, 1);
		    alloc index_cursor_array in (dm_area);
		    index_cursor_array.version = INDEX_CURSOR_ARRAY_VERSION_1;
		    index_cursor_array.cursor_ptr (*) = null;
		    relation_opening_info.per_process.index_cursor_array_ptr = index_cursor_array_ptr;
		 end;
	        else
INDEX_CURSOR_ARRAY_EXISTS:
		 do;

		 /*** An index_cursor_array already exists, but since the index_attribute_map
		      may have been changed, update index_cursor_array to match the current
		      state of the index_attribute_map. */

		    call CHECK_VERSION ("index_attribute_map", index_attribute_map.version,
		         INDEX_ATTRIBUTE_MAP_VERSION_2);

		    index_cursor_array_ptr = relation_opening_info.per_process.index_cursor_array_ptr;
		    call CHECK_VERSION ("index_cursor_array", index_cursor_array.version,
		         INDEX_CURSOR_ARRAY_VERSION_1);

		    if hbound (index_cursor_array.cursor_ptr, 1) >= hbound (index_attribute_map.index, 1)
		    then
REMOVE_CURSORS_FOR_DELETED_INDICES:
		       do;

		       /*** Indices for which cursors are stored in index_cursor_array may have been
			  deleted. Destroy the cursors for any such index. */

			do index_idx = 1 to hbound (index_attribute_map.index, 1);
			   if index_cursor_array.cursor_ptr (index_idx) ^= null
			   then if index_attribute_map.index (index_idx).number_of_attributes <= 0
			        then
				 do;
				 /***			              call index_manager_$destroy_cursor (index_cursor_array.cursor_ptr(index_idx), (0)); */
				    index_cursor_array.cursor_ptr (index_idx) = null;
				 end;
			end;
		       end REMOVE_CURSORS_FOR_DELETED_INDICES;
		    else
EXTEND_INDEX_CURSOR_ARRAY:
		       do;

		       /*** The index_attribute_map has been extended to contain more indices than
			  index_cursor_array components, so index_cursor_array must likewise be
			  extended. Allocate a new one, and copy over the old cursor_ptr values.
			  If a non-null cursor_ptr exists for an index which no longer exists,
			  destroy the cursor. */

			old_index_cursor_array_ptr = index_cursor_array_ptr;
			ica_number_of_indices = hbound (index_attribute_map.index, 1);

			alloc index_cursor_array in (dm_area);
			index_cursor_array.version = INDEX_CURSOR_ARRAY_VERSION_1;

			if old_index_cursor_array_ptr ^= null
			then relation_opening_info.per_process.index_cursor_array_ptr = index_cursor_array_ptr;

			index_cursor_array.cursor_ptr (*) = null;

			do index_idx = 1 to hbound (old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr, 1);
			   if old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr (index_idx) ^= null
			   then if index_attribute_map.index (index_idx).number_of_attributes > 0
			        then index_cursor_array.cursor_ptr (index_idx) =
				        old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr (index_idx);
			/***			        else call index_manager_$destroy_cursor (old_index_cursor_array_ptr->index_cursor_array.cursor_ptr(index_idx), (0)); */
			end;
		       end EXTEND_INDEX_CURSOR_ARRAY;
		 end INDEX_CURSOR_ARRAY_EXISTS;

	     /*** Reset relation_opening_info values. */

	        if attribute_info_ptr ^= relation_opening_info.attribute_info_ptr
	        then
		 do;
		    old_attribute_info_ptr = relation_opening_info.attribute_info_ptr;
		    relation_opening_info.attribute_info_ptr = attribute_info_ptr;
		 end;

	        if index_attribute_map_ptr ^= relation_opening_info.index_attribute_map_ptr
	        then
		 do;
		    old_index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
		    relation_opening_info.index_attribute_map_ptr = index_attribute_map_ptr;
		 end;


	     end REFRESH_UPDATED_HEADER_INFO;

	  if relation_header_ptr ^= relation_opening_info.relation_header_ptr
	  then relation_opening_info.relation_header_ptr = relation_header_ptr;

	  relation_opening_info.per_process.current_transaction_id = current_transaction_id;
	  relation_opening_info.per_process.current_rollback_count = current_rollback_count;

	  call FINISH ();

         end REFRESH;

      if get
      then p_relation_opening_info_ptr = relation_opening_info_ptr;

      return;					/* Effective end of $get, $refresh, $get_dont_refresh. */
%page;
init:
   entry (p_file_opening_id, p_relation_opening_info_ptr, p_code);

      init = "1"b;
      p_code = 0;
      om_file_opening_id = p_file_opening_id || CANONICAL_SECOND_WORD_OF_RELATION_OPENING_ID;
      p_relation_opening_info_ptr = null ();

      on cleanup call FINISH ();
      if static_dm_area_ptr = null
      then static_dm_area_ptr = get_dm_free_area_ ();

      if static_opening_table_ptr = null
      then
         do;
	  call opening_manager_$init (NUMBER_OF_BUCKETS, static_opening_table_ptr, p_code);
	  if p_code ^= 0
	  then return;
         end;
      else
         do;
	  call opening_manager_$get_opening (static_opening_table_ptr, om_file_opening_id, (null), p_code);
	  if p_code = 0
	  then call sub_err_ (error_table_$fatal_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/Unable to initialize the relation opening info for the file with opening id
^.3b.  There is already an opening for a relation with this file_opening_id,"
		  || "but there should not be.  This indicates either a damaged per-process relation
opening info table or a programming error in the relation_manager_.", p_file_opening_id);
	  else p_code = 0;
         end;

      alloc relation_opening_info in (dm_area);
      relation_opening_info.version = RELATION_OPENING_INFO_VERSION_2;

      relation_opening_info.per_process.file_opening_id = p_file_opening_id;
      call CURRENT_TRANSACTION_ID (relation_opening_info.per_process.current_transaction_id,
	 relation_opening_info.per_process.current_rollback_count);

      call opening_manager_$put_opening (static_opening_table_ptr, om_file_opening_id, relation_opening_info_ptr, p_code);
      if p_code = 0
      then p_relation_opening_info_ptr = relation_opening_info_ptr;
      else call FINISH ();

      return;					/* End of rlm_opening_info$init */
%page;
free:
   entry (p_relation_opening_info_ptr, p_code);

      if static_opening_table_ptr = null
      then return;

      relation_opening_info_ptr = p_relation_opening_info_ptr;
      call CHECK_VERSION ("relation_opening_info", (relation_opening_info.version), (RELATION_OPENING_INFO_VERSION_2));



      om_file_opening_id =
	 relation_opening_info.per_process.file_opening_id || CANONICAL_SECOND_WORD_OF_RELATION_OPENING_ID;

      call opening_manager_$free_opening (static_opening_table_ptr, om_file_opening_id, p_code);
      if p_code ^= 0
      then return;

      if relation_opening_info.relation_header_ptr ^= null
      then free relation_opening_info.relation_header_ptr -> relation_header in (dm_area);
      if relation_opening_info.attribute_info_ptr ^= null
      then free relation_opening_info.attribute_info_ptr -> attribute_info in (dm_area);
      if relation_opening_info.index_attribute_map_ptr ^= null
      then free relation_opening_info.index_attribute_map_ptr -> index_attribute_map in (dm_area);

      free relation_opening_info in (dm_area);

      p_relation_opening_info_ptr = null;

      return;					/* End of rlm_opening_info$free */
%page;
FINISH:
   proc ();

      if relation_opening_info_ptr ^= null
      then
         do;

	  if old_attribute_info_ptr ^= null & old_attribute_info_ptr ^= relation_opening_info.attribute_info_ptr
	  then free old_attribute_info_ptr -> attribute_info in (dm_area);
	  if attribute_info_ptr ^= null & attribute_info_ptr ^= relation_opening_info.attribute_info_ptr
	  then free attribute_info in (dm_area);
	  if old_index_attribute_map_ptr ^= null
	       & old_index_attribute_map_ptr ^= relation_opening_info.index_attribute_map_ptr
	  then free old_index_attribute_map_ptr -> index_attribute_map in (dm_area);
	  if index_attribute_map_ptr ^= null & index_attribute_map_ptr ^= relation_opening_info.index_attribute_map_ptr
	  then free index_attribute_map in (dm_area);
	  if relation_header_ptr ^= null & relation_header_ptr ^= relation_opening_info.relation_header_ptr
	  then free relation_header in (dm_area);
	  if old_index_cursor_array_ptr ^= null
	       & old_index_cursor_array_ptr ^= relation_opening_info.per_process.index_cursor_array_ptr
	  then free old_index_cursor_array_ptr -> index_cursor_array in (dm_area);
	  if index_cursor_array_ptr ^= null
	       & index_cursor_array_ptr ^= relation_opening_info.per_process.index_cursor_array_ptr
	  then free index_cursor_array in (dm_area);

	  if init
	  then if relation_opening_info_ptr ^= p_relation_opening_info_ptr
	       then free relation_opening_info in (dm_area);
         end;

      return;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;
      dcl	    sub_err_	       entry () options (variable);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);

      return;

   end CHECK_VERSION;
%page;
CURRENT_TRANSACTION_ID:
   proc (cti_p_txn_id, cti_p_rollback_count);

      dcl	    cti_p_txn_id	       bit (36) aligned;
      dcl	    cti_p_rollback_count   fixed bin (35);
      dcl	    cti_rollback_count     fixed bin;
      dcl	    cti_code	       fixed bin (35) init (0);

      call transaction_manager_$get_current_ids (cti_p_txn_id, (0), cti_rollback_count, cti_code);
      if cti_code ^= 0
      then cti_p_txn_id = "0"b;
      cti_p_rollback_count = cti_rollback_count;

   end CURRENT_TRANSACTION_ID;

%page;
%include sub_err_flags;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_rlm_idx_cursor_array;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_hdr_col_ids;
%page;
%include dm_collmgr_entry_dcls;

   end rlm_opening_info;
