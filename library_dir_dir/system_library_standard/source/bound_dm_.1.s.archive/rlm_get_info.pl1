/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This  routine  is a utility which returns selected information about
     the structure of a relation.    The  information  which  is  returned  is
     restricted  to  commonly  used  single pieces of information, such as the
     identifier of an  index.    For  more  information,  the  get_description
     operation should be used.

     Errors are reported via sub_err_.

     The entrypoints in this routine are:
          $get_index_id - given a relation_cursor and an id_list, returns
                          the  identifier  of the index constructed of exactly
                          the set of attributes specified in the id_list in the
                          order specified in the id_list. If no match is found,
                          "0"b is returned.

          $get_record_collection_id - given  a  relation_cursor,  returns  the
                          identifier of the record collection.
*/

/* HISTORY:

Written by Matthew Pierret, 05/23/84.
Modified:
11/09/84 by Stanford S. Cox:  MAIN: Chg upper bound on CEIL do to id_list.number_of_ids.
*/

/* format: style2,ind3 */

rlm_get_info:
   proc ();

      return;

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_relation_cursor_ptr  ptr parameter;	/* points to a cursor for the relation*/
      dcl	    p_id_list_ptr	       ptr parameter;	/* points to an id_list structure containing    */
						/* the identifiers of the attributes which make */
						/* up the desired index */

/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    (attribute_idx, index_idx)
			       fixed bin;
      dcl	    local_index_id	       bit (36) aligned;	/* is the identifier of the desired index, or "0"b*/
      dcl	    p_record_collection_id bit (36) aligned;	/* is the identifier of the record collection*/

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("rlm_get_info") char (32) varying internal static options (constant);

/* Entry */

      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

get_record_collection_id:
   entry (p_relation_cursor_ptr) returns (bit (36) aligned);

      relation_cursor_ptr = p_relation_cursor_ptr;

      call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");

      call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
      if code ^= 0
      then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Unable to get opening information associated with the supplied^/relation_cursor_ptr value, ^p, which is associated with the^/relation opening identifier ^3bo."
	      , relation_cursor_ptr, relation_cursor.file_opening_id);

      call CHECK_VERSION (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION (relation_header.version, RELATION_HEADER_VERSION_3, "relation_header");

      p_record_collection_id = relation_header.record_collection_id;

      return (p_record_collection_id);
%page;
get_index_id:
   entry (p_relation_cursor_ptr, p_id_list_ptr) returns (bit (36) aligned);

      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");

      id_list_ptr = p_id_list_ptr;
      call CHECK_VERSION_FB (id_list.version, (ID_LIST_VERSION_1), "id_list");

      call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
      if code ^= 0
      then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Unable to get opening information associated with the supplied^/relation_cursor_ptr value, ^p, which is associated with the^/relation opening identifier ^3bo."
	      , relation_cursor_ptr, relation_cursor.file_opening_id);

      call CHECK_VERSION (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");

      index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      call CHECK_VERSION (index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2, "index_attribute_map");

CHECK_EACH_INDEX_LOOP:
      do index_idx = 1 to index_attribute_map.number_of_indices;

         if id_list.number_of_ids = index_attribute_map.index (index_idx).number_of_attributes
         then
	  do;
	     do attribute_idx = 1 to id_list.number_of_ids
		while (id_list.id (attribute_idx)
		= index_attribute_map.index (index_idx).attribute_id (attribute_idx));
	     end;

	     if attribute_idx > index_attribute_map.index (index_idx).number_of_attributes
	     then
	        do;				/* The attributes of this index match the supplied attributes */
		 local_index_id = index_attribute_map.index (index_idx).collection_id;
		 return (local_index_id);
	        end;
	  end;
      end CHECK_EACH_INDEX_LOOP;

      local_index_id = "0"b;

      return (local_index_id);
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%skip;
CHECK_VERSION_FB:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION_FB;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_id_list;
%page;
%include sub_err_flags;
   end rlm_get_info;
