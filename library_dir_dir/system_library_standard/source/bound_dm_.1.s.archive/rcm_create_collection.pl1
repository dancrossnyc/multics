/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION
   Creates an empty record collection in the given page file with the
fields specified in typed_vector_array.  A record collection identifier is
assigned for referencing this collection which is the index of the
collection in the collmr_header.collection array for this page file.  The
record_collection_header contains the element_id of the field
table for this collection.
*/

/* HISTORY:
Written by Matthew Pierret, 04/01/82.
Modified:
04/22/82 by Matthew Pierret: Changed to use data_mgmt_util_$cv_typed_array_to_table
            instead of dmu_build_field_table.
04/28/82 by Matthew Pierret: Changed calling sequence to accept p_cism_info_ptr
            and p_esm_info_ptr so that the caller can specify what storage
            methods to use. Defaults are UCISM and Unthreaded BESM.
12/07/82 by Matthew Pierret: Changed to call FINISH before returning in the
            normal case.  Changed to define an area with the no_freeing bit off.
03/16/83 by Matthew Pierret: Added use of ERROR_RETURN, local structures
            instead of allocated ones, cleanup handler, get_dm_free_area_,
            RECORD_COLLECTION_HEADER_VERSION_2.
03/24/83 by Lindsey Spratt:  Changed to use version 2 of the field_table, and
	  to check its version number.
07/28/83 by Matthew Pierret: Changed name from rm_create_collection to
            rcm_create_collection, and all rm_ prefixes to rcm_.
            Also changed to set basic_esm_info.fixed_length to "1"b if there
            are no varying fields.
05/04/84 by Matthew Pierret: Changed to use FIELD_TABLE_VERSION_3, to use
            data_format_util_ instead of data_mgmt_util_ and to remove un-used
            builtin declarations.
05/20/84 by Matthew Pierret: Changed to use (ESM CISM)_INFO_VERSION_1
            structures.  Changed name of include files dm_cm_(esm cism)_info
            to dm_(esm cism)_info.
06/12/84 by Matthew Pierret: Re-named cm_$allocate_element to cm_$put.
*/

/* format: style2 */

rcm_create_collection:
     proc (p_file_opening_id, p_typed_vector_array_ptr, p_cism_info_ptr, p_esm_info_ptr, p_record_collection_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

	dcl     p_file_opening_id	 bit (36) aligned;
	dcl     p_typed_vector_array_ptr
				 ptr;
	dcl     p_cism_info_ptr	 ptr;
	dcl     p_esm_info_ptr	 ptr;
	dcl     p_record_collection_id bit (36) aligned;
	dcl     p_code		 fixed bin (35);

/* Automatic */

	dcl     (file_opening_id, record_collection_id, field_table_element_id)
				 bit (36) aligned init ("0"b);
	dcl     maximum_element_length fixed bin (35);
	dcl     work_area_ptr	 ptr init (null);

	dcl     1 local_record_collection_header
				 aligned like record_collection_header;
	dcl     1 local_unblocked_cism_info
				 aligned like unblocked_cism_info;
	dcl     1 local_basic_esm_info aligned like basic_esm_info;

/* Based */

	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

	dcl     (addr, null, length, unspec)
				 builtin;

/* Condition */

	dcl     cleanup		 condition;

/* Constant */

	dcl     myname		 init ("rcm_create_collection") char (32) varying int static options (constant);

/* Entry */

	dcl     data_format_util_$cv_typed_array_to_table
				 entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));
	dcl     get_dm_free_area_	 entry () returns (ptr);
	dcl     sub_err_		 entry () options (variable);

/* External */

	dcl     error_table_$unimplemented_version
				 fixed bin (35) ext static;

	dcl     sys_info$max_seg_size	 ext fixed bin (35);

/* END OF DECLARATIONS */

	p_code = 0;
	p_record_collection_id = "0"b;

	file_opening_id = p_file_opening_id;
	typed_vector_array_ptr = p_typed_vector_array_ptr;
	field_table_ptr = null;

	if p_cism_info_ptr ^= null
	then unblocked_cism_info_ptr = p_cism_info_ptr;
	else do;
		unblocked_cism_info_ptr = addr (local_unblocked_cism_info);
		unblocked_cism_info.version = CISM_INFO_VERSION_1;
		unblocked_cism_info.type = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD;
		unblocked_cism_info.must_be_zero = 0;
	     end;
	if p_esm_info_ptr ^= null
	then do;
		basic_esm_info_ptr = p_esm_info_ptr;
		call CHECK_VERSION_CHAR (ESM_INFO_VERSION_1, basic_esm_info.version, "esm_info");
	     end;
	else do;
		basic_esm_info_ptr = addr (local_basic_esm_info);
		basic_esm_info.version = ESM_INFO_VERSION_1;
		basic_esm_info.type = BASIC_ELEMENT_STORAGE_METHOD;
		basic_esm_info.flags.threaded = "0"b;
		basic_esm_info.flags.fixed_length = "0"b;
		basic_esm_info.flags.pad = "0"b;
		basic_esm_info.maximum_element_length = -1;
	     end;

	on cleanup call FINISH ();

	work_area_ptr = get_dm_free_area_ ();

	ft_length_of_field_names, ft_number_of_fields = 0;/* So compiler won't complain */

	call data_format_util_$cv_typed_array_to_table (typed_vector_array_ptr, work_area_ptr, field_table_ptr,
	     maximum_element_length, p_code);
	if p_code ^= 0
	then call ERROR_RETURN;

	call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

	if field_table.varying_field_map (1).field_id = 0 /* No varying fields */
	then basic_esm_info.flags.fixed_length = "1"b;

	basic_esm_info.maximum_element_length = maximum_element_length;

	call collection_manager_$create_collection (file_opening_id, unblocked_cism_info_ptr, basic_esm_info_ptr,
	     record_collection_id, p_code);
	if p_code ^= 0
	then call ERROR_RETURN;


	call collection_manager_$put (file_opening_id, HEADER_COLLECTION_ID, field_table_ptr,
	     length (unspec (field_table)), field_table_element_id, (0), p_code);
	if p_code ^= 0
	then call ERROR_RETURN;

	record_collection_header_ptr = addr (local_record_collection_header);

	record_collection_header.version = RECORD_COLLECTION_HEADER_VERSION_2;
	record_collection_header.field_table_element_id = field_table_element_id;

	call collection_manager_$put_header (file_opening_id, record_collection_id, record_collection_header_ptr,
	     length (unspec (record_collection_header)), p_code);
	if p_code ^= 0
	then call ERROR_RETURN;


	p_record_collection_id = record_collection_id;

	call FINISH ();

MAIN_RETURN:
	return;

%page;
ERROR_RETURN:
     proc ();

	call FINISH ();
	goto MAIN_RETURN;

     end ERROR_RETURN;


FINISH:
     proc;

	if work_area_ptr ^= null
	then if field_table_ptr ^= null
	     then free field_table in (work_area);

     end FINISH;
%page;
CHECK_VERSION_CHAR:
     proc (p_expected_version, p_received_version, p_structure_name);

	dcl     (p_expected_version, p_received_version)
				 char (8) aligned;
	dcl     p_structure_name	 char (*) parameter;

	if p_expected_version ^= p_received_version
	then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
		"^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
     end CHECK_VERSION_CHAR;
%page;
%include sub_err_flags;
%page;
%include vu_typed_vector_array;
%page;
%include dm_rcm_header;
%page;
%include dm_field_table;
%page;
%include dm_cism_info;
%page;
%include dm_esm_info;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_hdr_collection_id;

     end rcm_create_collection;
