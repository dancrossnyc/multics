/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
im_create_cursor:
create_cursor:
   proc (p_file_opening_id, p_collection_id, p_work_area_ptr, p_index_cursor_ptr, p_code);

/* DESCRIPTION
   Allocates a index_cursor structure in the provided work area.  This
   cursor is tailored for the index collection with which it is to be used.
   Its initial position is at the beginning of the collection.
*/

/* Written by Matthew Pierret.
Modified:
08/09/82 by Matthew Pierret:  Changed p_collection_id from "fixed bin (17)" to
            "bit (36) aligned".
09/01/82 by Lindsey Spratt:  Changed to use version 2 of the index_cursor.  
02/28/83 by Lindsey Spratt:  Changed to use version 3 of the index_cursor.
	  Added the $destroy entry.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_index_cursor_ptr     ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    work_area_ptr	       ptr;
      dcl	    myname	       init ("im_create_cursor") char (32) varying;
      dcl	    cks_length	       fixed bin (24);

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);
      dcl	    current_key_string     bit (cks_length) based;

/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    area		       condition;

/* Constant */
/* Entry */

      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    (
	    error_table_$area_too_small,
	    error_table_$unimplemented_version,
	    dm_error_$wrong_cursor_type
	    )		       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* END OF DECLARATIONS */

      work_area_ptr = p_work_area_ptr;

      on area
         begin;
	  p_code = error_table_$area_too_small;
	  goto RETURN;
         end;

      alloc index_cursor in (work_area);
      index_cursor.version = INDEX_CURSOR_VERSION_3;
      index_cursor.type = INDEX_CURSOR_TYPE;
      index_cursor.area_ptr = work_area_ptr;
      index_cursor.file_opening_id = p_file_opening_id;
      index_cursor.collection_id = p_collection_id;
      index_cursor.key_id_string = "0"b;
      index_cursor.current_key_string_ptr = null;
      index_cursor.current_key_string_length = 0;
      string (index_cursor.flags) = "0"b;
      index_cursor.flags.is_at_beginning_of_index = "1"b;
      index_cursor.flags.is_valid = "1"b;
      p_index_cursor_ptr = index_cursor_ptr;

      p_code = 0;
RETURN:
      return;
%page;
destroy:
   entry (p_index_cursor_ptr, p_code);
      myname = "im_create_cursor$destroy";
      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, "s", null, 0,
	    "^/Expected an index cursor, type ^d. Received a cursor of type ^d.", INDEX_CURSOR_TYPE, index_cursor.type);

      call check_version ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");
      p_code = 0;

      work_area_ptr = index_cursor.area_ptr;
      if index_cursor.current_key_string_ptr ^= null
      then
         do;
	  cks_length = index_cursor.current_key_string_length;
	  free index_cursor.current_key_string_ptr -> current_key_string in (work_area);
         end;
      free index_cursor in (work_area);
      p_index_cursor_ptr = null;
      return;
%page;
check_version:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end check_version;
%page;
%include dm_im_cursor;

   end im_create_cursor;
