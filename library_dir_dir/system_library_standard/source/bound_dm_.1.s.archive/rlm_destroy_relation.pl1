/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rlm_destroy_relation:
   proc ();

/* DESCRIPTION:

         This  routine  destroys  a  relation  identified  by a path or by an
     opening id.  The two entries $by_path and $by_opening_id  allow  the  for
     the two methods of destruction.
          $by_path:    In this entry file_manager_$delete is called to destroy
     the file in which the relation resides. 
          $by_opening_id:  In this entry the  opening  information  associated
     with p_rel_opening_id is retrieved, checked for validity and freed.  Then
     file_manager_$delete_close is invoked to close and delete the relation.
*/
/* HISTORY:
Written by Matthew Pierret, 12/06/82.
Modified:
03/14/83 by Lindsey Spratt: Fixed the $by_path entry to not have the
	  p_rel_opening_id parameter, in conformance with the spec.
11/01/84 by Stanford S. Cox: Changed DESCRIPTION, removed unref. vars
*/
/* START OF DECLARATIONS */
/* Parameter */
      dcl	    p_rel_dir	       char (*) parameter;
      dcl	    p_rel_name	       char (*) parameter;
      dcl	    p_rel_opening_id       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    local_code	       fixed bin (35) init (0);
      dcl	    relation_info_ptr      ptr init (null);
      dcl	    rel_opening_id	       bit (36) aligned init ("0"b);

/* Based */
/* Builtin */
      dcl	    null		       builtin;

/* Entry */

      dcl	    file_manager_$delete   entry (char (*), char (*), fixed bin (35));
      dcl	    file_manager_$delete_close
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));

/* External */


/* END OF DECLARATIONS */

by_path:
   entry (p_rel_dir, p_rel_name, p_code);

      p_code = 0;

      call file_manager_$delete (p_rel_dir, p_rel_name, p_code);

      return;

by_opening_id:
   entry (p_rel_opening_id, p_code);

      p_code = 0;

      call rlm_opening_info$get (p_rel_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;
      else
         do;


	  call file_manager_$delete_close (p_rel_opening_id, p_code);

         end;

      return;
%page;
/*
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
*/
%include dm_rlm_opening_info;
%page;
%include sub_err_flags;
   end rlm_destroy_relation;
