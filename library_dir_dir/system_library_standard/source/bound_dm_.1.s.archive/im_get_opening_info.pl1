/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  subroutine returns a pointer to the im_opening_info structure,
     given a file  opening_id  and  a  collection  id.    If  no  opening_info
     structure  has been creted for this collection in this process, then this
     module  will  create  it.    The   opening_info   is   managed   by   the
     opening_manager_.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 10/28/82.
Modified:
12/08/82 by Lindsey Spratt:  Fixed static_opening_table_ptr to be declared
	  with the internal static  attributes.  Changed to use
	  dm_data_$area_ptr to set the work_area_ptr.  Fixed to only
	  "put_opening" when there was no pre-existing allocation of the
	  index_opening_info structure.
12/10/82 by Lindsey Spratt:  Protect frees of old index_header and field_table
	  when the pointers are null.
03/21/83 by Lindsey Spratt:  Changed to not use dm_data_ $area_ptr or
	  $current_txn_id, but get_dm_free_area_ and
	  transaction_manager_$get_current_current_txn_id instead.
	  Also, made the work_area_ptr internal static.
03/23/83 by Lindsey Spratt:  Changed to use version 2 of the field_table.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3.  Added
            ERROR_RETURN subroutine for returning with non-zero p_code.
            Changed to use local copies of the file_opening_id and the
            collection_id and the code.
06/07/84 by Matthew Pierret:  Re-named cm_get_element to cm_$get.
10/27/84 by Lindsey L. Spratt:  Changed to handl version 2 index_opening_info,
            and version 4 index_header.  Also handles version 3 index_headers.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3 and
	  changed to set index_opening_info.flags.key_count_postcommt_written
	  to zero for new transactons and rollbacks.  Removed index_header
	  version conversion code.
*/
%page;
/* format: style2,ind3 */

im_get_opening_info:
   proc (p_file_opening_id, p_collection_id, p_index_opening_info_ptr, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    new_buffer_was_allocated
			       bit (1) aligned init ("0"b);
      dcl	    (collection_id, file_opening_id, current_txn_id)
			       bit (36) aligned;
      dcl	    current_rollback_count fixed bin;

/* Based */

      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (addr, bin, null, unspec)
			       builtin;

/* Constant */

      dcl	    myname	       init ("im_get_opening_info") char (32) varying internal static options (constant);

      dcl	    NUMBER_OF_BUCKETS      init (101) fixed bin (17) internal static options (constant);
      dcl	    HEADER_COLLECTION_ID   bit (36) aligned init ("000000000001"b3) internal static options (constant);
      dcl	    INDEX_HEADER_VERSION_3 init (3) fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    opening_manager_$init  entry (fixed bin, ptr, fixed bin (35));
      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (*), ptr, fixed bin (35));
      dcl	    opening_manager_$put_opening
			       entry (ptr, bit (*), ptr, fixed bin (35));

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    transaction_manager_$get_current_ids
			       entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* Static */

      dcl	    static_opening_table_ptr
			       ptr init (null) static internal;
      dcl	    work_area_ptr	       ptr init (null) static internal;

/* END OF DECLARATIONS */

      p_code = 0;
      p_index_opening_info_ptr = null;
      file_opening_id = p_file_opening_id;
      collection_id = p_collection_id;
      index_header_ptr, field_table_ptr, index_opening_info_ptr = null;

      call transaction_manager_$get_current_ids (current_txn_id, (0), current_rollback_count, (0));

      code = 0;

      if static_opening_table_ptr = null
      then
         do;
	  call opening_manager_$init (NUMBER_OF_BUCKETS, static_opening_table_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;
      else
         do;
	  call opening_manager_$get_opening (static_opening_table_ptr, (file_opening_id || collection_id),
	       p_index_opening_info_ptr, code);
	  if code = 0
	  then if p_index_opening_info_ptr -> index_opening_info.current_txn_id = bin (current_txn_id, 35, 0)
		  & p_index_opening_info_ptr -> index_opening_info.current_rollback_count = current_rollback_count
	       then call RETURN ();			/* ** Got the opening info. ** */
	       else index_opening_info_ptr = p_index_opening_info_ptr;
         end;

      if work_area_ptr = null
      then work_area_ptr = get_dm_free_area_ ();

      if index_opening_info_ptr ^= null
      then
         do;
	  call CHECK_VERSION (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");
	  if index_opening_info.index_header_ptr ^= null
	  then
	     do;
	        call CHECK_VERSION (index_opening_info.index_header_ptr -> index_header.version, INDEX_HEADER_VERSION_4,
		   "index_header");
	        free index_opening_info.index_header_ptr -> index_header in (work_area);
	     end;
	  if index_opening_info.key_count_array_ptr ^= null
	  then
	     do;
	        call CHECK_VERSION (index_opening_info.key_count_array_ptr -> key_count_array.version,
		   KEY_COUNT_ARRAY_VERSION_2, "key_count_array");
	        free index_opening_info.key_count_array_ptr -> key_count_array in (work_area);
	     end;
	  if index_opening_info.field_table_ptr ^= null
	  then
	     do;
	        call CHECK_VERSION (index_opening_info.field_table_ptr -> field_table.version, FIELD_TABLE_VERSION_3,
		   "field_table");
	        free index_opening_info.field_table_ptr -> field_table in (work_area);
	     end;
	  if index_opening_info.key_count_increments_ptr ^= null
	  then call CHECK_VERSION (index_opening_info.key_count_increments_ptr -> key_count_array.version,
		  KEY_COUNT_ARRAY_VERSION_2, "key_count_increments_array");
						/* Note: Do not free the increment array */
         end;
      else
         do;
	  alloc index_opening_info in (work_area);
	  index_opening_info.version = INDEX_OPENING_INFO_VERSION_3;
	  index_opening_info.collection_id = collection_id;
	  index_opening_info.file_opening_id = file_opening_id;
	  index_opening_info.key_count_increments_ptr = null;
         end;

      call GET_INDEX_HEADER ();
      call collection_manager_$get (file_opening_id, HEADER_COLLECTION_ID, unspec (index_header.field_table_element_id),
	 0, null, (0), work_area_ptr, new_buffer_was_allocated, field_table_ptr, 0, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      index_opening_info.index_header_ptr = index_header_ptr;
      index_opening_info.field_table_ptr = field_table_ptr;
      index_opening_info.key_count_array_ptr = key_count_array_ptr;
      index_opening_info.flags.key_count_postcommit_written = "0"b;
      index_opening_info.current_txn_id = bin (current_txn_id, 35, 0);
      index_opening_info.current_rollback_count = current_rollback_count;

      if p_index_opening_info_ptr = null
      then
         do;
	  call opening_manager_$put_opening (static_opening_table_ptr, (file_opening_id || collection_id),
	       index_opening_info_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  p_index_opening_info_ptr = index_opening_info_ptr;
         end;

      call RETURN ();
MAIN_RETURN:
      return;
%page;
RETURN:
   proc ();
      p_code = 0;
      call FINISH ();
      goto MAIN_RETURN;
   end RETURN;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH;
      go to MAIN_RETURN;

   end ERROR_RETURN;



FINISH:
   proc;
      if (p_index_opening_info_ptr ^= index_opening_info_ptr | p_index_opening_info_ptr = null) & work_area_ptr ^= null
      then
         do;
	  if index_opening_info_ptr ^= null
	  then free index_opening_info in (work_area);
	  if index_header_ptr ^= null
	  then free index_header in (work_area);
	  if key_count_array_ptr ^= null
	  then free key_count_array in (work_area);
	  if field_table_ptr ^= null
	  then free field_table in (work_area);
         end;
   end FINISH;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
GET_INDEX_HEADER:
   proc ();
      dcl	    gih_code	       fixed bin (35);
      call collection_manager_$get_header (file_opening_id, collection_id, null, (0), work_area_ptr,
	 new_buffer_was_allocated, index_header_ptr, (0), code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call CHECK_VERSION (index_header.version, INDEX_HEADER_VERSION_4, "index_header");
      call collection_manager_$get (file_opening_id, HEADER_COLLECTION_ID,
	 unspec (index_header.key_count_array_element_id), 0, null, (0), work_area_ptr, new_buffer_was_allocated,
	 key_count_array_ptr, 0, gih_code);
      if gih_code ^= 0
      then call ERROR_RETURN (gih_code);
   end GET_INDEX_HEADER;
%page;
%include dm_im_opening_info;
%page;
%include dm_im_header;
%page;
%include dm_field_table;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include sub_err_flags;
%page;
%include dm_key_count_array;
   end im_get_opening_info;
