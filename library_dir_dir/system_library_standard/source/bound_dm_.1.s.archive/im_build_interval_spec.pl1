/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  module  takes  a search_specification as input and produces an
     interval_specification as output.  The interval_specification consists of
     a series of value intervals which  are  non-overlapping,  each  of  which
     "points"   at   one   or   more   of   the   and_groups   in   the  input
     search_specification.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 10/06/82.
Modified:
10/27/82 by Lindsey Spratt:  Fixed check for purely sequential and_group.
12/06/82 by Lindsey Spratt:  Extended to return a single "null" interval_bead
	  when there are no and_groups.  Also, added a finish proc which
	  is called before returning and on cleanup.
12/09/82 by Lindsey Spratt:  Fixed to initialize interval_bead.next to null.
05/24/83 by Matthew Pierret: Changed to use version 4 of specification_head,
            which includes constraint().value_field_id.
07/11/83 by Matthew Pierret: Extended field_presence_array to keep track of
            non_structural, structural equal and structural less or greater
            fields.  Changed to allow number_of_equal_fields to include the
            first_range_field if that field is an equal field.
            Changed to allow for the possibility of first_range_field being
            equal to number_of_equal_fields when setting the low and high
            constraint idx in SIMPLE_RANGE_CONSTRAINT.   
08/05/83 by Matthew Pierret: Fixed a bug in the setting of the low and high 
            constraint idx.  In the case where the last equal field has more
            than one constraint on it, one being an equal operator and the other
            a range operator, the range operator should be considered to be
            non-structural.  
07/16/84 by Matthew C. Pierret:  Changed the CONSTRAINT_LOOP to detect that
            there are multiple equal constraints on the same field, and to
            consider that case to be both an equal and a non-structural
            constraint.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2
            interval_specification.  Some remodularization was done.
*/

/* format: style2,ind3 */
im_build_interval_spec:
   proc (p_work_area_ptr, p_search_specification_ptr, p_interval_specification_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_search_specification_ptr
			       ptr parameter;
      dcl	    p_interval_specification_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    first_range_field_is_not_adjacent_to_equal_fields
			       bit (1) aligned init ("0"b);

      dcl	    old_interval_bead_ptr  ptr init (null);
      dcl	    root_interval_bead_ptr ptr init (null);
      dcl	    temp_interval_bead_ptr ptr init (null);
      dcl	    field_presence_array_ptr
			       ptr init (null);
      dcl	    temp_next_ptr	       ptr init (null);

      dcl	    fpa_number_of_fields   fixed bin;
      dcl	    and_group_idx	       fixed bin;
      dcl	    first_range_field      fixed bin;
      dcl	    number_of_equal_fields fixed bin;
      dcl	    number_of_intervals    fixed bin init (0);
      dcl	    constraint_idx	       fixed bin;
      dcl	    (last_constraint_idx, low_constraint_idx, high_constraint_idx)
			       fixed bin init (0);

      dcl	    constraint_field_id    fixed bin;
      dcl	    constraint_operator_code
			       fixed bin (18) uns;

      dcl	    work_area_ptr	       ptr init (null);

/* Based */

      dcl	    1 field_presence_array (fpa_number_of_fields) aligned based (field_presence_array_ptr),
	      2 non_structural     bit (1) unal,
	      2 structural	       unal,
	        3 equal	       bit (1) unal,
	        3 less_or_greater  bit (1) unal;

      dcl	    work_area	       based (work_area_ptr) area;

/* Builtin */

      dcl	    (sum, null, min)       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("im_build_interval_spec") char (32) varying internal static options (constant);
      dcl	    (
	    IS_PRESENT	       init ("1"b),
	    NOT_PRESENT	       init ("0"b)
	    )		       bit (1) unal internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$programming_error,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      work_area_ptr = p_work_area_ptr;
      search_specification_ptr = p_search_specification_ptr;
      call CHECK_VERSION (search_specification.version, SPECIFICATION_VERSION_4, "specification");
      if search_specification.head.type ^= ABSOLUTE_SEARCH_SPECIFICATION_TYPE
	 & search_specification.head.type ^= RELATIVE_SEARCH_SPECIFICATION_TYPE
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected a ""search"" type (^d or ^d) specification structure.
Received a structure of type ^d, instead.", ABSOLUTE_SEARCH_SPECIFICATION_TYPE, RELATIVE_SEARCH_SPECIFICATION_TYPE,
	      search_specification.head.type);
      p_code = 0;

      interval_specification_ptr = null;
      interval_bead_ptr = null;
      field_presence_array_ptr = null;

      on cleanup call FINISH;

      if search_specification.number_of_and_groups = 0
      then
         do;
	  alloc interval_bead in (work_area);
	  interval_bead.next = null;
	  interval_bead.simple_typed_vector_ptr = null;
	  interval_bead.low.value_ptr, interval_bead.high.value_ptr = null;
	  interval_bead.low.operator_code, interval_bead.high.operator_code = 0;
	  interval_bead.number_of_fully_structural_fields = 0;
	  interval_bead.id_list_ptr = null;
	  interval_bead.low.id_string, interval_bead.high.id_string = "0"b;
	  root_interval_bead_ptr = interval_bead_ptr;
	  number_of_intervals = 1;
         end;
      else
         do;
	  fpa_number_of_fields = sum (search_specification.and_group.number_of_constraints) + 1;
	  alloc field_presence_array in (work_area);
	  string (field_presence_array (*)) = "0"b;

/* For each and_group, one interval_bead is constructed.  The interval_bead */
/* identifies the "low" end of the interval and the "high" end, among other */
/* things. */

AND_GROUP_LOOP:
	  do and_group_idx = 1 to search_specification.number_of_and_groups;
	     call PROCESS_AND_GROUP (and_group_idx);
	  end AND_GROUP_LOOP;
         end;

      alloc interval_specification in (work_area);
      interval_specification.version = INTERVAL_SPECIFICATION_VERSION_2;
      interval_specification.number_of_intervals = number_of_intervals;
      interval_specification.first_interval_bead_ptr = root_interval_bead_ptr;
      interval_specification.last_interval_bead_ptr = interval_bead_ptr;

      p_interval_specification_ptr = interval_specification_ptr;
      call FINISH;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
FINISH:
   proc;
      if interval_specification_ptr = null | interval_specification_ptr ^= p_interval_specification_ptr
      then
         do;
	  do interval_bead_ptr = root_interval_bead_ptr repeat (temp_interval_bead_ptr)
	       while (interval_bead_ptr ^= null);
	     temp_interval_bead_ptr = interval_bead.next;
	     if interval_bead.simple_typed_vector_ptr ^= null
	     then free interval_bead.simple_typed_vector_ptr -> simple_typed_vector in (work_area);
	     if interval_bead.id_list_ptr ^= null
	     then free interval_bead.id_list_ptr -> id_list in (work_area);
	     free interval_bead in (work_area);
	  end;
	  if interval_specification_ptr ^= null
	  then free interval_specification in (work_area);
         end;
      if field_presence_array_ptr ^= null
      then free field_presence_array in (work_area);
   end FINISH;
%page;
PROCESS_AND_GROUP:
   proc (pag_p_and_group_idx);
      dcl	    pag_p_and_group_idx    fixed bin parameter;

      first_range_field = search_specification.and_group (pag_p_and_group_idx).number_of_constraints + 1;
CONSTRAINT_LOOP:
      do constraint_idx = 1 to search_specification.and_group (pag_p_and_group_idx).number_of_constraints;
         call PROCESS_CONSTRAINT (pag_p_and_group_idx, constraint_idx);
      end CONSTRAINT_LOOP;

      do number_of_equal_fields = 1 to min (hbound (field_presence_array, 1) - 1, first_range_field)
	 while (field_presence_array (number_of_equal_fields).structural.equal = IS_PRESENT);
      end;
      if number_of_equal_fields ^= first_range_field
	 | field_presence_array (number_of_equal_fields).structural.equal = NOT_PRESENT
      then number_of_equal_fields = number_of_equal_fields - 1;

      if number_of_equal_fields = first_range_field & field_presence_array (first_range_field).structural.equal
	 & field_presence_array (first_range_field).structural.less_or_greater
      then
         do;
	  field_presence_array (first_range_field).structural.less_or_greater = NOT_PRESENT;
	  field_presence_array (first_range_field).non_structural = IS_PRESENT;
         end;

      if number_of_equal_fields = 0
	 & (first_range_field > 1
	 | (first_range_field = 1 & field_presence_array (first_range_field).structural.less_or_greater = NOT_PRESENT))
      then
NON_STRUCTURAL_CONSTRAINT:
         do;
	  p_interval_specification_ptr = null;

	  do interval_bead_ptr = root_interval_bead_ptr repeat (temp_next_ptr) while (interval_bead_ptr ^= null);
	     temp_next_ptr = interval_bead.next;
	     if interval_bead.simple_typed_vector_ptr ^= null
	     then free interval_bead.simple_typed_vector_ptr -> simple_typed_vector in (work_area);
	     free interval_bead in (work_area);
	  end;
	  return;
         end NON_STRUCTURAL_CONSTRAINT;

      if number_of_equal_fields < first_range_field - 1
      then first_range_field_is_not_adjacent_to_equal_fields = "1"b;
						/* There is a gap following the last equal field. */

      if first_range_field_is_not_adjacent_to_equal_fields
	 | field_presence_array (first_range_field).structural.less_or_greater = NOT_PRESENT
						/* The first_range_field has no "structural" constraint. */
      then
EQUAL_CONSTRAINT:
         do;
	  number_of_intervals = number_of_intervals + 1;
	  old_interval_bead_ptr = interval_bead_ptr;

	  alloc interval_bead in (work_area);
	  interval_bead.next = null;

/* Thread in the new interval_bead. */

	  if old_interval_bead_ptr = null
	  then root_interval_bead_ptr = interval_bead_ptr;
	  else old_interval_bead_ptr -> interval_bead.next = interval_bead_ptr;

/* Build the list of and_group ids for this interval. */

	  il_number_of_ids = 1;
	  alloc id_list in (work_area);
	  id_list.version = ID_LIST_VERSION_1;
	  id_list.id (1) = pag_p_and_group_idx;

	  interval_bead.id_list_ptr = id_list_ptr;

/* Determine the number of fully structural fields. It is possible for the 
last equal field to contain a non structural constraint. This is only
possible if that field is also the first range field. */

	  if ^first_range_field_is_not_adjacent_to_equal_fields
	       & field_presence_array (first_range_field).non_structural = IS_PRESENT
	  then interval_bead.number_of_fully_structural_fields = number_of_equal_fields - 1;
	  else interval_bead.number_of_fully_structural_fields = number_of_equal_fields;

/* Build a simple_typed_vector containing all of the values for the dimensions
defining the interval but the last.  The last defining-dimension's value will
always appear in the low.value_ptr (and high.value_ptr if not doing an
exact-match).
*/

	  stv_number_of_dimensions = number_of_equal_fields;
	  alloc simple_typed_vector in (work_area);
	  simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
	  last_constraint_idx = 0;
	  do constraint_idx = 1 to search_specification.and_group (pag_p_and_group_idx).number_of_constraints;
	     constraint_field_id =
		search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).field_id;
	     if constraint_field_id < number_of_equal_fields & constraint_field_id > 0
	     then simple_typed_vector.dimension (constraint_field_id).value_ptr =
		     search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).value_ptr;
	     else if constraint_field_id = number_of_equal_fields
		     & search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).operator_code
		     = EQUAL_OPERATOR_CODE
	     then last_constraint_idx = constraint_idx;
	  end;

	  interval_bead.simple_typed_vector_ptr = simple_typed_vector_ptr;
	  interval_bead.low.value_ptr =
	       search_specification.and_group (pag_p_and_group_idx).constraint (last_constraint_idx).value_ptr;
	  interval_bead.low.operator_code = GREATER_OR_EQUAL_OPERATOR_CODE;
	  interval_bead.high.value_ptr = interval_bead.low.value_ptr;
	  interval_bead.high.operator_code = LESS_OR_EQUAL_OPERATOR_CODE;

         end EQUAL_CONSTRAINT;
      else if field_presence_array (first_range_field).structural.less_or_greater = IS_PRESENT
      then
SIMPLE_RANGE_CONSTRAINT:
         do;

	  number_of_intervals = number_of_intervals + 1;
	  old_interval_bead_ptr = interval_bead_ptr;
	  alloc interval_bead in (work_area);
	  interval_bead.next = null;

/* Thread the new interval_bead into the list of intervals. */

	  if old_interval_bead_ptr = null
	  then root_interval_bead_ptr = interval_bead_ptr;
	  else old_interval_bead_ptr -> interval_bead.next = interval_bead_ptr;

/* Build the list of and_group ids for this interval. */

	  il_number_of_ids = 1;
	  alloc id_list in (work_area);
	  id_list.version = ID_LIST_VERSION_1;
	  id_list.id (1) = pag_p_and_group_idx;

	  interval_bead.id_list_ptr = id_list_ptr;

/* Determine the number of fully structural fields. The first range field
is the last fully structual field if there are no non-structural contraints
on that field. */

	  if field_presence_array (first_range_field).non_structural = NOT_PRESENT
	  then interval_bead.number_of_fully_structural_fields = first_range_field;

	  else interval_bead.number_of_fully_structural_fields = first_range_field - 1;

/* Build the simple_typed_vector for the interval. */

	  stv_number_of_dimensions = first_range_field;
	  alloc simple_typed_vector in (work_area);
	  simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;

	  low_constraint_idx, high_constraint_idx = 0;
	  do constraint_idx = 1 to search_specification.and_group (pag_p_and_group_idx).number_of_constraints;
	     constraint_field_id =
		search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).field_id;
	     constraint_operator_code =
		search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).operator_code;

	     if constraint_field_id <= number_of_equal_fields & constraint_field_id > 0
	     then simple_typed_vector.dimension (constraint_field_id).value_ptr =
		     search_specification.and_group (pag_p_and_group_idx).constraint (constraint_idx).value_ptr;

	     if constraint_field_id = first_range_field
	     then if USES_GREATER_OPERATOR (constraint_operator_code)
		then low_constraint_idx = constraint_idx;
		else if USES_LESS_OPERATOR (constraint_operator_code)
		then high_constraint_idx = constraint_idx;
	  end;
	  interval_bead.simple_typed_vector_ptr = simple_typed_vector_ptr;

	  if low_constraint_idx <= 0 & high_constraint_idx <= 0
	  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/In a simple range specification the low and high constraint indices^/are not set.  One of them must be set."
		  );

	  if low_constraint_idx > 0
	  then
	     do;
	        interval_bead.low.value_ptr =
		   search_specification.and_group (pag_p_and_group_idx).constraint (low_constraint_idx).value_ptr;
	        interval_bead.low.operator_code =
		   search_specification.and_group (pag_p_and_group_idx).constraint (low_constraint_idx).operator_code;
	     end;
	  else
	     do;
	        interval_bead.low.operator_code = GREATER_OPERATOR_CODE;
	        interval_bead.low.value_ptr = null;
	     end;

	  if high_constraint_idx > 0
	  then
	     do;
	        interval_bead.high.value_ptr =
		   search_specification.and_group (pag_p_and_group_idx).constraint (high_constraint_idx).value_ptr;
	        interval_bead.high.operator_code =
		   search_specification.and_group (pag_p_and_group_idx).constraint (high_constraint_idx)
		   .operator_code;
	     end;
	  else
	     do;
	        interval_bead.high.operator_code = LESS_OPERATOR_CODE;
	        interval_bead.high.value_ptr = null;
	     end;
         end SIMPLE_RANGE_CONSTRAINT;
      else
MULTIPLE_RANGE_CONSTRAINT:
         do;

/* The use of "^=" should be addressed by building one interval_bead for */
/* each "^=" present.  Currently, these are applied in the sequential */
/* search. */

         end MULTIPLE_RANGE_CONSTRAINT;
   end PROCESS_AND_GROUP;
%page;
PROCESS_CONSTRAINT:
   proc (pc_p_and_group_idx, pc_p_constraint_idx);
      dcl	    pc_p_and_group_idx     fixed bin parameter;
      dcl	    pc_p_constraint_idx    fixed bin parameter;

      constraint_field_id = search_specification.and_group (pc_p_and_group_idx).constraint (pc_p_constraint_idx).field_id;
      constraint_operator_code =
	 search_specification.and_group (pc_p_and_group_idx).constraint (pc_p_constraint_idx).operator_code;

      if constraint_field_id <= first_range_field & constraint_field_id > 0
      then if constraint_operator_code = EQUAL_OPERATOR_CODE
	 then if field_presence_array (constraint_field_id).structural.equal = NOT_PRESENT
	      then field_presence_array (constraint_field_id).structural.equal = IS_PRESENT;
	      else
	         do;				/* Only one equal constraint on field can be processed structurally */
		  first_range_field = min (first_range_field, constraint_field_id);
		  field_presence_array (constraint_field_id).non_structural = IS_PRESENT;
	         end;
	 else if USES_REGULAR_EXPRESSION_OPERATOR (constraint_operator_code)
		 | constraint_operator_code = NOT_EQUAL_OPERATOR_CODE
		 | search_specification.and_group (pc_p_and_group_idx).constraint (pc_p_constraint_idx).value_field_id
		 >= 1
	 then
	    do;
	       first_range_field = min (first_range_field, constraint_field_id);
	       field_presence_array (constraint_field_id).non_structural = IS_PRESENT;
	    end;
	 else if USES_LESS_OPERATOR (constraint_operator_code) | USES_GREATER_OPERATOR (constraint_operator_code)
	 then
	    do;
	       first_range_field = min (first_range_field, constraint_field_id);
	       field_presence_array (constraint_field_id).structural.less_or_greater = IS_PRESENT;
	    end;
	 else call sub_err_ (dm_error_$programming_error, myname, ACTION_CAN_RESTART, null, 0,
		 "^/The operator code ^d is not recognized as valid.", constraint_operator_code);

   end PROCESS_CONSTRAINT;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_interval_spec;
%page;
%include vu_typed_vector;
%page;
%include dm_id_list;
%page;
%include dm_operator_constants;
%page;
%include sub_err_flags;
   end im_build_interval_spec;
