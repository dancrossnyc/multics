/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

          Gets the record or set of records specified by the caller. Records
     are returned as simple_typed_vectors allocated in the provided area. If
     called by the array entry point, these vectors are combined in a
     typed_vector_array. 
          This routine always gets the record collection's opening information.
     A later performance gain can be achieved by adding single_info and
     array_info entry points that take pointers to opening information.
*/

/* HISTORY:
Written by Matthew Pierret 04/23/82.
Modified:
08/20/82 by Matthew Pierret:  Made enter-able only by the entry points single 
            and array.  Added use of rm_get_opening_info, which is in reality
            simply the field_table.
10/14/82 by Matthew Pierret:  Made to set p_typed_vector_array_ptr before 
            returning.  Made to use dmu_$cv_table_to_typed_array.
10/20/82 by Matthew Pierret:  Changed to incrementally up the number of vectors
            in the output typed_vector_array as each new record is retrieved.
01/04/83 by Lindsey Spratt:  Changed to allow calls to cm_$get_element to
	  allocate a new buffer when the provided buffer is too small.
02/09/83 by Lindsey Spratt:  Changed to use the
	  data_mgmt_util_$new_cv_string_to_vector entry instead of
	  $cv_string_to_vector.  The difference is that the $new_* entry
	  will re-use an input vector rather than allocating a new one, if
	  the input vector_ptr is non-null, rather than the old behavior of
	  always allocating a new vector regardless of the value of the
	  input vector_ptr.  Only the $single entry is actually set up to
	  take advantage of this feature.
03/16/83 by Matthew Pierret: Changed to receive record_collection_opening_info
            structure from rm_get_opening_info, use get_dm_free_area_ () 
            instead of dm_data_$area_ptr, use dm_error_$wrong_cursor_type,
            convert some collection_manager_ error codes to $record_not_found.
            Added cleanup handler. Moved record_cursor type check before
            version check.
03/24/83 by Lindsey Spratt:  Removed reference to the field_table include
	  file, declared field_table_ptr locally.
07/28/83 by Matthew Pierret: Changed name from rm_get_record_by_id to
            rcm_get_record_by_id, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin:  Renamed the parameters to coincide with all the other
            rcm_XX routines.  Removed the p_typed_vector_type and
            p_typed_vector_array_version parameters because they aren't used.
05/10/84 by Matthew Pierret:  Changed to align the record buffer on an even
            word.  Changed references to data_mgmt_util_ to be to
            data_format_util_.  Removed declarations of un-used variables.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get.
09/27/84 by Maggie Sharpe:  Changed the call to sub_err in CHECK_VERSION and
            CHECK_VERSION_CHAR_8 to use new flag parameter for restart option;
	  removed a (harmless) duplicate statement; cleaned up dcls.
03/19/85 by Lindsey L. Spratt:  Fixed to handle the TUPLE_ID_FIELD_ID.
03/20/85 by Lindsey L. Spratt:  Fixed to set aor_vector_ptr equal to
            aor_p_result_ptr for the CREATE_OUTPUT_RECORD process.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

rcm_get_record_by_id:
   proc ();

      return;					/* Not a real entry */

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_record_cursor_ptr    ptr;
      dcl	    p_simple_typed_vector_ptr
			       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_record_id	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    get_array_of_records   bit (1) aligned init ("0"b);
      dcl	    get_single_record      bit (1) aligned init ("0"b);
      dcl	    record_id	       bit (36) aligned;
      dcl	    record_id_field_id     fixed bin init (DEFAULT_RECORD_ID_FIELD_ID);
      dcl	    record_idx	       fixed bin;
      dcl	    record_string_length   fixed bin (35);
      dcl	    record_string_ptr      ptr init (null);
      dcl	    field_table_ptr	       ptr init (null);
      dcl	    descriptor_string_ptr  ptr init (null);
      dcl	    local_record_buffer    (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
						/* This declaration forces an even-word boundary */
      dcl	    new_buffer_was_allocated
			       bit (1) aligned init ("0"b);
      dcl	    record_buffer_ptr      ptr init (null);
      dcl	    record_buffer_length   fixed bin (35) init (BITS_PER_PAGE);
      dcl	    dm_work_area_ptr       ptr init (null);

/* Based */

      dcl	    dm_work_area	       area based (dm_work_area_ptr);
      dcl	    record_buffer	       based (record_buffer_ptr) bit (record_buffer_length) aligned;

/* Builtin */

      dcl	    (addr, hbound, null)   builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    AREA_IS_BIG_ENOUGH     init (1),
	    AREA_IS_TOO_SMALL      init (2),
	    BITS_PER_PAGE	       init (1024 * 36),
	    DEFAULT_RECORD_ID_FIELD_ID
			       init (-1),
	    DOUBLE_WORDS_PER_PAGE  init (512),
	    VECTOR_SLOT_INCREMENT  init (500)
	    )		       fixed bin internal static options (constant);

      dcl	    (
	    FREE_OLD_TYPED_VECTOR_ARRAY
			       init ("1"b),
	    TRUE		       init ("1"b),
	    FALSE		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);

      dcl	    myname	       init ("rcm_get_record_by_id") char (32) varying internal static options (constant);

/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    data_format_util_$new_cv_string_to_vector
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, ptr, fixed bin (35));
      dcl	    data_format_util_$cv_table_to_typed_array
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, fixed bin (35));
      dcl	    dm_vector_util_$append_simple_typed_vector
			       entry options (variable) returns (ptr);
      dcl	    dm_vector_util_$free_typed_vector
			       entry (ptr, ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry options (variable);
      dcl	    get_dm_free_area_      entry () returns (ptr);

/* External */

      dcl	    (
	    error_table_$area_too_small,
	    error_table_$unimplemented_version,
	    dm_error_$record_not_found,
	    dm_error_$wrong_cursor_type
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

single:
   entry (p_record_id, p_id_list_ptr, p_work_area_ptr, p_record_cursor_ptr, p_simple_typed_vector_ptr, p_code);

      get_single_record = "1"b;
      record_id = p_record_id;
      simple_typed_vector_ptr = p_simple_typed_vector_ptr;
      typed_vector_array_ptr = null ();
      goto JOIN;


array:
   entry (p_element_id_list_ptr, p_id_list_ptr, p_work_area_ptr, p_record_cursor_ptr, p_typed_vector_array_ptr, p_code);

      element_id_list_ptr = p_element_id_list_ptr;

      call CHECK_VERSION ((element_id_list.version), (ELEMENT_ID_LIST_VERSION_1), "element_id_list");

      record_id = element_id_list.id (1);
      get_single_record = "0"b;
      simple_typed_vector_ptr = null;
      typed_vector_array_ptr = p_typed_vector_array_ptr;
      goto JOIN;

%page;
JOIN:
      p_code = 0;

      record_cursor_ptr = p_record_cursor_ptr;

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected record cursor, type ^d; received type ^d.", RECORD_CURSOR_TYPE, record_cursor.type);

      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");


      call rcm_get_opening_info (record_cursor.file_opening_id, record_cursor.collection_id,
	 record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION_CHAR_8 (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
	 "record_collection_opening_info");

      field_table_ptr = record_collection_opening_info.field_table_ptr;

      dm_work_area_ptr = get_dm_free_area_ ();

      record_buffer_ptr = addr (local_record_buffer);

      on cleanup call FINISH ();

      call SETUP_ID_LIST (p_id_list_ptr, id_list_ptr, record_id_field_id);

      call collection_manager_$get (record_cursor.file_opening_id, record_cursor.collection_id, record_id, 0,
	 record_buffer_ptr, record_buffer_length, dm_work_area_ptr, new_buffer_was_allocated, record_string_ptr,
	 record_string_length, p_code);
      if p_code ^= 0
      then call GET_ELEMENT_ERROR_RETURN (p_code);

      if new_buffer_was_allocated
      then
         do;
	  record_buffer_ptr = record_string_ptr;
	  record_buffer_length = record_string_length;
         end;


      call CREATE_OUTPUT_RECORD (record_string_ptr, record_string_length, simple_typed_vector_ptr, field_table_ptr,
	 p_work_area_ptr, id_list_ptr, record_id_field_id, record_id, (0));

      if get_single_record
      then p_simple_typed_vector_ptr = simple_typed_vector_ptr;
      else
GET_REST_OF_RECORDS:
         do;
	  call SETUP_OUTPUT_RECORDS (typed_vector_array_ptr, hbound (element_id_list.id, 1), record_id_field_id,
	       field_table_ptr, id_list_ptr, p_work_area_ptr, typed_vector_array_ptr);

	  typed_vector_array.number_of_vectors = 1;
	  typed_vector_array.vector_slot (1) = simple_typed_vector_ptr;

	  do record_idx = 2 to hbound (element_id_list.id, 1);

	     record_id = element_id_list.id (record_idx);

	     call collection_manager_$get (record_cursor.file_opening_id, record_cursor.collection_id, record_id, 0,
		record_buffer_ptr, record_buffer_length, dm_work_area_ptr, new_buffer_was_allocated,
		record_string_ptr, record_string_length, p_code);
	     if p_code ^= 0
	     then call GET_ELEMENT_ERROR_RETURN (p_code);

	     if new_buffer_was_allocated
	     then
	        do;
		 if record_buffer_ptr ^= addr (local_record_buffer)
		 then free record_buffer in (dm_work_area);
		 record_buffer_ptr = record_string_ptr;
		 record_buffer_length = record_string_length;
	        end;
	     call APPEND_OUTPUT_RECORD (record_string_ptr, record_string_length, typed_vector_array_ptr,
		field_table_ptr, p_work_area_ptr, id_list_ptr, record_id_field_id, record_id, (0));
	  end;
	  p_typed_vector_array_ptr = typed_vector_array_ptr;

         end GET_REST_OF_RECORDS;

      record_cursor.record_id = record_id;
      record_cursor.flags.position_is_valid = "1"b;

      call FINISH;
RETURN:
      return;
%page;
FINISH:
   proc;
      if record_buffer_ptr ^= addr (local_record_buffer)
      then free record_buffer in (dm_work_area);
   end FINISH;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parm;


      call FINISH ();
      p_code = er_p_code;
      goto RETURN;

   end ERROR_RETURN;
%page;
APPEND_OUTPUT_RECORD:
   proc (aor_p_record_string_ptr, aor_p_record_string_length, aor_p_result_ptr, aor_p_field_table_ptr,
        aor_p_work_area_ptr, aor_p_id_list_ptr, aor_p_record_id_field_id, aor_p_record_id, aor_p_area_status);

      dcl	    aor_p_record_string_ptr
			       ptr parameter;
      dcl	    aor_p_record_string_length
			       fixed bin (35) parameter;
      dcl	    aor_p_result_ptr       ptr parameter;
      dcl	    aor_p_field_table_ptr  ptr parameter;
      dcl	    aor_p_work_area_ptr    ptr parameter;
      dcl	    aor_p_id_list_ptr      ptr parameter;
      dcl	    aor_p_record_id_field_id
			       fixed bin parameter;
      dcl	    aor_p_record_id	       bit (36) aligned parameter;
      dcl	    aor_p_area_status      fixed bin parm;

      dcl	    aor_p_work_area	       based (aor_p_work_area_ptr) area;

      dcl	    aor_vector_ptr	       ptr init (null ());
      dcl	    aor_record_id_ptr      ptr init (null ());
      dcl	    aor_set_result_ptr_to_new_vector
			       bit (1) aligned init ("0"b);
      dcl	    aor_typed_vector_array_ptr
			       ptr init (null ());
      dcl	    aor_code	       fixed bin (35);

      aor_typed_vector_array_ptr = aor_p_result_ptr;
      aor_set_result_ptr_to_new_vector = "0"b;

      aor_code = 0;

      aor_vector_ptr =
	 dm_vector_util_$append_simple_typed_vector (aor_p_work_area_ptr, VECTOR_SLOT_INCREMENT,
	 FREE_OLD_TYPED_VECTOR_ARRAY, aor_typed_vector_array_ptr, aor_code);
      if aor_code ^= 0
      then if aor_code = error_table_$area_too_small
	 then call AOR_RETURN (AREA_IS_TOO_SMALL);
	 else call ERROR_RETURN (aor_code);
      goto AOR_JOIN;

CREATE_OUTPUT_RECORD:
   entry (aor_p_record_string_ptr, aor_p_record_string_length, aor_p_result_ptr, aor_p_field_table_ptr,
        aor_p_work_area_ptr, aor_p_id_list_ptr, aor_p_record_id_field_id, aor_p_record_id, aor_p_area_status);
      aor_typed_vector_array_ptr = null ();
      aor_vector_ptr = aor_p_result_ptr;
      aor_set_result_ptr_to_new_vector = "1"b;
AOR_JOIN:
      call data_format_util_$new_cv_string_to_vector (aor_p_field_table_ptr, aor_p_work_area_ptr, aor_p_record_string_ptr,
	 aor_p_record_string_length, aor_p_id_list_ptr, aor_vector_ptr, aor_code);
      if aor_code ^= 0
      then if aor_code = error_table_$area_too_small
	 then
	    do;
	       if aor_typed_vector_array_ptr ^= null ()
	       then
		do;
		   aor_typed_vector_array_ptr -> typed_vector_array.number_of_vectors =
		        aor_typed_vector_array_ptr -> typed_vector_array.number_of_vectors - 1;
		   call dm_vector_util_$free_typed_vector (aor_p_work_area_ptr, aor_typed_vector_array_ptr,
		        aor_vector_ptr, aor_code);
		   if aor_code ^= 0
		   then call ERROR_RETURN (aor_code);
		end;
	       call AOR_RETURN (AREA_IS_TOO_SMALL);
	    end;
	 else call ERROR_RETURN (aor_code);

      if aor_p_record_id_field_id ^= DEFAULT_RECORD_ID_FIELD_ID
      then
         do;
	  alloc element_id in (aor_p_work_area) set (aor_record_id_ptr);
	  aor_vector_ptr -> simple_typed_vector.dimension (aor_p_record_id_field_id).value_ptr = aor_record_id_ptr;
	  unspec (aor_record_id_ptr -> element_id) = aor_p_record_id;
         end;

      call AOR_RETURN (AREA_IS_BIG_ENOUGH);
AOR_MAIN_RETURN:
      return;

AOR_RETURN:
   proc (aorr_p_area_status);
      dcl	    aorr_p_area_status     fixed bin parm;
      aor_p_area_status = aorr_p_area_status;
      if aor_set_result_ptr_to_new_vector
      then aor_p_result_ptr = aor_vector_ptr;
      else aor_p_result_ptr = aor_typed_vector_array_ptr;
      goto AOR_MAIN_RETURN;
   end AOR_RETURN;

   end APPEND_OUTPUT_RECORD;
%page;
GET_ELEMENT_ERROR_RETURN:
   proc (p_code);

      dcl	    p_code	       fixed bin (35);
      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element
	    )		       fixed bin (35) ext;

      if p_code = dm_error_$no_element
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_in_collection
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_allocated
      then p_code = dm_error_$record_not_found;

      call ERROR_RETURN (p_code);

   end GET_ELEMENT_ERROR_RETURN;


SETUP_ID_LIST:
   proc (sil_p_input_id_list_ptr, sil_p_output_id_list_ptr, sil_p_record_id_field_id);

      dcl	    sil_p_input_id_list_ptr
			       ptr parameter;
      dcl	    sil_p_output_id_list_ptr
			       ptr parameter;
      dcl	    sil_p_record_id_field_id
			       fixed bin;

      sil_p_output_id_list_ptr = sil_p_input_id_list_ptr;
      if sil_p_output_id_list_ptr = null ()
      then
         do;
	  sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
         end;
      else
         do;
	  call CHECK_VERSION (sil_p_output_id_list_ptr -> id_list.version, (ID_LIST_VERSION_1), "id_list");
	  if sil_p_output_id_list_ptr -> id_list.number_of_ids = 0
	  then
	     do;
	        sil_p_output_id_list_ptr = null ();
	        sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
	     end;
	  else
	     do;
	        if sil_p_output_id_list_ptr -> id_list.id (sil_p_output_id_list_ptr -> id_list.number_of_ids)
		   = DEFAULT_RECORD_ID_FIELD_ID
	        then sil_p_record_id_field_id = sil_p_output_id_list_ptr -> id_list.number_of_ids;
	        else sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
	     end;
         end;

      return;

   end SETUP_ID_LIST;
%page;
SETUP_OUTPUT_RECORDS:
   proc (sor_p_input_tva_ptr, sor_p_maximum_number_of_records, sor_p_record_id_field_id, sor_p_field_table_ptr,
        sor_p_id_list_ptr, sor_p_work_area_ptr, sor_p_output_tva_ptr);

      dcl	    sor_p_input_tva_ptr    ptr parameter parameter;
      dcl	    sor_p_maximum_number_of_records
			       fixed bin (35) parameter;
      dcl	    sor_p_record_id_field_id
			       fixed bin parameter;
      dcl	    sor_p_field_table_ptr  ptr parameter;
      dcl	    sor_p_id_list_ptr      ptr parameter;
      dcl	    sor_p_work_area_ptr    ptr parameter;
      dcl	    sor_p_output_tva_ptr   ptr parameter;

      dcl	    sor_p_work_area	       area based (sor_p_work_area_ptr);

      dcl	    sor_record_id_descriptor_ptr
			       ptr;
      dcl	    sor_code	       fixed bin (35);

      if sor_p_input_tva_ptr = null ()
      then
         do;
	  sor_code = 0;
	  call data_format_util_$cv_table_to_typed_array (sor_p_field_table_ptr, sor_p_id_list_ptr, sor_p_work_area_ptr,
	       (VECTOR_SLOT_INCREMENT), sor_p_output_tva_ptr, sor_code);
	  if sor_code ^= 0
	  then call ERROR_RETURN (sor_code);
	  call CHECK_VERSION (sor_p_output_tva_ptr -> typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2,
	       "typed_vector_array");
	  if sor_p_record_id_field_id ^= DEFAULT_RECORD_ID_FIELD_ID
	  then
	     do;
	        alloc arg_descriptor in (sor_p_work_area) set (sor_record_id_descriptor_ptr);
	        sor_record_id_descriptor_ptr -> arg_descriptor.flag = TRUE;
	        sor_record_id_descriptor_ptr -> arg_descriptor.type = bit_dtype;
	        sor_record_id_descriptor_ptr -> arg_descriptor.packed = FALSE;
	        sor_record_id_descriptor_ptr -> arg_descriptor.number_dims = 0;
	        sor_record_id_descriptor_ptr -> arg_descriptor.size = 36;
	        sor_p_output_tva_ptr -> typed_vector_array.dimension_table (sor_p_record_id_field_id).name = "0";
	        sor_p_output_tva_ptr -> typed_vector_array.dimension_table (sor_p_record_id_field_id).descriptor_ptr =
		   sor_record_id_descriptor_ptr;
	     end;
         end;
      else
         do;
	  sor_p_output_tva_ptr = sor_p_input_tva_ptr;
	  call CHECK_VERSION (sor_p_output_tva_ptr -> typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2,
	       "typed_vector_array");
         end;

      return;

   end SETUP_OUTPUT_RECORDS;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
%include arg_descriptor;
%page;
%include dm_rcm_cursor;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_id_list;
%page;
%include dm_element_id;
%page;
%include dm_element_id_list;
%page;
%include dm_ci_lengths;
%page;
%include vu_typed_vector_array;
%page;
%include vu_typed_vector;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include sub_err_flags;
%page;
%include std_descriptor_types;
   end rcm_get_record_by_id;
