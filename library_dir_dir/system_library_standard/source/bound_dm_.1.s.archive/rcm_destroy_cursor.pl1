/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rcm_destroy_cursor:
   proc (p_record_cursor_ptr, p_code);

/* DESCRIPTION:
         This routine frees the storage used by the given record_cursor.
*/

/* HISTORY:
Written by Matthew Pierret, 04/04/83.
Modified:
07/28/83 by Matthew Pierret: Changed name from rm_destroy_cursor to
            rcm_destroy_cursor, and all rm_ prefixes to rcm_.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_record_cursor_ptr    ptr;		/*Pointer to record_cursor to be
                                        destroyed.*/
      dcl	    p_code	       fixed bin (35);	/*Error code*/

/* Automatic */

      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("rcm_destroy_cursor") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$wrong_cursor_type,
	    error_table_$unimplemented_version,
	    sys_info$max_seg_size
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;
      record_cursor_ptr = p_record_cursor_ptr;

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected a record cursor, type ^d.  Received cursor of type ^d.", RECORD_CURSOR_TYPE, record_cursor.type)
	    ;
      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      work_area_ptr = record_cursor.area_ptr;

      free record_cursor in (work_area);

      p_record_cursor_ptr = null;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
%include dm_rcm_cursor;
%page;
%include sub_err_flags;
   end rcm_destroy_cursor;
