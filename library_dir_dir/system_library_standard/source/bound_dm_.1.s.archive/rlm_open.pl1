/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rlm_open:
   proc ();

      return;					/* Not a valid entry point. */


/* DESCRIPTION

          This routine handles open and close requests with the two entries:
     $open:
          opens a relation, sets up relation opening structures if they have
     not been set up by a prior open, increments the count of openings for this
     process for this relation, and returns the file opening id as the
     rel_opening_id.

     $close: 
          decrements the count of openings. The relation_opening_info structure
     is gotten via rlm_opening_info$get_dont_refresh.  If the count of
     openings becomes 0, the relation_opening_info structure is freed (causing
     the relation_opening_info_ptr to become null) and the file is closed.
*/

/* HISTORY:
Written by Matthew Pierret, 04/28/82.
Modified:
10/19/82 by Matthew Pierret:  Added capability to generate and store 
            relation_info, maintain number of openings.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.
03/01/83 by Matthew Pierret:  Changed to use rlm_update_opening_info.
            Added $close.
03/16/83 by Matthew Pierret:  Changed $close to use rlm_opening_info
            $get_dont_refresh. This is because to close a relation, the
            refresh-able information is not needed (or desired).
05/16/83 by Lindsey L. Spratt:  Changed to call file_manager_$close in the
            $close entry if the call to rlm_update_opening_info$decrement*
            causes the relation_opening_info to be freed.
04/19/84 by Lindsey L. Spratt:  Fixed to only do the $init and $refresh if the
            error code from $get is dm_error_$relation_not_open, otherwise if
            the code is non-zero then this module just returns.
10/26/84 by Stanford S. Cox:  $open: Added cleanup. $close: moved fm_$close
            call from rlm_opening_info$free. ERROR_RETURN: modified from OPEN_=
            for use by $close. RETURN(added): for a common return point.
            FINISH(added)
11/26/84 by Stanford S. Cox:  ERROR_RETURN: Added call to FINISH.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_rel_dir	       char (*);
      dcl	    p_rel_entry	       char (*);
      dcl	    p_rel_opening_id       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */
/* Based */
/* Cleanup */

      dcl	    cleanup	       condition;

/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    IS_OPEN_ENTRY	       init ("1"b) bit (1) int static options (constant);
      dcl	    IS_CLOSE_ENTRY	       init ("0"b) bit (1) int static options (constant);
      dcl	    myname	       init ("rlm_open") char (8) internal static options (constant);

/* Entry */

      dcl	    file_manager_$open     entry (char (*), char (*), bit (36) aligned, fixed bin (35));
      dcl	    file_manager_$close    entry (bit (36) aligned, fixed bin (35));

      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_opening_info$get_dont_refresh
			       entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_opening_info$refresh
			       entry (ptr, fixed bin (35));
      dcl	    rlm_opening_info$init  entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$increment_openings
			       entry (ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$decrement_openings
			       entry (ptr, fixed bin (35));

/* External */

      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    dm_error_$file_already_open
			       ext fixed bin (35);
      dcl	    dm_error_$relation_not_open
			       ext fixed bin (35);

/* END OF DECLARATIONS */

open:
   entry (p_rel_dir, p_rel_entry, p_rel_opening_id, p_code);

      p_code = 0;
      p_rel_opening_id = "0"b;

      on cleanup call FINISH;
      call file_manager_$open (p_rel_dir, p_rel_entry, p_rel_opening_id, p_code);

      if p_code ^= 0 & p_code ^= dm_error_$file_already_open
      then call ERROR_RETURN (IS_OPEN_ENTRY, p_code);

      p_code = 0;

      call rlm_opening_info$get (p_rel_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then if p_code ^= dm_error_$relation_not_open
	 then call ERROR_RETURN (IS_OPEN_ENTRY, p_code);
	 else
	    do;
	       call rlm_opening_info$init (p_rel_opening_id, relation_opening_info_ptr, p_code);
	       if p_code ^= 0
	       then call ERROR_RETURN (IS_OPEN_ENTRY, p_code);

	       call rlm_opening_info$refresh (relation_opening_info_ptr, p_code);
	       if p_code ^= 0
	       then call ERROR_RETURN (IS_OPEN_ENTRY, p_code);
	    end;


      call rlm_update_opening_info$increment_openings (relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (IS_OPEN_ENTRY, p_code);

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_is_open_entry, er_p_code);

      dcl	    er_p_is_open_entry     bit (1) parameter;
      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      if er_p_is_open_entry
      then
         do;
	  call FINISH ();
	  p_rel_opening_id = "0"b;
         end;
      call RETURN;
   end ERROR_RETURN;
%skip;
RETURN:
   proc ();
      goto MAIN_RETURN;
   end;
%skip;
FINISH:
   proc ();
      call file_manager_$close (p_rel_opening_id, p_code);
   end;
%page;
close:
   entry (p_rel_opening_id, p_code);

      call rlm_opening_info$get_dont_refresh (p_rel_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (IS_CLOSE_ENTRY, p_code);

      call rlm_update_opening_info$decrement_openings (relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (IS_CLOSE_ENTRY, p_code);

      call file_manager_$close (p_rel_opening_id, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (IS_CLOSE_ENTRY, p_code);

      call RETURN;
%page;
%include dm_rlm_opening_info;

   end rlm_open;
