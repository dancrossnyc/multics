/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This subroutine searches an index and returns all of the keys (as
     typed_vectors in a typed_vector_array) which satisfy the specification
     provided by the caller.

*/

/* HISTORY:

Written by Lindsey Spratt, 06/16/82.
Modified:
07/13/82 by Lindsey Spratt:  Added support of ranges.
08/06/82 by Lindsey Spratt:  Renamed from im_get_key to im_general_search.
	  The get_key operation is now supported by the "get" entry.  Added
	  support for deleting keys, via the "delete" entry.
08/09/82 by Matthew Pierret:  Removed offset and length arguments from calls to
            collection_manager_$get_element which requested the entire element,
            and changed calls to get portions of an element into
            collection_manager_$get_element_portion.
08/17/82 by Matthew Pierret:  Changed calls to im_build_sequential_spec to
            calls to data_mgmt_util_$build_sequential_spec.
08/19/82 by Matthew Pierret:  Changed field_ids argument to data_mgmt_util_
            $cv_table_to_typed_array to be null, meaning convert all fields.
            Removed begin block and code which built field_ids array.
08/19/82 by Lindsey Spratt:  Changed to take p_id_list_ptr in the "get"
	  calling sequence.  Changed to pass this on the cv_table_to_array
	  and im_process_keys$get.
08/24/82 by Lindsey Spratt:  Changed the calling sequence of
	  im_process_keys$(delete get) to pass the subset_specification_ptr.
08/26/82 by Lindsey Spratt:  Added the "position" entry.  Added the "delete"
	  switch, which, with the "get" switch, allows the common code to
	  determine whether a get, delete, or position operation is being
	  done.  Added capability to do "relative" searching.
10/07/82 by Lindsey Spratt:  Changed to use the new search_specification
	  (version 2).  Added the "count" entry.
10/14/82 by Matthew Pierret:  Added number_of_slots argument to
            dmu_$cv_table_to_typed_array.
10/21/82 by Lindsey Spratt:  Added code for the numeric_specification.
	  Changed to use version 3 of the specification structures.
10/26/82 by Lindsey Spratt:  Fixed to catch "no_key" situations.  If the low
	  and high id_strings in an interval_bead are both "0"b, then there
	  is no key which satisfies that interval.
10/27/82 by Lindsey Spratt:  Fixed to set the first (or last) key ids to just
	  outside the index when doing an absolute numeric search.  This
	  causes an abs pos of 1 to get the first key, for instance.
10/28/82 by Lindsey Spratt:  Changed to use the opening_info, and to keep
	  track of the various key counts.
11/09/82 by Lindsey Spratt:  Added the interval_list_ptr to the calling
	  sequence for the get entry.  This is to support the
	  relation_manager_ in satisfying search_specifications which
	  specify more than the fields in the index.  The interval_list
	  identifies what intervals of the returned typed_vectors were
	  selected to satisfy which and_groups of the supplied
	  search_specification.

	  Changed to remove index_header_ptr from im_process_keys entry
	  points.  Also, changed to use dm_key_count_array include file.
11/23/82 by Lindsey Spratt:  Fixed to set the p_interval_list_ptr before
	  returning.
12/06/82 by Lindsey Spratt:  Fixed to handle the  0 and_groups in a
	  search_specification case, and the null specification case.
12/08/82 by Lindsey Spratt:  Fixed to return dm_error_$key_not_found if the
	  index_header.root_id is 0.
12/09/82 by Lindsey Spratt:  Changed to use the
	  im_update_opening_info$key_count_array entry instead of the
	  (non-existent) key_counts entry.
12/17/82 by Lindsey Spratt:  Fixed get_ci_header to work for branch and leaf
	  headers.
01/20/83 by Matthew Pierret: Changed to use p_typed_vector_array_ptr with
            every reference to typed_vector_array so that one needn't worry
            about failing to set it before returning.
            Changed to finish and return when get_keys returns a non-zero
            p_code.
02/28/83 by Lindsey Spratt:  Changed to use version 3 index_cursor.  Also
	  fixed to call im_validate_cursor when doing a relative position,
	  which will "automatically" re-position a cursor when the key the
	  cursor identifies has moved.
	       Changed to make the finish procedure convert
	  dm_error_$key_not_found to 0 when returning a count.
03/07/83 by Lindsey Spratt:  Fixed relative "find_key_id" to be sensitive to
	  the case where index_cursor.flags.is_at_end_of_index is true and
	  (separately) the case where index_cursor.flags.current_key_exists
	  is false.
03/16/83 by Matthew Pierret: Fixed to check interval_specification_ptr for
            "null-ness" after returning from im_build_interval_spec. 
            Changed $get to always return a non-null interval_list_ptr.
            Changed all subroutine names to be upper-case. Changed
            "do;call FINISH;return;end;" cliche to "call ERROR_RETURN;"
03/23/83 by Lindsey Spratt:  Changed to use version 2 of field_table.
05/23/83 by Matthew Pierret: Changed to use version 4 of specification_head.
            Split dm_specification.incl.pl1 into dm_specification_head,
            dm_specification and dm_range_types.incl.pl1.
            Changed to free key_count_array and interval_list in the
            finish subroutine.
            Changed to detect the situation where the caller has supplied
            an absolute numeric specification and a position_number of 0 -
            this combination is not meaningful. Changed FIND_KEY_ID to set
            p_element_id_string to index_cursor.key_id for relative numeric
            specifications, instead of moving it up or back one slot as it
            does for search specifications.
01/20/84 by Matthew Pierret:  Changed to initialize
            interval_list.and_group_id_list_ptr to null.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3.  Changed
            references to data_mgmt_util_ to data_format_util_.  Removed
            declarations un-used error codes.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get,
            cm_$get_element_portion to cm_$get_portion.
10/28/84 by Lindsey L. Spratt:  Changed ERROR_RETURN to take a code arg.
            Changed internal procs to call ERROR_RETURN, and to not have code
            args.  Changed to use version 2 index_opening_info, version 2
            interval_list, version 2 interval_specification, version 4
            index_header.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */
im_general_search$get:
   proc (p_specification_ptr, p_id_list_ptr, p_work_area_ptr, p_index_cursor_ptr, p_typed_vector_array_ptr,
        p_interval_list_ptr, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_specification_ptr    ptr;
      dcl	    p_id_list_ptr	       ptr parameter;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_index_cursor_ptr     ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_interval_list_ptr    ptr parameter;
      dcl	    p_number_of_keys_deleted
			       fixed bin (35);
      dcl	    p_key_count	       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    work_area_ptr	       ptr init (null);
      dcl	    (get, delete, count, position, is_relative_specification, is_search_specification)
			       bit (1) aligned init ("0"b);
      dcl	    number_of_keys_accepted
			       fixed bin (35) init (0);
      dcl	    number_of_structural_fields
			       fixed bin init (0);
      dcl	    (high_element_id_string, low_element_id_string)
			       bit (36) init ("0"b) aligned;
      dcl	    (new_buffer_was_allocated, no_match)
			       bit (1) aligned init ("0"b);
      dcl	    interval_idx	       fixed bin (17);


/* Based */

      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (addr, length, max, null)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    DEFAULT_AND_GROUP_ID_LIST_PTR
			       ptr init (null) internal static options (constant);
      dcl	    (
	    DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS
			       init (0),
	    DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID
			       init (0)
	    )		       fixed bin (17) internal static options (constant);

      dcl	    BEGINNING_OF_ELEMENT   init (1) fixed bin (35) internal static options (constant);

      dcl	    HEADER_COLLECTION_ID   init ("000000000001"b3) bit (36) aligned internal static options (constant);

      dcl	    myname	       init ("im_general_search") char (17) internal static options (constant);

      dcl	    (
	    FIRST_KEY	       init ("0"b),
	    LAST_KEY	       init ("1"b)
	    )		       bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    im_get_opening_info    entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    im_update_opening_info$key_count_array
			       entry (ptr, ptr, fixed bin (35));

      dcl	    im_build_interval_spec entry (ptr, ptr, ptr, fixed bin (35));

      dcl	    im_structural_search   entry (ptr, ptr, bit (1) aligned, ptr, bit (1) aligned, fixed bin (35));
      dcl	    im_validate_cursor     entry (ptr, ptr, fixed bin (35));

      dcl	    im_process_keys$get    entry (ptr, ptr, ptr, ptr, ptr, ptr, fixed bin, fixed bin, bit (36) aligned,
			       bit (36) aligned, ptr, fixed bin (35));
      dcl	    im_process_keys$delete entry (ptr, ptr, ptr, ptr, ptr, fixed bin, fixed bin, bit (36) aligned,
			       bit (36) aligned, ptr, fixed bin (35), fixed bin (35));
      dcl	    im_process_keys$position
			       entry (ptr, ptr, ptr, ptr, ptr, fixed bin, fixed bin, bit (36) aligned,
			       bit (36) aligned, fixed bin (35), fixed bin (35));
      dcl	    im_process_keys$count  entry (ptr, ptr, ptr, ptr, ptr, fixed bin, fixed bin, bit (36) aligned,
			       bit (36) aligned, fixed bin (35), fixed bin (35));

      dcl	    data_format_util_$cv_table_to_typed_array
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, fixed bin (35));
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    (
	    dm_error_$key_not_found,
	    dm_error_$bad_first_key_idx,
	    dm_error_$programming_error,
	    dm_error_$bad_last_key_idx,
	    dm_error_$bad_specification_type,
	    dm_error_$invalid_cursor_position,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

/*
get:
   entry (p_specification_ptr, p_id_list_ptr, p_work_area_ptr, p_index_cursor_ptr, p_typed_vector_array_ptr,
      p_interval_list_ptr, p_code);
*/
      work_area_ptr = p_work_area_ptr;
      get = "1"b;
      goto JOIN;

position:
   entry (p_specification_ptr, p_work_area_ptr, p_index_cursor_ptr, p_code);
      work_area_ptr = p_work_area_ptr;
      position = "1"b;
      goto JOIN;

delete:
   entry (p_specification_ptr, p_work_area_ptr, p_index_cursor_ptr, p_number_of_keys_deleted, p_code);
      work_area_ptr = p_work_area_ptr;
      p_number_of_keys_deleted = 0;
      delete = "1"b;
      goto JOIN;

count:
   entry (p_specification_ptr, p_index_cursor_ptr, p_key_count, p_code);
      work_area_ptr = get_dm_free_area_ ();
      p_key_count = 0;
      count = "1"b;

JOIN:
      numeric_specification_ptr, search_specification_ptr, specification_head_ptr, interval_list_ptr,
	 key_count_array_ptr = null;
      p_code = 0;
      index_cursor_ptr = p_index_cursor_ptr;

      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      specification_head_ptr = p_specification_ptr;
      if specification_head_ptr ^= null
      then
         do;
	  call CHECK_VERSION ((specification_head.version), (SPECIFICATION_VERSION_4), "specification");

	  if specification_head.type = RELATIVE_SEARCH_SPECIFICATION_TYPE
	  then
	     do;
	        search_specification_ptr = specification_head_ptr;
	        is_relative_specification = "1"b;
	        is_search_specification = "1"b;
	     end;
	  else if specification_head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE
	  then
	     do;
	        search_specification_ptr = specification_head_ptr;
	        is_relative_specification = "0"b;
	        is_search_specification = "1"b;
	     end;
	  else if specification_head.type = RELATIVE_NUMERIC_SPECIFICATION_TYPE
	  then
	     do;
	        numeric_specification_ptr = specification_head_ptr;
	        is_relative_specification = "1"b;
	        is_search_specification = "0"b;
	     end;
	  else if specification_head.type = ABSOLUTE_NUMERIC_SPECIFICATION_TYPE
	  then
	     do;
	        numeric_specification_ptr = specification_head_ptr;
	        if numeric_specification.position_number = 0
	        then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		        "^/The given position_number, ^d, is not supported by the given specification^/type, type ^d - absolute numeric.",
		        numeric_specification.position_number, ABSOLUTE_NUMERIC_SPECIFICATION_TYPE);
	        is_relative_specification = "0"b;
	        is_search_specification = "0"b;
	     end;
	  else call sub_err_ (dm_error_$bad_specification_type, myname, ACTION_CANT_RESTART, null, 0,
		  "^/The  specification structure does not have a recognizable type.
The recognizable types are: ^d, ^d, ^d or ^d. Received a type ^d structure.", ABSOLUTE_SEARCH_SPECIFICATION_TYPE,
		  RELATIVE_SEARCH_SPECIFICATION_TYPE, ABSOLUTE_NUMERIC_SPECIFICATION_TYPE,
		  RELATIVE_NUMERIC_SPECIFICATION_TYPE, search_specification.head.type);
         end;

      on cleanup call FINISH;

      call im_get_opening_info (index_cursor.file_opening_id, index_cursor.collection_id, index_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      call CHECK_VERSION_CHAR (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      index_header_ptr = index_opening_info.index_header_ptr;
      call CHECK_VERSION_CHAR (index_header.version, INDEX_HEADER_VERSION_4, "index_header");

      if index_header.root_id = 0			/* There are no keys. */
      then call ERROR_RETURN (dm_error_$key_not_found);

      field_table_ptr = index_opening_info.field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      if is_search_specification
      then
         do;

	  call im_build_interval_spec (work_area_ptr, search_specification_ptr, interval_specification_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  if interval_specification_ptr ^= null
	  then
	     do;
	        call CHECK_VERSION_CHAR (interval_specification.version, INTERVAL_SPECIFICATION_VERSION_2,
		   "interval_specification");

	        if search_specification.number_of_and_groups <= 0
	        then call FIND_KEY_ID (FIRST_KEY,
		        interval_specification.first_interval_bead_ptr -> interval_bead.low.id_string);
	     end;
         end;


      if interval_specification_ptr ^= null
      then if search_specification.number_of_and_groups > 0
	 then
	    do;


	       call im_structural_search (index_opening_info_ptr, index_cursor_ptr, is_relative_specification,
		  interval_specification_ptr, no_match, p_code);
	       if p_code ^= 0
	       then call ERROR_RETURN (p_code);

	       if no_match
	       then call ERROR_RETURN (dm_error_$key_not_found);

	       if get
	       then
		do;
		   intl_number_of_intervals = interval_specification.number_of_intervals;
		   alloc interval_list in (work_area);
		   interval_list.version = INTERVAL_LIST_VERSION_2;
		   interval_list.and_group_id_list_ptr = null;
		end;
	    end;

      if get
      then
         do;

	  call data_format_util_$cv_table_to_typed_array (field_table_ptr, p_id_list_ptr, work_area_ptr, 0,
	       p_typed_vector_array_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;

      if delete
      then
         do;
	  call CHECK_VERSION_CHAR (index_opening_info.key_count_array_ptr -> key_count_array.version,
	       KEY_COUNT_ARRAY_VERSION_2, "key_count_array");
	  kca_number_of_counts = index_opening_info.key_count_array_ptr -> key_count_array.number_of_counts;

	  alloc key_count_array in (work_area);

	  key_count_array = index_opening_info.key_count_array_ptr -> key_count_array;
         end;

      if interval_specification_ptr = null
      then
PROCESS_ALL_KEYS:
         do;
	  if ^is_search_specification & numeric_specification_ptr ^= null
	  then
	     do;
	        if numeric_specification.position_number >= 0
	        then
		 do;
		    call FIND_KEY_ID (FIRST_KEY, low_element_id_string);
		    high_element_id_string = "0"b;
		 end;
	        else
		 do;
		    low_element_id_string = "0"b;
		    call FIND_KEY_ID (LAST_KEY, high_element_id_string);
		 end;
	     end;
	  else
	     do;
	        high_element_id_string = "0"b;
	        call FIND_KEY_ID (FIRST_KEY, low_element_id_string);
	     end;

	  if get
	  then call im_process_keys$get (index_cursor_ptr, work_area_ptr, field_table_ptr, p_id_list_ptr,
		  p_specification_ptr, DEFAULT_AND_GROUP_ID_LIST_PTR, DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
		  DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID, low_element_id_string, high_element_id_string,
		  p_typed_vector_array_ptr, p_code);
	  else if delete
	  then call im_process_keys$delete (index_cursor_ptr, work_area_ptr, field_table_ptr, p_specification_ptr,
		  DEFAULT_AND_GROUP_ID_LIST_PTR, DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
		  DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID, low_element_id_string, high_element_id_string,
		  key_count_array_ptr, number_of_keys_accepted, p_code);
	  else if position
	  then call im_process_keys$position (index_cursor_ptr, work_area_ptr, field_table_ptr, p_specification_ptr,
		  DEFAULT_AND_GROUP_ID_LIST_PTR, DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
		  DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID, low_element_id_string, high_element_id_string,
		  number_of_keys_accepted, p_code);
	  else call im_process_keys$count (index_cursor_ptr, work_area_ptr, field_table_ptr, p_specification_ptr,
		  DEFAULT_AND_GROUP_ID_LIST_PTR, DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
		  DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID, low_element_id_string, high_element_id_string,
		  number_of_keys_accepted, p_code);

	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  if get
	  then
	     do;
	        intl_number_of_intervals = 1;
	        alloc interval_list in (work_area);
	        interval_list.version = INTERVAL_LIST_VERSION_2;
	        interval_list.interval (1).low_vector_idx = 1;
	        interval_list.interval (1).high_vector_idx =
		   p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors;
	        interval_list.interval (1).and_group_id_list_ptr = null;
	     end;

         end PROCESS_ALL_KEYS;
      else if search_specification.range.type = HIGH_RANGE_TYPE
      then
         do;
	  interval_bead_ptr = interval_specification.last_interval_bead_ptr;
	  if interval_bead.high.id_string = "0"b & USES_GREATER_OPERATOR (interval_bead.low.operator_code)
	       & interval_bead.low.id_string ^= "0"b
	  then call FIND_KEY_ID (LAST_KEY, interval_bead.high.id_string);

	  interval_bead_ptr = interval_specification.first_interval_bead_ptr;
	  do interval_idx = interval_specification.number_of_intervals to 1 by -1
	       while (search_specification.range.size > number_of_keys_accepted);
	     call GET_KEYS;

	     interval_bead_ptr = interval_bead.next;
	  end;
         end;
      else if search_specification.range.type = LOW_RANGE_TYPE
      then
         do;
	  interval_bead_ptr = interval_specification.first_interval_bead_ptr;
	  if interval_bead.low.id_string = "0"b
	  then call FIND_KEY_ID (FIRST_KEY, interval_bead.low.id_string);

	  interval_bead_ptr = interval_specification.first_interval_bead_ptr;
	  do interval_idx = 1 to interval_specification.number_of_intervals
	       while ((search_specification.range.size > number_of_keys_accepted & (get | delete | count))
	       | (position & number_of_keys_accepted = 0));
	     call GET_KEYS;

	     interval_bead_ptr = interval_bead.next;
	  end;
         end;
      else
         do;
	  interval_bead_ptr = interval_specification.first_interval_bead_ptr;
FORWARD_INTERVAL_LOOP:
	  do interval_idx = 1 to interval_specification.number_of_intervals
	       while (get | delete | (position & number_of_keys_accepted = 0) | count);
	     call GET_KEYS;

	     interval_bead_ptr = interval_bead.next;
	  end FORWARD_INTERVAL_LOOP;
         end;
      if get
      then p_interval_list_ptr = interval_list_ptr;
      else if delete
      then
         do;
	  call im_update_opening_info$key_count_array (index_opening_info_ptr, key_count_array_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  p_number_of_keys_deleted = number_of_keys_accepted;
         end;
      else if count
      then p_key_count = number_of_keys_accepted;

      call FINISH;

MAIN_RETURN:
      return;
%page;
FINISH:
   proc;
      dcl	    next_ptr	       ptr;

      if count & p_code = dm_error_$key_not_found
      then p_code = 0;

      if interval_specification_ptr ^= null
      then
         do;
	  interval_bead_ptr = interval_specification.first_interval_bead_ptr;
	  do while (interval_bead_ptr ^= null);
	     next_ptr = interval_bead.next;
	     if interval_bead.simple_typed_vector_ptr ^= null
	     then free interval_bead.simple_typed_vector_ptr -> simple_typed_vector in (work_area);
	     if interval_bead.id_list_ptr ^= null
	     then free interval_bead.id_list_ptr -> id_list in (work_area);
	     free interval_bead in (work_area);
	     interval_bead_ptr = next_ptr;
	  end;
	  free interval_specification in (work_area);
         end;

      if interval_list_ptr ^= null
      then if p_interval_list_ptr ^= interval_list_ptr
	 then free interval_list in (work_area);

      if key_count_array_ptr ^= null
      then free key_count_array in (work_area);

   end FINISH;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;				/* p_code must be set before calling FINISH. */
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);

      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
GET_CI_HEADER:
   proc (gch_p_control_interval_id, gch_p_ci_header_ptr);
      dcl	    gch_p_control_interval_id
			       fixed bin (24) unsigned;
      dcl	    gch_p_ci_header_ptr    ptr;

      dcl	    gch_code	       fixed bin (35);
      dcl	    1 gch_element_id       aligned like element_id;


      gch_element_id.control_interval_id = gch_p_control_interval_id;
      gch_element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      gch_code = 0;

      call collection_manager_$get (index_cursor.file_opening_id, index_cursor.collection_id, unspec (gch_element_id), 0,
	 gch_p_ci_header_ptr, max (BRANCH_CI_HEADER_LENGTH_IN_BITS, LEAF_CI_HEADER_LENGTH_IN_BITS), null, "0"b,
	 gch_p_ci_header_ptr, (0), gch_code);
      if gch_code ^= 0
      then call ERROR_RETURN (gch_code);

      if gch_p_ci_header_ptr -> common_ci_header.key_range.first < 0
      then call ERROR_RETURN (dm_error_$bad_first_key_idx);
      else if gch_p_ci_header_ptr -> common_ci_header.key_range.last
	 < gch_p_ci_header_ptr -> common_ci_header.key_range.first
      then call ERROR_RETURN (dm_error_$bad_last_key_idx);
      return;
   end GET_CI_HEADER;
%page;
FIND_KEY_ID:
   proc (fki_p_find_last_key, fki_p_element_id_string);
      dcl	    fki_p_find_last_key    bit (1) aligned;
      dcl	    fki_p_element_id_string
			       bit (*) aligned;

      dcl	    fki_branch_key_head_buffer
			       bit (BRANCH_KEY_HEADER_LENGTH_IN_BITS) aligned;
      dcl	    fki_code	       fixed bin (35);
      dcl	    1 fki_element_id       aligned like element_id;
      dcl	    fki_element_id_string  based (addr (fki_element_id)) bit (36) aligned;
      dcl	    fki_local_header_buffer
			       bit (max (BRANCH_CI_HEADER_LENGTH_IN_BITS, LEAF_CI_HEADER_LENGTH_IN_BITS)) aligned;

      fki_code = 0;
      branch_ci_header_ptr, common_ci_header_ptr, leaf_ci_header_ptr = addr (fki_local_header_buffer);
      if is_relative_specification & ((^fki_p_find_last_key & is_search_specification) | ^is_search_specification)
      then
GET_CURSOR_POSITION:
         do;
	  if ^index_cursor.flags.is_valid
	  then call ERROR_RETURN (dm_error_$invalid_cursor_position);
	  else
	     do;
	        call im_validate_cursor (index_opening_info_ptr, index_cursor_ptr, fki_code);
	        if fki_code ^= 0
	        then call ERROR_RETURN (fki_code);
	     end;
	  fki_element_id_string = index_cursor.key_id_string;
	  call GET_CI_HEADER ((fki_element_id.control_interval_id), common_ci_header_ptr);

	  if index_cursor.flags.is_at_end_of_index
	  then call ERROR_RETURN (dm_error_$key_not_found);
	  else if index_cursor.flags.current_key_exists
	  then if ^is_search_specification
	       then fki_element_id_string = index_cursor.key_id_string;
	       else
POSITION_TO_SLOT_AFTER_CURRENT:
		do;
		   if fki_element_id.index + 1 > common_ci_header.key_range.last
		   then
GOTO_NEXT_CONTROL_INTERVAL:
		      do;
		         fki_element_id.control_interval_id = common_ci_header.next_id;
		         if fki_element_id.control_interval_id = 0
						/* There is no next control interval. */
		         then call ERROR_RETURN (dm_error_$key_not_found);
		         call GET_CI_HEADER ((fki_element_id.control_interval_id), common_ci_header_ptr);
		         fki_element_id.index = common_ci_header.key_range.first;
		      end GOTO_NEXT_CONTROL_INTERVAL;
		   else fki_element_id.index = fki_element_id.index + 1;
		end POSITION_TO_SLOT_AFTER_CURRENT;
	  fki_p_element_id_string = fki_element_id_string;
	  return;
         end GET_CURSOR_POSITION;
      fki_element_id.control_interval_id = index_header.root_id;
      call GET_CI_HEADER ((fki_element_id.control_interval_id), common_ci_header_ptr);

      bk_string_length = 0;
      do while (^common_ci_header.is_leaf);

         if fki_p_find_last_key
         then
	  do;
	     fki_element_id.index = branch_ci_header.common.key_range.last;
	     call collection_manager_$get_portion (index_cursor.file_opening_id, index_cursor.collection_id,
		fki_element_id_string, 0, addr (fki_branch_key_head_buffer), length (fki_branch_key_head_buffer),
		null, 1, length (fki_branch_key_head_buffer), "0"b, branch_key_ptr, 0, fki_code);
	     if fki_code ^= 0
	     then call ERROR_RETURN (fki_code);

	     fki_element_id.control_interval_id = branch_key.branch_id;
	  end;
         else fki_element_id.control_interval_id = branch_ci_header.low_branch_id;
         call GET_CI_HEADER ((fki_element_id.control_interval_id), common_ci_header_ptr);
      end;

      if is_search_specification | is_relative_specification
      then if fki_p_find_last_key
	 then fki_element_id.index = leaf_ci_header.common.key_range.last;
	 else fki_element_id.index = leaf_ci_header.common.key_range.first;
      else if fki_p_find_last_key
      then fki_element_id.index = leaf_ci_header.common.key_range.last + 1;
      else fki_element_id.index = leaf_ci_header.common.key_range.first - 1;

      fki_p_element_id_string = fki_element_id_string;
      return;
%include dm_im_key;
   end FIND_KEY_ID;
%page;
GET_KEYS:
   proc;
      dcl	    gk_code	       fixed bin (35);
      dcl	    partial_structural_field_id
			       fixed bin;
      if interval_bead.low.id_string = "0"b & interval_bead.high.id_string = "0"b
      then return;
      simple_typed_vector_ptr = interval_bead.simple_typed_vector_ptr;
      if simple_typed_vector_ptr = null
      then partial_structural_field_id = DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID;
      else if interval_bead.number_of_fully_structural_fields = simple_typed_vector.number_of_dimensions
      then partial_structural_field_id = DEFAULT_PARTIAL_STRUCTURAL_FIELD_ID;
      else partial_structural_field_id = simple_typed_vector.number_of_dimensions;
      if interval_bead.low.id_string = "0"b & is_relative_specification
      then call FIND_KEY_ID (FIRST_KEY, interval_bead.low.id_string);

      if get
      then call im_process_keys$get (index_cursor_ptr, work_area_ptr, field_table_ptr, p_id_list_ptr,
	      search_specification_ptr, interval_bead.id_list_ptr, (interval_bead.number_of_fully_structural_fields),
	      partial_structural_field_id, interval_bead.low.id_string, interval_bead.high.id_string,
	      p_typed_vector_array_ptr, gk_code);
      else if delete
      then call im_process_keys$delete (index_cursor_ptr, work_area_ptr, field_table_ptr, search_specification_ptr,
	      interval_bead.id_list_ptr, (interval_bead.number_of_fully_structural_fields), partial_structural_field_id,
	      interval_bead.low.id_string, interval_bead.high.id_string, key_count_array_ptr, number_of_keys_accepted,
	      gk_code);
      else if position
      then call im_process_keys$position (index_cursor_ptr, work_area_ptr, field_table_ptr, search_specification_ptr,
	      interval_bead.id_list_ptr, (interval_bead.number_of_fully_structural_fields), partial_structural_field_id,
	      interval_bead.low.id_string, interval_bead.high.id_string, number_of_keys_accepted, gk_code);
      else call im_process_keys$count (index_cursor_ptr, work_area_ptr, field_table_ptr, search_specification_ptr,
	      interval_bead.id_list_ptr, (interval_bead.number_of_fully_structural_fields), partial_structural_field_id,
	      interval_bead.low.id_string, interval_bead.high.id_string, number_of_keys_accepted, gk_code);

      if gk_code ^= 0
      then call ERROR_RETURN (gk_code);

      if get
      then
         do;
	  if number_of_keys_accepted < p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors
	       & interval_list_ptr ^= null
	  then
	     do;
	        interval_list.interval (interval_idx).low_vector_idx = number_of_keys_accepted + 1;
	        interval_list.interval (interval_idx).high_vector_idx =
		   p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors;
	        interval_list.interval (interval_idx).and_group_id_list_ptr = interval_bead.id_list_ptr;
	        interval_bead.id_list_ptr = null;
	     end;

	  number_of_keys_accepted = p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors;
         end;
   end GET_KEYS;
%page;
%include vu_typed_vector;
%page;
%include dm_im_header;
%page;
%include dm_im_ci_header;
%page;
%include dm_im_cursor;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_operator_constants;
%page;
%include dm_range_constants;
%page;
%include dm_field_table;
%page;
%include vu_typed_vector_array;
%page;
%include dm_interval_spec;
%page;
%include dm_im_opening_info;
%page;
%include dm_id_list;
%page;
%include dm_interval_list;
%page;
%include dm_key_count_array;
%page;
%include sub_err_flags;
   end im_general_search$get;
