/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/* format: off */

/* DESCRIPTION:

         This module searches through a relation, using the
     record_manager_ and/or the index_manager_, returning an array
     of tuple ids that identify the tuples found. This program is a
     replacement for rlm_general_search$get_tuple_id. A call to
     rlm_general_search$get_id has been retained because in the future
     a requirement to implement multiple and-groups or provide the other
     rlm_general_search entrypoints may arise.

         If a search specification is supplied that doesn't have constraints,
     then the record_manager_ is used to get the tuple ids (case 3 in the
     table below). If constraints are present and they only constrain 
     non-indexed fields, then the record_manager_ is used to get the tuple ids
     (this is also case 3). If constraints are present and they only constrain
     fields that are in one index, then the index_manager_ is used to get the
     tuple ids (case 2). Otherwise the index_manager_ is used to get the tuple
     ids, and then record_manager_ is used to search these tuples to determine
     if they meet the rest of the constraints (case 1). Case 1 is implemented
     by the internal subroutine SEARCH_INDEX_AND_RECORD_COLLECTIONS. Case 2
     is implemented by the internal subroutine SEARCH_INDEX_COLLECTION. Case 3
     is implemented by the internal subroutine SEARCH_RECORD_COLLECTION.

     ______________________________________________
     |            | Index Search  |  Record Search |
     |------------|---------------|----------------|
     |    Case 1. |     Yes       |      Yes       |
     |    Case 2. |     Yes       |      No        |
     |    Case 3. |     No        |      Yes       |
     |____________|_______________|________________|
*/

/****^  HISTORY COMMENTS:
  1) change(86-08-19,Dupuis), approve(86-08-19,MCR7401), audit(86-09-30,Blair),
     install(86-10-02,MR12.0-1173):
     Written during August/September of 1986.
  2) change(87-10-27,Hergert), approve(87-11-25,MCR7799),
     audit(87-11-25,Dupuis), install(87-12-01,MR12.2-1007):
     Fixed bug where an uninitialized variable was causing the procedure
     to return to its caller a zero error code when there were no more tuples.
                                                   END HISTORY COMMENTS */
%page;
rlm_get_tuple_id: proc (

	p_relation_cursor_ptr,    /* input: to the relation cursor */
	p_specification_ptr,      /* input: to the relation search spec */
	p_callers_area_ptr,       /* input: element_id_list might go here */
	p_element_id_list_ptr,    /* input/output: to the element_id_list */
	p_code                    /* output: success or failure */
	   );

dcl p_callers_area_ptr ptr parameter;
dcl p_code fixed bin (35) parameter;
dcl p_element_id_list_ptr ptr;
dcl p_relation_cursor_ptr ptr parameter;
dcl p_specification_ptr ptr parameter;

	relation_cursor_ptr = p_relation_cursor_ptr;
	relation_search_specification_ptr = p_specification_ptr;
	callers_area_ptr = p_callers_area_ptr;
	element_id_list_ptr = p_element_id_list_ptr;
	p_code = 0;

	call INITIALIZE;

	on cleanup begin;
	     cleanup_signalled = ON;
	     call TERMINATE;
	end;

	call SETUP_SEARCH_SPECIFICATION (there_is_an_and_group_supplied,
	     primary_collection_id, secondary_collection_id,
	     current_indexes_index, search_the_index, search_the_records,
	     search_specification_is_relative, id_list_ptr);

	call SETUP_REQUIRED_CURSORS_AND_AREA (primary_cursor_ptr, secondary_cursor_ptr, temporary_area_ptr);

	if search_the_index & search_the_records
	then call SEARCH_INDEX_AND_RECORD_COLLECTIONS (number_of_tuples_found);
	else if search_the_records
	     then call SEARCH_RECORD_COLLECTION (number_of_tuples_found);
	     else call SEARCH_INDEX_COLLECTION (number_of_tuples_found);

	if number_of_tuples_found = 0
	then p_code = dm_error_$tuple_not_found;

	call TERMINATE;
	call UPDATE_RELATION_CURSOR;

RETURN:
	return;
%page;
CHECK_VERSION: proc (

	cv_p_structure_name,   /* input: name of structure */
	cv_p_received_version, /* input: version of structure */
	cv_p_expected_version  /* input: expected version of structure */
		   );

dcl cv_p_expected_version char (8) aligned;
dcl cv_p_received_version char (8) aligned;
dcl cv_p_structure_name char (*);

	if cv_p_received_version ^= cv_p_expected_version
	then call sub_err_ (error_table_$unimplemented_version, MY_NAME, ACTION_CANT_RESTART, null, 0,
	     "^/Expected version ^a of the ^a structure.^/Received version ^a instead.",
	     cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

	return;

     end CHECK_VERSION;
%page;
CHECK_VERSION_FB: proc (

	cvf_p_structure_name,   /* input: name of structure */
	cvf_p_received_version, /* input: version of structure */
	cvf_p_expected_version  /* input: expected version of structure */
		   );

dcl cvf_p_expected_version fixed bin (35);
dcl cvf_p_received_version fixed bin (35);
dcl cvf_p_structure_name char (*);

	if cvf_p_received_version ^= cvf_p_expected_version
	then call sub_err_ (error_table_$unimplemented_version, MY_NAME, ACTION_CANT_RESTART, null, 0,
	     "^/Expected version ^d of the ^a structure.^/Received version ^d instead.",
	     cvf_p_expected_version, cvf_p_structure_name, cvf_p_received_version);

	return;

     end CHECK_VERSION_FB;
%page;
ERROR_RETURN: proc (

	er_p_code	/* input: a standard Multics error code */
	         );

dcl er_p_code fixed bin (35) parameter;

	p_code = er_p_code;
	call TERMINATE;

	goto RETURN;

     end ERROR_RETURN;
%page;
INITIALIZE: proc;

dcl i_code fixed bin (35);

	call CHECK_VERSION ("relation_cursor", relation_cursor.version, RELATION_CURSOR_VERSION_2);

	if relation_search_specification_ptr = null
	then call sub_err_ (error_table_$null_info_ptr, MY_NAME, ACTION_CANT_RESTART, null, 0,
	     "^/Support for a null search specification isn't implemented.");
	call CHECK_VERSION_FB ("specification", relation_search_specification.head.version, SPECIFICATION_VERSION_4);

	if element_id_list_ptr ^= null
	then call CHECK_VERSION_FB ("element_id_list", element_id_list.version, ELEMENT_ID_LIST_VERSION_1);
	else call sub_err_ (error_table_$null_info_ptr, MY_NAME, ACTION_CANT_RESTART, null, 0,
	     "^/Only support for a pre-allocated element_id_list is implemented.");

	id_list_ptr = null;
	index_constraints_field_ids_ptr = null;
	index_element_id_list_ptr = null;
	interval_list_ptr = null;
	primary_cursor_ptr = null;
	record_constraints_field_ids_ptr = null;
	record_element_id_list_ptr = null;
	secondary_cursor_ptr = null;
	temporary_area_ptr = null;
	typed_vector_array_ptr = null;
	cleanup_signalled = OFF;
	search_specification_is_relative = OFF;

	if relation_cursor.work_area_ptr = null
	then relation_cursor.work_area_ptr = get_dm_free_area_ ();
	work_area_ptr = relation_cursor.work_area_ptr;

	call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, i_code);
	if i_code ^= 0
	then call ERROR_RETURN (i_code);

	call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

	relation_header_ptr = relation_opening_info.relation_header_ptr;
	call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

	attribute_info_ptr = relation_opening_info.attribute_info_ptr;
	call CHECK_VERSION ("attribute_info", attribute_info.version, ATTRIBUTE_INFO_VERSION_1);

	index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
	call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);

          /* MRDS *never* *ever* sets number_of_and_groups to more than 1. */
	if relation_search_specification.number_of_and_groups > 1
	then do;
	     call rlm_general_search$get_id (p_relation_cursor_ptr, p_specification_ptr,
		p_callers_area_ptr, p_element_id_list_ptr, p_code);
	     return;
	end;

	return;

     end INITIALIZE;
%page;
MOVE_TYPED_VECTOR_ARRAY_TO_ELEMENT_ID_LIST: proc (

	mtvateil_p_typed_vector_array_ptr, /* input: to a typed_vector_array  */
	mtvateil_p_area_ptr,               /* input: to an area for allocations */
	mtvateil_p_element_id_list_ptr,    /* input/output: to an element_id_list */
	mtvateil_p_number_of_tuple_ids     /* output: that the typed_vector_array contained */
				         );

/*   This subroutine moves tuple ids from a typed_vector_array to an 
     element_id_list. The element_id_list is allocated, if necessary, in the
     area provided by the caller. The typed_vector_array points to
     simple_typed_vectors, which in turn point to tuple ids. These structures
     aren't freed after the tuple ids have been moved into the
     element_id_list. Instead, the area is refreshed or thrown away later
     in this program. */

dcl mtvateil_area area (sys_info$max_seg_size) based (mtvateil_p_area_ptr);
dcl mtvateil_loop fixed bin (35);
dcl mtvateil_p_area_ptr ptr parameter;
dcl mtvateil_p_element_id_list_ptr ptr parameter;
dcl mtvateil_p_number_of_tuple_ids fixed bin (35) parameter;
dcl mtvateil_p_typed_vector_array_ptr ptr parameter;
dcl mtvateil_tuple_id bit (36) aligned based;

	if mtvateil_p_typed_vector_array_ptr = null
	then return;

	call CHECK_VERSION_FB ("typed_vector_array", 
	     mtvateil_p_typed_vector_array_ptr -> typed_vector_array.version, 
	     TYPED_VECTOR_ARRAY_VERSION_2);
	mtvateil_p_number_of_tuple_ids = mtvateil_p_typed_vector_array_ptr 
	     -> typed_vector_array.number_of_vectors;

	if mtvateil_p_element_id_list_ptr = null
	then do;
	     eil_number_of_elements = mtvateil_p_number_of_tuple_ids;
	     allocate element_id_list in (mtvateil_area) set (mtvateil_p_element_id_list_ptr);
	     mtvateil_p_element_id_list_ptr -> element_id_list.version = ELEMENT_ID_LIST_VERSION_1;
	end;
	else mtvateil_p_element_id_list_ptr -> element_id_list.number_of_elements
	     = mtvateil_p_number_of_tuple_ids;

	do mtvateil_loop = 1 to mtvateil_p_number_of_tuple_ids;
	     mtvateil_p_element_id_list_ptr -> element_id_list.id (mtvateil_loop)
		= mtvateil_p_typed_vector_array_ptr -> typed_vector_array
		.vector_slot (mtvateil_loop) -> simple_typed_vector.value_ptr (1) -> mtvateil_tuple_id;
	end;

	return;

     end MOVE_TYPED_VECTOR_ARRAY_TO_ELEMENT_ID_LIST;
%page;
SEARCH_INDEX_AND_RECORD_COLLECTIONS: proc (

	siarc_p_number_of_tuples_found   /* output: from the search */
				  );

/*   This subroutine implements case 1. The caller has requested that N tuple 
     ids be retrieved, and the index and records must be searched in order to
     satisfy the search constraints. For this example we will use 1,000 for N
     (the default value of mrds_data_$max_tids_returned_per_call). This
     subroutine first retrieves 1000 tuple ids via index_manager_. It then
     uses record_manager_ to search these 1000 tuples to determine if they
     satisfy the remaining constraints. Let's say that 50 tuples do. It will
     then change the search specification to be relative, and will go back to
     the index_manager_ to get 950 tuple ids. These 950 will be passed to
     record_manager_, etc., etc. This looping between the index_manager_ and
     record_manager_ will continue until all of the keys in the index have
     been examined, or, 1000 tuple ids that match the constraints have been
     retrieved. */

dcl siarc_another_pass_is_required bit (1) aligned;
dcl siarc_code fixed bin (35);
dcl siarc_field_id fixed bin;
dcl siarc_number_of_tuples_remaining_after_record_search fixed bin;
dcl siarc_p_number_of_tuples_found fixed bin (35) parameter;

	call MAKE_CONSTRAINT_LISTS_FOR_INDEX_AND_RECORD_COLLECTIONS;
	siarc_p_number_of_tuples_found = 0;
	siarc_another_pass_is_required = ON;
	element_id_list.number_of_elements = 0;

	do while (siarc_another_pass_is_required);
	     search_specification.range.size
		= number_of_tuples_to_retrieve - siarc_p_number_of_tuples_found;
	     call GET_TUPLE_IDS_FROM_INDEX_COLLECTION;
	     if index_element_id_list_ptr ^= null
	     then call SEARCH_THESE_RECORDS_FOR_MATCHES;
	     else siarc_number_of_tuples_remaining_after_record_search = 0;
	     siarc_p_number_of_tuples_found = siarc_p_number_of_tuples_found
		+ siarc_number_of_tuples_remaining_after_record_search;
	     search_specification.head.type = RELATIVE_SEARCH_SPECIFICATION_TYPE;
	     if siarc_another_pass_is_required
	     then if siarc_p_number_of_tuples_found >= number_of_tuples_to_retrieve
		then siarc_another_pass_is_required = OFF;
	          else do;
		     call define_area_ (area_infop, siarc_code);
		     if siarc_code ^= 0
		     then call ERROR_RETURN (siarc_code);
		end;
	     else;
	end; 

	return;
%page;
GET_TUPLE_IDS_FROM_INDEX_COLLECTION: proc;

/*  This subroutine gets tuple ids from the index_manager_. Any
    element_id_list that is left over from the previous call is freed,
    and then the constraints for this index search are moved into the
    search_specification structure. The index_manager_ is then called and
    returns a typed_vector_array that eventually points to the tuple ids that
    satisfy the constraints of the search. These tuple ids are moved to the
    element_id_list pointed to by index_element_id_list_ptr, and this 
    element_id_list will later be input to the record_manager_'s search. */

dcl gtific_code fixed bin (35);
dcl gtific_loop fixed bin;

	index_element_id_list_ptr = null;
	typed_vector_array_ptr = null;
	interval_list_ptr = null;

	do gtific_loop = 1 to number_of_index_and_record_constraints;
	     search_specification.and_group (1).constraint (gtific_loop).field_id
		= index_constraints_field_ids (gtific_loop);
	end;

	call index_manager_$get_key (search_specification_ptr, id_list_ptr,
	     temporary_area_ptr, primary_cursor_ptr, typed_vector_array_ptr,
	     interval_list_ptr, gtific_code);
	if gtific_code ^= 0 & gtific_code ^= dm_error_$key_not_found
	then call ERROR_RETURN (gtific_code);

	if gtific_code = dm_error_$key_not_found
	then siarc_another_pass_is_required = OFF;
	else if typed_vector_array.number_of_vectors < search_specification.range.size
	     then siarc_another_pass_is_required = OFF;

	call MOVE_TYPED_VECTOR_ARRAY_TO_ELEMENT_ID_LIST (typed_vector_array_ptr,
	     temporary_area_ptr, index_element_id_list_ptr, (0));

	return;

     end GET_TUPLE_IDS_FROM_INDEX_COLLECTION;
%page;
MAKE_CONSTRAINT_LISTS_FOR_INDEX_AND_RECORD_COLLECTIONS: proc;

/*   This subroutine makes a constraint list for the index_manager_ and a 
     constraint list for the record_manager_. It makes them from the
     constraints present in the relation_search_specification that is passed in
     by the caller. The constraints will identify attributes by their position
     in the relation. The record_manager_ and index_manager_ will use any
     constraints whose value is greater than zero, so an attribute that isn't
     present in the index or record collection needs to be set to zero by
     this subroutine, so that the index_manager_ or record_manager_ will
     ignore it. Also, the index_manager_ wants an index into the 
     index_attribute_map instead of the attributes position within the 
     relation, so this adjustment must also be done.

     An example best illustrates this. Suppose that attribute number 6 is
     indexed for this example. The transformation could look something like:

         ON INPUT             FOR THE INDEX           FOR THE RECORD
     constraint (1) = 5     constraint (1) = 0       constraint (1) = 5
     constraint (2) = 2     constraint (2) = 0       constraint (2) = 2
     constraint (3) = 6     constraint (3) = 1       constraint (3) = 0
     constraint (4) = 5     constraint (4) = 0       constraint (4) = 5
     constraint (5) = 3     constraint (5) = 0       constraint (5) = 3 */

dcl mclfiarc_inner_loop fixed bin;
dcl mclfiarc_loop fixed bin;

	number_of_index_and_record_constraints = relation_search_specification.and_group (1).number_of_constraints;
	allocate index_constraints_field_ids in (work_area) set (index_constraints_field_ids_ptr);
	allocate record_constraints_field_ids in (work_area) set (record_constraints_field_ids_ptr);
	index_constraints_field_ids (*) = 0;
	record_constraints_field_ids (*) = 0;
	
	do mclfiarc_loop = 1 to number_of_index_and_record_constraints;
	     siarc_field_id = relation_search_specification.and_group (1)
		.constraint (mclfiarc_loop).field_id;
	     do mclfiarc_inner_loop = 1 to index_attribute_map.index (current_indexes_index).number_of_attributes
		while (siarc_field_id ^= index_attribute_map.index (current_indexes_index)
		.attribute_id (mclfiarc_inner_loop));
	     end;
	     if mclfiarc_inner_loop > index_attribute_map.index (current_indexes_index).number_of_attributes
	     then record_constraints_field_ids (mclfiarc_loop) = siarc_field_id;
	     else index_constraints_field_ids (mclfiarc_loop) = mclfiarc_inner_loop;
	end;

	return;

     end MAKE_CONSTRAINT_LISTS_FOR_INDEX_AND_RECORD_COLLECTIONS;
%page;
SEARCH_THESE_RECORDS_FOR_MATCHES: proc;

/*   This subroutine takes an element_id_list as input that identifies the 
     tuples selected by the index search, and gets the record_manager_ to
     search these tuples applying the additional constraints. The tuples that
     satisfy these additional constraints will be returned to the caller. These
     tuples have their ids returned by record_manager_ in the element_id_list
     pointed to by record_element_id_list_ptr. These tuple ids are then moved
     into the caller's element_id_list. */

dcl strfm_code fixed bin (35);
dcl strfm_loop fixed bin;

	record_element_id_list_ptr = null;

	do strfm_loop = 1 to number_of_index_and_record_constraints;
	     search_specification.and_group (1).constraint (strfm_loop).field_id
		= record_constraints_field_ids (strfm_loop);
	end;

	call record_manager_$get_record_ids_by_interval (index_element_id_list_ptr,
	     search_specification_ptr, interval_list_ptr, temporary_area_ptr,
	     secondary_cursor_ptr, record_element_id_list_ptr, strfm_code);
	if strfm_code ^= dm_error_$record_not_found & strfm_code ^= 0
	then call ERROR_RETURN (strfm_code);

	if strfm_code = 0
	then do;
	     siarc_number_of_tuples_remaining_after_record_search
		= record_element_id_list_ptr -> element_id_list.number_of_elements;
	     do strfm_loop = 1 to siarc_number_of_tuples_remaining_after_record_search;
		element_id_list.number_of_elements = element_id_list.number_of_elements + 1;
		element_id_list.id (element_id_list.number_of_elements)
		     = record_element_id_list_ptr -> element_id_list.id (strfm_loop);
	     end;
	end;
	else siarc_number_of_tuples_remaining_after_record_search = 0;

	return;

     end SEARCH_THESE_RECORDS_FOR_MATCHES;

     end SEARCH_INDEX_AND_RECORD_COLLECTIONS;
%page;
SEARCH_INDEX_COLLECTION: proc (

	sic_p_number_of_tuples_found  /* output: from the index search */
			);

/*   This subroutine searches an index via the index_manager_ and returns the
     tuple ids of tuples that satisfied the search constraints. The constraints
     are moved from the caller-supplied relation_search_specification into the
     search_specification structure, and then the attribute ids (the position
     of the attribute within the relation) are transformed into indexes into 
     the index_attribute_map. The index_manager_ is then called, and the
     returned tuple ids are moved from the typed_vector_array to the caller's
     element_id_list. */

dcl sic_attribute_id fixed bin;
dcl sic_code fixed bin (35);
dcl sic_inner_loop fixed bin;
dcl sic_loop fixed bin;
dcl sic_p_number_of_tuples_found fixed bin (35) parameter;

	do sic_loop = 1 to relation_search_specification.and_group (1).number_of_constraints;
	     sic_attribute_id = relation_search_specification.and_group (1).constraint (sic_loop).field_id;
	     do sic_inner_loop = 1 to index_attribute_map.index (current_indexes_index).number_of_attributes
		while (index_attribute_map.index (current_indexes_index)
		.attribute_id (sic_inner_loop) ^= sic_attribute_id);
	     end;
	     if sic_inner_loop > index_attribute_map.index (current_indexes_index).number_of_attributes
	     then call sub_err_ (dm_error_$unexpected_search_case, MY_NAME, ACTION_CANT_RESTART, null, 0,
		"^/Attribute #^d wasn't found in the index_attribute_map.", sic_attribute_id);
	     search_specification.and_group (1).constraint (sic_loop).field_id = sic_inner_loop;
	end;

	call index_manager_$get_key (search_specification_ptr, id_list_ptr,
	     temporary_area_ptr, primary_cursor_ptr, typed_vector_array_ptr,
	     interval_list_ptr, sic_code);
	if sic_code = 0
	then call MOVE_TYPED_VECTOR_ARRAY_TO_ELEMENT_ID_LIST (
	     typed_vector_array_ptr, callers_area_ptr, element_id_list_ptr, sic_p_number_of_tuples_found);
	else if sic_code = dm_error_$key_not_found
	     then sic_p_number_of_tuples_found = 0;
	     else call ERROR_RETURN (sic_code);

	return;

     end SEARCH_INDEX_COLLECTION;
%page;
SEARCH_RECORD_COLLECTION: proc (

	src_p_number_of_tuples_found /* output: from the record search */
			 );

/*   This subroutine searches a relation via the record_manager_ and returns
     the tuple ids of tuples that satisified the search constraints. The tuple
     ids are moved into the caller-supplied element_id_list by the
     record_manager_. */

dcl src_code fixed bin (35);
dcl src_p_number_of_tuples_found fixed bin (35) parameter;

	call record_manager_$get_record_ids_by_spec (search_specification_ptr,
	     work_area_ptr, primary_cursor_ptr, element_id_list_ptr, src_code);

	if src_code = 0
	then src_p_number_of_tuples_found = element_id_list_ptr -> element_id_list.number_of_elements;
	else if src_code = dm_error_$record_not_found
	     then src_p_number_of_tuples_found = 0;
	     else call ERROR_RETURN (src_code);

	return;

     end SEARCH_RECORD_COLLECTION;
%page;
SETUP_REQUIRED_CURSORS_AND_AREA: proc (

	srcaa_p_primary_cursor_ptr,      /* output: for index_manager_ or record_manager_ */
	srcaa_p_secondary_cursor_ptr,    /* output: for record_manager_ or null */
	srcaa_p_area_ptr                 /* output: to an area or null */
		         );

/*   This subroutine sets up the required cursors and area. If it is case 1 
     then the primary cursor will be for the index and the secondary cursor 
     will be for the records. If it is case 2 the primary cursor will be
     for the index and the secondary cursor will be null. If it is case 3
     the primary cursor will be for the records and the secondary cursor
     will be null. If the index has to be searched then a temporary area
     will be acquired so that the typed_vector_array, simple_typed_vectors,
     etc. don't have to be freed. Instead the area will be refreshed. */

dcl srcaa_code fixed bin (35);
dcl srcaa_p_area_ptr ptr;
dcl srcaa_p_primary_cursor_ptr ptr parameter;
dcl srcaa_p_secondary_cursor_ptr ptr parameter;

	if ^search_specification_is_relative
	then do;
	     if search_the_index
	     then call index_manager_$create_cursor (relation_cursor.file_opening_id,
		primary_collection_id, relation_cursor.work_area_ptr,
		srcaa_p_primary_cursor_ptr, srcaa_code);
	     else call record_manager_$create_cursor (relation_cursor.file_opening_id,
		primary_collection_id, relation_cursor.work_area_ptr,
		srcaa_p_primary_cursor_ptr, srcaa_code);
	     if srcaa_code ^= 0
	     then call ERROR_RETURN (srcaa_code);
	end;
	else srcaa_p_primary_cursor_ptr = relation_cursor.current.cursor_ptr;

	if search_the_index & search_the_records
	then do;
	     call record_manager_$create_cursor (
		relation_cursor.file_opening_id, secondary_collection_id,
		relation_cursor.work_area_ptr, srcaa_p_secondary_cursor_ptr, srcaa_code);
	     if srcaa_code ^= 0
	     then call ERROR_RETURN (srcaa_code);
	end;
	else srcaa_p_secondary_cursor_ptr = null;

	if search_the_index
	then do;
	     call get_temp_segment_ (MY_NAME, srcaa_p_area_ptr, srcaa_code);
	     if srcaa_code ^= 0
	     then call ERROR_RETURN (srcaa_code);
	     area_infop = addr (automatic_area_info);
	     unspec (area_info) = OFF;
	     area_info.version = area_info_version_1;
	     unspec (area_info.control) = OFF;
	     area_info.control.extend = ON;
	     area_info.owner = MY_NAME;
	     area_info.size = sys_info$max_seg_size;
	     area_info.areap = srcaa_p_area_ptr;
	     call define_area_ (area_infop, srcaa_code);
	     if srcaa_code ^= 0
	     then call ERROR_RETURN (srcaa_code);
	end;
	else srcaa_p_area_ptr = null;

	relation_cursor.flags.current_state_is_consistent = OFF;

	return;

     end SETUP_REQUIRED_CURSORS_AND_AREA;
%page;
SETUP_SEARCH_SPECIFICATION: proc (

	sss_p_there_is_an_and_group,   /* output: if number_of_and_groups = 1*/
	sss_p_primary_collection_id,   /* output: for the index or record collection */
	sss_p_secondary_collection_id, /* output: for the record collection when primary is for the index collection */
	sss_p_current_indexes_index,   /* output: index of our current index, or -1 if there isn't one */
	sss_p_search_the_index,        /* output: on if we have to search the index collection */
	sss_p_search_the_records,      /* output: on if we have to search the record collection */
	sss_p_search_specification_is_relative,
                                         /* output: on if this search is a continuation of a previous search */
	sss_p_id_list_ptr              /* output: to an id_list if we have to search the index collection */
			   );

/*   This subroutine takes a relation_search_specification as input and
     creates a search_specification that will later be used by the 
     index_manager_ and/or the record_manager_. The search_specification
     is the internal version of the relation_search_specification. Additional
     comments are provided in-line in the code below. */

dcl sss_current_attribute fixed bin;
dcl sss_current_constraint fixed bin;
dcl sss_loop fixed bin;
dcl sss_p_current_indexes_index fixed bin parameter;
dcl sss_p_id_list_ptr ptr parameter;
dcl sss_p_primary_collection_id bit (36) aligned parameter;
dcl sss_p_search_specification_is_relative bit (1) aligned parameter;
dcl sss_p_search_the_index bit (1) aligned parameter;
dcl sss_p_search_the_records bit (1) aligned parameter;
dcl sss_p_secondary_collection_id bit (36) aligned parameter;
dcl sss_p_there_is_an_and_group bit (1) aligned parameter;

	if relation_search_specification.head.type = ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE
	then call SETUP_ABSOLUTE_SEARCH_SPEC;
	else if relation_search_specification.head.type = RELATIVE_RELATION_SEARCH_SPECIFICATION_TYPE
	     then call SETUP_RELATIVE_SEARCH_SPEC;
	     else call sub_err_ (dm_error_$unsup_search_spec_head_type,
		MY_NAME, ACTION_CANT_RESTART, null, 0,
		"^/The type of specification supplied (^d) is not supported.",
		relation_search_specification.head.type);

          /* size is not supposed to be used for ALL_RANGE_TYPE */

	if search_specification.range.type ^= ALL_RANGE_TYPE
	then number_of_tuples_to_retrieve = search_specification.range.size;
	else number_of_tuples_to_retrieve = MAXIMUM_REASONABLE_VALUE;
	element_id_list.number_of_elements = number_of_tuples_to_retrieve;

	sss_p_there_is_an_and_group = (search_specification.number_of_and_groups = 1);

          /* Move each constraint from relation_search_specification to search_specification. */

	if sss_p_there_is_an_and_group
	then do sss_loop = 1 to relation_search_specification.and_group (1).number_of_constraints;
	     search_specification.and_group (1).number_of_constraints = sss_loop;
	     search_specification.and_group (1).constraint (sss_loop)
		= relation_search_specification.and_group (1).constraint (sss_loop);
	end;
%page;
	/* If the search is a continuation get the primary collection id from the relation_cursor. Otherwise */
          /* set the primary collection id to the index or record collection id. */

	if sss_p_search_specification_is_relative
	then sss_p_primary_collection_id = relation_cursor.current.collection_id;
	else if sss_p_there_is_an_and_group
	     then if relation_search_specification.and_group (1).flags.collection_id_supplied
	          then sss_p_primary_collection_id = relation_search_specification.and_group (1).search_collection_id;
	          else sss_p_primary_collection_id = relation_header.record_collection_id;
	     else sss_p_primary_collection_id = relation_header.record_collection_id;

          /* If the primary collection id is for the index then look up the index into the index_attribute_map. */

	if sss_p_primary_collection_id = relation_header.record_collection_id
	then do;
	     sss_p_current_indexes_index = -1;
	     sss_p_search_the_index = OFF;
	end;
	else do;
	     do sss_p_current_indexes_index = 1 to hbound (index_attribute_map.index, 1)
		while (index_attribute_map.index (sss_p_current_indexes_index).collection_id 
		^= sss_p_primary_collection_id);
	     end;
	     if sss_p_current_indexes_index > hbound (index_attribute_map.index, 1)
	     then call ERROR_RETURN (dm_error_$index_not_in_relation);
	     sss_p_search_the_index = ON;
	end;

          /* If we aren't going to do an index search then a record search is necessary. */
          /* A record search is also necessary if all of the fields constrained aren't present in the index. */

	if ^sss_p_search_the_index
	then sss_p_search_the_records = ON;
	else if sss_p_search_specification_is_relative
	     then sss_p_search_the_records = relation_cursor.current.flags.search_index_and_record_collection;
	     else do;
		sss_p_search_the_records = OFF;
		do sss_current_constraint = 1 to search_specification.and_group (1).number_of_constraints
		     while (^sss_p_search_the_records);
		     do sss_current_attribute = 1 to 
			index_attribute_map.index (sss_p_current_indexes_index).number_of_attributes
			while (search_specification.and_group (1).constraint (sss_current_constraint).field_id
			^= index_attribute_map.index (sss_p_current_indexes_index)
			.attribute_id (sss_current_attribute));
		     end;
		     if sss_current_attribute
		     > index_attribute_map.index (sss_p_current_indexes_index).number_of_attributes
		     then sss_p_search_the_records = ON;
		end;
	     end;
%page;
          /* Set the secondary collection id to the record collection or nothing. */

	if sss_p_search_the_index & sss_p_search_the_records
	then sss_p_secondary_collection_id = relation_header.record_collection_id;
	else sss_p_secondary_collection_id = OFF;

          /*  If we're going to search the index then set the id_list to point to the tuple identifier. */

	if sss_p_search_the_index
	then do;
	     il_number_of_ids = 1;
	     allocate id_list in (work_area) set (sss_p_id_list_ptr);
	     sss_p_id_list_ptr -> id_list.version = ID_LIST_VERSION_1;
	     sss_p_id_list_ptr -> id_list.id (1) = index_attribute_map.index
		(sss_p_current_indexes_index).number_of_attributes + 1;
	end;

	return;
%page;
SETUP_ABSOLUTE_SEARCH_SPEC: proc;

/*   This subroutine is called the first time through a search. It initializes
     relation_cursor.current and allocates/initializes the search_specification
     structure used by the index_manager_ and record_manager_. */

	unspec (relation_cursor.flags) = OFF;
	unspec (relation_cursor.current) = OFF;
	relation_cursor.current.specification_ptr = null;
	relation_cursor.current.cursor_ptr = null;

	ss_maximum_number_of_constraints = relation_search_specification.maximum_number_of_constraints;
	ss_number_of_and_groups = max (0, relation_search_specification.number_of_and_groups);
	allocate search_specification in (work_area) set (search_specification_ptr);

	search_specification.head = relation_search_specification.head;
	search_specification.head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE;
	search_specification.range.type = relation_search_specification.range.type;
	search_specification.range.size = relation_search_specification.range.size;

	return;

     end SETUP_ABSOLUTE_SEARCH_SPEC;
%page;
SETUP_RELATIVE_SEARCH_SPEC: proc;

/*   This subroutine is called the second thru Nth phase of the search. It
     mostly does consistency checks. */

	sss_p_search_specification_is_relative = ON;

	if ^relation_cursor.flags.current_state_is_consistent
	| relation_cursor.current.cursor_ptr = null
	then call sub_err_ (dm_error_$bad_rel_cursor_pos, MY_NAME,
	     ACTION_CANT_RESTART, null, 0,
	     "^/The relation cursor does not completely describe a current position.");

	if relation_cursor.current.specification_ptr = null
	then call sub_err_ (dm_error_$rel_cursor_spec_mismatch, MY_NAME,
	     ACTION_CANT_RESTART, null, 0,
	     "^/Expected a search specification; received a null specification.");

	search_specification_ptr = relation_cursor.current.specification_ptr;
	search_specification.head.type = RELATIVE_SEARCH_SPECIFICATION_TYPE;
	search_specification.range.type = relation_search_specification.range.type;
	search_specification.range.size = relation_search_specification.range.size;

	if relation_search_specification.number_of_and_groups > 0
	then do;
	     if relation_search_specification.and_group (1).flags.collection_id_supplied
	     then if relation_search_specification.and_group (1)
		.search_collection_id ^= relation_cursor.current.collection_id
		then call sub_err_ (dm_error_$rel_cursor_spec_mismatch, MY_NAME, ACTION_CANT_RESTART, null, 0,
		     "^/Expected a specification for collection ^w; received one for ^w.",
		     relation_cursor.current.collection_id,
		     relation_search_specification.and_group (1).search_collection_id);
	          else;
	     else if relation_cursor.current.collection_id ^= relation_header.record_collection_id
		then call sub_err_ (dm_error_$rel_cursor_spec_mismatch, MY_NAME, ACTION_CANT_RESTART, null, 0,
		     "^/Expected a specification for collection ^w; received one^/with no collection specified.",
		     relation_cursor.current.collection_id);
	end;

	return;

     end SETUP_RELATIVE_SEARCH_SPEC;

end SETUP_SEARCH_SPECIFICATION;
%page;
TERMINATE: proc;

/*   This subroutine is called on normal termination or when cleanup has been
     signalled. It frees things, releases an area, and destroys the secondary
     cursor. */

	if secondary_cursor_ptr ^= null
	then call record_manager_$destroy_cursor (secondary_cursor_ptr, (0));

	if id_list_ptr ^= null
	then free id_list;

	if record_element_id_list_ptr ^= null
	then free record_element_id_list_ptr -> element_id_list;

	if index_constraints_field_ids_ptr ^= null
	then free index_constraints_field_ids;

	if record_constraints_field_ids_ptr ^= null
	then free record_constraints_field_ids;

	if temporary_area_ptr ^= null
	then call release_temp_segment_ (MY_NAME, temporary_area_ptr, (0));

	return;

     end TERMINATE;
%page;
UPDATE_RELATION_CURSOR: proc;

/*   This subroutine updates the relation_cursor.current fields so that on
     subsequent calls it can search relative to where it currently is. */

	if ^search_specification_is_relative
	then do;
	     relation_cursor.current.flags.search_index_and_record_collection
		= search_the_index & search_the_records;
	     relation_cursor.current.collection_id = primary_collection_id;
	     relation_cursor.current.specification_ptr = search_specification_ptr;
	     relation_cursor.current.cursor_ptr = primary_cursor_ptr;
	end;

	relation_cursor.flags.current_state_is_consistent = ON;

	return;

     end UPDATE_RELATION_CURSOR;
%page;
dcl OFF bit (1) internal static options (constant) init ("0"b);
dcl ON bit (1) internal static options (constant) init ("1"b);

dcl MAXIMUM_REASONABLE_VALUE fixed bin (35) internal static options (constant) init (225000);
dcl MY_NAME char (16) internal static options (constant) init ("rlm_get_tuple_id");

dcl addr builtin;
dcl 1 automatic_area_info like area_info automatic;

dcl callers_area_ptr ptr;
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl current_indexes_index fixed bin;

dcl define_area_ entry (ptr, fixed bin(35));
dcl dm_error_$bad_rel_cursor_pos fixed bin(35) ext static;
dcl dm_error_$index_not_in_relation fixed bin(35) ext static;
dcl dm_error_$key_not_found fixed bin(35) ext static;
dcl dm_error_$record_not_found fixed bin(35) ext static;
dcl dm_error_$rel_cursor_spec_mismatch fixed bin(35) ext static;
dcl dm_error_$tuple_not_found fixed bin(35) ext static;
dcl dm_error_$unexpected_search_case fixed bin(35) ext static;
dcl dm_error_$unsup_search_spec_head_type fixed bin(35) ext static;

dcl error_table_$null_info_ptr fixed bin(35) ext static;
dcl error_table_$unimplemented_version fixed bin(35) ext static;

dcl get_dm_free_area_ entry() returns(ptr);
dcl get_temp_segment_ entry (char(*), ptr, fixed bin(35));

dcl hbound builtin;

dcl index_constraints_field_ids (number_of_index_and_record_constraints) fixed bin based (index_constraints_field_ids_ptr);
dcl index_constraints_field_ids_ptr ptr;
dcl index_element_id_list_ptr ptr;

dcl max builtin;

dcl null builtin;
dcl number_of_index_and_record_constraints fixed bin;
dcl number_of_tuples_found fixed bin (35);
dcl number_of_tuples_to_retrieve fixed bin (35);

dcl primary_collection_id bit (36) aligned;
dcl primary_cursor_ptr ptr;

dcl record_constraints_field_ids (number_of_index_and_record_constraints) fixed bin based (record_constraints_field_ids_ptr);
dcl record_constraints_field_ids_ptr ptr;
dcl record_element_id_list_ptr ptr;
dcl release_temp_segment_ entry (char(*), ptr, fixed bin(35));
dcl rlm_general_search$get_id entry (ptr, ptr, ptr, ptr, fixed bin(35));
dcl rlm_opening_info$get entry (bit(36) aligned, ptr, fixed bin(35));

dcl search_the_index bit (1) aligned;
dcl search_the_records bit (1) aligned;
dcl search_specification_is_relative bit (1) aligned;
dcl secondary_collection_id bit (36) aligned;
dcl secondary_cursor_ptr ptr;
dcl sub_err_ entry() options(variable);
dcl sys_info$max_seg_size fixed bin(35) ext static;

dcl temporary_area_ptr ptr;
dcl there_is_an_and_group_supplied bit (1) aligned;

dcl unspec builtin;

dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include area_info;
%page;
%include dm_element_id_list;
%page;
%include dm_range_constants;
%page;
%include dm_id_list;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include dm_interval_list;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_relation_spec;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_specification;
%page;
%include dm_specification_head;
%page;
%include sub_err_flags;
%page;
%include vu_typed_vector;
%page;
%include vu_typed_vector_array;

end rlm_get_tuple_id;
