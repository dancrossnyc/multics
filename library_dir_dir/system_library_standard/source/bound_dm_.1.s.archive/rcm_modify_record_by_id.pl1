/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

          Modifies the records specified by the caller. Record fields to
     be modified are fields 1-N if a simple_typed_vector is given, or the
     fields specified by identifier if a general_typed_vector is given.
     The cursor is positioned to the last record modified.  The parameter
     p_number_of_records_processed contains the number of records that were
     were succesfully modified.
     
          This routine always gets the record collection's opening information.
     A later performance gain can be achieved by adding single_info and
     array_info entry points that take pointers to opening information.
*/

/* HISTORY:
Written by Matthew Pierret 04/23/82.
Modified:
08/20/82 by Matthew Pierret:  Made enter-able only by the entry points single 
            and array.  Added use of rm_get_opening_info, which is in reality
            simply the field_table.
10/06/82 by Matthew Pierret:  Made to use dmu_$general_modify_string.
01/04/83 by Lindsey Spratt:  Enhanced to cope with arbitrarily long records.
03/03/83 by Lindsey Spratt:  Changed to correctly interpret buffer management
	  done by dmu_$general_modify_string.
03/16/83 by Matthew Pierret: Changed to receive record_collection_opening_info
            structure from rm_get_opening_info, to translate some error codes
            returned from collection_manager_$get_element to
            dm_error_$record_not_found, to use dm_error_$wrong_cursor_type,
            to use get_dm_free_area_ () and to keep the internal static
            dm_work_area_ptr so that ony one call to get_dm_free_area need be
            per process. Changed dm_data_area to dm_work_area.
            Moved the record_cursor type check after the version check.
03/24/83 by Lindsey Spratt:  Removed the field_table include file, declared
	  field_table_ptr locally.
07/28/83 by Matthew Pierret: Changed name from rm_modify_record_by_id to
            rcm_modify_record_by_id, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin:  Renamed the parameters to coincide with all the other
            rcm_XX routines.
05/10/84 by Matthew Pierret:  Changed to align record buffers on even word
            boundaries.  Removed declarations of un-used variables.  Changed
            references to data_mgmt_util_ to be to data_format_util_.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get,
            cm_$put_element to cm_$modify.
09/27/84 by Maggie Sharpe:  Cleaned up declarations; changed the call to
            CHECK_VERSION for element_id_list to pass parameters by reference
	  instead of value.
*/

/* format: style2,ind3 */

rcm_modify_record_by_id:
   proc ();

      call
         sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0, "^/^a$^a is not a valid entrypoint",
         myname, myname);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_record_cursor_ptr    ptr;
      dcl	    p_general_typed_vector_ptr
			       ptr;
      dcl	    p_number_of_records_processed
			       fixed bin (35);
      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_record_id	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    (modify_single_record, new_buffer_was_allocated)
			       bit (1) aligned init ("0"b);
      dcl	    new_record_string_length
			       fixed bin (35);
      dcl	    new_record_string_ptr  ptr;
      dcl	    number_of_records_to_modify
			       fixed bin (35);
      dcl	    field_table_ptr	       ptr init (null);
      dcl	    automatic_new_record_buffer
			       (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
						/* Forces even-word alignment */
      dcl	    automatic_old_record_buffer
			       (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
						/* Forces even-word alignment */
      dcl	    old_record_string_length
			       fixed bin (35);
      dcl	    old_record_string_ptr  ptr;
      dcl	    record_count	       fixed bin (35);
      dcl	    record_id	       bit (36) aligned;
      dcl	    (old_record_buffer_ptr, new_record_buffer_ptr)
			       ptr init (null);
      dcl	    (
	    old_record_buffer_length
			       init (BITS_PER_PAGE),
	    new_record_buffer_length
			       init (BITS_PER_PAGE),
	    new_new_record_buffer_length
			       init (0)
	    )		       fixed bin (35);

/* Based */

      dcl	    new_record_buffer      bit (new_record_buffer_length) based (new_record_buffer_ptr);
      dcl	    old_record_buffer      bit (old_record_buffer_length) based (old_record_buffer_ptr);
      dcl	    dm_work_area	       area based (dm_work_area_ptr);

/* Builtin */

      dcl	    (addr, null)	       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    BITS_PER_PAGE	       init (1024 * 36) fixed bin internal static options (constant);
      dcl	    DOUBLE_WORDS_PER_PAGE  init (512) fixed bin internal static options (constant);
      dcl	    myname	       init ("rcm_modify_record_by_id") char (32) varying internal static
			       options (constant);

/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    data_format_util_$general_modify_string
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, fixed bin (35), ptr, ptr, fixed bin (35),
			       fixed bin (35), fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$programming_error,
	    dm_error_$record_not_found,
	    dm_error_$wrong_cursor_type
	    )		       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* Static */

      dcl	    dm_work_area_ptr       ptr internal static init (null);

/* END OF DECLARATIONS */

single:
   entry (p_record_id, p_general_typed_vector_ptr, p_record_cursor_ptr, p_code);

      modify_single_record = "1"b;
      number_of_records_to_modify = 1;

      goto JOIN;


array:
   entry (p_element_id_list_ptr, p_general_typed_vector_ptr, p_record_cursor_ptr, p_number_of_records_processed, p_code);

      modify_single_record = "0"b;
      p_number_of_records_processed = 0;

      element_id_list_ptr = p_element_id_list_ptr;

      call CHECK_VERSION (element_id_list.version, ELEMENT_ID_LIST_VERSION_1, "element_id_list");

      number_of_records_to_modify = element_id_list.number_of_elements;

      goto JOIN;

%page;
JOIN:
      p_code = 0;

      record_cursor_ptr = p_record_cursor_ptr;

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected record cursor, type ^d; received type ^d.", RECORD_CURSOR_TYPE, record_cursor.type);

      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      general_typed_vector_ptr = p_general_typed_vector_ptr;

      call CHECK_VERSION ((general_typed_vector.type), (GENERAL_TYPED_VECTOR_TYPE), "general_typed_vector");


      call
         rcm_get_opening_info (record_cursor.file_opening_id, record_cursor.collection_id,
         record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call
         CHECK_VERSION_CHAR_8 (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
         "record_collection_opening_info");

      field_table_ptr = record_collection_opening_info.field_table_ptr;

      old_record_buffer_ptr = addr (automatic_old_record_buffer);
      new_record_buffer_ptr = addr (automatic_new_record_buffer);

      if dm_work_area_ptr = null
      then dm_work_area_ptr = get_dm_free_area_ ();

      on cleanup call FINISH;

RECORD_LOOP:
      do record_count = 1 to number_of_records_to_modify;

         if modify_single_record
         then record_id = p_record_id;
         else record_id = element_id_list.id (record_count);


         call
	  collection_manager_$get (record_cursor.file_opening_id, record_cursor.collection_id, record_id, 0,
	  old_record_buffer_ptr, old_record_buffer_length, dm_work_area_ptr, new_buffer_was_allocated,
	  old_record_string_ptr, old_record_string_length, p_code);
         if p_code ^= 0
         then call GET_ELEMENT_ERROR_RETURN (p_code);

         if new_buffer_was_allocated
         then
	  do;
	     if old_record_buffer_ptr ^= addr (automatic_old_record_buffer) & old_record_buffer_ptr ^= null
	     then free old_record_buffer in (dm_work_area);
	     old_record_buffer_ptr = old_record_string_ptr;
	     old_record_buffer_length = old_record_string_length;
	  end;

         call
	  data_format_util_$general_modify_string (field_table_ptr, general_typed_vector_ptr, old_record_string_ptr,
	  old_record_string_length, new_record_buffer_ptr, new_record_buffer_length, dm_work_area_ptr,
	  new_record_string_ptr, new_record_string_length, new_new_record_buffer_length, p_code);
         if p_code ^= 0
         then call ERROR_RETURN ();

         if new_new_record_buffer_length > 0		/* Only true if a new buffer was allocated. */
         then
	  do;
	     if new_record_buffer_ptr ^= addr (automatic_new_record_buffer)
	     then free new_record_buffer in (dm_work_area);
	     new_record_buffer_ptr = new_record_string_ptr;
	     new_record_buffer_length = new_new_record_buffer_length;
	  end;
         call
	  collection_manager_$modify (record_cursor.file_opening_id, record_cursor.collection_id, new_record_string_ptr,
	  new_record_string_length, record_id, (0), p_code);
         if p_code ^= 0
         then call ERROR_RETURN ();

      end RECORD_LOOP;

      record_cursor.record_id = record_id;
      record_cursor.flags.position_is_valid = "1"b;

      call FINISH ();

MAIN_RETURN:
      return;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	    p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
FINISH:
   proc ();

      if ^modify_single_record
      then p_number_of_records_processed = record_count - 1;

      if old_record_buffer_ptr ^= addr (automatic_old_record_buffer) & old_record_buffer_ptr ^= null
      then free old_record_buffer in (dm_work_area);

      if new_record_buffer_ptr ^= addr (automatic_new_record_buffer) & new_record_buffer_ptr ^= null
      then free new_record_buffer in (dm_work_area);

   end FINISH;


ERROR_RETURN:
   proc ();

      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;


GET_ELEMENT_ERROR_RETURN:
   proc (p_code);

      dcl	    p_code	       fixed bin (35);
      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element
	    )		       fixed bin (35) ext;

      if p_code = dm_error_$no_element
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_in_collection
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_allocated
      then p_code = dm_error_$record_not_found;

      call ERROR_RETURN;

   end GET_ELEMENT_ERROR_RETURN;
%page;
%include dm_rcm_cursor;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_element_id_list;
%page;
%include vu_typed_vector;
%page;
%include sub_err_flags;
%page;
%include dm_collmgr_entry_dcls;

   end rcm_modify_record_by_id;
