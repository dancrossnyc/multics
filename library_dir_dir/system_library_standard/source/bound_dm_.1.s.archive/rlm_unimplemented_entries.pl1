/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-08-19,Dupuis), approve(86-08-19,MCR7401), audit(86-09-26,Blair),
     install(86-10-02,MR12.0-1173):
     There were a number of entries in rlm_general_search that were
     partially implemented and untested because mrds doesn't use them.
     Changed the relation_manager_ transfer vector to head into this module
     instead, and put the following entries here: get_tuples_by_spec,
     get_tuple_array_by_spec, get_tuples_and_ids, and get_tuple_array_and_ids.
                                                   END HISTORY COMMENTS */



/* format: style2,ind3 */
rlm_unimplemented_entries:
   proc ();

/* DESCRIPTION:

         This  is  a  place  for  all  not-yet implemented entries, so that a
     complete interface to relation_manager_ is possible.  Each simply returns
     with the error_code dm_error_$unimplemented_entry.
*/

/* HISTORY:

Written by Matthew Pierret, 09/24/82.
Modified:
12/03/83 by Jeffrey D. Ives: Changed some entries to return 0 p_code.
01/21/83 by Lindsey Spratt:  Added the destroy_cursor entry.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_code	       fixed bin (35);
      dcl	    p_bit36a	       bit (36) aligned;
      dcl	    p_bit2a	       bit (2) aligned;
      dcl	    p_char_star	       char (*);
      dcl	    p_fb17	       fixed bin (17);
      dcl	    p_fb35	       fixed bin (35);
      dcl	    p_ptr		       ptr;

/* Automatic */
/* Based */
/* Builtin */
/* Constant */
/* Entry */
/* External */

      dcl	    dm_error_$unimplemented_entry
			       ext fixed bin (35);

/* END OF DECLARATIONS */

destroy_relation_by_opening:
   entry (p_bit36a, p_code);

      p_code = 0;
      return;

destroy_relation_by_path:
   entry (p_char_star, p_char_star, p_code);

      p_code = 0;
      return;

create_subset_index:
   entry (p_ptr, p_bit36a, p_ptr, p_ptr, p_bit36a, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

destroy_index:
   entry (p_bit36a, p_bit36a, p_code);

      p_code = 0;
      return;

set_scope:
   entry (p_bit36a, p_bit2a, p_bit2a, p_code);

      p_code = 0;
      return;

delete_tuples_by_spec:
   entry (p_ptr, p_ptr, p_fb35, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

modify_tuples_by_spec:
   entry (p_ptr, p_ptr, p_ptr, p_fb35, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_population:
   entry (p_bit36a, p_fb35, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_count:
   entry (p_ptr, p_ptr, p_fb35, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_duplicate_key_count:
   entry (p_fb17, p_ptr, p_fb35, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_max_and_min_attributes:
   entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

destroy_cursor:
   entry (p_ptr, p_ptr, p_code);
      p_code = 0;
      return;

get_tuples_by_spec:
   entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_tuple_array_by_spec:
   entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_tuples_and_ids:
   entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

get_tuple_array_and_ids:
   entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);

      p_code = dm_error_$unimplemented_entry;
      return;

   end rlm_unimplemented_entries;
