/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/*  DESCRIPTION:
     This module puts keys into an index collection.  

          If the index is empty, a "node" is created and the key(s) is
     inserted into it.

          Otherwise, the existing index is searched for the key to be "put".
     If the key is found (and duplicates aren't allowed) then an error is
     noted and the module returns to its caller.

          If the key was not found, then an attempt is made to insert the new
     key at the location specified by the im_search_$location operation.  If
     this attempt succeeds then the task is completed and the module returns
     to its caller.

          If there isn't room in the "target" control interval for the new
     key, then sufficient keys are "rotated" into the left-sibling control
     interval to make room for the new key.  This rotation may move the
     location of the new key into the left-sibling control interval, making
     the left-sibling the target control interval.  The branching key which
     divides the two nodes being rotated between is updated  to reflect the
     new values in the rotated nodes.  If not enough room can be made in this
     fashion for the new key, then the procedure is repeated on the
     right-sibling.

          If there isn't room for the new key in either the left or right
     sibling nodes, then the original target node is "split".  Half of its
     keys are moved into a new node, which becomes its new right sibling.  The
     new key is inserted into the appropriate one of the nodes involved in the
     split, and a new branching key is added to the parent node of the
     original target node.  

          In those cases where a branching key is added or changed, the new
     value is put into the parent node using the same algorithm outlined above
     for inserting a new leaf key.  This may cause splits to take place all
     the way up to the root of the tree (index).  When the root splits, a new
     root is created to go above it, and the index has grown a level deeper.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/01/82
Modified:
06/30/82 by Lindsey Spratt: Changed to use im_basic_search instead of
	  im_search_$location (which is  now obsolete).
07/27/82 by Lindsey Spratt: Changed to use
	  index_header.number_of_duplication_fields to enforce the
	  duplication constraint for the index.
08/02/82 by Lindsey Spratt:  Changed to use the new calling sequence for
	  im_compare_vector_and_key.  There is now an argument (which is
	  ignored) which identifies the first field which is not-equal.
08/09/82 by Matthew Pierret:  Changed to use calling sequence of 
            collection_manager_$get_element which does not require specifying
            offset and length. Changed use of 0 for header collection id to
            HEADER_COLLECTION_ID, a constant declared in dm_cm_header.incl.pl1.
            Also added that include file.
08/19/82 by Lindsey Spratt:  Added the array entry point.  Created the
	  put_vector internal subroutine.
08/27/82 by Lindsey Spratt:  Changed to use the new calling sequence to
	  im_basic_search.
08/30/82 by Lindsey Spratt:  Changed to set the cursor to the last
	  successfully "put" key.  Changed the calling sequence of
	  im_initial_insert to return the element_id of the key inserted.
10/13/82 by Matthew Pierret:  Changed to initialize key_string_buffer to "0"b;
11/02/82 by Lindsey Spratt:  Changed to use new calling sequence of
	  im_initial_insert; removing cursor_ptr and index_header_ptr and
	  adding the index_opening_info_ptr.  Changed to set
	  key_count_array.count(0) to 1 when doing the initial_insert rather
	  than invoking im_update_key_counts.  Capitalized internal
	  procedure names.
11/04/82 by Lindsey Spratt:  Changed to use the insert entry of
	  im_basic_search.  This returns the maximum_duplication_field for
	  the given insertion, which interval_specification used to update
	  the key_count_array.
12/09/82 by Lindsey Spratt:  Changed to use the dm_key_count_array incl file.
12/22/82 by Lindsey Spratt:  Changed to use 
	  data_mgmt_util_$cv_vector_to_string.
02/28/83 by Lindsey Spratt:  Changed to use version 3 index_cursor, and to set
	  the cursor using im_set_cursor.
03/24/83 by Lindsey Spratt:  Changed to use version 2 of the field_table.
	  Changed im_compare* to data_mgmt_util_$compare.
09/20/83 by Lindsey L. Spratt:  Fixed to free the key_count_array.  Changed to
            use the ERROR_RETURN and FINISH protocol (eliminating code-passing
            for internal procedures).  Added the internal_debug_sw which can
            be set via the $debug_on and $debug_off entries.  This controls
            the check of the conversion from the vector to the string format.
            (Off by default.)  Changed to not initialize the key_string_buffer.
03/21/84 by Matthew Pierret:  Changed im_basic_search$insert to 
            im_basic_search_insert.
04/09/84 by Matthew Pierret:  Changed im_basic_search_insert to
            im_basic_search$insert.  Jeez, I wish these guys would make up
            their minds.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3, to use
            get_dm_free_area_ instead of get_system_free_area_, and to remove
            un-used variables.
05/10/84 by Matthew Pierret:  Changed to align key_string_buffer on an
            even-word boundary.  Changed references to data_mgmt_util_ to be
            to data_format_util_.  Removed the put_key procedure label.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 of
            index_opening_info, and version 2 of key_count_array.
12/03/84 by Matthew Pierret:  Changed to use dm_hdr_collection_id.incl.pl1
            instead of the obsolete dm_cm_header.incl.pl1.
*/

/****^  HISTORY COMMENTS:
  1) change(87-05-06,Dupuis), approve(87-05-29,MCR7695), audit(87-06-02,Blair),
     install(87-07-17,MR12.1-1042):
     Changed the buffer alignment so that key.string would be on a double-word
     boundary. The key string was being aligned on an odd-word boundary and
     this was causing bad comparisons when dealing with fields that needed to
     be aligned on double-word boundaries.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */

im_put_key:
   proc (p_typed_vector_ptr, p_cursor_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_cursor_ptr	       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 local_leaf_ci_header like leaf_ci_header;
      dcl	    maximum_duplication_field
			       fixed bin;

      dcl	    (vector_idx, count_idx)
			       fixed bin (35);
      dcl	    use_array	       bit (1) aligned init ("0"b);
      dcl	    vector_equal_to_key    bit (1) aligned;
      dcl	    vector_less_than_key   bit (1) aligned;
      dcl	    myname	       char (32) init ("im_put_key") varying;
      dcl	    key_string_buffer      (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
						/* Forces even-word alignment */
      dcl	    key_string_buffer_length /* Force key.string to double-word boundary */
			       fixed bin (35) init (BITS_PER_PAGE - BITS_PER_WORD);

      dcl	    key_string_ptr	       ptr;

      dcl	    1 key_element_id       like element_id aligned;

/* Based */

      dcl	    work_area	       based (work_area_ptr) area;

      dcl	    1 key		       based (key_string_ptr),
	      2 length	       fixed bin (35),
	      2 string	       bit (0 refer (key.length));

      dcl	    key_element_id_string  bit (36) aligned based (addr (key_element_id));

/* Builtin */

      dcl	    (null, addr, length)   builtin;

/* Controlled */
/* Constant */

      dcl	    INSERT_KEY	       init ("1"b) bit (1) aligned internal static options (constant);
      dcl	    ALL_FIELDS_ARE_PRESENT init (-1) fixed bin (17) unal internal static options (constant);
      dcl	    BITS_PER_PAGE	       init (1024 * 36) fixed bin (35) internal static options (constant);
      dcl	    BITS_PER_WORD	       init (36) fixed bin (35) internal static options (constant);
      dcl	    DOUBLE_WORDS_PER_PAGE  init (512) fixed bin (17) internal static options (constant);

/* Entry */

      dcl	    im_get_opening_info    entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    im_update_opening_info$key_count_array
			       entry (ptr, ptr, fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);
      dcl	    data_format_util_$cv_vector_to_string
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, ptr, fixed bin (35), fixed bin (35));
      dcl	    data_format_util_$compare_vector_to_string
			       entry (ptr, ptr, ptr, fixed bin (24), fixed bin unal, fixed bin, bit (1) aligned,
			       bit (1) aligned, fixed bin (35));
      dcl	    im_initial_insert      entry (ptr, bit (*), bit (36) aligned, fixed bin (35));
      dcl	    im_general_insert      entry (ptr, ptr, bit (1) aligned, bit (*), bit (36) aligned, fixed bin (35));
      dcl	    im_basic_search$insert entry (ptr, ptr, ptr, bit (36) aligned, fixed bin, ptr, fixed bin (35));
      dcl	    im_set_cursor$at_current
			       entry (ptr, bit (36) aligned, ptr, fixed bin (24), fixed bin (35));

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$key_duplication,
	    dm_error_$wrong_cursor_type,
	    dm_error_$key_not_found,
	    dm_error_$programming_error
	    )		       fixed bin (35) ext;

/* Internal Static */

      dcl	    work_area_ptr	       ptr init (null) internal static;
      dcl	    internal_debug_sw      bit (1) aligned init ("0"b) internal static;

/* END OF DECLARATIONS */

      typed_vector_array_ptr = null;
      use_array = "0"b;
      goto JOIN;

array:
   entry (p_typed_vector_array_ptr, p_cursor_ptr, p_code);
      typed_vector_array_ptr = p_typed_vector_array_ptr;
      use_array = "1"b;
      goto JOIN;

debug_on:
   entry ();
      internal_debug_sw = "1"b;
      return;

debug_off:
   entry ();
      internal_debug_sw = "0"b;
      return;

JOIN:
      if work_area_ptr = null
      then work_area_ptr = get_dm_free_area_ ();

      index_cursor_ptr = p_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected an index cursor, type ^d.  Recieved a cursor of type ^d instead.", INDEX_CURSOR_TYPE,
	      index_cursor.type);

      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      call im_get_opening_info (index_cursor.file_opening_id, index_cursor.collection_id, index_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      index_header_ptr = index_opening_info.index_header_ptr;
      call CHECK_VERSION_CHAR (index_header.version, INDEX_HEADER_VERSION_4, "index_header");

      field_table_ptr = index_opening_info.field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      call CHECK_VERSION_CHAR (index_opening_info.key_count_array_ptr -> key_count_array.version,
	 KEY_COUNT_ARRAY_VERSION_2, "key_count_array");

      kca_number_of_counts = index_opening_info.key_count_array_ptr -> key_count_array.number_of_counts;
      alloc key_count_array in (work_area);
      key_count_array = index_opening_info.key_count_array_ptr -> key_count_array;

      if use_array
      then
         do vector_idx = 1 to typed_vector_array.number_of_vectors;
	  call PUT_VECTOR ((typed_vector_array.vector_slot (vector_idx)));
	  call im_set_cursor$at_current (index_cursor_ptr, key_element_id_string, addr (key.string),
	       length (key.string), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;
      else
         do;
	  call PUT_VECTOR (p_typed_vector_ptr);
	  call im_set_cursor$at_current (index_cursor_ptr, key_element_id_string, addr (key.string),
	       length (key.string), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;

      call im_update_opening_info$key_count_array (index_opening_info_ptr, key_count_array_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      call FINISH;

MAIN_RETURN:
      return;					/* Effective end of im_put_key */
%page;
FINISH:
   proc;
      if key_count_array_ptr ^= null
      then free key_count_array;
   end FINISH;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      call FINISH;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
PUT_VECTOR:
   proc (pv_p_vector_ptr);
      dcl	    pv_p_vector_ptr	       ptr;
      dcl	    pv_code	       fixed bin (35);

      call data_format_util_$cv_vector_to_string (field_table_ptr, pv_p_vector_ptr, addrel (addr (key_string_buffer), 1),
	 key_string_buffer_length, null, key_string_ptr, (0), pv_code);
      if pv_code ^= 0
      then call ERROR_RETURN (pv_code);

      if internal_debug_sw
      then
         do;					/* Validate that the converted string is equal to the vector from which it was created. */
	  call data_format_util_$compare_vector_to_string (field_table_ptr, pv_p_vector_ptr, addr (key.string),
	       (key.length), ALL_FIELDS_ARE_PRESENT, (0), vector_equal_to_key, vector_less_than_key, pv_code);
	  if pv_code ^= 0
	  then call sub_err_ (pv_code, myname, ACTION_CANT_RESTART, null, 0,
		  "^/Unable to compare the input typed_vector and its converted bit string form.");
	  else if ^vector_equal_to_key
	  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/The input typed vector does not compare equal to its internal bit string form.");
         end;

      if index_header.root_id = 0			/* Canonical value meaning no root has been allocated. */
      then
         do;
	  call im_initial_insert (index_opening_info_ptr, key.string, key_element_id_string, pv_code);
	  if pv_code ^= 0
	  then call ERROR_RETURN (pv_code);
	  key_count_array.count (0) = 1;
         end;
      else call SEARCH_AND_INSERT;
      return;
%page;
SEARCH_AND_INSERT:
   proc;
      dcl	    sai_code	       fixed bin (35);

      call im_basic_search$insert (index_opening_info_ptr, p_cursor_ptr, pv_p_vector_ptr, key_element_id_string,
	 maximum_duplication_field, addr (local_leaf_ci_header), sai_code);
      if sai_code = 0
      then call ERROR_RETURN (dm_error_$key_duplication);
      else if sai_code ^= dm_error_$key_not_found
      then call ERROR_RETURN (sai_code);

      call im_general_insert (index_opening_info_ptr, addr (local_leaf_ci_header), INSERT_KEY, key.string,
	 key_element_id_string, sai_code);
      if sai_code ^= 0
      then call ERROR_RETURN (sai_code);

      do count_idx = 0 to maximum_duplication_field;
         key_count_array.count (count_idx) = key_count_array.count (count_idx) + 1;
      end;

   end SEARCH_AND_INSERT;
   end PUT_VECTOR;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure. Received version ^d instead.", p_expected_version,
	      p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
%include dm_im_cursor;
%page;
%include dm_im_header;
%page;
%include dm_element_id;
%page;
%include dm_im_ci_header;
%page;
%include dm_hdr_collection_id;
%page;
%include vu_typed_vector_array;
%page;
%include sub_err_flags;
%page;
%include dm_im_opening_info;
%page;
%include dm_field_table;
%page;
%include dm_key_count_array;
%page;
%include dm_collmgr_entry_dcls;
   end im_put_key;
