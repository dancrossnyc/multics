/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          This module is used primarily by im_put_key to insert a key into an
     index at a specified location in the index.  (Location is meant in terms
     of between to particular leaf or branch keys, although it is specified in
     terms of control_interval_id and slot index, a standard element_id.)

          im_general_insert first tries to do a simple insertion, then it does
     a rotate left, then a rotate right, and finally it does a split.  The
     split may recursively invoke im_general_insert on the parent of the nodes
     which result from the split.  The rotations, right and left, also use
     im_general_insert to place a new value of the parent key into the parent
     node.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/01/82.
Modified:
07/22/82 by Lindsey Spratt:  Changed to use im_rotate_insert instead of
	  im_rotate_previous_insert and im_rotate_next_insert.
11/02/82 by Lindsey Spratt:  Changed to use the index_opening_info structure.
	  Changed to use new calling sequences for im_split,
	  im_rotate_insert.  Removed the cursor_ptr and the index_header_ptr
	  from the calling sequence of this module,  adding the
	  index_opening_info_ptr.
10/28/84 by Lindsey L. Spratt:  Removed spurious reference to the
            dm_im_opening_info include file.  Changed to use ERROR_RETURN.
            Changed to use ACTION_CANT_RESTART instead of "s" in calls to
            sub_err-.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */
im_general_insert:
   proc (p_index_opening_info_ptr, p_leaf_ci_header_ptr, p_insert_new_key, p_key_string, p_key_id_string, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_leaf_ci_header_ptr   ptr;
      dcl	    p_insert_new_key       bit (1) aligned;
      dcl	    p_key_string	       bit (*);
      dcl	    p_key_id_string	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    local_header_buffer    bit (max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS)) aligned;

      dcl	    new_previous_ci	       fixed bin (24) unsigned unaligned;

      dcl	    additional_storage_required
			       fixed bin (35);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("im_general_insert") char (32) varying internal static options (constant);
      dcl	    (
	    ROTATE_PREVIOUS	       init ("1"b),
	    ROTATE_NEXT	       init ("0"b),
	    REPLACE_PARENT_KEY     init ("0"b),
	    INSERT_PARENT_KEY      init ("1"b)
	    )		       bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

      dcl	    im_simple_insert       entry (ptr, ptr, bit (1) aligned, bit (*), bit (36) aligned, fixed bin (35),
			       fixed bin (35));
      dcl	    im_rotate_insert       entry (ptr, ptr, bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (*),
			       bit (36) aligned, fixed bin (35), fixed bin (35));

      dcl	    im_split	       entry (ptr, ptr, fixed bin (24) unsigned unaligned, ptr,
			       fixed bin (24) unsigned unaligned, fixed bin (35));

/* External */

      dcl	    dm_error_$long_element fixed bin (35) ext;
      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;

/* END OF DECLARATIONS */


      call im_simple_insert (p_index_opening_info_ptr, p_leaf_ci_header_ptr, p_insert_new_key, p_key_string,
	 p_key_id_string, additional_storage_required, p_code);
      if p_code ^= 0
      then if p_code ^= dm_error_$long_element
	 then call ERROR_RETURN (p_code);
	 else if additional_storage_required <= 0
	 then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		 "^/Attempt to insert a key failed because of insufficient space, according to
the im_simple_insert module, but the addition storage required, as specified by
this module, is ^d.", additional_storage_required);
	 else
SIMPLE_INSERT_INSUFFICIENT_SPACE:
	    do;
	       call im_rotate_insert (p_index_opening_info_ptr, p_leaf_ci_header_ptr, ROTATE_PREVIOUS, p_insert_new_key,
		  REPLACE_PARENT_KEY, p_key_string, p_key_id_string, additional_storage_required, p_code);
	       if p_code ^= 0
	       then if p_code ^= dm_error_$long_element
		  then call ERROR_RETURN (p_code);
		  else if additional_storage_required <= 0
		  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
			  "^/Attempt to insert a key (after rotating keys from the target node into the
left-sibling) failed because of insufficient space, according to
the im_rotate_insert module, but the additional storage required, as specified 
by this module, is ^d.", additional_storage_required);
		  else
ROTATE_LEFT_INSUFFICIENT_SPACE:
		     do;
		        call im_rotate_insert (p_index_opening_info_ptr, p_leaf_ci_header_ptr, ROTATE_NEXT,
			   p_insert_new_key, REPLACE_PARENT_KEY, p_key_string, p_key_id_string,
			   additional_storage_required, p_code);

		        if p_code ^= 0
		        then if p_code ^= dm_error_$long_element
			   then call ERROR_RETURN (p_code);
			   else if additional_storage_required <= 0
			   then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
				   "^/Attempt to insert a key (after rotating keys from the target node into the
right-sibling) failed because of insufficient space, according to
the im_rotate_insert module, but the additional storage required, as specified  
by this module, is ^d.", additional_storage_required);
			   else
ROTATE_RIGHT_INSUFFICIENT_SPACE:
			      do;
			         call im_split (p_index_opening_info_ptr, p_leaf_ci_header_ptr,
				    addr (p_key_id_string) -> element_id.control_interval_id,
				    addr (local_header_buffer), new_previous_ci, p_code);
			         if p_code ^= 0
			         then call ERROR_RETURN (p_code);
			         call im_rotate_insert (p_index_opening_info_ptr, p_leaf_ci_header_ptr,
				    ROTATE_PREVIOUS, p_insert_new_key, INSERT_PARENT_KEY, p_key_string,
				    p_key_id_string, additional_storage_required, p_code);
			         if p_code ^= 0
			         then call ERROR_RETURN (p_code);

			      end ROTATE_RIGHT_INSUFFICIENT_SPACE;
		     end ROTATE_LEFT_INSUFFICIENT_SPACE;
	    end SIMPLE_INSERT_INSUFFICIENT_SPACE;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
%include dm_im_ci_header;
%page;
%include sub_err_flags;
%page;
%include dm_element_id;
   end im_general_insert;
