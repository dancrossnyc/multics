/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:
         This  routine destroys an index in a relation.  The relation must be
     open.
*/

/* HISTORY:
Written by Matthew Pierret, 03/28/83.
Modified:
06/21/84 by Matthew Pierret: Added prefices to variables local to
            CHECK_VERSION and CHECK_VERSION_CHAR_8. Declared hbound.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

rlm_destroy_index:
   proc (p_rel_opening_id, p_index_collection_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_rel_opening_id       bit (36) aligned parameter;
      dcl	    p_index_collection_id  bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (file_opening_id, index_collection_id)
			       bit (36) aligned;
      dcl	    index_idx	       fixed bin (17);

/* Based */
/* Builtin */

      dcl	    (hbound, null)	       builtin;

/* Constant */

      dcl	    myname	       init ("rlm_destroy_index") char (32) varying internal static options (constant);

/* Entry */

      dcl	    index_manager_$destroy_index
			       entry (bit (36) aligned, bit (36) aligned, fixed bin (35));
      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$index_attribute_map
			       entry (ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$index_not_in_relation,
	    dm_error_$wrong_cursor_type,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

      file_opening_id = p_rel_opening_id;
      index_collection_id = p_index_collection_id;
      goto JOIN;

by_cursor:
   entry (p_index_cursor_ptr, p_code);

      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected an index cursor, type ^d.  Received type ^d.", INDEX_CURSOR_TYPE, index_cursor.type);
      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      file_opening_id = index_cursor.file_opening_id;
      index_collection_id = index_cursor.collection_id;
      goto JOIN;

JOIN:
      p_code = 0;
      relation_opening_info_ptr = null;

      call rlm_opening_info$get (file_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION_CHAR_8 (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");
      index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      call CHECK_VERSION_CHAR_8 (index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2, "index_attribute_map");

      do index_idx = 1 to hbound (index_attribute_map.index, 1)
         while (index_attribute_map.index (index_idx).collection_id ^= index_collection_id);
      end;
      if index_idx > hbound (index_attribute_map.index, 1)
      then p_code = dm_error_$index_not_in_relation;
      else
         do;
	  index_attribute_map.index (index_idx).number_of_attributes = 0;
	  index_attribute_map.number_of_indices = index_attribute_map.number_of_indices - 1;

	  call rlm_update_opening_info$index_attribute_map (relation_opening_info_ptr, index_attribute_map_ptr, p_code);
	  if p_code ^= 0
	  then return;

	  call index_manager_$destroy_index (file_opening_id, index_collection_id, p_code);
	  if p_code ^= 0
	  then return;
         end;

      return;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);
      if cv_p_received_version ^= cv_p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;



CHECK_VERSION_CHAR_8:
   proc (cvc8_p_received_version, cvc8_p_expected_version, cvc8_p_structure_name);
      dcl	    cvc8_p_received_version
			       char (8) aligned;
      dcl	    cvc8_p_expected_version
			       char (8) aligned;
      dcl	    cvc8_p_structure_name  char (*);
      if cvc8_p_received_version ^= cvc8_p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^8a of the ^a structure.
Received version ^8a instead.", cvc8_p_expected_version, cvc8_p_structure_name, cvc8_p_received_version);
   end CHECK_VERSION_CHAR_8;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_im_cursor;
%page;
%include sub_err_flags;
   end rlm_destroy_index;
