/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This program updates (some subset of) the parent node_id's recorded
     in the children of a specified parent node.  There are two entrypoints,
     im_update_branches$im_update_branches and im_update_branches$single.  The
     latter entrypoint, $single, is used to update the parent node_id of
     exactly one child node.  The main entrypoint is used to update a
     contiguous interval of branches (the children pointed to by branches
     p_index through key_range.last of the specified parent node).
     
     The assumed need for updating (in the $im_update_branches entrypoint
     case) is that all of the slots in the specified parent node were shifted
     to a higher numbered slot from their old position, starting with the
     branch now at p_index slot.
*/

/* HISTORY:
Written by Lindsey Spratt, 05/06/82.
Modified:
06/16/82 by Matthew Pierret: Removed the beginning_offset argument from
            calls to collection_manager_$put_element.
08/09/82 by Matthew Pierret: Removed offset and length arguments from calls
            to collection_manager_$get_element.
09/17/82 by Lindsey Spratt:  Changed to accept p_index = 0 as a valid request
	  to start the "update" from the low_branch_id.  Accordingly changed
	  to jump the index from 0 to the key_range.first value in the
	  CHILD_NODE_LOOP.  Also, changed to call sub_err_ if invoked on a
	  leaf node.
09/22/82 by Lindsey Spratt:  Added the "single" entry, for updating just one
	  branch, the one specified in p_index.
11/08/83 by Lindsey L. Spratt:  Changed to use the "buffered" access method on
            the parent node.  Calls of the $single entry with a p_index = 0
            (update the low_branch_id branch) can have a null
            p_node_buffer_ptr, all other calls must have a valid
            p_node_buffer_ptr.
05/10/84 by Matthew Pierret:  Changed to align local_key_buffer on an
            even-word boundary.  Made to use key_index instead of
            addr(key_id_string)->element_id.index to avoid a compiler bug.
06/07/84 by Matthew Pierret:  Re-named cm_$simple_get_buffered_element
            to cm_$simple_get_from_ci_buffer, cm_$get_element to cm_$get,
            cm_$put_element to cm_$modify,
10/10/84 by Lindsey L. Spratt:  Added a DESCRIPTION and various comments.
04/19/85 by Lindsey L. Spratt:  Fixed to work in the case where the multiple
            key entrypoint is used, but there is only one branch which is the
            low_branch_id.
*/

/* format: style2,ind3 */

im_update_branches:
   proc (p_node_buffer_ptr, p_file_opening_id, p_collection_id, p_common_ci_header_ptr, p_ci, p_index, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_node_buffer_ptr      ptr parameter;
      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_common_ci_header_ptr ptr;
      dcl	    p_ci		       fixed bin (24) unsigned unaligned;
      dcl	    p_index	       fixed bin (12) unsigned unaligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    (child_header_id_string, key_id_string)
			       bit (36) aligned;
      dcl	    single_update	       bit (1) aligned init ("0"b);
      dcl	    last_index	       fixed bin (18) uns;
      dcl	    key_index	       fixed bin (12) uns;

      dcl	    local_header_buffer    bit (max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS)) aligned;
      dcl	    local_key_buffer       (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
      dcl	    key_buffer_length      fixed bin (35) init (BITS_PER_PAGE);
      dcl	    branch_key_length      fixed bin (35);
      dcl	    child_header_ptr       ptr;
      dcl	    child_header_length    fixed bin (35);

/* Based */
/* Builtin */

      dcl	    (max, null, length, addr)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    BITS_PER_PAGE	       init (36 * 1024) fixed bin (17) internal static options (constant);
      dcl	    DOUBLE_WORDS_PER_PAGE  init (512) fixed bin (17) internal static options (constant);
      dcl	    myname	       init ("im_update_branches") char (18) internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      single_update = "0"b;
      goto JOIN;

single:
   entry (p_node_buffer_ptr, p_file_opening_id, p_collection_id, p_common_ci_header_ptr, p_ci, p_index, p_code);
      single_update = "1"b;

JOIN:
      common_ci_header_ptr = p_common_ci_header_ptr;
      if common_ci_header.is_leaf
      then call sub_err_ (dm_error_$programming_error, myname, "s", null, 0,
	      "^/This program may only be invoked on branch nodes.  It was invoked on the
leaf node with id ^d.", p_ci);
      else branch_ci_header_ptr = common_ci_header_ptr;

      addr (child_header_id_string) -> element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;

      addr (key_id_string) -> element_id.control_interval_id = p_ci;
      if single_update
      then last_index = p_index;
      else last_index = common_ci_header.key_range.last;

CHILD_NODE_LOOP:
      do key_index = p_index to last_index;

         addr (key_id_string) -> element_id.index = key_index;

/* A slot_index of 0 indicates that the child node pointed at by the
low_branch_id of the parent node is to be updated.

Other values of slot_index are actual indexes into the slot table, identifying
real elements.
*/

         if addr (key_id_string) -> element_id.index = 0
         then
	  do;

	     if common_ci_header.key_range.first > 0
	     then key_index = common_ci_header.key_range.first - 1;
						/* This sets key_index so it will be key_range.first for the next loop.*/
	     else ;				/* last_index is 0, so this will be a one-pass loop because */
						/* key_index is going to be incremented to 1 at its bottom. */

	     addr (child_header_id_string) -> element_id.control_interval_id = branch_ci_header.low_branch_id;
	  end;
         else
	  do;

/* To find out what the node_id of the child node identified by the current
branch is, it's necessary to pick up the branch key.
*/

	     branch_key_ptr = addr (local_key_buffer);
	     call collection_manager_$simple_get_from_ci_buffer (p_node_buffer_ptr, p_collection_id, key_id_string,
		branch_key_ptr, key_buffer_length, branch_key_length, p_code);

	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);

	     bk_string_length = branch_key_length - BRANCH_KEY_HEADER_LENGTH_IN_BITS;

	     addr (child_header_id_string) -> element_id.control_interval_id = branch_key.branch_id;
	  end;


/* Now the child node's parent id string is actually updated.  First the
ci_header for the child node is retrieved, then the parent_node_id is changed,
and finally the updated ci_header is replaced in the child node.
*/

         call collection_manager_$get (p_file_opening_id, p_collection_id, child_header_id_string, 0,
	    addr (local_header_buffer), length (local_header_buffer), null, "0"b, child_header_ptr, child_header_length,
	    p_code);

         if p_code ^= 0
         then call ERROR_RETURN (p_code);

         child_header_ptr -> common_ci_header.parent_id_string = key_id_string;

         call collection_manager_$modify (p_file_opening_id, p_collection_id, child_header_ptr, child_header_length,
	    child_header_id_string, 0, p_code);
         if p_code ^= 0
         then call ERROR_RETURN (p_code);

      end CHILD_NODE_LOOP;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
%include dm_im_key;
%page;
%include dm_im_ci_header;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
   end im_update_branches;
