/* format: ^indcomtxt */
/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   This subroutine examines a range of records, selecting records
   according to a sequential_specification.  The records selected are
   processed according to the entrypoint used to enter the subroutine:
   get converts selected records to simple_typed_vectors; $delete deletes
   the selected records.
*/

/* HISTORY:

Written by Matthew Pierret, 08/30/84.
Extracted from rcm_process_records.pl1)
Modified:
12/20/84 by Lindsey L. Spratt:  Fixed to reference dm_vector_util_ instead of
	  vector_util_.
02/05/85 by Lindsey L. Spratt:  Changed SETUP_OUTPUT_RECORDS to take a
            work_area_ptr parm, fixed calls to SETUP_OUTPUT_RECORDS to provide
            an id_list_ptr, changed SOR to use the sor_p_work_area_ptr and
            sor_p_work_area.  Upped the VECTOR_SLOT_INCREMENT to 500 from 50.
	  Fixed SETUP_ID_LIST to set record_id_field_id to the correct value
	  when the last value in the id_list is = to
	  DEFAULT_RECORD_ID_FIELD_ID (-1).
02/12/85 by Lindsey L. Spratt:  Extended to handle area_too_small when adding
            records and ids.
02/16/85 by Lindsey L. Spratt:  Added initializations of all automatic
            variables at declaration time.  Fixed to set the
            record_buffer_length variable.
*/

/* format: style2,ind3,ll79,^indnoniterdo,indnoniterend,^indprocbody,comcol50,^indblkcom,indcomtxt */

rcm_get_by_spec:
   proc ();

   call sub_err_ (dm_error_$programming_error, MYNAME, ACTION_CANT_RESTART,
        null, 0, "^/^a$^a is not a valid entrypoint", MYNAME, MYNAME);

/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_record_cursor_ptr    ptr parameter;
   dcl	 p_work_area_ptr	    ptr parameter;
   dcl	 p_field_table_ptr	    ptr parameter;
   dcl	 p_id_list_ptr	    ptr parameter;
   dcl	 p_element_id_list_ptr  ptr parameter;
   dcl	 p_specification_ptr    ptr parameter;
   dcl	 p_typed_vector_array_ptr
			    ptr parameter;
   dcl	 p_direction_to_process fixed bin parameter;
   dcl	 p_first_record_to_process
			    bit (36) aligned parameter;
   dcl	 p_last_record_to_process
			    bit (36) aligned parameter;
   dcl	 p_spec_is_always_satisfied
			    bit (1) aligned parameter;
   dcl	 p_maximum_number_of_records
			    fixed bin (35) parameter;
   dcl	 p_number_of_records_accepted
			    fixed bin (35) parameter;
   dcl	 p_code		    fixed bin (35) parameter;

/* Automatic */

   dcl	 (get, get_id, count, position)
			    bit (1) aligned init ("0"b);
   dcl	 (get_each_record, record_satisfies_spec, spec_is_always_satisfied)
			    bit (1) aligned init ("0"b);

   dcl	 area_status	    fixed bin init (AREA_IS_BIG_ENOUGH);
   dcl	 code		    fixed bin (35);
   dcl	 current_ci_ptr	    ptr init (null ());
   dcl	 direction_to_process   fixed bin (17);
   dcl	 field_table_ptr	    ptr init (null ());
   dcl	 first_record_to_process
			    bit (36) aligned init (NO_RECORD);
   dcl	 highest_accepted_record
			    bit (36) aligned init (NO_RECORD);
   dcl	 last_record_to_process bit (36) aligned init (NO_RECORD);
   dcl	 maximum_number_of_records
			    fixed bin (35) init (-1);
   dcl	 number_of_records_accepted
			    fixed bin (35) init (-1);
   dcl	 previous_record_id	    bit (36) aligned init (NO_RECORD);
   dcl	 record_count	    fixed bin (35) init (-1);
   dcl	 record_buffer_length   fixed bin (35) init (-1);
   dcl	 record_buffer_ptr	    ptr init (null ());
   dcl	 record_id	    bit (36) aligned init (NO_RECORD);
   dcl	 record_id_field_id	    fixed bin (17)
			    init (DEFAULT_RECORD_ID_FIELD_ID);
   dcl	 record_string_length   fixed bin (35) init (-1);
   dcl	 record_string_ptr	    ptr init (null ());
   dcl	 specification_ptr	    ptr init (null ());
   dcl	 (old_eil_ptr, old_tva_ptr, vector_ptr, work_area_ptr,
	 based_bit_36_aligned_ptr)
			    ptr init (null);
   dcl	 local_record_buffer    (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
   dcl	 temp_element_id_list_ptr
			    ptr init (null ());
   dcl	 temp_typed_vector_array_ptr
			    ptr init (null ());

/* Based */

   dcl	 based_bit_36_aligned   bit (36) aligned
			    based (based_bit_36_aligned_ptr);

   dcl	 record_string	    bit (record_string_length)
			    based (record_string_ptr);
   dcl	 work_area	    area based (work_area_ptr);
   dcl	 record_buffer	    bit (record_buffer_length) aligned
			    based (record_buffer_ptr);

/* Builtin */

   dcl	 (addr, divide, hbound, min, null, unspec)
			    builtin;

/* Condition */

   dcl	 (area, cleanup)	    condition;

/* Constant */

   dcl	 MYNAME		    init ("rcm_get_by_spec") char (32)
			    varying internal static options (constant);
   dcl	 (
	 AREA_IS_BIG_ENOUGH	    init (1) fixed bin,
	 AREA_IS_TOO_SMALL	    init (2) fixed bin,
	 BACKWARD_DIRECTION	    init (-1) fixed bin,
	 DEFAULT_AND_GROUP_ID_LIST_PTR
			    init (null ()) ptr,
	 DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS
			    init (0) fixed bin,
	 DEFAULT_PARTIAL_STRUCTURAL_FIELD
			    init (0) fixed bin,
	 DEFAULT_RECORD_ID_FIELD_ID
			    init (-1) fixed bin,
	 DOUBLE_WORDS_PER_PAGE  init (512) fixed bin,
	 ELEMENT_ID_LIST_INCREMENT
			    init (100) fixed bin,
	 FALSE		    init ("0"b) bit (1) aligned,
	 FREE_OLD_TYPED_VECTOR_ARRAY
			    init ("1"b) bit (1) aligned,
	 GET_CURRENT	    init (0) fixed bin,
	 IS_RELATIVE	    init ("0"b) bit (1) aligned,
	 LIMIT_TO_STOP_INFINITE_LOOPING
			    init (1e6) fixed bin (35),
	 NO_RECORD	    init ("0"b) bit (36) aligned,
	 TRUE		    init ("1"b) bit (1) aligned,
	 VECTOR_SLOT_INCREMENT  init (500) fixed bin
	 )		    internal static options (constant);

/* Entry */

   dcl	 data_format_util_$compare_sequential
			    entry (ptr, ptr, ptr, fixed bin, fixed bin,
			    bit (*), bit (1) aligned, fixed bin (35));
   dcl	 data_format_util_$cv_table_to_typed_array
			    entry (ptr, ptr, ptr, fixed bin (35), ptr,
			    fixed bin (35));
   dcl	 data_format_util_$new_cv_string_to_vector
			    entry (ptr, ptr, ptr, fixed bin (35), ptr,
			    ptr, fixed bin (35));

   dcl	 dm_vector_util_$append_simple_typed_vector
			    entry options (variable) returns (ptr);
   dcl	 dm_vector_util_$free_typed_vector
			    entry (ptr, ptr, ptr, fixed bin (35));

   dcl	 sub_err_		    entry options (variable);

/* External */

   dcl	 (
	 error_table_$area_too_small,
	 error_table_$unimplemented_version,
	 dm_error_$long_return_element,
	 dm_error_$beginning_of_collection,
	 dm_error_$end_of_collection,
	 dm_error_$record_not_found,
	 dm_error_$programming_error
	 )		    fixed bin (35) ext;


/* END OF DECLARATIONS */

count:
   entry (p_record_cursor_ptr, p_field_table_ptr, p_specification_ptr,
        p_first_record_to_process, p_last_record_to_process,
        p_spec_is_always_satisfied, p_direction_to_process,
        p_maximum_number_of_records, p_number_of_records_accepted, p_code);

   count = TRUE;
   maximum_number_of_records = p_maximum_number_of_records;
   field_table_ptr = p_field_table_ptr;
   work_area_ptr = null;
   id_list_ptr = null;
   record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
   element_id_list_ptr = null;
   typed_vector_array_ptr = null;

   go to JOIN;


get:
   entry (p_record_cursor_ptr, p_field_table_ptr, p_specification_ptr,
        p_first_record_to_process, p_last_record_to_process,
        p_spec_is_always_satisfied, p_direction_to_process,
        p_maximum_number_of_records, p_work_area_ptr, p_id_list_ptr,
        p_typed_vector_array_ptr, p_code);

   get = TRUE;
   maximum_number_of_records = p_maximum_number_of_records;
   field_table_ptr = p_field_table_ptr;
   work_area_ptr = p_work_area_ptr;
   call SETUP_ID_LIST (p_id_list_ptr, id_list_ptr, record_id_field_id);
   element_id_list_ptr = null;
   call SETUP_OUTPUT_RECORDS (p_typed_vector_array_ptr,
        maximum_number_of_records, record_id_field_id, field_table_ptr,
        id_list_ptr, work_area_ptr, typed_vector_array_ptr);
   go to JOIN;

get_id:
   entry (p_record_cursor_ptr, p_field_table_ptr, p_specification_ptr,
        p_first_record_to_process, p_last_record_to_process,
        p_spec_is_always_satisfied, p_direction_to_process,
        p_maximum_number_of_records, p_work_area_ptr, p_element_id_list_ptr,
        p_code);

   get_id = TRUE;
   maximum_number_of_records = p_maximum_number_of_records;
   field_table_ptr = p_field_table_ptr;
   work_area_ptr = p_work_area_ptr;
   call SETUP_ID_LIST (p_id_list_ptr, id_list_ptr, record_id_field_id);
   call SETUP_OUTPUT_IDS (p_element_id_list_ptr, maximum_number_of_records,
        element_id_list_ptr);
   typed_vector_array_ptr = null ();

   go to JOIN;

get_records_and_ids:
   entry (p_record_cursor_ptr, p_field_table_ptr, p_specification_ptr,
        p_first_record_to_process, p_last_record_to_process,
        p_spec_is_always_satisfied, p_direction_to_process,
        p_maximum_number_of_records, p_work_area_ptr, p_element_id_list_ptr,
        p_typed_vector_array_ptr, p_code);

   get, get_id = TRUE;
   maximum_number_of_records = p_maximum_number_of_records;
   field_table_ptr = p_field_table_ptr;
   work_area_ptr = p_work_area_ptr;
   call SETUP_ID_LIST (p_id_list_ptr, id_list_ptr, record_id_field_id);
   call SETUP_OUTPUT_IDS (p_element_id_list_ptr, maximum_number_of_records,
        element_id_list_ptr);
   call SETUP_OUTPUT_RECORDS (p_typed_vector_array_ptr,
        maximum_number_of_records, record_id_field_id, field_table_ptr,
        id_list_ptr, work_area_ptr, typed_vector_array_ptr);

   go to JOIN;


position:
   entry (p_record_cursor_ptr, p_field_table_ptr, p_specification_ptr,
        p_first_record_to_process, p_last_record_to_process,
        p_spec_is_always_satisfied, p_direction_to_process,
        p_maximum_number_of_records, p_code);

   position = TRUE;
   maximum_number_of_records = p_maximum_number_of_records;
   field_table_ptr = p_field_table_ptr;
   work_area_ptr = null;
   id_list_ptr = null;
   record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
   element_id_list_ptr = null;
   typed_vector_array_ptr = null;

   go to JOIN;

JOIN:
   p_code, code = 0;
   record_cursor_ptr = p_record_cursor_ptr;
   call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2),
        "record_cursor");
   specification_ptr = p_specification_ptr;
   spec_is_always_satisfied = p_spec_is_always_satisfied;
   direction_to_process = p_direction_to_process;
   first_record_to_process = p_first_record_to_process;
   last_record_to_process = p_last_record_to_process;

   record_buffer_ptr = addr (local_record_buffer);
   record_buffer_length = length (unspec (local_record_buffer));

   current_ci_ptr = null;

   if get | ^spec_is_always_satisfied
   then get_each_record = TRUE;
   else get_each_record = FALSE;

   record_id = first_record_to_process;
   highest_accepted_record = NO_RECORD;
   number_of_records_accepted = 0;
   previous_record_id = NO_RECORD;

   on cleanup call FINISH ();

   if get_each_record
   then call GET_RECORD (current_ci_ptr, record_id, GET_CURRENT,
	   record_buffer_ptr, record_buffer_length, record_string_ptr,
	   record_string_length, record_id);

RECORD_LOOP:
   do record_count = 1 to LIMIT_TO_STOP_INFINITE_LOOPING
        while (record_id ^= NO_RECORD);

      if spec_is_always_satisfied
      then record_satisfies_spec = TRUE;
      else
COMPARE:
         do;
         record_satisfies_spec = FALSE;
         call data_format_util_$compare_sequential (field_table_ptr,
	    specification_ptr, DEFAULT_AND_GROUP_ID_LIST_PTR,
	    DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
	    DEFAULT_PARTIAL_STRUCTURAL_FIELD, record_string,
	    record_satisfies_spec, code);
         if code ^= 0
         then call ERROR_RETURN (code);
         end COMPARE;

      if record_satisfies_spec
      then
ACCEPT_THIS_RECORD:
         do;
         number_of_records_accepted = number_of_records_accepted + 1;
         if direction_to_process = BACKWARD_DIRECTION
         then if highest_accepted_record = NO_RECORD
	    then highest_accepted_record = record_id;
	    else ;
         else highest_accepted_record = record_id;

         if get
         then call APPEND_OUTPUT_RECORD (record_string_ptr,
	         record_string_length, typed_vector_array_ptr,
	         field_table_ptr, work_area_ptr, id_list_ptr,
	         record_id_field_id, record_id, area_status);
         if get_id & area_status = AREA_IS_BIG_ENOUGH
         then
	  do;
	  call APPEND_OUTPUT_RECORD_ID (record_id, element_id_list_ptr,
	       number_of_records_accepted, maximum_number_of_records,
	       temp_element_id_list_ptr, area_status);

	  if area_status = AREA_IS_TOO_SMALL & get
	  then
	     do;
	     call dm_vector_util_$free_typed_vector (work_area_ptr,
		typed_vector_array_ptr,
		typed_vector_array
		.vector_slot (typed_vector_array.number_of_vectors), code);
	     if code ^= 0
	     then call ERROR_RETURN (code);
	     typed_vector_array.number_of_vectors =
		typed_vector_array.number_of_vectors - 1;
	     end;
	  end;
         end ACCEPT_THIS_RECORD;

      if number_of_records_accepted >= maximum_number_of_records
	 | record_id = last_record_to_process
      then record_id = NO_RECORD;	         /* Finished */
      else if area_status = AREA_IS_TOO_SMALL
      then
         do;
         record_id = NO_RECORD;
         highest_accepted_record = previous_record_id;
         end;
      else
GET_NEXT:
         do;			         /* More records to look at */
         previous_record_id = record_id;
         if get_each_record
         then call GET_RECORD (current_ci_ptr, previous_record_id,
	         direction_to_process, record_buffer_ptr,
	         record_buffer_length, record_string_ptr,
	         record_string_length, record_id);
         else call GET_RECORD_ID (previous_record_id, direction_to_process,
	         record_id);
         end GET_NEXT;
   end RECORD_LOOP;

   if record_count > LIMIT_TO_STOP_INFINITE_LOOPING
   then call sub_err_ (dm_error_$programming_error, MYNAME,
	   ACTION_CANT_RESTART, null, 0,
	   "^/The search algorithm was apparently looping indefinitely.");

   if number_of_records_accepted <= 0 & area_status = AREA_IS_BIG_ENOUGH
   then call ERROR_RETURN (dm_error_$record_not_found);

/*** Records were found. Return 0 code and prepare return data. */

   if direction_to_process = BACKWARD_DIRECTION
   then
      do;

   /*** The records were retrieved backwards, and must be re-ordered before
        returning to the caller. Reverse the order of the vectors in the
        typed_vector_array and/or the element_ids in the element_id_list. */

      call REVERSE_RECORD_ORDER (typed_vector_array_ptr);
      call REVERSE_RECORD_ID_ORDER (element_id_list_ptr);

      end;

   if get
   then p_typed_vector_array_ptr = typed_vector_array_ptr;

   if get_id
   then
      do;
      p_element_id_list_ptr = element_id_list_ptr;
      element_id_list.number_of_elements = number_of_records_accepted;
      end;

   if count
   then p_number_of_records_accepted = number_of_records_accepted;
   else
      do;				         /* get | get_id | position */
      record_cursor.record_id = highest_accepted_record;
      record_cursor.flags.position_is_valid = TRUE;
      end;

   call RETURN (area_status);

MAIN_RETURN:
   return;


RETURN:
   proc (r_p_area_status);
   dcl	 r_p_area_status	    fixed bin parm;

   call FINISH ();

   if r_p_area_status = AREA_IS_TOO_SMALL
   then p_code = error_table_$area_too_small;
   else p_code = 0;

   goto MAIN_RETURN;

   end RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

   dcl	 cv_p_received_version  fixed bin (35);
   dcl	 cv_p_expected_version  fixed bin (35);
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, MYNAME,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^d of the ^a structure. Received version ^d.",
	   cv_p_expected_version, cv_p_structure_name, cv_p_received_version)
	   ;

   end CHECK_VERSION;
%page;
FINISH:
   proc ();

   call RESET_CI_PTR (current_ci_ptr, current_ci_ptr);
   if temp_typed_vector_array_ptr ^= null
   then free temp_typed_vector_array_ptr -> typed_vector_array;
   if temp_element_id_list_ptr ^= null
   then free temp_element_id_list_ptr -> element_id_list;
   if record_buffer_ptr ^= addr (local_record_buffer)
        & record_buffer_ptr ^= null ()
   then free record_buffer;

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);

   dcl	 er_p_code	    fixed bin (35);

   p_code = er_p_code;
   call FINISH;
   go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
GET_RECORD:
   proc (gr_p_ci_ptr, gr_p_previous_record_id, gr_p_direction,
        gr_p_record_buffer_ptr, gr_p_record_buffer_length,
        gr_p_record_string_ptr, gr_p_record_string_length, gr_p_record_id);

   dcl	 gr_p_ci_ptr	    ptr parameter;
   dcl	 gr_p_previous_record_id
			    bit (36) aligned parameter;
   dcl	 gr_p_record_id	    bit (36) aligned parameter;
   dcl	 gr_p_record_string_ptr ptr parameter;
   dcl	 gr_p_direction	    fixed bin (17) parameter;
   dcl	 gr_p_record_string_length
			    fixed bin (35) parameter;
   dcl	 gr_p_record_buffer_ptr ptr parameter;
   dcl	 gr_p_record_buffer_length
			    fixed bin (35) parameter;
   dcl	 gr_p_record_buffer	    bit (gr_p_record_buffer_length) aligned
			    based (gr_p_record_buffer_ptr);

   dcl	 gr_record_id	    bit (36) aligned;
   dcl	 gr_code		    fixed bin (35);
   dcl	 gr_new_ci_ptr	    ptr;

   gr_code = 0;
   gr_new_ci_ptr = null ();
   gr_record_id = gr_p_previous_record_id;
   call collection_manager_$get_by_ci_ptr (gr_p_ci_ptr,
        record_cursor.file_opening_id, record_cursor.collection_id,
        gr_record_id, gr_p_direction, gr_p_record_buffer_ptr,
        gr_p_record_buffer_length, work_area_ptr, ("0"b),
        gr_p_record_string_ptr, gr_p_record_string_length, gr_new_ci_ptr,
        gr_code);
   if gr_code = 0
   then gr_p_record_id = gr_record_id;
   else
      do;
      if gr_code = dm_error_$end_of_collection
	 | gr_code = dm_error_$beginning_of_collection
      then gr_p_record_id = NO_RECORD;
      else if gr_code = dm_error_$long_return_element
      then call ERROR_RETURN (gr_code);
      else call sub_err_ (gr_code, MYNAME, ACTION_CANT_RESTART, null, 0,
	      "^/This error, which occurred while retrieving record ^b3o, indicates that^/record collection ^b3o is damaged."
	      , gr_p_record_id, record_cursor.collection_id);
      end;

   if gr_p_ci_ptr ^= null & gr_p_ci_ptr ^= gr_new_ci_ptr
   then call RESET_CI_PTR (gr_new_ci_ptr, gr_p_ci_ptr);
   else /* gr_p_ci_ptr remains the same */
        ;

   if gr_p_record_string_ptr ^= gr_p_record_buffer_ptr
   then
      do;
      if gr_p_record_buffer_ptr ^= addr (local_record_buffer)
      then free gr_p_record_buffer;
      gr_p_record_buffer_ptr = gr_p_record_string_ptr;
      gr_p_record_buffer_length = gr_p_record_string_length;
      end;

   return;

   end GET_RECORD;
%page;
GET_RECORD_ID:
   proc (gri_p_previous_record_id, gri_p_direction, gri_p_record_id);

   dcl	 gri_p_previous_record_id
			    bit (36) aligned parameter;
   dcl	 gri_p_record_id	    bit (36) aligned parameter;
   dcl	 gri_p_direction	    fixed bin (17) parameter;

   dcl	 gri_code		    fixed bin (35);


   call collection_manager_$get_id (record_cursor.file_opening_id,
        record_cursor.collection_id, gri_p_previous_record_id, gri_p_direction,
        IS_RELATIVE, gri_p_record_id, gri_code);
   if gri_code ^= 0
   then if gri_code = dm_error_$beginning_of_collection
	   | gri_code = dm_error_$end_of_collection
        then gri_p_record_id = NO_RECORD;
        else call ERROR_RETURN (gri_code);

   return;

   end GET_RECORD_ID;
%page;
RESET_CI_PTR:
   proc (rcp_p_new_ci_ptr, rcp_p_ci_ptr);

/* Releases the ci_ptr held in rcp_p_ci_ptr, if non-null, then resets */
/* rcp_p_ci_ptr with the value of rcp_p_new_ci_ptr. */

   dcl	 rcp_p_ci_ptr	    ptr parameter;
   dcl	 rcp_p_new_ci_ptr	    ptr parameter;

   if rcp_p_ci_ptr ^= null
   then /* After MR11, should call collection_manager_$release_ci_ptr */
        ;

   rcp_p_ci_ptr = rcp_p_new_ci_ptr;

   return;

   end RESET_CI_PTR;
%page;
APPEND_OUTPUT_RECORD:
   proc (aor_p_record_string_ptr, aor_p_record_string_length,
        aor_p_typed_vector_array_ptr, aor_p_field_table_ptr,
        aor_p_work_area_ptr, aor_p_id_list_ptr, aor_p_record_id_field_id,
        aor_p_record_id, aor_p_area_status);

   dcl	 aor_p_record_string_ptr
			    ptr parameter;
   dcl	 aor_p_record_string_length
			    fixed bin (35) parameter;
   dcl	 aor_p_typed_vector_array_ptr
			    ptr parameter;
   dcl	 aor_p_field_table_ptr  ptr parameter;
   dcl	 aor_p_work_area_ptr    ptr parameter;
   dcl	 aor_p_id_list_ptr	    ptr parameter;
   dcl	 aor_p_record_id_field_id
			    fixed bin parameter;
   dcl	 aor_p_record_id	    bit (36) aligned parameter;
   dcl	 aor_p_area_status	    fixed bin parm;

   dcl	 aor_vector_ptr	    ptr;
   dcl	 aor_record_id_ptr	    ptr;
   dcl	 aor_code		    fixed bin (35);

   aor_code = 0;

   aor_vector_ptr =
        dm_vector_util_$append_simple_typed_vector (aor_p_work_area_ptr,
        VECTOR_SLOT_INCREMENT, FREE_OLD_TYPED_VECTOR_ARRAY,
        aor_p_typed_vector_array_ptr, aor_code);
   if aor_code ^= 0
   then if aor_code = error_table_$area_too_small
        then call AOR_RETURN (AREA_IS_TOO_SMALL);
        else call ERROR_RETURN (aor_code);

   call data_format_util_$new_cv_string_to_vector (aor_p_field_table_ptr,
        aor_p_work_area_ptr, aor_p_record_string_ptr,
        aor_p_record_string_length, aor_p_id_list_ptr, aor_vector_ptr,
        aor_code);
   if aor_code ^= 0
   then if aor_code = error_table_$area_too_small
        then
	 do;
	 aor_p_typed_vector_array_ptr
	      -> typed_vector_array.number_of_vectors =
	      aor_p_typed_vector_array_ptr
	      -> typed_vector_array.number_of_vectors - 1;
	 call dm_vector_util_$free_typed_vector (aor_p_work_area_ptr,
	      aor_p_typed_vector_array_ptr, aor_vector_ptr, aor_code);
	 if aor_code ^= 0
	 then call ERROR_RETURN (aor_code);
	 call AOR_RETURN (AREA_IS_TOO_SMALL);
	 end;
        else call ERROR_RETURN (aor_code);

   if aor_p_record_id_field_id ^= DEFAULT_RECORD_ID_FIELD_ID
   then
      do;
      alloc element_id in (aor_p_work_area_ptr -> work_area)
	 set (aor_record_id_ptr);
      aor_vector_ptr
	 -> simple_typed_vector.dimension (aor_p_record_id_field_id)
	 .value_ptr = aor_record_id_ptr;
      unspec (aor_record_id_ptr -> element_id) = aor_p_record_id;
      end;

   call AOR_RETURN (AREA_IS_BIG_ENOUGH);
AOR_MAIN_RETURN:
   return;

AOR_RETURN:
   proc (aorr_p_area_status);
   dcl	 aorr_p_area_status	    fixed bin parm;
   aor_p_area_status = aorr_p_area_status;
   goto AOR_MAIN_RETURN;
   end AOR_RETURN;

   end APPEND_OUTPUT_RECORD;
%page;
APPEND_OUTPUT_RECORD_ID:
   proc (aori_p_record_id, aori_p_eil_ptr, aori_p_number_of_records_accepted,
        aori_p_maximum_number_of_records, aori_p_temp_eil_ptr,
        aori_p_area_status);

   dcl	 aori_p_record_id	    bit (36) aligned parameter;
   dcl	 aori_p_eil_ptr	    ptr parameter;
   dcl	 aori_p_number_of_records_accepted
			    fixed bin (35) parameter;
   dcl	 aori_p_maximum_number_of_records
			    fixed bin (35) parameter;
   dcl	 aori_p_temp_eil_ptr    ptr parameter;
   dcl	 aori_p_area_status	    fixed bin parm;

   dcl	 aori_eil_ptr	    ptr init (null);
   dcl	 aori_slot_idx	    fixed bin (35);

   if aori_p_eil_ptr -> element_id_list.number_of_elements
        < aori_p_number_of_records_accepted
   then
      do;
      eil_number_of_elements =
	 min (aori_p_eil_ptr -> element_id_list.number_of_elements
	 + ELEMENT_ID_LIST_INCREMENT, aori_p_maximum_number_of_records);
      aori_p_temp_eil_ptr = element_id_list_ptr;

      on area call AORI_RETURN (AREA_IS_TOO_SMALL);
      alloc element_id_list in (work_area) set (aori_eil_ptr);
      aori_p_eil_ptr = aori_eil_ptr;

      aori_p_eil_ptr -> element_id_list.version = ELEMENT_ID_LIST_VERSION_1;

      do aori_slot_idx = 1
	 to hbound (aori_p_temp_eil_ptr -> element_id_list.id, 1);
         aori_p_eil_ptr -> element_id_list.id (aori_slot_idx) =
	    aori_p_temp_eil_ptr -> element_id_list.id (aori_slot_idx);
      end;

      free aori_p_temp_eil_ptr -> element_id_list;
      aori_p_temp_eil_ptr = null ();
      end;
   aori_p_eil_ptr -> element_id_list.id (aori_p_number_of_records_accepted) =
        aori_p_record_id;

   call AORI_RETURN (AREA_IS_BIG_ENOUGH);

AORI_MAIN_RETURN:
   return;

AORI_RETURN:
   proc (aorir_p_area_status);
   dcl	 aorir_p_area_status    fixed bin parm;
   aori_p_area_status = aorir_p_area_status;

   goto AORI_MAIN_RETURN;
   end AORI_RETURN;

   end APPEND_OUTPUT_RECORD_ID;
%page;
REVERSE_RECORD_ORDER:
   proc (rro_p_tva_ptr);

   dcl	 rro_p_tva_ptr	    ptr;

   dcl	 rro_slot_idx	    fixed bin;
   dcl	 rro_vector_ptr	    ptr;

   if rro_p_tva_ptr = null
   then return;

   do rro_slot_idx = 1
        to
        divide (rro_p_tva_ptr -> typed_vector_array.number_of_vectors, 2, 35,
        0);
      rro_vector_ptr =
	 rro_p_tva_ptr -> typed_vector_array.vector_slot (rro_slot_idx);
      rro_p_tva_ptr -> typed_vector_array.vector_slot (rro_slot_idx) =
	 rro_p_tva_ptr
	 -> typed_vector_array
	 .
	 vector_slot (rro_p_tva_ptr -> typed_vector_array.number_of_vectors
	 - rro_slot_idx + 1);
      rro_p_tva_ptr
	 -> typed_vector_array
	 .
	 vector_slot (rro_p_tva_ptr -> typed_vector_array.number_of_vectors
	 - rro_slot_idx + 1) = rro_vector_ptr;
   end;

   return;

   end REVERSE_RECORD_ORDER;
%page;
REVERSE_RECORD_ID_ORDER:
   proc (rrio_p_eil_ptr);

   dcl	 rrio_p_eil_ptr	    ptr;
   dcl	 rrio_slot_idx	    fixed bin;
   dcl	 rrio_id		    bit (36) aligned;

   if rrio_p_eil_ptr = null
   then return;

   do rrio_slot_idx = 1
        to divide (typed_vector_array.number_of_vectors, 2, 35, 0);
      rrio_id = rrio_p_eil_ptr -> element_id_list.id (rrio_slot_idx);
      rrio_p_eil_ptr -> element_id_list.id (rrio_slot_idx) =
	 rrio_p_eil_ptr
	 -> element_id_list
	 .
	 id (rrio_p_eil_ptr -> element_id_list.number_of_elements
	 - rrio_slot_idx + 1);
      rrio_p_eil_ptr
	 -> element_id_list
	 .
	 id (rrio_p_eil_ptr -> element_id_list.number_of_elements
	 - rrio_slot_idx + 1) = rrio_id;
   end;

   return;

   end REVERSE_RECORD_ID_ORDER;
%page;
SETUP_ID_LIST:
   proc (sil_p_input_id_list_ptr, sil_p_output_id_list_ptr,
        sil_p_record_id_field_id);

   dcl	 sil_p_input_id_list_ptr
			    ptr parameter;
   dcl	 sil_p_output_id_list_ptr
			    ptr parameter;
   dcl	 sil_p_record_id_field_id
			    fixed bin;

   sil_p_output_id_list_ptr = sil_p_input_id_list_ptr;
   if sil_p_output_id_list_ptr = null ()
   then
      do;
      sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
      end;
   else
      do;
      call CHECK_VERSION (sil_p_output_id_list_ptr -> id_list.version,
	 (ID_LIST_VERSION_1), "id_list");
      if sil_p_output_id_list_ptr -> id_list.number_of_ids = 0
      then
         do;
         sil_p_output_id_list_ptr = null ();
         sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
         end;
      else
         do;
         if sil_p_output_id_list_ptr
	    -> id_list.id (sil_p_output_id_list_ptr -> id_list.number_of_ids)
	    = DEFAULT_RECORD_ID_FIELD_ID
         then sil_p_record_id_field_id =
	         sil_p_output_id_list_ptr -> id_list.number_of_ids;
         else sil_p_record_id_field_id = DEFAULT_RECORD_ID_FIELD_ID;
         end;
      end;

   return;

   end SETUP_ID_LIST;
%page;
SETUP_OUTPUT_IDS:
   proc (soi_p_input_eil_ptr, soi_p_maximum_number_of_ids,
        soi_p_output_eil_ptr);

   dcl	 soi_p_input_eil_ptr    ptr parameter;
   dcl	 soi_p_maximum_number_of_ids
			    fixed bin (35) parameter;
   dcl	 soi_p_output_eil_ptr   ptr parameter;

   if soi_p_input_eil_ptr = null ()
   then
      do;
      eil_number_of_elements =
	 min (soi_p_maximum_number_of_ids, ELEMENT_ID_LIST_INCREMENT);
      alloc element_id_list in (work_area) set (soi_p_output_eil_ptr);
      soi_p_output_eil_ptr -> element_id_list.version =
	 ELEMENT_ID_LIST_VERSION_1;
      end;
   else
      do;
      soi_p_output_eil_ptr = soi_p_input_eil_ptr;
      call CHECK_VERSION (soi_p_output_eil_ptr -> element_id_list.version,
	 ELEMENT_ID_LIST_VERSION_1, "element_id");
      end;

   return;

   end SETUP_OUTPUT_IDS;
%page;
SETUP_OUTPUT_RECORDS:
   proc (sor_p_input_tva_ptr, sor_p_maximum_number_of_records,
        sor_p_record_id_field_id, sor_p_field_table_ptr, sor_p_id_list_ptr,
        sor_p_work_area_ptr, sor_p_output_tva_ptr);

   dcl	 sor_p_input_tva_ptr    ptr parameter parameter;
   dcl	 sor_p_maximum_number_of_records
			    fixed bin (35) parameter;
   dcl	 sor_p_record_id_field_id
			    fixed bin parameter;
   dcl	 sor_p_field_table_ptr  ptr parameter;
   dcl	 sor_p_id_list_ptr	    ptr parameter;
   dcl	 sor_p_work_area_ptr    ptr parameter;
   dcl	 sor_p_output_tva_ptr   ptr parameter;

   dcl	 sor_p_work_area	    area based (sor_p_work_area_ptr);

   dcl	 sor_record_id_descriptor_ptr
			    ptr;
   dcl	 sor_code		    fixed bin (35);

   if sor_p_input_tva_ptr = null ()
   then
      do;
      sor_code = 0;
      call data_format_util_$cv_table_to_typed_array (sor_p_field_table_ptr,
	 sor_p_id_list_ptr, sor_p_work_area_ptr, (VECTOR_SLOT_INCREMENT),
	 sor_p_output_tva_ptr, sor_code);
      if sor_code ^= 0
      then call ERROR_RETURN (sor_code);
      call CHECK_VERSION (sor_p_output_tva_ptr -> typed_vector_array.version,
	 TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");
      if sor_p_record_id_field_id ^= DEFAULT_RECORD_ID_FIELD_ID
      then
         do;
         alloc arg_descriptor in (sor_p_work_area)
	    set (sor_record_id_descriptor_ptr);
         sor_record_id_descriptor_ptr -> arg_descriptor.flag = TRUE;
         sor_record_id_descriptor_ptr -> arg_descriptor.type = bit_dtype;
         sor_record_id_descriptor_ptr -> arg_descriptor.packed = FALSE;
         sor_record_id_descriptor_ptr -> arg_descriptor.number_dims = 0;
         sor_record_id_descriptor_ptr -> arg_descriptor.size = 36;
         sor_p_output_tva_ptr
	    -> typed_vector_array.dimension_table (sor_p_record_id_field_id)
	    .name = "0";
         sor_p_output_tva_ptr
	    -> typed_vector_array.dimension_table (sor_p_record_id_field_id)
	    .descriptor_ptr = sor_record_id_descriptor_ptr;
         end;
      end;
   else
      do;
      sor_p_output_tva_ptr = sor_p_input_tva_ptr;
      call CHECK_VERSION (sor_p_output_tva_ptr -> typed_vector_array.version,
	 TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");
      end;

   return;

   end SETUP_OUTPUT_RECORDS;
%page;
%include dm_rcm_cursor;
%page;
%include vu_typed_vector_array;
%page;
%include vu_typed_vector;
%page;
%include dm_element_id;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_element_id_list;
%page;
%include sub_err_flags;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
%page;
%include dm_id_list;
   end rcm_get_by_spec;
