/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rcm_free_opening_info:
   proc (p_file_opening_id, p_record_collection_id, p_code);

/* DESCRIPTION:
         This  routine  frees  the  opening  information held for this record
     collection.
*/

/* HISTORY:
Written by Matthew Pierret, 04/04/83.
Modified:
07/28/83 by Matthew Pierret: Changed name from rm_free_opening_info to
            rcm_free_opening_info, and all rm_ prefixes to rcm_.
05/04/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;	/*is the opening identifier of a
                                           file*/
      dcl	    p_record_collection_id bit (36) aligned;	/*is the identifier of a record
                                           collection*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system error code*/

/* Automatic */

      dcl	    opening_table_ptr      ptr;

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("rcm_free_opening_info") char (32) varying internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    rcm_get_opening_info$opening_table_ptr
			       entry () returns (ptr);
      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$free_opening
			       entry (ptr, bit (72) aligned, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$programming_error,
	    dm_error_$no_opening,
	    sys_info$max_seg_size
	    )		       fixed bin (35) ext;

/* Static */

      dcl	    dm_area_ptr	       ptr internal static init (null);

/* END OF DECLARATIONS */

      p_code = 0;

      opening_table_ptr = rcm_get_opening_info$opening_table_ptr ();
      if opening_table_ptr = null
      then return;					/* Nothing to free */

      call
         opening_manager_$get_opening (opening_table_ptr, (p_file_opening_id || p_record_collection_id),
         record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then
         do;
	  if p_code = dm_error_$no_opening
	  then p_code = 0;
	  return;
         end;

      if record_collection_opening_info.version ^= RECORD_COLLECTION_OPENING_INFO_VERSION_1
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^8a of the record_collection_opening_info structure.^/Received version ^8a.",
	    RECORD_COLLECTION_OPENING_INFO_VERSION_1, record_collection_opening_info.version);

      field_table_ptr = record_collection_opening_info.field_table_ptr;
      if field_table.version ^= FIELD_TABLE_VERSION_3
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the record_collection_opening_info structure.^/Received version ^d.",
	    FIELD_TABLE_VERSION_3, field_table.version);

      call opening_manager_$free_opening (opening_table_ptr, (p_file_opening_id || p_record_collection_id), p_code);
      if p_code ^= 0
      then return;

      if dm_area_ptr = null
      then dm_area_ptr = get_dm_free_area_ ();

      free record_collection_opening_info in (dm_area);
      free field_table in (dm_area);

      return;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_field_table;
%page;
%include sub_err_flags;
   end rcm_free_opening_info;
