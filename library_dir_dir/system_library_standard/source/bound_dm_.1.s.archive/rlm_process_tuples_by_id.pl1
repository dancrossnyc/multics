/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          Deletes or modifies a tuple or set of tuples identified by a
     tuple_id or by an array of identifiers (element_id_list).  For each tuple
     to be deleted, the keys associated with the tuple are first deleted and
     then the tuple itself is deleted from the record collection.  In order to
     delete the keys, each tuple must be retrieved so that a
     search_specification can be constructed which will match the key field
     values.  For each tuple to be modified, the keys associated with the
     tuple which have a field which may change in value are first deleted then
     re-inserted.  The cursor supplied must be a relation_cursor.
     
          Four entries exist:
     
     rlm_process_tuples_by_id$delete - takes a single
     tuple_id and deletes the tuple (record and associated keys);
     
     rlm_proess_tuples_by_id$delete_array - takes an array of tuple_ids
     (element_id_list) and deletes each tuple identified;
     
     rlm_process_tuples_by_id$modify - modifies selected atribute values of a
     single tuple identified by p_tuple_id;
     
     rlm_process_tuples_by_id$modify_array - modifies selected attribute
     values of an array of tuples identified by an element_id_list
     (p_element_id_list_ptr).
*/

/* HISTORY:
Written by Matthew Pierret 09/28/82.
Modified:
10/18/82 by Matthew Pierret:  Initialized ss.subset_specification_ptr to null.
12/08/82 by Lindsey Spratt:  Fixed to put the new versions of keys when
	  modifying, and to use the old values when doing deletions.
12/09/82 by Lindsey Spratt:  Fixed to reference key_stv_ptr only when
	  modifying. Fixed to use the ALL_RANGE_TYPE search spec.
	  Changed the freeing logic in FINISH to use the current length when
	  determining the amount of storage used by a varying string value,
	  rather than the maximum length.  Changed the
	  DELETE_KEYS_AND_RECORD_FOR_EACH_TUPLE_LOOP to free the
	  simple_typed_vector for the record each time through the loop.
12/21/82 by Matthew Pierret:  Changed to convert dm_error_$record_not_found to
            dm_error_$no_tuple_id.
01/18/83 by Matthew Pierret:  Changed to use relation_info version 2.
03/10/83 by Matthew Pierret:  Changed to use get_dm_free_area_ instead of 
            dm_data_$area_ptr. Changed to use relation_opening_info.
            Changed to not assume that all index_attribute_map entries
            contain an index.  Changed to allocate search_specification
            with one more constraint than the maximum number of attributes
            (to account for the tuple id).
05/23/83 by Matthew Pierret: Changed to use relation_cursors. Moved cursor_ptr
            parameter to be the first parameter in each calling sequence.
            Changed the "do;call FINISH;return;end;" cliche to 
            "call ERROR_RETURN (code);". Changed dm_error_$no_tuple_id to
            dm_error_$tuple_not_found_id. Removed CHECK_TYPE.
            Changed to use version 4 of specification_head.
            Added dm_specification_head.incl.pl1, dm_range_constants.incl.pl1.
06/27/83 by Lindsey L. Spratt:  Changed to use version 2 of the
            relation_cursor.
08/26/83 by Lindsey L. Spratt:  Fixed to only modify an index key when there
	  is a real modification.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
11/06/84 by Stanford S. Cox:  MAIN: Chg to ref simple_typed_vector by explicit ptr
	  when alloc, Chg all sub_err_ calls for new syntax.  IKS: Chg to
   	  set p_search_specification_ptr when alloc instead of global ptr,
   	  Add unique var prefixes. FSTV: Add unique var prefixes.
11/29/84 by Stanford S. Cox:  DELETE_KEYS*: Added by moving code from MAIN.
12/11/84 by Lindsey Spratt:  Changed to call data_format_util_ instead of 
	  data_mgmt_util_.
03/19/85 by Matthew C. Pierret:  Added the ability to rollback a partially
            modified tuple if the modification causes a key_duplication error.
            Replaced the DELETE_KEYS_AND_RECORD_FOR_ONE_TUPLE with the
            routines DELETE_TUPLE, MODIFY_TUPLE, and ROLLBACK_TUPLE, and added
            the utility routines BUILD_RECORD, BUILD_KEY, and BUILD_SPEC.
            Moved the ERROR_RETURN and FINISH routines to just after the main
            return statement, as in most other modules.
            Re-named INIT_KEY_SPECIFICATION to INIT_SPEC and fully 
            parameterized its calling sequence.  Removed the check in FINISH
            for number_of_tuples_processed > 0, as if it is 0, setting the
            parameter to that value is correct.
04/10/85 by Matthew C. Pierret:  Added BUILD_RECORD_TEMPLATE, which takes the
            record returned by record_manager_$get_record_by_id, and replaces
            the varying fields with varying fields allocated at the maximum
            length.  This is so that the record can be used as input on
            subsequent calls to record_manager_$get_record_by_id.
04/12/85 by Matthew C. Pierret:  Changed BUILD_RECORD_TEMPLATE to allocate
            values as aligned.
*/

/* format: style2,ind3 */

rlm_process_tuples_by_id:
   proc ();

      return;					/* Not a real entry */


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_tuple_id	       bit (36) aligned;
      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_relation_cursor_ptr  ptr;
      dcl	    p_number_of_tuples_processed
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    an_index_field_is_modified
			       bit (1) aligned init ("0"b);
      dcl	    delete	       bit (1) aligned;
      dcl	    process_single_tuple   bit (1) aligned init ("0"b);
      dcl	    (key_ptr, key_spec_ptr, new_record_ptr, old_record_ptr, dm_area_ptr, record_cursor_ptr)
			       ptr init (null);
      dcl	    code		       fixed bin (35) init (0);
      dcl	    index_idx	       fixed bin init (0);
      dcl	    number_of_tuples_processed
			       fixed bin (35) init (0);
      dcl	    number_of_tuples_to_process
			       fixed bin (35) init (0);
      dcl	    tuple_idx	       fixed bin (17);
      dcl	    tuple_id	       bit (36) aligned;

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Builtin */

      dcl	    (addr, hbound, null)   builtin;

/* Constant */

      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    BITS_PER_WORD	       fixed bin init (36) int static options (constant);
      dcl	    myname	       init ("rlm_process_tuple_by_id") char (32) varying static options (constant);
      dcl	    (
	    TRUE		       init ("1"b),
	    FALSE		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);

/* Condition */

      dcl	    cleanup	       condition;

/* Entry */

      dcl	    data_format_util_$get_data_bit_length
			       entry (bit (36) aligned, fixed bin (35), fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    index_manager_$create_cursor
			       entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
      dcl	    index_manager_$delete_key
			       entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));
      dcl	    index_manager_$put_key entry (ptr, ptr, fixed bin (35));

      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$key_duplication,
	    dm_error_$key_not_found,
	    dm_error_$record_not_found,
	    dm_error_$tuple_not_found_id
	    )		       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* END OF DECLARATIONS */

delete:
   entry (p_relation_cursor_ptr, p_tuple_id, p_code);

      delete = "1"b;
      process_single_tuple = "1"b;
      number_of_tuples_to_process = 1;
      goto JOIN;


delete_array:
   entry (p_relation_cursor_ptr, p_element_id_list_ptr, p_number_of_tuples_processed, p_code);

      delete = "1"b;
      process_single_tuple = "0"b;

      element_id_list_ptr = p_element_id_list_ptr;
      call CHECK_VERSION_FB ("element_id_list", (element_id_list.version), (ELEMENT_ID_LIST_VERSION_1));

      number_of_tuples_to_process = element_id_list.number_of_elements;
      goto JOIN;


modify:
   entry (p_relation_cursor_ptr, p_tuple_id, p_typed_vector_ptr, p_code);

      delete = "0"b;
      process_single_tuple = "1"b;
      number_of_tuples_to_process = 1;
      goto MODIFY_JOIN;

modify_array:
   entry (p_relation_cursor_ptr, p_element_id_list_ptr, p_typed_vector_ptr, p_number_of_tuples_processed, p_code);

      delete = "0"b;
      process_single_tuple = "0"b;

      element_id_list_ptr = p_element_id_list_ptr;
      call CHECK_VERSION_FB ("element_id_list", (element_id_list.version), (ELEMENT_ID_LIST_VERSION_1));

      number_of_tuples_to_process = element_id_list.number_of_elements;

MODIFY_JOIN:
      general_typed_vector_ptr = p_typed_vector_ptr;
      if general_typed_vector.type ^= GENERAL_TYPED_VECTOR_TYPE
      then call sub_err_ (0, myname, ACTION_CANT_RESTART, null, 0,
	      "The wrong type of typed_vector was supplied.^/Expected type ^d.  Received ^d.",
	      GENERAL_TYPED_VECTOR_TYPE, general_typed_vector.type);

%page;
JOIN:
      simple_typed_vector_ptr, key_ptr, old_record_ptr, new_record_ptr, key_spec_ptr = null ();

      p_code, code = 0;

      relation_cursor_ptr = p_relation_cursor_ptr;

      call CHECK_VERSION ("relation_cursor", (relation_cursor.version), (RELATION_CURSOR_VERSION_2));

      dm_area_ptr = get_dm_free_area_ ();
      on cleanup call FINISH;

GET_OPENING_INFO_STRUCTURES:
      do;

         call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
         if code ^= 0
         then call ERROR_RETURN (code);
         call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);
         relation_header_ptr = relation_opening_info.relation_header_ptr;
         call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);
         attribute_info_ptr = relation_opening_info.attribute_info_ptr;
         call CHECK_VERSION ("attribute_info", attribute_info.version, ATTRIBUTE_INFO_VERSION_1);
         index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
         call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);
         index_cursor_array_ptr = relation_opening_info.per_process.index_cursor_array_ptr;
         call CHECK_VERSION ("index_cursor_array", index_cursor_array.version, INDEX_CURSOR_ARRAY_VERSION_1);

      end GET_OPENING_INFO_STRUCTURES;

GET_CURSORS:
      do;

         record_cursor_ptr = SET_RECORD_COLLECTION_CURSOR_PTR (relation_cursor_ptr, relation_header.record_collection_id);

         do index_idx = 1 to hbound (index_attribute_map.index, 1);
	  call SET_CURSOR_PTR_FOR_THIS_INDEX (index_idx);
         end;

      end GET_CURSORS;

      call INIT_SPEC (key_spec_ptr, index_attribute_map_ptr, dm_area_ptr);

      if delete
      then
DELETE:
         do;
	  if process_single_tuple
	  then
	     do;
	        tuple_id = p_tuple_id;
	        call DELETE_TUPLE (tuple_id, old_record_ptr, key_spec_ptr, index_attribute_map_ptr,
		   index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
	     end;
	  else
	     do;
	        tuple_id = element_id_list.id (1);
	        call DELETE_TUPLE (tuple_id, old_record_ptr, key_spec_ptr, index_attribute_map_ptr,
		   index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
	        number_of_tuples_processed = 1;
	        call BUILD_RECORD_TEMPLATE (old_record_ptr, dm_area_ptr, attribute_info_ptr);
	        do tuple_idx = 2 to number_of_tuples_to_process;
		 tuple_id = element_id_list.id (tuple_idx);
		 call DELETE_TUPLE (tuple_id, old_record_ptr, key_spec_ptr, index_attribute_map_ptr,
		      index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
		 number_of_tuples_processed = number_of_tuples_processed + 1;
	        end;
	     end;
         end DELETE;
      else
MODIFY:
         do;
	  stv_number_of_dimensions = index_attribute_map.maximum_number_of_attributes_per_index + 1;
	  alloc simple_typed_vector in (dm_area) set (key_ptr);
	  key_ptr -> simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;

	  if process_single_tuple
	  then
	     do;
	        tuple_id = p_tuple_id;
	        call MODIFY_TUPLE (tuple_id, old_record_ptr, new_record_ptr, key_ptr, general_typed_vector_ptr,
		   key_spec_ptr, index_attribute_map_ptr, index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
	     end;
	  else
	     do;
	        tuple_id = element_id_list.id (1);
	        call MODIFY_TUPLE (tuple_id, old_record_ptr, new_record_ptr, key_ptr, general_typed_vector_ptr,
		   key_spec_ptr, index_attribute_map_ptr, index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
	        number_of_tuples_processed = 1;
	        call BUILD_RECORD_TEMPLATE (old_record_ptr, dm_area_ptr, attribute_info_ptr);
	        do tuple_idx = 2 to number_of_tuples_to_process;
		 tuple_id = element_id_list.id (tuple_idx);
		 call MODIFY_TUPLE (tuple_id, old_record_ptr, new_record_ptr, key_ptr, general_typed_vector_ptr,
		      key_spec_ptr, index_attribute_map_ptr, index_cursor_array_ptr, record_cursor_ptr, dm_area_ptr);
		 number_of_tuples_processed = number_of_tuples_processed + 1;
	        end;
	     end;
         end MODIFY;


      call FINISH ();
MAIN_RETURN:
      return;
%skip (4);
FINISH:
   proc ();
      if ^process_single_tuple
      then p_number_of_tuples_processed = number_of_tuples_processed;

      if key_ptr ^= null
      then
         do;
	  key_ptr -> simple_typed_vector.number_of_dimensions =
	       index_attribute_map.maximum_number_of_attributes_per_index + 1;
	  free key_ptr -> simple_typed_vector in (dm_area);
         end;

      if old_record_ptr ^= null
      then call FREE_SIMPLE_TYPED_VECTOR (old_record_ptr);	/* Free vector and targets of value_ptrs */

      if new_record_ptr ^= null
      then free new_record_ptr -> simple_typed_vector in (dm_area);
						/* Don't free targets of value_ptrs */

      if key_spec_ptr ^= null
      then free key_spec_ptr -> search_specification in (dm_area);

      if record_cursor_ptr ^= null & record_cursor_ptr ^= relation_cursor.current.cursor_ptr
      then call record_manager_$destroy_cursor (record_cursor_ptr, (0));

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
BUILD_KEY:
   proc (bk_p_key_ptr, bk_p_old_record_ptr, bk_p_new_record_ptr, bk_p_record_id_ptr, bk_p_iam_ptr, bk_p_index_idx,
        bk_p_index_field_is_modified);

/* DESCRIPTION
        This routine builds a key from the values in a record/tuple which
   is appropriate for the given index. */

      dcl	    bk_p_key_ptr	       ptr parameter;
      dcl	    bk_p_old_record_ptr    ptr parameter;
      dcl	    bk_p_new_record_ptr    ptr parameter;
      dcl	    bk_p_record_id_ptr     ptr parameter;
      dcl	    bk_p_iam_ptr	       ptr parameter;
      dcl	    bk_p_index_idx	       fixed bin parameter;
      dcl	    bk_p_index_field_is_modified
			       bit (1) aligned parameter;

      dcl	    bk_field_idx	       fixed bin;
      dcl	    bk_record_field_idx    fixed bin;
      dcl	    bk_old_value_ptr       ptr;
      dcl	    bk_new_value_ptr       ptr;

      bk_p_index_field_is_modified = FALSE;
      bk_p_key_ptr -> simple_typed_vector.number_of_dimensions =
	 bk_p_iam_ptr -> index_attribute_map.index (bk_p_index_idx).number_of_attributes + 1;
BK_FIELD_LOOP:
      do bk_field_idx = 1 to bk_p_iam_ptr -> index_attribute_map.index (bk_p_index_idx).number_of_attributes;
         bk_record_field_idx = bk_p_iam_ptr -> index_attribute_map.index (bk_p_index_idx).attribute_id (bk_field_idx);
         bk_old_value_ptr = bk_p_old_record_ptr -> simple_typed_vector.dimension (bk_record_field_idx).value_ptr;
         bk_new_value_ptr = bk_p_new_record_ptr -> simple_typed_vector.dimension (bk_record_field_idx).value_ptr;
         bk_p_key_ptr -> simple_typed_vector.dimension (bk_field_idx).value_ptr = bk_new_value_ptr;
         if bk_new_value_ptr ^= bk_old_value_ptr
         then bk_p_index_field_is_modified = TRUE;
      end BK_FIELD_LOOP;

      bk_p_key_ptr -> simple_typed_vector.dimension (bk_field_idx).value_ptr = bk_p_record_id_ptr;

      return;

   end BUILD_KEY;
%page;
BUILD_RECORD:
   proc (br_p_old_record_ptr, br_p_new_record_ptr, br_p_gtv_ptr, br_p_area_ptr);

/* This routine builds a record containing the modified field values. */

      dcl	    (
	    br_p_old_record_ptr    ptr,
	    br_p_new_record_ptr    ptr,
	    br_p_gtv_ptr	       ptr,
	    br_p_area_ptr	       ptr
	    )		       parameter;

      dcl	    br_dim_idx	       fixed bin;
      dcl	    br_field_idx	       fixed bin;
      dcl	    br_field_value_ptr     ptr;

      if br_p_new_record_ptr = null ()
      then
BR_ALLOC_NEW_RECORD:
         do;
	  stv_number_of_dimensions = br_p_old_record_ptr -> simple_typed_vector.number_of_dimensions;
	  alloc simple_typed_vector in (br_p_area_ptr -> dm_area) set (br_p_new_record_ptr);
         end BR_ALLOC_NEW_RECORD;

      br_p_new_record_ptr -> simple_typed_vector = br_p_old_record_ptr -> simple_typed_vector;

BR_DIMENSION_LOOP:
      do br_dim_idx = 1 to hbound (br_p_gtv_ptr -> general_typed_vector.dimension, 1);
         br_field_idx = br_p_gtv_ptr -> general_typed_vector.dimension (br_dim_idx).identifier;
         br_field_value_ptr = br_p_gtv_ptr -> general_typed_vector.dimension (br_dim_idx).value_ptr;

         if br_field_idx > 0
         then br_p_new_record_ptr -> simple_typed_vector.dimension (br_field_idx).value_ptr = br_field_value_ptr;

      end BR_DIMENSION_LOOP;

      return;

   end BUILD_RECORD;
%page;
BUILD_RECORD_TEMPLATE:
   proc (brt_p_record_ptr, brt_p_area_ptr, brt_p_attr_info_ptr);

/* This routine takes the pointer to a record simple_typed_vector and */
/* converts it into one which has value_ptrs pointing to maximum sized */
/* values so that the record can be used as input to record_manager_   */
/* get_record_by_id entry.  This means finding the varying length      */
/* values, freeing them, and re-allocating them at the maximum length. */

      dcl	    (
	    brt_p_record_ptr       ptr,
	    brt_p_area_ptr	       ptr,
	    brt_p_attr_info_ptr    ptr
	    )		       parameter;

      dcl	    brt_template_length    fixed bin (35);
      dcl	    brt_template_ptr       ptr;
      dcl	    brt_char_var_template  aligned char (brt_template_length) varying based (brt_template_ptr);
      dcl	    brt_bit_var_template   aligned bit (brt_template_length) varying based (brt_template_ptr);
      dcl	    brt_attr_idx	       fixed bin;
      dcl	    1 brt_descriptor       aligned like arg_descriptor;

BRT_ATTRIBUTE_LOOP:
      do brt_attr_idx = 1 to brt_p_attr_info_ptr -> attribute_info.number_of_attributes;
         unspec (brt_descriptor) = brt_p_attr_info_ptr -> attribute_info.attribute (brt_attr_idx).descriptor;
         if brt_descriptor.type = varying_char_dtype
         then
BRT_CHAR_VARYING:
	  do;
	     brt_template_length = 1 /* the length doesn't matter to free */;
	     free brt_p_record_ptr -> simple_typed_vector.dimension (brt_attr_idx).value_ptr -> brt_char_var_template;
	     brt_template_length = brt_descriptor.size;
	     alloc brt_char_var_template in (brt_p_area_ptr -> dm_area) set (brt_template_ptr);
	     brt_p_record_ptr -> simple_typed_vector.dimension (brt_attr_idx).value_ptr = brt_template_ptr;
	  end BRT_CHAR_VARYING;
         else if brt_descriptor.type = varying_bit_dtype
         then
BRT_BIT_VARYING:
	  do;
	     brt_template_length = 1 /* the length doesn't matter to free */;
	     free brt_p_record_ptr -> simple_typed_vector.dimension (brt_attr_idx).value_ptr -> brt_bit_var_template;
	     brt_template_length = brt_descriptor.size;
	     alloc brt_bit_var_template in (brt_p_area_ptr -> dm_area) set (brt_template_ptr);
	     brt_p_record_ptr -> simple_typed_vector.dimension (brt_attr_idx).value_ptr = brt_template_ptr;
	  end BRT_BIT_VARYING;
         else
BRT_FIXED_SIZE:					/* the existing is fixed size */
	  ;
      end BRT_ATTRIBUTE_LOOP;

   end BUILD_RECORD_TEMPLATE;
%page;
BUILD_SPEC:
   proc (bs_spec_ptr, bs_p_record_ptr, bs_p_record_id_ptr, bs_p_iam_ptr, bs_p_index_idx);

/* DESCRIPTION
        This routine builds a specification from the values in a record/tuple
   which represents an exact match of the appropriate key in the given index. */

      dcl	    bs_spec_ptr	       ptr parameter;
      dcl	    bs_p_record_ptr	       ptr parameter;
      dcl	    bs_p_record_id_ptr     ptr parameter;
      dcl	    bs_p_iam_ptr	       ptr parameter;
      dcl	    bs_p_index_idx	       fixed bin parameter;

      dcl	    bs_field_idx	       fixed bin;

BS_FIELD_LOOP:
      do bs_field_idx = 1 to bs_p_iam_ptr -> index_attribute_map.index (bs_p_index_idx).number_of_attributes;
         bs_spec_ptr -> search_specification.and_group (1).constraint (bs_field_idx).value_ptr =
	    bs_p_record_ptr
	    -> simple_typed_vector
	    .dimension (bs_p_iam_ptr -> index_attribute_map.index (bs_p_index_idx).attribute_id (bs_field_idx))
	    .value_ptr;
      end BS_FIELD_LOOP;
      bs_spec_ptr -> search_specification.and_group (1).constraint (bs_field_idx).value_ptr = bs_p_record_id_ptr;
      bs_spec_ptr -> search_specification.and_group (1).number_of_constraints = bs_field_idx;

      return;

   end BUILD_SPEC;
%skip (4);
INIT_SPEC:
   proc (is_p_spec_ptr, is_p_iam_ptr, is_p_area_ptr);

      dcl	    (
	    is_p_spec_ptr	       ptr,
	    is_p_iam_ptr	       ptr,
	    is_p_area_ptr	       ptr
	    )		       parameter;
      dcl	    is_field_idx	       fixed bin (17);

      ss_number_of_and_groups = 1;
      ss_maximum_number_of_constraints = is_p_iam_ptr -> index_attribute_map.maximum_number_of_attributes_per_index + 1;

      alloc search_specification in (is_p_area_ptr -> dm_area) set (is_p_spec_ptr);

      is_p_spec_ptr -> search_specification.head.version = SPECIFICATION_VERSION_4;
      is_p_spec_ptr -> search_specification.head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE;
      is_p_spec_ptr -> search_specification.head.subset_specification_ptr = null;
      is_p_spec_ptr -> search_specification.range.type = ALL_RANGE_TYPE;
      is_p_spec_ptr -> search_specification.range.size = 0;
      is_p_spec_ptr -> search_specification.and_group (1).constraint (*).operator_code = EQUAL_OPERATOR_CODE;
      is_p_spec_ptr -> search_specification.and_group (1).constraint (*).value_field_id = -1;

      do is_field_idx = 1 to is_p_spec_ptr -> search_specification.maximum_number_of_constraints;
         is_p_spec_ptr -> search_specification.and_group (1).constraint (is_field_idx).field_id = is_field_idx;
      end;

      return;

   end INIT_SPEC;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_received_version, cv_p_expected_version);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%skip (4);
CHECK_VERSION_FB:
   proc (cvf_p_structure_name, cvf_p_received_version, cvf_p_expected_version);

      dcl	    cvf_p_received_version fixed bin (35);
      dcl	    cvf_p_expected_version fixed bin (35);
      dcl	    cvf_p_structure_name   char (*);

      if cvf_p_received_version ^= cvf_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", cvf_p_expected_version, cvf_p_structure_name, cvf_p_received_version);

   end CHECK_VERSION_FB;
%page;
DELETE_TUPLE:
   proc (dt_p_record_id, dt_p_record_ptr, dt_p_spec_ptr, dt_p_iam_ptr, dt_p_ica_ptr, dt_p_record_cursor_ptr,
        dt_p_area_ptr);

      dcl	    dt_p_record_id	       bit (36) aligned parameter;
      dcl	    dt_p_record_ptr	       ptr parameter;
      dcl	    dt_p_record_cursor_ptr ptr parameter;
      dcl	    dt_p_spec_ptr	       ptr parameter;
      dcl	    dt_p_iam_ptr	       ptr parameter;
      dcl	    dt_p_ica_ptr	       ptr parameter;
      dcl	    dt_p_area_ptr	       ptr parameter;


      dcl	    dt_code	       fixed bin (35);
      dcl	    dt_index_idx	       fixed bin;
      dcl	    dt_index_cursor_ptr    ptr init (null ());

      dt_code = 0;

      call record_manager_$get_record_by_id (dt_p_record_id, null (), dt_p_area_ptr, dt_p_record_cursor_ptr,
	 dt_p_record_ptr, dt_code);
      if dt_code ^= 0
      then if dt_code = dm_error_$record_not_found
	 then if TUPLE_ALREADY_PROCESSED (dt_p_record_id) = TRUE
	      then return /* caller supplied id twice */;
	      else call ERROR_RETURN (dm_error_$tuple_not_found_id);
	 else call ERROR_RETURN (dt_code);


      do dt_index_idx = 1 to hbound (dt_p_iam_ptr -> index_attribute_map.index, 1);

         if dt_p_iam_ptr -> index_attribute_map.index (dt_index_idx).number_of_attributes > 0
         then
	  do;
	     dt_index_cursor_ptr = dt_p_ica_ptr -> index_cursor_array.cursor_ptr (dt_index_idx);
	     call BUILD_SPEC (dt_p_spec_ptr, dt_p_record_ptr, addr (dt_p_record_id), dt_p_iam_ptr, dt_index_idx);
	     call index_manager_$delete_key (dt_p_spec_ptr, dt_p_area_ptr, dt_index_cursor_ptr, (0), dt_code);
	     if dt_code ^= 0
	     then if dt_code = dm_error_$key_not_found
		then dt_code = 0;
		else call ERROR_RETURN (dt_code);
	  end;
      end;

      call record_manager_$delete_record_by_id (dt_p_record_id, dt_p_record_cursor_ptr, dt_code);
      if dt_code ^= 0
      then call ERROR_RETURN (dt_code);

      return;

   end DELETE_TUPLE;
%page;
FREE_SIMPLE_TYPED_VECTOR:
   proc (fstv_p_vector_ptr);

      dcl	    fstv_p_vector_ptr      ptr parameter;

      dcl	    fstv_vector_ptr	       ptr;
      dcl	    fstv_descriptor_string bit (36) aligned based;
      dcl	    fstv_dimension_idx     fixed bin;
      dcl	    fstv_storage_size      fixed bin (35);
      dcl	    fstv_storage_string    bit (fstv_storage_size) aligned based;
      dcl	    fstv_current_value_ptr ptr init (null);
      dcl	    fstv_based_real_fixed_bin_1u
			       based fixed bin (35) unaligned;

      fstv_vector_ptr = fstv_p_vector_ptr;
      fstv_p_vector_ptr = null ();			/* So we don't try again */

      do fstv_dimension_idx = 1 to fstv_vector_ptr -> simple_typed_vector.number_of_dimensions;
         arg_descriptor_ptr = addr (attribute_info.attribute (fstv_dimension_idx).descriptor);
         fstv_current_value_ptr = fstv_vector_ptr -> simple_typed_vector.dimension (fstv_dimension_idx).value_ptr;
         if arg_descriptor.type = varying_char_dtype
         then fstv_storage_size = fstv_current_value_ptr -> fstv_based_real_fixed_bin_1u * BITS_PER_BYTE + BITS_PER_WORD;
         else if arg_descriptor.type = varying_bit_dtype
         then fstv_storage_size = fstv_current_value_ptr -> fstv_based_real_fixed_bin_1u + BITS_PER_WORD;
         else call data_format_util_$get_data_bit_length (arg_descriptor_ptr -> fstv_descriptor_string, fstv_storage_size,
	         (0));

         free fstv_current_value_ptr -> fstv_storage_string in (dm_area);
      end;

      free fstv_vector_ptr -> simple_typed_vector in (dm_area);

      return;

   end FREE_SIMPLE_TYPED_VECTOR;
%page;
MODIFY_TUPLE:
   proc (mt_p_record_id, mt_p_old_record_ptr, mt_p_new_record_ptr, mt_p_key_ptr, mt_p_gtv_ptr, mt_p_spec_ptr,
        mt_p_iam_ptr, mt_p_ica_ptr, mt_p_record_cursor_ptr, mt_p_area_ptr);

      dcl	    mt_p_record_id	       bit (36) aligned parameter;
      dcl	    mt_p_old_record_ptr    ptr parameter;
      dcl	    mt_p_new_record_ptr    ptr parameter;
      dcl	    mt_p_record_cursor_ptr ptr parameter;
      dcl	    mt_p_key_ptr	       ptr parameter;
      dcl	    mt_p_gtv_ptr	       ptr parameter;
      dcl	    mt_p_spec_ptr	       ptr parameter;
      dcl	    mt_p_iam_ptr	       ptr parameter;
      dcl	    mt_p_ica_ptr	       ptr parameter;
      dcl	    mt_p_area_ptr	       ptr parameter;

      dcl	    mt_code	       fixed bin (35);
      dcl	    mt_index_idx	       fixed bin;
      dcl	    mt_key_must_be_modified
			       bit (1) aligned;
      dcl	    mt_index_cursor_ptr    ptr;

      mt_code = 0;

      call record_manager_$get_record_by_id (mt_p_record_id, null (), mt_p_area_ptr, mt_p_record_cursor_ptr,
	 mt_p_old_record_ptr, mt_code);
      if mt_code ^= 0
      then if mt_code = dm_error_$record_not_found
	 then call ERROR_RETURN (dm_error_$tuple_not_found_id);
	 else call ERROR_RETURN (mt_code);

      call BUILD_RECORD (mt_p_old_record_ptr, mt_p_new_record_ptr, mt_p_gtv_ptr, mt_p_area_ptr);


      do mt_index_idx = 1 to hbound (mt_p_iam_ptr -> index_attribute_map.index, 1);

         if mt_p_iam_ptr -> index_attribute_map.index (mt_index_idx).number_of_attributes > 0
         then
	  do;
	     call BUILD_KEY (mt_p_key_ptr, mt_p_old_record_ptr, mt_p_new_record_ptr, addr (mt_p_record_id),
		mt_p_iam_ptr, mt_index_idx, mt_key_must_be_modified);
	     if mt_key_must_be_modified = TRUE
	     then
	        do;
		 mt_index_cursor_ptr = mt_p_ica_ptr -> index_cursor_array.cursor_ptr (mt_index_idx);
		 call BUILD_SPEC (mt_p_spec_ptr, mt_p_old_record_ptr, addr (mt_p_record_id), mt_p_iam_ptr,
		      mt_index_idx);
		 call index_manager_$delete_key (mt_p_spec_ptr, mt_p_area_ptr, mt_index_cursor_ptr, (0), mt_code);
		 if mt_code ^= 0
		 then call ERROR_RETURN (mt_code);
		 call index_manager_$put_key (mt_p_key_ptr, mt_index_cursor_ptr, mt_code);
		 if mt_code ^= 0
		 then if mt_code = dm_error_$key_duplication
		      then
		         do;
			  call ROLLBACK_TUPLE (mt_p_record_id, mt_p_old_record_ptr, mt_p_new_record_ptr,
			       mt_p_key_ptr, mt_p_spec_ptr, mt_p_iam_ptr, mt_p_ica_ptr, mt_p_area_ptr,
			       (mt_index_idx - 1));
			  call ERROR_RETURN (mt_code);
		         end;
	        end;
	  end;
      end;

      call record_manager_$modify_record_by_id (mt_p_record_id, mt_p_gtv_ptr, mt_p_record_cursor_ptr, mt_code);
      if mt_code ^= 0
      then call ERROR_RETURN (mt_code);

      return;

   end MODIFY_TUPLE;
%page;
ROLLBACK_TUPLE:
   proc (rt_p_record_id, rt_p_old_record_ptr, rt_p_new_record_ptr, rt_p_key_ptr, rt_p_spec_ptr, rt_p_iam_ptr,
        rt_p_ica_ptr, rt_p_area_ptr, rt_p_last_modified_index);

      dcl	    rt_p_record_id	       bit (36) aligned parameter;
      dcl	    rt_p_old_record_ptr    ptr parameter;
      dcl	    rt_p_new_record_ptr    ptr parameter;
      dcl	    rt_p_key_ptr	       ptr parameter;
      dcl	    rt_p_spec_ptr	       ptr parameter;
      dcl	    rt_p_iam_ptr	       ptr parameter;
      dcl	    rt_p_ica_ptr	       ptr parameter;
      dcl	    rt_p_area_ptr	       ptr parameter;
      dcl	    rt_p_last_modified_index
			       fixed bin parameter;

      dcl	    rt_code	       fixed bin (35);
      dcl	    rt_index_idx	       fixed bin;
      dcl	    rt_key_must_be_modified
			       bit (1) aligned;
      dcl	    rt_index_cursor_ptr    ptr;


      do rt_index_idx = 1 to rt_p_last_modified_index;

         if rt_p_iam_ptr -> index_attribute_map.index (rt_index_idx).number_of_attributes > 0
         then
	  do;
	     call BUILD_KEY (rt_p_key_ptr, rt_p_new_record_ptr, rt_p_old_record_ptr, addr (rt_p_record_id),
		rt_p_iam_ptr, rt_index_idx, rt_key_must_be_modified);
	     if rt_key_must_be_modified = TRUE
	     then
	        do;
		 rt_index_cursor_ptr = rt_p_ica_ptr -> index_cursor_array.cursor_ptr (rt_index_idx);
		 if rt_index_idx < rt_p_last_modified_index
		 then
RT_REMOVE_NEW_VALUE:
		    do;
		       call BUILD_SPEC (rt_p_spec_ptr, rt_p_new_record_ptr, addr (rt_p_record_id), rt_p_iam_ptr,
			  rt_index_idx);
		       call index_manager_$delete_key (rt_p_spec_ptr, rt_p_area_ptr, rt_index_cursor_ptr, (0),
			  rt_code);
		       if rt_code ^= 0
		       then call ERROR_RETURN (rt_code);
		    end RT_REMOVE_NEW_VALUE;
RT_REPLACE_OLD_VALUE:
		 do;
		    call index_manager_$put_key (rt_p_key_ptr, rt_index_cursor_ptr, rt_code);
		    if rt_code ^= 0
		    then call ERROR_RETURN (rt_code);
		 end RT_REPLACE_OLD_VALUE;
	        end;
	  end;
      end;

      return;

   end ROLLBACK_TUPLE;
%page;
SET_RECORD_COLLECTION_CURSOR_PTR:
   proc (srccp_p_relation_cursor_ptr, srccp_p_record_collection_id) returns (ptr);

      dcl	    srccp_p_relation_cursor_ptr
			       ptr parameter;
      dcl	    srccp_p_record_collection_id
			       bit (36) aligned parameter;

      dcl	    srccp_record_collection_cursor_ptr
			       ptr init (null);
      dcl	    srccp_code	       fixed bin (35) init (0);

      call record_manager_$create_cursor (srccp_p_relation_cursor_ptr -> relation_cursor.file_opening_id,
	 srccp_p_record_collection_id, srccp_p_relation_cursor_ptr -> relation_cursor.work_area_ptr,
	 srccp_record_collection_cursor_ptr, srccp_code);
      if srccp_code ^= 0
      then call ERROR_RETURN (srccp_code);

      return (srccp_record_collection_cursor_ptr);

   end SET_RECORD_COLLECTION_CURSOR_PTR;
%page;
SET_CURSOR_PTR_FOR_THIS_INDEX:
   proc (scpfti_index_idx);

      dcl	    scpfti_index_idx       fixed bin (17);
      dcl	    scpfti_code	       fixed bin (35);
      dcl	    scpfti_index_cursor_ptr
			       ptr;

      if index_attribute_map.index (scpfti_index_idx).number_of_attributes > 0
      then if index_cursor_array.cursor_ptr (scpfti_index_idx) = null
	 then
	    do;
	       call index_manager_$create_cursor (relation_cursor.file_opening_id,
		  index_attribute_map.index (scpfti_index_idx).collection_id, dm_area_ptr, scpfti_index_cursor_ptr,
		  scpfti_code);
	       if scpfti_code ^= 0
	       then call ERROR_RETURN (scpfti_code);

	       index_cursor_array.cursor_ptr (scpfti_index_idx) = scpfti_index_cursor_ptr;
	    end;

      return;

   end SET_CURSOR_PTR_FOR_THIS_INDEX;
%page;
TUPLE_ALREADY_PROCESSED:
   proc (tap_p_tuple_id) returns (bit (1) aligned);

/* This routine checks to see if tap_p_tuple_id is duplicated
   in the element_id_list.  Specifically, it goes from the current
   entry in the element_id_list.id array backwards looking for a match.
   Global variables are used, in particular element_id_list_ptr and
   tuple_idx.  This is because this routine is called from inside of
   DELETE_TUPLE and MODIFY_TUPLE, which by design have no knowledge of 
   those variables. */

      dcl	    tap_p_tuple_id	       bit (36) aligned parameter;

      dcl	    tap_tuple_idx	       fixed bin (35);

      if element_id_list_ptr = null ()
      then return (FALSE);

      tap_tuple_idx = tuple_idx - 1;
      do tap_tuple_idx = tap_tuple_idx by -1 to 1 while (element_id_list.id (tap_tuple_idx) ^= tap_p_tuple_id);
      end;
      if tap_tuple_idx >= 1
      then return (TRUE);
      else return (FALSE);

   end TUPLE_ALREADY_PROCESSED;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_rlm_idx_cursor_array;
%page;
%include vu_typed_vector;
%page;
%include vu_typed_vector_array;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_range_constants;
%page;
%include dm_operator_constants;
%page;
%include dm_element_id_list;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include sub_err_flags;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;

   end rlm_process_tuples_by_id;
