/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-10-07,TLNguyen), approve(87-10-07,MCR7773),
     audit(87-12-03,GWMay), install(88-01-12,MR12.2-1012):
     - Make reorder_archive.pl1 reference error_table_$rqover.
     - Changed all calls to com_err_ that print the pathname of an
       archive to call pathname_ to build the pathname.
                                                   END HISTORY COMMENTS */


reorder_archive: ra: proc options (variable);

/*
   modified by E Stone Jan 1974 to call new version of update_handler_
   Modified to call newer update_handler_ 03/29/79 by Steve Herbst
   Bugs fixed 04/15/80 S. Herbst */
/* Fixed usage message and bug in argument processing 10/29/82 S. Herbst */

/*  declarations  */
/* ---------------- */

dcl  whoami char (15) static options (constant) init ("reorder_archive"); /*  for printing error messages  */

/*  pointers  */

dcl  arg_ptr ptr,					/*  pointer to current argument  */
     input_ptr ptr,					/*  pointer to archive to be reordered  */
     temp_ptr ptr,
     p1 ptr;					/*  sorting pointer  */

/*  for argument fetching  */

dcl  arg_len fixed bin (21),				/*  length of current argument  */
     arg char (arg_len)based (arg_ptr),			/*  argument  */
     arg_index fixed bin,				/*  argument fetch index  */
     arg_given bit (1),				/*  ON if good arg has been encountered  */

    (code, udh_code) fixed bin (35);			/*  error code  */

/*  path and file names  */

dcl  archive_dir char (168),				/*  directory of archive to be reordered  */
     archive_name char (32),				/*  file name of archive to be reordered  */
     comment char (35),				/* For fs_move comment */
     list_name char (32);				/*  file name of driving list  */

/*  for examining driving list  */

dcl  ioname1 char (32),
     iox_$user_input ptr external,
     attached_sw bit (1),				/* ON if driving file has been attached */
     file_input_sw bit (1),				/* ON to read from file */
     iocb_ptr ptr,					/* where to read component names */
     num_chars_read fixed bin (21),			/*  to read list  */
     next_new_line char (128) aligned,			/*  line with leading and trailing blanks  */
     new_line char (32),				/*  new line cleaned up  */
    (error_table_$badopt,				/* unrecognized option */
     error_table_$end_of_info,
     error_table_$moderr,
     error_table_$rqover) fixed bin (35) external;


/*  for examining archive file  */

dcl  total_words fixed bin (19),			/*  number of words in archive file  */
     sub_words fixed bin (18),			/*  bitcount of subfile converted  */
     bitcnt fixed bin (24),				/*  bitcount  */

     1 arc_head based (p1) aligned,			/*  archive header mask  */
     2 unused char (12),
     2 name char (32),
     2 unused2 char (40),
     2 bitcnt char (8),
     2 unused3 char(8);

dcl  move (sub_words) fixed bin (35) based (p1);		/*  for moving subfiles  */

/*  for error on attempting to copy temporary  */

dcl  fatal_err_sw bit (1),				/*  warning flag  */
     temp_name char (32) init ("ra_temp_.archive");	/*  name of temporary in pdir  */

/* for forcing access */

dcl  access_switches bit (36),			/* returned by update_handler_
						   BIT saying access was added,
						   BIT saying there already was such an ACL term. */
     old_mode bit (36);				/* previous mode if any */

/*  arrays  */

dcl (ptr_array ptr,					/*  pointers to old archive subfiles  */
     lngth_array fixed bin (18),			/*  lengths of subfiles  */
     name_array char (32)aligned,			/*  names in old archive in order  */
     used_array fixed bin,				/*  flags, show whether subfile was used  */

     order_array fixed bin) (0:999);			/*  index into other arrays of new order  */

/*  indices  */

dcl (i, j, k, l) fixed bin (18),
     retry fixed bin;

/*  external entry declarations  */
/* ------------------------------- */

dcl (com_err_, com_err_$suppress_name, ioa_) entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     cv_dec_ entry (char (*) aligned) returns (fixed bin (35) aligned),
     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     get_temp_segment_ entry (char (*), ptr, fixed bin (35)),
     hcs_$chname_seg entry (ptr, char (*), char (*), fixed bin (35)),
     hcs_$fs_move_seg entry (ptr, ptr, fixed bin, fixed bin (35)),
     hcs_$initiate_count entry (char (*), char (*), char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35)),
     iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35)),
     iox_$close entry (ptr, fixed bin (35)),
     iox_$detach_iocb entry (ptr, fixed bin (35)),
     iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     pathname_ entry (char (*), char (*)) returns (char (168)),
     release_temp_segment_ entry (char (*), ptr, fixed bin (35)),
     suffixed_name_$new_suffix entry (char (*), char (*), char (*), char (32), fixed bin (35)),
     update_handler_ entry (char (*), char (*), char (*), bit (36), bit (36), fixed bin (35)),
     update_handler_$reprotect entry (char (*), char (*), bit (36), bit (36), fixed bin (35));

dcl  cleanup condition;

dcl (addr, addrel, bin, divide, hbound, length, ltrim, null, rel, rtrim, size, substr) builtin;

/* 
   */

	attached_sw = "0"b;
	temp_ptr = null;

	on cleanup call clean_up;

	arg_given, fatal_err_sw, file_input_sw = "0"b;
	arg_index = 0;

/*  processing  */
/* -------------- */

/*  create a temporary segment in the process directory  */

	call get_temp_segment_ (whoami, temp_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami, "Obtaining temp segment.");
	     return;
	end;

/* Fetch arguments */

FETCH_NEXT_ARG:					/*  get the next argument  */

	arg_index = arg_index + 1;			/*  increment the arguments fetched index  */

	call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code); /*  fetch the next argument  */
	if code ^= 0 then go to FINI;
	if arg_len = 0 then go to FINI;

	if substr (arg, 1, 1) = "-" then do;

	     if arg = "-file_input" | arg = "-fi" then do;
		arg_given = "0"b;
		file_input_sw = "1"b;
		ioname1 = "info";			/*  for calls to attach and read  */
		go to FETCH_NEXT_ARG;
	     end;

	     else if arg = "-console_input" | arg = "-ci" then do;
		arg_given = "1"b;
		file_input_sw = "0"b;
		go to FETCH_NEXT_ARG;
	     end;

	     else do;				/* invalid option specified  */
		fatal_err_sw = "1"b;		/*  get out  */
		call com_err_ (error_table_$badopt, whoami, arg);
		go to DONE;
	     end;
	end;

	arg_given = "1"b;				/*  good argument  */

/*  expand the argument, create list and archive names  */

	call expand_pathname_$add_suffix (arg, "archive", archive_dir, archive_name, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami, arg);
	     go to FETCH_NEXT_ARG;
	end;

	call hcs_$initiate_count (archive_dir, archive_name, "", bitcnt, 0, input_ptr, code);
	if input_ptr = null then do;
	     call com_err_ (code, whoami, "^a", pathname_ (archive_dir, archive_name));
	     go to FETCH_NEXT_ARG;
	end;

	if ^file_input_sw then iocb_ptr = iox_$user_input;
	else do;

	     call suffixed_name_$new_suffix (archive_name, "archive", "order", list_name, code);
	     call iox_$attach_name (ioname1, iocb_ptr, "vfile_ " || list_name, null, code);
	     if code ^= 0 then do;
IO_ERROR:		call com_err_ (code, whoami, "^a", list_name);
		go to terminate_archive;
	     end;

	     attached_sw = "1"b;

	     call iox_$open (iocb_ptr, 1, "0"b, code);
	     if code ^= 0 then go to IO_ERROR;
	end;

/* now iocb_ptr is set, regardless of input source (tty or file) */

	total_words = divide (bitcnt+35, 36, 19, 0);	/*  number of words in archive file  */

/*  examine the archive, fill name, pointer, and length arrays  */

	used_array (*) = 0;
	p1 = input_ptr;				/*  set scan ptr to beginning of archive  */

	do i = 0 to hbound (order_array, 1) while (bin (rel (p1), 18) < total_words);
	     ptr_array (i) = p1;			/*  put subfile pointer in slot  */
	     sub_words = divide (cv_dec_ (p1 -> arc_head.bitcnt)+35, 36, 18, 0)+size (arc_head); /*  calculate subfile word count  */
	     lngth_array (i) = sub_words;		/*  put word count in subfile slot  */
	     name_array (i) = p1 -> arc_head.name;	/*  put name in subfile slot  */
	     p1 = addrel (p1, sub_words);		/*  step the scan pointer  */
	end;

	if i > hbound (order_array, 1) then do;		/*  too many subfiles in archive  */
	     call com_err_ (0, whoami, "Too many entries (> ^d) in archive ^a", hbound (order_array, 1) + 1,
		pathname_ (archive_dir, archive_name));
	     go to ERR3;
	end;

/* read new order */

	if ^file_input_sw then call ioa_ ("Input for ^a:", archive_name);

	j = -1;					/*  initialize the order array index  */

READ_NEXT_NAME:					/*  get a name from the list  */

	call iox_$get_line (iocb_ptr, addr (next_new_line), length (next_new_line), num_chars_read, code);
	if code ^= 0 then
	     if code = error_table_$end_of_info then go to MAKE_NEW_ARCHIVE;
	     else do;
		call com_err_ (code, whoami, list_name);
		go to ERR3;
	     end;

/*  strip off any blanks  */

	if num_chars_read <= 1 then go to READ_NEXT_NAME; /*  test for carriage return  */
	new_line = rtrim (ltrim (substr (next_new_line, 1, num_chars_read - 1)));
	if new_line = "" then go to READ_NEXT_NAME;
	if new_line = "." then go to MAKE_NEW_ARCHIVE;	/*  test for end of console input  */
	if ^file_input_sw then
	     if new_line = ".*" then do;		/* user wants "finished" signal */
		call ioa_ ("*");
		go to READ_NEXT_NAME;
	     end;
	     else if new_line = ".q" then do;		/* user has decided not to reorder */
		fatal_err_sw = "1"b;
		go to ERR3;
	     end;

/*  fill in the order and "used" arrays  */

	/* Note: j is initialized to -1 just before the beginning of this loop at READ_NEXT_NAME. */

	do k = 0 to i - 1;
	     if name_array (k) = new_line then do;	/*  find name in name array  */
		if used_array (k) = 1 then do;	/*  name duplication; error  */
		     call com_err_ (0, whoami, "^a duplicated in input for ^a",
			new_line, pathname_ (archive_dir, archive_name));
		     if ^file_input_sw then go to READ_NEXT_NAME;
		     go to ERR3;
		end;
		j = j + 1;			/*  step the order array index  */
		order_array (j) = k;		/*  put offset to name in slot  */
		used_array (k) = 1;			/*  mark the name as used  */
		go to READ_NEXT_NAME;		/*  read another name  */
	     end;
	end;

	call com_err_ (0, whoami, "^a not found in ^a", new_line, pathname_ (archive_dir, archive_name));
	if ^file_input_sw then go to READ_NEXT_NAME;
	go to ERR3;

/* All names have been read */

MAKE_NEW_ARCHIVE:					/*  make the new archive  */

/*  copy the specified subfiles  */

	p1 = temp_ptr;				/*  set scan pointer to output segment  */
	do k = 0 to j;				/*  for specified names  */
	     l = order_array (k);			/*  get index to name, pointer, and length  */
	     sub_words = lngth_array (l);		/*  get length of subfile  */
	     p1 -> move = ptr_array (l) -> move;	/*  copy the subfile  */
	     p1 = addrel (p1, sub_words);		/*  step the subfile pointer  */
	end;

/*  copy the unspecified subfiles  */

	if j < i - 1 then do k = 0 to i - 1;
	     if used_array (k) = 0 then do;
		sub_words = lngth_array (k);		/*  get length of the subfile  */
		p1 -> move = ptr_array (k) -> move;	/*  copy the subfile if not yet done  */
		p1 = addrel (p1, sub_words);		/*  step the subfile pointer  */
	     end;
	end;

/* Move the temporary back into the archive file. */

	retry = 0;				/* Clear counter */

try_move:
	call hcs_$fs_move_seg (temp_ptr, input_ptr, 1b, code); /* Move the temporary after truncating the original */
	if code ^= 0
	then do;

	     if code = error_table_$moderr		/* Couldn't move because of bad mode in target */
	     then if retry = 0			/* Have we been here before? */
		then do;				/* OK, try to change mode */

		     call update_handler_ (archive_dir, archive_name, whoami, access_switches, old_mode, udh_code);

		     if udh_code = 0		/* Successful? */
		     then do;

			retry = retry + 1;		/* Update counter */
			go to try_move;		/* See if it works this time */

		     end;

		     else if udh_code = 1		/* He answered "no" */
		     then code = 0;			/* Suppress part of diagnostic */
		     else code = udh_code;		/* Something else, tell him */

		end;

		else comment = "";			/* fall out of access error */

	     else if code = error_table_$rqover then comment = "";
	     else comment = "Original may have been truncated.  ";

	     call hcs_$set_bc_seg (temp_ptr, bitcnt, udh_code); /* Make temporary copiable */

	     call hcs_$chname_seg (temp_ptr, temp_name, archive_name, udh_code);
	     if udh_code = 0 then temp_name = archive_name;

	     temp_ptr = null;			/* Re-call makeseg next time. */

	     call com_err_ (code, whoami, "^a not updated.^/^a ^a^a", pathname_ (archive_dir, archive_name),
		comment, "Reordered version temporarily preserved in [pd]>", temp_name);

	     go to DONE;

	end;

/* Reset the bit-count on the branch (really shouldn't have changed) */

	call hcs_$set_bc_seg (input_ptr, bitcnt, code);

	if code ^= 0
	then call com_err_ (code, whoami, "^a", pathname_ (archive_dir, archive_name));
	code = 0;

	if retry ^= 0
	then call update_handler_$reprotect (archive_dir, archive_name, access_switches, old_mode, code);

	if code ^= 0 then call com_err_ (code, whoami, "^a", pathname_ (archive_dir, archive_name));

terminate_archive:
	call hcs_$terminate_noname (input_ptr, code);	/*  terminate the old archive */
	if code ^= 0 then do;
	     call com_err_ (code, whoami, "Terminating ^a", pathname_ (archive_dir, archive_name));
	     code = 0;
	end;

	if file_input_sw & attached_sw then do;		/* close input file */
	     call iox_$close (iocb_ptr, code);
	     call iox_$detach_iocb (iocb_ptr, code);
	end;

	if ^fatal_err_sw then call hcs_$truncate_seg (temp_ptr, 0, code); /*  truncate the temporary  */
	if code ^= 0 then do;
	     temp_ptr = null;			/*  so can't be used again  */
	     call com_err_ (code, whoami, "Truncating [pd]>^a", temp_name);
	     go to DONE;
	end;
	if ^fatal_err_sw then go to FETCH_NEXT_ARG;

FINI:
	if ^arg_given then call com_err_$suppress_name
	     (0, whoami, "Usage:  reorder_archive {-control_arg} path1 {... {-control_arg} pathN}");

DONE:	call clean_up;
	return;


ERR3:	call com_err_ (0, whoami, "^a not reordered.", pathname_ (archive_dir, archive_name));
	go to terminate_archive;


clean_up:	proc;

dcl  code fixed bin (35);

	     if temp_ptr ^= null then call release_temp_segment_ (whoami, temp_ptr, code);
	     if attached_sw then do;
		call iox_$close (iocb_ptr, code);
		call iox_$detach_iocb (iocb_ptr, code);
	     end;

	end clean_up;


     end reorder_archive;
