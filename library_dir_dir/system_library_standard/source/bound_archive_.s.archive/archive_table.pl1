/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style4 */
archive_table: act: proc;

/* Returns names of archive components matching starnames, or all.

   Usage:     act archive_path {starnames} {-control_args}
   Usage:     [act archive_path {starnames} {-control_args}]

   where archive_path cannot contain stars, and starnames can.
   control_arg can be -absolute_pathname (-absp).

   Coded 08/29/79 S. Herbst */
/* TR7460  Add -absolute_pathname 10/30/80 S. Herbst */
/* TR11457 Have act use archive_ to prevent misbehavior with static storage 01/10/82 L. Baldwin */
/* Added many control arguments 11/30/82 E. N. Kittlitz */
/* Fixed no_star error message 06/17/83 E. N. Kittlitz */
/* Change to use date_time_$format 06/19/84 J A Falksen
   	Fix undocumented bug with -mode output */
/* Fix 2 bugs introduced above. AF output needs rtrim before requote.
	-absp strings must include "::". 84-11-14 jaf */

dcl  area area based (area_ptr);
dcl  arg char (arg_len) based (arg_ptr);
dcl  return_arg char (return_len) varying based (return_ptr);
dcl  starname (starname_count) char (32) based (starname_ptr);

dcl  archive_string char (168) varying;
dcl  dn char (168);
dcl  en char (32);
dcl  item char (512) varying;

dcl  date_format char (15) int static options (constant) init ("^<date>_^<time>");
dcl  dt_len fixed bin;				/* length of date field	       */
dcl  bc_pic picture "(8)z9";
dcl  REW char (3) int static options (constant) init ("rew");

/* max_day is "1999-12-31  23:59:59.999999 gmt Fri"		       */
/* None of the component values have leading or trailing zeroes, so no       */
/*  matter what kind of space or zero suppression has been called for in a   */
/*  user's default formats, this value will cause a max-length result from   */
/*  date_time_$format.					       */
dcl  max_day fixed bin (71) int static options (constant) init (3124137599999999);

dcl  (absp_sw, af_sw, bc_sw, dtcm_sw, dtud_sw, got_path_sw, he_sw, mode_sw, name_sw, requote_sw) bit (1) aligned;

dcl  (area_ptr, arg_ptr, return_ptr, seg_ptr, starname_ptr) ptr;

dcl  (arg_count, starname_count, i) fixed bin;
dcl  (arg_len, return_len) fixed bin;
dcl  first_starname_index fixed bin;
dcl  archive_bit_count fixed bin (24);
dcl  code fixed bin (35);
dcl  mode_v fixed bin;
dcl  name_v fixed bin;

dcl  1 l_archive_component_info aligned like archive_component_info;

dcl  ME char (16) static options (constant) init ("archive_table");

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$badstar fixed bin (35) ext;
dcl  error_table_$inconsistent fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$nostars fixed bin (35) ext;
dcl  error_table_$not_act_fnc fixed bin (35) ext;
dcl  complain entry variable options (variable);

dcl  (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl  archive_$next_component_info entry (ptr, fixed bin (24), ptr, ptr, fixed bin (35));
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  (com_err_, com_err_$suppress_name) entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*))
	returns (char (250) var);
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  requote_string_ entry (char (*) aligned) returns (char (*));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

dcl  (addr, bin, char, fixed, index, length, ltrim, null, rtrim, substr
     ) builtin;

dcl  cleanup condition;

	seg_ptr, starname_ptr = null;
	archive_component_info_ptr = addr (l_archive_component_info);
	l_archive_component_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;

	on cleanup call clean_up;

/* Arg processing */

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     return_arg = "";
	end;

	if arg_count = 0 then do;
	     if af_sw then call active_fnc_err_$suppress_name
		     (0, ME, "Usage:  [act archive_path {starnames} {-control_args}]");
	     else call com_err_$suppress_name
		     (0, ME, "Usage:  act archive_path {starnames} {-control_args}");
	     call clean_up;
	     return;
	end;

	absp_sw, bc_sw, dtcm_sw, dtud_sw, got_path_sw, he_sw, mode_sw = "0"b;
	name_sw = "1"b;				/* default attribute */
	requote_sw = af_sw;				/* assume requote if active function */

	if af_sw then
	     mode_v, name_v = 0;
	else do;
	     mode_v = 4;
	     name_v = 32;
	end;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if index (arg, "-") = 1 then do;
		if arg = "-absolute_pathname" | arg = "-absp" then absp_sw = "1"b;
		else if arg = "-bit_count" | arg = "-bc" then bc_sw = "1"b;
		else if arg = "-component_name" | arg = "-cnm" then absp_sw = "0"b;
		else if arg = "-date_time_contents_modified" | arg = "-dtcm" then dtcm_sw = "1"b;
		else if arg = "-date_time_updated" | arg = "-dtud" then dtud_sw = "1"b;
		else if arg = "-header" | arg = "-he" then he_sw = "1"b;
		else if arg = "-mode" | arg = "-md" then mode_sw = "1"b;
		else if arg = "-name" | arg = "-nm" then name_sw = "1"b;
		else if arg = "-no_bit_count" | arg = "-nbc" then bc_sw = "0"b;
		else if arg = "-no_date_time_contents_modified" | arg = "-ndtcm" then dtcm_sw = "0"b;
		else if arg = "-no_date_time_updated" | arg = "-ndtud" then dtud_sw = "0"b;
		else if arg = "-no_header" | arg = "-nhe" then he_sw = "0"b;
		else if arg = "-no_mode" | arg = "-nmd" then mode_sw = "0"b;
		else if arg = "-no_name" | arg = "-nnm" then name_sw = "0"b;
		else if arg = "-no_requote" then requote_sw = "0"b;
		else if arg = "-requote" then requote_sw = af_sw; /* only turn it on for AF call */

		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;
	     end;
	     else if ^got_path_sw then do;
		got_path_sw = "1"b;
		first_starname_index = i + 1;
		call expand_pathname_$add_suffix (arg, "archive", dn, en, code);
		if code ^= 0 then do;
		     call complain (code, ME, "^a", arg);
		     return;
		end;
		call check_star_name_$entry (en, code);
		if code = 1 | code = 2 then code = error_table_$nostars;
		if code ^= 0 then do;
		     call complain (code, ME, "^a", arg);
		     call clean_up;
		     return;
		end;
	     end;
	end;

	if ^(bc_sw | dtcm_sw | dtud_sw | mode_sw | name_sw) then do;
	     call complain (error_table_$inconsistent, ME, "No component attributes were selected.");
	     return;
	end;
	if af_sw then
	     if bin (bc_sw) + bin (dtcm_sw) + bin (dtud_sw) + bin (mode_sw) + bin (name_sw) < 2 then /* only one attribute */
		requote_sw = "0"b;			/* so no item requoting */
	if af_sw & he_sw then do;
	     call complain (error_table_$inconsistent, ME, "-header cannot be specified as an active function control argument.");
	     return;
	end;
	if ^got_path_sw then do;
	     call complain (error_table_$noarg, ME, "An archive must be specified.");
	     return;
	end;

/* initiate everything, checking access, etc. */

	call initiate_file_ (dn, en, R_ACCESS, seg_ptr, archive_bit_count, code);
	if seg_ptr = null then do;
	     call complain (code, ME, "^a", pathname_ (dn, en));
	     return;
	end;

/* get the first component of the archive */

	l_archive_component_info.comp_ptr = null ();
	call archive_$next_component_info (seg_ptr, archive_bit_count, (l_archive_component_info.comp_ptr), archive_component_info_ptr, code);
	if code ^= 0 then do;
	     call complain (code, ME, "^a", pathname_ (dn, en));
	     return;
	end;

/* if starnames are specified, allocate storage, check for valid starnames */

	if arg_count >= first_starname_index then do;
	     starname_count = arg_count - 1;
	     area_ptr = get_system_free_area_ ();
	     allocate starname in (area) set (starname_ptr);
	     starname_count = 0;

	     do i = first_starname_index to arg_count;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if index (arg, "-") ^= 1 then do;
		     call check_star_name_$entry (arg, code);
		     if code = error_table_$badstar then do;
			call complain (code, ME, "^a", arg);
			return;
		     end;
		     starname_count = starname_count + 1;
		     starname (starname_count) = arg;
		end;
	     end;
	end;
	else starname_count = 0;

	if (dtcm_sw | dtud_sw) & ^af_sw
	then dt_len = length (date_time_$format (date_format, max_day, "", ""));
	else dt_len = 1;
						/* if -absp has been specified, precede each comp_nm with "dn>en.archive::" */

	if absp_sw
	then archive_string = rtrim (pathname_ (dn, en)) || "::";
	else archive_string = "";

/* find components matching starnames and return them to the user */

	do while (l_archive_component_info.comp_ptr ^= null);
	     code = 1;				/* nonzero */
	     if starname_count ^= 0 then do;
		do i = 1 to starname_count while (code ^= 0);
		     call match_star_name_ (l_archive_component_info.name, starname (i), code);
		end;
		if code ^= 0 then go to SKIP;
	     end;

	     item = "";

	     if name_sw
	     then call add_string (archive_string || l_archive_component_info.name, length (archive_string) + length (rtrim (l_archive_component_info.name)));

	     if dtud_sw
	     then call add_string (date_time_$format (date_format, l_archive_component_info.time_updated, "", ""), dt_len);

	     if mode_sw
	     then call add_string (" " ||
		     substr (REW, 1, fixed ((l_archive_component_info.access & R_ACCESS) ^= ""b))
		     || substr (REW, 2, fixed ((l_archive_component_info.access & E_ACCESS) ^= ""b))
		     || substr (REW, 3, fixed ((l_archive_component_info.access & W_ACCESS) ^= ""b)), 5);

	     if dtcm_sw
	     then call add_string (date_time_$format (date_format, l_archive_component_info.time_modified, "", ""), dt_len);

	     if bc_sw
	     then do;
		if (length (item) > 0)
		then item = item || " ";
		bc_pic = l_archive_component_info.comp_bc;
		if af_sw
		then item = item || ltrim (bc_pic);
		else item = item || bc_pic;
	     end;

	     if he_sw then do;
		he_sw = ""b;
		call ioa_ ("^/^11t^a^2/^[ name^27x^]^[ ^a^vx^;^2s^]^[ mode ^]^[ ^a^vx^;^2s^]^[    length^]^/",
		     pathname_ (dn, en), name_sw,
		     dtud_sw, "updated", dt_len - length ("updated"),
		     mode_sw,
		     dtcm_sw, "modified", dt_len - length ("modified"),
		     bc_sw);
	     end;
	     if ^af_sw then call ioa_ ("^a", item);
	     else do;
		if length (return_arg) > 0 then return_arg = return_arg || " ";
		if requote_sw then
		     return_arg = return_arg || requote_string_ ((item));
		else return_arg = return_arg || item;
	     end;

SKIP:	     call archive_$next_component_info (seg_ptr, archive_bit_count, (l_archive_component_info.comp_ptr), archive_component_info_ptr, code);
	     if code ^= 0 then do;
		call complain (code, ME, "^a", pathname_ (dn, en));
		return;
	     end;
	end;

	call clean_up;
%page;
clean_up: proc;
	call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);
	if starname_ptr ^= null then free starname in (area);
     end clean_up; %skip (5);
add_string: proc (str, len);

dcl  str char (*) var,
     len fixed bin;

	if (length (item) > 0)
	then item = item || " ";
	if af_sw
	then item = item || requote_string_ (rtrim (str));
	else item = item || char (str, len);

     end add_string;
%page;
%include access_mode_values;
%page;
%include archive_component_info;
%page;
%include terminate_file;


     end archive_table;
