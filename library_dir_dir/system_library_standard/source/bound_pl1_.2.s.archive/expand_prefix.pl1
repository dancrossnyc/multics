/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


expand_prefix: proc(blk,stmnt,tree,context) returns(ptr);

dcl	(blk,stmnt,tree,a) ptr;
dcl	opcode bit(9) aligned;
dcl	n fixed bin(15);
dcl	(string,null) builtin;

%include semant;

%include operator;
%include semantic_bits;

%include op_codes;

%include nodes;
			/*      */

	this_context = "0"b;
	def_this_context.by_name_assignment = def_context.by_name_assignment;

	a = tree->operator.operand(2);
	opcode = tree->operator.op_code;
	if a->node.type = reference_node
	then a = expand_primitive(blk,stmnt,a,this_context);
	else	if	a->node.type = operator_node
		then	if a->operator.op_code = std_call
			then a = expand_primitive(blk,stmnt,(a->operator.operand(1)),"0"b);
	call apply_prefix(a);
	return(a);

/* subroutine to create scalar operators applied to each scalar component of the aggregate.  */

apply_prefix: proc(e);

dcl	(p,e,t) ptr;
dcl	n fixed bin(15);

	if e->node.type = operator_node
		then do;
			if e->operator.op_code = loop
				then do;
					t = e->operand(1);
					call apply_prefix(t);
					e->operand(1) = t;
					return;
				     end;
			if e->operator.op_code = join
				then do;
					do n = 1 to e->operator.number;
					t = e->operand(n);
					call apply_prefix(t);
					e->operand(n) = t;
					end;
					return;
				     end;
		     end;
	p = create_operator(opcode,2);
	p->operator.operand(2) = e;
	e = p;
	e = operator_semantics(blk,stmnt,e,"0"b);
	return;
	end apply_prefix;

	end expand_prefix;
