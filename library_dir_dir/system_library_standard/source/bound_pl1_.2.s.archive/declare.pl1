/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


declare: proc(ps);

dcl	(ps,s,b,d,p,q,p1,rv) ptr;
dcl	(i,n) fixed bin(15);
dcl	cdesc bit(1);

dcl	pl1_stat_$eis_mode bit(1) aligned ext static;

dcl	condition_abreviations(9) char(8) int static
		initial("conv","fofl","ofl","strg","strz","subrg","undf","ofl","zdiv");
dcl	condition_constants(9) char(16) int static varying
		initial("conversion","fixedoverflow","overflow","stringrange","stringsize",
		"subscriptrange","undefinedfile","underflow","zerodivide");
dcl	(string,fixed,null,substr) builtin;

	s = ps;
	if s=null then return;
	if s->node.type ^= symbol_node
	then do;
		if s -> label.array
		then	call declare_label_array;
		return;
	end;

	if s->symbol.boundary ^= 0 then return;
	if s->symbol.father ^= null then return;

	if s->symbol.son ^= null
	then do;
		if s->symbol.level ^= 1
		then do;
			call semantic_translator$error(149,s);
			s->symbol.level = 1;
		end;

		call declare_structure(s);

		go to exit;
	end;

	if s-> symbol.structure
	then do;
		call semantic_translator$error(98,s);
		s->symbol.structure = "0"b;
		s->symbol.level = 0;
	end;


/* call validate to supply defaults and check for correctness of the declared attributes.	*/

	call validate(s);

/* Set the aliasable bit */

	if s -> symbol.based | s -> symbol.parameter | s -> symbol.defined | s -> symbol.external
	then s -> symbol.aliasable = "1"b;

/* set the padded bit for this level one scalar.	*/

	if s->symbol.packed
	then	s->symbol.reference->reference.padded_ref =
			^(s->symbol.based|s->symbol.parameter|s->symbol.defined);

	b=s->symbol.block_node;

/* if parameter, returns descriptor, or controlled variable, replace the asterisks with references to descriptors.	*/

	cdesc = s->symbol.parameter | s->symbol.return_value | s->symbol.controlled;

	if cdesc
	then	if s->symbol.star_extents | s->symbol.exp_extents
		then	s->symbol.descriptor = declare_descriptor$param((s->symbol.block_node),null,s,null,"1"b);

/* determine the storage size and boundary requirement.	*/

	call get_size(s);

/* Make sure the value will fit in a segment */

	if s -> symbol.c_word_size > max_words_per_variable
	then call semantic_translator$error (357,s);

/* If the variable requires a descriptor and has constant extents, declare_
   descriptor must be called after the extents have been calculated in order
   to actually declare the constant descriptor */

	if cdesc
	then	if s->symbol.descriptor = null
		then	s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);

/* A character string constant is genenerated for condition constants */

	if s->symbol.condition
	then do;
		if s->symbol.dcl_type ^= by_compiler then s->symbol.equivalence = s;
		do i = 1 to 9;
			if s->symbol.token->token.string = condition_abreviations(i)
			then do;
				s->symbol.general = declare_constant$char((condition_constants(i)));
				go to loop_exit;
			end;
		end;

		s->symbol.general = declare_constant$char((s->symbol.token->token.string));
	end;
loop_exit:

/* If this is an entry process its returns descriptor and parameter descriptors.

   Entry constants denoting entry points in this program have an initial pointer
   which points to an entry or procedure statement and an equivalence pointer which
   points to the block node containing the entry or procedure statement.  Entry variables
   and external entry constants in other programs do not have these pointers but do have a descriptor
   list attached to their general pointer.	

   If a return_value is an aggregate or has star_extents, we delay declaring it
   by copying it so that function can get a unique copy each time the function
   is invoked, because of addressing and descriptor problems.  This fixes
   bugs 1217 and 1311.			*/

	if s->symbol.entry
	then do;
		if s->symbol.returns
		& (s->symbol.constant & s->symbol.initial=null
		 | s->symbol.variable)
		then do;
			rv = s->symbol.dcl_size;
			rv->symbol.return_value = "1"b;
			if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
			then do;
				s->symbol.dcl_size = copy_expression(s->symbol.dcl_size);
				call declare(rv);
				s->symbol.dcl_size->symbol.star_extents = rv->symbol.star_extents;
			end;
			else	call declare(rv);
		end;

		do p=s->symbol.general repeat p->element(2) while(p^=null);
			p->element(1)->symbol.param_desc = "1"b;
			call declare((p->element(1)));
		end;

		if s->symbol.variable then go to allocate;
		p=s->symbol.initial;
		if p = null then go to allocate;

/* this is an entry constant declared by a label prefix */

		/* make sure it was not multiply declared */

		d = s->symbol.token->token.declaration;
		p1 = null;
		do while(d^=null);
			if	d->symbol.block_node = b & d^=s
			then if	d->node.type = symbol_node
			then if	d->symbol.entry & d->symbol.constant
			then do;
				call semantic_translator$abort(213,s);
				if p1 = null
				then	s->symbol.token->token.declaration = d->symbol.multi_use;
				else	p1->symbol.multi_use = d->symbol.multi_use;
			end;

			p1 = d;
			d = d->symbol.multi_use;
		end;

		p=p->statement.root;
		n=p->operator.number;
		if s->symbol.returns then n = n-1;
		p1=null;

		do i=1 to n;
			q=create_list(2);
			if ^lookup((s->symbol.equivalence),null,(p->operator.operand(i)),d,"0"b)
				then call semantic_translator$abort(194,(p->operand(i)));
			if d->node.type ^= symbol_node then call semantic_translator$abort(196,d);
			d->symbol.parameter = "1"b;
			if d->symbol.location = 0 then d->symbol.location = i;
				else if d->symbol.location ^= i
					then d->symbol.allocated ="1"b;
			q->element(1)=d;
			if s->symbol.general = null then s->symbol.general = q;
			if p1 ^= null then p1->element(2)=q;
			p1=q;
		end;

/* Use the parameters of the entry as templates to create parameter descriptors.  The
   parameter descriptors are processed as if they were in the same block as the
   parameter from which they were derived so that they will recieve the same defaults.  */

		do q = s->symbol.general repeat q->element(2) while(q^=null);
			q->element(1),d = copy_expression(q->element(1));
			d->symbol.param_desc = "1"b;
			d->symbol.parameter = "1"b;
			call declare(d);
		end;

/* Search the list of return values attached to the block node of the procedure and
   find a return value whose attributes match the attributes of the value returned
   by this entry.  If such a value is found, replace this return value with the  value
   already recorded in the block node.  If no such value can be found, record this return
   value in the block node.  When more than one return value is recorded in the block
   node an automatic integer variable is declared and a pointer to it is also recorded
   in the block node.  During semantic translation of an entry statement this automatic
   variable is assigned a number which identifies which return type is to be used
   on return from the procedure.  During semantic translation of the return statement
   code is generated to test the value of that automatic variable and assign the return
   value to the proper return parameter.	*/

/* If there is no return value, a null list element will be on the list
   of return values to represent that entry statement's "null" return value.	 */

		n = n+1;

		p = s->symbol.equivalence;

		do q = p->block.return_values repeat q->element(1) while(q^=null);
			if s->symbol.dcl_size = null
			then if q->element(2) = null
			     then goto allocate;	/* simply use this null list node */
			     else;

			else if compare_declaration((q->element(2)),(s->symbol.dcl_size),"0"b)
			     then do;
				p1 = q->element(2);
				if p1->symbol.location ^= n
				then	p1->symbol.allocated ="1"b;
				s->symbol.initial->statement.root->operator.operand(n) = p1->symbol.token;
				go to make_descr;
			     end;
		end;

		if p->block.return_values ^= null & p->block.return_count = null
		then	p->block.return_count = declare_integer(p);

		q = create_list(2);
		q->element(1) = p->block.return_values;
		p->block.return_values = q;
		q->element(2) = s->symbol.dcl_size;

		if s->symbol.dcl_size = null
		then goto allocate;

		s->symbol.dcl_size->symbol.location = n;

/* copy the return parameter's declaration to create a return descriptor that will be
   used as the return temporary when this entry is invoked.  */

make_descr:
		rv, s->symbol.dcl_size = copy_expression(s->symbol.dcl_size);
		rv->symbol.return_value = "1"b;
		rv->symbol.parameter = "0"b;
		if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
		then	if rv->symbol.structure & ^ rv->symbol.star_extents
			then	call set_star(rv);
			else;
		else	call declare(rv);

		if rv->symbol.star_extents
		then do;
			p -> block.why_nonquick.returns_star_extents = "1"b;
			p -> block.no_stack = "0"b;
		     end;
	end;

/* create prologue to allocate automatic variables with variable sizes.	*/

allocate:
	if s->symbol.auto
	then do;
		if s->symbol.word_size ^= null
		then do;
			p1 = s->symbol.word_size;

			if p1->node.type = operator_node
			then do;
				q=create_operator(assign,2);
				q->operator.operand(2)=s->symbol.word_size;
				q->operator.operand(1),s->symbol.word_size,p1 = declare_integer(b);
				p1->reference.symbol->symbol.c_dcl_size = max_offset_precision;
				p=create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
				p->statement.root=q;
			end;

			q=create_operator(allot_auto,2);
			q->operator.operand(2)=p1;
			q->operator.operand(1),
			s->symbol.reference->reference.qualifier=declare_pointer(b);
			p=create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
			p->statement.root=q;
		end;

		if(s->symbol.area|s->symbol.initialed)
		then	call expand_initial(s,null,null);
		go to exit;
	end;

/* parameters which appear in more than one position are accessed via an
   automatic pointer set by the entry.  All other parameters are accessed via a
   pointer valued operator whose 2nd operand is the parameter's position.	*/

	if s->symbol.parameter
	then do;
		if s->symbol.allocated
		then	q=declare_pointer(b);
		else do;
			q=create_operator(param_ptr,3);
			q->operator.operand(2) = declare_constant$integer(fixed(s->symbol.location));
			q->operator.operand(3) = b;
		end;

		s->symbol.reference->reference.qualifier=q;

		if s->symbol.packed
		then	if pl1_stat_$eis_mode
			then	s->symbol.reference->reference.fo_in_qual = "1"b;
			else do;
				p = create_operator(bit_pointer,2);
				p->operator.operand(2) = q;
				s->symbol.reference->reference.offset = p;
				s->symbol.reference->reference.units = bit_;
			end;

		return;
	end;


/* File constants are initialized by the prologue the
   first time it is executed in the process.	*/

	if s->symbol.file
	then	if s->symbol.constant
	then	call expand_initial(s,null,null);

/* packed based scalar variables are accessed via bit valued pointers and
   the bit offset contained in the pointer must be included as a term in the offset.  */

	if	s->symbol.based
	then if	s->symbol.packed
	then	if pl1_stat_$eis_mode
		then	s->symbol.reference->reference.fo_in_qual = "1"b;
		else do;
			q = create_operator(bit_pointer,2);
			s->symbol.reference->reference.offset = q;
			s->symbol.reference->reference.units = bit_;
		end;

exit:
	if s->symbol.auto & s->symbol.exp_extents
	then do;
		s -> symbol.block_node -> block.why_nonquick.auto_adjustable_storage = "1"b;
		s -> symbol.block_node -> block.no_stack = "0"b;
	     end;

/* if this is a return descriptor and no star extents where found then the storage class
   should be changed to temporary instead of return_value.  It is not possible to
   do this sooner as it will foul-up several programs that must be able to recognize
   return descriptors.  */

	if s->symbol.return_value & ^s->symbol.star_extents
	then	if s->symbol.structure
		then	call reset_ret_val(s);
		else do;
			s->symbol.return_value = "0"b;
			s->symbol.temporary = "1"b;
		end;


reset_ret_val:   proc(s);

dcl	(s,d) pointer;

	s->symbol.temporary="1"b;
	s->symbol.return_value="0"b;
	do d = s->symbol.son repeat d->symbol.brother while (d ^= null);
		call reset_ret_val(d);
	end;

	end reset_ret_val;


set_star:	proc(ps);

	/* propagates up star_extents in structure */

dcl	(ps,d,s) ptr;

	s = ps;
	do d = s->symbol.son repeat d->symbol.brother while(d ^= null);
	     call set_star(d);
	     s->symbol.star_extents = s->symbol.star_extents | d->symbol.star_extents;
	     end;

	end set_star;


declare_label_array:	proc;

	/* prepares a vector of statement pointers for a label array */

dcl	(lae,next,vector) ptr;
dcl	inc fixed bin;

	inc = 1 - s -> label.low_bound;
	vector = create_list(s -> label.high_bound - s -> label.low_bound + 1);

	do lae = s -> label.statement repeat next while(lae ^= null);
	     vector -> element(lae -> label_array_element.value + inc) = lae -> label_array_element.statement;
	     next= lae -> label_array_element.next;
	     call free_node(lae);
	     end;

	s -> label.statement = vector;

	end;


%include semant;
%include symbol;
%include block;
%include reference;
%include list;
%include operator;
%include statement;
%include op_codes;
%include statement_types;
%include nodes;
%include token;
%include token_types;
%include declare_type;
%include boundary;
%include label;
%include label_array_element;
%include system;
	end declare;
