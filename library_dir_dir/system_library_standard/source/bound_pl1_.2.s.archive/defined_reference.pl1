/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


defined_reference: proc(blk,stmnt,input_tree,subs,s,context) returns(ptr);

/* Modified 780713 by PG for unsigned */
/* Modified 790419 by PCK to implement 4-bit decimal */

dcl	(blk,stmnt,tree,subs,new_subs,p,s,br,bs,a,input_tree,off,father_s) ptr;
dcl	(t,k,n,i,nsubs,ndims,nsubs_minus_ndims) fixed bin(15);
dcl	(father_dims,listdims(128)) fixed bin(15);
dcl	(co,coff) fixed bin(31);
dcl	cunits fixed bin(3);

dcl	op_table(4) bit(9) aligned initial(mod_bit,""b,mod_byte,mod_half);
dcl	dims_processed bit(1) aligned;

dcl	pl1_stat_$eis_mode bit(1) aligned ext static,
	pl1_stat_$check_ansi bit(1) aligned ext static,

	pl1_stat_$root external static ptr;

dcl	(addr,null,fixed,string,substr) builtin;

	this_context = "0"b;
	t,k,n = 0;
		/* t is used by string_overlay: it says bit/char
		   k is the number of asterisks observed by isubs_or_stars
		   n is the number of the last isub or asterisk
		        observed by isubs_or_stars
		*/

	tree = copy_expression((input_tree));
	br = copy_expression(s->symbol.equivalence);

	father_s=s;
	do while(father_s->symbol.member);
	father_s=father_s->symbol.father;
	end;

	if father_s->symbol.dimensioned then father_dims=father_s->symbol.array->array.number_of_dimensions;
	else father_dims=0;




	if ^lookup((s->symbol.block_node),stmnt,br,bs,this_context)
	then	if br->node.type = token_node
		then do;
			call semantic_translator$error(77,br);
			bs = create_symbol((pl1_stat_$root->block.son),br,by_implication);
			call declare(bs);
			bs->symbol.allocate = "1"b;
		end;
		else	call print(175);
	else	if br->node.type=reference_node	/* lookup replaces the symbol field */
		then do;
			br->reference.symbol = bs->symbol.token;
			br->reference.length = copy_expression(s->symbol.equivalence->reference.length);
			br->reference.offset = copy_expression(s->symbol.equivalence->reference.offset);
			br->reference.qualifier = copy_expression(s->symbol.equivalence->reference.qualifier);
		end;

	if bs->node.type ^= symbol_node then call print(176);
	if pl1_stat_$check_ansi
	then	if bs->symbol.based
		then	call semantic_translator$error(173,s);
	if bs->symbol.defined | bs->symbol.constant then call print(176);

	/* the following line is present so that defined variables can
	    be processed by the code generator program which generates the
	     run-time symbol table */

	s -> symbol.reference -> reference.qualifier = bs -> symbol.reference;
	call propagate_bit(bs,aliasable_bit);
	if def_context.left_side then call propagate_bit(bs,set_bit);

	a = s->symbol.array;
	if a ^= null
	then ndims = a->array.number_of_dimensions;
	else ndims = 0;

	dims_processed = "0"b;
	if subs ^= null
	then 	do;
		nsubs = subs->list.number;
		if s->symbol.dimensioned
		then 	do;
			tree->reference.array_ref = "0"b;
			if nsubs < ndims then call print(81);
			if nsubs > ndims & ^s->symbol.entry then call print(82);
			if ^isubs_or_stars()
			then 	do;
				tree = subscripter(blk,stmnt,tree,subs,s);
				dims_processed = "1"b;
				end;
			end;
		else if isubs_or_stars() then call print(183);
		end;
	else	do;
		nsubs = 0;
		if isubs_or_stars() & ^s->symbol.dimensioned then call print(183);
		end;


/* add the offsets of the defined reference to those of the base */

	if father_s->symbol.position
	then do;

		if n>0 then call print(177);	/* isubs_or_stars AND position */
		if ^(string_overlay(father_s)&string_overlay(bs)) then call print(178);
		father_s->symbol.overlayed, s->symbol.overlayed = "1"b;
		p = father_s -> symbol.initial;		/* the position value */
		if p -> node.type = token_node
		then if p -> token.type & is_arith_constant
		     then do;
			co = token_to_binary(p) - 1;
			p = null;
			goto l1;
			end;

		co = 0;
		p = copy_expression((p));

		this_context = "0"b;
		a = create_operator(sub,3);
		a->operand(2) = p;
		a->operand(3) = declare_constant$integer(1);
		p = a;
		p = expression_semantics((s->symbol.block_node),stmnt,p,this_context);
		if def_this_context.aggregate then call print(185);
		p = convert(p,integer_type);
l1:
		off = tree->reference.offset;
		coff = tree->reference.c_offset;
		cunits = tree->reference.units;

		call offset_adder(off,coff,cunits,(tree->reference.modword_in_offset),p,co,(t),"0"b,tree->reference.fo_in_qual);

		tree->reference.offset = off;
		tree->reference.c_offset = coff;
		tree->reference.units = cunits;
		tree->reference.modword_in_offset = "0"b;
	end;

	else	do;
		if match(father_s,bs) then goto build_ref;
		if n>0 then call print(179);	/* isubs_or stars AND non-matching */
		if string_overlay(father_s) & string_overlay(bs)
		     then father_s->symbol.overlayed, s->symbol.overlayed = "1"b;
		     else call print(179);
	end;

/* build the return reference */

build_ref:
	if pl1_stat_$check_ansi
	then	if s->symbol.varying
		then	call semantic_translator$error(174,s);

	this_context = "0"b;
	def_this_context.evaluate_offset = "1"b;
	def_this_context.f_offset_to_be_added = "1"b;
	br = expression_semantics((s->symbol.block_node),stmnt,br,this_context);
	if bs->symbol.reference=br then br=copy_expression((br));
	if br->reference.units ^= 0 
	then do;
		off = tree->reference.offset;
		coff = tree->reference.c_offset;
		cunits = tree->reference.units;

		call offset_adder(off,coff,cunits,(tree->reference.modword_in_offset),
			        (br->reference.offset),(br->reference.c_offset),(br->reference.units),(br->reference.modword_in_offset),
			        tree->reference.fo_in_qual);

		tree->reference.offset = off;
		tree->reference.c_offset = coff;
		tree->reference.units = cunits;
		tree->reference.modword_in_offset = "0"b;
	end;

	tree->reference.qualifier = br;
	tree->reference.fo_in_qual = br->reference.fo_in_qual;
	tree->reference.defined_ref = "1"b;
	tree->reference.shared,br->reference.shared = "0"b;
	tree->reference.ref_count,br->reference.ref_count = 1;

	if ^dims_processed
	then	do;
		if nsubs > ndims
		then	do;
			nsubs_minus_ndims=nsubs-ndims;
			new_subs = create_list(nsubs_minus_ndims);
			do i = 1 to nsubs_minus_ndims;
				new_subs->element(i) =subs->element(i);
			end;
			subs=new_subs;
			end;
		else	subs=null;
		end;

	br->reference.offset = null;
	br->reference.units,br->reference.c_offset = 0;
	br->reference.modword_in_offset = "0"b;

	/* since br represents an address, prevent it from being commoned by the optimizer */

	br->reference.inhibit = "1"b;

	if	^pl1_stat_$eis_mode
	then if	tree->reference.offset ^= null
	then if	tree->reference.units < word_
	then do;
		p = tree->reference.offset;
		if p->node.type=operator_node
		then	if p->operator.op_code=mod_bit
			|  p->operator.op_code=mod_byte
			|  p->operator.op_code=mod_half
			then	goto ret;

		p = create_operator(op_table(tree->reference.units),3);
		p->operand(3) = tree->reference.offset;
		tree->reference.offset = p;
	end;

ret:
	return(tree);

/* subroutine to match the defined item's father against its base to determine the
   suitability for isub or simple defining.  */

match: proc(a,b) returns(bit(1) aligned);

dcl	(a,b,p,q) ptr;

	/* expanded 4-18-73 PAB for number of member dimensions */
	/* the extents should perhaps be checked at compile-and-or-run-time */

	dcl (pp,qq) ptr;


	if string(a->symbol.data_type)^=string(b->symbol.data_type)
	then	goto fail;

	if a->symbol.aligned ^= b->symbol.aligned
	then	goto fail;

	if a -> symbol.unsigned ^= b -> symbol.unsigned
	then	go to fail;

	if a->symbol.c_dcl_size ^= b->symbol.c_dcl_size
	then do;
		if a->symbol.array=null
		then	goto fail;

		if a->symbol.array->array.c_element_size^=b->symbol.c_dcl_size
		then	goto fail;
	end;

	if a->symbol.scale ^= b->symbol.scale
	then	goto fail;

	if a->symbol.structure
	then do;
		p = a->symbol.son;
		q = b->symbol.son;

		do while(p^=null);
			if q = null then go to fail;
	
			pp=p->symbol.array;
			qq=q->symbol.array;
			if (pp^=null | qq^=null )
			then do;
				if qq=null
				then	goto fail;

				if pp=null
				then	if ^p->symbol.structure
					then	if qq->array.own_number_of_dimensions^=0
						then	goto fail;
						else	;
					else	;
				else	if pp->array.own_number_of_dimensions
					^= qq->array.own_number_of_dimensions
					then	goto fail;
			end;
	
			if ^match(p,q) then go to fail;
			p = p->symbol.brother;
			q = q->symbol.brother;
		end;

		if q ^= null then go to fail;
	end;

	return("1"b);

fail:
	return("0"b);
	end match;

/*  */
%include string_overlay;

/* subroutine to find or find and replace all Isubs or asterisks with subscripts from the defined reference */

isubs_or_stars: proc returns(bit(1) aligned);

dcl	p ptr;
dcl	i fixed bin(15);

		/* extended 4-18-73 PAB
		   to check that enough asterisks or isubs appear
		   and to check that the two are not mixed
		   and to check that the asterisks appear only at level 1 */


	n = 0;

	do i=1 to father_dims;
	listdims(i)=0;
	end;


	if br->node.type=reference_node
	then do;
		p = br->reference.offset;
		if p^=null
		then do i = 1 to p->list.number;
			call find(p->list.element(i));
		end;
	end;

	if n=0 then return("0"b);
	if father_dims=0 then return("1"b);		/* no isubs or asterisks expected */

	if k>0 then if k^= father_dims then call print(181);	/* asterisks appear - there must be exactly enough of them */
	if k>0 then
		do i=1 to father_dims;		/* asterisks appear - no isubs may appear */
		if listdims(i)^=0 then call print(181);
		end;
	else	do i=1 to father_dims;		/* no asterisks appear - exactly enough isubs must appear */
		if listdims(i)=0 then call print(181);
		end;

	return("1"b);

find: proc(p);

dcl	p ptr unal,
	(e,q) ptr;
dcl	i fixed bin(15);
dcl	recursif fixed bin(15);

	recursif=1;
	goto find_common;

find_r:	entry(p);		/* recursive entrypoint - not allowed to "see" asterisks */
	recursif=2;

find_common:
	e = p;

	if e = null then return;

	if e->node.type = operator_node
	then do;
		do i = 1 to e->operator.number;
			call find_r(e->operand(i));
		end;
		return;
	end;

	if e->node.type = reference_node
	then do;
		call find_r(e->reference.qualifier);
		call find_r(e->reference.offset);
		call find_r(e->reference.length);
		return;
	end;

	if e->node.type=list_node
			/* subscripts and arguments in expressions in the
			   subscripts of the base reference appear as
			   refp->ref.offset->list   */
	then do;
		do i=1 to e->list.number;
		call find_r(e->list.element(i));
		end;
		return;
	end;

	if e->node.type = token_node
	then do;
		if e->token.type = asterisk
			then do;
				if recursif=2 then return;	/* don't recognize
							   an asterisk except at
							   level 1 */
				k = k+1;
				n = k;
			     end;
			else do;
				if e->token.type ^= isub then return;
				n = decbin(substr(e->token.string,1,e->token.size-3));
				listdims(n)=1;
				s->symbol.isub = "1"b;
			     end;

		if n > father_dims then call print(181);
		if substr(stmnt->statement.prefix,7,1)  /* subscriptrange */
		|  subs=null
		then do;
			q = a->array.bounds;
			do i = 1 to n-1;
			q = q->bound.next;
			end;
			if q->bound.lower=null
			then	q->bound.lower = declare_constant$integer((q->bound.c_lower));
			if subs=null
			then	e = q->bound.lower;
			else do;
				if q->bound.upper = null
				then q->bound.upper = declare_constant$integer((q->bound.c_upper));
				e = create_operator(bound_ck,4);
				e->operand(1) = declare_temporary(integer_type,default_fix_bin_p,0,null);
				e->operand(2) = subs->list.element(subs->list.number+1-n);
				e->operand(3) = q->bound.lower;
				e->operand(4) = q->bound.upper;
			end;
		end;
		else	e = subs->list.element(subs->list.number+1-n);

		/* if isub subscripts are not processed now they will be found	*/
		/* hanging off of the base-reference as tokens, and processed within	*/
		/* the block the base reference is declared in, rather than the 	*/
		/* block in which they are found!!! (bug1395) -- RHS 8/75		*/

		/* isub must be converted to integer!! -- RAB 6/77		*/

		e = expression_semantics(blk,stmnt,e,this_context);
		e = convert$to_integer(e,integer_type);
	end;

	p = e;

	end find;

	end isubs_or_stars;

/* subroutine to print an error message and abort this statement.  */

print: proc(m);

dcl	m fixed bin(15);

	call semantic_translator$abort(m,s);
	end print;

%include semant;
%include symbol;

%include symbol_bits;

%include block;

%include reference;
%include semantic_bits;

%include token;

%include statement;

%include array;

%include list;

%include operator;

%include op_codes;

%include token_types;

%include nodes;

%include system;

%include declare_type;

%include boundary;

	end defined_reference;
