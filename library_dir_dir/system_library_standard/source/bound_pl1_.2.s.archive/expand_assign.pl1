/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287), audit(86-07-16,Mabey),
     install(86-07-28,MR12.0-1105):
     Bug fixes for the MR12.0 release of the compiler.
  2) change(87-04-15,RWaters), approve(87-04-15,MCR7635), audit(87-04-28,Huen),
     install(87-05-21,MR12.1-1033):
     Fix bug #2124
  3) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
     install(89-09-19,MR12.3-1068):
     Fix bug 1819.
                                                   END HISTORY COMMENTS */


/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
expand_assign:
     proc (blk, stmnt, input_tree, context, agg_ref) returns (ptr);

/* Modified 780619 by PG for unsigned */
/* Modified 780814 by RAB to fix 1743 */
/* Modified 790806 by RAB to fix 1841 (return((*) bit(*)) gets FATAL ERROR 310) */
/* Modified 790807 by RAB to fix 1847 (bad descriptor built when char(*) varying
   promoted to array.  Bug caused by maker not setting symbol.exp_extents) */
/* Modified: 17 Mar 1980 by PCK to implement by name assignment */
/* Modified 830427 BIM to not check refer extents when the assignment */
/*          is not an array assignment. */
/* Modified 850607 MM to fix 2109 by name assignments to retain the token */
/*	  pointer from the original structure in any temporary structures */
/*	  that are generated in the assignment. */
/* Modified 871504 RW to fix 2124 incompatible attributes in compiler variable */
/* Modified 880101 RW diagnose passing a label array as a parameter */

dcl      (agg_ref, blk, stmnt, tree, input_tree, a, b, s, sa, sb, t, p, q, qual, aqual, bqual) ptr,
         (a_for_return, sa_for_return) ptr,
         image ptr init (null);

dcl      k fixed bin (15),				/* used by fill_desc and descendants */
         constant fixed bin,
         (have_varying, modified) bit (1) aligned,
         (cross_section, doing_return, no_data_type, interleaved) bit (1) init ("0"b) aligned;

dcl      based_integer fixed bin (15) based;

dcl      pl1_stat_$locator (128) ptr ext static;
dcl      pl1_stat_$index fixed bin (15) ext static;

dcl      (addr, string, fixed, hbound, null, substr) builtin;
%page;
	s = stmnt;
	tree = input_tree;

	a = tree -> operand (1);
	b = tree -> operand (2);

	if a -> node.type ^= reference_node then
	     if a -> node.type = operator_node then
		if a -> op_code = loop | a -> op_code = join then
		     goto infix;
		else
		     call semantic_translator$abort (90, null);
	     else
		call semantic_translator$abort (90, null);

	sa = a -> reference.symbol;

	if sa -> node.type ^= symbol_node then
	     call semantic_translator$abort (91, null);

	if sa -> symbol.constant then
	     call semantic_translator$abort (91, null);

	if a -> reference.array_ref then do;
	     if sa -> symbol.array -> array.interleaved then
		interleaved = "1"b;

	     if a -> reference.offset ^= null then
		if a -> reference.offset -> node.type = list_node then
		     cross_section = "1"b;
	end;

	if ^a -> reference.array_ref & ^sa -> symbol.structure & string (sa -> symbol.data_type) ^= "0"b then
	     call semantic_translator$abort (93, b);

	if b -> node.type
	     =
	     token_node
	     /* we need a symbol node for use now but real processing of this	*/
	     /* token node will be done when op_semantics gets it later.		*/ then
	     b = convert (b, decoded_type (fixed (b -> token.type, 9)));

	if b -> node.type = reference_node then do;
	     sb = b -> reference.symbol;
	     qual = b -> reference.qualifier;

	     if b -> reference.array_ref then do;

		if sb -> node.type = label_node then	/* passing a label array as a prarmeter */
		     call semantic_translator$abort (83, b);
		else if sb -> node.type ^= symbol_node then
		     call semantic_translator$abort (195, null);
						/* somewhat inapropriate, but it shouldnt happen anyway */

		if b -> reference.offset ^= null then
		     if b -> reference.offset -> node.type = list_node then
			cross_section = "1"b;

		if sb -> symbol.array -> array.interleaved then
		     interleaved = "1"b;
	     end;
	end;

	if ^def_context.RHS_aggregate then
	     goto check_context;

	if b -> node.type ^= reference_node then
	     if b -> op_code = loop | b -> op_code = join then
		sb, qual = null;
	     else do;

/* expression is an aggregate-valued function reference.
			   This has been pulled out into its own statement, so
			   we can replace the operator with its result in this
			   tree. */

		tree -> operand (2), b = b -> operand (1);
		sb = b -> reference.symbol;
	     end;

	if stmnt -> statement.LHS_in_RHS then do;
	     stmnt -> statement.LHS_in_RHS = "0"b;

/*   a(*) = . . .   */
	     s = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));

/*   t0 = b   */
	     q = create_operator (assign, 2);
	     p = create_symbol (null, null, by_compiler);
	     p -> symbol.temporary = "1"b;
	     q -> operand (1) = p -> symbol.reference;
	     q -> operand (2) = b;

	     s -> statement.root = expand_assign (blk, s, q, context, image);

/*   a = t0   */
	     b, tree -> operand (2) = image;
	     sb = b -> reference.symbol;
	end;

/* If the left hand side (LHS) is a temporary with no data type, replace it with a
   temporary whose type and extents are given by the right hand side (RHS).  */

	if string (sa -> symbol.data_type) = "0"b then do;
	     no_data_type = "1"b;

/*   to = . . .   */
	     if sb = null then
		sb = declare_expression (b, null, 1);

	     call maker (sb, sb, sa, "1"b, 1, b);

	     tree -> operand (1), agg_ref, a = copy_expression (sa -> symbol.reference);

	     if b -> node.type = reference_node then
		a -> reference.array_ref = b -> reference.array_ref;
	end;

check_context:
	if def_context.arg_list | def_context.return then do;
	     if ^sa -> symbol.star_extents then do;
		qual = a -> reference.qualifier;
		call maker (sa, sa, t, "0"b, 1, null);
	     end;
	     else do;
		if b -> node.type = operator_node then
		     if b -> operator.op_code ^= loop & b -> operator.op_code ^= join then do;

/* we are promoting scalar expression to aggregate (fixes 1743) */

			b = b -> operand (1);
			sb = b -> reference.symbol;
		     end;

		if sb = null then
		     sb = declare_expression (b, null, 1);


		doing_return = def_context.return;
		call maker (sa, sb, t, "0"b, 1, b);	/* pass sa to provide template for the temporary, 
						   sb to fill in star_extents info.		*/
	     end;

	     a_for_return = a;
	     sa_for_return = sa;

	     tree -> operand (1), agg_ref, a = copy_expression (t -> symbol.reference);

	     sa = t;

	     a -> reference.shared = "0"b;
	     a -> reference.ref_count = 2;

	     s = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
	end;
	else
	     s = stmnt;

	if ^def_context.RHS_aggregate | def_context.by_name_assignment then
	     goto infix;

	if b -> node.type ^= reference_node | cross_section | interleaved then
	     goto infix;

	if ^compare_declaration (a, (b -> reference.symbol), "0"b) then
	     goto infix;


	if sa -> symbol.defined | sb -> symbol.defined then
	     goto infix;

	if a -> reference.array_ref ^= b -> reference.array_ref then
	     goto infix;

	if a -> reference.array_ref then
	     if substr (stmnt -> statement.prefix, 7, 1) then
		if sa -> symbol.refer_extents then do;
		     aqual = a -> reference.qualifier;
		     bqual = b -> reference.qualifier;
		     call check_refers (sa, sb);
		end;

	call process_offset (a);
	call process_offset (b);

	tree = make_copy (a, b);

	goto ret;

infix:
	tree = expand_infix (blk, s, tree, context);

	goto ret;
%page;
ret:
	if def_context.arg_list then do;
	     s -> statement.root = tree;
	     return (t -> symbol.reference);
	end;

	if def_context.return then do;
	     s -> statement.root = tree;

	     if sa_for_return -> symbol.star_extents then do;
		k = 0;
		call fill_desc (sa);

/* since the cg ignores the length expr when
			   compiling the return_words or return_bits
			   operators, and since prepare_operand expects
			   to see processed length exprs or no length exprs,
			   null the length expr */

		a -> reference.length = null;

		return (a);
	     end;

	     p = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
	     p -> statement.root, tree = make_copy (a_for_return, a);
	end;

	return (tree);
%page;
process_offset:
     proc (pt);

/* processes raw offset exprs */

dcl      (pt, a, sa, p) ptr;
dcl      i fixed bin;

	a = pt;

/* since the code generator ignores the length expr when compiling
	   the copy operators, and since prepare_operand expects to see
	   either processed length exprs or null length exprs, null the
	   length expr */

	a -> reference.length = null;

/* now, process the offset expr , if any */

	if a -> reference.offset ^= null then
	     if a -> reference.offset -> node.type = list_node then do;
		p = a -> reference.offset;

		do i = 1 to p -> list.number;
		     if p -> element (i) -> node.type = token_node then
			if p -> element (i) -> token.type = asterisk then
			     goto infix;
		end;

		if a -> reference.qualifier ^= null then do;
		     pl1_stat_$index = pl1_stat_$index + 1;
		     if pl1_stat_$index > hbound (pl1_stat_$locator, 1) then
			call semantic_translator$abort (70, null);
		     pl1_stat_$locator (pl1_stat_$index) = a;
		end;

		sa = a -> reference.symbol;
		a -> reference.offset = copy_expression (sa -> symbol.reference -> reference.offset);
		a = subscripter (blk, s, a, p, sa);

		if a -> reference.offset ^= null then do;
		     a -> reference.offset = expression_semantics (blk, s, (a -> reference.offset), "0"b);
		     a -> reference.offset = convert$to_integer ((a -> reference.offset), integer_type);

		     call simplify_offset (a, "0"b);
		end;

		if a -> reference.qualifier ^= null then
		     pl1_stat_$index = pl1_stat_$index - 1;
	     end;

     end;
%page;
/* subroutine to check that refer array extents are compatable.   */

check_refers:
     proc (asym, bsym);

dcl      (asym, bsym, anext, bnext, abound, bbound, p, q) ptr;
dcl      (own_bounds, processed_bounds) fixed bin;

	if asym -> symbol.array ^= null then do;
	     processed_bounds = 0;
	     bbound = bsym -> symbol.array -> array.bounds;
	     own_bounds = asym -> symbol.array -> own_number_of_dimensions;

	     do abound = asym -> symbol.array -> array.bounds repeat abound -> bound.next
		while (processed_bounds < own_bounds);
		if is_refer ((abound -> bound.upper)) then
		     if is_refer ((abound -> bound.lower)) then do;
			p = subtract_bounds (abound);
			q = subtract_bounds (bbound);
			call make_check_stmnt (p, q);
		     end;
		     else
			call make_check_stmnt (copy_expression (abound -> bound.upper),
			     copy_expression (bbound -> bound.upper));
		else if is_refer ((abound -> bound.lower)) then
		     call make_check_stmnt (copy_expression (abound -> bound.lower),
			copy_expression (bbound -> bound.lower));
		processed_bounds = processed_bounds + 1;
		bbound = bbound -> bound.next;
	     end;
	end;

	bnext = bsym -> symbol.son;

	do anext = asym -> symbol.son repeat anext -> symbol.brother while (anext ^= null);
	     call check_refers (anext, bnext);
	     bnext = bnext -> symbol.brother;
	end;

     end;
%page;
/* subroutine to test if a node is a refer operator node.   */

is_refer:
     proc (p) returns (bit (1) aligned);

dcl      p ptr;

	if p ^= null then
	     if p -> node.type = operator_node then
		if p -> operator.op_code = refer then
		     return ("1"b);

	return ("0"b);

     end;
%page;
/* subroutine to create an operator that subtracts the lower bound node from the upper bound node.   */

subtract_bounds:
     proc (p) returns (ptr);

dcl      (p, r) ptr;

	r = create_operator (sub, 3);
	r -> operator.operand (2) = copy_expression (p -> bound.upper);
	r -> operator.operand (3) = copy_expression (p -> bound.lower);
	return (r);

     end;
%page;
/* subroutine to create a bound_ck operator.   */

make_check_stmnt:
     proc (p, q);

dcl      (p, q, r) ptr;

	r = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
	r -> statement.root = create_operator (bound_ck, 4);
	call refer_extent (p, aqual);
	call refer_extent (q, bqual);
	r -> statement.root -> operator.operand (2) = p;
	r -> statement.root -> operator.operand (3) = q;
	r -> statement.root -> operator.operand (4) = copy_expression ((q));
	r -> statement.root = expression_semantics (blk, r, (r -> statement.root), "0"b);
     end;
%page;
/* subroutine to create assignments that fill in the descriptor of the left side.  */

fill_desc:
     proc (sp);

dcl      (sp, s, b) ptr;

	s = sp;

	call fill (s);

	if s -> symbol.dimensioned then do;
	     do b = s -> symbol.array -> array.bounds repeat b -> bound.next while (b ^= null);
		call fill (b);
		k = k + 3;
	     end;
	end;

	do b = s -> symbol.son repeat b -> symbol.brother while (b ^= null);
	     k = k + 1;
	     call fill_desc (b);
	end;
%page;
fill:
	proc (pt);

dcl      (pt, p, r, q, dr, size, d_template) ptr;
dcl      i fixed bin (15);

%include pl1_descriptor;

	     p = pt;

	     if p -> node.type = symbol_node then do;
		d_template =
		     sa_for_return -> symbol.descriptor -> reference.symbol -> symbol.descriptor -> symbol.initial;
		if s -> symbol.bit | s -> symbol.char then do;
		     r = copy_expression (p -> symbol.reference);
		     r = expression_semantics (blk, stmnt, r, context);
		     if r -> reference.varying_ref then do;
			if k > 0 | r -> reference.array_ref then do;
			     if p -> symbol.dcl_size = null then
				size = declare_constant$integer ((p -> symbol.c_dcl_size));
			     else do;
				size = copy_expression (p -> symbol.dcl_size);
				if p -> symbol.refer_extents then
				     call refer_extent (size, (a_for_return -> reference.qualifier));
				size = expression_semantics (blk, stmnt, size, "0"b);
			     end;
			end;
			else do;
			     size = create_operator ((length_fun), 2);
			     size -> operand (1) = declare_temporary (integer_type, max_length_precision, 0, null);
			     size -> operand (2) = r;
			end;
		     end;
		     else if r -> reference.length = null then
			size = declare_constant$integer ((r -> reference.c_length));
		     else
			size = r -> reference.length;
		     q = create_operator (make_desc, 3);
		     q -> operand (3) = size;
		     q -> operand (2) = declare_constant$desc (string (d_template -> descriptor (k).bit_type));
		end;
		else do;
		     q = create_operator (assign, 2);
		     q -> operand (2) = declare_constant$desc (string (d_template -> descriptor (k)));
		end;
		q -> operand (1), r = copy_expression (sa_for_return -> symbol.descriptor);
		r -> reference.c_offset = k;
		r -> reference.shared = "0"b;
		r -> reference.ref_count = 1;
		r = expression_semantics (blk, stmnt, r, context);
		dr = create_statement (assignment_statement, (stmnt -> statement.back), null,
		     (stmnt -> statement.prefix));
		dr -> statement.root = q;
	     end;
	     else do;
		if p -> bound.lower = null then
		     p -> bound.lower = declare_constant$integer ((p -> bound.c_lower));
		if p -> bound.upper = null then
		     p -> bound.upper = declare_constant$integer ((p -> bound.c_upper));

		i = 0;
		do r = p -> bound.lower, p -> bound.upper, p -> bound.desc_multiplier;
		     i = i + 1;
		     q = create_operator (assign, 2);
		     q -> operand (1), dr = copy_expression (sa_for_return -> symbol.descriptor);
		     dr -> reference.units = word_;
		     dr -> reference.c_offset = k + i;
		     r = copy_expression ((r));
		     if s -> symbol.refer_extents then
			call refer_extent (r, (a_for_return -> reference.qualifier));
		     q -> operand (2) = expression_semantics (blk, stmnt, r, context);
		     dr = create_statement (assignment_statement, (stmnt -> statement.back), null,
			(stmnt -> statement.prefix));
		     dr -> statement.root = q;
		end;
	     end;

	end fill;

     end fill_desc;
%page;
/* subroutine to create a copy operator.  */

make_copy:
     proc (a, b) returns (ptr);

dcl      (a, b, sb, p, q, ref, arrayp) ptr;
dcl      opcode bit (9) aligned;

/* Because get_array_size pads out the array element size if each
	   element must start on a > word_ boundary, a dangerous anomaly
	   could arise if the target is a nondimensioned structure while
	   the source is an array element.  Therefore, in such a case
	   the size of the nondimensioned structure must be used for
	   the assignment rather than the source size.  This fixes bug
	   1500.  */

	if b -> reference.symbol -> symbol.dimensioned & ^a -> reference.symbol -> symbol.dimensioned then
	     ref = a;
	else
	     ref = b;

	sb = ref -> reference.symbol;

	if sb -> symbol.dimensioned then
	     arrayp = sb -> symbol.array;
	else
	     arrayp = null;

	if sb -> symbol.packed then
	     opcode = copy_string;
	else
	     opcode = copy_words;

	if arrayp ^= null & ^ref -> reference.array_ref then
	     if sb -> symbol.packed then
		if arrayp -> array.element_size_bits = null then
		     p = declare_constant$integer ((arrayp -> array.c_element_size_bits));
		else
		     p = arrayp -> array.element_size_bits;
	     else if arrayp -> array.element_size = null then
		p = declare_constant$integer ((arrayp -> array.c_element_size));
	     else
		p = arrayp -> array.element_size;

	else if sb -> symbol.packed then
	     if sb -> symbol.bit_size = null then
		p = declare_constant$integer ((sb -> symbol.c_bit_size));
	     else
		p = sb -> symbol.bit_size;
	else if sb -> symbol.word_size = null then
	     p = declare_constant$integer ((sb -> symbol.c_word_size));
	else do;
	     p = sb -> symbol.word_size;
	     if sb -> symbol.temporary then
		sb -> symbol.word_size = expression_semantics (blk, stmnt, copy_expression ((p)), "0"b);
	end;

	this_context = "0"b;
	p = copy_expression ((p));
	if sb -> symbol.refer_extents then
	     call refer_extent (p, (b -> reference.qualifier));
	p = expression_semantics (blk, stmnt, p, this_context);

	call simplify_expression (p, constant, modified);
	if modified then
	     p = declare_constant$integer ((constant));

	q = create_operator (opcode, 3);
	q -> operand (1) = a;
	q -> operand (2) = b;
	q -> operand (3) = p;

	return (q);

     end make_copy;
%page;
/* subroutine to make a source-like declaration of a temporary.  */

maker:
     proc (t, e, s, given, level_number, er);

dcl      (s, p, q, f, a, r, t1, e1, s1, eb, subs) ptr;
dcl      (t, e) ptr;				/* t points to the param_desc (the target) symbol, e points to the expression symbol */
dcl      er ptr;					/* er points to the expression reference or is null */
dcl      (n, i, level_number, sdims) fixed bin (15);
dcl      (given, refer_extents, have_subs, ignore_e_array) aligned bit (1);

	n = 0;
	ignore_e_array, have_subs = "0"b;
	if ^given then
	     s = create_symbol (blk, null, by_compiler);
	string (s -> symbol.data_type) = string (t -> symbol.data_type);
	string (s -> symbol.misc_attributes) = string (t -> symbol.misc_attributes);
	s -> symbol.star_extents, s -> symbol.member, s -> symbol.external, s -> symbol.initialed = "0"b;

	refer_extents = e -> symbol.refer_extents;

	if t -> symbol.array ^= null then
	     if level_number = 1 then do;
		n, sdims = t -> symbol.array -> array.number_of_dimensions;
		if er ^= null then
		     if er -> node.type = reference_node then
			if ^er -> reference.array_ref then
			     if t = e then
				n, sdims = 0;
			     else
				ignore_e_array = "1"b;
			else if er -> reference.offset ^= null then
			     if er -> reference.offset -> node.type = list_node then do;
				subs = er -> reference.offset;
				have_subs = "1"b;
				sdims = 0;
			     end;
	     end;

	     else
		n, sdims = t -> symbol.array -> array.own_number_of_dimensions;

	s -> symbol.dimensioned = (n ^= 0);
	s -> symbol.block_node = t -> symbol.block_node;
	s -> symbol.general = t -> symbol.general;

	s -> symbol.pix = t -> symbol.pix;

	s -> symbol.c_dcl_size = t -> symbol.c_dcl_size;

	if t -> symbol.param_desc then
	     if t -> symbol.dcl_size ^= null then
		if t -> symbol.dcl_size -> node.type = token_node then
		     if t -> symbol.dcl_size -> token.type = asterisk then
			if e -> symbol.fixed | e -> symbol.float then do;
			     a = convert$from_builtin ((e -> symbol.reference),
				(substr (string (t -> symbol.attributes), 1, 36) & string_mask));
			     s -> symbol.c_dcl_size =
				a -> operator.operand (1) -> reference.symbol -> symbol.c_dcl_size;
			end;
			else
			     s -> symbol.c_dcl_size = e -> symbol.c_dcl_size;

	if doing_return then
	     if t -> symbol.dcl_size ^= null then
		if t -> symbol.dcl_size -> node.type = operator_node then
		     if t -> symbol.dcl_size -> operator.op_code = desc_size then
			if e -> symbol.fixed | e -> symbol.float then do;
			     a = convert$from_builtin ((e -> symbol.reference),
				(substr (string (t -> symbol.attributes), 1, 36) & string_mask));
			     s -> symbol.c_dcl_size =
				a -> operator.operand (1) -> reference.symbol -> symbol.c_dcl_size;
			end;
			else
			     s -> symbol.c_dcl_size = e -> symbol.c_dcl_size;

	if s -> symbol.entry then
	     s -> symbol.dcl_size = t -> symbol.dcl_size;
	else do;
	     s -> symbol.dcl_size = e -> symbol.dcl_size;
	     if s -> symbol.dcl_size ^= null then do;
		s -> symbol.exp_extents = "1"b;
		if s -> symbol.dcl_size -> node.type = token_node then
		     if s -> symbol.dcl_size -> token.type = dec_integer then
			s -> symbol.exp_extents = "0"b;
	     end;
	end;

	if refer_extents then do;
	     r = copy_expression (s -> symbol.dcl_size);
	     call refer_extent (r, qual);
	     s -> symbol.dcl_size = r;
	end;

	s -> symbol.scale = t -> symbol.scale;
	s -> symbol.level = level_number;

	if n ^= 0 then do;
	     s -> symbol.array, a = create_array ();
	     p = t -> symbol.array -> array.bounds;

	     if ^ignore_e_array then
		eb = e -> symbol.array;
	     else
		eb = null;

	     if eb ^= null then
		eb = eb -> array.bounds;

	     do i = 1 to n while (p ^= null);
		if have_subs then do;
		     if subs -> element (i) -> node.type ^= token_node then
			goto step;
		     if subs -> element (i) -> token.type ^= asterisk then
			goto step;

		     sdims = sdims + 1;
		end;

		q = create_bound ();
		q -> bound.c_lower = p -> bound.c_lower;
		q -> bound.c_upper = p -> bound.c_upper;

		q -> bound.lower = p -> bound.lower;
		q -> bound.upper = p -> bound.upper;

		if t -> symbol.param_desc then
		     if q -> bound.lower ^= null then
			if q -> bound.lower -> node.type = token_node then
			     if q -> bound.lower -> token.type = asterisk /* fill in star_extents from e */ then
				call use_eb;

		if doing_return then
		     if q -> bound.lower ^= null then
			if q -> bound.lower -> node.type = reference_node then
			     if q -> bound.lower -> reference.symbol -> node.type = symbol_node then
				if q -> bound.lower -> reference.symbol -> symbol.arg_descriptor then
				     call use_eb;

		if refer_extents then do;
		     r = copy_expression (q -> bound.lower);
		     call refer_extent (r, qual);
		     q -> bound.lower = r;
		     r = copy_expression (q -> bound.upper);
		     call refer_extent (r, qual);
		     q -> bound.upper = r;
		end;

		if q -> bound.lower ^= null then do;
		     call simplify_expression ((q -> bound.lower), constant, modified);

		     if modified then do;
			q -> bound.lower = null;
			q -> bound.c_lower = constant;
		     end;
		     else
			s -> symbol.exp_extents = "1"b;
		end;

		if q -> bound.upper ^= null then do;
		     call simplify_expression ((q -> bound.upper), constant, modified);

		     if modified then do;
			q -> bound.upper = null;
			q -> bound.c_upper = constant;
		     end;
		     else
			s -> symbol.exp_extents = "1"b;
		end;

		if a -> array.bounds = null then
		     a -> array.bounds = q;
		else
		     f -> bound.next = q;

		f = q;

step:
		p = p -> bound.next;

		if eb ^= null then
		     eb = eb -> bound.next;
	     end;

	     a -> array.own_number_of_dimensions = sdims;
	end;

	f = null;
	t1 = t -> symbol.son;
	e1 = e -> symbol.son;

	do while (t1 ^= null);
	     if e -> symbol.son = null then
		e1 = e;

	     if def_context.by_name_assignment /* Fixes 2109 */ then do;
		s1 = create_symbol (blk, (e1 -> symbol.token), by_compiler);
		call maker (t1, e1, s1, "1"b, level_number + 1, null);
	     end;
	     else
		call maker (t1, e1, s1, "0"b, level_number + 1, null);

	     s1 -> symbol.member = "1"b;
	     s1 -> symbol.father = s;
	     if f = null then
		s -> symbol.son = s1;
	     else
		f -> symbol.brother = s1;
	     f = s1;
	     t1 = t1 -> symbol.brother;
	     e1 = e1 -> symbol.brother;
	end;

	if level_number = 1 then do;
	     if s -> symbol.dcl_size ^= null then do;
		call simplify_expression ((s -> symbol.dcl_size), constant, modified);

		if modified then do;
		     s -> symbol.dcl_size = null;
		     s -> symbol.c_dcl_size = constant;
		end;
	     end;

	     s -> symbol.temporary = "1"b;
	     s -> symbol.position = "0"b;		/* fixes bug #2124 */
	     call declare (s);

	     if s -> symbol.word_size ^= null then do;	/* process aggregrate expression size for use by code generator */
		s -> symbol.word_size =
		     expression_semantics (blk, stmnt, copy_expression (s -> symbol.word_size), "0"b);

		call simplify_expression ((s -> symbol.word_size), constant, modified);

		if modified then do;
		     s -> symbol.word_size = null;
		     s -> symbol.c_word_size = constant;
		end;
	     end;
	end;


use_eb:
	proc;

	     if eb ^= null then do;
		q -> bound.lower = eb -> bound.lower;
		q -> bound.upper = eb -> bound.upper;
		q -> bound.c_lower = eb -> bound.c_lower;
		q -> bound.c_upper = eb -> bound.c_upper;
	     end;
	     else do;
		q -> bound.lower, q -> bound.upper = null;
		q -> bound.c_lower, q -> bound.c_upper = 1;
	     end;

	end use_eb;

     end maker;
%page;
/* subroutine to create a declaration which represents the result of an aggregate valued expression.  */

declare_expression:
     proc (tree, last, level_number) returns (ptr);

dcl      (tree, last, s, f, a, b) ptr;
dcl      (i, level_number) fixed bin (15);

	if tree = null then
	     return (null);

	if tree -> node.type = reference_node then do;
	     call maker ((tree -> reference.symbol), (tree -> reference.symbol), a, "0"b, level_number, null);
	     return (a);
	end;

	if tree -> node.type ^= operator_node then
	     return (tree);

	if tree -> operator.op_code = join then do;
	     b = null;
	     f = create_symbol (blk, null, by_compiler);
	     f -> symbol.structure = "1"b;

	     do i = 1 to tree -> operator.number;
		s = declare_expression ((tree -> operand (i)), null, level_number + 1);
		s -> symbol.father = f;
		s -> symbol.member = "1"b;

		if b ^= null then
		     b -> symbol.brother = s;
		else
		     f -> symbol.son = s;

		b = s;
	     end;

	     f -> symbol.level = level_number;

	     return (f);
	end;

	if tree -> operator.op_code = loop then do;
	     b = create_bound ();
	     b -> bound.next = last;
	     last = b;
	     b -> bound.c_lower = 1;
	     b -> bound.upper = tree -> operand (4);
	     if tree -> operand (4) -> node.type = reference_node then
		if tree -> operand (4) -> reference.symbol -> symbol.constant then do;
		     b -> bound.upper = null;
		     b -> bound.c_upper = tree -> operand (4) -> reference.symbol -> symbol.initial -> based_integer;
		end;

	     s = declare_expression ((tree -> operand (1)), last, level_number);

	     if last ^= null then do;
		s -> symbol.dimensioned = "1"b;
		s -> symbol.array = create_array ();
		s -> symbol.array -> array.bounds = last;

		s -> symbol.array -> array.own_number_of_dimensions =
		     s -> symbol.array -> array.own_number_of_dimensions + 1;
		s -> symbol.array -> array.number_of_dimensions = s -> symbol.array -> array.number_of_dimensions + 1;

		last = null;

		s -> symbol.reference -> reference.array_ref = "1"b;
	     end;

	     s -> symbol.array -> array.own_number_of_dimensions =
		s -> symbol.array -> array.own_number_of_dimensions + 1;
	     s -> symbol.array -> array.number_of_dimensions = s -> symbol.array -> array.number_of_dimensions + 1;

	     return (s);
	end;

	s = tree -> operand (1) -> reference.symbol;
	call maker (s, s, a, "0"b, level_number, null);

	if last ^= null & (s -> symbol.bit | s -> symbol.char) then do;
	     have_varying = "0"b;
	     a -> symbol.c_dcl_size = 0;
	     a -> symbol.dcl_size = size (tree);

	     if no_data_type & have_varying then do;
		a -> symbol.varying, a -> symbol.aligned = "1"b;
		a -> symbol.unaligned, a -> symbol.packed = "0"b;
	     end;
	     a -> symbol.exp_extents = "1"b;
	end;

	if a -> symbol.dcl_size ^= null then do;
	     call simplify_expression ((a -> symbol.dcl_size), constant, modified);

	     if modified then do;
		a -> symbol.dcl_size = null;
		a -> symbol.c_dcl_size = constant;
	     end;
	end;

	if level_number = 1 then do;
	     a -> symbol.temporary = "1"b;
	     call declare (a);

	     if a -> symbol.word_size ^= null then do;
		a -> symbol.word_size =
		     expression_semantics (blk, stmnt, copy_expression (a -> symbol.word_size), "0"b);
		call simplify_expression ((a -> symbol.word_size), constant, modified);

		if modified then do;
		     a -> symbol.word_size = null;
		     a -> symbol.c_word_size = constant;
		end;
	     end;
	end;

	return (a);

     end declare_expression;
%page;
/* subroutine to determine the size of a string array temporary.  */

size:
     proc (e) returns (ptr);

dcl      (e, s, q) ptr;
dcl      opcode bit (9) aligned;

	if e = null then
	     call semantic_translator$abort (195, null);

	if e -> node.type = reference_node then do;
	     s = e -> reference.symbol;
	     if s -> symbol.dcl_size = null then
		q = declare_constant$integer ((s -> symbol.c_dcl_size));
	     else
		q = s -> symbol.dcl_size;

	     if s -> symbol.varying then
		have_varying = "1"b;

	     q = copy_expression ((q));
	     this_context = "0"b;
	     if s -> symbol.refer_extents then
		call refer_extent (q, (e -> reference.qualifier));
	     q = expression_semantics (blk, stmnt, q, this_context);
	     return (q);
	end;

	if e -> node.type ^= operator_node then
	     call semantic_translator$abort (195, null);

	opcode = e -> operator.op_code;

	if opcode = cat_string then do;
	     q = create_operator (add, 3);
	     q -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
	     q -> operand (2) = size ((e -> operand (2)));
	     q -> operand (3) = size ((e -> operand (3)));
	     return (q);
	end;

	if opcode = or_bits | opcode = and_bits | opcode = xor_bits | opcode = bool_fun then do;
	     q = create_operator (max_fun, 3);
	     q -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
	     q -> operand (2) = size ((e -> operand (2)));
	     q -> operand (3) = size ((e -> operand (3)));
	     return (q);
	end;

	if opcode = repeat_fun then do;
	     q = create_operator (mult, 3);
	     q -> operand (2) = size ((e -> operand (2)));
	     q -> operand (3) = copy_expression (e -> operand (3));
	     return (q);
	end;

	q = size ((e -> operand (1)));

	if q -> node.type = operator_node then
	     if q -> operator.op_code = length_fun then
		if q -> operand (2) = e -> operand (2) then do;
		     if ^q -> operand (1) -> reference.shared then
			q -> operand (1) -> reference.ref_count = q -> operand (1) -> reference.ref_count - 1;
		     else do;
			q = q -> operand (2);
			if q -> node.type = operator_node then
			     q = q -> operand (1);
			if ^q -> reference.shared then
			     q -> reference.ref_count = q -> reference.ref_count - 1;
		     end;
		     return (size ((e -> operand (2))));
		end;

	return (q);

     end size;
%page;
%include semant;
%include array;
%include block;
%include boundary;
%include declare_type;
%include decoded_token_types;
%include list;
%include mask;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include semantic_bits;
%include statement;
%include statement_types;
%include symbol;
%include symbol_bits;
%include system;
%include token;
%include token_types;

     end expand_assign;
