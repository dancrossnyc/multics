/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
     install(89-07-31,MR12.3-1066):
     Removed the obsolete parameter source_line from the call to error_().
                                                   END HISTORY COMMENTS */


/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
semantic_translator:
     proc;

/* 	Modified: 770630 by PG to fix 1609 (incorrect use of auto & defined in prologue) 
	Modified: 15 Feb 1978 by PCK to implement options(main) and the stop statement
	Modified:	20 Mar 1978 by RAB to fix bug in setting goto_bit introduced in 78.02.15 change
	Modified: 30 Nov 1978 by DS to suppress redundant label and entry cross-references
	Modified: 30 Aug 1979 by PCK to fix 1804 and 1823
          Modified: 10 Jul 1989 by RW removed obsolete parameter in the call to error_()
*/

dcl      (b, d, sym, t, tk) ptr;

dcl      pl1_stat_$debug_semant bit (1) aligned ext static,
         pl1_stat_$stmnt_unreachable bit (1) aligned ext static,
         pl1_stat_$index fixed bin (15) ext static,
         pl1_stat_$last_severity fixed bin (15) ext static,
         pl1_stat_$error_flag bit (1) aligned ext static,
         pl1_stat_$multi_type bit (1) aligned ext static;

dcl      pl1_stat_$LHS ptr ext static;
dcl      pl1_stat_$cur_block ptr ext static;
dcl      pl1_stat_$cur_statement ptr ext static;
dcl      pl1_stat_$root ptr ext static;
dcl      pl1_stat_$abort_label label ext static;

dcl      (
         pl1_stat_$util_abort,
         pl1_stat_$util_error
         ) variable static ext entry;

dcl      1 pl1_stat_$statement_id ext static,
	 2 file_number bit (8),
	 2 line_number bit (14),
	 2 statement_number bit (5);

dcl      pl1_stat_$stop_id bit (27) ext static;

dcl      pl1_stat_$st_start fixed bin (23) ext static,
         pl1_stat_$st_length fixed bin (11) ext static,
         pl1_stat_$profile_length fixed bin (31) ext static;

dcl      (i, j, k, m, n) fixed bin (15);
dcl      changed bit (1);
dcl      goto_bit bit (1) aligned;
dcl      abort label int static;
dcl      had_error bit (1) int static;

dcl      (addr, null, substr, string) builtin;

dcl      real_quick_info (pl1_stat_$node_uses (1)) bit (pl1_stat_$node_uses (1)) aligned,
         block_array (pl1_stat_$node_uses (1)) ptr;

dcl      ioa_ entry options (variable);
dcl      debug entry ();

/* set up abort and error entries for utility section */

	pl1_stat_$util_abort = semantic_translator$abort;
	pl1_stat_$util_error = semantic_translator$error;

	pl1_stat_$quick_pt = addr (real_quick_info);

	do i = 1 to pl1_stat_$node_uses (1);
	     quick_info (i) = "0"b;
	end;

	context = "0"b;
	b = pl1_stat_$root;
	pl1_stat_$st_start, pl1_stat_$st_length = 0;
	string (pl1_stat_$statement_id) = "0"b;

	call context_processor (pl1_stat_$root, abort);

scan:
	pl1_stat_$cur_block = b;
	block_array (b -> block.number) = b;

/* if this is a begin block, we have to create a "call" of the begin block
	   from the parent block so our quick procedure algorithm will work */

	if b -> block_type = begin_block then
	     substr (quick_info (b -> block.number), b -> block.father -> block.number, 1) = "1"b;

	d = b -> block.declaration;
	abort = next_dcl;

	do while (d ^= null);
	     pl1_stat_$cur_statement = d;
	     string (pl1_stat_$statement_id) = string (d -> symbol.source_id);

	     call declare (d);
next_dcl:
	     d = pl1_stat_$cur_statement -> symbol.next;
	end;

/* process the prologue and main statement lists.  */

	goto_bit = "0"b;
	abort = next_stmnt;

	do d = b -> block.main, b -> block.prologue;
	     do while (d ^= null);
		pl1_stat_$cur_statement = d;

		d -> statement.free_temps =
		     string (pl1_stat_$statement_id) ^= string (d -> statement.source_id)
		     & string (d -> statement.source_id) ^= "0"b;

		if d -> statement.free_temps then do;
		     d -> statement.put_in_profile = "1"b;
		     pl1_stat_$profile_length = pl1_stat_$profile_length + 1;
		end;

		if d -> statement.processed then
		     goto next_stmnt;

		pl1_stat_$LHS = null;
		string (pl1_stat_$statement_id) = string (d -> statement.source_id);

		call process_label (d);

		if pl1_stat_$debug_semant then
		     if string (pl1_stat_$statement_id) = pl1_stat_$stop_id then do;
			call ioa_ ("DB for stop-at:");
			call debug;
		     end;

		def_context.top = "1"b;

/* We do not want to update the statement passed as the argument */
		d -> statement.root = expression_semantics (b, (d), (d -> statement.root), context);
next_stmnt:
		d = pl1_stat_$cur_statement -> statement.next;
	     end;

	     b -> block.prologue_flag = "1"b;		/* let world know we are semant'ing prologue */
	end;

	b -> block.prologue_flag = "0"b;		/* now we are done */
	context = "0"b;

next_block:
	if b -> block.son ^= null then do;
	     b = b -> block.son;
	     goto scan;
	end;

ck_brother:
	if b -> block.brother ^= null then do;
	     b = b -> block.brother;
	     goto scan;
	end;

	if b -> block.father ^= null then do;
	     b = b -> block.father;
	     goto ck_brother;
	end;

/* at this point we have processed all blocks in the program, now
	   determine which blocks can be quick.  substr(quick_info(i),j,1)
	    will be "1"b if block "i" is called from block "j"	*/

loop:
	changed = "0"b;

	do i = 1 to pl1_stat_$node_uses (1);
	     b = block_array (i);
	     if ^b -> block.no_stack then
		goto next;
	     if b -> block.owner ^= null then
		goto next;

/* determine if block is called */

	     j = index (quick_info (i), "1"b);
	     if j = 0 then
		goto next;

/* If block "i" calls itself recursively, it can never be quick. */

	     if substr (quick_info (i), i, 1) = "1"b then do;
		b -> block.why_nonquick.recursive_call = "1"b;
		b -> block.no_stack = "0"b;
		go to next;
	     end;

/* See if it is called from any other blocks;
	        a block can be quick if only called from one block */

	     if substr (quick_info (i), j + 1) then
		goto next;

/* block "i" will allocate its storage in block "j" */

	     b -> block.owner = block_array (j);

	     do k = 1 to pl1_stat_$node_uses (1);

/* if some other block is allocating its storage in block "i",
		   that block has to now take it from block "j" */

		if block_array (k) -> block.owner = b then
		     block_array (k) -> block.owner = block_array (j);

/* copy all transitions out of block "i" into block "j" and
		   then erase all transitions out of block "i" */

		substr (quick_info (k), j, 1) = substr (quick_info (k), j, 1) | substr (quick_info (k), i, 1);
		substr (quick_info (k), i, 1) = "0"b;
	     end;

/* remember that we changed the array */

	     changed = "1"b;

next:
	end;

/* we repeat the above algorithm until we make a pass thru the
	   array with no change */

	if changed then
	     goto loop;

/* if the owner field of a block is now null, the block can't be quick */

	do i = 1 to pl1_stat_$node_uses (1);
	     b = block_array (i);

/* issue warning if internal procedure was never called */

	     if b -> block_type = internal_procedure then
		if quick_info (i) = "0"b & ^b -> block.why_nonquick.assigned_to_entry_var then do;
		     call error (267, null, (b -> block.main -> statement.labels -> element (2)));
		     if b -> block.no_stack & b -> block.owner = null then do;
			b -> block.why_nonquick.never_referenced = "1"b;
			b -> block.no_stack = "0"b;
		     end;
		end;

/* If block has no owner at this point, and is still quick, make it nonquick, */
/* because we have been unable to find it a unique owner for its stack frame. */

	     if b -> block.owner = null & b -> block.no_stack then do;
		b -> block.why_nonquick.no_owner = "1"b;
		b -> block.no_stack = "0"b;
	     end;
	     else if b = b -> block.owner then do;
		b -> block.why_nonquick.recursive_call = "1"b;
		b -> block.no_stack = "0"b;
	     end;
	end;

	return;

process_label:
     proc (s);

/* The reason for the need for two "goto" bits is that goto_bit
   reflects the last stmnt thru the 1st half of the next invocation
   of process_label, which used to be the only person who used it, but by
   the time expression_semantics is called to process the statement, that bit
   has been updated to reflect the CURRENT statement, which is no longer interesting.
   Therefore pl1_stat_$stmnt_unreachable is used by everyone who is interested
   who is called as a result of the call to expression_semantics, to tell if
   at that point the PREVIOUS statement was a return or a goto.	*/

dcl      (lookup_block, lptr, s) ptr,
         st_type bit (9) aligned;

	st_type = s -> statement.statement_type;
	lptr = s -> statement.labels;

	if lptr = null then
	     if goto_bit
		& (st_type ^= end_statement & st_type ^= null_statement & st_type ^= entry_statement
		& st_type ^= format_statement) then
		if st_type = do_statement then
		     if s -> statement.root -> operand (3) = null then
			call semantic_translator$error (56, null);
		     else
			call semantic_translator$error (476, null);
		else
		     call semantic_translator$error (56, null);
	     else
		;
	else
	     do while (lptr ^= null);
		if st_type = procedure_statement | st_type = entry_statement then
		     lookup_block = b -> block.father;
		else
		     lookup_block = b;

		def_context.suppress_cross_ref = "1"b;	/* No redundant cross-ref for labels */

		lptr -> list.element (2) =
		     expression_semantics (lookup_block, d, (lptr -> list.element (2)), context);

		def_context.suppress_cross_ref = "0"b;	/* Continue allowing cross-referencing */

		lptr = lptr -> list.element (1);
	     end;

/* If the last statement, still refected by "goto_bit", was a goto
   return, or stop, then the statement about to be processed must be
   unreachable, so set this external bit. operator_semantics uses it to tell
    when the quality of the code produced doesn't matter.	*/

	pl1_stat_$stmnt_unreachable = goto_bit;

	if st_type = return_statement | st_type = goto_statement | st_type = stop_statement then
	     goto_bit = "1"b;
	else
	     goto_bit = "0"b;

     end process_label;

/* This entry is called when a fatal error occurs in declaration processing or semantic
   translation.  Recovery consists of deleting the offending statement from the program by
   transforming it into a null statement.  Illegal declarations remain in the program.	*/

abort:
     entry (m, t);

	d = pl1_stat_$cur_statement;

	if d -> node.type = statement_node then do;
	     if pl1_stat_$debug_semant then do;
		tk = d -> statement.root;
		call ioa_ ("^/SEMANTICS bug at ^p", tk);
	     end;
	     else do;
		d -> statement.root = null;
		d -> statement.statement_type = null_statement;
	     end;

	     if pl1_stat_$multi_type then do;
		pl1_stat_$error_flag = "1"b;
		goto pl1_stat_$abort_label;
	     end;

	     call error_ (m, d -> statement.source_id, t, (d -> statement.segment), (d -> statement.source.start),
		(d -> statement.source.length));
	end;
	else
	     call error_$no_text (m, d -> symbol.source_id, t);

	pl1_stat_$index = 0;
	goto abort;

/* This entry is called when a non-fatal error occurs during semantic translation
   or declaration processing. */

error:
     entry (m, t);

	d = pl1_stat_$cur_statement;

	if d -> node.type = statement_node then
	     if pl1_stat_$multi_type then
		;
	     else
		call error_ (m, d -> statement.source_id, t, (d -> statement.segment), (d -> statement.source.start),
		     (d -> statement.source.length));
	else
	     call error_$no_text (m, d -> symbol.source_id, t);

	if pl1_stat_$last_severity >= 2 then
	     had_error = "1"b;			/* for call_es */

	return;


/* This entry is called by prepare_symbol_table when it wants to process an
   expression found hanging off a symbol node.  expression_semantics cannot be
   called directly because of a possible abort return */

call_es:
     entry (blk, stm, exp, fail, convert_to_integer) returns (ptr);

dcl      (blk, stm, exp) ptr,
         fail label,
         convert_to_integer bit (1) aligned;

dcl      (tp, tp1) ptr;

	pl1_stat_$cur_statement = stm;
	abort = fail;
	had_error = "0"b;

	tp = expression_semantics (blk, stm, exp, "0"b);
	if had_error then
	     goto fail;

	if ^convert_to_integer then
	     return (tp);

	tp1 = tp;
	if tp1 -> node.type ^= token_node then do;
	     if tp1 -> node.type = operator_node then
		tp1 = tp1 -> operand (1);
	     if tp1 -> reference.symbol -> symbol.arg_descriptor then
		go to chk_err;
	end;
	tp = convert$to_integer (tp, (integer_type));
chk_err:
	if had_error then
	     goto fail;

	return (tp);

%include quick_info;

%include semant;

%include block;
%include block_types;
%include declare_type;
%include operator;
%include semantic_bits;
%include list;

%include symbol;
%include reference;

%include statement;

%include statement_types;

%include nodes;
%include token;
%include token_types;
%include system;

     end semantic_translator;
