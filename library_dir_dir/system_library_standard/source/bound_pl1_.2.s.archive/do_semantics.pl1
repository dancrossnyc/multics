/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* No journal comments present previous to 1983 !*/
/* Modified 830106 BIM to note beginning of loop in statement so */
/*		   compile_statement can align it to Y-pair. */
do_semantics:	proc(blk,stmnt,tree);

dcl	(blk,stmnt,tree) ptr,
	(cv,cvref,o,o1,o2,o3,o4,p,q,ref,s,spec,v) ptr,
	(first,last,next,label1,label2) ptr,
	(first_statement,last_statement,next_statement,label1_statement,prof) ptr,
	label_variable ptr,

	e(3) ptr,

	i fixed bin(15),
	sign_of_by fixed bin(15),

	(first_spec,first_time,multiple_spec) bit(1) aligned,
	opcode bit(9) aligned;

dcl	pl1_stat_$profile bit(1) aligned ext static;

/* builtins */

dcl	(null, string, substr) builtin;

%include semant;

%include block;
%include declare_type;
%include label;
%include list;
%include nodes;
%include operator;
%include op_codes;
%include reference;
%include semantic_bits;
%include statement;
%include statement_types;
%include symbol;
%include system;
%include token;
%include token_types;

			/*      */

	first_time = "1"b;
	last = tree->operand(1);
	spec = tree->operand(3);
	s = stmnt;
	last_statement = last->label.statement;
	if spec = null			/* "do;" statement */
	then do;
		last_statement->statement.reference_count = last_statement->statement.reference_count - 1;
		go to ret;
	     end;

	first_spec = "1"b;
	multiple_spec = spec->operand(6)^=null;

	if multiple_spec
	then do;
/* first: ; */
		first_statement = make_statement(s,null_statement,first);
		first->label.statement->statement.reference_count = 1;

		label_variable = declare_pointer(blk);
		label_variable->reference.symbol->symbol.set = "1"b;

		o = make_operator(jump,1,label_variable,null,null);
/* goto label_variable; */
		label1_statement = make_statement(last_statement,goto_statement,o);
		label1_statement->statement.reference_count = 2;
		label1_statement->statement.processed ="1"b;
	end;

	cv = tree->operand(2);

	if cv^=null
	then do;
		v = cv;

		if cv->node.type ^= reference_node
		then do;
			call semantic_translator$abort(145,cv);
			go to ret;
		end;

		if cv->reference.symbol->node.type ^= symbol_node
		then do;
			call semantic_translator$abort(145,cv);
			go to ret;
		end;

		if cv->reference.symbol->symbol.based
		then do;
			p = declare_pointer(blk);
			q = v->reference.qualifier;
			o = make_operator(assign,2,p,q,null);
/* v->R.qualifier=cv->R.qualifier */
			s = make_statement(s,assignment_statement,o);
			v->reference.qualifier = p;
		end;

		if v->reference.offset^=null
		then do;
			p = declare_integer(blk);
			q = v->reference.offset;
			o = make_operator(assign,2,p,q,null);
/* v->R.offset=cv->R.offset */
			s = make_statement(s,assignment_statement,o);
			v->reference.offset = p;
		end;

		if v->reference.length^=null
		then do;
			p = declare_integer(blk);
			q = v->reference.length;
			o = make_operator(assign,2,p,q,null);
/* v->R.length=cv->R.length */
			s = make_statement(s,assignment_statement,o);
			v->reference.length = p;
		end;
	end;

			/*      */

	do while(spec^=null);
		if multiple_spec
		then do;
/* label1: ; */
			label1_statement = make_statement(label1_statement,null_statement,label1);
			label1_statement->statement.reference_count = 2;

			o = make_operator(assign,2,label_variable,label1,null);
/* label_variable=label1; */
			s = make_statement(s,assignment_statement,o);
			s->statement.processed ="1"b;
		end;
		else do;
			label1_statement = last_statement;
			last_statement -> statement.reference_count = last_statement -> statement.reference_count - 1;
		end;

		e(1), e(2), e(3) = null;

		sign_of_by = 0;

		do i=1 to 3;
			if spec->operand(i)^=null
			then	if spec->operand(i)->node.type=token_node
				then do;
					e(i) = spec->operand(i);

					if i=3
					then	if spec->operand(3)->token.type & is_constant
						then	if substr(spec->operand(3)->token.string,1,1)="-"
							then	sign_of_by = -1;
							else	sign_of_by =  1;
				end;
				else do;
					if spec->operand(i)->node.type=operator_node
					then	if spec->operand(i)->operator.op_code=loop
						|  spec->operand(i)->operator.op_code=join
						then	call semantic_translator$abort(140,null);
						else	p = spec->operand(i)->operand(1);
					else	p = spec->operand(i);

					ref = p;

					if p->node.type = reference_node
					then do;
						if p->reference.array_ref
						then	call semantic_translator$abort(140,null);

						p = p->reference.symbol;

						if p->node.type = symbol_node
						then do;
							if p->symbol.area & spec->operand(4)=null
							then	call semantic_translator$abort(143,p);

							if p->symbol.dcl_size^=null & spec->operand(4)=null
							then	call semantic_translator$abort(144,p);
						end;
					end;

					if i=1
					then	e(1) = spec->operand(1);

					else	if p->symbol.constant & ref->reference.shared & i=2
						/* by is too complicated for this optimization */
					then	e(i) = spec->operand(i);

					else do;
/* e(i)=expr(i) */
						q = create_symbol(blk,null,by_compiler);

						if spec->operand(i)->node.type=operator_node
						then do;
							if spec->operand(i)->op_code^=std_call
							then do;
								q->symbol = p->symbol;
								q->symbol.next = null;
								q->symbol.block_node = blk;
								e(i)  ,
								spec->operand(i)->operand(1)  ,
								q->symbol.reference = copy_expression(p->symbol.reference);
								e(i)->reference.symbol = q;
							end;
							else do;
								e(i) = spec->operand(i)->operand(1);
								e(i)->reference.ref_count = e(i)->reference.ref_count+1;
							end;

							s = make_statement(s,assignment_statement,(spec->operand(i)));
						end;
						else do;
							e(i) = q->symbol.reference;
							q->symbol.temporary = "1"b;
							o = make_operator(assign,2,e(i),(spec->operand(i)),null);

							s = make_statement(s,assignment_statement,o);

							context = "0"b;

							s->statement.root = operator_semantics(blk,s,o,context);
						end;

						q->symbol.temporary = "0"b;
						q->symbol.auto  ,
						q->symbol.allocate  ,
						s->statement.processed = "1"b;
					end;
				end;
		end;

		if e(1)^=null
		then do;
			o = make_operator(assign,2,copy_ref(v),e(1),null);
/* v=e1; */
			s = make_statement(s,assignment_statement,o);
		end;

		if e(2)=null & e(3)=null & spec->operand(4)=null & spec->operand(5)=null
		then do;
			next_statement = label1_statement;
			goto next_spec;
		end;
/* next: ; */
		next_statement = make_statement(label1_statement,null_statement,next);
		next_statement->statement.reference_count = 1;
		string(next_statement->statement.source_id) = string(last_statement->statement.source_id);

		if spec->operand(2)^=null
		|  spec->operand(3)^=null
		|  spec->operand(4)^=null
		|  spec->operand(5)^=null & cv=null
		then do;
/* label2: ; */
			s = make_statement(s,null_statement,label2);
		          s->statement.begins_loop = "1"b;
			s->statement.reference_count = 2;

		end;

		if cv^=null
		then do;
			if e(2)^=null & e(3)=null
			then do;
				sign_of_by = 1;
				e(3) = create_token("1",dec_integer);
			end;

			if e(3)^=null
			then do;
				o = make_operator(add,3,null,copy_ref(v),share_expression(e(3)));
				o = make_operator(assign,2,copy_ref(v),o,null);
/* v=v+e3; */
				label1_statement = make_statement(label1_statement,assignment_statement,o);
				string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
			end;

			if spec->operand(4)^=null
			then do;
				o = make_operator(assign,2,copy_ref(v),(spec->operand(4)),null);
				label1_statement = make_statement(label1_statement,assignment_statement,o);
				string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
				o->operand(2) = expression_semantics(blk,label1_statement,(o->operand(2)),"0"b);
			end;

			if e(2)^=null
			then	if sign_of_by=0
				then do;
					cvref = copy_ref(v);
					if ^ cvref -> reference.shared
					     then cvref -> reference.ref_count = 2;

					o3 = make_operator(greater_or_equal,3,null,share_expression(e(3)),create_token("0",dec_integer));
					o4 = make_operator(greater_than,3,null,cvref,share_expression(e(2)));
					o1 = make_operator(and_bits,3,null,o3,o4);

					o3 = make_operator(less_than,3,null,share_expression(e(3)),create_token("0",dec_integer));
					o4 = make_operator(less_than,3,null,cvref,share_expression(e(2)));
					o2 = make_operator(and_bits,3,null,o3,o4);

					o = make_operator(or_bits,3,null,o1,o2);
					o = make_operator(jump_true,2,next,o,null);


/* if (e3>=0) & (v>e2) | (e3<0) & (v<e2) then goto next; */
					s = make_statement(s,if_statement,o);
				end;
				else do;
					if sign_of_by>0
					then	opcode = jump_if_gt;
					else	opcode = jump_if_lt;
					o = make_operator(opcode,3,next,copy_ref(v),share_expression(e(2)));

/* if v>e2 [v<e2] then goto next; */
					s = make_statement(s,if_statement,o);
				end;
		end;
	
		if spec->operand(5)^=null
		then do;
			if spec->operand(5)->node.type^=operator_node
			then	goto create_jump_operator;

			opcode = spec->operand(5)->operator.op_code;

			if opcode<less_than | opcode>greater_or_equal
			then	goto create_jump_operator;

			if opcode=equal
			then	opcode = jump_if_ne;	else
			if opcode=not_equal
			then	opcode = jump_if_eq;	else
			if opcode=less_than
			then	opcode = jump_if_ge;	else
			if opcode=greater_than
			then	opcode = jump_if_le;	else
			if opcode=less_or_equal
			then	opcode = jump_if_gt;
			else	opcode = jump_if_lt;

			o = spec->operand(5);
			o->operator.op_code = opcode;
			o->operand(1) = next;

			goto create_while_statement;

create_jump_operator:
			o = make_operator(jump_false,2,next,(spec->operand(5)),null);
/* if ^e5 then goto next; */
create_while_statement:
			s = make_statement(s,if_statement,o);
			o = expression_semantics(blk,s,o,"0"b);
		end;

		if e(3)^=null
		|  spec->operand(4)^=null
		|  spec->operand(5)^=null & cv=null
		then do;
			o = make_operator(jump,1,label2,null,null);
/* goto label2; */
			label1_statement = make_statement(label1_statement,goto_statement,o);
			string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
			label1_statement->statement.processed ="1"b;

			if pl1_stat_$profile
			then do;

				/* we want 2 profile entries for do statement, so put
				   out a statement with 0 id */

				prof = label2->label.statement;
				prof = create_statement(null_statement,prof,null,(prof->statement.prefix));
				string(prof->statement.source_id) = "0"b;
			end;
		end;

next_spec:
		if ^first_spec
		then do;
			o = make_operator(jump,1,first,null,null);
/* goto first */
			s = make_statement(s,goto_statement,o);
			first->label.statement->statement.reference_count = first->label.statement->statement.reference_count+1;
			s->statement.processed ="1"b;
		end;

		else do;
		     first_spec = "0"b;
		end;
		label1_statement  ,
		s = next_statement;
		spec = spec->operand(6);
	end;

	goto ret;


			/*      */

make_operator:	proc(opcode,number,opnd1,opnd2,opnd3) returns(ptr);

dcl	opcode bit(9) aligned,

	number fixed bin(15),

	(op,opnd1,opnd2,opnd3) ptr;

	op = create_operator(opcode,number);

	if number >= 1
	then do;
		op -> operator.operand (1) = opnd1;

		if number >= 2
		then do;
			op -> operator.operand (2) = opnd2;

			if number >= 3
			then op -> operator.operand (3) = opnd3;
		     end;
	     end;

	return(op);

	end make_operator;

make_statement:	proc(st,type,opnd) returns(ptr);

dcl	type bit(9) aligned,

	(opnd,st,stp) ptr;

	stp = create_statement(type,st,null,(st->statement.prefix));
	stp->statement.generated = "1"b;

	if type=null_statement
	then do;
		opnd = create_label(blk,null,by_compiler);
		opnd->label.statement = stp;
		stp->statement.labels = create_list(2);
		stp->statement.labels->list.element(2) = opnd;

		stp->statement.processed ="1"b;
	end;
	else	stp->statement.root = opnd;

	return(stp);

	end make_statement;

copy_ref:	proc(pt) returns(ptr);

dcl	(p,pt) ptr;

	if first_time
	then do;
	     first_time = "0"b;
	     return(pt);
	     end;

	if pt -> reference.shared
	     then return(pt);

	p = create_reference(null);
	p -> reference = pt -> reference;

	/* offset and length are known to be null or shared auto
	   variables, so only check qualifier */

	if p -> reference.qualifier ^= null
	     then p -> reference.qualifier = share_expression((p -> reference.qualifier));

	return(p);

	end copy_ref;

			/*      */

ret:
	call free_node(tree);

	end do_semantics;
