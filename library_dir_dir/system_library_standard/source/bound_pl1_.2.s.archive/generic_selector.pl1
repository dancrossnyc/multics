/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


generic_selector:	proc(blk,stmnt,tree,subs,context) returns (ptr);

/*	Written 13 November 1972 by Richard A. Barnes */


dcl	(blk,stmnt,tree,subs) ptr;

dcl	(arg_list,a,alt,g,lp,old,p,q,r,st) ptr;
dcl	asym(subs->list.number) ptr;
dcl	(i,j,n_args) fixed bin(17);
dcl	leave_it bit(1) aligned;

dcl	(bool,hbound,null,string,substr) builtin;

%include semant;

%include semantic_bits;

%include list;

%include symbol;

%include reference;

%include token;

%include token_types;

%include nodes;

%include statement;

%include statement_types;

%include operator;

%include op_codes;

%include array;

%include declare_type;

%include picture_image;

/*  */

/* We will compare the arguments of the generic reference to each of the descriptor
   lists in the generic declaration until we get a hit */

/* First, we must get symbol nodes for each of the arguments

   (subs has the arguments in reverse order!) */

begin:
	st = stmnt;
	arg_list = subs;
	n_args = hbound(asym,1);
	g = tree->reference.symbol;

	j = 0;
	do i = n_args to 1 by -1;
		j = j + 1;
		leave_it = "0"b;
		old = st->statement.back;	/* prepare to nullify statements
					   generated for the j-th argument */
		this_context = "01"b;
		a = arg_list->list.element(i);
		if a->node.type = operator_node
		then do;
			if a->operator.op_code = assign /* assuming only kind of assignment is to t0 */
			     then arg_list->list.element(i) = a->operand(2);
			go to by_value;
		     end;
		if a->node.type = token_node
		     then if a->token.type & is_constant
			then do;
				leave_it = "1"b;
				go to by_value;
			     end;
		q = copy_expression((a));
		if q->node.type = reference_node
		     then if ^q->reference.shared
			then q->reference.ref_count = q->reference.ref_count - 1;
		q = expression_semantics(blk,st,q,this_context);
		if q->node.type ^= reference_node
		     then go to undo;
		if q->reference.symbol->symbol.constant
		     then go to undo;
		a = q;
		asym(j) = a->reference.symbol;
		go to next;

undo:		do q = old->statement.next repeat q->statement.next while (q^=st);
			q->statement.root = null;
			q->statement.statement_type = null_statement;
		end;

by_value:
		a = create_operator(assign,2);
		q = create_symbol(null,null,by_compiler);
		q->symbol.temporary = "1"b;
		a->operand(1) = q->symbol.reference;
		a->operand(2) = arg_list->list.element(i);
		a = expression_semantics(blk,st,a,this_context);
		q = a;
		if q->node.type = operator_node
		     then q = q->operand(1);
		asym(j) = q->reference.symbol;

next:
		if ^leave_it
		     then arg_list->list.element(i) = a;
	end;

/* Now the search for a suitable entry begins */

	do alt = g->symbol.general
	     repeat alt->list.element(3) while (alt ^= null);
		i = 0;
		do lp = alt->list.element(2) repeat lp->list.element(2) while (lp ^= null);
			i = i + 1;
			if i > n_args
			     then go to try_another;
			if lp->list.element(1) ^= null
			     then if ^compare_generic(asym(i),(lp->list.element(1)))
				     then go to try_another;
		end;
		if i = n_args then go to hit;

try_another:
	end;

/* We have failed to find a match */

	call semantic_translator$abort(65,tree);

/* We've got an entry reference, so let's build a std_call operator and process it */

hit:
	p = create_operator(std_arg_list,3);
	p->operand(2) = arg_list;
	q = create_operator(std_call,3);
	r = copy_expression(alt->list.element(1));
	q->operand(2) = expression_semantics((g->symbol.block_node),st,r,"0"b);
	q->operand(3) = p;
	q = expression_semantics(blk,st,q,context);
	stmnt = st;
	return(q);

/*  */
/* compare_generic checks to see if an argument fits the description given for a
   specific alternative in the generic declaration */

compare_generic:	proc(pa,pg) returns(bit(1) aligned);
dcl	(pa,pg) ptr;
dcl	(a,g,as,gs) ptr;
dcl	(genbits,argmask) bit(72) aligned;
dcl	asize fixed bin(24);
dcl	ascale fixed bin(7);
dcl	1 genmask aligned based(addr(genbits)),
		2 attributes unaligned like symbol.data_type,
		2 misc_attributes unaligned like symbol.misc_attributes;

begin:
	a = pa;
	g = pg;

	genbits = substr(string(g->symbol.attributes),1,72);
	genmask.precision = "0"b;
	argmask = substr(string(a->symbol.attributes),1,72) & genbits;
	if bool(genbits,argmask,"0110"b)	/* exclusive or */
	     then go to fail;

	if g->symbol.variable_arg_list
	     then if ^a->symbol.variable_arg_list
		     then go to fail;
	if g->symbol.non_varying
	     then if ^a->symbol.non_varying
		     then go to fail;

	if g->symbol.precision
	then do;
		asize = a->symbol.c_dcl_size;
		if asize < g->symbol.c_dcl_size
		     then go to fail;
		if asize > g->symbol.pic_size
		     then go to fail;
		if g->symbol.fixed
		then do;
			ascale = a->symbol.scale;
			if ascale < g->symbol.scale
			     then go to fail;
			if ascale > g->symbol.pic_scale
			     then go to fail;
		     end;
	     end;

	if g->symbol.array ^= null
	     then if g->symbol.array->array.number_of_dimensions ^= a->symbol.array->array.number_of_dimensions
		     then go to fail;

	if g -> symbol.picture
	then if g -> symbol.general -> reference.symbol -> symbol.initial -> picture_image.chars
	     ^= a -> symbol.general -> reference.symbol -> symbol.initial  -> picture_image.chars
	     then go to fail;

	if g->symbol.structure
	then do;
		gs = g->symbol.son;
		as = a->symbol.son;
		do while (gs ^= null);
			if as = null
			     then go to fail;
			if ^compare_generic(as,gs)
			     then go to fail;
			as = as->symbol.brother;
			gs = gs->symbol.brother;
		end;
		if as ^= null
		     then go to fail;
	     end;

/* We've passed the test */

	return("1"b);

/* We've flunked the test */

fail:
	return("0"b);
end;
end;
