/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


alloc_semantics:	proc(cur_block,stmnt,tree);

/*	Modified: 14 August 1978 by PCK to fix 1735
	Modified:	15 August 1978 by RAB to fix 1733
	Modified:	16 August 1978 by RAB to fix 1772, 1773, & 1774	*/
/*	Modified: 15 Jan 1979 by DS to fix 1783 */

dcl	(cur_block,stmnt,tree) ptr,
	(a,adam,area,b,d,dst,l,locator,next,o,p,r,s,source,size,st) ptr,

	(n,i,processed_bounds,own_num_bounds,number) fixed bin(15);

dcl	(null,hbound,string) builtin;

dcl	ref_targ_cnt fixed bin(15) init(0);

dcl 	ref_targ(16) pointer;

dcl	pl1_stat_$use_old_area external static bit(1) aligned;

dcl	opcode bit(9) aligned;

%include semant;

%include array;
%include boundary;
%include list;
%include nodes;
%include operator;
%include op_codes;
%include reference;
%include semantic_bits;
%include statement;
%include statement_types;
%include symbol;
%include symbol_bits;
%include system;

	source = tree->operand(1);

	if source->node.type = label_node
	then	call semantic_translator$abort(373,source);	/* alloc or free a label constant */

	s = source->reference.symbol;

	if s->node.type = label_node
	then	call semantic_translator$abort(373,s);	/* alloc or free a label constant array */

	if s->symbol.father^=null
	then	call semantic_translator$abort(273,s);

	area = tree->operand(2);
	locator = source->reference.qualifier;

	st = stmnt;
	context = "0"b;

	if tree->operator.op_code=allot_var
	then	number = 5;	/* allot_var */
	else	number = 151;	/* free_var */

	if s->symbol.controlled
	then do;
		if area ^= null then call semantic_translator$abort(114,s);
		r = s->symbol.descriptor;
		d = r->reference.symbol;
		if d->symbol.controlled
		then if number = 5
		     	then do;  /* We must allocate a controlled descriptor before we allocate the symbol */
				dst = create_statement(allocate_statement,(st->statement.back),null,(st->statement.prefix));
				dst->statement.root,
				o = create_operator(allot_ctl,2);
				o->operand(1) = r;
				o->operand(2) = declare_constant$integer((d->symbol.c_word_size));
				r = declare_descriptor$ctl(cur_block,st,s,null,"1"b);
				o->operator.processed = "1"b;
			     end;
			else do;  /* We must free a controlled descriptor after we free the data */
				st = create_statement(free_statement,st,null,(st->statement.prefix));
				st->statement.root,
				o = create_operator(free_ctl,1);
				o->operand(1) = r;
				o->operator.processed = "1"b;
			     end;
		else;
		if number = 5
		then do;
			o = create_operator(allot_ctl,2);
			call getsize;
			o->operand(2) = size;
		     end;
		else o = create_operator(free_ctl,1);
		o->operand(1) = source;
		tree = o;
		if number = 151
		     then return;
		     else go to set_next;
	end;

	if ^s->symbol.based
	then	call semantic_translator$abort(115,s);

	if number=151
	then	goto process_area;

	if locator->node.type=operator_node
	then	if locator->operator.op_code=assign | locator->operator.op_code = ptr_fun
		then do;
			locator = locator->operand(2);
			l = locator->reference.symbol;
		end;
		else call semantic_translator$abort(68,s);
	else	l = locator->reference.symbol;

	call propagate_bit(l,set_bit);

	if l->symbol.offset
	then	if area=null
		then do;
			area = copy_expression(l->symbol.general);

			if area=null
			then	call semantic_translator$abort(116,l);

			area = expression_semantics((l->symbol.block_node),stmnt,area,"0"b);

			goto assign_ptr;
		end;
		else do;
			st = create_statement(assignment_statement,st,null,(st->statement.prefix));
			st->statement.root  ,
			o = create_operator(off_fun,3);
			o->operand(3) = share_expression(area);

			o->operand(1) = locator;

			locator  ,
			o->operand(2) = declare_pointer(cur_block);

			st->statement.processed = "1"b;

			goto create_addr;
		end;

	if ^l->symbol.ptr
	then	call semantic_translator$abort(117,l);

	if l->symbol.unaligned & pl1_stat_$use_old_area	/* the new area package needs no  ass. stat at all */
	then do;
assign_ptr:
				/* allot_var */
		st = create_statement(assignment_statement,st,null,(st->statement.prefix));
		st->statement.root  ,
		o = create_operator(assign,2);
		o->operand(1) = locator;
		locator  ,
		o->operand(2) = declare_pointer(cur_block);
	end;

process_area:
	if area^=null
	then do;
		if area->node.type^=reference_node
		then	call semantic_translator$abort(491,null);

		if ^area->reference.symbol->symbol.area
		then	call semantic_translator$abort(118,area);
	end;
	else if pl1_stat_$use_old_area
	     then do;
		area = reserve$declare_lib(1);
		area->reference.symbol->symbol.allocate = "1"b;

		if number=5
		then	number = 192;		/* alloc_$storage_ */
		end;

create_addr:
	call getsize;	/* this subroutine sets the "size" ptr	*/

	if pl1_stat_$use_old_area
	then do;

		p = create_operator(addr_fun,2);
		p->operand(1) = declare_temporary(pointer_type,0,0,null);
		p->operand(2) = area;
		area = p;

		p = create_list(3);
	
		p->list.element(2) = area;
	
		if number=5	/* allot_var */
		|  number=192			/* alloc_$storage_ */
		then do;
			p->list.element(1) = size;
			p->list.element(3) = locator;
		end;
		else do;
			p->list.element(1) = locator;
			p->list.element(3) = size;
		end;
	
		o = create_operator(std_call,3);
		o->operand(2) = reserve$declare_lib(number);
		o->operand(3) = create_operator(std_arg_list,3);
		o->operand(3)->operand(1) = declare_temporary(storage_block_type,8,0,null);
		o->operand(3)->operand(2) = p;
	
	     end;

	else do;
		if number = 151
		then do;
			opcode = free_based;
			p = source;	/* op1 of free_based operator is source ptr, i.e. based var */
		     end;
		else do;
			opcode = allot_based;
			p = locator;	/* op1 of allot_based is locator ptr */
		     end;

		o = create_operator(opcode,3);
		o->operand(2) = size;
		o->operand(3) = area;
		o->operand(1) = p;

	     end;


	tree = o;

	if number=151 then return;

	goto set_next;

init_only:entry(locexp,stmnt,tree);
	dcl locexp ptr;

	st=stmnt;
	locator=locexp;
	s=tree;

set_next:
	next = st->statement.next;

	adam = s;

	do while(s ^= null);
		if s ^= adam
		then do;
			if s->symbol.refer_extents
			then do;
				call build_assignment(s->symbol.dcl_size);

				if s->symbol.array^=null 
				then do;
					own_num_bounds=s->symbol.array->own_number_of_dimensions;
					processed_bounds=0;

					do b = s->symbol.array->array.bounds repeat b->bound.next
					     while(processed_bounds < own_num_bounds);
						call build_assignment(b->bound.lower);
						call build_assignment(b->bound.upper);
						processed_bounds=processed_bounds+1;
					end;
				end;
			end;
		end;

		if s->symbol.initial^=null
		|  s->symbol.area
		then	call expand_initial(s,(next->statement.back),locator);

		if s -> symbol.son ^= null
		then	s = s -> symbol.son;
		else do;
			do while(s->symbol.brother=null & s ^= adam);
				s = s->symbol.father;
			end;

			s = s->symbol.brother;
		end;

	end;

getsize:	proc;

dcl 	constant fixed bin;
dcl	modified bit(1) aligned;

	size = copy_expression(s->symbol.word_size);
	if size=null
	then	size = declare_constant$integer((s->symbol.c_word_size));
	else do;
		if number=151 & s->symbol.refer_extents
		then	call refer_extent(size,locator);
		size = expression_semantics((s->symbol.block_node),stmnt,size,context);
		size = convert$to_integer(size,integer_type);
		call simplify_expression(size,constant,modified);
		if modified
		then	size=declare_constant$integer((constant));
	end;

	p = size;
	if p->node.type=operator_node
	then 	p = p->operand(1);

	if p->reference.symbol->symbol.c_dcl_size>max_p_fix_bin_1
	then do;
		r = create_operator(assign,2);
		r->operand(1) = declare_temporary(integer_type,max_p_fix_bin_1,0,null);
		r->operand(2) = size;
		size = r;
	end;
end;

build_assignment:	proc(p);

dcl	p ptr unal,
	(o,q,st) ptr;

	q = p;

	if q = null then goto exit;
	if q->node.type^=operator_node then goto exit;
	if q->operator.op_code^=refer then goto exit;
	do i=1 to ref_targ_cnt;
		if q->operator.operand(2)=ref_targ(i) 
		then goto exit;
		else 	if compare_expression((q->operator.operand(2)),ref_targ(i))
			then goto exit;
	end;

	st = create_statement(assignment_statement,(next->statement.back),null,(stmnt->statement.prefix));

	st->statement.generated = "1"b;
	st->statement.root  ,
	o = create_operator(assign,2);
	o->operand(2) = copy_expression(q->operand(1));

	if q->operand(2)->node.type=reference_node
	then	o->operand(1) = copy_expression(q->operand(2));
	else	o->operand(1) = create_reference((q->operand(2)));

	o->operand(1)->reference.qualifier = share_expression(locator);

	if ref_targ_cnt<hbound(ref_targ,1) 
	then do;
		ref_targ_cnt=ref_targ_cnt+1;
		ref_targ(ref_targ_cnt)=q->operator.operand(2);
	end;

exit:
	end build_assignment;

	end alloc_semantics;
