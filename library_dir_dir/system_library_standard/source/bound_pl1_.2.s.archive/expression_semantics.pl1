/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style3 */
expression_semantics:
     proc (blk, stmnt, input_tree, context) returns (ptr);

/* Modified 770520 by PG to get defaulting of constants to agree with ANSI standard */
/* Modified 770701 by PG to fix 1609 (invalid initialization of automatic variables in prologue) */
/* Modified 770708 by PG to fix 1641 (default statements shouldn't be applied to string constants) */
/* Modified 780314 by PG to fix 1673 (don't default constants unless default statement explicitly touches constants) */
/* Modified 780322 by RAB to diagnose non array_or_entry followed by parenthesized list */
/* Modified Nov 1978 by DS to suppress redundant label and entry cross-references */
/* Modified 26 Dec 1979 by PCK to implement by name assignment */
/*	Modified: 28 April 1980 by PCK to fix 1959	*/

/* parameters */

dcl	(blk, stmnt, input_tree)
			ptr parameter;

/* automatic */

dcl	(tree, s, subs, d, p, q, b)
			ptr;
dcl	(i, n, t, asterisk_count)
			fixed bin (15);
dcl	opcode		bit (9) aligned;
dcl	(LHS_aggregate, pds, cross_section)
			bit (1) aligned;

/* builtins */

dcl	(addr, index, null, string)
			builtin;

/* external static */

dcl	pl1_stat_$LHS	ptr ext static;
dcl	pl1_stat_$LHS_ref	ptr ext static;
dcl	pl1_stat_$root	ptr ext static;
dcl	pl1_stat_$locator	(128) ptr ext static;
dcl	pl1_stat_$index	fixed bin (15) ext static;

/* program */

	tree = input_tree;

	subs = null;
	cross_section, this_context = "0"b;
	def_this_context.ignore_based = def_context.ignore_based;
	def_this_context.suppress_cross_ref = def_context.suppress_cross_ref;

	if tree = null
	then goto ret;

	if tree -> node.type = operator_node
	then do;
		if tree -> operator.processed
		then goto ret;

		opcode = tree -> operator.op_code;

		if opcode < r_parn | opcode > lock_file
		then goto not_io;

		if ((opcode >= get_file) & (opcode <= locate_file) | (opcode >= rewrite_file) & (opcode <= lock_file))
		then do;
			call io_semantics (blk, stmnt, tree);
			if opcode ^= open_file & opcode ^= close_file
			then tree = null;		/* 7-18-72: all others handled
					   by recio or stream_prep */

			goto ret;
		     end;

		if opcode >= r_parn & opcode <= bn_format
		then do;
			call io_data_list_semantics$format_list_semantics (blk, stmnt, tree);
			tree -> operator.processed = "1"b;
			goto ret;
		     end;

		if opcode = put_data_trans
		then do;
			q = tree -> operand (2);
			if q -> node.type = token_node
			then do;
				p = create_reference (q);
				q, tree -> operand (2) = p;
			     end;
			if q -> node.type = reference_node
			then q -> reference.put_data_sw = "1"b;
		     end;

		if opcode = get_list_trans | opcode = get_edit_trans
		then def_this_context.left_side = "1"b;

not_io:
		if opcode = assign_by_name
		then do;
			call expand_by_name (blk, stmnt, tree);

			if stmnt -> statement.root = null
			then go to ret;
			else opcode = assign;
		     end;

		if opcode = refer | opcode = bit_pointer
		then if pl1_stat_$index > 0
		     then do;
			     p = pl1_stat_$locator (pl1_stat_$index) -> reference.qualifier;

			     if opcode = refer
			     then do;
				     tree = copy_expression (tree -> operand (2));
				     if tree -> node.type = token_node
				     then tree = create_reference (tree);

				     tree -> reference.qualifier = share_expression (p);
				     tree = expression_semantics (blk, stmnt, tree, this_context);

				     goto ret;
				end;
			     else do;
				     if p -> node.type = operator_node
				     then if p -> operator.op_code = assign
					then if p -> operand (1) -> reference.symbol -> symbol.aligned
					     then p = p -> operand (2);
				     tree -> operand (2) = share_expression (p);
				end;
			end;
		     else do;
			     if opcode = bit_pointer
			     then call semantic_translator$abort (291, null);

			     tree = tree -> operand (1);
			     tree = expression_semantics (blk, stmnt, tree, this_context);
			     goto ret;
			end;


		if opcode = assign
		then do;
			def_this_context.left_side = "1"b;

			if def_context.top
			then def_this_context.by_name_assignment = stmnt -> statement.expanded_by_name;

			tree -> operand (1) = expression_semantics (blk, stmnt, (tree -> operand (1)), this_context);
			LHS_aggregate = def_this_context.aggregate;

			if def_this_context.return_from_empty
			then do;
				tree = tree -> operand (1);
				goto ret;
			     end;

			do p = tree -> operand (1) repeat p -> operand (1) while (p -> node.type = operator_node);
			end;

			if p -> node.type ^= reference_node
			then call print (145);

			if def_context.top
			then do;
				pl1_stat_$LHS_ref = p;
				pl1_stat_$LHS = p -> reference.symbol;
			     end;

			if stmnt -> statement.expanded_by_name
			then def_this_context.by_name_assignment = def_context.top | def_context.by_name_assignment;

			def_this_context.aggregate, def_this_context.left_side = "0"b;
			tree -> operand (2) = expression_semantics (blk, stmnt, (tree -> operand (2)), this_context);
			def_context.RHS_aggregate = def_this_context.aggregate;
			def_this_context.aggregate = def_this_context.aggregate | LHS_aggregate;

			if def_this_context.return_from_empty
			then do;
				tree = tree -> operand (2);

				goto ret;
			     end;
		     end;
		else do;
			def_this_context.by_name_assignment = def_context.by_name_assignment;
			if opcode = do_fun
			then do;
				def_this_context.left_side = "1"b;
				tree -> operand (2) =
				     expression_semantics (blk, stmnt, (tree -> operand (2)), this_context);
				def_this_context.left_side = "0"b;
			     end;

			if opcode = do_spec		/* do loop while, repeat specs are only processed inside the loop */
			then do i = 1 to 3, 6;
				if tree -> operand (i) ^= null
				then tree -> operand (i) =
					expression_semantics (blk, stmnt, (tree -> operand (i)), this_context);
			     end;
			else do i = 1 to tree -> operator.number;
						/* normal operator...process all operands */
				if tree -> operand (i) ^= null
				then tree -> operand (i) =
					expression_semantics (blk, stmnt, (tree -> operand (i)), this_context);
			     end;
		     end;

		if opcode = return_value
		then do;
			tree = operator_semantics (blk, stmnt, tree, this_context);

			if tree ^= null
			then tree -> operator.processed = "1"b;

			goto ret;
		     end;

		if ^def_this_context.aggregate | opcode = allot_var | opcode = free_var | opcode = std_entry
		then do;
			tree = operator_semantics (blk, stmnt, tree, context);

			if tree ^= null
			then tree -> operator.processed = "1"b;

			goto ret;
		     end;

/*   Only aggregates will reach this point   */
		if opcode = std_entry | opcode = join
		then do;
			tree -> operator.processed = "1"b;
			goto ret;
		     end;

		if opcode >= jump
		then if opcode = prefix_plus | opcode = join | opcode >= get_list_trans & opcode <= put_data_trans
		     then ;
		     else call print (62);

		if opcode = assign & (def_context.arg_list | def_context.top)
		then do;
			this_context = context;

			if def_this_context.top
			then def_this_context.by_name_assignment = stmnt -> statement.expanded_by_name;

			tree = expand_assign (blk, stmnt, tree, this_context, null);
			tree -> operator.processed = "1"b;
			goto ret;
		     end;

		def_context.aggregate = "1"b;

		if opcode = copy_words
		then do;
			p = expand_primitive (blk, stmnt, (tree -> operand (1)), "0"b);

			do q = p repeat q -> operand (1) while (q -> operand (1) -> node.type = operator_node);
			end;

			tree -> operand (1) = q -> operand (1);
			q -> operand (1) = tree;
			tree = p;

			tree -> operator.processed = "1"b;
			goto ret;
		     end;

		if opcode = negate | opcode = not_bits | opcode = prefix_plus | opcode = put_field
		     | opcode = put_field_chk | (opcode >= get_list_trans & opcode <= put_data_trans)
		then tree = expand_prefix (blk, stmnt, tree, context);
		else tree = expand_infix (blk, stmnt, tree, context);

		tree -> operator.processed = "1"b;

		goto ret;
	     end;

	if tree -> node.type = token_node
	then do;
		if tree -> token.type = identifier
		then do;

			if ^lookup (blk, stmnt, tree, s, this_context)
			then do;
				call semantic_translator$error (77, tree);
				s = create_symbol ((pl1_stat_$root -> block.son), tree, by_implication);
				call declare (s);
				s -> symbol.allocate = "1"b;

				d = create_cross_reference ();
				d -> cross_reference.next = null;
				s -> symbol.cross_references = d;
				string (d -> cross_reference.source_id) = string (stmnt -> statement.source_id);
			     end;

			if s -> node.type = label_node
			then goto process_label;

			q = s -> symbol.reference;
			if q -> reference.offset = null & q -> reference.qualifier = null
			     & q -> reference.length = null & ^(s -> symbol.entry | s -> symbol.defined)
			then tree = q;
			else do;
				tree = copy_expression ((q));
				tree -> reference.shared = "0"b;
				tree -> reference.ref_count = 1;
				tree -> reference.qualifier = null;
			     end;
			go to process_reference;
		     end;

/* Default arithmetic constant tokens */

		if (tree -> token.type & is_arithmetic_constant) = is_arithmetic_constant
		then do b = blk repeat b -> block.father while (b ^= null);
			if b -> block.default ^= null
			then do;
				s = create_symbol (blk, null, by_compiler);
				s -> symbol.constant = "1"b;
				if tree -> token.loc ^= ""b
						/* "p" flag ON */
				then go to ignore_default_attempt;

/* constant contains an "e" implies is_float_constant */
				if (tree -> token.type & is_float_constant) = is_float_constant
				then s -> symbol.float = "1"b;
				else if index (tree -> token.string, "f") ^= 0
				then s -> symbol.fixed = "1"b;

/* constant contains an "i" implies is_imaginary_constant */
				if (tree -> token.type & is_imaginary_constant) = is_imaginary_constant
				then s -> symbol.complex = "1"b;
				else s -> symbol.real = "1"b;

				call validate (s);	/* now default the symbol */

				if ^s -> symbol.defaulted
						/* were any defaults applied? */
				then go to ignore_default_attempt;
						/* No */

				if ^s -> symbol.fixed & ^s -> symbol.float
						/* complete the scale */
				then s -> symbol.fixed = "1"b;

				if ^s -> symbol.binary & ^s -> symbol.decimal
						/* complete the base */
				then if (tree -> token.type & is_decimal_constant) = is_decimal_constant
				     then s -> symbol.decimal = "1"b;
				     else s -> symbol.binary = "1"b;

/* validate and the above code has now supplied
				the data type to coerce the literal constant to,
				except possibly for the size (length or precision) */

/* get a pointer to a reference to the converted constant */

				if s -> symbol.c_dcl_size = 0 & s -> symbol.dcl_size = null
				then tree = convert (tree, string (s -> symbol.attributes));
				else tree = convert$to_target (tree, (s -> symbol.reference));

ignore_default_attempt:
				call free_node (s);

				go to ret;
			     end;
		     end;				/* control comes here if there were no default statements */
		go to ret;
	     end;

	if tree -> node.type = label_node
	then do;
		s = tree;
		go to process_label;
	     end;

	if tree -> node.type ^= reference_node
	then goto ret;

	if tree -> reference.symbol -> node.type ^= token_node
	then do;
		s = tree -> reference.symbol;
		if s -> node.type ^= symbol_node
		then goto ret;			/* could be subscripted reference_node for labels */
		if s -> symbol.param_desc		/* the qualifier field should be fully processed */
		then do;
			tree -> reference.processed = "1"b;
			goto process_reference;
		     end;

		if ^tree -> reference.symbol -> symbol.based /* for init allocated based structures */
		     & ^tree -> reference.processed
		then tree -> reference.qualifier = null;/* for auto-adj storage class */

		goto process_reference;
	     end;

	subs = tree -> reference.offset;
	tree -> reference.offset = null;		/*   lookup never sees the offset field  */

	if ^lookup (blk, stmnt, tree, s, this_context)
	then do;
		q = tree -> reference.length;
		if q ^= null
		then do;
			p = create_token (tree -> reference.symbol -> token.string || """ in """
			     || q -> element (q -> list.number) -> token.string, identifier);
			call semantic_translator$abort (102, p);
		     end;

		if subs = null
		then do;
			pds = tree -> reference.put_data_sw;

			call semantic_translator$error (77, tree);
			s = create_symbol ((pl1_stat_$root -> block.son), (tree -> reference.symbol), by_implication);
			call declare (s);
			s -> symbol.allocate = "1"b;

			d = create_cross_reference ();
			d -> cross_reference.next = null;
			s -> symbol.cross_references = d;
			string (d -> cross_reference.source_id) = string (stmnt -> statement.source_id);

			if pds
			then do;
				tree -> reference.put_data_sw = "1"b;
				goto copy_ref;
			     end;

			goto process_reference;
		     end;

		do i = 1 to number_of_names;
		     if tree -> reference.symbol -> token.string = pl1_data$builtin_name (i).name
		     then do;
			     s = create_symbol ((pl1_stat_$root -> block.son), (tree -> reference.symbol),
				by_implication);

			     d = create_cross_reference ();
			     d -> cross_reference.next = null;
			     s -> symbol.cross_references = d;
			     string (d -> cross_reference.source_id) = string (stmnt -> statement.source_id);
			     s -> symbol.builtin = "1"b;
			     s -> symbol.c_dcl_size = i;

			     tree -> reference.offset = null;
			     tree -> reference.symbol = s;
			     s -> symbol.reference = tree;

			     tree = builtin (blk, stmnt, tree, subs, s, context);
			     goto ret;
			end;
		end;

		call semantic_translator$error (64, tree);
		s = create_symbol ((pl1_stat_$root -> block.son), (tree -> reference.symbol), by_implication);
		s -> symbol.entry = "1"b;
		s -> symbol.variable_arg_list = "1"b;
		call declare (s);
		s -> symbol.allocate = "1"b;
		tree = copy_expression (s -> symbol.reference);
	     end;

/* this name was found by lookup. */

	if s -> node.type = label_node
	then go to process_label;

copy_ref:
	p = s -> symbol.reference;
	q = tree -> reference.qualifier;
	pds = tree -> reference.put_data_sw;

	if q = null & subs = null & p -> reference.offset = null & p -> reference.qualifier = null
	     & p -> reference.length = null & ^s -> symbol.entry & ^pds
	then do;
		call free_node (tree);
		tree = p;
	     end;
	else do;
		tree -> reference = p -> reference;
		tree -> reference.shared, tree -> reference.aggregate, tree -> reference.processed = "0"b;
		tree -> reference.ref_count = 1;
		tree -> reference.put_data_sw = pds;

		if tree -> reference.offset ^= null
		then tree -> reference.offset = copy_expression (/* p-> */ tree -> reference.offset);

		if tree -> reference.length ^= null
		then tree -> reference.length = copy_expression (/* p-> */ tree -> reference.length);

		tree -> reference.qualifier = q;
	     end;

process_reference:
	if def_context.left_side
	then call propagate_bit (s, set_bit);
	else if s -> symbol.auto | s -> symbol.defined
	then if s -> symbol.dcl_type ^= by_compiler	/* ck this because left_side bit not always set */
	     then if s -> symbol.block_node ^= null
		then if s -> symbol.block_node -> block.prologue_flag
						/* are we processing prologue stmts? */
		     then call print (295);		/* invalid initialization of automatic variable */

	if tree -> reference.processed
	then if tree -> reference.array_ref | s -> symbol.structure
	     then goto set_aggregate_bit;
	     else goto ret;

	if s -> symbol.builtin
	then do;
		if s -> symbol.c_dcl_size = 0
		then do;
			do i = 1 to number_of_names;
			     if description (i).name = s -> symbol.token -> token.string
			     then do;
				     s -> symbol.c_dcl_size = i;
				     goto call_builtin;
				end;
			end;

			call semantic_translator$abort (63, s);
		     end;

call_builtin:
		tree = builtin (blk, stmnt, tree, subs, s, context);

		goto ret;
	     end;

	if s -> symbol.generic
	then do;
		tree = generic_selector (blk, stmnt, tree, subs, context);
		goto ret;
	     end;

/* this is a variable or named constant. */
/*   processing the qualifier   */

	if s -> symbol.based
	then if tree -> reference.qualifier ^= null
	     then q = tree -> reference.qualifier;
	     else if s -> symbol.reference -> reference.qualifier = null
	     then if ^def_context.ignore_based
		then call print (66);
		else q = null;
	     else q = copy_expression (s -> symbol.reference -> reference.qualifier);

	else if tree -> reference.qualifier ^= null
	then call print (67);
	else if ^s -> symbol.defined & s -> symbol.reference -> reference.qualifier ^= null
	then do;
		q = s -> symbol.reference -> reference.qualifier;
		if q -> node.type ^= reference_node
		then q = copy_expression ((q));
	     end;
	else q = null;

	if q ^= null
	then do;
		if q -> node.type = symbol_node
		then q = q -> symbol.reference;

		if tree -> reference.qualifier = null
		then p = s -> symbol.block_node;
		else p = blk;

		q = expression_semantics (p, stmnt, q, this_context);

		if def_this_context.aggregate
		then call print (68);

		tree -> reference.qualifier, q = convert (q, pointer_type);

		if q -> node.type = operator_node
		then if q -> op_code = assign
		     then if q -> operand (2) -> reference.symbol -> symbol.offset
			then do;
				q -> operator.processed = "0"b;
						/* offset -> .... */
				tree -> reference.qualifier, q = operator_semantics (blk, stmnt, q, "0"b);
				q -> operator.processed = "1"b;
			     end;

		pl1_stat_$index = pl1_stat_$index + 1;
		if pl1_stat_$index > 128
		then call print (70);
		pl1_stat_$locator (pl1_stat_$index) = tree;
	     end;

/*   processing the subscripts   */
/*   calling subscripter or defined_reference   */
/*   scalar, cross_section, or array(*,*,*)   */

	if s -> symbol.dimensioned & subs ^= null
	then do;
		asterisk_count = 0;

		do i = 1 to subs -> list.number;
		     if subs -> element (i) -> node.type = token_node
		     then if subs -> element (i) -> token.type = asterisk
			then asterisk_count = asterisk_count + 1;
		end;

		if asterisk_count = subs -> list.number
		then do;
			subs = null;
			tree -> reference.array_ref = "1"b;

			cross_section = "0"b;

			if def_context.arg_list & ^s -> symbol.defined
			then goto process_ref_sons;

			tree -> reference.offset = null;

			if q ^= null
			then pl1_stat_$index = pl1_stat_$index - 1;

			goto set_aggregate_bit;
		     end;
		else tree -> reference.array_ref, cross_section = asterisk_count ^= 0;

		if cross_section & def_context.evaluate_offset
		then if ^def_context.string_unspec
		     then call semantic_translator$abort (272, tree);
		     else do;
			     pl1_stat_$index = pl1_stat_$index - 1;

			     goto set_aggregate_bit;
			end;

		if def_context.arg_list
		then do;
			if cross_section
			then do;
				tree -> reference.offset = subs;
				def_context.cross_section = "1"b;

				if q ^= null
				then pl1_stat_$index = pl1_stat_$index - 1;

				goto ret;
			     end;

			if s -> symbol.defined
			then tree = defined_reference (blk, stmnt, tree, subs, s, context);
			else tree = subscripter (blk, stmnt, tree, subs, s);
		     end;

		else if ^(s -> symbol.structure | cross_section) | def_context.evaluate_offset
		then if s -> symbol.defined
		     then tree = defined_reference (blk, stmnt, tree, subs, s, context);
		     else tree = subscripter (blk, stmnt, tree, subs, s);

		if s -> symbol.entry & def_context.top & subs = null
		then subs = create_list (0);
	     end;

	else if subs ^= null & ^s -> symbol.entry
	then call neither_array_nor_entry;

/*   array_reference, or undimensioned scalar   */
	else if s -> symbol.defined & ^s -> symbol.structure & ^tree -> reference.array_ref
	then tree = defined_reference (blk, stmnt, tree, subs, s, context);

process_ref_sons:					/*   processing the offset   */
	if tree -> reference.offset ^= null
	then do;
		tree -> reference.offset =
		     expression_semantics ((s -> symbol.block_node), stmnt, (tree -> reference.offset), "0"b);
		tree -> reference.offset = convert$to_integer ((tree -> reference.offset), integer_type);
	     end;

/*   processing the length   */

	if tree -> reference.length ^= null
	then do;
		tree -> reference.length =
		     expression_semantics ((s -> symbol.block_node), stmnt, (tree -> reference.length), "0"b);
		tree -> reference.length = convert$to_integer ((tree -> reference.length), integer_type);
	     end;

	call simplify_offset (tree, context);

	if def_this_context.aggregate
	then call print (73);

	if q ^= null
	then pl1_stat_$index = pl1_stat_$index - 1;

/*   calls function   */

	if s -> symbol.entry
	then if subs ^= null
	     then do;
		     if cross_section
		     then call print (72);
		     p = create_operator (std_arg_list, 3);
		     p -> operand (2) = subs;
		     q = create_operator (std_call, 3);
		     q -> operand (2) = tree;
		     q -> operand (3) = p;
		     tree = q;

		     tree = function (blk, stmnt, tree, s, context);

		     if tree -> node.type = operator_node
		     then tree -> operator.processed = "1"b;
		     else tree -> reference.processed = "1"b;

		     goto ret;
		end;

set_aggregate_bit:					/*   turning on the aggregate bit   */
	tree -> reference.array_ref = tree -> reference.array_ref | cross_section;

	if subs ^= null
	then do;

/* put back subs on the reference node for use by expand_primitive */

		tree -> reference.offset = subs;

/* undo work of simplify_offset to avoid DISASTER! */

		tree -> reference.c_offset = s -> symbol.reference -> reference.c_offset;
		tree -> reference.units = s -> symbol.reference -> reference.units;
		string (tree -> reference.info.other) = "0"b;
	     end;

	if pl1_stat_$LHS ^= null & ^def_context.left_side & ^def_context.evaluate_offset
	then stmnt -> statement.LHS_in_RHS = temp_needed (tree, cross_section);

	if tree -> reference.array_ref & s -> symbol.defined & ^s -> symbol.overlayed
	then def_context.cross_section = "1"b;

	if s -> symbol.structure | tree -> reference.array_ref
	then def_context.aggregate = "1"b;

	if ^def_context.ignore_based
	then tree -> reference.processed = "1"b;

	goto ret;

/* this is a reference to a label constant. */

process_label:
	if s -> label.array
	then do;
		if subs ^= null
		then do;
			if subs -> list.number ^= 1
			then call print (80);
			p = subs -> element (1);
			if p -> node.type = token_node
			then if p -> token.type = asterisk
			     then cross_section = "1"b;
		     end;

		if subs = null | cross_section
		then do;
			tree = create_reference (s);
			tree -> reference.processed = "1"b;
			tree -> reference.array_ref = "1"b;
			def_context.aggregate = "1"b;
			call increment_label_array_counts;
			goto ret;
		     end;

		tree = subscripter (blk, stmnt, tree, subs, s);
		tree -> reference.offset = expression_semantics (blk, stmnt, (tree -> reference.offset), this_context);
		call simplify_offset (tree, "0"b);
		if def_this_context.aggregate
		then call print (73);
		tree -> reference.processed = "1"b;

		if tree -> reference.offset = null
		then do;
			q = s -> label.statement -> list.element (tree -> reference.c_offset + 1);
			if q ^= null
			then q -> statement.reference_count = q -> statement.reference_count + 1;
			else call print (494);
		     end;
		else call increment_label_array_counts;
	     end;
	else do;
		if subs ^= null
		then call neither_array_nor_entry;

		if s -> label.statement ^= null
		then s -> label.statement -> statement.reference_count =
			s -> label.statement -> statement.reference_count + 1;

		tree = s;
	     end;

ret:
	return (tree);

/* Is a temporary needed because of RHS-LHS overlap */

temp_needed:
     procedure (RHS_ref, RHS_cross_section) returns (bit (1) aligned);

/* parameters */

dcl	RHS_ref		ptr parameter;
dcl	RHS_cross_section	bit (1) aligned parameter;

/* external static */

dcl	(
	pl1_stat_$LHS,
	pl1_stat_$LHS_ref
	)		ptr ext static;

/* builtin */

dcl	(null, string)	builtin;

/* automatic */

dcl	(LHS_ref, LHS_sym, RHS_sym)
			ptr;
dcl	t		fixed bin;

	LHS_ref = pl1_stat_$LHS_ref;
	LHS_sym = pl1_stat_$LHS;
	RHS_sym = RHS_ref -> reference.symbol;

	if RHS_ref -> reference.array_ref
	then do;

		if defined_on (RHS_sym, LHS_sym)
		then return ("1"b);

		if defined_on (LHS_sym, RHS_sym)
		then return ("1"b);

		if cross_section_overlap ()
		then return ("1"b);

	     end;

	if string_overlay_possible ()
	then return ("1"b);

	return ("0"b);

/* Is s1 defined on s2? */

defined_on:
     procedure (s1, s2) returns (bit (1) aligned);

/* parameters */

dcl	(s1, s2)		ptr;

/* automatic */

dcl	s1_defined_on_s2	bit (1) aligned;

	if s1 -> symbol.defined & s1 -> symbol.equivalence ^= null
	then if s1 -> symbol.equivalence -> node.type = token_node
	     then if s1 -> symbol.equivalence = s2 -> symbol.token
		then s1_defined_on_s2 = "1"b;
		else s1_defined_on_s2 = "0"b;
	     else if s1 -> symbol.equivalence -> reference.symbol = s2
	     then s1_defined_on_s2 = "1"b;
	     else s1_defined_on_s2 = "0"b;
	else s1_defined_on_s2 = "0"b;

	return (s1_defined_on_s2);

     end /* defined_on */;

/* If the RHS reference is a possible reference to a cross-section,
   determine if possible RHS-LHS overlap will require an aggregate temp */

cross_section_overlap:
     procedure () returns (bit (1) aligned);

/* The RHS reference is a possible cross-section reference if any of
   the following conditions are satisfied:

   (1)	An explicit cross-section reference was given (e.g. a(i,*));
	This would be indicated by RHS_cross_section.

   (2)	A reference to a parameter with star extents was given.  This
	is the only valid way a parameter may be aliased to a cross-section.

   (3)	A reference to a variable with the defined attribute was given.
	If this is isub defining, the variable may be a cross-section of
	an array.

   Note:	These tests are rather crude; future implementations should attempt
	to refine them or to substitute a more systematic approach.
							*/

/* automatic */

dcl	(RHS_subs, LHS_subs)
			ptr;

	if (RHS_cross_section | (RHS_sym -> symbol.parameter & RHS_sym -> symbol.star_extents) | RHS_sym -> symbol.defined)
	     & (LHS_sym -> symbol.based | LHS_sym -> symbol.defined | LHS_sym -> symbol.parameter)
	     & LHS_sym -> symbol.dimensioned & string (LHS_sym -> symbol.data_type) = string (RHS_sym -> symbol.data_type)
	then return ("1"b);

	if LHS_sym = RHS_sym & RHS_cross_section
	then do;
		LHS_subs = LHS_ref -> reference.offset;
		RHS_subs = RHS_ref -> reference.offset;

		if LHS_subs = null | RHS_subs = null
		then return ("1"b);
		else if LHS_subs -> node.type ^= list_node | RHS_subs -> node.type ^= list_node
		then return ("1"b);
		else return (^stars_match ());

	     end;

	return ("0"b);

/* Determine if two unprocessed subscript lists have asterisks in
   corresponding positions. E.g., (*,i) and (*,i+1) do, and (*,i) and (i+1,*)
   don't. */

stars_match:
     procedure () returns (bit (1) aligned);

/* automatic */

dcl	i		fixed bin;

	do i = 1 to LHS_subs -> list.number;
	     if is_star ((LHS_subs -> list.element (i))) ^= is_star ((RHS_subs -> list.element (i)))
	     then return ("0"b);
	end;

	return ("1"b);

/* Determine if a subscript is an asterisk (denotes a cross-section) */

is_star:
     procedure (subscript) returns (bit (1) aligned);

/* parameter */

dcl	subscript		ptr;

	if subscript -> node.type ^= token_node
	then return ("0"b);

	if subscript -> token.type ^= asterisk
	then return ("0"b);

	return ("1"b);

     end /* is_star */;

     end /* stars_match */;

     end /* cross_section_overlap */;

/* Check for a possible string overlay--one that is valid PL/I
   If it is possible for both references to string overlay define one
   other, excluding the case of references to the same generation of 
   storage, a temporary is needed */

string_overlay_possible:
     procedure () returns (bit (1) aligned);

	t = 0;

	if LHS_sym -> symbol.aliasable & RHS_sym -> symbol.aliasable & LHS_sym -> symbol.packed & RHS_sym -> symbol.packed
	     & ^compare_expression (LHS_ref, RHS_ref) & string_overlay (LHS_sym) & string_overlay (RHS_sym)
	then do;

		if RHS_sym -> symbol.father ^= null
		then return ("1"b);

		if RHS_sym -> symbol.based | RHS_sym -> symbol.defined | RHS_sym -> symbol.parameter
		then return ("1"b);

	     end;

	return ("0"b);

     end /* string_overlay_possible */;
%include string_overlay;
     end /* temp_needed */;

/* increments reference counts of all statements pointed at by label array */

increment_label_array_counts:
     proc;

dcl	(q, vector)	ptr;
dcl	i		fixed bin;

	vector = s -> label.statement;
	do i = 1 to vector -> list.number;
	     q = vector -> list.element (i);
	     if q ^= null
	     then q -> statement.reference_count = q -> statement.reference_count + 1;
	end;

     end;


/* subroutine to print an error message */

print:
     proc (m);

dcl	m		fixed bin (15);

	if tree -> node.type = operator_node
	then p = null;
	else p = tree;

	call semantic_translator$abort (m, p);

     end;

/* prints appropriate error message */

neither_array_nor_entry:
     proc;

dcl	errno		fixed bin (15);

	if def_context.top & stmnt -> statement.statement_type = call_statement
	then errno = 224;				/* used $ where entry value needed */
	else errno = 370;				/* $ was followed by parenthesized list & is neither array nor entry */

	call print (errno);

     end;

%include semant;
%include block;
%include block_types;
%include boundary;
%include builtin_table;
%include cross_reference;
%include declare_type;
%include label;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include semantic_bits;
%include statement;
%include symbol;
%include symbol_bits;
%include system;
%include token;
%include token_types;
%include statement_types;

     end expression_semantics;
