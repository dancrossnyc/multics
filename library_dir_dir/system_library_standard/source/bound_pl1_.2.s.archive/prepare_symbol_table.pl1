/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Program to prepare symbol table by semantically translating any expressions
   associated with a symbol node.

   Initial Version:  1 July 1972 by BLW
	Modified:	5 April 1978 by RAB to fix 1720
	Modified: 23 January by DS to fix bug 1817
	Modified: 7 October 1980 by M. N. Davidoff to fix bug 1971.
*/
/* format: style3 */
prepare_symbol_table:
     procedure (root);

dcl	root		ptr;

/* automatic */

dcl	ev_based_var	ptr;
dcl	ev_qual		ptr;
dcl	ev_ref		ptr;
dcl	ev_temp		ptr;
dcl	s1		ptr;
dcl	s2		ptr;
dcl	scan_again	bit (1) aligned;

/* builtin */

dcl	(null, string)	builtin;

/* external static */

dcl	pl1_stat_$cur_statement
			ptr external static;
dcl	pl1_stat_$dummy_block
			ptr external static;
dcl	pl1_stat_$index	fixed bin external static;
dcl	pl1_stat_$locator	(128) ptr external static;
dcl	1 pl1_stat_$statement_id
			external static,
	  2 file_number	bit (8),
	  2 line_number	bit (14),
	  2 statement_number
			bit (5);
dcl	pl1_stat_$table	bit (1) aligned external static;

%include block;
%include symbol;
%include array;
%include reference;
%include operator;
%include statement;
%include nodes;
%include block_types;
%include declare_type;
%include statement_types;
%include op_codes;
%include system;
%include semant;

/* program */

	ev_qual = create_operator (param_ptr, 3);
	ev_temp, ev_qual -> operator.operand (1) = declare_temporary (pointer_type, 0, 0, null);
	ev_qual -> operator.operand (2) = declare_constant$integer (1);
	ev_qual -> operator.operand (3), pl1_stat_$dummy_block = create_block (internal_procedure, null);

	ev_ref = declare_pointer (pl1_stat_$dummy_block);
	ev_ref -> reference.qualifier, pl1_stat_$dummy_block -> block.context = ev_qual;

	ev_ref -> reference.symbol -> symbol.auto = "0"b;
	ev_ref -> reference.symbol -> symbol.parameter = "1"b;
	ev_ref -> reference.symbol -> symbol.location = 1;

	ev_based_var = declare_integer (pl1_stat_$dummy_block);
	ev_based_var -> reference.qualifier = ev_ref;

	ev_based_var -> reference.symbol -> symbol.auto = "0"b;
	ev_based_var -> reference.symbol -> symbol.based = "1"b;

	s1 = create_statement (unknown_statement, pl1_stat_$dummy_block, null, ""b);
	s2 = null;

/* Sometimes the entire symbol table must be scanned more than once.
   Processing a symbol node may cause another symbol node's
   symbol.cross_references pointer to be set, symbol.allocate bit to be turned
   on, or symbol.put_in_symtab bit to be turned on.  If that symbol node has
   already been passed in the symbol chain, we have to pass over the symbol
   table again to ensure that the symbol node is processed.  If we didn't, the
   code generator will fault when generating a thunk for the symbol node.
   Another pass is made over the symbol table if any of these fields could
   have been set for the first time.  This fixes 1971. */

	scan_again = "1"b;
	do while (scan_again);
	     scan_again = "0"b;
	     call scan_symbol_table;
	end;

	return;

/* This procedure makes a prefix walk of the block node tree.  For each block
   node, all the declarations local to that block are examined for entry into
   the runtime symbol table.  If the declaration is eligible, process is
   called to prepare the symbol node for the runtime symbol table. */

scan_symbol_table:
     procedure;

dcl	cb		ptr;
dcl	found_brother	bit (1) aligned;
dcl	get_data		bit (1) aligned;
dcl	p		ptr;
dcl	q		ptr;

	cb = root;
	do while (cb ^= null);
	     get_data = cb -> block.get_data;
	     do p = cb -> block.declaration repeat p -> symbol.next while (p ^= null);
		if p -> node.type = symbol_node
		then if p -> symbol.dcl_type ^= by_compiler & ^p -> symbol.builtin & ^p -> symbol.condition
			& ^p -> symbol.constant & ^p -> symbol.symtab_processed
			& (p -> symbol.cross_references ^= null | p -> symbol.allocate | get_data)
		     then do;
			     do q = p repeat q -> symbol.father while (q -> symbol.father ^= null);
			     end;

			     if q -> symbol.put_in_symtab | get_data | pl1_stat_$table
			     then call process (q);
			end;
	     end;

	     if cb -> block.son ^= null
	     then cb = cb -> block.son;
	     else do;
		     found_brother = "0"b;
		     do while (cb ^= null & ^found_brother);
			if cb -> block.brother = null
			then cb = cb -> block.father;
			else do;
				cb = cb -> block.brother;
				found_brother = "1"b;
			     end;
		     end;
		end;
	end;

	return;

/* This procedure prepares a symbol node for entry into the runtime symbol
   table.  If the symbol node is a structure declaration, this procedure makes
   a prefix walk of the member symbol nodes to prepare them also.  Any
   expression or variable used as a size or bound on symbols are encoded.
   This procedure ensures that all variables referenced in size or bound
   expressions are marked for inclusion into the runtime symbol table. */

process:
     procedure (pt);

dcl	pt		ptr;

dcl	ap		ptr;
dcl	array_ref		bit (1) aligned;
dcl	bp		ptr;
dcl	qp		ptr;
dcl	rp		ptr;
dcl	sp		ptr;

	sp = pt;
	do while (sp ^= null);
	     pl1_stat_$cur_statement = sp;
	     string (pl1_stat_$statement_id) = string (sp -> symbol.source_id);

	     if sp -> symbol.picture
	     then do;
		     scan_again = scan_again | ^sp -> symbol.general -> reference.symbol -> symbol.allocate;
		     sp -> symbol.general -> reference.symbol -> symbol.allocate = "1"b;
		end;

	     if sp -> symbol.offset
	     then if sp -> symbol.general ^= null
		then do;
			sp -> symbol.general = encode_qual (sp -> symbol.general);

			if sp -> symbol.general ^= null
			then if sp -> symbol.general -> node.type = reference_node
			     then do;
				     scan_again =
					scan_again
					| ^sp -> symbol.general -> reference.symbol -> symbol.put_in_symtab;
				     sp -> symbol.general -> reference.symbol -> symbol.put_in_symtab = "1"b;
				end;
		     end;

	     if ^sp -> symbol.entry
	     then sp -> symbol.symtab_size = encode (sp -> symbol.dcl_size);

	     rp = sp -> symbol.reference;
	     rp -> reference.offset = encode (rp -> reference.offset);

	     if sp -> symbol.defined
	     then if sp -> symbol.structure
		then do;

/* try to locate base reference so we can determine addressing information
   for the defined element */

			if sp -> symbol.reference -> reference.qualifier = null
			then if lookup ((sp -> symbol.block_node), null, copy_expression (sp -> symbol.equivalence), bp,
				"0"b)
			     then sp -> symbol.reference -> reference.qualifier = bp -> symbol.reference;
		     end;

		else do;

/* expression_semantics won't call defined_reference for an array */

			array_ref = sp -> symbol.reference -> reference.array_ref;
			sp -> symbol.reference -> reference.array_ref = "0"b;

			qp = encode_qual (sp -> symbol.reference);
			if qp ^= null
			then if qp -> node.type = reference_node
			     then do;
				     qp -> reference.ref_count = 0;
				     qp -> reference.shared = "1"b;
						/* symbol.reference must be shared */
				     qp -> reference.processed = "0"b;
						/* prevent expr_semantics anomalies */
				     sp -> symbol.reference = qp;
				end;

			sp -> symbol.reference -> reference.array_ref = array_ref;
		     end;

	     if sp -> symbol.based
	     then if rp -> reference.qualifier ^= null
		then do;
			rp -> reference.qualifier = encode_qual (rp -> reference.qualifier);

			if rp -> reference.qualifier ^= null
			then if rp -> reference.qualifier -> node.type = reference_node
			     then do;
				     scan_again =
					scan_again
					| ^rp -> reference.qualifier -> reference.symbol -> symbol.put_in_symtab;
				     rp -> reference.qualifier -> reference.symbol -> symbol.put_in_symtab = "1"b;
				end;
		     end;

	     ap = sp -> symbol.array;
	     if ap ^= null
	     then do;
		     ap -> array.symtab_virtual_origin = encode (ap -> array.virtual_origin);

		     do bp = ap -> array.bounds repeat bp -> bound.next while (bp ^= null);
			bp -> bound.symtab_lower = encode (bp -> bound.lower);
			bp -> bound.symtab_upper = encode (bp -> bound.upper);

			if bp -> bound.c_multiplier = 0
			then bp -> bound.symtab_multiplier = encode (bp -> bound.multiplier);
		     end;
		end;

	     sp -> symbol.symtab_processed = "1"b;

	     if sp -> symbol.son ^= null
	     then sp = sp -> symbol.son;
	     else do;
		     found_brother = "0"b;
		     do while (sp ^= null & ^found_brother);
			if sp -> symbol.brother = null
			then sp = sp -> symbol.father;
			else do;
				sp = sp -> symbol.brother;
				found_brother = "1"b;
			     end;
		     end;
		end;
	end;

	return;

/* This procedure encodes for the runtime symbol table one expression used as
   a size or bound on a symbol node.  It runs the semantic translator over the
   expression in case it has not been previously referenced in the program.
*/
encode:
     procedure (t) returns (ptr);

dcl	t		ptr unaligned;

dcl	convert_to_integer	bit (1) aligned;
dcl	tp		ptr;

	convert_to_integer = "1"b;
	goto common;

encode_qual:
     entry (t) returns (ptr);

	convert_to_integer = "0"b;

common:
	if t = null
	then return (t);

	if s2 = null
	then s2 = create_statement (unknown_statement, s1, null, ""b);
	else do;
		s2 -> statement.root = null;
		string (s2 -> statement.source_id) = string (pl1_stat_$statement_id);
	     end;

	s2 -> statement.put_in_profile = "0"b;

	tp = copy_expression (t);

	if sp -> symbol.refer_extents
	then tp = fill_refer (tp, ev_ref, "0"b);

	pl1_stat_$locator (1) = ev_based_var;
	pl1_stat_$index = 1;

	tp = semantic_translator$call_es (cb, s2, tp, fail, convert_to_integer);
	scan_again = "1"b;

	if tp ^= null
	then if tp -> node.type = operator_node
	     then if tp -> operator.op_code = loop | tp -> operator.op_code = join
		then do;
			call error (73, null, sp);

fail:
			call error (318, null, sp);
			return (null);
		     end;

	if ev_qual -> operator.operand (1) ^= ev_temp
	then do;
		call free_node ((ev_qual -> operator.operand (1)));
		ev_qual -> operator.operand (1) = ev_temp;
	     end;

	if ev_ref -> reference.qualifier ^= ev_qual
	then do;
		call free_node ((ev_ref -> reference.qualifier));
		ev_ref -> reference.qualifier = ev_qual;
	     end;

	if s1 -> statement.next ^= s2
	then do;
		s2 -> statement.root = tp;
		s2 = null;
		return (s1 -> statement.next);
	     end;

	return (tp);
     end encode;

     end process;

     end scan_symbol_table;

     end prepare_symbol_table;
