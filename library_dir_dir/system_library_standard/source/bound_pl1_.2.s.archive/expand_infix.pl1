/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	Modified:	781219 by RAB to fix 1806 (ERROR 316 for star_extent exprs)	*/
/*	Modified: 17 Mar 1980 by PCK to implement by name assignment	*/

expand_infix: proc(blk,stmnt,tree,context) returns(ptr);

dcl	(blk,stmnt,tree,a,b,p,r,first) ptr;
dcl	loop5 ptr init(null);
dcl	(i,n,k) fixed bin(15);
dcl	opcode bit(9) aligned;

dcl	pl1_stat_$LHS ptr ext static;

dcl	(null,string,substr) builtin;

	n = tree->operator.number;
	this_context = "0"b;
	def_this_context.by_name_assignment = def_context.by_name_assignment;
	a = tree->operand(n-1);
	b = tree->operand(n);
	if n=3 then first = tree->operand(1); else first = null;
	opcode = tree->op_code;

	if a->node.type = reference_node
	then	a = process(a,this_context);

	if b->node.type = reference_node
	then	b = process(b,this_context);

	if a->node.type=operator_node
	then	if a->op_code^=loop
		&  a->op_code^=join
		then	if a->op_code ^= std_call 
			then	a = simplify_scalar(a);
			else	a = process(a,"0"b);

	if b->node.type=operator_node
	then	if b->op_code^=loop
		&  b->op_code^=join
		then	if b->op_code ^= std_call
			then	b = simplify_scalar(b);
			else	b = process(b,"0"b);

	if a->node.type ^= operator_node
	then do;
		k = 2;
		r = walk(b);
		goto ret;
	end;

	if b->node.type ^= operator_node
	then do;
		k = 3;
		r = walk(a);
		goto ret;
	end;

			/*   Both operands are operators, now check for promotions from structures to
			     arrays of structures   */

	if a->op_code=loop & b->op_code=join
	then do;
		do p = a repeat p->operand(1) while(p->operand(1)->op_code=loop);
		end;

		p->operand(1) = match((p->operand(1)),b);

		r = a;
		goto ret;
	end;

	if a->op_code=join & b->op_code=loop
	then do;
		do p = b repeat p->operand(1) while(p->operand(1)->op_code=loop);
		end;

		p->operand(1) = match(a,(p->operand(1)));

		r = b;
		goto ret;
	end;

	r = match(a,b);

ret:
	if r->op_code=loop
	&  loop5^=null
	then do;
		do p = loop5 repeat p->element(1) while(p^=null);
			p->element(2) = share_expression((p->element(2)));
		end;

		if r->operand(5)=null
		then	r->operand(5) = loop5;
		else do;
			do p = r->operand(5) repeat p->element(1) while(p->element(1)^=null);
			end;

			p->element(1) = loop5;
		end;
	end;

	return(r);

process: proc(p,context) returns(ptr);

dcl	context bit(36) aligned;
dcl	(p,q) ptr;

	if p -> node.type = reference_node
	then	q = p;
	else	q = p->operand(1);

	if q->reference.symbol->symbol.structure
	|  q->reference.array_ref
	then	return(expand_primitive(blk,stmnt,q,context));
	else	return(simplify_scalar(p));

	end process;

/* subroutine to walk down the loop and join ops and create infix operators
   to incorporate a  scalar expression into an aggregate expression.  */

walk: proc(e) returns(ptr);

dcl	e ptr;
dcl	i fixed bin(15);

	if e->node.type = operator_node
	then	if e->op_code = loop
		then do;
			e->operand(1) = walk((e->operand(1)));
			return(e);
		end;

		else	if e->op_code = join
			then do;
				do i = 1 to e->operator.number;
					e->operand(i) = walk((e->operand(i)));
				end;
				return(e);
			end;

	if k=2
	then	return(match(share_expression(a),e));
	else	return(match(e,share_expression(b)));

	end walk;

/* subroutine to match to aggregate expressions and combine them.  */

match: proc(aa,bb) returns(ptr);

dcl	(a,b,aa,bb,p) ptr;
dcl	i fixed bin(15);

	a = aa;
	b = bb;

	if a->node.type ^= operator_node then go to scalar_a;
	if a->op_code ^= loop & a->op_code ^= join then go to scalar_a;
	if b->node.type ^= operator_node then go to scalar_b;
	if b->op_code ^= loop & b->op_code ^= join then go to scalar_b;

	if a->op_code^=b->op_code then goto fail;

	if a->op_code=loop
	then do;			/* both operands are arrays.  */
		if ^compare_expression((a->operand(4)),(b->operand(4)))
		then do;
			if  a->operand(4)->node.type=reference_node
			then if  a->operand(4)->reference.symbol->symbol.constant
			then if  b->operand(4)->node.type=reference_node
			then if  b->operand(4)->reference.symbol->symbol.constant
			then	goto fail;

			p = create_operator(bound_ck,4);
			p->operator.processed = "1"b;
			p->operand(1)=declare_temporary(integer_type,default_fix_bin_p,0,null);
			p->operand(2) = a->operand(4);
			p->operand(3) = b->operand(4);
			p->operand(4) = share_expression((p->operand(3)));
			a->operand(4) = p;
		end;

		a->operand(1) = match((a->operand(1)),(b->operand(1)));

		if b->operand(5)^=null
		then	if a->operand(5)=null
			then	a->operand(5) = b->operand(5);
			else do;
				do p = a->operand(5) repeat p->element(1) while(p->element(1)^=null);
				end;

				p->element(1) = b->operand(5);
			end;

		return(a);
	end;

	if a->operator.number ^= b->operator.number then go to fail;

	do i = 1 to a->operator.number;
		a->operand(i) = match((a->operand(i)),(b->operand(i)));
	end;

	return(a);

scalar_a:
	if b->node.type = operator_node
	then	if b->op_code = loop | b->op_code = join
		then	go to fail;

	go to combine;

scalar_b:
	if a->node.type = operator_node
	then	if a->op_code = loop | a->op_code = join
		then	go to fail;

combine:
	p = create_operator(opcode,n);
	p->operand(n-1) = a;
	p->operand(n)   = b;
			/*   May be called from builtin   */
	if first^=null
	then	p->operand(1) = first;
	else	p = operator_semantics(blk,stmnt,p,"0"b);

	return(p);

fail:
	call semantic_translator$abort(79,null);

	end match;

/* subroutine to remove a scalar sub-expression so that it is evaluated only once.   */

simplify_scalar:	proc(pp) returns(ptr);

dcl	(e,pp,p,q,st,sy,LHS_sy,r,ret_ptr) ptr;

	p = pp;

	if p->node.type=operator_node
	then do;
				/*   the std_call operator may have already been extracted   */
		if stmnt->statement.back->statement.root=p
		then	st = stmnt;
		else	st = create_statement(assignment_statement,(stmnt->statement.back),
				null,(stmnt->statement.prefix));


		st->statement.root = p;

		/* new symbol necessary to prevent optimizer's losing
		   temporary due to commoning of operator */

		q = create_symbol(blk,null,by_compiler);
		r = q->symbol.reference;

		r->reference = p->operand(1)->reference;
		q->symbol = r->reference.symbol->symbol;
		q->symbol.next = null;
		q->symbol.reference = r;
		r->reference.symbol = q;

		r->reference.shared = "0"b;
		r->reference.ref_count = 1;

		if p->op_code=std_call
		then do;
			r->reference.ref_count = 2;

			e = p->operand(3)->operand(2);
			e->element(e->list.number) = r;
		end;

		p->operand(1) = r;

		ret_ptr = r;

		goto ret1;
	end;

	if p->node.type = label_node
	then	return(p);

	if p->reference.offset^=null
	|  p->reference.length^=null
	|  p->reference.qualifier^=null
	then	goto create;

	if p->reference.symbol->node.type = label_node
	then	goto ret0;

	if p->reference.symbol->symbol.constant
	then	goto ret0;

	if p->reference.symbol->symbol.temporary
	then do;
		p->reference.ref_count = p->reference.ref_count - 1;
		ret_ptr = p;
		go to ret1;
	end;

	LHS_sy = pl1_stat_$LHS;
	if LHS_sy=null
	then	goto ret0;

	sy = p->reference.symbol;

	if LHS_sy->symbol.based
	|  LHS_sy->symbol.defined
	|  LHS_sy->symbol.parameter
	then do;
		if sy->symbol.member
		&  LHS_sy->symbol.structure
		then	goto create;

		if string(sy->symbol.attributes.data_type)=string(LHS_sy->symbol.attributes.data_type)
		then	goto create;
		else	goto ret0;
	end;

	if sy->symbol.dimensioned
	&  sy=LHS_sy
	then	goto create;

	if sy->symbol.member
	then do q = sy repeat q->symbol.father while(q^=null);
		if q=LHS_sy
		then	goto create;
	end;

	goto ret0;

create:
	st = create_statement(assignment_statement,(stmnt->statement.back),null,(stmnt->statement.prefix));
	r = create_operator(assign,2);
	sy = create_symbol(null,null,by_compiler);
	sy->symbol.temporary = "1"b;
	sy->symbol.reference->reference.shared = "0"b;
	sy->symbol.reference->reference.ref_count = 1;

	r->operand(1) = sy->symbol.reference;
	r->operand(2) = p;

	st->statement.root = expression_semantics(blk,st,r,"0"b);

	ret_ptr = r->operand(1);

ret1:
	/* this keeps temps from being released until after loop ends */

	if loop5=null
	then do;
		loop5 = create_list(2);
		loop5->element(2) = ret_ptr;
	end;
	else do;
		q = create_list(2);
		q->element(2) = ret_ptr;
		q->element(1) = loop5;
		loop5 = q;
	end;

	return(ret_ptr);

ret0:
	if ^ p -> reference.shared
	then	p->reference.ref_count = p->reference.ref_count - 1;

	return(p);

	end simplify_scalar;

%include semant;
%include declare_type;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include semantic_bits;
%include statement;
%include statement_types;
%include symbol;
%include system;

	end expand_infix;
