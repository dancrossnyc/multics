/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-07-10,RWaters), approve(89-07-10,MCR8121), audit(89-08-09,Vu),
     install(89-09-22,MR12.3-1073):
     Changed references to error 134 to 135.
                                                   END HISTORY COMMENTS */


/* Written: 26 Dec 1979 by PCK to implement by name assignment
 * Modified 06 June 89 by RWaters changed references to error msg 134 to 135
 */
/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,^elsestmt,dclind9 */
expand_by_name:
     procedure (blk, stmnt, tree);

/* parameters */

dcl      (blk, stmnt, tree) ptr parameter;

/* external static */

dcl      pl1_stat_$by_name_parts_tree ptr external static;
dcl      pl1_stat_$by_name_parts_free_list ptr external static;
dcl      pl1_stat_$by_name_free_list ptr external static;
dcl      pl1_stat_$by_name_ref_list ptr external static;

/* builtins */

dcl      (null, addr) builtin;

/* constants */

dcl      TRUE bit (1) aligned internal static options (constant) init ("1"b);
dcl      FALSE bit (1) aligned internal static options (constant) init ("0"b);

/* automatic */

dcl      root_of_any_struc ptr;

/* global variables (automatic) */

dcl      CUR_STMNT ptr;
dcl      ERR_REF ptr;
dcl      TARGET_LIST ptr;
dcl      NO_OF_TARGETS fixed bin;
dcl      ASSIGNMENT_GENERATED bit (1) aligned;

%page;
/* program */

	ASSIGNMENT_GENERATED = FALSE;
	TARGET_LIST = tree -> operand (1);
	CUR_STMNT = stmnt;
	NO_OF_TARGETS = TARGET_LIST -> list.number;

/* Recycle the by_name_agg nodes created in the last invocation
 * of expand_by_name
 */

	if pl1_stat_$by_name_parts_tree ^= null then
	     call free_by_name_parts_tree;

/* Recycle the list nodes (by_name_ref nodes) created in the last
 * invocation of expand_by_name
 */

	if pl1_stat_$by_name_ref_list ^= null then
	     call free_by_name_refs;

/* Indicate the context of the structure references to lookup */

	this_context = (36)"0"b;
	def_this_context.suppress_cross_ref = TRUE;
	def_this_context.by_name_lookup = TRUE;

/* Process the LHS references of the assignment statement */

	call traverse_target_list;

/* Process the RHS references of the assignment statement */

	call traverse_expression ((tree -> operand (2)));

/* At this point all structure references in the statement have been
 * located and now may now be expanded according to the definition
 * of by name assignment
 */

/* Get a pointer to the root of a structure, any will do. */

	root_of_any_struc = pl1_stat_$by_name_ref_list -> list.element (1);

/* Traverse the set of structures and generate assignment statements */

	call traverse_structures (root_of_any_struc);

/* Issue a warning if the by name expansion generated no assignment statements */

	if ^ASSIGNMENT_GENERATED then do;
	     call semantic_translator$error (380, null);
	     stmnt -> statement.statement_type = null_statement;
	     stmnt -> statement.root = null;
	     tree = null;
	end;
	else
	     call build_assignment;

	return;
%page;
/* Examine each target of the assign by name statement, verify
 * that each reference is to a structure or an array of structures,
 * and append each target reference to pl1_stat_$by_name_ref_list
 */
traverse_target_list:
     procedure ();

dcl      i fixed bin;
dcl      (targ_ptr, s) ptr;

/* Build a linked list of pointers to the symbol nodes
 * of the targets; verify that each reference is to a structure.
 */

	def_this_context.left_side = TRUE;

	do i = 1 to TARGET_LIST -> list.number;
	     targ_ptr = TARGET_LIST -> list.element (i);
	     ERR_REF = targ_ptr;

/* targ_ptr must point to either a reference or token node */

	     if targ_ptr -> node.type ^= token_node & targ_ptr -> node.type ^= reference_node then
		call semantic_translator$abort (378, ERR_REF);

/* All targets must be structures; therefore, they must be declared.  */

	     if ^lookup (blk, stmnt, targ_ptr, s, this_context) then
		call semantic_translator$abort (379, ERR_REF);

	     if s -> node.type = label_node then
		call semantic_translator$abort (135, ERR_REF);

	     if ^s -> symbol.structure then
		call semantic_translator$abort (379, ERR_REF);

/* Add symbol node pointer to list */

	     call append (s);

	end;

/* All references with left side context have been processed */

	def_this_context.left_side = FALSE;
	return;

     end traverse_target_list;
%page;
/* Traverses an expression recursively and searches for structure references
 * that are (1) not part of a qualifier, (2) not in an argument list,
 * and (3) not in a subscript list.  All other structure references are
 * saved in a list for later use in expanding the assignment statement
 */
traverse_expression:
     procedure (operand_ptr);

dcl      operand_ptr ptr parameter;

dcl      i fixed bin;
dcl      s ptr;

	if operand_ptr -> node.type = operator_node then
	     do i = 2 to operand_ptr -> operator.number;
		call traverse_expression ((operand_ptr -> operand (i)));
	     end;
	else if lookup (blk, stmnt, operand_ptr, s, this_context) then do;
						/* If it is a reference to a label, do nothing */

	     if s -> node.type ^= symbol_node then
		return;

/* If it is a reference to a structure, save the reference */

	     if s -> symbol.structure then
		call append (s);

	end;

	return;

     end traverse_expression;
%page;
/*
 * Append a node onto pl1_stat_$by_name_ref_list
 */
append:
     procedure (sym_ptr);

dcl      sym_ptr ptr parameter;

dcl      by_name_ref ptr;

	by_name_ref = get_by_name_ref ();

/* Points to symbol node of structure referenced in statement,
 * and is used as a cursor during the traversal of the structures
 */

	by_name_ref -> list.element (1) = sym_ptr;

/* Points to next node in list */

	by_name_ref -> list.element (2) = pl1_stat_$by_name_ref_list;

	pl1_stat_$by_name_ref_list = by_name_ref;

	return;

     end append;
%page;
/* Simultaneously traverses the collection of structures representing the 
 * structure references in the by name assignment statement.  During
 * the traversal, a tree, called the by name parts tree, is built.
 * It is a tree representation of the by name parts list discussed in
 * the ANSI PL/I standard.  It is used by expand_primitive to determine
 * how to expand structure references in the by name assignment into
 * a tree of join operators.
 *
 *   The algorithm proceeds as follows:
 *	(1) A structure is selected for preorder traversal.
 *
 *	(2) As it is being traversed, the other structures are checked for
 *	    the existance of nodes at the same level.  If no such
 *	    nodes exist, the traversal of the substructure rooted at this
 *	    node is terminated;  the traversal of the rest of the structure
 *	    is continued.
 *
 *	(3) Next, the other structures are checked for nodes at the same
 *	    level that have identifiers that match the identifier of
 *	    node of the structure being traversed.  If a structure exists
 *	    that does not satisfy this condition, the traversal of
 *	    the substructure is terminated as before.
 *
 *	(4) When a leaf of the structure is encountered, all other structures
 *	    are checked for the existance of leaves with matching
 *	    identifiers on the same level.   If the matching leaves
 *	    are found in every structure, an intersection is recorded
 *	    using the symbols corresponding to the leaves.  Otherwise,
 *	    the traversal is continued until completed.
 */
traverse_structures:
     procedure (root);

dcl      root ptr parameter;

/*  global variables (automatic) */

dcl      SUB_STRUC ptr;
dcl      CUR_BNA_NODE ptr;
dcl      TRAVERSE_STRUCTURE bit (1) aligned;

/* Assume that the root node has been matched. */

	SUB_STRUC = root;
	pl1_stat_$by_name_parts_tree = get_by_name_agg ();
	pl1_stat_$by_name_parts_tree -> by_name_agg.ok_to_free = FALSE;
	CUR_BNA_NODE = pl1_stat_$by_name_parts_tree;
	call push;

/* Simulate recursive walk of structure */

	TRAVERSE_STRUCTURE = TRUE;

	do while (TRAVERSE_STRUCTURE);
	     if matching_ids_exist (SUB_STRUC) then do;
		if SUB_STRUC -> symbol.son = null then do;
		     call record_intersection;
		     call pop;
		end;
		else
		     call push;
	     end;
	     else
		call pop;
	end;

/*
 * Push implicit stacks
 */
push:
     procedure ();

dcl      (bna, by_name_ref) ptr;

	SUB_STRUC = SUB_STRUC -> symbol.son;

	bna = get_by_name_agg ();

	bna -> by_name_agg.token = SUB_STRUC -> symbol.token;
	bna -> by_name_agg.father = CUR_BNA_NODE;
	CUR_BNA_NODE -> by_name_agg.son = bna;

	CUR_BNA_NODE = bna;

	by_name_ref = pl1_stat_$by_name_ref_list;
	do while (by_name_ref ^= null);
	     by_name_ref -> list.element (1) = by_name_ref -> list.element (1) -> symbol.son;
	     by_name_ref = by_name_ref -> list.element (2);
	end;

     end push;

/*
 * Pop implicit stacks until a brother or the root is found;
 * delete nodes from the by name aggregate tree where necessary
 */
pop:
     procedure ();

dcl      (bna, by_name_ref) ptr;

	if SUB_STRUC -> symbol.brother = null then
	     do while (SUB_STRUC -> symbol.brother = null);
		SUB_STRUC = SUB_STRUC -> symbol.father;
		bna = CUR_BNA_NODE;
		CUR_BNA_NODE = CUR_BNA_NODE -> by_name_agg.father;

		if bna -> by_name_agg.ok_to_free then do;

		     if bna -> by_name_agg.left_brother ^= null then
			bna -> by_name_agg.left_brother -> by_name_agg.right_brother = null;
		     else
			bna -> by_name_agg.father -> by_name_agg.son = null;

		     call free_by_name_agg (bna);
		end;

		if SUB_STRUC = root then do;
		     TRAVERSE_STRUCTURE = FALSE;
		     return;
		end;

		by_name_ref = pl1_stat_$by_name_ref_list;
		do while (by_name_ref ^= null);
		     by_name_ref -> list.element (1) = by_name_ref -> list.element (1) -> symbol.father;
		     by_name_ref = by_name_ref -> list.element (2);
		end;
	     end;

	SUB_STRUC = SUB_STRUC -> symbol.brother;

	if CUR_BNA_NODE -> by_name_agg.ok_to_free then
	     bna = CUR_BNA_NODE;
	else do;
	     bna = get_by_name_agg ();
	     bna -> by_name_agg.left_brother = CUR_BNA_NODE;
	     CUR_BNA_NODE -> by_name_agg.right_brother = bna;
	     bna -> by_name_agg.father = CUR_BNA_NODE -> by_name_agg.father;
	     CUR_BNA_NODE = bna;
	end;

	CUR_BNA_NODE -> by_name_agg.token = SUB_STRUC -> symbol.token;

	by_name_ref = pl1_stat_$by_name_ref_list;
	do while (by_name_ref ^= null);
	     by_name_ref -> list.element (1) = by_name_ref -> list.element (1) -> symbol.father -> symbol.son;
	     by_name_ref = by_name_ref -> list.element (2);
	end;

	return;

     end pop;

/*
 * Do symbol nodes with identical identifiers exist in all structures
 * being traversed
 */
matching_ids_exist:
     procedure (symbol_ptr) returns (bit (1) aligned);

dcl      symbol_ptr ptr parameter;

dcl      (token_ptr, to_be_matched_ptr, to_be_fixed_ptr, sym_to_be_matched) ptr;
dcl      match bit (1) aligned;

	token_ptr = symbol_ptr -> symbol.token;

/* Assume that a match is possible */

	match = TRUE;

/* Now traverse list of symbol node pointers matching identifiers if possible */

	to_be_matched_ptr = pl1_stat_$by_name_ref_list;
	do while (to_be_matched_ptr ^= null & match);
	     sym_to_be_matched = to_be_matched_ptr -> list.element (1);
	     match = FALSE;
	     do while (sym_to_be_matched ^= null & ^match);

/* Check for matching identifiers */

		if token_ptr = sym_to_be_matched -> symbol.token then
		     match = TRUE;
		else
		     sym_to_be_matched = sym_to_be_matched -> symbol.brother;
	     end;

/* If a match is possible, both symbols must have the same
 * structure attribute.
 */

	     if match then do;
		match = (symbol_ptr -> symbol.structure = sym_to_be_matched -> symbol.structure);

		if match then do;			/* A match occurred, record it */
		     to_be_matched_ptr -> list.element (1) = sym_to_be_matched;
		     to_be_matched_ptr = to_be_matched_ptr -> list.element (2);
		end;
	     end;
	end;

	return (match);

     end matching_ids_exist;

/*
 * Create a by name aggregate node
 */
get_by_name_agg:
     procedure () returns (ptr aligned);

dcl      1 pl1_nodes_template_$by_name_agg_template like by_name_agg aligned external static;
dcl      pl1_stat_$node_uses (32) fixed bin ext static;

dcl      bna ptr aligned;

/* Return a node from the free list if there are any;
 * otherwise allocate one
 */

	if pl1_stat_$by_name_parts_free_list ^= null then do;
	     bna = pl1_stat_$by_name_parts_free_list;
	     pl1_stat_$by_name_parts_free_list = pl1_stat_$by_name_parts_free_list -> by_name_agg.next;
	end;
	else do;
	     allocate by_name_agg set (bna) in (xeq_tree_area);
	     pl1_stat_$node_uses (20) = pl1_stat_$node_uses (20) + 1;
	end;

	bna -> by_name_agg = pl1_nodes_template_$by_name_agg_template;
	return (bna);

     end get_by_name_agg;

/*
 * Record an intersection--successful matchup of names
 */
record_intersection:
     procedure ();

dcl      bna ptr;

	bna = CUR_BNA_NODE;

/* Retain all the nodes in the bna tree from the current node,
 * a leaf, to the root
 */

	do while (bna -> by_name_agg.ok_to_free);
	     bna -> by_name_agg.ok_to_free = FALSE;
	     bna = bna -> by_name_agg.father;
	end;

	ASSIGNMENT_GENERATED = TRUE;

	return;

     end record_intersection;

     end traverse_structures;
%page;
/*
 * Transforms the by name assignment into a form acceptable
 * to expression_semantics
 */
build_assignment:
     procedure ();

dcl      (new_stmnt, new_assignment, LHS_symbol, LHS_reference) ptr;
dcl      targ_idx fixed bin;

	stmnt -> statement.expanded_by_name = TRUE;
	tree -> operator.op_code = assign;

	if NO_OF_TARGETS = 1 then
	     tree -> operator.operand (1) = TARGET_LIST -> list.element (1);
	else do;
	     LHS_symbol = create_symbol (null, null, by_compiler);
	     LHS_symbol -> symbol.temporary = TRUE;
	     LHS_reference = LHS_symbol -> symbol.reference;
	     LHS_reference -> reference.shared = FALSE;
	     LHS_reference -> reference.ref_count = NO_OF_TARGETS + 1;

	     tree -> operator.operand (1) = LHS_reference;

	     new_stmnt = stmnt;
	     do targ_idx = 1 to NO_OF_TARGETS;
		new_stmnt = create_statement (assignment_statement, new_stmnt, null, (stmnt -> statement.prefix));
		new_assignment = create_operator (assign, 2);
		new_assignment -> operand (1) = TARGET_LIST -> list.element (targ_idx);
		new_assignment -> operand (2) = LHS_reference;
		new_stmnt -> statement.generated = TRUE;
		new_stmnt -> statement.expanded_by_name = TRUE;
		new_stmnt -> statement.root = new_assignment;
	     end;
	end;

	return;

     end build_assignment;
%page;
/*
 * Creates list nodes for pl1_stat_$by_name_ref_list
 */
get_by_name_ref:
     procedure () returns (ptr);

dcl      by_name_ref ptr;

/* Recycle a node on the free list if possible */

	if pl1_stat_$by_name_free_list = null then
	     by_name_ref = create_list (2);
	else do;
	     by_name_ref = pl1_stat_$by_name_free_list;
	     pl1_stat_$by_name_free_list = by_name_ref -> list.element (2);
	     by_name_ref -> list.element (*) = null;
	end;

	return (by_name_ref);

     end get_by_name_ref;
%page;
/*
 * Free a by name aggregate node by putting it on the free list
 */
free_by_name_agg:
     procedure (bna);

dcl      bna ptr parameter;

	bna -> by_name_agg.next = pl1_stat_$by_name_parts_free_list;
	pl1_stat_$by_name_parts_free_list = bna;

	return;

     end free_by_name_agg;
%page;
/*
 * Put list nodes on pl1_stat_$by_name_ref_list on
 * pl1_stat_$by_name_free_list
 */
free_by_name_refs:
     procedure ();

dcl      by_name_ref ptr;

/* Find last entry of list and then append the whole list to the free list */

	by_name_ref = pl1_stat_$by_name_ref_list;
	do while (by_name_ref -> list.element (2) ^= null);
	     by_name_ref = by_name_ref -> list.element (2);
	end;

	by_name_ref -> list.element (2) = pl1_stat_$by_name_free_list;
	pl1_stat_$by_name_free_list = pl1_stat_$by_name_ref_list;
	pl1_stat_$by_name_ref_list = null;

	return;

     end free_by_name_refs;
%page;
/*
 * Free the nodes of the by_name_parts tree during a postorder traversal
 */
free_by_name_parts_tree:
     procedure ();

/* global variables (automatic) */

dcl      CUR_BNA ptr;
dcl      TRAVERSE_TREE bit (1);

	CUR_BNA = pl1_stat_$by_name_parts_tree;

/* Tree has no subtrees */

	if CUR_BNA -> by_name_agg.son = null then do;
	     call free_by_name_agg (CUR_BNA);
	     pl1_stat_$by_name_parts_tree = null;
	     return;
	end;

/* Tree has at least 1 subtree */

	TRAVERSE_TREE = TRUE;

	do while (TRAVERSE_TREE);
	     if CUR_BNA -> by_name_agg.son = null then
		call pop;
	     else
		CUR_BNA = CUR_BNA -> by_name_agg.son;
	end;

	return;

/*
 * Pop implicit stacks freeing nodes as they are encountered
 */
pop:
     procedure ();

dcl      bna ptr;

	if CUR_BNA -> by_name_agg.right_brother = null then
	     do while (CUR_BNA -> by_name_agg.right_brother = null);
		bna = CUR_BNA;
		CUR_BNA = CUR_BNA -> by_name_agg.father;
		call free_by_name_agg (bna);

		if CUR_BNA = pl1_stat_$by_name_parts_tree then do;
		     call free_by_name_agg (CUR_BNA);
		     pl1_stat_$by_name_parts_tree = null;
		     TRAVERSE_TREE = FALSE;
		     return;
		end;

	     end;

	bna = CUR_BNA;
	CUR_BNA = CUR_BNA -> by_name_agg.right_brother;
	call free_by_name_agg (bna);

	return;

     end pop;

     end free_by_name_parts_tree;
%page;
%include by_name_agg;
%page;
%include declare_type;
%page;
%include list;
%page;
%include nodes;
%page;
%include op_codes;
%page;
%include operator;
%page;
%include pl1_tree_areas;
%page;
%include reference;
%page;
%include semant;
%page;
%include semantic_bits;
%page;
%include symbol;
%page;
%include statement_types;
%page;
%include statement;

     end expand_by_name;


