/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


memo_delete_: proc (P_msp, P_idx, P_force_sw);

dcl (P_msp pointer, 				/* memo segment pointer */
     P_idx fixed bin,				/* which memo to delete */
     P_force_sw bit (1) aligned) parameter;		/* whether to delete immature memos without asking */

dcl  success bit (1);
dcl  n fixed bin (35);
dcl  memo_idx fixed bin;				/* which entry in memo_segment to be deleted */
dcl  based_bit36 bit (36) aligned based;
dcl (old_n, new_n) bit (36) aligned;
dcl  maturity_time fixed bin (71);
dcl  answer char (32) varying;

dcl  command_query_ entry options (variable);
dcl  memo_util_$end_of_memo_time entry () returns (fixed bin (35));
dcl  memo_util_$to_gmt entry (fixed bin (35)) returns (fixed bin (71));

dcl  whoami char (32) internal static options (constant) init ("memo");

dcl (addr, clock, null, stacq, unspec) builtin;

/*  */

/* *	If this is the last memo, decrement the high-water mark counter. The stacq
   *	builtin can do so uninterruptibly. (necessary because there is no lock
   *	on the counter itself). If it fails, it means that someone has changed the
   *	value in the meantime, so we do nothing. */

	memo_segment_ptr = P_msp;
	memo_idx = P_idx;

	n = memo_segment.max_number_used;
	old_n = unspec (n);
	n = n - 1;
	new_n = unspec (n);
	n = n + 1;

	if memo_idx = n then
	     success = stacq (addr (memo_segment.max_number_used) -> based_bit36, old_n, new_n);

	maturity_time = memo_util_$to_gmt (memo_entry (P_idx).time);

	if (maturity_time > clock ()) & ^P_force_sw then do; /* don't delete immature memos without asking first */
	     query_info.version = query_info_version_5;
	     query_info.yes_or_no_sw = "1"b;
	     query_info.suppress_spacing = "1"b;
	     call command_query_ (addr (query_info), answer, whoami,
		"Memo ^d is ^[invisible^;not mature^]. Delete?^2x",
		memo_idx, (memo_entry (memo_idx).time >= memo_util_$end_of_memo_time ()));
	     if answer ^= "yes" then return;		/* just give up */
	     end;

	unspec (memo_entry (memo_idx)) = ""b;		/* zero out entire memo for quota reasons */

	return;					/* all done */
%page; %include memo_segment;
%page; %include query_info;

	end;					/* external procedure memo_delete_ */
