/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


memo_set_: proc (P_msp, P_message, P_flags, P_time, P_exp_delta, P_repeat) returns (fixed bin);

/* *	Ths procedure finds a new memo slot, and sets the memo in that slot, returning the slot number
   *
   *	June, 1979, W. Olin Sibert
   */

dcl (P_msp pointer,
     P_message char (*),				/* what the memo-to-be-set's data entry will be */
     P_flags bit (36) aligned,			/* string of flag bits */
     P_time fixed bin (35),				/* the time field of the new memo */
     P_exp_delta fixed bin (35),
     P_repeat char (*)) parameter;			/* the repeat string */

dcl  idx fixed bin;

dcl (stac, string, addr, max) builtin;

/*  */

	memo_segment_ptr = P_msp;
	idx = 0;

LOOP:	idx = idx + 1;				/* look at next entry */
	if ^stac (addr (memo_entry (idx)), "1"b) then goto LOOP; /* if it's not free (i.e. "0"b) then get next entry */

	string (memo_entry (idx).flags) = P_flags;	/* stac sets taken, this sets flags to flags desired */
	memo_entry (idx).time = P_time; 		/* set the rest of the fields */
	memo_entry (idx).data = P_message;
	memo_entry (idx).exp_delta = P_exp_delta;
	memo_entry (idx).repeat = P_repeat;
	memo_segment.max_number_used = max (idx, memo_segment.max_number_used);
						/* remember the furthest we went in the seg */

	return (idx);				/* return the number of the new entry */
%page; %include memo_segment;

	end;					/* external procedure memo_set_ */
