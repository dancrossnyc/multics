/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-09-06,Flegel), approve(88-11-16,MCR8022), audit(88-12-14,Lee),
     install(89-01-23,MR12.3-1010):
     phx21095 - When (per_process and repeatsw) are on, the list will
     show "repeat_when_processed" instead of "per_process".  This is more
     descriptive.
                                                   END HISTORY COMMENTS */



memo_list_: proc (P_msp, P_idx, P_options);

/* *	This procedure lists a particular memo on the terminal. Presently, there is only
   *	one format for the listing, but the P_options string exists for expandability.
   *
   *	June, 1979, W. Olin Sibert
   */

dcl (P_msp pointer,
     P_idx fixed bin,
     P_options bit (*)) parameter;

dcl  prefix_string char (128) varying;
dcl  suffix_string char (128) varying;
dcl  idx fixed bin;
dcl  iocb pointer;

dcl  iox_$user_output pointer external static;

dcl  date_time_ entry (fixed bin (71), char (*));
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  memo_util_$end_of_memo_time entry () returns (fixed bin (35));
dcl  memo_util_$to_gmt entry (fixed bin (35)) returns (fixed bin (71));

dcl (addr, substr, length, mod, multiply, divide) builtin;

/*  */

	memo_segment_ptr = P_msp;
	idx = P_idx;
	iocb = iox_$user_output;

	if memo_entry (idx).time < memo_util_$end_of_memo_time () then /* if a real memo, not invisible kludge */
	     prefix_string = format_time (memo_util_$to_gmt (memo_entry (idx).time)); /* add the formatted time string */
	else prefix_string = " ---- Invisible ---- ";

	suffix_string = "";

	if memo_entry (idx).flags.execute then
	     suffix_string = suffix_string || " call,";
	if memo_entry (idx).flags.alarm then
	     suffix_string = suffix_string || " alarm,";
	if memo_entry (idx).flags.single then
	     suffix_string = suffix_string || " single,";
	if memo_entry (idx).flags.remains then
	     suffix_string = suffix_string || " remains,";
/* MF - begin phx21095 */
	if memo_entry (idx).flags.per_process & memo_entry (idx).flags.repeatsw then
	     suffix_string = suffix_string || " repeat_when_processed,";
/* MF - end phx21095 */

	if memo_entry (idx).flags.repeatsw then
	     suffix_string = suffix_string || " """ || rtrim (memo_entry (idx).repeat) || """,";
	if memo_entry (idx).flags.expires then
	     suffix_string = suffix_string || " expires " ||
		format_time (memo_util_$to_gmt (memo_entry (idx).time + memo_entry (idx).exp_delta)) || ",";

	if length (suffix_string) > 0 then
	     suffix_string = "(" || substr (suffix_string, 2, length (suffix_string) - 2) || ")";

	call ioa_$ioa_switch (iocb, "^3d)^x^va^2x^a^2x^a", idx,
	     length (prefix_string), prefix_string, memo_entry (idx).data, suffix_string);

	return;					/* all done with a single listing */

/*  */

format_time: proc (P_clock) returns (char (40) varying);

/* *	This procedure formats a time for printing, in the standard "memo" format. */

dcl  P_clock fixed bin (71) parameter;

dcl  return_str char (32);
dcl  date_str char (32);
dcl  seconds fixed bin;

	call date_time_ (P_clock, date_str);
	seconds = mod (divide (P_clock, 1000000, 35, 0), 60);

	call ioa_$rsnnl ("^3a^x^8a^x^2a:^2a:^2d", return_str, (0),
	     substr (date_str, 22, 3),		/* day name (3 chars) */
	     substr (date_str, 1, 8), 		/* MM/DD/YY */
	     substr (date_str, 11, 2),		/* HH */
	     substr (date_str, 13, 2),		/* MM */
	     seconds);				/* SS */

	if seconds < 10 then			/* insert a leading zero, cause ioa_ don't know how */
	     substr (return_str, 20, 1) = "0";

	return (rtrim (return_str));
	end;					/* internal procedure format_time */



memo_list_$format_time: entry (P_clock) returns (char (40) varying);

/* *	This is just an external entrypoint for accessing the time formatter */

dcl  P_clock fixed bin (71) parameter;

	return (format_time (P_clock));

%page; %include memo_segment;

	end;					/* external procedure memo_list_ */
