/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-15,Rauschelbach), approve(86-07-15,MCR7472),
     audit(86-08-05,GJohnson), install(86-08-08,MR12.0-1122):
     Changed to pass have_write_access back to memo.
  2) change(86-08-25,Lippard), approve(86-07-15,PBF7472),
     audit(86-09-10,GWMay), install(86-09-11,MR12.0-1152):
     Changed to use have_write_access as an *input* argument.
                                                   END HISTORY COMMENTS */


memo_process_memos_: proc (P_msp, P_select_bits, P_memo_time_now, P_have_write_access);

/* *	This procedure is invoked both by a command invocation of memo (with no explicitly
   *	specified options) and by the alarm timer, to print, execute, reschedule, etc.
   *
   *	June, 1979, W. Olin Sibert
   */

dcl (P_msp pointer,
     P_select_bits (*) bit (1) unaligned,
     P_memo_time_now fixed bin (35),
     P_have_write_access bit (1) aligned) parameter;

dcl  idx fixed bin;
dcl  iocb pointer;
dcl  temp fixed bin;
dcl  code fixed bin (35);
dcl  have_write_access bit (1) aligned;
dcl  expires_sw bit (1) aligned;
dcl  complain_about_write_access bit (1) aligned;

dcl  iox_$user_io pointer external static;
dcl  iox_$user_output pointer external static;

dcl  com_err_ entry options (variable);
dcl  cu_$cp entry (pointer, fixed bin (21), fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  memo_delete_ entry (pointer, fixed bin, bit (1) aligned);
dcl  memo_repeat_ entry (pointer, fixed bin, fixed bin (35), fixed bin (35)) returns (fixed bin);

dcl  WHOAMI char (32) internal static options (constant) init ("memo");

dcl (addr, length, rtrim) builtin;

/*  */

	memo_segment_ptr = P_msp;
	have_write_access = P_have_write_access;

	complain_about_write_access = "1"b;

	do idx = 1 to memo_segment.max_number_used;
	     if P_select_bits (idx) = "1"b then do;	/* this one is selected */
		expires_sw = "0"b;

		if memo_entry (idx).flags.expires then do; /* is this one supposed to expire? */
		     if memo_entry (idx).time + memo_entry (idx).exp_delta < P_memo_time_now then do;
			expires_sw = "1"b;		/* its time has come -- set it up to expire, and */
			goto SKIP_PROCESSING;	/* go to the code to reschedule/delete it */
			end;
		     end;

		if memo_entry (idx).flags.single then	/* this one gets processed once, and then expires */
		     expires_sw = "1"b;		/* just let it fall through and die */

		if memo_entry (idx).flags.execute then do; /* call the command processor */
		     call cu_$cp (addr (memo_entry (idx).data), length (rtrim (memo_entry (idx).data)), code);

		     if code ^= 0 then do;		/* explain what happened */
			call com_err_ (0, WHOAMI, "Command processor was invoked by ^[alarm ^]memo ^d:^/^3x^a",
			     memo_entry (idx).flags.alarm, idx, memo_entry (idx).data);

			if memo_entry (idx).flags.repeatsw then /* and warn about this */
			     call com_err_ (0, WHOAMI, "This memo will not be rescheduled.");

			if have_write_access then	/* avoid faults */
			     memo_entry (idx).flags.repeatsw = "0"b;
			end;			/* of case for command processor error */
		     end; 			/* of case for call memos */

		else do;
		     if memo_entry (idx).flags.alarm then
			iocb = iox_$user_io;
		     else iocb = iox_$user_output;

		     call ioa_$ioa_switch (iocb, "^[memo: (^d)^;^3d)^]^2x^a",
			memo_entry (idx).flags.alarm, idx, memo_entry (idx).data);
		     end;

SKIP_PROCESSING:					/* old memos come here to die (or get rescheduled) */
		if memo_entry (idx).repeatsw then do;	/* repeat it, if necessary */
		     if have_write_access then temp = memo_repeat_
			(memo_segment_ptr, idx, P_memo_time_now, (0));
		     else if complain_about_write_access then do;
			     call com_err_ (0, WHOAMI,
				"No write access on memo segment. Cannot reschedule repeating memo ^d.", idx);
			     complain_about_write_access = "0"b;
			     end;
		     end;

		if memo_entry (idx).flags.alarm & ^memo_entry (idx).flags.remains then
		     expires_sw = "1"b;		/* non remaining alarm memos expire here, as well */

		if memo_entry (idx).flags.remains then do; /* turn off some bits here, if we can */
		     if memo_entry (idx).flags.alarm | memo_entry (idx).flags.repeatsw then do;
			if have_write_access then do;
			     memo_entry (idx).flags.alarm = "0"b;
			     memo_entry (idx).flags.repeatsw = "0"b;
			     end;

			else if complain_about_write_access then do;
			     call com_err_ (0, WHOAMI,
				"No write access on memo segment. Cannot process ""remain"" memo ^d.", idx);
			     complain_about_write_access = "0"b;
			     end;
			end;
		     end; 			/* of processing for "remain" type memos */

		if expires_sw then do;
		     if have_write_access then
			call memo_delete_ (memo_segment_ptr, idx, "1"b);
		     else if complain_about_write_access then do;
			     call com_err_ (0, WHOAMI,
				"No write access on memo segment. Cannot delete alarm memo ^d.", idx);
			     complain_about_write_access = "0"b;
			     end;
		     end;
		end;				/* of case for selected memo */
	     end; 				/* of loop through memos */

	return;
%page; %include memo_segment;

	end;					/* external procedure memo_process_memos_ */
