/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to apply the retain/delete/no_link options to the
     definitions in each component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_apply_def_options_:
  proc (lecp,			/** components pointer  (i/o)	*/
       leop);			/** options pointer	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_apply_def_options_			*/
  /***	Input:	lecp, leop				*/
  /***	Function:	applies the definition retain/delete/no_link	*/
  /***		options to the definitions in the definition	*/
  /***		table prior to link resolution so that no_link	*/
  /***		defs are handled correctly.			*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl lecp		ptr parameter;
  dcl leop		ptr parameter;

  /* procedures */

  dcl le_debug_		entry options (variable);
  dcl le_error_		entry options (variable);
  dcl match_star_name_	entry (char (*), char (*), fixed bin (35));

  /* external */

  dcl error_table_$nomatch	external fixed bin (35);
  dcl le_et_$implementation_error
			external fixed bin (35);
  dcl le_et_$unused_option	external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;
  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  /* automatic */

  dcl c			fixed bin automatic;
  dcl d			fixed bin automatic;
  dcl ledp		ptr automatic;
  dcl lesp		ptr automatic;
  dcl o			fixed bin automatic;
  dcl optx		fixed bin automatic;
  dcl type		fixed bin automatic;

  /* builtin */
  
  dcl mod			builtin;
  dcl null		builtin;
  
  call le_debug_ ("Beginning definition option application.");

  /* for each component . . . */

  do c = 1 to lec.n_components;
    ledp = lec.comp (c).tables.ledp;
    lesp = lec.comp (c).tables.lesp;

    /* for each definition . . . */

    if ledp ^= null
      then
        do d = 1 to led.n_defs;

        optx = None;
        type = RETAIN;

        /* search the option table for the first matching option */

        do o = 1 to leo.n_opts while (optx = None);

	if match (lesp, ledp, leop, d, o)
	  then do;
	    optx = o;
	    type = leo.opt (o).type;
	  end;
        end;

        call le_debug_ ("entry ^a will be " ||
	   "^[retained^;deleted^;left unlinked^]" ||
	   "^/   ^[by default.^s^s^s^;as per option " ||
	   """^[retain^;delete^;no_link^] ^a$^a"".^]",
	   led.def (d).str, (type - RETAIN + 1), (optx = None),
	   (type - RETAIN + 1), leo.opt (optx).segname,
	   leo.opt (optx).ep_name);
        
        /* mark the option as used */
        
        leo.opt (optx).used = true;
        
        /* set the definition disposition flags */

        if type = RETAIN
	then led.def (d).flags.retain = true;
        else if type = DELETE
	then led.def (d).flags.delete = true;
        else if type = NO_LINK
	then do;
	  led.def (d).flags.retain = true;
	  led.def (d).flags.no_link = true;
	end;
        else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	        "^/Option found in option table was not of type" ||
	        " RETAIN, DELETE or NO_LINK.");
      end;
  end;

  /* check the definition options for unused options */
  
  do optx = 1 to leo.n_opts;
    if ^leo.opt (optx).inhibit_error & ^leo.opt (optx).used
      then do;
        if leo.opt (optx).class = 9
	then call le_error_ (LE_WARNING, le_et_$unused_option,
	     "^/global ""^[retain^;delete^;no_link^]""",
	     leo.opt (optx).type - RETAIN + 1);
	else call le_error_ (LE_WARNING, le_et_$unused_option,
	     "^/^[retain^;delete^;no_link^] ^[^s^;^a$^]^[^s^;^a^]",
	     leo.opt (optx).type - RETAIN + 1,
	     (mod (leo.opt (optx).class, 3) = 0), leo.opt (optx).segname,
	     (leo.opt (optx).class > 6), leo.opt (optx).ep_name);
      end;
  end;
  	   
  call le_debug_ ("Completed definition option application.^2/");

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


match:
  proc (lesp,			/** segnames pointer    (in )	*/
       ledp,			/** definitions pointer (in ) */
       leop,			/** options pointer	    (in ) */
       d,				/** definition index    (in ) */
       o)				/** option index	    (in ) */
       returns (bit (1));		/** match switch	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	match					*/
  /***	Input:	lesp, ledp, leop, d, o			*/
  /***	Function:	determines if the definition given by d paired	*/
  /***		with any of the segnames in the containing block	*/
  /***		match the starnames given in the option specified	*/
  /***		by o.					*/
  /***	Output:	match_sw					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl class		(1:9) label init (specific_segname_and_ep,
			star_segname_and_specific_ep,
			any_segname_and_specific_ep,
			specific_segname_and_star_ep,
			star_segname_and_ep,
			any_segname_and_star_ep,
			specific_segname_and_any_ep,
			star_segname_and_any_ep,
			any_segname_and_ep);

  /* parameters */

  dcl d			fixed bin parameter;
  dcl ledp		ptr parameter;
  dcl leop		ptr parameter;
  dcl lesp		ptr parameter;
  dcl o			fixed bin parameter;

  /* based */

  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;
  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  /* automatic */

  dcl defn		char (256) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl match_sw		bit (1) automatic;
  dcl optn		char (256) automatic;
  dcl segn		char (32) automatic;

  segn = leo.opt (o).segname;
  optn = leo.opt (o).ep_name;
  defn = led.def (d).str;

  /* select determination method depending on ordering class of option */

  goto class (leo.opt (o).class);

specific_segname_and_ep:
  if optn ^= defn
    then match_sw = false;
    else match_sw = literal_sn_match (lesp, segn);

  goto DONE;

star_segname_and_specific_ep:
  if optn ^= defn
    then match_sw = false;
    else match_sw = star_sn_match (lesp, segn);

  goto DONE;

any_segname_and_specific_ep:
  if optn = defn
    then match_sw = true;
    else match_sw = false;

  goto DONE;

specific_segname_and_star_ep:
  call match_star_name_ (defn, optn, ec);
  if ec = 0
    then match_sw = literal_sn_match (lesp, segn);
  else if ec = error_table_$nomatch
    then match_sw = false;
  else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	  "^/Bad starname detected during option application.");

  goto DONE;

star_segname_and_ep:
  call match_star_name_ (defn, optn, ec);
  if ec = 0
    then match_sw = star_sn_match (lesp, segn);
  else if ec = error_table_$nomatch
    then match_sw = false;
  else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	  "^/Bad starname detected during option application.");

  goto DONE;

any_segname_and_star_ep:
  call match_star_name_ (defn, optn, ec);
  if ec = 0
    then match_sw = true;
  else if ec = error_table_$nomatch
    then match_sw = false;
  else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	  "^/Bad starname detected during option application.");

  goto DONE;

specific_segname_and_any_ep:
  match_sw = literal_sn_match (lesp, segn);

  goto DONE;

star_segname_and_any_ep:
  match_sw = star_sn_match (lesp, segn);

  goto DONE;

any_segname_and_ep:
  match_sw = true;

DONE:
  return (match_sw);

  end match;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


literal_sn_match:
  proc (lesp,			/** segnames pointer    (in )	*/
       name)			/** name to match	    (in ) */
       returns (bit (1));		/** match sw	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	literal_sn_match				*/
  /***	Input:	lesp, name				*/
  /***	Function:	scans the segname block identified by blockx in	*/
  /***		the segname table for a segname which literally	*/
  /***		matches name.				*/
  /***	Output:	match_sw					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lesp		ptr parameter;
  dcl name		char (32) parameter;

  /* based */

  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (0 refer (les.n_segnames))
			like le_segnames.segname;

  /* automatic */

  dcl s			fixed bin automatic;

  /* scan the segname table for a match */

  do s = 1 to les.n_segnames;
    if les.segname (s).str = name
      then return (true);
  end;

  return (false);

  end literal_sn_match;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


star_sn_match:
  proc (lesp,			/** segnames pointer    (in )	*/
       name)			/** star name to match  (in ) */
       returns (bit (1));		/** match sw	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	star_sn_match				*/
  /***	Input:	lesp, name				*/
  /***	Function:	scans the segname block identified by blockx in	*/
  /***		the segname table for a segname which matches	*/
  /***		the starname name using standard Multics star	*/
  /***		conventions.				*/
  /***	Output:	match_sw					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lesp		ptr parameter;
  dcl name		char (32) parameter;

  /* based */

  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (0 refer (les.n_segnames))
			like le_segnames.segname;

  /* automatic */

  dcl s			fixed bin automatic;
  dcl ec			fixed bin (35) automatic;

  /* scan the segname table for a match */

  do s = 1 to les.n_segnames;
    call match_star_name_ ((les.segname (s).str), name, ec);
    if ec = 0
      then return (true);
    else if ec ^= error_table_$nomatch
      then call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	      "^/Bad starname detected during option application.");
  end;

  return (false);

  end star_sn_match;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include le_input;

  end le_apply_def_options_;

