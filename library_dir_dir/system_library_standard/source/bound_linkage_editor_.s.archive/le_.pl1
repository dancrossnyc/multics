/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written as the subroutine interface to the linkage editor.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_:
  proc (leip,			/** le_info pointer	    (in )	*/
       severity,			/** max error severity  (out) */
       code);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_					*/
  /***	Input:	leip					*/
  /***	Function:	This is the multics linkage_editor subroutine	*/
  /***		interface.  It takes as input a structure which	*/
  /***		consists of a set of flags, an output pathname,	*/
  /***		and a list of options which specify the input	*/
  /***		binaries to be included, any library binaries,	*/
  /***		synonyms, addnames, and retention and deletion	*/
  /***		options for the entire output, one component, or	*/
  /***		a single entrypoint.			*/
  /***	Output:	severity, code				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  /* parameters */

  dcl leip		ptr parameter;
  dcl severity		fixed bin parameter;
  dcl code		fixed bin (35) parameter;

  /* procedures */

  dcl define_area_		entry (ptr, fixed bin (35));
  dcl get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
  dcl hash_$search		entry (ptr, char (*), bit (36) aligned,
			fixed bin (35));
  dcl hcs_$chname_file	entry (char(*), char(*), char(*), char(*),
		          fixed bin(35));
  dcl le_apply_def_options_	entry (ptr, ptr);
  dcl le_combine_init_info_	entry (ptr);
  dcl le_complete_binary_	entry (ptr, ptr);
  dcl le_create_binary_	entry (ptr, char (*), char (*), fixed bin,
			bit (1), char (*), char (*));
  dcl le_create_list_	entry (ptr, ptr, char (*), char (*), bit (1));
  dcl le_error_		entry options (variable);
  dcl le_make_comp_tbl_	entry (ptr, ptr);
  dcl le_make_component_	entry (char (*), char (*), ptr, ptr, ptr,
			fixed bin, fixed bin);
  dcl le_make_link_tbl_	entry (ptr, ptr, ptr);
  dcl le_make_opt_tbl_	entry (ptr, ptr);
  dcl le_make_segname_tbl_	entry (ptr, ptr, ptr, ptr);
  dcl le_msf_partition_	entry (ptr, fixed bin, fixed bin);
  dcl nd_handler_		entry (char(*), char(*), char(*),
		          fixed bin(35));
  dcl nd_handler_$force	entry (char(*), char(*), char(*),
		          fixed bin(35));
  dcl release_area_		entry (ptr);
  dcl release_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));

  /* external */

  dcl error_table_$dup_ent_name
			external fixed bin (35);
  dcl error_table_$namedup	external fixed bin (35);
  dcl error_table_$noentry	external fixed bin (35);
  dcl error_table_$segnamedup external fixed bin (35);
  dcl error_table_$translation_failed
			external fixed bin (35);
  dcl le_data_$caller	external char (32) varying;
  dcl le_data_$debug	external bit (1);
  dcl le_data_$display_severity
			external fixed bin;
  dcl le_data_$max_severity	external fixed bin;
  dcl le_data_$patch_ptr	external ptr;
  dcl le_data_$running	external bit (1);
  dcl le_et_$recursive_invocation
			external fixed bin (35);
  dcl sys_info$max_seg_size	external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (ts.lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;
  dcl 01 ts		aligned based (addr (temp_segs (1))),
       02 lecp		ptr,
       02 leop		ptr,
       02 leshp		ptr,
       02 lebp		ptr,
       02 lepp		ptr;

  /* automatic */

  dcl 01 ai		aligned like area_info automatic;
  dcl bits		aligned bit (36) automatic;
  dcl c			fixed bin automatic;
  dcl done		bit (1) automatic;
  dcl dname		char (168) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl ename		char (32) automatic;
  dcl i			fixed bin automatic;
  dcl leap		ptr automatic;
  dcl n_components		fixed bin automatic;
  dcl temp_segs		(1:5) aligned ptr automatic;

  /* conditions */

  dcl cleanup		condition;
  dcl le_abort_		condition;

  /* builtin */

  dcl addr		builtin;
  dcl char		builtin;
  dcl ltrim		builtin;
  dcl null		builtin;
  dcl rtrim		builtin;
  dcl unspec		builtin;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


  /* initialize le_data_ static variables */

  le_data_$max_severity = 0;
  le_data_$display_severity = lei.display_severity;
  le_data_$debug = lei.flags.debug;
  le_data_$caller = rtrim (lei.header.name);

  temp_segs (1) = null;
  leap = null;

  on le_abort_ goto ABORT;

  on cleanup
    begin;
    if temp_segs (1) ^= null
      then call release_temp_segments_ ((le_data_$caller), temp_segs, 0);
    if leap ^= null
      then call release_area_ (leap);
    le_data_$running = false;
  end;

  /* see if we have a recursive invocation */

  if le_data_$running
    then do;
      call le_error_ (LE_FATAL_ERROR, le_et_$recursive_invocation, "");
      severity = le_data_$max_severity;
      code = error_table_$translation_failed;
      return;
    end;

  le_data_$running = true;

  /* create the area for table allocation */

  unspec (ai) = ""b;

  ai.version = area_info_version_1;
  ai.control.extend = true;
  ai.control.no_freeing = true;
  ai.owner = le_data_$caller;
  ai.size = sys_info$max_seg_size;
  ai.areap = null;

  call define_area_ (addr (ai), ec);
  leap = ai.areap;

  /* get temp segments for extensible tables */

  call get_temp_segments_ ((le_data_$caller), temp_segs, ec);

  /* give the backpatch facility a segment to use */

  le_data_$patch_ptr = ts.lepp;

  /*  1) create option table					*/

  call le_make_opt_tbl_ (leip, ts.leop);

  /* note that until we actually start to emit object, we can keep	*/
  /* going with any severity less than 3 so as to get the most info	*/
  /* to the user regardless of what severity was given as abort.	*/

  call severity_check (LE_FATAL_ERROR);

  /*  2) create component table				*/

  call le_make_comp_tbl_ (leip, ts.lecp);
  call severity_check (LE_FATAL_ERROR);

  /*  3) create segname table					*/

  call le_make_segname_tbl_ (leip, ts.lecp, ts.leshp, leap);
  call severity_check (LE_FATAL_ERROR);

  /*  4) apply the options to the definitions extracted		*/

  call le_apply_def_options_ (ts.lecp, ts.leop);
  call severity_check (LE_FATAL_ERROR);

  /*  5) recursive link resolution through path and library links	*/

  call le_make_link_tbl_ (ts.lecp, ts.leshp, leap);
  call severity_check (LE_FATAL_ERROR);

  /* determine if the new object should have its perprocess_static	*/
  /* switch on						*/

  lec.flags.perprocess_static = lei.flags.perprocess_static;

  /* determine if the new object should have separate static sections	*/

  done = false;
  lec.header.flags.separate_static = false;

  do c = 1 to lec.n_components while (^done);
    if lec.comp (c).flags.include & lec.comp (c).orig.statl > 0
      then do;
        if ^lec.comp (c).flags.separate_static
	then do;
	  lec.header.flags.separate_static = false;
	  done = true;
	end;
	else lec.header.flags.separate_static = true;
      end;
  end;

  /*  6) partition into MSF components				*/

  call le_msf_partition_ (lecp, lei.component_size, n_components);
  call severity_check (LE_FATAL_ERROR);

  /*  7) resolve init_infos into 1 init_info/external variable	*/

  call le_combine_init_info_ (ts.lecp);
  call severity_check (LE_FATAL_ERROR);

  /*  8) insure that the component block segnames don't conflict with	*/
  /*     anything.						*/

  if n_components = 1
    then do;
      call hash_$search (leshp, lei.output_file.entry, bits, ec);
      if ec ^= error_table_$noentry
        then call le_error_ (LE_FATAL_ERROR, error_table_$dup_ent_name,
	        "^/Name ^a on bound segment " ||
	        "conflicts with another segname.",
	        lei.output_file.entry);
    end;
    else do;
      do i = 1 to n_components;
        ename = rtrim (lei.output_file.entry) || ltrim (rtrim (char (i)));
        call hash_$search (leshp, ename, bits, ec);
        if ec ^= error_table_$noentry
	then call le_error_ (LE_FATAL_ERROR, error_table_$dup_ent_name,
		"^/Name ^a on bound segment " ||
		"conflicts with another segname.",
		ename);
      end;
    end;

  /* from now on we use the users abort severity, since we are about	*/
  /* to try emitting some object code.				*/

  call severity_check (lei.abort_severity);

  /*  9) process each component				*/

  /* create the msf directory if necessary and adjust the dirname	*/

  call le_create_binary_ (ts.lecp, lei.output_file.dir, lei.output_file.entry,
       n_components, lei.flags.force, dname, ename);
  call severity_check (lei.abort_severity);

  /* 10) now emit each component of the output binary */

  do c = 1 to n_components;
    call le_make_component_ (dname, ename, leip, ts.lebp, ts.lecp, c,
         n_components);
    call severity_check (lei.abort_severity);
  end;

  /* 11) create msf component 0 if there more than 1 component and	*/
  /*     backpatch and unresolved references			*/

  call le_complete_binary_ (ts.lecp, ts.lebp);

  /* 12) add any names specified by ADDNAME options		*/
  
  do i = 1 to lei.n_opts;
    if lei.opt (i).type = ADDNAME
      then do;
        call hcs_$chname_file (lei.output_file.dir, lei.output_file.entry,
	   "", lei.opt (i).name, ec);
        if ec = error_table_$namedup
	then do;
	  if lei.flags.force
	    then call nd_handler_$force ((lei.header.name),
		    lei.output_file.dir, lei.opt (i).name, ec);
	    else call nd_handler_ ((lei.header.name), lei.output_file.dir,
		    lei.opt (i).name, ec);
	  if ec = 0
	    then call hcs_$chname_file (lei.output_file.dir,
		    lei.output_file.entry, "", lei.opt (i).name, ec);
	end;
        else if ec ^= error_table_$segnamedup
	then call le_error_ (LE_WARNING, ec, "^/While adding name ""^a"".",
		lei.opt (i).name);
      end;
  end;
  
  /* 13) generate the listing if one was requested		*/

  if lei.flags.list | lei.flags.map
    then call le_create_list_ (ts.lecp, ts.lebp, lei.output_file.dir,
	    lei.output_file.entry, lei.flags.list);

ABORT:
  if temp_segs (1) ^= null
    then call release_temp_segments_ ((le_data_$caller), temp_segs, ec);
  if leap ^= null
    then call release_area_ (leap);
  severity = le_data_$max_severity;
  if severity >= lei.abort_severity
    then code = error_table_$translation_failed;
    else code = 0;

  le_data_$running = false;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


severity_check:
  proc (abort_severity);		/** severity to abort   (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	severity_check				*/
  /***	Input:	abort_severity				*/
  /***	Function:	determines whether the highest severity error	*/
  /***		encountered so far is sufficient to cause us to	*/
  /***		abort the run.  If it is, we release out temp	*/
  /***		storage and return with an error code of	*/
  /***		error_table_$translation_failed		*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl abort_severity	fixed bin parameter;

  if le_data_$max_severity >= abort_severity
    then goto ABORT;

  end severity_check;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include area_info;
%include le_input;
%include le_data;

  end le_;

