/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to emit the static section for a single input
     component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_emit_static_:
  proc (ocudp,			/** ocu data pointer    (in )	*/
       lecp,			/** components pointer  (i/o) */
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_emit_static_				*/
  /***	Input:	ocudp, lecp, c				*/
  /***	Function: emits the static section of a given input	*/
  /***		component.				*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl Left		fixed bin static options (constant) init (1);
  dcl Right		fixed bin static options (constant) init (2);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;

  /* procedures */

  dcl le_error_		entry options (variable);
  dcl le_util_$scan_relinfo	entry (ptr, fixed bin, bit (1), fixed bin,
			char (*));

  /* external */

  dcl le_et_$implementation_error
			external fixed bin (35);
  dcl le_et_$invalid_relinfo	external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 word18		aligned based (addr (word)),
       02 side		(1:2) fixed bin (18) unsigned unaligned;

  /* automatic */

  dcl found		bit (1) automatic;
  dcl len			fixed bin (18) unsigned automatic;
  dcl n_words		fixed bin automatic;
  dcl odd			bit (1) automatic;
  dcl original_relp		fixed bin (19) automatic;
  dcl pad			(1:16) bit (36) aligned automatic;
  dcl rel			char (2) automatic;
  dcl rel_char		char (1) automatic;
  dcl relindex		fixed bin automatic;
  dcl relinfop		ptr automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl s			fixed bin automatic;
  dcl skip		fixed bin automatic;
  dcl statp		ptr automatic;
  dcl text_relp		fixed bin (18) unsigned automatic;
  dcl word		bit (36) aligned automatic;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl hbound		builtin;
  dcl min			builtin;
  dcl size		builtin;
  dcl substr		builtin;
  dcl unspec		builtin;

  /* align the static as required by padding with zeros */

  n_words = lec.comp (c).new.static_pad;
  unspec (pad) = ""b;

  do while (n_words > 0);
    len = min (hbound (pad, 1), n_words);
    relp = ocu_$emit_static (ocudp, addr (pad), len);
    n_words = n_words - len;
  end;

  /* if there is no static, just return */

  original_relp = -1;
  if lec.comp (c).orig.statl = 0
    then return;

  /* if the static is separate, there is no relinfo so just emit it */

  if lec.comp (c).flags.separate_static
    then original_relp = ocu_$emit_static (ocudp, lec.comp (c).orig.statp,
	    (lec.comp (c).orig.statl));
    else do;

      /* the static is combined, so if the object is an error table	*/
      /* there may be text relocation for the message offsets, so we	*/
      /* relocate it.					*/

      n_words = 0;
      relinfop = lec.comp (c).orig.rel_linkp;
      text_relp = lec.comp (c).new.rel_text;
      relindex = 1;
      odd = false;
      found = false;

      /* first we skip over the relocation info for the linkage header */

      do while (n_words < size (virgin_linkage_header));
        call le_util_$scan_relinfo (relinfop, relindex, odd, skip, rel);
        if n_words + skip >= size (virgin_linkage_header)
	then do;
	  n_words = size (virgin_linkage_header);
	  skip = skip + n_words - size (virgin_linkage_header);
	  found = true;
	end;
	else n_words = n_words + skip + 1;
      end;

      /* if we used all of the info from the last scan in skipping	*/
      /* over the header scan for the next non-absolute word.	*/

      if ^found
        then call le_util_$scan_relinfo (relinfop, relindex, odd, skip, rel);

      n_words = 0;
      statp = lec.comp (c).orig.statp;

      do while (n_words < lec.comp (c).orig.statl);

        /* emit the intervening static words  */

        if skip > 0
	then do;

	  /* since there may be links after the end of the static	*/
	  /* section, we may end up skipping more than the length	*/
	  /* of the section so only emit as may words as are left	*/
	  /* in the static section.				*/

	  len = min (skip, lec.comp (c).orig.statl - n_words);
	  relp = ocu_$emit_static (ocudp, statp, len);
	  if original_relp < 0
	    then original_relp = relp;
	  statp = addrel (statp, len);
	  n_words = n_words + len;
	end;

        /* copy the word to be relocated */

        unspec (word) = unspec (statp -> word18);

        do s = Left to Right while (n_words < lec.comp (c).orig.statl);

	/* for each side of the non-absolute word */

	rel_char = substr (rel, s, 1);

	if rel_char = "a"
	  then ;
	else if rel_char = "t"
	  then word18.side (s) = word18.side (s) + text_relp;
	else call le_error_ (LE_ERROR, le_et_$invalid_relinfo,
		"^/Relocation ""^a"" at static|^o of component ""^a"".",
		rel, n_words, lec.comp (c).name);
        end;

        /* if the word is within the static section, then emit it. */

        if n_words < lec.comp (c).orig.statl
	then do;
	  relp = ocu_$emit_static (ocudp, addr (word), 1);
	  if original_relp < 0
	    then original_relp = relp;
	  statp = addrel (statp, 1);
	  n_words = n_words + 1;
	  call le_util_$scan_relinfo (relinfop, relindex, odd, skip, rel);
	end;

      end;
    end;

  /* make sure it was emitted where we calculated is should be emitted */

  if original_relp ^= lec.comp (c).new.rel_stat
    then call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	    "^/Static for ^a relocated to ^d instead of ^d as expected.",
	    lec.comp (c).name, original_relp, lec.comp (c).new.rel_stat);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include object_link_dcls;
%include ocu_dcls;

  end le_emit_static_;


