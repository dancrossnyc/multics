/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to display error messages from the linkage editor and
     record severities.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_error_:
  proc (severity,			/** severiity of error  (in )	*/
       code,			/** error code	    (in ) */
       control_string);		/** ioa_ control string (in ) */
  /*** {ioa_args}			/** optional ioa_ args  (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_error_					*/
  /***	Input:	severity, code, control_string, {ioa args}	*/
  /***	Function:	prints an error message on the error output	*/
  /***		I/O switch.  If the brief option was selected	*/
  /***		(determined by the value of le_data_$brief_sw)	*/
  /***		the message is not printed. The maximum severity	*/
  /***		(in le_data_$max_severity) is updated regardless.	*/
  /***		If the severity is 4 (LE_ABORT_ERROR) the	*/
  /***		condition le_abort_ is signalled to abort the	*/
  /***		execution.				*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl ch_100_al_desc	bit (36) static options (constant)
			init ("524000000144"b3);
  dcl ch_32_var_desc	bit (36) static options (constant)
			init ("532000000040"b3);
  dcl ch_512_var_desc	bit (36) static options (constant)
			init ("532000002000"b3);
  dcl ptr_desc		bit (36) static options (constant)
			init ("464000000000"b3);
  dcl severity_msg		(1:4) char (32) var static options (constant)
			init ("WARNING", "ERROR SEVERITY 2",
			"ERROR SEVERITY 3", "FATAL ERROR");

  /* parameters */

  dcl severity		fixed bin parameter;
  dcl code		fixed bin (35) parameter;
  dcl control_string	char (*) parameter;

  /* procedures */

  dcl convert_status_code_	entry (fixed bin (35), char (8) aligned,
			char (100) aligned);
  dcl cu_$arg_list_ptr	entry (ptr);
  dcl cu_$generate_call	entry (entry, ptr);
  dcl get_system_free_area_	entry () returns (ptr);
  dcl ioa_$ioa_switch	entry () options (variable);

  /* external */

  dcl iox_$error_output	ptr external;
  dcl le_data_$display_severity
			fixed bin external;
  dcl le_data_$max_severity	fixed bin external;

  /* based */

  dcl 01 input_args		aligned based (input_argsp),
       02 header		like arg_list.header,
       02 arg_ptrs		(0 refer (input_args.arg_count)) ptr,
       02 desc_ptrs		(0 refer (input_args.arg_count)) ptr;
  dcl 01 new_args		aligned based (new_argsp),
       02 header		like arg_list.header,
       02 arg_ptrs		(nargs refer (new_args.arg_count)) ptr,
       02 desc_ptrs		(nargs refer (new_args.arg_count)) ptr;
  dcl sys_area		area based (sys_areap);

  /* automatic */

  dcl nargs		fixed bin automatic;
  dcl i			fixed bin automatic;
  dcl input_argsp		ptr automatic;
  dcl message		char (100) aligned automatic;
  dcl new_argsp		ptr automatic;
  dcl new_ctl_str		char (512) varying automatic;
  dcl sys_areap		ptr automatic;

  /* conditions */

  dcl cleanup		condition;
  dcl le_abort_		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl max			builtin;
  dcl null		builtin;

  /* update the maximum severity */

  le_data_$max_severity = max (le_data_$max_severity, severity);

  /* if the severity is less than the display severity, don't display	*/
  /* a message.						*/

  if severity < le_data_$display_severity
    then do;
      if severity = LE_ABORT_ERROR
        then signal le_abort_;
        else return;
    end;

  /* build the new ioa_ control string */

  new_ctl_str = "^/^a:^/^a " || control_string;

  /* convert the code supplied into a message */

  call convert_status_code_ (code, (""), message);

  /* get the arg list pointer to copy the optional arguments */

  call cu_$arg_list_ptr (input_argsp);

  /* release new arg list structure on unexpected unwind */

  sys_areap = get_system_free_area_ ();

  new_argsp = null;
  on cleanup
    begin;
    if new_argsp ^= null
      then free new_args in (sys_area);
  end;

  /* determine the size of the arglist for the call to ioa_ and allocate it */

  nargs = input_args.arg_count + 1;
  allocate new_args in (sys_area);

  /* set up the new arglist header */

  new_args.header.pad1 = ""b;
  new_args.header.call_type = Interseg_call_type;
  new_args.header.desc_count = nargs;
  new_args.header.pad2 = ""b;

  /* set the argument and descriptor pointers for the first 4 constant args */

  new_args.arg_ptrs (1) = addr (iox_$error_output);
  new_args.arg_ptrs (2) = addrel (addr (new_ctl_str), 1);
  new_args.arg_ptrs (3) = addrel (addr (severity_msg (severity)), 1);
  new_args.arg_ptrs (4) = addr (message);

  new_args.desc_ptrs (1) = addr (ptr_desc);
  new_args.desc_ptrs (2) = addr (ch_512_var_desc);
  new_args.desc_ptrs (3) = addr (ch_32_var_desc);
  new_args.desc_ptrs (4) = addr (ch_100_al_desc);

  /* copy any additional arguments into the new arg list */

  do i = 4 to input_args.arg_count;
    new_args.arg_ptrs (i + 1) = input_args.arg_ptrs (i);
    new_args.desc_ptrs (i + 1) = input_args.desc_ptrs (i);
  end;

  /* call ioa_$ioa_switch with the new arglist */

  call cu_$generate_call (ioa_$ioa_switch, new_argsp);

  /* free the arg_list structure */

  free new_args in (sys_area);

  if severity = LE_ABORT_ERROR
    then signal le_abort_;
    else return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include arg_list;
%include le_data;

  end le_error_;

