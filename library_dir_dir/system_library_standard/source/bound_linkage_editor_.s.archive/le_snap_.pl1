/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to attempt to resolve links internally or to generate
     an external reference if the link cannot be resolved.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_snap_:
  proc (ocudp,			/** ocu_data pointer    (in )	*/
       lecp,			/** components pointer  (in )	*/
       comp,			/** component index	    (in ) */
       ref_section,			/** referencing section (in ) */
       ref_offset,			/** referencing offset  (in ) */
       ref_relp,			/** relpointer to link  (in ) */
       no_prelink,			/** must be external    (in ) */
       section,			/** section resolved to (out) */
       relp,			/** offset within scn   (out) */
       modifier,			/** modifier required   (out) */
       internal);			/** internal flag	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_snap_					*/
  /***	Input:	ocudp, lecp, comp, ref_section, ref_offset,	*/
  /***		ref_relp, no_prelink			*/
  /***	Function:	resolves an internal link and returns information	*/
  /***		regarding where it snaps to.  The information	*/
  /***		returned consists of the section and offset to	*/
  /***		refer to, and whether the resolution removed the	*/
  /***		indirection through the link.			*/
  /***	Output:	section, relp, modifier, internal		*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl false		bit (1) static options (constant) init ("0"b);
  dcl true		bit (1) static options (constant) init ("1"b);
  dcl Indirection_modifier	bit (6) static options (constant) init ("20"b3);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl ref_section		fixed bin (3) parameter;
  dcl ref_offset		fixed bin (18) unsigned parameter;
  dcl ref_relp		fixed bin (18) unsigned parameter;
  dcl no_prelink		bit (1) parameter;
  dcl section		fixed bin (3) parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl modifier		bit (6) parameter;
  dcl internal		bit (1) parameter;

  /* procedures */

  dcl get_system_free_area_	entry () returns (ptr);
  dcl le_backpatch_		entry (fixed bin, fixed bin, uns fixed bin (18),
			fixed bin, fixed bin);
  dcl le_error_		entry options (variable);

  /* external */

  dcl error_table_$bad_class_def
			external fixed bin (35);
  dcl le_et_$bad_link_class	external fixed bin (35);
  dcl le_et_$bad_link_ref	external fixed bin (35);
  dcl le_et_$bad_link_type	external fixed bin (35);

  /* based */

  dcl 01 defn		aligned like le_definition based (defnp);
  dcl 01 init		aligned like link_init based (initp);
  dcl 01 init_copy		aligned based (initp),
       02 header		aligned like link_init_copy_info.header,
       02 initial_data	dim (0 refer (init_copy.n_words))
			bit (36) aligned;
  dcl 01 init_list		aligned based (initp),
       02 header		aligned like link_init_list_template.header,
       02 pad		bit (18) unaligned,
       02 n_words_in_list	fixed bin (18) unsigned unaligned,
       02 template		dim (0 refer (init_list.n_words_in_list));
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 led		aligned based,
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 lk		aligned like le_link based (lkp);
  dcl 01 lte		aligned based (ltep),
       02 n_bits		fixed bin (35) aligned,
       02 mbz		bit (3) unaligned,
       02 init_type		fixed bin (3) unsigned unaligned,
       02 repeat		fixed bin (30) unsigned unaligned,
       02 datum		bit (0 refer (lte.n_bits));
  dcl 01 new_copy		aligned based (new_initp),
       02 header		aligned like link_init_copy_info.header,
       02 initial_data	dim (n_words refer (init_copy.n_words))
			bit (36) aligned;
  dcl 01 new_list		aligned based (new_initp),
       02 header		aligned like link_init_list_template.header,
       02 pad		bit (18) unaligned,
       02 n_words_in_list	fixed bin (18) unsigned unaligned,
       02 template		dim (list_size
			refer (init_list.n_words_in_list));
  dcl 01 offsetname		aligned based (lk.offsetp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (offsetname.count)) unaligned;
  dcl 01 pit		aligned like pointer_init_template based (pitp);
  dcl 01 segname		aligned based (lk.segnamep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (segname.count)) unaligned;
  dcl sys_area		area based (sys_areap);
  dcl 01 tl		aligned like le_link based (tlp);

  /* automatic */

  dcl 01 auto_def		aligned like link_init_deferred automatic;
  dcl 01 auto_init		aligned like link_init automatic;
  dcl copied		bit (1) automatic;
  dcl defnp		ptr automatic;
  dcl hdr_size		fixed bin automatic;
  dcl i			fixed bin automatic;
  dcl initp		ptr automatic;
  dcl lelp		ptr automatic;
  dcl linkx		fixed bin automatic;
  dcl list_size		fixed bin (18) unsigned automatic;
  dcl lkp			ptr automatic;
  dcl ltep		ptr automatic;
  dcl new_initp		ptr automatic;
  dcl n_words		fixed bin (35) automatic;
  dcl offset		fixed bin (18) unsigned;
  dcl patch_mask		bit (10000) automatic;
  dcl pitp		ptr automatic;
  dcl sys_areap		ptr automatic;
  dcl template_index	fixed bin automatic;
  dcl tlp			ptr automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addwordno		builtin;
  dcl currentsize		builtin;
  dcl index		builtin;
  dcl null		builtin;
  dcl size		builtin;
  dcl substr		builtin;
  dcl unspec		builtin;
  dcl wordno		builtin;

  section = -1;
  relp = 0;
  modifier = ""b;
  internal = false;

  lelp = lec.comp (comp).tables.lelp;

  /* calculate the link table index of the referenced link */

  linkx = (ref_relp - lel.offset_adjustment) / 2;

  if linkx < 0 | linkx > lel.n_links
    then do;
      call le_error_ (LE_FATAL_ERROR, le_et_$bad_link_ref,
	 "^/Reference to link|^o at ^a|^o of ^a does not refer to a link.",
	 ref_relp, section_nm (ref_section), ref_offset,
	 lec.comp (comp).name);
      return;
    end;

  lkp = addr (lel.link (linkx));

  /* optimize for already emitted links */

  if ^no_prelink & lk.relp ^= None
    then do;
      section = Linkage;
      relp = lk.relp;
      modifier = Indirection_modifier;
      return;
    end;

  if lk.type < 1 | lk.type > 5 | lk.type = 2
    then do;
      call le_error_ (LE_FATAL_ERROR, le_et_$bad_link_type,
	 "^/Link at link|^o has an invalid type (^d).", ref_relp,
	 lk.type);
      return;
    end;

  goto LINK_TYPE (lk.type);

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


LINK_TYPE (1):			/** *section|0+expression	*/

  if lk.class = Text
    then do;

      /* if not prelinking, then relocate and re-emit */

      if no_prelink
        then do;
	section = Linkage;
	relp = ocu_$emit_link (ocudp, Self_Base, Text, "", "",
	     lec.comp (comp).new.rel_text + lk.exp, lk.mod, null);
	return;
        end;

      /* otherwise relocate and return the text offset */

      section = Text;
      relp = lec.comp (comp).new.rel_text + lk.exp;
      internal = true;
    end;
  else if lk.class = Linkage
    then do;
      hdr_size = size (virgin_linkage_header);

      /* actually a reference to combined static */

      if lk.exp > hdr_size & lk.exp < hdr_size + lec.comp (comp).orig.statl &
	 ^lec.comp (comp).flags.separate_static
        then do;

	/* if we are not prelinking, re-emit the link as a *static	*/
	/* link.  If static is combined, ocu_ will convert it to a	*/
	/* *link|0+N link and adjust the offset			*/

	if no_prelink
	  then do;
	    section = Linkage;
	    relp = ocu_$emit_link (ocudp, Self_Base, Static, "", "",
	         lk.exp + lec.comp (comp).new.rel_stat, lk.mod, null);
	    return;
	  end;

	/* otherwise, we treat it as a static reference */

	section = Static;
	relp = lec.comp (comp).new.rel_stat + lk.exp - hdr_size;
	internal = true;
	return;
        end;

      /* check for a reference to the header rather than a link or static */

      if lk.exp < hdr_size
        then do;

	/* non-link, non-static linkage section references are just	*/
	/* re-emitted with the same expression value, since we have	*/
	/* no good way of determining how to relocate them.	*/

	if no_prelink
	  then do;
	    relp = ocu_$emit_link (ocudp, Self_Base, Linkage, "", "",
	         (lk.exp), lk.mod, null);
	    section = Linkage;
	    modifier = Indirection_modifier;
	    return;
	  end;

	relp = lk.exp;
	section = Linkage;
	modifier = lk.mod;
	internal = true;
	return;
        end;

      /* the reference is to another link */

      if no_prelink
        then do;

	/* we have to emit the target link of this link, so snap it	*/
	/* without prelinking and regenerate the reference.	*/

	call le_snap_ (ocudp, lecp, comp, Linkage, ref_relp, (lk.exp),
	     no_prelink, section, relp, modifier, internal);
	section = Linkage;
	relp = ocu_$emit_link (ocudp, Self_Base, Linkage, "", "", (relp),
	     lk.mod, null);
	modifier = Indirection_modifier;
	return;
        end;

      /* if the link has an indirection modifier, then we will end up	*/
      /* indirecting through the target link as well, so snap to the	*/
      /* target of that link instead.				*/

      if lk.mod = Indirection_modifier
        then call le_snap_ (ocudp, lecp, comp, Linkage, ref_relp, (lk.exp),
	        false, section, relp, modifier, internal);
        else do;
	call le_snap_ (ocudp, lecp, comp, Linkage, ref_relp, (lk.exp),
	     false, section, relp, modifier, internal);
	modifier = lk.mod;
        end;
      internal = true;
    end;
  else if lk.class = CLASS_SYMBOL
    then do;

      /* if not prelinking, just re-emit the link */

      if no_prelink
        then do;
	section = Linkage;
	relp = ocu_$emit_link (ocudp, Self_Base, Symbol, "", "",
	     (lk.exp), lk.mod, null);
	modifier = Indirection_modifier;
	return;
        end;

      /* otherwise, relocate and return the symbol offset */

      section = Symbol;
      relp = lk.exp + lec.comp (comp).new.rel_symb;
      modifier = lk.mod;
      internal = true;
    end;
  else if lk.class = CLASS_STATIC
    then do;

      if lec.header.flags.separate_static | no_prelink
        then do;

	/* we can't prelink to separate static */

	section = Linkage;
	relp = ocu_$emit_link (ocudp, Self_Base, Static, "", "",
	     lk.exp + lec.comp (comp).new.rel_stat, lk.mod, null);
	if ^no_prelink
	  then lk.relp = relp;
	modifier = Indirection_modifier;
	return;
        end;

      section = Static;
      relp = lk.exp + lec.comp (comp).new.rel_stat;
      modifier = lk.mod;
      internal = true;
    end;
  else call le_error_ (LE_FATAL_ERROR, le_et_$bad_link_class,
	  "^/Class ^d found while evaluating link at link|^o.",
	  lk.class, ref_relp);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


LINK_TYPE (3):			/** refname|0+expression	*/

  if lec.comp (lk.target).target = None | no_prelink
    then do;

      /* the target is not internal, or we were told not to prelink,	*/
      /* so we just regenerate the link.			*/

      relp = ocu_$emit_link (ocudp, Refname_Base, 0, (segname.string), "",
	 (lk.exp), lk.mod, null);
      section = Linkage;
      modifier = Indirection_modifier;
      if ^no_prelink
        then lk.relp = relp;
    end;
  else if lec.comp (lk.target).target ^= lec.comp (comp).target
    then do;

      /* the target is internal but in another component, so generate	*/
      /* a partial link and retain the indirection.		*/

      relp = ocu_$emit_partial_link (ocudp, (lec.comp (lk.target).target),
	 Text, 0, lk.mod);
      lk.relp = relp;
      section = Linkage;
      modifier = Indirection_modifier;
    end;
  else do;

    /* the target is internal and in this component, so remove the	*/
    /* indirection and resolve from the base of the text section of	*/
    /* the target component.				*/

    relp = lk.exp + lec.comp (lk.target).new.rel_text;
    section = Text;
    modifier = lk.mod;
    internal = true;
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


LINK_TYPE (4):			/** refname|entry+expression	*/

  if lk.target = None | no_prelink
    then do;

      /* the link is not internal, or we are not snapping it for	*/
      /* other reasons.					*/

      relp = ocu_$emit_link (ocudp, Refname_Offsetname, 0, (segname.string),
	 (offsetname.string), (lk.exp), lk.mod, null);
      section = Linkage;
      modifier = Indirection_modifier;
      if ^no_prelink
        then lk.relp = relp;
      return;
    end;

  defnp = addr (lec.comp (lk.target).tables.ledp -> led.def (lk.defx));

  if lec.comp (lk.target).target ^= lec.comp (comp).target
    then do;

      /* the target of the link is in another component, so we have	*/
      /* to generate a partial link to the target.  If the link	*/
      /* points to the linkage section, we may have to backpatch if	*/
      /* it refers to a link.					*/

      if defn.type ^= Linkage
        then do;

	/* simple partial link reference, relocate the offset	*/
	/* and emit the partial link.				*/

	if defn.type = Text
	  then offset = lec.comp (lk.target).new.rel_text;
	else if defn.type = Symbol
	  then offset = lec.comp (lk.target).new.rel_symb;
	else if defn.type = Static
	  then offset = lec.comp (lk.target).new.rel_stat;
	else call le_error_ (LE_ABORT_ERROR, error_table_$bad_class_def,
		"^/Class ^d definition in ^a at definition|^o.",
		defn.type, lec.comp (lk.target).name, defn.offset);

	offset = offset + defn.relp + lk.exp;
	relp = ocu_$emit_partial_link (ocudp, (lec.comp (lk.target).target),
	     (defn.type), offset, lk.mod);
	lk.relp = relp;
        end;
        else do;

	/* we have a linkage reference.  Now we determine if it is	*/
	/* a header, static, or link reference, and handle things	*/
	/* accordingly.					*/

	hdr_size = size (virgin_linkage_header);
	if defn.relp < hdr_size
	  then do;

	    /* the reference it so the header.  Just link to the	*/
	    /* same point in the new header.			*/

	    relp = ocu_$emit_partial_link (ocudp,
	         (lec.comp (lk.target).target), Linkage,
	         defn.relp + lk.exp, lk.mod);
	    lk.relp = relp;
	  end;
	else if defn.relp < hdr_size + lec.comp (lk.target).orig.statl
	  then do;

	    /* the reference is to the static section, so relocate	*/
	    /* it appropriately, and emit the link.		*/

	    relp = ocu_$emit_partial_link (ocudp,
	         (lec.comp (lk.target).target), Linkage,
	         defn.relp + lk.exp + lec.comp (lk.target).new.rel_stat,
	         lk.mod);
	    lk.relp = relp;
	  end;
	else do;

	  /* the reference is to a link.  But we probably don't	*/
	  /* know where that link will be emitted yet, so we will	*/
	  /* have to schedule a backpatch of the offset.	*/

	  relp = ocu_$emit_partial_link (ocudp,
	       (lec.comp (lk.target).target), Linkage, (lk.exp), lk.mod);
	  call le_backpatch_ (Patch_Link, lec.comp (comp).target, relp,
	       (lk.target), (lk.defx));
	  lk.relp = relp;
	end;

        end;

      section = Linkage;
      modifier = Indirection_modifier;
      return;
    end;

  /* the reference is internal and within this component, so we can	*/
  /* actually resolve the reference.				*/

  if defn.type = Text
    then do;
      section = Text;
      relp = defn.relp + lk.exp + lec.comp (lk.target).new.rel_text;
      modifier = lk.mod;
      internal = true;
    end;
  else if defn.type = Symbol
    then do;
      section = Symbol;
      relp = defn.relp + lk.exp + lec.comp (lk.target).new.rel_symb;
      modifier = lk.mod;
      internal = true;
    end;
  else if defn.type = Static
    then do;

      if lec.header.flags.separate_static
        then do;

	/* we can't prelink to separate static */

	section = Linkage;
	relp = ocu_$emit_link (ocudp, Self_Base, Static, "", "",
	     defn.relp + lk.exp + lec.comp (lk.target).new.rel_stat,
	     lk.mod, null);
	modifier = Indirection_modifier;
	return;
        end;

      section = Static;
      relp = defn.relp + lk.exp + lec.comp (lk.target).new.rel_stat;
      modifier = lk.mod;
      internal = true;
    end;
  else if defn.type = Linkage
    then do;

      /* either a link or static reference.  If static, relocate	*/
      /* and resolve the link.  If it is a link, we snap to the	*/
      /* target of the link.					*/

      hdr_size = size (virgin_linkage_header);

      if defn.relp < hdr_size + lec.comp (lk.target).orig.defnl
        then do;

	/* a static reference, so relocate and return */

	relp = defn.relp + lk.exp + lec.comp (lk.target).new.rel_stat -
	     hdr_size;
	section = Static;
	modifier = lk.mod;
	internal = true;
        end;
        else do;

	/* a link reference, so we snap the target of the link	*/
	/* depending on the modifier in the current link, and	*/
	/* snap to there.					*/

	if lk.mod = Indirection_modifier
	  then call le_snap_ (ocudp, lecp, (lk.target), Linkage, ref_relp,
		  defn.relp + lk.exp, false, section, relp,
		  modifier, internal);
	  else do;
	    call le_snap_ (ocudp, lecp, (lk.target), Linkage, ref_relp,
	         defn.relp + lk.exp, true, section, relp, modifier,
	         internal);
	    modifier = lk.mod;
	  end;

	internal = true;
        end;
    end;
  else call le_error_ (LE_ABORT_ERROR, error_table_$bad_class_def,
	  "^/Class ^d found in ^a at definition|^o.",
	  defn.type, lec.comp (lk.target).name, defn.offset);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


LINK_TYPE (5):			/** *section|entry+expression	*/

  /* for now, only *system and *heap links of this type are supported	*/
  /* (primarily since none of the others are used).		*/

  if lk.initp = null
    then do;

      /* this indicates that the actual init_info is in another MSF	*/
      /* component, and we need to create a deferred_init init_info	*/
      /* block for this link.					*/

      tlp = addr (lec.comp (lk.target_comp).tables.lelp ->
	 lel.link (lk.target_link));

      auto_def.type = INIT_DEFERRED;
      auto_def.n_words = tl.initp -> init.n_words;
      auto_def.target_relp = ocu_$emit_partial_link (ocudp,
	 (lec.comp (lk.target_comp).target), Linkage, 0, ""b);
      auto_def.link_relp = 0;

      section = Linkage;
      relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
	 (offsetname.string), (lk.exp), lk.mod, addr (auto_def));
      modifier = Indirection_modifier;

      lk.relp = relp;

      call le_backpatch_ (Patch_Init, lec.comp (comp).target, relp,
	 (lk.target_comp), (lk.target_link));
    end;
  else if lk.extension ^= None
    then do;

      /* clear the template count */

      template_index = 0;

      /* the init info given will be used but must be extended to a	*/
      /* larger size.  So we generate a new init info, and extend it,	*/
      /* padding with zeros, to the proper size.			*/

      initp = lk.initp;

      if init.type = INIT_NO_INIT | init.type = INIT_DEFINE_AREA
        then do;
	auto_init.type = init.type;
	auto_init.n_words = init.n_words + lk.extension;
	initp = addr (auto_init);
	relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
	     (offsetname.string), (lk.exp), lk.mod, addr (auto_init));
	lk.relp = relp;
	section = Linkage;
	modifier = Indirection_modifier;
        end;
      else if init.type = INIT_COPY_INFO
        then do;
	sys_areap = get_system_free_area_ ();
	new_initp = null;

	if lk.extension > 50 /* arbitrary limit */
	  then do;

	    /* the extension is large enough that it is more	*/
	    /* efficient to convert the copy info into a list	*/
	    /* template.					*/

	    on cleanup
	      begin;
	      if new_initp ^= null
	        then free new_list in (sys_area);
	    end;

	    /* allocate a list_template init structure */

	    list_size = currentsize (init_copy) + 3;
	    allocate new_list in (sys_area);
	    new_list.type = INIT_LIST_TEMPLATE;
	    new_list.n_words = init.n_words + lk.extension;

	    /* create the template for the original data */

	    ltep = addr (new_list.template (1));
	    lte.n_bits = init_copy.n_words * 36;
	    lte.repeat = 1;
	    lte.datum = unspec (init_copy.initial_data);

	    /* create the template to skip the size of the extension */

	    ltep = addwordno (ltep, currentsize (lte));
	    lte.n_bits = lk.extension * 36;
	    lte.repeat = 0;		/* skip bits */

	    /* create the template for end of initialization */

	    ltep = addwordno (ltep, 2);
	    lte.n_bits = 0;

	    /* emit the link */

	    relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
	         (offsetname.string), (lk.exp), lk.mod, new_initp);
	    lk.relp = relp;
	    section = Linkage;
	    modifier = Indirection_modifier;

	    free new_list in (sys_area);

	    revert cleanup;

	  end;
	  else do;

	    /* the extenstion is small, so just extend the copy init */

	    new_initp = null;

	    on cleanup
	      begin;
	      if new_initp ^= null
	        then free new_copy in (sys_area);
	    end;

	    /* determine the new length */

	    n_words = init_copy.n_words + lk.extension;

	    /* allocate the new init_info */

	    allocate new_copy in (sys_area);

	    /* copy the data into the new template */

	    new_copy.type = INIT_COPY_INFO;
	    unspec (new_copy.initial_data) = 
	         unspec (init_copy.initial_data);

	    /* emit the link */

	    relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
	         (offsetname.string), (lk.exp), lk.mod, new_initp);
	    lk.relp = relp;
	    section = Linkage;
	    modifier = Indirection_modifier;

	    free new_copy in (sys_area);

	    revert cleanup;
	  end;
        end;
      else if init.type = INIT_LIST_TEMPLATE
        then do;
	sys_areap = get_system_free_area_ ();

	new_initp = null;

	/* extend the list template init by adding a new skip bits	*/
	/* template and end template.				*/

	on cleanup
	  begin;
	  if new_initp ^= null
	    then free new_list in (sys_area);
	end;

	/* allocate a larger template */

	list_size = init_list.n_words_in_list + 2;

	allocate new_list in (sys_area);

	/* copy the old list template into the new structure */

	new_list.type = INIT_LIST_TEMPLATE;
	new_list.n_words = init_list.n_words + lk.extension;
	unspec (new_list.template) = unspec (init_list.template);

	/* the new extension template starts in the last word of	*/
	/* the old template, replacing the end-of-init (n_bits = 0)	*/
	/* template.					*/

	ltep = addwordno (new_initp, currentsize (init_list) - 1);
	lte.n_bits = lk.extension * 36;
	lte.repeat = 0;

	/* now append a new end-of-init template */

	ltep = addwordno (ltep, 2);
	lte.n_bits = 0;

	/* scan the copy looking for pointer initializations */

	ltep = addr (new_list.template);
	template_index = 1;
	substr (patch_mask, template_index, 1) = false;

	do while (lte.n_bits ^= 0);

	  /* see if it is a pointer initialization */

	  if lte.init_type ^= 0
	    then do;

	      /* get a pointer to the init datum */

	      pitp = addr (lte.datum);

	      /* relocate text refs by adding in the text offset */

	      if pit.ptr_type = 0
	        then pit.word_offset = pit.word_offset +
		        lec.comp (lk.target_comp).new.rel_text;

	      /* relocate static refs by adding in the static offset */

	      else if pit.ptr_type = 2
	        then pit.word_offset = pit.word_offset +
		        lec.comp (lk.target_comp).new.rel_stat;

	      /* relocate linkage refs by regenerating the link	*/
	      /* and putting the new link offset in the template	*/

	      else do;
	        if pit.section_offset = ref_relp
		then substr (patch_mask, template_index, 1) = true;
		else do;
		  call le_snap_ (ocudp, lecp, (lk.target_comp), Linkage,
		       ref_relp, (pit.section_offset), false, section,
		       relp, modifier, internal);
		  if section ^= None
		    then if section ^= Linkage
			 then pit.section_offset =
				 ocu_$emit_link (ocudp, Self_Base,
				 section, "", "", (relp), modifier,
				 null);
			 else pit.section_offset = relp;
		end;
	      end;
	    end;

	  /* skip to the next template */

	  ltep = addwordno (ltep, currentsize (lte));
	  template_index = template_index + 1;
	  substr (patch_mask, template_index, 1) = false;

	end;

	/* emit the link */

	relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
	     (offsetname.string), (lk.exp), lk.mod, new_initp);

	/* scan to see if we have to backpatch self-referential	*/
	/* pointer init templates.				*/

	do while (substr (patch_mask, 1, template_index) ^= ""b);
	  i = index (patch_mask, "1"b);
	  call le_backpatch_ (Patch_Self_Init, lec.comp (comp).target,
	       relp, 0, i);
	  substr (patch_mask, i, 1) = false;
	end;

	lk.relp = relp;
	section = Linkage;
	modifier = Indirection_modifier;

	/* and free the new init template */

	free new_list in (sys_area);

	revert cleanup;

        end;
    end;

  else do;

    /* set up flags and handler in case relocation of pointer	*/
    /* initializations requires us to make a copy of the template.	*/

    initp = lk.initp;
    copied = false;
    new_initp = null;
    sys_areap = get_system_free_area_ ();

    on cleanup
      begin;
      if copied
        then free new_list in (sys_area);
    end;

    template_index = 0;

    /* only check for pointer inits in list templates, since you	*/
    /* can't do them any other way.				*/

    if init.type = INIT_LIST_TEMPLATE
      then do;

        /* get a pointer to the first template */

        ltep = addr (init_list.template);
        template_index = 1;
        substr (patch_mask, template_index, 1) = false;

        /* scan until we hit the end template */

        do while (lte.n_bits ^= 0);

	/* check for non-constant initialization template */

	if lte.init_type ^= 0
	  then do;

	    /* if we haven't already copied the template, do so now	*/

	    if ^copied
	      then do;

	        /* allocate a new template */

	        list_size = init_list.n_words_in_list;
	        allocate new_list in (sys_area);

	        /* note that we have done so so that it can be freed */

	        copied = true;

	        /* copy the old template */

	        unspec (new_list) = unspec (init_list);

	        /* generate a new template pointer that points to	*/
	        /* the same template in the new init info we were	*/
	        /* looking at in the original info and continue our	*/
	        /* scan using the new init info			*/

	        ltep = addwordno (new_initp, wordno (ltep)-wordno (initp));
	      end;

	    /* get a pointer to the init datum */

	    pitp = addr (lte.datum);

	    /* relocate text refs by adding in the text offset */

	    if pit.ptr_type = 0
	      then pit.word_offset = pit.word_offset +
		      lec.comp (lk.target_comp).new.rel_text;

	    /* relocate static refs by adding in the static offset */

	    else if pit.ptr_type = 2
	      then pit.word_offset = pit.word_offset +
		      lec.comp (lk.target_comp).new.rel_stat;

	    /* relocate linkage refs by regenerating the link	*/
	    /* and putting the new link offset in the template	*/

	    else do;
	      if pit.section_offset = ref_relp
	        then substr (patch_mask, template_index, 1) = true;
	        else do;
		call le_snap_ (ocudp, lecp, (lk.target_comp), Linkage,
		     ref_relp, (pit.section_offset), false, section, relp,
		     modifier, internal);
		if section ^= None
		  then if section ^= Linkage
		         then pit.section_offset =
			         ocu_$emit_link (ocudp, Self_Base,
			         section, "", "", (relp), modifier,
			         null);
		         else pit.section_offset = relp;
	        end;
	    end;
	  end;

	ltep = addwordno (ltep, currentsize (lte));
	template_index = template_index + 1;
	substr (patch_mask, template_index, 1) = false;

        end;
      end;

    if ^copied
      then new_initp = initp;

    relp = ocu_$emit_link (ocudp, Self_Offsetname, (lk.class), "",
         (offsetname.string), (lk.exp), lk.mod, (new_initp));

    /* scan to see if we have to backpatch self-referential pointer	*/
    /* init templates.					*/

    if template_index > 0
      then
        do while (substr (patch_mask, 1, template_index) ^= ""b);
        i = index (patch_mask, "1"b);
        call le_backpatch_ (Patch_Self_Init, lec.comp (comp).target,
	   relp, 0, i);
        substr (patch_mask, i, 1) = false;
      end;

    lk.relp = relp;
    section = Linkage;
    modifier = Indirection_modifier;

    if copied
      then free new_list in (sys_area);

    revert cleanup;
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include definition_dcls;
%include object_link_dcls;
%include ocu_dcls;

  end le_snap_;

