/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to create the segname table containing names to be
     used to resolve external references.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_make_segname_tbl_:
  proc (leip,			/** le_input pointer    (in )	*/
       lecp,			/** le_components ptr   (i/o) */
       leshp,			/** segname hashtbl ptr (i/o) */
       leap);			/** le_area pointer	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_make_segname_tbl_			*/
  /***	Input:	leip, lecp, leshp, leap			*/
  /***	Function:	creates the segname and definition tables from	*/
  /***		the input and component tables.		*/
  /***	Output:	lecp, leshp				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl leip		ptr parameter;
  dcl lecp		ptr parameter;
  dcl leshp		ptr parameter;
  dcl leap		ptr parameter;

  /* procedures */

  dcl get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
  dcl hash_$make		entry (ptr, fixed bin, fixed bin (35));
  dcl hash_$in		entry (ptr, char (*), bit (36) aligned,
			fixed bin (35));
  dcl hash_$opt_size	entry (fixed bin) returns (fixed bin);
  dcl hash_$search		entry (ptr, char (*), bit (36) aligned,
			fixed bin (35));
  dcl le_error_		entry options (variable);
  dcl rehash_		entry (ptr, fixed bin, fixed bin (35));
  dcl release_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));

  /* external */

  dcl error_table_$full_hashtbl
			external fixed bin (35);
  dcl error_table_$namedup	external fixed bin (35);
  dcl le_data_$caller	external char (32) varying;
  dcl le_et_$dup_segname	external fixed bin (35);
  dcl le_et_$entrypoints_inaccessible
			external fixed bin (35);
  dcl le_et_$implementation_error
			external fixed bin (35);

  /* based */

  dcl 01 acc		aligned based (accp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (acc.count)) unaligned;
  dcl 01 def		aligned like definition based (defp);
  dcl 01 dh		aligned like definition_header based (dhp);
  dcl le_area		area based (leap);
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (def_count refer (led.n_defs))
			like le_definition;
  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;
  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (segname_count refer (les.n_segnames))
			like le_segnames.segname;
  dcl word		fixed bin (35) based;

  /* automatic */

  dcl accp		ptr automatic;
  dcl c			fixed bin automatic;
  dcl def_list		fixed bin automatic;
  dcl defp		ptr automatic;
  dcl defx		fixed bin automatic;
  dcl dhp			ptr automatic;
  dcl ec			fixed bin (35) automatic;
  dcl has_segname		bit (1) automatic;
  dcl i			fixed bin automatic;
  dcl ledp		ptr automatic;
  dcl lesp		ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl real_defs		fixed bin automatic;
  dcl success		bit (1) automatic;
  dcl ts			(2) ptr automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl null		builtin;
  dcl string		builtin;
  dcl unspec		builtin;

  /* since we don't know how many segnames we will have, star with	*/
  /* an assumption of 1000					*/

  call hash_$make (leshp, hash_$opt_size (1000), ec);

  ts (1) = null;

  on cleanup
    begin;
    if ts (1) ^= null
      then call release_temp_segments_ ((le_data_$caller), ts, 0);
  end;

  /* segname and definition tables are originally created in temp	*/
  /* segs so that they can be grown dynamically, and then allocated	*/
  /* in the le_ area.					*/

  call get_temp_segments_ ((le_data_$caller), ts, ec);
  lesp = ts (1);
  ledp = ts (2);

  do c = 1 to lec.n_components;

    has_segname = false;
    real_defs = 0;
    les.n_segnames = None;
    led.n_defs = None;

    /* add the component name as a segname and make it the block	*/
    /* head if we are not using automatic segname generation	*/

    if ^lei.flags.auto_segnames
      then do;
        call add_segname (lecp, leshp, lesp, c, (lec.comp (c).name), success);
        has_segname = has_segname | success;
      end;

    /* copy the definitions into the definition table */

    dhp = lec.comp (c).orig.defnp;
    offset = dh.def_list_relp;
    defp = addrel (dhp, offset);
    def_list = None;

    do while (defp -> word ^= 0);

      /* copy all non-segname definitions */

      if def.class ^= 3
        then do;

	accp = addrel (dhp, def.name_relp);

	/* make a segname for this definition if it is not a	*/
	/* symbol_table definition and we are generating automatic	*/
	/* segnames from the entrypoint names.			*/

	if (acc.string ^= "symbol_table") &
	     lei.flags.auto_segnames & ^def.flags.ignore
	  then do;

	    /* add the definition as a segname */

	    call add_segname (lecp, leshp, lesp, c, acc.string, success);
	    has_segname = has_segname | success;

	  end;

	/* add the definition to the table */

	if acc.string ^= "symbol_table"
	  then real_defs = real_defs + 1;
	  
	defx, led.n_defs = led.n_defs + 1;
	led.def (defx).str = acc.string;
	led.def (defx).offset = offset;
	led.def (defx).type = def.class;
	led.def (defx).relp = def.thing_relp;
	led.def (defx).new_offset = None;
	string (led.def (defx).flags) = ""b;
	led.def (defx).flags.force_retain = def.flags.retain;
	led.def (defx).flags.entrypoint = def.flags.entry;
	led.def (defx).flags.ignore = def.flags.ignore;
	def_list = defx;
        end;

      /* skip to the next definition */

      offset = def.forward_relp;
      defp = addrel (dhp, offset);
    end;

    /* scan the input options for synonyms for this component */

    do i = 1 to lei.n_opts;
      if lei.opt (i).type = SYNONYM & ^lei.opt (i).flags.used &
	 ^lei.opt (i).flags.ignore
        then do;

	if lei.opt (i).name = lec.comp (c).name
	  then do;

	    /* mark the options as used */

	    lei.opt (i).flags.used = true;

	    /* add the segname to the table */

	    call add_segname (lecp, leshp, lesp, c,
	         lei.opt (i).path_or_ep, success);
	    has_segname = has_segname | success;
	  end;
        end;
    end;

    /* if we could not put any segnames on this block, then we can't	*/
    /* ever find any of the entrypoints, so delete them and complain.	*/

    if ^has_segname
      then do;

        /* print a message only if we are losing entrypoints in a	*/
        /* required component (that had entrypoints to begin with)	*/

        if ^lec.comp (c).flags.library & real_defs > 0
	then call le_error_ (LE_ERROR, le_et_$entrypoints_inaccessible,
		"^/^a", lec.comp (c).name);
        
        segname_count = 0;
        def_count = 0;
        
        allocate le_segnames in (le_area) set (lesp);
        allocate le_definitions in (le_area) set (ledp);
        
        lec.comp (c).tables.lesp = lesp;
        lec.comp (c).tables.ledp = ledp;
        
        lesp = ts (1);
        ledp = ts (2);
        
      end;
      else do;

        /* allocate copies of the tables, set the component pointers	*/
        /* and copy the tables.				*/

        segname_count = les.n_segnames;
        def_count = led.n_defs;

        allocate le_segnames in (le_area) set (lesp);
        allocate le_definitions in (le_area) set (ledp);

        unspec (les) = unspec (ts (1) -> les);
        unspec (led) = unspec (ts (2) -> led);

        lec.comp (c).tables.lesp = lesp;
        lec.comp (c).tables.ledp = ledp;

        lesp = ts (1);
        ledp = ts (2);
      end;

  end;

  call release_temp_segments_ ((le_data_$caller), ts, 0);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


add_segname:
  proc (lecp,			/** components pointer  (in )	*/
       leshp,			/** seg hash tbl ptr    (i/o)	*/
       lesp,			/** segnames pointer    (i/o) */
       comp,			/** component index	    (in ) */
       name,			/** name to add	    (in ) */
       success);			/** success flag	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	add_segname				*/
  /***	Input:	leshp, lesp, name				*/
  /***	Function:	adds a segname definition to the segname table	*/
  /***		and hashes it into the hash table.		*/
  /***	Output:	leshp, lesp, success			*/
  /***							*/
  /*** ****************************************************************(/
  
  /* parameters */

  dcl lecp		ptr parameter;
  dcl leshp		ptr parameter;
  dcl lesp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl name		char (*) parameter;
  dcl success		bit (1) parameter;

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (0 refer (les.n_segnames))
			like le_segnames.segname;
  dcl 01 seg_addr		aligned based (addr (seg_bits)),
       02 comp		fixed bin (17) unaligned,
       02 index		fixed bin (17) unaligned;

  /* automatic */

  dcl dup_bits		bit (36) aligned automatic;
  dcl ec			fixed bin (35) automatic;
  dcl index		fixed bin automatic;
  dcl newsz		fixed bin automatic;
  dcl seg_bits		bit (36) aligned automatic;

  success = false;

  /* build the hash table key value */

  seg_addr.comp = comp;
  seg_addr.index = les.n_segnames + 1;

  /* first try to hash the name into the table */

  call hash_$in (leshp, name, seg_bits, ec);

  /* hash_ thinks the table is too full, but it may just be unable to	*/
  /* add an entry during rehash due to a bad packing. So we will make */
  /* one rehash attempt with an even bigger table to try to open it	*/
  /* up.  If that fails, then we give up.			*/

  if ec = error_table_$full_hashtbl
    then do;

      /* calculate the new table size */

      newsz = hash_$opt_size (les.n_segnames + 1);
      newsz = hash_$opt_size (les.n_segnames + 1);

      /* try rehashing the table again */

      call rehash_ (leshp, newsz, ec);

      /* if it didn't work, then we abort the run */

      if ec ^= 0
        then call le_error_ (LE_ABORT_ERROR, ec, "^/While adding segname ^a.",
	        name);

      /* otherwise retry the hash of the segname */

      call hash_$in (leshp, name, seg_bits, ec);
    end;

  /* if we have a duplicate name, then we check to see if it is a	*/
  /* path or library component.  Library duplicates we can ignore	*/
  /* but if we have to ignore a required segname, we print a message.	*/

  if ec = error_table_$namedup
    then do;

      /* check the duplicate to see if it is already on this component */

      call hash_$search (leshp, name, dup_bits, ec);
      if ec ^= 0
        then call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	        "Segname hash table damage found while adding segname ^a",
	        name);

      /* flag that we have not added the segname */

      success = false;

      /* print an error message if the segname is already on a	*/
      /* different component, and that component is required.	*/

      if addr (dup_bits) -> seg_addr.comp ^= comp
        then if ^lec.comp (comp).library
	     then call le_error_ (LE_ERROR, le_et_$dup_segname,
		     "^/Deleting segname ""^a"" in component ^a", name,
		     lec.comp (comp).name);
    end;

  /* if something else is wrong, we have a major problem so we punt */

  else if ec ^= 0
    then call le_error_ (LE_ABORT_ERROR, ec, "^/While adding segname ^a",
	    name);
  else do;

    /* if the hash was ok, grow the segname table, and create an	*/
    /* empty entry with the appropriate name and return the index	*/

    index, les.n_segnames = les.n_segnames + 1;

    les.segname (index).str = name;
    les.segname (index).relp = None;
    success = true;
  end;

  end add_segname;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_input;
%include le_data;
%include object_link_dcls;
%include definition_dcls;

  end le_make_segname_tbl_;
