/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*
   This program contains data conversion logic for the trace facility.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_conversions_:
  procedure ();
    signal error;


cv_inout_to_bits:
  entry (char8_i) returns (bit (2) aligned);
    char8 = char8_i;
    if char8 = "on" | char8 = "inout" | char8 = "both"
    then return ("11"b);
    else if char8 = "off" | char8 = "none" | char8 = "neither"
    then return ("00"b);
    else if char8 = "in"
    then return ("10"b);
    else if char8 = "out"
    then return ("01"b);
    else call
	 sub_err_ (error_table_$bad_arg, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	 "I don't understand ""^a"".  I was expecting in, out, on, or off.", char8);


cv_bits_to_inout:
  entry (bit2_i) returns (char (8) aligned);
    bit2 = bit2_i;
    if bit2 = "00"b
    then return ("off");
    else if bit2 = "01"b
    then return ("out");
    else if bit2 = "10"b
    then return ("in");
    else if bit2 = "11"b
    then return ("on");
    else signal error;


cv_n_to_number:
  entry (char16_i) returns (fixed bin (34));
    char16 = char16_i;
    on conversion, size
      call
        sub_err_ (error_table_$bad_arg, trace_$me (), ACTION_CANT_RESTART, null (), rv,
        "I can not interpret ""^a"" as a number between 0 and ^d.", char16, MAX_34_BIT_NUMBER);
(size):
    number = convert (number, char16);
    if number < 0 | number > MAX_34_BIT_NUMBER
    then call
	 sub_err_ (error_table_$bad_arg, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	 "I can not interpret ""^a"" as a number between 0 and ^d.", char16, MAX_34_BIT_NUMBER);
    return (number);


cv_onoff_to_bit:
  entry (char8_i) returns (bit aligned);
    char8 = char8_i;
    if char8 = "on"
    then return ("1"b);
    else if char8 = "off"
    then return ("0"b);
    else call
	 sub_err_ (error_table_$bad_arg, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	 "I don't understand ""^a"".  I was expecting on, or off.", char8);


cv_bit_to_onoff:
  entry (bit1_i) returns (char (8) aligned);
    if bit1_i
    then return ("on");
    else return ("off");
%page;
/* START OF DEC_LARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  bit1_i			 bit aligned parm;
    dcl  bit2_i			 bit (2) aligned parm;
    dcl  char8_i			 char (8) aligned parm;
    dcl  char16_i			 char (16) parm;


/* Automatic */

    dcl  bit2			 bit (2) aligned;
    dcl  char8			 char (8) aligned;
    dcl  char16			 char (16);
    dcl  code			 fixed bin (35);
    dcl  number			 fixed bin (35);
    dcl  rv			 fixed bin (35);


/* Static */

    dcl  MAX_34_BIT_NUMBER		 fixed bin (35) static options (constant) init (17179869183);
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  conversion			 condition;
    dcl  error			 condition;
    dcl  size			 condition;


/* Based */


/* External Variables */

    dcl  error_table_$bad_arg		 fixed bin (35) ext;


/* External Entries */

    dcl  sub_err_			 entry () options (variable);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */



%include sub_err_flags;
%page;
%include trace_interface;

  end trace_conversions_;
