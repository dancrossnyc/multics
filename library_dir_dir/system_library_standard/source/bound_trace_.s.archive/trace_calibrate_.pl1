/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*
   This program experimentally determines the metering compensation values.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_calibrate_:
  proc (compensation_kind_i, entry_comp_o, return_comp_o);

    if trace_$num_entrypoints () ^= 0
    then signal error;

    transaction_id = clock ();
    if ^trace_$transaction_begin (transaction_id)
    then signal error;
    if compensation_kind_i = "repeat"
    then do;
      call trace_tables_$specify_entrypoint (codeptr (trace_repeat_), "trace_repeat_$trace_repeat_", 0, "0"b);
      call trace_tables_$specify_entrypoint (codeptr (trace_repeat_dummy_), "trace_repeat_dummy_$trace_repeat_dummy_", 0, "0"b);
    end;
    else if compensation_kind_i = "recurse"
    then do;
      call trace_tables_$specify_entrypoint (codeptr (trace_recurse_), "trace_recurse_$trace_recurse_", 0, "0"b);
      call
        trace_tables_$specify_entrypoint (codeptr (trace_recurse_dummy_), "trace_recurse_dummy_$trace_recurse_dummy_", 0, "0"b);
    end;
    else signal error;
    stop_routine_saved = trace_$stop_routine ();
    call trace_$set_stop_routine (SNAP_ENTRIES);
    call trace_$set_enabled ("0"b);			/* Run without trace operators.		*/
    call trace_$set_trace ("00"b);
    if ^trace_$update_global_parms ()
    then signal error;
    call trace_$add_specified_eps (n_added, n_modified);
    if n_added ^= 2 | n_modified ^= 0
    then signal error;
    if ^trace_$transaction_end (transaction_id)
    then signal error;

    total = 0;
    trials_vcpu_start = vclock ();

TRIAL_LOOP:
    do total_trials = 0 by 1 while (total_trials < NUMBER_OF_TRIALS);
      run.elapsed = 0;

NO_INTERRUPTION_LOOP:				/* We are striving for perfection.		*/
      do while (run.elapsed.real_time >= run.elapsed.vcpu_time);
        if vclock () - trials_vcpu_start > 2000000
        then go to END_OF_TRIALS;			/* We know when to give up.			*/

        run.start.vcpu_time = vclock ();
        run.start.real_time = clock ();

        if compensation_kind_i = "repeat"
        then do;
	call
	  trace_repeat_ (NUMBER_OF_BASELINE_CALLS, trial.benchmark.baseline.entry.real_time,
	  trial.benchmark.baseline.return.real_time);
	call
	  trace_repeat_ (NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS, trial.benchmark.measure.entry.real_time,
	  trial.benchmark.measure.return.real_time);
        end;
        else if compensation_kind_i = "recurse"
        then do;
	call
	  trace_recurse_ (NUMBER_OF_BASELINE_CALLS, trial.benchmark.baseline.entry.real_time,
	  trial.benchmark.baseline.return.real_time);
	call
	  trace_recurse_ (NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS, trial.benchmark.measure.entry.real_time,
	  trial.benchmark.measure.return.real_time);
        end;
        else signal error;

        transaction_id = clock ();
        if ^trace_$transaction_begin (transaction_id)
        then signal error;
        else if compensation_kind_i = "recurse"
        then do;
	call
	  trace_tables_$specify_entrypoint (codeptr (trace_recurse_dummy_), "trace_recurse_dummy_$trace_recurse_dummy_",
	  0, "0"b);
	call trace_$set_trace ("00"b);
	call trace_$set_stop ("10"b);			/* -stop in */
	call trace_$set_stop_every (NUMBER_OF_BASELINE_CALLS);
	call trace_$add_specified_eps (n_added, n_modified);
	if n_added ^= 0 | n_modified ^= 1
	then signal error;
        end;
        call trace_$set_enabled ("1"b);
        if ^trace_$update_global_parms ()
        then signal error;
        call trace_$reset_meters ();
        if ^trace_$transaction_end (transaction_id)
        then signal error;

        if compensation_kind_i = "repeat"
        then call trace_repeat_ (NUMBER_OF_BASELINE_CALLS, not_used (1), not_used (2));
        else if compensation_kind_i = "recurse"
        then call trace_recurse_ (NUMBER_OF_BASELINE_CALLS, not_used (1), not_used (2));
        else signal error;

        transaction_id = clock ();
        if ^trace_$transaction_begin (transaction_id)
        then signal error;
        do tt_idx = 0 to 1;
	meters = trace_$entrypoint_local_meters (tt_idx);
	entry_ptr = trace_$entrypoint_ptr (tt_idx);
	if entry_ptr = codeptr (trace_repeat_)
	then do;
	  trial.meter.baseline.return.real_time = meters.real_time;
	  trial.meter.baseline.return.vcpu_time = meters.vcpu_time;
	end;
	else if entry_ptr = codeptr (trace_repeat_dummy_)
	then do;
	  trial.meter.baseline.entry.real_time = meters.real_time;
	  trial.meter.baseline.entry.vcpu_time = meters.vcpu_time;
	end;
	else if entry_ptr = codeptr (trace_recurse_)
	then ;
	else if entry_ptr = codeptr (trace_recurse_dummy_)
	then do;
	  trial.meter.baseline.return.real_time = meters.real_time - trial.meter.baseline.entry.real_time;
	  trial.meter.baseline.return.vcpu_time = meters.vcpu_time - trial.meter.baseline.entry.vcpu_time;
	  call
	    trace_tables_$specify_entrypoint (codeptr (trace_recurse_dummy_),
	    "trace_recurse_dummy_$trace_recurse_dummy_", 0, "0"b);
	  call trace_$set_trace ("00"b);
	  call trace_$set_stop ("10"b);		/* -stop in */
	  call trace_$set_stop_every (NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS);
	  call trace_$add_specified_eps (n_added, n_modified);
	  if n_added ^= 0 | n_modified ^= 1
	  then signal error;
	end;
	else signal error;
        end;
        call trace_$reset_meters ();
        if ^trace_$transaction_end (transaction_id)
        then signal error;

        if compensation_kind_i = "repeat"
        then call trace_repeat_ (NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS, not_used (1), not_used (2));
        else if compensation_kind_i = "recurse"
        then call trace_recurse_ (NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS, not_used (1), not_used (2));
        else signal error;

        run.stop.real_time = clock ();
        run.stop.vcpu_time = vclock ();

        run.elapsed = run.stop - run.start;

        transaction_id = clock ();
        if ^trace_$transaction_begin (transaction_id)
        then signal error;
        call trace_$set_enabled ("0"b);			/* Run without trace operators.		*/
        if ^trace_$update_global_parms ()
        then signal error;
        if ^trace_$transaction_end (transaction_id)
        then signal error;
      end NO_INTERRUPTION_LOOP;


      do tt_idx = 0 to 1;
        entry_ptr = trace_$entrypoint_ptr (tt_idx);
        meters = trace_$entrypoint_local_meters (tt_idx);

        if entry_ptr = codeptr (trace_repeat_)
        then do;
	trial.meter.measure.return.real_time = meters.real_time;
	trial.meter.measure.return.vcpu_time = meters.vcpu_time;
        end;
        else if entry_ptr = codeptr (trace_repeat_dummy_)
        then do;
	trial.meter.measure.entry.real_time = meters.real_time;
	trial.meter.measure.entry.vcpu_time = meters.vcpu_time;
        end;
        else if entry_ptr = codeptr (trace_recurse_)
        then ;
        else if entry_ptr = codeptr (trace_recurse_dummy_)
        then do;
	trial.meter.measure.return.real_time = meters.real_time - trial.meter.measure.entry.real_time;
	trial.meter.measure.return.vcpu_time = meters.vcpu_time - trial.meter.measure.entry.vcpu_time;
        end;
        else signal error;
      end;

      total = total + trial;
    end TRIAL_LOOP;

END_OF_TRIALS:
    transaction_id = clock ();
    if ^trace_$transaction_begin (transaction_id)
    then signal error;
    call trace_$specify_entrypoints ("*", null ());
    call trace_$set_stop_routine (stop_routine_saved);
    call trace_$set_enabled ("1"b);
    if ^trace_$update_global_parms ()
    then signal error;
    call trace_$remove_specified_eps (n_removed);
    if n_removed ^= 2
    then signal error;
    if ^trace_$transaction_end (transaction_id)
    then signal error;

    if total_trials = 0
    then do;
      entry_comp_o = 0;
      return_comp_o = 0;
    end;
    else do;
      total_measured_calls = multiply (total_trials, NUMBER_OF_MEASURED_CALLS, 17);

      entry_comp_o =
        divide ((total.meter.measure.entry - total.meter.baseline.entry)
        - (total.benchmark.measure.entry.real_time - total.benchmark.baseline.entry.real_time), total_measured_calls, 53);
      return_comp_o =
        divide ((total.meter.measure.return - total.meter.baseline.return)
        - (total.benchmark.measure.return.real_time - total.benchmark.baseline.return.real_time), total_measured_calls,
        53);
    end;

    return;
%page;
/* SUBROUTINES */


SNAP_ENTRIES:
  proc (event_i);
    dcl  1 event_i			 like event aligned parm;
    dcl  EVENT_VERSION_3		 char (4) aligned static options (constant) init ("TEV3");
    dcl  event_ptr			 ptr;
    dcl  1 event			 aligned based (event_ptr),
						/* Trace_catch_ knows this is 16 words.	*/
	 2 version		 char (4),
	 2 kind			 char (2) unal,
	 2 frame_count		 fixed bin unal,
	 2 frame			 like meters,
	 2 entry_ptr		 ptr unal,
	 2 saved			 like counts,
	 2 entry_idx		 fixed bin,
	 2 arg_list_ptr		 ptr unal,
	 2 callers_sp		 ptr unal,
	 2 return_ptr		 ptr unal;
    dcl  1 snap_meters		 like meters aligned;
    dcl  trace_catch_$start_tracing	 entry ();
    dcl  trace_catch_$stop_tracing	 entry ();

    event_ptr = addr (event_i);
    if event.version ^= EVENT_VERSION_3 | event.kind ^= "ca"
    then signal error;

    call trace_catch_$stop_tracing ();			/* Flush meters form trace_catch_ frames in stack.*/
    snap_meters = trace_$entrypoint_local_meters (event.entry_idx);
    call trace_catch_$start_tracing ();			/* Replant the trace operators pointers.	*/

    if event.saved.calls + 1 = NUMBER_OF_BASELINE_CALLS
    then do;
      trial.meter.baseline.entry.real_time = snap_meters.real_time;
      trial.meter.baseline.entry.vcpu_time = snap_meters.vcpu_time;
    end;
    else if event.saved.calls + 1 = NUMBER_OF_BASELINE_CALLS + NUMBER_OF_MEASURED_CALLS
    then do;
      trial.meter.measure.entry.real_time = snap_meters.real_time;
      trial.meter.measure.entry.vcpu_time = snap_meters.vcpu_time;
    end;
    else signal error;

    return;
  end SNAP_ENTRIES;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  compensation_kind_i		 char (8) aligned parm;
    dcl  1 entry_comp_o		 aligned parm like compensation;
    dcl  1 return_comp_o		 aligned parm like compensation;


/* Automatic */

    dcl  entry_ptr			 ptr unal;
    dcl  n_added			 fixed bin;
    dcl  n_modified			 fixed bin;
    dcl  n_removed			 fixed bin;
    dcl  not_used			 (2) fixed bin (53);
    dcl  stop_routine_saved		 entry variable;
    dcl  total_measured_calls		 fixed bin;
    dcl  total_trials		 fixed bin;
    dcl  transaction_id		 fixed bin (71);
    dcl  trials_vcpu_start		 fixed bin (53);
    dcl  tt_idx			 fixed bin;

    dcl  1 run			 aligned,
	 2 start			 like compensation,
	 2 stop			 like compensation,
	 2 elapsed		 like compensation;

    dcl  1 trial			 aligned,
	 2 benchmark,
	   3 baseline,
	     4 entry,
	       5 real_time		 fixed bin (53),
	     4 return,
	       5 real_time		 fixed bin (53),
	   3 measure,
	     4 entry,
	       5 real_time		 fixed bin (53),
	     4 return,
	       5 real_time		 fixed bin (53),
	 2 meter,
	   3 baseline,
	     4 entry		 like compensation,
	     4 return		 like compensation,
	   3 measure,
	     4 entry		 like compensation,
	     4 return		 like compensation;

    dcl  1 total			 aligned like trial;


/* Static */

    dcl  NUMBER_OF_BASELINE_CALLS	 fixed bin (34) static options (constant) init (2);
    dcl  NUMBER_OF_MEASURED_CALLS	 fixed bin (34) static options (constant) init (16);
    dcl  NUMBER_OF_TRIALS		 fixed bin static options (constant) init (8);
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  error			 condition;


/* Based */



/* External Variables */



/* External Entries */

    dcl  trace_repeat_		 entry (fixed bin (34), fixed bin (53), fixed bin (53));
    dcl  trace_repeat_dummy_		 entry (fixed bin (53));
    dcl  trace_recurse_		 entry (fixed bin (34), fixed bin (53), fixed bin (53));
    dcl  trace_recurse_dummy_		 entry (fixed bin, fixed bin (53));
    dcl  trace_tables_$specify_entrypoint entry (ptr unal, char (65) var, fixed bin, bit aligned);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include sub_err_flags;
%page;
%include trace_interface;

  end trace_calibrate_;
