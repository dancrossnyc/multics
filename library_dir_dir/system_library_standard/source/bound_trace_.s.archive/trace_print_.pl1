/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/*
   This program is called by trace_catch_ when the trace or stop conditions are satisfied.
   When called to trace, it formats and writes a trace message and executes a command line if required.
   When called to stop, it prints a stop message and checks the watch table.

   Initial Version: 25 February 1969 by BLW.
   Modified:  December 1974 by S.E. Barr.
   Modified:  1 May 1975 by RAB for -return_value.
   Modified:  Apr 1982 by Jeffrey D. Ives to use ioa_$ioa_switch for efficiency (instead of ioa_$ioa_stream).
   Modified:  July 1983 by Jeffrey D. Ives for multitasking and to trace unwinds and signals.
   Modified:  May 1984 by Jeffrey D. Ives for new trace interface and to separate trace and stop.
*/

/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */

trace_print_:
  proc ();
    signal error;
%page;
trace:
  entry (event_i);

    event_ptr = addr (event_i);
    if event.version ^= EVENT_VERSION_3
    then signal error;
    clock_reading = clock ();

    if event.kind = "ca"
    then
TRACE_CALL:
      do;
        if ^trace_$long ()
        then char256var = trace_$entrypoint_name (event.entry_idx);
        else do;
	call hcs_$fs_get_path_name ((event.return_ptr), dir_path, bname_length, entry_name, code);
	if code ^= 0
	then do;
	  call
	    ioa_$rsnnl ("^a from ^p", char256var, return_string_length, trace_$entrypoint_name (event.entry_idx),
	    event.return_ptr);
	end;
	else do;
	  call pl1_frame_$name ((event.callers_sp), bname_ptr, bname_length);

	  call interpret_bind_map_ ((event.return_ptr), cname, offset, code);
	  if code ^= 0
	  then do;
	    cname = entry_name;
	    offset = bin (rel (event.return_ptr), 18);
	  end;

	  if bname_ptr ^= null ()
	  then if cname = bname
	       then bname_ptr = null ();

	  if bname_ptr = null ()
	  then call
	         ioa_$rsnnl ("^a from ^a", char256var, return_string_length, trace_$entrypoint_name (event.entry_idx),
	         cname);
	  else call
	         ioa_$rsnnl ("^a from ^a$^a", char256var, return_string_length,
	         trace_$entrypoint_name (event.entry_idx), cname, bname);
	end;
        end;
      end TRACE_CALL;
    else if event.kind = "re"
    then char256var = trace_$entrypoint_name (event.entry_idx);
    else if event.kind = "un"
    then char256var = trace_$entrypoint_name (event.entry_idx) || " unwound";
    else if event.kind = "si"
    then
TRACE_SIGNAL:
      do;
        if event.arg_list_ptr -> arg_list.header.call_type ^= Interseg_call_type
        then char256var = "The signal_ routine has been called without an intersegment argument list.";
        else if event.arg_list_ptr -> arg_list.header.arg_count < 1
        then char256var = "The signal_ routine has been called without arguments.";
        else if event.arg_list_ptr -> arg_list.header.desc_count < 1
        then char256var = "The signal_ routine has been called without argument descriptors.";
        else if event.arg_list_ptr -> arg_list.desc_ptrs (1) -> arg_descriptor.type ^= char_dtype
        then char256var = "The first argument to signal_ is not a non-varying character string.";
        else do;
	bname_ptr = event.arg_list_ptr -> arg_list.arg_ptrs (1);
	bname_length = event.arg_list_ptr -> arg_list.desc_ptrs (1) -> arg_descriptor.size;

	call interpret_bind_map_ ((event.return_ptr), cname, offset, code);
	if code ^= 0
	then char256var = bname;
	else call ioa_$rsnnl ("^a from ^a|^o", char256var, return_string_length, bname, cname, offset);

	char256var = char256var || SIGNAL_PTR_STRING (2, "machine conditions");
	char256var = char256var || SIGNAL_PTR_STRING (3, "info");
	char256var = char256var || SIGNAL_PTR_STRING (4, "crawlout machine conditions");
        end;

SIGNAL_PTR_STRING:
  proc (arg_list_idx_i, ptr_name_i) returns (char (256) var);
    dcl  arg_list_idx_i		 fixed bin parm;
    dcl  ptr_name_i			 char (*) parm;
    dcl  return_string_length		 fixed bin;
    dcl  signal_ptr_string		 char (256) var;

    if event.arg_list_ptr -> arg_list.header.arg_count < arg_list_idx_i
    then signal_ptr_string = "";
    else if event.arg_list_ptr -> arg_list.header.desc_count < arg_list_idx_i
    then signal_ptr_string = "";
    else if event.arg_list_ptr -> arg_list.desc_ptrs (arg_list_idx_i) -> arg_descriptor.type ^= pointer_dtype
    then call
	 ioa_$rsnnl ("The ^a ptr argument to signal_ is not an aligned pointer", signal_ptr_string,
	 return_string_length, ptr_name_i);
    else if event.arg_list_ptr -> arg_list.arg_ptrs (arg_list_idx_i) -> based_ptr = null ()
    then signal_ptr_string = "";
    else if ptr_name_i = "info"
    then
      begin;
      dcl	 short_message		   char (8) aligned;
      dcl	 long_message		   char (100) aligned;
      dcl	 convert_status_code_	   entry (fixed bin (35), char (8) aligned, char (100) aligned);
%include condition_info_header;
      condition_info_header_ptr = event.arg_list_ptr -> arg_list.arg_ptrs (arg_list_idx_i) -> based_ptr;
      if condition_info_header.version ^= 1
      then call
	   ioa_$rsnnl ("  ^a at ^p (condition_info_header.version = ^d)", signal_ptr_string, return_string_length,
	   ptr_name_i, condition_info_header_ptr, condition_info_header.version);
      else do;
        if condition_info_header.status_code = 0
        then long_message = "";
        else call convert_status_code_ (condition_info_header.status_code, short_message, long_message);
        call
	ioa_$rsnnl ("  ^a:  ^a  ^a", signal_ptr_string, return_string_length, ptr_name_i, long_message,
	condition_info_header.info_string);
      end;
    end;
    else call
	 ioa_$rsnnl ("  ^a at ^p", signal_ptr_string, return_string_length, ptr_name_i,
	 event.arg_list_ptr -> arg_list.arg_ptrs (arg_list_idx_i) -> based_ptr);

    return (signal_ptr_string);

  end SIGNAL_PTR_STRING;

      end TRACE_SIGNAL;
    else call ioa_$rsnnl ("Unknown  trace event ""^a""", char256var, return_string_length, event.kind);

/* 
 CLOCK TIME    REAL SEC   VCPU SEC  PF    CALL# RECURSION/HIGHEST   ENTRYPOINT
19:01:00.460   0.000156   0.000156   0<-      1 1/1 wioctl_$control
*/

    osw = trace_$output_switch ();

    if trace_$long ()
    then do;
      if osw.iocb_ptr ^= LAST_OSW_IOCB_PTR_THAT_A_TRACE_MESSAGE_WAS_WRITTEN_TO
      then call
	   ioa_$ioa_switch (osw.iocb_ptr, "^12a ^25a ^a^13a ^a", " CLOCK TIME ", METERS_STRING_HEADER (),
	   DOTS_STRING (event.frame_count), COUNTS_STRING_HEADER (), "  ENTRYPOINT");
      call
        ioa_$ioa_switch (osw.iocb_ptr, "^12a ^25a ^a^13a ^a", trace_time_ (clock_reading),
        METERS_STRING (event.kind, event.frame), DOTS_STRING (event.frame_count), COUNTS_STRING (event.kind, event.saved),
        char256var);
    end;
    else do;
      if osw.iocb_ptr ^= LAST_OSW_IOCB_PTR_THAT_A_TRACE_MESSAGE_WAS_WRITTEN_TO
      then call
	   ioa_$ioa_switch (osw.iocb_ptr, "^a^13a ^a", DOTS_STRING (event.frame_count), COUNTS_STRING_HEADER (),
	   "  ENTRYPOINT");
      call
        ioa_$ioa_switch (osw.iocb_ptr, "^a^13a ^a", DOTS_STRING (event.frame_count),
        COUNTS_STRING (event.kind, event.saved), char256var);
    end;
    LAST_OSW_IOCB_PTR_THAT_A_TRACE_MESSAGE_WAS_WRITTEN_TO = osw.iocb_ptr;

    if event.kind = "ca" | event.kind = "re"
    then
DISPLAY_ARGUMENT_LIST_AND_CALL_CP:
      begin;
        dcl  indentation	     fixed bin;
        dcl  first_arg_to_print	     fixed bin;
        dcl  last_arg_to_print	     fixed bin;
        dcl  1 display_args_at	     aligned,
	     2 call		     bit unal,
	     2 return		     bit unal;
        dcl  cu_$cp			     entry (ptr, fixed bin (21), fixed bin (35));
        dcl  display_argument_list_	     entry (ptr, ptr, ptr, ptr, ptr, fixed bin, fixed bin, fixed bin);

        string (display_args_at) = trace_$arguments (event.entry_idx);
        if (event.kind = "ca" & display_args_at.call) | (event.kind = "re" & display_args_at.return)
        then do;
	first_arg_to_print = 1;
	if event.kind = "ca" & trace_$function (event.entry_idx)
	then last_arg_to_print = event.arg_list_ptr -> arg_list.header.arg_count - 1;
	else last_arg_to_print = event.arg_list_ptr -> arg_list.header.arg_count;
	if last_arg_to_print > 0
	then do;
	  if trace_$long ()
	  then indentation = min (event.frame_count, 40) + 54;
	  else indentation = min (event.frame_count, 40) + 15;
	  call
	    display_argument_list_ (osw.iocb_ptr, null (), null (), (event.arg_list_ptr), (event.entry_ptr),
	    first_arg_to_print, last_arg_to_print, indentation);
	end;
        end;

        char256var = trace_$call (event.entry_idx);
        if length (char256var) ^= 0
        then call cu_$cp (addrel (addr (char256var), 1), length (char256var), code);
      end DISPLAY_ARGUMENT_LIST_AND_CALL_CP;

    return;
%page;
stop:
  entry (event_i, watch_values_changed_i);

    event_ptr = addr (event_i);
    if event.version ^= EVENT_VERSION_3
    then signal error;
    osw = trace_$output_switch ();

    do iop = osw.iocb_ptr, iox_$error_output while (iop -> iocb.actual_iocb_ptr ^= osw.iocb_ptr -> iocb.actual_iocb_ptr);
      if event.kind = "ca"
      then call
	   ioa_$ioa_switch (iop, "^a: Stopping at the call of ^a.", trace_$me (),
	   trace_$entrypoint_name (event.entry_idx));
      else call
	   ioa_$ioa_switch (iop, "^a: Stopping at the return of ^a.", trace_$me (),
	   trace_$entrypoint_name (event.entry_idx));
    end;

    if watch_values_changed_i
    then
DISPLAY_CHANGED_LOCATIONS:
      begin;
        dcl  location_idx		     fixed bin;
        dcl  location_ptr		     ptr unal;
        dcl  prev_location_baseno	     bit (18) aligned;

        prev_location_baseno = ""b;
        do location_idx = 0 to trace_$num_locations () - 1;
	watch_values = trace_$location_values (location_idx);
	if watch_values.old ^= watch_values.new
	then do;
	  location_ptr = trace_$location_ptr (location_idx);
	  if baseno (location_ptr) ^= prev_location_baseno
	  then
	    do iop = osw.iocb_ptr,
	      iox_$error_output while (iop -> iocb.actual_iocb_ptr ^= osw.iocb_ptr -> iocb.actual_iocb_ptr);
	    call ioa_$ioa_switch (iop, "^a", trace_$location_seg_path (location_idx));
	    prev_location_baseno = baseno (location_ptr);
	  end;
	  do iop = osw.iocb_ptr,
	    iox_$error_output while (iop -> iocb.actual_iocb_ptr ^= osw.iocb_ptr -> iocb.actual_iocb_ptr);
	    call ioa_$ioa_switch (iop, "^20x^w -> ^w at ^p", watch_values.old, watch_values.new, location_ptr);
	  end;
	end;
        end;
      end DISPLAY_CHANGED_LOCATIONS;

    spp = trace_$stop_proc ();
    if spp.entry_value = cu_$cl
    then call cu_$cl (CL_FLAGS);
    else call spp.entry_value ();

    return;
%page;
allocate_buffer:
  entry (buffer_ptr_o);
    allocate buffer;
    buffer.h.version = BUFFER_VERSION_3;
    buffer.h.count = 0;
    buffer_ptr_o = buffer_ptr;
    return;

copy_buffer_ptr:
  entry (buffer_ptr_source_i, buffer_ptr_target_i);
    if buffer_ptr_target_i = buffer_ptr_source_i
    then return;
    buffer_ptr = buffer_ptr_target_i;
    buffer_ptr_target_i = buffer_ptr_source_i;
    if buffer_ptr = null ()
    then return;
    if buffer.h.version ^= BUFFER_VERSION_3
    then signal error;
    free buffer;
    return;


buffer_counts:
  entry (buffer_first_idx_o, buffer_count_o);
    buffer_ptr = trace_$buffer_ptr ();
    if buffer_ptr = null ()
    then do;
      buffer_first_idx_o = 0;
      buffer_count_o = 0;
    end;
    else do;
      if buffer.h.version ^= BUFFER_VERSION_3
      then signal error;
      buffer_first_idx_o = max (0, buffer.count - dim (buffer.e, 1));
      buffer_count_o = buffer.count;
    end;
    return;




buffer_event:
  entry (buffer_idx_i, frame_count_o, kind_o, entry_ptr_o, saved_counts_o, frame_meters_o);
    event_ptr = EVENT_PTR (buffer_idx_i);
    if event_ptr = null ()
    then do;
      frame_count_o = -1;
      kind_o = "!!";
      entry_ptr_o = null ();
      saved_counts_o = -1;
      frame_meters_o = -1;
    end;
    else do;
      frame_count_o = event.frame_count;
      kind_o = event.kind;
      entry_ptr_o = event.entry_ptr;
      saved_counts_o = event.saved;
      frame_meters_o = event.frame;
    end;
    return;



/*
 CLOCK TIME    REAL SEC   VCPU SEC  PF    CALL# RECURSION/HIGHEST   ENTRYPOINT
19:01:00.460   0.069478   0.000318   1<-      1 1/1 user_info_$homedir
*/

buffer_event_header:
  entry (buffer_idx_i) returns (char (256) var);
    event_ptr = EVENT_PTR (buffer_idx_i);
    if event_ptr = null ()
    then return ("There is no buffer or the buffer index is out of bounds.");

    if trace_$long ()
    then return (" CLOCK TIME  " || METERS_STRING_HEADER () || " " || DOTS_STRING (event.frame_count)
	 || COUNTS_STRING_HEADER () || "   ENTRYPOINT");
    else return (DOTS_STRING (event.frame_count) || COUNTS_STRING_HEADER () || "   ENTRYPOINT");




buffer_event_string:
  entry (buffer_idx_i) returns (char (256) var);
    event_ptr = EVENT_PTR (buffer_idx_i);
    if event_ptr = null ()
    then return ("There is no buffer or the buffer index is out of bounds.");

    if event.kind = "ca" | event.kind = "re"
    then char256var = trace_$entrypoint_name (trace_$entrypoint_index (event.entry_ptr));
    else if event.kind = "un"
    then char256var = trace_$entrypoint_name (trace_$entrypoint_index (event.entry_ptr)) || " unwound";
    else if event.kind = "si"
    then char256var = rtrim (addr (event.saved) -> based_signal_name);
    else char256var = "Unknown trace event """ || event.kind || """";

    if trace_$long ()
    then return (trace_time_ (addr (event.callers_sp) -> fb71based) || " " || METERS_STRING (event.kind, event.frame)
	 || " " || DOTS_STRING (event.frame_count) || COUNTS_STRING (event.kind, event.saved) || " " || char256var);
    else return (DOTS_STRING (event.frame_count) || COUNTS_STRING (event.kind, event.saved) || " " || char256var);
%page;
cv_file_path_to_osw:
  entry (char256var_i, referencing_ptr_i) returns (1 like output_switch aligned);
    osw.iocb_ptr = null ();
    osw.stream_name = "";
    osw.file_path = char256var_i;
    if osw.file_path = ""
    then return (osw);

    osw.stream_name = "trace_of_." || unique_chars_ (""b);

    if length (osw.file_path) < 6
    then osw.file_path = osw.file_path || ".trace";
    else if substr (osw.file_path, length (osw.file_path) - 5) ^= ".trace"
    then osw.file_path = osw.file_path || ".trace";

    call iox_$attach_name ((osw.stream_name), osw.iocb_ptr, "vfile_ " || osw.file_path, (referencing_ptr_i), code);
    if code ^= 0
    then call
	 sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "Attempting to attach file ""^a"".",
	 osw.file_path);

    call iox_$open (osw.iocb_ptr, Stream_output, "0"b, code);
    if code ^= 0
    then do;
      call iox_$detach_iocb (osw.iocb_ptr, rv);
      call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "Attempting to open ""^a"".", osw.file_path);
    end;

    return (osw);


cv_stream_name_to_osw:
  entry (char32var_i) returns (1 like output_switch aligned);
    osw.iocb_ptr = null ();
    osw.stream_name = char32var_i;
    osw.file_path = "";
    if osw.stream_name ^= ""
    then do;
      if before (osw.stream_name, ".") = "trace_of_"
      then call
	   sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	   "The io stream prefix ""trace_of_."" is reserved for use by trace only.");
      call iox_$look_iocb ((osw.stream_name), osw.iocb_ptr, code);
      if code ^= 0
      then call
	   sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "Attempting to locate the io stream ""^a"".",
	   osw.stream_name);
    end;
    return (osw);


copy_osw:
  entry (osw_source_i, osw_dest_i);
    if osw_source_i.iocb_ptr = osw_dest_i.iocb_ptr
    then return;
    osw = osw_dest_i;
    osw_dest_i = osw_source_i;
    if osw.file_path = ""
    then return;

    call iox_$close (osw.iocb_ptr, code);
    if code ^= 0
    then call
	 sub_err_ (code, trace_$me (), ACTION_DEFAULT_RESTART, null (), rv, "Attempting to close file ""^a"".",
	 osw.file_path);

    code = 0;
    call iox_$detach_iocb (osw.iocb_ptr, code);
    if code ^= 0
    then call
	 sub_err_ (code, trace_$me (), ACTION_DEFAULT_RESTART, null (), rv, "Attempting to detach file ""^a"".",
	 osw.file_path);

    return;


cv_entry_name_to_spp:
  entry (char256var_i, referencing_ptr_i) returns (1 like stop_proc aligned);
    call cu_$make_entry_value (null (), spp.entry_value);
    spp.entry_name = char256var_i;
    if spp.entry_name ^= ""
    then do;
      spp.entry_value = cv_entry_ ((spp.entry_name), (referencing_ptr_i), code);
      if code ^= 0
      then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "-stop_proc ""^a"".", spp.entry_name);
    end;
    return (spp);
%page;
/* SUBROUTINES */


EVENT_PTR:
  proc (buffer_idx_i) returns (ptr unal);
    dcl  buffer_idx_i		 fixed bin (34) parm;
    dcl  buffer_ptr			 ptr unal;
    dcl  buffer_idx			 fixed bin (34);
    dcl  buffer_array_idx		 fixed bin;
    buffer_ptr = trace_$buffer_ptr ();
    buffer_idx = buffer_idx_i;
    if buffer_ptr = null ()
    then return (null ());
    if buffer.h.version ^= BUFFER_VERSION_3
    then signal error;
    if buffer_idx < 0 | buffer_idx < buffer.count - dim (buffer.e, 1) | buffer_idx >= buffer.count
    then return (null ());
    buffer_array_idx = mod (buffer_idx, dim (buffer.e, 1));
    if buffer.e (buffer_array_idx).version ^= EVENT_VERSION_3
    then signal error;
    return (addr (buffer.e (buffer_array_idx)));
  end EVENT_PTR;



METERS_STRING:
  proc (kind_i, meters_i) returns (char (40) var);
    dcl  kind_i			 char (2) parm;
    dcl  1 meters_i			 like meters aligned parm;
    dcl  meters_string		 char (40) var;
    dcl  return_string_length		 fixed bin;
    if kind_i = "re" | kind_i = "un"
    then call
	 ioa_$rsnnl ("^10.6f ^10.6f ^3d", meters_string, return_string_length, float (meters_i.real_time, 27) * 1e-6,
	 float (meters_i.vcpu_time, 27) * 1e-6, meters_i.page_faults);
    else meters_string = (25)" ";
    return (meters_string);

METERS_STRING_HEADER:
  entry () returns (char (25));
    return ("  REAL SEC   VCPU SEC  PF");
  end METERS_STRING;



DOTS_STRING:
  proc (number_of_dots_i) returns (char (40) var);
    dcl  number_of_dots_i		 fixed bin unal parm;
    dcl  dot_string			 char (40) var;
    dcl  return_string_length		 fixed bin;
    if number_of_dots_i <= maxlength (dot_string)
    then dot_string = copy (".", number_of_dots_i);
    else do;
      call ioa_$rsnnl ("[^d]", dot_string, return_string_length, number_of_dots_i);
      dot_string = copy (".", maxlength (dot_string) - length (dot_string)) || dot_string;
    end;
    return (dot_string);
  end DOTS_STRING;


COUNTS_STRING:
  proc (kind_i, saved_counts_i) returns (char (40) var);
    dcl  kind_i			 char (2) parm;
    dcl  1 saved_counts_i		 like counts aligned parm;
    dcl  kind_symbol		 char (2) aligned;
    dcl  counts_string		 char (40) var;
    dcl  return_string_length		 fixed bin;

    if kind_i = "ca"
    then kind_symbol = "->";
    else if kind_i = "re"
    then kind_symbol = "<-";
    else if kind_i = "un"
    then kind_symbol = "UW";
    else kind_symbol = "";

    if kind_i = "si"
    then counts_string = "Signal       ";
    else if kind_symbol = ""
    then counts_string = (13)" ";
    else call
	 ioa_$rsnnl ("^2a^7d ^d/^d", counts_string, return_string_length, kind_symbol, saved_counts_i.calls + 1,
	 saved_counts_i.level + 1, max (saved_counts_i.level + 1, saved_counts_i.max_level));

    return (counts_string);

COUNTS_STRING_HEADER:
  entry () returns (char (27));
    return ("    CALL# RECURSION/HIGHEST");
  end COUNTS_STRING;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */


/* Parameters */

    dcl  buffer_count_o		 fixed bin (34) parm;
    dcl  buffer_first_idx_o		 fixed bin (34) parm;
    dcl  buffer_idx_i		 fixed bin (34) parm;
    dcl  buffer_ptr_o		 ptr unal parm;
    dcl  buffer_ptr_source_i		 ptr unal parm;
    dcl  buffer_ptr_target_i		 ptr unal parm;
    dcl  char32var_i		 char (32) var parm;
    dcl  char256var_i		 char (256) var parm;
    dcl  entry_ptr_o		 ptr unal parm;
    dcl  frame_count_o		 fixed bin parm;
    dcl  kind_o			 char (2) unal parm;
    dcl  referencing_ptr_i		 ptr parm;
    dcl  watch_values_changed_i	 bit aligned parm;
    dcl  1 event_i			 like event aligned parm;
    dcl  1 frame_meters_o		 like meters aligned parm;
    dcl  1 osw_dest_i		 like output_switch aligned parm;
    dcl  1 osw_source_i		 like output_switch aligned parm;
    dcl  1 saved_counts_o		 like counts aligned parm;


/* Automatic */

    dcl  bname_length		 fixed bin;
    dcl  bname_ptr			 ptr;
    dcl  clock_reading		 fixed bin (71);
    dcl  cname			 char (32) aligned;
    dcl  code			 fixed bin (35);
    dcl  char256var			 char (256) var;
    dcl  dir_path			 char (168);
    dcl  entry_name			 char (32);
    dcl  offset			 fixed bin (18);
    dcl  iop			 ptr;
    dcl  return_string_length		 fixed bin;
    dcl  rv			 fixed bin (35);

    dcl  1 osw			 aligned like output_switch;
    dcl  1 spp			 aligned like stop_proc;

    dcl  EVENT_VERSION_3		 char (4) aligned static options (constant) init ("TEV3");
    dcl  event_ptr			 ptr;
    dcl  1 event			 aligned based (event_ptr), /* Trace_catch_ knows this is 16 words.	*/
	 2 version		 char (4),
	 2 kind			 char (2) unal,
	 2 frame_count		 fixed bin unal,
	 2 frame			 like meters,
	 2 entry_ptr		 ptr unal,
	 2 saved			 like counts,
	 2 entry_idx		 fixed bin,
	 2 arg_list_ptr		 ptr unal,
	 2 callers_sp		 ptr unal,
	 2 return_ptr		 ptr unal;


/* Static */

    dcl  1 CL_FLAGS			 aligned static options (constant),
	 2 reset_sw		 bit unal init ("0"b),
	 2 mbz			 bit (35) unal init (""b);

    dcl  LAST_OSW_IOCB_PTR_THAT_A_TRACE_MESSAGE_WAS_WRITTEN_TO ptr static init (null ());
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  error			 condition;


/* Based */

    dcl  based_ptr			 ptr based;
    dcl  based_signal_name		 char (24) aligned based;
    dcl  bname			 char (bname_length) based (bname_ptr);
    dcl  fb71based			 fixed bin (71) based;

    dcl  buffer_ptr			 ptr unal;
    dcl  BUFFER_VERSION_3		 char (8) aligned static options (constant) init ("TraceBF3");
    dcl  1 buffer			 aligned based (buffer_ptr),
	 2 h,
	   3 version		 char (8),
	   3 not_used		 fixed bin,
	   3 count		 fixed bin (34),
	 2 e			 (0:8191) like event; /* Trace_catch_ knows this dimension.		*/


/* External Variables */

    dcl  iox_$error_output		 ptr ext;


/* External Entries */

    dcl  cu_$cl			 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
    dcl  cu_$make_entry_value		 entry (ptr, entry);
    dcl  cv_entry_			 entry (char (*), ptr, fixed bin (35)) returns (entry);
    dcl  hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
    dcl  interpret_bind_map_		 entry (ptr, char (32) aligned, fixed bin (18), fixed bin (35));
    dcl  ioa_$rsnnl			 entry options (variable);
    dcl  ioa_$ioa_switch		 entry options (variable);
    dcl  iox_$attach_name		 entry (char (*), ptr, char (*), ptr, fixed bin (35));
    dcl  iox_$close			 entry (ptr, fixed bin (35));
    dcl  iox_$detach_iocb		 entry (ptr, fixed bin (35));
    dcl  iox_$look_iocb		 entry (char (*), ptr, fixed bin (35));
    dcl  iox_$open			 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
    dcl  pl1_frame_$name		 entry (ptr, ptr, fixed bin);
    dcl  sub_err_			 entry () options (variable);
    dcl  trace_time_		 entry (fixed bin (71)) returns (char (12));
    dcl  unique_chars_		 entry (bit (*)) returns (char (15));


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */

%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iocbx;


%include iox_modes;
%page;
%include std_descriptor_types;
%page;
%include sub_err_flags;
%page;
%include trace_interface;


  end trace_print_;
