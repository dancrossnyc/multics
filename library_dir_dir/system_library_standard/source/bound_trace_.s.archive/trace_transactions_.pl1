/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*
   This program contains the trace operations that are too complicated for trace_.alm

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_transactions_:
  procedure ();
    signal error;


/* INITIALIZE EVERYTHING is invoked by the firstref trap in trace_.alm. */

initialize_everything:
  entry ();

    unspec (my_area_info) = ""b;
    my_area_info.version = area_info_version_1;
    my_area_info.control.extend = "1"b;
    my_area_info.owner = trace_$me ();
    my_area_info.size = sys_info$max_seg_size;
    my_area_info.areap = null ();

    call define_area_ (addr (my_area_info), code);
    if code ^= 0
    then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "Call to define_area_ failed.");

    trace_catch_$trace_storage_ptr = my_area_info.areap;

    call trace_catch_$initialize ();

    call trace_tables_$initialize ();

    call trace_parameters_$initialize ();

    call add_epilogue_handler_ (trace_epilogue, code);
    if code ^= 0
    then call sub_err_ (code, trace_$me (), ACTION_DEFAULT_RESTART, null (), rv,
    "I could not add the epilogue handler.");

    return;


trace_epilogue:
  entry ();

    call transaction_begin_force (clock ());
    call trace_$set_enabled ("0"b);
    call trace_$set_output_switch (trace_$cv_stream_name_to_osw (""));
    if trace_$update_global_parms ()
    then;

    return;
%page;
/* TRANSACTION BEGIN */

transaction_begin:
  entry (transaction_id_i) returns (bit aligned);

    transaction_id = transaction_id_i;
    if transaction_id = 0
    then return ("0"b);

    if trace_$transaction_id ^= 0
    then return ("0"b);				/* A transaction is already in progress. */

    trace_$transaction_id = transaction_id;		/* Order is important for correct cleanup.	*/

    call trace_catch_$stop_tracing ();			/* Yank operator ptrs and move meters to tabs.	*/

    call trace_parameters_$transaction_begin ();

    call trace_tables_$transaction_begin ();

    return ("1"b);


/* TRANSACTION BEGIN FORCE */

transaction_begin_force:
  entry (transaction_id_i);

    trace_$transaction_id = transaction_id_i;		/* Order is important for correct cleanup.	*/

    call trace_catch_$stop_tracing ();			/* Yank operator ptrs and move meters to tabs.	*/

    call trace_parameters_$transaction_begin_force ();

    call trace_tables_$transaction_begin_force ();

    return;


/* TRANSACTION END */

transaction_end:
  entry (transaction_id_i) returns (bit aligned);

    if transaction_id_i ^= trace_$transaction_id
    then return ("0"b);

    call trace_parameters_$transaction_end ();

    call trace_tables_$transaction_end ();

    call trace_catch_$start_tracing ();			/* Plant operator ptrs and start global meters.	*/

    trace_$transaction_id = 0;

    return ("1"b);
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  transaction_id_i		 fixed bin (71) parm;


/* Automatic */

    dcl  code			 fixed bin (35);
    dcl  rv			 fixed bin (35);
    dcl  transaction_id		 fixed bin (71);

    dcl  1 my_area_info		 like area_info aligned;

/* Static */

    dcl  sys_info$max_seg_size	 fixed bin (35) ext;
    dcl  trace_catch_$trace_storage_ptr	 ptr ext;
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  error			 condition;


/* Based */


/* External Variables */

    dcl  trace_$transaction_id	 fixed bin (71) ext;


/* External Entries */

    dcl  add_epilogue_handler_	 entry (entry, fixed bin (35));
    dcl  define_area_		 entry (ptr, fixed bin (35));
    dcl  sub_err_			 entry () options (variable);

    dcl  trace_catch_$initialize	 entry ();
    dcl  trace_catch_$start_tracing	 entry ();
    dcl  trace_catch_$stop_tracing	 entry ();
    dcl  trace_parameters_$initialize	 entry ();
    dcl  trace_parameters_$transaction_begin entry ();
    dcl  trace_parameters_$transaction_begin_force entry ();
    dcl  trace_parameters_$transaction_end entry ();
    dcl  trace_tables_$initialize	 entry ();
    dcl  trace_tables_$transaction_begin entry ();
    dcl  trace_tables_$transaction_begin_force entry ();
    dcl  trace_tables_$transaction_end	 entry ();


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include area_info;
%page;
%include sub_err_flags;
%page;
%include trace_interface;

  end trace_transactions_;
