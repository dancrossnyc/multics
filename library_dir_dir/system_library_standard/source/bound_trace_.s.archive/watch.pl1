/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*

   This is the command interface to the watch part of the trace facility.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */
%page;
watch:
  procedure options (variable);

/* DISABLE TRACE_CATCH_ */

    transaction_id = clock ();
    on cleanup status = trace_$transaction_end (transaction_id);
						/* Disregard nonstandard use of status.	*/
    if ^trace_$transaction_begin (transaction_id) /* Temporarily disables trace_catch_.			*/
    then do;
      call com_err_ (code, ME, "There seems to be an incomplete invocation of trace,
watch, or trace_meters still on the stack.  Try the release command.");
      return;
    end;

/* SET UP A SUB_ERROR_ CONDITION HANDLER */

    call condition_ ("sub_error_", SUB_ERROR_HANDLER);

/* SET DEFAULT ACTIONS */

    add_remove_action = "";
    status = "0"b;

/* READ THE ARGUMENTS */

    call cu_$arg_count (arg_count, code);
    if code ^= 0
    then do;
      call com_err_ (code, ME);
      go to TRANSACTION_END;
    end;

    arg_idx = 1;
ARGUMENT_LOOP:
    do while (arg_idx <= arg_count);
      call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
      if code ^= 0
      then do;
        call com_err_ (code, ME);
        go to TRANSACTION_END;
      end;

      if length (arg) = 0
      then do;
        call com_err_ (code, ME, "A null argument was found where a location was expected.");
        go to TRANSACTION_END;
      end;

      if substr (arg, 1, 1) ^= "-"
      then
ENTRYPOINTS_ARGUMENT:
        do;
        call CHECK_NEXT_ARG (arg, 256, "watch", "locations", " control_args");
        call trace_$specify_locations ((arg));
        arg_idx = arg_idx + 1;
      end ENTRYPOINTS_ARGUMENT;

      else
CONTROL_ARGUMENT:
        do;
        if arg_idx + 1 > arg_count
        then next_arg_ptr = null ();
        else do;
	call cu_$arg_ptr (arg_idx + 1, next_arg_ptr, next_arg_len, code);
	if code ^= 0
	then do;
	  call com_err_ (code, ME);
	  go to TRANSACTION_END;
	end;

	if length (next_arg) > 0
	then if substr (next_arg, 1, 1) = "-"
	     then next_arg_ptr = null ();
        end;

        if arg = "-add" /* -add */
        then do;
	add_remove_action = "add";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-changed" /* -changed */
        then do;
	call trace_$specify_changed_locations ();
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-remove" | arg = "-rm" /* -remove, -rm */
        then do;
	add_remove_action = "remove";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-status" | arg = "-st" /* -status, -st */
        then do;
	status = "1"b;
	arg_idx = arg_idx + 1;
        end;

        else do;
	call com_err_ (error_table_$badopt, ME, """^a""", arg);
	go to TRANSACTION_END;
        end;
      end CONTROL_ARGUMENT;
    end ARGUMENT_LOOP;
%page;
/* COMMIT ACTION and print a nice message something like this:

   Trace: 2 locations specified, 2 locations added.
*/

    call SAY_BEGIN ();

    n_specified = trace_$num_specified_locations ();

    if n_specified > 0
    then
LOCATION_ACTION:
      do;
      call SAY_N_LOCATIONS (n_specified, "specified");

      if add_remove_action = "" & ^status
      then add_remove_action = "add";

      if add_remove_action = "add"
      then
        begin;
	dcl  n_added		       fixed bin;
	dcl  n_updated		       fixed bin;
	call trace_$add_specified_locs (n_added, n_updated);
	call SAY_N_LOCATIONS (n_added, "added");
	if n_updated > 0
	then call SAY_N_LOCATIONS (n_updated, "updated");
        end;

      if add_remove_action = "remove"
      then
        begin;
	dcl  n_removed		       fixed bin;
	call trace_$remove_specified_locs (n_removed);
	call SAY_N_LOCATIONS (n_removed, "removed");
        end;
    end LOCATION_ACTION;

    n_locations = trace_$num_locations ();
    if n_locations = 0
    then call SAY ("watch table empty");
    else call SAY_N_LOCATIONS (n_locations, "in watch table");

    if ^trace_$enabled ()
    then call SAY ("trace is disabled");
    else if trace_$in_trace ()
    then call SAY ("trace is temporarily disabled");
    else if trace_$num_entrypoints () = 0
    then call SAY ("trace table empty");

    call SAY_END ();

    if status & n_locations ^= 0
    then
STATUS:
      begin;
        dcl  loc_idx		     fixed bin;
        dcl  loc_ptr		     ptr;
        dcl  n_not_in_wt		     fixed bin;
        dcl  old_seg_no		     bit (18) aligned;
        dcl  specified_loc_idx	     fixed bin;
        old_seg_no = ""b;
        n_not_in_wt = 0;
        if n_specified = 0
        then call ioa_ ("If you want status, you must specify some locations.");
        do specified_loc_idx = 0 to n_specified - 1;
	loc_idx = trace_$specified_location_index (specified_loc_idx);
	if loc_idx < 0
	then n_not_in_wt = n_not_in_wt + 1;
	else do;
	  loc_ptr = trace_$location_ptr (loc_idx);
	  if baseno (loc_ptr) ^= old_seg_no
	  then do;
	    call ioa_ ("^a", trace_$location_seg_path (loc_idx));
	    old_seg_no = baseno (loc_ptr);
	  end;
	  watch_values = trace_$location_values (loc_idx);
	  if watch_values.old = watch_values.new
	  then call ioa_ ("^20x^w    ^12x at ^p", watch_values.old, loc_ptr);
	  else call ioa_ ("^20x^w -> ^w at ^p", watch_values.old, watch_values.new, loc_ptr);
	end;
        end;
        if n_not_in_wt > 0
        then do;
	if n_not_in_wt = 1
	then call ioa_ ("^d of the specified locations was not in the watch table.", n_not_in_wt);
	else call ioa_ ("^d of the specified locations were not in the watch table.", n_not_in_wt);
        end;
      end STATUS;

    if arg_count = 0
    then call ioa_ ("Acts: -add/-remove -status.");

TRANSACTION_END:
    if ^trace_$transaction_end (transaction_id)		/* Re-enable trace_catch_. */
    then call com_err_ (ZERO, ME, "This invocation of the watch command ended abnormally.");

    return;



SAY:
  proc (action_i);
    if trace_$loud ()
    then do;
      call INIT ();
      call ioa_$nnl ("^a", action_i);
    end;
    return;

SAY_N_LOCATIONS:
  entry (num_i, action_i);
    if trace_$loud ()
    then do;
      call INIT ();
      if num_i = 1
      then call ioa_$nnl ("^d loc ^a", num_i, action_i);
      else call ioa_$nnl ("^d locs ^a", num_i, action_i);
    end;
    return;

SAY_BEGIN:
  entry ();
    n_things_said = 0;
    return;

SAY_END:
  entry ();
    if n_things_said > 0
    then call ioa_ (".");
    return;

INIT:
    proc ();
      if n_things_said = 0
      then call ioa_$nnl ("^a: ", ME);
      else call ioa_$nnl (", ");
      n_things_said = n_things_said + 1;
    end INIT;

    dcl  action_i			 char (*) parm;
    dcl  num_i			 fixed bin parm;
  end SAY;
%page;
CHECK_NEXT_ARG:
  proc (next_arg_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
    dcl  (next_arg_i, control_arg_i, syntax_i, comment_i)
				 char (*) parm;
    dcl  max_arg_len_i		 fixed bin (21);

    if addr (next_arg_i) = null ()
    then do;
      call com_err_ (error_table_$noarg, ME, "The syntax is: ^a ^a^a.", control_arg_i, syntax_i, comment_i);
      go to TRANSACTION_END;
    end;

    if length (next_arg_i) > max_arg_len_i
    then do;
      call com_err_ (error_table_$bigarg, ME, "The maximum length for ^a is ^d characters.
The syntax is: ^a ^a^a.", syntax_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
      go to TRANSACTION_END;
    end;
  end CHECK_NEXT_ARG;
%page;
/* SUBROUTINES */

SUB_ERROR_HANDLER:
  proc (mcptr_i, a_name_i, wcptr_i, info_ptr_i, continue_o);
    sub_error_info_ptr = info_ptr_i;
    condition_info_header_ptr = null ();
    if sub_error_info.name ^= trace_$me ()
    then go to CONTINUE;
    if sub_error_info.header.support_signal | sub_error_info.header.quiet_restart
    then go to HANDLED;
    if sub_error_info.header.default_restart
    then go to REPORT;
    if sub_error_info.header.cant_restart
    then go to REPORT_AND_ABORT;
    else go to CONTINUE;

REPORT_AND_ABORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);
    go to TRANSACTION_END;

REPORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);

HANDLED:
    continue_o = "0"b;
    return;

CONTINUE:
    continue_o = "1"b;
    return;

    dcl  mcptr_i			 ptr parm;
    dcl  a_name_i			 char (*) parm;
    dcl  info_ptr_i			 ptr parm;
    dcl  wcptr_i			 ptr parm;
    dcl  continue_o			 bit aligned;

%include condition_info_header;

%include sub_error_info;

  end SUB_ERROR_HANDLER;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */


/* Automatic */

    dcl  add_remove_action		 char (8) init ("");
    dcl  arg_count			 fixed bin init (0);
    dcl  arg_idx			 fixed bin init (0);
    dcl  arg_len			 fixed bin (21) init (0);
    dcl  arg_ptr			 ptr init (null ());
    dcl  code			 fixed bin (35) init (0);
    dcl  n_locations		 fixed bin;
    dcl  n_specified		 fixed bin init (0);
    dcl  n_things_said		 fixed bin init (0);
    dcl  next_arg_idx		 fixed bin init (0);
    dcl  next_arg_len		 fixed bin (21) init (0);
    dcl  next_arg_ptr		 ptr init (null ());
    dcl  status			 bit aligned init ("0"b);
    dcl  transaction_id		 fixed bin (71) init (0);


/* Static */

    dcl  ME			 char (32) static options (constant) init ("watch");
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  cleanup			 condition;


/* Based */

    dcl  arg			 char (arg_len) based (arg_ptr);
    dcl  next_arg			 char (next_arg_len) based (next_arg_ptr);


/* External Variables */

    dcl  error_table_$badopt		 fixed bin (35) ext;
    dcl  error_table_$bigarg		 fixed bin (35) ext;
    dcl  error_table_$noarg		 fixed bin (35) ext;


/* External Entries */

    dcl  com_err_			 entry options (variable);
    dcl  condition_			 entry (char (*), entry);
    dcl  cu_$arg_count		 entry (fixed bin, fixed bin (35));
    dcl  cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
    dcl  ioa_			 entry () options (variable);
    dcl  ioa_$nnl			 entry () options (variable);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include trace_interface;


  end watch;
