/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This routine finds an entry in the System Pathname Table (sys_pn_tbl).
     returning the index of the entry. It is not assumed that the sys_pn_tbl is
     locked, and this routine will lock it while examining it.  It is assumed
     that the caller has set the validation level to the Data Management Ring.
*/

/* HISTORY:

Written by Matthew, 10/29/84.
Modified:
01/09/85 by Matthew Pierret:  Moved initialization of lock_is_locked to
            before the first potential call to FINISH (via LOG_ERROR_RETURN).
01/10/85 by Matthew C. Pierret:  Changed LOG_ERROR_RETURN to ERROR_RETURN,
            making ERROR_RETURN call fm_error_util_$signal.  Also removed the
            call to FINISH, relying on the cleanup on-unit to be invoked when
            the stack is unwound.  Removed knowledge of the now-obsolete
            SPT_ENTRY_IN_USE_BUT_DELETED state.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
03/14/85 by Matthew C. Pierret:  Changed to only attempt to unlock the lock if
            it has not yet attempted to do so and the lock was validly
            obtained.  In the case of the sys_pn_tbl.lock, it is invalid to
            obtain the lock if the process already has it locked.
*/

/* format: style2,ind3 */
%page;
fm_sys_pn_tbl_get_path:
   proc (p_sys_pn_tbl_ptr, p_lock_sys_pn_tbl, p_file_uid, p_file_path);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_sys_pn_tbl_ptr       ptr;		/* points to the sys_pn_tbl */
      dcl	    p_lock_sys_pn_tbl      bit (1) aligned;	/* ON->lock the sys_pn_tbl */
      dcl	    p_file_uid	       bit (36) aligned;	/*unique id of the file*/
      dcl	    p_file_path	       char (168);		/*pathname of file */

/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    file_uid	       bit (36) aligned init (""b);
      dcl	    lock_code	       fixed bin (35) init (LOCK_NOT_YET_ATTEMPTED);
      dcl	    sys_idx	       fixed bin init (-1);
      dcl	    sys_pn_tbl_ptr	       ptr;
      dcl	    unlock_code	       fixed bin (35) init (UNLOCK_NOT_YET_ATTEMPTED);

/* Based */
/* Builtin */

      dcl	    (addr, length, lbound, min, substr)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    MYNAME	       init ("fm_sys_pn_tbl_get_path") char (32) varying internal static options (constant);
      dcl	    LOCK_WAIT_TIME	       init (1000000000) fixed bin (71) internal static options (constant);
      dcl	    (LOCK_NOT_YET_ATTEMPTED, UNLOCK_NOT_YET_ATTEMPTED)
			       fixed bin (35) init (-1) internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      dcl	    dm_misc_util_$log      entry options (variable);
      dcl	    fm_error_util_$signal  entry options (variable);
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    lock_manager_$lock_fast
			       entry (ptr, fixed bin (71), fixed bin (35));
      dcl	    lock_manager_$unlock_fast
			       entry (ptr, fixed bin (35));

/* External */

      dcl	    dm_error_$fast_lock_invalid_reset
			       fixed bin (35) ext;
      dcl	    dm_error_$fm_bad_sys_pn_tbl_ver
			       fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;

      on cleanup call FINISH ();

      file_uid = p_file_uid;
      sys_pn_tbl_ptr = p_sys_pn_tbl_ptr;
      if sys_pn_tbl_ptr -> sys_pn_tbl.h.version ^= SYS_PN_TBL_VERSION_1
      then call ERROR_RETURN (dm_error_$fm_bad_sys_pn_tbl_ver, "  Expected version ^w of ^a, received version ^w.",
	      SYS_PN_TBL_VERSION_1, fm_data_$sys_pn_tbl_name, sys_pn_tbl_ptr -> sys_pn_tbl.h.version);

      if p_lock_sys_pn_tbl
      then
         do;
	  call lock_manager_$lock_fast (addr (sys_pn_tbl_ptr -> sys_pn_tbl.h.lock), LOCK_WAIT_TIME, lock_code);
	  if lock_code ^= 0 & lock_code ^= dm_error_$fast_lock_invalid_reset
	  then call ERROR_RETURN (lock_code, "  Unable to lock ^a.", fm_data_$sys_pn_tbl_name);
         end;

      do sys_idx = lbound (sys_pn_tbl_ptr -> sys_pn_tbl.e, 1) to sys_pn_tbl_ptr -> sys_pn_tbl.h.last_entry
	 while (sys_pn_tbl_ptr -> sys_pn_tbl.e (sys_idx).file_uid ^= file_uid
	 | sys_pn_tbl_ptr -> sys_pn_tbl.e (sys_idx).in_use = SPT_ENTRY_NOT_IN_USE);
      end;

      if sys_idx > sys_pn_tbl_ptr -> sys_pn_tbl.h.last_entry
      then p_file_path = "";
      else p_file_path = sys_pn_tbl_ptr -> sys_pn_tbl.paths (sys_idx);

      if lock_code ^= LOCK_NOT_YET_ATTEMPTED
      then
         do;
	  call lock_manager_$unlock_fast (addr (sys_pn_tbl_ptr -> sys_pn_tbl.h.lock), unlock_code);
	  if unlock_code ^= 0
	  then call ERROR_RETURN (unlock_code, "  Unable to unlock ^a.^s", fm_data_$sys_pn_tbl_name);
         end;

      return;


ERROR_RETURN:
   proc options (variable);


      dcl	    er_arg_list_ptr	       ptr;
      dcl	    er_code	       fixed bin (35) based (er_code_ptr);
      dcl	    er_code_ptr	       ptr;
      dcl	    er_code_len	       fixed bin (21);

      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_ptr_rel (1, er_code_ptr, er_code_len, (0), er_arg_list_ptr);
      call fm_error_util_$signal (er_code, MYNAME, FM_ACTION_CANT_RESTART | FM_ACTION_LOG, LOG_SV,
	 MAKE_MESSAGE (er_arg_list_ptr));

/* FINISH will be invoked to unlock the lock when the stack is unwound */
/* because of the "on cleanup call FIISH ();". */

   end ERROR_RETURN;

MAKE_MESSAGE:
   proc (mm_p_arg_list_ptr) returns (char (*));

      dcl	    mm_p_arg_list_ptr      ptr;
      dcl	    mm_message_len	       fixed bin (21);
      dcl	    mm_message_buffer      char (1024);
      dcl	    (DONT_PAD, NO_NEW_LINE)
			       init ("0"b) bit (1) aligned;

      call ioa_$general_rs (mm_p_arg_list_ptr, 2, 3, mm_message_buffer, mm_message_len, DONT_PAD, NO_NEW_LINE);

      return (substr (mm_message_buffer, 1, min (length (mm_message_buffer), mm_message_len)));

   end MAKE_MESSAGE;


FINISH:
   proc ();

      if (lock_code = 0 | lock_code = dm_error_$fast_lock_invalid_reset) & unlock_code = UNLOCK_NOT_YET_ATTEMPTED
      then
         do;
	  call lock_manager_$unlock_fast (addr (sys_pn_tbl_ptr -> sys_pn_tbl.h.lock), unlock_code);
	  if unlock_code ^= 0
	  then call dm_misc_util_$log (LOG_SV, unlock_code, MYNAME, "  Failed to unlock ^a during cleanup.",
		  fm_data_$sys_pn_tbl_name);
         end;

   end FINISH;

%page;
%include dm_fm_sys_pn_tbl;
%page;
%include dm_fm_sub_error_flags;
%page;
%include dm_log_sv_codes;

   end fm_sys_pn_tbl_get_path;
