/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_adjust: proc (A_txn_id, A_code);

/* DESCRIPTION:

   Called  by  the  user,  sends  a  message  to  the daemon to adjust a
   transaction.
*/

/* HISTORY:

Written by Steve Herbst, 05/11/83.
Modified:
10/23/84 by Steve Herbst: Changed in response to audit comments.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_txn_id bit (36) aligned parameter;
dcl  A_code fixed bin (35) parameter;


/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl person char (22);
dcl project char (9);
dcl txn_id bit (36) aligned;
dcl txn_index fixed bin;
dcl code fixed bin (35);

/* External */

dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_error_$not_own_transaction fixed bin (35) ext;
dcl dm_error_$transaction_not_abandoned fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl dm_misc_util_$log entry options (variable);
dcl dm_send_request_$adjust_txn entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl tm_get_txn_index entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl user_info_ entry options (variable);

/* Builtins */

dcl (fixed, rtrim) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
	A_code = 0;
	txn_id = A_txn_id;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	txn_index = tm_get_txn_index (txn_id, code);
	if code ^= 0 then call ERROR_RETURN (code);

	call user_info_ (person, project);
	if tm_tdt.owner_name (txn_index) ^= rtrim (person) || "." || project then
	     call ERROR_RETURN (dm_error_$not_own_transaction);

	if ^tm_tdt.abandoned_sw (txn_index) then
	     call ERROR_RETURN (dm_error_$transaction_not_abandoned);

	call dm_send_request_$adjust_txn (tm_tdt.txn_id (txn_index), txn_index, 0);

	call dm_misc_util_$log (INFORM_SV, "User requested adjustment of txn ^d, TID = ^o, pid = ^w, state = ^d",
	     txn_index, fixed (tm_tdt.txn_id (txn_index)), tm_tdt.process_id (txn_index), tm_tdt.state (txn_index));
RETURN:
	return;
%page;
ERROR_RETURN: proc (P_code);

dcl P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

end ERROR_RETURN;
%page;
%include dm_tm_tdt;
%page;
%include dm_log_sv_codes;


end tm_adjust;
