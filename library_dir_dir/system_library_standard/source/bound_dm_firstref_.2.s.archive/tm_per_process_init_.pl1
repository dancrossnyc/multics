
/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	tm_per_process_init_ is the first-reference trap for all Data
     Management (DM) inner ring transfer vectors (*_firstref_tv_.alm),
     except for those which MAY NOT do DM per-process init
     (*_no_firstref_tv_.alm).  There are four parts of this routine:

     1.  Does initialization common to all inner ring DM (replacing
     dm_common_init_).  It initializes dm_data_ cells used by all managers,
     initiates dm_system_data_ in the per-bootload directory.  For testing,
     when get_ring_ () ^= sys_info$data_management_ringno, a fake
     dm_journal_seg_ is initiated.  The real dm_journal_seg_ is not avaliable
     outside of ring 0.  Also, fake versions of dm_hcs_ and dm_hphcs_
     are made known, instead of the real hardcore gates.  IF THIS AND
     STEP 2 HAVE COMPLETED, WE RETURN WITHOUT EXECUTING THE REMAINING 
     STEPS (an internal static variable is used to do this); this is
     because all the DM *_firstref_tv_'s use this program as their
     first-reference trap, but are eventually invoked by this program
     in step 3; steps one and two should not be redone for each time
     the first-reference goes off.

     2.  This step does transaction_manager_ initialization.  It calculates
     dm_data_$tm_tdt_ptr from dm_system_data_$tm_tdt_relp, notifies the
     Daemon about TDT entries for dead processes, reserves a TDT entry for
     the process and puts its index in dm_data_$my_tdt_index.  We also set
     the internal static variable to indicate this and the previous step
     have been done; this is necessary since we will set off the first
     reference traps of the other DM managers' inner rig TV's with fref
     traps.

     3.  Calls the other inner ring managers' initialization routines.

     4.  Notifies the DM caretaker Daemon if the process running this
     first-reference trap needs to be sent the dm_shutdown_scheduled_ IPS.
     If no DM shutdown is scheduled, we skip this step.

	There are two methods of error reporting from this module.
     Because it is the target of all DM first-reference traps, we can only
     use signals to report errors.  We use sub_err_ calls to report errors
     which should not happen (or which the Daemon should have picked up on
     in per-system initialization, at least).  An example is an invalid
     Transaction Definition Table (TDT) version.  This is all handled in
     the internal procedure ERROR_RETURN.  We also use sub_err_ to warn
     a person testing DMS in the user ring, with default restart.

	The second error case is when no DMS exists for the process to
     use; and is reported via the dm_not_available_ condition.  This may
     happen when there is no DMS bootload, the DMS has been shutdown, or
     there is no room in the TDT to record the required data about the
     process starting its use of DM.  The process recorded as the
     initializer process in dm_system_data_ is given more flexibility since
     it may be bringing up or shutting down the system; normal users will
     always take an error when the DMS state in dm_system_data_ does not
     indicate running.  All DM commands should handle the dm_not_available_
     condition, call transaction_manager_$user_shutdown, and report the
     error to the user.  This program handles dm_not_available_ by
     terminating any reference names it has initiated and deleting the event
     channel it has created.

	NOTES	NOTES	NOTES	NOTES
	If this procedure is executed in a ring greater than the DM ring,
     we simply return as we can only do init in the DM ring.  We use the
     read bracket of dm_gate_ as the indicator of the DM ring in case the
     user is running a test DMS.
	In the clean up of this procedure, we try to terminate various
     things we may have initiated (e.g., dm_hcs_fake_ with refname of
     dm_hcs_, dm_system_data_).  We must take care to do any terminations
     as dm_misc_util_$terminate_dm does; we MAY NOT call the dm_misc_util_
     entry as it would terminate the firstref modules, causing the linker
     to fail when it tries to do the same thing when we unwind.
*/

/* HISTORY:

Written by Steve Herbst, 08/16/82.
Modified:
09/09/82 by Steve Herbst: Added code to find dead processes and reserve
	  a TDT entry for the process.
11/01/82 by Steve Herbst: Changed to call dm_send_request_$adjust_tdt when
	  it finds a dead process.
11/01/82 by Steve Herbst: Also changed to set up an event channel
	  and put its id in the TDT entry.
11/22/82 by Steve Herbst: Made to zero dm_data_$suspended_txn_(id index).
11/22/82 by Steve Herbst: Fixed to call dm_send_request_$adjust_txn only
	  if txn_id (i) ^= "0"b.
12/07/82 by Steve Herbst: Changed to call tm_adjust_tdt rather than duplicate
	  its code to check dead processes.
01/12/83 by Steve Herbst: Made to store process' Person.Project in the TDT entry.
03/03/83 by Steve Herbst: Changed for new initialization scheme.
03/07/83 by Steve Herbst: Changed to set validation level to current ring.
09/07/83 by Lee A. Newcomb: Added trailing "_" to main procedure name.
10/17/84 by Steve Herbst: Changed in response to audit comments.
11/20/84 by Lee A. Newcomb:  Merged dm_common_init_ into this module so this
            will be the target of all DM transfer vectors with fref traps.
            Fixed up error handling in general and added signalling of the
            dm_not_available_ condition if no DMS is to be found.  Changed to
            not fail if the new_process_notifications request to the Daemon
            fails.  Also changed to only set validation level where needed.
01/24/84 by R. Michael Tague: Changed the name of dm_send_request_$ entry
            new_process_notifications to new_process_notifies.
01/28/85 by Steve Herbst: Changed to signal dm_not_available_ with the
	  standard structure specifying "DM is not running" and no-restart.
02/04/85 by Steve Herbst: Added dm_not_available_ handler to terminate
	  initiated reference names and delete created event channel.
02/15/85 by Steve Herbst: Addressed audit comment by initializing
	  callers_validation_level to -1 and resetting only if not -1.
03/03/85 by Lee A. Newcomb:  Removed handler of dm_not_available_ condition so
            it would get back to users; changed to do terminations as in
            dm_misc_util_$terminate_dm and to only do term_$single_refname for
            dm_hcs_ and dm_hphcs_ in case user had init'd the fake versions.
03/05/85 by Lee A. Newcomb:  Created CLEAN_UP proc from first half of proc to
            signal dm_not_available_ so the operations therein may be used in
            all cleanup cases.  Fixed to just return if ring of execution is
            greater than DM ring and use cu_$arg_ptr_rel in ERROR_RETURN
            instead of using the arg_list directly.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
05/15/85 by R. Michael Tague: Changed to not try to initiate dm_journal_seg_
            when not testing.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
tm_per_process_init_:
   proc;

/* DECLARATIONS */

/* Parameters */
/* Automatic */
dcl  (
     1 auto_condition_info		aligned like condition_info_header,
     bootload_dir_path		char (168) init (""),
     callers_validation_level		fixed bin init (-1),
     channel_id			fixed bin (71) init (0),
     code				fixed bin (35) init (0),
     current_ring			fixed bin init (-1),
     dir_path			char (168) init (""),
     dm_gate_dir			char (168) init (""),
     dm_gate_dir_length		fixed bin init (0),
     dm_gate_ptr			ptr init (null),
     dm_hcs_fake_ptr		ptr init (null),
     dm_hphcs_fake_ptr		ptr init (null),
     dm_system_data_ptr		ptr init (null),
     entry_name			char (32) init (""),
     ldn				fixed bin init (0),
     process_group_id		char (32) init (""),
     ring_brackets			dim (3) fixed bin (3)
				init (-1, -1, -1),
     txn_index			fixed bin init (-1),
     using_test_data_management_system	bit (1) aligned init (""b)
     )				automatic;

/* Based */
/* Builtins */
dcl  (addr, codeptr, index, null, pointer, size, stac, substr, unspec)
				builtin;

/* Condition */
dcl  cleanup			condition;

/* Constants */
dcl  (
     DM_GATE_NAME			char (32) init ("dm_gate_"),
     DM_HCS_FAKE_NAME		char (32) init ("dm_hcs_fake_"),
     DM_HCS_REFNAME			char (32) init ("dm_hcs_"),
     DM_HPHCS_FAKE_NAME		char (32) init ("dm_hphcs_fake_"),
     DM_HPHCS_REFNAME		char (32) init ("dm_hphcs_"),
     DM_JOURNAL_SEG_NAME		char (32) init ("dm_journal_seg_"),
     DM_NOT_AVAILABLE_INFO_VERSION_1	fixed bin init (1),
     DM_PER_PROCESS_INIT_STARTED	char (8) aligned init ("STARTED"),
     DM_PER_PROCESS_INIT_THROUGH_TM_COMPLETE
				char (8) aligned init ("COMPLETE"),
     DM_SYSTEM_DATA_REFNAME		char (32) init ("dm_system_data_"),
     DM_SYSTEM_DATA_ENTRYNAME		char (32) init ("dm_system_data_"),
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init ("0"b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init ("1"b),
     MYNAME			char (32) init ("tm_per_process_init_")
     )				internal static options (constant);

/* Entry */
dcl  (
     before_journal_manager_$per_process_init
				entry (),
     cu_$arg_list_ptr		entry (ptr),
     cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21),
				fixed bin (35), ptr),
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     dm_misc_util_$log		entry options (variable),
     dm_misc_util_$get_begin_shutdown_time
				entry returns (fixed bin (71)),
     dm_misc_util_$get_bootload_dir	entry (char (*)),
     dm_per_system_$initiate		entry (char (*), char (*), ptr),
     dm_send_request_$new_process_notifies
				entry (fixed bin (35)),
     file_manager_$per_process_init	entry (),
     get_group_id_$tag_star		entry () returns (char (32)),
     get_process_id_		entry () returns (bit (36)),
     get_ring_			entry returns (fixed bin (3)),
     get_system_free_area_		entry () returns (ptr),
     hcs_$fs_get_path_name		entry (ptr, char (*), fixed bin,
				char (*), fixed bin (35)),
     hcs_$get_ring_brackets		entry (char (*), char (*),
				(3) fixed bin (3), fixed bin (35)),
     hcs_$initiate			entry (char (*), char (*), char (*),
				fixed bin (1), fixed bin (2), ptr,
				fixed bin (35)),
     hcs_$make_ptr			entry (ptr, char (*), char (*), ptr,
				fixed bin (35)),
     hcs_$terminate_noname		entry (ptr, fixed bin (35)),
     ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned),
     ipc_$create_ev_chn		entry (fixed bin (71), fixed bin (35)),
     ipc_$delete_ev_chn		entry (fixed bin (71), fixed bin (35)),
     lock_manager_$per_process_init	entry (),
     pathname_			entry (char (*), char (*))
				returns (char (168)),
     signal_			entry options (variable),
     sub_err_			entry options (variable),
     term_$refname			entry (char (*), fixed bin (35)),
     term_$single_refname		entry (char (*), fixed bin (35)),
     tm_adjust_tdt			entry
     )				external;

/* External */
dcl  (
     dm_data_$area_ptr		ptr,
     dm_data_$current_txn_id		bit (36) aligned,
     dm_data_$current_txn_index	fixed bin,
     dm_data_$dm_journal_segp		ptr,
     dm_data_$initialization_state	char (8) aligned,
     dm_data_$my_process_id		bit (36),
     dm_data_$my_tdt_index		fixed bin,
     dm_data_$suspended_txn_id	bit (36) aligned,
     dm_data_$suspended_txn_index	fixed bin,
     dm_data_$tm_tdt_ptr		ptr,
     dm_system_data_$,
     dm_system_data_$current_dm_state	char (4) aligned,
     dm_system_data_$initializer_name	char (32) aligned,
     dm_system_data_$tm_tdt_relp	bit (18),
     error_table_$unimplemented_version fixed bin (35),
     sys_info$data_management_ringno	fixed bin
     )				external static;

/* END OF DECLARATIONS */
%page;
   current_ring = get_ring_ ();

RETURN_IF_HIGHER_THAN_DM_RING:
   do;

      call hcs_$make_ptr (codeptr (tm_per_process_init_), DM_GATE_NAME, "",
	 dm_gate_ptr, code);
      if dm_gate_ptr = null () then
         call ERROR_RETURN (code, "^/Returned by hcs_$make_ptr for ^a.",
	    DM_GATE_NAME);

      call hcs_$fs_get_path_name (dm_gate_ptr, dm_gate_dir, dm_gate_dir_length,
	 "" /* already know dm_gate_'s name */, code);
      if code ^= 0 then
         call ERROR_RETURN (code,
	    "^/Returned by hcs_$fs_get_path_name using ^p.", dm_gate_ptr);

      call hcs_$get_ring_brackets (substr (dm_gate_dir, 1, dm_gate_dir_length),
	 DM_GATE_NAME, ring_brackets, code);
      if code ^= 0 then
         call ERROR_RETURN (code, "^/Cannot get the ring brackets of ^a.",
	    pathname_ (dm_gate_dir, DM_GATE_NAME));

      if current_ring > ring_brackets (2) then		/* nothing to do */
         call RETURN ();

   end RETURN_IF_HIGHER_THAN_DM_RING;


IS_GENERAL_AND_TM_SETUP_DONE:
   do;

/* See if this is another DM inner ring transfer vector's first reference */
/* trap going off after the initial trap being sprung.  If so, we must    */
/* have completed the first two steps and should return.		    */

      if dm_data_$initialization_state
	 = DM_PER_PROCESS_INIT_THROUGH_TM_COMPLETE then	/* steps 1 & 2 are done */
         call RETURN ();
   end IS_GENERAL_AND_TM_SETUP_DONE;

   using_test_data_management_system =
        (current_ring > sys_info$data_management_ringno);
WARN_IF_NOT_IN_REAL_DATA_MANAGEMENT:
   if using_test_data_management_system then
      call sub_err_ (0, MYNAME, ACTION_DEFAULT_RESTART, null (), (0),
	 " CAUTION: You are initiating a ring ^d data management system in which files can not be fully protected.",
	 current_ring);

SETUP_IN_CASE_DM_NOT_AVAILABLE:
   dm_data_$dm_journal_segp = null ();


GENERAL_DM_SETUP:
   do;
      dm_data_$initialization_state = DM_PER_PROCESS_INIT_STARTED;

      call dm_misc_util_$get_bootload_dir (bootload_dir_path);

      call cu_$level_get (callers_validation_level);
      on cleanup call CLEAN_UP ();
      call cu_$level_set (current_ring);

      call hcs_$initiate (bootload_dir_path, DM_SYSTEM_DATA_ENTRYNAME,
	 DM_SYSTEM_DATA_REFNAME, 0, 0, dm_system_data_ptr, code);
      if dm_system_data_ptr = null () then
         call DM_SYSTEM_NOT_AVAILABLE ();

      process_group_id = get_group_id_$tag_star ();
      if process_group_id = dm_system_data_$initializer_name then
CHECK_SYSTEM_STATE_FOR_DM_DAEMON:
         do;
         if dm_system_data_$current_dm_state ^= DM_SYSTEM_STATE_RUNNING
	    & dm_system_data_$current_dm_state
	    ^= DM_SYSTEM_STATE_INITIALIZING
	    & dm_system_data_$current_dm_state ^= DM_SYSTEM_STATE_RECOVERING
	    & dm_system_data_$current_dm_state
	    ^= DM_SYSTEM_STATE_SHUTDOWN_BEGUN
	    & dm_system_data_$current_dm_state
	    ^= DM_SYSTEM_STATE_SHUTDOWN_BUMP_USERS then
	  call DM_SYSTEM_NOT_AVAILABLE ();
      end CHECK_SYSTEM_STATE_FOR_DM_DAEMON;
      else
CHECK_SYSTEM_STATE_FOR_NORMAL_USERS:
         do;
         if dm_system_data_$current_dm_state ^= DM_SYSTEM_STATE_RUNNING then
	  call DM_SYSTEM_NOT_AVAILABLE;
      end CHECK_SYSTEM_STATE_FOR_NORMAL_USERS;

      dm_data_$area_ptr = get_system_free_area_ ();	/* AKA dm_data_$inner_ring_areap */
      dm_data_$my_process_id = get_process_id_ ();

      if using_test_data_management_system then
INIT_FAKE_HARDCORE_FILES:
         do;
INIT_DM_HCS_FAKE_GATE:
         do;
	  call hcs_$make_ptr (codeptr (tm_per_process_init_),
	       DM_HCS_FAKE_NAME, "", dm_hcs_fake_ptr, code);
	  if dm_hcs_fake_ptr = null () then
	     call ERROR_RETURN (code, "Returned by hcs_$make_ptr for ^a.",
		DM_HCS_FAKE_NAME);

	  call hcs_$fs_get_path_name (dm_hcs_fake_ptr, dir_path, ldn,
	       entry_name, code);
	  if code ^= 0 then
	     call ERROR_RETURN (code,
		"Returned by hcs_$fs_get_path_name using ^p.",
		dm_hcs_fake_ptr);

	  call hcs_$terminate_noname (dm_hcs_fake_ptr, 0);
	  dm_hcs_fake_ptr = null;

	  call hcs_$initiate (dir_path, entry_name, DM_HCS_REFNAME, 0, 0,
	       dm_hcs_fake_ptr, code);
	  if dm_hcs_fake_ptr = null () then
	     call ERROR_RETURN (code,
		"Unable to initiate ^a, with the reference name ^a.",
		pathname_ (dir_path, entry_name), DM_HCS_REFNAME);
         end INIT_DM_HCS_FAKE_GATE;

INIT_DM_HPHCS_FAKE_GATE:
         do;
	  call hcs_$make_ptr (codeptr (tm_per_process_init_),
	       DM_HPHCS_FAKE_NAME, "", dm_hphcs_fake_ptr, code);
	  if dm_hphcs_fake_ptr = null () then
	     call ERROR_RETURN (code, "Returned by hcs_$make_ptr for ^a.",
		DM_HPHCS_FAKE_NAME);

	  call hcs_$fs_get_path_name (dm_hphcs_fake_ptr, dir_path, ldn,
	       entry_name, code);
	  if code ^= 0 then
	     call ERROR_RETURN (code,
		"Returned by hcs_$fs_get_path_name using ^p.",
		dm_hphcs_fake_ptr);

	  call hcs_$terminate_noname (dm_hphcs_fake_ptr, 0);
	  dm_hphcs_fake_ptr = null;

	  call hcs_$initiate (dir_path, entry_name, DM_HPHCS_REFNAME, 0, 0,
	       dm_hphcs_fake_ptr, code);
	  if dm_hphcs_fake_ptr = null () then
	     call ERROR_RETURN (code,
		"Unable to initiate ^a with the reference name ^a.",
		pathname_ (dir_path, entry_name), DM_HPHCS_REFNAME);
         end INIT_DM_HPHCS_FAKE_GATE;

INIT_TESTING_DM_JOURNAL_SEGMENT:
         do;
	  call dm_per_system_$initiate ("dm_journal_seg_", "dm_journal_seg_",
	       dm_data_$dm_journal_segp);
         end INIT_TESTING_DM_JOURNAL_SEGMENT;

      end INIT_FAKE_HARDCORE_FILES;

      call RESET_VALIDATION_LEVEL ();			/* we don't need validaton level set anymore */

   end GENERAL_DM_SETUP;


TRANSACTION_MANAGER_SPECIFIC_SETUP:
   do;

      dm_data_$current_txn_id, dm_data_$suspended_txn_id = "0"b;
      dm_data_$current_txn_index, dm_data_$suspended_txn_index = 0;

      dm_data_$tm_tdt_ptr, tm_tdt_ptr = pointer (addr (dm_system_data_$),
						/* TDT is allocated in dm_system_data_ segment */
	 dm_system_data_$tm_tdt_relp);

      if tm_tdt.version ^= TM_TDT_VERSION_3 then
         call ERROR_RETURN (error_table_$unimplemented_version,
	    "Expected version ^a of TDT, received ^a.", TM_TDT_VERSION_3,
	    tm_tdt.version);

CHECK_FOR_AND_CLEANUP_DEAD_PROCESSES:
      call tm_adjust_tdt ();

      dm_data_$my_tdt_index = 0;
FIND_FREE_TDT_ENTRY:
      do txn_index = 1 to tm_tdt.entry_count while (dm_data_$my_tdt_index = 0);

         tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));

         if stac (addr (tm_tdt_entry.process_id), dm_data_$my_process_id) then
RESERVE_FREE_TDT_ENTRY:				/* we found one */
	  do;					/* reserve it */
	  unspec (tm_tdt_entry.transaction) = "0"b;	/* just to be safe; entry should be zero already */

	  tm_tdt_entry.owner_name =
	       substr (process_group_id, 1,
	       index (process_group_id, ".*") - 1);

	  call cu_$level_set (current_ring);		/* only needed for channel creation */
	  call ipc_$create_ev_chn (channel_id, code);
	  call RESET_VALIDATION_LEVEL ();
	  if code = 0 then
	     tm_tdt_entry.event_channel = channel_id;

	  dm_data_$my_tdt_index = txn_index;
         end RESERVE_FREE_TDT_ENTRY;
      end FIND_FREE_TDT_ENTRY;

      if txn_index > tm_tdt.entry_count then		/* no free slots */
         call DM_SYSTEM_NOT_AVAILABLE ();

      dm_data_$initialization_state = DM_PER_PROCESS_INIT_THROUGH_TM_COMPLETE;
						/* don't redo the previous work */
   end TRANSACTION_MANAGER_SPECIFIC_SETUP;


DO_OTHER_MANAGERS_SETUP:
   do;
      call lock_manager_$per_process_init ();
      call file_manager_$per_process_init ();
      call before_journal_manager_$per_process_init ();
   end DO_OTHER_MANAGERS_SETUP;

/* ask Daemon to tell us if a shutdown is scheduled */
/* if we fail, we let user continue, but log fact   */
/* Daemon was not present.			  */
   if dm_misc_util_$get_begin_shutdown_time () ^= 0 then
ASK_DAEMON_FOR_SHUTDOWN_IPS:
      do;
      call dm_send_request_$new_process_notifies (code);
      if code ^= 0 then
         call dm_misc_util_$log (LOG_SV, code, MYNAME,
	    "A DMS shutdown is scheduled, but could not tell Daemon to send the dm_shutdown_scheduled_ IPS."
	    );
   end ASK_DAEMON_FOR_SHUTDOWN_IPS;

   call RETURN ();
%page;
MAIN_RETURN:
   return;
%skip (4);
RETURN:
   proc ();

   go to MAIN_RETURN;

   end RETURN;
%skip (4);
ERROR_RETURN:
   proc options (variable);

dcl  (
     er_arg_list_ptr		ptr,
     er_code_ptr			ptr,
     er_message			char (1024),
     er_message_length		fixed bin (21)
     )				automatic;

dcl  (
     er_code			fixed bin (35) based (er_code_ptr),
     er_message_overlay		char (er_message_length)
     )				based;

   call cu_$arg_list_ptr (er_arg_list_ptr);
   call cu_$arg_ptr_rel (1, er_code_ptr, (0), (0), er_arg_list_ptr);
						/* get status code */

   call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message, er_message_length,
        IOA_GENERAL_RS_DONT_PAD, IOA_GENERAL_RS_NO_NEW_LINE);
   call sub_err_ (er_code, MYNAME, ACTION_CANT_RESTART, null (), 0,
        addr (er_message) -> er_message_overlay);

   end ERROR_RETURN;
%page;
CLEAN_UP:
   proc ();

/* We are unwinding out of this module, probably because of	*/
/* the dm_not_available_ condition, or because of a sub_err_*/
/* call or fault.  Cleanup any of various things we may have*/
/* done.  This is an attempt to leave the process address	*/
/* space close to how we found it (or expect it next try).	*/

   call term_$refname (DM_SYSTEM_DATA_REFNAME, 0);
   call term_$refname (DM_JOURNAL_SEG_NAME, 0);
   if dm_hcs_fake_ptr ^= null then
      call term_$single_refname (DM_HCS_REFNAME, 0);
   if dm_hphcs_fake_ptr ^= null then
      call term_$single_refname (DM_HPHCS_REFNAME, 0);
   if channel_id ^= 0 then
      call ipc_$delete_ev_chn (channel_id, 0);		/* shouldn't be necessary, but...*/

   call RESET_VALIDATION_LEVEL ();

   return;
   end CLEAN_UP;
%skip (4);
RESET_VALIDATION_LEVEL:
   proc ();

   if callers_validation_level ^= -1 then
      call cu_$level_set (callers_validation_level);

   return;

   end RESET_VALIDATION_LEVEL;
%page;
DM_SYSTEM_NOT_AVAILABLE:
   proc ();

/* now build condition info struct and tell user no dice */

   unspec (auto_condition_info) = "0"b;
   auto_condition_info.length = size (auto_condition_info);
   auto_condition_info.version = DM_NOT_AVAILABLE_INFO_VERSION_1;
   auto_condition_info.cant_restart = "1"b;
   auto_condition_info.info_string =
        "The Data Management system is not currently running.";

   call signal_ ("dm_not_available_", null, addr (auto_condition_info));

   call ERROR_RETURN (0,
        "Unexpected return from signalling dm_not_available_.");

   end DM_SYSTEM_NOT_AVAILABLE;
%page;
%include condition_info_header;
%page;
%include dm_system_states;
%page;
%include dm_tm_tdt;
%page;
%include dm_log_sv_codes;
%page;
%include sub_err_flags;


   end tm_per_process_init_;
