/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  routine  removes  an  entry  from  the  file  manager's System
     Pathname  Table  (sys_pn_tbl).    This  routine  locks  and  unlocks  the
     sys_pn_tbl, so if the caller already has the sys_pn_tbl locked and wishes
     it  to  stay  locked,  they must  lock  the sys_pn_tbl after this routine
     returns.    The  caller  must  also  have  set   the   validation   level
     appropriately.
     
          There are two entries, as follows:

     fm_sys_pn_tbl_delete$fm_sys_pn_tbl_delete - 
          This entry is the target of fm_sys_on_tbl_util_$delete and
          is used by fm_delete_close_$post_transaction.
          It decrements the reference count of processes holding the
          file open.  If the reference count goes to 0, deletes the entry.
          It is not an error to attempt to close a file, and subsequently to
          try to delete its sys_pn_tbl entry, after the file has been deleted.
          For this reason, if the entry is not in use or is in use by another 
          fiel, this operation returns without error.

     fm_sys_pn_tbl_delete$redelete_force - 
          This entry is the target of fm_sys_pn_tbl_util_$redelete_force.
          It is used by undo and postcommit_do operations
          which must be able to force the deletion of the entry regardless
          of whether other processes have the file open.  These operations
          are the points at which protected files are actually deleted
          after the transaction has committed itself to doing the deletion
          (i.,e., the deletion will not be undone).  It is safe to delete
          the file's entry in the sys_pn_tbl, even if the file is open to 
          another process, if no other transaction has a before image against
          the file.  For this reason,
       ** this entry requires that the current transaction have an exclusive **
       ** lock on the file.                                                  **

   Error handling

     Possible errors are handled in one of two ways: the LOG routine
     or the ERROR_RETURN routine.  The LOG routine simply logs the event and 
     returns to the main procedure.  It is used if the sys_pn_tbl entry
     does not describe the specified file and if an error occurs in the
     cleanup handler (FINISH routine).  The ERROR_RETURN logs the event
     and calls fm_error_util_$signal, signalling the fm_sub_error_ condition.
     The ERROR_RETURN routine does not return and is used for errors which
     represent a real error.

*/

/* HISTORY:

Written by Matthew Pierret, 06/27/84.
Modified:
10/30/84 by Matthew Pierret:  Answered audit comments: removed sub_err_flags,
            fixed HISTORY section, fixed typo in DESCRIPTION section.
            Added the delete_force and redelete_force entries. Changed to use
            LOG_SV (in dm_log_sv_codes.incl.pl1).
01/10/85 by Matthew Pierret:  Changed to not signal error if not-in-use or
            if file uids don't match on the assumption that the file was
            deleted.
01/10/85 by Matthew C. Pierret:  Added ERROR_RETURN, LOG and MAKE_MESSAGE
            routines for better error handling.
02/28/85 by Matthew C. Pierret:  Changed to not log if the UIDs mis-match.
            That just means that the entry has already been deleted and
            re-used.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
03/14/85 by Matthew C. Pierret:  Changed to only unlock if the lock was
            successfully obtained and was not already locked by this process
            (it is invalid to lock the lock that a process already holds).
*/
/* format: style2,ind3 */
%page;
fm_sys_pn_tbl_delete:
   proc (p_file_uid, p_sys_pn_tbl_idx);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_uid	       bit (36) aligned;	/*unique id of the DM file*/
      dcl	    p_sys_pn_tbl_idx       fixed bin (17);	/*index of entry in sys_pn_tbl*/

/* Automatic */

      dcl	    forced_delete	       bit (1) aligned;
      dcl	    code		       fixed bin (35);
      dcl	    file_uid	       bit (36) aligned;
      dcl	    lock_code	       fixed bin (35) init (LOCK_NOT_YET_ATTEMPTED);
      dcl	    sys_pn_tbl_idx	       fixed bin;
      dcl	    unlock_code	       fixed bin (35) init (UNLOCK_NOT_YET_ATTEMPTED);

/* Based */
/* Builtin */

      dcl	    (addr, lbound, length, min, substr, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    MYNAME	       init ("fm_sys_pn_tbl_delete") char (32) varying internal static options (constant);
      dcl	    LOCK_WAIT_TIME	       init (1e9) fixed bin (71) internal static options (constant);
      dcl	    (LOCK_NOT_YET_ATTEMPTED, UNLOCK_NOT_YET_ATTEMPTED)
			       init (-1) fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      dcl	    dm_misc_util_$log      entry options (variable);
      dcl	    fm_error_util_$signal  entry options (variable);
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    lock_manager_$lock_fast
			       entry (ptr, fixed bin (71), fixed bin (35));
      dcl	    lock_manager_$unlock_fast
			       entry (ptr, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$fast_lock_invalid_reset,
	    dm_error_$file_uid_not_found
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */
%page;
      forced_delete = "0"b;
      go to JOIN;


redelete_force:
   entry (p_file_uid, p_sys_pn_tbl_idx);

      forced_delete = "1"b;
      go to JOIN;

JOIN:
      code = 0;
      file_uid = p_file_uid;
      sys_pn_tbl_idx = p_sys_pn_tbl_idx;

      on cleanup call FINISH ();

      call lock_manager_$lock_fast (addr (sys_pn_tbl.h.lock), LOCK_WAIT_TIME, lock_code);
      if lock_code ^= 0 & lock_code ^= dm_error_$fast_lock_invalid_reset
      then call ERROR_RETURN (lock_code, " Unable to lock ^a.", fm_data_$sys_pn_tbl_name);

      if sys_pn_tbl.e (sys_pn_tbl_idx).in_use = SPT_ENTRY_NOT_IN_USE
      then /* already been deleted - this is not unusual */
	 ;
      else if sys_pn_tbl.e (sys_pn_tbl_idx).file_uid ^= file_uid
      then /* again, already been deleted and replaced */
	 ;
      else
         do;
	  if forced_delete
	  then sys_pn_tbl.e (sys_pn_tbl_idx).open_count = 0;
	  else sys_pn_tbl.e (sys_pn_tbl_idx).open_count = sys_pn_tbl.e (sys_pn_tbl_idx).open_count - 1;

	  if sys_pn_tbl.e (sys_pn_tbl_idx).open_count = 0
	  then
	     do;
	        unspec (sys_pn_tbl.e (sys_pn_tbl_idx)) = ""b;
	        unspec (sys_pn_tbl.paths (sys_pn_tbl_idx)) = ""b;
	     end;

	  if sys_pn_tbl.h.last_entry = sys_pn_tbl_idx
	  then
	     do;
	        do sys_pn_tbl.h.last_entry = sys_pn_tbl_idx by -1 to lbound (sys_pn_tbl.e, 1)
		   while (sys_pn_tbl.e (sys_pn_tbl.h.last_entry).in_use = SPT_ENTRY_NOT_IN_USE);
	        end;
	     end;
         end;

      call lock_manager_$unlock_fast (addr (sys_pn_tbl.h.lock), unlock_code);
      if unlock_code ^= 0
      then call ERROR_RETURN (unlock_code, " Unable to unlock ^a.", fm_data_$sys_pn_tbl_name);


      return;
%page;
ERROR_RETURN:
   proc options (variable);


      dcl	    er_arg_list_ptr	       ptr;
      dcl	    er_code	       fixed bin (35) based (er_code_ptr);
      dcl	    er_code_ptr	       ptr;
      dcl	    er_code_len	       fixed bin (21);

      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_ptr_rel (1, er_code_ptr, er_code_len, (0), er_arg_list_ptr);
      call fm_error_util_$signal (er_code, MYNAME, FM_ACTION_CANT_RESTART | FM_ACTION_LOG, LOG_SV,
	 MAKE_MESSAGE (er_arg_list_ptr));

/* fm_error_util_$signal never returns, however FINISH will be invoked when
   the stack is unwound. */

   end ERROR_RETURN;

LOG:
   proc options (variable);

      dcl	    l_arg_list_ptr	       ptr;
      dcl	    l_code	       fixed bin (35) based (l_code_ptr);
      dcl	    l_code_ptr	       ptr;
      dcl	    l_code_len	       fixed bin (21);

      call cu_$arg_list_ptr (l_arg_list_ptr);
      call cu_$arg_ptr_rel (1, l_code_ptr, l_code_len, (0), l_arg_list_ptr);
      call dm_misc_util_$log (LOG_SV, l_code, MYNAME, MAKE_MESSAGE (l_arg_list_ptr));

      return;

   end LOG;

MAKE_MESSAGE:
   proc (mm_p_arg_list_ptr) returns (char (*));

      dcl	    mm_p_arg_list_ptr      ptr;
      dcl	    mm_message_len	       fixed bin (21);
      dcl	    mm_message_buffer      char (1024);
      dcl	    (DONT_PAD, NO_NEW_LINE)
			       init ("0"b) bit (1) aligned;

      call ioa_$general_rs (mm_p_arg_list_ptr, 2, 3, mm_message_buffer, mm_message_len, DONT_PAD, NO_NEW_LINE);

      return (substr (mm_message_buffer, 1, min (length (mm_message_buffer), mm_message_len)));

   end MAKE_MESSAGE;

FINISH:
   proc ();


      if (lock_code = 0 | lock_code = dm_error_$fast_lock_invalid_reset) & unlock_code = UNLOCK_NOT_YET_ATTEMPTED
      then
         do;
	  call lock_manager_$unlock_fast (addr (sys_pn_tbl.h.lock), code);
	  if unlock_code ^= 0
	  then call LOG (unlock_code, " Failed to unlock ^a during cleanup.", fm_data_$sys_pn_tbl_name);

         end;

      return;

   end FINISH;
%page;
%include dm_fm_sub_error_flags;
%page;
%include dm_fm_sys_pn_tbl;
%page;
%include dm_log_sv_codes;

   end fm_sys_pn_tbl_delete;
