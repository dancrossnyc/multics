/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
   This procedure is called by the Daemon via the transaction_manaager_ to
   logout anyone who is still using the DM system.  This is used in conjunction
   with DM shutdown.
*/

/* HISTORY:
Written by R. Michael Tague, 12/06/84.
Modified:
12/19/84 by R. Michael Tague: changed format style to not mess up history.
01/16/85 by R. Michael Tague: Made an ERROR_RETURN procedure, declared the
            addr and size builtins, changed the BUMP_USER procedure parameters
            prefixes.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
03/06/85 by R. Michael Tague: Elaborated the history notice of 01/16/85,
            removed the null and sub_err_ declarations, put in a statement to
	  initialize code to zero, and changed the bump grace time to zero
	  instead of 5 seconds.
*/

/* format: style5,^indcomtxt */

tm_bump_all:
        proc ();

/* START OF DECLARATIONS */
/* Parameter */

/* Automatic */

        dcl     as_request_channel	fixed bin (71);
        dcl     as_request_dir	char (168);
        dcl     as_request_proc_id	bit (36) aligned;
        dcl     as_request_seg	char (32);
        dcl     as_request_uid	bit (72) aligned;
        dcl     1 bump_user_info	aligned like asr_bump_user_info;

        dcl     code		fixed bin (35);
        dcl     failed_bumps		fixed bin;
        dcl     successful_bumps	fixed bin;
        dcl     tdt_index		fixed bin;

/* Based */
/* Builtin */

        dcl     (addr, fixed, size)	builtin;

/* Constant */

        dcl     BITS_PER_WORD		fixed bin init (36) int static
				options (constant);
        dcl     myname		char (32) init ("tm_bump_all")
				int static options (constant);

/* Entry */

        dcl     dm_misc_util_$log	entry options (variable);
        dcl     hcs_$wakeup		entry (bit (36) aligned, fixed bin (71),
				fixed bin (71), fixed bin (35));
        dcl     message_segment_$add_file
				entry (char (*), char (*), ptr,
				fixed bin (18), bit (72) aligned,
				fixed bin (35));
        dcl     system_info_$request_chn
				entry (bit (36) aligned, fixed bin (71),
				char (*), char (*));


/* External */

        dcl     dm_data_$tm_tdt_ptr	ptr ext;
        dcl     dm_system_data_$initializer_processid
				bit (36) aligned ext;
        dcl     error_table_$unimplemented_version
				fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
/* *************************************************************************
   * tm_bump_all - This is the main procedure.  We fill out the	     *
   * bump_user_info structure with everything except the process_id, we    *
   * then walk the TDT calling BUMP_USER for each process_id.	     *
   * BUMP_USER will fill in the process_id in the bump_user_info structure *
   * and send an ASR_BUMP_USER request to the Answering Service to logout  *
   * the specified process.					     *
   ************************************************************************* */

        code = 0;
        tm_tdt_ptr = dm_data_$tm_tdt_ptr;
        call CHECK_VERSION (tm_tdt.version, (TM_TDT_VERSION_3), "tm_tdt");

        bump_user_info.header.version = as_request_version_1;
        bump_user_info.header.type = ASR_BUMP_USER;
        bump_user_info.header.reply_channel = 0;
        bump_user_info.version = asr_bump_user_info_version_1;
        bump_user_info.message =
	  "Due to your failure or inability to exit the Data Management System"
	  ;
        bump_user_info.grace_time_in_seconds = 0;
        bump_user_info.reply_reference_id = "0"b;
        call system_info_$request_chn (as_request_proc_id, as_request_channel,
	  as_request_dir, as_request_seg);

        failed_bumps = 0;
        successful_bumps = 0;
        do tdt_index = 1 to tm_tdt.entry_count;
	      if tm_tdt.process_id (tdt_index) ^= "0"b
		& tm_tdt.process_id (tdt_index)
		^= dm_system_data_$initializer_processid then
		    do;
		    call BUMP_USER (tm_tdt.process_id (tdt_index), code);
		    if code = 0 then
			  successful_bumps = successful_bumps + 1;
		    else
			  failed_bumps = failed_bumps + 1;
		    end;
        end;
        if failed_bumps > 0 then
	      call dm_misc_util_$log (ERROR_SV, 0, myname,
		"^/Unable to bump ^i users of ^i users to be bumped.",
		failed_bumps, failed_bumps + successful_bumps);
        call RETURN ();

MAIN_RETURN:
        return;
%page;
/* *************************************************************************
   * BUMP_USER -Given a user process id, this routine sends a request to   *
   * the Answering Service to bump that user.  We assume that except for   *
   * the process id, the global structure asr_bump_user_info has been      *
   * filled in.  as_request_channel, as_request_dir, as_request_proc_id,   *
   * as_request_seg, and as_request_uid are global values that contain     *
   * information needed to send a request to the Answering Service.	     *
   ************************************************************************* */

BUMP_USER:
        proc (bu_p_process_id, bu_p_code);
        dcl     bu_p_process_id	bit (36) aligned;
        dcl     bu_p_code		fixed bin (35);

        bump_user_info.process_id = bu_p_process_id;
        call message_segment_$add_file (as_request_dir, as_request_seg,
	  addr (bump_user_info), BITS_PER_WORD * size (bump_user_info),
	  as_request_uid, bu_p_code);
        if bu_p_code ^= 0 then
	      call dm_misc_util_$log (ERROR_SV, bu_p_code, myname,
		"^/Cannot add to Answering Servce request message segment.^/Cannot send bump request."
		);
        else
	      do;
	      call hcs_$wakeup (as_request_proc_id, as_request_channel,
		fixed (as_request_uid), bu_p_code);
	      if bu_p_code ^= 0 then
		    call dm_misc_util_$log (ERROR_SV, bu_p_code, myname,
		        "^/Cannot send IPC wakeup to Answering Service.^/Cannot send bump request."
		        );
	      end;
        end BUMP_USER;
%page;
/* *************************************************************************
   * CHECK_VERSION - Checks the character version structure.	     *
   ************************************************************************* */

CHECK_VERSION:
        proc (cv_p_input_version, cv_p_expected_version, cv_p_structure_name);
        dcl     (
	      cv_p_input_version	char (8) aligned,
	      cv_p_expected_version	char (8) aligned,
	      cv_p_structure_name	char (*)
	      )			parameter;

        if cv_p_input_version ^= cv_p_expected_version then
	      do;
	      call dm_misc_util_$log (ERROR_SV,
		error_table_$unimplemented_version, myname,
		"Expected version ^a of structure ^a, received ^a.",
		cv_p_expected_version, cv_p_structure_name,
		cv_p_input_version);
	      call ERROR_RETURN ();
	      end;
        end CHECK_VERSION;
%page;
/* *************************************************************************
   * RETURN - All returns from this program come through here.	     *
   ************************************************************************* */

RETURN:
        proc ();

        go to MAIN_RETURN;
        end RETURN;
%page;
/* *************************************************************************
   * ERROR_RETURN - For error exits.  No clean up required in this program.*
   ************************************************************************* */

ERROR_RETURN:
        proc ();

        call RETURN ();
        end ERROR_RETURN;
%page;
%include as_request_header;
%page;
%include as_requests;
%page;
%include dm_log_sv_codes;
%page;
%include dm_tm_tdt;

        end tm_bump_all;

