/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_get_tdt_size: proc (A_highest_txn_index);


/* DESCRIPTION:

   Returns the highest index corresponding to an in-use TDT slot.
*/

/* HISTORY:
Written by Steve Herbst, 04/20/83.
Modified:
07/31/84 by Steve Herbst: Added $tdt_in_use.
08/03/84 by Lee A. Newcomb: Moved style comment and proc statement, and
   renamed loop index i to tdt_index to follow DM project standards.
10/17/84 by Steve Herbst: Changed in response to audit comments.
11/27/84 by Steve Herbst: Changed further in response to audit comments.
*/


/* DECLARATIONS */

/* Parameters */

dcl A_highest_txn_index fixed parameter;


/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl tdt_index fixed bin;

/* External */

dcl dm_data_$tm_tdt_ptr ptr external;
dcl dm_system_data_$initializer_processid bit (36) aligned external;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl sub_err_ entry options (variable);

/* Builtins */

dcl null builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then
	     call sub_err_ (error_table_$unimplemented_version, "tm_get_tdt_size", ACTION_CANT_RESTART,
		null, 0, "Expected TDT version ^a, found ^a.", TM_TDT_VERSION_3, tm_tdt.version);

	do tdt_index = tm_tdt.entry_count by -1 to 1 while (tm_tdt.process_id (tdt_index) = "0"b); end;

	A_highest_txn_index = tdt_index;

	return;
%page;
dm_system_in_use: entry () returns (bit (1) aligned);

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then
	     call sub_err_ (error_table_$unimplemented_version, "tm_get_tdt_size$dm_system_in_use",
		ACTION_CANT_RESTART, null, 0, "Expected TDT version ^a, found ^a.",
		     TM_TDT_VERSION_3, tm_tdt.version);

	do tdt_index = 1 to tm_tdt.entry_count;

	     if tm_tdt.process_id (tdt_index) ^= "0"b then
		if tm_tdt.process_id (tdt_index) ^= dm_system_data_$initializer_processid then return ("1"b);
		else if tm_tdt.txn_id (tdt_index) ^= "0"b then return ("1"b);
	end;

	return ("0"b);
%page;
%include dm_tm_tdt;
%page;
%include sub_err_flags;

     end tm_get_tdt_size;
