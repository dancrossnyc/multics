/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_get_txn_info:
     proc (A_txn_id, A_txn_info_ptr, A_code);

/* DESCRIPTION:

	This procedure looks up the specified transaction and returns
     info about it in dm_tm_txn_info.incl.pl1. The $tm_get_txn_info_index
     entry point does the same but uses a txn_index to find the TDT entry.
*/

/* HISTORY:
Written by Steve Herbst, 08/06/82.
Modified:
08/16/82 by Steve Herbst: Changed to use dm_data_$tm_tdt_ptr and consolidated
	  dm_tm_tdt.incl.pl1 with entry declarations.
08/23/82 by Steve Herbst: Fixed to initialize A_code.
09/10/82 by Steve Herbst: Changed for Version 2 TDT structure.
10/15/82 by Steve Herbst: Changed to assume current transaction given "0"b.
01/18/83 by Steve Herbst: Converted to Version 2, adding recent TDT additions.
04/20/83 by Steve Herbst: Added $tm_get_txn_info_index, does same but looks up
	  TIX not TID.
05/10/83 by Steve Herbst: Version 3: Changed to copy some bj_txt fields into
	  txn_info.journal_info (new).
05/27/83 by Steve Herbst: Version 4: Added checkpoint_id & rollback_count.
05/10/84 by Steve Herbst: Fixed to require dm_admin_gate_ access for other
	  user's transactions.
05/15/84 by L. A. Newcomb: Fixed reference to error_table_$bad_version
            (non-existant) to $unimplemented_version and to handle a version 5
            txn_info without returning $unimplemented_version.
10/17/84 by Steve Herbst: Changed in response to audit comments.
*/

/* DECLARATIONS */

/* Parameters */

dcl A_txn_id bit (36) aligned;
dcl A_txn_index fixed bin;
dcl A_txn_info_ptr ptr;
dcl A_code fixed bin (35);

/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl dummy_entry entry variable;
dcl (person, txn_person) char (22);
dcl saved_version char (8);
dcl txn_id bit (36) aligned;
dcl (dot_pos, txn_index) fixed bin;

/* External */

dcl dm_admin_gate_$ entry ext;
dcl dm_data_$bj_txt_ptr ptr ext;
dcl dm_data_$current_txn_index fixed bin ext;
dcl dm_data_$tm_tdt_ptr ptr external;
dcl dm_error_$no_current_transaction fixed bin (35) ext;
dcl dm_error_$not_own_transaction fixed bin (35) ext;
dcl dm_error_$transaction_not_found fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl tm_get_txn_index entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
dcl user_info_ entry (char (*));

/* Builtins */

dcl (index, substr, unspec) builtin;

/* Conditions */

dcl linkage_error condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	if A_txn_id = "0"b then			/* use current txn */
	     if dm_data_$current_txn_index = 0 then call ERROR_RETURN (dm_error_$no_current_transaction);
	     else do;
		txn_index = dm_data_$current_txn_index;
		txn_id = tm_tdt.txn_id (dm_data_$current_txn_index);
	     end;
	else do;
	     txn_id = A_txn_id;
	     txn_index = tm_get_txn_index (txn_id, A_code);
	     if A_code ^= 0 then return;
	end;

	go to COMMON;


tm_get_txn_info_index: entry (A_txn_index, A_txn_info_ptr, A_code);

	A_code = 0;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	txn_index = A_txn_index;

	if txn_index < 1 | txn_index > tm_tdt.entry_count then call ERROR_RETURN (dm_error_$transaction_not_found);

	txn_id = tm_tdt.txn_id (txn_index);

COMMON:
	txn_info_ptr = A_txn_info_ptr;

	if txn_info.version ^= TXN_INFO_VERSION_5 then call ERROR_RETURN (error_table_$unimplemented_version);

/* Require dm_admin_gate_ access if not own transaction */

	dot_pos = index (tm_tdt.owner_name (txn_index), ".");
	if dot_pos = 0 then txn_person = tm_tdt.owner_name (txn_index);
	else txn_person = substr (tm_tdt.owner_name (txn_index), 1, dot_pos - 1);
	call user_info_ (person);
	if txn_person ^= person then do;

	     on linkage_error call ERROR_RETURN (dm_error_$not_own_transaction);

	     dummy_entry = dm_admin_gate_$;

	     revert linkage_error;
	end;

	txn_info.txn_id = txn_id;
	txn_info.txn_index = txn_index;
	txn_info.mode = tm_tdt.mode (txn_index);
	txn_info.state = tm_tdt.state (txn_index);
	txn_info.error_code = tm_tdt.error_code (txn_index);
	txn_info.checkpoint_id = tm_tdt.checkpoint_id (txn_index);
	txn_info.rollback_count = tm_tdt.rollback_count (txn_index);
	txn_info.owner_process_id = tm_tdt.process_id (txn_index);
	txn_info.owner_name = tm_tdt.owner_name (txn_index);
	txn_info.date_time_created = tm_tdt.date_time_created (txn_index);
	txn_info.dead_process_sw = tm_tdt.dead_process_sw (txn_index);
	txn_info.suspended_sw = tm_tdt.suspended_sw (txn_index);
	txn_info.error_sw = tm_tdt.error_sw (txn_index);
	txn_info.abandoned_sw = tm_tdt.abandoned_sw (txn_index);
	txn_info.kill_sw = tm_tdt.kill_sw (txn_index);

/* Really need a bjm_ entry point that returns the following information.
   Transaction manager shouldn't look in the BJ TXT */

	bj_txt_ptr = dm_data_$bj_txt_ptr;

	txn_info.bj_uid = bj_txt.bj_uid (txn_index);
	txn_info.bj_oid = bj_txt.bj_oid (txn_index);
	txn_info.last_completed_operation = bj_txt.last_completed_operation (txn_index);
	txn_info.first_bj_rec_id = bj_txt.first_bj_rec_id (txn_index);
	txn_info.last_bj_rec_id = bj_txt.last_bj_rec_id (txn_index);
	txn_info.n_rec_written = bj_txt.n_rec_written (txn_index);
	txn_info.n_bytes_written = bj_txt.n_bytes_written (txn_index);
RETURN:
	return;
%page;
ERROR_RETURN: proc (P_code);

dcl P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

end ERROR_RETURN;
%page;
%include dm_bj_txt;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_txn_info;


end tm_get_txn_info;
