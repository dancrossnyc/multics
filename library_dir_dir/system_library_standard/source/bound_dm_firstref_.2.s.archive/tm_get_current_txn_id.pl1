/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_get_current_txn_id: proc (A_txn_id, A_code);


/* DESCRIPTION:
   The entry point tm_get_current_txn_id returns the txn_id of the current
   transaction. The entry point tm_get_current_ids does the same but also
   returns the transaction's checkpoint_id and rollback_count. Both entries
   return a nonzero code if the transaction is not IN-PROGRESS:

				txn_id	     code
				------	     ----
   1. Transaction in progress		valid tid	     0
   2. No transaction currently defined	   0	     dm_error_$no_current_transaction
   3. Transaction suspended		valid tid	     dm_error_$transaction_suspended
   4. Transaction left in error state	valid tid	     dm_error_$unfinished_abort
					or:  dm_error_$unfinished_commit
					or:  dm_error_$unfinished_rollback
*/

/* HISTORY:

Written by Steve Herbst, 01/11/83.
Modified:
01/17/83 by Steve Herbst: Changed to return the combinations documented above.
04/08/83 by Steve Herbst: Changed to return dm_error_$no_current_transaction if
	TIX^=0 but TID(TIX)="0"b.
05/27/83 by Steve Herbst: Added $tm_get_current_ids
03/28/84 by Lee A. Newcomb: Changed tm_get_state_info call to be
	  transaction_manager_$get_state_info.
10/17/84 by Steve Herbst: Changed in response to audit comments.
*/


/* DECLARATIONS */

/* Parameters */

dcl  A_txn_id bit (36) aligned parameter;
dcl (A_checkpoint_id, A_rollback_count) fixed bin parameter;
dcl  A_code fixed bin (35) parameter;


/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl txn_index fixed bin;

/* External */

dcl dm_data_$current_txn_index fixed bin ext;
dcl dm_data_$suspended_txn_index fixed bin ext;
dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_error_$no_current_transaction fixed bin (35) ext;
dcl dm_error_$transaction_suspended fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl transaction_manager_$get_state_info entry (fixed bin, char (*), fixed bin (35));

/* Builtins */

/* Conditions */

/* END OF DECLARATIONS */
%page;
	call GET_TXN_ID (A_txn_id, A_code);

	return;

tm_get_current_ids: entry (A_txn_id, A_checkpoint_id, A_rollback_count, A_code);

	call GET_TXN_ID (A_txn_id, A_code);

	if A_code = dm_error_$no_current_transaction then do;
	     A_checkpoint_id, A_rollback_count = 0;
	     return;
	end;

	A_checkpoint_id = tm_tdt.checkpoint_id (txn_index);
	A_rollback_count = tm_tdt.rollback_count (txn_index);

	return;
%page;
GET_TXN_ID: proc (P_txn_id, P_code);

dcl P_txn_id bit (36) aligned;
dcl P_code fixed bin (35);

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	txn_index = dm_data_$current_txn_index;
	if txn_index = 0 then
	     if dm_data_$suspended_txn_index ^= 0 then do;
		txn_index = dm_data_$suspended_txn_index;
		P_txn_id = tm_tdt.txn_id (txn_index);
		P_code = dm_error_$transaction_suspended;
	     end;
	     else do;
		P_txn_id = "0"b;
		P_code = dm_error_$no_current_transaction;
	     end;
	else do;
	     P_txn_id = tm_tdt.txn_id (txn_index);
	     if P_txn_id = "0"b then P_code = dm_error_$no_current_transaction;
	     else if tm_tdt.error_sw (txn_index) then	/* transaction was left in the middle of an operation */
		call transaction_manager_$get_state_info ((tm_tdt.state (txn_index)), "", P_code);
	     else P_code = 0;			/* in progress */
	end;

	return;

end GET_TXN_ID;
%page;
%include dm_tm_tdt;


end tm_get_current_txn_id;
