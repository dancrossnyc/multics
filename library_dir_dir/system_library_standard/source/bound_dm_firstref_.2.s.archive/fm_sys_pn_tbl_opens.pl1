/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  routine returns the number of opens for a file in the System
     Pathname  Table  (sys_pn_tbl).    This  routine  locks  and  unlocks  the
     sys_pn_tbl, so if the caller already has the sys_pn_tbl locked and wishes
     it  to  stay  locked,  it must  lock  the sys_pn_tbl  after  this routine
     returns.    The  caller  must  also  have  set   the   validation   level
     appropriately.
*/

/* HISTORY:

Written by Matthew Pierret, 12/20/84.
Modified:
02/27/85 by Lee A. Newcomb:  Removed unused variables and corrected a name in
            the history section.
*/
/* format: style2,ind3 */
%page;
fm_sys_pn_tbl_opens:
   proc (p_file_uid, p_sys_pn_tbl_idx, p_opens, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_uid	       bit (36) aligned;	/*unique id of the DM file*/
      dcl	    p_sys_pn_tbl_idx       fixed bin (17);	/*index of entry in sys_pn_tbl*/
      dcl	    p_opens	       fixed bin (17);	/* number of processes that have file open*/
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    try_to_unlock_lock     bit (1) aligned;
      dcl	    code		       fixed bin (35) init (0);
      dcl	    file_uid	       bit (36) aligned init (""b);
      dcl	    sys_pn_tbl_idx	       fixed bin init (-1);

/* Based */
/* Builtin */

      dcl	    addr		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("fm_sys_pn_tbl_opens") char (32) varying internal static options (constant);
      dcl	    LOCK_WAIT_TIME	       init (1e9) fixed bin (71) internal static options (constant);

/* Entry */

      dcl	    fm_error_util_$signal  entry options (variable);
      dcl	    lock_manager_$lock_fast
			       entry (ptr, fixed bin (71), fixed bin (35));
      dcl	    lock_manager_$unlock_fast
			       entry (ptr, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$fast_lock_invalid_reset,
	    dm_error_$fm_sys_pne_clobbered
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */
%page;
      p_code, code = 0;
      file_uid = p_file_uid;
      sys_pn_tbl_idx = p_sys_pn_tbl_idx;
      try_to_unlock_lock = "1"b;

      on cleanup call FINISH ();

      call lock_manager_$lock_fast (addr (sys_pn_tbl.h.lock), LOCK_WAIT_TIME, code);
      if code ^= 0 & code ^= dm_error_$fast_lock_invalid_reset
      then call ERROR_RETURN (code);

      if sys_pn_tbl.e (sys_pn_tbl_idx).file_uid ^= file_uid
      then call ERROR_RETURN (dm_error_$fm_sys_pne_clobbered);

      if sys_pn_tbl.e (sys_pn_tbl_idx).in_use = 0
      then call ERROR_RETURN (dm_error_$fm_sys_pne_clobbered);

      p_opens = sys_pn_tbl.e (sys_pn_tbl_idx).open_count;

      call lock_manager_$unlock_fast (addr (sys_pn_tbl.h.lock), code);
      try_to_unlock_lock = "0"b;
      if code ^= 0
      then call ERROR_RETURN (code);

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();


      if try_to_unlock_lock
      then
         do;
	  call lock_manager_$unlock_fast (addr (sys_pn_tbl.h.lock), code);
	  try_to_unlock_lock = "0"b;
	  if code ^= 0
	  then call fm_error_util_$signal (code, myname, FM_ACTION_QUIET_RESTART | FM_ACTION_LOG, LOG_SV,
		  "  Unable to unlock ^a.", fm_data_$sys_pn_tbl_name);
         end;

      return;

   end FINISH;
%page;
%include dm_fm_sub_error_flags;
%page;
%include dm_fm_sys_pn_tbl;
%page;
%include dm_log_sv_codes;

   end fm_sys_pn_tbl_opens;
