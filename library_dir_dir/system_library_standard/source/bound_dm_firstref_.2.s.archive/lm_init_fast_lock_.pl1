/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
    Program to initialize a user-supplied double-word as a fast lock.

    The steps are the following:

    1. Fill in an automatic copy of the fast lock block.

    2. Get a free block from fast_lock_data.

    3. Copy the automatic block to the free block.

    4. Fill in the fast lock double-word. Avoid races with other
       processes doing the same thing for this lock.
*/

/*  HISTORY:
Written by J. Bongiovanni, 06/15/82
Modified:
10/11/84 by Stanford S. Cox:  For DM program standards, and to meter fast 
	locks.
*/

/* format: style3 */
lm_init_fast_lock_:
     proc (p_fast_lock_ptr, p_code);

/*  Parameter  */

dcl	p_fast_lock_ptr	ptr;			/* Pointer to fast lock */
dcl	p_code		fixed bin (35);		/* Status code */

/*  Automatic  */

dcl	Ap		ptr;
dcl	1 new_fast_lock	aligned like fast_lock;
dcl	1 old_fast_lock	aligned like fast_lock;
dcl	Qp		ptr;
dcl	1 temp_fast_lock_block
			aligned like fast_lock_block;
dcl	Wp		ptr;


/*  Based  */

dcl	A		bit (36) aligned based (Ap);
dcl	Q		bit (36) aligned based (Qp);
dcl	W		bit (36) aligned based (Wp);

/*  Static */

dcl	ME		char (18) int static options (constant) init ("lm_init_fast_lock_");

/*  External  */

dcl	lm_data_$fast_lock_data_ptr
			ptr external static;
dcl	lm_data_$lock_list_meters_ptr
			ptr external static;
dcl	dm_error_$fast_lock_not_cleared
			fixed bin (35) external static;
dcl	dm_error_$fast_lock_no_free
			fixed bin (35) external static;
dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;

/*  Entry  */

dcl	find_fast_lock_data_
			entry (ptr, fixed bin (18), fixed bin (35));
dcl	hcs_$get_uid_seg	entry (ptr, bit (36) aligned, fixed bin (35));
dcl	lm_fast_lock_list_$thread_in
			entry (ptr, ptr, ptr);
dcl	lm_fast_lock_list_$thread_out_first
			entry (ptr, ptr, ptr, ptr);
dcl	sub_err_		entry () options (variable);

/*  Builtin  */

dcl	addr		builtin;
dcl	null		builtin;
dcl	rel		builtin;
dcl	stacq		builtin;
dcl	unspec		builtin;

%page;
	p_code = 0;
	fast_lock_ptr = p_fast_lock_ptr;

	fast_lock_data_ptr = lm_data_$fast_lock_data_ptr;
	call CHECK_VERSION (FAST_LOCK_DATA_VERSION_1, fast_lock_data.version, "fast_lock_data");
	lock_list_meters_ptr = lm_data_$lock_list_meters_ptr;
	if lock_list_meters_ptr ^= null ()
	then call CHECK_VERSION (LOCK_LIST_METERS_VERSION_1, lock_list_meters.version, "lock_list_meters");

/*  Save a copy of the fast lock. Make sure it hasn't been initialized
    already. */

RETRY:
	unspec (old_fast_lock) = unspec (fast_lock);
	if old_fast_lock.offset ^= ""b
	then do;
		p_code = dm_error_$fast_lock_not_cleared;
		return;
	     end;


/*  Build copy of fast lock block  */

	unspec (temp_fast_lock_block) = ""b;

	call hcs_$get_uid_seg (fast_lock_ptr, temp_fast_lock_block.uid, p_code);
	if p_code ^= 0
	then return;

	temp_fast_lock_block.offset = rel (fast_lock_ptr);

/*  Get a free block for the fast lock  */

	call lm_fast_lock_list_$thread_out_first (addr (fast_lock_data.free_list_head), fast_lock_data_ptr, null (),
	     lock_list_block_ptr);
	if lock_list_block_ptr = null ()
	then do;					/* None free */
		p_code = dm_error_$fast_lock_no_free;
		return;
	     end;

/*  Copy the block into the free block  */

	fast_lock_block_ptr = addr (lock_list_block.block_data);
	unspec (fast_lock_block) = unspec (temp_fast_lock_block);

/*  Fill in the fast lock double-word (this must be last). Watch
    for races. */

	unspec (new_fast_lock) = unspec (old_fast_lock);
	new_fast_lock.offset = rel (lock_list_block_ptr);

	Ap = addr (new_fast_lock.offset);
	Qp = addr (old_fast_lock.offset);
	Wp = addr (fast_lock.offset);
	if ^stacq (W, A, Q)
	then do;
		call lm_fast_lock_list_$thread_in (addr (fast_lock_data.free_list_head), lock_list_meters_ptr,
		     lock_list_block_ptr);
		goto RETRY;
	     end;

	return;
%page;
CHECK_VERSION:
     proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl	cv_p_expected_version
			char (8) aligned parameter;
dcl	cv_p_received_version
			char (8) aligned parameter;
dcl	cv_p_structure_name char (32) aligned parameter;

	if cv_p_expected_version ^= cv_p_received_version
	then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
		"^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.",
		cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
     end CHECK_VERSION;

%include dm_fast_lock_strucs;
%page;
%include dm_lock_list_strucs;
%include sub_err_flags;

     end lm_init_fast_lock_;
