/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
    Copy fast_lock data/meters.
    p_fast_lock_data_ptr (I/O) is a ptr to a temp seg which will contain the
       copied fast_lock_data.  The offset is set to the offset of the
       fast_lock_data_ptr being copied.  This is done to save the overhead of
       recalculating the offsets.  If null, fast_lock_data is not copied.
    p_lock_list_meters_ptr (I) is a ptr to a structure declared like
       lock_list_meters.  If null, lock_list_meters is not copied.
*/

/* HISTORY:

Written by S. Cox, 03/25/85.
Modified:
04/01/85 by S. Cox: Chg to return et$action_not_performed if ^meter_fast_locks.
*/

/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
lm_copy_fast_data_:
   procedure (p_fast_lock_data_ptr, p_lock_list_meters_ptr, p_code);

/* Parameter */

dcl     p_fast_lock_data_ptr		ptr;
dcl     p_lock_list_meters_ptr	ptr;
declare p_code			fixed bin (35);

/* Based */

dcl     fast_lock_data_template	(fast_lock_data.size) bit (36) aligned based;

/* Static */

dcl     myname			char (18) int static options (constant) init ("lm_copy_fast_data_");

/* External */

declare (
        error_table_$action_not_performed,
        error_table_$unimplemented_version
        )				fixed bin (35) ext static;
dcl     dm_system_data_$meter_fast_locks
				bit (1) aligned ext;
declare lm_data_$fast_lock_data_ptr	pointer ext static;
dcl     lm_data_$lock_list_meters_ptr	ptr ext static;

/* Entry */

dcl     sub_err_			entry () options (variable);

      fast_lock_data_ptr = lm_data_$fast_lock_data_ptr;
      lock_list_meters_ptr = lm_data_$lock_list_meters_ptr;
      p_code = 0;

      if p_fast_lock_data_ptr ^= null () then do;
         call CHECK_VERSION (FAST_LOCK_DATA_VERSION_1, fast_lock_data.version, "fast_lock_data");
         p_fast_lock_data_ptr = pointer (p_fast_lock_data_ptr, rel (fast_lock_data_ptr));
         p_fast_lock_data_ptr -> fast_lock_data_template = fast_lock_data_ptr -> fast_lock_data_template;
      end;

      if dm_system_data_$meter_fast_locks then do;
         call CHECK_VERSION (LOCK_LIST_METERS_VERSION_1, lock_list_meters.version, "lock_list_meters");
         if p_lock_list_meters_ptr ^= null () then p_lock_list_meters_ptr -> lock_list_meters = lock_list_meters;
      end;
      else if ^dm_system_data_$meter_fast_locks & ^(p_lock_list_meters_ptr = null)
      then p_code = error_table_$action_not_performed;

      return;

CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl     cv_p_expected_version		char (8) aligned parameter;
dcl     cv_p_received_version		char (8) aligned parameter;
dcl     cv_p_structure_name		char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;

%include dm_lock_list_strucs;
%page;
%include dm_fast_lock_strucs;
%page;
%include sub_err_flags;

   end lm_copy_fast_data_;
