/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/* --------------- */

tm_daemon_adjust: proc;

/* DESCRIPTION:

   Called  only  by the Data Management Daemon, $tm_adjust_tdt_entry cleans up
   a transaction belonging to a dead or "suspended" (to be defined) process.
   If a "committed" mark may have been  written  for  the  transaction,  the
   transaction is committed.  Otherwise, it is aborted.

   The entry point $tm_adjust_process_id adjusts the transaction
   belonging to a specified process_id, only if the process is dead.
*/

/* HISTORY:

Written by Steve Herbst, 10/12/82.
Modified:
11/01/82 by Steve Herbst: Changed to not adjust if txn's error_sw is on.
11/08/82 by Steve Herbst: Added $tm_adjust_process_id.
11/11/82 by Steve Herbst: Made to respect tm_tdt_entry.dead_process_sw.
11/22/82 by Steve Herbst: Changed to just return if passed a zero txn_id.
11/22/82 by Steve Herbst: Changed to free TDT entry when done.
12/07/82 by Steve Herbst: Changed to call other mgrs' adjusters, and free TDT
	entry, if txn not in error state.
12/14/82 by Steve Herbst: Changed to return error if tm_cleanup$restart_error
	couldn't adjust the transaction.
01/11/83 by Steve Herbst: Added code for tm_tdt.kill_sw="1"b, adjusting
	requested by tm_$kill.
01/11/83 by Steve Herbst: Changed to always adjust an error txn, a live
	abandoned txn, or one to be killed.
01/17/83 by Steve Herbst: Changed abort heuristic: only force abort of
	IN-PROGRESS txns, else finish up op
01/24/83 by Steve Herbst: Fixed to free entry despite no txn, call
	bjm_$adjust... only for dead proc, log adjust_txn
04/14/83 by Benson Margulies: Removed the code to unlock all, and removed a
          bad substr argument in process_id.
04/19/83 by Steve Herbst: Fixed adjust_txn internal proc to copy its arg.
04/20/83 by Lee A. Newcomb: Removed temp hack to pause in $tm_adjust_process_id
	since answering service (dpg_) is fixed.
04/26/83 by Steve Herbst: Added logging of "kill" path.
05/02/83 by Steve Herbst: Separated out the kill code into kill_txn, changed
	to kill without calling tm_cleanup.
05/04/83 by Steve Herbst: Converted tm_adopt calls to tm_daemon_adopt calls.
05/11/83 by Steve Herbst: Renamed module to tm_daemon_adjust; tm_adjust will
	be for user to call.
05/16/83 by Steve Herbst: Changed to send mail to owner if it can't adjust
	a transaction.
10/20/83 by Steve Herbst: Fixed bug preventing TDT entry from being freed if
	owner process still active.
03/28/84 by Lee A. Newcomb: Changed tm_get_state_info call to be
	transaction_manager_$get_state_info.
10/19/84 by Steve Herbst: Changed in response to audit comments.
01/23/84 by R. Michael Tague: Changed it so that the $adjust_tdt_entry would
          use the supplied txn_id if the supplied txn_index is zero.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
03/18/85 by Steve Herbst: Removed logging except for error situations.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_txn_id bit (36) aligned parameter;
dcl  A_txn_index fixed bin parameter;
dcl  A_code fixed bin (35) parameter;
dcl  A_process_id bit (36) aligned;


/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl  message char (256);
dcl  error_message char (100) aligned;
dcl  (ME, op_name) char (32);

dcl  txn_id bit (36) aligned;
dcl  process_id bit (36);
dcl  (dead_process_sw, kill_sw, process_id_entry_sw) bit (1);
dcl  txn_index fixed bin;
dcl  message_len fixed bin (21);
dcl  code fixed bin (35);

/* External */

dcl  dm_data_$current_txn_id bit (36) aligned ext;
dcl  dm_data_$current_txn_index fixed bin ext;
dcl  dm_data_$tm_tdt_ptr ptr external;
dcl  dm_error_$not_daemon fixed bin (35) ext;
dcl  dm_error_$tdt_entry_in_use fixed bin (35) ext;
dcl  dm_system_data_$initializer_processid bit (36) ext;
dcl  error_table_$badcall fixed bin (35) ext;
dcl  dm_error_$process_not_found fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl  before_journal_manager_$adjust_process_id entry (bit (36) aligned, fixed bin (35));
dcl  before_journal_manager_$write_aborted_mark entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  dm_misc_util_$log entry options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  get_process_id_ entry returns (bit (36));
dcl  hcs_$validate_processid entry (bit (36) aligned, fixed bin (35));
dcl  ioa_$rs entry options (variable);
dcl  lock_manager_$unlock_all entry;
dcl  send_mail_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  tm_cleanup$restart_error entry (ptr, fixed bin);
dcl  tm_daemon_adopt$tm_daemon_abandon entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  tm_daemon_adopt entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  transaction_manager_$get_state_info entry (fixed bin, char (*), fixed bin (35));

/* Builtins */

dcl  (addr, before, fixed, null, stacq, string, substr, unspec) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
tm_adjust_tdt_entry: entry (A_txn_id, A_txn_index, A_code);

	process_id_entry_sw = "0"b;
	ME = "tm_adjust_tdt_entry";
	txn_id = A_txn_id;
	txn_index = A_txn_index;
	A_code = 0;

	go to COMMON;

tm_adjust_process_id: entry (A_process_id, A_code);

	process_id_entry_sw = "1"b;
	ME = "tm_adjust_process_id";
	process_id = A_process_id;
	A_code = 0;
	txn_index = 0;

COMMON:
						/* must be called by Data_Management.Daemon */
	if get_process_id_ () ^= dm_system_data_$initializer_processid then do;
	     A_code = dm_error_$not_daemon;
	     return;
	end;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	tm_tdt_entry_ptr = null;			/* tested by ERROR_RETURN, in case next line errs */

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	if process_id_entry_sw then do;

	     txn_index = SEARCH_FOR_PROCESS (process_id);

	     txn_id = tm_tdt.txn_id (txn_index);
	end;
	else do;
	     if txn_index = 0 then
		txn_index = SEARCH_FOR_ID (txn_id);
	     if txn_index < 1 | txn_index > tm_tdt.entry_count then call ERROR_RETURN (error_table_$badcall);
	     else if tm_tdt.process_id (txn_index) = "0"b then return; /* nothing to adjust */
	end;

	tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));

	call hcs_$validate_processid (tm_tdt_entry.process_id, code);
	dead_process_sw = (code ^= 0);
	kill_sw = tm_tdt_entry.kill_sw;

	if ^dead_process_sw
	     & ^tm_tdt_entry.dead_process_sw		/* flagged as expected to die, same as dead */
	     & ^tm_tdt_entry.abandoned_sw then		/* can't adjust a living process' slot unless abandoned */
	     call ERROR_RETURN (dm_error_$tdt_entry_in_use);

	tm_tdt_entry.daemon_adjust_count = tm_tdt_entry.daemon_adjust_count + 1; /* intend to adjust */

/* If there is still a transaction in the slot, adjust it */

	if tm_tdt_entry.txn_id ^= "0"b then

	     if kill_sw then call KILL_TXN (tm_tdt_entry.txn_id);

	     else call ADJUST_TXN (tm_tdt_entry.txn_id);

/* Tell other managers to clean up their data on this process */
/* If they are all successful (no pending transactions indicated), free the TDT entry */

	if tm_tdt_entry.txn_id = "0"b then do;		/* unless transaction is in an error state */

	     if dead_process_sw then do;

		call before_journal_manager_$adjust_process_id (tm_tdt_entry.process_id, A_code);
						/* Call other managers too? */
		if A_code ^= 0 then do;
		     call dm_misc_util_$log (ERROR_SV, A_code, ME,
			"  Error calling bjm_$adjust_process_id; TDT entry not freed. (index = ^d, pid = ^w)",
			txn_index, tm_tdt_entry.process_id);
		     go to RETURN;
		end;
	     end;

	     tm_tdt_entry.owner_name = "";
	     tm_tdt_entry.event_channel = 0;
	     unspec (tm_tdt_entry.entry_flags) = "0"b;

	     if stacq (tm_tdt_entry.process_id, "0"b, tm_tdt_entry.process_id) then ;
						/* free entry indivisibly */
	end;

RETURN:
	return;
%page;
ADJUST_TXN: proc (A_txn_id);

dcl  (A_txn_id, txn_id) bit (36) aligned;

/* Adjusts a transaction and zeros the transaction portion of the TDT entry. */

	txn_id = A_txn_id;

	call tm_daemon_adopt (txn_id, txn_index, A_code);
	if A_code ^= 0 then do;
	     call dm_misc_util_$log (ERROR_SV, A_code, ME,
		"  (index = ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d) From tm_daemon_adopt.",
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state);
	     go to RETURN;
	end;

/* If transaction is in progress (normal), cause tm_cleanup$restart_error to abort it by setting the state.
   Else let tm_cleanup$restart_error finish up the unfinished operation. */

	if tm_tdt_entry.state = TM_IN_PROGRESS_STATE then
	     tm_tdt_entry.state = TM_ABORT_FLUSHING_TXN_STATE;

	call tm_cleanup$restart_error (tm_tdt_ptr, txn_index);
	if tm_tdt_entry.error_sw then do;
	     A_code = tm_tdt_entry.error_code;
	     call dm_misc_util_$log (ERROR_SV, A_code, ME,
		"  Failed to adjust txn ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d",
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state);

/* Send mail to owner */

	     send_mail_info.version = 2;
	     send_mail_info.sent_from = "";
	     unspec (send_mail_info.switches) = "0"b;
	     send_mail_info.always_add = "1"b;

	     call transaction_manager_$get_state_info ((tm_tdt_entry.state), op_name, 0);

	     call convert_status_code_ (A_code, "", error_message);

	     call ioa_$rs ("Failed to adjust transaction ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d^/^a: ^a",
		message, message_len,
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state, op_name, error_message);

	     call send_mail_ ((tm_tdt_entry.owner_name), substr (message, 1, message_len),
		addr (send_mail_info), 0);

	     send_mail_info.notify, send_mail_info.never_add = "1"b;
	     send_mail_info.always_add = "0"b;
	     call send_mail_ ((tm_tdt_entry.owner_name), "", addr (send_mail_info), 0);
						/* also send mail notification to terminal */
	end;

	call tm_daemon_adopt$tm_daemon_abandon (txn_id, txn_index, code);
	if code ^= 0 then
	     call dm_misc_util_$log (ERROR_SV, code, ME,
		"  (index = ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d) From tm_daemon_adopt$tm_daemon_abandon",
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state);

     end ADJUST_TXN;
%page;
ERROR_RETURN: proc (P_code);

dcl  P_code fixed bin (35);

	A_code = P_code;

	if process_id_entry_sw then call dm_misc_util_$log (ERROR_SV, P_code, ME, "(pid = ^w)", process_id);

	else if tm_tdt_entry_ptr = null then call dm_misc_util_$log (ERROR_SV, P_code, ME, "(index = ^d)", txn_index);

	else call dm_misc_util_$log (ERROR_SV, P_code, ME, "(index = ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d)",
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state);

	go to RETURN;

     end ERROR_RETURN;
%page;
KILL_TXN: proc (A_txn_id);

dcl  (A_txn_id, txn_id) bit (36) aligned;

/* Kills a transaction and zeros the transaction portion of the TDT entry. */

	txn_id = A_txn_id;

	call tm_daemon_adopt (txn_id, txn_index, A_code);
	if A_code ^= 0 then do;

/* If can't adopt, fake it and kill anyway */

	     dm_data_$current_txn_id = txn_id;
	     dm_data_$current_txn_index = txn_index;

	     call KILL;

	     return;
	end;

/* Write an abort mark (kludge) so bjm can keep track of things. */

	if OK_TO_WRITE_MARK ((tm_tdt_entry.state)) then
	     call before_journal_manager_$write_aborted_mark (txn_id, txn_index, 0);

	call KILL;

	call tm_daemon_adopt$tm_daemon_abandon (txn_id, txn_index, code);
	if code ^= 0 then
	     call dm_misc_util_$log (ERROR_SV, code, ME,
		"  (index = ^d, TID = ^o, pid = ^w, owner = ^a, state = ^d) From tm_daemon_adopt$tm_daemon_abandon",
		txn_index, fixed (tm_tdt_entry.txn_id), tm_tdt_entry.process_id,
		PERSON_ID (), tm_tdt_entry.state);
%page;
KILL: proc ();

	call lock_manager_$unlock_all;

	unspec (tm_tdt_entry.transaction) = "0"b;

	dm_data_$current_txn_id = "0"b;
	dm_data_$current_txn_index = 0;

	call dm_misc_util_$log (INFORM_SV, "Killed transaction ^d, TID = ^o, pid = ^w, owner = ^a",
	     A_txn_index, fixed (tm_tdt_entry.txn_id),
	     tm_tdt_entry.process_id, PERSON_ID ());

     end KILL;

     end KILL_TXN;
%page;
OK_TO_WRITE_MARK: proc (P_state) returns (bit (1));

dcl  (P_state, state) fixed bin;

	state = P_state;

	if state > TM_ERROR_INCREMENT then state = state - TM_ERROR_INCREMENT;

	if state ^= TM_ABORT_UNLOCKING_STATE		/* don't write a second abort mark if possible */
	     & state ^= TM_ABORT_METERING_STATE

	     & state ^= TM_COMMIT_UNLOCKING_STATE	/* also don't abort if commit mark has been written */
	     & state ^= TM_COMMIT_METERING_STATE then return ("1"b);

	else return ("0"b);

     end OK_TO_WRITE_MARK;
%page;
PERSON_ID: proc () returns (char (22));

dcl  name char (32);

	name = tm_tdt_entry.owner_name;
	return (before (name, "."));

     end PERSON_ID;
%page;
SEARCH_FOR_PROCESS: proc (P_process_id) returns (fixed bin);

dcl  P_process_id bit (36);
dcl  txn_index fixed bin;

	do txn_index = 1 to tm_tdt.entry_count;
	     if tm_tdt.process_id (txn_index) = P_process_id then return (txn_index);
	end;

	A_code = dm_error_$process_not_found;
	go to RETURN;

     end SEARCH_FOR_PROCESS;
%page;
/* *************************************************************************
   * SEARCH_FOR_ID - Given a transaction ID, this routine returns that     *
   * transaction's index in the TDT if it exists.  If it doesn't exist,    *
   * zero is returned.					     *
   ************************************************************************* */

SEARCH_FOR_ID: proc (sfi_p_txn_id) returns (fixed bin);

dcl  sfi_p_txn_id bit (36) aligned;
dcl  sfi_txn_index fixed bin;

	do sfi_txn_index = 1 to tm_tdt.entry_count;
	     if tm_tdt.txn_id (sfi_txn_index) = sfi_p_txn_id then return (sfi_txn_index);
	end;
	return (0);
     end SEARCH_FOR_ID;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_states;
%page;
%include dm_log_sv_codes;
%page;
%include send_mail_info;

     end tm_daemon_adjust;
