/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
    Lock Manager Deadlock Detection

    Determines whether a deadlock (lock-wait cycle) exists involving this
    transaction and returns this determination via the error code.

    Lock_Deadlock_ptr -> a bit array of dimension (p_n_lock_deadlock, p_n_lock_deadlock).
    (x,y) is ON <=> transaction x is waiting for a lock held by transaction y.
    transaction 1 must be this transaction. As an optimization, it is only
    necessary to consider transactions which are waiting for locks and
    the current transaction (since a transaction which is not waiting cannot
    be involved in a deadlock).

    No lock need be held by this transaction, since a deadlock is stable.

    This program implements the Transitive Closure algorithm of
	     Reingold, Nievergelt and Deo, Combinatorial Algorithms,
	     page 341-341, to find an adjacency matrix. If
	     any diagonal bit is on, there is a cycle. If (1, 1) is on
	     the calling txn is in the cycle. All those txns t
	     whose diagonals are on and for which (1, t) is on
	     are part of this deadlock, so we can determine
	     the youngest one (by bit order of TXN id). Only
	     the youngest will roll back.
*/
/* HISTORY:

Written by J. Bongiovanni, January 1983.
Modified:
04/28/83 by Benson I. Margulies:  Reimplemented to use sneaky ADJ algorithm
            and optimize the small cases.
05/01/84 by R. Michael Tague:  Added the History section.  Added
            %include dm_lm_meters.
10/16/84 by Stanford S. Cox:  For DMS program standards.
*/

/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
lm_check_for_deadlock_:
   procedure (p_lock_deadlock_ptr, p_lock_deadlock_txn_ids_ptr, p_n_lock_deadlock, p_notify_txn, p_code);

/*  Parameter  */

dcl     p_code			fixed bin (35);	/* Standard error code */
dcl     p_lock_deadlock_ptr		ptr parameter;	/* -> lock_deadlock array */
dcl     p_lock_deadlock_txn_ids_ptr	ptr parameter;
dcl     p_n_lock_deadlock		fixed bin parameter;/* Number of transactions in array */
dcl     p_notify_txn		bit (36) aligned;

/*  Automatic  */

dcl     (l, txn_idx)		fixed bin;	/* array indices */
dcl     youngest			bit (36) aligned;

/*  External  */

dcl     dm_system_data_$max_n_transactions
				fixed bin ext;
dcl     dm_error_$lock_deadlock	fixed bin (35) external;




      p_code = 0;
      lock_deadlock_ptr = p_lock_deadlock_ptr;
      lock_deadlock_txn_ids_ptr = p_lock_deadlock_txn_ids_ptr;
      n_lock_deadlock = p_n_lock_deadlock;
      p_notify_txn = ""b;


/***** First, convert the digraph matrix to an adjancy matrix. */
/***** The three different procedures are to allow the compiler to avoid */
/***** EIS when possible, since the speed difference is large. */

      if n_lock_deadlock = 36 /* These procedure take advantage of */ then call CLOSURE_SINGLE_WORD (lock_deadlock_ptr);
						/* the non-eis bit manipulation */
      else if n_lock_deadlock = 72 /* instructions */ then call CLOSURE_DOUBLE_WORD (lock_deadlock_ptr);
      else call CLOSURE_MULTI_WORD (lock_deadlock_ptr);

/***** Now, wait_own is really ADJ (wait_own*).  If (1, 1) is on, */
/***** then there is a deadlock involving us. */

      if ^lock_deadlock.wait_own (1, 1) then return;

/***** Now, the diagonal entries are TXN's that are involved in some deadlock */
/***** wait_own (1, txn_idx) --> that txn txn_idx is in our deadlock. */
/***** this could also be benefited by the 36/72 trick, but is not really */
/***** worth it. */

      youngest = (36)"0"b;

      do txn_idx = 2 to n_lock_deadlock;
         if lock_deadlock.wait_own (txn_idx, txn_idx)
         then if lock_deadlock.wait_own (1, txn_idx)
	    then if lock_deadlock_txn_ids (txn_idx) > youngest then youngest = lock_deadlock_txn_ids (txn_idx);
      end;

      if lock_deadlock_txn_ids (1) > youngest /* we are junior */ then do;
         p_code = dm_error_$lock_deadlock;
         return;
      end;

      p_notify_txn = youngest;

      return;


CLOSURE_MULTI_WORD:
   procedure (cm_p_lock_deadlock_ptr);

dcl     cm_p_lock_deadlock_ptr	ptr;
dcl     1 cm_lock_deadlock		like lock_deadlock aligned based (cm_p_lock_deadlock_ptr);
dcl     cm_owner_txn_idx		fixed bin;
dcl     cm_waiter_txn_idx		fixed bin;

      do cm_owner_txn_idx = 1 to hbound (cm_lock_deadlock.wait_own, 1);
         do cm_waiter_txn_idx = 1 to hbound (cm_lock_deadlock.wait_own, 1);
	  if cm_lock_deadlock.wait_own (cm_waiter_txn_idx, cm_owner_txn_idx)
	  then cm_lock_deadlock.wait_own (cm_waiter_txn_idx, *) =
		  cm_lock_deadlock.wait_own (cm_waiter_txn_idx, *) | cm_lock_deadlock.wait_own (cm_owner_txn_idx, *);
         end;
      end;
   end CLOSURE_MULTI_WORD;

CLOSURE_SINGLE_WORD:
   procedure (cs_p_lock_deadlock_ptr);

dcl     cs_p_lock_deadlock_ptr	ptr;
declare rows			(36) bit (36) aligned based (cs_p_lock_deadlock_ptr);
						/* force compiler for efficiency */
dcl     cs_owner_txn_idx		fixed bin;
dcl     cs_waiter_txn_idx		fixed bin;

      do cs_owner_txn_idx = 1 to n_lock_deadlock;
         do cs_waiter_txn_idx = 1 to n_lock_deadlock;
	  if substr (rows (cs_waiter_txn_idx), cs_owner_txn_idx, 1)
	  then rows (cs_waiter_txn_idx) = rows (cs_waiter_txn_idx) | rows (cs_owner_txn_idx);
         end;
      end;

   end CLOSURE_SINGLE_WORD;

CLOSURE_DOUBLE_WORD:
   procedure (cd_p_lock_deadlock_ptr);

dcl     cd_p_lock_deadlock_ptr	ptr;
declare rows			(72) bit (72) aligned based (cd_p_lock_deadlock_ptr);
						/* force compiler for efficiency */
dcl     cd_owner_txn_idx		fixed bin;
dcl     cd_waiter_txn_idx		fixed bin;

      do cd_owner_txn_idx = 1 to n_lock_deadlock;
         do cd_waiter_txn_idx = 1 to n_lock_deadlock;
	  if substr (rows (cd_waiter_txn_idx), cd_owner_txn_idx, 1)
	  then rows (cd_waiter_txn_idx) = rows (cd_waiter_txn_idx) | rows (cd_owner_txn_idx);
         end;
      end;
   end CLOSURE_DOUBLE_WORD;

%page;
%include dm_lm_system_data;
%include dm_lm_meters;

   end lm_check_for_deadlock_;
