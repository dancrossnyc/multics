/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
    Program to do per-process lock initialization. Assumes that fast
    locking is already initialized.
*/

/* HISTORY:

Written by J. Bongiovanni, 11/30/82.
Modified:
12/01/82 by J. Bongiovanni:  For multi-segment lock data.
02/08/83 by Lindsey Spratt:  Moved setting of lm_data_$lock_seg_ptr to just
            after lock_seg_ptr is set  by call to dm_per_system_$initiate.
            This fixes a problem where lm_salvage_lock_seg_ was being called 
            before lm_data_$lock_seg_ptr was set, but it depends on its
            value being non-null.
03/04/83 by Jeffrey D. Ives:  Modified for new initialization (add sub_err_).
04/06/83 by Benson I. Margulies:  To houseclean, make transaction oriented.
08/05/83 by Lee A. Newcomb:  removed obsolete status codes from calls
	  to dm_per_system_ entries.
83/12/02 by MPandolf: to make lm_data_$current_txn_id external
05/01/84 by R. Michael Tague:  Added %include dm_lm_meters
10/03/84 by Stanford S. Cox:  To use sub_err_flags.
11/22/84 by Lee A. Newcomb:  removed obsolete dm_common_init_ references.
12/04/84 by Stanford S. Cox:  Removed ptr check after dm_per_system_ call.
*/

/* format: style3,idind30 */
lm_per_process_init_:
     procedure;

/*  Automatic  */

dcl	code			fixed bin (35) init (0);
dcl	hx			fixed bin init (0);
dcl	lock_segx			fixed bin init (0);
dcl	px			fixed bin init (0);
dcl	retval			fixed bin (35) init (0);
dcl	saved_validation_level	fixed bin init (-1);

dcl	cleanup			condition;

/*  Static  */

dcl	ME			char (32) static options (constant) init ("lm_per_process_init_");
dcl	LOCK_TIMEOUT		fixed bin (71) int static options (constant) init (1000000000);
dcl	INITIAL_AREA_SIZE		fixed bin int static options (constant) init (1024);
dcl	N_HASH_TABLE_ENTRIES	fixed bin int static options (constant) init (128);
dcl	HASH_MASK			bit (36) aligned int static options (constant) init ("000000000177"b3);

/*  Based  */

dcl	dm_area			area based (dm_data_$inner_ring_areap);

/*  External  */

dcl	dm_system_data_$max_n_transactions
				fixed bin ext static;
dcl	dm_data_$inner_ring_areap	ptr external;

dcl	lm_data_$current_txn_id	bit (36) aligned ext static;
dcl	lm_data_$lock_per_process_ptr pointer ext static;
dcl	lm_data_$lock_seg_ptr	pointer ext static;
dcl	lm_data_$n_lock_segments	fixed bin external static;
dcl	lm_data_$lock_segments_ptr	pointer external static;

dcl	dm_error_$fast_lock_invalid_reset
				fixed bin (35) external;
dcl	dm_error_$lock_table_overflow fixed bin (35) external;
dcl	error_table_$unimplemented_version
				fixed bin (35) ext static;

/*  Entry  */

dcl	cu_$level_set		entry (fixed bin);
dcl	get_ring_			entry returns (fixed bin);
dcl	dm_per_system_$initiate	entry (char (*), char (*), ptr);
dcl	get_process_id_		entry () returns (bit (36));
dcl	hcs_$validate_processid	entry (bit (36) aligned, fixed bin (35));
dcl	lm_init_fast_per_process_	entry ();
dcl	lock_manager_$lock_fast	entry (ptr, fixed bin (71), fixed bin (35));
dcl	lock_manager_$unlock_fast	entry (ptr, fixed bin (35));
dcl	lm_salvage_lock_seg_	entry (fixed bin (35));
dcl	sub_err_			entry () options (variable);

/*  Builtin  */

dcl	addr			builtin;
dcl	hbound			builtin;
dcl	lbound			builtin;
dcl	null			builtin;
dcl	ptr			builtin;

	call cu_$level_set (get_ring_ ());

	call lm_init_fast_per_process_ ();

	lock_segno = 1;
	call dm_per_system_$initiate (LOCK_SEGNAME || lock_segno, "", lock_seg_ptr);
	call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");

	lm_data_$lock_seg_ptr = lock_seg_ptr;

	lm_data_$n_lock_segments = lock_seg.n_lock_segments;

	allocate lock_segments in (dm_area) set (lock_segments_ptr);
	lm_data_$lock_segments_ptr = lock_segments_ptr;

	lock_segments.seg_baseptr (1) = ptr (lock_seg_ptr, 0);
	if lm_data_$n_lock_segments > 1
	then do lock_segx = 2 to lm_data_$n_lock_segments;
		lock_segno = lock_segx;
		call dm_per_system_$initiate (LOCK_SEGNAME || lock_segno, "", lock_aux_seg_ptr);
		lock_segments.seg_baseptr (lock_segx) = ptr (lock_aux_seg_ptr, 0);
	     end;


	n_hash_table_entries = N_HASH_TABLE_ENTRIES;
	allocate lock_per_process in (dm_area) set (lock_per_process_ptr);

	lock_per_process.ht_mask = HASH_MASK;
	lock_per_process.area_size = INITIAL_AREA_SIZE;
	allocate lm_per_process_area in (dm_area) set (lock_per_process.area_ptr);
	lock_per_process.hash_table (*) = null ();

	lm_data_$lock_per_process_ptr = lock_per_process_ptr;
	lm_data_$current_txn_id = ""b;		/* so we init */


	return;

CHECK_VERSION:
     proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl	cv_p_expected_version	char (8) aligned parameter;
dcl	cv_p_received_version	char (8) aligned parameter;
dcl	cv_p_structure_name		char (32) aligned parameter;

	if cv_p_expected_version ^= cv_p_received_version
	then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
		"^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.",
		cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
     end CHECK_VERSION;


%page; %include dm_lm_per_process_data_;
%page; %include dm_lm_system_data;
%page; %include dm_lm_meters;
%page; %include sub_err_flags;
     end lm_per_process_init_;
