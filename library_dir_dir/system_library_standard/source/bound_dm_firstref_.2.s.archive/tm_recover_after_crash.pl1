/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_recover_after_crash: proc (A_temp_tdt_ptr, A_bj_txt_ptr, A_code);

/* DESCRIPTION:

     Called at system start-up time, this procedure aborts any unfinished
   transactions left over from the last bootload.  Given by the caller
   (intended to be dm_recovery_) a structure containing transaction info for
   the left-over transactions, it rebuilds the TDT and calls tm_abort for
   each transaction.

     Note: It is only for convenience that we use the tm_tdt and bj_txt
   structures since these structures contain all the currently needed
   fields.  This convention may be changed in the future.
*/

/* HISTORY:

Written by Steve Herbst, 10/12/82.
Modified:
10/27/82 by Steve Herbst: Added A_temp_tdt_ptr arg. & changed to copy from
	  recovery TDT instead of TXT structure.
11/05/82 by Steve Herbst: Added A_code parameter.
11/09/82 by Steve Herbst: Changed to turn on tm_tdt.no_begin teporarily, log
	  errors and clear TDT when done.
11/18/82 by Steve Herbst: Added call to clear_txn_tables entry in
	  before_journal_manager_.
11/06/82 by Steve Herbst: Changed to use state in recovery TDT.
11/17/82 by L. A. Newcomb: Put A_code in the parameter list and fixed
	  before_journal_manager_ calls to pass a code.  Much
	  general fixing up.
03/14/83 by L. A. Newcomb: Call dm_log_ instead of dmsd_logger_.
03/15/83 by L. A. Newcomb: To not destroy tm_tdt.entry_count value.
03/27/83 by L. A. Newcomb: To report how many txns recovered.
03/29/83 by L. A. Newcomb: To report how many txns are to be recovered.
04/29/83 by L. A. Newcomb: Expanded log msg of # of txns to recover to
            include the journal the txns were found in.
05/01/83 by L. A. Newcomb: Added clearing of the tm_tdt state and txn_id
            components so dm_who doesn't think the entries are in use.
06/08/83 by Steve Herbst: Renamed tm_adjust to
	  tm_daemon_adjust$tm_adjust_tdt_entry (bug fix)
10/17/84 by Steve Herbst: Changed in response to audit comments.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* DECLARATIONS */

/* Parameters */

dcl (A_temp_tdt_ptr, A_bj_txt_ptr) ptr parameter;
dcl A_code fixed bin (35) parameter;

/* Constants */

dcl ME char (32) int static options (constant) init ("tm_recover_after_crash");

/* Based */

/* Static */

/* Automatic */

dcl bj_dir char (168);
dcl bj_name char (32);
dcl temp_tdt_ptr ptr;
dcl (new_tdt_count, txn_index) fixed bin;
dcl (code, sentinel_code) fixed bin (35);

/* External */

dcl dm_data_$current_txn_id bit (36) aligned ext;
dcl dm_data_$current_txn_index fixed bin ext;
dcl dm_data_$my_tdt_index fixed bin ext;
dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_system_data_$max_n_transactions fixed bin ext;
dcl error_table_$action_not_performed fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl before_journal_manager_$clear_txn_tables entry (fixed bin (35));
dcl before_journal_manager_$get_bj_path_from_uid entry (bit (36) aligned, char (*), char (*), fixed bin (35));
dcl before_journal_manager_$rebuild_after_crash entry (ptr, fixed bin (35));
dcl dm_misc_util_$log entry options (variable);
dcl tm_daemon_adjust$tm_adjust_tdt_entry entry (bit (36) aligned, fixed bin, fixed bin (35));

/* Builtins */

dcl clock builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
/* Copy input parameters to local and initialize output error code */

	temp_tdt_ptr = A_temp_tdt_ptr;		/* recovery tm_ data */
	bj_txt_ptr = A_bj_txt_ptr;			/* recovery bjm_ data */
	tm_tdt_ptr = dm_data_$tm_tdt_ptr;		/* current bootload tm_ TDT data */
	A_code = 0;				/* error_code */

/* Verify version of the recovery tm_tdt passed to us. */

	if temp_tdt_ptr -> tm_tdt.version ^= TM_TDT_VERSION_3 then do;
	     A_code = error_table_$unimplemented_version;
	     call dm_misc_util_$log (ERROR_SV, A_code, ME, "Version ^a expected, version ^a supplied.",
		temp_tdt_ptr -> tm_tdt.version, TM_TDT_VERSION_3);
	     return;
	end;

	tm_tdt.no_begins = "1"b;			/* prevent new transactions from beginning meanwhile */

/* Get the before journal path for error msgs, and pray we don't need it */

	call before_journal_manager_$get_bj_path_from_uid (bj_txt.bj_uid (1), bj_dir, bj_name, code);
	if code ^= 0 then do;
	     call dm_misc_util_$log (ERROR_SV, code, ME, "Cannot get pathname of before journal to recover.");
	     A_code = code;
	     return;
	end;

/* How many txns are to be recovered? */

	call dm_misc_util_$log (LOG_SV, 0, ME, "^d txns to recover in ^a>^a.",
	     temp_tdt_ptr -> tm_tdt.entry_count, bj_dir, bj_name);

/* Rebuild TDT containing the transactions passed in recovery TDT structure */
/* Note the temp TDT contains the real number of txns to be recovered. */

	new_tdt_count = 0;

	do txn_index = 1 to temp_tdt_ptr -> tm_tdt.entry_count;

	     if temp_tdt_ptr -> tm_tdt.process_id (txn_index) ^= "0"b then do;  /* slot in use */
		new_tdt_count = new_tdt_count + 1;
		if new_tdt_count > tm_tdt.entry_count then do;  /* this is unlikely */
		     call dm_misc_util_$log (ERROR_SV, 0, ME, "TDT too small to hold previous transactions to recover.");
		     return;
		end;
		tm_tdt.entry (new_tdt_count) = temp_tdt_ptr -> tm_tdt.entry (txn_index);
		tm_tdt.entry (new_tdt_count).date_time_created = clock ();
		tm_tdt.entry (new_tdt_count).mode = TM_NORMAL_MODE;
	     end;
	end;

/* Zero unused entries in new TDT */

	do txn_index = (new_tdt_count + 1) to tm_tdt.entry_count;
	     tm_tdt.entry (txn_index).process_id = ""b;		/* the field that counts */
	end;

/* Let before_journal_manager_ rebuild its transaction table(s) also */

	call before_journal_manager_$rebuild_after_crash (bj_txt_ptr, code);
	if code ^= 0 then do;
	     call dm_misc_util_$log (ERROR_SV, code, ME, "Cannot rebuild before journal manager tables.");
	     return;
	end;
%page;
/* Adjust all the transactions */
/* Adopts and abandons are explicit so as to log any failure */

	sentinel_code = 0;

	do txn_index = 1 to tm_tdt.entry_count;

	     dm_data_$current_txn_id = tm_tdt.txn_id (txn_index);
	     dm_data_$current_txn_index, dm_data_$my_tdt_index = txn_index;

	     call tm_daemon_adjust$tm_adjust_tdt_entry (tm_tdt.txn_id (txn_index), txn_index, code);
	     if code ^= 0 then do;
		sentinel_code = code;
		call dm_misc_util_$log (ERROR_SV, code, ME,
		     "Unable to adjust transaction ^o, before journal uid ^a>^a.",
		     tm_tdt.entry (txn_index).txn_id, bj_dir, bj_name);
	     end;
	end;


/* Log errors and clear TDT */

	if sentinel_code ^= 0 then do;		/* report recovery error */
	     A_code = error_table_$action_not_performed;
	     call dm_misc_util_$log (ERROR_SV, sentinel_code, ME, "Recovery errors. Before journal ^a>^a", bj_dir, bj_name);
	end;
	else call dm_misc_util_$log (LOG_SV, 0, ME, "No errors recovering before journal ^a>^a", bj_dir, bj_name);

/* DONE: must free the TDT and TXT entries */
	tm_tdt.process_id,				/* free all process_id and txn_id */
	     tm_tdt.transaction.txn_id = "0"b;		/* entries so dm_who doesn't see anything */
	tm_tdt.transaction.state = 0;			/* dm_who also looks at this */

	call before_journal_manager_$clear_txn_tables (0);

	dm_data_$current_txn_id = "0"b;
	dm_data_$current_txn_index, dm_data_$my_tdt_index = 0;

	tm_tdt.no_begins = "0"b;

	return;
%page;
%include dm_bj_txt;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_modes;
%page;
%include dm_tm_states;
%page;
%include dm_log_sv_codes;


end tm_recover_after_crash;
