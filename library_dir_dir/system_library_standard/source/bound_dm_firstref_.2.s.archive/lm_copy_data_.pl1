/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
   lm_copy_data_	--Program to copy all the data segments under the log 
*/

/* HISTORY:

Written by Benson I. Margulies, 04/29/83.
Modified:
05/01/84 by R. Michael Tague:  Added the History section.  Added
            %include dm_lm_meters.
10/17/84 by Stanford S. Cox:  For DM program standards.
12/04/84 by Stanford S. Cox:  system_segment_count: Chg to return (0)
*/

/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
lm_copy_data_:
   procedure (p_copy_info_ptr, p_code);

declare p_copy_info_ptr		pointer;
declare p_code			fixed bin (35);

dcl     ME			char (13) int static options (constant) init ("lm_copy_data_");

declare lock_manager_$lock_lock_data	entry (fixed bin (35));
declare lock_manager_$unlock_lock_data	entry (fixed bin (35));

declare error_table_$smallarg		fixed bin (35) ext static;
declare error_table_$unimplemented_version
				fixed bin (35) ext static;

declare dm_system_data_$max_n_transactions
				fixed bin ext static;
declare lm_data_$lock_seg_ptr		pointer ext static;
declare lm_data_$lock_segments_ptr	pointer ext static;
declare lm_data_$n_lock_segments	fixed bin external;
declare cleanup			condition;

declare sx			fixed bin;
dcl     sub_err_			entry () options (variable);


      lm_copy_data_ptr = p_copy_info_ptr;
      p_code = 0;
      call CHECK_VERSION (LM_COPY_DATA_VERSION_1, lm_copy_data.version, "lm_copy_data");

      on cleanup call lock_manager_$unlock_lock_data (0);
      call lock_manager_$lock_lock_data (p_code);
      if p_code ^= 0 then return;

      lock_seg_ptr = lm_data_$lock_seg_ptr;
      call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
      lock_segments_ptr = lm_data_$lock_segments_ptr;

      do sx = 1 to min (lm_copy_data.n_segments, lm_data_$n_lock_segments);
         call COPY_SEGMENT ((lock_segments.seg_baseptr (sx)), lm_copy_data.segment_ptrs (sx));
      end;

      lm_copy_data.n_system_segments = lm_data_$n_lock_segments;
      if lm_copy_data.n_segments < lm_copy_data.n_system_segments then p_code = error_table_$smallarg;
      call lock_manager_$unlock_lock_data (0);
      return;


system_segment_count:
   entry (p_code) returns (fixed bin);

      p_code = 0;
      lock_seg_ptr = lm_data_$lock_seg_ptr;
      on cleanup call lock_manager_$unlock_lock_data (0);
      call lock_manager_$lock_lock_data (p_code);		/* this will make lm_data_$n_lock_segments up to date */
      if p_code ^= 0 then return (0);
      call lock_manager_$unlock_lock_data (0);
      return (lm_data_$n_lock_segments);


COPY_SEGMENT:
   procedure (cs_p_from, cs_p_to);

declare cs_p_from			pointer;
declare cs_p_to			pointer;
declare cs_max_length		fixed bin (19);
declare cs_copy_template		(lock_seg.lock_seg_size) bit (36) aligned based;

/* no business failing */
      cs_p_to -> cs_copy_template = cs_p_from -> cs_copy_template;
      return;
   end COPY_SEGMENT;

CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl     cv_p_expected_version		char (8) aligned parameter;
dcl     cv_p_received_version		char (8) aligned parameter;
dcl     cv_p_structure_name		char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;


%include dm_lm_copy_data;
%include dm_lm_system_data;
%include dm_lm_meters;
%include sub_err_flags;

   end lm_copy_data_;
