/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
lm_log_:
	procedure () options (variable);

/*
   lm_log_ - primitive interface to the data manatement log, to be used by
   all processes that need to leave a message in an accessable place
   for future use.  This procedure contains a locking protocol for the
   data management system log.  The actual writing is handled by write_log_.

   Two calling sequences are recognized by lm_log_, one for error reporting
   and one for simple reporting.  Error reports will generate two entries
   in the log, simple reports will generate one entry.  The calling sequences
   are:

	call lm_log_ (severity, code, caller, ioa_ctl_string, ioa_arg1, ..., ioa_argN);
	call lm_log_ (severity, ioa_ctl_string, ioa_arg1, ..., ioa_argN);

   the fundamental flow of this program is:

	DM_LOG_

	     MAKE_MESSAGE

	     LOCK_LOG
	     if   CANNOT_LOCK_LOG
	     then
	     else do
		WRITE_INTO_LOG (time, severity, id || message)
		UNLOCK_LOG
		end

        end DM_LOG_

*/

/*
   written  11jan83 by M. Pandolf
   modified 01feb83 by M. Pandolf to accept pointer to arg list in addition
			    to accepting an arglist directly.
  modified 830426 BIM to reconstitute as lm_log_. a hack.
*/

%page;

/* entrypoint to accept arg ptr as an argument */

	need_to_get_arglist_ptr = "1"b;
	goto setup_handler;

from_arg_ptr:
	entry (p_arglist_ptr);

	need_to_get_arglist_ptr = "0"b;
	arglist_ptr = p_arglist_ptr;

/* first, get ready to give up at the first sign of trouble */

setup_handler:
	on any_other begin;
	     if dm_system_data_$log_lock ^= ZERO
	     then call set_lock_$unlock (dm_system_data_$log_lock, status);

	     goto lm_log_returns;
	end;

/* get process identity and pointer to arglist for this block */

	call user_info_$whoami (person_id, project_id, acct);
	if need_to_get_arglist_ptr
	then call cu_$arg_list_ptr (arglist_ptr);

/* there can be no less than two arguments to this program, so verify it */

	if arglist_ptr -> arg_list.arg_count < 2
	then return;

/* get some values that will be required for calls to write_log_ */

	message_time = clock ();
	message_severity = FIXED_BIN_17 (1);

/* lock the log lock */

	call set_lock_$lock (dm_system_data_$log_lock, FIFTEEN_SECOND_WAIT, status);
	if status = error_table_$lock_wait_time_exceeded |
	     status = error_table_$no_w_permission
	then goto lm_log_returns;

/* if this is an error call, the second parameter will be fixed bin (35) */

	if arglist_ptr -> arg_list.desc_ptrs (2) -> arg_descriptor.type = FIXED_BIN_SHORT
	then do;

/* log the first of a two line message */

	     error_code = FIXED_BIN_35 (2);		/* from parm 2 */
	     caller = CHAR_32 (3);			/* from parm 3 */

	     if error_code = 0
	     then short_report, long_report = "";
	     else call convert_status_code_ (error_code, short_report, long_report);
	     message = "(" || substr (person_id, 1, 8) || " " || substr (project_id, 1, 8) || ") " || rtrim (caller) || ": " || rtrim (long_report);

	     call write_log_$write_log_file (message_time, message_severity, message, DMS_LOG, Log_ptr);

/* log the second line of the two line message, if it exists */

	     if arglist_ptr -> arg_list.arg_count > 3
	     then do;
		message_len = 116;
		call formline_ (4, 5, addr (message), message_len, 1, arglist_ptr);
		message = "(" || substr (person_id, 1, 8) || " " || substr (project_id, 1, 8) || ") " || message;

		call write_log_$write_log_file (message_time, message_severity, message, DMS_LOG, Log_ptr);
	     end;

	end;

/* not an error call, print one line of message */

	else do;

	     message_len = 116;
	     call formline_ (2, 3, addr (message), message_len, 1, arglist_ptr);
	     message = "(" || substr (person_id, 1, 8) || " " || substr (project_id, 1, 8) || ") " || message;

	     call write_log_$write_log_file (message_time, message_severity, message, DMS_LOG, Log_ptr);

	end;

	call set_lock_$unlock (dm_system_data_$log_lock, status);

lm_log_returns:
	return;

set_dir:
	entry (p_log_dir);

/* this entrypoint is used to set the dir for the log */

	if p_log_dir ^= ""
	then call write_log_$write_log_test (p_log_dir);
	else call write_log_$write_log_test (get_default_wdir_ ());

	return;

%page;

/* INTERNAL PROCEDURES */

FIXED_BIN_17:
	procedure (p_arg_no) returns (fixed bin (17));

dcl  p_arg_no fixed bin parameter;
dcl  fb17 fixed bin (17) based;

	if arglist_ptr -> arg_list.arg_count >= p_arg_no
	then return (arglist_ptr -> arg_list.arg_ptrs (p_arg_no) -> fb17);
	else return (0);

end FIXED_BIN_17;

FIXED_BIN_35:
	procedure (p_arg_no) returns (fixed bin (35));

dcl  p_arg_no fixed bin parameter;
dcl  fb35 fixed bin (35) based;

	if arglist_ptr -> arg_list.arg_count >= p_arg_no
	then return (arglist_ptr -> arg_list.arg_ptrs (p_arg_no) -> fb35);
	else return (0);

end FIXED_BIN_35;

CHAR_32:
	procedure (p_arg_no) returns (char (32));

dcl  p_arg_no fixed bin parameter;
dcl  c32 char (32) based;

	if arglist_ptr -> arg_list.desc_count >= p_arg_no
	then return (substr (arglist_ptr -> arg_list.arg_ptrs (p_arg_no) -> c32,
	     1,
	     arglist_ptr -> arg_list.desc_ptrs (p_arg_no) -> arg_descriptor.size));
	else return ("");

end CHAR_32;

%page;

/* DECLARATIONS */

/* Parameter */

dcl  p_arglist_ptr pointer parameter;			/* explicit pointer to arglist */
dcl  p_log_dir char (*) parameter;			/* dir in which the current log is to be found */

/* Automatic */

dcl  need_to_get_arglist_ptr bit (1) aligned;		/* true if arglist_ptr is implicitly received */
dcl  status fixed bin (35);				/* standard system status code */
dcl  person_id char (22);				/* of this process */
dcl  project_id char (9);				/* of this process */
dcl  acct char (32);				/* process account, is ignored here */
dcl  arglist_ptr pointer;				/* pointer to argument list for this block */
dcl  message_time fixed bin (71);			/* time message was received for logging */
dcl  message_severity fixed bin (17);			/* nonstandard code indicating nature of message */
dcl  error_code fixed bin (35);			/* standard status code to be translated for output */
dcl  caller char (32);				/* name of block calling this procedure */
dcl  short_report char (8) aligned;			/* short status message from error_code */
dcl  long_report char (100) aligned;			/* long status message from error_code */
dcl  message char (116);				/* message to be logged */
dcl  message_len fixed bin (21);			/* length of message, in bytes */

/* Static, Internal */

dcl  Log_ptr pointer internal static init (null ());	/* pointer to current log segment */

/* Static, External */

dcl  dm_system_data_$log_lock bit (36) aligned external static;
dcl  error_table_$lock_wait_time_exceeded fixed bin(35) ext static;
dcl  error_table_$no_w_permission fixed bin(35) ext static;

/* Constant */

dcl  ZERO bit (36) internal static options (constant)
     init ((36)"0"b);
dcl  FIXED_BIN_SHORT fixed bin (6) unsigned unaligned internal static options (constant)
     init (1);
dcl  FIFTEEN_SECOND_WAIT fixed bin internal static options (constant)
     init (15);
dcl  DMS_LOG char (32) internal static options (constant)
     init ("lm_log");

/* Entry */

dcl  set_lock_$lock entry (bit(36) aligned, fixed bin, fixed bin(35));
dcl  set_lock_$unlock entry (bit(36) aligned, fixed bin(35));
dcl  user_info_$whoami entry (char(*), char(*), char(*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  convert_status_code_ entry (fixed bin(35), char(8) aligned, char(100) aligned);
dcl  formline_ entry options (variable);
dcl  write_log_$write_log_file entry (fixed bin(71), fixed bin, char(*), char(*), ptr);
dcl  write_log_$write_log_test entry (char(*));
dcl  get_default_wdir_ entry() returns(char(168) aligned);

/* Condition */

dcl  any_other condition;

/* Builtin */

dcl  clock builtin;
dcl  substr builtin;
dcl  rtrim builtin;

/* Include Files */

%page;
%include arg_list;
%page;
%include arg_descriptor;
%page;

end lm_log_;
