/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_error_state: proc (A_txn_index, A_state, A_code, A_caller, A_name);

/* DESCRIPTION:
   Puts  a  specified  transaction in a specified error state, and logs
   the error by calling dm_misc_util_$log.   Also  zeroes  dm_data_$current_txn_id  so
   that  protected  data operations will be prohibited until the transaction
   is fixed.
*/
/* HISTORY:

Written by Steve Herbst, 01/14/83.
Modified:
10/18/84 by Steve Herbst: Changed in response to audit comments.
01/04/85 by Steve Herbst: Changed ACTION_DEFAULT_RESTART to ACTION_CANT_RESTART.
01/29/85 by Steve Herbst: Fixed to not zero dm_data_$current_txn_id.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_txn_index fixed bin parameter;
dcl  A_state fixed bin parameter;
dcl  A_code fixed parameter;
dcl  A_caller char (*) parameter;
dcl  A_name char (*) parameter;


/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl txn_index fixed bin;

/* External */

dcl dm_data_$current_txn_id bit (36) aligned ext;
dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_system_data_$initializer_processid bit (36) aligned ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl dm_misc_util_$log entry options (variable);
dcl get_process_id_ entry returns (bit (36) aligned);
dcl sub_err_ entry options (variable);

/* Builtins */

dcl (fixed, null) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
	txn_index = A_txn_index;
	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then do;
	     call sub_err_ (error_table_$unimplemented_version, "tm_error_state", ACTION_CANT_RESTART,
		null, 0, "Expected TDT version ^a, received version ^a", TM_TDT_VERSION_3, tm_tdt.version);
	     return;
	end;

	call dm_misc_util_$log (ERROR_SV, A_code, A_caller,
	     "  (index = ^d, TID = ^o, owner = ^a) Calling ^a",
	     txn_index, fixed (tm_tdt.txn_id (txn_index)), tm_tdt.owner_name (txn_index), A_name);

	tm_tdt.state (txn_index) = A_state;

	tm_tdt.error_sw (txn_index) = "1"b;
	tm_tdt.error_code (txn_index) = A_code;

	if get_process_id_ () ^= dm_system_data_$initializer_processid then
	     tm_tdt.daemon_adjust_count (txn_index) = 0;	/* user call; let the daemon try to adjust again */

	return;
%page;
%include dm_tm_tdt;
%page;
%include dm_log_sv_codes;
%page;
%include sub_err_flags;


end tm_error_state;
