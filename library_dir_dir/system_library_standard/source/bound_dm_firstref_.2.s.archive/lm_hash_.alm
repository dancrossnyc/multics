" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lm_hash_ - Routines to maintain lock hash tables in a ruthlessly
"		efficient manner.
"
"	Entries:
"
"		hash_in   - Adds an entry to the hash table
"		hash_out  - Deletes an entry from the hash table
"		search    - Searches for a UID, CI Number
"
"	Written August 1982 by J. Bongiovanni
"	Modified December 1982 by J. Bongiovanni for multi-segment lock data
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	lm_hash_

	entry	hash_in
	entry	hash_out
	entry	search


	even
NULL_ITS:
	its	-1,1
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	hash_in - Entry to add a lock object to a hash thread
"
"	call lm_hash_$hash_in (lock_objectp)
"
"	   lock_objectp -> filled in lock object	(Input)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


hash_in:
	eppbb	ap|2,*			" bb -> ptr -> lock object
	eppbb	bb|0,*			" bb -> lock object

	lda	bb|lock_object.uid		" Mash UID/CI
	era	bb|lock_object.ci_no
	tsx0	setup			" Get hash bucket

	lda	bp|0			" First in thread
	sta	bb|lock_object.ht_fp	" Make first second
	lda	bb|lock_object.seg_inx	" And this first
	eaq	bb|0
	arl	18
	lrl	18
	stq	bp|0

	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	hash_out - Entry to remove a lock object from a hash thread
"
"	call lm_hash_$hash_out (lock_objectp)
"
"	   lock_objectp -> lock object		(Input)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


hash_out:
	eppbb	ap|2,*			" bb -> ptr -> lock object
	eppbb	bb|0,*			" bb -> lock object

	lda	bb|lock_object.uid		" Mash UID/CI
	era	bb|lock_object.ci_no
	tsx0	setup			" Get hash bucket

	lda	bb|lock_object.uid		" Setup for search
	ldq	bb|lock_object.ci_no
	tsx0	search_thread		" Look for it
	tra	hash_out_returns		" Not found (?)

	lda	bb|lock_object.ht_fp	" Next in thread
	eax1	0,x1			" Is this the first?
	tze	hash_out_null		" Yes
	sta	ab|lock_object.ht_fp	" No - thread next to prev
	tra	hash_out_returns

hash_out_null:
	sta	bp|0			" Make next first

hash_out_returns:
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	search - Entry to look for a UID/CI in the hash table
"
"	call lm_hash_$search (UID, CI, lock_objectp)
"
"	   UID = Page File UID			(Input)
"	   CI = Control Interval No.			(Input)
"	   lock_objectp -> lock object, or null		(Output)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


search:
	lda	ap|2,*			" Mash UID/CI
	era	ap|4,*
	tsx0	setup			" Get hash bucket

	lda	ap|2,*			" UID for search
	ldq	ap|4,*			" CI for search
	tsx0	search_thread		" Look for it
	tra	search_not_found		" Not found
	tra	search_returns		" Found

search_not_found:
	eppbb	NULL_ITS,*		" Return null
search_returns:
	spribb	ap|6,*
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	setup - Internal procedure to find hash bucket
"
"	tsx0	setup
"
"	On entry,
"	   A = XOR of UID and CI
"
"	On exit,
"	   bp -> hash table bucket
"	   lb -> lock segments array for this process
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

setup:
	epplb	lm_data_$lock_segments_ptr,*	" Per-Process segments array
	eppab	lm_data_$lock_seg_ptr,*	" First system lock segment
	lxl1	ab|lock_seg.hash_table_offset	" Offset of hash table
	eppbp	ab|0,x1			" bp -> hash table
	ana	ab|lock_seg.hash_mask	" Strip out index
	eppbp	bp|0,al			" And apply it
	tra	0,x0

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	search_thread - Internal procedure to search for a UID/CI
"
"	tsx0	search_thread
"	<return if not found>
"	<return if found>
"
"	On entry,
"	   bp -> hash table bucket
"	   A = UID
"	   Q = CI
"
"	On exit,
"	   bb -> lock object
"	   ab -> previous or null
"	   x1 = offset of previous or 0
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

search_thread:
	eax1	0			" No previous
	eppab	NULL_ITS,*		" Ditto
	ldx2	bp|0			" Segment index of first
	tmi	0,x0			" None
	lxl3	bp|0			" Offset of first
search_loop:
	lprpbb	lb|-1,x2			" bb -> segment of lock object
	eppbb	bb|0,x3			" bb -> lock object
	cmpa	bb|lock_object.uid		" UID match?
	tnz	search_next		" No
	cmpq	bb|lock_object.ci_no	" CI match?
	tze	1,x0			" Yes
search_next:
	eax1	0,x3			" Set previous to current
	ldx2	bb|lock_object.ht_fp	" And get next in thread
	tmi	0,x0			" None
	lxl3	bb|lock_object.ht_fp
	eppab	bb|0			" ab -> previous lock object
	tra	search_loop
"
	include	dm_lm_system_data
	end
