/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION
These routines implement stream I/O for Data Management files.  They simplify
I/O for the simple stream case.  We decompose a single stream get/put into
seperate gets/puts on each control interval involved.
*/

/* HISTORY:
Written by Jeff Ives, 06/22/82.
Modified:
05/24/84 by R. Michael Tague:  Changed the name of the entries from
            $read and $write to $get_stream and $put_stream.
	  Changed the error handling to return a code instead of signaling
	  an error.
12/13/84 by R. Michael Tague:  Changed some variable names and generally fixed
            up due to auditing comments.
*/
%page;
/* format: style2 */

get_stream:
     proc (p_opening_id, p_file_offset_in_bytes, p_buffer_ptr, p_buffer_len_in_bytes, p_code);
	operation_kind = "get";
	go to JOIN;
%page;
/* START OF DECLARATIONS */

/* Parameters */

	dcl     p_opening_id	 bit (36) aligned parm;
	dcl     p_file_offset_in_bytes fixed bin (48) parm;
	dcl     p_buffer_ptr	 ptr parm;
	dcl     p_buffer_len_in_bytes	 fixed bin (21) parm;
	dcl     p_code		 fixed bin (35) parm;

/* Automatic */

	dcl     adjusted_file_first_byte
				 fixed bin (49) init (0);
	dcl     buffer_ptr		 ptr init (null ());
	dcl     chunk_ptr		 ptr init (null ());
	dcl     ci_first_byte	 fixed bin (17) init (0);
	dcl     ci_number_of_bytes	 fixed bin (17) init (0);
	dcl     ci_num		 fixed bin (27) init (0);
	dcl     code		 fixed bin (35) init (0);
	dcl     eof_byte		 fixed bin (49) init (0);
	dcl     file_chunk_first_byte	 fixed bin (49) init (0);
	dcl     file_first_byte	 fixed bin (48) init (0);
	dcl     number_of_bytes	 fixed bin (21) init (0);
	dcl     opening_id		 bit (36) aligned init (""b);
	dcl     operation_kind	 char (8) aligned;

/* Conditions */
/* Based */
/* Builtin */

	dcl     (addcharno, divide, min, mod, null)
				 builtin;

/* External Variables */
/* External Entries */

	dcl     file_manager_$simple_get
				 entry (bit (36) aligned, fixed bin (27), fixed bin (17), ptr, fixed bin (17),
				 fixed bin (35));
	dcl     file_manager_$simple_put
				 entry (bit (36) aligned, fixed bin (27), fixed bin (17), ptr, fixed bin (17),
				 fixed bin (35));

/* Static */

/* END OF DECLARATIONS */
%page;
put_stream:
     entry (p_opening_id, p_file_offset_in_bytes, p_buffer_ptr, p_buffer_len_in_bytes, p_code);
	operation_kind = "put";
	go to JOIN;
%page;
JOIN:
	opening_id = p_opening_id;
	file_first_byte = p_file_offset_in_bytes;
	buffer_ptr = p_buffer_ptr;
	number_of_bytes = p_buffer_len_in_bytes;

	if number_of_bytes = 0
	then /* Do nothing */
	     ;
	else do;
		eof_byte = file_first_byte + number_of_bytes;
		if file_first_byte < CI_0_ADDRESSABLE_LENGTH
		then do;
			ci_num = 0;
			ci_first_byte = file_first_byte;
			chunk_ptr = buffer_ptr;
			ci_number_of_bytes =
			     min (CI_0_ADDRESSABLE_LENGTH - ci_first_byte, eof_byte - file_first_byte);
		     end;
		else do;
			adjusted_file_first_byte =
			     file_first_byte + (CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH);
			ci_num = divide (adjusted_file_first_byte, CI_ADDRESSABLE_LENGTH, 49);
			ci_first_byte = mod (adjusted_file_first_byte, CI_ADDRESSABLE_LENGTH);
			chunk_ptr = buffer_ptr;
			ci_number_of_bytes =
			     min (CI_ADDRESSABLE_LENGTH - ci_first_byte, eof_byte - file_first_byte);
		     end;
		file_chunk_first_byte = file_first_byte;
		code = 0;
		do while (ci_number_of_bytes ^= 0 & code = 0);
		     if operation_kind = "get"
		     then call file_manager_$simple_get (opening_id, ci_num, ci_first_byte, chunk_ptr,
			     ci_number_of_bytes, code);
		     else call file_manager_$simple_put (opening_id, ci_num, ci_first_byte, chunk_ptr,
			     ci_number_of_bytes, code);
		     ci_num = ci_num + 1;
		     ci_first_byte = 0;
		     chunk_ptr = addcharno (chunk_ptr, ci_number_of_bytes);
		     file_chunk_first_byte = file_chunk_first_byte + ci_number_of_bytes;
		     ci_number_of_bytes = min (CI_ADDRESSABLE_LENGTH, eof_byte - file_chunk_first_byte);
		end;
	     end;

	p_code = code;
	return;
%page;
/* START OF INCLUDE FILES */
%include dm_ci_lengths;

     end get_stream;
