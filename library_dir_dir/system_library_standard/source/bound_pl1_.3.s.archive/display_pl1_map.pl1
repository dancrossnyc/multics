/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to print map of generated object code

   Modified: 22 May 1971 by BLW for Version II
   Modified: 24 July 1972 by BLW
   Modified: 13 Feb 1977 by RAB for multiple conditions/on-unit	*/

display_pl1_map: proc(pt);

dcl	pt ptr;		/* points at root block */

dcl	p ptr,
	line aligned char(120) int static,
	n fixed bin(17),
	pl1_print$non_varying_nl entry(char(*) aligned,fixed bin),
	pos fixed bin int static,
	old_id bit(27) int static,
	bindec entry(fixed bin) returns(char(12)),
	binoct entry(fixed bin) returns(char(12));

dcl	(fixed,null,substr,string) builtin;

%include block;
%include block_types;
%include statement;
%include statement_types;
%include operator;

	call pl1_print$non_varying_nl("",0);
	call pl1_print$non_varying_nl((7)"   LINE    LOC   ",0);

	line = "";
	pos = 1;
	old_id = "0"b;
	call prt_block(pt -> block.son);

	if pos > 1 then call pl1_print$non_varying_nl(line,pos-4);

prt_block:     proc(ptx);

dcl	     ptx ptr unaligned;

dcl	     (pt,p) ptr;

	     pt = ptx;
	     if pt = null then return;

	     if pt -> block.block_type = begin_block
	     then do;
db:		call prt_block(pt -> block.brother);
		return;
		end;

	     if pt -> block.block_type = on_unit then goto db;

	     goto l1;

prt_other_block: entry(ptx);

	     pt = ptx;

l1:	     p = pt -> block.prologue;
	     if p = null then goto do_main;

	     do while(p ^= null);
		call prt_statement(p);
		p = p -> statement.next;
		end;

do_main:	     p = pt -> block.main;
	     do while(p ^= null);
		call prt_statement(p);
		p = p -> statement.next;
		end;

	     /* since the code_generator turns the processed bit ON for
	        each block, turning it OFF will indicate that we have
	        processed it */

	     pt -> block.processed = "0"b;

	     call prt_block(pt -> block.son);

	     if pt -> block.block_type ^= begin_block
	     then if pt -> block.block_type ^= on_unit
		then call prt_block(pt -> block.brother);

	     end;

prt_statement: proc(q);

dcl	     q ptr,
	     bit_s_id bit(27),
	     (i,ln) fixed bin;

	     i = q -> statement.object.start;
	     if i = q -> statement.object.finish then goto no;

	     bit_s_id = string(q -> statement.source_id);
	     if bit_s_id = old_id then goto no;

	     ln = fixed(substr(bit_s_id,9,14),14);
	     substr(line,pos+3,4) = substr(bindec(ln),9,4);
	     substr(line,pos+8,6) = substr(binoct(i),7,6);

	     ln = fixed(substr(bit_s_id,1,8),8);
	     if ln ^= 0 then substr(line,pos,2) = substr(bindec(ln),11,2);

	     pos = pos + 17;

	     if pos >= 112
	     then do;
		call pl1_print$non_varying_nl(line,pos-4);
		line = "";
		pos = 1;
		end;

	     old_id = bit_s_id;

no:	     if q -> statement.statement_type = begin_statement
	     then call prt_other_block(q -> statement.root);
	     else if q -> statement.statement_type = on_statement
		then if q -> statement.root -> operand(3) -> block.processed
		     then call prt_other_block(q -> statement.root -> operand(3));

	     end;

	end;
