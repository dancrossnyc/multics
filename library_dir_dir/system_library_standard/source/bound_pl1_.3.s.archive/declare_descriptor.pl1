/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-06-26,Huen), approve(87-06-26,MCR7712), audit(87-12-01,RWaters),
     install(87-12-01,MR12.2-1005):
     Fix bug1895
  2) change(88-01-29,RWaters), approve(88-01-29,MCR7724), audit(88-02-05,Huen),
     install(88-02-16,MR12.2-1024):
     Treat explicit_packed as packed.
                                                   END HISTORY COMMENTS */


/* format: style2 */

declare_descriptor:
     proc (cblk, stmnt, ps, loc, bit2) returns (ptr);

/*	Modified 780616 by PG for unsigned
	Modified:	790106 by RAB to fix 1811 (bad descriptors for interleaved
		packed arrays if array of structures is unpacked)	
	Modified:	810626 by EBush to remove the limit of 128 descriptors
		per constant size structure
          Modified: 871806 by RWaters to fix 1895 by diagnosing bad returns
		options
	Modified: 882801 by RW to accept symbol.explicit_packed as packed
*/

	dcl     (s, d, r, stmnt, blk, cblk, q, loc, st, ps)
				 ptr;
	dcl     (first, ptr_saver)	 ptr;
	dcl     (offset, size)	 fixed bin (15);
	dcl     scale		 fixed bin (12);
	dcl     bit2		 bit (2) aligned;
	dcl     (constant, actl, array_desc, cross_section, before_get_size, top_level, star_extents, controlled,
	        use_new)		 bit (1) aligned;

	dcl     pl1_stat_$util_abort	 variable static ext entry (fixed bin (15), ptr);

	dcl     max_desc		 (512) fixed bin (31);
						/* reserve 512 words in the stack */

	dcl     basic_desc		 bit (36) aligned based (addr (desc.bit_type));

	dcl     bit_image		 bit (size * bits_per_word) aligned based (addr (max_desc));

	dcl     1 desc		 based (addr (max_desc)),
		2 spacer		 (offset) fixed bin (31),
		2 basic_desc_image	 aligned,
		  3 bit_type	 unaligned,
		    4 flag	 unal bit (1),
		    4 type	 unal bit (6),
		    4 packed	 unal bit (1),
		    4 number_dims	 unal bit (4),
		  3 size		 unal bit (24),
		2 desc_image	 fixed bin (31);

/* internal static */

	dcl     star_bits		 bit (36) aligned internal static init ("100000000000000000000000000000000000"b);

/* builtins */

	dcl     (null, substr, string, fixed, bit, addr, unspec)
				 builtin;

/* program */

	before_get_size = "0"b;
	actl = "0"b;
	st = stmnt;

common:
	s = ps;
	use_new = "1"b;

	array_desc = substr (bit2, 1, 1);
	cross_section = substr (bit2, 2, 1);

/* see if a descriptor has already been made which can be
	   used in the present case.   */

	if ^(s -> symbol.based | s -> symbol.temporary | s -> symbol.position | actl)
	then if s -> symbol.dimensioned & ^array_desc
	     then if s -> symbol.array -> array.element_descriptor ^= null
		then if ^((s -> symbol.parameter | s -> symbol.controlled)
			& (s -> symbol.star_extents | s -> symbol.exp_extents))
		     then return (copy ((s -> symbol.array -> array.element_descriptor)));
		     else ;
		else ;
	     else if s -> symbol.descriptor ^= null
	     then if s -> symbol.star_extents & s -> symbol.parameter
		     & s -> symbol.descriptor -> reference.symbol -> symbol.descriptor = null
		then use_new = "0"b;
		else return (copy ((s -> symbol.descriptor)));
	     else ;
	else ;

	if before_get_size
	then call set_star (s);

	blk = s -> symbol.block_node;
	if blk = null
	then blk = cblk;

	controlled = s -> symbol.controlled & (st = null | actl);
	star_extents =
	     (s -> symbol.star_extents | (s -> symbol.parameter & s -> symbol.exp_extents)) & (st = null | actl);

	if s -> symbol.exp_extents | s -> symbol.star_extents
	then do;
		constant = "0"b;
		if (^actl | s -> symbol.descriptor = null) & use_new
		then do;
			d = create_symbol (blk, null, by_compiler);
			d -> symbol.boundary = word_;
			if s -> symbol.temporary | s -> symbol.return_value | s -> symbol.based
			     | (s -> symbol.parameter & ^star_extents) | (s -> symbol.controlled & ^before_get_size)
			then d -> symbol.temporary = "1"b;
			else do;
				d -> symbol.allocate = "1"b;
				if s -> symbol.controlled & before_get_size
				then do;
					d -> symbol.controlled = "1"b;
					d -> symbol.descriptor = s;
				     end;
				else d -> symbol.auto = "1"b;
			     end;

			d -> symbol.aligned, d -> symbol.variable, d -> symbol.internal,
			     d -> symbol.arg_descriptor = "1"b;
			r = d -> symbol.reference;
		     end;
		else do;
			r = copy ((s -> symbol.descriptor));
			d = r -> reference.symbol;
		     end;
	     end;
	else do;
		if before_get_size
		then return (null);

		constant = "1"b;
		r = create_reference (null);
	     end;

	if star_extents & ^s -> symbol.return_value
	then do;
		d -> symbol.location = s -> symbol.location;
		d -> symbol.allocated = s -> symbol.allocated;

		if d -> symbol.allocated
		then q = declare_pointer (blk);
		else do;
			q = create_operator (param_desc_ptr, 3);
			q -> operand (1) = declare_temporary (pointer_type, 0, 0, null);
			q -> operand (2) = declare_constant$integer (fixed (d -> symbol.location, 31));
			q -> operand (3) = blk;
		     end;

		r -> reference.qualifier = q;
		d -> symbol.param_desc = "1"b;
		d -> symbol.auto = "0"b;
	     end;


/* call the builder to create the descriptor.	*/

	size, offset = 0;
	top_level = "1"b;
	first = null;

	call builder (s);

	if constant
	then do;
		d = declare_constant$desc (bit_image) -> reference.symbol;
		do while (first ^= null);
		     ptr_saver = first -> reference.symbol;
		     first -> reference.symbol = d;
		     first = ptr_saver;
		end;
	     end;
	else do;
		if s -> symbol.parameter & array_desc & st = null
		then if ^(before_get_size & s -> symbol.structure)
		     then d -> symbol.descriptor = declare_constant$desc (bit_image) -> reference.symbol;
		d -> symbol.c_word_size = size;
		d -> symbol.c_bit_size = size * bits_per_word;
	     end;

	d -> symbol.reference -> reference.units = 0;

	return (d -> symbol.reference);


/* Special entry point for making assignments to controlled descriptors
  at allocate time */

ctl:
     entry (cblk, stmnt, ps, loc, bit2) returns (ptr);
	actl = "1"b;
	before_get_size = "0"b;
	st = create_statement (null_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
	go to common;

/* Entry point for calls to declare_descriptor before all extents and bounds
   have been calculated by get_size */

param:
     entry (cblk, stmnt, ps, loc, bit2) returns (ptr);
	actl = "0"b;
	st = stmnt;
	before_get_size = "1"b;
	go to common;

/* routine to propagate star_extents bit upwards */

set_star:
     proc (pp);
	dcl     (pp, p, d)		 pointer;
	p = pp;

	do d = p -> symbol.son repeat d -> symbol.brother while (d ^= null);
	     call set_star (d);

	     p -> symbol.star_extents = p -> symbol.star_extents | d -> symbol.star_extents;
	     p -> symbol.exp_extents = p -> symbol.exp_extents | d -> symbol.exp_extents;
	end;

     end set_star;

/* subroutine to make a copy of a reference node only if offset|length|qual
   are non-null */

copy:
     proc (ref) returns (ptr);

	dcl     ref		 ptr,
	        p			 ptr;

	p = ref;

	if p -> reference.offset ^= null | p -> reference.length ^= null | p -> reference.qualifier ^= null
	then p = copy_expression ((p));

	return (p);

     end;

/* subroutine to build a descriptor and fill it in.	*/

builder:
     proc (pp);

	dcl     (p, q, b, sf, pp)	 ptr;
	dcl     (i, m, mdims, ndims, nbounds, type)
				 fixed bin (15);
	dcl     (cdcl, have_star)	 bit (1);

	p = pp;

	type = pl1_descriptor_type (substr (string (p -> symbol.attributes), 1, 36), (p -> symbol.c_dcl_size));

	offset = size;
	if offset ^= 0
	then r -> reference.units = word_;
	size = size + 1;

	if size > 512
	then call pl1_stat_$util_abort (28, s);

	desc.type = bit (fixed (type, 6), 6);
	desc.flag = "1"b;
	desc.packed = p -> symbol.packed | p -> symbol.explicit_packed;
/* the bit image made for parameters may have this bit incorrectly be "0"b */

/* Get number of bounds to process */

	ndims = 0;
	do sf = p repeat sf -> symbol.father while (sf ^= null & (array_desc | sf ^= s));
	     if sf -> symbol.array ^= null
	     then ndims = ndims + sf -> symbol.array -> array.own_number_of_dimensions;

	     if cross_section
	     then if sf = s
		then go to set_mdims;
	end;

set_mdims:
	if ndims > 15
	then call pl1_stat_$util_abort (492, s);

	mdims = ndims;

	if ndims ^= 0
	then desc.number_dims = bit (fixed (ndims, 4), 4);
	else desc.number_dims = "0"b;

	desc.size = "0"b;

/* fill in the size field of the descriptor.	*/

	if p -> symbol.char | p -> symbol.bit | p -> symbol.area | p -> symbol.float | p -> symbol.fixed
	     | p -> symbol.picture
	then desc.size = bit (fixed (p -> symbol.c_dcl_size, 24), 24);

	if p -> symbol.fixed
	then do;
		scale = p -> symbol.scale;
		if scale < 0
		then scale = scale + 1000000000000b;
		substr (desc.size, 1, 12) = bit (scale, 12);
	     end;

	if p -> symbol.structure
	then do;
		m = 0;
		q = p -> symbol.son;
		do while (q ^= null);
		     m = m + 1;
		     q = q -> symbol.brother;
		end;
		desc.size = bit (fixed (m, 24), 24);
	     end;

	if ^constant
	then do;
		cdcl, have_star = "0"b;
		if p -> symbol.dcl_size = null
		then cdcl = "1"b;
		else if p -> symbol.dcl_size -> node.type = token_node
		then if p -> symbol.dcl_size -> token.type = dec_integer
		     then do;
			     cdcl = "1"b;
			     desc.size = bit (fixed (token_to_binary ((p -> symbol.dcl_size)), 24), 24);
			end;
		     else have_star = p -> symbol.dcl_size -> token.type = asterisk;

		if (p -> symbol.bit | p -> symbol.char | p -> symbol.area) & ^cdcl
		then if star_extents
		     then do;
			     if have_star
			     then do;
				     q = create_operator (desc_size, 2);
				     q -> operand (2) = copy_expression ((r));
				     q -> operand (2) -> reference.c_offset = offset;
				     p -> symbol.dcl_size = q;

				     if ^p -> symbol.area & ^p -> symbol.varying
				     then p -> symbol.reference -> reference.length = q;
				end;

			     desc.size = (24)"1"b;
			end;
		     else do;
			     q = create_operator (make_desc, 3);
			     q -> operand (1) = d -> symbol.reference;
			     q -> operand (2) = declare_constant$desc (string (desc.bit_type));
			     if ^actl
			     then do;
				     q -> operand (3) = p -> symbol.dcl_size;
				     if controlled
				     then do;
					     p -> symbol.symtab_size = p -> symbol.dcl_size;
					     q = create_operator (desc_size, 2);
					     q -> operand (2) = copy_expression ((r));
					     q -> operand (2) -> reference.c_offset = offset;
					     p -> symbol.dcl_size = q;
					end;
				     else call assignf (q, offset);
				end;
			     else do;
				     q -> operand (3) = p -> symbol.symtab_size;
				     call assignf (q, offset);
				end;
			end;
		else if star_extents | (controlled & ^actl)
		then ;
		else call assignf (declare_constant$desc (basic_desc), offset);
	     end;

/* process the array attribute by putting the bounds and multipliers in the descriptor.	*/

	if ndims ^= 0
	then do;
		r -> reference.units = word_;
		sf = p;

/* In dimensioned structures the bound nodes get factored down when get_size
   (and thus get_array_size) gets called.  If the bounds have been factored
   down, number_of_dimensions tells us how many bounds get processed.  If
   they have not been factored down, we use the sum of own_number_of_dimensions
   for the element and each of its ancestors to determine how many bounds get
   processed.
*/


		do while (mdims > 0);

		     do while (sf -> symbol.array = null);
			sf = sf -> symbol.father;
		     end;

		     b = sf -> symbol.array -> array.bounds;

		     if before_get_size
		     then nbounds = sf -> symbol.array -> array.own_number_of_dimensions;
		     else nbounds = sf -> symbol.array -> array.number_of_dimensions;

		     sf = sf -> symbol.father;

		     do i = 1 to nbounds;
			size = size + 3;
			if size > 512
			then call pl1_stat_$util_abort (28, s);
			if ^constant & ^before_get_size
						/* before_get_size --> parameter --> bounds are either constant or * */
			then do;
				if b -> bound.lower = null
				then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
				if b -> bound.upper = null
				then b -> bound.upper = declare_constant$integer ((b -> bound.c_upper));
			     end;

			call do_lbound;
			offset = offset + 1;
			call do_hbound;		/* input here */
			offset = offset + 1;
			call do_mult;

			offset = offset + 1;
			b = b -> bound.next;
			mdims = mdims - 1;
			if mdims = 0
			then go to record_reference;
		     end;

		end;

	     end;

/* Record a reference to the descriptor either in the symbol node or in the array node.  */

record_reference:
	q = copy_expression ((r));
	q -> reference.c_offset = offset - ndims * 3;
	if offset = 0
	then q -> reference.units = 0;

	if p -> symbol.dimensioned & ^array_desc
	then if p -> symbol.array -> array.element_descriptor = null & top_level
	     then p -> symbol.array -> array.element_descriptor = q;
	     else ;
	else if p -> symbol.descriptor = null
	then p -> symbol.descriptor = q;


/* If this is a constant descriptor chain this reference so that its symbol ptr
   can be filled in when the symbol node is created. */

	if constant
	then do;
		q -> reference.symbol = first;
		first = q;
	     end;

/* If this is a structure call the builder to create descriptors for the members.
   The members descriptors are part of the structure's descriptor.  */

	if p -> symbol.structure
	then do;
		top_level = "0"b;

		do q = p -> symbol.son repeat q -> symbol.brother while (q ^= null);
		     call builder (q);
		end;
	     end;

do_lbound:
     procedure;

	declare lbound_constant	 bit (1) aligned;

	lbound_constant = "0"b;
	if star_extents
	then if b -> bound.lower -> node.type = token_node
	     then if b -> bound.lower -> token.type = dec_integer
						/* has to be that or * */
		then do;
			lbound_constant = "1"b;
			b -> bound.c_lower = token_to_binary ((b -> bound.lower));
		     end;
		else ;				/* not dec integer */
	     else lbound_constant = "1"b;		/* not token at all, error */

	lbound_constant = lbound_constant | constant;

	if lbound_constant
	then desc_image = b -> bound.c_lower;
	else if star_extents
	then do;
		unspec (desc_image) = star_bits;
		b -> bound.lower = copy_expression ((r));
		b -> bound.lower -> reference.c_offset = offset + 1;
	     end;
	else if controlled
	then if ^actl
	     then do;
		     if b -> bound.symtab_lower = null
		     then b -> bound.symtab_lower = b -> bound.lower;
		     if b -> bound.lower -> node.type = token_node
		     then if b -> bound.lower -> token.type = dec_integer
			then return;
		     b -> bound.lower = copy_expression ((r));
		     b -> bound.lower -> reference.c_offset = offset + 1;
		end;
	     else call assignf ((b -> bound.symtab_lower), offset + 1);
	else call assignf ((b -> bound.lower), offset + 1);

     end do_lbound;

do_hbound:
     procedure;

	declare hbound_constant	 bit (1) aligned;

	hbound_constant = "0"b;

	if star_extents
	then if b -> bound.upper -> node.type = token_node
	     then if b -> bound.upper -> token.type = dec_integer
						/* has to be that or * */
		then do;
			hbound_constant = "1"b;
			b -> bound.c_upper = token_to_binary ((b -> bound.upper));
		     end;
		else ;				/* not dec integer */
	     else hbound_constant = "1"b;		/* not token at all, error */

	hbound_constant = constant | hbound_constant;

	if hbound_constant
	then desc_image = b -> bound.c_upper;
	else if star_extents
	then do;
		unspec (desc_image) = star_bits;
		b -> bound.upper = copy_expression ((r));
		b -> bound.upper -> reference.c_offset = offset + 1;
	     end;
	else if controlled
	then if ^actl
	     then do;
		     if b -> bound.symtab_upper = null
		     then b -> bound.symtab_upper = b -> bound.upper;
		     if b -> bound.upper -> node.type = token_node
		     then if b -> bound.upper -> token.type = dec_integer
			then return;
		     b -> bound.upper = copy_expression ((r));
		     b -> bound.upper -> reference.c_offset = offset + 1;
		end;
	     else call assignf ((b -> bound.symtab_upper), offset + 1);
	else call assignf ((b -> bound.upper), offset + 1);

     end do_hbound;

do_mult:
     procedure;

	if star_extents
	then do;
		unspec (desc_image) = star_bits;
		if b -> bound.desc_multiplier = null
		then do;
			b -> bound.desc_multiplier, b -> bound.multiplier = copy_expression ((r));
			b -> bound.desc_multiplier -> reference.c_offset = offset + 1;
		     end;
	     end;
	else if constant
	then desc_image = b -> bound.c_desc_multiplier;
	else if controlled
	then if ^actl
	     then do;
		     b -> bound.desc_multiplier, b -> bound.multiplier = copy_expression ((r));
		     b -> bound.desc_multiplier -> reference.c_offset = offset + 1;
		end;
	     else call assignm ((b -> bound.symtab_multiplier), offset + 1);
	else call assignf ((b -> bound.desc_multiplier), offset + 1);
     end do_mult;
     end builder;

/* subroutine to make an assignment to a descriptor.	*/

assignf:
     proc (e, offset);

	dcl     (e, p, q, stp)	 ptr;
	dcl     offset		 fixed bin (15);

	stp = st;

common:
	p = create_operator (assign, 2);
	p -> operand (1) = copy_expression ((r));
	p -> operand (1) -> reference.c_offset = offset;
	q = copy_expression ((e));

	if s -> symbol.refer_extents
	then call refer_extent (q, loc);

	p -> operand (2) = q;

	if s -> symbol.based | s -> symbol.temporary | s -> symbol.position | s -> symbol.controlled
	     | s -> symbol.parameter | s -> symbol.return_value
	then do;
		if stp = null   /* Bug 1895: diagnose bad returns options */
		then do;
			if s -> symbol.reference -> reference.padded_ref
			then call pl1_stat_$util_abort (37,s);   /* in stmnt */
			else call pl1_stat_$util_abort (22,s);   /* in dcl */
		     end;
		q = create_statement (assignment_statement, (stp -> statement.back), null, (stp -> statement.prefix));
		q -> statement.root = expression_semantics (blk, q, p, "0"b);
	     end;
	else do;
		q = create_statement$prologue (assignment_statement, blk, null, (blk -> block.prefix));
		q -> statement.root = p;
		if cblk ^= blk
		then q -> statement.root = expression_semantics (cblk, q, (q -> statement.root), "0"b);
	     end;

	return;

/* Special entry point for generating multiplier assignments to controlled descriptors */

assignm:
     entry (e, offset);

	stp = stmnt;
	go to common;

     end assignf;

%include pl1_descriptor_type_fcn;

/* include files */

%include semant;
%include symbol;
%include array;
%include reference;
%include statement;
%include block;
%include operator;
%include statement_types;
%include op_codes;
%include system;
%include declare_type;
%include boundary;
%include nodes;
%include token;
%include token_types;
     end /* declare_descriptor */;
