/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure is called with an array of ptrs to symbol table nodes and a
   count of the nodes.  It does a Shell sort alphabetizing the entries on the
   basis of the string in the token pointed to by the symbol.

   Modified 20 Nov 1978 by David Spector to change symbol_list from 2000 to 3072.
   Modified 25 March 1980 by M. N. Davidoff so calling sequence does not depend on pl1_symbol_print's internal limit.
*/
/* format: style3 */
sym_sort_alphabetic:
     proc (symbol_list_ptr, nn);

dcl	symbol_list_ptr	ptr;
dcl	nn		fixed bin;

dcl	list		(nn) ptr based (symbol_list_ptr);

dcl	(d, i, j, k)	fixed bin;
dcl	(p, p1, p2)	ptr;
dcl	by_size		bit (1) aligned;

dcl	divide		builtin;

%include symbol;
%include token;

/* program */

	by_size = "0"b;
	goto start;

by_size:
     entry (symbol_list_ptr, nn);

	by_size = "1"b;

start:
	d = nn;

	do while (d > 1);
	     d = 2 * divide (d, 4, 15, 0) + 1;

	     do i = 1 to nn - d;
		k = i + d;
		p2 = list (k) -> symbol.token;

up:
		j = k - d;
		p1 = list (j) -> symbol.token;

		if by_size
		then do;
			if p1 -> token.size > p2 -> token.size
			then goto inter;
			if p1 -> token.size < p2 -> token.size
			then goto ok;
		     end;

		if p1 -> token.string <= p2 -> token.string
		then goto ok;

inter:
		p = list (j);
		list (j) = list (k);
		list (k) = p;

		if j > d
		then do;
			k = j;
			goto up;
		     end;

ok:
	     end;
	end;
     end sym_sort_alphabetic;
