/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
     install(89-07-31,MR12.3-1066):
     Removed the obsolete parameter source_line from the call to error_().
                                                   END HISTORY COMMENTS */


/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

parse_error:
     proc (error_number, error_ptr);

dcl      (error_number, n) fixed bin (15),
         pl1_stat_$source_seg fixed bin (11) ext static,
         source_seg fixed bin (8) init (0),
         sli fixed bin (15) init (0) int static,
         start fixed bin (23),
         length fixed bin (11),
         (error_ptr, s) ptr,
         text bit (1) aligned init ("0"b);

%include source_id;

dcl      (addr, binary, null, string) builtin;


dcl      pl1_stat_$cur_statement ptr ext static,
         pl1_stat_$source_ptr ptr ext static,
         pl1_stat_$st_start fixed bin (23) ext static,
         pl1_stat_$st_length fixed bin (17) ext static;


%include language_utility;
%include token_list;
%include statement;

/*      */

	text = "1"b;

no_text:
     entry (error_number, error_ptr);

	s = pl1_stat_$cur_statement;

	if text then do;
	     if s ^= null then do;
		string (source_id) = string (s -> statement.source_id);
		start = s -> statement.source.start;
		length = s -> statement.source.length;
		source_seg = s -> statement.source.segment;
	     end;
	     else do;
		string (source_id) = string (pl1_stat_$statement_id);
		start = pl1_stat_$st_start;
		length = pl1_stat_$st_length;
		source_seg = pl1_stat_$source_seg;
	     end;

	     call error_ (error_number, source_id, error_ptr, source_seg, start, length);
	end;

	else
	     call error_ (error_number, pl1_stat_$statement_id, error_ptr, source_seg, 0, 0);

     end parse_error;
