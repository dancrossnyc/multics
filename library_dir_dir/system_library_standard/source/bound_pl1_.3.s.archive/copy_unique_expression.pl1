/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


copy_unique_expression:   proc(qp) returns(ptr);

dcl	(arg,p,q,qp)	ptr;
dcl	(i,n)		fixed bin(15);
dcl	null		builtin;

%include nodes;
%include reference;
%include operator;
%include list;
%include language_utility;
%include op_codes;

	/* gets unique copy of processed tree (thus a unique value) */

	/* this program fails if subnodes of the tree (other than the
	   result of std_call and last element of a list) have reference
	   counts greater than 1 */

	q = qp;

	if q = null then return(q);

	if q -> node.type = reference_node
	   then do;
	        if q -> reference.shared & q -> reference.processed
		 then p = q;
		 else do;
		      p = create_reference(null);
		      p -> reference = q -> reference;
		      if ^ p -> reference.shared
			then p -> reference.ref_count = 1;
		      if p -> reference.qualifier ^= null
		         then p -> reference.qualifier = copy_unique_expression((p -> reference.qualifier));
		      if p -> reference.length ^= null
		         then p -> reference.length = copy_unique_expression((p -> reference.length));
		      if p -> reference.offset ^= null
		         then p-> reference.offset = copy_unique_expression((p -> reference.offset));
		      end;
	        return(p);
	        end;

	if q -> node.type = operator_node
	   then do;
	        n = q -> operator.number;
	        p = create_operator((q -> operator.op_code),n);
	        p -> operator = q -> operator;

	        do i = 1 to n;
		 p -> operand(i) = copy_unique_expression((p -> operand(i)));
	        end;

	        if p -> operator.op_code = std_call
		 then if p -> operand(3)^= null
		      then do;
			 arg = p -> operand(3) -> operand(2);
			 arg -> element(arg -> list.number) = p -> operand(1);
			 if p -> operand(1) ^= null
			    then p -> operand(1) -> reference.ref_count = 2;
			 end;

	        return(p);
	        end;

	if q -> node.type = list_node
	   then do;
	        p = create_list((q -> list.number));
	        p -> list = q -> list;

	        do i = 1 to p -> list.number - 1;
		 p -> element(i) = copy_unique_expression((p -> element(i)));
	        end;

	        return(p);
	        end;

	return(q);

	end;
