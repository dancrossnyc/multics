/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Print PL/I error messages.

   Initial Version: 14 June, 1968 by BLW
	Modified:	30 July 1969 by JDM for pl1 
	Modified:	10 January 1970 by CTC for new error message format 
         Rewritten:	17 August 1970 by P. Green for Version II
	Modified: 16 January 1971 by BLW to print text of bad statement 
	Modified:	13 February 1977 by RAB to fix 1577
	Modified: 770712 by PG to add pl1_severity_
	Modified 771020 by PG to fix 1677
	Modified 780807 by PG to permit char(256) tokens to be substituted for "$".
	Modified 23 October 1980 by M. N. Davidoff to fix 1977, an unitialized variable causes tokens to be quoted when
		they shouldn't be.
*/
/* format: style3 */
pl1_error_print:
     procedure;

/* parameter */

dcl	count		fixed bin (31);
dcl	error_number	fixed bin (15);
dcl	source_line	fixed bin (15);
dcl	source_seg	fixed bin (11);
dcl	start		fixed bin (31);
dcl	1 statement_id	like source_id;
dcl	token_pt		ptr;

/* automatic */

dcl	brief		bit (1) aligned;
dcl	console		bit (1) aligned;
dcl	error_messages	ptr;
dcl	head		char (261) varying;
dcl	message_length	fixed bin (21);
dcl	message_start	fixed bin (21);
dcl	no_message	bit (1) aligned;
dcl	sev		fixed bin;
dcl	source_pt		ptr;

/* based */

dcl	1 message_segment	aligned based (error_messages),
	  2 index_block	(0:500),
	    3 message_pointer
			fixed bin (15),		/* Pointer to start of message */
	    3 severity	fixed bin (15),		/* Severity level for this message */
	    3 len		fixed bin (15),		/* Number of characters in this message */
	  2 message_block	char (248000) unaligned;	/* Text for all messages */

/* builtin */

dcl	(hbound, lbound, length, max, maxlength, min, null, search, string, substr, verify)
			builtin;

/* entry */

dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);

/* external static */

dcl	cg_static_$debug	bit (1) aligned external static;
dcl	pl1_severity_	fixed bin (35) external static;
dcl	pl1_stat_$abort_label
			label external static;
dcl	pl1_stat_$brief_error_mode
			bit (1) aligned external static;
dcl	pl1_stat_$err_stm	ptr external static;
dcl	pl1_stat_$error_memory
			bit (504) aligned external static;
dcl	pl1_stat_$error_messages
			ptr external static;
dcl	pl1_stat_$error_width
			fixed bin external static;
dcl	pl1_stat_$greatest_severity
			fixed bin external static;
dcl	pl1_stat_$last_severity
			fixed bin (15) external static;
dcl	1 pl1_stat_$last_statement_id
			like source_id external static;
dcl	pl1_stat_$severity_plateau
			fixed bin external static;

%include token;
%include token_types;
%include token_list;
%include source_list;
%include source_id;
%include language_utility;

write_out:
     entry (error_number, statement_id, token_pt, source_seg, start, count, source_line);

	m = source_seg;

	if m > -1
	then source_pt = source.seg_ptr;
	else source_pt = null;

	pl1_stat_$error_width = min (pl1_stat_$error_width, maxlength (head));
	console = "1"b;
	goto begin;

listing_segment:
     entry (error_number, statement_id, token_pt);

	m = 0;
	pl1_stat_$error_width = 120;
	console = "0"b;

begin:
	error_messages = pl1_stat_$error_messages;
	brief = pl1_stat_$brief_error_mode | error_messages = null;
	sev = 2;
	no_message = "1"b;

	if error_messages ^= null
	then if lbound (message_segment.index_block, 1) <= error_number
		& error_number <= hbound (message_segment.index_block, 1)
	     then do;
		     message_start = message_segment.index_block (error_number).message_pointer;
		     message_length = message_segment.index_block (error_number).len;
		     no_message = message_start = -1;

		     if ^no_message
		     then sev = message_segment.index_block (error_number).severity;
		end;

	pl1_stat_$last_severity = sev;
	pl1_severity_, pl1_stat_$greatest_severity = max (pl1_stat_$greatest_severity, sev);

	if console
	then do;
		if sev >= pl1_stat_$severity_plateau
		then call print_message;

		pl1_stat_$err_stm = null;

		if sev > 3
		then goto pl1_stat_$abort_label;
	     end;
	else call print_message;

	return;

print_message:
     procedure;

dcl	inserted		bit (1) aligned;
dcl	scan_index	fixed bin (21);
dcl	word		char (261) varying;

	if sev = 1
	then call ioa_$rsnnl ("^/WARNING ^d", head, 0, error_number);

	else if sev = 4
	then call ioa_$rsnnl ("^/FATAL ERROR ^d", head, 0, error_number);

	else call ioa_$rsnnl ("^/ERROR ^d, SEVERITY ^d", head, 0, error_number, sev);

	if string (statement_id) ^= ""b & m > -1
	then do;
		word = decode_source_id (statement_id, "1"b);

		if substr (word, 1, 1) = "S"
		then head = head || " IN ";
		else head = head || " ON ";

		head = head || word;
	     end;

	if cg_static_$debug & pl1_stat_$err_stm ^= null
	then do;
		call ioa_$rsnnl (" (^p)", word, 0, pl1_stat_$err_stm);
		head = head || word;
	     end;

	call print_line (head);

	if console & (brief | substr (pl1_stat_$error_memory, error_number, 1))
	then do;
		if token_pt ^= null
		then call ioa_ ("^a", quote_token (token_pt));

		call print_source_statement;

		return;
	     end;

	else if no_message
	then return;

	substr (pl1_stat_$error_memory, error_number, 1) = "1"b;

/* Error message construction. */

	inserted = token_pt = null;
	scan_index = 1;
	head = "";
	do while (next_string ());
	     if ^inserted & substr (word, 1, 1) = "$"
	     then do;
		     word = quote_token (token_pt) || substr (word, 2);
		     inserted = "1"b;
		end;

	     if length (head) = 0
	     then head = word;

	     else if length (head) + 1 + length (word) <= pl1_stat_$error_width
	     then head = head || " " || word;
	     else do;
		     call print_line (head);
		     head = word;
		end;
	end;

	call print_line (head);

	if console
	then call print_source_statement;

	return;

/* Extract the next word from the current message. */

next_string:
     procedure returns (bit (1) aligned);

dcl	word_length	fixed bin (21);

dcl	message		char (message_length) defined (message_segment.message_block) position (message_start);

	word_length = verify (substr (message, scan_index), " ") - 1;
	if word_length < 0
	then return ("0"b);

	scan_index = scan_index + word_length;

	word_length = search (substr (message, scan_index), " ") - 1;
	if word_length < 0
	then word_length = length (substr (message, scan_index));

	word = substr (message, scan_index, word_length);
	scan_index = scan_index + word_length;

	return ("1"b);
     end next_string;

/* Quote a token if necessary. */

quote_token:
     procedure (p) returns (char (259) varying);

dcl	p		ptr;

dcl	type		bit (9) aligned;

	type = p -> token.type;

	if type = identifier | type = isub | type = char_string | (type & is_delimiter) = is_delimiter
	then return ("""" || p -> token.string || """");

	else if type = bit_string
	then return ("""" || substr (p -> token.string, 1, max (length (p -> token.string) - 1, 0)) || """b");

	else return (p -> token.string);
     end quote_token;

print_source_statement:
     procedure;

dcl	1 segment		aligned based (source_pt),
	  2 spacer	char (start) unaligned,
	  2 line		char (count) unaligned;

	if brief | source_pt = null | string (statement_id) = ""b
	     | string (statement_id) = string (pl1_stat_$last_statement_id) | count <= 0 | start < 0
	then return;

	string (pl1_stat_$last_statement_id) = string (statement_id);
	call ioa_ ("SOURCE:^-^a", segment.line);
     end print_source_statement;

print_line:
     procedure (line);

dcl	line		char (*) varying;

	if console
	then call ioa_ ("^a", line);
	else call pl1_print$varying_nl (line);
     end print_line;

     end print_message;

     end pl1_error_print;
