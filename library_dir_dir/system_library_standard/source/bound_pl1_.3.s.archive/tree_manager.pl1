/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	This procedure and entries manage the multiple segments used for free
   storage by the pl1 and fortran compilers.			*/

/*	Extensively rewritten to use standard no-free areas for the
compiler's own storage and thus eliminate the compiler's use of
the "rename" option in April,1976 by RHS.

	Modified:	4 May 1977 by RAB for new release_area_ protocol	*/

tree_manager$init: proc (abort_label_par);

dcl  abort_label_par label;

dcl  abort_label label internal static;

dcl  pl1_stat_$condition_index fixed bin (31) ext static,
     pl1_stat_$root ptr ext static,
     pl1_stat_$free_ptr (18) ptr ext static;

dcl  sys_info$max_seg_size ext static fixed bin (35);

dcl  i fixed bin (17);
dcl  code fixed bin (35);


dcl  first_time bit (1) aligned internal static init ("1"b);

dcl (null, addr, ptr, substr, unspec) builtin;


dcl  define_area_ external entry (ptr, fixed bin (35)),
     release_area_ external entry (ptr),
     ioa_ entry options (variable);

%include area_info;
%include pl1_tree_areas;

dcl 1 my_area_info like area_info internal static;


%include token_list;
%include source_list;

	abort_label = abort_label_par;		/* Where to go if call to define or release_area fails. */

	if pl1_stat_$tree_area_ptr ^= null
	then call release_area_ (pl1_stat_$tree_area_ptr);

	if pl1_stat_$xeq_tree_area_ptr ^= null
	then call release_area_ (pl1_stat_$xeq_tree_area_ptr);


	if first_time
	then do;
	     unspec (my_area_info) = "0"b;
	     my_area_info.version = 1;
	     my_area_info.extend = "1"b;
	     my_area_info.no_freeing = "1"b;
	     my_area_info.owner = "pl1";
	     my_area_info.size = sys_info$max_seg_size;
	     first_time = "0"b;
	end;


	my_area_info.areap = null;

	call define_area_ (addr (my_area_info), code);

	if code ^= 0
	then goto call_failed;

	pl1_stat_$tree_area_ptr = my_area_info.areap;

	allocate source_list in (tree_area) set (pl1_stat_$source_list_ptr);

	allocate token_list in (tree_area) set (pl1_stat_$token_list_ptr);

	my_area_info.areap = null;

	call define_area_ (addr (my_area_info), code);

	if code ^= 0
	then goto call_failed;

	pl1_stat_$xeq_tree_area_ptr = my_area_info.areap;

tr:
	do i = 1 to 18;
	     pl1_stat_$free_ptr (i) = null;
	end;

	pl1_stat_$condition_index = 0;

	return;

call_failed:
	call ioa_ ("Compiler failed in allocating temporary storage.");
	goto abort_label;

tree_manager$truncate: entry;

	pl1_stat_$root = null;
	if pl1_stat_$tree_area_ptr ^= null
	then call release_area_ (pl1_stat_$tree_area_ptr);
	if pl1_stat_$xeq_tree_area_ptr ^= null
	then call release_area_ (pl1_stat_$xeq_tree_area_ptr);

	goto tr;

     end;
