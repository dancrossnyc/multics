/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

create_operator:
	proc(type,n) returns(ptr) ;

/*	this procedure allocates and initializes an operator node. */
/*	Modified on:	10 August 1970 by P. Green for Version II */

/*	Modified on:	April 1977 by RHS for new allocation methods */

dcl	type bit(9) aligned,
	(i,n,nodetype) fixed bin(15),
	p ptr;

dcl	pl1_stat_$free_ptr(18) ptr ext static;

dcl	null builtin;
dcl	pl1_stat_$node_uses(32) fixed bin ext;

%include pl1_tree_areas;
%include operator;
%include nodes;

	if n=2
	then	nodetype = fixed(list_node,15,0);
	else	nodetype = fixed(operator_node,15,0);

	if (n=2 | n=3) & pl1_stat_$free_ptr(nodetype)^=null
	then do;
		p = pl1_stat_$free_ptr(nodetype);
		pl1_stat_$free_ptr(nodetype) = p->operator.operand(1);
	end;
	else do;
	     pl1_stat_$node_uses(3) = pl1_stat_$node_uses(3) + 1;
	     allocate operator in(xeq_tree_area) set(p);
	     end;

	p->operator.node_type = operator_node;
	p->operator.number=n;
	p->operator.op_code=type;
	p->operator.shared,
	p->operator.processed,
	p->operator.optimized = "0"b;
	do i=1 to n;
		p->operator.operand(i)=null;
	end;
	return(p);
	end create_operator;
