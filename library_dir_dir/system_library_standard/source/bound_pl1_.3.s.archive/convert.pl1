/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 780427 by PG to get ready for unsigned */
/* Modified 790419 by PCK to implement 4-bit decimal */
/* Modified 790840 by PCK to fix 1791 */
/* Modified 800103 by RAB to fix 1680 in which passing a label constant as arg
   sometimes fails. */
/* Modified 830509 BIM to check explicit_packed as part of alignment. ycch. */

convert: 	proc (tree, bv_target_type) returns (ptr);

/* parameters */

dcl	(tree ptr,
	bv_target_type bit (36) aligned) parameter;

/* automatic */

dcl	(p,r,target_ref,target,input,output,inlength,tlength,return_tree) ptr,
	(pointer1,pointer2) (32) ptr aligned,
	(m, n, svprec) fixed bin;

dcl	(alignment_ok, known, sign_type_ok, validate_bit) bit(1) aligned, 
	long_bit bit(1) aligned init("0"b),
	target_must_be_integer bit(1) aligned init("0"b),
	keep_full_precision bit(1) aligned init("0"b),
	suppress_bit bit(1) aligned init("1"b),
	varying_input bit(1) aligned init("0"b),
	varying_result bit(1) aligned init("0"b);

dcl	1 itype like type;
dcl	1 otype like type;
dcl	1 inpicture like type;
dcl	1 tpicture like type;

/* based */

dcl	value1 bit(2304) aligned based(addr(pointer1(1)));
dcl	value2 bit(2304) aligned based(addr(pointer2(1)));
dcl	char_target char(outclength) based aligned;
dcl	bit_target bit(outclength) based aligned;

/* builtin */

dcl	(null,binary,addr,bit,divide,fixed,sign,min,max,abs,log10,string,substr,ceil) builtin;

/* conditions */

dcl	(conversion,fixedoverflow,overflow,underflow,size,stringsize) condition;

/* defined */

dcl	defined_itype bit (36) defined (itype);
dcl	defined_otype bit (36) defined (otype);

/* entries */

dcl	(pl1_stat_$util_abort, pl1_stat_$util_error) variable external static entry(fixed bin, ptr);

/* external static */

dcl	pl1_stat_$cur_statement ptr ext static;

/* internal static */

dcl	plain_desc_type (46) fixed bin int static /* map descriptor types ignoring precision, varying, unsigned attributes */
		init (	1, 1, 3, 3, 5, 5, 7, 7, 9, 10, 11, 12,
			13, 14, 15, 16, 17, 18, 19, 19, 21, 21, 23, (9)0, 1, 1, (8)0, 9, 10, 11, 12);

dcl	simplify_for_message (0:46) fixed bin int static initial (10, (12)1, 4, 5, 7, 8, 10, 6, 2, 2, 3, 3, 9,
	(9)0, 1, 1, (8)0, (4)1);	/* maps descriptor types into subscripts for message array, below. */

/* The values of the simplify array, and the subscripts into the message array, are assigned as follows:
	1 = arithmetic	6 = area
	2 = bit		7 = label
	3 = char		8 = entry
	4 = ptr		9 = file
	5 = offset	10 = structure or undefined
*/

dcl	message (9, 9) fixed bin int static init (
					   0,-234,-234, 231, 231, 249, 229, 223, 251,
					-236,   0,-487, 231, 231, 249, 229, 223, 251,
					-236,-489,   0, 231, 231, 249, 229, 223, 251,
					 227, 225, 225,   0,   0, 249, 229, 223, 251,
					 227, 225, 225,   0,   0, 249, 229, 223, 251,
					 227, 225, 225, 231, 231,   0, 229, 223, 251,
					 227, 225, 225, 231, 231, 249,   0, 223, 251,
					 227, 225, 225, 231, 231, 249, 229,   0, 251,
					 227, 225, 225, 231, 231, 249, 229, 223,   0);

/* program */

	suppress_bit = "0"b;
	go to start;

to_integer:
	entry (tree, bv_target_type) returns (ptr);

	target_must_be_integer = "1"b;
	suppress_bit = "0"b;

from_builtin:
	entry (tree, bv_target_type) returns (ptr);

start:
	validate_bit = "0"b;
	known = "0"b;
	outscale_prec = 0;
	tlength = null;
	string (otype) = bv_target_type & convert_mask;
	string (inpicture) = "0"b;
	string (tpicture) = "0"b;
	go to common;

validate:	entry(tree,target_ref);

	suppress_bit = "0"b;
	validate_bit="1"b;
	goto meet;

to_target_fb:	entry(tree,target_ref) returns(ptr);

	validate_bit = "0"b;
	keep_full_precision = "1"b;
	goto meet;

to_target:	entry(tree,target_ref) returns(ptr);

	suppress_bit  ,
	validate_bit="0"b;

		/*   the second argument is a reference_node,
		     get output type and other output attributes,
		     therefore   the known bit is on     */
meet:
	known = "1"b;

	/* initialize important vars, just in case */

	outscale_prec = 0;
	tlength = null;

	string (inpicture) = "0"b;
	string (tpicture) = "0"b;
	if target_ref = null then call print(248);
	if target_ref->node.type ^= reference_node then call print(248);

	target = target_ref->reference.symbol;

	if target->node.type=label_node
	then do;
		defined_otype = label_mask;
		goto common;
	end;

	if target->symbol.bit | target->symbol.char | target->symbol.picture
	then do;
		tlength = target_ref->reference.length;
		outclength = target_ref->reference.c_length;

		if target_ref->reference.varying_ref
		then do;
			known = "0"b;
			varying_result = "1"b;
		end;
	end;

	else
	if target->symbol.fixed | target->symbol.float
	then do;
		tlength = null;
		outprec = target->symbol.c_dcl_size;
		outscale = target->symbol.scale;
	end;

	else
	if target->symbol.arg_descriptor
	then do;
		tlength = null;
		outprec = default_fix_bin_p;
		outscale = 0;
		defined_otype = integer_type;
		goto common;
	end;

	string (otype) = substr (string (target -> symbol.attributes), 1, 36) & convert_mask;

	if target->symbol.picture
	then do;
		string(tpicture) = string(otype);

		if target->symbol.pix.pic_char
		then	defined_otype = defined_otype & ^picture_mask | char_mask;
		else do;
			defined_otype = defined_otype & ^picture_mask  & ^unaligned_mask | aligned_mask | decimal_mask;

			outprec = target->symbol.pix.pic_size;

			if ^target->symbol.complex
			then	defined_otype = defined_otype | real_mask;

			if target->symbol.pix.pic_fixed
			then do;
				defined_otype = defined_otype | fixed_mask;
				outscale = target->symbol.pix.pic_scale;
			end;
			else	defined_otype = defined_otype | float_mask;
		end;
	end;

		/*   get input type and other input attributes   */

common:
	outtype = pl1_descriptor_type(defined_otype,(outprec));
	inlength = null;
	inscale_prec = 0;
	if tree = null then call print(248);

	if tree->node.type = token_node then go to token_input;

	if tree->node.type = operator_node
	then	r = tree->operator.operand(1);
	else	r = tree;

	if r = null then call print(248);

	if r->node.type = label_node
	then	if outtype = label_dtype
		then	if validate_bit
			then	return;
			else	goto assign_it;
		else	call print(message(7,simplify_for_message(outtype)));

	if r->node.type ^= reference_node then call print(248);

/* The input is a reference or an operator. */

	input = r->reference.symbol;
	if input->node.type=label_node
	then do;
		intype = label_dtype;
		goto meet2;
	end;

	if input->symbol.fixed | input->symbol.float
	then do;
		inprec = input->symbol.c_dcl_size;
		inscale = input->symbol.scale;
	end;

	if input->symbol.bit | input->symbol.char | input->symbol.picture
	then	if r->reference.varying_ref
		then do;
			varying_input = "1"b;
			inclength = 0;
			inlength = create_operator(length_fun,2);
			inlength->operator.processed = "1"b;
			inlength->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
			inlength->operand(2) = tree;
		end;
		else do;
			inclength = r->reference.c_length;
			inlength = r->reference.length;
		end;

	if input->symbol.arg_descriptor
	then do;
		inlength = null;
		inprec = default_fix_bin_p;
		inscale = 0;
		defined_itype = integer_type;
	end;
	else	defined_itype = substr (string (input -> symbol.attributes), 1, 36);

	if input->symbol.picture
	then do;
		string(inpicture) = string(itype);

		if input->symbol.pix.pic_char
		then	defined_itype = defined_itype & ^picture_mask | char_mask;
		else do;
			defined_itype = defined_itype & ^picture_mask & ^unaligned_mask | aligned_mask | decimal_mask;

			inprec = input->symbol.pix.pic_size;

			if ^input->symbol.complex
			then	defined_itype = defined_itype | real_mask;

			if input->symbol.pix.pic_fixed
			then do;
				defined_itype = defined_itype | fixed_mask;
				inscale = input->symbol.pix.pic_scale;
			end;
			else	defined_itype = defined_itype | float_mask;
		end;
	end;

	intype = pl1_descriptor_type(defined_itype,(inprec));

/* check the legality of this attempted conversion. */

meet2:
	if validate_bit & plain_desc_type(intype)=plain_desc_type(outtype)
	then return;

	if simplify_for_message(intype)>9 then call pl1_stat_$util_abort(130,input);
	if simplify_for_message(outtype)>9 then call pl1_stat_$util_abort(136,null);

	if intype ^= outtype
	then do;
		m = message(simplify_for_message(intype),simplify_for_message(outtype));

		if m ^= 0
		then if ^otype.char | string (inpicture) = "0"b
		     then call print (m);
	     end;

	if validate_bit
	then return;

/* If input and output are identical no conversion is done. */

	if otype.bit | otype.char
	then do;
		alignment_ok = "1"b;
		sign_type_ok = "1"b;
	     end;
	else do;
		alignment_ok = ((itype.aligned = otype.aligned) | (itype.unaligned = otype.unaligned)) & (itype.explicit_packed = otype.explicit_packed);
		sign_type_ok = itype.unsigned = otype.unsigned;

		if alignment_ok
		then do;
			otype.aligned = itype.aligned;
			otype.unaligned = itype.unaligned;
		     end;

		if sign_type_ok
		then otype.unsigned = itype.unsigned;
	     end;

	if known
	then	if intype=outtype & inprec=outprec & inscale=outscale & inlength=tlength & alignment_ok & sign_type_ok
		| otype.char & inprec=outprec & string(inpicture)^="0"b
		then do;
			return_tree = tree;
			goto ret;
		end;
		else go to assign_it;
	else do;
		if plain_desc_type(intype) = plain_desc_type(outtype) & alignment_ok & sign_type_ok
		then do;
			return_tree = tree;

			if target_must_be_integer
			&  inscale^=0
			then do;
				outprec = max(inprec-inscale,1);
				outscale = 0;

				goto assign_it;
			end;

			goto ret;
		end;

		if otype.char
		&  string(inpicture)^="0"b
		then do;
			return_tree = tree;
			goto ret;
		end;

		call get_target_size;

		if target_must_be_integer
		&  outscale^=0
		then do;
			outprec = min(max(outprec-outscale,1),max_p_fix_bin_1);
			outscale = 0;
		end;

		go to assign_it;
	end;

/* The input is a token.  It will be converted to conform to the target. If the target
   size is known it is used, otherwise the language rules are used to determine the size.
   If the target is a variable length string an assignment is generated.  All constants
   are declared by calls to declare_constant.	*/

token_input:
	if (string (otype) & computational_mask) = ""b
	then	call pl1_stat_$util_abort(246,tree);	/* target isn't computational */

	if (tree->token.type & is_constant)="0"b
	then	call print(247);

	on conversion, overflow, underflow, fixedoverflow call print(252);
	on size call print(442);
	on stringsize call print(-192);

	inclength = tree->token.size;

	/* The input token is either bit, char, or arithmetic. */

	if tree->token.type=bit_string
	then do;					/* BIT */
		intype=bit_dtype;
		if inclength ^= 0 then inclength = inclength - 1;
		if tree->token.string="b"		/* null bit-string */
		then	tree = create_token("",bit_string);
	end;

	else
	if tree->token.type=char_string
	then	intype = char_dtype;		/* CHAR */

	else do;					/* ARITHMETIC */
		call char_to_numeric_(addr(value1),intype,inscale_prec,addr(tree->token.string),(inclength));
		intype = divide(intype,2,15,0);
	end;

	if ^known
	then call get_target_size;
	else if ^target -> symbol.picture & otype.decimal & ^keep_full_precision
	     then call get_target_size;

	if target_must_be_integer
	&  inscale^=0
	&  intype ^= char_dtype	/* inscale overlays inclength */
	&  intype ^= bit_dtype	/* .. */
	then do;
		outprec = min(max(outprec-outscale,1),max_p_fix_bin_1);
		outscale = 0;
	end;

	outtype = pl1_descriptor_type (defined_otype, (outprec));	/* in case outprec changed */

	/* Now do the assignment. There are three cases...char, bit, or arithmetic */

	if otype.char				/* CHAR TARGET */
	then do;
		if tree->token.type & is_arith_constant
		then do;
			call print(-234);

			if outclength > characters_per_double & known
			then do;
				svprec = outclength;
				call get_target_size;
				long_bit = "1"b;
			end;

			call assign_(addr(value2),outtype*2,(outclength),addr(value1),intype*2,inscale_prec);

			addr(value1)->char_target  = addr(value2)->char_target;
		end;
		else

		if tree->token.type = bit_string
		then do;
			n = tree -> token.size;
			if n ^= 0 then n = n - 1;
			if outclength > characters_per_double & known
			then do;
				svprec = outclength;
				outclength = n;
				long_bit = "1"b;
			end;
(stringsize):		addr(value1)->char_target = substr(tree->token.string,1,n);

			call print(-487);
		end;

		else
		if tree->token.type = char_string
		then do;
			if outclength > characters_per_double & known
			then do;
				svprec = outclength;
				outclength = tree->token.size;
				long_bit = "1"b;
			end;
(stringsize):		addr(value1)->char_target = tree->token.string;
		end;
	end;
	else

	if otype.bit				/* BIT TARGET */
	then do;
		if tree->token.type & is_arith_constant
		then do;
			call print(-234);

			if outclength > bits_per_double & known
			then do;
				svprec = outclength;
				call get_target_size;
				long_bit = "1"b;
			end;

			call assign_(addr(value2),outtype*2,(outclength),addr(value1),intype*2,inscale_prec);

			addr(value1)->bit_target = addr(value2)->bit_target;
		end;

		else
		if tree->token.type=bit_string
		then do;
			n = tree -> token.size ;
			if n ^= 0 then n = n - 1;
			if outclength > bits_per_double & known
			then do;
				svprec = outclength;
				outclength = n;
				long_bit = "1"b;
			end;
(stringsize):		addr(value1)->bit_target = bit(substr(tree -> token.string,1,n));
		end;

		else
		if tree->token.type=char_string
		then do;
			if outclength > bits_per_double & known
			then do;
				svprec = outclength;
				outclength = tree->token.size;
				long_bit = "1"b;
			end;
(stringsize):		addr(value1)->bit_target = bit(tree->token.string);

			call print(-489);
		end;
	end;
	else do;					/* ARITHMETIC TARGET */
		if (tree -> token.type & is_arithmetic_constant) ^= is_arithmetic_constant
		then call print(-236);

		call assign_(addr(value1),outtype*2+binary(otype.unaligned,1),outscale_prec,
			addr(tree->token.string),char_dtype*2,(tree->token.size));
	end;

	if tlength^=null | long_bit
	then do;

		/* declare the string constant and then assign it */

		tree = declare_constant(value1,(defined_otype),(outclength),0);
		if long_bit then outprec = svprec;
		go to assign_it;
	end;

	if varying_result
	then	if target->symbol.dcl_size=null
		then	outclength = min(outclength,target->symbol.c_dcl_size);

	tree  ,
	return_tree = declare_constant(value1,(defined_otype),(outprec),(outscale));

	if varying_result
	then	if target->symbol.dcl_size^=null
		then	goto assign_it;

	goto ret;

/* This conversion must be done at runtime */

assign_it:
	if target_must_be_integer
	then	outprec = max(min(outprec,max_p_fix_bin_1),1);

	output = create_operator(assign,2);
	if otype.bit | otype.char
	then	output->operand(1) = declare_temporary((defined_otype),outclength,0,tlength);
	else	output->operand(1) = declare_temporary((defined_otype),(outprec),(outscale),tlength);

	output->operand(2) = tree;
	output->operator.processed = "1"b;

	if varying_result
	then do;
		output->operand(1) = copy_expression(output->operand(1));

		output->operand(1)->reference.c_length = min(outclength,target->symbol.c_dcl_size);

		if target->symbol.dcl_size^=null
		then do;
			r = create_operator(min_fun,3);
			r->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
			r->operand(2) = copy_expression(target->symbol.dcl_size);
			r->operand(2) = expression_semantics((target->symbol.block_node),pl1_stat_$cur_statement,(r->operand(2)),"0"b);
			r->operand(2) = convert$to_integer((r->operand(2)),integer_type);
			if target->symbol.refer_extents
			then	r->operand(2) = fill_refer((r->operand(2)),(target_ref->reference.qualifier),"1"b);
			r->operand(3) = declare_constant$integer((outclength));

			output->operand(1)->reference.length = r;
			output->operand(1)->reference.c_length = 0;
		end;
	end;

	return_tree = output;

ret:
	if string(inpicture) ="0"b & string(tpicture) ="0"b
	then	return(return_tree);

	if string(inpicture)^="0"b
	&  string(tpicture)^="0"b
	then do;
	    	if return_tree->node.type=operator_node
		then	if return_tree->operator.op_code=pack
			then	return(return_tree);

		if ^ itype.char	/* input is not a character picture */
		 & target->symbol.general->reference.symbol->symbol.initial
		   = input->symbol.general->reference.symbol->symbol.initial
		then	return(return_tree);
	end;

	if string(inpicture)^="0"b	/*   input is a picture   */
	& ^itype.char	/*   input is not a pic char   */
	& ^otype.char	/*   output is not a character string or pic char   */
	then do;
		output = create_operator(unpack,2);
		output->operand(1) = declare_temporary((defined_itype & undesirable_mask),(inprec),(inscale),null);
		output->operator.processed = "1"b;

		if return_tree->node.type=operator_node
		then	if return_tree->operator.op_code^=std_call
			then do;				/* must be convert-created assign */
				output->operand(2) = return_tree->operand(2);
				return_tree->operand(2) = output;
			end;
			else do;
				output->operand(2) = return_tree;
				return_tree = output;
			end;
		else do;
			output->operand(2) = return_tree;
			return_tree = output;
		end;
	end;

	if string(tpicture) ^= "0"b
	then do;
		output = create_operator(pack,2);
		p = target->symbol.general->reference.symbol->symbol.initial;
		output->operand(1) = declare_picture_temp(p->picture_image.chars,
			(p->picture_image.scalefactor),
			(tpicture.complex),
			(tpicture.unaligned));

		output->operand(2) = return_tree;
		output->operator.processed = "1"b;

		return_tree = output;
	end;

	return(return_tree);

/* subroutine to issue diagnostics.	*/

print: proc(m);

dcl	symbol ptr;
dcl	m fixed bin;

	symbol = null;

	if tree=null then goto print_;

	if tree->node.type^=reference_node
	&  tree->node.type^=token_node
	then	goto print_;

	if tree->node.type=reference_node
	then	if tree->reference.symbol->symbol.dcl_type=by_compiler then goto print_;

	m = m+1;
	symbol = tree;

print_:
	if m > 0
	then	call pl1_stat_$util_abort(m,symbol);
	else	if ^suppress_bit
		then	call pl1_stat_$util_error(-m,symbol);

	end print;

/* subroutine to determine the target size, prec, and scale. */

get_target_size: proc;

/* automatic */

dcl	(oprec, oscale) fixed bin(15);

/* internal static */

/* The following array maps descriptor type codes into indexes into the action_index matrix. */

dcl	simplify (46) fixed bin int static initial (1, 1, 2, 2, 1, 1, 2, 2, 3, 4, 3, 4, 5, 6, 7, 8, 9, 10,
	11, 11, 12, 12, 13, (9)0, 1, 1, (8)0, 3, 4, 3, 4);

/* The following matrix maps combinations of source type and target type into an action index.
   The values of the simplify matrix correspond to the subscripts of action_index, and are assigned
   as follows:
	1 = fixed bin	8 = entry
	2 = float bin	9 = structure
	3 = fixed dec	10 = area
	4 = float dec	11 = bit
	5 = ptr		12 = char
	6 = offset	13 = file
	7 = label
*/

dcl	action_index(13,13) fixed bin(15) int static initial(
		20, 1, 3, 2, 0, 0, 0, 0, 0, 0, 4, 5, 0,
		22,20, 0,11, 0, 0, 0, 0, 0, 0,12,13, 0,
		 8, 6,20, 7, 0, 0, 0, 0, 0, 0, 9,10, 0,
		21,14,22,20, 0, 0, 0, 0, 0, 0,15,16, 0,
		 0, 0, 0, 0,20,20, 0, 0, 0, 0, 0, 0, 0,
		 0, 0, 0, 0,20,20, 0, 0, 0, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0,
		17,19,18,18, 0, 0, 0, 0, 0, 0,20,20, 0,
		17,19,18,18, 0, 0, 0, 0, 0, 0,20,20, 0,
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,20);

/* program */

	go to action (action_index (simplify (intype), simplify (outtype)));

action(0):					/* conversion error */
	if known then goto exit;			/* It is not an error if the known bit is on */

						/* bin float -> dec fixed */
	call print(261);

action(1):					/* bin fixed -> bin float */
	outprec = min(inprec,max_p_flt_bin_2);
	go to exit;

action(2):					/* bin fixed -> dec float */
	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec);
	go to exit;

action(3):					/* bin fixed -> dec fixed */
	outprec = min(fixed(ceil(inprec/3.32e0))+1,max_p_dec);
	outscale = fixed(ceil(inscale/3.32e0));
	go to exit;

action(4):					/* bin fixed -> bit */
	outprec = min(max_p_fix_bin_2,max(inprec-inscale,0));
	go to exit;

action(5):					/* bin fixed -> char */
	outprec = min(fixed(ceil(inprec/3.32e0))+1,max_p_dec)+3;
	outscale = fixed(ceil(abs(inscale)/3.32e0))*sign(inscale);
	if outscale<0 | outscale>outprec
		then outprec = outprec+fixed(log10(abs(outscale)))+1;
	outscale = 0;
	if itype.complex then outprec = outprec*2+1;
	go to exit;

action(6):					/* dec fixed -> bin float */
	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_flt_bin_2);
	go to exit;

action(7):					/* dec fixed -> dec float */
	outprec = inprec;
	go to exit;

action(8):					/* dec fixed -> bin fixed */
	oprec = min(fixed(ceil(inprec*3.32e0))+1,max_p_fix_bin_2);
	oscale = fixed(ceil(inscale*3.32e0));
	if oscale < min_scale | oscale > max_scale
	then	if target_must_be_integer & oscale > 0
		then oscale = oprec - ((fixed(ceil(inprec*3.32e0))+1) - fixed(ceil(abs(inscale)*3.32e0)));
		else call print(479);
	outprec = oprec;
	outscale = oscale;
	go to exit;

action(9):					/* dec fixed -> bit */
	outprec = min(max_p_fix_bin_2,max(fixed(ceil((inprec-inscale)*3.32e0)),0));
	go to exit;

action(10):					/* dec fixed -> char */
	outprec = inprec+3;
	if inscale<0 | inscale>inprec
		then outprec = outprec+fixed(log10(abs(inscale)))+1;
	if itype.complex then outprec = outprec *2 +1;
	go to exit;

action(11):					/* bin float -> dec float */
	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec);
	go to exit;

action(12):					/* bin float -> bit */
	outprec = min(inprec,max_p_fix_bin_2);
	go to exit;

action(13):					/* bin float -> char */
	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec) + 7;
	if itype.complex then outprec = outprec*2+1;
	go to exit;

action(14):					/* dec float -> bin float */
	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_flt_bin_2);
	go to exit;

action(15):					/* dec float -> bit */
	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_fix_bin_2);
	go to exit;

action(16):					/* dec float -> char */
	outprec = inprec+7;
	if itype.complex then outprec = outprec*2+1;
	go to exit;

action(17):					/* bit or char -> fixed bin */
	outprec = max_p_fix_bin_2;
	go to exit;

action(18):					/* bit or char -> fixed or float dec */
	outprec = max_p_dec;
	go to exit;

action(19):					/* bit or char -> float bin */
	outprec = max_p_flt_bin_2;
	go to exit;

action(20):					/* bit or char -> bit or char  any copy */
	outprec = inprec;
	outscale = inscale;

	if varying_input
	then do;
	     tlength = inlength;
	     tlength -> operand(2) = share_expression(tree);
	     end;
	else tlength = share_expression(inlength);
	go to exit;

action(21):					/* dec float -> bin fixed */
	outprec = min(fixed(ceil(inprec*3.32e0)) + 1,max_p_fix_bin_2);
	outscale = 0;
	go to exit;

action(22):					/* bin float -> bin fixed */
						/* dec float -> dec fixed */
	outprec = inprec;
	outscale = 0;

exit:

	end get_target_size;

%include pl1_descriptor_type_fcn;

%include semant;
%include picture_image;
%include declare_type;
%include desc_dcls;
%include std_descriptor_types;
%include mask;
%include nodes;
%include op_codes;
%include operator;
%include pl1_symbol_type;
%include reference;
%include symbol;
%include system;
%include token;
%include token_types;
	end convert;
