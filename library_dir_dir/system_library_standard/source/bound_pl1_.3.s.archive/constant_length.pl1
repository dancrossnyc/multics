/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Check to see if the length argument is equal to a constant	*/

constant_length:
     procedure (P_tree, P_constant_value) returns (bit (1) aligned);

/* parameter */

dcl	(
	P_tree		ptr,
	P_constant_value	fixed bin (71)
	)		parameter;

/* automatic */

dcl	tree		ptr;

/* builtins */

dcl	null		builtin;

/* program */

	tree = P_tree;

	if tree -> reference.length = null
	then do;
		if tree -> reference.c_length ^= P_constant_value
		then return ("0"b);

		return ("1"b);
	     end;

	if tree -> reference.length -> node.type = operator_node
	then if tree -> reference.length -> operator.op_code = range_ck
	     then if tree -> reference.length -> operand (2) -> node.type = reference_node
		then if tree -> reference.length -> operand (2) -> reference.symbol -> symbol.constant
		     then if constant_value ((tree -> reference.length -> operand (2) -> reference.symbol))
			     ^= P_constant_value
			then return ("0"b);
			else return ("1"b);

	return ("0"b);

/* get the initial value of a fixed binary variable with a scale factor of zero */

constant_value:
     procedure (sym_ptr) returns (fixed bin (71));

/* parameter */

dcl	sym_ptr		ptr;

/* based */

dcl	integer_1		based fixed bin (35);
dcl	integer_2		based fixed bin (71);

/* automatic */

dcl	initial_value	fixed bin (71);

	if sym_ptr -> symbol.c_dcl_size > max_p_fix_bin_1
	then initial_value = sym_ptr -> symbol.initial -> integer_2;
	else initial_value = sym_ptr -> symbol.initial -> integer_1;

	return (initial_value);

     end /* constant_value */;

/* include files */

%include nodes;
%include op_codes;
%include operator;
%include reference;
%include symbol;
%include system;
     end /* constant_length */;
