/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

declare_temporary:	proc(type,precision,scale,length) returns(ptr);

/*	Modified: 1 May 1979 by PCK to implement 4-bit decimal */

dcl	(length,s,q) ptr;
dcl	scale fixed bin(15);
dcl	precision fixed bin(31);
dcl	type bit(36) aligned;
dcl	bit36 bit(36) based(addr(s->symbol.data_type));

dcl	pl1_stat_$temporary_list ptr ext static;

dcl	(addr,null) builtin;

%include language_utility;
%include symbol;
%include boundary;
%include mask;

%include reference;
%include declare_type;
			/*      */

	if length=null
	& (type & picture_mask)="0"b
	then do s=pl1_stat_$temporary_list repeat s->symbol.multi_use while(s^=null);
		if ^s->symbol.reference->reference.shared then goto next_temporary;
		if bit36^=type then goto next_temporary;
		if s->symbol.c_dcl_size^=precision then goto next_temporary;
		if s->symbol.scale^=scale then goto next_temporary;
		if s->symbol.dcl_size^=null then goto next_temporary;
		return(s->symbol.reference);
next_temporary:
	end;

	s = create_symbol(null,null,by_compiler);
	bit36=type;
	s->symbol.c_dcl_size=precision;
	s->symbol.scale=scale;
	s->symbol.dcl_size=length;
	s->symbol.temporary = "1"b;
	s->symbol.exp_extents = length ^= null;

	if	s->symbol.unaligned
	then if	s->symbol.binary
	|	s->symbol.ptr
	|	s->symbol.decimal
	then	s->symbol.packed = "1"b;

	call get_size(s);

	if s->symbol.bit | s->symbol.char | s->symbol.picture
	then do;
		q = s->symbol.reference;
		q -> reference.padded_ref = "1"b;
		if s->symbol.varying
		then	q->reference.varying_ref = "1"b;
		else do;
			q->reference.c_length = s->symbol.c_dcl_size;
			q->reference.length = s->symbol.dcl_size;
		end;
		if q->reference.length^=null
		then do;
			q->reference.shared = "0"b;
			q->reference.ref_count = 1;
		end;
	end;

	if s->symbol.storage_block then s->symbol.boundary = mod2_;
	s->symbol.multi_use=pl1_stat_$temporary_list;
	pl1_stat_$temporary_list=s;

	return(s->symbol.reference);

	end declare_temporary;
