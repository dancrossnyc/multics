/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-04-15,RWaters), approve(87-04-15,MCR7635),
     audit(87-04-28,Huen), install(87-05-21,MR12.1-1033):
     Fix bug #1869
                                                   END HISTORY COMMENTS */

/* Modified 86/06/21 by RW to allow do loop indexes to be picture variables
*/
declare_picture_temp: proc (pic_str, scalefac, complex_bit, unaligned_bit) returns (ptr);


	dcl     (p, s)		 ptr;
	dcl     p_str		 char (256) varying aligned;
	dcl     pl1_stat_$temporary_list external static pointer;
	dcl     pic_str		 char (*) aligned;
	dcl     (complex_bit, unaligned_bit) bit (1) aligned;
	dcl     scalefac		 fixed bin (31) aligned;
	dcl     aligned_bit		 bit (1);
	dcl     null		 builtin;


%include declare_type;
%include semant;
%include token_types;
%include picture_image;
%include symbol;
%include reference;

	aligned_bit = ^unaligned_bit;
	do s = pl1_stat_$temporary_list repeat s -> symbol.multi_use while (s ^= null);
	     if s -> symbol.picture
	     then if s -> symbol.aligned = aligned_bit
		then if s -> symbol.complex = complex_bit
		     then do;
			     if s -> symbol.general ^= null then do;
				     p = s -> symbol.general -> reference.symbol -> symbol.initial;
				     if p -> picture_image.chars = pic_str
				     then if p -> picture_image.scalefactor = scalefac
					then return ((s -> symbol.reference));
				end;
			end;

	end;

	s = create_symbol (null, null, by_compiler);
	s -> symbol.aligned = aligned_bit;
	s -> symbol.unaligned = unaligned_bit;
	s -> symbol.complex = complex_bit;
	s -> symbol.temporary,
	     s -> symbol.picture = "1"b;
	if scalefac = 0
	then s -> symbol.general = create_token ((pic_str), char_string);
	else do;
		p_str = pic_str;
		p_str = p_str || "f(";
		p_str = p_str || bindec$vs (scalefac);
		p_str = p_str || ")";		/* this done in small increments for better concatenation code */

		s -> symbol.general = create_token ((p_str), char_string);
	     end;

	call get_size (s);

	s -> symbol.multi_use = pl1_stat_$temporary_list;
	pl1_stat_$temporary_list = s;

	return ((s -> symbol.reference));

     end;
