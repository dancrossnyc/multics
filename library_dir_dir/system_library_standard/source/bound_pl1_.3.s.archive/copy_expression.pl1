/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 3 October 1980 by M. N. Davidoff to eliminate internal static for previous.  Fixes 2023.
*/
/* format: style3 */
copy_expression:
     procedure (a) returns (pointer);

dcl	a		ptr unaligned;
dcl	father		ptr;
dcl	stepfather	ptr;

/* automatic */

dcl	i		fixed bin;
dcl	inptr		ptr;
dcl	nodetype		bit (9) aligned;
dcl	outptr		ptr;
dcl	p		ptr;

/* builtin */

dcl	null		builtin;

/* external static */

dcl	pl1_stat_$util_abort
			external static entry (fixed bin (15), ptr) variable;

%include language_utility;
%include array;
%include symbol;
%include declare_type;
%include list;
%include nodes;
%include operator;
%include op_codes;
%include reference;

/* program */

	inptr = a;

	if inptr = null
	then return (inptr);

	nodetype = inptr -> node.type;

	if nodetype = operator_node
	then do;
		if inptr -> operator.number = 0
		then return (inptr);

		if inptr -> operator.operand (1) ^= null
		then if inptr -> operator.operand (1) -> node.type = reference_node
		     then if ^inptr -> operator.operand (1) -> reference.shared
			then do;
				inptr -> operator.operand (1) -> reference.ref_count =
				     inptr -> operator.operand (1) -> reference.ref_count + 1;
				return (inptr);
			     end;

		outptr = create_operator ((inptr -> operator.op_code), (inptr -> operator.number));

		do i = 1 to inptr -> operator.number;
		     if inptr -> operator.operand (i) ^= null
		     then outptr -> operator.operand (i) = copy_expression (inptr -> operator.operand (i));
		end;

		outptr -> operator.processed = inptr -> operator.processed;

		if outptr -> operator.op_code = std_call
		then if outptr -> operator.operand (1) ^= null
		     then do;
			     p = outptr -> operator.operand (3) -> operator.operand (2);
			     outptr -> operator.operand (1) = p -> list.element (p -> list.number);
			end;

		return (outptr);
	     end;

	else if nodetype = list_node
	then do;
		outptr = create_list ((inptr -> list.number));

		do i = 1 to inptr -> list.number;
		     outptr -> list.element (i) = copy_expression (inptr -> list.element (i));
		end;

		return (outptr);
	     end;

	else if nodetype = reference_node
	then do;
		if inptr -> reference.symbol ^= null
		then do;
			p = inptr -> reference.symbol;
			if p -> node.type = symbol_node
			then if p -> symbol.constant & ^p -> symbol.file & ^p -> symbol.entry & ^p -> symbol.format
			     then return (inptr);
		     end;

		if ^inptr -> reference.shared
		then do;
			inptr -> reference.ref_count = inptr -> reference.ref_count + 1;
			return (inptr);
		     end;

		outptr = create_reference ((inptr -> reference.symbol));

		outptr -> reference = inptr -> reference;

		if outptr -> reference.offset ^= null
		then outptr -> reference.offset = copy_expression (inptr -> reference.offset);

		if outptr -> reference.length ^= null
		then outptr -> reference.length = copy_expression (inptr -> reference.length);

		if outptr -> reference.qualifier ^= null
		then outptr -> reference.qualifier = copy_expression (inptr -> reference.qualifier);

		return (outptr);
	     end;

	else if nodetype = token_node | nodetype = label_node | nodetype = sf_par_node | nodetype = block_node
	then return (inptr);

	else if nodetype = array_node
	then do;
		outptr = create_array ();
		outptr -> array = inptr -> array;
		outptr -> array.element_size = copy_expression (inptr -> array.element_size);
		outptr -> array.element_size_bits = copy_expression (inptr -> array.element_size_bits);
		outptr -> array.virtual_origin = copy_expression (inptr -> array.virtual_origin);
		outptr -> array.bounds = copy_expression (inptr -> array.bounds);
		outptr -> array.element_descriptor = copy_expression (inptr -> array.element_descriptor);

		return (outptr);
	     end;

	else if nodetype = bound_node
	then do;
		outptr = create_bound ();
		outptr -> bound = inptr -> bound;
		outptr -> bound.next = copy_expression (inptr -> bound.next);
		outptr -> bound.lower = copy_expression (inptr -> bound.lower);
		outptr -> bound.upper = copy_expression (inptr -> bound.upper);
		outptr -> bound.desc_multiplier = copy_expression (inptr -> bound.desc_multiplier);
		outptr -> bound.multiplier = copy_expression (inptr -> bound.multiplier);

		return (outptr);
	     end;

	else if nodetype = symbol_node
	then return (copy_symbol (inptr, null));

	call pl1_stat_$util_abort (32, inptr);

	return (inptr);

/* Copy the sons of a symbol node.

   The caller is responsible for threading the new symbol.next chain onto an
   existing symbol.next chain for a block. */

copy_sons:
     entry (father, stepfather);

	stepfather -> symbol.son = null;

	if father -> symbol.son = null
	then return;

	stepfather -> symbol.son = copy_symbol ((father -> symbol.son), stepfather);

	return;

/* This procedure copies a symbol node.  If the symbol node is a structure
   declaration, this procedure makes a prefix walk of the member symbol nodes
   and copies them also.  The brothers of the root are copied if stepfather is
   not null. */

copy_symbol:
     procedure (root, stepfather) returns (ptr);

dcl	root		ptr;
dcl	stepfather	ptr;

dcl	more_nodes	bit (1) aligned;
dcl	new_s		ptr;
dcl	new_tree		ptr;
dcl	previous		ptr;
dcl	s		ptr;

	s = root;
	new_tree, previous, new_s = copy_symbol_node (root);
	new_s -> symbol.father = stepfather;

	more_nodes = "1"b;
	do while (more_nodes);
	     if s -> symbol.son ^= null
	     then do;
		     new_s -> symbol.son, previous -> symbol.next = copy_symbol_node ((s -> symbol.son));
		     new_s -> symbol.son -> symbol.father = new_s;
		     s = s -> symbol.son;
		     previous, new_s = new_s -> symbol.son;
		end;
	     else do;
		     more_nodes = "0"b;
		     do while (s ^= root -> symbol.father & ^more_nodes);
			if s -> symbol.brother ^= null & (s ^= root | stepfather ^= null)
			then more_nodes = "1"b;
			else do;
				s = s -> symbol.father;
				new_s = new_s -> symbol.father;
			     end;
		     end;

		     if more_nodes
		     then do;
			     new_s -> symbol.brother,
				previous -> symbol.next = copy_symbol_node ((s -> symbol.brother));
			     new_s -> symbol.brother -> symbol.father = new_s -> symbol.father;
			     s = s -> symbol.brother;
			     previous, new_s = new_s -> symbol.brother;
			end;
		end;
	end;

	return (new_tree);

copy_symbol_node:
     procedure (s) returns (ptr);

dcl	s		ptr;

dcl	p		ptr;

	p = create_symbol (null, null, by_compiler);

	p -> symbol = s -> symbol;
	p -> symbol.dcl_type = by_compiler;
	p -> symbol.next, p -> symbol.multi_use = null;
	p -> symbol.reference = copy_expression (s -> symbol.reference);
	p -> symbol.reference -> reference.symbol = p;
	p -> symbol.array = copy_expression (s -> symbol.array);
	p -> symbol.general = copy_expression (s -> symbol.general);
	p -> symbol.initial = copy_expression (s -> symbol.initial);

	return (p);
     end copy_symbol_node;

     end copy_symbol;

     end copy_expression;
