/****^  *********************************************************
        *                                                       *
        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
        *                                                       *
        * Copyright (c) 1972 by Massachusetts Institute of      *
        * Technology and Honeywell Information Systems, Inc.    *
        *                                                       *
        ********************************************************* */



/****^  HISTORY COMMENTS:
  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
     install(89-07-31,MR12.3-1066):
     Removed the obsolete parameter source_line.
                                                   END HISTORY COMMENTS */


/*	Error buffering program.				*/
/* If the listing option is on it saves up to 100 error message numbers
 * and related information in an array.  It then calls
 * pll_error_print$write_out which constructs the error message and
 * prints it on the user's console.  Later error$finish is called to sort
 * the error array by statement id and print all of the messages on the
 * listing.
*/
/*	Written by:	J.D. Mills
 *	On:		18 January 1969
 *	Rewritten in pl1 on 28 JULY 1969 by the author.
 *	Modified on:	11 August 1970 by P. Green for Version II
 *	Modified on:	20 April 1979 by R. Barnes to prevent a
 *			fault if source_seg < 0
 *        Modified on:        830909 BIM to signal error if in debug mode
 *	Modified on	020889 RW reformatted and removed
 *			obsolete parameter "source_line"
*/
/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
error_:
     procedure (en, source_id, tp, source_seg, source_start, source_length);

dcl      en fixed bin (15) parameter;
dcl      source_seg fixed bin (8) parameter;
dcl      source_start fixed bin (23) parameter;
dcl      source_length fixed bin (11) parameter;
dcl      tp pointer parameter;

dcl      n fixed bin (17),
         sg fixed bin (11),
         (ss, sl) fixed bin (31),
         (p, q) ptr;

dcl      pl1_stat_$listing_on bit (1) aligned external static;
dcl      ei fixed bin (17) internal static;
dcl      ei_max fixed bin (17) internal static options (constant) initial (100);

dcl      (addr, divide, null, string) builtin;

dcl      1 error_info (100) internal static,
	 2 token_pt ptr,
	 2 error_number fixed bin (17),
	 2 statement_id like source_id;

dcl      1 image based,				/* image of error_info array */
	 2 token_pt ptr,
	 2 error_number fixed bin (15),
	 2 statement_id like source_id;

declare	cg_static_$debug bit (1) aligned external static;
declare	cu_$cl entry;

%page;
%include language_utility;
%page;
%include nodes;
%page;
%include operator;
%page;
%include op_codes;
%page;
%include reference;
%page;
%include symbol;
%page;
%include source_id;
%page;
/* start */
	sg = source_seg;
	ss = source_start;
	sl = source_length;

common:
	p = tp;

/* traverse the node pointer until we can get a token_node */
	do while (p ^= null);
	     if p -> node.type = token_node then
		goto found_token_node;
	     else if p -> node.type = symbol_node then do;
		p = p -> symbol.token;
		goto found_token_node;
	     end;
	     else if p -> node.type = label_node then do;
		p = p -> symbol.token;
		goto found_token_node;
	     end;
	     else if p -> node.type = reference_node then
		p = p -> reference.symbol;
	     else if p -> node.type = operator_node then do;
		if p -> operator.op_code = std_call then
		     p = p -> operator.operand (1);
		else
		     p = null;
	     end;
	     else /* bizzare type of node */
		p = null;
	end;

found_token_node:
	if pl1_stat_$listing_on then
	     if ei <= ei_max then do;

		q = addr (error_info (ei));
		q -> image.token_pt = p;
		q -> image.error_number = en;
		if sg >= 0 then
		     string (q -> image.statement_id) = string (source_id);
		else
		     string (q -> image.statement_id) = "0"b;
		ei = ei + 1;

	     end;

	call pl1_error_print$write_out (en, source_id, p, sg, ss, sl, 0);

	if cg_static_$debug then
	     call cu_$cl;
	return;
%page;
error_$no_text:
     entry (en, source_id, tp);

	sg, ss, sl = 0;
	goto common;
%page;
/* error_$finish entry.
 *	Sort the error messages by error number and then dump them
 *	into the source listing
*/
error_$finish:
     entry;

dcl      (i, j, k, d) fixed bin (17),
         (buff_pt, pj, pk) ptr,
         temp_id bit (27),
         buffer (8);				/* for temp storage during interchange */
dcl      pl1_stat_$error_width fixed bin ext static;

	pl1_stat_$error_width = 120;
	buff_pt = addr (buffer);

	if ei > ei_max then do;
	     ei = ei_max;
	     call pl1_print$non_varying_nl (
		"Implementation restriction - Only 100 error messages may be printed in the listing.", 0);
	end;

	ei = ei - 1;

/* Sort the error messages using Shell sort */
	d = ei;
down:
	d = 2 * divide (d, 4, 17, 0) + 1;
	do i = 1 to ei - d;
	     k = i + d;
	     pk = addr (error_info (k));
	     temp_id = string (pk -> image.statement_id);
up:
	     j = k - d;
	     pj = addr (error_info (j));

	     if string (pj -> image.statement_id) > temp_id then do;
		buff_pt -> image = pk -> image;
		pk -> image = pj -> image;
		pj -> image = buff_pt -> image;

		if j > d then do;
		     k = j;
		     goto up;
		end;
	     end;
	end;

	if d > 1 then
	     goto down;

%page;
/* The error messages are sorted, now write them onto listing segment. */

	do j = 1 to ei;
	     pj = addr (error_info (j));
	     call pl1_error_print$listing_segment (pj -> image.error_number, pj -> image.statement_id,
		pj -> image.token_pt);
	end;
%page;
error_$initialize_error:
     entry;

	ei = 1;

     end error_;
