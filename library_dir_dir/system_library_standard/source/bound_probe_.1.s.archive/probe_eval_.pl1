/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(87-06-18,RWaters), approve(87-06-18,MCR7687), audit(87-06-24,Huen),
     install(87-07-15,MR12.1-1040):
     Probe error #110: correctly decode lengths of char (*) parameters.
  2) change(88-05-31,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Extracted a chunk of code in the main body of the program and made
     it into an internal procedure called 'do_subscripts'. This was done
     because the code may now be executed in two different locations.
     Changed code so it accepts the first subscript of a two dimensional
     character array. This facilitates the printing of character strings
     by row. Of course both subscripts may be supplied, but that implies
     only a single character is desired.
  3) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  4) change(88-09-28,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added code that allows pointers to be referenced with subscripts.
     If the pointer points to character data and subrange is specified,
     the values will be displayed in string format. Any other data type
     will be displayed in array format.
  5) change(88-10-28,WAAnderson), approve(88-10-28,MCR7952),
     audit(88-10-31,RWaters), install(88-11-11,MR12.2-1210):
     Added code to evaluate character pointers as decribed in the MTB.
     
     Consider the following declaration:
     
      char *ptr;
     
     The following are possible references to the pointer 'ptr' and the
     manner in which the reference is interpreted by probe:
     
     *ptr      - refers to a single character at the address specified
                 by the contents of 'ptr'.
      ptr      - refers to the address in 'ptr'.
      ptr[]    - refers to the contiguous series of characters beginning
                 with the character specified by the address in 'ptr'
                 and ending with the first occurence of a null.
      ptr[N]   - refers to the single character whose address is computed
                 by taking the contents of 'ptr' and adding N bytes to that
                 address.
      ptr[N:M] - refers to the characters from ptr+N to ptr+M where
                 N and M are byte offsets.
                                                   END HISTORY COMMENTS */

probe_eval_$evaluate:
  proc (P_probe_info_ptr, P_reference, P_switches, P_value_wanted, P_code);

  /* given a reference_node, and some info about how to evaluate it, get a pointer to its storage,
   and its symbol node - for use by get_value only

   modified 13 Sept 79 JRD
   modified 19 Feb 80 JRd for probe variables */
  /* Changed to accept first 3 bits of P_switches 08/26/81 S. Herbst */
  /* Changed to test explicit/implicit qualifiers before indirecting 09/18/81 S. Herbst */
  /* Fixed 'symbol' request to not check for null qualifier 08/11/82 S. Herbst */
  /* Fixed references to program-declared external procedures 09/22/82 S. Herbst */
  /* Modified June 83 JMAthane for PASCAL  :
   - replaced when necessary references to runtime_symbol structure by calls to runtime_symbol_info_ subroutine.
   - modified to know types.
   - modified to add "builtin" bit in reference structure. */
  /* Added version string to runtime_symbol_info_ structures 10/06/83 S. Herbst */
  /* Fixed to translate "-" to "_" in COBOL identifiers before looking up in symbol table 09/20/84 Steve Herbst */
  /* Fixed to special-case address of a varying string parameter 02/27/85 Steve herbst */
  /* Fixed to correctly decode lengths of char (*) parameters 05/21/87 by RWaters */


  dcl P_probe_info_ptr	ptr parameter;
  dcl 1 P_reference		structure aligned like reference_node parameter;
  dcl P_switches		bit (36) aligned parameter;
  dcl P_value_wanted	bit (1) aligned parameter;
  dcl P_code		fixed bin (35) parameter;

  dcl CLASS_PARAMETER	fixed bin int static options (constant)
			init (8);

  dcl switches		bit (36);
  dcl want_external_sw	bit (1) unaligned defined (switches) pos (1);
  dcl default_external_sw	bit (1) unaligned defined (switches) pos (2);
  dcl default_offset_zero_sw	bit (1) unaligned defined (switches) pos (3);

  dcl 1 ref_subscripts	aligned like reference_subscripts
			based (P_reference.subscript_ptr);
  dcl 1 ref_arg_list	aligned like reference_arg_list
			based (P_reference.argument_list);
  dcl 1 ref_source_info	aligned like source_info
			based (P_reference.source_info_ptr);
  dcl 1 sub_refs		aligned like subscript_reference_ptrs
			aligned based (P_reference.subscript_refs_ptr);

  dcl 1 subscript		aligned based like reference_node;
				/* dummy for subscript */

  dcl 1 type_info		like runtime_type_info;
  dcl 1 address_info	like runtime_address_info;

  dcl code		fixed bin (35);
  dcl ext_name		char (256) varying;
  dcl containing_block	pointer;	/* to block in which symbol found */
  dcl (i, j)		fixed bin (35);
  dcl tp			pointer;
  dcl sub			pointer;
  dcl dimensions		fixed bin;/* how many dims the symbol has */
  dcl real_bounds		(2, 16) fixed bin (24);
  dcl temp		(2) fixed bin (35);
  dcl steps		fixed bin;
  dcl translated_name	char (256) unaligned varying;

  dcl (
      probe_et_$bad_section,
      probe_et_$bad_subscript,
      probe_et_$not_based,
      probe_et_$no_address,
      probe_et_$null_ptr,
      probe_et_$recorded_message,
      probe_et_$wrong_dims
      )			fixed bin (35) external static;

  dcl ioa_$ioa_switch	entry options (variable);
  dcl probe_operate_$infix	entry (ptr, char (1) aligned,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			fixed bin (35));

  dcl stu_$find_runtime_symbol
			entry (pointer, char (*), pointer, fixed bin)
			returns (pointer);
  dcl stu_$get_runtime_address
			entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr)
			returns (ptr);
  dcl probe_get_c_address_
			entry (ptr, fixed bin (6) unsigned, ptr, ptr)
			returns (ptr);
  dcl stu_$get_implicit_qualifier
			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);

  dcl probe_request_mgr_$find_builtin
			entry (ptr, char (*),
			entry () options (variable), ptr,
			fixed bin (35));
  dcl builtin_entry		entry variable options (variable);
  dcl probe_variable_mgr_$find_variable
			entry (ptr, ptr, fixed bin (35));

  dcl probe_check_ptr_$indirectable
			entry (ptr, fixed bin (35));
  dcl probe_error_$record	entry options (variable);
  dcl probe_find_procedure_	entry (ptr, char (*), bit (36) aligned, ptr,
			fixed bin (35));
  dcl probe_array_bounds_	entry (ptr, ptr, 1 aligned like reference_node,
			1 aligned like source_info, ptr, fixed bin (35))
			returns ((2, 16) fixed bin (24));
  dcl probe_stack_trace_$find_previous_invocation
			entry (ptr, ptr, fixed bin);
  dcl probe_stack_trace_$find_block_frame
			entry (ptr, ptr);

  dcl probe_invoke_$function	entry (pointer, 1 aligned like reference_node,
			1 aligned like reference_node, fixed bin (35));
  dcl probe_cv_stu_code_	entry (fixed bin (35));


  dcl new_size		fixed bin;
  dcl (first_sub, replace_sub)
			fixed bin;
  dcl special_entry		bit (1);
  dcl make_this_ref_node_a_constant
			bit (1);
  dcl must_add_in_ptr_subscript
			bit (1);

  dcl (abs, addr, addrel, convert, divide, fixed, index, mod, null,
      substr, translate, unspec)
			builtin;
				/**/

  probe_info_ptr = P_probe_info_ptr;
  switches = P_switches;
  P_code = 0;

  if P_reference.constant then do;	/* fill in information */
      tp = P_reference.constant_token_ptr;
				/* get pointer to token containing constant */
      P_reference.address_ptr = tp -> constant.data_ptr;
      P_reference.descriptor = tp -> constant.data_type;
      P_reference.type = divide (tp -> constant.data_type, 2, 17, 0);
      P_reference.type_ptr = null;
      P_reference.packed = (mod (P_reference.descriptor, 2) = 1);
      P_reference.precision = tp -> constant.scale_and_precision;
      return;
    end;

  if ^probe_info.flags.execute then do; /* just syntax checking */
      if P_reference.n_arguments > 0
        then /* may be, can't tell till execute time */
	   P_reference.function = "1"b;
      return;
    end;

  /* could optimize some builtins and probe variables by checking for leading
   % or $ in name, since no user variable could have such a thing.
*/

  if P_reference.path
    then go to GET_EXTERNAL;

  if ^P_reference.have_generation then do;
      ref_source_info = current_source;
      ref_source_info.stmnt_map_entry_index = 0;
				/* haven't found the line yet */
    end;

  if probe_info.language_type = COBOL_lang_type
    then translated_name = translate (P_reference.name, "_", "-");
    else translated_name = P_reference.name;

  P_reference.symbol_ptr =
       stu_$find_runtime_symbol (ref_source_info.block_ptr, (translated_name),
       containing_block, steps);

  if P_reference.symbol_ptr ^= null then do;
				/* symbol found */

      type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

      call runtime_symbol_info_$type (P_reference.symbol_ptr,
	 addr (type_info), code);
      if code ^= 0
        then go to SOME_ERROR;

      address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;

      call runtime_symbol_info_$address (P_reference.symbol_ptr,
	 addr (address_info), code);
      if code ^= 0
        then go to SOME_ERROR;

      P_reference.type = type_info.type;
      P_reference.type_ptr = type_info.type_addr;
      P_reference.packed = type_info.packed;
      P_reference.descriptor = type_info.type * 2;

      if type_info.packed
        then P_reference.descriptor = P_reference.descriptor + 1;

      if data_type_info_$info (P_reference.type).computational
	 | probe_info.language_type = PASCAL_lang_type
        then P_reference.precision =
	        decode (type_info.size, type_info.size_is_encoded);

      if type_info.scale ^= 0		/* does type have a scale */
        then addr (P_reference.precision) -> encoded_precision.scale
	        = type_info.scale;


      if P_reference.type = ext_procedure_runtime_dtype then do;
	if probe_info.language_type = PASCAL_lang_type then do;
	  end;
	  else go to GET_EXTERNAL;
        end;


      /* get proper stack frame and generation */

      if P_reference.type = ext_entry_runtime_dtype then do;
				/* entry, found in root block, want son */
	containing_block =
	     addrel (containing_block,
	     containing_block -> runtime_block.son);
	steps = steps - 1;
        end;

      if ref_source_info.block_ptr ^= containing_block then do;
				/* symbol found in father block */
	ref_source_info.block_ptr = containing_block;
				/* remember correct frame */
	if ref_source_info.stack_ptr ^= null
	  then
	    do i = 1 to steps;	/* chase display to get correct frame */
	    if (probe_info.language_type = C_lang_type)
	      then
		 ref_source_info.stack_ptr =
		      ref_source_info.stack_ptr -> frame.back;
	      else
		 ref_source_info.stack_ptr =
		      ref_source_info.stack_ptr -> frame.display;
	  end;
	  else call probe_stack_trace_$find_block_frame (probe_info_ptr,
		  addr (ref_source_info));
        end;			/* entry ptr is diff., leave others to handle it */

      /* User wants N'th previous invocation of this variable -
   This is only meaningful for automatic storage,
   although I suppose one could define a meaning for controlled,
   and involves searching the stack from here back.
   It is used with static types (labels, entries) as a convenient way to specify a block,
   which is allowed in a generation. i.e. v foo [label[-4]]
*/
      if P_reference.invocation_level > 0
        then if P_reference.type >= label_constant_runtime_dtype
	        & P_reference.type <= ext_procedure_runtime_dtype
	     then P_reference.precision = P_reference.invocation_level;
				/* must be [label[-N]] */
	     else call probe_stack_trace_$find_previous_invocation (
		     probe_info_ptr,
		     P_reference.source_info_ptr,
		     (1 + abs (P_reference.invocation_level)));


      /* Based variable - either have explicit ptr or must get implicit one */

      if address_info.class = 3
        then /* based variable */
	   if P_reference.base_addr = null then do;
				/* no explicit address */
	       P_reference.base_addr = stu_$get_implicit_qualifier
		  (ref_source_info.block_ptr, P_reference.symbol_ptr,
		  ref_source_info.stack_ptr,
		  (ref_source_info.seg_info_ptr -> seg_info.linkage_ptr),
		  ref_source_info.block_ptr);
	       if probe_info.request_name ^= "symbol" then do;
		 call probe_check_ptr_$indirectable (P_reference
		      .base_addr, code);
		 if code ^= 0 then do;
		     if code = probe_et_$null_ptr
		       then call probe_error_$record (probe_info_ptr,
			       0, "Implicit qualifier ^a is null.",
			       qualifier_name (P_reference.symbol_ptr));
		       else call probe_error_$record (probe_info_ptr,
			       code, "Implicit qualifier ^a = ^w ^w",
			       qualifier_name (P_reference.symbol_ptr),
			       substr (unspec (P_reference.base_addr),
			       1, 36),
			       substr (unspec (P_reference.base_addr),
			       37, 36));
		     go to RECORDED_MESSAGE;
		   end;
	         end;
	     end;
	     else ;		/* have addr already */
      else if P_reference.base_addr ^= null then do;
				/* not based, but has ptr ?!? */
	call probe_error_$record (probe_info_ptr, probe_et_$not_based,
	     P_reference.name);
	goto RECORDED_MESSAGE;	/* leave, and let our caller decide what to do */
        end;

      if ^P_value_wanted then do;
	P_reference.address_ptr = P_reference.base_addr;
	return;
        end;

      special_entry = "0"b;

      goto SKIPPER;

add_c_dims:
  entry (P_probe_info_ptr, P_reference, P_switches, P_value_wanted, P_code,
       original_class);

      dcl original_class	    fixed bin (6) unsigned parameter;

      P_code = 0;
      switches = P_switches;
      probe_info_ptr = P_probe_info_ptr;

      special_entry = "1"b;

SKIPPER:

      dimensions = runtime_symbol_info_$array_dims (P_reference.symbol_ptr);

      must_add_in_ptr_subscript = "0"b;
      if P_reference.n_subscripts > dimensions
        then do;			/* cant all be subscripts, hope they're args */
	if (probe_info.language_type = C_lang_type
	     & P_reference.type = pointer_dtype) then do;
	    must_add_in_ptr_subscript = "1"b;
	  end;
	  else
	       P_reference.function = "1"b;
        end;

      make_this_ref_node_a_constant = "0"b;
      ref_subscripts.number = dimensions;
      if dimensions > 0 then do;
	real_bounds = probe_array_bounds_ (probe_info_ptr,
	     P_reference.symbol_ptr, P_reference, ref_source_info,
	     P_reference.base_addr, code);
	if code ^= 0
	  then goto SOME_ERROR;	/* something wrong with the array bounds */

	if P_reference.n_subscripts < dimensions then do;
				/* too few */
	    if P_reference.n_subscripts = 0 then do;
				/* assume ref to whole aray as cross-section */
	        P_reference.cross_section = "1"b;
	        ref_subscripts.value = real_bounds;
				/* ahhh... PL/I ! */

	        /* possible hazard:  We have set up subscripts, but no subsidiary reference_nodes exists.
   sub_refs are all null.  This should not be a  problem, as there is no other reason to
   look at the sub_refs
*/
	      end;		/* assuming ref to whole */
				/* Time to handle C strings. A C string is actually a 2 dim array. We want
   to print out all the elements of the specified row. */

	    else if (probe_info.language_type = C_lang_type &
	         P_reference.type = 21 &
	         P_reference.n_subscripts = 1 &
	         dimensions = 2) then do;
	        sub_refs.ptr (1, 2) = null ();
	        call do_subscripts;
	        ref_subscripts.value (1, 2) = 0;
	        P_reference.n_subscripts = 2;
	        P_reference.precision = 256;
	        make_this_ref_node_a_constant = "1"b;
	      end;
	    else do;		/* have at least one, but not enough -fail */
	      call probe_error_$record (probe_info_ptr, 0,
		 "^a needs ^d subscripts", P_reference.name, dimensions);
	      goto RECORDED_MESSAGE;
	    end;
	  end;			/* too few subscripts case */
	  else call do_subscripts;	/* have proper number */

	if ref_source_info.block_ptr -> runtime_block.fortran
	  then /* must reverse subscript array */
	    do i = 1 to divide (dimensions, 2, 17, 0);
	    temp (1) = ref_subscripts.value (1, i);
	    temp (2) = ref_subscripts.value (2, i);
	    ref_subscripts.value (1, i) =
	         ref_subscripts.value (1, dimensions + 1 - i);
	    ref_subscripts.value (2, i) =
	         ref_subscripts.value (2, dimensions + 1 - i);
	    ref_subscripts.value (1, dimensions + 1 - i) = temp (1);
	    ref_subscripts.value (2, dimensions + 1 - i) = temp (2);
	  end;
        end;

      /* Now that we have the subscripts and the base ptr and the stack frame, it is possible to
   get the address of the symbol itself
*/

      if data_type_info_$info (P_reference.type).type
        then
	   P_reference.address_ptr = null;
        else do;
	if (special_entry | P_reference.address_ptr ^= null ())
	  then
	       P_reference.address_ptr =
		  probe_get_c_address_ (P_reference.address_ptr,
		  original_class,
		  P_reference.symbol_ptr,
		  addr (ref_subscripts.value));
	  else
	       P_reference.address_ptr =
		  stu_$get_runtime_address (ref_source_info.block_ptr,
		  P_reference.symbol_ptr,
		  ref_source_info.stack_ptr,
		  (ref_source_info.seg_info_ptr -> seg_info.linkage_ptr),
		  ref_source_info.block_ptr, P_reference.base_addr,
		  addr (ref_subscripts.value));


	if (must_add_in_ptr_subscript) then do;
	    new_size = 0;

	    if (fixed (P_reference.symbol_ptr -> runtime_symbol.ndims)
	         < P_reference.n_subscripts) then do;
	        begin;

		dcl (suber1, suber2)        fixed bin;
		dcl temp_inx	        fixed bin;
		dcl temp_ptr	        ptr;

		temp_ptr = P_reference.symbol_ptr;
		do while (fixed (temp_ptr -> runtime_symbol.type)
		     = pointer_dtype |
		     fixed (temp_ptr -> runtime_symbol.type)
		     = c_typeref_dtype);
		  temp_ptr =
		       addrel (temp_ptr,
		       fixed (temp_ptr -> runtime_symbol.son));
		end;

		if (fixed (temp_ptr -> runtime_symbol.type) = char_dtype)
		  then do;
		    first_sub =
		         fixed (P_reference.symbol_ptr
		         -> runtime_symbol.ndims) + 1;
		    replace_sub = 0;
		    do temp_inx = first_sub to P_reference.n_subscripts;

		      replace_sub = replace_sub + 1;
		      suber1 = 0;
		      suber2 = 0;

		      begin;
		        dcl based_s_int	      fixed bin (35)
					      based (sub_refs
					      .ptr (1, temp_inx)
					      -> subscript
					      .address_ptr);
		        dcl based_l_int	      fixed bin (71)
					      based (sub_refs
					      .ptr (1, temp_inx)
					      -> subscript
					      .address_ptr);
		        dcl based_str	      char (sub_refs
					      .ptr (1, temp_inx)
					      -> subscript.precision
					      + 1)
					      based (sub_refs
					      .ptr (1, temp_inx)
					      -> subscript
					      .address_ptr);
		        if (sub_refs.ptr (1, temp_inx) -> subscript.type
			   = real_fix_dec_9bit_ls_dtype)
			then

			     suber1 = convert (suber1, based_str);
		        else if (sub_refs.ptr (1, temp_inx)
			   -> subscript.type = real_fix_bin_1_dtype)
			then
			     suber1 = convert (suber1, based_s_int);
		        else if (sub_refs.ptr (1, temp_inx)
			   -> subscript.type = real_fix_bin_2_dtype)
			then
			     suber1 = convert (suber1, based_l_int);
		      end;

		      if (sub_refs.ptr (2, temp_inx) ^= null ()) then do;
			begin;
			  dcl based_s_int		fixed
						bin (35)
						based (sub_refs
						.ptr (2, temp_inx)
						-> subscript
						.address_ptr);
			  dcl based_l_int		fixed
						bin (71)
						based (sub_refs
						.ptr (2, temp_inx)
						-> subscript
						.address_ptr);
			  dcl based_str		char (sub_refs
						.ptr (2, temp_inx)
						-> subscript
						.precision + 1)
						based (sub_refs
						.ptr (2, temp_inx)
						-> subscript
						.address_ptr);
			  if (sub_refs.ptr (2, temp_inx)
			       -> subscript.type
			       = real_fix_dec_9bit_ls_dtype)
			    then

			         suber2 = convert (suber2, based_str);
			  else if (sub_refs.ptr (2, temp_inx)
			       -> subscript.type = real_fix_bin_1_dtype)
			    then
			         suber2 = convert (suber2, based_s_int);
			  else if (sub_refs.ptr (2, temp_inx)
			       -> subscript.type = real_fix_bin_2_dtype)
			    then
			         suber2 = convert (suber2, based_l_int);
			end;
			sub_refs.ptr (1, replace_sub) =
			     sub_refs.ptr (1, temp_inx);
			sub_refs.ptr (2, replace_sub) =
			     sub_refs.ptr (2, temp_inx);
		        end;
		      P_reference.n_subscripts = replace_sub;
		      if (suber2 > suber1)
		        then
			   new_size = suber2 - suber1 + 1;
		        else new_size = 1;
		    end;
		  end;
	        end;
	      end;
	    call probe_operate_$infix (P_probe_info_ptr, "+", P_reference,
	         sub_refs.ptr (1, 1) -> subscript, P_reference, code);
	    P_reference.precision = new_size;
	    P_reference.flags.c_sub_c_ptr = "1"b;
	  end;

	if P_reference.address_ptr = null () then do;
				/* failure */
	    call probe_error_$record (probe_info_ptr, probe_et_$no_address,
	         P_reference.name);
	    goto RECORDED_MESSAGE;	/* but only if we wanted it in the first place */
	  end;

	if address_info.class = CLASS_PARAMETER
	     & /* special-case varying string parameter: */
	     (type_info.type = varying_bit_dtype
	     | type_info.type = varying_char_dtype)
	  then
	       /* parameter ptr points to string portion */
	       /* make it point to the length word */
	       P_reference.address_ptr =
		  addrel (P_reference.address_ptr, -1);
        end;

      if (make_this_ref_node_a_constant) then do;
	if (P_reference.c_symbol_ptr = null ())
	  then
	       P_reference.symbol_ptr = null ();
	P_reference.flags.cross_section = "0"b;
	P_reference.flags.constant = "1"b;
	P_reference.optional_info.n_subscripts = 0;
	P_reference.optional_info.n_arguments = 0;
        end;
      if P_reference.function then do;
	if P_reference.n_subscripts - P_reference.n_arguments ^= dimensions
	  then do;
	    call probe_error_$record (probe_info_ptr, probe_et_$wrong_dims,
	         P_reference.name);
	    goto RECORDED_MESSAGE;
	  end;

	if P_reference.type ^= entry_dtype
	     & P_reference.type ^= int_entry_runtime_dtype
	     & P_reference.type ^= ext_entry_runtime_dtype
	     & P_reference.type ^= ext_procedure_runtime_dtype then do;

	    call probe_error_$record (probe_info_ptr, probe_et_$wrong_dims,
	         P_reference.name);
	    goto RECORDED_MESSAGE;
	  end;

	if P_reference.cross_section
	  then goto BAD_CROSS_SECTION;
	ref_arg_list.number = P_reference.n_arguments;
	do i = 1 to P_reference.n_arguments;
	  ref_arg_list.node (i) = sub_refs.ptr (1, dimensions + i);
	end;

	if ^want_external_sw
	  then call probe_invoke_$function (probe_info_ptr, P_reference,
		  P_reference, P_code);
	return;
        end;
      return;

    end;


  if steps = -4 | steps = -1 then do;

      /* Symbol not found - but it may be a probe variable, or a builtin reference or a function call to an external entry */


      /* first look for probe variable */

      call probe_variable_mgr_$find_variable (probe_info_ptr,
	 addr (P_reference), code);
      if code = 0
        then
	   return;

      /* next try for a builtin */

      call probe_request_mgr_$find_builtin (probe_info_ptr,
	 (P_reference.name), builtin_entry, (null), code);
      if code = 0 then do;
	call builtin_entry (probe_info_ptr, addr (P_reference), code);
	if code ^= 0
	  then goto SOME_ERROR;
	P_reference.builtin = "1"b;
	return;
        end;


      /* that didn't work, so try for an external */

      if ^default_external_sw & index (P_reference.name, "$") = 0
        then go to NOT_FOUND;
GET_EXTERNAL:
      ref_source_info.entry_ptr = null ();
      call probe_find_procedure_ (probe_info_ptr, (P_reference.name),
	 (switches), addr (ref_source_info), (0));
      P_reference.address_ptr = ref_source_info.entry_ptr;
CHECK_EXTERNAL:
      if P_reference.address_ptr ^= null then do;

	P_reference.flags.constant = "1"b;
	if P_reference.n_arguments ^= P_reference.n_subscripts then do;
	    call probe_error_$record (probe_info_ptr, 0,
	         "The external entry ^a may not be subscripted",
	         P_reference.name);
	    goto RECORDED_MESSAGE;
	  end;
	if P_reference.n_arguments > 0 | P_reference.function then do;
	    P_reference.function = "1"b;
				/* just in case */
	    ref_arg_list.number = P_reference.n_arguments;
	    do i = 1 to P_reference.n_arguments;
	      ref_arg_list.node (i) = sub_refs.ptr (1, i);
	    end;
	  end;
	else if P_reference.invocation_level < 0
	  then P_reference.precision = P_reference.invocation_level;
	P_reference.type = ext_procedure_runtime_dtype;
				/* external procedure */
	P_reference.descriptor = ext_procedure_runtime_dtype * 2;
	if ^want_external_sw
	  then /* want a value of a function, not an entry ref for call */
	       call probe_invoke_$function (probe_info_ptr, P_reference,
		  P_reference, P_code);
	return;
        end;

    end;				/* symbol not declared */


  /* fall through - hopeless symbol */

NOT_FOUND:
  code = steps;			/* need a fixed bi (35) */
  call probe_cv_stu_code_ (code);
  call probe_error_$record (probe_info_ptr, code, P_reference.name);
  goto RECORDED_MESSAGE;


BAD_CROSS_SECTION:			/* general exit for bad cross sections */
  code = probe_et_$bad_section;
  goto SOME_ERROR;


RECORDED_MESSAGE:			/* general exit when we have recorded a message */
  code = probe_et_$recorded_message;
  goto SOME_ERROR;

SOME_ERROR:			/* general error exit */
  P_code = code;
  return;				/* end of main code for probe_eval_ */

do_subscripts:
  proc;

  do j = 1 to 1 + fixed (P_reference.cross_section, 1, 0);
    do i = 1 to dimensions;
      sub = sub_refs.ptr (j, i);
				/* presumably top of _n:_m */
      if sub = null
        then
	   ref_subscripts.value (j, i) = ref_subscripts.value (1, i);
				/* convert to fixed bin(24) */
        else do;
	if sub -> subscript.cross_section
	  then
	       goto BAD_CROSS_SECTION;
	if sub -> subscript.star_extent
	  then
	       ref_subscripts.value (j, i) = real_bounds (j, i);
	  else do;
	    ref_subscripts (j, i).value = convert_subscript (sub);
	    if ref_subscripts.value (j, i) < real_bounds (1, i) |
	         ref_subscripts.value (j, i) > real_bounds (2, i)
	      then
		 call ioa_$ioa_switch (probe_info.output_switch,
		      "subscript ^d outside range (^d:^d)",
		      i,
		      real_bounds (1, i),
		      real_bounds (2, i));
	  end;
        end;
    end;
  end;

  end do_subscripts;

convert_subscript:
  proc (refp) returns (fixed bin (24));

  /* given a pointer to a reference_node that is to be used in a subscript, convert its
   value to fixed bin (24), suitable for addressing the array --- or die trying */

  dcl refp		ptr parameter;

  dcl subv		fixed bin (24);
  dcl 1 subref		aligned like reference_node based (refp);

  dcl 1 eprec		aligned like encoded_precision;
  dcl (
      1 tar_str,
      1 src_str
      )			aligned like computational_data;

  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));

  dcl unspec		builtin;

  dcl code		fixed bin (35);


  tar_str.address = addr (subv);
  tar_str.data_type = real_fix_bin_1_dtype;
  tar_str.flags = "0"b;
  tar_str.prec_or_length = 24;
  tar_str.scale = 0;

  unspec (eprec) = unspec (subref.precision);

  src_str.address = subref.address_ptr;
  src_str.data_type = subref.type;
  src_str.flags = "0"b;
  src_str.flags.packed = subref.flags.packed;
  src_str.prec_or_length = eprec.prec;
  src_str.scale = eprec.scale;

  call assign_$computational_ (addr (tar_str), addr (src_str), code);

  if code ^= 0 then do;
      call probe_error_$record (probe_info_ptr, probe_et_$bad_subscript,
	 subref.name);
      goto RECORDED_MESSAGE;
    end;
  return (subv);

  end convert_subscript;

decode:
  proc (value, encoded) returns (fixed bin (35));

  dcl value		fixed bin (35);
  dcl encoded		bit (1);

  dcl stu_$decode_runtime_value_extended
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			ptr, fixed bin (35)) returns (fixed bin (35));
  dcl result		fixed bin (35);
  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));

  if ^encoded
    then
         return (value);

  if data_type_info_$info (P_reference.type).computational
    then
         result =
	    stu_$decode_runtime_value (P_reference.symbol_ptr
	    -> runtime_symbol.size, ref_source_info.block_ptr,
	    ref_source_info.stack_ptr,
	    (ref_source_info.seg_info_ptr -> seg_info.linkage_ptr),
	    P_reference.base_addr, P_reference.symbol_ptr, code);
    else /* PASCAL extended encoded  */
         result =
	    stu_$decode_runtime_value_extended (P_reference.precision,
	    ref_source_info.block_ptr,
	    ref_source_info.stack_ptr,
	    (ref_source_info.seg_info_ptr -> seg_info.linkage_ptr),
	    ref_source_info.block_ptr, P_reference.base_addr,
	    P_reference.symbol_ptr, code);

  if code ^= 0
    then go to SOME_ERROR;
  return (result);
  end decode;

qualifier_name:
  proc (P_ptr) returns (char (256) varying);

  dcl (P_ptr, p)		ptr;
  dcl name		char (256) varying;

  /* Note that we don't call here runtime_symbol_info_ : there are no based variables in PASCAL */

  p = addrel (P_ptr, P_ptr -> runtime_symbol.location);
  name = addrel (p, p -> runtime_symbol.name) -> acc.string;
  do while (fixed (p -> runtime_symbol.level, 6) > 1);
				/* print fathers */
    p = addrel (p, p -> runtime_symbol.father);
    name = addrel (p, p -> runtime_symbol.name) -> acc.string || "." || name;
  end;
  return (name);

  end qualifier_name;


  /*	INCLUDE FILES	*/

%include probe_lang_types;
%include probe_info;

  /* ;;;;;;; */

%include computational_data;

  /* ;;;;;;; */

%include probe_references;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include runtime_symbol;

  /* ;;;;;;; */


%include acc;

  /* ;;;;;;; */


%include encoded_precision;

  /* ;;;;;;; */

%include std_descriptor_types;

  /* ;;;;;;; */

%include stu_frame;

%include probe_seg_info;

%include data_type_info_;

%include runtime_symbol_info_;
  end;				/* probe_evaluate_ external procedure */

