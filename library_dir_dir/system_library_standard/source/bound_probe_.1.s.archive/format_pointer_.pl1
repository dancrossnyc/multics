/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(1988-09-07,WAAnderson), approve(1988-09-30,MCR7952),
     audit(1988-09-30,JRGray), install(1988-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  2) change(2017-02-16,GDixon), approve(2017-02-20,MCR10035),
     audit(2017-02-28,Swenson), install(2017-02-28,MR12.6f-0022):
     Improve validation of packed pointers.  Call interpret_ptr_ to get better
     match for entrypoint pointers.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

format_pointer_:
  procedure ();

  /* *	FORMAT_POINTER_ 
   * 
   *	Converts a pointer value to a printable representation.
   *
   *	After probe_check_ptr_, sort of.
   * 
   *      12 Sep 83, B. Braun:
   *         Changed to call amu_$get_name_for_structure when used by 
   *	   analyze_multics.
   *	03 Jun 83, W. Olin Sibert:
   */

  declare P_its_ptr		    pointer parameter;
  declare P_packed_ptr	    unaligned pointer parameter;
  declare P_name_sw		    bit (1) aligned parameter;
  declare P_amu_info_ptr	    pointer parameter;

  declare packed_sw		    bit (1) aligned;
  declare pointer_rep	    char (256) varying;
  declare valid		    bit (1) aligned;
  declare real_segment	    bit (1) aligned;
  declare seg_ptr		    pointer;

  declare 1 alias		    aligned internal static,
	 2 count		    fixed bin init (0),
	 2 array		    (25),
	  3 short_name	    char (32) varying,
	  3 long_name	    char (60) varying;

  declare error_table_$invalidsegno
			    fixed bin (35) external static;

  declare amu_$get_name_for_structure
			    entry (ptr, char (*) varying)
			    returns (char (*) varying),
	convert_status_code_    entry (fixed bin (35),
			    char (8) aligned, char (100) aligned);
  declare expand_pathname_	    entry (char (*), char (*), char (*),
			    fixed bin (35));
  declare get_pdir_		    entry () returns (char (168));
  declare hcs_$fs_get_path_name   entry (pointer,
			    char (*), fixed bin, char (*),
			    fixed bin (35));
  declare hcs_$high_low_seg_count entry (fixed bin, fixed bin);
  declare hcs_$status_long	    entry (char (*), char (*),
			    fixed bin (1), pointer, pointer,
			    fixed bin (35));
  declare interpret_ptr_	    entry (ptr, ptr, ptr);
  declare ioa_$rsnnl	    entry options (variable);
  declare ring0_get_$name	    entry (char (*), char (*), pointer,
			    fixed bin (35));

  declare (stringsize, error)	    condition;

  declare (addr, after, baseno, binary, char, index, max, null, rtrim,
	unspec)		    builtin;

  /*  */

format_pointer_$its:
  entry (P_its_ptr, P_name_sw, P_amu_info_ptr)
       returns (char (256) varying);

  packed_sw = "0"b;
  call edit_its_pointer (P_its_ptr, pointer_rep, valid, real_segment);
  goto CONVERT_POINTER_COMMON;



format_pointer_$packed:
  entry (P_packed_ptr, P_name_sw, P_amu_info_ptr)
       returns (char (256) varying);

  packed_sw = "1"b;
  call edit_packed_pointer (P_packed_ptr, pointer_rep, valid, real_segment);
  goto CONVERT_POINTER_COMMON;


CONVERT_POINTER_COMMON:
  if ^valid then do;
      pointer_rep = pointer_rep || " [invalid]";
      return (pointer_rep);
    end;

  if ^real_segment
    then
         return (pointer_rep);

  if ^P_name_sw
    then
         return (pointer_rep);

  /* This should, by rights, use the amu_ name resolution facility, but there
   isn't one yet, so instead it just gives up if there's an amu_info_ptr. */

  if P_amu_info_ptr ^= null then do;	/* used by analyze_multics */
      pointer_rep = amu_$get_name_for_structure (P_amu_info_ptr, pointer_rep);
      return (pointer_rep);
    end;
				/* Otherwise, we determine the name in the current address space and add it */

  if packed_sw then do;				/* Since we know it's valid now,		      */
      seg_ptr = P_packed_ptr;				/*   Convert packed to aligned ptr. 		      */
      call  add_segment_name (seg_ptr, pointer_rep);
    end;
  else call add_segment_name (P_its_ptr, pointer_rep);	/* Pass our input ptr, rather than a copy.  For some    */
						/*  interpretation, location of pointer storage         */
						/*  affects its interpretation.		      */
  return (pointer_rep);

  /*  */

edit_its_pointer:
  procedure (P_its_ptr, P_rep, P_valid, P_real_segment);


  declare P_its_ptr		    pointer parameter;
  declare P_rep		    char (256) varying parameter;
  declare P_valid		    bit (1) aligned parameter;
  declare P_real_segment	    bit (1) aligned parameter;

  declare 1 its_ptr		    aligned like its_unsigned;
  declare 1 itp_ptr		    aligned like itp_unsigned;
  declare 1 ge_ptr		    aligned,
	 2 offset		    bit (18) unaligned,
	 2 tally		    bit (12) unaligned,
	 2 mod		    fixed bin (6) unsigned unaligned;


  /* format: off */
declare   MODIFIERS (0 : 63) char (3) aligned internal static options (constant) initial
         ("   ", "au ", "qu ", "du ", "ic ", "al ", "ql ", "dl ",
          "x0 ", "x1 ", "x2 ", "x3 ", "x4 ", "x5 ", "x6 ", "x7 ",
	"n* ", "au*", "qu*", "23 ", "ic*", "al*", "ql*", "27 ",
	"x0*", "x1*", "x2*", "x3*", "x4*", "x5*", "x6*", "x7*",
	"f1 ", "itp", "42 ", "its", "sd ", "scr", "f2 ", "f3 ",
	"ci ", "i  ", "sc ", "ad ", "di ", "dic", "id ", "idc",
	"*n ", "*au", "*qu", "*du", "*ic", "*al", "*ql", "*dl",
	"*x0", "*x1", "*x2", "*x3", "*x4", "*x5", "*x6", "*x7");
/* format: on */


  unspec (its_ptr) = unspec (P_its_ptr);
  unspec (itp_ptr) = unspec (P_its_ptr);
  unspec (ge_ptr) = unspec (P_its_ptr);

  P_real_segment = "0"b;
  P_rep = "";

  P_valid = "0"b;

  if (its_ptr.its_mod = ITS_MODIFIER) then do;
      if (its_ptr.segno = 32767) & (its_ptr.mod = ""b)
        then
	   call ioa_$rsnnl ("null^[(^o^[^o^;^s^])^]",
	        P_rep, (0), (its_ptr.offset ^= 1), its_ptr.offset,
	        (its_ptr.bit_offset ^= 0), its_ptr.bit_offset);

        else do;
	call ioa_$rsnnl ("^o|^o^[(^d)^;^s^]^[[^d]^;^s^]^[,^a^]",
	     P_rep, (0), its_ptr.segno, its_ptr.offset,
	     (its_ptr.bit_offset ^= 0), its_ptr.bit_offset,
	     ((its_ptr.ringno ^= 0) & (its_ptr.ringno ^= 4)),
	     its_ptr.ringno, (its_ptr.mod ^= ""b),
	     MODIFIERS (binary (its_ptr.mod, 6)));
	if (its_ptr.segno < 4093)
	  then P_real_segment = "1"b;
        end;

      if (its_ptr.segno < 4095) | (its_ptr.segno = 32767)
        then
	   if (its_ptr.bit_offset < 36)
	     then
		P_valid = "1"b;
    end;

  else if (its_ptr.its_mod = ITP_MODIFIER) then do;
      call ioa_$rsnnl ("pr^o|^o^[(^d^;^s)^]^[,^a^] (ITP)",
	 P_rep, (0), itp_ptr.pr_no, itp_ptr.offset,
	 (itp_ptr.bit_offset ^= 0), itp_ptr.bit_offset,
	 (itp_ptr.mod ^= ""b), MODIFIERS (binary (itp_ptr.mod, 6)));

      if (itp_ptr.bit_offset < 36)
        then P_valid = "1"b;
    end;

  else if (its_ptr.its_mod = FAULT_TAG_2) then do;	/* Unsnapped link is not a valid pointer, but can	        */
      strp = addr(strbuf);				/*  be interpreted in many cases.		        */
      call interpret_ptr_(P_its_ptr, null, strp);		/* Ask interpret_ptr_ to help with this.	        */
      if struc.segment ^= "" & struc.entryn ^= "" then do;
        call ioa_$rsnnl ("^o|^o  ^a^a [unsnapped link]", P_rep, (0), 
	   addr(P_its_ptr)->object_link.header_relp, addr(P_its_ptr)->object_link.expression_relp,
	   struc.segment, struc.entryn);
        P_valid = "1"b;
        end;
      else go to not_unsnapped_link;
    end;

  else do;
not_unsnapped_link:
    call ioa_$rsnnl ("^o(^o)^[,^a^]",
         P_rep, (0), ge_ptr.offset, ge_ptr.tally,
         (ge_ptr.mod ^= 0), MODIFIERS (ge_ptr.mod));
  end;
  return;
  end edit_its_pointer;

  /*  */

edit_packed_pointer:
  procedure (P_packed_ptr, P_rep, P_valid, P_real_segment);


  declare P_packed_ptr	    unaligned pointer parameter;
  declare P_rep		    char (256) varying parameter;
  declare P_valid		    bit (1) aligned parameter;
  declare P_real_segment	    bit (1) aligned parameter;

  declare fault_type	    fixed bin;

  declare 1 packed_ptr	    aligned,
	 2 bit_offset	    fixed bin (6) unsigned unaligned,
	 2 segno		    fixed bin (12) unsigned unaligned,
	 2 offset		    fixed bin (18) unsigned unaligned;

  declare 1 packed_ptr_fault	    aligned,
	 2 pad		    bit (9) unaligned,
	 2 type		    fixed bin (9) unaligned unsigned,
	 2 offset		    fixed bin (18) unsigned unaligned;


  unspec (packed_ptr) = unspec (P_packed_ptr);
  unspec (packed_ptr_fault) = unspec (P_packed_ptr);

  P_valid = (packed_ptr.bit_offset < 36) & (unspec(P_packed_ptr) ^= "0"b);
						/* Not much else to check here.  An all-zero packed ptr   */
						/* is likely an unset word in a zeroed memory area.       */
  P_real_segment = "0"b;
  P_rep = "";

  if (packed_ptr.bit_offset < 48)
    then
         fault_type = 0;
    else fault_type = 1 + max (3, packed_ptr_fault.type);

  if P_valid & (packed_ptr.segno = 4095)
    then
         call ioa_$rsnnl ("null^[(^o^[^o^;^s^])^]",
	    P_rep, (0), (packed_ptr.offset ^= 1), packed_ptr.offset,
	    (packed_ptr.bit_offset ^= 0), packed_ptr.bit_offset);

    else do;
      call ioa_$rsnnl (
	 "^o|^o^[(^d)^;^s^]^[ (^[LOT fault^;ISOT fault^;System fault^;faulted^])^]",
	 P_rep, (0), packed_ptr.segno, packed_ptr.offset,
	 (packed_ptr.bit_offset ^= 0), packed_ptr.bit_offset,
	 (fault_type ^= 0), fault_type);
      if (fault_type = 0)
        then
	   if (packed_ptr.segno < 4093)
	     then P_real_segment = "1"b;
    end;
  return;
  end edit_packed_pointer;

  /*  */

add_segment_name:
  procedure (P_seg_ptr, P_rep);


  declare P_seg_ptr		    pointer;
  declare P_rep		    char (256) varying;

  declare dname		    char (168);
  declare ename		    char (32);
  declare long_info		    char (100) aligned;
  declare idx		    fixed bin;
  declare code		    fixed bin (35);
  declare first_stack	    fixed bin;
  declare last_seg		    fixed bin;

  strp = addr(strbuf);				/* Ask interpret_ptr_ to help evaluating pointer.	        */
  call interpret_ptr_(P_seg_ptr, null, strp);
  if struc.segment ^= "" & struc.entryn ^= "" then do;
      P_rep = P_rep || "   " || rtrim(struc.segment) || rtrim(struc.entryn);
      return;					/*   If it offers an interpretation, then we're done.     */
    end;

  call initialize_aliases ();

  call hcs_$high_low_seg_count (last_seg, first_stack);
  last_seg = last_seg + first_stack;

  if (binary (baseno (P_seg_ptr)) < first_stack)
    then /* hardcore segment */
         call ring0_get_$name (dname, ename, P_seg_ptr, code);
    else call hcs_$fs_get_path_name (P_seg_ptr, dname, (0), ename, code);

  if (code = error_table_$invalidsegno) then do;
      P_rep = P_rep || " (Invalid segment number)";
      return;
    end;

  if (code ^= 0) then do;		/* get a string describing error */
      call convert_status_code_ (code, (""), long_info);
      P_rep = P_rep || " (Error: ";
      P_rep = P_rep || rtrim (long_info);
      P_rep = P_rep || ")";
      return;
    end;

  P_rep = P_rep || "   ";		/* append the pathname */

  if (dname = "") then do;		/* ring zero segment */
      P_rep = P_rep || rtrim (ename);
      P_rep = P_rep || " (ring 0)";
      return;
    end;

  do idx = 1 to alias.count;		/* Interpret aliases */
    if (dname = alias.long_name (idx)) then do;
        P_rep = P_rep || alias.short_name (idx);
        P_rep = P_rep || ">";
        P_rep = P_rep || rtrim (ename);
        return;
      end;
  end;

  P_rep = P_rep || rtrim (dname);	/* If no alias found, then just add the path */
  P_rep = P_rep || ">";		/* The alias hack takes care of the ROOT */
  P_rep = P_rep || rtrim (ename);
  return;
  end add_segment_name;

  /*  */

initialize_aliases:
  procedure ();


  declare pdir_name		    char (168);


  if (alias.count > 0)
    then
         return;			/* We've already been here */

  call add_alias (">", "");		/* So the ROOT doesn't come out with ">>" */

  pdir_name = get_pdir_ ();
  call add_alias (pdir_name, "[pd]");
  if (index (pdir_name, ">process_dir_dir>") = 1) then do;
      pdir_name = ">pdd>" || after (pdir_name, ">process_dir_dir>");
      call add_alias (pdir_name, "[pd]");
    end;

  call add_alias (">process_dir_dir>!zzzzzzzbBBBBBB", "[Inzr PD]");

  call add_alias (">system_control_1", ">sc1");
  call add_alias (">system_library_1", ">sl1");
  call add_alias (">system_library_standard", ">sss");
  call add_alias (">system_library_unbundled", ">unb");
  call add_alias (">system_library_tools", ">tools");
  call add_alias (">system_library_auth_maint", ">am");
  call add_alias (">user_dir_dir", ">udd");
  call add_alias (">process_dir_dir", ">pdd");
  call add_alias (">library_dir_dir", ">ldd");
  call add_alias (">daemon_dir_dir", ">ddd");
  return;
  end initialize_aliases;

  /*  */

add_alias:
  procedure (P_long, P_short) options (non_quick);
				/* Non-quick because it's used only once */

  declare P_long		    char (*) parameter;
  declare P_short		    char (*) parameter;

  declare 1 dir_status	    aligned like status_branch;

  declare dname		    char (168);
  declare ename		    char (32);
  declare idx		    fixed bin;
  declare code		    fixed bin (35);
  declare short_uid		    bit (36) aligned;
  declare long_uid		    bit (36) aligned;


  idx = alias.count + 1;		/* Next entry */

(subscriptrange):			/* To detect overflows of the array */
(stringsize):
  begin;
    on condition (stringsize) signal error;
				/* Braindamaged default handler */

    alias.short_name (idx) = rtrim (P_short);
    alias.long_name (idx) = rtrim (P_long);
  end;

  if (char (P_short, 1) ^= ">") then do;/* don't check aliases that are not directories */
      alias.count = idx;		/* update the count */
      return;			/* all done */
    end;

  call expand_pathname_ (P_long, dname, ename, code);
  if (code ^= 0)
    then
         return;			/* Just punt on any errors */

  call hcs_$status_long (dname, ename, (0), addr (dir_status), (null ()),
       code);
  if (code ^= 0)
    then
         return;

  long_uid = dir_status.uid;

  call expand_pathname_ (P_short, dname, ename, code);
  if (code ^= 0)
    then
         return;

  call hcs_$status_long (dname, ename, (0), addr (dir_status), (null ()),
       code);
  if (code ^= 0)
    then
         return;

  short_uid = dir_status.uid;

  if (short_uid ^= long_uid)
    then
         return;

  alias.count = idx;
  return;

  end add_alias;

%page;
%include its;
%page;
%include object_link_dcls;
%page;
%include status_structures;
%page;
  declare strp		    ptr;

%include interpret_ptr_struc;

  end format_pointer_;
