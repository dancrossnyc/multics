/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_get_line_:
  proc (P_probe_info_ptr, P_new_source_info_ptr, P_invocation, P_switches,
       P_data_type, P_code);

  /* parse a LINE

   that can be
   $b			current breakpint line
   $c			current_source_ptr
   NN			line NN current proc
   MM-NN			line NN in file MM
   $label			a label that resembles a number
   label(x)		label variable or constant, may be subscripted

   any of these may be followed by an optional ,s
   which is a relative displacement in statements

   james R. Davis  25 June 79
   modified last on 2 Oct 79 */
  /* Fixed to use line number in an active frame if any 08/27/81 S. Herbst */
  /* Fixed to use first instruction in component if no entrypoint 09/22/81 S. Herbst */
  /* Modified June 83 JMAthane to replace references to "runtime_symbol" structure
   by calls to "runtime_symbol_info_" subroutine. */
  /* Added version strings to runtime_symbol_info_ structures 10/06/83 S. Herbst */
  /* Fixed references of the form LINE,N (N'th stmt on line) 03/12/84 S. Herbst */


  dcl (
      P_probe_info_ptr	pointer,
      P_new_source_info_ptr	ptr,
      P_invocation		fixed bin,
      P_switches		bit (36) aligned,
      P_data_type		fixed bin,/* output: data type found */
      P_code		fixed bin (35)
      )			parameter;

  dcl switches		bit (36) unaligned;

  dcl 1 new_source_info	aligned like source_info
			based (new_source_info_ptr);
  dcl new_source_info_ptr	ptr;
  dcl first_instr_ptr	ptr;
  dcl stmt		fixed bin;
  dcl code		fixed bin (35);
  dcl saved_ct		ptr;	/* so we can restore if error */

  dcl stu_$get_map_index	entry (ptr, fixed bin (18) unsigned, fixed bin,
			ptr);
  dcl stu_$get_statement_map	entry (ptr, ptr, ptr, fixed bin);

  dcl probe_get_$integer	entry (ptr, fixed bin, fixed bin (35));

  dcl probe_error_$record	entry options (variable);

  dcl (
      probe_et_$none_active,
      probe_et_$bad_line,
      probe_et_$bad_line_syntax,
      probe_et_$recorded_message
      )			fixed bin (35) external static;

  dcl (addr, addrel, after, binary, null, rel, substr, unspec, verify)
			builtin;
%page;

  probe_info_ptr = P_probe_info_ptr;
  new_source_info_ptr = P_new_source_info_ptr;
  switches = P_switches;
  P_data_type = label_constant_runtime_dtype;
				/* true for most */
  P_code = 0;
  code = 0;

  saved_ct = probe_info.ct;		/* in case of error */

  if probe_info.ct -> token.type = CONSTANT_TYPE
    then
      begin;
      dcl file		    fixed bin;
      dcl line		    fixed bin;
      dcl probe_find_location_    entry (ptr, ptr, fixed bin, fixed bin,
			    fixed bin, bit (36) aligned, ptr, fixed bin)
			    ;

      call probe_get_$integer (probe_info_ptr, line, code);
      if code ^= 0
        then goto BAD_LINE;
      if probe_info.ct -> token.type = MINUS &
	 ^probe_info.ct -> token.leading_whitespace then do;
				/* avoid LL -bf, accept FF-LL */
	file = line;		/* FF-LL */
	call bump_ct ();
	if probe_info.ct -> token.type ^= CONSTANT_TYPE
	  then goto BAD_LINE;
	call probe_get_$integer (probe_info_ptr, line, code);
	if code ^= 0
	  then goto BAD_LINE;
        end;
        else file = 0;

      if probe_info.execute then do;
	new_source_info = current_source;
	call probe_find_location_ (probe_info_ptr,
	     (new_source_info.seg_info_ptr),
	     (file), (line), 1, (switches), (null),
	     new_source_info.stmnt_map_entry_index);
	if new_source_info.stmnt_map_entry_index = -1
	  then go to BAD_LINE_NUMBER;
        end;			/* execute */
    end;				/* LINE CASE */
  else if probe_info.ct -> token.type = NAME_TYPE then do;
      if substr (current_identifier_name, 1, 1) = "$" then do;
	if current_identifier_name = "$c"
	  then
	       if probe_info.execute
	         then new_source_info = current_source;
	         else ;		/* not executing */
	else if current_identifier_name = "$b"
	  then
	       if probe_info.execute
	         then if probe_info.break_slot_ptr = null ()
		      then do;
		        code = probe_et_$none_active;
		        goto SOME_ERROR;
		      end;
		      else new_source_info = initial_source;
				/* what caused the break */
	         else ;		/* not executing */
	else
	  begin;			/* must be $NNN FORTRAN line number */
	  dcl stu_$find_runtime_symbol
				entry (ptr, char (*), ptr,
				fixed bin (35)) returns (ptr);
	  dcl probe_cv_stu_code_	entry (fixed bin (35));
	  dcl symbp		ptr;
				/* to the symbol found */
	  dcl label_name		char (64) varying;
	  dcl DIGITS		char (10) aligned internal
				static options (constant)
				init ("0123456789");
	  dcl 1 type_info		like runtime_type_info;
	  dcl 1 address_info	like runtime_address_info;

	  label_name = after (current_identifier_name, "$");
	  if label_name = ""
	    then goto BAD_LINE;
	  if verify (label_name, DIGITS) ^= 0
	    then goto BAD_LINE;

	  if probe_info.execute then do;
	      new_source_info = current_source;
	      symbp =
		 stu_$find_runtime_symbol ((current_source.block_ptr),
		 (label_name),
		 new_source_info.block_ptr, code);
	      if symbp = null () then do;
		call probe_cv_stu_code_ (code);
		call probe_error_$record (probe_info_ptr, code,
		     label_name);
		goto RECORDED_MESSAGE;
	        end;

	      type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	      call runtime_symbol_info_$type (symbp, addr (type_info), code)
		 ;
	      if code ^= 0
	        then go to SOME_ERROR;

	      P_data_type = type_info.type;

	      if P_data_type ^= label_constant_runtime_dtype then do;
		call probe_error_$record (probe_info_ptr, 0,
		     """^a"" is not a statement label", label_name);
		goto RECORDED_MESSAGE;
	        end;

	      address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;

	      call runtime_symbol_info_$address (symbp, addr (address_info),
		 code);
	      if code ^= 0
	        then go to SOME_ERROR;

	      call stu_$get_map_index
		 ((current_source.seg_info_ptr
		 -> seg_info.symbol_header_ptr),
		 (address_info.location),
		 new_source_info.stmnt_map_entry_index, (null));

	      if new_source_info.stmnt_map_entry_index = -1 then do;
		call probe_error_$record (probe_info_ptr, 0,
		     "Could not find location for $^a", label_name);
		goto RECORDED_MESSAGE;
	        end;
	    end;			/* execute */
	end;			/* $NNN CASE */

	call bump_ct ();		/* past the $thing */
        end;			/* $ hackers */
        else
	begin;			/* some other name type - a real name */

	dcl where		        ptr;
				/* to the code referenced */
	dcl based_label	        label variable based;
	dcl 1 label_var	        aligned,
	     2 place	        ptr,
	     2 frame	        ptr;
	dcl label_vector_tv	        bit (18) aligned based;
				/* for label array */

	dcl probe_create_reference_ entry (ptr, ptr);
	dcl probe_get_$value        entry (ptr,
			        1 aligned like reference_node,
			        bit (36) aligned, fixed bin (35));
	dcl probe_seg_info_	        entry (ptr, ptr, fixed bin (35))
			        returns (ptr);


	call probe_create_reference_ (probe_info_ptr, ref_block_ptr);
	ref_block.source_info_ptr = new_source_info_ptr;

	call probe_get_$value (probe_info_ptr, ref_block.ref_node,
	     (switches), code);
	if code ^= 0
	  then goto BAD_LOCATION;

	if probe_info.execute then do;/* must get location */

	    P_data_type = ref_block.ref_node.type;

	    if ref_block.ref_node.type = label_constant_runtime_dtype
	      then do;
	        where = ref_block.ref_node.address_ptr;

	        /* label array constants are implemented as an array of tra LOC,ic  */

	        if runtime_symbol_info_$array_dims (ref_block.ref_node
		   .symbol_ptr) ^= 0
		then where = addrel (where, where -> label_vector_tv);
	      end;		/* label constant */

	    else if new_source_info.stmnt_map_entry_index > 0
	      then
		 go to GET_INVOCATION;
				/* already have line number from an active frame */

	    else if ref_block.ref_node.type = label_dtype |
	         ref_block.ref_node.type = entry_dtype then do;

	        unspec (label_var) =
		   unspec (ref_block.ref_node.address_ptr -> based_label);
	        where = label_var.place;

	        /* this could be in another segment, so must get info */

	        new_source_info.seg_info_ptr =
		   probe_seg_info_ (probe_info_ptr, where, code);
	        if code ^= 0
		then goto SOME_ERROR;
	      end;		/* label variable */
	    else if ref_block.ref_node.type = int_entry_runtime_dtype |
	         ref_block.ref_node.type = ext_entry_runtime_dtype |
	         ref_block.ref_node.type = ext_procedure_runtime_dtype
	      then
		 where = ref_block.ref_node.address_ptr;
	    else do;		/* some other dtype */
	      call probe_error_$record (probe_info_ptr, 0,
		 """^a"" is not a label or entry value",
		 ref_block.ref_node.name);
	      goto RECORDED_MESSAGE;
	    end;

	    /* now where is set up */

	    call stu_$get_map_index
	         ((new_source_info.seg_info_ptr
	         -> seg_info.symbol_header_ptr),
	         binary (rel (where)),
	         new_source_info.stmnt_map_entry_index, (null));
	    if new_source_info.stmnt_map_entry_index = -1 then do;
	        call stu_$get_statement_map
		   /* use first instruction in the component instead */
		   ((new_source_info.seg_info_ptr
		   -> seg_info.symbol_header_ptr),
		   first_instr_ptr, (null), (0));
	        if first_instr_ptr ^= null
		then new_source_info.stmnt_map_entry_index = 1;
		else do;
		  call probe_error_$record (probe_info_ptr, 0,
		       "Can't get statement map of ^a",
		       ref_block.ref_node.name);
		  goto RECORDED_MESSAGE;
		end;
	      end;
GET_INVOCATION:
	    if ref_block.ref_node.invocation_level ^= 0
				/* we were presumably called from get_generation_ */
	      then P_invocation = ref_block.ref_node.invocation_level;

	  end;			/* executeing NAME */
        end;			/* trying to get value */
    end;				/* NAME TYPE CASE */
  else goto BAD_LINE;

  /* now source_info.seg_info_ptr and stmnt_map_entry_ptr are set */

  stmt = 0;
  if probe_info.ct -> token.type = COMMA then do;


      call bump_ct ();

      /* Want the N'th statement starting at the specified line */

      if probe_info.ct -> token.type ^= CONSTANT_TYPE
        then goto BAD_LINE;
      call probe_get_$integer (probe_info_ptr, stmt, code);
      if code ^= 0 then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "A relative statement number must follow the comma in a LINE. Type ""help LINE""."
	     );
	goto RECORDED_MESSAGE;
        end;
      stmt = stmt - 1;		/* convert to relative position, eg. N,1 = N */
    end;				/* COMMA hacking */

  if probe_info.ct -> token.type < OPERATOR_TYPE
    then goto BAD_LINE;

  /* now find block, stack, etc. given the above info */


  dcl probe_source_segment_$position_source
			entry (ptr, ptr, fixed bin, fixed bin (35));

  if probe_info.execute
    then call probe_source_segment_$position_source
	    (probe_info_ptr, new_source_info_ptr, stmt, code);

MAIN_RETURN:
  P_code = code;
  return;


  /* HERE ARE ERROR LABELS */

BAD_LINE:
  call probe_error_$record (probe_info_ptr, probe_et_$bad_line_syntax);
  goto RECORDED_MESSAGE;

BAD_LINE_NUMBER:
  call probe_error_$record (probe_info_ptr, probe_et_$bad_line);
  go to RECORDED_MESSAGE;

BAD_LOCATION:
  call probe_error_$record (probe_info_ptr, 0,
       "Can't get location of ^a", ref_block.ref_node.name);
  go to RECORDED_MESSAGE;

RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto SOME_ERROR;

SOME_ERROR:
  P_code = code;

  probe_info.ct = saved_ct;		/* restore, cause we  failed */
  return;





bump_ct:
  proc;
  probe_info.ct = probe_info.ct -> token.next;
  end bump_ct;
%page;
%include probe_info;
%page;
%include probe_operators;
%page;
%include probe_ref_block;
%page;
%include probe_references;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include probe_tokens;
%page;
%include runtime_symbol;
%page;
%include runtime_symbol_info_;
%page;
%include statement_map;
%page;
%include std_descriptor_types;


  end probe_get_line_;
