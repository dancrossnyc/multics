/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  2) change(88-10-21,WAAnderson), approve(88-10-21,MCR7952),
     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
     Modified code to implement a C feature. If the user specifes 'seg' instead
     of 'seg$main', probe will now assume the user wants 'seg$main' if no
     statement map is found for 'seg'.  This is not particularily elegant
     because it will try using the 'seg$main' convention for any object,
     regardless of the compiler used to generate the object.  There was a
     problem getting back the error code 'probe_et_$no_map' from
     'probe_seg_info_' when no statement map existed.  To make the
     necessary change to 'probe_seg_info_' , the probe_info.entry_method'
     was set to 1, to act as a flag. Other modules affected to implement
     this feature are 'probe_command_' and 'probe_seg_info_'. The include
     'probe_info.incl.pl1' was modified to include the new file
     'retry_using_main'.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_find_procedure_:
  proc (P_probe_info_ptr, P_procedure_name, P_switches, P_sourcep, P_code);

  /* given a name, get a source_info for it */
  /* Changed to accept all kinds of virtual entries 09/11/81 S. Herbst */
  /* Changed to suppress foo|0 msg unless entry point specified, use component base if bound 09/21/81 S. Herbst */
  /* Changed refname warning to include the path that the refname DOES refer to 10/18/82 S. Herbst */
  /* Fixed bug that uses initiated copy despite pathname specified 05/02/84 S. Herbst */

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_procedure_name	char (*) parameter;
				/* may be refname, abspathname or relpathname */
  dcl P_switches		bit (36) aligned parameter;
  dcl P_sourcep		ptr parameter;
  dcl P_code		fixed bin (35) parameter;

  dcl switches		bit (36);
  dcl want_external_sw	bit (1) unaligned defined (switches) pos (1);
  dcl default_external_sw	bit (1) unaligned defined (switches) pos (2);
  dcl default_offset_zero_sw	bit (1) unaligned defined (switches) pos (3);

  dcl (segp, unique_refname_ptr)
			ptr;
  dcl assume_ref		bit (1) aligned;
				/* did give explicit path or are we using ref name */
  dcl (actual_dn, dir_name)	char (168);
				/* name of containing dir */
  dcl pathname		char (210);
  dcl (actual_en, entry_name, refname, segname, unique_refname)
			char (32);
  dcl entry_point		char (32);
  dcl explicit_entry_sw	bit (1) aligned;
  dcl code		fixed bin (35);
  dcl offset		fixed bin (18) unsigned;
  dcl offset_string		char (32);
  dcl sourcep		ptr;	/* to source_ptr we'll build */
  dcl hp			ptr;	/* to symbol_header */

  dcl probe_seg_info_	entry (ptr, ptr, fixed bin (35)) returns (ptr);
  dcl probe_stack_trace_$find_proc_frame
			entry (ptr, ptr, ptr, fixed bin);
  dcl probe_error_$record	entry options (variable);
  dcl probe_error_$warning	entry options (variable);

  dcl component_info_$name	entry (ptr, char (32) aligned, ptr,
			fixed bin (35));
  dcl cv_oct_check_		entry (char (*), fixed bin (35))
			returns (fixed bin);
  dcl stu_$get_map_index	entry (ptr, fixed bin (18) unsigned, fixed bin,
			ptr);
  dcl stu_$find_containing_block
			entry (ptr, fixed bin (18) unsigned)
			returns (ptr);
  dcl expand_pathname_	entry (char (*), char (*), char (*),
			fixed bin (35));
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl hcs_$initiate		entry (char (*), char (*), char (*),
			fixed bin (1), fixed bin (2), ptr,
			fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl hcs_$make_ptr		entry (ptr, char (*), char (*), ptr,
			fixed bin (35));
  dcl term_$single_refname	entry (char (*), fixed bin (35));
  dcl unique_chars_		entry (bit (*)) returns (char (15));

  dcl (
      probe_et_$recorded_message,
      probe_et_$no_map,
      error_table_$namedup,
      error_table_$no_ext_sym
      )			fixed bin (35) external static;

  dcl (addr, after, before, fixed, index, null, ptr, rel, search)
			builtin;
				/*  */

  probe_info_ptr = P_probe_info_ptr;
  sourcep = P_sourcep;
  switches = P_switches;

  offset_string = "";
  unique_refname_ptr = null;

  if search (P_procedure_name, "<>") ^= 0 then do;
				/* must be a path name */
      assume_ref = "0"b;
      if index (P_procedure_name, "$") ^= 0 then do;
	explicit_entry_sw = "1"b;
	pathname = before (P_procedure_name, "$");
	entry_point = after (P_procedure_name, "$");
        end;
      else if index (P_procedure_name, "|") ^= 0 then do;
	explicit_entry_sw = "1"b;
	pathname = before (P_procedure_name, "|");
	entry_point = "";
	offset_string = after (P_procedure_name, "|");
        end;
      else do;
        explicit_entry_sw = "0"b;
        pathname = P_procedure_name;
        entry_point = "";
      end;

      call expand_pathname_ (pathname, dir_name, entry_name, code);
      if code ^= 0 then do;
	call probe_error_$record (probe_info_ptr, code, "^a",
	     P_procedure_name);
	goto RECORDED_MESSAGE;
        end;

      segname = entry_name;
      if entry_point = ""
        then
	   entry_point = entry_name;

      call hcs_$initiate (dir_name, segname, entry_point, 0, 0, segp, code);
      if segp = null () then do;
CANT_INITIATE:
	call probe_error_$record (probe_info_ptr, code, "^a^[>^]^a^[$^a^]",
	     dir_name, (dir_name ^= ">"), segname, (segname ^= entry_point),
	     entry_point);
	goto RECORDED_MESSAGE;
        end;
      if code = error_table_$namedup then do;
				/* reference name already in use */
	unique_refname = unique_chars_ ("0"b);
	call hcs_$initiate (dir_name, segname, unique_refname, 0, 0,
	     unique_refname_ptr, code);
	if unique_refname_ptr = null
	  then go to CANT_INITIATE;
	call probe_error_$warning (probe_info_ptr, 0,
	     "Warning: ^a is not the initiated version of ^a",
	     pathname_ (dir_name, segname), segname);
        end;
    end;				/* pathname */

    else do;			/* assume ref name */
      assume_ref = "1"b;
      if index (P_procedure_name, "$") ^= 0 then do;
	explicit_entry_sw = "1"b;
	segname = before (P_procedure_name, "$");
	entry_point = after (P_procedure_name, "$");
	if entry_point = ""
	  then
	       entry_point = segname;
        end;
      else if index (P_procedure_name, "|") ^= 0 then do;
	explicit_entry_sw = "1"b;
	pathname = before (P_procedure_name, "|");
	entry_point = "";
	offset_string = after (P_procedure_name, "|");
        end;
      else do;
        explicit_entry_sw = "0"b;
        segname = P_procedure_name;
        entry_point = P_procedure_name;
      end;
    end;				/* of getting ref name */

  /* now segname and entry_point are set, so lets try to find the
   specific entry in mind. */

  if offset_string ^= "" then do;	/* path|N */
      segp = ptr (segp, cv_oct_check_ (offset_string, code));
      if code ^= 0 then do;
	call probe_error_$record (probe_info_ptr, code, "Bad offset ^a",
	     offset_string);
	go to RECORDED_MESSAGE;
        end;
    end;
    else do;
      if unique_refname_ptr ^= null
        then refname = unique_refname;
        else refname = segname;

      call hcs_$make_ptr (null (), refname, entry_point, segp, code);
      if code = error_table_$no_ext_sym & default_offset_zero_sw then do;
				/* warn user, and use whole seg */
	call hcs_$make_ptr (null (), refname, "", segp, (0));
	if segp ^= null then do;
	    call component_info_$name (segp, (segname), addr (ci), code);
	    if code = 0
	      then
		 if ci.text_start ^= null & ci.text_start ^= segp then do;
		     if explicit_entry_sw
		       then call probe_error_$warning
			       (probe_info_ptr, 0,
			       "Entry point ^a not found in segment ^a. Using base of component instead.",
			       entry_point, segname);
		     segp = ci.text_start;
		     go to CHECK_REFNAME;
		   end;

	    if explicit_entry_sw
	      then call probe_error_$warning (probe_info_ptr, 0,
		      "Entry point ^a not found in segment ^a. Using ^a|0 instead.",
		      entry_point, segname, segname);
	  end;
        end;
    end;

  if unique_refname_ptr ^= null
    then
         call term_$single_refname (unique_refname, (0));

  if segp = null () then do;
      call probe_error_$record (probe_info_ptr, code, "^a^[$^a^]",
	 segname, (segname ^= entry_point), entry_point);
      goto RECORDED_MESSAGE;
    end;
CHECK_REFNAME:
  if assume_ref
    then
      begin;
      ;				/* must check it for plausibility */
      dcl seg_uid		    bit (36) aligned;
      dcl 1 status_branch_auto    aligned like status_branch;


      dcl get_wdir_		    entry () returns (char (168));
      dcl hcs_$get_uid_seg	    entry (ptr, bit (36) aligned,
			    fixed bin (35));
      dcl hcs_$status_long	    entry (char (*), char (*), fixed bin (1),
			    ptr, ptr, fixed bin (35));

      status_ptr = addr (status_branch_auto);
				/* see of copy in wdir is same one as picked up by */
      dir_name = get_wdir_ ();	/* call to hcs_$make_ptr */
      call hcs_$status_long (dir_name, segname, 1, status_ptr, (null ()),
	 code);
      if code = 0 & status_branch.type = Segment then do;
	call hcs_$get_uid_seg (segp, seg_uid, code);
	if code = 0
	  then
	       if seg_uid ^= status_branch.uid then do;
				/* it's not the same */
		 call hcs_$fs_get_path_name (segp, actual_dn, 0,
		      actual_en, code);
		 call probe_error_$warning (probe_info_ptr, 0,
		      "Warning: Reference name ""^a"" does not refer to  ^a^[^/^-It refers to ^a^]",
		      segname, pathname_ (dir_name, segname), code = 0,
		      pathname_ (actual_dn, actual_en));
	         end;
        end;			/* of checking for sameness */
    end;

  /* now look for frame */

  call probe_stack_trace_$find_proc_frame (probe_info_ptr, sourcep, segp, 1);

  if sourcep -> source_info.stack_ptr = null () then do;
				/* not active */
      sourcep -> source_info.entry_ptr = segp;
				/* must find out about it ourseleves */
      sourcep -> source_info.instruction_ptr = null;
				/* not active */

      probe_info.entry_method = 1;

      sourcep -> source_info.seg_info_ptr =
	 probe_seg_info_ (probe_info_ptr, segp, code);

/* Check for the statement map. If not present we'll try seg$main */

      if code = probe_et_$no_map then do;
         probe_info.retry_using_main = 1;
         code = 0;
         goto MAIN_RETURN;
       end;

      if code ^= 0 
        then goto MAIN_RETURN;

      offset = fixed (rel (segp), 18);
      hp = sourcep -> source_info.seg_info_ptr -> seg_info.symbol_header_ptr;

      call stu_$get_map_index (hp, offset,
	 sourcep -> source_info.stmnt_map_entry_index, null);

      sourcep -> source_info.block_ptr =
	 stu_$find_containing_block (hp, offset);
    end;				/* doing it ourselves */

  code = 0;			/* all done */
  goto MAIN_RETURN;


RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto MAIN_RETURN;


MAIN_RETURN:
  P_code = code;
  return;

  /*  */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_info;

  /* ;;;;;;; */


%include component_info;

  /* ;;;;;;; */

%include status_structures;
%include probe_lang_types;


  end;				/* external procedure probe_find_procedure_ */
