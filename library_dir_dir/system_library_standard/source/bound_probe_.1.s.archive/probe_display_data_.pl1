/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_display_data_:
  proc (P_probe_info_ptr, P_ap, P_format, P_units, P_code);

  /* displays data pointed to by P_ap in format given by P_units

   James R. Davis 20 May 79 */
  /* Added formats bin, bin71, f, f63, code 09/30/81 S. Herbst */
  /* Changed to print entry point name of error code as well 10/23/81 S. Herbst */
  /* Fixed message printed for zero status code 10/18/82 S. Herbst */

  dcl P_probe_info_ptr	ptr aligned parameter;
  dcl P_ap		ptr aligned parameter;
  dcl P_format		char (32) aligned parameter;
  dcl P_units		fixed bin parameter;
  dcl P_code		fixed bin (35) parameter;
				/* output: error code */

  dcl ap			ptr;	/* to data, copy of P_ap */
  dcl strp		ptr;
  dcl units		fixed bin;/* copy of P_units */

  dcl 1 format_how		(29) internal static options (constant),
       2 fname		char (12) init
			("ascii", "character", "ch", "c", "a",
			"bit", "b",
			"binary", "bin", "binary35", "bin35",
			"binary71", "bin71",
			"float", "f", "float27", "f27",
			"float63", "f63",
			"pointer", "ptr", "its", "p",
			"octal", "o",
			"instruction", "inst", "i",
			"code"),

       2 method		fixed bin (9) unsigned unaligned init
			(1, 1, 1, 1, 1,
			2, 2,
			3, 3, 3, 3,
			4, 4,
			5, 5, 5, 5,
			6, 6,
			7, 7, 7, 7,
			8, 8,
			9, 9, 9,
			10);

  dcl based_bits		bit (units) based (ap);
  dcl based_char		char (units) based (ap);
  dcl based_fixed		fixed bin (35) based (ap);
  dcl based_fixed71		fixed bin (71) based (ap);
  dcl based_float		float bin (27) based (ap);
  dcl based_ptr_array	(units) ptr aligned based (ap);
  dcl based_words		(units) bit (36) aligned based (ap);

  dcl i			fixed bin;
  dcl error_message		char (100) aligned;

  dcl convert_status_code_	entry (fixed bin (35), char (8) aligned,
			char (100) aligned);
  dcl print_instructions_	entry (ptr, fixed bin, ptr);
  dcl octals_per_line	fixed bin internal static
			options (constant) init (8);

  dcl probe_error_$record	entry options (variable);
  dcl probe_et_$recorded_message
			fixed bin (35) external;

  dcl (
      ioa_$ioa_switch,
      ioa_$ioa_switch_nnl
      )			entry options (variable);

  dcl (addr, divide, hbound, mod, null, ptr, rel, rtrim)
			builtin;

  P_code = 0;
  units = P_units;
  ap = P_ap;
  probe_info_ptr = P_probe_info_ptr;

  do i = 1 to hbound (format_how, 1);
    if format_how (i).fname = P_format
      then goto display_data (format_how (i).method);
  end;

  /* fell through - bad format */

  call probe_error_$record (probe_info_ptr, 0,
       "Invalid format mode for displaying: ""^a"".", P_format);
  P_code = probe_et_$recorded_message;
  return;

display_data (1):			/* chars */

  /* must translate unprintables ? */

  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^a",
       based_char);
  return;


display_data (2):			/* bit strings */

  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^b",
       based_bits);
  return;


display_data (3):			/* decimal */

  if units > 35
    then go to FIXED71;
FIXED35:
  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^d",
       based_fixed);
  return;


display_data (4):			/* double precision decimal */

  if units < 36
    then go to FIXED35;
FIXED71:
  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^d",
       based_fixed71);
  return;


display_data (5):			/* floating point */

  if units > 27
    then go to FLOAT63;
FLOAT27:

  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^f",
       based_float);
  return;


display_data (6):			/* double precision floating point */

  if units < 28
    then go to FLOAT27;
FLOAT63:
  call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^f",
       based_float);


display_data (7):			/* ptrs */

  do i = 1 to units;
    call ioa_$ioa_switch (probe_info.io_switches.output_switch, "^p",
         based_ptr_array (i));
  end;

  return;


display_data (8):			/* octals */

  do i = 1 to units;
    call ioa_$ioa_switch_nnl (probe_info.io_switches.output_switch,
         " ^12w^[^/^]",
         based_words (i),
         mod (i, octals_per_line) = 0 | i = units);
  end;
  return;


display_data (9):			/* instructions */

  call print_instructions_ (ap, units, probe_info.io_switches.output_switch);
  return;


display_data (10):			/* status codes */

  call convert_status_code_ (based_fixed, "", error_message);
  call ioa_$ioa_switch (probe_info.io_switches.output_switch,
       "^a^2x^[""^a""^]", get_code_name (based_fixed), based_fixed ^= 0,
       error_message);
  return;
%page;
get_code_name:
  proc (P_code) returns (char (128) varying);

  /* Returns the entry point name corresponding to an octal status code */

  dcl P_code		fixed bin (35);

  dcl 1 def		aligned,
       2 next_def		ptr,
       2 last_def		ptr,
       2 block_ptr		ptr,
       2 section		char (4) aligned,
       2 offset		fixed bin,
       2 entrypoint		fixed bin,
       2 defname		char (32) aligned;

  dcl seg_word		(0:last_word) fixed bin (35) based (entry_ptr);
  dcl packed_ptr		ptr unaligned based;
  dcl based_code		fixed bin (35) based;

  dcl (segment_name, offset_name)
			char (32);
  dcl (entry_ptr, ptr1, ptr2) ptr;
  dcl search_sw		bit (1);
  dcl type		fixed bin (2);
  dcl i			fixed bin;
  dcl (bit_count, last_word)	fixed bin (24);
  dcl (code, search_code)	fixed bin (35);

  dcl error_table_$		fixed bin (35) ext;

  dcl decode_definition_	entry (ptr, ptr) returns (bit (1) aligned);
  dcl decode_definition_$init entry (ptr, fixed bin (24));
  dcl hcs_$make_ptr		entry (ptr, char (*), char (*), ptr,
			fixed bin (35));
  dcl hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24),
			fixed bin (35));
  dcl interpret_ptr_	entry (ptr, ptr, ptr);


  if P_code = 0
    then
         return ("0");

  entry_ptr = addr (P_code) -> packed_ptr;

  if ptr (entry_ptr, 0) = ptr (null, 0) then do;
				/* system's error_table_ */

      search_code = P_code;
ERROR_TABLE:
      call hcs_$make_ptr (null, "error_table_", "", entry_ptr, (0));
      if entry_ptr = null
        then
	   return ("");

      call hcs_$status_mins (entry_ptr, type, bit_count, code);
      if code ^= 0
        then
	   return ("");

      last_word = divide (bit_count, 36, 24, 0) - 1;
      do i = 0 to last_word while (search_code ^= seg_word (i));
      end;
      if i <= last_word
        then entry_ptr = ptr (entry_ptr, i);
        else
	   return ("");

      strp = addr (strbuf);
      call interpret_ptr_ (entry_ptr, null, strp);
      return (rtrim (struc.segment) || rtrim (struc.entryn));
    end;

  else if ptr (entry_ptr, 0) = addr (error_table_$) then do;
      entry_ptr = ptr (null, rel (entry_ptr));
      addr (search_code) -> packed_ptr = entry_ptr;
      search_code = search_code + 111000000000000000000000000000000b;
      go to ERROR_TABLE;
    end;

  else do;			/* another error table */
    ptr1 = ptr (entry_ptr, 0);
    call hcs_$status_mins (ptr1, type, bit_count, code);
    if code ^= 0
      then
	 return ("");

    segment_name, offset_name = "";
    call decode_definition_$init (ptr1, bit_count);
    search_sw = ^decode_definition_ (ptr1, addr (def));
    do while (search_sw);
      if def.section = "segn"
        then segment_name = def.defname;
      else if def.section = "link" | def.section = "stat" then do;
	offset_name = def.defname;
	call hcs_$make_ptr (null, segment_name, offset_name, ptr2, code);
	if ptr2 ^= null
	  then
	       if ptr2 -> based_code = P_code
	         then search_sw = "0"b;
        end;
      if search_sw then do;
	offset_name = "";
	search_sw = ^decode_definition_ (def.next_def, addr (def));
        end;
    end;

    if ptr2 ^= null
      then
	 if ptr2 -> based_code = P_code
	   then
	        return (rtrim (segment_name) || "$" || rtrim (offset_name));
    return ("");
  end;

  end get_code_name;

%include probe_info;


  /* ;;;;;;; */


%include interpret_ptr_struc;

  end probe_display_data_;
