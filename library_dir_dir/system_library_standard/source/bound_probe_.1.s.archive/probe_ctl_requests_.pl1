/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_ctl_requests_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /* probe_ctl_requests_

   quit
   goto
   step
   continue_to
   continue
   halt
   pause

   Modified 23 Sept 79 for new probe_break_mgr_ */
  /* goto and continue_to changed to not guess line number 08/31/81 S. Herbst */
  /* Fixed goto to reset a temporary break 12/02/81 S. Herbst */
  /* Added "mode meter" code to halt and continue requests 09/23/82 S. Herbst */
  /* Do "start" control order in halt and pause to prevent lost wakeups 09/02/83 S. Herbst */
  /* Changed "quit" to call probe_break_mgr_$reset_all_pause_breaks 04/19/84 S. Herbst */
  /* Fixed "quit" to quit out of probe even if a condition occurs 01/15/85 Steve Herbst */


  dcl P_probe_info_ptr	pointer parameter;

  dcl code		fixed bin (35);
  dcl 1 new_source_info	aligned like source_info;

  dcl (new_page_faults, old_page_faults, page_faults, real_minutes,
      real_seconds)		fixed bin;
  dcl (virtual_msec, virtual_10ksec, virtual_usec)
			fixed bin;
  dcl (new_clock, new_vclock, old_clock, old_vclock)
			fixed bin (71);
  dcl (
      probe_et_$bad_label_frame,
      probe_et_$breakless,
      probe_et_$noarg,
      probe_et_$too_many_args
      )			fixed bin (35) external static;


  dcl probe_announce_entry_	entry (pointer);
  dcl probe_break_mgr_$is_temporary_break
			entry (ptr, ptr) returns (bit (1));
  dcl probe_break_mgr_$reset_all_pause_breaks
			entry (ptr);
  dcl probe_break_mgr_$reset_break_at_line
			entry (ptr, ptr, fixed bin, bit (1) aligned,
			fixed bin (35));
  dcl probe_break_mgr_$set_break
			entry (ptr, ptr, fixed bin, pointer,
			fixed bin (21), fixed bin (35));
  dcl probe_error_		entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_get_$line	entry (ptr, ptr, fixed bin, bit (36) aligned,
			fixed bin, fixed bin (35));
  dcl probe_listen_		entry (ptr, fixed bin (35));
  dcl cpu_time_and_paging_	entry (fixed bin, fixed bin (71), fixed bin);
  dcl ioa_$ioa_switch	entry options (variable);
  dcl iox_$control		entry (ptr, char (*), ptr, fixed bin (35));


  dcl command_abort_	condition;

  dcl (addr, clock, divide, length, null, pointer, vclock)
			builtin;
SOME_ERROR:			/* general for error code type errors */
  call probe_error_ (probe_info_ptr, code);
				/* never returns */
  goto MAIN_RETURN;			/* just in case */


MAIN_RETURN:
  return;				/* only such exit from this procedure */

quit_request:
  entry (P_probe_info_ptr);

  /* *	This request exits probe */

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument ();		/* can't say "quit foo" */

  if probe_info.execute then do;	/* try to return to our caller */

      probe_info.executing_quit_request = "1"b;
				/* to prevent an error returning to listener */

      call probe_break_mgr_$reset_all_pause_breaks (probe_info_ptr);

      if probe_info.return_method = RETURN_TO_BREAK then do;
				/* KLUDGE, but probably the best we can do */
	signal condition (command_abort_);
				/* this should get us back to the command processor... */
	call probe_error_$malfunction
	     /* if we ever get returned to, what else should we do?? */
	     (probe_info_ptr, 0, "Unable to quit after a breakpoint.");
	return;
        end;

      probe_info.return_method = RETURN_TO_CALLER;
				/* this will make us just return to whoever called probe */

      goto probe_info.abort_probe_label;/* abort the invocation of probe */
    end;
  return;				/* if not executing, just return */

  /*  */

goto_request:
  entry (P_probe_info_ptr);

  /* *	Goto a particular label */

goto_request_block:
  begin;

    dcl line_type		  fixed bin;
				/* what data type probe_get_line found for us */
    dcl 1 label_overlay	  aligned based (addr (label_variable)),
         2 place		  pointer,
         2 frame		  pointer;
    dcl label_variable	  label variable aligned;

    dcl 1 map_array		  (map_size) based (map_ptr) aligned
			  like statement_map;
    dcl map_size		  fixed bin;
    dcl map_ptr		  ptr ptr;

    probe_info_ptr = P_probe_info_ptr;

    call require_argument ();		/* must have a following argument -- */
				/* goto <nl> would otherwise goto $c */

    call probe_get_$line (probe_info_ptr, addr (new_source_info), (0),
         "0001"b, line_type, code);
    if code ^= 0
      then goto SOME_ERROR;		/* we lost getting the label */
    if (line_type = ext_procedure_runtime_dtype |
         line_type = ext_entry_runtime_dtype |
         line_type = int_entry_runtime_dtype)
      then
	 call probe_error_ (probe_info_ptr, 0, "Can't goto a procedure");

    call reject_argument ();		/* and can't have any args after the label */

    if probe_info.execute then do;
        map_ptr = new_source_info.seg_info_ptr -> seg_info.statement_map_ptr;
        map_size = new_source_info.seg_info_ptr -> seg_info.map_size;
        label_overlay.place =
	   pointer (map_ptr,
	   map_array (new_source_info.stmnt_map_entry_index).location);
        label_overlay.frame = new_source_info.stack_ptr;
				/* and stack frame */
        if label_overlay.frame = null
	then /* check if procedure active */
	     call probe_error_ (probe_info_ptr, probe_et_$bad_label_frame);

        if probe_break_mgr_$is_temporary_break (probe_info_ptr,
	   probe_info.ptr_to_current_source) then do;
				/* if a temporary break (set by step), reset it */
	  call probe_break_mgr_$reset_break_at_line (probe_info_ptr,
	       probe_info.ptr_to_current_source,
	       BREAK_BEFORE, "0"b, (0));
	  call probe_break_mgr_$reset_break_at_line (probe_info_ptr,
	       probe_info.ptr_to_current_source,
	       BREAK_AFTER, "0"b, (0));
	end;

        goto label_variable;		/* cleanup will occur ! */
      end;
  end goto_request_block;
  goto MAIN_RETURN;			/* end of code for goto request */

  /*  */

step_request:
  entry (P_probe_info_ptr);

  /* *	This request sets a breakpoint immediately "before" the next statement,
   *	and then continues execution. It's not as useful as it might seem, of
   *	course, since there's no guarantee that the next statement will be
   *	executed, anyway, but life's like that. Perhaps when we get the step
   *	operator implemented things will work better. This code shares some
   *	temporaries with the goto request, above. */

  dcl STEP_COMMAND_LIST	char (5) internal static options (constant)
			init ("pause");
  dcl probe_source_segment_$position_source
			entry (ptr, ptr, fixed bin, fixed bin (35));

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument ();		/* can't say 'step foo', of course */

  if probe_info.execute then do;
      if probe_info.return_method ^= RETURN_TO_BREAK
	 & probe_info.return_method ^= RETURN_TO_CONDITION
        then
	   call probe_error_ (probe_info_ptr, 0,
	        "The ""step"" request may only be used at a breakpoint or after a fault."
	        );

      new_source_info = initial_source; /* copy it, for we change the statement number */

      call probe_source_segment_$position_source (probe_info_ptr,
	 addr (new_source_info), 1, code);
      if code ^= 0
        then goto SOME_ERROR;

      call probe_break_mgr_$set_break (probe_info_ptr, addr (new_source_info),
	 BREAK_BEFORE,
	 addr (STEP_COMMAND_LIST), length (STEP_COMMAND_LIST), code);
      if code ^= 0
        then goto SOME_ERROR;

      goto probe_info.abort_probe_label;/* leave and restart */
    end;
  return;				/* end of code for continue request */

  /*  */

continue_to_request:
  entry (P_probe_info_ptr);

  /* *	This request sets a break at the specified label and continues execution until
   *	that point. This code shares various temporaries with the goto and step requests, above */

  probe_info_ptr = P_probe_info_ptr;

  call require_argument ();		/* must have a label */

  call probe_get_$line (probe_info_ptr, addr (new_source_info), (0), "0001"b,
       (0), code);
  if code ^= 0
    then go to SOME_ERROR;

  call reject_argument ();		/* must be no args after the label, of course */

  if probe_info.execute then do;	/* if for real, then set the break and resume execution */
      if probe_info.return_method ^= RETURN_TO_BREAK
	 & probe_info.return_method ^= RETURN_TO_CONDITION
        then
	   call probe_error_ (probe_info_ptr, 0,
	        "The ""continue_to"" request may only be used at a breakpoint or after a fault."
	        );

      call probe_break_mgr_$set_break (probe_info_ptr, addr (new_source_info),
	 BREAK_BEFORE,
	 addr (STEP_COMMAND_LIST), length (STEP_COMMAND_LIST), code);
      if code ^= 0
        then goto SOME_ERROR;

CONTINUE:
      if probe_modes.meter then do;	/* so user doesn't see probe's own usage */
	probe_static_info.last_clock = clock ();
	probe_static_info.last_vclock = vclock ();
	call cpu_time_and_paging_ (probe_static_info.last_page_faults, 0, 0)
	     ;
        end;

      probe_static_info.last_break_segno = "0"b;

      goto probe_info.abort_probe_label;/* leave probe */
    end;
  return;				/* end of code for continue_to request */

  /*  */

continue_request:
  entry (P_probe_info_ptr);

  /* *	This simply continues execution of the user program. It takes no arguments */

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument ();		/* no arguments for continue */

  if probe_info.execute then do;	/* should we do it at all? */
      if probe_info.return_method ^= RETURN_TO_BREAK
	 & probe_info.return_method ^= RETURN_TO_CONDITION
        then
	   call probe_error_ (probe_info_ptr, 0,
	        "The ""continue"" request may only be used to continue from a fault or a breakpoint."
	        );

      goto CONTINUE;		/* no longer set "RETURN_TO_CALLER" -- wos 7/15/79 */
    end;
  return;				/* return if we're not executing */

  /*  */

halt_request:
  entry (P_probe_info_ptr);

  /* *	This is used in breakpoints to cause probe to come up to a new listener level.
   *	It just calls probe_listen_ recursively, which saves the old values so the breakpoint
   *	can later be resumed. */

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument ();		/* no arguments for halt */

  call iox_$control (probe_info.output_switch, "start", null, 0);
				/* prevent wakeups from being lost by prev requests in breaklist */

  if probe_info.execute then do;	/* call ourselves */
      if probe_info.break_slot_ptr = null () /* but only if this is a break */
	 | probe_info.in_listener
        then /* and we haven't called the listener yet */
	   call probe_error_ (probe_info_ptr, 0,
	        "The ""halt"" request may only be issued in a breakpoint request list."
	        );

      if probe_modes.meter then do;
	old_clock = probe_static_info.last_clock;
	old_vclock = probe_static_info.last_vclock;
	old_page_faults = probe_static_info.last_page_faults;
	new_clock, probe_static_info.last_clock = clock ();
	new_vclock, probe_static_info.last_vclock = vclock ();
	call cpu_time_and_paging_ (new_page_faults, 0, 0);
	probe_static_info.last_page_faults = new_page_faults;
        end;

      call probe_announce_entry_ (probe_info_ptr);
				/* let user know what's happening */

      if probe_modes.meter then do;	/* print clock, vcpu, and page faults since last halt */
	real_seconds = divide (new_clock - old_clock, 1000000, 17, 0);
	real_minutes = divide (real_seconds, 60, 17, 0);
	real_seconds = real_seconds - real_minutes * 60;
	virtual_usec = new_vclock - old_vclock;
	virtual_msec = divide (virtual_usec, 1000, 17, 0);
	virtual_10ksec =
	     divide (virtual_usec - virtual_msec * 1000, 100, 17, 0);
	page_faults = new_page_faults - old_page_faults;

	if probe_static_info.brief_sw
	  then call ioa_$ioa_switch (probe_info.output_switch,
		  "^7t^d.^d MSEC", virtual_msec, virtual_10ksec);

	  else call ioa_$ioa_switch (probe_info.output_switch,
		  "^3xTime = ^[^d min ^]^d sec, Vcpu = .^d^d sec, Page faults = ^d",
		  real_minutes ^= 0, real_minutes, real_seconds,
		  virtual_msec, virtual_10ksec, page_faults);
        end;

      call probe_listen_ (probe_info_ptr, code);
				/* and let him type commands */
    end;

  return;				/* end of code for halt request */

  /*  */

pause_request:
  entry (P_probe_info_ptr);

  /* *	The pause request works just like the halt request, except that it causes the
   *	most recent breakpoint to be reset, if there was one, thus halting the program
   *	but once. */

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument ();		/* pause takes no arguments */

  call iox_$control (probe_info.output_switch, "start", null, 0);
				/* prevent wakeups from being lost by prev requests in breaklist */

  if probe_info.execute then do;
      if probe_info.break_slot_ptr = null () /* but only if this is a break */
	 | probe_info.in_listener
        then /* and we haven't called the listener yet */
	   call probe_error_ (probe_info_ptr, 0,
	        "The ""pause"" request may only be issued in a breakpoint request list."
	        );

      call probe_announce_entry_ (probe_info_ptr);
				/* let user know what's happening */

      call probe_listen_ (probe_info_ptr, code);
				/* and let him type commands */

      if probe_info.break_slot_ptr ^= null () then do;
				/* upon return, reset the break which got us here */
	call probe_break_mgr_$reset_break_at_line (probe_info_ptr,
	     addr (initial_source),
	     probe_info.break_slot_ptr -> break_slot.type, "0"b, code);
	if code ^= 0 & code ^= probe_et_$breakless
	  then goto SOME_ERROR;
        end;
    end;
  return;				/* end of code for pause request */

  /*  */

  /*	INTERNAL PROCEDURES 	*/

reject_argument:
  proc ();

  /* *	This procedure simply calls probe_error_ if the current token is not the
   *	end of the token chain -- it is called by requests which have processed all
   *	expected arguments and want to barf if there are any extras */

  if probe_info.ct -> token.type < probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$too_many_args);
  return;
  end;				/* reject_argument internal procedure */

require_argument:
  proc ();

  /* *	This is just like reject_argument, except that it barfs if there are not
   *	any more arguments */
  if probe_info.ct -> token.type >= probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$noarg);
  return;
  end;				/* require_argument internal procedure */

  /*  */

%include probe_info;
%include probe_static_info;
%include probe_modes;
%include probe_tokens;
%include probe_references;
%include probe_source_info;
%include probe_operators;
%include std_descriptor_types;
%include probe_seg_info;
%include statement_map;
%include probe_break_slot;
%include probe_lang_types;
%include probe_info_constants;

  end;				/* external procedure probe_ctl_requests_ */
