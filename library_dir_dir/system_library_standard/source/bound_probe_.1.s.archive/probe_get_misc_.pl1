/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_get_misc_:
  proc ();

  call probe_error_$malfunction ();
  return;				/* not an entry */

  /* probe_get_misc_ - to parse a variety of constructs used  in probe

   ENTRIES HERE:
   io_switch
   pathname
   object
   integer
   request_list
   control_arg

   someday: signed_integer

   Last Modified: 22 Sept 79 JRDavis to add object */
  /* Added $decimal to parse N.M into N and M 12/19/81 S. Herbst */

  dcl (
      P_probe_info_ptr	pointer,
      P_iocb_ptr		pointer,
      P_pathname		char (*) varying,
      P_source_info_ptr	ptr,	/* to source info to set */
      (P_integer, P_decimal)	fixed bin (35),
      P_line_ptr		pointer,
      P_line_lth		fixed bin (21),
      P_control_arg		char (64) varying,
      P_code		fixed bin (35)
      );

  dcl old_ct		pointer;	/* return this pointer if an attempted conversion fails */
  dcl code		fixed bin (35);

  dcl constant_string	char (probe_info.ct -> constant.precision)
			based (probe_info.ct -> constant.data_ptr);

  dcl assign_		entry (ptr, fixed bin (35), fixed bin (35), ptr,
			fixed bin (35), fixed bin (35));

  dcl (
      probe_et_$noarg,
      probe_et_$bad_expression,
      probe_et_$unbalanced_parens,
      probe_et_$bad_integer,
      probe_et_$recorded_message,
      probe_et_$syntax_error
      )			fixed bin (35) external static;


  dcl probe_error_$malfunction
			entry options (variable);

  dcl (addr, dec, divide, fixed, null, substr)
			builtin;
				/*  */

SYNTAX_ERROR:			/* general-purpose error exit */
  code = probe_et_$syntax_error;
  goto SOME_ERROR;


RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto SOME_ERROR;

SOME_ERROR:
  probe_info.ct = old_ct;

MAIN_RETURN:
  P_code = code;
  return;

io_switch:
  entry (P_probe_info_ptr, P_iocb_ptr, P_code);

  /* *	This entry extracts an I/O switch name from the token chain, if possible */


  dcl switchname		char (32) varying;
				/* this is local to this block */
  dcl iox_$find_iocb	entry (char (*), ptr, fixed bin (35));


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  old_ct = probe_info.ct;
  P_iocb_ptr = null ();

  if probe_info.ct -> token.type >= probe_info.end_token then do;
				/* nothing to get */
      code = probe_et_$noarg;
      goto SOME_ERROR;
    end;

  if probe_info.ct -> token.type = CONSTANT_TYPE then do;
      if probe_info.ct -> constant.data_type = (char_dtype * 2)
        then
	   switchname = constant_string;
        else goto SYNTAX_ERROR;	/* other constants useless */
    end;

    else do;
      call get_entryname (switchname, code);
      if code ^= 0
        then goto SOME_ERROR;
    end;

  if switchname = ""
    then goto SYNTAX_ERROR;

  if ct -> token.type < end_token
    then goto SYNTAX_ERROR;
  call iox_$find_iocb ((switchname), P_iocb_ptr, P_code);
  return;				/* end of code for get_io_switch entry */

  /*  */

pathname:
  entry (P_probe_info_ptr, P_pathname, P_code);

  /* *	This entry gets a pathname; that is, any number of leading "<", followed
   *	by one or  more entrynames, followed by any number of ">" entrynames */


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  old_ct = probe_info.ct;

  call get_pathname (P_pathname, code);
  if code ^= 0
    then goto SOME_ERROR;
  goto MAIN_RETURN;


control_arg:
  entry (P_probe_info_ptr, P_control_arg, P_code);

  /*  * gets a control args from the chain, if one is there */


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  old_ct = probe_info.ct;

  P_control_arg = "";
  if probe_info.ct -> token.type = MINUS
    then
         if probe_info.ct -> token.next -> token.type = NAME_TYPE
	 then
	   do;
	   call bump_ct ();		/* past the minus */
	   P_control_arg = current_identifier_name;
	   call bump_ct ();
	 end;

  P_code = 0;
  return;				/* end of code for $control arg */



integer:
  entry (P_probe_info_ptr, P_integer, P_code);

  dcl fb35_temp		fixed bin (35);


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  old_ct = probe_info.ct;

  if ^data_type_info_$info (
       divide (probe_info.ct -> constant.data_type, 2, 17, 0)).computational
    then do;
      P_code = probe_et_$bad_integer;
      return;

    end;

  call assign_ (addr (fb35_temp), 2, 35, (probe_info.ct -> constant.data_ptr),
       (probe_info.ct -> constant.data_type),
       probe_info.ct -> constant.scale_and_precision);

  P_integer = fb35_temp;
  call bump_ct ();
  P_code = 0;
  return;				/* end of code for integer */



decimal:
  entry (P_probe_info_ptr, P_integer, P_decimal, P_code);

  /* Given the number N.M, returns P_integer as N and P_decimal as M */
  /* Added as a kludge for "use level N.M" */

  dcl fdec_temp		fixed dec (6, 3);


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  if ^data_type_info_$info (
       divide (probe_info.ct -> constant.data_type, 2, 17, 0)).computational
    then do;
      P_code = probe_et_$bad_expression;
      return;
    end;

  call assign_ (addr (fdec_temp), real_fix_dec_9bit_ls_dtype * 2,
       786438 /* scale and precision of fixed dec (6, 3) */,
       (probe_info.ct -> constant.data_ptr),
       (probe_info.ct -> constant.data_type),
       probe_info.ct -> constant.scale_and_precision);

  P_integer = fdec_temp;
  fdec_temp = fdec_temp - dec (P_integer);
  P_decimal = fdec_temp * 10 ** fixed (probe_info.ct -> constant.scale);

  call bump_ct ();
  P_code = 0;
  return;

  /*  */

request_list:
  entry (P_probe_info_ptr, P_line_ptr, P_line_lth, P_code);

  /* *	This entry extracts a request line from the token chain; Such request lines
   *	are seen in breakpoint requests, etc. */

  dcl (last_token, first_token)
			pointer;
  dcl first_time		bit (1) aligned;
  dcl paren_level		fixed bin;
  dcl line_lth		fixed bin (21);
  dcl based_str		char (256) based;


  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  old_ct = probe_info.ct;


  first_time = "1"b;
  paren_level = 0;
  do while ((probe_info.ct -> token.type < probe_info.end_token)
       | (paren_level > 0) | (first_time));
    if probe_info.ct -> token.type = LEFT_PAREN
      then
	 paren_level = paren_level + 1;
    else if probe_info.ct -> token.type = RIGHT_PAREN
      then
	 paren_level = paren_level - 1;
    first_time = "0"b;

    call bump_ct ();
    if probe_info.ct = null () then do; /* moby lossage */
        code = probe_et_$unbalanced_parens;
        goto SOME_ERROR;
      end;
  end;

  if paren_level < 0 then do;		/* should only happen if first token is ")" */
      code = probe_et_$unbalanced_parens;
      goto SOME_ERROR;
    end;

  first_token = old_ct;		/* get token pointers for first and last tokens */
  last_token = probe_info.ct -> token.prev;
				/* since we have advanced past it */

  if first_token -> operator.type = LEFT_PAREN then do;
				/* strip off outer pair of parens */
      first_token = first_token -> token.next;
				/* simply skip over the first token */
      if last_token -> token.type ^= RIGHT_PAREN then do;
	code = probe_et_$syntax_error;/* right paren is misplaced, as in "after: (foo; bar) baz" */
	goto SOME_ERROR;
        end;

      last_token = last_token -> token.prev;
				/* token BEFORE final paren */
    end;

  line_lth =
       (last_token -> token.next -> token.location)
       - (first_token -> token.location) + 1;
  line_lth = line_lth - 1;		/* since it now contains the final ")", reduce its length */
				/* by one to eliminate that character */
  if line_lth <= 0 then do;		/* something like "()" */
      code = probe_et_$syntax_error;
      goto SOME_ERROR;
    end;

  P_line_lth = line_lth;
  P_line_ptr = addr (substr (first_token -> token.buffer_ptr -> based_str,
       first_token -> token.location, 1));
				/* first char in string */

  P_code = 0;
  return;				/* end of code for $get_request_line entry */

object:
  entry (P_probe_info_ptr, P_source_info_ptr, P_code);

  /* Parse and return an OBJECT
   This can be a pathname or e refname of an EXTERNAL ENTRY.  We are not interested in
   internal entrypoints or procedures.  This is a Multicious thing more than a PL/I
   (or FORTRAN or COBOL or PASCAL or ALGOL) thing.

   James R. Davis 22 Sept 79
*/

  dcl obj_pathname		char (168) varying;

  dcl probe_find_procedure_	entry (ptr, char (*), bit (36) aligned, ptr,
			fixed bin (35));


  probe_info_ptr = P_probe_info_ptr;
  code = 0;
  old_ct = probe_info.ct;

  call get_pathname (obj_pathname, code);
  if code ^= 0
    then
         return;

  if probe_info.execute then do;
      call probe_find_procedure_ (probe_info_ptr, (obj_pathname), "111"b,
	 (P_source_info_ptr), code);
      if code ^= 0
        then goto SOME_ERROR;
    end;
  goto MAIN_RETURN;


  /* INTERNAL PROCEDURES */

bump_ct:
  proc;
  probe_info.ct = probe_info.ct -> token.next;
  end bump_ct;


get_pathname:
  proc (path, code);

  /* parses a pathname for the sake of $pathname and $object  */

  dcl path		char (*) varying parameter;
  dcl code		fixed bin (35) parameter;
  dcl path_entry		char (32) varying;


  path = "";
  code = 0;

  do probe_info.ct = probe_info.ct repeat probe_info.ct -> token.next
       while (probe_info.ct -> token.type = LESS_THAN);
    path = path || "<";
  end;

  call get_entryname (path_entry, code);
  if code ^= 0
    then
         return;

  path = path || path_entry;		/* this may harmlessly be null */

  do while (probe_info.ct -> token.type = GREATER_THAN);
    path = path || ">";
    probe_info.ct = probe_info.ct -> token.next;

    call get_entryname (path_entry, code);
    if code ^= 0
      then
	 return;
    path = path || path_entry;
  end;

  end get_pathname;



get_entryname:
  proc (ename, code);

  dcl ename		char (32) varying parameter;
  dcl code		fixed bin (35) parameter;


  ename = "";
  code = 0;
  do probe_info.ct = probe_info.ct repeat probe_info.ct -> token.next
       while (probe_info.ct ^= null);
    if probe_info.ct -> token.type = NAME_TYPE
      then ename = ename || current_identifier_name;
    else if probe_info.ct -> operator.type = SLASH
      then ename = ename || "/";
    else if probe_info.ct -> operator.type = PERIOD
      then ename = ename || ".";
    else if probe_info.ct -> operator.type = DOLLAR_SIGN
      then ename = ename || "$";
    else if probe_info.ct -> operator.type = COMMA
      then ename = ename || ",";
    else
         return;
  end;				/* snarfing tokens into the entryname */
  end get_entryname;

%include probe_info;
%include probe_source_info;
%include probe_seg_info;
%include probe_tokens;
%include probe_operators;
%include probe_references;

%include status_structures;
%include data_type_info_;
%include std_descriptor_types;
  end probe_get_misc_;
