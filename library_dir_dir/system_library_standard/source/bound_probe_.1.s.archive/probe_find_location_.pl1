/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_find_location_:
  procedure
       (P_probe_info_ptr, P_seg_info_ptr, P_file_number, P_line,
       P_statement_number, P_switches, P_map_element, P_index);

  /* This routine is used to search the statement map for a line designated by file, line, and
   stmt offset. If not found and dont_guess_sw (in P_switches) is OFF, it tries to make a guess.

   Initial Version:  15 August 1974 by Jeffrey M. Broughton
   Converted to probe 4.0, 05/18/79 W. Olin Sibert */
  /* Changed to respect position 4 of P_switches, dont_guess_sw */
  /* Changed to see it's in the middle of a statement 10/29/81 S. Herbst */
  /* Fixed to recognize when it unexpectedly re-enters part of program before desired line 10/25/82 S. Herbst */
  /* Fixed high guess to be last line of programn, not last stmt in map 02/10/84 S. Herbst */

  dcl (
      P_probe_info_ptr	pointer,
      P_seg_info_ptr	pointer,	/* to info about contianing program */
      P_file_number		fixed bin,/* file number of desired statement */
      P_line		fixed bin,/* and line number */
      P_statement_number,		/* and statement offset in line */
      P_switches		bit (36) aligned,
      P_map_element		pointer,	/* to map entry best fitting the above */
      P_index		fixed bin
      )			parameter;/* index of this entry */

  dcl switches		bit (36) unaligned;
  dcl want_external_sw	bit (1) unaligned defined (switches) pos (1);
  dcl default_external_sw	bit (1) unaligned defined (switches) pos (2);
  dcl default_offset_zero_sw	bit (1) unaligned defined (switches) pos (3);
  dcl dont_guess_sw		bit (1) unaligned defined (switches) pos (4);

  dcl file_entry		bit (72) aligned;
				/* file number, in statement map format */
  dcl statement_entry	bit (72) aligned;
				/* file, line, and statement numbers */

  dcl state		fixed bin;/* current state of scan for statement */
  dcl checked_sw		bit (1) aligned;
				/* ON if checked_multi_line has been called */

  dcl this_statement	bit (72) aligned;
				/* file, line, stmt. offset of current stmt. */
  dcl last_statement	bit (72) aligned;
				/* ditto, of last stmt. in _s_a_m_e file */
  dcl end_statement		bit (72) aligned;
				/* of statement expected to end proc */
  dcl low_guess		bit (72) aligned;
				/* of last stmt. before one wanted */
  dcl high_guess		bit (72) aligned;
				/* of next statement found above */
  dcl guess_statement	bit (72) aligned;
				/* to check guess before returning it */

  dcl i			fixed bin;/* index in map of current stmt. being scanned */
  dcl highest_line		fixed bin;/* highest line number of any stmt so far */
  dcl highest_line_index	fixed bin;/* statement index corresponding to this line */
  dcl this_line		fixed bin;/*  line number of current statement */

  dcl last		fixed bin;/* of last stmt. in same file */
  dcl proc_end_stmt		fixed bin;/* of stmt. expected to end procedure */
  dcl low			fixed bin;/* of one for low_guess */
  dcl high		fixed bin;/* of one for high_guess */

  dcl map_size		fixed bin;/* size of this array */
  dcl map_ptr		pointer;
  dcl 1 map_array		(map_size) aligned like statement_map
			based (map_ptr);
				/* overlay for entire statement map */

  dcl 1 result_source_info	aligned like source_info;

  dcl probe_line_number_$proc entry (ptr, 1 aligned like source_info)
			returns (char (64));
  dcl probe_source_segment_$get_file_ptr
			entry (ptr, ptr, fixed bin) returns (ptr);
  dcl probe_error_$warning	entry options (variable);

  dcl probe_et_$stmt_guess	fixed bin (35) external static;

  dcl file_mask		bit (72) aligned internal static
			options (constant)
			initial ("000000776000000000000000"b3);
				/* masks out file number of statement map */
  dcl statement_mask	bit (72) aligned internal static
			options (constant)
			initial ("000000777777777000000000"b3);
				/* mask out file, line, and statement numbers */

  dcl (addr, bit, fixed, null, string, substr)
			builtin;
				/*  */

  /* Check that we have something to work with */

  probe_info_ptr = P_probe_info_ptr;
  switches = P_switches;
  map_ptr = P_seg_info_ptr -> seg_info.statement_map_ptr;

  if map_ptr = null
    then goto fail;			/* if non-null will assume that we have other info too */

  /* Get size of statement map for this program */

  map_size = P_seg_info_ptr -> seg_info.map_size;
				/* get maximum index */

  /* Make source id for statement desired. purpose is fast comparision */

  file_entry = (18)"0"b || bit (fixed (P_file_number, 8, 0));
				/* put file number into desired format */
  statement_entry = file_entry | (26)"0"b || bit (fixed (P_line, 14, 0)) ||
       bit (fixed (P_statement_number, 5, 0));

  /* Handle boundary conditions for search */

  low_guess, last_statement = string (map_array (1)) & statement_mask;
				/* before every thing else in map */
  highest_line, highest_line_index, last, low = 1;
  high_guess, end_statement = statement_mask;
				/* greater than any element of map */
  state = 1;			/* initially scanning before statement */
  checked_sw = "0"b;		/* call check_multi_line once, after line number is passed */

  /* Search entire map for element, but keep track of topology for guess. */

  do i = 1 to map_size;
    if (string (map_array (i)) & file_mask) = file_entry then do;
				/* only look in same file as statement */

        this_line = fixed (map_array (i).line);
        if this_line > highest_line then do;
	  highest_line = this_line;
	  highest_line_index = i;
	end;

        this_statement = string (map_array (i)) & statement_mask;
				/* record source id of current statement */
        if this_statement = statement_entry then do;
				/* found it, no further work needed */
GOT_LINE:
	  P_index = i;		/* return info */
	  P_map_element = addr (map_array (i));
	  return;
	end;
        else if this_statement < last_statement
	then /* have entered relocated internal procedure */
	     goto before_last (state);
        else if this_statement > statement_entry
	then /* found one after one we want */
	     goto after (state);
        else if this_statement >= end_statement
	then /* have reached end of int proc being skipped */
	     goto end_proc (state);
        else do;
	if this_statement < statement_entry then do;
				/* must have re-entered part before desired stmt */
	    state = 1;		/* treat this like end of internal proc */
	    end_statement = statement_mask;
	  end;
	go to common;
        end;

        /* State 1: In a region of statements before one wanted.  Can be either main program, or
   internal procedure that we are assuming contains the statement. */

after (1):
        call check_multi_line ();

        /* Have been scanning region before, so we have found a gap, remember where
   it is and continue looking for an internal proc containing statement. */

        low = last;
        low_guess = last_statement;	/* remember one before stmt. */
        if this_statement < high_guess then do;
				/* and this one, if it is a better approx. */
	  high = i;
	  high_guess = this_statement;
	end;
        state = 3;			/* now scanning region after */
        goto common;

before_last (1):

        /* Have entered internal procedure before region before statement.  This implies
   that all of procedure is before statement, so skip it, but remeber where end
   caller was in case it is really the end. */

        proc_end_stmt = last;
        end_statement = last_statement; /* caller's last statement */
        state = 2;			/* skip state */
        goto common;

end_proc (1):

        /* Should not occur. Should be caught by after or finish case. */

        goto finish (1);		/* really don't care */

        /* State 2: Skipping an internal procedure before statement. */

after (2):

        /* Found one after the statement; this implies that we have reentered main code.
   The situation is:  | main1 | proc(s) | main2 | with a source ordering of
   proc(s) < main1 < stmt. < main2.  Take guess as in state 1. */

        low = proc_end_stmt;
        low_guess = end_statement;	/* stmt. before one wanted, last in caller */
        end_statement = statement_mask; /* reset */
        state = 3;			/* are in region after now */
        goto common;

before_last (2):

        /* Found another internal procedure before even where we are.  Just ignore it. */

        goto common;

end_proc (2):

        /* Have reached code beyond end of procedure, reenter main code sequence, and
   continue scan. */

        end_statement = statement_mask; /* reset */
        state = 1;
        goto common;

        /* State 3:  Scanning statements after the desired one;  looking for internal procedures
   this region that may contain the statement. */

after (3):

        /* Nothing new, just proceed */

        goto common;

before_last (3):

        /* Entering internal procedure before region being scanned.	Check if it may contain
   statement. */

        if this_statement > high_guess
	then /* proc. after statement */
	     goto common;		/* cannot contain statement */
        else if this_statement < low_guess
	then /* proc before gap where statement was to be */
	     goto common;

        /* This procedure is in the gap, we may assume that the statement is here (for instance,
   an end statement generating no code).  So continue scan for statement or another one
   after. */

        state = 1;			/* just like the start, expect to find one before */
        last = low;
        last_statement = low_guess;	/* last one before desired one anyway */
        i = i - 1;			/* reprocess, this may be after */
        goto next;			/* have set last ourselves */

end_proc (3):

        /* Should not happen. */

        goto finish (3);

        /* Common:  record the last statement for next time around */

common:
        last = i;
        last_statement = this_statement;
      end;

next:
  end;

  call check_multi_line ();

  /* All of map has been scanned.  The precise statement has not been found. So make a
   guess depending on how we got here. */

  if dont_guess_sw
    then go to fail;

  goto finish (state);

finish (1):

  /* We could get here if no file containing the statement was found,  If one was, then
   we were scanning a region before the desired statement, so we should pick the last
   statement in that region */

  if (last_statement & file_mask) ^= file_entry
    then goto fail;			/* either one found, in which case last in th
						   at file, or didn't, last in file 0 */

  guess_statement = string (map_array (last)) & statement_mask;
  if guess_statement > statement_entry
    then P_index = last;
				/* guess later in map is also later line in source */
    else P_index = highest_line_index;	/* else use last line in source */
  P_map_element = addr (map_array (highest_line_index));
				/* highest_line_index in region */
  goto make_guess;

finish (2):

  /* We were skipping an internal procedure before statement, so use end of caller */

  P_index = proc_end_stmt;
  P_map_element = addr (map_array (proc_end_stmt));
  goto make_guess;

finish (3):

  /* In region after statement, and we have made a guess.  Statement is probably non-
   executable (e.g. begin, do, end).  We have a greater interested in making a
   quick begin block entry, which users may specify by line number to get a block,
   work right, so guess one after recorded guess.  This is also compatable with
   debug */

  guess_statement = string (map_array (high)) & statement_mask;
  if guess_statement > statement_entry
    then P_index = high;
				/* guess later in map is also later line in source */
    else P_index = highest_line_index;	/* else use last line in source */
  P_map_element = addr (map_array (highest_line_index));
				/* want one following low guess */

make_guess:
  result_source_info.seg_info_ptr = P_seg_info_ptr;
  result_source_info.stmnt_map_entry_index = P_index;
  call probe_error_$warning (probe_info_ptr, probe_et_$stmt_guess,
       probe_line_number_$proc (probe_info_ptr, result_source_info));
  return;

fail:
  P_index = -1;
  P_map_element = null;		/* nothing found */
  return;
%page;
check_multi_line:
  proc;

  /* This procedure sees whether the previous statement spans more than one line,
   and whether it includes P_line. If so, the statement is found. */

  dcl (j, len, line_count, prev_line, start)
			fixed bin (21);
  dcl filep		ptr;
  dcl source_overlay	char (1044480 /* max chars in a segment */)
			based (filep);
  dcl NL			char (1) int static options (constant) init ("
");

  if checked_sw
    then
         return;			/* already called this; must be end of program */
  checked_sw = "1"b;

  if i = 1
    then
         return;			/* first line in program */

  prev_line = fixed (map_array (i - 1).line);
  start = fixed (map_array (i - 1).start);
  len = fixed (map_array (i - 1).length);

  if start = 0
    then
         return;

  /* Count number of lines in prev statement */

  filep =
       probe_source_segment_$get_file_ptr (probe_info_ptr,
       probe_info.ptr_to_current_source, P_file_number);
  if filep = null
    then
         return;			/* give up */

  line_count = 1;

  do j = start to start + len - 2;	/* don't look at the end char */
    if substr (source_overlay, j, 1) = NL
      then line_count = line_count + 1;
  end;

  if prev_line + line_count > P_line then do;
      i = i - 1;			/* the previous line is the right one */
      go to GOT_LINE;
    end;

  end check_multi_line;

  /*  */

%include probe_info;

  /* ;;;;;;; */

%include statement_map;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include runtime_symbol;

  end;				/* probe_find_location_ external procedure */
