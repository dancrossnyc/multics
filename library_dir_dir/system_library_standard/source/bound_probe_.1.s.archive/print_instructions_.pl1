/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

print_instructions_:
  proc (P_data_ptr, P_count, P_switch);

  /* prints P_count instructions starting at P_data_ptr on switch P_switch

   an instruction may be several words long

   James R. Davis 20 May 79
   Modified 21 Sept 79 to print address and raw words, too. JRD

   FEATURES that it would be nice to put in someday:
   decoding the special tags (used by puls1, puls2 s9bd, s6bd, s4bd,
   sbd,stba,stbq,stca and stcq)

   showing either the address of the operand (for a tra, or pl1_operators_ ref) or i$
   the contents of the word addressed - one or two words, depending
*/
  /* Fixed not to print more than P_count words despite multi-word instructions 09/01/83 S. Herbst */

  dcl P_data_ptr		ptr parameter;
				/* input: to probe_info structure */
  dcl P_count		fixed bin parameter;
				/* input: number of instructions to print */
  dcl P_switch		ptr aligned parameter;
				/* input: to switch */

  /* the following variables are used globally throughout - but not altered */
  dcl ip			ptr;	/* to current instruction's first word */
  dcl oswitch		ptr;	/* copy of P_switch */
  dcl op_index		fixed bin;/* the op code, an index into instruction info tables */
  dcl op_code		char (6) aligned;
				/* mnemonic name of op_index */
  dcl number_of_words	fixed bin;/* number of words in current instruction */
  dcl COLUMN_SPACING	fixed bin internal static
			options (constant) init (8);
				/* bewteen op_code and address */

  dcl (addrel, char, divide, fixed, hbound, lbound, rel)
			builtin;
  dcl instruction_count	fixed bin;/*  number of the current instruction */

  dcl (
      ioa_$rsnnl,
      ioa_$ioa_switch,
      ioa_$ioa_switch_nnl
      )			entry options (variable);


  dcl 1 instr_pr		aligned based (ip),
       2 address		unal,
        3 pr		fixed bin (3) unsigned unal,
        3 offset		fixed bin (14) unal,
       2 opcode		fixed bin (10) unsigned unal,
       2 inhibit		bit (1) unal,
       2 use_pr		bit (1) unal,
       2 tag		fixed bin (6) unsigned unal;

  dcl 1 instr		aligned based (ip),
       2 address		unal,
        3 offset		fixed bin (17),
       2 opcode		fixed bin (10) unsigned unal,
       2 inhibit		bit (1) unal,
       2 use_pr		bit (1) unal,
       2 tag		fixed bin (6) unsigned unal;

%include op_mnemonic_format;

  ip = P_data_ptr;
  oswitch = P_switch;

  do instruction_count = 1 to P_count;

    op_index = ip -> instr.opcode;
    op_code = op_mnemonic_$op_mnemonic (op_index).opcode;
    number_of_words = op_mnemonic_$op_mnemonic (op_index).num_words;

    if number_of_words > 1		/* must be EIS */
      then call disassemble_eis;
    else if is_repeat_instr (op_code)
      then call disassemble_repeat;
    else call disassemble_normal;

    ip = addrel (ip, number_of_words);

    instruction_count = instruction_count + number_of_words - 1;
  end;				/*  loop over N instructions */
  return;


disassemble_normal:
  proc;

  call print_addr_and_raw (ip);
  call ioa_$ioa_switch (oswitch, "   ^a^vt^a^[,^a^]",
       op_code,
       COLUMN_SPACING,
       address_field (ip, (ip -> instr.use_pr)),
       instr.tag ^= 0, tag_field ((instr.tag)));

  /* add code to print what is pointed to */
  end disassemble_normal;




disassemble_repeat:
  proc;


  call print_addr_and_raw (ip);
  call ioa_$ioa_switch (oswitch,
       "   ^a^[a^]^[b^]^[^vt^d^;x^vt^s^],^d^[,tze^]^,tmi^]^[,tpl^]^[,trc^]^[tnc^]",
       op_code,
       ip -> repeat_instr.a,
       ip -> repeat_instr.b,
       ip -> repeat_instr.use_tally, COLUMN_SPACING, ip -> repeat_instr.tally,
       ip -> repeat_instr.delta,
       ip -> repeat_instr.zero_on,
       ip -> repeat_instr.zero_off,
       ip -> repeat_instr.neg_on,
       ip -> repeat_instr.neg_off,
       ip -> repeat_instr.carry_on,	/* CSNY ? */
       ip -> repeat_instr.carry_off);

  dcl 1 repeat_instr	aligned based,
       2 tally		fixed bin (8) unsigned unal,
       2 a		bit (1) unal,
       2 b		bit (1) unal,
       2 use_tally		bit (1) unal,
       2 term_conditions	unal,
        3 zero_on		bit (1) unal,
        3 zero_off		bit (1) unal,
        3 neg_on		bit (1) unal,
        3 neg_off		bit (1) unal,
        3 carry_on		bit (1) unal,
        3 carry_off		bit (1) unal,
       2 process_overflow	bit (1) unal,
       2 opcode		fixed bin (10) unsigned unal,
       2 pad		bit (2) unal,
       2 delta		fixed bin (6) unsigned unal;

  end disassemble_repeat;

disassemble_eis:
  proc;

  dcl data_type		fixed bin;
  dcl ndesc		fixed bin;/* how many descriptors  it has */
  dcl (
      ALPHA_TYPE		init (0),
      BIT_TYPE		init (1),
      OTHER_TYPE		init (2)
      )			fixed bin internal static options (constant);
  dcl dp			ptr;	/* to a descriptor */
  dcl descx		fixed bin;/* index as we step over descriptors */

  dcl 1 eis_instr_all_descs	aligned based (ip),
       2 pad1		bit (2) unal,
       2 mf3		unal like mod_factor,
       2 enablefault	bit (1) unal,
       2 pad2		bit (1) unal,
       2 mf2		unal like mod_factor,
       2 pad3		bit (11) unal,
       2 mf1		unal like mod_factor;

  dcl 1 mod_factor		aligned based,
       2 ext_base		bit (1) unal,
				/* there is a pr number in address */
       2 length_in_reg	bit (1) unal,
				/* the length of the operand is in a reg */
       2 indirect_descriptor	bit (1) unal,
				/* the descriptor is an indirect ptr */
       2 tag		fixed bin (4) unsigned unal;

  dcl 1 eis_args_info	(3) aligned like mod_factor;

  ndesc = op_mnemonic_$op_mnemonic (op_index).num_desc;
  data_type = op_mnemonic_$op_mnemonic (op_index).dtype;
  if data_type > OTHER_TYPE
    then data_type = OTHER_TYPE;

  eis_args_info (1) = eis_instr_all_descs.mf1;
  eis_args_info (2) = eis_instr_all_descs.mf2;
  eis_args_info (3) = eis_instr_all_descs.mf3;

  call print_addr_and_raw (ip);
  call print_instr_word;

  dp = ip;
  do descx = 1 to number_of_words - 1;
    dp = addrel (dp, 1);
    call print_addr_and_raw (dp);

    /* CASE on what kind of descriptor we have */

    if descx > ndesc		/* it is an arg, not a desc */
      then call print_ind_desc (dp, eis_args_info (descx));
    else if eis_args_info (descx).indirect_descriptor
      then call print_ind_desc (dp, eis_args_info (descx));
    else if desc_is_obscure (op_code, descx)
				/* abnormal type, such as MOP ptr of mvne */
      then call print_obscure_desc (dp, eis_args_info (descx));
    else if data_type = ALPHA_TYPE
      then call print_alpha_desc (dp, eis_args_info (descx));
    else if data_type = BIT_TYPE
      then call print_bit_desc (dp, eis_args_info (descx));
    else call print_numeric_desc (dp, eis_args_info (descx));
  end;				/* of loop over all descriptors */


print_instr_word:
  proc;

  dcl descx		fixed bin;
  dcl need_comma		bit (1) aligned;
  dcl line		char (256) varying;
				/* holds output as built */
  dcl HT			char (1) internal static options (constant)
			init ("	");

  dcl 1 eis_alpha_fill	based (ip),
       2 field		bit (9) unal,
       2 pad		bit (27) unal;

  dcl 1 eis_bit_fill	based (ip),
       2 field		bit (1) unal,
       2 pad		bit (4) unal,
       2 bolr		fixed bin (4) unsigned unal,
       2 pad1		bit (27) unal;

  dcl 1 eis_numeric_fill	aligned based (dp),
       2 pad		bit (10) unal,
       2 round		bit (1) unal,
       2 pad2		bit (25) unal;

  dcl bool_word		(0:15) char (6) internal static
			options (constant) init
			("clear", "and", "02", "03", "04", "05", "xor",
			"or",
			"10", "11", "12", "13", "invert", "15", "nand",
			"set");

  line = op_code;
  line = line || HT;

  do descx = 1 to ndesc;
    line = line || "(";
    need_comma = "0"b;

    if eis_args_info (descx).ext_base
      then call add_option ("pr");
    if eis_args_info (descx).length_in_reg
      then call add_option ("rl");
    if eis_args_info (descx).indirect_descriptor
      then call add_option ("id");
    if eis_args_info (descx).tag ^= 0
      then call add_option (tag_field ((eis_args_info (descx).tag)));
    line = line || ")";

    if descx < ndesc		/* more to come */
      then line = line || ",";
  end;				/* of loop over all MFs */

  if eis_instr_all_descs.enablefault
    then line = line || ",enablefault";

  if data_type = ALPHA_TYPE
    then do;
      if has_fill (op_code)
        then do;
	line = line || ",fill(";
	line = line || octalize (eis_alpha_fill.field);
	line = line || ")";
        end;
      else if has_mask (op_code)
        then do;
	line = line || ",mask(";
	line = line || octalize (eis_alpha_fill.field);
	line = line || ")";
        end;			/* mask */
    end;				/* ALPHA type */
  else if data_type = BIT_TYPE
    then do;
      line = line || ", fill (";
      line = line || char (eis_bit_fill.field);
      line = line || ")";

      if has_boolean (op_code) then do;
	line = line || ", bool (";
	line = line || bool_word (eis_bit_fill.bolr);
	line = line || ")";
        end;			/* bolr hacking */
    end;				/* BIT type */
  else do;
    if eis_numeric_fill.round
      then line = line || ", round";
  end;				/* NUMERIC */

  call ioa_$ioa_switch (oswitch, "   ^a", line);
  return;

add_option:
  proc (c2);


  dcl c2			char (2) aligned parameter;

  if need_comma			/* we have previously written in this MF, need a separator */
    then line = line || ",";
  need_comma = "1"b;
  line = line || c2;
  end add_option;


octalize:
  proc (b9) returns (char (3) aligned);


  dcl c3			char (3) aligned;
  dcl b9			bit (9) parameter;

  call ioa_$rsnnl ("^.3b", c3, (0), b9);
  return (c3);
  end octalize;


  end print_instr_word;


  /* here are internal procedures to print the various kinds of descriptors-
   obscure (which isn't nearly as clever as it ought to be)
   indirect
   alphanumeric
   bit
   numeric

*/

print_obscure_desc:
  proc (descp, mf);

  dcl descp		ptr parameter;
  dcl 1 mf		aligned parameter like mod_factor;

  call ioa_$ioa_switch (oswitch, "   too obscure a descriptor too decode");
  end print_obscure_desc;


print_ind_desc:
  proc (descp, mf);


  dcl descp		ptr aligned parameter;
  dcl 1 mf		aligned parameter like mod_factor;

  call ioa_$ioa_switch (oswitch, "   arg^vt^a^[,^a^]",
       COLUMN_SPACING,
       address_field (descp, (mf.ext_base)),
       descp -> instr.tag ^= 0, tag_field ((descp -> instr.tag)));
  end print_ind_desc;

print_alpha_desc:
  proc (descp, mf);


  dcl descp		ptr aligned parameter;
  dcl 1 mf		aligned parameter like mod_factor;

  dcl alpha_types		(0:3) char (1) internal static
			options (constant) init ("9", "6", "4", "?");
  dcl NINE_BIT		fixed bin internal static
			options (constant) init (0);

  dcl 1 alpha_desc		aligned based (descp),
       2 y		bit (18) unal,
       2 char_no		fixed bin (3) unsigned unal,
       2 type_code		fixed bin (2) unsigned unal,
       2 pad		bit (1) unal,
       2 length		fixed bin (12) unsigned unal;

  call ioa_$ioa_switch (oswitch,
       "   desc^aa^vt^a(^[^d^s^;^s^d^]),^[^a^s^;^s^d^]",
       alpha_types (type_code),
       COLUMN_SPACING,
       address_field (descp, (mf.ext_base)),
       alpha_desc.type_code = NINE_BIT, divide (char_no, 2, 17, 0), char_no,
       mf.length_in_reg, tag_field ((alpha_desc.length)), alpha_desc.length);
  end print_alpha_desc;


print_bit_desc:
  proc (descp, mf);


  dcl descp		ptr aligned parameter;
  dcl 1 mf		aligned parameter like mod_factor;

  dcl 1 bit_desc		aligned based (descp),
       2 y		bit (18) unal,
       2 char_no		fixed bin (2) unsigned unal,
       2 bit_no		fixed bin (4) unsigned unal,
       2 length		fixed bin (12) unsigned unal;

  call ioa_$ioa_switch (oswitch, "   descb^vt^a(^d),^[^a^s^;^s^d^]",
       COLUMN_SPACING,
       address_field (descp, (mf.ext_base)),
       char_no * 9 + bit_no,
       mf.length_in_reg,
       tag_field ((bit_desc.length)),
       bit_desc.length);
  end print_bit_desc;


print_numeric_desc:
  proc (descp, mf);


  dcl descp		ptr aligned parameter;
				/* aren't you getting bored? */
  dcl 1 mf		aligned parameter like mod_factor;

  dcl sign_name		(0:3) char (2) aligned internal static
			options (constant)
			init ("fl", "ls", "ts", "ns");

  dcl 1 numeric_desc	aligned based (descp),
       2 y		bit (18) unal,
       2 char_no		fixed bin (3) unsigned unal,
       2 type4		bit (1) unal,
       2 sign_type		fixed bin (2) unsigned unal,
       2 scale_factor	fixed bin (5) unal,
       2 length		fixed bin (6) unsigned unal;

  call ioa_$ioa_switch (oswitch,
       "   desc^[4^;9^]^a^vt^a(^[^d^s^;^s^d^]),^[^a^s^;^s^d^]^[,^d^]",
       numeric_desc.type4,		/* which type ? */
       sign_name (numeric_desc.sign_type),
       COLUMN_SPACING,
       address_field (descp, (mf.ext_base)),
       type4, numeric_desc.length, divide (numeric_desc.length, 2, 17, 0),
       mf.length_in_reg, tag_field ((numeric_desc.length)),
       numeric_desc.length,
       scale_factor ^= 0, scale_factor);
  end print_numeric_desc;


desc_is_obscure:
  proc (op_name, desc_no) returns (bit (1) aligned);


  /* for certain ops, one of the descriptors will not be of the expected type */

  dcl op_name		char (6) aligned parameter;
  dcl desc_no		fixed bin parameter;
				/* input, which desc */

  return (
       (op_name = "btd" & desc_no = 1) |
       (op_name = "dtb" & desc_no = 2) |
       (op_name = "mvne" & desc_no = 2)
       );
  end desc_is_obscure;
  end disassemble_eis;


  /* miscellaneous useful things */


print_addr_and_raw:
  proc (p);


  dcl p			ptr parameter;
  dcl based_word		bit (36) aligned based (p);
  call ioa_$ioa_switch_nnl (oswitch, "    ^6o ^w",
       fixed (rel (p), 18, 0), based_word);
  end print_addr_and_raw;

address_field:
  proc (p, use_pr) returns (char (10) aligned);


  dcl p			ptr aligned parameter;
				/* to instruction */
  dcl use_pr		bit (1) aligned parameter;
				/* which format is it ? */
  dcl rs			char (9) aligned;
  call ioa_$rsnnl ("^[pr^d|^d^s^;^s^s^d^]", rs, (0),
       use_pr, p -> instr_pr.address.pr, p -> instr_pr.address.offset,
       p -> instr.address.offset);
  return (rs);

  end address_field;



tag_field:
  proc (tag) returns (char (3) aligned);


  /* this proc exists to isolate references to the modifier data base -
   hope to make it part of op_mnemonic some day */

  dcl tag			fixed bin parameter;

  if tag < lbound (modifier, 1) | tag > hbound (modifier, 1)
    then return ("bad");
    else return (modifier (tag));
  end tag_field;


  /* predicates on instruction types */

is_repeat_instr:
  proc (op_name) returns (bit (1) aligned);


  dcl op_name		char (6) aligned parameter;

  return (op_name = "rpd" | op_name = "rpl" | op_name = "rpt");

is_tra_instr:
  entry (op_name) returns (bit (1) aligned);

  return (
       op_name = "teo" | op_name = "teu" | op_name = "tmi"
       | op_name = "tmoz" | op_name = "tnc" |
       op_name = "tnz" | op_name = "tov" | op_name = "tpl"
       | op_name = "tpnz" | op_name = "tra" |
       op_name = "trc" | op_name = "trtf" | op_name = "trtm"
       | op_name = "tsp0" | op_name = "tsp1" |
       op_name = "tsp2" | op_name = "tsp3" | op_name = "tsp4"
       | op_name = "tsp5" | op_name = "tsp6" |
       op_name = "tsp7" | op_name = "tss" | op_name = "tsx0"
       | op_name = "tsx1" | op_name = "tsx2" |
       op_name = "tsx3" | op_name = "tsx4" | op_name = "tsx5"
       | op_name = "tsx6" | op_name = "tsx7" |
       op_name = "ttf" | op_name = "ttm" | op_name = "tze");

is_double_instr:
  entry (op_name) returns (bit (1) aligned);

  return (op_name = "adaq" | op_name = "adlaq" | op_name = "anaq"
       | op_name = "canaq" |
       op_name = "cmpaq" | op_name = "cnaaq" |

  /* need all the df?? ops */

       op_name = "eaq" | op_name = "epaq" | op_name = "eraq"
       | op_name = "lcaq" | op_name = "ldaq" |
       op_name = "oraq" | op_name = "sbaq" | op_name = "sblaq"
       | op_name = "staq");


has_fill:
  entry (op_name) returns (bit (1) aligned);

  return (op_name = "cmpc" | op_name = "mlr" | op_name = "mvt");

has_boolean:
  entry (op_name) returns (bit (1) aligned);

  return (op_name = "csl" | op_name = "csr" | op_name = "sztl"
       | op_name = "sztr");

has_mask:
  entry (op_name) returns (bit (1) aligned);

  return (op_name = "scm");


  end;				/* is_XXXXX_instr */


  end print_instructions_;
