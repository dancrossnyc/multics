/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_error_:
  proc options (variable);

  /* *	PROBE_ERROR_
   *
   *	Prints error messages for probe subsystem, and aborts as many levels as necessary.
   *
   *	Interim kludge: probe_et_ is not a real error table; rather, values from probe_et_
   *	are guaranteed to be between 1000 and 2000, for ease of recognition.
   *
   *	Initial Version:  12 August 1974 by Jeffrey M. Broughton
   *	Modified: 8 Dec 78 by James R. Davis
   *	Modified: 9 Apr 79 By W. Olin Sibert to make it use probe_et_ instead.
   *	Modified: 06/23/79 WOS to add probe_error_$record, include request name 
   *	Modified: 03/10/80 JRD to fix off-by-one in checking error_code
   *	Modified: 01/16/85 by Steve Herbst to exit probe if doing "quit" request.
*/

  dcl message		char (132) varying;
				/* the message we will output */
  dcl ioa_message		char (300) varying;
  dcl total_message		char (400) varying;
  dcl prefix_string		char (64) varying;
  dcl type		fixed bin;
  dcl char_100		char (100) aligned;
				/* argument for convert_status_code */
  dcl based_str_lth		fixed bin (21);
  dcl based_str_ptr		pointer;
  dcl based_str		char (based_str_lth) based (based_str_ptr);
  dcl error_code		fixed bin (35);
  dcl reason		fixed bin;/* index into probe_et_ */
  dcl nargs		fixed bin;
  dcl first_arg		fixed bin;
  dcl output_switch		pointer;
  dcl (debug_sw, long_sw)	bit (1) aligned;

  dcl alp			ptr;	/* our arg list pointer */

  dcl 1 descriptor		aligned based like desc_;

  dcl 1 arg_list		based (alp) aligned,
       2 n_args		bit (17) unal,
       2 code		bit (19) unal,
       2 n_desc		bit (17) unal,
       2 fill		bit (19) unal,
       2 ptr		(1000) ptr aligned;

  dcl based_ptr		pointer aligned based;
  dcl based_fb35		fixed bin (35) based;

  dcl cu_$cl		entry (bit (1) aligned);
  dcl cu_$arg_list_ptr	entry (ptr);
  dcl com_err_		entry options (variable);
  dcl convert_status_code_	entry (fixed bin (35), char (8) aligned,
			char (100) aligned);
  dcl ioa_$ioa_switch	entry options (variable);
  dcl ioa_util_$rs_with_string
			entry (ptr, fixed bin (21), ptr, fixed bin,
			char (*) varying);

  dcl iox_$error_output	pointer external static;
  dcl probe_data_$debug_sw	bit (1) aligned external static;
  dcl probe_et_$recorded_message
			fixed bin (35) external static;

  dcl (
      WARNING		init (1), /* format and print a warning message */
      ERROR		init (2), /* print a message and goto probe_info.request_line_abort */
      SYSTEM_ERROR		init (3), /* now same as ERROR; retained for historical reasnos */
      RECORD_ONLY		init (4), /* format a message and leave it in probe_info */
      MALFUNCTION		init (5)
      ) /* format and print the message, and call the listener */
			fixed bin internal static options (constant);

  dcl whoami		char (32) internal static
			options (constant) init ("probe_error_");
  dcl MALFUNCTION_MESSAGE	char (120) internal static
			options (constant) init
			(
			"Please issue the command ""trace_stack"", and give the output to system maintenence personnel."
			);

  dcl probe_error_return	condition;

  dcl (null, addr, addrel, binary, index, rtrim, substr, length)
			builtin;

  /*  */

  type = ERROR;			/* print message, and abort request */
  goto COMMON;


probe_error_$warning:
  entry options (variable);

  type = WARNING;			/* just print message and return */
  goto COMMON;


probe_error_$system:
  entry options (variable);

  type = SYSTEM_ERROR;		/* same as probe_error_ proper, retained for compatibility */
  goto COMMON;


probe_error_$record:
  entry options (variable);

  type = RECORD_ONLY;		/* leave message in probe_info.recorded_message */
  goto COMMON;


probe_error_$malfunction:
  entry options (variable);

  type = MALFUNCTION;		/* print litany about malfunction, and get new command level */
  goto COMMON;


COMMON:
  probe_error_table_ptr = addr (probe_et_$);
  call cu_$arg_list_ptr (alp);	/* get our arglist pointer */

  nargs = binary (arg_list.n_args);
  error_code = 0;			/* default values */
  first_arg = -1;
  probe_info_ptr = null ();

  if nargs = 0 then do;		/* call probe_error_ () */
    end;				/* everything has default values */

  else if nargs = 1 then do;		/* call probe_error_ (code) */
      error_code = arg_list.ptr (1) -> based_fb35;
    end;

  else if nargs = 2 then do;		/* call probe_error_ (probe_info_ptr, code); */
      probe_info_ptr = arg_list.ptr (1) -> based_ptr;
      error_code = arg_list.ptr (2) -> based_fb35;
    end;

  else do;			/* call probe_error_ (probe_info_ptr, code, ioa_stuff); */
    probe_info_ptr = arg_list.ptr (1) -> based_ptr;
    error_code = arg_list.ptr (2) -> based_fb35;
    first_arg = 3;
  end;

  if probe_info_ptr = null () then do;	/* get some modes */
      long_sw = "1"b;
      debug_sw = probe_data_$debug_sw;
      output_switch = iox_$error_output;
    end;

    else do;			/* we have probe_info, lets use it */
      long_sw = probe_modes.error_messages = LONG_mode_type;
      if probe_modes.catch_errors
        then debug_sw = "1"b;		/* if this is on, trap all calls to probe_error_ */
      else if probe_modes.catch_error_once then do;
				/* in this case, catch only this call */
	debug_sw = "1"b;
	probe_modes.catch_error_once = "0"b;
        end;
      else debug_sw = "0"b;

      if type = WARNING
        then
	   output_switch = probe_info.output_switch;
        else output_switch = iox_$error_output;
    end;

  if error_code = 0
    then /* no error message */
         message = "";

  else if error_code = probe_et_$recorded_message then do;
				/* just print the leftover message */
      if probe_info_ptr ^= null ()
        then
	   total_message = probe_info.error_message;
        else total_message =
	        "No probe_info available to print recorded message from.";
      goto PROCESS_RECORDED_MESSAGE;
    end;

  else if error_code > 1000
       & error_code <= probe_error_table.n_messages + 1000 then do;
      reason = error_code - 1000;	/* convert to an index into probe_et_ */
      if long_sw
        then /* get a message from probe_et_ */
	   message = probe_error_table.long_message (reason);

        else do;
	if length (probe_error_table.short_message (reason)) = 0
	  then /* the short is the same as the long */
	       message = probe_error_table.long_message (reason);
	  else message = probe_error_table.short_message (reason);
				/* we want the short message */
        end;
    end;

  else do;			/* otherwise, assume it's a standard status code */
    call convert_status_code_ (error_code, (""), char_100);
    message = rtrim (char_100);	/* use long version, regardless of long_sw */
  end;

  if long_sw then do;		/* construct and output prefix "probe (value): " */
      if probe_info_ptr = null ()
        then prefix_string = "probe: ";
        else do;
	prefix_string = rtrim (probe_static_info.name);
	if (probe_info.executing_request) & (probe_info.request_name ^= "")
	  then do;
	    prefix_string = prefix_string || " (";
				/* only onclude request name if there is one */
	    prefix_string =
	         prefix_string || rtrim (probe_info.request_name);
	    prefix_string = prefix_string || ")";
	  end;
	prefix_string = prefix_string || ": ";
        end;
    end;

    else prefix_string = "";

  if index (message, "^") = 0 then do;	/* it's not an ioa_ control string, see if next arg is */
      if first_arg > 0 then do;	/* this is only possible if there are enough args to test */
	if arg_list.ptr (nargs + first_arg) -> descriptor.type_ = char_dtype
	  then do;
	    based_str_lth =
	         arg_list.ptr (nargs + first_arg) -> descriptor.precision_;
	    based_str_ptr = arg_list.ptr (first_arg);
	  end;

	else if arg_list.ptr (nargs + first_arg) -> descriptor.type_
	     = varying_char_dtype then do;
	    based_str_lth =
	         addrel (arg_list.ptr (first_arg), -1) -> based_fb35;
	    based_str_ptr = arg_list.ptr (first_arg);
	  end;

	else do;
	  based_str_lth = -1;
	  based_str_ptr = null ();
	end;

	if based_str_ptr ^= null () then do;
	    if length (message) > 0
	      then
		 message = message || " ";
	    message = message || based_str;
	    first_arg = first_arg + 1;/* take any ioa args from next arg */
	  end;
        end;
    end;

  if first_arg > 0
    then /* get ioa_string and additional cruft */
         call ioa_util_$rs_with_string (addr (substr (message, 1, 1)),
	    length (message),
	    alp, first_arg, ioa_message);
    else ioa_message = rtrim (message);

  total_message = prefix_string;	/* assemble the message into one place */
  total_message = total_message || ioa_message;

  if probe_info_ptr ^= null () then do; /* if there's a place, */
      probe_info.error_message = total_message;
				/* copy last message into probe_info */
      probe_info.error_code = error_code;
    end;

PROCESS_RECORDED_MESSAGE:
  if type ^= RECORD_ONLY
    then /* print the message, unless we're just recording */
         call ioa_$ioa_switch (output_switch, "^a", total_message);

  if debug_sw then do;		/* this causes all errors to get a new command level */
      call com_err_ (0, whoami,
	 "Debug on, calling cu_$cl. Type = ^[Warning^;Error^;System Error^;Record only^;Malfunction.^].",
	 type);
      if type = RECORD_ONLY
        then /* tell the guy what the message is gonna be */
	   call ioa_$ioa_switch (probe_info.output_switch, "Message: ^a.",
	        total_message);
      call cu_$cl ("0"b);
    end;				/* allow "start" to cause normal action */

  if type = WARNING
    then return;			/* just return, with no further ado */
  else if type = RECORD_ONLY
    then return;			/* same if just recording */

  else if type = ERROR | type = SYSTEM_ERROR then do;
      if probe_info_ptr = null () then do;
	call com_err_ (0, whoami,
	     "Cannot abort probe; no probe_info available. Returning to command level."
	     );
	goto CALL_LISTENER;
        end;

      if probe_info.executing_quit_request
        then go to probe_info.abort_probe_label;
        else goto probe_info.abort_line_label;
				/* goto to the global abort label */
    end;

  else do;			/* it was a malfunction */
    call ioa_$ioa_switch (output_switch, MALFUNCTION_MESSAGE);
    call com_err_ (0, whoami, "Returning to command level.");
    goto CALL_LISTENER;
  end;

CALL_LISTENER:
  on probe_error_return goto RETURN_ANYWAY;
				/* set up a trap for this */

  call cu_$cl (^debug_sw);

  call com_err_ (0, whoami, "Illegal return. Returning to command level.");
  goto CALL_LISTENER;

RETURN_ANYWAY:
  return;

  /*  */

%include probe_error_table;

  /* ;;;;;;; */

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_modes;

  /* ;;;;;;; */

%include descriptor;

  /* ;;;;;;; */

%include std_descriptor_types;

  end;				/* probe_error_ external procedure */
