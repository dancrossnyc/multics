/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-06-27,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added initialization data . Probe often used values that had not be
     properly initialized.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_create_reference_:
  proc (P_probe_info_ptr, P_ref_ptr);

  /* *	This procedure allocates and initializes a reference node in the current
   *	expression area. */
  /* Modified June 83 JMAthane to initialize new "type_ptr" field */

  dcl (
      P_probe_info_ptr	pointer,
      P_ref_ptr		pointer,	/* pointer to reference node we create */
      P_ref_block_ptr	pointer
      )			parameter;/* pointer to reference block to initialize */


  dcl probe_seg_info_	entry (ptr, ptr, fixed bin (35)) returns (ptr);
  dcl (addr, null)		builtin;

  probe_info_ptr = P_probe_info_ptr;
  P_ref_ptr = null ();		/* until we find out otherwise */

  allocate ref_block in (expression_area) set (ref_block_ptr);

  ref_block.ref_node.type_ptr = null;
  ref_block.ref_node.argument_list = addr (ref_block.arglist);
  ref_block.ref_node.subscript_ptr = addr (ref_block.subscripts);
  ref_block.ref_node.source_info_ptr = addr (ref_block.source_info);
  ref_block.ref_node.subscript_refs_ptr = addr (ref_block.sub_refs);
  ref_block.subscripts.number = 0;
  ref_block.arglist.number = 0;
  ref_block.ref_node.optional_info.n_arguments = 0;
  ref_block.ref_node.optional_info.n_subscripts = 0;
  ref_block.ref_node.symbol_ptr = null ();
  ref_block.ref_node.type_ptr = null ();
  ref_block.ref_node.address_ptr = null ();
  ref_block.ref_node.base_addr = null ();
  ref_block.ref_node.name = "";
  ref_block.ref_node.type = 0;
  ref_block.ref_node.descriptor = 0;
  ref_block.ref_node.precision = 0;
  ref_block.ref_node.flags = "0"b;
  ref_block.ref_node.constant_token_ptr = null ();

  ref_block.source_info.seg_info_ptr =
       probe_seg_info_ (probe_info_ptr, null (), (0));
  ref_block.c_symbol_ptr = null ();

  P_ref_ptr = addr (ref_block.ref_node);/* all done */
  return;				/* end of probe_create_reference_ entry */


probe_create_reference_$init:
  entry (P_probe_info_ptr, P_ref_block_ptr);

  /* *	This entry just initializes an already existing ref_block, probably
   *	declared automatic in its caller. */

  probe_info_ptr = P_probe_info_ptr;
  ref_block_ptr = P_ref_block_ptr;


  ref_block.ref_node.type_ptr = null;
  ref_block.ref_node.argument_list = addr (ref_block.arglist);
  ref_block.ref_node.subscript_ptr = addr (ref_block.subscripts);
  ref_block.ref_node.source_info_ptr = addr (ref_block.source_info);
  ref_block.ref_node.subscript_refs_ptr = addr (ref_block.sub_refs);
  ref_block.ref_node.optional_info.n_subscripts = 0;
  ref_block.subscripts.number = 0;
  ref_block.arglist.number = 0;
  ref_block.ref_node.symbol_ptr = null ();
  ref_block.ref_node.type_ptr = null ();
  ref_block.ref_node.address_ptr = null ();
  ref_block.ref_node.base_addr = null ();
  ref_block.ref_node.name = "";
  ref_block.ref_node.type = 0;
  ref_block.ref_node.descriptor = 0;
  ref_block.ref_node.precision = 0;
  ref_block.ref_node.flags = "0"b;
  ref_block.ref_node.constant_token_ptr = null ();
  ref_block.source_info.seg_info_ptr =
       probe_seg_info_ (probe_info_ptr, null (), (0));
  ref_block.c_symbol_ptr = null ();

  return;				/* end of code for $init entrypoint */

probe_create_reference_$destroy:
  entry (P_probe_info_ptr, P_ref_ptr);

  /* *	This entry frees a reference node and associated storage that was
   *	created using probe_create_reference_. Since the expression area is
   *	freed with every request invocation, however, it is usually unnecessary
   *	to use this entrypoint. */

  probe_info_ptr = P_probe_info_ptr;

  ref_block_ptr = P_ref_ptr;
  P_ref_ptr = null ();

  free ref_block in (expression_area);
  return;				/* end of $destroy entrypoint */

%include probe_info;
%include probe_references;
%include probe_ref_block;
%include probe_source_info;

  end;				/* probe_create_reference_ external procedure */
