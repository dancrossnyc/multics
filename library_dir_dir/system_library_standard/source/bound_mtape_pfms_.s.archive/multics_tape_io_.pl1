/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
multics_tape_io_: procedure;

/* format: style4 */

/* *	This program runs under control of the mtape_ I/O module and is meant
   *	to process data and file formats that are specific to Multics
   *	formated tapes, and is known as a Per-Format module.
   *
   *	This Per-Format module is not fully implemented, and is only included
   *	so that if a Multics tape volume is mounted and recognized by
   *	mtape_/RCP, a linkage error will not result. When this module is
   *	called at its pfm_init entry, an error message is displayed
   *	explaining that the Multics Per-format module has not been
   *	implemented, and an error code is returned.
   *
   *	Modification History:
   *
   *	Dummy version created by J. A. Bush 07/10/83
*/

/*		ARGUMENT DATA		*/

dcl  arg_mtdp ptr;					/* Pointer to the mtape data structure */
dcl  arg_code fixed bin (35);				/* Return error code */
dcl  arg_info_ptr ptr;				/* Pointer to Order data from iox_$control call */
dcl  arg_io_call_infop ptr;				/* Pointer to io_call control info structure */
dcl  arg_order_name char (*);				/* Name of Control order to be processed */
dcl  arg_lr_ptr ptr;				/* Pointer to current label record structure */
dcl  arg_labno fixed bin;				/* label record within label group */
dcl  arg_type fixed bin;				/* 1 => BOF; 2 => EOV; 3 => EOF */
dcl  arg_convert fixed bin;				/* Label record conversion indicator */

/*		AUTOMATIC DATA		*/

dcl  code fixed bin (35);
dcl  buf_ptr ptr;					/* Auto copy of users buffer pointer */
dcl  buf_len fixed bin (21);				/* Auto copy of users lrec buffer */
dcl  rec_len fixed bin (21);				/* Auto copy of logical record length */

/*		CONSTANT DATA		*/

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$unimplemented_version fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

/*		EXTERNAL ENTRIES		*/

/* 		BASED VARIABLES		*/
%page;
/* pfm_init - entry to initialize the Per-Format module, setting up file and volume
   processing parameters and determining correctness of current volume */

pfm_init: entry (arg_mtdp, arg_code);

	call SETUP;				/* initialize our enviornment */
	code = error_table_$unimplemented_version;	/* This is for the dummy PFM */
	call mtape_$error (mtdp, code,
	     "^/The mtape_ Multics Per-Format module has not been fully implemented.");
	arg_code = code;
	return;
%page;
/* file_open - entry to do format specific processing in opening the file
   or file set (i.e. read and write file labels) */

file_open: entry (arg_mtdp, arg_code);

	call SETUP;				/* initialize our enviornment */
	return;
%page;
/* file_close - entry to do format specific processing in closing the file
   or file set (i.e. read and write file trailer labels) */

file_close: entry (arg_mtdp, arg_code);

	call SETUP;				/* initialize our enviornment */
	return;
%page;
/* read - entry to read format specific logical records from the current file */

read: entry (arg_mtdp, arg_code);

	mtdp = arg_mtdp;				/* copy arguments */
	buf_ptr = mtape_data.arg_buf_ptr;		/* If = null, return length of next record */
	buf_len = mtape_data.arg_buf_len;
	return;
%page;
/* write - entry to write format specific logical records into the current file */

write: entry (arg_mtdp, arg_code);

	mtdp = arg_mtdp;				/* Copy arguments */
	buf_ptr = mtape_data.arg_buf_ptr;
	buf_len = mtape_data.arg_buf_len;
	return;
%page;
/* order - entry to process format specific control orders not recognized by mtape_ */

order: entry (arg_mtdp, arg_order_name, arg_info_ptr, arg_io_call_infop, arg_code);

	call SETUP;				/* initialize our enviornment */ return;
%page;
/* decode_file_labels - entry to extract info contained in file labels, and fill in file_info structure */

decode_file_labels: entry (arg_mtdp, arg_lr_ptr, arg_labno, arg_type, arg_code);

	call SETUP;				/* initialize our enviornment */ return;
%page;
/* encode_file_labels - entry to fill in file labels from info obtained from file_info structure */

encode_file_labels: entry (arg_mtdp, arg_lr_ptr, arg_labno, arg_type, arg_convert, arg_code);

	call SETUP;				/* initialize our enviornment */
	return;
%page;
/* SETUP - internal procedure to set up enviornment for the external entries */

SETUP: proc;

	mtdp = arg_mtdp;				/* get pointers to pertinient data */
	vs_ptr = mtape_data.vs_current;
	fi_ptr = mtape_data.fi_current;
	maip = mtape_data.attach_info_ptr;
	moip = mtape_data.open_info_ptr;
	mpfmip = mtape_data.pfm_info_ptr;
	arg_code, code = 0;				/* and reset error codes */

     end SETUP;
%page;
%include mtape_includes;
%page;
%include rcp_volume_formats;

     end multics_tape_io_;
