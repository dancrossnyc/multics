/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Fixed bug in passing file parameters when calling a PASCAL procedure.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

probe_invoke_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /*  This procedure is used to invoke functions and call subroutines.  The arguments supplied
   will be converted to the expected type if entry argument descriptors are available for
   the called entry.

   Initial Version:  10 August 1974 by Jeffrey M. Broughton
   Modified:  4 December 1978 by James R. Davis to not clobber generation ptr
   Modified: 12 December 1978 by JRD to call assign_value instead of assign_reference
   Modified: 10 March 1980 by JRD to call probe_assign_value_
   Note: this program could be cleaned up a fair bit, and ought to be, someday */
  /* Made to call Pascal programs 09/14/83 J.M.Athane */
  /* Added version strings to runtime_symbol_info_ structures 10/06/83 S. Herbst */
  /* Fixed to call gates 02/10/84 S. Herbst */
  /* Fixed bug in passing file parameters in Pascal JMAthane June 85 */

  dcl (
      P_probe_info_ptr	pointer,
      P_code		fixed bin (35)
      )			parameter;

  dcl 1 P_entry_ref		aligned like reference_node parameter;
				/* description of procedure to call */
  dcl 1 P_return_ref	aligned like reference_node parameter;
				/* place to put return value */

  dcl FB24_ALL_ONES		fixed bin (24) int static
			options (constant)
			init (111111111111111111111111b);

  dcl function_flag		bit (1);	/* flags the entry used */
  dcl number_args		fixed bin;/* number of arguments supplied */
  dcl possible_number	fixed bin;/* number including return arg */
  dcl entry		pointer;	/* to procedure to be called */
  dcl stack_frame		pointer;	/* display pointer of proc (if any) */
  dcl code		fixed bin (35);
				/* global error code */

  dcl 1 arg_ref_list	aligned based,
				/* list of arguments to procedure */
       2 number		fixed bin,/* how many */
       2 node		(0 refer (arg_ref_list.number)) pointer;
				/* to reference nodes of args */

  dcl 1 encoded		aligned based,
				/* overlay for encoded scale and precision */
       2 scale		fixed bin (17) unaligned,
       2 precision		fixed bin (17) unaligned;

  dcl 1 entry_var		aligned based,
				/* overlay for entry variable */
       2 place		pointer,
       2 frame		pointer;

  dcl type_size		(23) fixed bin internal static
			options (constant)
			initial /* storage needed for converted args */
			(1, 2, 1, 2, 2, 4, 2, 4, 30, 32, 60, 64,
			2, 1, 4, 4, 0, 0, -36, -36, -4, -4, 2);

  dcl (
      error_table_$lower_ring,
      error_table_$nodescr,		/* code for no desciptors */
      probe_et_$array_arg,
      probe_et_$bad_return_val,
      probe_et_$int_proc,
      probe_et_$no_return_desc,
      probe_et_$not_function,
      probe_et_$recorded_message,
      probe_et_$struc_arg,
      probe_et_$wrong_no_args
      )			fixed bin (35) external static;

  dcl probe_assign_value_	entry (ptr,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			fixed bin (35));

  dcl probe_error_$record	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);

  dcl cu_$gen_call		entry (pointer, pointer);
  dcl cu_$grow_stack_frame	entry (fixed bin (18), ptr, fixed bin (35));
  dcl decode_descriptor_	entry (pointer, fixed bin, fixed bin, bit (1),
			fixed bin, fixed bin, fixed bin);
  dcl get_entry_arg_descs_	entry (pointer, fixed bin,
			pointer dimension (*), fixed bin (35));

  dcl (addr, addrel, bit, ceil, divide, fixed, min, null, reverse, substr,
      unspec, verify)	builtin;
%page;

probe_invoke_$function:
  entry (P_probe_info_ptr, P_entry_ref, P_return_ref, P_code);

  function_flag = "1"b;		/* there will be a return argument */
  go to common;


probe_invoke_$subroutine:
  entry (P_probe_info_ptr, P_entry_ref, P_code);

  function_flag = "0"b;		/* no return arg, just call the procedure */
  go to common;

common:
  probe_info_ptr = P_probe_info_ptr;


  /*  Get the number of arguments expected, and find out what procedure to call */

  number_args = P_entry_ref.argument_list -> arg_ref_list.number;
				/* user gave <number> arguments */
  possible_number = number_args + fixed (function_flag, 1, 0);
				/* if function then there may be one more */

  if P_entry_ref.type_ptr = null
    then
      begin;			/* no PASCAL procedure description available */
      if P_entry_ref.type = 16
        then do;			/* invoking an entry variable */
	entry = P_entry_ref.address_ptr -> entry_var.place;
				/* get real entry */
	stack_frame = P_entry_ref.address_ptr -> entry_var.frame;
        end;
      else if P_entry_ref.type = 25
        then /* it is an interanl proc */
	   stack_frame = addr (stack_frame);
				/* int procs not supported, flag as such */
      else do;
        entry = P_entry_ref.address_ptr;/* external entry */
        stack_frame = null;
      end;

      if stack_frame ^= null then do;	/* check for calling an internal proc */
	call probe_error_$record (probe_info_ptr, probe_et_$int_proc,
	     P_entry_ref.name);
	goto RECORDED_MESSAGE;
        end;

%page;

      begin;

        /* When this block is entered, space for the argument list and descriptors will   be allocated */

        declare

	      desc_ptrs		(possible_number) pointer,
				/* argument descriptors from called proc */
	      1 dummy_arg_list	aligned,
				/* argument list  storage */
	       2 align_arg_list	pointer,
				/* kludge to double word align arglist */
	       2 arg_list,		/* here is the real one */
	        3 arg_count		fixed bin (17) unaligned,
				/* number of arguments */
	        3 call_code		fixed bin (17) unaligned initial (4),
				/* this is a pl1 call */
	        3 desc_count	fixed bin (17) unaligned,
				/* number of descriptors */
	        3 info		(possible_number * 2) pointer,
				/* place to pu arg and descriptor ptrs */
	      desc_origin		fixed bin,
				/* index of first desc ptr in info */
	      number_descs		fixed bin,
				/* number of descriptors from proc to be called */
	      type		fixed bin,
				/* attributes from descriptors */
	      ndims		fixed bin,
	      size		fixed bin,
	      scale		fixed bin,
	      packed		bit (1),
	      match		bit (1),
				/* proc has entry descrs, match called args to them */
	      must_build		bit (1),
				/* indicates that we must build a descriptor */

	      1 argument		aligned like reference_node
				based (arg_ref),
				/* reference node for argument */
	      arg_ref		pointer,
	      i			fixed bin;


        /* See if the called procedure has argument descriptors, if it does we will try
   to match the arguments given to the types desired, otherwise, descriptors for
   the arguments supplied will built, and the call made blindly */

        call get_entry_arg_descs_ (entry, number_descs, desc_ptrs, code);
				/* find the descriptors (if any) */
        if code ^= 0
	then if code = error_table_$nodescr | code = error_table_$lower_ring
	       then match = "0"b;	/* problem is tolerable */
	       else do;
	         call probe_error_$record (probe_info_ptr, code, "^a",
		    P_entry_ref.name);
	         goto RECORDED_MESSAGE;
	       end;

	else match = "1"b;


        if match

	then do;			/* try to match given and expected types */

	  if possible_number = number_descs
	    then do;		/* then things are fine */
	      arg_list.arg_count = possible_number * 2;
				/* complete arg list header */
	      arg_list.desc_count = possible_number * 2;
	      desc_origin = possible_number;
	    end;
	  else if function_flag & (number_args = number_descs) then do;
	      call probe_error_$record (probe_info_ptr,
		 probe_et_$not_function, P_entry_ref.name);
	      goto RECORDED_MESSAGE;
	    end;

	  else do;
	    call probe_error_$record (probe_info_ptr,
	         probe_et_$wrong_no_args, P_entry_ref.name);
	    goto RECORDED_MESSAGE;	/* some other problem */
	  end;


	  do i = 1 to number_args;	/* match each argument */
	    arg_ref = P_entry_ref.argument_list -> arg_ref_list.node (i);
	    if argument.type = structure_dtype then do;
	        call probe_error_$record (probe_info_ptr,
		   probe_et_$struc_arg, argument.name);
	        goto RECORDED_MESSAGE;
	      end;

	    call decode_descriptor_ (desc_ptrs (i), 0, type, packed, ndims,
	         size, scale);

	    if ndims > 0 then do;
	        code = probe_et_$array_arg;
	        goto SOME_ERROR;
	      end;

	    else if argument.type ^= type
				/* argument types do not match */
	      then call match_arg (arg_ref, type, size, scale, packed);
	    else if size ^= addr (argument.precision) -> encoded.precision
	      then do;
	        if size = FB24_ALL_ONES
				/* "*" extent */
		then ;		/* just have to make a descriptor */
		else call match_arg (arg_ref, type, size, scale, packed);
	      end;
	    else if scale ^= addr (argument.precision) -> encoded.scale
	      then call match_arg (arg_ref, type, size, scale, packed);
	    else if packed ^= argument.packed
	      then call match_arg (arg_ref, type, size, scale, packed);

	    must_build = (size = FB24_ALL_ONES);
	    if must_build
	      then info (desc_origin + i) = build_descriptor (arg_ref);
	      else info (desc_origin + i) = desc_ptrs (i);
	    info (i) = argument.address_ptr;
	    if type = 20 | type = 22
	      then /* for varying length strings, the pointer to     */
		 info (i) = addrel (info (i), 1);
				/* arg must pt to string itself, not length word. */

	  end;

	  if function_flag then do;	/* create entry for return argument */
	      call decode_descriptor_ (desc_ptrs (number_descs), 0, type,
		 packed, ndims, size, scale);
	      if ndims ^= 0 | size = FB24_ALL_ONES then do;
		call probe_error_$record (probe_info_ptr,
		     probe_et_$bad_return_val, P_entry_ref.name);
		goto RECORDED_MESSAGE;
	        end;

	      P_return_ref.name = P_entry_ref.name || " [return val]";
	      P_return_ref.type = type;
	      P_return_ref.descriptor = type * 2 + fixed (packed, 1, 0);
	      P_return_ref.precision = size;
	      addr (P_return_ref.precision) -> encoded.scale = scale;
	      P_return_ref.flags = "0"b;
	      P_return_ref.constant = "1"b;
	      P_return_ref.packed = packed;
	      P_return_ref.symbol_ptr = null;
	      if P_return_ref.source_info_ptr ^= null
	        then P_return_ref.source_info_ptr -> source_info.block_ptr,
		        P_return_ref.source_info_ptr
		        -> source_info.stack_ptr,
		        P_return_ref.source_info_ptr
		        -> source_info.entry_ptr = null ();
	      i = type_size (type);	/* allocate storage for result */
	      if i < 0		/* char or bit, figure out no of words */
	        then i = divide (size - i, -i, 17, 0);
	      P_return_ref.address_ptr = allocate_temp (i);

	      info (number_descs) = P_return_ref.address_ptr;
	      if type = 20 | type = 22
	        then /* kludge ptr to varying strings to point */
		   /* beyond length word to start of string */
		   info (number_descs) = addrel (info (number_descs), 1);
	      info (desc_origin + number_descs) = desc_ptrs (number_descs);
	    end;

	end;			/* of match code */

	else do;			/* nothing to compare with, work blindly */
	  if function_flag then do;	/* no idea of what the return arg is */
	      call probe_error_$record (probe_info_ptr,
		 probe_et_$no_return_desc, P_entry_ref.name);
	      goto RECORDED_MESSAGE;
	    end;

	  arg_list.arg_count = possible_number * 2;
				/* build argument list header */
	  arg_list.desc_count = possible_number * 2;
	  desc_origin = possible_number;

	  do i = 1 to number_args;	/* build descriptors for all args */
	    arg_ref = P_entry_ref.argument_list -> arg_ref_list.node (i);
	    info (i) = argument.address_ptr;
	    if argument.type = 20 | argument.type = 22
	      then
		 info (i) = addrel (info (i), 1);
	    info (desc_origin + i) = build_descriptor (arg_ref);
	  end;

	end;


        /* Ta Da !!!!!!!! */

        call cu_$gen_call (entry, addr (arg_list));
				/* make the call */
%page;
match_arg:
  procedure (ref, type, precision, scale, packed);


  declare

	ref		    pointer,
				/* to reference node of argument, altered
						   on return to node of matched temporary */
	type		    fixed bin,
				/* desired data type */
	precision		    fixed bin,
				/* arithmetic precsion or size */
	scale		    fixed bin,
	packed		    bit (1),

	1 argument	    aligned like reference_node based (ref),
				/* input argument */
	1 temp		    aligned like reference_node based (tref),
				/* converted argument temporary */
	tref		    pointer,

	based_string	    character (128) based,
	need		    fixed bin,
				/* storage for temporary */
	i		    fixed bin,
	arith_to_char	    bit (1) initial ("0"b),
				/* convert arith to char(*) */
	size		    builtin;


  tref = allocate_temp (size (temp));	/* make a place for it */

  temp.symbol_ptr, temp.source_info_ptr = null;
  temp.name = "argument temporary";

  temp.type = type;			/* fill in data and perform conversion */
  temp.descriptor = type * 2 + fixed (packed, 1, 0);
  temp.precision = precision;
  addr (temp.precision) -> encoded.scale = scale;

  if precision = FB24_ALL_ONES	/* encoded size - target must be bit, char, or area */
    then if argument.type > 12	/* source val also char bit or area */
	 then temp.precision = precision;
				/* is the same for char to char, bit to bit, etc. */
         else if type >= 21 /* target is char */
	 then do;
	   temp.precision = 128;	/* target will have room to hold any arithmetic */
	   arith_to_char = "1"b;	/* will truncate trailing blanks later */
	 end;
         else do;			/* target is bit */
	 i = addr (argument.precision) -> encoded.precision
	      - addr (argument.precision) -> encoded.scale;
	 if i < 0
	   then i = 0;		/* compute size of result */
	 if argument.type > 8
	   then i = ceil (i * 3.32);	/* decimal, result is psuedo-binary */
	 i = min (71, i);
	 temp.precision = i;
         end;

  temp.flags = "0"b;
  temp.packed = packed;

  need = type_size (type);		/* make a place to put temporary */
  if need < 0
    then need = divide (temp.precision - need - 1, -need, 17, 0);
  temp.address_ptr = allocate_temp (need);

  call probe_assign_value_ (probe_info_ptr, temp, argument, code);
				/* convert the two */
  if code ^= 0
    then goto SOME_ERROR;

  if arith_to_char then do;
      i = verify (reverse (temp.address_ptr -> based_string), " ");
      temp.precision = 129 - i;
    end;
  ref = tref;
  return;
  end match_arg;
%page;
build_descriptor:
  procedure (ref) returns (pointer);


  declare

	ref		    pointer,
				/* to argument's reference node */
	1 argument	    aligned like reference_node based (ref),

	1 descriptor	    aligned based (dp),
				/* template descriptor */
	 2 flag		    bit (1) unaligned,
				/* indicates new format */
	 2 type		    bit (6) unaligned,
				/* data type */
	 2 packed		    bit (1) unaligned,
				/* unaligned types */
	 2 ndims		    bit (4) unaligned,
				/* number of dimensions */
	 2 size		    bit (24) unaligned,
				/* arithmetic precision and scale, other size */
	dp		    pointer,
	size		    builtin;

  if argument.type = 17 then do;
      call probe_error_$record (probe_info_ptr, probe_et_$struc_arg,
	 argument.name);
      goto RECORDED_MESSAGE;
    end;
  dp = allocate_temp (size (descriptor));
				/* make a palce for it */

  descriptor.flag = "1"b;		/* and fill in information */
  descriptor.type = bit (fixed (argument.type, 6, 0));
  descriptor.packed = argument.packed;
  descriptor.ndims = (4)"0"b;

  if argument.type > 12		/* non-arithmetic, no scale */
    then descriptor.size = bit (fixed (argument.precision, 24, 0));
    else do;
      substr (descriptor.size, 1, 12) =
	 bit (fixed (addr (argument.precision) -> encoded.scale, 12, 0));
      substr (descriptor.size, 13, 12) =
	 bit (fixed (addr (argument.precision) -> encoded.precision, 12, 0))
	 ;
    end;

  return (dp);


  end build_descriptor;

%page;
allocate_temp:
  procedure (words_needed) returns (pointer);

  /* This routine allocates temporary storage in the stack frame of its caller.  Its function depends on
   its being W  a quick block.  And that the storage be needed only for the length of time that the
   procedure is active. */

  dcl words_needed		fixed bin parameter;
  dcl p			pointer;

  call cu_$grow_stack_frame ((words_needed), p, code);
  if code ^= 0
    then goto SOME_ERROR;		/* lossage */
  return (p);
  end;				/* allocate_temp internal procedure */

      end;			/* of main procedure begin block */
    end;				/* non PASCAL typed procedure */
%page;
    else
      begin;			/* call a la PASCAL : all proc and params supported ! */

      /* for argument checking, we will use the formal parameters list
   which describes how the procedure was declared in the current program. */

      dcl 1 dummy_arg_list,
	 2 align		    ptr,
	 2 arg_list,
	  3 arg_count	    fixed bin (17) unal
			    init (possible_number * 2),
	  3 call_code	    fixed bin (17) unal init (4),
	  3 desc_count	    fixed bin (17) unal init (0),
	  3 info		    (possible_number * 2) ptr;

      dcl (f_dims, a_dims)	    fixed bin (35);
      dcl pascal_int_call_op	    fixed bin (35) init (42);
      dcl pascal_ext_call_op	    fixed bin (35) init (43);
      dcl pascal_return_value	    fixed bin (35) based;
      dcl pascal_entry_parm_size  fixed bin init (5);
      dcl pvalue_ref_ptr	    ptr;
      dcl formal_ptr	    ptr;
      dcl pascal_gen_call_	    entry (ptr, ptr, ptr, fixed bin (35),
			    fixed bin (35));
      dcl operator_number	    fixed bin (35);
      dcl 1 argument	    like reference_node
			    based (arg_ref_ptr) aligned;
      dcl 1 entry_type_info	    like runtime_type_info;
      dcl 1 fconf_type_info	    like runtime_type_info;
      dcl arg_ref_ptr	    ptr;
      dcl bit_size		    fixed bin (35);
      dcl bit_string	    bit (bit_size) unal based;
      dcl temp_addr		    ptr;
      dcl get_size_in_bits_	    entry (fixed bin, fixed bin (35),
			    bit (1) aligned) returns (fixed bin);
      dcl (i, total_dims)	    fixed bin (35);
      dcl (formal_is_conformant, arg_is_conformant)
			    bit (1);
      dcl 1 formal_type_info	    like runtime_type_info;
      dcl 1 arg_type_info	    like runtime_type_info;
      dcl 1 pvalue_ref	    like reference_node
			    based (pvalue_ref_ptr) aligned;
      dcl 1 formal_array_info	    like runtime_array_info;
      dcl 1 arg_array_info	    like runtime_array_info;
      dcl 1 pascal_entry_parm	    based,
	 2 place		    ptr,
	 2 frame		    ptr,
	 2 op_nbr		    fixed bin (35);
      dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35),
			    ptr);
      dcl probe_create_reference_ entry (ptr, ptr);
      dcl (Block_ptr, Linkage_ptr, Stack_ptr, Base_addr)
			    ptr;
      dcl based_ptr		    ptr based;

      if P_entry_ref.type = pascal_parameter_procedure_dtype then do;
	entry = P_entry_ref.address_ptr -> pascal_entry_parm.place;
	stack_frame = P_entry_ref.address_ptr -> pascal_entry_parm.frame;
	operator_number =
	     P_entry_ref.address_ptr -> pascal_entry_parm.op_nbr;
        end;
      else if P_entry_ref.type = pascal_internal_procedure_dtype then do;
	entry = P_entry_ref.address_ptr;
	stack_frame = P_entry_ref.source_info_ptr -> source_info.stack_ptr;
	operator_number = pascal_int_call_op;
        end;
      else if (P_entry_ref.type = pascal_imported_procedure_dtype) |
	 (P_entry_ref.type = pascal_exportable_procedure_dtype) then do;
	entry = P_entry_ref.address_ptr;
	stack_frame = null;
	operator_number = pascal_ext_call_op;
        end;

      formal_ptr = runtime_symbol_info_$son (P_entry_ref.type_ptr);

      do i = 1 to number_args;
        if formal_ptr = null then do;
wrong_no_arg_err:
	  call probe_error_$record (probe_info_ptr, probe_et_$wrong_no_args,
	       P_entry_ref.name);
	  go to RECORDED_MESSAGE;
	end;
        arg_ref_ptr = P_entry_ref.argument_list -> arg_ref_list.node (i);
        Block_ptr = argument.source_info_ptr -> source_info.block_ptr;
        Stack_ptr = argument.source_info_ptr -> source_info.stack_ptr;
        Linkage_ptr =
	   argument.source_info_ptr -> source_info.seg_info_ptr
	   -> seg_info.linkage_ptr;
        Base_addr = argument.base_addr;

        formal_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

        call runtime_symbol_info_$type (formal_ptr, addr (formal_type_info),
	   code);
        if code ^= 0
	then go to SOME_ERROR;

        formal_is_conformant =
	   is_conformant (formal_type_info.base_type_addr, f_dims,
	   formal_array_info);
        if argument.type_ptr = null
	then arg_is_conformant = "0"b;
	else arg_is_conformant =
		is_conformant (argument.type_ptr, a_dims, arg_array_info);
        if formal_type_info.type = pascal_variable_formal_parameter_dtype
	then do;
				/* passed by address. Types must match. Constants not allowed */
	  if (argument.symbol_ptr = null)
	       | (argument.name = "<<constant>>") then do;
invalid_arg_err:
	      call probe_error_$record (probe_info_ptr, 0,
		 "Argument ^d passed to ^a is invalid.", i,
		 P_entry_ref.name);
	      go to RECORDED_MESSAGE;
	    end;
	    else do;

	      arg_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	      call runtime_symbol_info_$type (argument.symbol_ptr,
		 addr (arg_type_info), code);
	      if code ^= 0
	        then go to SOME_ERROR;

	      if formal_is_conformant then do;
		total_dims = 0;

		fconf_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

		call runtime_symbol_info_$type
		     (formal_type_info.base_type_addr,
		     addr (fconf_type_info), code);
		if code ^= 0
		  then go to SOME_ERROR;


		arg_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

		call runtime_symbol_info_$type (argument.type_ptr,
		     addr (arg_type_info), code);
		if code ^= 0
		  then go to SOME_ERROR;

		if ^match_arrays (fconf_type_info, arg_type_info,
		     formal_array_info, arg_array_info, total_dims)
		  then go to invalid_arg_err;
		call pass_conf_desc;
	        end;
	        else do;
		if arg_type_info.size ^= formal_type_info.size
		  then go to invalid_arg_err;
		if (arg_type_info.type ^= formal_type_info.base_type)
		     | (arg_type_info.type_addr
		     ^= formal_type_info.base_type_addr)
		  then
		       call probe_pascal_$real_type
			  ((formal_type_info.base_type),
			  formal_type_info.base_type_addr,
			  (formal_type_info.base_type),
			  formal_type_info.type_addr);
		if (formal_type_info.base_type ^= arg_type_info.type)
		     | (formal_type_info.base_type_addr
		     ^= arg_type_info.type_addr)
		  then
		       go to invalid_arg_err;
	        end;
	      info (i) = argument.address_ptr;
	      if is_file (arg_ref_ptr)
	        then info (i) = info (i) -> based_ptr;
	    end;
	end;
        else if formal_type_info.type = pascal_value_formal_parameter_dtype
	then do;
				/* passed by value. Check is done through probe_assign_ */
	  if formal_is_conformant then do;
	      if arg_is_conformant
	        then go to invalid_arg_err;
	      if argument.type = char_dtype then do;
				/* char string -> PASCAL array */
		dcl 1 char_to_array_type,
		     2 h		        like
				        pascal_symbol_node_header,
		     2 bti	        like pascal_base_type_info,
		     2 size	        fixed bin (35),
		     2 ai,
		      3 access	        like pascal_array_info
				        .access_info,
		      3 virtual_origin      fixed bin (35),
		      3 bounds	        like pascal_array_info.bounds;

		unspec (char_to_array_type) = "0"b;

		char_to_array_type.h.packed,
		     char_to_array_type.h.base_type_info,
		     char_to_array_type.h.size,
		     char_to_array_type.h.array_info = "1"b;
		char_to_array_type.type = pascal_user_defined_type_dtype;
		char_to_array_type.size = 9;
		char_to_array_type.base_type = pascal_char_dtype;
		char_to_array_type.ai.ndims = 1;
		char_to_array_type.ai.array_units = 2;
		char_to_array_type.virtual_origin = 1;
		char_to_array_type.bounds.lower = 1;
		char_to_array_type.bounds.upper = argument.precision;
		char_to_array_type.multiplier = 1;
		char_to_array_type.subscript_type = pascal_integer_dtype;

		argument.type = pascal_user_defined_type_instance_dtype;
		argument.type_ptr = addr (char_to_array_type);
		argument.precision = argument.precision * 9;

		arg_array_info.version = RUNTIME_ARRAY_INFO_VERSION_1;

		call runtime_symbol_info_$array (argument.type_ptr,
		     addr (arg_array_info), code);
		if code ^= 0
		  then go to SOME_ERROR;
	        end;
	      if argument.type_ptr = null
	        then go to invalid_arg_err;

	      arg_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	      call runtime_symbol_info_$type (argument.type_ptr,
		 addr (arg_type_info), code);
	      if code ^= 0
	        then go to SOME_ERROR;

	      total_dims = 0;

	      fconf_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	      call runtime_symbol_info_$type
		 (formal_type_info.base_type_addr, addr (fconf_type_info),
		 code);
	      if code ^= 0
	        then go to SOME_ERROR;

	      if ^match_arrays (fconf_type_info, arg_type_info,
		 formal_array_info,
		 arg_array_info, total_dims)
	        then go to invalid_arg_err;
	      call pass_conf_desc;
	    end;
	  call probe_create_reference_ (probe_info_ptr, pvalue_ref_ptr);
	  pvalue_ref.flags = "0"b;
	  pvalue_ref.name = "value argument for parameter "
	       || runtime_symbol_info_$name (formal_ptr) -> acc.string;
	  pvalue_ref.source_info_ptr = null;
	  pvalue_ref.type = formal_type_info.base_type;
	  pvalue_ref.type_ptr = formal_type_info.base_type_addr;
	  if formal_is_conformant
	    then
	         pvalue_ref.precision = argument.precision;
	    else pvalue_ref.precision =
		    decode (formal_type_info.size,
		    formal_type_info.size_is_encoded);
	  pvalue_ref.descriptor = pvalue_ref.type * 2;
	  if formal_type_info.packed
	    then
	         pvalue_ref.descriptor = pvalue_ref.descriptor + 1;
	  pvalue_ref.packed = formal_type_info.packed;
	  bit_size =
	       get_size_in_bits_ ((pvalue_ref.type), pvalue_ref.precision,
	       (pvalue_ref.packed));
	  pvalue_ref.symbol_ptr = null;
	  pvalue_ref.address_ptr = allocate_temp ((bit_size + 35) / 36);

	  if formal_is_conformant
	    then
	         pvalue_ref.address_ptr -> bit_string =
		    argument.address_ptr -> bit_string;
	    else do;
	      call probe_assign_value_ (probe_info_ptr, pvalue_ref,
		 argument, code);
	      if code ^= 0
	        then go to invalid_arg_err;
	    end;
	  info (i) = pvalue_ref.address_ptr;
	end;
        else if formal_type_info.type = pascal_entry_formal_parameter_dtype
	then do;
	  if argument.type = pascal_parameter_procedure_dtype then do;
				/* nothing. good form */
	    end;
	  if argument.type = pascal_exportable_procedure_dtype
	       | (argument.type = pascal_imported_procedure_dtype) then do;
	      temp_addr = allocate_temp (pascal_entry_parm_size);
	      temp_addr -> pascal_entry_parm.place = argument.address_ptr;
	      temp_addr -> pascal_entry_parm.frame = null;
	      temp_addr -> pascal_entry_parm.op_nbr = pascal_ext_call_op;
	      argument.address_ptr = temp_addr;
	    end;
	  else if argument.type = pascal_internal_procedure_dtype then do;
	      temp_addr = allocate_temp (pascal_entry_parm_size);
	      temp_addr -> pascal_entry_parm.place = argument.address_ptr;
	      temp_addr -> pascal_entry_parm.frame = null;
	      temp_addr -> pascal_entry_parm.op_nbr = pascal_int_call_op;
	      argument.address_ptr = temp_addr;
	    end;
	  info (i) = argument.address_ptr;
	end;
        formal_ptr = runtime_symbol_info_$brother (formal_ptr);
      end;
      if formal_ptr ^= null
        then go to wrong_no_arg_err;

      entry_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

      call runtime_symbol_info_$type (P_entry_ref.type_ptr,
	 addr (entry_type_info), code);
      if code ^= 0
        then go to SOME_ERROR;

      if function_flag then do;
	if entry_type_info.base_type = 0 then do;
	    call probe_error_$record (probe_info_ptr, 0,
	         "^a is not a function", P_entry_ref.name);
	    go to RECORDED_MESSAGE;
	  end;
	allocate pascal_return_value in (expression_area)
	     set (info (number_args + 1));
        end;
        else do;
	if entry_type_info.base_type ^= 0 then do;
	    call probe_error_$record (probe_info_ptr, 0,
	         "^a is a function.", P_entry_ref.name);
	    go to RECORDED_MESSAGE;
	  end;
        end;

      call pascal_gen_call_ (entry, addr (arg_list), stack_frame,
	 operator_number, code);
      if code ^= 0
        then go to SOME_ERROR;

      if function_flag then do;
	P_return_ref.address_ptr = info (number_args + 1);
	P_return_ref.type = entry_type_info.base_type;
	P_return_ref.type_ptr = entry_type_info.base_type_addr;
	if P_return_ref.type = pascal_integer_dtype
	  then P_return_ref.precision = 35;
	else if P_return_ref.type = pascal_real_dtype
	  then P_return_ref.precision = 63;
	else if P_return_ref.type = pascal_boolean_dtype
	  then P_return_ref.precision = 36;
	else P_return_ref.precision = 72 /* pointer */;
	P_return_ref.symbol_ptr = null;
	P_return_ref.name = P_entry_ref.name || " [return value]";
        end;
%page;
      /* Procedures internal to begin block for PASCAL call */

allocate_temp:
  procedure (words_needed) returns (pointer);

  /* This routine allocates temporary storage in the stack frame of its caller. */

  dcl words_needed		fixed bin parameter;
  dcl p			pointer;

  call cu_$grow_stack_frame ((words_needed), p, code);
  if code ^= 0
    then goto SOME_ERROR;		/* lossage */
  return (p);
  end allocate_temp;
%page;
decode:
  proc (value, is_encoded) returns (fixed bin (35));

  dcl value		fixed bin (35);
				/* (input) */
  dcl is_encoded		bit (1);	/* (input) */

  dcl result		fixed bin (35);
  dcl stu_$decode_runtime_value_extended
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			ptr, fixed bin (35)) returns (fixed bin (35));
  dcl ptr			builtin;

  if ^is_encoded
    then
         return (value);

  result =
       stu_$decode_runtime_value_extended (value, Block_ptr, Stack_ptr,
       Linkage_ptr, ptr (Block_ptr, 0),
       Base_addr, argument.type_ptr, code);
  if code ^= 0
    then go to SOME_ERROR;
  return (result);

  end decode;
%page;
is_conformant:
  proc (tp, nd, ai) returns (bit (1));

  dcl tp			ptr;	/* (input) ptr to TYPE symbol block */
  dcl 1 ai		like runtime_array_info;
				/* (output) array info extracted form type TYPE box */
  dcl nd			fixed bin (35);
				/* (output) number of dims of this array */

  nd = 0;
  unspec (ai) = "0"b;
  if tp = null
    then
         return ("0"b);

  nd = runtime_symbol_info_$array_dims (tp);

  ai.version = RUNTIME_ARRAY_INFO_VERSION_1;

  call runtime_symbol_info_$array (tp, addr (ai), code);
  if code ^= 0
    then go to SOME_ERROR;

  if nd = 0
    then return ("0"b);
  return (ai.lower_is_encoded (1));

  end is_conformant;
match_arrays:
  proc (ti1, ti2, ai1, ai2, dims) returns (bit (1));

  dcl 1 (ti1, ti2)		like runtime_type_info;
				/* (input) */
  dcl 1 (ai1, ai2)		like runtime_array_info;
				/* (input) */
  dcl dims		fixed bin (35);
				/* (output) */

  dcl i			fixed bin (35);
  dcl 1 (ai11, ai12)	like runtime_array_info;
  dcl 1 (ti11, ti12)	like runtime_type_info;

  if (ti1.packed ^= ti2.packed)
       | (ti1.base_type ^= ti2.base_type)
       | (ti1.base_type_addr ^= ti2.base_type_addr)
       | (ai1.ndims ^= ai2.ndims)
    then
         return ("0"b);

  if ai1.ndims = 0
    then
         return ("1"b);

  do i = 1 to ai1.ndims;
    if (ai1.subscript_type (i) ^= ai2.subscript_type (i))
         | (ai1.subscript_type_addr (i) ^= ai2.subscript_type_addr (i))
      then
	 return ("0"b);
  end;

  dims = dims + ai1.ndims;

  if ti1.base_type_addr ^= null then do;

      ti11.version = RUNTIME_TYPE_INFO_VERSION_1;
      call runtime_symbol_info_$type (ti1.base_type_addr, addr (ti11), code);
      if code ^= 0
        then go to SOME_ERROR;

      ti12.version = RUNTIME_TYPE_INFO_VERSION_1;
      call runtime_symbol_info_$type (ti2.base_type_addr, addr (ti12), code);
      if code ^= 0
        then go to SOME_ERROR;

      ai11.version = RUNTIME_ARRAY_INFO_VERSION_1;
      call runtime_symbol_info_$array (ti1.base_type_addr, addr (ai11), code);
      if code ^= 0
        then go to SOME_ERROR;

      ai12.version = RUNTIME_ARRAY_INFO_VERSION_1;
      call runtime_symbol_info_$array (ti2.base_type_addr, addr (ai12), code);
      if code ^= 0
        then go to SOME_ERROR;
      return (match_arrays (ti11, ti12, ai11, ai12, dims));
    end;
    else
         return ("1"b);

  end match_arrays;
%page;
pass_conf_desc:
  proc;

  dcl 1 ai		like runtime_array_info;
  dcl desc_len		fixed bin;
  dcl (it, count, index)	fixed bin (35);
  dcl 1 ti		like runtime_type_info;
  dcl desc		(desc_len) based (desc_addr) fixed bin (35);
  dcl desc_addr		ptr;
  dcl tp			ptr;

  desc_len = 1 + 3 * total_dims + 1;
  desc_addr = allocate_temp (desc_len);
  info (i + possible_number) = desc_addr;
  index = 2 + (total_dims - 1) * 3;
  count = 0;
  ai = arg_array_info;
  ti = arg_type_info;
  do it = 1 to ai.ndims;
    call fill_dim;
  end;

  ti.version = RUNTIME_TYPE_INFO_VERSION_1;
  ai.version = RUNTIME_ARRAY_INFO_VERSION_1;

  do while (count ^= total_dims);
    tp = ti.base_type_addr;

    call runtime_symbol_info_$type (tp, addr (ti), code);
    if code ^= 0
      then go to SOME_ERROR;

    call runtime_symbol_info_$array (tp, addr (ai), code);
    if code ^= 0
      then go to SOME_ERROR;

    do it = 1 to ai.ndims;
      call fill_dim;
    end;
  end;

fill_dim:
  proc;

  desc (index) =
       decode (ai.lower (it), ai.lower_is_encoded (it));
  desc (index + 1) =
       decode (ai.upper (it), ai.upper_is_encoded (it));
  desc (index + 2) =
       convert_units (decode (ai.multiplier (it), multiplier_is_encoded (it)),
       (ai.array_units));
  if ^fconf_type_info.packed
    then
         desc (index + 2) = desc (index + 2) / 36;
				/* mult in words */
  index = index - 3;
  count = count + 1;

convert_units:
  proc (value, unit_code) returns (fixed bin (35));
  dcl value		fixed bin (35) parameter;
				/* offset in raw */
  dcl unit_code		fixed bin (2) parameter unsigned;

  goto units_case (unit_code);

units_case (0):
  return (value * bits_per_word);	/* word */
units_case (1):
  return (value);			/* bit */
units_case (2):
  return (value * bits_per_character);	/* char */
units_case (3):
  return (value * bits_per_half);	/* halfword */
  end convert_units;

  end fill_dim;

  end pass_conf_desc;

is_file:
  proc (ref_p) returns (bit (1));

  dcl ref_p		ptr;
  dcl 1 ref		like reference_node based (ref_p);

  if ref.type = pascal_text_file_dtype
    then
         return ("1"b);

  if ref.type = pascal_user_defined_type_instance_dtype then do;
      dcl 1 type_info	    like runtime_type_info;
      type_info.version = RUNTIME_TYPE_INFO_VERSION_1;
      call runtime_symbol_info_$type (ref.type_ptr, addr (type_info), code);
      if code ^= 0
        then go to SOME_ERROR;
      if type_info.type = pascal_record_file_type_dtype
        then
	   return ("1"b);
    end;
  return ("0"b);

  end is_file;


    end;				/* begin block for PASCAL call */
%page;


MAIN_RETURN:			/* standard exit */
  P_code = 0;
  return;


SOME_ERROR:			/* error exit */
  P_code = code;
  return;


RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto SOME_ERROR;

%page;
%include probe_info;
%page;
%include probe_source_info;
%page;
%include probe_tokens;
%page;
%include probe_references;
%page;
%include std_descriptor_types;
%page;
%include acc;
%page;
%include runtime_symbol_info_;
%page;
%include probe_seg_info;
%page;
%include pascal_symbol_node;
%page;
%include system;

  end;				/* external procedure probe_invoke_ */
