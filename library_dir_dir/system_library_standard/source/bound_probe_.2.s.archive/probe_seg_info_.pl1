/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-05-27,JRGray), approve(87-06-24,MCR7711), audit(87-06-24,Huen),
     install(87-07-15,MR12.1-1040):
     Modified to allow breakpoint in more than one component of a bound module
     at a time (probe 111).
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  3) change(88-10-21,WAAnderson), approve(88-10-21,MCR7952),
     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
     Modified code to implement a C feature. If the user specifes 'seg' instead
     of 'seg$main', probe will now assume the user wants 'seg$main' if no
     statement map is found for 'seg'.  This is not particularily elegant
     because it will try using the 'seg$main' convention for any object,
     regardless of the compiler used to generate the object.  If the
     'probe_info.entry_method' field is set to 1, we free the previous
     'seg_info', because it may not reflect the current situation. This
     way we get new accurate information, particularily regarding the
     status of the statement map. Other modules affected to implement
     this feature are 'probe_command_' and 'probe_find_procedure_'. The
     include 'probe_info.incl.pl1' was modified to include the new file
     'retry_using_main'.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_seg_info_:
  proc (P_probe_info_ptr, P_segment_ptr, P_code) returns (ptr);

  /* This procedure is used to retrieve information about a segment or component from its
   symbol table.  Once extracted, the information is stored in the scratch data
   segment for future reference.

   Initial Version:  12 August 1974 by Jeffrey M. Broughton
   Modified:  20 June 1975 by JMB for version 2 object_info structure
   Modified:  26 August 1975 by JMB to change calling sequence
   Converted to probe 4.0 05/19/79 WOS
   Major reorganization for new source ptr and seg_info JRD 25 June 79
   Fix ignore_casep to not always return "1" b for sake of FORTRAN JRD Valentines Day 1980
   09/21/80 WOS -- fixed bugs in forgetting components, and names (#187, #190)
   Modified 17 April 1981 by M. N. Davidoff to fix unitialized variable bug.
   Fixed to check for damaged source map 01/06/83 S. Herbst
   Made to ignore case for Pascal, as for COBOL 08/11/83 S. Herbst

   ENTRIES -
   probe_seg_info_		- to get info set up
   probe_seg_info_$name	- to return the name,  given ptr to seg
   probe_seg_info_$flush	- to discard info
*/

  dcl (
      P_probe_info_ptr	pointer,
      P_segment_ptr		pointer,
      P_code		fixed bin (35)
      )			parameter;

  dcl info		pointer;	/* to procedure source information */

  dcl segment_ptr		ptr;	/* copy of P_segment_ptr */
  dcl segment_number	fixed bin;/* its segment number */
  dcl segment_offset	fixed bin (35);
				/* its word offset */
  dcl offset		bit (18); /* offset into scratch seg for our info */
  dcl bsinfo		ptr;	/* to info for bound seg as a whole */
  dcl hdr			ptr;	/* to symbol table header */
  dcl code		fixed bin (35);
  dcl directory_name	char (168);
  dcl entry_name		char (32);
  dcl time_created		fixed bin (71);

  dcl 1 oi		aligned like object_info;

  dcl (
      probe_et_$non_standard,
      probe_et_$no_table,
      probe_et_$old_format,
      probe_et_$no_map
      )			fixed bin (35) external static;

  dcl hcs_$fs_get_path_name	entry (pointer, character (*), fixed bin,
			character (*), fixed bin (35));
  dcl hcs_$status_mins	entry (pointer, fixed bin (2), fixed bin (24),
			fixed bin (35));
  dcl component_info_$offset	entry (pointer, fixed bin (18), pointer,
			fixed bin (35));
  dcl object_info_$display	entry (pointer, fixed bin (24), pointer,
			fixed bin (35));

  dcl probe_error_$warning	entry options (variable);
  dcl probe_lang_type_	entry (char (*)) returns (fixed bin);

  dcl (addr, addrel, baseno, binary, divide, fixed, index, null, pointer, rel,
      size, stackbaseptr, unspec)
			builtin;
				/**/

  probe_info_ptr = P_probe_info_ptr;
  segment_ptr = P_segment_ptr;

  call get_info_pointer ();		/* look up the info for segment_ptr */

  if info = null ()
    then
         info = probe_static_info.null_seg_info_ptr;

  P_code = code;			/* return the error, if any */
  return (info);

  /**/

probe_seg_info_$name:
  entry (P_probe_info_ptr, P_segment_ptr, P_code) returns (char (32));

  /* *	This entry returns the "canonical" name of the procedure, nothing else */

  probe_info_ptr = P_probe_info_ptr;
  segment_ptr = P_segment_ptr;

  call get_info_pointer ();		/* look up the info for segment_ptr */
  P_code = code;			/* reflect error, if any */

  if info = null ()
    then /* couldn't find out */
         return ("?Unknown?");
  else if (info -> seg_info.segname ^= "")
    then
         return (info -> seg_info.segname);
  else if (info -> seg_info.entry_name ^= "")
    then
         return (info -> seg_info.entry_name);
  else return ("?Unknown?");		/* all cases covered here */

  /**/

probe_seg_info_$flush:
  entry (P_probe_info_ptr, P_segment_ptr);

  /* *	This entry attempts to flush any known saved pointers which refer to
   *	the segment specified. This means it flushes the major seg_info block, and
   *	also any component seg_info's if it was a bound segment. It also flushes
   *	various other random things, which are known about only in free_seg_info. */


  if P_segment_ptr = null () then do;	/* can't flush null pointer -- just return */
      return;
    end;

  probe_info_ptr = P_probe_info_ptr;
  segment_ptr = pointer (P_segment_ptr, 0);
				/* we're dealing with whole segment here */
  segment_number = binary (baseno (segment_ptr), 15);

  if (seg_info_offset (segment_number) = ""b)
    then /* flush the seg_info */
         info = null ();
    else info =
	    pointer (probe_info.scratch_area_ptr,
	    seg_info_offset (segment_number));

  call free_seg_info ();		/* flush it */
  return;				/* end of code for $flush entrypoint */

  /**/

get_info_pointer:
  proc ();

  /* *	This procedure sets the pointer "info" to point to a seg_info block for the
   *	specified pointer. It's major responsibility is to verify that the segment
   *	has not changed out from under us. It also sets some global variables. */


  code = 0;

  if segment_ptr = null () then do;
      info = probe_static_info.null_seg_info_ptr;
				/* "null" seg_info */
      return;			/* all done */
    end;

  segment_offset = binary (rel (segment_ptr), 18);
  segment_number = binary (baseno (segment_ptr), 15);

  entry_name = "?Unknown?";
  info = null ();
  offset = seg_info_offset (segment_number);

  if offset ^= (18)"0"b then do;	/* we have met before */
      info = pointer (probe_info.scratch_area_ptr, offset);
				/* find out whether anything has happened */
      hdr = info -> seg_info.symbol_header_ptr;
      if (probe_info.entry_method = 1 | seg_changedp(info, hdr)) then

	call free_seg_info ();	/* get rid of old entry (entries) */
       probe_info.entry_method = 0;
	call get_seg_info ();	/* get new info */
    end;				/* make a new block for a bound component this time */

    else do;			/* otherwise, we must construct info anew */
      info = null ();		/* indicate that there is nothing presently available */
      call get_seg_info ();		/* and call to get info */
    end;

  if info ^= null ()
    then /* get stuff like current LP, etc. */
         call get_current_runtime_info ();
  return;				/* all done, one way or another */
  end get_info_pointer;		/* internal procedure */

  /**/

get_seg_info:
  proc ();

  /* *	This procedure sets info to point the correct seg_info block, creating one if necessary */

  dcl bitcount		fixed bin (24);

  if info ^= null () then do;		/* have valid entry? */
      if info -> seg_info.bits.bound_segment then do;
				/* it's for a bound segment -- find the component info */
				/* modified to ensure time_created is set through this code path */
	time_created = info -> seg_info.identifier;
				/* time object bound */
	bsinfo = info;		/* save ptr to info blck for the seg */

	info = search_bound_info ();	/* look through bound segment for segment_offset */
	if info ^= null ()
	  then /* if we already know this seg, we're all done */
	       return;

	call create_component_seg_info ();
				/* otherwise, create new info block for component and */
        end;			/* fall through to fill it in */

        else 
	   return;		/* unbound seg, so saved info guaranteed still good */
    end;				/* familiar, valid entry */

    else do;			/* the entry is new this time (might have changed, but old */
      
      call hcs_$fs_get_path_name (segment_ptr, directory_name, (0),
	 entry_name, code);		/* one is all gone) */
      if code ^= 0
        then /* any of these failures are catastrophic */
	   goto MAJOR_LOSSAGE;

      call hcs_$status_mins (segment_ptr, (0), bitcount, code);
      if code ^= 0
        then
	   goto MAJOR_LOSSAGE;

      oi.version_number = object_info_version_2;
      call object_info_$display (pointer (segment_ptr, 0), bitcount, addr (oi),
	 code);
      if code ^= 0
        then
	   goto MAJOR_LOSSAGE;

      hdr = oi.symbp;		/* set this here, for segment is new */
      time_created = hdr -> std_symbol_header.object_created;

      if oi.bound then do;
	call create_bound_seg_info ();/* creates and initializes a seg_info block, setting bsinfo */
	call create_component_seg_info ();
				/* This will set info to point to the block the the component */
        end;			/* new seg, which is bound */

        else do;			/* new seg, not bound */
	if oi.old_format then do;	/* intolerable for unbound seg */
	    code = probe_et_$old_format;
	    goto MAJOR_LOSSAGE;
	  end;

	call create_unbound_seg_info ();
				/* creates and initializes a block for this */
        end;			/* making new seg_info for unbound */
    end;				/*  meeting a new seg */

  if info = null ()
    then goto MAJOR_LOSSAGE;		/* somethins has clearly gone amiss */

  /* *	When we reach here, segment may or may not be new; however, we are
   *	guaranteed that the component is new if a bound seg is being processed.
   *	In any event we have created the seg_info block we must find out things
   *	about it - anything that one finds out that requires knowing if
   *	the seg is bound or not is known already, this still leaves looking for
   *	maps, symbol tables, language type etc... */

  call fill_in_info ();		/* fill in, with info common for both bound segs & components */
  return;


MAJOR_LOSSAGE:			/* the other way out of this subroutine */
  info = null ();			/* code is already set */
  return;
  end get_seg_info;			/* internal procedure */

  /**/

fill_in_info:
  proc ();

  /* *	This procedure fills in binding independent information about the segment */

  dcl ltype		fixed bin;
  dcl hdr_ptr		pointer;
  dcl based_string_lth	fixed bin (21);
  dcl based_string		char (based_string_lth) based;
  dcl pl1			pointer;
  dcl map_length		fixed bin (21);

  info -> seg_info.linkage_ptr = get_linkage_ptr ();
  info -> seg_info.break_info = null ();

  info -> seg_info.map_size = 0;
  info -> seg_info.error_code = 0;
  info -> seg_info.bound_sym_header = hdr;
  info -> seg_info.bound_create_time = time_created;


  /* The two above are used by breaks.  If the seg is unbound they are the time the seg was compiled and a ptr
   to its symbol section header.  If bound, they are the time it was bound in,
   as distinct from the compile time, and a ptr to the header for the bound seg
*/
  info -> seg_info.pad (*) = 0;

  hdr_ptr = info -> seg_info.symbol_header_ptr;
				/* symbol header for component */

  ltype = probe_lang_type_ ((hdr_ptr -> std_symbol_header.generator));
  info -> seg_info.language_type = ltype;

  if ltype = COBOL_lang_type | ltype = PASCAL_lang_type
    then
         info -> seg_info.ignore_case = "1"b;
				/* always, for COBOL and Pascal */
  else if ltype = FORTRAN_lang_type
    then
         info -> seg_info.ignore_case = ignore_casep (hdr_ptr);

  info -> seg_info.original_source_ptr =
       addrel (hdr_ptr, hdr_ptr -> std_symbol_header.source_map);

  pl1 = addrel (hdr_ptr, hdr_ptr -> std_symbol_header.area_pointer);
  if pl1 -> pl1_symbol_block.identifier ^= "pl1info" then do;
      code = probe_et_$no_table;
      info -> seg_info.error_code = code;
				/* record it */
      info -> seg_info.segname = "";	/* and give null values to the rest */
      info -> seg_info.statement_map_ptr = null ();
				/* no map, of course */
      info -> seg_info.map_size = 0;
      return;			/* ignore the rest of this */
    end;

  based_string_lth = fixed (pl1 -> pl1_symbol_block.segname.size, 21);
  info -> seg_info.segname = /* name of "main" entry */
       addrel (hdr_ptr, pl1 -> segname.offset) -> based_string;

  if pl1 -> pl1_symbol_block.map.first ^= "0"b then do;
      info -> seg_info.statement_map_ptr =
	 addrel (hdr_ptr, pl1 -> pl1_symbol_block.map.first);
      map_length =
	 fixed (pl1 -> pl1_symbol_block.last, 18)
	 - fixed (pl1 -> pl1_symbol_block.first, 18);
      info -> seg_info.map_size =
	 divide (map_length, size (statement_map), 17, 0) - 1;
    end;

    else do;			/* otherwise, record the problem */
      code = probe_et_$no_map;
      info -> seg_info.error_code = code;
      info -> seg_info.statement_map_ptr = null ();
				/* provide values to indicate that this is missing */
      info -> seg_info.map_size = 0;
      return;
    end;
  return;
  end fill_in_info;			/* internal procedure */

  /**/

create_bound_seg_info:
  proc ();

  /* *	This procedure creates and initializes a seg_info block for an entire bound
   *	segment, and sets bsinfo to point to it. hdr_ptr is pointing at
   *	std_symbol_header for whole bound seg. Numerous global variables
   *	are imported from above. */

  dcl bindmap_ptr		pointer;


  bindmap_ptr = addrel (hdr, hdr -> std_symbol_header.area_pointer);

  seg_info_nfiles = 1;		/* should be 0, but PL/I won't allow dimension (0) */

  allocate seg_info in (scratch_area) set (bsinfo);

  bsinfo -> seg_info.nfiles = seg_info_nfiles;
  bsinfo -> seg_info.file_pointers (*) = null ();

  bsinfo -> seg_info.language_type = OTHER_lang_type;
  bsinfo -> seg_info.bits = "0"b;
  bsinfo -> seg_info.bits.bound_segment = "1"b;
				/* indicates primary entry for bound seg */

  bsinfo -> seg_info.directory_name = directory_name;
  bsinfo -> seg_info.entry_name = entry_name;
  bsinfo -> seg_info.segname = "<<Bound Segment>>";
  bsinfo -> seg_info.identifier = time_created;

  bsinfo -> seg_info.symbol_header_ptr = hdr;
  bsinfo -> seg_info.original_source_ptr = bindmap_ptr;
  bsinfo -> seg_info.statement_map_ptr = null ();
  bsinfo -> seg_info.break_info = null ();
  bsinfo -> seg_info.chain = null ();
  bsinfo -> seg_info.linkage_ptr = get_linkage_ptr ();
				/* filters out various kinds of badness */

  bsinfo -> seg_info.text_bounds.start = 0;
  bsinfo -> seg_info.text_bounds.end = 0;
  bsinfo -> seg_info.symbol_bounds.start = 0;
  bsinfo -> seg_info.symbol_bounds.end = 0;

  bsinfo -> seg_info.map_size = 0;
  bsinfo -> seg_info.error_code = 0;
  bsinfo -> seg_info.pad (*) = 0;

  seg_info_offset (segment_number) = rel (bsinfo);
				/* remember where the bound seg info is */
  return;
  end create_bound_seg_info;		/* internal procedure */

  /**/

create_unbound_seg_info:
  proc ();

  /* *	This procedure creates and initializes a seg_info block for an unbound
   *	segment, and sets info to point to it. Numerous global variables
   *	are imported from above. */

  dcl source_map_ptr	pointer;
  dcl ub_info		pointer;


  if hdr -> std_symbol_header.source_map = "000000"b3 then do;
				/* haven't got a source map at all */
      source_map_ptr = null ();
      seg_info_nfiles = 1;		/* should be 0, but dimension (0) is invalid PL/I */
    end;

    else do;			/* otherwise, get information about the source map */
      source_map_ptr = addrel (hdr, hdr -> std_symbol_header.source_map);
      seg_info_nfiles = source_map_ptr -> source_map.number;
    end;


  allocate seg_info in (scratch_area) set (ub_info);

  ub_info -> seg_info.nfiles = seg_info_nfiles;
  ub_info -> seg_info.file_pointers (*) = null ();

  ub_info -> seg_info.bits = ""b;

  ub_info -> seg_info.directory_name = directory_name;
  ub_info -> seg_info.entry_name = entry_name;
  ub_info -> seg_info.identifier = time_created;

  ub_info -> seg_info.symbol_header_ptr = hdr;
  ub_info -> seg_info.original_source_ptr = source_map_ptr;

  ub_info -> seg_info.text_bounds.start = 0;
  ub_info -> seg_info.text_bounds.end = 0;
  ub_info -> seg_info.symbol_bounds.start = 0;
  ub_info -> seg_info.symbol_bounds.end = 0;
  ub_info -> seg_info.chain = null;

  info = ub_info;			/* all done */
  seg_info_offset (segment_number) = rel (ub_info);
				/* record the location */
  return;

  end create_unbound_seg_info;	/* internal procedure */

  /**/

create_component_seg_info:
  proc ();

  /* *	This procedure creates and initializes a seg_info block for a component
   *	of the current bound segment. */

  dcl ct_info		ptr;
  dcl hdr_ptr		pointer;
  dcl source_map_ptr	pointer;

  /* assume bsinfo is set - we need to alloc a new block, which is one of the components of the bound seg */


  call component_info_$offset (pointer (segment_ptr, 0), (segment_offset),
       addr (ci), code);
  if code ^= 0 then do;		/* screwed up, it appears */
      info = null ();
      return;
    end;

  if ^ci.standard then do;
      code = probe_et_$non_standard;	/* FATAL */
      info = null ();
      return;
    end;

  hdr_ptr = ci.symb_start;

  if hdr_ptr -> std_symbol_header.source_map = "000000"b3 then do;
				/* haven't got a source map at all */
NO_SOURCE_MAP:
      source_map_ptr = null ();
      seg_info_nfiles = 1;		/* should be 0, but dimension (0) is invalid PL/I */
    end;

    else do;			/* otherwise, get information about the source map */
      source_map_ptr =
	 addrel (hdr_ptr, hdr_ptr -> std_symbol_header.source_map);
      if source_map_ptr -> source_map.version < 1
	 | source_map_ptr -> source_map.version > 30
        then
	   go to NO_SOURCE_MAP;	/* source map is damaged */
      seg_info_nfiles = source_map_ptr -> source_map.number;
      if seg_info_nfiles < 1 | seg_info_nfiles > 256
        then go to NO_SOURCE_MAP;	/* count damaged */
    end;

  allocate seg_info in (scratch_area) set (ct_info);

  /* set up stuff that is different for a component seg_info than for an unbound one */

  ct_info -> seg_info.nfiles = seg_info_nfiles;
  ct_info -> seg_info.file_pointers (*) = null ();

  ct_info -> seg_info.bits = ""b;
  ct_info -> seg_info.bits.component = "1"b;
				/* indicates component entry for bound seg */

  ct_info -> seg_info.directory_name = bsinfo -> seg_info.directory_name;
  ct_info -> seg_info.entry_name = bsinfo -> seg_info.entry_name;
				/* copy entry name */
  ct_info -> seg_info.identifier = ci.compile_time;

  ct_info -> seg_info.symbol_header_ptr = hdr_ptr;
  ct_info -> seg_info.original_source_ptr = source_map_ptr;

  ct_info -> seg_info.text_bounds.start = fixed (rel (ci.text_start), 18);
  ct_info -> seg_info.text_bounds.end =
       fixed (rel (ci.text_start), 18) + ci.text_lng - 1;
  ct_info -> seg_info.symbol_bounds.start = fixed (rel (ci.symb_start), 18);
  ct_info -> seg_info.symbol_bounds.end =
       fixed (rel (ci.symb_start), 18) + ci.symb_lng - 1;

  ct_info -> seg_info.chain = bsinfo -> seg_info.chain;
				/* add to head of list */
  bsinfo -> seg_info.chain = ct_info;

  info = ct_info;			/* leave it set for our caller */

  return;				/* and return */
  end create_component_seg_info;	/* internal procedure */

  /**/

free_seg_info:
  proc ();

  dcl pi_ptr		pointer;
  dcl next_info		ptr;

  if info ^= null () then do;
      info =
	 pointer (probe_info.scratch_area_ptr,
	 seg_info_offset (segment_number));
      seg_info_offset (segment_number) = ""b;
				/* and clear it out immediately */

      if ^info -> seg_info.bound_segment
        then /* easy to free nonbound seg_info, just free it */
	   free info -> seg_info in (scratch_area);

        else do;			/* loop through all the bound seg infos, freeing them all */
	do info = info repeat next_info while (info ^= null ());
	  next_info = info -> seg_info.chain;
				/* save before destorying */
	  if baseno (info) = baseno (probe_info.scratch_area_ptr)
	    then /* hedge for bad chains */
	         free info -> seg_info in (scratch_area);
	end;
        end;			/* of bound seg case */

      info = null ();		/* and make sure nobody tries to use it again */
    end;

  pi_ptr = probe_info_ptr;		/* loop through the probe_info chain, invalidating any */
  do while (pi_ptr ^= null ());	/* source_infos associated with the */
    call flush_source_info /* segment number in question */
         (pi_ptr -> probe_info.ptr_to_initial_source);
    call flush_source_info
         (pi_ptr -> probe_info.ptr_to_current_source);
    pi_ptr = pi_ptr -> probe_info.previous;
  end;

  probe_static_info.good_stack = "0"b;	/* flush the saved stach trace as well, for good measure */
				/* this isn't strictly necessary, since we could just flush */
				/* individual entries, but this is easiest. */
  return;
  end free_seg_info;		/* internal procedure */

  /**/

flush_source_info:
  proc (P_source_info_ptr);

  /* *	This procedure checks a supplied source_info for any pointers containing the segment number
   *	being flushed, and if it finds any, re-initializes the source_info. */

  dcl P_source_info_ptr	pointer parameter;
  dcl 1 flush_source	aligned like source_info
			based (P_source_info_ptr);


  if P_source_info_ptr = null ()
    then
         return;			/* nothing to do */

  if binary (baseno (flush_source.instruction_ptr), 18)
       = segment_number /* if we are flushing the same segment  */
       | binary (baseno (flush_source.entry_ptr), 18)
       = segment_number /* number as is known in this source_info */
       | binary (baseno (flush_source.block_ptr), 18) = segment_number
    then do;			/* then we must then flush it. */

      flush_source.instruction_ptr = null ();
      flush_source.entry_ptr = null ();
      flush_source.block_ptr = null ();
      flush_source.stack_ptr = null ();
      flush_source.stmnt_map_entry_index = -1;
      flush_source.seg_info_ptr = probe_static_info.null_seg_info_ptr;
    end;
  return;
  end flush_source_info;		/* internal procedure */

  /**/


get_current_runtime_info:
  proc ();

  /* *	It is the responsibility of this procedure to get the current values for various pieces
   *	of runtime information which may change at times other than recompilations. */


  if info -> seg_info.linkage_ptr = null ()
    then
         info -> seg_info.linkage_ptr = get_linkage_ptr ();

  return;				/* for the moment, only the linkage pointer is in this class */
  end get_current_runtime_info;	/* internal procedure */

  /**/

get_linkage_ptr:
  proc () returns (pointer);

  /* *	This procedure returns the linkage pointer for the segment identified by
   *	segment_ptr; it filters out LOT faults and the like */


  lotp = stackbaseptr () -> stack_header.lot_ptr;

  if unspec (lotp -> lot.lp (segment_number)) = lot_fault then do;
      if probe_modes.debug
        then call probe_error_$warning
	        (probe_info_ptr, 0,
	        "LOT Fault linkage pointer for segno ^o.", segment_number);
      return (null ());
    end;
  return (lotp -> lot.lp (segment_number));

  end get_linkage_ptr;		/* internal procedure */

  /**/

ignore_casep:
  proc (P_hp) returns (bit (1) aligned);

  dcl P_hp		ptr parameter;

  dcl compiler_comment	char (
			binary (P_hp -> std_symbol_header.comment.size,
			21)) based (commentp);
  dcl commentp		ptr;


  commentp = addrel (P_hp, P_hp -> std_symbol_header.comment.offset);

  return (index (compiler_comment, "card") > 0 |
       index (compiler_comment, "fold") > 0);

  end ignore_casep;

seg_changedp:
  proc (infop, hdr) returns (bit (1) aligned);

  dcl infop		ptr parameter;
  dcl hdr			ptr parameter;


  if hdr = null ()			/* others have set this, to let us know */
    then return ("1"b);
  if infop -> seg_info.identifier ^= hdr -> std_symbol_header.object_created
    then return ("1"b);
  return ("0"b);

  end seg_changedp;


search_bound_info:
  proc () returns (ptr);

  dcl seginfop		ptr;	/* to seg_info blocks in chain of bsi */


  do seginfop = bsinfo -> seg_info.chain
       repeat (seginfop -> seg_info.chain) while (seginfop ^= null ());
    if inside (seginfop, segment_offset)
      then
	 return (seginfop);
  end;				/* loop */
  return (null);			/* not found */


inside:
  proc (sip, so) returns (bit (1) aligned);
  dcl sip			ptr;	/* to seg_info for a component */
  dcl so			fixed bin (35) parameter;
				/* offset in the seg */

  return (
       (so >= sip -> seg_info.text_bounds.start
       & so <= sip -> seg_info.text_bounds.end) |
       (so >= sip -> seg_info.symbol_bounds.start
       & so <= sip -> seg_info.symbol_bounds.end)
       );

  end inside;
  end search_bound_info;

%page;
%include probe_info;
%page;
%include probe_static_info;
%page;
%include probe_modes;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include probe_lang_types;
%page;
%include source_map;
%page;
%include std_symbol_header;
%page;
%include pl1_symbol_block;
%page;
%include statement_map;
%page;
%include runtime_symbol;
%page;
%include object_info;
%page;
%include component_info;
%page;
%include lot;
%page;
%include stack_header;

  end probe_seg_info_;		/* external procedure */
