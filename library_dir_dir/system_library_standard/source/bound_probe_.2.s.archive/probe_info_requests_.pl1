/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(1986-01-21,LJAdams), approve(1986-01-21,MCR7327),
     audit(1986-04-17,Lippard), install(1986-04-24,MR12.0-1048):
     Added ssu_ references so subsystem calls to help_ will work properly.
     Added include file "help_args" which is a structure that contains all
     needed help data includeing the new version number Vhelp_args_2.
  2) change(1987-08-20,LJAdams), approve(1987-09-03,MCR7766),
     audit(1988-08-07,GDixon), install(1988-09-13,MR12.2-1109):
     Changed Vhelp_args_2 to Vhelp_args_3.
  3) change(1988-09-07,WAAnderson), approve(1988-09-30,MCR7952),
     audit(1988-09-30,JRGray), install(1988-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  4) change(2020-12-21,GDixon), approve(2021-02-22,MCR10084),
     audit(2021-05-27,Swenson), install(2021-05-27,MR12.6g-0055):
      A) Change probe help request to support -brief, -control_arg and
         TOPIC = CROSS-SECTION  or  TOPIC = cross-section
                                                   END HISTORY COMMENTS */


probe_info_requests_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /* *	This procedure implements a handful of random requests, most of which were
   *	stolen more or less bodily from probe_requests_.
   *
   *	07/15/79 W. Olin Sibert
   *	Recoded to use the awful, but powerful help_, instead of help JRD Oct 1 79 */
  /* Changed to use info search paths unless nonstandard dirs listed in probe_static_info 09/28/81 S. Herbst */
  /* Modified April, 1985 by L. Adams - use new help_args_.incl.pl1                    */

  dcl P_probe_info_ptr	pointer parameter;

  dcl i			fixed bin;
  dcl desired_topic		char (32) aligned;
  dcl code		fixed bin (35);
  dcl (brief_sw, control_arg_sw)
			bit(1) aligned;
  dcl ctl			char (64) varying;
  dcl 1 minus_token		aligned like current_token based (current_token.prev -> current_token.prev);
  dcl old_ct		ptr;


  dcl ioa_$ioa_switch	entry options (variable);
  dcl probe_error_		entry options (variable);
  dcl probe_error_$warning	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);

  dcl probe_get_$control_arg	entry (ptr, char (64) varying, fixed bin (35));


  dcl probe_request_mgr_$list_requests
			entry (ptr);
  dcl probe_request_mgr_$list_builtins
			entry (ptr);

  dcl probe_et_$bad_ctl_arg   fixed bin (35) external static;
  dcl probe_et_$noarg	fixed bin (35) external static;
  dcl probe_et_$too_many_args fixed bin (35) external static;


  dcl null		builtin;

  dcl cleanup		condition;

%page;

print_request_summary:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;
  call reject_argument ();

  call ioa_$ioa_switch (probe_info.output_switch,
       "^/Summary of probe requests:^/");

  call probe_request_mgr_$list_requests (probe_info_ptr);

  call ioa_$ioa_switch (probe_info.output_switch,
       "^/Type ""help"" for more information.");

  return;				/* end of code for $print_request_summary */


print_builtin_summary:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;
  call reject_argument ();

  call ioa_$ioa_switch (probe_info.output_switch,
       "^/Summary of probe builtins:^/");
  call probe_request_mgr_$list_builtins (probe_info_ptr);
  return;



help_request:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;

  brief_sw, control_arg_sw = "0"b;

/* ********** DEBUGGING CODE:  lists tokens input to the help request  *******************
  old_ct = probe_info.ct;
  do probe_info.ct = probe_info.ct
       repeat current_token.next while (probe_info.ct ^= null);
       if current_token.type = NAME_TYPE then
	  call ioa_$ioa_switch (probe_info.output_switch,
                "TOKEN:^-type= NAME       ID: ^a ^55t next = ^p   ^[END^]", 
	      current_identifier_name, current_token.next, current_token.type = probe_info.end_token);
       else if current_token.type = TIMES then
	  call ioa_$ioa_switch (probe_info.output_switch,
	      "TOKEN:^-type= TIMES             ^55t next = ^p   ^[END^]", 
	      current_token.next, current_token.type = probe_info.end_token);
       else if current_token.type = MINUS then
	  call ioa_$ioa_switch (probe_info.output_switch,
	      "TOKEN:^-type= MINUS      ^[lead ^]^[trail ^]  ^55t next = ^p   ^[END^]", 
	      current_token.leading_whitespace, current_token.trailing_whitespace, 
	      current_token.next, current_token.type = probe_info.end_token);
       else if current_token.type = NEW_LINE then
	  call ioa_$ioa_switch (probe_info.output_switch,
	      "TOKEN:^-type= NEW_LINE          ^55t next = ^p   ^[END^]", 
	      current_token.next, current_token.type = probe_info.end_token);
       else call ioa_$ioa_switch (probe_info.output_switch,
	      "TOKEN:^-type= ^6.3b             ^55t next = ^p   ^[END^]",
	      current_token.type, current_token.next, current_token.type = probe_info.end_token);
       end;
  probe_info.ct = old_ct;
/* ********** END OF DEBUGGING CODE ******************************************************* */

  if probe_info.ct -> token.type >= probe_info.end_token	/* help (with no args) => displays summary info block     */
    then
         desired_topic = "summary";
  else if probe_info.ct -> token.type = TIMES then do;	/* help *  	   => displays toc info block	        */
      desired_topic = "toc";
      call bump_ct ();
    end;
  else if probe_info.ct -> token.type = NAME_TYPE then do;	/* help TOPIC  	   => displays TOPIC info block       */
      desired_topic = current_identifier_name;
      call bump_ct ();

      call probe_get_$control_arg (probe_info_ptr, ctl, code);
						/* This call always returns code = 0		        */
      if ctl ^= "" then do;
	if (desired_topic = "CROSS" | desired_topic = "cross" ) &
             (ctl = "SECTION" | ctl = "section" ) &
	   (^minus_token.leading_whitespace & ^minus_token.trailing_whitespace)
				         		/* help CROSS-SECTION			        */
            then desired_topic = rtrim(desired_topic) || "-" || ctl;
          else if ctl = "brief" | ctl = "bf"		/* help TOPIC -brief			        */
            then brief_sw = "1"b;
          else if ctl = "control_arg" | ctl = "ca" then do;	/* help TOPIC -control_arg STRING		        */
	    control_arg_sw = "1"b;
	    if probe_info.ct -> token.type >= probe_info.end_token
	      then call probe_error_ (probe_info_ptr, probe_et_$noarg, "Operand for -" || ctl);

              ctl = current_identifier_name;
	    call bump_ct ();
	  end;
          else call probe_error_ (probe_info_ptr, probe_et_$bad_ctl_arg, "-" || ctl);
        end;
    end;
  else call probe_error_ (probe_info_ptr, 0, "Usage: help { * | TOPIC {-bf} {-ca STRING} }");

  call reject_argument ();

  goto help_common;


list_help_request:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;

  call reject_argument;
  desired_topic = "toc";
  brief_sw, control_arg_sw = "0"b;

  goto help_common;
%page;
help_common:
  Phelp_args = null;

  on cleanup
    call help_$term ("probe", Phelp_args, (0));

  call help_$init ("probe", "info", "", Vhelp_args_3, Phelp_args, code);

  if code ^= 0
    then call probe_error_ (probe_info_ptr, code);

  if probe_static_info.info_directory_info.array_size > 1
       | probe_info_directories (1) ^= ">doc>info" then do;
				/* use info search paths unless dirs specified */
      help_args.Nsearch_dirs =
	 probe_static_info.info_directory_info.array_size;
      do i = 1 to probe_static_info.info_directory_info.array_size;
        help_args.search_dirs (i) = probe_info_directories (i);
      end;
    end;

  help_args.Npaths = 1;
  if control_arg_sw 
    then help_args.Ncas = 1;
    else help_args.Ncas = 0;		/* yields illegal PL/1 */
  help_args.Nscns = 0;		/* 0-extent arrays */
  help_args.Nsrhs = 0;

  if desired_topic = "bugs" 
    then desired_topic = "errors";
  if desired_topic = "changes" | desired_topic = "errors"
    then help_args.path (1).value = "probe." || desired_topic;
    else do;
      help_args.path (1).value = "probe";
      help_args.path (1).S.info_name_not_starname = "1"b;
      help_args.path (1).info_name = desired_topic;
    end;

  help_args.Sctl.bf = brief_sw;
  help_args.Sctl.ca = control_arg_sw;
  if control_arg_sw 
    then help_args.ca (1) = ctl;

  call help_ ("probe", Phelp_args, "info", (0), code);
  if code ^= 0
    then
         call probe_error_$warning (probe_info_ptr, 0,
	    "There is no info available for ""^a"".", desired_topic);

  call help_$term ("probe", Phelp_args, (0));

  return;				/* of code for help request */


bump_ct:
  proc;
  probe_info.ct = probe_info.ct -> token.next;
  end bump_ct;

reject_argument:
  proc;
  if probe_info.ct ^= null() 
    then if probe_info.ct -> token.type < probe_info.end_token
      then call probe_error_ (probe_info_ptr, probe_et_$too_many_args);
  end reject_argument;
%page;

  /*	INCLUDE FILES	*/
%include probe_info;
%include probe_static_info;
%include probe_tokens;
%include probe_operators;

%include help_args_;
  end probe_info_requests_;
