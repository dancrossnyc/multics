/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_language_request_:
  proc (P_probe_info_ptr);

  dcl P_probe_info_ptr	ptr parameter;
  dcl null		builtin;

  dcl probe_lang_type_	entry (char (*)) returns (fixed bin);

  dcl probe_error_		entry options (variable);
  dcl ioa_$ioa_switch	entry options (variable);

  dcl probe_et_$too_many_args fixed bin (35) external static;

  probe_info_ptr = P_probe_info_ptr;

  if probe_info.ct -> token.type >= probe_info.end_token
    then call ioa_$ioa_switch (probe_info.output_switch,
	    "Current language is ^a",
	    official_language_names (probe_info.language_type));
    else do;
      if probe_info.ct -> token.type ^= NAME_TYPE
        then call probe_error_ (probe_info_ptr, 0,
	        "A language name is required");
      if probe_info.ct -> token.next = null () |
	 probe_info.ct -> token.next -> token.type < probe_info.end_token
        then call probe_error_ (probe_info_ptr, probe_et_$too_many_args);

      probe_info.language_type = probe_lang_type_ (current_identifier_name);
      probe_info.ct = probe_info.ct -> token.next;
    end;				/* setting the lang */

  return;



%include probe_info;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include probe_lang_types;

  end probe_language_request_;
