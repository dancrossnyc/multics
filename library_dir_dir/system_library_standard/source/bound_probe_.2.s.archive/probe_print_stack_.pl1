/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_print_stack_:
  proc ();

  call probe_error_$malfunction ();	/* can't call here */

  /* *	This procedure implements the stack printing feature of probe, as well
   *	as the request used to print the stack.

   Modified 3 Sept 79 JRD -  to make stack req. respect the "execute" bit. */
  /* Format shortened, "long" added 09/30/81 S. Herbst */
  /* Changed to print support frames with decimal increments 12/10/81 S. Herbst */
  /* Trailing space removed 07/26/82 S. Herbst */
  /* Fixed "stack long all" not to print garbage pathname for return_to_ring_0_ 05/27/83 S. Herbst */
  /* Changed to call probe_block_name_ with "0"b (brief form) 08/26/83 S. Herbst */

  dcl (
      P_probe_info_ptr	pointer,
      P_first_level		fixed bin,/* (input) start history at this level */
      P_number_levels	fixed bin,/* number of levels to trace */
      P_all_flag		bit (1) aligned,
				/* indicates to include system routines */
      P_long_flag		bit (1) aligned,
				/* indicates long format (paths, offsets) */
      P_code		fixed bin (35)
      )			parameter;

  dcl frame_reached		bit (1);	/* have we reached the current frame */
  dcl (i, j)		fixed bin;
  dcl block_name		char (256) varying;
  dcl continue_tracing	bit (1) aligned;
  dcl code		fixed bin (35);

  dcl 1 cond_info		aligned like condition_info automatic;

  dcl probe_et_$syntax_error	fixed bin (35) external static;

  dcl find_condition_info_	entry (pointer, pointer, fixed bin (35));
  dcl get_shortest_path_	entry (char (*)) returns (char (168));
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl ioa_$ioa_switch	entry options (variable);
  dcl ioa_$rsnnl		entry options (variable);

  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_error_		entry options (variable);
  dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
			returns (char (256) varying);
  dcl probe_get_$integer	entry (ptr, fixed bin, fixed bin (35));
  dcl probe_trace_a_stack_	entry (ptr, ptr, bit (1) aligned);

  dcl (addr, bin, fixed, max, min, null, rel)
			builtin;
				/*  */

probe_print_stack_$print_stack_history:
  entry (P_probe_info_ptr, P_first_level, P_number_levels, P_all_flag,
       P_long_flag, P_code);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;

  call probe_trace_a_stack_ (probe_info_ptr,
       probe_info.current_stack_frame -> stack_frame.prev_sp,
       P_all_flag);			/* get something to work with */

  j = max (stack_info.max_level - P_first_level + 1, 1);
				/* user sees numbers top down not bottom up */

  lfp = stack_info.level_chain;	/* start out with top frame */
  do while (level_frame.number ^= j);	/* search for starting level */
    lfp = level_frame.next;		/* consider the next frame */
  end;

  continue_tracing = "1"b;		/* curse pl1, which lacks do ... until */
  i = min (stack_info.max_level, j + P_number_levels - 1);
  do while (continue_tracing);

    /* if a condition exists, find out its name */

    if level_frame.condition_frame_ptr = null
      then
	 cond_info.condition_name = "";
      else call find_condition_info_ ((level_frame.condition_frame_ptr),
	      addr (cond_info), code);

    block_name =
         probe_block_name_ (probe_info_ptr, addr (level_frame.source_info),
         "0"b);


    call ioa_$ioa_switch (probe_info.output_switch,
         "^3d^[.^d^;^s^]^14t^a^a^[ (^a)^;^s^]^[^60t^]^a^[ (run unit wall)^]",
         level_frame.printed_number,
         level_frame.printed_decimal ^= 0,
         level_frame.printed_decimal,
         block_name,
         pretty_line (),
         (level_frame.source_info.seg_info_ptr -> seg_info.language_type
         ^= probe_info.language_type),
         palatable_language_names (level_frame.source_info.seg_info_ptr
         -> seg_info.language_type),
         cond_info.condition_name ^= "",
         cond_info.condition_name,
         level_frame.flags.run_unit_manager);

    if level_frame.number >= i
      then continue_tracing = "0"b;	/* stop as soon as the final interesting frame */
      else lfp = level_frame.next;	/* gets reached; otherwise go on to next frame */
  end;
  return;				/* end of code for $print_stack_history entry point */

  /*  */

pretty_line:
  proc () returns (char (300));

  /* *	This procedure returns a pleasantly formatted string describing the
   *	current frame. It is used by print_stack_history.
   *	GLOBAL imports: level_frame */

  dcl map_index		fixed bin;
  dcl 1 map_array		(no_stmnts) based (map_ptr) like statement_map;
  dcl no_stmnts		fixed bin;
  dcl map_ptr		ptr;
  dcl file		fixed bin (8) unsigned;
  dcl line		fixed bin (14) unsigned;
  dcl stmt		fixed bin (5) unsigned;
  dcl dn			char (168);
  dcl en			char (32);
  dcl (retu, long_retu)	char (300);

  no_stmnts = level_frame.source_info.seg_info_ptr -> seg_info.map_size;
  map_ptr =
       level_frame.source_info.seg_info_ptr -> seg_info.statement_map_ptr;
  map_index = level_frame.source_info.stmnt_map_entry_index;

  if map_ptr ^= null () & map_index > 1 & map_index <= no_stmnts
    then do;
      file = fixed (map_array (map_index).file, 8);
      line = fixed (map_array (map_index).line, 14);
      stmt = fixed (map_array (map_index).statement, 5);

      call ioa_$rsnnl ("^x(line^x^[^d-^;^s^]^d^[,^d^;^s^])", retu, (0),
	 (file > 0), file, line, (stmt > 1), stmt);
    end;

  else if ^P_long_flag
    then retu = "";

  else if level_frame.component_text_ptr = null
    then
         call ioa_$rsnnl ("|^o", retu, (0),
	    bin (rel (level_frame.source_info.instruction_ptr), 18));

  else call ioa_$rsnnl ("|^o", retu, (0),
	  bin (rel (level_frame.instruction_ptr), 18)
	  - bin (rel (level_frame.component_text_ptr), 18));

  if P_long_flag then do;
      call hcs_$fs_get_path_name (level_frame.source_info.instruction_ptr, dn,
	 (0), en, code);
      if code ^= 0
        then
	   return (retu);		/* no pathname - might be special hardcore module */

      dn = get_shortest_path_ (dn);

      call ioa_$rsnnl ("^a^x(^a^[>^]^a|^o)", long_retu, (0),
	 retu, dn, dn ^= ">", en,
	 bin (rel (level_frame.source_info.instruction_ptr), 18));
      return (long_retu);
    end;

    else
         return (retu);
  end pretty_line;

  /*  */

  /* *	The rest of this program implements the various requests used to display the stack */

probe_print_stack_$stack_request:
  entry (P_probe_info_ptr);

  /* *	This procedure implements the "stack" request in probe -- it process arguments
   *	and calls probe_print_stack_$print_stack_history. It parses the following syntaxes:
   *
   *	   stack [N[,M] [all]
   *
   *	If both N and M are specified then N is number of first frame and M is number to print
   *	else N is number to print and first frame printed is top one
   *	else all frames are printed.
   *
   *	JRD 2 july 79 */

  probe_info_ptr = P_probe_info_ptr;

  begin;				/* avoid name conflicts */

    dcl start		  fixed bin;
				/* first frame to trace */
    dcl num_frames;			/* number of frames to print */
    dcl (all, long)		  bit (1) aligned;
				/* print system support too? */
    dcl N			  fixed bin;
    dcl M			  fixed bin;
    dcl 1 have,
        (
         2 N,
         2 M,
         2 all,
         2 long,
         2 fault
         )		  bit (1) aligned;

    all, long = "0"b;
    have = "0"b;

    do while (probe_info.ct -> token.type < probe_info.end_token);
				/* look through token chain */
      if probe_info.ct -> token.type = CONSTANT_TYPE then do;
	if have.N
	  then goto SYNTAX_ERROR;
	have.N = "1"b;
	call probe_get_$integer (probe_info_ptr, N, code);

	if code ^= 0
	  then goto SOME_ERROR;
        end;			/* CONSTANT */

      else if probe_info.ct -> token.type = NAME_TYPE then do;
	if current_identifier_name = "all" then do;
	    if have.all
	      then goto SYNTAX_ERROR;
	      else do;
	        have.all = "1"b;
	        all = "1"b;
	        call bump_ct ();
	      end;
	  end;			/* all spec */

	else if current_identifier_name = "long"
	     | current_identifier_name = "lg" then do;
	    if have.long
	      then go to SYNTAX_ERROR;
	      else do;
	        have.long = "1"b;
	        long = "1"b;
	        call bump_ct ();
	      end;
	  end;

	else if current_identifier_name = "fault" then do;
	    goto SYNTAX_ERROR;	/* not presently implemented */
	  end;

	else call probe_error_ (probe_info_ptr, 0,
		"Unrecognized option ""^a"".", current_identifier_name);
        end;			/* of option processing */

      else if probe_info.ct -> token.type = COMMA then do;
	if have.M
	  then goto SYNTAX_ERROR;
	  else do;
	    have.M = "1"b;
	    call bump_ct ();
	    if probe_info.ct -> token.type ^= CONSTANT_TYPE
	      then
		 goto SYNTAX_ERROR;

	    call probe_get_$integer (probe_info_ptr, M, code);
	    if code ^= 0
	      then goto SOME_ERROR;
	  end;			/* getting M */
        end;

      else goto SYNTAX_ERROR;		/* other operator */
    end;				/* token loop */

    num_frames, start = 77313;	/* default, should be fewer frames then this */

    if have.M then do;
        start = N;
        num_frames = M;
      end;

    else if have.N
      then num_frames = N;

    if probe_info.execute
      then
	 call probe_print_stack_$print_stack_history (probe_info_ptr, start,
	      num_frames, all, long, (0));

  end;				/* begin block */

  return;				/* end of code for stack request */


SYNTAX_ERROR:			/* general exit for request syntax error */
  code = probe_et_$syntax_error;
  goto SOME_ERROR;


SOME_ERROR:
  call probe_error_ (probe_info_ptr, code);
				/* never returns */

  /*  */

  /* *	Assorted request support routines, extracted from probe_requests_ */

bump_ct:
  proc ();

  probe_info.ct = probe_info.ct -> token.next;
  if probe_info.ct = null ()
    then goto SYNTAX_ERROR;

  return;
  end;				/* internal procedure bump_ct */

  /*  */

  /*	INCLUDE FILES	*/

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_level_frame;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include probe_operators;

  /* ;;;;;;; */

%include stack_frame;

  /*  */

%include condition_info;

  /* ;;;;;;; */

%include probe_lang_types;

  /* ;;;;;;; */

%include statement_map;

  end;				/* probe_stack_trace_ external procedure */
