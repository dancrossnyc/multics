/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_line_number_:
  proc (P_probe_info_ptr, P_statement_entry) returns (char (64));

  /* *	This routine is used to format a line number (including file and statement numbers) for output.
   *	It takes as an argument a pointer to the statement map entry for the line desired.
   *
   *	Initial Version:  12 August 1974 by Jeffrey M. Broughton
   *	Converted to probe 4.0 05/27/79 W. Olin Sibert
   */

  dcl P_probe_info_ptr	pointer parameter;

  dcl (addr, fixed, null, substr)
			builtin;

  dcl 1 P_statement_entry	aligned like source_info;
				/* statement to be printed */

  dcl probe_info_ptr	pointer;	/* to avoid including the whole mess */

  dcl statement_map_ptr	pointer;	/* pointer to entry for this line */
  dcl name_wanted		bit (1);	/* tells whether name is  wanted */
  dcl j			fixed bin;/* tells which format to use */
  dcl i			fixed bin;
  dcl (f, l, s)		fixed bin;/* file, line, and statement numbers */

  dcl proc_name		character (32);
				/* procedure segname, we hope */
  dcl string		char (64);/* return string */

  dcl 1 map_array		(1) based aligned like statement_map;

  dcl ioa_$rsnnl		entry options (variable);

  dcl format		(0:3) char (32) varying internal static
			options (constant)
			init /* formats to use when building number */
			("line ^d",
			"line ^d,^d",
			"line ^d-^d",
			"line ^d-^d,^d");
				/*  */
  name_wanted = "0"b;
  goto COMMON;


probe_line_number_$proc:
  entry (P_probe_info_ptr, P_statement_entry) returns (character (64));
  name_wanted = "1"b;
  go to COMMON;


COMMON:
  probe_info_ptr = P_probe_info_ptr;

  if P_statement_entry.seg_info_ptr = null ()
    then
         return ("unknown line");

  statement_map_ptr =
       P_statement_entry.seg_info_ptr -> seg_info.statement_map_ptr;
  if statement_map_ptr = null ()
    then
         return ("unknown line");

  statement_map_ptr =
       addr (statement_map_ptr
       -> map_array (P_statement_entry.stmnt_map_entry_index));

  f = fixed (statement_map_ptr -> statement_map.file, 17, 0);
				/* unpack these numbers */
  l = fixed (statement_map_ptr -> statement_map.line, 17, 0);
  s = fixed (statement_map_ptr -> statement_map.statement, 17, 0);

  if s < 2
    then j = 0;			/* don't include statment number */
    else j = 1;

  if f = 0
    then /* don't include file number */
         call ioa_$rsnnl (format (j), string, i, l, s);
    else call ioa_$rsnnl (format (j + 2), string, i, f, l, s);

  if name_wanted then do;
      proc_name = P_statement_entry.seg_info_ptr -> seg_info.segname;
      if proc_name = "" then do;
	proc_name = P_statement_entry.seg_info_ptr -> seg_info.entry_name;
	if proc_name = ""
	  then proc_name = "unknown?";
        end;
      substr (string, i + 1) = " of " || proc_name;
    end;
  return (string);

  /*  */

%include statement_map;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  end;				/* external procedure probe_line_number_ */
