/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-05-27,JRGray), approve(87-06-24,MCR7711), audit(87-06-24,Huen),
     install(87-07-15,MR12.1-1040):
     Modifed to allow breakpoints in more than one component of a bound module
     at a time (probe 111).
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_seg_mgr_:
  proc;


  call probe_error_$malfunction ();

  /* Interface to the probe seg (also known as the break seg).  All permanent information is kept here
   This consists of an entry for every procedure that probe has set a break in.

   It may one day also hold modes, macros, and variables

   ENTRIES HERE -

   get_breakseg_ptr		- initialize breakseg, create if need be
   first_procedure_ptr	- to find first procedure entry in chain
   get_procedure_entry	- given ptr to seg_info, find the procedure entry for it
   create_procedure_entry	- given ptr to seg info, find or create a procedure entry
   delete_procedure_entry	- given ptr to procedure_entry delete it


   Jim Davis Aug -  Sept 79 */
  /* Improved error message if can't get ptr to seg 08/31/81 S. Herbst */
  /* Changed $get_breakseg_ptr not to create, and added $create_breakseg 10/02/81 S. Herbst */
  /* Fixed bug that allows $first_procedure_ptr to take a null ptr fault 01/15/85 Steve Herbst */
  /* Fixed $first_procedure_ptr to test for null static_info_ptr too 01/23/85 Steve Herbst */


  dcl (
      P_probe_info_ptr	ptr,
      P_ent		ptr,
      P_bmp		ptr,
      P_seginfop		ptr,
      P_code		fixed bin (35)
      )			parameter;

  dcl (
      CREATE		init ("1"b),
      DONT_CREATE		init ("0"b)
      )			bit (1) aligned;

  dcl seginfop		ptr;	/* copy of P_seginfop */

  dcl (add, addrel, binary, bit, divide, fixed, mod, multiply, null, pointer,
      rel, rtrim, size, subtract)
			builtin;

  dcl error_table_$action_not_performed
			fixed bin (35) ext;

  dcl probe_error_$malfunction
			entry options (variable);

  dcl com_err_		entry options (variable);
  dcl hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));

get_breakseg_ptr:
  entry (P_code) returns (ptr);


  P_code = 0;
  call initialize_breakseg (DONT_CREATE);
				/* sets break_segp and P_code */
  return (break_segp);



create_breakseg:
  entry (P_code) returns (ptr);


  P_code = 0;
  call initialize_breakseg (CREATE);
  return (break_segp);



first_procedure_ptr:
  entry (P_probe_info_ptr, P_code) returns (ptr);


  P_code = 0;
  if P_probe_info_ptr = null
    then
         return (null);

  probe_info_ptr = P_probe_info_ptr;

  if probe_info.static_info_ptr = null
    then
         return (null);

  break_segp = probe_static_info.break_segment_ptr;
  if break_segp = null
    then
         return (null);
  if break_segment.first_procedure_entry = (18)"0"b
    then return (null ());
    else return (pointer (break_segp, break_segment.first_procedure_entry));



get_procedure_entry:
  entry (P_probe_info_ptr, P_seginfop, P_ent, P_bmp, P_code);


  probe_info_ptr = P_probe_info_ptr;
  seginfop = P_seginfop;
  P_code = 0;

  break_segp = probe_static_info.break_segment_ptr;

  call search_for_proc_entry ();
  P_ent = ent;
  P_bmp = bmp;
  return;



delete_procedure_entry:
  entry (P_probe_info_ptr, P_ent, P_code);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;

  break_segp = probe_static_info.break_segment_ptr;
  call delete_proc ((P_ent));
  return;



create_procedure_entry:
  entry (P_probe_info_ptr, P_seginfop, P_ent, P_bmp, P_code);


  probe_info_ptr = P_probe_info_ptr;
  seginfop = P_seginfop;
  P_code = 0;

  break_segp = probe_static_info.break_segment_ptr;

  call search_for_proc_entry ();
  P_ent = ent;
  P_bmp = bmp;
  if ent ^= null ()
    then
         return;			/* already had one */
  call create_proc ();
  P_ent = ent;			/* the entry just created */
  P_bmp = null ();			/* obviously, 'cause we just made it */
  return;


initialize_breakseg:
  proc (P_create_sw);

  dcl P_create_sw		bit (1) aligned;

  dcl dirname		character (168);
				/* directory portion of pathname of break seg */
  dcl entryname		character (32);
				/* entry portion of name */
  dcl code		fixed bin (35);

  dcl user_info_		entry options (variable);
  dcl user_info_$homedir	entry (char (*));
  dcl hcs_$initiate		entry (char (*), char (*), char (*),
			fixed bin (1), fixed bin (2), ptr,
			fixed bin (35));
  dcl hcs_$make_seg		entry (char (*), char (*), char (*),
			fixed bin (5), ptr, fixed bin (35));

  dcl probe_data_$break_segment_suffix
			char (32) external static;


  call user_info_ (entryname);	/* get user's id and project */
  call user_info_$homedir (dirname);	/* get directory in which to place seg */

  entryname =
       rtrim (entryname) || "." || rtrim (probe_data_$break_segment_suffix);

  if P_create_sw then do;
      call hcs_$make_seg (dirname, entryname, "", 01010b, break_segp, code);
      if break_segp = null () then do;	/* something went wrong */
	call com_err_ (code, "probe", "^a^[>^]^a", dirname, dirname ^= ">",
	     entryname);
	P_code = error_table_$action_not_performed;
	return;
        end;
    end;
    else do;
      call hcs_$initiate (dirname, entryname, "", 0, 0, break_segp, code);
      code = 0;
      if break_segp = null
        then
	   return;
    end;

  if break_segment.version = 1 then do; /* old style break segment, convert to new style */
      break_segment.upper_bound = /* builtins are so powerful..... */
	 bit (
	 subtract (
	 multiply (divide (add (binary (break_segment.word_count, 18, 0),
	 1023, 18, 0), 1024, 18, 0), 1024, 18, 0), 4, 18, 0));
      call hcs_$set_bc_seg (break_segp,
	 multiply (binary (break_segment.upper_bound, 18, 0) + 4, 36, 24, 0)
	 , (0));
    end;

  else if break_segment.version ^= 2 then do;
				/* this segment has not been initialized */
      break_segment.version = 2;
      break_segment.name = "breakseg";
      break_segment.word_count =
	 bit (
	 binary (size (break_segment) + mod (size (break_segment), 2), 18,
	 0));
      break_segment.upper_bound = bit (binary (1020, 18, 0));
				/* know that header not more than a page */
      call hcs_$set_bc_seg (break_segp,
	 multiply (binary (break_segment.upper_bound, 18, 0), 36, 24, 0),
	 (0));
    end;
  return;

  end initialize_breakseg;

search_for_proc_entry:
  proc ();

  /* GLOBAL! seginfop ent bmp */


  dcl goal_id		fixed bin (71) aligned;
  dcl next		ptr;

  goal_id = seginfop -> seg_info.bound_create_time;

  do ent = pointer (break_segp, break_segment.first_procedure_entry)
       repeat next while (rel (ent) ^= "0"b);

    next = pointer (break_segp, procedure_entry.chain);

    if procedure_entry.time_stamp = goal_id
      then
	 /* confirm by checking against entry and seg names,
		     necessary as bound object components share bound_create_times */
	 if procedure_entry.entry = seginfop -> seg_info.entry_name &
	      procedure_entry.segname = seginfop -> seg_info.segname
	   then do;
	     bmp = pointer (seginfop -> seg_info.symbol_header_ptr,
				/* any ptr would be as good */
		procedure_entry.break_map);
	     if procedure_entry.time_stamp = break_map.identifier
	       then
		  return;
	       else call delete_proc (ent);
				/* its obsolete */
	   end;
  end;				/* loop */

  ent, bmp = null ();		/* failed */
  end search_for_proc_entry;



create_proc:
  proc;

  /* GLOBAL import seginfop ent

   make a new procedure entry for the segment seginfop describes, put it in the
   breakseg and initialize it
*/
  ent = allocate_in_breakseg (size (procedure_entry));
				/* make room for it */
  procedure_entry.item_type = PROCEDURE_ITEM;
				/* record that this is a segment entry */
  procedure_entry.directory = seginfop -> seg_info.directory_name;
				/* fill in data */

  procedure_entry.entry = seginfop -> seg_info.entry_name;
  procedure_entry.segname = seginfop -> seg_info.segname;
  procedure_entry.pad = 0;
  procedure_entry.time_stamp = seginfop -> seg_info.bound_create_time;

  procedure_entry.first_statement = (18)"0"b;
  procedure_entry.first_symbol = (18)"0"b;
  procedure_entry.first_macro = (18)"0"b;
  procedure_entry.statement_map =
       rel (seginfop -> seg_info.statement_map_ptr);
  procedure_entry.statement_map_size =
       bit (fixed (seginfop -> seg_info.map_size, 18, 0));
  procedure_entry.source_map = rel (seginfop -> seg_info.original_source_ptr);
  procedure_entry.symbol_header =
       rel (seginfop -> seg_info.symbol_header_ptr);
  procedure_entry.bounds = seginfop -> seg_info.bounds;
  procedure_entry.language_type = seginfop -> seg_info.language_type;
  procedure_entry.break_map = "0"b;	/* none yet */
  procedure_entry.chain = break_segment.first_procedure_entry;
  break_segment.first_procedure_entry = rel (ent);
  end create_proc;




delete_proc:
  proc (ent);

  dcl ent			pointer parameter;
  dcl lent		pointer;

  /* unchain item, by searching chain for the previous item */


  if break_segment.first_procedure_entry = rel (ent)
    then break_segment.first_procedure_entry = ent -> procedure_entry.chain;
    else do;
      do lent = pointer (break_segp, break_segment.first_procedure_entry)
	 repeat pointer (lent, lent -> procedure_entry.chain)
	 while (rel (ent) ^= lent -> procedure_entry.chain);
        if lent -> procedure_entry.chain = (18)"0"b
	then call probe_error_$malfunction (probe_info_ptr);
      end;
      lent -> procedure_entry.chain = ent -> procedure_entry.chain;
    end;
  call release_in_breakseg (ent);	/* free it, it is no longer needed */

  return;

  end delete_proc;

  /* This routine is used to allocate space for an item in either the break segment.   It attempts
   to find the first free item containing enough space to hold the item, failing that it is placed at
   the end of the segment */

allocate_in_breakseg:
  procedure (required) returns (pointer);

  dcl required		fixed bin parameter;
				/* number of words needed */

  dcl needed		fixed bin;/* 0 mod 2 size */
  dcl fip			pointer;
  dcl lfip		pointer;

  needed = required + mod (required, 2);/* 0 mod 2 size */
  lfip = null ();
  do fip = pointer (break_segp, break_segment.first_free_item)
       repeat pointer (fip, fip -> free_item.chain)
       while (rel (fip) ^= (18)"0"b);

    /* search for a free item that can contain the allocation */

    if fip -> free_item.size >= needed then do;
				/* this one will work */
        if fip -> free_item.size = needed then do;
				/* occupies entire area */
	  if lfip ^= null ()
	    then
	         lfip -> free_item.chain = fip -> free_item.chain;
				/* skip this one */
	    else break_segment.first_free_item = fip -> free_item.chain;
	end;
	else do;			/* only uses part, let rest remain free */
	  fip -> free_item.size = fip -> free_item.size - needed;
	  fip = addrel (fip, fip -> free_item.size);
				/* use top part */
	end;
        fip -> item.size = needed;	/* fill in for freeing */
        return (fip);
      end;

    lfip = fip;
  end;				/* of loop through chain */

  /* if we get here, weither there were no free areas, or there were none large enough, in
   either case, allocate the space at the end of the segment */

  fip = pointer (break_segp, break_segment.word_count);
  fip -> item.size = needed;
  break_segment.word_count =
       bit (add (binary (break_segment.word_count, 18, 0), needed, 18, 0));

  /* must check if this allocation has overflowed the area, if so we will extend it */

  if break_segment.word_count > break_segment.upper_bound then do;
      break_segment.upper_bound =
	 bit (
	 subtract (
	 multiply (divide (add (binary (break_segment.word_count, 18, 0),
	 1023, 18, 0), 1024, 18, 0), 1024, 18, 0), 4, 18, 0));

      call hcs_$set_bc_seg (break_segp,
	 multiply (binary (break_segment.upper_bound, 18, 0) + 4, 36, 24, 0)
	 , (0));
				/* an error here will only cause move problems */
    end;
  return (fip);
  end;				/* internal procedure allocate_in_breakseg */





  /* This routine is used to handle the freeing of items in the break segment.
   When an item is frees it is chained together with other free items.
   if two or three then turn out to be continguous, they are combined.
*/

release_in_breakseg:
  procedure (item_pointer);

  dcl item_pointer		pointer,	/* pointer to the item itself */
      ip			pointer,	/* working copies of the above */
      i			fixed bin (35),
				/* offset of item */
      (p, lp)		pointer;
  dcl copy_overlay		(copy_count) bit (36) based aligned;
  dcl copy_count		fixed bin;


  ip = item_pointer;		/* copy pointers */
  i = binary (rel (ip), 18, 0);

  /* first check if item is at the end of the segment */

  if i + ip -> item.size
       = binary (break_segment.word_count, 18, 0) /* it is at the end */
    then do;
      break_segment.word_count = rel (ip);
      copy_count = ip -> item.size;
      ip -> copy_overlay = "0"b;	/* zero out words at the end of a segment */

      lp = null ();
      do p = pointer (break_segp, break_segment.first_free_item)
	 repeat pointer (p, p -> free_item.chain)
	 while (rel (p) ^= (18)"0"b); /*  see if this leaves one at the end of the area */

        if addrel (p, p -> free_item.size) = ip then do;
				/* this one is at the end, so remove it */
	  break_segment.word_count = rel (p);
				/* new length */
	  if lp ^= null ()		/* remove form chain */
	    then lp -> free_item.chain = (18)"0"b;
				/* as items are order, this is the last */
	    else break_segment.first_free_item = (18)"0"b;
	  copy_count = p -> free_item.size;
				/* zero it out */
	  p -> copy_overlay = "0"b;
	  return;
	end;
      end;
      return;
    end;

  /* no, free it within the area */

  if break_segment.first_free_item then do;
				/* if this is not the only one, we will have to
						   check if it is contguous with the others */
      lp = null ();
      do p = pointer (break_segp, break_segment.first_free_item)
	 repeat pointer (p, p -> free_item.chain);
				/* termination condition checked below */

        if i < binary (rel (p), 18, 0) then do;
				/* the item goes here */
	  if lp ^= null /* if there is a previous item look at it */
	    then do;
	      if addrel (lp, lp -> free_item.size)
		 = ip /* the last one and the new one touch */
	        then do;
		lp -> free_item.size =
		     lp -> free_item.size + ip -> item.size;
		ip = lp;		/* we are now interested in the combination */
	        end;
	        else do;
		ip -> free_item.size = ip -> item.size;
		lp -> free_item.chain = rel (ip);
	        end;
	    end;
	    else do;
	      ip -> free_item.size = ip -> item.size;
	      break_segment.first_free_item = rel (ip);
	    end;

	  if addrel (ip, ip -> free_item.size)
	       = p /* the new one and the next one touch */
	    then do;
	      ip -> free_item.size =
		 ip -> free_item.size + p -> free_item.size;
	      ip -> free_item.chain = p -> free_item.chain;
	    end;
	    else do;
	      ip -> free_item.chain = rel (p);
	    end;
	  return;			/* all done */
	end;

        if p -> free_item.chain
	   = (18)"0"b /* if this is the end of the chain, put it here */
	then do;
	  if addrel (p, p -> free_item.size) = ip
	    then p -> free_item.size =
		    p -> free_item.size + ip -> item.size;
	    else do;
	      ip -> free_item.size = ip -> item.size;
	      ip -> free_item.chain = (18)"0"b;
	      p -> free_item.chain = rel (ip);
	    end;
	  return;
	end;

      end;			/* of search through free chain */

    end;

  /* first free_item, start the chain */

  break_segment.first_free_item = rel (ip);
  ip -> free_item.chain = (18)"0"b;
  ip -> free_item.size = ip -> item.size;
  return;

  end release_in_breakseg;


%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */


%include probe_seg_info;

  /* ;;;;;;; */

%include probe_break_info;

  end probe_seg_mgr_;
