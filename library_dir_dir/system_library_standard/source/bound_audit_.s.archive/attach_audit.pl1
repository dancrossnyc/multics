/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2,ind3 */
attach_audit:
ata:
   proc;

/*  This module turns on auditing for the calling process. IF
   no arguments are given, it generates default switchnames, and audit_
   is set up with no arguments.

   Written  1/1/79  by  Lindsey L. Spratt
   Modified:
   11/26/79  by  Lindsey L. Spratt to implement the -modes control argument.
06/05/81  by  Lindsey Spratt: Changed error message for non-zero code when
	    trying to attach audit_ to the old switch to give the attach
	    description being attempted.  Changed the error code from
	    bad_arg to badopt when more than one mode string is specified.
09/09/81 by Lindsey Spratt: Added a check of arguments being placed in the
	  attach description "ad".  This allows more elegant error reporting
	  than the "argerr" produced by audit_. This fixes bug 9.
11/12/81 by Lindsey Spratt: Made all error messages start with a newline.
	  Changed the argument index variable from "i" to "arg_idx".
*/

/*  Automatic  */

      dcl	    nargs		       fixed bin;
      dcl	    arg_idx	       fixed bin;
      dcl	    tp		       ptr;
      dcl	    tc		       fixed bin;
      dcl	    (code, code1)	       fixed bin (35);
      dcl	    ad		       char (128) varying;
      dcl	    mode_string	       char (256) varying init ("");
      dcl	    old_modes	       char (256) init ("");
      dcl	    (old_switch, new_switch)
			       char (32);
      dcl	    (old_iocb, new_iocb)   ptr;
      dcl	    (have_old_iocb, have_new_iocb)
			       bit (1);
      dcl	    time		       char (16);

/*  Based  */

      dcl	    targ		       char (tc) based (tp);

/* Builtins */

      dcl	    clock		       builtin;
      dcl	    codeptr	       builtin;
      dcl	    rtrim		       builtin;
      dcl	    substr	       builtin;

/* Constant */

      dcl	    MYNAME	       char (12) init ("attach_audit") internal static options (constant);

/*  Entries  */

      dcl	    date_time_	       entry (fixed bin (71), char (*));
      dcl	    cu_$arg_count	       entry (fixed bin);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin, fixed bin (35));
      dcl	    com_err_	       entry options (variable);


/* External */

      dcl	    error_table_$badopt    fixed bin (35) ext;


      have_old_iocb = "0"b;
      have_new_iocb = "0"b;

      ad = " ";
      call cu_$arg_count (nargs);


      do arg_idx = 1 to nargs;
         call cu_$arg_ptr (arg_idx, tp, tc, code);
         if code ^= 0
         then
	  do;
	     call com_err_ (code, MYNAME, "^/Unable to get argument ^d.", arg_idx);
	     return;
	  end;

         if index (targ, "-") = 1
         then if targ = "-modes"
	    then if mode_string = ""
	         then
		  do;
		     arg_idx = arg_idx + 1;
		     call cu_$arg_ptr (arg_idx, tp, tc, code);
		     if code ^= 0
		     then
		        do;
			 call com_err_ (code, MYNAME, "^/No mode string followed the -modes control argument.");
			 return;
		        end;
		     mode_string = targ;
		  end;
	         else
		  do;
		     call com_err_ (error_table_$badopt, MYNAME, "^/Only one mode string may be given.");
		     return;
		  end;
	    else if targ = "-pn" | targ = "-pathname" | targ = "-tc" | targ = "-truncate"
	    then ad = ad || targ || " ";
	    else
	       do;
		call com_err_ (error_table_$badopt, MYNAME, "^/^a is not a known control argument.", targ);
		return;
	       end;
         else if arg_idx = 1
         then
	  do;
	     old_switch = targ;
	     call iox_$look_iocb (old_switch, old_iocb, code);
	     if code ^= 0
	     then
	        do;
		 call com_err_ (code, MYNAME, "^/Unable to find the switch named ^a.", old_switch);
		 return;
	        end;
	     have_old_iocb = "1"b;
	  end;
         else if arg_idx ^= 2
         then ad = ad || targ || " ";
         else if have_old_iocb
         then
	  do;
	     new_switch = targ;
	     call iox_$find_iocb (new_switch, new_iocb, code);
	     if code ^= 0
	     then
	        do;
		 call com_err_ (code, MYNAME, "^/Unable to find or create the new switch named ^a.", new_switch);
		 return;
	        end;
	     have_new_iocb = "1"b;
	  end;
         else ad = ad || targ || " ";
      end;

      if ^have_new_iocb
      then
         do;
	  call date_time_ (clock, time);
	  new_switch = "audit_i/o." || substr (time, 11, 6);
	  call iox_$find_iocb (new_switch, new_iocb, code);
	  if code ^= 0
	  then
	     do;
	        call
		 com_err_ (code, MYNAME, "^/Unable to find or create the new switch with default switchname ^a.",
		 new_switch);
	        return;
	     end;
         end;

      if ^have_old_iocb
      then
         do;
	  old_switch = "user_i/o";
	  call iox_$look_iocb (old_switch, old_iocb, code);
	  if code ^= 0
	  then
	     do;
	        call com_err_ (code, MYNAME, "^/Unable to find the switch to be audited ^a.", old_switch);
	        return;
	     end;
         end;

      ad = "audit_ " || rtrim (new_switch) || " " || ad;

      call iox_$move_attach (old_iocb, new_iocb, code);
      if code ^= 0
      then
         do;
	  call com_err_ (code, MYNAME, "^/Unable to move attachment from ^a to ^a", old_switch, new_switch);
	  return;
         end;

      call iox_$attach_ptr (old_iocb, (ad), codeptr (attach_audit), code);
      if code ^= 0
      then
         do;
	  call iox_$detach_iocb (old_iocb, code1);
	  call iox_$move_attach (new_iocb, old_iocb, code1);
	  call
	     com_err_ (code, MYNAME, "^/Unable to attach audit_ to switch ^a, using the attach description ""^a"".",
	     old_switch, ad);
	  return;
         end;
      call iox_$modes (old_iocb, (mode_string), old_modes, code);
      return;

/*  Include  */

%include iox_dcls;
   end;
