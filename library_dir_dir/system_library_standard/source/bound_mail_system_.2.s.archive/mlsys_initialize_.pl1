/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Initialize static data used by the Multics mail system */

/* Created:  July 1981 by G. Palter */
/* Modified: June 1983 by G. Palter to merge mlsys_data_ and mlsys_internal_data_ and for multi-ring mail system */
/* Modified: March 1984 by G. Palter to fix mail system error #0428 -- during initialization, the mail system extracts the
      user's full name from the default default value segment (>udd>Project>Person>Person.value) rather than the current
      default value segment as set by the value_set_path command */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_initialize_:
     procedure ();


/* Declarations */

dcl  mlsys_gate_ptr pointer;
dcl  mlsys_gate_brackets (3) fixed binary (3);

dcl  (person_id, project_id) character (32);
dcl  anonymous_flag fixed binary;

dcl  users_full_name character (256) varying;

dcl  code fixed binary (35);

dcl  MAIL_SYSTEM_ character (32) static options (constant) initial ("mail_system_");

dcl  PERMANENT_VALUES bit (36) aligned static options (constant) initial ("200000000000"b3);

dcl  FULL_NAME_NAME character (32) static options (constant) initial ("full_name._");

dcl  get_initial_ring_ entry () returns (fixed binary (3));
dcl  get_ring_ entry () returns (fixed binary (3));
dcl  hcs_$fs_get_brackets entry (pointer, fixed binary (5), (3) fixed binary (3), fixed binary (35));
dcl  hcs_$make_ptr entry (pointer, character (*), character (*), pointer, fixed binary (35));
dcl  mail_system_$get_users_addresses entry (pointer, pointer, pointer);
dcl  mail_system_$set_users_full_name entry (character (*) varying);
dcl  mlsys_address_mgr_$create_invalid_address
	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
dcl  mlsys_address_mgr_$create_logbox_address
	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
dcl  mlsys_address_mgr_$create_mail_table_address
	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
dcl  mlsys_address_mgr_$create_user_mailbox_address
	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
dcl  mlsys_address_mgr_$protect_address entry (pointer);
dcl  mlsys_hash_$initialize entry ();
dcl  mlsys_storage_mgr_$initialize entry ();
dcl  mlsys_transmit_$initialize_cache entry ();
dcl  sub_err_ entry () options (variable);
dcl  user_info_$login_data entry (character (*), character (*), character (*), fixed binary);
dcl  value_$get entry () options (variable);

dcl  (codeptr, null, rtrim) builtin;
%page;
/* mlsys_initialize_: entry (); */

	call hcs_$make_ptr (codeptr (mlsys_initialize_), MAIL_SYSTEM_, "", mlsys_gate_ptr, code);
	if code ^= 0 then do;			/* grumble: impossible to initialize the mail system ... */
RESIGNAL_INITIALIZATION_FAILURE:
	     call sub_err_ (code, MAIL_SYSTEM_, ACTION_CANT_RESTART, null (), (0),
		"Unable to initialize the mail system.^/Contact your system programming staff.");
	     go to RESIGNAL_INITIALIZATION_FAILURE;
	end;

	call hcs_$fs_get_brackets (mlsys_gate_ptr, (0), mlsys_gate_brackets, code);
	if code ^= 0 then go to RESIGNAL_INITIALIZATION_FAILURE;

	mlsys_data_$subsystem_ring = mlsys_gate_brackets (2);
	mlsys_data_$highest_usable_ring = mlsys_gate_brackets (3);

	call user_info_$login_data (person_id, project_id, ((32)" "), anonymous_flag);

	mlsys_data_$user_is_anonymous = (anonymous_flag = 1);

	mlsys_data_$person_id = rtrim (person_id);
	mlsys_data_$project_id = rtrim (project_id);
	mlsys_data_$user_id = mlsys_data_$person_id || "." || mlsys_data_$project_id;

	if get_ring_ () <= mlsys_data_$subsystem_ring then/* in (or below) the mail system ring */
	     call initialize_mail_system_ring ();
	else call mail_system_$get_users_addresses (mlsys_data_$user_default_mailbox_address,
		mlsys_data_$user_mail_table_address, mlsys_data_$user_logbox_address);

	if get_ring_ () >= get_initial_ring_ () then	/* see the internal procedure for an explanation */
	     call set_users_full_name ();

	return;
%page;
/* Initializes static data which is only maintained by the Mail System in its protected ring:  Such data includes
   temporary areas/segments, hash tables, and the three address "constants" */

initialize_mail_system_ring:
     procedure ();

	call mlsys_storage_mgr_$initialize ();		/* area/temporary segment management */

	call mlsys_hash_$initialize ();		/* hash tables used by the mail system */

	call mlsys_transmit_$initialize_cache ();	/* cache of recently used mailboxes */

	call mlsys_address_mgr_$create_user_mailbox_address (mlsys_data_$user_id, "", "",
	     mlsys_data_$user_default_mailbox_address, (0));

	if mlsys_data_$user_is_anonymous then		/* anonymous users don't have mail table entries */
	     call mlsys_address_mgr_$create_invalid_address (mlsys_data_$person_id, "", "",
		mlsys_data_$user_mail_table_address, (0));
	else call mlsys_address_mgr_$create_mail_table_address (mlsys_data_$person_id, "", "",
		mlsys_data_$user_mail_table_address, (0));

	call mlsys_address_mgr_$create_logbox_address (mlsys_data_$user_id, "", "", mlsys_data_$user_logbox_address,
	     (0));

	/*** prevent the user from accidently destroying these addresses */
	call mlsys_address_mgr_$protect_address (mlsys_data_$user_default_mailbox_address);
	call mlsys_address_mgr_$protect_address (mlsys_data_$user_mail_table_address);
	call mlsys_address_mgr_$protect_address (mlsys_data_$user_logbox_address);

	return;

     end initialize_mail_system_ring;
%page;
/* Sets the user's full name in the constant addresses maintained by the mail system:  This procedure is only invoked from
   the user's initial ring of execution or above in case the user uses the value_set_path command to change their default
   value segment */

set_users_full_name:
     procedure ();

	if mlsys_data_$user_is_anonymous then		/* anonymous user's don't have full names */
	     users_full_name = "";
	else do;					/* look in the user's value segment */
	     call value_$get (null (), PERMANENT_VALUES, (rtrim (mlsys_data_$person_id) || "." || FULL_NAME_NAME),
		users_full_name, code);
	     if code ^= 0 then			/* ... Person_id.full_name._ not there: try just full_name._ */
		call value_$get (null (), PERMANENT_VALUES, FULL_NAME_NAME, users_full_name, code);
	     if code ^= 0 then users_full_name = "";	/* ... not found */
	end;

	if users_full_name ^= "" then call mail_system_$set_users_full_name (users_full_name);

	return;

     end set_users_full_name;
%page;
%include mlsys_data;
%page;
%include mlsys_internal_data;
%page;
%include sub_err_flags;

     end mlsys_initialize_;
