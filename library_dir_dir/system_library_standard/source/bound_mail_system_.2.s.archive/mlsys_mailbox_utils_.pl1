/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(83-07-01,Palter), approve(), audit(), install():
     Created:  July 1983 by G. Palter.
  2) change(86-10-31,Lippard), approve(86-11-24,MCR7578),
     audit(87-07-13,Dickson), install(87-08-06,MR12.1-1067):
     Modified to use error_table_$bad_file_name instead of $badstar.
                                                   END HISTORY COMMENTS */


/* format: off */

/* Mail System Utilities related to mailbox management */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_mailbox_utils_:
     procedure ();

	return;					/* not an entrypoint */


/* Common Parameters */

dcl  P_code fixed binary (35) parameter;

dcl  P_mailbox_dirname character (*) parameter;		/* pathname of the directory containing a mailbox */
dcl  P_mailbox_ename character (*) parameter;		/* entryname of the mailbox (suffix optional) */

dcl  P_mailbox_acl_ptr pointer parameter;		/* -> a mailbox_acl structure */


/* list_mailbox_acl Parameters */

dcl  P_area_ptr pointer parameter;			/* -> area where we'll allocate results */
dcl  P_mailbox_acl_version character (8) parameter;	/* version of mailbox_acl structure desired */


/* classify_mailbox_address Parameters */

dcl  P_mailbox_address_ptr pointer parameter;		/* -> the mailbox address to classify */
dcl  P_mailbox_type fixed binary parameter;		/* set to the type of mailbox at the address */


/* delete_mailbox Parameters */

dcl  P_command_name character (*) parameter;		/* name to be used in calls to command_query_ */
dcl  P_delete_mailbox_options_ptr pointer parameter;	/* -> options which control when to delete the mailbox */


/* Local copies of parameters */

dcl  code fixed binary (35);

dcl  mailbox_dirname character (168);
dcl  mailbox_ename character (32);

dcl  the_area area based (the_area_ptr);
dcl  the_area_ptr pointer;


/* Remaining declarations */

dcl  1 listed_acl (mailbox_acl_n_acl_terms) aligned based (listed_acl_ptr) like segment_acl_entry;
dcl  listed_acl_ptr pointer;

dcl  1 local_ma aligned,				/* for setting newly created mailbox ACLs */
       2 header like mailbox_acl.header,
       2 acl_terms (3) like mailbox_acl.acl_terms;

dcl  idx fixed binary;

dcl  addresses_match bit (1) aligned;
dcl  try_to_delete bit (1);

dcl  ANONYMOUS character (9) static options (constant) initial ("anonymous");

/* format: off */
dcl (error_table_$action_not_performed, error_table_$bad_subr_arg, error_table_$bad_file_name, error_table_$entlong,
     error_table_$link, error_table_$moderr, error_table_$noalloc, error_table_$noentry, error_table_$not_seg_type,
     error_table_$safety_sw_on, error_table_$unimplemented_version, mlsys_et_$mailbox_exists, mlsys_et_$no_mailbox,
     mlsys_et_$not_mailbox)
	fixed binary (35) external;
/* format: on */

dcl  command_query_$yes_no entry () options (variable);
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$get_link_target entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  mail_system_$compare_addresses entry (pointer, pointer, fixed binary (35)) returns (bit (1) aligned);
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mailbox_$close entry (fixed binary, fixed binary (35));
dcl  mailbox_$create entry (character (*), character (*), fixed binary (35));
dcl  mailbox_$delete entry (character (*), character (*), fixed binary (35));
dcl  mailbox_$mbx_acl_add entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
dcl  mailbox_$mbx_acl_delete entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
dcl  mailbox_$mbx_acl_list entry (character (*), character (*), pointer, fixed binary, pointer, fixed binary (35));
dcl  mailbox_$mbx_acl_replace entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
dcl  mailbox_$open entry (character (*), character (*), fixed binary, fixed binary (35));
dcl  mailbox_$set_safety_switch entry (character (*), character (*), bit (1) aligned, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));

dcl  (area, cleanup) condition;

dcl  (addr, index, length, max, null, reverse, rtrim, substr) builtin;
%page;
/* Create the user's default mailbox (>udd>Project_id>Person_id>Person_id.mbx) if it doesn't already exist */

create_default_mailbox:
     entry (P_code);

	call mail_system_$get_address_pathname (mlsys_data_$user_default_mailbox_address, mailbox_dirname,
	     mailbox_ename, ((32)" "), (0));		/* default mailbox pathname has to be OK */

	if mailbox_already_exists (mailbox_dirname, mailbox_ename, code) then code = mlsys_et_$mailbox_exists;
						/* like it says: it's already there */

	else if code = error_table_$noentry then do;	/* not there: try to create it */
	     call mailbox_$create (mailbox_dirname, mailbox_ename, code);
	     if code = 0 then do;			/* created it! */
		local_ma.version = MAILBOX_ACL_VERSION_1;
		local_ma.n_acl_terms = 3;
		if mlsys_data_$user_is_anonymous then	/* ... special case the user ID */
		     local_ma.acl_terms (1).access_name = ANONYMOUS || "." || mlsys_data_$project_id || ".*";
		else local_ma.acl_terms (1).access_name = mlsys_data_$person_id || ".*.*";
		local_ma.acl_terms (1).extended_mode = ADROSW_MBX_ACCESS;
		local_ma.acl_terms (2).access_name = "*.SysDaemon.*";
		local_ma.acl_terms (3).access_name = "*.*.*";
		local_ma.acl_terms (2).extended_mode, local_ma.acl_terms (3).extended_mode = AOW_MBX_ACCESS;
		call replace_mailbox_acl_entries (mailbox_dirname, mailbox_ename, addr (local_ma), code);
	     end;
	end;

	P_code = code;				/* let the caller know what happened */

	return;
%page;
/* Create the user's logbox (>udd>Project_id>Person_id>Person_id.mbx) if it doesn't already exist */

create_logbox:
     entry (P_code);

	call mail_system_$get_address_pathname (mlsys_data_$user_logbox_address, mailbox_dirname, mailbox_ename,
	     ((32)" "), (0));			/* logbox pathname has to be OK */

	if mailbox_already_exists (mailbox_dirname, mailbox_ename, code) then code = mlsys_et_$mailbox_exists;
						/* like it says: it's already there */

	else if code = error_table_$noentry then do;	/* not there: try to create it */
	     call mailbox_$create (mailbox_dirname, mailbox_ename, code);
	     if code = 0 then do;			/* created it! */
		local_ma.version = MAILBOX_ACL_VERSION_1;
		local_ma.n_acl_terms = 1;
		if mlsys_data_$user_is_anonymous then	/* ... special case the user ID */
		     local_ma.acl_terms (1).access_name = ANONYMOUS || "." || mlsys_data_$project_id || ".*";
		else local_ma.acl_terms (1).access_name = mlsys_data_$person_id || ".*.*";
		local_ma.acl_terms (1).extended_mode = ADROSW_MBX_ACCESS;
		call replace_mailbox_acl_entries (mailbox_dirname, mailbox_ename, addr (local_ma), code);
	     end;
	end;

	P_code = code;				/* let the caller know what happened */

	return;
%page;
/* Create one of the user's saveboxes */

create_savebox:
     entry (P_mailbox_dirname, P_mailbox_ename, P_code);

	mailbox_dirname = P_mailbox_dirname;

	if index (reverse (rtrim (P_mailbox_ename)), reverse (".sv")) = 1 then
	     mailbox_ename = substr (P_mailbox_ename, 1, (length (rtrim (P_mailbox_ename)) - length (".sv")));
	else mailbox_ename = P_mailbox_ename;		/* already has right suffix or will be added shortly */
	call add_suffix (mailbox_ename, "sv.mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* can't create proper pathname */

	if mailbox_already_exists (mailbox_dirname, mailbox_ename, code) then code = mlsys_et_$mailbox_exists;
						/* like it says: it's already there */

	else if code = error_table_$noentry then do;	/* not there: try to create it */
	     call mailbox_$create (mailbox_dirname, mailbox_ename, code);
	     if code = 0 then do;			/* created it! */
		local_ma.version = MAILBOX_ACL_VERSION_1;
		local_ma.n_acl_terms = 1;
		if mlsys_data_$user_is_anonymous then	/* ... special case the user ID */
		     local_ma.acl_terms (1).access_name = ANONYMOUS || "." || mlsys_data_$project_id || ".*";
		else local_ma.acl_terms (1).access_name = mlsys_data_$person_id || ".*.*";
		local_ma.acl_terms (1).extended_mode = ADROSW_MBX_ACCESS;
		call replace_mailbox_acl_entries (mailbox_dirname, mailbox_ename, addr (local_ma), code);
	     end;
	end;

	P_code = code;				/* let caller know what happened */

	return;
%page;
/* Create an arbitrary mailbox */

create_mailbox:
     entry (P_mailbox_dirname, P_mailbox_ename, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* can't create proper pathname */

	if mailbox_already_exists (mailbox_dirname, mailbox_ename, code) then code = mlsys_et_$mailbox_exists;
						/* like it says: it's already there */

	else if code = error_table_$noentry then do;	/* not there: try to create it */
	     call mailbox_$create (mailbox_dirname, mailbox_ename, code);
	     if code = 0 then do;			/* created it! */
		local_ma.version = MAILBOX_ACL_VERSION_1;
		local_ma.n_acl_terms = 3;
		if mlsys_data_$user_is_anonymous then	/* ... special case the user ID */
		     local_ma.acl_terms (1).access_name = ANONYMOUS || "." || mlsys_data_$project_id || ".*";
		else local_ma.acl_terms (1).access_name = mlsys_data_$person_id || ".*.*";
		local_ma.acl_terms (1).extended_mode = ADROSW_MBX_ACCESS;
		local_ma.acl_terms (2).access_name = "*.SysDaemon.*";
		local_ma.acl_terms (3).access_name = "*.*.*";
		local_ma.acl_terms (2).extended_mode, local_ma.acl_terms (3).extended_mode = AOW_MBX_ACCESS;
		call replace_mailbox_acl_entries (mailbox_dirname, mailbox_ename, addr (local_ma), code);
	     end;
	end;

	P_code = code;				/* let caller know what happened */

	return;
%page;
/* Add the specified entries to the ACL of a mailbox:  A simpler interface than mailbox_$mbx_acl_add */

add_mailbox_acl_entries:
     entry (P_mailbox_dirname, P_mailbox_ename, P_mailbox_acl_ptr, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* bad entryname */

	mailbox_acl_ptr = P_mailbox_acl_ptr;
	if mailbox_acl.version ^= MAILBOX_ACL_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	if mailbox_acl.n_acl_terms < 1 then do;		/* must add at least one term */
	     P_code = error_table_$bad_subr_arg;
	     return;
	end;

	begin;					/* must make a slightly different copy of the ACL structure */

dcl  1 mbx_acl_array (mailbox_acl.n_acl_terms) aligned like segment_acl_entry;

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mbx_acl_array (idx).access_name = mailbox_acl.acl_terms (idx).access_name;
		mbx_acl_array (idx).mode = RW_ACCESS;	/* caller doesn't supply this ... */
		mbx_acl_array (idx).extended_mode = mailbox_acl.acl_terms (idx).extended_mode;
	     end;

	     call mailbox_$mbx_acl_add (mailbox_dirname, mailbox_ename, addr (mbx_acl_array), mailbox_acl.n_acl_terms,
		code);

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mailbox_acl.acl_terms (idx).code = mbx_acl_array (idx).status_code;
	     end;
	end;

	P_code = code;				/* global result */

	return;
%page;
/* Delete the specified entries from the ACL of a mailbox:  A simpler interface than mailbox_$mbx_acl_delete */

delete_mailbox_acl_entries:
     entry (P_mailbox_dirname, P_mailbox_ename, P_mailbox_acl_ptr, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* bad entryname */

	mailbox_acl_ptr = P_mailbox_acl_ptr;
	if mailbox_acl.version ^= MAILBOX_ACL_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	if mailbox_acl.n_acl_terms < 1 then do;		/* must delete at least one term */
	     P_code = error_table_$bad_subr_arg;
	     return;
	end;

	begin;					/* must make a slightly different copy of the ACL structure */

dcl  1 mbx_acl_array (mailbox_acl.n_acl_terms) aligned like segment_acl_entry;

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mbx_acl_array (idx).access_name = mailbox_acl.acl_terms (idx).access_name;
	     end;					/* mode fields are ignored */

	     call mailbox_$mbx_acl_delete (mailbox_dirname, mailbox_ename, addr (mbx_acl_array),
		mailbox_acl.n_acl_terms, code);

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mailbox_acl.acl_terms (idx).code = mbx_acl_array (idx).status_code;
	     end;
	end;

	P_code = code;				/* global result */

	return;
%page;
/* Replace the ACL of a mailbox:  A simpler interface than mailbox_$mbx_acl_replace */

replace_mailbox_acl_entries:
     entry (P_mailbox_dirname, P_mailbox_ename, P_mailbox_acl_ptr, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* bad entryname */

	mailbox_acl_ptr = P_mailbox_acl_ptr;
	if mailbox_acl.version ^= MAILBOX_ACL_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	begin;					/* must make a slightly different copy of the ACL structure */

dcl  1 mbx_acl_array (max (1, mailbox_acl.n_acl_terms)) aligned like segment_acl_entry;
						/* PL/I abhors a vacuum */
dcl  n_replacement_acl_terms fixed binary;

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mbx_acl_array (idx).access_name = mailbox_acl.acl_terms (idx).access_name;
		mbx_acl_array (idx).mode = RW_ACCESS;	/* caller doesn't supply this ... */
		mbx_acl_array (idx).extended_mode = mailbox_acl.acl_terms (idx).extended_mode;
	     end;

	     if mailbox_acl.n_acl_terms = 0 then	/* mailbox_ uses -1 instead of 0 for an empty ACL */
		n_replacement_acl_terms = -1;
	     else n_replacement_acl_terms = mailbox_acl.n_acl_terms;

	     call mailbox_$mbx_acl_replace (mailbox_dirname, mailbox_ename, addr (mbx_acl_array),
		n_replacement_acl_terms, code);

	     do idx = 1 to mailbox_acl.n_acl_terms;
		mailbox_acl.acl_terms (idx).code = mbx_acl_array (idx).status_code;
	     end;
	end;

	P_code = code;				/* global result */

	return;
%page;
/* List the ACL of a mailbox:  A simpler interface than mailbox_$mbx_acl_list */

list_mailbox_acl:
     entry (P_mailbox_dirname, P_mailbox_ename, P_area_ptr, P_mailbox_acl_version, P_mailbox_acl_ptr, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* bad entryname */

	if P_area_ptr = null () then			/* where to put the listing */
	     the_area_ptr = get_system_free_area_ ();
	else the_area_ptr = P_area_ptr;

	if P_mailbox_acl_version ^= MAILBOX_ACL_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	mailbox_acl_ptr, listed_acl_ptr = null ();	/* for cleanup handler */

	on condition (cleanup)
	     begin;
		if mailbox_acl_ptr ^= null () then free mailbox_acl in (the_area);
		if listed_acl_ptr ^= null () then free listed_acl in (the_area);
	     end;

	on condition (area)
	     begin;				/* something won't fit */
		code = error_table_$noalloc;
		go to ERROR_RETURN_FROM_LIST_MAILBOX_ACL;
	     end;

	call mailbox_$mbx_acl_list (mailbox_dirname, mailbox_ename, listed_acl_ptr, mailbox_acl_n_acl_terms,
	     the_area_ptr, code);

	if code = 0 then do;			/* got something back */
	     allocate mailbox_acl in (the_area) set (mailbox_acl_ptr);
	     mailbox_acl.version = MAILBOX_ACL_VERSION_1;
	     do idx = 1 to mailbox_acl.n_acl_terms;
		mailbox_acl.acl_terms (idx).access_name = listed_acl (idx).access_name;
		mailbox_acl.acl_terms (idx).extended_mode = listed_acl (idx).extended_mode;
		mailbox_acl.acl_terms (idx).code = listed_acl (idx).status_code;
	     end;
	     free listed_acl in (the_area);
	     listed_acl_ptr = null ();
	     P_mailbox_acl_ptr = mailbox_acl_ptr;	/* ... don't set output parameter unless we got something */
	end;

	P_code = code;				/* global result */

	return;


/* Control arrives here iff it wasn't possible to allocate the ACL in the caller's area */

ERROR_RETURN_FROM_LIST_MAILBOX_ACL:
	if mailbox_acl_ptr ^= null () then free mailbox_acl in (the_area);
	if listed_acl_ptr ^= null () then free listed_acl in (the_area);

	P_code = code;

	return;
%page;
/* Determine the type of a mailbox (user's default/logbox/savebox/other) given the address of the mailbox */

classify_mailbox_address:
     entry (P_mailbox_address_ptr, P_mailbox_type, P_code);

	addresses_match =				/* is it our default mailbox? */
	     mail_system_$compare_addresses (P_mailbox_address_ptr, mlsys_data_$user_default_mailbox_address, code);
	if code ^= 0 then do;			/* something's wrong (with the address probably) */
CANT_CLASSIFY_THE_MAILBOX:
	     P_code = code;
	     return;
	end;

	if addresses_match then			/* yes, it is */
	     P_mailbox_type = USER_DEFAULT_MAILBOX;

	else do;					/* no: is it the user's logbox */
	     addresses_match =
		mail_system_$compare_addresses (P_mailbox_address_ptr, mlsys_data_$user_logbox_address, code);
	     if code ^= 0 then go to CANT_CLASSIFY_THE_MAILBOX;

	     if addresses_match then
		P_mailbox_type = USER_LOGBOX;

	     else do;				/* no: either savebox/ordinary depending on suffix */
		call mail_system_$get_address_pathname (P_mailbox_address_ptr, ((168)" "), mailbox_ename, ((32)" "),
		     code);
		if code ^= 0 then go to CANT_CLASSIFY_THE_MAILBOX;

		if index (reverse (rtrim (mailbox_ename)), reverse (".sv.mbx")) = 1 then
		     P_mailbox_type = SAVEBOX;
		else P_mailbox_type = OTHER_MAILBOX;
	     end;
	end;

	P_code = 0;				/* here iff we succeeded */

	return;
%page;
/* Delete the specified mailbox:  If the mailbox is protected by its safety switch, this entrypoint will query the user
   for permission to delete the mailbox at the caller's request */

delete_mailbox:
     entry (P_mailbox_dirname, P_mailbox_ename, P_command_name, P_delete_mailbox_options_ptr, P_code);

	mailbox_dirname = P_mailbox_dirname;
	call add_suffix (P_mailbox_ename, "mbx", mailbox_ename, P_code);
	if P_code ^= 0 then return;			/* can't create proper pathname */

	delete_mailbox_options_ptr = P_delete_mailbox_options_ptr;
	if delete_mailbox_options.version ^= DELETE_MAILBOX_OPTIONS_VERSION_1 then
	     call return_from_delete_mailbox (error_table_$unimplemented_version);
	if delete_mailbox_options.mbz ^= ""b then call return_from_delete_mailbox (error_table_$bad_subr_arg);


/* Try to delete the mailbox: chase links if necessary */

RETRY_MAILBOX_DELETE_CALL:
	call mailbox_$delete (mailbox_dirname, mailbox_ename, code);

	if (code = error_table_$bad_file_name) | (code = error_table_$not_seg_type) then
	     call return_from_delete_mailbox (mlsys_et_$not_mailbox);

	else if code = error_table_$link then		/* the pathname supplied is that of a link ... */
	     if delete_mailbox_options.chase then do;	/* ... but that's OK: try to delete the target */
		call hcs_$get_link_target (mailbox_dirname, mailbox_ename, mailbox_dirname, mailbox_ename, code);
		if code ^= 0 then call return_from_delete_mailbox (code);
		go to RETRY_MAILBOX_DELETE_CALL;
	     end;
	     else call return_from_delete_mailbox (error_table_$link);


/* Safety switch processing */

	if code = error_table_$safety_sw_on then
	     if delete_mailbox_options.force then do;	/* turn of the safety switch (if possible) and try again... */
		call mailbox_$set_safety_switch (mailbox_dirname, mailbox_ename, "0"b, code);
		if code ^= 0 then call return_from_delete_mailbox (code);
		go to RETRY_MAILBOX_DELETE_CALL;
	     end;

	     else if delete_mailbox_options.query then do;/* ask the user's permission to delete it */
		call command_query_$yes_no (try_to_delete, 0, P_command_name, "",
		     "^a is protected by safety switch.  Do you want to delete it?",
		     pathname_ (mailbox_dirname, mailbox_ename));
		if try_to_delete then do;		/* ... user said it's OK to try ... */
		     call mailbox_$set_safety_switch (mailbox_dirname, mailbox_ename, "0"b, code);
		     if code ^= 0 then call return_from_delete_mailbox (code);
		     go to RETRY_MAILBOX_DELETE_CALL;
		end;
		else call return_from_delete_mailbox (error_table_$action_not_performed);
	     end;					/* ... inform caller that the user denied permission */

	     else call return_from_delete_mailbox (error_table_$safety_sw_on);


/* Inform the caller of the success/failure of the deletion */

	if code = error_table_$noentry then		/* we never return this code ... */
	     call return_from_delete_mailbox (mlsys_et_$no_mailbox);
	else call return_from_delete_mailbox (code);



/* Returns from the delete_mailbox entrypoint with the specified status code */

return_from_delete_mailbox:
     procedure (p_code);

dcl  p_code fixed binary (35) parameter;

	P_code = p_code;				/* set the caller's status code */
	go to RETURN_FROM_DELETE_MAILBOX;

     end return_from_delete_mailbox;

RETURN_FROM_DELETE_MAILBOX:
	return;
%page;
/* Add the specified suffix to an entryname if possible */

add_suffix:
     procedure (p_ename, p_suffix, p_new_ename, p_code);

dcl  (p_ename, p_suffix) character (*) parameter;
dcl  p_new_ename character (32) parameter;
dcl  p_code fixed binary (35) parameter;

dcl  (trimmed_ename, trimmed_suffix) character (33) varying;

	if length (rtrim (p_ename)) > length (p_new_ename) then do;
	     p_code = error_table_$entlong;
	     return;
	end;

	trimmed_ename = rtrim (p_ename);
	trimmed_suffix = "." || rtrim (p_suffix);

	if length (trimmed_ename) > length (trimmed_suffix) then
						/* original name has room for the suffix */
	     if substr (trimmed_ename, (length (trimmed_ename) - length (trimmed_suffix) + 1)) = trimmed_suffix then
		;				/* proper suffix is already present */
	     else trimmed_ename = trimmed_ename || trimmed_suffix;
	else trimmed_ename = trimmed_ename || trimmed_suffix;

	p_new_ename = trimmed_ename;			/* return it */

	if length (trimmed_ename) <= length (p_new_ename) then
	     p_code = 0;				/* it fit */
	else p_code = error_table_$entlong;		/* sorry */

	return;

     end add_suffix;
%page;
/* Determines if the specified mailbox already exists */

mailbox_already_exists:
     procedure (p_mailbox_dirname, p_mailbox_ename, p_code) returns (bit (1) aligned);

dcl  p_mailbox_dirname character (*) parameter;
dcl  p_mailbox_ename character (*) parameter;
dcl  p_code fixed binary (35);

dcl  mailbox_index fixed binary;

	mailbox_index = 0;				/* for cleanup handler */

	on condition (cleanup)
	     begin;
		if mailbox_index ^= 0 then call mailbox_$close (mailbox_index, (0));
	     end;

	call mailbox_$open (p_mailbox_dirname, p_mailbox_ename, mailbox_index, p_code);
	if p_code = error_table_$moderr then p_code = 0;	/* ... it's there but we don't have access */

	call mailbox_$close (mailbox_index, (0));	/* don't need it open anymore */
	mailbox_index = 0;

	return ((p_code = 0));

     end mailbox_already_exists;
%page;
%include mlsys_data;
%page;
%include mlsys_internal_data;
%page;
%include mlsys_mailbox_acl;
%page;
%include mlsys_delete_mailbox;
%page;
%include acl_structures;
%page;
%include access_mode_values;
%page;
%include mlsys_mailbox_modes;
%page;
%include mlsys_mailbox;

     end mlsys_mailbox_utils_;
