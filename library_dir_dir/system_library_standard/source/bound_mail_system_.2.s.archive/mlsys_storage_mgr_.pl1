/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-03-07,TLNguyen), approve(89-03-07,MCR8049),
     audit(89-03-07,Parisek), install(89-03-15,MR12.3-1025):
     Initialize local_cbi structure using the unspec builtin function.
                                                   END HISTORY COMMENTS */


/* format: off */

/* Area and temporary segment manager for the inner-ring portion of the Multics Mail System */

/* Created:  July 1983 by G. Palter */
/* Modified: December 1984 by Keith Loepere for version 2 create_branch_info. */
/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_storage_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Control arrives here when errors are detected in code which has lowered the validation level */

RESTORE_LEVEL_AND_RETURN_WITH_ERROR:
	call cu_$level_set (old_validation_level);
	P_code = code;
	return;


/* allocate Parameters */

dcl  P_n_words fixed binary (18) parameter;		/* # of words in the block to be allocated */
dcl  P_area_ptr pointer parameter;			/* -> area in which to allocate the block */
dcl  P_allocation_ptr pointer parameter;		/* set -> the block allocated */


/* get_temp_segment/release_temp_segment Parameters */

dcl  P_segment_ptr pointer parameter;			/* get_temp_segment: set -> the segment just created;
						   release_temp_segment: -> the segment to be released */
dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  requested_space (P_n_words) bit (36) aligned based (P_allocation_ptr);
dcl  callers_area area based (P_area_ptr);

dcl  segment_ptr pointer;
dcl  code fixed binary (35);


/* List of temporary segments created by the mail system:  Only the UID of each segment is maintained as it is all that is
   needed to vaildate that a segment to be released was, indeed, created by this manager */

dcl  1 temp_segment_list aligned based (mlsys_data_$temp_segment_list_ptr),
       2 n_uids fixed binary,				/* # of UID slots */
       2 uids (temp_segment_list_n_uids refer (temp_segment_list.n_uids)) bit (36) aligned;
						/* the actual UIDs: a value of ""b indicates an unused slot */

dcl  temp_segment_list_n_uids fixed binary;		/* for allocating the above */


/* Remaining declarations */

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  1 local_ai aligned like area_info;

dcl  1 local_cbi aligned like create_branch_info;

dcl  old_validation_level fixed binary (3);

dcl  dirname character (168);
dcl  ename character (32);
dcl  segment_uid bit (36) aligned;
dcl  found bit (1) aligned;
dcl  list_idx fixed binary;

dcl  MAIL_SYSTEM_ character (32) static options (constant) initial ("mail_system_");

dcl  sys_info$max_seg_size fixed binary (19) external;

dcl  mlsys_et_$not_temporary_segment fixed binary (35) external;

dcl  cu_$level_get entry (fixed binary (3));
dcl  cu_$level_set entry (fixed binary (3));
dcl  define_area_ entry (pointer, fixed binary (35));
dcl  get_group_id_$tag_star entry () returns (character (32));
dcl  get_pdir_ entry () returns (character (168));
dcl  get_ring_ entry () returns (fixed binary (3));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$create_branch_ entry (character (*), character (*), pointer, fixed binary (35));
dcl  hcs_$get_uid_seg entry (pointer, bit (36) aligned, fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  sub_err_ entry () options (variable);
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl  unique_chars_ entry (bit (*)) returns (character (15));

dcl  cleanup condition;

dcl  (addr, baseno, binary, null, string, unspec) builtin;
%page;
/* Per-process initialization: creates the mail system's extensible area with appropriate ring brackets */

initialize:
     entry ();

	call cu_$level_get (old_validation_level);

	on condition (cleanup)
	     begin;
		call cu_$level_set (old_validation_level);
	     end;

	call cu_$level_set (get_ring_ ());

	system_area_ptr = get_system_free_area_ ();

	temp_segment_list_n_uids = 32;		/* probably will never have this many at a time, but ... */
	allocate temp_segment_list in (system_area) set (mlsys_data_$temp_segment_list_ptr);
	unspec (temp_segment_list.uids) = ""b;

	string (mlsys_data_$valid_segments) = ""b;	/* nothing has been allocated anywhere yet */

	call get_temp_segment (mlsys_data_$subsystem_area_ptr, code);
	if code ^= 0 then do;			/* grumble: impossible to initialize the mail system ... */
RESIGNAL_INITIALIZATION_FAILURE:
	     call sub_err_ (code, MAIL_SYSTEM_, ACTION_CANT_RESTART, null (), (0),
		"Unable to initialize the mail system storage manager.^/Contact your system programming staff.");
	     go to RESIGNAL_INITIALIZATION_FAILURE;
	end;

	local_ai.version = area_info_version_1;
	string (local_ai.control) = ""b;
	local_ai.extend = "1"b;			/* an extensible area ... */
	local_ai.zero_on_free = "1"b;			/* ... which is "reset" on each freeing operation ... */
	local_ai.system = "1"b;			/* ... and should be extended with ring bracket copying */
	local_ai.owner = MAIL_SYSTEM_;
	local_ai.size = sys_info$max_seg_size;
	local_ai.areap = mlsys_data_$subsystem_area_ptr;

	call define_area_ (addr (local_ai), code);
	if code ^= 0 then go to RESIGNAL_INITIALIZATION_FAILURE;

	call cu_$level_set (old_validation_level);

	return;
%page;
/* Allocates a block of storage: replaces the standard PL/I allocate operator for all mail system inner-ring code through
   use of the "options (rename ((alloc_, mlsys_storage_mgr_$allocate)))" clause.  In order to bypass a "bug" in the
   treatment of extensible areas, this entrypoint will set the proper validation level before actually allocating the
   requested storage.  In addition, this entrypoint remembers maintains a list of the segments in which it has performed
   an allocation; this list is used by the remainder of the mail system to verify that a pointer supplied by the user-ring
   is "valid" */

allocate:
     entry (P_n_words, P_area_ptr, P_allocation_ptr);

	call cu_$level_get (old_validation_level);

	on condition (cleanup)
	     begin;
		call cu_$level_set (old_validation_level);
	     end;

	call cu_$level_set (get_ring_ ());

	allocate requested_space in (callers_area) set (P_allocation_ptr);

	mlsys_data_$valid_segments (binary (baseno (P_allocation_ptr), 18, 0)) = "1"b;

	call cu_$level_set (old_validation_level);

	return;
%page;
/* Fetches a temporary segment and insures that its contents are accesible from the user-ring */

get_temp_segment:
     entry (P_segment_ptr, P_code);

          unspec (local_cbi) = ""b;

	local_cbi.version = create_branch_version_2;
	local_cbi.parent_ac_sw = "1"b;
	local_cbi.mode = RW_ACCESS;
	local_cbi.rings (1) = get_ring_ ();		/* writable only to the mail system ... */
	local_cbi.rings (2),			/* ... but readable in appropriate outer rings */
	     local_cbi.rings (3) = mlsys_data_$highest_usable_ring;
	local_cbi.userid = get_group_id_$tag_star ();

	dirname = get_pdir_ ();
	ename = unique_chars_ (""b) || ".temp.mail_system";

	call cu_$level_get (old_validation_level);

	on condition (cleanup)
	     begin;
		call cu_$level_set (old_validation_level);
	     end;

	call cu_$level_set (get_ring_ ());

	call hcs_$create_branch_ (dirname, ename, addr (local_cbi), code);
	if code ^= 0 then go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;

	call initiate_file_ (dirname, ename, RW_ACCESS, segment_ptr, (0), code);
	if code ^= 0 then go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;

	call hcs_$get_uid_seg (segment_ptr, segment_uid, code);
	if code ^= 0 then go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;

	list_idx = find_empty_temp_segment_list_slot ();	/* will grow the list if necessary */

	temp_segment_list.uids (list_idx) = segment_uid;	/* needed to validate subsequent attempts to release it */

	call cu_$level_set (old_validation_level);

	mlsys_data_$valid_segments (binary (baseno (segment_ptr), 18, 0)) = "1"b;

	P_segment_ptr = segment_ptr;			/* success */
	P_code = 0;

	return;
%page;
/* Releases a temporary segment obtained by a call to the above get_temp_segment entrypoint */

release_temp_segment:
     entry (P_segment_ptr, P_code);

	segment_ptr = P_segment_ptr;			/* copy parameters */
	P_segment_ptr = null ();			/* so the caller won't try twice */

	call cu_$level_get (old_validation_level);

	on condition (cleanup)
	     begin;
		call cu_$level_set (old_validation_level);
	     end;

	call cu_$level_set (get_ring_ ());

	call hcs_$get_uid_seg (segment_ptr, segment_uid, code);
	if code ^= 0 then go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;

	found = "0"b;				/* check that we created this segment */
	do list_idx = 1 to temp_segment_list.n_uids while (^found);
	     if segment_uid = temp_segment_list.uids (list_idx) then do;
		temp_segment_list.uids (list_idx) = ""b;/* ... we did create it: remove it from our list now */
		found = "1"b;
	     end;
	end;

	if ^found then do;				/* not one of our temporary segments */
	     code = mlsys_et_$not_temporary_segment;
	     go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;
	end;

	call terminate_file_ (segment_ptr, 0, TERM_FILE_DELETE, code);
	if code ^= 0 then go to RESTORE_LEVEL_AND_RETURN_WITH_ERROR;

	call cu_$level_set (old_validation_level);

	P_code = 0;				/* success */

	return;
%page;
/* Finds an unused slot in the list of temporary segments managed by the mail system */

find_empty_temp_segment_list_slot:
     procedure () returns (fixed binary);

dcl  (new_temp_segment_list_ptr, old_temp_segment_list_ptr) pointer;
dcl  idx fixed binary;

	do idx = 1 to temp_segment_list.n_uids;
	     if temp_segment_list.uids (idx) = ""b then return (idx);
	end;

	/*** here iff there are no free slots: grow the list */

	system_area_ptr = get_system_free_area_ ();

	temp_segment_list_n_uids = 2 * temp_segment_list.n_uids;
	allocate temp_segment_list in (system_area) set (new_temp_segment_list_ptr);

	unspec (new_temp_segment_list_ptr -> temp_segment_list.uids) = ""b;

	do idx = 1 to temp_segment_list.n_uids;		/* copy in the old values */
	     new_temp_segment_list_ptr -> temp_segment_list.uids (idx) = temp_segment_list.uids (idx);
	end;
	idx = temp_segment_list.n_uids + 1;		/* first free slot */

	old_temp_segment_list_ptr = mlsys_data_$temp_segment_list_ptr;
	mlsys_data_$temp_segment_list_ptr = new_temp_segment_list_ptr;

	free old_temp_segment_list_ptr -> temp_segment_list;

	return (idx);

     end find_empty_temp_segment_list_slot;
%page;
%include mlsys_internal_data;
%page;
%include create_branch_info;
%page;
%include access_mode_values;

%include terminate_file;
%page;
%include area_info;
%page;
%include sub_err_flags;

     end mlsys_storage_mgr_;
