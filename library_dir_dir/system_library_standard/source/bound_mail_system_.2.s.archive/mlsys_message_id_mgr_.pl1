/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Message-ID management for the Multics Mail System */

/* Created:  July 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen,^indcomtxt */


mlsys_message_id_mgr_:
     procedure () options (rename ((alloc_, mlsys_storage_mgr_$allocate)));

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_message_id bit (72) aligned parameter;

dcl  P_message_id_system character (256) varying;		/* encode_foreign_id, encode_psuedo_id: name of system from
						      whence this message ID originated;
						   decode_message_id: set to name of originating system */

dcl  P_clock_reading fixed binary (71) parameter;		/* encode_local_id: the date/time to be encoded;
						   encode_psuedo_id: date/time created of the message */

dcl  P_message_id_text character (*) parameter;		/* encode_foreign_id: the actual Message-ID text */

dcl  P_from_field pointer parameter;			/* encode_psuedo_id: -> the From field of the message */

dcl  P_message_id_string character (*) varying parameter;	/* decode_message_id: set to the text of the ID */
dcl  P_system_is_local bit (1) aligned parameter;		/* decode_message_id: set ON => ID is for the local system */
dcl  P_code fixed binary (35) parameter;		/* decode_message_id only */
/**** format: indcomtxt */


/* Message-ID hash table used to encode text strings purporting to be message unique identifies from other systems */

dcl  1 encoded_message_id aligned,			/* the encoding used in Message-IDs ... */
       2 flags,
         3 hashed_id bit (1) unaligned,			/* ... ON => the ID is encoded in the hash table;
						   OFF => the ID is a local clock reading */
         3 pad bit (35) unaligned,
       2 bucket_idx fixed binary (18) unaligned unsigned,	/* ... in which bucket this ID may be found */
       2 n_steps fixed binary (18) unaligned unsigned;	/* ... # of steps from base of bucket to the ID */

dcl  1 local_encoded_message_id aligned based (addr (encoded_message_id)),
       2 flags,
         3 hashed_id bit (1) unaligned,			/* ... OFF for local IDs */
         3 pad bit (17) unaligned,
         3 clock_reading fixed binary (54) unaligned unsigned;
						/* ... the local clock reading */

dcl  1 message_id_slot aligned based (message_id_slot_ptr), /* a single slot in the hash table ... */
       2 next_slot_ptr pointer,			/* ... -> next slot in the hash table */
       2 system_name character (256) varying,		/* ... name of system that generated this ID */
       2 flags,
         3 local_system bit (1) unaligned,		/* ... ON => it's the local system */
         3 pad bit (35) unaligned,
       2 message_id_lth fixed binary (21),		/* ... length of the ID text in this slot */
       2 message_id character (message_id_slot_message_id_lth refer (message_id_slot.message_id_lth));
dcl  (message_id_slot_ptr, last_message_id_slot_ptr) pointer;
dcl  message_id_slot_message_id_lth fixed binary (21);


/* Remaining declarations */

dcl  n_real_steps fixed binary;

dcl  full_system_name character (256) varying;

dcl  the_address pointer;
dcl  author_name character (256) varying;

dcl  error_table_$smallarg fixed binary (35) external;
dcl  mlsys_et_$unknown_message_id fixed binary (35) external;

dcl  mlsys_hash_$hash entry (character (*), fixed binary) returns (fixed binary);
dcl  mlsys_misc_utils_$get_best_address_name entry (pointer, character (*) varying, fixed binary (35));
dcl  mlsys_nit_interface_$get_fully_qualified_name entry (character (256) varying) returns (character (256) varying);
dcl  mlsys_nit_interface_$get_local_system_name entry () returns (character (256) varying);
dcl  mlsys_nit_interface_$is_local_system entry (character (256) varying) returns (bit (1) aligned);
dcl  request_id_ entry (fixed binary (71)) returns (character (19));

dcl  (dimension, hbound, lbound, length, maxlength, null, string, unspec) builtin;
%page;
/* Encode a Message-ID from the local system */

encode_local_id:
     entry (P_clock_reading, P_message_id);

	encoded_message_id.hashed_id = "0"b;		/* just make sure this flag is off */

	local_encoded_message_id.clock_reading = P_clock_reading;
	local_encoded_message_id.pad = ""b;

	unspec (P_message_id) = unspec (encoded_message_id);

	return;
%page;
/* Encode a Message-ID from another computer system:  As we can not convert the text into a unique clock reading as we do
   for local IDs, we instead hash the text string and use the text and system name as the key for constructing the ID */

encode_foreign_id:
     entry (P_message_id_text, P_message_id_system, P_message_id);

	encoded_message_id.hashed_id = "1"b;
	encoded_message_id.pad = ""b;

	encoded_message_id.bucket_idx = mlsys_hash_$hash (P_message_id_text, dimension (message_id_hash_table.buckets, 1));
	encoded_message_id.n_steps = 0;		/* assume it's the first one in this bucket ... */

	full_system_name = mlsys_nit_interface_$get_fully_qualified_name (P_message_id_system);

	last_message_id_slot_ptr = null ();		/* needed in case we must add a new slot */
	do message_id_slot_ptr = message_id_hash_table.buckets (encoded_message_id.bucket_idx)
	     repeat (message_id_slot.next_slot_ptr) while (message_id_slot_ptr ^= null ());
	     if (message_id_slot.message_id = P_message_id_text) & (message_id_slot.system_name = full_system_name)
	     then go to HAVE_ENCODED_MESSAGE_ID;
	     encoded_message_id.n_steps = encoded_message_id.n_steps + 1;
	     last_message_id_slot_ptr = message_id_slot_ptr;
	end;

	/*** Control arrives here iff there's no matching Message-ID already in the hash table */
	message_id_slot_message_id_lth = length (P_message_id_text);
	allocate message_id_slot in (hash_tables_segment.hash_area) set (message_id_slot_ptr);
	message_id_slot.system_name = full_system_name;
	message_id_slot.local_system = mlsys_nit_interface_$is_local_system (full_system_name);
	message_id_slot.message_id = P_message_id_text;
	message_id_slot.next_slot_ptr = null ();
	if last_message_id_slot_ptr = null () then	/* first one in this bucket */
	     message_id_hash_table.buckets (encoded_message_id.bucket_idx) = message_id_slot_ptr;
	else last_message_id_slot_ptr -> message_id_slot.next_slot_ptr = message_id_slot_ptr;

	/*** Control arrives here once the field ID has been determined */
HAVE_ENCODED_MESSAGE_ID:
	unspec (P_message_id) = unspec (encoded_message_id);

	return;
%page;
/* Construct a Message-ID for a message without an explicit Message-ID field:  In this case, we contruct a text string
   from the date/time created of the message and the first author of the message */

encode_psuedo_id:
     entry (P_clock_reading, P_from_field, P_message_id_system, P_message_id);

	the_address = P_from_field -> address_list.addresses (1);
						/* the caller has guarenteed that there's an address */

	call mlsys_misc_utils_$get_best_address_name (the_address, author_name, (0));

	begin;

dcl  1 psuedo_id_text aligned,
       2 date_time_created character (19) unaligned,
       2 semicolon character (1) unaligned,
       2 author character (length (author_name)) unaligned;

	     psuedo_id_text.date_time_created = request_id_ (P_clock_reading);
	     psuedo_id_text.semicolon = ";";
	     psuedo_id_text.author = author_name;

	     call encode_foreign_id (string (psuedo_id_text), P_message_id_system, P_message_id);
	end;

	return;
%page;
/* Decode a Message-ID: return the text, system name, and local system indicator */

decode_message_id:
     entry (P_message_id, P_message_id_string, P_message_id_system, P_system_is_local, P_code);

	unspec (encoded_message_id) = unspec (P_message_id);
						/* get the ID into a useable form */


	if encoded_message_id.hashed_id then do;

/* It claims to be an ID in the hash table */

	     if (encoded_message_id.bucket_idx < lbound (message_id_hash_table.buckets, 1))
		| (encoded_message_id.bucket_idx > hbound (message_id_hash_table.buckets, 1)) then do;
UNKNOWN_MESSAGE_ID:					/* it's not an ID */
		P_code = mlsys_et_$unknown_message_id;
		return;
	     end;

	     n_real_steps = 0;
	     do message_id_slot_ptr = message_id_hash_table.buckets (encoded_message_id.bucket_idx)
		repeat (message_id_slot.next_slot_ptr) while (message_id_slot_ptr ^= null ());
		if n_real_steps = encoded_message_id.n_steps then do;
		     if message_id_slot.message_id_lth <= maxlength (P_message_id_string) then do;
			P_message_id_string = message_id_slot.message_id;
			P_message_id_system = message_id_slot.system_name;
			P_system_is_local = message_id_slot.local_system;
			P_code = 0;		/* ... success */
		     end;
		     else P_code = error_table_$smallarg;
						/* ... ID text is too large */
		     return;			/* ... that's it */
		end;
		n_real_steps = n_real_steps + 1;	/* not the right slot yet ... */
	     end;

	     go to UNKNOWN_MESSAGE_ID;		/* we get here iff there aren't enough slots in the bucket */
	end;


	else do;

/* It's a local ID which consists of just the clock reading */

	     P_message_id_string = request_id_ ((local_encoded_message_id.clock_reading));
	     P_message_id_system = mlsys_nit_interface_$get_local_system_name ();
	     P_system_is_local = "1"b;		/* by definition */
	     P_code = 0;

	     return;
	end;
%page;
%include mlsys_hash_tables_seg;
%page;
%include mlsys_internal_data;
%page;
%include mlsys_address_list;

     end mlsys_message_id_mgr_;
