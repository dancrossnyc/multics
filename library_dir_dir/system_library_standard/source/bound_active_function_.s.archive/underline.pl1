/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


underline:	procedure;			/* active function which returns its input args,	*/
						/* separated by blanks and underlined, as a 	*/
						/* quoted string.				*/

     dcl						/*	automatic variables			*/
	Larg			fixed bin,	/* length of an input arg.			*/
	Lcom			fixed bin,	/* length of command's output string.		*/
	Lret			fixed bin,	/* maximum length of our return value.		*/
	Nargs			fixed bin,	/* number of arguments we were passed.		*/
	Parg			ptr,		/* ptr to an input argument.			*/
	Parg_list			ptr,		/* ptr to caller's argument list.		*/
	Pret			ptr,		/* ptr to our return value.			*/
	code			fixed bin (35),	/* an error code value.			*/
	i			fixed bin;	/* a do-group index.			*/


     dcl						/*	based variables			*/
	arg_array (Larg)		char(1) based (Parg),
						/* an input argument.			*/
	arg_char			char(1) based (Parg),
						/* next char of our input argument.		*/
	ret			char(Lret) varying based (Pret);
						/* overlay for portions of our return value.	*/


     dcl (addr, length, substr)	builtin;


     dcl						/*	entries				*/
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$arg_count		entry returns (fixed bin),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin, fixed bin(35), ptr),
	iox_$put_chars		entry (ptr, ptr, fixed bin, fixed bin(35));


     dcl						/*	static variables			*/
	BS_UNDERSCORE		char(2) aligned int static options(constant) init ("_"),
	NL			char(1) aligned int static options(constant) init ("
"),
	QUOTE			char(1) aligned int static options(constant) init (""""),
	QUOTE_QUOTE		char(2) aligned int static options(constant) init (""""""),
	SPACE			char(1) aligned int static options(constant) init (" "),
	UNDERSCORE_BS		char(2) aligned int static options(constant) init ("_"),
	iox_$user_output		ptr ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$af_return_arg (Nargs, Pret, Lret, code);	/* see how we were called.			*/
	if code = 0 then do;			/* as an active function.			*/
	     if Nargs = 0 then do;			/* no input args.  Return a null string.	*/
		ret = QUOTE_QUOTE;
		return;
		end;
	     ret = QUOTE;
	     do i = 1 to Nargs;			/* add args to return string one by one.		*/
		call cu_$arg_ptr (i, Parg, Larg, code);
		do while (Larg > 0);		/* double any quotes while copying arg.		*/
		     if      arg_char < SPACE then
		          ret = ret || arg_char;
		     else if arg_char = SPACE then
		          ret = ret || "_";		/* convert spaces to _s.			*/
		     else if arg_char = QUOTE then do;	/* double quotes as we go. (""_)		*/
		          ret = ret || QUOTE_QUOTE;
		          ret = ret || BS_UNDERSCORE;
		          end;
		     else if arg_char < "_" then do;
		          ret = ret || arg_char;	/* canonicalize the string as we go.		*/
		          ret = ret || BS_UNDERSCORE;
		          end;
		     else if arg_char > "_" then do;
		          ret = ret || UNDERSCORE_BS;
		          ret = ret || arg_char;
		          end;
		     else
		          ret = ret || "_";
		     if Larg > 1 then Parg = addr(arg_array(2));
		     Larg = Larg - 1;
		     end;
		ret = ret || SPACE;			/* separate args by a space in output string.	*/
		end;
	     if substr(ret,length(ret)) = SPACE then	/* remove space after last argument.		*/
		ret = substr(ret,1,length(ret)-1);
	     ret = ret || QUOTE;
	     end;
	else do;					/* command merely output's its args, separated by	*/
	     Nargs = cu_$arg_count();			/* blanks.				*/
	     Lcom = 0;				/* compute max length of output string.		*/
	     do i = 1 to Nargs;
		call cu_$arg_ptr(i, Parg, Larg, code);
		Lcom = Lcom + Larg*3 + 1;
		end;
	     if Nargs > 0 then do;
		Parg_list = cu_$arg_list_ptr();
begin;
     dcl	com			char(Lcom) varying aligned init ("");
		do i = 1 to Nargs;
		     call cu_$arg_ptr_rel (i, Parg, Larg, code, Parg_list);
		     do while (Larg > 0);		/* no doubling of quotes needed here.		*/
			if      arg_char < SPACE then
			     com = com || arg_char;
			else if arg_char = SPACE then
			     com = com || "_";	/* convert spaces to _s.			*/
			else if arg_char < "_" then do;
			     com = com || arg_char;	/* canonicalize the string as we go.		*/
			     com = com || BS_UNDERSCORE;
			     end;
			else if arg_char > "_" then do;
			     com = com || UNDERSCORE_BS;
			     com = com || arg_char;
			     end;
			else
			     com = com || "_";
			if Larg > 1 then Parg = addr(arg_array(2));
			Larg = Larg - 1;
			end;
		     com = com || " ";
		     end;
		if substr(com,length(com)) = SPACE then	/* remove space after last argument.		*/
		     com = substr(com,1,length(com)-1);
		call iox_$put_chars (iox_$user_output, addr(substr(com,1)), length(com), code);
	end;
		end;
	     call iox_$put_chars (iox_$user_output, addr(NL), 1, code);
	     end;

	end underline;
