/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* SEVERITY - Command/Active Function to return the value (as a char string)
   of an external static severity value.

   Designed by Webber, Written 770729 by Green
   Modified 770914 by PG to restrict to just FORTRAN and PL/I for MR6.0 version
   Modified 4/80 by Michael R. Jordan to use get_external_variable_
   Modified 5/13/82 by L. Baldwin to fix the short name for -default to -dft.
*/

severity:
     procedure options (variable);

/* automatic */

declare  active_function bit (1) aligned,
         arg_length fixed bin (21),
         arg_num fixed bin,
         arg_ptr ptr,
         argument_routine entry (fixed bin, ptr, fixed bin (21), fixed bin (35)) variable,
         code fixed bin (35),
         default_arg_length fixed bin (21),
         default_arg_ptr ptr,
         error_routine entry options (variable) variable,
         n_args fixed bin,
         return_length fixed bin (21),
         return_ptr ptr,
         severity_string picture "-----------9",		/* room for sign + 11 digits */
         severity_value fixed bin (35),
         vdesc_ptr ptr,
         var_ptr ptr,
         var_size fixed bin (19);

/* based */

declare  arg_string char (arg_length) based (arg_ptr),
         default_arg_string char (default_arg_length) based (default_arg_ptr),
         return_value char (return_length) varying based (return_ptr),
         severity_variable fixed bin (35) based (var_ptr);

/* builtins */

declare  ltrim builtin;

/* entries */

declare  active_fnc_err_ entry options (variable),
         com_err_ entry options (variable),
         cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
         cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
         cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
         get_external_variable_ entry (char (*), ptr, fixed bin (19), ptr, fixed bin (35)),
         ioa_ entry options (variable);

/* external static */

declare (error_table_$badopt,
         error_table_$noarg,
         error_table_$not_act_fnc) fixed bin (35) external static;

/* internal static */

declare  my_name char (8) internal static init ("severity") options (constant);

/* program */

	call cu_$af_return_arg (n_args, return_ptr, return_length, code);
	if code = 0
	then do;					/* called as active function */
	     error_routine = active_fnc_err_;
	     argument_routine = cu_$af_arg_ptr;
	     active_function = "1"b;
	     return_value = "";			/* in case we get started after an error */
	end;
	else if code = error_table_$not_act_fnc		/* called as command */
	then do;
	     error_routine = com_err_;
	     argument_routine = cu_$arg_ptr;
	     active_function = "0"b;
	end;
	else do;
	     call com_err_ (code, my_name, "");
	     return;
	end;
	if n_args = 0
	then do;
	     call error_routine (error_table_$noarg, my_name, "^/Usage: severity indicator_name {-default STR}");
	     return;
	end;

	default_arg_ptr = null ();
	do arg_num = 2 repeat arg_num+1 while (arg_num <= n_args);
	     call argument_routine (arg_num, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		call error_routine (code, my_name, "Unable to access argument #^d.", arg_num);
		return;
	     end;
	     if arg_string = "-default" | arg_string = "-dft"
	     then do;
		if arg_num = n_args
		then do;
		     call error_routine (error_table_$noarg, my_name, "Default string missing following ^a.", arg_string);
		     return;
		end;
		arg_num = arg_num+1;
		call argument_routine (arg_num, default_arg_ptr, default_arg_length, code);
		if code ^= 0
		then do;
		     call error_routine (code, my_name, "Unable to access default string argument.");
		     return;
		end;
	     end;
	     else do;
		call error_routine (error_table_$badopt, my_name, "^a", arg_string);
		return;
	     end;
	end;

	call argument_routine (1, arg_ptr, arg_length, code);
	if code ^= 0
	then do;
	     call error_routine (code, my_name, "Unable to access argument #1.");
	     return;
	end;

	call get_external_variable_ (arg_string || "_severity_", var_ptr, var_size, vdesc_ptr, code);
	if code ^= 0
	then do;
	     if default_arg_ptr = null ()
	     then do;
		call error_routine (code, my_name,
		     "^/Error accessing severity indicator ^a.", arg_string);
		return;
	     end;
	     if active_function
	     then return_value = default_arg_string;
	     else call ioa_ ("^a", default_arg_string);
	     return;
	end;

	if var_size ^= 1
	then do;
	     call error_routine (0b, my_name, "The severity indicator ^a is not a single word variable.", arg_string);
	     return;
	end;

	severity_value = severity_variable;
	severity_string = severity_value;		/* convert to pictured form */

	if active_function
	then return_value = ltrim (severity_string);
	else call ioa_ ("^a", ltrim (severity_string));

	return;

     end severity;
