/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


path: proc;

/*	U S E F U L   A C T I V E   F U N C T I O N S .


   Adapted 11/19/72 by Robert S. Coren from code originally written
   by Max G.Smith
   Changed to work when called as commands, S. Herbst 08/31/78
   Fix [unique 0] return value 06/10/80 S. Herbst
   Short name dir added to directory 01/12/81 S. Herbst
   Taught path about archive component pathnames 07/19/81 B. Margolin
   Taught everything about archive component pathnames, added
   the component and strip_component entrypoints, fixed some incorrect
   external entry declarations (w/r/t alignedness of strings). 02/16/82
   by B. Margolin.
   Enhanced path (2-3 arg case) and added is_component_pathname and
   entry_path.  02/19/82 by B. Margolin.
   Modified path & cohorts so that a segment name with an embedded space
   will not become two separate segments.  10/15/82 Linda Pugh.
   Add shortest_path. 01/05/82 R. Harvey.

   [path  a]	The complete pathname of "a".

   [path  a  b]	The complete pathname of "b" in directory "a".

   [path  a  b  c]	The complete pathname of component "c" in segment "b"
   in directory "a".

   [directory  a]	The directory portion of the complete pathname of "a".

   [entry  a]	The entry portion of the complete pathname of "a".

   [component  a]	The archive component portion of the complete
   pathname of "a", or [entry  a] if "a" is not an archive component
   pathname.

   [entry_path  a]  The complete pathname of the segment that "a" is
   in.  The same as [path a] if "a" is not an archive component pathname.

   [shortest_path a b c] The shortest pathname of component "c" in segment "b"
   in directory "a".

   [strip  a  b]	The complete pathname of "a" with the suffix ".b"
   removed if it was present.

   [strip  a]	The complete pathname of "a" with the suffix
   removed if there was more than one component.

   [strip_entry  a  b]  Same as [entry [strip a b]].

   [strip_entry  a]	Same as [entry [strip a]].

   [strip_component  a]  Same as [strip_entry [component a]].

   [strip_component  a  b]  Same as [strip_entry [component a] b].
   
   [suffix  a]	Null if [component a] has only one component;
   otherwise, the last component.

   [is_component_pathname a] Returns "true" if a is an archive
   component pathname.

   [unique]		A 15-character unique idenifier. */

/* Declarations. */

dcl  return_ptr ptr;
dcl  return_string char (return_len) based (return_ptr) varying;
dcl  return_len fixed bin;

dcl  arg_ptr (3) ptr;
dcl  arg_len (3) fixed bin;
dcl  arg1 char (arg_len (1)) based (arg_ptr (1));
dcl  arg2 char (arg_len (2)) based (arg_ptr (2));
dcl  arg3 char (arg_len (3)) based (arg_ptr (3));

dcl (dn, pn) char (202);
dcl  char202 character (202) varying;
dcl (en, cn, who) char (32);
dcl  b36 bit (36);
dcl  af_sw bit (1);
dcl  fb35 fixed bin (35);
dcl (i, j, colon_idx, arg_count) fixed;
dcl  code fixed bin (35);

dcl  error_table_$bad_conversion fixed binary (35) external;
dcl  error_table_$not_act_fnc fixed bin (35) ext;

dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl (active_fnc_err_, active_fnc_err_$suppress_name,
     com_err_, com_err_$suppress_name, ioa_) entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_shortest_path_ entry (char(*)) returns(char(168));
dcl  pathname_$component_check entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  unique_chars_ ext entry (bit (*)) returns (char (15));
dcl  requote_string_ entry (char(*)) returns (char(*));
dcl (addr, index, length, maxlength, reverse, rtrim, search, substr, unspec) builtin;

/* End of declarations. */
/*  */
/* Here for [path a]. */

	call setup ("path", "", 1, 3, "0"b);
	go to JOIN_SP;




/* Here for [shortest_path a]. */

shortest_path: entry;

	call setup ("shortest_path", "", 1, 3, "0"b);


JOIN_SP:	if arg_count = 1 then go to JOIN_D;		/* Simple case */

	if arg_count = 2 then call pathname_$component_check ((pn), arg2, "", pn, code);
	else call pathname_$component_check ((pn), arg2, arg3, pn, code);
	if code ^= 0 then call error (code, "Creating pathname.");
	if who = "shortest_path" then return_string = rtrim (get_shortest_path_ (pn));
	else return_string = rtrim (pn);
	go to FINISH;


	


/* Here for [directory a]. */

directory: dir: entry;

	call setup ("directory", en, 1, 1, "1"b);
	pn = dn;

JOIN_D:	if who = "shortest_path" then return_string = rtrim (get_shortest_path_ (pn));
	else return_string = rtrim (pn);

FINISH:	if ^af_sw then call ioa_ ("^a", return_string);
          else if who ^= "is_component_pathname" then;
          return_string = requote_string_ ((return_string));

RETURN:	return;





/* Here for [entry a]. */

entry:	entry;

	call setup ("entry", en, 1, 1, "1"b);
	return_string = rtrim (en);
	go to FINISH;





/* Here for [component a]. */

component: entry;

	call setup ("component", en, 1, 1, "1"b);
	if cn ^= "" then return_string = rtrim (cn);
	else return_string = rtrim (en);
	go to FINISH;





/* Here for [is_component_pathname a] */

is_component_pathname:
icpn:	entry;

	call setup ("is_component_pathname", en, 1, 1, "1"b);
	if cn = "" then return_string = "false";
	else return_string = "true";
	go to FINISH;

	


/* Here for [entry_path a] */
entry_path:
	entry;

	call setup ("entry_path", en, 1, 1, "1"b);
	call pathname_$component_check (dn, en, "", pn, code);
	if code ^= 0 then call error (code, "Forming pathname.");
	return_string = rtrim (pn);
	go to FINISH;
	





/* Here for [strip a] and [strip a b]. */

strip:	entry;

	call setup ("strip", "", 1, 2, "0"b);
	go to JOIN_R;




/* Here for [strip_component a] and [strip_component a b]. */

strip_component: spc:
	entry;

	call setup ("strip_component", en, 1, 2, "1"b);
	if cn = "" then pn = en;
	else pn = cn;
	go to JOIN_R;




/* Here for [strip_entry a] and [strip_entry a b]. */

strip_entry: spe: entry;

	call setup ("strip_entry", en, 1, 2, "1"b);
	pn = en;

JOIN_R:	if arg_count = 2 then go to TWO_ARGS;

/* Here for [strip a] and [strip_entry a]. */

	colon_idx = index (pn, "::");
	if colon_idx = 0			/* not archive */
	     then j = length (pn) + 1 - search (reverse (pn), ".>");
	else j = length (pn) + 1 - 
	     index (reverse (substr (pn, colon_idx + 2)), ".");
	if j = length (pn) + 1 | j = 1 | substr (pn, j, 1) = ">" then return_string = rtrim (pn);
	else return_string = substr (pn, 1, j - 1);
	go to FINISH;

/* Here for [strip a b] and [strip_entry a b]. */

TWO_ARGS:	i = length (rtrim (pn));
	return_string = rtrim (pn);
	if i > arg_len (2) then
	     if substr (pn, i - arg_len (2)) = "." || arg2 then
		return_string = substr (pn, 1, i - arg_len (2) - 1);
	go to FINISH;





/* Here for [suffix a]. */

suffix:	entry;

	call setup ("suffix", en, 1, 1, "1"b);
	if cn ^= "" then en = cn;
	i = 33-index (reverse (en), ".");
	if i = 33 then return_string = "";
	else if i >= length (rtrim (en)) then return_string = "";
	else return_string = rtrim (substr (en, i+1));
	go to FINISH;





/* Here for [unique]. */

unique:	entry;

	who = "unique";
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     return_ptr = addr (char202);
	     return_len = 202;
	end;
	else af_sw = "1"b;
	if arg_count ^= 0 then do;
	     if arg_count ^= 1 then do;
		if af_sw then call active_fnc_err_$suppress_name
		     (0, "unique", "Usage:  [unique {octal_number}]");
		else call com_err_$suppress_name (0, "unique", "Usage:  unique {octal_number}");
		go to RETURN;
	     end;
	     call cu_$arg_ptr (1, arg_ptr (1), arg_len (1), code);
	     fb35 = cv_oct_check_ (arg1, code);
	     if code ^= 0 then do;
		call error (error_table_$bad_conversion, (arg1));
	     end;
	     if fb35 = 0 then do;
		return_string = "!BBBBBBBBBBBBBB";
		go to FINISH;
	     end;
	     b36 = unspec (fb35);
	end;
	else b36 = ""b;
	return_string = unique_chars_ (b36);
	go to FINISH;




setup:	proc (string, a_en, min_arg, max_arg, ret);

/* Internal function to..
   (1)  Set the name of the active function in 'who'.
   (2)  Verify that there are the proper number of arguments
    (as defined by min_arg and max_arg).
   (3)  Expand the first argument into the parts of a full pathname.
   (4) If ret is set, then put the entryname in a_en, the output
    argument, else set pn to the the full pathname.

   (yes, I know this interface is horrible, but that's the way I
    found it, and I didn't feel like rewriting it -- Barmar)
 */


dcl  string char (*);
dcl  a_en char (*);
dcl  en char (32);
dcl  (min_arg, max_arg) fixed bin;
dcl  ret bit (1);	/* should we return a value? */

	     who = string;
	     call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	     if code = error_table_$not_act_fnc then do;
		af_sw = "0"b;
		return_ptr = addr (char202);
		return_len = maxlength (char202);
	     end;
	     else af_sw = "1"b;

	     if arg_count < min_arg | arg_count > max_arg then do;
		if af_sw then call active_fnc_err_$suppress_name (0, string,
		     "Usage:  [^a ^[path^;path {string}^;path {string1 {string2}}^]]",
		     string, max_arg);
		else call com_err_$suppress_name (0, string,
		     "Usage:  ^a ^[path^;path {string}^;path {string1 {string2}}^]",
		     string, max_arg);
		go to RETURN;
	     end;

/* pick up input args  */

	     do i = 1 to arg_count;
		call cu_$arg_ptr (i, arg_ptr (i), arg_len (i), code);
		if code ^= 0 then
BAD_ARGS:		     call error (code, "");
	     end;
	     call expand_pathname_$component (arg1, dn, en, cn, code);
	     if code ^= 0 then call error (code, (arg1));
	     if ^ret then do;
		call pathname_$component_check (dn, en, cn, pn, code);
		if code ^= 0 then call error (code, (arg1));
		end;
	     else a_en = en;

	end setup;




error:	proc (acode, string);

/* Internal procedure to print error messages and exit */

dcl  acode fixed bin (35), string char (*);

	     if af_sw then call active_fnc_err_ (acode, who, string);
	     else call com_err_ (acode, who, string);
	     go to RETURN;

	end error;

     end path;
