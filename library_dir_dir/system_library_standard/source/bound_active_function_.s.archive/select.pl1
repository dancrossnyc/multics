/* ************************************************************
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1982  *
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1980. *
   *                                                          *
   ************************************************************ */


/* BSG 1/15/80
   Cleaned up for installation, 23 December 1980, M. N. Davidoff.
*/
/* format: style2 */
select:
     procedure options (variable);

/* automatic */

	dcl     afargl		 fixed bin (21);
	dcl     afargp		 ptr;
	dcl     afsw		 bit (1) aligned;
	dcl     argl		 fixed bin (21);
	dcl     argp		 ptr;
	dcl     code		 fixed bin (35);
	dcl     err		 entry options (variable) variable;
	dcl     err_suppress_name	 entry options (variable) variable;
	dcl     first		 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     torf		 char (1500) varying;
	dcl     vargl		 fixed bin (21);
	dcl     vargp		 ptr;

/* based */

	dcl     afarg		 char (afargl) based (afargp);
	dcl     arg		 char (argl) based (argp);
	dcl     varg		 char (vargl) varying based (vargp);

/* builtin */

	dcl     null		 builtin;

/* internal static */

	dcl     command		 char (6) internal static options (constant) initial ("select");

/* external static */

	dcl     error_table_$not_act_fnc
				 fixed bin (35) external static;

/* entry */

	dcl     active_fnc_err_	 entry options (variable);
	dcl     active_fnc_err_$af_suppress_name
				 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     com_err_$suppress_name entry options (variable);
	dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$evaluate_active_string
				 entry (ptr, char (*), fixed bin, char (*) varying, fixed bin (35));
	dcl     ioa_$nnl		 entry options (variable);
	dcl     requote_string_	 entry (char (*)) returns (char (*));

%include cp_active_string_types;

/* program */

	call cu_$af_return_arg (nargs, vargp, vargl, code);
	if code = 0
	then do;
		afsw = "1"b;
		err = active_fnc_err_;
		err_suppress_name = active_fnc_err_$af_suppress_name;
		varg = "";
	     end;
	else if code = error_table_$not_act_fnc
	then do;
		afsw = "0"b;
		err = com_err_;
		err_suppress_name = com_err_$suppress_name;
	     end;
	else do;
		call com_err_ (code, command);
		return;
	     end;

	if nargs = 0
	then do;
		call err_suppress_name (0, command, "Usage: ^[[^]^a test_string {args}^[]^]", afsw, command, afsw);
		return;
	     end;

	call cu_$arg_ptr (1, afargp, afargl, code);
	if code ^= 0
	then do;
		call err (code, command, "Argument 1.");
		return;
	     end;

	first = "1"b;
	do i = 2 to nargs;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if code ^= 0
	     then do;
		     call print_before_error;
		     call err (code, command, "Argument ^d.", i);
		     return;
		end;

	     call cu_$evaluate_active_string (null, afarg || " " || requote_string_ (arg), NORMAL_ACTIVE_STRING, torf, code)
		;
	     if code ^= 0
	     then do;
		     call print_before_error;
		     call err (code, command, "[^a ^a]", afarg, requote_string_ (arg));
		     return;
		end;

	     if torf = "true"
	     then do;
		     if afsw
		     then do;
			     if ^first
			     then varg = varg || " ";

			     varg = varg || requote_string_ (arg);
			end;
		     else call ioa_$nnl ("^[^x^]^a", ^first, arg);

		     first = "0"b;
		end;
	     else if torf ^= "false"
	     then do;
		     call print_before_error;
		     call err (0, command, "Test result for argument ^d (^a) is neither ""true"" nor ""false"". ^a", i,
			requote_string_ (arg), requote_string_ ((torf)));
		     return;
		end;
	end;

	if ^afsw
	then call ioa_$nnl ("^/");

	return;

print_before_error:
     procedure;

	if ^afsw & ^first
	then call ioa_$nnl ("^/");
     end print_before_error;

     end select;
