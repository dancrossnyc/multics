/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(90-01-25,Vu), approve(90-01-25,MCR8153), audit(90-06-21,Huen),
     install(90-09-04,MR12.4-1032):
     The active function for equal_name will now return quoted string.
                                                   END HISTORY COMMENTS */


equal_name: enm: proc;
/* Command level interface to equal name generation.
   Updated to understand archive component equal names. 2/18/82 B. Margolin.
*/

dcl (Lequal,					/* length of equal name.			*/
     Lret,					/* length of af return string.		*/
     Lsource,					/* length of source name.			*/
     Nargs) fixed bin,				/* number of input arguments.			*/
    (Pequal,					/* ptr to equal name.			*/
     Pret,					/* ptr to af return string.			*/
     Psource) ptr,					/* ptr to source name.			*/
     Scommand bit (1) aligned,			/* on if invoked as a command.		*/
     Spath bit (1) aligned,				/* equal name is a pathname not entryname */
     code fixed bin (35),				/* error code.				*/
     equal_dir char (168),				/* dir part of input equal name.		*/
     equal_ent char (32),				/* ent part of input equal name.		*/
     equal_comp char (32),				/* comp part of input equal name.		*/
     error entry variable options (variable),
     get_arg entry (fixed bin, ptr, fixed bin, fixed bin (35)) variable,
     result_name char (32),				/* resulting name.				*/
     result_comp char (32),				/* resulting component.			*/
     output_name char (168),				/* name to output				*/
     source_dir char (168),				/* dir part of input source name.		*/
     source_comp char (32),				/* comp part of input source name.		*/
     source_ent char (32);				/* ent part of input source name.		*/



dcl  equal char (Lequal) based (Pequal),
     ret char (Lret) varying based (Pret),
     source char (Lsource) based (Psource);


dcl (length, rtrim, search, substr)
     builtin;


dcl (active_fnc_err_, active_fnc_err_$suppress_name,
     com_err_, com_err_$suppress_name)
     entry options (variable),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35)),
    (cu_$af_arg_ptr,
     cu_$arg_ptr) entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_count entry returns (fixed bin),
     expand_pathname_$component entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     pathname_$component_check entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     get_equal_name_$component entry (char(*), char(*), char(*), char(*), char(32), char(32), fixed bin(35)),
    (ioa_, ioa_$rsnnl) entry options (variable),
     requote_string_ entry (char (*)) returns (char (*));

/*  */

	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;
	     Scommand = "0"b;
	     error = active_fnc_err_;
	end;
	else do;
	     Scommand = "1"b;
	     error = com_err_;
	     Nargs = cu_$arg_count ();
	end;

	if Nargs ^= 2 then do;
	     if Scommand then call com_err_$suppress_name (0, "equal_name", "Usage:  equal_name path =name");
	     else call active_fnc_err_ (0, "equal_name", "Usage:  [equal_name path =name]");
	     return;
	end;
	call cu_$arg_ptr (1, Psource, Lsource, 0);
	call cu_$arg_ptr (2, Pequal, Lequal, 0);
	call expand_pathname_$component (source, source_dir, source_ent, source_comp, code);
	if code ^= 0 then do;
	     call error (code, "equal_name", "^a", source);
	     return;
	end;
	Spath = (search (equal, "<>") ^= 0);		/* Is it a full pathname?			*/
	call expand_pathname_$component (equal, equal_dir, equal_ent, equal_comp, code);
	if code ^= 0 then do;
	     call error (code, "equal_name", "^a", equal);
	     return;
	end;
	call get_equal_name_$component (source_ent, source_comp, equal_ent, equal_comp, result_name, result_comp, code);
	if code ^= 0 then do;
	     call error (code, "equal_name", "^a^[::^a^;^s^] applied to ^a^[::^a^;^s^]",
			equal_ent, (equal_comp ^= ""), equal_comp,
			source_ent, (source_comp ^= ""), source_comp);
	     return;
	end;
	if Spath then do;				/* Gave pathname, wants pathname */
	     call pathname_$component_check (equal_dir, result_name, result_comp, output_name, code);
	     if code ^= 0 then do;
		call error (code, "equal_name", "Creating the output pathname.");
		return;
	     end;
	end;
	/* Gave just an entryname */
	else do;
	     if result_comp = "" then output_name = result_name;	/* Not an archive */
	     else output_name = substr (result_name, 1, length (rtrim (result_name)) - 8) || "::" || result_comp; /* remove ".archive" */
	end;

	if Scommand then
	     call ioa_ ("^a", output_name);
	else ret = requote_string_ (rtrim (output_name));
	return;

     end equal_name;
