/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* This module implements the following commands:

      delete_message (dlm) - deletes interactive messages
      print_messages (pm) - prints interactive messages
*/

/****^  HISTORY COMMENTS:
  1) change(84-06-04,Lippard), approve(), audit(), install():
      Written by Jim Lippard.
  2) change(84-11-08,Lippard), approve(), audit(), install():
      Modified to call set_seen_switch even when -call is used.
  3) change(84-11-16,Lippard), approve(), audit(), install():
      Modified to improve message printed when no messages are selected.
  4) change(84-11-23,Lippard), approve(), audit(), install():
      Modified to complain for each message not printed/deleted (except
      in ranges).
  5) change(85-01-11,Lippard), approve(), audit(), install():
      Modified to use new calling sequences for message_facility_$(read_message
      delete_message print_message set_seen_switch) and to complain about
      negative message numbers.
  6) change(85-01-23,Lippard), approve(85-11-18,MCR7298),
     audit(86-01-10,Spitzer), install(86-01-20,MR12.0-1006):
      Modified to print "You have no messages" on user_output and make dlm say
      when all messages have been deleted (when -message_status is specified).
  7) change(85-08-15,Lippard), approve(85-11-18,MCR7298),
     audit(86-01-10,Spitzer), install(86-01-20,MR12.0-1006):
      Modified to ignore case for keywords and to print a better error message
      for "dlm -a" when there are only unseen messages.
  8) change(87-01-29,Lippard), approve(87-03-18,MECR0001),
     audit(87-03-12,Fawcett), install(87-03-19,MR12.1-1002):
      Modified to strip control characters out of message comment field.
  9) change(87-05-08,Lippard), approve(87-04-20,MCR7669),
     audit(87-05-11,Fawcett), install(87-05-20,MR12.1-1032):
      Formal installation to close out MECR0001.
 10) change(87-08-25,Lippard), approve(87-08-24,MCR7761),
     audit(87-09-25,Dickson), install(87-11-30,MR12.2-1006):
     Remove -verbose control argument (original name of -message_status).
                                                   END HISTORY COMMENTS */

delete_message: dlm: procedure options (variable);
	dcl     ME		 char (14);
	dcl     VERSION		 char (3) internal static options (constant) init ("1.4");

	dcl     aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);

	dcl     canonicalize_          entry (ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));

	dcl     com_err_		 entry () options (variable);

	dcl     convert_access_class_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35));

	dcl     convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

	dcl     cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));

	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     get_authorization_	 entry () returns (bit (72) aligned) reducible;

	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);

	dcl     iox_$user_output	 ptr ext static;

	dcl     mailbox_$create	 entry (char (*), char (*), fixed bin (35));
	dcl     mailbox_$get_mode_file entry (char (*), char (*), bit (36) aligned, fixed bin (35));

	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     message_facility_$delete_message entry (ptr, bit (72) aligned, fixed bin (35));
	dcl     message_facility_$get_last_message_info entry (ptr, ptr, fixed bin (35));
	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$print_message entry (ptr, ptr, bit (72) aligned, ptr, fixed bin (35));
	dcl     message_facility_$read_message entry (ptr, bit (72) aligned, ptr, ptr, fixed bin (35));
	dcl     message_facility_$set_seen_switch entry (ptr, bit (72) aligned, bit (*), fixed bin (35));

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     cleanup		 condition;

	dcl     after_sw		 bit (1) aligned;
	dcl     after_date_time	 fixed bin (71);

	dcl     all		 bit (1) aligned;

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     authorization	 bit (72) aligned;
	dcl     auth_string		 char (170);

	dcl     before_sw		 bit (1) aligned;
	dcl     before_date_time	 fixed bin (71);

	dcl     brief		 bit (1) aligned;

	dcl     call_string		 char (512);

	dcl     command_line	 char (2000);

	dcl     comment		 bit (1) aligned;
	dcl     comment_string	 char (32);

	dcl     date_time		 fixed bin (71);

	dcl     delete		 bit (1) aligned;

	dcl     default		 bit (1) aligned;

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     exclude		 bit (1) aligned;
	dcl     exclude_string	 char (256);

	dcl     extended_mode	 bit (36) aligned;

	dcl     force		 bit (1) aligned;

	dcl     from		 bit (1) aligned;
	dcl     from_string		 char (32);

	dcl     found		 bit (1) aligned;

	dcl     actual_hold_flags	 bit (3);

	dcl     1 hold_flags	 unaligned based (hold_flags_ptr),
		2 delete_unheld	 bit (1),
		2 hold_messages	 bit (1),
		2 hold_notifications bit (1);

	dcl     hold_flags_ptr	 ptr;

	dcl     hold_messages	 bit (1) aligned;
	dcl     no_hold_messages	 bit (1) aligned;
	dcl     hold_notifications	 bit (1) aligned;
	dcl     no_hold_notifications	 bit (1) aligned;

	dcl     (idx, jdx)		 fixed bin;

	dcl     last		 bit (1) aligned;

	dcl     last_msg_time	 char (24);
	dcl     last_sender		 char (120);
	dcl     last_time		 fixed bin (71);

	dcl     1 local_lmi		 aligned like last_message_info;
	dcl     1 local_mi		 aligned like message_info;
	dcl     1 local_pcao	 aligned like parse_ca_options;

	dcl     match		 bit (1) aligned;
	dcl     match_string	 char (256);

	dcl     message_sender	 char (120);

	dcl     msg_date_time	 char (24);

	dcl     msgf_mbx_ptr	 ptr;

	dcl     1 msg_spec		 (50) aligned,
		2 start		 fixed bin,
		2 start_spec	 bit (1) aligned,
		2 end		 fixed bin,
		2 end_spec	 bit (1) aligned,
		2 found		 bit (1) aligned,
		2 arg		 char (256);

	dcl     n_msg_specs		 fixed bin;

	dcl     messages		 bit (1) aligned;
	dcl     no_messages		 bit (1) aligned;
	dcl     notifications	 bit (1) aligned;
	dcl     no_notifications	 bit (1) aligned;

	dcl     message_status	 bit (1) aligned;

	dcl     (start, end)	 fixed bin;

	dcl     new		 bit (1) aligned;

	dcl     own		 bit (1) aligned;

	dcl     path		 bit (1) aligned;

	dcl     pathname		 char (256);

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     prefix_string	 char (32) varying;

	dcl     print		 bit (1) aligned;

	dcl     sci_ptr		 ptr;

	dcl     short		 bit (1) aligned;
	dcl     short_format	 bit (1) aligned;
	dcl     short_prefix	 bit (1) aligned;

	dcl     something_done	 bit (1) aligned;

	dcl     sys_area		 area based (sys_area_ptr);
	dcl     sys_area_ptr	 ptr;

	dcl     tag		 char (10) varying;

	dcl     (addr, after, before, collate, convert, fixed, hbound, index,
	        length, null, rtrim, string, substr, translate) builtin;

	dcl     code		 fixed bin (35);

	dcl     error_table_$inconsistent fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$no_message fixed bin (35) ext static;

	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);

	dcl     ALPHABET		 char (256) init ((8)" " || "	" || (4)" " || "" || (16)" "
				 || substr (collate (), 33)); /* space, BSHT, space, RRSBRS, space, alphanumerics */
	dcl     FIVE_MINUTES	 fixed bin (71) internal static options (constant) init (300000000);
	dcl     FIRST_MESSAGE	 fixed bin internal static options (constant) init (-2);
	dcl     LAST_MESSAGE	 fixed bin internal static options (constant) init (-1);
	dcl     NLSPHT		 char (3) internal static options (constant) init ("
 	");
	dcl     BS		 char (1) internal static options (constant) init ("");
	dcl     UPPERCASE		 char (26) internal static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	dcl     LOWERCASE		 char (26) internal static options (constant) init ("abcdefghijklmnopqrstuvwxyz");

	ME = "delete_message";
	delete = TRUE;
	print = FALSE;
	go to COMMON;

print_messages: pm: entry;
	ME = "print_messages";
	delete = FALSE;
	print = TRUE;

COMMON:

/* initialize variables */
	after_sw, all, before_sw, brief, comment, default, exclude, force, from, last, match, new, path = FALSE;

/* The following assignments are separate to avoid a PL/I bug,
   see TR phx17760 */
	message_status = FALSE;
	messages = FALSE;
	no_messages = FALSE;
	notifications = FALSE;
	no_notifications = FALSE;
	hold_messages = FALSE;
	no_hold_messages = FALSE;
	hold_notifications = FALSE;
	no_hold_notifications = FALSE;
	short_format = TRUE;
	last_msg_time, last_sender = "";
	call_string, from_string, match_string, exclude_string = "";
	last_time = 0;
	n_msg_specs = 0;
	mail_format_ptr, msg_array_ptr, sci_ptr = null ();
	sys_area_ptr = get_system_free_area_ ();

	on cleanup call cleanup_dlm;

/* create ssu_ invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null (), abort_dlm, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	call ssu_$arg_count (sci_ptr, arg_count);

	do idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
	     if arg = "-after" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A date/time must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if after_sw then call ssu_$abort_line (sci_ptr, (0),
			     "Only one -after date/time may be specified. ^a", arg);

		     call convert_date_to_binary_ (arg, after_date_time, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     after_sw = TRUE;
		end;
	     else if arg = "-all" | arg = "-a" then all = TRUE;
	     else if arg = "-before" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A date/time must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if before_sw then call ssu_$abort_line (sci_ptr, (0),
			     "Only one -before date/time may be specified. ^a", arg);

		     call convert_date_to_binary_ (arg, before_date_time, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     before_sw = TRUE;
		end;
	     else if arg = "-brief" | arg = "-bf" then brief = TRUE;
	     else if arg = "-long" | arg = "-lg" then do;
		     if print then short_format = FALSE;
		     brief = FALSE;
		end;
	     else if (arg = "-short" | arg = "-sh") then do;
		     if print then short_format = TRUE;
		     else message_status = FALSE;
		end;
	     else if arg = "-message_status" | arg = "-msgst" then message_status = TRUE;
	     else if arg = "-no_message_status" | arg = "-nmsgst" then message_status = FALSE;
	     else if arg = "-call" & print then do;
		     idx = idx + 1;

		     if idx > arg_count then call_string = "";

		     else do;
			     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
			     if index (arg, "-") = 1 then do;
				     call_string = "";
				     idx = idx - 1;
				end;

			     else do;
				     if arg_len > length (call_string) then
					call ssu_$abort_line (sci_ptr, (0), "Call string may not be longer than ^d characters. ^a", length (call_string), arg);
				     call_string = arg;
				end;
			end;
		end;
	     else if arg = "-comment" | arg = "-com" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A comment string must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if comment then call ssu_$abort_line (sci_ptr, (0),
			     "Only one comment string may be supplied. ^a", arg);

		     if arg_len > length (comment_string) then
			call ssu_$abort_line (sci_ptr, (0), "Comment string may not be longer than ^d characters. ^a", length (comment_string), arg);

		     comment_string = arg;
		     comment = TRUE;
		end;
	     else if arg = "-exclude" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "An exclude string must be specified after ""a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if exclude then call ssu_$abort_line (sci_ptr, (0),
			     "Only one exclude string may be specified. ^a", arg);

		     if arg_len > length (exclude_string) then
			call ssu_$abort_line (sci_ptr, (0), "Exclude string may not be longer than ^d characters. ^a", length (exclude_string), arg);

		     exclude_string = arg;
		     exclude = TRUE;
		end;
	     else if (arg = "-force" | arg = "-fc") & delete then force = TRUE;
	     else if (arg = "-no_force" | arg = "-nfc") & delete then force = FALSE;
	     else if arg = "-from" | arg = "-fm" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A from string must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if from then call ssu_$abort_line (sci_ptr, (0),
			     "Only one from string may be specified. ^a", arg);

		     if arg_len > length (from_string) then
			call ssu_$abort_line (sci_ptr, (0), "From string may not be longer than ^d characters. ^a", length (from_string), arg);

		     from_string = arg;
		     from = TRUE;
		end;
	     else if (arg = "-hold_messages" | arg = "-hdmsg") & print then do;
		     hold_messages = TRUE;
		     no_hold_messages = FALSE;
		end;
	     else if (arg = "-no_hold_messages" | arg = "-nhdmsg") & print then do;
		     hold_messages = FALSE;
		     no_hold_messages = TRUE;
		end;
	     else if (arg = "-hold_notifications" | arg = "-hdnt") & print then do;
		     hold_notifications = TRUE;
		     no_hold_notifications = FALSE;
		end;
	     else if (arg = "-no_hold_notifications" | arg = "-nhdnt") & print then do;
		     hold_notifications = FALSE;
		     no_hold_notifications = TRUE;
		end;
	     else if (arg = "-last" | arg = "-lt") & print then last = TRUE;
	     else if arg = "-match" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A match string must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if match then call ssu_$abort_line (sci_ptr, (0),
			     "Only one match string may be specified. ^a", arg);

		     if arg_len > length (match_string) then
			call ssu_$abort_line (sci_ptr, (0), "Match string may not be longer than ^d characters. ^a", length (match_string), arg);

		     match_string = arg;
		     match = TRUE;
		end;
	     else if arg = "-messages" | arg = "-msg" then do;
		     messages = TRUE;
		     no_messages = FALSE;
		end;
	     else if arg = "-no_messages" | arg = "-nmsg" then do;
		     messages = FALSE;
		     no_messages = TRUE;
		end;
	     else if arg = "-notifications" | arg = "-nt" then do;
		     notifications = TRUE;
		     no_notifications = FALSE;
		end;
	     else if arg = "-no_notifications" | arg = "-nnt" then do;
		     notifications = FALSE;
		     no_notifications = TRUE;
		end;
	     else if arg = "-new" & print then new = TRUE;
	     else if arg = "-pathname" | arg = "-pn" then do;
		     idx = idx + 1;

		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A pathname must be specified after ""^a"".", arg);

		     if path then call ssu_$abort_line (sci_ptr, (0),
			     "Usage: ^[dlm^;pm^] ^[{^]msg_specs^[}^] {mbx_specification} {-control_args}", delete, print, print);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     path = TRUE;
		end;
	     else do;				/* msg spec or mbx spec */
		     start = get_msg_spec (arg, code);
		     if code = 0 then end = start;
		     else if index (arg, ":") ^= 0 then do;
			     start = get_msg_spec (before (arg, ":"), code);
			     if code = 0 then end = get_msg_spec (after (arg, ":"), code);
			     if code ^= 0 then
				call ssu_$abort_line (sci_ptr, (0), "Invalid message range. ^a", arg);
			end;
		     if code = 0 then do;
			     n_msg_specs = n_msg_specs + 1;
			     if n_msg_specs > hbound (msg_spec, 1) then call ssu_$abort_line (sci_ptr, (0),
				     "Too many message specifiers given, maximum of ^d.", hbound (msg_spec, 1));
			     msg_spec.start (n_msg_specs) = start;
			     if msg_spec.start (n_msg_specs) < 0 then msg_spec.start_spec (n_msg_specs) = TRUE;
			     else msg_spec.start_spec (n_msg_specs) = FALSE;
			     msg_spec.end (n_msg_specs) = end;
			     if msg_spec.end (n_msg_specs) < 0 then msg_spec.end_spec (n_msg_specs) = TRUE;
			     else msg_spec.end_spec (n_msg_specs) = FALSE;
			     msg_spec.found (n_msg_specs) = FALSE;
			     msg_spec.arg (n_msg_specs) = arg;
			end;
		     else if translate (arg, LOWERCASE, UPPERCASE) = "all" | translate (arg, LOWERCASE, UPPERCASE) = "a" then all = TRUE;
		     else do;			/* mbx specification */

/* let mlsys_utils_ have at it */
			     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
			     local_pcao.logbox_creation_mode = DONT_CREATE_MAILBOX;
			     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
			     local_pcao.abort_on_errors = TRUE;
			     local_pcao.validate_addresses = FALSE;
			     local_pcao.mbz = ""b;

			     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (local_pcao),
				dname, ename, code);

			     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

			     idx = idx - 1;

			     if path then call ssu_$abort_line (sci_ptr, (0),
				     "Usage: ^[dlm^;pm^] ^[{^]msg_specs^[}^] {mbx_specification} {-control_args}", delete, print, print);

			     path = TRUE;
			end;			/* mbx spec */
		end;				/* msg spec or mbx spec */
	end;					/* arg loop */

	if no_messages & no_notifications then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"-no_messages and -no_notifications");
	if last & (after_sw | before_sw | comment | from | match | exclude | messages | notifications
	     | no_messages | no_notifications | hold_messages | hold_notifications
	     | no_hold_messages | no_hold_notifications | n_msg_specs ^= 0 | all | new) then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "No message selection arguments may be given with -last.");

	if no_messages then notifications = TRUE;
	else if no_notifications then messages = TRUE;

	if n_msg_specs = 0 then do;
		if delete & (after_sw | before_sw | comment | from | match | exclude | messages | notifications) then
		     all = TRUE;
		if delete & ^all then call ssu_$abort_line (sci_ptr, (0),
			"Usage: dlm msg_specs {mbx_specification} {-control_args}");
		if print then all = TRUE;
		n_msg_specs = n_msg_specs + 1;
		msg_spec.start (n_msg_specs) = get_msg_spec ("first", code);
		msg_spec.start_spec (n_msg_specs) = FALSE;
		msg_spec.end (n_msg_specs) = get_msg_spec ("last", code);
		msg_spec.end_spec (n_msg_specs) = FALSE;
		msg_spec.found (n_msg_specs) = FALSE;
	     end;

	if messages & notifications then messages, notifications = FALSE;

/* determine which messages are to be held */
	actual_hold_flags = ""b;
	hold_flags_ptr = addr (actual_hold_flags);
	if hold_messages then hold_flags.hold_messages = TRUE;
	else if no_hold_messages then hold_flags.hold_messages = FALSE;
	if hold_notifications then hold_flags.hold_notifications = TRUE;
	else if no_hold_notifications then hold_flags.hold_notifications = FALSE;
	if ^(hold_messages | no_hold_messages | hold_notifications | no_hold_notifications) then actual_hold_flags = DELETE_UNHELD;

	if ^path then do;
		call user_info_$whoami (person, project, "");
		dname = ">udd>" || rtrim (project) || ">" || person;
		ename = rtrim (person) || ".mbx";
		default = TRUE;
	     end;

/* get mbx ptr */
	call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);

	if code = error_table_$noentry & default & print then do;
		call mailbox_$create (dname, ename, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
			"Creating default mailbox ^a.", pathname_ (dname, ename));

		call ioa_ ("Creating default mailbox ^a.", pathname_ (dname, ename));

		call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);
	     end;

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

/* get prefix */
	call message_facility_$get_prefix (msgf_mbx_ptr, prefix_string, short_prefix, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

/* get mailbox mode */
	call mailbox_$get_mode_file (dname, ename, extended_mode, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	own = substr (extended_mode, 3, 1);

/* get msg array ptr */
	call message_facility_$get_msg_array_ptr (msgf_mbx_ptr, sys_area_ptr, msg_array_ptr, n_messages, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

/* process messages */

	do idx = 1 to n_msg_specs;
	     if msg_spec.start_spec (idx) then
		if msg_spec.start (idx) = FIRST_MESSAGE then msg_spec.start (idx) = get_msg_spec ("first", code);
		else msg_spec.start (idx) = get_msg_spec ("last", code);
	     if msg_spec.end_spec (idx) then
		if msg_spec.end (idx) = FIRST_MESSAGE then msg_spec.end (idx) = get_msg_spec ("first", code);
		else msg_spec.end (idx) = get_msg_spec ("last", code);
	     if msg_spec.start (idx) > msg_spec.end (idx) then call ssu_$abort_line (sci_ptr, (0),
		     "Invalid message range. ^a", msg_spec.arg (idx));
	end;


/* print header */
	if n_messages ^= 0 & print & ^default then call ioa_ ("^[There ^[are^;is^]^;You have^s^] ^d message^[s^] in ^a.^/",
		own, (n_messages ^= 1), n_messages, (n_messages ^= 1), pathname_ (dname, ename));
	else if n_messages = 0 & ^brief & ^last then do;
		call ioa_ ("^[There are^;You have^] no interactive messages^[ in ^a^].",
		     (own & ^default), ^default, pathname_ (dname, ename));
		go to MAIN_RETURN;
	     end;

/* handle -last */
	if last then do;
		call print_message ((0), (""b));
		go to MAIN_RETURN;
	     end;

	something_done = FALSE;

	local_mi.version = MESSAGE_INFO_VERSION_1;

	do idx = 1 to n_messages;
	     if msg_array.message_id (idx) ^= ""b then do;
		     call message_facility_$read_message (msgf_mbx_ptr, msg_array.message_id (idx), sys_area_ptr, addr (local_mi), code);
		     if code = error_table_$no_message then ;
		     else if code ^= 0 then call ssu_$print_message (sci_ptr, code,
			     "While reading message ^d^[ from mailbox ^a^].", msg_array.message_number (idx), ^default, pathname_ (dname, ename));
		     else do;
			     mail_format_ptr = local_mi.message_ptr;
			     found = FALSE;
			     if ((delete & msg_array.printed (idx)) | print | force)
				& (^new | ^msg_array.printed (idx))
				& (^after_sw
				| (fixed (substr (msg_array.message_id (idx), 19, 54), 71) > after_date_time))
				& (^before_sw
				| (fixed (substr (msg_array.message_id (idx), 19, 54), 71) < before_date_time))
				& (^comment | (rtrim (canon (rtrim (mail_format.sent_from), length (rtrim (mail_format.sent_from)))) = comment_string))
				& (^from
				| (from_match (substr (local_mi.sender, 1, length (rtrim (local_mi.sender)) - 2), from_string)))
				& (^messages | (messages & ^mail_format.notify))
				& (^notifications | (notifications & mail_format.notify))
				& (^match | (index (mail_format.text, rtrim (match_string)) ^= 0))
				& (^exclude
				| (index (rtrim (canon (rtrim (mail_format.text, NLSPHT), length (rtrim (mail_format.text, NLSPHT)))), rtrim (exclude_string)) = 0)) then do;
				     do jdx = 1 to n_msg_specs while (^found);
					if (msg_array.message_number (idx) >= msg_spec.start (jdx)
					     & msg_array.message_number (idx) <= msg_spec.end (jdx))
					     | ((msg_array.message_number (idx) = 0 & print & something_done) | all) then do;
						if print then call print_message (idx, msg_array.message_id (idx));
						else call message_facility_$delete_message (msgf_mbx_ptr, msg_array.message_id (idx),
							code);

						if code ^= 0 then call ssu_$print_message (sci_ptr, code,
							"While ^[deleting^;printing^] message ^d^[ in mailbox ^a^].", delete, msg_array.message_number (idx), ^default, pathname_ (dname, ename));
						else something_done = TRUE;
						msg_spec.found (jdx) = TRUE;
						found = TRUE;
					     end;
				     end;		/* jdx loop */
				end;		/* message meets specifications */
			     if mail_format_ptr ^= null () then do;
				     free mail_format in (sys_area);
				     mail_format_ptr = null ();
				end;
			end;			/* message read */
		end;				/* non-notification */
	end;					/* idx loop */

	if ^something_done then
	     if ^brief then call ssu_$print_message (sci_ptr, (0),
		     "No ^[seen ^]messages ^[to delete.^;were found that matched the selection criteria.^]", delete & ^force, delete & ^force & all);
	     else ;
	else do idx = 1 to n_msg_specs;
		if ^msg_spec.found (idx) then call ssu_$print_message (sci_ptr, (0), "No ^[seen ^]message^[s in range^] ^a found.", delete & ^force, (index (msg_spec.arg (idx), ":") ^= 0), msg_spec.arg (idx));
	     end;

	if delete & message_status then do;
		if msg_array_ptr ^= null () then free msg_array in (sys_area);

		call message_facility_$get_msg_array_ptr (msgf_mbx_ptr, sys_area_ptr, msg_array_ptr, n_messages, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "While getting message array pointer.");

		if n_messages = 0 then call ioa_ ("All messages have been deleted.");
	     end;

MAIN_RETURN:
	call cleanup_dlm;
RETURN_FROM_DLM:
	return;


/* This procedure removes control characters (except backspace, tab,
   red ribbon shift, and black ribbon shift) and canonicalizes strings
   to prevent backspacing past the front of the string. */
canon: procedure (P_string, P_string_len) returns (char (*));
	dcl     P_string		 char (*) parm;
	dcl     P_string_len	 fixed bin (21) parm;
	dcl     output_string	 char (P_string_len);

	P_string = translate (P_string, ALPHABET);
	if index (P_string, BS) ^= 0 then do;
		output_string = "";
		call canonicalize_ (addr (P_string), length (P_string), addr (output_string), P_string_len, (0));
		return (output_string);
	     end;
	else return (P_string);
     end canon;

/* This procedure parses message specifiers. */
get_msg_spec: procedure (P_arg, P_code) returns (fixed bin);
	dcl     P_arg		 char (*) parm;
	dcl     P_code		 fixed bin (35) parm;
	dcl     idx		 fixed bin;
	dcl     msg_spec               char (5);
	dcl     return_value	 fixed bin;
	dcl     (conversion, size)	 condition;

	P_code = 0;

	msg_spec = translate (P_arg, LOWERCASE, UPPERCASE);

	if msg_spec = "first" | msg_spec = "f" then do;
		if msg_array_ptr = null () | n_messages = 0 then return (FIRST_MESSAGE);
		do idx = 1 to n_messages;
		     if msg_array.message_number (idx) ^= 0 then return (msg_array.message_number (idx));
		end;
		return_value = 1;
	     end;
	else if msg_spec = "last" | msg_spec = "l" then do;
		if msg_array_ptr = null () | n_messages = 0 then return (LAST_MESSAGE);
		do idx = n_messages to 1 by -1;
		     if msg_array.message_number (idx) ^= 0 then return (msg_array.message_number (idx));
		end;
		return_value = n_messages;
	     end;
	else do;
		if P_arg = "" then go to BAD_INTEGER;
		on conversion, size go to BAD_INTEGER;
		return_value = convert (return_value, P_arg);
		revert conversion, size;
		if return_value < 1 then go to BAD_INTEGER;
	     end;

	return (return_value);

BAD_INTEGER:
	P_code = 1;
	return ((0));
     end get_msg_spec;

/* This procedure compares a user id (person.project.tag) with a from string
   (Person, .Project, or Person.Project) */
from_match: procedure (P_sender, P_from_string) returns (bit (1) aligned);
	dcl     (P_sender, P_from_string) char (*) parm;
	dcl     person		 char (22);
	dcl     project		 char (9);

	person = before (P_sender, ".");
	project = after (P_sender, ".");

	if substr (P_from_string, 1, 1) = "." then /* .Project */
	     if rtrim (P_from_string) = "." || rtrim (project) then return (TRUE);
	     else ;
	else if index (P_from_string, ".") ^= 0 then /* Person.Project */
	     if rtrim (P_from_string) = rtrim (person) || "." || rtrim (project) then return (TRUE);
	     else ;
	else /* Person */
	     if rtrim (P_from_string) = rtrim (person) then return (TRUE);
	return (FALSE);
     end from_match;

/* This procedure prints a message.  This same code is also present in
   accept_messages (-print) and message_facility_ (process_message). */
print_message: procedure (P_message_index, P_message_id);
	dcl     P_message_index	 fixed bin parm;
	dcl     P_message_id	 bit (72) aligned parm;
	dcl     last_msg		 bit (1) aligned;

	string (msg_print_flags) = ""b;

	if P_message_index = 0 then do;		/* last message */
		msg_print_flags.print_last_message = TRUE;
		last_msg = TRUE;
		local_lmi.version = LAST_MESSAGE_INFO_VERSION_1;
		call message_facility_$get_last_message_info (msgf_mbx_ptr, addr (local_lmi), code);
		if code ^= 0 then return;

		if local_lmi.last_message_id = ""b then call ssu_$abort_line (sci_ptr, (0), "No last message.");

		message_info_ptr = local_lmi.last_message_ptr;
		local_mi = message_info;
	     end;

	else do;
		last_msg = FALSE;
		on cleanup call cleanup_pm;
	     end;

	mail_format_ptr = local_mi.message_ptr;

	if last_msg then date_time = fixed (substr (local_lmi.last_message_id, 19, 54), 71);
	else date_time = fixed (substr (P_message_id, 19, 54), 71);
	call date_time_ (date_time, msg_date_time);

/* create message sender string */
	if mail_format.sent_from = before (local_mi.sender, ".") | rtrim (mail_format.sent_from) = "" then
	     message_sender = substr (local_mi.sender, 1, length (rtrim (local_mi.sender)) - 2);
	else message_sender = substr (local_mi.sender, 1, length (rtrim (local_mi.sender)) - 2)
		|| " (" || rtrim (canon (rtrim (mail_format.sent_from), length (rtrim (mail_format.sent_from)))) || ")";
	authorization = get_authorization_ ();
	if ^aim_check_$greater_or_equal (local_mi.authorization, authorization) then do;
		call convert_access_class_$to_string_short (local_mi.authorization, auth_string, code);
		if auth_string = "" then auth_string = "system_low";
		message_sender = rtrim (message_sender) || " at " || auth_string;
	     end;

	if call_string ^= "" then do;
		if last_msg then call ioa_$rsnnl (" ^d ", tag, length (tag), local_lmi.last_message_number);
		else call ioa_$rsnnl (" ^d ", tag, length (tag), msg_array.message_number (P_message_index));
		if default then pathname = "";
		else pathname = requote_string_ (pathname_ (dname, ename));
		command_line = rtrim (call_string) || " " || tag || requote_string_ (rtrim (message_sender))
		     || " " || requote_string_ (rtrim (date_time_$format ("date_time", date_time, "", ""))) || " "
		     || requote_string_ (rtrim (canon (rtrim (mail_format.text, NLSPHT), length (rtrim (mail_format.text, NLSPHT))))) || " " || pathname;
		call cu_$cp (addr (command_line), length (rtrim (command_line)), (0));
	     end;

	else do;
		if message_sender = last_sender then short = TRUE;
		else short = FALSE;

/* print prefix, it may contain ioa_ controls */
		if ^short | short_prefix then msg_print_flags.print_prefix = TRUE;

/* if not default mailbox, prefix with mailbox entry name */
		if ^default then msg_print_flags.print_ename = TRUE;

		if ^short_format | ^short then
		     msg_print_flags.print_sender = TRUE;

		if ^short_format | substr (msg_date_time, 1, 8) ^= last_msg_time then
		     msg_print_flags.print_date_and_time = TRUE;
		else if date_time - last_time > FIVE_MINUTES then
		     msg_print_flags.print_time = TRUE;

		last_sender = message_sender;
		last_time = date_time;
		last_msg_time = substr (msg_date_time, 1, 8);

		call message_facility_$print_message (msgf_mbx_ptr, iox_$user_output, P_message_id, addr (msg_print_flags), code);
	     end;

	if ^last_msg then do;
		call message_facility_$set_seen_switch (msgf_mbx_ptr, P_message_id, actual_hold_flags, (0));
		if mail_format_ptr ^= null () then do;
			free mail_format in (sys_area);
			mail_format_ptr = null ();
		     end;
	     end;
     end print_message;


cleanup_dlm: proc;
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	if msg_array_ptr ^= null () then free msg_array in (sys_area);
	return;
     end cleanup_dlm;

abort_dlm: proc;
	call cleanup_dlm;
	go to RETURN_FROM_DLM;
     end abort_dlm;

cleanup_pm: proc;
	if mail_format_ptr ^= null () then free mail_format in (sys_area);
     end cleanup_pm;

%page;
%include last_message_info;
%page;
%include mail_format;
%page;
%include message_info;
%page;
%include mlsys_parse_ca_options;
%page;
%include msg_array;
%page;
%include msg_print_flags;

     end delete_message;
