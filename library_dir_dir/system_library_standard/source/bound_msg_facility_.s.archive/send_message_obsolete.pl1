/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* This module implements the following obsolete message facility commands:

      send_message_acknowledge (sma)
      send_message_express (smx)
      send_message_silent (sms)

   and the following subroutines:

      send_message_
      send_message_acknowledge_ (send_message_$acknowledge)
      send_message_express_ (send_message_$express)
      send_message_$notify_mail
*/
/* Written 12/16/83 by Jim Lippard */
send_message_obsolete: procedure options (variable);
	return;

	dcl     ME		 char (24);

	dcl     (active_fnc_err_, com_err_, com_err_$suppress_name) entry () options (variable);

	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     destination_arg	 char (168);

	dcl     ioa_		 entry () options (variable);

	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$user_input	 ptr ext static;

	dcl     message_facility_$send_message entry (char (*), char (*), char (*), ptr, fixed bin (35));

	dcl     chars_read		 fixed bin (21);
	dcl     old_message_ptr	 ptr;
	dcl     old_message_len	 fixed bin (21);
	dcl     message_ptr		 ptr;
	dcl     message_len		 fixed bin (21);
	dcl     message_space	 char (1600) aligned;
	dcl     message		 char (message_len) based (message_ptr);
	dcl     start_len		 fixed bin (21);

	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     area_ptr		 ptr;
	dcl     area		 area based (area_ptr);

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     idx		 fixed bin;

	dcl     (P_person, P_project, P_message) char (*) parameter;
	dcl     P_code		 fixed bin (35) parameter;

	dcl     brief		 bit (1) aligned;
	dcl     destination		 bit (1) aligned;
	dcl     message_allocated	 bit (1) aligned;
	dcl     pathname		 bit (1) aligned;

	dcl     (addr, after, before, length, null, rtrim, substr) builtin;

	dcl     code		 fixed bin (35);

	dcl     (error_table_$long_record,
	        error_table_$messages_deferred,
	        error_table_$messages_off,
	        error_table_$no_append,
	        error_table_$no_dir,
	        error_table_$noentry,
	        error_table_$no_info,
	        error_table_$wakeup_denied) ext fixed bin (35);

	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);
	dcl     DOT_NL		 char (2) aligned internal static options (constant) init (".
");
	dcl     NL		 char (1) aligned internal static options (constant) init ("
");

send_message_acknowledge: sma: entry;
	ME = "send_message_acknowledge";
	call smo_initialize ();
	send_mail_info.acknowledge = TRUE;
	call smo_command ();
	return;

send_message_express: smx: entry;
	ME = "send_message_express";
	call smo_initialize ();
	send_mail_info.always_add = FALSE;
	call smo_command ();
	return;

send_message_silent: sms: entry;
	ME = "send_message_silent";
	call smo_initialize ();
	brief = TRUE;
	call smo_command ();
	return;

send_message_: entry (P_person, P_project, P_message, P_code);
	call smo_initialize ();
	call smo_subroutine ();
	return;

send_message_acknowledge_: acknowledge: entry (P_person, P_project, P_message, P_code);
	call smo_initialize ();
	send_mail_info.acknowledge = TRUE;
	call smo_subroutine ();
	return;

send_message_express_: express: entry (P_person, P_project, P_message, P_code);
	call smo_initialize ();
	send_mail_info.always_add = FALSE;
	call smo_subroutine ();
	return;

notify_mail: entry (P_person, P_project, P_code);
	call smo_initialize ();
	send_mail_info.notify = TRUE;
	send_mail_info.always_add = FALSE;
	call smo_subroutine ();
	return;

smo_initialize: procedure ();
						/* initialize variables */
	brief = FALSE;
	area_ptr = null ();

	call user_info_$whoami (person, "", "");

	send_mail_info.version = send_mail_info_version_2;
	send_mail_info.sent_from = person;
	send_mail_info.wakeup = TRUE;
	send_mail_info.mbz1 = ""b;
	send_mail_info.always_add = TRUE;
	send_mail_info.never_add = FALSE;
	send_mail_info.notify = FALSE;
	send_mail_info.acknowledge = FALSE;
	send_mail_info.mbz = ""b;
     end smo_initialize;

smo_command: procedure ();
						/* procedure for commands */
	destination, message_allocated = FALSE;

/* process arguments */
	call cu_$arg_count (arg_count, code);

	if code ^= 0 then do;
		call active_fnc_err_ (code, ME);
		return;
	     end;

	do idx = 1 to arg_count while (^destination);
	     call cu_$arg_ptr (idx, arg_ptr, arg_len, (0));
	     if arg = "-pathname" | arg = "-pn" then do;	/* pathname destination */
		     idx = idx + 1;

		     if idx > arg_count then do;
			     call com_err_ ((0), ME, "No value specified for -pathname.");
			     return;
			end;

		     call cu_$arg_ptr (idx, arg_ptr, arg_len, (0));
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then do;
			     call com_err_ (code, ME, "^a", arg);
			     return;
			end;

		     destination_arg = pathname_ (dname, ename);
		     destination, pathname = TRUE;
		end;
	     else do;				/* person.project or person project */
		     person = before (arg, ".");
		     project = after (arg, ".");
		     if project = "" then do;		/* person project or project is missing */
			     idx = idx + 1;
			     if idx <= arg_count then do;
				     person = arg;
				     call cu_$arg_ptr (idx, arg_ptr, arg_len, (0));
				     project = arg;
				end;
			     else do;
				     call com_err_$suppress_name ((0), ME, "Usage:  ^a person.project {message}
or:^5x^a -pathname path {message}", ME, ME);
				     return;
				end;
			end;
		     dname = ">udd>" || rtrim (project) || ">" || person;
		     ename = rtrim (person) || ".mbx";
		     destination_arg = rtrim (person) || "." || project;
		     destination = TRUE;
		     pathname = FALSE;
		end;
	end;

	if ^destination then do;
		call com_err_$suppress_name ((0), ME, "Usage:  ^a person.project {message}
or:^5x^a -pathname path {message}", ME, ME);
		return;
	     end;

	message_ptr = addr (message_space);
	message_len = length (message_space);
	message = "";

	if idx <= arg_count then do;			/* message on the line */
		start_len = 1;
		do idx = idx to arg_count;
		     call cu_$arg_ptr (idx, arg_ptr, arg_len, (0));
		     if start_len + arg_len > message_len then do;
			     old_message_ptr = message_ptr;
			     old_message_len = message_len;
			     message_len = message_len + arg_len + length (message_space);
			     if area_ptr = null () then area_ptr = get_system_free_area_ ();
			     allocate message in (area) set (message_ptr);
			     message_allocated = TRUE;
			     message = substr (old_message_ptr -> message, 1, old_message_len);
			     if old_message_len > length (message_space) then free old_message_ptr -> message in (area);
			end;
		     substr (message, start_len, arg_len) = arg;
		     start_len = start_len + arg_len + 1;
		     substr (message, start_len - 1, 1) = " ";
		end;

		substr (message, start_len - 1, 1) = NL;

		call message_facility_$send_message (dname, ename, substr (message, 1, start_len - 1),
		     addr (send_mail_info), code);

		if message_allocated then do;
			message_allocated = FALSE;
			free message in (area);
		     end;
	     end;
	else do;					/* input mode */
		send_mail_info.never_add = TRUE;
		call message_facility_$send_message (dname, ename, "",
		     addr (send_mail_info), code);
		send_mail_info.never_add = FALSE;
		if code ^= 0 then
		     if (code = error_table_$messages_off | code = error_table_$messages_deferred) then do;
			     if ^send_mail_info.always_add then do;
				     call com_err_ (code, ME, "^a", destination_arg);
				     return;
				end;
			     if ^send_mail_info.acknowledge & ^brief then
				call com_err_ (code, ME, "^a", destination_arg);
			     code = 0;
			end;
		     else if code = error_table_$no_info then do;
			     if send_mail_info.acknowledge then
				call com_err_ (code, ME, "Messages to ^a cannot be acknowledged.", destination_arg);
			     else if ^brief then call com_err_ (code, ME, "^a", destination_arg);
			     code = 0;
			end;
		if code ^= 0 then goto SMO_ERROR;
		call ioa_ ("Input:");		/* input mode */
		do while (code = 0);
		     call iox_$get_line (iox_$user_input, message_ptr, message_len, chars_read, code);
		     if code ^= 0 then
			if code = error_table_$long_record then do;
				call com_err_ (code, ME, "user_input");
				code = 0;
			     end;
			else do;
				call com_err_ (code, ME, "user_input");
				return;
			     end;
		     else if substr (message, 1, chars_read) = DOT_NL then return;
		     call message_facility_$send_message (dname, ename, substr (message, 1, chars_read), addr (send_mail_info), code);
		     if code ^= 0 then
			if (code = error_table_$messages_off
			     | code = error_table_$no_info
			     | code = error_table_$messages_deferred) then code = 0;
		end;
	     end;
	if code ^= 0 then do;
SMO_ERROR:	if code = error_table_$noentry | code = error_table_$no_dir then
		     call com_err_ ((0), ME, "No mailbox^[ for^] ^a", ^pathname, destination_arg);
		else if code = error_table_$no_append then
		     call com_err_ ((0), ME, "Insufficient access to add a message to^[ mailbox of^] ^a", ^pathname,
			destination_arg);
		else if ^send_mail_info.always_add then
		     if ^brief then call ioa_ ("Not sent.");
		     else ;
		else if code = error_table_$wakeup_denied then
		     if ^brief then call com_err_ ((0), ME, "Insufficient access to send a wakeup to ^a",
			     destination_arg);
		     else ;
		else if (code = error_table_$messages_off | code = error_table_$messages_deferred) then
		     if ^send_mail_info.acknowledge & ^brief then
			call com_err_ (code, ME, "^a", destination_arg);
		     else ;
		else if code = error_table_$no_info then
		     if send_mail_info.acknowledge & ^brief then
			call com_err_ (code, ME, "Messages to ^a cannot be acknowledged.", destination_arg);
		     else ;
		else call com_err_ (code, ME, "^a", destination_arg);
	     end;
     end smo_command;

smo_subroutine: procedure ();
						/* procedure for subroutines */
	dname = ">udd>" || rtrim (P_project) || ">" || P_person;
	ename = rtrim (P_person) || ".mbx";

	if send_mail_info.notify then call message_facility_$send_message (dname, ename, "You have mail.",
		addr (send_mail_info), code);
	else call message_facility_$send_message (dname, ename, P_message, addr (send_mail_info), code);

	P_code = code;
     end smo_subroutine;

%include send_mail_info;
     end send_message_obsolete;
