/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* This command prints information about mailboxes on which messages
   are being accepted or deferred. */

/****^  HISTORY COMMENTS:
  1) change(84-06-11,Lippard), approve(), audit(),
     install(86-06-30,MR12.0-1080):
      Written by Jim Lippard.
  2) change(85-09-10,Lippard), approve(85-11-18,MCR7298),
     audit(86-01-10,Spitzer), install(86-01-20,MR12.0-1006):
      Modified to work as an active function.
  3) change(86-05-09,Lippard), approve(86-06-24,MCR7434),
     audit(86-06-24,Hartogs), install(86-06-30,MR12.0-1080):
      Modified to reject -all as an active function.
                                                   END HISTORY COMMENTS */

message_status: msgst: procedure options (variable);
	dcl     ME		 char (14) internal static options (constant) init ("message_status");
	dcl     VERSION		 char (3) internal static options (constant) init ("1.2");

	dcl     com_err_		 entry () options (variable);

	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));

	dcl     interpret_ptr_	 entry (ptr, ptr, ptr);

	dcl     ioa_		 entry () options (variable);

	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     message_facility_$default_wakeup_handler entry (ptr, ptr);
	dcl     message_facility_$default_alarm_handler entry (ptr, ptr);
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$get_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$get_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$get_next_msgf_mbx_ptr entry (ptr, ptr);
	dcl     message_facility_$get_mbx_path entry (ptr, char (*), char (*), bit (1) aligned, fixed bin (35));

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     ssu_$return_arg	 entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     cleanup		 condition;

	dcl     active_function	 bit (1) aligned;

	dcl     alarm_handler	 variable entry (ptr, ptr);
	dcl     alarm_info_ptr	 ptr;
	dcl     alarm_time		 fixed bin (71);
	dcl     alarm_ptr		 ptr;
	dcl     alarm_dname		 char (168);
	dcl     alarm_ename		 char (32);

	dcl     all		 bit (1) aligned;

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     call_string		 char (512) aligned based (call_string_ptr);
	dcl     call_string_ptr	 ptr;

	dcl     default		 bit (1) aligned;

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     flags		 bit (5);

	dcl     idx		 fixed bin;

	dcl     1 local_pcao	 aligned like parse_ca_options;

	dcl     msgf_mbx_ptr	 ptr;

	dcl     path		 bit (1) aligned;

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     prefix		 char (32) var;

	dcl     printed_something	 bit (1) aligned;

	dcl     return_ptr		 ptr;
	dcl     return_len		 fixed bin (21);
	dcl     return_arg		 char (return_len) varying based (return_ptr);
	dcl     return_string	 char (2000) varying;

	dcl     sci_ptr		 ptr;

	dcl     short_format	 bit (1) aligned;
	dcl     short_prefix	 bit (1) aligned;

	dcl     strp                   ptr;

	dcl     sys_area		 area based (sys_area_ptr);
	dcl     sys_area_ptr	 ptr;

	dcl     wakeup_handler	 variable entry (ptr, ptr);
	dcl     wakeup_info_ptr	 ptr;
	dcl     wakeup_ptr		 ptr;
	dcl     wakeup_dname	 char (168);
	dcl     wakeup_ename	 char (32);

	dcl     (addr, character, codeptr, environmentptr, ltrim, null, rtrim, substr) builtin;

	dcl     code		 fixed bin (35);

	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);

/* initialize variables */
	all, default, path, printed_something = FALSE;
	msg_array_ptr, sci_ptr = null ();
	sys_area_ptr = get_system_free_area_ ();

	on cleanup call cleanup_msgst;

/* create ssu_ invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null (), abort_msgst, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	call ssu_$return_arg (sci_ptr, arg_count, active_function, return_ptr, return_len);

	do idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
	     if (arg = "-all" | arg = "-a") & ^active_function then all = TRUE;
	     else do;
						/* let mlsys_utils_ have at it */
		     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
		     local_pcao.logbox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.abort_on_errors = TRUE;
		     local_pcao.validate_addresses = FALSE;
		     local_pcao.mbz = ""b;

		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (local_pcao), dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

		     idx = idx - 1;

		     if path then call ssu_$abort_line (sci_ptr, (0), "Usage: msgst {mbx_specification} {-control_args}");

		     path = TRUE;
		end;
	end;

	if all & path then call ssu_$abort_line (sci_ptr, (0),
		"A mailbox specification and ""-all"" are mutually exclusive.");

	if ^all & ^path then do;
		call user_info_$whoami (person, project, "");
		dname = ">udd>" || rtrim (project) || ">" || person;
		ename = rtrim (person) || ".mbx";
		default = TRUE;
	     end;

	if all then do;
		call message_facility_$get_next_msgf_mbx_ptr (null (), msgf_mbx_ptr);

		do while (msgf_mbx_ptr ^= null ());
		     call message_facility_$get_wakeup_state (msgf_mbx_ptr, flags, code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);
		     if substr (flags, 4, 2) ^= "00"b then do;
			     call message_facility_$get_mbx_path (msgf_mbx_ptr, dname, ename, default, code);

			     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

			     call process_mailbox;
			     printed_something = TRUE;
			end;
		     call message_facility_$get_next_msgf_mbx_ptr (msgf_mbx_ptr, msgf_mbx_ptr);
		end;
		if ^printed_something then call ssu_$abort_line (sci_ptr, (0),
			"You are not currently accepting or deferring messages on any mailboxes.");
	     end;

	else do;
		call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

		call message_facility_$get_wakeup_state (msgf_mbx_ptr, flags, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

		if substr (flags, 4, 2) = "00"b then call ssu_$abort_line (sci_ptr, (0),
			"You are not accepting or deferring messages on the specified mailbox. ^a", pathname_ (dname, ename));

		call process_mailbox;
	     end;

	call cleanup_msgst;
RETURN_FROM_MST:
	return;

process_mailbox: proc;

	return_string = "";

/* get wakeup state */
	call message_facility_$get_wakeup_state (msgf_mbx_ptr, flags, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

/* get message format */
	call message_facility_$get_message_format (msgf_mbx_ptr, short_format, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

/* get prefix */
	call message_facility_$get_prefix (msgf_mbx_ptr, prefix, short_prefix, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

/* get handler info */
	call message_facility_$get_wakeup_handler (msgf_mbx_ptr, wakeup_handler, wakeup_info_ptr, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

/* get alarm info */
	call message_facility_$get_alarm_handler (msgf_mbx_ptr, alarm_handler, alarm_info_ptr, alarm_time, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

/* convert wakeup/alarm handlers to char strings */
	wakeup_ptr = codeptr (wakeup_handler);
	alarm_ptr = codeptr (alarm_handler);

	call hcs_$fs_get_path_name (wakeup_ptr, wakeup_dname, (0), wakeup_ename, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;

	call hcs_$fs_get_path_name (alarm_ptr, alarm_dname, (0), alarm_ename, code);

	if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
		return;
	     end;
	if ^active_function then do;

/* get number of messages */
		call message_facility_$get_msg_array_ptr (msgf_mbx_ptr, sys_area_ptr, msg_array_ptr, n_messages, code);

		if code ^= 0 then do;
			call ssu_$print_message (sci_ptr, code, "^a", pathname_ (dname, ename));
			return;
		     end;

/* print info */
		call ioa_ ("^[^/^]Mailbox: ^a^[ (default)^]", printed_something, pathname_ (dname, ename), default);
		call ioa_ ("Number of messages: ^d", n_messages);
		call ioa_ ("Wakeup state: ^[deferring^;accepting^] messages", substr (flags, 5, 1));
		call ioa_ ("^3x^[not ^]holding messages", ^substr (flags, 1, 1));
		call ioa_ ("^3x^[not ^]holding notifications", ^substr (flags, 2, 1));
		call ioa_ ("^3x^[not ^]printing notifications", ^substr (flags, 3, 1));
		call ioa_ ("Message format: ^[short^;long^]", short_format);
		if prefix ^= "" then call ioa_ ("Prefix string: ^a^[ (short prefix)^]", prefix, short_prefix);

		call interpret_ptr_ (codeptr (wakeup_handler), environmentptr (wakeup_handler), addr (strbuf));
		call ioa_ ("Wakeup handler: ^a^a^/^3x(^a|^a)", strbuf.segment, strbuf.entryn,
		     pathname_ (wakeup_dname, wakeup_ename), strbuf.offset);
		call_string_ptr = wakeup_info_ptr;
		if wakeup_handler = message_facility_$default_wakeup_handler & wakeup_info_ptr ^= null () then
		     if call_string ^= "" then
			call ioa_ ("^[Wakeup call^;Call^] string: ^a", (wakeup_info_ptr ^= alarm_info_ptr), call_string);
		if alarm_time ^= 0 then do;
			call interpret_ptr_ (codeptr (alarm_handler), environmentptr (alarm_handler), addr (strbuf));
			call ioa_ ("Alarm handler: ^a^a^/^3x(^a|^a)", strbuf.segment, strbuf.entryn,
			     pathname_ (alarm_dname, alarm_ename), strbuf.offset);
			call ioa_ ("Alarm wakeup every ^d seconds", alarm_time);
			call_string_ptr = alarm_info_ptr;
			if (wakeup_info_ptr ^= alarm_info_ptr)
			     & (alarm_handler = message_facility_$default_alarm_handler)
			     & (alarm_info_ptr ^= null ()) then
			     if call_string ^= "" then call ioa_ ("Alarm call string: ^a", call_string);
		     end;
	     end;

	else do;					/* active function case */
		if wakeup_handler ^= message_facility_$default_wakeup_handler
		     | alarm_handler ^= message_facility_$default_alarm_handler then
		     call ssu_$abort_line (sci_ptr, (0), "The current wakeup state cannot be described by control arguments due to non-standard alarm or wakeup handler.");

		return_string = "accept_messages -mailbox " || rtrim (pathname_ (dname, ename));

		if substr (flags, 1, 1) then return_string = return_string || " -hold_messages";
		else return_string = return_string || " -no_hold_messages";

		if substr (flags, 2, 1) then return_string = return_string || " -hold_notifications";
		else return_string = return_string || " -no_hold_notifications";

		if substr (flags, 3, 1) then return_string = return_string || " -notifications";
		else return_string = return_string || " -no_notifications";

		if short_format then return_string = return_string || " -short";
		else return_string = return_string || " -long";

		return_string = return_string || " -prefix """ || prefix || """";
		if short_prefix then return_string = return_string || " -short_prefix";
		else return_string = return_string || " -no_short_prefix";

		call_string_ptr = wakeup_info_ptr;
		if wakeup_info_ptr ^= null () then
		     return_string = return_string || " -call """ || rtrim (call_string) || """";
		else return_string = return_string || " -call """"";

		return_string = return_string || " -time " || ltrim (character (alarm_time));

		if substr (flags, 5, 1) then return_string = return_string || ";defer_messages";

		return_arg = return_string;
	     end;					/* active function case */
     end process_mailbox;

cleanup_msgst: proc;
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	if msg_array_ptr ^= null () then free msg_array in (sys_area);
	return;
     end cleanup_msgst;

abort_msgst: proc;
	call cleanup_msgst;
	go to RETURN_FROM_MST;
     end abort_msgst;

%page;
%include interpret_ptr_struc;
%page;
%include mlsys_parse_ca_options;
%page;
%include msg_array;

     end message_status;
