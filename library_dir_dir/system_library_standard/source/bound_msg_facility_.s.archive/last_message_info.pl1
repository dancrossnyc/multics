/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* This module implements the following command/active functions:

      last_message_sender (lms) - print/return the user ID of the
         last message sender.
      last_message_time (lmt) - print/return the date/time of the last
         message.
      last_message (lm) - print/return the last message.
*/
/* Written 05/30/84 by Jim Lippard */
last_message_info: procedure options (variable);
	return;					/* not an entry */

	dcl     ME		 char (19);
	dcl     VERSION		 char (3) internal static options (constant) init ("1.0");

	dcl     com_err_		 entry () options (variable);

	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     ioa_		 entry () options (variable);

	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_last_message_info entry (ptr, ptr, fixed bin (35));

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$return_arg	 entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     cleanup		 condition;

	dcl     active_function	 bit (1) aligned;

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     idx		 fixed bin;

	dcl     inhibit_error	 bit (1) aligned;

	dcl     1 local_lmi		 aligned like last_message_info;

	dcl     1 local_pcao	 aligned like parse_ca_options;

	dcl     msgf_mbx_ptr	 ptr;

	dcl     msg_time		 char (250) var;

	dcl     path		 bit (1) aligned;

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     return_ptr		 ptr;
	dcl     return_len		 fixed bin (21);
	dcl     return_arg		 char (return_len) varying based (return_ptr);

	dcl     sci_ptr		 ptr;

	dcl     (addr, fixed, length, null, rtrim, substr) builtin;

	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);

	dcl     LFHTSP		 char (3) internal static options (constant) init ("
	 ");

	dcl     code		 fixed bin (35);

	dcl     error_table_$noarg	 fixed bin (35) ext static;

last_message_sender: lms: entry;
	ME = "last_message_sender";
	go to COMMON;

last_message_time: lmt: entry;
	ME = "last_message_time";
	go to COMMON;

last_message: lm: entry;
	ME = "last_message";

COMMON:

/* initialize variables */
	inhibit_error, path = FALSE;
	sci_ptr = null ();

	on cleanup call cleanup_lmi;

/* create ssu_ invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null (), abort_lmi, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	call ssu_$return_arg (sci_ptr, arg_count, active_function, return_ptr, return_len);

	do idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
	     if arg = "-inhibit_error" | arg = "-ihe" then inhibit_error = TRUE;
	     else if arg = "-pathname" | arg = "-pn" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A pathname must be specified after ""^a"".", arg);

		     if path then call ssu_$abort_line (sci_ptr, (0),
			     "Usage: ^[lms^;^[lmt^;lm^]^] {mbx_specification}", (ME = "last_message_sender"), (ME = "last_message_time"));

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     path = TRUE;
		end;
	     else do;
						/* let mlsys_utils_ have at it */
		     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
		     local_pcao.logbox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.abort_on_errors = TRUE;
		     local_pcao.validate_addresses = FALSE;
		     local_pcao.mbz = ""b;

		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (local_pcao), dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

		     idx = idx - 1;

		     if path then call ssu_$abort_line (sci_ptr, (0),
			     "Usage: ^[lms^;^[lmt^;lm^]^] {mbx_specification}", (ME = "last_message_sender"), (ME = "last_message_time"));

		     path = TRUE;
		end;
	end;

	if ^path then do;
		call user_info_$whoami (person, project, "");
		dname = ">udd>" || rtrim (project) || ">" || person;
		ename = rtrim (person) || ".mbx";
	     end;

	call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	local_lmi.version = LAST_MESSAGE_INFO_VERSION_1;

	call message_facility_$get_last_message_info (msgf_mbx_ptr, addr (local_lmi), code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	if local_lmi.last_message_id = ""b then do;
		if ^inhibit_error then call ssu_$abort_line (sci_ptr, (0), "No last message.");
		else if active_function then return_arg = "";
		go to MAIN_RETURN;
	     end;

	message_info_ptr = local_lmi.last_message_ptr;

	if ME = "last_message_sender" then do;
		if active_function then return_arg =
			requote_string_ (substr (message_info.sender, 1, length (rtrim (message_info.sender)) - 2));
		else call ioa_ ("^a", substr (message_info.sender, 1, length (rtrim (message_info.sender)) - 2));
	     end;

	else if ME = "last_message_time" then do;
		msg_time = date_time_$format ("date_time", fixed (substr (local_lmi.last_message_id, 19, 54), 71), "", "");
		if active_function then return_arg = requote_string_ ((msg_time));
		else call ioa_ ("^a", msg_time);
	     end;

	else if ME = "last_message" then do;
		mail_format_ptr = message_info.message_ptr;
		if active_function then return_arg = requote_string_ (rtrim (mail_format.text, LFHTSP));
		else call ioa_ ("^a", rtrim (mail_format.text, LFHTSP));
	     end;

MAIN_RETURN:
	call cleanup_lmi;
RETURN_FROM_LMI:
	return;

cleanup_lmi: proc;
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;
     end;

abort_lmi: proc;
	call cleanup_lmi;
	go to RETURN_FROM_LMI;
     end abort_lmi;

%page;
%include last_message_info;
%page;
%include mail_format;
%page;
%include message_info;
%page;
%include mlsys_parse_ca_options;
     end last_message_info;
