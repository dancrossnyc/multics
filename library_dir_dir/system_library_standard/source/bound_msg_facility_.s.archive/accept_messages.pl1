/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* This command accepts messages on the specified mailbox. */

/****^  HISTORY COMMENTS:
  1) change(84-05-31,Lippard), approve(), audit(), install():
      Written by Jim Lippard.
  2) change(84-11-21,Lippard), approve(), audit(), install():
      Modified to use call string for -print when appropriate.
  3) change(85-01-11,Lippard), approve(), audit(), install():
      Modified to use new calling sequences for
      message_facility_$(delete_message print_message read_message
      set_seen_switch).
  4) change(86-01-05,Lippard), approve(86-05-27,MCR7418),
     audit(86-06-24,Hartogs), install(86-06-30,MR12.0-1080):
      Modified to abort if user decides not to create a nonexistent
      mailbox.
  5) change(87-01-29,Lippard), approve(87-03-18,MECR0001),
     audit(87-03-12,Fawcett), install(87-03-19,MR12.1-1002):
      Modified to strip control characters out of message comment field.
  6) change(87-01-29,Lippard), approve(87-04-20,MCR7669),
     audit(87-05-11,Fawcett), install(87-05-20,MR12.1-1032):
      Formal installation to close out MECR0001.
                                                   END HISTORY COMMENTS */

accept_messages: am: procedure options (variable);
	dcl     ME		 char (15) internal static options (constant) init ("accept_messages");
	dcl     VERSION		 char (3) internal static options (constant) init ("1.3");

	dcl     aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned) reducible;

	dcl     canonicalize_	 entry (ptr, fixed bin (21), ptr, fixed bin (21), fixed bin (35));

	dcl     com_err_		 entry () options (variable);

	dcl     command_query_$yes_no	 entry () options (variable);

	dcl     convert_access_class_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35));

	dcl     convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

	dcl     cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));

	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     get_authorization_	 entry () returns (bit (72) aligned) reducible;
	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     (ioa_, ioa_$rsnnl)	 entry () options (variable);

	dcl     iox_$user_output	 ptr ext static;

	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     mailbox_$create	 entry (char (*), char (*), fixed bin (35));
	dcl     mailbox_$get_uid_file	 entry (char (*), char (*), bit (36) aligned, fixed bin (35));

	dcl     message_facility_$default_alarm_handler entry (ptr, ptr);
	dcl     message_facility_$default_wakeup_handler entry (ptr, ptr);
	dcl     message_facility_$delete_message entry (ptr, bit (72) aligned, fixed bin (35));
	dcl     message_facility_$get_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$print_message entry (ptr, ptr, bit (72) aligned, ptr, fixed bin (35));
	dcl     message_facility_$read_message entry (ptr, bit (72) aligned, ptr, ptr, fixed bin (35));
	dcl     message_facility_$set_alarm_handler entry (ptr, entry, ptr, fixed bin (71), fixed bin (35));
	dcl     message_facility_$set_message_format entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_prefix entry (ptr, char (32) var, bit (1) aligned, fixed bin (35));
	dcl     message_facility_$set_seen_switch entry (ptr, bit (72) aligned, bit (*), fixed bin (35));
	dcl     message_facility_$set_wakeup_handler entry (ptr, entry, ptr, fixed bin (35));
	dcl     message_facility_$set_wakeup_state entry (ptr, bit (*), fixed bin (35));

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     cleanup		 condition;

	dcl     alarm_time		 fixed bin (71);

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     authorization	 bit (72) aligned;
	dcl     auth_string		 char (170);

	dcl     alarm		 bit (1) aligned;

	dcl     brief		 bit (1) aligned;

	dcl     call		 bit (1) aligned;

	dcl     1 call_string_info	 aligned based (call_string_info_ptr),
		2 uid		 bit (36) aligned,
		2 call_string_ptr	 ptr,
		2 next_call_string_ptr ptr;

	dcl     call_string_info_ptr	 ptr;

	dcl     static_call_string_info_ptr ptr internal static init (null ());

	dcl     call_string		 char (512) based (call_string_info.call_string_ptr);
	dcl     temp_call_string	 char (512);

	dcl     command_line	 char (2000);

	dcl     create_mbx		 bit (1) aligned;

	dcl     date_time		 fixed bin (71);

	dcl     default		 bit (1) aligned;

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     flags		 bit (5);
	dcl     1 local_wf		 like wakeup_flags based (local_wf_ptr);
	dcl     local_wf_ptr	 ptr;

	dcl     flush_time		 fixed bin (71);

	dcl     found		 bit (1) aligned;

	dcl     hold		 bit (1) aligned;
	dcl     nohold		 bit (1) aligned;

	dcl     hold_notify		 bit (1) aligned;
	dcl     nohold_notify	 bit (1) aligned;

	dcl     idx		 fixed bin;

	dcl     last_msg_time	 char (24);
	dcl     last_sender		 char (120);
	dcl     last_time		 fixed bin (71);

	dcl     1 local_mi		 aligned like message_info;
	dcl     1 local_pcao	 aligned like parse_ca_options;

	dcl     mail		 bit (1) aligned;
	dcl     nomail		 bit (1) aligned;

	dcl     message_sender	 char (120);

	dcl     msg_date_time	 char (24);

	dcl     msgf_mbx_ptr	 ptr;

	dcl     path		 bit (1) aligned;
	dcl     pathname		 char (256);

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     prefix_string	 char (32) varying;
	dcl     prefix		 bit (1) aligned;

	dcl     print		 bit (1) aligned;

	dcl     sci_ptr		 ptr;

	dcl     short_format	 bit (1) aligned;
	dcl     no_short_format	 bit (1) aligned;
	dcl     short_format_switch	 bit (1) aligned;
	dcl     new_short_format_switch bit (1) aligned;
	dcl     short		 bit (1) aligned;
	dcl     short_prefix	 bit (1) aligned;

	dcl     sys_area		 area based (sys_area_ptr);
	dcl     sys_area_ptr	 ptr;

	dcl     tag		 char (10) var;

	dcl     uid		 bit (36) aligned;

	dcl     (addr, before, collate, convert, fixed, index, length, maxlength, null, rtrim, string, substr, translate) builtin;

	dcl     (conversion, size)	 condition;

	dcl     code		 fixed bin (35);

	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;

	dcl     ALPHABET		 char (256) init ((8)" " || "	" || (4)" " || "" || (16)" "
				 || substr (collate (), 33)); /* space, BSHT, space, RRSBRS, space, alphanumerics */
	dcl     NLSPHT		 char (3) internal static options (constant) init ("
 	");
	dcl     BS		 char (1) aligned internal static options (constant) init ("");
	dcl     TRUE		 bit (1) aligned internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) aligned internal static options (constant) init ("0"b);

	dcl     FIVE_MINUTES	 fixed bin (71) internal static options (constant) init (300000000);

/* initialize variables */
	alarm, brief, call, default, hold, nohold, hold_notify, nohold_notify, nomail, path, print,
	     short_format, no_short_format = FALSE;
	mail, short_prefix = TRUE;
	last_msg_time, last_sender = "";
	last_time = 0;
	alarm_time, flush_time = 0;
	temp_call_string = "";
	prefix_string = "";
	prefix = FALSE;
	call_string_info_ptr, msg_array_ptr, sci_ptr = null ();
	sys_area_ptr = get_system_free_area_ ();

	on cleanup call cleanup_am;

/* create ssu_ invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null (), abort_am, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	call ssu_$arg_count (sci_ptr, arg_count);

	do idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
	     if arg = "-brief" | arg = "-bf" then brief, short_format = TRUE;
	     else if arg = "-long" | arg = "-lg" then do;
		     short_format = FALSE;
		     no_short_format = TRUE;
		end;
	     else if arg = "-call" then do;
		     idx = idx + 1;
		     if idx > arg_count then temp_call_string = "";

		     else do;
			     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
			     if index (arg, "-") = 1 then do;
				     temp_call_string = "";
				     idx = idx - 1;
				end;
			     else do;
				     if arg_len > length (temp_call_string) then
					call ssu_$abort_line (sci_ptr, (0), "Call string may not be longer than ^d characters. ^a", length (temp_call_string), arg);
				     temp_call_string = arg;
				end;
			end;
		     call = TRUE;
		end;
	     else if arg = "-flush" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A flush time must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     call convert_date_to_binary_ (arg, flush_time, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);
		end;
	     else if arg = "-hold" | arg = "-hd" | arg = "-hold_messages" | arg = "-hdmsg" then do;
		     hold = TRUE;
		     nohold = FALSE;
		end;
	     else if arg = "-no_hold" | arg = "-nhd" | arg = "-no_hold_messages" | arg = "-nhdmsg" then do;
		     hold = FALSE;
		     nohold = TRUE;
		     alarm_time = 0;
		end;
	     else if arg = "-hold_notifications" | arg = "-hdnt" then do;
		     hold_notify = TRUE;
		     nohold_notify = FALSE;
		     mail = TRUE;
		     nomail = FALSE;
		end;
	     else if arg = "-no_hold_notifications" | arg = "-nhdnt" then do;
		     hold_notify = FALSE;
		     nohold_notify = TRUE;
		end;
	     else if arg = "-mail" | arg = "-ml" | arg = "-notifications" | arg = "-nt" then do;
		     mail = TRUE;
		     nomail = FALSE;
		end;
	     else if arg = "-no_mail" | arg = "-nml" | arg = "-no_notifications" | arg = "-nnt" then do;
		     mail = FALSE;
		     nomail = TRUE;
		     hold_notify = FALSE;
		     nohold_notify = TRUE;
		end;
	     else if arg = "-pathname" | arg = "-pn" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A pathname must be specified after ""^a"".", arg);

		     if path then call ssu_$abort_line (sci_ptr, (0), "Usage: am {mbx_specification} {-control_args}");

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     path = TRUE;
		end;
	     else if arg = "-prefix" | arg = "-pfx" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A prefix must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     if arg_len > maxlength (prefix_string) then
			call ssu_$abort_line (sci_ptr, (0), "Prefix may not be longer than ^d characters. ^a", maxlength (prefix_string), arg);

		     prefix_string = arg;
		     prefix = TRUE;
		end;
	     else if arg = "-print" | arg = "-pr" then print = TRUE;
	     else if arg = "-no_print" | arg = "-npr" then print = FALSE;
	     else if arg = "-short" | arg = "-sh" then do;
		     short_format = TRUE;
		     no_short_format = FALSE;
		end;
	     else if arg = "-short_prefix" | arg = "-shpfx" then short_prefix = TRUE;
	     else if arg = "-no_short_prefix" | arg = "-nshpfx" then short_prefix = FALSE;
	     else if arg = "-time" | arg = "-tm" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "An alarm time must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     on conversion, size go to BAD_TIME;
		     alarm_time = 60 * convert (alarm_time, arg);
		     revert conversion, size;

		     hold = TRUE;
		     nohold = FALSE;
		     alarm = TRUE;
		end;
	     else do;
						/* let mlsys_utils_ have at it */
		     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
		     local_pcao.logbox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.abort_on_errors = TRUE;
		     local_pcao.validate_addresses = FALSE;
		     local_pcao.mbz = ""b;

		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (local_pcao), dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

		     idx = idx - 1;

		     if path then call ssu_$abort_line (sci_ptr, (0), "Usage: am {msg_specification} {-control_args}");

		     path = TRUE;
		end;
	end;

	if ^path then do;
		call user_info_$whoami (person, project, "");
		dname = ">udd>" || rtrim (project) || ">" || person;
		ename = rtrim (person) || ".mbx";
		default = TRUE;
	     end;

	call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);

	if code = error_table_$noentry then do;
						/* if default, create it; otherwise ask */
		if ^default then call command_query_$yes_no (create_mbx, code, ME,
			"Answer ""yes"" if you want the mailbox to be created.", "Do you want to create the mailbox ^a?", pathname_ (dname, ename));

		if create_mbx | default then do;
			call mailbox_$create (dname, ename, code);

			if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
				"Creating ^[default ^]mailbox ^a.", default, pathname_ (dname, ename));
		     end;
		else call abort_am ();

		if ^brief then call ioa_ ("Creating ^[default ^]mailbox ^a.", default, pathname_ (dname, ename));

		call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);
	     end;

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
		"Getting message facility mailbox pointer. ^a", pathname_ (dname, ename));

/* get wakeup state */
	call message_facility_$get_wakeup_state (msgf_mbx_ptr, flags, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting wakeup state. ^a", pathname_ (dname, ename));

	local_wf_ptr = addr (flags);

	local_wf.wakeup_state = ACCEPT_MESSAGES;
	if nohold then local_wf.hold_messages = FALSE;
	else if hold then local_wf.hold_messages = TRUE;
	if nohold_notify then local_wf.hold_notifications = FALSE;
	else if hold_notify then local_wf.hold_notifications = TRUE;
	if nomail then local_wf.print_notifications = FALSE;
	else if mail then local_wf.print_notifications = TRUE;

	call message_facility_$set_wakeup_state (msgf_mbx_ptr, flags, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting wakeup state. ^a", pathname_ (dname, ename));

/* set prefix */
	if prefix then do;
		call message_facility_$set_prefix (msgf_mbx_ptr, prefix_string, short_prefix, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting prefix. ^a", pathname_ (dname, ename));
	     end;

/* set message format */
	call message_facility_$get_message_format (msgf_mbx_ptr, short_format_switch, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting message format. ^a", pathname_ (dname, ename));

	if short_format then new_short_format_switch = TRUE;
	else if no_short_format then new_short_format_switch = FALSE;
	else new_short_format_switch = short_format_switch;

	if new_short_format_switch ^= short_format_switch then do;
		call message_facility_$set_message_format (msgf_mbx_ptr, new_short_format_switch, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting message format. ^a", pathname_ (dname, ename));
	     end;

/* take care of call string */
	call mailbox_$get_uid_file (dname, ename, uid, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting mailbox UID. ^a", pathname_ (dname, ename));

	call_string_info_ptr = static_call_string_info_ptr;
	found = FALSE;

	do while (call_string_info_ptr ^= null () & ^found);
	     if call_string_info.uid = uid then found = TRUE;
	     else call_string_info_ptr = call_string_info.next_call_string_ptr;
	end;

	if found & call then call_string = temp_call_string;
	else if ^found then do;
		allocate call_string_info in (sys_area);
		call_string_info.uid = uid;
		allocate call_string in (sys_area);
		if call then call_string = temp_call_string;
		else call_string = "";
		call_string_info.next_call_string_ptr = static_call_string_info_ptr;
		static_call_string_info_ptr = call_string_info_ptr;
	     end;

/* set alarm handler */
	if alarm then do;
		call message_facility_$set_alarm_handler (msgf_mbx_ptr, message_facility_$default_alarm_handler,
		     addr (call_string), alarm_time, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting alarm handler. ^a", pathname_ (dname, ename));
	     end;

	if print | flush_time ^= 0 then do;		/* only get msg array for print or flush */
		call message_facility_$get_msg_array_ptr (msgf_mbx_ptr, sys_area_ptr, msg_array_ptr, n_messages, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
			"Getting message array pointer. ^a", pathname_ (dname, ename));

/* print old messages */
		if print then do;
			do idx = 1 to n_messages;
			     call print_message (idx, msg_array.message_id (idx));
			end;
		     end;

/* flush messages from before flush_time */
		if flush_time ^= 0 then do;
			do idx = 1 to n_messages;
			     if fixed (substr (msg_array.message_id (idx), 19, 54), 71) < flush_time then do;
				     call message_facility_$delete_message (msgf_mbx_ptr, msg_array.message_id (idx), code);

				end;
			end;
		     end;
	     end;					/* only get msg array for print or flush */

/* set wakeup handler */
	call message_facility_$set_wakeup_handler (msgf_mbx_ptr, message_facility_$default_wakeup_handler,
	     addr (call_string), code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting wakeup handler. ^a", pathname_ (dname, ename));

	call cleanup_am;
RETURN_FROM_AM:
	return;

BAD_TIME:
	call ssu_$abort_line (sci_ptr, (0), """^a"" is not a decimal integer.", arg);
	return;

/* This procedure removes control characters (except backspace, tab,
   red ribbon shift, and black ribbon shift) and canonicalizes strings
   to prevent backspacing past the front of the string. */
canon: procedure (P_string, P_string_len) returns (char (*));
	dcl     P_string		 char (*) parm;
	dcl     P_string_len	 fixed bin (21) parm;
	dcl     output_string	 char (P_string_len);

	P_string = translate (P_string, ALPHABET);
	if index (P_string, BS) ^= 0 then do;
		output_string = "";
		call canonicalize_ (addr (P_string), length (P_string), addr (output_string), P_string_len, (0));
		return (output_string);
	     end;
	else return (P_string);
     end canon;

/* This procedure prints a message. */
print_message: procedure (P_message_index, P_message_id);
	dcl     P_message_index	 fixed bin parm;
	dcl     P_message_id	 bit (72) aligned parm;

	mail_format_ptr = null ();

	local_mi.version = MESSAGE_INFO_VERSION_1;

	on cleanup begin;
		if mail_format_ptr ^= null () then free mail_format in (sys_area);
		mail_format_ptr = null ();
	     end;

	call message_facility_$read_message (msgf_mbx_ptr, P_message_id, sys_area_ptr, addr (local_mi), code);
	if code ^= 0 then return;
	mail_format_ptr = local_mi.message_ptr;
	date_time = fixed (substr (P_message_id, 19, 54), 71);
	call date_time_ (date_time, msg_date_time);

/* create message sender string */
	if mail_format.sent_from = before (local_mi.sender, ".") | rtrim (mail_format.sent_from) = "" then
	     message_sender = substr (local_mi.sender, 1, length (rtrim (local_mi.sender)) - 2);
	else message_sender = substr (local_mi.sender, 1, length (rtrim (local_mi.sender)) - 2)
		|| " (" || rtrim (canon (rtrim (mail_format.sent_from), length (rtrim (mail_format.sent_from)))) || ")";
	authorization = get_authorization_ ();
	if ^aim_check_$greater_or_equal (local_mi.authorization, authorization) then do;
		call convert_access_class_$to_string_short (local_mi.authorization, auth_string, code);
		if auth_string = "" then auth_string = "system_low";
		message_sender = rtrim (message_sender) || " at " || auth_string;
	     end;

	if message_sender = last_sender then short = TRUE;
	else short = FALSE;

	if temp_call_string ^= "" then do;
		call ioa_$rsnnl (" ^d ", tag, (0), msg_array.message_number (P_message_index));
		if default then pathname = "";
		else pathname = requote_string_ (pathname_ (dname, ename));
		command_line = rtrim (temp_call_string) || " " || tag || requote_string_ (rtrim (message_sender))
		     || " " || requote_string_ (rtrim (date_time_$format ("date_time", date_time, "", ""))) || " "
		     || requote_string_ (rtrim (canon (rtrim (mail_format.text, NLSPHT), length (rtrim (mail_format.text, NLSPHT))))) || " " || pathname;
		call cu_$cp (addr (command_line), length (rtrim (command_line)), (0));
	     end;

	else do;
		string (msg_print_flags) = ""b;

/* print prefix, it may contain ioa_ controls */
		if ^short | short_prefix then msg_print_flags.print_prefix = TRUE;

/* if not default mailbox, prefix with mailbox entry name */
		if ^default then msg_print_flags.print_ename = TRUE;

		if ^short_format_switch | ^short then
		     msg_print_flags.print_sender = TRUE;

		if ^short_format_switch | substr (msg_date_time, 1, 8) ^= last_msg_time then msg_print_flags.print_date_and_time = TRUE;
		else if date_time - last_time > FIVE_MINUTES then msg_print_flags.print_time = TRUE;

		last_sender = message_sender;
		last_time = date_time;
		last_msg_time = substr (msg_date_time, 1, 8);

		call message_facility_$print_message (msgf_mbx_ptr, iox_$user_output, P_message_id, addr (msg_print_flags), code);

		call message_facility_$set_seen_switch (msgf_mbx_ptr, P_message_id, DELETE_UNHELD, code);
		if mail_format_ptr ^= null () then do;
			free mail_format in (sys_area);
			mail_format_ptr = null ();
		     end;
	     end;
     end print_message;

cleanup_am: proc;
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	if msg_array_ptr ^= null () then free msg_array in (sys_area);
	return;
     end cleanup_am;

abort_am: proc;
	call cleanup_am;
	go to RETURN_FROM_AM;
     end abort_am;

%page;
%include mail_format;
%page;
%include message_info;
%page;
%include mlsys_parse_ca_options;
%page;
%include msg_array;
%page;
%include msg_print_flags;
%page;
%include msg_wakeup_flags;

     end accept_messages;
