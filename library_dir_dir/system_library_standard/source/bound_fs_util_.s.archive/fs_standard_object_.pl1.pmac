/****^  **************************************************************
        *                                                            *
        * Copyright, (C) BULL HN Information Systems Inc., 1990      *
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-11-06,GDixon), install(86-11-20,MR12.0-1222):
     Modified to allow setting "e" access on multisegment files.
  2) change(86-08-05,Houck), approve(86-08-11,MCR7501), audit(86-08-15,Wong),
     install(86-08-29,MR12.0-1140):
     Changed program so that a copy switch can be set for a directory.
  3) change(88-05-05,Lippard), approve(88-05-02,MCR7881),
     audit(88-06-16,Fawcett), install(88-08-02,MR12.2-1074):
     Added audit_switch.
  4) change(90-09-20,Bubric), approve(90-10-01,MCR8211), audit(90-10-01,Itani),
     install(90-10-17,MR12.4-1044):
     Have the calls to the routine 'nothing' changed to calls to the routine
     'null_entry_'.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt */
/* BIM 820921 */
/****
      fs_standard_object_ -- entrypoints that the extended object code can return
      to do work on segments, directories, MSF's and dm_files. Sometimes, hcs_
      suffices. Other times, fs_acl_util_ is the ticket. */

/**** make_entry has the knowledge of what entries belong to what.
      since fs_util_$make_entry makes no expensive calls to hcs_$make_entry,
      object_type_/file_system_ (whatever its name turns out to be)
      can call it all the time once it determines that some object
      is a standard object. */

/**** * Modified 831022 BIM for FS_OBJECT_TYPE_LINK */
/**** * Modified 840229 MAP to make these types standard with no extended ACL except for segs */
/**** * Modified 841107 MAP to fix list_switch entrypoints */
/**** * Modified 841129 Pierret to always return an entry for dm_files */
/**** * Modified 850114 Pierret to return file_manager_$list_switches  */
/**** * Modified 850206 MSharpe to use (ncvd nivd) < 0 instead of = 0  for determining the state of the swtiches. */
/**** * Modified 850226 MSharpe to report inconsistent msf if MSF>0 is not found */

fs_standard_object_:
     procedure;

make_entry:
     entry (Type, Operation, Code) returns (entry);

	declare Type		 fixed bin;	/* index into FS_STANDARD_TYPES in file_system_operations_.incl.pl1 */
	declare Operation		 fixed bin;	/* index into FS_OPERATIONS in file_system_operations_.incl.pl1 */
	declare Code		 fixed bin (35) parameter;

	declare make_entry_jumpx	 fixed bin;



/**** Assume that the two fixed bins are within their respective bounds.
      Now, wish that we had 2 dimensional label arrays! */

	make_entry_jumpx = ((Operation - 1) * HIGHEST_FS_STANDARD_TYPE_INDEX) + Type;
						/* index goes through types rapidly, operations slowly */

	Code = 0;
	go to MAKE_ENTRY_LABEL (make_entry_jumpx);	/* cant just have an array of entry constants that is any use at all */


/**** *
      NOTE NOTE
      These entries must be in the same order as the array of names
      in file_system_operation_.incl.pl1! */


	%set OPx to 1;

/**** ADD_ACL_ENTRIES */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (fs_acl_util_$add_directory);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$add_acl_entries);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$add_msf);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$add_segment);

/**** ADD_EXTENDED_ACL_ENTRIES */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$add_extended_acl_entries);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$add_msf_extended);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$add_segment_extended);

/**** CHNAME_FILE */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (hcs_$chname_file);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$chname_file);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	return (hcs_$chname_file);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (hcs_$chname_file);			/* happens to work! */
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$chname_file);

/**** COPY */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$copy);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_copy_util_$msf);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_copy_util_$segment);

/**** DELENTRY_FILE  -- this is a primitive interface for delete_ */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;	/* use delete_ */
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$delentry_file);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	return (hcs_$delentry_file);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$delentry_file);

/**** DELETE_ACL_ENTRIES */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (fs_acl_util_$delete_directory);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$delete_acl_entries);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$delete_msf);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$delete_segment);

/**** * GET_BIT_COUNT */

MAKE_ENTRY_LABEL (OPx):				/** dir */
	%set OPx to OPx + 1;
	return (get_bc_seg_or_dir);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$get_bit_count);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (get_bc_seg_or_dir);
/**** GET_MAX_LENGTH_FILE */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$get_max_length);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$get_max_length);

/**** GET_RING_BRACKETS */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (get_directory_ring_brackets);

MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$get_ring_brackets);

MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_msf_rb_util_$get);

MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (get_segment_ring_brackets);


/**** GET_SWITCH */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (get_directory_switch);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$get_switch);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (get_msf_switch);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (get_segment_switch);


/**** GET_USER_ACCESS_MODES */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (hcs_$get_user_access_modes);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$get_user_access_modes);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (msf_get_user_access_modes);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$get_user_access_modes);

/**** LIST_ACL */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (fs_acl_util_$list_directory);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$list_acl);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$list_msf);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$list_segment);

/**** LIST_EXTENDED_ACL */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$list_extended_acl);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$list_msf_extended);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$list_segment_extended);

/**** LIST_SWITCHES */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (list_directory_switches);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$list_switches);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (list_msf_switches);
MAKE_ENTRY_LABEL (OPx):				/** segments */
	%set OPx to OPx + 1;
	return (list_segment_switches);

/**** REPLACE_ACL */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (fs_acl_util_$replace_directory);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$replace_acl);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$replace_msf);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$replace_segment);

/**** REPLACE_EXTENDED_ACL */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$replace_extended_acl);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_acl_util_$replace_msf_extended);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (fs_acl_util_$replace_segment_extended);

/**** SET_BIT_COUNT */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (hcs_$set_bc);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$set_bit_count);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (hcs_$set_bc);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$set_bc);

/**** SET_MAX_LENGTH */

MAKE_ENTRY_LABEL (OPx):				/* directory */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$set_max_length);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (hcs_$set_max_length);

/**** SET_RING_BRACKETS */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (set_directory_ring_brackets);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$set_ring_brackets);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (fs_msf_rb_util_$set);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (set_segment_ring_brackets);

/**** SET_SWITCH */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (set_directory_switch);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$set_switch);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (set_msf_switch);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (set_segment_switch);

/**** SUFFIX_INFO */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (directory_suffix_info);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (file_manager_$suffix_info);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	Code = error_table_$unsupported_operation;
	return (null_entry_);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (msf_suffix_info);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (segment_suffix_info);


/**** VALIDATE */

MAKE_ENTRY_LABEL (OPx):				/** directory */
	%set OPx to OPx + 1;
	return (directory_validate);
MAKE_ENTRY_LABEL (OPx):				/** dm_file */
	%set OPx to OPx + 1;
	return (dm_file_validate);
MAKE_ENTRY_LABEL (OPx):				/** link */
	%set OPx to OPx + 1;
	return (link_validate);
MAKE_ENTRY_LABEL (OPx):				/** msf */
	%set OPx to OPx + 1;
	return (msf_validate);
MAKE_ENTRY_LABEL (OPx):				/** segment */
	%set OPx to OPx + 1;
	return (segment_validate);


/****
      What follows here are the entrypoints that translate from
      hcs_ to the standard object_type_ interfaces for things except for acls. */

get_directory_ring_brackets:
     entry (Dir_name, Entryname, Rings, Code);

	declare Rings		 (*) fixed bin (3);
	Rings = 0;
	begin;
	     declare dir_rings	      (2) fixed bin (3) based (addr (Rings));
	     declare hcs_$get_dir_ring_brackets
				      entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	     call hcs_$get_dir_ring_brackets (Dir_name, Entryname, dir_rings, Code);
	end;
	return;


get_segment_ring_brackets:
     entry (Dir_name, Entryname, Rings, Code);

	declare Dir_name		 char (*) parameter;
	declare Entryname		 char (*) parameter;

	begin;
	     declare seg_rings	      (3) fixed bin (3) based (addr (Rings));
	     declare hcs_$get_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));

	     call hcs_$get_ring_brackets (Dir_name, Entryname, seg_rings, Code);
	end;
	return;


get_directory_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	declare Switch_name		 char (*) parameter;
	declare Switch_value	 bit (1) aligned;
	declare switch_name		 char (100);
	declare switch_value	 bit (1);

	switch_name = Switch_name;

	Code = 0;
	call GET_DIR_SWITCH;

	return;

get_segment_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	Code = 0;
	switch_name = Switch_name;
	call GET_SEG_SWITCH;
	return;

set_directory_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	switch_name = Switch_name;
	Code = 0;

	call SET_DIR_SWITCH;
	return;

set_segment_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	switch_name = Switch_name;
	Code = 0;

	call SET_SEG_SWITCH;
	return;

set_msf_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	switch_name = Switch_name;
	Code = 0;

	call SET_MSF_SWITCH;
	return;

get_msf_switch:
     entry (Dir_name, Entryname, Switch_name, Switch_value, Code);

	switch_name = Switch_name;
	Code = 0;

	call GET_MSF_SWITCH;
	return;



GET_DIR_SWITCH:
     procedure;

	declare type		 fixed bin;
	declare hcs_type		 fixed bin (2);
	declare (
	        SEG		 init (1),
	        DIR		 init (2),
	        MSF		 init (3)
	        )			 fixed bin int static options (constant);
	declare 1 sfb		 aligned like status_for_backup;
	declare 1 sb		 aligned like status_branch;
	declare (nivd, ncvd)	 fixed bin;

	type = DIR;
	go to Join;

GET_SEG_SWITCH:
     entry;

	type = SEG;
	go to Join;

GET_MSF_SWITCH:
     entry;

	type = MSF;

Join:
	if switch_name = "safety"
	then do;
		call hcs_$get_safety_sw (Dir_name, Entryname, switch_value, Code);
		Switch_value = switch_value;
	     end;

	else if switch_name = "audit"
	then do;
		sfb.version = status_for_backup_version_2;
		call hcs_$status_for_backup (Dir_name, Entryname, addr (sfb), Code);
		if Code = 0
		then Switch_value = sfb.audit_flag;
	     end;

	else if switch_name = "complete_volume_dump" | switch_name = "incremental_volume_dump"
	then do;
		if type = MSF
		then do;
			call hcs_$get_volume_dump_switches (pathname_ (Dir_name, Entryname), "0", nivd, ncvd, Code);
			if Code = error_table_$noentry
			then Code = error_table_$inconsistent_msf;
		     end;
		else call hcs_$get_volume_dump_switches (Dir_name, Entryname, nivd, ncvd, Code);
		if Code = 0
		then do;
			if switch_name = "complete_volume_dump"
			then Switch_value = (ncvd < 0);
						/* on if no_complete_vd is off */
			else Switch_value = (nivd < 0);
		     end;
	     end;

	else if ((type = SEG) & (switch_name = "copy" | switch_name = "synchronized")) | switch_name = "damaged"
	then do;
		call hcs_$status_long (Dir_name, Entryname, 1, addr (sb), null (), Code);
		if Code = 0
		then do;
			if switch_name = "copy"
			then Switch_value = sb.copy_switch;
			else if switch_name = "damaged"
			then Switch_value = sb.damaged_switch;
			else Switch_value = sb.synchronized_switch;
		     end;
	     end;
	else Code = error_table_$argerr;		/* We don't know this one. */

	return;

SET_DIR_SWITCH:
     entry;

	type = DIR;
	go to Join_set;

SET_SEG_SWITCH:
     entry;

	type = SEG;
	go to Join_set;

SET_MSF_SWITCH:
     entry;

	call hcs_$status_minf (Dir_name, Entryname, (1), hcs_type, (0), Code);
	if Code ^= 0
	then return;
	if hcs_type = 2
	/*** Dir */
	then type = MSF;
	else type = SEG;
	/*** treat SSF MSF as Segment */

Join_set:
	if switch_name = "safety"
	then call hcs_$set_safety_sw (Dir_name, Entryname, (Switch_value), Code);

	else if switch_name = "complete_volume_dump" & (type = MSF)
	then ;					/* do not try to set the switch on the MSF dir, but set it on the components */
	else if switch_name = "complete_volume_dump"
	then do;	/*** Note that the volume dumper entrypoint works like this:
		     a value of zero means, "don't change switch."
		     A value of 1 means "Set the switch," and a value of -1 means
		     "reset the switch." However, we are translating from a switch named
		     complete_volume_dump to no_complete_volume_dump, so we reverse the
		     values from the Switch_value to the flags. */
		if Switch_value
		then ncvd = -1;
		else ncvd = 1;
		call hcs_$set_volume_dump_switches (Dir_name, Entryname, 0, ncvd, Code);
	     end;
	else if switch_name = "incremental_volume_dump" & (type = MSF)
	then ;					/* ditto */
	else if switch_name = "incremental_volume_dump"
	then do;
		nivd, ncvd = 0;
		if Switch_value
		then nivd = -1;
		else nivd = 1;
		call hcs_$set_volume_dump_switches (Dir_name, Entryname, nivd, 0, Code);
	     end;

	else if switch_name = "copy" & (type = SEG | type = DIR)
	then call hcs_$set_copysw (Dir_name, Entryname, fixed (Switch_value, 1), Code);
	else if switch_name = "damaged"
	then call hcs_$set_damaged_sw (Dir_name, Entryname, (Switch_value), Code);
	else if switch_name = "synchronized" & (type = SEG)
	then call hcs_$set_synchronized_sw (Dir_name, Entryname, (Switch_value), Code);

	else Code = error_table_$argerr;		/* We don't know this one. */

	if type = MSF & Code = 0
	then call MAP_OVER_MSF_COMPONENTS (pathname_ (Dir_name, Entryname), switch_name, Switch_value, Code);
	return;


MAP_OVER_MSF_COMPONENTS:
     procedure (dir_name, switch_name, switch_value, code);

	declare dir_name		 char (*);
	declare switch_name		 char (*);
	declare switch_value	 bit (1) aligned;
	declare code		 fixed bin (35);
	declare entry_index		 fixed bin;
	declare get_system_free_area_	 entry () returns (ptr);
	declare hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				 fixed bin (35));

	declare cleanup		 condition;
%include star_structures;

	star_entry_ptr, star_names_ptr = null ();
	on cleanup
	     begin;
		if star_names_ptr ^= null ()
		then do;
			free star_names;
			star_names_ptr = null ();
		     end;
		if star_entry_ptr ^= null ()
		then do;
			free star_entries;
			star_entry_ptr = null ();
		     end;
	     end;

	call hcs_$star_ (dir_name, "**", star_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count, star_entry_ptr,
	     star_names_ptr, code);
	if code ^= 0
	then return;

	do entry_index = 1 to star_entry_count;
	     if star_entries (entry_index).type = star_SEGMENT
	     then call set_segment_switch (dir_name, star_names (star_entries (entry_index).nindex), switch_name,
		     switch_value, (0));		/* ignore errors */
						/* recurse ! */
	end;
	free star_names;
	free star_entries;
	return;
     end MAP_OVER_MSF_COMPONENTS;
     end GET_DIR_SWITCH;



list_directory_switches:
     entry (Desired_version, Area_ptr, Switch_list_ptr, Code);

	declare (Area_ptr, Switch_list_ptr)
				 pointer parameter;
	declare Desired_version	 char (*);
	declare area_ptr		 pointer;
	declare user_area		 area based (area_ptr);
	declare switch_list_type	 fixed bin;
	declare (
	        SEG		 init (1),
	        DIR		 init (2),
	        MSF		 init (3)
	        )			 fixed bin int static options (constant);

	switch_list_type = DIR;
	go to SWITCH_LIST_JOIN;

list_segment_switches:
     entry (Desired_version, Area_ptr, Switch_list_ptr, Code);

	switch_list_type = SEG;
	go to SWITCH_LIST_JOIN;

list_msf_switches:
     entry (Desired_version, Area_ptr, Switch_list_ptr, Code);

	switch_list_type = MSF;

SWITCH_LIST_JOIN:
	area_ptr = Area_ptr;
	if Desired_version ^= SWITCH_LIST_VERSION_1
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	if (switch_list_type = DIR) | (switch_list_type = MSF)
	then do;
		alloc_switch_count = 4;
		alloc_switch_name_count = 6;
	     end;
	else do;
		alloc_switch_count = 6;
		alloc_switch_name_count = 8;
	     end;

	allocate switch_list in (user_area);

	switch_list.version = SWITCH_LIST_VERSION_1;
	switch_list.switches (1).name_index = 1;
	switch_list.switches (1).name_count = 1;
	switch_list.switches (1).default_value = "0"b;

	switch_list.switches (2).name_index = 2;
	switch_list.switches (2).name_count = 1;
	switch_list.switches (2).default_value = "0"b;

	switch_list.switches (3).name_index = 3;
	switch_list.switches (3).name_count = 2;
	switch_list.switches (3).default_value = "0"b;

	switch_list.switches (4).name_index = 5;
	switch_list.switches (4).name_count = 2;
	switch_list.switches (4).default_value = "0"b;

	if switch_list_type = SEG
	then do;
		switch_list.switches (5).name_index = 7;
		switch_list.switches (5).name_count = 1;
		switch_list.switches (5).default_value = "0"b;

		switch_list.switches (6).name_index = 8;
		switch_list.switches (6).name_count = 1;
		switch_list.switches (6).default_value = "0"b;
	     end;

	switch_list.names (1) = "damaged";
	switch_list.names (2) = "safety";
	switch_list.names (3) = "complete_volume_dump";
	switch_list.names (4) = "cvd";
	switch_list.names (5) = "incremental_volume_dump";
	switch_list.names (6) = "ivd";
	if switch_list_type = SEG
	then do;
		switch_list.names (7) = "copy";
		switch_list.names (8) = "synchronized";
	     end;

	Switch_list_ptr = switch_list_ptr;
	return;




set_directory_ring_brackets:
     entry (Dir_name, Entryname, Rings, Code);

	begin;
	     declare dir_rings	      (2) fixed bin (3) based (addr (Rings));
	     declare hcs_$set_dir_ring_brackets
				      entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	     call hcs_$set_dir_ring_brackets (Dir_name, Entryname, dir_rings, Code);
	end;
	return;

set_segment_ring_brackets:
     entry (Dir_name, Entryname, Rings, Code);

	begin;
	     declare seg_rings	      (3) fixed bin (3) based (addr (Rings));
	     declare hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));

	     call hcs_$set_ring_brackets (Dir_name, Entryname, seg_rings, Code);
	end;
	return;


directory_suffix_info:
     entry (Suffix_info_ptr);

	declare Suffix_info_ptr	 pointer;

	suffix_info_ptr = Suffix_info_ptr;
	suffix_info.type = FS_OBJECT_TYPE_DIRECTORY;
	suffix_info.type_name = "directory";
	suffix_info.plural_name = "directories";
	suffix_info.flags = "0"b;
	suffix_info.standard_object = "1"b;
	suffix_info.has_switches = "1"b;
	suffix_info.modes = "sma";
	suffix_info.copy_flags = "0"b;
	suffix_info.copy_flags.names, suffix_info.copy_flags.acl, suffix_info.copy_flags.safety_switch,
	     suffix_info.copy_flags.dumper_switches = "1"b;
	suffix_info.max_mode_len = 3;
	suffix_info.num_ring_brackets = 2;
	suffix_info.info_pathname = "";		/* for now, at least */
	return;

msf_suffix_info:
     entry (Suffix_info_ptr);

	suffix_info_ptr = Suffix_info_ptr;

	suffix_info.type = FS_OBJECT_TYPE_MSF;
	suffix_info.type_name = "multi-segment file";
	suffix_info.plural_name = "multi-segment files";
	suffix_info.flags = "0"b;
	suffix_info.standard_object = "1"b;
	suffix_info.extended_acl = "1"b;
	suffix_info.modes = "rew";

	suffix_info.max_mode_len = 3;
	suffix_info.num_ring_brackets = 2;		/* who needs an msf gate? */
	suffix_info.copy_flags = "1"b;
	suffix_info.max_length, suffix_info.entry_bound, suffix_info.copy_switch, suffix_info.copy_flags.mbz = ""b;
	suffix_info.info_pathname = "";
	return;

segment_suffix_info:
     entry (Suffix_info_ptr);

	suffix_info_ptr = Suffix_info_ptr;
	suffix_info.type = FS_OBJECT_TYPE_SEGMENT;
	suffix_info.type_name = "segment";
	suffix_info.plural_name = "segments";
	suffix_info.flags = "0"b;
	suffix_info.standard_object = "1"b;
	suffix_info.has_switches = "1"b;
	suffix_info.extended_acl = "1"b;
	suffix_info.modes = "rew";
	suffix_info.copy_flags = "1"b;
	suffix_info.copy_flags.mbz = "0"b;
	suffix_info.max_mode_len = 3;
	suffix_info.num_ring_brackets = 3;
	suffix_info.info_pathname = "";		/* for now, at least */
	return;



directory_validate:
     entry (Dir_name, Entryname, Code);
	declare type		 char (32);

	call fs_get_type_ (Dir_name, Entryname, type, Code);
	if Code ^= 0
	then return;
	if type ^= FS_OBJECT_TYPE_DIRECTORY
	then Code = error_table_$not_seg_type;
	return;

segment_validate:
     entry (Dir_name, Entryname, Code);

	call fs_get_type_ (Dir_name, Entryname, type, Code);
	if Code ^= 0
	then return;
	if type ^= FS_OBJECT_TYPE_SEGMENT
	then Code = error_table_$not_seg_type;
	return;

link_validate:
     entry (Dir_name, Entryname, Code);

	call fs_get_type_ (Dir_name, Entryname, type, Code);
	if Code ^= 0
	then return;
	if type ^= FS_OBJECT_TYPE_LINK
	then Code = error_table_$not_seg_type;
	return;

msf_validate:
     entry (Dir_name, Entryname, Code);

	call fs_get_type_ (Dir_name, Entryname, type, Code);
	if Code ^= 0
	then return;

	if type ^= FS_OBJECT_TYPE_MSF
	then Code = error_table_$not_seg_type;

	return;

dm_file_validate:
     entry (Dir_name, Entryname, Code);

	call fs_get_type_ (Dir_name, Entryname, type, Code);
	if Code ^= 0
	then return;

	if type ^= FS_OBJECT_TYPE_DM_FILE
	then Code = error_table_$not_seg_type;
	return;

msf_get_user_access_modes:
     entry (Dir_name, Entryname, Username, Ring, Modes, Exmodes, Code);

	declare Username		 char (*);
	declare Ring		 fixed bin (3);
	declare (Modes, Exmodes)	 bit (36) aligned;

	call hcs_$get_user_access_modes (pathname_ (Dir_name, Entryname), "0", Username, Ring, Modes, Exmodes, Code);

	if Code = error_table_$noentry
	then Code = error_table_$inconsistent_msf;
	else do;
	     if Code = error_table_$notadir		/* special-case SSF's */
	     then call hcs_$get_user_access_modes (Dir_name, Entryname, Username, Ring, Modes, Exmodes, Code);
	     if Code = error_table_$incorrect_access	/* null to the dir */
		then do;
		Modes, Exmodes = ""b;
		Code = 0;
		return;
		end;
	     end;

	return;


get_bc_seg_or_dir:
     entry (Dir_name, Entryname, Bit_count, Code);

	declare Bit_count		 fixed bin (24);

	call hcs_$status_minf (Dir_name, Entryname, (1), (0), Bit_count, Code);
	return;


%include suffix_info;
%include copy_flags;

	declare (
	        addr,
	        fixed,
	        null,
	        sum
	        )			 builtin;
	declare (
	        error_table_$argerr,
	        error_table_$unsupported_operation,
	        error_table_$notadir,
	        error_table_$not_seg_type,
	        error_table_$incorrect_access,
	        error_table_$noentry,
	        error_table_$inconsistent_msf,
	        error_table_$unimplemented_version
	        )			 fixed bin (35) external;

	declare null_entry_		 entry;

	declare hcs_$delentry_file	 entry external;

	declare (
                  file_manager_$add_acl_entries,
	        file_manager_$add_extended_acl_entries,
	        file_manager_$chname_file,
	        file_manager_$copy,
	        file_manager_$delentry_file,
	        file_manager_$delete_acl_entries,
	        file_manager_$get_bit_count,
	        file_manager_$get_max_length,
	        file_manager_$get_ring_brackets,
	        file_manager_$get_switch,
	        file_manager_$get_user_access_modes,
	        file_manager_$list_acl,
	        file_manager_$list_extended_acl,
	        file_manager_$replace_acl,
	        file_manager_$replace_extended_acl,
	        file_manager_$set_bit_count,
	        file_manager_$set_max_length,
	        file_manager_$set_ring_brackets,
	        file_manager_$set_switch,
	        file_manager_$suffix_info
	        )			 entry external;
	declare (
	        fs_msf_rb_util_$set,
	        fs_msf_rb_util_$get
	        )			 entry external;
	declare file_manager_$list_switches
				 entry (pointer, pointer);

	declare (
	        fs_acl_util_$add_segment,
	        fs_acl_util_$add_directory,
	        fs_acl_util_$add_msf,
	        fs_acl_util_$delete_segment,
	        fs_acl_util_$delete_directory,
	        fs_acl_util_$delete_msf,
	        fs_acl_util_$list_segment,
	        fs_acl_util_$list_directory,
	        fs_acl_util_$list_msf,
	        fs_acl_util_$replace_segment,
	        fs_acl_util_$replace_directory,
	        fs_acl_util_$replace_msf,
	        fs_acl_util_$list_segment_extended,
	        fs_acl_util_$add_segment_extended,
	        fs_acl_util_$replace_segment_extended,
	        fs_acl_util_$list_msf_extended,
	        fs_acl_util_$add_msf_extended,
	        fs_acl_util_$replace_msf_extended
	        )			 entry external;

	declare (
	        fs_copy_util_$msf,
	        fs_copy_util_$segment
	        )			 external entry;

	declare (
	        hcs_$chname_file,
	        hcs_$set_bc,
	        hcs_$set_max_length,
	        hcs_$get_max_length
	        )			 entry external;
	declare hcs_$get_user_access_modes
				 entry (char (*), char (*), char (*), fixed bin (3), bit (36) aligned,
				 bit (36) aligned, fixed bin (35));
	declare pathname_		 entry (char (*), char (*)) returns (char (168));

	declare fs_get_type_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare hcs_$get_safety_sw	 entry (char (*), char (*), bit (1), fixed bin (35));
	declare hcs_$get_volume_dump_switches
				 entry (char (*), char (*), fixed bin, fixed bin, fixed bin (35));
	declare hcs_$set_safety_sw	 entry (char (*), char (*), bit (1), fixed bin (35));
	declare hcs_$set_volume_dump_switches
				 entry (char (*), char (*), fixed bin, fixed bin, fixed bin (35));
	declare hcs_$set_synchronized_sw
				 entry (char (*), char (*), bit (1), fixed bin (35));
	declare hcs_$set_copysw	 entry (char (*), char (*), fixed bin (1), fixed bin (35));
	declare hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	declare hcs_$set_damaged_sw	 entry (char (*), char (*), bit (1), fixed bin (35));
	declare hcs_$status_for_backup entry (char (*), char (*), ptr, fixed bin (35));
	declare hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),

				 fixed bin (35));
%include status_for_backup;
%include status_structures;
%include file_system_operations_;
     end fs_standard_object_;
