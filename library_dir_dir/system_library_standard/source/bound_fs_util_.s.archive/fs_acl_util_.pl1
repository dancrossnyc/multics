/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */


/* BIM 830919 */
/* MAP 831229 - fixed references to based arrays having zero elements */
/* MAP 840127 - changed same references to accomodate ring 0 bug */
/*            - free storage allocated by hcs_$list_acl when acl_count = 0 */
/*	    - set version in allocated structures */

/* format: style2,indcomtxt */

fs_acl_util_:
     procedure;
/****
      fs_acl_util_: This procedure converts calling sequences from the old
      acl listing sequence to the new one. As new-style calling sequences are
      made available for the primitive objects here, the calls here can be
      changed, and the callers of this changed to call the underlying
      interfaces directly. This program handles segments, directories,
      and MSF's. Other objects are hacked in suffix_XXX_. ****/

/****
      All arguments are as in hcs_, msf_manager_. */

	declare Dir_name		 char (*) parameter;
	declare Entryname		 char (*) parameter;
	declare Area_ptr		 pointer parameter;
	declare Acl_ptr		 pointer parameter;
	declare Code		 fixed bin (35);
	declare Desired_version	 char (8) aligned;
	declare No_SysDaemon	 bit (1);

%include acl_structures;
%page;

	declare old_acl_ptr		 pointer;
	declare system_free_area	 area based (get_system_free_area_ ());
	declare area_ptr		 pointer;
	declare user_area		 area based (area_ptr);
	declare code		 fixed bin (35);
	declare MSF_fcb		 pointer;
	declare null_acl		 bit (1) aligned;
	declare 1 null_segment_acl_array
				 dim (0:0) aligned like segment_acl_entry based (old_acl_ptr);
	declare 1 null_general_acl_entry
				aligned automatic dim (0:0) aligned like general_acl_entry;
	declare 1 null_general_delete_acl_entry
				 aligned automatic dim (0:0) aligned like delete_acl_entry;
	declare 1 null_general_extended_acl_entry
				 aligned automatic dim (0:0) aligned like general_extended_acl_entry;

	declare get_system_free_area_	 entry () returns (ptr);
	declare get_user_free_area_	 entry () returns (ptr);

	declare (
	        hcs_$list_acl,
	        hcs_$list_dir_acl,
	        file_manager_$list_acl
	        )			 entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));

	declare msf_manager_$acl_list	 entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin (35));

	declare (
	        hcs_$add_acl_entries,
	        hcs_$add_dir_acl_entries,
	        file_manager_$add_acl_entries
	        )			 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));

	declare msf_manager_$acl_add	 entry (ptr, ptr, fixed bin, fixed bin (35));

	declare (
	        hcs_$delete_acl_entries,
	        hcs_$delete_dir_acl_entries,
	        file_manager_$delete_acl_entries
	        )			 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));

	declare msf_manager_$acl_delete
				 entry (ptr, ptr, fixed bin, fixed bin (35));

	declare (
	        hcs_$replace_acl,
	        hcs_$replace_dir_acl,
	        file_manager_$replace_acl
	        )			 entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));

	declare msf_manager_$acl_replace
				 entry (ptr, ptr, fixed bin, bit (1), fixed bin (35));

	declare msf_manager_$open	 entry (char (*), char (*), ptr, fixed bin (35));
	declare msf_manager_$close	 entry (ptr);

	declare cleanup		 condition;

%page;

/****
      Entrypoint -- list_segment: Lists seg acls with only REW bits. */

list_segment:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	acl_ptr = null ();
	Code = 0;

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	if Desired_version ^= GENERAL_ACL_VERSION_1 & Acl_ptr = null ()
	then call BAD_VERSION;

	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then call BAD_VERSION;
	     end;

	call AREA_SETUP;

/**** * strategy: allocate old acl list in system_free_area_,
      then allocate appropriately sized new structure, copy, and
      free. */

	if acl_ptr = null ()
	then call FULL_LIST_SEG_ACL_CENSORED;
	else call SPECIFIC_LIST_SEG_ACL_CENSORED;

	return;

%page;

FULL_LIST_SEG_ACL_CENSORED:
     procedure;

	old_acl_ptr = null ();
	call hcs_$list_acl (Dir_name, Entryname, get_system_free_area_ (), old_acl_ptr, null (), acl_count, code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;
	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		return;
	     end;
	allocate general_acl in (user_area);
	general_acl.version = GENERAL_ACL_VERSION_1;
	call CONVERT_OLD_XACL_LIST;			/* does the free */
	Acl_ptr = acl_ptr;
	return;

     end FULL_LIST_SEG_ACL_CENSORED;


SPECIFIC_LIST_SEG_ACL_CENSORED:
     procedure;

	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;
	call hcs_$list_acl (Dir_name, Entryname, null (), null (), old_acl_ptr, acl_count, code);
	Code = code;				/* may be problem with specific entry */
	call CONVERT_OLD_XACL_LIST;
	return;

     end SPECIFIC_LIST_SEG_ACL_CENSORED;

%page;

/**** *
      add_segment: sets only raw acl bits for segments. */

add_segment:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	Code = 0;
	acl_ptr = Acl_ptr;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	if acl_ptr = null ()
	then call NULL_INPUT_PTR;

	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;


	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;
	old_acl_ptr -> segment_acl_array (*).extended_mode = ""b;
	call hcs_$add_acl_entries (Dir_name, Entryname, old_acl_ptr, acl_count, code);

	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;
	Code = code;
	return;

%page;

/****
      list_segment_extended_acl: This entrypoint supports the inner ring programs
      that implement extended objects, by allowing them to list the acl
      with xacl bits. */

list_segment_extended:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	acl_ptr = null ();
	Code = 0;

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	if Desired_version ^= GENERAL_EXTENDED_ACL_VERSION_1 & Acl_ptr = null ()
	then call BAD_VERSION;

	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
		then call BAD_VERSION;
	     end;

	call AREA_SETUP;

	if acl_ptr = null ()
	then call FULL_LIST_SEG_ACL;
	else call SPECIFIC_LIST_SEG_ACL;

	return;

%page;

FULL_LIST_SEG_ACL:
     procedure;

/****
      Here all we have to do is copy data from array to refer extent. */

	call hcs_$list_acl (Dir_name, Entryname, get_system_free_area_ (), old_acl_ptr, null (), acl_count, code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		return;
	     end;

	allocate general_extended_acl in (user_area);
	general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
	general_extended_acl.entries (*) = old_acl_ptr -> segment_acl_array (*);
	free old_acl_ptr -> segment_acl_array;
	Acl_ptr = acl_ptr;
	return;
     end FULL_LIST_SEG_ACL;


SPECIFIC_LIST_SEG_ACL:
     procedure;

	acl_count = general_extended_acl.count;
	if acl_count > 0
	then call hcs_$list_acl (Dir_name, Entryname, null (), null (), addr (general_extended_acl.entries),
	     acl_count, Code);
	else call hcs_$list_acl (Dir_name, Entryname, null (), null (), addr (null_general_extended_acl_entry),
	     0, Code);

	return;
     end SPECIFIC_LIST_SEG_ACL;

%page;

/****
      add_segment_extended: adds entries allowing specification of the xacl bits. */

add_segment_extended:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	Code = 0;
	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;

	acl_ptr = Acl_ptr;
	if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	then call BAD_VERSION;

	if general_extended_acl.count > 0
	then call hcs_$add_acl_entries (Dir_name, Entryname, addr (general_extended_acl.entries),
	     general_extended_acl.count, Code);
	else call hcs_$add_acl_entries (Dir_name, Entryname, addr (null_general_extended_acl_entry),
	     0, Code);
	return;

%page;

replace_segment:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);

	Code = 0;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	if Acl_ptr = null ()
	then
REPLACE_NULL_SEGMENT:
	     do;
		call hcs_$replace_acl (Dir_name, Entryname, null (), (0), No_SysDaemon, Code);
		return;
	     end;

	acl_ptr = Acl_ptr;
	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	acl_count = general_acl.count;

	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*).extended_mode = ""b;
	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;

	call hcs_$replace_acl (Dir_name, Entryname, old_acl_ptr, acl_count, No_SysDaemon, Code);

	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;
	return;

%page;

/****
      replace_segment_extended: like add_segment_extended */

replace_segment_extended:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);

	Code = 0;
	if Acl_ptr = null ()
	then go to REPLACE_NULL_SEGMENT;

	acl_ptr = Acl_ptr;
	if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	then call BAD_VERSION;

	if general_extended_acl.count > 0
	then call hcs_$replace_acl (Dir_name, Entryname, addr (general_extended_acl.entries), general_extended_acl.count,
	     No_SysDaemon, Code);
	else call hcs_$replace_acl (Dir_name, Entryname, addr (null_general_extended_acl_entry), 0,
	     No_SysDaemon, Code);

	return;

%page;

/****
      delete_segment: deletes segment acl's */

delete_segment:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	Code = 0;

	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
	acl_ptr = Acl_ptr;
	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then call BAD_VERSION;

	if general_delete_acl.count > 0
	then call hcs_$delete_acl_entries (Dir_name, Entryname, addr (general_delete_acl.entries), general_delete_acl.count,
	     Code);
	else call hcs_$delete_acl_entries (Dir_name, Entryname, addr (null_general_delete_acl_entry), 0,
	     Code);

	return;

%page;

/****

      list_directory: list the directory acl. This is just a matter of an
      array. */

list_directory:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	acl_ptr = null ();
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> directory_acl_array;
		old_acl_ptr = null ();
	     end;

	if Area_ptr = null () & Acl_ptr = null ()
	then call NULL_INPUT_PTR;

	Code = 0;
	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then call BAD_VERSION;
	     end;
	else if Desired_version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	call AREA_SETUP;

	if acl_ptr = null ()
	then call FULL_LIST_DIR_ACL;
	else call SPECIFIC_LIST_DIR_ACL;

	return;

%page;

FULL_LIST_DIR_ACL:
     procedure;

	old_acl_ptr = null ();
	call hcs_$list_dir_acl (Dir_name, Entryname, get_system_free_area_ (), old_acl_ptr, null (), acl_count, code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> directory_acl_array;
		return;
	     end;

	allocate general_acl in (user_area);
	general_acl.version = GENERAL_ACL_VERSION_1;
	general_acl.entries (*) = old_acl_ptr -> directory_acl_array (*);
	free old_acl_ptr -> directory_acl_array;
	Acl_ptr = acl_ptr;
	return;
     end FULL_LIST_DIR_ACL;

%page;

SPECIFIC_LIST_DIR_ACL:
     procedure;

	acl_count = general_acl.count;
	if acl_count > 0
	then call hcs_$list_dir_acl (Dir_name, Entryname, null (), null (), addr (general_acl.entries), acl_count, Code);
	else call hcs_$list_dir_acl (Dir_name, Entryname, null (), null (), addr (null_general_acl_entry), 0, Code);

	return;
     end SPECIFIC_LIST_DIR_ACL;

%page;

/****
      add_directory: adds dir entries */

add_directory:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
	acl_ptr = Acl_ptr;
	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	if general_acl.count > 0
	then call hcs_$add_dir_acl_entries (Dir_name, Entryname, addr (general_acl.entries), general_acl.count, Code);
	else call hcs_$add_dir_acl_entries (Dir_name, Entryname, addr (null_general_acl_entry), 0, Code);

	return;

%page;

/****
      delete_directory: deletes directory entries */

delete_directory:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
 	acl_ptr = Acl_ptr;
	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then call BAD_VERSION;

	if general_delete_acl.count > 0
	then call hcs_$delete_dir_acl_entries (Dir_name, Entryname, addr (general_delete_acl.entries),
	     general_delete_acl.count, Code);
	else call hcs_$delete_dir_acl_entries (Dir_name, Entryname, addr (null_general_delete_acl_entry),
	     0, Code);

	return;

%page;

/****
      replace_directory:  replaces directory acl. */

replace_directory:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);

	acl_ptr = Acl_ptr;
	if acl_ptr = null ()
	then do;
		call hcs_$replace_dir_acl (Dir_name, Entryname, null (), 0, No_SysDaemon, Code);
		return;
	     end;

	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	if general_acl.count > 0
	then call hcs_$replace_dir_acl (Dir_name, Entryname, addr (general_acl.entries), general_acl.count, No_SysDaemon,
	     Code);
	else call hcs_$replace_dir_acl (Dir_name, Entryname, addr (null_general_acl_entry), 0, No_SysDaemon,
	     Code);

	return;

%page;

/**** *
      list_dm_file: data management (file_manager_) files */

list_dm_file:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	acl_ptr = null ();
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	if Area_ptr = null () & Acl_ptr = null ()
	then call NULL_INPUT_PTR;

	Code = 0;
	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then call BAD_VERSION;
	     end;
	else if Desired_version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	call AREA_SETUP;

	if acl_ptr = null ()
	then call FULL_LIST_DM_ACL;
	else call SPECIFIC_LIST_DM_ACL;

	return;

%page;

FULL_LIST_DM_ACL:
     procedure;

	old_acl_ptr = null ();
	call file_manager_$list_acl (Dir_name, Entryname, get_system_free_area_ (), old_acl_ptr, null (), acl_count,
	     code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		return;
	     end;


	allocate general_acl in (user_area);
	general_acl.version = GENERAL_ACL_VERSION_1;
	call CONVERT_OLD_XACL_LIST;
	Acl_ptr = acl_ptr;
	return;
     end FULL_LIST_DM_ACL;

%page;

SPECIFIC_LIST_DM_ACL:
     procedure;

	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;
	call file_manager_$list_acl (Dir_name, Entryname, null (), null (), old_acl_ptr, acl_count, code);
	call CONVERT_OLD_XACL_LIST;
	Code = code;
	return;
     end SPECIFIC_LIST_DM_ACL;

%page;

/****
      No extended entrypoints for files yet, since there is no hurry. */

/****
      add_dm_file: adds dm entries */

add_dm_file:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	Code = 0;
	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
	acl_ptr = Acl_ptr;
	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;
	old_acl_ptr -> segment_acl_array (*).extended_mode = ""b;
	call file_manager_$add_acl_entries (Dir_name, Entryname, old_acl_ptr, acl_count, Code);

	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;

	return;

%page;

/****
      delete_dm_file: deletes file entries */

delete_dm_file:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
 	acl_ptr = Acl_ptr;
	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then call BAD_VERSION;

	if general_acl.count > 0
	then call file_manager_$delete_acl_entries (Dir_name, Entryname, addr (general_delete_acl.entries),
	     general_delete_acl.count, Code);
	else call file_manager_$delete_acl_entries (Dir_name, Entryname, addr (null_general_delete_acl_entry),
	     0, Code);

	return;

%page;

/****
      replace_dm_file:  replaces file acl. */

replace_dm_file:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	acl_ptr = Acl_ptr;
	Code = 0;
	if acl_ptr = null ()
	then do;
		call file_manager_$replace_acl (Dir_name, Entryname, null (), 0, No_SysDaemon, Code);
		return;
	     end;

	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	acl_count = general_acl.count;

	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);
	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;

	call file_manager_$replace_acl (Dir_name, Entryname, old_acl_ptr, acl_count, No_SysDaemon, Code);

	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;

	return;

%page;

/****
      The next group of entrypoints are for MSF_manager,
      that has all the problems hcs_ has plus having to open the MSF. */

list_msf:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	Code = 0;
	acl_ptr = null ();
	if Area_ptr = null () & Acl_ptr = null ()
	then call NULL_INPUT_PTR;

	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then call BAD_VERSION;
	     end;
	else if Desired_version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;


	call AREA_SETUP;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if acl_ptr = null ()
	then call FULL_LIST_MSF_ACL_CENSORED;
	else call SPECIFIC_LIST_MSF_ACL_CENSORED;

	call msf_manager_$close (MSF_fcb);
	return;

%page;

FULL_LIST_MSF_ACL_CENSORED:
     procedure;

	call msf_manager_$acl_list (MSF_fcb, get_system_free_area_ (), old_acl_ptr, null (), acl_count, Code);
	if Code ^= 0
	then return;
	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		return;
	     end;
	allocate general_acl in (user_area);
	general_acl.version = GENERAL_ACL_VERSION_1;
	call CONVERT_OLD_XACL_LIST;			/* does the free, as well */
	Acl_ptr = acl_ptr;
	return;
     end FULL_LIST_MSF_ACL_CENSORED;

SPECIFIC_LIST_MSF_ACL_CENSORED:
     procedure;

	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;
	call msf_manager_$acl_list (MSF_fcb, null (), null (), old_acl_ptr, acl_count, Code);
	call CONVERT_OLD_XACL_LIST;
	return;
     end SPECIFIC_LIST_MSF_ACL_CENSORED;

%page;

/****
      list_msf_extended:  lists extended acls of MSF acls. */

list_msf_extended:
     entry (Dir_name, Entryname, Desired_version, Area_ptr, Acl_ptr, Code);

	acl_ptr = null ();
	Code = 0;

	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	if Desired_version ^= GENERAL_EXTENDED_ACL_VERSION_1 & Acl_ptr = null ()
	then call BAD_VERSION;

	if Acl_ptr ^= null ()
	then do;
		acl_ptr = Acl_ptr;
		if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
		then call BAD_VERSION;
	     end;

	call AREA_SETUP;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if acl_ptr = null ()
	then call FULL_LIST_MSF_ACL;
	else call SPECIFIC_LIST_MSF_ACL;

	call msf_manager_$close (MSF_fcb);
	return;

%page;

FULL_LIST_MSF_ACL:
     procedure;

	call msf_manager_$acl_list (MSF_fcb, get_system_free_area_ (), old_acl_ptr, null (), acl_count, code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	if acl_count = 0
	then do;
		Acl_ptr = null ();
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		return;
	     end;

	allocate general_extended_acl in (user_area);
	general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
	general_extended_acl.entries (*) = old_acl_ptr -> segment_acl_array (*);
	free old_acl_ptr -> segment_acl_array;
	Acl_ptr = acl_ptr;
	return;
     end FULL_LIST_MSF_ACL;

SPECIFIC_LIST_MSF_ACL:
     procedure;

	if general_extended_acl.count > 0
	then call msf_manager_$acl_list (MSF_fcb, null (), null (), addr (general_extended_acl.entries),
	     general_extended_acl.count, Code);
	else call msf_manager_$acl_list (MSF_fcb, null (), null (), addr (null_general_extended_acl_entry),
	     0, Code);

	return;
     end SPECIFIC_LIST_MSF_ACL;

%page;

/****
      add_msf: adds entries for MSF */

add_msf:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	acl_ptr = Acl_ptr;
	Code = 0;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	if acl_ptr = null ()
	then call NULL_INPUT_PTR;
	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then call BAD_VERSION;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	acl_count = general_acl.count;
	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;
	call msf_manager_$acl_add (MSF_fcb, old_acl_ptr, general_acl.count, Code);

	call msf_manager_$close (MSF_fcb);

	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;

	return;

%page;

/****
      add_msf_extended: adds entries for MSF */

add_msf_extended:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	acl_ptr = Acl_ptr;
	Code = 0;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;

	if acl_ptr = null ()
	then call NULL_INPUT_PTR;
	if general_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	then call BAD_VERSION;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if general_extended_acl.count > 0
	then call msf_manager_$acl_add (MSF_fcb, addr (general_extended_acl.entries), general_extended_acl.count, Code);
	else call msf_manager_$acl_add (MSF_fcb, addr (null_general_extended_acl_entry), 0, Code);

	call msf_manager_$close (MSF_fcb);
	return;

%page;

/****
      delete_msf: deletes msf acl entries */

delete_msf:
     entry (Dir_name, Entryname, Acl_ptr, Code);

	if Acl_ptr = null ()
	then call NULL_INPUT_PTR;
	acl_ptr = Acl_ptr;
	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then call BAD_VERSION;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if general_delete_acl.count > 0
	then call msf_manager_$acl_delete (MSF_fcb, addr (general_delete_acl.entries), general_delete_acl.count, Code);
	else call msf_manager_$acl_delete (MSF_fcb, addr (null_general_delete_acl_entry), 0, Code);

	call msf_manager_$close (MSF_fcb);
	return;

%page;

/****
      replace_msf: replaces msf acls. */

replace_msf:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);


	acl_ptr = Acl_ptr;
	Code = 0;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then free old_acl_ptr -> segment_acl_array;
		old_acl_ptr = null ();
	     end;
	if acl_ptr = null ()
	then null_acl = "1"b;
	else null_acl = "0"b;

	if ^null_acl
	then if general_acl.version ^= GENERAL_ACL_VERSION_1
	     then call BAD_VERSION;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if null_acl
	then
MSF_REPLACE_NULL:
	     do;
		call msf_manager_$acl_replace (MSF_fcb, null (), 0, No_SysDaemon, Code);
		call msf_manager_$close (MSF_fcb);
		return;
	     end;

	acl_count = general_acl.count;

	if acl_count > 0
	then allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	else allocate null_segment_acl_array in (system_free_area) set (old_acl_ptr);
	old_acl_ptr -> segment_acl_array (*) = general_acl.entries (*), by name;
	call msf_manager_$acl_replace (MSF_fcb, old_acl_ptr, acl_count, No_SysDaemon, Code);
	if acl_count > 0
	then general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;

	call msf_manager_$close (MSF_fcb);
	return;

%page;

/****
      replace_msf_extended -- allows xacl replacement for MSF'S */

replace_msf_extended:
     entry (Dir_name, Entryname, Acl_ptr, No_SysDaemon, Code);


	acl_ptr = Acl_ptr;
	if acl_ptr = null ()
	then null_acl = "1"b;
	else null_acl = "0"b;

	if ^null_acl
	then if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	     then call BAD_VERSION;

	call msf_manager_$open (Dir_name, Entryname, MSF_fcb, Code);
	if Code ^= 0
	then return;

	if null_acl
	then go to MSF_REPLACE_NULL;

	if general_extended_acl.count > 0
	then call msf_manager_$acl_replace (MSF_fcb, addr (general_extended_acl.entries), general_extended_acl.count,
	     No_SysDaemon, Code);
	else call msf_manager_$acl_replace (MSF_fcb, addr (null_general_extended_acl_entry), 0,
	     No_SysDaemon, Code);

	call msf_manager_$close (MSF_fcb);
	return;

%page;

CONVERT_OLD_XACL_LIST:
     procedure;

/****
      This procedure assumes that there is a segment_acl_array based (old_acl_ptr)
      to be copied into a general_acl, and freed. */

	if general_acl.count > 0
	then general_acl.entries (*) = old_acl_ptr -> segment_acl_array (*), by name;
	free old_acl_ptr -> segment_acl_array;
	return;
     end CONVERT_OLD_XACL_LIST;

%page;

AREA_SETUP:
     procedure;

	if Area_ptr = null ()
	then area_ptr = get_user_free_area_ ();		/* may not be used if we are listing specifically */
	else area_ptr = Area_ptr;
	return;

     end AREA_SETUP;

BAD_VERSION:
     procedure;

%include sub_err_flags;
	declare sub_err_		 entry () options (variable);
	declare error_table_$unimplemented_version
				 fixed bin (35) ext static;
	declare error_table_$null_info_ptr
				 fixed bin (35) ext static;

/**** *
      file_system_ is supposed to check these version, but we signal here
      just in case. */

	call sub_err_ (error_table_$unimplemented_version, "Invalid ACL structure version", ACTION_CANT_RESTART,
	     null (), (0), "");

	return;

NULL_INPUT_PTR:
     entry;

	call sub_err_ (error_table_$null_info_ptr, "Null ACL structure pointer", ACTION_CANT_RESTART, null (), (0), "");
	return;
     end BAD_VERSION;

     end fs_acl_util_;
