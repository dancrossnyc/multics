/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1984    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */

/* format: style3 */

describe_entry_type:
dset:
     procedure () options (variable);

/* describe_entry_type: Command/AF to show information about an entry type.
   list_entry_type: Command/AF to list all suffix_XXX_ that can be found by search rules.

   Jay Pattin 7/2/83 as describe_object_type
   1984.03.20 MAP to use fs_util_
   1984.07.23 MAP to become "entry " instead of "object"
   1984.11.08 MAP general cleanup to prepare for installation
*/


/****^  HISTORY COMMENTS:
  1) change(88-01-01,Gilcrease), approve(88-05-05,MCR7835),
     audit(88-05-05,Dupuis), install(88-05-31,MR12.2-1049):
               Correct to allow dm_file, and improve output.
                                                   END HISTORY COMMENTS */


declare	active_function	bit (1) aligned,
	(all, attributes, brief, default, info_path, info_path_given, name,
	 plural, modes, xacl, switches, explicit_switches)
			bit (1) aligned,
	area_ptr		ptr,
	arg_count		fixed bin,
	arg_idx		fixed bin,
	arg_len		fixed bin (21),
	arg_ptr		ptr,
	arg		char (arg_len) based (arg_ptr),
	buffer		char (128) varying,
	code		fixed bin (35),
	complain		entry options (variable) variable,
	dir		char (168),
	display_name	char (32),
	(high, low)	fixed bin,
	looking_for_types	bit (1) aligned,
	(idx, name_idx, rule)
			fixed bin,
	entry		char (32),
	ref_name		char (32),
	ret_len		fixed bin (21),
	ret_ptr		ptr,
	ret_str		char (ret_len) varying based (ret_ptr),
	switch_name	char (32) aligned,
	type		char (32),
	type_count	fixed bin,
	type_name		(100) char (32),
	type_no		fixed bin,
	whoami		char (32);

declare	1 si		aligned like suffix_info;
declare	1 search_rules	aligned,
	  2 number	fixed bin,
	  2 names		(20) char (168) aligned;

declare	ATTRIBUTE_NAMES	(8) char (32) varying internal static options (constant)
			init ("names", "ACL", "ring brackets", "max length", "copy switch", "safety switch",
			"dumper switches", "entry bound");
declare  THIRTY_TWO_SPACES    char (32) internal static options (constant)
			init ((32)" ");

declare	(addr, baseptr, hbound, length, ltrim, max, null, reverse, rtrim, search, string, substr, sum)
			builtin,
	cleanup		condition;

declare	(
	error_table_$bad_arg,
	error_table_$badopt,
	error_table_$inconsistent,
	error_table_$noarg,
	error_table_$nomatch,
	error_table_$not_act_fnc
	)		fixed bin (35) external;

declare	(
	active_fnc_err_,
	active_fnc_err_$suppress_name,
	com_err_,
	com_err_$suppress_name
	)		entry options (variable),
	cu_$af_return_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35)),
	get_system_free_area_
			entry returns (ptr),
	get_wdir_		entry returns (char (168)),
	hcs_$fs_get_ref_name
			entry (ptr, fixed bin, char (*), fixed bin (35)),
	hcs_$get_search_rules
			entry (ptr),
	hcs_$high_low_seg_count
			entry (fixed bin, fixed bin),
	hcs_$star_	entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
	hcs_$status_minf	entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	ioa_		entry options (variable),
	fs_util_$list_switches_for_type
			entry (char (*), char (*), ptr, ptr, fixed bin (35)),
	fs_util_$suffix_info_for_type
			entry (char (*), ptr, fixed bin (35)),
	fs_util_$make_entry_for_type
			entry (char (*), char (*), entry, fixed bin (35)),
	requote_string_	entry (char (*) aligned) returns (char (*)),
	search_paths_$find_dir
			entry (char (*), ptr, char (*), char (*), char (*), fixed bin (35));
%page;
%include suffix_info;
%page;
%include copy_flags;
%page;
%include star_structures;
%page;

	whoami = "describe_entry_type";

	call cu_$af_return_arg (arg_count, ret_ptr, ret_len, code);
	call setup (code, DSET_EXIT);

	if arg_count = 0 | (arg_count = 1 & active_function)
	then do;
		if active_function
		then call active_fnc_err_$suppress_name (0, whoami, "Usage:  [dset suffix -control_args]");
		else call com_err_$suppress_name (0, whoami, "Usage:  dset suffix {-control_args}");
		return;
	     end;

	all, attributes, brief, default, info_path, info_path_given, name,
	     plural, modes, xacl, switches, explicit_switches = "0"b;

/* process the arguments */

	type_count = 0;
	looking_for_types = "1"b;

	do arg_idx = 1 to arg_count;

	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
	     if (code ^= 0) | (arg_len < 1)
	     then do;
BADARG:
		if code = 0
		then code = error_table_$bad_arg;
		     call complain (code, whoami, "Argument number ^d.", arg_idx);
		     return;
		end;

	     if (substr (arg, 1, 1) = "-") & looking_for_types
	     then looking_for_types = "0"b;

	     if looking_for_types
	     then do;
		     type_count = type_count + 1;
		     if arg = "segment"
		     then type_name (type_count) = FS_OBJECT_TYPE_SEGMENT;
		     else if arg = "directory"
		     then type_name (type_count) = FS_OBJECT_TYPE_DIRECTORY;
		     else if arg = "msf"
		     then type_name (type_count) = FS_OBJECT_TYPE_MSF;
		     else if arg = "dm_file"
		     then type_name (type_count) = FS_OBJECT_TYPE_DM_FILE;
		     else if arg = "link"
		     then type_name (type_count) = FS_OBJECT_TYPE_LINK;
		     else type_name (type_count) = arg;
		end;
	     else do;

		     if ^active_function & (arg = "-all" | arg = "-a")
		     then all = "1"b;
		     else if arg = "-attributes" | arg = "-attr"
		     then attributes = "1"b;
		     else if arg = "-info_pathname" | arg = "-ipn"
		     then info_path, info_path_given = "1"b;
		     else if arg = "-modes"
		     then modes = "1"b;
		     else if arg = "-name" | arg = "-nm"
		     then name = "1"b;
		     else if arg = "-plural_name" | arg = "-plnm"
		     then plural = "1"b;
		     else if arg = "-switches"
		     then switches, explicit_switches = "1"b;
		     else if active_function & (arg = "-extended_acl" | arg = "-xacl")
		     then xacl = "1"b;
		     else if arg = "-default"
		     then do;
			     if arg_count = arg_idx
			     then do;
				     call complain (error_table_$noarg, whoami, "Following ^a.", arg);
				     return;
				end;
			     if default
			     then do;
				     call complain (0, whoami, "Only one -default may be given.");
				     return;
				end;
			     arg_idx = arg_idx + 1;
			     call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
			     if code ^= 0
			     then goto BADARG;

			     switch_name = arg;
			     default = "1"b;
			end;
		     else do;
BADOPT:
			     call complain (error_table_$badopt, whoami, "^a", arg);
			     return;
			end;
		end;

	end;

	if type_count = 0
	then do;
		call complain (error_table_$noarg, whoami, "^/A type name must be specified.");
		return;
	     end;

	if default & (all | switches)
	then do;
		call complain (error_table_$inconsistent, whoami, "-default may not be used with -all or -switches");
		return;
	     end;

	if active_function &
	     (arg_count - type_count > 2) &
	     ^((arg_count - type_count = 2) & default)
	then do;
		call complain (0, whoami, "Only one attribute may be returned.");
		return;
	     end;

	do type_no = 1 to type_count;

	     type = type_name (type_no);

	     si.version = SUFFIX_INFO_VERSION_1;
	     call fs_util_$suffix_info_for_type (type, addr (si), code);
	     if code ^= 0
	     then do;
		     call complain (0, whoami, "There is no extended entry type with the suffix ""^a"".", type);
		     return;
		end;

	     if si.standard_object
	     then if ^(active_function | brief)
		then call ioa_ ("""^a"" is a standard entry type.", substr (type, 2));

	     switch_list_ptr = null ();
	     on cleanup
		begin;
		     if switch_list_ptr ^= null ()
		     then free switch_list;
		end;

	     if all | (arg_count - type_count = 0)	/* defaults */
	     then attributes, switches, name, info_path, plural, modes = "1"b;
	     else if (arg_count - type_count = 1)
		then brief = "1"b;

	     if switches | switch_name ^= ""
	     then do;
		     area_ptr = get_system_free_area_ ();
		     call fs_util_$list_switches_for_type (type, SWITCH_LIST_VERSION_1, area_ptr, switch_list_ptr,
			(0));
		end;

	     if default
	     then if ^si.has_switches
		then do;
		     if ^active_function
			& ^all & (arg_count > 1)  /* by explicit request for switches */
		     then call ioa_ ("The ^a entry type does not support any switches.", si.type_name);
		     else if active_function
		     then ret_str = "";
		end;

	     else do;
		     idx = 0;
		     do arg_idx = 1 to switch_list.switch_count while (idx = 0);
			do name_idx = 0 to switch_list.name_count (arg_idx) - 1 while (idx = 0);
			     if switch_list.names (arg_idx + name_idx) = switch_name
			     then idx = arg_idx;
			end;
		     end;
		     if name_idx = 0
		     then do;
			     call complain (0, whoami, "The ^a type does not support the ^a switch.", si.type_name,
				switch_name);
			     free switch_list;
			     return;
			end;
		end;

	     if name then do;
		display_name = si.type_name;
		if display_name = "multi-segment file" then display_name = "multisegment file";
		if display_name = "DM file" then display_name = "data management file";
	          if active_function
		then ret_str = requote_string_ ((display_name));
		else call ioa_ ("^[Name:^24t^]^a", ^brief, display_name);
	     end;

	     if plural then do;
		display_name = si.plural_name;
		if display_name = "multi-segment files" then display_name = "multisegment files";
		if display_name = "DM files" then display_name = "data management files";
	          if active_function
		then ret_str = requote_string_ ((display_name));
		else call ioa_ ("^[Plural name:^24t^]^a", ^brief, display_name);
	     end;

	     if modes
	     then do;
		     if active_function
		     then ret_str = requote_string_ (si.modes);
		     else call ioa_ ("^[Access modes:^24t^]^a", ^brief, si.modes);
		end;

	     if xacl
	     then if si.extended_acl
		then ret_str = "true";
		else ret_str = "false";

	     if attributes
	     then do;
		     if active_function
		     then ret_str = "";
		     else buffer = "";
		     do idx = 1 to hbound (ATTRIBUTE_NAMES, 1);
			if substr (string (si.copy_flags), idx, 1)
			then if active_function
			     then ret_str = ret_str || requote_string_ ((ATTRIBUTE_NAMES (idx))) || " ";
			     else if buffer = ""
			     then buffer = ATTRIBUTE_NAMES (idx);
			     else buffer = buffer || ", " || ATTRIBUTE_NAMES (idx);
		     end;
		     if ^active_function
		     then do;
			     if buffer ^= ""
			     then call ioa_ ("^[Supported attributes:^24t^]^a", ^brief, buffer);
			     if si.extend | si.update
			     then call ioa_ ("^a may be ^[updated^]^[ and ^]^[extended^] by the copy command",
				     si.plural_name, si.update, (si.update & si.extend), si.extend);
			end;
		end;

	     if default & si.has_switches
		then if active_function
		     then if switch_list.default_value (idx)
		          then ret_str = "on";
		          else ret_str = "off";
		else call ioa_ ("^[^s^;^a defaults to ^]^[on^;off^]", brief, switch_name, switch_list.default_value (idx));

	     if switches
	     then if ^si.has_switches
		then do;
		     if ^active_function & explicit_switches
		     then call ioa_ ("The ^a entry type does not support any switches.", si.type_name);
		     else if active_function
		     then ret_str = "";
		end;
		else do;
		     arg_idx = 18;
		     if ^active_function
		     then do;
			call ioa_ ("Switches:");
			do idx = 1 to switch_list.switch_name_count;
			     arg_idx = max (arg_idx, length (rtrim (switch_list.names (idx))));
			end;
		     end;
		     arg_idx = arg_idx + 6;

		     do idx = 1 to switch_list.switch_count;
			switch_name = switch_list.names (switch_list.name_index (idx));
			if active_function
			then ret_str = ret_str || requote_string_ (switch_name) || " ";
			else do;
				call ioa_ ("^3x^a:^vt^[on^;off^]", switch_name, arg_idx,
				     switch_list.default_value (idx));
				if all
				then do name_idx = 1 to switch_list.name_count (idx) - 1;
					call ioa_ ("^6x^a",
					     switch_list.names (switch_list.name_index (idx) + name_idx));
				     end;
			     end;
		     end;
		end;

	     if switch_list_ptr ^= null ()
	     then free switch_list;

	     if info_path
	     then do;
		     if si.info_pathname = ""
		     then do;
NO_INFO:
			     if active_function | info_path_given
			     then call complain (0, whoami, "No info segment available for ^a.", si.plural_name);
			end;
		     else do;
			     if search (si.info_pathname, "<>") > 0
			     then do;		/* pathname given */
				     call expand_pathname_ (si.info_pathname, dir, entry, code);
				     if code ^= 0
				     then goto NO_INFO;

				     call hcs_$status_minf (dir, entry, 1, (0), (0), code);
				     if code ^= 0
				     then goto NO_INFO;
				end;
			     else do;		/* entryname only, use search list */
				     call search_paths_$find_dir ("info", null (), si.info_pathname, "", dir,
					code);
				     if code ^= 0
				     then goto NO_INFO;
				end;
			     if active_function
			     then ret_str = si.info_pathname;
			     else call ioa_ ("Type ""help ^a"" for more information on ^a.", si.info_pathname,
				     si.plural_name);
			end;
		end;

	     if type_count > 1
	     then if ^active_function
		then call ioa_ ("");

	end;

DSET_EXIT:
	return;

%page;

list_entry_types:
lset:
     entry () options (variable);

	whoami = "list_entry_types";
	call cu_$af_return_arg (arg_count, ret_ptr, ret_len, code);
	call setup (code, LSET_EXIT);
	area_ptr = get_system_free_area_ ();

	if arg_count ^= 0
	then do;
		if active_function
		then call active_fnc_err_$suppress_name (0, whoami, "Usage:  [lset]");
		else call com_err_$suppress_name (0, whoami, "Usage:  lset");
		return;
	     end;

	call hcs_$high_low_seg_count (high, low);
	high = high + low;
	call hcs_$get_search_rules (addr (search_rules));

	type_count = 0;
	star_entry_ptr, star_names_ptr = null ();
	on cleanup
	     begin;
		if star_entry_ptr ^= null ()
		then free star_entries;
		if star_names_ptr ^= null ()
		then free star_names;
	     end;

	do rule = 1 to search_rules.number;
	     if search_rules.names (rule) = "initiated_segments"
	     then do;
		     do idx = low to high;
			code = 0;
			do name_idx = 1 repeat name_idx + 1 while (code = 0);
			     call hcs_$fs_get_ref_name (baseptr (idx), name_idx, ref_name, code);
			     if code = 0
			     then if substr (ref_name, 1, 7) = "suffix_"
				then call check_name (ref_name);
			end;
		     end;
		end;
	     else if search_rules.names (rule) = "referencing_dir"
	     then ;				/* IGNORE */
	     else if search_rules.names (rule) = "working_dir"
	     then do;
		     dir = get_wdir_ ();
		     goto STAR_JOIN;
		end;
	     else if substr (search_rules.names (rule), 1, 1) ^= ">"
	     then call complain (0, whoami, "Unknown search rule ^a.", search_rules.names (rule));
	     else do;
		     dir = search_rules.names (rule);
STAR_JOIN:
		     call hcs_$star_ (dir, "suffix_*", star_ALL_ENTRIES, area_ptr, star_entry_count, star_entry_ptr,
			star_names_ptr, code);
		     if code ^= 0
		     then if code ^= error_table_$nomatch
			then call complain (code, whoami, "Listing ^a.", search_rules.names (rule));
			else ;
		     else do;
			     do idx = 1 to hbound (star_names, 1);
				call check_name (star_names (idx));
			     end;
			     free star_names;
			     free star_entries;
			end;
		end;
	end;

/* The standard names are few, relatively stable, and therefore hardcoded */

	call check_name (FS_OBJECT_TYPE_SEGMENT);
	call check_name (FS_OBJECT_TYPE_DIRECTORY);
	call check_name (FS_OBJECT_TYPE_MSF);
	call check_name (FS_OBJECT_TYPE_DM_FILE);
	call check_name (FS_OBJECT_TYPE_LINK);

LSET_EXIT:
	return;

%page;

check_name:
     proc (name);

declare	name		char (*),
	a_type_name	char (32),
	display_type	char (32),
	display_select	char (32),
	idx		fixed bin,
	info_entry	entry variable options (variable);

	if substr (name, 1, 1) ^= "-"
	then if substr (name, length (rtrim (name)), 1) ^= "_"
	     then return;

	do idx = 1 to type_count;
	     if type_name (idx) = name
	     then return;
	end;

	if substr (name, 1, 1) = "-"
	then a_type_name = name;
	else do;
	     a_type_name = reverse (rtrim (substr (name, 8)));
	     a_type_name = reverse (ltrim (a_type_name, "_"));
	end;
	call fs_util_$make_entry_for_type (ltrim (a_type_name), "suffix_info", info_entry, code);
	if code ^= 0
	then return;

	si.version = SUFFIX_INFO_VERSION_1;
	call info_entry (addr (si));
	display_type = si.type_name;
	if display_type = "DM file" then display_type = "data management file";
	if display_type = "multi-segment file" then display_type = "multisegment file";
	if active_function
	then ret_str = ret_str || requote_string_ ((display_type)) || " ";
	else if si.standard_object
	     then do;
		     if si.type = FS_OBJECT_TYPE_LINK
		     then a_type_name = "link";
		     else if si.type = FS_OBJECT_TYPE_SEGMENT
		     then a_type_name = "segment";
		     else if si.type = FS_OBJECT_TYPE_DIRECTORY
		     then a_type_name = "directory";
		     else if si.type = FS_OBJECT_TYPE_MSF
		     then a_type_name = "msf";
		     else if si.type = FS_OBJECT_TYPE_DM_FILE
		     then a_type_name = "dm_file";

		     call ioa_ ("The standard type ""^a"", which doesn't require a suffix,^/^5xis selected by using the string ""^a"".",
			display_type, a_type_name);
		end;
	     else call ioa_ ("The extended type ""^a"", which uses the ""^a"" suffix,^/^5xis selected by using the string ""^a"".",
		si.type_name, si.type, si.type);

	type_count = type_count + 1;
	type_name (type_count) = name;

	return;
     end check_name;
%page;
setup:
     proc (status, error_exit);

dcl	status		fixed bin (35) parameter;
dcl  error_exit label parameter;

	if status = 0
	then do;
		active_function = "1"b;
		complain = active_fnc_err_;
		ret_str = "";
	     end;
	else if status = error_table_$not_act_fnc
	then do;
		active_function = "0"b;
		complain = com_err_;
	     end;
	else do;
		call com_err_ (status, whoami);
		goto error_exit;
	     end;

	return;
     end setup;

     end describe_entry_type;
