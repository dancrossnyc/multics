/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */


/* fs_get_type_ -- for extended object support, determines type of object */
/* BIM 830921 */
/* format: style2,indcomtxt,idind30 */

     /*** * Modified 831022 BIM to return a link type instead of error_table_$link */
     /*** * Modified 831025 BIM to not chase links for delentry and chname.
	Those entries call the $no_chase entrypoint here, as should
	anything else that works on links. */
     /*** * Modified 840112 MAP for better member algorithm */
     /*** * Modified 840206 MAP to classify DM files when access to containing
	dir is null. */

fs_get_type_:
     procedure (Dir_name, Entryname, Type, Code);

	declare (Dir_name, Entryname, Type)   char (*) parameter;
	declare Code		        fixed bin (35) parameter;

	declare suffix		        char (32) aligned;
	declare (after, before, reverse)      builtin;

/****
      First, check to see if the suffix is that of a reserved
      "straight segment" or "straight directory".

      Then, try to find a suffix_XXX_$suffix_info for the suffix,
      if any.

      Then, validate that.

      If it misses, classify as seg, dir, MSF, or DM file. */

	declare reserved_for_segments	        (60) char (32) aligned int static options (constant) init (
						/** */
				        "absin",	/** */
				        "algol68",	/** */
				        "alm",	/** */
				        "apl",	/** */
				        "archive",	/** */
				        "basic",	/** */
				        "bcpl",	/** */
				        "bind",	/** */
				        "breaks",	/** */
				        "cds",	/** */
				        "cdt",	/** */
				        "chars",	/** */
				        "cmdb",	/** */
				        "cmdsm",	/** */
				        "cmf",	/** */
				        "cobol",	/** */
				        "code",	/** */
				        "dir_info", /** */
				        "dsm",	/** */
				        "ec",	/** */
				        "fdocin",	/** */
				        "fdocout",	/** */
				        "fortran",	/** */
				        "gcos",	/** */
				        "gct",	/** */
				        "gdt",	/** */
				        "graphics", /** */
				        "info",	/** */
				        "linus",	/** */
				        "lister",	/** */
				        "listform", /** */
				        "listin",	/** */
				        "mail",	/** */
				        "map355",	/** */
				        "memo",	/** */
				        "pascal",	/** */
				        "pdt",	/** */
				        "pfd",	/** */
				        "pfl",	/** */
				        "pl1",	/** */
				        "pmf",	/** */
				        "probe",	/** */
				        "profile",	/** */
				        "qedx",	/** */
				        "rd",	/** */
				        "rdmec",	/** */
				        "rtdt",	/** */
				        "rtmf",	/** */
				        "runoff",	/** */
				        "runout",	/** */
				        "sat",	/** */
				        "sdmec",	/** */
				        "smf",	/** */
				        "symbols",	/** */
				        "table",	/** */
				        "ttf",	/** */
				        "ttt",	/** */
				        "value",	/** */
				        "volumes",	/** */
				        "wl"	/** */
				        );

	declare reserved_for_segments_and_msfs
				        (3) char (32) aligned int static options (constant) init (
						/** */
				        "absout",	/** */
				        "compout",	/** */
				        "list"	/** */
				        );

	declare reserved_for_msfs	        (1) char (32) aligned int static options (constant) init (
						/** */
				        "dict"	/** */
				        );

	declare reserved_for_directories      (1) char (32) int aligned static options (constant) init (
						/** */
				        "db"	/** */
				        );

	declare file_manager_$validate        entry (char (*), char (*), fixed bin (35));
	declare hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	declare status_minf_type	        fixed bin (2);
	declare status_minf_bc	        fixed bin (24);



	go to ENTRY_COMMON;

no_chase:
     entry (Dir_name, Entryname, Type, Code);

	call hcs_$status_minf (Dir_name, Entryname, (0), status_minf_type, (0), Code);
	if Code ^= 0
	then return;				/* nothing else to say */
	if status_minf_type = 0			/** Link */
	then do;					/* otherwise, fall through to ordinary stuff */
		Type = FS_OBJECT_TYPE_LINK;
		Code = 0;
		return;
	     end;


ENTRY_COMMON:
	if index (Entryname, ".") > 0
	then suffix = reverse (before (reverse (Entryname), "."));
	else suffix = "";
	Code = 0;

	if suffix = ""
	then call CLASSIFY_STANDARD_OBJECT;
	else if member (suffix, reserved_for_segments)
	then call CLASSIFY_AS_SEGMENT;
	else if member (suffix, reserved_for_segments_and_msfs)
	then call CLASSIFY_AS_SEGMENT_OR_MSF;
	else if member (suffix, reserved_for_msfs)
	then call CLASSIFY_AS_MSF;
	else if member (suffix, reserved_for_directories)
	then call CLASSIFY_AS_DIRECTORY;
	else call CLASSIFY_HARD;

	return;

%page;

CLASSIFY_STANDARD_OBJECT:
     procedure;
	declare error_table_$noentry	        fixed bin (35) ext static;
	declare error_table_$incorrect_access fixed bin (35) ext static;
	declare error_table_$no_info	        fixed bin (35) ext static;
	declare t_code		        fixed bin (35);

	call hcs_$status_minf (Dir_name, Entryname, (1 /* chase */), status_minf_type, status_minf_bc, Code);

	if Code = error_table_$noentry
	then do;	/*** legitimize null links by turning off the chase switch */
		call hcs_$status_minf (Dir_name, Entryname, (0 /* no chase */), status_minf_type, status_minf_bc,
		     t_code);
		if t_code = 0
		then Code = 0;
	     end;

	if Code = error_table_$incorrect_access | Code = error_table_$no_info
	then do;

/**** This do group will be executed if the parent of an inner ring file
      had null access for the caller; however, the inner ring file could
      be a DM file and the caller could have access to it.  Only file_manager_
      knows for sure... */

		call file_manager_$validate (Dir_name, Entryname, t_code);
		if t_code = 0
		then do;
			Type = FS_OBJECT_TYPE_DM_FILE;
			Code = 0;
			return;
		     end;
	     end;

	if Code ^= 0
	then return;				/* too bad */

	if status_minf_type = 0			/* null link. */
	then do;
		Type = FS_OBJECT_TYPE_LINK;
		return;
	     end;

/**** Segment or Dir/MSF */

	if status_minf_type = 1			/* seg */
	then do;
		Type = FS_OBJECT_TYPE_SEGMENT;
		return;
	     end;

/**** Dir or msf */

	if status_minf_bc = 0
	then do;
		Type = FS_OBJECT_TYPE_DIRECTORY;
		return;
	     end;

	call file_manager_$validate (Dir_name, Entryname, Code);
	if Code = 0
	then Type = FS_OBJECT_TYPE_DM_FILE;
	else do;
		Type = FS_OBJECT_TYPE_MSF;
		Code = 0;
	     end;
	return;

     end CLASSIFY_STANDARD_OBJECT;

%page;

CLASSIFY_AS_SEGMENT:
     procedure;

/**** This one has a suffix that should only be found on a segment.
      If we were strict constructionists, we would only allow segments.
      But we aren't, yet. */

/**** Ditto for all of these. */

CLASSIFY_AS_SEGMENT_OR_MSF:
CLASSIFY_AS_DIRECTORY:
CLASSIFY_AS_MSF:
     entry;

	call CLASSIFY_STANDARD_OBJECT;
	return;
     end CLASSIFY_AS_SEGMENT;

CLASSIFY_HARD:
     procedure;

/**** Here for something with a suffix that was not filtered out.
      We have no choice but to make_entry. */

	declare hcs_$make_entry	        entry (ptr, char (*), char (*), entry, fixed bin (35));
	declare si_entry_to_call	        entry (ptr) variable;
	declare validate_entry_to_call        entry (char (*), char (*), fixed bin (35)) variable;
	declare code		        fixed bin (35);
	declare 1 si		        aligned like suffix_info;
	declare reference_name	        char (32);

	reference_name = "suffix_" || rtrim (suffix) || "_";
	call hcs_$make_entry (codeptr (fs_get_type_), reference_name, "suffix_info", si_entry_to_call, code);

	if code ^= 0
	then do;
		call CLASSIFY_STANDARD_OBJECT;	/* nobody home */
		return;
	     end;

	call hcs_$make_entry (codeptr (si_entry_to_call), reference_name, "validate", validate_entry_to_call, code);
	if code = 0
	then do;
		call validate_entry_to_call (Dir_name, Entryname, code);
		if code ^= 0
		then do;
			call CLASSIFY_STANDARD_OBJECT;
			return;
		     end;
	     end;


/**** We found a suffix_info! */

	si.version = SUFFIX_INFO_VERSION_1;
	call si_entry_to_call (addr (si));
	Type = si.type;
	return;
     end CLASSIFY_HARD;

%page;

member:
     procedure (a_is_this_in, a_list) returns (bit (1) aligned);

	declare a_is_this_in	        char (32) aligned;
	declare a_list		        (*) char (32) aligned;
	declare hx		        fixed bin unsigned;
	declare is_this_in		        char (32) aligned;
	declare lx		        fixed bin unsigned;
	declare mx		        fixed bin unsigned;
	declare list_size		        fixed bin;
	declare listp		        ptr;
	declare list		        (list_size) char (32) aligned based (listp);
	declare hbound		        builtin;

	list_size = dim (a_list, 1);
	listp = addr (a_list);
	is_this_in = a_is_this_in;

	lx = lbound (list, 1);
	hx = hbound (list, 1);
	do while (lx <= hx);
	     mx = divide (lx + hx, 2, 17, 0);
	     if is_this_in = list (mx)
	     then return ("1"b);
	     else if is_this_in < list (mx)
		then hx = mx - 1;
		else lx = mx + 1;
	end;
	return ("0"b);

     end member;

%page;%include suffix_info;
%page;%include copy_flags;
     end fs_get_type_;
