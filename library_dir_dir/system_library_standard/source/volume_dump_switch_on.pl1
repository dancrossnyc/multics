/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


volume_dump_switch_on: vdsn: proc;

/* This command, modeled after the set_saftey_switch command, sets the incremental and complete
   volume dump switches of a segment on or off. When a segment is created its dump switches are by default on, that is it
   will be dumped. If the user does not want a segment dumped, the dump switches can be set off.  The two switches
   control the different modes of volume dumping. Note that if both switches are off and the segment is lost, it
   can not be recovered. */

dcl (dirname, new_path) char (168) aligned;
dcl (entname, ename) char (32) aligned;
dcl  arg char (alng) based (aptr) unaligned;
dcl  b_name char (32) based;
dcl (aptr, eptr, nptr, bentp, npp, dirp, entp) ptr init (null);
dcl (i, j, alng, ecount, retc, nargs) fixed bin (17);
dcl  code fixed bin (35);
dcl (incr_volume_dump_sw, comp_volume_dump_sw) fixed bin;
dcl  myname char (32) aligned;

dcl  cleanup condition;

dcl (error_table_$incorrect_access,
     error_table_$no_info) ext fixed bin (35);

dcl ioa_ entry options(variable);
dcl  check_path_name_ ext entry (ptr, fixed bin (17), bit (1) aligned, char (32) aligned, ptr, ptr, ptr,
     fixed bin (17), ptr, ptr, fixed bin (17));
dcl  check_path_name_$indiv ext entry (ptr, ptr, bit (1) aligned);
dcl  cu_$arg_count entry(fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin (17), ptr, fixed bin (17), fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  hcs_$set_volume_dump_switches entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin, fixed bin (35));

dcl (null, addr) builtin;

	incr_volume_dump_sw = -1;
	comp_volume_dump_sw = -1;
	myname = "volume_dump_switch_on";
	goto start;

volume_dump_switch_off: vdsf: entry;
	incr_volume_dump_sw = 1;
	comp_volume_dump_sw = 1;
	myname = "volume_dump_switch_off";

start:
	call cu_$arg_count(nargs);
	if nargs < 1 then do;
	     call ioa_("^a: USAGE ^a pathname [-incr] | [-comp]", myname, myname);
	     return;
	end;
	npp = addr (new_path);
	dirp = addr (dirname);
	entp = addr (entname);

	on cleanup call vds_cleanup;

	do i = 1 to nargs;				/* look for control args */
	     call cu_$arg_ptr (i, aptr, alng, code);
	     if code ^= 0 then do;
		call com_err_(code, myname);
		return;
	     end;
	     if arg = "-incr" | arg = "-incremental" then comp_volume_dump_sw = 0;
	     if arg = "-comp" | arg = "-complete" then incr_volume_dump_sw = 0;
	end;

	if comp_volume_dump_sw = 0 & incr_volume_dump_sw = 0 then do;
	     call com_err_(0, myname, "Both control arguments may not be used together");
	     return;
	end;

	do i = 1 by 1;				/* loop through all arguments */
	     call cu_$arg_ptr (i, aptr, alng, code);
	     if code ^= 0 then return;
	     if arg = "-incr" | arg = "-incremental" then goto skip_loop;
	     if arg = "-comp" | arg = "-complete" then goto skip_loop;
check_name:
	     call check_path_name_ (aptr, alng, "0"b, myname, dirp, entp, npp, ecount, eptr, nptr, retc);
	     if retc = 2 then go to free_up;		/* error message was already printed */
	     ename = entname;

	     do j = 1 to ecount;			/* loop through all enames */
		if retc = 1 then do;		/* a star name */
		     call check_path_name_$indiv (dirp, bentp, "0"b);
		     ename = bentp -> b_name;
		end;
		call hcs_$set_volume_dump_switches (dirname, ename, incr_volume_dump_sw, comp_volume_dump_sw, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, new_path);
						/* if user lacks modify permission on parent */
		     if (code = error_table_$incorrect_access) | (code = error_table_$no_info) then
			go to free_up;		/* skip processing segments in this directory */
		end;
	     end;
free_up:
	     call vds_cleanup;
skip_loop:
	end;					/* loop through pathnames */

	return;

vds_cleanup: proc;
	     if eptr ^= null then free eptr -> b_name;
	     if nptr ^= null then free nptr -> b_name;
	     return;
	end vds_cleanup;

     end volume_dump_switch_on;
