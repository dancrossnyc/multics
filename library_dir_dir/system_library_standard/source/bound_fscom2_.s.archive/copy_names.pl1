/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */




/* format: style2,idind30,indcomtxt */


copy_names:
     procedure options (variable);

/**** * The commands copy_names and move_names copy and move all
      the additional names from one designated segment to another.
      copy_names also copies the designated name. Name duplication
      within a directory is handled in the accepted manner.
      Any number of pairs of arguments is allowed and the = convention
      is followed in the second argument of a pair. */

/* Karolyn Martin 5/30/69 */
/* modified by M. Weaver 9 April 1970 6:35 PM -- recoded into PL/I */
/* last modified by M. Weaver 31 December 1970 */
/* modified 6/3/75 by S. Herbst: command names changed to copy_names and move_names */
/* TR7429 Changed to reject starnames 10/30/80 S. Herbst */
/* Housecleaned, but not entirely, J Pattin and BIM 83-(8, 9, 10) */
/* Allow star names in first argument. C Spitzer 12/20/83 */

	dcl     arg		        char (lng) based (ap);

	dcl     (copy, errsw)	        bit (1) aligned;
	dcl     (i, j, n)		        fixed bin (17);
	dcl     lng		        fixed bin (21);
	dcl     areap		        ptr;
	dcl     myarea		        area based (areap);
	dcl     bitcnt		        fixed bin (24);
	dcl     code		        fixed bin (35);
	dcl     (dir1, dir2)	        char (168);
	dcl     (en1, en2, qent)	        char (32);
	dcl     cleanup		        condition;
	dcl     (null, sum)		        builtin;
	dcl     stars		        bit (1) aligned;
	dcl     ap		        ptr;
	dcl     whoami		        char (32);
	dcl     type		        fixed bin (2);
	dcl     cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     check_star_name_$entry        entry (character (*), fixed binary (35));
	dcl     expand_pathname_	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     (
	        com_err_,
	        com_err_$suppress_name
	        )			        ext entry options (variable);
	dcl     error_table_$namedup	        external fixed bin (35);
	dcl     error_table_$segnamedup       external fixed bin (35);
	dcl     get_wdir_		        ext entry returns (char (168));
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     copy_names_		        entry (character (*), character (*), character (*), character (*),
				        character (*), bit (1) aligned, fixed binary (35));
	dcl     move_names_		        entry (character (*), character (*), character (*), character (*),
				        character (*), bit (1) aligned, fixed binary (35));
	dcl     get_equal_name_	        entry (character (*), character (*), character (32), fixed binary (35));
	dcl     cu_$arg_count	        ext entry (fixed bin, fixed bin (35));
	dcl     pathname_		        entry (character (*), character (*)) returns (character (168));
	dcl     get_system_free_area_	        entry() returns(ptr);

/* The additional names are to be left on the original segment. */

	copy = "1"b;
	whoami = "copy_names";
	go to work;

move_names:
     entry options (variable);

/* The additional names are to be removed from the original segment. */

	copy = "0"b;
	whoami = "move_names";

work:
	call cu_$arg_count (n, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami);
		return;
	     end;
	if n = 0
	then do;
		call com_err_$suppress_name (0, whoami, "Usage:  ^a from1 to1 ... fromj toj", whoami);
		return;
	     end;

	areap = get_system_free_area_ ();
	star_entry_ptr, star_names_ptr = null;
	on cleanup call cleaner;

/* The following master loop processes each pair of arguments completely
   unless some error code is returned by the file system. */

	do i = 1 to n by 2;

/* get first arg */
	     call cu_$arg_ptr (i, ap, lng, code);
	     call expand_pathname_ (arg, dir1, en1, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, whoami, "^a", arg);
		     return;
		end;
	     call check_star_name_$entry (en1, code);
	     if code ^= 0
	     then do;
		     if code = 1 | code = 2
		     then stars = "1"b;
		     else do;
			     call com_err_ (code, whoami, "^a", en1);
			     return;
			end;
		end;

/* get second arg */
	     if i = n
	     then do;
		     qent = en1;			/* have odd no. of args */
		     dir2 = get_wdir_ ();
		     call doit;
		end;
	     else do;
		     call cu_$arg_ptr (i + 1, ap, lng, code);
		     call expand_pathname_ (arg, dir2, qent, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, whoami, "^a", arg);
			     return;
			end;
		     if stars
		     then do;
			     call hcs_$star_ (dir1, en1, 3, areap, star_entry_count, star_entry_ptr, star_names_ptr,
				code);
			     if code ^= 0
			     then do;
errseg1:
				     call com_err_ (code, whoami, "^a", pathname_ (dir1, en1));
				     goto next_arg;
				end;
			     do j = 1 to star_entry_count;
				en1 = star_names (star_entries (j).nindex);
				call doit;
			     end;
			     call cleaner;		/* get rid of current star structures */
			end;
		     else call doit;
		end;
next_arg:
	end;


doit:
     proc;

	call get_equal_name_ (en1, qent, en2, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "^a for ^a", qent, en1);
		return;
	     end;

/* Does target segment exist?? */

	call hcs_$status_minf (dir2, en2, 0, type, bitcnt, code);
	if code ^= 0
	then go to errseg2;

/* If so, then move the names. */

	if copy
	then call copy_names_ (dir1, en1, dir2, en2, whoami, errsw, code);
	else call move_names_ (dir1, en1, dir2, en2, whoami, errsw, code);

	if code ^= 0 & code ^= error_table_$namedup & code ^= error_table_$segnamedup
	then if errsw
	     then
errseg2:
		call com_err_ (code, whoami, "^a", pathname_ (dir2, en2));
	     else call com_err_ (code, whoami, "^a", pathname_ (dir1, en1));

     end doit;

cleaner:
     proc;

	if star_names_ptr ^= null
	then do;
		free star_names in (myarea);
		star_names_ptr = null;
	     end;
	if star_entry_ptr ^= null
	then do;
		free star_entries in (myarea);
		star_entry_ptr = null;
	     end;

	return;
     end cleaner;

%page;
%include star_structures;

     end copy_names;
