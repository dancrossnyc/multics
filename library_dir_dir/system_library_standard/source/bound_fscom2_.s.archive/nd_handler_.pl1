/****^  **************************************************************
        *                                                            *
        * Copyright, (C) BULL HN Information Systems Inc., 1992      *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */







/****^  HISTORY COMMENTS:
  1) change(92-09-24,Vu), approve(92-09-24,MCR8266), audit(92-09-24,Zimmerman),
     install(92-10-06,MR12.5-1025):
     Fix bug for add_name when adding a name to a forum meeting which is the
     only remaining name of another forum.
                                                   END HISTORY COMMENTS */


/* format: style2 */
nd_handler_:
     proc (caller, pname, ename, code);

/* this is an updated version of the name_dup
   handler for SSS commands. It attempts
   to remove an existing entry name from a directory,
   asking questions of the console as necessary.  */

/* initial coding 8 Aug 1969 David Clark */
/* revised 25 Aug 1969 DDC  */

/* modified on October 30, 1969 at 11:50 A. M. by V Voydock */
/* modified by E Stone on Dec 3 1970 */
/* modified by Dan Bricklin 9 Dec 1970 */
/* Modified by Dennis Capps on 11/04/71 */
/* Modified by Steve Herbst 4/15/76 */
/* Modified by C. D. Tavares 06/22/77 for force and del_force entries */
/* Changed to print link targets 11/02/79 S. Herbst */
/* Made to work on mailboxes and queues 03/28/80 S. Herbst */
/* 09/29/81 by Lindsey Spratt:Changed to return actual error code when
               unexpected error occurs.  Also, changed to ignore
               error_table_$vtoce_connection_fail from status_long. */
/* New message added "(Target PATH is a null link)" instead of "exists" 07/01/82 S. Herbst */
/* changed for object_type_, added switches entry 2/17/83 Jay Pattin */
/* removed check for connection failure, hardcore does not return entry information in this case. 6/10/83 Jay Pattin */
/* 830924 object_type_ --> fs_util_ BIM  */

          dcl     (caller, pname, ename) char (*),
                  options                bit (36) aligned,
                  code                   fixed bin (35);

/* Link messages */

          dcl     TARGET_NULL_LINK       char (64) int static options (constant)
                                         init ("^/^8x(Target ^a^[>^]^a is a null link.)");
          dcl     TARGET_EXISTS          char (64) int static options (constant) init ("^/^8x(Target ^a^[>^]^a exists.)");
          dcl     TARGET_NOT_EXISTS      char (64) int static options (constant)
                                         init ("^/^8x(Target ^a^[>^]^a does not exist.)");
          dcl     TARGET_NO_INFO         char (64) int static options (constant)
                                         init ("^/^8x(Cannot get info for target ^a^[>^]^a)");
          dcl     TARGET_NO_PATH         char (64) int static options (constant) init ("^/^8x(No target pathname.)");

          dcl     LINK_TYPE              fixed bin (2) int static options (constant) init (0);

          dcl     icode                  fixed bin (35),
                  type                   fixed bin,
                  minf_type              fixed bin (2),
                  bit                    fixed bin (24);
          dcl     (link_msg, query_msg)  char (256);
          dcl     buff                   char (132) varying;
          dcl     fs_util_type           char (32);
          dcl     target_path            char (target_len) based (target_ptr);
          dcl     target_ptr             ptr init (null);
          dcl     target_len             fixed bin;
          dcl     target_dn              char (168);
          dcl     target_en              char (32);
          dcl     noun                   char (18) aligned;
          dcl     verb                   char (6) aligned;

          dcl     (
                  LINK                   init (0),
                  SEGMENT                init (1)
                  )                      fixed bin int static options (constant);
%page;
%include nd_handler_options;
%page;
%include delete_options;
%page;
%include query_info;
%page;
%include branch_status;

          dcl     1 link_status          aligned based (addr (branch_status)),
                  ( 2 type               bit (2),
                    2 nnames             fixed bin (15),
                    2 nrp                bit (18),
                    2 dtem               bit (36),
                    2 dtd                bit (36),
                    2 pnl                fixed bin (17),
                    2 pnrp               bit (18)
                    )                    unaligned;

          dcl     names                  (2) char (32) aligned based (np),
                  np                     pointer init (null),
                  old_seg                char (32) aligned;

          dcl     area_ptr               ptr int static init (null);
          dcl     area                   area based (area_ptr);

          dcl     error_table_$action_not_performed
                                         fixed bin (35) ext;
          dcl     error_table_$improper_data_format
                                         fixed bin (35) ext;
          dcl     error_table_$namedup   fixed bin (35) ext;
          dcl     error_table_$noentry   fixed bin (35) ext;
          dcl     error_table_$nonamerr  fixed bin (35) ext;

          dcl     (com_err_, command_query_)
                                         entry options (variable),
                  delete_$path           entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35)),
                  expand_pathname_       entry (char (*), char (*), char (*), fixed bin (35)),
                  get_system_free_area_  entry returns (ptr),
                  hcs_$chname_file       entry (char (*), char (*), char (*), char (*), fixed bin (35)),
                  hcs_$get_link_target   entry (char (*), char (*), char (*), char (*), fixed bin (35)),
                  hcs_$status_minf       entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
                                         fixed bin (35)),
                  hcs_$status_long       entry (char (*), char (*), fixed bin, ptr, ptr, fixed bin (35)),
                  installation_tools_$chname_file
                                         entry (char (*), char (*), char (*), char (*), fixed bin (35)),
                  fs_util_$chname_file   entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     fs_util_$get_type      entry (character (*), character (*), character (*), fixed binary (35));
          dcl     (addr, fixed, null, ptr, rtrim, string, substr, unspec)
                                         builtin;

          dcl     cleanup                condition;
%page;
          string (nd_handler_options) = ""b;
          goto COMMON;

force:
     entry (caller, pname, ename, code);

/* nd_handler_$force is used to forcibly delete conflicting seg if necessary */

          string (nd_handler_options) = ""b;
          nd_handler_options.delete_force = "1"b;
          goto COMMON;

switches:
     entry (caller, pname, ename, options, code);

          string (nd_handler_options) = options;
          if nd_handler_options.mbz ^= ""b
          then do;
                    code = error_table_$improper_data_format;
                    return;
               end;

          if nd_handler_options.delete | nd_handler_options.delete_force
          then goto COMMON2;
          nd_handler_options.delete_force = nd_handler_options.force;

COMMON:
          code, icode = 0;
          if area_ptr = null
          then area_ptr = get_system_free_area_ ();
          on cleanup call clean_up;

          call hcs_$status_long (pname, ename, 0, addr (branch_status), area_ptr, code);
          if code ^= 0
          then do;
                    call com_err_ (code, caller, "^/Unable to get status information about ^a^[>^]^a.", pname,
                         pname ^= ">", ename);
                    return;
               end;

          code = 0;
          np = ptr (area_ptr, branch_status.names_rel_pointer);

          if names (1) = ename
          then if fixed (branch_status.number_names, 17) = 1
               then go to DELETE;
               else old_seg = names (2);
          else old_seg = names (1);

          if nd_handler_options.library
          then call installation_tools_$chname_file (pname, ename, ename, "", icode);
          else if nd_handler_options.raw
          then call hcs_$chname_file (pname, ename, ename, "", icode);
          else call fs_util_$chname_file (pname, ename, ename, "", icode);
                                                            /* works even for MSF's ! */

          if icode = 0
          then do;
                    call com_err_ (0, caller, "Name duplication. Old name ^a removed from ^a>^a", ename, pname, old_seg);
                    return;
               end;

          if icode ^= error_table_$nonamerr
          then do;
                    code = icode;
                    call com_err_ (code, caller, "^/Unable to remove the old name ^a from ^a^[>^]^a.", ename, pname,
                         pname ^= ">", old_seg);
                    return;
               end;
          else /* only one name left, delete it */
               go to DELETE;

del:
     entry (caller, pname, ename, code);

/* This entry used if caller knows deletion is necessary */

          string (nd_handler_options) = ""b;
          goto COMMON2;

del_force:
     entry (caller, pname, ename, code);

/* This entry used if caller wants deletion performed forcibly */

          string (nd_handler_options) = ""b;
          nd_handler_options.delete_force = "1"b;

COMMON2:
          code = 0;
          if area_ptr = null
          then area_ptr = get_system_free_area_ ();
          on cleanup call clean_up;

          call hcs_$status_long (pname, ename, 0, addr (branch_status), area_ptr, code);
          if code ^= 0
          then do;
                    call com_err_ (code, caller, "^/Unable to get status information about ^a^[>^]^a.", pname,
                         pname ^= ">", ename);
                    return;
               end;
          code = 0;

DELETE:
          type = fixed (branch_status.type, 17);
          bit = fixed (branch_status.bit_count, 24);
          string (delete_options) = ""b;
          delete_options.force = "1"b;
          delete_options.raw = nd_handler_options.raw;

          if type = SEGMENT
          then do;
                    verb = "delete";
                    noun = "segment";
                    delete_options.segment = "1"b;
               end;

          else if type = LINK
          then do;
                    verb = "unlink";
                    delete_options.link = "1"b;
                    noun = "link";
                    target_len = link_status.pnl;
                    target_ptr = ptr (area_ptr, link_status.pnrp);
                    if target_path = ""
                    then link_msg = TARGET_NO_PATH;
                    else do;
                              call hcs_$get_link_target (pname, ename, target_dn, target_en, code);
                              if target_dn = ""
                              then call expand_pathname_ (target_path, target_dn, target_en, code);
                              call hcs_$status_minf (target_dn, target_en, 0, minf_type, 0, icode);
                              if icode = 0
                              then if minf_type = LINK_TYPE
                                   then link_msg = TARGET_NULL_LINK;
                                   else link_msg = TARGET_EXISTS;
                              else if icode = error_table_$noentry
                              then link_msg = TARGET_NOT_EXISTS;
                              else link_msg = TARGET_NO_INFO;
                         end;
               end;

          else do;
                    if bit ^= 0
                    then do;                                /* a multi-segment file */
                              verb = "delete";
                              noun = "multisegment file";
                              delete_options.segment = "1"b;
                         end;
                    else do;                                /* it is a directory */
                              verb = "delete";
                              noun = "directory";
                              call fs_util_$get_type (pname,ename,fs_util_type,code);
                              if code ^= 0 then return;
                              if substr (fs_util_type, 1, 1) ^= "-" then
                                 delete_options.segment = "1"b;
                              else delete_options.directory = "1"b;
                         end;
               end;

          call clean_up;                                    /* free hcs_$status storage */

          if ^nd_handler_options.delete_force
          then do;
                    unspec (query_info) = "0"b;
                    query_info.version = query_info_version_4;
                    query_info.yes_or_no_sw = "1"b;
                    query_info.question_iocbp, query_info.answer_iocbp = null;
                    query_info.status_code = error_table_$namedup;
                    query_msg = "Name duplication. Do you want to ^a the old ^a ^a>^a?";
                    if type = LINK
                    then query_msg = rtrim (query_msg) || link_msg;
                    call command_query_ (addr (query_info), buff, caller, rtrim (query_msg) || "^3x", verb, noun, pname,
                         ename, target_dn, target_dn ^= ">", target_en);
                    if buff = "no"
                    then do;
                              code = error_table_$action_not_performed;
                              return;
                         end;
               end;

          else do;
                    if type = LINK
                    then call com_err_ (error_table_$namedup, caller, "Unlinking the old link ^a>^a" || link_msg, pname,
                              ename, target_dn, target_dn ^= ">", target_en);
                    else call com_err_ (error_table_$namedup, caller, "Deleting the old ^a ^a>^a", noun, pname, ename);
               end;

/* You really must want to get rid of it ... */

          call delete_$path (pname, ename, string (delete_options), caller, code);
          if code ^= 0
          then call com_err_ (code, caller, "^/Unable to remove old entry ^a^[>^]^a.", pname, pname ^= ">", ename);
          return;



clean_up:
     proc;

          if np ^= null
          then free names in (area);
          if target_ptr ^= null
          then free target_path in (area);

     end clean_up;

     end nd_handler_;
