/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */






/****^  HISTORY COMMENTS:
  1) change(88-09-20,TLNguyen), approve(88-09-20,MCR7976),
     audit(88-09-28,Parisek), install(88-09-30,MR12.2-1123):
     The rename command will print an appropriate error message when it
     finds that
        1. The new name of a specified storage system entry is improperly
           constructed without specifying the -name control argument.
        2. The returned code from XXX_$chname_file is non zero in value,
           where XXX can be either installation_tool_, hcs_, or fs_util_
                                                   END HISTORY COMMENTS */


/* format: style4,ifthenstmt,ifthen,^indcomtxt,^indproc,initcol1,declareind8,dclind4,struclvlind1 */
rename:
rn:
     procedure () options (variable);

/* This module implements the rename, add_name and delete_name commands.

   Usage:
   rename {-name} path1 {-name} name1 ... {-name} pathj {-name} namej

   where -name causes the following pathi or namei as a literal name
   (for pathi, in the working directory) without applying the star or
   equal conventions.

   add_name {-name} path {-name} name1 ... {-name} namej

   delete_name {-name} path1 ... {-name} pathj

   Written by Steve Herbst 12/09/76 */
/* Cleanup handling and control arg processing fixed 10/25/79 S. Herbst */
/* Made to work on mailboxes and queues 03/28/80 S. Herbst */
/* Bug fixes on 06/30/80 by G. Palter */
/* Fixed to not try to add the same name twice to the same seg 12/09/82 S. Herbst */
/* modified for object_type_ convention 1/26/83 Jay Pattin */
/* fixed -name, added l_rename and friends 2/27/83 Jay Pattin */
/* 830924 object_type_ --> fs_util_ BIM */
/* Modified 2/10/84 by C Spitzer. allow $, disallow ? in added or renamed names */
/* Changed to allow -name before all args of all commands 03/27/84 S. Herbst */
/* Modified 1984.08.27 by M. Pandolf to use pathname_ and report pathname when starname doesn't match */
/* 850206 MSharpe to replace -fcnt with -inase/inaee */
/* Fixed cleanup bug causing null ptr fault for "rn a b x.* y.=" 04/05/85 Steve Herbst */


dcl 1 entries (ecount) aligned based (eptr),		/* entry info from hcs_$star_ */
     2 type bit (2) unaligned,
     2 nnames fixed bin (15) unaligned,
     2 nindex fixed bin (17) unaligned;

dcl names (99) char (32) aligned based (nptr);		/* names from hcs_$star_ */

dcl 1 added_names aligned based (added_names_ptr),
     2 (count, bound) fixed bin,
     2 array (added_names_bound refer (added_names.bound)),
      3 dn char (168),
      3 match fixed bin,				/* the number of the starname match from hcs_$star_ */
      3 name char (32);

dcl arg char (arg_len) based (arg_ptr);
dcl dn char (168);
dcl (command, en, name) char (32);

dcl (brief_sw, force_no_type, library_sw, literal_source, literal_target, stars) bit (1);

dcl area area based (area_ptr);

dcl area_ptr ptr int static init (null);
dcl (added_names_ptr, eptr, nptr) ptr init (null);
dcl arg_ptr ptr;

dcl (added_names_bound, arg_count, arg_len, ecount, i, k, match_index) fixed bin;
dcl code fixed bin (35);

dcl error_table_$bad_equal_name fixed bin (35) ext;
dcl error_table_$bad_file_name fixed bin (35) ext;
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$entlong fixed bin (35) ext;
dcl error_table_$namedup fixed bin (35) ext;
dcl error_table_$noarg fixed binary (35) ext;
dcl error_table_$nomatch fixed binary (35) ext;
dcl error_table_$noentry fixed bin (35) ext;
dcl error_table_$nostars fixed bin (35) ext;
dcl error_table_$segnamedup fixed bin (35) ext;

dcl check_star_name_$entry entry (char (*), fixed bin (35));
dcl (
    active_fnc_err_,
    com_err_,
    com_err_$suppress_name
    ) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl hcs_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl installation_tools_$chname_file
         entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl nd_handler_$switches entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl fs_util_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));

dcl (index, length, null, string) builtin;

dcl (cleanup, linkage_error) condition;
%page;
	command = "rename";
	library_sw = "0"b;
	goto RENAME_COMMON;

l_rename:
lrename:
lren:
     entry;

	library_sw = "1"b;
	command = "l_rename";

RENAME_COMMON:
	call cu_$af_return_arg (arg_count, (null ()), (0), code);
	if code = 0 then do;
NOT_ACT_FNC:
	     call active_fnc_err_ (0, command, "This command cannot be invoked as an active function.");
	     return;
	end;

	if arg_count < 2 then do;
	     call com_err_$suppress_name (0, "rename", "Usage:  ^a path1 name1 ... pathj namej {-control_args}",
		command);
RETURN:
	     return;
	end;

	force_no_type = "0"b;
	do i = 1 to arg_count;			/* prescan for bad control arguments */
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if index (arg, "-") = 1 then
		if (arg = "-name") | (arg = "-nm") then do;
		     i = i + 1;
		     if i > arg_count then do;
NO_NAME_VALUE:
			call com_err_ (error_table_$noarg, command, "Value for -name");
			return;
		     end;
		end;
		else if ^library_sw & (arg = "-interpret_as_standard_entry" | arg = "-inase")
		     then force_no_type = "1"b;

		else if (arg = "-interpret_as_extended_entry" | arg = "-inaee")
		     then force_no_type = "0"b;

		else do;
		     call com_err_ (error_table_$badopt, command, """^a""", arg);
		     return;
		end;
	end;

	on cleanup call clean_up;

	call allocate_added_names;

	do i = 1 by 2 to arg_count;

NEXT_ARG:
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if arg = "-interpret_as_standard_entry" | arg = "-inase"
	      | arg = "-interpret_as_extended_entry" | arg = "-inaee"
	     then do;
		i = i + 1;
		if i > arg_count then return;
		goto NEXT_ARG;
	     end;
	     if arg = "-name" | arg = "-nm" then do;
		literal_source = "1"b;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     end;
	     else literal_source = "0"b;

	     call get_path;

	     if code ^= 0
	     then if code = error_table_$nomatch
		then call com_err_ (code, command, "For ^a.", pathname_ (dn, en));
		else call com_err_ (code, command, "^a", arg);
	     else do;
		if (i + 1) > arg_count then do;
		     call com_err_ (error_table_$noarg, command, "New name for ^a.", pathname_ (dn, en));
		     return;
		end;
		call cu_$arg_ptr (i + 1, arg_ptr, arg_len, (0));

		if arg = "-name" | arg = "-nm" then do;
		     literal_target = "1"b;
		     i = i + 1;
		     call cu_$arg_ptr (i + 1, arg_ptr, arg_len, (0));
		end;
		else literal_target = "0"b;

		call get_name;

		if code ^= 0 then call com_err_ (code, command, "^a", arg);

		else call change_names (en, name);
	     end;

	     call clean_up_stars ();
	end;

	return;
%page;
add_name:
addname:
an:
     entry () options (variable);

	command = "add_name";
	library_sw = "0"b;
	goto ADDNAME_COMMON;

l_add_name:
laddname:
lan:
     entry;

	command = "l_add_name";
	library_sw = "1"b;

ADDNAME_COMMON:
	call cu_$af_return_arg (arg_count, (null ()), (0), code);
	if code = 0 then go to NOT_ACT_FNC;

	if arg_count < 2 then do;
ADD_NAME_USAGE:
	     call com_err_$suppress_name (0, "", "Usage:  ^a path names {-control_args}", command);
	     return;
	end;

	brief_sw, force_no_type = "0"b;
	do i = 1 to arg_count;			/* prescan for control arguments */
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if index (arg, "-") = 1 then do;
		if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
		else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;
		else if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_NAME_VALUE;
		end;
		else if ^library_sw
		      & (arg = "-interpret_as_standard_entry" | arg = "-inase")
		     then force_no_type = "1"b;
		else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
		     then force_no_type = "0"b;
		else do;
		     call com_err_ (error_table_$badopt, command, "^a", arg);
		     return;
		end;
	     end;
	end;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if index (arg, "-") ^= 1 then do;
		literal_source = "0"b;
		go to FOUND_NAME;
	     end;
	     else if arg = "-name" | arg = "-nm" then do;
		literal_source = "1"b;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
		go to FOUND_NAME;
	     end;
	end;
	go to ADD_NAME_USAGE;

FOUND_NAME:
	on cleanup call clean_up;

	call get_path;

	if code ^= 0 then do;
	     call com_err_ (code, command, "^a", arg);
	     return;
	end;

	if i = arg_count then go to ADD_NAME_USAGE;	/* no names to be added */

	call allocate_added_names;

	do i = i + 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if index (arg, "-") ^= 1 then do;
		literal_target = "0"b;
ADD_THE_NAME:
		call get_name;

		if code ^= 0 then call com_err_ (code, command, "^a", arg);

		else call change_names ("", name);
	     end;
	     else if arg = "-name" | arg = "-nm" then do;
		literal_target = "1"b;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
		go to ADD_THE_NAME;
	     end;
	end;

	call clean_up;

	return;
%page;
delete_name:
deletename:
dn:
     entry () options (variable);

	command = "delete_name";
	library_sw = "0"b;
	goto DELETE_NAME_COMMON;

l_delete_name:
ldeletename:
ldn:
     entry;

	command = "l_delete_name";
	library_sw = "1"b;

DELETE_NAME_COMMON:
	call cu_$af_return_arg (arg_count, (null ()), (0), code);
	if code = 0 then go to NOT_ACT_FNC;

	if arg_count = 0 then do;
	     call com_err_$suppress_name (0, "", "Usage:  ^a paths {-control_args}", command);
	     return;
	end;

	brief_sw, force_no_type = "0"b;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
	     if index (arg, "-") = 1 then do;
		if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;			/* skip arg following -name */
		     if i > arg_count then go to NO_NAME_VALUE;
		end;
		else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
		else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;
		else if ^library_sw
		      & (arg = "-interpret_as_standard_entry" | arg = "-inase")
		     then force_no_type = "1"b;
		else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
		     then force_no_type = "0"b;

		else do;
		     call com_err_ (error_table_$badopt, command, "^a", arg);
		     return;
		end;
	     end;
	end;

	on cleanup call clean_up;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, (0));

	     if index (arg, "-") ^= 1 then do;
		literal_source = "0"b;
DELETE_THE_NAME:
		call get_path;

		if code ^= 0 then do;
		     if ^brief_sw | code ^= error_table_$nomatch then
			call com_err_ (code, command, "^a", arg);
		end;

		else call change_names (en, "");

		call clean_up_stars ();
	     end;
	     else if arg = "-name" | arg = "-nm" then do;
		literal_source = "1"b;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, (0));
		go to DELETE_THE_NAME;
	     end;
	end;

	return;
%page;
get_path:
     procedure ();

/* This internal procedure expands a pathname argument and applies the star convention. */

	code = 0;

	if index (arg, "-") = 1 & ^literal_source then do;
	     call com_err_ (error_table_$badopt, command, "^a", arg);
	     go to RETURN;
	end;

	call expand_pathname_ (arg, dn, en, code);
	if code ^= 0 then return;

	if literal_source then do;
	     stars = "0"b;
	     return;
	end;

	if en ^= "" then call check_star_name_$entry (en, code);
	if code = 0 then stars = "0"b;
	else if code < 3 then do;			/* star convention */
	     stars = "1"b;
	     if area_ptr = null then area_ptr = get_system_free_area_ ();

	     call hcs_$star_ (dn, en, 3, area_ptr, ecount, eptr, nptr, code);
	end;

end get_path;
%page;
get_name:
     procedure ();

/* This internal procedure checks for a valid entryname and applies the equal convention. */

dcl type fixed bin (2);

dcl check_star_name_       entry (char (*), bit (36) aligned, fixed bin (2), fixed bin (35));

	code = 0;
	type = 0;

	if arg_len > length (name) then do;
	     code = error_table_$entlong;
	     return;
	end;

	name = arg;

	if literal_target then return;

	if index (arg, "-") = 1 then do;
	     call com_err_ (error_table_$badopt, command, "^a", arg);
	     go to RETURN;
	end;

	call check_star_name_ (arg, (CHECK_STAR_IGNORE_EQUAL), type, code);
	if code ^= 0 then do;
	     call com_err_ (code, command, "^a", arg);
	     goto RETURN;
	end;

	if type ^= 0 then do;
	     call com_err_ (error_table_$nostars, command, "^a", arg);
	     goto RETURN;
	end;


	call get_equal_name_ ("a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a", arg, "", code);
						/* see if valid equal name */
	if code ^= error_table_$bad_equal_name then code = 0;	/* might be valid */

/* This call tests for syntax errors in the equal name, for example "a.===.b".
   It is a preliminary test before we know which entry names match the starname en.
   Therefore, the equal name is applied to a dummy containing the maximum number of
   components (16) rather than the starname, which can have too few components
   even though some matching entry names have enough components. */

end get_name;
%page;
change_names:
     procedure (P_old_name, P_equal_name);

/* This internal procedure calls its internal procedure change_name for each starname match. */

dcl (P_old_name, P_equal_name) char (*);
dcl new_name char (32);

	if ^stars	then call change_name;

	else do match_index = 1 to ecount;

	     do k = entries (match_index).nindex
		to entries (match_index).nindex + entries (match_index).nnames - 1;

		en = names (k);

		call change_name;
	     end;
NEXT_STAR:
	end;
%page;
change_name:
     procedure ();

/* This internal procedure performs the name change for all three commands. */

dcl i fixed bin;

	if command = "delete_name" | command = "l_delete_name" then new_name = "";
	else do;
	     if literal_target then new_name = P_equal_name;  /* if -name given, don't apply equals convention */
	     else do;
		call get_equal_name_ (en, P_equal_name, new_name, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "^a for ^a", P_equal_name, en);
		     return;
		end;
	     end;
	     if stars then do;
		do i = added_names.count by -1 to 1
		     while (dn ^= added_names.dn (i) | match_index ^= added_names.match (i)
		     | new_name ^= added_names.name (i));
		end;
		if i > 0 then			/* already added this name to this segment */
		     if command = "add_name" | command = "l_add_name" then return;
		     else new_name = "";		/* rename: just delete the name to rename */

		added_names.count = added_names.count + 1;
		if added_names.count > added_names.bound then call grow_added_names;
		added_names.dn (added_names.count) = dn;
		added_names.match (added_names.count) = match_index;
		added_names.name (added_names.count) = new_name;
	     end;
	end;

TRY:
	if library_sw then do;
	     on linkage_error begin;
		     call com_err_ (0, command, "The user lacks access to installation_tools_.");
		     goto RETURN;
		end;

	     call installation_tools_$chname_file (dn, en, P_old_name, new_name, code);
	     revert linkage_error;
	end;
	else if force_no_type then call hcs_$chname_file (dn, en, P_old_name, new_name, code);
	else call fs_util_$chname_file (dn, en, P_old_name, new_name, code);

	if code ^= 0 then do;
	     if code = error_table_$namedup then do;
		string (nd_handler_options) = ""b;
		nd_handler_options.raw = force_no_type;
		nd_handler_options.library = library_sw;
		call nd_handler_$switches (command, dn, new_name, string (nd_handler_options), code);
		if code = 0 then go to TRY;
	     end;
	     else if code = error_table_$segnamedup then
		if brief_sw & command = "add_name" then;	/* "an -bf" suppresses this message */
		else call com_err_ (code, command, "^a on ^a.", new_name, pathname_ (dn, en));
	     else if code = error_table_$noentry & (command = "delete_name" | command = "l_delete_name") &
		brief_sw then return;
	     else if code = error_table_$bad_file_name then
		call com_err_ (code, command, "^a", new_name);
	     else do;
		call com_err_ (code, command, "^a", pathname_ (dn, en));
		if command = "add_name" | command = "l_add_name" then
		     if stars then go to NEXT_STAR;
		     else go to RETURN;
	     end;
	end;

end change_name;

end change_names;
%page;
allocate_added_names:
     proc;

	area_ptr = get_system_free_area_ ();
	added_names_bound = 50;

	allocate added_names in (area) set (added_names_ptr);

	added_names.count = 0;

end allocate_added_names;
%page;
grow_added_names:
     proc;

dcl old_ptr ptr;
dcl i fixed bin;

	old_ptr = added_names_ptr;
	added_names_bound = 2 * added_names_bound;

	allocate added_names in (area) set (added_names_ptr);

	added_names.count = old_ptr -> added_names.count;
	do i = 1 to added_names.count;
	     added_names.array (i) = old_ptr -> added_names.array (i);
	end;

	free old_ptr -> added_names in (area);

end grow_added_names;
%page;
clean_up:
     proc;

	if eptr ^= null then free entries in (area);
	if nptr ^= null then free names in (area);
	if added_names_ptr ^= null then free added_names in (area);

     end clean_up;
%page;
clean_up_stars:
     proc;

	if eptr ^= null then free entries in (area);
	if nptr ^= null then free names in (area);

     end clean_up_stars;
%page;
%include check_star_name;
%page;
%include nd_handler_options;


end rename;
