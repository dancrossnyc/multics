/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1989                   *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        ************************************************************** */






/****^  HISTORY COMMENTS:
  1) change(87-02-13,TLNguyen), approve(87-02-13,MCR7619),
     audit(87-03-20,Gilcrease), install(87-03-24,MR12.1-1011):
     - Change "copy" to always display a correct error message when copying
       a specified extended entry types into unsuffixed targets.
     - Change "move" to always display a correct error message when moving
       a specified MSF that has unsufficient ACL requirements in order to move.
     - Change "copy" to always display a correct error message when copying
       a specified segment or star convention is applied and unsufficient
       ACL requirements for directory containing a specified segment.
  2) change(88-10-03,Flegel), approve(89-01-09,MCR8020), audit(89-01-16,Lee),
     install(89-01-24,MR12.3-1012):
     Change sub_err_handler display of an error so that the causing pathname is
     properly displayed with the error according to the
     copy_error_info.target_err_switch value.  This sort of backs out phx20384
     as the solution addressed the wrong source its problem.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */
copy:
cp:
     procedure () options (variable);


/****
      This is the standard service system command to copy a segment or
      multi-segment file.  This procedure also includes the move command, which
      consists of a copy (with names and ACLs) followed by a delete.
      Both commands take multiple arguments and the star convention.
      Under control of optional arguments it will also copy extra names
      and/or the ACL of the segment.
*/

/* Coded 3 Aug 1969 David Clark */
/* Revised 25 Sept 1969 0935 DDC */
/* Modified by M Weaver 11 April 1970 */
/* Broken into four routines by John Strayhorn. July 1, 1970 */
/* Check for same directory, when copying names, added by T.Casey, Jan 1973 */
/* Modified June 4 1974 by Steve Herbst */

/* Rewritten: June 1979 by G. Palter, adding -chase in the process */
/* Bugs fixed, check for "copy foo" added 07/14/81 S. Herbst */
/* Changed move to move switches, max length, and ring brackets 11/17/82 S. Herbst */
/* Fixed to move MSF ring brackets correctly 12/15/82 S. Herbst */
/* Modified: 6/2/83 Jay Pattin moved it all to copy_ */
/* 831001 BIM infintessimally cleaned up for installation */
/* 841102 C Spitzer. fixed bug in sub_error_handler, getting null pointer fault if info_ptr not set */
/* 850206 MSharpe.  changed -force_no_type to -inase/-inaee; modified to advise
   user that no non-dirs matched the starname */

	dcl     argument		        character (argument_lth) based (argument_ptr);
	dcl     argument_lth	        fixed binary (21);
	dcl     argument_ptr	        pointer;

	dcl     system_area		        area based (system_area_ptr);

	dcl     system_area_ptr	        pointer;

	dcl     (argument_count, arg_idx)     fixed binary;
	dcl     arg_list_ptr	        pointer;

	dcl     NAME		        character (32);
						/* who I am */

	dcl     code		        fixed binary (35);

	dcl     chase_sw		        bit (2) aligned;
						/* either default or one of two given values */
	dcl     (brief, copy_command_sw, entry_only_sw, have_paths)
				        bit (1) aligned;
	dcl     (successful_copy,
	         inhibit_nomatch_error)       bit (1) aligned;

	dcl     (source_dir, target_dir)      character (168);
	dcl     (source_ename, target_eqname, ename)
				        character (32);
	dcl     source_stars	        fixed binary (35);
	dcl     source_type		        fixed binary (2);

	dcl     select_sw		        fixed binary (2);
	dcl     idx		        fixed binary;

	dcl     DEFAULT_2ND_NAME	        character (2) static options (constant) initial ("==");

	dcl     (
                  error_table_$argerr,
	        error_table_$badopt,
                  error_table_$badstar,
	        error_table_$dirseg,
	        error_table_$incorrect_access,
	        error_table_$moderr,
	        error_table_$namedup,
	        error_table_$noarg,
	        error_table_$noentry,
                  error_table_$no_info,
                  error_table_$not_seg_type,
	        error_table_$sameseg,
	        error_table_$inconsistent,
                  error_table_$root,
	        error_table_$unsupported_operation
	        )			        fixed binary (35) external;

	dcl     (cleanup, sub_error_)	        condition;

	dcl     (
	        com_err_,
	        com_err_$suppress_name
	        )			        entry () options (variable);
	dcl     check_star_name_$entry        entry (character (*), fixed binary (35));
	dcl     continue_to_signal_	        entry (fixed bin (35));
	dcl     copy_		        entry (ptr);
	dcl     cu_$arg_count	        entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	        entry () returns (pointer);
	dcl     cu_$arg_ptr		        entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
	dcl     cu_$arg_ptr_rel	        entry (fixed binary, pointer, fixed binary (21), fixed binary (35),
				        pointer);
	dcl     expand_pathname_	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     find_condition_info_	        entry (ptr, ptr, fixed bin (35));
	dcl     get_equal_name_	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     get_system_free_area_	        entry () returns (pointer);
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));

	dcl     (addr, length, index, null, rtrim, search, string, substr, sum)
				        builtin;
%page;
%include star_structures;
%page;
%include copy_options;
%page;
%include copy_flags;

	dcl     1 cpo		        aligned like copy_options;
	dcl     1 explicit		        aligned like copy_flags;
%page;
%include sub_error_info;

%include condition_info_header;
%page;
%include condition_info;

%include copy_error_info;
%page;
/* copy: cp: entry () options (variable); */

	NAME = "copy";

	copy_command_sw = "1"b;
	string (cpo.copy_items) = ""b;		/* default options */

	go to COMMON;



/* This is the move command */

move:
mv:
     entry () options (variable);

	NAME = "move";

	copy_command_sw = "0"b;

	string (cpo.copy_items) = ""b;
	cpo.copy_items.acl, cpo.copy_items.names, cpo.copy_items.ring_brackets, cpo.copy_items.max_length,
	     cpo.copy_items.copy_switch, cpo.copy_items.safety_switch, cpo.copy_items.dumper_switches = "1"b;



/* Actual work starts here */

COMMON:
	chase_sw = "00"b;				/* none supplied */
	cpo.version = COPY_OPTIONS_VERSION_1;
	cpo.caller_name = NAME;

	cpo.copy_items.entry_bound = "1"b;		/* always copy */
	string (cpo.flags) = ""b;
	cpo.flags.delete = ^copy_command_sw;

	string (explicit) = ""b;

	call cu_$arg_count (argument_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, NAME);
		return;
	     end;

	if argument_count = 0
	then do;
USAGE:
		call com_err_ (error_table_$noarg, NAME, "^/^6xUsage: ^a path1 {equal_name1 ...} {-control_args}",
		     NAME);
		return;
	     end;


/* Scan for control arguments */

	have_paths = "0"b;				/* haven't found any yet */

	do arg_idx = 1 to argument_count;

	     call cu_$arg_ptr (arg_idx, argument_ptr, argument_lth, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, NAME, "Fetching argument #^d.", arg_idx);
		     return;
		end;

	     if substr (argument, 1, 1) ^= "-"
	     then have_paths = "1"b;			/* found some pathnames */

	     else if (argument = "-brief") | (argument = "-bf")
	     then brief = "1"b;

	     else if (argument = "-long") | (argument = "-lg")
	     then brief = "0"b;

	     else if (argument = "-all") | (argument = "-a")
	     then cpo.copy_items.acl, cpo.copy_items.names, cpo.copy_items.ring_brackets, cpo.copy_items.max_length,
		     cpo.copy_items.copy_switch, cpo.copy_items.safety_switch, cpo.copy_items.dumper_switches = "1"b;

	     else if (argument = "-acl")
	     then cpo.copy_items.acl, explicit.acl = "1"b;

	     else if (argument = "-no_acl")
	     then cpo.copy_items.acl, explicit.acl = "0"b;

	     else if (argument = "-name") | (argument = "-nm")
	     then cpo.copy_items.names, explicit.names = "1"b;

	     else if (argument = "-no_name") | (argument = "-nnm")
	     then cpo.copy_items.names, explicit.names = "0"b;

	     else if (argument = "-chase")
	     then chase_sw = "11"b;			/* explicit request to do chasing */

	     else if (argument = "-no_chase")
	     then chase_sw = "10"b;

	     else if argument = "-force" | argument = "-fc"
	     then cpo.flags.force = "1"b;

	     else if argument = "-no_force" | argument = "-nfc"
	     then cpo.flags.force = "0"b;

	     else if argument = "-max_length" | argument = "-ml"
	     then cpo.copy_items.max_length, explicit.max_length = "1"b;

	     else if argument = "-no_max_length" | argument = "-nml"
	     then cpo.copy_items.max_length, explicit.max_length = "0"b;

	     else if argument = "-ring_brackets" | argument = "-rb"
	     then cpo.copy_items.ring_brackets, explicit.ring_brackets = "1"b;

	     else if argument = "-no_ring_brackets" | argument = "-nrb"
	     then cpo.copy_items.ring_brackets, explicit.ring_brackets = "0"b;

	     else if argument = "-copy_switch" | argument = "-csw"
	     then cpo.copy_items.copy_switch, explicit.copy_switch = "1"b;

	     else if argument = "-no_copy_switch" | argument = "-ncsw"
	     then cpo.copy_items.copy_switch, explicit.copy_switch = "0"b;

	     else if argument = "-safety_switch" | argument = "-ssw"
	     then cpo.copy_items.safety_switch, explicit.safety_switch = "1"b;

	     else if argument = "-no_safety_switch" | argument = "-nssw"
	     then cpo.copy_items.safety_switch, explicit.safety_switch = "0"b;

	     else if argument = "-volume_dumper_switches" | argument = "-vdsw"
	     then cpo.copy_items.dumper_switches, explicit.dumper_switches = "1"b;

	     else if argument = "-no_volume_dumper_switches" | argument = "-nvdsw"
	     then cpo.copy_items.dumper_switches, explicit.dumper_switches = "0"b;

	     else if argument = "-entry_bound" | argument = "-eb"
	     then cpo.copy_items.entry_bound, explicit.entry_bound = "1"b;

	     else if argument = "-no_entry_bound" | argument = "-neb"
	     then cpo.copy_items.entry_bound, explicit.entry_bound = "0"b;

	     else if argument = "-extend"
	     then do;
		     cpo.copy_items.extend = "1"b;
		     cpo.copy_items.update = "0"b;
		end;

	     else if ^copy_command_sw
	     then goto BADOPT;

	     else if argument = "-replace" | argument = "-rp"
	     then cpo.copy_items.extend, cpo.copy_items.update = "0"b;

	     else if argument = "-update" | argument = "-ud"
	     then do;
		     cpo.copy_items.update = "1"b;
		     cpo.copy_items.extend = "0"b;
		end;

	     else if argument = "-interpret_as_standard_entry" | argument = "-inase"
	     then cpo.flags.raw = "1"b;

	     else if argument = "-interpret_as_extended_entry" | argument = "-inaee"
	     then cpo.flags.raw = "0"b;

	     else do;
BADOPT:
		     call com_err_ (error_table_$badopt, NAME, """^a""", argument);
		     return;
		end;
	end;

	if ^have_paths
	then /* nothing to work on */
	     go to USAGE;

	if (cpo.copy_items.extend | cpo.copy_items.update)
	     & (cpo.copy_items.acl | cpo.copy_items.names | cpo.copy_items.ring_brackets | cpo.copy_items.max_length
	     | cpo.copy_items.copy_switch | cpo.copy_items.safety_switch | cpo.copy_items.dumper_switches)
	then do;
		call com_err_ (error_table_$inconsistent, NAME,
		     "Attributes may not be copied when -^[extend^;update^] is used.", cpo.copy_items.extend);
		return;
	     end;					/*						*/

	system_area_ptr = get_system_free_area_ ();

	star_entry_ptr,				/* so cleanup will work */
	     star_names_ptr = null ();

	on condition (cleanup) call clean_up ();


/* Process the pairs of pathnames supplied */

	arg_list_ptr = cu_$arg_list_ptr ();

	do arg_idx = 1 to argument_count;

	     call cu_$arg_ptr (arg_idx, argument_ptr, argument_lth, (0));
						/* known to work from above */

	     if substr (argument, 1, 1) ^= "-"
	     then do;				/* ignore control args */

		     entry_only_sw = (search (argument, "<>") = 0);

		     call expand_pathname_ (argument, source_dir, source_ename, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, NAME, "^a", argument);
			     call find_second_arg ();
			     go to NEXT_PAIR;
			end;

		     call check_star_name_$entry (source_ename, source_stars);
		     if (source_stars ^= 0) & (source_stars ^= 1) & (source_stars ^= 2)
		     then do;
			     call com_err_ (source_stars, NAME, "^a", pathname_ (source_dir, source_ename));
			     call find_second_arg ();
			     go to NEXT_PAIR;
			end;

		     call find_second_arg ();		/* move on to second pair (if any) */

		     if arg_idx > argument_count
		     then do;			/* none, use === */
			     if entry_only_sw
			     then do;
				     call com_err_ (0, NAME, "No target pathname specified.");
				     return;
				end;
			     argument_ptr = addr (DEFAULT_2ND_NAME);
			     argument_lth = length (DEFAULT_2ND_NAME);
			end;

		     call expand_pathname_ (argument, target_dir, target_eqname, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, NAME, "^a", argument);
			     go to NEXT_PAIR;
			end;

		     call check_star_name_$entry (target_eqname, code);
		     if code ^= 0
		     then do;
			     if code > 2 then  /* code = error_table_$badstar  */
/* fix an incorrect error message, for example ! copy foo >  */
				if argument = ">" then do;
				      call com_err_ (error_table_$root, NAME,
                                                             "^a.  Your request has been aborted.", argument);
				      go to NEXT_PAIR;
				end;
/* end of bug fix */
			          else call com_err_ (code, NAME, "^a", pathname_ (target_dir, target_eqname));
			     else call com_err_ (0, NAME, "Star convention not allowed in second argument.  ^a",
				     pathname_ (target_dir, target_eqname));
			     go to NEXT_PAIR;
			end;


/* Preliminary checks OK for this pair; now do the work */

		     if source_stars = 0
		     then do;			/* source name is a single entry */
			     if chase_sw = "10"b
			     then do;		/* user doesn't want links chased */
				     call hcs_$status_minf (source_dir, source_ename, 0b, source_type, (0), code);
				     if code ^= 0
				     then do;
					     call com_err_ (code, NAME, "^a",
						pathname_ (source_dir, source_ename));
					     go to NEXT_PAIR;
					end;
				     if source_type = star_LINK
				     then do;
					     call com_err_ (0, NAME,
						"^a is a link and ""-no_chase"" was specified.",
						pathname_ (source_dir, source_ename));
					     go to NEXT_PAIR;
					end;
				end;

			     call process_entry (source_ename, "1"b, ("0"b));
						/* ignore the successful_copy bit */
			end;			/* do the work */


		     else do;			/* source name is a star name */
			     if chase_sw = "11"b
			     then select_sw = star_ALL_ENTRIES;
						/* request -chase */
			     else select_sw = star_BRANCHES_ONLY;

			     call hcs_$star_ (source_dir, source_ename, select_sw, system_area_ptr,
				star_entry_count, star_entry_ptr, star_names_ptr, code);
			     if code ^= 0 then
/* fix bug for TR number 19526 */
				if code = error_table_$moderr then do;
				     call com_err_ (error_table_$incorrect_access, NAME, "^a",
					          pathname_ (source_dir, source_ename));
				     go to NEXT_PAIR;
				end;
/* end of bug fix */
				else do;
				     call com_err_ (code, NAME, "^a", pathname_ (source_dir, source_ename));
				     go to NEXT_PAIR;
				end;

			     inhibit_nomatch_error,
			     successful_copy = "0"b;	/* If still OFF after the loop, there were no 
						   non-dirs that matched the starname */
			     do idx = 1 to star_entry_count;

				ename = star_names (star_entries (idx).nindex);
				call process_entry (ename, "0"b, successful_copy);
			     end;			/* ignore directories */
			     if ^successful_copy
				& ^inhibit_nomatch_error
				then call com_err_ (0, NAME,
				     "No entries of appropriate type matched the starname ^a",
				     pathname_ (source_dir, source_ename));
			end;

NEXT_PAIR:
		     call clean_up ();		/* free up anything still around */
		end;				/* of non-control argument */
	end;

/**/

/* This internal procedure cleans up after an argument pair */

clean_up:
     procedure ();


	if star_names_ptr ^= null ()
	then do;
		free star_names in (system_area);
		star_names_ptr = null ();
	     end;

	if star_entry_ptr ^= null ()
	then do;
		free star_entries in (system_area);
		star_entry_ptr = null ();
	     end;

	return;

     end clean_up;					/*						*/
find_second_arg:
     procedure ();

/* This internal procedure scans the argument list looking for the second pathname
   of the current pair (if any) */

	do arg_idx = (arg_idx + 1) to argument_count;

	     call cu_$arg_ptr_rel (arg_idx, argument_ptr, argument_lth, (0), arg_list_ptr);

	     if substr (argument, 1, 1) ^= "-"
	     then /* found it */
		return;
	end;

	arg_idx = argument_count + 1;			/* none found */

	return;

     end find_second_arg;
%page;
process_entry:					/* copy one segment */
     procedure (P_ename, P_report_dirseg, P_successful_copy);

	dcl     P_ename		        character (32) parameter;
						/* source entry name */
	dcl     P_report_dirseg	        bit (1) aligned parameter;
						/* ON => e_t_$dirseg on source */

	dcl     P_successful_copy	        bit (1) aligned parameter;
						/* OUTPUT: ON => entry successfully copied */

          dcl     bit_count                     fixed binary (24); /* bit count returned by hcs_$status_minf. */
	dcl     (source_ename, target_ename)  character (32);
	dcl     code		        fixed binary (35);
          dcl     target_type                   fixed binary (2); /* type of a target entryname returned by hcs_$status_minf. */

	source_ename = P_ename;
	bit_count = -0;                                   /* initialized */
	target_type = -0;                                 /* initialized */

	call get_equal_name_ (source_ename, target_eqname, target_ename, code);
	if code ^= 0
	then do;
		call com_err_ (code, NAME, "^a for ^a", pathname_ (target_dir, target_eqname), source_ename);
		return;
	     end;

	cpo.source_dir = source_dir;
	cpo.source_name = source_ename;
	cpo.target_dir = target_dir;
	cpo.target_name = target_ename;

	on sub_error_ call sub_err_handler ();		/* copy_ reports erors with sub_err_ */

	call copy_ (addr (cpo));			/* go to it */
	P_successful_copy = "1"b;

COPY_LOST:
	return;
%page;
sub_err_handler:
     proc ();

	declare 1 ci		        aligned like condition_info;
          declare reverse                       builtin;
          declare suffix_name                   char (8) varying init ("");
          declare temp_source_ename             char (32) varying init ("");

	ci.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (ci), (0));
	sub_error_info_ptr = ci.info_ptr;

	if sub_error_info.name ^= "copy_"
	then do;
CONTINUE_TO_SIGNAL:
	     call continue_to_signal_ ((0));
		goto END_HANDLER;
	     end;
	else if sub_error_info.info_ptr = null
	     then goto CONTINUE_TO_SIGNAL;
	else if copy_error_info.copy_options_ptr ^= addr (cpo)
	     then goto CONTINUE_TO_SIGNAL;

	code = sub_error_info.status_code;

	if sub_error_info.cant_restart
	then do;					/* copy failed */
		if ^copy_error_info.target_err_switch
		then if code = error_table_$dirseg
		     then /* source is a directory */
			if ^P_report_dirseg
			then /* but that's OK for starnames */
			     goto COPY_LOST;

		inhibit_nomatch_error = "1"b;		/* found an appropriate entry that matched the starname,
						   but still didn't get it copied -- 
						   Don't report a nomatch for this starname */

		if code ^= error_table_$namedup then /* already reported */
/* fix bug for TR number phx20617 */
		     if (code = error_table_$badstar) | (code = error_table_$argerr) then do;
			temp_source_ename = reverse (rtrim (source_ename));
			
                              suffix_name = substr (temp_source_ename, 1, (index (temp_source_ename, ".") - 1));
			suffix_name = reverse (suffix_name);
		          call com_err_ (error_table_$not_seg_type, NAME,  "The .^a suffix was missing from  ^a",
                                        suffix_name, pathname_ (target_dir, target_ename));
                         end;
/* fix bug for TR number phx19526 */
		     else if code = error_table_$no_info then
			 call com_err_ (error_table_$incorrect_access, NAME, sub_error_info.info_string);
/* end of bug fixes */
		     else call com_err_ (code, NAME, sub_error_info.info_string);
                    else;
		if ^copy_command_sw
		then if (code ^= error_table_$noentry) & (code ^= error_table_$dirseg)
			& (code ^= error_table_$moderr) & (code ^= error_table_$sameseg)
			& (code ^= error_table_$namedup)
		     then call com_err_$suppress_name (0, NAME, "Segment ^a not deleted.",
			     pathname_ (source_dir, source_ename));
		goto COPY_LOST;
	     end;					/* fatal error */

	else if sub_error_info.default_restart
	then if ^brief
	     then call com_err_ (code, NAME, sub_error_info.info_string);
	     else ;

	else do;
		if code = error_table_$unsupported_operation
		then if badop ()
		     then call com_err_ (0, NAME, sub_error_info.info_string);
		     else ;
/* fix an incorrect error message for TR number phx20384, this is backed out
 * with phx20481 as the original repair was incorrect */
		else do;
		     call com_err_ (code, NAME, sub_error_info.info_string);
		     goto COPY_LOST;
		end;
/* end of fixing */
	     end;
END_HANDLER:
	return;

     end sub_err_handler;
%page;
badop:						/* returns true iff operation specifically requested */
     proc returns (bit (1) aligned);

	declare op		        char (32);

	op = copy_error_info.operation;
	if op = "names"
	then return (explicit.names | ^copy_command_sw);
	if op = "ACL"
	then return (explicit.acl | ^copy_command_sw);
	if op = "ring brackets"
	then return (explicit.ring_brackets);
	if op = "max length"
	then return (explicit.max_length);
	if op = "copy switch"
	then return (explicit.copy_switch);
	if op = "safety switch"
	then return (explicit.safety_switch);
	if op = "dumper switches"
	then return (explicit.dumper_switches);
	if op = "entry bound"
	then return (explicit.entry_bound);

	return ("1"b);				/* if we don't recognize it, print it. */
     end badop;
     end process_entry;

     end copy;
