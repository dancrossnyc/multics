/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1987                   *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */






/****^  HISTORY COMMENTS:
  1) change(87-08-27,TLNguyen), approve(87-08-27,MCR7755),
     audit(87-09-08,Lippard), install(87-12-07,MR12.2-1009):
     Change copy_acl_ to set the error switch just before it calls
     fs_util_$replace_acl.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

copy_acl_:
     proc (Dir_name_1, Entryname_1, Dir_name_2, Entryname_2, Errsw, Code);


/* Routine to copy the acl from one file to another.
   Called by the copy command.
   Coded by John Strayhorn, 7/1/70 */
/* Modified by M. Weaver 31 December 1970 */
/* Modified 7/1/74 by Steve Herbst to copy MSF acls */
/* Modified 12/19/79 by Gary Dixon to copy seg->MSF acls, or vice versa */
/* Modified 2/20/83 Jay Pattin for object_type_ */
/* Modified 830927 BIM for object_type_ --> fs_util_ */

          dcl     cleanup                       condition;

          dcl     (Dir_name_1, Entryname_1, Dir_name_2, Entryname_2)
                                                char (*);   /* arguments */

          dcl     Code                          fixed bin (35);
          dcl     error_table_$not_seg_type     fixed bin (35) ext static;
          dcl     error_table_$unsupported_operation
                                                fixed bin (35) ext static;
          dcl     Errsw                         bit (1) aligned;
                                                            /* indicates which seg error was on */

          declare fs_util_$suffix_info          entry (character (*), character (*), pointer, fixed binary (35));
          declare fs_util_$list_acl             entry (character (*), character (*), character (*), pointer, pointer,
                                                fixed binary (35));
          declare fs_util_$list_extended_acl    entry (character (*), character (*), character (*), pointer, pointer,
                                                fixed binary (35));
          declare fs_util_$replace_acl          entry (character (*), character (*), pointer, bit (1), fixed binary (35));
          declare fs_util_$replace_extended_acl entry (character (*), character (*), pointer, bit (1), fixed binary (35));
          declare fs_util_$get_type             entry (character (*), character (*), character (*), fixed binary (35));
          declare get_system_free_area_         entry () returns (ptr);
          declare sub_err_                      entry () options (variable);

          declare fs_util_type_2                char (32) unaligned;
          declare dir_name                      (2) char (168) unaligned;
          declare entryname                     (2) char (32) unaligned;
%page;
%include acl_structures;
%include suffix_info;
%include copy_flags;
          declare 1 si                          aligned like suffix_info;
%include sub_err_flags;
%page;
          dcl     (addr, null)           builtin;

/* begin coding */
          Code = 0;
          acl_ptr = null ();                                /* make cleanup handler happy */

/* establish cleanup condition */
          on cleanup call clean_up;

/* get input parameters */
          dir_name (1) = Dir_name_1;
          dir_name (2) = Dir_name_2;
          entryname (1) = Entryname_1;
          entryname (2) = Entryname_2;

/* determine the type (extended or standard) of specified source and target entries */
          Errsw = "0"b;                                     /* Error apply to source. */
          si.version = SUFFIX_INFO_VERSION_1;               /* get version name for "si" structure */
          call fs_util_$suffix_info (dir_name (1), entryname (1), addr (si), Code);
          if Code ^= 0 
          then return;

          Errsw = "1"b;                                     /* indicates error applied to target */
          call fs_util_$get_type (dir_name (2), entryname (2), fs_util_type_2, Code);
          if Code ^= 0
          then return;

/**** *
      Errsw = 1 since mismatch is layed at door of output */

          if si.type ^= fs_util_type_2
          then do;
                    if si.type = FS_OBJECT_TYPE_SEGMENT | si.type = FS_OBJECT_TYPE_MSF
                    then call SPECIAL_CASE_SEG_MSF;         /* perhaps seg -> msf or vica versa */
                    else Code = error_table_$not_seg_type;  /* ycch, used to get dirseg right ... */
                    return;
               end;


/**** *
      here is a pair of the same type ! */

          Errsw = "0"b;                                     /* indicates error applied to source */
          if si.extended_acl
          then do;
                    call fs_util_$list_extended_acl (dir_name (1), entryname (1), GENERAL_EXTENDED_ACL_VERSION_1,
                         get_system_free_area_ (), acl_ptr, Code);
                    if Code = error_table_$unsupported_operation
                    then call sub_err_ ((0), "Invalid suffix_XXX_", ACTION_CANT_RESTART, null (), (0),
                              "suffix_^a_ claims to support extended acl's, but does not supply a list_extended_acl operation."
                              , fs_util_type_2);

                    else if Code ^= 0
                    then go to EXIT;

                    Errsw = "1"b;                          /* indicates error applied to target */
                    call fs_util_$replace_extended_acl (dir_name (2), entryname (2), acl_ptr, "1"b /* no sysdaemon! */,
                         Code);

                    if Code = error_table_$unsupported_operation
                    then call sub_err_ ((0), "Invalid suffix_XXX_", ACTION_CANT_RESTART, null (), (0),
                              "suffix_^a_ claims to support extended acl's, but does not supply a replace_extended_acl operation."
                              , fs_util_type_2);

                    go to EXIT;                             /* Leaving code set */

               end;

/**** *
      Land here for non-extended acls */


          Errsw = "0"b;                                      /* indicates error applied to source */
          call fs_util_$list_acl (dir_name (1), entryname (1), GENERAL_ACL_VERSION_1, get_system_free_area_ (), acl_ptr,
               Code);
          if Code ^= 0
          then go to EXIT;

	Errsw = "1"b;                                       /* indicates error applied to target */
          call fs_util_$replace_acl (dir_name (2), entryname (2), acl_ptr, "1"b /* no sysdaemon! */, Code);

          go to EXIT;


/**** *
      This procedure handles the special case of copying acls back and forth
      between segments and msf's. Someday, we may permit this for dm files
      as well. */

SPECIAL_CASE_SEG_MSF:
     procedure;


/**** *
      To get into this procedure, the input object had to be a seg
      or msf. now examine the output object to see if the types are
      compatable. */

          if fs_util_type_2 ^= FS_OBJECT_TYPE_SEGMENT & fs_util_type_2 ^= FS_OBJECT_TYPE_MSF
          then do;
                    Code = error_table_$not_seg_type;
                    return;
               end;

          Errsw = "0"b;                                        /* indicates error applied to source */
          call fs_util_$list_extended_acl (dir_name (1), entryname (1), GENERAL_EXTENDED_ACL_VERSION_1,
               get_system_free_area_ (), acl_ptr, Code);
          if Code ^= 0
          then return;

          Errsw = "1"b;                                         /* indicates error applied to target */
          call fs_util_$replace_extended_acl (dir_name (2), entryname (2), acl_ptr, "1"b /* no sysdaemon! */, Code);

          return;
     end SPECIAL_CASE_SEG_MSF;


EXIT:
          call clean_up ();

          if Code = 0
          then Errsw = "0"b;

          return;


clean_up:
     proc;

          if acl_ptr ^= null ()
          then do;
                    free general_acl;                       /* or general_extended_acl, illegal but effective */
                    return;
               end;

     end clean_up;

     end copy_acl_;
