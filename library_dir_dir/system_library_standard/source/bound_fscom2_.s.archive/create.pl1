/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1974 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


create: cr: proc;


/* Command completely re-written on 10/04/74 to add create_dir options for
   compatibility with the Access Isolation Mechanism  -- J. C. Whitmore  */
/* Modified 750122 by LJS to use new hcs_$create_branch_ and clean up error handling */
/* Modified 751205 by LJS to use parent access class as default, make dir names starting with "-" invalid */
/* Modified April 1976 by Larry Johnson to create master directories */
/* Fix to reject "" and not print err after "no" to query 04/08/80 S. Herbst */
/* Fixed to reject -foo, create_dir to set 7,7 brackets and accept -rb 06/30/82 S. Herbst */
/* Changed to not create through links 07/28/82 S. Herbst */
/* Fixed -name 12/21/83 S. Herbst */
/* Rewrote again, added -msf and -max_length 01/11/84 S. Herbst */
/* Changed to provide dir_quota for dirs, December 1984, Keith Loepere. */
/* Modified 1985-01-02 by EJ Sharpe to add -account and -owner */
/* Fixed -name to disallow white space or null arg 02/21/85 Steve Herbst */


/* Constants */

dcl  SMA bit (3) unaligned internal static options (constant) init ("111"b);
dcl  RW bit (3) unaligned internal static options (constant) init ("101"b);


/* Based */

dcl arg char (arg_len) based (arg_ptr);


/* Automatic */

dcl dn char (168);
dcl (ctl_arg_name, en, lv_name, type_name, whoami) char (32);
dcl (account, owner) char (32);

dcl access_class bit (72) aligned;
dcl (create_dir_sw, create_msf_sw) bit (1);
dcl (ac_specified_sw, lv_specified_sw, quota_specified_sw, dir_quota_specified_sw) bit (1);
dcl (acct_specified_sw, owner_specified_sw) bit (1);

dcl (alp, arg_ptr, fcb_ptr) ptr;

dcl rb (3) fixed bin;
dcl (arg_count, i) fixed bin;
dcl (quota, dir_quota) fixed bin (18);
dcl (msf_max_length, specified_max_length) fixed bin (19);
dcl arg_len fixed bin (21);
dcl code fixed bin (35);


/* External */

dcl error_table_$action_not_performed fixed bin (35) ext;
dcl error_table_$bad_ring_brackets fixed bin (35) ext;
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$invalid_ring_brackets fixed bin (35) ext;
dcl error_table_$namedup fixed bin (35) ext;
dcl error_table_$no_s_permission fixed bin (35) ext;
dcl error_table_$noarg fixed bin (35) ext;
dcl error_table_$noentry fixed bin (35) ext;
dcl error_table_$nostars fixed bin (35) ext;
dcl sys_info$max_seg_size fixed bin(35) ext static;


/* Entries */

dcl check_star_name_$entry entry (char (*), fixed bin (35));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl cu_$arg_count entry (fixed bin, fixed bin (35));
dcl cu_$arg_list_ptr entry (ptr);
dcl cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl mdc_$create_dirx_acct entry (char (*), char (*), char (*), ptr, char (*), char (*), fixed bin (35));
dcl cu_$level_get entry () returns (fixed bin);
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_authorization_ entry returns (bit (72) aligned);
dcl get_group_id_$tag_star entry () returns (char (32));
dcl get_wdir_ entry returns (char (168));
dcl hcs_$create_branch_ entry (char (*), char (*), pointer, fixed bin (35));
dcl hcs_$set_max_length entry (char(*), char(*), fixed bin(19), fixed bin(35));
dcl hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl ioa_ entry options (variable);
dcl msf_manager_$close entry (ptr);
dcl msf_manager_$msf_get_ptr entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl msf_manager_$open entry (char(*), char(*), ptr, fixed bin(35));
dcl nd_handler_ entry (char (*), char (*), char (*), fixed bin (35));
dcl pathname_ entry (char (*), char (*)) returns (char (168));


/* Builtins */

dcl (addr, mod, null, string, substr, verify) builtin;


/* Conditions */

dcl cleanup condition;

%include create_branch_info;

dcl 1 branch_template aligned like create_branch_info;

dcl WHITE_SPACE char (4) aligned int static options (constant) init (/* NL HT SP FF */ "
	 ");

	whoami = "create";
	create_dir_sw = "0"b;
	go to CHECK_ARGS;



create_dir: createdir: cd: entry;

	whoami = "create_dir";
	create_dir_sw = "1"b;

CHECK_ARGS:
	access_class = get_authorization_ ();

	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, whoami);
	     return;
	end;
	if arg_count = 0 then do;
USAGE:	     call com_err_$suppress_name (0, whoami, "Usage:  ^a paths {-control_args}", whoami);
	     return;
	end;

	call cu_$arg_list_ptr (alp);

	create_msf_sw = "0"b;
	ac_specified_sw, lv_specified_sw, quota_specified_sw, dir_quota_specified_sw = "0"b;
	acct_specified_sw, owner_specified_sw = "0"b;
	msf_max_length = 0;				/* can be changed by -max_length */
	quota, dir_quota = 0;

	if create_dir_sw then rb (1), rb (2), rb (3) = 7;	/* default for dirs */
	else rb (1), rb (2), rb (3) = cu_$level_get ();	/* for segments */
	account = "";	/* defaults to user's proccess group id */
	owner = "";	/* defaults to user's proccess group id */

begin;

dcl name_sw (arg_count) bit (1) unaligned;
dcl path_sw (arg_count) bit (1) unaligned;

	string (name_sw) = "0"b;
	string (path_sw) = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
	     if code ^= 0 then do;
		call com_err_ (code, whoami);
		return;
	     end;

/* Control args only for create_dir */

	     if arg = "-access_class" | arg = "-acc" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-access_class";	/* save arg name in case error printed */
		i = i + 1;
		if i > arg_count then do;
MISSING_VALUE:	     call com_err_ (0, whoami, "No value specified for ^a", ctl_arg_name);
		     return;
		end;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		call convert_authorization_$from_string (access_class, arg, code);
		if code ^= 0 then do;		/* all errors are fatal */
		     call com_err_ (code, whoami, arg);
		     return;
		end;
		ac_specified_sw = "1"b;
	     end;

	     else if arg = "-logical_volume" | arg = "-lv" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-logical_volume";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		lv_specified_sw = "1"b;
		lv_name = arg;
	     end;

	     else if arg = "-quota" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-quota";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		quota = cv_dec_check_ (arg, code);
		if code ^= 0 then do;
BAD_VALUE:	     call com_err_ (code, whoami, "Cannot convert ^a value ^a", ctl_arg_name, arg);
		     return;
		end;
		quota_specified_sw = "1"b;
	     end;

	     else if arg = "-dir_quota" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-dir_quota";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		dir_quota = cv_dec_check_ (arg, code);
		if code ^= 0 then go to BAD_VALUE;
		dir_quota_specified_sw = "1"b;
	     end;

	     else if arg = "-account" | arg = "-acct" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-account";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		account = arg;
		acct_specified_sw = "1"b;
	     end;

	     else if arg = "-owner" | arg = "-ow" then do;
		if ^create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-owner";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		owner = arg;
		owner_specified_sw = "1"b;
	     end;

/* Control args only for create */

	     else if arg = "-max_length" | arg = "-ml" then do;
		if create_dir_sw then go to BAD_CTL_ARG;
		ctl_arg_name = "-max_length";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		msf_max_length = cv_dec_check_ (arg, code);
		if code ^= 0 then go to BAD_VALUE;
		if msf_max_length <= 0 then go to BAD_VALUE;
	     end;

	     else if arg = "-multisegment_file" | arg = "-msf" then do;
		if create_dir_sw then go to BAD_CTL_ARG;
		create_msf_sw = "1"b;
	     end;

	     else if arg = "-segment" | arg = "-sm" then do;
		if create_dir_sw then go to BAD_CTL_ARG;
		create_msf_sw = "0"b;
	     end;

/* Control args for both commands */

	     else if arg = "-name" | arg = "-nm" then do;
		ctl_arg_name = "-name";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		if verify (arg, WHITE_SPACE) = 0 then do;
		     call com_err_ (0, whoami, "Invalid name ""^a""", arg);
		     return;
		end;
		path_sw (i), name_sw (i) = "1"b;
	     end;

	     else if arg = "-ring_brackets" | arg = "-rb" then do;
		ctl_arg_name = "-ring_brackets";
		i = i + 1;
		if i > arg_count then go to MISSING_VALUE;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
		rb (1) = cv_dec_check_ (arg, code);
		if code ^= 0 then go to BAD_VALUE;
		if i < arg_count then do;
		     call cu_$arg_ptr_rel (i + 1, arg_ptr, arg_len, code, alp);
		     rb (2) = cv_dec_check_ (arg, code);
		     if code = 0 then do;
			i = i + 1;
			if i < arg_count & ^create_dir_sw then do;
			     call cu_$arg_ptr_rel (i + 1, arg_ptr, arg_len, code, alp);
			     rb (3) = cv_dec_check_ (arg, code);
			     if code = 0 then i = i + 1;
			     else rb (3) = rb (2);
			end;
			else rb (3) = rb (2);
		     end;
		     else rb (2), rb (3) = rb (1);
		end;
		else rb (2), rb (3) = rb (1);
	     end;

	     else if substr (arg, 1, 1) = "-" then do;
BAD_CTL_ARG:	call com_err_ (error_table_$badopt, whoami, arg);
		return;
	     end;

	     else do;
		if verify (arg, WHITE_SPACE) = 0 then do;  /* blank arg */
		     call com_err_ (0, whoami, "Invalid name ""^a""", arg);
		     return;
		end;
		path_sw (i) = "1"b;
	     end;
	end;

	if string (path_sw) = "0"b then go to USAGE;

	if msf_max_length ^= 0 & ^create_msf_sw then do;
	     call com_err_ (0, whoami, "-max_length can only be specified with -msf.");
	     return;
	end;

	if msf_max_length > sys_info$max_seg_size then do;
	     call ioa_ ("^a: Max length ^d greater than limit of ^d; using ^d for max length.",
		whoami, msf_max_length, sys_info$max_seg_size, sys_info$max_seg_size);
	     msf_max_length = sys_info$max_seg_size;
	end;
	if mod (msf_max_length, 1024) ^= 0 then do;
	     specified_max_length = msf_max_length;
	     msf_max_length = msf_max_length - mod (msf_max_length, 1024) + 1024;
	     call ioa_ ("^a: ^d is not a multiple of 1024; ^d will be used for max length.",
		whoami, specified_max_length, msf_max_length);
	end;

	if ^quota_specified_sw & (lv_specified_sw | ac_specified_sw) then do; /* special directories need quota */
	     if lv_specified_sw & ac_specified_sw then type_name = "upgraded master";
	     else if lv_specified_sw then type_name = "master";
	     else type_name = "upgraded";
	     call com_err_ (error_table_$noarg, whoami, "-quota needed to create ^a directory.", type_name);
	     return;
	end;

	if (acct_specified_sw | owner_specified_sw) & ^lv_specified_sw then do;
	     call com_err_ (error_table_$noarg, whoami,
		"^[-account^]^[ and ^]^[-owner^] may only be specified when using -logical_volume to create a master directory.",
		acct_specified_sw, (acct_specified_sw & owner_specified_sw), owner_specified_sw);
	     return;
	end;

/* - - - - This is where the real work starts - - - - */

/* Fill in structure that gets passed to hcs_$create_branch_ */

	branch_template.version = create_branch_version_2; /* Fill in version constant defined
						   in include file */
	branch_template.switches.dir_sw = create_dir_sw;
	branch_template.switches.copy_sw = "0"b;
	branch_template.switches.priv_upgrade_sw = "0"b;
	branch_template.switches.mbz1 = (31)"0"b;
	if create_dir_sw then branch_template.mode = SMA;
	else branch_template.mode = RW;
	branch_template.mbz2 = (33)"0"b;
	do i = 1 to 3;
	     branch_template.rings (i) = rb (i);
	end;
	branch_template.userid = get_group_id_$tag_star ();
	branch_template.bitcnt = 0;
	branch_template.quota = quota;
	branch_template.dir_quota = dir_quota;
	branch_template.chase_sw = "0"b;

	do i = 1 to arg_count;

	     if ^path_sw (i) then go to END_LOOP;	/* skip over control args */

	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, alp);
	     if code ^= 0 then do;
		call com_err_ (code, whoami, "Arg: ^d", i);
		return;
	     end;

	     if name_sw (i) then do;
		dn = get_wdir_ ();
		en = arg;
	     end;
	     else do;
		call expand_pathname_ (arg, dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, whoami, arg);
		     go to END_LOOP;
		end;

		call check_star_name_$entry (en, code);
		if code ^= 0 then do;
		     if code < 3 then code = error_table_$nostars;  /* star convention not allowed */
		     go to COMPLAIN;
		end;
	     end;

	     branch_template.parent_ac_sw = ^ac_specified_sw;
	     branch_template.access_class = access_class;

TRY_AGAIN:	
	     if lv_specified_sw then
		call mdc_$create_dirx_acct (dn, en, lv_name, addr (branch_template), account, owner, code);

	     else if create_msf_sw then code = create_msf ();

	     else call hcs_$create_branch_ (dn, en, addr (branch_template), code);

	     if code ^= 0 then
		if code = error_table_$namedup then do;

		     call nd_handler_ (whoami, dn, en, code);
		     if code = 0 then go to TRY_AGAIN;	/* user deleted it */
		     if code > 1 & code ^= error_table_$action_not_performed then
COMPLAIN:			call com_err_ (code, whoami, "^a^[^/^-Specified ring brackets: ^d,^d,^d^]",
			     pathname_ (dn, en),
			     code = error_table_$bad_ring_brackets | code = error_table_$invalid_ring_brackets,
			     rb (1), rb (2), rb (3));
		     go to END_LOOP;
		end;
		else go to COMPLAIN;

END_LOOP:	end;

end;  /* begin block */

	return;
%page;
create_msf: proc returns (fixed bin (35));

/* Creates an MSF with pathname dn>en, returns the status code */

dcl code fixed bin (35);

	call hcs_$status_minf (dn, en, 0, 0, 0, code);
	if code = 0 | code = error_table_$no_s_permission then return (error_table_$namedup);
	else if code ^= error_table_$noentry then return (code);

	fcb_ptr = null;

	on cleanup begin;
	     if fcb_ptr ^= null then call msf_manager_$close (fcb_ptr);
	end;

	call msf_manager_$open (dn, en, fcb_ptr, code);
	if fcb_ptr = null then return (code);

	call msf_manager_$msf_get_ptr (fcb_ptr, 0, "1"b, null, 0, code);  /* creates the MSF */

	call msf_manager_$close (fcb_ptr);

	if msf_max_length ^= 0 then do;
	     call hcs_$set_max_length (pathname_ (dn, en), "0", msf_max_length, code);
	     if code ^= 0 then
		call com_err_ (code, whoami, "Could not set max length of ^a>0", pathname_ (dn, en));
	end;

	return (code);

end create_msf;


end create;
