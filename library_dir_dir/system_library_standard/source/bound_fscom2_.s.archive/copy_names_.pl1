/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */




/* format: style2,idind30,indcomtxt */

copy_names_:
     proc (dir1, en1, dir2, en2, entry_name, errsw, code);


/* Procedure to copy (copy_names_) or move (move_names_) the names from one segment to another. */
/* Copy_names_ copies all the names on a segment, move_names_ ignores the first name */
/* Coded by John Strayhorn 7/1/70 */
/* modified by E. Stone 12/71 - to allow nd_handler_ to be called from the user ring only */
/* last modified by J. Klensin 8/73 - to permit handling more than 60 names */
/* Bug fixed 1/22/76 by Steve Herbst */
/* changed to call object_type_ Jay Pattin 2/17/83 */
/* 830924 object_type_ -> fs_util_ BIM */

          dcl     (count, i)                    fixed bin (17);
          dcl     code                          fixed bin (35);
          dcl     (dir1, dir2)                  char (*);   /* directories */
          dcl     (en1, en2, entry_name)        char (*);   /* entry names */
          dcl     name                          char (32);  /* temporary name to save based references */
          dcl     (areap, eptr)                 ptr;
          dcl     np                            ptr init (null);
          dcl     1 branch                      aligned,    /* structure for status */
                    2 type                      bit (2) unal,
                    2 nnames                    bit (16) unal,
                    2 nrp                       bit (18) unal,
                    2 pad                       bit (108) unal;

          dcl     area                          area based (areap);

          dcl     cleanup                       condition;

          dcl     names                         (0:119) char (32) based (np);
          dcl     hcs_$status_                  entry (char (*), char (*), fixed bin, ptr, ptr, fixed bin (35));
          dcl     fs_util_$chname_file          entry (char (*), char (*), char (*), char (*), fixed bin (35));
          dcl     nd_handler_                   entry (char (*), char (*), char (*), fixed bin (35));
          dcl     get_system_free_area_         entry () returns (ptr);

          dcl     (addr, bin, empty, null, ptr) builtin;
          dcl     (get_ring_, get_initial_ring_)
                                                returns (fixed bin);
          dcl     error_table_$namedup          external fixed bin (35);
          dcl     error_table_$segnamedup       external fixed bin (35);
          dcl     (mvsw, errsw, nd_flag, sd_flag, user_ring)
                                                bit (1) aligned;


          mvsw = "0"b;
          go to start;


/* This entry deletes the names before adding them to the target segment. */

move_names_:
     entry (dir1, en1, dir2, en2, entry_name, errsw, code);
          mvsw = "1"b;

/* Default assumption is that error occurred while referencing first segment. */

start:
          errsw, nd_flag, sd_flag = "0"b;

/* set switch to indicate whether called from user ring (OK to query) */
          user_ring = (get_ring_ () >= get_initial_ring_ ());


/* initialize pointers and area (for status) */


          areap = get_system_free_area_ ();

          eptr = addr (branch);

          on condition (cleanup) call clean_up;

/* call status to get names (get link names if a link). */


          call hcs_$status_ (dir1, en1, 0, eptr, areap, code);
          if code ^= 0
          then go to out;

          np = ptr (areap, branch.nrp);
          count = bin (branch.nnames, 17);

/* move the names: same order, deleting first for move */

          do i = 0 to count - 1;

               name = np -> names (i);

               if mvsw
               then do;
                         if name = en1
                         then go to nex_nam;                /* leave the name given as argument */
                         call fs_util_$chname_file (dir1, en1, name, "", code);
                         if code ^= 0
                         then go to out;
                    end;


next_try:
               call fs_util_$chname_file (dir2, en2, "", name, code);
               if code ^= 0
               then do;
                         if code = error_table_$namedup
                         then do;                           /* name already in directory */
                                   if user_ring
                                   then do;                 /* query user to correct namedup */
                                             call nd_handler_ (entry_name, dir2, name, code);
                                             if code = 0
                                             then go to next_try;
                                        end;
                                   nd_flag, errsw = "1"b;
                                   go to nex_nam;
                              end;

                         else if code = error_table_$segnamedup
                         then do;                           /* name already on segment */
                                   sd_flag = "1"b;
                                   go to nex_nam;
                              end;

                         else do;
                                   if mvsw
                                   then call fs_util_$chname_file (dir1, en1, "", name, code);
                                   errsw = "1"b;
                                   call clean_up;
                                   return;
                              end;
                    end;
nex_nam:
          end;

out:
          if nd_flag
          then code = error_table_$namedup;
          else if sd_flag
          then code = error_table_$segnamedup;

          call clean_up;

clean_up:
     proc ();                                               /* procedure to free any space in system area */

          if np ^= null
          then free names in (area);

     end clean_up;

     end copy_names_;
