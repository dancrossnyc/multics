/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  equal_								*/
	/*									*/
	/*      This program provides an interface between the obsolete routine, equal_, and	*/
	/* the routine which has replaced it, get_equal_name_.  equal_ scans its character string	*/
	/* arguments to compute their length, according to the algorithm:			*/
	/*									*/
	/*	do Larg = 1 to 32 while (substr (arg, Larg, 1) ^= " ");			*/
	/*	     end;								*/
	/*	Larg = Larg - 1;							*/
	/*									*/
	/* and then calls get_equal_name_ with these arguments, and returns its results.	*/
	/* Eventually, this obsolete routine should be deleted.				*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created:  July, 1973 by G. C. Dixon					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

equal_:	procedure	(Pentry, Pequal, Ptarget, code);

     dcl	Pentry			ptr,		/* ptr to an entry name of 32 or fewer chars.(In)	*/
	Pequal			ptr,		/* ptr to an equal name of 32 or fewer chars.(In)	*/
	Ptarget			ptr,		/* ptr to a target name of 32 chars.(In)	*/
	code			fixed bin(35);	/* a status code.				*/

     dcl	Lentry			fixed bin,	/* length of entry name.			*/
	Lequal			fixed bin,	/* length of equal name.			*/
	entry			char(Lentry) based (Pentry),
	equal			char(Lequal) based (Pequal),
         (error_table_$bad_equal_name,
	error_table_$badequal)	fixed bin(35) ext static,
	get_equal_name_		entry (char(*), char(*), char(*), fixed bin(35)),
	substr			builtin,
	target			char(32) based (Ptarget);

	do Lentry = 1 to 32 while (substr (entry, Lentry, 1) ^= " ");
	     end;
	Lentry = Lentry - 1;
	do Lequal = 1 to 32 while (substr (equal, Lequal, 1) ^= " ");
	     end;
	Lequal = Lequal - 1;
	call get_equal_name_ (entry, equal, target, code);
	if code = error_table_$bad_equal_name then
	     code = error_table_$badequal;

	end equal_;
