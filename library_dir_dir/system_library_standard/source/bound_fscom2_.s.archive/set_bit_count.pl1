/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */




/* format: style2,idind30,indcomtxt */

set_bit_count:
sbc:
     procedure options (variable);

/* procedure to set the bit count on segments */
/* coded by M. Weaver on  28 November 1969  11:00 A.M.  */
/* modified by M. Weaver  22 January 1970 */
/* modified to reject too large bit count 9/15/76 S. Herbst */
/* Modified 2/20/83 Jay Pattin for object_type_ */
/* 830924 BIM for fs_util_ */

          dcl     dirname                       char (168);
          dcl     arg                           char (argl) based (argp) unaligned;
          dcl     ename                         char (32);
          dcl     bitcnt                        fixed bin (24);
          dcl     bc_35                         fixed bin (35);
          dcl     argl                          fixed bin (21);
          dcl     i                             fixed bin;
          dcl     argp                          ptr;
          dcl     arg_count                     fixed bin;
          dcl     (
                  code,
                  error_table_$noarg            ext
                  )                             fixed bin (35);
          dcl     cv_dec_check_                 entry (char (*), fixed bin (35)) returns (fixed bin (35));
          dcl     err_name                      char (16) static init ("set_bit_count") options (constant);
          dcl     expand_pathname_              entry (char (*), char (*), char (*), fixed bin (35));
          dcl     fs_util_$set_bit_count        entry (char (*), char (*), fixed bin (24), fixed bin (35));
          dcl     com_err_                      entry options (variable);
          dcl     cu_$arg_count                 entry (fixed bin, fixed bin (35));
          dcl     cu_$arg_ptr                   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
          dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
          dcl     error_table_$nostars          fixed bin (35) ext static;
          dcl     pathname_                     entry (char (*), char (*)) returns (char (168));
          dcl     mod                           builtin;




          call cu_$arg_count (arg_count, code);
          if code ^= 0
          then do;
                    call com_err_ (code, err_name);
                    return;
               end;

          if arg_count = 0 | mod (arg_count, 2) ^= 0
          then do;
                    call com_err_ (0, err_name, "Usage: set_bit_count path1 bit_count1 ... pathN bit_countN");
                    return;
               end;

          do i = 1 by 2 to arg_count;
               call cu_$arg_ptr (i, argp, argl, (0));
               call expand_pathname_ (arg, dirname, ename, code);
               if code ^= 0
               then do;
                         call com_err_ (code, err_name, "^a", arg);
                         return;
                    end;
               call check_star_name_$entry (ename, code);
               if code = 1 | code = 2
               then code = error_table_$nostars;
               if code ^= 0
               then do;
                         call com_err_ (code, err_name, "^a.", arg);
                         return;
                    end;

               call cu_$arg_ptr (i + 1, argp, argl, (0));
               if argl = 0
               then do;
                         call com_err_ (0, err_name, "Null argument supplied as bit count for ^a.",
                              pathname_ (dirname, ename));
                         return;
                    end;

               bc_35 = cv_dec_check_ (arg, code);
               if code ^= 0
               then do;

                         call com_err_ (0, err_name, "Illegal decimal digits in bit count ^a for ^a", arg,
                              pathname_ (dirname, ename));

                         return;
                    end;

               if bc_35 > 2 ** 24 - 1
               then do;
                         call com_err_ (0, err_name, "Bit count ^d is larger than the maximum 2**24-1.", bc_35);
                         return;
                    end;
               else bitcnt = bc_35;
               call fs_util_$set_bit_count (dirname, ename, bitcnt, code);
               if code ^= 0
               then do;
                         call com_err_ (code, err_name, "^a", pathname_ (dirname, ename));
                         return;
                    end;

          end;

          return;
     end set_bit_count;
