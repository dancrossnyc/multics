/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-04-20,Parisek), approve(88-06-13,MCR7913),
     audit(88-08-16,Farley), install(88-08-22,MR12.2-1089):
     Initial coding.  Extracted code from list_abs_requests.pl1 and modified
     to meet the specific requirements of this command/AF.  This command calls
     lar_util_$request_info (new entrypoint developed to service this
     command) with three parameters, the pointer to the info structure, a
     switch designating whether or not rqi was invoked as active function,
     and finally the return error code.  SCP-6391.
                                                   END HISTORY COMMENTS */

/* format: off */

request_info:
rqi:	procedure;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Command/Active function to provide information on absentee, IO Daemon, retrieval	*/
          /* and imft requests                                                                      */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

    dcl	
          abs_key                       bit(1),
	afsw                          bit(1) aligned,
	allsw                         bit(1) aligned,
	arg_msg			char(64),
	argptr			ptr,
	arglen			fixed bin(21),
	code			fixed bin(35),
	com_key                       bit(1),
	ctl_arg_given		bit(1),
	default_queue		fixed bin,
	dfi_arg                       char(32),
	dir			char(168),
	ds_arg                        char(32),
	ent			char(32),
	err_msg			char(256),
	fg_arg                        char(32),
	fg_sw                         bit(1),
	finish			fixed bin,
	foreground_sw		bit(1),
	gen_type			char(32),
	i			fixed bin,
	ignore_code		fixed bin(35),
	ii			fixed bin,
	iix			fixed bin,
	imft_dest                     char(32),
	imft_key                      bit(1),
	imft_source                   char(32),
	io_key                        bit(1),
	io_queue_name                 char(32),
	key_arg                       char(32),
	max_queue			fixed bin,
	min_queue			fixed bin,
	nargs			fixed bin,
	pch_arg                       char(32),
	plt_arg                       char(32),
	prt_arg                       char(32),
	priority			fixed bin,
	priority_q                    char(2),
          retlen                        fixed bin(21),
	retptr                        ptr,
	retv_key                      bit(1),
	rsc_arg                       char(32),
	rqt_arg                       char(32),
	rqt_key                       bit(1),
	rqi_key                       bit(1),
	rqt_type                      fixed bin,
	rs_len                        fixed bin,
	sc_arg                        char(32),
	sdr_arg                       char(32),
	start			fixed bin,
	tp			ptr,
	user_arg			bit(1) aligned;

    dcl	arg			char(arglen) unal based (argptr);
    dcl   ret_arg                       char(retlen) varying based (retptr);
    dcl   ret_data                      char(info.output_count) based (info.temptr);
		
    dcl  (addr, after, before, hbound, index, length, min, null, rtrim,
	substr, unspec) 		builtin;

    dcl	cleanup			condition;

    dcl   complain                      entry variable options (variable),
						/* com_err_ or active_fnc_err_ */
	get_argument                  variable entry (fixed bin, ptr, fixed bin(21), fixed bin (35)),
	active_fnc_err_               entry options (variable),
	com_err_			options (variable),
          cu_$af_return_arg             entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$af_arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cv_dec_check_		entry (char(*), fixed bin(35)) returns(fixed bin(35)),
	enter_output_request$default_request_type
				entry (char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	enter_output_request$request_type
				entry (char(*), char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35)),
	get_temp_segment_		entry (char(*), ptr, fixed bin(35)),
	hcs_$star_		entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr,
				     fixed bin(35)),
	message_segment_$close	entry (fixed bin, fixed bin(35)),
	message_segment_$open	entry (char(*), char(*), fixed bin, fixed bin(35)),
	ioa_$rsnnl		entry() options(variable),
	iod_info_$generic_type	entry (char(*), char(32), fixed bin(35)),
	iod_info_$queue_data	entry (char(*), fixed bin, fixed bin, fixed bin(35)),
	iox_$put_chars		entry (ptr, ptr, fixed bin(21), fixed bin(35)),
	lar_util_$request_info	entry (ptr, bit (1) aligned, fixed bin(35)),    
	release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
	system_info_$default_absentee_queue
				entry (fixed bin);

    dcl	ALL                           fixed bin int static options (constant) init (1),
						/* bit position in com_keywords */
    	BRANCHES                      fixed bin(2) int static options (constant) init (2),
    	CURRENTLY_UNDEFINED           fixed bin int static options (constant) init (-1),
          IMFT                          fixed bin int static options (constant) init (5),
	POSITION                      fixed bin int static options (constant) init (4),
						/* bit position in com_keywords */
	QUEUE_NEG                     fixed bin int static options (constant) init (-1),
	QUEUE_1                       fixed bin int static options (constant) init (1),
	QUEUE_2                       fixed bin int static options (constant) init (2),
	QUEUE_3                       fixed bin int static options (constant) init (3),
	QUEUE_4                       fixed bin int static options (constant) init (4),
	abs_dir			char(168) int static init(">system_control_1"),
	id                            char(32) int static options (constant) init ("request_info"),
	iod_dir			char(168) int static init(">daemon_dir_dir>io_daemon_dir"),
	retriever_dir		char(168) int static init(">daemon_dir_dir>volume_retriever");

    dcl	error_table_$badopt		fixed bin(35) ext static,
	error_table_$id_not_found	fixed bin(35) ext static,
	error_table_$noarg		fixed bin(35) ext static,
	error_table_$not_act_fnc	fixed bin(35) ext static,
	iox_$user_output		ptr ext static;




	%include lar_info;

    dcl	1 local_info		like info aligned;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

 	call cu_$af_return_arg (nargs, retptr, retlen, code);
	if code = 0 then do;
 	     afsw = "1"b;
 	     complain = active_fnc_err_;
 	     get_argument = cu_$af_arg_ptr;
 	     ret_arg = "";
 	end;
 	else if code = error_table_$not_act_fnc then do;
 	     afsw = "0"b;
 	     complain = com_err_;
 	     get_argument = cu_$arg_ptr;
 	end;
	else if code ^= 0 then do;
	     call com_err_ (code, id);
	     return;
	end;		

	call init;				/* defaults */
	
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

	allsw,     
	ctl_arg_given,
	foreground_sw = "0"b;

	do i = 1 to nargs;
	     call get_arg (i);
	     if code ^= 0 then go to CHECK;		/* if no more arguments do consistency check */
	     if index(arg, "-") = 1 then do;		/* if argument is an option match it with acceptable options */
		ctl_arg_given = "1"b;
		if arg = "-user" |
		arg = "-am" | arg = "-admin" then do;
		     if arg = "-user" then user_arg = "1"b; /* remember if it was -user */
		     else user_arg = ""b;		/* or -admin */
		     info.admin_sw = "1"b;
		     call get_arg (i+1);		/* check for optional user name */
		     if code = 0			/* if there is an argument there */
		     & index(arg, "-") ^= 1 then do;	/* and it is not a control arg */
			if info.user_sw then do;	/* user given ... but user already given */
			     arg_msg = "User name given twice";
PRINT_ARG_ERR:		     call ioa_$rsnnl ("^a. ^a", err_msg, rs_len, arg_msg, arg);
			     call print_err_msg (0);
			     return;
			end;
			i = i + 1;		/* remember that we used this arg */
			info.user_sw = "1"b;
			info.person = before (arg, ".");
			info.project = before (after (arg, "."), ".");
			if info.person = "" then info.person = "*";
			if info.project = "" then info.project = "*";
		     end;
		     else if user_arg then do;	/* user name not optional after -user */
			code = error_table_$noarg;
			arg_msg = "After -user";
			goto PRINT_MISS_ARG;
		     end;
		end;

		else if arg = "-p" | arg = "-pn" | arg = "-pathname" then do;
		     if info.dirname_sw then do;
			if info.ename_sw then	/* -et already given */
			     arg_msg = "Pathname and entryname cannot both be given.";
			else arg_msg = "Pathname given twice";
			goto PRINT_ARG_ERR;
		     end;
		     i = i + 1;
		     call get_arg (i);		/* get PATH */
		     if code ^= 0 then do;
			arg_msg = "After -pn";
			goto PRINT_MISS_ARG;
		     end;
		     call expand_pathname_ (arg, info.dirname, info.ename, code);
		     if code ^= 0 then do;
			call ioa_$rsnnl ("Expanding pathname: ^a", err_msg, rs_len, arg);
			call print_err_msg (code);
			return;
		     end;
		     info.dirname_sw, info.path_sw = "1"b;
		end;
		else if arg = "-a" | arg = "-all" then info.all_opt_sw = "1"b; /* we'll check later */
		else if (arg = "-im" | arg = "-immediate") then do;
		     if info.request_type = RETV then do;
			err_msg = "Cannot specify -immediate with the retrieval request type.";
			call print_err_msg (0);
			return;
		     end;
		     info.immediate = "1"b;
		end;
		else if arg = "-q" | arg = "-queue" then do;
		     if info.q_opt_sw then do;
			arg_msg = "Queue option given twice";
			goto PRINT_ARG_ERR;
		     end;
		     i = i + 1;			/* get next argument - number indicating which queue */
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -queue";
			goto PRINT_MISS_ARG;
		     end;
		     info.q_opt_sw = "1"b;		/* remember that it has been given */
		     priority_q = arg;		/* remember for CHECK */
		     if (arg = "fg" | arg = "foreground") then fg_sw = "1"b;
		end;
		else if arg = "-id" then do;
		     if info.id_sw then do;
			arg_msg = "Id option given twice";
			goto PRINT_ARG_ERR;
		     end;
		     i = i + 1;			/* next arg is the ID */
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -id";
PRINT_MISS_ARG:		err_msg = arg_msg;
			call print_err_msg (code);
			return;
		     end;
		     info.id_sw = "1"b;
		     info.request_id = arg;
		end;
		else if arg = "-et" | arg = "-entry" then do;
		     if info.ename_sw then do;	/* entryname already given */
			if info.dirname_sw then
			     arg_msg = "Pathname and entry name cannot both be given";
			else arg_msg = "Entry name given twice";
			goto PRINT_ARG_ERR;
		     end;
		     i = i + 1;
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -entry";
			goto PRINT_MISS_ARG;
		     end;
		     info.ename_sw = "1"b;
		     info.ename = arg;
		end;
		else if arg = "-forms" then do;
		     if info.forms_sw then do;
			arg_msg = "Forms given twice.";
			goto PRINT_ARG_ERR;
		     end;
		     call get_arg (i+1);		/* check for optional forms name */
		     if code = 0 & index (arg, "-") ^= 1 then do;
			i = i + 1;		/* increment arg index */
			info.forms_name = arg;	/* and save form name */
		     end;
		     else info.forms_name = "";	/* else show no form name given */
		     info.forms_sw = "1"b;
		end;
		else if arg = "-rsc" | arg = "-resource" then do;
		     info.resource_sw = "1"b;
		     rsc_arg = arg;
		     call get_arg (i+1);		/* look at next arg */
		     if code = 0			/* if there is an arg there */
			then if index(arg, "-") ^= 1 then do;
						/* and it's not a control arg */
						/* assume it's a resource name */
			     i = i + 1;		/* bump arg index */
			     if info.resource_name_sw then do;
				arg_msg = "Resource name given twice";
				goto PRINT_ARG_ERR;
			     end;
			     info.resource_name_sw = "1"b;
			     info.resource_name = arg;
			     if length (arg) > length (info.resource_name) then do;
				call ioa_$rsnnl ("Resource name too long; limit is ^d characters.",
				     err_msg, rs_len, length (info.resource_name));
				call print_err_msg (0);
				return;
			     end;
			end;
		end;
		else if arg = "-dfi" | arg = "-deferred_indefinitely" then do;
		     dfi_arg = arg;	
		     info.deferred_indefinitely = "1"b;
		end;
		else if arg= "-destination" | arg = "-ds" then do;
						/* IMFT ctl_arg */
		     if ds_arg ^= "" then do;
			arg_msg = "Destination given twice";
			goto PRINT_ARG_ERR;
		     end;
		     ds_arg = arg;
		     i = i + 1;
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -destination";
			goto PRINT_MISS_ARG;
		     end;
		     imft_dest = arg;
		end;
		else if arg= "-source" | arg = "-sc" then do;
						/* IMFT ctl_arg */
		     if sc_arg ^= "" then do;
			arg_msg = "Source given twice";
			goto PRINT_ARG_ERR;
		     end;
		     sc_arg = arg;
		     i = i + 1;
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -source";
			goto PRINT_MISS_ARG;
		     end;
		     imft_source = arg;
		end;
		else if arg = "-sender" then do;
		     if info.sender_sw then do;
			arg_msg = "Sender given twice";
			goto PRINT_ARG_ERR;
		     end;
		     sdr_arg = arg;	
		     i = i + 1;
		     call get_arg (i);
		     if code ^= 0 then do;
			arg_msg = "After -sender";
			goto PRINT_MISS_ARG;
		     end;
		     info.sender_sw = "1"b;
		     info.sender = arg;
		end;
		else if arg = "-fg" | arg = "-foreground" then do;
		     fg_arg = arg;	
		     foreground_sw = "1"b;
		end;
		else do;
		     err_msg = arg;
		     call print_err_msg (error_table_$badopt);
		     return;
		end;
               end;

	     else do;				/* not a control arg, might be a keyword or request type */
		do ii = 1 to hbound (com_keywords, 1) while
		     (com_keywords (ii) ^= arg);	/* check for common keys */
		end;
		if ii <= hbound (com_keywords, 1) then do;
		     iix = com_keyword_index (ii);
		     if iix = ALL | iix = POSITION then do;
			if iix = ALL then allsw = "1"b;
			info.position_sw = "1"b;	/* position or all */
		     end;
		     substr(info.com_rqi, iix, 1) = "1"b;
		     com_key = "1"b;		/* remember what key is being used */
		     rqi_key = "1"b;		/* remember that a key is specified */
		end;
		else do;
		     do ii = 1 to hbound (abs_keywords, 1) while
			(abs_keywords (ii) ^= arg);	/* check for abs keys */
		     end;
		     if ii <= hbound (abs_keywords, 1) then do;
			iix = abs_keyword_index (ii);
			substr(info.abs_rqi, iix, 1) = "1"b;
			abs_key = "1"b;
			rqi_key = "1"b;
		     end;
		     else do;
			do ii = 1 to hbound (output_keywords, 1) while
			     (output_keywords (ii) ^= arg);
						/* check for output/io keys */
			end;
			if ii <= hbound (output_keywords, 1) then do;
			     iix = output_keyword_index (ii);
			     substr(info.output_rqi, iix, 1) = "1"b;
			     io_key = "1"b;
			     rqi_key = "1"b;
			end;
			else do;
			     do ii = 1 to hbound (retv_keywords, 1) while
				(retv_keywords (ii) ^= arg);
						/* check for retrieval keys */
			     end;
			     if ii <= hbound (retv_keywords, 1) then do;
				iix = retv_keyword_index (ii);
				substr(info.retv_rqi, iix, 1) = "1"b;
				retv_key = "1"b;
				rqi_key = "1"b;
			     end;
			     else do;
				do ii = 1 to hbound (imft_keywords, 1) while
				     (imft_keywords (ii) ^= arg);
						/* check for imft keys */
				end;
				if ii <= hbound (imft_keywords, 1) then do;
				     iix = imft_keyword_index (ii);
				     substr(info.imft_rqi, iix, 1) = "1"b;
				     imft_key = "1"b;
				     rqi_key = "1"b;
				end;
				else if ^rqt_key then do;	/* check for request type key */
				     call look_rqt_key (substr(arg, 1, arglen));
						/* define the rqt */
				     key_arg = arg;
				     rqt_key = "1"b;
				     call init_rqt;
						/* initialize rqt dependent data */
				end;
				else do;		/* must be invalid keyword */
				     call ioa_$rsnnl ("Invalid keyword, ^a.",
					err_msg, rs_len, arg);
				     call print_err_msg (0);
				     return;
				end;
			     end;
			end;
		     end;
		end;
	     end;
	end;					/* end argument loop */

/* Now check the arguments for consistency */

CHECK:

	if ^rqt_key then do;			/* missing rqt key */
	     err_msg = "Missing request type keyword.";
	     call print_err_msg (0);
	     return;
	end;

	if ^rqi_key then do;			/* missing info key */
	     err_msg = "Missing request info keyword.";
	     call print_err_msg (0);
	     return;
	end;

	if allsw & afsw then do;
	     err_msg = "Keyword ""all"" not permitted with the active function.";
	     call print_err_msg (0);
	     return;
	end;

	if rqt_type = ABS & (^abs_key & ^com_key) then do;
incons_key:    err_msg = "request type key inconsistent with info key.";
	     call print_err_msg (0);
	     return;
	end;
	
	if (rqt_type = OUTPUT | rqt_type = IO) & (^io_key & ^com_key) then
	     goto incons_key;

	if rqt_type = RETV & (^retv_key & ^com_key) then goto incons_key;

	if rqt_type = IMFT & (^imft_key & ^com_key) then goto incons_key;

	if rqt_type ^= ABS then do;
	     if rsc_arg ^= "" then do;		/* -rsc given, but rqt not abs */
		err_msg = rtrim(rsc_arg) || " for " || key_arg;
		goto CHECK_BADOPT;
	     end;
	     else if dfi_arg ^= "" then do;		/* -dfi given, but rqt not abs */
		err_msg = rtrim(dfi_arg) || " for " || key_arg;
		goto CHECK_BADOPT;
	     end;
	     else if sdr_arg ^= "" then do;		/* -sender given, but rqt not abs */
		err_msg = rtrim(sdr_arg) || " for " || key_arg;
		goto CHECK_BADOPT;
	     end;
	     else if fg_arg ^= "" then do;		/* -foreground given, but rqt not abs */
		err_msg = rtrim(fg_arg) || " for " || key_arg;
		goto CHECK_BADOPT;
	     end;
	end;

	if rqt_type ^= IMFT & (ds_arg ^= "" | sc_arg ^= "") then do;
	     if ds_arg ^= "" then err_msg = rtrim(ds_arg) || " for " || key_arg;
						/* -dest given, but rqt not imft */
	     else err_msg = rtrim(sc_arg) || " for " || key_arg;
						/* -source given, but rqt not imft */
CHECK_BADOPT:  call print_err_msg (error_table_$badopt);
	     return;
	end;

	if info.all_opt_sw & info.q_opt_sw then do;
	     err_msg = "The -all and -queue control arguments are incompatible.";
	     call print_err_msg (0);
	     return;
	end;

	if info.q_opt_sw then do;
	     if fg_sw & rqt_type = ABS then priority = -1;/* foreground queue */
	     else do;
		priority = cv_dec_check_ (rtrim(priority_q), code);
		if code ^= 0 then do;
		     call ioa_$rsnnl ("Illegal queue number ^a", err_msg, rs_len, rtrim(priority_q));
		     call print_err_msg (0);
		     return;
		end;
	     end;
	     start, finish = priority;		/* specified queue */
	     if priority < min_queue | priority > max_queue then do;
		call ioa_$rsnnl ("-queue ^d is invalid.  Use a number from ^d to ^d.", err_msg, rs_len,
		     priority, min_queue, max_queue);
		call print_err_msg (0);
		return;
	     end;
	end;

	if (foreground_sw & (info.all_opt_sw | info.q_opt_sw)) |
	     (info.all_opt_sw & (info.q_opt_sw | foreground_sw)) |
	     (info.q_opt_sw & (info.all_opt_sw | foreground_sw)) then do;
	     call ioa_$rsnnl ("The following control arguments are incompatible: -foreground, -all, and -queue",
		err_msg, rs_len);
	     call print_err_msg (0);
	     return;
	end;

	if rqt_type = IMFT then do;
	     if imft_dest ^= "" then do;		/* -dest */
		info.queue_name = "To_" || rtrim(imft_dest);
		call iod_info_$generic_type (info.queue_name, gen_type, code);
		if code ^= 0 then do;
		     if code = error_table_$id_not_found then do;
id_not_found:		call ioa_$rsnnl ("Unknown request type.  ^a",
			     err_msg, rs_len, info.queue_name);
			call print_err_msg (code);
			return;
		     end;
		     else do;
rqt_warning:		call ioa_$rsnnl ("Warning -- Unable to check request type ^a.",
			     err_msg, rs_len, io_queue_name);
			call print_err_msg (code);
		     end;
		end;
		else call iod_info_$queue_data (info.queue_name, default_queue, max_queue, ignore_code);
	     end;
	     else if imft_source ^= "" then do;		/* -sc */
		info.queue_name = "From_" || rtrim(imft_source);
		call iod_info_$generic_type (info.queue_name, gen_type, code);
		if code ^= 0 then do;
		     if code = error_table_$id_not_found then
			goto id_not_found;
		     else goto rqt_warning;
		end;
		else call iod_info_$queue_data (info.queue_name, default_queue, max_queue, ignore_code);
	     end;
	end;


/* Now set first and last queue according to arguments or defaults (but -q argument processing sets them in-line) */

	if info.all_opt_sw then do;			/* all queues */
	     start = min_queue;
	     finish = max_queue;
	end;
	else if foreground_sw then			/* only foreground queue */
	     start, finish = -1;
	else if ^info.q_opt_sw then do;		/* no queue specified - set defaults */
	     start = min_queue;			/* that is, search all queues */
	     finish = max_queue;
	     info.search_all = "1"b;			/* but only print for queues that we select requests from */

	end;
	if info.request_type = ABS then do;		/* for absentee queues */
	     if start = 1 then			/* if user said -q 1 */
		start = 0;			/* we pretend queue 0 is the first part of queue 1 */
	     if start <= 0				/* if listing queue 0 */
	     & finish >= 1				/* and also queue 1 */
	     then info.abs_q_1 = "1"b;		/* turn on the "pretend they are one queue" switch */
	end;

/* Arguments are ok. Get ready to call lar_util_$request_info. First, get a temp segment for lar_util_ to build the listing in. */

	info.mseg_idx = 0;				/* no open mseg */

/* CONDITION HANDLER FOR cleanup */

	on condition (cleanup) begin;			/* but first be sure we will give it back no matter what */
	     if info.mseg_idx ^= 0 then		/* if we have an open mseg */
		call message_segment_$close (info.mseg_idx, ignore_code);
	     if tp ^= null then			/* if we have a temp seg */
		call release_temp_segment_ (id, tp, code); /* give it back */
	end;					/* end begin block */

/* END CONDITION HANDLER */

	call get_temp_segment_ (id, tp, code);
	if code ^= 0 then do;
	     err_msg = "temporary segment";
	     call print_err_msg (code);
	     return;
	end;

/* Initialize, before entering loop over queues */

	info.temptr = tp;

/* Beginning of loop over one or more queues */

	do info.queue = start to finish;
	     if info.queue = -1 then ent = "absentee_foreground.ms"; /* construct entry name of message segment */
	     else call ioa_$rsnnl ("^a_^d.ms", ent, rs_len, info.queue_name, info.queue);
	     call message_segment_$open (dir, ent, info.mseg_idx, code); /* initiate message segment containing requests */
	     if code = 0 then do;			/* if we opened it successfully, go list it */

/* call lar_util_$request_info, which will build up a listing of this queue's requests, in a printable segment */

		call lar_util_$request_info (info_ptr, afsw, code);
						/* get information on requests in this queue */
		call message_segment_$close (info.mseg_idx, ignore_code);
						/* close message segment */
	     end;
	     if code ^= 0 then do;
		call ioa_$rsnnl ("^[Attempting to open^x^;^]^a>^a", err_msg, rs_len, (info.mseg_idx = 0), dir, ent);
		call print_err_msg (code);
	     end;
	     info.mseg_idx = 0;			/* so cleanup handler doesn't try to close it again */
	     info.input_count = info.output_count;	/* copy new length of temorary */
	end;

/* End of loop over queues. Now print the info produced by lar_util_$request_info. */

	if info.output_count > 1 then do;
	     if afsw then do;
		info.output_count = info.output_count - 1;   /* remove the xtra char placed at end of string */
		ret_arg = ret_data;
	     end;
	     else do;
		if allsw then info.output_count = info.output_count - 1;
						/* if all, then remove trailing NL */
		call iox_$put_chars (iox_$user_output, info.temptr, info.output_count, code);
		if code ^= 0 then do;
		     err_msg = "user_output";
		     call print_err_msg (code);
		end;
	     end;
	end;

/* This is the main exit from this procedure */

ERROR_EXIT:
	if tp ^= null() then call release_temp_segment_ (id, tp, code);
	return;




test_rqi:	entry (rqt_test, sys_dir_test);		/* entry point for testing rqi command		*/

    dcl	sys_dir_test		char(*);
    dcl   rqt_test                      char(*);

	if rqt_test = "absentee" | rqt_test = "abs" then
	     abs_dir = sys_dir_test;
	else if rqt_test = "output" | rqt_test = "out" | rqt_test = "io" |
	     rqt_test = "imft" then
	     iod_dir = sys_dir_test;
	else if rqt_test = "retrieval" | rqt_test = "retv" then
	     retriever_dir = sys_dir_test;
	return;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*	INTERNAL	 PROCEDURES						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_arg:	proc (argno);

    dcl	argno			fixed bin;

	     call get_argument (argno, argptr, arglen, code);
	     return;

	end get_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init:	proc;

	tp = null();
	rqi_key, rqt_key, abs_key, com_key, io_key, imft_key, retv_key
	     = "0"b;
	dfi_arg, ds_arg, fg_arg, imft_dest, imft_source, pch_arg,
	     plt_arg, prt_arg, rsc_arg, rqt_arg, sdr_arg, sc_arg = "";

	info_ptr = addr (local_info);
	unspec (info) = ""b;			/* zero everyting in info structure */

	return;

	end init;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


print_err_msg: proc (ec);

dcl	ec			fixed bin(35);	/* error code */

/* The global variable, err_msg, is an implicit argument */

	     call complain (ec, id, err_msg);
	     return;

	end print_err_msg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

look_rqt_key:
	proc (key);
     dcl key char (*) parm;
	
	if key = "absentee" | key = "abs" then rqt_type = ABS;
	else if key = "retrieval" | key = "retv" then rqt_type = RETV;
	else if key = "io" then rqt_type = IO;
	else if key = "imft" then rqt_type = IMFT;
	else if key = "output" | key = "out" then rqt_type = OUTPUT;
	else rqt_type = CURRENTLY_UNDEFINED;		/* could be a user-defined rqt */

	return;

     end look_rqt_key;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

init_rqt:
          proc ();

	if rqt_type = OUTPUT | rqt_type = IO then do;	/* OUTPUT/IO */
	     min_queue = 1;
	     dir = iod_dir;
	     call enter_output_request$default_request_type ("printer",
		info.queue_name, default_queue, max_queue, code);
	     if code ^= 0 then goto undef_rqt;
	     info.request_type = OUTPUT;
	end;
	else if rqt_type = CURRENTLY_UNDEFINED then do;	/* Possibly user-defined */
	     call enter_output_request$request_type (key_arg, gen_type,
		info.queue_name, default_queue, max_queue, code);
	     if code ^= 0 then do;
undef_rqt:	call ioa_$rsnnl ("Getting request type defaults for ^a.", err_msg, rs_len, key_arg);
		call print_err_msg (code);
		goto ERROR_EXIT;
	     end;
	     min_queue = QUEUE_1;
	     dir = iod_dir;
	     if gen_type = "imft" then info.request_type = IMFT;
	     else info.request_type = OUTPUT;
	end;
	else if rqt_type = ABS then do;		/* ABS */
	     call system_info_$default_absentee_queue (default_queue);
	     if default_queue = 0 then default_queue = QUEUE_3;
	     max_queue = QUEUE_4;
	     min_queue = QUEUE_NEG;
	     dir = abs_dir;
	     info.queue_name = "absentee";
	     info.request_type = ABS;
	end;
	else if rqt_type = RETV then do;		/* RETV */
	     call hcs_$star_ (retriever_dir, "volume_retriever*.ms", BRANCHES,
		null, max_queue, (null), (null), code);
	     if code ^= 0 then
		max_queue = QUEUE_3;
	     default_queue = min (max_queue, QUEUE_3);
	     min_queue = QUEUE_1;
	     dir = retriever_dir;
	     info.queue_name = "volume_retriever";
	     info.request_type = RETV;
	end;
	else if rqt_type = IMFT then do;		/* IMFT */
	     call iod_info_$queue_data ("imft", default_queue, max_queue, code);
	     if code ^= 0 then do;
		max_queue = QUEUE_4;
		default_queue = QUEUE_2;
	     end;
	     min_queue = QUEUE_1;
	     dir = iod_dir;
	     gen_type = "imft";
	     info.queue_name = "imft";
	     info.request_type = IMFT;
	end;

     end init_rqt;

     end request_info;
