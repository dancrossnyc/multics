/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


match_request_id_:
     procedure (msg_time, id_arg) returns (bit aligned);

/* This procedure provides request ID displaying and matching for absentee and I/O daemon requests.

   dcl match_request_id_ entry (fixed bin (71), char (*)) returns (bit (1) aligned);
   if match_request_id_ (request.msg_time, ID_arg) then ... ;

   A long request ID is a 19-character string, displaying the time the request was entered, in
   the form YYMMDDhhmmss.ffffff - that is, the year, month, day, hour, minute, second,
   and 6-digit fractional second. In most cases, the 6 digits to the left of the decimal point
   (hhmmss) will be enough to uniquely identify a request from among all other requests in the system.
   Those 6 digits are displayed by default by the request entering and listing commands. Display of
   the full 19 digits can be requested by using the -long_id control argument.

   The user, when identifying a request with the -id ID argument pair, may give any number of
   digits. The match_request_id_ entry point of this procedure matches such a substring against
   (the display form of) a message time, and returns true ("1"b) if it matches, and false (""b) if it doesn't.
   The user-supplied substring is oriented within the 19 digit field by means of the decimal point
   (with one being assumed to the right of the last digit if none is given). If the corresponding
   substrings match, the IDs are said to match. It is the responsibility of the caller to search the
   entire set of requests that are selected (by other arguments or by default) and take appropriate action
   if the user-supplied ID matches more than one request (e.g., select all of them for listing,
   but select none for cancelling, and ask for a longer ID).

   Although some of the digits in a request ID have a limited range (e.g., MM must be 01-12), and of
   course the ID can contain only decimal digits and at most one decimal point, and so some validity checking could
   be performed on an ID, it is considered not worthwhile, and is not done by this procedure. Callers could,
   if they wish, verify that the string contains only decimal digits and a decimal point, but that
   is probably not worthwhile either. Most user typing errors will consist of incorrect or transposed
   digits, not detectable by any error checking.

   Initial coding by T. Casey, May 1978
   Modified April 1979 by T. Casey for MR7.0a to fix minor bugs.
   Modified February 1980 by C. Hornig to remove request_id_
   /*

   /* DECLARATIONS */
/* Input arguments */

dcl msg_time fixed bin (71);				/* first argument to both entry points */
dcl id_arg char (*);				/* second argument to match_... entry point */

/* Misc. automatic variables */

dcl (dp, l) fixed bin;				/* char counters, for matching */
dcl id char (19);					/* display form of msg_time, for returning or matching */
dcl vid char (20) varying;				/* copy of id_arg, with leading and trailing blanks removed */

/* Other stuff */

dcl request_id_ entry (fixed bin (71)) returns (char (19));

dcl (index, length, ltrim, rtrim, substr) builtin;	/* for matching */

/* PROCEDURE */

	id = request_id_ (msg_time);
	vid = rtrim (ltrim (id_arg));			/* strip off leading and trailing blanks and get length of result */
	l = length (vid);				/* l is easier to type */
	if l > 19
	then					/* this is why vid is char (20) varying */
	     return ("0"b);				/* string too long - could not possibly match */
	dp = index (vid, ".");			/* look for decimal point */
	if dp = 0
	then					/* if none */
	     dp = l + 1;				/* pretend there's one after the last digit */
	if dp > 13 then return ("0"b);		/* too many digits to left of decimal point */
	if l - dp > 6 then return ("0"b);		/* too many to right of it */
	if substr (id, 14 - dp, l) = vid
	then return ("1"b);
	else return ("0"b);

     end match_request_id_;
