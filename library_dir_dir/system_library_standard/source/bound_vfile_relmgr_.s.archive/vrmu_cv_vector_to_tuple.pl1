/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_cv_vector_to_tuple:
     proc (I_rel_desc_ptr, I_tuple_ptr, I_typed_vector_ptr, I_mod_flag, O_tuple_length, O_code);

/* NOTES:

   This  procedure  inserts user values into the supplied tuple.  


   HISTORY:

   82-09-91  R. Harvey:  Lifted from mu_build_tuple.pl1

   84-08-29  R. Lackey & T. Nguyen: Fixed the out of bound when calculating
   real_bit_len for the unaligned data type.

*/
%page;
/* Parameters     */

	dcl     I_rel_desc_ptr	 ptr;
	dcl     I_tuple_ptr		 ptr;
	dcl     I_typed_vector_ptr	 ptr;
	dcl     I_mod_flag		 bit (1) aligned;
	dcl     O_tuple_length	 fixed bin (21);
	dcl     O_code		 fixed bin (35);



	vrm_rel_desc_ptr = I_rel_desc_ptr;
	tuple_ptr = I_tuple_ptr;

/* Determine the type of vector that was passed in */

	simple_vector, general_vector = ""b;
	simple_typed_vector_ptr, general_typed_vector_ptr = I_typed_vector_ptr;
	if simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE
	then simple_vector = "1"b;
	else do;
		if general_typed_vector.type = GENERAL_TYPED_VECTOR_TYPE
		then general_vector = "1"b;
		else call error (dm_error_$bad_vector_type);
	     end;

	mod_flag = I_mod_flag;


	on conversion go to conversion_error;


	data_ptr = addr (tuple.data);

	if ^mod_flag then do;			/* if creating, init tuple */
		string (tuple.attr_exists) = "0"b;
		data_str = "0"b;
		do i = 1 to vrm_rel_desc.number_var_attrs;
		     tuple.var_offsets (i) = 0;
		end;
		tuple.rel_id = vrm_rel_desc.rel_id;
	     end;					/* tuple initialization */
%page;
	if general_vector
	then num_of_dims = general_typed_vector.number_of_dimensions;
	else num_of_dims = simple_typed_vector.number_of_dimensions;

	do i = 1 to num_of_dims;			/* beginning of attribute value insertion loop */

	     if general_vector			/* determine attribute number */
	     then attr_no = general_typed_vector.dimension (i).identifier;
	     else attr_no = i;			/* simple vector */

	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (attr_no));
						/* pick up info ptrs */

	     tuple.attr_exists (attr_no) = "1"b;
						/* turn on exist flag */
	     if general_vector			/* point to user value as given */
	     then db_val_ptr = general_typed_vector.dimension (i).value_ptr;
	     else db_val_ptr = simple_typed_vector.dimension (i).value_ptr;

	     if vrm_attr_info.varying then do;		/* insertion of varying length attr. value */

		     char_count =
			(addr (vrm_attr_info.descriptor) -> descriptor.type = VAR_CHAR);
						/* char or bit count */
		     if char_count then
			real_bit_len = 9 * db_val_ptr -> fb35u;
		     else real_bit_len = db_val_ptr -> fb35u;

		     if mod_flag then do;		/* if updating rather than creating */
			     offset = tuple.var_offsets (vrm_attr_info.bit_offset);
						/* offset will be the same */
			     call word_align (offset);
			     temp_count_word_ptr = add_bit_offset_ (data_ptr, offset - 1);


			     temp_count_word = temp_count_word_ptr -> fb35u;
			     if char_count then
				temp_count_word = temp_count_word * 9;
			     call compute_shift /* need to compute how much to shift subsequent attributes */
				(real_bit_len, temp_count_word, shift_delta);


			     if shift_delta = 0 then /* no shifting, just move new val in */
				call insert_var_string;
			     else call shift_insert;	/* if shifting required */
			end;			/* if updating */

		     else do;			/* if creating new tuple */
			     do j = vrm_attr_info.bit_offset + 1 to vrm_rel_desc.number_var_attrs
				/* check if a following attr is stored */
				while (tuple.var_offsets (j) = 0);
			     end;

			     if j > vrm_rel_desc.number_var_attrs then do; /* if no followers stored */

				     do j = vrm_attr_info.bit_offset - 1 by -1 to 1
					while (tuple.var_offsets (j) = 0); /* check for stored leaders */
				     end;

				     if j < 1 then do; /* if first var. attr. stored */
					     offset = vrm_rel_desc.var_offset; /* use initial value */
					end;	/* if first var. attr. */
				     else do;	/* no followers, but leaders */

/* Find the previous varying attr_no */

					     do k = attr_no - 1 to 1 by -1;
						if vrm_rel_desc.attr (k).varying &
						     j = vrm_rel_desc.attr (k).bit_offset
						then prev_attr_no = k;
					     end;

/* check whether previous varying attr is char or bit */

					     if addr (vrm_rel_desc.attr (prev_attr_no).descriptor) -> descriptor.type = VAR_CHAR then do;


						     temp_count_word_ptr =
							add_bit_offset_ (data_ptr, tuple.var_offsets (j) - 1);
						     real_bit_len2 = temp_count_word_ptr -> fb35u * 9;
						end;
					     else do;
						     temp_count_word_ptr =
							add_bit_offset_ (data_ptr, tuple.var_offsets (j) - 1);
						     real_bit_len2 = temp_count_word_ptr -> fb35u;
						end;
					     offset = real_bit_len2 + 36 + tuple.var_offsets (j);
					end;	/* no followers but leaders */

				     call word_align (offset);

				     call insert_var_string;
				end;		/* no following attr. */

			     else do;		/* if there are following attr. */
				     offset = tuple.var_offsets (j); /* use offset of first follower */
				     call word_align (offset);


				     call compute_shift (real_bit_len, -36, shift_delta);
						/* shift followers right to make room */


				     call shift_insert;
				end;		/* if there were followers */

			end;			/* if creating */

		end;				/* insertion of varying attr. val. */

	     else do;				/* insertion of fixed length attr */
		     if addr (vrm_attr_info.descriptor) -> descriptor.type <= 8 then
			pad_bit_length = 0;		/* non-byte types won't have garbage,
						   and some may be right justified like fixed fin,
						   or split padding like complex */
		     else pad_bit_length =
			     vrmu_data_length$get_data_pad_length
			     ((vrm_attr_info.descriptor));
		     substr (data_str, vrm_attr_info.bit_offset, vrm_attr_info.bit_length)
			=
			substr (value_for_db, 1,
			vrm_attr_info.bit_length - pad_bit_length); /* aligned data may have garbage in padding space */
		end;


	end;					/* attribute value insertion loop */

/* Now calculate length of the tuple */

	tuple_header_length = 4 * (binary (rel (addr (tuple_ptr -> tuple.data))) -
	     binary (rel (tuple_ptr)));

	if vrm_rel_desc.number_var_attrs <= 0 then /* if fixed len tuple */
	     tuple_length = tuple_header_length + vrm_rel_desc.maximum_data_length;
	else do;					/* if varying len */
		data_ptr = addr (tuple.data);
		last_len_offset = tuple.var_offsets (vrm_rel_desc.number_var_attrs);
		last_attr_offset = last_len_offset + 36;
		last_attr_size_ptr = add_bit_offset_ (data_ptr, last_len_offset - 1);
		last_attr_len = last_attr_size_ptr -> fb35u;
		attr_type = addr (vrm_rel_desc.attr (last_var_attr_no).descriptor) -> descriptor.type;
		if attr_type = 22			/* type = character varying */
		then last_attr_len = last_attr_len * 9;
		last_bit_offset = last_attr_offset + last_attr_len - 1;
		tuple_length = 4 * (binary (rel (add_bit_offset_ (data_ptr, last_bit_offset - 1))) - binary (rel (tuple_ptr)) + 1);
						/* length in bytes */
	     end;					/* if varying len */

	O_tuple_length = tuple_length;

	O_code = 0;

exit:
	return;





conversion_error:

	O_code = mdbm_error_$conversion_condition;
	go to exit;
%page;
compute_shift:
     proc (real_bit_len, old_bit_len, shift_delta);

/* This routine determines how far right (left for neg values) to shift
   other attributes to make room for the current attribute. */

	dcl     real_bit_len	 fixed bin (35) parm; /* INPUT: length of attribute being inserted */
	dcl     old_bit_len		 fixed bin (35) parm; /* INPUT: length of attribute being replaced or zero. */
	dcl     shift_delta		 fixed bin (35) parm; /* OUTPUT: amount to shift to make room for new attribute */
	dcl     (r, o)		 fixed bin (35);
	r = real_bit_len + 1;
	o = old_bit_len + 1;
	call word_align (r);
	call word_align (o);
	shift_delta = r - o;
	return;
     end compute_shift;





word_align:
     proc (offset);

	dcl     offset		 fixed bin (35) parm; /* INPUT-OUTPUT: bit offset within data portion
						   of tuple where attribute will be stored */
	dcl     slop		 fixed bin (35);
	slop = 36 - mod (offset - 1, 36);
	if slop ^= 36 then
	     offset = offset + slop;
	return;
     end word_align;
%page;
shift_insert: proc;

/* Procedure to shift following varying attr. to make room for storing another
   varying field. */

	dcl     i			 fixed bin;

	if shift_delta < 0 then /* if shifting left */
	     do i = vrm_attr_info.bit_offset + 1 to vrm_rel_desc.number_var_attrs;
						/* shift guys to my right */
		if tuple.var_offsets (i) > 0 then
		     call shift_attr;
	     end;
	else /* if shifting right */
	     do i = vrm_rel_desc.number_var_attrs by -1 to vrm_attr_info.bit_offset + 1;
		if tuple.var_offsets (i) > 0 then
		     call shift_attr;
	     end;

	call insert_var_string;

shift_attr:
     proc;

/* Procedure to shift an attribute */

	dcl     (new_offset, shift_len) fixed bin (35);

	temp_count_word_ptr = add_bit_offset_ (data_ptr, tuple.var_offsets (i) - 1);
	shift_len = temp_count_word_ptr -> fb35u;	/* no. bits being shifted */
	if char_count then
	     shift_len = shift_len * 9;		/* convert to bit length */
	shift_len = shift_len + 36;			/* for count field */
	new_offset = tuple.var_offsets (i) + shift_delta; /* place to shift to */

/* do an in place move, if not overlapping data involved
   if the target starts to the right of the source start,
   and the target start is to the left of the source end we have overlap */

	if tuple.var_offsets (i) <= new_offset
	     & tuple.var_offsets (i) + shift_len >= new_offset then
	     call use_temp_for_shift ();
	else substr (data_str, new_offset, shift_len) =
		substr (data_str, tuple.var_offsets (i), shift_len);

use_temp_for_shift:
     procedure ();

/* routine to use a temporary to avoid problems with in place move
   that would overwrite data in the process, and result in incorrect move */

	dcl     temp_string		 bit (shift_len);


	temp_string = substr (data_str, tuple.var_offsets (i), shift_len);
	substr (data_str, new_offset, shift_len) = temp_string;

     end;

	tuple.var_offsets (i) = new_offset;

     end shift_attr;

     end shift_insert;
%page;
insert_var_string:
     proc;

/* Procedure to insert new varying string */

	tuple.var_offsets (vrm_attr_info.bit_offset) = offset;
	temp_count_word_ptr = add_bit_offset_ (data_ptr, offset - 1);
	temp_count_word_ptr -> fb35u = db_val_ptr -> fb35u;
	substr (data_str, offset + 36, real_bit_len) =
	     substr (value_for_db, 37, real_bit_len);

     end insert_var_string;




error:
     proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	O_code = cd;
	go to exit;

     end error;
%page;
%include vrm_rel_desc;
%page;
%include vu_typed_vector;
%page;
%include vrm_tuple;
%page;
	dcl     (
	        data_ptr,				/* pointer to tuple.data */
	        db_val_ptr,				/* pointer to converted value, ready for tuple */
	        last_attr_size_ptr			/* points to count word of last varying attr */
	        )			 ptr;

	dcl     (
	        mod_flag,				/* Input: on indicats modify rather than store */
	        simple_vector,
	        general_vector
	        )			 bit (1) aligned;

	dcl     (i, j)		 fixed bin;	/* internal indexes */

	dcl     (
	        last_attr_len,			/* bit length of last varying attribute */
	        last_attr_offset,			/* offset in tuple of value of last varying attribute */
	        last_bit_offset,			/* offset in tuple of last bit of data */
	        last_len_offset,			/* offset in tuple of length of last varying attribute */
	        offset,				/* position to insert new attr. */
	        real_bit_len,			/* bit length of used part of var. string */
	        real_bit_len2,			/* bit length of used part of var. string (again) */
	        shift_delta,
	        tuple_header_length			/* length of header portion of tuple */
	        )			 fixed bin (35);	/* bits to shift to make room for new var. attr. */


	dcl     data_str		 bit (9 * vrm_rel_desc.maximum_data_length) unal based (data_ptr);
						/* string view of tuple.data */
	dcl     temp_count_word_ptr	 ptr;		/* points to count field portion of varying string */
	dcl     value_for_db	 bit (vrm_attr_info.bit_length) based (db_val_ptr);
						/* converted value, ready for tuple */
/*	dcl     fb35		 fixed bin (35) based;  templates */
	dcl     fb35u		 fixed bin (35) unal based;

	dcl     1 descriptor	 aligned based,
	        (
		2 flag		 bit (1),
		2 type		 fixed bin (6) unsigned, /* data type */
		2 packed		 bit (1),		/* ON = unaligned */
		2 number_dims	 fixed bin (4) unsigned, /* non-zero for arrays */
		2 size		 fixed bin (24) unsigned
		)		 unaligned,	/* size of data */
		2 array_info	 (0 refer (descriptor.number_dims)),
		  3 lower_bound	 fixed bin (35),
		  3 upper_bound	 fixed bin (35),
		  3 multiplier	 fixed bin (35);


	dcl /* interesting data types */
	        VAR_CHAR		 init (22)
				 unsigned binary (6) static options (constant);

	dcl     dm_error_$bad_vector_type ext fixed bin (35);
	dcl     mdbm_error_$conversion_condition ext fixed bin (35);

	dcl     conversion		 condition;

	dcl     (addr, mod, string, substr) builtin;

	dcl     add_bit_offset_	 entry (ptr, fixed bin (24)) returns (ptr) reducible;

	dcl     char_count		 bit (1);		/* on => count field of varying string is in chars, else bits */
	dcl     pad_bit_length	 fixed bin (35);	/* number of bits used in padding aligned data */
	dcl     vrmu_data_length$get_data_pad_length entry (bit (36))
				 returns (fixed bin (35)); /* gets padding size for  aligned data */
	dcl     temp_count_word	 fixed bin (35);	/* temporary for varying attr bit length */
	dcl     attr_no		 fixed bin;
	dcl     attr_type		 fixed bin;
	dcl     num_of_dims		 fixed bin;
	dcl     binary		 builtin;
	dcl     rel		 builtin;
	dcl     prev_attr_no	 fixed bin;
	dcl     k			 fixed bin;

     end vrmu_cv_vector_to_tuple;
