/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - December 1979
   Renamed from mu_data_class for use in vfile_relmgr_ by Ron Harvey - 1983

*/

vrmu_data_class: procedure (); return;			/* not a valid entry */

/* DESCRIPTION:

   this routine, given a standard multics pl1 argument descriptor,
   will determine whether the descriptor refers to the class
   of data, that the particular entry refers to, and return
   either a true or false value. there are 12 entries:
   real - determines if the data type is real
   complex - determines if the data type is complex
   char - determines determines if the data type is character
   bit - determines if the data type is bit
   varying - determines if the data type is bit or character varying
   aligned - determines if the data type is unpacked
   fixed - determines if the data type is numeric and fixed point
   scalar - determines if the data is not an array
   string - determines if the data is a string type(bit or char)
   number - determines if the data is a number(real or complex)
   convertible - determines if the data can be converted to float decimal(59)
   binary - determines if the data is a binary number

*/

/* PARAMETERS:

   desc_ptr - - (input) pointer, points to the bit(36) standard
   multics pl1 descriptor for data, which is to be queried for it's data class

   valid - - (output) bit(1) aligned, either true or false, true if the
   descriptor refered to a data type in the class determined by the entry called,
   which is one of real, complex, char, bit, varying, aligned, fixed, scalar
   string, number, convertible, or binary

*/
%page;
/* check for data being numeric, and real */

real: real_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) = REAL then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data being numeric, and complex */

complex: complex_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) = COMPLEX then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data being character */

character: character_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) = CHAR then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data being bit */

bit: bit_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) = BIT then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data being varying character or bit */

varying: varying_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if class < VARYING then
	     valid = ON;
	else valid = OFF;

	return (valid);
%page;
/* check for data being aligned or unaligned */

aligned: aligned_data_class: entry (desc_ptr) returns (bit (1) aligned);

	valid = ^(descriptor.packed);

	return (valid);

/* check for data being scalar */

scalar: scalar_data_class: entry (desc_ptr) returns (bit (1) aligned);

	if fixed (descriptor.number_dims) = 0 then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for number data being fixed point */

fixed: fixed_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if class > 0 & class <= FIXED then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data being a string type */

string: string_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) > STRING then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for  the data being any type of number */

number: number_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if class ^= 0 & abs (class) <= NUMBER then
	     valid = ON;
	else valid = OFF;

	return (valid);
%page;
/* check for data type being convertable to float decimal (59) */

convertible: convertible_data_class: entry (desc_ptr) returns (bit (1) aligned);

	class = type_to_class (descriptor.type);
	if abs (class) = REAL | abs (class) = CHAR then
	     valid = ON;
	else valid = OFF;

	return (valid);

/* check for data type being a binary number */

binary: binary_data_class: entry (desc_ptr) returns (bit (1) aligned);

	if (descriptor.type >= 1 & descriptor.type <= 8) |
	     descriptor.type = 33 | descriptor.type = 34 then
	     valid = ON;
	else valid = OFF;

	return (valid);
%page;
	dcl     class		 fixed bin;	/* class encoding taken from data type */
	dcl     STRING		 fixed bin int static options (constant) init (2); /* encoding for string check */
	dcl     NUMBER		 fixed bin int static options (constant) init (2); /* encoding for number check */
	dcl     REAL		 fixed bin internal static options (constant) init (1); /* encoding for real numerics */
	dcl     COMPLEX		 fixed bin internal static options (constant) init (2); /* encoding for complex numerics */
	dcl     BIT		 fixed bin internal static options (constant) init (3); /* encoding for bit strings */
	dcl     CHAR		 fixed bin internal static options (constant) init (4); /* encoding for character strings */
	dcl     VARYING		 fixed bin internal static options (constant) init (-2); /* encoding for varying string comparison */
	dcl     FIXED		 fixed bin internal static options (constant) init (2); /* encoding for varying string comparison */
	dcl     valid		 bit (1) aligned;	/* on => class matches entry called */
	dcl     ON		 bit (1) init ("1"b) internal static options (constant); /* true value */
	dcl     OFF		 bit (1) init ("0"b) internal static options (constant); /* false value */
	dcl     (abs, fixed)	 builtin;

/* the following encoding array, takes a data type as it's index,
   and returns as an element value, the following classifying values:
   real fixed = 1, real float = -1,
   complex fixed = 2, complex float = -2,
   bit = 3, bit varying = -3,
   character = 4, character varying = -4, no class = 0  */

	dcl     type_to_class	 (0:63) aligned internal static options (constant) fixed bin
				 init (0, (2) (1), (2) (-1), /* 0 - 4 */
				 (2) (2), (2) (-2), /* 5 - 8 */
				 1, -1, 2, -2, (6) (0), /* 9 - 12, 13 - 18 */
				 3, -3, 4, -4,	/* 19 - 22 */
				 (6) (0),		/* 23 - 28 */
				 (2) (1), (2) (0),	/* 29 - 32 */
				 (4) (1), 0,	/* 33 - 37 */
				 (4) (1),		/* 38 - 41 */
				 -1, 1, -1, 2, -2,	/* 42 - 46 */
				 (17) (0));	/* 47 - 63 */


%include mdbm_descriptor;

     end vrmu_data_class;
