/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_validate_spec: proc (I_vrm_cursor_ptr, I_spec_ptr, O_num_key_constraints, O_code);

/*
.		 BEGIN_DESCRIPTION

The purpose of this module is to validate if  the fields supplied in the 
search_specification are with the range of attributes for this relation.

And to count the number of key_constraint fields used 

.                    END_DESCRIPTION
*/


/* HISTORY
82-08-30 Roger Lackey : Initially written.

*/

/*	  PARAMETERS         */

	dcl     I_vrm_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor */
	dcl     I_spec_ptr		 ptr parameter;	/* Pointer to dm_specification supplied */
	dcl     O_num_key_constraints	 fixed bin parameter; /* Number of constraints against the index for cursor supplied */
	dcl     O_code		 fixed bin (35) parameter; /* Error_code */
%page;
/* vrmu_validate_spec: proc (I_vrm_cursor_ptr, I_spec_ptr, O_num_key_constraints, O_code); */

	vrm_cursor_ptr = I_vrm_cursor_ptr;
	relation_search_specification_ptr = I_spec_ptr;
	O_num_key_constraints = 0;
	O_code = 0;
	rss_maximum_number_of_constraints = 0;		/* Just to keep compile happy */
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
	vrm_open_info_ptr = vrm_cursor.open_info_ptr;
	num_key_constraints = 0;

	if relation_search_specification_ptr ^= null () then do;

		if relation_search_specification.head.version ^= SPECIFICATION_VERSION_4 then do;
			O_code = dm_error_$unimplemented_spec_version;
			return;
		     end;

		if relation_search_specification.head.type ^= ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE &
		     relation_search_specification.head.type ^= RELATIVE_RELATION_SEARCH_SPECIFICATION_TYPE then do;
			O_code = dm_error_$unsup_search_spec_head_type;
			return;
		     end;



		if relation_search_specification.range.type ^= ALL_RANGE_TYPE &
		     relation_search_specification.range.type ^= LOW_RANGE_TYPE then do;
			O_code = dm_error_$unsup_search_spec_range_type;
			return;
		     end;

		do ag = 1 to relation_search_specification.number_of_and_groups while (O_code = 0);

		     if ^relation_search_specification.and_group (ag).collection_id_supplied then do;
			     call sub_err_ (mrds_error_$internal_error,
				"vrmu_validate_spec", ACTION_CANT_RESTART, null, 0,
				"A relation_search_specification has been found without a collection_id supplied.");
			end;

		     do c = 1 to relation_search_specification.and_group (ag).number_of_constraints while (O_code = 0);

			if relation_search_specification.and_group (ag).constraint (c).field_id < 1 |
			     relation_search_specification.and_group (ag).constraint (c).field_id > vrm_rel_desc.number_attrs
			then O_code = dm_error_$invalid_specification_field;

			else if relation_search_specification.and_group (ag).constraint (c).value_ptr ^= null then do;
				opr = relation_search_specification.and_group (ag).constraint (c).operator_code;
				if opr < 1 | opr > 7 | opr = 4
				then O_code = dm_error_$unsupported_spec_operator;
				x = relation_search_specification.and_group (ag).constraint (c).field_id;

				if vrm_rel_desc.attr (x).key_head | vrm_rel_desc.attr (x).primary_key_attr
				then num_key_constraints = num_key_constraints + 1;
			     end;
		     end;				/* END do c = 1 to relation_search_specification.and_group (ag).number_of_constraints while (O_code = 0); */


		end;

	     end;

	O_num_key_constraints = num_key_constraints;


%page;
%include vrm_cursor;
%page;
%include vrm_collection_info;
%page;
%include vrm_rel_desc;
%page;
%include dm_specification_head;
%page;
%include dm_relation_spec;
%page;
%include dm_range_constants;
%page;
%include vrm_open_info;
%page;
%include sub_err_flags;
%page;
	dcl     dm_error_$invalid_specification_field fixed bin (35) ext static;
	dcl     dm_error_$unimplemented_spec_version fixed bin (35) ext static;
	dcl     dm_error_$unsupported_spec_operator fixed bin (35) ext static;
	dcl     dm_error_$unsup_search_spec_range_type fixed bin (35) ext static;
	dcl     dm_error_$unsup_search_spec_head_type fixed bin (35) ext static;
	dcl     c			 fixed bin;
	dcl     ag		 fixed bin;
	dcl     mrds_error_$internal_error fixed bin (35) ext static;
	dcl     null		 builtin;
	dcl     num_key_constraints	 fixed bin;
	dcl     opr		 fixed bin;
	dcl     sub_err_		 entry () options (variable);
	dcl     x			 fixed bin;

     end vrmu_validate_spec;

