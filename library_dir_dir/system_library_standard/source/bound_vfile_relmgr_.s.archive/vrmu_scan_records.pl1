/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

vrmu_scan_records: proc; return;

/*

		      BEGIN_DESCRIPTION

   This routine starts with an indexed vfile_ and returns successive records
   by reading the record components sequentially.  This means the order of
   returned records has no correspondence to the key order in general.
   For MRDS needed to have it work with the current vfile_ opening, so
   needed a variable from the indx_cb.  Used transaction_code
   because it is the correct dcl and is now unused.  Should use a variable
   of its own and this code should be incoorperated into vfile_.

		       END_DESCRIPTION

*/

/* HISTORY:
   Created by Jim Paradise on February 6, 1980.

   81-07-01 Jim Gray : added an init entry, so that after
   a file is read all the way to EOF, the indx_cb.transaction_code
   can be reset for the next get_nest call after a positon to BOF
   in mrds_dsl_search.

   81-08-29 Davids: Change actually made by L. Spratt.  Changed  the
   logic to determine if the current record is an indirect record or
   the actual record. It used to overlay the  ind_structure  now  it
   checks specific bits in the record_block_structure.

   82-07-06  R.   Harvey:  Changed  $init  and $next entry points to
   $scan_records_init and $scan_records_next.

   82-08-11 Mike Kubicar: Added fix for phx12335.  Mu_scan_records will
   honor the vfile_ wait time.  Also changed the error code returned when
   the vfile_ is locked to error_table_$file_busy so that retrieve won't
   return different error codes for similar condition.

   82-09-29 R. Harvey:  Renamed and reformatted for vfile_relgmr_

   83-03-24 Roger Lackey : Added code to return a 0 vfile_desc for stationary
   records that have moved.  Also added the locking for the case where vrm is
   not locking. This involved creating the vrmu_scan_rec_next structure.

   83-04-07 R. Harvey : Added check to insure that record being returned is
   actually data and not a vfile_relmgr_ overhead record.

   83-05-12 R. Harvey : Added  the  extend_seg_ptr_array routine from  vfile_
   with a slight modification so that it is extended to the proper size in
   one fell swoop.

   83-08-09 R. Harvey : Write-around for TR phx15467 was installed. Kudos to
   Bert Moberg for identifying a solution.
*/
%page;
/* BEGIN CHANGE 81-07-01 *********************************************** */

init: scan_records_init:
     entry (iocb_ptr, P_code);			/* reset the end of file indicator */

	indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
	P_code = 0;
	indx_cb.transaction_code = 262144;		/* -1 => EOF, 262144 => middle of file */

	return;

/* END CHANGE 81-07-01 ********************************************** */

next: scan_records_next:
     entry (vrmu_scan_rec_next_ptr, P_code);
	indx_cb_ptr = vrmu_scan_rec_next.iocb_ptr -> iocb.open_data_ptr;
	vrmu_scan_rec_next.block_ptr, vrmu_scan_rec_next.record_ptr = null;
	vrmu_scan_rec_next.descriptor, P_code = 0;
	f_b_ptr = indx_cb.file_base_ptr;		/* establish the file_base */
	if indx_cb.transaction_code = -1
	then do;
		P_code = error_table_$end_of_info;
		return;
	     end;

	read_count = 0;				/* Init */

start_read:
	if vrmu_scan_rec_next.scan_records_should_lock then do;
		read_count = read_count + 1;
		if read_count > divide (indx_cb.wait_time, 1000000, 17, 0)
		then do;
			P_code = error_table_$file_busy;
			return;
		     end;

		if file_base.lock_word ^= "0"b
		then do;
			call timer_manager_$sleep (1, "11"b); /* wait a time */
			goto start_read;
		     end;				/* get data from file */
	     end;					/* END of scan_records must lock */
	save_change_count = file_base.change_count;
	if indx_cb.at_bof
	then do;
		indx_cb.at_bof = "0"b;
		indx_cb.transaction_code = 262144;
	     end;
	try_descriptor = indx_cb.transaction_code;
	scan_status = CONTINUE;
	do while (scan_status = CONTINUE);
	     if try.comp_num > hbound (seg_ptr_array, 1)
	     then call extend_seg_ptr_array;
	     if seg_ptr_array (try.comp_num) = null
	     then do;
		     call msf_manager_$get_ptr (indx_cb.fcb_ptr, (try.comp_num), DONT_CREATE,
			seg_ptr_array (try.comp_num), bit_count, code);
		     if code ^= 0
		     then scan_status = EOF;
		     else scan_status = CONTINUE;
		end;
	     else if try.offset >= abs (seg_limit (try.comp_num))
	     then do;
		     try.comp_num = try.comp_num + 1;
		     try.offset = 0;
		     if try.comp_num > file_base.last_comp_num
		     then scan_status = EOF;
		end;
	     else do;
		     try_block_ptr = addrel (seg_ptr_array (try.comp_num), try.offset);
		     try_block_size = try_block_ptr -> record_block_structure.block_size;
		     if try_block_size = 0
		     then do;
			     try.comp_num = try.comp_num + 1;
			     try.offset = 0;
			     if try.comp_num > file_base.last_comp_num
			     then scan_status = EOF;
			end;
		     else if substr (try_block_ptr -> record_block_structure.pad, 2, 1) = "0"b
						/* BEGIN CHANGE 81-08-29 ********** */
		     then if (try_block_ptr -> record_block_structure.stationary
			     & ^try_block_ptr -> record_block_structure.indirect)
			     | ^try_block_ptr -> record_block_structure.stationary
						/* END CHANGE 81-08-29 ************ */
			then scan_status = RECORD_FOUND;
			else try.offset = try.offset + try_block_size;
		     else try.offset = try.offset + try_block_size;
		end;
	     if scan_status = RECORD_FOUND
	     then do;
		     if try_block_ptr -> record_block_structure.stationary = "0"b
		     then do;
			     try_record_len = length (try_block_ptr -> record_block_structure.record);
			     try_record_ptr = addrel (addr (try_block_ptr -> record_block_structure.record), 1);
			end;
		     else do;
			     try_record_len = length (try_block_ptr -> stat_structure.record);
			     try_record_ptr = addrel (addr (try_block_ptr -> stat_structure.record), 1);
			end;
		     if try_record_len = 0 | try_record_ptr -> tuple.rel_id ^= vrmu_scan_rec_next.rel_id
		     then do;			/* check next record */
			     try.offset = try.offset + try_block_size;
			     scan_status = CONTINUE;
			end;
		end;
	end;
	if save_change_count ^= file_base.change_count
	then goto start_read;			/* set return variables */
	if scan_status = RECORD_FOUND
	then do;
		if vrmu_scan_rec_next.stationary_rec_expected &
		     try_block_ptr -> record_block_structure.stationary = "0"b then
		     vrmu_scan_rec_next.descriptor = 0;
		else vrmu_scan_rec_next.descriptor = try_descriptor;
		try.offset = try.offset + try_block_size;
		indx_cb.transaction_code = try_descriptor;
		vrmu_scan_rec_next.block_ptr = try_block_ptr;
		vrmu_scan_rec_next.record_ptr = try_record_ptr;
		vrmu_scan_rec_next.record_len = try_record_len;
	     end;
	else if scan_status = EOF
	then do;
		indx_cb.transaction_code = -1;
		P_code = error_table_$end_of_info;
	     end;
	else if code ^= 0
	then P_code = code;
	return;					/* next entry */



extend_seg_ptr_array: proc;

	old_array_limit = seg_ptr_array_limit;
	old_array_ptr = seg_ptr_array_ptr;
	seg_ptr_array_limit = file_base.last_comp_num;
	allocate seg_ptr_array in (get_system_free_area_ () -> cb_area) set (seg_ptr_array_ptr);

	do i = 0 to old_array_limit;
	     seg_ptr_array (i) = old_array (i);
	end;
	do i = old_array_limit + 1 to seg_ptr_array_limit;
	     seg_ptr_array (i) = null ();
	end;

	free old_array;				/* in systemfree */


	dcl     cb_area		 area based;
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     i			 fixed bin;
	dcl     old_array_limit	 fixed bin;
	dcl     old_array_ptr	 ptr;
	dcl     old_array		 (0:old_array_limit) ptr based (old_array_ptr);

     end extend_seg_ptr_array;
%page;
%include vfile_indx;
%page;
%include iocb;
%page;
%include vrm_tuple;
%page;
%include vrm_rel_desc;
%page;
%include vrmu_scan_rec_next;
%page;
	dcl     CONTINUE		 fixed bin internal static options (constant) init (0);
	dcl     DONT_CREATE		 bit (1) init ("0"b) internal static options (constant);
	dcl     EOF		 fixed bin internal static options (constant) init (2);
	dcl     RECORD_FOUND	 fixed bin internal static options (constant) init (1);
	dcl     iocb_ptr		 ptr;
	dcl     P_code		 fixed bin (35);
	dcl     addrel		 builtin;
	dcl     hbound		 builtin;
	dcl     bit_count		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     error_table_$end_of_info
				 fixed bin (35) external;
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));

	dcl     pos_ptr		 ptr;		/* This var is not referenced, but a
						   a compilor warning is issued if
						   it isn't here */
	dcl     read_count		 fixed bin;
	dcl     error_table_$file_busy fixed bin (35) ext static;
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     save_change_count	 fixed bin (35);
	dcl     scan_status		 fixed bin;
	dcl     try_block_ptr	 ptr;
	dcl     try_block_size	 fixed bin (21);
	dcl     try_descriptor	 fixed bin (35);
	dcl     1 try		 based (addr (try_descriptor)),
		2 comp_num	 fixed bin (17) unaligned,
		2 offset		 fixed bin (18) unsigned unaligned;
	dcl     try_record_len	 fixed bin (21);
	dcl     try_record_ptr	 ptr;



     end vrmu_scan_records;
