/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_cv_tuple_to_vector: proc; return;

/*
.	 BEGIN_DESCRIPTION

This routine will convert a data record from vfile_ to a vector format.

.	 END_DESCRIPTION
*/

/* History:

   82-08-26  R. Harvey:  Initially written from the mess that was mu_get_data
   82-11-01  R. Harvey:  Modified to use non-null simple_typed_vector_ptr
   83-03-01  R. Harvey:  Modified find_and_create_item to use a character
	   string copy where possible. This, along with changing the
	   add_bit_offset_ type calls to use the addbitno builtin caused
	   a significant performance improvement when moving long strings.
   83-07-14  R. Harvey:  Changed find_and_create_item to use the current length
	   of a varying string instead of the max length. Also, only 
	   byte-aligned data is copied by a character move. These changes are
	   due to Bert Moberg.
   83-08-17  Bert Moberg: changed the per-attribute move code for increased
	   speed.
*/
%page;
simple_vector: entry (I_tuple_ptr, I_work_area_ptr, I_id_list_ptr, I_rel_desc_ptr, X_simple_typed_vector_ptr, O_code);

/*       Parameters            */

	dcl     I_tuple_ptr		 ptr;
	dcl     I_work_area_ptr	 ptr;
	dcl     I_id_list_ptr	 ptr;
	dcl     I_rel_desc_ptr	 ptr;
	dcl     X_simple_typed_vector_ptr ptr;
	dcl     O_code		 fixed bin (35);


/* Copy parameters */

	tuple_ptr = I_tuple_ptr;
	work_area_ptr = I_work_area_ptr;
	id_list_ptr = I_id_list_ptr;
	vrm_rel_desc_ptr = I_rel_desc_ptr;
	simple_typed_vector_ptr = X_simple_typed_vector_ptr;

	next_put_ptr = null;

	if id_list_ptr ^= null then /* If an id_list exists check its version */
	     if id_list.version ^= ID_LIST_VERSION_1 then
		call error (error_table_$unimplemented_version);

	if simple_typed_vector_ptr = null () then do;
						/*  Allocate the simple vector in the caller's work area */

		if id_list_ptr ^= null then
		     stv_number_of_dimensions = id_list.number_of_ids; /* Number of attributes to make for this tuple */
		else stv_number_of_dimensions = vrm_rel_desc.number_attrs;

		on area call error (error_table_$noalloc); /* Leave this around */

		allocate simple_typed_vector in (work_area) set (simple_typed_vector_ptr);

		simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
		simple_typed_vector.number_of_dimensions = stv_number_of_dimensions;

/* Calculate length of data to be returned */

		len = 0;

		do i = 1 to simple_typed_vector.number_of_dimensions;
		     if id_list_ptr ^= null () then
			attr_id = id_list.id (i);
		     else attr_id = i;

		     descriptor_ptr = addr (vrm_rel_desc.attr (attr_id).descriptor);
		     len = len + align_data_item (descriptor_ptr, len); /* Added necessary pad to align properly */

		     len = len + vrm_rel_desc.attr (attr_id).bit_length;
		end;

		allocate target_str in (work_area) set (next_put_ptr); /* Allocate space for all output values needed */
	     end;

/* Copy specified attributes and set value_ptrs */

	data_ptr = addr (tuple.data);

	do i = 1 to simple_typed_vector.number_of_dimensions; /* Loop for each value to be moved */

	     if id_list_ptr ^= null () then
		attr_id = id_list.id (i);
	     else attr_id = i;
	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (attr_id));
	     descriptor_ptr = addr (vrm_rel_desc.attr (attr_id).descriptor);
	     if next_put_ptr ^= null () then do;	/* no vector was passed in */
		     position = fixed (bitno (next_put_ptr), 24);
		     next_put_ptr = addbitno (next_put_ptr, align_data_item (descriptor_ptr, position));
		     simple_typed_vector.dimension (i).value_ptr = next_put_ptr;
		     call find_and_create_item (descriptor_ptr, next_put_ptr, attr_len);
		     next_put_ptr = addbitno (next_put_ptr, attr_len);


		end;				/* no vector */
	     else do;				/* vector passed in - use caller's data ptr */
		     val_ptr = simple_typed_vector.dimension (i).value_ptr;
		     call find_and_create_item (descriptor_ptr, val_ptr, attr_len);
		end;

	end;					/* attr. value loop */

	X_simple_typed_vector_ptr = simple_typed_vector_ptr;
	O_code = 0;

Exit:	return;
%page;
general_vector: entry (I_tuple_ptr, I_work_area_ptr, I_rel_desc_ptr, I_general_typed_vector_ptr, O_code);

/* Parameters */

/*	dcl     I_tuple_ptr		 ptr;		*/
/*	dcl     I_work_area_ptr	 ptr;		*/
/*	dcl     I_rel_desc_ptr	 ptr;		*/
	dcl     I_general_typed_vector_ptr ptr;
						/*	dcl     O_code		 fixed bin (35);	*/


/* Copy input parameters */

	tuple_ptr = I_tuple_ptr;
	work_area_ptr = I_work_area_ptr;
	vrm_rel_desc_ptr = I_rel_desc_ptr;
	general_typed_vector_ptr = I_general_typed_vector_ptr;

/* Calculate the length of data to be returned */

	len = 0;
	do i = 1 to general_typed_vector.number_of_dimensions;
	     attr_id = general_typed_vector.dimension (i).identifier;
	     descriptor_ptr = addr (vrm_rel_desc.attr (attr_id).descriptor);
	     len = len + align_data_item (descriptor_ptr, len); /* Added necessary pad to align properly */

	     len = len + vrm_rel_desc.attr (attr_id).bit_length;
	end;

	on area call error (error_table_$noalloc);
	allocate target_str in (work_area) set (next_put_ptr); /* Set up space for output values */

/* Copy each attribute selected */

	data_ptr = addr (tuple.data);

	do i = 1 to general_typed_vector.number_of_dimensions;
	     attr_id = general_typed_vector.dimension (i).identifier;
	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (attr_id));
	     position = fixed (bitno (next_put_ptr), 24);
	     descriptor_ptr = addr (vrm_rel_desc.attr (attr_id).descriptor);
	     next_put_ptr = addbitno (next_put_ptr, align_data_item (descriptor_ptr, position));

	     general_typed_vector.dimension (i).value_ptr = next_put_ptr;
	     call find_and_create_item (descriptor_ptr, next_put_ptr, attr_len);
	     next_put_ptr = addbitno (next_put_ptr, attr_len);
	end;

	O_code = 0;
	return;
%page;
find_and_create_item: proc (desc_ptr, target_data_ptr, len);

/* 
   Procedure to move a single value. If the source and target are both byte
   aligned and a multiple of 9 bits in length, then use a character string
   overlay to move the data instead of a bit string.
*/

	dcl     desc_ptr		 ptr;		/* ptr to descriptor */
	dcl     len		 fixed bin (24);
	dcl     (toff, soff)	 fixed bin (24);
	dcl     bit_str		 bit (len) based;
	dcl     char_string		 char (clen) based;
	dcl     clen		 fixed bin (21);
	dcl     target_data_ptr	 ptr;
	dcl     vary_length		 fixed bin (35) unaligned based;
	dcl     equal_0_mod_9	 dim (0:36) bit (1) internal static options (constant)
				 init ("1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,
				 "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,
				 "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,
				 "1"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,
				 "1"b);

/* Set up a pointer to the item in the record and determine the length */

	if vrm_attr_info.varying			/* set pointer to item */
	then do;
		item_ptr = addbitno (data_ptr, tuple.var_offsets (vrm_attr_info.bit_offset) - 1);
		len = item_ptr -> vary_length;
		if desc_ptr -> arg_descriptor.type = 22 then len = len * 9;
		len = len + 36;
	     end;
	else do;
		item_ptr = addbitno (data_ptr, vrm_attr_info.bit_offset - 1);
						/* Note that a -1 is needed because a bit_offset = 1
						   indicates the first bit which really is an offset of 0. */
		len = vrm_attr_info.bit_length;
	     end;

/*  Now decide how to move the data */

	if len >= MIN_CHAR_MOVE then do;		/* check for minimum bit count */
		toff = fixed (addr (target_data_ptr) -> its.bit_offset); /* number of bits from a word alignment */
		soff = fixed (addr (item_ptr) -> its.bit_offset);
		if equal_0_mod_9 (toff) & equal_0_mod_9 (soff) & mod (len, 9) = 0 then do;
			clen = divide (len, 9, 21, 0);/* number of characters to move */
			target_data_ptr -> char_string = /* move by characters */
			     item_ptr -> char_string;
			return;			/* EXIT THIS SUBROUTINE */
		     end;
	     end;

/* We get here if we did not do the character move */

	target_data_ptr -> bit_str = item_ptr -> bit_str;


     end find_and_create_item;
%page;
/* * * * * * * * * * * * * *     align_data_item     * * * * * * * * * * *   */

align_data_item: procedure (arg_descriptor_ptr, base_to_pad) returns (fixed bin);

/* HISTORY:

   Originally written by Jim Gray - - December 1979

*/



/* DESCRIPTION:

   given a pointer to a standard multics pl1 data argument descriptor,
   and a current storage offset at which data is to be placed,
   this routine calculates from the data type, and the given address
   the number of padding bits needed to properly align the data
   on either a byte, word, or double word boundary, as required
   by the data type definition, and routines such as assign_.
   currently the data types that assign_ can handle are supported
   by this routine(i.e. 1-12, 19-22, 33-34, 43-46)

*/

/* PARAMETERS:

   arg_descriptor_ptr - - (input) pointer, points to the standard multics pl1
   argument descriptor for the data to be byte/word/even_word aligned using the
   given address

   base_to_pad - - (input) fixed bin(35), the current address(offset), of the last
   data item, after which the data item described by the input descriptor
   is to be placed, for the first data item, base_to_pad = 0.

   needed_bits - - (output) fixed bin, the number of bits to add to base_to_pad,
   in order to obtain the correct byte/word/even_word alignment for the
   data type as described by the input descriptor.

*/
%page;
/* using the declared alignment and data type for this attribute,
   return the number of bits necessary to put the data on a boundary
   as defined by pl1, such as byte, word or double word aligned, for using that type.
   directly in such operations as the any_to_any convert via assign_
   without having to do a bit move to get the proper alignment.
   this makes data storage in the tuple a true representation of the pl1
   attributes of unaligned and aligned for complete user choice
   in the trade off between speed and space. */


	dcl     needed_bits		 fixed bin;	/* number of bits needed to get the alignment */
	dcl     base_to_pad		 fixed bin (24) parameter; /* original value to be padded out */

	needed_bits = 0;				/* initialize */

	if arg_descriptor_ptr = null () then ;
	else if arg_descriptor.packed then do;		/* unaligned */

		if ^(arg_descriptor.type = 21 | (arg_descriptor.type >= 9 & arg_descriptor.type <= 12) /* char or decimal */
		     | (arg_descriptor.type >= 43 & arg_descriptor.type <= 46)) then ; /* packed decimal */
		else needed_bits = pad (BYTE, base_to_pad);

	     end;
	else do;					/* aligned */

		if (arg_descriptor.type >= 9 & arg_descriptor.type <= 12) | /* decimal */
		     (arg_descriptor.type >= 43 & arg_descriptor.type <= 46) | /* packed decimal */
		     (arg_descriptor.type >= 19 & arg_descriptor.type <= 22) | /* bit or char */
		     arg_descriptor.type = 1 | arg_descriptor.type = 3 | arg_descriptor.type = 33 then /* binary short */
		     needed_bits = pad (WORD, base_to_pad);

		else if arg_descriptor.type = 2 | arg_descriptor.type = 34 | /* binary long */
			(arg_descriptor.type >= 4 & arg_descriptor.type <= 8) then /* binary complex */
		     needed_bits = pad (DOUBLE_WORD, base_to_pad);
		else ;				/* none needed otherwise */

	     end;

	return (needed_bits);

%page;
pad: procedure (pad_size, pad_base) returns (fixed bin);

/* routine to return the number of bits necessary to pad a bit count
   out to an alignment boundary of 9(byte), 36(word), or 72(double word) bits
   as determined by the pad size input */

	if mod (pad_base, pad_size) = 0 then
	     number_of_bits = 0;
	else do;

		number_of_bits = pad_size - mod (pad_base, pad_size);

	     end;

	return (number_of_bits);


	dcl     pad_size		 fixed bin;	/* either 9 or 36 or 72 */
	dcl     pad_base		 fixed bin (24);	/* current bit length to be padded */
	dcl     number_of_bits	 fixed bin;	/* what has to be added to get to the desired boundary */

     end pad;
%page;
%include arg_descriptor;



	dcl     BYTE		 fixed bin init (9) internal static options (constant); /* byte boundary = 9 bits */
	dcl     WORD		 fixed bin init (36) int static options (constant); /* word boundary = 36 bits */
	dcl     DOUBLE_WORD		 fixed bin init (72) int static options (constant); /* double word boundary = 72 bits */



     end align_data_item;
%page;
error: proc (ecode);

	dcl     ecode		 fixed bin (35);

	if simple_typed_vector_ptr ^= null ()
	then free simple_typed_vector;

	O_code = ecode;

	go to Exit;

     end;
%page;
%include vrm_rel_desc;
%page;
%include vu_typed_vector;
%page;
%include dm_id_list;
%page;
%include vrm_tuple;
%page;
%include its;
%page;
%include arg_descriptor;
%page;
	dcl     addbitno		 builtin;
	dcl     area		 condition;
	dcl     attr_id		 fixed bin;	/* attribute identifier for temp use */
	dcl     attr_len		 fixed bin (24);
	dcl     bitno		 builtin;
	dcl     data_ptr		 ptr;
	dcl     descriptor_ptr	 ptr;
	dcl     error_table_$noalloc	 fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     i			 fixed bin;	/* do index */
	dcl     item_ptr		 ptr;
	dcl     len		 fixed bin (24);
	dcl     MIN_CHAR_MOVE	 fixed bin int static init (90); /* number of bits */
	dcl     next_put_ptr	 ptr;		/* used to keep place in output area */
	dcl     position		 fixed bin (24);
	dcl     target_str		 bit (len) based;
	dcl     val_ptr		 ptr;
	dcl     work_area		 area based (work_area_ptr);
	dcl     work_area_ptr	 ptr;


	dcl     (addr, divide, fixed, mod, null) builtin;



     end vrmu_cv_tuple_to_vector;
