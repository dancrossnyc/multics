/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_get_duplicate_key_count: get_duplicate_key_count: proc (I_relation_cursor_ptr,
	I_index_collection_id, I_num_dup_fields, O_count, O_code);

/*                 BEGIN_DESCRIPTION

The purpose of this procedure is to provide an approximate number of
duplicate keys. The method used is to use vfile_status_ to get the number of
total number duplicate keys and divide that numbe by the number of indexed 
attributes in the relation pluse one for the primary key.


                  END_DESCRIPTION
*/

/* HISTORY
82-10-06: Roger Lackey : Initially written
83-10-21: Roger Lackey : added check for vrm_rel_desc.number_sec_indexes = 0
                         to eliminate posibility of divide by zero.
*/
/* PARAMETERS */

	dcl     I_relation_cursor_ptr	 ptr parameter;	/* Cursor pointer */
	dcl     I_index_collection_id	 bit (36) aligned parameter; /* collection id to get statistics for (ignored ) */
	dcl     I_num_dup_fields	 fixed bin parameter; /* NOT USED BY vrm */
	dcl     O_count		 fixed bin (35) parameter; /* Returned dup key count */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */

	vrm_cursor_ptr = I_relation_cursor_ptr;
	O_count = 0;
	O_code = 0;

	if vrm_cursor.switches.meter_sw then do;

		call cpu_time_and_paging_ (pf_1, t1, pf_dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
	     end;

	vrm_cursor.switches.shared = vrm_cursor.open_info_ptr -> vrm_open_info.switches.shared;

	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;

	vfsi.info_version = 1;

	call iox_$control (vrm_cursor.iocb_ptr, "file_status", addr (vfsi), code);

	if code = 0 then do;			/* Give um the count */
		if vfsi.dup_keys = 0 |
		     vrm_rel_desc.number_sec_indexes = 0 then O_count = 0;

		else O_count = divide (vfsi.dup_keys, (vrm_rel_desc.number_sec_indexes), 24, 0);
	     end;


	O_code = code;

	if vrm_cursor.switches.meter_sw then do;
		call cpu_time_and_paging_ (pf_2, t2, pf_dummy);
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;
%page;
%include vrm_meter;
%page;
%include vrm_rel_desc;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vfs_info;
%page;
	dcl     1 vfsi		 like indx_info;

	dcl     addr		 builtin;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     cpu_time_and_paging_	 entry (fixed bin, fixed bin (71), fixed bin);
	dcl     divide		 builtin;
	dcl     info		 fixed bin;	/* Dummy variable for vfsi like */
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     pf_1		 fixed bin;
	dcl     pf_2		 fixed bin;
	dcl     pf_dummy		 fixed bin;
	dcl     t1		 fixed bin (71);
	dcl     t2		 fixed bin (71);
	dcl     t3		 float bin (63);



     end vrm_get_duplicate_key_count;
