/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

vrm_meter: vrmm: proc;

	if saved_meter_seg_ptr = null then do;
		call get_temp_segment_ (PROC_NAME, saved_meter_seg_ptr, code);
		if code ^= 0 then call error (code, "^/Getting temp segment");
		meter_info_ptr = saved_meter_seg_ptr;
		meter_info.work_area = empty ();	/* Make it an area */

		meter_info.meter_on = "1"b;
		meter_info.all_sw = "1"b;
		meter_info.num_rels = 0;
	     end;
	else meter_info_ptr = saved_meter_seg_ptr;


	print_long_sw = "0"b;
	reset_sw = "0"b;
	delete_sw = "0"b;
	print_sw = "0"b;
	list_sw = "0"b;
	meter_on_sw = "0"b;				/* Default */
	on_arg = "0"b;
	meter_sw = "0"b;
	all_rel_arg = "0"b;
	all_rel_sw = "0"b;
	reset_all_sw = "1"b;			/* Default */
	reset_sw = "0"b;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then call error (code, "^/Getting arg count");

	if nargs < 1 then call error (error_table_$wrong_no_of_args,
		"^/vrmm   -list_meters^23t| -lsm <REL_DESC>^/^7x-reset_meters^23t| -rsm <REL_DESC>^/^7x-print_meters^23t| -prm <REL_DESC>^/^7x-meter^23t| -mt  <REL_DESC>^/^7x-delete_meters^23t| -dlm <REL_DESC>^/");
%page;
	do n = 1 to nargs;

	     call get_arg (n);

	     if substr (arg, 1, 1) = "-" then do;	/* Check control arg */


		     if arg = "-list_meters" | arg = "-lsm" | arg = "-ls" then do;
			     list_sw = "1"b;
			     call process_list_args (n);
			end;

		     else if arg = "-mt" | arg = "-meter" then do;
			     meter_sw = "1"b;
			     call process_meter_args (n);
			end;

		     else if arg = "-reset_meters" | arg = "-rsm" | arg = "-rs" then do;
			     reset_sw = "1"b;
			     call process_reset_args (n);
			end;

		     else if arg = "-print_meters" | arg = "-pm" | arg = "-prm" then do;
			     print_sw = "1"b;
			     call process_print_args (n);
			end;

		     else if arg = "-delete_meters" | arg = "-dlm" | arg = "-dl" then do;
			     delete_sw = "1"b;
			     call process_delete_args (n);
			end;

		     else call error (error_table_$bad_subr_arg, arg);

		end;				/* Check control args */
	     else call error (error_table_$bad_arg, arg);
	end;					/* END do n = 1 to nargs */

	if meter_sw then call meter;
	if list_sw then call list;
	if print_sw then call print;
	if reset_sw then call reset;
	if delete_sw then call delete;

exit:	return;

%page;
/*  * * * * * * * * * std_args    * * * * * * * * * * * * * * * * * * * *  */

std_args: proc (sn, arg_str_ptr, used_sw);

	dcl     sn		 fixed bin parameter; /* Arg number */
	dcl     arg_str_ptr		 ptr parameter;	/* Argument structure to be used */
	dcl     used_sw		 bit (1) parameter;

	std_arg_ptr = arg_str_ptr;

	used_sw = "0"b;

	if arg = "-all" | arg = "-a" then do;
		std_arg.all_sw = "1"b;
		used_sw = "1"b;
		sn = sn + 1;
	     end;


	else if arg = "-path" | arg = "-pn" then do;
		sn = sn + 1;
		used_sw = "1"b;
		if sn + 1 > nargs then call error (error_table_$noarg,
			"^/A pathname missing following " || arg || ".");

		call get_arg (sn + 1);
		if substr (arg, 1, 1) = "-" then call error (error_table_$bad_arg,
			"^/Expected pathname missing following -path control arg.");
		else do;
			call get_path_desc (arg, addr (std_arg));
			std_arg.desc_sw = "1"b;
		     end;
		sn = sn + 1;
	     end;					/* END -path */


     end std_args;
%page;
process_list_args: proc (ln);

	dcl     ln		 fixed bin parameter;

	unspec (list_arg) = "0"b;

	if ln + 1 > nargs then do;
		list_arg.all_sw = "1"b;
		return;
	     end;

	list_args_done = "0"b;

	do while (^list_args_done);

	     if ln + 1 <= nargs then call get_arg (ln + 1);
	     else return;

	     if substr (arg, 1, 1) = "-" then do;
		     call std_args (ln, addr (list_arg), arg_used);
		     list_args_done = ^arg_used;
		end;
	     else list_args_done = "1"b;
	end;

     end process_list_args;
%page;
process_meter_args: proc (mn);

	dcl     mn		 fixed bin parameter;

	unspec (meter_arg) = "0"b;

	if mn + 1 > nargs then return;

	meter_args_done = "0"b;

	do while (^meter_args_done);

	     if mn + 1 <= nargs then call get_arg (mn + 1);
	     else return;

	     if substr (arg, 1, 1) = "-" then do;

		     used_it_sw = "0"b;
		     call std_args (mn, addr (meter_arg), used_it_sw);
		     if used_it_sw then meter_args_done = "0"b;

		     else if arg = "-on" then do;
			     on_arg = "1"b;
			     meter_on_sw = "1"b;
			     mn = mn + 1;
			end;
		     else if arg = "-off" then do;
			     on_arg = "1"b;
			     meter_on_sw = "0"b;
			     mn = mn + 1;
			end;

		     else meter_args_done = "1"b;
		end;
	     else meter_args_done = "1"b;
	end;

     end process_meter_args;
%page;
/*   * * * * * * * * * * * * *    process_delete_args  * * * * * * * * * *   */

process_delete_args: proc (dn);

	dcl     dn		 fixed bin parameter;

	unspec (delete_arg) = "0"b;

	if dn + 1 > nargs then do;
		delete_arg.all_sw = "1"b;
		return;
	     end;

	delete_args_done = "0"b;

	do while (^delete_args_done);

	     if dn + 1 <= nargs then call get_arg (dn + 1);
	     else return;

	     if substr (arg, 1, 1) = "-" then do;
		     call std_args (dn, addr (delete_arg), arg_used);
		     delete_args_done = ^arg_used;
		end;
	     else delete_args_done = "1"b;
	end;

     end process_delete_args;
%page;
process_reset_args: proc (rn);

	dcl     rn		 fixed bin parameter;

	unspec (reset_arg) = "0"b;

	if rn + 1 > nargs then do;
		reset_arg.all_sw = "1"b;
		return;
	     end;

	reset_args_done = "0"b;

	do while (^reset_args_done);

	     if rn + 1 <= nargs then call get_arg (rn + 1);
	     else return;

	     if substr (arg, 1, 1) = "-" then do;
		     call std_args (rn, addr (reset_arg), arg_used);
		     reset_args_done = ^arg_used;
		end;
	     else reset_args_done = "1"b;
	end;

     end process_reset_args;
%page;
process_print_args: proc (dn);

	dcl     dn		 fixed bin parameter;

	print_search_stat_sw = "0"b;
	print_search_stat_arg_sw = "0"b;
	print_last_call_arg_sw = "0"b;
	print_last_call_sw = "0"b;
	print_total_sw = "0"b;
	print_total_arg_sw = "0"b;
	print_long_sw = "0"b;

	unspec (meter_arg) = "0"b;

	if dn + 1 > nargs then do;
		print_long_sw = "1"b;
		return;
	     end;

	print_args_done = "0"b;

	do while (^print_args_done);

	     if dn + 1 <= nargs then call get_arg (dn + 1);
	     else return;

	     if substr (arg, 1, 1) = "-" then do;

		     used_it_sw = "0"b;
		     call std_args (dn, addr (print_arg), used_it_sw);
		     if used_it_sw then print_args_done = "0"b;

		     else if arg = "-last_call" | arg = "-last" then do;
			     print_last_call_arg_sw = "1"b;
			     print_last_call_sw = "1"b;
			     dn = dn + 1;
			end;

		     else if arg = "-total" | arg = "-tt" then do;
			     print_total_sw = "1"b;
			     print_total_arg_sw = "1"b;
			     dn = dn + 1;
			end;

		     else if arg = "-search" | arg = "-sch" then do;
			     print_search_stat_sw = "1"b;
			     print_search_stat_arg_sw = "1"b;
			     dn = dn + 1;
			end;

		     else if arg = "-long" | arg = "-lg" then do;
			     print_long_sw = "1"b;
			     dn = dn + 1;
			end;

		     else if arg = "-brief" | arg = "-bf" then do;
			     print_long_sw = "0"b;
			     dn = dn + 1;
			end;

		     else print_args_done = "1"b;
		end;
	     else print_args_done = "1"b;
	end;

     end process_print_args;
%page;
add_meter: entry (I_cursor_ptr, O_meter_ptr, O_code);

	dcl     I_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor to be added */
	dcl     O_meter_ptr		 ptr parameter;	/* Pointer to vrm_meter */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */


	O_code = 0;
	O_meter_ptr = null;

	meter_info_ptr = saved_meter_seg_ptr;

	vrm_cursor_ptr = I_cursor_ptr;

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;

	call get_path_desc (rtrim (vrm_open_info.database_dir_path) || ">" ||
	     vrm_open_info.relation_name, addr (meter_arg));

	x = locate_uid_in_rel_list (meter_arg.path_desc.uid, 0);

	if x = 0 then do;
		if ^meter_info.meter_on then goto add_meter_exit;

		meter_arg.path_desc.dir = vrm_open_info.database_dir_path;
		meter_arg.path_desc.ent = vrm_open_info.relation_name;
		meter_arg.path_desc.uid = vrm_open_info.file_uid;
		call add_rel_list_ent (addr (meter_arg), x);
	     end;

	call add_meter_entry (x, vrm_cursor_ptr, vrm_meter_ptr, code);
	if code = 0 then O_meter_ptr = vrm_meter_ptr;
	else O_code = code;
						/*     end; */

add_meter_exit: return;
%page;
add_rel_list_ent: proc (I_arg_ptr, O_rl_ix);

	dcl     I_arg_ptr		 ptr parameter;
	dcl     O_rl_ix		 fixed bin parameter;
	dcl     rl_ix		 fixed bin;

	std_arg_ptr = I_arg_ptr;

	if meter_info.num_rels = MAX_RELS then
	     call sub_error (error_table_$too_many_names);
	O_rl_ix, rl_ix = meter_info.num_rels + 1;
	meter_info.num_rels = rl_ix;

	meter_info.rel_info (rl_ix).rel_name = std_arg.path_desc.ent;
	meter_info.rel_info (rl_ix).rel_dir = std_arg.path_desc.dir;
	meter_info.rel_info (rl_ix).number_meters = 0;
	meter_info.rel_info (rl_ix).uid = std_arg.path_desc.uid;
	meter_info.rel_info (rl_ix).meter_ptrs (*) = null;

     end add_rel_list_ent;
%page;
add_meter_entry: proc (I_ame_rel_list_ix, I_ame_cursor_ptr, O_vrm_meter_ptr, O_code);


	dcl     I_ame_cursor_ptr	 ptr parameter;
	dcl     I_ame_rel_list_ix	 fixed bin parameter;
	dcl     O_vrm_meter_ptr	 ptr parameter;
	dcl     O_code		 fixed bin (35) parameter;


	O_vrm_meter_ptr = null;
	O_code = 0;


	rx = I_ame_rel_list_ix;

	if meter_info.rel_info (rx).number_meters > 4 then O_code = error_table_$too_many_names;
	else do;

		allocate vrm_meter in (meter_info.work_area) set (vrm_meter_ptr);

		meter_info.rel_info (rx).number_meters = meter_info.rel_info (rx).number_meters + 1;
		vrm_meter.cursor_name = ltrim (char (meter_info.rel_info (rx).number_meters));
		vrm_meter.meter_start_time = clock;
		vrm_meter.switches.metering = "0"b;
		vrm_meter.last_call_stats = 0;
		vrm_meter.total_stats = 0;

		meter_info.rel_info (rx).meter_ptrs (meter_info.rel_info (rx).number_meters) = vrm_meter_ptr;

		vrm_meter.cursor_ptr = I_ame_cursor_ptr;/* May be null */
		O_vrm_meter_ptr = vrm_meter_ptr;

	     end;


     end add_meter_entry;

%page;
delete_rel_list_ent: proc (I_rel_ix);

	dcl     I_rel_ix		 fixed bin parameter;

	rx = I_rel_ix;

	if meter_info.num_rels < rx then return;

	do mx = 1 to meter_info.rel_info (rx).number_meters;

	     vrm_meter_ptr = meter_info.rel_info (rx).meter_ptrs (mx);

	     if vrm_meter.cursor_ptr ^= null then do;
		     vrm_meter.cursor_ptr -> vrm_cursor.meter_sw = "0"b;
		     vrm_meter.cursor_ptr -> vrm_cursor.meter_ptr = null;
		end;
	     free vrm_meter in (meter_info.work_area);

	end;

	do dx = rx to meter_info.num_rels - 1;
	     meter_info.rel_info (dx) = meter_info.rel_info (dx + 1);
	end;

	meter_info.num_rels = meter_info.num_rels - 1;

     end delete_rel_list_ent;


%page;
/* * * * * * * * * * * * *  meter      * * * * * * * * * * * * * * * */

meter: proc;

	if ^meter_arg.all_sw & ^meter_arg.desc_sw & ^on_arg then do;
		meter_arg.all_sw = "1"b;
		meter_on_sw = "1"b;
	     end;

	if ^meter_arg.desc_sw then meter_arg.all_sw = "1"b;

	if ^on_arg then meter_on_sw = "1"b;

	if meter_on_sw then meter_starting_time = clock;

	if meter_arg.all_sw then do;			/* Turn um all on */

		if meter_arg.desc_sw then
		     call error (error_table_$bad_arg,
			"^/ The -all and -path control arguments cannot be used together.");

		meter_info.all_sw = meter_on_sw;
		meter_info.meter_on = meter_on_sw;
		if meter_on_sw then call vrm_create_cursor$metering_on;
		else call vrm_create_cursor$metering_off;

		do i = 1 to meter_info.num_rels;

		     do c = 1 to meter_info.rel_info (i).number_meters;

			vrm_meter_ptr = meter_info.rel_info (i).meter_ptrs (c);

			vrm_meter.switches.metering = meter_on_sw;
			if vrm_meter.cursor_ptr ^= null then
			     vrm_meter.cursor_ptr -> vrm_cursor.switches.meter_sw = meter_on_sw;
			if meter_on_sw & vrm_meter.meter_start_time = 0 then
			     vrm_meter.meter_start_time = meter_starting_time;


		     end;				/* END do c = 1 to */
		end;				/* END do i = 1 to */

	     end;					/* END if meter_all */
%page;
	else do;					/* Meter specific one */
		x = 0;

		if meter_arg.desc_sw then do;
			x = locate_uid_in_rel_list (meter_arg.path_desc.uid, 1);
			if x ^= 0 then do;

				do c = 1 to meter_info.rel_info (x).number_meters;

				     vrm_meter_ptr = meter_info.rel_info (x).meter_ptrs (c);

				     vrm_meter.switches.metering = meter_on_sw;
				     if vrm_meter.cursor_ptr ^= null then do;
					     vrm_meter.switches.metering = meter_on_sw;
					     vrm_meter.cursor_ptr -> vrm_cursor.switches.meter_sw =
						meter_on_sw;
					end;


				end;		/* END do c = 1 to */

			     end;			/* END if x ^= 0 then do; */
			else do;

				call add_rel_list_ent (addr (meter_arg), x);


				call add_meter_entry (x, null, vrm_meter_ptr, code);
				if code ^= 0 then
				     call error (code, "Adding meter cursor name: " || meter_arg.relation_name);
				vrm_meter.switches.metering = "1"b;



			     end;			/* END do while (x ^= 0 ) */

		     end;				/* if meter_arg.desc_sw then do */

	     end;					/* END else do */

     end meter;
%page;
/* * * * * * * * * * * * * *    list      * * * * * * * * * * * * * *  */

list: proc;

	if ^list_arg.desc_sw then list_arg.all_sw = "1"b;

	if list_arg.all_sw then do;

		if list_arg.desc_sw then
		     call error (error_table_$bad_arg,
			"^/ The -all and -path control arguments cannot be used together.");

		if meter_info.all_sw & meter_info.meter_on then
		     call ioa_ ("^/^-New cursors will be metered.^/");


		else if ^meter_info.meter_on then
		     call ioa_ ("^/^-New cursors will not be metered.^/");


		if meter_info.num_rels < 1 then
		     call ioa_ ("^-None have been specified.^/");

		else do l = 1 to meter_info.num_rels;

			call list_display (l);

		     end;
	     end;					/* END if list_arg.all_sw */

	else do;					/* Meter specific one */
		listed_one = "0"b;
		x = 1;
		do while (x ^= 0 & x <= meter_info.num_rels);

		     if list_arg.desc_sw then
			x = locate_uid_in_rel_list (list_arg.path_desc.uid, x);

		     if x ^= 0 then do;
			     call list_display (x);
			     x = x + 1;
			end;

		end;				/* END do while (x ^= 0 ) */
		if ^listed_one then
		     call ioa_ ("Specified meter to be listed does not exists.");
	     end;					/* END else do */

	call ioa_ ("");
%page;
list_display: proc (ml);

	dcl     ld		 fixed bin;
	dcl     ml		 fixed bin parameter;

	list_path = get_shortest_path_ (meter_info.rel_info (ml).rel_dir);

	call ioa_ ("RELATION:^20t^a>^a", list_path,
	     meter_info.rel_info (ml).rel_name);

	if meter_info.rel_info (ml).number_meters = 0 then do; /* Nothing to display */

		call ioa_ ("^20tNo cursors defined for this relation.^/");
		return;
	     end;

	do ld = 1 to meter_info.rel_info (ml).number_meters;

	     vrm_meter_ptr = meter_info.rel_info (ml).meter_ptrs (ld);

	     if vrm_meter.switches.metering then
		data = "Metering  ON   ";
	     else data = "Metering  OFF  ";

	     if vrm_meter.last_call_stats.last_time_of_stats = 0 then
		data = data || "No meters";
	     else do;
		     call format_time (vrm_meter.last_call_stats.last_time_of_stats, time);
		     data = data || "Last meter time was " || time;
		end;

	     call ioa_ ("^5xCURSOR:^20t^a    ^a", vrm_meter.cursor_name, data);

	     listed_one = "1"b;

	end;					/* do ld = 1 to meter_list.number_meters */


     end list_display;

     end list;
%page;
/*   * * * * * * * * * * *     print  * * * * * * * * * * * * * */
print: proc;

	if print_long_sw then do;
		print_total_sw = "1"b;
		print_last_call_sw = "1"b;
		print_search_stat_sw = "1"b;
	     end;

	printed_one = "0"b;
	if ^print_total_sw & ^print_last_call_sw then
	     print_last_call_sw = "1"b;

	if ^print_arg.desc_sw then print_arg.all_sw = "1"b;

	if print_arg.all_sw then do;			/* Display um all */

		do i = 1 to meter_info.num_rels;

		     last_print_path = "";

		     do c = 1 to meter_info.rel_info (i).number_meters;

			vrm_meter_ptr = meter_info.rel_info (i).meter_ptrs (c);
			call print_stats (i, vrm_meter_ptr);

		     end;				/* END do c = 1 to */
		end;				/* END do i = 1 to */

	     end;					/* END if print_arg.all_sw */
	else do;					/* Specific realtion */
		x = 1;

		do while (x ^= 0 & x <= meter_info.num_rels);

		     if print_arg.desc_sw then
			x = locate_uid_in_rel_list (print_arg.path_desc.uid, x);

		     if x ^= 0 then do;
			     last_print_path = "";

			     do c = 1 to meter_info.rel_info (x).number_meters;

				call print_stats (x, meter_info.rel_info (x).meter_ptrs (c));
			     end;

			     x = x + 1;
			end;			/* END x ^= 0 */

		end;				/* END do while x ^= 0 */
	     end;					/* END Specific relation */
	if ^printed_one then call ioa_ ("^/No meters were found.");

     end print;
%page;
/*   * * * * * * * * * *     print_stats  *  * * * * * * * * * * * * *   */

print_stats: proc (I_rel_ix, I_meter_ptr);

	dcl     I_rel_ix		 fixed bin parameter;
	dcl     I_meter_ptr		 ptr parameter;

	vrm_meter_ptr = I_meter_ptr;

	if vrm_meter.last_call_stats.last_time_of_stats = 0 then return;

	print_path = get_shortest_path_ (meter_info.rel_info (I_rel_ix).rel_dir);

	print_path = rtrim (print_path) || ">" ||
	     meter_info.rel_info (I_rel_ix).rel_name;

	if last_print_path ^= print_path then do;
		call ioa_ ("^/RELATION:^22t^a", print_path);
		last_print_path = print_path;
	     end;

	printed_one = "1"b;

	if print_last_call_sw then lc = "1"b;
	else lc = "0"b;
	if print_total_sw then do;
		tt = "1"b;
		if lc then tot_ptr = addr (s.s2);
		else tot_ptr = addr (s.s1);
	     end;
	else tt = "0"b;

	call print_the_meters;

     end print_stats;
%page;
/* * * * * * * * * * * * * * * *  print_the_meters   * * * * * * * * * * * */

print_the_meters: proc;

	call ioa_ ("^/    METERS FOR CURSOR:^32t^a^/", vrm_meter.cursor_name);

	s = "";
	if lc then last = "LAST CALL METERS";
	if tt then tot = " TOTAL  METERS";

	call ioa_ ("^a^/", string (s));

	s = "";
	s.h = "Metering time:";
	if lc then
	     call format_time (vrm_meter.last_call_stats.last_time_of_stats, last);
	if tt then
	     call format_time (vrm_meter.meter_start_time, tot);
	call ioa_ ("^a", string (s));


	s = "";
	s.h = "VCPU (seconds):";
	if lc then
	     call format_vcpu (vrm_meter.last_call_stats.vcpu_time, last);
	if tt then
	     call format_vcpu (vrm_meter.total_stats.vcpu_time, tot);
	call ioa_ ("^a", string (s));


	s = "";
	s.h = "Page faults:";
	if lc then
	     call format_val (vrm_meter.last_call_stats.page_faults, last);
	if tt then
	     call format_val (vrm_meter.total_stats.page_faults, tot);
	call ioa_ ("^a", string (s));


	s = "";
	s.h = "Number times locked:";
	if lc then
	     call format_val (vrm_meter.last_call_stats.number_times_locked, last);
	if tt then
	     call format_val (vrm_meter.total_stats.number_times_locked, tot);
	call ioa_ ("^a", string (s));


	s = "";
	s.h = "Number times used:";
	if lc then
	     call format_val (vrm_meter.last_call_stats.number_times_used, last);
	if tt then
	     call format_val (vrm_meter.total_stats.number_times_used, tot);
	call ioa_ ("^a^/", string (s));


	if print_search_stat_sw then do;

		if (lc & vrm_meter.last_call_stats.seek_heads ^= 0) | tt then do;
			s = "";
			s.h = "Regular seek heads:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.seek_heads, last);
			if tt then
			     call format_val (vrm_meter.total_stats.seek_heads, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.special_seek_heads ^= 0) | tt then do;

			s = "";
			s.h = "Special seek heads:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.special_seek_heads, last);
			if tt then
			     call format_val (vrm_meter.total_stats.special_seek_heads, tot);
			call ioa_ ("^a", string (s));

		     end;


		if (lc & vrm_meter.last_call_stats.keys_read ^= 0) | tt then do;

			s = "";
			s.h = "Keys read:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.keys_read, last);
			if tt then
			     call format_val (vrm_meter.total_stats.keys_read, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.keys_compared ^= 0) | tt then do;

			s = "";
			s.h = "Keys comparisons:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.keys_compared, last);
			if tt then
			     call format_val (vrm_meter.total_stats.keys_compared, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.key_hits ^= 0) | tt then do;

			s = "";
			s.h = "Key hits:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.key_hits, last);
			if tt then
			     call format_val (vrm_meter.total_stats.key_hits, tot);
			call ioa_ ("^a", string (s));
		     end;



		s = "";
		s.h = "Upper limit found:";
		if lc then do;
			if vrm_meter.last_call_stats.upper_limit_found_count > 0 then
			     last = "YES";
			else last = "NO";
		     end;
		if tt then
		     call format_val (vrm_meter.total_stats.upper_limit_found_count, tot);
		call ioa_ ("^a", string (s));



		if (lc & vrm_meter.last_call_stats.num_times_search_called ^= 0) | tt then do;

			s = "";
			s.h = "Search called:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.num_times_search_called, last);
			if tt then
			     call format_val (vrm_meter.total_stats.num_times_search_called, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.records_searched ^= 0) | tt then do;

			s = "";
			s.h = "Records searched:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.records_searched, last);
			if tt then
			     call format_val (vrm_meter.total_stats.records_searched, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.non_key_compares ^= 0) | tt then do;

			s = "";
			s.h = "Non-key compares:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.non_key_compares, last);
			if tt then
			     call format_val (vrm_meter.total_stats.non_key_compares, tot);
			call ioa_ ("^a", string (s));
		     end;


		if (lc & vrm_meter.last_call_stats.non_key_hits ^= 0) | tt then do;

			s = "";
			s.h = "Non-key hits:";
			if lc then
			     call format_val (vrm_meter.last_call_stats.non_key_hits, last);
			if tt then
			     call format_val (vrm_meter.total_stats.non_key_hits, tot);
			call ioa_ ("^a", string (s));
		     end;



		s = "";
		s.h = "Items returned:";
		if lc then
		     call format_val (vrm_meter.last_call_stats.number_items_returned, last);
		if tt then
		     call format_val (vrm_meter.total_stats.number_items_returned, tot);
		call ioa_ ("^a", string (s));

		s = "";
		s.h = "Tuples deleted:";
		if lc then
		     call format_val (vrm_meter.last_call_stats.number_tuples_deleted, last);
		if tt then
		     call format_val (vrm_meter.total_stats.number_tuples_deleted, tot);
		call ioa_ ("^a", string (s));

		s = "";
		s.h = "Tuples modified:";
		if lc then
		     call format_val (vrm_meter.last_call_stats.number_tuples_modified, last);
		if tt then
		     call format_val (vrm_meter.total_stats.number_tuples_modified, tot);
		call ioa_ ("^a", string (s));


		s = "";
		s.h = "Tuples stored:";
		if lc then
		     call format_val (vrm_meter.last_call_stats.number_tuples_stored, last);
		if tt then
		     call format_val (vrm_meter.total_stats.number_tuples_stored, tot);
		call ioa_ ("^a^/", string (s));

	     end;					/* END if print_search_stat_sw */

format_val: proc (v_in, v_out);

	dcl     v_in		 fixed bin (70) parameter;
	dcl     v_out		 char (20) parameter;
	dcl     v_out_len		 fixed bin (21);

	call ioa_$rsnnl ("^d", v_out, v_out_len, v_in);

     end format_val;

format_vcpu: proc (in_vcpu, out_vcpu);

	dcl     in_vcpu		 float bin (63) parameter;
	dcl     out_vcpu		 char (20) parameter;
	dcl     out_vcpu_len	 fixed bin (21);
	dcl     temp		 char (12);

	call ioa_$rsnnl ("^12.5f", temp, out_vcpu_len, in_vcpu);
	out_vcpu = ltrim (temp);

     end format_vcpu;

     end print_the_meters;
%page;
/* * * * * * * * * * * * * * * *    format_time   * * * * * * * * * * * * *  */

format_time: proc (in_time, out_time);

	dcl     in_time		 fixed bin (71) parameter;
	dcl     out_time		 char (20) parameter;

	zone = "";

	call decode_clock_value_$date_time (in_time, month,
	     dom, year, hour, minute, second, micro_sec, dow, zone, code);
	if code ^= 0 then call error (code, "Converting clock");

	tm.hr = hour;
	tm.min = minute;
	tm.sec = second;
	tm.micro = micro_sec;

	out_time = string (tm);

     end format_time;

%page;
/* * * * * * * * * * * * * *    reset    * * * * * * * * * * * * * * */

reset: proc;

	meter_starting_time = clock;

	if ^reset_arg.all_sw & ^reset_arg.desc_sw then
	     call error (error_table_$noarg, "^/No relation or cursor specified to be reset.");


	if ^reset_arg.desc_sw then reset_arg.all_sw = "1"b;

	if reset_arg.all_sw then do;

		if reset_arg.desc_sw then
		     call error (error_table_$bad_arg, "^/ The -all and -path control arguments cannot be used together.");


		if meter_info.num_rels < 1 then /* Nothing to reset */
		     call ioa_ ("^/There are no meters to reset.");

		else do r = 1 to meter_info.num_rels;

			do c = 1 to meter_info.rel_info (r).number_meters;

			     call reset_the_meter (meter_info.rel_info (r).meter_ptrs (c));
			end;

		     end;				/* END do r = 1 to meter_info.num_rels */
	     end;					/* if reset_arg.all_sw then do */

	else do;					/* Specific relation */
		reset_one = "0"b;

		x = 1;
		do while (x ^= 0 & x <= meter_info.num_rels);

		     if reset_arg.desc_sw then
			x = locate_uid_in_rel_list (reset_arg.path_desc.uid, x);

		     if x ^= 0 then do;


			     do c = 1 to meter_info.rel_info (x).number_meters;

				call reset_the_meter (meter_info.rel_info (x).meter_ptrs (c));
			     end;

			     x = x + 1;
			end;

		end;				/* END do while (x ^= 0 ) */
		if ^reset_one then
		     call ioa_ ("^/Specified meter to be reset does not exists.^/");
	     end;					/* END else do */

     end reset;
%page;
reset_the_meter: proc (I_meter_ptr);

	dcl     I_meter_ptr		 ptr parameter;

	vrm_meter_ptr = I_meter_ptr;

	vrm_meter.meter_start_time = meter_starting_time;
	vrm_meter.last_call_stats = 0;
	vrm_meter.total_stats = 0;
	reset_one = "1"b;

     end reset_the_meter;
%page;
delete: proc;

	if ^delete_arg.all_sw & ^delete_arg.desc_sw then
	     call error (error_table_$noarg, "^/No relation or cursor specified to be deleted.");


	if delete_arg.all_sw then do;

		if delete_arg.desc_sw then
		     call error (error_table_$bad_arg, "^/ The -all and -path control arguments cannot be used together.");


		if meter_info.num_rels < 1 then /* Nothing to delete */
		     call ioa_ ("^/There are no meters to delete.");

		else do r = 1 to meter_info.num_rels;

			call delete_rel_list_ent (r);
		     end;				/* END do r = 1 to meter_info.num_rels */
	     end;					/* if delete_arg.all_sw then do */

	else do;					/* Specific relation */
		deleted_one = "0"b;

		if delete_arg.desc_sw then do;
			x = locate_uid_in_rel_list (delete_arg.path_desc.uid, 1);
			if x ^= 0 then do;

				call delete_rel_list_ent (x);
				deleted_one = "1"b;


			     end;			/* if x ^= 0 then do; */
		     end;				/* END if delete_arg.desc_sw then do; */

		else do i = 1 to meter_info.num_rels;


			call delete_the_meter (i);

		     end;				/* END do i = 1 to rel_list */



		if ^deleted_one then
		     call ioa_ ("Specified meter to be deleted does not exists.^/");
	     end;					/* END else do */

     end delete;
%page;
delete_the_meter: proc (I_dx);


	dcl     I_dx		 fixed bin parameter;
	dcl     di		 fixed bin;

	dx = I_dx;


	do di = 1 to meter_info.rel_info (dx).number_meters;


	     meter_ptr = meter_info.rel_info (dx).meter_ptrs (di);

	     if vrm_meter.cursor_ptr ^= null then do;
		     vrm_cursor_ptr = vrm_meter.cursor_ptr;
		     vrm_cursor.switches.meter_sw = "0"b;
		     vrm_cursor.meter_ptr = null;
		end;

	     free vrm_meter in (meter_info.work_area);

	     deleted_one = "1"b;
	end;

     end delete_the_meter;

%page;
/*  * * * * * * * * * * * * *   locate_uid_in_rel_list   * * * * * * * *  */

locate_uid_in_rel_list: proc (search_uid, start_index) returns (fixed bin);


	dcl     start_index		 fixed bin parameter; /* place to start i rel_list table */
	dcl     return_value	 fixed bin;
	dcl     s			 fixed bin;
	dcl     sx		 fixed bin;
	dcl     search_uid		 bit (36) aligned parameter;

	return_value = 0;
	if start_index = 0 then sx = 1;
	else sx = start_index;


	do s = sx to meter_info.num_rels while (return_value = 0);

	     if meter_info.rel_info (s).uid = search_uid then return_value = s;

	end;

	return (return_value);

     end locate_uid_in_rel_list;

%page;
/*   * * * * * * * * * * * * * * * * * * *    error    * * * * * *  * * * *  */

error: proc (cd, err_msg);

	dcl     cd		 fixed bin (35) parameter;
	dcl     com_err_		 entry () options (variable);
	dcl     err_msg		 char (*) parameter;

	call com_err_ (cd, PROC_NAME, err_msg);
	goto exit;
     end error;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

sub_error: proc (err_cd);

	dcl     err_cd		 fixed bin (35);

	O_code = err_cd;

     end sub_error;

%page;
/*  * * * * * * * * * * * * * *    get_path_desc    * * * * * *  * * * * * *  */

get_path_desc: proc (in_path, gpd_arg_ptr);

	dcl     in_path		 char (*) parameter;
	dcl     gpd_arg_ptr		 ptr parameter;

	std_arg_ptr = gpd_arg_ptr;

	call expand_pathname_ (in_path, std_arg.path_desc.dir, std_arg.path_desc.ent, code);
	if code ^= 0 then call error (code, in_path);

	call hcs_$status_long (std_arg.path_desc.dir,
	     std_arg.path_desc.ent, 1, addr (sb), null, code);
	if code ^= 0 then call error (code, rtrim (std_arg.path_desc.dir) || ">" || std_arg.path_desc.ent);

	if sb.short.type = Link then call error (error_table_$link, in_path);

	else if sb.short.type = Directory then do;
		if sb.long.bit_count = 0 then
		     call error (error_table_$dirseg, in_path);
	     end;

	std_arg.path_desc.uid = sb.long.uid;

     end get_path_desc;
%page;
get_arg: proc (arg_num);

	dcl     arg_num		 fixed bin parameter;

	call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
	if code ^= 0 then call error (code, "Getting arg number " || ltrim (char (n)));

     end get_arg;





%page;
%include vrm_meter_man;
%page;
%include vrm_meter;
%page;
%include status_structures;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vrm_collection_info;
%page;
%include vrm_rel_desc;
%page;
	dcl     1 sb		 like status_branch;

	dcl     1 s,
		2 indent		 char (4) unal,
		2 h		 char (27) unal,
		2 s1		 char (20) unal,
		2 pad2		 char (2) unal,
		2 s2		 char (20) unal;


	dcl     std_arg_ptr		 ptr;

	dcl     1 std_arg		 aligned based (std_arg_ptr),
		2 all_sw		 bit (1) unal,
		2 desc_sw		 bit (1) unal,
		2 pad		 bit (34) unal,
		2 relation_name	 char (32) unal,
		2 path_desc	 unal,
		  3 dir		 char (168),
		  3 ent		 char (32),
		  3 uid		 bit (36) aligned;


	dcl     1 meter_arg		 aligned like std_arg;
	dcl     1 list_arg		 aligned like std_arg;
	dcl     1 print_arg		 aligned like std_arg;
	dcl     1 delete_arg	 aligned like std_arg;
	dcl     1 reset_arg		 aligned like std_arg;


	dcl     1 tm,
		2 hr		 pic "z9" unal,
		2 colon		 char (1) init (":") unal,
		2 min		 pic "99" unal,
		2 blak		 char (2) init ("  ") unal,
		2 sec		 pic "z9" unal,
		2 dot		 char (1) init ("."),
		2 micro		 pic "999999" unal;
%page;
	dcl     addr		 builtin;
	dcl     all_rel_arg		 bit (1);
	dcl     all_rel_sw		 bit (1);
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     arg_used		 bit (1);
	dcl     c			 fixed bin;
	dcl     char		 builtin;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     data		 char (70) varying;
	dcl     deleted_one		 bit (1);
	dcl     delete_args_done	 bit (1);
	dcl     delete_sw		 bit (1);
	dcl     dom		 fixed bin;
	dcl     dow		 fixed bin;
	dcl     dx		 fixed bin;
	dcl     empty		 builtin;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$bad_subr_arg fixed bin (35) ext static;
	dcl     error_table_$dirseg	 fixed bin (35) ext static;
	dcl     error_table_$link	 fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$too_many_names fixed bin (35) ext static;
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext static;
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     fixed		 builtin;
	dcl     get_shortest_path_	 entry (char (*)) returns (char (168));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hour		 fixed bin;
	dcl     i			 fixed bin;
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     l			 fixed bin;
	dcl     last		 char (20) unal based (addr (s.s1));
	dcl     last_print_path	 char (168);
	dcl     lc		 bit (1);
	dcl     listed_one		 bit (1);
	dcl     list_args_done	 bit (1);
	dcl     list_path		 char (168);
	dcl     list_sw		 bit (1);
	dcl     ltrim		 builtin;
	dcl     meter_args_done	 bit (1);
	dcl     meter_on_sw		 bit (1) aligned;
	dcl     meter_starting_time	 fixed bin (71);
	dcl     meter_sw		 bit (1);
	dcl     micro_sec		 fixed bin (71);
	dcl     minute		 fixed bin;
	dcl     month		 fixed bin;
	dcl     mx		 fixed bin;
	dcl     n			 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     null		 builtin;
	dcl     on_arg		 bit (1);
	dcl     printed_one		 bit (1);
	dcl     print_args_done	 bit (1);
	dcl     print_last_call_arg_sw bit (1);
	dcl     print_last_call_sw	 bit (1);
	dcl     print_long_sw	 bit (1);
	dcl     print_path		 char (168);
	dcl     print_search_stat_arg_sw bit (1);
	dcl     print_search_stat_sw	 bit (1);
	dcl     print_sw		 bit (1);
	dcl     print_total_arg_sw	 bit (1);
	dcl     print_total_sw	 bit (1);
	dcl     PROC_NAME		 char (12) int static options (constant) init ("vrm_meter");
	dcl     r			 fixed bin;
	dcl     rel		 builtin;
	dcl     reset_all_sw	 bit (1);
	dcl     reset_args_done	 bit (1);
	dcl     reset_one		 bit (1);
	dcl     reset_sw		 bit (1);
	dcl     rtrim		 builtin;
	dcl     rx		 fixed bin;
	dcl     saved_meter_seg_ptr	 ptr int static init (null ());
	dcl     second		 fixed bin;
	dcl     string		 builtin;
	dcl     substr		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     time		 char (20);
	dcl     tot		 char (20) unal based (tot_ptr);
	dcl     tot_ptr		 ptr;
	dcl     tt		 bit (1);
	dcl     unspec		 builtin;
	dcl     used_it_sw		 bit (1);
	dcl     vrm_create_cursor$metering_off entry;
	dcl     vrm_create_cursor$metering_on entry;
	dcl     x			 fixed bin;
	dcl     year		 fixed bin;
	dcl     zone		 char (4);


	dcl     decode_clock_value_$date_time entry (fixed bin (71), fixed bin,
				 fixed bin, fixed bin, fixed bin,
				 fixed bin, fixed bin,
				 fixed bin (71), fixed bin,
				 char (4), fixed bin (35));



     end vrm_meter;
