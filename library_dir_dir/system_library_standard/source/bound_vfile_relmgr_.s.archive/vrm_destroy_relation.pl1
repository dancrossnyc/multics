/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

vrm_destroy_rel_by_opening: destroy_relation_by_opening: proc (I_rel_opening_id, O_code);


/* .	         BEGIN_DESCRIPTION

   Destroy a given relation. The destroy_by_opening entrypoint will first
   close the database.

   .	         END_DESCRIPTION
*/

/* History:

   82-10-13  R. Harvey:  Initially written

   83-10-24 Roger Lackey : for better performance changed call to
                           hcs_$status_long to hcs_$get_uid_file to get uid.
*/
%page;
/* destroy_relation_by_opening: proc (I_rel_opening_id, O_code); */


/*	  Parameters       */

	dcl     I_rel_opening_id	 bit (36) aligned parameter;
	dcl     O_code		 fixed bin (35);


	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, O_code);
	if O_code ^= 0 then return;


	dir_path = vrm_open_info.database_dir_path;
	rel_name = vrm_open_info.relation_name;

	goto common;



vrm_destroy_rel_by_path: destroy_relation_by_path: entry (I_rel_dir, I_rel_name, O_code);


/*	  Parameters       */

	dcl     I_rel_dir		 char (*) parameter;
	dcl     I_rel_name		 char (*) parameter;
						/* dcl O_code fixed bin (35) parameter; */

	dir_path = I_rel_dir;
	rel_name = I_rel_name;

/* Look for possible opening id for this relation */

	call hcs_$get_uid_file (dir_path, rel_name, file_uid, O_code); /* Try for uid of relation */
	if O_code ^= 0 then if O_code ^= error_table_$no_s_permission then
		return;

	call vrm_open_man$get_opening_id (file_uid, opening_id, (null ()), vrm_open_info_ptr, O_code); /* Get an opening id */
	if O_code ^= 0 then return;




common:

	call vrm_close$release_open_info (vrm_open_info_ptr); /* force a cleanup */
	call vrm_open_man$remove_opening (opening_id);
	call delete_$path (dir_path, rel_name, string (switches), "vfile_relmgr_$destroy_relation", O_code);

	return;
%page;
%include vrm_open_info;
%page;
/*  Automatic  */

	dcl     dir_path		 char (168);
	dcl     rel_name		 char (32);

/* Builtin */

	dcl     (null, string)	 builtin;

/* Internal static */

	dcl     1 switches		 internal static options (constant),
		2 force_sw	 bit (1) unal init ("0"b), /* Don't delete if protected */
		2 question_sw	 bit (1) unal init ("1"b), /* Ask the user what to do if protected */
		2 directory_sw	 bit (1) unal init ("0"b), /* Don't handle directories */
		2 segment_sw	 bit (1) unal init ("1"b), /* Do handle segments */
		2 link_sw		 bit (1) unal init ("1"b), /* Do handle links */
		2 chase_sw	 bit (1) unal init ("1"b); /* Do chase links */

/* External entries */

	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     vrm_close$release_open_info entry (ptr);
	dcl     vrm_open_man$get_open_info_ptr entry (bit (36) aligned, ptr, fixed bin (35));
	dcl     vrm_open_man$remove_opening entry (bit (36) aligned);

	dcl     file_uid		 bit (36) aligned;
	dcl     error_table_$no_s_permission fixed bin (35) ext static;
	dcl     hcs_$get_uid_file	 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     opening_id		 bit (36) aligned;
	dcl     vrm_open_man$get_opening_id entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));

     end vrm_destroy_rel_by_opening;

