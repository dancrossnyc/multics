/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_search: proc (I_search_info_ptr, I_cursor_ptr, O_code);

/*                       BEGIN_DESCRIPTION
  This proceedure must be preceeded by a call to vrmu_search_init for its setup.
It will search the given cursors iocb for the tuples that meed the 
vrm_search_list constraints either using scan records or key search depending 
on the cursor type.

		     END_DESCRIPTION

   HISTORY
   82-09-23 Roger Lackey : Originally written
   83-04-14 Roger Lackey : rewritten to use new vrm_search_list structure.
   83-05-24 Roger Lackey: replaced call to record_status to get record_ptr
                          with call to vrmu_cv_vf_desc_to_ptr
   83-09-08 Roger Lackey : Modified extensively to use new vrm_search_info
                           structure and new calling sequence .
   83-10-01 Roger Lackey : Modified to do seek head on multi-attribute keys
   83-10-11 Roger Lackey : Changed calculation of max_items to account for
                           number of items already_returned.
   83-10-25 Roger Lackey : Removed init_required = "1"b when 
                           vrm_search_list.num_and_groups = 0 
		       As vrmu_scan_records$scan_records_init is done in
		       vrmu_search_init.

*/
%page;
/* vrmu_search: proc (I_search_info_ptr, I_cursor_ptr, O_tuple_id, O_tuple_ptr, O_code); */


	dcl     I_search_info_ptr	 ptr parameter;	/* Pointer vrm_search_info structure */
	dcl     I_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */

	vrm_search_info_ptr = I_search_info_ptr;
	vrm_cursor_ptr = I_cursor_ptr;
	O_code = 0;

	vrm_search_info.num_items_returned = 0;
	tid_required = vrm_search_info.tuple_tid_required;
	pointer_required = vrm_search_info.tuple_pointer_required;

	if ^pointer_required then max_items =
		vrm_search_info.max_number_values - vrm_search_info.cur_id_list_ix;
	else max_items = min (vrm_search_info.max_number_values - vrm_search_info.cur_id_list_ix, MAX_SEARCH_ITEMS);

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;	/* Needed local variables */
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
	vrm_search_list_ptr = vrm_cursor.search_list_ptr;
	file_id = vrm_rel_desc.file_id;
	if vrm_search_info.meter_sw then vrm_search_info.last_call_stats.num_times_search_called =
		vrm_search_info.last_call_stats.num_times_search_called + 1;

	iocb_ptr = vrm_cursor.iocb_ptr;

	tuple_ptr = null;
	scan_records_flag = "0"b;			/* Until we decide other wise */
	init_required = "0"b;
	cur_ag = vrm_search_list.current_and_group;
%page;

	if vrm_search_list.num_and_groups = 0 then do;
		num_constraints = 0;
		scan_records_flag = "1"b;
	     end;
	else do;
		if vrm_search_list.and_groups (cur_ag).do_not_use_sw then
		     call error (dm_error_$no_tuple);

		num_constraints = vrm_search_list.and_groups (cur_ag).num_cons_in_this_and_group;

		if vrm_search_list.and_groups (cur_ag).collection_id_supplied_sw &
		     vrm_search_list.and_groups (cur_ag).collection_id = RELATION_COLLECTION_ID then
		     scan_records_flag = "1"b;

		if vrm_search_list.and_groups (cur_ag).must_initialize_sw then
		     init_required = "1"b;
	     end;

	if ^scan_records_flag then do;
		kh.rel_id = vrm_rel_desc.rel_id;
		kh.index_id = substr (vrm_search_list.and_groups (cur_ag).collection_id, 1, 8);
		kh.mbz = "0"b;
	     end;


	if init_required then do;

		if scan_records_flag then do;
			call vrmu_scan_records$scan_records_init (iocb_ptr, code);
			if code ^= 0 then call error (code);
			if vrm_search_list.num_and_groups > 0 then
			     vrm_search_list.and_groups (cur_ag).must_initialize_sw = "0"b; /* We just did it */
		     end;
		else call key_seek_head;
	     end;
%page;
	if scan_records_flag then do;			/*  scan_records looks at all records in the file
						   with out touching the b-tree (key-tree)  */

		vsrn.iocb_ptr = iocb_ptr;
		vsrn.stationary_rec_expected = vrm_rel_desc.switches.stationary_records;
		vsrn.scan_records_should_lock = ^vrm_open_info.switches.shared;
		vsrn.rel_id = vrm_rel_desc.rel_id;

		got_one = "0"b;			/* This gets turned on when
						   a tuples that passes all search contraints */

		do while (vrm_search_info.num_items_returned < max_items);

		     call vrmu_scan_records$next (addr (vsrn), code);

		     if code ^= 0 then do;
			     if code = error_table_$end_of_info then
				call error (dm_error_$no_tuple);
			     else call error (code);
			end;
		     tuple_ptr = vsrn.record_ptr;

		     if vrm_search_info.meter_sw then vrm_search_info.last_call_stats.records_searched =
			     vrm_search_info.last_call_stats.records_searched + 1;

		     if num_constraints = 0 then got_one = "1"b; /* No search specification */

		     else got_one = and_group_constraints_ok (cur_ag);

		     if got_one then do;		/* If passes all search constraints */
			     got_one = "0"b;

			     vrm_search_info.num_items_returned = vrm_search_info.num_items_returned + 1;
			     if pointer_required then
				vrm_search_info.tup_ptr (vrm_search_info.num_items_returned) = tuple_ptr;

			     if tid_required then do;
				     if vsrn.descriptor (1) = 0 then /* Cause we gota return tuple id */
					call get_tuple_tid (tuple_ptr, vsrn.descriptor (1));

				     vfd_ptr = addr (vsrn.descriptor (1));
				     tid_ptr = addr (tuple_id);
				     tid.non_std_desc = "1"b;
				     tid.temp = "0"b;
				     tid.file_id = file_id;
				     tid.comp_num = vfd.comp_number;
				     tid.offset = vfd.comp_offset;
				     vrm_search_info.tid_list_ptr -> element_id_list.id (vrm_search_info.num_items_returned + vrm_search_info.cur_id_list_ix) = tuple_id;
				end;
			end;
		end;				/* END do while (^got_one) */
	     end;					/* END scan_records */
%page;
	else do;					/* Some kind of key search */

		unspec (gk.flags) = "0"b;
		gk.flags.position_spec.current = "1"b;


		key_templet_ptr = addr (gk.key_len);	/* Pointer to key returned from get_key control order */
		key_templet.unused = "0"b;

		do while (vrm_search_info.num_items_returned < max_items);

		     call get_next;			/* Get next tuple
						   that passes key constraints */
		end;

	     end;					/* END else do   some kind of key search */

exit:	return;
%page;
/* * * * * * * * * * * * * * * * * *   get_next  * * * * * * * * * *   */

get_next: proc;

/*
   If a seek_head was done, this will now read that key.

   If a search specification with constraints that need to be applied to the
   key exists they will be done here without reading the record.

   If non-key-constraints exists, they will also be check after getting a 
   pointer to the tuple.

   If an attribute fails its search specification constraint,
   another key is read until one is found that passes or until
   no more keys exists for the cursor */



	got_one = "0"b;

	do while (^got_one);			/* Do until we get a tuple that passes 
                                                               the search_specification or exhaust key */

	     call iox_$control (iocb_ptr, "get_key", addr (gk), code);
	     if code ^= 0 then do;
		     if code = error_table_$no_record |
			code = error_table_$asynch_deletion |
			code = error_table_$no_key then
			call error (dm_error_$no_tuple);
		     else call error (code);
		end;

	     if vrm_search_info.meter_sw then vrm_search_info.last_call_stats.keys_read =
		     vrm_search_info.last_call_stats.keys_read + 1;

/* If first three character are not index id for this collection then we are done */

	     if substr (gk.key, 1, 3) ^= kh_char_3 then /* Exausted this cursors keys */
		call error (dm_error_$no_tuple);

%page;
/* Apply search_spec constraints to key attributes first */

	     if vrm_search_list.and_groups (cur_ag).num_key_cons_in_this_and_group > 0 then do;

		     cons_ok = "1"b;

		     if ^vrm_search_list.and_groups (cur_ag).full_key_equal_only_sw then
			do c = 1 to vrm_search_list.and_groups (cur_ag).num_key_cons_in_this_and_group while (cons_ok);

			     if vrm_search_list.and_groups (cur_ag).cons (c).key_attr_sw then do;

				     if vrm_search_info.meter_sw then vrm_search_info.last_call_stats.keys_compared =
					     vrm_search_info.last_call_stats.keys_compared + 1;

				     spec_val_ptr = vrm_search_list.and_groups (cur_ag).cons (c).encoded_key_ptr;

				     if vrm_search_list.and_groups (cur_ag).cons (c).key_offset = 0 then
					tuple_key_val_ptr = addr (key_templet.key_data);
				     else tuple_key_val_ptr = add_bit_offset_ (addr (key_templet.key_data),
					     (vrm_search_list.and_groups (cur_ag).cons (c).key_offset));

				     vrm_collection_info_ptr =
					vrm_search_list.and_groups (cur_ag).collection_info_ptr;
				     call key_compare (tuple_key_val_ptr, spec_val_ptr,
					vrm_search_list.and_groups (cur_ag).cons (c).key_bit_length,
					vrm_search_list.and_groups (cur_ag).cons (c).operator, cons_ok);
				     if cons_ok & vrm_search_info.meter_sw
				     then vrm_search_info.last_call_stats.key_hits =
					     vrm_search_info.last_call_stats.key_hits + 1;

				     if ^cons_ok & vrm_search_list (cur_ag).cons (c).and_group_search_terminator then do;


					     if vrm_search_list.and_groups (cur_ag).cons (c).operator = 1 then
						vrm_search_info.upper_limit_exceeded_sw = "1"b;
					     else do;
						     op = terminator_op (vrm_search_list.and_groups (cur_ag).cons (c).operator);

						     call key_compare (tuple_key_val_ptr, spec_val_ptr,
							vrm_search_list.and_groups (cur_ag).cons (c).key_bit_length,
							op, vrm_search_info.upper_limit_exceeded_sw);

						end;
					     if vrm_search_info.upper_limit_exceeded_sw then do;
						     vrm_search_list.and_groups (cur_ag).do_not_use_sw = "1"b;
						     call error (dm_error_$no_tuple);
						end;

					end;	/* END  if ^cons_ok */

				end;		/* END if key_attr */
			end;			/* END do c = 1 to ** */
%page;
		     if cons_ok then do;

			     call get_tid_and_tuple_ptr; /* Internal procedure */
			     if tuple_ptr ^= null then
				got_one = and_group_constraints_ok (cur_ag); /* Check non-key constraints */
			     else got_one = "1"b;	/* By key comparison only  */
			end;			/* END if cons_ok */

		end;				/* END if vrm_search_list.and_groups (cur_ag).num_key_cons_in_this_and_group > 0 then do */


	     else do;				/* No key constraints */
		     call get_tid_and_tuple_ptr;	/* Internal procedure */

		     got_one = and_group_constraints_ok (cur_ag); /* Check non-key constraints */

		end;

	     if got_one then do;
		     vrm_search_info.num_items_returned = vrm_search_info.num_items_returned + 1;

		     if pointer_required then
			vrm_search_info.tup_ptr (vrm_search_info.num_items_returned) = tuple_ptr;
		     if tid_required then
			vrm_search_info.tid_list_ptr ->
			     element_id_list.id (vrm_search_info.num_items_returned +
			     vrm_search_info.cur_id_list_ix) = tuple_id;

		end;

	     if vrm_search_list.and_groups (cur_ag).full_key_equal_only_sw then do;
		     vrm_search_list.and_groups (cur_ag).do_not_use_sw = "1"b;
		     call error (dm_error_$no_tuple);
		end;

/* In all cases position to next key */

	     call iox_$position (iocb_ptr, 0, 1, code);
	     if code ^= 0 then do;			/* Maybe EOF */
		     if code = error_table_$end_of_info |
			code = error_table_$asynch_deletion
		     then call error (dm_error_$no_tuple);
		     else call error (code);
		end;

	end;					/* end do while (^got_one); */

/* If we get here we have a tuple that has passed all constraints of current and group */

     end get_next;
%page;
/* * * * * * * * * * * *   get_tid_and_tuple_ptr   * * * * * * * * * * * * * */

get_tid_and_tuple_ptr: proc;

	if gk.desc < 0 then do;			/* If negative it is a tid (non standard vfile desc ) */
		unspec (tuple_id) = unspec (gk.desc);
		tid_ptr = addr (gk.desc);
		vfd_ptr = addr (vfile_desc);

		vfile_desc = 0;
		vfd.comp_number = tid.comp_num;
		vfd.comp_offset = tid.offset;

	     end;
	else do;					/* It is a real vfile desc */
		vfile_desc = gk.desc;
		vfd_ptr = addr (gk.desc);
		tid_ptr = addr (tuple_id);
		tid.non_std_desc = "1"b;
		tid.temp = "0"b;
		tid.file_id = file_id;
		tid.comp_num = vfd.comp_number;
		tid.offset = vfd.comp_offset;

	     end;

	if pointer_required |
	     (vrm_search_list.and_groups (cur_ag).num_cons_in_this_and_group -
	     vrm_search_list.and_groups (cur_ag).num_key_cons_in_this_and_group) > 0
	then do;					/* Convert vfile desc to record ptr */

		call vrmu_cv_vf_desc_to_ptr (iocb_ptr, vfile_desc, tuple_ptr, rec_len, code);
		if code ^= 0 then call error (code);

	     end;

     end get_tid_and_tuple_ptr;
%page;
/*    * * * * * * * * * * * * *     key_compare    * * * * * * * * * * * *   */

/* Compares two key values using one of six operators */

key_compare: proc (I_key_one_ptr, I_key_two_ptr, I_key_len, I_operator, O_result);

	dcl     I_key_one_ptr	 ptr parameter;	/* Pointer to first key value */
	dcl     I_key_two_ptr	 ptr parameter;	/* Pointer to second key value */
	dcl     I_key_len		 fixed bin (17) unal parameter; /* Length of both key values in bits */
	dcl     I_operator		 fixed bin (17) unal parameter; /* Comparison operator */
	dcl     O_result		 bit (1) aligned parameter; /* Returned results One = true */

	dcl     key_one		 bit (I_key_len) unaligned based (I_key_one_ptr);
	dcl     key_two		 bit (I_key_len) unaligned based (I_key_two_ptr);

	goto k_compare (I_operator);

k_compare (1):					/* Operator:  =  */
	if key_one = key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

k_compare (2):					/* Operator:  >  */
	if key_one > key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

k_compare (3):					/* Operator:  >=  */
	if key_one >= key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

k_compare (5):					/* Operator:  ^=  */
	if key_one ^= key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

k_compare (6):					/* Operator:  <=  */
	if key_one <= key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

k_compare (7):					/* Operator:  <  */
	if key_one < key_two then O_result = "1"b;
	else O_result = "0"b;
	return;

     end key_compare;
%page;
/* * * * * * * * * * * * * * * *    get_tuple_tid   * * * * * * * * * * * * */

/* Gets a tid given the tuple pointer */

get_tuple_tid: proc (I_tuple_ptr, O_vf_desc);

	dcl     I_tuple_ptr		 ptr parameter;
	dcl     O_vf_desc		 fixed bin (35) parameter;

	tuple_ptr = I_tuple_ptr;

	bit_len = 9 * vrm_rel_desc.maximum_data_length;
	bd_ptr = addr (tuple.data);
	key_source_list.number_of_values = vrm_rel_desc.number_primary_key_attrs;

	do i = 1 to vrm_rel_desc.number_primary_key_attrs;/* copy out values and build key source list */
	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (vrm_open_info.primary_key_info_ptr ->
		vrm_collection_info.attribute (i).attr_index)); /* to attr info */
	     key_source_list.val_info.val_ptr (i) = addr (key_vals (i)); /* set source value ptr */
	     key_source_list.val_info.desc_ptr (i) = addr (vrm_attr_info.descriptor); /* and ptr to descr. */
	     if vrm_attr_info.varying then do;		/* if var. attr. */
		     offset = tuple.var_offsets (vrm_attr_info.bit_offset); /* bit offset */
		     key_source_list.val_info.val_ptr (i) = addr (bit_data (offset));
		end;				/* if varying */
	     else
		key_source_list.val_info.val_ptr (i) -> bit_str =
		     substr (data_str, vrm_attr_info.bit_offset, vrm_attr_info.bit_length);
	end;					/* building key source list */


	call vrmu_encode_key (addr (key_source_list), pgk.key, (0), code);
	if code ^= 0 then call error (code);

/* Now finish up the header on the primary key */

	index_ptr = addrel (addr (pgk.key), 1);		/* past length word of varying string */
	index_value_length = 0;			/* save warning flag */
	index.rel_id = vrm_rel_desc.rel_id;
	index.index_id = "0"b;

	unspec (pgk.flags) = "0"b;
	pgk.input_key = "1"b;
	pgk.flags.pspec.head_size = length (pgk.key);

	call iox_$control (vrm_cursor.iocb_ptr, "get_key", addr (pgk), code);
	if code ^= 0 then call error (code);

	O_vf_desc = pgk.descriptor;
	return;

     end get_tuple_tid;
%page;
/* * * * * * * * * * * * * *     and_group_constraints_ok   * * * * * * * * * * * */

and_group_constraints_ok: proc (and_group_ix) returns (bit (1));

	dcl     and_group_ix	 fixed bin parameter;

	ret_val = "0"b;

	if num_constraints > 0 then do;

		cons_ok = "1"b;

		do c = 1 to vrm_search_list.and_groups (and_group_ix).num_cons_in_this_and_group while (cons_ok);
		     check_it = "0"b;

		     if vrm_search_list.and_groups (and_group_ix).num_key_cons_in_this_and_group > 0 then do;
			     if ^vrm_search_list.and_groups (and_group_ix).cons (c).key_attr_sw then
				check_it = "1"b;
			end;
		     else check_it = "1"b;

		     if check_it then do;		/* Check this constraint */
			     if vrm_search_info.meter_sw then vrm_search_info.last_call_stats.non_key_compares =
				     vrm_search_info.last_call_stats.non_key_compares + 1;

			     compare_op = vrm_search_list.and_groups (and_group_ix).cons (c).operator;
			     spec_val_ptr = vrm_search_list.and_groups (and_group_ix).cons (c).val_ptr;
			     desc_ptr = vrm_search_list.and_groups (and_group_ix).cons (c).attr_desc_ptr;
			     fx = vrm_search_list.and_groups (and_group_ix).cons (c).attr_index;

			     if vrm_rel_desc.attr (fx).varying then /* Set pointer to attribute in tuple */
				tuple_attr_ptr =
				     add_bit_offset_ (addr (tuple.data),
				     tuple.var_offsets (vrm_rel_desc.attr (fx).bit_offset) - 1);

			     else tuple_attr_ptr =
				     add_bit_offset_ (addr (tuple.data), vrm_rel_desc.attr (fx).bit_offset - 1);
						/* Note that a -1 is needed because a bit_offset = 1 indicate
						   the first bit which is realy an off set of 0 */

			     call vrmu_compare_values (tuple_attr_ptr, desc_ptr, spec_val_ptr, desc_ptr,
				compare_op, cons_ok, code);
			     if code ^= 0 then call error (code);
			     if vrm_search_info.meter_sw & cons_ok then vrm_search_info.last_call_stats.non_key_hits =
				     vrm_search_info.last_call_stats.non_key_hits + 1;
			end;
		end;				/* END DO c =  1 to */

		if cons_ok then ret_val = "1"b;

	     end;					/* END if num_constrainsts > 0 */
	else ret_val = "1"b;			/* No search specification */
	return (ret_val);

     end and_group_constraints_ok;
%page;
/* * * * * * * * * * * *   key_seek_head   * * * * * * * * * * * * * * *  */


key_seek_head: proc;

	key_source_list.number_of_values = 0;
	seek_head_type = 0;				/* Until we know differnt */
	seek_head_key = kh_char_3;

	if vrm_search_list.and_groups (cur_ag).seek_key_con_ix ^= 0 then do;

		if vrm_search_list.and_groups (cur_ag).multi_attr_seek_head_sw then do;
			num_key_head_attrs = 0;

			do z = 1 to vrm_search_list.and_groups (cur_ag).num_key_cons_in_this_and_group;

			     if vrm_search_list.and_groups (cur_ag).cons (z).seek_head_sw then do;
				     num_key_head_attrs = num_key_head_attrs + 1;

				     shx = vrm_search_list.and_groups (cur_ag).cons (z).attr_position_in_key;
				     key_source_list.val_info (shx).val_ptr =
					vrm_search_list.and_groups (cur_ag).cons (z).val_ptr;
				     key_source_list.val_info (shx).desc_ptr =
					vrm_search_list.and_groups (cur_ag).cons (z).attr_desc_ptr;
				end;
			end;			/* END do z */

			key_source_list.number_of_values = num_key_head_attrs;
			call vrmu_encode_key (addr (key_source_list), temp_key, (0), code);
			if code ^= 0 then call error (code);

			key_ptr = addcharno (addr (temp_key), 7);
			key_len = length (temp_key) - 3;
		     end;

		else do;				/* key_source_list.number_of_values = 0 */
			shx = vrm_search_list.and_groups (cur_ag).seek_key_con_ix;

			key_ptr = vrm_search_list.and_groups (cur_ag).cons (shx).encoded_key_ptr;
			key_len = vrm_search_list.and_groups (cur_ag).cons (shx).encoded_key_length;
		     end;

		seek_head_key = seek_head_key || key;	/* seek_head_key already had the vrm_cursor.key_head prefix
		   for this cursor in it */


		if vrm_search_list.and_groups (cur_ag).cons (shx).operator = 1 then
		     seek_head_type = 0;
		else if vrm_search_list.and_groups (cur_ag).cons (shx).operator = 3 then
		     seek_head_type = 1;
		else seek_head_type = 2;

		if vrm_search_info.meter_sw then
		     vrm_search_info.last_call_stats.special_seek_heads =
			vrm_search_info.last_call_stats.special_seek_heads + 1;
	     end;

	else if vrm_search_info.meter_sw then
	     vrm_search_info.last_call_stats.seek_heads =
		vrm_search_info.last_call_stats.seek_heads + 1;


	seek_head.rel_type = seek_head_type;
	seek_head.num_head_chars = length (seek_head_key);
	seek_head.key_chars = seek_head_key;

	call iox_$control (iocb_ptr, "seek_head", addr (seek_head), code);
	if code ^= 0 then do;
		if code = error_table_$no_record | code = error_table_$no_key then
		     call error (dm_error_$no_tuple);
		else call error (code);
	     end;

	vrm_search_list.and_groups (cur_ag).must_initialize_sw = "0"b; /* We just did it */

     end key_seek_head;
%page;
/* * * * * * * * * * * * * * *   error    * * * * * * * * * * * * * * * */

error: proc (cd);

	dcl     cd		 fixed bin (35) parameter;

	O_code = cd;
	goto exit;

     end error;
%page;
%include vrm_cursor;
%page;
%include vrm_search_list;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include vrm_meter;
%page;
%include dm_element_id_list;
%page;
%include dm_typed_vector_list;
%page;
%include vrm_tuple;
%page;
%include vrm_search_info;
%page;
%include vrmu_scan_rec_next;
%page;
%include vrm_index;
%page;

	dcl     1 vsrn		 aligned like vrmu_scan_rec_next;


	dcl     1 gk,
		2 flags		 aligned,
		  3 input_key	 bit (1) unal,
		  3 input_desc	 bit (1) unal,
		  3 desc_code	 fixed bin (2) unal,
		  3 position_spec	 unal,
		    4 current	 bit (1) unal,	/* Want info about current index */
		    4 rel_type	 fixed bin (2) unal,
		    4 head_size	 fixed bin (9) unsigned unal,
		  3 reset_pos	 bit (1) unal,
		  3 mbz		 bit (8) unal,
		  3 version	 fixed bin (8) unal,
		2 desc		 fixed bin (35),
		2 key_len		 fixed bin,
		2 key		 char (256);

	dcl     key_templet_ptr	 ptr;

	dcl     1 key_templet	 based (key_templet_ptr),
		2 unused		 bit (12) unal,
		2 len		 fixed bin (23) unal,
		2 prefix		 char (3) unal,
		2 key_data	 char (253);

	dcl     1 tid		 aligned based (tid_ptr), /* MRDS tuple id (tid) */
		2 non_std_desc	 bit (1) unal,	/* Non-standard descriptor bit */
		2 temp		 bit (1) unal,	/* On if temp relation */
		2 file_id		 bit (7) unal,	/* File id from mrds db_model file_id_list */
		2 comp_num	 bit (10) unal,	/* Component number */
		2 offset		 bit (17) unal;	/* Offset within component */

	dcl     tid_ptr		 pointer;


	dcl     1 vfd		 aligned based (vfd_ptr), /* Vfile desc */
		2 pad_1		 bit (8) unal,
		2 comp_number	 bit (10) unal,	/* Component number */
		2 comp_offset	 bit (17) unal,	/* Offset with in component */
		2 pade_2		 bit (1) unal;

	dcl     vfd_ptr		 pointer;		/* Pointer to vfd structure */
%page;
	dcl     1 kh		 unaligned,	/* Key prefix head */
		2 rel_id		 bit (12) unaligned,
		2 index_id	 bit (8) unaligned,
		2 mbz		 bit (7) unaligned;

	dcl     kh_char_3		 char (3) based (addr (kh));

	dcl     1 seek_head,			/* Seek head info */
		2 rel_type	 fixed bin,
		2 num_head_chars	 fixed bin,
		2 key_chars	 char (256);



	dcl     1 pgk,				/* Primary get_key info Like gk_info */
		2 flags		 aligned,
		  3 input_key	 bit (1) unal init ("1"b),
		  3 input_desc	 bit (1) unal,
		  3 desc_code	 bit (3) unal,
		  3 pspec		 unal,
		    4 current	 bit (1) unal,
		    4 rel_type	 bit (3) unal,
		    4 head_size	 fixed bin (9) unsigned unal,
		  3 reset_pos	 bit (1) unal,
		  3 mbz		 bit (8) unal,
		  3 version	 bit (8) unal,
		2 descriptor	 fixed bin (35),
		2 key		 char (256) varying;

	dcl     1 key_source_list	 aligned,
		2 number_of_values	 fixed bin,	/* Number of attributes in primary key */
		2 val_info	 (253),		/* FROM vrm_data_$max_kattr_length
						it is uses as a constant because of performance */
		  3 val_ptr	 ptr,		/* Pointer to attr value */
		  3 desc_ptr	 ptr;		/* Pointer to attr desc */

%page;
	dcl     addbitno		 builtin;
	dcl     add_bit_offset_	 entry (ptr, fixed bin (24))
				 returns (ptr) reducible;
	dcl     addcharno		 builtin;
	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     bd_ptr		 ptr;
	dcl     bit_data		 (bit_len) bit (1) unal based (bd_ptr);
	dcl     bit_len		 fixed bin (35);
	dcl     bit_str		 bit (vrm_attr_info.bit_length) based;
	dcl     c			 fixed bin;
	dcl     check_it		 bit (1) aligned;
	dcl     code		 fixed bin (35);
	dcl     compare_op		 fixed bin;
	dcl     cons_ok		 bit (1) aligned;
	dcl     cur_ag		 fixed bin;
	dcl     data_str		 bit (bit_len) based (bd_ptr);
	dcl     dm_error_$no_tuple	 fixed bin (35) ext static;
	dcl     error_table_$asynch_deletion fixed bin (35) ext static;
	dcl     error_table_$end_of_info fixed bin (35) ext static;
	dcl     error_table_$no_key	 fixed bin (35) ext static;
	dcl     error_table_$no_record fixed bin (35) ext static;
	dcl     file_id		 bit (7) aligned;
	dcl     fx		 fixed bin;
	dcl     got_one		 bit (1);
	dcl     i			 fixed bin;
	dcl     tid_required	 bit (1) aligned;
	dcl     init_required	 bit (1) aligned;
	dcl     iocb_ptr		 ptr;
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     key		 char (key_len) based (key_ptr);
	dcl     key_len		 fixed bin;
	dcl     key_ptr		 ptr;
	dcl     key_vals		 (253) char (253);	/* to hold values so they are aligned */
	dcl     length		 builtin;
	dcl     max_items		 fixed bin (35);
	dcl     min		 builtin;
	dcl     null		 builtin;
	dcl     num_constraints	 fixed bin;
	dcl     num_key_head_attrs	 fixed bin;
	dcl     offset		 fixed bin (35);	/* temp attr offset */
	dcl     op		 fixed bin (17) unal;
	dcl     pointer_required	 bit (1) aligned;
	dcl     rec_len		 fixed bin (21);
	dcl     RELATION_COLLECTION_ID bit (36) int static options (constant) init ("111111111111111111111111111111111111"b);
	dcl     ret_val		 bit (1) aligned;
	dcl     scan_records_flag	 bit (1) aligned;
	dcl     seek_head_key	 char (256) varying;
	dcl     seek_head_type	 fixed bin;
	dcl     shx		 fixed bin;
	dcl     spec_val_ptr	 ptr;
	dcl     substr		 builtin;
	dcl     terminator_op	 (7) fixed bin int static options (constant) init (2, 0, 0, 0, 0, 2, 3);
	dcl     tuple_attr_ptr	 ptr;
	dcl     tuple_id		 bit (36) aligned;
	dcl     tuple_key_val_ptr	 ptr;
	dcl     unspec		 builtin;
	dcl     vfile_desc		 fixed bin (35) aligned;
	dcl     vrmu_compare_values	 entry (ptr, ptr, ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     vrmu_cv_vf_desc_to_ptr entry (ptr, fixed bin (35), ptr, fixed bin (21), fixed bin (35));
	dcl     vrmu_encode_key	 entry (ptr, char (256) varying, fixed bin (35), fixed bin (35));
	dcl     vrmu_scan_records$next entry (ptr, fixed bin (35));
	dcl     vrmu_scan_records$scan_records_init entry (ptr, fixed bin (35));
	dcl     temp_key		 char (256) varying;
	dcl     z			 fixed bin;

	dcl     desc_ptr		 ptr;


     end vrmu_search;
