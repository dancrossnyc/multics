/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_iocb_manager: proc (); return;

/* .		    BEGIN_DESCRIPTION

	This module provides a common location for creating and 
	destroying iocbs in the vfile_relmgr_ programs.

	Also manages the list of vrm_iocb_list_block where cursor iocbs
	are kept.

          There are 5 entry points:

          create_iocb for non-cursor use.

          destroy_iocb for non-cursor use.

          add_cursor_iocb
          destroy_cursor_iocb
          destroy_all_iocbs_for_oid

   .		    END_DESCRIPTION
*/

/* History

   82-11-16  R. Harvey: Initially written

   82-12-09 Modified by Roger Lackey : To added vrm_iocb_list_block handling

   83-06-21 Roger Lackey : Make sure that there is room for two iocb_ptrs in
   vrm_iocb_list_block, the cursor iocb_ptr and the secondary_iocb_ptr.

   83-10-04 Roger Lackey : added the initiazation of quit_signaled = "0"b
   and to free last block in list in destroy_all_iocb_for_oid

   84-10-22 Thanh Nguyen : Added looping three more times to open a relation
   in case of the heavy loaded system, and the relation is busy in the 
   subroutine attach_and_open.
*/
%page;
create_iocb: entry (I_rel_dir, I_rel_name, I_open_mode, I_stationary, I_caller_name, O_iocb_ptr, O_code);

/* This is for non-cursor type iocbs */

	dcl     I_rel_dir		 char (*) parameter;
	dcl     I_rel_name		 char (*) parameter;
	dcl     I_open_mode		 fixed bin parameter;
	dcl     I_stationary	 bit (1) aligned parameter;
	dcl     I_caller_name	 char (*) parameter;
	dcl     O_iocb_ptr		 ptr parameter;
	dcl     O_code		 fixed bin (35) parameter;

	atd = "vfile_ ";
	atd = atd || rtrim (I_rel_dir);
	atd = atd || ">";
	atd = atd || rtrim (I_rel_name);
	atd = atd || " -dup_ok -share ";
	atd = atd || ltrim (char (vrm_data_$max_vfile_wait_time));


	if I_stationary then
	     atd = atd || " -stationary";

	attach_desc = atd;

	call attach_and_open (I_caller_name, attach_desc, I_open_mode, O_iocb_ptr, O_code);
	return;
%page;
destroy_iocb: entry (I_di_iocb_ptr, O_code);

	dcl     I_di_iocb_ptr	 ptr parameter;

/* dcl O_code fixed bin (35) parameter;       error code declared else where */

	call delete_iocb (I_di_iocb_ptr, code);		/* Call internal proc to do the work */
	O_code = code;

	return;
%page;
/*  * * * * * * * * * * *     add_cursor_iocb    * * * * * * * * * * * *  */

add_cursor_iocb: entry (I_ac_cursor_ptr, O_code);


/* This entry point creates and opens an iocb and adds it to the list of iocbs
   for a specific open_id */

	dcl     I_ac_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor */

/* dcl O_code fixed bin (35) parameter;       error code declared else where */

	vrm_cursor_ptr = I_ac_cursor_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
	vrm_open_info_ptr = vrm_cursor.open_info_ptr;

	vrm_iocb_list_block_ptr = vrm_open_info.iocb_list_ptr;

	do while (vrm_iocb_list_block.next_block_ptr ^= null);

	     vrm_iocb_list_block_ptr = vrm_iocb_list_block.next_block_ptr;
	end;

/* We must make room for two iocbs_ptrs the cursor_iocb and the secondary_iocb_ptr 
  This procedure only attaches and opens the cursor iocb, 
  the secondary_iocb_ptr is set to null here
  and is attached and opened when needed by vrmu_search */

	if vrm_iocb_list_block.num_iocbs_used + 2 > vrm_data_$iocb_list_block_size then do;

		save_vrm_iocb_list_block_ptr = vrm_iocb_list_block_ptr;

		vrm_com_ptr = vrm_open_info.com_ptr;

		allocate vrm_iocb_list_block in (vrm_com.oid_area) set (vrm_iocb_list_block_ptr);

		quit_signaled = "0"b;
		on quit quit_signaled = "1"b;

		vrm_iocb_list_block.num_iocbs_used = 0;
		vrm_iocb_list_block.prev_block_ptr = save_vrm_iocb_list_block_ptr;
		vrm_iocb_list_block.next_block_ptr = null;
		vrm_iocb_list_block.iocbs = null;	/* Init all to null */
		save_vrm_iocb_list_block_ptr -> vrm_iocb_list_block.next_block_ptr =
		     vrm_iocb_list_block_ptr;

		revert quit;

		if quit_signaled then signal quit;
	     end;

	atd = "vfile_ ";
	atd = atd || rtrim (vrm_open_info.database_dir_path);
	atd = atd || ">";
	atd = atd || rtrim (vrm_open_info.relation_name);
	atd = atd || " -dup_ok -share ";
	atd = atd || ltrim (char (vrm_data_$max_vfile_wait_time));

	if vrm_rel_desc.switches.stationary_records then
	     atd = atd || " -stationary";

	attach_desc = atd;

	picture_opening_id = binary (vrm_cursor.opening_id);

	open_mode = KSQU;				/* Try KSQU first */

	call attach_and_open (".file_" || picture_opening_id, attach_desc, open_mode, iocb_ptr, code);

	if code = 0 then do;
		vrm_iocb_list_block.num_iocbs_used = vrm_iocb_list_block.num_iocbs_used + 1;
		vrm_iocb_list_block.iocbs (vrm_iocb_list_block.num_iocbs_used) = iocb_ptr;
		vrm_cursor.iocb_ptr = iocb_ptr;
		vrm_cursor.vrm_iocb_list_block_ptr =
		     vrm_iocb_list_block_ptr;
		vrm_cursor.vrm_iocb_list_block_iocbs_ix =
		     vrm_iocb_list_block.num_iocbs_used;

		vrm_iocb_list_block.num_iocbs_used = /* Because the secondatry_iocb_ptr goes in this slot */
		     vrm_iocb_list_block.num_iocbs_used + 1;
		vrm_cursor.opening_mode = open_mode;
	     end;

	O_code = code;
	return;

%page;
/*  * * * * * * * * * * * * *  destroy_cursor_iocb  * * * * * * * * * * * * */

destroy_cursor_iocb: entry (I_dc_cursor_ptr, O_code);

/* This entry point will destroy the iocbs associated with a particular cursor */


/* HISTORY: 
83-06-21 Roger Lackey added code to destroy the secondary iocb_ptr
*/

	dcl     I_dc_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor */

/* dcl O_code fixed bin (35) parameter;       error code declared else where */

	code = 0;

	vrm_cursor_ptr = I_dc_cursor_ptr;

	vrm_iocb_list_block_ptr = vrm_cursor.vrm_iocb_list_block_ptr;

	if vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix + 1) ^=
	     null then /* If vrm_cursor.secondary_iocb_ptr exists */
	     call delete_iocb (vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix + 1), code);

	vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix + 1) = null;

	vrm_cursor.secondary_iocb_ptr = null;

	if vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix) ^= null then
	     call delete_iocb (vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix), code);

	vrm_iocb_list_block.iocbs (vrm_cursor.vrm_iocb_list_block_iocbs_ix) = null;

	vrm_cursor.iocb_ptr = null;

	vrm_cursor.vrm_iocb_list_block_ptr = null;

	vrm_cursor.vrm_iocb_list_block_iocbs_ix = 0;

	O_code = code;

	return;					/* Return from destroy_cursor_iocb */

%page;
/* * * * * * * * * * * * * *   destroy_all_iocbs_for_oid   * * * * * * * *   */

destroy_all_iocbs_for_oid: entry (I_open_info_ptr, O_code);

/* The purpose of this entry is to destroy all the iocbs for a given opening_id */


	dcl     I_open_info_ptr	 ptr parameter;

/*        dcl O_code 		fixed bin (35) parameter;   Defined else where */

	vrm_open_info_ptr = I_open_info_ptr;
	O_code = 0;

	if vrm_open_info.iocb_list_ptr = null then return;/* Nothing to do */

	vrm_iocb_list_block_ptr = vrm_open_info.iocb_list_ptr;

	do while (vrm_iocb_list_block.next_block_ptr ^= null); /* Find last block */

	     vrm_iocb_list_block_ptr = vrm_iocb_list_block.next_block_ptr;
	end;

	code = 0;

delete_loop:
	do i = 1 to vrm_iocb_list_block.num_iocbs_used while (code = 0);

	     if vrm_iocb_list_block.iocbs (i) ^= null then
		call delete_iocb (vrm_iocb_list_block.iocbs (i), code);
	     vrm_iocb_list_block.iocbs (i) = null;
	end;

	if code = 0 & vrm_iocb_list_block.prev_block_ptr ^= null then do;
		save_vrm_iocb_list_block_ptr = vrm_iocb_list_block_ptr;
		vrm_iocb_list_block_ptr = save_vrm_iocb_list_block_ptr ->
		     vrm_iocb_list_block.prev_block_ptr;

		vrm_iocb_list_block.next_block_ptr = null;

		quit_signaled = "0"b;
		on quit quit_signaled = "1"b;
		free save_vrm_iocb_list_block_ptr -> vrm_iocb_list_block;
		revert quit;
		if quit_signaled then signal quit;

		goto delete_loop;
	     end;
	else do;					/* Last block (first in list) */
		quit_signaled = "0"b;
		on quit quit_signaled = "1"b;
		free vrm_iocb_list_block_ptr -> vrm_iocb_list_block;
		vrm_open_info.iocb_list_ptr = null;
		revert quit;
		if quit_signaled then signal quit;
	     end;

	O_code = code;

	return;					/* return from destroy_all_iocbs_for_oid */

%page;
/* * * * * * * * * * * * * * * * *   attach_and_open  * * * * * * * * * * *  */

attach_and_open: procedure (I_ao_caller_name, I_attach_desc, I_ao_open_mode, O_ao_iocb_ptr, O_ao_code);

	dcl     O_ao_code		 fixed bin (35) parameter;
	dcl     O_ao_iocb_ptr	 ptr parameter;
	dcl     I_ao_caller_name	 char (*) parameter;
	dcl     I_ao_open_mode	 fixed bin parameter;
	dcl     I_attach_desc	 char (*) parameter;
	dcl     count                  fixed bin (17);
	       

/* attach and open the data vfile, filling in the iocb pointer */

	call iox_$attach_name (unique_chars_ ("0"b) || I_ao_caller_name,
	     O_ao_iocb_ptr,
	     rtrim (I_attach_desc), null (), code);
	if code ^= 0
	then do;
		O_ao_iocb_ptr = null ();
		O_ao_code = code;
	     end;
	else do;
		open_mode = I_ao_open_mode;
		call iox_$open (O_ao_iocb_ptr,
		     open_mode, "0"b, code);
		if code = error_table_$moderr & open_mode = KSQU /* if not access to open with KSQU */
		then do;				/* try with just KSQR */
			open_mode = KSQR;		/* reduce mode and try again */
			call iox_$open (O_ao_iocb_ptr,
			     open_mode, "0"b, code);
		     end;

		/* Just in case the relation is busy by other process. */
		do count = 1 to 3 while (code = error_table_$file_busy);
		     call iox_$open (O_ao_iocb_ptr, open_mode, "0"b, code);
		end;

		if code = 0 then call iox_$position (O_ao_iocb_ptr, -1, /* Init position to BOF */
			0, code);

		if code ^= 0 then do;
			O_ao_code = code;
		     end;
		else O_ao_code = 0;
	     end;

	return;
     end attach_and_open;
%page;
/* * * * * * * * * * * *     delete_iocb   * * * * * * * * * * * * * * *  */

delete_iocb: proc (I_d_iocb_ptr, O_d_i_code);

	dcl     I_d_iocb_ptr	 ptr parameter;
	dcl     O_d_i_code		 fixed bin (35) parameter;

	call iox_$close (I_d_iocb_ptr, O_d_i_code);

	if O_d_i_code = 0 then do;
		call iox_$detach_iocb (I_d_iocb_ptr, O_d_i_code);

		if O_d_i_code = 0 then
		     call iox_$destroy_iocb (I_d_iocb_ptr, O_d_i_code);

	     end;

     end delete_iocb;
%page;
%include vrm_iocb_list_block;
%page;
%include vrm_cursor;
%page;
%include vrm_rel_desc;
%page;
%include vrm_open_info;
%page;
%include vrm_com;
%page;
/* Automatic */

	dcl     atd		 char (344) varying;
	dcl     attach_desc		 char (344);
	dcl     code		 fixed bin (35);
	dcl     save_vrm_iocb_list_block_ptr ptr;
	dcl     i			 fixed bin (24);
	dcl     iocb_ptr		 ptr;
	dcl     open_mode		 fixed bin;
	dcl     picture_opening_id	 pic "99999";
	dcl     quit_signaled	 bit (1);

/* Conditions */

	dcl     quit		 condition;

/* Builtin */

	dcl     (binary, char, ltrim, null, rtrim) builtin;

/* External entry */

	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));


/* External static */

	dcl    (error_table_$file_busy,
	        error_table_$moderr,
	        sys_info$max_seg_size,
	        vrm_data_$max_vfile_wait_time
	        )			 fixed bin (35) ext static;

	dcl     vrm_data_$iocb_list_block_size ext static fixed bin;

/* Internal static */

	dcl     KSQR		 fixed bin int static init (8) options (constant);
	dcl     KSQU		 fixed bin int static init (10) options (constant);





     end vrmu_iocb_manager;
