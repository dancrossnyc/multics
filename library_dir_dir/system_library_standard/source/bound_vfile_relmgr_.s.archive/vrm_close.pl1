/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_close: close: proc (I_rel_opening_id, O_code);

/* BEGIN_DESCRIPTION

 .          Close  the  opening  for   a  relation.   Free  any  storage
	associated with the opening.

*  END_DESCRIPTION */


/* History:

     82-08-20 R. Harvey: Initially written
     82-11-03 R. Harvey: Modified for open_info structure
     84-05-25 B. G. Moberg: Modified to not free the same structure twice

*/


/*	Parameters	*/

	dcl     I_rel_opening_id	 bit (36) aligned;
	dcl     O_code		 fixed bin (35);


	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, O_code);
	if O_code = 0 then do;
		vrm_open_info.number_of_openings = vrm_open_info.number_of_openings - 1;
		if vrm_open_info.number_of_openings < 1
		then do;
			vrm_com_ptr = vrm_open_info.com_ptr;
			call vrm_open_man$remove_opening (vrm_open_info.opening_id);
			call free_open_info (vrm_open_info_ptr);
		     end;
	     end;

	return;



release_open_info: entry (I_vrm_open_info_ptr);

	dcl     I_vrm_open_info_ptr	 ptr parameter;


	call free_open_info (I_vrm_open_info_ptr);

	return;
%page;
free_open_info: proc (I_voi_ptr);

	dcl     I_voi_ptr		 ptr parameter;

	dcl     i			 fixed bin;

	vrm_open_info_ptr = I_voi_ptr;
	if vrm_open_info_ptr ^= null () then do;	/* got something to free */
		vrm_com_ptr = vrm_open_info.com_ptr;
		if vrm_open_info.relation_model_ptr -> vrm_rel_desc.switches.MRDS_compatible
		then do;				/* collection_info structure(s) were allocated */

			free vrm_open_info.relation_model_ptr -> vrm_rel_desc in (vrm_com.oid_area);

/* Although it looks like the next statement should be done, this is never
   true because primary_key_info_ptr points at the same storage that
   index_collection (1).info_ptr points at.  Therefore, doing this statement
   results in freeing the same structure twice.  This statement is left
   here, but commented out so that no one will be tempted to add it later

			if vrm_open_info.primary_key_info_ptr ^= null ()
			then free vrm_open_info.primary_key_info_ptr -> vrm_collection_info in (vrm_com.oid_area);

  */

			do i = 1 to vrm_open_info.number_of_index_collections;
			     if vrm_open_info.index_collection (i).info_ptr ^= null ()
			     then free vrm_open_info.index_collection (i).info_ptr -> vrm_collection_info in (vrm_com.oid_area);
			end;
		     end;				/* collection_info structure(s) ... */

		call vrmu_iocb_manager$destroy_all_iocbs_for_oid (vrm_open_info_ptr, (0));

		free vrm_open_info in (vrm_com.oid_area);

	     end;					/* got something to do */

     end free_open_info;
%page;
%include vrm_open_info;
%page;
%include vrm_collection_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_com;
%page;
	dcl     (
	        addr,
	        fixed,
	        null,
	        rel
	        )			 builtin;

	dcl     vrmu_iocb_manager$destroy_all_iocbs_for_oid entry (ptr, fixed bin (35));
	dcl     vrm_open_man$get_open_info_ptr entry (bit (36) aligned, ptr, fixed bin (35));
	dcl     vrm_open_man$remove_opening entry (bit (36) aligned);

	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;



     end vrm_close;
