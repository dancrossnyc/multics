/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

get_tuple_by_id: proc (I_relation_cursor_ptr, I_element_id, I_id_list_ptr,
	I_return_area_ptr, O_simple_typed_vector_ptr, O_code);

/* .	    BEGIN_DESCRIPTION

     Get the value of the specified tuple.  The input specification must
     be converted to a value for vfile_. The record then retrieved from 
     the vfile must then be converted to a vector.

   .          END_DESCRIPTION		    */

/* History:

   82-08-23  R. Harvey:  Initially written.
   83-05-24 Roger Lackey: replaced call to record_status to get record_ptr
                          with call to vrmu_cv_vf_desc_to_ptr
   84-11-27 John Hergert: commented out code that locks file. There doesn't
   appear to be a reason for locking the file for a retrieve and it was
   causing numerous file_busy errors.
*/
%page;
/*	  Parameters	  */

	dcl     I_relation_cursor_ptr	 ptr;		/* Cursor of relation */
	dcl     I_element_id	 bit (36) aligned;	/* Tuple identifier of tuple to be retrieved */
	dcl     I_id_list_ptr	 ptr;		/* List of attribute numbers to be returned */
	dcl     I_return_area_ptr	 ptr;		/* User area for tuple and vector allocation */
	dcl     O_simple_typed_vector_ptr ptr;		/* The returned tuple as a vector */
	dcl     O_code		 fixed bin (35);


	O_code = 0;
	file_locked = "0"b;

	vrm_cursor_ptr = I_relation_cursor_ptr;

	on cleanup call tidy_up;

	call init_get;

	call process_one_tuple_id (I_element_id, I_id_list_ptr, O_simple_typed_vector_ptr, code);
	if code ^= 0 then call error (code);

	O_code = 0;

	if metering_sw then do;
		call cpu_time_and_paging_ (pf_2, t2, pf_dummy);
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;

Exit:	return;
%page;
get_tuples_by_id: entry (I_relation_cursor_ptr, I_element_id_list_ptr, I_id_list_ptr, I_return_area_ptr, O_simple_typed_vector_list_ptr, O_code);

/* Parameters */

	dcl     I_element_id_list_ptr	 ptr;		/* Tuple identifiers of tuples to be retrieved */
						/*	dcl     I_return_area_ptr	 ptr;	       */ /* User area for tuple and vector allocation */

/*	dcl     I_id_list_ptr	 ptr;	       */ /* List of attribute numbers to be returned */
/*	dcl     I_relation_cursor_ptr ptr;	       */ /* Cursor of relation */
	dcl     O_simple_typed_vector_list_ptr ptr;	/* The returned tuple as a vector */
						/*	dcl     O_code		 fixed bin (35); */


	O_simple_typed_vector_list_ptr = null;
	O_code = 0;
	file_locked = "0"b;

	on cleanup call tidy_up;

	on area call error (error_table_$noalloc);

	element_id_list_ptr = I_element_id_list_ptr;

	vrm_cursor_ptr = I_relation_cursor_ptr;

	call init_get;

	tvl_maximum_number_of_vectors = element_id_list.number_of_elements;
	allocate typed_vector_list in (return_area) set (typed_vector_list_ptr);
	O_simple_typed_vector_list_ptr = typed_vector_list_ptr;
	typed_vector_list.version = TYPED_VECTOR_LIST_VERSION_1;
	typed_vector_list.number_of_vectors = 0;

	do i = 1 to element_id_list.number_of_elements;

	     typed_vector_list.vector_ptr (i) = null ();	/* So it gets allocated properly... */
	     call process_one_tuple_id (element_id_list.id (i), I_id_list_ptr, typed_vector_list.vector_ptr (i), code);
	     if code ^= 0 then call error (code);
	     typed_vector_list.number_of_vectors = i;	/* Count stored pointers */
	end;

	O_code = 0;
	call tidy_up;

	return;

%page;
init_get: proc;

	if vrm_cursor.switches.meter_sw then do;

		call cpu_time_and_paging_ (pf_1, t1, pf_dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
		metering_sw = "1"b;
	     end;

	else metering_sw = "0"b;

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;
	vrm_com_ptr = vrm_open_info.com_ptr;
	if vrm_com.get_seg_ptr = null () then do;	/* Segment for vfile_ to store retrieved record */
		call get_temp_segment_ ("vrm_get_", vrm_com.get_seg_ptr, code);
		if code ^= 0 then call error (code);
		get_work_area = empty ();
	     end;

	vrm_cursor.switches.shared = vrm_open_info.switches.shared;


	iocb_ptr = vrm_cursor.iocb_ptr;

     end;
%page;
process_one_tuple_id: proc (tuple_id, id_list_ptr, simple_typed_vector_ptr, pcode);

	dcl     tuple_id		 bit (36) aligned parameter;
	dcl     simple_typed_vector_ptr ptr parameter;
	dcl     id_list_ptr		 ptr parameter;
	dcl     pcode		 fixed bin (35) parameter;


	vf_desc = 0;
	tid_ptr = addr (tuple_id);
	vfd_ptr = addr (vf_desc);

	vfd.comp_number = tid.comp_num;
	vfd.comp_offset = tid.offset;

/* No need to lock file when retrieving. This action causes many file busy
   errors returned to the user on a heavily used db.
	if vrm_cursor.switches.shared then do;
		if vrm_cursor.opening_mode = KSQU then call lock;
	     end;
*/
	call vrmu_cv_vf_desc_to_ptr (iocb_ptr, vf_desc, rec_ptr, rec_len, pcode);
	if pcode = 0 then do;
		vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
		call vrmu_cv_tuple_to_vector$simple_vector (rec_ptr,
		     I_return_area_ptr, id_list_ptr, vrm_rel_desc_ptr, simple_typed_vector_ptr, pcode);
		if metering_sw then
		     vrm_meter.last_call_stats.number_items_returned =
			vrm_meter.last_call_stats.number_items_returned + 1;
end;

/* If we dont lock earlier, no need to unlock now.
	if file_locked then call unlock;
*/
	return;

     end process_one_tuple_id;
%page;
error: proc (ecode);

	dcl     ecode		 fixed bin (35);

	if ecode = error_table_$no_record then
	     O_code = dm_error_$no_tuple_id;
	else O_code = ecode;

	call tidy_up;
	go to Exit;

     end;




tidy_up: proc;

/* File was never locked.
	if file_locked then call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), code);
*/
	if metering_sw then do;
		call cpu_time_and_paging_ (pf_2, t2, pf_dummy);
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;


     end tidy_up;
%page;
/* * * * * * * * * * * * * *     lock   * * * * * * * * * * * * * * * *  */

/* since we arent locking... no need for a lock routine.
lock: proc;

	call iox_$control (iocb_ptr, "set_file_lock", addr (LOCK), lock_err_code);
	if lock_err_code ^= 0 then call error (lock_err_code);

	file_locked = "1"b;

	if metering_sw then
	     vrm_meter.last_call_stats.number_times_locked =
		vrm_meter.last_call_stats.number_times_locked + 1;


     end lock;

*/





/* * * * * * * * * * * * * *     unlock   * * * * * * * * * * * * * * * *  */

/* Since we arent locking... no need for an unlock routine.
unlock: proc;

	if file_locked then do;
		call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), lock_err_code);
		if lock_err_code ^= 0 then call error (lock_err_code);
	     end;

	file_locked = "0"b;

     end unlock;
*/

%page;
/* External entries */
	dcl     vrmu_cv_tuple_to_vector$simple_vector entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     clock		 builtin;
	dcl     cpu_time_and_paging_	 entry (fixed bin, fixed bin (71), fixed bin);
	dcl     divide		 builtin;
	dcl     pf_1		 fixed bin;
	dcl     pf_2		 fixed bin;
	dcl     pf_dummy		 fixed bin;
	dcl     t1		 fixed bin (71);
	dcl     t2		 fixed bin (71);
	dcl     t3		 float bin (63);
	dcl     UNLOCK		 bit (2) aligned int static options (constant) init ("00"b);
	dcl     LOCK		 bit (2) aligned int static options (constant) init ("10"b);
	dcl     cleanup		 condition;
	dcl     file_locked		 bit (1);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));

/* External static */
	dcl     dm_error_$no_tuple_id	 fixed bin (35) ext static;
	dcl     error_table_$noalloc	 fixed bin (35) ext static;
	dcl     error_table_$no_record fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

/* Automatic */
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin (35);
	dcl     iocb_ptr		 ptr;
	dcl     KSQU		 fixed bin int static options (constant) init (10);
	dcl     lock_err_code	 fixed bin (35);

	dcl     rec_len		 fixed bin (21);
	dcl     rec_ptr		 ptr;
	dcl     vf_desc		 fixed bin (35) aligned;
	dcl     vrmu_cv_vf_desc_to_ptr entry (ptr, fixed bin (35), ptr, fixed bin (21), fixed bin (35));


/* Based */

	dcl     1 tid		 aligned based (tid_ptr), /* MRDS tuple id (tid) */
		2 non_std_desc	 bit (1) unal,	/* Non-standard descriptor bit */
		2 temp		 bit (1) unal,	/* On if temp relation */
		2 file_id		 bit (7) unal,	/* File id from mrds db_model file_id_list */
		2 comp_num	 bit (10) unal,	/* Component number */
		2 offset		 bit (17) unal;	/* Offset within component */

	dcl     tid_ptr		 pointer;


	dcl     1 vfd		 aligned based (vfd_ptr), /* Vfile desc */
		2 pad_1		 bit (8) unal,
		2 comp_number	 bit (10) unal,	/* Component number */
		2 comp_offset	 bit (17) unal,	/* Offset with in component */
		2 pade_2		 bit (1) unal;

	dcl     vfd_ptr		 pointer;		/* Pointer to vfd structure */
	dcl     metering_sw		 bit (1) aligned;
	dcl     return_area		 area based (I_return_area_ptr);
	dcl     get_work_area	 area (sys_info$max_seg_size) based (vrm_com.get_seg_ptr);
						/* Builtin */
	dcl     (addr, empty, fixed, null, rel) builtin;

/* Conditions */
	dcl     area		 condition;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_com;
%page;
%include dm_element_id_list;
%page;
%include dm_typed_vector_list;
%page;
%include vrm_meter;

     end get_tuple_by_id;
