/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

vrmu_encode_key: proc (key_source_list_ptr, key, key_bit_len, code);

/* NOTES:

   This procedure encodes one or more source values to form a key.  All
   supported data types (with the exception of complex data) are encoded in
   such a fashion that order is preserved.  This allows for range searching
   on the resulting index.
*/

/* HISTORY:

   Initially written by JA Weeldreyer -- July, 1978.

   6-sept-79 Davids: added the output parameter key_bit_len which is
   the actual number of bits used in the key.

   17-oct-79  Davids:  Changed  dcl  of  size  (length  of   varying
   attribute) to unaligned so that it can be based on a pointer that
   points into the middle of a word.

   18-oct-79 Davids: Simplified the encoding of varying  strings  so
   that  its  more  like  fixed  length  strings.  Also took out the
   internal byte alignment  of  character  strings  within  the  key
   string.

   28-nov-79 Davids: Modified so that a calculation of the number of
   bits  used by a varying character string is performed rather then
   relying on the length word of the string having been modified  to
   contain  the  number of bits rather then the number of characters
   (which wsa not done in all cases). Of course now the length  word
   better contain the number of chacaters for all cases.

   Modified  by  Jim  Gray  -  -  Dec.  1979,   to   add   call   to
   mu_data_class$scalar

   14-jan-80 Davids: Completely rewrote encoding code for fixed  and
   float decimal unaligned.

   14-jan-80 Davids: Changed types 12, 46, and 46 (all  complex)  so
   that  they  merely  copy  the  data  across  to  the key since no
   encoding is required (only equal and not equal are allowed).

   Modified  by  R.  Lackey  March  25,  1980  to  remove  calls  to
   mdbm_util_

   81-09-19 Davids: added the based unsigned fixed bin variable  fb8
   for  use  when  overlaying  the exponent sign and value bits in a
   float binary number, this prevents a size condition from occuring
   when the source exponent value is 0.

   82-09-17 R.  Harvey: Renamed and modified for use by vfile_relmgr

   84-05-25 B. G. Moberg: Added new entry point, compute_offset_and_length.
   Although this entry point shares no code with the rest of the routine,
   it was placed here because attribute lengths and offsets are calculated
   differently when there are parts of keys then anywhere else.  Therefore,
   it was felt that it would be much more clear if this different calculation
   was done in only one routine.

   84-05-30 B. G. Moberg: Changed the new entry point to also return the
   alignment as there is a case that needs this.
*/

/*  vrmu_encode_key: proc (key_source_list_ptr, key, key_bit_len, code);  */


	num_dims,
	     index_value_length = 0;
	len_ptr = addr (key);			/* initialize */
	index_ptr = addrel (len_ptr, 1);
	data_ptr = addr (index.index_value);
	max_bits = 2277;				/* <--------vfile_ keys can be a maximum 256
				  characters.  The first 3 chars of the
                                          key are rel_id, index_id, pad (see
                                          index structure).  That leaves 253
                                          characters of data (or 2277 bits)! 
                                          (quote from Noah Davids 10/04/83) */
	offset = 1;
	data_str = "0"b;

	do i = 1 to key_source_list.number_of_values;	/* encode each key attr. */
	     call encode_proc (key_source_list.val_info.val_ptr (i), key_source_list.val_info.desc_ptr (i));
	end;					/* encoding loop */

	index.mbz = "0"b;				/* finish the index */
	key_length = ceil (divide ((offset - 1), 9, 17, 17)) + 3; /* set key length in chars */
	key_bit_len = offset + 26;			/* <------offset contains the actual 
                                                number of bits that make up the
                                                encode key + 1.  Adding 26
                                                gives a bit length of encoded
                                                key + 3 characters.  See above
                                                comment for max_bits.
	                                            (ibid) */

	code = 0;

exit:
	return;

encode_attr: entry (ss_ptr, a_desc_ptr, encd_str, code);

/* entry to encode an arbitrary attribute value */

	offset = 1;				/* initialize */
	len_ptr = addr (encd_str);
	data_ptr = addrel (len_ptr, 1);
	max_bits = 9 * maxlength (encd_str);
	data_str = "0"b;
	call encode_proc (ss_ptr, a_desc_ptr);
	key_length = ceil (divide ((offset - 1), 9, 17, 17));
	code = 0;
	return;

compute_alignment_and_length: entry (ds_ptr, key_offset, key_alignment, key_attr_len);

	desc_ptr = ds_ptr;
	ovfl = 0;					/* most types need
no alignment */
	
	go to compute (descriptor.type);		/* go compute this value */

compute (1):					/* fixed bin short */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 35;
	len = p + 1;
	go to done;

compute (2):					/* fixed bin long */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 71;
	len = p + 1;
	go to done;

compute (3):					/* float bin short */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 27;
	len = p + 9;
	go to done;

compute (4):					/* float bin long */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 63;
	len = p + 9;
	go to done;

compute (5):					/* complex fixed bin short */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 1);
	else len = 72;
	go to done;

compute (6):					/* complex fixed bin long */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 1);
	else len = 144;
	go to done;


compute (7):					/* complex float bin short */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 9);
	else len = 72;
	go to done;

compute (8):					/* complex float bin long */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 9);
	else len = 144;
	go to done;

compute (9):					/* real fixed decimal */
	ovfl = mod (key_offset, 9);		/* byte align */
	p = fixed (descriptor.size.precision);
	len = 9 * (p + 1);
	go to done;

compute (10):					/* real float decimal */
	p = fixed (descriptor.size.precision);
	len = 9 * (p + 2);
	go to done;

compute (11):					/* complex fixed decimal */
	ovfl = mod (key_offset, 9);
	len = 18 * (fixed (descriptor.size.precision) + 1);
	go to done;

compute (12):					/* complex float decimal */
	p = fixed (descriptor.size.precision);
	len = 18 * (fixed (descriptor.size.precision) + 2);
	go to done;

compute (13):					/* unsupported types */
compute (14):
compute (15):
compute (16):
compute (17):
compute (18):
	len = 0;					/* This should never happen */
	go to done;

compute (19):					/* bit string */
	len = fixed (string (descriptor.size));
	go to done;

compute (20):					/* varying bit string */
	len = fixed (string (descriptor.size)) + 36;	/* length of attribute (36 for count word) */
	go to done;

compute (21):					/* char. string */
	len = 9 * fixed (string (descriptor.size));
	go to done;

compute (22):					/* varying char. string */
	len = 9 * fixed (string (descriptor.size)) + 36;	/* length (in bits) of attribute (36 for the count word) */
	go to done;

compute (23):					/* unsupported types */
compute (24):
compute (25):
compute (26):
compute (27):
compute (28):
compute (29):
compute (30):
compute (31):
compute (32):
compute (33):
compute (34):
compute (35):
compute (36):
compute (37):
compute (38):
compute (39):
compute (40):
compute (41):
compute (42):
	len = 0;					/* This should never happen */
	go to done;

compute (43):
	len = vrmu_data_length (desc_ptr -> descr_ovrly);
	go to done;

compute (44):
	len = vrmu_data_length (desc_ptr -> descr_ovrly);
	go to done;

compute (45):
	len = vrmu_data_length (desc_ptr -> descr_ovrly); /* complex float dec unal */
	go to done;

compute (46):
	len = vrmu_data_length (desc_ptr -> descr_ovrly); /* complex fixed dec unal */
	go to done;

done:
	key_attr_len = len;
	key_alignment = 0;
	if ovfl > 0 then key_alignment = 9 - ovfl;

	return;

encode_proc: proc (vp, dp);

/* procedure to do the actual encoding */

	dcl     j			 fixed bin (35);
	dcl     (vp, dp)		 ptr;
	dcl     valid_decimal_	 entry (fixed bin, ptr, fixed bin) returns (bit (1));
	declare vrmu_data_class$scalar entry (ptr) returns (bit (1) aligned);
	dcl     mdbm_error_$invalid_dec_data fixed bin (35) ext;

	val_ptr = vp;
	desc_ptr = dp;
	if ^(vrmu_data_class$scalar (desc_ptr)) then
	     call error (mdbm_error_$unsup_type);
	go to encode (descriptor.type);		/* go encode this value */

encode (1):					/* fixed bin short */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 35;
	call encode_fxb;
	go to next;

encode (2):					/* fixed bin long */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 71;
	call encode_fxb;
	go to next;

encode (3):					/* float bin short */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 27;
	call encode_flb;
	go to next;

encode (4):					/* float bin long */
	if descriptor.packed then p = fixed (descriptor.size.precision);
	else p = 63;
	call encode_flb;
	go to next;

encode (5):					/* complex fixed bin short */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 1);
	else len = 72;
	substr (data_str, offset, len) = val_ptr -> bit_str; /* no encoding for complex */
	offset = offset + len;
	go to next;

encode (6):					/* complex fixed bin long */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 1);
	else len = 144;
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (7):					/* complex float bin short */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 9);
	else len = 72;
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (8):					/* complex float bin long */
	if descriptor.packed then len = 2 * (fixed (descriptor.size.precision) + 9);
	else len = 144;
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (9):					/* real fixed decimal */
	ovfl = mod (offset - 1, 9);			/* byte align */
	if ovfl > 0 then offset = offset + 9 - ovfl;
	cp_ptr = addr (data_bits (offset));		/* point to current pos. */
	p = fixed (descriptor.size.precision);		/* will always pack */
	if fxd.sign = "+" then cp_ptr -> fxd.sign = "p";	/* change sign to preserve order */
	else cp_ptr -> fxd.sign = "n";
	if fxd.sign = "-" then /* if negative no, take 9's compl. */
	     do j = 1 to p;
		cp_ptr -> fxd.digit (j) = 9 - fxd.digit (j);
	     end;
	else do j = 1 to p;				/* if positive, just copy digits */
		cp_ptr -> fxd.digit (j) = fxd.digit (j);
	     end;
	offset = offset + 9 * (p + 1);
	go to next;

encode (10):					/* real float decimal */
	p = fixed (descriptor.size.precision);
	call encode_fld;
	offset = offset + 9 * (p + 2);
	go to next;

encode (11):					/* complex fixed decimal */
	ovfl = mod (offset - 1, 9);
	if ovfl > 0 then offset = offset + 9 - ovfl;	/* byte align */
	len = 18 * (fixed (descriptor.size.precision) + 1);
	substr (data_str, offset, len) = val_ptr -> bit_str; /* no encoding for complex */
	offset = offset + len;
	go to next;

encode (12):					/* complex float decimal */
	p = fixed (descriptor.size.precision);
	len = 18 * (fixed (descriptor.size.precision) + 2);
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (13):					/* unsupported types */
encode (14):
encode (15):
encode (16):
encode (17):
encode (18):
	call error (mdbm_error_$unsup_type);

encode (19):					/* bit string */
	len = fixed (string (descriptor.size));
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (20):					/* varying bit string */
	len = fixed (string (descriptor.size)) + 36;	/* length of attribute (36 for count word) */
	substr (data_str, offset, len) = "0"b;
	sz_ptr = val_ptr;				/* point to actual number of bits */
	val_ptr = addr (val_ptr -> data_bits (37));	/* point to actual string */
	substr (data_str, offset, size) = substr (val_ptr -> bit_str, 1, size);
	offset = offset + len;
	go to next;

encode (21):					/* char. string */
	len = 9 * fixed (string (descriptor.size));
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (22):					/* varying char. string */
	len = 9 * fixed (string (descriptor.size)) + 36;	/* length (in bits) of attribute (36 for the count word) */
	substr (data_str, offset, len) = "0"b;
	sz_ptr = val_ptr;				/* pointer to actual number of characters */
	no_bits = size * 9;
	val_ptr = addr (val_ptr -> data_bits (37));	/* pointer to actual string */
	substr (data_str, offset, no_bits) = substr (val_ptr -> bit_str, 1, no_bits);
	offset = offset + len;
	go to next;

encode (23):					/* unsupported types */
encode (24):
encode (25):
encode (26):
encode (27):
encode (28):
encode (29):
encode (30):
encode (31):
encode (32):
encode (33):
encode (34):
encode (35):
encode (36):
encode (37):
encode (38):
encode (39):
encode (40):
encode (41):
encode (42):
	call error (mdbm_error_$unsup_type);

encode (43):
	call encode_fxd4;				/* fixed dec unal */
	offset = offset + vrmu_data_length (desc_ptr -> descr_ovrly);
	go to next;

encode (44):
	call encode_fld4;				/* float dec unal */
	offset = offset + vrmu_data_length (desc_ptr -> descr_ovrly);
	go to next;

encode (45):
	len = vrmu_data_length (desc_ptr -> descr_ovrly); /* complex float dec unal */
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

encode (46):
	len = vrmu_data_length (desc_ptr -> descr_ovrly); /* complex fixed dec unal */
	substr (data_str, offset, len) = val_ptr -> bit_str;
	offset = offset + len;
	go to next;

next:
	if (offset - 1) > max_bits then /* if key has gotten too long */
	     call error (mdbm_error_$long_key);

encode_fxb: proc;

/* Procedure to encode fixed bin, merely flips sign bit */

	cp_ptr = addr (data_bits (offset));
	cp_ptr -> fxb.sign = ^fxb.sign;
	cp_ptr -> fxb.val = fxb.val;
	offset = offset + p + 1;

     end encode_fxb;


encode_flb: proc;

/* Procedure to encode float bin, merely transforms so that bit sort will
   order correctly. */

	cp_ptr = addr (data_bits (offset));
	flb_enc.msign = ^flb_src.msign;
	flb_enc.mval = flb_src.mval;
	if flb_src.msign = "1"b then /* if is neg. no */
	     addr (flb_enc.esign) -> fb8 = 128 - addr (flb_src.esign) -> fb8; /* compl. exp. */
						/* CHANGE 81-09-19 */
	else do;					/* positive, merely flip sign bit */
		flb_enc.esign = ^flb_src.esign;
		flb_enc.eval = flb_src.eval;
	     end;
	offset = offset + p + 9;

     end encode_flb;

encode_fld: proc;
	cp_ptr = addr (data_bits (offset));
	if ^valid_decimal_ (binary (descriptor.type), val_ptr, binary (descriptor.size.precision))
	then call error (mdbm_error_$invalid_dec_data);
	do j = 1 to p while (fld_src.digit (j) = 0);	/* scan for first non-zero digit */
	end;
	if j > p then do;				/* have zero value */
		fld_enc.msign = "p";
		fld_enc.esign,
		     fld_enc.epad,
		     fld_enc.eval = "0"b;
		do j = 1 to p;
		     fld_enc.digit (j) = 0;
		end;
	     end;					/* if have zero value */
	else do;					/* for non-zero values */
		power_delta = p - j + 1;		/* number to add to exponent */
		shift_delta = j - 1;		/* no. characters to shift */
		if addr (fld_src.esign) -> fb7 + power_delta > 127 then /* if will overflow */
		     call error (mdbm_error_$key_encd_ovfl);
		addr (fld_enc.esign) -> fb7 = addr (fld_src.esign) -> fb7 + power_delta;
		fld_enc.epad = "0"b;
		if fld_src.msign = "-" then do;	/* if negative no. */
			fld_enc.msign = "n";
			do j = 1 to p - shift_delta;	/* 9's compl. of signif. digits to front */
			     fld_enc.digit (j) = 9 - fld_src.digit (j + shift_delta);
			end;
			do j = p - shift_delta + 1 to p; /* fill in trailing 9's */
			     fld_enc.digit (j) = 9;
			end;
			addr (fld_enc.esign) -> fb7 = 128 - addr (fld_enc.esign) -> fb7; /* complement exp. so will sort right */
		     end;				/* if negative no. */
		else do;				/* if positive no. */
			fld_enc.msign = "p";
			do j = 1 to p - shift_delta;	/* move signif. digits to front */
			     fld_enc.digit (j) = fld_src.digit (j + shift_delta);
			end;
			do j = p - shift_delta + 1 to p; /* put in trailing 0's */
			     fld_enc.digit (j) = 0;
			end;
			fld_enc.esign = ^fld_enc.esign; /* flip sign bit so will sort right */
		     end;				/* if positive no. */
	     end;					/* if non-zero */
     end encode_fld;
%page;
/* Encoding algorithm for fixed and float decimal unaligned

   for a fixed data type just ignore rules about exponent.

   For negative numbers (sign = "1101"b)
   1. set sign to "0000"b
   2. copy sign of exponent
   3. copy complement of exponent
   4. copy complement of number

   For positive numbers 
   1. set sign to "1111"b
   2. copy number
   3. if number is zero
   a. set exponent to "0000000"b
   b. set sign of exponet to "0"b
   4. if number is not zero
   a. copy exponent
   b. copy sign of exponet

   Note: zero is normally stored as a positive number with the maximum possible
   exponent.
*/

encode_fxd4: proc;
	cp_ptr = addr (data_bits (offset));
	p = fixed (descriptor.size.precision);
	if mod (p, 2) = 1
	then do;
		digit_len = (divide ((p - 1), 2, 17, 0) * 9) + 4;
		if odd_fxd4_src.sign = "1101"b
		then do;
			odd_fxd4_enc.sign = "0000"b;
			odd_fxd4_enc.digits = ^(odd_fxd4_src.digits);
		     end;
		else do;
			odd_fxd4_enc.sign = "1111"b;
			odd_fxd4_enc.digits = odd_fxd4_src.digits;
		     end;
	     end;
	else do;
		digit_len = (divide (p, 2, 17, 0)) * 9;
		if even_fxd4_src.sign = "1101"b
		then do;
			even_fxd4_enc.sign = "0000"b;
			even_fxd4_enc.digits = ^(even_fxd4_src.digits);
		     end;
		else do;
			even_fxd4_enc.sign = "1111"b;
			even_fxd4_enc.digits = even_fxd4_src.digits;
		     end;
	     end;
     end encode_fxd4;
%page;
encode_fld4: proc;
	cp_ptr = addr (data_bits (offset));
	p = fixed (descriptor.size.precision);
	if mod (p, 2) = 1
	then do;
		digit_len = ((divide ((p - 1), 2, 17, 0)) * 9) + 4;
		if odd_fld4_src.sign = "1101"b
		then do;
			odd_fld4_enc.sign = "0000"b;
			odd_fld4_enc.esign = odd_fld4_src.exp.sign;
			odd_fld4_enc.exp = ^(odd_fld4_src.exp.exp);
			odd_fld4_enc.digits = ^(odd_fld4_src.digits);
		     end;
		else do;
			odd_fld4_enc.sign = "1111"b;
			odd_fld4_enc.digits = odd_fld4_src.digits;
			if odd_fld4_src.digits = "0"b
			then do;
				odd_fld4_enc.esign = "0"b;
				odd_fld4_enc.exp = "0"b;
			     end;
			else do;
				odd_fld4_enc.esign = ^(odd_fld4_src.exp.sign);
				odd_fld4_enc.exp = odd_fld4_src.exp.exp;
			     end;
		     end;
	     end;
	else do;
		digit_len = (divide (p, 2, 17, 0)) * 9;
		if even_fld4_src.sign = "1101"b
		then do;
			even_fld4_enc.sign = "0000"b;
			even_fld4_enc.esign = even_fld4_src.exp.sign;
			even_fld4_enc.exp = ^(even_fld4_src.exp.high) || ^(even_fld4_src.exp.low);
			even_fld4_enc.digits = ^(even_fld4_src.digits);
		     end;
		else do;
			even_fld4_enc.sign = "1111"b;
			even_fld4_enc.digits = even_fld4_src.digits;
			if even_fld4_src.digits = "0"b
			then do;
				even_fld4_enc.esign = "0"b;
				even_fld4_enc.exp = "0"b;
			     end;
			else do;
				even_fld4_enc.esign = ^(even_fld4_src.exp.sign);
				even_fld4_enc.exp = even_fld4_src.exp.high || even_fld4_src.exp.low;
			     end;
		     end;
	     end;
     end encode_fld4;

     end encode_proc;
%page;
error: proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;
	dcl     descr_ovrly		 bit (36) based unal;
	dcl     key		 char (256) var;	/* Output: encoded key */
	dcl     key_bit_len		 fixed bin (35);	/* Output: number of bits of encoded data in the key */
	dcl     key_alignment	 fixed bin (17);    /* Output: number of bits to add to offset to align */
	dcl     key_attr_len	 fixed bin (17);    /* Output: number of bits of encoded data in key attribute */
	dcl     key_offset		 fixed bin (17);	/* Input: Current offset in key - zero based */
	dcl     ds_ptr		 ptr;		/* Input: pointer to
descriptor */
	dcl     code		 fixed bin (35);	/* Output: status code */
	dcl     max_bits		 fixed bin (35);	/* max bits allowed in encoded string */

	dcl     (len_ptr,				/* pointer to length field of key */
	        val_ptr,				/* ptr to a source value */
	        data_ptr,				/* pointer to bit view of key */
	        cp_ptr,				/* pointer to current position in key */
	        ss_ptr,				/* Input:  to attr. string to be encoded */
	        a_desc_ptr,				/* Input:  to descriptor of input value */
	        sz_ptr)		 ptr;		/* ptr to length field of varying value */

	dcl     (i,				/* internal index */
	        ovfl,				/* no. overflow bits for aligning */
	        offset,				/* current bit position in key */
	        p,				/* precision of value */
	        len				/* bit length of value */
	        )			 fixed bin;

	dcl     data_str		 bit (max_bits) unal based (data_ptr); /* bit string view of key */
	dcl     data_bits		 (max_bits) bit (1) unal based (data_ptr); /* bit array view */
	dcl     key_length		 fixed bin (35) based (len_ptr); /* char. length of key */
	dcl     encd_str		 char (*) var;	/* Output:   encoded attr. value */
	dcl     bit_str		 bit (len) based;	/* template */
	dcl     (power_delta,			/* increase in exp. for normaliz. */
	        shift_delta)	 fixed bin (7);	/* no chars to shift for norm. */
	dcl     fb7		 fixed bin (7) based unal; /* template */
	dcl     fb8		 fixed bin (8) based unal unsigned; /* template */
	dcl     size		 fixed bin (35) unaligned based (sz_ptr); /* curr. len. of varying value */
	dcl     no_bits		 fixed bin (35) unaligned; /* number of bits in vary char attr. */

	dcl     1 fxb		 unal based (val_ptr), /* fixed bin template */
		2 sign		 bit (1) unal,
		2 val		 bit (p) unal;

	dcl     1 flb_src		 unal based (val_ptr), /* template for source float bin */
		2 esign		 bit (1) unal,
		2 eval		 bit (7) unal,
		2 msign		 bit (1) unal,
		2 mval		 bit (p) unal;

	dcl     1 flb_enc		 unal based (cp_ptr), /* template for encoded float bin */
		2 msign		 bit (1) unal,
		2 esign		 bit (1) unal,
		2 eval		 bit (7) unal,
		2 mval		 bit (p) unal;

	dcl     1 fxd		 unal based (val_ptr), /* template for fixed dec. */
		2 sign		 char (1) unal,
		2 digit		 (p) pic "9" unal;

	dcl     1 fld_src		 unal based (val_ptr), /* template for float dec source */
		2 msign		 char (1) unal,
		2 digit		 (p) pic "9" unal,
		2 epad		 bit (1) unal,
		2 esign		 bit (1) unal,
		2 eval		 bit (7) unal;

	dcl     1 fld_enc		 unal based (cp_ptr), /* template for float dec encoded */
		2 msign		 char (1) unal,
		2 epad		 bit (1) unal,
		2 esign		 bit (1) unal,
		2 eval		 bit (7) unal,
		2 digit		 (p) pic "9" unal;


	dcl     01 odd_fxd4_src	 based (val_ptr),
		02 pad1		 bit (1) unal,
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal;

	dcl     01 even_fxd4_src	 based (val_ptr),
		02 pad1		 bit (1) unal,
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal,
		02 pad2		 bit (4) unal;

	dcl     01 odd_fxd4_enc	 based (cp_ptr),
		02 pad1		 bit (1) unal init ("0"b),
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal;

	dcl     01 even_fxd4_enc	 based (cp_ptr),
		02 pad1		 bit (1) unal init ("0"b),
		02 pad2		 bit (4) unal init ("0"b),
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal;

	dcl     01 even_fld4_src	 based (val_ptr),
		02 pad1		 bit (1) unal,
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal,
		02 exp,
		  03 sign		 bit (1) unal,
		  03 high		 bit (3) unal,
		  03 pad2		 bit (1) unal,
		  03 low		 bit (4) unal,
		  03 pad3		 bit (4) unal;

	dcl     01 odd_fld4_src	 based (val_ptr),
		02 pad1		 bit (1) unal,
		02 sign		 bit (4) unal,
		02 digits		 bit (digit_len) unal,
		02 exp,
		  03 pad2		 bit (1) unal,
		  03 sign		 bit (1) unal,
		  03 exp		 bit (7) unal;

	dcl     01 odd_fld4_enc	 based (cp_ptr),
		02 pad1		 bit (1) unal init ("0"b),
		02 pad2		 bit (1) unal init ("0"b),
		02 sign		 bit (4) unal,
		02 esign		 bit (1) unal,
		02 exp		 bit (7) unal,
		02 digits		 bit (digit_len) unal;

	dcl     01 even_fld4_enc	 based (cp_ptr),
		02 pad1		 bit (1) unal init ("0"b),
		02 pad2		 bit (1) unal init ("0"b),
		02 pad3		 bit (4) unal init ("0"b),
		02 sign		 bit (4) unal,
		02 esign		 bit (1) unal,
		02 exp		 bit (7) unal,
		02 digits		 bit (digit_len) unal;

	dcl     digit_len		 fixed bin;


	dcl     (mdbm_error_$unsup_type,
	        mdbm_error_$long_key,
	        mdbm_error_$key_encd_ovfl) fixed bin (35) ext;

	dcl     (addr,
	        addrel,
	        binary,
	        divide,
	        fixed,
	        substr,
	        mod,
	        string,
	        maxlength,
	        ceil)		 builtin;

	dcl     vrmu_data_length	 entry (bit (36)) returns (fixed bin (35));

%page;
%include mdbm_descriptor;
%include vrm_index;
%include vrm_key_source_list;


     end vrmu_encode_key;
