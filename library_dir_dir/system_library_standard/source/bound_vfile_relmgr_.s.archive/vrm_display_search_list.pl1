/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* This program will display a vrm_search_list */

/* History:
   05/14/83 Lackey : Originally written
   05/19/83 Harvey : Added name output for better debugging
   83-08-17 Roger Lackey : Modified to use vrm_cursor_ptr as input parameter

*/

vrm_display_search_list: vdsl: proc;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then call error (code, "Getting nargs");

	if nargs ^= 1 then call error (error_table_$wrong_no_of_args,
		"Usage: vrm_display_search_list   virtual_vrm_cursor_ptr");

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then call error (code, "Getting arg_ptr");

	vrm_cursor_ptr = cv_ptr_ (arg, code);
	if code ^= 0 then call error (code, "Converting pointer value ");

	vrm_search_list_ptr = vrm_cursor.search_list_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;

	if vrm_rel_desc_ptr = null () then attr_names_available = "0"b;
	else attr_names_available = "1"b;

	goto common;



subroutine: entry (I_vrm_cursor_ptr);


	dcl     I_vrm_cursor_ptr	 ptr parameter;

	vrm_cursor_ptr = I_vrm_cursor_ptr;
	vrm_search_list_ptr = vrm_cursor.search_list_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
	if vrm_rel_desc_ptr = null ()
	then attr_names_available = "0"b;
	else attr_names_available = "1"b;

	goto common;
%page;
common:
	vrm_open_info_ptr = vrm_cursor.open_info_ptr;


	call ioa_ ("^2d^5tnum_and_groups", vrm_search_list.num_and_groups);
	call ioa_ ("^2d^5tmax_num_constraints^/", vrm_search_list.max_num_constraints);

	do ag = 1 to vrm_search_list.num_and_groups;

	     if vrm_search_list.and_groups (ag).do_not_use_sw then
		call ioa_ ("^5tDo not use this and group.");

	     if vrm_search_list.and_groups (ag).must_initialize_sw then
		call ioa_ ("^5tMust initialize this and group.");

	     if vrm_search_list.and_groups (ag).full_key_equal_only_sw then
		call ioa_ ("^5tFull_key_equal_only.");

	     if vrm_search_list.and_groups (ag).multi_attr_seek_head_sw then

		call ioa_ ("^5tMulti_attr_seek_head.");

	     if vrm_search_list.and_groups (ag).collection_id_supplied_sw then do;
		     found = "0"b;

		     if vrm_search_list.and_groups (ag).collection_id = THIRTY_SIX_BITS_ALL_OF_THEM_ONES then
			collection_name = "RECORD COLLECTION";
		     else if vrm_search_list.and_groups (ag).collection_id = "0"b then collection_name = "PRIMARY KEY";

		     else do i = 1 to vrm_open_info.number_of_index_collections while (^found);
			     if vrm_search_list.and_groups (ag).collection_id =
				vrm_open_info.index_collection (i).id then do;
				     found = "1"b;
				     vrm_collection_info_ptr = vrm_open_info.index_collection (i).info_ptr;

				     collection_name = vrm_rel_desc.attr (vrm_collection_info.attribute (1).attr_index).name;

				end;
			end;

		     call ioa_ ("^5tCollection id supplied:          ^a^/", collection_name);
		end;

	     call ioa_ ("^2d^5tnum_cons_in_this_and_group", vrm_search_list.and_groups (ag).num_cons_in_this_and_group);
	     call ioa_ ("^2d^5tnum_key_cons_in_this_and_group", vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group);
	     if vrm_search_list.and_groups (ag).num_seek_key_attr_count > 0 then do;
		     call ioa_ ("^2d^5tnum_seek_key_attr_count",
			vrm_search_list.and_groups (ag).num_seek_key_attr_count);
		end;


	     call ioa_ ("");

	     do c = 1 to vrm_search_list.and_groups (ag).num_cons_in_this_and_group;

		if vrm_search_list.and_groups (ag).cons (c).key_attr_sw then do;

			call convert_to_char (vrm_search_list.and_groups (ag).cons (c).attr_desc_ptr,
			     vrm_search_list.and_groups (ag).cons (c).val_ptr);

			if vrm_search_list.and_groups (ag).cons (c).seek_head_sw then
			     seek_head = "SEEK_HEAD";
			else seek_head = "";

			if vrm_search_list.and_groups (ag).cons (c).and_group_search_terminator then
			     and_group_terminator = "AND GROUP SEARCH TERMINATOR";
			else and_group_terminator = "";

			call ioa_ ("^a^34t^a   ^a   ^a",
			     vrm_rel_desc.attr (vrm_search_list.and_groups (ag).cons (c).attr_index).name,
			     OP (vrm_search_list.and_groups (ag).cons (c).operator),
			     seek_head, and_group_terminator);

			call ioa_ ("KEY VALUE^25t^a^/", char_string);
		     end;
		else if vrm_search_list.and_groups (ag).cons (c).valid_sw then do;
			call convert_to_char (vrm_search_list.and_groups (ag).cons (c).attr_desc_ptr,
			     vrm_search_list.and_groups (ag).cons (c).val_ptr);

			call ioa_ ("^a^34t^a",
			     vrm_rel_desc.attr (vrm_search_list.and_groups (ag).cons (c).attr_index).name,
			     OP (vrm_search_list.and_groups (ag).cons (c).operator));
			call ioa_ ("NON-KEY VALUE^25t^a^/", char_string);
		     end;

	     end;
	end;					/* END ag = 1 to * */


exit:	return;
%page;
error: proc (cd, msg);

	dcl     cd		 fixed bin (35) parameter;
	dcl     com_err_		 entry () options (variable);
	dcl     msg		 char (*) parameter;

	call com_err_ (cd, "vrm_display_search_list", msg);
	goto exit;

     end error;
%page;
convert_to_char: proc (I_desc_ptr, I_data_ptr);

	dcl     I_data_ptr		 ptr unal parameter;
	dcl     I_desc_ptr		 ptr unal parameter;

	desc_ptr = I_desc_ptr;
	data_ptr = I_data_ptr;

	num_dims = fixed (desc_ptr -> descriptor.number_dims, 3);


	t_ptr = addr (char_string);
	t_type = 44;				/* Character varying */
	t_len = 1024;

	s_ptr = data_ptr;
	s_type = 2 * desc_ptr -> descriptor.type + fixed (desc_ptr -> descriptor.packed, 1);
	len.scale = fixed (desc_ptr -> descriptor.size.scale, 17);
	len.precision = fixed (desc_ptr -> descriptor.size.precision, 17);

	call assign_ (t_ptr, t_type, t_len, s_ptr, s_type, s_len);

	char_string = """" || char_string;
	char_string = char_string || """";


	return;

	dcl     (t_ptr, s_ptr, data_ptr) ptr;
	dcl     (t_type, s_type)	 fixed bin;
	dcl     t_len		 fixed bin (35);

	dcl     1 len		 aligned,
		2 scale		 fixed bin (17) unal,
		2 precision	 fixed bin (17) unal;

	dcl     s_len		 fixed bin (35) based (addr (len));

	dcl     assign_		 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));

	dcl     (addr, fixed)	 builtin;

%page;
%include mdbm_descriptor;
     end convert_to_char;
%page;
%include vrm_search_list;
%page;
%include vrm_rel_desc;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vrm_collection_info;
%page;
	dcl     THIRTY_SIX_BITS_ALL_OF_THEM_ONES
				 bit (36) int static options (constant)
				 init ((36)"1"b);
	dcl     OP		 (7) char (2) int static options (constant) init (
				 " =", " >", ">=", " ^", "^=", "<=", " <");
%page;
	dcl     ag		 fixed bin;
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     attr_names_available	 bit (1) aligned;
	dcl     c			 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_ptr_		 entry (char (*), fixed bin (35)) returns (ptr);
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext static;
	dcl     ioa_		 entry () options (variable);
	dcl     nargs		 fixed bin;
	dcl     char_string		 char (1024) varying;
	dcl     and_group_terminator	 char (32);
	dcl     seek_head		 char (20);
	dcl     null		 builtin;
	dcl     collection_name	 char (32);
	dcl     found		 bit (1);
	dcl     i			 fixed bin;

     end vrm_display_search_list;
