/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

vrmu_build_index_list: proc (vrm_rel_desc_ptr, vrm_open_info_ptr, tuple_ptr, change_bits_ptr, key_list_ptr, code);

/* NOTES:

   This procedure builds a list of indexes to be added or deleted from a tuple.
*/

/* HISTORY:

   Initially written by JA Weeldreyer -- July, 1978.
   6-sept-79 Davids: Modified to accommodate a change to vrmu_encode_key calling sequence
   18-oct-79 modified to correctly calculate the lengths of varying strings.
   28-nov-79 Davids: Removed calculation of length (in bits) of varying strings
   so that length word will consistantly contain the number of bits or characters
   (depending on data type) throughtout MRDS (i hope).
   8-may-80  Davids:  modified  assignments  of  tuple_num_atts  and
   tuple_nvar_atts  to  take  values from rm_rel_info.model_num_attr
   and  model_nvar_atts   rather   than   rm_rel_info.num_attr   and
   nvar_atts.  This  was  to  fix  a problem with submodels were the
   submodel view did not contain a varying string attribute and  the
   model did.

   Modified by Jim Gray - - June 1980, to make kl_ptr and input parameter,
   so that the calling routine could decide if the same space for key_list
   could be reused, which previously limited large modify operations.

   81-05-29 Jim Gray : changed to use new resultant structure.

   82-09-17 R. Harvey: Renamed from mu_build_indl and modified for use
   by vfile_relmgr_.

*/
%page;
	index_value_length,
	     num_dims = 0;				/* This was part of descriptor... */

	data_ptr = addr (tuple.data);

	ksl_number_of_values, kl_number_of_keys = vrm_rel_desc.number_sec_indexes; /* set up the key list */

	key_list.number_of_keys = 0;
	cb_number_of_change_bits = vrm_rel_desc.number_attrs;


	key_source_list_ptr = addr (local_ksl);		/* init for doing sec. indexes */
	key_source_list.number_of_values = 1;
	kv_ptr = addr (local_kv);

	do i = 1 to vrm_open_info.number_of_index_collections; /* for every secondary index */

	     vrm_collection_info_ptr = vrm_open_info.index_collection (i).info_ptr;
	     attr_no = vrm_collection_info.attribute (1).attr_index;
	     if change_bits.position (attr_no) then do;
		     call add_key_source_list_item (1, addr (vrm_rel_desc.attr (attr_no)));
		     call make_key_list_entry (vrm_collection_info.id);
		     key_list.key_info.item_index (key_list.number_of_keys) = i; /* fill in index info */
		     key_list.key_info.cand_key (key_list.number_of_keys),
			key_list.key_info.unique_val (key_list.number_of_keys) = "0"b;
		end;				/* if index changed */

	end;					/* adding secondary indexes */

	code = 0;

exit:
	return;
%page;
add_key_source_list_item: proc (ind, raip);

/* Procedure to add item to key source list */

	dcl     ind		 fixed bin;
	dcl     raip		 ptr;
	dcl     bit_str		 bit (raip -> vrm_attr_info.bit_length) based;


	desc_ptr = addr (raip -> vrm_attr_info.descriptor);
	key_source_list.val_info.val_ptr (ind) = addr (key_vals (ind));
	key_source_list.val_info.desc_ptr (ind) = desc_ptr;
	if raip -> vrm_attr_info.varying then do;	/* move in var. len. attr */
		offset = tuple.var_offsets (raip -> vrm_attr_info.bit_offset);
		key_source_list.val_info.val_ptr (ind) = addr (bit_data (offset));
	     end;					/* moving var. */
	else /* moving fixed length */
	     key_source_list.val_info.val_ptr (ind) -> bit_str = substr (data_str, raip -> vrm_attr_info.bit_offset,
		raip -> vrm_attr_info.bit_length);

     end add_key_source_list_item;
%page;
make_key_list_entry: proc (ind_id);

/* Procedure to ad entry to key list */

	dcl     ind_id		 bit (8) unal;

	key_list.number_of_keys = key_list.number_of_keys + 1;
	call vrmu_encode_key (key_source_list_ptr, key_list.key_info.key (key_list.number_of_keys), not_used, icode);
	if icode ^= 0 then call error (icode);
	index_ptr = addr (key_list.key_info.vf_info.key (key_list.number_of_keys));
	index_ptr = addrel (index_ptr, 1);		/* get past length */
	index.index_id = ind_id;
	index.rel_id = vrm_rel_desc.rel_id;
	key_list.key_info.vf_info.input_key (key_list.number_of_keys) = "1"b;
	key_list.key_info.vf_info.input_desc (key_list.number_of_keys) = "0"b;

     end make_key_list_entry;
%page;
error: proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include vrm_tuple;
%page;
%include mdbm_descriptor;
%include vrm_index;
%include vrm_key_list;
%include vrm_key_source_list;
%include vrm_change_bits;
%page;
	dcl     (data_ptr,				/* pointer to tuple.data */
	        kv_ptr)		 ptr;		/* pointer to aligned key source values */

	dcl     i			 fixed bin;	/* internal index */

	dcl     attr_no		 fixed bin;	/* temporary attribute index */

	dcl     (code,				/* Output: status code */
	        icode,				/* internal status code */
	        offset)		 fixed bin (35);	/* bit position within tuple.data */

	dcl     key_vals		 (ksl_number_of_values) char (vrm_data_$max_kattr_length) based (kv_ptr); /* to hold values so they are aligned */
	dcl     local_kv		 (4, vrm_data_$max_kattr_length / 8) fixed bin (71); /* to avoid allocations */
	dcl     1 local_ksl		 aligned,		/* to avoid allocations */
		2 nvals		 fixed bin,
		2 val_info	 (4) like key_source_list.val_info;
	dcl     bit_data		 (vrm_rel_desc.maximum_data_length * 9) bit (1) unal based (data_ptr); /* array view of tupe.data */
	dcl     data_str		 bit (vrm_rel_desc.maximum_data_length * 9) based (data_ptr); /* string view */


	dcl     vrm_data_$max_kattr_length ext fixed bin (35);


	dcl     (addr,
	        addrel,
	        substr)		 builtin;

	dcl     not_used		 fixed bin (35);	/* parameter to vrmu_encode_key, not used by this routine */
	dcl     vrmu_encode_key	 entry (ptr, char (256) var, fixed bin (35), fixed bin (35));



     end vrmu_build_index_list;
