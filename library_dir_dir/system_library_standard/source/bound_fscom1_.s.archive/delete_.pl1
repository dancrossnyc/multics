/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-07-30,Bubric), approve(90-07-30,MCR8185), audit(90-09-12,Vu),
     install(90-09-20,MR12.4-1026):
     Fix delete_$path to handle extended objects which are directories.
  2) change(92-09-24,Vu), approve(92-09-24,MCR8266), audit(92-09-24,Zimmerman),
     install(92-10-06,MR12.5-1025):
     Fixed dl command for deleting forum.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

delete_$path:
     procedure (dirname, entryname, a_switches, caller, code);

/* The delete_ subroutine takes care of deleting branches and unlinking links.  It
   can ask questions if access is incorrect to the segment, and attempt to force delete access.

   The path entry is called with the pathname of the thing to be deleted or unlinked.
   The switches argument tells delete_ what it is to do:

   1. force_sw      If ON, delete_ attempts to delete protected
   .                as well as unprotected entries.
   2. question_sw   If ON and force_sw is OFF, delete_ queries the user
   .                about deleting protected entries. If force_sw is ON
   .                and ename refers to a directory, delete_ prints a
   .                message for each entry under that directory that
   .                cannot be deleted.
   3. directory_sw  A directory can be deleted only if ON.
   4. segment_sw    A segment can be deleted only if ON.
   5. link_sw       A link can be unlinked only if ON.
   6. chase_sw      If ON, delete_ deletes through links.
   7. lib_sw        If ON, calls through installation_tools_.
   8. raw_sw        If ON, delete_$path calls hcs_ and not object_type_.

   Initially coded April 1972 by Dan Bricklin.
   Modified on November 1972 by E. Stone for new directory control
   Modified on Jan 1974 by E. Stone to reflect that error_table_$moderr not returned from delentry
   Modified on May 15, 1974 by Kobziar to delete initiate acl if seg not deleted.
   Modified on Oct 1, 1974 by J. Whitmore to attempt to delete a directory before calling del_dir_tree also
   to correct a bad error code if the ptr entry is called with a null pointer.
   Modified on 8/27/75 to prevent infinite delete_again, etc. loops.
   Modified April 1976 by Larry Johnson for master directories.
   Modified Oct 4, 1979 by M. Pierret to skip unnecessary calls to term_$nomakeunknown.
   Modified to work on mailboxes and queues 03/28/80 S. Herbst
   Modified 30 June 1980 by G. Palter to make delete_$path not loop on inner ring segments and make delete_$ptr work again
   Modified 21 October 1980 by G. Palter to not loop on inner ring segments with names shorter than 4 characters
   Modified 01/17/83 by S. Herbst to recognize et_$action_not_performed fom dl_handler_
   Modified 1/26/83 Jay Pattin for object_type_, added raw_sw
   Modified 3/15/83 Jay Pattin to terminate segments when user answers no to "delete?" query
   Modified 830927 BIM for object_type_ --> fs_util_.
   Modified 831022 BIM to fix bug in descriptor checking for bit (6).
   Modified 831027 BIM to never terminate until after checking safety switch.
   Modified 840626 to suppress ssw/copysw query when force-deleting dir.
   Modified 841119 MAP to generate all abs pathnames by using pathname_.
   Modified 841203 Matthew Pierret: to not delete a directory which contains
   a protected data management file if a transaction is in
   progress.  This is because deletion of dm files is delayed
   until the transaction commits.
   Modified 850124 Steve Herbst to call hcs_$get_segment_ptr_path rather
	than initiate a segment.
   Modified 850206 Keith Loepere for correct error code $moderr instead of
	$incorrect_access from hcs_$star_.
*/

	dcl     a_switches		        bit (36) aligned;
	dcl     all		        fixed bin (2) init (3);
	dcl     bitcount		        fixed bin (24);
	dcl     caller		        char (*);
	dcl     code		        fixed bin (35);
	dcl     com_err_		        entry options (variable);
	dcl     delete_$path	        entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
	dcl     directory_contents_code       fixed bin (35);
	dcl     dirname		        char (*);
	dcl     dl_handler_$switches	        entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     dname		        char (168);
	dcl     ecount		        fixed bin;
	dcl     ename		        char (32);
	dcl     entryname		        char (*);
	dcl     eptr		        pointer;
	dcl     etype		        bit (2);
	dcl     fs_util_type	        char (32);
	dcl     get_group_id_$tag_star        entry returns (char (32) aligned);
	dcl     get_system_free_area_	        entry returns (ptr);
	dcl     path_entry		        bit (1);
	dcl     fs_util_$get_type	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     fs_util_$delentry_file        entry (character (*), character (*), fixed binary (35));

	dcl     hcs_$add_dir_acl_entries      entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$delentry_file	        entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$fs_get_path_name	        entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$get_link_target	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_safety_sw_seg        entry (pointer, bit (1) aligned, fixed bin (35));
	dcl     hcs_$get_segment_ptr_path     entry (char (*), char (*), ptr, bit (36) aligned, fixed bin (35));
	dcl     hcs_$lv_attached	        entry (bit (36) aligned, fixed bin (35));
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     hcs_$status_long	        entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     installation_tools_$delentry_file
				        entry (char (*), char (*), fixed bin (35));
	dcl     i			        fixed bin;
	dcl     init_acl_sw		        bit (1) aligned init ("0"b);
	dcl     mdc_$delete_dir	        entry (char (*), char (*), fixed bin (35));
	dcl     name		        char (32);
	dcl     nptr		        pointer;
	dcl     operation		        char (6);
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));
	dcl     pname		        char (168);
	dcl     safety_switch	        bit (1) aligned;
	dcl     segp		        ptr;
	dcl     segptr		        ptr;
	dcl     term_$seg_ptr	        entry (pointer, fixed binary (35));
	dcl     type		        fixed bin (2);

	dcl     error_table_$action_not_performed
				        ext fixed bin (35);
	dcl     error_table_$copy_sw_on       ext fixed bin (35);
	dcl     dm_error_$delete_pending_transaction
				        ext fixed bin (35);
	dcl     error_table_$dirseg	        ext fixed bin (35);
	dcl     error_table_$fulldir	        ext fixed bin (35);
	dcl     error_table_$incorrect_access ext fixed bin (35);
	dcl     error_table_$invalidsegno     ext fixed bin (35);
	dcl     error_table_$master_dir       ext fixed bin (35);
	dcl     error_table_$moderr	        ext fixed bin (35);
	dcl     dm_error_$no_delete_dir_transaction
				        ext fixed bin (35);
	dcl     error_table_$nondirseg        ext fixed bin (35);
	dcl     error_table_$not_a_branch     ext fixed bin (35);
	dcl     error_table_$safety_sw_on     ext fixed bin (35);


	dcl     (addr, fixed, null, rtrim, string, substr)
				        builtin;


	dcl     1 dir_acl		        aligned,
		2 userid		        char (32),
		2 mode		        bit (36),
		2 status		        fixed bin (35);

	dcl     1 entries		        (ecount) aligned based (eptr),
		2 type		        bit (2) unaligned,
		2 nnames		        bit (16) unaligned,
		2 nindex		        bit (18) unaligned;

	dcl     names		        (1000) char (32) aligned based (nptr);


	dcl     1 lbranch		        aligned,	/* structure returned by status_long */
		2 type		        bit (2) unaligned,
		2 nnames		        fixed bin (15) unaligned,
		2 nrp		        bit (18) unaligned,
		2 dtm		        bit (36),
		2 dtu		        bit (36),
		2 mode		        bit (5) unaligned,
		2 raw_mode	        bit (5) unaligned,
						/* raw mode from acl entry */
		2 pad1		        bit (8) unaligned,
		2 records		        fixed bin (17) unaligned,
		2 dtd		        bit (36),	/* date time segment and branch dumped */
		2 dtem		        bit (36),	/* date time branch modified */
		2 lvid		        bit (36),	/* logical volume id (sons_lvid for dirs) */
		2 curlen		        fixed bin (11) unaligned,
						/* highest 1024-word block used */
		2 bitcnt		        bit (24) unaligned,
						/* bit count */
		2 did		        bit (4) unaligned,
		2 mdid		        bit (4) unaligned,
		2 copysw		        bit (1) unaligned,
		2 tpd		        bit (1) unaligned,
		2 pad3		        bit (8) unaligned,
		2 rbs		        (0:2) fixed bin (5) unaligned,
		2 uid		        bit (36);
%page;
%include delete_options;
%include std_descriptor_types;

%include dl_handler_options;

%include suffix_info;
%include copy_flags;

/* Initialize variables.  Set code to zero, and remember that we have the pathname
   of the thing to be deleted (the ptr entry does not provide it). */

	code = 0;
	dname = dirname;
	ename = entryname;
	path_entry = "1"b;
	segp = null;
	call check_switches (3);

/* Find out what type of branch this is.  Then dispatch to the appropriate action routine,
   or error message.  Note that a directory with a non-zero bitcount
   is considered to be a segment - an MSF */

check_type:
	call hcs_$status_minf (dname, ename, 0, type, bitcount, code);
	if code ^= 0
	then return;

	if ^delete_options.raw & type ^= 0
	then do;
		call fs_util_$get_type (dname, ename, fs_util_type, code);
						/* Is this Xobj (not link to Xobj)? */
		if code = 0 & (substr (fs_util_type, 1, 1) ^= "-" | fs_util_type = FS_OBJECT_TYPE_DM_FILE)
		then do;				/* - at beginning implies standard object, but */
						/* this program treats DM files as extended */
						/* rather than standard objects */
            		/* if extended object, don't try to initiate */
		          if type = 1 & ^delete_options.segment
                              then goto is_segment;
                              goto call_delete;
		     end;
	     end;

	if type = 0
	then /* link */
	     if ^delete_options.link
	     then go to is_link;
	     else if delete_options.chase
	     then do;
		     call hcs_$get_link_target (dname, ename, dname, ename, code);
		     if code ^= 0
		     then return;			/* chase the link and start again */
		     go to check_type;
		end;
	     else go to unlink_link;

	else if type = 1
	then /* segment */
	     if ^delete_options.segment
	     then go to is_segment;
	     else go to delete_segment;

	else if type = 2
	then /* directory */
	     if bitcount ^= 0
	     then do;
		     if ^delete_options.segment
		     then go to is_segment;
		     type = 3;			/* msf */
		     go to delete_msf;
		end;

	     else if ^delete_options.directory
	     then go to is_directory;
	     else go to delete_directory;


/* Call term_ on the segment to be deleted. */
/* Initiate it here, so we can take advantage of segptr if we have it */

delete_segment:
	if segp = null ()
	then do;
		call hcs_$get_segment_ptr_path (dirname, ename, segp, "0"b, code);
		if segp ^= null ()			/* segment was previously initiated */
		then do;
			call hcs_$get_safety_sw_seg (segp, safety_switch, (0));
			if safety_switch
			then go to protected_by_switch;
			/*** * We don't check the copy switch, it is too much pain. */
			call term_$seg_ptr (segp, (0));
						/* begone! */
		     end;
		segp = null ();
	     end;
	else do;
		call hcs_$fs_get_path_name (segp, dname, (0), ename, code);
		if code ^= 0
		then return;
	     end;


unlink_link:
call_delete:
	if delete_options.library
	then call installation_tools_$delentry_file (dname, ename, code);
	else if delete_options.raw | type = 0		/* flush links with hcs_ */
	then call hcs_$delentry_file (dname, ename, code);
	else call fs_util_$delentry_file (dname, ename, code);

	if code ^= 0
	then if code = error_table_$copy_sw_on | code = error_table_$safety_sw_on
	     then
protected_by_switch:				/* come here to avoid terminating before asking question */
		do;				/* entry is protected - see whether to force */
		     if (^delete_options.force & ^delete_options.question)
		     then return;

		     string (dl_handler_options) = ""b;
		     dl_handler_options.no_question = delete_options.force;
		     dl_handler_options.raw = delete_options.raw;
		     dl_handler_options.library = delete_options.library;

		     call dl_handler_$switches (caller, dname, ename, string (dl_handler_options), code);

		     if code = 0
		     then go to call_delete;
		     else return;
		end;
	return;


/* Delete a directory.  MSF's (directories with non-zero bitcounts) are treated the same way */

delete_msf:
delete_directory:
	call hcs_$delentry_file (dname, ename, code);	/* try to delete it first */
	if code = error_table_$fulldir
	then do;					/* have to delete its contents */
delete_contents:
		call hcs_$status_long (dname, ename, 0, addr (lbranch), null, code);
						/* must find out if mounted before deleting */
		if code ^= 0
		then return;
		call hcs_$lv_attached (lbranch.lvid, code);
		if code ^= 0
		then return;
		pname = pathname_ (rtrim (dname), ename);
list_again:
		call hcs_$star_ (pname, "**", all, get_system_free_area_ (), ecount, eptr, nptr, code);
		if code ^= 0
		then do;
			if code = error_table_$moderr
			then do;			/* force dir access */
				if init_acl_sw
				then return;
				dir_acl.userid = get_group_id_$tag_star ();
				dir_acl.mode = "111"b;
				dir_acl.status = 0;
				call hcs_$add_dir_acl_entries (dname, ename, addr (dir_acl), 1, code);
				init_acl_sw = "1"b;
				if code = 0 & dir_acl.status = 0
				then go to list_again;
			     end;
			if delete_options.question
			then call com_err_ (code, caller, "Unable to delete ^a", pname);
			return;
		     end;
		directory_contents_code = 0;
		do i = 1 to ecount;
		     name = names (fixed (entries (i).nindex));
		     etype = entries (i).type;
		     delete_options.link, delete_options.segment = "1"b;
		     init_acl_sw = "0"b;
delete_again:
		     call delete_$path (pname, name, (string (delete_options)), caller, code);
						/* recurse */
		     if code ^= 0
		     then do;
			     if code = error_table_$incorrect_access
			     then do;		/* force dir access */
				     if init_acl_sw
				     then return;
				     dir_acl.userid = get_group_id_$tag_star ();
				     dir_acl.mode = "111"b;
				     dir_acl.status = 0;
				     call hcs_$add_dir_acl_entries (dname, ename, addr (dir_acl), 1, code);
				     init_acl_sw = "1"b;
				     if code = 0 & dir_acl.status = 0
				     then go to delete_again;
				end;
			     if code = error_table_$action_not_performed
			     then do;
				     directory_contents_code = code;
				     go to endloop;
				end;
			     if directory_contents_code ^= error_table_$action_not_performed
				& (code = dm_error_$delete_pending_transaction
				| code = dm_error_$no_delete_dir_transaction)
			     then directory_contents_code = dm_error_$no_delete_dir_transaction;
			     else directory_contents_code = error_table_$action_not_performed;
			     if delete_options.question
			     then if code = dm_error_$delete_pending_transaction
				then call com_err_ (code, caller, " ^a>^a", pname, name);
				else do;
					if etype = "00"b
					then operation = "unlink";
					else operation = "delete";
					call com_err_ (code, caller, "Unable to ^a ^a>^a", operation, pname,
					     name);
				     end;
			end;
endloop:
		end;
		code = directory_contents_code;
		if code = 0
		then go to delete_directory;		/* try again now that contents are deleted */
	     end;
	else if code = error_table_$copy_sw_on | code = error_table_$safety_sw_on
	then do;
		string (dl_handler_options) = ""b;
		dl_handler_options.no_question = ^delete_options.question | delete_options.force;
		dl_handler_options.raw = delete_options.raw;
		dl_handler_options.library = delete_options.library;

		if delete_options.question | delete_options.force
						/* either dl handler will ask, or it is licensed to fix things without asking */
		then call dl_handler_$switches (caller, dname, ename, string (dl_handler_options), code);
		else return;
		if code = 0
		then go to delete_directory;
	     end;

	else if code = error_table_$master_dir
	then do;					/* must call mdc to delete this */
		call mdc_$delete_dir (dname, ename, code);
		if code ^= 0
		then if code = error_table_$fulldir
		     then go to delete_contents;
	     end;

	return;






ptr:
     entry (segptr, a_switches, caller, code);


/* The ptr entry is similar to the path entry, except that the caller already has a ptr to the
   segment, so we might as well save the initiate call.  You can only have a ptr to a segment (not
   a link, directory, or MSF). */




	if segptr = null
	then do;
		code = error_table_$invalidsegno;
		return;
	     end;

	code = 0;
	segp = segptr;
	path_entry = "0"b;
	type = 1;

	call check_switches (2);
	if ^delete_options.segment
	then go to is_segment;
	go to delete_segment;






is_link:
	code = error_table_$not_a_branch;
	return;

is_segment:
	code = error_table_$nondirseg;
	return;

is_directory:
	code = error_table_$dirseg;
	return;
%page;
check_switches:					/* Need to check whether old style call where switches were */
     proc (switch_arg);				/* declared bit (6) */

	dcl     switch_arg		        fixed bin;
	dcl     (size, type)	        fixed bin;
	dcl     arg_ptr		        ptr,
	        arg		        bit (6) based (arg_ptr);
	dcl     cu_$arg_list_ptr	        entry returns (ptr);
	dcl     cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     decode_descriptor_	        entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin,
				        fixed bin);

	call decode_descriptor_ (cu_$arg_list_ptr (), switch_arg, type, ("0"b), (0), size, (0));

/**** * THIS DEPENDS ON THE FACT THE A CHAR (*) IN THE ARG LIST
      CAUSES ALL ARGUMENTS TO HAVE DESCRIPTORS! */
	if type = bit_dtype & size = 36
	then /* bit (36) */
	     string (delete_options) = a_switches;
	else do;
		call cu_$arg_ptr (switch_arg, arg_ptr, (0), (0));
		substr (string (delete_options), 1, 6) = arg;
		substr (string (delete_options), 6) = ""b;
	     end;

	return;
     end check_switches;


     end;
