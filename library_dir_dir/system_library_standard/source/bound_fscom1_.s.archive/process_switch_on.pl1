/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
process_switch_on: pswn: proc;

/* Syntax:  process_switch_on switch_names
	  process_switch_off switch_names

Turns on or off the specified perprocess switches. */

/* Written 07/14/83 by S. Herbst */


/* Constants */

dcl long_key (1) char (32) int static options (constant) init
	( "256K");

dcl short_key (1) char (32) int static options (constant) init
	( "256k");

dcl long_long_key (1) char (32) int static options (constant) init
	( "256k_switch");

dcl short_long_key (1) char (32) int static options (constant) init
	( "256ksw");


/* Based */

dcl arg char (arg_len) based (arg_ptr);


/* Automatic */

dcl me char (32);
dcl switch_value bit (1);
dcl arg_ptr ptr;
dcl (arg_count, i, j) fixed bin;
dcl arg_len fixed bin (21);
dcl code fixed bin (35);

dcl error_table_$badopt fixed bin (35) ext;

dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$arg_count entry (fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
%page;
	me = "process_switch_on";
	switch_value = "1"b;
	go to COMMON;

process_switch_off: pswf: entry;

	me = "process_switch_off";
	switch_value = "0"b;

COMMON:	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     return;
	end;
	if arg_count = 0 then do;
	     call com_err_$suppress_name (0, me, "Usage:  ^a switch_names", me);
	     return;
	end;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then do;
		call com_err_ (error_table_$badopt, me, "^a", arg);
		return;
	     end;
	end;
	
	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     do j = hbound (long_key, 1) by -1 to 1 while (long_key (j) ^= arg); end;
	     if j = 0 then do;
		do j = hbound (short_key, 1) by -1 to 1 while (short_key (j) ^= arg); end;
		if j = 0 then do;
		     do j = hbound (long_long_key, 1) by -1 to 1 while
			(long_long_key (j) ^= arg); end;
		     if j = 0 then do;
			do j = hbound (short_long_key, 1) by -1 to 1 while
			     (short_long_key (j) ^= arg); end;
			if j = 0 then do;
			     call com_err_ (0, me, "Invalid switch_name ^a", arg);
			     return;
			end;
		     end;
		end;
	     end;

	     call set_one (j);
	end;

	return;
%page;
set_one: proc (P_index);

/* Sets the value of one switch */

dcl P_index fixed bin;
dcl K256_switch bit (2) aligned;

	go to SET (P_index);

SET (1):
	if switch_value = "1"b then K256_switch = "11"b;
	else K256_switch = "10"b;

	call hcs_$set_256K_switch (K256_switch, ("0"b), code);
	if code ^= 0 then call com_err_ (code, me, "Setting 256K switch.");

	return;

end set_one;


end process_switch_on;
