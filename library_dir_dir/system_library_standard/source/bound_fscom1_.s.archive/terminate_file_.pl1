/****^  ******************************************************
        *                                                    *
        * Copyright (c) 1985 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/****^ HISTORY COMMENTS:
  1) change(85-09-12,Spitzer), approve(85-09-12,MCR7265),
     audit(85-09-13,Blair):  Bugfix.  Don't attempt further operations on the
     segptr if the segment is actually deleted.
                                                   END HISTORY COMMENTS */
/* Utility subroutine to perform standard completion operations when a program has finished with a segment.

   Written 25 July 1980 by M. N. Davidoff after THVV suggested at the right
	time of the week, Friday 6:00, that doing force_writes in some
	places would improve reliablity.
   Modified 26 Aug 1985 by C Spitzer. If successful delete, don't attempt to
	do the rest of the options.
*/
/* format: style2 */
terminate_file_:
     procedure (P_seg_ptr, P_bit_count, P_switches, P_code);

	declare P_seg_ptr		 pointer;		/* (Input/Output) segment to finish,
						   set to null after segment is terminated */
	declare P_bit_count		 fixed binary (24); /* (Input) number of used bits */
	declare P_switches		 bit (*);		/* (Input) control switches */
	declare P_code		 fixed binary (35); /* (Output) standard status code */

/* automatic */

	declare bit_count		 fixed binary (24);
	declare code		 fixed binary (35);
	declare seg_ptr		 pointer;
	declare 1 tfs		 aligned like terminate_file_switches;

/* based */

	declare segment		 bit (36 * sys_info$max_seg_size) based;

/* builtin */

	declare (divide, mod, null, pointer, string, substr)
				 builtin;

/* external static */

	declare error_table_$invalidsegno
				 fixed binary (35) external static;
	declare sys_info$max_seg_size	 fixed binary (19) external static;

/* entry */

          declare delete_$ptr            entry (pointer, bit (6), character (*), fixed binary (35));
	declare hcs_$force_write	 entry (pointer, bit (36), fixed binary (35));
	declare hcs_$set_bc_seg	 entry (pointer, fixed binary (24), fixed binary (35));
	declare hcs_$terminate_noname	 entry (pointer, fixed binary (35));
	declare hcs_$truncate_seg	 entry (pointer, fixed binary (19), fixed binary (35));

%include terminate_file;
%include force_write_flags;

/* program */

	P_code = 0;
	seg_ptr = P_seg_ptr;
	bit_count = P_bit_count;
	string (tfs) = P_switches;

	if seg_ptr = null
	then return;

	seg_ptr = pointer (seg_ptr, 0);

/* Completion operations continue if code ^= 0 since the caller is done with
   the segment, and there is nothing left to do with this segment except the
   stuff below.  Might as well do as much as we can. */


/* We continue in delete case, in case it fails and user has set other */
/* bits that we can do */

	if tfs.delete
	then do;
	     call delete_$ptr (seg_ptr, "100111"b, "", code); /* Force, dont question, dirs and segs ignored, links okay, chase them. "" for unised questioner name. */
	     P_code = code;
	     if code = 0
	     then return;				/* no other options make sense after deleting */
	end;

	if tfs.truncate
	then do;
		substr (seg_ptr -> segment, bit_count + 1, mod (-bit_count, 36)) = ""b;

		call hcs_$truncate_seg (seg_ptr, divide (bit_count + 35, 36, 19), code);
		if code ^= 0
		then P_code = code;
	     end;

	if tfs.set_bc
	then do;
		call hcs_$set_bc_seg (seg_ptr, bit_count, code);
		if code ^= 0 & P_code = 0
		then P_code = code;
	     end;

	if tfs.force_write
	then begin;
		declare 1 fwf		 aligned like force_write_flags;

		string (fwf) = ""b;
		call hcs_$force_write (seg_ptr, string (fwf), code);
		if code ^= 0 & code ^= error_table_$invalidsegno & P_code = 0
		then P_code = code;
	     end;

	if tfs.terminate
	then do;
		P_seg_ptr = null;
		call hcs_$terminate_noname (seg_ptr, code);
		if code ^= 0 & P_code = 0
		then P_code = code;
	     end;
     end terminate_file_;
