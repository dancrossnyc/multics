/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* Written by J. Siwila  3/30/83 */

/* This procedure sets up and displays the menu in the Tutorial dealing with
      the storage system. */

/* format: style2 */
tut_storing_information_:
     proc (menu_io, user_io_window_info, function_key_data_ptr, fkey, choice, last1, Phelp_args, pseudo, code);

/* Automatic */

	dcl     change_origin	 bit (1) aligned;
	dcl     choice		 fixed bin;
	dcl     choices		 (9) char (30) var;
	dcl     code		 fixed bin (35);
	dcl     init_display	 bit (1) aligned init ("0"b);
	dcl     fkey		 bit (1) aligned;
	dcl     headers		 (1) char (30) var;
	dcl     menu_io		 ptr;
	dcl     menu_ptr		 ptr;
	dcl     my_area		 area (4095);
	dcl     1 my_menu_format	 like menu_format;
	dcl     1 my_menu_requirements like menu_requirements;
	dcl     1 true_window_info	 like window_position_info;
	dcl     new_io_height	 fixed bin;
	dcl     seg_name		 char (25) init ("tut_storing_information_0");
	dcl     seg_name_1		 char (11) init ("tut_segment");
	dcl     seg_name_2		 char (15) init ("tut_directories");
	dcl     seg_name_3		 char (12) init ("tut_home_dir");
	dcl     seg_name_4		 char (15) init ("tut_working_dir");
	dcl     seg_name_5		 char (15) init ("tut_project_dir");
	dcl     seg_name_6		 char (12) init ("tut_root_dir");
	dcl     seg_name_7		 char (15) init ("tut_pathnames_2");
	dcl     seg_name_8		 char (10) init ("tut_access");
	dcl     trailers		 (2) char (40) var;
	dcl     1 user_io_window_info	 like window_position_info;
	dcl     ME_STORE_INFO	 char (24) init ("tut_storing_information_");
	dcl     last1		 fixed bin;
	dcl     pseudo		 bit (1) aligned;

/* Builtin */

	dcl     (null, empty, addr)	 builtin;

/* Condition */

	dcl     (program_interrupt, any_other)
				 condition;

/* Entries */

	dcl     cu_$cl		 entry () options (variable);
	dcl     tut_get_seg_	 entry () options (variable);
	dcl     tut_quit_		 entry () options (variable);
	dcl     tut_window_		 entry () options (variable);
	dcl     tut_bottom_		 entry () options (variable);

/* External */

	dcl     video_data_$terminal_iocb
				 ptr external;


/* Create the menu */

	choices (1) = "Segments";
	choices (2) = "Directories";
	choices (3) = "The Home Directory";
	choices (4) = "The Working Directory";
	choices (5) = "The Project Directory";
	choices (6) = "The Root Directory";
	choices (7) = "Pathnames";
	choices (8) = "Access to Stored Information";
	choices (9) = "Return to First Menu";

	headers (1) = "<<<Storing Information>>>";
	if pseudo
	then trailers (1) = "Use ESC q to Exit";
	else trailers (1) = "Use Function Key F4 to Exit";
	trailers (2) = "-";

	my_menu_format.version = menu_format_version_1;
	my_menu_format.max_width = user_io_window_info.extent.width;
	my_menu_format.max_height = 8;
	my_menu_format.n_columns = 2;
	my_menu_format.center_headers = "1"b;
	my_menu_format.center_trailers = "1"b;
	my_menu_format.pad = "0"b;
	my_menu_format.pad_char = "-";

	my_menu_requirements = menu_requirements_version_1;

/* Now carve the menu I/O window out of the user_i/o window. */

	change_origin = "0"b;
	call tut_window_ (menu_io, true_window_info, my_menu_format.max_height, change_origin, code);
	if code ^= 0
	then return;
	new_io_height = user_io_window_info.height - my_menu_format.max_height;
START:
	change_origin = "1"b;
	call tut_window_ (iox_$user_io, true_window_info, new_io_height, change_origin, code);
	if code ^= 0
	then return;

	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
	     addr (my_menu_requirements), menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_STORE_INFO, "Unable to create menu.", menu_io, user_io_window_info);
		return;
	     end;

/* Display menus */


	call menu_$display (menu_io, menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_STORE_INFO, "Unable to display menu.", menu_io, user_io_window_info);
		return;
	     end;

	if init_display
	then goto NEXT;
	else do;
		init_display = "1"b;
		call tut_get_seg_ (seg_name, menu_io, user_io_window_info, code);
		if code ^= 0
		then return;
	     end;

NEXT:
	on condition (program_interrupt) go to START;

/* Now start processing input from user */

	do while ("1"b);

/* Get an option number or function key value from user. */

	     code = 0;
	     call iox_$control (iox_$user_io, "reset_more", null (), code);
	     call menu_$get_choice (menu_io, menu_ptr, function_key_data_ptr, fkey, choice, code);

/* Perform an action depending on the user's selection. */

	     if code ^= 0
	     then do;
		     call tut_quit_ (code, ME_STORE_INFO, "Unable to get choice.", menu_io, user_io_window_info);
		     return;
		end;
	     if fkey
	     then if choice = 1
		then do;
			call tut_bottom_ (true_window_info, new_io_height, my_menu_format.max_height, Phelp_args,
			     code);
			if code ^= 0
			then return;
		     end;
		else if choice = 2
		then do;
			call tut_cl ();
			if code ^= 0
			then return;
		     end;
		else if choice = 3
		then do;
			last1 = 5;
			return;
		     end;
		else if choice = 4
		then return;
		else call window_$bell (menu_io, (0));

	     else do;
		     if choice = 1
		     then do;
			     call seg ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 2
		     then do;
			     call dirs ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 3
		     then do;
			     call home ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 4
		     then do;
			     call working ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 5
		     then do;
			     call project ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 6
		     then do;
			     call root_dir ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 7
		     then do;
			     call pathname ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 8
		     then do;
			     call access ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 9
		     then do;
			     last1 = 5;
			     return;
			end;
		     else call window_$bell (menu_io, (0));
		end;
	end;

/* Procedures for options. */

seg:
     proc ();

	call tut_get_seg_ (seg_name_1, menu_io, user_io_window_info, code);
	return;

     end seg;

dirs:
     proc ();

	call tut_get_seg_ (seg_name_2, menu_io, user_io_window_info, code);
	return;

     end dirs;

home:
     proc ();

	call tut_get_seg_ (seg_name_3, menu_io, user_io_window_info, code);
	return;

     end home;

working:
     proc ();

	call tut_get_seg_ (seg_name_4, menu_io, user_io_window_info, code);
	return;

     end working;

project:
     proc ();

	call tut_get_seg_ (seg_name_5, menu_io, user_io_window_info, code);
	return;

     end project;

root_dir:
     proc ();

	call tut_get_seg_ (seg_name_6, menu_io, user_io_window_info, code);
	return;

     end root_dir;

pathname:
     proc ();

	call tut_get_seg_ (seg_name_7, menu_io, user_io_window_info, code);
	return;

     end pathname;

access:
     proc ();

	call tut_get_seg_ (seg_name_8, menu_io, user_io_window_info, code);
	return;

     end access;

tut_cl:
     proc ();

	on any_other system;
	call window_$clear_window (iox_$user_io, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_STORE_INFO, "Unable to clear window.", menu_io, user_io_window_info);
		return;
	     end;
	trailers (1) = "Type ""pi"" and RETURN to reenter tutorial";
	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
	     addr (my_menu_requirements), menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_STORE_INFO, "Unable to create menu.", menu_io, user_io_window_info);
		return;
	     end;
	call menu_$display (menu_io, menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_STORE_INFO, "Unable to display menu", menu_io, user_io_window_info);
		return;
	     end;
	if pseudo
	then trailers (1) = "Use ESC q to Exit";
	else trailers (1) = "Use Function Key F4 to Exit";
	call cu_$cl;

     end tut_cl;

%include function_key_data;
%page;
%include help_args_;
%page;
%include iox_dcls;
%page;
%include menu_dcls;
%page;
%include window_dcls;
%page;
%include window_control_info;

     end tut_storing_information_;
