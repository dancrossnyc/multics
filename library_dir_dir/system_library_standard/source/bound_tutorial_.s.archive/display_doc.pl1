/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2 */
display_doc:
     proc (p_io_ptr, p_mrds_dbi, p_manual_number, p_display_info_ptr, p_topics_string, p_code);

/* HISTORY:
Written by Jim Paradise, fall 1981.
Modified:
03/05/81 by M. Pierret for new format (no manual_data_rel).
10/19/81 by M. Pierret to accept p_topics_string, and display that string
            at the end of the header with a "Topic(s) selected:" prefix.
03/30/83 by M. Pierret: Changed to use new format database which includes
            the info_rel relation, and to use format_document_$string to
            to format text fields for printing.
04/22/83 by Matthew Pierret:  Changed to remove the comment block surrounding
            the code which displays short names.  This code was commented out
            so that short names would not be displayed.  Now, explain_doc and
            where_doc have been changed to turn the
            display_info.short_name_flag off by default.  This change allows
            short names to be displayed by over-riding the default with
            control args.
05/13/83 by J. Siwila:  Removed one of the blank lines inserted before manual
            information is displayed.  Now there is only one line inserted 
            between the command line and the display and between separate
            manuals in a single display.
06/15/83 by J. Siwila:  Substituted p_topics_string for topics_string so that
            char is * rather than 128.
09/01/83 by Matthew Pierret: Changed to allow display of leading blank line to
            be optional, to display "Short names" field at left margin, to
            trim of trailing NL from description and audience.
09/29/83 by Matthew Pierret: Fixed bug which prevented the display of more than
            one short name.  Changed to correctly set the version_number and
            syllable_size of format_document_options and to not adjust (right
            justify) text.
*/

/*
DESCRIPTION:
        Given an internal manual identification number, this routine displays
   information about that manual according to constraints set in display_info.
   The following information is displayed as follows:

     Title:  Multics Commands and Active Functions
     Order No.:  AG92-05 
   { Short names:  commands, commands_afs, caf }
     Release Supported:  MR10.1
   { Topics selected:  create_mrds_dsm, list_comp_dsm }

   { Description: ... }

   { Audience: ...... }

   { Table of contents: ... }

   { New features: ........ }

   Those enclosed in {} are optionally displayed according to display_doc_info.
*/

/* START OF DECLARATIONS */
/* Parameters */

	dcl     p_io_ptr		 ptr;		/* points to iocb to use for output */
	dcl     p_mrds_dbi		 fixed bin (35);	/* is the database opening index of the online_doc database */
	dcl     p_manual_number	 fixed bin;	/* is the identifier of the manual to be dislayed. */
	dcl     p_display_info_ptr	 ptr;		/* is a pointer to a display_info structure, which specifies which fields to display. */
	dcl     p_topics_string	 char (*) varying;	/* is a string of one or more topics selected by where_doc. */
	dcl     p_code		 fixed bin (35);	/* is a standard system error code. */

/* Automatic */

	dcl     io_ptr		 ptr;

	dcl     manual_number	 fixed bin;
	dcl     mrds_dbi		 fixed bin (35);
	dcl     code		 fixed bin (35);

	dcl     print_short_name	 char (64) varying;
	dcl     title_string	 char (128) varying;
	dcl     first_short_name_flag	 bit (1);
	dcl     (input_string, formatted_string)
				 char (1024);
	dcl     output_string	 char (1024) varying;
	dcl     formatted_string_length
				 fixed bin (21);
	dcl     1 local_format_document_options
				 aligned like format_document_options;

/* Builtin */

	dcl     (addr, after, before, index, length, string, substr, translate)
				 builtin;

/* Constant */

	dcl     NL		 char (1) internal static options (constant) init ("
");

/* Entry */

	dcl     dsl_$retrieve	 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$ioa_switch_nnl	 entry options (variable);
	dcl     format_document_$string
				 entry (char (*), char (*), fixed bin (21), ptr, fixed bin (35));

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

	io_ptr = p_io_ptr;
	mrds_dbi = p_mrds_dbi;
	manual_number = p_manual_number;
	display_info_ptr = p_display_info_ptr;

	if display_info.header.full_name_flag | display_info.header.order_number_flag
	     | display_info.header.revision_flag | display_info.header.release_supported_flag
	then do;
		call dsl_$retrieve (mrds_dbi, "-range (x full_name_rel) -select x -where x.manual_number = .V.",
		     manual_number, full_name_rel, code);
		if code ^= 0
		then goto ERROR;
	     end;

	if display_info.display_leading_blank_line
	then call ioa_$ioa_switch (io_ptr, "");

	if display_info.header.full_name_flag
	then do;
		title_string = translate (full_name_rel.full_name, " ", "_");
		call ioa_$ioa_switch (io_ptr, "Title:  ^a", title_string);
	     end;

	if display_info.header.order_number_flag
	then call ioa_$ioa_switch (io_ptr, "Order No.:  ^a^[-^3a^]", full_name_rel.order_number,
		(full_name_rel.revision ^= " "), full_name_rel.revision);

	if display_info.header.short_name_flag
	then do;
		call dsl_$retrieve (mrds_dbi, "-range (x short_name_rel) -select x -where x.manual_number = .V.",
		     manual_number, short_name_rel, code);
		if code ^= 0
		then goto ERROR;

		first_short_name_flag = "1"b;
		print_short_name = translate (short_name_rel.short_name, " ", "_");
DISPLAY_EACH_SHORT_NAME:
		do while (code = 0);
		     call dsl_$retrieve (mrds_dbi, "-another", manual_number, short_name_rel, code);

		     call ioa_$ioa_switch_nnl (io_ptr, "^[Short name^[s^]:  ^;^s, ^]^a", first_short_name_flag,
			(code = 0), print_short_name);
		     if code = 0
		     then print_short_name = translate (short_name_rel.short_name, " ", "_");
		     first_short_name_flag = "0"b;

		end DISPLAY_EACH_SHORT_NAME;
	     end;

	if display_info.header.short_name_flag
	then call ioa_$ioa_switch_nnl (io_ptr, "^/");

	if display_info.header.release_supported_flag
	then call ioa_$ioa_switch (io_ptr, "Release Supported:  ^a", full_name_rel.release_supported);

	if display_info.header.topics_flag
	then call ioa_$ioa_switch (io_ptr, "Topic^[s^] selected:  ^a", (index (p_topics_string, ", ") ^= 0),
		p_topics_string);


	if description_flag | audience_flag | table_of_contents_flag | new_features_flag
	then do;
		call dsl_$retrieve (mrds_dbi, "-range (x info_rel) -select x -where x.manual_number = .V.",
		     manual_number, info_rel, code);
		if code ^= 0
		then goto ERROR;
	     end;

	format_document_options_ptr = addr (local_format_document_options);
	format_document_options.version_number = format_document_version_2;
	format_document_options.indentation = 5;
	format_document_options.line_length = 70;
	format_document_options.syllable_size = 0;
	string (format_document_options.switches) = "0"b;
	format_document_options.switches.galley_sw = "1"b;
	format_document_options.switches.literal_sw = "1"b;

	if description_flag
	then do;
		input_string = info_rel.description;
		call format_document_$string (substr (input_string, 1, length (info_rel.description)),
		     formatted_string, formatted_string_length, format_document_options_ptr, code);
		if substr (formatted_string, formatted_string_length, 1) = NL
		then output_string = substr (formatted_string, 1, formatted_string_length - 1);
		else output_string = substr (formatted_string, 1, formatted_string_length);
		call ioa_$ioa_switch (io_ptr, "^/Description:^/^a", output_string);
	     end;

	if audience_flag
	then do;
		input_string = info_rel.audience;
		call format_document_$string (substr (input_string, 1, length (info_rel.audience)), formatted_string,
		     formatted_string_length, format_document_options_ptr, code);
		if substr (formatted_string, formatted_string_length, 1) = NL
		then output_string = substr (formatted_string, 1, formatted_string_length - 1);
		else output_string = substr (formatted_string, 1, formatted_string_length);

		call ioa_$ioa_switch (io_ptr, "^/Audience:^/^a", output_string);
	     end;

	if table_of_contents_flag
	then do;
		input_string = info_rel.table_of_contents;
		call ioa_$ioa_switch (io_ptr, "^/Table of Contents:");
		do while (index (input_string, NL) ^= 0);
		     output_string = before (input_string, NL);
		     input_string = after (input_string, NL);
		     call ioa_$ioa_switch (io_ptr, "^vx^a", format_document_options.indentation, output_string);
		end;
		if input_string ^= ""
		then call ioa_$ioa_switch (io_ptr, "^vx^a", format_document_options.indentation, input_string);
	     end;

	if new_features_flag
	then do;
		input_string = info_rel.new_features;
		call ioa_$ioa_switch (io_ptr, "^/New Features:");
		do while (index (input_string, NL) ^= 0);
		     output_string = before (input_string, NL);
		     input_string = after (input_string, NL);
		     call ioa_$ioa_switch (io_ptr, "^vx^a", format_document_options.indentation, output_string);
		end;
		if input_string ^= ""
		then call ioa_$ioa_switch (io_ptr, "^vx^a", format_document_options.indentation, input_string);
	     end;

	p_code = 0;
	return;

ERROR:
	p_code = code;
	return;
%page;
%include display_doc_info;
%page;
%include online_doc;
%page;
%include format_document_options;

     end display_doc;
