/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-10-19,Lee), approve(88-11-21,MCR8025), audit(88-12-23,Flegel),
     install(89-01-23,MR12.3-1010):
     Commands 393 (phx16310) - fixed bug displaying small numbers when
     ten**(prec-mag) exceeds exponent size.
                                                   END HISTORY COMMENTS */


/* format: style4,ind3 */

ffop: proc (string, ip, value);

dcl  (ip, mag, dif, i, j, k, m, n) fixed bin (17);
dcl  val float bin (63);
dcl  roundit float bin (63) static internal init (0.5e0);
dcl  ten float bin (63) static internal init (10e0);
dcl  (num, numt) fixed bin (71);
dcl  value float bin (27);
dcl  numbers (0:9) char (1) static internal init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");
dcl  string char (32) aligned;
dcl  sign char (1) aligned;
dcl  wrk char (26) aligned;
dcl  (prec init (6), len init (32)) fixed bin (17) internal static;
dcl  temp float bin (63);
dcl  (divide, log10, multiply, substr) builtin;

dcl  1 e aligned,
       2 p bit (1) aligned,
       2 old_mag fixed bin (17) aligned;

      wrk = " ";
      e.p = "0"b;
      sign = " ";
      val = value;
      if val = 0.e0 then do;
         mag = prec - 1;
         go to no_log;
      end;
      if val < 0.e0 then do;
         val = -val;
         sign = "-";
      end;
      mag = log10 (val);
      if mag < 0 then mag = mag - 1;
      if mag > prec then go to e_stuff;
      if mag < -1 then do;

e_stuff: e.p = "1"b;
         e.old_mag = mag;

/* fixed for phx16310 - if value if mag is small, */
/* ten**(prec-mag) may generate exponent overflow; */
/* multiply in two steps to prevent this condition */

         val = multiply (val, ten ** (prec), 63);
         val = multiply (val, ten ** (-mag), 63);

         num = val + roundit;
         mag = 0;
         dif = 0;
         go to no_dif;
      end;
      if mag < 0 then mag = mag - 1;

no_log:
      temp = 10e0 ** (prec - mag);
      num = val * temp + roundit;

no_dif:
      mag = mag + 18 - prec;
      i = 18;

next_num:
      if i = mag then do;
         substr (wrk, i, 1) = ".";
         i = i - 1;
      end;
      numt = divide (num, 10, 63, 0);
      k = num - numt * 10;
      num = numt;
      substr (wrk, i, 1) = numbers (k);
      i = i - 1;
      if num > 0 then go to next_num;
      if i >= mag - 1 then go to next_num;
      substr (wrk, i, 1) = sign;
      do j = 18 to mag by -1 while (substr (wrk, j, 1) = "0" | substr (wrk, j, 1) = ".");
      end;
      if e.p then do;
         substr (wrk, j + 1, 1) = "E";
         if e.old_mag < 0 then do;
	  substr (wrk, j + 2, 1) = "-";
	  e.old_mag = -e.old_mag;
         end;
         else substr (wrk, j + 2, 1) = "+";
         m = divide (e.old_mag, 100, 17);
         n = e.old_mag - m * 100;
         if m > 0 then do;
	  substr (wrk, j + 3, 1) = numbers (m);
	  j = j + 1;
         end;
         m = divide (n, 10, 17);
         n = n - m * 10;
         if m > 0 then do;
	  substr (wrk, j + 3, 1) = numbers (m);
	  j = j + 1;
         end;
         substr (wrk, j + 3, 1) = numbers (n);
         j = j + 3;
      end;
      if len - ip < j - i + 1 then do;
         substr (string, ip, len - ip) = (26)"*";
         ip = len + 1;
         return;
      end;
      substr (string, ip, j - i + 1) = substr (wrk, i, j - i + 1);
      ip = ip + j - i + 1;
      return;
   end;
