/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* Support for upgrading version 2 message segments to the version supported by bound_mseg_ */

/* Created:  May 1985 by G. Palter */

/* format: style3,linecom */

mseg_upgrade_from_v2_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	P_mseg_operation_ptr			/* -> description of the operation forcing the upgrade (I) */
			pointer parameter;

dcl	P_salvage_completed bit (1) aligned parameter;	/* salvage: set ON => salvage succeeded (O) */

dcl	P_callers_area_ptr	pointer parameter;		/* read_message: -> area in which to place the message (I) */
dcl	P_code		fixed binary (35) parameter;	/* read_message: set to standard system status code (O) */


/* Local copies of parameters */

dcl	callers_area_ptr	pointer;

dcl	code		fixed binary (35);


/* Remaining declarations */

/* format: idind30 */

dcl	1 v2_wakeup_state		aligned,
	  2 state,
	    3 switches		aligned,
	      4 allow_normal	bit (1) unaligned,
	      4 allow_urgent	bit (1) unaligned,
	      4 pad		bit (34) unaligned,
	    3 lock_id		bit (36) aligned,
	    3 event_channel		fixed bin (71),
	    3 process_id		bit (36) aligned,
	  2 pad			(64 - 5) bit (36) aligned;

/* format: idind20 */

dcl	msg_ptr		pointer;
dcl	msg_sender_id	character (32) aligned;
dcl	(msg_time, old_msg_time)
			fixed binary (54);
dcl	(msg_location, msg_len, old_msg_location)
			fixed binary (18);
dcl	msg_sender_level	fixed binary;

dcl	error_table_$bad_subr_arg
			fixed binary (35) external;

dcl	ms_salvager_v2_	entry (pointer, fixed binary, fixed binary (35));
dcl	mseg_util_v2_$incremental_read
			entry (pointer, bit (2) aligned, pointer, fixed binary (18), fixed binary (54),
			fixed binary, pointer, fixed binary (18), fixed binary (18), fixed binary (54),
			character (32) aligned, fixed binary, fixed binary (35));
dcl	mseg_util_v2_$read	entry (pointer, bit (2) aligned, pointer, fixed binary (18), fixed binary (54),
			fixed binary, pointer, fixed binary (18), character (32) aligned, fixed binary,
			fixed binary (35));

dcl	(addr, bit, fixed, string, substr, unspec)
			builtin;
%page;
/* Salvage the version 2 message segment */

mseg_upgrade_from_v2_$salvage:
     entry (P_mseg_operation_ptr, P_salvage_completed);

	mseg_operation_ptr = P_mseg_operation_ptr;

	mseg_ptr = mseg_operation.mseg_ptr;

	call ms_salvager_v2_ (mseg_ptr, (0), code);	/* it will report problems via admin_gate_ */

	P_salvage_completed = (code = 0);

	return;
%page;
/* Get the wakeup acceptance state of a version 2 message segment -- In version 2 segments, the wakeup state is stored in
   the header "message".  We will convert said "message" into the appropriate wakeup_state structure. */

mseg_upgrade_from_v2_$get_wakeup_state:
     entry (P_mseg_operation_ptr);

	mseg_operation_ptr = P_mseg_operation_ptr;

	mseg_ptr = mseg_operation.mseg_ptr;

	if mseg_ptr -> mseg_hdr_v2.ms_in_hdr
	then do;
		unspec (v2_wakeup_state) = unspec (mseg_ptr -> mseg_hdr_v2.hdr_ms);
		mseg_operation.wakeup_state.version = MSEG_WAKEUP_STATE_VERSION_1;
		string (mseg_operation.wakeup_state.flags) = string (v2_wakeup_state.switches);
		mseg_operation.wakeup_state.event_channel = v2_wakeup_state.event_channel;
		mseg_operation.wakeup_state.access_class = mseg_operation.access_info.access_class;
		mseg_operation.wakeup_state.process_id = v2_wakeup_state.process_id;
		mseg_operation.wakeup_state.lock_id = v2_wakeup_state.lock_id;
		mseg_operation.wakeup_state_valid = "1"b;
	     end;

	else mseg_operation.wakeup_state_valid = "0"b;

	return;
%page;
/* Read the requested message from a version 2 message segment */

mseg_upgrade_from_v2_$read_message:
     entry (P_mseg_operation_ptr, P_callers_area_ptr, P_code);

	mseg_operation_ptr = P_mseg_operation_ptr;
	callers_area_ptr = P_callers_area_ptr;
	code = error_table_$bad_subr_arg;		/* in case our caller's mseg_message_info is invalid */

	mseg_ptr = mseg_operation.mseg_ptr;

	mseg_message_info_ptr = addr (mseg_operation.message_info);

	if mseg_message_info.message_code = MSEG_READ_FIRST
	then call mseg_util_v2_$read (mseg_ptr, "10"b, callers_area_ptr, msg_location, msg_time, 0, msg_ptr, msg_len,
		msg_sender_id, msg_sender_level, code);

	else if mseg_message_info.message_code = MSEG_READ_LAST
	then call mseg_util_v2_$read (mseg_ptr, "01"b, callers_area_ptr, msg_location, msg_time, 0, msg_ptr, msg_len,
		msg_sender_id, msg_sender_level, code);

	else do;
		old_msg_location = fixed (substr (mseg_message_info.ms_id, 1, 18), 18, 0);
		old_msg_time = fixed (substr (mseg_message_info.ms_id, 19, 54), 54, 0);

		if mseg_message_info.message_code = MSEG_READ_SPECIFIED
		then call mseg_util_v2_$incremental_read (mseg_ptr, "00"b, callers_area_ptr, old_msg_location,
			old_msg_time, 0, msg_ptr, msg_len, msg_location, msg_time, msg_sender_id, msg_sender_level,
			code);

		else if mseg_message_info.message_code = MSEG_READ_BEFORE_SPECIFIED
		then call mseg_util_v2_$incremental_read (mseg_ptr, "10"b, callers_area_ptr, old_msg_location,
			old_msg_time, 0, msg_ptr, msg_len, msg_location, msg_time, msg_sender_id, msg_sender_level,
			code);

		else if mseg_message_info.message_code = MSEG_READ_AFTER_SPECIFIED
		then call mseg_util_v2_$incremental_read (mseg_ptr, "01"b, callers_area_ptr, old_msg_location,
			old_msg_time, 0, msg_ptr, msg_len, msg_location, msg_time, msg_sender_id, msg_sender_level,
			code);
	     end;

	if code = 0
	then do;	/*** Read succeeded -- Fill in the mseg_message_info appropriately */
		mseg_message_info.ms_ptr = msg_ptr;
		mseg_message_info.ms_len = msg_len;
		mseg_message_info.ms_id = bit (msg_location, 18) || bit (msg_time, 54);
		mseg_message_info.ms_access_class = mseg_operation.access_info.access_class;
		mseg_message_info.sender_id = msg_sender_id;
		mseg_message_info.sender_process_id = ""b;
		mseg_message_info.sender_level = msg_sender_level;
		mseg_message_info.sender_authorization = mseg_operation.access_info.access_class;
		mseg_message_info.sender_max_authorization = mseg_operation.access_info.access_class;
		mseg_message_info.sender_audit = ""b;
	     end;

	P_code = code;

	return;

/* format: off */
%page; %include mseg_operation;
%page; %include mseg_message_info;
%page; %include mseg_wakeup_state;
%page; %include entry_access_info;
%page; %include mseg_hdr_v2;
/* format: on */

     end mseg_upgrade_from_v2_;
