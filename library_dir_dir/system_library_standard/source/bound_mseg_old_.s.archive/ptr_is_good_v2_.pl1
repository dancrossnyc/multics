/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ptr_is_good_v2_ : proc (a_test_ptr) returns (bit (1) aligned);

/* Adapted from the original version 2 ptr_is_good_ by J. Stern, 11/4/74 */

dcl (alloc_len internal static,			/* length of allocation bits */
     a_block_size,					/* given block size for salvager entry */
     block_size,					/* size of message block */
     hdr_alloc_len,					/* length of header allocation bits */
     i,						/* computation variable */
     message_begin,					/* first legal beginning loc for message */
     offset,					/* offset of given pointer */
     seg_size internal static) fixed bin (18);

dcl  code fixed bin (35);

dcl (a_test_ptr,					/* pointer to be validated (argument) */
     test_ptr) ptr;					/* pointer to be validated (internal) */

dcl (
     a_flag,					/* ON if pointer is valid (argument) */
     flag init ("0"b),
     salvager_entry init ("0"b)
     ) bit (1) aligned;				/* ON if pointer is valid (internal) */

dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (18), fixed bin (35));

dcl (addr, divide, fixed, mod, ptr, rel) builtin;

% include mseg_hdr_v2;

/*  */


	go to COMMON;

ms_salvager_entry: entry (a_test_ptr, a_block_size) returns (bit (1) aligned);

	salvager_entry = "1"b;

COMMON:	

/* copy argument */

	test_ptr = a_test_ptr;

/* create offset from pointer */

	offset = fixed (rel (test_ptr), 18);

/* create message segment ptr */

	mptr = ptr (test_ptr, 0);

	if salvager_entry				/* get proper block size */
	then block_size = a_block_size;
	else
	block_size = mptr -> mseg_hdr_v2.block_size;

/* check block size, compute needed variables */

	if block_size <= 0
	then go to fin;

	call hcs_$get_max_length_seg (mptr, seg_size, code);
	if code ^= 0 then go to fin;
	alloc_len = divide (seg_size, block_size, 18, 0);

	i = divide (36* (fixed (rel (addr (mptr -> mseg_hdr_v2.hdr_ms_end)), 18) + 1)+alloc_len+35, 36, 18, 0);
	hdr_alloc_len = divide (i+block_size-1, block_size, 18, 0);

	message_begin = fixed (rel (addr (mptr -> mseg_hdr_v2.hdr_ms.hdr_ms_end)))+hdr_alloc_len+1;

/* validate message pointer */

	if offset >= message_begin			/* pointer is past header */
	then if offset <= seg_size - block_size		/* pointer is not off end of segment */
	then if mod (offset, block_size) = 0		/* pointer points to block boundary */
	then flag = "1"b;				/* pointer is o.k. */

fin:	a_flag = flag;				/* return test indicator */
	return (a_flag);

     end ptr_is_good_v2_;
