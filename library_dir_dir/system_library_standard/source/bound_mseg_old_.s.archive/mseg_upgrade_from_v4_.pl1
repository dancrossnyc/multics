/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* Support for upgrading version 4 message segments to the version supported by bound_mseg_ */

/* Created:  May 1985 by G. Palter */

/* format: style3,linecom */

mseg_upgrade_from_v4_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	P_mseg_operation_ptr			/* -> description of the operation forcing the upgrade (I) */
			pointer parameter;

dcl	P_salvage_completed bit (1) aligned parameter;	/* salvage: set ON => salvage succeeded (O) */

dcl	P_callers_area_ptr	pointer parameter;		/* read_message: -> area in which to place the message (I) */
dcl	P_code		fixed binary (35) parameter;	/* read_message: set to standard system status code (O) */


/* Local copies of parameters */

dcl	callers_area_ptr	pointer;

dcl	code		fixed binary (35);


/* Remaining declarations */

/* format: idind30 */

dcl	1 v4_wakeup_state		aligned,
	  2 state,
	    3 switches		aligned,
	      4 allow_normal	bit (1) unaligned,
	      4 allow_urgent	bit (1) unaligned,
	      4 pad		bit (34) unaligned,
	    3 lock_id		bit (36) aligned,
	    3 event_channel		fixed bin (71),
	    3 process_id		bit (36) aligned,
	  2 pad			(64 - 5) bit (36) aligned;

/* format: idind20 */

dcl	1 local_mra	aligned like mseg_return_args;

dcl	error_table_$bad_subr_arg
			fixed binary (35) external;

dcl	ms_salvager_v4_	entry (pointer, fixed binary (35));
dcl	mseg_util_v4_$incremental_read_priv
			entry (pointer, pointer, bit (2) aligned, bit (72) aligned, pointer, bit (1) aligned,
			fixed binary (35));
dcl	mseg_util_v4_$read_priv
			entry (pointer, pointer, bit (1) aligned, pointer, bit (1) aligned, fixed binary (35));

dcl	(addr, string, unspec)
			builtin;
%page;
/* Salvage the version 4 message segment */

mseg_upgrade_from_v4_$salvage:
     entry (P_mseg_operation_ptr, P_salvage_completed);

	mseg_operation_ptr = P_mseg_operation_ptr;

	mseg_ptr = mseg_operation.mseg_ptr;

	call ms_salvager_v4_ (mseg_ptr, code);		/* it will report problems via admin_gate_ */

	P_salvage_completed = (code = 0);

	return;
%page;
/* Get the wakeup acceptance state of a version 4 message segment -- In version 4 segments, the wakeup state is stored in
   the header "message".  We will convert said "message" into the appropriate wakeup_state structure. */

mseg_upgrade_from_v4_$get_wakeup_state:
     entry (P_mseg_operation_ptr);

	mseg_operation_ptr = P_mseg_operation_ptr;

	mseg_ptr = mseg_operation.mseg_ptr;

	if mseg_ptr -> mseg_hdr_v4.ms_in_hdr
	then do;
		unspec (v4_wakeup_state) = unspec (mseg_ptr -> mseg_hdr_v4.hdr_ms);
		mseg_operation.wakeup_state.version = MSEG_WAKEUP_STATE_VERSION_1;
		string (mseg_operation.wakeup_state.flags) = string (v4_wakeup_state.switches);
		mseg_operation.wakeup_state.event_channel = v4_wakeup_state.event_channel;
		mseg_operation.wakeup_state.access_class = mseg_ptr -> mseg_hdr_v4.hdr_ms_access_class;
		mseg_operation.wakeup_state.process_id = v4_wakeup_state.process_id;
		mseg_operation.wakeup_state.lock_id = v4_wakeup_state.lock_id;
		mseg_operation.wakeup_state_valid = "1"b;
	     end;

	else mseg_operation.wakeup_state_valid = "0"b;

	return;
%page;
/* Read the requested message from a version 4 message segment */

mseg_upgrade_from_v4_$read_message:
     entry (P_mseg_operation_ptr, P_callers_area_ptr, P_code);

	mseg_operation_ptr = P_mseg_operation_ptr;
	callers_area_ptr = P_callers_area_ptr;
	code = error_table_$bad_subr_arg;		/* in case our caller's mseg_message_info is invalid */

	mseg_ptr = mseg_operation.mseg_ptr;

	mseg_message_info_ptr = addr (mseg_operation.message_info);

	if mseg_message_info.message_code = MSEG_READ_FIRST
	then call mseg_util_v4_$read_priv (mseg_ptr, callers_area_ptr, "0"b, addr (local_mra), "0"b, code);

	else if mseg_message_info.message_code = MSEG_READ_LAST
	then call mseg_util_v4_$read_priv (mseg_ptr, callers_area_ptr, "1"b, addr (local_mra), "0"b, code);

	else if mseg_message_info.message_code = MSEG_READ_SPECIFIED
	then call mseg_util_v4_$incremental_read_priv (mseg_ptr, callers_area_ptr, "00"b, mseg_message_info.ms_id,
		addr (local_mra), "0"b, code);

	else if mseg_message_info.message_code = MSEG_READ_BEFORE_SPECIFIED
	then call mseg_util_v4_$incremental_read_priv (mseg_ptr, callers_area_ptr, "10"b, mseg_message_info.ms_id,
		addr (local_mra), "0"b, code);

	else if mseg_message_info.message_code = MSEG_READ_AFTER_SPECIFIED
	then call mseg_util_v4_$incremental_read_priv (mseg_ptr, callers_area_ptr, "01"b, mseg_message_info.ms_id,
		addr (local_mra), "0"b, code);

	if code = 0
	then do;	/*** Read succeeded -- Fill in the mseg_message_info appropriately */
		mseg_message_info.ms_ptr = local_mra.ms_ptr;
		mseg_message_info.ms_len = local_mra.ms_len;
		mseg_message_info.ms_id = local_mra.ms_id;
		mseg_message_info.ms_access_class = local_mra.access_class;
		mseg_message_info.sender_id = local_mra.sender_id;
		mseg_message_info.sender_process_id = ""b;
		mseg_message_info.sender_level = local_mra.level;
		mseg_message_info.sender_authorization = local_mra.sender_authorization;
		mseg_message_info.sender_max_authorization = local_mra.sender_authorization;
		mseg_message_info.sender_audit = ""b;
	     end;

	P_code = code;

	return;

/* format: off */
%page; %include mseg_operation;
%page; %include mseg_message_info;
%page; %include mseg_wakeup_state;
%page; %include entry_access_info;
%page; %include mseg_hdr_v4;
%page; %include mseg_return_args_v4;
/* format: on */

     end mseg_upgrade_from_v4_;
