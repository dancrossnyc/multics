/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_print: proc (arg_iocb_ptr, arg_output_switch, data_ptr, mode, rel_offset, arg_no_prt, sntp, data_type, data_size);

/* Modified 10/76 by S. Barr to add COBOL data types and to use data_size with octal format */
/* Modified 1/77 by S. Barr to add number to print to "l" mode */
/* Modified 771116 by PG to add el & fl output modes */

/* parameters */

dcl  arg_iocb_ptr ptr;				/* arg_iocb pointer for iox_ ioa_ calls */
dcl  arg_output_switch char (32);			/* for print_text_ (to be removed eventually) */
dcl  data_type fixed bin;
dcl  data_size fixed bin;
dcl  data_ptr ptr,
     mode char (*) aligned,
    (rel_offset, arg_no_prt) fixed bin;

/* entries */

dcl
     print_text_ ext entry (ptr, fixed bin, char (*) aligned),
     db_get_sym ext entry (ptr),
     get_wdir_ ext entry returns (char (168) aligned),
     ioa_$ioa_switch entry options (variable),
     ioa_$ioa_switch_nnl entry options (variable),
     ioa_$rsnnl entry options (variable),
     db_line_no ext entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin);
dcl  comp_8_to_ascii_ entry (bit (*), char (*));
dcl  gr_print_ entry (char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  stu_$get_line entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin);
dcl  com_err_ entry options (variable);
dcl  condition_ entry (char (*), entry);
dcl  reversion_ entry (char (*));

/* automatic & based */

dcl  string char (64),
     num fixed bin,
     iocb_ptr ptr,
     output_switch char (32) aligned;			/* output_switch: default is user_output */

dcl
     i9 fixed bin (9),
    (no_prt, j, k, first, line_no, no, okp) fixed bin,
     code fixed bin (35),
     i fixed bin;


dcl  line_offset fixed bin;				/* char. position of source line */
dcl  line_length fixed bin;				/* length of source line */
dcl  file fixed bin;				/* file containing source line */

dcl  smap_ptr ptr;
dcl  packed_ptr ptr unal based (pp);
dcl  packed_bit_offset bit (6) based (pp);

dcl  hp ptr;
dcl  pp ptr,
     based_ptr ptr based;

dcl
     bits bit (arg_no_prt) based (pp),
     cbit_offset char (8) aligned,
     str char (no_prt) based (pp);

dcl 1 copy_its aligned like its ;


dcl  format char (20) var aligned init ("^6o ^6o ^v(^");
dcl  per_line fixed bin init (4);			/* no. of items per line */
dcl  octal bit (1) init ("0"b);			/* 1 = octal print out */
dcl  packed_decimal bit (1) init ("0"b);		/* 1 = packed_decimal format */
dcl  float bit (1) init ("0"b);			/* 1 = float binary data */
dcl (offset, loc) fixed bin;
dcl 1 ff aligned based (pp),
    2 (w0, w1, w2, w3, w4) fixed bin (35);
dcl  print_err bit (1) init ("1"b);			/* 1 = print error message */

/* builtins */

declare (addr, addrel, baseno, binary, divide, fixed, max, min, null, ptr, rel, substr, mod, unspec, hbound) builtin;

/* external static */

dcl  iox_$user_output ptr ext;

/* internal static */

dcl  bit_loc (8) int static options (constant) init (0, 5, 9, 14, 18, 23, 27, 32);
dcl  last_source char (32) static init (" ");		/* last source used for printing */
dcl  MODES (21) char (6) static init ("a", "b", "p", "P", "i", "I", "l", "s", "o", "h", "d", "f", "e", "g",
     "x", "comp-6", "comp-7", "comp-8", "comp-5", "fl", "el");

/* include files */

%include component_info;
%include db_snt;
%include its;
%include std_symbol_header;
%include source_map;

/* program */

	if arg_iocb_ptr = null then do;
	     iocb_ptr = iox_$user_output;
	     output_switch = "user_output";
	end;
	else do;
	     output_switch = arg_output_switch;
	     iocb_ptr = arg_iocb_ptr;
	end;

	no_prt = max (1, arg_no_prt);			/* get number of units to print */
	pp = data_ptr;				/* get pointer to first word to be printed */
	offset = rel_offset;			/* get offset within stack or linkage */
	loc = fixed (rel (pp), 17);

	call condition_ ("out_of_bounds", oob_handler);

	do j = 1 to hbound (MODES, 1) while (mode ^= MODES (j));
	end;
	if j > hbound (MODES, 1) then do;
	     call ioa_$ioa_switch (iocb_ptr, "Undefined output mode ""^a""", mode);
	     return;
	end;

	goto label (j);

/* a, x	character string */
label (1):
label (15):

	call ioa_$ioa_switch_nnl (iocb_ptr, "^6o ^6o """, loc, offset);

	if arg_no_prt > 0 then do;
	     call iox_$put_chars (iocb_ptr, pp, arg_no_prt, code);
	     if code ^= 0 then call com_err_ (code, "debug");
	end;
	call ioa_$ioa_switch (iocb_ptr, """");
	return;

/*  b	bit string */
label (2):
	call ioa_$ioa_switch (iocb_ptr, "^6o ^6o ""^b""b", loc, offset, bits);
	return;

/* p, P	pointer */
label (3):
label (4):

	if data_size = 36 then no = 1;
	else no = 2;

	do j = 1 to no_prt;

	     if no = 2 then do;
		if pp -> its.its_mod ^= "100011"b | pp -> its.mod
		then call ioa_$ioa_switch (iocb_ptr, "^6o ^6o  ^w ^w", loc, offset, w0, w1);
		else do;
		     i9 = fixed (pp -> its.bit_offset, 9); /* get bit offset of pointer */
		     if i9 ^= 0 then call ioa_$rsnnl ("(^d)", cbit_offset, okp, i9); /* convert it to character */
		     else cbit_offset = "";
		     call ioa_$ioa_switch (iocb_ptr, "^6o ^6o  ^o|^o^a", loc, offset, fixed (baseno (pp -> based_ptr), 18), fixed (rel (pp -> based_ptr), 18), cbit_offset);
		end;
	     end;

	     else do;
		if binary (packed_bit_offset) > 35
		then call ioa_$ioa_switch (iocb_ptr, "^6o ^6o  ^w", loc, offset, pp -> w0);
		else call ioa_$ioa_switch (iocb_ptr, "^6o ^6o  ^p", loc, offset, packed_ptr);
	     end;

	     pp = addrel (pp, no);
	     loc = loc + no;
	     offset = offset + no;
	end;
	return;

/*  i, I	instruction */
label (5):
label (6):
	if sntp = null then okp = 0;			/* ol_dump calls without snt table */
	else okp = 1;				/* Try to get line numbers */
	j = 0;

	do while (j < no_prt);

	     if okp = 1 then do;			/* try to get source line */

		call db_line_no (sntp, loc, first, no, line_no);
		if first < 0 then do;		/* can't find source line no. */
		     okp = 0;
		     no = no_prt - j;
		end;
		else do;
		     call ioa_$ioa_switch (iocb_ptr, "LINE NUMBER ^d", line_no);
		     no = no - loc + first;		/* In case loc is in middle of line */
		end;
	     end;
	     else no = no_prt;

	     no = min (no, no_prt - j);
	     call print_text_ (pp, no, output_switch);
	     loc = loc + no;
	     pp = addrel (pp, no);
	     j = j + no;
	end;
	return;

/*  l	instructions for a given line */
label (7):
	do j = 1 to no_prt;
	     call db_line_no (sntp, loc, first, no, line_no);
	     if first < 0 then goto ERROR_NO_LINE;
	     call ioa_$ioa_switch (iocb_ptr, "LINE NUMBER ^d", line_no);
	     call print_text_ (ptr (pp, first), no, output_switch);
	     loc = loc + no;
	end;

	return;

/*  s	source line */
label (8):
	call print_source;
	return;

/*  o, h	octal */
label (9):
label (10):
	octal = "1"b;
	format = format || ".3b ^)";
	if mode = "o" then per_line = 8;
	call print_data;
	return;

/*  d, comp-6, comp-7	decimal */
label (11):
label (16):
label (17):
	format = format || "13d^)";
	call print_data;
	return;

/*  f	float binary */
label (12):
	float = "1"b;
	format = format || "8.4f^)";
	call print_data;
	return;

/*  e */
label (13):
	float = "1"b;
	format = format || "8e^)";
	call print_data;
	return;

/*  fl    float-long */

label (20):
	float = "1"b;
	format = format || "19.6f^)";
	call print_data;
	return;

/*  el    exponential-long */

label (21):
	float = "1"b;
	format = format || "19e ^)";
	call print_data;
	return;

/*  g	graphic */
label (14):
	call gr_print_ (str);
	return;

/*  comp-5,  comp-8	COBOL */
label (18):
label (19):
	packed_decimal = "1"b;
	call print_data;
	return;

out:						/* for the out_of_bounds_handler */
	return;
ERROR_NO_LINE: call ioa_$ioa_switch (iocb_ptr, "Cannot get line.");
	return;

/*  */
/*  print_data prints "per_line" data items on one line.  It matches the data type with
   the format to prevent ioa_ from doing a data conversion before printing.
   The next line is checked with the current line.  If it is the same, then "=====" will be
   printed on the line instead.  This symbol will be printed only once for a series of repeated lines.
*/

print_data: proc;

dcl  same bit (1) init ("0"b);			/* ON if current output line is a repeat */
dcl  print_equal bit (1);				/* ON if should print ===== */
dcl  d_size fixed bin;
dcl  fl (4) float bin (63);
dcl  fx (4) fixed bin (71);
dcl  b bit (256);					/* copy of number to print in octal */
dcl  d fixed bin;					/* number of octal digits to print */
dcl  num_digits fixed bin;				/* Number of digits for paced decimal comp-8 */
dcl  check_ptr bit (1) aligned;			/* ON, for comp-8 with odd number of digits */
dcl  add_bit bit (1) aligned;				/* ON, if must add bit to data ptr */
dcl  next_p ptr;					/* points to next item to print */

dcl  fxb (8) fixed bin (35) based (pp);
dcl  bits (16) bit (d_size) based (pp);
dcl  based_comp bit (data_size+1) unal based (next_p);

dcl  data_line bit (data_line_len*2) unal based (pp);	/* line data_line_lenust printed + next line */
dcl  data_line_len fixed bin;				/* number of bits in one line */

	     d_size = data_size;
	     if d_size = 0 then d_size = 36;		/* no size given for temporaries (%) */
	     if d_size >72 & ^packed_decimal then d_size = 36;
	     data_line_len = d_size * per_line;

/* COBOL - Packed decimal data with an odd number of digits as an alternating data size.  (ie. 7 digits = 32 bits, 31...)
   db_print is given the smaller of these 2 sizes.  The pointer is digit aligned the first time.  Later a bit
   is added every other time to correct the pointer.
*/
	     check_ptr = "0"b;
	     if packed_decimal then do;
		num_digits = divide (d_size *2+1, 9, 17, 0);
		check_ptr = (mod (num_digits, 2) ^= 0);
		unspec (copy_its) = unspec (pp);
		num = fixed (copy_its.bit_offset, 6);
		do i = 1 to 8 while (num > bit_loc (i));
		end;

/* If the pointer is not aligned on a digit boundary, then the pointer will be rounded up to the next boundary. */
		if num ^= bit_loc (i) then do;
		     i = min (i, 8);
		     copy_its.bit_offset = substr (unspec (bit_loc (i)), 31, 6);
		     unspec (pp) = unspec (copy_its);
		end;
		add_bit = "1"b;

/* If there are an odd number of digits in a packed decimal number and we have the smaller of the two numbers
   then must add 2 bits for a line of 4 numbers. (i.e. 4*31+2 for 32, 31, 32, 31) */
		if check_ptr then data_line_len = data_line_len +2;
	     end;
	     k = loc - offset;

	     do while (no_prt > 0);
		per_line = min (no_prt, per_line);
		if same then if print_equal then do;
			call ioa_$ioa_switch (iocb_ptr, "======"); /* skip line */
			print_equal = "0"b;
		     end;
		     else;

		else do;

		     if octal then do;
			if d_size = 36
			then call ioa_$ioa_switch (iocb_ptr, format, loc, offset, per_line, bits);

/* Numbers to be printed in octal are copied into b so that they can be right justified.  Procedure ioa_ left justifies.  */
			else do;
			     call ioa_$ioa_switch_nnl (iocb_ptr, "^6o ^6o ", loc, offset);
			     do j = 1 to per_line;
				b = "0"b;
				d = divide (d_size+2, 3, 17, 0);
				substr (b, d*3-d_size+1, d_size) = bits (j);
				call ioa_$ioa_switch_nnl (iocb_ptr, " ^v.3b", d, b);
			     end;
			     call ioa_$ioa_switch (iocb_ptr, "");
			end;
		     end;

		     else if float then do;
			do j = 1 to per_line;
			     fl (j) = 0;
			     unspec (fl (j)) = unspec (bits (j));
			end;
			call ioa_$ioa_switch (iocb_ptr, format, loc, offset, per_line, fl);
		     end;

/* COBOL data type */
		     else if packed_decimal then do;
			call ioa_$ioa_switch_nnl (iocb_ptr, "^6o ^6o ", loc, offset, per_line);
			next_p = pp;
			do j = 1 to per_line;
			     call comp_8_to_ascii_ (based_comp, string);
			     call ioa_$ioa_switch_nnl (iocb_ptr, "  ^a", substr (string, 1, num_digits));

			     next_p = addr (next_p -> bits (2));

/* Add one bit to the pointer for odd digits per number. */
			     if check_ptr then do;
				if add_bit then do;
				     unspec (copy_its) = unspec (next_p);
				     num = fixed (copy_its.bit_offset, 6)+1;
				     copy_its.bit_offset = substr (unspec (num), 31, 6);
				     unspec (next_p) = unspec (copy_its);
				end;
				add_bit = ^add_bit;
			     end;
			end;
			call ioa_$ioa_switch (iocb_ptr, ""); /* new_line */
		     end;
		     else do;

			if d_size = 36 then call ioa_$ioa_switch (iocb_ptr, format, loc, offset, per_line, fxb);

			else do;
			     do j = 1 to per_line;
				if substr (bits (j), 1, 1) = "1"b then fx (j) = -1;
				else fx (j) = 0;
				substr (unspec (fx (j)), 73-d_size, d_size) = bits (j);
			     end;
			     call ioa_$ioa_switch (iocb_ptr, format, loc, offset, per_line, fx);

			end;
		     end;
		end;

		if ^same then print_equal = "1"b;

/* Check for duplicate line.  Last line of comp-8 with odd number of digits will be printed. */

		no_prt = no_prt - per_line;
		if no_prt > 0 then do;
		     if no_prt >= per_line then j = data_line_len;
		     else j = no_prt * d_size;
		     if check_ptr & (no_prt < 4) then same = "0"b;
		     else if substr (data_line, 1, j) = substr (data_line, data_line_len + 1, j) then same = "1"b;
		     else same = "0"b;
		end;
		pp = addr (substr (data_line, data_line_len+1, 1));
		loc = fixed (rel (pp), 17);
		offset = loc - k;

	     end;

	end print_data;

/*  */
/*  This procedure prints one or more lines of source code beginning with the line associated with the object code
   pointed to by data_ptr.  For an unbound segment, the directory in which
   the object segment was compiled is searched for the source segment.  If the source segment is not found there,
   the working directory is searched.  For bound segments only the working directory is searched for the source
   segment.
*/
print_source: proc;

dcl  source_based char (2) based (source_ptr);
dcl  source_dir char (168);
dcl  source_ent char (32);
dcl  source_len fixed bin;
dcl  source_name char (source_len) based (source_name_ptr);
dcl  source_name_ptr ptr;
dcl  source_ptr ptr;				/* pointer to source segment */

	     if sntp -> snt.symflag then call db_get_sym (sntp);

	     if snt.std then do;			/* standard header, use source map */
		hp = snt.headp;
		call stu_$get_line (hp, loc, no_prt, line_no, line_offset, line_length, file);

		if line_no = -1 | line_length = 0 then go to ERROR_NO_LINE;
		file = file + 1;			/* because of dimensioning in include file */

		if hp -> std_symbol_header.source_map = (18)"0"b then go to ERROR_NO_LINE;
		smap_ptr = addrel (hp, hp -> std_symbol_header.source_map);
		source_name_ptr = addrel (hp, smap_ptr -> source_map.map (file).pathname.offset);
		source_len = fixed (smap_ptr -> source_map.map (file).pathname.size, 18);

/* got source name, separate it out for initiate */

		call expand_pathname_ (source_name, source_dir, source_ent, code);

		call hcs_$initiate (source_dir, source_ent, "", 0, 1, source_ptr, code);

/* If there is no pointer to the source segment, look in the working directory.  */

		if source_ptr = null () then do;

		     if source_ent = last_source then print_err = "0"b;
		     if print_err then call ioa_$ioa_switch (iocb_ptr, "Cannot initiate source.  ^a>^a", source_dir,
			source_ent);

		     source_dir = get_wdir_ ();
		     call hcs_$initiate (source_dir, source_ent, "", 0, 1, source_ptr, code);

		     if source_ptr = null () then do;
			if ^print_err then call ioa_$ioa_switch (iocb_ptr, "Cannot initiate source.  ^a>^a",
			     source_dir, source_ent);
			return;
		     end;
		     if print_err then call ioa_$ioa_switch (iocb_ptr, "Using source  ^a>^a", source_dir, source_ent);

		end;
		last_source = source_ent;

/* Now just write out the requisite stuff */

		call iox_$put_chars (iocb_ptr, addr (substr (source_based, line_offset+1, 1)), line_length, code);
		call ioa_$ioa_switch (iocb_ptr, "");	/* add new-line */
		return;
	     end;

	     else call ioa_$ioa_switch (iocb_ptr, "Version 1 object segments are not supported by debug.");

	     return;

	end print_source;

/*  */
oob_handler: proc (mcp, name, x_p, y_p, cont_sw);

/*	Procedure to handle out_of_bounds. If it occurred in the data segment,
   *	the user specified to high an address or too much data. Else it's a real
   *	program error and we want to hear about it.
   */

dcl  name char (*);
dcl (x_p, y_p) ptr;
dcl  cont_sw bit (1) aligned;

%include mc;


	     scup = addr (mcp -> mc.scu);
	     if scu.tpr.tsr = substr (baseno (pp), 4) then do; /* oob in data seg. */
		call reversion_ ("out_of_bounds");
		call ioa_$ioa_switch (iocb_ptr, "Request goes beyond end of segment.");
		go to out;
	     end;

/* Elsewhere, use previous handler */

	     cont_sw = "1"b;
	     return;

	end oob_handler;
     end db_print;
