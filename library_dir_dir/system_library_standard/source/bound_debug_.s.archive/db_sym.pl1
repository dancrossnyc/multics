/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_sym: proc (line, a_sntp, data_ptr, offset, type, type_char, mode, a_size, m_size, code);


/*	Modified Nov 72 to convert to PL/I V2 by R Coren.
   *	Modified Nov 72 for 6180 (remove check entry ) by Bill Silver.
   *	Modified 10/76 to add COBOL data types by S. Barr. */
/* Changed to test for Version 1/pascal symbol table before testing data_ptr 10/14/83 S. Herbst */
dcl  line char (72) varying,
     a_sntp ptr,
     data_ptr ptr,
     offset fixed bin,
     type_char char (1) aligned,
     mode char (*) aligned,
     size fixed bin,
     a_size fixed bin,
     m_size fixed bin,
     code fixed bin;


dcl (addr, addrel, baseno, divide, fixed, length, min, null, ptr, rel, substr, unspec) builtin;

dcl  var_flag fixed bin;

dcl (type, n, i, j, steps) fixed bin,
     f17 fixed bin based,
    (p, stack_pt, found_block, symbol_pt, ref_pt) ptr,
     current_block ptr,
     packed_ptr based unaligned ptr,
     based_ptr based ptr,
     bn bit (18) aligned,
     db_get_sym ext entry (ptr),
     stu_$find_runtime_symbol entry (ptr, char (*) aligned, ptr, fixed bin) returns (ptr),
     stu_$get_runtime_address entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr),
     stu_$offset_to_pointer entry (ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr),
     stu_$decode_runtime_value entry (fixed bin, ptr, ptr, ptr, ptr, ptr, fixed bin) returns (fixed bin);

dcl  decode_type char (32) int static aligned
     init ("oddfooooooooopoppoobvavoiiip");
						/*  */
%include db_snt;
/*  */
%include stack_frame;
%include picture_image;
/*  */
%include symbol_node;
/*  */
%include runtime_symbol;
%include stu_frame;
/*  */
	sntp = a_sntp;				/* copy arg. */
	if sntp -> snt.symflag then call db_get_sym (sntp); /* attempt to get symbol pointer */
	current_block = sntp -> snt.symp;

	if current_block = null
	then do;
err2:	     code = 2;				/* no symbol table */
	     return;
	end;

	if baseno (sntp -> snt.lp) = "0"b then sntp -> snt.lp = null;

	code = 0;

	symbol_pt = db_var (1, (1), data_ptr, ref_pt, stack_pt);

	if symbol_pt = null
	then do;
err1:	     code = 1;				/* symbol not found */
	     return;
	end;

	if data_ptr = null
	then do;
err5:	     code = 5;				/* couldn't get address */
	     return;
	end;

/* have Version II symbol node */

	type = fixed (symbol_pt -> runtime_symbol.type, 6);

	if type = 38 | type = 39 then mode = "comp-5";
	else if type = 41 then mode = "comp-8";
	else if type = 63 then do;			/* PICTURE */
	     mode = "a";
	     p = ptr (snt.pp, symbol_pt -> runtime_symbol.size);
	     size = p -> picture_image.varlength;
	     type = 21;
	     goto l2;
	end;
	else mode = substr (decode_type, type+1, 1);
	var_flag = 0;

	if mode = "p" then do;
	     if symbol_pt -> runtime_symbol.packed then size = 36;
	     else size = 72;
	     go to l2;
	end;

	if mode = "v" then do;
	     var_flag = 1;
	     mode = substr (decode_type, type, 1);
	     a_size = data_ptr -> f17;
	     data_ptr = addrel (data_ptr, 1);
	     type = type - 1;
	end;

	size = symbol_pt -> symbol_node.size;
	if size < 0
	then do;
	     size = stu_$decode_runtime_value (size, found_block, stack_pt,
		sntp -> snt.lp, sntp -> snt.pp, ref_pt, code);
	     if code ^= 0 then do;
		code = 6;
		return;
	     end;
	end;


	if type = 3|type = 4 then size = size + 8;	/* floating-point, add in bits for exp */

	else if type = 14 then size = 36;			/* offset must be one fullword */

/* packed decimal */
	else if type = 38 then size = divide (size*9, 2, 17, 0);	/* unsigned */
	else if type = 39 | type = 41 then size = divide ((size+1)*9, 2, 17, 0);	/* sign uses one digit */

	else if mode ^= "a" & mode ^= "b" then do;
	     if ^symbol_pt -> symbol_node.packed then	/* unpacked, round size up to word */
		if size < 36 then size = 36;
		else size = 72;
	     else size = size + 1;			/* add sign bit to precision */
	end;

l2:	bn = baseno (data_ptr);

	m_size = size;
	if var_flag = 0 then a_size = size;
	else a_size = min (a_size, size);

	if bn = baseno (sntp -> snt.sp)
	then do;
	     type_char = "s";
	     offset = fixed (rel (data_ptr), 18) - fixed (rel (sntp -> snt.sp), 18);
	     return;
	end;

	if bn = baseno (sntp -> snt.static_ptr)
	then do;
	     type_char = "i";
	     offset = fixed (rel (data_ptr), 18) - fixed (rel (sntp -> snt.static_ptr), 18);
	     return;
	end;

	if bn = baseno (sntp -> snt.lp)
	then do;
	     type_char = "l";
	     offset = fixed (rel (data_ptr), 18) - fixed (rel (sntp -> snt.lp), 18);
	     return;
	end;

	type_char = "i";
	offset = 0;
exit:	return;

text_ref:	data_ptr = ptr (sntp -> snt.pp, 0);
	type_char = "t";
	mode = "i";
	goto l1;

link_ref:	if rel (sntp -> snt.lp) = (18)"0"b
	then do;
err3:	     code = 3;				/* no linkage */
	     return;
	end;

	data_ptr = sntp -> snt.lp;
	type_char = "l";

l1:	data_ptr = addrel (data_ptr, offset);
	return;

err4:	code = 4;					/* no stack frame */
	return;

err7:	code = 7;					/* syntax error */
	return;

err8:	code = 8;					/* array error */
	return;

err9:	code = 9;					/* value error */
	return;

err10:	code = 10;				/* based error */
	return;

err11:	code = 11;				/* more than 64 structure levels */
	return;

err12:	code = 12;				/* symbol too long */
	return;

err13:	code = 13;				/* ambiguous reference */
	return;

err14:	code = 14;				/* entry constant */
	return;

err15:	code = 15;				/* unsupported symbol table format (V1, Pascal) */
	return;

db_var:	proc (start_pos, end_pos, data_pt_out, ref_pt_out, stack_pt_out) returns (ptr);

dcl  start_pos fixed bin,				/* start index in line */
     end_pos fixed bin,				/* finish index in line (output) */
     data_pt_out ptr,				/* ptr to datum (output) */
     ref_pt_out ptr,				/* ref ptr for datum (output) */
     stack_pt_out ptr;				/* stack pointer for datum (output) */

dcl (p, q, s_pt, d_pt, r_pt, sp, dummy_pt, subs_pt) ptr,
    (pos, n, m, val, type, steps, subscript (32)) fixed bin,
    (thru, nosign) bit (1),
     ch char (1),
     db_get_count$dec entry (char (*) aligned, fixed bin, fixed bin) returns (fixed bin);

dcl  char_type (0: 127) fixed bin int static
     init ((33)0, 1, (2)0, 1, (9)0, 1, 0, (10)2, (7)0, (26)1, (4)0, 1, 0, (26)1, (5)0);

/*	char_type:	2     number
   1     letter ! $ . _
   0     other
   */

dcl  line_ char (72) aligned;

dcl  fix_single fixed bin (17) based,
     fix_double fixed bin (53) based,
     flt_single float bin (27) based,
     flt_double float bin (63) based;

	     pos = start_pos;
	     thru = "0"b;
	     r_pt, d_pt, s_pt = null;

again:	     call sob;
	     if thru then goto err7;

	     n = pos;
loop:	     ch = substr (line, pos, 1);
	     type = char_type (fixed (unspec (ch), 9));

	     if type > 0
	     then do;
		pos = pos + 1;
		if pos <= length (line) then goto loop;
		thru = "1"b;
	     end;

	     s_pt = stu_$find_runtime_symbol (current_block, substr (line, n, pos-n), found_block, steps);

	     if s_pt = null
	     then if steps = -2 then goto err11;
		else if steps = -3 then goto err12;
		else if steps = -5 then goto err13;
		else goto err1;

	     if ^s_pt -> runtime_symbol.flag then go to err15;

	     subs_pt = null;

	     if thru
	     then do;
chk_tl:		if n > 1 then goto ga;

		offset = fixed (s_pt -> symbol_node.offset, 18);

		if s_pt -> symbol_node.class = "1100"b	/* check for label/entry constant */
		then if s_pt -> runtime_symbol.flag
		     then if s_pt -> runtime_symbol.type = "011000"b
			then goto text_ref;		/* label constant is simple */
			else if s_pt -> runtime_symbol.type = "011001"b
			then go to err14; else;
		     else if s_pt -> symbol_node.type = "000000100101"b
		     then goto text_ref;
		     else if s_pt -> symbol_node.type = "000000100100"b
		     then go to err14;

		if s_pt -> symbol_node.class = "1101"b
		then if s_pt -> runtime_symbol.flag
		     then if s_pt -> runtime_symbol.type = "011010"b /* ext entry in */
			then go to err14;
			else go to link_ref;

		     else if s_pt -> symbol_node.type = "000000100100"b /* likewise */
		     then go to err14;
		     else go to link_ref;

		goto ga;
	     end;

	     call sob;
	     if thru then goto chk_tl;

	     if ch ^= "(" then goto ga;

	     n = 1;
sub_loop:	     pos = pos + 1;
	     call sob;
	     if thru then goto err7;

	     val = 0;
	     nosign = "1"b;
	     type = char_type (fixed (unspec (ch), 9));

	     if type ^= 1 then goto s1;

	     p = db_var (pos, pos, q, dummy_pt, dummy_pt);

	     if p = null then goto err1;
	     if q = null then goto err1;

	     if p -> runtime_symbol.flag then type = fixed (p -> runtime_symbol.type, 6);
	     else do;
		type = fixed (p -> symbol_node.type, 12);
		if type > 16 then type = type - 16;
	     end;

	     if type = 1 then val = q -> fix_single;
	     else if type = 2 then val = q -> fix_double;
	     else if type = 3 then val = q -> flt_single;
	     else if type = 4 then val = q -> flt_double;
	     else goto err9;

	     nosign = "0"b;

	     call sob;
	     if thru then goto err7;

s1:	     if ch = "+" | ch = "-" | (type = 2 & nosign)
	     then do;
		line_ = line;
		val = val + db_get_count$dec (line_, pos, pos);
		call sob;
		if thru then goto err7;
	     end;

	     subscript (n) = val;

	     if ch = ","
	     then do;
		n = n + 1;
		if n > 32 then goto err8;
		goto sub_loop;
	     end;

	     if ch ^= ")" then goto err7;

	     if n ^= fixed (s_pt -> symbol_node.ndims, 6) then goto err8;

	     if current_block -> runtime_block.flag
	     then if current_block -> runtime_block.fortran
		then do i = 1 to divide (n, 2, 17, 0);
		     m = subscript (i);
		     subscript (i) = subscript (n-i+1);
		     subscript (n-i+1) = m;
		end;

	     subs_pt = addr (subscript (1));

	     pos = pos + 1;
	     call sob;

ga:
	     sp = sntp -> snt.sp;

	     do i = 1 to steps while (sp ^= null);
		sp = sp -> frame.display;
	     end;


	     d_pt = stu_$get_runtime_address (found_block, s_pt, sp, sntp -> snt.lp,
		sntp -> snt.pp, r_pt, subs_pt);

	     if d_pt = null then goto err5;

	     if thru then goto done;

	     if substr (line, pos, 2) = "->"
	     then do;
		pos = pos + 2;

		if s_pt -> runtime_symbol.type = "001110"b /* offset */
		then do;
		     r_pt = stu_$offset_to_pointer (found_block, s_pt, d_pt,
			sp, sntp -> snt.lp, sntp -> snt.pp);
		     go to again;
		end;

		if s_pt -> runtime_symbol.type ^= "001101"b
		then if s_pt -> runtime_symbol.type ^= "011101"b
		     then goto err10;
		if ^ s_pt -> runtime_symbol.flag
		then if substr (s_pt -> symbol_node.type, 1, 6)
		     then goto err10;
		if s_pt -> runtime_symbol.packed then r_pt = d_pt -> packed_ptr;
		else r_pt = d_pt -> based_ptr;
		goto again;
	     end;

done:	     end_pos = pos;
	     data_pt_out = d_pt;
	     ref_pt_out = r_pt;
	     stack_pt_out = sp;
	     return (s_pt);

sob:	     proc;

sl:		if pos > length (line)
		then do;
fini:		     thru = "1"b;
		     return;
		end;

		ch = substr (line, pos, 1);
		if ch ^= " " then return;
		pos = pos + 1;
		goto sl;
	     end;


	end db_var;
     end;
