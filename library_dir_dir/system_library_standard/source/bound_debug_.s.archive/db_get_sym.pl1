/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

db_get_sym:	 proc (a_sntp);


/*	This procedure is called to get a pointer to a  symbol table block.
*	The pointer passed as an argument points to the  segment name table
*	of the procedure whose symbol table block we are to find.
*
*	Rewritten on Nov. 7, 1972  for the  6180  by  Bill Silver.
*	Modified Nov. 1, 1983 by Melanie Weaver to remove call to stu_$get_runtime_block
*/

dcl  a_sntp ptr;		/* Pointer to the procedure's segment name table. */

dcl	hdr_ptr	ptr,	/* Pointer to the header of the symbol table. */

	bp	ptr,

	work_ptr	ptr;	/* Temporary pointer. */


dcl	offset	fixed bin(18),	/*  Offset of procedure within its segment. */

	len	fixed bin,	/*  Length of the entry name.  */

	root	bit(18);		/*  Offset of root. */




dcl  stu_$find_containing_block
			ext entry (ptr, fixed bin(18)) returns (ptr),
     stu_$find_header 	ext entry (ptr, char (32) aligned, fixed bin) returns (ptr),
     stu_$find_block 	ext entry(ptr,char(*)) returns (ptr);

%include db_ext_stat_;
dcl	ioa_$ioa_stream 	ext entry options(variable);


dcl  (binary,addrel,index,substr, rel, null) builtin;
/**/
% include  db_snt;
/**/
%include std_symbol_header;


%include stu_frame;
/**/
%include pl1_symbol_block;
/**/
% include symbol_header;
/**/
% include symbol_node;
/**/

	sntp = a_sntp;		/* Copy argument.  Set pointer to segment name 
				*  table overlay.  */



/*	If the symbol table pointer in the segment name table is not null then it
*	is allready pointing to a symbol table block.
*/

	if    snt.symp  ^=  null()    then  return;


/*	We have to look for the symbol table block.   Set the flag in the segment
*	name table so that we won't look again  unless someone else resets the
*	flag.
*/
	snt.symflag  =  "0"b;


/*	Now get the header of the symbol table.
*/

	snt.std = "0"b;
	hdr_ptr  =  stu_$find_header( snt.pp,  snt.ent_pt_name, 0);

/*	If we can't get the header to the symbol table  then we will return.  */

	snt.headp = hdr_ptr;
	if  hdr_ptr  =  null()  then  return;


/*	If there is a pointer to the stack then we can extract the pointer to the
*	symbol table block from the stack information if necessary.
*/
	if    snt.sp  ^=  null()

		then  do;

		if    snt.pp  =  null()
			then  offset  =  binary (rel (snt.sp -> frame.entry), 18, 0);
						/* Use entry ptr if there is no procedure ptr. */
			else  offset  =  binary( rel(snt.pp), 18, 0);

		snt.symp = stu_$find_containing_block (hdr_ptr, offset);

		end;



/*	Now get the offset of the  root.  */

	if	hdr_ptr -> std_symbol_header.identifier  ^=  "symbtree"


		then    root  =  hdr_ptr ->symbol_header.root;


		else  do;

		snt.std = "1"b;
		if	hdr_ptr -> std_symbol_header.area_pointer  =  (18)"0"b    then  return;

		bp  =  addrel( hdr_ptr, hdr_ptr -> std_symbol_header.area_pointer );

		if	bp -> pl1_symbol_block.identifier  ^=  "pl1info"
			then  return;

		root  =  bp -> pl1_symbol_block.root;

		end;

/*	If we already got the symbol pointer from the stack frame we're done */

	if snt.sp ^= null() then return;


/*	If the root block of the symbol table is not present then we will have to return. */

	if	root  =  (18)"0"b    then    return;

/*	We have a valid symbol table.  We will search for the correct block as
*	identified by the entry name.  If no block is found for this entry name then
*	we will use the first block off of the root block.
*/
	len  =  index(snt.ent_pt_name," ") -1 ;		/* Get length of entry name. */
	if len = -1 then len = 32;

	work_ptr  =  stu_$find_block( hdr_ptr, substr(snt.ent_pt_name,1,len));

	if    work_ptr  =  null()			/* If no block found for this entry use
						*  the  first son off of the root.  */
		then  do;
		work_ptr  =  addrel(hdr_ptr, root);
		work_ptr  =  addrel(work_ptr, work_ptr->symbol_block.son);
		call  ioa_$ioa_stream (debug_output, "Using symbol table of ^A for ^a",
		      addrel(work_ptr,work_ptr->symbol_block.name), snt.ent_pt_name);
		end;

	snt.symp = work_ptr;		/* send back result */


	end	db_get_sym;
