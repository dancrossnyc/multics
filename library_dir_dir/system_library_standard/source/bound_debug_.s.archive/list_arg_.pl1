/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_arg_: proc(argno,atype,ap);

dcl  argno fixed bin (18),
     atype char (1) aligned;


dcl  argp ptr,
     decode_descriptor_ entry(ptr,fixed bin(18),fixed bin(18),bit(1) aligned,
     fixed bin(18),fixed bin(18),fixed bin(18)),
     ioa_$ioa_stream ext entry options(variable),
    (i,min_arg,max_arg,type) fixed bin (18),
     c72 char (72) aligned,
     bit17 bit (17) unaligned based (argp),
     fword fixed bin (18) based (argp),
     flword float bin based (argp),
    dblword float bin(63) based (argp),
    (no_args,no_desc,j,strl,ndims,scale) fixed bin (18),
     packed bit(1) aligned,
     bit_string bit (strl) based (argp),
     char_string char(strl) based (argp);

%include db_ext_stat_;

dcl  based_p ptr based;


dcl 1 lv based,
    2 ptr ptr,
    2 stack ptr;

%include its;

%include db_arg_list;

	no_args = arg_list.num_args;			/* get the number of arguments */
	if no_args = 0 then do;			/* check for no arguments */
	     call ioa_$ioa_stream (debug_output, "No arguments.");
	     return;
	end;
	no_desc = arg_list.num_desc;			/* and the number of descriptors */
	if argno <= 0 then do;
	     min_arg = 1;				/* print out all arguments */
	     max_arg = no_args;
	end;
	else min_arg, max_arg = argno; 		/* just print out the one argument */

	if argno > no_args then do; 			/* check for argument number too large */
	     call ioa_$ioa_stream (debug_output, "Arg no. ^d too large. Only ^d arguments.",argno,no_args);
	     return;
	end;

	do j = min_arg to max_arg; 			/* loop through the desired number of args */
	     argp = ap -> arg_list.args(j);		/* get pointer to the argument */
	     if atype = "?" then do; 			/* must find out argument type */
		if no_desc ^= 0 then do; 		/* if we have descitpros, look at them */
		     call decode_descriptor_(ap,j,type,packed,ndims,strl,scale);
		end;
		else do;				/* try to find out what type by heuristics */
		     if argp -> its.its_mod = "100011"b then type = 13;  /* assume pointer */
		     else do;
			do strl = 0 to 31 while(substr(char_string,strl+1,1) >= "" /* bell */
						&
					    substr(char_string,strl+1,1) <= "~");
			end;
			if strl >= 2 then type = 21;
			else type = -1;		/* full word octal */
		     end;
		end;
	     end; 				/* of checking for type */

	     else if atype = "l" then type = -2;		/* location of arg */
	     else if atype = "o" then  type = -1;	/* full word octal */
	     else if atype = "p" then type = 13;
	     else if atype = "d" then type = 1;		/* real fixed */
	     else if atype = "a" then		/* ascii */
		do;
		     call decode_descriptor_(ap,j,type,packed,ndims,strl,scale);	/* see if ascii descriptor */

		     if type = 22 then strl = max(0,addrel(argp,-1)->fword);
		     else if type = 21 then;
		     else do;
			type = 21;
			strl = 32;	/* he asked for characters, and cannot get length */
			end;
	          end;
	     else if atype = "e" then type = 3;		/* floating point */
	     else if atype = "f" then type = 1003;	/* floating point (f-format) */
	     else if atype = "b" then do;		/* bit string */
		type = 19;
		strl = 72;			/* only allow 72 bits or less */
	     end;
	     else do;				/* invalid type */
		call ioa_$ioa_stream (debug_output, "Invalid output type specified.");
		type = -1;
	     end;

	     if type = 21 then goto cs;		/* we have char string  */
	     if type = 19 then goto bs;		/* we have bit strinng */
	     if type = 14 then goto fw;		/* we have offset */

	     if type = 13 then do;			/* pointer */
		if argp -> its.its_mod = "100011"b then call ioa_$ioa_stream (debug_output, "ARG ^2d: ^p",j,argp->based_p);
		else call ioa_$ioa_stream (debug_output, "ARG ^2d: ^w  ^w",j,argp->fword,addrel(argp,1)->fword);
	     end;
	     else if type = 1 then 			/* real fixed bin single */
	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^d",j,argp -> fword);
	     else if type = 3 then
	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^e",j,argp -> flword);
	     else if type = 1003 then
	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^16.6f",j,argp -> flword);
	     else if type = 4 then
	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^e", j, argp->dblword);	/* long precision */
	     else if type = 20 then do; 		/* var and non-var bit string */
		strl = addrel(argp,-1) -> fword;
bs:		c72 = "";				/* set to blanks */
		do i = 1 to min(strl,72);
		     if substr(bit_string,i,1) = "1"b then substr(c72,i,1) = "1"; else substr(c72,i,1) = "0";
		end;
		call ioa_$ioa_stream (debug_output, "ARG ^2d: ""^a""b",j,c72);
	     end;
	     else if type = 22 then 			/* var char string */
	     do;
		strl = min(32,addrel(argp,-1) -> fword);
cs:		call ioa_$ioa_stream (debug_output, "ARG ^2d: ""^va""",j,strl,char_string);
	     end;
	     else if type = -1 then /* */
fw:	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^w",j,argp -> fword);	/* full word octal */
	     else if type = 15 | type = 16 then
	     call ioa_$ioa_stream (debug_output, "ARG ^2d: ^p, ^p",j,argp -> lv.ptr,argp -> lv.stack);
	     else if type = -2 then call ioa_$ioa_stream (debug_output, "ARG ^2d -> ^p",j,argp); /* location of arg */
	     else end_loop:  call ioa_$ioa_stream (debug_output, "ARG ^2d: Type ^d not handled.",j,type);

	end;
	return;

     end;
