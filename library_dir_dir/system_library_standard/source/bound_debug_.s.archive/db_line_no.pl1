/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_line_no:	proc(a_sntp, offset, first, number, line_no);

/*	Procedure to get the line number of the source statement associated
*	with a given offset in an object segment. Decides whether to call
*	get_line_no or get_runtime_line_no in stu_, according to whther
*	the symbol header is standard.
*
*	Coded March 1973 by Robert S> Coren.
*/

dcl	a_sntp ptr;		/* pointer to snt structure(input) */
dcl	offset fixed bin(18);	/* offset in object segment(input) */
dcl	first fixed bin(18);	/* first location in line(output) */
dcl	number fixed bin(18);	/* number of locations in line(output) */
dcl	line_no fixed bin;		/* line number associated with offset(output) */

dcl	db_get_sym entry(ptr);
dcl	stu_$get_line_no entry(ptr, fixed bin(18), fixed bin(18), fixed bin(18),
				fixed bin);
dcl	stu_$get_runtime_line_no entry(ptr, fixed bin(18), fixed bin(18), fixed bin(18),
				fixed bin);

%include db_snt;




	sntp = a_sntp;
	first, line_no = -1;

	if snt.symflag then call db_get_sym(sntp);

	/* with standard header, we can use the top-level symbol block */

	if snt.std then do;
	     if snt.headp ^= null() then
	     call stu_$get_runtime_line_no(snt.headp, offset, first, number, line_no);

	     return;
	end;

	/* Not standard, we'll have to make do with symbol table for current procedure */

	if snt.symp ^= null() then
	call stu_$get_line_no(snt.symp, offset, first, number, line_no);

	return;

	end db_line_no;
