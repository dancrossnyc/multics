/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_get_count:  proc(line,start_index,next_index,number);

/*	db_get_count	Parses the string "line" beginning at "start_index" and returns a fixed binary number.
			using an octal default.

	db_get_count$double	Returns a double word and uses an octal default.

	db_get_count$dec	Returns a fixed binary number, but assumes a decimal default.

	Escape strings must immediately preceed the number.

		&o	Change the default to octal.
		&d	Change the default to decimal.
*/




dcl  line char(132);			/* character string to convert to a number */
dcl (start_index,				/* index of start of string */
     next_index) fixed;			/* index of character following the number */
dcl  number fixed bin(35);			/* number returned */

dcl  no fixed bin(71)  init(0);
dcl  data_type fixed bin;
dcl  data_len fixed bin;
dcl (i,j,st,end) fixed bin;
dcl  data bit(1) init("0"b);
dcl  dec_default bit(1) init("0"b);		/* 1 =  assume decimal init("0");  0 = assume  octal init("0"); */
dcl  assign_ ext entry (ptr,fixed bin,fixed bin,ptr,fixed bin,fixed bin);
dcl  signal_ ext entry (char(*));
dcl (addr, fixed, index, length, substr, verify, unspec) builtin;
dcl  data_ptr ptr;				/* ptr to number */


	number = 0;
	call initial;
	if ^dec_default then number = no;
	else call decimal;
	return;

ERROR:	next_index = start_index;

RETURN:	return;


db_get_count$double: entry (line,start_index,next_index,double_no);

dcl  double_no fixed bin(71);

	data = "1"b;
	call initial;
	if ^dec_default then double_no = no;
	else do;
	     data_ptr = addr(double_no);
	     data_type = 4;
	     data_len = 71;
	     call decimal;
	end;

	return;

db_get_count$dec: entry (line,start_index,next_index,number);

	dec_default = "1"b;
	call initial;
	if dec_default then call decimal;
	else number = no;
	return;

db_get_count$data: entry(line,start_index,next_index,arg_ptr,arg_type,arg_len);

dcl (arg_type,				/* 2*arg type */
     arg_len) fixed bin;			/* precesion */
dcl  arg_ptr ptr;				/* pointer to location of number */

	data = "1"b;
	dec_default = "1"b;
	call initial;
	if ^dec_default then call assign_(arg_ptr,arg_type,arg_len,addr(no),4,71);
	else do;				/* decimal default */
	     i = verify (substr(line,st),"+-0123456789.e");
	     if i = 1 then go to ERROR;
	     else if i = 0 then i = end;
	     else i = st + i -2;
	     call assign_(arg_ptr, arg_type, arg_len,addr(substr(line,st)),43,i-st+1);
	     next_index = i + 1;
	end;

	return;

initial:	proc;

	st = start_index;
	end =length(line);
	if ^data then do;
	     data_ptr = addr(number);
	     data_type = 2;
	     data_len = 35;
	end;
	if substr(line,st,2) = "&o" then do;
	     st = st +2;
	     dec_default = "0"b;
	end;
	else if substr(line,st,2) = "&d" then do;
	     st = st + 2;
	     dec_default = "1"b;
	end;

	if ^dec_default then call octal;
	return;
	end initial;

octal:	proc;

dcl  minus bit(1);

	minus = "0"b;
	if substr(line,st,1) = "-" then do;
	     st = st + 1;
	     minus = "1"b;
	end;
	else if substr (line,st,1) = "+" then st = st + 1;

	i = verify(substr(line,st,end-st+1),"01234567");
	if i = 1 then do;
	     if substr(line,st,1) = "8" | substr(line,st,1) = "9" then call signal_("db_conversion");
	     else go to ERROR;
	end;
	else if i = 0 then j = end;
	else do;
	     j = st + i - 2;
	     if substr(line,j+1,1) = "8" | substr(line,j+1,1) = "9" then call signal_ ("db_conversion");
	end;
	no = 0;
	do i = st to j;
	     no = no*8 + fixed (unspec(substr(line,i,1)),35) - 48;
	end;
	next_index = j + 1;
	if minus then no = -no;
	return;
	end octal;

decimal:	proc;

	if ^data then do;			/* default is fixed bin(35) */
	     data_ptr = addr(number);
	     data_type = 2;
	     data_len = 35;
	     number = 0;
	end;

	i = verify (substr(line,st,end-st+1),"+-0123456789");

	if i = 1 then go to ERROR;
	if i = 0 then j = end;
	else j = st + i - 2;

	call assign_(data_ptr, data_type, data_len, addr(substr(line,st)), 43, j-st+1);
	next_index = j + 1;
	return;

	end decimal;

	end db_get_count;
