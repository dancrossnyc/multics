/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-09,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     There were several inconsistencies and problems with its usage message
     (mrds #149, phx19350). Changed the code so that each call to com_err_ used
     a constant for the usage message.
                                                   END HISTORY COMMENTS */


create_mrds_dsm: cmdsm: proc;

/*
   Create a MRDS database submodel (dsm) from a cmdsm  source.  Most
   of the interesting code is in four subroutines:
   .	mrds_dsm_parse,
   .	mrds_dsm_scanner,
   .	mrds_dsm_semantics, and
   .	mrds_dsm_compute_access.
   To change either the syntax or semantics involved in the creation
   of  a  dsm,  the  LRK source, mrds_dsm_parse.lrk, must be edited,
   followed by a series of  include  file  generations  and  program
   recompilations.   This   is   all   automated   in  an  exec_com,
   compile_dsm_lrk.ec .

   .	lrk mrds_dsm_parse -ssl
   .
   .	ted$com >udd>LIS>Wardd>lrk|hal_dcl mrds_dsm_parse mrds_dsm_terminals
   .	ted$com >udd>LIS>Wardd>Wardd|incl_cmt mrds_dsm_terminals
   .	indent mrds_dsm_terminals.incl
   .
   .	>udd>LIS>Wardd>msd mrds_dsm_parse mrds_dsm_skip_table
   .	ted$com >udd>LIS>Wardd>Wardd|incl_cmt mrds_dsm_skip_table
   .	indent mrds_dsm_skip_table.incl
   .	indent mrds_dsm_semantics
   .
   .	pl1 mrds_dsm_parse -tb -map
   .	pl1 mrds_dsm_semantics -tb -map
   .	pl1 mrds_dsm_scanner -tb -map

   Known Bugs:

   Other Problems:

   The submodel file is used  as  a  scratch  pad  to  store  access
   records  and  model  relation  names.  This  information is never
   cleaned up. It should at least be removed from the submodel  when
   its finished and should probably be moved to some other file.
   
   HISTORY:

   80-02-01 Spratt: written

   80-06-24 Spratt: Put working submodel in  the  process_dir  using
   .        mrds_dsm_define_temp,  added  submodel  validation   via
   .        mrds_dsm_valid_.

   80-10-29 Spratt: Added deletion of the temporary submodel in  the
   .        finish  proc,  under  the  control  of  a  new   switch,
   .        control_debug_submodel.  Added  a  new control argument,
   .        "-debug_submodel",  to  set  the  control_debug_submodel
   .        switch.

   80-11-08 Spratt: Added the -install control  argument.  submodels
   .        are now stored in the users working directory unless the
   .        -install  control argument is given, in which case it is
   .        "installed" under the  database  submodel  directory.  A
   .        call  to  a  new  dsm subroutine mrd_dsm_set_db_path was
   .        added to set  the  database  pathname  in  the  submodel
   .        header.  Append  access on the database directory is now
   .        only checked for when installing.

   11/25/80 by Lindsey  Spratt:  Changed  "finish"  processing.  The
   .        finish procedure now takes an argument which tells it to
   .        delete  the  submodel.  Most  calls  to finish now use a
   .        variable  as  the  argument,  submodel_deletion_control.
   .        Before  the  dsm  has  been  created, or defined, by the
   .        current invocation of  cmdsm,  submodel_deletion_control
   .        is   set   to   DONT_DELETE_SUBMODEL.   Once  cmdsm  has
   .        successfully        defined         the         submodel
   .        submodel_deletion_control  is  set  to  DELETE_SUBMODEL.
   .        Name  duplication  handling  has  been  added  for   the
   .        submodel.  If  a  dsm  of the given name already exists,
   .        nd_handler_ is called. The access on  the  database  now
   .        checked   for   is   sma,   instead   of   a.   If   the
   .        secure.submodels directory doesn't  already  exist  (and
   .        cmdsm  was invoked with -install), it is created. All of
   .        the error messages are now preceded by  a  newline.  The
   .        submodel is now created in place, instead of copied from
   .        the process_dir. mrds_dsm_define_temp was changed to use
   .        the  dsm_path  argument  as  an input argument if it was
   .        non-null. Mrds_dsm_dmdsm is now called  if  validate  is
   .        on,  even if generate_display is off. This is to use the
   .        validation  aspect  of  mrds_dsm_dmdsm.  Iocbs  are  now
   .        destroyed after being closed.

   81-01-12 Davids: changed the references of  mrds_dsm_display_rels
   .        to mrds_dsm_relation_names, changed the area set up from
   .        zero_on_free  to  zero_on_alloc  and removed the call to
   .        emtry which came right after the call to define_area_

   81-01-22     Davids:      changed      mrds_dsm_open_read      to
   .         mrds_dsm_open$read.

   81-01-28 Davids: removed the mrds_dsm_relation_names include file
   .        which was used.

   81-02-10 Davids: reformated the header and declaration sections

   .        reformated the code so  that  the  argument  processing,
   .        model  path  processing and submodel path processing are
   .        on separate pages.

   .        removed calls to the  internal  procedure  finish  which
   .        were  not  needed, nothing that finish cleans up was yet
   .        allocated.

   .        rewrote the argument  processing  so  that  it  is  much
   .        simpler and only takes the control arguments -list, -ls,
   .        -^list, -^ls, -install, -ins, -^install, -^ins. also the
   .        first non-control argument is the cmdsm source, the next
   .        is the db path, control args may come  before,  between,
   .        or after the path arguments.

   81-02-17 Davids: changed the arguments ^list, ^ls, ^install,  and
   .        ^ins to no_list, nls, no_install and nins.

   .        move the processing of the list path so that it  is  the
   .        first  thing  done,  also  if  the  list segment already
   .        exists it is truncated, if  it  does  not  exist  it  is
   .        created.  if  an error occurs before usefull information
   .        is placed in the listing and the listing was created  it
   .        is deleted.

   .        changed the name of  the  variable  controling  submodel
   .        deletion      from      submodel_deletion_control     to
   .        delete_submodel. Also changed the  finish  procedure  to
   .        use    the    gobal    variables   delete_submodel   and
   .        delete_listing rather than have parameters.

   81-02-18 Davids: fixed a bunch of  errors  that  were  introduced
   .        when the listing segment  processing  was  moved.  these
   .        included  using  elements  of  structures  that were not
   .        allocated, pointers that were not null'ed and typos that
   .        were  also  variables. also changed the finish procedure
   .        so  that  it  does  not  use   the   pointers   in   the
   .        mrds_dsm_parse_info  str but uses the automatic pointers
   .        that  are  used  to  set   the   pointer   elements   in
   .        mrds_dsm_parse_info.

   .        replaced         get/release_temp_segments_         with
   .        get/release_temp_segment.  only one temp segment is ever
   .        used.

   .        changed  the  name  of  the  submodel_name  variable  to
   .        dsm_name  so  that  the  variable  names refering to the
   .        submodel segment are more consistant.

   .        changed  all  calls  to  mrds_dsm_close  in  the   finsh
   .        procedure to mrds_dsm_close$force. also removed the call
   .        to iox_$destroy_iocb since that is now done by close.

   .        changed the  name  of  source_dir  to  cmdsm_source_dir,
   .        source_entry  to  cmdsm_source_entry and delete_submodel
   .        to delete_dsm for more consistant names.

   81-02-19 Davids: added security and DBAness checks.  now  only  a
   .        DBA can use the -install (-ins) control argument,  if  a
   .        DBA  creates  a  submodel for a secure database and does
   .        not install it a warning message is issued  and  only  a
   .        DBA can use the cmdsm command against a secure database.

   .        changed the  error  message  for  a  non-existant  cmdsm
   .        source.

   81-02-25  Davids  header  and  declaration  sections  reformated.
   .        removed   the   include   files   iox_modes,   iox_dcls,
   .        mrds_dsm_entry_dcls, and control_argument_dcls.

   .        changed the call to dmd_$open_dm to mrds_dm_open$open_dm
   .        so secure databases can be opened.

   .        access of sma is now put on the submodel directory  (for
   .        the  DBA)  if  the install option is used and access was
   .        not already there.

   .        mrds_dsm_dmdsm is now called only if a listing is to  be
   .        preoduced. it is called in such a manner that validation
   .        is  not  done.  submodel  validation  will  be  done  by
   .        semantics and compute_access.

   .        the  call  to  mrds_dsm_set_db_path  was  replaced  with
   .        mrds_dsm_write_header   which   will  write  a  complete
   .        header, i.e. set the relation count.

   81-02-26 Davids: changed the call of mrds_dm_open$open_dm to just
   .        mrds_dm_open.

   81-02-27 Davids removed the  iox_$user_output  declaration.  this
   .        pointer was used if  a  listing  was  not  going  to  be
   .        generated  but  the  call  to mrds_dsm_dmdsm was done to
   .        validate the submodel. the call  is  now  made  only  to
   .        produce a listing.

   .        changed the call to dmd_$close_dm to mrds_dm_close.

   .        mrds_dsm_dmdsm  always  expects  the  validate  bit   in
   .        dsm_display_info to be set. if it is not set dmdsm blows
   .        up with a null pointer. The bit is now set.

   81-03-02 Davids: changed error_table_$arg_err to argerr.  arg_err
   .        does not exist.

   81-05-05 Davids: added force and no_force control arguments

   .        now using hcs_status_ rather than  hcs_$get_user_effmode
   .        to determine the acl on the secure.submodels directory.

   .        now   calling    mrds_dm_authorization$set_needed_access
   .        rather  than  hcs_$add_dir_acl  to  set  the  acl on the
   .        secure.submodels directory for a DBA

   .        changed name  duplication  handling  to  only  delete  a
   .        segment  (msf)  if  its  a submodel and to only unlink a
   .        link if its target is a submodel.

   81-05-07   Davids:    modified    to    set    the    value    of
   .        mrds_dsm_parse_info.data_mode_ptr, which was just  added
   .        to the mrds-dsm_parse_info structure.

   81-05-11   Davids:    changed    the    calling    sequence    of
   .        mrds_dsm_compute_access to include the  pointer  to  the
   .        listing iocb.

   81-05-13 Davids: added code to call cmdsm_v1 in  the  event  that
   .        the database is a version 3 or  earlier.  reordered  the
   .        processing of db_path and listing so that the db_path is
   .        first, followed by the submodel path,  followed  by  the
   .        listing path.

   81-05-15      Davids:      modified      to       check       the
   .        mrds_dsm_parse_info.highest_severity*  values   and   to
   .        delete  the created submodel unless all values are zero.
   .        Also the listing will not contain the dmdsm  display  if
   .        the source had errors.

   81-05-22  Davids:  added  data_model_ptr  to  the  parameters  of
   .         mrds_dsm_compute_access so that it can determine if the
   .         relation access is valid.

   81-05-27 Davids: changed the setting of delete_dsm so that it  is
   .        inited to "1"b and so that it is only set to "0"b if  no
   .        errors occured. There used to be a window where the only
   .        thing in the submodel would be the header record.

   81-05-28 Davids: modified to handle the new mrds_dsm_display_info
   .        structure (replaces the dsm_display_info structure).

   .        modified so that if the responce from nd_handler  is  no
   .        the  old submodel is not deleted, this started happening
   .        when the default value of delete_dsm  was  set  to  "1"b
   .        instead of "0"b.

   81-05-29 Davids: modified so that if an entry with  the  submodel
   .        name already exists and its not a  submodel  it  is  not
   .        deleted  and  so that as long asa non-zero error code is
   .        return from nd_handler the entry is not deleted.

   81-06-25     Davids:     Changed      the      references      to
   .        mrds_dsm_parse_info.submodel_iocb_ptr in  the  calls  to
   .        write_header  and  close  to references to dsm_iocb_ptr.
   .        both pointers start off withthe same value but the  call
   .        to  close  changes  the value to null - a new version of
   .        iox_ does this now (it didn't use to). the  new  version
   .        of iox_ also goes crazy when you give it a pointer to an
   .        iocb that it has already close/detached/destroyed.  this
   .        change gets around the changed behavior of iox.

   81-07-21 Jim Gray : changed logic to not try to build a submodel,
   if  a  severity  >=  1 occured in the parsing. Also added message
   about submodel not being created, and the highest severity  error
   message seen, if the severity was > 0.

   81-08-06 Davids: changed the inited value of delete_dsm  to  "0"b
   .        (from "1"b) and do not set it to "1"b until the submodel
   .        msf  has  been  successfully created i.e. after the call
   .        the mrds_dsm_define_temp and its  associated  error  and
   .        name_dup  processing. This elimintaed several setting of
   .        the switch to "0"b before this  point.  This  change  is
   .        required  because if an error occurs before the value of
   .        dsm_name is set (in the call to hcs_$initiate_count)  it
   .        could  be  ""  or  garbadge, if its null then the finish
   .        procedure will end up deleting the working directory.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

/* AUTOMATIC */

	dcl     arg_index		 fixed bin;	/* index of argument */
	dcl     arg_len		 fixed bin (21);	/* length of argument */
	dcl     arg_ptr		 ptr;		/* pointer to argument */

	dcl     cmdsm_source_bc	 fixed bin (24);	/* bit count of the cmdsm source */
	dcl     cmdsm_source_dir	 char (168);	/* directory containing cmdsm source */
	dcl     cmdsm_source_entry	 char (32);	/* entry name of cmdsm source */
	dcl     cmdsm_source_path	 char (168);	/* path of cmdsm source */
	dcl     cmdsm_source_ptr	 ptr init (null ());/* pointer to the cmdsm source */

	dcl     code		 fixed bin (35);	/* error code */

	dcl     control_debug_parse	 bit (1) init ("0"b); /* debug switch for mrds_dsm_parse */
	dcl     control_debug_scanner	 bit (1) init ("0"b); /* debug switch for mrds_dsm_scanner */
	dcl     control_debug_semantics bit (1) init ("0"b); /* debug switch for mrds_dsm_semantics */

	dcl     data_model_ptr	 ptr init (null ());/* pointer to the database data_model segment */

	dcl     db_path		 char (168) init (""); /* path of database directory */

	dcl     delete_dsm		 bit (1) init ("0"b); /* controls deletion of submodel msf */
	dcl     delete_listing	 bit (1) init ("0"b); /* controls deletion of listing segment */

	dcl     dsm_dir		 char (168);	/* containing directory of submodel */
	dcl     dsm_iocb_ptr	 ptr init (null ());/* iocb pointer to the submodel */
	dcl     dsm_name		 char (32);	/* entry name of submodel msf */
	dcl     dsm_path		 char (168);	/* path of submodel */

	dcl     force		 bit (1) unal init ("0"b); /* true if existing submodel should be deleted without query */
	dcl     install		 bit (1) init ("0"b); /* true if submodel is to be installed */

	dcl     listing_dir		 char (168) init (""); /* directory containing the listing segment */
	dcl     listing_entry	 char (32) init (""); /* entry name of listing segment */
	dcl     listing_iocb_ptr	 ptr init (null ());/* iocb pointer to the listing segment */
	dcl     listing_ptr		 ptr init (null ());/* pointer to the listing segment */

	dcl     local_area		 area (1000);	/* local area for allocs, no need to free */
	declare max_severity	 fixed bin;	/* highest severity error seen */
	dcl     nargs		 fixed bin;	/* number of arguments this command was called with */
	dcl     produce_listing	 bit (1) aligned init ("0"b); /* true if listing is to be produced */

	dcl     ring		 fixed bin;	/* user ring */
	dcl     ring_array		 (3) fixed bin (3); /* ring brackets for submodel dir */

	dcl     01 status_stuff	 like status_branch;/* space for status to put info in */

	dcl     temp_dsm_path	 char (168) init (""); /* path to a temp segment used as a local area */
	dcl     temp_seg_ptr	 ptr init (null ());/* pointer to the temp segment */

	dcl     user_id		 char (32);	/* person.project.tag of user */
	dcl     work_area_ptr	 ptr init (null ());/* pointer to the local area */

/* BASED */

	dcl     arg		 char (arg_len) based (arg_ptr); /* the argument */
	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);

/* BUILTIN */

	dcl     addr		 builtin;
	dcl     divide		 builtin;
	dcl     empty		 builtin;
	dcl     fixed		 builtin;
	dcl     length		 builtin;
	dcl     max		 builtin;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;
	dcl     substr		 builtin;
	dcl     unspec		 builtin;

/* CONDITION */

	dcl     cleanup		 condition;

/* CONSTANT */

	dcl     CMDSM_SUFFIX	 char (5) internal static options (constant) init ("cmdsm");
	dcl     CREATE_A_DIRECTORY	 init (1) fixed bin (1) internal static options (constant);
	dcl     DONT_CHASE_LINKS	 init (0) fixed bin (1) internal static options (constant);
	dcl     DONT_COPY		 init (0) fixed bin (1) internal static options (constant);
	dcl     DSM_SUFFIX		 char (3) internal static options (constant) init ("dsm");
	dcl     LISTING_SUFFIX	 char (4) internal static options (constant) init ("list");
	dcl     MYNAME		 char (15) init ("create_mrds_dsm") internal static options (constant);
	dcl     SMA_MODE_VALUE	 init ("01011"b) bit (5) unal internal static options (constant);
	dcl     STREAM_OUTPUT	 fixed bin init (2) internal static options (constant);
	dcl     USAGE 		 char (60) internal static options (constant) init
	("^/Usage: cmdsm dsm_source_path database_path {-control_args}");
/* ENTRY */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     define_area_	 entry (ptr, fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     get_ring_		 entry returns (fixed bin (3));
	dcl     get_temp_segment_	 entry (char (*), pointer, fixed bin (35));
	dcl     get_wdir_		 entry () returns (char (168));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*),
				 fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$del_dir_tree	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$delentry_file	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$status_	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin, fixed bin (35));
	dcl     ioa_		 options (variable) entry;
	declare ioa_$ioa_switch	 entry options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35));
	dcl     mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_close	 entry (ptr, fixed bin (35));
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
	dcl     mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dsm_close	 entry (ptr, fixed bin (35));
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     mrds_dsm_compute_access entry (char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_define_temp	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_dmdsm	 entry (ptr, fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_parse	 entry (ptr, fixed bin (35));
	dcl     mrds_dsm_write_header	 entry (ptr, char (*), fixed bin (35));
	dcl     nd_handler_		 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     nd_handler_$force	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     release_temp_segment_	 entry (char (*), pointer, fixed bin (35));
	dcl     suffixed_name_$new_suffix entry (char (*), char (*), char (*), char (32), fixed bin (35));

/* EXTERNAL */

	dcl     error_table_$action_not_performed fixed bin (35) external static;
	dcl     error_table_$bad_arg	 fixed bin (35) external static;
	dcl     error_table_$empty_file fixed bin (35) external static;
	dcl     error_table_$insufficient_access fixed bin (35) external static;
	dcl     error_table_$namedup	 fixed bin (35) external static;
	dcl     error_table_$no_dir	 fixed bin (35) external static;
	dcl     error_table_$noentry	 fixed bin (35) external static;
	dcl     error_table_$pathlong	 fixed bin (35) external static;
	dcl     error_table_$wrong_no_of_args fixed bin (35) external static;
	dcl     iox_$error_output	 ptr external static;
	dcl     mrds_data_$dsmd_version_number fixed bin (35) external static;
	dcl     mrds_data_$submodel_dir_name char (16) external static;
	dcl     mrds_error_$no_database fixed bin (35) external static;
	dcl     mrds_error_$no_model_submodel fixed bin (35) external static;
	dcl     mrds_error_$version_3_db fixed bin (35) external static;
	dcl     sys_info$max_seg_size	 fixed bin (35) external static;

/* set up */

	on cleanup call finish;

	call ioa_ ("CMDSM Version ^d submodels.^/", mrds_data_$dsmd_version_number);

	cmdsm_source_path = "";
	mrds_dsm_display_info_ptr = null;
	mrds_dsm_parse_info_ptr = null;

/* process arguments */

	call cu_$arg_count (nargs);
	if nargs < 2
	then do;
		call com_err_ (error_table_$wrong_no_of_args, MYNAME, USAGE);
		goto exit;
	     end;

	do arg_index = 1 to nargs;
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, MYNAME, "^/Error while processing argument ^i", arg_index);
		     goto exit;
		end;
	     if substr (arg, 1, 1) = "-"
	     then do;
		     if arg = "-list" | arg = "-ls"
		     then produce_listing = "1"b;
		     else
			if arg = "-no_list" | arg = "-nls"
		     then produce_listing = "0"b;
		     else
			if arg = "-install" | arg = "-ins"
		     then install = "1"b;
		     else
			if arg = "-no_install" | arg = "-nins"
		     then install = "0"b;
		     else
			if arg = "-force" | arg = "-fc"
		     then force = "1"b;
		     else
			if arg = "-no_force" | arg = "-nfc"
		     then force = "0"b;
		     else do;
			     call com_err_ (error_table_$bad_arg, MYNAME, "^/Unrecognizable control argument ^a", arg);
			     goto exit;
			end;
		end;
	     else do;
		     if cmdsm_source_path = ""
		     then cmdsm_source_path = arg;
		     else
			if db_path = ""
		     then db_path = arg;
		     else do;
			     call com_err_ (0, MYNAME, "Extra path supplied ^a" || USAGE, arg);
			     goto exit;
			end;
		end;
	end;

	if db_path = ""
	then do;
		call com_err_ (error_table_$wrong_no_of_args, MYNAME, USAGE);
		goto exit;
	     end;

/* process database path */

	call mrds_dsl_get_version$get_path_info (db_path, addr (local_area),
	     mrds_path_info_structure_version, mrds_path_info_ptr, code);
	if code = mrds_error_$no_model_submodel
	then do;
		call com_err_ (mrds_error_$no_database, MYNAME, "^/^a is not a valid database path", db_path);
		call finish;
	     end;
	else
	     if code = mrds_error_$version_3_db
	then do;
		call com_err_ (code, MYNAME, "^/^a", db_path);
		call finish;
	     end;
	else
	     if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to get version info for ^a", db_path);
		call finish;
	     end;

	db_path = mrds_path_info.absolute_path;
	if ^mrds_path_info.model
	then do;
		call com_err_ (mrds_error_$no_database, MYNAME, "^/^a is not a valid database path", db_path);
		call finish;
	     end;

	call mrds_dm_open (db_path, 2, data_model_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to open the database ^a", db_path);
		call finish;
	     end;

	call mrds_dm_db_secured$get_secured_status (data_model_ptr, addr (local_area),
	     database_state_structure_version, database_state_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to get secured state of database ^a", db_path);
		call finish;
	     end;

	call mrds_dm_authorization$get_user_class (db_path, addr (local_area),
	     mrds_authorization_structure_version, mrds_authorization_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to get user class for database ^a", db_path);
		call finish;
	     end;

	if database_state.secured & ^mrds_authorization.administrator
	then do;
		call com_err_ (error_table_$insufficient_access, MYNAME,
		     "^/Only a DBA can create a submodel for a secure database");
		call finish;
	     end;

	if database_state.secured & ^install & mrds_authorization.administrator
	then call com_err_ (0, MYNAME,
		"^/WARNING: You are not installing this submodel which is defined for a secure database");

	if install
	then do;
		if ^mrds_authorization.administrator
		then do;
			call com_err_ (error_table_$insufficient_access, MYNAME,
			     "^/Only a DBA may install a submodel");
			call finish;
		     end;

		call hcs_$status_ (db_path, mrds_data_$submodel_dir_name, DONT_CHASE_LINKS, addr (status_stuff),
		     null (), code);
		if code = error_table_$noentry
		then do;
			ring = get_ring_ ();
			user_id = get_group_id_$tag_star ();
			ring_array (1) = ring;
			ring_array (2) = ring;
			ring_array (3) = ring;
			call hcs_$append_branchx (db_path, mrds_data_$submodel_dir_name, fixed (SMA_MODE_VALUE),
			     ring_array, user_id, CREATE_A_DIRECTORY, DONT_COPY, 0, code);
			if code ^= 0
			then do;
				call com_err_ (code, MYNAME, "^/Unable to create the submodel directory in ^a", db_path);
				call finish;
			     end;
		     end;
		else
		     if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to determine access to the submodel directory in ^a", db_path);
			call finish;
		     end;
		else do;
			if status_stuff.short.mode ^= SMA_MODE_VALUE
			then do;
				call mrds_dm_authorization$set_needed_access (db_path, code);
				if code ^= 0
				then do;
					call com_err_ (code, MYNAME, "^/Unable to set needed access in the database ^a", db_path);
					call finish;
				     end;
			     end;
		     end;

		if length (rtrim (db_path)) + 1 + length (rtrim (mrds_data_$submodel_dir_name)) > length (dsm_dir)
		then do;
			call com_err_ (error_table_$pathlong, MYNAME, "^/^a>^a exceeds the maximum path length of ^d.",
			     db_path, mrds_data_$submodel_dir_name, length (dsm_dir));
			call finish;
		     end;

		dsm_dir = rtrim (db_path) || ">" || rtrim (mrds_data_$submodel_dir_name);
	     end;
	else dsm_dir = get_wdir_ ();

/* submodel path processing */

	call expand_pathname_$add_suffix (cmdsm_source_path, CMDSM_SUFFIX, cmdsm_source_dir, cmdsm_source_entry, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Could not use the string ^a as a data submodel pathname.",
		     cmdsm_source_path);
		call finish;
	     end;

	call hcs_$initiate_count (cmdsm_source_dir, cmdsm_source_entry, "", cmdsm_source_bc, 1, cmdsm_source_ptr, code);
	if cmdsm_source_ptr = null
	then do;
		call com_err_ (code, MYNAME, "^/Cannot find the submodel source ^a>^a", cmdsm_source_dir, cmdsm_source_entry);
		call finish;
	     end;

	if cmdsm_source_bc = 0
	then do;
		call com_err_ (error_table_$empty_file, MYNAME, "^/The source file cannot be empty: ^a>^a.", cmdsm_source_dir,
		     cmdsm_source_entry);
		call finish;
	     end;

	call suffixed_name_$new_suffix (cmdsm_source_entry, CMDSM_SUFFIX, DSM_SUFFIX, dsm_name, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to make submodel name.");
		call finish;
	     end;

	if install
	then do;
		if length (rtrim (dsm_dir)) + 1 + length (rtrim (dsm_name)) > length (dsm_path)
		then do;
			call com_err_ (error_table_$pathlong, MYNAME, "^/^a>^a exceeded the maximum path length of ^d.", dsm_dir,
			     dsm_name, length (dsm_path));
			call finish;
		     end;
		dsm_path = pathname_ (dsm_dir, dsm_name);
	     end;
	else do;
		call absolute_pathname_ (dsm_name, dsm_path, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to make pathname for submodel: ^a.", dsm_name);
			call finish;
		     end;
	     end;

	call mrds_dsm_define_temp (dsm_path, dsm_iocb_ptr, code);
	if code = error_table_$namedup
	then do;
		call mrds_dsm_open$read (dsm_path, dsm_iocb_ptr, code);
		if code = 0
		then do;
			call mrds_dsm_close$force (dsm_iocb_ptr);
			if force
			then call nd_handler_$force (MYNAME, dsm_dir, dsm_name, code);
			else call nd_handler_ (MYNAME, dsm_dir, dsm_name, code);
			if code = error_table_$action_not_performed
			then call finish;
			else
			     if code ^= 0
			then do;
				call com_err_ (code, MYNAME,
				     "^/Unable to do name duplication processing on the submodel entry ^a.", dsm_path);
				call finish;
			     end;
			else call mrds_dsm_define_temp (dsm_path, dsm_iocb_ptr, code);
		     end;
		else do;
			call com_err_ (code, MYNAME, "^/^a already exists and is not a submodel", dsm_path);
			call finish;
		     end;
	     end;

	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to create submodel entry ^a.", dsm_path);
		call finish;
	     end;

	delete_dsm = "1"b;

/* process the listing segment path and iocb's */

	if produce_listing
	then do;
		call expand_pathname_ (cmdsm_source_path, cmdsm_source_dir, cmdsm_source_entry, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to expand the cmdsm source path");
			call finish;
		     end;

		call suffixed_name_$new_suffix (cmdsm_source_entry, CMDSM_SUFFIX, LISTING_SUFFIX, listing_entry, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to make listing name.");
			call finish;
		     end;

		listing_dir = get_wdir_ ();
		call hcs_$initiate (listing_dir, listing_entry, "", 0, 1, listing_ptr, code);
		if listing_ptr ^= null ()
		then do;
			call hcs_$truncate_seg (listing_ptr, 0, code);
			if code ^= 0
			then do;
				call com_err_ (code, MYNAME, "^/Unable to truncate the already existing listing segment ^a>^a",
				     listing_dir, listing_entry);
				call finish;
			     end;
		     end;
		else do;
			call hcs_$make_seg (listing_dir, listing_entry, "", 14, listing_ptr, code);
			if code ^= 0
			then do;
				call com_err_ (code, MYNAME, "^/Unable to create the listing segment ^a>^a",
				     listing_dir, listing_entry);
				call finish;
			     end;
			else delete_listing = "1"b;
		     end;

		call iox_$attach_name (listing_entry, listing_iocb_ptr, "vfile_ " || listing_entry, null, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to attach to the listing segment.");
			call finish;
		     end;
		call iox_$open (listing_iocb_ptr, STREAM_OUTPUT, "0"b, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to open the listing segment switch.");
			call finish;
		     end;
	     end;

/* set up the working area */

	allocate area_info;
	area_info.version = 1;

	call get_temp_segment_ (MYNAME, temp_seg_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to get temporary segments.");
		call finish;
	     end;
	work_area_ptr = temp_seg_ptr;
	area_info.extend = "1"b;
	area_info.owner = MYNAME;
	area_info.size = sys_info$max_seg_size;
	area_info.areap = work_area_ptr;
	area_info.zero_on_alloc = "1"b;
	call define_area_ (area_infop, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to define area on temporary segment at ^p.", work_area_ptr);
		call finish;
	     end;
	free area_info;

/* parse the cmdsm source */

	allocate mrds_dsm_parse_info in (work_area);
	mrds_dsm_parse_info.version = MRDS_DSM_PARSE_INFO_VERSION_1;
	mrds_dsm_parse_info.debug_parse = control_debug_parse;
	mrds_dsm_parse_info.debug_semantics = control_debug_semantics;
	mrds_dsm_parse_info.debug_scanner = control_debug_scanner;
	mrds_dsm_parse_info.work_area_ptr = work_area_ptr;
	mrds_dsm_parse_info.listing_iocb_ptr = listing_iocb_ptr;
	mrds_dsm_parse_info.submodel_iocb_ptr = dsm_iocb_ptr;
	mrds_dsm_parse_info.source_ptr = cmdsm_source_ptr;
	mrds_dsm_parse_info.source_length = divide (cmdsm_source_bc, 9, 17, 0);
	mrds_dsm_parse_info.error_iocb_ptr = iox_$error_output;
	mrds_dsm_parse_info.data_model_ptr = data_model_ptr;
	mrds_dsm_parse_info.highest_severity = 0;
	mrds_dsm_parse_info.highest_severity_scanner = 0;
	mrds_dsm_parse_info.highest_severity_semantics = 0;

	delete_listing = "0"b;

	call mrds_dsm_parse (mrds_dsm_parse_info_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME, "^/Unable to parse.");
		call finish;
	     end;

	max_severity = max (mrds_dsm_parse_info.highest_severity,
	     mrds_dsm_parse_info.highest_severity_scanner,
	     mrds_dsm_parse_info.highest_severity_semantics);
	if max_severity = 0 then do;

		call mrds_dsm_write_header (dsm_iocb_ptr, db_path, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to write the submodel header record in the submodel: ^a.", dsm_name);
			call finish;
		     end;

		call mrds_dsm_close (dsm_iocb_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to close the switch for the submodel, ^a.", dsm_path);
			call finish;
		     end;

		call mrds_dsm_compute_access (MYNAME, dsm_path, listing_iocb_ptr, data_model_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to compute the access within the submodel.");
			call finish;
		     end;
	     end;

/* produce the listing */

	if produce_listing & max_severity = 0
	then do;
		allocate mrds_dsm_display_info in (work_area);
		unspec (mrds_dsm_display_info) = "0"b;
		mrds_dsm_display_info.version = MRDS_DSM_DISPLAY_INFO_VERSION;
		mrds_dsm_display_info.submodel_pathname = dsm_path;
		mrds_dsm_display_info.rel_names_array_ptr = null;
		mrds_dsm_display_info.output_iocb_ptr = mrds_dsm_parse_info.listing_iocb_ptr;
		mrds_dsm_display_info.format = "l";
		mrds_dsm_display_info.access = "1"b;
		mrds_dsm_display_info.administrator = "1"b;

		call mrds_dsm_open$read (mrds_dsm_display_info.submodel_pathname,
		     mrds_dsm_display_info.submodel_iocb_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to re-open temporary submodel for creating display.");
			call finish;
		     end;

		call mrds_dsm_dmdsm (mrds_dsm_display_info_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to append submodel display to listing.");
			call finish;
		     end;
	     end;

/* finish up */

	if max_severity = 0 then
	     delete_dsm = "0"b;
	else do;					/* error occured */
		call ioa_ ("^/An error of severity ^d occured.^/Submodel not created.^/", max_severity);
		if produce_listing then
		     call ioa_$ioa_switch (mrds_dsm_parse_info.listing_iocb_ptr,
			"^/An error of severity ^d occured.^/Submodel not created.^/", max_severity);
	     end;

	call finish;

exit:
	return;

finish: proc;

	if data_model_ptr ^= null ()
	then do;
		call mrds_dm_close (data_model_ptr, code);
		if code ^= 0
		then call com_err_ (code, MYNAME, "^/Unable to close the database model");
	     end;

	if listing_iocb_ptr ^= null
	then do;
		call iox_$close (listing_iocb_ptr, code);
		call iox_$detach_iocb (listing_iocb_ptr, code);
		call iox_$destroy_iocb (listing_iocb_ptr, code);
	     end;

	if delete_listing
	then call hcs_$delentry_file (listing_dir, listing_entry, code);

	if dsm_iocb_ptr ^= null
	then call mrds_dsm_close$force (dsm_iocb_ptr);

	if delete_dsm
	then do;
		call hcs_$del_dir_tree (dsm_dir, dsm_name, code); /* delete the msf components */
		if code = 0 | code = error_table_$no_dir
		then call hcs_$delentry_file (dsm_dir, dsm_name, code);
	     end;

	if cmdsm_source_ptr ^= null
	then call hcs_$terminate_noname (cmdsm_source_ptr, code);

	if mrds_dsm_parse_info_ptr ^= null ()
	then free mrds_dsm_parse_info in (work_area);

	if mrds_dsm_display_info_ptr ^= null
	then do;
		if mrds_dsm_display_info.submodel_iocb_ptr ^= null
		then call mrds_dsm_close$force (mrds_dsm_display_info.submodel_iocb_ptr);

		free mrds_dsm_display_info in (work_area);
	     end;

	if temp_seg_ptr ^= null
	then do;
		call release_temp_segment_ (MYNAME, temp_seg_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "^/Unable to release temporary segments.");
		     end;
	     end;
	goto exit;

     end /* finish */;

%include mrds_dsm_display_info;
%page;
%include area_info;
%page;
%include mrds_dsm_parse_info;
%page;
%include mrds_database_state;
%page;
%include mrds_authorization;
%page;
%include mrds_path_info;
%page;
%include status_structures;


     end /* create_mrds_dsm */;
