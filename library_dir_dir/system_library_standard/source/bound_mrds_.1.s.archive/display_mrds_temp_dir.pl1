/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - August 1979
   Modified by Jim Gray - - 80,9-24, to make use of the new common
   routine dsl_$get_opening_temp_dir, for getting the temp dir of a particular opening.

*/

display_mrds_temp_dir: dmtd: procedure ();

/* DESCRIPTION:

   this routine is called from command level with one argument,
   to display either the temporary storage that is being
   used by a currently open MRDS database by giving the
   database index returned by the call to dsl_$open,
   or the current temporary directory that would be used
   by the next call to dsl_$open by giving "-cur"
   or "-current" as the argument, instead of a database index.
   the display is a pathname down the temporary directory.
   the current pathname can be changed by a call to the command
   set_mrds_temp_dir, giving the new path as the argument.

*/

/* PARAMETERS:

   database_index - - (input) an integer between 1 and 64, that was returned by
   a call to dsl_$open, for that particular database opening.
   both a database index and the "-current" argument can not be given.

   option - - (input) either "-current" or "-cur" may be given in place of a database
   index, but not both.

   temporary_directory - - (output) pathname donw to the directory where temporary storage will/is to be stored.
   if a database index was the input, the temporary storage directory
   for that opening is dislayed, for the -current option, the temporary directory
   that would be used for the next open will be displayed.

   error_messages - - (output) via com_err_, in case unrecogizable, insufficient,
   or invalid arguments are given

*/

/* check for only one argument */

	call cu_$arg_count (nargs);
	if nargs ^= 1 then
	     call com_err_ (error_table_$wrong_no_of_args, caller_name, "^/^a ^d ^a",
		"The number of arguments =", nargs, "was not 1, either a database index, or ""-current"" option.");
	else do;

/* get the argument, and check for option or index */

		call cu_$arg_ptr (1, arg_ptr, arg_len, error_code);
		if error_code ^= 0 then
		     call com_err_ (error_code, caller_name, "^/^a", "Unable to obtain the given argument.");
		else do;
			if argument = "-current" | argument = "-cur" then do;

/* get current status of temporary directory pathname */

				pathname = mrds_dsl_resultant_storage$get ();
				call display_path (ON);
			     end;
			else do;

/* check for a valid database index */

				valid_index = ON;
				if verify (argument, "0123456789") ^= 0 | length (argument) > 2 then valid_index = OFF;
				else do;
					database_index = fixed (argument);
					if database_index < 1 | database_index > mrds_data_$max_dbs then valid_index = OFF;
				     end;
				if ^valid_index then call com_err_ (error_table_$bad_arg, caller_name, "^/^a^a^a ^d^a",
					"The database index argument """, argument,
					""" is not an integer between 1 and", mrds_data_$max_dbs, ".");
				else do;

/* good index, get a pathname from the dbcb segment pointer */

					pathname = mrds_dsl_resultant_storage$get_opening_temp_dir (database_index, error_code);
					if error_code ^= 0 then
					     call com_err_ (error_code, caller_name, "^/^a^d^a",
						"The database index """, database_index,
						""" could not be expanded into a temporary directory pathname.");
					else call display_path (OFF);
				     end;
			     end;
		     end;
		return;
	     end;

display_path: procedure (current_option);

/* output the temporary directory pathname obtained */

	if pathname = BLANK then do;

		call ioa_ ("^/The temporary directory is not set, it will default to the user's process directory.^/");

	     end;

	else do;

		if current_option then
		     call ioa_ ("^/The current temporary directory is:^/");
		else call ioa_ ("^/The temporary directory for database index ^d is:^/", database_index);

		call ioa_ ("^a^/", pathname);

	     end;



	declare current_option	 bit (1);		/* on => -current option, else database index */

     end;

	declare BLANK		 char (1) init (" "); /* space character */
	declare mrds_dsl_resultant_storage$get_opening_temp_dir entry (fixed bin (35), fixed bin (35))
				 returns (char (168)); /* gets temp dir for db index */
	declare database_index	 fixed bin (35);	/* opening index */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare caller_name		 char (21) init ("display_mrds_temp_dir"); /* name of calling routine */
	declare pathname		 char (168);	/* temp dir path to be displayed */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* bad command argument */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* arg count ^= 1 */
	declare nargs		 fixed bin;	/* current argument count */
	declare cu_$arg_count	 entry (fixed bin); /* gets number of arguments */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets argument */
	declare arg_ptr		 ptr;		/* points to argument */
	declare arg_len		 fixed bin (21);	/* length of argument */
	declare argument		 char (arg_len) based (arg_ptr); /* input argument */
	declare com_err_		 entry options (variable); /* reports errors */
	declare mrds_dsl_resultant_storage$get entry returns (char (168)); /* gets current temp dir */
	declare ioa_		 entry options (variable); /* displays/formats pathname */
	declare (verify, length, fixed) builtin;
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare valid_index		 bit (1);		/* on => good db index value */
	declare mrds_data_$max_dbs	 fixed bin (35) ext;/* most open dbs at one time */


     end;
