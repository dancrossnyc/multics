/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - February 1980
   Modified by Jim Gray - - April 1980, to add submodel capability.

   81-01-22 Jim Gray : changed to take advantage of extended interface of
   mrds_dsl_get_version$get_path_info, replacing the $header entry.

   83-01-18  Roger Lackey : added mrds_error_$no_model_submodel to handle
   the case where mrds_dsl_get_version$get_path_info
   returns mrds_error_$no_database.  Also declared undeclared variables.

*/

display_mrds_db_version: dmdv: procedure ();

/* DESCRIPTION:

   This routine is to be called from command level,
   to display the version number of a MRDS database,
   given it's pathname, and the expanded pathname of that
   database with a possible ".db" suffix, whether or not
   the input pathname had the suffix.
   NOTE: the user must have at least read access to the database model.

*/

/* PARAMETERS:

   database_path - - (input) the relative pathname of the database,
   with or without the ".db" suffix if the database has one.

   database_version - - (output) the version of the software and architecture
   of the database whose pathname was given.
   Additional information, such as creator, and time created are also given.

*/
%page;
	call cu_$arg_count (nargs);
	if nargs ^= 1 then
	     call com_err_ (error_table_$wrong_no_of_args, caller_name,
		"^/Usage: display_mrds_db_version  database_pathnname^/");
	else do;

		call cu_$arg_ptr (1, arg_ptr, arg_len, code);
		if code ^= 0 then
		     call com_err_ (code, caller_name,
			"^/Unable to get pathname argument.^/");
		else do;

			area_ptr = addr (work_area);
			call mrds_dsl_get_version$get_path_info (database_path, area_ptr,
			     mrds_path_info_structure_version, mrds_path_info_ptr, code);
			if code ^= 0 then do;
				if code = mrds_error_$no_database then
				     code = mrds_error_$no_model_submodel;
				call com_err_ (code, caller_name,
				     "^/Unable to get database information using the path ""^a"".", mrds_path_info.absolute_path);
			     end;
			else do;

				if mrds_path_info.mrds_version > 1 | mrds_path_info.type.submodel then
				     call date_time_ (mrds_path_info.creation_time, time);
				else do;
					time = UNKNOWN;
					mrds_path_info.creator_id = UNKNOWN;
				     end;


				if mrds_path_info.type.submodel then
				     type = " Sub";
				else type = "Data";

				call ioa_ ("^/^a model: ^a^/^3xversion: ^d^/^3xcreated: ^a^/^8xby: ^a^/",
				     type, mrds_path_info.absolute_path, mrds_path_info.mrds_version,
				     time, mrds_path_info.creator_id);

			     end;

		     end;

	     end;
%page;
	declare type		 char (4);	/* either Sub or Data for datamodels or submodels */
	declare ioa_		 entry options (variable); /* display to terminal subroutine */
	declare mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin,
				 ptr, fixed bin (35)); /* gets db get_path_info info */
	declare com_err_		 entry options (variable); /* does error i/o */
	declare code		 fixed bin (35);	/* error status encoding */
	declare database_path	 char (arg_len) based (arg_ptr); /* input pathname argument */
	declare date_time_		 entry (fixed bin (71), char (*)); /* converts time to character form */
	declare cu_$arg_count	 entry (fixed bin); /* gets number of arguments */
	declare nargs		 fixed bin;	/* argument count */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets character string arguments */
	declare caller_name		 char (24) init ("display_mrds_db_version"); /* name of calling routine */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* arg count ^= 1 */
	dcl     mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$no_model_submodel fixed bin (35) ext static;
	declare arg_ptr		 ptr;		/* pointer to pathname argument */
	declare arg_len		 fixed bin (21);	/* length of pathname arg */
	declare time		 char (24);	/* converted form of time */
	declare UNKNOWN		 char (24) init ("Unknown in this version.");
	declare work_area		 area (1024);	/* space for get_path_info structure */
	declare area_ptr		 ptr;		/* pointer to work area */
	dcl     addr		 builtin;
	dcl     empty		 builtin;
%page;
%include mrds_path_info;

     end;
