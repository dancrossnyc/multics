/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

display_mrds_dm: dmdm: proc;


/* .		     BEGIN_DESCRIPTION

   This procedure has two entry points:
   1) dmdm the display_mrds_dm command
   2) rmdb_rq_dmdm entry point called from rmdb (restructure_mrds_db) ssu_

   They both display of the data base model info and support the same control
   arguments.  The dmdm command can be used on pre version 4 type database
   where as the rmdb_rq_dmdm only works on version 4 databases.

   The dmdm command errors are displayed using com_err_ and the rmdb_rq_dmdm
   errors use ssu_$abort_line.

   Its purpose is to process the control arguments
   and to then calls the mrds_dm_display routine to do the display work.

   .		      END_DESCRIPTION
*/



/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     add new control arguments for unreferenced objects and crossreferences.
  2) change(86-08-21,Blair), approve(86-08-21,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Put in calls to check whether or not the model is inconsistent and require
     the user to make the database consistent before he can look at the model.
     This is necessary because restructuring may have left the database
     inconsistent.
  3) change(86-10-21,Blair), approve(86-10-21,PBF7311), audit(86-10-23,Dupuis),
     install(86-10-23,MR12.0-1199):
     Make the clean up on inconsistent database call mrds_rst_$execute_undo
     instead of rmdb_execute_undo so as to not violate the libraries rule.
                                                   END HISTORY COMMENTS */


/*  HISTORY
   82-05-15  Written by Roger Lackey
   83-01-10  Roger Lackey : Modified to call mdbm_util_$get_user_class  to not allow non-DBA
   from displaying a secured database.

   83-01-11  Roger Lackey : Added a call to dmd_$get_secured_state to determine
   if datbase was secured.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/
%page;
/*  display_mrds_dm or dmdm command */

	ep = COMMAND;				/* Multics command interface */

	call init;				/* Internal routine */
	delete_xref_file_flag = "1"b;

	on cleanup call tidy_up;			/* Establish a cleanup handler */

	rmdb_ctl_ptr = null;

	call cu_$arg_count (nargs);			/* Get the number of arguments supplied */
	if nargs < 1 then do;			/* Must have at least the db path */
		call com_err_ (0, my_name,
		     "^/Usage: display_mrds_dm  database_path {-control args}");

		call tidy_up ();
		return;
	     end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);	/* Get db path */
	if code ^= 0 then call error (code, arg);

	if index (arg, "-") = 1 then call error (error_table_$noarg,
		"^/First argument must be the data base pathname.");

/*		Determine which version we have 	*/

	call get_temp_segment_ (my_name, temp_seg_ptr, code);
	if code ^= 0 then call error (code, "Getting temp segment.");

	work_area_ptr = temp_seg_ptr;
	wa = empty ();				/* Make it an area */

	call mrds_dsl_get_version$get_path_info (arg, work_area_ptr,
	     mrds_path_info_structure_version, mrds_path_info_ptr, code);

	if mrds_path_info_ptr = null () then
	     dbp = arg;
	else dbp = mrds_path_info.absolute_path;
	absolute_database_path = dbp;

	if code ^= 0 then do;
		if code = mrds_error_$no_model_submodel then /* not db found */
		     code = mrds_error_$no_database;

		call error (code, "^/" || absolute_database_path);
	     end;

	if mrds_path_info.type.submodel then do;	/* not usable via submodels */
		call com_err_ (error_table_$badcall, my_name,
		     "^/Data submodels are not supported by this command.  ^a", dbp);
		call tidy_up ();
		goto exit;
	     end;

	else do;
		call mdbm_util_$get_user_class ((mrds_path_info.absolute_path), work_area_ptr,
		     mrds_authorization_structure_version, mrds_authorization_ptr, code);
		if code ^= 0
		then do;
			call ioa_$rs ("Unable to determine if you are a DBA for ^a", err_msg,
			     length (err_msg), mrds_path_info.absolute_path);
			call error (code, err_msg);
		     end;

		if ^mrds_authorization.administrator
		then do;
			structure_version = 1;
			call dmd_$get_secured_state ((mrds_path_info.absolute_path),
			     work_area_ptr, structure_version, database_state_ptr, code);
			if code ^= 0 then do;
				err_msg = "Unable to determine data base secured state.";
				call error (code, err_msg);
			     end;
			else if database_state.secured then do;

				code = error_table_$insufficient_access;
				err_msg = "^/The user must be a database administrator to perform this operation on a secured database.";
				call error (code, err_msg);
			     end;
		     end;

	     end;

	call initiate_file_ (dbp, "db_model", R_ACCESS, dbm_ptr, (0), code); /* Assume it is a version 4 or later */
	if code = error_table_$moderr then do;
		call mrds_dm_authorization$set_needed_access (rtrim (dbp), code); /* fails if user not DBA */
		if code ^= 0 then
		     code = mrds_error_$no_model_access;
		else call initiate_file_ (dbp, "db_model", R_ACCESS, dbm_ptr, (0), code); /* Assume it is a version 4 or later */
	     end;
	if dbm_ptr = null then call error (mrds_error_$no_database, "^/" || dbp);
	else terminate_file_flag = "1"b;

	allocate mrds_dm_display_info in (wa) set (mrds_dm_display_info_ptr);

	mrds_dm_display_info.version = MRDS_DM_DISPLAY_INFO_VERSION_1;
	mrds_dm_display_info.output_iocb_ptr = iox_$user_output; /* May get changed with -of control arg */
	mrds_dm_display_info.db_path = absolute_database_path;

/* A temp dir will be created  either under this dir or under the dir supplied
   by the -temp_dir control arg */

	temp_dir_father_dir = mrds_dsl_resultant_storage$get_temp_dir ();

	mrds_dm_display_info.work_area_ptr = work_area_ptr;
	mrds_dm_display_info.dbm_ptr = dbm_ptr;

	string (mrds_dm_display_info.sw) = "0"b;	/* Turn off all swiches */
	mrds_dm_display_info.sw.default = "1"b;
	mrds_dm_display_info.dom_name_list_ptr = null;
	mrds_dm_display_info.attr_name_list_ptr = null;
	mrds_dm_display_info.rel_name_list_ptr = null;
	mrds_dm_display_info.index_name_list_ptr = null;
	mrds_dm_display_info.xref_iocb_ptr = null;

	first_arg_number = 2;			/* Cause we had a db pathname */

	goto common;
%page;
/* ******************  rmdb_rq_dmdm   entry point      *******************   */

rmdb_rq_dmdm: entry (I_sci_ptr, I_rmdb_ctl_ptr);

/*      rmdb_rq_dmdm PARAMETERS     */

	dcl     I_sci_ptr		 ptr parameter;	/* Pointer to ssu info structure */
	dcl     I_rmdb_ctl_ptr	 ptr parameter;	/* Pointer to restructuring control structure */

	sci_ptr = I_sci_ptr;
	rmdb_ctl_ptr = I_rmdb_ctl_ptr;
	ep = REQUEST;

	call init;				/* Internal routine */
	delete_xref_file_flag = "0"b;

	on cleanup call tidy_up;			/* Establish a cleanup handler */

	if rmdb_ctl.version ^= RMDB_CTL_VERSION_1 then
	     call error (error_table_$unimplemented_version, "rmdb_create_rel_info.incl.pl1");

	if rmdb_ctl.absolute_db_path = " " then call error (mrds_error_$no_db_path, "");

	work_area_ptr = rmdb_ctl.work_area_ptr;		/* Set wa pointer */

	allocate mrds_dm_display_info in (wa) set (mrds_dm_display_info_ptr);

	mrds_dm_display_info.version = MRDS_DM_DISPLAY_INFO_VERSION_1;
	mrds_dm_display_info.output_iocb_ptr = iox_$user_output; /* May get changed with a -of cotrol arg */
	mrds_dm_display_info.db_path = rmdb_ctl.absolute_db_path;
	mrds_dm_display_info.temp_dir_path = rmdb_ctl.temp_dir_path;
	mrds_dm_display_info.work_area_ptr = rmdb_ctl.work_area_ptr;
	mrds_dm_display_info.dbm_ptr = rmdb_ctl.db_model_ptr;
	mrds_dm_display_info.xref_iocb_ptr = rmdb_ctl.crossref_file_info.iocb_ptr;
	mrds_dm_display_info.xref_name = rmdb_ctl.crossref_file_info.name;

	string (mrds_dm_display_info.sw) = "0"b;	/* Turn off all swiches */
	mrds_dm_display_info.sw.default = "1"b;
	mrds_dm_display_info.dom_name_list_ptr = null;
	mrds_dm_display_info.attr_name_list_ptr = null;
	mrds_dm_display_info.rel_name_list_ptr = null;
	mrds_dm_display_info.index_name_list_ptr = null;

	call ssu_$arg_count (sci_ptr, nargs);

	first_arg_number = 1;			/* No pathname arg for this entry point */
	goto common;

%page;
common:

	mrds_control_arg_found = "0"b;

	call mdbm_util_$inconsistent_get_info (mrds_dm_display_info.dbm_ptr,
	     incon_flag, incon_name, incon_message, undo_request);           /* See if db is inconsistent */

	if incon_flag then          /* DB is inconsistent */
	     if ep = COMMAND
	     then do;
		code = mrds_error_$inconsistent_database;
		err_msg = incon_message;
		call error (code, err_msg);
		end;
	     else call mrds_rst_$execute_undo (sci_ptr,
		"display_data_model", mrds_dm_display_info.db_path,
		mrds_dm_display_info.dbm_ptr, incon_name, undo_request);

	do i = first_arg_number to nargs;		/* Process all the rest of the args */

	     if ep = COMMAND then do;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then call error (code, "Getting arg");
		end;
	     else call ssu_$arg_ptr (sci_ptr, i, arg_ptr, arg_len);

	     if index (arg, "-") = 1 then do;	/* Must be a control arg */

		     if arg = "-cmdb" | arg = "-create_mrds_db" then /*  *** -cmdb  */
			cmdb_arg_found, mrds_dm_display_info.sw.cmdb = "1"b;


		     else if arg = "-bf" | arg = "-brief" then do; /*  *** -brief */
			     mrds_dm_display_info.sw.default = "0"b;
			     mrds_dm_display_info.sw.long = "0"b;
			     brief_flag = "1"b;
			end;


		     else if arg = "-xref" | arg = "-crossref" then do;
			     mrds_control_arg_found = "1"b;
			     if i + 1 > nargs then mrds_dm_display_info.sw.all_xref = "1"b;
			     else do;
				if ep = COMMAND
				then call cu_$arg_ptr (i+1, arg_ptr, arg_len, code);
				else call ssu_$arg_ptr (sci_ptr, i+1, arg_ptr, arg_len);
				if index (arg, "-") ^= 1 then do;
				     if arg = "all"
				     then mrds_dm_display_info.sw.all_xref = "1"b;
				     else if arg = "dom" | arg = "domain" | arg = "domains"
					then mrds_dm_display_info.sw.domain_xref = "1"b;
				     else if arg = "attr" | arg = "attribute" | arg = "attributes"
					then mrds_dm_display_info.sw.attribute_xref = "1"b;
				     else call error (error_table_$bad_arg, "Following -crossref: " || arg);
				     i = i + 1;	/* swallow this arg */
				     end;
				else mrds_dm_display_info.sw.all_xref = "1"b;
				end;
			end;

		     else if arg = "-lg" | arg = "-long" then do; /*  ***  -long */
			     mrds_dm_display_info.sw.default = "0"b;
			     mrds_dm_display_info.sw.long = "1"b;
			end;


		     else if arg = "-of" | arg = "-output_file" then do; /*  ** -output_file */
			     if i + 1 > nargs then call error (error_table_$noarg,
				     "^/No output file name specified.");
			     else do;

				     i = i + 1;	/* Cause we used an argument */
				     if ep = COMMAND then do;
					     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
					     if code ^= 0 then call error (code, "Getting arg");
					end;
				     else call ssu_$arg_ptr (sci_ptr, i, arg_ptr, arg_len);
				     if index (arg, "-") = 1 then
					call error (error_table_$bad_subr_arg, arg);
				     else call expand_pathname_ (arg, of_dir, of_ent, code);
				     if code ^= 0 then call error (code, arg);
				     of_path = rtrim (of_dir) || ">" || of_ent;
				     of_flag = "1"b;
				end;
			end;			/* End output file arg */


		     else if arg = "-nof" | arg = "-no_output_file" then /*  *** -no_output_file */
			of_flag = "0"b;

		     else if arg = "-rel" | /*  *** -relations  */
			arg = "-relation" |
			arg = "-relations" then do;
			     mrds_dm_display_info.sw.relation = "1"b;
			     mrds_control_arg_found = "1"b;
			     if i + 1 <= nargs then do;
				     call build_name_list (i, args_used, mrds_dm_display_info.rel_name_list_ptr);

				     i = i + args_used;
				end;
			end;


		     else if arg = "-rn" | arg = "-rel_names" then do; /*  *** -rel_names
						   THIS is for compatibility with old display_mrds_dm */

			     mrds_dm_display_info.sw.relation = "1"b;
			     mrds_dm_display_info.sw.names_only = "1"b;
			     mrds_control_arg_found = "1"b;

			     if i + 1 <= nargs then do;
				     call build_name_list (i, args_used, mrds_dm_display_info.rel_name_list_ptr);

				     i = i + args_used;
				end;
			end;


		     else if arg = "-nm" | /*   ***  -names  */
			arg = "-name" |
			arg = "-names" then
			mrds_dm_display_info.sw.names_only = "1"b;

		     else if arg = "-dom" | /*   *** -domains */
			arg = "-domains" |
			arg = "-domain" then do;
			     mrds_control_arg_found, mrds_dm_display_info.domains = "1"b;

			     if i + 1 <= nargs then do;
				     call build_name_list (i, args_used, mrds_dm_display_info.dom_name_list_ptr);

				     i = i + args_used;
				     if arg = "-unref" | arg = "-unreferenced"
				     then if mrds_dm_display_info.dom_name_list_ptr ^= null
					then call error (error_table_$inconsistent, "-unreferenced and a name list following -domain");
				          else do;
					     mrds_dm_display_info.sw.unreferenced_domains = "1"b;
					     i = i + 1;
					     end;
				end;
			end;


		     else if arg = "-attr" | /*  *** -attributes */
			arg = "-attributes" |
			arg = "-attribute" then do;
			     mrds_dm_display_info.attribute = "1"b;
			     mrds_control_arg_found = "1"b;

			     if i + 1 <= nargs then do;
				     call build_name_list (i, args_used, mrds_dm_display_info.attr_name_list_ptr);

				     i = i + args_used;
				     if arg = "-unref" | arg = "-unreferenced"
				     then if mrds_dm_display_info.attr_name_list_ptr ^= null
					then call error (error_table_$inconsistent, "-unreferenced and a name list following -attribute");
				          else do;
					     mrds_dm_display_info.sw.unreferenced_attributes = "1"b;
					     i = i + 1;
					     end;
				end;
			end;


		     else if arg = "-ix" | arg = "-index" then do; /*  *** -index */
			     mrds_dm_display_info.index = "1"b;
			     mrds_control_arg_found = "1"b;

			     if i + 1 <= nargs then do;
				     call build_name_list (i, args_used, mrds_dm_display_info.index_name_list_ptr);

				     i = i + args_used;
				end;
			end;


		     else if arg = "-hist" | arg = "-history" then /*  *** -history */
			mrds_control_arg_found, mrds_dm_display_info.sw.history = "1"b;

		     else if arg = "-header" | arg = "-he" then do; /*  **** -header */
			     mrds_dm_display_info.sw.header = "1"b;
			     mrds_control_arg_found = "1"b;
			end;

		     else if arg = "-no_header" | arg = "-nhe" then do; /*  **** -no_header */
			     mrds_dm_display_info.sw.header = "0"b;
			     no_header_flag = "1"b;
			end;

		     else if arg = "-td" | arg = "-temp_dir" then do; /*  *** -temp_dir  */
			     if i + 1 > nargs then call error (error_table_$noarg,
				     "^/No temporary directory path specified.");
			     else do;

				     i = i + 1;	/* Cause we used an argument */
				     if ep = COMMAND then do;
					     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
					     if code ^= 0 then call error (code, "Getting arg");
					end;
				     else call ssu_$arg_ptr (sci_ptr, i, arg_ptr, arg_len);
				     if index (arg, "-") = 1 then
					call error (error_table_$bad_subr_arg, arg);
				     else call expand_pathname_ (arg, td_dir, td_ent, code);
				     if code ^= 0 then call error (code, arg);
				     temp_dir_father_dir = rtrim (td_dir) || ">" || td_ent;
				     temp_dir_flag = "1"b;
				end;
			end;			/* End -temp_dir arg */


		     else call error (error_table_$badopt, arg); /* Bad control arg */
		end;				/* End must be a control arg */

	     else call error (error_table_$bad_arg, arg);

	end;					/* End process args */
%page;
/*   Check for compatible control argument */

	if mrds_dm_display_info.names_only then do;
		if brief_flag then call error (error_table_$inconsistent,
			"^/-names and -brief");
		if mrds_dm_display_info.sw.long then call error (error_table_$inconsistent,
			"^/-names and -long");
	     end;

	if of_flag then do;				/* IF -output_file */
		of_switch_name = unique_chars_ ("0"b) || ".rmdb.dmdm_of";
		of_attach_desc = "vfile_ " || of_path;

		call iox_$attach_name (of_switch_name, out_iocb_ptr,
		     of_attach_desc, null, code);
		if code ^= 0 then
		     call error (code, "^/Attaching output file: " || of_path);
		call iox_$open (out_iocb_ptr, STREAM_OUTPUT, "0"b, code);
		if code ^= 0 then call error (code, "^/Opening output file: " || of_path);
		mrds_dm_display_info.output_iocb_ptr = out_iocb_ptr;
	     end;

/* To make compatible with the old dmdm command
   if only -rel and -long then force the -he */

	if (^mrds_dm_display_info.sw.domains |
	     ^mrds_dm_display_info.sw.attribute |
	     ^mrds_dm_display_info.sw.index |
	     ^mrds_dm_display_info.sw.relation |
	     ^mrds_dm_display_info.sw.domain_xref |
	     ^mrds_dm_display_info.sw.attribute_xref |
	     ^mrds_dm_display_info.sw.all_xref) &
	     ^no_header_flag & ^mrds_control_arg_found &
	     mrds_dm_display_info.sw.long then mrds_dm_display_info.sw.header = "1"b;

	if ^mrds_control_arg_found & ^cmdb_arg_found then /* Default is -relation */
	     mrds_dm_display_info.sw.relation = "1"b;

	if cmdb_arg_found & mrds_control_arg_found then /* -cmdb connot be used with anyother mrds control arg */
	     call error (error_table_$inconsistent,
		"^/The -cmdb can only be used with -long, -brief and -output_file control arguments.");

	if temp_dir_flag | ep = COMMAND then call create_temp_dir; /* Internal proc */

	call mrds_dm_display (mrds_dm_display_info_ptr, err_msg, code); /* Go do the work */

	if code ^= 0 then call error (code, err_msg);

	if ep = REQUEST & mrds_dm_display_info.xref_iocb_ptr ^= null then do;
	     rmdb_ctl.crossref_file_info.iocb_ptr = mrds_dm_display_info.xref_iocb_ptr;
	     rmdb_ctl.crossref_file_info.name = mrds_dm_display_info.xref_name;
	     delete_xref_file_flag = "0"b;
	     end;

	if of_flag then /* If output file */
	     call adjust_bit_count_ ((of_dir), (of_ent), "1"b, bcnt, code);
	if code ^= 0 then call error (code, rtrim (of_dir) || ">" || of_ent);

	call tidy_up;				/* Clean up after our self */
exit:	return;
%page;
/*  * * * * * * * * * * * * *      init     * * * * * * * * * * * * * *    */

init: proc;

	my_name = "display_mrds_dm";			/* Init for cleanup */
	out_iocb_ptr = null;
	mrds_dm_display_info_ptr = null;
	temp_seg_ptr = null;
	temp_dir_flag = "0"b;
	of_flag = "0"b;
	cmdb_arg_found = "0"b;
	brief_flag = "0"b;
	no_header_flag = "0"b;
	err_flag = "0"b;
	we_made_temp_dir_flag = "0"b;
	terminate_file_flag = "0"b;

     end init;
%page;
/* * * * * * * * * * * *  create_temp_dir   * * * * * * * * * * * * * * *   */

create_temp_dir: proc;

/* Create a temporary directory for use by the display routine.
   Also create a segment under the temparory dir and make it an area for use by
   the display routine.  */

	temp_dir_name = unique_chars_ ("0"b) || ".mrds.dmdm";

	we_made_temp_dir_flag = "1"b;			/* Remember we created it */

	call hcs_$append_branchx (temp_dir_father_dir, temp_dir_name, 01011b, /* sma acl's */
	     rings, get_group_id_$tag_star (),
	     1 /* directory */,
	     0 /* copy sw */,
	     0 /* bit count */,
	     code);
	if code ^= 0 then
	     call error (code, "^/Temporary directory:  " || temp_dir_father_dir);

	mrds_dm_display_info.temp_dir_path = rtrim (temp_dir_father_dir) || ">" ||
	     temp_dir_name;

     end create_temp_dir;
%page;
/*  * * * * * * * * * * * *        build_name_list      * * * * * * * * *   */

build_name_list: proc (start_arg, number_args_used, assigned_name_list_ptr);

	dcl     assigned_name_list_ptr ptr parameter;
	dcl     number_args_used	 fixed bin parameter;
	dcl     start_arg		 fixed bin parameter;

	last_arg_num = start_arg;
	name_list_ptr = null;
	number_args_used = 0;

	if start_arg + 1 <= nargs then do;

		if ep = COMMAND then do;
			call cu_$arg_ptr (last_arg_num + 1, arg_ptr, arg_len, code);
			if code ^= 0 then call error (code, "Getting arg");
		     end;
		else call ssu_$arg_ptr (sci_ptr, last_arg_num + 1, arg_ptr, arg_len);
		if index (arg, "-") ^= 1 then do;	/* Not a control arg */

			num_names_alloc = nargs - start_arg;
			allocate name_list in (wa) set (name_list_ptr);
			name_list.num_names = 0;
			no_more_names = "0"b;

			do while (^no_more_names & last_arg_num + 1 <= nargs);

			     if ep = COMMAND then do;
				     call cu_$arg_ptr (last_arg_num + 1, arg_ptr, arg_len, code);
				     if code ^= 0 then call error (code, "Getting arg");
				end;
			     else call ssu_$arg_ptr (sci_ptr, last_arg_num + 1, arg_ptr, arg_len);
			     if index (arg, "-") = 1 then no_more_names = "1"b;
			     else do;
				     if arg_len > 32 then call error (mrds_error_$rst_name_too_long, "^/" || arg ||
					     "^/Names are limited to 32 characters.");
				     name_list.num_names = name_list.num_names + 1;
				     name_list.name (name_list.num_names) = arg;
				     last_arg_num = last_arg_num + 1; /* Cause we used an argument */
				     number_args_used = number_args_used + 1;
				end;
			end;

		     end;				/* Not a control arg */

	     end;					/* End if last_arg_num+1 >nargs */

	assigned_name_list_ptr = name_list_ptr;

     end build_name_list;
%page;
/*  * * * * * * * * * * * *       error       * * * * * * * * * * * * * */

error: proc (err_code, err_message);			/* Error procedure for rmdb_create_relation.pl1 */

	dcl     err_code		 fixed bin (35);
	dcl     err_message		 char (*);
	dcl     saved_code		 fixed bin (35);
	dcl     ssu_$abort_line	 entry () options (variable);

	err_flag = "1"b;
	saved_code = err_code;

	call tidy_up;
	if ep = REQUEST then
	     call ssu_$abort_line (sci_ptr, saved_code, err_message);

	else call com_err_ (saved_code, my_name, err_message);
	goto exit;


     end error;

%page;
/*  * * * * * * * * * * * *       tidy_up       * * * * * * * * * * * * * */

tidy_up: proc;
						/* Cleanup request allocations if any */

	if ep = REQUEST & mrds_dm_display_info_ptr ^= null then do;

		if mrds_dm_display_info.dom_name_list_ptr ^= null then
		     free mrds_dm_display_info.dom_name_list_ptr -> name_list;
		if mrds_dm_display_info.attr_name_list_ptr ^= null then
		     free mrds_dm_display_info.attr_name_list_ptr -> name_list;
		if mrds_dm_display_info.rel_name_list_ptr ^= null then
		     free mrds_dm_display_info.rel_name_list_ptr -> name_list;
		if mrds_dm_display_info.index_name_list_ptr ^= null then
		     free mrds_dm_display_info.index_name_list_ptr -> name_list;

		free mrds_dm_display_info;

	     end;

	if delete_xref_file_flag & mrds_dm_display_info_ptr ^= null
	then if ep = COMMAND
	     then call mu_db_xref$xref_destroy (mrds_dm_display_info_ptr, mrds_dm_display_info.temp_dir_path,
		     mrds_dm_display_info.xref_name, (""), (0));
	     else call mu_db_xref$xref_destroy (rmdb_ctl.crossref_file_info.iocb_ptr,
		     rmdb_ctl.temp_dir_path, rmdb_ctl.crossref_file_info.name, (""), (0));

	if temp_seg_ptr ^= null then
	     call release_temp_segment_ (my_name, temp_seg_ptr, (0));

	if we_made_temp_dir_flag then do;		/* If we created it we need to delete it */

		call hcs_$del_dir_tree (temp_dir_father_dir, temp_dir_name, code); /* Remove entries below it */
		if code = error_table_$notadir | code = 0 then
		     call hcs_$delentry_file (temp_dir_father_dir, temp_dir_name, (0));
	     end;

	if out_iocb_ptr ^= null then do;		/* Output file cleanup */

	          call close_file (out_iocb_ptr);
		if err_flag then /* If an error occured delete it too */
		     call delete_$path (of_dir, of_ent, "100100"b, "rmdb_rq_dmdm", (0));
	     end;

	if dbm_ptr ^= null & terminate_file_flag then do; /* db_model file cleanup */
	     call terminate_file_ (dbm_ptr, 0, TERM_FILE_TERM, (0));
	     terminate_file_flag = "0"b;
	     end;

	return;

close_file:
	proc (p);

dcl  p ptr parameter;

	if p ^= null then do;
	     call iox_$close (p, (0));
	     call iox_$detach_iocb (p, (0));
	     call iox_$destroy_iocb (p, (0));
	     end;

	return;
     end close_file;

     end tidy_up;
%page;
	dcl     absolute_database_path char (168);
	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     args_used		 fixed bin;
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     bcnt		 fixed bin (35);
	dcl     brief_flag		 bit (1);
	dcl     cleanup		 condition;
	dcl     cmdb_arg_found	 bit (1);
	dcl     code		 fixed bin (35);
	dcl     COMMAND		 fixed bin static options (constant) init (1);
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     dbm_ptr		 ptr;
	dcl     dbp		 char (168);
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     delete_xref_file_flag	 bit (1) aligned;
	dcl     dmd_$get_secured_state entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     empty		 builtin;
	dcl     ep		 fixed bin;
	dcl     error_table_$insufficient_access fixed bin (35) ext static;
	dcl     error_table_$badcall	 fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$bad_subr_arg fixed bin (35) ext static;
	dcl     error_table_$inconsistent fixed bin (35) ext static;
	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$notadir	 fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     err_flag		 bit (1);
	dcl     err_msg		 char (256);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     first_arg_number	 fixed bin;
	dcl     get_group_id_$tag_star entry () returns (char (32));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$delentry_file	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$del_dir_tree	 entry (char (*), char (*), fixed bin (35));
	dcl     i			 fixed bin;
          dcl     incon_flag             bit (1);
          dcl     incon_message          char (200);
          dcl     incon_name             char (32);
          dcl     index		 builtin;
	dcl     initiate_file_	 entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl     ioa_$rs		 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$user_output	 ptr ext static;
	dcl     last_arg_num	 fixed bin;
	dcl     length		 builtin;
	dcl     mdbm_util_$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
          dcl     mdbm_util_$inconsistent_get_info entry options(variable);
	dcl     mrds_control_arg_found bit (1);
	dcl     mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35));
	dcl     mrds_dm_display	 entry (ptr, char (*), fixed bin (35));
	dcl     mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dsl_resultant_storage$get_temp_dir entry () returns (char (168));
          dcl     mrds_error_$inconsistent_database fixed bin (35) ext static;
	dcl     mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$no_db_path fixed bin (35) ext static;
	dcl     mrds_error_$no_model_access fixed bin (35) ext static;
	dcl     mrds_error_$no_model_submodel fixed bin (35) ext static;
	dcl     mrds_error_$rst_name_too_long fixed bin (35) ext static;
	dcl     mu_db_xref$xref_destroy entry (ptr, char (*), char (*), char (*), fixed bin (35));
	dcl     my_name		 char (16);
	dcl     nargs		 fixed bin;
	dcl     no_header_flag	 bit (1);
	dcl     no_more_names	 bit (1);
	dcl     null		 builtin;
	dcl     of_attach_desc	 char (200);
	dcl     of_dir		 char (168);
	dcl     of_ent		 char (32);
	dcl     of_flag		 bit (1);
	dcl     of_path		 char (168);
	dcl     of_switch_name	 char (32);
	dcl     out_iocb_ptr	 ptr;
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     REQUEST		 fixed bin static options (constant) init (2);
	dcl     rings		 (3) fixed bin (3) init ((3) 7);
          dcl     mrds_rst_$execute_undo entry (ptr, char (32), char (168), ptr, char (32), char (100));
	dcl     rtrim		 builtin;
	dcl     sci_ptr		 ptr;
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     STREAM_OUTPUT	 int static options (constant) init (2);
	dcl     string		 builtin;
	dcl     structure_version	 fixed bin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     td_dir		 char (168);
	dcl     td_ent		 char (32);
	dcl     temp_dir_father_dir	 char (168);
	dcl     temp_dir_flag	 bit (1);
	dcl     temp_dir_name	 char (32);
	dcl     temp_seg_ptr	 ptr;
	dcl     terminate_file_	 entry (ptr, fixed bin(24), bit(*), fixed bin(35));
	dcl     terminate_file_flag	 bit (1) aligned;
          dcl     undo_request           char (100);
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     wa		 area (sys_info$max_seg_size) based (work_area_ptr);
	dcl     we_made_temp_dir_flag	 bit (1);
	dcl     work_area_ptr	 ptr;

%page;
%include access_mode_values;
%page;
%include mrds_rmdb_ctl;
%page;
%include mrds_dm_display_info;
%page;
%include mrds_path_info;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include terminate_file;

     end display_mrds_dm;
