/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
                                                   END HISTORY COMMENTS */


display_mrds_db_population:
dmdbp:
dmdp:
     procedure ();

/* DESCRIPTION:

   This is a utility routine for MRDS  databases,  it  displays  the
   current  population  of  the relations in a database, and  in the
   long version, a list of the indexed  attributes and the number of
   tuples selected for each index.  It  can  not  display  secondary
   index information for  version <= 3 databases. Also, version <= 3
   databases  must  have been  opened  for exclusive update at least
   once prior to calling  this routine. For version 4 databases that
   are secured, the  path  must be to a secured submodel if the user
   is not a DBA. Arguments may be given in any order, but  the  path
   must come before the -relation argument.  Control   arguments can
   be over-ridden, with the last taking effect.




   PARAMETERS:

   database_path - - (input) the relative pathname of  the  database
   model  or  submodel  view  whose  population statistics are to be
   displayed.

   -brief, -bf - - (input) control argument,  to  limit  display  to
   relation  names,  and  their  current  tuple  count.  This is the
   default.

   -long, -lg - - (input) control argument to cause the  display  to
   contain  all  information  available  from vfile_status_ for each
   relation in the view, or specified in the -relation option.

   -relation rel_name 1 ... rel_nameN - - (input)  control  argument
   to  cause  only  the specified relations to have their statistics
   displayed according to the -long/-brief controls. The default  is
   to display all relations in the view.




   HISTORY:

   80-05-15 Jim Gray : Originally written.

   81-04-11 Jim Gray : modified for release in bound mrds as follows:
   1) extended the interface to accept submodel views
   2) added a -long option control arg
   3) made the default -brief
   4) added the -relation control arg
   5) for a secured db, limited non-DBA to secured submodel
   6) set needed access for a DBA
   7) changed the output formating

   81-06-04  Davids:  removed  references  to  the   user   external
   interface  (both  the mrds_dsm_dsmd and associated include files)
   and  replaced   them   with   mrds'   internal   interface.   The
   model_relations         and        dsm_relation_names        (now
   mrds_dsm_relation_names) were all being referenced by  overlaying
   the model_relation structure. Since they all have the same format
   this was working but it was changed so  that  each  structure  is
   referenced separately to improve maintainability.
   
   81-09-15 Rickie E.  Brinegar: Added substr to the assignment of abs_path to
   db_path  and  changed  action_type from char (12) to char (14) to avoid the
   substring condition.

   82-10-8 D. Woodka : Modified for DMS conversion. Changed to call 
   mu_rel_statistics return_tuple_count and return_index_attr_dups.
   Deleted the output of:  vfile version,  number of bytes in vfile
   records, number of  vfile keys and their total bytes,  number of
   duplicate keys  and their bytes,  tree height,  number of pages, 
   amount of free  space and number of  updates.  Added output of a
   list of the  indexed  attributes and  average  number  of tuples 
   expected to be selected (for -long display,version 4 databases).

   82-12-21  Roger Lackey : Added rtrim to several error messages and 
   removed unused dcls added undefined builtin dcls.

   83-02-04 Davids: Added transaction include files. Modified  the  internal
   routine error  not to call the clean_up procedure but to just go to exit.
   Changed the normal return sequence to  call  clean_up  after  the
   exit   label   instead  of  before  and  added  the  mrds  finish
   transaction include file after the call to clean_up. This made it
   easier  to  add  the  finish  transaction  code and mstxn cleanup
   condition handler. Note that there is only 1 transaction for  the
   entire  database, this means that if the transaction dies for any
   reason the rest of the relations will not be processed. It  would
   be better to have a transaction for each relation but it would be
   much slower.   

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-05-24 Mike Kubicar : Modified to not call mu_rel_statistics to get
   the tuple count.
*/
%page;
/* initialize */

	error_code = 0;
	dbm_ptr = null ();				/* model not open yet */
	submodel_open = "0"b;
	area_ptr = null ();
	long_format = "0"b;				/* default to -brief option */
	all_relations = "1"b;			/* default to showing all relations in the view */
	path_seen = "0"b;
	mstxn_txn_id = "0"b;

	call cu_$af_arg_count (nargs, error_code);	/* make sure we weren't called as an active function */
	if error_code ^= error_table_$not_act_fnc then
	     call error (error_code, "Command called as an active function,
                    or unable to obtain argument count.");
	error_code = 0;

	on cleanup begin;
		call mstxn_cleanup;
		call clean_up ();
	     end;

	on any_other call mstxn_any_other;

/* check for a good call */

	if nargs < 1 then do;
		error_code = error_table_$wrong_no_of_args;
		call error (error_code, "Usage:  dmdbp  path  {-brief|-long} {-relation rel_name1 ... rel_nameN}");

	     end;

/* get some work space */

	call get_temp_segment_ (caller_name, temp_seg_ptr, error_code);
	if error_code ^= 0 then
	     call error (error_code, "Unable to get a temp segment.");
	area_ptr = temp_seg_ptr;
	area_ptr -> work_area = empty ();

/* gather all the arguments */

	arg_count = 1;
	args_finished = "0"b;
	do while (^args_finished);

/* get this argument, and decide if it is a control argument or not */

	     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, error_code);
	     if error_code ^= 0 then do;
		     args_finished = "1"b;
		     call error (error_code, "While getting argument.");
		end;


/* check for a null argument */

	     if arg_len < 1 then do;
		     args_finished = "1"b;
		     error_code = error_table_$bad_arg;
		     call error (error_code, "While getting argument.");
		end;

/* control arguments begin with a hyphen */

	     if substr (arg, 1, 1) = "-" then
		call process_control_arg ();
	     else call process_path_arg ();

/* advance to the next argument */

	     if arg_count < nargs then
		arg_count = arg_count + 1;
	     else args_finished = "1"b;

	end;

/* check that we got a  pathname argument */

	if error_code = 0 then do;

		if ^path_seen then do;
			error_code = error_table_$noarg;
			call error (error_code, "No pathname argument was given.");
		     end;
%page;
		if mrds_path_info.mrds_version <= 3
		then mstxn_transactions_needed = "0"b;
		else mstxn_transactions_needed = db_model.db_type_flags.transactions_needed;

%include mrds_start_transaction;

		if mstxn_code ^= 0
		then call error (mstxn_code, "Unable to start a transaction");

/* go display the requested status */

		call display_db_status ();

	     end;

exit:
	call clean_up ();

	mftxn_code = error_code;

%include mrds_finish_transaction;

	if mftxn_code ^= 0
	then call com_err_ (mftxn_code, caller_name, "Unable to finish transaction");

	return;
%page;
should_rollback: proc () returns (bit (1));

/* This routine is required by the transaction include files.  It is called
   when a transaction is in an error state.  The convention is that returning
   "0"b directs that the transaction be aborted and "1"b directs that the
   transaction be rolled back.  At this point, the only reasonable action in
   such situations seems to be to abort the transaction, so we always... */

	return ("0"b);

     end should_rollback;

restore_significant_data: proc ();

/* This routine is required by the transaction include files.  It is called
   when a transaction is aborted or rolled back.  The intent is to return
   non-FAMIS storage to the appropriate state to reflect the backing out of 
   whatever FAMIS changes were made. */

	return;

     end restore_significant_data;
%page;
process_control_arg:
     procedure ();

/* routine to determine if user has given one of the legal
   control arguments of brief, long, or relation REL_NAME
   and to save the corresponding information.
   The logic is such as to allow duplicate control arguments
   to override each other, with the last given taking effect. */

/* BRIEF */

	if arg = "-brief" | arg = "-bf" then long_format = "0"b; /* use short display format */

/* LONG */

	else if arg = "-long" | arg = "-lg" then long_format = "1"b; /* use verbose display format */

/* UNKNOWN */

	else if arg ^= "-relation" then do;
		args_finished = "1"b;
		error_code = error_table_$badopt;
		call error (error_code, "The control argument """ || arg ||
		     """ is not supported by this command.");
	     end;

/* BAD ORDER */

	else if ^path_seen then do;
		args_finished = "1"b;
		error_code = error_table_$noarg;
		call error (error_code, "The pathname argument did not appear before the ""-relation"" option.");
	     end;

	else do;

/* RELATION LIST */

		last_relation_seen = "0"b;
		some_relation_seen = "0"b;
		all_relations = "0"b;		/* only do the given relations */
		last_relation_ptr, relation_list_ptr = null ();
		arg_count = arg_count + 1;
		relation_list_length = 0;

/* go through all relation names given */

		do while (^last_relation_seen);

		     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, error_code);
		     if error_code ^= 0 then do;
			     args_finished, last_relation_seen = "1"b;
			     call error (error_code, "While getting a relation name argument");
			end;
		     if arg_len < 1 then do;
			     args_finished, last_relation_seen = "1"b;
			     error_code = error_table_$bad_arg;
			     call error (error_code, "While getting a relation name argument");
			end;
		     else if substr (arg, 1, 1) = "-" then do;
			     last_relation_seen = "1"b; /* end of list of relation names */
			     arg_count = arg_count - 1; /* reset for processining remaining args */
			end;
		     else do;

/* first relation name seen */

			     some_relation_seen = "1"b;

/* gather this name for the list */

			     relation_name_length_init = arg_len;
			     allocate relation set (relation_ptr) in (work_area);
			     relation.name_length = relation_name_length_init;
			     relation.name = arg;	/* remember this relation's name */

/* add the name at the end of the list to maintain order */

			     relation.next = null ();
			     if last_relation_ptr = null () then
				relation_list_ptr = relation_ptr;
			     else last_relation_ptr -> relation.next = relation_ptr;
			     last_relation_ptr = relation_ptr;
			     relation_list_length = relation_list_length + 1;

/* advance to the next name given */

			     if arg_count < nargs then
				arg_count = arg_count + 1;
			     else last_relation_seen = "1"b;

			end;

		end;

/* check that at least one name was given */

		if ^some_relation_seen & error_code = 0 then do;
			args_finished = "1"b;
			error_code = error_table_$noarg;
			call error (error_code, "No relation name(s) given with the ""-relation"" control argument.");
		     end;

	     end;

     end process_control_arg;
%page;
process_path_arg:
     procedure ();

/* routine to verify the database model path or submodel path
   argument, that supplies the view for status information.
   Only one path argument is allowed */

	if path_seen then do;

/* duplicate path name arguments given */

		args_finished = "1"b;
		error_code = mrds_error_$duplicate_opt;
		call error (error_code, "The pathname argument was given more than once: " || arg);
	     end;
	else do;

/* first pathname seen */

		path_seen = "1"b;

/* check for a valid path to a model or submodel */

		call mrds_dsl_get_version$get_path_info (arg, area_ptr,
		     mrds_path_info_structure_version, mrds_path_info_ptr, error_code);
		if mrds_path_info_ptr = null () then
		     abs_path = arg;
		else abs_path = mrds_path_info.absolute_path;
		if error_code ^= 0 then do;
			args_finished = "1"b;
			call error (error_code, "Unable to find database information using the path """ || rtrim (abs_path) || """.");
		     end;

/* good path, if this is a submodel path, then get the
   database path from the submodel header */

		if mrds_path_info.type.model then
		     db_path = substr (abs_path, 1, 168);
		else do;				/* submodel view */

/* open the specified submodel */

			call mrds_dsm_open$read (rtrim (abs_path), submodel_iocb_ptr,
			     error_code);
			if error_code ^= 0 then do;
				args_finished = "1"b;
				call com_err_ (error_code, "Unable to open the submodel using the path """ || rtrim (abs_path) || """.");
			     end;

/* let them know we have the submodel open */

			submodel_open = "1"b;
			call ioa_ ("^/Displaying version ^d submodel:  ^a",
			     mrds_path_info.mrds_version, abs_path);

/* get the database path from the submodel header record */

			call mrds_dsm_read_header$db_path (submodel_iocb_ptr, db_path,
			     error_code);
			if error_code ^= 0 then do;
				args_finished = "1"b;
				call error (error_code,
				     "Unable to get the database path from the header for the submodel """ || rtrim (abs_path) || """.");
			     end;

		     end;

	     end;

/* for version 4 secured databases, make sure non-DBA's
   are using a secured submodel view of the database */

	if error_code = 0 then
	     call check_secured_view ();

     end process_path_arg;
%page;
check_secured_view:
     procedure ();

/* routine to check for a version 4 database that has been secured,
   and for a non-DBA user not looking through a secure submodel */

	if mrds_path_info.type.model then
	     db_info_ptr = mrds_path_info_ptr;
	else do;

		call mrds_dsl_get_version$get_path_info (rtrim (db_path), area_ptr,
		     mrds_path_info_structure_version, db_info_ptr, error_code);
		if error_code ^= 0 then do;
			args_finished = "1"b;
			call error (error_code,
			     "Unable to get information about the database """
			     || rtrim (db_path) || """ for the submodel """ || rtrim (abs_path) || """.");
		     end;

	     end;

	if error_code = 0 then do;

		if db_info_ptr -> mrds_path_info.mrds_version = 4 then do;

			call mrds_dm_open (db_path, mode, dbm_ptr, error_code);
			if error_code ^= 0 then do;
				args_finished = "1"b;
				call error (error_code, "Unable to open the data model for the database """ || rtrim (db_path) || """.");
			     end;

			call mrds_dm_db_secured$get_secured_status (dbm_ptr,
			     area_ptr, database_state_structure_version,
			     database_state_ptr, error_code);
			if error_code ^= 0 then do;
				args_finished = "1"b;
				call error (error_code,
				     "Unable to get the secured state for the database """ || rtrim (db_path) || """.");
			     end;


			if database_state.secured then do;

				call mrds_dm_authorization$get_user_class (rtrim (db_path),
				     area_ptr, mrds_authorization_structure_version,
				     mrds_authorization_ptr, error_code);
				if error_code ^= 0 then do;
					args_finished = "1"b;
					call error (error_code,
					     "Unable to determine if the user is a DBA for the database """ || rtrim (db_path) || """.");
				     end;


				if ^mrds_authorization.administrator then do;

					bad_path = "0"b;
					if mrds_path_info.type.model then
					     bad_path = "1"b;
					else do;
						call expand_pathname_ (abs_path, sm_dir, sm_name,
						     error_code);
						if error_code ^= 0 then do;
							args_finished = "1"b;
							call error (error_code,
							     "Unable to expand the submodel path """ || rtrim (abs_path) || """.");
						     end;
						else do;

							if ^mrds_dm_secured_submodel (rtrim (db_path),
							     sm_dir, sm_name) then
							     bad_path = "1"b;
						     end;

					     end;

					if bad_path then do;
						args_finished = "1"b;
						error_code = mrds_error_$inc_secure_open;
						call error (error_code,
						     "The submodel """ || rtrim (abs_path) ||
						     """ is not a secure submodel, but the database """ || rtrim (db_path) || """ has been secured.");
					     end;

				     end;

			     end;

		     end;

	     end;

     end check_secured_view;
%page;
display_db_status:
     procedure ();

/* routine to output all requested database info */

/* set up the path to the relation vfiles, based on database version */

/* get the relations from the model or submodel   depending upon how we were called */

	call get_relation_info ();


/* gather the status information for each relation in the view specified by the user,
   or only the subset in his relation list */

	if all_relations then
	     relation_count = number_of_relations;
	else relation_count = relation_list_length;


/* output a header for the long or short format */

	if (^long_format | db_info_ptr -> mrds_path_info.mrds_version < 4) then
	     call ioa_ ("^/RELATION^4-TUPLES^/");
	else
	     call ioa_ ("^/RELATION^-TUPLES^-INDEX^-AVE TUPLES SELECTED^/");

	if mrds_path_info.mrds_version >= 4 then do;
		if db_model.db_type_flags.vfile_type
		then vfile = "1"b;			/* if this is a vfile database */
		else vfile = "0"b;			/* if this is a page file database */
	     end;
						/* go through all specified relations */

	do i = 1 to relation_count while (error_code = 0);

	     if all_relations then do;
		     j = i;			/* use definition order */
		     found = "1"b;
		end;
	     else do;

/* make sure we have a good relation name from the user's -relation option
   by finding the relation name in the model_relations or submodel_relations array */

		     if i = 1 then
			relation_ptr = relation_list_ptr;
		     else relation_ptr = relation.next;

		     found = "0"b;
		     done = "0"b;
		     j = 1;
		     do while (^done);		/* find the value of j to use */

			if mrds_path_info.type.model then
			     rel_name = model_relations (j).relation_name;
			else rel_name = mrds_dsm_relation_names (j).relation;
			if relation.name = rel_name then
			     done, found = "1"b;
			else if j < number_of_relations then
			     j = j + 1;
			else done = "1"b;
		     end;

		     if ^found then
			call ioa_ ("^/^a^a^a",	/* non-fatal error, keep going */
			     "The relation name """, relation.name,
			     """ is unknown in this view of the database.");
		end;

	     if found then do;

		     if mrds_path_info.type.model then do;
			     rel_name = model_relations.relation_name (j);
			     model_rel_name = model_relations.relation_name (j);

/* get relation id */

			     if db_info_ptr -> mrds_path_info.mrds_version >= 4 then do;
				     file_model_name = rtrim (mr_ptr -> model_relations.relation_name (j)) || ".m";
				     call hcs_$initiate (db_path, file_model_name, "", 0, 0, fm_ptr, error_code);
				     if fm_ptr = null then call error (mrds_error_$no_model_rel,
					     rtrim (mr_ptr -> model_relations.relation_name (j)));
				     ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
				     rel_id = rel_info.id;

				end;
			end;

		     else do;			/* get the model name for the submodel alias */
			     rel_name = mrds_dsm_relation_names (j).relation;

			     call mrds_dsm_read_relation (rtrim (mrds_dsm_relation_names (j).relation),
				area_ptr, relation_block_ptr, submodel_iocb_ptr, error_code);
			     if error_code ^= 0 then
				call error (error_code,
				     "Unable to get the model name for the submodel relation """
				     || mrds_dsm_relation_names.relation (j) || """.");

			     if db_info_ptr -> mrds_path_info.mrds_version >= 4 then do;
				     file_model_name = rtrim (relation_block_ptr -> relation_block.dm_rel_name) || ".m";
				     call hcs_$initiate (db_path, file_model_name, "", 0, 0, fm_ptr, error_code);
				     if fm_ptr = null then call error (mrds_error_$no_model_rel,
					     rtrim (mr_ptr -> model_relations.relation_name (i)));
				     ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
				     rel_id = rel_info.id;
				end;

			     model_rel_name = relation_block_ptr -> relation_block.dm_rel_name;


			end;

/* go display the relation status */

		     call display_relation_status ();

		end;

	end;

     end display_db_status;
%page;
get_relation_info:
     procedure ();

/* routine to get the relation names from either the model
   or submodel, depending upon the view we were called with */

	if mrds_path_info.type.model then do;

/* open the data model for retrieval */

		if dbm_ptr = null () then do;		/* not open yet */
			call mrds_dm_open (db_path, mode, dbm_ptr, error_code);
			if error_code ^= 0 then
			     call error (error_code,
				"Unable to open the data model for database """ ||
				rtrim (db_path) || """.");
		     end;

/* let them know we got it open */

		call ioa_ ("^/^a ^d ^a ^a", "Displaying version",
		     db_info_ptr -> mrds_path_info.mrds_version, "data model:",
		     db_path);

/* get the names of all relations in the database */

		call mrds_dm_get_relations (dbm_ptr, addr (work_area),
		     mr_ptr, error_code);
		if error_code ^= 0 then
		     call error (error_code,
			"Unable to get the relation names from the model for database """
			|| rtrim (db_path) || """.");
		else number_of_relations = mr_ptr -> model_relations.nrels;



	     end;

	else do;					/* submodel view given */

/* get the submodel names in this view */

		call mrds_dsm_get_relation_names (area_ptr, mrds_dsm_relation_names_ptr,
		     submodel_iocb_ptr, error_code);
		if error_code ^= 0 then
		     call error (error_code,
			"Unable to get the relations in the submodel """ ||
			rtrim (abs_path) || """.");
		else number_of_relations =
			mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names.nrels;

	     end;

     end get_relation_info;
%page;
display_relation_status:
     procedure ();

	if mrds_path_info.mrds_version <= 3 then do;
		info_ptr = addr (indx_info);
		call vfile_status_ (rtrim (db_path) || ">rel_dir", model_rel_name, info_ptr, error_code);

		if error_code ^= 0 then call error (error_code,
			"Unable to get status information on relation """ || rtrim (rel_name) || """ in the database """ || rtrim (db_path) || """ . ");
		num_tuples = indx_info.non_null_recs;
	     end;
	else do;
		if vfile then do;
			call vfile_relmgr_$open (db_path, model_rel_name,
			     rel_opening_id, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not open relation " || rtrim (model_rel_name) || ".");
			call vfile_relmgr_$create_cursor (rel_opening_id,
			     area_ptr, relation_cursor_ptr, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not create a cursor for relation " || rtrim (model_rel_name) || ".");
			call vfile_relmgr_$get_count (relation_cursor_ptr,
			     null (), num_tuples, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not get count of tuples for relation "
				|| rtrim (model_rel_name) || ".");
		     end;
		else do;
			call relation_manager_$open (db_path, model_rel_name,
			     rel_opening_id, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not open relation " || rtrim (model_rel_name) || ".");
			call relation_manager_$create_cursor (rel_opening_id,
			     area_ptr, relation_cursor_ptr, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not create a cursor for relation " || rtrim (model_rel_name) || ".");
			call relation_manager_$get_count (relation_cursor_ptr,
			     null (), num_tuples, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not get count of tuples for relation "
				|| rtrim (model_rel_name) || ".");
		     end;
	     end;

	if ^long_format then call ioa_ ("^40a^d", rel_name, num_tuples);

	else do;					/* if this is the long version */

		if db_info_ptr -> mrds_path_info.mrds_version < 4 then
		     call ioa_ ("^40a^d", rel_name, num_tuples);

		else do;

			call ioa_ ("^a^-^d", rel_name, num_tuples);

/* display attribute information */

			do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr)
			     repeat ptr (fm_ptr, attr_info.fwd_thread)
			     while (rel (ai_ptr) ^= NULL_OFFSET);

			     if attr_info.index_attr then do;
				     found = "0"b;
				     if mrds_path_info.type.submodel then
					do k = 1 to relation_block.no_rb_attributes while (^found);
					     if attr_info.name = relation_block.attribute_info (k).dm_attr_name then do;
						     found = "1"b;
						     index_name = relation_block.attribute_info (k).dsm_attr_name;

						end;
					end;
				     else do;
					     found = "1"b;
					     index_name = attr_info.name;

					end;
				     if found then do;
					     if vfile then
						call vfile_relmgr_$get_duplicate_key_count (relation_cursor_ptr,
						     attr_info.index_id, ALL_THE_ATTRIBUTES, dup_count, error_code);
					     else
						call relation_manager_$get_duplicate_key_count (relation_cursor_ptr,
						     attr_info.index_id, ALL_THE_ATTRIBUTES, dup_count, error_code);
					     if error_code ^= 0
					     then call error (error_code, "Could not get duplicate count for index "
						     || rtrim (index_name) || ".");

					     if dup_count = num_tuples then ave_tuples = num_tuples;
					     else ave_tuples = num_tuples / (num_tuples - dup_count);
					     call ioa_ ("^2-^a^-^d", index_name, ave_tuples);

					end;
				end;
			end;
		     end;
	     end;

	if db_info_ptr -> mrds_path_info.mrds_version = 4 then do;
		if vfile then do;
			call vfile_relmgr_$destroy_cursor (relation_cursor_ptr,
			     area_ptr, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not destroy a cursor for relation "
				|| rtrim (rel_name) || ".");
			call vfile_relmgr_$close (rel_opening_id, error_code);
		     end;
		else do;
			call relation_manager_$destroy_cursor (relation_cursor_ptr,
			     area_ptr, error_code);
			if error_code ^= 0
			then call error (error_code, "Could not destroy a cursor for relation "
				|| rtrim (rel_name) || ".");
			call relation_manager_$close (rel_opening_id, error_code);
		     end;
		if error_code ^= 0 then call error (error_code, "While closing the relation" || rel_name);
	     end;


     end display_relation_status;
%page;
error: proc (code, message);

/* Parameters */

	dcl     code		 fixed bin (35);
	dcl     message		 char (*);

	call com_err_ (code, caller_name, "^/^a", message);
	go to exit;

     end error;
%page;
clean_up:
     procedure ();

/* close the data model, if open */

	if dbm_ptr ^= null then do;
		call mrds_dm_close (dbm_ptr, discard);
		dbm_ptr = null ();
	     end;

	if submodel_open then do;
		call mrds_dsm_close$force (submodel_iocb_ptr);
		submodel_open = "0"b;
	     end;

	if area_ptr ^= null () then do;
		call release_temp_segment_ (caller_name, area_ptr, discard);
		area_ptr = null ();
	     end;
     end;
%page;
	dcl     abs_path		 char (200);	/* absolute pathname of model or submodel */
	dcl     ALL_THE_ATTRIBUTES	 fixed bin int static options (constant)
				 init (-1);	/* get_duplicate_key_count looks at all attributes in index */
	dcl     all_relations	 bit (1);		/* on => do all rels in view */
	dcl     area_ptr		 ptr;		/* points to work space */
	dcl     arg		 char (arg_len) based (arg_ptr); /* input argument */
	dcl     arg_count		 fixed bin;	/* current arg under inspection */
	dcl     arg_len		 fixed bin (21);	/* lengh of input arg */
	dcl     arg_ptr		 ptr;		/* points to input argument */
	dcl     args_finished	 bit (1);		/* on => all args seen, or error */
	dcl     ave_tuples		 fixed bin (35);
	dcl     bad_path		 bit (1);		/* on => non-dba not using secure submodel on secured db */
	dcl     caller_name		 char (32) init ("display_mrds_db_population") int
				 static options (constant); /* calling routine */
	dcl     cleanup		 condition;	/* signaled upon quit/release */
	dcl     any_other		 condition;
	dcl     com_err_		 entry options (variable); /* reports errors */
	dcl     cu_$af_arg_count	 entry (fixed bin, fixed bin (35)); /* gets arg count/call type */
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
						/* gets Nth arg */
	dcl     db_path		 char (168);	/* pathname of database */
	dcl     discard		 fixed bin (35);	/* ignored error error_code */
	dcl     mrds_dm_authorization$get_user_class
				 entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
						/* detects DBA */
	dcl     mrds_dm_db_secured$get_secured_status
				 entry (ptr, ptr, fixed bin, ptr, fixed bin (35));
						/* sets db secured state */
	dcl     mrds_dm_close	 entry (ptr, fixed bin (35)); /* closes data model */
	dcl     mrds_dm_get_relations	 entry (ptr, ptr, ptr, fixed bin (35));
						/* gets relation names */
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
						/* opens data model */
	dcl     mrds_dm_secured_submodel entry (char (*), char (*), char (*))
				 returns (bit (1)); /* checks for secured submodel */
	dcl     done		 bit (1);		/* loop control for relation name search */
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_read_header$db_path entry (ptr, char (168), fixed bin (35));
	dcl     mrds_dsm_read_relation entry (char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_get_relation_names entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     submodel_iocb_ptr	 ptr init (null ());/* pointer to the submodel iocb */
	dcl     dup_count		 fixed bin (35);
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     error_table_$bad_arg	 fixed bin (35) ext;/* null input arg */
	dcl     error_table_$badopt	 fixed bin (35) ext;/* unknown control arg */
	dcl     error_table_$noarg	 fixed bin (35) ext;/* missing argument */
	dcl     error_table_$not_act_fnc fixed bin (35) ext; /* should get this normally */
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext; /* not minimum of 1 arg */
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     file_model_name	 char (32);
	dcl     found		 bit (1);		/* on => known relation name supplied, and it's index found */
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* gets temp segs */
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     i			 fixed bin;	/* current count of relations displayed */
	dcl     index_name		 char (32);
	dcl     1 indx_info,			/* info structure for vfile status */
		2 info_version	 fixed bin init (1),
		2 type		 fixed bin init (4),
		2 records		 fixed bin (34),
		2 flags		 aligned,
		  3 lock_status	 bit (2) unal,
		  3 pad		 bit (34) unal,
		2 version		 aligned,
		  3 file_version	 fixed bin (17) unal,
		  3 program_version	 fixed bin (17) unal,
		2 action		 fixed bin,
		2 non_null_recs	 fixed bin (34),
		2 record_bytes	 fixed bin (34),
		2 free_blocks	 fixed bin,
		2 index_height	 fixed bin,
		2 nodes		 fixed bin,
		2 key_bytes	 fixed bin (34),
		2 change_count	 fixed bin (35),
		2 num_keys	 fixed bin (34),
		2 dup_keys	 fixed bin (34),
		2 dup_key_bytes	 fixed bin (34),
		2 reserved	 (1) fixed bin;
	dcl     info_ptr		 ptr;
	dcl     ioa_		 entry options (variable); /* does output display */
	dcl     j			 fixed bin;	/* index into the relation_list structure */
	dcl     k			 fixed bin;
	dcl     last_relation_ptr	 ptr;		/* points to last relation in list */
	dcl     last_relation_seen	 bit (1);		/* on => exit relation name loop */
	dcl     long_format		 bit (1);		/* on => display all status info */
	dcl     mode		 fixed bin init (2);/* retrieval */
	dcl     model_rel_name	 char (32);	/* name of the relation in the data model */
	dcl     mrds_dsl_get_version$get_path_info
				 entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_error_$duplicate_opt fixed bin (35) ext; /* path arg given > 1 time */
	dcl     mrds_error_$inc_secure_open fixed bin (35) ext; /* non-dba, secured db, un-secure submodel */
	dcl     mrds_error_$no_model_rel fixed bin (35) ext static;
	dcl     nargs		 fixed bin;	/* number of arguments presented */
	dcl     NULL_OFFSET		 int static bit (18) unal init ((18)"1"b) options (constant);
	dcl     num_tuples		 fixed bin (35);	/* number of tuples in relations */
	dcl     number_of_relations	 fixed bin;	/* number of relations in view */
	dcl     path_seen		 bit (1);		/* on => path name argument given */
	dcl     relation_id		 bit (36) aligned init ((36)"1"b);
	dcl     relation_cursor_ptr	 ptr;		/* Cursor to gather statistics */
	dcl     relation_manager_$create_cursor entry (bit (36) aligned, ptr, ptr, fixed bin (35));
	dcl     relation_manager_$destroy_cursor entry (ptr, ptr, fixed bin (35));
	dcl     relation_manager_$get_count entry (ptr, ptr, fixed bin (35), fixed bin (35));
	dcl     relation_manager_$get_duplicate_key_count entry (ptr, bit (36) aligned, fixed bin (17), fixed bin (35), fixed bin (35));
	dcl     relation_manager_$open entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     relation_manager_$close entry (bit (36) aligned, fixed bin (35));
	dcl     rel_id		 bit (36) aligned;
	dcl     rel_name		 char (64);	/* name of model or submodel relation */
	dcl     rel_opening_id	 bit (36) aligned;	/* opening id of the relation */
	dcl     relation_count	 fixed bin;	/* number of relations to be displayed */
	dcl     relation_list_length	 fixed bin;	/* number of relations in -relation list  */
	dcl     relation_list_ptr	 ptr;		/* points to head of relation list */
	dcl     relation_name_length_init fixed bin (21); /* initial value for name length allocation */
	dcl     relation_ptr	 ptr;		/* points to relation list element */
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* frees temp segs */
	dcl     sm_dir		 char (168);	/* containing directory of submodel */
	dcl     sm_name		 char (32);	/* name of submodel msf */
	dcl     some_relation_seen	 bit (1);		/* on => at least one relation name given */
	dcl     submodel_open	 bit (1);		/* on => submodel has been opened */
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	dcl     temp_seg_ptr	 ptr;
	dcl     db_info_ptr		 ptr;		/* used to point to second copy of path info structure */
	dcl     work_area		 area (sys_info$max_seg_size) based (area_ptr);
						/* space for temp storage */
	dcl     vfile		 bit (1);		/* set for a vfile database */
	dcl     vfile_relmgr_$create_cursor entry (bit (36) aligned, ptr, ptr, fixed bin (35));
	dcl     vfile_relmgr_$destroy_cursor entry (ptr, ptr, fixed bin (35));
	dcl     vfile_relmgr_$get_count entry (ptr, ptr, fixed bin (35), fixed bin (35));
	dcl     vfile_relmgr_$get_duplicate_key_count entry (ptr, bit (36) aligned, fixed bin (17), fixed bin (35), fixed bin (35));
	dcl     vfile_relmgr_$open	 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     vfile_relmgr_$close	 entry (bit (36) aligned, fixed bin (35));
	dcl     vfile_status_	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     (addr, empty, fixed, null, substr, ptr, rel, rtrim) builtin;
	dcl     1 relation		 based (relation_ptr), /* saved relation name for -relation options */
		2 next		 ptr,		/* points to next in list */
		2 name_length	 fixed bin (21),	/* length of the relation name */
		2 name		 char (relation_name_length_init refer (relation.name_length));
						/* relation's name */
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_model_relations;
%page;
%include mrds_path_info;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
     end;
