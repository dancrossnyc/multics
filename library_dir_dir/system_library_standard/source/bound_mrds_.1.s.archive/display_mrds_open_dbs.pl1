/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



display_mrds_open_dbs: dmod: procedure ();

/* DESCRIPTION:

   this routine is to be called from command level,  to  display  on
   the terminal the database pathnames and opening indexes for those
   databases that are open by this process.  the  opening  may  have
   been  either  a  model  or  submodel  openings, but must be a new
   architecture(post MR6 style) database.

*/

/* PARAMETERS:

   (input) none

   (output) a formatted list of database opening  indexes,  and  the
   model or submodel path of the opening.

   command_error - - (output) condition, signaled upon occurence  of
   an error

*/

/* HISTORY:

   79-07-01 Jim Gray: Initially written.

   80-12-08 Rickie E. Brinegar: The display of the opening mode  was
   added. Also changed the call to ioa_ to take a conditional clause
   in the ioa_ edit string rather than  having  an  if-then-else  in
   pl1.

   81-01-30 Jim Gray : changed  underlying  routine  being  used  to
   dsl_$list_openings to take advantage of better interface.

   81-04-25 Jim Gray : changed based_area declaration to  have  it's
   size  depend  on  current  value  of  mrds_data_$max_dbs, so that
   changing it's value automatically changes the number of  openings
   allowed

*/

/* initialize an area for the parameter structure, and establish a clean up handler */

	area_ptr = null ();
	clean_up_condition = OFF;
	on cleanup begin;
		clean_up_condition = ON;
		call clean_up ();
	     end;

	call get_temp_segment_ (caller_name, area_ptr, error_code);
	if error_code ^= 0 then
	     call com_err_ (error_code, caller_name, "^/^a",
		"Unable to create a temporary segment for the list of open databases.");
	else do;

		based_area = empty ();		/* initialize area */


/* get the database list structure filled in */

		call mrds_dsl_db_openings$list_openings (area_ptr, mrds_database_openings_structure_version,
		     mrds_database_openings_ptr, error_code);

		if error_code ^= 0 then
		     call com_err_ (error_code, caller_name, "^/^a",
			"Unable to get the list of open databases.");
		else do;

			if mrds_database_openings.number_open = 0 then
			     call ioa_ ("^/No databases are currently open.^/");
			else do;

				call ioa_ ("^/Open database^[ is^;s are^]:", (mrds_database_openings.number_open = 1));

				do i = 1 by 1 to mrds_database_openings.number_open;

				     call ioa_ ("^d^-^a^/^-^a", mrds_database_openings.db (i).index,
					mrds_database_openings.db (i).path,
					mrds_database_openings.db (i).mode);

				end;

				call ioa_ ("^/");
			     end;

		     end;

	     end;

/* get rid of the temp segment */

	call clean_up ();

	return;

clean_up: procedure ();

/* remove the temporary segment when done, or when cleanup signaled */

	if area_ptr = null () then ;
	else do;

		call release_temp_segment_ (caller_name, area_ptr, error_code);
		area_ptr = null ();
		if error_code = 0 | clean_up_condition then ;
		else call com_err_ (error_code, caller_name, "^/^a",
			"Unable to release the temporary segment used for the database list.");

	     end;

     end;

	dcl     cleanup		 condition;	/* signaled upon quit/release */
	dcl     OFF		 bit (1) init ("0"b); /* false value */
	dcl     ON		 bit (1) init ("1"b); /* true value */
	dcl     area_ptr		 ptr;		/* points to parameter area */
	dcl     based_area		 area (60 * mrds_data_$max_dbs) based (area_ptr); /* parameter area */
	dcl     com_err_		 entry options (variable); /* reports errors */
	dcl     clean_up_condition	 bit (1);		/* on => cleanup signaled */
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets temporary segments */
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* deletes temporary segments */
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     caller_name		 char (21) init ("display_mrds_open_dbs"); /* name of calling routine */
	dcl     mrds_dsl_db_openings$list_openings entry (ptr, fixed bin, ptr, fixed bin (35)); /* gets list of open dbs */
	dcl     i			 fixed bin;	/* loop control */
	dcl     ioa_		 entry options (variable);
	dcl     mrds_data_$max_dbs	 fixed bin (35) ext;/* max number of openings allowed */
	dcl     empty		 builtin;
	dcl     null		 builtin;

%include mrds_database_openings;

     end;
