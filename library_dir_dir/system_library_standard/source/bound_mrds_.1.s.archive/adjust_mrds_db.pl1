/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

adjust_mrds_db: amdb: proc;

/* DESCRIPTION:

   This routine is the  command  interface  which  will  adjust  the
   specified data base.

   If the -reset option is specified, then the dbc is  examined.  If
   any  active  users  are discovered, the requestor is asked if she
   really wishes to reset the dbc. If so, then the  dbc  segment  is
   truncated and reinitialized.

   The  requestor  should realize that the -reset option will remove
   ALL  users from the data base, so care should be taken to execute
   this command only when the data base is not being used by anyone.
   Amdb  will  check to see if there are active or open users of the
   database and will warn the requestor if this is the case.

   The -trouble_switch control arg can be used with both  -reset  or
   -dpr,  or  alone.  The -trouble_switch off option will cause only
   the trouble_switch and possibly the scope_lock (both of the  dbc)
   to   be  reset.  The  -trouble_switch  on  option  will  set  the
   trouble_switch to ON.

   The -dead_processs option will allow for removal  of  all  'dead'
   users  from  the  dbc  and  can be invoked while the data base is
   being used by others.

   If the database is marked as being inconsistent, The requestor is
   warned  about  this  and  given the reason stored in the database
   before the amdb request is completed.

*/

/* HISTORY:

   Originally written by Oris D. Friesen in August 1977

   Modified by Al Kepner, March 12, 1979, to work with MR7.0 version
   data bases.

   Modified by M. Pierret, 5 December, 1979, to :  make  -reset  the
   default  operation;  restructure the program; require the user to
   have sma access on database directory.

   Modified  by  M.  Pierret  April  1980  to:  add  -dead_procs   ,
   -trouble_switch on/off options; change use of locks.

   Modified by Jim Gray - - May 1980, to handle case of only -tsw on
   being given as the control argument.

   Modified by Jim Gray - - June 1980, to fix logic that makes  user
   have sma on the database directory(not the db containing dir).

   Modified by Jim Gray - - 21-June-80, to report no model,  not  no
   model/submodel err mesg

   80-12-09  Jim  Gray : took truncation task out of AMDB and put in
   common module mu_concurrency_control$reset_control_segment.  Also
   made  getting  of  the  dbc_ptr  able  to  find either a "dbc" or
   "db.control"  named  segment  for  hanlding either version 4 or 5
   dbcs.             This           was           done           via
   mu_concurrency_control$get_control_segment.

   80-12-12 Jim Gray : Updated usage message to include  -dead_procs
   and -trouble_switch.

   80-12-24 Jim Gray : improved error messages for  null  or  r-only
   access on database control segment.

   81-01-27 Jim Gray : added usage of dsl_$get_path_info to  correct
   problems   with   dsl_$get_db_version,   and   added   usage   of
   dmd_$get_authorization as part of dba proposal implementation.

   81-04-27 Jim Gray : added -force and -no_force control  arguments
   for  optionally  over-riding  the  query, when active users exist
   These  controls  imply  -reset.  Changed   to   allow   duplicate
   -reset/-force/-no_force  control  arguments  for  over-riding  in
   ec's, and for force option to make sense.

   82-04-30  Mike  Kubicar  : amdb now checks the consistency bit in
   the db_model segment and prints a warning message if the database
   is  inconsistent.   Included in the message is the message placed
   in  the  database  describing  the  reason for the inconsistency.
   After  the  warning message is printed, the command completes its
   function normally.

   82-05-10  Mike Kubicar : Also changed to check the user list on a
   reset  to  determine  more  presicely  what type of users will be
   affected.  A distinction is made between dead and living users.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)

   84-09-05 Thanh Nguyen: Modified code not to restrict to the position
   of path name. 

   84-09-14 Paul Benjamin: Further modification to make sure that only one
   pathname is accepted.
*/

/* Check number of arguments. There must be from 1 to 5 arguments, like so:
   *     amdb <db_path> [ -reset (,-rs) -trouble_switch (,-tsw) on/off
   *                    | -dead_procs (,-dpr) -tsw on/off
   *		 | -trouble_switch (,-tsw) on/off  | -force | -no_force */


	call cu_$arg_count (n_args);
	if n_args < 1				/* must be at least 2 args: db_path and a control arg */
	then call error (0,
		"Usage:  amdb db_path {{-dead_procs|-reset{-force}}{-trouble_switch on/off}}");

	if n_args > 5
	then call error (error_table_$too_many_args, "");

	db_dir = copy (" ", 168);
	code = 0;
	path_name_sw = "0"b;
	do idx = 1 to n_args while (code = 0);
	     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
	     if code ^= 0 then call error (code, "control argument");
	     if index (arg, "-") = 1 then do;
		if arg = "-reset" | arg = "-rs"
		then if dead_process_sw
		     then call error (error_table_$inconsistent, arg);
		     else reset_sw = ON;

		else if arg = "-dead_procs" | arg = "-dpr"
		     then if reset_sw
			then call error (error_table_$inconsistent, arg);
			else dead_process_sw = ON;


		     else if arg = "-trouble_switch" | arg = "-tsw"
			then do;
			     if idx < n_args
			     then idx = idx + 1;
			     else call error (error_table_$badopt, "");

			     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
			     if code ^= 0
			     then call error (code, "control argument");

			     if arg = "on"
			     then trouble_sw_on = ON;
			     else if arg ^= "off"
				then call error (error_table_$badopt, arg);
			          else ;
			end;

/* BEGIN CHANGE 81-04-27 *************************************** */

		     else if arg = "-force" | arg = "-fc" then do;
			     reset_sw, force_option = ON;
			     if dead_process_sw then
				call error (error_table_$inconsistent, arg);
			end;

		     else if arg = "-no_force" | arg = "-nfc" then do;
			     force_option = OFF;
			     reset_sw = ON;
			     if dead_process_sw then
				call error (error_table_$inconsistent, arg);
			end;

/* END CHANGE 81-04-27 ********************************************** */

		     else call error (error_table_$badopt, arg);

	     end;
	     else do;
		if path_name_sw			/* pathname already given */
		     then call error (error_table_$bad_arg, arg);
		path_name_sw = "1"b;
		dbp_ptr = arg_ptr;
		dbp_len = arg_len;
		in_path = dbp;

		/* check mrds version and path type */
		call mrds_dsl_get_version$get_path_info (in_path, addr (local_area),
		     mrds_path_info_structure_version, mrds_path_info_ptr, code);
		if mrds_path_info_ptr = null () then
		     db_path = in_path;
		else db_path = mrds_path_info.absolute_path;
		if code ^= 0 then do;
		     if code = mrds_error_$no_model_submodel then
			code = mrds_error_$no_database;
		     call error (code, db_path);
		end;

		if mrds_path_info.type.submodel then
		     call error (error_table_$badcall,
		     "Data submodels are not supported by this command.  " || db_path);

/* END CHANGE 81-01-27 ************************************************ */

		call expand_pathname_ (db_path, db_dir, db_ent, code);
		if code ^= 0 then call error (code, db_path);	/* return to command level */
		
		if length (rtrim (db_path)) > 164		/* must allow path <db_path>>dbc totalling <= 168 chars */
		     then call error (error_table_$pathlong, db_path);

/* Get control arg, set appropriate switch for later use */

		if n_args = 1
		     then reset_sw = ON;
	     end;

	end;
	if path_name_sw = "0"b then
	     call error (0, "data base path name is missing."); /* exit with error message */

/* BEGIN CHANGE 81-01-27 ********************************************* */
/* make sure the user is a DBA */

	call mrds_dm_authorization$get_user_class (rtrim (db_path),
	     addr (local_area),
	     mrds_authorization_structure_version, mrds_authorization_ptr, code);
	if code ^= 0 then
	     call error (code, "Unable to get user class for database """ || rtrim (db_path) || """");

	else if ^mrds_authorization.administrator then
	     call error (error_table_$insufficient_access,
		"User must be a database administrator to perform this operation on the database " || rtrim (db_path));

/* END CHANGE 81-01-27 ************************************************ */



/* Check to see if inconsistent bit is set */
	call mrds_dm_open (rtrim (db_path), RETREIVE_MODE, dm_ptr, code);
	if code ^= 0 then call error (code,
		"Unable to get a pointer to database model segment");
	call mdbm_util_$inconsistent_get_info (dm_ptr, inconsistent_value,
	     inconsistent_name, inconsistent_message, inconsistent_undo);
	if inconsistent_value then do;
		if inconsistent_message = " "
		then call ioa_ ("adjust_mrds_db: Warning, the database is inconsistent.  No reason was given.");
		else do;
			call ioa_ ("adjust_mrds_db: Warning, the database is inconsistent for the following reason:");
			call ioa_ ("^a.", inconsistent_message);
		     end;
		call ioa_ ("^/Please refer to restructure_mrds_db to repair it.");
	     end;


/* Get dbc_ptr */
	call mu_concurrency_control$get_control_segment (db_path, dbc_ptr, dbc_bit_count, code);
	if code ^= 0 then
	     call error (code, "Unable to get a pointer to the database control segment.");

/* Attempt to lock dbc */

	locked = OFF;
	call set_lock_$lock (dbc.scope_lock, (mrds_data_$lock_wait_time), code);
	if code = error_table_$invalid_lock_reset |
	     code = error_table_$locked_by_this_process
	then code = 0;


/* only set trouble switch or ... */

	if trouble_sw_on & ^dead_process_sw & ^reset_sw then
	     call set_trouble (code);

/* Remove all dead procs or.... */

	else if dead_process_sw
	then call remove_dead_processes (code);


/* ..Reset whole dbc */

	else if reset_sw
	then call reset_dbc (code);

/* ..Reset trouble switch */

	else if ^trouble_sw_on
	then call reset_trouble (code);


exit:
	if locked
	then call set_lock_$unlock (dbc.scope_lock, code);

	return;


reset_dbc: proc (icode);

	dcl     icode		 fixed bin (35);

	if icode ^= 0
	then do;
		clear_lock_sw = ON;
		icode = 0;
	     end;
	else locked = ON;


/* If the force option is not in effect, check to make sure there will be
   no users affected by a reset.  Scan through the open and active user
   lists to determine this.  Any dead users with no active scope can be
   ignored.  If users that will be affected are found, tell the user so
   and ask if he still wants to continue.  If both open and scope locks
   cannot be set, assume that someone is in the process of becoming
   active or open.  */

	if ^force_option then do;
		call set_lock_$lock (dbc.proper.open_lock,
		     (mrds_data_$lock_wait_time), code);
		open_lock_set = (code = 0) |
		     (code = error_table_$invalid_lock_reset) |
		     (code = error_table_$locked_by_this_process);
		found_quiesced, found_active, found_open,
		     found_dead_active = OFF;
		if locked
		then if dbc.proper.user_counts.active_users > 0
		     then do;
			     current_user_offset = dbc.proper.offsets.
				active_users_ofs;
			     do while ((current_user_offset ^= NULL_OFS) &
				(^found_active | (found_active &
				^found_dead_active)));
				current_user_ptr = pointer (dbc_ptr,
				     current_user_offset);
				if current_user_ptr -> user_list.flags.
				     dead_proc
				then found_dead_active = ON;
				else if process_dead (current_user_ptr
					-> user_list.ids.db_lock_id)
				then found_dead_active = ON;
				else found_active = ON;
				current_user_offset = current_user_ptr
				     -> user_list.offsets.next_active_ofs;
			     end;
			end;
		if open_lock_set & ^found_active
		then if dbc.proper.user_counts.open_users > 0
		     then do;
			     current_user_offset = dbc.proper.offsets.
				open_users_ofs;
			     do while ((current_user_offset ^= NULL_OFS) &
				^found_open);
				current_user_ptr = pointer (dbc_ptr,
				     current_user_offset);
				if ^current_user_ptr -> user_list.
				     flags.dead_proc then found_open
					= ^process_dead (current_user_ptr
					-> user_list.ids.db_lock_id);
				current_user_offset
				     = current_user_ptr
				     -> user_list.offsets.next_open_ofs;
			     end;
			end;


/* Now tell the user what we've found */

		if found_active
		then call ioa_ ("There are active users that may be affected if you reset the database.");
		else if found_open
		then call ioa_ ("There are open users that may be affected if you reset the database.");
		if ^locked
		then call ioa_ ("There may be active users of the database.");
		else if ^open_lock_set & ^found_active
		then call ioa_ ("There may be open users of the database.");
		if found_dead_active
		then call ioa_ ("There are dead processes with active scope set.");


/* Check for quiescing too */

		call set_lock_$lock (dbc.proper.quiesce_lock,
		     DONT_WAIT, code);
		if code = error_table_$lock_wait_time_exceeded then do;
			found_quiesced = ON;
			if dbc.proper.flags.quiesce_sw
			then call ioa_ ("Another DBA has quiesced the database.");
			else call ioa_ ("Another DBA is waiting to quiesce the database.");
		     end;

		if ^locked | ^open_lock_set | found_active | found_open
		     | found_dead_active | found_quiesced then do;
			call command_query_$yes_no (
			     reset_db_response, 0,
			     "adjust_mrds_db",
			     "Any current users of ^a will be affected if you reset the database.  Continue?",
			     "Do you still wish to reset ^a?", db_path);
			if ^reset_db_response then do;
				if open_lock_set then do;
					call set_lock_$unlock (dbc.proper.
					     open_lock, code);
					if code ^= 0
					then call error (code,
						"unlocking database");
				     end;
				return;
			     end;
		     end;

/* Note that the scope lock is unlocked by the calling procedure if the
   the answer was no.  If yes, everything is unlocked by the reset. */

	     end;


/* Reset the data base
   this causes the control segment to be truncated
   and then re-initialized with the latest version of the dbc structures
   the name of the control segment is also changed if necessary */


	call mu_concurrency_control$reset_control_segment (db_path, dbc_ptr, dbc_bit_count, icode);

	if icode ^= 0 then call error (icode, "Unable to re-initialize database control segment.");

/* Set trouble switch if asked */

	if trouble_sw_on
	then dbc.trouble_switch = ON;



     end reset_dbc;

remove_dead_processes: proc (icode);

/*
   This routine will go through the dbc lists, removing dead dead_processs
*/

	dcl     dead_sw		 bit (1);
	dcl     icode		 fixed bin (35);
	dcl     saved_ul_ptr	 ptr;
	dcl     ulo_ptr		 ptr;



/* Test for success of locking */

	if icode ^= 0
	then call error (icode, "");
	else locked = ON;


/* Search through open users list, looking for dead procs and cleaning them up */

	ulo_ptr = addr (dbc.open_users_ofs);
	ul_ptr = convert (dbc_ptr, dbc.open_users_ofs);
	do while (ul_ptr ^= null);
	     if user_list.dead_proc			/* Find out if user is dead */
	     then dead_sw = ON;
	     else do;
		     call set_lock_$lock ((user_list.db_lock_id), 0, icode);
		     if icode = error_table_$invalid_lock_reset
		     then dead_sw = ON;
		     else dead_sw = OFF;
		end;

/*  If user is dead, get rid of her */

	     if dead_sw
	     then do;

		     if user_list.event_signal_sw	/* Is waking up */
		     then dbc.wakeup_waiters = dbc.wakeup_waiters - 1;

/* Remove user from all lists, decrement totals, free structures */

		     saved_ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		     call mu_de_queue_user (DQ_OPEN, FREE_FIL_LIST, dbc_ptr, ul_ptr, icode);
		     ul_ptr = saved_ul_ptr;
		end;

	     else do;
		     ulo_ptr = addr (user_list.next_open_ofs);
		     ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		end;

	end /* End search through open list */;


/* Removal of all dead procs resolves any dead proc conflicts */

	dbc.flags.dead_proc_flag = OFF;

/* Set trouble switch if asked */

	if trouble_sw_on
	then dbc.trouble_switch = ON;


     end remove_dead_processes;

set_trouble: procedure (icode);

/* this routine sets the trouble switch, when that
   is all that is to be done */

	declare icode		 fixed bin (35);

/* test for success of locking */

	if icode ^= 0 then
	     call error (icode, "locking");
	else locked = ON;

	dbc.trouble_switch = ON;

     end;

reset_trouble: proc (icode);

	dcl     icode		 fixed bin (35);


/* Test for success of locking; failure means scope_lock must be reset */

	if icode ^= 0
	then dbc.scope_lock = CLEAR;
	else locked = ON;

/* Reset trouble switch */

	if dbc.flags.trouble_switch
	then dbc.flags.trouble_switch = OFF;

/* Clear scope lock, if necessary */

	if clear_lock_sw
	then dbc.scope_lock = CLEAR;

     end reset_trouble;

convert: proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from "0"b to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the reultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */

	dcl     (null, ptr)		 builtin;

	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;

error: proc (icode, string);

	dcl     icode		 fixed bin (35);
	dcl     string		 char (*);

	call com_err_ (icode, "adjust_mrds_db", "^/^a", string);

	goto exit;				/* return */

     end error;

process_dead:
     proc (lock_id) returns (bit (1));

/* This procedure check to see the process whose lock id is "lock_id"
   is a live process */

	dcl     icode		 fixed bin (35);
	dcl     lock_id		 bit (36) aligned;
	dcl     temp_lock		 bit (36) aligned;

	temp_lock = lock_id;
	call set_lock_$lock (temp_lock, DONT_WAIT, icode);
	return (icode = error_table_$invalid_lock_reset);
     end process_dead;

	dcl     (n_args,				/* nbr arguments in command string */
	        dbp_len,				/* length of data base path */
	        arg_len)		 fixed bin;	/* len of arg in chars */


	dcl     (dbp_ptr,				/* ptr to data base path */
	        arg_ptr)		 ptr;		/* ptr to control argument */

	dcl     code		 fixed bin (35);	/* Error code returned */
	dcl     db_dir		 char (168);	/* containing directory pathname of the data base */
	dcl     db_ent		 char (32);	/* entry name of the data base */
	dcl     cont_dir_ent	 char (32) init (""); /* containing dir entry */
	dcl     cont_dir_dir	 char (168) init (""); /* containing dir of the containing dir */

	dcl     in_path		 char (168) init (""); /* db pathname argument, in form suitable for passing */
	dcl     db_path		 char (168) init (""); /* absolute pathname of data base */
	dcl     db_path_var		 char (202) varying init (""); /* data base pathname made up of concatenation of dir and entry name */

	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     dbp		 char (dbp_len) based (dbp_ptr);

	dcl     idx		 fixed bin;

	dcl     reset_sw		 bit (1) init ("0"b); /* -rs=>reset dbc */
	dcl     trouble_sw_on	 bit (1) init ("0"b); /* -tsw=>trouble switch on/off */
	dcl     dead_process_sw	 bit (1) init ("0"b); /* -dpr=>remove only dead processes  */
	dcl     clear_lock_sw	 bit (1) init ("0"b); /* scope_lock is damaged */
	dcl     locked		 bit (1) init ("0"b); /* scope_lock has been locked - must unlock on error */
	dcl     dm_ptr		 ptr;		/* pointer to db_model segment */
	dcl     inconsistent_value	 bit (1);		/* The value of the inconsistency bit in db_model */
	dcl     inconsistent_name	 char (32);	/* The program which set the database inconsistent */
	dcl     inconsistent_message	 char (500);	/* The text message explaining the inconsistency */
	dcl     inconsistent_undo	 char (500);	/* The request to remove the inconsistency */
	dcl     open_lock_set	 bit (1);		/* Did amdb lock the open_lock of the dbc */
	dcl     current_user_ptr	 ptr;		/* Pointer to current node in user_list list */
	dcl     current_user_offset	 bit (18);	/* The corresponding offset */
	dcl     found_active	 bit (1);		/* Were any active database users found */
	dcl     found_open		 bit (1);		/* Any open users */
	dcl     found_dead_active	 bit (1);		/* Any dead users with active scope */
	dcl     found_quiesced	 bit (1);		/* Anybody quiescing the database */
	dcl     reset_db_response	 bit (1);		/* Response from continue query */
          dcl     path_name_sw           bit (1);           /* Path name missing or not */
                                                            /* Builtins */

	dcl     (index, copy, null, addr, empty, rtrim, length, pointer) builtin;

/* Constants */

	dcl     OFF		 bit (1) init ("0"b) int static options (constant);
	dcl     ON		 bit (1) init ("1"b) int static options (constant);
	dcl     CLEAR		 bit (36) init ("000000000000000000000000000000000000"b)
				 int static options (constant);
	dcl     RETREIVE_MODE	 fixed bin init (2) int static options (constant); /* Opening mode for mrds_dm_open */
	dcl     DONT_WAIT		 fixed bin init (0) int static options (constant); /* Don't wait on locking operations */

	dcl     mrds_data_$lock_wait_time ext fixed bin (35);

	dcl     sys_info$max_seg_size	 fixed bin ext;

          dcl     error_table_$bad_arg fixed bin(35) ext static;
	dcl     error_table_$badopt	 ext fixed bin (35);
	dcl     error_table_$inconsistent ext fixed bin (35);
	dcl     error_table_$insufficient_access ext fixed bin (35);
	dcl     error_table_$invalid_lock_reset ext fixed bin (35);
	dcl     error_table_$locked_by_this_process ext fixed bin (35);
	dcl     error_table_$lock_wait_time_exceeded fixed bin (35) ext static;
	dcl     error_table_$pathlong	 ext fixed bin (35);
	dcl     error_table_$too_many_args ext fixed bin (35);


/* Entries */


	dcl     command_query_$yes_no	 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
	dcl     mu_de_queue_user	 entry (bit (1), bit (1), ptr, ptr, fixed bin (35));
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     set_lock_$unlock	 entry (bit (36) aligned, fixed bin (35));
	declare mrds_error_$no_model_submodel fixed bin (35) ext; /* model or submodel */
	declare mrds_error_$no_database fixed bin (35) ext; /* model only */

	declare (mu_concurrency_control$get_control_segment, mu_concurrency_control$reset_control_segment)
				 entry (char (*), ptr, fixed bin (24), fixed bin (35)); /* gets dbc_ptr/ reset dbc structures */
	declare dbc_bit_count	 fixed bin (24);	/* unused */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* tells if user DBA */
	declare local_area		 area (1024);	/* space for various mrds structures */
	declare mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin,
				 ptr, fixed bin (35)); /* finds db version */
	declare error_table_$badcall	 fixed bin (35) ext;/* improper call */
	declare force_option	 bit (1) init ("0"b);  /* on => dont query user */

%include mdbm_dbc;

%include mdbm_users;

%include mrds_authorization;

%include mrds_path_info;


     end adjust_mrds_db;
