/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/*
	     BEGIN_DESCRIPTION
   This command will display, for all open MRDS databases
   in the users process, the current scope (concurrncy control mode)
   settings for all relations in the users view of the
   databse for that opening.

   It also gives the details of the type of opening, submodel or model,
   the paths of the submodel and model, and the versions
   of the submodel and model.

   The concurrency control version is displayed.
   1 => r-s-m-d scope mdoes.
   2-3 => never released
   4 => r-u scope modes.
   5 => r-a-m-d scope modes.

   Old version databases can not display whether
   the opening was via a submodel or not.
	     END_DESCRIPTION
*/

/* HISTORY:

   Originally written by Jim Gray - - January 1981

   83-02-15 Davids: explicitly declared variables that were
   declared by context or implication and deleted declarations
   to variables that were not referenced.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

display_mrds_scope_settings: dmss: procedure ();

/* PARAMETERS:

   (input) none

   (output) display by opening index, and by relation,
   the currenct scope settings in the users process,
   plus info on the type/version of the opening.

*/

/* initialize */

	number_of_openings = mu_database_index$get_number_open_dbs ();
	number_found = 0;

	if number_of_openings = 0 then
	     call ioa_ ("^/No databases are currently open.^/");
	else do;

/* display the process information for the caller */

		call ioa_ ("^/Scope settings for process:  ^a^/^12xprocess number:  ^o",
		     get_group_id_ (), get_process_id_ ());

/* find all current valid database indexs */

		do db_index = 1 by 1 to mrds_data_$max_dbs while (number_found < number_of_openings);

		     call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
		     if dbcb_ptr = null () then ;	/* does not refer to an open database */
		     else do;

/* good opening index found, display details */

			     number_found = number_found + 1;

			     rdbi_ptr = dbcb.rdbi_ptr;
			     dbc_ptr = dbcb.dbc_ptr;

			     call display_opening_info ();

			     call display_new_scope ();

			end;

		end;

/* finish up */

		call ioa_ ("^/");


	     end;

display_opening_info: procedure ();

/* routine to display the path(s) of the open data/sub model,
   the opening mode and index, and their versions */

/* get opening mode */

	if fixed (dbcb.open_mode) = 0 then
	     open_mode_display = "Unknown open mode";
	else if fixed (dbcb.open_mode) = 1 then
	     open_mode_display = "retrieval";
	else if fixed (dbcb.open_mode) = 2 then
	     open_mode_display = "update";
	else if fixed (dbcb.open_mode) = 3 then
	     open_mode_display = "exclusive_retrieval";
	else if fixed (dbcb.open_mode) = 4 then
	     open_mode_display = "exclusive_update";
	else open_mode_display = "Illegal open mode";

	call ioa_ ("^/Opening index:  ^d^/^9xmode:  ^a^/", db_index, open_mode_display);

/* output db path and version info */

	call ioa_ ("^-Concurrency control version:  ^d^/^-^8xdatabase model path:  ^a^/^-^10x database version:  ^d",
	     dbc.version, rm_db_info.db_path, rm_db_info.db_version);

/* display submodel info, if submodel opening */

	if dbcb.dsm_sw then do;
		call ioa_ ("^/^-^8xOpened via submodel:  ^a^/^-^11xsubmodel version:  ^d",
		     rm_db_info.sm_path, rm_db_info.sm_version);
	     end;

     end;

display_new_scope: procedure ();

/* routine to display r-a-m-d type scope from new version databases */

	scope_ptr = dbcb.scope_ptr;
	if scope_ptr = null () then
	     call com_err_ (mrds_error_$non_scope_ready, caller_name,
		"^/Unable to get scope info for opening index ^d^/", db_index);
	else do;

		if scope_info.active_scopes = 0 then
		     call ioa_ ("^/^-No scope currently set for this opening.^/");
		else do;

			call ioa_ ("^/^-Relation^26xPermits^3xPrevents^/");

			do i = 1 to scope_info.nfiles;

			     if scope_info.scope (i).flags.touched then do;

				     prevent_string, permit_string = "";

				     if scope_info.scope (i).flags.permits.read_attr then
					permit_string = permit_string || "r";

				     if scope_info.scope (i).flags.permits.append_tuple then
					permit_string = permit_string || "a";

				     if scope_info.scope (i).flags.permits.modify_attr then
					permit_string = permit_string || "m";

				     if scope_info.scope (i).flags.permits.delete_tuple then
					permit_string = permit_string || "d";

				     if permit_string = "" then
					permit_string = "n";

				     if scope_info.scope (i).flags.prevents.read_attr then
					prevent_string = prevent_string || "r";

				     if scope_info.scope (i).flags.prevents.append_tuple then
					prevent_string = prevent_string || "a";

				     if scope_info.scope (i).flags.prevents.modify_attr then
					prevent_string = prevent_string || "m";

				     if scope_info.scope (i).flags.prevents.delete_tuple then
					prevent_string = prevent_string || "d";

				     if prevent_string = "" then
					prevent_string = "n";

				     call ioa_ ("^-^32a^4x^4a^6x^4a",
					scope_info.scope (i).sm_name, permit_string, prevent_string);
				end;

			end;

		     end;
%include mdbm_scope_info;

	     end;

     end;

	declare db_index		 fixed bin (35);	/* database opening index */
	declare open_mode_display	 char (24) varying; /* output form of opening mode */
	declare mrds_data_$max_dbs	 fixed bin (35) ext;/* maximum number of open databases */
	declare number_of_openings	 fixed bin;	/* current number of open dbs */
	declare number_found	 fixed bin;	/* number already displayed */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets ptr from index */
	declare mu_database_index$get_number_open_dbs entry returns (fixed bin); /* get count of dbs currently open */
	declare ioa_		 entry options (variable); /* does output reporting */
	declare mrds_error_$non_scope_ready fixed bin (35) ext; /* rel not readied for scope concurrency */
	declare com_err_		 entry options (variable); /* reports errors */
	declare caller_name		 char (32) init ("display_mrds_scope_settings"); /* name of calling routine */
	declare (permit_string, prevent_string) char (4) varying; /* for displaying scope settings */
	declare work_area		 area (4096);	/* space for scope info */
	declare i			 fixed bin;	/* loop index into array */
	declare get_group_id_	 entry returns (char (32)); /* gets person.project.tag */
	declare get_process_id_	 entry returns (bit (36)); /* gets identifier of process */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare (fixed, addr, rel,
	        empty, null)	 builtin;

%include mrds_dbcb;

%include mdbm_dbc;

%include mdbm_rm_db_info;

     end;
