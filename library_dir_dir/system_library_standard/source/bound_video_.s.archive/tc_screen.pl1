/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Terminal Control Screen Image Management */
/* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
tc_screen:
     procedure;
	return;

/* Coded June 1981 by, Benson I. Margulies, because I had no choice. */

	declare (
	        Screen_data_ptr	   pointer,
	        Operation		   fixed bin,
	        Op_row		   fixed bin,
	        Op_col		   fixed bin,
	        Op_count		   fixed bin,
	        Text		   character (*),
	        Insert		   bit (1) aligned,
	        Rows		   fixed bin,
	        Columns		   fixed bin
	        )			   parameter;


/*  a virtual video terminal, more or less. Insert mode
   is replaced with extra entrypoints to simplify things. */

%page;
%include tty_video_tables;
%page;
%include tc_screen_image;
%page;
	declare (length, string, substr) builtin;
	declare discovered_clear_screen  bit (1) aligned;
	declare line		   fixed bin;


init:
     entry (Screen_data_ptr, Rows, Columns);

	screen_n_lines = Rows;
	screen_n_columns = Columns;
	allocate screen;

	string (screen.lines (*)) = "";
	screen.is_clear = "1"b;
	Screen_data_ptr = screen_ptr;

	return;


shut:
     entry (Screen_data_ptr);

	free Screen_data_ptr -> screen;
	return;


operation:
     entry (Screen_data_ptr, Operation, Op_row, Op_col, Op_count);

	screen_ptr = Screen_data_ptr;

	go to OPERATION (Operation);

OPERATION (0):					/* ERROR */
OPERATION (1):					/* POSITION CURSOR */
OPERATION (4):					/* HOME */
OPERATION (10):					/* INSERT_CHARS */
OPERATION (11):					/* END INSERT CHARS */
OPERATION (6):					/* UP, down, etc. */
OPERATION (7):
OPERATION (8):
OPERATION (9):
	return;


OPERATION (2):					/* Clear screen */
	string (screen.lines (*)) = "";
	screen.is_clear = "1"b;
	return;

OPERATION (3):					/* clear to EOS */
						/* too hard to check for is_clear */
	substr (screen.lines (Op_row), Op_col) = "";
	if Op_row < screen.n_lines
	then begin;
	     declare lines		        (screen.n_lines - Op_row) character (screen.n_columns)
				        defined (screen.lines (Op_row + 1));
	     lines (*) = "";
	end;
	return;

OPERATION (12):					/* DELETE CHARS */
	if screen.is_clear
	then return;
	substr (screen.lines (Op_row), Op_col) = substr (screen.lines (Op_row), Op_col + Op_count);
	return;

OPERATION (13):					/* INSERT LINES */
	if screen.is_clear
	then return;
	begin;
	     declare new_home	        (screen.n_lines - Op_row + 1 - Op_count)
				        character (screen.n_columns) defined (screen.lines (Op_row + Op_count));
	     declare old_stuff	        (screen.n_lines - Op_row + 1 - Op_count)
				        character (screen.n_columns) defined (screen.lines (Op_row));
	     declare to_blank	        (Op_count) character (screen.n_columns) defined (screen.lines (Op_row));


	     new_home = old_stuff;
	     to_blank = "";


	end;
	return;

OPERATION (14):					/* DELETE LINES */
	if screen.is_clear
	then return;
	begin;
	     declare old_stuff	        (screen.n_lines - Op_row + 1 - Op_count)
				        character (screen.n_columns) defined (screen.lines (Op_row + Op_count));
	     declare new_home	        (screen.n_lines - Op_row + 1 - Op_count)
				        character (screen.n_columns) defined (screen.lines (Op_row));
	     declare to_blank	        (Op_count) character (screen.n_columns)
				        defined (screen.lines (screen.n_lines - Op_count + 1));


	     new_home = old_stuff;
	     to_blank = "";

	end;
	return;

OPERATION (5):					/* EOL */
	if screen.is_clear
	then return;
	if Op_row <= screen.n_lines
	then substr (screen.lines (Op_row), Op_col) = "";
	else signal SCREEN_ERROR_;
	declare SCREEN_ERROR_	   condition;
	return;

text:
     entry (Screen_data_ptr, Op_row, Op_col, Insert, Text);

	screen_ptr = Screen_data_ptr;
	if length (Text) = 0
	then return;
	if Text ^= ""
	then screen.is_clear = "0"b;

	begin;
	     declare line		        character (screen.n_columns) defined (screen.lines (Op_row));
	     if ^Insert
	     then substr (line, Op_col, length (Text)) = Text;
	     else do;
(nostringsize):					/* whatever the prefix */
		substr (line, Op_col + length (Text)) = substr (line, Op_col);
						/* would take stringsize */
		substr (line, Op_col, length (Text)) = Text;
	     end;
	end;
	return;

clear_in_line:
     entry (Screen_data_ptr, Op_row, Op_col, Op_count);

	screen_ptr = Screen_data_ptr;
	if screen.is_clear
	then return;

	substr (screen.lines (Op_row), Op_col, Op_count) = "";
	return;

get_in_line:
     entry (Screen_data_ptr, Op_row, Op_col, Text);

	screen_ptr = Screen_data_ptr;
	if screen.is_clear
	then Text = "";
	else Text = substr (screen.lines (Op_row), Op_col);
	return;

may_echo_negotiate:
     entry (Screen_data_ptr, Op_row, Op_col) returns (bit (1) aligned);

	screen_ptr = Screen_data_ptr;

	if screen.is_clear
	then return ("1"b);

	return (substr (screen.lines (Op_row), Op_col + 1) = "");

is_region_clear:
     entry (Screen_data_ptr, Op_row, Op_col, Rows, Columns) returns (bit (1) aligned);

	screen_ptr = Screen_data_ptr;
	if screen.is_clear
	then return ("1"b);

/* Case statement for efficiency */
/* though Isub defining could probably do it in one nasty dcl */

	if Op_col = 1				/* start at origin */
	     & Op_row = 1				/* ditto */
	     & Rows = screen.n_lines			/* all the way down */
	     & Columns = screen.n_columns		/* and across */
	then return (is_the_screen_clear ());

	if Rows > 4				/* just a heuristic for cost */
	then if is_the_screen_clear ()		/* perhaps the screen is empty? */
	     then return ("1"b);

/* we have to look at a region */

	do line = Op_row to Op_row + Rows - 1;
	     if substr (screen.lines (line), Op_col, Columns) ^= ""
	     then return ("0"b);
	end;
	return ("1"b);

is_the_screen_clear:				/* interrogate screen.is_clear FIRST */
     procedure returns (bit (1) aligned);

	if string (screen.lines (*)) = ""
	then do;
	     screen.is_clear = "1"b;
	     return ("1"b);
	end;
	else return ("0"b);
     end is_the_screen_clear;

     end tc_screen;
