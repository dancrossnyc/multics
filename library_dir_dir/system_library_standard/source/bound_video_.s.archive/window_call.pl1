/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* Command interface for video */
/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
/* Benson I. Margulies, too late in the summer of 1981 */
/* Modified by Chris Jones, 29 October 1981, to handle "undocumented" keys
   and control args. */
/* Modified by Jon A. Rochlis, 14 June 1983, to add supported_terminal and
   video_invoked keywords. */
/* Modified by JR, 1 October 1983, to add support for partial screen width 
   windows. */
/* Modified by JR, 28 June 1984, to add get_window_width, since I forgot about
   it in October. */
/* Modified by C. Marker 6 September 1984, to add -line_speed. */

wdc:
window_call:
     procedure options (variable);

declare  cu_$arg_list_ptr	  entry returns (ptr);
declare  arg_list_ptr	  pointer;

	arg_list_ptr = cu_$arg_list_ptr ();

	begin;					/* to allow some useful declarations */

declare  1 irep		  (window_call_data_$n_ctl_args) aligned,
	 2 allowed	  bit (1) aligned,
	 2 required	  bit (1) aligned,
	 2 found		  bit (1) aligned,
	 2 argument	  fixed bin,
	 2 arg		  aligned,		/* if there was a following key */
	   3 value	  fixed bin,
	   3 ptr		  pointer unaligned,
	   3 length	  fixed bin (21);


declare  key		  character (32);
declare  keyx		  fixed bin (21);

declare  1 this_f		  aligned like function based (this_f_ptr);
declare  this_f_ptr		  pointer;


declare  argument_ptr	  pointer;
declare  argument_length	  fixed bin (21);
declare  argument		  character (argument_length) based (argument_ptr);

declare  rs_ptr		  pointer;
declare  rs_length		  fixed bin (21);
declare  return_string	  character (rs_length) varying based (rs_ptr);

declare  save_argument	  character (32);

declare  this_is_an_af	  bit (1) aligned;
declare  error_reporter	  entry options (variable) variable;
declare  n_arguments	  fixed bin;
declare  iocb_ptr		  pointer;
declare  code		  fixed bin (35);
declare  (ctlx, argx)	  fixed bin;

declare  ME		  character (32) init ("window_call") internal static options (constant);

declare  com_err_		  entry () options (variable);
declare  active_fnc_err_	  entry () options (variable);
declare  requote_string_	  entry (character (*)) returns (character (*));

declare  cu_$af_return_arg_rel  entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
declare  cu_$arg_ptr_rel	  entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
declare  cv_dec_check_	  entry (character (*), fixed binary (35)) returns (fixed binary (35));
declare  ioa_		  entry () options (variable);

declare  video_utils_$turn_on_login_channel
			  entry (fixed binary (35), character (*));
declare  video_utils_$turn_off_login_channel
			  entry (fixed binary (35));

declare  (
         error_table_$nodescr,
         error_table_$not_act_fnc,
         error_table_$noarg,
         error_table_$bad_arg,
         error_table_$badopt,
         error_table_$active_function,
         error_table_$bad_conversion,
         video_et_$wsys_invoked,
         video_et_$wsys_not_invoked
         )		  ext static fixed bin (35);

declare  video_data_$terminal_iocb
			  pointer external;

declare  (addr, character, length, ltrim, null, substr, translate)
			  builtin;
%page;
%include window_dcls;
%include window_control_info;
%include iox_dcls;
%include iox_modes;
%page;
/* Someday ... */


	     call cu_$af_return_arg_rel (n_arguments, rs_ptr, rs_length, code, arg_list_ptr);

	     if n_arguments = 0 | code = error_table_$nodescr then do;
						/* was called as AF, no args */
		if code = 0 then
		     call active_fnc_err_ (0, ME, "Usage: window_call call KEY ARGUMENTS.");
		else call com_err_ (0, ME, "Usage: window_call KEY ARGUMENTS.");
		go to RETURN;
	     end;

	     if code = error_table_$not_act_fnc then do;
		this_is_an_af = "0"b;
		error_reporter = com_err_;
	     end;

	     else do;				/* Code MUST be 0, by contract */
		this_is_an_af = "1"b;
		error_reporter = active_fnc_err_;
	     end;

	     wcd_functions_ptr = addr (window_call_data_$functions);
	     wcd_names_ptr = addr (window_call_data_$names);
	     wcd_string_ptr = addr (window_call_data_$string);
	     wcd_ctl_args_ptr = addr (window_call_data_$ctl_args);

	     call cu_$arg_ptr_rel (1, argument_ptr, argument_length, (0), arg_list_ptr);

	     if character (argument, 1) = "-" then do;
		call error_reporter (error_table_$noarg, ME, "The function keyword must be the first argument.");
		go to RETURN;
	     end;

	     do keyx = 1 to window_call_data_$n_keys while (argument ^= "");
		if argument = window_call_data_names (keyx).long | argument = window_call_data_names (keyx).short
		     | argument = window_call_data_names (keyx).undocumented_long
		     | argument = window_call_data_names (keyx).undocumented_short then
		     go to HAVE_KEYX;
	     end;

	     call ERROR_REPORTER (error_table_$badopt, ME, "Unrecognized key ""^a"".", argument);
	     go to RETURN;

HAVE_KEYX:
	     key = window_call_data_names (keyx).long;
	     this_f_ptr = addr (window_call_data_functions (keyx));

	     if this_is_an_af & ^this_f.af_allowed then do;
		call active_fnc_err_ (error_table_$active_function, ME);
		go to RETURN;
	     end;

/* Now we are ready to parse for this_f */

	     irep.found (*) = "0"b;
	     irep.arg (*).ptr = null;
	     irep.arg (*).length = 0;
	     irep = this_f.args, by name;		/* pick up flags */
	     irep = window_call_data_ctl_args, by name;

main_argument_loop:
	     do argx = 2 to n_arguments;
		call cu_$arg_ptr_rel (argx, argument_ptr, argument_length, (0), arg_list_ptr);

/* first see if its a control argument. It has to be, we have no
   positionals */

		if character (argument, 1) ^= "-" | length (argument) < 2 then do;
		     call ERROR_REPORTER (error_table_$badopt, ME, "The argument ^a is out of place.", argument);
		     go to RETURN;
		end;

/* Now, is it a control argument we
   (1) recognize at all, and
   (2) allow for this key? */

		do ctlx = 1 to window_call_data_$n_ctl_args;
		     if (substr (argument, 2) = window_call_data_ctl_args (ctlx).name.long
			| substr (argument, 2) = window_call_data_ctl_args (ctlx).name.undocumented_long
			| substr (argument, 2) = window_call_data_ctl_args (ctlx).name.short
			| substr (argument, 2) = window_call_data_ctl_args (ctlx).name.undocumented_short)
			& irep (ctlx).allowed then
			go to HAVE_CTLX;
		end;

/* Unrecognized */

		call ERROR_REPORTER (error_table_$badopt, ME, "^a.", argument);
		go to RETURN;

HAVE_CTLX:
		irep (ctlx).found = "1"b;

		if irep (ctlx).argument ^= A_NONE then do;
						/* trailing parameter dept */
		     argx = argx + 1;
		     save_argument = argument;
		     if argx > n_arguments then do;
NOARG:
			call ERROR_REPORTER (error_table_$noarg, ME,
			     "Control argument ^a requires a ^[^s^;numeric^;string^] parameter.", save_argument,
			     irep (ctlx).argument);
			go to RETURN;
		     end;

		     call cu_$arg_ptr_rel (argx, argument_ptr, argument_length, (0), arg_list_ptr);

		     if irep (ctlx).argument = A_NUMBER then do;
			irep (ctlx).value = cv_dec_check_ (argument, code);
			if code ^= 0 then do;

			     if character (argument, 1) = "-" then
				go to NOARG;

			     if code <= length (argument) then
				call ERROR_REPORTER (error_table_$bad_conversion, ME,
				     "Converting ^a to an integer.", argument);
			     else call ERROR_REPORTER (code, ME, "Converting ^a to an integer.", argument);
			     go to RETURN;
			end;
		     end;
		     else do;
			irep (ctlx).ptr = argument_ptr;
			irep (ctlx).length = argument_length;
		     end;
		end;
	     end main_argument_loop;

/* Last Parse Step. Make sure all the requirements were met */


	     do ctlx = 1 to window_call_data_$n_ctl_args;
		if irep (ctlx).required & ^irep (ctlx).found then do;
USAGE:
		     call ERROR_REPORTER (error_table_$noarg, ME, "Usage: window_call ^a ^a.", key,
			substr (window_call_data_string, this_f.usage.index, this_f.usage.length));
		     go to RETURN;
		end;
	     end;

/* Here Endeth the Parse. */


/* Here come the semantics. One action routine for each function. */

	     go to DO_IT (keyx);			/* we trust keyx */

/* The order of these must match the order they are generated
   in window_call_data_. A perfect job for pl1_macro, but thats
   too much hair for now. Anyway, we would have to carry constants
   invented in one program into another. */

DO_IT (1):					/* clear window */
	     call get_iocb;				/* use -io_switch or user_i/o */
	     call window_$clear_window (iocb_ptr, code);
	     go to CHECK_RETURN;

DO_IT (2):					/* Bell */
	     call get_iocb;
	     call window_$bell (iocb_ptr, code);
	     go to CHECK_RETURN;

DO_IT (3):					/* Clear Region */
	     call get_iocb;

	     if ^irep (C_COLUMN).found then
		irep (C_COLUMN).value = 1;
	     if ^irep (C_N_COLUMNS).found then do;
		call get_window_info;
		irep (C_N_COLUMNS).value = window_info.width - irep (C_COLUMN).value + 1;
	     end;
	     call window_$clear_region (iocb_ptr, irep (C_LINE).value, irep (C_COLUMN).value, irep (C_N_LINES).value,
		irep (C_N_COLUMNS).value, code);
	     go to CHECK_RETURN;

DO_IT (4):					/* Clear to end of line */
	     call get_iocb;
	     call window_$clear_to_end_of_line (iocb_ptr, code);
	     go to CHECK_RETURN;

DO_IT (5):
	     call get_iocb;
	     call window_$clear_to_end_of_window (iocb_ptr, code);
	     go to CHECK_RETURN;

DO_IT (6):
	     call get_iocb;
	     call window_$delete_chars (iocb_ptr, irep (C_COUNT).value, code);
	     go to CHECK_RETURN;

DO_IT (7):					/* Get Position */
	     begin;
declare  (l, c)		  fixed bin;

		call get_iocb;
		call window_$get_cursor_position (iocb_ptr, l, c, code);
		if code ^= 0 then
		     go to CHECK_RETURN;

		if this_is_an_af then
		     return_string = ltrim (character (l)) || " " || ltrim (character (c));
		else call ioa_ ("Line = ^d; Column = ^d.", l, c);
		go to RETURN;
	     end;


DO_IT (8):					/* Get echoed chars */
	     call get ("1"b);			/* Does not return */

DO_IT (9):					/* Get unechoed */
	     call get ("0"b);

DO_IT (10):					/* insert_text */
	     call get_iocb;
declare  text		  character (irep (C_STRING).length) based (irep (C_STRING).ptr);


	     call window_$insert_text (iocb_ptr, text, code);
	     go to CHECK_RETURN;

DO_IT (11):					/* Overwrite_text */
	     call get_iocb;
	     call window_$overwrite_text (iocb_ptr, text, code);
	     go to CHECK_RETURN;

DO_IT (12):					/* position cursor */
	     call get_iocb;
	     call window_$position_cursor (iocb_ptr, irep (C_LINE).value, irep (C_COLUMN).value, code);
	     go to CHECK_RETURN;


DO_IT (13):					/* position cursor rel */
	     call get_iocb;
	     call window_$position_cursor_rel (iocb_ptr, irep (C_LINE).value, irep (C_COLUMN).value, code);
	     go to CHECK_RETURN;


DO_IT (14):					/* Scroll Region */
	     call get_iocb;
	     if ^irep (C_LINE).found then
		irep (C_LINE).value = 1;

	     if ^irep (C_N_LINES).found then do;
		call get_window_info;
		irep (C_N_LINES).value = window_info.height - irep (C_LINE).value + 1;
	     end;

	     call window_$scroll_region (iocb_ptr, irep (C_LINE).value, irep (C_N_LINES).value, irep (C_COUNT).value,
		code);
	     go to CHECK_RETURN;

DO_IT (15):					/* SYNC */
	     call get_iocb;
	     call window_$sync (iocb_ptr, code);
	     go to CHECK_RETURN;

DO_IT (16):					/* Write Sync Read */
	     begin;
declare  buffer		  character (irep (C_COUNT).value);
declare  break		  character (1) varying;
declare  n_read		  fixed bin (21);
declare  prompt		  character (irep (C_STRING).length) based (irep (C_STRING).ptr);

		call get_iocb;
		call window_$write_sync_read (iocb_ptr, prompt, length (buffer), buffer, n_read, break, code);
		if code ^= 0 then
		     go to CHECK_RETURN;

		begin;
declare  read		  character (n_read) defined (buffer) position (1);
		     if this_is_an_af then
			return_string = requote_string_ (read) || " " || requote_string_ ((break));
		     else call ioa_ ("Read = ^a; Break = ^a.", requote_string_ (read), requote_string_ ((break)));
		end;				/* inner begin */
	     end;					/* outer begin */
	     go to RETURN;

/* INVOKE */

DO_IT (17):
	     if video_data_$terminal_iocb ^= null () then do;
		call ERROR_REPORTER (video_et_$wsys_invoked, ME);
		go to RETURN;
	     end;

	     begin options (non_quick);
declare  reason		  character (512);
declare  line_speed		  fixed bin;

		if irep (C_LINE_SPEED).found then do; /* we have line speed */
		     line_speed = irep (C_LINE_SPEED).value;
		     if line_speed < 0 then do;
			call ERROR_REPORTER (error_table_$bad_arg, ME, "^a", "Negative value not allowed for line speed.");
			go to RETURN;
		     end;
		end;

		call video_utils_$turn_on_login_channel (code, reason);
		if code ^= 0 then do;
		     call ERROR_REPORTER (code, ME, "^a", reason);
		     go to RETURN;
		end;

		if irep (C_LINE_SPEED).found then do; /* we have line speed */
		     call iox_$control (video_data_$terminal_iocb, "set_line_speed", addr (line_speed), code);
		     if code ^= 0 then
			go to CHECK_RETURN;
		end;

		go to RETURN;
	     end;

/*  REVOKE */

DO_IT (18):
	     call video_utils_$turn_off_login_channel ((0));
	     go to RETURN;

/* CREATE */

DO_IT (19):
	     begin options (non_quick);
declare  wiocbp		  pointer;
declare  1 wpi		  aligned like window_position_info;
declare  switch_name	  character (irep (C_SWITCH).length) based (irep (C_SWITCH).ptr);

		call iox_$find_iocb (switch_name, wiocbp, code);
		if code ^= 0 then
		     go to CHECK_RETURN;

		wpi.version = window_position_info_version_1;
		if irep (C_LINE).found then
		     wpi.origin.line = irep (C_LINE).value;
		else wpi.origin.line = 1;

		if irep (C_N_LINES).found then
		     wpi.extent.height = irep (C_N_LINES).value;
		else wpi.extent.height = 0;

		if irep (C_COLUMN).found then
		     wpi.origin.column = irep (C_COLUMN).value;
		else wpi.origin.column = 0;

		if irep (C_N_COLUMNS).found then
		     wpi.extent.width = irep (C_N_COLUMNS).value;
		else wpi.extent.width = 0;

		call window_$create (video_data_$terminal_iocb, addr (wpi), wiocbp, code);
		if code ^= 0 then
		     go to CHECK_RETURN;
		return;

	     end;

DO_IT (20):
	     call get_iocb;		/* Delete Window */

	     call window_$destroy (iocb_ptr, code);
	     if code ^= 0 then
		go to CHECK_RETURN;
	     return;				/* Change Window */

DO_IT (21):
	     call get_iocb;
	     call get_window_info;

/* Life is more complicated with partial width windows.  One can now change
   widths as well as heights ... up until this point, one had to specify 
   at least one of C_LINE/C_N_LINES, now one must specify one of those *or*
   one of C_COLUMN/C_N_COLUMNS. */

	     if ^(irep (C_LINE).found | irep (C_N_LINES).found |
		irep (C_COLUMN).found  | irep (C_N_COLUMNS).found)
		then go to USAGE;

	     if irep (C_LINE).found then
		window_info.origin.line = irep (C_LINE).value;

	     if irep (C_N_LINES).found then
		window_info.height = irep (C_N_LINES).value;
	     else do; /* use rest of screen */
		call get_capabilities (video_data_$terminal_iocb);
		if window_info.origin.line + window_info.height - 1 > ci.rows then
		     window_info.height = ci.rows - window_info.origin.line + 1;
	     end;

	     if irep (C_COLUMN).found then
		window_info.origin.column = irep (C_COLUMN).value;

	     if irep (C_N_COLUMNS).found then
		window_info.width = irep (C_N_COLUMNS).value;
	     else do; /* use rest of screen */
		call get_capabilities (video_data_$terminal_iocb);
		if window_info.origin.column + window_info.width - 1 > ci.columns then
		     window_info.width = ci.columns - window_info.origin.column + 1;
	     end;

	     call iox_$control (iocb_ptr, "set_window_info", addr (window_info), code);
	     go to CHECK_RETURN;

DO_IT (22):					/* get first line */
	     call get_iocb;
	     call get_window_info;
	     if this_is_an_af then
		return_string = ltrim (character (window_info.origin.line));
	     else call ioa_ ("First line = ^d.", window_info.origin.line);
	     go to RETURN;

DO_IT (23):					/* get n lines */
	     call get_iocb;
	     call get_window_info;

	     if this_is_an_af then
		return_string = ltrim (character (window_info.height));
	     else call ioa_ ("Height = ^d.", window_info.height);
	     go to RETURN;

DO_IT (24):					/* get n columns */
	     call get_iocb;
	     call get_window_info;

	     if this_is_an_af then
		return_string = ltrim (character (window_info.width));
	     else call ioa_ ("Width = ^d.", window_info.width);
	     go to RETURN;

%include terminal_capabilities;
declare  1 ci		  aligned like capabilities_info;

DO_IT (25):					/* get_terminal_height */
	     call get_capabilities (video_data_$terminal_iocb);
	     if this_is_an_af then
		return_string = ltrim (character (ci.screensize.rows));
	     else call ioa_ ("Terminal Height = ^d rows.", ci.screensize.rows);
	     go to RETURN;

DO_IT (26):					/* get terminal width */
	     call get_capabilities (video_data_$terminal_iocb);
	     if this_is_an_af then
		return_string = ltrim (character (ci.screensize.columns));
	     else call ioa_ ("Terminal Width = ^d columns.", ci.screensize.columns);
	     go to RETURN;

DO_IT (27):					/* Get one (but always block) */
	     call get_iocb;
	     begin;
declare  one		  character (1) varying;

		call window_$get_one_unechoed_char (iocb_ptr, one, "1"b, code);
		if code ^= 0 then
		     go to CHECK_RETURN;

		if this_is_an_af then
		     return_string = requote_string_ ((one));
		else call ioa_ ("Char = ""^a""", one);
		return;
	     end;

DO_IT(28):	     /* supported terminal */

%include terminal_info;

dcl 1 ti like terminal_info;

dcl supported_ttp bit(1);
dcl ttp_length fixed binary,
    ttp_ptr pointer;
dcl ttp char (ttp_length) based (ttp_ptr);

dcl ttt_info_$video_info entry (char(*), fixed bin, ptr, ptr, fixed bin(35));
dcl error_table_$no_table fixed bin(35) ext static;

dcl     uppercase		 char (26) static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl     lowercase		 char (26) static options (constant) init ("abcdefghijklmnopqrstuvwxyz");

	     if irep(C_TERMINAL_TYPE).found then
		     do;  /* user gave us a terminal type */
			ttp_length = irep(C_TERMINAL_TYPE).length;
			ttp_ptr = irep(C_TERMINAL_TYPE).ptr;
		     end;
		else
		     do; /* user didn't give us one, let's get the current type */
			ti.version = 1;
			call iox_$control(iox_$user_io, "terminal_info", addr(ti), code);
			if code ^= 0 then goto CHECK_RETURN;
			ttp_length = length(ti.term_type);
			ttp_ptr = addr(ti.term_type);
		     end;

	     ttp = translate(ttp, uppercase, lowercase); /* ttt_info_ is case sensitive */
	     call ttt_info_$video_info (ttp, (0), null(), null(), code);

	     if code ^= 0 & code ^= error_table_$no_table then goto CHECK_RETURN;
	     if code = error_table_$no_table then supported_ttp = "0"b;
			else supported_ttp = "1"b;

	     if this_is_an_af then 
		     if supported_ttp then return_string = "true"; else return_string = "false";
		else
		     call ioa_ ("The ^a terminal type is ^[not ^]supported by the video system.", ttp, ^supported_ttp);
	     goto RETURN;

DO_IT(29):	/* video invoked? */

dcl video_invoked bit(1);

	     video_invoked = video_data_$terminal_iocb ^= null();

	     if this_is_an_af then 
		     if video_invoked then return_string = "true"; else return_string = "false";
		else
		     call ioa_ ("The video system has ^[not ^]been invoked.", ^video_invoked);
	     goto RETURN;

get_capabilities:
     procedure (iocb_ptr);

declare  iocb_ptr	            ptr;

	ci.version = capabilities_info_version_1;
	call iox_$control (iocb_ptr, "get_capabilities", addr (ci), code);
	if code ^= 0 then
	     go to CHECK_RETURN;
     end get_capabilities;

get:
     procedure (echo_flag);
declare  break		  character (1) varying;
declare  buffer		  character (irep (C_COUNT).value);
declare  echo_flag		  bit (1) aligned;
declare  n_read		  fixed bin (21);

	call get_iocb;

	if echo_flag then
	     call window_$get_echoed_chars (iocb_ptr, length (buffer), buffer, n_read, break, code);
	else call window_$get_unechoed_chars (iocb_ptr, length (buffer), buffer, n_read, break, code);
	if code ^= 0 then
	     go to CHECK_RETURN;

	begin;
declare  read		  character (n_read) defined (buffer) pos (1);

	     if this_is_an_af then
		return_string = requote_string_ (read) || " " || requote_string_ ((break));
	     else call ioa_ ("Read = ^a, Break = ^a.", requote_string_ (read), requote_string_ ((break)));
	end;
	go to RETURN;
     end get;

get_iocb:
     procedure;

	if ^irep (C_SWITCH).found then
	     iocb_ptr = iox_$user_io;
	else begin;
declare  switch_name	  character (irep (C_SWITCH).length) based (irep (C_SWITCH).ptr);

	     call iox_$look_iocb (switch_name, iocb_ptr, code);
	     if code ^= 0 then
		go to CHECK_RETURN;
	end;
     end get_iocb;


declare  1 window_info	  aligned like window_position_info;

get_window_info:
     procedure;

	window_info.version = window_position_info_version_1;
	call iox_$control (iocb_ptr, "get_window_info", addr (window_info), code);
	if code ^= 0 then
	     go to CHECK_RETURN;
     end get_window_info;

CHECK_RETURN:
	     if code ^= 0 then
		call ERROR_REPORTER (code, ME, "(^a)", key);
	     go to RETURN;

ERROR_REPORTER:
     procedure options (variable, support);

declare  code		  fixed bin (35) based (code_ptr);
declare  code_ptr		  pointer;
declare  error_table_$undefined_order_request
			  fixed bin (35) ext static;
declare  cu_$arg_ptr	  entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
declare  cu_$generate_call	  entry (entry, ptr);

	call cu_$arg_ptr (1, code_ptr, (0), (0));	/* assume we are called with at least one */
	if code = error_table_$undefined_order_request then
	     cu_$arg_list_ptr () -> arg_list.arg_ptrs (1) = addr (video_et_$wsys_not_invoked);
	call cu_$generate_call (error_reporter, cu_$arg_list_ptr ());

%include arg_list;

     end ERROR_REPORTER;

	end;					/* The begin block */
RETURN:
	return;

%page;
%include window_call_info_;

     end window_call;
