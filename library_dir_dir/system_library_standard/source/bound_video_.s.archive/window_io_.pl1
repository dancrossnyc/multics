/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/*
   Window Manager - implements a virtual terminal   see MTB 462 ** MCR 4748

   Benson I. Margulies, from crt_ of James R Davis, June, 1981

   James R Davis, from 20 July 80 to February 11 81
   with guidance (spiritual and material) from:
   Steven H. Webber
   Larry E. Johnson
   Bernard S. Greenberg
   and help from Krupp Suzanne
*/



/****^  HISTORY COMMENTS:
  1) change(81-12-01,CJones), approve(), audit(), install():
     Modified to make more_mode=fold the default on non-scrollable terminals.
     Modified 16 December 1981 by Chris Jones to use currently defined editing
        chars rather than # and @.
     Modified 26 January 1982 by William York to implement user-settable
        more handlers.
     Modified 3 June 1982 by WMY to change the default more_mode for
        non-scrolling terminals from fold back to wrap.
     Modified 18 October 1982 by WMY to initialize the new attach_data
        variables conversion_tct_table, window_image, and token_characters.
     Modified 1 Octobter 1983 by Jon A. Rochlis to add support for partial
        screen width windows.
     Modified 8 January 1984 by JR to stop setting attach_data.capabilities at
        open time.  Since this isn't updated and is only used to prevent
        setting more_mode=SCROLL on windows which don't support scroll region
        (here and in wioctl_$modes). Also moved setting more_mode=WRAP for
        such terminals to attach time, since a get_capabilities must be done
        there anyway.
     Modified 26 January 1984 by JR to get the output_conversion and special
        tables from terminal_control (really ring0), instead of the TTF.
     Modified 1 February 1984 by JR to set IOCB.control to wioctl_$control
        instead of window_io_video_ (which is going away).
     Modified 22 March 1984 by Barmar to add an initialization for
        attach_data.auditor_iocb_ptr.
     Modified 28 March 1984 by JR to set window_iocb_ptr for tc_desk_info_.
     Modified 28 December 1984 by JR to zero code variables.
  2) change(87-03-17,LJAdams), approve(87-04-03,MCR7646),
     audit(87-05-05,Gilcrease), install(87-05-14,MR12.1-1030):
     Changed ttd_version to ttd_version_3.
  3) change(87-06-16,LJAdams), approve(87-06-16,MCR7584),
     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1055):
     Changed editing_chars_version_2 to editing_chars_version_3.
  4) change(88-09-19,Brunelle), approve(88-09-19,MCR7813),
     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
     Add version setting to call to get_special to get data in new
     special_chars format.
  5) change(88-10-20,Brunelle), approve(88-10-20,PBF7813),
     audit(88-10-20,Farley), install(88-10-20,MR12.2-1175):
     Correct problem of overwriting beyond end of structure, wiping out data
     allocated beyond end of structure.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
window_io_:
     procedure;
	return;

dcl      Com_err_sw		  bit (1) parameter;
dcl      Iocb_ptr		  ptr parameter;
dcl      Code		  fixed bin (35) parameter;
dcl      Attach_options	  (*) char (*) var parameter;
dcl      Open_mode		  fixed bin parameter;	/* opening mode */
dcl      Ignore		  bit (1) parameter;	/* obsolete opening arg */

declare  1 auto_desk_info	  aligned like tc_desk_window_info;
declare  1 IOCB		  aligned like iocb based (iocb_ptr);
declare  1 auto_capabilities	  aligned like capabilities_info;

declare  code		  fixed bin (35);
declare  ips_mask		  bit (36) aligned init ((36)"0"b);
declare  target_iocbp	  pointer;
declare  target_switch	  character (32);
declare  1 atd_switches	  unaligned,
         ( 2 debug,
	 2 modes,
	 2 target,
	 2 top,
	 2 height,
	 2 left,
	 2 width
	 )		  bit (1) unaligned,
	 2 pad		  bit (29) unaligned;

declare  modes		  character (512);
declare  first_line		  fixed bin;
declare  n_lines		  fixed bin;
declare  first_column	  fixed bin;
declare  n_columns		  fixed bin;
declare  iocb_ptr		  pointer;

/* Entries */


declare  window_$clear_window	  entry (pointer, fixed bin (35));
declare  (
         window_io_iox_$get_chars,
         window_io_iox_$get_line,
         window_io_iox_$put_chars,
         wioctl_$control,
         wioctl_$modes
         )		  entry;
declare  (
         window_io_iox_$init,
         window_io_iox_$shut
         )		  entry (pointer);

declare  ioa_$rsnnl	            entry() options(variable);

declare  cleanup		  condition;

declare  cv_dec_check_	  entry (character (*), fixed binary (35)) returns (fixed binary (35));
declare  ttt_info_$terminal_data
			  entry (character (*), fixed binary, fixed binary, pointer, fixed binary (35));

declare  ME		  character (32) init ("window_io_") internal static options (constant);
declare  (
         error_table_$bad_conversion,
         error_table_$badopt,
         error_table_$too_many_args,
         error_table_$bad_mode,
         error_table_$noarg,
         error_table_$undefined_order_request,
         video_et_$window_too_big,
         video_et_$not_terminal_switch
         )		  fixed bin (35) ext;

declare  (addr, bin, byte, character, copy, hbound, lbound, maxlength, null, rank, string, substr)
			  builtin;

declare  next_option_valid	  bit (1);
declare  option_length	  fixed bin (21);
declare  current_option	  fixed bin;

window_io_attach:
     entry (Iocb_ptr, Attach_options, Com_err_sw, Code);

	Code = 0;
	iocb_ptr = Iocb_ptr;

	if hbound (Attach_options, 1) < 1 then do;
	     Code = error_table_$noarg;
	     call attach_error (Code, "Usage: ^a terminal_switch {-control_args}", ME);
	end;


	string (atd_switches) = ""b;
	option_length = maxlength (Attach_options (1));

	do current_option = lbound (Attach_options, 1) to hbound (Attach_options, 1);
	     begin;
declare  option		  character (option_length) varying defined (Attach_options (current_option));
declare  next_option	  character (option_length) varying defined (Attach_options (current_option + 1));

		next_option_valid = current_option < hbound (Attach_options, 1);
		if character (option, 1) ^= "-" then do;/* terminal switch */
		     if atd_switches.target then
			call attach_error (error_table_$too_many_args,
			     "Only one terminal switch name may be given. ^a was the second.", option);
		     target = "1"b;
		     target_switch = option;
		end;
		else if option = "-first_line" then
		     call num_opt ("-first_line", atd_switches.top, first_line);
		else if option = "-height" | option = "-n_lines" | option = "-length" then
		     call num_opt (option, atd_switches.height, n_lines);
		else if option = "-first_column" then
		     call num_opt ("-first_column", atd_switches.left, first_column);
		else if option = "-n_columns" | option = "-width" then
		     call num_opt ("-n_columns", atd_switches.width, n_columns);
		else if option = "-modes" then do;
		     if atd_switches.modes then
			call attach_error (error_table_$too_many_args, "-modes may only be given once.");


		     if ^next_option_valid then
no_modes:
			call attach_error (error_table_$noarg, "No modes given with -modes.");
		     if character (next_option, 1) = "-" then
			go to no_modes;

		     modes = next_option;
		     current_option = current_option + 1;
		end;
		else call attach_error (error_table_$badopt, "Unrecognized control argument ^a.", option);


num_opt:
     procedure (o_name, o_flag, o_value);
declare  o_name		  character (*) varying;
declare  o_flag		  bit (1);
declare  o_value		  fixed bin;

	if o_flag then
	     call attach_error (error_table_$too_many_args, "Only one ^a may be specified.", o_name);
	o_flag = "1"b;
	if ^next_option_valid then
no_num:
	     call attach_error (error_table_$noarg, "A number must be supplied with ^a", o_name);
	if character (next_option, 1) = "-" then
	     go to no_num;

	o_value = cv_dec_check_ ((next_option), code);
	if code ^= 0 then
	     call attach_error (error_table_$bad_conversion, "Could not convert ^a to an integer.", next_option);
	current_option = current_option + 1;
     end num_opt;
	     end /* the begin */;
	end;

	if ^atd_switches.target then
	     call attach_error (error_table_$noarg, "A terminal switch must be specified.");

	call iox_$look_iocb (target_switch, target_iocbp, code);
	if code ^= 0 then
	     call attach_error (code, "Switch ^a does not exist.", target_switch);
	auto_capabilities.version = capabilities_info_version_1;
	call iox_$control (target_iocbp, "get_capabilities", addr (auto_capabilities), code);
	if code ^= 0 then
	     if code = error_table_$undefined_order_request then
		call attach_error (video_et_$not_terminal_switch, "^a.", target_switch);
	     else call attach_error (code, "^a.", target_switch);

	if ^atd_switches.top then
	     first_line = 1;

	if atd_switches.height then
	     if n_lines > auto_capabilities.rows - first_line + 1 then
		call attach_error (video_et_$window_too_big,
		     "^d lines starting on line ^d will not fit on a screen ^d lines long.", n_lines, first_line,
		     auto_capabilities.rows);
	     else ;
	else n_lines = auto_capabilities.rows - first_line + 1;

	if ^atd_switches.left then
	     first_column = 1;

	if atd_switches.width then
	     if n_columns > auto_capabilities.columns - first_column + 1 then
		call attach_error (video_et_$window_too_big,
		     "^d columns starting at column ^d will not fit on a screen ^d columns wide.", n_columns,
		     first_column, auto_capabilities.columns);
	     else ;
	else n_columns = auto_capabilities.columns - first_column + 1;

	attach_data_ptr = null ();
	on cleanup call cleanup_attach;
	allocate attach_data in (attach_data_area);
	attach_data.target_iocb_ptr = target_iocbp;
	attach_data.window_id = ""b;
	attach_data.async_count = 0;
	string (attach_data.flags) = ""b;
	
	call ioa_$rsnnl ("^a ^a -first_line ^i -n_lines ^i -first_column ^i -n_columns ^i", attach_data.attach_description, (0),
	     ME, target_switch, first_line, n_lines, first_column, n_columns);

	attach_data.lines_written_since_read = 0;
	attach_data.discard_output = "0"b;
	attach_data.cursor_position.row_at_rawo, attach_data.col_at_rawo, attach_data.cursor_position.line,
	     attach_data.cursor_position.col = 1;

	if ^auto_capabilities.scroll_region | n_columns ^= auto_capabilities.columns
						/* partial width window, no scroll region yet */
	then attach_data.more_mode = MORE_MODE_WRAP;
	else attach_data.more_mode = MORE_MODE_SCROLL;

	attach_data.more_prompt = "More? (^a for more; ^a to discard output.)";
	attach_data.more_responses.n_yeses, attach_data.more_responses.n_noes = 1;
	attach_data.more_responses.more_yeses = byte (bin ("015"b3));
	attach_data.more_responses.more_noes = byte (bin ("177"b3));
	attach_data.more_handler_in_use = "0"b;
	attach_data.flags.debug = atd_switches.debug;
	attach_data.flags.more_processing, attach_data.flags.can, attach_data.flags.esc, attach_data.flags.erkl = "1"b;
	attach_data.current.rows = n_lines;
	attach_data.current.columns = n_columns;
	attach_data.current.line_origin = first_line;
	attach_data.current.column_origin = first_column;
	attach_data.kill_ring_info.top_killer = null ();
	attach_data.kill_ring_info.army = null ();

/* Get this window its own screen-section image. */
	allocate window_image in (attach_data_area) set (attach_data.window_image_ptr);
	attach_data.auditor_iocb_ptr = null ();

/* Set the conversion and special tables. */

dcl      1 cts		  aligned like cv_trans_struc;
dcl      1 gsi		  aligned like get_special_info_struc;

dcl      temp_special_ptr	  ptr;

dcl      (got_conversions, got_specials)
			  bit (1);

dcl      1 ti		  aligned like terminal_info;
dcl      1 ttd		  aligned like terminal_type_data;

dcl      cv_trans_idx	  fixed bin;
dcl      conversion_type	  fixed bin;

	got_conversions, got_specials = "1"b;		/* assume we can get info from terminal control */
	cts.version = CV_TRANS_VERSION;
	call iox_$control (target_iocbp, "get_output_conversion", addr (cts), Code);
	if Code ^= 0 then
	     got_conversions = "0"b;

	gsi.area_ptr = get_system_free_area_ ();
	gsi.version = SPECIAL_INFO_STRUCT_VERSION_1;
	call iox_$control (target_iocbp, "get_special", addr (gsi), Code);
	if Code ^= 0 then
	     got_specials = "0"b;

	if ^got_conversions | ^got_specials then	/* couldn't get something from terminal control, try using the TTF defaults */
	     do;
	     ti.version = terminal_info_version;
	     call iox_$control (target_iocbp, "terminal_info", addr (ti), Code);
	     if Code ^= 0 then
		call attach_error (Code, "No terminal info available from terminal control.");

	     ttd.version = ttd_version_3;
	     call ttt_info_$terminal_data (ti.term_type, (0), (0), addr (ttd), Code);
	     if Code ^= 0 then
		call attach_error (Code, "No terminal type data for terminal type ^a.", ti.term_type);
	end;

	allocate cv_trans in (attach_data_area) set (attach_data.output_cv_ptr);
	if got_conversions then
	     attach_data.output_cv_ptr -> cv_trans = cts.cv_trans;
	else attach_data.output_cv_ptr -> cv_trans = ttd.output_cv_ptr -> cv_trans_struc.cv_trans;

/* Set up tct table for quick conversion scan. */
/* Fill in first 128 entries in string from regular table. */
	do cv_trans_idx = 0 to 127;
	     substr (conversion_tct_table, cv_trans_idx + 1, 1) =
		byte (attach_data.output_cv_ptr -> cv_trans.value (cv_trans_idx));
	end;

/* Now handle next 128, giving defaults if necessary. */
	do cv_trans_idx = 128 to 255;
	     conversion_type = attach_data.output_cv_ptr -> cv_trans.value (cv_trans_idx);
	     if conversion_type = OUTPUT_CONVERT_ORDINARY /* bull */
	     then substr (conversion_tct_table, cv_trans_idx + 1, 1) = byte (OUTPUT_CONVERT_OCTAL);
	     else substr (conversion_tct_table, cv_trans_idx + 1, 1) = byte (conversion_type);
	end;

/* Now take care of things beyond limits of conversion table. */
	substr (conversion_tct_table, 257, 256) = copy (byte (OUTPUT_CONVERT_OCTAL), 256);

	if got_specials then
	     temp_special_ptr = gsi.table_ptr;
	else temp_special_ptr = ttd.special_ptr;

	sc_escape_len = temp_special_ptr -> special_chars_struc.special_chars.escape_length;
	sc_input_escape_len = temp_special_ptr -> special_chars_struc.special_chars.input_escapes.len;

	allocate special_chars in (attach_data_area) set (attach_data.special_ptr);

	attach_data.special_ptr -> special_chars = addr (temp_special_ptr -> special_chars_struc.special_chars) -> special_chars;

	if got_specials then
	     free gsi.table_ptr -> special_chars_struc;

/* Set editing chars */

dcl      1 auto_editing_chars	  aligned like editing_chars;

	auto_editing_chars.version = editing_chars_version_3;
	call iox_$control (target_iocbp, "get_editing_chars", addr (auto_editing_chars), Code);
	if Code ^= 0 then
	     call attach_error (Code, "Unable to get the editing characters.");
	attach_data.erase_char = auto_editing_chars.erase;
	attach_data.kill_char = auto_editing_chars.kill;
	attach_data.input_escape_char = "\";		/* 'til tty_ learns how to get/set it */

/* ***** Break Table ***** */

	attach_data.breaks = (32)"1"b;

	call add_to_breaks_array (bin ("177"b3 /* DEL */));
	call add_to_breaks_array (rank (attach_data.erase_char));
	call add_to_breaks_array (rank (attach_data.kill_char));
	call add_to_breaks_array (rank (attach_data.input_escape_char));
	attach_data.line_editor_breaks = attach_data.breaks;

	attach_data.token_character_count = 65;
	attach_data.token_characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-$";

	attach_data.top_killer = alloc_killer ();
	killer.next, killer.prev = attach_data.top_killer;


	call set_ips_mask;
	IOCB.attach_data_ptr = addr (attach_data);
	IOCB.attach_descrip_ptr = addr (attach_data.attach_description);
	IOCB.open = window_io_open;
	IOCB.detach_iocb = window_io_detach;
	call iox_$propagate (iocb_ptr);
	call reset_ips_mask;
	return;

add_to_breaks_array:
     proc (bit_offset);

dcl      bit_offset		  fixed bin;

	if (bit_offset >= lbound (breaks_array, 1)) & (bit_offset <= hbound (breaks_array, 1)) then
	     breaks_array (bit_offset) = "1"b;

     end add_to_breaks_array;

window_io_open:
     entry (Iocb_ptr, Open_mode, Ignore, Code);

	Code = 0;
	iocb_ptr = Iocb_ptr -> iocb.actual_iocb_ptr;
	if Open_mode ^= Stream_input_output then do;
	     Code = error_table_$bad_mode;
	     return;
	end;

	attach_data_ptr = IOCB.attach_data_ptr;
	target_iocbp = attach_data.target_iocb_ptr;
	auto_desk_info.first_row = attach_data.line_origin;
	auto_desk_info.n_rows = attach_data.current.rows;
	auto_desk_info.first_column = attach_data.column_origin;
	auto_desk_info.n_columns = attach_data.current.columns;
	auto_desk_info.window_iocb_ptr = iocb_ptr;
	call iox_$control (target_iocbp, "check_in_window", addr (auto_desk_info), Code);
	if Code ^= 0 then
	     return;
	attach_data.window_id = auto_desk_info.window_id;

/* Clear window image on opening. */
	window_image_string = "";

	attach_data.open_description = "stream_input_output Video";
	call window_io_iox_$init (iocb_ptr);

	call set_ips_mask;

	IOCB.open = iox_$err_not_closed;
	IOCB.detach_iocb = iox_$err_not_closed;
	IOCB.get_chars = window_io_iox_$get_chars;
	IOCB.get_line = window_io_iox_$get_line;
	IOCB.put_chars = window_io_iox_$put_chars;
	IOCB.modes = wioctl_$modes;
	IOCB.control = wioctl_$control;
	IOCB.close = window_io_close;
	IOCB.open_descrip_ptr = addr (attach_data.open_description);
	call iox_$propagate (iocb_ptr);
	call reset_ips_mask;

	call window_$clear_window (iocb_ptr, (0));
	Code = 0;
	return;


window_io_close:
     entry (Iocb_ptr, Code);

	Code = 0;
	iocb_ptr = Iocb_ptr -> iocb.actual_iocb_ptr;
	attach_data_ptr = IOCB.attach_data_ptr;

	call window_io_iox_$shut (iocb_ptr);

	call set_ips_mask;
	IOCB.open_data_ptr = null ();
	IOCB.open_descrip_ptr = null;
	IOCB.detach_iocb = window_io_detach;
	IOCB.close = iox_$err_not_open;
	IOCB.open = window_io_open;
	IOCB.modes, IOCB.control, IOCB.get_line, IOCB.get_chars, IOCB.put_chars = iox_$err_not_open;
	call iox_$propagate (iocb_ptr);
	call reset_ips_mask;

	return;

window_io_detach:
     entry (Iocb_ptr, Code);

	Code = 0;
	iocb_ptr = Iocb_ptr;
	attach_data_ptr = IOCB.attach_data_ptr;

	if attach_data.output_cv_ptr ^= null () then
	     free attach_data.output_cv_ptr -> cv_trans in (attach_data_area);
	if attach_data.special_ptr ^= null () then
	     free attach_data.special_ptr -> special_chars in (attach_data_area);
	if attach_data.window_image_ptr ^= null () then
	     free window_image in (attach_data_area);

/* Disband the army (kill the killers?) */
	begin;
dcl      k		  ptr;
dcl      n		  ptr;
	     do k = attach_data.army repeat n while (k ^= null ());
						/* execute killers */
		n = k -> killer.next;
		free k -> killer in (attach_data_area);
	     end;
	     do k = attach_data.top_killer repeat n while (k ^= null ());
		n = k -> killer.next;
		free k -> killer in (attach_data_area);
		if n = attach_data.top_killer then
		     n = null ();			/* end of ring, force end of loop */
	     end;
	end;					/* killer freeing begin block */

	auto_desk_info.window_id = attach_data.window_id;
	target_iocbp = attach_data.target_iocb_ptr;
	call iox_$control (target_iocbp, "check_out_window", addr (auto_desk_info), (0));

	call set_ips_mask;
	IOCB.attach_data_ptr = null ();
	IOCB.attach_descrip_ptr = null ();
	call iox_$propagate (iocb_ptr);
	call reset_ips_mask;

	free attach_data;

	return;


/*  Error calls com_err_ if the loud switch is set and goes to the attach return */

attach_error:
     procedure options (non_quick, variable);


declare  error_msg		  character (256);
declare  error_msg_len	  fixed bin;
declare  code		  fixed bin (35) based (code_ptr);
declare  code_ptr		  pointer;

declare  cu_$arg_ptr	  entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

declare  cu_$arg_list_ptr	  entry returns (ptr);
declare  ioa_$general_rs	  entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
declare  com_err_		  entry () options (variable);
declare  sub_err_		  entry () options (variable);

	call ioa_$general_rs (cu_$arg_list_ptr (), 2 /* ctl string */, 3 /* first sub arg */, error_msg, error_msg_len,
	     "0"b /* no pad */, "0"b /* no nl */);

	call cu_$arg_ptr (1, code_ptr, (0), (0));	/* get code */

	if Com_err_sw then
	     call com_err_ (code, ME, "^a", substr (error_msg, 1, error_msg_len));
	else call sub_err_ (code, ME, "h", null (), (0), "^a", substr (error_msg, 1, error_msg_len));
	Code = code;
	go to return_;
     end attach_error;

return_:
	return;


set_ips_mask:
     procedure;
declare  (
         hcs_$set_ips_mask,
         hcs_$reset_ips_mask
         )		  entry (bit (36) aligned, bit (36) aligned);

	if ips_mask = ""b then
	     call hcs_$set_ips_mask (""b, ips_mask);
	return;

reset_ips_mask:
     entry;
	if ips_mask ^= ""b then
	     call hcs_$reset_ips_mask (ips_mask, ips_mask);
     end set_ips_mask;
cleanup_attach:
     procedure;
	if attach_data_ptr ^= null () then do;
	     auto_desk_info.window_id = attach_data.window_id;
	     if attach_data.window_id ^= ""b then
		if target_iocbp ^= null () then
		     call iox_$control (target_iocbp, "check_out_window", addr (auto_desk_info), (0));
	     free attach_data;
	end;
     end cleanup_attach;
alloc_killer:
     procedure returns (pointer);
dcl      new		  pointer;
	killer_alloc_size = killer_initial_alloc_size;
	allocate killer in (attach_data_area) set (new);
	new -> killer.next, new -> killer.prev = null ();
	new -> killer.words = "";
	return (new);
     end alloc_killer;

%page;
%include window_io_attach_data_;
%page;
%include iox_entries;
%include iox_modes;
%page;
%include tty_editing_chars;
%include terminal_type_data;
%include terminal_info;
%include iocb;
%page;
%include tty_convert;
%page;
%include tc_desk_info_;

     end window_io_;
