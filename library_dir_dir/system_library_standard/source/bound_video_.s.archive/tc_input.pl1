/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-07-08,Coren), approve(86-07-08,MCR7300),
     audit(86-07-08,Beattie), install(86-07-08,MR12.0-1089):
     Changed to use v1_echo_neg_data for compatibility.
  2) change(86-07-15,LJAdams), approve(86-11-11,MCR7485),
     audit(86-12-16,Margolin), install(87-01-06,MR12.0-1255):
     Modified to support MOWSE.
  3) change(86-11-26,LJAdams), approve(86-11-26,MCR7584),
     audit(86-12-16,Margolin), install(87-01-06,MR12.0-1255):
     Initial DSA coding has been maintained in a non-executable form.
  4) change(87-02-10,LJAdams), approve(87-03-19,MCR7642),
     audit(87-04-24,Gilcrease), install(87-05-14,MR12.1-1030):
     Passing a (-1) parameter to ws_tty_$read_echoed on the initial read.
  5) change(87-02-12,RBarstad), approve(87-03-19,MCR7642),
     audit(87-04-24,Gilcrease), install(87-05-14,MR12.1-1030):
     Don't try to reset the break table if operation is OP_READ_ONE.
     The break table is not needed on read one char and it was never
     init'ed in the request_read structure by window_ anyway.
  6) change(87-02-17,RBarstad), approve(87-03-19,MCR7642),
     audit(87-04-24,Gilcrease), install(87-05-14,MR12.1-1030):
     Added block bit to read_with_mark call.
  7) change(87-06-02,RBarstad), approve(87-02-17,MCR7485),
     audit(87-06-30,Gilcrease), install(87-08-04,MR12.1-1055):
     In ...$read_and_buffer changed the (-1) back to "dummy" and added the
     "screen_left" variable for readability.
  8) change(87-06-15,LJAdams), approve(87-06-15,MCR7584),
     audit(87-06-30,Gilcrease), install(87-08-04,MR12.1-1055):
     When calling dsa_tty_$read_echoed set return code to 0 to prevent
     blockage of interactive messages.
  9) change(88-09-27,LJAdams), approve(88-09-27,MCR8001),
     audit(88-10-06,Farley), install(88-10-07,MR12.2-1148):
     There was a problem with the bounds of the data and/or control buffers
     being pointed to by the input buffer being exceeded; to correct this a
     check has been implemented in add_1_to_buffer, and common to ensure
     that the current buffer length as kept track of in the input_buffer
     structure plus the characters to be added will not exceed bounds of
     the existing data/control buffer arrays. If the check fails the
     push_buffer routine is called to push the data down by eliminating
     those characters marked for deletion.  If this fails the size of
     the data_buffer and the control_buffer is increased by calling the
     grow_buffer routine.
                                                   END HISTORY COMMENTS */

/* Terminal Control
   Input Processing -- low level
   Initial implementation -- May 1981

   This program accesses hcs_$tty_* directly. This programmed is destined
   to stay in Terminal Control when it is divested from the video system.

   Design and Initial Coding by Benson I. Margulies,
   inspiration by JRD, BSG, the cow's stomach,
   and lots of help from MND.

*/
/* Modified April 82 by William York to call the new tty_read_echoed
   entrypoint, the replacement for echo_negotiate_get_chars. */
/* Modified 23 June 82 by WMY to fix a bug in try_to_satisfy which
   caused spurious double echoing of asynchronous output that interrupted
   get_echoed_chars calls. */
/* Modified 19 August 1982 by WMY to go blocked waiting for FNP interrupt
   when we get the echnego_awaiting_stop_sync code back from
   tty_read_echoed while closing out echo negotiation.  This FINALLY
   fixes the "looping while reading input" bug. */
/* Modified 24 August 1982 to fix a bug in the above fix.  The close_out_echnego
   routine now calls ipc_$block directly instead of tc_block, since it
   doesn't want to deal with request structures from the caller. */
/* Modified 10 September 1982 by WMY to fix a bug in the fix to the above
   fix.  It now calls tc_block$internal to make sure that protocol wakeups
   happen. */
/* Modified 20 September 1982 by WMY.  Oh well, one more time.  Changed the
   check_echnego entry to take a request_ptr as a parameter, and call regular
   tc_block with that request_ptr.  We ALWAYS have to block on the behalf of
   some particular window for async stuff to work right. */
/* Modified 22 September 1982 by WMY to remove the code that attempts to
   sync to the output already written if the input buffer length is 0.  This
   code went blocked until the user typed something, waiting for ring 0 to
   return the mark.  This was useless, and until ring 0 can be changed to
   return the mark without actually waiting for new input, tc_input will just
   return if the input buffer size is 0. */
/* Modified 14 August 1984 by Jon A. Rochlis to remove the Code parameter from
   the init entry, since it is never used. It appears never to be used by the
   tc_input entry either, and I am real tempted to remove it altogether. */
/* Modified 7 February 1985 by JR to use RESTORE_MASK instead of
   UNMASK_ALL when calling tc_block.  This will restore the user's mask
   instead of arbitrarly unmasking everything. */
/* Modified June 1985 by Roger Negaret to support DSA networks. */

/* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
tc_input:
     procedure (TC_data_ptr, Request_ptr, Code);
	go to do_input;				/* skip over all these dcls */


/* Parameters */

	declare (
	        Request_ptr		   pointer,
	        TC_data_ptr		   pointer,
	        Code		   fixed bin (35)
	        )			   parameter;


%page;
%include net_event_message;
%include tc_operations_;
%page;
%include tc_data_;
%page;
%include tc_input_buffer_;
%page;
%include mcs_echo_neg;
%page;

	declare code		   fixed bin (35);
	declare tty_state		   fixed bin;

	declare dsa_tty_$read_echoed	   entry (fixed bin (35), ptr, fixed bin (21), fixed bin (21), fixed bin (21),
				   fixed bin (21), fixed bin, fixed bin, fixed bin (35));

	declare ws_tty_$read_echoed	   entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (21),
				   fixed bin (21), fixed bin, fixed bin, fixed bin (35));

	declare add_char_offset_	   entry (ptr, fixed bin (21)) returns (ptr) reducible;
	declare tc_request$write_echo	   entry (pointer, char (*));
	declare tc_error		   entry (fixed binary (35), character (*));

	declare tc_screen$text	   entry (pointer, fixed bin, fixed bin, bit (1) aligned, character (*));

	declare tc_disconnect$check	   entry (pointer, fixed bin (35));

	declare (
	        video_et_$tc_tty_error,
	        video_et_$tc_mark_missing
	        )			   external static fixed bin (35);

	declare BUF_LEN		   fixed bin internal static options (constant) init (2048);
	declare UNMASK_NOTHING	   bit (36) aligned initial ("01"b) internal static options (constant);
	declare RESTORE_MASK	   bit (36) aligned initial ("001"b) internal static options (constant);

	declare (addr, byte, hbound, index, length, min, null, rank, rtrim, string, substr, unspec)
				   builtin;


init:
     entry (TC_data_ptr);

/* The structure tc_data must be already allocated .
   This program fills in the input side data */

	tc_data_ptr = TC_data_ptr;
	state.echnego_outstanding = "0"b;

	allocate input_buffer set (input_buffer_ptr);
	tc_data.input_buffer_ptr = input_buffer_ptr;
	input_buffer.buffer_length = BUF_LEN;
	allocate control_buffer set (input_buffer.control_ptr);
	allocate data_buffer set (input_buffer.data_ptr);
	input_buffer.n_valid = 0;
	input_buffer.n_shifts = 0;
	input_buffer.n_chars_valid = 0;
	return;


shut:
     entry (TC_data_ptr);

	tc_data_ptr = TC_data_ptr;
	input_buffer_ptr = tc_data.input_buffer_ptr;

	free data_buffer;
	free control_buffer;
	free input_buffer;
	tc_data.input_buffer_ptr = null ();
	return;


do_input:
	tc_data_ptr = TC_data_ptr;
	input_buffer_ptr = tc_data.input_buffer_ptr;
	Code = 0;
	request_ptr = Request_ptr;

	declare 1 i_op		   aligned automatic,
						/* the stack is the q */
		2 buffer_ptr	   pointer,
		2 buffer_length	   fixed bin (21),
		2 cur_buffer_ptr	   pointer,
		2 cur_buffer_length	   fixed bin (21),
		2 write_buffer_count   fixed bin (21),
		2 flags		   aligned,
		  3 echo		   bit (1) unaligned,
		  3 mark_was_outstanding
				   bit (1) unaligned,
		  3 write_sync_read	   bit (1) unaligned,
		  3 just_one_char	   bit (1) unaligned,
		  3 pad		   bit (32) unaligned,
		2 buffer_index	   fixed bin (21);	/* last place we scanned, relative to  buffers */

/* ASSERT echonegotiation cannot be pending. */
/* ASSERT the request is get_chars_no_echo, get_chars_echo, read_status, or
   write_sync_get_chars_no_echo */


	if request_header.operation = OP_READ_STATUS
	then do;
	     call read_status;
	     return;
	end;

/* ASSERT that a mark is cast after each output by tc_request */

/* There are two limitations on the current mark implementation.

   (1) There is only one mark.

   (2) We cannot get the mark back unless there is some other
   input from the terminal.

   As a result, the only available strategy for now is this:

   After each output, cast the mark. If it is already outstanding,
   then it is lost.

   For an asyncronous request for input, we wait for the last mark
   left out. This syncs us correctly.

   For a write-sync-read, the prompt has already been written and
   marked, and we were called masked. */


/* One final case - a zero-length input request of any flavor is interpreted
   as a request to sync input to output, using the last mark we put out */
/* Ring zero cannot currently return us the mark unless new input is typed
   by the user after the mark is written.  This causes us to go blocked
   waiting for some input if we want to read the mark.  Since that is pretty
   useless, we will give up this sync attempt until ring 0 can be changed to
   return the mark if it is there  without requiring that new input be typed.
   -WMY 9/22/82  */


/* Old code to sync to mark, currently out of service.

   if request_read.buffer_length = 0
   then do;
   if mark_outstanding ()
   then call retrieve_mark;
   go to request_satisfied;
   end;

*/

	if request_read.buffer_length = 0
	then goto request_satisfied;

	unspec (i_op) = ""b;			/* turn all the flags off */
	i_op.mark_was_outstanding = mark_outstanding ();

	i_op.write_sync_read = (request_header.operation = OP_WRITE_SYNC_GET_CHARS_NO_ECHO);
	i_op.just_one_char = (request_header.operation = OP_READ_ONE);

	i_op.buffer_index = 1;			/* assume this request is interested in whole buffer. If it requires a mark, this will get reset by retrieve_mark */

/* ASSERT mark_outstanding, trust tc_request to have wrote mark after cursorpos */

	if i_op.write_sync_read
	then call retrieve_mark;


	i_op.buffer_ptr, i_op.cur_buffer_ptr = request_read.buffer_ptr;
	i_op.buffer_length, i_op.cur_buffer_length = request_read.buffer_length;

	if request_header.operation = OP_GET_CHARS_ECHO
	then i_op.echo = "1"b;

	if request_header.operation ^= OP_READ_ONE
	then if (request_read.breaks ^= tc_data.breaktest)
	     then call set_break_table;

	request_read.returned_length = 0;
	if i_op.just_one_char
	then do;
	     if ^request_read.returned_break_flag	/* This is really a block_flag */
	     then do;
		call read_to_mark_no_block (RESTORE_MASK);
		request_read.returned_break_flag = try_to_satisfy ();
		go to request_satisfied;
	     end;
	end;

/* The count of 1 in the READ_ONE call will cause the following to do the right thing */


	do while (^try_to_satisfy ());
	     call read_and_buffer;
	end;


request_satisfied:					/* move the buffer down if we can */
	if tc_data.state.pending.count = 0		/** **/
	     & input_buffer.n_valid ^< 1
	then begin;
		declare (i, first_valid_x)	   fixed bin (21);

		do first_valid_x = 1 to input_buffer.n_valid while (control_buffer (first_valid_x).deleted);
		end;				/* set i to first nondeleted */

		if first_valid_x ^> input_buffer.n_valid/** **/
		     & first_valid_x > 1
		then do;
		     do i = first_valid_x to input_buffer.n_valid;
			control_buffer (i - first_valid_x + 1) = control_buffer (i);
			data_buffer (i - first_valid_x + 1) = data_buffer (i);
		     end;
		     input_buffer.n_valid = input_buffer.n_valid - first_valid_x + 1;
		end;

		else if first_valid_x > input_buffer.n_valid
		then do;
		     if input_buffer.n_valid + 1 > input_buffer.buffer_length
		     then call grow_buffer;
		     else input_buffer.n_valid = 0;
		end;
	     end;

	return;

/* ASSERT the ips mask is masked down */

check_echnego:
     entry (TC_data_ptr, Request_ptr);

	tc_data_ptr = TC_data_ptr;
	request_ptr = Request_ptr;
	input_buffer_ptr = tc_data.input_buffer_ptr;

	if state.echnego_outstanding
	then call close_out_echnego;

	else if state.pending.count > 0
	then call read_to_mark_no_block (UNMASK_NOTHING);

	return;



mark_outstanding:
     procedure returns (bit (1) aligned);

	return (state.last_mark_back < state.current_mark);
     end mark_outstanding;

mark_in_buffer:
     procedure (mark) returns (bit (1) aligned);

/* Search the buffer for a mark, if it is there return 1
   and set buffer_index to point to just after it. */

	declare mark		   fixed bin (9) unsigned;
	declare s_pos		   fixed bin (21);	/* we start looking here */
	declare m_pos		   fixed bin (21);
	declare mark_ptr		   pointer;
	declare MARK		   character (1);

	unspec (MARK) = MARK_CONTROL;
	s_pos = 1;
	do while (s_pos < input_buffer.n_valid);

	     m_pos = index (substr (control_buffer_as_chars, s_pos, input_buffer.n_valid - s_pos + 1), MARK);
	     if m_pos = 0
	     then return ("0"b);			/* no marks at all */

	     m_pos = s_pos + m_pos - 1;		/* index of mark in real buffer */

	     mark_ptr = addr (data_buffer (m_pos));
	     if mark_ptr -> data_mark.mark_number = mark
	     then do;
		i_op.buffer_index = m_pos + 1;
		return ("1"b);
	     end;

	     s_pos = m_pos + 1;			/* look again after this mark */
	end;					/* the do loop */

	return ("0"b);
     end mark_in_buffer;


read_to_mark:
     procedure (mask_type);

/* do a tty read to mark to try to find the outstanding mark */

	declare mark_index		   fixed bin (21);
	declare n_chars_read	   fixed bin (21);
	declare mask_type		   bit (36) aligned;
	declare hcs_$tty_read_with_mark  entry (fixed bin, character (*), fixed bin (21), fixed bin (21), fixed bin,
				   fixed bin (35));
	declare ws_tty_$read_with_mark   entry (ptr, char (*), bit (1) aligned, fixed bin (21), fixed bin (21),
				   fixed bin, fixed bin (35));
	declare dsa_tty_$read_with_mark  entry (fixed bin (35), character (*), fixed bin (21), fixed bin (21),
				   fixed bin, fixed bin (35));
	declare never_block		   bit (1) aligned;

	never_block = "0"b;
	go to read_common;

read_to_mark_no_block:
     entry (mask_type);

	never_block = "1"b;

read_common:
read:						/* goto here after block returns */
	n_chars_read = 0;				/* WRITE AROUND A HARDCORE BUG, that INTERPRESTS THIS AS A BUFFER OFFSET */

	if tc_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$read_with_mark (tc_data.tty_handle, tc_data.tty_read_buffer, n_chars_read, mark_index,
		tty_state, code);
	else if tc_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     call ws_tty_$read_with_mark (tc_data.mowse_terminal_iocb_ptr, tc_data.tty_read_buffer, never_block,
		n_chars_read, mark_index, tty_state, code);
	else					/* MCS */
	     call hcs_$tty_read_with_mark (tc_data.devx, tc_data.tty_read_buffer, n_chars_read, mark_index, tty_state,
		code);

	if code ^= 0
	then call tc_disconnect$check (tc_data_ptr, code);
	if code ^= 0
	then call tty_read_error (code);		/* this is not supposed to happen */

	if mark_index > 0
	then do;					/* the prodigal returneth */
	     if mark_index > 1
	     then call add_chars_to_buffer (1, mark_index - 1);
						/* mark_index is index if first character after */


/* Until we have multiple marks, the only one we find can be the current one */

	     call add_mark_to_buffer (state.current_mark);
	     state.last_mark_back = state.current_mark;

	     call add_chars_to_buffer (mark_index, n_chars_read - mark_index + 1);
	end;

	else if n_chars_read > 0
	then call add_chars_to_buffer (1, n_chars_read);

	else					/* got no data, block */
	     if never_block
	then return;
	else do;
	     call block (mask_type);			/* unmask, block, mask */
	     go to read;
	end;
     end read_to_mark;

retrieve_mark:
     procedure;

/* When retrieving the mark, we desire block to use special
   ips masking techniques to avoid async tasks from being run.
   Since this is not lisp, we cannot lambda-bind some flag,
   and a controlled variable would be ugly. So we have to
   pass a parameter down through read_to_mark */


	do while (^mark_in_buffer (state.current_mark));

/* ASSERT that there is a mark outstanding if the current mark
   is not in the buffer */

	     if ^mark_outstanding ()
	     then call tc_error (video_et_$tc_mark_missing, "");

/* This code used to only unmask QUIT, to avoid async happenings
   while stopped at WriteSyncRead. This is not really useful
   because the current mark mechanism is not precise enough to be
   worth this limitation. */

	     call read_to_mark (RESTORE_MASK);
	end;
     end retrieve_mark;


try_to_satisfy:
     procedure returns (bit (1) aligned);

/* see if we can fill up and finish this input request.
   starting at buffer_index, we scan characters.
   we skip "dead" characters, and stop on break, or count.
   Any marks we find we remove, as there can be extraneous
   marks if we get to set marks on all output some time. */

/* for now we just examine characters in a loop, no fancy
   searching. We can go for the performance some other day */

	declare our_x		   fixed bin (21);	/* current index into input_buffer's */
	declare her_x		   fixed bin (21);	/* current index into user buffer */

	declare her_buffer		   (i_op.cur_buffer_length) character (1) unaligned based (i_op.cur_buffer_ptr);
						/* use array for char-loop approach */
	declare only_echoed		   bit (1) aligned;

	only_echoed = "0"b;
	go to common;

try_to_satisfy$$already_echoed_only:
     entry returns (bit (1) aligned);			/* RV is a dummy */

	only_echoed = "1"b;

common:
	call init_echo_buffer;
	her_x = 1;
	our_x = i_op.buffer_index;			/* start after our mark */

	if input_buffer.n_valid = 0
	then return ("0"b);				/* why call them back  from heaven? */
	do while (our_x <= input_buffer.n_valid);	/* this terminator happens only when we run out of stuff without satisfying */

	     if control_buffer (our_x).mark
	     then control_buffer (our_x).deleted = "1"b;

	     else if ^control_buffer (our_x).deleted
	     then begin;				/* consider this character */
		     declare (break_char, needs_echo) bit (1) aligned;
		     declare rank_of_char	        fixed bin;

		     rank_of_char = rank (data_buffer (our_x).character);
						/* All chars > \177 are breaks. */
		     if rank_of_char > 127
		     then break_char = "1"b;
		     else break_char = tc_break_array (rank_of_char);

		     needs_echo = ^control_buffer (our_x).echoed & i_op.echo;

/* Contract is not to return breaks and async_term. There is no good
   reason for this, but I hesitate to change this without study of
   window_io_video_. Both would certainly have to be changed. */

		     if only_echoed & (break_char | needs_echo)
		     then go to found_unechoed;

		     her_buffer (her_x) = data_buffer (our_x).character;
		     her_x = her_x + 1;
		     control_buffer (our_x).deleted = "1"b;

		     if break_char
		     then do;
			request_read.returned_break_flag = "1"b;
			go to success;		/* try to zonk buffer */
		     end;

		     if needs_echo
		     then call echo_char (data_buffer (our_x).character);

		     if her_x = hbound (her_buffer, 1) + 1
						/* DONE */
		     then do;
			request_read.returned_break_flag = "0"b;
			go to success;
		     end;
		end;				/* if ^deleted */
	     our_x = our_x + 1;
	end;					/* do loop */

/* If we got here, we ran out of buffer */

	request_read.returned_length = request_read.returned_length + (her_x - 1);
	i_op.cur_buffer_ptr = add_char_offset_ (i_op.cur_buffer_ptr, (her_x - 1));
	i_op.cur_buffer_length = i_op.cur_buffer_length - (her_x - 1);
	i_op.buffer_index = our_x;			/* avoid examining same thing twice */
	input_buffer.n_chars_valid = input_buffer.n_chars_valid - (her_x - 1);
	call dump_echo_buffer;
	return ("0"b);

/* we are going to return "1"b */
/* Or we hit a character that we cound not returned because */
/* it had not been echoed. In both cases our_x is one past the last one */
/* that should be returned. */

found_unechoed:
success:
	request_read.returned_length = request_read.returned_length + her_x - 1;
	input_buffer.n_chars_valid = input_buffer.n_chars_valid - (her_x - 1);
	if ^only_echoed
	then call dump_echo_buffer;
	return ("1"b);
     end try_to_satisfy;


read_and_buffer:
     procedure;

/* Caller of tty_read and get_chars_echo_etc. bufferer of read characters. */
/* we must manage the echo_negotiation flag. */

	declare n_chars_read	   fixed bin (21);

/* We can ignore the mark here on the first read call. There is only one
   reason the mark could be
   out. It could be left from some output that no call attempted
   to sync to. This is not interesting, and is not worth giving up
   negotiation for. We can claim that it is "in" in case someone tries
   to sync. The mark could be put out asyncronously, but we will close
   out negotiation before. */

	if i_op.echo
	then do;					/* try to negotiate */
	     state.last_mark_back = state.current_mark;	/* fake it */

/* ASSERT: negotiation is not in progress. Thus n_chars_echoed must be zero
   on return. */

	     declare dummy		        fixed bin (21);
	     declare screen_left	        fixed bin;

	     screen_left = min ((tc_data.columns - request_read.col + 1), i_op.cur_buffer_length);

	     if tc_data.network_type = DSA_NETWORK_TYPE
	     then					/* DSA */
		call dsa_tty_$read_echoed (tc_data.tty_handle, addr (tc_data.tty_read_buffer), (0) /* offset */,
		     length (tc_data.tty_read_buffer), n_chars_read, dummy, screen_left, tty_state, code);

	     else if tc_data.network_type = MOWSE_NETWORK_TYPE
	     then call ws_tty_$read_echoed (tc_data.mowse_terminal_iocb_ptr, addr (tc_data.tty_read_buffer), (0),
		     length (tc_data.tty_read_buffer), n_chars_read, dummy, screen_left, tty_state, code);

	     else					/* MCS */
		call hcs_$tty_read_echoed (tc_data.devx, addr (tc_data.tty_read_buffer), (0) /* offset */,
		     length (tc_data.tty_read_buffer), n_chars_read, dummy, screen_left, tty_state, code);

	     if code ^= 0
	     then call tc_disconnect$check (tc_data_ptr, code);
	     if code ^= 0				/* we cannot get awaiting_stop_sync because echoing was OFF */
	     then call tty_read_error (code);

	     if n_chars_read = 0
	     then do;				/* we have entered negotiation */
		state.echnego_outstanding = "1"b;
		call block (RESTORE_MASK);

/* now put them in buffer and stop echoing */
		call close_out_echnego;

		return;
	     end;
	     else do;				/* it gave us characters */
		call add_chars_to_buffer (1, n_chars_read);
		return;
	     end;
	end;
	else call read_to_mark (RESTORE_MASK);

     end read_and_buffer;


add_mark_to_buffer:
     procedure (mark);

	declare mark		   fixed bin (9) unsigned;

	call add_1_to_buffer (MARK_CONTROL, byte (mark));
     end add_mark_to_buffer;

/* procedure for adding unechoed characters to the buffer  */
add_chars_to_buffer:
     procedure (start, how_many);

	declare (start, how_many)	   fixed bin (21);
	declare 1 ce		   unaligned like control_entry;

	string (ce) = NORMAL_CONTROL;
	go to chars_common;

add_echoed_chars_to_buffer:
     entry (start, how_many);

	string (ce) = ECHOED_CONTROL;

chars_common:
	input_buffer.n_chars_valid = input_buffer.n_chars_valid + how_many;
	go to common;

add_1_to_buffer:
     entry (a_ce, the_char);
	declare a_ce		   bit (9);
	declare istart		   fixed bin (21);
	declare the_char		   character (1) aligned;

	if input_buffer.n_valid + 1 > input_buffer.buffer_length
	then input_buffer.n_valid = push_buffer (input_buffer.n_valid);

	input_buffer.n_valid = input_buffer.n_valid + 1;
	string (control_buffer (input_buffer.n_valid)) = a_ce;
	substr (data_buffer_as_chars, input_buffer.n_valid, 1) = the_char;
	return;

common:
	if input_buffer.n_valid + how_many >= input_buffer.buffer_length
	then input_buffer.n_valid = push_buffer (input_buffer.n_valid);

	istart = input_buffer.n_valid + 1;

	input_buffer.n_valid = input_buffer.n_valid + how_many;

	begin;
	     declare cx		        fixed bin;
	     do cx = istart to istart + how_many;
		control_buffer (cx) = ce;
	     end;
	end;
	substr (data_buffer_as_chars, istart, how_many) = substr (tc_data.tty_read_buffer, start, how_many);
     end add_chars_to_buffer;


push_buffer:
     procedure (nvalid) returns (fixed bin (21));
	declare nvalid		   fixed bin (21);
	declare i			   fixed bin (21);
	declare first_valid_x	   fixed bin (21);

/* There was a problem with the bounds of the input buffer being        */
/* exceeded; to correct this a check has been implemented in            */
/* add_1_to_buffer, and common to ensure that the current buffer length */
/* plus the characters to be added will not exceed bounds of the        */
/* input_buffer. If the check fails this routine is called to push the  */
/* buffer down if we can.  If this fails the size of the data_buffer    */
/* the control_buffer is increased by calling grow_buffer.              */

	do first_valid_x = 1 to nvalid while (control_buffer (first_valid_x).deleted);
	end;					/* set i to first nondeleted */

	if first_valid_x ^> nvalid & first_valid_x > 1
	then do;
	     do i = first_valid_x to nvalid;
		control_buffer (i - first_valid_x + 1) = control_buffer (i);
		data_buffer (i - first_valid_x + 1) = data_buffer (i);
	     end;
	     nvalid = nvalid - first_valid_x + 1;
	end;

	else if first_valid_x > nvalid
	then call grow_buffer;

	return (nvalid);

     end push_buffer;


grow_buffer:
     procedure;

	new_buf_size = input_buffer.buffer_length + BUF_LEN;
	allocate new_control_buf set (new_control_buf_ptr);
	allocate new_data_buf set (new_data_buf_ptr);
	unspec (new_control_buf) = ""b;
	substr (new_control_buf_ptr -> temp_data, 1, input_buffer.buffer_length) =
	     substr (input_buffer.control_ptr -> temp_data, 1, input_buffer.buffer_length);
	unspec (new_data_buf) = ""b;
	substr (new_data_buf_ptr -> temp_data, 1, input_buffer.buffer_length) =
	     substr (input_buffer.data_ptr -> temp_data, 1, input_buffer.buffer_length);
	free control_buffer;
	free data_buffer;
	input_buffer.buffer_length = new_buf_size;
	input_buffer.control_ptr = new_control_buf_ptr;
	input_buffer.data_ptr = new_data_buf_ptr;

     end grow_buffer;


block:
     procedure (mask_type);
	declare mask_type		   bit (36) aligned;
	declare tc_block		   entry (pointer, pointer, bit (36) aligned);


	if tc_data.network_type ^= MOWSE_NETWORK_TYPE
	then call tc_block (tc_data_ptr, request_ptr, mask_type);

	if request_header.async_interruption
	then do;					/* pretend to have the mark, since state is uncertain */
	     call add_mark_to_buffer (state.current_mark);
	     state.last_mark_back = state.current_mark;
	     go to ASYNC_INTERRUPTION;
	end;

     end block;

close_out_echnego:
     procedure;

	declare (n_chars_read, n_chars_echoed)
				   fixed bin (21);

	declare error_table_$echnego_awaiting_stop_sync
				   fixed bin (35) external static;

	declare tc_block		   entry (pointer, pointer, bit (36) aligned);


/* ASSERT echo negotiation is already in progress */

	code = error_table_$echnego_awaiting_stop_sync;
	do while (code = error_table_$echnego_awaiting_stop_sync);

/* ASSERT: a zero col-left argument turns off negotiation according to
   the echo negotiation protocol */

	     if tc_data.network_type = DSA_NETWORK_TYPE
	     then do;				/* DSA */
		call dsa_tty_$read_echoed (tc_data.tty_handle, addr (tc_data.tty_read_buffer), (0),
		     length (tc_data.tty_read_buffer), n_chars_read, n_chars_echoed, (0), tty_state, code);
		code = 0;
	     end;

	     else if tc_data.network_type = MOWSE_NETWORK_TYPE
	     then call ws_tty_$read_echoed (tc_data.mowse_terminal_iocb_ptr, addr (tc_data.tty_read_buffer), (0),
		     length (tc_data.tty_read_buffer), n_chars_read, n_chars_echoed, (0), tty_state, code);


	     else					/* MCS */
		call hcs_$tty_read_echoed (tc_data.devx, addr (tc_data.tty_read_buffer), (0),
		     length (tc_data.tty_read_buffer), n_chars_read, n_chars_echoed, (0), tty_state, code);

/* if FNP echo negotiation is on, we must wait for the wakeup
   which signifies the FNP has stopped negotiating.  If we don't
   block here, we will pick up this wakeup unexpectedly later.
   After we are through blocking, go back and read again. */

	     if code = error_table_$echnego_awaiting_stop_sync & tc_data.network_type ^= MOWSE_NETWORK_TYPE
	     then call tc_block (tc_data_ptr, request_ptr, UNMASK_NOTHING);

	     if code = 0
	     then do;

		if n_chars_echoed > 0
		then do;				/* got stuff back, add it to buffer and update screen image */
		     call add_echoed_chars_to_buffer (1, n_chars_echoed);
		     call add_chars_to_buffer (1 + n_chars_echoed, n_chars_read - n_chars_echoed);
		     begin;
			declare echoed		   character (n_chars_echoed)
						   defined (tc_data.tty_read_buffer) position (1);
			call tc_screen$text (tc_data.screen_data_ptr, state.row, state.col, "0"b, echoed);
		     end;
		     state.col = state.col + n_chars_echoed;
		end;
		else if n_chars_read > 0
		then call add_chars_to_buffer (1, n_chars_read);
	     end;					/* if code = 0 */
	end;					/* do loop */

	state.echnego_outstanding = "0"b;
	return;

     end close_out_echnego;


echo_char:
     procedure (char_to_echo);

	declare char_to_echo	   character (1);

/* We borrow the tty_read_buffer as an echo buffer. This is because
   echo characters are only saved for the duration of a call to try_to_satisfy
*/

	substr (tc_data.tty_read_buffer, i_op.write_buffer_count, 1) = char_to_echo;
	i_op.write_buffer_count = i_op.write_buffer_count + 1;
	return;

init_echo_buffer:
     entry;

	i_op.write_buffer_count = 1;
	return;

dump_echo_buffer:
     entry;

	if i_op.write_buffer_count > 1
	then begin;
		declare to_echo		   character (i_op.write_buffer_count - 1)
					   defined (tc_data.tty_read_buffer) position (1);

		call tc_request$write_echo (tc_data_ptr, to_echo);
	     end;
     end echo_char;

tty_read_error:
     procedure (code);
	declare code		   fixed bin (35);

	declare msg		   character (100) aligned;
	declare convert_status_code_	   entry (fixed binary (35), character (8) aligned, character (100) aligned);

	call convert_status_code_ (code, (8)" ", msg);

	call tc_error (video_et_$tc_tty_error, rtrim (msg));

     end tty_read_error;


set_break_table:
     procedure;
	declare hcs_$tty_order	   entry (fixed bin, character (*), pointer, fixed bin, fixed bin (35));
	declare ws_tty_$order	   entry (ptr, char (*), ptr, fixed bin, fixed bin (35));
	declare dsa_tty_$order	   entry (fixed bin (35), character (*), pointer, fixed bin, fixed bin (35));

	tc_data.breaktest = request_read.breaks;

/* This is being commented out until the change for MCR7300 is put in place
   declare 1 echh		   like echo_neg_data;   */

	declare 1 echh		   like v1_echo_neg_data;

	unspec (echh) = ""b;
	echh.version = echo_neg_data_version_1;
	echh.break = tc_break_array;

	if tc_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$order (tc_data.tty_handle, "set_echo_break_table", addr (echh), tty_state, code);

	else if tc_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     call ws_tty_$order (tc_data.mowse_terminal_iocb_ptr, "set_echo_break_table", addr (echh), tty_state, code);

	else					/* MCS */
	     call hcs_$tty_order (tc_data.devx, "set_echo_break_table", addr (echh), tty_state, code);

	if code ^= 0
	then call tc_disconnect$check (tc_data_ptr, code);
	if code ^= 0
	then call tty_read_error (code);

     end set_break_table;

ASYNC_INTERRUPTION:
/****
      We cannot try to return any extra stuff in the buffer, because the cursor
      is in the wrong place for echoing. We could call tc_request asyncronously
      to reposition the cursor, but that would be a bigger pain. */
	begin;
	     declare dummy		        bit (1) aligned;

	     if i_op.echo
	     then dummy = try_to_satisfy$$already_echoed_only ();

	     request_read.returned_break_flag = "0"b;
	     go to request_satisfied;
	end ASYNC_INTERRUPTION;

read_status:
     procedure;
	declare bx		   fixed bin;

	call read_to_mark_no_block (RESTORE_MASK);

	request_read_status.returned_length = 0;
	do bx = 1 to input_buffer.n_valid;
	     if string (control_buffer (bx)) = NORMAL_CONTROL
	     then request_read_status.returned_length = request_read_status.returned_length + 1;
	end;

/* Anybody that blocks on  this ASYNC had damn better send a wakeup */

	request_read_status.event_channel = tc_data.event;
	return;
     end read_status;

     end tc_input;
