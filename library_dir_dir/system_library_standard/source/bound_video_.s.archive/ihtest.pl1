
/****^  HISTORY COMMENTS:
  1) change(2016-04-15,GDixon):
     Initial version of program to test input_history_ line edit requests.
                                                   END HISTORY COMMENTS */

          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  ihtest								        */
	/*									        */
	/* Function: The input_history_ I/O module captures each input_line (read from user_input via     */
	/* iox_$get_line) in a per-user USER.history segment.  These input lines may later be selected    */
	/* via input line editor requests which input_history_ adds to the window_io_ real-time line      */
	/* editor.								        */
	/*									        */
	/* To debug input_history_, its normal function of providing input lines to the process collides  */
	/* with the need to provide input specifying debugging operations to perform.  Therefore,	        */
	/* input_history_ is debugged mostly by adding debug ioa_ calls at strategic points in the code   */
	/* to trace its activities on user_output without requiring input from the user.	        */
	/*									        */
	/* However, when testing the requests which input_history_ adds to the window_io_ line editor,    */
	/* even this ioa_ tracing strategy fails because the trace output data interferes with	        */
	/* presentation by the line editor of the input data being edited.			        */
	/*									        */
	/* ihtest avoids this problem by simulating the window_io_ line editor calls to particular        */
	/* input_history_ edit requests, so the requests may be tested without input_history_ actually    */
	/* being attached to window_io_.  This simulated environment is created as follows.	        */
	/*									        */
	/* 1) ihtest tells input_history_ to fabricate its attach data structure (ihData), using a special*/
	/*    entrypoint in the I/O module: input_history_$validate_attach_options.	                  */
	/*    Pointer to the returned ihData structure is then stored in input_history_'s iocb_dict       */
	/*    cache (associated with the iox_$user_io IOCB).				        */
	/* 2) The window system in invoked, with window_io_ attached to the user_i/o switch.	        */
	/* 3) Each simulated invocation of an input_history_ line editor request (e.g., ^P or ^N)         */
	/*    invokes the editing request, which uses and updates the simulated attach_data.	        */
	/*									        */
	/* This scheme works because the window_io_ editor normally calls external edit requests by       */
	/* passing them a line_editor_info structure, which contains an iocb_ptr identifying the	        */
	/* window_io_ instance  making the call (usually the user_i/o switch attached to the window_io_). */
	/* In the simulated test environment, ihtest creates its own line_editor_info structure, with a   */
	/* pointer to the user_i/o IOCB.  Each input_history_ edit request uses this iocb_ptr to find     */
	/* the simulated attach data in the input_history_ cache.				        */
	/*									        */
	/*  - ihtest provides a -display operation to list the cached attach data structures.	        */
	/*     - Calls input_history_$test_iocb_dict_display to do the work.			        */
	/*  - ihtest provides a -clear operation to remove the cached attach data structure.	        */
	/*     - Calls input_history_$test_iocb_dict_clear to do the work.			        */
	/*									        */
	/* Operations:								        */
          /*    Several operations may be given in the same command, to simulate calls to same/different    */
	/*    edit routines during a single invocation of the window_io_ line editor.		        */
	/*									        */
	/*  -display	displays contents of the input_history_ iocb_dict cache.		        */
	/*  -clear	clears the user_i/o entry in the input_history_ iocb_dict cache.	        */
	/*                  This simulates a new invocation of the window_io_ line editor, by resetting   */
	/*		the input_history_ attach data.				        */
	/*  -next, +nnn	invokes input_history_$ih_next_line for testing.  When the positive number    */
	/*		form is used, nnn is the repetition count given in the line editor input      */
	/*		when invoking the edit request (e.g., 3 or +3 invokes ih_next_line with a     */
	/*                  repetition count of 3).					        */
	/*  -previous, -nnn	invokes input_history_$ih_previous_line for testing.  When the negative       */
	/*		number form is used, nnn is the repetition count given in the line editor     */
	/*		input when invoking the edit request (e.g., -5 invokes ih_previous_line with  */
	/*                  a repetition count of 5).					        */
	/*  -reverse_search, -reverse, -r						        */
	/*                  invokes input_history_$ih_reverse_search for testing.  The user is then       */
	/*		prompted for incremental search characters.			        */
	/*  -search, -srch, -s							        */
	/*		invokes input_history_$ih_forward_search for testing.  The user is then       */
	/*		prompted for incremental search characters.			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
%page;

ihtest:	
     proc options(variable);

  dcl  code fixed bin(35);

  dcl 1 lei aligned like line_editor_info;
  dcl  lei_buffer char(lei.line_length) based(addr(lei.input_buffer));

  dcl (FALSE init("0"b), TRUE init("1"b)) bit(1) aligned int static options(constant);
  dcl  NL char(1) int static options(constant) init("
");
  dcl  PROC char(6) int static options(constant) init("ihtest");

  dcl  com_err_ entry() options(variable);
  dcl  cu_$arg_count entry (fixed bin, fixed bin(35));
  dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
  dcl  input_history_$ih_forward_search entry (ptr, fixed bin(35));
  dcl  input_history_$ih_next_line entry (ptr, fixed bin(35));
  dcl  input_history_$ih_previous_line entry (ptr, fixed bin(35));
  dcl  input_history_$ih_reverse_search entry (ptr, fixed bin(35));
  dcl  input_history_$test_iocb_dict_clear entry (ptr);
  dcl  input_history_$test_iocb_dict_display entry();
  dcl  input_history_$test_iocb_dict_get entry (ptr) returns(ptr);
  dcl  input_history_$validate_attach_options entry (char(*), char(*), (*) char(*) var, fixed bin(35));
  dcl  ioa_ entry() options(variable);
  dcl (iox_$user_input, iox_$user_io) ptr ext static;

  dcl (error_table_$bad_opt, 
       error_table_$no_iocb,
       video_et_$wsys_not_invoked
		       ) fixed bin(35) ext static;

  dcl (addr, binary, null, substr, verify, unspec) builtin;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Determine our function via the option parameter (if present).			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  operation char(40) var;
  dcl  operationI fixed bin;
  dcl  operationsN fixed bin;
  dcl  optionP ptr, optionL fixed bin(21), option char(optionL) based(optionP);
  dcl  repetitionCount fixed bin;

     call cu_$arg_count (operationsN, code);

OPERATION_LOOP:
     do operationI = 0 to operationsN;
	repetitionCount = 1;

	if operationI = 0 then do;
	     if operationsN = 0 then go to PREVIOUS_LINE_REQ;
	     else go to NEXT_OPERATION;
	     end;
	
	call cu_$arg_ptr (operationI, optionP, optionL, code);
	if option = "-clear" | option = "-c" then go to CLEAR_REQ;
	if option = "-display" | option = "-disp" | option = "-d" then go to DISPLAY_REQ;
	if option = "-next" | option = "-n" then go to NEXT_LINE_REQ;
	if option = "-previous" | option = "-prev" | option = "-p" then go to PREVIOUS_LINE_REQ;
	if option = "-reverse_search" | option = "-reverse" | option = "-rev" | option = "-r" then go to REVERSE_SEARCH_REQ;
	if option = "-search" | option = "-srch" | option = "-s" then go to FORWARD_SEARCH_REQ;
	if verify(option, "+-0123456789") = 0 then do;
	     repetitionCount = binary(option,17);
	     if repetitionCount < 0 then do;
		repetitionCount = -repetitionCount;
		go to PREVIOUS_LINE_REQ;
		end;
	     else if repetitionCount > 0 then go to NEXT_LINE_REQ;
	     end;
	call com_err_ (error_table_$bad_opt, PROC, option);
	return;
%page;

PREVIOUS_LINE_REQ:
	operation = "ih_previous_line";
	call setup_request(operation, "" /* ^P */, repetitionCount, lei);
	call input_history_$ih_previous_line (addr(lei), code);
	go to END_REQUEST;

NEXT_LINE_REQ:
	operation = "ih_next_line";
	call setup_request(operation, "" /* ^N */, repetitionCount, lei);
	call input_history_$ih_next_line (addr(lei), code);
	go to END_REQUEST;

REVERSE_SEARCH_REQ:
	operation = "ih_reverse_search";
	call setup_request(operation, "" /* ^R */, repetitionCount, lei);
	call input_history_$ih_reverse_search (addr(lei), code);
	go to END_REQUEST;

FORWARD_SEARCH_REQ:
	operation = "ih_forward_search";
	call setup_request(operation, "" /* ^S */, repetitionCount, lei);
	call input_history_$ih_forward_search (addr(lei), code);
	go to END_REQUEST;

END_REQUEST:
	if code ^= 0 then do;
	     if code = error_table_$no_iocb then do;
		call com_err_ (code, PROC, "lei.iocb_ptr: ^p (^a) not found in iocb_dict.",
		     lei.iocb_ptr, lei.iocb_ptr->iocb.name);
		call input_history_$test_iocb_dict_display();
		end;
	     if code = video_et_$wsys_not_invoked then
		call com_err_ (code, PROC, "Must use 'wdc invoke' to test input_history_.");
	     return;				/* Stop loop if any error was reported.		        */
	     end;

	call ioa_ ("^a AFTER ^a [editor line: ^p (^d chars),   cursor index: ^d^[,   break: ^a^;^s^]]: ^a^12x'^a'", 
	     NL, operation, addr(lei.input_buffer), lei.line_length, lei.cursor_index, 
	     lei.break_given, interpret_break(lei.new_break_character), NL, lei_buffer);

DISPLAY_REQ:
	operation = "input_history_$test_iocb_dict_display";
	call input_history_$test_iocb_dict_display();
	go to NEXT_OPERATION;

CLEAR_REQ:
	operation = "input_history_$test_iocb_dict_clear";
	ihDataP = input_history_$test_iocb_dict_get (iox_$user_io);
	if ihDataP ^= null then do;
	     call input_history_$test_iocb_dict_clear (iox_$user_io);
	     free ihData in (ihArea);
	     end;
	
NEXT_OPERATION:
	call ioa_("");
	end OPERATION_LOOP;
     return;

%page;
setup_request:
     proc (op, keySeq, repetitionCount, lei);

  dcl  op char(40) var;				/* input_history_ operation being setup.	        */
  dcl  keySeq char(4) var;				/* Key sequence assigned to edit request to be tested.(in)*/
  dcl  repetitionCount fixed bin;			/* Line editor repetitions for request to be tested. (in) */
  dcl 1 lei aligned like line_editor_info;		/* Line editor info passed to each request. (out)	        */
  dcl  lei_buffer char(lei.line_length) based(addr(lei.input_buffer));

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* For static testing (when input_history_ is not attached), need to:			        */
	/*  - fabricate an ihData upon first call in the process.				        */
	/*  - store fabricated ihData in input_history_'s iocb_dict cache.			        */
	/* Subsequent calls will re-use this ihData from the cache, until we clear our fabricated entry.  */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  attach_options (1) char(20) var init("user_i/o");
  dcl  code fixed bin(35);

     ihDataP = input_history_$test_iocb_dict_get (iox_$user_io);
     if ihDataP = null then do;			/* If ihtest called 1st time in this process, then...     */
	call input_history_$validate_attach_options (PROC, "user_i/o", attach_options, code);
						/*  - Create, cache ihData structure.		        */
	if code ^= 0 then return;			/*     - If error, input_history_ reported it.	        */
	end;

     if lei.version ^= line_editor_info_version_3 then do;	/* Full initialization of lei structure?	        */
	lei.version = line_editor_info_version_3;
	lei.iocb_ptr = iox_$user_io -> iocb.actual_iocb_ptr;
	unspec(lei.flags) = FALSE;
	lei.flags.numarg_given = TRUE;
	lei.flags.break_given = FALSE;
	lei.user_data_ptr = null();
	lei.cursor_index = 7;			/* Starting edit buffer contents, which would come from   */
	lei.line_length = 11;			/*   window_io_ editor.  This simulates any input typed   */
	lei.input_buffer = "CURSOR_here";		/*   by user prior to using an input_history_ request.    */
	lei.redisplay = redisplayBuffer;
	lei.new_break_character = "";
	lei.pad2 = "";
	end;
     lei.repetition_count = repetitionCount;
     lei.key_sequence = keySeq;

     call ioa_ ("BEFORE ^a [editor line: ^p (^d chars),   cursor index: ^d]: ^a^12x'^a'", 
	op, addr(lei.input_buffer), lei.line_length, lei.cursor_index, NL, lei_buffer);

     end setup_request;    
%page;

interpret_break:					/* Return an interpreted description of 	        */
     proc (break) returns(char(16) var);		/*  lei.new_break_character element upon return of the    */
						/*  editing function.			        */
  dcl  break char(1);

  /* Collate Char Constants */
  dcl  AT  char(1) int static options(constant) init("@");
  dcl  BEL char(1) int static options(constant) init("");
  dcl  CTL char(1) int static options(constant) init("^");
  dcl  DEL char(1) int static options(constant) init("");
  dcl  HT  char(1) int static options(constant) init("	");
  dcl  NL  char(1) int static options(constant) init("
");
  dcl  NUL char(1) int static options(constant) init(" ");
  dcl  PND char(1) int static options(constant) init("#");
  dcl  SP  char(1) int static options(constant) init(" ");

     if break = NUL then return (CTL || AT);
     if break < SP  then return (CTL || substr(collate(),(rank(break)+1+rank(AT)),1));
     if break < DEL then return (substr(collate(),(rank(break)+1),1));
     if break = DEL then return ("DEL");
     if rank(break) < 256 then 
	return ("Meta-" || interpret_break(substr(collate(),(rank(break)+1-128),1)));
     if rank(break) >= 256 then return ("BAD-" || ltrim(char(rank(break))));

     end interpret_break;
%page;

redisplayBuffer:					/* Simulate actions of window_io_ redisplay_input_buffer  */
     proc (leiP);					/*  by calling window_ to display lei.input_buffer on the */
						/*  current line of the default window.		        */
						/* NB: This method lacks special code in window_io_ to    */
						/*  properly interpret control characters, escape         */
						/*  sequences, etc (including HT locations).	        */
  dcl  leiP ptr;
  dcl 1 lei aligned like line_editor_info based(leiP);
  dcl  lei_buffer char(lei.line_length) based(addr(lei.input_buffer));

  dcl (cursorI, lineI) fixed bin;
  dcl  ignoreCode fixed bin(35);

     call window_$get_cursor_position (lei.iocb_ptr, lineI, cursorI, code);
     call window_$position_cursor (lei.iocb_ptr, lineI, 1, ignoreCode);
     call window_$overwrite_text (lei.iocb_ptr, lei_buffer, ignoreCode);
     call window_$clear_to_end_of_line (lei.iocb_ptr, ignoreCode);
     call window_$position_cursor (lei.iocb_ptr, lineI, (lei.cursor_index), ignoreCode);
     call window_$sync (lei.iocb_ptr, ignoreCode);

     end redisplayBuffer;

%page;
%include input_history_data;

  dcl  ihArea area based(get_system_free_area_());	/* Area in which input_history_ attach data is allocated. */
						/* It is declared here, because it depends upon 	        */
						/* get_system_free_area_, which is declared in the        */
						/* window_io_attach_data_ include file.	 This follows the */
						/* mechanism used within window_io_ for its allocations.  */
  dcl  get_system_free_area_ entry() returns(ptr);

%page;
%include iocb;
%page;
%include window_dcls;
%page;
%include window_line_editor;
     end ihtest;
