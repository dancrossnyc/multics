/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


rje_args: proc;


/* This is the initial version of an active function to return some information about
   the submission of an RJE card input job.  It will eventually be fashoned after the
   user active function.  This version is modeled after the value command to set certain
   values which are then returned by giving the correct key to the active function.

   Only the active function entry is to be documented.  The setting entry is internal
   interfaces and will go away when the source data can be put into the PIT.
   */

/* Initial version taken from the value active function by J. C. Whitmore, Aug. 1977 */



dcl  en char (32) aligned int static,
     dn char (168) aligned int static,
     segptr ptr int static init (null),
     ap ptr, al fixed bin, bchr char (al) unal based (ap),
     answer char (168) varying,
     bvcs char (al) varying based (ap),
     ec fixed bin,
     i fixed bin,
     af_sw bit (1) init ("0"b),
     string char (168) aligned;

dcl (null, substr, addr, length, rtrim) builtin;

dcl  com_err_ entry options (variable),
     adjust_bit_count_ entry (char (*) aligned, char (*) aligned, bit (1), fixed bin (24), fixed bin (17)),
     get_pdir_ entry () returns (char (168) aligned),
     active_fnc_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$arg_count entry (fixed bin),
     cu_$af_arg_count entry (fixed bin, fixed bin),
     cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin),
     error_table_$wrong_no_of_args fixed bin ext,
     error_table_$bad_arg fixed bin ext,
     error_table_$not_act_fnc fixed bin ext,
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin),
     unique_chars_ entry (bit (*)) returns (char (15)),
     ioa_ entry options (variable);

dcl 1 valueseg based (segptr) aligned,
    2 laste fixed bin,
    2 freep fixed bin,
    2 pad (6) fixed bin,
    2 arry (1000),
      3 name char (32),
      3 valu char (168),
      3 lth fixed bin,
      3 chain fixed bin;

/* ========================================= */

	af_sw = "1"b;				/* this should be an active function */

	call cu_$af_arg_count (i, ec);
	if ec = error_table_$not_act_fnc then af_sw = "0"b;
	else if ec ^= 0 then go to er;

	if ^af_sw then call cu_$arg_count (i);		/* not an active function so get valid count */
	if i ^= 1 then do;
	     ec = error_table_$wrong_no_of_args;
	     go to er;
	end;

	if segptr = null then do;
	     call get_segptr (ec);
	     if segptr = null then do;
er:		if af_sw then
		     call active_fnc_err_ (ec, "rje_args");
		else call com_err_ (ec, "rje_args");
		return;
	     end;
	end;

	if af_sw then
	     call cu_$af_arg_ptr (1, ap, al, ec);
	else call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then if ec ^= error_table_$not_act_fnc then go to er;

/*	check to see if the  key given is legal */

	if bchr = "prt_rqt" then;			/* the printer request type */
	else if bchr = "pun_rqt" then;		/* the punch request type */
	else if bchr = "station" then;		/* the station code of the job */
	else do;					/* all others are  invalid! */
	     ec = error_table_$bad_arg;
	     go to er;
	end;

	do i = 1 to laste;
	     if chain (i) = 0 then if name (i) ^= "" then
		     if bchr = name (i) then go to found;
	end;
	answer = "undefined!";
	go to give;

found:	answer = substr (valu (i), 1, lth (i));
	if answer = "" then answer = "undefined!";	/* always return something */
give:	if af_sw then do;
	     call cu_$af_return_arg (i, ap, al, ec);
	     if ec ^= 0 then if ec ^= error_table_$not_act_fnc then go to er;
	     bvcs = answer;
	     return;
	end;
	call ioa_ (answer);
	return;

/* ---------------------------------- */

set:	entry;

	if segptr = null then do;
	     call get_segptr (ec);
	     if segptr = null then go to er;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to er;

	if bchr = "prt_rqt" then;			/* ok to set the printer request type */
	else if bchr = "pun_rqt" then;		/* ok to set the punch request type */
	else if bchr = "station" then;		/* ok to set the station code */
	else do;					/* all other keys are invalid! */
	     ec = error_table_$bad_arg;
	     go to er;
	end;

	string = bchr;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then do;
	     do i = 1 to laste;
		if string = name (i) then do;
		     chain (i) = freep;
		     freep = i;
		     name (i) = "";
		end;
	     end;
	     return;
	end;

	do i = 1 to laste;
	     if chain (i) = 0 then if name (i) ^= "" then
		     if name (i) = string then do;
			go to f1;
		     end;
	end;
	if freep = 0 then i, laste = laste + 1;
	else do;
	     i = freep;
	     freep = chain (i);
	end;
	name (i) = string;
f1:	valu (i) = bchr;
	chain (i) = 0;
	lth (i) = al;

	call adjust_bit_count_ (dn, en, "0"b, (0), ec);

	return;

/* ------------------------------------------ */

list:	entry;

	if segptr = null then do;
	     call get_segptr (ec);
	     if segptr = null then go to er;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	do i = 1 to laste;
	     if name (i) = "" then go to nop;
	     if chain (i) = 0 then do;
		if ec = 0 then if name (i) ^= bchr then go to nop;
		call ioa_ ("^20a^-^a", name (i), substr (valu (i), 1, lth (i)));
	     end;
nop:	end;
	call ioa_ ("");

	return;

/* ------------------------------------ */

get_segptr: proc (code);

dcl  code fixed bin;

	     dn = get_pdir_ ();
	     en = "rje_args." || unique_chars_ ((70)"0"b); /* make a unique name */

	     call hcs_$make_seg (dn, en, "", 1011b, segptr, code);

	     if code = 0 then do;			/* initialize the values to the defaults */
		laste = 3;			/* 3 entries */
		name (1) = "prt_rqt";
		valu (1) = "printer";
		lth (1) = length (rtrim (valu (1)));
		name (2) = "pun_rqt";
		valu (2) = "punch";
		lth (2) = length (rtrim (valu (2)));
		name (3) = "station";
		valu (3) = "central_site";
		lth (3) = length (rtrim (valu (3)));
	     end;

	     return;

	end get_segptr;

     end rje_args;
