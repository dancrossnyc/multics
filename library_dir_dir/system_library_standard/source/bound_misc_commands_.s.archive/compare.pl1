/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */
/* format: off */


compare: proc;

/* The compare command and active function compares two segments.

Usage:  compare pathA{|offsetA} pathB{|offsetB} {-control_args}


Written 08/07/79 S. Herbst */

/* Added -inhibit_error, -no_inhibit_error, -short, -total 09/25/84 S. Herbst */
/* Changed to work on archive components 11/14/84 Steve Herbst */
/* Fixed compilation warning about star_entry_ptr 12/03/84 Steve Herbst */
/* Fixed equal convention broken by last installation 12/05/84 Steve Herbst */
/* Backed out change to use max length if bit count = 0 12/11/84 Steve Herbst */


/* Constants */

dcl ME char (32) int static options (constant) init ("compare");
dcl FORMAT (2) char (32) int static options (constant) init
	("^4x^6o^2x^w", "^26x^6o^2x^w");
dcl STRING_FORMAT (2) char (32) int static options (constant) init
	("^4x^a", "^26x^a");
dcl DOUBLE_FORMAT char (32) int static options (constant) init ("^4x^6o^2x^w^2x^6o^2x^w");
dcl SKIP (2) char (32) int static options (constant) init
	("^9x|^4x--------", "^31x|^4x--------");
dcl DOUBLE_SKIP char (32) int static options (constant) init ("^9x|^4x--------^9x|^4x--------");

/* Based */

dcl word (0:max_len) bit (36) based;
dcl area area based (area_ptr);

/* Automatic */

dcl 1 info (1:2),
   2 path char (194),
   2 msf_component_name char (32),
   2 (done_sw, msf_sw, noentry_sw) bit (1),
   2 (ptr, entries_ptr, names_ptr) ptr,
   2 (k, len, msf_count, msf_index, offset) fixed bin;

dcl arg char (arg_len) based (arg_ptr);
dcl return_arg char (return_len) varying based (return_ptr);
dcl dn char (168);
dcl (cn, cn1, en, en1, xcn, xen) char (32);
dcl (bad_arg, bad_base) character (10) varying;

dcl mask bit (36);
dcl (af_sw, brief_sw, inhibit_error_sw, printed_header_sw, printed_component_header_sw, short_sw, totals_sw) bit (1);

dcl (area_ptr, arg_ptr, return_ptr) ptr;

dcl (arg_count, arg_len, block_len, col, common_len, dis_count) fixed bin;
dcl (given_len, i, j, max_len, path_count, return_len, word_count) fixed bin;
dcl max_length fixed bin (19);
dcl bit_count fixed bin (24);
dcl (code, octal_mask) fixed bin (35);

/* External */

dcl error_table_$bad_conversion fixed binary (35) external static;
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$dirseg fixed bin (35) ext;
dcl error_table_$item_too_big fixed bin (35) ext;
dcl error_table_$noentry fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;
dcl error_table_$not_act_fnc fixed bin (35) ext;
dcl error_table_$not_archive fixed bin (35) ext;

/* Entries */

dcl complain entry variable options (variable);
dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl get_equal_name_$component entry (char (*), char (*), char (*), char (*), char (*), char (*), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (1), ptr, fixed bin (35));
dcl hcs_$star_ entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl initiate_file_$component entry (char(*), char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl ioa_ entry options (variable);
dcl pathname_ entry (char(*), char(*)) returns(char(168));
dcl pathname_$component entry (char (*), char (*), char (*)) returns (char (168));
dcl terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));

dcl (addrel, divide, index, max, min, null, substr, sum, unspec) builtin;

dcl cleanup condition;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;

	if arg_count < 2 then do;
USAGE:	     if af_sw then call active_fnc_err_$suppress_name (0, ME,
		"Usage:  [compare pathA{|offsetA} pathB{|offsetB} {-control_args}]");
	     else call com_err_$suppress_name (0, ME,
		"Usage:  compare pathA{|offsetA} pathB{|offsetB} {-control_args}");
	     return;
	end;

	given_len, path_count = 0;
	mask = (36) "1"b;
	brief_sw, inhibit_error_sw, short_sw, totals_sw = "0"b;
	unspec (info) = "0"b;
	do i = 1 to 2;
	     ptr (i), entries_ptr (i), names_ptr (i) = null;
	end;
	area_ptr = null;

	on condition (cleanup) call clean_up;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-" then
		if arg = "-brief" | arg = "-bf" then
		     if af_sw then go to BADOPT;
		     else brief_sw = "1"b;
		else if arg = "-inhibit_error" | arg = "-ihe" then
		     if ^af_sw then go to BADOPT;
		     else inhibit_error_sw = "1"b;
		else if arg = "-long" | arg = "-lg" then
		     if af_sw then go to BADOPT;
		     else brief_sw = "0"b;
		else if arg = "-length" | arg = "-ln" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			call complain (0, ME, "No value specified for -length");
			return;
		     end;
		     given_len = cv_oct_check_ (arg, code);
		     bad_arg = "-length";
		     if code ^= 0 then do;
BAD_OCTAL_NUM:
			bad_base = "an octal";
BAD_NUM:			call complain (error_table_$bad_conversion, ME,
			     "^a requires ^a number, not ^a.", bad_arg, bad_base, arg);
			return;
		     end;
		     if given_len <= 0
		     then do;
			     bad_base = "a positive";
			     go to BAD_NUM;
			end;
		end;
		else if arg = "-mask" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			call complain (0, ME, "No value specified for -mask");
			return;
		     end;
		     octal_mask = cv_oct_check_ (arg, code);
		     if code ^= 0
		     then do;
			     bad_arg = "-mask";
			     go to BAD_OCTAL_NUM;
			end;
		     mask = unspec (octal_mask);
		end;
		else if arg = "-no_inhibit_error" | arg = "-nihe" then
		     if ^af_sw then go to BADOPT;
		     else inhibit_error_sw = "0"b;
		else if arg = "-short" | arg = "-sh" then
		     if af_sw then go to BADOPT;
		     else short_sw = "1"b;
		else if arg = "-totals" | arg = "-total" | arg = "-tt" then
		     if af_sw then go to BADOPT;
		     else totals_sw = "1"b;
		else do;
BADOPT:		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;
	     else do;
		path_count = path_count + 1;
		if path_count > 2 then go to USAGE;
		call get_path (path_count);
	     end;
	end;

	if path_count ^= 2 then go to USAGE;

	if noentry_sw (1) | noentry_sw (2) then do;
	     if inhibit_error_sw then do;
		if noentry_sw (1) & noentry_sw (2) then do;
		     call complain (error_table_$noentry, ME, "^/^5x^a^/^5x^a", path (1), path (2));
		     go to RETURN;
		end;
		else do;
		     return_arg = "false";  /* note that -inhibit_error is only allowed with active function */
		     go to RETURN;
		end;
	     end;
	     else do;
		if noentry_sw (1) then i = 1;
		else i = 2;
		call complain (error_table_$noentry, ME, "^a", path (i));
		go to RETURN;
	     end;
	end;

	if ptr (1) = ptr (2) & ^msf_sw (1) & offset (1) = offset (2) then do;
	     call complain (0, ME, "Attempt to compare data with itself.");
	     call clean_up;
	     return;
	end;

	if min (len (1), len (2)) = 0 & af_sw then do;	/* one or both zero length */
	     if len (1) = len (2) then return_arg = "true";
	     else return_arg = "false";
	     call clean_up;
	     return;
	end;

	dis_count, word_count = 0;
	printed_header_sw = "0"b;

	if ^msf_sw (1) & ^msf_sw (2) then call print_discrepancies ();  /* both are segments */
	else do;
	     if af_sw & msf_sw (1) ^= msf_sw (2) then do;
		return_arg = "false";
		go to RETURN;
	     end;

	     do while (^done_sw (1) & ^done_sw (2));
		call get_next_msf_component (1);
		call get_next_msf_component (2);
		printed_component_header_sw = "0"b;
		call print_discrepancies ();
	     end;
	     do i = 1 to 2;
		if ^done_sw (i) then do;
		     dis_count = dis_count + 1;
		     if ^af_sw then call ioa_ ("Remaining components of MSF ^a", path (i));
		     do while (^done_sw (i));
			call get_next_msf_component (i);
			word_count = word_count + len (i);
			if ^af_sw then call ioa_ (STRING_FORMAT (i), get_msf_component_name (i));
		     end;
		end;
	     end;
	end;

/* Print totals */

	if af_sw then do;
	     return_arg = "true";
	     go to RETURN;
	end;

	if dis_count = 0 then call ioa_ ("No discrepancies.");
	else call ioa_ ("^/Total ^d discrepanc^[ies^;y^], ^d word^[s^]",
	     dis_count, dis_count > 1, word_count, word_count > 1);

RETURN:	call clean_up;
	return;
%page;
clean_up: proc;

dcl i fixed bin;

	do i = 1 to 2;
	     if ptr (i) ^= null then call terminate_file_ (ptr (i), 0, TERM_FILE_TERM, code);
	     if entries_ptr (i) ^= null then free entries_ptr (i) -> star_entries in (area);
	     if names_ptr (i) ^= null then free names_ptr (i) -> star_names in (area);
	end;

end clean_up;
%page;
get_msf_component_name: proc (P_i) returns (char (64));

/* Returns either "Segment" or "Component <name>" */

dcl P_i fixed bin;

	if ^msf_sw (P_i) then return ("Segment");
	else return ("Component " || msf_component_name (P_i));

end get_msf_component_name;
%page;
get_next_msf_component: proc (P_i);

/* Positions to next component of an MSF, turns on done_sw (P_i) if the last one. */
/* For a segment, just turns on done_sw (P_i). */

dcl P_i fixed bin;

	if ^msf_sw (P_i) then done_sw (P_i) = "1"b;
	else do;
	     msf_index (P_i) = min (msf_index (P_i) + 1, msf_count (P_i));
	     if msf_index (P_i) = msf_count (P_i) then done_sw (P_i) = "1"b;
	     msf_component_name (P_i) =
		names_ptr (P_i) -> star_names (entries_ptr (P_i) -> star_entries (msf_index (P_i)).nindex);

	     call initiate_file_ (path (P_i), msf_component_name (P_i), R_ACCESS, ptr (P_i), bit_count, code);
	     if code ^= 0 then do;
		call complain (code, ME, "MSF component ^a", pathname_ (path (P_i), msf_component_name (P_i)));
		go to RETURN;
	     end;
	     len (P_i) = divide (bit_count + 35, 36, 17, 0);
	end;

end get_next_msf_component;
%page;
get_path: proc (P_i);

dcl P_i fixed bin;

	j = index (arg, "|");
	if j = arg_len then do;			/* no offset after "|" */
BAD_OFFSET:    call complain (code, ME, "Invalid offset in ^a", arg);
	     goto RETURN;
	end;

	if j ^= 0 then do;
	     offset (P_i) = cv_oct_check_ (substr (arg, j + 1), code);
	     if code ^= 0 then do;
		code = error_table_$bad_conversion;
		goto BAD_OFFSET;
	     end;
	     arg_len = j - 1;
	end;

	call expand_pathname_$component (arg, dn, en, cn, code);
	if code ^= 0 & code ^= error_table_$not_archive then do;
	     call complain (code, ME, "^a", arg);
	     go to RETURN;
	end;

	if P_i = 2 then do;
	     call get_equal_name_$component (en1, cn1, en, cn, xen, xcn, code);
	     if code ^= 0 then do;
		call complain (code, ME, "^a^[::^a^] applied to ^a^[::^a^]",
		     en, cn ^= "", cn, en1, cn1 ^= "", cn1);
		go to RETURN;
	     end;
	     en = xen;
	     cn = xcn;
	end;
	else do;
	     en1 = en;				/* save for 2nd time through */
	     cn1 = cn;
	end;

	path (P_i) = pathname_$component (dn, en, cn);	/* for an error message if needed */

	if cn ^= "" then call initiate_file_$component (dn, en, cn, R_ACCESS, ptr (P_i), bit_count, code);
	else call initiate_file_ (dn, en, R_ACCESS, ptr (P_i), bit_count, code);
	if ptr (P_i) = null then do;
	     if code = error_table_$dirseg then do;
		bit_count = 0;
		call hcs_$status_minf (dn, en, 1, 0, bit_count, 0);
		if bit_count ^= 0 then do;		/* MSF */
		     if offset (P_i) ^= 0 then do;
			call complain (0, ME, "Nonzero offset not allowed for MSF ^a",
			     pathname_ (dn, en));
			go to RETURN;
		     end;

		     msf_sw (P_i) = "1"b;

		     if area_ptr = null then area_ptr = get_system_free_area_ ();
		     call hcs_$star_ (pathname_ (dn, en), "**", star_BRANCHES_ONLY, area_ptr,
			star_entry_count, star_entry_ptr, star_names_ptr, code);
		     if code ^= 0 then do;
			if code = error_table_$nomatch then call complain (0, ME, "Invalid MSF ^a",
			     pathname_ (dn, en));
			else call complain (code, ME, "^a", pathname_ (dn, en));
			go to RETURN;
		     end;
		     entries_ptr (P_i) = star_entry_ptr;
		     names_ptr (P_i) = star_names_ptr;
		     msf_count (P_i) = star_entry_count;
		     msf_index (P_i) = 0;
		     len (P_i) = 1;		/* ie., not zero length */
		     return;
		end;
	     end;
	     else if code = error_table_$noentry then do;
		noentry_sw (P_i) = "1"b;
		return;				/* catch this later */
	     end;
	     else call complain (code, ME, "^a", path (P_i));
	     go to RETURN;
	end;

	len (P_i) = divide (bit_count + 35, 36, 17, 0);

	if offset (P_i) > len (P_i) then do;
	     call complain (error_table_$item_too_big, ME,"
Base-zero offset ^d greater than length ^d", offset (P_i), len (P_i));
	     go to RETURN;
	end;

end get_path;
%page;
print_discrepancies: proc;

	max_len = max (len (1), len (2));
	common_len = min (len (1) - offset (1), len (2) - offset (2));
	if given_len ^= 0 then do;
	     max_len = min (max_len, offset (1) + given_len, offset (2) + given_len);
	     common_len = min (common_len, given_len);
	end;

	k (1) = offset (1);
	k (2) = offset (2);

	block_len = 0;

	do i = 1 to common_len;

	     do i = i to common_len while
		((mask & ptr (1) -> word (k (1) + block_len)) ^= (mask & ptr (2) -> word (k (2) + block_len)));
		     block_len = block_len + 1;
	     end;

	     if block_len > 0 then do;		/* block of discrepancies */

		if af_sw then do;
		     return_arg = "false";
		     go to RETURN;
		end;

		if ^printed_header_sw then call print_header;

		if ^printed_component_header_sw then do;
		     printed_component_header_sw = "1"b;
		     if (msf_sw (1) | msf_sw (2)) & ^totals_sw then
			call ioa_ ("^a / ^a:", get_msf_component_name (1), get_msf_component_name (2));
		end;

		dis_count = dis_count + 1;
		word_count = word_count + block_len;

		if short_sw | totals_sw then do;
		     if ^totals_sw then call ioa_ ("^5d word^[s^; ^] at: ^6o", block_len, block_len > 1, k (1));
		     k (1) = k (1) + block_len;
		     k (2) = k (2) + block_len;
		end;
		else if block_len > 3 & brief_sw then do;
		     call ioa_ (DOUBLE_FORMAT,
			k (1), ptr (1) -> word (k (1)),
			k (2), ptr (2) -> word (k (2)));
		     call ioa_ (DOUBLE_SKIP);
		     k (1) = k (1) + block_len;	/* skip block */
		     k (2) = k (2) + block_len;
		     call ioa_ (DOUBLE_FORMAT,
			k (1) - 1, ptr (1) -> word (k (1) - 1),
			k (2) - 1, ptr (2) -> word (k (2) - 1));
		end;
		else do;
		     do j = 1 to block_len;
			call ioa_ (DOUBLE_FORMAT,
			     k (1), ptr (1) -> word (k (1)),
			     k (2), ptr (2) -> word (k (2)));
			k (1) = k (1) + 1;		/* skip block */
			k (2) = k (2) + 1;
		     end;
		end;

		if i <= common_len then do;		/* skip matching word ending the block */
		     k (1) = k (1) + 1;
		     k (2) = k (2) + 1;
		end;

		block_len = 0;
	     end;

	     else do;				/* no discrepancy, skip 1 matching word */
		k (1) = k (1) + 1;
		k (2) = k (2) + 1;
	     end;
	end;

	if max_len > max (k (1), k (2)) then do;	/* print remaining words of longer seg */

	     if af_sw then do;
		return_arg = "false";
		go to RETURN;
	     end;

	     if ^printed_header_sw then call print_header;
	     if min (len (1), len (2)) = 0 then dis_count = dis_count + 1;
	     else if (mask & ptr (1) -> word (k (1) - 1)) = (mask & ptr (2) -> word (k (2) - 1)) then
		dis_count = dis_count + 1;		/* not continuation of previous discrepancy */
	     if len (1) > len (2) then col = 1;
	     else col = 2;
	     block_len = max_len - k (col);
	     word_count = word_count + block_len;

	     if totals_sw then;
	     else if short_sw then call ioa_ ("^5d word^[s^; ^] at: ^6o (file ^d)",
		block_len, block_len > 1, k (col), col);
	     else if block_len > 3 & brief_sw then do;
		call ioa_ (FORMAT (col), k (col), ptr (col) -> word (k (col)));
		call ioa_ (SKIP (col));
		call ioa_ (FORMAT (col), max_len - 1, ptr (col) -> word (max_len - 1));
	     end;
	     else do j = k (col) to max_len - 1;
		call ioa_ (FORMAT (col), j, ptr (col) -> word (j));
	     end;
	end;

end print_discrepancies;
%page;
print_header: proc;

	printed_header_sw = "1"b;
	if short_sw | totals_sw then return;
	call ioa_ ("Discrepancies:");
	call ioa_ ("^4xoffset^4xcontents^4xoffset^4xcontents");

end print_header;
%page;
%include access_mode_values;
%page;
%include star_structures;
%page;
%include terminate_file;


end compare;
