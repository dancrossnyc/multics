/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* exponent_control

   Command interface for fim exponent flags

*/

exponent_control:
     procedure options (variable);

/* Date Changed (and reason) */
/* Coded February 28 1980 Benson I. Margulies */

dcl  hcs_$get_exponent_control entry (bit (1) aligned, bit (1) aligned, bit (72) aligned);
dcl  hcs_$set_exponent_control entry (bit (1) aligned, bit (1) aligned, bit (72) aligned, fixed bin (35));

dcl  cu_$arg_count entry () returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);

dcl  arg_ptr ptr;
dcl  arg_len fixed bin (21);
dcl  argument char (arg_len) based (arg_ptr);

dcl  nargs fixed bin;
dcl  current_argument fixed bin;
dcl  code fixed bin (35);
dcl (looking_for, processing) fixed bin;
dcl  print_sw bit (1) aligned;
dcl  put_reqd bit (1) aligned;
dcl  happy bit (1) aligned;				/* no further arguments required */

dcl (restart_underflow, restart_overflow) bit (1) aligned;
dcl  overflow_value float bin (63);

dcl (error_table_$bad_conversion,
     error_table_$bad_arg,
     error_table_$inconsistent,
     error_table_$noarg) static external fixed bin (35);
dcl  conversion condition;

dcl ((Control_argument init (1),
     Keyword init (2),
     Control_argument_or_keyword init (3),
     Value_or_control_argument init (4),
     Restart init (5),
     Fault init (6),
     Value init (7)) fixed bin,			/* not really used at the moment */
     Myname init ("exponent_control") character (16)) internal static options (constant);

%include exponent_control_info;

dcl (convert, unspec) builtin;

/*  */
	call GET_CURRENT_VALUES;			/* almost always the command needs them */
	nargs = cu_$arg_count ();
	if nargs = 0 then do;
	     call com_err_ (error_table_$noarg, Myname,
		"^/Usage: exponent_control {-pr}|{-rt|-flt overflow|underflow} {-ovfv value}");
	     return;
	end;
	happy = ""b;
	put_reqd, print_sw = ""b;
	looking_for = Control_argument;
	do current_argument = 1 to nargs;
	     call get_argument;
	     if /* case */ looking_for = Control_argument_or_keyword then
		if substr (argument, 1, 1) = "-" then goto CONTROL_ARG;
		else goto KEYWORD;

	     else if looking_for = Value_or_control_argument then
		if substr (argument, 1, 1) = "-" then goto CONTROL_ARG;
		else goto VALUE;

	     else if looking_for = Control_argument then do;
		if substr (argument, 1, 1) ^= "-" then do;
		     call com_err_ (error_table_$bad_arg, Myname, "Unknown or misplaced keyword ^a.", argument);
		     goto ERROR;
		end;
CONTROL_ARG:	if argument = "-restart" | argument = "-rt" then call process_restart;
		else if argument = "-fault" | argument = "-flt" then call process_fault;
		else if argument = "-overflow_value" | argument = "-ovfv" then call process_value;
		else if argument = "-print" | argument = "-pr" then call process_print;
		else do;
		     call com_err_ (error_table_$bad_arg, Myname,
			"unrecognized control argument ^a.", argument);
		     goto ERROR;
		end;
	     end;
	     else if looking_for = Keyword then do;
KEYWORD:		looking_for = Control_argument_or_keyword;
		happy = "1"b;			/* having found a keyword nothing else required */
		if argument = "overflow" then
		     if processing = Restart then restart_overflow = "1"b;
		     else restart_overflow = "0"b;
		else if argument = "underflow" then
		     if processing = Restart then restart_underflow = "1"b;
		     else restart_underflow = "0"b;
		else do;
		     call com_err_ (error_table_$bad_arg, Myname, "Unrecognized keyword ^a.", argument);
		     goto ERROR;
		end;
	     end;
	     else if looking_for = Value then do;
VALUE:		looking_for = Control_argument;
		happy = "1"b;
		on conversion begin;
		     call com_err_ (error_table_$bad_conversion,
			Myname, "Could not convert ^a to a floating point value.", argument);
		     goto ERROR;
		end;
		overflow_value = convert (overflow_value, argument);
	     end;
	end;
	if ^happy then do;
	     call com_err_ (error_table_$noarg, Myname, "The ^a control argument requires a value.", argument);
	     goto ERROR;
	end;

	if print_sw & put_reqd then do;		/* can't do both */
	     call com_err_ (error_table_$inconsistent, Myname,
		"Can't print while setting any value.");
	     return;
	end;
	else if print_sw then
	     call ioa_ ("Underflows are ^[restart^;fault^]ed;^/Overflows are ^[restart^;fault^]ed;^/Overflow value is ^f.",
	     restart_underflow, restart_overflow, overflow_value);
	else call PUT_CURRENT_VALUES;
	return;

GET_CURRENT_VALUES:
	procedure;

dcl  overflow_bits bit (72) aligned;

	     call hcs_$get_exponent_control (restart_underflow, restart_overflow, overflow_bits);
	     unspec (overflow_value) = overflow_bits;
	     return;

PUT_CURRENT_VALUES:
	     entry;

	     overflow_bits = unspec (overflow_value);
	     call hcs_$set_exponent_control (restart_underflow, restart_overflow, overflow_bits, code);
	     if code ^= 0 then do;
		call com_err_ (code, Myname, "When setting new values.");
		goto ERROR;
	     end;
	     return;
	end;
						/*  */
process_restart:
	procedure;
	     happy = ""b;
	     looking_for = Keyword;
	     processing = Restart;
	     put_reqd = "1"b;
	     return;
	end;

process_fault:
	procedure;
	     happy = ""b;
	     looking_for = Keyword;
	     processing = Fault;
	     put_reqd = "1"b;
	     return;
	end;

process_value:
	procedure;
	     happy = "1"b;				/* we have a default */
	     overflow_value = Default_exponent_control_overflow_value;
	     looking_for = Value_or_control_argument;
	     put_reqd = "1"b;
	     return;
	end;

process_print:
	procedure;
	     happy = "1"b;
	     looking_for = Control_argument;
	     print_sw = "1"b;
	     return;
	end;

get_argument:
	procedure;
	     if current_argument > nargs then do;
		call com_err_ (error_table_$noarg, Myname, "following ^a.", argument);
		goto ERROR;
	     end;
	     call cu_$arg_ptr (current_argument, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, Myname, "Error on argument # ^d.", current_argument);
		goto ERROR;
	     end;
	     return;
	end;

ERROR:	return;					/* regardless of where in the internal procs */

     end;


