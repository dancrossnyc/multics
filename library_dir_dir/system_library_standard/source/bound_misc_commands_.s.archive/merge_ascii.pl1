/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(88-07-06,TLNguyen), approve(88-07-06,MCR7925),
     audit(88-07-08,Parisek), install(88-07-12,MR12.2-1055):
     Fix bug which prevents printing out an error message when lacking path
     argument for -output_file (-of) control argument.
                                                   END HISTORY COMMENTS */



merge_ascii: ma: proc;
	default (fixed&^precision&^constant) precision (21); /* DEFAULT 4*256K CHARS */
	default (constant&real&^decimal) binary;

/* Coded by RE Mullen, Fall '75  */
/* Recoded by RE Mullen, Spring '77 */
/* Added code for archive :: convention THVV 1980 */
/* Jay Pattin 11/10/80 made compare_ascii take -output_file */
/* Jay Pattin 6/30/82 added -extend, -truncate to cpa, cleaned up a little */
/* Jay Pattin 11/2/82 prevent -of file from being original in cpa. see TR13883 */
%page;
%include merge_ascii_info;
%page;
dcl  merge_ascii_ entry (ptr);
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*),
     fixed bin, ptr, fixed bin (35));
dcl (ioa_$ioa_switch, com_err_, com_err_$suppress_name) entry options (variable);
dcl  iox_$user_output ptr external;
dcl  iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35)),
     iox_$open entry (ptr, fixed bin, bit(1) aligned, fixed bin(35)),
     iox_$close entry (ptr, fixed bin(35)),
     iox_$detach_iocb entry (ptr, fixed bin(35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  get_equal_name_$component entry (char (*), char (*), char (*), char (*), char (32), char (32), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  archive_$get_component entry (ptr, fixed bin (24), char (*), ptr, fixed bin (24), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  unique_chars_ entry (bit(*)) returns(char(15));
dcl (error_table_$noarg,
     error_table_$inconsistent,
     error_table_$segknown,
     error_table_$zero_length_seg,
     error_table_$badopt,
     error_table_$rqover,
     error_table_$noentry) ext fixed bin (35);

dcl  cleanup condition;
dcl  record_quota_overflow condition;

dcl (me, operation) char (16) aligned;

dcl (addr, baseno, divide, index, null, rtrim, substr, unspec) builtin;

dcl (i, j, k) fixed bin;
dcl  nargs fixed bin;
dcl  of_arg fixed bin;
dcl  al fixed bin;
dcl  ap ptr;
dcl  attach_desc char (256);
dcl  arg char (al) based (ap);
dcl  dn char (168);
dcl  en char (32);
dcl  ct char (32);
dcl  first_name char (32);
dcl  first_cpt char (32);

dcl  code fixed bin (35);

dcl (edit_bit, have_tc_or_ex, extend, no_header, orig_bit, out_bit) bit (1);
dcl (MA, CPA) bit (1) init (""b);
dcl (first_is_orig, old_mins_ok, saw_minlines, saw_minchars) bit (1) init (""b); /* CPA compatibility switches */
dcl  (iocb_ptr, p) ptr;
dcl (bit_count, cpt_bc) fixed bin (24);
dcl  sx fixed bin;
dcl  expected char (32);
dcl 1 mai aligned like ma_info;

dcl  ch char (999) based;
						/* ENDCL */
%page;
	me = "merge_ascii";
	MA = "1"b;
	call cu_$arg_count (nargs, code);
	if code ^= 0 | nargs = 0 then do;
	     call com_err_$suppress_name (code, me, "Usage:  merge_ascii paths {-control_args}");
	     return;
	end;
	go to common;


compare_ascii: cpa: entry;
	me = "compare_ascii";
	CPA = "1"b;

	call cu_$arg_count (nargs, code);
	if code ^= 0 | nargs = 0 then do;		/* tell usage of cpa */
	     call com_err_$suppress_name (code, me, "Usage:  compare_ascii paths {-control_args}");
	     return;
	end;
						/* for cpa nums are minchars..minlines, if -minchars..minlines not given */
						/* for cpa first path is orig unless -orig or -no_orig given somewhere */
	of_arg = 0;
	first_is_orig = "1"b;
	old_mins_ok, extend = "1"b;
	have_tc_or_ex = "0"b;

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, ap, al, code);
	     if arg = "-orig" | arg = "-original" | arg = "-no_orig" | arg = "-no_original" then do;
		if ^first_is_orig then do;
		     call com_err_ (0, me, "Either -original or -no_original can be specified once.");
		     return;
		end;
		first_is_orig = ""b;
	     end;
	     else if arg = "-minlines" | arg = "-minchars" then do;
		old_mins_ok = ""b;
	     end;
	end;
%page;
common:
	unspec (mai) = ""b;
	mai.op_ptr = null ();
	mai.op_dirname, mai.op_ename = "";
	do i = 1 to ma_max_texts;
	     mai.textid (i) = substr (MA_TEXT_IDS, i, 1);	/* print id's in uppercase */
	     mai.tptr (i), mai.cp (i) = null ();
	end;
	mai.output_iocb_ptr = iox_$user_output;
	iocb_ptr = null ();
	on cleanup call ma_cleanup_handler;
	mai.abort_label = ABORT;
	mai.minlines = 2;
	mai.minchars = 25;
	first_name = "";
	no_header = ""b;

	i = 0;
	mai.lo = 3; mai.hi = 2;			/* seg1 is output, seg2 is orig, segs3+ are updates */
	do while (i < nargs);
	     i = i + 1;
	     out_bit, orig_bit, edit_bit = ""b;		/* dont know what it is, yet */

	     call cu_$arg_ptr (i, ap, al, code);
	     if ^CPA then goto COMMON_ARGS;
	     if arg = "-totals" | arg = "-total" | arg = "-tt" then mai.totals_only = "1"b;
	     else if arg = "-no_totals" | arg = "-no_total" | arg = "-ntt" then mai.no_totals = "1"b;
	     else if arg = "-extend" then have_tc_or_ex, extend = "1"b;
	     else if arg = "-truncate" | arg = "-tc" then do;
		extend = "0"b;
		have_tc_or_ex = "1"b;
	     end;
	     else if arg = "-header" | arg = "-he" then do;
		mai.print_heading = "1"b;
		no_header = "0"b;
	     end;
	     else if arg = "-no_header" | arg = "-nhe" then no_header = "1"b;
	     else if arg = "-no_numbers" | arg = "-no_number" | arg = "-nnb" then mai.no_line_numbers = "1"b;
	     else if arg = "-print_new_lines" | arg = "-pnl" then mai.print_new_lines = "1"b;
	     else if arg = "-no_output_file" | arg = "-nof" then mai.output_iocb_ptr = iox_$user_output;
	     else if arg = "-no_orig" | arg = "-no_original" then;
						/* if CPA then we've already noticed this arg */
	     else 
COMMON_ARGS:	if arg = "-minlines" | arg = "-minchars" then do;
		expected = substr (arg, 2);		/* note what we expect */
		i = i + 1;
		call cu_$arg_ptr (i, ap, al, code);
		if code ^= 0 then do;
NOARG:		     call com_err_ (code, me, "^a", expected);	/* tell whats missing */
		     go to ABORT;
		end;
		k = cv_dec_check_ (arg, code);
		if code ^= 0 then do;
BADNUM:		     call com_err_ (0, me, "Invalid ^a value: ""^a""", expected, arg);
		     go to ABORT;
		end;
		if k <= 0 then go to BADNUM;
		if expected = "minlines" then mai.minlines = k;
		else mai.minchars = k;
	     end;
	     else if index (arg, "-") = 1 then do;	/* -something path */
		if MA & (arg = "-old_original" | arg = "-old_orig") then do;
		     mai.convergence_ok = "1"b;
		     go to ORIG;
		end;
		else if arg = "-original" | arg = "-orig" then do;
ORIG:
		     expected = "original";
		     if mai.have_orig then go to ONLYONE;
		     mai.have_orig, orig_bit = "1"b;
		end;
		else if arg = "-output_file" | arg = "-of" then do;
		     expected = "output";
		     if mai.have_output then do;
ONLYONE:
			call com_err_ (0, me, "Only one ^a segment can be specified.", expected);
			go to ABORT;
		     end;

		     of_arg = i + 1;                    /* prepare to get the path argument for -output_file control argument */
		     if of_arg > nargs then do;
			call com_err_ (0, me, "Missing path argument for ^a control argument.", arg);
			goto ABORT;
		     end;

		     mai.have_output, out_bit = "1"b;
		end;
		else if MA & arg = "-edit" then do;
		     expected = "edit";
		     mai.have_edit, edit_bit = "1"b;
		end;
		else do;				/* -crap */
BAD_ARG:		     call com_err_ (error_table_$badopt, me, "^a", arg);
		     go to ABORT;
		end;
		i = i + 1;
		if ^(CPA & out_bit) then do;		/* Don't process cpa output path until end. */
		     call cu_$arg_ptr (i, ap, al, code);
		     if code ^= 0 then go to NOARG;	/* should have been path */
		     call PROCESS_PATH;
		end;
	     end;
	     else if ^old_mins_ok then call PROCESS_PATH; /* must be vanilla path */
	     else do;				/* a vanilla path or a vanilla number */
		k = cv_dec_check_ (arg, code);
		if code ^= 0 then call PROCESS_PATH;
		else do;				/* a number */
		     if ^saw_minchars then do;
			saw_minchars = "1"b;
			mai.minchars = k;
			expected = "minchars";
		     end;
		     else if ^saw_minlines then do;
			saw_minlines = "1"b;
			mai.minlines = k;
			expected = "minlines";
		     end;
		     else go to BAD_ARG;
		     if k <= 0 then go to BADNUM;
		end;
	     end;
	end;					/* end arg loop */
%page;
/* GLOBAL ARG CHECKS */

	if mai.lo ^< mai.hi then do;			/* (orig&no_upd) | (no_orig&one_upd) is dumb */
	     call com_err_ (0, me, "Not enough texts supplied.");
	     go to ABORT;
	end;

	if have_tc_or_ex & ^mai.have_output then do;
	     call com_err_ (error_table_$inconsistent, me, "-extend and -truncate may only be used with -output_file.");
	     return;
	end;

	if CPA & mai.have_output then do;                 /* my name is compare_ascii and -output_file (-of) is specified */
	     out_bit = "1"b;

	     call cu_$arg_ptr (of_arg, ap, al, code);     /* get path argument for -output_file (-of) control argument */
	     if code ^= 0 then do;
		call com_err_ (code, me);
		goto ABORT;
	     end;

	     if index (arg, "-") = 1 then do;              /* the first character of arg value is a hyphen. */
                                                             /* example: cpa path1 path2 -of */
		call com_err_ (error_table_$noarg, me, "^/Missing path argument for -output_file (-of) control argument.  Found ^a", arg);
		goto ABORT;
	     end;

	     call PROCESS_PATH;
	     if ^no_header then mai.print_heading = "1"b;
	     if extend then attach_desc = rtrim (attach_desc) || " -extend";
	     call iox_$attach_name (unique_chars_ ("0"b) || ".cpa", iocb_ptr, attach_desc, null (), code);
	     call iox_$open (iocb_ptr, 2, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, me, "Attaching ^a.", arg);
		goto ABORT;
	     end;
	     mai.output_iocb_ptr = iocb_ptr;
	     mai.have_output = "0"b;		/* so merge_ascii_ knows this is a compare */
	end;

	if MA & ^mai.have_output then do;
	     code = error_table_$noarg;
	     expected = "output_file";
	     go to NOARG;
	end;

	if mai.print_new_lines & ^mai.have_orig then do;
	     call com_err_ (0, me, "An original must be supplied to use print_new_lines feature");
	     go to ABORT;
	end;

	do i = mai.lo to mai.hi;
	     if mai.have_output then if mai.op_ptr ^= null () then
		if baseno (mai.op_ptr) = baseno (mai.tptr (i)) then do; /* Output must not be same as input */
		     dn = mai.op_dirname;
		     en = mai.op_ename;
		     ct = "";
		     go to SAMESEG;
		end;
	     do j = i + 1 to mai.hi;			/* No two inputs must be same */
		if mai.tptr (i) = mai.tptr (j) then do;
		     dn = mai.dirname (j);
		     en = mai.ename (j);
		     ct = mai.component (j);
SAMESEG:		     call com_err_ (0, me, "^a^[>^]^a^[::^a^;^s^] is the same segment as ^a^[>^]^a^[::^a^;^s^]",
			dn, (dn ^= ">"), en, (ct ^= ""), ct,
			mai.dirname (i), (mai.dirname (i) ^= ">"), mai.ename (i), (mai.component (i) ^= ""), mai.component (i));
		     go to ABORT;
		end;
	     end;
	end;
%page;
/* START WORK */

	if mai.print_heading then do;
	     do i = mai.lo to mai.hi;
		if mai.tptr (i) ^= null () then do;
		     call ioa_$ioa_switch (mai.output_iocb_ptr, "^a ^a^[>^]^a^[::^a^;^s^] (^[original^;new^])",
			mai.textid (i), mai.dirname (i), (mai.dirname (i) ^= ">"), mai.ename (i),
			(mai.component (i) ^= ""), mai.component (i), (i = 2));
		end;
	     end;
	end;

	call merge_ascii_ (addr (mai));

/* if merge then copy to target segment */
	if mai.have_output then do;			/* now must move output to target */
	     if mai.op_ptr = null () then do;		/* output seg not exist yet */
		call hcs_$make_seg ((mai.op_dirname), (mai.op_ename), "", 01011b, mai.op_ptr, code);
		if mai.op_ptr = null then goto OP_ERR;	/* can't create it! */
	     end;
	     else do;				/* output seg already exists */
		call hcs_$truncate_seg (mai.op_ptr, 0, code); /* check access & save paging */
		if code ^= 0 then go to OP_ERR;	/* access bad, vanished? */
	     end;
	     on record_quota_overflow begin;		/* now target exists, prepare to copy */
		code = error_table_$rqover;
		go to OP_ERR;
	     end;
	     substr (mai.op_ptr -> ch, 1, mai.tchars (1)) = substr (mai.tptr (1) -> ch, 1, mai.tchars (1));
	     call hcs_$set_bc_seg (mai.op_ptr, 9*mai.tchars (1), code); /* finally done */
	     if code ^= 0 then do;			/* unlikely .. */
OP_ERR:		call hcs_$set_bc_seg (mai.tptr (1), 9*mai.tchars (1), 0); /* come here if trouble with output seg */
		call com_err_ (code, me,
		     "^a^[>^]^a", mai.op_dirname, (mai.op_dirname ^= ">"), mai.op_ename);
		call com_err_ (0, me, "Merged output is in ^a>^a",
		     mai.dirname (1), mai.ename (1));
	     end;
	     else do;				/* successful copy, delete temp */
		call hcs_$delentry_seg (mai.tptr (1), code);
		if code ^= 0 then call com_err_ (code, me, "Could not delete ^a>^a", mai.dirname (1), mai.ename (1));
	     end;
	end;
						/* make soothing noise */
	if ^mai.no_totals then do;
	     if CPA then operation = "Comparison"; else operation = "Merge";
	     if CPA & mai.total_differences = 0 then call ioa_$ioa_switch (mai.output_iocb_ptr, "Segments are identical.");
	     else call ioa_$ioa_switch (mai.output_iocb_ptr, "^a finished: ^d difference^[s^], ^d line^[s^].",
		operation,
		mai.total_differences, (mai.total_differences ^= 1),
		mai.total_lines_differing, (mai.total_lines_differing ^= 1));
	end;
	call ma_cleanup_handler;			/* clean up address space etc */
	return;

ABORT:						/* come here for failure exit */
	if mai.tptr (1) ^= null ()
	then call hcs_$delentry_seg (mai.tptr (1), code);
	call ma_cleanup_handler;			/* failure leave address space clean */
	return;

/* ------------------------------------------------------------ */


ma_cleanup_handler: proc;				/* IP to cleanup */
	     do i = 2 to ma_max_texts;
		if mai.tptr (i) ^= null () then
		     call hcs_$terminate_noname (mai.tptr (i), code);
	     end;
	     if mai.op_ptr ^= null () then
		call hcs_$terminate_noname (mai.op_ptr, 0);

	     if iocb_ptr ^= null () then do;
		call iox_$close (iocb_ptr, code);
		call iox_$detach_iocb (iocb_ptr, code);
	     end;

	end ma_cleanup_handler;
%page;
PROCESS_PATH: proc;					/* IP to deal with pathname, switches already set */

dcl cpt_ptr ptr;
dcl cpt char (32);
dcl (sname, scpt) char (32);				/* results of equal processing */

	     cpt = "";				/* can't have output in archive */
	     if out_bit then call expand_pathname_ (arg, dn, en, code);
	     else call expand_pathname_$component (arg, dn, en, cpt, code);
	     if code ^= 0 then do;
ARG_ERR:
		call com_err_ (code, me, "^a", arg);
		go to ABORT;
	     end;

	     if first_name = "" then do;
		first_name = en;			/* first_name is template for equal conv */
		first_cpt = cpt;
		if first_is_orig then do;		/* if f_i_o then first path is orig */
		     mai.have_orig, orig_bit = "1"b;	/* so simulate preceding "-orig" arg */
		     expected = "original";
		end;
	     end;
	     else do;				/* all but first ename get equal conv */
		call get_equal_name_$component (first_name, first_cpt, en, cpt, sname, scpt, code);
		if code ^= 0 then do;
		     call com_err_ (code, me, "^a^[::^a^;^s^] ^a^[::^a^;^s^]",
			first_name, (first_cpt ^= ""), first_cpt, en, (cpt ^= ""), cpt);
		     go to ABORT;
		end;
		en = sname;			/* replace by expanded name */
		cpt = scpt;
	     end;

	     if out_bit then do;
		if CPA then do;
		     attach_desc = "vfile_ " || rtrim (dn) || ">" || en;
		     return;
		end;
		
		else do				/* attempt to initiate real output segment now */
						/* if it does not exist we will create it later */
						/* if is does exist we will compare the pointer to input segments */
		     mai.op_dirname = dn;
		     mai.op_ename = en;
		     call hcs_$initiate_count ((mai.op_dirname), (mai.op_ename), "", 0, 0, mai.op_ptr, code);
		     if code ^= 0 then
			if code ^= error_table_$noentry then
			if code ^= error_table_$segknown then do;
				call com_err_ (code, me, "^a^[>^]^a", dn, (dn ^= ">"), en);
				go to ABORT;
			end;
		     sx = 1;
						/* also create temporary seg for output */
		     dn = "[pd]";
		     en = "ma_temp." || rtrim (mai.op_ename);
		     call hcs_$make_seg ("", en, "", 01011b, p, code);
		     if p = null () then do;
PATH_ERR:			call com_err_ (code, me, "^a^[>^]^a", dn, (dn ^= ">"), en);
			go to ABORT;
		     end;
		     mai.tptr (1) = p;
		end;
	     end;					/* out_bit processing done */
	     else do;				/* name of input seg */
		if orig_bit then sx, mai.lo = 2;		/* note seg_index for later */
		else do;				/* some updated version */
		     mai.hi = mai.hi + 1;
		     if mai.hi > ma_max_texts then do;
			call com_err_ (0, me, "Only six versions and one original can be merged or compared.");
			go to ABORT;
		     end;
		     sx = mai.hi;
		end;
		p = null ();
		call hcs_$initiate_count (dn, en, "", bit_count, 0, p, code);
		if p = null () then go to PATH_ERR;
		mai.tptr (sx) = p;			/* set ptr now */
		if bit_count = 0 then do;
		     code = error_table_$zero_length_seg;
		     go to PATH_ERR;
		end;
		mai.tchars (sx) = divide (bit_count+8, 9, 17, 0);
		if edit_bit then mai.edit (sx) = "1"b;
		mai.len (sx) = mai.tchars (sx);
		if cpt ^= "" then do;		/* read archive? */
		     call archive_$get_component (p, bit_count, cpt, cpt_ptr, cpt_bc, code);
		     if code ^= 0 then do;
			call com_err_ (code, me, "^a^[>^]^a::^a", dn, (dn ^= ">"), en, cpt);
			go to ABORT;
		     end;
		     p, mai.tptr (sx) = cpt_ptr;		/* set ptr to archive element */
		     mai.tchars (sx), mai.len (sx) = divide (cpt_bc+8, 9, 17, 0);
		end;
	     end;
	     mai.cp (sx) = mai.tptr (sx);			/* fill in info structure */
	     mai.line (sx) = 1;
	     mai.dirname (sx) = dn;
	     mai.ename (sx) = en;
	     mai.component (sx) = cpt;

	end PROCESS_PATH;

     end merge_ascii;
