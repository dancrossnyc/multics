/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


walk_subtree: ws: proc;

/* Initially coded in September 1969 by V. Voydock */
/* Converted to pl1  in May 1970 by V. Voydock */
/*  Modified on May 4, 1970 at 12:25 midnight by V. Voydock */
/* Modified on January 4, 1971 (to add pi handler) by V. Voydock */
/* Modified on July 8, 1971 by J. Stern
   Command name changed from "global" to "execute_in_subdirectories".
   Command format and options changed ("-bottom_up" option added).  */
/* Modified Dec 13 1973 by S. Herbst
   Converted to Version II
   Names changed to walk_subtree and ws_recursive.
   Var. length temporary command line. */
/* Bugs fixed 12/9/75 by Steve Herbst: walking through MSF's and
   cwd in command line changing walk */
/* By Greenberg 3/8/77 to allow walking MSF's (!) on -msf,
   and -priv for hphcs_$star_. */
/* By GTWilliams 5/9/78 to eliminate BRS's and RRS's from output, move pi handler functionality to a
   cleanup handler, explicitly set value of op to addr(original_dir).  */
/* Badpath error message fixed 05/12/80 S. Herbst */
/* By R. Kovalcik 9/10/82 to handle security-out-of-service error better */
/* By C Spitzer 7 Nov 83: use include star_structures, attempt to use get_shortest_path_
		      if the directory length would be > 168 */
/* By Keith Loepere, December 1984: generate good paths for dirs off root. */

dcl	cleanup condition;

dcl	original_dir char(168),		/* directory from which ws was invoked */
	command_line char(clng) based(cp),
	starting_node char(slng) based(sp),	/* starting node of subtree of subdirectories */
	starting_dir char (168),
	arg char(lng) based(ap),
	cstring char(168),			/* ioa_ control string passed to com_err_ */
	ws char(16) aligned int static init("walk_subtree"),
	nl char(1) aligned internal static initial("
");  		/* new line character */

dcl	(lng,
	 clng,
	 slng,
	 first_level init(1),   /* level of recursion at which to begin executing command line */
	 last_level init(999),
	 i,
	nargs,
	 level init(0)   /* current level of recursion */
    	 	) fixed bin(17);

dcl       (nnn, code) fixed bin(35);

dcl	(bottom_up_flag init("0"b),
	  (privf, msff) init ("0"b),
	 trace_flag init("1"b),
	 f_option_flag) bit(1) aligned;

dcl	(ap,
	 arp,
	 op,
	 sp,
           tcp,
	 cp )ptr;

dcl       tem_ area based(arp),
          tem_com_line char(clng) aligned based(tcp);     /* temporary command line to be allocated in tem_ */
dcl       error_table_$badopt ext fixed bin(35),
          error_table_$noarg ext fixed bin(35);

dcl	(addr, fixed, null, rtrim, substr) builtin,
	absolute_pathname_ entry (char(*), char(*), fixed bin(35)),
	pathname_ entry (char(*), char(*)) returns(char(168)),
	cv_dec_check_ external entry(char(*), fixed bin(35)) returns(fixed bin(35)),
	cu_$arg_ptr ext entry(fixed bin(17),ptr,fixed bin(17),fixed bin(35)),
	cu_$arg_count ext entry(fixed bin(17)),
          get_system_free_area_ ext entry returns(ptr),
	get_wdir_ entry() returns(char(168)),
	change_wdir_ external entry(char(168), fixed bin(35)),
          ioa_ ext entry options(variable),
          com_err_ ext entry options(variable);

/*  */

		/* Save original working directory */
	/* Establish handler for cleanup to reset user's original working_dir  */
	on condition (cleanup) call change_wdir_(original_dir,code);
	op = addr(original_dir);
	original_dir = get_wdir_();
	if original_dir="" then return;

		/* Get argument count */
	call cu_$arg_count(nargs);
	if nargs < 2 then do; code = error_table_$noarg; cstring = " "; go to ERROR_EXIT1; end;
	
		/* Get starting node name */
	call cu_$arg_ptr(1, sp, slng, code);
	if code ^= 0 then do; i = 1; go to ERROR_EXIT3; end;

		/* "-wd" => current working directory */
	if starting_node = "-wd" then do; sp = op; slng = 168; end;

	call absolute_pathname_ (starting_node, starting_dir, code);
	if code ^= 0 then do;
	     cstring = starting_node;
	     goto ERROR_EXIT1;
	     end;

		/* Get command line */
	call cu_$arg_ptr(2, cp, clng, code);
	if code ^= 0 then do; i = 2; go to ERROR_EXIT3; end;

		/* Check for options */
	do i = 3 to nargs;
	     call cu_$arg_ptr(i,ap,lng,code);
	     if code ^= 0 then go to ERROR_EXIT3;
	     if substr(arg,1,1) ^= "-" then 	     /* not an option */
	          do;
	          cstring = "Argument does not have option format as expected.  ^a";
	          go to ERROR_EXIT2;
	          end;

	     	     /* Identify options */
	     if arg="-ft" | arg="-first" then   do; f_option_flag="1"b; go to SETLEVEL; end;
	     else  
	     if arg="-lt" | arg="-last" then   do; f_option_flag="0"b; go to SETLEVEL; end;
	     else  
	     if arg="-msf" then msff = "1"b;
	     else
	     if arg = "-priv" then privf = "1"b;
	     else
	     if arg="-bf" | arg="-brief" then trace_flag="0"b;
	     else
	     if arg="-bu" | arg = "-bottom_up" then bottom_up_flag = "1"b;
	     else
	     do; code = error_table_$badopt; cstring= arg; go to ERROR_EXIT1; end;
	     go to ENDLOOP;

SETLEVEL:      i=i+1;
	     call cu_$arg_ptr(i,ap,lng,code);
	     if code ^= 0 then do; cstring = "Level number missing."; go to ERROR_EXIT2; end;
	     nnn = cv_dec_check_(arg, code);	     /* convert level number from char to binary */
	     if code ^= 0 | nnn <= 0 then
	          do;
	          cstring = "Bad level number.  ^a";
	          go to ERROR_EXIT2;
	          end;
	     if f_option_flag then first_level = nnn;
	     else last_level = nnn;
ENDLOOP:	end;


		/* Control comes here when all arguments have been processed. */
CALL_CP:	if last_level < first_level then
	     do;
	     code = 0;
	     cstring = "Last level must be >= first level.";
	     go to ERROR_EXIT1;
	     end;

		/* Get area in which star handler can allocate information */
          arp = get_system_free_area_();

                    /* Allocate temporary command line in this area */
          allocate tem_com_line in(tem_) set(tcp);

		/* Now do the real work */
	call ws_recursive(starting_dir);

                    /* Free tem_com_line */
          free tem_com_line in(tem_);


RETURN_TO_ORIGINAL_DIR:

		/* The real work has been done. Now make the user's working directory
		   be the same as when command was invoked, then return */
	call change_wdir_(original_dir,code);
	if code = 0 then return;
	cstring = original_dir;

ERROR_EXIT1: call com_err_(code, ws, cstring);
	return;

ERROR_EXIT2: call com_err_(0, ws, cstring, arg);
	return;

ERROR_EXIT3: call com_err_(code, ws, "ARG ^d", i);
	return;
	
	/*  */
	
		/* Internal procedure to execute the command line set up in the main body of
		   the program at all specified points of the file system hierarchy */
ws_recursive: proc(nodeP);
	
dcl	nodeP char(*) parameter;

dcl	(dp,
	(ep,
	 np) init(null)  ) ptr;

dcl	node char (168);
dcl	dpath char (dlng) based (dp);

dcl	type fixed bin(2);

dcl	(dlng,
 	 k,
	 ecount
		     ) fixed bin(17);
	
dcl	nind fixed bin(18);

dcl	bitcnt fixed bin(24);

dcl       code fixed bin(35);

dcl	cu_$cp ext entry(ptr,fixed bin(17),fixed bin(35)),
	get_shortest_path_ entry (char(*)) returns(char(168)),
	pathname_ entry (char(*), char(*)) returns(char(168)),
	hcs_$star_ ext entry(char(*),char(*),fixed bin(2),ptr,fixed bin(17),ptr,ptr,fixed bin(35));
dcl	hphcs_$star_ ext entry (char(*),char(*),fixed bin(2),ptr,fixed bin(17),ptr,ptr,fixed bin(35));
dcl	hcs_$status_minf entry(char(*),char(*),fixed bin(1),fixed bin(2),fixed bin(24),fixed bin(35));

dcl	error_table_$dirlong fixed bin(35) ext static;
dcl	error_table_$no_s_permission ext fixed bin(35);
dcl       error_table_$nomatch ext fixed bin(35);
dcl       error_table_$oosw ext fixed bin(35);
	
%include star_structures;

/*  */

		/* Establish cleanup handler */

	star_entry_ptr, star_names_ptr = null;

	on condition(cleanup) begin;
				if star_names_ptr ^= null then free star_names in (tem_);
				if star_entry_ptr ^= null then free star_entries in (tem_);
			  end;
	
		/* Push level of recursion */
	level=level+1;
	
	node = nodeP;
	
		/* Change working directory to this node */
	call change_wdir_(node, code);
	if code ^= 0 then go to CALL_COM;
	
		/* See if top-down trace is wanted */
	if bottom_up_flag then go to NEXT;
	
		/* See if command processor should be called at this level.
		   If so, copy the command line into temporary because the
		   the command processor destroys the input line passed to it */
EXECUTE:	if level>=first_level then
	     do;
	     if trace_flag then call ioa_("^-^a",node);    /* trace in effect */
	     tem_com_line=command_line;
	     call cu_$cp(tcp,clng,code);
	     if code^=0 then if code^=100 then do;
		level = 0;
		return;
	     end;

	     call change_wdir_(node,code);		/* restore working dir after command line */
	     if code^=0 then go to CALL_COM;

	     end;
	if bottom_up_flag then go to FREE;
	
		/* If this is last level then skip looking for subdirectories */
NEXT:	if level >= last_level then go to SKIP;
	
		/* Get list of all subdirectories */
	if privf then call hphcs_$star_(node,"**",2,arp,star_entry_count,star_entry_ptr,star_names_ptr,code);
	else call hcs_$star_(node,"**",2,arp,star_entry_count,star_entry_ptr,star_names_ptr,code);
	     if code=error_table_$nomatch then go to SKIP;    /* no subdirectories */
	
		/* Execute command in all subdirectories which are in range */
	do k=1 to star_entry_count;
	     nind = fixed(star_entries(k).nindex);
	     if ^msff then do;
		call hcs_$status_minf(node,star_names(nind),0,type,bitcnt,code);
		if code^=0
		     then if code^=error_table_$no_s_permission
		          then if code^=error_table_$oosw
		               then go to CALL_COM;
		if bitcnt ^= 0 then go to ENDLOOP;	/* Don't care if its not dir. */
	     end;
	     if star_entries(k).type ^= 2 then go to ENDLOOP;
	     if length (rtrim (node)) + length (rtrim (star_names(nind))) + 1 > 168
	     then do;				/* try to make it fit */
		node = get_shortest_path_ (node);
		if length (rtrim (node)) + length (rtrim (star_names(nind))) + 1 > 168
		then do;				/* still doesn't fit */
		     call com_err_ (error_table_$dirlong, ws, "^a", pathname_ (node, star_names (nind)));
		     goto ENDLOOP;
		     end;
		end;
	     call ws_recursive(pathname_ (node, star_names(nind)));
		     /* check for error condition occuring when starting level is greater than one.
		        e.g. "ws <test -gf 2 foo" where foo does not exist.  If this test is 
		        not made ws will print multiple error messages in above case */
	     if level=0 then return;
	     call change_wdir_(node,code);   /* pop working directory back to correct level */
	     if code ^= 0 then go to CALL_COM;
ENDLOOP:	end;

		/* See if bottom-up trace is wanted */
SKIP:	if bottom_up_flag then go to EXECUTE;

FREE:
	if star_names_ptr ^= null then free star_names in (tem_);
	if star_entry_ptr ^= null then free star_entries in (tem_);
	go to RETURN;
	
CALL_COM:
	
	call com_err_(code,ws,node);
	
RETURN:
	
	level=level-1;   /* pop recursion level count */
	return;
	
end ws_recursive;
	
	
end walk_subtree;
