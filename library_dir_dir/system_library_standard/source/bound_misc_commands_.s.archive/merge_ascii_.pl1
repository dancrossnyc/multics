/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


merge_ascii_: proc (a_maip); default (fixed&^precision&^constant) precision (21); /* DEFAULT */
default (constant&real&^decimal) binary;

/* Subroutine implementing top level of merge/compare subsystem. */
/* It is called with a pointer to a main control structure. */
/* It may pass that pointer to procs it calls */
/* This subroutine is not externally available.  The interface can change. */

/* Re-coded Spring '77 RE Mullen */

dcl  a_maip ptr;					/* parameter */

dcl  ch char (999) based;
dcl  skipchars (0:1) char (1) unal based;
dcl (i, j, k) fixed bin;
dcl  code fixed bin (35);
dcl  NL char (1) init ("
");

dcl (ioa_, ioa_$nnl) entry options (variable);
dcl (iox_$user_input, iox_$user_output) ptr ext;
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));

dcl (ma_resynch_, ma_analyze_) entry (ptr);

dcl (addr, index, substr) builtin;

/*  */

%include merge_ascii_info;
/*  */


	ma_info_ptr = a_maip;			/* pointer at least to automatic */


	call find_same_at_start;			/* skip over matching chars at start */
	if have_output then call take_same;		/* pick up any found */
	call skip_same;				/* skip over those chars */



	do while (^ma_info.eof);
	     call ma_resynch_ (ma_info_ptr);		/* sets synchlen, difflen(*), eof, etc */

	     total_differences = total_differences + 1;	/* keep change counters */
	     do i = lo to hi;
		total_lines_differing =
		     total_lines_differing + difflines (i);
	     end;

	     if ^totals_only | have_output then
		call ma_analyze_ (ma_info_ptr);	/* print diff, auto-take, call editor */

	     call skip_diff;			/* advance past difflen(*) chars */

	     if have_output then call take_same;	/* pick up synchlen chars */

	     call skip_same;			/* advance past synchlen chars */
	end;

	return;					/* all done */

/*  */
find_same_at_start: proc;				/* IP to skip over matching lines */
dcl (ssj, ssk) fixed bin;
dcl  lo_cp ptr;
dcl  lo_len fixed bin;
dcl  same_len bit (1);


/* The objective of the following code is to determine the number of matching
   lines.  In order to avoid indexing into all segments, we index for newlines
   only in the lowest segment and then compare those characters, including the
   newline (if any), with the corresponding characters in the other segments.
   If all compares come out equal, we have found one more matching line.
   For this scheme to work we must not reference past the
   end of any segment, so we compute the min of all lengths.  If in text(lo)
   we ever fail to find a newline then the end of text(lo) cannot match the other
   texts unless they are all of the same length */

	     synchlen = 0;				/* skipped no chars yet */
	     synchlines = 0;			/* skipped no lines yet */

	     lo_cp = cp (lo);
	     lo_len = len (lo);


/* Set lo_len to the minimum remaining length in any text */
	     same_len = "1"b;
	     do ssk = lo + 1 to hi;
		if len (ssk) < lo_len then do;	/* found unequal and shorter text */
		     lo_len = len (ssk);		/* note new, lower min len */
		     same_len = ""b;		/* note all lengths not the same */
		end;
	     end;

/* Step through text(lo) line by line.  Compare each line to text in
   other texts.  Whenever any other text differs we have found what is the same */
ss_loop:
	     ssj = index (substr (lo_cp -> ch, synchlen + 1, lo_len - synchlen), NL); /* get current line length */
	     if ssj = 0 then do;			/* no new line found */
		if same_len then ssj = lo_len - synchlen; /* else get matching partial lines, not at EOF .. */
		if ssj = 0 then go to ss_done;
	     end;
	     do ssk = lo + 1 to hi;			/* see if lines all match */
		if substr (lo_cp -> ch, synchlen + 1, ssj) ^= substr (cp (ssk) -> ch, synchlen + 1, ssj)
		then go to ss_done;
	     end;
	     synchlen = synchlen + ssj;		/* count more chars */
	     synchlines = synchlines + 1;		/* count this line */
	     go to ss_loop;				/* try for another */

ss_done:						/* here when cant match one more line */

	end find_same_at_start;


/*  */
skip_diff: proc;					/* IP to skip over (processed) differences */

dcl  sdi fixed bin;

	     do sdi = lo to hi;			/* for each input seg */
		cp (sdi) = addr (cp (sdi) -> skipchars (difflen (sdi))); /* advance ptr */
		line (sdi) = line (sdi) + difflines (sdi); /* advance linno */
		len (sdi) = len (sdi) - difflen (sdi);	/* decrease remaining len */
	     end;

	end skip_diff;


skip_same: proc;					/* IP to skip over synched block */

dcl  ssx fixed bin;

	     eof = "1"b;				/* assume we are not at eof */
	     do ssx = lo to hi;			/* for each input seg */
		len (ssx) = len (ssx) - synchlen;	/* decrement remaining length */
		if len (ssx) > 0 then eof = ""b;	/* note if at eof */
		line (ssx) = line (ssx) + synchlines ;	/* increment linno */
		cp (ssx) = addr (cp (ssx) -> skipchars (synchlen)); /* advance pointer */
	     end;

	end skip_same;


take_same: proc;					/* IP to pick up unchanged text */

	     substr (cp (1) -> ch, 1, synchlen)		/* copy text */
		= substr (cp (lo) -> ch, 1, synchlen);	/* grab chars */
	     tlines (1) = tlines (1) + synchlines;	/* increment output linno */
	     tchars (1) = tchars (1) + synchlen;	/* increment output charcount */
	     cp (1) = addr (cp (1) -> skipchars (synchlen)); /* bump pointer */

	end take_same;


/*  */

/* print_diff: proc;	         /* temporary IP to print diffs, fo debugging */
/*
   /*dcl (pdi, pdj, pdk) fixed bin;
   /*
   /*     do pdi = lo to hi;
   /*        call iox_$put_chars (iox_$user_output, cp (pdi), difflen (pdi), code);
   /*     end;
   /*
   /*  end print_diff;
   /*dump: proc;	         /* IP to dump key vars */
/* dcl  di fixed bin;
   /*     call ioa_ ("^/  sx  tptp  tch  tlines     cp            len  line  dlen  dlin  same");
   /*     do di = lo to hi;
   /*
   /*        call ioa_ ("^4d: ^p ^4d ^4d      ^p	 ^4d ^4d  ^4d ^4d  ^4d",
   /*	 di, tptr (di), tchars (di), tlines (di),
   /*	 cp (di), len (di), line (di),
   /*	 difflen (di), difflines (di),
   /*	 same_as (di));
   /*     end;
   /*
   /*  end dump;
*/
     end merge_ascii_;
