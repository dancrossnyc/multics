/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


enter_retrieval_request: err: proc;


/* This command  submits retrieval requests to the volume retriever.  It queues these requests
   in one of three queues which the caller may specify(the default queue is 3) in a the directory
   >daemon_dir_dir>volume_backup(except in the test entry case). At some latter time operations will log in the
   retriever and process the requests. */

/*
   Modified by D. Vinograd to improve argument and access checks, use system msg header,
   and support msg ids.
   Modified: August 1983 by GA Texada to fix -to bug (phx13941 phx14299).
*/
dcl  code fixed bin (35);
dcl  ms_count fixed bin;
dcl  long_id bit (1);
dcl  brief bit (1);
dcl  to_specified bit (1);
dcl  rqid char (19);
dcl  narg fixed bin;
dcl  type fixed bin (2);
dcl (bmode, pmode) fixed bin (5);
dcl  i fixed bin;
dcl  ac fixed bin;
dcl  argp ptr;
dcl  argl fixed bin;
dcl  test_dir char (*);
dcl  arg char (argl) based (argp);
dcl  clock_value fixed bin (71);
dcl  prev_arg char (32);
dcl  queue_seg char (32) ;
dcl  q fixed bin;
dcl  dates_array (5) bit (36);

dcl  myname char (32) static int init ("enter_retrieval_request") options (constant);
dcl  retrieval fixed bin int static init (4) options (constant);
dcl  vdtd fixed bin static init (5);
dcl  dtm fixed bin static init (2);

dcl 1 local_retv_request aligned like retv_request;

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$nostars ext fixed bin (35);

dcl  message_segment_$get_message_count_file entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  request_id_ entry (fixed bin (71)) returns (char (19));
dcl  get_ring_ entry returns (fixed bin);
dcl  hcs_$get_user_effmode entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
dcl  hcs_$get_dates entry (char (*) aligned, char (*) aligned, (5) bit (36), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ioa_ entry options (variable);
dcl  message_segment_$add_file entry (char (*), char (*), ptr, fixed bin, bit (36), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  check_star_name_$entry entry (char (*) aligned, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*) aligned, char (*) aligned, fixed bin (35));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

dcl  addr builtin;
dcl  fixed builtin;
dcl  clock builtin;
dcl  substr builtin;
dcl  size builtin;
dcl  bit builtin;

%include queue_msg_hdr;
%include retv_request;
%include retv_data_;
%include status_structures;

	requestp = addr (local_retv_request);		/* initialize */
	long_id = "0"b;
	brief = "0"b;
	to_specified = "0"b;
	retv_request.bits = "0"b;
	retv_request.fixed_bin = 0;
	retv_request.chars = "";
	retv_request.version = retv_request_version_2;
	retv_request.msg_time = clock;
	retv_request.hdr_version = queue_msg_hdr_version_1;
	retv_request.message_type = retrieval;
	retv_request.std_length = size (retv_request);
	retv_request.bit_flags = "0"b;
	retv_request.orig_queue = 3;
	retv_request.state = STATE_UNPROCESSED;

	call cu_$arg_ptr (1, argp, argl, code);		/* get pathname of object/node */
	if code ^= 0 then do;
argerr:	     call com_err_ (0, myname, " Usage is ^a pathname [-subtree] [-from time] [-to time] [-notify] [-queue q] [-new_path pathname] [-multi_segment_file]", myname);
	     goto finish;
	end;
	if substr (arg, 1, 1) = "-" then goto argerr;
	call expand_pathname_ (arg, retv_request.dirname, retv_request.ename, code);
	if code ^= 0 then do;
expand_err:    call com_err_ (code, myname, "^a", arg);
	     goto finish;
	end;
	call check_star_name_$entry (retv_request.ename, code);
	if code ^= 0 then do;
	     call com_err_ (error_table_$nostars, myname, " Use -subtree.");
	     goto finish;
	end;
	call check_access ((retv_request.dirname), (retv_request.ename));
	ac = 1;
	call cu_$arg_count (narg);
	do while (ac < narg);
	     ac = ac + 1;
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
no_next_arg:	call com_err_ (code, myname, "Unable to access argument after ^a", arg);
		return;
	     end;
	     if arg = "-previous" | arg = "-prev" then retv_request.previous = "1"b;
	     else if arg = "-long_id" then long_id = "1"b;
	     else if arg = "-brief" | arg = "-bf" then brief = "1"b;
	     else if arg = "-subtree" | arg = "-subt" | arg = "-multi_segment_file" | arg = "-msf" then
		retv_request.subtree = "1"b;
	     else if arg = "-notify" | arg = "-nt" then retv_request.notify = "1"b;
	     else if arg = "-to" | arg = "-from" | arg = "-fm" then do;
		prev_arg = arg;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_next_arg;
		call convert_date_to_binary_ (arg, clock_value, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "^a", arg);
		     goto finish;
		end;
		if clock_value > clock then do;
		     call com_err_ (0, myname, "Date ^a is in the future", arg);
		     return;
		end;
		if prev_arg = "-to" then do;
		     to_specified = "1"b;
		     retv_request.to_time = clock_value;
		     end;
		else retv_request.from_time = clock_value;
	     end;
	     else if arg = "-queue" | arg = "-q" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_next_arg;
		q = cv_oct_check_ (arg, code);
		if code ^= 0 | (q > 3 | q < 1) then do;
		     call com_err_ (0, myname,
			"Invalid queue number ^a", arg);
		     goto finish;
		end;
		retv_request.orig_queue = q;
	     end;
	     else if arg = "-new_path" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then goto no_next_arg;
		call expand_pathname_ (arg, retv_request.new_dirname, retv_request.new_ename, code);
		if code ^= 0 then goto expand_err;
		call hcs_$status_minf ((retv_request.dirname), (retv_request.ename), 1, type, 0, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "Unable to cross retrieve object.");
		     goto finish;
		end;
		if type = Directory then do;
		     call com_err_ (0, myname, "Directory cross retrieval not allowed.");
		     goto finish;
		end;
		call hcs_$get_user_effmode ((retv_request.dirname), (retv_request.ename), "", get_ring_ (), bmode, code);
		if (bit (bmode) & "01010"b) ^= "01010"b then do;
		     call com_err_ (0, myname, "Incorrect access to segment ^a>^a to cross retrieve.",
			retv_request.dirname, retv_request.ename);
		     goto finish;
		end;
		call hcs_$get_user_effmode ((retv_request.new_dirname), "", "", get_ring_ (), pmode, code);
		if (bit (pmode) & "01010"b) ^= "01010"b then do;
		     call com_err_ (0, myname, "Incorrect access to append to new path ^a.", retv_request.new_dirname);
		     goto finish;
		end;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		goto finish;
	     end;
	end;
	if retv_request.previous & (to_specified | retv_request.from_time ^= 0) then do;
	     call com_err_ (0, myname, "-previous control arg not allowed with -from and or -to");
	     goto finish;
	end;

	if to_specified then
	     if retv_request.to_time < retv_request.from_time then do;
		call com_err_ (0, myname, "-to DATE preceeds -from DATE");
		goto finish;
	     end;

	dates_array (*) = "0"b;
	call hcs_$get_dates (retv_request.dirname, retv_request.ename, dates_array, code);
	if code ^= 0 then do;
	     if retv_request.previous then do;
		call com_err_ (code, myname, "Unable to obtain data about ^a>^a for -previous control arg",
		     retv_request.dirname, retv_request.ename);
		goto finish;
	     end;
	end;
	else do;
	     if (dates_array (dtm) >= dates_array (vdtd)) then do;
		if (retv_request.previous | retv_request.from_time ^= 0 | to_specified) then ;
		else do;
		     call com_err_ (0, myname,
			"More recent copy online. Use -previous or -from or -to if you desire dump copy.");
		     goto finish;
		end;
		if ^to_specified then retv_request.to_time = fixed (dates_array (dtm) || (16) "0"b, 71);
	     end;
	     else if dates_array (vdtd) >= dates_array (dtm) then do;
		if ^to_specified then
		     if retv_request.previous then retv_request.to_time = fixed (dates_array (dtm) || (16) "0"b, 71);
	     end;
	end;
     if ^retv_request.previous & ^to_specified then retv_request.to_time = clock;

	call ioa_$rsnnl ("volume_retriever_^d.ms", queue_seg, i, retv_request.orig_queue); /* select queue and put  message in queue */
	call message_segment_$add_file (queue_dir, queue_seg, requestp, size (retv_request) * 36, "0"b, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Unable to queue retrieval request.");
	     goto finish;
	end;
	if ^brief then do;
	     rqid = request_id_ (retv_request.msg_time);
	     if ^long_id then rqid = substr (rqid, 7, 8);
	     call message_segment_$get_message_count_file (queue_dir, queue_seg, ms_count, code);
	     ms_count = max (0, ms_count-1);
	     call ioa_ ("ID: ^a^[;^x^d already requested.^]", rqid, (code = 0), ms_count);
	end;

finish:
	return;


test:	entry (test_dir);
	queue_dir = test_dir;
	return;

check_access: proc (dirname, ename);
dcl (dirname, ename) char (*);
dcl  tdirname char (168) aligned;
dcl  tename char (32) aligned;
	     call hcs_$status_minf (dirname, ename, 1, type, 0, code);
	     if code ^= 0 then do;
		call expand_pathname_ (dirname, tdirname, tename, code);
		if code ^= 0 then do;
		     call com_err_ (0, myname, "Unable to determine access to object.");
		     goto finish;
		end;
		if tename = "" & tdirname = ">" then do;
		     goto no_acc;
		end;
		call check_access ((tdirname), (tename));
	     end;
	     call hcs_$get_user_effmode (dirname, ename, "", get_ring_ (), bmode, code);
	     call hcs_$get_user_effmode (dirname, "", "", get_ring_ (), pmode, code);
	     if (bit (bmode) & "01010"b) = "01010"b
	     | (bit (pmode) & "01010"b) = "01010"b then return;
	     else do;
no_acc:		call com_err_ (0, myname, "Incorrect access to retrieve object ^a^[>^]^a.",
		     retv_request.dirname, retv_request.dirname ^= ">", retv_request.ename);
		goto finish;
	     end;
	end check_access;
     end enter_retrieval_request;
