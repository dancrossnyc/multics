/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  suffixed_name_							*/
	/*									*/
	/*      This subroutine handles suffixed names.					*/
	/*									*/
	/* E__n_t_r_y:  suffixed_name_$find						*/
	/*									*/
	/*      This entry point attempts to find an entry which is supposed to (but may not)	*/
	/* have a suffixed name.  The entry may be a directory, a segment, or a multi-segment	*/
	/* file.									*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  suffixed_name_$find entry (char(*), char(*), char(*), char(32) aligned,	*/
	/*				fixed bin(2), fixed bin(35));			*/
	/*									*/
	/*      call suffixed_name_$find (directory, entry, suffix, name, type, mode, code);	*/
	/*									*/
	/* 1) directory	name of directory in which entry is to be found.(In)		*/
	/* 2) entry	entry name supplied by user which may or may not have a suffix.(In)	*/
	/* 3) suffix	the suffix which is supposed to be on the entry. It should not	*/
	/*		contain a period (".").(In)					*/
	/* 4) name	name of the entry which was found.(Out)				*/
	/* 5) type	switch indicating the type of entry which was found.(Out)		*/
	/*		1 = segment; 2 = directory; 3 = multi-segment file.		*/
	/* 6) mode	caller's access mode to the entry which was found.(Out)		*/
	/* 7) code	an error code.(Out)						*/
	/*									*/
	/* E__n_t_r_y:  suffixed_name_$make						*/
	/*									*/
	/*      This entry point makes a properly-suffixed name out of a user-supplied name	*/
	/* which may or may not be suffixed.						*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  suffixed_name_$make entry (char(*), char(*), char(*), char(32) aligned,	*/
	/*				fixed bin(35));				*/
	/*									*/
	/*      call suffixed_name_$make (entry, suffix, name, code);			*/
	/*									*/
	/* 1) entry	is the user-supplied entry name.(In)				*/
	/* 2) suffix	is the suffix which is to be appended to the name.(In)		*/
	/* 3) name	is the properly-suffixed name.(Out)				*/
	/* 4) code	is a status code which indicates whether the properly-suffixed name	*/
	/*		will fit into the _p_r_o_p_e_r__n_a_m_e string. (Out)			*/
	/*									*/
	/* E__n_t_r_y:  suffixed_name_$new_suffix						*/
	/*									*/
	/*      This entry point creates a properly-suffixed name from a (possibly-improperly-)	*/
	/* suffixed name supplied by the user.						*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  suffixed_name_$new_suffix entry(char(*), char(*), char(*), char(32) aligned,	*/
	/*				     fixed bin(35));			*/
	/*									*/
	/*      call suffixed_name_$new_suffix (name, suffix, new_suffix, new_name, code);	*/
	/*									*/
	/* 1) name	is the suffixed name returned by suffixed_name_$find.(In)		*/
	/* 2) suffix	is the suffix which is supposed to be on name.(In)		*/
	/* 3) new_suffix	is the new suffix which is to be appended to the name to be made.(In)	*/
	/* 4) new_name	is the name which was made.(Out)				*/
	/* 5) code	is a status code which indicates whether the properly-suffixed new	*/
	/*		name will fit into the _n_e_w__n_a_m_e string. (Out)			*/
	/*									*/
	/* N__o_t_e_s									*/
	/*									*/
	/*      "code" may be any error code returned by hcs_$status_long, except		*/
	/* error_table_$no_s_permission.  "name" will contain a properly-suffixed name, even if	*/
	/* "code" is non-zero.							*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 1) Created:  Nov 1972 by Gary C. Dixon					*/
	/* 2) Modified: Jan 1973 by Gary C. Dixon; add mode argument to find entry point.	*/
	/* 3) Modified: Feb 1973 by Gary C. Dixon; add code argument to make/new_suffix entries.	*/
	/* 4) Modified: Dec 1980 by M. Broussard; fixed to work with names containing imbedded    */
	/*				  blanks.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

suffixed_name_:	procedure;			/* procedure to handle suffixed names.		*/

						/*	parameters			*/
     dcl	directory			char(*),	 	/* absolute directory path of segment to be found	*/
	entry			char(*),		/* entry name to be suffixed.			*/
	suffix			char(*),		/* suffix character string (not including ".")	*/
	new_suffix		char(*),		/* new suffix character string (not including ".")*/
	name			char(32) aligned,	/* properly-suffixed name.			*/
	Stype			fixed bin(2),	/* type of entry which was found.		*/
	mode			fixed bin(5),	/* caller's access mode to the found dir entry.	*/
	code			fixed bin(35);	/* an error code.				*/

						/*	automatic variables			*/
     dcl	Lentry			fixed bin,	/* length of non-blank part of entry.		*/
	Lname			fixed bin,	/* length of a part of non-blank part of name.	*/
	Lnew_suffix		fixed bin,	/* length of non-blank part of new suffix.	*/
	Lsuffix			fixed bin,	/* length of non-blank part of suffix.		*/
	e			fixed bin,	/* an entry point indicator.			*/
	1 stat,					/* a file system status block.		*/
	 (2 type			bit(2),		/* entry type; "01"b=seg, "10"b=dir		*/
	  2 pad1			bit(106),
	  2 mode			bit(5),		/* caller's access to the entry.		*/
	  2 pad2			bit(151),
	  2 bitcnt		bit(24),		/* multi-segment file indicator count.		*/
	  2 pad3			bit(72)) unal;

						/*	entries and builtin functions		*/
     dcl	hcs_$status_long		entry(char(*), char(*) aligned, fixed bin(1), ptr, ptr, fixed bin(35)),
	fixed			builtin,
	index			builtin,
	length			builtin,
	null			builtin,
	rtrim			builtin,
	substr			builtin;

						/*	static variables			*/
     dcl	dir			fixed bin(2) int static init (2),
	error_table_$entlong	fixed bin(35) ext static,
	error_table_$no_s_permission	fixed bin(35) ext static,
	msf			fixed bin(2) int static init (3);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



find:	entry (directory, entry, suffix, name, Stype, mode, code);
						/* find the name of the entry which matches a	*/
						/* suffixed entry name.			*/
	e = 1;
	go to common;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


make:	entry (entry, suffix, name, code);		/* make a suffixed name out of a user-supplied	*/
						/* entry name which may or may not be suffixed.	*/
	e = 2;
	go to common;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



new_suffix:	entry (entry, suffix, new_suffix, name, code);
						/* change the suffix on a (possibly) suffixed	*/
						/* name to a new suffix.			*/
	e = 3;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


common:	Lentry = length (rtrim (entry));
	Lsuffix = length (rtrim (suffix));
						/* find lengths of non-blank parts of char strings*/

	if Lsuffix = 0 then				/* if _s_u_f_f_i_x is null string, then use _e_n_t_r_y as	*/
	     go to use_entry;			/* the suffixed _n_a_m_e.			*/
	else if Lentry < Lsuffix + 1 then		/* if the _s_u_f_f_i_x won't fit in _e_n_t_r_y, then	*/
	     go to add_suffix;			/* assume its not there.			*/
	else if substr (entry, Lentry-Lsuffix, Lsuffix+1) = "." || substr (suffix, 1, Lsuffix) then
						/* otherwise, see if _s_u_f_f_i_x is already on _e_n_t_r_y.	*/
use_entry:     if Lentry <= length(name) then do;		/* if so, and if _e_n_t_r_y isn't too long, then	*/
		name = substr (entry, 1, Lentry);	/* use _e_n_t_r_y as the suffixed _n_a_m_e.		*/
		Lname = Lentry;
		end;
	     else					/* if _e_n_t_r_y won't fit into the _n_a_m_e string, then	*/
		go to long_entry_error;		/* that's an error.  Tell the caller.		*/
	else if Lentry + Lsuffix + 1 <= length(name) then do;
						/* make suffixed _n_a_m_e by appending _s_u_f_f_i_x to 	*/
						/* _e_n_t_r_y, if that will fit.			*/
add_suffix:    name = substr (entry, 1, Lentry) || "." || substr (suffix, 1, Lsuffix);
	     Lname = Lentry + Lsuffix + 1;
	     end;
	else					/* if all else fails, then report error to user.	*/
	     go to long_entry_error;
	go to do(e);				/* perform remainder of processing according to	*/
						/* entry point.				*/

do(1):	call hcs_$status_long (directory, name, 1, addr (stat), null, code);
						/* look for a directory entry with a name of	*/
	if code ^= 0 then				/* _n_a_m_e.					*/
	     if code = error_table_$no_s_permission then;	/* ignore no_s_permission error code. We got what	*/
						/* information we want.			*/
	     else					/* other errors indicate that the directory entry	*/
		return;				/* was not found.				*/
	Stype = fixed (stat.type, 2);			/* convert type to a number.			*/
	mode = fixed (stat.mode, 5);			/* same for access mode.			*/
	if Stype = dir then				/* if its a directory, then			*/
	     if stat.bitcnt then			/* maybe its really an MSF.			*/
		Stype = msf;			/* Ah ha! I was right.			*/
do(2):	code = 0;					/* make sure no error is returned.		*/
	return;

do(3):	Lnew_suffix = length (rtrim (new_suffix));
						/* compute actual length of the _n_e_w__s_u_f_f_i_x.	*/
	if Lsuffix > 0 then				/* if _s_u_f_f_i_x is non-blank, remove _s_u_f_f_i_x from	*/
	     Lname = Lname - Lsuffix;			/* length count of _n_a_m_e (do not include the dot).	*/
	else					/* if there's no suffix, add 1 to the length	*/
	     Lname = Lname + 1;			/* count to make it look like there's a dot.	*/
	if Lnew_suffix = 0 then			/* if _n_e_w__s_u_f_f_i_x is null string, then 		*/
	     substr (name, Lname) = "";		/* return just the non-suffixed part of _n_a_m_e.	*/
	else if Lname + Lnew_suffix <= length(name) then	/* if _n_e_w__s_u_f_f_i_x will fit in _n_a_m_e string, then	*/
						/* return suffixed _n_a_m_e formed by appending the	*/
						/* _n_e_w__s_u_f_f_i_x to non-suffix components of entry.	*/
	     substr (name, Lname) = "." || substr (new_suffix, 1, Lnew_suffix);
						/* (remember, dot is already included in Lname.)	*/
	else					/* if all else fails, then report error to user.	*/
	     go to long_entry_error;
	go to do(2);				/* clear error code and return.		*/
/**/
long_entry_error:					/* report to user that suffixed name won't fit in	*/
	code = error_table_$entlong;			/* _n_a_m_e.					*/
	return;


	end suffixed_name_;
