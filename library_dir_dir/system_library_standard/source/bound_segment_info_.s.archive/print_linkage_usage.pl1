/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_linkage_usage: plu: proc;

/* procedure to print current combined linkage segment
   usage using LOT and ISOT as a guide */

/* originally coded 10/69 by J W Gintell
   modified several times in 1969 and 1970 by JWG
   modified to print out static stuff and convert to v2pl1 SHW 1/31/74
   re-written to handle separate static (via the ISOT) 9/8/75 by M. Weaver
   modified 06/82 by F. W. Martinson to check arguments
*/

dcl (i, j, n, k, owner_segno) fixed bin;
dcl (l, l1, l2, l3, total_static, next_ls, static_lng) fixed bin (18);
dcl (hc_seg_count, highest_segno) fixed bin;
dcl  type fixed bin (2);
dcl  mode fixed bin (5);
dcl  bitcnt fixed bin (24);
dcl  code fixed bin (35);

dcl (p, statp) ptr;

dcl  pathname char (168) aligned;
dcl  entry char (32) aligned;

dcl 1 t (1024) aligned,				/* keeps merged lot and isot */
    2 sect_ptr ptr unaligned,				/* ptr to beginning of section */
    2 segno fixed bin,				/* segment number of section's owner */
    2 sep_stat bit (1) aligned,			/* "1"b->separate static */
    2 sect_type fixed bin;				/* 1->linkage section, 2->static section */

dcl  ti (2000) fixed bin;				/* keeps sorted indices into t */

dcl (baseno, baseptr, bin, bit, convert, divide, fixed, rel, ptr, substr, unspec) builtin;

dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$stack_frame_ptr entry returns (ptr);
dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);
dcl  hcs_$status_mins ext entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35));
dcl  ioa_ entry options (variable);


%include stack_header;


%include lot;

%include linkdcl;


	call cu_$arg_count (n);			/* Make sure there are no arguments */
	if n ^= 0 then do;
	     call com_err_ (0, "print_linkage_usage", " This command takes no arguments.");
	     return;
	end;
						/* Get a pointer to the current stack frame.  From that construct a pointer to the
						   base of the stack.  Then pick up pointers to the LOT and the ISOT from the base of the stack. */

	sb = cu_$stack_frame_ptr ();
	sb = ptr (sb, 0);
	lotp = sb -> stack_header.lot_ptr;
	isotp = sb -> stack_header.isot_ptr;

/* Obtain the range of valid non ring 0 segment numbers. */

	call hcs_$high_low_seg_count (highest_segno, hc_seg_count);
	highest_segno = highest_segno + hc_seg_count;

/* Must end up with a list ordered according to location in the cls.
   First merge LOT and ISOT and initialize the index array used to keep
   track of the sorting.  ASSUME that an isot entry is not filled in unless
   the corresponding lot entry is. */

	total_static,
	     n = 0;

	do i = hc_seg_count+1 to highest_segno;
	     if unspec (lot.lp (i))			/* nonzero lot entry */
	     then if substr (unspec (lot.lp (i)), 1, 2) ^= "11"b then do; /* no packed ptr fault */
		     ti (n+1), n = n+1;
		     t (n).sect_ptr = lot.lp (i);
		     t (n).segno = i;
		     t (n).sect_type = 1;
		     t (n).sep_stat = "0"b;
		     if unspec (isot.isp (i))
		     then if isot.isp (i) ^= lot.lp (i)
			then if substr (unspec (isot.isp (i)), 1, 2) ^= "11"b then do;
						/* not a packed ptr fault */
				t (n).sep_stat = "1"b;
				ti (n+1), n = n+1;
				t (n).sect_ptr = isot.isp (i);
				t (n).segno = i;
				t (n).sect_type = 2;
			     end;
		end;
	end;

	call ioa_ ("^/^/^-Current linkage and static section usage"); /* want linkage fault now */

/* sort merged list by sorting ti */

	do i = 1 to n-1;
	     do j = i to 1 by -1 while (unspec (t (ti (j)).sect_ptr) > unspec (t (ti (j+1)).sect_ptr));
		k = ti (j);
		ti (j) = ti (j+1);
		ti (j+1) = k;
	     end;
	end;

/* now sorted  */

	call ioa_ ("^/^5xsegment^29xlinkage^4xsize^7xstatic^5xsize^/");

	do i = 1 to n;				/* print each entry, sorted */

	     owner_segno = t (ti (i)).segno;		/* copy segment number of section's owner */
	     static_lng = bin (lot.lp (owner_segno) -> header.stats.static_length, 18);

	     if t (ti (i)).sect_type = 2 then go to nope; /* don't print  separately  */

	     call hcs_$fs_get_path_name (baseptr (owner_segno), pathname, j, entry, code);
	     if code ^= 0 then entry = "NOT A LINKAGE SECTION";

/* scan for end of section */
/* p is ptr to base of section
   l is offset of last location in linkage section
   l1 = 0mod(2) value of l
   l2 = offset of beginning of linkage section
   l3 = true length of linkage section
*/

	     p = t (ti (i)).sect_ptr;
	     total_static = total_static + static_lng;

	     l2 = fixed (rel (p), 18);
	     l3 = fixed (p -> header.stats.block_length, 18);
	     l = l2 + l3;
	     l1 = divide (l+1, 2, 18, 0)*2;

	     if t (ti (i)).sep_stat then do;		/* separate static */
		statp = t (ti (i)+1).sect_ptr;
		call ioa_ ("^32a^4o^6o^7o^7o^8o^7o^7o", entry, owner_segno,
		     bin (baseno (p), 18), l2, l3, bin (baseno (statp), 18), bin (rel (statp), 18),
		     static_lng);
	     end;

	     else call ioa_ ("^32a^4o^6o^7o^7o^15x^7o",
		entry, owner_segno, bin (baseno (p), 18), l2, l3, static_lng);

/*
   !* if not at end of sorted list and next entry has unused segno
   then check for unused space *!

   check_for_hole:
   if i = n then go to nope;
   if baseno (t (ti (i)).sect_ptr) ^= baseno (t (ti (i+1)).sect_ptr) then go to nope;
   next_ls = fixed (rel (t (ti (i+1)).sect_ptr), 18);
   if l1 < next_ls then do;
   call ioa_ ("NOT A LINKAGE SECTION               ^6o^7o^7o",
   fixed (baseno (t (ti (i)).sect_ptr), 18), l, next_ls - l);
   end;
*/

nope:	end;

	call ioa_ ("^/Total static = ^o^/", total_static);

     end;
