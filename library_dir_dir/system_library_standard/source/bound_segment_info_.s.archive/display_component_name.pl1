/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 5/28/75 by M. Weaver to convert to v2pl1 and remove search of non-text sections */
/* Modified 761227 by PG to remove ibm entry & call expand_pathname_ */
/* Modified October 1979 by Larry Johnson to take octal segment numbers */

display_component_name: dcn:
     procedure options (variable);

/* entries */

declare  com_err_ external entry options (variable);
declare  cu_$arg_count external entry () returns (fixed bin);
declare  cu_$arg_ptr external entry (fixed bin, pointer, fixed bin, fixed bin (35));
declare  get_bound_seg_info_ ext entry (pointer, fixed bin (24), pointer, pointer, pointer, fixed bin (35));
declare  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
declare  cv_oct_check_ external entry (char (*), fixed bin (35)) returns (fixed bin);
declare  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24),
         fixed bin, pointer, fixed bin (35));
declare  hcs_$terminate_noname ext entry (pointer, fixed bin (35));
declare  ioa_ external entry options (variable);
declare  hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));

/* external static */

dcl  error_table_$dirseg ext fixed bin (35);
dcl  error_table_$bad_segment ext fixed bin (35);
dcl  error_table_$not_bound ext fixed bin (35);

/* automatic */

declare (i, j, nargs, nopts, arg_lng) fixed bin;
declare (k, l, value, lng) fixed bin (18);
dcl  wordcount fixed bin (18);
declare  bitcount fixed bin (24);
declare  code fixed bin (35);
declare (p, argp, objp, bmp, sblkp) pointer;
declare  dirname char (168);
declare  objname char (32);
dcl  segno_given bit (1);
dcl  segno fixed bin;
dcl  seg_type fixed bin (2);
dcl  argno fixed bin;
dcl  msg char (16) var;

declare 1 oi aligned like object_info;

declare 1 comp (16) aligned,
        2 c_offset fixed bin,
        2 found fixed bin;

/* builtins */

declare (addr, addrel, binary, divide, null) builtin;

/* internal static */

declare  errname char (22) internal static options (constant) initial ("display_component_name");

/* based */

declare  var_string char (lng) based (p);
declare  argname char (arg_lng) unaligned based (argp);

/* include files */

%include bind_map;
%include object_info;

/* program */

	nopts = 0;
	nargs = cu_$arg_count ();
	segno_given = "0"b;
	argno = 1;

	call cu_$arg_ptr (argno, argp, arg_lng, code);
	if code ^= 0 then do;
usage:	     call com_err_ (code, errname, "Usage: ^a path offset1 ..... offset16", errname);
	     return;
	end;
	segno = cv_oct_check_ (argname, code);		/* check for octal segment number */
	if code = 0 then segno_given = "1"b;
	else if argname = "-name" | argname = "-nm" then do;
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, arg_lng, code);
	     if code ^= 0 then go to usage;
	     else go to path;
	end;
	else do;
path:	     call expand_pathname_ (argname, dirname, objname, code);
	     if code ^= 0 then do;
		call com_err_ (code, errname, "^a", argname);
		return;
	     end;
	end;

	argno = argno + 1;
	if argno > nargs then go to usage;

	do while (argno <= nargs);
	     call cu_$arg_ptr (argno, argp, arg_lng, code);
	     nopts = nopts + 1;
	     if nopts > hbound (comp, 1) then do;
		call com_err_ (0, errname, "Too many offsets specified.");
		return;
	     end;
	     comp (nopts).c_offset = cv_oct_check_ (argname, code);
	     if code ^= 0 then do;
		call com_err_ (0, errname, "Invalid octal number: ^a", argname);
		return;
	     end;
	     comp (nopts).found = 0;
	     argno = argno + 1;
	end;

	if segno_given then do;
	     objp = baseptr (segno);
	     call hcs_$fs_get_path_name (objp, dirname, (0), objname, code);
	     if code ^= 0 then do;
		call com_err_ (code, errname, "Unable to get pathname for segment ^o.", segno);
		return;
	     end;
	     call hcs_$status_mins (objp, seg_type, bitcount, code);
	     if code ^= 0 then do;
segerr:		call com_err_ (code, errname, "^a^[>^]^a", dirname, (dirname ^= ">"), objname);
		return;
	     end;
	     if seg_type = 2 then do;
		code = error_table_$dirseg;
		go to segerr;
	     end;
	end;
	else do;
	     call hcs_$initiate_count (dirname, objname, "", bitcount, 0, objp, code);
	     if objp = null () then do;
		call com_err_ (code, errname, "^a^[>^]^a", dirname, (dirname ^= ">"), objname);
		return;
	     end;
	end;

	wordcount = divide (bitcount + 35, 36, 18, 0);
	oi.version_number = object_info_version_2;
	call get_bound_seg_info_ (objp, bitcount, addr (oi), bmp, sblkp, code);
						/* get ptrs to bindmap and symbol section */
	if code ^= 0 then do;			/* can't find bindmap */
	     if code = error_table_$bad_segment then do;
		msg = "non object";
		go to special_scan;
	     end;
	     if code = error_table_$not_bound then do;
		msg = "not bound";
		go to special_scan;
	     end;
	     call com_err_ (code, errname, "^a>^a", dirname, objname);
	     goto return_noline;
	end;

	do i = 1 to nopts;
	     value = comp (i).c_offset;		/* get desired offset */
	     do j = 1 to n_components;
		k = binary (component (j).text_start, 18);
		l = binary (component (j).text_lng, 18);
		if value >= k & value < k+l then do;
		     p = addrel (sblkp, component (j).name_ptr);
		     lng = binary (component (j).name_lng, 18);
		     call ioa_ ("^6o^-^a|^o", value, var_string, value-k);
		     comp (i).found = 1;
		     goto next;
		end;
	     end;
	     if value < wordcount then do;
		call ioa_ ("^6o^-^a|^o (not in text)", value, objname, value);
		comp (i).found = 1;
	     end;
next:
	end;

check_errors:
	do i = 1 to nopts;				/* rescan option table */
	     if comp (i).found = 0 then do;
		if comp (i).c_offset <= wordcount
		then call com_err_ (0, errname, "Offset ^o not in text section^[ of ^a^[>^]^a^;^3s^]", comp (i).c_offset,
		     segno_given, dirname, (dirname ^= ">"), objname);
		else call com_err_ (0, errname, "Offset ^o out of bounds^[ in ^a^[>^]^a^;^3s^]", comp (i).c_offset,
		     segno_given, dirname, (dirname ^= ">"), objname);
	     end;
	end;
return_noline:
	if objp ^= null then if ^segno_given then call hcs_$terminate_noname (objp, code);
	return;

special_scan:
	do i = 1 to nopts;
	     if comp (i).c_offset < wordcount then do;
		call ioa_ ("^6o^-^a|^o (^a)", comp (i).c_offset, objname, comp (i).c_offset, msg);
		comp (i).found = 1;
	     end;
	end;
	go to check_errors;

     end display_component_name;
