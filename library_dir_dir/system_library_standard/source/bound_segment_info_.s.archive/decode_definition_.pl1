/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Decode Definition - internal subroutine to return the information contained
   in a given object segment definition, in an explicit and directly-accessible format.

   Designed and initially coded by Michael J. Spier, March 29, 1971 	*/
/* Modified 1972 by R. Barnes to add $full entrypoint */
/* Modified May 1981 by M. Weaver to make $full not mess up static variables */


decode_definition_:	procedure(definition_ptr, structure_ptr, code);

declare	(definition_ptr, structure_ptr) pointer, code bit(1) aligned;

	/* DECLARATION OF EXTERNAL SYMBOLS */

declare	object_info_$brief external entry(pointer,fixed bin(24),pointer,fixed bin(35));
declare	hcs_$status_mins entry(ptr, fixed bin, fixed bin(24), fixed bin(35));

	/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	section_table(0:4) char(4) internal static initial("text","link","symb","segn", "stat");
declare	(segbase,static_defbase,static_linkbase) pointer internal static initial(null);
declare	(initialize, bitcount) fixed bin(24) internal static initial(0);

	/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, lng) fixed bin;
declare	err_code fixed bin(35);
declare	ret_acc bit(1) aligned init("0"b);
declare	fullsw bit(1) aligned;
declare	(argp, dp, acc_ptr, linkp, oip, oi_ptr) pointer;
declare	(defbase, linkbase) pointer;
declare	based_bit bit(36) based;
declare	oi_area(50) fixed bin(35);		/* for automatic version of oi structure */


	/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, baseno, bin, fixed, null, rel, substr) builtin;

	/* DECLARATION OF BASED STRUCTURES */

declare	1 short_dd aligned based(argp),
	2 snext_def pointer,			/* pointer to next definition in list */
	2 slast_def pointer,			/* pointer to previous definition in list */
	2 sblock_ptr pointer,		/* pointer to either defblock or segname block */
	2 ssection char(4) aligned,		/* "text", "link", "symb" or "segn"   */
	2 soffset fixed bin,			/* offset within class (if ^= "segn")   */
	2 sentrypoint fixed bin,		/* value of entrypoint in text if ^= 0   */
	2 ssymbol char(32) aligned;		/* the symbolic name of the definition  */

declare	1 dd aligned based(argp),		/* structure filled in by full entry */
	2 next_def ptr,			/* ptr to next definition in list */
	2 last_def ptr,			/* ptr to previous definition in list */
	2 block_ptr ptr,			/* ptr to either defblock or segname block */
	2 section char(4) aligned,		/* "text", "link", "symb" or "segn" */
	2 offset fixed bin,			/* offset within class (if ^= "segn") */
	2 entrypoint fixed bin,		/* value of entrypoint in text if ^= 0 */
	2 symbol char(256) aligned,		/* the symbolic name of the definition */
	2 symbol_lng fixed bin,		/* the actual length of symbol */
	2 flags,				/* same flags as in std def */
	  3 a_new_format bit(1) unaligned,	/* def is in new format */
	  3 a_ignore bit(1) unaligned,	/* linker should ignore this def */
	  3 a_entrypoint bit(1) unaligned,	/* def is for entrypoint */
	  3 a_retain bit(1) unaligned,
	  3 a_arg_count bit(1) unaligned,	/* there is an arg count for entry */
	  3 a_descr_sw bit(1) unaligned,	/* there are valid descriptors for entry */
	  3 unused bit(12) unaligned,
	2 n_args fixed bin,			/* # of args entry expects */
	2 descr_ptr ptr;			/* ptr to array of rel ptrs to descriptors for entry */

declare 1 acc_structure aligned based(argp),
	2 next_defx ptr,			/* pointer to next definition in list */
	2 last_defx ptr,			/* pointer to previous definition in list */
	2 block_ptrx ptr,		/* pointer to either defblock or segname block */
	2 sectionx char(4) aligned,		/* "text", "link", "symb" or "segn"   */
	2 offsetx fixed bin,			/* offset within class (if ^= "segn")   */
	2 entrypointx fixed bin,		/* value of entrypoint in text if ^= 0   */
	2 ret_acc_ptr ptr;			/* Pointer to ACC representation of string */

declare	1 definition based(dp) aligned,
	2 forward bit(18) unaligned,
	2 backward bit(18) unaligned,
	2 value bit(18) unaligned,
	2 flags unaligned,
	  3 new_def bit(1) unaligned,
	  3 ignore bit(1) unaligned,
	  3 entrypoint bit(1) unaligned,
	  3 retain bit(1) unaligned,
	  3 arg_count bit(1) unaligned,
	  3 descr_sw bit(1) unaligned,
	  3 dum bit(9) unaligned,
	2 class bit(3) unaligned,
	2 string_ptr bit(18) unaligned,
	2 segname_ptr bit(18) unaligned,
	2 nargs bit(18) unaligned,
	2 descriptor(bin(nargs,18)) bit(18) unaligned;

declare	1 eax(3) aligned based(linkp),
	2 location bit(18) unaligned,
	2 op_code bit(6) unaligned;

declare	1 linkheader aligned based(linkbase),
	2 defseg fixed bin,
	2 defoffset bit(18) unaligned,
	2 dum1 bit(18) unaligned,
	2 block_thread pointer,
	2 dum2 pointer,
	2 link_begin bit(18) unaligned,
	2 sect_lng bit(18) unaligned;

declare	1 class_3_def based(dp) aligned,
	2 dum1 bit(36) aligned,
	2 next_class3 bit(18) unaligned,
	2 dum2 bit(36) unaligned,
	2 defblock_ptr bit(18) unaligned;

declare	1 acc aligned based(acc_ptr),
	2 lng bit(9) unaligned,
	2 dum1 bit(27) unaligned;

declare	acc_string char(33) aligned based(acc_ptr);

declare	delimitor fixed bin based(dp);

/*  */


declare	1 oi aligned based(oip) like object_info;

%include object_info;



declare	1 old_oi aligned based(oip),		/* structure containing object info, returned by object_info_ */
	2 version_number fixed bin,		/* version number of current structure format */
	2 textp pointer,			/* pointer to beginning of text section */
	2 defp pointer,			/* pointer to beginning of definition section */
	2 linkp pointer,			/* pointer to beginning of linkage section */
	2 symbp pointer,			/* pointer to beginning of symbol section */
	2 bmapp pointer,			/* pointer to beginning of break map (may be null) */
	2 tlng fixed bin,			/* length in words of text section */
	2 dlng fixed bin,			/* length in words of definition section */
	2 llng fixed bin,			/* length in words of linkage section */
	2 slng fixed bin,			/* length in words of symbol section */
	2 blng fixed bin,			/* length in words of break map */
	2 format,				/* word containing bit flags about object type */
	  3 old_format bit(1) unaligned,	/* on if segment isn't in new format, i.e. has old style object map */
	  3 bound bit(1) unaligned,		/* on if segment is bound */
	  3 relocatable bit(1) unaligned,	/* on if seg has relocation info in its first symbol block */
	  3 procedure bit(1) unaligned,	/* on if segment is an executable object program */
	  3 standard bit(1) unaligned,	/* on if seg is in standard format (more than just standard map) */
	  3 gate bit(1) unaligned,		/* on if segment is a gate */
	  3 no_old_alm bit(1) unaligned,	/* if bound, means there are no old format alm components (temp.) */
	2 call_delimiter fixed bin,		/* call delimiter if segment is a gate */

	/* LIMIT OF BRIEF STRUCTURE */

	2 compiler char(8) aligned,		/* name of processor which generated segment */
	2 compile_time fixed bin(71),		/* clock reading of date/time object was generated */
	2 userid char(32) aligned,		/* standard Multics id of creator of object segment */
	2 cvers aligned,			/* generator version name in printable char string form */
	  3 offset bit(18) unaligned,		/* offset of name in words relative to base of symbol section */
	  3 length bit(18) unaligned,		/* length of name in characters */
	2 comment aligned,			/* printable comment concerning generator or generation of segment */
	  3 offset bit(18) unaligned,		/* offset of comment in words relative to base of symbol section */
	  3 length bit(18) unaligned,		/* length of comment in characters */
	2 source_map fixed bin,		/* offset, relative to base of symbol section, of source map structure */

	/* LIMIT OF DISPLAY STRUCTURE */

	2 rel_text pointer,			/* offset rel to base of symbol section of text sect. relocation info */
	2 rel_def pointer, 			/* offset relative to symbp of definition section relocation info */
	2 rel_link pointer,			/* offset relative to symbp of linkage section relocation info */
	2 rel_symbol pointer,		/* offset relative to symbp of symbol section relocation info */
	2 text_boundary fixed bin,		/* specifies mod  of text section base boundary */
	2 static_boundary fixed bin,		/* specifies mod of internal static base boundary */
	2 default_truncate fixed bin,		/* offset rel to symbp for binder to automatically trunc. symb sect. */
	2 optional_truncate fixed bin;	/* offset rel to symbp for binder to optionally trunc. symb sect. */



/**/


	fullsw = "0"b;
	oip = addr(oi_area);		/* initialize for original entries */
	argp = structure_ptr;		/* copy arguments into stack */
	dp = definition_ptr;		/* ... */
	if initialize = 1 then
	do;
	     if baseno(dp) = baseno(segbase) then goto get_object_info;
	     initialize,
	     bitcount = 0;
	     segbase = null;
	end;
	if rel(dp) = "0"b then		/* initialization, locate first def */
	do;
	     segbase = dp;
	     call hcs_$status_mins(segbase,i,bitcount,err_code);
	     if err_code ^= 0 then goto no_definition;

get_object_info:
	     oi.version_number = object_info_version_2;
	     call object_info_$brief(segbase,bitcount,oip,err_code);
	     if err_code ^= 0 then goto no_definition;
	     static_linkbase = oi.linkp;
	     dp,
	     static_defbase = oi.defp;
	     if oi.format.standard = "1"b then dp = addrel(static_defbase,forward);
					/* skip definition section header */
	     else if ^oi.format.old_format then go to no_definition;
						/* don't attempt to process non-standard new format segs */
	     initialize = 0;
	end;

nonreentrant_join:
	defbase = static_defbase;			/* copy so $full doesn't use static variables */
	linkbase = static_linkbase;

loop:
	code = "0"b;				/* preset error code */

	if dp = null then goto no_definition;
	if delimitor = 0 then		/* end of definition thread */
	do;
no_definition:
	     code = "1"b;			/* EOF */
	     return;
	end;

	next_def = addrel(defbase, forward);	/* pointer to next def on list */
	last_def,
	block_ptr = null;			/* temporarily preset to null */
	dd.offset,
	dd.entrypoint = 0;			/* temporarily preset to zero */
	i = fixed(class, 3);		/* get class code, convert to fixed bin */
	section = section_table(i);		/* get symbolic section code */

	if section ^= "segn" then		/* its a regular definition */
	     dd.offset = fixed(value, 18);	/* compute value of definition */

	if section = "link" then if dd.offset >= fixed(link_begin, 18) then
	do;				/* this seems to be an entrypoint */
	     linkp = addrel(linkbase, dd.offset);	/* pointer to entry sequence */
	     if eax(1).op_code = "110010"b then dd.entrypoint = fixed(eax(1).location, 18);
	     else if eax(3).op_code = "110010"b then dd.entrypoint = fixed(eax(3).location, 18);
	end;

	if ignore = "1"b then if ^fullsw then
	do;				/* ignore this definition */
	     dp = next_def;			/* follow thread */
	     goto loop;
	end;

	if definition.flags.new_def then if section = "text"
	then if definition.flags.entrypoint = "1"b
	then dd.entrypoint = dd.offset;		/* have standard entrypoint in text */

	if definition.flags.new_def then acc_ptr = addrel(defbase, string_ptr);	/* new definition format */
	else acc_ptr = addrel(dp, 2);		/* pointer to symbol */

	if ret_acc then ret_acc_ptr = acc_ptr;
	else do;
	     lng = fixed(acc.lng, 9);		/* length of ACC string */
	     if fullsw then symbol = substr(acc_string, 2, lng);
	     else ssymbol = substr(acc_string, 2, lng);	/* get string, convert to fixed format */
	end;

	if fullsw then do;
	     symbol_lng = lng;		/* fill in actual symbol length */
	     n_args = 0;			/* initialize */
	     descr_ptr = null;
	     if definition.flags.new_def then do;		/* there is more info */
		addr(dd.flags)->based_bit = substr(addr(definition.flags)->based_bit,1,15);
		if definition.flags.arg_count then do;
		     n_args = fixed(nargs,18);
		     descr_ptr = addr(definition.descriptor(1));
		end;
	     end;
	     else addr(dd.flags)->based_bit = "0"b;
	end;

	if definition.flags.new_def = "0"b then return;	/* that's all for old def format */

	last_def = addrel(defbase, backward);	/* pointer to previous def on list */
	block_ptr = addrel(defbase, defblock_ptr);	/* pointer to related block */


	return;

init:	entry(segment_pointer, segment_bitcount);

declare	segment_pointer pointer, segment_bitcount fixed bin(24);

	segbase = segment_pointer;
	bitcount = segment_bitcount;
	initialize = 1;

	return;


decode_cref: entry(definition_ptr, structure_ptr, code, link_ptr);

declare	link_ptr pointer;

	ret_acc = "1"b;			/* Set flag saying return pointer to ACC string */
	fullsw = "0"b;			/* want smaller amount of information */
	argp = structure_ptr;		/* Copy args */
	dp = definition_ptr;
	linkp = link_ptr;
	if linkp ^= null
	then do;
	     static_defbase = dp;
	     static_linkbase = linkp;
	end;

	go to nonreentrant_join;


full:	entry(definition_ptr, structure_ptr, oi_ptr, code);

	fullsw = "1"b;

	/* initialize oip each time; object info is passed each time to avoid
	   using internal static, thus enabling this procedure to be called
	   concurrently for 2 different sets of definitions */

	oip = oi_ptr;
	argp = structure_ptr;
	dp = definition_ptr;			/* must initialize at this entry */
	if oi.version_number = 2 then do;	/* use new structure */
	     linkbase = oi.linkp;
	     defbase = oi.defp;
	     if oi.format.standard then do;
		if dp = defbase		/* first def is dummy */
		     then dp = addrel(defbase,forward);  /* skip over it */
	     end;
	     else if ^oi.format.old_format then go to no_definition;	/* unrecognizable format */
	end;
	else do;				/* use old structure */
	     linkbase = old_oi.linkp;
	     defbase = old_oi.defp;
	     if old_oi.format.standard then do;
		if dp = defbase		/* first def is dummy */
		     then dp = addrel(defbase,forward);  /* skip over it */
	     end;
	     else if ^old_oi.format.old_format then go to no_definition;	/* unrecognizable format */
	end;

	go to loop;			/* have done all necessary initialization */

end	decode_definition_;
