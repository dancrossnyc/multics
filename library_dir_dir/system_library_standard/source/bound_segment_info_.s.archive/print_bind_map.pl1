/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Print Object Map - Command to display the bindmap of a segment bound by the
   new Binder.
   Designed and Initially coded by Michael J. Spier, May 3, 1971
   Modified 01/22/82 by E. N. Kittlitz. added -page_offset */

/* format: style4 */
print_bind_map:
pbm:
     procedure;


/* DECLARATION OF EXTERNAL ENTRIES */

declare  com_err_ external entry options (variable);
declare  cv_oct_check_ external entry (char (*), fixed bin (35)) returns (fixed bin);
declare  cv_dec_check_ external entry (char (*), fixed bin (35)) returns (fixed bin);
declare  cu_$arg_count external entry (fixed bin, fixed bin (35));
declare  cu_$arg_ptr external entry (fixed bin, pointer, fixed bin, fixed bin (35));
declare  date_time_ external entry (fixed bin (71), char (*));
declare  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
declare  form_bind_map_ external entry (pointer, fixed bin (35));
declare  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
declare  hcs_$initiate external entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
declare  ioa_ external entry options (variable);
declare  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
declare  iox_$user_output ext ptr;
declare  hcs_$terminate_noname external entry (ptr, fixed bin (35));
declare  pathname_ entry (char(*), char(*)) returns(char(168));
declare  release_temp_segment_ entry (char (*), ptr, fixed bin (35));

/* DECLARATIONS OF EXTERNAL STATIC VARIABLES */

declare  (
         error_table_$noarg,
         error_table_$too_many_args
         ) external fixed bin (35);

/* DECLARATIONS OF BUILTIN FUNCTIONS */

declare  (addr, clock, divide, null) builtin;

/* DECLARATIONS OF CONDITIONS */

declare  cleanup condition;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare  (i, nargs, curarg, arg_lng, value) fixed bin;
declare  code fixed bin (35);
declare  (p, argp, valptr) pointer;
declare  (
         objname char (32),
         dirname char (168),
         pathname char (168)
         );
declare  errname char (16);
declare  date char (24);
declare  (have_pathname, name_string, option) bit (1) aligned;

declare  1 x aligned,
	 2 objp pointer,				/* pointer to object segment */
	 2 listp pointer,				/* pointer to list segment */
	 2 list_bc fixed bin (24),			/* list segment bitcount */
	 2 flags aligned,				/* option indicators */
	   3 pad bit (33) unaligned,			/* this field used to be fixed bin */
	   3 page_offset bit (1) unaligned,		/* 1 -> show page number; */
	   3 no_header bit (1) unaligned,		/* 1 -> do not print header */
	   3 long bit (1) unaligned,			/* 1 -> long option; 0 -> short option */
	 2 nopts fixed bin,				/* number of options */
	 2 op (16) aligned,
	   3 opt_name char (32) aligned,		/* name of option component */
	   3 opt_offset fixed bin,			/* offset option */
	   3 name_sw bit (1) unaligned,		/* 0 -> offset; 1 -> segname */
	   3 found bit (1) unaligned;			/* preset to 0  */


/* DECLARATION OF BASED STRUCTURES */

declare  argname char (arg_lng) unaligned based (argp);
declare  1 b0 aligned based (valptr),
	 2 dum char (3) unaligned,
	 2 valchar char (1) unaligned;



/**/

	errname = "print_bind_map";

start:
	valptr = addr (value);
	objp, listp = null;

	on cleanup call clean_up;

	list_bc, value, nopts = 0;

	page_offset, long, no_header, name_string, have_pathname, option = "0"b;
	pathname = "";

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, errname);
	     return;
	end;
	if nargs = 0 then do;			/* must have at least bound_name */
give_usage:
	     call com_err_ (0, errname, "Usage: print_bind_map pathname {-control_args}");
	     return;
	end;

	do curarg = 1 to nargs;
	     call cu_$arg_ptr (curarg, argp, arg_lng, code);
	     if code ^= 0 then do;
		call com_err_ (code, errname);
		return;
	     end;
	     if name_string then
		go to name_arg;			/* if this follows -name */
	     else if char (argname, 1) ^= "-" then do;
		if ^have_pathname then do;		/* must be the bound object name */
		     call expand_pathname_ (argname, dirname, objname, code);
		     if code ^= 0 then do;
			call com_err_ (code, errname, argname);
			goto return;
		     end;
		     pathname = pathname_ (dirname, objname);
		     have_pathname = "1"b;
		end;
		else do;				/* must be a component name/offset */
name_arg:
		     option = "1"b;
		     nopts = nopts + 1;
		     if nopts > hbound (op, 1) then do;
			call com_err_ (error_table_$too_many_args, errname,
			     "At most ^d components may be specified.", hbound (op, 1));
			return;
		     end;
		     op (nopts).found = "0"b;
		     if name_string = "1"b then do;	/* this arg is a name */
			name_string = "0"b;		/* don't inflict this on rest of args */
			go to char_string;
		     end;
		     op (nopts).opt_name = " ";
		     op (nopts).opt_offset = cv_oct_check_ (argname, code);
		     if code ^= 0 then do;
			i = cv_dec_check_ (argname, code);
						/* see if it's decimal */
			if code ^= 0 then
			     goto char_string;
			call com_err_ (0, errname, "^a is not an octal number", argname);
			nopts = nopts - 1;		/* reset index */
			goto get_next;
		     end;
		     op (nopts).name_sw = "0"b;
		     goto get_next;
char_string:
		     op (nopts).opt_name = argname;
		     op (nopts).opt_offset = 0;
		     op (nopts).name_sw = "1"b;

		end;
	     end;
	     else if argname = "-nm" | argname = "-name" then
		name_string = "1"b;			/* remember next string is a name */
	     else if argname = "-lg" | argname = "-long" then
		long = "1"b;
	     else if argname = "-nhe" | argname = "-no_header" then
		no_header = "1"b;
	     else if argname = "-page_offset" | argname = "-pgofs" then
		page_offset = "1"b;
get_next:
	end;

	if ^have_pathname then
	     go to give_usage;

	if name_string then do;
	     call com_err_ (error_table_$noarg, errname, "-name must be followed by an argument.");
	     return;
	end;

	if option = "1"b then
	     if nopts = 0 then
		return;

	call hcs_$initiate (dirname, objname, "", 0, 0, objp, code);
	if objp = null then do;
	     call com_err_ (code, errname, pathname);
	     goto return;
	end;

	call get_temp_segment_ (errname, listp, code);
	if code ^= 0 then do;
	     call com_err_ (code, errname, "cannot get temporary segment.");
	     goto return;
	end;

	call form_bind_map_ (addr (x), code);		/* go format bindmap into list segment */
	if code ^= 0 then do;			/* file system error */
	     call com_err_ (code, errname, pathname);
	     goto return;
	end;
	if ^no_header then do;			/* print title only with header */
	     call date_time_ ((clock ()), date);
	     call ioa_ ("^/^-^-^a^4x^a", objname, date);
	end;
	call iox_$put_chars (iox_$user_output, listp, divide (list_bc, 9, 21, 0), code);


return:	call clean_up;


clean_up: procedure;
	if objp ^= null then
	     call hcs_$terminate_noname (objp, code);
	if listp ^= null then
	     call release_temp_segment_ (errname, listp, code);
     end;


     end print_bind_map;
