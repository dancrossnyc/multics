/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


date_compiled: dtc: proc;

/* DATE_COMPILED - useful program tells when object was compiled. */
/* Modified 08/04/83 by Jim Lippard to print error message when specified
   component of a bound object is not found, to accept archive components,
   and to upgrade code */
/* Modified 06/02/84 by Jim Lippard to not print octal garbage when bad
   pathnames are given and to reject starnames */


/****^  HISTORY COMMENTS:
  1) change(85-09-05,Spitzer), approve(85-09-05,MCR7267),
     audit(85-12-10,Lippard), install(85-12-16,MR12.0-1001):
     1) Bugfix to AF use
     so it won't display an error when it finds a match.  2) Use all segnames
     when given a bound component, rather than only the primary segname.
  2) change(85-12-19,Spitzer), approve(85-12-19,MCR7267),
     audit(85-12-19,Martinson), install(85-12-19,MR12.0-1003):
     Revoke changes made for 1).
  3) change(86-02-19,Spitzer), approve(86-02-19,PBF7267),
     audit(86-03-12,Lippard), install(86-03-17,MR12.0-1031):
     PBF to 1025.
  4) change(86-08-04,Lippard), approve(86-08-04,PBF7267),
     audit(86-08-06,Hartogs), install(86-08-07,MR12.0-1121):
     Print error message correctly for case when entry point is not found
     in bound segment or archive.
  5) change(86-08-06,Elhard), approve(86-08-06,MCR7457),
     audit(86-08-21,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to extract dates from all components of an object MSF.
  6) change(90-04-20,Vu), approve(90-04-20,MCR8172), audit(90-06-04,Blackmore),
     install(90-07-17,MR12.4-1021):
     date_compiled prints more than what is asked for.
                                                   END HISTORY COMMENTS */


	dcl     ME		 char (13) internal static options (constant) init ("date_compiled");
	dcl     dname		 char (168),
	        ename		 char (32),
	        cname		 char (32),
	        (idx, jdx)		 fixed bin,
	        bitc		 fixed bin (24),
	        (long, brief)	 bit (1),
	        firstarg		 bit (1),
	        archive		 bit (1),
	        msf		 bit (1),
	        nsr		 fixed bin,
	        nargs		 fixed bin,
	        an		 fixed bin,
	        ap		 ptr,
	        al		 fixed bin,
	        arg		 char (al) unaligned based (ap),
	        fb71u		 fixed bin (71) unal based,
	        code		 fixed bin (35),
	        rvp		 ptr,
	        rvl		 fixed bin,
	        rv		 char (rvl) var based (rvp),
	        afsw		 bit (1),
	        seg_ptr		 ptr,
	        comp_ptr		 ptr,
	        comp_bc		 fixed bin (24),
	        comp_name		 char (32),
	        eof		 bit (1) aligned;

	dcl     1 search		 (25) aligned,
		2 name		 char (32),
		2 found		 bit (1);

	dcl     (addr, null, substr, fixed, hbound, index, addrel, reverse, rtrim) builtin;

	dcl     complain		 entry variable options (variable);
	dcl     check_star_name_$path	 entry (char(*), fixed bin(35)),
	        cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	        cu_$arg_count	 entry (fixed bin, fixed bin (35)),
	        cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	        decode_definition_	 entry (ptr, ptr) returns(bit(1) aligned),
                  decode_definition_$full entry (ptr, ptr, ptr) returns (bit (1) aligned),
	        expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	        ioa_		 entry options (variable),
	        date_time_		 entry (fixed bin (71), char (*)),
	        active_fnc_err_	 entry options (variable),
	        com_err_		 entry options (variable);

	dcl     archive_$next_component entry (ptr, fixed bin (24), ptr, fixed bin (24), char (*), fixed bin (35));

	dcl     pathname_$component	 entry (char (*), char (*), char (*)) returns (char (194));
	dcl     pathname_		 entry (char(*), char(*)) returns(char(168));
	dcl     error_table_$badopt	 fixed bin (35) ext;
	dcl     error_table_$noarg	 fixed bin (35) ext;
	dcl     error_table_$nostars	 fixed bin (35) ext;
	dcl     error_table_$not_act_fnc fixed bin (35) ext;
	dcl     error_table_$too_many_args fixed bin (35) ext;

	dcl     get_system_free_area_	 entry() returns(ptr);
	dcl     hcs_$get_bc_author	 entry (char (*), char (*), char (*), fixed bin (35));

	dcl     object_lib_$initiate	 entry (char(*), char(*), char(*), bit(1), ptr, fixed bin(24), bit(1), fixed bin(35));
	dcl     object_lib_$get_component_info
				 entry (ptr, ptr, char(8), char(*), ptr, fixed bin(35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	dcl     object_info_$display	 entry (ptr, fixed bin (24), ptr, fixed bin (35)),
	        get_bound_seg_info_	 entry (ptr, fixed bin (24), ptr, ptr, ptr, fixed bin (35));

	dcl     TRUE		 bit (1) internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) internal static options (constant) init ("0"b);

/* ======================================================= */

	long, brief, archive = FALSE;
	firstarg = TRUE;
	nsr = 0;

	call cu_$af_return_arg (nargs, rvp, rvl, code);
	if code = error_table_$not_act_fnc then afsw = FALSE; else afsw = TRUE;
	if afsw then complain = active_fnc_err_;
	else do;
		complain = com_err_;
		call cu_$arg_count (nargs, code);
	     end;
	if nargs = 0 then do;
		call complain (error_table_$noarg, ME, "path");
		return;
	     end;
	do an = 1 to nargs;
	     call cu_$arg_ptr (an, ap, al, code);
	     if index (arg, "-") = 1 then do;
		     if arg = "-long" | arg = "-lg" then long = TRUE;
		     else if arg = "-brief" | arg = "-bf" then brief = TRUE;
		     else do;
			     call complain (error_table_$badopt, ME, arg);
			     return;
			end;
		end;
	     else if firstarg then do;
		     firstarg = FALSE;

		     call expand_pathname_$component (arg, dname, ename, cname, code);
		     if code ^= 0 then do;
			     call complain (code, ME, "^a", arg);
			     return;
			end;

		     call check_star_name_$path (ename, code);

		     if code ^= 0 then do;
have_star:		     if (code = 1) | (code = 2) then
				call complain (error_table_$nostars, ME, "^a", arg);
			     else call complain (code, ME, "^a", arg);
			     return;
			end;

		     if cname ^= "" then do;
			     call check_star_name_$path (cname, code);
			     if code ^= 0 then go to have_star;

			     nsr = 1;
			     search.name (nsr) = cname;
			end;
		end;
	     else do;				/* search arg */
		     nsr = nsr + 1;
		     if nsr > hbound (search, 1) then do;
			     call complain (error_table_$too_many_args, ME);
			     return;
			end;

		     call check_star_name_$path (arg, code);

		     if code ^= 0 then do;
			     call complain (error_table_$nostars, ME, "^a", arg);
			     return;
			end;

		     search.name (nsr) = arg;
		     search.found (nsr) = FALSE;
		end;

	end;

	call object_lib_$initiate (dname, ename, "", ""b, seg_ptr, bitc, msf, code);
	if seg_ptr = null then do;
		call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
		return;
	     end;

	if msf then do;
		call date_msf_compiled_ (seg_ptr, ename, code);
		if code ^= 0 then call complain (code, ME, "^a", pathname_ (dname, ename));
	     end;
	
	else if index (reverse (rtrim (ename)), "evihcra.") = 1 then do;
		archive = TRUE;
		comp_ptr = null ();
		call archive_$next_component (seg_ptr, bitc, comp_ptr, comp_bc, comp_name, code);
		if code ^= 0 then do;
			call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
			return;
		     end;
		do while (comp_ptr ^= null ());
		     if index (reverse (rtrim (comp_name)), "dnib.") ^= 1 then do;
			     if nsr = 0 then call date_compiled_ (comp_ptr, comp_bc, comp_name, code);
			     else do idx = 1 to nsr;
				     if rtrim (comp_name) = search.name (idx) then do;
					     call date_compiled_ (comp_ptr, comp_bc, comp_name, code);
					     search.found (idx) = TRUE;
					end;
				end;
			     if code ^= 0 then call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
			end;
		     call archive_$next_component (seg_ptr, bitc, comp_ptr, comp_bc, comp_name, code);
		     if code ^= 0 then do;
			     call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
			     return;
			end;
		end;
	     end;

	else do;
		call date_compiled_ (seg_ptr, bitc, ename, code);
		if code ^= 0 then call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
	     end;

	call terminate_file_ (seg_ptr, (0), TERM_FILE_TERM, code);
nlx:
	if afsw
	then do;
	     firstarg = (nsr = 0);
	     do jdx = 1 to nsr while (^firstarg);
		firstarg = search.found (jdx);
		end;
	     if ^firstarg then call complain (0, ME, "No matching components found in ^[archive^s^;bound ^[MSF^;segment^]^].", archive, msf);
	     end;
	else do jdx = 1 to nsr;
	     if ^search.found (jdx) then call complain (0, ME, "Component not found in ^[archive^s^;bound ^[MSF^;segment^]^]. ^a", archive, msf, search.name (jdx));
	end;

	return;

date_compiled_: proc (seg_ptr, bitc, ename, code);

	dcl     seg_ptr		 ptr,		/* ptr to segment */
	        bitc		 fixed bin (24),	/* lth of segment */
	        ename		 char (32),	/* name of segment */
	        code		 fixed bin (35);	/* errcode */

	dcl     (bmp, sblkp, mapp, comp_name_ptr) ptr;
	dcl     answer		 char (256) var init ("");
	dcl     author		 char (32);
	dcl     atp		 ptr, atl fixed bin, based_author char (atl) based (atp);
	dcl     (idx, jdx, kdx)	 fixed bin;
	dcl     comp_name_len	 fixed bin;
	dcl     datstr		 char (16);
	dcl     user		 char (32);
	dcl     compiler		 char (64);
	dcl     name		 char (comp_name_len) based (comp_name_ptr);
	dcl     cname		 char (kk) based (qq);
	dcl     kk		 fixed bin, qq ptr;
	dcl     1 dd		 like decode_definition_full aligned;
	dcl     1 oi		 like object_info aligned;

/* include files at end */

	code = 0;
	oi.version_number = object_info_version_2;
	call object_info_$display (seg_ptr, bitc, addr (oi), code);
	if code ^= 0 then return;

	call date_time_ (oi.compile_time, datstr);
	compiler = oi.compiler;
	user = oi.userid;
	if substr (user, 1, 1) <= " " then call hcs_$get_bc_author (dname, ename, user, code);
	if long then do;
		if oi.symbp ^= null & oi.cvers.offset ^= FALSE then do;
			qq = addrel (oi.symbp, oi.cvers.offset);
			kk = fixed (oi.cvers.length, 18);
			if kk > 0 & substr (cname, 1, 1) > " "
			then compiler = cname;
		     end;
	     end;

	if oi.format.bound then do;
		call get_bound_seg_info_ (seg_ptr, bitc, addr (oi), bmp, sblkp, code);
		if code ^= 0 then do;
			call complain (code, ME, "^a", pathname_$component (dname, ename, cname));
			return;
		     end;
		if (nsr = 0) | archive then do;	/* always title if bound seg is in archive */
			if brief then answer = datstr;
			else answer = datstr || " " || rtrim (ename) || " " || rtrim (user) || " " || rtrim (compiler);
			if afsw then go to afret;
			call ioa_ ("Bound ^a", answer);
		     end;
		do idx = 1 to n_components;
		     comp_name_ptr = addrel (sblkp, component (idx).name_ptr);
		     comp_name_len = fixed (component (idx).name_lng, 18);
		     jdx = fixed (component (idx).symb_start, 18);
		     if nsr > 0 then do;
			          do kdx = 1 to nsr;
				     if name = search.name (kdx) then goto doit1;
                                             end;

			     eof = decode_definition_$full (addrel (oi.defp, bindmap.component(idx).defblock_ptr), addr (dd), addr (oi));
			     do while (^eof & (dd.section = "segn") & ^dd.flags.ignore);
				do kdx = 1 to nsr;
				     if dd.symbol = search.name (kdx) then goto doit1;
           			     end;		/* do kdx */
				eof = decode_definition_$full (dd.next_def, addr (dd), addr (oi));
				end;		/* do while */
			     go to skp1;
			end;
doit1:		     mapp = addrel (oi.symbp, jdx);
		     call date_time_ ((addr (mapp -> sb.obj_creation_time) -> fb71u), datstr);
		     if nsr > 0 then search.found (kdx) = TRUE;
		     compiler = component (idx).comp_name;
		     if mapp -> sb.uid_offset > component (idx).symb_lng then author = "?.?.?";
		     else do;
			     atp = addrel (mapp, mapp -> sb.uid_offset);
			     atl = fixed (mapp -> sb.uid_length, 18);
			     author = based_author;
			     if substr (author, 1, 1) < " " then author = "?.?.?";
			end;
		     if long then do;
			     if sb.decl_vers = 1 then do;
				     qq = addrel (sblkp, component (idx).symb_start);
				     kk = fixed (qq -> sb.gen_name_length, 18);
				     qq = addrel (qq, qq -> sb.gen_name_offset);
				     if kk > 0
				     then if substr (cname, 1, 1) > " "
					then compiler = cname;
				end;
			end;
		     if brief then answer = datstr || " " || name;
		     else answer = datstr || " " || rtrim (name) || " " || rtrim (author) || " " || rtrim (compiler);
		     if afsw then go to afret;
		     call ioa_ ("  ^a", answer);
skp1:		end;
		return;
	     end;

	if brief then answer = datstr;
	else answer = datstr || " " || rtrim (ename) || " " || rtrim (user) || " " || rtrim (compiler);
	if afsw then do;
afret:		rv = answer;
		go to nlx;
	     end;
	call ioa_ ("^a", answer);
%page;
%include symbol_block;
%include bind_map;
%include object_info;
     end date_compiled_;

date_msf_compiled_: proc (seg_ptr, ename, code);

	dcl     seg_ptr		ptr,		/* ptr to component 0 */
	        ename		char (32),	/* name of MSF */
	        code		fixed bin(35);	/* errcode */

	dcl     sys_areap		ptr;
	dcl     based_authorp	ptr;
	dcl     based_authorl	fixed bin (18) unsigned;
	dcl     based_author	char (based_authorl) based (based_authorp);
	dcl     cnamep		ptr;
	dcl     cnamel		fixed bin (18) unsigned;
	dcl     cname		char (cnamel) based (cnamep);
	dcl     mapp		ptr;
	dcl     sys_area		area based (sys_areap);
	dcl     oip		ptr;
	dcl     compiler		char (64);
	dcl     user		char (32);
	dcl     bmp		ptr;
	dcl     sblkp		ptr;
	dcl     c			fixed bin;
	dcl     idx		fixed bin;
	dcl     sr_idx		fixed bin;
	dcl     date_str		char (16);
	dcl     answer		char (256) varying;
	dcl     author		char (32);
	dcl     found		bit (1);
	dcl     map_relp		fixed bin (18) unsigned;
	dcl     comp_namep		ptr;
	dcl     comp_namel		fixed bin (18) unsigned;
	dcl     comp_name		char (comp_namel) based (comp_namep);
	dcl     01 oi		aligned like object_info based (oip);
	dcl     01 dd		aligned like decode_definition_str;
	dcl     cleanup		condition;
	
	code = 0;
	answer = "";
	sys_areap = get_system_free_area_ ();
	comp_infop = null;
	
	on cleanup begin;
	  if comp_infop ^= null
	    then do;
	      do c = 1 to component_info.max;
	        call terminate_file_ (component_info.comp (c).segp, component_info.comp (c).bc, TERM_FILE_TERM, 0);
	      end;
	      free component_info in (sys_area);
	    end;
	end;
	
	call object_lib_$get_component_info (seg_ptr, sys_areap, component_info_version_1, "display", comp_infop, code);
	if code ^= 0 then return;
	
	oip = addr (component_info.comp (0).info);
	
	call date_time_ (oi.compile_time, date_str);
	compiler = oi.compiler;
	user = oi.userid;
	
	if substr (user, 1, 1) = " " then call hcs_$get_bc_author (pathname_ (dname, ename), "0", user, code);
	if long then do;
		if oi.symbp ^= null & oi.cvers.offset ^= ""b then do;
			cnamep = addrel (oi.symbp, oi.cvers.offset);
			cnamel = fixed (oi.cvers.length, 18);
			if cnamel > 0 & substr (cname, 1, 1) > " "
			then compiler = cname;
		     end;
	     end;
	
	if nsr = 0 then do;
		if brief then answer = date_str;
		else answer = date_str || " " || rtrim (ename) || " " || rtrim (user) || " " || rtrim (compiler);
		if afsw then go to afret;
		call ioa_ ("Bound ^a", answer);
	     end;
	
	do c = 1 to component_info.max;
	     oip = addr (component_info.comp (c).info);
	     call get_bound_seg_info_ (component_info.comp (c).segp, component_info.comp (c).bc, oip, bmp, sblkp, code);
	     if code ^= 0 then do;
		     call complain (code, ME, "^a", pathname_ (dname, ename));
		     go to return;
		end;
	     
	     do idx = 1 to bindmap.n_components;
		     comp_namep = addrel (sblkp, component (idx).name_ptr);
		     comp_namel = fixed (component (idx).name_lng, 18);
		     map_relp = fixed (component (idx).symb_start, 18);
		     if nsr > 0 then do;
			     found = FALSE;
			     do sr_idx = 1 to nsr;
				if comp_name = search.name (sr_idx) then search.found (sr_idx), found = TRUE;
			     end;
			     eof = decode_definition_ (seg_ptr, addr (dd));
			     eof = decode_definition_ (addrel (oi.defp, bindmap.component(idx).defblock_ptr), addr (dd));
			     do while (^eof & (dd.section = "segn") & ^found);
				do sr_idx = 1 to nsr;
				     if dd.symbol = search.name (sr_idx) then search.found (sr_idx), found = TRUE;
				     end;
				eof = decode_definition_ (dd.next_def, addr (dd));
				end;		/* do while */
			end;
		     else found = TRUE;

		if found then do;
			mapp = addrel (oi.symbp, map_relp);
			call date_time_ ((addr (mapp -> sb.obj_creation_time) -> fb71u), date_str);
			compiler = bindmap.component (idx).comp_name;
			if mapp -> sb.uid_offset > bindmap.component (idx).symb_lng then author = "?.?.?";
			else do;
				based_authorp = addrel (mapp, mapp -> sb.uid_offset);
				based_authorl = fixed (mapp -> sb.uid_length, 18);
				author = based_author;
				if substr (author, 1, 1) < " " then author = "?.?.?";
			     end;
		          if long then do;
				if mapp -> sb.decl_vers = 1 then do;
					cnamep = addrel (sblkp, bindmap.component (idx).symb_start);
					cnamel = fixed (cnamep -> sb.gen_name_length, 18);
					cnamep = addrel (cnamep, cnamep -> sb.gen_name_offset);
					if cnamel > 0
					then if substr (cname, 1, 1) > " "
					     then compiler = cname;
				     end;
			     end;
			
			if brief then answer = date_str || " " || comp_name;
			else answer = date_str || " " || rtrim (comp_name) || " " || rtrim (author) || " " || rtrim (compiler);
			if afsw then go to afret;
			call ioa_ ("  ^a", answer);
		     end;
	     end;
	end;
	
return:	do c = 1 to component_info.max;
	     call terminate_file_ (component_info.comp (c).segp, component_info.comp (c).bc, TERM_FILE_TERM, 0);
	end;
	free component_info in (sys_area);
	return;
		
afret:	rv = answer;
	do c = 1 to component_info.max;
	     call terminate_file_ (component_info.comp (c).segp, component_info.comp (c).bc, TERM_FILE_TERM, 0);
	end;
	free component_info in (sys_area);
	goto nlx;
	
%include object_info;
%include object_lib_defs;
%include bind_map;
%include symbol_block;

     end date_msf_compiled_;
	
%include decode_definition_str;
%include terminate_file;
%include access_mode_values;
     end date_compiled;
