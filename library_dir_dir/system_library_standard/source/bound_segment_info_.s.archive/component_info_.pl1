/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* The procedure component_info_ finds and returns object information about a component of a bound segment. */
/* coded  4/26/72  by M. Weaver */

name:	proc(segptr, compname, argptr, code);
/* this entry locates the component by its name */


declare	(segptr, argptr, bmp, sblkp, p, objp) pointer;

declare	(j, k, offset) fixed bin(18);
declare	code fixed bin(35);
declare	(type, i, namsw) fixed bin;
declare	error_table_$name_not_found ext fixed bin(35);
declare	bitcount fixed bin(24);

declare	(addr, addrel, bin, bit,  divide, fixed, ptr, rel, substr) builtin;

declare	var_string char(j) based(p);
declare	string char(100000) based(sblkp);
declare	compname char(32) aligned;

declare	hcs_$status_mins ext entry(ptr, fixed bin, fixed bin(24), fixed bin(35));
declare	get_bound_seg_info_ ext entry( ptr, fixed bin(24), ptr, ptr, ptr, fixed bin(35));

/**/

%include bind_map;

/**/

declare	1 oi aligned like object_info;

%include object_info;

/**/

%include symbol_block;


declare	1 osb aligned based(sblkp),
	2 gen_name_boff fixed bin,
	2 dum1 bit(18) unaligned,
	2 gen_name_blength bit(18) unaligned,
	2 gen_vers_boff fixed bin,
	2 dum2 bit(18) unaligned,
	2 gen_vers_blength bit(18) unaligned,
	2 gen_creation_time fixed bin(71),
	2 obj_creation_time fixed bin(71),
	2 symb_tree bit(18) unaligned,
	2 extension bit(18) unaligned,
	2 hmap bit(18) unaligned,
	2 n bit(18) unaligned,
	2 next_header bit(18) unaligned,
	2 bind_flag bit(18) unaligned,
	2 text_lng bit(18) unaligned,
	2 link_lng bit(18) unaligned,
	2 obj_name_boff fixed bin,
	2 dum3 bit(18) unaligned,
	2 obj_name_blength bit(18) unaligned;

/**/


/* the following structure is copied from component_info.incl.pl1 */

declare	1 ci aligned based(argptr),		/* structure to be filled in */
	2 dcl_version fixed bin,		/* version number of this structure */
	2 name char(32) aligned,		/* objectname of component segment */
	2 text_start pointer,		/* ptr to component's section of text */
	2 stat_start pointer,		/* pointer to component's section of internal static */
	2 symb_start pointer,		/* pointer to component's first symbol block */
	2 defblock_ptr pointer,		/* ptr to component's definition block */
	2 text_lng fixed bin,		/* length of text section */
	2 stat_lng fixed bin,		/* length of internal static */
	2 symb_lng fixed bin,		/* length of symbol section */
	2 n_blocks fixed bin,		/* number of symbol blocks in component's symbol section */
	2 standard bit(1) aligned,		/* indicates whether component is in standard (new) format */
	2 compiler char(8) aligned,		/* name of component's compiler */
	2 compile_time fixed bin(71),		/* time component was compiled */
	2 userid char(32) aligned,		/* id of creator of component */
	2 cvers aligned,			/* version of component's compiler */
	  3 offset bit(18) unaligned,		/* offset in words relative to symb_start */
	  3 length bit(18) unaligned,		/* length of version name in characters */
	2 comment aligned,			/* component's comment */
	  3 offset bit(18) unaligned,		/* offset in words relative to symb_start */
	  3 length bit(18) unaligned,		/* length of comment in characters */
	2 source_map fixed bin;		/* offset, rel to beg of symbol block, of component's source map */


/**/
	namsw = 1;				/* indicate that name was given */
	go to start;

offset:	entry(segptr, offset, argptr, code);

	namsw = 0;				/* indicate that name was not given */

start:	objp = ptr(segptr, 0);			/* be sure we have ptr to beg of bound seg */
	call hcs_$status_mins(objp, type, bitcount, code);   /* get bit count */
	if code ^= 0 then return;			/* too bad */

	oi.version_number = object_info_version_2;
	call get_bound_seg_info_(objp, bitcount, addr(oi), bmp, sblkp, code);
						/* get ptrs to bindmap indo */
	if code ^= 0 then return;			/* evidently not a bound segment */

	go to looplab(namsw);			/* bindmap is searched differently for offset or name */

looplab(0):
find_offset:
	do i = 1 to bmp -> bindmap.n_components;	/* look at each component */
	     j = fixed(component(i).text_start, 18);
	     k = fixed(component(i).text_lng, 18);
	     if offset >= j then if offset < j+k	/* offset is within this component's text section */
		then go to fill_in;
	     j = fixed(component(i).stat_start, 18) + fixed(rel(oi.statp), 18);
						/* get offset of this conponent's internal static */
	     k = fixed(component(i).stat_lng, 18);
	     if offset >= j then if offset < j+k	/* offset is within component's internal static */
		then go to fill_in;
	     j = fixed(component(i).symb_start, 18) + fixed(rel(oi.symbp), 18);
						/* get offset of this component's symbol section */
	     k = fixed(component(i).symb_lng, 18);
	     if offset >= j then if offset < j+k	/* offset is within component's symbol section */
		then go to fill_in;
	end;

	code = error_table_$name_not_found;		/* offset can't be associated with a component */
	return;

looplab(1):
find_name:
	do i = 1 to n_components;			/* look at each component */
	     p = addrel(sblkp, component(i).name_ptr);	/* get ptr to component's name in bindmap symb block */
	     j = fixed(component(i).name_lng, 18);
	     if compname = var_string then go to fill_in;   /* name matches component name */
	end;

	code = error_table_$name_not_found;		/* component name not in bound segment */
	return;

fill_in:						/* fill in argument structure */
	ci.dcl_version = 1;
	if namsw > 0 then ci.name = compname;
	else do;
	     p = addrel(sblkp, component(i).name_ptr);	/* get addr of component name in bindmap */
	     j = fixed(component(i).name_lng, 18);
	     ci.name = var_string;
	end;

	ci.compiler = component(i).comp_name;


	ci.text_start = addrel(oi.textp, component(i).text_start);
	ci.stat_start = addrel(oi.statp, component(i).stat_start);
	ci.symb_start = addrel(oi.symbp, component(i).symb_start);
	ci.defblock_ptr = addrel(oi.defp, component(i).defblock_ptr);


	ci.text_lng = fixed(component(i).text_lng,17);
	ci.stat_lng = fixed(component(i).stat_lng,17);
	ci.symb_lng = fixed(component(i).symb_lng,17);

	j = fixed(component(i).n_blocks,17);
	if j = 0 then ci.n_blocks = 1;		/* assume 1 if not filled in */
	else ci.n_blocks = j;

 	/* we have finished copying items found in the bind map;
	   now we must go to the component's symbol section for the rest */

	sblkp = ci.symb_start;			/* get ptr to component's symbol section */
	if substr(osb.dum1, 1, 9) = "010100000"b then go to old_format;	/* look for old block flag */

new_format:
	ci.standard = "1"b;		/* get_bound_seg_info_ would have returned bad code if new and non-standard */
	ci.compile_time = sb.obj_creation_time;

	j = fixed(sb.uid_offset, 18) * 4 + 1;
	k = fixed(sb.uid_length, 18);
	ci.userid = substr(string, j, k);		/* fill in userid string */

	ci.cvers.offset = sb.gen_name_offset;
	ci.cvers.length = sb.gen_name_length;

	ci.comment.offset = sb.comment_offset;
	ci.comment.length = sb.comment_length;

	ci.source_map = fixed(sb.source_map, 18);

	return;

old_format:
	ci.standard = "0"b;

	ci.compile_time = osb.obj_creation_time;
	ci.userid = " ";

	ci.cvers.offset = bit(bin(divide(osb.gen_vers_boff, 36, 18, 0), 18), 18);
	ci.cvers.length = bit(bin(divide(fixed(osb.gen_vers_blength, 18), 9, 18, 0), 18), 18);

	ci.comment.offset, ci.comment.length = "0"b;
	ci.source_map = 0;

return;
	end;
