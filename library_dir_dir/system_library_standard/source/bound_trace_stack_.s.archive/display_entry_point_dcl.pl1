/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



	

/****^  HISTORY COMMENTS:
  1) change(84-12-30,Ranzenbach), approve(86-03-12,MCR7144),
     audit(86-03-12,GWMay), install(86-05-01,MR12.0-1051):
     Added support for archive pathnames and ability to requote declaration
     for active functions (phx11853, phx12764).
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/* 									*/
	/* Name:  display_entry_point_dcl						*/
	/* 									*/
	/* This command/af displays the calling sequence of a PL/I procedure entry point as a	*/
	/* PL/I declare statement.  It also displays the PL/I declare statement for error_table_	*/
	/* code (but not for codes in non-system error tables).				*/
	/* 									*/
	/* Status									*/
	/* 									*/
	/* 0) Created in May, 1979  by  G. C. Dixon					*/
	/* 1) Modified in January, 1981 by G. C. Dixon - (1) remove dir part of pathname from	*/
	/* 	entry point name display in declaration; (2) for command output, if		*/
	/* 	get_line_length_ returns nonzero code, don't break declaration at all		*/
	/* 	(probably file_output).						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


display_entry_point_dcl:
depd:	procedure options(variable);
	
     dcl	Larg			fixed bin,
	Parg			ptr,
	arg			char(Larg) based(Parg);

     dcl  Lret			fixed bin(21),
	Pret			ptr,
	ret			char (Lret) varying based(Pret);

     dcl  Nargs			fixed bin,
	Saf			bit(1),
	cleanup			condition,
	code			fixed bin(35),
         (dcl_style, line_length)	fixed bin,
	ent			char(289) varying,	/* 32 char ref_name + 256 char ep_name + $	*/
	type			char(32) varying;

     dcl (active_fnc_err_,
	com_err_,
	err			variable)
				entry options(variable),
         (arg_ptr			variable,
	cu_$af_arg_ptr,
	cu_$arg_ptr)		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	get_entry_point_dcl_	entry (char(*), fixed bin, fixed bin, char(*) var, char(32) var,
				     fixed bin(35)),
	get_line_length_$switch	entry (ptr, fixed bin(35)) returns(fixed bin),
         (get_temp_segment_,
	release_temp_segment_) 	entry (char(*), ptr, fixed bin(35)),
	requote_string_		entry (char(*)) returns(char(*)),
	iox_$put_chars 		entry (ptr, ptr, fixed bin(21), fixed bin(35)),
	iox_$user_output 		ptr external static;

     dcl (addr, before, length, null, reverse, substr)
				builtin;

     dcl (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	NL			char(1) int static options(constant) init("
"),
	error_table_$wrong_no_of_args fixed bin(35) ext static,
	sys_info$max_seg_size	fixed bin(35) ext static;
	

	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;
	     ret = "";
	     err = active_fnc_err_;
	     arg_ptr = cu_$af_arg_ptr;
	     dcl_style = 0;
	     line_length = 0;
	     Saf = TRUE;
	     end;
	else do;
	     err = com_err_;
	     arg_ptr = cu_$arg_ptr;
	     Pret = null;
	     on cleanup begin;
		if Pret ^= null then
		     call release_temp_segment_ ("display_entry_point_dcl", Pret, code);
		end;
	     call get_temp_segment_ ("display_entry_point_dcl", Pret, code);
	     if code ^= 0 then go to bad_temp_seg;
	     Lret = (sys_info$max_seg_size-1) * 4;
	     ret = "";
	     Saf = FALSE;
	     dcl_style = 1;
	     line_length = get_line_length_$switch (iox_$user_output, code);
	     if code ^= 0 then do;			/* If no line length given in current mode string,*/
		line_length = 0;			/*   probably file_output, so don't break dcl.	*/
		dcl_style = 0;
		end;
	     end;

	if Nargs ^= 1 then go to WNOA;
	call arg_ptr (1, Parg, Larg, code);

	call get_entry_point_dcl_ (arg, dcl_style, line_length, ret, type, code);
	if code ^= 0 then go to BAD_ARG;

	ent = before (reverse(arg), ">");		/* Remove any dir part of pathname from arg.	*/
	ent = before (ent, "::");			/* and archive name...			*/
	ent = reverse(ent);
	if dcl_style = 0 then
	     ret = "dcl " || ent || " " || ret || ";";
	else ret = "dcl  " || ent  || ret || ";";
	
	if ^Saf then do;
	     ret = ret || NL;
	     call iox_$put_chars (iox_$user_output, addr(substr(ret,1)), length(ret), code);
	     end;
	else ret = requote_string_ ((ret));				/* requote for active functions...	*/

RETURN:	if ^Saf then 
	     if Pret ^= null then 
		call release_temp_segment_ ("display_entry_point_dcl", Pret, code);
	return;


WNOA:	call err (error_table_$wrong_no_of_args, "display_entry_point_dcl", "
  Usage:  ^[[^]display_entry_point_dcl  entryname^[]^]", Saf, Saf);
	go to RETURN;

BAD_ARG:	call err (code, "display_entry_point_dcl", arg);
	go to RETURN;

bad_temp_seg:
	call err (code, "display_entry_point_dcl", "^/While obtaining temp segment.");
	return;

	end display_entry_point_dcl;
     
