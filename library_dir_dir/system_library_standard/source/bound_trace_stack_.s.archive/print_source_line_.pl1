/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

print_source_line_:
     proc (strp, stream);

/* PRINT_SOURCE_LINE_ - attempt to print out the source line for a given location.

   This is a subroutine of trace_stack_.
   Its input data has been set up by interpret_ptr_.

   THVV */
/* Modified 7/76 by S.E. Barr to delete printing of version I operator names and to recognize "PL/I" compiler name */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

dcl strp ptr,
    stream char (32) aligned;

dcl sp ptr,					/* ptr to stack frame */
    fptr ptr,					/* ptr to faulting instruction */
    btc fixed bin (24),
    cip ptr,
    callp ptr,
    entry_ptr ptr,
    link_ptr ptr,
    lang char (8) aligned,
    op_seg_name char (32) aligned,
    segno fixed bin (18),
    component char (32) aligned,
    sn char (32) aligned,
    i fixed bin,
    insx fixed bin init (1),
    working_dir_name char (168) aligned,		/* name of current wdir, for look for source */
    pl1_operator_name char (32) aligned,		/* if faulting instr was pl1 op, what? */
    line_no char (16),				/* line number of source (from symbol table) */
    dirname char (168),
    ename char (32),
    ec fixed bin (35),				/* system errcode */
    disassembled_instr char (72) var;			/* faulting instruction */

dcl source_ptr ptr;
dcl source_seg char (1000000) aligned based (source_ptr);
dcl (line_offset, line_length) fixed bin (21);

dcl component_info_$offset entry (ptr, fixed bin, ptr, fixed bin (35)),
    is_condition_frame_ entry (ptr) returns (bit (1)),
    find_condition_info_ entry (ptr, ptr, fixed bin (35)),
    stack_frame_exit_ entry (ptr, ptr, ptr, bit (1), ptr, char (32) aligned, ptr),
    find_operator_name_ entry (char (*) aligned, ptr, char (32) aligned),
    get_link_ptr_ entry (ptr, ptr, ptr),
    get_entry_name_ entry (ptr, char (*) aligned, fixed bin (18), char (8) aligned, fixed bin (35)),
    interpret_link_ entry (ptr, ptr, fixed bin (35)),
    disassemble entry (ptr, char (*) var, fixed bin),
    find_source_line_ entry (ptr, char (*), char (*), char (*), fixed bin (21), fixed bin (21), fixed bin (35)),
    hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
    hcs_$terminate_noname entry (ptr, fixed bin (35)),
    hcs_$fs_get_brackets entry (ptr, fixed bin (5), (3) fixed bin (6), fixed bin (35)),
    hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
    hcs_$high_low_seg_count entry (fixed bin, fixed bin),
    hcs_$fs_get_path_name entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35)),
    ioa_$ioa_stream entry options (variable);

dcl (addr, ptr, fixed, null, substr, binary, baseno, baseptr, bit, rel) builtin;

dcl 1 situation aligned,
      2 bad_frame bit (1) unal,
      2 exists_ppr bit (1) unal,
      2 ppr_is_owner bit (1) unal,
      2 ppr_is_ops bit (1) unal,
      2 caller_is_owner bit (1) unal,
      2 entry_ptr_invalid bit (1) unal,
      2 ret_ptr_is_ops bit (1) unal,
      2 pad bit (29) unal;

dcl 1 condinfo aligned,				/* return struc from find_condition_info_ */
      2 mcptr ptr init (null),
      2 version fixed bin,
      2 condition_name char (32) var,
      2 infoptr ptr init (null),
      2 wcptr ptr init (null),
      2 loc_ptr ptr init (null),
      2 flags,
        3 crawlout bit (1) unal init ("0"b),
        3 pad1 bit (35) unal,
      2 user_loc_ptr ptr init (null),
      2 pad (4) bit (36);

%include interpret_ptr_struc;
%include interpret_link_info;

dcl 1 auto_interpret_link_info aligned like interpret_link_info;

%include component_info;

/* ======================================================= */

	sp = struc.stack_ptr;			/* Copy stack ptr from structure */
	fptr = struc.text_ptr;			/* ... instruction ptr too. */
	if is_condition_frame_ (sp) then do;		/* may need machine cond. */
	     cip = addr (condinfo);
	     call find_condition_info_ (sp, cip, ec);
	     end;
	call stack_frame_exit_ (sp, condinfo.mcptr, condinfo.wcptr, condinfo.crawlout, callp, op_seg_name,
	     addr (situation));
	if situation.bad_frame then return;

	call find_source_line_ (strp, line_no, dirname, ename, line_offset, line_length, ec);
	if line_no = "" then do;
	     call ioa_$ioa_stream (stream, "  Cannot get line number in ^a", struc.segment);
	     end;
	else do;
	     call hcs_$initiate (dirname, ename, "", 0, 1, source_ptr, ec);
	     if source_ptr = null ()
	     then call ioa_$ioa_stream (stream, "  ^a ^a: source not found", ename, line_no);
	     else call ioa_$ioa_stream (stream, "  ^a ^a: ^a", ename, line_no,
		     substr (source_seg, 1 + line_offset, line_length));
	     call hcs_$terminate_noname (source_ptr, ec);
	     end;

	if fptr = null then return;			/* can't print anything if you won't tell me where */
	pl1_operator_name = "";
	if op_seg_name = ""
	then if struc.compiler = "v2pl1" | struc.compiler = "PL/I" | struc.compiler = "alm"
	     then op_seg_name = "pl1_operators_";
	     else if struc.compiler = "pl1" | struc.compiler = "" then op_seg_name = "pl1_operators";

	if ^get_access (callp, btc)
	then pl1_operator_name = "not accessible";
	else call find_operator_name_ (op_seg_name, callp, pl1_operator_name);

	if pl1_operator_name = "alm_call" | substr (pl1_operator_name, 1, 4) = "call" then do;
	     call get_link_ptr_ (callp, link_ptr, entry_ptr);
						/* Who was he trying to call? */
	     if link_ptr ^= null then do;

		auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;
		call interpret_link_ (addr (auto_interpret_link_info), link_ptr, ec);
						/* Take link ptr if available. */
		if ec = 0 then do;
		     call ioa_$ioa_stream (stream, "  ^a to ^a^a", pl1_operator_name,
			auto_interpret_link_info.segment_name, auto_interpret_link_info.entry_point_name);
		     return;
		     end;
		end;
	     if entry_ptr ^= null then do;

/* Have found a snapped link. */

		call get_entry_name_ (entry_ptr, sn, segno, lang, ec);
						/* This shd point to entry sequence. */
		if ec = 0 then do;
		     call hcs_$fs_get_path_name (baseptr (segno), working_dir_name, i, component, ec);
		     if ec = 0 then do;
			if segno = fixed (baseno (fptr)) then do;
			     call component_info_$offset (ptr (entry_ptr, 0), binary (rel (entry_ptr)), addr (ci),
				ec);
			     if ec = 0 then component = ci.name;
			     end;
			call ioa_$ioa_stream (stream, "  ^a to ^a$^a", pl1_operator_name, component, sn);
			return;
			end;
		     end;
		end;
	     end;

/* Print instruction if no other information is available */

	call disassemble (fptr, disassembled_instr, insx);
	call ioa_$ioa_stream (stream, "^a ^a", disassembled_instr, pl1_operator_name);
	if insx > 1
	then do i = 2 to insx;
		call disassemble (fptr, disassembled_instr, i);
		call ioa_$ioa_stream (stream, "^a", disassembled_instr);
	     end;

/* This function tests the user's access to the object segment to prevent taking a fault while
   attempting to provide information.  It checks for read access, correct ring brackets, a positive
   bit count and a plausible segment number.
*/

get_access:
     proc (txtp, bc) returns (bit (1) unal);

dcl txtp ptr,
    bc fixed bin (24),
    code fixed bin (35);

dcl rings (3) fixed bin (6);
dcl type fixed bin (2);
dcl mode fixed bin (5);
dcl lev fixed bin (6);
dcl (hcsct, highct) fixed bin;

dcl cu_$level_get entry (fixed bin (6));

	call hcs_$high_low_seg_count (highct, hcsct);
	if binary (baseno (txtp)) <= hcsct + highct then do;
	     call hcs_$status_mins (txtp, type, bc, code);
	     if code = 0 & type = 1 then do;		/* 1 = segment  (ignore directories) */
		call cu_$level_get (lev);
		call hcs_$fs_get_brackets (txtp, mode, rings, code);
		if code = 0 & rings (2) >= lev then do;
		     if (bit (mode, 5) & "01000"b) = "01000"b
		     then if bc > 0 then return ("1"b);
		     end;
		end;
	     end;

	return ("0"b);

     end get_access;

     end print_source_line_;
