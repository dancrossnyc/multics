
/****^  HISTORY COMMENTS:
  1) change(2016-08-09,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Test program to invoke call_scalar_dcl_ subroutine (call_scalar_dcl_.rd).
                                                   END HISTORY COMMENTS */

call_sd_test:
     proc ();

  dcl  call_scalar_dcl_ entry (ptr, char(*), uns fixed bin(3), char(256) var, bit(36) aligned, char(*) var,
	fixed bin(35));
  dcl  com_err_ entry() options(variable);
  dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
  dcl  decode_descriptor_ entry (ptr, fixed bin, fixed bin, bit(1) aligned, fixed bin, fixed bin(24), fixed bin);
  dcl  ioa_ entry() options(variable);
  dcl  translator_temp_$get_segment entry (char(*) aligned, ptr, fixed bin(35));
  dcl  translator_temp_$release_segment entry (ptr, fixed bin(35));

  dcl  PROC char(12) aligned int static options(constant) init("call_sd_test");
  dcl  sizeNStar fixed bin(24) int static options(constant) init(16777215); /* = "77777777"b3 */
     
  dcl  v char(256) var;
  dcl  d bit(36) aligned;
  dcl  size_id char(20) var;
  dcl (code, ignoreCode) fixed bin(35);

  dcl (error_table_$bad_arg) fixed bin(35) ext static;

  dcl (length, ltrim, null, rtrim) builtin;
  dcl cleanup condition;

  dcl  dP ptr;
  dcl  dL fixed bin(21);
  dcl  decl_in char(dL) based(dP);

     call cu_$arg_ptr(1, dP, dL, code);
     if code ^= 0 then do;
	call com_err_ (0, PROC, "Syntax: ^a DECLARE_ATTRIBUTES", PROC);
	return;
	end;

alloc_vars:
     begin;

  dcl  decl char(length(decl_in)+30) var;

	decl = "dcl address_operand " || ltrim(rtrim(decl_in));
	if index(decl, ";") = 0 then decl = decl || ";";

  dcl  areaP ptr init(null);
	on cleanup begin;
	     if areaP ^= null then
		call translator_temp_$release_segment (areaP, ignoreCode);
	     end;
	call translator_temp_$get_segment (PROC, areaP, code);
	if code ^= 0 then do;
	     call com_err_ (code, PROC, "Getting temp segment");
	     return;
	     end;

	call call_scalar_dcl_ (areaP, (decl), 4, v, d, size_id, code);
	if code ^= 0 then do;
	     call com_err_ (code, PROC, "Error with declaration: ^a", decl);
	     go to EXIT;
	     end;

  dcl  tp fixed bin;
  dcl  Spacked bit(1) aligned;
  dcl  dimCount fixed bin;
  dcl  size fixed bin(24);
  dcl  scale fixed bin;
  dcl  size_tp fixed bin(2);

	call decode_descriptor_ (addr(d), 0, tp, Spacked, dimCount, size, scale);
	if fixed_point_dtype(tp) then 
	     size_tp = 1;
	else if size = sizeNStar then
	     size_tp = 2;
	else size_tp = 3;
	call ioa_ ("^/descriptor type: ^a  ^[un^;^]aligned,  " ||
		 "size: (^[^d,^d^;*^2s^;^d^s^])^[, dim count: ^d^;^s^]^[,  size id: ^a^;^s^]",
	     pl1_dtype_name(tp), Spacked, size_tp, size, scale, dimCount>0, dimCount, length(size_id)>0, size_id);
	call ioa_ ("  ^a descriptor: ^.3b", v, d);

EXIT:	if areaP ^= null then
	     call translator_temp_$release_segment (areaP, ignoreCode);
	return;

     end alloc_vars;

%page;
%include std_descriptor_types;
%page;
%include system;
%page;
%include call_dtype_fcns;

     end call_sd_test;
