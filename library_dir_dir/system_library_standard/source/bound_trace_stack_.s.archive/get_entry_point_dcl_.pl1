/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



	

/****^  HISTORY COMMENTS:
  1) change(84-12-30,Ranzenbach), approve(86-03-12,MCR7144),
     audit(86-03-12,GWMay), install(86-05-01,MR12.0-1051):
     added support for archive component pathnames and repairs for:
     phx09270 - handle trailing blanks in arg.
     phx09340 - ""
     phx09592 - Illegal PL/I coding.
  2) change(88-01-01,Gilcrease), approve(88-02-01,MCR7836),
     audit(88-03-17,RBarstad), install(88-04-19,MR12.2-1040):
               Make error_table_ produce same out as >sl1>error_table_.
               Allow argument as ask_$ask_ = ask_ and in .dcl file.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/* 									*/
	/* Name:  get_entry_point_dcl_						*/
	/* 									*/
	/*      This program obtains PL/I declare attributes for external procedure entry points, */
	/* and for error_table_ codes and other, system-wide external data.  The program obtains	*/
	/* the entry point dcl attributes from two sources:  data files declaring all unusual	*/
	/* procedure entry points (ALM segments, procedures written as subroutines but used as	*/
	/* functions, etc) and system-wide data values (eg, sys_info$max_seg_size);  the	*/
	/* argument descriptors included in the procedure entry point itself which describe the	*/
	/* entry point parameters.							*/
	/* 									*/
	/*      The data files declaring unusual entries are found via the "declare" search list. */
	/* The user may set this search list (via add_search_paths, etc) to use his own data	*/
	/* segments, or may use the default data file which get_entry_point_dcl_ sets to pl1.dcl	*/
	/* in its referencing dir if no declare search list has been set.			*/
	/* 									*/
	/*      The data files contain two kinds of entries, procedure entry point declarations	*/
	/* and user-defined abbreviations used by EMACS in PL/I mode.  Each entry appears on a	*/
	/* separate line.  Procedure entries have the form:				*/
	/* 									*/
	/*   proc_name  declaration							*/
	/* 									*/
	/* For example:								*/
	/* 									*/
	/*   ioa_	entry options (variable)						*/
	/* 									*/
	/* Note that the declaration does NOT end with a ; character.  System data entries are	*/
	/* declared in a similar manner.  For example					*/
	/* 									*/
	/*   iox_$user_output ptr external static					*/
	/* 									*/
	/* EMACS PL/I mode abbreviation entries have the form				*/
	/* 									*/
	/*   abbrev_name ==> abbrev_value						*/
	/* 									*/
	/* For example:								*/
	/* 									*/
	/*   fb ==> fixed bin							*/
	/*   cond ==> condition							*/
	/* 									*/
	/* Abbreviation entries are processed only by the $emacs entry, not			*/
	/* by get_entry_point_dcl_.							*/
	/* 									*/
	/* Entry:  get_entry_point_dcl_						*/
	/* 									*/
	/*      This entry point returns the declaration for an external value, either from one	*/
	/* of the data files, or by using the parameter argument descriptors associated with the	*/
	/* procedure entry point.  It special cases error_table_ values by always returning 	*/
	/* 'fixed bin(35) ext static' for them.  For example, given the name iox_$put_chars, it	*/
	/* might return								*/
	/* 									*/
	/*   entry (ptr, ptr, fixed bin(21), fixed bin(35))				*/
	/* 									*/
	/* Usage									*/
	/* 									*/
	/*   dcl get_entry_point_dcl_ entry (char(*), fixed bin, fixed bin, 			*/
	/*	char(*) varying, char(32) varying, fixed bin(35));			*/
	/* 									*/
	/*   call get_entry_point_dcl_ (name, dcl_style, line_length, dcl, type, code);		*/
	/* 									*/
	/* where									*/
	/* 1. name								*/
	/* 	is the name of the external entry point or data item whose declaration must be	*/
	/* obtained. (Input)							*/
	/* 									*/
	/* 2. dcl_style								*/
	/* 	is the style of indentation to be performed for the name.  			*/
	/* (Input)								*/
	/*    0 = no indentation, entire dcl on a single line				*/
	/*    1 = indentation as for the indent command					*/
	/*    2 = indentation as preferred by Gary Dixon					*/
	/* 									*/
	/* 3. line_length								*/
	/* 	is maximum length lines in return value are allowed to grow when indentation is */
	/* performed. (Input)							*/
	/* 									*/
	/* 4. dcl is the declaration which was obtained. (Output)				*/
	/* 									*/
	/* 5. type								*/
	/* 	is the type of declaration.  In the current implementation, this is always a	*/
	/* 	null string.							*/
	/* 									*/
	/* 6. code								*/
	/* 	is a standard status code describing any failure to obtain the declaration.	*/
	/* 									*/
	/* Entry:  get_entry_point_dcl_$emacs						*/
	/* 									*/
	/*   dcl get_entry_point_dcl_$emacs entry (char(*), fixed bin, fixed bin, 		*/
	/* 	char(*) var, char(32) var, char(100) var);				*/
	/* 									*/
	/*   call get_entry_point_dcl_$emacs (name, dcl_type, line_length, dcl, type, error);	*/
	/* 									*/
	/* where:									*/
	/* 									*/
	/* 1. - 4.								*/
	/* 	are as above.							*/
	/* 									*/
	/* 5. type								*/
	/* 	is "abbrev" if an abbreviation was found, and "" otherwise. (Output)		*/
	/* 									*/
	/* 6. error								*/
	/* 	is a converted error code (if an error occurred), or a description of how the	*/
	/* 	declaration was obtained, if not found in one of the data files. (Output)	*/
	/* 									*/
	/* Status									*/
	/* 									*/
	/* 0) Created   May, 1979  by  Gary C. Dixon					*/
	/* 1) Modified  Jan, 1981  by G. C. Dixon - handle non-system error table codes.	*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


get_entry_point_dcl_:
	procedure (arg, dcl_style, line_length, ret, type, Acode);

	Semacs = FALSE;
	Acode = 0;
	go to COMMON;

emacs:	entry (arg, dcl_style, line_length, ret, type, error);

	Semacs = TRUE;
	error = "";
	go to COMMON;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


     dcl  arg			char(*),
	dcl_style			fixed bin,
	line_length		fixed bin,
	ret			char(*) varying,
	type			char(32) varying,
	error			char(100) varying,
	Acode			fixed bin(35);

     dcl	
         (Idir, Ihunt, Istart_of_line)	fixed bin,
	Iparen_depth		fixed bin,
	Lfile			fixed bin(21),
         (Lparm, Lword)		fixed bin,
         (Ldcl_begin, Lindent, Ipos)	fixed bin,
	Nsearch_paths		fixed bin,
         (Pfile, Pparm, Pseg, Pword)	ptr,
	Semacs			bit(1),
	Serror_table		bit(1),
	bc			fixed bin(24),
	cleanup			condition,
	code			fixed bin(35),
	component			char(32),
	dir			char(168),
	ent			char(32),
	long			char(100),
	result			char(2000) varying,
	short			char(8);

     dcl
	area			area based(Parea),
	file			char(Lfile) based(Pfile),
	file_ch (Lfile)		char(1) based(Pfile),
	parm			char(Lparm) based(Pparm),
	word			char(Lword) based(Pword);

     dcl (addr, addrel, before, codeptr, copy, divide, index, length, ltrim, mod,
	null, ptr, rel, reverse, rtrim, search, substr, verify)
				builtin;

     dcl	convert_status_code_	entry (fixed bin(35), char(8), char(100)),
	expand_pathname_$component	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	get_system_free_area_	entry returns (ptr),
	initiate_file_$component	entry (char(*), char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35)),
	search_paths_$get		entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr,
				     fixed bin(35)),
	terminate_file_		entry (ptr, fixed bin(24), bit(*), fixed bin(35));

     dcl (error_table_$new_search_list,
	error_table_$nodescr,
	error_table_$no_search_list,
	error_table_$zero_length_seg)	fixed bin(35) ext static;

     dcl
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	HT			char(1) int static options(constant) init("	"),
	HT_SP			char(2) int static options(constant) init("	 "),
	HT_SP_NL			char(3) int static options(constant) init("	 
"),
	NL			char(1) int static options(constant) init("
"),
	Parea			ptr int static init(null),
	SP			char(1) int static options(constant) init(" ");
	







COMMON:	ret = "";					/* Initialize return values.			*/
	type = "";

	Pseg = null;				/* Prepare for cleanup on unit.		*/
	sl_info_p = null;

	on cleanup call janitor();
	result = "";				/* No result found so far.			*/

	if Parea = null then
	     Parea = get_system_free_area_();

	call search_paths_$get ("declare", sl_control_default, "", null(),
	     Parea, sl_info_version_1, sl_info_p, code);
	if  code = error_table_$no_search_list  then 
	     Nsearch_paths = 0;
	else if code = error_table_$new_search_list | code = 0 then
	     Nsearch_paths = sl_info.num_paths;
	else if code ^= 0 then go to ERROR;

	if index (arg, "$") ^= 0 then do;	/* is arg in form "frog_$frog_"? */
	     if substr (arg, 1, index (arg, "$") - 1) =
	     substr (arg, index (arg, "$") + 1, length (rtrim (arg)) - index (arg, "$")) 
		then do Ihunt = index (arg, "$") to length (rtrim (arg));
		     substr (arg, Ihunt, 1) = " ";	/* clear "$frog_" */
		end;
	end;

	do Idir = 1 to Nsearch_paths while(result = "");
						/* In each segment identified in the search	*/
	     dir, ent, component = "";
	     call expand_pathname_$component (sl_info.paths(Idir).pathname, dir, ent, component, code);
	     call initiate_file_$component (dir, ent, component, R_ACCESS, Pseg, bc, code);
	     if Pseg ^= null then do;
		Pfile = Pseg;			/* Address the segment.			*/
		Lfile = divide(bc, 9, 24, 0);
		do while(Lfile > 0  &  result = "");
		     Ihunt = index(file, rtrim(arg));	/* Make quick check to see if any hope at all	*/
		     if Ihunt = 0 then		/*   of finding entry point dcl, or abbrev.	*/
			Lfile = 0;
		     else do;
			Istart_of_line = index(reverse(substr(file,1,Ihunt-1)),NL);
			if Istart_of_line > 0 then do;/* Address potential matching line.		*/
			     Pfile = addr(file_ch(Ihunt-Istart_of_line+1));
			     Lfile = Lfile - (Ihunt-Istart_of_line);
			     end;			/* Toss away stuff preceding matching line.	*/
			call find_word_and_skip();	/* If first word on line names entry point or	*/
			if word_equal_arg () then do;	/*   abbrev we want, then EUREKA!		*/
			     call skip_whitespace();	/* Skip whitespace following name.		*/
			     result = rest_of_line(); /* Assume entry point dcl, make dcl the result.	*/
			     call find_word_and_skip();
			     if  word = "==>"  then	/* But check for an EMACS abbrev.		*/
				if Semacs then do;	/* If looking for EMACS abbrev's, we've found it. */
				     type = "abbrev";
				     error = "abbrev";
				     call skip_whitespace();
				     result = rest_of_line();
				     end;
				else result = "";	/* Other, continue looking since matching EMACS	*/
			     end;			/*   abbrev does not signify end of search for	*/
						/*   an entry point dcl.			*/
			call skip_line();
			end;
		     end;
		call terminate_file_ (Pseg, 0, TERM_FILE_TERM, code);
		Pseg = null;			/* Done looking at this seg.			*/
		end;
	     end;

	if result = "" then do;			/* dcl or abbrev not found in dcl segs.		*/
	     call get_entry_point_dcl_from_desc  (rtrim(arg), result, Serror_table, code);
	     if code ^= 0 then do;			/* Check the entry point descriptors.		*/
ERROR:		if Semacs then do;			/* Be kind to emacs, do error code conversion.	*/
		     call convert_status_code_ (code, short, long);
		     error = rtrim(long);
		     end;
		else Acode = code;
		end;
	     else if Semacs then do;			/* Tell EMACS user how declaration was found.	*/
		if Serror_table then
		     error = "dcl error_table_ code";
		else do;
		     Pfile = addrel(addr(result),1);	/* To do this, overlay result so we can use the	*/
		     Lfile = length(result);		/*   find_word_and_skip primitive.		*/
		     call find_word_and_skip();
		     if word = "entry()" then		/* entry() ==> all parm descriptors valid.	*/
			error = "dcl via parm descriptors";
		     else if  word = "entry"  then do;
			call find_word_and_skip();
			if  word = "options(variable)"  then
			     error = "no parm descriptors available";
			else error = "dcl via parm descriptors";
			end;
		     else error = "dcl via parm descriptors";
		     end;
		end;
	     end;

	if  result = ""  then;
	else if  type = "abbrev"  then		/* Output abbrev's as they stand.		*/
	     ret = result;
	
	else if  dcl_style = 0  then			/* No formatting dcl style.			*/
	     ret = result;
	else do;					/* Split non-abbrev's across lines, etc.	*/

	     if  dcl_style = 1  then do;		/*   dcl style used by indent.		*/
		Ipos = 6;
		Ldcl_begin = Ipos + length(arg) + 1;
		Lindent = 11;
		end;
	     else do;				/*   dcl style used by Gary Dixon.		*/
		Ipos = 11;
		Ldcl_begin = 41;
		Lindent = 46;
		end;
	     Ipos = Ipos + length(arg);		/*   Record current line position.		*/
	     if Ipos >= Ldcl_begin then do;		/*   Entry point name already beyond the dcl	*/
		ret = ret || NL;			/*     indent column.  Skip to next line.	*/
		Ipos = 1;
		end;
	     if Ipos < Ldcl_begin then do;		/*   Skip out to dcl column.			*/
		ret = ret || whitespace_to_pos (Ldcl_begin);
		Ipos = Ldcl_begin;
		end;
	     if length(result) + Ipos <= line_length then
		ret = ret || result;		/*   Handle simple case first.		*/
	     else do;				/*   The dcl is too long to fit on one line.	*/
		Pfile = addrel(addr(result),1);	/*   Address the dcl.			*/
		Lfile = length(result);
		Iparen_depth = 0;			/*   Prepare find_parm_and_skip for use.	*/
		do while (Lfile > 0);		/*   Add successive parameter descriptors to line */
		     call find_parm_and_skip();	/*     until they no longer fit.  Then, skip	*/
						/*     to next line.  Continue until all of dcl	*/
						/*     processed.				*/
		     if  Ipos + length(parm) <= line_length  then do;
			ret = ret || parm;
			Ipos = Ipos + length(parm);
			end;
		     else do;
			ret = ret || NL;
			Ipos = 1;
			ret = ret || whitespace_to_pos(Lindent);
			Ipos = Lindent;
			ret = ret || ltrim(parm);
			Ipos = Ipos + length(ltrim(parm));
			end;
		     end;
		end;
	     end;
	call janitor();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

word_equal_arg: proc returns (bit (1));	/* special-case "frog_$frog_" */

	if index (word, "$") ^= 0 then 
	     if substr (word, 1, index (word, "$") - 1) =
	     substr (word, index (word, "$") + 1, Lword - index (word, "$")) then
		return (rtrim (arg) = substr (word, 1, index (word, "$") - 1 ));

	return (rtrim (arg) = word);

end word_equal_arg;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


find_parm_and_skip:					/* Simple heuristic to find next parm desc.	*/
	proc;					/* Parm ends with first , or ) not inside of ().	*/
	
     dcl (Idelim)			fixed bin,
	Sparm_not_found		bit(1),
	ch			char(1);

	Pparm = Pfile;
	Lparm = 0;
	Sparm_not_found = TRUE;
	do while(Sparm_not_found);
	     Idelim = search(file,"(),");
	     if Idelim = 0 then do;
		Lparm = Lfile;
		Lfile = 0;
		Sparm_not_found = FALSE;
		end;
	     else do;
		ch = substr(file,Idelim);
		if ch = "(" then
		     Iparen_depth = Iparen_depth + 1;
		else if  ch = ")"  &  Iparen_depth = 1  then do;
		     Iparen_depth = 0;
		     Sparm_not_found = FALSE;
		     end;
		else if  ch = ")"  then
		     Iparen_depth = Iparen_depth - 1;
		else if  Iparen_depth = 1  then
		     Sparm_not_found = FALSE;
		Lparm = Lparm + Idelim;
		if Idelim = Lfile then
		     Lfile = 0;
		else do;
		     Pfile = addr(file_ch(Idelim+1));
		     Lfile = Lfile - Idelim;
		     end;
		end;
	     end;
	end find_parm_and_skip;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


find_word_and_skip:
	proc;

     dcl	Iwhite			fixed bin;
	
	Iwhite = verify (file, HT_SP);
	if Iwhite = 0 then do;			/* Remainder of file is whitespace.		*/
	     Lfile = 0;
	     Pword = Pfile;
	     Lword = 0;
	     end;
	else do;
	     if Iwhite > 1 then do;
		Pfile = addr(file_ch(Iwhite));
		Lfile = Lfile - (Iwhite-1);
		end;
	     Pword = Pfile;
	     Lword = search (file, HT_SP_NL);
	     if Lword = 0 then do;
		Lword = Lfile;
		Lfile = 0;
		end;
	     else do;
		Lword = Lword - 1;
		Pfile = addr(file_ch(Lword+1));
		Lfile = Lfile - Lword;
		end;
	     end;

	end find_word_and_skip;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


get_entry_point_dcl_from_desc:
	proc (Aep_name, Aret, Serror_table, Acode);
	
     dcl	Aep_name			char(*),		/* Name of entry point to be declared.		*/
	Aret			char(*) varying,	/* Declaration of entry point. (Out)		*/
	Serror_table		bit(1),		/* On if entry point is an error table code. (Out)*/
	Acode			fixed bin(35);	/* Status code.				*/

     dcl	Eproc			entry variable options(variable),
	Nproc_args		fixed bin,
 	Pproc			ptr,
	Pproc_desc (100)		ptr,
	ec_Pproc			ptr,
	code			fixed bin(35),
	i			fixed bin;

     dcl	Ppacked			ptr unal based;

     dcl	cv_entry_			entry (char(*), ptr, fixed bin(35)) returns(entry),
	cv_ptr_			entry (char(*), fixed bin(35)) returns(ptr),
	cv_ptr_$terminate		entry (ptr),
	get_pl1_parm_desc_string_	entry (ptr, char(*) var, fixed bin(35)),
	get_entry_arg_descs_$info	entry (ptr, fixed bin, (*) ptr, ptr, fixed bin(35));

	edi.version = entry_desc_info_version_2;	/* Get entry point parameter descriptors.	*/
	edi.object_ptr = null;
	edi.bit_count = 0;
	
	if index (Aep_name, "::") = 0 then do;		/* non-archive component path...	*/
	     Eproc = cv_entry_ (Aep_name, null(), Acode);	/* Convert entry point name to entry constant.	*/
	     if Acode ^= 0 then return;
	     Pproc = codeptr(Eproc);			/* Turn entry constant into a ptr.		*/
	end;
	else do;					/* the archive component case...		*/
	     Pproc = cv_ptr_ (Aep_name, Acode);		/* no sense snapping links...			*/
	     if Acode ^= 0 then return;
	     dir, ent, component = "";
	     call expand_pathname_$component (before (Aep_name, "$"), dir, ent, component, Acode);
	     if Acode ^= 0 then return;
	     call initiate_file_$component (dir, ent, component, R_ACCESS, edi.object_ptr, edi.bit_count, Acode);
	     if edi.object_ptr = null then return;
	end;
		
	Aret = "";
	call get_entry_arg_descs_$info (Pproc, Nproc_args, Pproc_desc, addr(edi), Acode);

	if Acode = error_table_$nodescr then do;
	     if index (Aep_name, "error_table_$") ^= 0 then do;
		Aret = Aret || "fixed bin(35) ext static";
		Acode = 0;			/* Check for error_table_ Acodes.		*/
		Serror_table = TRUE;
		end;

	     else do;				/* Handle no args case.			*/
		Acode = 0;
		go to NO_ARGS;
		end;
	     end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Hueristic for determining if entry point is in a non-system error table:		*/
	/*									*/
	/* Non-system error tables have messages in the text pointed to by error table codes	*/
	/* really packed pointers) which are stored in the linkage section for the error	*/
	/* table.  At first reference to the table, the linker copies the linkage template for	*/
	/* the table into the combined_linkage area, and a first_ref trap proc gets invoked to	*/
	/* set the segment numbers in all of the packed pointers to the segno of the text	*/
	/* section.								*/
	/*									*/
	/* (1) get_entry_parm_descs_ returns error_table_$zero_length_seg for such beasties,	*/
	/*     perhaps because they do not contain any entry points into their text section (ie,	*/
	/*     all entry points are into the linkage section.				*/
	/* (2) For this return code, the call to cv_entry_ above will have returned a pointer to	*/
	/*     the error code (packed ptr in the linkage section) corresponding to the error	*/
	/*     table entry.  This code points to the text of the error message.		*/
	/* (3) cv_ptr_ on the other hand, returns a pointer to the error code which appears in	*/
	/*     the linkage section template (contained in the error table segment itself).	*/
	/* (4) Thus, it is reasonably safe to assume entry to be a non-system error table if:	*/
	/*        baseno(cv_entry_(ep) -> packed_ptr) = baseno(cv_ptr_(ep));			*/
	/*           rel(cv_entry_(ep) -> packed_ptr) =    rel(cv_ptr_(ep));			*/
	/*     The above conditions are prima facia evidence that a trap proc was invoked to	*/
	/*     change the left half-word of the linkage template for the entry point to the	*/
	/*     segment number.  Only non-system error tables do this, to best of my knowledge.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	else if  Acode = error_table_$zero_length_seg  then do;
	     ec_Pproc = cv_ptr_ (Aep_name, code);
	     if ec_Pproc ^= null then do;
		if Pproc -> Ppacked = ptr(ec_Pproc, rel(ec_Pproc -> Ppacked)) then do; 
		     Aret = Aret || "fixed bin(35) ext static";
		     Acode = 0;
		     Serror_table = TRUE;
		     end;
		call cv_ptr_$terminate (ec_Pproc);
		end;
	     else return;
	     end;
	else if  Acode ^= 0  then return;		/* Diagnose unknown error.			*/
	else if  Nproc_args = 0  then do;		/* Check for no args.			*/
NO_ARGS:	     if  edi.flags.variable  then		/*   Proc says it is options(variable), so 	*/
						/*     include entry() indicating we are sure.	*/
		Aret = Aret || "entry() options(variable)";
	     else Aret = Aret || "entry options(variable)";/*   Proc does not say options(variable), but	*/
						/*     many commands/af do not have		*/
						/*     options(variable) in their proc/entry stmt.*/
	     end;					/*     So, use entry w/o () to indicate we're not */
						/*     sure.				*/

	else do;					/* Proc has declared args.			*/
	     do i = 1 to Nproc_args while (Pproc_desc(i) = null);
		end;				/*   Check for old procedure with declared arg	*/
	     if i > Nproc_args then go to NO_ARGS;	/*     count, but no arg descriptors.		*/

	     if Nproc_args = 1 & edi.flags.function then
		Aret = Aret || "entry(";
	     else Aret = Aret || "entry (";

	     if  edi.flags.function  then		/*   Check for functions.			*/
		Nproc_args = Nproc_args - 1;		/*     Exclude return arg from parm list.	*/

	     do i = 1 to Nproc_args;			/*   Put parms in the parm list.		*/
		call get_pl1_parm_desc_string_ (Pproc_desc(i), Aret, Acode);
		if Acode ^= 0 then return;
		Aret = Aret || ", ";
		end;

	     if Nproc_args > 0 then
		Aret = substr(Aret, 1, length(Aret)-2);	/*   Remove trailing ", " after last arg.	*/
	     if  edi.flags.function  then do;		/*   Handle function subcase.			*/
		Aret = Aret || ") returns(";
		call get_pl1_parm_desc_string_ (Pproc_desc(i), Aret, Acode);
		if Acode ^= 0 then return;
		Aret = Aret || ")";
		end;
	     else do;				/*   Handle subroutine subcase.		*/
		if  edi.flags.variable  then do;	/*     Handle options(variable) subroutine.	*/
		     Aret = Aret || ") options(variable)";
		     end;
		else Aret = Aret || ")";
		end;
	     end;

	end get_entry_point_dcl_from_desc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


janitor:	proc();

	if Pseg ^= null then do;
	     call terminate_file_ (Pseg, 0, TERM_FILE_TERM, code);
	     Pseg = null;
	     end;
	if sl_info_p ^= null then
	     free sl_info in (area);
	end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


rest_of_line:
	proc() returns (char(*));

     dcl	Inl			fixed bin,
	Lrest			fixed bin,
	Prest			ptr,
	rest			char(Lrest) based(Prest);

	Inl = index(file, NL);
	if Inl = 0 then
	     Inl = Lfile + 1;
	Prest = Pfile;
	Lrest = Inl - 1;
	return (rest);

	end rest_of_line;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


skip_line:
	proc();
	
     dcl	Inl			fixed bin;

	Inl = index(file, NL);
	if  Inl = 0  |  Inl = Lfile  then
	     Lfile = 0;
	else do;
	     Pfile = addr(file_ch(Inl+1));
	     Lfile = Lfile - Inl;
	     end;

	end skip_line;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


skip_whitespace:
	proc;
	
     dcl  Iwhite			fixed bin;
	
	Iwhite = verify (file, HT_SP);
	if Iwhite = 0 then
	     Lfile = 0;
	else if Iwhite > 1 then do;
	     Pfile = addr(file_ch(Iwhite));
	     Lfile = Lfile - (Iwhite-1);
	     end;
	
	end skip_whitespace;
     
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


whitespace_to_pos:
	proc (Inew_pos) returns(char(*));

     dcl	Inew_pos			fixed bin;
	
     dcl (Ispace, Itab)		fixed bin;
	
	if Inew_pos <= Ipos then			/* Already at or beyond desired position.	*/
	     return ("");				/*   Do nothing.				*/
	else do;
	     Ispace = mod(Inew_pos-1, 10);
	     Itab = divide (Inew_pos - Ispace - Ipos + 9, 10, 17, 0);
	     if Itab = 0 then
		Ispace = Inew_pos - Ipos;
	     return (copy(HT, Itab) || copy(SP, Ispace));
	     end;

	end whitespace_to_pos;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

%include access_mode_values;
%page;
%include entry_desc_info;

     dcl	1 edi			aligned like entry_desc_info;
%page;
%include sl_info;

%include sl_control_s;
%page;
%include terminate_file;

	end get_entry_point_dcl_;
