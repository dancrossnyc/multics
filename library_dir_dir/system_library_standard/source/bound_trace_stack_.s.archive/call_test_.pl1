
/****^  HISTORY COMMENTS:
  1) change(2016-03-03,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Program containing entrypoints to be declared/invoked by the call.pl1
     command.
                                                   END HISTORY COMMENTS */

call_test_: 
     proc;
     call ioa_("call_test_ (entrypoint with no arguments) was called successfully.");
     return;

uns: entry(uns1, uns2, uns3, uns4);
dcl uns1 fixed bin(36) unsigned;
dcl uns2 fixed bin(35) unsigned;
dcl uns3 fixed bin(71) unsigned;
dcl uns4 fixed dec(59);
/* The following are treated same as if signed. 
dcl uns3 fixed dec;
 */
/* The following declarations are rejected by PL/I: incompatible attributes 
dcl uns3 float bin unsigned;
dcl uns4 float bin(63) unsigned;
dcl uns3 fixed dec unsigned;
dcl uns4 fixed dec(59) unsigned;
 */
     call ioa_("uns: uns1 = ^d, uns2 = ^d, uns3 = ^d, uns4 = ^f", uns1, uns2, uns3, uns4);
     return;
     

rt:  entry() returns();
     return;
     

get_line:
     entry(in1, buffP, buffL, readN, code);
     
  dcl  in1 ptr;
  dcl  buffP ptr;
  dcl  buffL fixed bin(21);
  dcl  readN fixed bin(21);
  dcl  code fixed bin(35);
  dcl  buff char(readN) based(buffP);
  dcl  result_get_line char(40) var int static options(constant) init("Results from call_test_$get_line
");

  dcl  error_table_$long_record fixed bin(35) ext static;
  dcl  min builtin;     

     call ioa_("$get_line: in1 = ^p, buffP = ^p, buffL = ^d, readN = ^d, buff(1:20) = ^a",
	in1, buffP, buffL, readN, substr(buff,1,20));
     call ioa_("EXPECT get_line: buff=""^a"", readN=^d", result_get_line, length(result_get_line));

     readN = length(result_get_line);
     if readN > buffL then do;
	code = error_table_$long_record;
	readN = buffL;
	end;
     else code = 0;
     buff = result_get_line;
     return;

array:
     entry(arr1, arr2, str3, arr4);
dcl arr1 (2:5) fixed bin;
dcl arr2 (2:5, 4) fixed bin;
dcl 1 str3 (*) aligned, 2 element, 3 fb fixed bin, 3 fl float bin;
dcl arr4 (4:*, 3) float;
     call ioa_("array ep was somehosw called successfully.  Call not expected to support arrays.");
     return;

dcl  fb1 fixed bin(71);
dcl  fb2 fixed bin;
dcl  b17 bit(17) aligned;
dcl (divide, length) builtin;

FB3: entry(fb1, fb2, b17);
     call ioa_("fb3: fb1=^d, fb2=^d, b17=""^b""b",
	fb1, fb2, b17);
     return;


dcl  b24 bit(24) aligned;
dcl  b24V bit(24) var;

bit24:
     entry(b24, b24V);
     call ioa_("bit24: bit24=""^v.4b""b4, bit24V=""^v.4b""b4", 6, b24, divide(length(b24V)+3,4,35), b24V);
     call ioa_("EXPECT bit24: Upon return, parm01=""CDEF""b4, parm02=""8ACD""b4");

     b24 = "cdef"b4;
     b24V = "8acd"b4;

     return;
     
call_et:
     entry(code);

  dcl  call_et_$overflow_error fixed bin(35) ext static;

     call ioa_("call_et:  addr(call_et_$overflow_error) = ^p", addr(call_et_$overflow_error));
     call ioa_("EXPECT call_et: code of overflow error");

     code = call_et_$overflow_error;
     return;
     

dcl fd10 fixed dec(10,2);
dcl fd59 fixed dec(59,0);
dcl fl1 float bin;
dcl fl2 float bin(63);
dcl pt ptr aligned;

FB5: entry(fb1, fb2, fl1, fl2, pt);
     call ioa_("fb5: fb1=^d, fb2=^d, fl1=^f, fl2=^f, pt=^p",
	fb1, fb2, fl1, fl2, pt);
     return;

FD:  entry(fd10, fd59) returns(fixed dec(12,4));
     call ioa_("FD: fd10=^.2f, fd59=^d", fd10, fd59);
     call ioa_("EXPECT FD: return value should be whatever was in fd10 (1st argument).");
     return(fd10);

fl5: entry(fl1, fl2, fb1, fb2, pt);
     call ioa_("fl5: fl1=^f, fl2=^f, fb1=^d, fb2=^d, pt=^p",
	fl1, fl2, fb1, fb2, pt);
     return;
     

chAligned: entry() returns(char(*) aligned);
    call ioa_("return value should be: Hal");
    return("Hal");

chVar: entry() returns(char(*) varying);
    call ioa_("return value should be: Sal");
    return("Sal");


ch: entry(chars1, chars2) returns(char(*));

dcl chars1 char(*);
dcl chars2 char(*);

    call ioa_("ch: chars1='^va', chars2='^va'", length(chars1), chars1, length(chars2), chars2);
    call ioa_("return value should be: hello");
    return("hello");




dcl result char(50);

call_ch: 
    entry();
  dcl call_test_$ch entry(char(*), char(*)) returns(char(*));
    result = call_test_$ch("abc", "defgh");
    call ioa_("call_ch: returns: '^a'", result);
    return;

call_chAligned: 
    entry();
  dcl call_test_$chAligned entry() returns(char(*) aligned);
    result = call_test_$chAligned();
    call ioa_("call_chAligned: returns: '^a'", result);
    return;

dcl resultV char(1000) var;

call_chVar:
    entry();
  dcl call_test_$chVar entry() returns(char(*) var);
    resultV = call_test_$chVar();
    call ioa_("call_chVar: returns: '^a'", resultV);
    return;


arrRet:
    entry() returns((*) fixed bin(35));
    dcl arr (10) fixed bin(35);
    arr(*) = 1;
    return (arr);
    
call_arrRet:
    entry();
  dcl call_test_$arrRet entry() returns((*) fixed bin(35));
    call arr_desc( call_test_$arrRet() );
    return;
    
arr_desc:
    entry (arrD);
  dcl arrD (*) fixed bin(35);
    call ioa_("call_arrRet: dimension(array)=^d", dimension(arrD,1));
  dcl i fixed bin;
    do i = 1 to dimension(arrD,1);
         call ioa_("  arrD(^2d): ^d", i, arrD(i));
         end;
    return;
    
    

dcl bits1 bit(*);
dcl bits2 bit(*);

bts: entry(bits1, bits2) returns(bit(*));
     call ioa_("bts: bits1='^[^b^;^s^]', bits2='^[^b^;^s^]'", length(bits1)>0, bits1, length(bits2)>0, bits2);
     call ioa_("return value should be: 001100110011");
     return("001100110011"b);

btVar: 
     entry() returns(bit(*) varying);
     call ioa_("return value should be: 1001001001");
     return("1001001001"b);



dcl bitsa bit(*) aligned;
dcl bit2 bit(2);
dcl bit5a bit(5) aligned;
dcl bit36v bit(36) varying;

dcl charsa char(*) aligned;
dcl char2 char(2);
dcl char5a char(5) aligned;
dcl char36v char(36) varying;
dcl char36vu char(36) varying unaligned;
dcl char50va char(50) varying aligned;

dcl ioa_ entry options(variable);

FBa: entry (fba);
  dcl fba (5) fixed bin;
     call ioa_("FBa: fba(1)=^d, fba(2)=^d, fba(3)=^d, fba(4)=^d, fba(5)=^d",
	fba(1), fba(2), fba(3), fba(4), fba(5));
     return;

FBaa: entry (fbaa);
  dcl fbaa (2,3) fixed bin;
     call ioa_("FBa: fbaa(1,1)=^d, fbaa(1,2)=^d, fbaa(1,3)=^d, fbaa(2,1)=^d, fbaa(2,2)=^d, fbaa(2,3)=^d",
	fbaa(1,1), fbaa(1,2), fbaa(1,3), fbaa(2,1), fbaa(2,2), fbaa(2,3));
     return;

FBas: entry (fbas);
  dcl fbas (*) fixed bin;
      call ioa_("dcl FBas (^d) fixed bin;", dimension(fbas,1));
      if dimension(fbas,1) >= 5 then
	 call ioa_("FBas: fbas(1)=^d, fbas(2)=^d, fbas(3)=^d, fbas(4)=^d, fbas(5)=^d",
	      fbas(1), fbas(2), fbas(3), fbas(4), fbas(5));
     return;

bt: entry(bitsa, bit2, bit5a, bit36v);
     call ioa_("bt: bitsa='^b'b, bit2='^b'b, bit5a='^b'b, bit36v='^b'b",
	bitsa, bit2, bit5a, bit36v);
     return;

CH5: entry(charsa, char2, char5a, char36v, char50va) returns(char(*) var);
    call ioa_("CH5: charsa='^a',\n char2='^a', char5a='^a', char36v='^a',\n char50va='^a'",
         charsa, char2, char5a, char36v, char50va);
    return (char36v);

chvu: entry(char36vu);
      call ioa_("chvu: char36vu='^a'",
	 char36vu);
      return;

dcl (n0,  n1,  n2,  n3,  n4,  n5,  n6,  n7,  n8,  n9 ) fixed bin;
dcl (n10, n11, n12, n13, n14, n15, n16, n17, n18, n19) float bin;
dcl (n20, n21, n22, n23, n24, n25, n26, n27, n28, n29) char(*);
dcl (n30, n31, n32, n33, n34, n35, n36, n37, n38, n39) char(20) var;
dcl (n40, n41, n42, n43, n44, n45, n46, n47, n48, n49) char(40);
dcl (m0,  m1,  m2,  m3,  m4,  m5,  m6,  m7,  m8,  m9 ) fixed bin;
dcl (m10, m11, m12, m13, m14, m15, m16, m17, m18, m19) float bin;
dcl (m20, m21, m22, m23, m24, m25, m26, m27, m28, m29) char(*);
dcl (m30, m31, m32, m33, m34, m35, m36, m37, m38, m39) char(20) var;
dcl (m40, m41, m42, m43, m44, m45, m46, m47, m48, m49) char(40);
dcl (N0,  N1,  N2,  N3,  N4,  N5,  N6,  N7,  N8,  N9 ) fixed bin;
dcl (N10, N11, N12, N13, N14, N15, N16, N17, N18, N19) float bin;
dcl (N20, N21, N22, N23, N24, N25, N26, N27, N28, N29) char(*);
dcl (N30, N31, N32, N33, N34, N35, N36, N37, N38, N39) char(20) var;
dcl (N40, N41, N42, N43, N44, N45, N46, N47, N48, N49) char(40);
dcl (M0,  M1,  M2,  M3,  M4,  M5,  M6,  M7,  M8,  M9 ) fixed bin;
dcl (M10, M11, M12, M13, M14, M15, M16, M17, M18, M19) float bin;
dcl (M20, M21, M22, M23, M24, M25, M26, M27, M28, M29) char(*);
dcl (M30, M31, M32, M33, M34, M35, M36, M37, M38, M39) char(20) var;
dcl (M40, M41, M42, M43, M44, M45, M46, M47, M48, M49) char(40);
dcl (o1) fixed bin;

n200: entry (n0,  n1,  n2,  n3,  n4,  n5,  n6,  n7,  n8,  n9,
	   n10, n11, n12, n13, n14, n15, n16, n17, n18, n19,
	   n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
	   n30, n31, n32, n33, n34, n35, n36, n37, n38, n39,
	   n40, n41, n42, n43, n44, n45, n46, n47, n48, n49,
	   m0,  m1,  m2,  m3,  m4,  m5,  m6,  m7,  m8,  m9,
	   m10, m11, m12, m13, m14, m15, m16, m17, m18, m19,
	   m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
	   m30, m31, m32, m33, m34, m35, m36, m37, m38, m39,
	   m40, m41, m42, m43, m44, m45, m46, m47, m48, m49,
	   N0,  N1,  N2,  N3,  N4,  N5,  N6,  N7,  N8,  N9,
	   N10, N11, N12, N13, N14, N15, N16, N17, N18, N19,
	   N20, N21, N22, N23, N24, N25, N26, N27, N28, N29,
	   N30, N31, N32, N33, N34, N35, N36, N37, N38, N39,
	   N40, N41, N42, N43, N44, N45, N46, N47, N48, N49,
	   M0,  M1,  M2,  M3,  M4,  M5,  M6,  M7,  M8,  M9,
	   M10, M11, M12, M13, M14, M15, M16, M17, M18, M19,
	   M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
	   M30, M31, M32, M33, M34, M35, M36, M37, M38, M39,
	   M40, M41, M42, M43, M44, M45, M46, M47, M48, M49);
      return;

n201: entry (n0,  n1,  n2,  n3,  n4,  n5,  n6,  n7,  n8,  n9,
	   n10, n11, n12, n13, n14, n15, n16, n17, n18, n19,
	   n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
	   n30, n31, n32, n33, n34, n35, n36, n37, n38, n39,
	   n40, n41, n42, n43, n44, n45, n46, n47, n48, n49,
	   m0,  m1,  m2,  m3,  m4,  m5,  m6,  m7,  m8,  m9,
	   m10, m11, m12, m13, m14, m15, m16, m17, m18, m19,
	   m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
	   m30, m31, m32, m33, m34, m35, m36, m37, m38, m39,
	   m40, m41, m42, m43, m44, m45, m46, m47, m48, m49,
	   N0,  N1,  N2,  N3,  N4,  N5,  N6,  N7,  N8,  N9,
	   N10, N11, N12, N13, N14, N15, N16, N17, N18, N19,
	   N20, N21, N22, N23, N24, N25, N26, N27, N28, N29,
	   N30, N31, N32, N33, N34, N35, N36, N37, N38, N39,
	   N40, N41, N42, N43, N44, N45, N46, N47, N48, N49,
	   M0,  M1,  M2,  M3,  M4,  M5,  M6,  M7,  M8,  M9,
	   M10, M11, M12, M13, M14, M15, M16, M17, M18, M19,
	   M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
	   M30, M31, M32, M33, M34, M35, M36, M37, M38, M39,
	   M40, M41, M42, M43, M44, M45, M46, M47, M48, M49,
	   o1);

m1: entry();
  dcl f fixed bin(35);
    unspec(f) = "100000000000000000000000000000000000"b;
    call ioa_("^d", f);
    return;

m2: entry( ars1, ars2, ars3, ars4, ars5, ars6, ars7);
  dcl ars1 (*) fixed bin;
  dcl ars2 (4) fixed bin;
  dcl ars3 (4:*) fixed bin;
  dcl ars4 (8,4) fixed bin;
  dcl ars5 (*,4) fixed bin;
  dcl ars6 (4,*) fixed bin;
  dcl ars7 (*,*) fixed bin;
    return;

m3: entry( struct1, fb1);
  dcl 1 struct1 aligned,
      2 fb2 fixed bin,
      2 fl2 float bin(63);

cplx:
    entry (my_cplx);
    
  dcl  my_cplx complex fixed bin;
    return;

area:
    entry (my_area);
    
  dcl  my_area area(*);
    return;

areap:
    entry (my_area_ptr);
    
  dcl  my_area_ptr ptr;
    return;

times:
    entry (clock_in, clock_out);
  dcl (clock_in, clock_out) fixed bin(71) aligned;
    clock_out = clock_in;
    return;

end call_test_;

