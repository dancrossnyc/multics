
/****^  HISTORY COMMENTS:
  1) change(2016-08-09,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Test program for call_entry_info_$from_declaration subroutine (in
     call_entry_info_.rd).
                                                   END HISTORY COMMENTS */

call_ei_test:
cet: proc;

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
  dcl  PROC char(12) int static options(constant) init("call_ei_test");

  dcl  com_err_ entry() options(variable);
  dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
  dcl  ioa_ entry() options(variable);

  dcl (error_table_$bad_conversion,
       error_table_$size_error)
			     fixed bin(35) ext static;

  dcl (null, onsource) builtin;
  dcl (cleanup, conversion, size) condition;
     
  dcl  code fixed bin(35);
  dcl (dL, veL) fixed bin(21);
  dcl (dP, veP) ptr;

  dcl  virtual_entry char(veL) based(veP);
     call cu_$arg_ptr(1, veP, veL, code);
     if code ^= 0 then do;
	call com_err_ (code, PROC, "Syntax: ^a virtual_entry debugI", PROC);
	return;
	end;

  dcl  debug char(dL) based(dP);
  dcl  debugI fixed bin(3) unsigned init(4);
     call cu_$arg_ptr(2, dP, dL, code);
     if code = 0 then do;
	on conversion begin;
	     call com_err_ (error_table_$bad_conversion, PROC, "debugI value: ^a", onsource());
	     go to EXIT_call;
	     end;
	on size begin;
	     call com_err_ (error_table_$size_error, PROC, "debugI value: ^a", onsource());
	     go to EXIT_call;
	     end;
	debugI = binary(debug,3,0);
	end;
     

  dcl  entry_description char(2000) varying;		/* String to hold a complete description of virtualEntry  */
						/*  for display purposes, and perhaps as source from      */
						/*  which to fabricate entry descriptors.	        */
  dcl  entry_annotation char(100) var;			/* get_entry_point_dcl_$emacs hunt details.	        */

  dcl  get_entry_point_dcl_$emacs entry (char(*), fixed bin, fixed bin, char(*) var, char(32) var, char(100) var);

     call get_entry_point_dcl_$emacs (virtual_entry, 0, 0, entry_description, "", entry_annotation);
     if entry_description = "" then do;
	call com_err_ (0, PROC, "^a  Calling get_entry_point_dcl_$emacs for: ^a", entry_annotation, virtual_entry);
	go to EXIT_call;
	end;

     if entry_annotation = "abbrev" then do;
	call com_err_ (0, PROC, "Abbreviation: ^a => ^a", virtual_entry, entry_description);
	go to EXIT_call;
	end;

  dcl  nameString char(256) var;
     
     nameString = reverse (before (reverse (virtual_entry), ">")); 
     entry_description = "dcl " || nameString || " " || entry_description || ";";

     entry_info_ptr = null;
     on cleanup call call_entry_info_$cleanup(entry_info_ptr);

     call call_entry_info_$from_declaration (PROC, virtual_entry, entry_description, debugI, entry_info_ptr, code);
     if code ^= 0 then do;
	call ioa_();
	call com_err_(code, PROC, "^a:^/  ^a", virtual_entry, entry_description);
	call ioa_();
	go to EXIT_call;
	end;
     call call_entry_info_$cleanup(entry_info_ptr);

EXIT_call:
     return;
%page;
%include call_entry_info_;

     end call_ei_test;
