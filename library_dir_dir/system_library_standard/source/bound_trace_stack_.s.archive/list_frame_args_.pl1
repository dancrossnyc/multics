/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-09-08,DGHowe), approve(86-09-08,MCR7524),
     audit(86-09-16,Ginter), install(86-09-24,MR12.0-1158):
     check for command_name_arglist mbz and pad1 = "0"b and print out the
     command name if it is available.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
list_frame_args_:
     proc (framep, ss);

/* This program is an adaptation of Steve Webber's list_arg_ routine from db,
   for use by trace_stack_. */
/* rewritten 8/10/81 by Melanie Weaver to use arithmetic_to_ascii_ */
/* Changed to print "(no type information)" if Pascal & if no descriptors 10/18/83 S. Herbst */
/* Modified Aug 7, 1986 by Doug Zwick to fix bug introduced by the command
   processor argument changes installed for C (MCR 7375).  Add functionality
   to display the command name field if supplied in the arg list, and to
   display the value of the argument list pointer.  Also changed to use
   arg_list.incl.pl1 so that peruse_crossref will show this module as using
   the argument list.  */

dcl	framep		ptr,
	ss		char (32) aligned;

dcl	(addr, addrel, hbound, lbound, min, null, substr, fixed, bin, max, verify, unspec)
			builtin;

dcl	argp		ptr;
dcl	ss_ptr		ptr;
dcl	ap		ptr;			/* ptr to arglist. */
dcl	strp		ptr;
dcl	tp		ptr;
dcl	xdesc		(64) ptr;

dcl	(i, j, k)		fixed bin;
dcl	(min_arg, max_arg, type, xtype)
			fixed bin;
dcl	(no_args, no_desc, strl, ndims, scale)
			fixed bin;
dcl	(xstrl, xndims, xscale, xnargs)
			fixed bin;
dcl	ec		fixed bin (35);

dcl	c75		char (75) aligned;
dcl	(ttype, xttype)	char (24);
dcl	ascii_representation
			char (132) varying;

dcl	(packed, xpacked)	bit (1) aligned;
dcl	begin_block_entries (2) bit (36) aligned internal static options (constant)
			init ("000614272100"b3 /* tsp2 pr0|614 */, "001376272100"b3 /* tsp2 pr0|1376 */);

dcl	1 its_ptr		aligned like its;

dcl	condition_	entry (char (*), entry);
dcl	get_entry_arg_descs_
			entry (ptr, fixed bin, (*) ptr, fixed bin (35));
dcl	decode_descriptor_	entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
dcl	interpret_ptr_	entry (ptr, ptr, ptr);
dcl	ioa_$ioa_stream	entry options (variable);
dcl	ioa_$ioa_stream_nnl entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	arithmetic_to_ascii_
			entry (ptr, fixed bin, bit (1) aligned, fixed bin, fixed bin, char (132) varying);
dcl	iox_$look_iocb	entry (char (*), ptr, fixed bin (35));
dcl	display_file_value_ entry (ptr, file, fixed bin (35));

dcl	itsptr		ptr based aligned;
dcl	packptr		ptr based unaligned;
dcl	fword		(4) fixed bin (35) based (argp);
dcl	bcs		char (100) based (argp);
dcl	char_string	char (strl) based (argp);
dcl	based_bit		bit (36) aligned based;
dcl	bit_string	bit (strl) based (argp);
dcl	based_file	file based;


dcl	1 label_variable	based (argp) aligned,
	  2 ptr		ptr,
	  2 stack		ptr;

dcl	1 arglist		aligned like command_name_arglist based (ap);


dcl	LEGAL		char (96) int static
			init
			/* Printables except PAD, but with BS */ (
			" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
			);

/* ====================================================================== */

	sp = framep;				/* Copy argument. */
	unspec (ap), unspec (its_ptr) = unspec (stack_frame.arg_ptr);
						/* Extract argument ptr. */
	if its_ptr.its_mod ^= ITS_MODIFIER		/* use valid pl1 code */
	then go to badap;
	if ap = null
	then do;
badap:
	     if addr (sp -> stack_frame.entry_ptr) -> its.its_mod = ITS_MODIFIER
	     then if sp -> stack_frame.entry_ptr ^= null
		then do j = 1 to hbound (begin_block_entries, 1);
			if addrel (sp -> stack_frame.entry_ptr, 1) -> based_bit = begin_block_entries (j)
			then do;
			     call ioa_$ioa_stream (ss, "^-Begin block; no arguments.");
			     return;
			end;
		     end;
	     call ioa_$ioa_stream (ss, "^-Bad argument pointer.");
	     return;
	end;
	strp = addr (strbuf);
	no_args = fixed (arglist.arg_count);		/* get the number of arguments */
	no_desc = fixed (arglist.desc_count);		/* and the number of descriptors */
	if arglist.mbz ^= "0"b
	then go to badah;
	if arglist.call_type ^= 4
	then if arglist.call_type ^= 8
	     then go to badah;
	if no_desc ^= 0
	then if no_desc ^= no_args
	     then do;
badah:
		call ioa_$ioa_stream (ss, "^-Argument list header invalid.");
		return;
	     end;

	call ioa_$ioa_stream (ss, "  Argument list pointer: ^p", ap);


/*	The command processor will fill in the command name field with
	the name by which the command was invoked.  Its there so we
	might as well display it.  */

	if arglist.has_command_name then
	     call ioa_$ioa_stream (ss, "^-Command name: ^a",
		substr (arglist.command_name_ptr -> char_string, 1,
			arglist.command_name_length));


	call get_entry_arg_descs_ (stack_frame.entry_ptr, xnargs, xdesc, ec);

	if xnargs > 0
	then /* Many programs like commands fetch args thru cu_ */
	     if xnargs ^= no_args
	     then /* .. and so we special-case that. */
		call ioa_$ioa_stream (ss, "^-Warning: ^d arguments expected, ^d supplied.", xnargs, no_args);
	if no_args = 0
	then do;					/* check for no arguments */
	     call ioa_$ioa_stream (ss, "^-No arguments.");
	     return;
	end;
	if no_args > 64
	then do;
	     call ioa_$ioa_stream (ss, "^-Only first 64 args of ^d will be listed.", no_args);
	     no_args = 64;
	     if xnargs > 64
	     then xnargs = 64;
	     if no_desc ^= 0
	     then no_desc = 64;
	end;
	min_arg = 1;				/* print out all arguments */
	max_arg = no_args;

	call condition_ ("any_other", intproc);

	do j = min_arg to max_arg;			/* loop through the desired number of args */
	     argp = arglist.arg_ptrs (j);		/* get pointer to the argument */
	     if no_desc ^= 0
	     then do;				/* if we have descriptors, look at them */
		call decode_descriptor_ (ap, j, type, packed, ndims, strl, scale);
		if xnargs >= j
		then /* Does procedure expect arguments? */
		     if xdesc (j) ^= null
		     then do;			/* Yes. Do we know what this arg shd be? */
			call decode_descriptor_ (xdesc (j), 0, xtype, xpacked, xndims, xstrl, xscale);
			if xtype ^= type
			then do;
			     if type >= lbound (data_type_info_$info, 1) & type <= hbound (data_type_info_$info, 1)
			     then ttype = substr(type_name (type),1,24);
			     else call ioa_$rsnnl ("type ^d", ttype, k, type);
			     if xtype >= lbound (data_type_info_$info, 1)
				& xtype <= hbound (data_type_info_$info, 1)
			     then xttype = substr(type_name (xtype),1,24);
			     else call ioa_$rsnnl ("type ^d", xttype, k, xtype);
			     call ioa_$ioa_stream (ss, "^-Warning: arg ^d type mismatch: ^a supplied, ^a expected.",
				j, ttype, xttype);
			end;
			if xpacked ^= packed	/* Check that packed attributes match */
			then call ioa_$ioa_stream (ss,
				"^-Warning: arg ^d packed mismatch: ^d supplied, ^d expected.", j,
				bin (packed, 35), bin (xpacked, 35));
			if xndims ^= ndims
			then call ioa_$ioa_stream (ss,
				"^-Warning: arg ^d ndims mismatch: ^d supplied, ^d expected.", j, ndims, xndims);
			if xstrl ^= strl
			then if xtype < pointer_dtype
			     then call ioa_$ioa_stream (ss,
				     "^-Warning: arg ^d precision mismatch: ^d supplied, ^d expected.", j, strl,
				     xstrl);
			     else if xstrl ^= 16777215
			     then /* No fuss abt char (*) */
				call ioa_$ioa_stream (ss,
				     "^-Warning: arg ^d length mismatch: ^d supplied, ^d expected.", j, strl,
				     xstrl);
			if xscale ^= scale
			then call ioa_$ioa_stream (ss,
				"^-Warning: arg ^d scale mismatch: ^d supplied, ^d expected.", j, scale, xscale);
		     end;
	     end;
	     else if xnargs >= j
	     then do;				/* Callee might have descriptors for args. */
		if xdesc (j) = null
		then go to guess;			/* .. and then again he might not. */
		call decode_descriptor_ (xdesc (j), 0, type, packed, ndims, strl, scale);
	     end;
	     else if stack_frame.translator_id = "000010"b3 then type = -1;   /* Pascal frame */
	     else do;				/* try to find out what type by heuristics */
guess:
		packed = "0"b;
		scale = 0;
		ndims = 0;
		if argp -> its.its_mod = ITS_MODIFIER
		then type = pointer_dtype;		/* assume pointer */
		else do;
		     strl = verify (bcs, LEGAL) - 1;	/* Scan for last legal char in string. */
		     if strl < 0
		     then strl = 100;		/* If all legal, print first 100. */
		     if strl >= 2
		     then type = char_dtype;
		     else type = -1;		/* full word octal */
		end;
	     end;

	     if type = -1
	     then do;
		call ioa_$ioa_stream (ss, "^-ARG ^2d: ^w (no type information)", j, fword (1));
						/* no descriptor; print full word octal */
		go to skiparg;
	     end;

	     else if type < lbound (data_type_info_$info, 1) | type > hbound (data_type_info_$info, 1)
	     then call ioa_$ioa_stream (ss, "^-ARG ^2d: (bad type ^d at ^p) ^w", j, type, argp, fword (1));

	     else if data_type_info_$info (type).arithmetic
	     then do;
		call arithmetic_to_ascii_ (argp, type, packed, strl, scale, ascii_representation);
		call ioa_$ioa_stream (ss, "^-ARG ^2d: ^a", j, ascii_representation);
	     end;

	     else if type = pointer_dtype
	     then do;				/* Pointer */
		if packed
		then do;				/* packed ptr */
		     tp = argp -> packptr;
		     go to pptr;
		end;
		if argp -> its.its_mod = ITS_MODIFIER
		then do;
		     tp = argp -> itsptr;
pptr:
		     call interpret_ptr_ (tp, null, strp);
		     call ioa_$ioa_stream (ss, "^-ARG ^2d: ^p ^a^a|^a ^a", j, tp, struc.segment, struc.entryn,
			struc.offset, struc.comment);
		end;
		else call ioa_$ioa_stream (ss, "^-ARG ^2d: ^w  ^w", j, fword (1), fword (2));
	     end;

	     else if type = offset_dtype		/* Offset */
	     then call ioa_$ioa_stream (ss, "^-ARG ^2d: ^w", j, fword (1));

	     else if type = label_dtype | type = entry_dtype
						/* Label, Entry */
	     then do;
		call interpret_ptr_ (argp -> label_variable.ptr, argp -> label_variable.stack, strp);
		call ioa_$ioa_stream (ss, "^-ARG ^2d: ^p, ^p ^a^a|^a ^a", j, label_variable.ptr, label_variable.stack,
		     struc.segment, struc.entryn, struc.offset, struc.comment);
	     end;

	     else if type = bit_dtype | type = varying_bit_dtype
						/* Bit string */
	     then do;
		if type = varying_bit_dtype
		then strl = addrel (argp, -1) -> fword (1);
		c75 = """";			/* initial quote */
		k = 0;				/* count 1-bits */
		do i = 1 to min (strl, 72);
		     if substr (bit_string, i, 1)
		     then do;
			k = k + 1;
			substr (c75, i + 1, 1) = "1";
		     end;
		     else substr (c75, i + 1, 1) = "0";
		end;
		substr (c75, i + 1, 2) = """b";
		if (strl <= 72 & strl > 1)
		then /* Maybe compress representation */
		     if k = 0
		     then call ioa_$rsnnl ("(^d)""0""b", c75, k, strl);
		     else if k = strl
		     then call ioa_$rsnnl ("(^d)""1""b", c75, k, strl);
		call ioa_$ioa_stream (ss, "^-ARG ^2d: ^a", j, c75);
	     end;

	     else if type = char_dtype | type = varying_char_dtype
						/* Character string */
	     then do;
		if type = varying_char_dtype
		then strl = min (80, max (addrel (argp, -1) -> fword (1), 0));
		call ioa_$ioa_stream (ss, "^-ARG ^2d: ""^va""", j, strl, char_string);
	     end;

	     else if type = file_dtype		/* File */
	     then do;
		call ioa_$ioa_stream_nnl (ss, "^-ARG ^2d: ", j);
		call iox_$look_iocb ((ss), ss_ptr, ec);
		if ec = 0
		then call display_file_value_ (ss_ptr, argp -> based_file, ec);
		if ec ^= 0
		then call ioa_$ioa_stream (ss, "(file at ^p)", argp);
	     end;

	     else call ioa_$ioa_stream (ss, "^-ARG ^2d: (^a at ^p) ^w", j, type_name (type), argp, fword (1));

	     if ndims > 0
	     then call ioa_$ioa_stream (ss, "^-^-(^d-dim array)", ndims);

skiparg:
	end;

/* ------------------------------------------------------- */

intproc:
     proc (mcp, cname, cop, infop, cont);
dcl	(mcp, cop, infop)	ptr,
	cname		char (*),
	cont		bit (1);

/* format: ^delnl */
	if cname = "program_interrupt"
	     | cname = "finish"
	     | cname = "quit"
	then do;
	     cont = "1"b;
	     return;
	end;
						/* format: revert */
	if cname = "cleanup"
	then return;

	if infop ^= null
	then if infop -> condition_info_header.action_flags.quiet_restart
	     then return;

	call ioa_$ioa_stream (ss, "^-ARG ^2d not accessible. - ^a", j, cname);
	go to skiparg;
     end;

%include stack_frame;

%include arg_list;

%include interpret_ptr_struc;

%include its;

%include data_type_info_;

%include condition_info_header;

%include std_descriptor_types;

%include probe_data_type_names;


     end list_frame_args_;
