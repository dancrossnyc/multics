/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Manages the subsystem utilities (ssu_) replaceable procedures */

/* Created:  by W. Olin Sibert */
/* Modified: 10 December 1981 by G. Palter to make arg_count, arg_ptr, return_arg, and arg_list_ptr replaceable */
/* Modified: 14 February 1982 by G. Palter to rename eval_string to evaluate_active_string */
/* Modified: 8 June 1982 by G. Palter to add (get set reset)_request_processor_options and get_default_rp_options */
/* Modified: 6 November 1984 by G. Palter to add get_subsystem_and_request_name */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_procedure_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_proc_name character (*) parameter;
dcl  P_entry_variable entry variable parameter;
dcl  P_code fixed binary (35) parameter;


/* Remaining declarations */

dcl  proc_idx fixed binary;

dcl  error_table_$noentry fixed binary (35) external;

/* format: off */

dcl (ssu_error_$abort_line, ssu_error_$abort_subsystem, ssu_error_$print_message, ssu_misc_procs_$cpescape,
     ssu_misc_procs_$unknown_request, ssu_listen_$listen, ssu_request_processor_$execute_line,
     ssu_request_processor_$evaluate_active_string, ssu_execute_$execute_request, ssu_request_mgr_$locate_request,
     ssu_$just_return, ssu_misc_procs_$ready_proc, ssu_arglist_$arg_count, ssu_arglist_$arg_ptr, ssu_arglist_$return_arg,
     ssu_arglist_$arg_list_ptr, ssu_request_processor_$get_default_rp_options, ssu_request_processor_$get_rp_options,
     ssu_request_processor_$reset_rp_options, ssu_request_processor_$set_rp_options,
     ssu_invocation_$get_subsystem_and_request_name)
	entry () options (variable);

dcl  PROC_NAME (23) character (32) static options (constant) initial (
	"abort_line",	     "abort_subsystem",	     "print_message",	     "program_interrupt",
	"pre_request_line",	     "post_request_line",	     "ready",		     "cpescape",
	"unknown_request",	     "listen",		     "execute_line",	     "evaluate_active_string",
	"invoke_request",	     "locate_request",	     "arg_count",		     "arg_ptr",
	"return_arg",	     "arg_list_ptr",	     "get_default_rp_options",     "get_request_processor_options",
	"reset_request_processor_options",		     "set_request_processor_options",
	"get_subsystem_and_request_name");

/* format: on */

dcl  hbound builtin;

/**/

/* Returns the entry which would be invoked by the specified replaceable ssu_ entry */

get:
     entry (P_sci_ptr, P_proc_name, P_entry_variable, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call lookup_proc_name (P_proc_name, proc_idx, P_code);
	if P_code ^= 0 then return;			/* not found */

	call get_or_set_entry (proc_idx, "0"b, P_entry_variable);

	return;



/* Sets the entry to be invoked by the specified replaceable ssu_ entry */

set:
     entry (P_sci_ptr, P_proc_name, P_entry_variable, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call lookup_proc_name (P_proc_name, proc_idx, P_code);
	if P_code ^= 0 then return;			/* not found */

	call get_or_set_entry (proc_idx, "1"b, P_entry_variable);

	return;

/**/

/* Returns the default entry for the specified replaceable ssu_ entry */

get_default:
     entry (P_sci_ptr, P_proc_name, P_entry_variable, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call lookup_proc_name (P_proc_name, proc_idx, P_code);
	if P_code ^= 0 then return;			/* not found */

	P_entry_variable = get_default_entry (proc_idx);

	return;



/* Sets the specified ssu_ replaceable entry to its default value */

set_default:
     entry (P_sci_ptr, P_proc_name, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call lookup_proc_name (P_proc_name, proc_idx, P_code);
	if P_code ^= 0 then return;			/* not found */

	call get_or_set_entry (proc_idx, "1"b, get_default_entry (proc_idx));

	return;



/* Sets all replaceable entries to the default values (called during initialization only) */

set_all_default:
     entry (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	do proc_idx = 1 to hbound (PROC_NAME, 1);	/* loop through them all */
	     call get_or_set_entry (proc_idx, "1"b, get_default_entry (proc_idx));
	end;

	return;

/**/

/* Validates that the caller's procedure name is valid and returns its index */

lookup_proc_name:
     procedure (p_name, p_idx, p_code);

dcl  p_name character (*) parameter;
dcl  p_idx fixed binary parameter;
dcl  p_code fixed binary (35) parameter;

dcl  idx fixed binary;
dcl  proc_name character (32);

	proc_name = p_name;

	do idx = 1 to hbound (PROC_NAME, 1);
	     if proc_name = PROC_NAME (idx) then do;
		p_code = 0;			/* found it */
		p_idx = idx;
		return;
	     end;
	end;

	p_idx = -1;
	p_code = error_table_$noentry;

	return;

     end lookup_proc_name;

/**/

/* Returns the default entry variable for handling the specified operation */

get_default_entry:
     procedure (p_index) returns (entry () options (variable) variable);

dcl  p_index fixed binary parameter;
dcl  return_entry entry () options (variable) variable;

	go to GET_DEFAULT (p_index);			/* do it */


GET_DEFAULT_DONE:					/* and "return" here when done. Oh, if only we had subscripted */
	return (return_entry);			/* internal procedures..... */


GET_DEFAULT (1):					/* individual handlers */
	return_entry = ssu_error_$abort_line;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (2):					/* abort_subsystem */
	return_entry = ssu_error_$abort_subsystem;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (3):					/* print_message */
	return_entry = ssu_error_$print_message;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (4):					/* program_interrupt */
	return_entry = ssu_$just_return;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (5):					/* pre_request_line */
	return_entry = ssu_$just_return;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (6):					/* post_request_line */
	return_entry = ssu_$just_return;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (7):					/* ready */
	return_entry = ssu_misc_procs_$ready_proc;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (8):					/* cpescape */
	return_entry = ssu_misc_procs_$cpescape;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (9):					/* unknown_request */
	return_entry = ssu_misc_procs_$unknown_request;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (10):					/* listen */
	return_entry = ssu_listen_$listen;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (11):					/* execute_line */
	return_entry = ssu_request_processor_$execute_line;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (12):					/* evaluate_active_string */
	return_entry = ssu_request_processor_$evaluate_active_string;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (13):					/* invoke_request */
	return_entry = ssu_execute_$execute_request;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (14):					/* locate_request */
	return_entry = ssu_request_mgr_$locate_request;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (15):					/* arg_count */
	return_entry = ssu_arglist_$arg_count;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (16):					/* arg_ptr */
	return_entry = ssu_arglist_$arg_ptr;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (17):					/* return_arg */
	return_entry = ssu_arglist_$return_arg;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (18):					/* arg_list_ptr */
	return_entry = ssu_arglist_$arg_list_ptr;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (19):					/* get_default_rp_options */
	return_entry = ssu_request_processor_$get_default_rp_options;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (20):					/* get_request_processor_options */
	return_entry = ssu_request_processor_$get_rp_options;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (21):					/* reset_request_processor_options */
	return_entry = ssu_request_processor_$reset_rp_options;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (22):					/* set_request_processor_options */
	return_entry = ssu_request_processor_$set_rp_options;
	go to GET_DEFAULT_DONE;

GET_DEFAULT (23):					/* get_subsystem_and_request_name */
	return_entry = ssu_invocation_$get_subsystem_and_request_name;
	go to GET_DEFAULT_DONE;

     end get_default_entry;

/**/

/* Get or set the specified replaceable entry */

get_or_set_entry:
     proc (p_index, p_set_sw, p_entry_variable);

dcl  p_index fixed binary parameter;
dcl  p_set_sw bit (1) aligned parameter;
dcl  p_entry_variable entry () options (variable) variable parameter;

	go to GET_OR_SET (p_index);

GET_OR_SET_DONE:					/* "return" to here */
	return;


GET_OR_SET (1):					/* individual handlers */
	if p_set_sw then
	     sci.entries.abort_line = p_entry_variable;
	else p_entry_variable = sci.entries.abort_line;
	go to GET_OR_SET_DONE;

GET_OR_SET (2):
	if p_set_sw then
	     sci.entries.abort_subsystem = p_entry_variable;
	else p_entry_variable = sci.entries.abort_subsystem;
	go to GET_OR_SET_DONE;

GET_OR_SET (3):
	if p_set_sw then
	     sci.entries.print_message = p_entry_variable;
	else p_entry_variable = sci.entries.print_message;
	go to GET_OR_SET_DONE;

GET_OR_SET (4):
	if p_set_sw then
	     sci.entries.program_interrupt = p_entry_variable;
	else p_entry_variable = sci.entries.program_interrupt;
	go to GET_OR_SET_DONE;

GET_OR_SET (5):
	if p_set_sw then
	     sci.entries.pre_request_line = p_entry_variable;
	else p_entry_variable = sci.entries.pre_request_line;
	go to GET_OR_SET_DONE;

GET_OR_SET (6):
	if p_set_sw then
	     sci.entries.post_request_line = p_entry_variable;
	else p_entry_variable = sci.entries.post_request_line;
	go to GET_OR_SET_DONE;

GET_OR_SET (7):
	if p_set_sw then
	     sci.entries.ready = p_entry_variable;
	else p_entry_variable = sci.entries.ready;
	go to GET_OR_SET_DONE;

GET_OR_SET (8):
	if p_set_sw then
	     sci.entries.cpescape = p_entry_variable;
	else p_entry_variable = sci.entries.cpescape;
	go to GET_OR_SET_DONE;

GET_OR_SET (9):
	if p_set_sw then
	     sci.entries.unknown_request = p_entry_variable;
	else p_entry_variable = sci.entries.unknown_request;
	go to GET_OR_SET_DONE;

GET_OR_SET (10):
	if p_set_sw then
	     sci.entries.listen = p_entry_variable;
	else p_entry_variable = sci.entries.listen;
	go to GET_OR_SET_DONE;

GET_OR_SET (11):
	if p_set_sw then
	     sci.entries.execute_line = p_entry_variable;
	else p_entry_variable = sci.entries.execute_line;
	go to GET_OR_SET_DONE;

GET_OR_SET (12):
	if p_set_sw then
	     sci.entries.evaluate_active_string = p_entry_variable;
	else p_entry_variable = sci.entries.evaluate_active_string;
	go to GET_OR_SET_DONE;

GET_OR_SET (13):
	if p_set_sw then
	     sci.entries.invoke_request = p_entry_variable;
	else p_entry_variable = sci.entries.invoke_request;
	go to GET_OR_SET_DONE;

GET_OR_SET (14):
	if p_set_sw then
	     sci.entries.locate_request = p_entry_variable;
	else p_entry_variable = sci.entries.locate_request;
	go to GET_OR_SET_DONE;

GET_OR_SET (15):
	if p_set_sw then
	     sci.entries.arg_count = p_entry_variable;
	else p_entry_variable = sci.entries.arg_count;
	go to GET_OR_SET_DONE;

GET_OR_SET (16):
	if p_set_sw then
	     sci.entries.arg_ptr = p_entry_variable;
	else p_entry_variable = sci.entries.arg_ptr;
	go to GET_OR_SET_DONE;

GET_OR_SET (17):
	if p_set_sw then
	     sci.entries.return_arg = p_entry_variable;
	else p_entry_variable = sci.entries.return_arg;
	go to GET_OR_SET_DONE;

GET_OR_SET (18):
	if p_set_sw then
	     sci.entries.arg_list_ptr = p_entry_variable;
	else p_entry_variable = sci.entries.arg_list_ptr;
	go to GET_OR_SET_DONE;

GET_OR_SET (19):
	if p_set_sw then
	     sci.entries.get_default_rp_options = p_entry_variable;
	else p_entry_variable = sci.entries.get_default_rp_options;
	go to GET_OR_SET_DONE;

GET_OR_SET (20):
	if p_set_sw then
	     sci.entries.get_rp_options = p_entry_variable;
	else p_entry_variable = sci.entries.get_rp_options;
	go to GET_OR_SET_DONE;

GET_OR_SET (21):
	if p_set_sw then
	     sci.entries.reset_rp_options = p_entry_variable;
	else p_entry_variable = sci.entries.reset_rp_options;
	go to GET_OR_SET_DONE;

GET_OR_SET (22):
	if p_set_sw then
	     sci.entries.set_rp_options = p_entry_variable;
	else p_entry_variable = sci.entries.set_rp_options;
	go to GET_OR_SET_DONE;

GET_OR_SET (23):
	if p_set_sw then
	     sci.entries.get_subsys_and_request_name = p_entry_variable;
	else p_entry_variable = sci.entries.get_subsys_and_request_name;
	go to GET_OR_SET_DONE;

     end get_or_set_entry;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";

     end ssu_procedure_mgr_;
