/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */

/* Display the usage statistics recorded by ssu_ for a given subsystem */


/****^  HISTORY COMMENTS:
  1) change(81-09-01,Palter), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     Initial coding: primitive version without selection cabalities on user names
  2) change(81-11-02,Sibert), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     to change suffix to ".ssusage".
  3) change(82-01-21,Palter), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     to use a reference name to find the usage segment in most cases, accept
     -first N and -user star_name, and remove the short command name (sigh).
  4) change(82-12-15,Pattin), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     to add -version, version sort type, and improve totals processing.
  5) change(82-12-16,Palter), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     to allow -totals to be used with -user and -version and to allow
     -first N to be used with -user.
  6) change(83-10-18,Palter), approve(), audit(),
     install(86-02-26,MR12.0-1026):
     to allow matching by starname for the version.
  7) change(86-02-12,Newcomb), approve(86-02-12,MCR7335),
     audit(86-02-13,Margolin), install(86-02-26,MR12.0-1026):
     Upgraded to use (initiate terminate)_file_ and date_time_$format.
                                                   END HISTORY COMMENTS */

%page;
display_subsystem_usage:
     procedure () options (variable);


dcl  argument character (argument_lth) based (argument_ptr);
dcl  argument_lth fixed binary (21);
dcl  argument_ptr pointer;

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  1 field_ptrs aligned based (field_ptrs_ptr),
       2 n_ptrs fixed binary,
       2 ptr (usage_seg.count refer (field_ptrs.n_ptrs)) pointer unaligned;
dcl  field_ptrs_ptr pointer;

dcl  1 idxs aligned based (idxs_ptr),
       2 n_idxs fixed binary,
       2 idx (usage_seg.count refer (idxs.n_idxs)) fixed binary;
dcl  idxs_ptr pointer;

dcl  n_arguments fixed binary;

dcl  (have_usage_seg, found_by_refname, header, totals_only, sort_by_name, sort_by_count, sort_by_dtu, sort_by_version,
     reverse_sw) bit (1) aligned;

dcl  usage_seg_dirname character (168);
dcl  (subsystem_name, usage_seg_ename) character (32);

dcl  user_name character (32);
dcl  version_wanted character (32);
dcl  first_n fixed binary;
dcl  (selected_users, selected_count, selected_version_count) fixed binary;

dcl  code fixed binary (35);
dcl  idx fixed binary;

dcl  DISPLAY_SUBSYSTEM_USAGE character (32) static options (constant) initial ("display_subsystem_usage");

dcl  USAGE_SUFFIX character (7) static options (constant) initial ("ssusage");

dcl  HEADER_FORMAT character (76) static options (constant)
	initial ("^/^33tTotal^52tLast Version Used^/^11tUser^33tUsage^47tUsage^59tDate^70tID^/");
dcl  USER_FORMAT character (34) static options (constant) initial ("^24a^29t^9d^43t^9d^53t(^14a)^70t^a");
dcl  TOTALS_FORMAT character (68) static options (constant)
	initial ("^6tTotal (^d users):^29t^9d^[^43t^9d^;^s^]^[^vt^a^;^2s^]^[^70t^a^]^/");

/* format: off */
dcl (error_table_$badopt, error_table_$inconsistent, error_table_$noarg)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  com_err_ entry () options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  decode_clock_value_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$fs_get_path_name entry (pointer, character (*), fixed binary, character (*), fixed binary (35));
dcl  hcs_$make_ptr entry (pointer, character (*), character (*), pointer, fixed binary (35));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  ioa_ entry () options (variable);
dcl  match_star_name_ entry (character (*), character (*), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  sort_items_indirect_$bit entry (pointer, pointer, fixed binary (24));
dcl  sort_items_indirect_$char entry (pointer, pointer, fixed binary (24));
dcl  sort_items_indirect_$fixed_bin entry (pointer, pointer);
dcl  terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));

dcl  (addr, fixed, index, length, max, null, rtrim, search, substr, unspec) builtin;

dcl  cleanup condition;
%page;
/* display_subsystem_usage: entry () options (variable); */

	call cu_$arg_count (n_arguments, code);
	if code ^= 0 then do;			/* not called as a command */
	     call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE);
	     return;
	end;

	if n_arguments = 0 then do;
PRINT_USAGE_MESSAGE:
	     call com_err_$suppress_name (0, DISPLAY_SUBSYSTEM_USAGE,
		"Usage:  display_subsystem_usage subsystem_name {-control_args}");
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();

	usage_seg_ptr,				/* for cleanup handler */
	     field_ptrs_ptr, idxs_ptr = null ();

	on condition (cleanup) call clean_up ();


/* Scan the arguments */

	have_usage_seg = "0"b;			/* no pathname yet */

	header = "1"b;				/* print header by default */
	totals_only = "0"b;				/* ... and dump all the users */
	sort_by_name, sort_by_count,			/* ... no sorting by default */
	     sort_by_dtu, sort_by_version = "0"b;
	reverse_sw = "0"b;				/* ... in the default order */
	version_wanted, user_name = "";		/* ... don't select any particular entries */
	first_n = -1;				/* ... and print all the entries */


	do idx = 1 to n_arguments;

	     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));

	     if index (argument, "-") = 1 then
		if (argument = "-totals") | (argument = "-tt") then totals_only = "1"b;

		else if (argument = "-header") | (argument = "-he") then header = "1"b;

		else if (argument = "-no_header") | (argument = "-nhe") then header = "0"b;

		else if (argument = "-reverse") | (argument = "-rv") then reverse_sw = "1"b;

		else if (argument = "-no_reverse") | (argument = "-nrv") then reverse_sw = "0"b;

		else if argument = "-sort" then do;	/* sorting control: by name, count, version, date_time_used */
		     idx = idx + 1;			/* needs the sorting type */
		     if idx > n_arguments then do;
			call com_err_ (error_table_$noarg, DISPLAY_SUBSYSTEM_USAGE,
			     """-sort"" must be followed by ""name"", ""count"", ""date_time_used"", or ""version""")
			     ;
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));
		     if argument = "name" then sort_by_name = "1"b;
		     else if argument = "count" then sort_by_count = "1"b;
		     else if (argument = "date_time_used") | (argument = "dtu") then sort_by_dtu = "1"b;
		     else if argument = "version" then sort_by_version = "1"b;
		     else do;			/* unknown sort */
			call com_err_ (0, DISPLAY_SUBSYSTEM_USAGE,
			     """-sort"" must be followed by ""name"", ""count"", ""date_time_used"", or ""version""; not ""^a""",
			     argument);
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		end;

		else if argument = "-user" then do;	/* select entries by user name */
		     idx = idx + 1;
		     if idx > n_arguments then do;
			call com_err_ (error_table_$noarg, DISPLAY_SUBSYSTEM_USAGE,
			     """-user"" must be followed by a star name.");
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));
		     call check_star_name_$entry (argument, code);
		     if (code ^= 0) & (code ^= 1) & (code ^= 2) then do;
			call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE, "-user ^a", argument);
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     user_name = argument;
		end;

		else if argument = "-version" then do;	/* print only those whose current version is selected */
		     idx = idx + 1;
		     if idx > n_arguments then do;
			call com_err_ (error_table_$noarg, DISPLAY_SUBSYSTEM_USAGE,
			     """-version"" must be followed by a version string.");
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));
		     call check_star_name_$entry (argument, code);
		     if (code ^= 0) & (code ^= 1) & (code ^= 2) then do;
			call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE, "-version ^a", argument);
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     version_wanted = argument;
		end;

		else if (argument = "-first") | (argument = "-ft") then do;
						/* print only a subset of the entries */
		     idx = idx + 1;
		     if idx > n_arguments then do;
			call com_err_ (error_table_$noarg, DISPLAY_SUBSYSTEM_USAGE,
			     """-first"" must be followed by a number.");
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     call cu_$arg_ptr (idx, argument_ptr, argument_lth, (0));
		     first_n = cv_dec_check_ (argument, code);
		     if code ^= 0 then do;
BAD_FIRST_N_VALUE:
			call com_err_ (0, DISPLAY_SUBSYSTEM_USAGE,
			     """-first"" must be followed by a positive number; not ""^a"".", argument);
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     if first_n < 0 then go to BAD_FIRST_N_VALUE;
		end;

		else do;				/* invalid control argument */
		     call com_err_ (error_table_$badopt, DISPLAY_SUBSYSTEM_USAGE, """^a""", argument);
		     go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		end;

	     else					/* not a control argument: must identify the subsystem */
		if have_usage_seg then		/* ... but already have the segment */
		go to PRINT_USAGE_MESSAGE;

	     else do;				/* first subsystem name */
		have_usage_seg = "1"b;
		call expand_pathname_$add_suffix (argument, USAGE_SUFFIX, usage_seg_dirname, usage_seg_ename, code);
		if code ^= 0 then do;
		     call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE, "^a", argument);
		     go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		end;
		subsystem_name =
		     substr (usage_seg_ename, 1, (length (rtrim (usage_seg_ename)) - length (USAGE_SUFFIX) - 1));
		if search (argument, "<>") ^= 0 then do;
		     found_by_refname = "0"b;		/* by pathname */
		     call initiate_file_ (usage_seg_dirname, usage_seg_ename, RW_ACCESS, usage_seg_ptr, (0) /* ignore bit count */, code);
		     if usage_seg_ptr = null () then do;
			call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE, "^a",
			     pathname_ (usage_seg_dirname, usage_seg_ename));
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		end;
		else do;				/* a reference name */
		     found_by_refname = "1"b;
		     call hcs_$make_ptr (null (), usage_seg_ename, "", usage_seg_ptr, code);
		     if code ^= 0 then do;
			call com_err_ (code, DISPLAY_SUBSYSTEM_USAGE, "^a", usage_seg_ename);
			go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
		     end;
		     call hcs_$fs_get_path_name (usage_seg_ptr, usage_seg_dirname, (0), ((32)" "), (0));
		end;
	     end;
	end;

	if ^have_usage_seg then go to PRINT_USAGE_MESSAGE;

	if (fixed (sort_by_name, 1) + fixed (sort_by_dtu, 1) + fixed (sort_by_count, 1) + fixed (sort_by_version, 1))
	     > 1 then do;				/* just one type of sort, please */
	     call com_err_ (error_table_$inconsistent, DISPLAY_SUBSYSTEM_USAGE,
		"^[""-sort name"" and ^]^[""-sort count""^]^[ and ^]^[""-sort date_time_used""^]^[ and ^]^[""-sort version""^]",
		sort_by_name, sort_by_count, (sort_by_count & (sort_by_dtu | sort_by_version)), sort_by_dtu,
		(sort_by_dtu & sort_by_version), sort_by_version);
	     go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
	end;

	if totals_only & (sort_by_name | sort_by_count | sort_by_dtu | sort_by_version) then do;
						/* can't sort the totals */
	     call com_err_ (error_table_$inconsistent, DISPLAY_SUBSYSTEM_USAGE,
		"""-totals"" and ""-sort ^[name^]^[count^]^[date_time_used^]^[version^]""", sort_by_name,
		sort_by_count, sort_by_dtu, sort_by_version);
	     go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
	end;

	if totals_only & (first_n > 0) then do;		/* can't split the totals */
	     call com_err_ (error_table_$inconsistent, DISPLAY_SUBSYSTEM_USAGE, """-totals"" and ""-first ^d""",
		first_n);
	     go to RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE;
	end;

	if sort_by_count | sort_by_dtu then		/* invert the reverse flag to get largest counts ... */
	     reverse_sw = ^reverse_sw;		/* ... or most recent usage first by default */


/* Setup the array of indices into the segment used to control the order of individual entries printed and sort the array
   if requested */

	if ^totals_only then do;			/* don't bother if just giving total usage */

	     allocate field_ptrs in (system_area) set (field_ptrs_ptr);
	     allocate idxs in (system_area) set (idxs_ptr);

	     do idx = 1 to usage_seg.count;
		idxs.idx (idx) = idx;
		if sort_by_name then		/* sorting by name */
		     field_ptrs.ptr (idx) = addr (usage_seg.user (idx).name);
		else if sort_by_count then		/* sorting by count */
		     field_ptrs.ptr (idx) = addr (usage_seg.user (idx).total_count);
		else if sort_by_dtu then		/* sorting by last date-time used */
		     field_ptrs.ptr (idx) = addr (usage_seg.user (idx).last_time);
		else if sort_by_version then field_ptrs.ptr (idx) = addr (usage_seg.user (idx).version);
	     end;

	     if sort_by_name then
		call sort_items_indirect_$char (field_ptrs_ptr, idxs_ptr, length (usage_seg.user (1).name));
	     else if sort_by_count then call sort_items_indirect_$fixed_bin (field_ptrs_ptr, idxs_ptr);
	     else if sort_by_dtu then			/* (sigh): assumes no date/time used is negative ... */
		call sort_items_indirect_$bit (field_ptrs_ptr, idxs_ptr,
		     length (unspec (usage_seg.user (1).last_time)));
	     else if sort_by_version then
		call sort_items_indirect_$char (field_ptrs_ptr, idxs_ptr, length (usage_seg.user (1).version));
	end;


/* Print the header if desired */

	if header then do;
	     call ioa_ ("^/^-^a Usage (in directory ^a)^/", subsystem_name, usage_seg_dirname);
	     call ioa_ (HEADER_FORMAT);
	end;

	selected_users, selected_count, selected_version_count = 0;


/* Print the individual entries */

	if first_n = -1 then first_n = usage_seg.count;	/* user wants all the entries */

	if totals_only & ((user_name ^= "") | (version_wanted ^= "")) then do;
	     do idx = 1 to usage_seg.count;		/* count only the selected entries */
		call print_entry ("0"b, idx);
	     end;
	end;

	else if ^totals_only then			/* print the requested entries ... */
	     if reverse_sw then do;			/* ... in reverse order */
		do idx = usage_seg.count to 1 by -1;
		     call print_entry ((selected_users < first_n), idxs.idx (idx));
		end;
	     end;

	     else do;				/* ... in "normal" order */
		do idx = 1 to usage_seg.count;
		     call print_entry ((selected_users < first_n), idxs.idx (idx));
		end;
	     end;


/* Print the total usage */

	if ^totals_only then			/* a bit more whitespace please */
	     call ioa_ ("");


	if (user_name = "") & (version_wanted = "") then do;
	     selected_users = usage_seg.count;		/* no selection criteria: give totals for all users */
	     selected_count = usage_seg.all.total_count;
	end;

	call ioa_ (TOTALS_FORMAT, selected_users, selected_count, (version_wanted ^= ""), selected_version_count,
	     ^header, max (53, (70 - length (rtrim (subsystem_name)) - 1)), subsystem_name, (version_wanted ^= ""),
	     version_wanted);


RETURN_FROM_DISPLAY_SUBSYSTEM_USAGE:
	call clean_up ();

	return;
%page;
/* Print the usage data for a single user */

print_entry:
     procedure (print_switch, p_idx);

dcl  p_idx fixed binary parameter;
dcl  print_switch bit (1) aligned parameter;

dcl  1 use aligned based (usep) like usage_seg_entry;
dcl  usep pointer;
dcl  code fixed binary (35);

	usep = addr (usage_seg.user (p_idx));

	if version_wanted = "" then
	     code = 0;				/* match any version */
	else call match_star_name_ ((use.version), version_wanted, code);
	if code ^= 0 then return;

	if user_name = "" then
	     code = 0;				/* match any entry */
	else call match_star_name_ ((use.name), user_name, code);
	if code ^= 0 then return;

	selected_users = selected_users + 1;
	selected_count = selected_count + use.total_count;
	selected_version_count = selected_version_count + use.this_version_count;

	if print_switch then
	     call ioa_ (USER_FORMAT, use.name, use.total_count, use.this_version_count, decode_clock_value_$format ("^my/^dm/^yc ^Hd:^MH", use.last_time, "" /* per-process zone */, "" /* per-process language */),
		use.version);

	return;

     end print_entry;
%page;
/* Clean up after ourselves */

clean_up:
     procedure ();

	if usage_seg_ptr ^= null () then		/* only if we explicitly initiated it... */
	     if ^found_by_refname then call terminate_file_ (usage_seg_ptr, 0 /* not set */, TERM_FILE_TERM, (0));

	if field_ptrs_ptr ^= null () then free field_ptrs in (system_area);

	if idxs_ptr ^= null () then free idxs in (system_area);

	return;

     end clean_up;
%page;
%include "_ssu_usage_seg";
%page;
%include access_mode_values;
%page;
%include terminate_file;

     end display_subsystem_usage;
