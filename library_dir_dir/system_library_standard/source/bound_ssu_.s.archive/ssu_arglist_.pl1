/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Subsystem request argument processing functions: arg_count, arg_ptr, return_arg, arg_list_ptr */

/* Created:  3 May 1980 by W. Olin Sibert */
/* Modified: 13 February 1982 by G. Palter to make arg_ptr and arg_count abort when appropriate */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_arglist_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_arg_count fixed binary parameter;		/* arg_count, return_arg: # of arguments given to request */

dcl  P_arg_idx fixed binary parameter;			/* arg_ptr: index of the desired argument */
dcl  P_arg_ptr pointer parameter;			/* arg_ptr: set -> the desired argument */
dcl  P_arg_lth fixed binary (21) parameter;		/* arg_ptr: set to length of the argument */

dcl  P_af_sw bit (1) aligned parameter;			/* return_arg: set ON => invoked as an active request */
dcl  P_rv_ptr pointer parameter;			/* return_arg: set -> active request's return value */
dcl  P_rv_lth fixed binary (21) parameter;		/* return_arg: set to maximum length of return value */

dcl  P_arg_list_ptr pointer parameter;			/* arg_list_ptr: -> the request's argument list */


/* Remaining declarations */

dcl  error_table_$noarg fixed binary (35) external;
dcl  ssu_et_$not_af_request fixed binary (35) external;

dcl  cu_$arg_ptr_rel entry (fixed binary, pointer, fixed binary (21), fixed binary (35), pointer);
dcl  ssu_$abort_line entry () options (variable);

dcl  null builtin;

/**/

/* Returns the number of arguments to the request: aborts if the request was invoked as an active request */

arg_count:
     entry (P_sci_ptr, P_arg_count);

	call ssu_check_sci (P_sci_ptr);

	request_data_ptr = P_sci_ptr -> sci.request_data_ptr;

	if request_data.af_sw then
	     call ssu_$abort_line (P_sci_ptr, ssu_et_$not_af_request);
	else P_arg_count = request_data.arg_count;

	return;



/* Returns pointer/length of the requested argument: aborts if the argument doesn't exist */

arg_ptr:
     entry (P_sci_ptr, P_arg_idx, P_arg_ptr, P_arg_lth);

	call ssu_check_sci (P_sci_ptr);

	request_data_ptr = P_sci_ptr -> sci.request_data_ptr;

	if (P_arg_idx > request_data.arg_count) | (P_arg_idx < 1) then
	     call ssu_$abort_line (P_sci_ptr, error_table_$noarg);
	else call cu_$arg_ptr_rel (P_arg_idx, P_arg_ptr, P_arg_lth, (0), request_data.arg_list_ptr);

	return;

/**/

/* Returns the argument count, whether the request was invoked as an active request, and, if so, the return value */

return_arg:
     entry (P_sci_ptr, P_arg_count, P_af_sw, P_rv_ptr, P_rv_lth);

	call ssu_check_sci (P_sci_ptr);

	request_data_ptr = P_sci_ptr -> sci.request_data_ptr;

	P_arg_count = request_data.arg_count;

	if request_data.af_sw then do;		/* invoked as an active request */
	     P_rv_ptr = request_data.rv_ptr;
	     P_rv_lth = request_data.rv_lth;
	     P_af_sw = "1"b;
	end;

	else do;					/* not invoked as an active request */
	     P_rv_ptr = null ();
	     P_rv_lth = 0;
	     P_af_sw = "0"b;
	end;

	return;



/* Returns a pointer to the request's argument list */

arg_list_ptr:
     entry (P_sci_ptr, P_arg_list_ptr);

	call ssu_check_sci (P_sci_ptr);

	request_data_ptr = P_sci_ptr -> sci.request_data_ptr;

	P_arg_list_ptr = request_data.arg_list_ptr;

	return;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include "_ssu_request_data";

     end ssu_arglist_;
