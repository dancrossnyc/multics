/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-03-07,GDixon), approve(86-03-07,MCR7327),
     audit(86-03-10,Lippard), install(86-04-24,MR12.0-1048):
     Use help$ssu_help_request instead of calling help command.
                                                   END HISTORY COMMENTS */


/* Standard subsystem self-documentation facilities (except for request listing requests) */

/* Created:  10 May 1980 by W. Olin Sibert */
/* Modified: 21 May 1980 by G. Palter to fix (ugh) mail system bug #0312 -- list_help request doesn't work */
/* Modified: August 1981 by Jay Pattin to fix list_help again and to not require prefix in info seg name */
/* Modified: 7 November 1981 by Jay Pattin to make list_help look for break chars around topic name */
/* Modified: 17 November 1981 by Jay Pattin to use sci.info_prefix instead of subsystem name */
/* Modified: 17 December 1981 by G. Palter to provide more usefull information when the help request is used with no
   arguments and to no longer recognize "*" as a special case */
/* Modified: 1 February 1982 by G. Palter to make list_help case insensitive */
/* Modified: 11 February 1982 by G. Palter to rename to ssu_info_mgr_ and add entrypoints which manipulate the info
   directory list and info prefix */
/* Modified: 3 March 1982 by G. Palter to make list_help of no arguments not list the names in uppercase */
/* Modified: 8 June 1983 by G. C. Dixon to call help$ssu_help_request instead of calling help command. */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_info_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_code fixed binary (35) parameter;

dcl  P_info_prefix character (32) parameter;		/* set_info_prefix: the new value of the prefix */

dcl  P_info_dirname character (*) parameter;		/* add_info_dir/delete_info_dir: the dir to add/delete */
dcl  P_position fixed binary parameter;			/* add_info_dir: where to place this dir in the list */

dcl  P_idl_ptr pointer parameter;			/* list_info_dirs/set_info_dirs */
dcl  P_callers_area_ptr pointer parameter;		/* list_info_dirs: -> area to use to list structure */
dcl  P_info_dirs_list_version fixed binary parameter;	/* list_info_dirs: version of structure callers expects */

dcl  P_info_ptr pointer parameter;			/* help/list_help requests */


/* The list of directories searched by the help and list_help requests to find an info segment */

dcl  1 info_dirs aligned based (sci.info_dirs_ptr),
       2 n_used fixed binary,
       2 n_allocated fixed binary,
       2 dirs (info_dirs_n_allocated refer (info_dirs.n_allocated)) like info_dirs_list.info_dirs;

dcl  info_dirs_n_allocated fixed binary;
dcl  new_info_dirs_ptr pointer;


/* Local copies of parameters */

dcl  code fixed binary (35);

dcl  info_dirname character (168);

dcl  position fixed binary;

dcl  callers_area area based (callers_area_ptr);
dcl  callers_area_ptr pointer;


/* Remaining declarations */

dcl  arg character (al) based (ap);
dcl  al fixed binary (21);
dcl  ap pointer;

dcl  uid bit (36) aligned;

dcl  old_nargs fixed binary;
dcl  (match, found_bad_dirname) bit (1) aligned;
dcl  topic_sw bit(1);
dcl  subsys_name character (32);
dcl  (request_name, help_request_name, lh_request_name) character (32);
dcl  intro_topic character (32);
dcl  info_name char(300) varying;
dcl  (code1, code2) fixed binary (35);
dcl  (idx, jdx, pos) fixed binary;
dcl  topic_array_size fixed binary;
dcl  total_topics fixed binary;

dcl  CHASE fixed binary (1) static options (constant) initial (1);
						/* chase links when validating info directories */

dcl  DELIMITERS char (5) static options (constant) initial (" .-_$");
						/* break chars for list_help topics */

dcl  (
     UPPERCASE initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     LOWERCASE initial ("abcdefghijklmnopqrstuvwxyz")
     ) character (26) static options (constant);

dcl  (
     error_table_$badopt,
     error_table_$entlong,
     error_table_$no_dir,
     error_table_$noalloc,
     error_table_$noentry,
     error_table_$notadir,
     error_table_$nostars,
     error_table_$unimplemented_version,
     error_table_$zero_length_seg
     ) fixed binary (35) external;

dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), pointer, fixed bin (35));
dcl  hcs_$terminate_noname entry (pointer, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (3), pointer, fixed bin, pointer, pointer, fixed bin (35));
dcl  hcs_$status_long entry (character (*), character (*), fixed binary (1), pointer, pointer, fixed binary (35));
dcl  help$ssu_help_request entry (ptr, bit(1), entry);
dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_subsystem_name entry (pointer) returns (character (32));
dcl  ssu_request_mgr_$find_request_name entry (pointer, entry, character (*), fixed binary (35));

dcl  (
     ssu_requests_$help,
     ssu_requests_$list_help,
     ssu_requests_$list_requests,
     ssu_requests_$summarize_requests
     ) entry ();

dcl  (area, cleanup) condition;

dcl  (addr, char, hbound, index, length, maxlength, null, rtrim, search, substr, translate) builtin;

/**/

/* Set the prefix used to find info files */

set_info_prefix:
     entry (P_sci_ptr, P_info_prefix);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.info_prefix = P_info_prefix;

	return;



/* Return the prefix used to find info files */

get_info_prefix:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.info_prefix);



/* Initialize the list of info directories (called by ssu_invocation_) */

init_info_dirs:
     entry (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	info_dirs_n_allocated = 3;			/* enough to start */
	allocate info_dirs in (sci_parent_area) set (sci.info_dirs_ptr);

	info_dirs.n_used = 0;			/* nothing in the list yet */

	return;



/* Release the info directories list (invoked from ssu_invocation_) */

term_info_dirs:
     entry (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.info_dirs_ptr ^= null () then free info_dirs in (sci_parent_area);

	sci.info_dirs_ptr = null ();

	return;

/**/

/* Add a directory to the list of directories searched by the help and list_help requests */

add_info_dir:
     entry (P_sci_ptr, P_info_dirname, P_position, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;
	P_code = 0;				/* assume success */

	call validate_info_dir (P_info_dirname, info_dirname, uid, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	if sci.info_dirs_ptr = null () then		/* no info directories list??? */
	     call init_info_dirs (sci_ptr);

	if (info_dirs.n_used >= info_dirs.n_allocated) & (info_dirs.n_allocated ^= 0) then do;
						/* need to expand the table */
	     info_dirs_n_allocated = 2 * info_dirs.n_allocated;
	     allocate info_dirs in (sci_parent_area) set (new_info_dirs_ptr);
	     new_info_dirs_ptr -> info_dirs.n_used = info_dirs.n_used;
	     do idx = 1 to info_dirs.n_used;
		new_info_dirs_ptr -> info_dirs.dirs (idx) = info_dirs.dirs (idx);
	     end;
	     free info_dirs in (sci_parent_area);	/* free the full one */
	     sci.info_dirs_ptr = new_info_dirs_ptr;
	end;

	if P_position > info_dirs.n_used then position = info_dirs.n_used + 1;
						/* add to the end of the list */
	else if P_position <= 0 then position = 1;	/* add to the beginning */
	else position = P_position;			/* add in an explicit place */

	info_dirs.n_used = info_dirs.n_used + 1;

	do idx = info_dirs.n_used to (position + 1) by -1;
	     info_dirs.dirs (idx) = info_dirs.dirs (idx - 1);
	end;

	info_dirs.dirs (position).info_dirname = info_dirname;
	info_dirs.dirs (position).info_dir_valid = "1"b;
	info_dirs.dirs (position).uid = uid;

	return;

/**/

/* Delete a directory from the list of info directories for this subsystem */

delete_info_dir:
     entry (P_sci_ptr, P_info_dirname, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call validate_info_dir (P_info_dirname, info_dirname, uid, code);

	match = "0"b;				/* find a matching directory */

	if (code = 0) then				/* can search by uid */
	     do idx = 1 to info_dirs.n_used while (^match);
	     if info_dirs.dirs (idx).uid = uid then match = "1"b;
	end;

	else do idx = 1 to info_dirs.n_used while (^match);
						/* must search by pathname */
	     if info_dirs.dirs (idx).info_dirname = info_dirname then match = "1"b;
	end;

	if match then do;				/* found it: idx identifies next entry in list */
	     do jdx = idx to info_dirs.n_used;
		info_dirs.dirs (jdx - 1) = info_dirs.dirs (jdx);
	     end;
	     info_dirs.n_used = info_dirs.n_used - 1;
	     P_code = 0;				/* success */
	end;

	else P_code = error_table_$noentry;

	return;

/**/

/* Return the list of info directories used by this subsystem */

list_info_dirs:
     entry (P_sci_ptr, P_callers_area_ptr, P_info_dirs_list_version, P_idl_ptr, P_code);

	if P_info_dirs_list_version ^= INFO_DIRS_LIST_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;
	callers_area_ptr = P_callers_area_ptr;

	on condition (area)
	     begin;
		P_code = error_table_$noalloc;
		go to RETURN_FROM_LIST_INFO_DIRS;
	     end;

	info_dirs_list_n_info_dirs = info_dirs.n_used;

	allocate info_dirs_list in (callers_area) set (idl_ptr);

	info_dirs_list.version = INFO_DIRS_LIST_VERSION_1;

	do idx = 1 to info_dirs.n_used;
	     info_dirs_list.info_dirs (idx) = info_dirs.dirs (idx);
	end;

	P_idl_ptr = idl_ptr;
	P_code = 0;				/* success */

RETURN_FROM_LIST_INFO_DIRS:
	return;

/**/

/* Replace the list of info directories with that supplied by the caller */

set_info_dirs:
     entry (P_sci_ptr, P_idl_ptr, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;
	idl_ptr = P_idl_ptr;

	if info_dirs_list.version ^= INFO_DIRS_LIST_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;


/* Validate the caller's directory names */

	found_bad_dirname = "0"b;			/* assume user's list is OK */

	do idx = 1 to info_dirs_list.n_info_dirs;
	     info_dirs_list.info_dirs (idx).info_dir_valid = "1"b;
	     call validate_info_dir (info_dirs_list.info_dirs (idx).info_dirname,
		info_dirs_list.info_dirs (idx).info_dirname, info_dirs_list.info_dirs (idx).uid, code);
	     if code ^= 0 then do;			/* a bad directory pathname */
		if ^found_bad_dirname then P_code = code;
		found_bad_dirname = "1"b;		/* remember reason for the first bad directory */
		info_dirs_list.info_dirs (idx).info_dir_valid = "0"b;
	     end;
	end;

	if found_bad_dirname then return;		/* return code is already set */


/* All directories are valid: create a new internal list, copies the user's data, then release the old internal list */

	info_dirs_n_allocated = info_dirs_list.n_info_dirs;

	allocate info_dirs in (sci_parent_area) set (new_info_dirs_ptr);

	new_info_dirs_ptr -> info_dirs.n_used = info_dirs_list.n_info_dirs;

	do idx = 1 to new_info_dirs_ptr -> info_dirs.n_used;
	     new_info_dirs_ptr -> info_dirs.dirs (idx) = info_dirs_list.info_dirs (idx);
	end;

	if sci.info_dirs_ptr ^= null () then		/* get rid of the old one */
	     free sci.info_dirs_ptr -> info_dirs in (sci_parent_area);

	sci.info_dirs_ptr = new_info_dirs_ptr;		/* now have the new list */

	P_code = 0;				/* success */

	return;

/**/

/* Validates an info directory supplied by the caller */

validate_info_dir:
     procedure (p_info_dirname, p_absolute_info_dirname, p_uid, p_code);

dcl  p_info_dirname character (*) parameter;
dcl  p_absolute_info_dirname character (*) parameter;
dcl  p_uid bit (36) aligned parameter;
dcl  p_code fixed binary (35);

dcl  1 branch_status aligned like status_branch;
dcl  dirname character (168);
dcl  ename character (32);

	call expand_pathname_ (p_info_dirname, dirname, ename, p_code);
	if p_code ^= 0 then return;

	call hcs_$status_long (dirname, ename, CHASE, addr (branch_status), null (), p_code);
	if p_code ^= 0 then return;

	if branch_status.type ^= Directory then do;
	     p_code = error_table_$notadir;
	     return;
	end;

	p_uid = branch_status.uid;
	p_absolute_info_dirname = pathname_ (dirname, ename);
	p_code = 0;

	return;

     end validate_info_dir;

/**/

/* Standard subsystem help request: scans its argument list and converts any apparent topic names into the appropriate
   pathnames by searching the subsystem' info directories; control arguments or explicit pathnames are passed directly;
   a -brief_header control argument is added to the transformed argument list and the standard help command is invoked */

help:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, old_nargs);	/* aborts if an active request */

	subsys_name = ssu_$get_subsystem_name (sci_ptr);

	if old_nargs = 0 then do;			/* explain what to do */
	     call ssu_request_mgr_$find_request_name (sci_ptr, ssu_requests_$help, help_request_name, code2);
	     if code2 = 0 then do;			/* look for introductory information */
		intro_topic = "general_information";
		call find_info_file_no_abort (intro_topic, ((168)" "), code1);
		if code1 ^= 0 then do;
		     intro_topic = "overview";
		     call find_info_file_no_abort (intro_topic, ((168)" "), code1);
		end;
		if code1 = 0 then
		     call ioa_ ("Type ""^a ^a"" for an overview of the ^a subsystem.", help_request_name, intro_topic,
			subsys_name);
	     end;
	     call ssu_request_mgr_$find_request_name (sci_ptr, ssu_requests_$summarize_requests, request_name, code1);
	     if code1 = 0 then call ioa_ ("Type ""^a"" for a list of available requests.", request_name);
	     call ssu_request_mgr_$find_request_name (sci_ptr, ssu_requests_$list_requests, request_name, code1);
	     if code1 = 0 then call ioa_ ("Type ""^a"" for a short description of the requests.", request_name);
	     call ssu_request_mgr_$find_request_name (sci_ptr, ssu_requests_$list_help, lh_request_name, code1);
	     if (code1 = 0) & (code2 = 0) then
		call ioa_ ("Type ""^a"" for a list of topics available to the ^a request.", lh_request_name,
		     help_request_name);
	     else if (code1 ^= 0) & (code2 = 0) then
		call ioa_ ("Type ""^a -topics"" for a list of available topics.", help_request_name);
	     if code2 = 0 then
		call ioa_ ("Type ""^a TOPIC"" for more information on a given topic.", help_request_name);
	     call ssu_$abort_line (sci_ptr, 0);		/* punt rest of line as user might be confused */
	end;

	call help$ssu_help_request (sci_ptr, topic_sw, find_subsystem_info_file);
	if topic_sw then				/* handle specially */
	     goto HANDLE_HELP_LIST_TOPICS;
	return;					/* end of code for standard path through help request */

/**/

/* Lists all available info files for the subsystem: used by both list_help and help */

HANDLE_HELP_LIST_TOPICS:
	total_topics = 0;

	do idx = 1 to info_dirs.n_used;
	     if info_dirs.dirs (idx).info_dir_valid then do;
		call list_topics (info_dirs.dirs (idx).info_dirname, "0"b, (""));
	     end;
	end;

	if total_topics = 0 then
	     call ssu_$abort_line (sci_ptr, 0, "There are no info topics available for this subsystem.");

	return;

/**/

/* Standard subsystem list_help request: lists all names in the info directories that match any of its arguments */

list_help:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, old_nargs);	/* aborts if an active request */

	subsys_name = ssu_$get_subsystem_name (sci_ptr);

	if old_nargs = 0 then			/* handle it like help handles help * */
	     goto HANDLE_HELP_LIST_TOPICS;

	topic_array_size = old_nargs;

	begin;					/* otherwise, make a topic list and list selectively */

dcl  topic_names (topic_array_size) char (32) varying;

	     topic_array_size = 0;			/* use them up one at a time now */

	     do idx = 1 to old_nargs;
		call ssu_$arg_ptr (sci_ptr, idx, ap, al);

		if char (arg, 1) = "-" then call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", arg);

		topic_array_size = topic_array_size + 1;
		topic_names (topic_array_size) = translate (rtrim (arg), UPPERCASE, LOWERCASE);
	     end;

	     total_topics = 0;			/* keep this up to date */

	     do idx = 1 to info_dirs.n_used;		/* now, list them */
		if info_dirs.dirs (idx).info_dir_valid then do;
		     call list_topics (info_dirs.dirs (idx).info_dirname, "1"b, topic_names);
		end;
	     end;

	     if total_topics = 0 then			/* found none */
		call ssu_$abort_line (sci_ptr, 0, "No matching info topics were found.");

	end;					/* begin block */

	return;					/* end of code for $list_help */

/**/

/* Entry point passed to help$ssu_help_request.  It calls this entry point to find subsystem info segs. */

find_subsystem_info_file:
	entry (P_sci_ptr, AP_topic) returns (char(300) varying);

dcl  AP_topic character(*) parameter;
	
	sci_ptr = P_sci_ptr;
	call find_info_file (AP_topic, info_name);
	return (info_name);


/* Search for a specific info file: abort the request line if it isn't not found */

find_info_file:
     procedure (P_topic, P_path);

dcl  P_topic character (*) parameter;
dcl  P_path character (*) varying parameter;
dcl  P_code fixed binary (35) parameter;

dcl  no_abort bit (1) aligned;
dcl  ename character (32) varying;
dcl  topic character (32) varying;
dcl  info_dirname character (168);
dcl  info_ename character (32);
dcl  info_ptr pointer;
dcl  info_bc fixed binary (24);
dcl  code fixed binary (35);
dcl  idx fixed binary (35);

	no_abort = "0"b;
	go to FIND_INFO_FILE_COMMON;


/* Search for a specific info file: do not abort the request line if it isn't not found */

find_info_file_no_abort:
     entry (P_topic, P_path, P_code);

	P_code = 0;				/* assume success */
	no_abort = "1"b;


FIND_INFO_FILE_COMMON:
	if (search (P_topic, "*?") ^= 0) then
	     if no_abort then do;
		P_code = error_table_$nostars;
		return;
	     end;
	     else call ssu_$abort_line (sci_ptr, error_table_$nostars, "^a", P_topic);

	if length (P_topic) > 5 then
	     if substr (P_topic, (length (P_topic) - 4), 5) = ".info" then
		topic = substr (P_topic, 1, (length (P_topic) - 5));
	     else topic = rtrim (P_topic);
	else topic = rtrim (P_topic);

	if (length (topic) + length ("info") + 1) > maxlength (ename) then
INFO_FILE_NAME_TOO_LONG:
	     if no_abort then do;
		P_code = error_table_$entlong;
		return;
	     end;
	     else call ssu_$abort_line (sci_ptr, error_table_$entlong, "^a", P_topic);

	ename = topic || ".info";
	if sci.info_prefix ^= "" then do;
	     if (length (ename) + length (rtrim (sci.info_prefix)) + 1) > maxlength (ename) then
		go to INFO_FILE_NAME_TOO_LONG;
	     ename = "." || ename;
	     ename = rtrim (sci.info_prefix) || ename;
	end;
	info_ename = ename;

	do idx = 1 to info_dirs.n_used;
	     if info_dirs.dirs (idx).info_dir_valid then do;
		info_dirname = info_dirs.dirs (idx).info_dirname;
		call hcs_$initiate_count (info_dirname, info_ename, "", info_bc, 1, info_ptr, code);
		if info_ptr ^= null () then goto FOUND_ONE;
		if (code ^= error_table_$noentry) & (code ^= error_table_$no_dir) then
		     if no_abort then do;
			P_code = code;
			return;
		     end;
		     else call ssu_$abort_line (sci_ptr, code, "^a>^a", info_dirname, info_ename);
	     end;
	end;

	if no_abort then do;
	     P_code = error_table_$noentry;
	     return;
	end;
	else call ssu_$abort_line (sci_ptr, 0, "No info found for ^a.", P_topic);

FOUND_ONE:
	call hcs_$terminate_noname (info_ptr, (0));
	if info_bc ^= 0 then do;
	     P_path = rtrim (info_dirname);
	     P_path = P_path || ">";
	     P_path = P_path || info_ename;
	     return;				/* let our caller have it */
	end;

	else if no_abort then do;
	     P_code = error_table_$zero_length_seg;
	     return;
	end;

	else call ssu_$abort_line (sci_ptr, error_table_$zero_length_seg, "^a>^a", info_dirname, info_ename);

	return;

     end find_info_file;

/**/


/* List the info topics for the subsystem in a particular directory which optionally match the given topics */

list_topics:
     procedure (P_dname, P_select_sw, P_topics);

dcl  P_dname character (*) parameter;
dcl  P_select_sw bit (1) aligned parameter;
dcl  P_topics (*) character (*) varying parameter;

dcl  1 entries (entries_count) aligned based (entries_ptr),
       2 type bit (2) unaligned,
       2 n_names fixed binary (15) unaligned,
       2 name_idx fixed binary (17) unaligned;
dcl  entries_ptr pointer;
dcl  entries_count fixed binary;

dcl  names (1) character (32) aligned based (names_ptr);
dcl  names_ptr pointer;

dcl  n_names fixed binary;
dcl  topic_name character (32) varying;
dcl  topic_ename character (32);
dcl  gi_topic_ename character (32);
dcl  (n_topics, idx, jdx, kdx) fixed binary;
dcl  code fixed binary (35);


	names_ptr = null ();
	entries_ptr = null ();

	on condition (cleanup)
	     begin;
		if names_ptr ^= null () then free names in (sci_parent_area);
		if entries_ptr ^= null () then free entries in (sci_parent_area);
	     end;

	topic_ename = "**.info";
	gi_topic_ename = rtrim (subsys_name) || ".gi.info";

	call hcs_$star_ (P_dname, topic_ename, 11b, addr (sci_parent_area), entries_count, entries_ptr, names_ptr, code)
	     ;
	if code ^= 0 then				/* let our caller figure out that nothing got listed */
	     return;

	n_topics = 0;				/* count number of entries */

	do idx = 1 to entries_count;
	     n_names = 0;

	     if ^P_select_sw then do;			/* skip SUBSYS.gi.info by default */
		do jdx = 1 to entries (idx).n_names;
		     if names (entries (idx).name_idx + jdx - 1) = gi_topic_ename then goto SKIP_THIS_TOPIC;
		end;
	     end;

	     do jdx = 1 to entries (idx).n_names;
		topic_name = get_topic_name (names (entries (idx).name_idx + jdx - 1));

		if topic_name = "" then		/* punt if this is not a valid topic name */
		     goto SKIP_TO_NEXT_NAME;

		if P_select_sw then do;		/* see if it matches anything */
		     topic_name = translate (topic_name, UPPERCASE, LOWERCASE);
		     do kdx = 1 to hbound (P_topics, 1);
			pos = index (topic_name, P_topics (kdx));
			match = "0"b;
			if pos ^= 0 then
			     if pos = 1 then match = "1"b;
			     else if pos = length (topic_name) - length (P_topics (kdx)) + 1 then match = "1"b;
			     else if index (DELIMITERS, substr (topic_name, pos - 1, 1)) ^= 0 then match = "1"b;
			     else if index (DELIMITERS, substr (topic_name, pos + length (P_topics (kdx)), 1)) ^= 0
			     then match = "1"b;
			if match then do;		/* matches: print the real name */
			     topic_name = get_topic_name (names (entries (idx).name_idx + jdx - 1));
			     call add_topic_name ();
			     goto SKIP_TO_NEXT_NAME;
			end;
		     end;
		end;

		else call add_topic_name ();		/* just output all the names */

SKIP_TO_NEXT_NAME:
	     end;

	     if n_names = 1 then			/* finish the output process */
		call ioa_ ("");
	     else if n_names > 1 then call ioa_ (")");

SKIP_THIS_TOPIC:
	end;					/* of first loop through names */

	total_topics = total_topics + n_topics;		/* update the total count */

	if names_ptr ^= null () then free names in (sci_parent_area);
	if entries_ptr ^= null () then free entries in (sci_parent_area);

	return;

/**/

/* Internal to list_topics: output a single, matching topic name */

add_topic_name:
	procedure ();

	     if n_names = 0 then			/* increment topic count when we output first name */
		n_topics = n_topics + 1;

	     if (n_names = 0) & (n_topics = 1) & (total_topics = 0) then
						/* print heading first time through */
		call ioa_ ("Topics available for ^a:^/", subsys_name);

	     if n_names = 0 then			/* output first topic name */
		call ioa_$nnl ("^a", topic_name);

	     else if n_names = 1 then call ioa_$nnl ("^x(^a", topic_name);

	     else call ioa_$nnl (",^x^a", topic_name);

	     n_names = n_names + 1;

	     return;

	end add_topic_name;

/**/

get_topic_name:
	procedure (P_ename) returns (character (32) varying);

dcl  P_ename character (32) aligned;
dcl  (idx, jdx) fixed binary;

	     if sci.info_prefix ^= "" then do;		/* check for the prefix */
		idx = length (rtrim (sci.info_prefix)); /* prepare to strip off prefix and .info suffix */
		if substr (P_ename, 1, idx) ^= rtrim (sci.info_prefix) then return ("");
		idx = idx + 1;			/* room for the "." */
		if substr (P_ename, idx, 1) ^= "." then return ("");
	     end;
	     else idx = 0;

	     jdx = length (rtrim (P_ename));
	     jdx = jdx - 5;				/* length of ".info" */
	     if jdx < (idx + 1) then			/* no room? */
		return ("");
	     if substr (P_ename, jdx + 1, 5) ^= ".info" then return ("");
	     jdx = jdx - idx;

	     return (substr (P_ename, idx + 1, jdx));

	end get_topic_name;

     end list_topics;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include ssu_info_dirs_list;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
%page;
%include status_structures;

     end ssu_info_mgr_;
