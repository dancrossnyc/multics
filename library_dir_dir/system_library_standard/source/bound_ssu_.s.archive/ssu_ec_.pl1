/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Subsystem exec_com processing including the exec_com request */

/* Created:  by Spencer Love & Jay Pattin */
/* Modified: 14 February 1982 by G. Palter for new calling sequence of exec_com_info.eval_string */
/* Modified: 8 July 1982 by Jay Pattin to add execute_start_up */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_ec_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_info_ptr pointer parameter;			/* exec_com: -> subsystem's internal data (not used) */

dcl  P_ec_suffix character (32) parameter;		/* set_suffix: the new suffix used to find exec_com's */

dcl  P_ec_search_list character (32) parameter;		/* set_search_list: the new search list used to find
						   exec_com's; a null string => no search list will be used */

dcl  P_subsystem_dir_ptr pointer parameter;		/* set_subsystem_ptr: new value to implement referencing dir
						   search rule in the subsystem's exec_com search path */


/* Remaining declarations */

dcl  based_code fixed binary (35) based (code_ptr);
dcl  code_ptr pointer;

dcl  based_pointer pointer based;

dcl  arg_count fixed binary;

dcl  arg character (arg_len) based (arg_ptr);
dcl  arg_len fixed binary (21);
dcl  (arg_list_ptr, arg_ptr) pointer;
dcl  (arg_type, arg_ndims, arg_size, arg_scale) fixed binary;
dcl  arg_packed bit (1) aligned;
dcl  exec_com_request bit (1) aligned;

dcl  1 ec_info aligned like exec_com_info;

dcl  ec_path character (256);
dcl  ready_enabled bit (1) aligned;
dcl  status fixed binary (35);

dcl  start_up_dirname character (168);
dcl  (start_up_ename, project_id) character (32);

dcl  SSU_EC_ character (32) static options (constant) initial ("ssu_ec_");

dcl  CHASE fixed binary (1) static options (constant) initial (1);

/* format: off */
dcl (error_table_$bad_arg, error_table_$noentry, ssu_et_$null_request_line, ssu_et_$subsystem_aborted)
	fixed binary (35) external;
/* format: on */

dcl  cu_$arg_count entry (fixed binary);
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$generate_call entry (entry, pointer);
dcl  decode_descriptor_
	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
dcl  exec_com_ entry (character (*), character (*), character (*), pointer, fixed binary (35));
dcl  exec_com_$find_ec entry (character (*), character (*), character (*), pointer, character (*), fixed binary (35));
dcl  hcs_$status_minf
	entry (character (*), character (*), fixed binary (1), fixed binary (2), fixed binary (24), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_list_ptr entry (pointer) returns (pointer);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$evaluate_active_string
	entry (pointer, pointer, character (*), fixed binary, character (*) varying, fixed binary (35));
dcl  ssu_$execute_line entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$return_arg entry (pointer, fixed binary, bit (1) aligned, pointer, fixed binary (21));
dcl  sub_err_ entry () options (variable);
dcl  user_info_ entry (character (*), character (*), character (*));
dcl  user_info_$homedir entry (character (*));

dcl  (addr, null, substr) builtin;

/**/

/* Standard subsystem exec_com request */

exec_com:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;
	exec_com_request = "1"b;

	call ssu_$return_arg (sci_ptr, arg_count, ("0"b), (null ()), (0));
	if arg_count < 1 then
	     call ssu_$abort_line (sci_ptr, 0, "Usage is:  ^a filename {optional_args}",
		ssu_$get_request_name (sci_ptr));

	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);

	call exec_com_$find_ec (arg, sci.ec_suffix, sci.ec_search_list, sci.subsystem_dir_ptr, ec_path, status);
	if status ^= 0 then call ssu_$abort_line (sci_ptr, status, "^a", arg);

	ready_enabled = "0"b;

	ec_info.version = exec_com_info_version_1;
	ec_info.arg_list_ptr = ssu_$arg_list_ptr (sci_ptr);
	ec_info.first_arg = 2;
	ec_info.execute_line = cp_entry;
	ec_info.eval_string = af_entry;
	ec_info.ready = rdy_entry;
	ec_info.set_ready_mode = rdy_mode_entry;
	ec_info.error = error_entry;

	call exec_com_ (ec_path, " ", ssu_$get_subsystem_and_request_name (sci_ptr), addr (ec_info), status);
	if status ^= 0 then call ssu_$abort_line (sci_ptr, status, "^a", ec_path);

	return;

/**/

/* format: off */
/* Execute a subsystem's start_up exec_com: searches for the exec_com in the user's home directory, the project directory,
   and finally >site.  Calling sequence is:
	call ssu_$execute_start__up (sci_ptr, code, {start_up_arg_1 ... start_up_arg_N}); */
/* format: on */

execute_start_up:
     entry () options (variable);

	exec_com_request = "0"b;

	call cu_$arg_count (arg_count);
	if arg_count = 0 then call ssu_check_sci (null ());

	call cu_$arg_list_ptr (arg_list_ptr);


/* Pick up the sci_ptr (1st argument): must be an unpacked pointer */

	call cu_$arg_ptr (1, arg_ptr, (0), (0));

	call decode_descriptor_ (arg_list_ptr, 1, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
	if arg_type ^= pointer_dtype | arg_packed ^= "0"b | arg_ndims ^= 0 then call ssu_check_sci (null ());

	sci_ptr = arg_ptr -> based_pointer;		/* got one */
	call ssu_check_sci (sci_ptr);


/* Find the error code (2nd argument): must be fixed binary (35) aligned */

	call cu_$arg_ptr (2, code_ptr, (0), (0));

	call decode_descriptor_ (arg_list_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
	if arg_type ^= real_fix_bin_1_dtype | arg_packed then do;
RESIGNAL_BAD_CODE:
	     call sub_err_ (error_table_$bad_arg, SSU_EC_, ACTION_CANT_RESTART, null (), (0),
		"The second argument must be declared fixed binary (35) aligned.");
	     go to RESIGNAL_BAD_CODE;
	end;


/* Try to locate the start_up exec_com */

	start_up_ename = "start_up." || sci.ec_info.ec_suffix;

	call user_info_$homedir (start_up_dirname);

	if ^exists (start_up_dirname, start_up_ename) then do;
	     call user_info_ (((32)" "), project_id, ((32)" "));
	     start_up_dirname = ">udd>" || project_id;

	     if ^exists (start_up_dirname, start_up_ename) then do;
		start_up_dirname = ">site";

		if ^exists (start_up_dirname, start_up_ename) then do;
		     status = error_table_$noentry;
		     go to RETURN_FROM_EXECUTE_START_UP;
		end;
	     end;
	end;


/* Control arrives here iff we found a start_up: execute it */

	ready_enabled = "0"b;

	ec_info.version = exec_com_info_version_1;
	ec_info.arg_list_ptr = arg_list_ptr;
	ec_info.first_arg = 3;
	ec_info.execute_line = cp_entry;
	ec_info.eval_string = af_entry;
	ec_info.ready = rdy_entry;
	ec_info.set_ready_mode = rdy_mode_entry;
	ec_info.error = error_entry;

	call exec_com_ (pathname_ (start_up_dirname, start_up_ename), " ",
	     ssu_$get_subsystem_and_request_name (sci_ptr), addr (ec_info), status);

RETURN_FROM_EXECUTE_START_UP:
	based_code = status;

	return;



/* Determines if a given branch exists */

exists:
     procedure (p_dirname, p_ename) returns (bit (1) aligned);

dcl  (p_dirname, p_ename) character (*) parameter;
dcl  type fixed binary (2);

	call hcs_$status_minf (p_dirname, p_ename, CHASE, type, (0), status);

	if (status = 0) & (type > 0) then
	     return ("1"b);
	else return ("0"b);

     end exists;

/**/

/* Converts exec_com_'s call to cu_$cp into a call to ssu_$execute_line */

cp_entry:
     procedure (p_com_line_ptr, p_com_line_len, p_status);

dcl  p_com_line_ptr pointer parameter;
dcl  p_com_line_len fixed binary (21) parameter;
dcl  p_status fixed binary (35) parameter;

	call ssu_$execute_line (sci_ptr, p_com_line_ptr, p_com_line_len, p_status);

	if p_status = ssu_et_$subsystem_aborted then
	     if exec_com_request then
		call ssu_$abort_subsystem (sci_ptr);
	     else do;
		status = p_status;
		go to RETURN_FROM_EXECUTE_START_UP;
	     end;

	if p_status = ssu_et_$null_request_line then p_status = 100;
						/* it thinks it's calling the command_processor_ */

	return;

     end cp_entry;



/* Converts exec_com_'s call to cu_$evaluate_active_string into a call to ssu_$evaluate_active_string */

af_entry:
     procedure (p_info_ptr, p_active_string, p_active_string_type, p_return_value, p_status);

dcl  p_info_ptr pointer parameter;
dcl  p_active_string character (*) parameter;
dcl  p_active_string_type fixed binary parameter;
dcl  p_return_value character (*) varying parameter;
dcl  p_status fixed binary (35) parameter;

	call ssu_$evaluate_active_string (sci_ptr, p_info_ptr, p_active_string, p_active_string_type, p_return_value,
	     p_status);

	if p_status = ssu_et_$subsystem_aborted then
	     if exec_com_request then
		call ssu_$abort_subsystem (sci_ptr);
	     else do;
		status = p_status;
		go to RETURN_FROM_EXECUTE_START_UP;
	     end;

	return;

     end af_entry;

/**/

/* Converts exec_com_'s call to cu_$ready_proc into a call to the subsystems ready procedure when ready messages are
   enabled from within the exec_com by "&ready on" (initially no ready messages are printed within exec_com's) */

rdy_entry:
     procedure ();

	if ready_enabled then call sci.entries.ready (sci_ptr);

	return;

     end rdy_entry;



/* Handles exec_com_'s call to cu_$set_ready_mode */

rdy_mode_entry:
     procedure (p_ready_mode);

dcl  p_ready_mode bit (36) aligned parameter;

	if substr (p_ready_mode, 1, 1) then
	     ready_enabled = "1"b;
	else ready_enabled = "0"b;

	return;

     end rdy_mode_entry;

/**/

/* Translates exec_com_'s call to com_err_ or active_fnc_err_ into a call to ssu_$abort_line */

error_entry:
     procedure () options (variable);

dcl  arg_list_ptr pointer;
dcl  display_present fixed binary;

dcl  ptr_desc bit (36) aligned static options (constant) initial ("464000000000"b3);

dcl  1 arg_list aligned based (arg_list_ptr),
       2 arg_count fixed binary (16) unaligned,
       2 code fixed binary (18) unaligned,
       2 desc_count fixed binary (16) unaligned,
       2 pad fixed binary (18) unaligned,
       2 arg_ptrs (arg_list.arg_count) pointer,
       2 display_ptr (display_present) pointer,
       2 desc_ptrs (arg_list.desc_count) pointer;

	call cu_$arg_list_ptr (arg_list_ptr);
	if arg_list.arg_count < 2 then call ssu_$abort_line (sci_ptr, 0, "Error entry called with too few arguments.");
	if arg_list.arg_count ^= arg_list.desc_count then
	     call ssu_$abort_line (sci_ptr, 0, "Error entry called with no descriptors.");

	if arg_list.code = 8 then
	     display_present = 1;
	else display_present = 0;

	begin;

dcl  1 auto_arg_list aligned like arg_list;

	     auto_arg_list = arg_list;
	     auto_arg_list.arg_ptrs (2) = auto_arg_list.arg_ptrs (1);
	     auto_arg_list.desc_ptrs (2) = auto_arg_list.desc_ptrs (1);
	     auto_arg_list.arg_ptrs (1) = addr (sci_ptr);
	     auto_arg_list.desc_ptrs (1) = addr (ptr_desc);

	     call cu_$generate_call (ssu_$abort_line, addr (auto_arg_list));
	end;

	return;					/* never executed */

     end error_entry;

/**/

/* Sets the suffix for subsystem exec_com segments: the default set at invocation creation time is the subsystem name */

set_ec_suffix:
     entry (P_sci_ptr, P_ec_suffix);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.ec_suffix = P_ec_suffix;

	return;



/* Returns the current subsystem exec_com suffix */

get_ec_suffix:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.ec_suffix);



/* Sets the name of the search list used to locate exec_com's for this subsystem: the default set at invocation creation
   time is to not use a search list */

set_ec_search_list:
     entry (P_sci_ptr, P_ec_search_list);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.ec_search_list = P_ec_search_list;

	return;



/* Returns the current exec_com search list */

get_ec_search_list:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.ec_search_list);



/* Sets the pointer used to implement the referencing_dir search path of the subsystem's exec_com search list: the pointer
   should locate any segment in the desired directory.  Eventually, this pointer will be used to implement the
   subsystem_dir search path (when subsystem_dir is implemented) */

set_ec_subsystem_ptr:
     entry (P_sci_ptr, P_subsystem_dir_ptr);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.ec_info.subsystem_dir_ptr = P_subsystem_dir_ptr;

	return;



/* Returns the current pointer used to implement the referencing_dir search path */

get_ec_subsystem_ptr:
     entry (P_sci_ptr) returns (pointer);

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.subsystem_dir_ptr);

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include exec_com_info;
%page;
%include std_descriptor_types;

%include sub_err_flags;

     end ssu_ec_;
