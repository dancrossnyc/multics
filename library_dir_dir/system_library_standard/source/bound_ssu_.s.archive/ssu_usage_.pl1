/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Manages the SUBSYSTEM.ssusage segments, which are used to record usage of the subsystem, as well as to keep track of
   blast messages */

/* Created:  15 May 1980 by W. Olin Sibert */
/* Modified: 4 November 1981 by W. Olin Sibert to change the suffix of usage segments to ".ssusage" */
/* Modified: 5 November 1981 by G. Palter to properly count usage of the latest subsystem version */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_usage_:
     procedure ();


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_code fixed binary (35) parameter;

dcl  P_ref_ptr pointer parameter;			/* implements referencing_dir to find the usage segment */

dcl  P_threshold fixed binary parameter;		/* print_blast: maximum number of times to print the blast */
dcl  P_blast_message character (*) varying parameter;	/* print_blast: a message to users of the subsystem */


/* Local copies of parameters */

dcl  ref_ptr pointer;

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  silent_sw bit (1) aligned;			/* ON => print the blast message */

dcl  user_name character (24);
dcl  (idx, jdx) fixed binary;
dcl  usage_seg_name character (32);

dcl  continue_to_signal_ entry (fixed binary (35));
dcl  find_condition_info_ entry (pointer, pointer, fixed binary (35));
dcl  hcs_$make_ptr entry (pointer, character (*), character (*), pointer, fixed binary (35));
dcl  hcs_$set_bc_seg entry (pointer, fixed binary (24), fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  user_info_$whoami entry (character (*), character (*), character (*));

dcl  error_table_$fatal_error fixed binary (35) external;
dcl  error_table_$action_not_performed fixed binary (35) external;

dcl  (cleanup, any_other) condition;

dcl  (addr, clock, currentsize, hbound, length, maxlength, null, rtrim, substr) builtin;

/**/

/* Record a use of the subsystem and print a blast message if this user has not seen it P_threshold times */

print_blast:
     entry (P_sci_ptr, P_ref_ptr, P_threshold, P_blast_message, P_code);

	sci_ptr = P_sci_ptr;
	ref_ptr = P_ref_ptr;
	silent_sw = "0"b;
	go to COMMON;


/* Record a use of the subsystem */

record_usage:
     entry (P_sci_ptr, P_ref_ptr, P_code);

	sci_ptr = P_sci_ptr;
	ref_ptr = P_ref_ptr;
	silent_sw = "1"b;
	go to COMMON;


COMMON:
	call ssu_check_sci (sci_ptr);

	usage_seg_name = rtrim (sci.subsystem_name) || ".ssusage";

	call hcs_$make_ptr (ref_ptr, usage_seg_name, (""), usage_seg_ptr, code);
	if code ^= 0 then do;
PUNT_FOR_GOOD:					/* come here if we decide that it's hopeless */
	     P_code = error_table_$fatal_error;
	     return;
	end;

	on condition (any_other)			/* set up to catch faults */
	     call signal_handler ();

	usage_seg.write_word = 1713359;		/* see if we can write to it */

	call user_info_$whoami (user_name, (""), (""));

	call lookup_user_entry (idx);			/* see if we can find the right one */

	usage_seg.user (idx).last_time = clock ();	/* now, update the info in the segment */
	usage_seg.user (idx).total_count = usage_seg.user (idx).total_count + 1;

	usage_seg.all.last_time = clock ();
	usage_seg.all.total_count = usage_seg.all.total_count + 1;

	if usage_seg.user (idx).version ^= sci.subsystem_version then do;
	     usage_seg.user (idx).version = sci.subsystem_version;
	     usage_seg.user (idx).this_version_count = 1;
	     usage_seg.user (idx).this_version_blast = 0;
	end;
	else usage_seg.user (idx).this_version_count = usage_seg.user (idx).this_version_count + 1;

	if ^silent_sw then do;			/* should we print the blast? */
	     if usage_seg.user (idx).this_version_blast < P_threshold then do;
		usage_seg.user (idx).this_version_blast = usage_seg.user (idx).this_version_blast + 1;
		call ioa_ ("^a ^a^[: ^a^]", sci.subsystem_name, sci.subsystem_version, (length (P_blast_message) > 0),
		     P_blast_message);
	     end;
	end;

	P_code = 0;

	return;					/* all done */

/**/

/* Handles any faults which occur while referencing the usage segment */

signal_handler:
     procedure ();

dcl  1 cond_info aligned like condition_info automatic;
dcl  idx fixed binary;
dcl  code fixed binary (35);
dcl  name character (32);

dcl  GOOD_CONDITIONS (9) character (32) static options (constant)
	initial ("alrm", "cput", "finish", "mme2", "program_interrupt", "quit", "trm_", "sus_", "wkp_");

	cond_info.version = 1;

	call find_condition_info_ ((null ()), addr (cond_info), code);
	if code ^= 0 then goto PUNT_FOR_GOOD;

	if substr (cond_info.condition_name, 1, 8) = "command_" then do;
	     call continue_to_signal_ ((0));
	     return;
	end;

	do idx = 1 to hbound (GOOD_CONDITIONS, 1);
	     if cond_info.condition_name = GOOD_CONDITIONS (idx) then do;
		call continue_to_signal_ ((0));
		return;
	     end;
	end;

	go to PUNT_FOR_GOOD;			/*  can't reference the usage segment */

     end signal_handler;

/**/

/* Looks up the user's entry in the usage segment, creating an entry if necessary */

lookup_user_entry:
     procedure (p_idx);

dcl  p_idx fixed binary parameter;
dcl  idx fixed binary;

	if usage_seg.count >= USAGE_SEG_MAX_ENTRIES then	/* something wrong here */
	     go to PUNT_FOR_GOOD;

	if usage_seg.version ^= USAGE_SEG_VERSION_1 then do;
	     usage_seg.count = 0;			/* either transhed or needs to be initialized */
	     usage_seg.version = USAGE_SEG_VERSION_1;
	end;

	do idx = 1 to usage_seg.count;
	     if usage_seg.user (idx).name = user_name then do;
		p_idx = idx;			/* found it */
		return;
	     end;
	end;

	usage_seg.count = usage_seg.count + 1;		/* update the count */
	idx = usage_seg.count;			/* this could race, but not harmfully */

	usage_seg.user (idx).name = user_name;		/* fill it in */
	usage_seg.user (idx).first_time = clock ();
	usage_seg.user (idx).last_time = 0;
	usage_seg.user (idx).version = "<NONE>";
	usage_seg.user (idx).total_count = 0;
	usage_seg.user (idx).this_version_count = 0;
	usage_seg.user (idx).this_version_blast = 0;
	usage_seg.user (idx).hash_thread = 0;
	usage_seg.user (idx).pad1 (*) = ""b;

	call hcs_$set_bc_seg (usage_seg_ptr, (36 * currentsize (usage_seg)), (0));
						/* update the bitcount to reflect the new entry */

	p_idx = idx;

	return;

     end lookup_user_entry;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include "_ssu_usage_seg";
%page;
%include condition_info;

     end ssu_usage_;
