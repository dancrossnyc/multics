/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Miscellaneous subsystem utilities */

/* Created:  by W. Olin Sibert */
/* Modified: 17 Novenber 1981 by Jay Pattin to add set/get_info_prefix */
/* Modified: February 1982 by G. Palter to move info_prefix entries to ssu_info_mgr_ */
/* Modified: June 1982 by G. Palter to move (get set)_abbrev_info to ssu_request_processor_ */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_misc_procs_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_line_ptr pointer parameter;			/* cpescape, cpescape_disabled: -> the Multics command line */
dcl  P_line_lth fixed binary (21);			/* cpescape, cpescape_disabled: length of the command line */
dcl  P_code fixed binary (35) parameter;		/* cpescape, cpescape_disabled */

dcl  P_info_ptr pointer parameter;			/* unknown_request: -> per subsystem database */
dcl  P_request_name character (*) parameter;		/* unknown_request: the request name which isn't recognized */
dcl  P_arg_list_ptr pointer parameter;			/* unknown_request: -> the arguments for the request */
dcl  P_continue_sw bit (1) aligned parameter;		/* unknown_request: set ON => continue execution of request
						   line; set OFF => abort the line */

dcl  P_prompt character (64) varying parameter;		/* set_prompt: the new ioa_ control string for prompting */

dcl  P_prompt_mode bit (*) parameter;			/* set_prompt_mode: the new prompt control flags */

dcl  P_ready_mode bit (1) aligned parameter;		/* set_ready_mode: ON => print ready messages */

dcl  P_debug_mode bit (1) aligned parameter;		/* set_debug_mode: ON => enable debugging features */


/* Remaining declarations */

dcl  sr_request_name character (32);
dcl  code fixed binary (35);

dcl  cu_$cp entry (pointer, fixed binary (21), fixed binary (35));
dcl  cu_$ready_proc entry ();
dcl  ssu_$abort_line entry options (variable);
dcl  ssu_request_mgr_$find_request_name entry (pointer, entry, character (*), fixed binary (35));

dcl  ssu_requests_$summarize_requests entry ();

dcl  ssu_et_$cpescape_restricted fixed binary (35) external;

dcl  string builtin;

/**/

/* Default subsystem Multics command line escape processor */

cpescape:
     entry (P_sci_ptr, P_line_ptr, P_line_lth, P_code);

	call ssu_check_sci (P_sci_ptr);

	call cu_$cp (P_line_ptr, P_line_lth, (0));

	P_code = 0;				/* always successfull */

	return;



/* Procedure to use if a subsystem wishes to disallow the Multics command line escape sequence */

cpescape_disabled:
     entry (P_sci_ptr, P_line_ptr, P_line_lth, P_code);

	call ssu_check_sci (P_sci_ptr);

	P_code = ssu_et_$cpescape_restricted;
	call ssu_$abort_line (P_sci_ptr, P_code);

	return;

/**/

/* Standard processor for unknown requests */

unknown_request:
     entry (P_sci_ptr, P_info_ptr, P_request_name, P_arg_list_ptr, P_continue_sw);

	call ssu_check_sci (P_sci_ptr);

	call ssu_request_mgr_$find_request_name (P_sci_ptr, ssu_requests_$summarize_requests, sr_request_name, code);

	call ssu_$abort_line (P_sci_ptr, 0, "Unknown request ""^a"".^[  Type ""^a"" for a request list.^]",
	     P_request_name, (code = 0), sr_request_name);

	P_continue_sw = "0"b;			/* abort the request line ... */

	return;



/* Standard subsystem ready message procedure */

ready_proc:
     entry (P_sci_ptr);

	call ssu_check_sci (P_sci_ptr);

	call cu_$ready_proc ();

	return;

/**/

/* Returns the ioa_ control string used to generate the prompt for request lines */

get_prompt:
     entry (P_sci_ptr) returns (character (64) varying);

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.prompt);



/* Sets the prompt string */

set_prompt:
     entry (P_sci_ptr, P_prompt);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.prompt = P_prompt;

	return;



/* Returns the flags which control when (and if) prompts for request lines should be issued */

get_prompt_mode:
     entry (P_sci_ptr) returns (bit (36) aligned);

	call ssu_check_sci (P_sci_ptr);

	return (string (P_sci_ptr -> sci.prompt_mode));



/* Sets the prompt control flags */

set_prompt_mode:
     entry (P_sci_ptr, P_prompt_mode);

	call ssu_check_sci (P_sci_ptr);

	string (P_sci_ptr -> sci.prompt_mode) = P_prompt_mode;

	return;

/**/

/* Returns true if ready messages are to be printed after each request line */

get_ready_mode:
     entry (P_sci_ptr) returns (bit (1) aligned);

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.ready_enabled);



/* Sets/reset printing of ready messages after request lines */

set_ready_mode:
     entry (P_sci_ptr, P_ready_mode);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.ready_enabled = P_ready_mode;

	return;



/* Returns whether debugging features are enabled in this subsystem */

get_debug_mode:
     entry (P_sci_ptr) returns (bit (1) aligned);

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.debug_mode);



/* Sets/resets subsystem debug mode */

set_debug_mode:
     entry (P_sci_ptr, P_debug_mode);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.debug_mode = P_debug_mode;

	return;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";

     end ssu_misc_procs_;
