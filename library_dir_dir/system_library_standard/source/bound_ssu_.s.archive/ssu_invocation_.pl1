/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Subsystem invocation manager */

/* Created:  by W. Olin Sibert */
/* Modified: 15 February 1982 by G. Palter to add create_standalone and manage invocation lists without requiring the
   caller to supply an invocation_list_ptr */
/* Modified: 25 February 1982 by G. Palter to insure create_invocation is invoked with the proper number of arguments */
/* Modified: 26 May 1982 by G. Palter to manage request processor options */
/* Modified: August 1982 by Jay Pattin to setup temporaries manager before request table manager */
/* Modified: 6 November 1984 by G. Palter for version 3 SCIs */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_invocation_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_code fixed binary (35) parameter;		/* create, standalone_invocation */

dcl  P_subsystem_name character (*) parameter;		/* create: name of subsystem */
dcl  P_subsystem_version character (*) parameter;		/* create: version # of subsystem */
dcl  P_info_ptr pointer parameter;			/* create, set_info_ptr: -> subsystem's internal data */
dcl  P_request_table_ptr pointer parameter;		/* create: -> initial request table (if any) */
dcl  P_info_dir character (*) parameter;		/* create: initial info directory (if any) */

dcl  P_command_name character (*) parameter;		/* create_standalone: name of command/AF */
dcl  P_command_version character (*) parameter;		/* create_standalone: version # of the command/AF */
dcl  P_arg_list_ptr pointer parameter;			/* create_standalone: -> the command/AF's argument list */
dcl  P_abort_procedure entry () variable parameter;	/* create_standalone: entry to call on ssu_$abort_* */

dcl  P_this_level fixed binary parameter;		/* get_invocation_count: set to level of this invocation */
dcl  P_max_level fixed binary parameter;		/* get_invocation_count: set to maximum level used */

dcl  P_new_sci_ptr pointer parameter;			/* get_level_n_sci_ptr: set -> SCI of requested level */
dcl  P_new_info_ptr pointer parameter;			/* get_level_n_sci_ptr: set -> requested level's info */


/* Active subsystem invocation lists known by the utilties: invocations are grouped by subsystem name and version */

dcl  1 ilie aligned based (ilie_ptr),			/* a single active subsystem's invocation list */
       2 subsystem_name character (32) unaligned,
       2 subsystem_version character (32) unaligned,
       2 first_sci_ptr pointer,			/* -> SCI of first invocation of this subsystem */
       2 last_sci_ptr pointer,			/* -> SCI of last invocation of this subsystem */
       2 max_level fixed binary,			/* level # of last invocation */
       2 pad bit (36);
dcl  ilie_ptr pointer;

dcl  1 static_ili aligned internal static,		/* room for 16 invocation lists without having to allocate */
       2 header,
         3 n_ilies fixed binary initial (16),
         3 pad bit (36) initial (""b),
       2 ilies (16) like ilie;

dcl  1 ili aligned based (ili_ptr),			/* references are made to this structure, however */
       2 header like static_ili.header,
       2 ilies (ili_n_ilies refer (ili.n_ilies)) like ilie;
dcl  ili_ptr pointer internal static initial (null ());
dcl  ili_n_ilies fixed binary;


/* Local copies of parameters */

dcl  arg_list_ptr pointer;

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  n_arguments fixed binary;

dcl  next_sci_ptr pointer;

dcl  return_name character (72) varying;

dcl  SSU_CREATE_INVOCATION character (32) static options (constant) initial ("ssu_$create_invocation");
dcl  CANT_RESTART character (1) static options (constant) initial ("s");

dcl  error_table_$badcall fixed binary (35) external;
dcl  error_table_$wrong_no_of_args fixed binary (35) external;

dcl  ssu_$null_entry entry () variable external;
dcl  ssu_$null_label label variable external;

dcl  cu_$arg_count entry (fixed binary);
dcl  cu_$af_return_arg_rel entry (fixed binary, pointer, fixed binary (21), fixed binary (35), pointer);
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$fs_get_path_name entry (pointer, character (*), fixed binary, character (*), fixed binary (35));
dcl  hcs_$fs_get_seg_ptr entry (character (*), pointer, fixed binary (35));
dcl  hcs_$initiate
	entry (character (*), character (*), character (*), fixed binary (1), fixed binary (2), pointer,
	fixed binary (35));
dcl  ssu_$add_info_dir entry (pointer, character (*), fixed binary, fixed binary (35));
dcl  ssu_$add_request_table entry (pointer, pointer, fixed binary, fixed binary (35));
dcl  ssu_info_mgr_$init_info_dirs entry (pointer);
dcl  ssu_info_mgr_$term_info_dirs entry (pointer);
dcl  ssu_procedure_mgr_$set_all_default entry (pointer);
dcl  ssu_request_mgr_$init_request_tables entry (pointer);
dcl  ssu_request_mgr_$term_request_tables entry (pointer);
dcl  ssu_request_processor_$init_rp_options entry (pointer);
dcl  ssu_request_processor_$term_rp_options entry (pointer);
dcl  ssu_temp_mgr_$release_everything entry (pointer);
dcl  sub_err_ entry () options (variable);
dcl  term_$single_refname entry (character (*), fixed binary (35));

dcl  (addr, codeptr, null, pointer, rtrim, stackframeptr, string) builtin;
%page;
create:
     entry (P_subsystem_name, P_subsystem_version, P_info_ptr, P_request_table_ptr, P_info_dir, P_sci_ptr, P_code);

	call cu_$arg_count (n_arguments);		/* check for old-style call */
	if n_arguments ^= 7 then do;
RESIGNAL_WRONG_NO_OF_ARGS:
	     call sub_err_ (error_table_$wrong_no_of_args, SSU_CREATE_INVOCATION, CANT_RESTART, null (), (0),
		"^a expects 7 arguments; ^d were supplied.", SSU_CREATE_INVOCATION, n_arguments);
	     go to RESIGNAL_WRONG_NO_OF_ARGS;
	end;

	if P_subsystem_name = "" then do;		/* you've got to be kidding */
	     P_code = error_table_$badcall;
	     return;
	end;

	P_sci_ptr = null ();

	system_area_ptr = get_system_free_area_ ();

	call switch_ssu_refnames ();			/* make sure we get proper version of everything */

	allocate sci in (system_area) set (sci_ptr);

	sci.version = SCI_VERSION_3;			/* make it appear legitimate */
	sci.parent_area_ptr = system_area_ptr;		/* for possible later allocation and freeing */

	sci.subsystem_name = P_subsystem_name;
	sci.subsystem_version = P_subsystem_version;
	sci.info_ptr = P_info_ptr;			/* copy info from parameters */
	sci.standalone_abort_entry = ssu_$null_entry;
	string (sci.global_info.flags) = ""b;		/* this is right */

	sci.temp_info_ptr = null ();			/* no temporaries yet */

	call ssu_request_mgr_$init_request_tables (sci_ptr);
	if P_request_table_ptr ^= null () then do;	/* user supplied an initial request table */
	     call ssu_$add_request_table (sci_ptr, P_request_table_ptr, 1, P_code);
	     if P_code ^= 0 then do;
		call ssu_request_mgr_$term_request_tables (sci_ptr);
		free sci in (system_area);
		return;
	     end;
	end;

	call ssu_request_processor_$init_rp_options (sci_ptr);

	sci.request_processor_info.abort_line_label = ssu_$null_label;
	sci.request_data_ptr = null ();		/* no request running yet */

	sci.prompt = "^/" || rtrim (P_subsystem_name) || "^[ (^d)^]:^2x";
						/* standard prompt */
	string (sci.prompt_mode) = ""b;		/* default prompting */
	sci.ready_enabled = "0"b;			/* no ready messages by default */

	sci.listener_info.abort_subsystem_label = ssu_$null_label;
	sci.listener_info.temp_seg_ptr = null ();	/* initialize to use automatic buffer */


	sci.info_prefix = "";			/* defaults to any info segment name */

	call ssu_info_mgr_$init_info_dirs (sci_ptr);
	if P_info_dir ^= "" then do;			/* user supplied an initial info directory */
	     call ssu_$add_info_dir (sci_ptr, P_info_dir, 1, P_code);
	     if P_code ^= 0 then do;
		call ssu_info_mgr_$term_info_dirs (sci_ptr);
		call ssu_request_processor_$term_rp_options (sci_ptr);
		call ssu_request_mgr_$term_request_tables (sci_ptr);
		free sci in (system_area);
		return;
	     end;
	end;

	sci.ec_info.ec_suffix = sci.subsystem_name;
	sci.ec_info.ec_search_list = "";
	sci.subsystem_dir_ptr = null ();

	call ssu_procedure_mgr_$set_all_default (sci_ptr);/* setup all the entry variables to default states */

	call find_ilie ();				/* find appropriate invocation list */

	sci.recursion_info.previous_sci_ptr = ilie.last_sci_ptr;
	sci.recursion_info.next_sci_ptr = null ();	/* this is the last invocation */
	ilie.last_sci_ptr = sci_ptr;

	if ilie.first_sci_ptr = null () then		/* first invocation of this subsystem */
	     ilie.first_sci_ptr = sci_ptr;
	else sci.recursion_info.previous_sci_ptr -> sci.recursion_info.next_sci_ptr = sci_ptr;

	ilie.max_level, sci.recursion_info.level = ilie.max_level + 1;

	P_sci_ptr = sci_ptr;
	P_code = 0;				/* success */

	return;
%page;
/* Finds an invocation_list_info entry (ilie) for this subsystem name/version combination: grows the ili if necessary,
   starts a new invocation list if necessary, and sets sci.invocation_data_idx */

find_ilie:
     procedure ();

dcl  (free_ilie_idx, idx) fixed binary;
dcl  new_ili_ptr pointer;

	if ili_ptr = null () then do;			/* first time in this process */
	     ili_ptr = addr (static_ili);		/* ... use the internal one */
	     do idx = 1 to ili.n_ilies;
		ili.ilies (idx).subsystem_name = "";	/* ... mark all entries as free */
	     end;
	end;

	free_ilie_idx = 0;

	do idx = 1 to ili.n_ilies;
	     ilie_ptr = addr (ili.ilies (idx));
	     if (ilie.subsystem_name = sci.subsystem_name) & (ilie.subsystem_version = sci.subsystem_version) then do;
		sci.invocation_data_idx = idx;	/* found it */
		return;
	     end;
	     else if (ilie.subsystem_name = "") & (free_ilie_idx = 0) then free_ilie_idx = idx;
	end;					/* remember first free entry */


/* Here iff this is the first active invocation for this subsystem */

	if free_ilie_idx = 0 then do;			/* no free slots: grow the ili ... */
	     ili_n_ilies = 2 * ili.n_ilies;
	     allocate ili in (system_area) set (new_ili_ptr);
	     do idx = 1 to ili.n_ilies;		/* copy current lists */
		new_ili_ptr -> ili.ilies (idx) = ili.ilies (idx);
	     end;
	     free_ilie_idx = ili.n_ilies + 1;		/* use first free slot */
	     do idx = (ili.n_ilies + 1) to new_ili_ptr -> ili.n_ilies;
		new_ili_ptr -> ili.ilies (idx).subsystem_name = "";
	     end;					/* mark the rest free */
	     if ili_ptr ^= addr (static_ili) then	/* free old structure */
		free ili in (system_area);
	     ili_ptr = new_ili_ptr;			/* zap */
	end;

	ilie_ptr = addr (ili.ilies (free_ilie_idx));

	ilie.subsystem_name = sci.subsystem_name;
	ilie.subsystem_version = sci.subsystem_version;
	ilie.first_sci_ptr, ilie.last_sci_ptr = null ();
	ilie.max_level = 0;				/* haven't used any yet */

	sci.invocation_data_idx = free_ilie_idx;

	return;

     end find_ilie;
%page;
/* Create a standalone invocation:  Standalone invocations are used by procedures which are coded to work both as Multics
   command/AFs and as subsystem requests; the standalaone invocation is created when the procedure is invoked from
   Multics.  All references to ssu_$print_message, ssu_$abort_line, and ssu_$abort_subsystem in a standalone invocation
   are converted to appropriate calls to com_err_/active_fnc_err_; after the message is printed for the abort entries, the
   procedure's abort entry is invoked which is expected to perform a non-local goto back to the cleanup code of the
   procedure.  Calls to ssu_$execute_line and ssu_$evaluate_active_string are translated into calls to cu_$cp and
   cu_$evaluate_active_string, respectively */

create_standalone:
     entry (P_sci_ptr, P_command_name, P_command_version, P_arg_list_ptr, P_abort_procedure, P_code);

	if P_arg_list_ptr = null () then		/* get the caller's argument list */
	     arg_list_ptr = stackframeptr () -> stack_frame.prev_sp -> stack_frame.arg_ptr;
	else arg_list_ptr = P_arg_list_ptr;

	if arg_list_ptr = null () then do;		/* couldn't get the argument list pointer */
	     P_code = error_table_$badcall;
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();

	allocate sci in (system_area) set (sci_ptr);

	sci.version = SCI_VERSION_3;			/* setup the data structure */
	sci.parent_area_ptr = system_area_ptr;

	sci.subsystem_name = P_command_name;
	sci.subsystem_version = P_command_version;
	sci.info_ptr = null ();			/* none needed for a Multics command/AF */
	sci.standalone_abort_entry = P_abort_procedure;
	string (sci.global_info.flags) = ""b;
	sci.standalone_invocation = "1"b;
	sci.executing_request = "1"b;			/* causes most other procedures to react properly */

	sci.recursion_info.invocation_data_idx = 0;	/* no invocation lists are kept for standalone invocations */
	sci.recursion_info.level = 1;
	sci.recursion_info.previous_sci_ptr, sci.recursion_info.next_sci_ptr = null ();

	sci.request_tables_ptr = null ();		/* no request tables: can't execute requests */
	sci.rp_options_ptr = null ();			/* no request processor: will never use options */
	sci.request_processor_info.abort_line_label = ssu_$null_label;
	allocate request_data in (system_area) set (sci.request_data_ptr);

	sci.prompt = "";				/* no listener loop allowed: no prompts or ready messages */
	string (sci.prompt_mode) = ""b;
	sci.ready_enabled = "0"b;

	sci.listener_info.abort_subsystem_label = ssu_$null_label;
	sci.listener_info.temp_seg_ptr = null ();	/* no listener either */

	sci.temp_info_ptr = null ();			/* no temporary segments/areas yet */

	sci.info_dirs_ptr = null ();			/* no help/list_help requests */
	sci.info_prefix = "";

	sci.ec_suffix, sci.ec_search_list = "";		/* no exec_com request either */
	sci.ec_info.subsystem_dir_ptr = null ();

	call ssu_procedure_mgr_$set_all_default (sci_ptr);


/* Create a fake executing request which is acutally the Multics command/AF */

	request_data_ptr = sci.request_data_ptr;

	request_data.full_name = P_command_name;	/* so the procedure can use get_request_name */

	request_data.entry = ssu_$null_entry;		/* nothing will ever call this anyway */
	string (request_data.flags) = ""b;
	request_data.name_list_ptr = null ();		/* don't bother to make up a fake name list ... */
	request_data.info_string.ptr = null ();		/* ... or documentation string */
	request_data.info_string.lth = 0;

	request_data.call_info.arg_list_ptr = arg_list_ptr;

	call cu_$af_return_arg_rel (request_data.arg_count, request_data.rv_ptr, request_data.rv_lth, code,
	     request_data.arg_list_ptr);		/* get argument count and return string (if any) */

	if code = 0 then				/* a Multics active function */
	     request_data.af_sw = "1"b;
	else request_data.af_sw = "0"b;		/* a Multics command */

	P_sci_ptr = sci_ptr;			/* all done */
	P_code = 0;

	return;
%page;
/* Destroy a subsystem invocation: removes the invocation from the list of active invocations of the subsystem */

destroy:
     entry (P_sci_ptr);

	if P_sci_ptr = null () then			/* protect against confused cleanup handlers */
	     return;

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	P_sci_ptr = null ();			/* prevent multiple attempts to destroy this invocation */

	if ^sci.standalone_invocation then do;		/* pop a level */
	     ilie_ptr = addr (ili.ilies (sci.invocation_data_idx));
	     if ilie.last_sci_ptr = sci_ptr then	/* was the last active invocation */
		ilie.last_sci_ptr = sci.recursion_info.previous_sci_ptr;
	     else sci.recursion_info.next_sci_ptr -> sci.previous_sci_ptr = sci.previous_sci_ptr;
	     if ilie.first_sci_ptr = sci_ptr then	/* was the first active invocation */
		ilie.first_sci_ptr = sci.recursion_info.next_sci_ptr;
	     else sci.recursion_info.previous_sci_ptr -> sci.next_sci_ptr = sci.next_sci_ptr;
	     if ilie.last_sci_ptr = null () then	/* no longer any active invocations */
		ilie.max_level = 0;
	     else ilie.max_level = ilie.last_sci_ptr -> sci.recursion_info.level;
	end;					/* make sure highest active invocation level is correct */

	system_area_ptr = sci.parent_area_ptr;

	call ssu_temp_mgr_$release_everything (sci_ptr);	/* free all temporaries ... */
	call ssu_info_mgr_$term_info_dirs (sci_ptr);	/* ... and any tables acquired by utility procedures */
	call ssu_request_processor_$term_rp_options (sci_ptr);
	call ssu_request_mgr_$term_request_tables (sci_ptr);

	if sci.standalone_invocation & (sci.request_data_ptr ^= null ()) then do;
	     free sci.request_data_ptr -> request_data in (system_area);
	     sci.request_data_ptr = null ();
	end;

	free sci in (system_area);			/* get rid of the structure */

	return;
%page;
/* Returns a pointer to the subsystem's internal data */

get_info_ptr:
     entry (P_sci_ptr) returns (pointer);

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.info_ptr);



/* Sets the pointer to the subsystem's internal data: allows a subsystem to postpone creation of its internal data until
   it knows that the subsystem invocation was successfully created */

set_info_ptr:
     entry (P_sci_ptr, P_info_ptr);

	call ssu_check_sci (P_sci_ptr);

	P_sci_ptr -> sci.info_ptr = P_info_ptr;

	return;
%page;
/* Returns the subsystem's name */

get_subsystem_name:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.subsystem_name);



/* Returns the version number of the subsystem */

get_subsystem_version:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	return (P_sci_ptr -> sci.subsystem_version);



/* Returns the name of the subsystem request being executed (if any): for standalone invocations, returns the name of
   Multics command/AF which created the invocation */

get_request_name:
     entry (P_sci_ptr) returns (character (32));

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.executing_request then
	     return (sci.request_data_ptr -> request_data.full_name);

	else return ("");



/* Returns the subsystem's and current request's names in the form with the request name enclosed in parentheses */

get_subsystem_and_request_name:
     entry (P_sci_ptr) returns (character (72) varying);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	return_name = rtrim (sci.subsystem_name);

	if sci.executing_request & ^sci.standalone_invocation then do;
	     return_name = return_name || " (";
	     return_name = return_name || rtrim (sci.request_data_ptr -> request_data.full_name);
	     return_name = return_name || ")";
	end;

	return (return_name);
%page;
/* Returns the level # of this subsystem invocation and the # of the highest active invocation of the subsystem */

get_invocation_count:
     entry (P_sci_ptr, P_this_level, P_max_level);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.standalone_invocation then		/* shouldn't ask, but ... */
	     P_this_level, P_max_level = 1;

	else do;
	     ilie_ptr = addr (ili.ilies (sci.invocation_data_idx));
	     P_this_level = sci.recursion_info.level;
	     P_max_level = ilie.max_level;
	end;

	return;
%page;
/* Returns a pointer to the SCI and subsystem's internal database for the requested invocation of the subsystem */

get_level_n_sci_ptr:
     entry (P_sci_ptr, P_this_level, P_new_sci_ptr, P_new_info_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.standalone_invocation then		/* shouldn't ask for this, but ... */
	     if P_this_level = 1 then do;		/* ... only 1 level for standalone invocations */
		P_new_sci_ptr = sci_ptr;
		P_new_info_ptr = sci.info_ptr;
	     end;
	     else P_new_sci_ptr, P_new_info_ptr = null ();

	else do;
	     P_new_sci_ptr, P_new_info_ptr = null ();	/* assume failure */
	     ilie_ptr = addr (ili.ilies (sci.invocation_data_idx));
	     do next_sci_ptr = ilie.first_sci_ptr repeat (next_sci_ptr -> sci.next_sci_ptr)
		while (next_sci_ptr ^= null ());
		if next_sci_ptr -> sci.recursion_info.level = P_this_level then do;
		     P_new_sci_ptr = next_sci_ptr;
		     P_new_info_ptr = next_sci_ptr -> sci.info_ptr;
		end;
	     end;
	end;

	return;
%page;
/* Return a pointer to the SCI and subsystem's internal database for the previous active invocation of this subsystem */

get_prev_sci_ptr:
     entry (P_sci_ptr, P_new_sci_ptr, P_new_info_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.previous_sci_ptr ^= null () then do;	/* there is a previous invocation */
	     P_new_sci_ptr = sci.recursion_info.previous_sci_ptr;
	     P_new_info_ptr = sci.recursion_info.previous_sci_ptr -> sci.info_ptr;
	end;

	else do;					/* no previous invocation */
	     P_new_sci_ptr = null ();
	     P_new_info_ptr = null ();
	end;

	return;
%page;
/* Insures that the reference names ssu_et_, ssu_requests_, and ssu_request_tables_ are on the same object segment as
   ssu_: If this is not done, references to either of the other two names from user programs could reference the wrong
   (older or newer) versions of these segments which can cause problems -- for ssu_et_, the error codes would be unequal
   as this segment's references to them are bound away and always reference the codes in this segment; for ssu_requests_,
   the older/newer versions of the requests might have different ideas as to the nature of the SCI structure; for
   ssu_request_tables_, the older/newer versions of the tables might have different requests */

switch_ssu_refnames:
     procedure ();

dcl  dirname character (168);
dcl  ename character (32);
dcl  other_ssu_ptr pointer;

	call hcs_$fs_get_seg_ptr ("ssu_et_", other_ssu_ptr, code);
	if (code ^= 0) then do;			/* didn't find the refname at all */
SWITCH_SSU_ET_REFNAME:
	     call term_$single_refname ("ssu_et_", (0));	/* terminate it, whether initiated or not */
	     call hcs_$fs_get_path_name (codeptr (ssu_invocation_), dirname, (0), ename, (0));
	     call hcs_$initiate (dirname, ename, "ssu_et_", 0, 0, (null ()), (0));
	end;
	else if pointer (other_ssu_ptr, 0) ^= pointer (codeptr (ssu_invocation_), 0) then go to SWITCH_SSU_ET_REFNAME;
						/* wrong object segment */

	call hcs_$fs_get_seg_ptr ("ssu_requests_", other_ssu_ptr, code);
	if (code ^= 0) then do;			/* didn't find the refname at all */
SWITCH_SSU_REQUESTS_REFNAME:
	     call term_$single_refname ("ssu_requests_", (0));
						/* terminate it, whether initiated or not */
	     call hcs_$fs_get_path_name (codeptr (ssu_invocation_), dirname, (0), ename, (0));
	     call hcs_$initiate (dirname, ename, "ssu_requests_", 0, 0, (null ()), (0));
	end;
	else if pointer (other_ssu_ptr, 0) ^= pointer (codeptr (ssu_invocation_), 0) then
	     go to SWITCH_SSU_REQUESTS_REFNAME;		/* wrong object segment */

	call hcs_$fs_get_seg_ptr ("ssu_request_tables_", other_ssu_ptr, code);
	if (code ^= 0) then do;			/* didn't find the refname at all */
SWITCH_SSU_REQUEST_TABLES_REFNAME:
	     call term_$single_refname ("ssu_request_tables_", (0));
						/* terminate it, whether initiated or not */
	     call hcs_$fs_get_path_name (codeptr (ssu_invocation_), dirname, (0), ename, (0));
	     call hcs_$initiate (dirname, ename, "ssu_request_tables_", 0, 0, (null ()), (0));
	end;
	else if pointer (other_ssu_ptr, 0) ^= pointer (codeptr (ssu_invocation_), 0) then
	     go to SWITCH_SSU_REQUEST_TABLES_REFNAME;	/* wrong object segment */

	return;

     end switch_ssu_refnames;
%page;
%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include "_ssu_request_data";
%page;
%include stack_frame;

     end ssu_invocation_;
