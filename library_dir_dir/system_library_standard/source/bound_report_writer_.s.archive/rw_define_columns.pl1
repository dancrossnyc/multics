/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the subroutine called by Multics subsystems to define
     a set of columns for report_writer_.

     Description:

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - October 1984.

*/
%page;
rw_define_columns: proc (

	report_control_ip_parm,	/* input: points to report_control_info */
	row_info_ptr_parm,            /* input: points to row_info */
	code_parm,		/* output: success or failure */
	message_parm		/* output: reason for the failure */
			     );
%skip(1);
dcl code_parm fixed bin (35) parm;
dcl message_parm char (*) varying parm;
dcl report_control_ip_parm ptr parm;
dcl row_info_ptr_parm ptr parm;
%skip(1);
	report_cip = report_control_ip_parm;
	row_info_ptr = row_info_ptr_parm;
	code_parm = 0;
	message_parm = "";
%skip(1);
	sci_ptr = report_control_info.subsystem_control_info_ptr;
	work_area_ptr = report_control_info.general_work_area_ptr;
	column_print_lengths_ptr = null;
	table_ip = null;
	cleanup_has_been_signalled = OFF;
	on cleanup begin;
	     cleanup_has_been_signalled = ON;
	     call cleanup_allocated_things;
	end;
%skip(1);
	if row_info_ptr ^= null
	then do;
	     call check_row_info_validity (code_parm, message_parm);
	     if code_parm = 0
	     then call fill_in_row_info (code_parm, message_parm);
	     if code_parm ^= 0
	     then return;
	     call allocate_table_info;
	end;
%skip(1);
	if report_control_info.table_information_ptr ^= null
	then do;
	     free report_control_info.table_information_ptr -> table_info;
	     report_control_info.table_information_ptr = null;
	end;
	report_control_info.table_information_ptr = table_ip;
%skip(1);
	call rw_options$define_new_column_options (report_cip);
	call cleanup_allocated_things;
%skip(1);
	return;
%page;
allocate_table_info: proc;
%skip(1);
dcl ati_loop fixed bin;
%skip(1);
	ti_init_column_count = row_info.number_of_columns;
%skip(1);
	allocate table_info in (work_area) set (table_ip);
	table_info.version = TABLE_INFO_VERSION_1;
	table_info.maximum_column_name_length = the_maximum_column_name_length;
	table_info.maximum_column_value_length = the_maximum_column_value_length;
	table_info.row_value_length = row_info.value_length;
	table_info.row_value_ptr = row_info.value_ptr;
%skip(1);
	do ati_loop = 1 to ti_init_column_count;
	     table_info.columns (ati_loop).column_name
		= row_info.column (ati_loop).names;
	     table_info.columns (ati_loop).column_data_type
		= row_info.column (ati_loop).descriptors;
	     table_info.columns (ati_loop).column_length
		= row_info.column (ati_loop).lengths;
	     table_info.columns (ati_loop).column_index
		= row_info.column (ati_loop).indexes;
	end;
%skip(1);
	return;
%skip(1);
     end allocate_table_info;
%page;
check_row_info_validity: proc (

	criv_code_parm,	/* output: success or failure */
	criv_message_parm	/* output: reason for the failure */
			);
%skip(1);
dcl criv_code_parm fixed bin (35) parm;
dcl criv_loop fixed bin;
dcl criv_message_parm char (*) varying parm;
dcl criv_valid_data_type bit (1) aligned;
%skip(1);
	criv_code_parm = 0;
	criv_message_parm = "";
%skip(1);
	if row_info.version ^= ROW_INFO_VERSION_1
	then do;
	     criv_code_parm = error_table_$unimplemented_version;
	     call ioa_$rsnnl (
		"^/The row_info structure version number was ^a instead of ^a.",
		criv_message_parm, (0), row_info.version, ROW_INFO_VERSION_1);
	     return;
	end;
%skip(1);
	if row_info.number_of_columns ^> 0
	then do;
	     criv_code_parm = error_table_$improper_data_format;
	     call ioa_$rsnnl (
		"The number of columns supplied was ^d instead of a positive integer.",
		criv_message_parm, (0), row_info.number_of_columns);
	     return;
	end;
	the_maximum_column_name_length = 0;
	criv_code_parm = error_table_$improper_data_format;
%skip(1);
	do criv_loop = 1 to row_info.number_of_columns;
	     row_info.column (criv_loop).names = rtrim (row_info.column (criv_loop).names);
	     if index (row_info.column (criv_loop).names, BLANK_OR_TAB) ^= 0
	     then do;
		call ioa_$rsnnl (
		     "^/The column name ""^a"" contained blanks or tabs.",
		     criv_message_parm, (0), row_info.column (criv_loop).names);
		return;
	     end;
	     the_current_column_name_length = length (row_info.column (criv_loop).names);
	     if the_current_column_name_length > the_maximum_column_name_length
	     then the_maximum_column_name_length = the_current_column_name_length;
	     arg_descriptor_ptr = addr (row_info.column (criv_loop).descriptors);
	     if arg_descriptor_ptr -> bit_36_aligned = OFF
	     then if row_info.column (criv_loop).lengths ^> 0
		then call ioa_$rsnnl (
		     "^/The descriptor for ^a was zero and it's length field wasn't a positive integer.",
		     criv_message_parm, (0), row_info.column (criv_loop).names);
	          else if row_info.column (criv_loop).lengths ^< sys_info$max_seg_size * 4 + 1
		     then call ioa_$rsnnl (
		          "^/The descriptor for ^a was zero and it's length field was^/larger than the maximum Multics segment size.",
		          criv_message_parm, (0), row_info.column (criv_loop).names);
		     else criv_valid_data_type = ON;
	     else criv_valid_data_type = (arg_descriptor.type = real_fix_bin_1_dtype)
		| (arg_descriptor.type = real_fix_bin_2_dtype)
		| (arg_descriptor.type = real_flt_bin_1_dtype)
		| (arg_descriptor.type = real_flt_bin_2_dtype)
		| (arg_descriptor.type = cplx_fix_bin_1_dtype)
		| (arg_descriptor.type = cplx_fix_bin_2_dtype)
		| (arg_descriptor.type = cplx_flt_bin_1_dtype)
		| (arg_descriptor.type = cplx_flt_bin_2_dtype)
		| (arg_descriptor.type = real_fix_dec_9bit_ls_dtype)
		| (arg_descriptor.type = real_flt_dec_9bit_dtype)
		| (arg_descriptor.type = cplx_fix_dec_9bit_ls_dtype)
		| (arg_descriptor.type = cplx_flt_dec_9bit_dtype)
		| (arg_descriptor.type = bit_dtype)
		| (arg_descriptor.type = varying_bit_dtype)
		| (arg_descriptor.type = char_dtype)
		| (arg_descriptor.type = varying_char_dtype)
		| (arg_descriptor.type = real_fix_dec_9bit_ls_overp_dtype)
		| (arg_descriptor.type = real_fix_dec_9bit_ts_overp_dtype)
		| (arg_descriptor.type = real_fix_bin_1_uns_dtype)
		| (arg_descriptor.type = real_fix_bin_2_uns_dtype)
		| (arg_descriptor.type = real_fix_dec_9bit_uns_dtype)
		| (arg_descriptor.type = real_fix_dec_9bit_ts_dtype)
		| (arg_descriptor.type = real_fix_dec_4bit_uns_dtype)
		| (arg_descriptor.type = real_fix_dec_4bit_ts_dtype)
		| (arg_descriptor.type = real_fix_dec_4bit_bytealigned_uns_dtype)
		| (arg_descriptor.type = real_fix_dec_4bit_ls_dtype)
		| (arg_descriptor.type = real_flt_dec_4bit_dtype)
		| (arg_descriptor.type = real_fix_dec_4bit_bytealigned_ls_dtype)
		| (arg_descriptor.type = real_flt_dec_4bit_bytealigned_dtype)
		| (arg_descriptor.type = cplx_fix_dec_4bit_bytealigned_ls_dtype)
		| (arg_descriptor.type = cplx_flt_dec_4bit_bytealigned_dtype);
	     if criv_message_parm ^= ""
	     then return;
	     else if ^criv_valid_data_type
		then do;
		     call ioa_$rsnnl (
			"^/The descriptor ""^w"" for the ^a column isn't supported.",
			criv_message_parm, (0), row_info.column (criv_loop).descriptors,
			row_info.column (criv_loop).names);
		     return;
		end;
		else;
	end;
	criv_code_parm = 0;
%skip(1);
	return;
%skip(1);
     end check_row_info_validity;
%page;
cleanup_allocated_things: proc;
%skip(1);
	if column_print_lengths_ptr ^= null
	then free column_print_lengths;
%skip(1);
	if cleanup_has_been_signalled
	then do;
	     if table_ip ^= null
	     then free table_info;
	     report_control_info.table_information_ptr = null;
	end;
%skip(1);
	return;
%skip(1);
     end cleanup_allocated_things;
%page;
fill_in_row_info: proc (

	firi_code_parm,	/* output: success or failure */
	firi_message_parm	/* output: reason for the failure */
		   );
%skip(1);
dcl firi_code_parm fixed bin (35) parm;
dcl firi_current_index_position fixed bin (21);
dcl firi_loop fixed bin;
dcl firi_message_parm char (*) varying parm;
%skip(1);
	firi_code_parm = 0;
	firi_message_parm = "";
%skip(1);
	allocate column_print_lengths in (work_area)
	     set (column_print_lengths_ptr);
	the_maximum_column_value_length = 0;
	firi_current_index_position = 1;
%skip(1);
	do firi_loop = 1 to row_info.number_of_columns;
	     arg_descriptor_ptr = addr (row_info.column (firi_loop).descriptors);
	     if arg_descriptor_ptr -> bit_36_aligned = OFF
	     then do;
		column_print_lengths (firi_loop) = row_info.column (firi_loop).lengths;
		arg_descriptor.flag = ON;
		arg_descriptor.type = char_dtype;
		arg_descriptor.packed = ON;
		arg_descriptor.number_dims = 0;
		arg_descriptor.size = column_print_lengths (firi_loop);
	     end;
	     else do;
		if mdbm_util_$binary_data_class (arg_descriptor_ptr)
		then column_print_lengths (firi_loop) = divide (fixed_arg_descriptor.precision, 3, 21) + 5;
		else if mdbm_util_$number_data_class (arg_descriptor_ptr)
		     then column_print_lengths (firi_loop) = fixed_arg_descriptor.precision + 3;
		     else if mdbm_util_$string_data_class (arg_descriptor_ptr)
			then column_print_lengths (firi_loop) = arg_descriptor.size;
		          else column_print_lengths (firi_loop) = 20;
		if mdbm_util_$number_data_class (arg_descriptor_ptr) 
		then if mdbm_util_$fixed_data_class (arg_descriptor_ptr) 
		     then if (fixed_arg_descriptor.scale < 0)
			| (fixed_arg_descriptor.scale > 0 & fixed_arg_descriptor.precision < fixed_arg_descriptor.scale)
			then column_print_lengths (firi_loop) = column_print_lengths (firi_loop)
		               + ceil (log10 (abs (fixed_arg_descriptor.scale)));
			else;
		     else column_print_lengths (firi_loop) = column_print_lengths (firi_loop) + 5;
		else;
		if mdbm_util_$complex_data_class (arg_descriptor_ptr) 
		then column_print_lengths (firi_loop) = column_print_lengths (firi_loop) * 2;
	     end;
	     row_info.column (firi_loop).indexes = firi_current_index_position;
	     row_info.column (firi_loop).lengths = column_print_lengths (firi_loop);
	     firi_current_index_position = firi_current_index_position + column_print_lengths (firi_loop);
	     if column_print_lengths (firi_loop) > the_maximum_column_value_length
	     then the_maximum_column_value_length = column_print_lengths (firi_loop);
	end;
%skip(1);
	the_row_value_length = sum (column_print_lengths);
	if the_row_value_length > sys_info$max_seg_size * 4
	then do;
	     firi_code_parm = error_table_$improper_data_format;
	     call ioa_$rsnnl (
		"^/The ^d character length of the row exceeded one segment.",
		firi_message_parm, (0), the_row_value_length);
	     return;
	end;
%skip(1);
	row_info.value_ptr = report_control_info.row_value_temp_segment_ptr;
	row_info.value_length = the_row_value_length;
	row_info.current_column_number = 0;
%skip(1);
	return;
%skip(1);
     end fill_in_row_info;
%page;
dcl BLANK_OR_TAB char (2) internal static options (constant) init (" 	");
%skip(1);
dcl OFF bit (1) aligned internal static options (constant) init ("0"b);
dcl ON bit (1) aligned internal static options (constant) init ("1"b);
%skip(1);
dcl abs builtin;
dcl addr builtin;
%skip(1);
dcl bit_36_aligned bit (36) aligned based;
%skip(1);
dcl ceil builtin;
dcl cleanup condition;
dcl cleanup_has_been_signalled bit (1) aligned;
dcl column_print_lengths (row_info.number_of_columns) fixed bin (21) based (column_print_lengths_ptr);
dcl column_print_lengths_ptr ptr;
%skip(1);
dcl divide builtin;
%skip(1);
dcl error_table_$improper_data_format fixed bin(35) ext static;
dcl error_table_$unimplemented_version fixed bin(35) ext static;
%skip(1);
dcl index builtin;
dcl ioa_$rsnnl entry() options(variable);
%skip(1);
dcl length builtin;
dcl log10 builtin;
%skip(1);
dcl mdbm_util_$binary_data_class entry (ptr) returns(bit(1) aligned);
dcl mdbm_util_$complex_data_class entry (ptr) returns(bit(1) aligned);
dcl mdbm_util_$fixed_data_class entry (ptr) returns(bit(1) aligned);
dcl mdbm_util_$number_data_class entry (ptr) returns(bit(1) aligned);
dcl mdbm_util_$string_data_class entry (ptr) returns(bit(1) aligned);
%skip(1);
dcl null builtin;
%skip(1);
dcl rtrim builtin;
dcl rw_options$define_new_column_options entry (ptr);
%skip(1);
dcl sci_ptr ptr;
dcl sum builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl the_current_column_name_length fixed bin;
dcl the_row_value_length fixed bin (21);
dcl the_maximum_column_name_length fixed bin;
dcl the_maximum_column_value_length fixed bin (21);
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_descriptor;
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%page;
%include rw_row_info;
%page;
%include rw_table_info;
%page;
%include std_descriptor_types;
%skip(3);
     end rw_define_columns;
