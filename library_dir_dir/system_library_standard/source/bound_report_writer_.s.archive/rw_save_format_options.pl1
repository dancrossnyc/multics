/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     report_writer_ save_format_options request. Description and usage follows.

     Description:

     This request does EITHER 1, 2 or 3 listed below.
     
     1) Saves the ACTIVE option names and values.

     2) Saves ALL the option names and values.

     3) Saves USER SPECIFIED option names and values.
     
     Usage (1): "svfo path {-query}" or
                "svfo path {-query} -active"

     Only the active option names and values are saved to the
     file specifed by path. The query is optionally saved
     also.

     Usage (2): "svfo path {-query} -all"

     All of the formatting option names and values are saved to
     the file specifed by path. The query is optionally saved
     also.

     Usage (3): "svfo path {-query} -format_option_args"

     Where -format_option_args are the names of the formatting options whose
     values are to be saved to the file specifed by path. The query
     is optionally saved also.

     The formatting option names and values are saved to the file as an
     exec_com. The counterpart to this request, restore_format_options, does a
     subsystem exec_com on this file to accomplish the restoring.

     The old control argument of -selection_expression | -se is still accepted
     but not documented.

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983
     Changed - Al Dupuis - October 1984 Became report_writer_.

*/
%page;
rw_save_format_options: proc (

	sci_ptr_parm,    /* ptr to the subsystem control info structure */
	report_cip_parm  /* points to report_control_info */
		         );
%skip(3);
dcl report_cip_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(3);
/*
          Mainline Processing Overview.

          (1) Determine requested usage.

          (2) Write the exec_com header and optionally the query.

          (3) Get the option names and values. Either all of them, the
	    active ones, or user provided ones.

          (4) Write the option names and values.

          (5) Write the exec_com footer.
*/
%page;
%skip(3);
	file_needs_terminating = OFF;
	query_segment_ptr = null;
	cleanup_signalled = OFF;
%skip(1);
          on cleanup begin;
	     cleanup_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call initialize;
          call write_exec_com_header;
%skip(1);
          if usage_1
	then call rw_options$get_active (report_cip,
	     names_and_values_info_ptr, no_of_names_and_values,
	     names_and_values_ptr, size_of_names_and_values, code);
	else if usage_2
	     then call rw_options$get_all (report_cip,
	          names_and_values_info_ptr, no_of_names_and_values,
	          names_and_values_ptr, size_of_names_and_values, code);
	     else do;
		call get_user_specified_option_names;
		call rw_options$get_named (report_cip, 
		     option_name_table_ptr, no_of_options_in_name_table,
		     names_and_values_info_ptr, no_of_names_and_values,
		     names_and_values_ptr, size_of_names_and_values, code);
	     end;
%skip(1);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
          call write_the_names_and_values;
	call write_exec_com_footer;
	call terminate;
%skip(1);
          return;
%page;
get_user_specified_option_names: proc;
%skip(3);
/*
	Load up the table with format option names and identifiers. The
	variable number_of_format_option_names has been set back in the
	initialize procedure when the first pass through the control args
	was made. If the format option names and identifiers were specified
	correctly then the table will be the exact size needed. If they
	were incorrectly specified it will be diagnosed here before the
	table can overflow.
*/
%skip(1);
          names_and_values_area_ptr = report_control_info.name_value_area_ptr;
	no_of_options_in_name_table = number_of_format_option_names;
%skip(1);
	allocate option_name_table in (names_and_values_area)
	     set (option_name_table_ptr);
%skip(1);
	current_arg = 2;
          call get_next_format_option_arg (code);
          if code = NO_MORE_FORMAT_OPTION_ARGS
          then call ssu_$abort_line (sci_ptr, 0,
	     "Logic error while processing the format option arguments.");
%skip(1);
          still_processing_args = ON;
	loop = 1;
%skip(1);
          do while (still_processing_args);
%skip(1);
	     option_name = arg;
	     call rw_options$check_name (report_cip, option_name,
		long_option_name, identifier_needed, code);
	     if code ^= 0
	     then if code = rw_error_$bad_option_name
		then call ssu_$abort_line (sci_ptr, code,
		     "^/^a is not a valid option name.", option_name);
	          else if code = rw_error_$no_columns_defined
		     then call ssu_$abort_line (sci_ptr, code,
		          "^/There must be columns defined before the value of ^a can be saved.",
		          long_option_name);
		     else call ssu_$abort_line (sci_ptr, code);
	     else;
	     option_name_table.the_name (loop) = long_option_name;
%skip(1);
	     if identifier_needed
	     then do;
		call get_next_format_option_arg (code);
		if code = NO_MORE_FORMAT_OPTION_ARGS
		then call ssu_$abort_line (sci_ptr, 0,
		     "The option name ^a was not followed by an identifier.",
		     option_name);
		else option_name_table.the_identifier (loop) = arg;
		call rw_options$check_identifier (report_cip,
		     option_name_table.the_name (loop), 
		     option_name_table.the_identifier (loop),
		     normalized_option_name, code);
		if code ^= 0
		then if code = rw_error_$bad_option_identifier
		     then call ssu_$abort_line (sci_ptr, code,
		          "^/^a is not a valid column identifier for ^a.",
		          option_name_table.the_identifier (loop),
		          option_name_table.the_name (loop));
		     else if code ^= error_table_$nostars
			then call ssu_$abort_line (sci_ptr, code);
		          else;
		else;
	     end;
	     else option_name_table.the_identifier (loop) = "";
%skip(1);
	     loop = loop + 1;
	     call get_next_format_option_arg (code);
	     if code = NO_MORE_FORMAT_OPTION_ARGS
	     then still_processing_args = OFF;
%skip(1);
	     if still_processing_args
	     then if loop
		> no_of_options_in_name_table
		then call ssu_$abort_line (sci_ptr, 0,
		     "A format option name or column identifier was incorrectly specified.");
	          else;
	     else;
%skip(1);
	end;
%skip(1);
	return;
%page;
get_next_format_option_arg: proc (code_parm);
%skip(3);
/*
	Skip over the control args and get to the format option arg. Set
	code if there isn't any left.
*/
%skip(1);
dcl code_parm fixed bin (35) parm;
%skip(1);
	code_parm = 0;
%skip(1);
	do while (this_is_a_control_arg (current_arg));
	     current_arg = current_arg + 1;
	end;
%skip(1);
	if current_arg > no_of_args_supplied
	then do;
	     code_parm = NO_MORE_FORMAT_OPTION_ARGS;
	     return;
	end;
%skip(1);
          call ssu_$arg_ptr (sci_ptr, current_arg, arg_ptr, arg_length);
	current_arg = current_arg + 1;
%skip(1);
	return;
%skip(1);
     end get_next_format_option_arg;
%skip(1);
     end get_user_specified_option_names;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	report_cip = report_cip_parm;
%skip(1);
          usage_1 = OFF;
	usage_2 = OFF;
	usage_3 = OFF;
%skip(1);
	query_statement_flag = OFF;
	unspec (this_is_a_control_arg) = OFF;
	number_of_control_args_found = 0;
%skip(1);
/* 

          If no args are given then it is an error.  The first arg must be
          pathname.  If no additional args are given then usage (1) has been
          requested.  If "-active" is given, then usage (1) has been
          requested by explicitely stating the default.  If -active and -all
          are given the last one supplied is used.  -active and -all cannot
          be used with the format_option_args.  If -all is used correctly
          then usage (2) has been requested.  If -active and -all are not
          found, then usage (3) is assumed, and invalid option names are
          reported as they are encountered.

*/
%skip(1);
	call ssu_$arg_count (sci_ptr, no_of_args_supplied);
%skip(1);
	if no_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "^/Usage: save_format_options path {-format_options_args} {-control_args}.");
          else;
%skip(1);
          /* Get the mandatory, positional pathname argument. */
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	pathname = arg;
%page;
/* 
	Determine which usage was intended and count the number of
          user supplied format option names so the table 
          to hold them can be allocated. 
*/
%skip(1);
          number_of_format_option_names = 0;
          if no_of_args_supplied = 1
	then usage_1 = ON;
          else do loop = 2 to no_of_args_supplied;
	     call ssu_$arg_ptr (sci_ptr, loop, arg_ptr, arg_length);
	     if arg = "-all" | arg = "-a" 
	     | arg = "-active" | arg = "-act"
	     | arg = "-selection_expression" | arg = "-se" | arg = "-query"
	     then do;
		this_is_a_control_arg (loop) = ON;
		number_of_control_args_found 
		     = number_of_control_args_found + 1;
		if arg = "-all" | arg = "-a"
		then do;
		     usage_2 = ON;
		     usage_1 = OFF;
		end;
		else if arg = "-active" | arg = "-act"
		     then do;
			usage_1 = ON;
			usage_2 = OFF;
		     end;
		     else query_statement_flag = ON;
	     end;
	     else do;
		usage_3 = ON;
		if substr (arg, 1, 1) = "-"
		then number_of_format_option_names
		     = number_of_format_option_names + 1;
		else;
	     end;
	end;
%skip(1);
	if ^usage_1 & ^usage_2 & ^usage_3
	then usage_1 = ON;
%skip(1);
          /* Check for inconsistent combinations of control args. */
%skip(1);
	if (usage_3 & (usage_1 | usage_2))
	| ((usage_1 | usage_2) & (number_of_format_option_names > 0))
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/When ^[-all^;-active^] is used no format option args can be specified.",
	     fixed (usage_1 || usage_2));
	else if usage_3 & number_of_format_option_names ^> 0
               then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          "^/At least one format option name must be specified.");
	     else;
%skip(1);
          /* Make sure a query statement is available if the user 
             asked for it to be saved with the file. */
%skip(1);
	table_ip = report_control_info.table_information_ptr;
          if query_statement_flag & table_ip = null
	then call ssu_$abort_line (sci_ptr, rw_error_$no_columns_defined,
	     "^/The format was not saved.");
%skip(1);
          /* Ready the file, truncate it if it exists. */
%skip(1);
          call expand_pathname_$add_suffix (pathname,
	     "fo." || rtrim (ltrim (report_control_info.subsystems_ec_suffix)),
	     dir_name, entry_name, code);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to expand ^a.", pathname);
%skip(1);
          switch_name = unique_chars_ ("0"b) || ".rw_svfo";
%skip(1);
          call iox_$attach_name (switch_name, iocb_ptr, 
	     "vfile_ " || rtrim (dir_name) || ">" || entry_name, null (), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to attach ^a.", pathname);
	file_needs_terminating = ON;
	call iox_$open (iocb_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to open ^a.", pathname);
%skip(1);
	if query_statement_flag
	then call ssu_$get_temp_segment (sci_ptr, "query segment", query_segment_ptr);
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
terminate: proc;
%skip(3);
          if file_needs_terminating
	then do;
	     call iox_$close (iocb_ptr, code);
	     call iox_$detach_iocb (iocb_ptr, code);
	     call iox_$destroy_iocb (iocb_ptr, code);
	     if cleanup_signalled
	     then call delete_$path (dir_name, entry_name, "100111"b,
		ME, code);
	end;
%skip(1);
	if query_segment_ptr ^= null
	then call ssu_$release_temp_segment (sci_ptr, query_segment_ptr);
%skip(1);
          return;
%skip(1);
     end terminate;
%page;
write_exec_com_footer: proc;
%skip(3);
          call ioa_$ioa_switch (iocb_ptr, "&detach^/&quit");
%skip(1);
	return;
%skip(1);
     end write_exec_com_footer;
%page;
write_exec_com_header: proc;
%skip(3);
          /* First the necessary exec_com statements. */
%skip(1);
          call ioa_$ioa_switch (iocb_ptr,
	     "&version 2^/&trace off^/&attach");
%skip(1);
          /* Then the query statement if requested. */
%skip(1);
          if ^query_statement_flag
	then return;
%skip(1);
	call rw_table_manager$get_query (report_cip,
	     query_segment_ptr, query_segment_length, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/Unable to save the query statement.");
%skip(1);
	query_segment_current_position = 1;
	still_processing_query_lines = ON;
%skip(1);
	do while (still_processing_query_lines);
	     query_segment_newline_index = index (substr (query_segment,
		query_segment_current_position), NEWLINE);
	     if query_segment_newline_index = 0
	     then call ssu_$abort_line (sci_ptr, 0,
		"Logic error while trying to save the query statement.");
	     ampersand_position = index (substr (query_segment,
		query_segment_current_position, query_segment_newline_index), AMPERSAND);
	     if ampersand_position = 0
	     then call ioa_$ioa_switch (iocb_ptr, "^a", substr (query_segment,
		query_segment_current_position, query_segment_newline_index - 1));
	     else do;
		line_buffer = substr (query_segment, query_segment_current_position, query_segment_newline_index - 1);
		starting_position = 1;
		still_quoting_ampersands = ON;
		do while (still_quoting_ampersands);
		     line_buffer = substr (line_buffer,
			1, ampersand_position - 1)
			|| AMPERSAND || substr (line_buffer, ampersand_position);
		     starting_position = ampersand_position + 2;
		     if starting_position ^> length (line_buffer)
		     then do;
			ampersand_position = index (substr 
			     (line_buffer, starting_position), AMPERSAND);
			if ampersand_position = 0
			then still_quoting_ampersands = OFF;
			else ampersand_position 
			     = ampersand_position + starting_position - 1;
		     end;
		     else still_quoting_ampersands = OFF;
		end;
		call ioa_$ioa_switch (iocb_ptr, "^a", line_buffer);
	     end;
	     query_segment_current_position = query_segment_current_position
		+ query_segment_newline_index;
	     if query_segment_current_position > query_segment_length
	     then still_processing_query_lines = OFF;
	     else;
	end;
%skip(1);
	return;
%skip(1);
     end write_exec_com_header;
%page;
write_the_names_and_values: proc;
%skip(3);
/*
	If the rw_options$get_active entry was called there may not be
	any format option values to save.
*/ 
%skip(1);
          if no_of_names_and_values = 0
	then call ssu_$abort_line (sci_ptr, 0, "^/^a^/^a",
	     "All of the formatting options are set to their default values.",
	     "There are no column options defined. The format was not saved.");
%skip(1);
/*

	Loop through the names and values writing them out to the exec_com
	file as report writer set_format_options requests.  The values must
	be special cased in the following way.  Version 2 exec_com strips
	leading and trailing whitespace, so it must be protected.  Version 2
	ec also barfs if the value contains an ampersand, so they must be
	protected.  The ssu_ request processor does quote stripping, active
	function evaluation, etc.  so all of these things must be protected.
	The set_format_options request has a number of control args it takes,
	so if the value is the same as any of these control args it must be
	protected.  If the value is a zero length character string then it
	must be translated to the request language zero length string "".
	And finally, single line values do not have a trailing newline
	character, so if it is going to be protected for any of the previous
	reasons, it must have a newline added.

*/
%skip(1);
          do loop = 1 to no_of_names_and_values;
%skip(1);
               normalized_option_name = substr (names_and_values,
		name_value_info.name.index (loop), 
		name_value_info.name.length (loop));
%skip(1);
	     option_value = substr (names_and_values, 
		name_value_info.value.index (loop), 
		name_value_info.value.length (loop));
%skip(1);
               special_characters_in_option_value = OFF;
	     newline_needed = OFF;
	     requoting_needed = OFF;
%skip(1);
	     option_value_length = length (option_value);
	     if option_value_length = 0
	     then do;
		option_value = """""";
		option_value_length = 2;
	     end;
	     else do;
		if substr (option_value, option_value_length) ^= NEWLINE
		then newline_needed = ON;
		else;
		if search (option_value, SPECIAL_CHARACTERS) ^= 0
		then special_characters_in_option_value = ON;
		else;
		if substr (option_value, 1, 1) = "-"
		then if option_value = "-reset" | option_value = "-rs"
		     | option_value = "-no_reset" | option_value = "-nrs"
		     | option_value = "-long" | option_value = "-lg"
		     | option_value = "-brief" | option_value = "-bf"
		     | option_value = "-prompt" | option_value = "-default"
		     then special_characters_in_option_value = ON;
		     else;
		else;
		if search (option_value, AMPERSAND_BLANK_OR_TAB) ^= 0
		then requoting_needed = ON;
		else;
	     end;
%skip(1);
/* 

	Do special exec_com quoting first.  Handle the easiest case first,
	when it is just a one line value that needs a newline character after
	exec_com quotes are added.  Values which are several lines long
	must be quoted separately, as quoted strings that contain a
	newline are not legal exec_com statements.

*/
%skip(1);
               if requoting_needed
	     then do;
		if newline_needed
		then option_value = AMPERSAND || requote_string_
		     (substr (option_value, 1)) || NEWLINE;
		else do;
		     spare_option_value = "";
		     still_creating_lines = ON;
		     starting_position = 1;
		     do while (still_creating_lines);
			newline_position = index (substr (option_value, 
			     starting_position), NEWLINE);
			if newline_position ^= 0
			then do;
			     line_buffer = substr (option_value, 
				starting_position, newline_position - 1);
			     spare_option_value = spare_option_value || AMPERSAND
				|| requote_string_ (substr (line_buffer, 1)) || NEWLINE;
			     starting_position = starting_position + newline_position;
			     if starting_position > option_value_length
			     then still_creating_lines = OFF;
			end;
			else do;
			     spare_option_value = spare_option_value || AMPERSAND
				|| requote_string_ (substr (option_value, 
				starting_position)) || NEWLINE;
			     still_creating_lines = OFF;
			end;
		     end;
		     option_value = spare_option_value;
		end;
	     end;
	     else if newline_needed & special_characters_in_option_value
		then option_value = option_value || NEWLINE;
	          else;
%skip(1);
	     if special_characters_in_option_value
	     then call ioa_$ioa_switch (iocb_ptr, "^a^x^a^x^a^/^a^a", 
		"set_format_options", normalized_option_name, 
		"-prompt -brief", option_value, ".");
	     else call ioa_$ioa_switch (iocb_ptr, "^a^x^a^x^a",
		"set_format_options", normalized_option_name, option_value);
%skip(1);
	end;
%skip(1);
          return;
%skip(1);          
   end write_the_names_and_values;
%page;
dcl AMPERSAND char (1) static int options (constant) init ("&");
dcl AMPERSAND_BLANK_OR_TAB char (3) static int options (constant) init ("& 	");
dcl OFF bit (1) aligned static int options (constant) init ("0"b);
dcl ON bit (1) aligned static int options (constant) init ("1"b);
dcl ME char (19) static int options (constant) init ("save_format_options");
dcl NEWLINE char (1) static int options (constant) init ("
");
dcl NO_MORE_FORMAT_OPTION_ARGS fixed bin (35) static int options (constant) init (1);
/* SPECIAL_CHARACTERS are blank, tab, left and right bracket, left and right paraen, ampersand, quote, and newline */
dcl SPECIAL_CHARACTERS char (9) static int options (constant) init (
" 	[]()&""
");
%skip(1);
dcl ampersand_position fixed bin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl current_arg fixed bin;
%skip(1);
dcl delete_$path entry (char(*), char(*), bit(6), char(*), fixed bin(35));
dcl dir_name char (168);
%skip(1);
dcl entry_name char (32);
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
dcl error_table_$nostars fixed bin(35) ext static;
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl file_needs_terminating bit (1) aligned;
dcl fixed builtin;
%skip(1);
dcl identifier_needed bit (1) aligned;
dcl index builtin;
dcl ioa_$ioa_switch entry() options(variable);
dcl iocb_ptr ptr;
dcl iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl iox_$close entry (ptr, fixed bin(35));
dcl iox_$destroy_iocb entry (ptr, fixed bin(35));
dcl iox_$detach_iocb entry (ptr, fixed bin(35));
dcl iox_$open entry (ptr, fixed bin, bit(1) aligned, fixed bin(35));
%skip(1);
dcl length builtin;
dcl line_buffer char (4096) varying;
dcl long_option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
dcl loop fixed bin;
dcl ltrim builtin;
%skip(1);
dcl names_and_values_area area (sys_info$max_seg_size) based (names_and_values_area_ptr);
dcl names_and_values_area_ptr ptr;
dcl newline_needed bit (1) aligned;
dcl newline_position fixed bin;
dcl no_of_args_supplied fixed bin;
dcl normalized_option_name char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH) varying;
dcl number_of_control_args_found fixed bin;
dcl number_of_format_option_names fixed bin;
dcl null builtin;
%skip(1);
dcl option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
dcl option_value char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
dcl option_value_length fixed bin;
%skip(1);
dcl pathname char (168);
%skip(1);
dcl query_segment char (query_segment_length) based (query_segment_ptr);
dcl query_segment_current_position fixed bin (21);
dcl query_segment_length fixed bin (21);
dcl query_segment_newline_index fixed bin (21);
dcl query_segment_ptr ptr;
dcl query_statement_flag bit (1) aligned;
%skip(1);
dcl requote_string_ entry (char(*)) returns(char(*));
dcl requoting_needed bit (1) aligned;
dcl rtrim builtin;
dcl rw_error_$bad_option_identifier fixed bin(35) ext static;
dcl rw_error_$bad_option_name fixed bin(35) ext static;
dcl rw_error_$no_columns_defined fixed bin(35) ext static;
dcl rw_options$check_identifier entry (ptr, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl rw_options$check_name entry (ptr, char(*) var, char(*) var, bit(1) aligned, fixed bin(35));
dcl rw_options$get_active entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));
dcl rw_options$get_all entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));
dcl rw_options$get_named entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), ptr, fixed bin(21),	fixed bin(35));
dcl rw_table_manager$get_query entry (ptr, ptr, fixed bin (21), fixed bin (35));
%skip(1);
dcl sci_ptr ptr;
dcl search builtin;
dcl spare_option_value char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
dcl special_characters_in_option_value bit (1) aligned;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$get_temp_segment entry (ptr, char(*), ptr);
dcl ssu_$release_temp_segment entry (ptr, ptr);
dcl starting_position fixed bin;
dcl still_creating_lines bit (1) aligned;
dcl still_processing_args bit (1) aligned;
dcl still_quoting_ampersands bit (1) aligned;
dcl still_processing_query_lines bit (1) aligned;
dcl substr builtin;
dcl switch_name char (32);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl this_is_a_control_arg (360) bit (1) unaligned;
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
dcl unspec builtin;
dcl usage_1 bit (1) aligned;
dcl usage_2 bit (1) aligned;
dcl usage_3 bit (1) aligned;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iox_modes;
%page;
%include rw_names_and_values;
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%page;
%include rw_table_info;
%page;
     end rw_save_format_options;
