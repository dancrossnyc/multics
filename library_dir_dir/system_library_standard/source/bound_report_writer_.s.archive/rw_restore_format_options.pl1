/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     report_writer_ restore_format_options request. Description and usage
     follows.

     Description:

     This request takes the pathname given as input and calls the
     ssu_$execute_string entrypoint to do a subsystem exec_com
     on the user specified file.
     
     Usage: "restore_format_options path"

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983
     Changed - Al Dupuis - October 1984 Became report_writer_.

*/
%page;
rw_restore_format_options: proc (

	sci_ptr_parm,    /* ptr to the subsystem control info structure */
	report_cip_parm  /* points to report_control_info */
			  );
%skip(3);
dcl report_cip_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(3);
/*
          Mainline Processing Overview.

          (1) Get and expand/suffix the pathname arg.

	(2) Make sure the file exists.

          (3) Get ssu_ to do a subsystem ec on the file.
*/
%page;
%skip(3);
	report_cip = report_cip_parm;
	sci_ptr = sci_ptr_parm;
%skip(1);
          /* The first and only arg must be pathname. */
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
%skip(1);
	if number_of_args_supplied ^= 1 
	then do;
	     if number_of_args_supplied = 0
	     then code = error_table_$noarg;
	     else code = error_table_$inconsistent;
	     call ssu_$abort_line (sci_ptr, code,
		"^/Usage: restore_format_options path");
	end;
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	pathname = arg;
          call expand_pathname_$add_suffix (pathname,
	     "fo." || rtrim (ltrim (report_control_info.subsystems_ec_suffix)),
	     dir_name, entry_name, code);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code,
	     "^/The pathname ^a couldn't be expanded.", pathname);
%skip(1);
	call hcs_$status_minf (dir_name, entry_name, 1, file_type, 
	     bit_count, code);
	if code = error_table_$noentry
	then call ssu_$abort_line (sci_ptr, code,
	     "^/The file ^a doesn't exist.",
	     rtrim (dir_name) || ">" || rtrim (entry_name));
%skip(1);
	call ssu_$execute_string (sci_ptr, "ec " || rtrim (dir_name) 
	     || ">" || rtrim (entry_name), code);
%skip(1);
          return;
%page;
%skip(1);
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl bit_count fixed bin (24);
%skip(1);
dcl code fixed bin (35);
%skip(1);
dcl dir_name char (168);
%skip(1);
dcl entry_name char (32);
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
dcl error_table_$noentry fixed bin(35) ext static;
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl file_type fixed bin (2);
%skip(1);
dcl hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
%skip(1);
dcl ltrim builtin;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl pathname char (168);
%skip(1);
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$execute_string entry (ptr, char(*), fixed bin(35));
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%skip(3);
     end rw_restore_format_options;
