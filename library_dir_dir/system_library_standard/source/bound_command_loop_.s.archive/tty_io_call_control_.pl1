/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure sets up info structures to execute tty_ control orders on behalf of the
   io_call command. */

/* Written April 1976 by Larry Johnson */
/* Modified May 1978 to add suppport for active function and new orders */
/* Modified November 1980 by Benson I. Margulies for set_event_channel */
/* Modified 1985-02-19, BIM: get_com_channel_info */

/* format: style2 */
tty_io_call_control_:
     proc (iocbp, io_call_order, io_call_infop, code);

/* Parameters */

	dcl     iocbp		 ptr;		/* Pointer to the IOCB */
	dcl     io_call_order	 char (*);	/* Can be io_call or io_call_af */
	dcl     code		 fixed bin (35);	/* Standard system status code */

/* Automatic storage */

	dcl     not_open_sw		 bit (1);
	dcl     af_sw		 bit (1);		/* Set if doing active function */
	dcl     i			 fixed bin;
	dcl     temp_type		 char (16);
	dcl     new_id		 char (4);	/* Info structure for storeid order */
	dcl     (err, rpt)		 entry variable options (variable);
	dcl     caller		 char (32);
	dcl     order		 char (32);
	dcl     n_args		 fixed bin;
	dcl     line_length		 fixed bin (9);
	dcl     ev_channel		 fixed bin (71);

	dcl     1 ascci		 aligned like as_com_channel_info;
	dcl     1 read_status	 aligned like tty_read_status_info;
	dcl     1 write_status	 aligned like tty_read_status_info;
	dcl     1 info		 aligned like tty_info;
	dcl     new_type		 fixed bin (35);

	dcl     1 modes		 aligned,
		2 str_len		 fixed bin,
		2 str		 char (512);

	dcl     1 auto_terminal_info	 like terminal_info automatic;
	dcl     1 auto_set_term_type_info
				 like set_term_type_info automatic;

/* External stuff */

	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     convert_access_class_$to_string_short
				 entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     convert_access_class_$to_string_range_short
				 entry ((2) bit (72) aligned, char (*), fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin) returns (fixed bin (35));
	dcl     ioa_$rsnnl		 entry options (variable);

	dcl     (
	        error_table_$badopt,
	        error_table_$noarg,
	        error_table_$bad_conversion,
	        error_table_$too_many_args,
	        error_table_$not_open,
	        error_table_$undefined_order_request
	        )			 ext fixed bin (35);

/* internal static */
/* orders that require info that we will not supply */

	dcl     info_orders		 (27) char (32) int static options (constant)
				 init ("set_delay", "get_channel_info", "get_delay", "set_editing_chars",
				 "get_editing_chars", "set_input_translation", "set_input_conversion",
				 "set_output_translation", "set_output_conversion", "get_input_translation",
				 "get_input_conversion", "get_output_translation", "get_output_conversion",
				 "set_special", "get_special", "set_framing_chars", "get_framing_chars",
				 "send_initial_string", "set_default_modes", "set_input_message_size",
				 "get_input_message_size", "input_flow_control_chars",
				 "output_flow_control_chars", "get_echo_break_table", "set_wakeup_table",
				 "set_prompt", "hangup_proc");

	declare conversion		 condition;

/* builtins */

	dcl     (addr, binary, character, hbound, lbound, length, null, rtrim, string, substr, translate, unspec)
				 builtin;

%include as_com_channel_info;
%include io_call_info;
%include tty_read_status_info;
%include tty_get_channel_info;
%include tty_control_orders_info;
%include ttyp;
%include terminal_info;
%include set_term_type_info;
%include line_types;


	not_open_sw = ""b;
	goto JOIN;

not_open:
     entry (iocbp, io_call_order, io_call_infop, code);
	not_open_sw = "1"b;

JOIN:
	af_sw = (io_call_order = "io_call_af");
	err = io_call_info.error;
	rpt = io_call_info.report;
	order = io_call_info.order_name;
	n_args = io_call_info.nargs;
	caller = io_call_info.caller_name;

/* not_open orders first */
/* set_event order */

	if order = "set_event"
	then do;
		if af_sw
		then go to not_af;
		if n_args = 0
		then do;
			call err (error_table_$noarg, caller, "Event channel.");
			code = 0;
			goto RETURN;
		     end;
		if n_args > 1
		then do;
			call err (error_table_$too_many_args, caller, "Only an event channel may be given.");
			code = 0;
			goto RETURN;
		     end;
		if substr (io_call_info.args (1), 1, 1) = "-"
		then do;
			call err (error_table_$badopt, caller, "^a", io_call_info.args (1));
			code = 0;
			goto RETURN;
		     end;
		on conversion
		     begin;			/* cv_foo_check_ wont do 71 bits */
			call err (error_table_$bad_conversion, caller, "Bad event channel ^a.",
			     io_call_info.args (1));
			code = 0;
			goto RETURN;
		     end;
		ev_channel = binary (io_call_info.args (1));
						/* Default is 71, 0 */
		call iox_$control (iocbp, "set_event", addr (ev_channel), code);
		goto RETURN;
	     end;

	else if order = "get_event"
	then do;
		if n_args > 0
		then do;
			call err (error_table_$too_many_args, caller, "The get_event order takes no arguments.");
			code = 0;
			goto RETURN;
		     end;
		call iox_$control (iocbp, "get_event", addr (ev_channel), code);
		if code ^= 0
		then do;
			call err (code, caller, "No event channel info available.");
			code = 0;
			goto RETURN;
		     end;
		if af_sw
		then io_call_af_ret = character (ev_channel);
						/* work in decimal for set_ev and ipc_call */
		else call rpt ("^a: Event channel=^d (decimal).", caller, ev_channel);
		code = 0;
		goto RETURN;
	     end;

	else if order = "get_com_channel_info"
	then do;
		declare temp_acc		 char (32);
		unspec (ascci) = ""b;
		ascci.version = AS_COM_CHANNEL_INFO_VERSION_1;
		call iox_$control (iocbp, "get_com_channel_info", addr (ascci), code);
		if code = 0
		then do;
			call rpt ("^a:^20tchannel:^40t^a", caller, ascci.channel_name);
			call rpt ("^20taccess_control.login:^40t^[on^;off^]", ascci.access_control.login);

			call rpt ("^20taccess_control.dial_slave:^40t^[on^;off^]", ascci.access_control.dial_slave);
			call rpt ("^20taccess_control.priv_attach:^40t^[on^;off^]",
			     ascci.access_control.priv_attach);
			call rpt ("^20taccess_control.dial_server:^40t^[on^;off^]",
			     ascci.access_control.dial_server);
			call rpt ("^20taccess_control.dial_out:^40t^[on^;off^]", ascci.access_control.dial_out);
			call rpt ("^20tattached_to_caller:^40t^[on^;off^]", ascci.attached_to_caller);
			call rpt ("^20tuser_authenticated:^40t^[on^;off^]", ascci.user_authenticated);
			call rpt ("^20tdialed_to_caller:^40t^[on^;off^]", ascci.dialed_to_caller);
			call rpt ("^20tservice_type:^40t^[ANS^;FTP^;MC^;SLAVE^;DIAL^;DIAL_OUT^;MPX^;TANDD^]",
			     ascci.service_type);
			call rpt (
			     "^20tcurrent_service_type:^40t^[ANS^;FTP^;MC^;SLAVE^;DIAL^;DIAL_OUT^;MPX^;TANDD^]",
			     ascci.current_service_type);
			call convert_access_class_$to_string_range_short (ascci.access_class, temp_acc, (0));
			if temp_acc = ""
			then temp_acc = "system_low";
			call rpt ("^20taccess_class:^40t^a", temp_acc);
			call convert_access_class_$to_string_short (ascci.current_access_class, temp_acc, (0));
			if temp_acc = ""
			then temp_acc = "system_low";
			call rpt ("^20tcurrent_access_class:^40t^a", temp_acc);
			call rpt ("^20tauth_user_name:^40t^a", ascci.auth_user_name);
		     end;
	     end;

/* end of not_open orders */
	else if not_open_sw
	then do;
		code = error_table_$not_open;
		call err (code, caller);
		go to RETURN;

	     end;

/* Info order */

	else if order = "info"
	then do;
		call iox_$control (iocbp, "info", addr (info), code);
		if code = 0
		then do;
			if info.type < lbound (tty_dev_type, 1) | info.type > hbound (tty_dev_type, 1)
			then call ioa_$rsnnl ("type^d", temp_type, (0), info.type);
			else temp_type = tty_dev_type (info.type);

			if af_sw
			then do;
				if n_args = 0
				then io_call_af_ret = rtrim (temp_type);
				else if io_call_info.args (1) = "id"
				then io_call_af_ret = rtrim (info.id);
				else if io_call_info.args (1) = "baud"
				then call ioa_$rsnnl ("^d", io_call_af_ret, (0), info.baudrate);
				else if io_call_info.args (1) = "type"
				then io_call_af_ret = rtrim (temp_type);
				else call err (error_table_$badopt, caller, "^a", io_call_info.args (1));
			     end;
			else call rpt ("^a: Terminal id=""^a"", baud rate=^d, type=^a.", caller, info.id,
				info.baudrate, temp_type);
		     end;
	     end;

/* Read_status order */

	else if order = "read_status"
	then do;
		call iox_$control (iocbp, "read_status", addr (read_status), code);
		if code = 0
		then do;
			if af_sw
			then if read_status.input_pending
			     then io_call_af_ret = "true";
			     else io_call_af_ret = "false";
			else call rpt ("^a: Event channel=^24.3b, input is ^[^;not ^]available.", caller,
				unspec (read_status.event_channel), read_status.input_pending);
		     end;
	     end;

/* Write_status order */

	else if order = "write_status"
	then do;
		call iox_$control (iocbp, "write_status", addr (write_status), code);
		if code = 0
		then do;
			if af_sw
			then if write_status.input_pending
			     then io_call_af_ret = "true";
			     else io_call_af_ret = "false";
			else call rpt ("^a: Event channel=^24.3b, output is ^[^;not ^]pending.", caller,
				unspec (write_status.event_channel), write_status.input_pending);
		     end;
	     end;

/* Store_id order */

	else if order = "store_id"
	then do;
		if af_sw
		then do;
not_af:
			call err (0, caller, "The ^a order is not valid as an active function.", order);
			code = 0;
		     end;
		if n_args ^> 0
		then do;
			call err (error_table_$noarg, caller, "ID.");
			code = 0;
		     end;
		else do;
			new_id = io_call_info.args (1);
			call iox_$control (iocbp, "store_id", addr (new_id), code);
		     end;
	     end;

/* Set_type order */

	else if order = "set_type" | order = "set_terminal_type"
	then do;
		if af_sw
		then go to not_af;
		if n_args ^> 0
		then do;
			call err (error_table_$noarg, caller, "Type.");
			code = 0;
		     end;
		else do;
			new_type = cv_dec_check_ ((io_call_info.args (1)), i);
			if i ^= 0
			then do;
				temp_type =
				     translate (io_call_info.args (1), "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
				     "abcdefghijklmnopqrstuvwxyz");
				do new_type = lbound (tty_dev_type, 1) to hbound (tty_dev_type, 1);
				     if tty_dev_type (new_type) = temp_type
				     then do;	/* Got a match */
					     call iox_$control (iocbp, "set_type", addr (new_type), code);
					     return;
					end;
				end;
				call err (0, caller, "Invalid type: ^a", io_call_info.args (1));
				code = 0;
			     end;
			else call iox_$control (iocbp, "set_type", addr (new_type), code);
		     end;
	     end;

/* Modes order */

	else if order = "modes"
	then do;
		if af_sw
		then go to not_af;
		if n_args ^> 0
		then modes.str = "";
		else modes.str = io_call_info.args (1);
		modes.str_len = length (modes.str);
		call iox_$control (iocbp, "modes", addr (modes), code);
		if code = 0
		then call rpt ("^a: ^a", caller, modes.str);
	     end;

/* Set_line_type order */

	else if order = "set_line_type"
	then do;
		if af_sw
		then go to not_af;
		if n_args ^> 0
		then do;
			call err (error_table_$noarg, caller, "Line type.");
			code = 0;
		     end;
		else do;
			temp_type =
			     translate (io_call_info.args (1), "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			     "abcdefghijklmnopqrstuvwxyz");
			do new_type = lbound (line_types, 1) to hbound (line_types, 1);
			     if temp_type = line_types (new_type)
			     then go to set_line_type;
			end;
			new_type = cv_dec_check_ ((io_call_info.args (1)), i);
			if i ^= 0
			then do;
				call err (0, caller, "Invalid line type: ^a", io_call_info.args (1));
				code = 0;
			     end;
			else
set_line_type:
			     call iox_$control (iocbp, "set_line_type", addr (new_type), code);
		     end;
	     end;

/* Line length order */

	else if order = "line_length"
	then do;
		if af_sw
		then go to not_af;
		if n_args ^> 0
		then do;
			call err (error_table_$noarg, caller, "Line length.");
			code = 0;
		     end;
		else do;
			line_length = cv_dec_check_ ((io_call_info.args (1)), i);
			if i ^= 0
			then do;
				call err (0, caller, "Invalid line length: ^a", io_call_info.args (1));
				code = 0;
			     end;
			else call iox_$control (iocbp, "line_length", addr (line_length), code);
		     end;
	     end;

/* Terminal info order */

	else if order = "terminal_info"
	then do;
		terminal_info_ptr = addr (auto_terminal_info);
		terminal_info.version = 1;
		call iox_$control (iocbp, "terminal_info", terminal_info_ptr, code);
		if code = 0
		then do;
			if terminal_info.line_type < lbound (line_types, 1)
			     | terminal_info.line_type > hbound (line_types, 1)
			then call ioa_$rsnnl ("^d", temp_type, (0), terminal_info.line_type);
			else temp_type = line_types (terminal_info.line_type);
			if af_sw
			then do;
				if n_args = 0
				then io_call_af_ret = rtrim (terminal_info.term_type);
				else if io_call_info.args (1) = "id"
				then io_call_af_ret = rtrim (terminal_info.id);
				else if io_call_info.args (1) = "baud"
				then call ioa_$rsnnl ("^d", io_call_af_ret, (0), terminal_info.baud_rate);
				else if io_call_info.args (1) = "terminal_type"
				then io_call_af_ret = rtrim (terminal_info.term_type);
				else if io_call_info.args (1) = "line_type"
				then io_call_af_ret = rtrim (temp_type);
				else call err (error_table_$badopt, caller, "^a", io_call_info.args (1));
			     end;
			else call rpt ("^a: Terminal id=""^a"", baud_rate=^d, term type=""^a"", line type=""^a"".",
				caller, terminal_info.id, terminal_info.baud_rate, terminal_info.term_type,
				temp_type);
		     end;
	     end;

/* Set_term_type order */

	else if order = "set_term_type"
	then do;
		if af_sw
		then go to not_af;
		sttip = addr (auto_set_term_type_info);
		set_term_type_info.version = 1;
		set_term_type_info.name = "";
		string (set_term_type_info.flags) = "0"b;
		if n_args = 0
		then do;
			call err (error_table_$noarg, caller, "Terminal type.");
			code = 0;
		     end;
		else do;
			set_term_type_info.name = io_call_info.args (1);
			do i = 2 to n_args;
			     if io_call_info.args (i) = "-tabs" | io_call_info.args (i) = "-initial_string"
				| io_call_info.args (i) = "-istr"
			     then set_term_type_info.send_initial_string = "1"b;
			     else if io_call_info.args (i) = "-modes"
			     then set_term_type_info.set_modes = "1"b;
			     else if io_call_info.args (i) = "-ignore_line_type"
			     then set_term_type_info.ignore_line_type = "1"b;
			     else do;
				     call err (error_table_$badopt, caller, "^a", io_call_info.args (i));
				     code = 0;
				end;

			end;
			call iox_$control (iocbp, "set_term_type", sttip, code);
		     end;
	     end;


/* All other orders */

	else if af_sw
	then go to not_af;
	else do;					/* find out if it can just be passed on */
		do i = 1 to hbound (info_orders, 1) while (order ^= info_orders (i));
		end;
		if i <= hbound (info_orders, 1)	/* on the disapproved list */
		then do;
			call err (error_table_$undefined_order_request, caller, order);
			code = 0;
		     end;
		else call iox_$control (iocbp, (order), null (), code);
	     end;
RETURN:
	return;

     end tty_io_call_control_;
