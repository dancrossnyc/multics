/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
get_to_cl_:
     procedure (flags);

/* Procedure invoked before calls to the command listener.
   Called by standard system default error handler when
   a quit occurs.
*/

/* Completely re-written 1 December 1980 Richard Mark Soley */
/* Changed to move_attach architecture 3 December 1980 RMSoley */
/* munged for new iox BIM June 1981 */
/* Modified 1984-10-26 BIM to not do control orders under the ips mask. */

/* System Entries */
	dcl     unique_chars_	 entry (bit (*)) returns (character (15));
	dcl     listen_$release_stack	 entry (bit (1) aligned);
	dcl     iox_$init_standard_iocbs
				 entry;
	dcl     (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			 entry (bit (36) aligned, bit (36) aligned);
	dcl     terminate_process_	 entry (character (*), pointer);
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     error_table_$unable_to_do_io
				 fixed bin (35) external static;

/* Conditions */
	dcl     cleanup		 condition;
	dcl     any_other		 condition;

/* Builtin */
	dcl     null		 builtin;

/* Automatic */

	dcl     1 info		 aligned automatic,
		2 iocb_ptrs	 (3) pointer,
		2 modes		 character (512) unaligned;

	dcl     ips_mask		 bit (36) aligned;
	dcl     switch		 character (32);
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     temp		 pointer;
	dcl     1 flags		 aligned,
		2 reset_sw	 bit (1) unaligned,
		2 pad		 bit (35) unaligned;
	dcl     restore_attachments	 bit (1) aligned initial ("1"b);

/* Include Files */
%include iox_entries;

unclaimed_signal:
quit:
     entry (flags);

/* Throw away type-ahead if wanted. */

	if flags.reset_sw
	then call iox_$control (iox_$user_input, "resetread", null (), code);

/* Save attachments. */

	call save_io;

/* Set up cleanup handler. */

	on cleanup call free_save_iocbs ();

/* Now we can call the actual listener. */

	call listen_$release_stack (restore_attachments);

/* Control returns here on "start" command.  First we
	   avoid lost wakeups, then restore
	   attachments if listen_ wants. */

	call iox_$control (iox_$user_io, "start", null (), code);
	if restore_attachments
	then call restore_io ();
	else call free_save_iocbs ();			/* Return to whatever we're "start"ing. */

	return;

save_io:
     procedure ();

/* Procedure to push the current switch attachments on the
   attachment stack */


	ips_mask = ""b;

	on any_other call fault_while_masked;

	info.modes = "";
	call iox_$modes (iox_$user_io, "default", info.modes, (0));

	call hcs_$set_ips_mask (""b, ips_mask);

	/*** This code should be upgraded to save whatever
	   it finds in the iox_ iocb info for standard attachments.
	   for now, saving the usual 3 will do */

/* Save current attachments. */

	i = 0;
	do temp = iox_$user_input, iox_$user_output, iox_$error_output;

	     i = i + 1;
	     switch = "cl_save_" || unique_chars_ (""b);

	     call iox_$find_iocb (switch, info.iocb_ptrs (i), code);

	     call iox_$move_attach (temp, info.iocb_ptrs (i), code);
	end;

/* Restore default attachments. */

	call iox_$init_standard_iocbs;

/* Turn on printer. */

	call hcs_$reset_ips_mask (ips_mask, ""b);
	revert any_other;

	call iox_$control (iox_$user_io, "printer_on", null (), code);
     end save_io;

restore_io:
     procedure ();

/* Procedure to re-instate old saved attachments. */

	ips_mask = ""b;
	on any_other call fault_while_masked;

	if info.modes ^= ""
	then call iox_$modes (iox_$user_io, info.modes, (""), (0));

	call hcs_$set_ips_mask (""b, ips_mask);

	i = 0;
	do temp = iox_$user_input, iox_$user_output, iox_$error_output;
	     i = i + 1;

	     call iox_$close (temp, code);		/* will normally fail */

	     call iox_$detach_iocb (temp, code);

	     call iox_$move_attach (info.iocb_ptrs (i), temp, code);

	     call iox_$destroy_iocb (info.iocb_ptrs (i), code);

	end;

	call hcs_$reset_ips_mask (ips_mask, ""b);
	revert any_other;

     end restore_io;

free_save_iocbs:
     procedure;


/* This is called in the -no_restore case */


	do i = 1 to 3;
	     call iox_$detach_iocb (info.iocb_ptrs (i), (0));
	     call iox_$destroy_iocb (info.iocb_ptrs (i), (0));
	end;

     end free_save_iocbs;



fault_while_masked:
     procedure;

	dcl     1 ti		 aligned,
		2 version		 fixed bin,
		2 status_code	 fixed bin (35);

	if substr (ips_mask, 36, 1) = "0"b
	then call continue_to_signal_ (0);
	else do;
		ti.version = 0;
		ti.status_code = error_table_$unable_to_do_io;
		call terminate_process_ ("fatal_error", addr (ti));
	     end;
     end fault_while_masked;
     end get_to_cl_;
