/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* the user ring tty io module --- tty_ */

/* format: style2 */
tty_:
     procedure;
	return;

/*  iox_ dim for terminal i/o written 1/75 by S.E. Barr */
/*  Modified 9/26/75 by S.E. Barr to ensure buffer pointer is word aligned for calls to hardcore. */
/* Modified 760608 by PG to get tty_get_line to work when in raw input mode */
/* Modified 5/31/77 by J. Stern to add set_term_type and send_initial_string orders */
/* Modified 5/4/78 by Robert Coren to call hcs_$tty_get_line and to return whatever's there for get_chars */
/* Modified July 1979 by Larry Johnson to automatically attempt to attach to a
   new channel if the user's login channel hangs up. Part of process
   preservation across hangup project. */
/* Modified by C. Hornig for dial_manager_ intelligence */
/* Modified November 1980 by B. Margulies for user event channels and no block */
/* Modified: 12 November 1980 by G. Palter to implement MCS suggestion #65 -- truncate modes string at nearest whole mode
	      if it doesn't fit into the caller's string */
/* Modified December 1980 by B. Margulies for new preservation and general cleanup */
/* Further Modified January 1, 1981 to split tty_ and tty_io_ to reduce gravidity of this program */
/* Modified October 1981 by C. Hornig to allow -dial_id. */
/* Modified March 1982 by C. Hornig to fix hangup_on_detach */
/* Modified August 1982 by E. N. Kittlitz to initialize mask in set_up */
/* Modified April 1983 by Robert Coren to handle -required_access_class */
/* Modified September 1983 by Robert Coren to fix bug that ignored -required_access_class "" */
/* Modified 1984-10-29 BIM to only call dial_manager_ if ring 0 admits that
	  the channel is plausible. */
/* Modified December 1984 by Robert Coren to disable line status for login channel. */
/* Modified January 1985 by G. Palter to establish a handler for signals from the answering service */
/* Modified: 7 February 1985 by G. Palter to not attempt to release the channel if convert_dial_message_$return_io_module
      reports an error during the attachment */
/* Modified: 19 February 1985 by G. Palter to not try to dial_manager_ release the channel if hcs_$tty_detach fails */
/* Modified: 26 February 1985 by G. Palter to always delete the dial_manager_ IPC channel */
/* Modified: 8 March 1985 by G. Palter to make the close entrypoint not zero event_wait.channel_id(1).  See the comment in
      the code for an explanation */


/****^  HISTORY COMMENTS:
  1) change(85-06-23,Negaret), approve(87-07-23,MCR7742),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Handle DSA network connections.
  2) change(90-09-20,Bubric), approve(90-10-01,MCR8211), audit(90-10-01,Itani),
     install(90-10-17,MR12.4-1044):
     Have the calls to the routine 'nothing' changed to calls to the routine
     'null_entry_'.
                                                   END HISTORY COMMENTS */


/* Parameters */

	dcl     arg_iocbp		 ptr;		/* ptr to iocb (input) */
	dcl     code		 fixed bin (35);	/* Multics standard error code (output) */
	dcl     com_err_switch	 bit (1);		/* ON if should call com_err_ for errors (input) */
	dcl     extend_bit		 bit (1);		/* Obsolete open argument */
	dcl     mode		 fixed bin;
	dcl     option_array	 (*) char (*) var;
	dcl     arg_event_call_info_ptr
				 pointer parameter;


/* Automatic */

	dcl     access_class	 bit (72) aligned;	/* binary form of required access class */
	dcl     access_class_range	 (2) bit (72) aligned;
	dcl     access_class_specified bit (1);		/* indicates whether attach description includes access class */
	dcl     access_class_string	 char (864);	/* access class string passed in attach description */
	dcl     actual_iocbp	 ptr;		/* copy of iocb.actual_ioc_ptr */
	dcl     atd		 char (128) var;
	dcl     billing_id		 char (12);
	dcl     billing_id_given	 bit (1);
	dcl     device		 char (32);
	dcl     dial_id		 char (32);
	dcl     do_not_block	 bit (1);
	dcl     dsa_connection_info_ptr
				 ptr;
	dcl     dsa_connection_info_len
				 fixed bin (21);
	dcl     i			 fixed bin;
	dcl     iocbp		 ptr;		/* copy of arg_iocb_ptr */
	dcl     hangup		 bit (1);
	dcl     local_code		 fixed binary (35);
	dcl     login_channel	 bit (1);
	dcl     mask		 bit (36) aligned;	/* ips mask */
	dcl     phone_no		 char (32);	/* phone to which to dial */
	dcl     password		 char (12);
	dcl     password_given	 bit (1);
	dcl     person_id		 char (12);
	dcl     person_id_given	 bit (1);
	dcl     project_id		 char (12);
	dcl     project_id_given	 bit (1);
	dcl     resource_description	 character (256);
	dcl     state		 fixed bin;	/* state returned by hcs_$tty_ calls */
	dcl     suppress_dial_manager	 bit (1) aligned;


/* Automatic Structures */

	dcl     1 dma		 aligned like dial_manager_arg;

	dcl     1 dm_flags		 aligned,
		2 dialup		 bit (1) unal,
		2 hungup		 bit (1) unal,
		2 control		 bit (1) unal,
		2 pad		 bit (33) unal;

	dcl     1 event_message	 like event_wait_info aligned;

	dcl     1 ipcas		 aligned like ipc_create_arg_structure;

	dcl     1 local_eci		 aligned like event_call_info;

	dcl     1 user_id		 like submitter_id aligned;


/* builtins */

	dcl     (addr, char, hbound, index, lbound, length, null, rtrim,
	         string, substr)
				 builtin;

/* Internal Static */

	dcl     dim_name		 char (4) int static options (constant) init ("tty_");
						/* used by com_err_ and setting attach descrip */
	dcl     system_free_area_ptr	 pointer int static init(null);
	dcl     ZERO_BIT		 bit (1) int static options (constant) init ("0"b);

/* Based */

	dcl     connection_info	 (dsa_connection_info_len) fixed bin (35) based (dsa_connection_info_ptr);
	dcl     system_free_area	 area based (system_free_area_ptr);

/* External Static */

	dcl     (
	        error_table_$action_not_performed,
	        error_table_$bad_mode,
	        error_table_$badopt,
	        error_table_$inconsistent,
	        error_table_$io_no_permission,
	        error_table_$noarg,
	        error_table_$not_detached,
	        error_table_$resource_attached,
	        error_table_$too_many_args,
	        error_table_$wrong_no_of_args
	        )			 fixed bin (35) ext;

	dcl     (any_other, cleanup)	 condition;

/* Procedures */

	dcl     com_err_		 entry options (variable);
	dcl     convert_access_class_$from_string
				 entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     convert_dial_message_$return_io_module
				 entry (fixed bin (71), char (*), char (*), fixed bin, 1 structure aligned,
				 2 bit (1) unal, 2 bit (1) unal, 2 bit (1) unal, 2 bit (33) unal, fixed bin (35));
	dcl     (
	        dial_manager_$allow_dials,
	        dial_manager_$dial_out,
	        dial_manager_$privileged_attach,
	        dial_manager_$registered_server,
	        dial_manager_$release_channel,
	        dial_manager_$release_channel_no_hangup,
	        dial_manager_$release_dial_id,
	        dial_manager_$terminate_dial_out
	        )			 entry (ptr, fixed bin (35));
	dcl     dsa_tty_$attach	 entry (char (*), fixed bin (71), fixed bin (35), fixed bin, fixed bin (35));
	dcl     dsa_tty_$connect	 entry (char (*), ptr, fixed bin (71), char (*) var, ptr, char (*),
				 fixed bin (35), ptr, fixed bin (21), char (*) var, (2) bit (72) aligned,
				 fixed bin (35));
	dcl     dsa_tty_$detach	 entry (fixed bin (35), fixed bin, fixed bin, fixed bin (35));
	dcl     dsa_tty_$event	 entry (fixed bin (35), fixed bin (71), fixed bin, fixed bin (35));
	dcl     dsa_tty_$order	 entry (fixed bin (35), character (*), pointer, fixed bin, fixed bin (35));
	dcl     dsa_tty_io_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     (
	        dsa_tty_io_$put_chars,
	        dsa_tty_io_$get_chars,
	        dsa_tty_io_$get_line,
	        dsa_tty_io_$modes,
	        dsa_tty_io_$position,
	        dsa_tty_io_$control_not_open
	        )			 ext entry;
	dcl     get_process_id_	 entry () returns (bit (36));
	dcl     get_system_free_area_	 entry () returns (pointer);
	dcl     ipc_$decl_ev_call_chn	 entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
	dcl     ipc_$decl_ev_wait_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     hcs_$delete_channel	 entry (fixed bin (71), fixed bin (35));
	dcl     hcs_$reset_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$tty_attach	 entry (char (*), fixed bin (71), fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$tty_detach	 entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$tty_event	 entry (fixed bin, fixed bin (71), fixed bin, fixed bin (35));
	dcl     hcs_$tty_order	 entry (fixed bin, character (*), pointer, fixed bin, fixed bin (35));
	dcl     hcs_$wakeup		 entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$create_event_channel
				 entry (ptr, fixed bin (71), fixed bin (35));
	dcl     ipc_$block		 entry (ptr, ptr, fixed bin (35));
	dcl     (
	        ipc_$mask_ev_calls,
	        ipc_$unmask_ev_calls
	        )			 entry (fixed bin (35));
	dcl     null_entry_		 entry ();
	dcl     (
	        tty_io_$put_chars,
	        tty_io_$get_chars,
	        tty_io_$get_line,
	        tty_io_$modes,
	        tty_io_$position,
	        tty_io_$control,
	        tty_io_$control_not_open
	        )			 ext entry;
	dcl     user_info_$terminal_data
				 entry (char (*), char (*), char (*), fixed bin, char (*));

/* include files */
%page;
/*  tty_attach  */

tty_attach:
     entry (arg_iocbp, option_array, com_err_switch, code);

	code = 0;
	mask = ""b;
	iocbp = arg_iocbp;
	resource_description, device, phone_no, dial_id, access_class_string = "";
	password, person_id, billing_id, project_id = "";
	password_given, person_id_given, billing_id_given, project_id_given = "0"b;
	access_class_specified = ""b;
	login_channel, do_not_block = ""b;
	hangup = "1"b;				/* hangup is default */
	suppress_dial_manager = "0"b;
	attach_data_ptr = null ();
	on cleanup call clean_up_attach;

	system_free_area_ptr = get_system_free_area_ ();

	if hbound (option_array, 1) < 1
	then call error (error_table_$noarg, "Usage: tty_ {device} {-control_args}");

	if iocbp -> iocb.attach_descrip_ptr ^= null ()
	then call error (error_table_$not_detached, "");

	do i = lbound (option_array, 1) to hbound (option_array, 1);
	     if /* case */ index (option_array (i), "-") ^= 1
	     then do;				/* channel name */
		     if device ^= ""
		     then call error (error_table_$wrong_no_of_args, "Multiple devices specified.");
		     device = option_array (i);
		end;

	     else if option_array (i) = "-login_channel"
	     then login_channel = "1"b;

	     else if option_array (i) = "-hangup_on_detach"
	     then hangup = "1"b;
	     else if option_array (i) = "-no_hangup_on_detach"
	     then hangup = "0"b;

	     else if option_array (i) = "-resource" | option_array (i) = "-rsc"
	     then do;
		     i = i + 1;
		     if resource_description ^= ""
		     then call error (error_table_$too_many_args, "A second resource description was given.");
		     if i > hbound (option_array, 1)
		     then if char (option_array (i), 1) = "-"
			then call error (error_table_$noarg,
				"Control argument found in place of resource description.");
			else call error (error_table_$noarg, "-resource given without a description.");
		     else ;
		     resource_description = option_array (i);
		end;

	     else if option_array (i) = "-destination" | option_array (i) = "-ds"
	     then do;
		     i = i + 1;
		     if phone_no ^= ""
		     then call error (error_table_$too_many_args, "Multiple dial_out destinations given.");
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Phone number.");
		     phone_no = option_array (i);
		end;

	     else if option_array (i) = "-password" | option_array (i) = "-pwd" | option_array (i) = "-pw"
	     then do;
		     i = i + 1;
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Password.");
		     password = option_array (i);
		     password_given = "1"b;
		end;

	     else if option_array (i) = "-billing" | option_array (i) = "-bill" | option_array (i) = "-blg"
	     then do;
		     i = i + 1;
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Billing.");
		     billing_id = option_array (i);
		     billing_id_given = "1"b;
		end;

	     else if option_array (i) = "-project" | option_array (i) = "-proj" | option_array (i) = "-pj"
	     then do;
		     i = i + 1;
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Project.");
		     project_id = option_array (i);
		     project_id_given = "1"b;
		end;


	     else if option_array (i) = "-person_id" | option_array (i) = "-prsid"
	     then do;
		     i = i + 1;
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Person_id.");
		     person_id = option_array (i);
		     person_id_given = "1"b;
		end;


	     else if option_array (i) = "-dial_id"
	     then do;
		     i = i + 1;
		     if dial_id ^= ""
		     then call error (error_table_$too_many_args, "Multiple dial ID's given.");
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Dial ID.");
		     dial_id = option_array (i);
		end;

	     else if option_array (i) = "-no_block"
	     then do;
		     do_not_block = "1"b;
		end;

	     else if option_array (i) = "-required_access_class"
	     then do;
		     i = i + 1;
		     if access_class_specified
		     then call error (error_table_$too_many_args, "Multiple access classes destinations given.");
		     if i > hbound (option_array, 1)
		     then call error (error_table_$noarg, "Access class.");
		     access_class_string = option_array (i);
		     access_class_specified = "1"b;
		end;

	     else if option_array (i) = "-suppress_dial_manager"
	     then suppress_dial_manager = "1"b;
	     else if option_array (i) = "-no_suppress_dial_manager"
	     then suppress_dial_manager = "0"b;
	     else call error (error_table_$badopt, (option_array (i)));
	end;

	if login_channel
	     & ((phone_no ^= "") | (device ^= "") | (resource_description ^= "") | (dial_id ^= "") | (password ^= "")
	     | (billing_id ^= "") | (project_id ^= "") | (person_id ^= "") | access_class_specified)
	then call error (error_table_$inconsistent, "-login_channel and other control arguments.");
	if (dial_id ^= "") & ((phone_no ^= ""))
	then call error (error_table_$inconsistent, "-dial_id and -destination.");

	if access_class_specified
	then do;
		call convert_access_class_$from_string (access_class, access_class_string, code);
		if code ^= 0
		then call error (code, access_class_string);
	     end;

	if login_channel
	then call user_info_$terminal_data ("", "", device, (0), "");

	tty_max_mode_length = 512;			/* probably long enough, but we will check */
	allocate attach_data in (system_free_area);

	string (attach_data.flags) = ""b;
	attach_data.device_id = device;
	attach_data.device_used = device;		/* unless dm_ changes it */
	attach_data.resource_desc = resource_description;
	attach_data.dial_phone = phone_no;
	attach_data.phone_given = (phone_no ^= "");
	attach_data.dial_id = dial_id;
	attach_data.accept_dial = (dial_id ^= "");
	attach_data.login_channel = login_channel;
	attach_data.no_block = do_not_block;
	if login_channel then			/* hangup does not apply to login channel. */
	     attach_data.hangup = "0"b;
	else 
	     attach_data.hangup = hangup;		/* DSA: hangup instead of "0"b */
	attach_data.operation_hlock = 0;
	attach_data.tty_index, attach_data.tty_handle, attach_data.event_wait.channel_id (1),
	     attach_data.dial_manager_event.channel_id (1) = 0;
%page;


/* The network_type is determined by the structure of the channel name. */
/* If "accept_dial" there is no channel name, so we must first call     */
/* "try_dial_manager_attach" to obtain a channel name, and then we      */
/* can call "try_hcs_attach".                                           */

	if attach_data.flags.accept_dial
	then do;

		if suppress_dial_manager
		then call error (code, "hcs_ terminal attachment failed.");

		call try_dial_manager_attach (code);
		if code ^= 0
		then call error (code, "Could not assign channel.");

		call try_hcs_attach (code);
		if code ^= 0
		then call error (code, "Could not attach channel.");
	     end;

	else do;

/* If we have a channel name, we always try to get the channel      */
/* with hcs_, to avoid changing the dial_manager_ event channel     */
/* if we do not have to. All we could do wrong here is successfully */
/* attach a channel with the wrong reservation characteristics etc. */

		call try_hcs_attach (code);
		if code ^= 0
		then do;

			if attach_data.login_channel
			then call error (code, "Cannot attach login channel.");

			if suppress_dial_manager
			then call error (code, "hcs_ terminal attachment failed.");

			if attach_data.network_type = DSA_NETWORK_TYPE
			then do;			/* Prepare the submitter_id structure */

				subidp = addr (user_id);
				user_id.version = SUBMITTER_ID_V1;
				user_id.person_id = person_id;
				user_id.project_id = project_id;
				user_id.billing_id = billing_id;
				user_id.password = password;

				dsa_connection_info_ptr = null;
				call dsa_tty_$connect (attach_data.device_id, system_free_area_ptr, 0,
				     attach_data.dial_phone, subidp, attach_data.device_used, (0),
				     dsa_connection_info_ptr, dsa_connection_info_len, atd, access_class_range,
				     code);
				if code ^= 0
				then call error (code, "Could not connect channel.");

				/*** free the connection info */

				if dsa_connection_info_ptr ^= null then
				     free connection_info in (system_free_area);
			     end;

			else do;			/* MCS_NETWORK_TYPE */
				call try_dial_manager_attach (code);
				if code ^= 0
				then call error (code, "Could not assign channel.");
			     end;

			call try_hcs_attach (code);
			if code ^= 0
			then call error (code, "Could not attach channel.");
		     end;
	     end;

	call make_atd;

	call check_mode_length;			/* this may re-allocate the attach_data structure. */

	on any_other call handler;			/* should be on */

	call hcs_$set_ips_mask (""b, mask);
	iocbp -> iocb.attach_descrip_ptr = addr (attach_data.attach_descrip);
	iocbp -> iocb.attach_data_ptr = attach_data_ptr;
	iocbp -> iocb.detach_iocb = tty_detach;
	iocbp -> iocb.open = tty_open;

	if attach_data.network_type = DSA_NETWORK_TYPE
	then iocbp -> iocb.control = dsa_tty_io_$control_not_open;
	else /*  MCS */
	     iocbp -> iocb.control = tty_io_$control_not_open;

	call iox_$propagate (iocbp);
	revert any_other;
	call hcs_$reset_ips_mask (mask, mask);


RETURN:
	return;



make_atd:
     procedure;					/* format: off */

	call ioa_$rsnnl (
"^a ^[-login_channel^s^;^a^]^[ -resource ^a^;^s^]^[ -destination ^a^;^s^]" ||
"^[ -password^;^]^[ -person_id ^a^;^s^]^[ -project ^a^;^s^]" || 
"^[ -billing ^a^;^s^]^[ -dial_id ^a^;^s^]^[ -no_block^]" ||
"^[ ^[-no_hangup_on_detach^;-hangup_on_detach^]^]^[ -suppress_dial_manager^]",
	     attach_data.attach_descrip, (0),
	     dim_name,
	     attach_data.login_channel, attach_data.device_used,
	     (attach_data.resource_desc ^= ""), attach_data.resource_desc,
	     attach_data.phone_given, attach_data.dial_phone,
	     password_given,
	     person_id_given, person_id,
	     project_id_given, project_id,
	     billing_id_given, billing_id,
	     attach_data.accept_dial, attach_data.dial_id,
	     attach_data.no_block,
	     ^attach_data.login_channel,
	     ^attach_data.hangup,
	     suppress_dial_manager);

/* format: ^off */

     end make_atd;


/* Error calls com_err_ if the loud switch is set and goes to the attach return */

error:
     proc (err_code, message);

	dcl     err_code		 fixed bin (35);	/* Multics standard error code */
	dcl     message		 char (*);	/* Additional error information */

	if com_err_switch
	then call com_err_ (err_code, dim_name, "^a  ^a", iocbp -> iocb.name, message);
	code = err_code;

	call clean_up_attach;
	goto RETURN;

     end error;
%page;
/* This entry detaches the terminal and frees the information about it.  It ignores the code and does
   the following:

   1.  The event channel is released.
   2.  The channel is released if it was attached with dial_manager_.
   3.  The table space in this dim for the attachment is freed iff the hlock is clear.
*/

tty_detach:
     entry (arg_iocbp, code);

	call set_up;				/* set no lock, but get actual_iocb_ptr */

	call hcs_detach;

	call release_channel;			/* if we got it with dm_, let it go */

	on any_other call handler;			/* should be on */
	call hcs_$set_ips_mask (""b, mask);
	actual_iocbp -> iocb.attach_descrip_ptr = null ();
	actual_iocbp -> iocb.attach_data_ptr = null ();
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_attached;
	actual_iocbp -> iocb.open = iox_$err_not_attached;
	actual_iocbp -> iocb.control = iox_$err_not_attached;
	call iox_$propagate (actual_iocbp);
	call hcs_$reset_ips_mask (mask, mask);
	revert any_other;				/* avoid unneccessary fatal errors */
	if attach_data.operation_hlock = 0
	then free attach_data in (system_free_area);
	else attach_data.async_detach = "1"b;		/* warn other incarnations */

	return;
%page;
/*  This entry sets the open description and the legal operation entries in the iocb.  The operations permitted:

   all the time:	close, control, modes
   input:		get_chars, get_line, position
   output:	put_chars
*/

tty_open:
     entry (arg_iocbp, mode, extend_bit, code);


	call set_up;

	if mode = Stream_input | mode = Stream_output | mode = Stream_input_output
	then attach_data.open_descrip = iox_modes (mode);
	else do;
		code = error_table_$bad_mode;
		return;
	     end;

	call allocate_ev_channel (code);		/* in case user supplied with set_event */
	if code ^= 0
	then return;

	call ipc_$mask_ev_calls (code);		/* do not let user code run till we are really open */
	if code ^= 0
	then return;

	if attach_data.async_hangup
	then code = error_table_$io_no_permission;	/* we lost it during these last few statements */

	else do;
		if attach_data.network_type = DSA_NETWORK_TYPE
		then call dsa_tty_$event (attach_data.tty_handle, attach_data.event_wait.channel_id (1), (0), code);
		else /* MCS */
		     call hcs_$tty_event (attach_data.tty_index, attach_data.event_wait.channel_id (1), (0), code);
	     end;

	if code ^= 0
	then do;
		call ipc_$unmask_ev_calls ((0));
		return;
	     end;


	on any_other call handler;
	call hcs_$set_ips_mask (""b, mask);

	actual_iocbp -> iocb.open_descrip_ptr = addr (attach_data.open_descrip);
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_closed;
	actual_iocbp -> iocb.open = iox_$err_not_closed;
	actual_iocbp -> iocb.close = tty_close;

	if attach_data.network_type = DSA_NETWORK_TYPE
	then do;					/* DSA */

		actual_iocbp -> iocb.modes = dsa_tty_io_$modes;
		actual_iocbp -> iocb.control = dsa_tty_io_$control;

		if mode ^= Stream_output
		then do;
			actual_iocbp -> iocb.get_line = dsa_tty_io_$get_line;
			actual_iocbp -> iocb.get_chars = dsa_tty_io_$get_chars;
			actual_iocbp -> iocb.position = dsa_tty_io_$position;
		     end;

		if mode ^= Stream_input
		then actual_iocbp -> iocb.put_chars = dsa_tty_io_$put_chars;
	     end;

	else do;					/* MCS*/

		actual_iocbp -> iocb.modes = tty_io_$modes;
		actual_iocbp -> iocb.control = tty_io_$control;

		if mode ^= Stream_output
		then do;
			actual_iocbp -> iocb.get_line = tty_io_$get_line;
			actual_iocbp -> iocb.get_chars = tty_io_$get_chars;
			actual_iocbp -> iocb.position = tty_io_$position;
		     end;

		if mode ^= Stream_input
		then actual_iocbp -> iocb.put_chars = tty_io_$put_chars;
	     end;

	call iox_$propagate (actual_iocbp);
	call hcs_$reset_ips_mask (mask, mask);
	revert any_other;
	call ipc_$unmask_ev_calls ((0));

	if attach_data.network_type = DSA_NETWORK_TYPE
	then call dsa_tty_$order (attach_data.tty_handle, "start", null (), state, code);
	else /* MCS */
	     call hcs_$tty_order (attach_data.tty_index, "start", null (), state, code);

/* If this is a DSA login connection, the terminal type is already known, */
/* the tables are not initialized for this terminal type;  So, we have    */
/* to initialize the conversion tables, the TCB, SCB, etc ... as they are */
/* in the login server for this connection.  We use a new control order:  */
/* init_term_type.                                                        */

	if attach_data.network_type = DSA_NETWORK_TYPE
	then do;
		call dsa_tty_io_$control (actual_iocbp, "init_term_type", null (), code);
		if code ^= 0
		then call error (code, "init_term_type");
	     end;

	code = 0;
	return;
%page;
/*  This procedure closes the io switch and returns a zero code. */

tty_close:
     entry (arg_iocbp, code);

	call set_up;
	if attach_data.operation_hlock ^= 0
	then attach_data.async_close = "1"b;

/* turn off wakeups from the channel */

	if ^attach_data.async_hangup			/* don't bother if it's not ours */
	then do;

		if attach_data.network_type = DSA_NETWORK_TYPE
		then call dsa_tty_$event (attach_data.tty_handle, (0), (0), (0));
		else /* MCS */
		     call hcs_$tty_event (attach_data.tty_index, (0), (0), (0));
	     end;

	/*** If tty_ created the event channel, we will now destroy it.  However, we do not zero
	     event_wait.channel_id(1) because, if an I/O was in progress on the switch which called ipc_$block and the
	     user disconnects the channel, when he reconnects and types "start", control will return to ipc_$block which
	     will attempt to validate the channel name.  If we zero the channel name, this will fail and the restart
	     will not work properly. */

	if attach_data.assigned_ev_channel		/* fast channel, give back to hardcore */
	then do;
		call hcs_$delete_channel (attach_data.event_wait.channel_id (1), code);
		attach_data.have_ev_channel, attach_data.assigned_ev_channel = "0"b;
	     end;
	else if attach_data.created_ev_channel		/* we created regular channel */
	then do;
		call ipc_$delete_ev_chn (attach_data.event_wait.channel_id (1), code);
		attach_data.have_ev_channel, attach_data.created_ev_channel = "0"b;
	     end;
	else ;					/* user supplied event channel remains until detached */

	on any_other call handler;			/* should be on */
	call hcs_$set_ips_mask (""b, mask);

	actual_iocbp -> iocb.open_descrip_ptr = null;
	actual_iocbp -> iocb.detach_iocb = tty_detach;
	actual_iocbp -> iocb.open = tty_open;

	if attach_data.network_type = DSA_NETWORK_TYPE
	then actual_iocbp -> iocb.control = dsa_tty_io_$control_not_open;
	else /* MCS */
	     actual_iocbp -> iocb.control = tty_io_$control_not_open;

	actual_iocbp -> iocb.modes = iox_$err_not_open;

	call iox_$propagate (actual_iocbp);

	call hcs_$reset_ips_mask (mask, mask);
	return;
%page;
/*  Internal procedure to handle faults while IPS interrupts are masked.  For a fault while masked, the process
   is terminated (with the reason "unable to do critical I/O") because the I/O control blocks are in an
   inconsistent state.
*/

handler:
     procedure options (non_quick);			/* visible in azm */

	dcl     error_table_$unable_to_do_io
				 fixed (35) ext;

	if mask ^= ""b
	then call terminate_this_process (error_table_$unable_to_do_io);

     end handler;


terminate_this_process:
     procedure (cd);

	dcl     cd		 fixed bin (35);
	dcl     terminate_process_	 ext entry (char (*), ptr);
	dcl     1 ti		 aligned automatic,
		2 version		 fixed,
		2 code		 fixed (35);


	ti.version = 0;
	ti.code = cd;
	call terminate_process_ ("fatal_error", addr (ti));

     end terminate_this_process;
%page;
allocate_ev_channel:
     procedure (code);				/*  Assign event channel */

	dcl     code		 fixed binary (35) parameter;

	code = 0;

	if attach_data.have_ev_channel		/* user supplied a channel via "set_event" order */
	then return;

	/*** Try to get a fast channel, first;      */
	/*** If no success create an event channel. */

	ipcas.version = ipc_create_arg_structure_v1;
	ipcas.channel_type = FAST_EVENT_CHANNEL_TYPE;
	ipcas.call_entry = null_entry_;
	ipcas.call_data_ptr = null ();
	ipcas.call_priority = 0;
	call ipc_$create_event_channel (addr (ipcas), attach_data.event_wait.channel_id (1), code);
	if code = 0
	then attach_data.assigned_ev_channel = "1"b;
	else do;
		ipcas.channel_type = WAIT_EVENT_CHANNEL_TYPE;
		call ipc_$create_event_channel (addr (ipcas), attach_data.event_wait.channel_id (1), code);
		if code = 0
		then attach_data.created_ev_channel = "1"b;
		else return;
	     end;

	attach_data.have_ev_channel = "1"b;		/* here if we created a channel */
	return;

     end allocate_ev_channel;


try_hcs_attach:
     procedure (code);

	dcl     code		 fixed bin (35);

	code = 0;

/* The network_type is initialized here.                      */
/* set no event -- it will be set with tty_event at open time */

	if substr (device, 1, 4) = "dsa."		/* DSA */
	then do;
		attach_data.network_type = DSA_NETWORK_TYPE;
		call dsa_tty_$attach (attach_data.device_used, 0, attach_data.tty_handle, state, code);
	     end;

	else do;					/* MCS */
		attach_data.network_type = MCS_NETWORK_TYPE;
		call hcs_$tty_attach (attach_data.device_used, 0, attach_data.tty_index, state, code);
	     end;

	if code = 0
	then if attach_data.login_channel
	     then do;
		     if attach_data.network_type = DSA_NETWORK_TYPE
		     then /* DSA */
			call dsa_tty_$order (attach_data.tty_handle, "set_line_status_enabled", addr (ZERO_BIT),
			     state, code);
		     else /* MCS */
			call hcs_$tty_order (attach_data.tty_index, "set_line_status_enabled", addr (ZERO_BIT),
			     state, code);
		end;

     end try_hcs_attach;
%page;
try_dial_manager_attach:
     procedure (code);

	dcl     code		 fixed bin (35);

	code = 0;
	call ipc_$create_ev_chn (attach_data.dial_manager_event.channel_id (1), code);
	if code ^= 0
	then return;
	dma.version = dial_manager_arg_version_3;
	dma.dial_channel = attach_data.dial_manager_event.channel_id (1);
(nostrz):
	dma.dial_qualifier = attach_data.dial_id;
	dma.channel_name = attach_data.device_id;
	dma.dial_out_destination = attach_data.dial_phone;
	dma.reservation_string = resource_description;

	if ^access_class_specified
	then dma.access_class, dma.access_class_required = "0"b;
	else do;
		dma.access_class = access_class;
		dma.access_class_required = "1"b;
	     end;

	if attach_data.flags.phone_given
	then call dial_manager_$dial_out (addr (dma), code);
	else if attach_data.flags.accept_dial
	then do;
		call dial_manager_$registered_server (addr (dma), code);
		if code ^= 0
		then call dial_manager_$allow_dials (addr (dma), code);
	     end;
	else call dial_manager_$privileged_attach (addr (dma), code);

/*
  If this is a priv_attach, then if we already have it then everything
  is fine. If user specified the destination, then we must dial to it.
*/

	if (code = error_table_$resource_attached) & ^attach_data.flags.phone_given
	then do;	/*** must release is still "0"b at this point */
		code = 0;				/* do not go blocked, as has nothing further to say */
		return;
	     end;
	if code ^= 0				/* couldn't get the channel at all */
	then do;
dm_attachment_failed_:
		call ipc_$delete_ev_chn (attach_data.dial_manager_event.channel_id (1), (0));
		attach_data.dial_manager_event.channel_id (1) = 0;
		attach_data.flags.must_release = "0"b;
		return;
	     end;

	attach_data.flags.must_release = "1"b;		/* in case of cleanup during block */

	call ipc_$block (addr (attach_data.dial_manager_event), addr (event_message), code);
						/* wait for news from initializer */
	if code ^= 0
	then go to dm_attachment_failed_;

	call convert_dial_message_$return_io_module (event_message.message, device, (""), (0), dm_flags, code);
	if code ^= 0
	then go to dm_attachment_failed_;
	if ^dm_flags.dialup
	then do;
		code = error_table_$action_not_performed;
		go to dm_attachment_failed_;
	     end;

	attach_data.flags.must_release = "1"b;
	attach_data.flags.hangup = hangup;
	attach_data.device_used = device;		/* starnames unstarred here */

	if attach_data.flags.accept_dial
	then do;
		call dial_manager_$release_dial_id (addr (dma), code);
		if code ^= 0			/* we still have to release the channel */
		then return;
	     end;

	call ipc_$decl_ev_call_chn (attach_data.dial_manager_event.channel_id (1), tty_as_signal_handler,
	     attach_data_ptr, 1 /* NOTE: what's a reasonable priority? */, code);
	if code ^= 0
	then do;					/* this must work for proper operation */
		code = error_table_$action_not_performed;
		return;				/* ... but we must still release the channel */
	     end;

	return;

     end try_dial_manager_attach;
%page;
/* This entrypoint is called whenever an IPC signal is sent by the Answering
   Service for a channel which we had attached via dial_manager_.  We check
   the message to determine the type of event and, if the event is a hangup,
   we set the async_hangup flag, disable any subsequent attempts to release
   the channel as we no longer own it, send a wakeup on the I/O event channel
   to unblock any interrupted I/O, and invoke the user's hangup procedure
   (if any). */

tty_as_signal_handler:
     entry (arg_event_call_info_ptr);

	event_call_info_ptr = arg_event_call_info_ptr;
	attach_data_ptr = event_call_info.data_ptr;

	call convert_dial_message_$return_io_module (event_call_info.message, device, (""), (0), dm_flags, local_code);
	if local_code ^= 0				/* ignore signals we can't interpret */
	then return;

	if device ^= attach_data.device_used		/* ignore signals for other channels */
	then return;

	if ^dm_flags.hungup				/* ignore anything other than hangup signals */
	then return;

	attach_data.async_hangup = "1"b;
	attach_data.must_release = "0"b;		/* it's no longer ours */

	if attach_data.operation_hlock > 0		/* try to unblock pending I/O */
	then call hcs_$wakeup (get_process_id_ (), attach_data.event_wait.channel_id (1), 0, (0));

	if attach_data.have_user_hangup_proc		/* let the user do his thing */
	then do;
		local_eci = event_call_info;		/* ... user needs to get same info but with his data_ptr */
		local_eci.data_ptr = attach_data.user_hangup_proc.data_ptr;
		call attach_data.user_hangup_proc.procedure (addr (local_eci));
	     end;

	return;
%page;
release_channel:
     procedure;

	declare code		 fixed bin (35);

	if attach_data.flags.must_release
	then do;
		dma.version = dial_manager_arg_version_3;
		dma.channel_name = attach_data.device_used;
		dma.dial_channel = attach_data.dial_manager_event.channel_id (1);
		call ipc_$decl_ev_wait_chn (dma.dial_channel, code);

		if /* case */ attach_data.flags.phone_given
		then call dial_manager_$terminate_dial_out (addr (dma), code);
		else if attach_data.flags.hangup
		then call dial_manager_$release_channel (addr (dma), code);
		else call dial_manager_$release_channel_no_hangup (addr (dma), code);

		attach_data.flags.must_release = "0"b;
	     end;

	if attach_data.dial_manager_event.channel_id (1) ^= 0
	then do;
		call ipc_$delete_ev_chn (attach_data.dial_manager_event.channel_id (1), code);
		attach_data.dial_manager_event.channel_id (1) = 0;
	     end;

	return;

     end release_channel;


hcs_detach:
     procedure;

	if ((attach_data.tty_index > 0) | (attach_data.tty_handle > 0)) & ^attach_data.async_hangup
	then do;					/* don't bother detaching if it's no longer ours */

		if attach_data.network_type = DSA_NETWORK_TYPE
		then do;	/*** If no_hangup_on_detach we just detach in tty_ (dflag = 0);     */
			/*** else we terminate the session in session control  (dflag = 1) */

			if attach_data.hangup
			then call dsa_tty_$detach (attach_data.tty_handle, 1, (0), local_code);
			else call dsa_tty_$detach (attach_data.tty_handle, 0, (0), local_code);
		     end;

		else /* MCS */
		     call hcs_$tty_detach (attach_data.tty_index, 0, (0), local_code);

		if local_code ^= 0			/* lost the channel after last block */
		then attach_data.flags.must_release = "0"b;
	     end;

	attach_data.tty_index = 0;			/* definitely not ours anymore */

     end hcs_detach;


check_mode_length:
     procedure;

/**** Here we see if the hardcore returns more than our hard-coded guess
      of the maximum mode length. This code is here to avoid coordinating
      changes between this program and the hardcore, and to allow sites
      to have multiplexers that have long mode strings without neccessarily
      having to change this program. Clearly, having to reallocate all the
      time would be pretty poor. */

	declare 1 very_long_mode_info	 aligned,
		2 max_length	 fixed bin (21),
		2 mode_string	 char (2000);

	declare new_attach_data_ptr	 pointer;

	very_long_mode_info.max_length = 2000;
	very_long_mode_info.mode_string = "";

	if attach_data.network_type = DSA_NETWORK_TYPE
	then call dsa_tty_$order (attach_data.tty_handle, "modes", addr (very_long_mode_info), state, local_code);
	else /* MCS */
	     call hcs_$tty_order (attach_data.tty_index, "modes", addr (very_long_mode_info), state, local_code);

	if local_code ^= 0 | length (rtrim (very_long_mode_info.mode_string)) <= attach_data.max_mode_length
	then return;

	tty_max_mode_length = length (rtrim (very_long_mode_info.mode_string)) + 100;
						/* room to grow some */
	allocate attach_data in (system_free_area) set (new_attach_data_ptr);
	new_attach_data_ptr -> attach_data = attach_data; /* copy away */
	new_attach_data_ptr -> attach_data.max_mode_length = tty_max_mode_length;
	free attach_data in (system_free_area);
	attach_data_ptr = new_attach_data_ptr;
	return;

     end check_mode_length;


set_up:
     procedure;

	code = 0;
	mask = ""b;
	actual_iocbp = arg_iocbp -> iocb.actual_iocb_ptr;
	attach_data_ptr = actual_iocbp -> iocb.attach_data_ptr;
	return;

     end set_up;


clean_up_attach:
     procedure;

	if attach_data_ptr = null ()
	then return;

	if (attach_data.tty_index > 0) | (attach_data.tty_handle > 0)
	then call hcs_detach;

	call release_channel ();

     end clean_up_attach;
%page; %include dial_manager_arg;
%page; %include dsa_scu_sec_info;
%page; %include event_call_info;
%page; %include event_wait_info;
%page; %include iocb;
%page; %include iox_entries;
%page; %include iox_modes;
%page; %include ipc_create_arg;
%page; %include net_event_message;
%page; %include set_term_type_info;
%page; %include tty_attach_data_;
%page; %include tty_states;
     end tty_;

