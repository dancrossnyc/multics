/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1982 *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1982    *
        *                                                            *
        * Copyright (c) 1972 by Massachusetts Institute of           *
        * Technology and Honeywell Information Systems, Inc.         *
        *                                                            *
        ************************************************************** */

/* tty_io_ is the part of the tty_ io module that is used in
   actual io operation. */


/****^  HISTORY COMMENTS:
  1) change(81-03-17,BMargulies), approve(), audit(), install():
     Created.
     Modified October 1981 by C. Hornig to time out on write_status calls.
     Modified May 1982 by Robert Coren to accept (set get)_event_channel.
     Modified 8 Sepctember 1982 by Richard Lamson to add timeout code.
     Modified June 1983 by Robert Coren to make "get_channel_info" order
        return device_used rather than device_id.
     Modified April 1984 by Jon A. Rochlis to special case the "reconnection"
        control order so tty_ reconnections don't hang with the new
        reconnection strategy.
     Modified 1984-10-29 BIM to remove constant non-local gotos.
     Modified January 1985 by G. Palter for new treatment of dial_manager_
        attached channels.
     Modified 1985-02-01, BIM: fixed timeout not to wait forever.
     Modified 1985-02-19, BIM: added get_com_channel_info.
     Modified: 26 February 1985 by G. Palter to fix the "set_event_channel"
        control order to properly release any created-by-tty_ IPC channel.
  2) change(87-03-17,LJAdams), approve(87-04-03,MCR7646),
     audit(87-05-05,Gilcrease), install(87-05-14,MR12.1-1030):
     Changed ttd_version to ttd_version_3.
                                                   END HISTORY COMMENTS */


/* format: style2 */

tty_io_:
     procedure;
	return;

	declare (
	        arg_iocbp		 pointer,
	        arg_buf_ptr		 ptr,		/* ptr to user buffer (input) */
	        arg_buf_len		 fixed bin (21),	/* length of user buffer (input) */
	        (a_new_modes, a_old_modes)
				 char (*),	/* arguments to modes operation */
	        code		 fixed bin (35),	/* the usual */
	        chars_trans		 fixed bin (21),	/* no. of characters transmitted  (output) */
	        info_ptr		 ptr,		/* ptr to info (input) */
	        no_of_records	 fixed bin (21),	/* no. of lines to be skipped.  tty_position (input) */
	        order		 char (*),	/* name of order.  tty_control  (input) */
	        mode		 fixed bin	/* position mode */
	        )			 parameter;

	dcl     timed_out		 bit (1) aligned;
	dcl     temp_code		 fixed bin (35);
	dcl     temp_state		 fixed bin;

	dcl     create_ips_mask_	 entry (ptr, fixed bin, bit (36) aligned);
	dcl     get_com_channel_info_	 entry (pointer, fixed binary (35));
	dcl     hcs_$delete_channel	 entry (fixed bin (71), fixed bin (35));
	dcl     (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$tty_abort	 entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$tty_event	 entry (fixed bin, fixed bin (71), fixed bin, fixed bin (35));
	dcl     hcs_$tty_get_line	 entry (fixed bin, ptr, fixed bin (21), fixed bin (21), fixed bin (21), bit (1),
				 fixed bin, fixed bin (35));
	dcl     hcs_$tty_order	 entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$tty_read	 entry (fixed bin, ptr, fixed bin (21), fixed bin (21), fixed bin (21), fixed bin,
				 fixed bin (35));
	dcl     hcs_$tty_state	 entry (fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$tty_write	 entry (fixed bin, ptr, fixed bin (21), fixed bin (21), fixed bin (21), fixed bin,
				 fixed bin (35));
	dcl     ipc_$block		 entry (ptr, ptr, fixed bin (35));
	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$decl_ev_call_chn	 entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
	dcl     ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     timer_manager_$alarm_wakeup
				 entry (fixed bin (71), bit (2), fixed bin (71));
	dcl     timer_manager_$reset_alarm_wakeup
				 entry (fixed bin (71));
	dcl     timer_manager_$sleep	 entry (fixed binary (71), bit (2));
	dcl     tty_$tty_as_signal_handler
				 entry (pointer);
	dcl     (
	        tty_io_call_control_,
	        tty_io_call_control_$not_open
	        )			 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     ttt_info_$terminal_data
				 entry (char (*), fixed bin, fixed bin, ptr, fixed bin (35));
	dcl     ttt_info_$initial_string
				 entry (char (*), char (512) varying, fixed bin (35));
	dcl     ttt_info_$modes	 entry (char (*), char (*), fixed bin (35));

	dcl     (addr, addrel, index, length, mod, null, reverse, rtrim, substr, charno, addcharno)
				 builtin;

	dcl     actual_iocbp	 ptr;		/* copy of iocb.actual_ioc_ptr */
	dcl     buffer_ptr		 ptr;		/* ptr to the base of the segment pointed to by arg_buf_ptr */
	dcl     control_not_open	 bit (1);
	dcl     event_channel	 fixed bin (71) based;
	dcl     event_wait_ptr	 pointer;
	dcl     (i, amt_trans)	 fixed bin (21);
	dcl     iox_op_in_progress	 fixed bin;
	dcl     initial_string	 char (512) varying;/* terminal initialization string */
	dcl     ltype		 fixed bin;
	dcl     modes_ptr		 ptr;		/* points to modes structure for hcs_$tty_order */
	dcl     modes_need_restoration bit (1) aligned;
	dcl     nl_returned		 bit (1);
	dcl     num_to_read		 fixed bin (21);	/* chars to request from hcs_$tty_read */
	dcl     num_read		 fixed bin (21);	/* number of chars returned from ring 0 */
	dcl     offset		 fixed bin (21);	/* offset from 0 for hcs_$tty_ calls */

	dcl     Relative_Microseconds	 bit (2) static init ("10"b) options (constant);
	dcl     scratch_buffer_ptr	 pointer;
	dcl     scratch_buffer	 char (2000) aligned based (scratch_buffer_ptr);
	dcl     sis_version		 fixed bin int static options (constant) init (1);
						/* version of send_initial_string_info structure */
	dcl     sus_trm_names	 (3) char (32) int static options (constant) init ("sus_", "trm_", "alrm");
	dcl     set_type_order	 bit (1) aligned;	/* ON for set_type order, OFF for set_term_type */
	dcl     state		 fixed bin;	/* state returned by hcs_$tty_ calls */

	declare 1 timeout_event_wait	 aligned,
		2 n_channels	 fixed binary,
		2 padding		 fixed binary,
		2 channel_id	 (2) fixed binary (71);

	dcl     total_amt_trans	 fixed bin (21);	/* number of characters transferred */

	declare old_type		 fixed bin based (info_ptr);

	dcl     1 ttd		 aligned like terminal_type_data;
						/* info structure for set_terminal_data order (ring 0) */

	declare 1 send_initial_string_info
				 aligned like tty_send_initial_string_info based (info_ptr);

	declare 1 get_channel_info	 aligned based (info_ptr) like tty_get_channel_info;

	dcl     1 status_struc	 aligned based (info_ptr),
		2 ev_chn		 fixed bin (71),
		2 data_available	 bit (1) unaligned;

	dcl     1 t_info		 aligned like terminal_info;
						/* info structure for terminal_info order */

	dcl     1 event_message	 aligned like event_wait_info;

	dcl     based_state		 fixed bin based;

	dcl     1 hangup_proc_data	 aligned based (info_ptr),
		2 entry_var	 entry variable,
		2 data_ptr	 ptr,
		2 prior		 fixed bin;

	dcl     (
	        error_table_$null_info_ptr,
	        error_table_$action_not_performed,
	        error_table_$timeout,
	        error_table_$out_of_sequence,
	        error_table_$smallarg,
	        error_table_$bad_arg,
	        error_table_$long_record,
	        error_table_$no_operation,
	        error_table_$not_open,
	        error_table_$unimplemented_version,
	        error_table_$undefined_order_request,
	        error_table_$no_initial_string,
	        error_table_$io_no_permission
	        )			 fixed bin (35) external static;

	dcl     cleanup		 condition;
%page;
/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/* The new reconnection strategy is described here. At the entry to any of the i/o	*/
	/* entries (all but attach, open, close, detach) we increment			*/
	/* attach_data.operation_hlock. We then check attach_data.async_close and async_detach.	*/
	/* These indicate that we have had our switch removed out from under us. If the hlock is	*/
	/* one, meaning that we are the only operation suspended, and async_detach is on, then	*/
	/* we free the attach data. Otherwise we decrement the hlock. (half lock). Then, if the	*/
	/* iocb is in fact attached and opened, we call iox_ to do our operation on the new	*/
	/* switch, and return that result. There is a race window here, in that the async	*/
	/* operation could happen before we bump the counter. In that case the attach data would	*/
	/* be invalid and unpredictable. This seems unlikely, and is not handled in this	*/
	/* implementation.								*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: ^off */

/* CONVENTIONS:
   proper_io_return (code) does not return, and should be used
   to return to caller of tty_io_.

   check_for_disconnect (code) checks for io_no_permission. If found
   in goes and does reconnection and does not return.
   If it does return, the code is the valid error code */
%page;
control_not_open:
     entry (arg_iocbp, order, info_ptr, code);
	control_not_open = "1"b;
	goto CONTROL_JOIN;

control:
     entry (arg_iocbp, order, info_ptr, code);
	control_not_open = ""b;

CONTROL_JOIN:
	if (order = "get_chars_timeout") | (order = "get_line_timeout") | (order = "put_chars_timeout")
	then do;					/* need to initialize output value in info structure */
		if info_ptr = null ()
		then call proper_io_return (error_table_$null_info_ptr);
		if order = "put_chars_timeout"
		then info_ptr -> output_timeout_info.characters_written = 0;
		else /*** if (order = "get_chars_timeout") | (order = "get_line_timeout") then */
		     info_ptr -> input_timeout_info.characters_read = 0;
	     end;

	call set_up_io (4);				/* will abort the operation if there was an async hangup */
	on cleanup call clean_up;

	if order = "reconnection"
	then call proper_io_return (error_table_$unimplemented_version);

	if order = "io_call" | order = "io_call_af"
	then do;
		if control_not_open
		then call tty_io_call_control_$not_open (actual_iocbp, order, info_ptr, code);
		else call tty_io_call_control_ (actual_iocbp, order, info_ptr, code);
		call proper_io_return (code);
	     end;

	if order = "set_event" | order = "set_event_channel"
	then do;					/* user wants to get wakeups */
		if control_not_open
		then do;
			attach_data.event_wait.channel_id = info_ptr -> event_channel;
			attach_data.have_ev_channel = "1"b;
		     end;
		else do;

/* see tty_ for explanation of this stuff about fast and slow channels */

			if attach_data.assigned_ev_channel
			then do;
				call hcs_$delete_channel (attach_data.event_wait.channel_id (1), code);
				attach_data.assigned_ev_channel = "0"b;
			     end;
			else if attach_data.created_ev_channel
			then do;
				call ipc_$delete_ev_chn (attach_data.event_wait.channel_id (1), code);
				attach_data.created_ev_channel = "0"b;
			     end;
			attach_data.event_wait.channel_id (1) = info_ptr -> event_channel;
			call hcs_$tty_event (attach_data.tty_index, attach_data.event_wait.channel_id (1), state,
			     code);
			if code ^= 0
			then call check_for_disconnect (code);
			call call_order ("start", null (), state, code);
			if code ^= 0
			then call check_for_disconnect (code);
		     end;
		call proper_io_return (code);
	     end;
	if order = "get_event" | order = "get_event_channel"
	then do;
		if ^attach_data.have_ev_channel
		then call proper_io_return (error_table_$out_of_sequence);
		info_ptr -> event_channel = attach_data.event_wait.channel_id (1);
		call proper_io_return (code);
	     end;


	if order = "state"
	then do;
		if info_ptr = null ()
		then call proper_io_return (error_table_$null_info_ptr);
		call hcs_$tty_state (attach_data.tty_index, temp_state, temp_code);
		info_ptr -> based_state = temp_state;
		call proper_io_return (0);
	     end;

	if order = "get_com_channel_info"
	then do;
		if info_ptr = null ()
		then call proper_io_return (error_table_$null_info_ptr);
		info_ptr -> as_com_channel_info.channel_name = attach_data.device_used;
		call get_com_channel_info_ (info_ptr, code);
		call proper_io_return (code);
	     end;

	if control_not_open				/* no other orders for closed switches */
	then call proper_io_return (error_table_$not_open);


	if order = "modes"
	then do;					/* turn this into a tty_modes call */
		call call_order ("modes", info_ptr, state, code);
		call proper_io_return (code);
	     end;

	if order = "resetread"
	then call abort (1, code);			/* abort dont return */
	if order = "resetwrite"
	then call abort (2, code);
	if order = "abort"
	then call abort (3, code);

	if order = "get_line_timeout"
	then do;
		timeout_info_ptr = info_ptr;
		call timer_setup (input_timeout_info.timeout);
		call get_line (input_timeout_info.buffer_pointer, input_timeout_info.buffer_length,
		     input_timeout_info.characters_read, input_timeout_info.timeout);
	     end;

	if order = "get_chars_timeout"
	then do;
		timeout_info_ptr = info_ptr;
		call timer_setup (input_timeout_info.timeout);
		call get_chars (input_timeout_info.buffer_pointer, input_timeout_info.buffer_length,
		     input_timeout_info.characters_read, input_timeout_info.timeout);
						/* And it never returns -- calls proper_io_return */
	     end;

	if order = "put_chars_timeout"
	then do;
		timeout_info_ptr = info_ptr;
		call timer_setup (output_timeout_info.timeout);

		call put_chars (output_timeout_info.buffer_pointer, output_timeout_info.buffer_length,
		     output_timeout_info.characters_written, output_timeout_info.timeout);
						/* Never returns -- calls proper_io_return */
	     end;

	if order = "event_info"
	then do;
		info_ptr -> event_channel = attach_data.event_wait.channel_id (1);
		call proper_io_return (0);
	     end;

	if order = "set_term_type"
	then do;
		sttip = info_ptr;
		if set_term_type_info.version ^= stti_version_1
		then call proper_io_return (error_table_$unimplemented_version);
		call get_terminal_info;
		t_info.term_type = set_term_type_info.name;
		if set_term_type_info.flags.ignore_line_type
		then ltype = 0;
		else ltype = t_info.line_type;
		set_type_order = "0"b;

TYPE:
		ttd.version = ttd_version_3;
		call ttt_info_$terminal_data (t_info.term_type, ltype, t_info.baud_rate, addr (ttd), code);
		if code ^= 0
		then call proper_io_return (code);

		call call_order ("set_terminal_data", addr (ttd), state, code);
		if code ^= 0
		then call proper_io_return (code);

		if set_type_order
		then call proper_io_return (code);

		if set_term_type_info.flags.set_modes
		then do;
			call set_default_modes ("force,", code);
			if code ^= 0
			then call proper_io_return (code);
		     end;

		if set_term_type_info.flags.send_initial_string
		then do;
			call send_default_initial_string (code);
			if code ^= 0
			then if code = error_table_$no_initial_string
			     then code = 0;
		     end;

		call proper_io_return (code);
	     end;

	if order = "set_default_modes"
	then do;
		call get_terminal_info;
		call set_default_modes ("init,force,", code);
		call proper_io_return (code);
	     end;

	if order = "send_initial_string"
	then do;
		if info_ptr = null ()
		then do;
			call get_terminal_info;
			call send_default_initial_string (code);
		     end;
		else do;
			if send_initial_string_info.version ^= sis_version
			then call proper_io_return (error_table_$unimplemented_version);
			initial_string = send_initial_string_info.initial_string;
			call send_initial_string (initial_string, code);
		     end;
		call proper_io_return (code);
	     end;

	if order = "set_type" | order = "set_terminal_type"
						/* obsolete, map into set_term_type */
	then do;
		if old_type < 1 | old_type > max_tty_type
		then call proper_io_return (error_table_$undefined_order_request);
		call get_terminal_info;
		t_info.term_type = tty_dev_type (old_type);
		ltype = 0;
		set_type_order = "1"b;
		go to TYPE;
	     end;

	if order = "get_channel_info"
	then do;
		if get_channel_info.version ^= 1
		then call proper_io_return (error_table_$unimplemented_version);
		get_channel_info.devx = attach_data.tty_index;
		get_channel_info.channel_name = attach_data.device_used;
		call proper_io_return (0);
	     end;

	if order = "hangup_proc"
	then do;
		if attach_data.dial_manager_event.channel_id (1) = 0
		then call proper_io_return (error_table_$action_not_performed);
		attach_data.user_hangup_proc.procedure = hangup_proc_data.entry_var;
		attach_data.user_hangup_proc.data_ptr = hangup_proc_data.data_ptr;
		attach_data.have_user_hangup_proc = "1"b;
		call ipc_$decl_ev_call_chn (attach_data.dial_manager_event.channel_id (1), tty_$tty_as_signal_handler,
		     attach_data_ptr, hangup_proc_data.prior, code);
		call proper_io_return (code);		/* change the priority to the requested value */
	     end;

	do;
	     call call_order (order, info_ptr, state, code);
						/* see if hardcore knows it */
	     if code ^= 0
	     then call proper_io_return (code);

	     if order = "read_status"			/* our part of this bargain */
	     then status_struc.ev_chn = attach_data.event_wait.channel_id (1);
	     if order = "write_status"
	     then do;
		     status_struc.ev_chn = attach_data.event_wait.channel_id (1);
		     if status_struc.data_available
		     then call timer_manager_$alarm_wakeup (1, "11"b, status_struc.ev_chn);
		end;
	end;
	call proper_io_return (code);			/* assume hardcore sets code for unknown order */
%page;
/* The user makes a modes call with two strings:  one for new modes and one for old modes.
   The hardcore overwrites the new modes with the old modes, so the user's mode string must be copied
   into a scratch buffer for the hardcore call.
*/

modes:
     entry (arg_iocbp, a_new_modes, a_old_modes, code);

	call set_up_io (6);
	on cleanup call clean_up;

	call set_modes ("", a_new_modes, a_old_modes, code);
	call proper_io_return (code);
%page;
/* The only request that makes sense for terminals is forward skip of records.
   mode = 0		     skip records
   no_of_records >=  0	     forward skip
*/

tty_io_$position:
     entry (arg_iocbp, mode, no_of_records, code);

	call set_up_io (5);
	if mode ^= 0 | no_of_records < 0
	then call proper_io_return (error_table_$no_operation);

	on cleanup call clean_up;

	if no_of_records > 0
	then do;
		allocate scratch_buffer;		/* freed by proper_io_return_ */
		event_wait_ptr = addr (attach_data.event_wait);
		i = 0;

		do while (i < no_of_records);

		     call read (addr (scratch_buffer), length (scratch_buffer), amt_trans, 0, "1"b, code);
		     if code ^= 0
		     then call proper_io_return (code);
		     if nl_returned
		     then i = i + 1;
		end;
	     end;
	call proper_io_return (code);
%page;
/* This procedure sets the pointer to the actual iocb ptr and sets the attach_data_ptr.
*/

set_up:
     procedure;

	code = 0;
	actual_iocbp = arg_iocbp -> iocb.actual_iocb_ptr;
	attach_data_ptr = actual_iocbp -> iocb.attach_data_ptr;
	timeout_info_ptr = null ();
	modes_need_restoration = "0"b;
	scratch_buffer_ptr = null ();
	return;

     end set_up;


set_up_io:
     procedure (which_op);

	dcl     which_op		 fixed bin;

	call set_up;
	attach_data.operation_hlock = attach_data.operation_hlock + 1;
	iox_op_in_progress = which_op;		/* allow us to retry this op -- see IOX* labels */
	call check_async;
	return;
     end set_up_io;
%page;
get_terminal_info:
     proc;					/* performs ring 0 terminal_info order */

	t_info.version = terminal_info_version;

	call call_order ("terminal_info", addr (t_info), state, code);
	if code ^= 0
	then call proper_io_return (code);
     end get_terminal_info;
%page;
/* Internal procedure to set default or user-specified modes */

set_default_modes:
     proc (prefix, code);				/* assumes terminal type given by t_info.term_type */

	dcl     prefix		 char (*);
	dcl     code		 fixed bin (35);

	call ttt_info_$modes (t_info.term_type, attach_data.temp_mode_string, code);
						/* get default modes */
	if code ^= 0 | attach_data.temp_mode_string = ""
	then return;

	call set_modes (prefix, attach_data.temp_mode_string, "", code);
     end set_default_modes;

set_modes:
     procedure (new_mode_prefix, new_modes, old_modes, code);

	dcl     (new_mode_prefix, new_modes, old_modes)
				 char (*);
	dcl     code		 fixed bin (35);
	dcl     commax		 fixed bin (21);
	dcl     prefix_in_use	 bit (1) aligned;	/* the prefix arg avoids concatenation stack extensions in our callers */
	dcl     returned_length	 fixed bin (21);

	if new_mode_prefix ^= ""
	then prefix_in_use = "1"b;
	else prefix_in_use = "0"b;

	modes_ptr = addr (attach_data.mode_string_info);

	if prefix_in_use
	then attach_data.mode_string_info.mode_string = new_mode_prefix || new_modes;
	else attach_data.mode_string_info.mode_string = new_modes;

	call call_order ("modes", modes_ptr, state, code);

	if code ^= 0 & code ^= error_table_$smallarg
	then do;
		old_modes = attach_data.mode_string_info.mode_string;
						/* the mode(s) in error are in here */
		return;
	     end;

	if length (old_modes) = 0
	then do;
		code = 0;				/* censor smallarg on "" old_modes */
		return;
	     end;

	returned_length = length (rtrim (attach_data.mode_string_info.mode_string));
	if returned_length = 0			/* nothing in either direction */
	then do;
		code = 0;
		old_modes = "";
		return;
	     end;

/* from this point on we can have a smallarg */

	code = 0;					/* but we do not admit it. */

/**** Note -- attach_data.mode_string is maintained to be long enough
      for whatever the hardcore could possibly say, unless someone
      invents a funny mpx that gave wildly different mode string lengths.
      So we assume that attach_data.mode_string is not truncated,
      and don't bother checking for the "."

      So long as the user gave us as much space, we have faith that
      no manipulations of the string are needed. */

	if returned_length <= length (old_modes)
	then do;
		old_modes = attach_data.mode_string_info.mode_string;
		return;
	     end;

/**** Here, we want to truncate to the last full mode */

	commax = index (reverse (substr (attach_data.mode_string_info.mode_string, 1, length (old_modes))), ",");
	if commax = 0				/** hmmm, no room for an modes at all */
	then old_modes = ".";
	else do;
		substr (old_modes, 1, length (old_modes) - commax) =
		     substr (attach_data.mode_string_info.mode_string, 1, length (old_modes) - commax);
		substr (old_modes, length (old_modes) - commax + 1) = ".";
						/* fill with spaces */
	     end;
	return;
     end set_modes;

/* Internal procedure to set default and user-specified initial_string */

send_default_initial_string:
     proc (code);					/* assumes terminal type given by t_info.term_type */

	dcl     code		 fixed bin (35);

	call ttt_info_$initial_string (t_info.term_type, initial_string, code);
	if code ^= 0
	then return;
	if length (initial_string) = 0
	then do;
		code = error_table_$no_initial_string;
		return;
	     end;

	go to sis_common;

send_initial_string:
     entry (a_initial_string, code);

	dcl     a_initial_string	 character (*) varying;

	initial_string = a_initial_string;

sis_common:
	attach_data.temp_mode_string = "";
	modes_need_restoration = "1"b;

	call set_modes ("", "rawo", attach_data.temp_mode_string, code);
	if code ^= 0
	then return;				/* Recurse, recurse */
	call tty_io_$put_chars (arg_iocbp, addrel (addr (initial_string), 1), length (initial_string), code);
						/* skip varying string. YCCH */
						/* not to mention no_block implications... */
						/* this should be coded as call to write_chars, all things considered */

	call set_modes ("", attach_data.temp_mode_string, "", (0));
						/* best work */
	modes_need_restoration = "0"b;
	return;
     end send_default_initial_string;

%page;
/* this procedure is called after any hcs_$tty_ entry.
   if we are not a login_channel, then we return.
   if we are, then
   in the io no permission case, it waits 10 seconds for sus_ to happen.
   if the async bits are set, then the reconnection came off. if not, we
   we wait again. using -login_channel if you do not mean it is not recommended,
   as the async bits would never get set. sus_signal_handler_ will take care of anyone
   who is attached with -login_channel. */

check_for_disconnect:
     procedure (code);

	dcl     temp_state		 fixed bin;
	dcl     temp_code		 fixed bin (35);
	dcl     mask_to_set		 bit (36) aligned;
	dcl     mask_to_reset	 bit (36) aligned;
	dcl     code		 fixed bin (35);

	if ^attach_data.login_channel
	then return;				/* not our problem */
	if attach_data.async_detach
	then go to fake_operation_and_return;

	call hcs_$tty_state (attach_data.tty_index, temp_state, temp_code);
						/* is it ours? */
	if temp_code = 0
	then return;				/* we still own channel, must be some other error */

/* we dont own channel, but no bits. must be we havent got sus_'ed */
	call create_ips_mask_ (addr (sus_trm_names), 3, mask_to_set);
						/* better include alrm, for timing */
	mask_to_set = ^mask_to_set;			/* form enable mask */

/* sit in a loop and wait for the answering service to goose us.
   the answering service should suspend us, and then afterwards
   take us out.
*/
	call hcs_$set_ips_mask (mask_to_set, mask_to_reset);
						/* mask to AS signals only */

	do while (^attach_data.async_detach);
	     call timer_manager_$sleep (1, "11"b);
	end;

	call hcs_$reset_ips_mask (mask_to_reset, (36)"0"b);

	goto fake_operation_and_return;
%page;
check_async:
     entry;

	if attach_data.async_detach
	then go to fake_operation_and_return;
	else if attach_data.async_hangup
	then call proper_io_return (error_table_$io_no_permission);
	else return;

     end check_for_disconnect;



fake_operation_and_return:				/* label since we really return */
	revert cleanup;				/* do not try to run unlock_hlock on freed attach data */
	if attach_data.operation_hlock = 1
	then free attach_data;			/* and we are the last */
	else call unlock_hlock;

	goto IOX_OPERATION (iox_op_in_progress);

IOX_OPERATION (1):					/* get_chars */
	call iox_$get_chars (actual_iocbp, arg_buf_ptr, arg_buf_len, chars_trans, code);
	return;

IOX_OPERATION (2):					/* get_line */
	call iox_$get_line (actual_iocbp, arg_buf_ptr, arg_buf_len, chars_trans, code);
	return;

IOX_OPERATION (3):					/* put_chars */
	call iox_$put_chars (actual_iocbp, arg_buf_ptr, arg_buf_len, code);
	return;

IOX_OPERATION (4):					/* control */
	call iox_$control (actual_iocbp, order, info_ptr, code);
	return;

IOX_OPERATION (5):					/* position */
	call iox_$position (actual_iocbp, mode, no_of_records, code);
	return;

IOX_OPERATION (6):					/* modes */
	call iox_$modes (actual_iocbp, a_old_modes, a_new_modes, code);
	return;
%page;
unlock_hlock:
     procedure;
	attach_data.operation_hlock = attach_data.operation_hlock - 1;
     end unlock_hlock;

proper_io_return:
     procedure (r_code);
	declare r_code		 fixed bin (35);

	code = r_code;
	go to proper_io_return_label_;
     end proper_io_return;

proper_io_return_label_:
	if timeout_info_ptr ^= null ()
	then call timer_cleanup;
	call modes_cleanup;
	if scratch_buffer_ptr ^= null ()
	then free scratch_buffer;
	call unlock_hlock;
	return;
%page;
tty_io_$get_chars:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, chars_trans, code);

	chars_trans = 0;				/* initialize output value in case set_up_io aborts */
	call set_up_io (1);				/* manage half-lock and get actual_iocb_ptr, attach_data */
	on cleanup call clean_up;			/* never freed */

	call get_chars (arg_buf_ptr, arg_buf_len, chars_trans, -1);
						/* It never returns -- calls proper_io_return */

get_chars:
     procedure (arg_buf_ptr, arg_buf_len, chars_trans, arg_timeout);

	declare (
	        arg_buf_ptr		 pointer,
	        (arg_buf_len, chars_trans)
				 fixed binary (21),
	        arg_timeout		 fixed binary (71)
	        )			 parameter;

	if arg_timeout < 0
	then event_wait_ptr = addr (attach_data.event_wait);
	else if arg_timeout = 0
	then event_wait_ptr = null ();

	chars_trans = 0;
	if arg_buf_len < 0
	then call proper_io_return (error_table_$bad_arg);
	buffer_ptr = arg_buf_ptr;
	offset = mod (charno (buffer_ptr), 4);
	buffer_ptr = addcharno (buffer_ptr, -offset);
	call read (buffer_ptr, arg_buf_len, chars_trans, offset, "0"b, code);
	call proper_io_return (code);

     end get_chars;
%page;
tty_io_$get_line:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, chars_trans, code);

	chars_trans = 0;				/* initialize output value in case set_up_io aborts */
	call set_up_io (2);
	on cleanup call clean_up;

	call get_line (arg_buf_ptr, arg_buf_len, chars_trans, -1);

get_line:
     procedure (arg_buf_ptr, arg_buf_len, chars_trans, arg_timeout);

	declare (
	        arg_buf_ptr		 pointer,
	        (arg_buf_len, chars_trans)
				 fixed binary (21),
	        arg_timeout		 fixed binary (71)
	        )			 parameter;

	if arg_timeout < 0
	then event_wait_ptr = addr (attach_data.event_wait);
	else if arg_timeout = 0
	then event_wait_ptr = null ();		/* no blocking */

	chars_trans = 0;
	if arg_buf_len < 0
	then call proper_io_return (error_table_$bad_arg);
	if arg_buf_len = 0
	then call proper_io_return (0);

	buffer_ptr = arg_buf_ptr;
	offset = mod (charno (buffer_ptr), 4);
	buffer_ptr = addcharno (buffer_ptr, -offset);
	num_to_read = arg_buf_len;

	do while (num_to_read > 0);			/* until we get a newline or run out of space */
	     call read (buffer_ptr, num_to_read, num_read, offset, "1"b, code);
	     chars_trans = chars_trans + num_read;	/* BEFORE we check the code, so that long_record and timeout and such correctly return the number we read */

	     if code ^= 0
	     then call proper_io_return (code);

	     if nl_returned
	     then call proper_io_return (0);		/* ring 0 will say whether it found newline */

	     if attach_data.no_block | arg_timeout = 0
	     then call proper_io_return (0);		/* nothing counts as a line for get line */
	     offset = offset + num_read;		/* no newline, read some more */
	     num_to_read = num_to_read - num_read;
	end;

	call proper_io_return (error_table_$long_record); /* never got a newline */
     end get_line;
%page;
/* This entry is called to output characters.  The hardcore dim may output less than was requested
   and may have to be called more than once.  These conditions may occur if the hardcore did not
   complete the request:

   .	code = 0		The hardcore was given more characters than it could process;  the process goes
   .			blocked and makes another output request after the wakeup.

   .	code ^= 0		The process has lost the attachment to the terminal.  The error code no_io_permission is
   .			returned.

   .	state ^= TTY_STATE_DIALED_UP this only will come back in the Real Owner's process, currently
   the Initializer.
   The terminal has hungup.  The error code no_io_permission is returned.
*/

tty_io_$put_chars:
     entry (arg_iocbp, arg_buf_ptr, arg_buf_len, code);

	call set_up_io (3);
	on cleanup call clean_up;

	call put_chars (arg_buf_ptr, arg_buf_len, (0), -1);
						/* It never returns -- calls proper_io_return */
put_chars:
     procedure (arg_buf_ptr, arg_buf_len, arg_chars_written, arg_timeout);

	declare (
	        arg_buf_ptr		 pointer,
	        arg_buf_len		 fixed binary (21),
	        arg_chars_written	 fixed binary (21),
	        arg_timeout		 fixed binary (71)
	        )			 parameter;

	if arg_timeout < 0
	then event_wait_ptr = addr (attach_data.event_wait);
	else if arg_timeout = 0
	then event_wait_ptr = null ();
	/*** else set by timer_setup */

	if arg_buf_len < 0
	then call proper_io_return (error_table_$bad_arg);

	if arg_buf_len = 0
	then call proper_io_return (0);

	buffer_ptr = arg_buf_ptr;
	offset = mod (charno (buffer_ptr), 4);
	buffer_ptr = addcharno (buffer_ptr, -offset);
	total_amt_trans = 0;

	timed_out = "0"b;				/* we retry the operation after the time out interval even without a detectable wakeup */
	do while ("1"b);
	     amt_trans = 0;
	     call write_chars (buffer_ptr, offset, arg_buf_len - total_amt_trans, amt_trans, state, code);
	     if code ^= 0
	     then do;
		     arg_chars_written = total_amt_trans;
		     call proper_io_return (code);
		end;
	     total_amt_trans = total_amt_trans + amt_trans;
	     if total_amt_trans >= arg_buf_len
	     then do;
		     arg_chars_written = total_amt_trans;
		     call proper_io_return (0);	/* done! */
		end;

	     if arg_timeout >= 0			/* timeout requires output args */
	     then do;
		     arg_chars_written = total_amt_trans;
		     if arg_timeout = 0 | timed_out	/* timed_out --> that we timed out already but are just giving one more push */
		     then call proper_io_return (error_table_$timeout);
		end;
	     else if attach_data.no_block		/* no_block + timeout = block on timer only */
	     then do;
		     if arg_buf_len > total_amt_trans
		     then code = total_amt_trans - arg_buf_len;
						/* - (number not transmitted) */
		     arg_chars_written = total_amt_trans;
		     call proper_io_return (code);
		end;
	     offset = offset + amt_trans;
	     call ipc_$block (event_wait_ptr, addr (event_message), code);
	     if code ^= 0
	     then call proper_io_return (code);		/* ipc failure? this is bad luck, perhaps should signal */
	     call check_async ();			/* check for having lost the channel while blocked */
	     if event_message.channel_id ^= attach_data.event_wait.channel_id (1)
	     then timed_out = "1"b;			/* attach_data.event_wait.channel_id (1) is ALWAYS the tty itself, and the only other possibility is the timer event */
						/* setting this flag causes it to try to write one more time before returning. */

	end;
     end put_chars;
%page;
write_chars:
     procedure (bufferp, buffero, n_to_write, n_wrote, statex, code);

	declare (
	        bufferp		 ptr,
	        (buffero, n_to_write, n_wrote)
				 fixed bin (21),
	        statex		 fixed bin,
	        code		 fixed bin (35)
	        )			 parameter;

	call hcs_$tty_write (attach_data.tty_index, bufferp, buffero, n_to_write, n_wrote, statex, code);
	if code ^= 0
	then call check_for_disconnect (code);
	return;
     end write_chars;
%page;
/*  This procedure reads one line of data or "amt_to_read" characters whichever is smaller. */

read:
     proc (buffer_ptr, amt_to_read, amt_read, offset, get_line_called, code);

	dcl     buffer_ptr		 ptr;
	dcl     amt_to_read		 fixed bin (21);
	dcl     amt_read		 fixed bin (21);
	dcl     offset		 fixed bin (21);
	dcl     get_line_called	 bit (1);
	dcl     code		 fixed bin (35);

	amt_read = 0;

	timed_out = "0"b;
	do while ("1"b);
	     if get_line_called
	     then call hcs_$tty_get_line (attach_data.tty_index, buffer_ptr, offset, amt_to_read, amt_read, nl_returned,
		     state, code);
	     else call hcs_$tty_read (attach_data.tty_index, buffer_ptr, offset, amt_to_read, amt_read, state, code);

	     if code ^= 0
	     then do;
		     call check_for_disconnect (code);	/* will NOT return if io_no_permission */
		     return;
		end;

	     if amt_read > 0
	     then return;
	     if event_wait_ptr = null () /* 0 timeout */ | timed_out
						/* we hung out a read, it timed out, we tried one last time, got nothing, and so away we go */
	     then call proper_io_return (error_table_$timeout);

	     if attach_data.no_block
	     then return;				/* the n-chars-read will be zero, no problem, no code needed */
	     call ipc_$block (event_wait_ptr, addr (event_message), code);
	     if code ^= 0
	     then return;
	     call check_async ();			/* check for having lost the channel while blocked */
	     if event_message.channel_id ^= attach_data.event_wait.channel_id (1)
	     then timed_out = "1"b;
	end;
     end read;

%page;
timer_setup:
     procedure (arg_timeout);

	declare arg_timeout		 fixed bin (71);
	declare channel		 fixed bin (71);

	if arg_timeout = 0
	then return;				/* timeout of zero special */
	call ipc_$create_ev_chn (channel, code);
	if code ^= 0
	then call proper_io_return (code);
	if attach_data.no_block
	then do;
		timeout_event_wait.channel_id (1) = channel;
		timeout_event_wait.n_channels = 1;
	     end;
	else do;
		timeout_event_wait.channel_id (1) = attach_data.event_wait.channel_id (1);
		timeout_event_wait.channel_id (2) = channel;
		timeout_event_wait.n_channels = 2;
	     end;
	call timer_manager_$alarm_wakeup (arg_timeout, Relative_Microseconds, timeout_event_wait.channel_id (2));
	event_wait_ptr = addr (timeout_event_wait);
	return;
     end timer_setup;

modes_cleanup:
     procedure;

/**** Restore modes by hand to avoid forcing a bunch of useful
      procedures to be non-quick. */

	if ^modes_need_restoration
	then return;
	attach_data.mode_string_info.mode_string = attach_data.temp_mode_string;
	call hcs_$tty_order (attach_data.tty_index, "modes", addr (attach_data.mode_string_info), state, code);

	return;
     end modes_cleanup;

timer_cleanup:
     procedure;

	if timeout_info_ptr = null ()
	then return;
	call timer_manager_$reset_alarm_wakeup (timeout_event_wait.channel_id (2));
	call ipc_$delete_ev_chn (timeout_event_wait.channel_id (2), (0));
	return;

     end timer_cleanup;

abort:
     procedure (abort_type, code);

	dcl     abort_type		 fixed bin;
	dcl     code		 fixed bin (35);

	call hcs_$tty_abort (attach_data.tty_index, (abort_type), state, code);
	if code ^= 0
	then call check_for_disconnect (code);
	call proper_io_return (code);
     end abort;

call_order:
     procedure (order, info_ptr, state, code);

	dcl     order		 char (*);
	dcl     info_ptr		 ptr;
	dcl     state		 fixed bin;
	dcl     code		 fixed bin (35);

	call hcs_$tty_order (attach_data.tty_index, order, info_ptr, state, code);
	if code ^= 0
	then call check_for_disconnect (code);
     end call_order;

clean_up:
     procedure;

	call timer_cleanup;
	call modes_cleanup;
	if scratch_buffer_ptr ^= null ()
	then free scratch_buffer;
	call unlock_hlock;
     end clean_up;


%page;
%include as_com_channel_info;
%include event_wait_info;
%include iocb;
%include iox_entries;
%include tty_attach_data_;
%include tty_read_status_info;
%include tty_get_channel_info;
%include io_timeout_info;
%include tty_control_orders_info;
%include terminal_type_data;
%include terminal_info;
%include set_term_type_info;
%include ttyp;

     end tty_io_;
