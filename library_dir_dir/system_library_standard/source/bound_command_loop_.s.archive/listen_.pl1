/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
listen_:
     procedure (initial_command_line);

/* Multics Listener */
/* initially coded in June 1969 by R. Daley */
/* converted to pl1 and improved for new command loop in December 1969 by R. Daley */
/* changed to reject input lines that are too long by V. Voydock in April 1970 */
/* changed to truncate the stack  on every release
   on August 12,1970 by V. Voydock */
/* Changed to execute a start up exec_com and print the message of the
   day on September 4,1970 by R. J. Feiertag */
/* Extensively modified as part of redesign of user ring process initialization
   by V. Voydock on October 27,1970 */
/* Modified in June 1971 by V. Voydock to call cu_$ready_proc, to add "rl -all",
   to use "system_free_" instead of "free_", to not blow up if
   release_stack entry is somehow invoked before listen_ entry, and to make
   the listen_ entry behave the same way every time it is called in a process */
/* Modified in July 1971 by V. Voydock to make start command have control argument
   which causes it not to restore the old io attachments */
/* Modified in September 1971 by V. Voydock to not truncate free storage area after a release */
/* Modified in February 1972 by V. Voydock to accept an arbitrarily long command line as input */
/* Extensively modified in May 1972 by V. Voydock as part of fast command loop. Many pieces
   of listen_ were moved to other procedures */
/* Modified in September 1973 by M. Weaver to add level numbers, eliminate
   the automatic release, and to make start and release work directly
   with labels. */
/* Modified in December 1974 by S. Webber to redo the buffering of the input
   line. */
/* Opened in November 1981 for video system support by Benson I. Margulies */
/* Modified February 1984 by Jim Lippard to fix bug in call to iox_signal_ */
/* Changed to use listener_info.incl.pl1 12/07/84 Steve Herbst */
%page;
/* DECLARATIONS */

	dcl     (
	        buffer_ptr,				/* ptr to first char of workspace used by iox_$get_line */
	        read_ptr		 ptr,		/* pointer to actual position in input buffer for read */
	        dummy_ptr		 ptr,		/* dummy return pointer from cu_$grow_stack_frame calls */
	        old_sp
	        )			 pointer aligned;

	dcl     (input_length, buffer_length)
				 fixed bin (21);
	dcl     total_input_length	 fixed bin (21);
	dcl     entry,				/* 0->$listen_, 1->$release_stack */
	        i			 fixed bin aligned;
	dcl     code		 fixed bin (35);

	dcl     initial_command_line	 char (*) var,	/* first command line to be executed */
	        command_line	 char (input_length) aligned based (buffer_ptr);

	dcl     spno		 bit (18) aligned,	/* used to store stack segno */
	        should_restore_attachments
				 bit (1) aligned;

	dcl     1 x		 based (buffer_ptr) aligned,
		2 ch		 (0:65536) char (1) unaligned;


	dcl     1 listener_control	 aligned like based_listener_control;


	dcl     iox_signal_		 entry (ptr, fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     cu_$cp		 ext entry (ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$ready_proc	 ext entry ();
	dcl     cu_$grow_stack_frame	 entry (fixed bin (21), ptr, fixed bin (35));
	dcl     get_system_free_area_	 entry returns (ptr);

	dcl     (addr, baseno, codeptr, divide, environmentptr, fixed, length, min, null, ptr, rel, stackframeptr,
	        stackbaseptr)	 builtin;
	dcl     cleanup		 condition;
	dcl     error_table_$long_record
				 ext static fixed bin (35);
%page;
/* Establish this frame as the "top" of the listener frame thread, so this
   frame cannot be "released" around. */

	entry = 0;
	go to re_enter;

/* Entry called after processing quit or unclaimed signal: */

release_stack:
     entry (should_restore_attachments);

	entry = 1;

/* Save pointer to previous listener control information, save return point
   for subsequent invocations of the listener, and initialize switches */

re_enter:
	if listen_static_data_.first_level_sw
	then do;					/* no previous invocation to work from */
		listener_control.prev_ptr = null;
		listener_control.level = 1;		/* this is first invocation */
		sp = stackframeptr ();
		spno = baseno (sp);			/* get segno for comparing */
		i = 0;
		do while (baseno (sp -> stack_frame.prev_sp) = spno & sp ^= null);
		     i = i + 1;
		     sp = sp -> stack_frame.prev_sp;
		end;
		listener_control.frame = i;
	     end;
	else do;					/* can use info from previous invocation */
		listener_control.prev_ptr = listen_static_data_.control_ptr;
		listener_control.level = listen_static_data_.control_ptr -> based_listener_control.level + 1;
		old_sp = environmentptr (listen_static_data_.control_ptr -> based_listener_control.start);
		sp = stackframeptr ();
		i = listen_static_data_.control_ptr -> based_listener_control.frame;
		do while (sp ^= old_sp & sp ^= null);	/* find # of intervening frames */
		     i = i + 1;
		     sp = sp -> stack_frame.prev_sp;	/* back ptr is safer to use */
		end;
		listener_control.frame = i;
	     end;

/* fill in labels for release and start */
	if (entry = 0) | listen_static_data_.first_level_sw
	then do;
		listener_control.release_all, listener_control.release, listener_control.new_release = READY_LABEL;
		listen_static_data_.first_level_sw = "0"b;
	     end;
	else do;					/* will want to release to invocation before this one */
		listener_control.release = listen_static_data_.control_ptr -> based_listener_control.new_release;
		listener_control.new_release = READY_LABEL;
		listener_control.release_all = listen_static_data_.control_ptr -> based_listener_control.release_all;
	     end;
	listener_control.start = START_LABEL;

	listen_static_data_.control_ptr = addr (listener_control);	/* have finished getting info from old frame */

	listener_control.flags.dont_restore_sw = "0"b;

/* set ptrs to current control info and to buffer in which to read in command line */
	buffer_length = 32;				/* start with 128 char input buffer */
	call cu_$grow_stack_frame (buffer_length, buffer_ptr, code);
						/* get storage for initial buffer */

/* Establish cleanup procedure to restore control structure thread */
	on condition (cleanup)
	     begin;
		listen_static_data_.control_ptr =
		     listen_static_data_.control_ptr -> based_listener_control.prev_ptr;  /* pop level */
		if listen_static_data_.control_ptr = null
		then listen_static_data_.first_level_sw = "1"b;			/* used mainly in test case */
	     end;

/* If called at the listen_ entry, set up initial command line. */
	if entry = 0
	then do;
		if initial_command_line ^= ""
		then do;
			if length (initial_command_line) > buffer_length * 4
			then do;
				call com_err_ (0, "listen_", "Initial command line is too long. Max=^d chars.",
				     buffer_length * 4);
				go to READY_LABEL;
			     end;
			input_length = length (initial_command_line);
			command_line = initial_command_line;
			total_input_length = 0;
			go to CALL_CP;
		     end;
	     end;
%page;
/* ******************************START OF BASIC LISTENER LOOP ****************************** */

/* Call the "ready procedure".  The standard one prints the ready message. */
/* In case of video system, restore output. */

READY_LABEL:
	call iox_$control (iox_$user_input, "reset_more", null (), (0));
	call cu_$ready_proc ();

/* Read the next command line */
readnew:
	read_ptr = buffer_ptr;
	total_input_length = 0;			/* extra input line character count */
read:
	call iox_$get_line (iox_$user_input, read_ptr, buffer_length * 4 - total_input_length, input_length, code);
	if code ^= 0
	then do;
		if code ^= error_table_$long_record
		then call iox_signal_ (iox_$user_input, code);
		else do;
			if input_length < buffer_length * 4 - total_input_length
			then goto CALL_CP;
			call cu_$grow_stack_frame (buffer_length, dummy_ptr, code);
						/* double size of buffer */
			buffer_length = buffer_length + buffer_length;
			read_ptr = addr (read_ptr -> ch (input_length));
			total_input_length = total_input_length + input_length;
		     end;
		goto read;
	     end;

CALL_CP:
	call cu_$cp (buffer_ptr, total_input_length + input_length, code);
	if code = 100
	then go to readnew;				/* ignore null command line */
	go to READY_LABEL;

/* ****************************** END OF BASIC LISTENER LOOP ****************************** */
%page;
START_LABEL:					/* start command goes here */
	if listener_control.flags.dont_restore_sw
	then should_restore_attachments = "0"b;
	listen_static_data_.control_ptr = listen_static_data_.control_ptr -> based_listener_control.prev_ptr;
	return;
%page;
get_pct:
     entry (P_listener_control_ptr);

	dcl     P_listener_control_ptr		 ptr;

/* Return pointer to control structure */
	P_listener_control_ptr = listen_static_data_.control_ptr;
	return;
%page;
get_level:
     entry (level_no, frame_no);

/* return command level number and stack frame number of caller's caller */

	dcl     (level_no, frame_no)	 fixed bin;

	if listen_static_data_.control_ptr = null
	then do;					/* no previous invocation */
		level_no = 0;
		old_sp = stackbaseptr () -> stack_header.stack_begin_ptr;
						/* in case we're not in highest ring */
		frame_no = 0;
	     end;
	else do;					/* count only up to previous listener */
		level_no = listen_static_data_.control_ptr -> based_listener_control.level;
		old_sp = environmentptr (listen_static_data_.control_ptr -> based_listener_control.start);
		frame_no = listen_static_data_.control_ptr -> based_listener_control.frame;
	     end;

	sp = stackframeptr () -> stack_frame.prev_sp -> stack_frame.prev_sp;
						/* want frame no of caller's caller */
	do while (sp ^= old_sp);
	     frame_no = frame_no + 1;
	     sp = sp -> stack_frame.prev_sp;
	end;
	return;
%page;
get_area:
     entry returns (ptr);

	return (get_system_free_area_ ());
%page;
%include iox_entries;
%page;
%include listener_info;
%page;
%include stack_frame;
%page;
%include stack_header;


end listen_;
