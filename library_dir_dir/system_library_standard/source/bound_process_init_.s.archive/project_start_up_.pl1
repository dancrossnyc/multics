/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
project_start_up_:
     procedure (a_pit_ptr, just_call_listen_, initial_command_line);
	dcl     a_pit_ptr		 ptr;
	dcl     just_call_listen_	 bit (1) aligned;
	dcl     initial_command_line	 character (*) varying;

/* 
Coded 4/79 by B. Margulies; diverged from process_overseer_
Modified 7/11/79 B. Margulies to revert the command_error handler *blush*
Modified May 1981 B. Margulies for argument bug fix. 
Modified 1 August 1981 B. Margolin [sic] & J. Pattin to fix any_other handler.
Modified 11 August 1981 by B Margulies for missing rtrim of project dir 
Modified 12/81 B Margulies for new calling seq, uninitialized initial command line */


	dcl     terminate_process_	 entry (char (*), ptr);
	dcl     hcs_$fs_search_set_wdir
				 entry (char (*), fixed bin (35));
	dcl     com_err_		 entry () options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);


%page;
%include iox_dcls;


/* Automatic */

	dcl     saved_cl_intermediary	 entry variable;
	dcl     project_dir		 char (168);
	dcl     mme2_handler	 ptr;
	dcl     saved_mme2_handler	 ptr;
	dcl     ps_ec_cl		 character (256) aligned;
	dcl     code		 fixed bin (35);
	dcl     bc		 fixed bin (24);
	dcl     entry_type		 fixed bin (2);
	dcl     first_process	 bit (1);
	dcl     (first_ec_arg, second_ec_arg)
				 char (12);

/* Constants */

	dcl     process_type	 (0:3) character (12) internal static options (constant)
				 initial ("initializer", "interactive", "absentee", "daemon");
	dcl     down_sc1		 char (19) internal static options (constant) init (">system_control_dir");
	dcl     start_up_dot_ec	 char (11) internal static options (constant) init ("start_up.ec");

/* Entries */

	dcl     cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));
	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
	dcl     command_query_$set_cp_escape_enable
				 entry (bit (1) aligned, bit (1) aligned);

	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     sct_manager_$set	 entry (fixed bin, ptr, fixed bin (35));
	dcl     sct_manager_$get	 entry (fixed bin, ptr, fixed bin (35));
	dcl     process_overseer_$mme2_fault_handler_
				 entry (ptr, char (*), ptr, ptr, bit (1));
	dcl     cu_$set_cl_intermediary
				 entry (entry);
	dcl     cu_$get_cl_intermediary
				 entry (entry);

/* Conditions */

	dcl     command_error	 condition;


/* Builtins */

	dcl     (addr, codeptr, length, null, rtrim, unspec)
				 builtin;

%include pit;
%include user_attributes;
%include static_handlers;


	initial_command_line = "";
	pit_ptr = a_pit_ptr;

	project_dir = ">user_dir_dir>" || rtrim (pit_ptr -> pit.project);



/* the handler is saved to make the code independent of the representation
of a nonexistant handler. It is checked at all so that project start ups can
set up a handler that doesnt call debug */

	call sct_manager_$get (mme2_sct_index, saved_mme2_handler, (0));

	call hcs_$status_minf (project_dir, "project_start_up.ec", 1, entry_type, bc, code);
	if ^(entry_type = 1 & code = 0)
	then call abort_handler (rtrim (project_dir) || ">project_start_up.ec was not found or is not a segment.", code)
		;


	call hcs_$fs_search_set_wdir (project_dir, code);
	if code ^= 0
	then call abort_handler ("Could not set working directory to project directory.", code);

	first_process = (pit_ptr -> pit.n_processes = 1); /* see if new_proc or login */

	if first_process
	then first_ec_arg = "login";
	else first_ec_arg = "new_proc";		/* since the strings arent quoted, the leading and trailing spaced shouldnt bother
the exec_com */

	second_ec_arg = process_type (pit_ptr -> pit.process_type);

/* set up the standard any other handler. use make_entry with null refptr
 so that project can have own default error handler */

	call cu_$get_cl_intermediary (saved_cl_intermediary);
	call cu_$set_cl_intermediary (error_handler);

	on command_error call com_err_handler;		/* die on com_err */

	ps_ec_cl =
	     "exec_com " || rtrim (project_dir) || ">project_start_up " || rtrim (first_ec_arg) || " "
	     || rtrim (second_ec_arg);
	call cu_$cp (addr (ps_ec_cl), length (rtrim (ps_ec_cl)), (0));

	revert command_error;

	call cu_$set_cl_intermediary (saved_cl_intermediary);

	if pit_ptr -> pit.at.vinitproc
	then call hcs_$fs_search_set_wdir (pit_ptr -> pit.homedir, (0));

/* enable ".."*/
	call command_query_$set_cp_escape_enable ("1"b, (""b));



	if ^pit_ptr -> pit.at.nostartup
	then do;					/* start_up is allowed */
		initial_command_line = "exec_com ";

/* First try homedir */

		call hcs_$status_minf (pit.homedir, start_up_dot_ec, 1, entry_type, bc, code);

/* note that we assume any error is cause to look elsewhere to give best chance
    of success */

		if code = 0 & entry_type = 1
		then initial_command_line = initial_command_line || rtrim (pit.homedir);

/* now try projectdir */

		else do;
			call hcs_$status_minf (project_dir, start_up_dot_ec, 1, entry_type, bc, code);

			if code = 0 & entry_type = 1
			then initial_command_line = initial_command_line || rtrim (project_dir);
			else do;
				call hcs_$status_minf (down_sc1, start_up_dot_ec, 1, entry_type, bc, code);
				if code = 0 & entry_type = 1
				then initial_command_line = initial_command_line || rtrim (down_sc1);
				else do;
					initial_command_line = "";
					goto no_start_up;
				     end;
			     end;
		     end;

		initial_command_line = initial_command_line || ">";
		initial_command_line = initial_command_line || start_up_dot_ec;
						/* the piecemeal assemble makes faster code */

		initial_command_line = initial_command_line || " " || first_ec_arg;

		initial_command_line = initial_command_line || " " || second_ec_arg;
	     end;					/* the block that checked pit.nostart*/

no_start_up:					/* set up the mme2 handler */
	call sct_manager_$get (mme2_sct_index, mme2_handler, (0));
	if mme2_handler = saved_mme2_handler
	then call sct_manager_$set (mme2_sct_index, codeptr (process_overseer_$mme2_fault_handler_), code);

	just_call_listen_ = "1"b;

	return;


com_err_handler:
     procedure;
%include condition_info_header;
%include condition_info;
%include com_af_error_info;

	declare 1 CI		 aligned like condition_info;
	declare find_condition_info_	 entry (pointer, pointer, fixed binary (35));
	declare code		 fixed bin (35);

	unspec (CI) = ""b;

	call find_condition_info_ (null (), addr (CI), code);
	if code ^= 0
	then call abort_handler ("Can't get error message.", code);
	call ioa_$ioa_switch (iox_$error_output, "^a", CI.info_ptr -> com_af_error_info.info_string);
	call abort_handler ("Error in project start up.", 0);
     end;

abort_handler:
     proc (reason, code) options (non_quick);

	dcl     code		 fixed bin (35);
	dcl     reason		 char (*);
	dcl     1 term_structure	 aligned,
		2 version		 fixed bin init (0),
		2 status_code	 fixed bin (35);

	status_code = code;
	call ioa_$ioa_switch (iox_$error_output, reason);
	call terminate_process_ ("init_error", addr (term_structure));
     end;

error_handler:
     entry;
	call abort_handler ("Error in project_start_up ec.", 0);

     end project_start_up_;
