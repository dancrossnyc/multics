/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */




/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */
date_time: proc;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*							       */
/*  See the control string table at the end of this list for a description   */
/*  of the formats used by the various entries to this command.	       */
/*							       */
/*  SYNTAX AS A COMMAND:					       */
/*							       */
/*  fnc_name {convert_date_to_binary_args} {-control_args}		       */
/*							       */
/*  SYNTAX AS AN ACTIVE FUNCTION:				       */
/*							       */
/* [fnc_name {convert_date_to_binary_args} {-control_args}]		       */
/*							       */
/*  ARGUMENTS:						       */
/*							       */
/*  fnc_name						       */
/*     is the name of the active function to be invoked.		       */
/*  convert_date_to_binary_args				       */
/*     one or more arguments which could be strung together and passed to    */
/*     convert_date_to_binary_ to indicate the date about which information  */
/*     is desired.						       */
/*							       */
/*  CONTROL ARGUMENTS:					       */
/*							       */
/*  -zone XXX						       */
/*     specifies the zone which is to be used to express the result.	       */
/*     calendar clock defaults to GMT, all else to process default.	       */
/*  -language XXX, -lang XXX					       */
/*     specifies the language in which month-names, day-names, and	       */
/*     zone-names are to be expressed.  All functions default to process     */
/*     default.						       */
/*							       */
/*							       */
/*  SYNTAX AS A COMMAND:					       */
/*							       */
/*  clock FORMAT {date-time-string} {-control_args}		       */
/*							       */
/* SYNTAX AS AN ACTIVE FUNCTION:				       */
/*							       */
/*  [clock FORMAT {date-time-string} {-control_args}]		       */
/*							       */
/*  FORMAT is a string which is is acceptable to date_time_$format	       */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Status:						       */
/*   1) 11/11/72- Gary C. Dixon	CREATED			       */
/*   2) 06/12/78- jaf	Added calendar_clock and clock functions.      */
/*	   		Added -zone and -language arguments.	       */
/*  			Changed to call date_time_$format	       */
/*   3) 03/30/83- jaf	Prepare for new date/time system.	       */
/*			Added -time_zone, -tz to cover date_time       */
/*			Fix up to match MCRed control strings	       */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      me = "date_time";
      ctl = "^my/^dm/^yc  ^Hd^99v.9MH ^xxxxza^xxxda";
      quote = "1"b;
      goto common_quote;

calendar_clock: entry;
      me = "calendar_clock";
      ctl = "calendar_clock";
      goto common;

clock: entry;

      me = "clock";
      call cu_$arg_ptr (1, arg_p, arg_l, code);
      if (code ^= 0)
      then argno = -1;		/* ERROR:  format_string missing.    */
      else do;
         argno = 2;
         ctl = arg;
      end;
      quote = "0"b;
      goto clock_common;

date: entry;
      me = "date";
      ctl = "^my/^dm/^yc";
      goto common;

day: entry;
      me = "day";
      ctl = "^Z9dm";
      goto common;

day_name: entry;
      me = "day_name";
      ctl = "^dn";
      goto common;

hour: entry;
      me = "hour";
      ctl = "^Z9Hd";
      goto common;

long_date: entry;
      me = "long_date";
      ctl = "^mn ^Z9dm, ^9999yc";
      quote = "1"b;
      goto common_quote;

long_year: entry;
      me = "long_year";
      ctl = "^9999yc";
      goto common;

minute: entry;
      me = "minute";
      ctl = "^Z9MH";
      goto common;

month: entry;
      me = "month";
      ctl = "^Z9my";
      goto common;

month_name: entry;
      me = "month_name";
      ctl = "^mn";
      goto common;

time: entry;
      me = "time";
      ctl = "^Hd:^MH";
      goto common;

year: entry;
      me = "year";
      ctl = "^yc";
      goto common;


common:
      quote = "0"b;
common_quote:
      argno = 1;
clock_common:
      lzone, llanguage = "";
/**** Assume we were called as an active function.  Get ptr & length of our  */
/****  return argument, and count of our input arguments.		       */
      call cu_$af_return_arg (arg_ct, ret_p, ret_l, code);
      if code = 0			/* if called as an active function,  */
      then do;
         command = "0"b;
         err = active_fnc_err_;
         get_arg = cu_$af_arg_ptr;
         ret = "";
      end;
      else if code = error_table_$not_act_fnc /* if called as a command,     */
      then do;
         command = "1"b;		/* indicate so		       */
         get_arg = cu_$arg_ptr;
         err = com_err_;
      end;
      else do;			/* WHAT ELSE IS THERE?!	       */
         command = "0"b;		/* if some unknown error occurs,     */
         err = active_fnc_err_;	/* ..report it to user as if we were */
         go to bad_call;		/* ..called as an active fnc	       */
      end;
      if argno = -1			/* Report missing format_string in   */
      then do;			/* ..clock entry.		       */
         code = error_table_$noarg;
         go to bad_call;
      end;

      result = "";
      state = 0;
      do i = argno to arg_ct;		/* string input arguments together,  */
				/* ..separated by blanks, in our     */
         result = result || " ";	/* ..result argument (a temporary).  */
         call get_arg (i, arg_p, arg_l, code);
         if (state = 1)		/* -zone last		       */
         then do;
	  state = 0;
	  lzone = arg;
         end;
         else if (state = 2)		/* -lang last		       */
         then do;
	  state = 0;
	  llanguage = arg;
         end;
         else do;
	  if (arg = "-zone")
	  | (arg = "-time_zone") | (arg = "-tz")  /* (OBSOLETE)	       */
	  then state = 1;
	  else if (arg = "-language") | (arg = "-lang")
	  then state = 2;
	  else result = result || arg;
         end;
      end;
      if (state ^= 0)
      then goto arg_error;
      errloc = 0;
      call convert_date_to_binary_  ((result), clock_value, code);
      if code ^= 0			/* if error in input arguments,      */
      then do;			/* ..tell user.		       */
         call err (code, me,
	  "^/Date/Time args were: ^va^[ -zone ^a^;^s^]^[ -lang ^a^;^s^]",
	  length (result), result, (lzone ^= ""), lzone,
	  (llanguage ^= ""), llanguage);
         return;
      end;
      tzone = lzone;		/* Process defaults		       */
      tlanguage = llanguage;		/* ..done in $format	       */
      if (me = "calendar_clock")	/* Output values in GMT,	       */
      then do;			/* ..english by default.	       */
         if lzone = ""
         then tzone = "gmt";
         if llanguage = ""
         then tlanguage = "english";
      end;

      on condition (sub_error_) call sub_err_handler;
      result = date_time_$format ((ctl), clock_value, tzone, tlanguage);
      if ^command & quote
      then result = """" || result || """";

exit:
      if command			/* print command's result	       */
      then call ioa_ ("^va", length (result), result);
      else ret = result;		/* return AFs result	       */
      return;%page;
dcl sub_error_	condition;
sub_err_handler: proc;
         condition_info_ptr = addr (c_info);
         condition_info.version = condition_info_version_1;
         call find_condition_info_ (null (), condition_info_ptr, code);
         if (code ^= 0)
         then call com_err_ (code, me||"(sub_error_)" );
         sub_error_info_ptr = condition_info.info_ptr;
         if (sub_error_info.name ^= "date_time_$format")
         then do;
	  call continue_to_signal_ (code);
	  return;
         end;
         call com_err_ (sub_error_info.status_code, me, "^a",
	   sub_error_info.info_string);
         goto exit;


dcl 1 c_info	like condition_info;
dcl code		fixed bin (35);
dcl continue_to_signal_ entry (fixed bin(35));
dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
%include condition_info;
%include condition_info_header;
%include sub_error_info;
      end sub_err_handler;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


bad_call:
      call err (code, me, "
Usage:^-^[^;[^]^a ^[format_string ^]{convert_date_to_binary_args} {-control_args}^[^;]^]",
         command, me, (me = "clock"), command);
      return;


arg_error:
      call err (error_table_$noarg, me,
         "^/^a requires a ^[zone^;language^] name operand.", arg, state);
      return;

dcl active_fnc_err_ entry options (variable);
dcl arg		char (arg_l) based (arg_p);
dcl arg_ct	fixed bin;
dcl arg_l		fixed bin;
dcl arg_p		ptr;
dcl argno		fixed bin;
dcl clock_value	fixed bin (71);
dcl code		fixed bin (35);
dcl com_err_	entry options (variable);
dcl command	bit (1);
dcl convert_date_to_binary_
		entry (char (*), fixed bin (71), fixed bin (35));
dcl ctl		char (256) var;
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$af_return_arg
		entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl date_time_$format	entry (char(*), fixed bin(71), char(*), char(*))
		returns(char(250) var);
dcl error_table_$not_act_fnc
		fixed bin (35) ext static;
dcl err		entry automatic options (variable);
dcl errloc	fixed bin;
dcl get_arg	entry (fixed bin, ptr, fixed bin, fixed bin (35)) automatic;
dcl error_table_$noarg
		fixed bin (35) ext static;
dcl i		fixed bin;
dcl ioa_		entry options (variable);
dcl llanguage	char (32);
dcl lzone		char (32);
dcl me		char (16);
dcl quote		bit (1);
dcl result	char (250) var;
dcl ret		char (ret_l) var based (ret_p);
dcl ret_l		fixed bin;
dcl ret_p		ptr;
dcl state		fixed bin;
dcl tlanguage	char (32);
dcl tzone		char (32);

dcl (addr, length, null) builtin;

   end date_time;
