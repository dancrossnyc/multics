/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

datebin_:
     procedure (Clock, Absda, Mo, Da, Yr, Hr, Min, Sec, Wkday, S) options (separate_static);

/* DATEBIN_ - utility functions for date conversion.

   Keith Willis July 1971

   Modified April 1976 by T. Casey, to:
   *	check the shift information that is now kept in whotab, as well as that in installation_parms;
   *	initiate whotab and installation_parms in an internal procedure and complain if unable to;
   *	add a test entry point to change sysdir and null ip and whoptr, forcing initiation of new tables.
   *	(the latter two features copied from system_info_)

   Modified March 1979 by G. Palter, to:
   *	fix the bug in the revert entry wherein any date in Jan or Feb which
   *	was beyond the end of Feb (eg: 2/29/79) was converted incorrectly.
   *	This bug caused users with a daily limit to not be allowed to login
   *	on the last day of February each year.

   Largely rewritten April 1980 by C. Hornig for per-process time zones.

   Modified July 1984 by Jim Lippard to use the system time zone when
          calculating the system shift.

   Modified Dec 1984 by JAFalksen to return the correct value for Absda
*/

dcl (Shift1, Shift2, Dayr_clk) fixed bin,		/* parameters */
    (Mo, Da, Yr, Hr, Min, Sec) fixed bin,
    (Absda, Wkday, S) fixed bin,
    (Dayr_mo, Datofirst) fixed bin,
    (Clock, Oldclock) fixed bin (71);

dcl sub_err_ entry options (variable);
dcl decode_clock_value_$all
         entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71),
         fixed bin, char (4), fixed bin, fixed bin, fixed bin (35));
dcl encode_clock_value_
         entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4),
         fixed bin (71), fixed bin (35));
dcl encode_clock_value_$offsets
         entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71),
         fixed bin, char (4), fixed bin (71), fixed bin (35));
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl sys_info$time_zone ext char (4);

dcl (ip, whoptr) ptr int static init (null);
dcl sysdir char (168) int static init (">system_control_dir");

dcl shift_from_whotab bit aligned;
dcl ec fixed bin (35);
dcl (clk, save_clock) fixed bin (71);
dcl (shift, day, month, year, hour, minute, second, day_of_week, abs_date, day_of_year) fixed bin;
dcl (sys_hour, sys_minute, sys_day_of_week) fixed bin;
dcl microsecond fixed bin (71);

dcl (binary, clock, divide, mod, null) builtin;

/* ======================================================= */

/* ENTRY:	datebin_ (clock, absda, mo, da, yr, hr, min, sec, wkday, s);

   clock (fixed bin (71))	is the time to be broken down (input)
   absda fixed bin		is the number of days since 1/1/1901 (output)
   mo fixed bin		is the month (output)
   da fixed bin		is the day of the month (output)
   yr fixed bin		is the year (01-99) (output)
   hr fixed bin		is the hour (0-23) (output)
   min fixed bin		is the minute (0-59) (output)
   sec fixed bin		is the second (0-59) (output)
   wkday fixed bin		is the day of the week (monday = 1, Sunday = 7) (output)
   s fixed bin		is the shift (from installation_parms) (0-7) (output)
*/

	Absda, Mo, Da, Yr, Hr, Min, Sec, Wkday, S = 0;	/* in case error */
	call decode_clock (Clock);
	call calc_shift;
	Absda = abs_date;
	Mo = month;
	Da = day;
	Yr = year;
	Hr = hour;
	Min = minute;
	Sec = second;
	Wkday = day_of_week;
	S = shift;
return_to_caller:
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$shift (Clock, s);

   clock (fixed bin (71))   is the clock reading (input)
   s (fixed bin)            is the shift for that clock reading (output) */

datebin_$shift:
     entry (Clock, S);

	S = -1;
	call decode_clock (Clock);
	call calc_shift;
	S = shift;
	return;

/* ------------------------------------------------------- */

/* ENTRY: datebin_$wkday(clock,wkday);

   clock(fixed bin(71))     is the number of microseconds since 000 GMT Jan. 1,1901(input)
   wkday(fixed bin)         is the current day of the week(Monday=1 and Sunday=7) (output)
*/

wkday:
     entry (Clock, Wkday);

	Wkday = 0;
	call decode_clock (Clock);
	Wkday = day_of_week;
	return;

/* ------------------------------------------------------- */

/* Entry: datebin_$time (clock, hr, min, sec);

   Clock (fixed bin (71))       is the number of microseconds since 000 GMT Jan. 1,1901 (input)
   hr (fixed bin)               is the current hour (output)
   min (fixed bin)              is the current minute (output)
   sec (fixed bin)              is the current second (output)
*/

time:
     entry (Clock, Hr, Min, Sec);

	Hr, Min, Sec = -1;				/* in case error */
	call decode_clock (Clock);
	Hr = hour;
	Min = minute;
	Sec = second;
	return;

/* ------------------------------------------------------- */

/* ENTRY: datebin_$dayr_clk (clock, dayr_clk);

   clock (fixed bin (71))         is the number of microseconds since 000 GMT Jan. 1,1901 (input)
   dayr_clk (fixed bin)               is the day of current year since Jan. 1 (output)
*/

dayr_clk:
     entry (Clock, Dayr_clk);

	Dayr_clk = -1;				/* in case error */
	call decode_clock (Clock);
	Dayr_clk = day_of_year;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$revert (mo, da, yr, min, sec, clock);

   where all arguments are defined as above and first 5 are input while the last is output */

revert:
     entry (Mo, Da, Yr, Hr, Min, Sec, Clock);		/* build a clock reading given the month day year etc */

	call encode_clock_value_ (1, 2, 1901, 0, 0, 0, 0, 0, (""), save_clock, ec);
	call encode_clock_value_$offsets (save_clock, Mo - 1, Da - 2, Yr - 1901, Hr, Min, Sec, 0, 0, (""), Clock, ec);
	if ec ^= 0 then Clock = 0;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$revertabs (absda, clock);

   absda (fixed bin)      is the number of days since Jan.1, 1901 (input)
   clock (fixed bin (71))      is the number of microseconds since Jan.1, 1901 00 GMT (output) */

revertabs:
     entry (Absda, Clock);				/* build a clock reading given the absolute day */

	Clock = 0;
	call encode_clock_value_ (12, 31, 1900, 0, 0, 0, 0, 0, "", save_clock, ec);
	call encode_clock_value_$offsets (save_clock, 0, Absda, 0, 0, 0, 0, 0, 0, "", Clock, ec);
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$clockathr (hr, clock);

   hr (fixed bin)         is the hour (local zone) that the clock is to be set to (input)
   clock (fixed bin (71))  is the number of microseconds since 000 GMT Jan.1, 1901  (output) */

clockathr:
     entry (Hr, Clock);				/* return a clock for hour=hr following clock now */

	call find_midnight (clock () - Hr * 3600000000);
	Clock = clk + 3600000000 * (24 + Hr);
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$datofirst (yr, datofirst);

   yr (fixed bin)        is the year (input)
   datofirst (fixed bin) is the number of days from Jan.1,1901 up to but not including Jan.1 of "yr" (output) */

datofirst:
     entry (Yr, Datofirst);

	call encode_clock_value_ (1, 1, Yr, 0, 0, 0, 0, 0, (""), clk, ec);
	call decode_clock (clk);
	Datofirst = abs_date;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$dayr_mo (mo, da, yr, dayr_mo);

   mo (fixed bin)       is the month (input)
   da (fixed bin)       is the day of the month (input)
   yr (fixed bin)       is the year month and day belong to (input)
   dayr_mo (fixed bin)  is the day of the year =1-366 (output) */

dayr_mo:
     entry (Mo, Da, Yr, Dayr_mo);

	call encode_clock_value_ (Mo, Da, Yr, 0, 0, 0, 0, 0, (""), clk, ec);
	call decode_clock (clk);
	Dayr_mo = day_of_year;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$last_midnight (clock);

   clock (fixed bin (71))   is the clock reading at midnight before "now" */

last_midnight:
     entry (Clock);

	call find_midnight (clock ());
	Clock = clk;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$this_midnight (clock);

   clock (fixed bin (71)) is the clock reading as it will be at midnight tonight (output) */

this_midnight:
     entry (Clock);

	call find_midnight (clock ());
	Clock = clk + 86400000000;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$preceding_midnight (oldclock, clock);

   oldclock (fixed bin (71))    is a calendar clock reading (input)
   clock (fixed bin (71))       is a clock reading for midnight of the preceding day (output) */

preceding_midnight:
     entry (Oldclock, Clock);

	call find_midnight (Oldclock);
	Clock = clk;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$following_midnight (oldclock, clock);

   oldclock (fixed bin (71)) is a calendar clock reading (input)
   clock (fixed bin (71))    is a clock reading for midnight of that day (output) */

following_midnight:
     entry (Oldclock, Clock);

	call find_midnight (Oldclock);
	Clock = clk + 86400000000;
	return;

/* ------------------------------------------------------- */

/* ENTRY:	datebin_$next_shift_change (oldclock, newclock, shift, newshift);
   clock (fixed bin (71))	given clock reading (input)
   newclock (fixed bin (71))	clock reading for next shift change (output)
   shift (fixed bin)	shift at oldclock (output)
   newshift (fixed bin)	shift at clock (output) */

next_shift_change:
     entry (Oldclock, Clock, Shift1, Shift2);

	Clock = 0;				/* in case of error */
	Shift1, Shift2 = -1;			/* ... */
	call decode_clock (Oldclock);
	call calc_shift;
	Shift1 = shift;
	if shift_from_whotab then do;
	     Clock = whotab.next_shift_change_time;
	     call datebin_$shift (whotab.next_shift_change_time, Shift2);
	     end;
	else do;
	     minute = minute - mod (minute, 30);
	     call encode_clock_value_ (month, day, year, hour, minute, (0), (0), (0), (""), save_clock, ec);
	     do while ((shift = Shift1) & (save_clock - Oldclock < 7 * 86400000000));
		call encode_clock_value_$offsets (save_clock, 0, 0, 0, 0, 30, 0, 0, 0, (""), clk, ec);
		call decode_clock (clk);
		call calc_shift;
	     end;
	     Clock = clk;
	     Shift2 = shift;
	     end;
	return;

/* ---------------------------------------- */

decode_clock:
     procedure (Clock);
dcl Clock fixed bin (71);

	save_clock = Clock;
	call decode_clock_value_$all (save_clock, month, day, year, hour, minute, second, microsecond, day_of_week,
	     (""), abs_date, day_of_year, ec);
     end decode_clock;

/* ---------------------------------------- */

calc_shift:
     procedure;
	call decode_clock_value_$all (save_clock, (0), (0), (0), sys_hour, sys_minute, (0), (0), sys_day_of_week,
	     (sys_info$time_zone), (0), (0), ec);

	if ec ^= 0 then return;

	if ip = null () then do;
	     call hcs_$initiate (sysdir, "installation_parms", "", 0, 1, ip, ec);

	     if ip = null () then do;
		call sub_err_ (ec, "datebin_", "c", null (), (0), "^a>installation_parms", sysdir);
		goto return_to_caller;
		end;
	     end;
	if whoptr = null () then do;
	     call hcs_$initiate (sysdir, "whotab", "", 0, 1, whoptr, ec);
	     if whoptr = null () then do;
		call sub_err_ (ec, "datebin_", "c", null (), (0), "^a>whotab", sysdir);
		goto return_to_caller;
		end;
	     end;

	if (save_clock >= whotab.last_shift_change_time) & (save_clock < whotab.next_shift_change_time) then do;
	     shift_from_whotab = "1"b;
	     shift = whotab.shift;
	     end;
	else do;
	     shift_from_whotab = "0"b;
	     shift =
		binary (installation_parms.shifttab (48 * sys_day_of_week + 2 * sys_hour + divide (sys_minute, 30, 17, 0) - 47),
		3);
	     end;
     end calc_shift;

/* ------------------------------------------------------- */

find_midnight:
     procedure (Clock);
dcl Clock fixed bin (71) parameter;

	call decode_clock (Clock);
	call encode_clock_value_ (month, day, year, 0, 0, 0, 0, 0, (""), clk, ec);
     end find_midnight;

/* ------------------------------------------------------- */

test_datebin:
     entry (test_sysdir);
dcl test_sysdir char (*);

	sysdir = test_sysdir;
	ip, whoptr = null ();
	return;

/* ---------------------------------------- */

%include installation_parms;
%include whotab;

     end datebin_;
