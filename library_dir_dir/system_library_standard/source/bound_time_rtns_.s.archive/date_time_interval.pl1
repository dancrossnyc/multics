/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

date_time_interval: dti: proc;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*							       */
/* Names: date_time_interval, dti                                            */
/*                                                                           */
/* SYNTAX AS A COMMAND:                                                      */
/*    dti {date1} date2 {-control_args}				       */
/*                                                                           */
/* SYNTAX AS AN ACTIVE FUNCTION:                                             */
/*    [dti {date1} date2 {-control_args}]                                    */
/*                                                                           */
/* FUNCTION:                                                                 */
/* returns  the difference  between 2  date values,  relative to the         */
/* first, in offset terms:                                                   */
/*   "0 yr 0 mo -2 da -6 hr 0 min -4.64 sec"                                 */
/* The user is  able to specify that the result  be only in terms of         */
/* certain units.                                                            */
/*                                                                           */
/* ARGUMENTS:                                                                */
/* date1                                                                     */
/*    is  the  beginning of  the  interval.  If  not  specified, the         */
/*    current time is used.                                                  */
/* date2                                                                     */
/*    is the  end of the interval.   If the end is  earlier than the         */
/*    beginning, all numbers will be preceeded by a minus sign.              */
/*                                                                           */
/* CONTROL ARGUMENTS:                                                        */
/* -brief, -bf                                                               */
/*    specifies that the units displayed  will be in the abbreviated         */
/*    form (Default).                                                        */
/* -fractional_digits {N}, -fd {N}                                           */
/*    specifies  the  maximum  number  of  fractional  digits  to be         */
/*    included on the smallest unit.  All trailing zeros are removed         */
/*    and then  the decimal point if  it is last.  N  may not exceed         */
/*    20.   Default is  2.  If  N is  not specified,  the maximum is         */
/*    used.                                                                  */
/* -zero_units, -zu                                                          */
/*    specifies that all units will be output even if their value is         */
/*    zero.                                                                  */
/*      Example:  "2 da 0 hr 0 min 4.2 sec"                                  */
/* -language X, -lang X                                                      */
/*    X  specifies  the  language  in  which  the  result  is  to be         */
/*    expressed.  This may  be in any of the  languages known to the         */
/*    date/time system.   If X is "system_lang",  the system default         */
/*    is  used.   If this  control argument  is not  given or  it is         */
/*    present with X being "", the per-process default is used.              */
/* -long, -lg                                                                */
/*    specifies   that   the  units   displayed   will  be   in  the         */
/*    singular/plural form.                                                  */
/* -no_zero_units, -nzu                                                      */
/*    specifies that any unit which has  a value of zero will not be         */
/*    included in the  output.  However, if all units  are zero, the         */
/*    smallest will be shown with the value of "0".  (Default)               */
/*      Example:  "2 da 4.2 sec"                                             */
/* -units STRs                                                               */
/*    specifies  that the  result is to  be expressed in  terms of a         */
/*    given  set of  units.  All  arguments following  -units on the         */
/*    command line are taken as the  set of units to use.  Therefore         */
/*    -units, if present, must be the last control argument present.         */
/*    The units may be entered in any language available on the site         */
/*    and  in any  order.  All units,  however, must be  in the same         */
/*    language.  These are the units which may be specified:                 */
/*          year month week day hour minute second microsecond               */
/*    The output will appear in the order shown in the list above.           */
/*                                                                           */
/* NOTES:                                                                    */
/* When no units have been specified, this set is used:                      */
/*    years months days hours minutes seconds                                */
/* A default result could look like this:                                    */
/*  "-2 da -6 hr -4.05 sec"                                                  */
/* But if the arguments given were:                                          */
/*   -fd -units hr min                                                       */
/* the same interval could be:                                               */
/*  -54hr -0.0676252166666666666666666666666666666666666666666666min         */
/*                                                                           */
/* Note  there is  a truncation in  the first instance  to 2 decimal         */
/* places with the corresponding loss of accuracy.                           */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Status:						       */
/* 1) 83-02-14 JFalksen	Created				       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-* */%page;
/**** Assume we were called as an active function.  Get ptr & length of our  */
/****  return argument, and count of our input arguments.		       */
      lang_l = 0;
      lang_p = addr (ME);		/* need to point somewhere for ""    */
      lang_ctl_arg = "-default-";
      fractional_digits = 2;
      string (sw) = "010"b;
      toa.flag (*) = UNUSED;
      flag_sw = ""b;

      call cu_$af_return_arg (arg_ct, ret_p, ret_l, code);
      if code = 0			/* if called as an active function,  */
      then do;
         command = "0"b;
         err = active_fnc_err_;
         get_arg = cu_$af_arg_ptr;
         ret = "";
      end;
      else if code = error_table_$not_act_fnc /* if called as a command,     */
      then do;
         command = "1"b;		/* indicate so		       */
         get_arg = cu_$arg_ptr;
         err = com_err_;
      end;
      else do;			/* WHAT ELSE IS THERE?!	       */
         command = "0"b;		/* if some unknown error occurs,     */
         err = active_fnc_err_;	/* ..report it to user as if we were */
         go to bad_call;		/* ..called as an active fnc	       */
      end;
      if arg_ct = 0			/* Report missing format_string in   */
      then do;			/* ..clock entry.		       */
no_arg:
         code = error_table_$noarg;
bad_call:
         call err (code, ME,
	  "^/Usage:^-date_time_interval {from-time} to-time {-ctl_args}");
         return;
      end; %page;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Process all arguments presented				       */
      result = "";
      smallest_unit, state, pos_ct, unit_ct = 0;
      do argno = 1 to arg_ct;
         call get_arg (argno, arg_p, arg_l, code);
         if (state = 1)
         then do;			/* -lang argument		       */
	  state = 0;
	  lang_p = arg_p;
	  lang_l = arg_l;
         end;
         else if (state = 2)
         then do;			/* -fractional_digits argument       */
	  state = 0;
	  if (index (arg, "-") = 1)
	  then goto an_arg;
	  if (verify (arg, " 0123456789") ^= 0)
	  then do;
	     call err (0, ME,
	        "Numeric value required. ^a ^a", last_arg, arg);
	     sw.error = "1"b;
	  end;
	  else do;
	     fractional_digits = convert (fractional_digits, arg);
	     if (fractional_digits > 20)
	     then do;
	        call err (0, ME,
		 "Value may not exceed 20. ^a ^a", last_arg, arg);
	        sw.error = "1"b;
	     end;
	  end;
         end;
         else if (state = 3)
         then do;			/* -units argument		       */
	  i = date_time_$get_time_info_index (arg, Offset_table);
	  if (i <= 0)
	  then do;
	     call err (0, ME, "Unknown offset name. ^a", arg);
	     sw.error = "1"b;
	  end;
	  else toa.flag (i) = INTEGER;
	  flag_sw = "1"b;
	  smallest_unit = max (i, smallest_unit);
	  unit_ct = unit_ct + 1;
         end;
         else if (index (arg, "-") = 1)
         then do;			/* it's a ctl_arg		       */
an_arg:
	  last_arg = arg;
	  if (arg = "-brief") | (arg = "-bf")
	  then sw.bf = "1"b;
	  else if (arg = "-fractional_digits") | (arg = "-fd")
	  then do;
	     state = 2;
	     fractional_digits = 20;	/* set default		       */
	  end;
	  else if (arg = "-language") | (arg = "-lang")
	  then do;
	     state = 1;
	     lang_ctl_arg = arg;
	  end;
	  else if (arg = "-long") | (arg = "-lg")
	  then sw.bf = ""b;
	  else if (arg = "-no_zero_units") | (arg = "-nzu")
	  then sw.izu = ""b;
	  else if (arg = "-units") | (arg = "-unit")
	  then state = 3;
	  else if (arg = "-zero_units") | (arg = "-zu")
	  then sw.izu = "1"b;
	  else do;
	     call err (error_table_$badopt, ME, "^a", arg);
	     sw.error = "1"b;
	  end;
         end;
         else do;			/* It must be a date argument	       */
	  if (pos_ct < dimension (pos_p, 1))
	  then do;		/* There are not too many dates      */
	     pos_ct = pos_ct + 1;
	     pos_p (pos_ct) = arg_p;
	     pos_l (pos_ct) = arg_l;
	  end;
	  else do;
	     call err (0, ME, "Invalid positional arg. ^a", arg);
	     sw.error = "1"b;
	  end;
         end;
      end;
      if (pos_ct = 0)
      then goto no_arg;
      if (pos_ct = 1)		/* Only 1 date given, let NOW be     */
      then do;			/* ..the start of interval.	       */
         pos_p (2) = pos_p (1);
         pos_l (2) = pos_l (1);
         pos_l (1) = 0;
      end;
      now_clock = clock();
      do argno = 1 to 2;
         arg_p = pos_p (argno);
         arg_l = pos_l (argno);
         call convert_date_to_binary_$relative (arg, cvalue (argno), now_clock, code);
         if (code ^= 0)
         then do;
	  call err (code, ME,
	     "^/^[from^;to^]-time value: ^a", argno, arg);
	  sw.error = "1"b;
         end;
      end;
      arg_p = lang_p;
      arg_l = lang_l;
      lang_index = date_time_$get_time_info_index (arg, Language_table);
				/* defaulting is taken care of       */
      if (lang_index <= 0)
      then do;
         call err (0, ME, "Unknown time language. ^a ^a", lang_ctl_arg, arg);
         sw.error = "1"b;
      end;
      if (state ^= 0) & (state ^= 2)
      then do;			/* ended in the middle of something  */
         if (state = 1) | (unit_ct = 0)
         then do;			/* ..and more is necessary.	       */
	  call err (0, ME,
	     "Missing value for -^[lang^;^;units^] argument.",
	     state);
	  sw.error = "1"b;
         end;
      end;
      if sw.error
      then return;%page;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* All args are processed.  Ready to do what is needed.		       */
      if ^flag_sw
      then do;			/* No units specified, set defaults  */
         toa.flag (1) = INTEGER;
         toa.flag (2) = INTEGER;
         toa.flag (4) = INTEGER;
         toa.flag (5) = INTEGER;
         toa.flag (6) = INTEGER;
         toa.flag (7) = INTEGER;
         smallest_unit = 7;
      end;
/**** If the fraction is wanted, show it to from_clock_interval	       */
      if (fractional_digits > 0)
      then toa.flag (smallest_unit) = FRACTION;
      toa.version = Vtime_offset_2;

      call date_time_$from_clock_interval (cvalue (1), cvalue (2), addr (toa), code);
      if (code ^= 0)
      then do;
         call err (code, ME, "Call to date_time_$from_clock failed.");
         return;
      end;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* All that's left now is to format the result so people can understand it.  */
      result = "";
      do i = 1 to 8;		/* go thru all the units	       */
         if (toa.flag (i) ^= UNUSED)
         then do;			/* this is a wanted unit	       */
	  fld24 = toa.val (i);
/****       if this is a not-zero value OR they want zero values	       */
/****       OR this is the last one and nothing has happened yet...DO IT     */
	  if (fld24 ^= 0) | sw.izu
	     | (i = smallest_unit) & (result = "")
	  then do;
	     if (toa.flag (i) ^= INTEGER)
	        | (i = smallest_unit)
	     then fd = fractional_digits;
	     else fd = 0;
	     if (fld24 < 0)		/* first take care of the sign       */
	     then do;
	        fld24 = - fld24;
	        result = result || "-";
	     end;
	     fldpic = fld24 + rounder (fd);
	     result = result || ltrim (substr (fldpic, 1, 26+fd));
	     result = rtrim (result, "0");  /* drop any trailing SPs       */
	     result = rtrim (result, ".");  /* and then the "." if last    */
	     result = result || " ";
/****          Units may be in singular/plural or short form.	       */
	     if sw.bf
	     then result = result || ti_offset.short (lang_index, i);
	     else do;
	        if (abs (fld24) = 1)
	        then result = result || ti_offset.singular (lang_index, i);
	        else result = result || ti_offset.plural (lang_index, i);
	     end;
	     result = result || " ";
	  end;
         end;			
      end;
      result = rtrim (result);

/**** It's easy when all the hard work is being done elsewhere.	       */

      if command			/* print command's result	       */
      then call ioa_ ("^va", length (result), result);
      else ret = result;		/* return AFs result	       */
      return; %page;
dcl arg		char (arg_l) based (arg_p);
dcl arg_ct	fixed bin;
dcl arg_l		fixed bin (21);
dcl argno		fixed bin;
dcl arg_p		ptr;
dcl code		fixed bin (35);
dcl command	bit (1);
dcl cvalue	(2) fixed bin (71);
dcl err		entry automatic options (variable);
dcl error_table_$badopt fixed bin (35) ext static;
dcl error_table_$not_act_fnc fixed bin (35) ext static;
dcl error_table_$noarg fixed bin (35) ext static;
dcl fd		fixed bin;
dcl flag_sw	bit (1);
dcl fld24		float dec (24);
dcl fldpic	pic "(24)-9v.(24)9";
dcl fractional_digits fixed bin;
dcl get_arg	entry (fixed bin, ptr, fixed bin (21),
		fixed bin (35)) automatic;
dcl i		fixed bin;
dcl lang_index	fixed bin;
dcl lang_ctl_arg	char (16);
dcl lang_l	fixed bin;
dcl lang_p	ptr;
dcl last_arg	char (32);
dcl ME		char (18) int static init ("date_time_interval");
dcl now_clock	fixed bin (71);
dcl pos_ct	fixed bin;	/* number of positional args	       */
dcl pos_l		(2) fixed bin;
dcl pos_p		(2) ptr;
dcl result	char (1024) var;
dcl ret		char (ret_l) var based (ret_p);
dcl ret_l		fixed bin (21);
dcl ret_p		ptr;
dcl rounder	(0:20) float dec (24) int static options (constant) init (
		.0,
		.05,
		.005,
		.0005,
		.00005,
		.000005,
		.0000005,
		.00000005,
		.000000005,
		.0000000005,
		.00000000005,
		.000000000005,
		.0000000000005,
		.00000000000005,
		.000000000000005,
		.0000000000000005,
		.00000000000000005,
		.000000000000000005,
		.0000000000000000005,
		.00000000000000000005,
		.000000000000000000005);

dcl smallest_unit	fixed bin;
dcl state		fixed bin;
dcl unit_ct	fixed bin;


dcl 1 sw,
      2 error	bit (1),
      2 bf	bit (1),
      2 izu	bit (1);


dcl active_fnc_err_ entry options (variable);
dcl com_err_	entry () options (variable);
dcl convert_date_to_binary_$relative
		entry (char (*), fixed bin (71), fixed bin (71),
		fixed bin (35));
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl date_time_$from_clock_interval
		entry (fixed bin (71), fixed bin (71), ptr, fixed bin (35));
dcl date_time_$get_time_info_index
		entry (char (*), fixed bin) returns (fixed bin);
dcl ioa_		entry () options (variable);

dcl 1 toa		like time_offset_array;
dcl (abs, addr, clock, convert, dimension, index, length, ltrim,
     max, rtrim, string, substr, verify
    )		builtin;

%include time_names;
%include time_info_search;
%include time_offset;
   end date_time_interval;
