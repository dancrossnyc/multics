/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

dsti: display_time_info: proc;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*							       */
/* Names: display_time_info, dsti                                            */
/*                                                                           */
/* SYNTAX AS A COMMAND:                                                      */
/*     dsti -control_args                                                    */
/*                                                                           */
/* FUNCTION:                                                                 */
/* This command displays information selected from time_info_.               */
/*                                                                           */
/* CONTROL ARGUMENTS:                                                        */
/* -all, -a                                                                  */
/*    specifies all data are to be printed.                                  */
/* -day                                                                      */
/*    asks for a list of all the day names.                                  */
/* -format, -fmt                                                             */
/*    asks for  a list of all  the named formats known  on the site.         */
/*    These  are names  which may  be given  to date_time_$format in         */
/*    place  of  an  explicit  format string.   This  list  does not         */
/*    include  "date",  "date_time",  and  "time"  as  they  are not         */
/*    contained in time_info_.  Use print_time_defaults to see them.         */
/* -language, -lang                                                          */
/*    asks for a  list of all the time  languages available, showing         */
/*    the name of  each language IN each language.   This form would         */
/*    usually be used alone to enable a person to see what languages         */
/*    she can refer to.                                                      */
/* -language X, -lang X                                                      */
/*    asks for the output to be given in language X.  The default is         */
/*    to show requested data in the process default language.                */
/* -map                                                                      */
/*    asks for  a time zone map  of the world, with  all the defined         */
/*    time  zones and  their offsets.   Each zone  is at  its proper         */
/*    place on  this map.  The map  is horizontally broken according         */
/*    to the linelength currently in effect.                                 */
/* -month                                                                    */
/*    asks for a list of all the month names.                                */
/* -offset                                                                   */
/*    asks for all the offset words to be printed.                           */
/* -table X, -tb X                                                           */
/*    Specifies  the  pathname of  the table  to be  displayed.  The         */
/*    default is the reference name "time_info_".                            */
/* -token {X}                                                                */
/*    Displays  the structure  used for binary  searching the tokens         */
/*    declared  in  the table.   The display  shows all  words, with         */
/*    their meanings,  in all languages, grouped  by token.  A token         */
/*    is a  word converted to  lowercase.  If X is  given, then only         */
/*    the data for that token is  shown.  Since X represents a token         */
/*    and not a word, it must be entered in lowercase.                       */
/* -word                                                                     */
/*    asks for all of the miscellaneous words to be printed.                 */
/* -zone                                                                     */
/*    asks for a list of all the zones available.                            */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Status:						       */
/* 1) 83-02-01 JFalksen	Created				       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-* */


/****^  HISTORY COMMENTS:
  1) change(86-08-15,GDixon), approve(86-09-04,MCR7532),
     audit(86-09-05,Martinson), install(86-09-16,MR12.0-1159):
     Add support for zone GMT+13 (New Zealand Daylight Time) to dsti -map.
     (phx18881)
                                                   END HISTORY COMMENTS */


%page;
      string (sw) = ""b;
      time_info, code_ext, lang_token, token_token, zone_token = "";
      litem_p, zitem_p = null();
      token_index = 0;

/**** Assume we were called as an active function.  Get ptr to/length of our */
/****  return argument, and count of our input arguments.		       */
      call cu_$af_return_arg (arg_ct, ret_p, ret_l, code);
      if code = 0			/* if called as an active function,  */
      then do;
         command = "0"b;
         err = active_fnc_err_;
         get_arg = cu_$af_arg_ptr;
      end;
      else if code = error_table_$not_act_fnc /* if called as a command,     */
      then do;
         command = "1"b;		/* indicate so		       */
         get_arg = cu_$arg_ptr;
         err = com_err_;
      end;
      else do;			/* if some unknown error occurs,     */
         command = "0"b;		/* ..report it to user as if we were */
         err = active_fnc_err_;	/* ..called as an active fnc	       */
         goto bad_call;
      end;
      if (arg_ct = 0)
      then do;
         code = error_table_$noarg;
         code_ext = "
Usage:	dsti -control_args";
         goto bad_call;
      end; %page;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Process all the args given.				       */

      do arg_no = 1 to arg_ct;
         call get_arg (arg_no, arg_p, arg_l, code);
         if (arg = "-all") | (arg = "-a")
         then sw.all = "1"b;
         else if (arg = "-day")
	       | (arg = "-da") | (arg = "-days") /* (just to be friendly)       */
         then sw.day = "1"b;
         else if (arg = "-format") | (arg = "-fmt")
         then sw.format = "1"b;
         else if (arg = "-language") | (arg = "-lang")
         then do;
	  if (arg_no < arg_ct)
	  then do;
	     call get_arg (arg_no + 1, arg_p, arg_l, code);
	     if (index (arg, "-") ^= 1)
	     then do;
	        lang_token = arg;
	        arg_no = arg_no + 1;
	     end;
	     else sw.lang = "1"b;
	  end;
	  else sw.lang = "1"b;
         end;
         else if (arg = "-map")
         then sw.map = "1"b;
         else if (arg = "-month")
         then sw.month = "1"b;
         else if (arg = "-offset")
         then sw.offset = "1"b;
         else if (arg = "-table") | (arg = "-tb")
         then do;
	  if (arg_no < arg_ct)
	  then do;
	     call get_arg (arg_no + 1, arg_p, arg_l, code);
	     if (index (arg, "-") ^= 1)
	     then do;
	        time_info = arg || "|";
	        arg_no = arg_no + 1;
	     end;
	     else goto no_table;
	  end;
	  if (time_info = "|")
	  then do;
no_table:
	     call com_err_ (0, me, "Missing value for -table argument.");
	     sw.err = "1"b;
	  end;
         end;
         else if (arg = "-token")
         then do;
	  sw.token = "1"b;
	  if (arg_no < arg_ct)
	  then do;
	     call get_arg (arg_no + 1, arg_p, arg_l, code);
	     if (index (arg, "-") ^= 1)
	     then do;
	        token_token = arg;
	        arg_no = arg_no + 1;
	     end;
	  end;
         end;
         else if (arg = "-word") | (arg = "-words")
         then sw.word = "1"b;
         else if (arg = "-zone") | (arg = "-zones")
         then do;
	  sw.zone = "1"b;
	  if (arg_no < arg_ct)
	  then do;
	     call get_arg (arg_no + 1, arg_p, arg_l, code);
	     if (index (arg, "-") ^= 1)
	     then do;
	        zone_token = arg;
	        arg_no = arg_no + 1;
	     end;
	  end;
         end;
         else do;
	  if (index (arg, "-") ^= 1)
	  then code = error_table_$bad_arg;
	  else code = error_table_$badopt;
	  call com_err_ (code, me, "^a", arg);
	  sw.err = "1"b;
         end;
      end;
      if sw.token
      then if (substr (string (sw), 3) ^= ""b)
      then do;
         call com_err_ (0, me, "No other control args allowed with -token.");
         return;
      end;
      if sw.err
      then return; %page;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Get pointers to all the things we need.			       */
      if (time_info = "")
      then do;			/* supply table default	       */
         time_info = "time_info_$";
      end;

      v_e = cv_entry_ (time_info || "version", null(), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^aversion", time_info);
         return;
      end;
      v_p = codeptr (v_e);
      if (v_p -> ch8 ^= Vtime_info_2)
      then do;
         code = error_table_$unimplemented_version;
         code_ext = time_info || "version";
         goto bad_call;
      end;
      v_e = cv_entry_ (time_info || "default_language_index", null (), code);
      if (code ^= 0)
      then do;
         code_ext = time_info || "default_language_index";
         goto bad_call;
      end;
      dl_p = codeptr (v_e);
      default_lang = dl_p -> fb;
      v_e = cv_entry_ (time_info || "date_time_keywords", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^adate_time_keywords", time_info);
         sw.err = "1"b;
      end;
      dtk_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "language_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^alanguage_names", time_info);
         sw.err = "1"b;
      end;
      l_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "zone_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^azone_names", time_info);
         sw.err = "1"b;
      end;
      zn_p = codeptr (v_e);
      lang_ct = zn_p -> ti_zone.number_lang;
      zone_ct = zn_p -> ti_zone.number_zone;
      v_e = cv_entry_ (time_info || "month_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^amonth_names", time_info);
         sw.err = "1"b;
      end;
      m_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "day_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^aday_names", time_info);
         sw.err = "1"b;
      end;
      d_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "offset_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^aoffset_names", time_info);
         sw.err = "1"b;
      end;
      o_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "word_names", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^aword_names", time_info);
         sw.err = "1"b;
      end;
      w_p = codeptr (v_e);
      v_e = cv_entry_ (time_info || "tokens", null (), code);
      if (code ^= 0)
      then do;
         call com_err_ (code, me, "^atokens", time_info);
         sw.err = "1"b;
      end;
      ti_token_p = codeptr (v_e);
      if (token_token ^= "")
      then do;
         call search (token_token);	/* look for token		       */
         token_index = cur_token;
      end;
      if (lang_token = "")
      then lang_token = time_defaults_$language;
      call search (lang_token);	/* look for language name	       */
      item_p = addrel (v_p, ti_token.list_r (cur_token));
      if (item.table (1) ^= Language_table)
      then do;
         call com_err_ (0, me, "^a is not a language in time_info_.",
	  lang_token);
         sw.err = "1"b;
      end;
      litem_p = item_p;
      if (zone_token ^= "")
      then do;
         call search (zone_token);	/* look for zone name	       */
         item_p = addrel (v_p, ti_token.list_r (cur_token));
         if (item.table (1) ^= Zone_table)
         then do;
	  call com_err_ (0, me, "^a is not a zone in time_info_.",
	     zone_token);
	  sw.err = "1"b;
         end;
         zitem_p = item_p;
      end;
      if sw.err
      then return; %page;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
main:
      begin;

         if ^sw.token
         then do;			/* not doing the token option.       */
	  if (litem_p ^= null())	/* A language name was given	       */
	  then lb, hb = litem_p -> item.element (1);
	  else do;
	     lb = 1;		/* process 'em all		       */
	     hb = lang_ct;
	  end;
display:
	  do lang = lb to hb;
	     call ioa_ ("^a-----", l_p -> ti_language.name (lang, lang));
	     if sw.format | sw.all
	     then do;
	        call ioa_ (" Named format strings");
	        do element = 1 to dtk_p -> ti_keyword.number_kwd;
		 call ioa_ ("^24a ""^va""^[^/^]",
		    dtk_p -> ti_keyword.e.name (element),
		    length (dtk_p -> ti_keyword.e.str (element)),
		    dtk_p -> ti_keyword.e.str (element), (element=3));
	        end;
	     end;
	     if sw.lang | sw.all
	     then do;
	        call ioa_ (" Language name");
	        do element = 1 to lang_ct;
		 call ioa_ ("^6i: ^a", element,
		    fetch (Language_table, lang, element, 0));
	        end;
	     end;
	     if sw.month | sw.all
	     then do;
	        call ioa_ (" Month name (long, short)");
	        do element = 1 to 12;
		 call ioa_ ("^6i: ^a", element,
		    fetch (Month_table, lang, element, 0));
	        end;
	     end;
	     if sw.day | sw.all
	     then do;
	        call ioa_ (" Day name (long, short)");
	        do element = 1 to 7;
		 call ioa_ ("^6i: ^a", element,
		    fetch (Day_table, lang, element, 0));
	        end;
	     end;
	     if sw.offset | sw.all
	     then do;
	        call ioa_ (" Offset(""this"",singular,plural,short)");
	        do element = 1 to hbound (o_p -> ti_offset.e, 2);
		 call ioa_ ("^6i: ^a", element,
		    fetch (Offset_table, lang, element, 0));
	        end;
	     end;
	     if sw.word | sw.all
	     then do;
	        call ioa_ (" Other words");
	        do element = 1 to hbound (w_p -> ti_word.word, 2);
		 call ioa_ ("^6i: ^a", element,
		    fetch (Word_table, lang, element, 0));
	        end;
	     end;
	     if sw.map
	     then call print_time_zones;
	     if sw.zone | sw.all
	     then do;
	        if (zitem_p ^= null())/* A zone name was given, process it */
	        then lb, hb = zitem_p -> item.element (1);  /* ..only */
	        else do;
		 lb = 1;		/* process all the zones	       */
		 hb = zone_ct;
	        end;
	        call ioa_ (" Zone info(short,offset,long)");
	        do element = lb to hb;
		 call ioa_ ("^6i: ^a", element,
		    fetch (Zone_table, lang, element, 0));
	        end;
	     end;
	  end display;
         end;
         else do;			/* -token option		       */
	  if (litem_p ^= null())	/* A language name was given	       */
	  then lang = litem_p -> item.element (1);
	  else lang = default_lang;   /* use process default	       */
	  
	  if (token_index > 0)
	  then lb, hb = token_index;	/* one was singled out	       */
	  else do;
	     lb = 1;		/* do 'em all		       */
	     hb = ti_token.count;
	  end;
show_token:
	  do cur_token = lb to hb;
	     item_p = addrel (v_p, ti_token.list_r (cur_token));
	     call ioa_ ("Token(^3i): ""^a""^[ (ambiguous)^]", cur_token,
	        ti_token.symbol (cur_token), (item.count > 1));
/**** 	     Go thru all items (usually only one).		       */
	     do it = 1 to item.count;
/****	        Get the number of items			       */
	        itn = item.element (it);
/****	        Get the kind of table the item is for		       */
	        tabl = item.table (it);
	        if (tabl = Day_table)
	        then tname = d_p -> ti_day.long (lang, itn);
	        else if (tabl = Language_table)
	        then tname = l_p -> ti_language.name (lang, itn);
	        else if (tabl = Month_table)
	        then tname = m_p -> ti_month.long (lang, itn);
	        else if (tabl = Offset_table)
	        then tname = o_p -> ti_offset.singular (lang, itn);
	        else if (tabl = Word_table)
	        then tname = w_p -> ti_word.word (lang, itn);
	        else if (tabl = Zone_table)
	        then tname = zn_p -> ti_zone.short (lang, itn);
	        else if (tabl = This_table)
	        then tname = o_p -> ti_offset.this (lang, itn) || " ["
		 || o_p -> ti_offset.singular (lang, itn) || "]";
	        else call com_err_ (0, me,
		 "item.table(^i) =^b", it, tabl);

	        first_sw = "1"b;
	        do li = 1 to lang_ct;
		 if (substr (item.in_lang (it), li, 1))
		 then do;
		    call ioa_ ("^[^s  ^a:^;  ^vx ^s^] ^a",
		       first_sw, length (tname), tname,
		       fetch (tabl, li, itn, lang));
		    first_sw = ""b;
		 end;
	        end;
	     end;
	  end show_token;
         end;
      end main;
      return;

bad_call:
      call err (code, me, "^a", code_ext);
exit:
      return; %page;
/* * * * * * * * * * * * * * * * * * *+* * * * * * * * * * * * * * * * * * * */
/* Given a table, language, element, and display-language, this proc returns */
/* a representation of the words which the combination represents, i.e.      */
/*	(Day_table, german, Tue, french)  gives			       */
/* 	Dienstag, Dns, aliases (allemand)			       */
/*	(Month_table, french, Nov, 0)  gives			       */
/* 	novembre, nov, aliases				       */
/* In either case, aliases (NYA) are present if any exist		       */
/* * * * * * * * * * * * * * * * * * *+* * * * * * * * * * * * * * * * * * * */
fetch: proc (table, lang, element, show_lang) returns (char (1024)var);

dcl (table	fixed bin,	/* which table to reference	       */
    lang		fixed bin,	/* which language to show	       */
    element	fixed bin,	/* which element in table	       */
    show_lang	fixed bin		/* what language we're speaking      */
    )		parm;

dcl result	char(1024)var;

      result = "";
      goto type (table);

type (1):				/* Day_table		       */
      result = result || d_p -> ti_day.long (lang, element);
      result = result || ", ";
      result = result || d_p -> ti_day.short (lang, element);
/**** Aliases handled here					       */
      goto finished;

type (2):				/* Language_table		       */
      result = result || l_p -> ti_language.name (lang, element);
/**** Aliases handled here					       */
      goto finished;

type (3):				/* Month_table		       */
      result = result || m_p -> ti_month.long (lang, element);
      result = result || ", ";
      result = result || m_p -> ti_month.short (lang, element);
/**** Aliases handled here					       */
      goto finished;

type (4):				/* Offset_table		       */
      result = result || o_p -> ti_offset.this (lang, element);
      result = result || " ";
      result = result || o_p -> ti_offset.singular (lang, element);
      result = result || ", ";
      result = result || o_p -> ti_offset.plural (lang, element);
      result = result || ", ";
      result = result || o_p -> ti_offset.short (lang, element);
/**** Aliases handled here					       */
      goto finished;

type (5):				/* Word_table		       */
      result = result || w_p -> ti_word.word (lang, element);
/**** Aliases handled here					       */
      if (w_p -> ti_word.short (lang, element) ^= "")
      & (w_p -> ti_word.short (lang, element) ^= "?")
      then do;
         result = result || ", ";
         result = result || w_p -> ti_word.short (lang, element);
      end;
      goto finished;

type (6):				/* Zone_table		       */
				/* convert Usec to hr	       */

				/* value stored is the opposite of   */
				/* ..that displayed, so negate it    */
      result = result || char (zn_p -> ti_zone.short (lang, element), 5);
      result = result || " ";
      result = result || zone_dif (zn_p -> ti_zone.delta (lang, element));
      result = result || "  ";
      result = result || zn_p -> ti_zone.long (lang, element);
/**** Aliases handled here					       */
      goto finished;

zone_dif: proc (td) returns (char (5));
dcl td		fixed bin (71);

dcl time		fixed bin (71);
dcl 1 result,
      2 s		char (1),
      2 (HH,MM)	pic "99";

	time = td;
	s = "-";			/* values stored in table have       */
	if (time < 0)		/* ..opposite sign from the way it   */
	then do;			/* ..is displayed.		       */
	   s = "+";
	   time = -time;
	end;
	HH, i = divide (time, 3600000000, 17, 0);
	time = time - i*3600000000;
	MM = divide (time, 60000000, 17, 0);
	return (string (result));
       end zone_dif;

type (7):				/* This_table (part of offset table) */
      result = result || o_p -> ti_offset.this (lang, element);
      result = result || " [";
      result = result || o_p -> ti_offset.singular (lang, element);
      result = result || "]";
/**** Aliases handled here					       */
      goto finished;

finished:
      if (show_lang > 0)
      then do;
         result = result || " (";
         result = result || l_p -> ti_language.name (show_lang, lang);
         result = result || ")";
      end;

      return (result);

   end fetch; %page;
search: proc (symbol);

dcl symbol	char (*);

dcl sym		char (32);
dcl (az		init ("abcdefghijklmnopqrstuvwxyz"),
    AZ		init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
		char (26) int static options (constant);

      sym = translate (symbol, az, AZ); /* get to normal form	       */

      lb = 1;			/* binary search for it	       */
      hb = ti_token.count;
      do while (lb <= hb);
         cur_token = divide (lb + hb, 2, 17, 0);
         if (ti_token.symbol (cur_token) = sym)
         then return;		/* SUCCESS		       */
         if (ti_token.symbol (cur_token) < sym)
         then lb = cur_token + 1;
         else hb = cur_token - 1;
      end;
      call com_err_ (0, me, "Token not found in ^a. ^a",
         rtrim (time_info, "$|"), sym);
      goto exit;
   end search;%page;
print_time_zones: proc;		/* zn_p -> ti_zone (lang,*)    */

dcl first_hour	pic "ss9";
dcl first_minute	pic "99";
dcl get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl hour		pic "ss9";
dcl j		fixed bin;
dcl l		fixed bin;
dcl last_hour	pic "ss9";
dcl line		char (132);
dcl Lline		fixed bin;
dcl minute	pic "99";
dcl MLline	fixed bin;
dcl Nzones_per_line fixed bin;
dcl Saligned_left	bit (1) aligned;
dcl template_line	char (133) int static options (constant) init ((19)"|      ");
dcl temp_hour	pic "ss9";
dcl zone_str	char (48) var;

      call ioa_ ("^/known time zones:");

      MLline = get_line_length_$switch (null (), code);
      Nzones_per_line = divide (MLline - 1, 7, 35, 0);
      Lline = 1 + 7 * Nzones_per_line;
      element = 1;
      do while (element <= zone_ct);
         Saligned_left = "1"b;
         call hhmm (zn_p -> ti_zone.delta (lang, element),
	  first_hour, first_minute);
         last_hour = first_hour + Nzones_per_line - 1;
         if last_hour > 13
         then do;
	  Nzones_per_line = 13 - first_hour + 1;
	  Lline = 1 + 7 * Nzones_per_line;
	  last_hour = 13;
         end;
         hour = first_hour;
         minute = first_minute;
         do while (hour <= last_hour);
	  line = substr (template_line, 1, Lline);
	  i = (hour - first_hour) * 7 + 2;
	  j = divide (minute, 10, 1, 0);
	  if hour < 0
	  then if j = 0
	       then ;
	       else i = i - (j + 1);
	  else i = i + j;
	  l = 9 + length (zn_p -> ti_zone.short (lang, element))
	     + length (zn_p -> ti_zone.long (lang, element));
	  if Saligned_left
	  then if (i - 1) + l > MLline
	       then if hour > first_hour
		  then do;
		     Saligned_left = "0"b;
		     temp_hour = first_hour;
		     call ioa_ ("^a", line);
		     do j = 2 to Lline by 7 while (temp_hour <= 13);
		        substr (line, j, 6) = temp_hour || ":00";
		        temp_hour = temp_hour + 1;
		     end;
		     call ioa_ ("^a", line);
		     line = substr (template_line, 1, Lline);
		     if i - l + 4 >= 0
		     then call ioa_ ("^a", line);
		  end;
	  if Saligned_left
	  then do;
	     zone_str = hour;
	     zone_str = zone_str || ":";
	     zone_str = zone_str || minute;
	     zone_str = zone_str || "  ";
	     zone_str = zone_str || zn_p -> ti_zone.short (lang, element);
	     zone_str = zone_str || " ";
	     zone_str = zone_str || zn_p -> ti_zone.long (lang, element);
	     substr (line, i) = zone_str;
	  end;
	  else if i - l + 4 < 0
	  then goto END_LOOP;
	  else do;
	     zone_str = " ";
	     zone_str = zone_str || zn_p -> ti_zone.long (lang, element);
	     zone_str = zone_str || " ";
	     zone_str = zone_str || zn_p -> ti_zone.short (lang, element);
	     zone_str = zone_str || "  ";
	     zone_str = zone_str || hour;
	     zone_str = zone_str || ":";
	     zone_str = zone_str || minute;
	     substr (line, 1, i - l + 4) = "";
	     substr (line, i - l + 5, l + 1) = zone_str;
	  end;
	  call ioa_ ("^a", line);
	  element = element + 1;
	  if element <= zn_p -> ti_zone.number_zone
	  then call hhmm (zn_p -> ti_zone.delta (lang, element), hour, minute);
	  else hour = 99;
         end;
END_LOOP:
         if Saligned_left
         then do;
	  temp_hour = first_hour;
	  line = substr (template_line, 1, Lline);
	  call ioa_ ("^a", line);
	  do j = 2 to Lline by 7 while (temp_hour <= 13);
	     substr (line, j, 6) = temp_hour || ":00";
	     temp_hour = temp_hour + 1;
	  end;
	  call ioa_ ("^a^/", line);
         end;
         else call ioa_ ("");
      end;
      return;

hhmm: proc (delta, hour, minute);

dcl delta		fixed bin (71),
    hour		pic "ss9",
    minute	pic "99";

dcl time		fixed dec (12),
    minutes	fixed dec (11),
    hours		fixed dec (2);

      time = delta * -1;
      hours = divide (time, 3600000000, 2, 0);
      minutes = time - hours * 3600000000;
      minute = divide (minutes, 60000000, 2, 0);
      hour = hours;

   end hhmm;
   end print_time_zones; %skip (5);
dcl (v_p, dl_p, dtk_p, l_p, zn_p, m_p, d_p, o_p, w_p)
		ptr;
dcl active_fnc_err_ entry options (variable);
dcl arg		char (arg_l) based (arg_p);
dcl arg_ct	fixed bin;
dcl arg_l		fixed bin (21);
dcl arg_no	fixed bin;
dcl arg_p		ptr;
dcl ch8		char (8) based;
dcl code		fixed bin (35);
dcl code_ext	char (100) var;
dcl com_err_	entry () options (variable);
dcl command	bit (1);
dcl cur_token	fixed bin;
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cv_entry_	entry (char(*), ptr, fixed bin(35)) returns(entry);
dcl default_lang	fixed bin;
dcl element	fixed bin;
dcl err		entry () options (variable) automatic;
dcl error_table_$bad_arg fixed bin (35) ext static;
dcl error_table_$badopt fixed bin (35) ext static;
dcl error_table_$noarg fixed bin (35) ext static;
dcl error_table_$not_act_fnc fixed bin (35) ext static;
dcl error_table_$unimplemented_version fixed bin (35) ext static;
dcl fb		fixed bin based;
dcl first_sw	bit (1);
dcl get_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35))
		automatic;
dcl hb		fixed bin;
dcl i		fixed bin;
dcl ioa_		entry () options (variable);
dcl it		fixed bin;
dcl itn		fixed bin;
dcl lang		fixed bin;
dcl lang_ct	fixed bin;
dcl lang_token	char (32);
dcl lb		fixed bin;
dcl li		fixed bin;
dcl litem_p	ptr;		/* -> item assoc with -lang arg      */
dcl me		char (17) int static options (constant)
		init ("display_time_info");
dcl ret_l		fixed bin (21);
dcl ret_p		ptr;
dcl tabl		fixed bin;
dcl time_info	char (170) var;
dcl tname		char (64)var;
dcl token_index	fixed bin;
dcl token_token	char (32);
dcl v_e		entry automatic;
dcl zitem_p	ptr;		/* -> item assoc with -zone arg      */
dcl zone_ct	fixed bin;
dcl zone_token	char (32);

dcl (addr, addrel, char, codeptr, divide, hbound, index, length, null, rtrim,
     string, substr, translate
    )		builtin;


dcl 1 sw,
      2 err	bit (1),		/*     *** ERROR has occurred ***    */
      2 token	bit (1),		/* break out all token data (2 ways) */
      2 all	bit (1),		/* show everything		       */
      2 format	bit (1),		/*  named format strings	       */
      2 day	bit (1),		/*  day data		       */
      2 month	bit (1),		/*  month data		       */
      2 offset	bit (1),		/*  offset data		       */
      2 word	bit (1),		/*  word data		       */
      2 zone	bit (1),		/*  zone list (2 ways)	       */
      2 map	bit (1),		/*  world zone map		       */
      2 lang	bit (1);		/*  language data (2 ways)	       */

%include time_info_search;
%include time_names;
%include time_defaults_;

   end display_time_info;
