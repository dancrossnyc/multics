/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          dm_set_journal_stamps - a rather drastic way to force held pages to
     disk.  this sets the time stamp of all before image journals registered
     in ring zero to the time of invocation of this command, insuring that
     page control will write them out to disk at claim_mod_core time.

          THIS BYPASSES THE CONVENTIONS OF DATA MANAGEMENT PAGE PHASING.  IT
     IS TO BE USED IN THE EVENT OF AN EMERGENCY ONLY.  IN THE EVENT OF AN ESD
     FAILURE BEFORE JOURNAL TIME STAMPS ARE RESTORED, DATA BASES WILL BE LEFT
     IN UNKNOWN STATES.

*/

/*
HISTORY:
     
Written by Mike Pandolf, 08/01/83.
Modified:
09/14/83 by Lee A. Newcomb:  removed name sjs; concensus of author and 
	  myself is the command is too privileged to have a short name.
11/12/84 by Lindsey L. Spratt:  Changed name from set_journal_stamps to
            dm_set_journal_stamps.  Standardized format.  Removed all
            arguments, the command now only sets the journal stamps to be the
            current time.  Removed the ability to set the stamps directly,
            i.e.  without going through hc_dm_util$set_journal_stamp.  Changed
            to call dm_misc_util_$set_journal_stamps instead of
            dm_admin_gate_$set_journal_stamps.
04/11/85 by Lee A. Newcomb:  Fixed to call dm_admin_util_$set_journal_stamps,
            not dm_misc_=$=.
*/

/* format: style2,ind3 */
%page;
dm_set_journal_stamps:
   procedure () options (variable);


/* DECLARATIONS */

/* Automatic */

      dcl	    nargs		       fixed bin;
      dcl	    code		       fixed bin (35);

/* Based */
/* Constant */

      dcl	    MYNAME	       char (32) internal static options (constant) init ("dm_set_journal_stamps");

/* External */

      dcl	    error_table_$too_many_args
			       fixed bin (35) ext static;

/* Entry */

      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    dm_admin_util_$set_journal_stamps
			       entry (fixed bin (71), fixed bin (35));
      dcl	    com_err_	       entry () options (variable);

/* Builtin */

      dcl	    clock		       builtin;

/* END OF DECLARATIONS */
%page;
      call cu_$arg_count (nargs, code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to get the count of arguments given to this command.", "");

      if nargs ^= 0
      then call ERROR_RETURN (error_table_$too_many_args, "^/This command does not accept any arguments.", "");

      call dm_admin_util_$set_journal_stamps (clock (), code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to set the journal stamps.", "");

MAIN_RETURN:
      return;



ERROR_RETURN:
   proc (er_p_code, er_p_msg, er_p_msg_arg);
      dcl	    er_p_code	       fixed bin (35) parameter;
      dcl	    er_p_msg	       char (*) parameter;
      dcl	    er_p_msg_arg	       char (*) parameter;

      call com_err_ (er_p_code, MYNAME, er_p_msg, er_p_msg_arg);
      goto MAIN_RETURN;
   end ERROR_RETURN;

   end dm_set_journal_stamps;
