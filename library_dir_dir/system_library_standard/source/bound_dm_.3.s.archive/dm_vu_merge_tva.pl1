/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

          This routine takes a typed_vector_array and creates a new 
     typed_vector_array using using the caller provided id_list.
     The extent of the new dimension_table will
     be p_number_of_dimensions. This argument may be used to create "null"
     entries at the end of the dimension_table for later use. If more
     dimension ids are suplied than the requested number_of_dimensions or
     the extent of the old dimension_table, the remaining dimension_ids are
     ignored.
*/

/* HISTORY:

Written by Matthew Pierret 05/06/82.
Modified:
09/23/82 by Matthew Pierret:  Changed to use id_list instead of *-extent
            p_dimension_id array.
12/20/84 by Lindsey L. Spratt:  Moved the proc stmt to standard location.
            Updated DESCRIPTION, standardized the HISTORY section.  Changed
            null_info complaint to use error_table_$null_info_ptr and to be
            specific about which pointer is null.  Added cleanup handler,
            ERROR_FINISH (which frees the tva), and ERROR_RETURN.  Updated the
            sub_err_ calling sequence.  Commented the use of the (nosubrg)
            prefix.  Fixed CHECK_VERSION proc to have the cv_ prefix on its
            variables.
*/

/* format: style2,ind3 */
dm_vu_merge_tva:
   proc (p_work_area_ptr, p_number_of_dimensions, p_id_list_ptr, p_input_typed_vector_array_ptr,
        p_output_typed_vector_array_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_number_of_dimensions fixed bin (17);
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_input_typed_vector_array_ptr
			       ptr;
      dcl	    p_output_typed_vector_array_ptr
			       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    accept_all_dimensions  bit (1) aligned init ("0"b);
      dcl	    dimension_idx	       fixed bin;
      dcl	    input_typed_vector_array_ptr
			       ptr;
      dcl	    work_area_ptr	       ptr;

/* Based */

/* Builtin */

      dcl	    (hbound, null, unspec) builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dm_vu_merge_tva") char (32) varying;

/* Entry */

      dcl	    dm_vector_util_$init_typed_vector_array
			       entry options (variable);
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    error_table_$null_info_ptr
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      typed_vector_array_ptr = null;
      p_code = 0;
      work_area_ptr = p_work_area_ptr;
      input_typed_vector_array_ptr = p_input_typed_vector_array_ptr;

      on cleanup call ERROR_FINISH ();

      if input_typed_vector_array_ptr = null | work_area_ptr = null
      then call sub_err_ (error_table_$null_info_ptr, myname, ACTION_CANT_RESTART, null, 0,
	      "^/A null value was provided for^[ the work_area_ptr^;^]^[ and also^;^]^[ the input_typed_vector_array_ptr^;^]."
	      , (work_area_ptr = null), (work_area_ptr = null & input_typed_vector_array_ptr = null),
	      (input_typed_vector_array_ptr = null));

      if p_id_list_ptr = null
      then accept_all_dimensions = "1"b;
      else
         do;
	  id_list_ptr = p_id_list_ptr;
	  call CHECK_VERSION ((id_list.version), (ID_LIST_VERSION_1), "id_list");
         end;

      call dm_vector_util_$init_typed_vector_array (work_area_ptr, 0, p_number_of_dimensions,
	 input_typed_vector_array_ptr -> typed_vector_array.maximum_dimension_name_length, typed_vector_array_ptr,
	 p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      unspec (typed_vector_array.dimension_table) = ""b;

/* The (nosubrg) prefix is used below to avoid a compiler bug in the 
subscriptrange check, when checking an assignment of a single array element
between different based versions of the same structure.
(The check assumes the two version must have the same bounds.)
*/

      if accept_all_dimensions
      then
         do dimension_idx = 1 to input_typed_vector_array_ptr -> typed_vector_array.number_of_dimensions;
(nosubrg):
	  typed_vector_array.dimension_table (dimension_idx) =
	       input_typed_vector_array_ptr -> typed_vector_array.dimension_table (dimension_idx);
         end;
      else
         do dimension_idx = 1 to hbound (id_list.id, 1)
	    while (dimension_idx <= input_typed_vector_array_ptr -> typed_vector_array.number_of_dimensions);
(nosubrg):
	  typed_vector_array.dimension_table (dimension_idx) =
	       input_typed_vector_array_ptr -> typed_vector_array.dimension_table (id_list.id (dimension_idx));
         end;

      p_output_typed_vector_array_ptr = typed_vector_array_ptr;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parm;
      call ERROR_FINISH ();
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;


ERROR_FINISH:
   proc ();
      if typed_vector_array_ptr ^= null
      then free typed_vector_array;
   end ERROR_FINISH;

%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include vu_typed_vector_array;
%page;
%include dm_id_list;

   end dm_vu_merge_tva;
