/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
dm_vu_free_tva:
   proc (p_work_area_ptr, p_typed_vector_array_ptr, p_code);

/* DESCRIPTION:

         This  module frees the storage associated with a typed_vector_array.
     It invokes dm_vu_$free_typed_vector to free the storage associated with  the
     individual typed_vectors.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 09/24/82.
Modified:
06/08/83 by Matthew Pierret:  Changed typed_vector loop to terminate at
            min (tva.number_of_vector_slots, tva.number_of_vectors).
            Previously it terminated at tva.number_of_vectors, and there
            was a case in which the array was a 0-extent array but
            tva.number_of_vectors was not equal to 0.
12/05/84 by Lindsey L. Spratt:  Declared dm_vector_util_$free_typed_vector.
01/10/85 by Lindsey L. Spratt:  Changed check_version to CHECK_VERSION, and
            add cv_ prefixes to its variables.  Fixed sub_err_ call to use
            ACTION_CANT_RESTART instead of "s".
01/23/85 by Lindsey L. Spratt:  dcled the min builtin.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    work_area_ptr	       ptr;

      dcl	    (vector_idx, dim_idx)  fixed bin;

/* Based */

      dcl	    based_bit_36_aligned   bit (36) aligned based;
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (min, null)	       builtin;

/* Constant */

      dcl	    myname	       init ("dm_vu_free_tva") char (32) varying internal static options (constant);

/* Entry */

      dcl	    dm_vector_util_$free_typed_vector
			       entry (ptr, ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      work_area_ptr = p_work_area_ptr;
      typed_vector_array_ptr = p_typed_vector_array_ptr;
      p_code = 0;

      call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");

      do vector_idx = 1 to min (typed_vector_array.number_of_vector_slots, typed_vector_array.number_of_vectors);
         call dm_vector_util_$free_typed_vector (p_work_area_ptr, typed_vector_array_ptr,
	    typed_vector_array.vector_slot (vector_idx), p_code);
         if p_code ^= 0
         then return;
      end;

      do dim_idx = 1 to typed_vector_array.number_of_dimensions;
         free typed_vector_array.dimension_table (dim_idx).descriptor_ptr -> based_bit_36_aligned in (work_area);
      end;

      free typed_vector_array in (work_area);
      p_typed_vector_array_ptr = null;

      return;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include vu_typed_vector_array;
%page;
%include vu_entry_dcls;
%page;
%include sub_err_flags;
   end dm_vu_free_tva;
