/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
    Utility routines for Data Management Support

        set_journal_stamp - set the time stamp of a journal for Page Control

        allocate_journal_index - get ring-2 Data Management a free journal index

        free_journal_index - free a previously allocated journal index

        check_activate - determine whether a synchronized segment of a given size
             can be activated.

        activate - note activation of a synchronized segment of a given size.

        deactivate - note deactivation of a synchronized segment of a given size.
        get_journal_stamp - return current value of bj stamp.

        get_max_held_per_journal - return dm_journal.max_held_per_journal.

        get_n_journals - return dm_journal.n_journals

        validate_bj_uid - check supplied BJ uid against dm_journal_seg_ bj uid.
*/

/*  HISTORY:
Written by J. Bongiovanni, 10/15/82.
Modified:
11/15/82 by J. Bongiovanni: to run in user-ring for testing
03/01/83 by Lee A. Newcomb: to preserve the journal index
	  value passed to the free_journal entry.
11/29/84 by Stanford S. Cox: MAIN: Chg to use parm prefix. ER: Added.
05/14/85 by R. Michael Tague: Added $get_journal_stamp,
            $get_max_held_per_journal, $get_n_journals, and $validate_bj_uid.
*/

/* format: style3 */
hc_dm_util_$set_journal_stamp:
     proc (p_journal_idx, p_time_stamp, p_code);

/*  Parameter  */

dcl	p_code		fixed bin (35) parameter;	/* Standard Error Code */
dcl	p_journal_idx	fixed bin parameter;	/* Journal Index */
dcl	p_time_stamp	fixed bin (71) parameter;	/* New time stamp */
dcl	p_uid		bit (36) aligned;		/* Ring-2 Unique ID for Journal */

/*  Automatic  */

dcl	code		fixed bin (35);
dcl	local_journal_idx	fixed bin;
dcl	journal_loop_idx	fixed bin;
dcl	local_time_stamp	fixed bin (71);
dcl	local_uid		bit (36) aligned;
dcl	time_stamp	fixed bin (71);
dcl	validated		bit (1) aligned;

/*  Static  */

dcl	END_OF_TIME	fixed bin (71) int static options (constant)
			init (1111111111111111111111111111111111111111111111111111b);

/*  External  */

dcl	error_table_$bad_arg
			fixed bin (35) external;
dcl	error_table_$invalid_dm_journal_index
			fixed bin (35) external;
dcl	error_table_$no_journals_free
			fixed bin (35) external;

/*  Entry  */

dcl	get_authorization_	entry returns (bit (72) aligned);

/*  Builtin  */

dcl	(addr, clock, divide)
			builtin;

/*  Condition  */
%page;
/*  SET_JOURNAL_STAMP - sets the time stamp for a specified journal  */

	local_journal_idx = p_journal_idx;
	local_time_stamp = p_time_stamp;
	p_code = 0;


	dm_journal_segp = addr (dm_journal_seg_$);
	dm_journal.set_stamp_calls = dm_journal.set_stamp_calls + 1;

	if (local_journal_idx <= 0) | (local_journal_idx > dm_journal.n_journals)
	then call ERROR_RETURN (error_table_$invalid_dm_journal_index);

	dm_per_journalp = addr (dm_journal.per_journal (local_journal_idx));
	if dm_per_journal.uid = ""b
	then call ERROR_RETURN (error_table_$invalid_dm_journal_index);

	dm_per_journal.time_stamp = local_time_stamp;

MAIN_RETURN:
	return;

%page;
/*  ALLOCATE_JOURNAL_INDEX - give ring-2 an unused journal index  */

allocate_journal_index:
     entry (p_uid, p_journal_idx, p_code);


	p_code = 0;

	dm_journal_segp = addr (dm_journal_seg_$);
	dm_journal.allocate_calls = dm_journal.allocate_calls + 1;

	if p_uid = ""b
	then call ERROR_RETURN (error_table_$bad_arg);

	local_uid = p_uid;

	journal_loop_idx = 0;
	code = 0;

	if dm_journal.n_journals <= dm_journal.n_journals_inuse
	then do;
		p_journal_idx = journal_loop_idx;
		call ERROR_RETURN (error_table_$no_journals_free);
	     end;

	do journal_loop_idx = 1 to n_journals;
	     dm_per_journalp = addr (dm_journal.per_journal (journal_loop_idx));
	     if dm_per_journal.uid = ""b
	     then do;
		     dm_journal.n_journals_inuse = dm_journal.n_journals_inuse + 1;
		     dm_per_journal.time_stamp = clock ();
		     dm_per_journal.access_class = get_authorization_ ();
		     dm_per_journal.uid = local_uid;
		     call RECOMPUTE_THRESH;
		     p_journal_idx = journal_loop_idx;
		     goto MAIN_RETURN;
		end;
	end;

	call ERROR_RETURN (error_table_$no_journals_free);
%page;
/* ************************************************************************
   * get_journal_stamp - Returns the value of the journal stamp for a     *
   * given dm_journal_seg_ index.  An access class check is performed	    *
   * before the information is returned.			    *
   ************************************************************************ */

get_journal_stamp:
     entry (p_journal_idx) returns (fixed bin (71));

	time_stamp = 0;

	dm_journal_segp = addr (dm_journal_seg_$);
	if (p_journal_idx > 0) & (p_journal_idx <= dm_journal.n_journals)
	then do;
		dm_per_journalp = addr (dm_journal.per_journal (p_journal_idx));
		if dm_per_journal.uid ^= ""b
		then time_stamp = dm_per_journal.time_stamp;
	     end;
	return (time_stamp);
%page;
/* ************************************************************************
   * get_max_held_per_journal - Return the value of		    *
   * dm_journal.max_held_per_journal from dm_journal_seg_.		    *
   ************************************************************************ */

get_max_held_per_journal:
     entry () returns (fixed bin);

	return (addr (dm_journal_seg_$) -> dm_journal.max_held_per_journal);
%page;
/* ************************************************************************
   * get_n_journals - Return the value of dm_journal.get_n_journals from  *
   * dm_journal_seg_.					    *
   ************************************************************************ */

get_n_journals:
     entry () returns (fixed bin);

	return (addr (dm_journal_seg_$) -> dm_journal.n_journals);
%page;
/* ************************************************************************
   * validate_bj_uid - Given a dm_journal_seg_ index and BJ uid, this	    *
   * entry returns true if the supplied uid matches the uid indexed in    *
   * the dm_journal_seg_ and the caller has authorization to know this.   *
   ************************************************************************ */

validate_bj_uid:
     entry (p_uid, p_journal_idx) returns (bit (1) aligned);

	validated = "0"b;

	dm_journal_segp = addr (dm_journal_seg_$);
	if (p_journal_idx > 0) & (p_journal_idx <= dm_journal.n_journals)
	then do;
		dm_per_journalp = addr (dm_journal.per_journal (p_journal_idx));
		if p_uid ^= ""b & p_uid = dm_per_journal.uid
		then validated = "1"b;
	     end;
	return (validated);
%page;
/*  FREE_JOURNAL_INDEX - frees a previously allocated journal index  */

free_journal_index:
     entry (p_journal_idx, p_code);



	p_code = 0;

	dm_journal_segp = addr (dm_journal_seg_$);
	dm_journal.free_calls = dm_journal.free_calls + 1;

	code = 0;


	local_journal_idx = p_journal_idx;

	if (local_journal_idx <= 0) | (local_journal_idx > dm_journal.n_journals)
	then call ERROR_RETURN (error_table_$invalid_dm_journal_index);

	dm_per_journalp = addr (dm_journal.per_journal (local_journal_idx));
	if dm_per_journal.access_class ^= get_authorization_ () | dm_per_journal.uid = ""b
	then call ERROR_RETURN (error_table_$invalid_dm_journal_index);

	dm_per_journal.time_stamp = END_OF_TIME;
	dm_per_journal.uid = ""b;
	dm_per_journal.access_class = ""b;


	dm_journal.n_journals_inuse = dm_journal.n_journals_inuse - 1;
	call RECOMPUTE_THRESH;
	goto MAIN_RETURN;
%page;
/*  RECOMPUTE_THRESH - Internal Procedure to recompute max held pages per
    journal, which is used by ring-2 Data Management to prevent flooding
    the system with held pages. */

RECOMPUTE_THRESH:
     proc;

	if dm_journal.n_journals_inuse = 0
	then dm_journal.max_held_per_journal = dm_journal.max_held_pages_mem;
	else dm_journal.max_held_per_journal = divide (dm_journal.max_held_pages_mem, dm_journal.n_journals_inuse, 17);

     end RECOMPUTE_THRESH;
%page;
ERROR_RETURN:
     proc (er_code);

dcl	er_code		fixed bin (35) parameter;

	p_code = er_code;
	goto MAIN_RETURN;
     end ERROR_RETURN;
%page;
%include dm_journal_seg_;

     end hc_dm_util_$set_journal_stamp;
