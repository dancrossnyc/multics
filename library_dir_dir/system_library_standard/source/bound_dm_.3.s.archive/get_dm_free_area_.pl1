/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
         This routine gets a pointer to the Data Management free area.
*/

/* HISTORY:
Written by Matthew Pierret, 02/23/83.
Modified:
03/29/83 by Lindsey Spratt:  Changed to create its own free area, rather than
	  reference dm_data_$area_ptr.  Added an entry, set, for setting the
	  dm_area_ptr to an arbitrary location.
04/05/83 by Lindsey L. Spratt:  Changed the $set entry to take two arguments,
            a directory pathname and an error code.  It creates a new segment
            in the specified directory and makes this the initial component of
            the dm_free_area.
12/07/84 by Matthew Pierret:  Moved main procedure statement to standard 
            location. Used local my_area_info instead of allocating one.
12/08/84 by Lindsey L. Spratt:  Fixed to my_area_info when setting
            internal_area_ptr, rather than area_info.
02/07/85 by Lindsey L. Spratt:  Changed the $set entry to take parameter
            specifying whether or not to release the old free area (if there
            is one), and removed the p_code argument.  Changed the area suffix
            to be gotten from the new internal proc GET_AREA_SUFFIX.  This is
            done in two places, the gap_area_info.owner value setting and the
            temp_area_entry name setting.  The new form of the is two
            components, the validation level followed by the value of
            AREA_NAME ("dm_free_area").  The setting of the area_ptr is now
            done by an internal proc, GET_AREA_PTR, which is used by both the
            main and $set entries.  $set is changed to use
            initiate_file_$create instead of hcs_$append_branchx and
            initiate_file_.  Error reporting is now done via ERROR_RETURN
            (which calls sub_err_), rather than via a "code" parameter.
*/

/* format: style2,ind3 */

get_dm_free_area_:
   proc () returns (ptr);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_temp_dir_path	       char (*) parm;
      dcl	    p_release_old_area     bit (1) aligned parm;
      dcl	    p_output_area_ptr      ptr parm;

/* Automatic */

      dcl	    seg_was_created	       bit (1) aligned init (NO);
      dcl	    temp_seg_ptr	       ptr init (null);
      dcl	    code		       fixed bin (35);
      dcl	    temp_area_dir	       char (256);
      dcl	    temp_area_entry	       char (64);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    AREA_NAME	       init ("dm_free_area") char (12) options (constant) internal static;
      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);
      dcl	    myname	       init ("get_dm_free_area_") char (32) varying internal static options (constant);

/* Entry */

      dcl	    absolute_pathname_     entry (char (*), char (*), fixed bin (35));
      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    define_area_	       entry (ptr, fixed bin (35));
      dcl	    hcs_$append_branch     entry (char (*), char (*), fixed bin (5), fixed bin (35));
      dcl	    initiate_file_$create  entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
			       fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));
      dcl	    release_area_	       entry (ptr);
      dcl	    sub_err_	       entry () options (variable);
      dcl	    unique_chars_	       entry (bit (*)) returns (char (15));

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

/* Static */

      dcl	    internal_area_ptr      ptr init (null) internal static;

/* END OF DECLARATIONS */


      return (GET_AREA_PTR (null ()));

set:
   entry (p_temp_dir_path, p_release_old_area, p_output_area_ptr);
      code = 0;

      if internal_area_ptr ^= null & p_release_old_area = YES
      then call release_area_ (internal_area_ptr);

      temp_seg_ptr = null;

      call absolute_pathname_ (p_temp_dir_path, temp_area_dir, code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to convert ""^a"" into an absolute path.", p_temp_dir_path);

      temp_area_entry = unique_chars_ ("0"b) || "." || GET_AREA_SUFFIX ();

      call initiate_file_$create (temp_area_dir, temp_area_entry, RW_ACCESS, temp_seg_ptr, seg_was_created, (0), code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to create the new dm free area segment ""^a"".",
	      pathname_ (temp_area_dir, temp_area_entry));

      p_output_area_ptr = GET_AREA_PTR (temp_seg_ptr);

      return;


ERROR_RETURN:
   proc () options (variable);
      dcl	    er_p_code	       fixed bin (35) based (er_p_code_ptr);
      dcl	    er_p_code_ptr	       ptr init (null);
      dcl	    er_msg	       char (1024) varying aligned;

      dcl	    1 er_msg_struc	       aligned based (addr (er_msg)),
	      2 len	       fixed bin (21),
	      2 str	       char (length (er_msg)) unaligned;

      dcl	    er_arg_list_ptr	       ptr;
      dcl	    er_nargs	       fixed bin;

      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_count (er_nargs, (0));
      call cu_$arg_ptr (1, er_p_code_ptr, (0), (0));
      if er_nargs > 1
      then call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_msg_struc.str, er_msg_struc.len, "0"b, "0"b);
      else er_msg = "";

      call sub_err_ (er_p_code, myname, ACTION_CANT_RESTART, null (), 0, "^a", er_msg);
   end ERROR_RETURN;
%page;
GET_AREA_PTR:
   proc (gap_p_initial_seg_ptr) returns (ptr);
      dcl	    gap_p_initial_seg_ptr  ptr parm;
      dcl	    1 gap_area_info	       aligned like area_info;
      dcl	    gap_code	       fixed bin (35) init (0);

      if internal_area_ptr = null () | gap_p_initial_seg_ptr ^= null ()
      then
         do;
	  gap_area_info.version = area_info_version_1;
	  gap_area_info.areap = gap_p_initial_seg_ptr;
	  gap_area_info.owner = GET_AREA_SUFFIX ();
	  gap_area_info.size = sys_info$max_seg_size;
	  string (gap_area_info.control) = "0"b;
	  gap_area_info.control.system = YES;		/* Makes extensions be created in the same directory as the original component. */
	  gap_area_info.control.extend = YES;
	  gap_area_info.control.zero_on_alloc = YES;

	  call define_area_ (addr (gap_area_info), gap_code);
	  if gap_code ^= 0
	  then call ERROR_RETURN (gap_code, "^/Unable to define the Data Management temporary area.");

	  internal_area_ptr = gap_area_info.areap;
         end;
      return (internal_area_ptr);
   end GET_AREA_PTR;
%page;
GET_AREA_SUFFIX:
   proc () returns (char (*));
      dcl	    gas_ring	       fixed bin init (0);
      dcl	    gas_ring_pic	       pic "9";
      call cu_$level_get (gas_ring);
      gas_ring_pic = gas_ring;
      return (gas_ring_pic || "." || AREA_NAME);
   end GET_AREA_SUFFIX;
%page;
%include access_mode_values;
%page;
%include area_info;
%page;
%include sub_err_flags;
   end get_dm_free_area_;
