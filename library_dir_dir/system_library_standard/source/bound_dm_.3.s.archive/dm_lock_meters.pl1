/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

Syntax:  dm_lock_meters {-control_args}


Function:  This command displays metering information about Data
Management locking.


Control arguments:
-reset, -rs
   resets the meters to zero and suppresses reporting.
-report_reset, -rr
   reports the current meters then resets them.
-brief, -bf
   selects the brief format for reporting on locking.  (DEFAULT)
-long, -lg
   selects the long format for reporting on locking.


Notes:  This command requires e (execute) access to dm_admin_gate_.


Examples:  Following are two example invocations of this command.  The
first is the default output (the -brief format), the second is the long
output.

 !  dm_lock_meters

    Total metering time:  3:09:51

    Calls to per system lock:      208.
    Calls to unlock all:           208.
    Locks by mode:
                          S       X      IS      IX     SIX
        FILES:            0     154       3      51       0
         CI'S:            0       0

    Waits for locks:               0.
    Deadlocks:
     Total Deadlock checks:        0.
     Deadlocks detected:           0.



 !  dm_lock_meters -lg

    Total metering time:  3:09:51



    Calls to per system lock:      208.
    Calls to unlock all:           208.
    Locks by mode:
                          S       X      IS      IX     SIX
    NEW FILES:            0     154       3      51       0
    OLD FILES:            0       0       0       0       0
                   ---------------------------------------------------------
        FILES:            0     154       3      51       0

     NEW CI'S:            0       0
     OLD CI'S:            0       0
                   ---------------------------------------------------------
         CI'S:            0       0

    Waits for locks:               0.
    Deadlocks:
     Total Deadlock checks:        0.
     Two or more transactions:     0.
     36 or less transactions:      0.
     36 to 72 transactions:        0.
     More than 72 transactions:    0.
     Deadlocks detected:           0.
       Self youngest:              0.
       Other youngest:             0.

    Lock segments:                 1. (max size 4096.)
    Block allocates:               416.
    Block frees:                   416.
*/

/* HISTORY:

Written by BIM, 04/15/83.
Modified:
05/01/84 by R. Michael Tague:  Added the History section.  Added
            %include dm_lm_meters.
10/23/84 by Stanford S. Cox:  To check lock_seg and lock_meters versions.
12/01/84 by Lindsey L. Spratt:  Major reconstruction of the program.  Changed
            the argument processing, added the brief/long report format
            distinction, added the saved_lock_seg (and its resetting), added
            the total metering time display.
12/05/84 by Lindsey L. Spratt:  Fixed some mis-named report_format_selection
            variables in RCM to have the rcm_p_ prefix.  Fixed FINISH to
            destroy the invocation.  Added documentation.
03/19/85 by S. Cox: Added dm_not_available_ handler.
*/
/* format: style2,ind3 */
%page;
dm_lock_meters:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

      dcl	    accept_control_argument
			       bit (1) aligned init ("0"b);
      dcl	    arg_idx	       fixed bin;
      dcl	    arg_len	       fixed bin (21);
      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    arg_ptr	       ptr;
      dcl	    code		       fixed bin (35);
      dcl	    control_argument_idx   fixed bin;
      dcl	    current_time	       fixed bin (71) init (0);
      dcl	    force_interpretation_as_argument
			       bit (1) aligned init (NO);
      dcl	    is_active_function     bit (1) aligned init (NO);
      dcl	    number_of_args	       fixed bin;
      dcl	    report_current_meters  bit (1) aligned init (YES);
      dcl	    report_format_selection
			       bit (1) aligned init (BRIEF_FORMAT);
      dcl	    reset_saved_meters     bit (1) aligned init (NO);
      dcl	    return_arg_len	       fixed bin (21) init (0);
      dcl	    return_arg_ptr	       ptr init (null);
      dcl	    sci_ptr	       ptr init (null);
      dcl	    this_is_a_standalone_invocation
			       bit (1) aligned init (YES);
      dcl	    tsp		       pointer;

/* Based */

      dcl	    arg		       char (arg_len) based (arg_ptr);

/* Builtin */

      dcl	    (clock, null)	       builtin;

/* Condition */

      dcl	    (cleanup, dm_not_available_)
			       condition;

/* Constant */

      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);

      dcl	    (
	    BRIEF_FORMAT	       init ("0"b),
	    LONG_FORMAT	       init ("1"b)
	    )		       bit (1) aligned internal static options (constant);

      dcl	    myname	       init ("dm_lock_meters") char (14) internal static options (constant);

      dcl	    (
	    MICROSECONDS_PER_SECOND
			       init (1e6),
	    MINUTES_PER_HOUR       init (60),
	    SECONDS_PER_HOUR       init (3600),
	    SECONDS_PER_MINUTE     init (60)
	    )		       fixed bin (35) internal static options (constant);

      dcl	    ARGUMENT_TYPE	       (8) internal static options (constant) char (64) varying
			       init ("", "", "", "", "", "", "", "");
      dcl	    CONTROL_ARGUMENT       (8) internal static options (constant) char (64) varying
			       init ("-reset", "-rs", "-report_reset", "-rr", "-brief", "-bf", "-long", "-lg");

/* Entry */


      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    dm_misc_util_$get_initialization_time
			       entry () returns (fixed bin (71));
      dcl	    get_temp_segment_      entry (char (*), ptr, fixed bin (35));
      dcl	    ioa_		       entry options (variable);
      dcl	    lock_manager_$copy_data
			       entry (pointer, fixed bin (35));
      dcl	    release_temp_segment_  entry (char (*), ptr, fixed bin (35));
      dcl	    ssu_$abort_line	       entry () options (variable);
      dcl	    ssu_$arg_ptr	       entry (ptr, fixed bin, ptr, fixed bin (21));
      dcl	    ssu_$destroy_invocation
			       entry (ptr);
      dcl	    ssu_$return_arg	       entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
      dcl	    ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$system_not_initialized,
	    error_table_$active_function,
	    error_table_$bad_arg,
	    error_table_$badopt,
	    error_table_$noarg,
	    error_table_$smallarg,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) external;

      dcl	    dm_system_data_$max_n_transactions
			       ext static fixed bin;


/* Static */

      dcl	    saved_lock_seg_ptr     ptr internal static init (null);
      dcl	    saved_time	       fixed bin (71) init (0) internal static;

/* END OF DECLARATIONS */
      lm_copy_data_ptr = null ();
      tsp = null ();
      on cleanup call CLEANUP ();

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on dm_not_available_ call ssu_$abort_line (sci_ptr, dm_error_$system_not_initialized);

      call ssu_$return_arg (sci_ptr, number_of_args, is_active_function, return_arg_ptr, return_arg_len);

      if is_active_function
      then call ssu_$abort_line (sci_ptr, error_table_$active_function, myname);

      accept_control_argument = YES;
      control_argument_idx = -1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	         CONTROL_ARGUMENT (control_argument_idx),
	         (index ("aeiouh", substr (ARGUMENT_TYPE (control_argument_idx), 1, 1)) > 0),
	         ARGUMENT_TYPE (control_argument_idx));
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	      CONTROL_ARGUMENT (control_argument_idx),
	      (index ("aeiouh", substr (ARGUMENT_TYPE (control_argument_idx), 1, 1)) > 0),
	      ARGUMENT_TYPE (control_argument_idx));
%page;
      lm_copy_data_n_segments = 1;			/* just the first has meters */
      allocate lm_copy_data;
      lm_copy_data.version = LM_COPY_DATA_VERSION_1;
      lm_copy_data.n_segments = 1;
      call get_temp_segment_ (myname, tsp, (0));
      lm_copy_data.segment_ptrs (1) = tsp;

      current_time = clock ();

      call lock_manager_$copy_data (addr (lm_copy_data), code);
      if code ^= 0
      then if code ^= error_table_$smallarg
	 then call ssu_$abort_line (sci_ptr, code, "^/Unable to copy the lock metering data.");

/**** Okay, we now have meters. ***/

      lock_seg_ptr = tsp;
      call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
      call CHECK_VERSION (LOCK_METERS_VERSION_1, lock_seg.meters.version, "lock_meters");

      if saved_lock_seg_ptr = null
      then call INIT_SAVED_LOCK_METERS (lock_seg_ptr, saved_lock_seg_ptr, saved_time);

      if report_current_meters = YES
      then call REPORT_CURRENT_METERS (report_format_selection, lock_seg_ptr, current_time, saved_lock_seg_ptr,
	      saved_time);

      if reset_saved_meters = YES
      then call RESET_SAVED_METERS (lock_seg_ptr, current_time, saved_lock_seg_ptr, saved_time);

      call FINISH ();

MAIN_RETURN:
      return;
%page;
ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;



CLEANUP:
   procedure ();
      call FINISH ();
   end CLEANUP;

FINISH:
   proc ();
      call ssu_$destroy_invocation (sci_ptr);
      if tsp ^= null ()
      then call release_temp_segment_ (myname, tsp, (0));
      if lm_copy_data_ptr ^= null ()
      then free lm_copy_data;
   end FINISH;

PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

      dcl	    pa_p_arg	       char (*) parm;
      dcl	    pa_p_control_argument_idx
			       fixed bin parm;
      dcl	    pa_p_accept_control_argument
			       bit (1) aligned parm;

      dcl	    pa_code	       fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;
   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


      dcl	    pca_p_arg	       char (*) parm;
      dcl	    pca_p_control_argument_idx
			       fixed bin parm;
      dcl	    pca_p_accept_control_argument
			       bit (1) aligned parm;
      dcl	    pca_p_force_interpretation_as_argument
			       bit (1) aligned parm;

      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -reset */
CONTROL_ARGUMENT (2):				/* -rs */
      reset_saved_meters = YES;
      report_current_meters = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (3):				/* -report_reset */
CONTROL_ARGUMENT (4):				/* -rr */
      reset_saved_meters = YES;
      report_current_meters = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (5):				/* -brief */
CONTROL_ARGUMENT (6):				/* -bf */
      report_format_selection = BRIEF_FORMAT;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (7):				/* -long */
CONTROL_ARGUMENT (8):				/* -lg */
      report_format_selection = LONG_FORMAT;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

      dcl	    cai_p_arg	       char (*);
      dcl	    cai_control_argument_idx
			       fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;


DISPLAY_TOTAL_METERING_TIME:
   proc (dtmt_p_duration_in_microseconds);
      dcl	    dtmt_p_duration_in_microseconds
			       fixed bin (71) parm;

      dcl	    dtmt_duration_in_seconds
			       fixed bin (71);
      dcl	    dtmt_hours	       fixed bin (71);
      dcl	    dtmt_minutes	       fixed bin (71);
      dcl	    dtmt_seconds	       fixed bin (71);

      dtmt_duration_in_seconds = divide (dtmt_p_duration_in_microseconds, MICROSECONDS_PER_SECOND, 71, 0);
      dtmt_seconds = mod (dtmt_duration_in_seconds, SECONDS_PER_MINUTE);
      dtmt_minutes = mod (divide (dtmt_duration_in_seconds, SECONDS_PER_MINUTE, 71, 0), MINUTES_PER_HOUR);
      dtmt_hours = divide (dtmt_duration_in_seconds, SECONDS_PER_HOUR, 71, 0);

      call ioa_ ("^/Total metering time:^2x^i:^[0^]^i:^[0^]^i^/", dtmt_hours, (dtmt_minutes < 10), dtmt_minutes,
	 (dtmt_seconds < 10), dtmt_seconds);

   end DISPLAY_TOTAL_METERING_TIME;



INIT_SAVED_LOCK_METERS:
   proc (islm_p_current_lock_seg_ptr, islm_p_saved_lock_seg_ptr, islm_p_saved_time);
      dcl	    islm_p_current_lock_seg_ptr
			       ptr parm;
      dcl	    islm_p_saved_lock_seg_ptr
			       ptr parm;
      dcl	    islm_p_saved_time      fixed bin (71) parm;

      dcl	    islm_code	       fixed bin (35) init (0);

      islm_p_saved_time = dm_misc_util_$get_initialization_time ();

      call get_temp_segment_ (myname, islm_p_saved_lock_seg_ptr, islm_code);
      if islm_code ^= 0
      then call ssu_$abort_line (sci_ptr, islm_code,
	      "^/Unable to get temp segment to hold the saved copy of the lock meters.");

      islm_p_saved_lock_seg_ptr -> lock_seg = islm_p_current_lock_seg_ptr -> lock_seg;
      unspec (islm_p_saved_lock_seg_ptr -> lock_seg.meters.lm_meters) = "0"b;

   end INIT_SAVED_LOCK_METERS;


REPORT_CURRENT_METERS:
   proc (rcm_p_report_format_selection, rcm_p_current_lock_seg_ptr, rcm_p_current_time, rcm_p_saved_lock_seg_ptr,
        rcm_p_saved_time);
      dcl	    rcm_p_report_format_selection
			       bit (1) aligned parm;
      dcl	    rcm_p_current_lock_seg_ptr
			       ptr parm;
      dcl	    rcm_p_current_time     fixed bin (71) parm;
      dcl	    rcm_p_saved_lock_seg_ptr
			       ptr parm;
      dcl	    rcm_p_saved_time       fixed bin (71) parm;

      dcl	    1 rcm_p_current_lock_seg
			       aligned like lock_seg based (rcm_p_current_lock_seg_ptr);
      dcl	    1 rcm_p_saved_lock_seg aligned like lock_seg based (rcm_p_saved_lock_seg_ptr);

      call DISPLAY_TOTAL_METERING_TIME (rcm_p_current_time - rcm_p_saved_time);

      call ioa_ ("Calls to per system lock:^32t^d.",
	 rcm_p_current_lock_seg.meters.lock_calls - rcm_p_saved_lock_seg.meters.lock_calls);
      call ioa_ ("Calls to unlock all:^32t^d.",
	 rcm_p_current_lock_seg.meters.unlock_all_calls - rcm_p_saved_lock_seg.meters.unlock_all_calls);
      call ioa_ ("Locks by mode:");
      call ioa_ ("^20x^(^3a^5x^)", LOCK_MODE_NAMES);
      if rcm_p_report_format_selection = LONG_FORMAT
      then
         do;
	  call ioa_ ("NEW FILES:^5x^(^8d^)",
	       (rcm_p_current_lock_seg.meters.file_locks_by_mode - rcm_p_saved_lock_seg.meters.file_locks_by_mode)
	       - (rcm_p_current_lock_seg.meters.dup_file_locks_by_mode
	       - rcm_p_saved_lock_seg.meters.dup_file_locks_by_mode));
	  call ioa_ ("OLD FILES:^5x^(^8d^)",
	       rcm_p_current_lock_seg.meters.dup_file_locks_by_mode
	       - rcm_p_saved_lock_seg.meters.dup_file_locks_by_mode);
	  call ioa_ ("^15x---------------------------------------------------------");
         end;
      call ioa_ ("    FILES:^5x^(^8d^)",
	 rcm_p_current_lock_seg.meters.file_locks_by_mode - rcm_p_saved_lock_seg.meters.file_locks_by_mode);
      if rcm_p_report_format_selection = LONG_FORMAT
      then
         do;
	  call ioa_;

	  call ioa_ (" NEW CI'S:^5x^(^8d^)",
	       (rcm_p_current_lock_seg.meters.ci_locks_by_mode - rcm_p_saved_lock_seg.meters.ci_locks_by_mode)
	       - (rcm_p_current_lock_seg.meters.dup_ci_locks_by_mode - rcm_p_saved_lock_seg.meters.dup_ci_locks_by_mode)
	       );
	  call ioa_ (" OLD CI'S:^5x^(^8d^)",
	       rcm_p_current_lock_seg.meters.dup_ci_locks_by_mode - rcm_p_saved_lock_seg.meters.dup_ci_locks_by_mode);
	  call ioa_ ("^15x---------------------------------------------------------");
         end;
      call ioa_ ("     CI'S:^5x^(^8d^)",
	 rcm_p_current_lock_seg.meters.ci_locks_by_mode - rcm_p_saved_lock_seg.meters.ci_locks_by_mode);
      call ioa_;
      call ioa_ ("Waits for locks:^32t^d.", rcm_p_current_lock_seg.meters.waits - rcm_p_saved_lock_seg.meters.waits);
      call ioa_ ("Deadlocks:");
      call ioa_ (" Total Deadlock checks:^32t^d.",
	 rcm_p_current_lock_seg.meters.deadlock_checks - rcm_p_saved_lock_seg.meters.deadlock_checks);
      if rcm_p_report_format_selection = LONG_FORMAT
      then
         do;
	  call ioa_ (" Two or more transactions:^32t^d.",
	       rcm_p_current_lock_seg.meters.real_deadlock_checks - rcm_p_saved_lock_seg.meters.real_deadlock_checks);
	  call ioa_ (" 36 or less transactions:^32t^d.",
	       rcm_p_current_lock_seg.meters.deadlock_checks_36 - rcm_p_saved_lock_seg.meters.deadlock_checks_36);
	  call ioa_ (" 36 to 72 transactions:^32t^d.",
	       rcm_p_current_lock_seg.meters.deadlock_checks_72 - rcm_p_saved_lock_seg.meters.deadlock_checks_72);
	  call ioa_ (" More than 72 transactions:^32t^d.",
	       (rcm_p_current_lock_seg.meters.real_deadlock_checks - rcm_p_saved_lock_seg.meters.real_deadlock_checks)
	       - ((rcm_p_current_lock_seg.meters.deadlock_checks_36 - rcm_p_saved_lock_seg.meters.deadlock_checks_36)
	       + (rcm_p_current_lock_seg.meters.deadlock_checks_72 - rcm_p_saved_lock_seg.meters.deadlock_checks_72)));
         end;
      call ioa_ (" Deadlocks detected:^32t^d.",
	 (rcm_p_current_lock_seg.meters.deadlock_self_youngest - rcm_p_saved_lock_seg.meters.deadlock_self_youngest)
	 + (rcm_p_current_lock_seg.meters.deadlock_other_youngest - rcm_p_saved_lock_seg.meters.deadlock_other_youngest)
	 );
      if rcm_p_report_format_selection = LONG_FORMAT
      then
         do;
	  call ioa_ ("   Self youngest:^32t^d.",
	       rcm_p_current_lock_seg.meters.deadlock_self_youngest
	       - rcm_p_saved_lock_seg.meters.deadlock_self_youngest);
	  call ioa_ ("   Other youngest:^32t^d.",
	       rcm_p_current_lock_seg.meters.deadlock_other_youngest
	       - rcm_p_saved_lock_seg.meters.deadlock_other_youngest);
	  call ioa_ ();
	  call ioa_ ("Lock segments:^32t^d. (max size ^d.)", rcm_p_current_lock_seg.n_lock_segments,
	       rcm_p_current_lock_seg.lock_seg_size);
	  call ioa_ ("Block allocates:^32t^d.",
	       rcm_p_current_lock_seg.meters.allocates - rcm_p_saved_lock_seg.meters.allocates);
	  call ioa_ ("Block frees:^32t^d.", rcm_p_current_lock_seg.meters.frees - rcm_p_saved_lock_seg.meters.frees);
         end;
   end REPORT_CURRENT_METERS;


RESET_SAVED_METERS:
   proc (rsm_p_current_lock_seg_ptr, rsm_p_current_time, rsm_p_saved_lock_seg_ptr, rsm_p_saved_time);
      dcl	    rsm_p_current_lock_seg_ptr
			       ptr parm;
      dcl	    rsm_p_current_time     fixed bin (71) parm;
      dcl	    rsm_p_saved_lock_seg_ptr
			       ptr parm;
      dcl	    rsm_p_saved_time       fixed bin (71) parm;

      rsm_p_saved_lock_seg_ptr -> lock_seg = rsm_p_current_lock_seg_ptr -> lock_seg;
      rsm_p_saved_time = rsm_p_current_time;
   end RESET_SAVED_METERS;


CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

      dcl	    cv_p_expected_version  char (8) aligned parameter;
      dcl	    cv_p_received_version  char (8) aligned parameter;
      dcl	    cv_p_structure_name    char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;

%page;
%include dm_lm_system_data;
%page;
%include dm_lm_meters;
%page;
%include dm_lm_copy_data;
%page;
%include dm_lock_modes;
%include sub_err_flags;
   end dm_lock_meters;
