/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
    Per-System Initialization Program for Locking
*/

/* HISTORY:

Written by J. Bongiovanni, 01/15/82.
Modified:
12/15/82 by J. Bongiovanni: for multi-segment lock table.
03/31/83 by BIM: Renamed, made per-transaction, fast lock included.
08/06/83 by Lee A. Newcomb: removed obsolete code args. from calls
	  to dm_per_system_ entries.
11/30/83 by L. A. Newcomb:  Added NORMAL_LOCK_SEG_SIZE temporarily until the
            lock seg size can be integrated into the configuration file.
05/01/84 by R. Michael Tague:  Split dm_lm_meters structure from
            dm_lm_system_data, added %include dm_lm_meters.
10/17/84 by Stanford S. Cox:  For DM program standards, and to allow quit,
            alrm, and cput ips when testing.
*/
/* format: style3 */
lm_per_system_init_:
     proc (p_code);

/*  Parameter  */

dcl	p_code		fixed bin (35) parameter;	/* Standard error code */

/*  Automatic  */

dcl	freex		fixed bin;
dcl	hashx		fixed bin;

/*  Static  */

dcl	HASH_TABLE_ENTRIES	fixed bin int static options (constant) init (256);
dcl	HASH_MASK		bit (36) aligned int static options (constant) init ("000000000377"b3);
dcl	IPS_NAMES		(3) char (32) int static options (constant) init ("quit", "alrm", "cput");
dcl	MAX_LOCK_SEGMENTS	fixed bin int static options (constant) init (100);

/* The next two should be eliminated in favor of a config file parameter. */
dcl	TEST_LOCK_SEG_SIZE	fixed bin (19) int static options (constant) init (1024 * 4);
						/* use 4K seg. */
dcl	NORMAL_LOCK_SEG_SIZE
			fixed bin (19) int static options (constant) init (1024 * 16);
						/* use 16K seg. */

/*  External  */

dcl	dm_system_data_$lock_ips_mask
			bit (36) aligned external;
dcl	dm_system_data_$max_n_transactions
			fixed bin external;
dcl	sys_info$data_management_ringno
			fixed bin external;
dcl	sys_info$max_seg_size
			fixed bin (19) external;

/*  Entry  */

dcl	lm_init_fast_lock_data_
			entry (fixed bin (35));
dcl	create_ips_mask_	entry (ptr, fixed bin, bit (36) aligned);
dcl	dm_per_system_$create
			entry (char (*), ptr);
dcl	get_ring_		entry () returns (fixed bin (3));
dcl	sub_err_		entry () options (variable);

/*  Builtin  */

dcl	addr		builtin;
dcl	divide		builtin;
dcl	fixed		builtin;
dcl	hbound		builtin;
dcl	size		builtin;
dcl	wordno		builtin;

dcl	ME		char (32) init ("lm_per_system_init_") int static options (constant);

	p_code = 0;
	call lm_init_fast_lock_data_ (p_code);
	if p_code ^= 0
	then return;

	lock_segno = 1;
	call dm_per_system_$create (LOCK_SEGNAME || lock_segno, lock_seg_ptr);
	lock_seg.version = LOCK_SEG_VERSION_1;
	lock_seg.n_transaction_table_entries = dm_system_data_$max_n_transactions;

	lock_seg.lock = 0;

/*  If we're in test mode, set the segment size small so we get lots of them.  */

	if get_ring_ () = sys_info$data_management_ringno
	then do;
		lock_seg.lock_seg_size = NORMAL_LOCK_SEG_SIZE;
		dm_system_data_$lock_ips_mask = "0"b;
	     end;
	else do;
		lock_seg.lock_seg_size = TEST_LOCK_SEG_SIZE;
		call create_ips_mask_ (addr (IPS_NAMES), hbound (IPS_NAMES, 1), dm_system_data_$lock_ips_mask);
	     end;

	lock_seg.n_hash_table_entries = HASH_TABLE_ENTRIES;
	lock_seg.hash_mask = HASH_MASK;
	lock_seg.meters.version = LOCK_METERS_VERSION_1;

	lock_seg.transaction_table_offset = wordno (addr (lock_seg.transaction_table));
	lock_seg.hash_table_offset = wordno (addr (lock_seg.hash_table));

	lock_hash_table_ptr = addr (lock_seg.hash_table);
	do hashx = 1 to lock_seg.n_hash_table_entries;
	     lock_hash_table.buckets (hashx) = NULL_VPTR;
	end;

	lock_block_array_ptr = addr (lock_seg.free);
	n_lock_blocks = divide (lock_seg.lock_seg_size - fixed (wordno (lock_block_array_ptr)), size (lock_block), 17);
	lock_seg.free_list_ptr = VPTR (lock_block_array_ptr);
	lock_free_block_ptr = addr (lock_block_array (1));
	do freex = 1 to n_lock_blocks;
	     lock_free_block.free_fp = VPTR (addr (lock_block_array (freex)));
	     lock_free_block_ptr = addr (lock_block_array (freex));
	     lock_free_block.seg_inx = 1;
	     lock_free_block.type = TYPE_FREE;
	end;
	lock_free_block.free_fp = NULL_VPTR;

	lock_seg.n_lock_blocks = n_lock_blocks;
	lock_seg.lock_array_offset = wordno (lock_block_array_ptr);
	lock_seg.n_lock_segments = 1;
	lock_seg.max_lock_segments = MAX_LOCK_SEGMENTS;

	return;
%page;
/*  Internal Procedure to create a lock virtual pointer to an object in
    this segment. */

VPTR:
     proc (vptr_p_lock_ptr) returns (1 like lock_virtual_ptr);

dcl	vptr_p_lock_ptr	ptr parameter;

dcl	1 vptr_lock_virtual_ptr
			aligned like lock_virtual_ptr;

	vptr_lock_virtual_ptr.seg_inx = 1;
	vptr_lock_virtual_ptr.offset = wordno (vptr_p_lock_ptr);
	return (vptr_lock_virtual_ptr);

     end VPTR;
%page;
%include dm_lm_system_data;
%include dm_lm_meters;
%include sub_err_flags;
     end lm_per_system_init_;
