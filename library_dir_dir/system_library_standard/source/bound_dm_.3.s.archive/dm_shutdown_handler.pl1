/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: ^indcomtxt */
/* DESCRIPTION:

         This    program    is   the   default   static   handler   for   the
     dm_shutdown_scheduled_ IPS.  It resets any  previously  set  DM  shutdown
     timers.     It  then  sets  up  new  alarm  call  timers  to  signal  the
     dm_shutdown_warning_  and  dm_user_shutdown_  conditions  in   the   user
     process.

          Currently, nothing is done to warn users of DM shutdown cancellation
     it  the warning signal has already been sent.  This will require a static
     datum to store the time of the warning for comparison  and  a  signalling
     mechanism to inform users of the cancellation.
*/

/* HISTORY:

Written by Lee A. Newcomb, 09/20/84.
Modified:
10/29/84 by Lee A. Newcomb:  Fixed targets of alarm timers to be
            dm_misc_util_$signal_...
12/10/84 by Lindsey Spratt:  Changed to catch timer_manager_err when calling
	  timer_manager_$reset_alarm_call.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */

dm_shutdown_handler:
   proc ();

/* START OF DECLARATIONS */
/* Parameter */

/* Automatic */
dcl  (
     saved_ips_mask			bit (36) aligned init (""b),
     user_shutdown_time		fixed bin (71) init (0)
     )				automatic;

/* Based */
/* Builtin */

dcl  null				builtin;

/* Condition */
dcl  (cleanup, timer_manager_err)	condition;

/* Constant */

/* Entry */

dcl  (
     dm_misc_util_$get_shutdown_warning_time
				entry returns (fixed bin (71)),
     dm_misc_util_$get_user_shutdown_time
				entry returns (fixed bin (71)),
     dm_misc_util_$is_process_using_dm	entry returns (bit (1) aligned),
     dm_misc_util_$signal_user_shutdown entry (),
     dm_misc_util_$signal_shutdown_warning
				entry (),
     hcs_$reset_ips_mask		entry (bit (36) aligned,
				bit (36) aligned),
     hcs_$set_ips_mask		entry (bit (36) aligned,
				bit (36) aligned),
     timer_manager_$alarm_call	entry (fixed bin (71), bit (2), entry),
     timer_manager_$reset_alarm_call	entry (entry)
     );

/* External */

/* END OF DECLARATIONS */
%page;
   on cleanup call FINISH ();
   call hcs_$set_ips_mask (""b, saved_ips_mask);

   if dm_misc_util_$is_process_using_dm () then
HANDLE_DM_SHUTDOWN_SCHEDULED_IPS:
      do;

RESET_OLD_SHUTDOWN_TIMERS:				/* if any */
      begin;
dcl  next_reset_label		label variable;
         on timer_manager_err goto next_reset_label;
         next_reset_label = SIGNAL_USER_SHUTDOWN_RESET;
         call timer_manager_$reset_alarm_call (
	    dm_misc_util_$signal_shutdown_warning);
SIGNAL_USER_SHUTDOWN_RESET:
         next_reset_label = DONE_RESETTING;
         call timer_manager_$reset_alarm_call (
	    dm_misc_util_$signal_user_shutdown);
DONE_RESETTING:
         revert timer_manager_err;
      end RESET_OLD_SHUTDOWN_TIMERS;

      user_shutdown_time = dm_misc_util_$get_user_shutdown_time ();
      if user_shutdown_time ^= 0 then
SET_SHUTDOWN_TIMERS:
         do;

         call timer_manager_$alarm_call (
	    dm_misc_util_$get_shutdown_warning_time (),
	    "00"b /* abs. usec. */, dm_misc_util_$signal_shutdown_warning);
         call timer_manager_$alarm_call (user_shutdown_time,
	    "00"b /* abs. usec. */, dm_misc_util_$signal_user_shutdown);

      end SET_SHUTDOWN_TIMERS;

   end HANDLE_DM_SHUTDOWN_SCHEDULED_IPS;

   call FINISH ();

MAIN_RETURN:
   return;


/* end dm_shutdown_handler; */
%page;
FINISH:
   proc ();

   if saved_ips_mask ^= ""b then
      call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);

   return;

   end FINISH;


   end dm_shutdown_handler;
