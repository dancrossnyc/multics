/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */






/****^  HISTORY COMMENTS:
  1) change(90-09-10,Zimmerman), approve(90-09-10,MCR8199),
     audit(90-10-12,Gray), install(90-10-16,MR12.4-1043):
     Cause -rr and -rs to reset metering time, generate stats in absence of
     before_journal, correct attemp to print no-existant data when process is
     non-priveledged.
                                                   END HISTORY COMMENTS */





/* DESCRIPTION:
   before_journal_meters - command level interface to bjm_get_journal_status
   and interface to ring zero meters in dm_journal_seg_

   usage:
	bjmt [JNL_PATH1 ... JNL_PATHn] [-rr] [-rs] [-lg]
*/

/* HISTORY:
Written by M. Pandolf, 09/01/83.
Modified:
01/01/84 by M. Pandolf: to add .bj suffix to pathnames and fix reference
            to dm_journal.
12/03/84 by Maggie Sharpe:  to use ERROR_RETURN; to reference dm_journal_segp
            only if metering_regions_filled is on; cleaned up dcls and format.
12/13/84 by R. Michael Tague: Added -bf control argument.
12/17/84 by R. Michael Tague: Rationalized control argument flag settings.
01/16/85 by R. Michael Tague: Stopped the -lg argument from causing the 
            user_wants_meters_printed flag to be set.
02/14/85 by R. Michael Tague: Changed the -bf argument so that it would not
            set the user_wants_meters_printed flag.
03/19/85 by S. Cox: Added dm_not_available_ handler.
03/27/85 by Lee A. Newcomb:  Added reporting of the new
            transaction_storage_limit_hits per-journal meter.
04/09/85 by Lee A. Newcomb:  To use convert_access_class_ and not the obsolete
            convert_authorization_.
*/

/* format: style2 */

before_journal_meters:
bjmt:
     procedure () options (variable);


/* DECLARATIONS */

/* Automatic */

	dcl     arg_count		 fixed bin;	/* number of command line args */
	dcl     status_code		 fixed bin (35);	/* standard system status code */
	dcl     user_wants_meters_reset
				 bit (1) aligned;	/* true if ctl arg was -rr or -rs */
	dcl     user_wants_meters_printed
				 bit (1) aligned;	/* true if ctl arg was -rr, -lg, or <absent> */
	dcl     user_wants_long_report bit (1) aligned;	/* true if ctl arg was -lg */
	dcl     arg_number		 fixed bin;	/* index into command line args */
	dcl     arg_ptr		 pointer;		/* pointer to a command line arg */
	dcl     arg_length		 fixed bin (21);	/* length of command line arg pointed to by arg_ptr */
	dcl     metering_regions_filled
				 bit (1) aligned;	/* true if current copy of dm_journal_seg_ is available */
	dcl     journal_seg_max_length fixed bin (19);	/* self explanatory */
	dcl     binary_time		 fixed bin (71);	/* standard clock time */
	dcl     ascii_time		 char (24);	/* above time, but readable by Joe Average */
	dcl     area_ptr		 pointer;		/* used instead of many calls to get_system_free_area_ */
	dcl     bj_index		 fixed bin;	/* index into bj_status for one journal */
	dcl     bj_dir		 char (168);	/* directory path of dir containing journal */
	dcl     bj_entry		 char (32);	/* entry name of journal */
	dcl     new_ptr		 pointer dim (1);	/* pointer to copy of current ring 0 meter image */
	dcl     old_ptr		 pointer dim (1);	/* pointer to copy of previous ring 0 meter image */
	dcl     total_metering_time	 fixed bin (71);	/* raw number of seconds for this meter */
	dcl     total_metering_seconds fixed bin;	/* number of seconds for display */
	dcl     total_metering_minutes fixed bin;	/* number of minutes for display */
	dcl     total_metering_hours	 fixed bin;	/* number of hours for display */
	dcl     avg_n_bytes_per_bi	 fixed bin (71);	/* self explanatory */
	dcl     avg_n_ci_per_recycle	 fixed bin (71);	/* self explanatory */
	dcl     avg_n_bytes_per_txn	 fixed bin (71);	/* self explanatory */
	dcl     avg_n_bi_per_txn	 fixed bin (71);	/* self explanatory */
	dcl     total_bi_bytes	 fixed bin (71);	/* sum of all before bytes written in journal */
	dcl     total_bi_written	 fixed bin (71);	/* sum of all bi written, incl recycled */
	dcl     total_non_null_txns	 fixed bin (71);	/* count of txns having > 0 records */
	dcl     total_recycles	 fixed bin (71);	/* self explanatory */
	dcl     total_ci_recycled	 fixed bin (71);	/* sum of no. times each ci recycled */
	dcl     local_area		 area;		/* allocate and forget about freeing */
	dcl     is_pathname_ptr	 pointer;		/* self explanatory */
	dcl     no_path_specified	 bit (1);		/* true if command line specifies no path */

/* Based */

	dcl     arg		 char (arg_length) based (arg_ptr);
	dcl     first_arg_char	 char (1) based (arg_ptr);
	dcl     is_pathname		 dim (arg_count) bit (1) aligned based (is_pathname_ptr);

/* Builtin */

	dcl     (addr, clock, divide, empty, mod, null, unspec)
				 builtin;

/* Constant */

	dcl     (
	        IOA_GENERAL_RS_NO_NEW_LINE
				 bit (1) aligned init ("0"b),
	        IOA_GENERAL_RS_DONT_PAD
				 bit (1) aligned init ("1"b),
	        MY_NAME		 char (32) init ("before_journal_meters")
	        )			 internal static options (constant);

/* Entry */

	dcl     before_journal_manager_$get_journal_status
				 entry (char (*), char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     com_err_		 entry () options (variable);
	dcl     convert_access_class_$to_string
				 entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
				 bit (1) aligned);
	dcl     metering_util_$define_regions
				 entry options (variable);
	dcl     metering_util_$fill_buffers
				 entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
	dcl     metering_util_$reset	 entry (fixed bin, fixed bin (35));
	dcl     ring_zero_peek_$get_max_length
				 entry (char (*), fixed bin (19), fixed bin (35));

/* Condition */

	dcl     dm_not_available_	 condition;

/* External Static */

	dcl     dm_error_$system_not_initialized
				 fixed bin (35) ext static;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
          dcl     error_table_$no_info   fixed bin (35) ext static;

/* Internal Static */

	dcl     Metering_regions_defined
				 bit (1) aligned internal static variable init ("0"b);
	dcl     Region_id		 fixed bin internal static variable init (0);
	dcl     Saved_bj_global_meters_ptr
				 pointer internal static variable init (null ());
	dcl     Saved_bj_status_ptr	 pointer internal static variable init (null ());


%page;
	on dm_not_available_ call ERROR_RETURN (dm_error_$system_not_initialized, "");

/* obtain argument info for this command */

	call cu_$arg_count (arg_count, status_code);
	if status_code ^= 0
	then do;
		call com_err_ (status_code, MY_NAME);
		goto MAIN_RETURN;
	     end;


/* analyze the args, looking for either a control arg or a pathname */

	user_wants_meters_reset = "0"b;
	user_wants_meters_printed = "1"b;
	user_wants_long_report = "0"b;

	allocate is_pathname in (local_area);
	is_pathname (*) = "0"b;
	no_path_specified = "1"b;

	new_ptr (1) = null ();
	old_ptr (1) = null ();

arg_processing_loop:
	do arg_number = 1 to arg_count;
	     call cu_$arg_ptr (arg_number, arg_ptr, arg_length, status_code);
	     if arg_length > 0
	     then if (arg = "-report_reset") | (arg = "-rr")
		then user_wants_meters_reset, user_wants_meters_printed = "1"b;
		else if (arg = "-reset") | (arg = "-rs")
		then do;
			user_wants_meters_reset = "1"b;
			user_wants_meters_printed = "0"b;
		     end;
		else if (arg = "-long") | (arg = "-lg")
		then user_wants_long_report = "1"b;
		else if (arg = "-brief") | (arg = "-bf")
		then user_wants_long_report = "0"b;
		else if first_arg_char = "-"
		then call ERROR_RETURN (error_table_$bad_arg, "^/The argument is ""^a"".", arg);
		else do;
			is_pathname (arg_number) = "1"b;
			no_path_specified = "0"b;
		     end;
	     else call ERROR_RETURN (error_table_$bad_arg, "^/One of the supplied arguments is """".");


	end arg_processing_loop;

/* get a copy of the ring zero meters */

	metering_regions_filled = "0"b;

	if ^Metering_regions_defined
	then do;
		call ring_zero_peek_$get_max_length ("dm_journal_seg_", journal_seg_max_length, status_code);
		if status_code = 0
		then do;
			call metering_util_$define_regions (Region_id, status_code, "dm_journal_seg_", 0,
			     journal_seg_max_length);
			if status_code = 0
			then Metering_regions_defined = "1"b;
		     end;
	     end;

	if Metering_regions_defined
	then do;
		call metering_util_$fill_buffers (Region_id, binary_time, ascii_time, new_ptr, old_ptr, status_code);
		if status_code = 0
		then metering_regions_filled = "1"b;
		else if status_code ^= error_table_$no_info 
		     then call com_err_ (MY_NAME,status_code," :unable to load system meter buffers. ");
		
	     end;
	else /* status_code set in prev do group */
	     call ERROR_RETURN (status_code, "^/Undefined metering regions.");

	dm_journal_segp = new_ptr (1);

/* process each pathname obtained from the command line */

	area_ptr = get_system_free_area_ ();

	if ^user_wants_meters_printed
	then goto should_we_reset_meters;

	if no_path_specified
	then do;

		call before_journal_manager_$get_journal_status ("", "system", area_ptr, bj_status_ptr,
		     bj_global_meters_ptr, status_code);
		if status_code ^= 0
		then call ERROR_RETURN (status_code, "^/Unable to get status of the default before journal.");

		else do;
			call PRINT_GLOBAL_METERS ();

			do bj_index = 1 to bj_status.n_journals;
			     call PRINT_ONE_JOURNAL (bj_index);
			end;

			if bj_status.n_journals = 0
			then call ioa_ ("^/There are no journals currently active.^/");
			free bj_status_ptr -> bj_status;
			free bj_global_meters_ptr -> bj_global_meters;
		     end;
	     end;
	else do arg_number = 1 to arg_count;

		if ^is_pathname (arg_number)
		then goto /* go WHAT?? */ done_with_pathname;

		call cu_$arg_ptr (arg_number, arg_ptr, arg_length, status_code);
		call expand_pathname_$add_suffix (arg, "bj", bj_dir, bj_entry, status_code);
		if status_code ^= 0
		then call ERROR_RETURN (status_code, "^/Supplied journal pathname is ""^a"".", arg);

		else do;
			call before_journal_manager_$get_journal_status (bj_dir, bj_entry, area_ptr, bj_status_ptr,
			     bj_global_meters_ptr, status_code);
			if status_code ^= 0
			then call ERROR_RETURN (status_code, "^/Supplied journal pathname is ""^a"".", arg);

			else do;
				call PRINT_ONE_JOURNAL (1);
				free bj_status_ptr -> bj_status;
				free bj_global_meters_ptr -> bj_global_meters;
			     end;
		     end;

done_with_pathname:
	     end;

/* fulfill any other committments to the user */

should_we_reset_meters:
	if user_wants_meters_reset
	then do;
		if Saved_bj_global_meters_ptr ^= null ()
		then free Saved_bj_global_meters_ptr -> bj_global_meters;
		if Saved_bj_status_ptr ^= null ()
		then free Saved_bj_status_ptr -> bj_status;
		call before_journal_manager_$get_journal_status ("", "system", area_ptr, Saved_bj_status_ptr,
		     Saved_bj_global_meters_ptr, status_code);
		Saved_bj_global_meters_ptr -> bj_global_meters.time_of_bootload = clock();
		call metering_util_$reset (Region_id, status_code);
		if status_code ^= 0 then call com_err_(status_code, " reported by metering_util_$reset while attempting to reset meters.");
		
	     end;

MAIN_RETURN:
	return;

%page;

/* INTERNAL PROCEDURES */

ERROR_RETURN:
     proc options (variable);

	dcl     (
	        er_arg_list_ptr	 ptr,
	        er_code		 fixed bin (35),
	        er_message		 char (1024),
	        er_message_length	 fixed bin (21)
	        )			 automatic;

	dcl     (
	        er_fixed_bin_35_value	 fixed bin (35),
	        er_message_overlay	 char (er_message_length)
	        )			 based;

	call cu_$arg_list_ptr (er_arg_list_ptr);
	er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_fixed_bin_35_value;

	call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message, er_message_length, IOA_GENERAL_RS_DONT_PAD,
	     IOA_GENERAL_RS_NO_NEW_LINE);
	call com_err_ (er_code, MY_NAME, addr (er_message) -> er_message_overlay);

	goto MAIN_RETURN;				/* does not return */

     end ERROR_RETURN;



PRINT_GLOBAL_METERS:
     procedure ();

	dcl     i			 fixed bin;

/* see if we have old copy of the meters for deltas */

	if Saved_bj_global_meters_ptr = null ()
	then do;
		allocate bj_global_meters set (Saved_bj_global_meters_ptr);
		unspec (Saved_bj_global_meters_ptr -> bj_global_meters) = ""b;
		Saved_bj_global_meters_ptr -> bj_global_meters.time_of_bootload =
		     bj_global_meters_ptr -> bj_global_meters.time_of_bootload;
	     end;

/* calculate metering time */

	total_metering_time =
	     divide (clock () - Saved_bj_global_meters_ptr -> bj_global_meters.time_of_bootload, 1000000, 71, 0);
	total_metering_seconds = mod (total_metering_time, 60);
	total_metering_minutes = mod (divide (total_metering_time, 60, 71, 0), 60);
	total_metering_hours = divide (total_metering_time, 3600, 71, 0);

	call ioa_ ("^/Total metering time:^2x^i:^[0^]^i:^[0^]^i^/", total_metering_hours, (total_metering_minutes < 10),
	     total_metering_minutes, (total_metering_seconds < 10), total_metering_seconds);

/* begin the report */

	if metering_regions_filled
	then do;
		call ioa_ ("");
		call ioa_ ("Journals in use^31t^d of ^d", dm_journal_segp -> dm_journal.n_journals_inuse,
		     dm_journal_segp -> dm_journal.n_journals);
		call ioa_ ("Pages held^31t^d of ^d (^d per journal).", dm_journal_segp -> dm_journal.n_held_pages_mem,
		     dm_journal_segp -> dm_journal.max_held_pages_mem, dm_journal_segp -> max_held_per_journal);

		call ioa_ ("Segments active in");
		do i = 0 to 3;
		     call ioa_ ("^5t^[4K^;16K^;64K^;256K^] pool^31t^d of ^d", i + 1,
			dm_journal_segp -> dm_journal.n_active (i), dm_journal_segp -> dm_journal.threshold (i));
		end;
	     end;

	if ^user_wants_long_report
	then return;

	call ioa_ ("^/Calls to");
	call ioa_ ("^5tbegin transaction^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_begin_txn
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_begin_txn);
	call ioa_ ("^5twrite before image^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_before_image
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_before_image);
	call ioa_ ("^5twrite abort mark^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_abort
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_abort);
	call ioa_ ("^5twrite commit mark^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_commit
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_commit);
	call ioa_ ("^5twrite fm post commit^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_fm_pc_mark
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_fm_pc_mark);
	call ioa_ ("^5twrite fm rollback handler^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_fm_rbh
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_fm_rbh);
	call ioa_ ("^5twrite rollback mark^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_rb_mark
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_rb_mark);
	call ioa_ ("^5trollback^31t^i",
	     bj_global_meters_ptr -> bj_global_meters.n_calls_rollback
	     - Saved_bj_global_meters_ptr -> bj_global_meters.n_calls_rollback);

	if metering_regions_filled
	then do;
		call ioa_ ("^/Synch write");
		call ioa_ ("^5tattempts^31t^i", dm_journal_segp -> dm_journal.synch_write_calls);
		call ioa_ ("^5tholds^31t^i", dm_journal_segp -> dm_journal.synch_write_holds);
		call ioa_ ("^5tinvalid - null DM stamp^31t^i", dm_journal_segp -> dm_journal.synch_write_no_stamp);
		call ioa_ ("^5tinvalid - bad DM stamp^31t^i", dm_journal_segp -> dm_journal.synch_write_inv_vers);
		call ioa_ ("^5tinvalid - bad BJ index^31t^i", dm_journal_segp -> dm_journal.synch_write_inv_ix);
		call ioa_ ("^5tinvalid - bad time stamp^31t^i", dm_journal_segp -> dm_journal.synch_write_inv_time);
		call ioa_ ("^5ttosses^31t^i", dm_journal_segp -> dm_journal.synch_write_tosses);
		call ioa_ ("^/Other ring zero calls");
		call ioa_ ("^5tunlink^31t^i", dm_journal_segp -> dm_journal.unlink_calls);
		call ioa_ ("^5tactivate^31t^i (^i denied)", dm_journal_segp -> dm_journal.activate_calls,
		     dm_journal_segp -> dm_journal.activate_denied);
		call ioa_ ("^5tdeactivate^31t^i", dm_journal_segp -> dm_journal.deactivate_calls);
		call ioa_ ("^5tset stamp^31t^i", dm_journal_segp -> dm_journal.set_stamp_calls);
		call ioa_ ("^5tallocate^31t^i", dm_journal_segp -> dm_journal.allocate_calls);
		call ioa_ ("^5tfree^31t^i", dm_journal_segp -> dm_journal.free_calls);
	     end;

	return;

     end PRINT_GLOBAL_METERS;

%page;

PRINT_ONE_JOURNAL:
     procedure (p_bj_status_index);

	dcl     p_bj_status_index	 fixed bin parameter;
	dcl     journal_index	 fixed bin;
	dcl     saved_journal_index	 fixed bin;
	dcl     time_stamp		 char (24);
	dcl     auth_string		 char (24);
          dcl     Temp_status_ptr        ptr;
     

/* if the status is from an inactive journal, we don't print it */

	if ^bj_status_ptr -> bj_status.system_info (p_bj_status_index).active
	then return;

/* get a pointer to the old status info */

	if Saved_bj_status_ptr = null ()
	then do;
		bj_status_n_journals = bj_status_ptr -> bj_status.n_journals;
		allocate bj_status set (Saved_bj_status_ptr);
		do journal_index = 1 to bj_status_n_journals;
		     unspec (Saved_bj_status_ptr -> bj_status.journal (journal_index)) = ""b;
		     Saved_bj_status_ptr -> bj_status.journal (journal_index).dir = "";
		     Saved_bj_status_ptr -> bj_status.journal (journal_index).entry = "";
		     Saved_bj_status_ptr -> bj_status.journal (journal_index).bj_uid =
			bj_status_ptr -> bj_status.journal (journal_index).bj_uid;
		end;
	     end;

/* search for the given journal in the saved copy - openings may have changed */

	do saved_journal_index = 1 to Saved_bj_status_ptr -> bj_status.n_journals
	     while (Saved_bj_status_ptr -> bj_status.journal (saved_journal_index).bj_uid
	     ^= bj_status_ptr -> bj_status.journal (p_bj_status_index).bj_uid);
	end;

	if saved_journal_index = Saved_bj_status_ptr -> bj_status.n_journals + 1
	then do saved_journal_index = 1 to Saved_bj_status_ptr -> bj_status.n_journals
		while (Saved_bj_status_ptr -> bj_status.journal (saved_journal_index).bj_uid ^= ""b);
	     end;



/* Create a zero saved journal entry so that we can get some sort of stats out. */

	if saved_journal_index = Saved_bj_status_ptr -> bj_status.n_journals + 1

	then do;


		bj_status_n_journals = Saved_bj_status_ptr -> bj_status.n_journals +1;
		allocate bj_status set (Temp_status_ptr);
		do journal_index = 1 to bj_status_n_journals -1;

		     Temp_status_ptr -> bj_status.journal(journal_index) = Saved_bj_status_ptr -> bj_status.journal (journal_index);
		    Temp_status_ptr -> bj_status.journal(journal_index).dir = Saved_bj_status_ptr -> bj_status.journal (journal_index).dir;
		    Temp_status_ptr -> bj_status.journal(journal_index).entry = Saved_bj_status_ptr -> bj_status.journal (journal_index).entry;
		   Temp_status_ptr -> bj_status.journal(journal_index).bj_uid =  Saved_bj_status_ptr -> bj_status.journal (journal_index).bj_uid;

		end;

		free Saved_bj_status_ptr -> bj_status;
		Saved_bj_status_ptr = Temp_status_ptr;

		unspec (Saved_bj_status_ptr -> bj_status.journal (bj_status_n_journals)) = ""b;
		Saved_bj_status_ptr -> bj_status.journal (bj_status_n_journals).dir = "";
		Saved_bj_status_ptr -> bj_status.journal (bj_status_n_journals).entry = "";
		Saved_bj_status_ptr -> bj_status.journal (journal_index).bj_uid =
		     bj_status_ptr -> bj_status.journal (journal_index).bj_uid;
	     end;


/* at this point we have found the entry in the saved meters */

	total_bi_bytes =
	     bj_status_ptr -> bj_status.n_bi_bytes_written (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_bi_bytes_written (saved_journal_index);

	total_bi_written =
	     bj_status_ptr -> bj_status.n_bi_written (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_bi_written (saved_journal_index);

	total_non_null_txns =
	     bj_status_ptr -> bj_status.n_non_null_txn (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_non_null_txn (saved_journal_index);

	total_recycles =
	     bj_status_ptr -> bj_status.n_successful_recycles (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_successful_recycles (saved_journal_index);

	total_ci_recycled =
	     bj_status_ptr -> bj_status.n_ci_recycled (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_ci_recycled (saved_journal_index);

	if total_non_null_txns = 0
	then avg_n_bytes_per_txn = 0;
	else avg_n_bytes_per_txn = total_bi_bytes / total_non_null_txns;

	if total_bi_written = 0
	then avg_n_bytes_per_bi = 0;
	else avg_n_bytes_per_bi = total_bi_bytes / total_bi_written;

	if total_non_null_txns = 0
	then avg_n_bi_per_txn = 0;
	else avg_n_bi_per_txn = total_bi_written / total_non_null_txns;

	if total_recycles = 0
	then avg_n_ci_per_recycle = 0;
	else avg_n_ci_per_recycle = total_ci_recycled / total_recycles;

	call ioa_ ("^2/^a^[>^]^a^/", bj_status_ptr -> bj_status.dir (p_bj_status_index),
	     (bj_status_ptr -> bj_status.dir (p_bj_status_index) ^= ">"),
	     bj_status_ptr -> bj_status.entry (p_bj_status_index));
	call ioa_ ("journal size^31t^i", bj_status_ptr -> bj_status.max_size (p_bj_status_index));
	call ioa_ ("before images written^31t^i", total_bi_written);
	call ioa_ ("before image bytes written^31t^i", total_bi_bytes);
	call ioa_ ("times journal filled^31t^i",
	     bj_status_ptr -> bj_status.n_journal_full (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_journal_full (saved_journal_index));
	call ioa_ ("times txn storage limit hit^31t^i",
	     bj_status_ptr -> bj_status.n_txn_storage_limit_hits (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_txn_storage_limit_hits (saved_journal_index));
	call ioa_ ("successful recycles^31t^i", total_recycles);
	call ioa_ ("control intervals recycled^31t^i", total_ci_recycled);
	call ioa_ ("transactions started^31t^i",
	     bj_status_ptr -> bj_status.n_txn_started (p_bj_status_index)
	     - Saved_bj_status_ptr -> bj_status.n_txn_started (saved_journal_index));
	call ioa_ ("non null transactions^31t^i", total_non_null_txns);
	call ioa_ ("avg before image/transaction^31t^i", avg_n_bi_per_txn);
	call ioa_ ("avg bytes/before image^31t^i", avg_n_bytes_per_bi);
	call ioa_ ("avg bytes/transaction^31t^i", avg_n_bytes_per_txn);
	call ioa_ ("avg control intervals/recycle^31t^i", avg_n_ci_per_recycle);

	if metering_regions_filled
	     then do;
	     dm_per_journalp = addr (dm_journal.per_journal (bj_status_ptr -> bj_status.journal (p_bj_status_index).bj_ix));
	     call date_time_ (dm_per_journal.time_stamp, time_stamp);
	     call convert_access_class_$to_string (dm_per_journal.access_class, auth_string, status_code);

	     call ioa_ ("time stamp^31t^a", time_stamp);
	     call ioa_ ("pages currently held^31t^i", dm_per_journal.n_held);
	     if (status_code = 0) & (auth_string ^= "")
		then call ioa_ ("authorization^31t^a", auth_string);
	end;
	
	return;

     end PRINT_ONE_JOURNAL;


/* Include Files */

%page;
%include arg_list;
%page;
%include dm_bj_status;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_journal_seg_;
%page;

     end before_journal_meters;
