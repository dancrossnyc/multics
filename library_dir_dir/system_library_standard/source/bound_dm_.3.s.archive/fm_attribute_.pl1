/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This module and the module fm_attribute_fref_ together contain
     all operations which deal with Data Management files as file system
     objects.  These operations mimic the operations in the suffix_chess_
     example in MTB-671.
     These operations are the eventual targets of entries in
     fs_util_, the file system utility for handling file system objects
     and extended objects. fm_attribute_fref_ contains those operations
     which require the process to be using Data Management - per-process
     initialization will be executed if it has not already been executed.
     This module, fm_attribute_, contains those operations which do not
     require the process to be using Data Management.
*/

/* HISTORY:

Written by Steve Herbst, 02/25/83.
            (Copied from mbx_suffix_.)
Modified:
03/25/83 by S. Herbst:  Deleted $delentry_file (file_manager_ will call 
            file_manager_$delete), fixed bugs.
05/23/83 by S. Herbst:  Fixed $suffix_info to return modes of "rew".
06/17/83 by S. Herbst:  Changed $suffix_info to set new copy_flags.
06/28/83 by S. Herbst:  Changed to use copy_flags.incl.pl1.
07/07/83 by S. Herbst:  Fixed ACL entries to reject modes other than r, rw, 
            and null.
07/20/83 by S. Herbst:  Fixed $get_user_access_modes to return the mode on 
            the 1st component.
08/18/83 by S. Herbst:  Added suffix_info.info_pathname.
10/25/83 by L. Spratt: Added sub_error_ handler to validate_proc to turn any 
            sub_error_ into a not_seg_type error .
12/12/83 by Lee Baldwin:  Changed the description and history sections to the
            canonical format.
12/13/83 by Lee Baldwin:  Moved ACL primitives from fm_open_ to this
            procedure.  Changed entries which require validation to use
            fm_validate_ instead of validate_proc.  Removed the "open" and
            "validate_proc" routines.  Removed the format: off stmt.
12/22/83 by Matthew Pierret:  Changed to return dm_error_$file_not_dm_type if
            the call to fm_validate_ fails.
03/16/84 by Matthew Pierret:  Changed to return dm_error_$file_not_dm_type
            only if fm_validate_ returns error_table_$not_seg_type.
07/30/84 by Matthew Pierret:  Changed to check extended ring brackets.
11/13/84 by Matthew Pierret:  Split into fm_attribute_ and fm_attribute_fref_.
            Moved get_switch and chname_file to fm_attribute_fref_.
            Changed list_switches to return the protection, concurrency and
            rollback switches.
12/06/84 by Matthew Pierret:  Changed RETURN to set p_code to 0.  Changed
            list_switches to not call RETURN as it does not have a p_code.
            Added declaration for rtrim, removed several declarations of 
            un-used variables.
12/07/84 by Lee A. Newcomb:  Removed rtrim usage in pathname_ calls.
12/20/84 by Matthew Pierret:  Changed several entries to match the calling
            sequences of suffix_chess_ in MTB671, which fm_attribute_ and
            fm_attribute_fref_ are intended to duplicate.
            add_acl_entries - removed p_acl_count, made to accept only
            p_acl_ptr->general_acl, convert general_acl to segment_acl_array
            for use by msf_manager_$acl_add;
            add_extended_acl_entries - changed p_exmodes to p_acl_ptr;
            delete_acl_entries - removed p_arg_count, made to accept only
            p_acl_ptr->general_acl, convert general_acl to delete_acl_array;
            get_user_access_modes - to set validation level;
            list_acl - removed p_listed_acl_ptr, p_explicit_acl_ptr and
            p_acl_count in favor of p_acl_ptr, made to correctly interpret
            input values (null p_acl_ptr means get everything, non-null
            p_acl_ptr means get whats in p_acl_ptr->general_acl, null
            p_user_area_ptr means allocate in get_user_free_area_()), made
            to convert to and from segment_acl_array around calls to
            msf_manager_, add p_version_wanted parameter;
            list_extended_acl - add p_version_wanted parameter;
            list_switches - added short names of switches, add p_code and
            p_version_wnated parameters, made to use get_user_free_area_() if 
            p_user_area_ptr is null;
            replace_acl - removed p_acl_count, made to only accept
            general_acl, to convert general_acl to segment_acl_array;
            replace_extended_acl - removed p_acl_count.
12/26/84 by Matthew Pierret: Changed suffix_info to set type, standard_object,
            and num_ring_brackets.
01/03/85 by Lee A. Newcomb:  Fixed $get_user_access_modes to set p_modes
            return parameter instead of leaving it null; fixed "Written by"
            HISTORY line so subsys_add_journalization.ec works.
01/04/85 by Matthew Pierret:  Fixed replace_acl's one incorrect use of
            segment_acl to the correct general_acl.  Changed suffix_info
            to return a max_mode_len of 3 (instead of 2) and the mode string
            "r w" (instead of "rw").  This change allows callers to use
            the standard access mode constants.
05/12/85 by S. Cox: (add delete)_acl_entries/replace_acl: Chg so the DM daemon 
	  will always have 'rw' access, overriding whatever the user gave.
04/16/85 by Lindsey L. Spratt:  Added initializtion to "null()" for all of the
            automatic pointers.  Initializing msf_ptr to null fixed a bug in
            calls to the FINISH proc where spurious attempts to close the
            (non-existent) msf identified by the (garbage) msf_ptr caused
            random faults.  Added initialization to UNSET_VALIDATION_LEVEL of
	  the callers_validation_level.  These initializations were being 
	  done in the INIT_FOR_FINISH proc, but not all entries remembered
	  to call INIT_FOR_FINISH.  Doing the inits in the declarations
	  guarantees that the initializations are done, rather than rely on
	  each entry to remember to call INIT_FOR_FINISH.
	       Changed suffix_info entry to turn off the copy flags for
	  max_length, and the copy and dumper switches.  Changed uses of
	  "1"b and "0"b to YES and NO, respectively.
*/

/* format: style2,ind3 */
%page;
fm_attribute_$suffix_info:
   procedure (p_suffix_info_ptr);


/* Parameter */

      dcl	    p_acl_ptr	       pointer parameter;
      dcl	    p_bit_count	       fixed bin (24) parameter;
      dcl	    p_code	       fixed bin (35) parameter;
      dcl	    p_ename	       char (*) parameter;
      dcl	    p_exmodes	       bit (36) aligned parameter;
      dcl	    p_dirname	       char (*) parameter;
      dcl	    p_max_length	       fixed bin (19) parameter;
      dcl	    p_modes	       bit (36) aligned parameter;
      dcl	    p_no_sysdaemon	       bit (1) parameter;
      dcl	    p_ring	       fixed bin parameter;
      dcl	    p_ring_brackets	       (2) fixed bin (3) parameter;
      dcl	    p_suffix_info_ptr      pointer parameter;
      dcl	    p_switch_list_ptr      ptr parameter;
      dcl	    p_switch_name	       char (*) parameter;
      dcl	    p_switch_value	       bit (1) parameter;
      dcl	    p_user_area_ptr	       pointer parameter;
      dcl	    p_user_name	       char (*) parameter;
      dcl	    p_version_wanted       char (*) parameter;

/* Automatic */

      dcl	    dirname	       char (168);
      dcl	    ename		       char (32);
      dcl	    user_name	       char (64);
      dcl	    version_wanted	       char (8) aligned;

      dcl	    delete_acl_array_ptr   ptr init (null ());
      dcl	    msf_ptr	       ptr init (null ());
      dcl	    segment_acl_array_ptr  ptr init (null ());
      dcl	    system_area_ptr	       ptr init (null ());
      dcl	    user_area_ptr	       ptr init (null ());


      dcl	    acl_idx	       fixed bin;
      dcl	    callers_validation_level
			       fixed bin init (UNSET_VALIDATION_LEVEL);
      dcl	    attempt_to_change_daemon_access
			       bit (1) aligned init (NO);
      dcl	    code		       fixed bin (35) init (0);
      dcl	    extended_ring_brackets (2) fixed bin (3);
      dcl	    exmodes	       bit (36) aligned;
      dcl	    mode_bits	       bit (3);
      dcl	    modes		       bit (36) aligned;
      dcl	    no_sysdaemon	       bit (1);
      dcl	    ring		       fixed bin;

/* Based */

      dcl	    user_area	       area based (user_area_ptr);
      dcl	    system_area	       area based (system_area_ptr);

/* Builtins */

      dcl	    (null, string, substr, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    READ_BRACKET_IDX       init (2),
	    WRITE_BRACKET_IDX      init (1)
	    )		       fixed bin internal static options (constant);
/**** Cannot use dm_system_data_$initializer_name since it sets off the fref */
      dcl	    DM_INITIALIZER_NAME    char (32) aligned static options (constant) init ("Data_Management.Daemon.*");
      dcl	    UNSET_VALIDATION_LEVEL init (-1) fixed bin internal static options (constant);
      dcl	    (
	    NO		       init ("0"b),
	    YES		       init ("1"b)
	    )		       bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    fm_validate_$check_read_ring_bracket
			       entry (char (*), char (*), fixed bin (35));
      dcl	    fm_validate_$check_write_ring_bracket
			       entry (char (*), char (*), fixed bin (35));
      dcl	    fm_validate_$get_ring_brackets
			       entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
      dcl	    get_ring_	       entry returns (fixed bin);
      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    get_user_free_area_    entry () returns (ptr);
      dcl	    hcs_$get_user_access_modes
			       entry (char (*), char (*), char (*), fixed bin, bit (36) aligned, bit (36) aligned,
			       fixed bin (35));
      dcl	    msf_manager_$acl_add   entry (ptr, ptr, fixed bin, fixed bin (35));
      dcl	    msf_manager_$acl_delete
			       entry (ptr, ptr, fixed bin, fixed bin (35));
      dcl	    msf_manager_$acl_list  entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin (35));
      dcl	    msf_manager_$acl_replace
			       entry (ptr, ptr, fixed bin, bit (1), fixed bin (35));
      dcl	    msf_manager_$close     entry (ptr);
      dcl	    msf_manager_$open      entry (char (*), char (*), ptr, fixed bin (35));
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));

/* External */

      dcl	    dm_error_$file_not_dm_type
			       fixed bin (35) ext;
      dcl	    error_table_$invalid_mode
			       fixed bin (35) ext;
      dcl	    error_table_$not_seg_type
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    error_table_$unsupported_operation
			       fixed bin (35) ext;
%page;
/* DESCRIPTION OF suffix_info ENTRY:

        Returns generic information about DM files.  
   p_suffix_info_ptr must point to a suffix_info structure which has
   its version element set.
*/

/* The actual entry is the main procedure statement. 
   It is repeated here for clarity.

suffix_info:
   entry (p_suffix_info_ptr);
*/

      suffix_info_ptr = p_suffix_info_ptr;

      suffix_info.version = SUFFIX_INFO_VERSION_1;
      suffix_info.type = FS_OBJECT_TYPE_DM_FILE;
      suffix_info.type_name = "DM file";
      suffix_info.plural_name = "DM files";
      string (suffix_info.flags) = ""b;
      suffix_info.standard_object = YES;
      suffix_info.extended_acl = NO;
      suffix_info.modes = "r w";
      suffix_info.max_mode_len = 3;
      suffix_info.num_ring_brackets = 2;

      unspec (suffix_info.copy_flags) = ""b;
      suffix_info.copy_flags.names = YES;
      suffix_info.copy_flags.acl = YES;
      suffix_info.copy_flags.max_length = NO;
      suffix_info.copy_flags.copy_switch = NO;
      suffix_info.copy_flags.safety_switch = NO;
      suffix_info.copy_flags.dumper_switches = NO;

      suffix_info.info_pathname = "";

MAIN_RETURN:
      return;

RETURN:
   proc ();

      p_code = 0;
      go to MAIN_RETURN;

   end RETURN;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

      if msf_ptr ^= null ()
      then call msf_manager_$close (msf_ptr);
      if delete_acl_array_ptr ^= null
      then
         do;
	  free delete_acl_array_ptr -> delete_acl_array;
	  delete_acl_array_ptr = null ();
         end;
      if segment_acl_array_ptr ^= null ()
      then
         do;
	  free segment_acl_array_ptr -> segment_acl_array;
	  segment_acl_array_ptr = null ();
         end;
      if callers_validation_level ^= UNSET_VALIDATION_LEVEL
      then call cu_$level_set (callers_validation_level);

   end FINISH;
%page;
/* DESCRIPTION OF add_acl_entries ENTRY:
   
        Adds ACL entries to a DM file.
   
   p_dirname is the pathname of the directory containing the DM file.
   p_ename is the entry name of the DM file.
   p_acl_ptr points to a general_acl structure containing the new
             ACL entries.
   p_code is an output status code.
*/

add_acl_entries:
   entry (p_dirname, p_ename, p_acl_ptr, p_code);

      dirname = p_dirname;
      ename = p_ename;
      acl_ptr = p_acl_ptr;

      code = 0;

      if acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1
      then call ERROR_RETURN (error_table_$unimplemented_version);

      acl_count = acl_ptr -> general_acl.count;
      do acl_idx = 1 to acl_count;			/* check for invalid DM file modes */
         mode_bits = substr (acl_ptr -> general_acl.entries (acl_idx).mode, 1, 3);
         if mode_bits ^= R_ACCESS & mode_bits ^= RW_ACCESS & mode_bits ^= N_ACCESS
         then call ERROR_RETURN (error_table_$invalid_mode);
      end;

      call fm_validate_$check_write_ring_bracket (dirname, ename, code);
      if code ^= 0
      then if code = error_table_$not_seg_type
	 then call ERROR_RETURN (dm_error_$file_not_dm_type);
	 else call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      system_area_ptr = get_system_free_area_ ();

      allocate segment_acl_array in (system_area) set (segment_acl_array_ptr);

      segment_acl_array_ptr -> segment_acl_array.access_name (*) = acl_ptr -> general_acl.entries.access_name (*);
      segment_acl_array_ptr -> segment_acl_array.mode (*) = acl_ptr -> general_acl.entries.mode (*);
      segment_acl_array_ptr -> segment_acl_array.extended_mode (*) = ""b;
      segment_acl_array_ptr -> segment_acl_array.status_code (*) = acl_ptr -> general_acl.entries.status_code (*);

      do acl_idx = 1 to acl_count
	 while (segment_acl_array_ptr -> segment_acl_array (acl_idx).access_name ^= DM_INITIALIZER_NAME);
      end;
      if acl_idx <= acl_count				/* daemon access must be rw */
      then segment_acl_array_ptr -> segment_acl_array (acl_idx).mode = RW_ACCESS;

      call msf_manager_$open (dirname, ename, msf_ptr, code);
      if msf_ptr = null
      then call ERROR_RETURN (code);

      call msf_manager_$acl_add (msf_ptr, segment_acl_array_ptr, acl_count, code);
      if code ^= 0
      then call ERROR_RETURN (code);


      call FINISH ();

      call RETURN ();
%page;
/* DESCRIPTION OF add_extended_acl_entries ENTRY:  Unsupported */

add_extended_acl_entries:
   entry (p_dirname, p_ename, p_acl_ptr, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);


/*  DESCRIPTION OF delete_acl_entries ENTRY:
   
        Deletes ACL entries from a DM file.
   
   p_dirname is the pathname of the directory containing the DM file.
   p_ename is the entry name of the DM file.
   p_acl_ptr points to a general_acl structure containing the 
             ACL entries to be deleted.
   p_code is an output status code.

*/

delete_acl_entries:
   entry (p_dirname, p_ename, p_acl_ptr, p_code);

      dirname = p_dirname;
      ename = p_ename;
      acl_ptr = p_acl_ptr;

      code = 0;
      attempt_to_change_daemon_access = NO;

      if acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1
      then call ERROR_RETURN (error_table_$unimplemented_version);

      acl_count = acl_ptr -> general_acl.count;

      call fm_validate_$check_write_ring_bracket (dirname, ename, code);
      if code ^= 0
      then if code = error_table_$not_seg_type
	 then call ERROR_RETURN (dm_error_$file_not_dm_type);
	 else call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      system_area_ptr = get_system_free_area_ ();

      alloc delete_acl_array in (system_area) set (delete_acl_array_ptr);

      delete_acl_array_ptr -> delete_acl_array.access_name (*) = acl_ptr -> general_acl.entries.access_name (*);
      delete_acl_array_ptr -> delete_acl_array.status_code (*) = acl_ptr -> general_acl.entries.status_code (*);

      do acl_idx = 1 to acl_count
	 while (delete_acl_array_ptr -> delete_acl_array (acl_idx).access_name ^= DM_INITIALIZER_NAME);
      end;
      if acl_idx <= acl_count
      then attempt_to_change_daemon_access = YES;		/* explicitly readd daemon access */

      call msf_manager_$open (dirname, ename, msf_ptr, code);
      if msf_ptr = null
      then call ERROR_RETURN (code);

      call msf_manager_$acl_delete (msf_ptr, delete_acl_array_ptr, acl_count, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if attempt_to_change_daemon_access
      then
         do;
	  allocate segment_acl_array in (system_area) set (segment_acl_array_ptr);
	  unspec (segment_acl_array_ptr -> segment_acl_array) = ""b;
	  segment_acl_array_ptr -> segment_acl_array.access_name (1) = DM_INITIALIZER_NAME;
	  segment_acl_array_ptr -> segment_acl_array.mode (1) = RW_ACCESS;
	  call msf_manager_$acl_add (msf_ptr, segment_acl_array_ptr, (1), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;

      call FINISH ();

      call RETURN ();
%page;
/* DESCRIPTION OF get_bit_count ENTRY:  Unsupported. */

get_bit_count:
   entry (p_dirname, p_ename, p_bit_count, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);

/* DESCRIPTION OF get_max_length ENTRY:  Unsupported. */

get_max_length:
   entry (p_dirname, p_ename, p_max_length, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);
%page;
/* DESCRIPTION OF get_ring_brackets ENTRY:

        Gets the file ring brackets of the DM file.  The file ring brackets
   are maintained by file_manager_ and are not necessarily the same as the
   file system ring brackets.  The file ring brackets are stored in two
   places: the file_attributes in the file and in an encoded form as the
   bit count of the file's first component.  This entry gets the encoded
   ring brackets, which can be referenced without requiring per-process
   initialization.
*/

get_ring_brackets:
   entry (p_dirname, p_ename, p_ring_brackets, p_code);

      dirname = p_dirname;
      ename = p_ename;

      code = 0;

      call fm_validate_$get_ring_brackets (dirname, ename, extended_ring_brackets, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      p_ring_brackets (*) = extended_ring_brackets (*);

      call RETURN ();
%page;
/* DESCRIPTION OF get_user_access_modes ENTRY:

        Gets the access modes and extended access modes (not yet supported) 
   of a DM file for a user.
*/

get_user_access_modes:
   entry (p_dirname, p_ename, p_user_name, p_ring, p_modes, p_exmodes, p_code);

      dirname = p_dirname;
      ename = p_ename;
      user_name = p_user_name;
      ring = p_ring;


      code = 0;
      p_modes = ""b;
      p_exmodes = ""b;				/* Not supported */

      call fm_validate_$get_ring_brackets (dirname, ename, extended_ring_brackets, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      call hcs_$get_user_access_modes (pathname_ (dirname, ename), "0", user_name, get_ring_ (), modes, exmodes, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if ring <= extended_ring_brackets (WRITE_BRACKET_IDX)
      then modes = (modes & RW_ACCESS);
      else if ring <= extended_ring_brackets (READ_BRACKET_IDX)
      then modes = (modes & R_ACCESS);
      else modes = ""b;

      call FINISH ();

      p_modes = modes;
      call RETURN ();
%page;
/* DESCRIPTION OF list_acl ENTRY:
   
        Lists ACL entries on a DM file.

   p_dirname is the pathname of the directory containing the DM file.
   p_ename is the entry name of the DM file.
   p_version_wanted is the version of the structure to be returned.
             Only GENERAL_ACL_VERSION_1 is supported.
   p_user_area_ptr is a pointer to an area in which to allocate the return
             if one must be allocated.  If null, get_user_free_area_() is used.
   p_acl_ptr is a pointer to a general_acl structure.  If null, the general_acl
             structure is allocated in the user area and contains all of the
             ACL entries on the file.  If non-null, then p_acl_ptr->general_acl
             is filled in with the ACL entries specified by
             p_acl_ptr->general_acl.entries.access_name(*).
   p_code is an output status code.

   */

list_acl:
   entry (p_dirname, p_ename, p_version_wanted, p_user_area_ptr, p_acl_ptr, p_code);

      dirname = p_dirname;
      ename = p_ename;
      version_wanted = p_version_wanted;
      user_area_ptr = p_user_area_ptr;
      acl_ptr = p_acl_ptr;


      code = 0;

      if acl_ptr = null ()
      then if version_wanted ^= GENERAL_ACL_VERSION_1
	 then call ERROR_RETURN (error_table_$unimplemented_version);
	 else acl_count = 0;
      else if acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1
      then call ERROR_RETURN (error_table_$unimplemented_version);
      else acl_count = acl_ptr -> general_acl.count;

      call fm_validate_$check_read_ring_bracket (dirname, ename, code);
      if code ^= 0
      then if code = error_table_$not_seg_type
	 then call ERROR_RETURN (dm_error_$file_not_dm_type);
	 else call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      call msf_manager_$open (dirname, ename, msf_ptr, code);
      if msf_ptr = null
      then call ERROR_RETURN (code);

      system_area_ptr = get_system_free_area_ ();
      if acl_ptr ^= null ()
      then
         do;
	  alloc segment_acl_array in (system_area) set (segment_acl_array_ptr);
	  segment_acl_array_ptr -> segment_acl_array.access_name (*) = acl_ptr -> general_acl.entries.access_name (*);

	  call msf_manager_$acl_list (msf_ptr, null (), null (), segment_acl_array_ptr, acl_count, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  acl_ptr -> general_acl.entries.access_name (*) = segment_acl_array_ptr -> segment_acl_array.access_name (*);
	  acl_ptr -> general_acl.entries.mode (*) = segment_acl_array_ptr -> segment_acl_array.mode (*);
	  acl_ptr -> general_acl.entries.status_code (*) = segment_acl_array_ptr -> segment_acl_array.status_code (*);

         end;
      else
         do;
	  call msf_manager_$acl_list (msf_ptr, system_area_ptr, segment_acl_array_ptr, null (), acl_count, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  if user_area_ptr = null
	  then user_area_ptr = get_user_free_area_ ();

	  alloc general_acl in (user_area) set (acl_ptr);

	  acl_ptr -> general_acl.version = version_wanted;
	  acl_ptr -> general_acl.entries.access_name (*) = segment_acl_array_ptr -> segment_acl_array.access_name (*);
	  acl_ptr -> general_acl.entries.mode (*) = segment_acl_array_ptr -> segment_acl_array.mode (*);
	  acl_ptr -> general_acl.entries.status_code (*) = segment_acl_array_ptr -> segment_acl_array.status_code (*);
         end;

      p_acl_ptr = acl_ptr;

      call FINISH ();

      call RETURN ();


/* DESCRIPTION OF list_extended_acl ENTRY:  Unsupported. */

list_extended_acl:
   entry (p_dirname, p_ename, p_version_wanted, p_user_area_ptr, p_acl_ptr, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);
%page;
/* DESCRIPTION OF list_switches ENTRY:
     
        Returns names of non-standard switches.  Three switches are
   supported: protection, concurrency and rollback.

   p_version_wanted is the version of the switch_list to be returned.
             Only SWITCH_LIST_VERSION_1 is supported.   
   p_user_area_ptr points to the area in which the output switch_list structure
             is to be allocated.  If null, get_user_free_area_() is used.
   p_switch_list_ptr is set to point to the allocated switch_list structure.
   p_code is a status code.
*/

list_switches:
   entry (p_version_wanted, p_user_area_ptr, p_switch_list_ptr, p_code);

      version_wanted = p_version_wanted;
      user_area_ptr = p_user_area_ptr;



      if version_wanted ^= SWITCH_LIST_VERSION_1
      then call ERROR_RETURN (error_table_$unimplemented_version);
      if user_area_ptr = null
      then user_area_ptr = get_user_free_area_ ();

      alloc_switch_count = 3;
      alloc_switch_name_count = 6;
      allocate switch_list in (user_area);

      switch_list.version = SWITCH_LIST_VERSION_1;

      switch_list.switches (1).name_index = 1;
      switch_list.switches (1).name_count = 2;
      switch_list.switches (1).default_value = YES;
      switch_list.switches (1).mbz1 = ""b;
      switch_list.names (1) = "protection";
      switch_list.names (2) = "prot";

      switch_list.switches (2).name_index = 2;
      switch_list.switches (2).name_count = 2;
      switch_list.switches (2).default_value = YES;
      switch_list.switches (2).mbz1 = ""b;
      switch_list.names (3) = "concurrency";
      switch_list.names (4) = "conc";

      switch_list.switches (3).name_index = 3;
      switch_list.switches (3).name_count = 2;
      switch_list.switches (3).default_value = YES;
      switch_list.switches (3).mbz1 = ""b;
      switch_list.names (5) = "rollback";
      switch_list.names (6) = "rlb";

      p_switch_list_ptr = switch_list_ptr;

      call RETURN ();
%page;
/* DESCRIPTION OF replace_acl ENTRY:

        Replaces the ACL of a DM file.

      p_dirname is the pathname of the directory containing the DM file.
      p_ename is the entry anem of the DM file.
      p_acl_ptr points to the general_acl structure which is the new ACL.
      p_pno_sysdaemon indicates, if on, to ignore the SysDaemon ACL entry.
      p_code is a status code.
 */

replace_acl:
   entry (p_dirname, p_ename, p_acl_ptr, p_no_sysdaemon, p_code);

      dirname = p_dirname;
      ename = p_ename;
      acl_ptr = p_acl_ptr;
      no_sysdaemon = p_no_sysdaemon;

      code = 0;
      attempt_to_change_daemon_access = NO;

      if acl_ptr = null
      then acl_count = 1;				/* allow one for readding daemon */
      else
         do;
	  if acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1
	  then call ERROR_RETURN (error_table_$unimplemented_version);
	  acl_count = acl_ptr -> general_acl.count;
	  do acl_idx = 1 to acl_count;		/* check for invalid DM file modes */
	     mode_bits = substr (acl_ptr -> general_acl.entries (acl_idx).mode, 1, 3);
	     if mode_bits ^= R_ACCESS & mode_bits ^= RW_ACCESS & mode_bits ^= N_ACCESS
	     then call ERROR_RETURN (error_table_$invalid_mode);
	  end;
         end;

      call fm_validate_$check_write_ring_bracket (dirname, ename, code);
      if code ^= 0
      then if code = error_table_$not_seg_type
	 then call ERROR_RETURN (dm_error_$file_not_dm_type);
	 else call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      call msf_manager_$open (dirname, ename, msf_ptr, code);
      if msf_ptr = null
      then call ERROR_RETURN (code);

      system_area_ptr = get_system_free_area_ ();

      if acl_ptr = null ()				/* daemon must be on acl */
      then
         do;
	  allocate segment_acl_array in (system_area) set (segment_acl_array_ptr);
	  unspec (segment_acl_array_ptr -> segment_acl_array) = ""b;
	  segment_acl_array_ptr -> segment_acl_array.access_name (1) = DM_INITIALIZER_NAME;
	  segment_acl_array_ptr -> segment_acl_array.mode (1) = RW_ACCESS;
         end;
      else
         do;
	  allocate segment_acl_array in (system_area) set (segment_acl_array_ptr);
	  segment_acl_array_ptr -> segment_acl_array.access_name (*) = acl_ptr -> general_acl.entries.access_name (*);
	  segment_acl_array_ptr -> segment_acl_array.mode (*) = acl_ptr -> general_acl.entries.mode (*);
	  segment_acl_array_ptr -> segment_acl_array.extended_mode (*) = ""b;
	  segment_acl_array_ptr -> segment_acl_array.status_code (*) = acl_ptr -> general_acl.entries.status_code (*);

	  do acl_idx = 1 to acl_count
	       while (segment_acl_array_ptr -> segment_acl_array (acl_idx).access_name ^= DM_INITIALIZER_NAME);
	  end;
	  if acl_idx <= acl_count
	  then segment_acl_array_ptr -> segment_acl_array (acl_idx).mode = RW_ACCESS;
	  else attempt_to_change_daemon_access = YES;	/* daemon not specified so explicitly readd it */
         end;

      call msf_manager_$acl_replace (msf_ptr, segment_acl_array_ptr, acl_count, no_sysdaemon, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if attempt_to_change_daemon_access
      then
         do;
	  unspec (segment_acl_array_ptr -> segment_acl_array) = ""b;
	  segment_acl_array_ptr -> segment_acl_array.access_name (1) = DM_INITIALIZER_NAME;
	  segment_acl_array_ptr -> segment_acl_array.mode (1) = RW_ACCESS;
	  call msf_manager_$acl_add (msf_ptr, segment_acl_array_ptr, (1), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;

      call FINISH ();

      call RETURN ();

/* DESCRIPTION OF replace_extended_acl ENTRY:  Unsupported: */

replace_extended_acl:
   entry (p_dirname, p_ename, p_acl_ptr, p_no_sysdaemon, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);
%page;

/* DESCRIPTION OF set_bit_count ENTRY:  Unsupported. */

set_bit_count:
   entry (p_dirname, p_ename, p_bit_count, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);


/* DESCRIPTION OF set_max_length ENTRY:  Unsupported. */

set_max_length:
   entry (p_dirname, p_ename, p_max_length, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);

/* DESCRIPTION OF set_switch ENTRY:  Unsupported. */

set_switch:
   entry (p_dirname, p_ename, p_switch_name, p_switch_value, p_code);

      call ERROR_RETURN (error_table_$unsupported_operation);
%page;
%include acl_structures;
%page;
%include access_mode_values;
%page;
%include copy_flags;
%page;
%include suffix_info;

   end fm_attribute_$suffix_info;
