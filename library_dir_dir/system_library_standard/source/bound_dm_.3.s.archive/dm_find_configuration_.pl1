/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

dm_find_configuration_:
     proc () returns (ptr);				/* returns a dm_system_config_ptr */


/* DESCRIPTION:

	This program returns a pointer to the data management configuration
     file in the per-AIM directory.  There  are  several  important points:
     - the configuration file MUST exist,
     - no validation is performed on the file; the config is simply initiated
       and a pointer to the start of the file is returned.

	A terminate entry is provided for cleaning up the address space
     of a process finished with the configuration file.
*/

/* HISTORY:

Written by Lee A. Newcomb, 05/03/83.
Modified:
05/06/83 by Lee A. Newcomb:  Changed to just return ptr to file, nothing more.
05/09/83 by Lee A. Newcomb:  added calls to sub_err_ when non-zero codes
            returned from calls made.
11/22/84 by Lee A. Newcomb:  To use dm_misc_util_$get_aim_dir.
*/
%page;
/* START OF DECLARATIONS */

dcl						/* Parameters */
     p_dm_system_config_ptr	        ptr		/* only used in terminate entry */
			        parameter;

dcl  (						/* Automatics */
     aim_dir		        char (168),
     code			        fixed bin (35),
     dm_system_config_ptr	        ptr		/* used by main entry */
     )			        automatic;

dcl						/* Builtins & Conditions */
     null			        builtin,
     cleanup		        condition;

dcl  (						/* Constants */
     myname		        char (32) varying init ("dm_find_configuration_"),
     CONFIG_FILE		        char (32) init ("dm_configuration")
     )			        internal static options (constant);

dcl						/* Entries */
     dm_misc_util_$get_aim_dir        entry (char (*)),
     hcs_$initiate		        entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     sub_err_		        entry () options (variable),
     term_$seg_ptr		        entry (ptr, fixed bin (35));


/* END OF DECLARATIONS */
%page;
/* Initialize parameter, local status code, and establish cleanup handler */

	dm_system_config_ptr = null ();
	code = 0;					/* no problems yet */

	on cleanup
	     call CLEAN_UP ();

/* Find the per-AIM directory */

	call dm_misc_util_$get_aim_dir (aim_dir);
	if code ^= 0 then
	     call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
		"Cannot find per-AIM directory to contain DM configuration file.");

/* Find the configuration file */

	call hcs_$initiate (aim_dir, CONFIG_FILE, "",
	     0, 0, dm_system_config_ptr, code);		/* no reserved segno */
	if dm_system_config_ptr = null () then do;
	     call CLEAN_UP ();
	     call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
		"Cannot initiate DM configuration file ^a>^a.", aim_dir, CONFIG_FILE);
	end;

	return (dm_system_config_ptr);
%page;
/* This entry simply cleans up the process address space. */

terminate:
     entry (p_dm_system_config_ptr);

/* initialize local status code for testing */

	code = 0;

/* just call term_ to do the real work */

	call term_$seg_ptr (p_dm_system_config_ptr, code);
	if code ^= 0 then
	     call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
		"Cannot terminate reference to configuration file, seg no ^p.", p_dm_system_config_ptr);

	p_dm_system_config_ptr = null ();

	return;
%page;
CLEAN_UP:
     proc ();

/* Currently, we need only terminate the reference to the config file */

	if dm_system_config_ptr ^= null () then		/* we have the file known */
	     if code = 0 then do;			/* and this program is the one that did it */
		call term_$seg_ptr (dm_system_config_ptr, (0) /* ignore code */);
		dm_system_config_ptr = null ();
	     end;

	return;

     end CLEAN_UP;
%page;
%include sub_err_flags;


     end dm_find_configuration_;
