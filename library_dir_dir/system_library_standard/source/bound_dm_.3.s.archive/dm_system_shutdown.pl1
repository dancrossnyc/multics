/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: ^indcomtxt */
/* DESCRIPTION:

       This routine implements the dm_system_shutdown command and the 
  "shutdown" DM daemon request.  The command and request are almost
  identical, having the same syntax, but differ slightly in how they are
  invoked.  The shutdown request is an ssu_ subsystem request.
  
  The main procedure implements the dm_system_shutdown command. It sets up
  up an ssu_ standalone invocation.  
  The entry dm_system_shutdown$shutdown_request implements the request.
  It is invoked from within an ssu_ subsystem, so does not have to create
  a subsystem invocation, instead just using the p_sci_ptr passed to
  it as a parameter to identify the subsystem invocation.  As required of
  an ssu_ request procedure it also takes a p_info_ptr parameter, but that
  parameter is not used.
  
  The command is expected to be executed in a Data Management administrator's
  process, the request in the Data Management daemon's process.  Despite the
  difference, for simplicity the code is the same no matter which process in
  which it is being executed.  This is why a request is sent to the daemon
  to finish up scheduling the shutdown, even though we might already be in
  the daemon's process.
  
  Error handling is done in the standard ssu_ manner, using ssu_$abort_line
  and ssu_$print_message.  
  
  The argument processing technology deserves some explanation.  The constant
  array CONTROL_ARGUMENT has the names of all control arguments.  The constant
  array ARGUMENT_TYPE contains a short description of the type of argument 
  expected to follow a given control argument.  The index into CONTOL_ARGUMENT
  of a control argument corresponds with the index of its expected argument 
  type in ARGUMENT_TYPE.  The type is used in error messages only.
  
  Two variables control the argument processing, accept_control_argument (a
  flag) and control argument_idx (an array index).  If accept_control_argument
  is on, the argument being processed is expected to be a control argument.  
  If it is off, the argument must not be a control argument.  When 
  accept_control_argument is on, control_argument_idx is equal to -1,
  otherwise it is equal to the CONTROL_ARGUMENT index of the last control 
  argument last processed.
  
  Each argument is processed in one iteration of the ARG_PROCESSING_LOOP as
  follows: If accept_control_argument is on, process it as a control argument
  by calling PROCESS_CONTROL_ARGUMENT, which will set accept_control_argument
  to off if it expects an argument to follow and will set control_argument_idx
  to its CONTROL_ARGUMENT index.  If accept_control_argument is off and the
  argument being processed does not begin with "-" (the trigger character
  for control arguments), process the argument by calling
  PROCESS_ARGUMENT, which will reset accept_control_argument to on and 
  control_argument_idx to -1 if no more arguments are expected for the
  current control argument.  If accept_control_argument is off and the
  argument being processed is a supported control argument, abort;
  otherwise call PROCESS_ARGUMENT.
  
  PROCESS_ARGUMENT also processes the argument it is given is a fashion
  particular to the current control argument (e.g., processes the 
  argument following -user_bump_time as a time string, the one following
  -dm_system_directory as a pathname) and stores the processed value of the
  argument in the arg_info structure.
  
  
  Following is info file documentation of the dm_system_shutdown command.
  The request has the same syntax, with the name shutdown instead of
  dm_system_shutdown.
  
                                (continued)
  
  08/21/84 dm_system_shutdown
  
  Syntax:  dm_system_shutdown {-cargs}


  Function:  This command schedules a Data Management system (DMS)
  shutdown.  The DMS can be specified by the pathname of the its
  per-system directory, i.e., the directory in which it resides.  By
  default, the DMS which this process is currently using is scheduled to
  be shut down.  Processes using the DMS are notified of the scheduled
  shutdown via the dm_shutdown_scheduled_ IPS signal.
  
  The system shutdown process consists of five events executed at the
  following five points in time, usually, but not necessarily, in the
  given order:
  
  1) At user-warning-time:
     a warning message is printed in each process using the
     DMS as follows:
  
     DM is shutting down; no new transaction will be allowed after
     9:00.  Please use the dm_ser_shutdown command, or, at 9:15, a
     forced shutdown will be done.  Shutdown reason:  {reason from
     dm_system_data_}.

  2) At begin-shutdown-time:
     the Data Management daemon puts the DMS in a state wherin
     no new transactions can be created.  This is considered the
     beginning of the DMS shutdown.

  3) At user-shutdown-time:
     for each user process still using the DMS, a DM user
     shutdown is executed in the process.  A message is printed
     informing the user, as follows:

     The Data Management system is shutting down; starting DM user
     shutdown.  Shutdown reaon:  {reason from dm_system_data_}.

  4) At user-bump-time:
     the Data Management daemon bumps each process still using
     the DMS.

  5) At daemon-logout-time:
     the shutdown is made complete by logging out the Data
     Management daemon.

  The time of each event is determined according to the following rules:

   1) If the time is specified with a control argument ending in
      "_time" the event is scheduled to occur at that time.
   2) Starting from each specified time, the times for
      subsequent events are calculated using the specified or
      default delays, until an event is reached which has a
      specified time.
   3) If the first event is not scheduled, then starting from
      the first specified time, calculate the times for previous
      events using specified or default delays, until the first
      event is reached.
   4) If no times are specified, the user-bump-time defaults to
      the scheduled Multics shutdown time, and other times are
      calculated from there.
   5) If no times are specified and there is no Multics shutdown
      scheduled, an error message is returned.


  Control arguments:
  -dm_system_directory PATH, -dmsd PATH
     is the pathname, PATH, of the DM per-system directory in which the
     DMS resides.  Several DMSs may reside in the DM per-system directory.
     The one selected is the one for the current bootload at the AIM
     authorization of the caller.  If not specified, the default DMS is
     the DMS the process is currently using.  If not specified and the
     process is not currently using a DMS, an error message is printed and
     no action is performed.
  -reason STRING
     is the reason, STRING, why the DMS is being shut down.  This reason
     is ultimately part of the messages received by users of the DMS.  If
     not specified, a prompt is issued for the reason.  STRING can be no
     longer than 64 characters.  STRING must be quoted if it contains
     whitespace.
  -user_warning_time TIME, -uwtm TIME
     specifies the user-warning-time.  TIME may be absolute or relative to
     the time at which the dm_system_shutdown command is invoked.  TIME
     must be acceptable to the convert_date_to_binary_ subroutine.  If no
     user-warning-time is specified, the default is to use the config file
     begin_shutdown_delay to determine the user-warning-time, calculating
     backwrads in time.
  -begin_shutdown_delay DELAY, -bsd DELAY
     specifies the time period between the user-warning-time and the
     begin-shutdown-time.  DELAY must be in a form acceptable to the
     convert_date_to_binary_ subroutine.  If no begin-shutdown-time is
     specified, the default is to use the config file begin_shutdown_delay
     to determine the begin-shutdown-time.
  -begin_shutdown_time TIME, -bstm TIME
     specifies the begin-shutdown-time.  TIME may be absolute or relative
     to the time at which the dm_system_shutdown command is invoked.  TIME
     must be acceptable to the convert_date_to_binary_ subroutine.  If no
     begin-shutdown-time is specified, the default is to use the config
     file begin_shutdown_delay to determine the begin-shutdown-time.
  -user_shutdown_delay DELAY, -usd DELAY
     specifies the time period between the begin-shutdown-time and the
     user-shutdown-time.  DELAY must be in a form acceptable to the
     convert_date_to_binary_ subroutine.  If no user-shutdown-time is
     specified, the default is to use the config file user_shutdown_delay
     to determine the user-shutdown-time.
  -user_shutdown_time TIME, -ustm TIME
     specifies the user-shutdown-time.  TIME may be absolute or relative
     to the time at which the dm_system_shutdown command is invoked.  TIME
     must be acceptable to the convert_date_to_binary_ subroutine.  If no
     user-shutdown-time is specified, the default is to use the config
     file user_shutdown_delay to determine the user-shutdown-time.
  -user_bump_delay DELAY, -ubd DELAY
     specifies the time period between the user-shutdown-time and the
     user-bump-time.  DELAY must be in a form acceptable to the
     convert_date_to_binary_ subroutine.  If no user-bump-time is
     specified, the default is to use the config file user_bump_delay to
     determine the user-bump-time.
  -user_bump_time TIME, -ubtm TIME
     specifies the user-bump-time.  TIME may be absolute or relative to
     the time at which the dm_system_shutdown command is invoked.  TIME
     must be acceptable to the convert_date_to_binary_ subroutine.  If no
     times are specified via a -..._time control argument, the
     user-bump-time defaults to the scheduled Multics shutdown time.  If a
     time other than the user-bump-time is specified, the default is to
     use the config file user_bump_delay to determine the user-bump-time.
  -daemon_logout_delay DELAY, -dld DELAY
     specifies the time period between the user-bump-time and the
     daemon-logout-time.  DELAY must be in a form acceptable to the
     convert_date_to_binary_ subroutine.  If no daemon-logout-time is
     specified, the default is to use the config file daemon_logout_delay
     to determine the daemon-logout-time.
  -daemon_logout_time TIME, -dltm TIME
     specifies the daemon-logout-time.  TIME may be absolute or relative
     to the time at which the dm_system_shutdown command is invoked.  TIME
     must be acceptable to the convert_date_to_binary_ subroutine.  If no
     daemon-logout-time is specified, the default is to use the config
     file daemon_logout_delay to determine the daemon-logout-time.
  

  Notes on access requirements:  're' permission to dm_admin_gate_ is
  required to execute this command.


  Examples:

  Given:
     Multics shutdown scheduled for 8:00.
     All default delays are five minutes.

  dm_system_shutdown -bsd 20min

     Schedules shutdown with following times:
       user-warning:  7:30 (specified delay)
       begin-shutdown:  7:50 (default delay)
       user-shutdown:  7:55 (default delay)
       user-bump:  8:00 (default time)
       daemon-logout:  8:05 (default delay)

  dm_system_shutdown -uwtm 5:00 -ustm 6:10 -ubtm 6:00

     Schedules shutdown with following times:
       user-warning:  5:00 (specified time)
       begin-shutdown:  5:05 (default delay)
       user-shutdown:  6:10 (specified time)
       user-bump:  6:00 (specified time)
       daemon-logout:  6:05 (default delay)
*/

/* HISTORY:

Written by Matthew Pierret, 09/05/84.
Modified:
10/03/84 by Lee A. Newcomb:  to call dm_misc_util_$set_system_dir as this
	  entry is not privileged now and call it with a code arg.
10/04/84 by Lee A. Newcomb:  Set char strings that are tested to "" after
            unspec'ing the structure containing them, e.g.,
            arg_info.dm_system_directory.
10/29/84 by Lee A. Newcomb:  Fixed to not use dm_ prefix in dm_misc_util
            entries.
11/22/84 by Lee A. Newcomb:  Changed dm_misc_util_$(get set)_system_dir
	  to use correct calling sequences.
02/22/85 by Lee A. Newcomb:  Fixed the short names of the -*_time control args
            to all end with "tm" instead of "t" (e.g., -uwt --> -uwtm).
03/19/85 by S. Cox: Added dm_not_available_ handler.
*/

/* format: style2,ll79,indnoniterend,^indnoniterdo */
/* format: comcol50,indblkcom,indcomtxt */
%page;
dm_system_shutdown:
     proc ();

/* START OF DECLARATIONS */
/* Parameter */

	dcl     p_info_ptr		 ptr parm;
	dcl     p_sci_ptr		 ptr parm;

/* Automatic */

	dcl     arg_info_ptr	 ptr;
	dcl     arg_list_ptr	 ptr;
	dcl     accept_control_argument
				 bit (1) aligned;
	dcl     arg_idx		 fixed bin;
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     control_argument_idx	 fixed bin;
	dcl     is_active_function	 bit (1) aligned;
	dcl     number_of_args	 fixed bin;
	dcl     return_arg_len	 fixed bin (21);
	dcl     return_arg_ptr	 ptr;

	dcl     myname		 char (32);
	dcl     myversion		 char (32);
	dcl     1 my_arg_info	 aligned like arg_info;
	dcl     1 my_shutdown_info	 aligned like shutdown_info;

	dcl     code		 fixed bin (35) init (0);
	dcl     info_ptr		 ptr;
	dcl     sci_ptr		 ptr;
	dcl     this_is_a_standalone_invocation
				 bit (1) aligned;
	dcl     begin_shutdown_time_string
				 char (16);
	dcl     user_bump_time_string	 char (16);
	dcl     dummy_tm_shutdown_info_ptr
				 ptr;

/* Based */

	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     1 arg_info		 aligned based (arg_info_ptr),
		2 spec		 aligned like shutdown_spec,
		2 dm_system_directory
				 char (168) unal;

/* Builtin */

	dcl     (addr, hbound, index, length, min, null, rtrim, substr,
	        unspec)		 builtin;

/* Constant */

	dcl     (
	        YES		 init ("1"b),
	        NO		 init ("0"b)
	        )			 bit (1) aligned int static
				 options (constant);
	dcl     (
	        COMMAND_NAME	 init ("dm_system_shutdown"),
	        COMMAND_VERSION	 init ("1.0"),
	        REQUEST_NAME	 init ("shutdown"),
	        REQUEST_VERSION	 init ("1.0")
	        )			 char (32) int static
				 options (constant);
	dcl     ARGUMENT_TYPE	 (22) internal static
				 options (constant) char (64)
				 varying
				 init ("pathname", "pathname",
				 "reason", "reason", "time", "time",
				 "time", "time", "time delay",
				 "time delay", "time", "time",
				 "time delay", "time delay", "time",
				 "time", "time delay", "time delay",
				 "time", "time", "time delay",
				 "time delay");

	dcl     CONTROL_ARGUMENT	 (22) internal static
				 options (constant) char (64)
				 varying
				 init ("-dm_system_directory", "-dmsd",
				 "-reason", "-reason",
				 "-user_warning_time", "-uwtm",
				 "-begin_shutdown_time", "-bstm",
				 "-begin_shutdown_delay", "-bsd",
				 "-user_shutdown_time", "-ustm",
				 "-user_shutdown_delay", "-usd",
				 "-user_bump_time", "-ubtm",
				 "-user_bump_delay", "-ubd",
				 "-daemon_logout_time", "-dltm",
				 "-daemon_logout_delay", "-dld");


/* Condition */

	dcl     dm_not_available_	 condition;

/* Entry */

	dcl     absolute_pathname_	 entry (char (*), char (*),
				 fixed bin (35));
	dcl     convert_date_to_binary_
				 entry (char (*), fixed bin (71),
				 fixed bin (35));
	dcl     convert_date_to_binary_$relative
				 entry (char (*), fixed bin (71),
				 fixed bin (71), fixed bin (35));
	dcl     clock_		 entry () returns (fixed bin (71));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     dm_admin_util_$schedule_shutdown
				 entry (ptr, ptr);
	dcl     dm_misc_util_$get_system_dir
				 entry (char (*));
	dcl     dm_misc_util_$set_system_dir
				 entry (char (*));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr,
				 fixed bin (21));
	dcl     ssu_$destroy_invocation
				 entry (ptr);
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     ssu_$return_arg	 entry (ptr, fixed bin,
				 bit (1) aligned, ptr, fixed bin (21));
	dcl     ssu_$standalone_invocation
				 entry (ptr, char (*), char (*), ptr,
				 entry, fixed bin (35));
	dcl     transaction_manager_$user_shutdown
				 entry (ptr, ptr, fixed bin (35));

/* External */

	dcl     dm_error_$dm_shutdown_not_sched
				 ext fixed bin (35);
	dcl     dm_error_$system_not_initialized
				 fixed bin (35) ext static;
	dcl     error_table_$active_function
				 ext fixed bin (35);
	dcl     error_table_$badopt	 ext fixed bin (35);
	dcl     error_table_$noarg	 ext fixed bin (35);

/* END OF DECLARATIONS */
%page;
	myname = COMMAND_NAME;
	myversion = COMMAND_VERSION;
	this_is_a_standalone_invocation = "1"b;
	call cu_$arg_list_ptr (arg_list_ptr);
	call ssu_$standalone_invocation (sci_ptr, myname, myversion,
	     arg_list_ptr, ABORT_ENTRY, code);

	on dm_not_available_
	     call ssu_$abort_line (sci_ptr, dm_error_$system_not_initialized)
		;

	go to JOIN;

shutdown_request:
     entry (p_sci_ptr, p_info_ptr);

	myname = REQUEST_NAME;
	myversion = REQUEST_VERSION;
	this_is_a_standalone_invocation = "0"b;
	sci_ptr = p_sci_ptr;
	info_ptr = p_info_ptr;
	go to JOIN;

JOIN:				         /* Process arguments. */
	call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
	     return_arg_ptr, return_arg_len);

	if is_active_function
	then call ssu_$abort_line (sci_ptr, error_table_$active_function,
		myname);

	arg_info_ptr = addr (my_arg_info);
	unspec (arg_info) = ""b;
	arg_info.spec.version = SHUTDOWN_SPEC_VERSION_1;
	arg_info.spec.reason = "";	         /* so if x = "" works */
	arg_info.dm_system_directory = "";     /* '' */

	accept_control_argument = YES;
	control_argument_idx = -1;

ARG_PROCESSING_LOOP:
	do arg_idx = 1 to number_of_args;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	     if accept_control_argument = YES
	     then call PROCESS_CONTROL_ARGUMENT (arg, arg_info_ptr,
		     control_argument_idx, accept_control_argument);
	     else if index (arg, "-") ^= 1
	     then call PROCESS_ARGUMENT (arg, arg_info_ptr,
		     control_argument_idx, accept_control_argument);
	     else if (CONTROL_ARGUMENT_INDEX (arg) = -1)
	     then call PROCESS_ARGUMENT (arg, arg_info_ptr,
		     control_argument_idx, accept_control_argument);
	     else call ssu_$abort_line (sci_ptr, error_table_$noarg,
		     "^a must be followed by a^[n^] ^a.",
		     CONTROL_ARGUMENT (control_argument_idx),
		     (
		     index ("aeiouh",
		     substr (ARGUMENT_TYPE (control_argument_idx), 1, 1))
		     > 0), ARGUMENT_TYPE (control_argument_idx));
	end ARG_PROCESSING_LOOP;

	if control_argument_idx >= 0 & accept_control_argument = NO
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^a must be followed by a^[n^] ^a.",
		CONTROL_ARGUMENT (control_argument_idx),
		(
		index ("aeiouh",
		substr (ARGUMENT_TYPE (control_argument_idx), 1, 1)) > 0),
		ARGUMENT_TYPE (control_argument_idx));


	if arg_info.dm_system_directory = ""
	then call dm_misc_util_$get_system_dir (arg_info.dm_system_directory)
		;
	else do;
	     dummy_tm_shutdown_info_ptr = null ();
	     call transaction_manager_$user_shutdown (
		get_system_free_area_ (), dummy_tm_shutdown_info_ptr, code)
		;
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		     "^/Could not shutdown use of a Data Management system."
		     );
	     call dm_misc_util_$set_system_dir (arg_info.dm_system_directory)
		;
	     end;
	;

	unspec (my_shutdown_info) = ""b;
	my_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;

	call dm_admin_util_$schedule_shutdown (addr (arg_info.spec),
	     addr (my_shutdown_info));

	if my_shutdown_info.output_flags.no_time_specified
	then call ssu_$abort_line (sci_ptr, dm_error_$dm_shutdown_not_sched,
		"No time was specified, and there is no Multics shutdown scheduled."
		);
	else if my_shutdown_info.output_flags.times_have_changed
	then do;
	     call date_time_ (my_shutdown_info.times.begin_shutdown_time,
		begin_shutdown_time_string);
	     call date_time_ (my_shutdown_info.times.user_bump_time,
		user_bump_time_string);
	     call ssu_$print_message (sci_ptr, 0,
		"DM system shutdown scheduled to begin at ^a, to bump users at ^a.",
		begin_shutdown_time_string, user_bump_time_string);
	     end;
	else call ssu_$print_message (sci_ptr,
		dm_error_$dm_shutdown_not_sched,
		"^/The current Multics shutdown time is earlier than the specified time."
		);

MAIN_RETURN:
	call CLEANUP ();
	return;


ABORT_ENTRY:
     procedure ();
	go to MAIN_RETURN;
     end ABORT_ENTRY;

CLEANUP:
     procedure ();
	if this_is_a_standalone_invocation
	then call ssu_$destroy_invocation (sci_ptr);
	else ;
     end CLEANUP;
%page;
PROCESS_ARGUMENT:
     proc (pa_p_arg, pa_p_arg_info_ptr, pa_p_control_argument_idx,
	pa_p_accept_control_argument);

	dcl     pa_p_arg		 char (*) parm;
	dcl     pa_p_arg_info_ptr	 ptr parm;
	dcl     pa_p_control_argument_idx
				 fixed bin parm;
	dcl     pa_p_accept_control_argument
				 bit (1) aligned parm;

	dcl     pa_code		 fixed bin (35);
	dcl     pa_computed_time	 fixed bin (71);
	dcl     pa_current_time	 fixed bin (71);

	pa_code = 0;

	goto ARGUMENT (pa_p_control_argument_idx);

ARGUMENT (1):			         /* -dm_system_directory */
ARGUMENT (2):			         /* -dmsd */
	call absolute_pathname_ ((pa_p_arg),
	     pa_p_arg_info_ptr -> arg_info.dm_system_directory, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (3):			         /* -reason */
ARGUMENT (4):			         /* -reason */
	pa_p_arg_info_ptr -> arg_info.spec.reason =
	     substr (pa_p_arg, 1, min (length (rtrim (pa_p_arg)), 64));

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (5):			         /* -user_warning_time */
ARGUMENT (6):			         /* -uwtm */
	call convert_date_to_binary_ (pa_p_arg,
	     pa_p_arg_info_ptr -> arg_info.spec.times.user_warning_time,
	     pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (7):			         /* -begin_shutdown_time */
ARGUMENT (8):			         /* -bstm */
	call convert_date_to_binary_ (pa_p_arg,
	     pa_p_arg_info_ptr -> arg_info.spec.times.begin_shutdown_time,
	     pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (9):			         /* -begin_shutdown_delay */
ARGUMENT (10):			         /* -bsd */
	pa_current_time = clock_ ();
	call convert_date_to_binary_$relative (pa_p_arg, pa_computed_time,
	     pa_current_time, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);
	pa_p_arg_info_ptr -> arg_info.spec.delays.begin_shutdown_delay =
	     pa_computed_time - pa_current_time;

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (11):			         /* -user_shutdown_time */
ARGUMENT (12):			         /* -ustm */
	call convert_date_to_binary_ (pa_p_arg,
	     pa_p_arg_info_ptr -> arg_info.spec.times.user_shutdown_time,
	     pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (13):			         /* -user_shutdown_delay */
ARGUMENT (14):			         /* -usd */
	pa_current_time = clock_ ();
	call convert_date_to_binary_$relative (pa_p_arg, pa_computed_time,
	     pa_current_time, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);
	pa_p_arg_info_ptr -> arg_info.spec.delays.user_shutdown_delay =
	     pa_computed_time - pa_current_time;

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (15):			         /* -user_bump_time */
ARGUMENT (16):			         /* -ubtm */
	call convert_date_to_binary_ (pa_p_arg,
	     pa_p_arg_info_ptr -> arg_info.spec.times.user_bump_time,
	     pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (17):			         /* -user_bump_delay */
ARGUMENT (18):			         /* -ubd */
	pa_current_time = clock_ ();
	call convert_date_to_binary_$relative (pa_p_arg, pa_computed_time,
	     pa_current_time, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);
	pa_p_arg_info_ptr -> arg_info.spec.delays.user_bump_delay =
	     pa_computed_time - pa_current_time;

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (19):			         /* -daemon_logout_time */
ARGUMENT (20):			         /* -dltm */
	call convert_date_to_binary_ (pa_p_arg,
	     pa_p_arg_info_ptr -> arg_info.spec.times.daemon_logout_time,
	     pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;

ARGUMENT (21):			         /* -daemon_logout_delay */
ARGUMENT (22):			         /* -dld */
	pa_current_time = clock_ ();
	call convert_date_to_binary_$relative (pa_p_arg, pa_computed_time,
	     pa_current_time, pa_code);
	if pa_code ^= 0
	then call ssu_$abort_line (sci_ptr, pa_code, pa_p_arg);
	pa_p_arg_info_ptr -> arg_info.spec.delays.daemon_logout_delay =
	     pa_computed_time - pa_current_time;

	pa_p_control_argument_idx = -1;
	pa_p_accept_control_argument = "1"b;
	return;


     end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
     proc (pca_p_arg, pca_p_arg_info_ptr, pca_p_control_argument_idx,
	pca_p_accept_control_argument);


	dcl     pca_p_arg		 char (*) parm;
	dcl     pca_p_arg_info_ptr	 ptr parm;
	dcl     pca_p_control_argument_idx
				 fixed bin parm;
	dcl     pca_p_accept_control_argument
				 bit (1) aligned parm;

	pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);

	go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):		         /* not a control argument */
	call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):		         /* -dm_system_directory */
CONTROL_ARGUMENT (2):		         /* -dmsd */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (3):		         /* -reason */
CONTROL_ARGUMENT (4):		         /* -reason */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (5):		         /* -user_warning_time */
CONTROL_ARGUMENT (6):		         /* -uwtm */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (7):		         /* -begin_shutdown_time */
CONTROL_ARGUMENT (8):		         /* -bstm */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (9):		         /* -begin_shutdown_delay */
CONTROL_ARGUMENT (10):		         /* -bsd */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (11):		         /* -user_shutdown_time */
CONTROL_ARGUMENT (12):		         /* -ustm */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (13):		         /* -user_shutdown_delay */
CONTROL_ARGUMENT (14):		         /* -usd */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (15):		         /* -user_bump_time */
CONTROL_ARGUMENT (16):		         /* -ubtm */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (17):		         /* -user_bump_delay */
CONTROL_ARGUMENT (18):		         /* -ubd */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (19):		         /* -daemon_logout_time */
CONTROL_ARGUMENT (20):		         /* -dltm */
	pca_p_accept_control_argument = "0"b;
	return;
CONTROL_ARGUMENT (21):		         /* -daemon_logout_delay */
CONTROL_ARGUMENT (22):		         /* -dld */
	pca_p_accept_control_argument = "0"b;
	return;

     end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
     proc (cai_p_arg) returns (fixed bin);

	dcl     cai_p_arg		 char (*);
	dcl     cai_control_argument_idx
				 fixed bin;

	do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	     while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg)
	     ;
	end;
	if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
	then return (-1);
	else return (cai_control_argument_idx);

     end CONTROL_ARGUMENT_INDEX;
%page;
%include dm_shutdown_spec;

     end dm_system_shutdown;
