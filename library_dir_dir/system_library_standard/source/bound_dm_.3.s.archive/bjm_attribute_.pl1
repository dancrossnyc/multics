/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This is the target module for most of the calls done by the extended
     objects software for before journals.  We simply set the validation level
     to the DM ring, forward the call to file_manager_, and reset the
     validation level.  The one operation not here is delentry_file which
     suffix_bj_ directly transfers to before_journal_manager_.

	The following are the operations in this module:

	$add_acl_entries	$get_user_access_modes	$replace_acl
	$chname_file	$list_acl			$validate
	$delete_acl_entries

     NOTES:

     1) In all the entrypoints except $validate, we simply pass the parameters
     on to file_manager_ without using them; in $validate we actually use the
     input parameters so must copy them and pass the copies to file_manager_.

     2) We do not currently prevent a user from deleting the Data_Management
     Daemon's access to a before journal, nor prevent the setting of write
     only access to any user.  If this becomes a problem, then it may can be
     changed; but probably should be done in conjunction with a change to
     file_manager_ to protect against users deleting Daemon access from
     protected files (which will probably require setting off the per-process
     init first-reference trap).
*/

/* HISTORY:

Written by Lee A. Newcomb, 12/13/84.
Modified:
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
bjm_attribute_$add_acl_entries:
   proc (p_directory_name, p_entry_name, p_acl_ptr, p_code);


/* START OF DECLARATIONS */

/* Parameter */
dcl  (
     p_acl_ptr			ptr,
     p_code			fixed bin (35),
     p_directory_name		char (*),
     p_entry_name			char (*),
     p_exmodes			bit (36) aligned,
     p_modes			bit (36) aligned,
     p_new_name			char (*),
     p_no_sysdaemon			bit (1),
     p_old_name			char (*),
     p_ring			fixed bin,
     p_user_area_ptr		ptr,
     p_user_name			char (*),
     p_version_wanted		char (*)
     )				parameter;

/* Automatic */
dcl  (
     callers_validation_level		fixed bin init (-1),/* init -1 for RETURN */
     code				fixed bin (35) init (0),
     dirname			char (168) init (""),
     ename			char (32) init (""),
     new_name			char (32) init (""),
     old_name			char (32) init (""),
     dm_ring			fixed bin init (-1),
     ring_brackets			dim (2) fixed bin (3) init (-1, -1)
     )				automatic;

/* Based */
/* Builtin */
dcl  (length, reverse, rtrim, substr)	builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
/* Entry */
dcl  (
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     file_manager_$add_acl_entries	entry (char (*), char (*), ptr,
				fixed bin (35)),
     file_manager_$chname_file	entry (char (*), char (*), char (*),
				char (*), fixed bin (35)),
     file_manager_$delete_acl_entries	entry (char (*), char (*), ptr,
				fixed bin (35)),
     file_manager_$get_ring_brackets	entry (char (*), char (*),
				dim (2) fixed bin (3), fixed bin (35)),
     file_manager_$get_user_access_modes
				entry (char (*), char (*), char (*),
				fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35)),
     file_manager_$list_acl		entry (char (*), char (*), char (*),
				ptr, ptr, fixed bin (35)),
     file_manager_$replace_acl	entry (char (*), char (*), ptr, bit,
				fixed bin (35)),
     file_manager_$validate		entry (char (*), char (*),
				fixed bin (35)),
     get_ring_			entry () returns (fixed bin (3))
     )				external;

/* External */
dcl  (
     dm_error_$bj_invalid_name	fixed bin (35),
     error_table_$not_seg_type	fixed bin (35),
     error_table_$unsupported_operation fixed bin (35)
     )				external static;

/* END OF DECLARATIONS */
%page;
/* repeat main procedure statement for reader's convenience:	*/
/*							*/
/* bjm_attribute_$add_acl_entries:				*/
/*     proc (p_directory_name, p_entry_name, p_acl_ptr, p_code);	*/

   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$add_acl_entries (p_directory_name, p_entry_name,
        p_acl_ptr, code);

   call RETURN (code);

/* end bjm_attribute_$add_acl_entries; */




bjm_attribute_$chname_file:
   entry (p_directory_name, p_entry_name, p_old_name, p_new_name, p_code);

/* must copy old and new name parameters as we read >1 times. */
   old_name = p_old_name;
   new_name = p_new_name;

/* currently we do not allow name deletion; this requires	*/
/* synchronizing the BJ_PST.				*/
   if old_name ^= "" then
      call RETURN (error_table_$unsupported_operation);

/* make sure the .bj suffix is on the new entryname */
   if length (rtrim (new_name)) = 0 then		/* can't delete a name */
      call RETURN (error_table_$unsupported_operation);
   if length (rtrim (new_name)) <= 3 then		/* prevent string range cond. */
      call RETURN (dm_error_$bj_invalid_name);
   if substr (reverse (rtrim (new_name)), 1, 3) ^= "jb." then
      call RETURN (dm_error_$bj_invalid_name);

   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$chname_file (p_directory_name, p_entry_name, old_name,
        new_name, code);

   call RETURN (code);

/* end bjm_attribute_$chname_file; */




bjm_attribute_$delete_acl_entries:
   entry (p_directory_name, p_entry_name, p_acl_ptr, p_code);

   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$delete_acl_entries (p_directory_name, p_entry_name,
        p_acl_ptr, code);

   call RETURN (code);

/* end bjm_attribute_$delete_acl_entries; */
%page;
bjm_attribute_$get_user_access_modes:
   entry (p_directory_name, p_entry_name, p_user_name, p_ring, p_modes,
        p_exmodes, p_code);

/* note we ignore the given p_ring and use the current	*/
/* ring of execution (the process' DM ring, normally	*/
/* sys_info$data_management_ringno unless testing).	*/
/* This is because before journals are DM files with RB's	*/
/* of 2,2 and we have no other RB's on BJ's.		*/

   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$get_user_access_modes (p_directory_name, p_entry_name,
        p_user_name, get_ring_ (), p_modes, p_exmodes, code);

   call RETURN (code);

/* end bjm_attribute_$get_user_access_modes */




bjm_attribute_$list_acl:
   entry (p_directory_name, p_entry_name, p_version_wanted, p_user_area_ptr,
        p_acl_ptr, p_code);


   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$list_acl (p_directory_name, p_entry_name,
        p_version_wanted, p_user_area_ptr, p_acl_ptr, code);

   call RETURN (code);

/* end bjm_attribute_$list_acl */




bjm_attribute_$replace_acl:
   entry (p_directory_name, p_entry_name, p_acl_ptr, p_no_sysdaemon, p_code);


   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   call cu_$level_set (get_ring_ ());

   call file_manager_$replace_acl (p_directory_name, p_entry_name, p_acl_ptr,
        p_no_sysdaemon, code);

   call RETURN (code);

/* end bjm_attribute_$replace_acl; */
%page;
bjm_attribute_$validate:
   entry (p_directory_name, p_entry_name, p_code);

/* Note:  we first call file_manager_$validate as before journals are	*/
/* unprotected DM files.  If file_manager_ returns an error, we	*/
/* simply return its returned code.  If not, we then check the ring	*/
/* brackets of the file to make sure they are {DM ring, DM ring}, if	*/
/* not, we return error_table_$not_seg_type since this is the code	*/
/* the extended object software expects if the file is not a BJ.	*/

/* must copy parameters as we will use them >1 times */
   dirname = p_directory_name;
   ename = p_entry_name;

   call cu_$level_get (callers_validation_level);
   on cleanup call cu_$level_set (callers_validation_level);
   dm_ring = get_ring_ ();
   call cu_$level_set (dm_ring);

   call file_manager_$validate (dirname, ename, code);
   if code ^= 0 then
      call RETURN (code);				/* just pass code back, fm_ has set it properly */

   call file_manager_$get_ring_brackets (dirname, ename, ring_brackets, code);
   if code ^= 0 then
      call RETURN (error_table_$not_seg_type);

   if ring_brackets (1) ^= dm_ring | ring_brackets (2) ^= dm_ring then
      call RETURN (error_table_$not_seg_type);

   call RETURN (0);					/* must be a BJ */

/* end bjm_attribute_$validate; */
%page;
MAIN_RETURN:
   return;


RETURN:
   proc (r_p_code);

/* proc to centralize returning to caller for all external entries	*/
/* and to reset the validation level to that of the caller.		*/

dcl  r_p_code			fixed bin (35);

   if callers_validation_level > 0 then
      call cu_$level_set (callers_validation_level);

   p_code = r_p_code;				/* tell caller if all is well */

   go to MAIN_RETURN;

   end RETURN;


   end bjm_attribute_$add_acl_entries;
