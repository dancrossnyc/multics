/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Made to convert seconds into minutes instead of hours.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

This command displays metering information about Data Management fast locking.
*/

/* HISTORY:

Written by Stanford S. Cox, 03/28/85.
Modified:
05/12/85 by S. Cox: Moved metering delta calculations into ioa_ call.
*/
/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
%page;
dm_fast_lock_meters:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

dcl     accept_control_argument	bit (1) aligned init ("0"b);
dcl     arg_idx			fixed bin;
dcl     arg_len			fixed bin (21);
dcl     arg_list_ptr		ptr init (null);
dcl     arg_ptr			ptr;
dcl     code			fixed bin (35);
dcl     control_argument_idx		fixed bin;
dcl     current_time		fixed bin (71);
dcl     force_interpretation_as_argument
				bit (1) aligned init (NO);
dcl     is_active_function		bit (1) aligned init (NO);
dcl     1 local_lock_list_meters	aligned like lock_list_meters;
dcl     number_of_args		fixed bin;
dcl     report_current_meters		bit (1) aligned init (YES);
dcl     reset_saved_meters		bit (1) aligned init (NO);
dcl     sci_ptr			ptr init (null);
dcl     this_is_a_standalone_invocation bit (1) aligned init (YES);

/* Based */

dcl     arg			char (arg_len) based (arg_ptr);
dcl     1 saved_lock_list_meters	aligned like lock_list_meters based (saved_lock_list_meters_ptr);
dcl     system_area			area based (get_system_free_area_ ());

/* Builtin */

dcl     (addr, clock, divide, hbound, index, mod, null, substr, unspec)
				builtin;
dcl     (cleanup, dm_not_available_)	condition;

/* Constant */

dcl     (
        YES			init ("1"b),
        NO			init ("0"b)
        )				bit (1) aligned internal static options (constant);
dcl     myname			init ("dm_fast_lock_meters") char (19) internal static options (constant);

dcl     (
        MICROSECONDS_PER_SECOND	init (1e6),
        MINUTES_PER_HOUR		init (60),
        SECONDS_PER_HOUR		init (3600),
        SECONDS_PER_MINUTE		init (60)
        )				fixed bin (35) internal static options (constant);

dcl     ARGUMENT_TYPE		(4) internal static options (constant) char (64) varying init ("", "", "", "");
dcl     CONTROL_ARGUMENT		(4) internal static options (constant) char (64) varying
				init ("-reset", "-rs", "-report_reset", "-rr");

/* Static */

dcl     (
        saved_lock_list_meters_ptr	ptr init (null ()),
        saved_time			fixed bin (71)
        )				internal static;

/* Entry */

dcl     cu_$arg_list_ptr		entry (ptr);
dcl     dm_misc_util_$get_initialization_time
				entry () returns (fixed bin (71));
dcl     get_system_free_area_		entry () returns (ptr);
dcl     ioa_			entry () options (variable);
dcl     lock_manager_$copy_fast_data	entry (ptr, ptr, fixed bin (35));
dcl     ssu_$abort_line		entry () options (variable);
dcl     ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin (21));
dcl     ssu_$arg_count		entry (ptr, fixed bin);
dcl     ssu_$destroy_invocation	entry (ptr);
dcl     ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
dcl     sub_err_			entry () options (variable);

/* External */

dcl     (
        dm_error_$system_not_initialized,
        error_table_$action_not_performed,
        error_table_$bad_arg,
        error_table_$badopt,
        error_table_$noarg,
        error_table_$unimplemented_version
        )				fixed bin (35) external;

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on dm_not_available_ call ERROR_RETURN (dm_error_$system_not_initialized, "");
      on cleanup call CLEANUP ();

      call ssu_$arg_count (sci_ptr, number_of_args);

      accept_control_argument = YES;
      control_argument_idx = -1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call REPORT_MISSING_ARGUMENT (control_argument_idx);
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call REPORT_MISSING_ARGUMENT (control_argument_idx);

      call lock_manager_$copy_fast_data (null (), addr (local_lock_list_meters), code);
      if code = error_table_$action_not_performed then call ERROR_RETURN (code, "Fast locks are not being metered");
      else if code ^= 0 then call ERROR_RETURN (code, "Getting temporary segment to hold lock data");
      call CHECK_VERSION (LOCK_LIST_METERS_VERSION_1, local_lock_list_meters.version, "lock_list_meters");

      current_time = clock ();

      if saved_lock_list_meters_ptr = null () then do;
         allocate saved_lock_list_meters in (system_area);
         unspec (saved_lock_list_meters) = "0"b;
         saved_time = dm_misc_util_$get_initialization_time ();
      end;

      if report_current_meters then do;
         call DISPLAY_TOTAL_METERING_TIME (current_time - saved_time);
         call ioa_ (
	    "Fast lock or waiter block:^/thread in calls / steps^5xthread out calls / steps^/^9x^6d^2x^6d^15x^6d^2x^6d",
	    local_lock_list_meters.thrdin_calls - saved_lock_list_meters.thrdin_calls,
	    local_lock_list_meters.thrdin_steps - saved_lock_list_meters.thrdin_steps,
	    local_lock_list_meters.thrdout_calls - saved_lock_list_meters.thrdout_calls,
	    local_lock_list_meters.thrdout_steps - saved_lock_list_meters.thrdout_steps);
      end;

      if reset_saved_meters then do;
         saved_lock_list_meters = local_lock_list_meters;
         saved_time = current_time;
      end;

      call FINISH;

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_code, er_message);


dcl     er_code			fixed bin (35) parameter;
dcl     er_message			char (*) parameter;

      call ssu_$abort_line (sci_ptr, er_code, er_message);
   end;

ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;



CLEANUP:
   procedure ();
      call FINISH ();
   end CLEANUP;

FINISH:
   proc ();
      call ssu_$destroy_invocation (sci_ptr);
   end FINISH;

DISPLAY_TOTAL_METERING_TIME:
   proc (dmt_p_duration_in_microseconds);

dcl     dmt_p_duration_in_microseconds	fixed bin (71);
dcl     dmt_duration_in_seconds	fixed bin (71);
dcl     dmt_hours			fixed bin (71);
dcl     dmt_minutes			fixed bin (71);
dcl     dmt_seconds			fixed bin (71);

      dmt_duration_in_seconds = divide (dmt_p_duration_in_microseconds, MICROSECONDS_PER_SECOND, 71, 0);
      dmt_seconds = mod (dmt_duration_in_seconds, SECONDS_PER_MINUTE);
      dmt_minutes = mod (divide (dmt_duration_in_seconds, SECONDS_PER_MINUTE, 71, 0), MINUTES_PER_HOUR);
      dmt_hours = divide (dmt_duration_in_seconds, SECONDS_PER_HOUR, 71, 0);

      call ioa_ ("^/Total metering time:^2x^i:^[0^]^i:^[0^]^i^/", dmt_hours, (dmt_minutes < 10), dmt_minutes,
	 (dmt_seconds < 10), dmt_seconds);

   end DISPLAY_TOTAL_METERING_TIME;

CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl     cv_p_expected_version		char (8) aligned parameter;
dcl     cv_p_received_version		char (8) aligned parameter;
dcl     cv_p_structure_name		char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;

PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

dcl     pa_p_arg			char (*) parm;
dcl     pa_p_control_argument_idx	fixed bin parm;
dcl     pa_p_accept_control_argument	bit (1) aligned parm;

dcl     pa_code			fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;
   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


dcl     pca_p_arg			char (*) parm;
dcl     pca_p_control_argument_idx	fixed bin parm;
dcl     pca_p_accept_control_argument	bit (1) aligned parm;
dcl     pca_p_force_interpretation_as_argument
				bit (1) aligned parm;

      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -reset */
CONTROL_ARGUMENT (2):				/* -rs */
      reset_saved_meters = YES;
      report_current_meters = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (3):				/* -report_reset */
CONTROL_ARGUMENT (4):				/* -rr */
      reset_saved_meters = YES;
      report_current_meters = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

dcl     cai_p_arg			char (*);
dcl     cai_control_argument_idx	fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;

REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);
dcl     rma_p_control_argument_idx	fixed bin parm;

      call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	 CONTROL_ARGUMENT (rma_p_control_argument_idx),
	 (index ("aeiouh", substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
	 ARGUMENT_TYPE (rma_p_control_argument_idx));
   end REPORT_MISSING_ARGUMENT;
%page;
%include dm_lock_list_strucs;
%page;
%include sub_err_flags;
   end dm_fast_lock_meters;
