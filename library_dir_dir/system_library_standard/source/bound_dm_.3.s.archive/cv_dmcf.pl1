/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: ^indcom */

/* DESCRIPTION:
   cv_dmcf - command to convert a data management (system) configuration file
   into table form.  although the table will have the suffix "dmct" when
   installed, the suffix is to be dropped, and the daemon will look for a
   segment called "dm_system_configuration".

   Usage:
	cv_dmcf <config_file_path>
*/
/* HISTORY:

Written by M. Pandolf, 03/01/83.
Modified:
05/29/84 by Lindsey L. Spratt:  Changed to use version 2 dm_system_config.
            Various minor enhancements; use initiate_file_ and
            terminate_file_, terminate all segments initiated by this command,
            delete the table segment when exiting due to an error, use
            suffixed_name_ instead of inline code, make the format standard.
12/10/84 by R. Michael Tague:  Changed to use ERROR_RETURN in place of com_err_
            & ERROR_RETURN, fixed up things a bit.
*/
/* format: style2,ind3 */
%page;
cv_dmcf:
   procedure () options (variable);

/* START OF DECLARATIONS */

/* Automatic */

      dcl	    argp		       pointer;		/* ptr to command line arg */
      dcl	    argl		       fixed bin (21);	/* length of command line arg */
      dcl	    code		       fixed bin (35);	/* status code */
      dcl	    dirname	       char (168);		/* dir of config file */
      dcl	    input_entryname	       char (32);		/* name of config file */
      dcl	    output_entryname       char (32);		/* name of table */
      dcl	    table_segment_was_created
			       bit (1) aligned init ("0"b);
      dcl	    bc		       fixed bin (24);	/* bit count of config file */
      dcl	    filep		       pointer init (null ());/* pointer to config file */
      dcl	    my_area	       area;		/* automatic area file config table */
      dcl	    tablep	       pointer init (null ());/* pointer to config table */

/* Static, External */

      dcl	    (
	    error_table_$translation_failed,
	    error_table_$sameseg,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext static;

/* Constant */

      dcl	    ME		       char (32) internal static options (constant) init ("cv_dmcf");
      dcl	    (
	    INPUT_SUFFIX	       init ("dmcf"),
	    OUTPUT_SUFFIX	       init ("dmct")
	    )		       char (4) internal static options (constant);

      dcl	    LONG_ERRORS	       bit (1) aligned internal static options (constant) init ("1"b);
      dcl	    (
	    FORCE_DELETE	       init ("1"b),
	    NO_QUERY	       init ("0"b),
	    NO_DIR	       init ("0"b),
	    SEG		       init ("1"b),
	    NO_LINK	       init ("0"b),
	    CHASE		       init ("1"b)
	    )		       unaligned bit (1) internal static options (constant);
        dcl     (NO_PAD, NO_NL)	init ("0"b) bit (1) aligned
				internal static options (constant);

/* Based */

      dcl	    arg		       char (argl) based (argp);

/* Entry */

      dcl	    com_err_	       entry () options (variable);
dcl cu_$arg_list_ptr entry (ptr);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    delete_$ptr	       entry (ptr, bit (36) aligned, char (*), fixed bin (35));
      dcl	    dm_translate_system_config_
			       entry (ptr, fixed bin (21), bit (1) aligned, ptr, ptr, fixed bin (35));
      dcl	    expand_pathname_$add_suffix
			       entry (char (*), char (*), char (*), char (*), fixed bin (35));
      dcl	    get_wdir_	       entry () returns (char (168));
      dcl	    initiate_file_	       entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
      dcl	    initiate_file_$create  entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
			       fixed bin (35));
   dcl ioa_$general_rs entry (ptr, fixed bin, fixed bin, char(*), fixed bin(21), bit(1) aligned, bit(1) aligned);
dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));
      dcl	    suffixed_name_$new_suffix
			       entry (char (*), char (*), char (*), char (32), fixed bin (35));
      dcl	    terminate_file_	       entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* Builtin */

      dcl	    (addr, divide, empty, size, null)
			       builtin;

/* Conditions */

      dcl	    cleanup	       condition;

/* END OF DECLARATIONS */


      on cleanup call ERROR_FINISH ();

      call cu_$arg_ptr (1, argp, argl, code);
      if code ^= 0
      then
         	  call ERROR_RETURN (code, "^/Usage is: cv_dmcf <config_file_path>");

      call expand_pathname_$add_suffix (arg, INPUT_SUFFIX, dirname, input_entryname, code);
      if code ^= 0
      then
         	  call ERROR_RETURN (code, "Supplied pathname was: ^a.", arg);

/* try to get a pointer to the config file */

      call initiate_file_ (dirname, input_entryname, R_ACCESS, filep, bc, code);
      if filep = null ()
      then
         	  call ERROR_RETURN (code, "Error occurred while referencing ^a.", pathname_ (dirname, input_entryname));

/* get the config table */

      call
         dm_translate_system_config_ (filep, divide (bc, 9, 21, 0), LONG_ERRORS, addr (my_area), dm_system_config_ptr,
         code);
      if code ^= 0
      then
         	  call ERROR_RETURN (error_table_$translation_failed);

      if dm_system_config.version ^= DM_CONFIG_VERSION_2
      then
	  call ERROR_RETURN (error_table_$unimplemented_version,
	     "^/The dm_translate_system_config_ module did not produce the expected
version of the dm_system_config structure. 
The expected version was ""^a"" and the received version was ""^a"".", dm_system_config.version, DM_CONFIG_VERSION_2);
					/* copy the structure into a segment */

      call suffixed_name_$new_suffix (input_entryname, INPUT_SUFFIX, OUTPUT_SUFFIX, output_entryname, code);
      if code ^= 0
      then
         	  call ERROR_RETURN (code, "^/Unable to make the output file name from the input file name.");

      call
         initiate_file_$create (get_wdir_ (), output_entryname, RW_ACCESS, tablep, table_segment_was_created, (0), code);

      if tablep = null () then
	 call ERROR_RETURN (code, "Unable to create output segment.");
      else if tablep = filep
      then
         	  call ERROR_RETURN (error_table_$sameseg, "Using the configuration file to store the configuration table.");
      else
      tablep -> dm_system_config = dm_system_config_ptr -> dm_system_config;

      call FINISH ();
MAIN_RETURN:
      return;

FINISH:
   proc ();
      if filep ^= null ()
      then call terminate_file_ (filep, 0, TERM_FILE_TERM, code);

      if tablep ^= null ()
      then call terminate_file_ (tablep, size (dm_system_config) * 36, TERM_FILE_TRUNC_BC_TERM, code);
   end FINISH;

ERROR_FINISH:
   proc ();
      if tablep ^= null ()
      then
         do;
	  if table_segment_was_created
	  then call delete_$ptr (tablep, FORCE_DELETE || NO_QUERY || NO_DIR || SEG || NO_LINK || CHASE, ME, code);
	  else call terminate_file_ (tablep, 0, TERM_FILE_TERM, code);
	  tablep = null ();
         end;
      call FINISH;

   end ERROR_FINISH;

ERROR_RETURN:
        proc () options (variable);
        dcl     er_arg_count		fixed bin;
        dcl     er_arg_list_ptr	ptr;
        dcl     er_based_error_code	fixed bin (35) based;
        dcl     er_code		fixed bin (35);
        dcl     1 er_err_msg_struc,
	        2 length		fixed bin (21),
	        2 string		char (1024);
        dcl     er_err_msg		varying char (1024)
				based (addr (er_err_msg_struc));

        call ERROR_FINISH ();
        call cu_$arg_list_ptr (er_arg_list_ptr);
        if er_arg_list_ptr -> arg_list.arg_count > 0 then
	      do;
	      if er_arg_list_ptr -> arg_list.arg_count > 2 then
		    call ioa_$general_rs (er_arg_list_ptr, 3, 4,
		        er_err_msg_struc.string, er_err_msg_struc.length,
		        NO_PAD, NO_NL);
	      else
		    er_err_msg = "";
	      call com_err_ (er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_based_error_code, ME, er_err_msg);
	      end;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
/* Include Files */
%page;
%include access_mode_values;
%page;
%include arg_list;
%page;
%include dm_system_config;
%page;
%include terminate_file;
   end cv_dmcf;
