/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  program  validates  the  various fields and indicators in a DM
     configuration file.  The check is the checksum stored  in  the  file  vs.
     the  calculated  checksum.    This  should  be  expanded later to include
     validity checking on the various fields and indicators stored in the file
     to save the individual initialization programs from having to  check  the
     values.
*/

/* HISTORY:

Written by L. A. Newcomb, 05/09/83.
Modified:
05/29/84 by Lindsey L. Spratt:  Converted to use version 2 of
            dm_system_config.
*/
/* format: style2,ind3 */
%page; /* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

dm_check_configuration_:
     proc (p_dm_system_config_ptr);

/* START OF DECLARATIONS */

dcl						/* Parameter */
     p_dm_system_config_ptr	        ptr;		/* Loc. of DM config file. */

dcl						/* Automatics */
     calculated_config_checksum       fixed bin (35)
			        automatic;

dcl						/* Builtin */
     (null, size)		        builtin;

dcl						/* Constant */
     myname		        init ("dm_check_configuration_") char (32) varying
			        internal static options (constant);

dcl						/* Entries */
     dm_gen_checksum_	        entry (ptr, fixed bin (18)) returns (fixed bin (35)),
     sub_err_		        entry () options (variable);

dcl  (						/* Status Codes */
     dm_error_$system_config_file_checksum_err,
     error_table_$unimplemented_version
     )			        fixed bin (35) external static;

/* END OF DECLARATIONS */
%page;
/* copy parameter to local for ease of use. */

	dm_system_config_ptr = p_dm_system_config_ptr;

/* first check the version */

	call CHECK_VERSION (dm_system_config.version, DM_CONFIG_VERSION_2, "dm_system_config");

/* now try the checksum if we get this far */

	calculated_config_checksum = dm_gen_checksum_ (dm_system_config_ptr, size (dm_system_config_info) - 1);
	if calculated_config_checksum ^= dm_system_config.checksum then
	     call sub_err_ (dm_error_$system_config_file_checksum_err, myname, ACTION_CANT_RESTART, null (), 0,
		"Config file checksum = ^d, generated checksum = ^d.",
		dm_system_config.checksum, calculated_config_checksum);

	return;
%page;
CHECK_VERSION:
     proc (p_received_version, p_expected_version, p_structure_name);
dcl  (						/* Parameters */
     p_received_version	        char (8) aligned,
     p_expected_version	        char (8) aligned,
     p_structure_name	        char (*)
     )			        parameter;

	if p_received_version ^= p_expected_version then
	     call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
		"^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);

     end CHECK_VERSION;
%page;
%include dm_system_config;
%page;
%include sub_err_flags;
     end dm_check_configuration_;
