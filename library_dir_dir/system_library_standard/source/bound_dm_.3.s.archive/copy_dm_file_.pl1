/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

copy_dm_file_: proc (A_copy_options_ptr, A_code);

/* DESCRIPTION:

   Copying primitive for DM files. Takes all its input info in the copy_options
   structure. The return code, if zero, pertains to the target file if
   copy_options.target_err_switch is ON, otherwise to the file being copied.

   The source file is opened, the target file is created and opened, and
   copying is performed by successive calls to fm_$raw_put to copy the
   control intervals. This way, new control interval id's are generated and
   a new protected file is built.
*/

/* HISTORY:
Written by Steve Herbst, 03/22/83.
Modified:
04/13/83 by Steve Herbst: Changed to use raw_(get put) and abort if interrupted. 
05/25/83 by Steve Herbst: Eliminated erroneous call to fm_$delete_close 
06/17/83 by Steve Herbst: Changed calling sequence to use new copy_options 
            include file.
06/28/83 by Steve Herbst: Changed to use copy_flags.incl.pl1 
08/20/84 by Matthew C. Pierret: Changed to use FILE_CREATE_INFO_VERSION_2.
10/15/84 by Steve Herbst: Changed in response to audit comments:
	Removed cleanup windows, Added ERROR_RETURN proc, changed to call
	file_manager_$get_ci_ptr instead of $raw_get.
12/13/84 by Steve Herbst: Changed again in response to audit comments:
	Fixed CLEAN_UP to not delete source file, added copy_options version
	check, removed references to ci_header, changed to report CLEAN_UP
	errors at normal termination, fixed to never call CLEAN_UP twice.
12/17/84 by Steve Herbst: Changed again in response to audit comments:
	Improved journalization comments, fixed not to replace nonzero
	A_code with error code from CLEAN_UP, commented CLEAN_UP design.
12/18/84 by Matthew Pierret:  Changed to initialize auto_ci_parts.mbz to 0
            and auto_ci_parts.number_of_parts to 1.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_copy_options_ptr ptr parameter;
dcl  A_code fixed bin (35) parameter;

/* Based */

/* Automatic */

dcl  1 auto_ci_parts aligned,
       2 number_of_parts fixed bin init (1),
       2 mbz fixed bin init (0),
       2 part (1) like ci_parts.part;

dcl  1 auto_file_create_info aligned like file_create_info;
dcl  (source_opening_id, target_opening_id, txn_id) bit (36) aligned;
dcl  (cleanup_called_sw, done_sw, getting_sw) bit (1);
dcl  (ci_index, last_ci_num) fixed bin (27);
dcl  (begin_code, code, create_code) fixed bin (35);

/* External */

dcl  dm_error_$ci_not_allocated fixed bin (35) ext;
dcl  dm_error_$file_already_exists fixed bin (35) ext;
dcl  dm_error_$file_already_open fixed bin (35) ext;
dcl  dm_error_$file_not_dm_type fixed bin (35) ext;
dcl  dm_error_$transaction_in_progress fixed bin (35) ext;
dcl  error_table_$dirseg fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin (35) ext;
dcl  error_table_$rqover fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl  file_manager_$close entry (bit (36) aligned, fixed bin (35));
dcl  file_manager_$create_open entry (char (*), char (*), ptr, bit (36) aligned, fixed bin (35));
dcl  file_manager_$delete entry (bit (36) aligned, fixed bin (35));
dcl  file_manager_$get_ci_ptr entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
dcl  file_manager_$open entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  file_manager_$prepare_to_copy entry (bit (36) aligned, ptr, fixed bin (27), fixed bin (35));
dcl  file_manager_$raw_put entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
dcl  file_manager_$terminate_ci_ptr entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
dcl  transaction_manager_$abort_txn entry (bit (36) aligned, fixed bin (35));
dcl  transaction_manager_$begin_txn entry (fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  transaction_manager_$commit_txn entry (bit (36) aligned, fixed bin (35));

/* Builtins */

dcl  (addr, null, unspec) builtin;

/* Conditions */

dcl  (cleanup, record_quota_overflow) condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;
	copy_options_ptr = A_copy_options_ptr;

	if copy_options.version ^= COPY_OPTIONS_VERSION_1 then
	     call ERROR_RETURN (error_table_$unimplemented_version);

	copy_options.target_err_switch = "0"b;		/* assume source file until target error occurs */

	cleanup_called_sw = "0"b;
	done_sw, getting_sw = "0"b;
	txn_id, source_opening_id, target_opening_id = "0"b;
	begin_code, create_code = 0;

	on cleanup call CLEAN_UP (code);

	call transaction_manager_$begin_txn (TM_NORMAL_MODE, "0"b, txn_id, begin_code);
	if begin_code ^= 0 & begin_code ^= dm_error_$transaction_in_progress then call ERROR_RETURN (begin_code);
						/* OK to use an existing transaction */

	call file_manager_$open (copy_options.source_dir, copy_options.source_name, source_opening_id, code);
	if source_opening_id = "0"b then
	     if code = error_table_$dirseg | code = dm_error_$file_not_dm_type then
		call ERROR_RETURN (error_table_$not_seg_type);
	     else call ERROR_RETURN (code);

	unspec (auto_file_create_info) = "0"b;
	auto_file_create_info.version = FILE_CREATE_INFO_VERSION_2;
	call file_manager_$prepare_to_copy (source_opening_id, addr (auto_file_create_info), last_ci_num, code);
	if code ^= 0 then call ERROR_RETURN (code);

	on record_quota_overflow begin;
	     copy_options.target_err_switch = ^getting_sw;
	     call ERROR_RETURN (error_table_$rqover);
	end;

	call file_manager_$create_open (copy_options.target_dir, copy_options.target_name,
	     addr (auto_file_create_info), target_opening_id, create_code);
	if target_opening_id = "0"b | create_code = dm_error_$file_already_exists then do;
	     copy_options.target_err_switch = "1"b;
	     call ERROR_RETURN (create_code);
	end;

	auto_ci_parts.offset_in_bytes (1) = 0;
	auto_ci_parts.local_ptr (1) = null;
	auto_ci_parts.length_in_bytes = CI_0_ADDRESSABLE_LENGTH;

	do ci_index = 0 to last_ci_num;

/* Copy only used control intervals */

	     getting_sw = "1"b;
	     call file_manager_$get_ci_ptr (source_opening_id, ci_index, auto_ci_parts.local_ptr (1), code);
	     getting_sw = "0"b;

	     if code = 0 then do;			/* copy this one; it's allocated */

		call file_manager_$raw_put (target_opening_id, ci_index, addr (auto_ci_parts), code);
		if code ^= 0 then do;
		     copy_options.target_err_switch = "1"b; /* error is on the target file */
		     call ERROR_RETURN (code);
		end;

		call file_manager_$terminate_ci_ptr (source_opening_id, ci_index, auto_ci_parts.local_ptr (1), code);
		if code ^= 0 then call ERROR_RETURN (code);
	     end;
	     else if code ^= dm_error_$ci_not_allocated then call ERROR_RETURN (code);
						/* if it's not allocated, just skip it */
	     auto_ci_parts.length_in_bytes = CI_ADDRESSABLE_LENGTH;
	end;

	auto_ci_parts.local_ptr (1) = null;

	done_sw = "1"b;
RETURN:
	if ^cleanup_called_sw then do;
	     cleanup_called_sw = "1"b;
	     call CLEAN_UP (code);
	     if code ^= 0 & A_code = 0 then call ERROR_RETURN (code); /* previously reported A_code takes precedence */
	end;

	return;
%page;
CLEAN_UP: proc (P_cleanup_code);

/* This procedure completes even if one of its calls gets an error, since the
   intent is to return the process and the objects to their former state as
   well as possible. It sets a code parameter rather than reporting an error
   so that the caller has the option: an error is reported at normal
   termination time but not when "cleanup" is signalled. */

dcl  (P_cleanup_code, code) fixed bin (35);

	P_cleanup_code = 0;				/* reports errors to the main proc */
						/* want to report 1st error but do all cleanup */

	if auto_ci_parts.local_ptr (1) ^= null then	/* was in the middle of reading a ci */
	     call file_manager_$terminate_ci_ptr
		(source_opening_id, ci_index, auto_ci_parts.local_ptr (1), P_cleanup_code);

	if source_opening_id ^= "0"b then call file_manager_$close (source_opening_id, code);
	if P_cleanup_code = 0 then P_cleanup_code = code;

	if target_opening_id ^= "0"b & create_code ^= dm_error_$file_already_open then
	     call file_manager_$close (target_opening_id, code);
	if P_cleanup_code = 0 then do;
	     P_cleanup_code = code;
	     copy_options.target_err_switch = "1"b;
	end;

	if txn_id ^= "0"b then
	     if begin_code = dm_error_$transaction_in_progress then ;
						/* What to do? Can't commit or abort the user's previous transaction. */

	     else if done_sw then do;
		call transaction_manager_$commit_txn (txn_id, code);
		if P_cleanup_code = 0 then P_cleanup_code = code;
	     end;
	     else do;				/* if ^done_sw, target may be incomplete. */
						/* have to delete it if we created it */
		if target_opening_id ^= "0"b & create_code ^= dm_error_$file_already_exists &
		     create_code ^= dm_error_$file_already_open then do;
		     call file_manager_$delete (target_opening_id, code);
		     if P_cleanup_code = 0 then do;
			P_cleanup_code = code;
			copy_options.target_err_switch = "1"b;
		     end;
		end;

		call transaction_manager_$abort_txn (txn_id, code);
		if P_cleanup_code = 0 then P_cleanup_code = code;
	     end;

     end CLEAN_UP;
%page;
ERROR_RETURN: proc (P_code);

dcl  P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

     end ERROR_RETURN;
%page;
%include copy_flags;
%page;
%include copy_options;
%page;
%include dm_ci_lengths;
%page;
%include dm_ci_parts;
%page;
%include dm_file_create_info;
%page;
%include dm_tm_modes;


     end copy_dm_file_;
