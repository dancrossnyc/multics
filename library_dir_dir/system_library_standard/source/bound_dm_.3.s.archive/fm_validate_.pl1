/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

   This  module  validates  whether an entry is a data management file.
   If the  module  is  a  DM  file,  a  0  code  is  returned.    Otherwise,
   the following codes are returned:

     error_table$noentry - File does not exist and user has "s" access to the
         file's containing directory;
     error_table_$no_info - User does not have "s" access to the file's
          containing directory and does not have "r" access to the file's
	first component;
     error_table_$not_seg_type - File does not have the canonical add-name
          on the first component which identifies it as a DM file, or, the
	write-ring-bracket on the first component is not the DM ring (here
	defined as the ring of execution of this module).
*/

/* HISTORY:

Written by Lee Baldwin, 12/13/83.
Modified:
12/22/83 by Matthew Pierret:  Changed to check for the special add-name on the
            first component instead of a special link.
02/28/84 by Matthew Pierret:  Changed contract to return non-not_seg_type
            error codes in certain situations, specifically (a) if the file
            does not exist, (b) the user does not have enough access to do the
            validation.
03/08/84 by Matthew Pierret:  Fixed call to pathname_ to first rtrim the 
            directory path argument.
03/12/84 by Matthew Pierret:  Changed to rtrim the p_entry_name argument.
07/11/84 by Matthew C. Pierret:  some changes.  
11/01/84 by Matthew Pierret:  Fixed expression which incorrectly diagnosed
            caller_validation_level < read_bracket as an error, instead
            of using >.
11/08/84 by Matthew C. Pierret:  Removed an unnecessary rtrim and removed
            declarations of un-used variables.
*/
/* format: style2 */
%page;
fm_validate_:
     proc (p_dir_path, p_entry_name, p_code);

/* START OF DECLARATIONS */
/* Parameter */

	dcl     p_dir_path		 char (*);	/* the name of the directory containing the
						   DM file. */
	dcl     p_entry_name	 char (*);	/* the entry name of the DM file. */
	dcl     p_code		 fixed bin (35);	/* a standard system status code. */
	dcl     p_ring_brackets	 (2) fixed bin (3);

/* Automatic */

	dcl     (check_read, check_write, get_ring_brackets, no_status_permission)
				 bit (1) aligned init ("0"b);

	dcl     code		 fixed bin (35) init (0);
	dcl     containing_containing_dir_path
				 char (168);
	dcl     containing_dir_path	 char (168);
	dcl     containing_dir_name	 char (32);
	dcl     file_name		 char (32);
	dcl     file_path		 char (168);
	dcl     bit_count		 fixed bin (24);
	dcl     caller_validation_level
				 fixed bin;
	dcl     current_validation_level
				 fixed bin;
	dcl     mode		 fixed bin (5);
	dcl     ring_brackets	 (3) fixed bin (3);
	dcl     extended_ring_brackets (2) fixed bin (3);
	dcl     type		 fixed bin (2);

/* Based */
/* Builtin */

	dcl     (divide, mod, rtrim)	 builtin;

/* Condition */

	dcl     cleanup		 condition;

/* Constant */

	dcl     myname		 init ("fm_validate_") char (32) varying internal static options (constant);
	dcl     DONT_CHASE_LINK	 init (0) fixed bin (1) internal static options (constant);
	dcl     (
	        WRITE_BRACKET	 init (1),
	        READ_BRACKET	 init (2)
	        )			 fixed bin internal static options (constant);
	dcl     FIRST_COMPONENT_NAME	 init ("0") char (1) internal static options (constant);

/* Entry */

	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_ring_		 entry () returns (fixed bin);
	dcl     hcs_$get_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
	dcl     hcs_$get_user_effmode	 entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

/* External */

	dcl     error_table_$no_info	 ext fixed bin (35);
	dcl     error_table_$no_s_permission
				 ext fixed bin (35);
	dcl     error_table_$no_r_permission
				 ext fixed bin (35);
	dcl     error_table_$no_w_permission
				 ext fixed bin (35);
	dcl     error_table_$not_seg_type
				 ext fixed bin (35);

/* END OF DECLARATIONS */

/* format: indcomtxt,^indblkcom */

	go to JOIN;

check_write_ring_bracket:
     entry (p_dir_path, p_entry_name, p_code);

	check_write = "1"b;
	check_read = "1"b;
	get_ring_brackets = "1"b;
	go to JOIN;

check_read_ring_bracket:
     entry (p_dir_path, p_entry_name, p_code);

	check_write = "0"b;
	check_read = "1"b;
	get_ring_brackets = "1"b;
	go to JOIN;

get_ring_brackets:
     entry (p_dir_path, p_entry_name, p_ring_brackets, p_code);

	check_write = "0"b;
	check_read = "0"b;
	get_ring_brackets = "1"b;
	go to JOIN;
%page;
JOIN:
/**** Set the validation level to the ring of execution. */
	call cu_$level_get (caller_validation_level);
	on cleanup call cu_$level_set (caller_validation_level);
	current_validation_level = get_ring_ ();
	call cu_$level_set (current_validation_level);

/**** Set up the file pathname */

	containing_dir_path = rtrim (p_dir_path);
	file_name = rtrim (p_entry_name);
	file_path = pathname_ (containing_dir_path, file_name);

/**** Verify that entry exists and process has at least minimal access. */

	call hcs_$status_minf (containing_dir_path, file_name, DONT_CHASE_LINK, type, (0), code);
	if code ^= 0 & code ^= error_table_$no_s_permission
	then call ERROR_RETURN (code);

/**** Verify that process has at least "s" permission on the containing
      directory (containing_dir_path) or "r" permission on the first MSF component. */

	code = 0;
	call expand_pathname_ (containing_dir_path, containing_containing_dir_path, containing_dir_name, code);
	if code ^= 0
	then call ERROR_RETURN (code);
	call hcs_$get_user_effmode (containing_containing_dir_path, containing_dir_name,
	     "" /* defaults to calling process */, current_validation_level, mode, code);
	if code ^= 0 | mode < S_ACCESS_BIN
	then do;
		no_status_permission = "1"b;
		code = 0;
		call hcs_$get_user_effmode (file_path, FIRST_COMPONENT_NAME, "", current_validation_level, mode, code)
		     ;
		if code ^= 0 | mode < R_ACCESS_BIN
		then call ERROR_RETURN (error_table_$no_info);
	     end;

/**** The process has sufficient access to validate that this is a DM file.
      Do so by seeing if the first component has an add-name equal to the
      value of DM_FILE_VALIDATION_NAME and has a value for its bit count that
      is a valid encoding of the extended ring brackets of the file.
      Also check that the first (real) ring bracket number is equal to the
      ring of execution.  */

	call hcs_$status_minf (file_path, DM_FILE_VALIDATION_NAME, DONT_CHASE_LINK, type, bit_count, code);
	if code ^= 0
	then call ERROR_RETURN (error_table_$not_seg_type);

	call hcs_$get_ring_brackets (file_path, FIRST_COMPONENT_NAME, ring_brackets, code);
	if code ^= 0
	then call ERROR_RETURN (error_table_$not_seg_type);
	if ring_brackets (1) ^= current_validation_level
	then call ERROR_RETURN (error_table_$not_seg_type);

	if get_ring_brackets
	then do;
		extended_ring_brackets (WRITE_BRACKET) = divide (bit_count, 8, 3, 0);
		extended_ring_brackets (READ_BRACKET) = mod (bit_count, 8);
		if check_write
		then do;
			if caller_validation_level > extended_ring_brackets (WRITE_BRACKET)
			then if no_status_permission
			     then call ERROR_RETURN (error_table_$no_info);
			     else call ERROR_RETURN (error_table_$no_w_permission);
		     end;
		else if check_read
		then do;
			if caller_validation_level > extended_ring_brackets (READ_BRACKET)
			then if no_status_permission
			     then call ERROR_RETURN (error_table_$no_info);
			     else call ERROR_RETURN (error_table_$no_r_permission);
		     end;
		else p_ring_brackets = extended_ring_brackets;
	     end;

/**** Restore validation level before returning. */

	p_code = 0;
MAIN_RETURN:
	call cu_$level_set (caller_validation_level);

	return;
%page;
ERROR_RETURN:
     proc (er_p_code);
	dcl     er_p_code		 fixed bin (35);

	p_code = er_p_code;
	go to MAIN_RETURN;

     end ERROR_RETURN;

%page;
%include access_mode_values;
%page;
%include status_structures;
%page;
%include dm_file_validation_name;

     end fm_validate_;
