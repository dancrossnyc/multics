/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:

         This  module frees the storage associated with a typed_vector.  This
     includes determining the amount of storage used in the value  storage  as
     indicated by the descriptor in the typed_vector_array.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 09/24/82.
Modified:
12/18/84 by Lindsey L. Spratt:  Moved the proc stmt to standard location.
            Changed to use the modern sub_err_flags.  Changed to use
            data_format_util_ instead of data_mgmt_util_.  Uppercased the name
            of the internal proc CHECK_VERSION.  Added the cv_ prefix to the
            CHECK_VERSION proc's variable names.
12/19/84 by Lindsey L. Spratt:  Fixed to ignore null value_ptr's.  Fixed to
            check the return code from the dfu_$get_data_bit_length call.
            Added the ERROR_RETURN proc.  Changed storage_string to be
            explicitly based on storage_string_ptr.
*/

/* format: style2,ind3 */
dm_vu_free_typed_vector:
   proc (p_work_area_ptr, p_typed_vector_array_ptr, p_typed_vector_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_typed_vector_ptr     ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    dim_idx	       fixed bin;
      dcl	    storage_size	       fixed bin (35);
      dcl	    storage_string_ptr     ptr init (null);
      dcl	    work_area_ptr	       ptr init (null);

/* Based */

      dcl	    descriptor_string      bit (36) aligned based;
      dcl	    storage_string	       bit (storage_size) aligned based (storage_string_ptr);
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("dm_vu_free_typed_vector") char (32) varying options (constant) internal
			       static;

      dcl	    (
	    BITS_PER_BYTE	       init (9),
	    BITS_PER_WORD	       init (36)
	    )		       fixed bin internal static options (constant);

/* Entry */

      dcl	    data_format_util_$get_data_bit_length
			       entry (bit (36) aligned, fixed bin (35), fixed bin (35));

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35);

/* END OF DECLARATIONS */

      work_area_ptr = p_work_area_ptr;
      p_code = 0;
      typed_vector_array_ptr = p_typed_vector_array_ptr;
      call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");

      simple_typed_vector_ptr = p_typed_vector_ptr;
      if simple_typed_vector.type ^= SIMPLE_TYPED_VECTOR_TYPE
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/This module only works on simple typed vectors, type ^d.  A type 
of ^d was provided.", SIMPLE_TYPED_VECTOR_TYPE, simple_typed_vector.type);

      do dim_idx = 1 to simple_typed_vector.number_of_dimensions;
         arg_descriptor_ptr = typed_vector_array.dimension_table (dim_idx).descriptor_ptr;
         if arg_descriptor.type = varying_char_dtype
         then storage_size = arg_descriptor.size * BITS_PER_BYTE + BITS_PER_WORD;
         else if arg_descriptor.type = varying_bit_dtype
         then storage_size = arg_descriptor.size + BITS_PER_WORD;
         else
	  do;
	     call data_format_util_$get_data_bit_length (arg_descriptor_ptr -> descriptor_string, storage_size, p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);
	  end;

         storage_string_ptr = simple_typed_vector.dimension (dim_idx).value_ptr;
         if storage_string_ptr ^= null
         then free storage_string in (work_area);
      end;

      free simple_typed_vector in (work_area);
      p_typed_vector_ptr = null;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parm;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;


CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
%page;
%include vu_typed_vector_array;
%page;
%include vu_typed_vector;
   end dm_vu_free_typed_vector;
