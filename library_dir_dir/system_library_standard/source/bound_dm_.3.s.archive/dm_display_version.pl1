/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:

This command displays the version of the Data Management System software currently
in use by the executing process.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 01/24/85.
Modified:
02/15/85 by Lindsey L. Spratt:  Added comparison of
            dm_misc_util_$get_system_version with the
            dm_system_data_template_$system_software_version.
03/19/85 by S. Cox: Added dm_not_available_ handler.
04/16/85 by Lindsey L. Spratt:  Added a pnotice.
*/
/* format: style2,ind3 */
%page;
dm_display_version:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    bootload_version       char (8) aligned init ("");
      dcl	    code		       fixed bin (35);
      dcl	    dm_ring_version	       char (8) aligned init ("");
      dcl	    number_of_args	       fixed bin;
      dcl	    sci_ptr	       ptr init (null);
      dcl	    user_ring_version      char (8) aligned init (dm_system_data_template_$system_software_version);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    (cleanup, dm_not_available_)
			       condition;

/* Constant */

      dcl	    myname	       init ("dm_display_version") char (18) internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    dm_misc_util_$get_system_version
			       entry (char (8) aligned, char (8) aligned);
      dcl	    ioa_		       entry () options (variable);
      dcl	    ssu_$abort_line	       entry () options (variable);
      dcl	    ssu_$arg_count	       entry (ptr, fixed bin);
      dcl	    ssu_$destroy_invocation
			       entry (ptr);
      dcl	    ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

/* External */

      dcl	    dm_system_data_template_$system_software_version
			       char (8) aligned external;
      dcl	    dm_error_$system_not_initialized
			       fixed bin (35) ext static;
      dcl	    error_table_$badopt    fixed bin (35) external;

/* END OF DECLARATIONS */
      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on dm_not_available_ call ssu_$abort_line (sci_ptr, dm_error_$system_not_initialized);

      on cleanup call CLEANUP ();

      call ssu_$arg_count (sci_ptr, number_of_args);

      if number_of_args > 0
      then call ssu_$abort_line (sci_ptr, error_table_$badopt, "This command takes no arguments.");

      call dm_misc_util_$get_system_version (bootload_version, dm_ring_version);

      if bootload_version = dm_ring_version & bootload_version = user_ring_version
      then call ioa_ ("Data Management System version is ""^a"".", bootload_version);
      else call ioa_ ("Data Management System version at DM bootload time was ""^a"",
the version of DM in use by this process in the user ring is ""^a"",
the version of DM in use by this process in the DM ring is ""^a"".", bootload_version, user_ring_version,
	      dm_ring_version);

      call FINISH ();

MAIN_RETURN:
      return;
%page;
ABORT_ENTRY:
   procedure ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;



CLEANUP:
   procedure ();
      call FINISH ();
   end CLEANUP;

FINISH:
   proc ();
      call ssu_$destroy_invocation (sci_ptr);
   end FINISH;

   end dm_display_version;
