/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	The dm_user_shutdown command terminates a process' usage of a
     Data Management System.  It is a direct interface to the entry
     transacton_manager_$user_shutdown.  All information returned from the
     subroutine call will be written to the user_output I/O switch.  If an
     error occurs, ONE call to com_err_ will be made at the end of the
     normal output.

     02/20/85 dm_user_shutdown

     Syntax as a command:  dm_user_shutdown

     Function: removes the process invoking it from the current invocation
     of the data management system (DMS).

     Notes: All user process references to per-process and per-system data
     are invalidated to permit subsequent reentry to DMS.  If a transaction
     is in progress in the process when you issue the command, the DM
     Daemon (Data_Management.Daemon) rolls it back automatically.

     Normally all processes using data management are shut down as part of
     a data management system shutdown, with no explicit user intervention.
     
     This command is part of the command level interface to Multics data
     management.  It is intended for use in a test environment or for
     debugging purposes.
*/

/* HISTORY:

Written by L. A. Newcomb, 03/09/84.
Modified:
05/16/84 by L. A. Newcomb:  fixed to pass user_shutdown_status_code to
            tm_$user_shutdown instead of another code value to stop stack
            garbage from staying in former; made to understand that only
	  TDT entries with active transactions are reported back; added
	  HISI pnotice.
03/19/85 by S. Cox: Added dm_not_available_ handler.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
dm_user_shutdown:
   proc ();

/* DECLARATIONS */

/* Parameter */
/* Automatic */
dcl  (
     accept_control_argument		bit (1) aligned init ("0"b),
     arg_list_ptr			ptr init (null),
     code				fixed bin (35) init (0),
     display_messages		bit (1) aligned init (YES),
     err_msg			char (100) aligned init (""),
     finish_started_freeing_structures	bit (1) aligned init (NO),
     force_interpretation_as_argument	bit (1) aligned init (NO),
     is_active_function		bit (1) aligned init (NO),
     number_of_args			fixed bin init (-1),
     sci_ptr			ptr init (null),
     shut_info_index		fixed bin init (0)
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, bin, null)		builtin;

/* Condition */
dcl  (cleanup, dm_not_available_)	condition;

/* Constant */
dcl  (
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init (""b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init (""b),
     NO				bit (1) aligned init ("0"b),
     SSU_INVOCATION_ERR_MSG		char (49)
				init (
				"Cannot establish standalone subsystem invocation."
				),
     YES				bit (1) aligned init ("1"b),
     myname			init ("dm_user_shutdown") char (16)
     )				internal static options (constant);

/* Entry */
dcl  (
     com_err_			entry options (variable),
     convert_status_code_		entry (fixed bin (35),
				char (8) aligned, char (100) aligned),
     cu_$arg_list_ptr		entry (ptr),
     get_dm_free_area_		entry () returns (ptr),
     ioa_				entry () options (variable),
     ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned),
     ssu_$abort_line		entry () options (variable),
     ssu_$destroy_invocation		entry (ptr),
     ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned,
				ptr, fixed bin (21)),
     ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr,
				entry, fixed bin (35)),
     transaction_manager_$user_shutdown entry (ptr, ptr, fixed bin (35))
     )				external;

/* External */

dcl  (
     dm_error_$system_not_initialized,
     error_table_$active_function,
     error_table_$too_many_args,
     error_table_$unimplemented_version
     )				fixed bin (35) external;

/* END OF DECLARATIONS */
%page;
/* dm_user_shutdown:			repeat for reader	*/
/*    proc ();						*/

SETUP_INVOCATION:
   do;
      call cu_$arg_list_ptr (arg_list_ptr);

      tm_shutdown_info_ptr = null ();
      on cleanup call CLEAN_UP ();

      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr,
	 ABORT_ENTRY, code);
      if code ^= 0 then				/* should be VERY rare */
         call ERROR_RETURN_FROM_SSU_SETUP (code);

      on dm_not_available_
         call ERROR_RETURN (dm_error_$system_not_initialized);

      call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
	 (null ()), (0));				/* don't care what AF return info is */

      if is_active_function then
         call ERROR_RETURN (error_table_$active_function);
      if number_of_args > 0 then
         call ERROR_RETURN (error_table_$too_many_args, "^/Usage: ^a", myname);
   end SETUP_INVOCATION;

DO_PER_PROCESS_SHUTDOWN:
   do;
      call transaction_manager_$user_shutdown (get_dm_free_area_ (),
	 tm_shutdown_info_ptr, code);

      if code ^= 0 then
         call ERROR_RETURN (code, "^/Unable to do dm per-process shutdown.");
      else if tm_shutdown_info_ptr = null () then
         call RETURN ();				/* User wasn't using DM. */

      call CHECK_VERSION (tm_shutdown_info.version, TM_SHUTDOWN_INFO_VERSION_1,
	 "tm_shutdown_info");
   end DO_PER_PROCESS_SHUTDOWN;


/* Tell the user what tm_ did for him/her */
   if tm_shutdown_info.count > 0 then do;
      if tm_shutdown_info.count = 1 then
         call ioa_ ("A transaction was adjusted.");
      else call ioa_ ("^d transactions were adjusted.^/",
	      tm_shutdown_info.count);

      do shut_info_index = 1 to tm_shutdown_info.count;
         if tm_shutdown_info.txn_id (shut_info_index) ^= ""b then do;
	  call convert_status_code_ (tm_shutdown_info
	       .error_code (shut_info_index), "", err_msg);
	  call ioa_ (
	       "^5xTransaction id: ^d, Operation: ^a, State: ^d, ^[Error: ^a^;^]",
	       bin (tm_shutdown_info.txn_id (shut_info_index)),
	       OP_NAME (tm_shutdown_info.op_completed (shut_info_index)),
	       tm_shutdown_info.state (shut_info_index),
	       (tm_shutdown_info.error_code (shut_info_index) ^= 0), err_msg)
	       ;
         end;
      end;
   end;

   call RETURN ();
%page;
MAIN_RETURN:
   return;
%skip (4);
RETURN:
   proc ();
ABORT_ENTRY:
   entry ();					/* ABORT currently same as RETURN */

   call FINISH ();
   go to MAIN_RETURN;

   end RETURN;
%skip (4);
FINISH:
   proc ();
CLEAN_UP:
   entry ();					/* CLEAN_UP currently same as FINISH */

   call ssu_$destroy_invocation (sci_ptr);

   if ^finish_started_freeing_structures then
FREE_STRUCTURES:
      do;
      finish_started_freeing_structures = YES;
      if tm_shutdown_info_ptr ^= null () then
         free tm_shutdown_info;
   end FREE_STRUCTURES;

   return;

   end FINISH;
%skip (4);
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

dcl  cv_p_received_version		char (8) aligned;
dcl  cv_p_expected_version		char (8) aligned;
dcl  cv_p_structure_name		char (*);

   if cv_p_received_version ^= cv_p_expected_version then
      call ERROR_RETURN (error_table_$unimplemented_version,
	 "^/Expected version ^d of the ^a structure.^/Received version ^d, instead.",
	 cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
ERROR_RETURN_FROM_SSU_SETUP:
   proc (erfss_p_code);

dcl  erfss_p_code			fixed bin (35) parameter;

   call com_err_ (erfss_p_code, myname, SSU_INVOCATION_ERR_MSG);

   go to MAIN_RETURN;				/* FINISH skipped since nothing to destroy */

   end ERROR_RETURN_FROM_SSU_SETUP;
%skip (4);
ERROR_RETURN:
   proc options (variable);

dcl  (
     er_arg_list_ptr		ptr,
     er_code			fixed bin (35),
     er_message			char (1024),
     er_message_length		fixed bin (21)
     )				automatic;

dcl  (
     er_fixed_bin_35_value		fixed bin (35),
     er_message_overlay		char (er_message_length)
     )				based;

   call cu_$arg_list_ptr (er_arg_list_ptr);
   er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_fixed_bin_35_value;

   if er_arg_list_ptr -> arg_list.arg_count > 1 then do;
      call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message,
	 er_message_length, IOA_GENERAL_RS_DONT_PAD,
	 IOA_GENERAL_RS_NO_NEW_LINE);
      call ssu_$abort_line (sci_ptr, er_code,
	 addr (er_message) -> er_message_overlay);
   end;
   else						/* no extra info */
        call ssu_$abort_line (sci_ptr, er_code);

   end ERROR_RETURN;
%page;
%include dm_tm_shutdown_info;
%page;
%include arg_list;

   end dm_user_shutdown;
