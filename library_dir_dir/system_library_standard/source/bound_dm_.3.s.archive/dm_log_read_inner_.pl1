/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc */
/* --------------- */

dm_log_read_inner_: procedure;

/* DESCRIPTION:

   This procedure contains entry points with the same calling sequences
   as log_read_, but used instead to read ring-2 DM log segments.
*/

/* HISTORY:

   Written by Steve Herbst, 11/30/84
   Modified:
   12/06/84 by Steve Herbst: Added $get_log_uid, $free_message, $register, and $deregister.
   1984-12-12, BIM: corrected open calling sequence.
   1985-01-11, Steve Herbst: Alphabetized internal procedures.
   1985-02-07, Steve Herbst: Changed to call dm_misc_util_$get_log_path instead of $get_aim_dir.
   1985-03-07, Steve Herbst: Changed in response to audit. Replaced FINISHED
	and FINISHED_NO_CODE procs with ERROR_RETURN proc and RETURN label;
	changed to compare log uid's not pathnames.
   1985-03-11, Steve Herbst: Fixed $(next prev)_message to make a real
	inner-ring copy of P_log_message_ptr to pass to log_read_.
   1985-03-13, Steve Herbst: Fixed $update, $(hold free)_message to do same.
   1985-03-20, Steve Herbst: Fixed to allow up to 10 openings of the DM log per process.
*/


/* DECLARATIONS */

/* Parameters */

dcl  P_log_dname char (*);
dcl  P_log_ename char (*);
dcl  P_area_ptr ptr;
dcl  P_log_read_data_ptr ptr;
dcl  P_log_message_ptr ptr;
dcl  P_message_sequence fixed bin (35);
dcl  P_message_time fixed bin (71);
dcl  P_event_channel fixed bin (71);
dcl  P_search_direction bit (1) aligned;
dcl  P_log_uid bit (36) aligned;
dcl  P_process_id bit (36) aligned;
dcl  P_code fixed bin (35);


/* Constants */

dcl ME char (32) int static options (constant) init ("dm_log_read_inner_");

/* Static */

dcl static_log_read_ptr (10) ptr int static init ((10)null);

/* Automatic */

dcl 1 auto_status_branch aligned like status_branch;

dcl  log_dname char (168);
dcl  log_ename char (32);
dcl  log_read_data_ptr pointer;
dcl  log_message_ptr pointer;
dcl  search_direction bit (1) aligned;
dcl  opening_index fixed bin;
dcl  message_sequence fixed bin (35);
dcl  message_time fixed bin (71);
dcl  process_id bit (36) aligned;
dcl  event_channel fixed bin (71);
dcl  (log_uid, true_uid) bit (36) aligned;
dcl  area_ptr ptr;
dcl  code fixed bin (35);
dcl  (dm_system_log_path, true_dir_name) char (168);
dcl  true_entryname char (32);
dcl  saved_validation fixed bin (3);

dcl  1 log_open_info aligned like log_read_open_info;

/* External */

dcl  error_table_$badcall fixed bin (35) ext;
dcl  error_table_$not_closed fixed bin (35) ext static;
dcl  error_table_$not_open fixed bin (35) ext static;
dcl  error_table_$not_seg_type fixed bin (35) ext static;
dcl  error_table_$null_info_ptr fixed bin (35) ext static;
dcl  error_table_$out_of_sequence fixed bin (35) ext;

/* Entries */

declare  cu_$level_get entry returns (fixed bin (3));
declare  cu_$level_set entry (fixed bin (3));
declare  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
declare  get_ring_ entry () returns (fixed bin (3));
declare  dm_misc_util_$get_log_path entry (char (*));
declare  hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
declare  log_read_$open_long entry (character (*), character (*), pointer, pointer, fixed binary (35));
declare  log_read_$close entry (pointer, fixed binary (35));
declare  log_read_$position_time entry (pointer, fixed binary (71), bit (1) aligned, pointer, fixed binary (35));
declare  log_read_$position_sequence entry (pointer, fixed binary (35), bit (1) aligned, pointer,
	    fixed binary (35));
declare  log_read_$next_message entry (pointer, pointer, fixed binary (35));
declare  log_read_$prev_message entry (pointer, pointer, fixed binary (35));
declare  log_read_$get_log_uid entry (pointer, bit (36) aligned, fixed binary (35));
declare  log_read_$update entry (fixed binary (35), pointer, pointer, fixed binary (35));
declare  log_read_$register entry (pointer, bit (36) aligned, fixed binary (71), fixed binary (35));
declare  log_read_$deregister entry (pointer, bit (36) aligned, fixed binary (71), fixed binary (35));
declare  log_read_$hold_message entry (pointer, pointer);
declare  log_read_$free_message entry (pointer, pointer);
declare  sub_err_ entry() options(variable);

/* Builtins */

dcl  (addr, baseno, baseptr, hbound, null, pointer, rel) builtin;

/* Conditions */

dcl  cleanup condition;

/* END OF DECLARATIONS */
%page;
dm_log_read_inner_$open:
     entry (P_log_dname, P_log_ename, P_area_ptr, P_log_read_data_ptr, P_code);

/* Opens a log for reading */

	log_dname = P_log_dname;
	log_ename = P_log_ename;
	area_ptr = P_area_ptr;
	P_log_read_data_ptr = null;
	code = 0;

	saved_validation = -1;
	on cleanup call CLEAN_UP;
	saved_validation = cu_$level_get ();

	do opening_index = 1 to hbound (static_log_read_ptr, 1)
	     while (static_log_read_ptr (opening_index) ^= null);
	end;
	if opening_index > hbound (static_log_read_ptr, 1) then
	     call sub_err_ (error_table_$not_closed, ME, ACTION_CANT_RESTART, null, 0,
		"The DM system log can only be opened ^d times per process.", hbound (static_log_read_ptr, 1));

	call cu_$level_set (get_ring_ ());

	call dm_misc_util_$get_log_path (dm_system_log_path);
	call expand_pathname_ (dm_system_log_path, true_dir_name, true_entryname, 0);
	call hcs_$status_long (true_dir_name, true_entryname, 0, addr (auto_status_branch), null, 0);
	true_uid = auto_status_branch.uid;
	call hcs_$status_long (log_dname, log_ename, 0, addr (auto_status_branch), null, 0);
	if auto_status_branch.uid ^= true_uid
	then call ERROR_RETURN (error_table_$not_seg_type);
					/* Only permit opens of the current DM system log for now */

	if area_ptr = null ()
	then call ERROR_RETURN (error_table_$null_info_ptr);

	log_open_info.version = LOG_READ_OPEN_INFO_VERSION_1;
	log_open_info.reader_procedure = "";
	log_open_info.allocation_area_ptr = area_ptr;
	log_open_info.allocate_copies = "1"b;

	call log_read_$open_long (log_dname, log_ename, addr (log_open_info),
	     static_log_read_ptr (opening_index), code);
	if code = 0 then P_log_read_data_ptr = static_log_read_ptr (opening_index);
	P_code = code;
RETURN:
	call CLEAN_UP;

	return;
%page;
dm_log_read_inner_$close:
     entry (P_log_read_data_ptr, P_code);

/* Closes a log */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	call log_read_$close (log_read_data_ptr, code);
	if code = 0 then static_log_read_ptr (opening_index) = null;
	else call ERROR_RETURN (code);

	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$next_message:
     entry (P_log_read_data_ptr, P_log_message_ptr, P_code);

/* Positions to the next message after P_log_message_ptr */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	log_message_ptr = INNER_RING_POINTER (P_log_message_ptr);
						/* OK to do this because log_read_ validates the ptr */

	call log_read_$next_message (log_read_data_ptr, log_message_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_message_ptr = log_message_ptr;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$prev_message:
     entry (P_log_read_data_ptr, P_log_message_ptr, P_code);

/* Positions to the message previous to P_log_message_ptr */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	log_message_ptr = INNER_RING_POINTER (P_log_message_ptr);
						/* OK to do this because log_read_ validates the ptr */

	call log_read_$prev_message (log_read_data_ptr, log_message_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_message_ptr = log_message_ptr;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$position_sequence:
     entry (P_log_read_data_ptr, P_message_sequence, P_search_direction, P_log_message_ptr, P_code);

/* Positions to the first/last message in sequence */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	message_sequence = P_message_sequence;
	search_direction = P_search_direction;

	call log_read_$position_sequence (log_read_data_ptr, message_sequence,
	     search_direction, log_message_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_message_ptr = log_message_ptr;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$position_time:
     entry (P_log_read_data_ptr, P_message_time, P_search_direction, P_log_message_ptr, P_code);

/* Positions to the first/last message before/after a specified time */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	message_time = P_message_time;
	search_direction = P_search_direction;

	call log_read_$position_time (log_read_data_ptr, message_time,
	     search_direction, log_message_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_message_ptr = log_message_ptr;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$update:
     entry (P_message_sequence, P_log_read_data_ptr, P_log_message_ptr, P_code);

/* Interface to log_read_$update */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	message_sequence = P_message_sequence;
	log_message_ptr = INNER_RING_POINTER (P_log_message_ptr);
						/* OK to do this because log_read_ validates the ptr */

	call log_read_$update (message_sequence, log_read_data_ptr, log_message_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_read_data_ptr, static_log_read_ptr (opening_index) = log_read_data_ptr;
	P_log_message_ptr = log_message_ptr;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$hold_message:
     entry (P_log_read_data_ptr, P_log_message_ptr);

/* Saves message so that it can be referenced by a call to $prev_message or $next_message */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	log_message_ptr = INNER_RING_POINTER (P_log_message_ptr);
						/* OK to do this because log_read_ validates the ptr */

	call log_read_$hold_message (log_read_data_ptr, log_message_ptr);
	go to RETURN;
%page;
dm_log_read_inner_$free_message:
     entry (P_log_read_data_ptr, P_log_message_ptr);

/* Frees message held by $hold_message */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	log_message_ptr = INNER_RING_POINTER (P_log_message_ptr);
						/* OK to do this because log_read_ validates the ptr */

	call log_read_$free_message (log_read_data_ptr, log_message_ptr);
	go to RETURN;
%page;
dm_log_read_inner_$get_log_uid:
     entry (P_log_read_data_ptr, P_log_uid, P_code);

/* Returns the uid of the log segment */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	call log_read_$get_log_uid (log_read_data_ptr, log_uid, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_log_uid = log_uid;
	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$register:
     entry (P_log_read_data_ptr, P_process_id, P_event_channel, P_code);

/* Interface to log_read_$register */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	process_id = P_process_id;
	event_channel = P_event_channel;

	call log_read_$register (log_read_data_ptr, process_id, event_channel, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_code = 0;
	go to RETURN;
%page;
dm_log_read_inner_$deregister:
     entry (P_log_read_data_ptr, P_process_id, P_event_channel, P_code);

/* Interface to log_read_$deregister */

	saved_validation = -1;
	on cleanup call CLEAN_UP;

	call VALIDATE ();

	process_id = P_process_id;
	event_channel = P_event_channel;

	call log_read_$deregister (log_read_data_ptr, process_id, event_channel, code);
	if code ^= 0 then call ERROR_RETURN (code);

	P_code = 0;
	go to RETURN;
%page;
CLEAN_UP: proc;

	if saved_validation ^= -1 then
	     call cu_$level_set (saved_validation);

end CLEAN_UP;
%page;
ERROR_RETURN: proc (P_local_code);

dcl P_local_code fixed bin (35);

	P_code = P_local_code;
	go to RETURN;

end ERROR_RETURN;
%page;
INNER_RING_POINTER: proc (P_ptr) returns (ptr);

dcl (P_ptr, inner_ring_ptr) ptr;
dcl (offset, segno) bit (18);

	segno = baseno (P_ptr);
	offset = rel (P_ptr);
	inner_ring_ptr = pointer (baseptr (segno), offset);
	return (inner_ring_ptr);

end INNER_RING_POINTER;
%page;
VALIDATE:
     procedure;

	log_read_data_ptr = P_log_read_data_ptr;

	do opening_index = 1 to hbound (static_log_read_ptr, 1)
	     while (static_log_read_ptr (opening_index) ^= log_read_data_ptr);
	end;
	if opening_index > hbound (static_log_read_ptr, 1) then
	     call sub_err_ (error_table_$not_open, ME, ACTION_CANT_RESTART, null, 0,
		"Invalid log_read_data_ptr ^p.", log_read_data_ptr);

	saved_validation = cu_$level_get ();
	call cu_$level_set (get_ring_ ());

	log_read_data_ptr = static_log_read_ptr (opening_index);  /* take inner ring copy */

	return;

end VALIDATE;
%page;
%include log_read_open_info;
%page;
%include status_structures;
%page;
%include sub_err_flags;


end dm_log_read_inner_;
