/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* procedure to return the address of a datum given ptr to its symbol node

   Initial Version: 22 January 1973 by BLW
   Modified:	8 December 1978 by RAB to ignore fault bits in LOT & ISOT
   Re-written:	14 Mar 79 BY James R. Davis for beauty and packed decimal
   Modified:	5 November 1982 by T Oke to add VLA 255/256 support.
   Modified: June 83 JMAthane to replace references to "runtime_symbol" structure
	by calls to runtime_symbol_info_ subroutine and use extended set of encoded values.
   Modified: 05 July 83 by S. Herbst, excised reference to data_ptr as instructed by JMAthane.
   Modified:	26 July 1983 by T Oke to delete superfluous use of
		arg_list_arg_count.  We neither define, nor require it.
   Modified: 06 Oct 83 by S. Herbst, added version strings to runtime_symbol_info_ structures. */
/* Modified: 17 Oct 83 by S. Herbst, removed Version 1 symbol table support */

get_runtime_address: proc (block_pt, symbol_pt, stack_pt, link_pt, text_pt, ref_pt, subs_pt) returns (ptr);

	dcl     block_pt		 ptr,		/* ptr to block node */
	        symbol_pt		 ptr,		/* ptr to symbol node */
	        stack_pt		 ptr,		/* ptr to stack frame */
	        link_pt		 ptr,		/* ptr to linkage section */
	        text_pt		 ptr,		/* ptr to object segment */
	        ref_pt		 ptr,		/* ref ptr for based variable */
	        subs_pt		 ptr;		/* ptr to subscript vector */

	dcl     blk_pt		 ptr init (block_pt);
	dcl     sym_pt		 ptr init (symbol_pt);
	dcl     sp		 ptr init (stack_pt);
	dcl     lp		 ptr init (link_pt);
	dcl     tp		 ptr init (text_pt);
	dcl     rp		 ptr init (ref_pt);

	dcl     data_ptr		 ptr;		/* hold address as we calculate it */
	dcl     bo		 fixed bin (35);	/* bit offset of data */
	dcl     subscript		 (n_dims) fixed bin based (subs_pt); /* the subscripts supplied */
	dcl     1 address_info	 like runtime_address_info;
	dcl     code		 fixed bin (35);
	dcl     arg_list_arg_count	 fixed bin;
	dcl     sum		 fixed bin (35);	/* holds array offset as calc'ed */
	dcl     subs_x		 fixed bin;	/* index into subscripts */
	dcl     address		 fixed bin (35);	/* logical address */
	dcl     bit_offset		 fixed bin (6);	/* bit offset of pointer */
	dcl     word_offset		 fixed bin (35);	/* word offset of pointer */
	dcl     segno		 fixed bin;	/* segment number of pointer */

	dcl     pp		 ptr unaligned;	/* packed pointer */
	dcl     1 packed_pointer	 unaligned based (addr (pp)), /* packed pointer overlay */
		2 bit_offset	 fixed bin (6) unsigned unaligned,
		2 address		 fixed bin (30) unsigned unaligned;

	dcl     pl1_operators_$VLA_words_per_seg_ fixed bin (19) external;


	dcl     (addr, addrel, baseno, bin, divide, mod, multiply, null, ptr, stackbaseptr) builtin;
%page;
		dcl     off		 fixed bin (35);

		address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;

		call runtime_symbol_info_$address (sym_pt, addr (address_info), code);
		if code ^= 0 then return (null);

		data_ptr = get_basic_address ();

		if address_info.offset_is_encoded then
		     off = decode_value (address_info.offset);
		else off = address_info.offset;
		bo = convert_units (off, (address_info.units), (address_info.use_digit));
		n_dims = runtime_symbol_info_$array_dims (sym_pt);
		if (n_dims > 0) & (subs_pt ^= null) then do;
			begin;
dcl  1 array_info  like runtime_array_info;

			     array_info.version = RUNTIME_ARRAY_INFO_VERSION_1;

			     call runtime_symbol_info_$array (sym_pt, addr (array_info), code);
			     if code ^= 0 then return (null);

			     sum = 0;
			     do subs_x = 1 to n_dims;
				if array_info.bounds (subs_x).multiplier_is_encoded then
				     sum = sum + (subscript (subs_x) *
					decode_value (array_info.bounds.multiplier (subs_x)));
				else sum = sum + (subscript (subs_x) * array_info.bounds.multiplier (subs_x));
			     end;
			     if array_info.virtual_origin_is_encoded then
				sum = sum - decode_value (array_info.virtual_origin);
			     else
				sum = sum - array_info.virtual_origin;
			     bo = bo + convert_units (sum, (array_info.array_units),
				(array_info.use_digit));
			end;
		     end;				/* subscript hacking */
/* Modification for 255 and 256K Very Large Arrays in Fortran.
   This uses the new CLASS type "1010"b to indicate 'VLA_based'.  The address conversion
   factor is taken from the external 'pl1_operators_$VLA_words_per_seg_'.  All address
   calculations will permit segment skipping. */

		if address_info.class = 10		/* VLA_based */
		then do;
			pp = data_ptr;		/* pack pointer */

/* Determine bit_offset and word_offset of original pointer */

			bit_offset = packed_pointer.bit_offset + bo;
			word_offset = divide (bit_offset, 36, 35, 0);
			packed_pointer.bit_offset = mod (bit_offset, 36);

/* do specific 255/256K addressing */
			if pl1_operators_$VLA_words_per_seg_ = 262144
			then packed_pointer.address = packed_pointer.address + word_offset;
			else do;
				address = packed_pointer.address;
				segno = divide (address, 262144, 17, 0);
				address = mod (address, 262144) +
				     segno * pl1_operators_$VLA_words_per_seg_ + word_offset;
				packed_pointer.address =
				     divide (address, pl1_operators_$VLA_words_per_seg_, 17, 0) *
				     262144 + mod (address, pl1_operators_$VLA_words_per_seg_);
			     end;
			data_ptr = pp;		/* unpack */
			return (data_ptr);
		     end;
		return (bitrel (data_ptr, (bo)));

convert_units: proc (value, unit_code, unit_msb) returns (fixed bin (35));
	dcl     value		 fixed bin (35) parameter; /* offset in raw */
	dcl     unit_code		 fixed bin (2) parameter unsigned;
	dcl     unit_msb		 fixed bin (1) parameter unsigned;

	dcl     unit_type		 fixed bin (3);

	unit_type = (unit_msb * 4) + unit_code;
	goto units_case (unit_type);

units_case (0): return (value * bits_per_word);		/* word */
units_case (1): return (value);			/* bit */
units_case (2): return (value * bits_per_character);	/* char */
units_case (3): return (value * bits_per_half);		/* halfword */
units_case (4): return (value * bits_per_word);
units_case (5): return (value);
units_case (6): return (value * bits_per_character);
units_case (7): return (divide (multiply (value, 9, 24, 0) + 1, 2, 24, 0)); /* digits 4.5 bits */
     end convert_units;


decode_value: proc (ev) returns (fixed bin (35));
	dcl     ev		 fixed bin (35) parameter; /* an encoded value */
	dcl     stu_$decode_runtime_value_extended entry
		     (fixed bin (35), ptr, ptr, ptr, ptr, ptr, ptr, fixed bin) returns (fixed bin (35));
	dcl     drv		 fixed bin (35);
	dcl     ns_code		 fixed bin;
	drv = stu_$decode_runtime_value_extended (ev, blk_pt, sp, lp, tp, data_ptr, sym_pt, ns_code);
	return (drv);
     end decode_value;



no:	return (null);
%page;
get_basic_address: proc returns (ptr);

/* common work for both versions of symbol - branch depending on the storage class,
   each handled its own way.  The parts of the symbol node used are the same for both versions, so this is OK
   For "non-simple" symbols an additional offset will be calculated */

	dcl     storage_offset	 fixed bin (35);
	dcl     based_ptr		 ptr based;
	dcl     based_thing		 fixed bin based;	/* used in based addr calc  */
	dcl     ap		 ptr;		/* to arg list */
	dcl     temp		 ptr;
	dcl     sw		 fixed bin (4);
	dcl     1 type_info		 like runtime_type_info;
	dcl     stu_$get_implicit_qualifier entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);

	sw = address_info.class;

	storage_offset = address_info.location;
	goto case (sw);

case (0): goto no;					/* unused */

case (1):						/* automatic */
	if sp = null then goto no;
	return (addrel (sp, storage_offset));

case (2):						/* automatic adjustable */
	if sp = null then goto no;
	return (addrel (sp, storage_offset) -> based_ptr);

case (10):					/* VLA_based */
case (3):						/* based */
	if ref_pt ^= null then temp = ref_pt;
	else do;
		temp = stu_$get_implicit_qualifier (blk_pt, sym_pt, sp, lp, tp);
		if temp = null then goto no;
	     end;
	return (temp);

case (4):						/* internal static */
	return (addrel (get_static_ptr (), storage_offset));

case (5):						/* external static */
						/* extra level of indirection is to snap link */
	return (addr (addrel (get_lp (), storage_offset) -> based_ptr -> based_thing));

case (6):						/* controlled internal */
	return (addrel (get_static_ptr (), storage_offset) -> ctl_block.data);

case (7):						/* controlled external */
	return (addrel (get_lp (), storage_offset) -> based_ptr -> ctl_block.data);

case (8):						/* parameter, not always in same place */
	if sp = null then goto no;
	return (addrel (sp, storage_offset) -> based_ptr);

case (9):						/* parameter */
	if sp = null then goto no;
	ap = get_arglist_ptr ();


	if storage_offset > bin (ap -> arg_list.arg_count, 17) then goto no; /* argrange condition ! */
	temp = convert_ptr (ap -> arg_list.arg_ptrs (storage_offset));

/* check for varying string that is not a member - in which case the addr is
   for the string and not the length part */

	if blk_pt -> runtime_block.flag then do;	/* version 2 only */
		type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

		call runtime_symbol_info_$type (sym_pt, addr (type_info), code);
		if code ^= 0 then return (null);

		if type_info.type = varying_bit_dtype
		     | type_info.type = varying_char_dtype
		then if runtime_symbol_info_$level (sym_pt) = 0 /* and not a member */
		     then temp = addrel (temp, -1);	/* back it up */
	     end;
	return (temp);


case (11): ;					/* relative in symbol */
	return (addrel (symbol_pt, storage_offset));


case (12):					/* text ref */
	return (ptr (get_tp (), storage_offset));

case (13):					/* link reference */
	return (addrel (get_lp (), storage_offset));

case (14): goto no;					/* unused */

case (15): goto no;					/* unused */
%page;
convert_ptr: proc (P_ptr) returns (ptr);

/* given a pointer which may be an ITS, ITP, or text-relative ptr, convert to ITS -
   This is needed because for certain quick blocks, the compiler will generate constant argument lists with ITP pointers
   An ITP ptr can only be evaluated using a pointer register, which we get from the proc */

	dcl     P_ptr		 ptr parameter;	/* may be ITS or ITP ptr */
	dcl     1 an_itp_ptr	 aligned like itp;
	dcl     reg		 fixed bin;
	dcl     basep		 ptr;		/* a temp */
	dcl     1 embedded_text_ptr	 aligned,
		2 off		 bit (18) unal,
		2 pad		 bit (18) unal;
	dcl     (string, unspec)	 builtin;

	string (an_itp_ptr) = unspec (P_ptr);

	if an_itp_ptr.itp_mod = "43"b3		/* ITS */
	then return (P_ptr);

	if an_itp_ptr.itp_mod = "00"b			/* text ptr */
	then do;
		string (embedded_text_ptr) = unspec (P_ptr);
		return (ptr (get_tp (), embedded_text_ptr.off));
	     end;


	if an_itp_ptr.itp_mod = "41"b3		/* ITP */
	then do;
		reg = bin (an_itp_ptr.pr_no, 3);
		if reg = 6 then basep = sp;
		else if reg = 4 then basep = get_static_ptr ();
		else goto no;			/* other pr, cant guess what value it had */
		return (bitrel (addrel (basep, an_itp_ptr.offset), bin (an_itp_ptr.bit_offset, 6)));
	     end;

	goto no;					/* some other modification - yechh ! */

%include its;
     end convert_ptr;
%page;
get_arglist_ptr: proc () returns (ptr);

	dcl     ap		 ptr;
	if blk_pt = null
	then ap = (sp -> frame.argptr);		/* no block, assume frame owner's arg list */
	else if blk_pt -> runtime_block.quick		/* if quick, use  entry info */
	then do;
		if blk_pt -> runtime_block.entry_info = (18)"0"b then goto no; /* no entry info */
		ap = (addrel (sp, blk_pt -> runtime_block.entry_info) -> quick_entry.argptr);
	     end;
	else ap = (sp -> frame.argptr);
	arg_list_arg_count = ap -> arg_list.arg_count;
	return (ap);
     end get_arglist_ptr;



get_lp: proc () returns (ptr);

	dcl     ilp		 ptr unal;

	if lp ^= null then return (lp);
	ilp = stackbaseptr () -> stack_header.lot_ptr -> lot.lp (bin (baseno (get_tp ()), 18));
	if faulty_ptr (ilp) then goto no;
	return (ilp);
     end get_lp;


get_tp: proc () returns (ptr);			/* to base of object seg */

	if tp ^= null then return (tp);
	if sp ^= null then return (ptr (sp -> frame.entry, 0));
	if blk_pt ^= null then return (ptr (blk_pt, 0));
	goto no;					/* nothing left to try */
     end get_tp;


get_static_ptr: proc () returns (ptr);
	dcl     isp		 ptr unal;
	isp = stackbaseptr () -> stack_header.isot_ptr -> isot.isp (bin (baseno (get_tp ()), 18));
	if faulty_ptr (isp) then goto no;
	return (isp);
     end get_static_ptr;


faulty_ptr: proc (P_unal_ptr) returns (bit (1));
	dcl     P_unal_ptr		 ptr unal parameter;
	return (baseno (P_unal_ptr) = "0"b);
     end faulty_ptr;

     end get_basic_address;
%page;
bitrel: proc (P_ptr, P_bit_offset) returns (ptr);
	dcl     P_ptr		 ptr parameter;
	dcl     P_bit_offset	 fixed bin (24) parameter;

	dcl     1 str		 aligned based (P_ptr),
		2 filler		 unal bit (P_bit_offset),
		2 target		 unal bit (1);

	if P_bit_offset < 0 then goto no;
	return (addr (str.target));
     end bitrel;
%page;
%include stu_frame;
%page;
%include symbol_node;
%page;
%include runtime_symbol;



%include quick_entry;


%include ctl_block;
%page;
%include stack_header;
%page;
%include arg_list;
%page;
%include std_descriptor_types;
%page;
%include system;
%page;
%include lot;
%page;
%include runtime_symbol_info_;
%page;

     end get_runtime_address;
