/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* procedure to return remote format variable to plio */

remote_format: proc(v,sp,refp,ans) returns(fixed bin);

dcl	v	fixed bin,	/* value to decode */
	sp	ptr,		/* stack frame pointer */
	refp	ptr,		/* based reference pointer */
	ans	label;		/* answer (output) */

dcl	(p,q) ptr,
	(i,n,n1,n2,n3) fixed bin,
	ent_var entry(ptr,label) variable;

dcl	1 value		aligned based(p),
	2 flag		unal bit(2),
	2 type		unal bit(4),
	2 (n1,n2)		unal bit(6),
	2 n3		unal bit(18);

dcl	1 lab		based(q),
	2 p1		ptr,
	2 p2		ptr;

dcl	fixed_bin fixed bin based,
	ptr_var ptr based,
	label_var label local variable based;

dcl	(addr,addrel,baseno,fixed,hbound,null,ptr,substr) builtin;

dcl	1 arglist		aligned based,
	2 number		bit(17) unal,
	2 filler		bit(55) unal,
	2 ptr(1)		ptr;

%include stu_frame;
%include stack_header;
%include lot;

	p = addr(v);

	if flag = "00"b
	then do;
	     q = addr(ans);
	     p1 = addrel(p,value.n3);
	     p2 = sp;
ok:	     return(0);
	     end;

	n = fixed(type,4);
	if n > hbound(sw,1) then goto sw(3);

	n1 = fixed(value.n1,6);
	n2 = fixed(value.n2,6);
	n3 = fixed(value.n3,18);

	/* get ptr to proper stack frame if needed */

	if substr("10001000011"b,n+1,1)
	then do;

	     q = sp;
	     do i = 1 to n1;
		q = q -> frame.display;
		end;

	     end;

	goto sw(n);

	/* automatic variable */

sw(0):	q = addrel(q,n3);

set:	ans = q -> label_var;
	goto ok;

	/* internal static variable */

sw(1):	call get_static_ptr;
	goto sw(0);

	/* external static variable */

sw(2):	q = addrel(addrel(sp -> frame.linkage,n3) -> ptr_var,n1);
	goto set;

	/* illegal case */

sw(3):	return(1);

	/* based on automatic pointer */

sw(4):	q = addrel(addrel(q,n3) -> ptr_var,n2);
	goto set;

	/* based on internal static pointer */

sw(5):	call get_static_ptr;
	goto sw(4);

	/* based on external static pointer */

sw(6):	q = addrel(addrel(addrel(sp -> frame.linkage,n3) -> ptr_var,
	 n1) -> ptr_var,n2);
	goto set;

	/* based on reference pointer */

sw(7):	q = addrel(refp,n2);
	goto set;

	/* value given by procedure */

sw(8):	q = addr(ent_var);
	p1 = ptr(sp -> frame.entry,n3);
	p2 = sp;
	call ent_var(refp,ans);
	goto ok;

	/* value given by (9) or based on (10) the nth arg of procedure */

sw(9):
sw(10):	q = q -> frame.argptr;

	if n2 > fixed(q -> arglist.number,17) then goto sw(3);

	q = q -> arglist.ptr(n2);

	if n = 9 then q = addrel(q,n3);
	else q = addrel(q -> ptr_var,n3);
	goto set;


get_static_ptr:	proc;

	     sb = ptr(addr(sb),0);
	     q = sb -> stack_header.isot_ptr -> isot.isp(fixed(baseno(sp -> frame.entry),18));

	     end;

	end;
