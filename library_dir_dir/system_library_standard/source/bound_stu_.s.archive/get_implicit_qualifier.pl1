/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedure to obtain the value of the pointer used in the declaration of a
   based variable, i.e. given
   dcl foo based(p);
   this procedure is given a pointer to the runtime symbol node for "foo"
   and it attempts to locate and return the value of "p"

   Modified: 26 Feb 79 by James R. Davis to know about display steps
   Modified: June 83 JMAthane to replace references to "runtime_symbol" structure
	by calls to runtime_symbol_info_ subroutine */
/* Added version strings to runtime_symbol_info_ structures 10/06/83 S. Herbst */

get_implicit_qualifier: proc (block_pt, sym_pt, stack_pt, link_pt, text_pt) returns (ptr);

	dcl     block_pt		 ptr,		/* ptr to block in which symbol is declared */
	        sym_pt		 ptr,		/* ptr to symbol node of based variable */
	        stack_pt		 ptr,		/* ptr to stack frame associated with based var */
	        link_pt		 ptr,		/* ptr to linkage section */
	        text_pt		 ptr;		/* ptr to object segment */

	dcl     sp		 ptr;		/* stack frame ptr */
	dcl     isym_ptr		 ptr;		/* to symbol node of the implicit ptr */
	dcl     ival_ptr		 ptr;		/* to the value of the ptr we're based on */
	dcl     iblk_ptr		 ptr;		/*  to the block the implicit qual was dcl'd in */
	dcl     bp		 ptr;		/* to the block the based item was dcl'd in */
	dcl     based_ptr		 based ptr;
	dcl     packed_ptr		 unaligned based ptr;
	dcl     i			 fixed bin;

	dcl     stu_$offset_to_pointer entry (ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr),
	        stu_$get_runtime_address entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr),
	        stu_$block_dcld_in	 entry (ptr) returns (ptr),
	        stu_$get_display_steps entry (ptr, ptr) returns (fixed bin);
	dcl     (addrel, fixed, null)	 builtin;

	dcl     1 type_info		 like runtime_type_info;
	dcl     1 address_info	 like runtime_address_info;
	dcl     code		fixed bin (35);


	type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	call runtime_symbol_info_$type (sym_pt, addr (type_info), code);
	if code ^= 0 then return (null);

	address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;
	
	call runtime_symbol_info_$address (sym_pt, addr (address_info), code);
	if code ^= 0 then return (null);

	if address_info.location = 0 then return (null);	/* no implicit qualifier in table */
	isym_ptr = addrel (sym_pt, address_info.location);/* get ptr to symbol_node for implicit ptr */

	bp = block_pt;				/* get block node for symbol, if not supplied, find it */
	if bp = null then bp = stu_$block_dcld_in (sym_pt);
	sp = stack_pt;				/* find right frame for implicit ptr */
	iblk_ptr = stu_$block_dcld_in (isym_ptr);
	do i = 1 to stu_$get_display_steps (bp, iblk_ptr);
	     if sp ^= null then sp = sp -> frame.display;
	end;

/* now pickup value of the pointer */

	ival_ptr = stu_$get_runtime_address (iblk_ptr, isym_ptr, sp, link_pt, text_pt, null, null);
	if ival_ptr = null then return (null);

	type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	call runtime_symbol_info_$type (isym_ptr, addr (type_info), code);
	if code ^= 0 then return (null);

	if type_info.type = offset_dtype
	then return (stu_$offset_to_pointer (iblk_ptr, isym_ptr, ival_ptr, sp, link_pt, text_pt));

	else if type_info.type = pointer_dtype
	then if type_info.packed
	     then return (ival_ptr -> packed_ptr);
	     else return (ival_ptr -> based_ptr);
	else return (null);				/* what kind of data type!! */

%include stu_frame;

%include runtime_symbol;

%include std_descriptor_types;
%include runtime_symbol_info_;

     end get_implicit_qualifier;
