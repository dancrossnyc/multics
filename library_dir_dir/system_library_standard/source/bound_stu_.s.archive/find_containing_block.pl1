/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

find_containing_block: procedure (header_ptr, location) returns (pointer);

/* This routine finds the block that physically contains a given location, and returns a pointer to
   the symbol block for that block.  It needs a pointer to the symbol header for the procedure to
   find the root block from which to begin search.

   Initial Version: Unknown Person
   Modified: 9 Sept 78 by James R. Davis to remove assumption that blocks are in text order
*/



dcl  header_ptr pointer,				/* pointer to symbol header of procedure */
    (addrel, fixed, null) builtin,
     location fixed bin (35),				/* location of interest */
     bp pointer,					/* pointer to current block */
     p pointer;



	if header_ptr = null then return (null);	/* check for real symbol table */
	if header_ptr -> std_symbol_header.identifier ^= "symbtree" then return (null);
	p = addrel (header_ptr, header_ptr -> std_symbol_header.area_pointer);
	if p -> pl1_symbol_block.identifier ^= "pl1info" then return (null);
	if p -> pl1_symbol_block.root = (18)"0"b then return (null);
	p = addrel (header_ptr, p -> pl1_symbol_block.root); /* get pointer to root block */

/* bp at all times points to the innermost block we KNOW we're in,
   p points to the block being examined */

	bp = p;					/* we must be in root */
	do while ("1"b);
	     if location >= fixed (addrel (p, p -> runtime_block.first) -> statement_map.location, 18)
	     & location <= fixed (addrel (p, fixed (p -> runtime_block.last) -2) -> statement_map.location, 18)
	     then do;				/* we're inside this block */
		bp = p;
		if bp -> runtime_block.son ^= (18) "0"b /* have we a son ? */
		then p = addrel (bp, bp -> runtime_block.son); /* examine it */
		else return (bp);			/* can go no deeper */
	     end;
	     else if p -> runtime_block.brother
	     then p = addrel (p, p -> runtime_block.brother);
	     else return (bp);
	end;					/* of search */



%include std_symbol_header;
%include  runtime_symbol;
%include statement_map;
%include pl1_symbol_block;
     end find_containing_block;
