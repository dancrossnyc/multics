/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

get_map_index: proc (P_header, P_location, R_index, R_ptr);

/* given a pointer to the symbol header of a standard object segment, and an offset from the base of the seg
   finds the map entry for the source statement that generated the code, then returns the index and addr of the entry

   Created: 23 Feb 79 James R. Davis
*/

	dcl     P_header		 ptr parameter;
	dcl     P_location		 fixed bin (18) unsigned parameter;
	dcl     R_index		 fixed bin parameter; /* Output - index of entry in statement map array */
	dcl     R_ptr		 ptr parameter;	/* Output - ptr to the entry */

	dcl     location		 fixed bin (18) unsigned; /* copy of P_location */
	dcl     highest		 fixed bin (35);	/* highest location in object seg */
	dcl     lowest		 fixed bin (35);	/* lowest address in object seg */
	dcl     number_entries	 fixed bin;	/* number of entries in stmnt map */
	dcl     map_ptr		 ptr;		/* to statement map for seg */
	dcl     map_end_ptr		 ptr;		/* to last entry in map */
	dcl     map_size		 fixed bin;	/* size of an entry in the map */

	dcl     1 map_array		 (number_entries) aligned based (map_ptr) like statement_map;

	dcl     stu_$get_statement_map entry (ptr, ptr, ptr, fixed bin);
	dcl     (addr, bin, divide, fixed, null, rel) builtin;

	R_index = -1;
	R_ptr = null;				/* assume the worst */
	call stu_$get_statement_map (P_header, map_ptr, map_end_ptr, map_size);
	if (map_ptr = null) | (map_end_ptr = null) then return; /* no mpa for seg */
	number_entries = divide (bin (rel (map_end_ptr)) - bin (rel (map_ptr)), map_size, 17, 0);
	location = P_location;
	lowest = fixed (map_array (1).location, 18);
	highest = fixed (map_array (number_entries).location, 18);
	if location < lowest | location > highest then return; /* canty be in text */

	R_index = search_stmnt_map ();
	R_ptr = addr (map_array (R_index));
	return;

search_stmnt_map: proc () returns (fixed bin);

/* does a binary search through statement map for a statement entry whose range of locations
   includes the location we want.  We know the statement map is in order of object seg location.
   Lets hope there are no gaps in the generated code itself!
*/

	dcl     guess		 fixed bin;
	dcl     low		 fixed bin;
	dcl     high		 fixed bin;
	dcl     first_loc_this_stmnt	 fixed bin (35);
	dcl     first_loc_next_stmnt	 fixed bin (35);

	low = 1;
	high = number_entries;
	guess = divide (high + low, 2, 17, 0);		/* start in the middle */

	do while ("1"b);
	     first_loc_this_stmnt = fixed (map_array (guess).location, 18);
	     first_loc_next_stmnt = fixed (map_array (guess + 1).location, 18);
	     if first_loc_this_stmnt <= location & location < first_loc_next_stmnt
	     then return (guess);

	     if (high - low = 1)			/* special case to avoid infinite loop */
	     then if guess = high			/* switch the guess */
		then guess = low;
		else guess = high;
	     else do;				/* refine the limits and make better guess */
		     if first_loc_this_stmnt > location /* we were too high */
		     then high = guess;
		     else low = guess;
		     guess = divide (high + low, 2, 17, 0);
		end;
	end;
     end search_stmnt_map;

%include statement_map;

     end get_map_index;
