/****^  ******************************************************
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Fixed failure when runtime_token.dcl was "0"b.
                                                   END HISTORY COMMENTS */

/* Procedure to search runtime symbol table for a specified symbol.

   Initial Version: 15 May 1970 by BLW
   Modified: 24 October 1971 by BLW for Version II
   Modified: 21 January 1973 by BLW to return pointer to block
   Modified: 21 June 1974 by J.M. Broughton to handle levels and block ptr right
   Modified: 21 February 1978 by R.A. Barnes to consider runtime_symbol.next to always be a
   backwards reference
   Modified: 22 December 1978 by JRDavis 1) not assume that father is frame owner, b) rewrite for elegance
   Modified: 22 Feb 79 by JRDavis to use new routines stu_$get_display_steps
   Modified June 83 JMAthane to replace references to "runtime_symbol"structure
          by calls to runtime_symbol_info_ subroutine. */
/* Removed Version 1 symbol table support 10/17/83 S. Herbst */
/* Fixed when runtime_token.dcl = "0"b	JMAthane June85 */

find_runtime_symbol: proc (pt, name, block_pt, steps) returns (ptr);

	declare
	        pt		 ptr parameter,	/* input: to block in symbol table where search begins */
	        name		 char (*) aligned parameter, /* input: name of symbol, may be of form "a.b.c" */
	        block_pt		 ptr parameter,	/* output: to block node where symbol found or null if fail */
	        steps		 fixed bin parameter; /* output: if <0, non-standard error code:
                                                               -1     block pointer is null
                                                               -2     more than 64 structure levels in given symbol
                                                               -3     given symbol too long
                                                               -4     no declaration for given symbol
                                                               -5     ambiguous reference
                                                               if >= 0,  the number of steps on display chain between the
                                                               starting frame and the found frame along the display chain.
                                                               This information is used by the caller to find the proper
                                                               stack frame for the symbol if needed. */

/* return arg is pointer to runtime_symbol node if symbol found, or null if failed */

	dcl     bp		 ptr;		/* copy of block_pt */
	dcl     i			 fixed bin;
	dcl     ctnum		 fixed bin;	/* number of components in symbol's name */
	dcl     pos		 fixed bin;	/* used in isolating components */
	dcl     a			 (0:64) fixed bin;	/* index of all periods in struc name */

	dcl     (addrel, index, length, hbound, null, substr) builtin;
%page;
	block_pt = null;
	steps = 0;

	bp = pt;
	if bp = null then call failure (-1);

/*  Fill the "a" array - which records where components begin and end in "name"
   a(i) is the index of the i'th delimiter - so the m'th component runs from
   the a(i-1)+1 char  to the a(i)-1 char. */

	ctnum = 0;
	i = 1;					/* be sure we enter the loop */
	do pos = 0 repeat (pos + i) while (i > 0);	/* pos is index of delim */
	     a (ctnum) = pos;			/* record delim position */
	     if ctnum = hbound (a, 1)			/* a new ct begins here, but no room */
	     then call failure (-2);
	     ctnum = ctnum + 1;
	     i = index (substr (name, pos + 1), ".");	/* is there another delim we can see? */
	end;
	a (ctnum) = length (name) + 1;		/* no, there is a "fake" delim after last char */

	dcl     sp		 ptr;		/* to a symbol node */
	dcl     ctindex		 fixed bin;	/* index in name of n'th component */
	dcl     ctlen		 fixed bin;	/* length of component */
	dcl     stu_$get_display_steps entry (ptr, ptr) returns (fixed bin);
	dcl     fsp		 ptr;		/* to first symbol with given name */

	ctindex = a (ctnum - 1) + 1;
	ctlen = a (ctnum) - a (ctnum - 1) - 1;		/* watch those fenceposts! */

	fsp = find_first_symbol (bp, substr (name, ctindex, ctlen));
	call search_symbol (fsp, bp, sp);

	steps = stu_$get_display_steps (pt, bp);
	block_pt = bp;				/* set return arg */
	return (sp);
%page;
find_first_symbol: proc (P_bp, P_name) returns (ptr);

/* given a block ptr and a name, return ptr to the first symbol in the table with the name
   call failure if there is none
  if the name has more than one component (i.e. a member of a structure) we are interested in the last component
*/

	dcl     P_bp		 ptr parameter;
	dcl     P_name		 char (*) parameter;
	dcl     tp		 ptr;		/* to token chain */
	dcl     name_len		 fixed bin;
	dcl     (addrel, length, null) builtin;

	name_len = length (P_name);
	tp = find_token_chain ();


	do while (tp ^= null);
	     if tp -> runtime_token.size = name_len	/* compare lengths first, for efficiency */
	     then if tp -> runtime_token.string = P_name	/* 'cause char compare costs */
		then if tp -> runtime_token.dcl ^= (18)"0"b
		     then return (addrel (tp, tp -> runtime_token.dcl));
	     if (tp -> runtime_token.size > name_len) /* no hope */
		| (tp -> runtime_token.next = (18)"0"b) /* nothing left */
	     then tp = null;			/* cause loop to end */
	     else tp = addrel (tp, tp -> runtime_token.next);
	end;					/* token loop */
	call failure (-4);				/* fell out - not found */

find_token_chain: proc returns (ptr);

	dcl     i			 fixed bin;
	dcl     offset		 bit (18);
	dcl     lgth2		 (0:6) fixed bin int static options (constant) init
				 (1, 2, 4, 8, 16, 32, 99999);

	do i = 0 to (hbound (lgth2, 1) - 1);		/* for every possible length range */
	     if (lgth2 (i) <= name_len) & (name_len < lgth2 (i + 1)) then do; /* found right range */
		     offset = P_bp -> runtime_block.token (i);
		     if offset = (18)"0"b then call failure (-4); /* empty chain */
		     return (addrel (P_bp, offset));
		end;
	end;					/* search */
	call failure (-3);				/* >99999 ! */

     end find_token_chain;
     end find_first_symbol;
%page;
search_symbol: proc (P_first_symbol, P_bp, P_sp);

/* given ptr to first symbol of desired name (or to lowest level, if
   structure), and a block to begin searching in, search all blocks, from
   inward out, for a symbol that matches, or fail (in which case we do not return)
*/

/*   If the runtime symbol table was produced by the Version II PL/I compiler,
   the given symbol need not be fully qualified.  The searching algorithm used
   here is the same as that used by the PL/I compiler.  We search for an applicable
   declaration for which the given symbol is a fully qualified reference.  We
   remember any applicable declaration for which the symbol is a partially
   qualified reference.  If two or more applicable declarations can be found
   and the given symbol is not a fully qualified reference to any of them, we
   have an ambiguous reference.  If only one applicable declaration can be found,
   the given symbol is a valid partially qualified reference to that declaration.
   The search for an applicable declaration begins in the current block and continues
   outward until the first applicable declaration is found.  After the first
   applicable declaration is found, all additional searching is confined to the
   block in which the first applicable declaration was found.
*/

	dcl     P_first_symbol	 ptr parameter;	/* Input, Read-only, to symbol start at */
	dcl     P_bp		 ptr parameter;	/* Input/Output, By-name, to starting block */
	dcl     P_sp		 ptr parameter;	/* output, to symbol found */

	dcl     hp		 ptr;		/* to symbol table header */
	dcl     sp		 ptr;
	dcl     pq_ct		 fixed bin;	/* number of partially qualified ref's found */
	dcl     pq_sp		 ptr;		/* to symbol node of partially qual'd ref */
	dcl     matches		 bit (1) aligned;
	dcl     fully		 bit (1) aligned;
	dcl     stu_$block_dcld_in	 entry (ptr) returns (ptr);

	pq_ct = 0;
	hp = addrel (P_bp, P_bp -> runtime_block.header);

	do P_bp = P_bp repeat (addrel (P_bp, P_bp -> runtime_block.father)) while (P_bp ^= hp);
	     sp = P_first_symbol;
	     do while (sp ^= null);			/* for each symbol of same name */
		if stu_$block_dcld_in (sp) = P_bp then do; /* if dcl'd in current block */
			call match_name (matches, fully); /* test it for match */
			if matches
			then if fully
			     then do;
				     P_sp = sp;
				     return;
				end;
			     else do;		/* partial -count it up */
				     pq_ct = pq_ct + 1;
				     pq_sp = sp;
				end;
		     end;

		sp = runtime_symbol_info_$next (sp);
	     end;					/* symbol loop */

/* not found in this block as a fully - but perhaps as a partial */

	     if pq_ct > 1 then call failure (-5);	/* ambiguous */
	     if pq_ct = 1 then do;			/* exactly one - ok */
		     P_sp = pq_sp;
		     return;
		end;

/* no partial, continue search in father block */

	end;

/* fell out of block loop - not found */

	call failure (-4);
%page;
match_name: proc (P_match, P_fully);

/* called when current symbol has the right name - see if the components match properly */
	dcl     P_match		 bit (1) aligned parameter; /* output "1"b if matches */
	dcl     P_fully		 bit (1) aligned parameter; /* output "1"b if match is fully qual'ed */
						/* references the gloabl vars: ctnum a, name, sp */

	dcl     lev		 fixed bin;
	dcl     cti		 fixed bin;	/* index into name of a component */
	dcl     ctl		 fixed bin;	/* length of a token */

	dcl     np		 ptr;		/* to symbol node */
	dcl     ni		 fixed bin;	/* index in names array */

	lev = runtime_symbol_info_$level (sp);
	P_fully = "0"b;
	P_match = "0"b;

	if (lev = 0) | (lev = 1)			/* can only be one ct in name */
	then do;					/* can optomize test */
		if ctnum = 1			/*  both names and component count match */
		then do;
			P_fully = "1"b;
			P_match = "1"b;
		     end;
		else ;				/* too many ct's - can't match */
		return;				/* done in either case */
	     end;					/* of one-component opt */

	else if lev < ctnum				/* more cts in name then levels to match */
	then return;				/* cant hope to match */

	np = sp;
	do ni = ctnum to 1 by -1;			/* from last to first component */
	     cti = a (ni - 1) + 1;
	     ctl = a (ni) - a (ni - 1) - 1;

	     do while (addrel (np, np -> runtime_symbol.name) -> acc.string ^= substr (name, cti, ctl));
		if runtime_symbol_info_$level (np) > 1
		then np = runtime_symbol_info_$father (np);
		else return;
	     end;
	end;
	P_fully = (ctnum = lev);
	P_match = "1"b;
	return;

     end match_name;
     end search_symbol;
%page;
/* never should fall through */
exit:	return (null);

failure: proc (why);
	dcl     why		 fixed bin;
	steps = why;
	goto exit;
     end;
%page;

%include runtime_symbol;
%page;
%include symbol_node;
%page;
%include pascal_symbol_node;
%page;
%include runtime_symbol_info_;
%page;
%include acc;
     end;
