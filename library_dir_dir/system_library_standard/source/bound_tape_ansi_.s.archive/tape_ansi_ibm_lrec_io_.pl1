/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/*                                                        */
/*   *    *    *    *    *    *    *    *    *    *    *    *    *    */
/*                                                                    */
/*  0) Created:                                                       */
/*  1) Modified: 06/29/79 by Rick Riley                               */
/*               (to allow reading writing ibm tapes in binary mode   */
/*  2) Modified: 4/82 by J. A. Bush for block sizes > 8192 bytes      */
/* ****************************************************************** */


tape_ansi_ibm_lrec_io_: procedure;
	return;

/* parameters */

	dcl     peel		 fixed bin,
	        hold		 char (4) varying;
	dcl     iocbP		 ptr,		/* pointer to iocb */
	        ubP		 ptr,		/* pointer to user buffer */
	        buf_len		 fixed bin (21),	/* length of user buffer */
	        rec_len		 fixed bin (21),	/* number of characters transmitted */
	        code		 fixed bin (35);

%include iocb;

%include tape_ansi_cseg;

%include tape_ansi_fd;

%include tape_ansi_fl;


/* based storage */
	dcl     1 BDW		 based (cseg.lrec.bufP), /* block descriptor word */
		2 length		 fixed bin (17) unaligned, /* block length */
		2 pad		 bit (18) unaligned;/* pad */
	dcl     buf		 char (cseg.buf_size) aligned based (cseg.lrec.bufP), /* one physical block */
	        data		 char (move) unaligned based, /* overlay for data move */
	        rpad		 char (1) based (addr (erp (fd.mode))); /* ASCII , BINARY, or EBCDIC space */
	dcl     1 SDW		 based (dwP),	/* segment descriptor word */
		2 length		 fixed bin (17) unaligned, /* length of segment */
		2 code		 fixed bin (8) unaligned, /* control code */
		2 pad		 bit (9) unaligned;
	dcl     1 RDW		 based (dwP),	/* V-format rdw */
		2 length		 fixed bin (17) unaligned, /* record length */
		2 pad		 bit (18) unaligned;/* pad */
	dcl     ub		 char (buf_len) unaligned based (ubP); /* user buffer overlay */

/* error codes */

	dcl
	        (error_table_$tape_error,
	        error_table_$eof_record,
	        error_table_$eov_on_write,
	        error_table_$file_busy,
	        error_table_$fatal_error,
	        error_table_$invalid_record_desc,
	        error_table_$long_record)
				 fixed bin (35) external static;

/* builtin functions */
	dcl     (addr, copy, mod, null, substr, unspec) builtin;

/* conditions */
	dcl     cleanup		 condition;

/* automatic storage */
	dcl     i			 fixed bin,	/* temporary storage */
	        csw		 bit (1) init ("0"b), /* indicates close or write_record entry */
	        total		 fixed bin (21) initial (0), /* total number of characters moved in this request */
	        move		 fixed bin initial (0), /* number of characters moved per segment/record */
	        left		 fixed bin (21),	/* number of characters remaining to be moved */
	        long_record		 bit (1) initial ("0"b), /* long record switch */
	        parity_error	 bit (1) initial ("0"b), /* parity error switch */
	        req_off		 fixed bin,	/* number of buffer characters processed by this request */
	        remain		 fixed bin,	/* number of unprocessed characters in buffer */
	        ecode		 fixed bin (35) init (0), /* temporary error code */
	        data_len		 fixed bin initial (0), /* number of characters in varying length record */
	        first_span		 bit (1) initial ("1"b); /* first segment of spanned request switch */

/* pointers */
	dcl     dwP		 ptr,		/* pointer to RDW - SDW */
	        fromP		 ptr,		/* pointer to buffer for data move */
	        toP		 ptr;		/* pointer to user buffer for data move */


/* static storage */


	dcl     1 sdw		 internal static aligned, /* SDW data */
		2 complete	 fixed bin (8) initial (0), /* complete code */
		2 initial		 fixed bin (8) initial (1), /* initial code */
		2 medial		 fixed bin (8) initial (3), /* medial code */
		2 final		 fixed bin (8) initial (2); /* final code */

	dcl     erp		 (3) bit (9) internal static initial ("000100000"b, "001000000"b, "000100000"b); /* ASCII EBCDIC BINARY record pad */

	dcl     ebcdic		 fixed bin internal static init (2);
	dcl     binary		 fixed bin internal static init (3);

	dcl     DOS		 fixed bin initial (3) internal static;

/* external procedures */


	dcl     ascii_to_ebcdic_	 ext entry (char (*), char (*)),
	        ebcdic_to_ascii_	 ext entry (char (*), char (*)),
	        tape_ansi_file_cntl_$data_eof ext entry (ptr, fixed bin (35)),
	        tape_ansi_file_cntl_$data_eot ext entry (ptr, fixed bin (35)),
	        tape_ansi_file_cntl_$position_for_output ext entry (ptr, fixed bin (35)),
	        tape_ansi_nl_file_cntl_$data_eof ext entry (ptr, fixed bin (35)),
	        tape_ansi_nl_file_cntl_$data_eot ext entry (ptr, fixed bin (35)),
	        tape_ansi_tape_io_$close ext entry (ptr, fixed bin (35)),
	        tape_ansi_tape_io_$get_buffer ext entry (ptr, ptr, fixed bin (35)),
	        tape_ansi_tape_io_$read ext entry (ptr, ptr, fixed bin, fixed bin (35)),
	        tape_ansi_tape_io_$release_buffer ext entry (ptr, ptr, fixed bin (35)),
	        tape_ansi_tape_io_$write ext entry (ptr, ptr, fixed bin, fixed bin (35));

read_record: entry (iocbP, ubP, buf_len, rec_len, code);	/* read_record entry point */

	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get pointer to cseg */

	if cseg.file_lock then do;
		rec_len = 0;
		code = error_table_$file_busy;
		return;
	     end;
	else do;
		on cleanup begin;
			cseg.file_lock = "0"b;
			cseg.code = error_table_$fatal_error;
		     end;
		cseg.file_lock = "1"b;
	     end;


	if cseg.code ^= 0 then do;			/* was there a non-restartable error? */
		code = cseg.code;			/* set return code */
		cseg.file_lock = "0"b;
		return;
	     end;

	if cseg.rlN ^= -1 then do;			/* data record is in read length segment */
		if buf_len >= cseg.rlN then do;	/* user wants as much as (or more than) we have */
			code = 0;
			move = cseg.rlN;		/* give only as much as we have */
		     end;
		else do;				/* user wants less than we have */
			code = error_table_$long_record;
			move = buf_len;		/* give what s(he) wants */
		     end;
		ubP -> data = cseg.rlP -> data;	/* move to user */
		rec_len = move;			/* indicate amount moved */
		cseg.rlN = -1;			/* read length buffer is now empty */
		cseg.lrec.reccnt = cseg.lrec.reccnt + 1;
		cseg.file_lock = "0"b;
		return;
	     end;

	go to r_format (fd.format);			/* transfer to begin processing */

r_format (1): call get_record;			/* U format - get a logical record */
	move = remain;				/* user gets all, even pad chars (if any) */
	if buf_len < move then do;			/* buffer < record */
		long_record = "1"b;
		move = buf_len;			/* move as much as can fit */
	     end;
	req_off = remain;				/* this request processes the entire block */
	call move_to_user;				/* move data to user's buffer */
	call read_release;				/* release the record */
	go to r_count;				/* return to caller */

r_format (2): call get_record;			/* get 1 record */
	if fd.reclen > remain then move = remain;	/* don't try to move more than we have */
	else move = fd.reclen;			/* move only up to 1 record's worth */
	if buf_len < move then do;			/* buffer < record */
		long_record = "1"b;
		move = buf_len;			/* move only what can fit */
	     end;
	req_off = fd.reclen;			/* process one record */
	call move_to_user;				/* move data to user's buffer */
	call read_release;				/* release the record */
	go to r_count;				/* return to caller */

r_format (3): call get_record;			/* V format - get a logical record */
	dwP = addr (substr (buf, cseg.offset + 1));	/* get pointer to rdw */
	if fd.mode ^= binary then /* if not already binary then make it  */
	     substr (unspec (RDW.length), 1, 10) = "00"b || substr (unspec (RDW.length), 2, 8);
						/* shift byte right to form valid binary value reading 9 mode */
	data_len = RDW.length - 4;			/* subtract rdw length to get data length */
	if data_len > remain - 4 then go to inv_desc;	/* block bigger than block size? */
	move = data_len;				/* move up to 1 record */
	if buf_len < move then do;			/* buffer < record */
		long_record = "1"b;
		move = buf_len;			/* move only what can fit */
	     end;
	cseg.offset = cseg.offset + 4;		/* the rdw has been processed */
	req_off = data_len;				/* process one logical record */
	call move_to_user;				/* move data to user's buffer */
	call read_release;				/* release the record */
	go to r_count;				/* return to caller */

r_format (4): call get_record;			/* VBS format - get a logical record */
	left = buf_len;				/* save request for decrementing */
r_sw_check: call process_sw;				/* process the SDW - get type and data length */
	if left >= data_len then move = data_len;	/* give user the entire segment..... */
	else do;					/* user doesn't want all the data */
		long_record = "1"b;			/* buffer < record */
		move = left;			/* move only as much as can fit */
	     end;
	call move_to_user;				/* move the data to the user's buffer */
	left = left - move;				/* keep track of remainder of request */
	if SDW.code = sdw.complete | SDW.code = sdw.final then do; /* segment is last (or only) of record */
		call read_release;			/* release it */
		go to r_count;			/* and we're done */
	     end;
	else call read_release;			/* release the record and continue */
	if left ^= 0 then do;			/* user wants more, and more segments are available */
		call get_record;			/* get the next segment */
		go to r_sw_check;			/* transfer to process the SDW/SDW, etc. ..... */
	     end;
	call skip_segments;				/* request satisfied, but more segments remain - skip them */
	long_record = "1"b;				/* buffer < record */
	go to r_count;				/* return to caller */

inv_desc: ecode = error_table_$invalid_record_desc;	/* set error code */
	go to r_exit;

r_count:	cseg.lrec.reccnt = cseg.lrec.reccnt + 1;

r_exit:	if parity_error then code = error_table_$tape_error;
	else code = ecode;
	cseg.code = code;
	if code = 0 then if long_record then code = error_table_$long_record;
	rec_len = total;				/* return total number of characters moved */
	cseg.file_lock = "0"b;
	return;					/* and return to the caller */

get_record: procedure;				/* internal procedure to get 1 logical record */
	if cseg.lrec.bufP = null then do;		/* get a block if inactive buffer */
restart:		call tape_ansi_tape_io_$read (cP, cseg.lrec.bufP, cseg.nc_buf, ecode); /* get 1 physical block */
		if ecode ^= 0 then do;		/* was there an error or EOF? */
			if ecode = error_table_$eof_record then do; /* EOF detected */
				if cseg.no_labels then call tape_ansi_nl_file_cntl_$data_eof (iocbP, ecode);
				else call tape_ansi_file_cntl_$data_eof (iocbP, ecode);
				if ecode = 0 then go to restart; /* switched to new file section */
				else go to r_exit;	/* no next volume or error */
			     end;
			else do;			/* parity or fatal error */
				if ecode = error_table_$tape_error then parity_error = "1"b; /* process the block */
				else go to r_exit;	/* fatal error - terminate processing */
			     end;
		     end;
		cseg.blkcnt = cseg.blkcnt + 1;	/* keep track of physical blocks read */
		if cseg.nc_buf > fd.blklen then cseg.nc_buf = fd.blklen; /* use only as much as wanted */
		if fd.format > 2 then do;		/* check BDW against block size if V,VB,VS,VBS format */
			if fd.mode ^= binary then
			     substr (unspec (BDW.length), 1, 10) = "00"b || substr (unspec (BDW.length), 2, 8);
						/* shift to get valid binary value when reading in 9 mode */
			if BDW.length > cseg.nc_buf then go to inv_desc; /* block is too short */
			cseg.nc_buf = BDW.length;	/* use all in block */
			cseg.offset = 4;		/* BDW has been processed */
		     end;
		else cseg.offset = 0;		/* U, F, or FB format */
	     end;
	remain = cseg.nc_buf - cseg.offset;		/* get number of characters to be processed */
	return;					/* exit */
     end get_record;

process_sw: procedure;				/* internal procedure to process SDW's */
	dwP = addr (substr (buf, cseg.offset + 1));	/* get pointer to SDW */
	if fd.mode ^= binary then /* if not already binary then  */
	     substr (unspec (SDW.length), 1, 10) = "00"b || substr (unspec (SDW.length), 2, 8);
						/* shift byte right valid binary reading 9 mode */
	if cseg.standard = DOS then substr (unspec (SDW.length), 3, 1) = "0"b; /* zero the bit if DOS */
	data_len = SDW.length - 4;			/* get length of data */
	if data_len > remain - 4 then go to inv_desc;
	if SDW.code < 0 then go to inv_desc;		/* error if type < 0 */
	if SDW.code > 3 then go to inv_desc;		/* error if type > 3 */
	cseg.offset = cseg.offset + 4;		/* SDW has been processed */
	req_off = data_len;				/* the entire segment will be processed */
	return;					/* exit */
     end process_sw;

skip_segments: procedure;				/* internal procedure to skip to beginning of spanned record */
s_get:	call get_record;				/* get a segment */
	call process_sw;				/* process its SDW */
	if SDW.code = sdw.final then do;		/* is this the final segment? */
		call read_release;			/* release it */
		return;				/* and exit */
	     end;
	call read_release;				/* release the segment */
	go to s_get;				/* get the next segment */
     end skip_segments;

move_to_user: procedure;				/* internal procedure to move data to user's buffer */
	if move = 0 then return;
	fromP = addr (substr (buf, cseg.offset + 1));	/* set pointer to data to be moved */
	toP = addr (substr (ub, total + 1));		/* set pointer to user buffer */
	if fd.mode = ebcdic then call ebcdic_to_ascii_ (fromP -> data, toP -> data);
	else toP -> data = fromP -> data;
	total = total + move;			/* sum each move */
	return;					/* exit */
     end move_to_user;

read_release: procedure;				/* internal procedure to release a record and/or block */
	cseg.offset = cseg.offset + req_off;		/* the request has been processed */
	remain = cseg.nc_buf - cseg.offset;		/* get number of characters not yet processed */
	if remain < 4 then do;			/* if so, the block may have been exhausted */
		if fd.format = 2 then if fd.reclen <= remain then return; /* another record? */
		call tape_ansi_tape_io_$release_buffer (cP, cseg.lrec.bufP, 0); /* block exhausted  */
	     end;
	return;					/* exit */
     end read_release;

write_record: entry (iocbP, ubP, buf_len, code);		/* write_record entry point */

	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get pointer to cseg */

	if cseg.file_lock then do;
		code = error_table_$file_busy;
		return;
	     end;
	else do;
		on cleanup begin;
			cseg.file_lock = "0"b;
			cseg.code = error_table_$fatal_error;
		     end;
		cseg.file_lock = "1"b;
	     end;

	if cseg.code ^= 0 then do;			/* was there a non-restartable error? */
		code = cseg.code;			/* set return code */
		cseg.file_lock = "0"b;
		return;
	     end;

	if ^cseg.no_labels then do;			/* only for labeled volumes */
		if vl (fl.vlX).pos ^= 1 then do;	/* not positioned for output */
			call tape_ansi_file_cntl_$position_for_output (iocbP, ecode);
			if ecode ^= 0 then go to w_exit; /* error */
		     end;
	     end;

	go to w_format (fd.format);			/* transfer to begin processing */



w_format (1): if buf_len > fd.blklen then go to w_long;	/* U format - check buf_len */
	call get_buf;				/* get a buffer */
	move = buf_len;				/* move the requested amount of data */
	req_off = buf_len;				/* number of characters to be processed */
	call move_to_buf;				/* move the data to the write buffer */
	call write_buf;				/* write one block */
	go to w_count;				/* return to caller */

w_format (2): if buf_len > fd.reclen then go to w_long;	/* F format - check buf_len validity */
	call get_buf;				/* get a buffer */
	move = buf_len;				/* transfer the request as stated */
	remain = fd.reclen - buf_len;			/* get difference between buf_len and reclen for padding */
	if remain ^= 0 then substr (buf, cseg.offset + buf_len + 1, remain) = copy (rpad, remain); /* pad the record */
	req_off = fd.reclen;			/* process one logical record */
	call move_to_buf;				/* move the data to the write buffer */
	if ^fd.blocked then call write_buf;		/* unblocked: write 1 record per block */
	else if cseg.offset = fd.blklen then call write_buf; /* blocked: write if block full */
	go to w_count;				/* return to caller */

w_format (3): data_len = buf_len + 4;			/* V format - data length = buf_len + RDW length */
	if data_len > fd.reclen then go to w_long;	/* check data_len validity */
	call get_buf;				/* get a buffer */
	if fd.blocked then if data_len > fd.blklen - cseg.offset then do; /* record won't fit in this block */
		     call write_buf;		/* write the current buffer contents */
		     call get_buf;			/* get another write buffer */
		end;				/* request validity has been verified, so just continue */
	dwP = addr (substr (buf, cseg.offset + 1));	/* locate rdw position */
	cseg.saveP = dwP;				/* save the RDW location for pad incrementing */
	RDW.length = data_len;			/* store the record length */
	if fd.mode ^= binary then /* if not already binary */
	     substr (unspec (RDW.length), 2, 9) = substr (unspec (RDW.length), 3, 8) || "0"b;
						/* shift high order byte to allow writing in 9 mode */
	RDW.pad = "0"b;				/* zero the pad field */
	cseg.offset = cseg.offset + 4;		/* the rdw has been processed */
	req_off = buf_len;				/* process buf_len characters */
	move = buf_len;				/* move buf_len characters */
	call move_to_buf;				/* move the data to the write buffer */
	if ^fd.blocked then call write_buf;		/* unblocked: write 1 record per block */
	else if fd.blklen - cseg.offset < 4 then call write_buf; /* write block if even null record can't fit */
	go to w_count;				/* return to caller */

w_format (4): if buf_len > fd.reclen then go to w_long;	/* VBS format - check buf_len validity */
	call get_buf;				/* get a buffer */
	peel = 0;					/* initialize character count */
	left = buf_len;				/* save request for decrementing */
	remain = fd.blklen - cseg.offset;		/* get number of characters left in block */
	dwP = addr (substr (buf, cseg.offset + 1));
w_fit_check:
	cseg.saveP = dwP;				/* save SDW location for pad incrementing */
	if left + 4 <= remain then do;		/* will entire request fit in remainder of block? */
		if left + 4 > remain - 5 then do;	/* Will request be last segment of block? */
			i = 4 - (remain - (left + 4));/* get nbr of chars in last word of block */
			if i = 0 then move = left;	/*  0 in last work: write all this segment */
			else if i = 4 then move = left; /* last word full: write all this segment */

/* this segment wont be word aligned; have to back track to previous segment
   and see how many characters have to be peeled off to make last segment of block word aligned */

			else do;
				peel = mod (cseg.offset, 4);
				if peel ^= 0 then do;
					hold = substr (buf, cseg.offset - peel + 1, peel); /* save the unaligned characters */
					if SDW.code = sdw.initial then ;
					else SDW.code = sdw.medial;
					SDW.length = SDW.length - peel; /* rewrite length - peeled chars in descriptor word */
					SDW.code = sdw.medial;
					substr (unspec (SDW.length), 2, 9) = substr (unspec (SDW.length), 3, 8) || "0"b;
					cseg.offset = cseg.offset - peel; /* update count to reflect peeled characters */
					total = total - peel; /* adjust for characters peeled also */
				     end;
				go to w_now;	/* segment is word aligned; write out buffer */
			     end;
		     end;
		else move = left;			/* not last segment of block - move all */
	     end;
	else move = remain - 4;			/* entire request won't fit - move what will */
	left = left - move;				/* decrement data to be moved count */
	if first_span then do;			/* first segment of the record */
		first_span = "0"b;			/* one time only */
		if left = 0 then SDW.code = sdw.complete; /* whole record in one segment */
		else SDW.code = sdw.initial;		/* only part of record fits */
	     end;
	else do;					/* not first segment of record */
		if left = 0 then SDW.code = sdw.final;	/* last segment of record */
		else SDW.code = sdw.medial;		/* still more to come */
	     end;
	data_len = move + peel + 4;			/* compute segment length */
	if peel > 0 then peel = 0;
	SDW.length = data_len;			/* store segment length */
	if fd.mode ^= binary then /* if not binary move right to binary from 9 mode */
	     substr (unspec (SDW.length), 2, 9) = substr (unspec (SDW.length), 3, 8) || "0"b;
	if cseg.standard = DOS then if data_len = 4 then substr (unspec (SDW.length), 2, 1) = "1"b;
	SDW.pad = "0"b;				/* zero pad field */
	cseg.offset = cseg.offset + 4;		/* SDW has been processed */
	req_off = move;				/* process the data move */
	call move_to_buf;				/* move data to write buffer */
	remain = remain - data_len;			/* get number of characters left after request */
	if ^fd.blocked then go to w_now;		/* ^blocked: write each segment */
	if remain < 5 then do;			/*  another segment can't fit in the block? */
w_now:		call write_buf;			/* write the block */
		call get_buf;			/* get another buffer */
		remain = fd.blklen - cseg.offset;	/* initialize number of remaining characters */
	     end;
	dwP = addr (substr (buf, cseg.offset + 1));	/* locate current SDW position */
	if peel ^= 0 then do;			/* pick up chars had to peel off */
		substr (buf, cseg.offset + 5, peel) = substr (hold, 1, peel); /* move chars into buffer */
		cseg.offset = cseg.offset + peel;
		total = total + peel;
		remain = fd.blklen - cseg.offset;
	     end;
	if left ^= 0 then go to w_fit_check;		/* if more segments need be written, continue processing */
	go to w_exit;				/* .... or return to caller */


w_long:	code = error_table_$long_record;		/* set return code */
	go to w_exit1;				/* csw can't be "1"b, shouldn't lock logical I/O */

w_count:	cseg.lrec.reccnt = cseg.lrec.reccnt + 1;

w_exit:	code = ecode;				/* set return code */
	cseg.code = code;
	if csw then go to c_exit;			/* if close entry, go to close exit */
w_exit1:	cseg.file_lock = "0"b;			/* unlock the file */
	return;					/* return to caller */

get_buf: procedure;					/* internal procedure to get a write buffer for data transfer */
	if cseg.lrec.bufP = null then do;		/* get a buffer if necessary */
		call tape_ansi_tape_io_$get_buffer (cP, cseg.lrec.bufP, 0); /* get the buffer */
		if fd.format > 2 then cseg.offset = 4;	/* set offset for BDW */
		else cseg.offset = 0;		/* initialize buffer offset */
	     end;
	return;					/* exit */
     end get_buf;


move_to_buf: procedure;				/* internal procedure to move data from user's buffer */
	if move = 0 then go to move_nothing;		/* return if no data to be moved */
	fromP = addr (substr (ub, total + 1));		/* set pointer to data to be moved */
	toP = addr (substr (buf, cseg.offset + 1));	/* set pointer to buffer */
	if fd.mode = ebcdic then call ascii_to_ebcdic_ (fromP -> data, toP -> data);
	else toP -> data = fromP -> data;		/* move as is */
	total = total + move;			/* sum each move */
move_nothing: cseg.offset = cseg.offset + req_off;	/* the request has been processed (char offset) */
	return;					/* return to caller */
     end move_to_buf;

write_buf: procedure;				/* internal procedure to write one physical block */
	if cseg.offset < 20 then if fd.format ^= 2 then do; /* pad to 20 bytes if not F format */
		     remain = 20 - cseg.offset;	/* get pad requirement */
		     go to w_pad;			/* pad the block */
		end;
	remain = 4 - mod (cseg.offset, 4);		/* block length must be integral multiple of 4 */
	if remain ^= 4 then do;			/* not multiple - pad to word boundry */
w_pad:		substr (buf, cseg.offset + 1, remain) = copy (rpad, remain); /* pad with blanks */
		cseg.offset = cseg.offset + remain;	/* increment to reflect padding */
	     end;
	else remain = 0;				/* multiple - indicate no padding performed */
	if fd.format > 2 then do;			/* should a BDW be included? */
		BDW.length = cseg.offset;		/* store the block length */
		if fd.mode ^= binary then
		     substr (unspec (BDW.length), 2, 9) = substr (unspec (BDW.length), 3, 8) || "0"b;
						/* shift high order byte to allow writing in 9 mode */
		BDW.pad = "0"b;			/* zero the pad field */
		if remain ^= 0 then do;		/* the block was padded: the last rdw must be incremented */
			dwP = cseg.saveP;		/* get the pointer to the last RDW used */
			if fd.mode ^= binary then
			     substr (unspec (RDW.length), 1, 10) = "00"b || substr (unspec (RDW.length), 2, 8); /* pack */
			if cseg.standard = DOS then substr (unspec (RDW.length), 3, 1) = "0"b; /* DOS 0 length seg bit */
			RDW.length = RDW.length + remain; /* increment to reflect added pad characters */
			if fd.mode ^= binary then
			     substr (unspec (RDW.length), 2, 9) = substr (unspec (RDW.length), 3, 8) || "0"b; /* unpack */
		     end;
	     end;
	call tape_ansi_tape_io_$write (cP, cseg.lrec.bufP, cseg.offset, ecode); /* write the block */
	if ecode = 0 then cseg.blkcnt = cseg.blkcnt + 1;	/* OK: up block count */
	else if ecode = error_table_$eov_on_write then do;/* EOT detected */
		cseg.blkcnt = cseg.blkcnt + 1;	/* block was written */
		if csw then return;			/* ignore EOT if closing */
		else do;
			if cseg.no_labels then call tape_ansi_nl_file_cntl_$data_eot (iocbP, ecode);
			else call tape_ansi_file_cntl_$data_eot (iocbP, ecode); /* switch to next volume */
			if ecode ^= 0 then do;	/* terminate if switching failed */
				if fd.format = 4 & left ^= 0 then go to w_exit; /* VS/VBS record only partially written */
				else do;		/* not VS/VBS format, or VS/VBS record completely written */
					cseg.code = ecode; /* inhibit further iox_$write_record calls */
					code = 0; /* but this call is ok */
					cseg.lrec.reccnt = cseg.lrec.reccnt + 1; /* so increment record count */
					go to w_exit1; /* and return to caller */
				     end;
			     end;
		     end;
	     end;
	else do;					/* IO error (occurred on previous block) */
		cseg.blkcnt = cseg.blkcnt - cseg.soft_status.nbuf + 1; /* decrement block count */
		cseg.lrec.reccnt = -cseg.lrec.reccnt;	/* make record count unreliable */
		go to w_exit;			/* terminate processing */
	     end;
	return;					/* return to caller */
     end write_buf;

close: entry (acP, code);				/* close entry to synchronize and terminate io */
	dcl     acP		 ptr;		/* pointer to control segment */

	cP = acP;					/* set pointer to control segment */
	csw = "1"b;				/* indicate close entry in case write error */
	if cseg.open_mode = 4 then do;		/* opened for input */
		if cseg.lrec.bufP ^= null then go to close2; /* release an active buffer */
		go to c_exit;			/* synchronize and finish up io */
	     end;
	else do;					/* file was opened for output */
		if cseg.lrec.bufP = null then go to c_exit; /* no active buffer - synchronize and close */
		if cseg.offset = 0 then go to close2;	/* active empty buffer - release, synch., and close */
		if fd.format > 2 then if cseg.offset = 4 then go to close2; /* active buffer has only a BDW */
		call write_buf;			/* active buffer with data - write the buffer */
		go to c_exit;			/* synchronize and close io */
	     end;
close2:	call tape_ansi_tape_io_$release_buffer (cP, cseg.lrec.bufP, 0); /* release the buffer */
c_exit:	call tape_ansi_tape_io_$close (cP, code);	/* terminate the tape_ansi_tape_io_ set up */
	return;					/* exit */


     end tape_ansi_ibm_lrec_io_;
