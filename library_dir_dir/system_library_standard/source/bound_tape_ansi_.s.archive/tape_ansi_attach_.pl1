/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-08-18,GWMay), approve(), audit(), install():
     old history comments:
     0) Created:
     1) Modified: 04/11/79 C. D. Tavares
       for authentication and resource management.
     2) Modified: 06/29/79 Rick Riley
        allow reading and writing ibm tapes in binary mode.
     3) Modified: 9/79 R.J.C. Kissel
        to handle 6250 bpi tapes.
     4) Modified: 10/01/80 C. D. Tavares
        allow ibm file names to be > 8 chars if they contain periods.
     5) Modified: 9/81 M.R. Jordan
        to fix bugs whereby io_call attachments would fail and not report errors.
     6) Modified: 4/82 by J. A. Bush to allow blocksizes > 8192 bytes.
  2) change(86-08-18,GWMay), approve(86-09-09,MCR7536), audit(86-09-15,Dupuis),
     install(86-09-24,MR12.0-1162):
     Changed to accommodate error message lengths > 32 chars.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
tape_ansi_attach_:
     procedure;					/* this entry not used */
	return;

/* parameters */
dcl      iocbP		  ptr,			/* pointer to iocb */
         options		  (*) char (*) varying,	/* array of attachment options */
         comerr		  bit (1) aligned,		/* "1"b if com_err_ can be called */
         code		  fixed bin (35);		/* error code */

%include iocb;

%include tape_ansi_cseg;

%include tape_ansi_fd;

%include tape_ansi_fl;

%include tape_attach_options;

%include rcp_volume_formats;

%include rcp_resource_types;


/* automatic storage */
dcl      1 auto_tao		  like tao auto;		/* tape attach options */

dcl      area_size		  fixed bin (26),		/* size of allocation area */
         block_attribute	  bit (1),		/* "0"b - unblocked | "1"b - blocked */
         drop		  fixed bin,		/* number of drives to be freed */
         error_msg		  char (80) varying init (""),/* attach option error message */
         format_code	  fixed bin init (0),	/* format code */
         (i, j)		  fixed bin,
         mask		  bit (36) aligned,		/* IPS mask word */
         part_file_name	  char (17) varying,	/* temp for validating labels */
         standard		  fixed bin,		/* tape standard code */
         temp_file_name	  char (17),		/* temp for validating labels */
         blocksize		  fixed bin,		/* size of tseg buffers in chars */
         tstring		  char (256) varying;	/* temporary attach description */

/* builtin functions */
dcl     (addr, after, before, index, length, min, mod, null, rtrim, size, string, substr, verify)
			  builtin;

/* conditions */
dcl      (any_other, area, cleanup)
			  condition;

/* internal static */
dcl      module_name	  (2) char (12) varying internal static
			  init /* IO Module name */ ("tape_ansi_", "tape_ibm_");
dcl      system_code	  (2) char (13) internal static
			  init /* system code for HDR1 label */ ("MULTICS ANSI ", "MULTICS IBM  ");

dcl      1 format		  internal static,		/* -format interpretation */
	 2 type		  (2, 7) char (4) varying
			  init
			  /* possibilities */ ("u", "fb", "f", "db", "d", "sb", "s", "u", "fb", "f", "vb", "v",
			  "vbs", "vs"),
	 2 fcode		  (2, 7) fixed bin
			  init /* interpretation - format code */ (1, 2, 2, 3, 3, 4, 4, 1, 2, 2, 3, 3, 4, 4),
	 2 blkatrib	  (2, 7) bit (1)
			  init
			  /* interpretation - blocking attribute */ ("0"b, "1"b, "0"b, "1"b, "0"b, "1"b, "0"b, "0"b,
			  "1"b, "0"b, "1"b, "0"b, "1"b, "0"b);

dcl      1 ibm_verifies	  unaligned internal static options (constant),
	 2 ibm_verify1	  char (55) init ("@#$ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"),
						/* letters and national characters */
	 2 ibm_verify2	  char (11) init ("0123456789-");
						/* numbers and hyphen */

/* external static */
dcl      (
         error_table_$noalloc,
         error_table_$noarg,
         error_table_$not_detached,
         error_table_$unable_to_do_io,
         error_table_$file_busy,
         error_table_$inconsistent,
         error_table_$invalid_cseg,
         error_table_$bad_arg
         )		  fixed bin (35) ext static;
dcl      sys_info$max_seg_size  fixed bin (35) ext static;


/* external procedures */
dcl      area_		  ext entry (fixed bin (26), ptr),
         canon_for_volume_label_
			  entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
         clock_		  ext entry returns (fixed bin (71)),
         com_err_		  ext entry options (variable),
         continue_to_signal_	  ext entry (fixed bin (35)),
         tape_ansi_control_	  ext entry (ptr, char (*), ptr, fixed bin (35)),
         datebin_		  ext
			  entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
			  fixed bin, fixed bin, fixed bin),
         datebin_$dayr_clk	  ext entry (fixed bin (71), fixed bin),
         tape_ansi_detach_	  ext entry (ptr, fixed bin (35)),
         tape_ansi_file_cntl_$open
			  ext entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
         hcs_$delentry_seg	  ext entry (ptr, fixed bin (35)),
         hcs_$make_seg	  ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
         hcs_$reset_ips_mask	  ext entry (bit (36) aligned, bit (36) aligned),
         hcs_$set_ips_mask	  ext entry (bit (36) aligned, bit (36) aligned),
         hcs_$truncate_seg	  ext entry (pointer, fixed bin (18), fixed bin (35)),
         iox_$propagate	  ext entry (ptr),
         tape_ansi_mount_cntl_$free
			  ext entry (ptr, fixed bin, fixed bin (35)),
         tape_ansi_mount_cntl_$insert_rings
			  ext entry (ptr, fixed bin (35)),
         tape_ansi_mount_cntl_$mount
			  ext entry (ptr, fixed bin, fixed bin (35)),
         tape_ansi_mount_cntl_$write_permit
			  ext entry (ptr, fixed bin (35)),
         tape_ansi_mount_cntl_$write_protect
			  ext entry (ptr, fixed bin (35)),
         tape_ansi_nl_file_cntl_$open
			  ext entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
         tape_ansi_parse_options_
			  ext entry (ptr, (*) char (*) varying, char (*) varying, fixed bin (35)),
         tape_ansi_attach_$no_user_routine
			  ext entry options (variable),
         tape_ansi_tape_io_$attach
			  ext entry (ptr),
         terminate_process_	  ext entry (char (*), ptr);

tape_ansi_attach:
     entry (iocbP, options, comerr, code);
	standard = 1;				/* indicate tape_ansi_ entry */
	go to common;

tape_ibm_attach:
     entry (iocbP, options, comerr, code);
	standard = 2;				/* indicate tape_ibm_ entry */

common:
	if iocbP -> iocb.attach_descrip_ptr ^= null then do;
						/* is iocb already attached? */
	     code = error_table_$not_detached;
	     error_msg = iocbP -> iocb.name;
	     goto bad_attopt;
	end;

	taoP = addr (auto_tao);			/* base tao on automatic storage */
	call tao_init;				/* initialize the attach option structure */
	call tape_ansi_parse_options_ (taoP, options, error_msg, code);
						/* evaluate attach options */
	if code ^= 0 then do;			/* did an error occur? */
bad_attopt:
	     if comerr then
		call com_err_ (code, module_name (standard), "^a", error_msg);
						/* write msg if permitted */
	     return;
	end;

	call check_attopt (error_msg, code);		/* check if all ok for this IO Module */
	if code ^= 0 then
	     go to bad_attopt;
	if tao.blklen <= 8192 then			/* if standard block size.. */
	     blocksize = 8192;			/* set buffer size for 2K words */
	else do;					/* non-standard block size wanted */
	     if standard = 1 then			/* if tape_ansi_ attachment */
		if tao.blklen > 99996 then do;	/* if block size > max, complain */
		     error_msg = "Block size > 99996 bytes not allowed";
		     code = error_table_$bad_arg;
		     go to bad_attopt;
		end;
		else ;
	     else if tao.blklen > 32760 then do;	/* tape_ibm_ block size > max, complain */
		error_msg = "Block size > 32760 bytes not allowed";
		code = error_table_$bad_arg;
		go to bad_attopt;
	     end;

	     blocksize = tao.blklen;			/* set the desired block size */
	end;
	cP = null;				/* dont' try to cleanup non-existent stuff */
	on cleanup call cleaner;			/* don't leave segments and/or drives around */

	i = min (length (rtrim (tao.volname (1))), 32 - length (rtrim (module_name (standard))) - length ("_.cseg"));

	call hcs_$make_seg ("", module_name (standard) || substr (tao.volname (1), 1, i) /* make cseg */ || "_.cseg",
	     "", 01011b, cP, code);			/* or initiate if already exists */
	if cP = null then do;			/* no cseg made or found - fatal */
	     error_msg = "Unable to initiate/create temporary data segment.";
	     goto bad_attopt;
	end;

	if cseg.vcN > 0 then			/* already exists */
	     if cseg.vl (1).volname ^= tao.volname (1) then
						/* but not the right one */
		call hcs_$truncate_seg (cP, 0, code);	/* this is possible because we cannot use the */
						/* full name of the volume in the cseg name */

	if tao.clear_cseg then
	     call hcs_$truncate_seg (cP, 0, code);	/* re-do cseg */

	if cseg.vcN > 0 then do;			/* cseg previously existed */
	     if cseg.file_set_lock then do;		/* file set is locked */
		code = error_table_$file_busy;
		error_msg = "The file set is locked.";
		goto er_exit;
	     end;
	     else cseg.file_set_lock = "1"b;
	     code = 0;				/* not an error */
	     go to re_attach;			/* this is a re-attachment to the file set */
	end;

	cseg.file_set_lock = "1"b;			/* cseg made and locked */
	cseg.standard = standard;
	cseg.no_labels = tao.no_labels;
	cseg.module = module_name (standard);
	cseg.ndrives = 1;
	cseg.nactive = 0;
	cseg.vcN = 0;
	cseg.fcP = null;
	cseg.write_ring = tao.write_ring;
	cseg.protect = "0"b;
	cseg.density = tao.density;
	cseg.rlP = null;
	cseg.buf_size = blocksize;			/* set the tseg buffer size */
	call cseg_init;				/* initialize cseg with attach data */
	cseg.invalid = "0"b;			/* cseg is valid */

	call tape_ansi_tape_io_$attach (cP);		/* initialize IO */

	on area
	     begin;				/* shouldn't occur, but handle if does */
		code = error_table_$noalloc;
		go to er_exit;			/* cleanup is necessary */
	     end;
	area_size = sys_info$max_seg_size - size (cseg);
	call area_ (area_size, addr (cseg.chain_area));	/* format chain area for link allocation */
	allocate fd in (chain_area) set (cseg.fcP);	/* allocate the dummy file chain link */

	do i = 1 to tao.nvolumes;			/* build the volume chain */
	     call vl_init (i);			/* initialize all other values */
	     cseg.vcN = i;				/* set the new volume chain count */
	end;

	call tape_ansi_mount_cntl_$mount (cP, 1, code);	/* mount the volume on a new drive */
	if code ^= 0 then
	     go to er_exit;				/* success? */

	call fd_init;				/* initialize file data with attach and mount data */

attach_ok:
	cseg.attach_description.length = length (tstring);/* prepare attach description */
	cseg.attach_description.string = tstring;
	if tao.DOS then
	     cseg.standard = 3;			/* up standard for ibm_lrec_io_ */
	mask = "0"b;				/* IPS interrupts not masked yet */
	revert cleanup;				/* cleanup no longer matters */
	on any_other call handler;			/* pick up any condition */
	call hcs_$set_ips_mask ("0"b, mask);		/* mask all IPS interrupts */
	if cseg.no_labels then
	     iocbP -> iocb.actual_iocb_ptr -> iocb.open = tape_ansi_nl_file_cntl_$open;
	else iocbP -> iocb.actual_iocb_ptr -> iocb.open = tape_ansi_file_cntl_$open;
	iocbP -> iocb.actual_iocb_ptr -> iocb.control = tape_ansi_control_;
	iocbP -> iocb.actual_iocb_ptr -> iocb.detach_iocb = tape_ansi_detach_;
	iocbP -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr = addr (cseg.attach_description);
	iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr = cP;
	call iox_$propagate (iocbP -> iocb.actual_iocb_ptr);
						/* reflect changes to all iocb's */
	call hcs_$reset_ips_mask (mask, mask);		/* permit IPS interrupts */
	return;

re_attach:
	if tao.density ^= -1 then
	     if tao.density ^= cseg.density then do;	/* density changed from previous attach */
		do i = 1 to cseg.vcN;		/* see if all volumes demounted */
		     if vl (i).rcp_id ^= 0 then do;	/* still mounted - can't change density */
			error_msg = "Cannot change file set density.";
bad_re_attach:
			code = error_table_$bad_arg;
			cseg.file_set_lock = "0"b;	/* unlock the file set */
			go to bad_attopt;
		     end;
		end;
		cseg.density = tao.density;		/* (re)set it */
	     end;

	if tao.no_labels ^= cseg.no_labels then do;	/* can't change label standard */
	     error_msg = "Cannot change label standard.";
	     go to bad_re_attach;
	end;

	if tao.ndrives = 0 then
	     go to chain_ck;			/* ndrives unspecified - maintain old value */
	if tao.ndrives >= cseg.ndrives then do;		/* necessary to free drives? */
	     cseg.ndrives = tao.ndrives;		/* no - set new value */
	     go to chain_ck;			/* check volume sequence validity */
	end;
	else cseg.ndrives = tao.ndrives;		/* yes - set new value */

	if cseg.nactive <= cseg.ndrives then
	     go to chain_ck;			/* not necessary to free any drives */
	else drop = cseg.nactive - cseg.ndrives;	/* drives must be freed */

/* scan file chain to find requested file */
	cseg.flP = cseg.fcP;			/* start with dummy link */
	if fd.nextP = null then
	     go to no_chain;			/* no file chain */
	do cseg.flP = fl.nextP repeat fl.nextP;		/* start with 1st real link */
	     if tao.sequence = 0 then do;		/* search for fileid */
		if tao.replace_id = fl.file_id then
		     go to got_fl;			/* match? */
		if tao.file_id = fl.file_id then
		     go to got_fl;			/* match? */
	     end;
	     else if tao.sequence = fl.sequence then
		go to got_fl;			/* search for sequence */
	     if fl.nextP = null then
		go to got_fl;			/* no more links - exit */
	     if fl.nextP -> fl.flX = -1 then
		go to got_fl;			/* stop before eofsl */
	end;

got_fl:
	do i = 1 to fl.vlX - 1;			/* search up to wanted volume */
	     if vl (i).rcp_id ^= 0 then do;		/* active - free it */
		call tape_ansi_mount_cntl_$free (cP, i, code);
		if code ^= 0 then
		     go to er_exit;			/* trouble */
		drop = drop - 1;
		if drop = 0 then
		     go to chain_ck;		/* done? */
	     end;
	end;

no_chain:
	do i = cseg.vcN to fl.vlX + 1 by -1;		/* search down to wanted volume */
	     if vl (i).rcp_id ^= 0 then do;		/* active - free it */
		call tape_ansi_mount_cntl_$free (cP, i, code);
		if code ^= 0 then
		     go to er_exit;			/* trouble */
		drop = drop - 1;
		if drop = 0 then
		     go to chain_ck;
	     end;
	end;

	code = error_table_$invalid_cseg;		/* this is very very bad */
	error_msg = "Control segment deleted.";
	go to er_exit;

chain_ck:
	if tao.nvolumes = 1 then
	     go to finish;				/* no follow-on volumes specified */
	do i = 2 to tao.nvolumes;			/* loop to check each follow-on volume */
	     if i > cseg.vcN then do;			/* links do not exist for the following volumes */
		do j = i to tao.nvolumes;		/* make a link for each new volume */
		     call vl_init (j);		/* initialize all other values */
		     cseg.vcN = j;			/* set the new volume chain count */
		end;
		go to finish;
	     end;
	     if vl (i).volname ^= tao.volname (i) then do;/* link exists - mismatch? */
		if vl (i).fflX ^= 0 then do;		/* this volume is a volume set member */
		     error_msg = "Invalid volume set sequence.";
		     code = error_table_$bad_arg;
		     cseg.file_set_lock = "0"b;	/* unlock the file set */
		     go to bad_attopt;
		end;
		else do;				/* this volume is a volume set candidate */
		     if vl (i).rcp_id ^= 0 then do;	/* mounted? */
			call tape_ansi_mount_cntl_$free (cP, i, code);
						/* free it */
			if code ^= 0 then
			     go to er_exit;
		     end;
		     call vl_init (i);		/* re-initialize the link */
		end;
	     end;
	end;

finish:
	if tao.write_ring then do;			/* user wants to write */
	     if ^cseg.write_ring then do;		/* but no rings are in the volumes */
		call tape_ansi_mount_cntl_$insert_rings (cP, code);
						/* so put them in */
		if code ^= 0 then
		     go to er_exit;
	     end;
	     if cseg.protect then do;			/* but hardware protect is on */
		call tape_ansi_mount_cntl_$write_permit (cP, code);
						/* so set hardware permit */
		if code ^= 0 then
		     go to er_exit;
	     end;
	end;

	else do;					/* user doesn't want to write */
	     if cseg.write_ring then do;		/* but rings are in */
		if ^cseg.protect then do;		/* and hardware protect is off */
		     call tape_ansi_mount_cntl_$write_protect (cP, code);
						/* so turn it on */
		     if code ^= 0 then
			go to er_exit;
		end;
	     end;
	end;

	call cseg_init;				/* fill cseg with attach data */
	call fd_init;				/* fill file data with attach data */
	go to attach_ok;

check_attopt:
     procedure (msg, ecode);				/* IO Module-specific attach option validation */

dcl      msg		  char (*) varying, 	/* erroneous option */
         ecode		  fixed bin (35);		/* error code */

dcl      ANSI		  char (18) internal static init ("ANSI standard and ");
dcl      IBM		  char (17) internal static init ("IBM standard and ");
dcl      NL		  char (17) internal static init ("""-no_labels"" and ");
dcl      NOUT		  char (22) internal static init (" and no output option.");

	msg = "";					/* initialize returned arguments */
	ecode = 0;

	if tao.ntracks = 0 then
	     tao.ntracks = 9;			/* default is 9 track drives */
	else if tao.ntracks ^= 9 then do;		/* ANSI doesn't support any other tracks */
	     msg = "Only ""-track 9"" is valid.";
	     go to bad;
	end;

	if tao.density = -1 then
	     ;					/* default is ok */
	else if tao.density = 2 then
	     ;					/* 800 bpi is ok */
	else if tao.density = 3 then
	     ;					/* 1600 bpi is ok */
	else if tao.density = 4 then
	     ;					/* 6250 bpi is ok */
	else do;					/* any other is invalid */
	     msg = "Invalid ""-density"" option.";
	     go to bad;
	end;


	if standard = 1 then do;			/* ANSI standard checks */
	     if tao.DOS then do;
		msg = ANSI || """-dos"".";
		go to bad;
	     end;
	     if tao.no_labels then do;
		msg = ANSI || """-no_labels"".";
		go to bad;
	     end;
	end;

	else do;					/* IBM standard checks */
	     if tao.output_mode = 3 then do;		/* -generate */
		msg = IBM || """-generate"".";
		go to bad;
	     end;
	     if tao.output_mode > 0 then do;		/* output option specified */
		if tao.blklen ^= 0 then do;		/* -block specified */
		     if mod (tao.blklen, 4) ^= 0 then do;
						/* blklen not word multiple */
			msg = """-block"" not multiple of 4.";
			go to bad;
		     end;
		end;
	     end;
	     if tao.no_labels then do;		/* -no_labels specified */
		if tao.DOS then do;			/* -dos specified */
		     msg = NL || """-dos"".";
		     go to bad1;
		end;
		if tao.file_id ^= "" then do;		/* -name specified */
		     msg = NL || """-name"".";
		     go to bad1;
		end;
		if tao.replace_id ^= "" then do;	/* -replace specified */
		     msg = NL || """-replace"".";
		     go to bad1;
		end;
		if tao.sequence = 0 then do;		/* no sequence specified */
		     msg = """-no_labels"" requires ""-number"".";
		     go to bad3;
		end;
		if tao.output_mode = 1 then do;	/* -extend specified */
		     msg = NL || """-extend"".";
		     go to bad1;
		end;
		else if tao.output_mode = 2 then do;	/* -modify specified */
		     msg = NL || """-modify"".";
		     go to bad1;
		end;
		if tao.expiration ^= "00000" then do;	/* -expires specified */
		     msg = NL || """-expires"".";
		     go to bad1;
		end;
		if tao.force then do;		/* -force specified */
		     msg = NL || """-force"".";
		     go to bad1;
		end;
		go to format_ck;
	     end;
	end;

	if tao.output_mode = 4 then do;		/* ANSI and IBM checks  -  create */
	     if tao.file_id = "" then do;		/* no -name */
		msg = """-create"" requires ""-name"".";
		go to bad3;
	     end;
	     if standard = 2 then do;			/* validate file id if IBM */
		temp_file_name = tao.file_id;
		msg = "Invalid ""-name"" identifier.";

		do while (temp_file_name ^= "");
		     part_file_name = rtrim (before (temp_file_name, "."));
		     temp_file_name = after (temp_file_name, ".");
		     if length (part_file_name) = 0 then
			goto bad;			/* must have name! */
		     if length (part_file_name) > 8 then
			goto bad;			/* no component can be > 8 chars */
		     if index (ibm_verify1, substr (part_file_name, 1, 1)) = 0 then
			goto bad;			/* first char must be from limited set */
		     if verify (part_file_name, string (ibm_verifies)) > 0 then
			goto bad;			/* all chars must be from certain set */
		end;

		msg = "";
	     end;
	end;
	else do;					/* extend, modify, generate, or none */
	     if tao.replace_id ^= "" then do;		/* -replace specified */
		msg = """-replace"" requires ""-create"".";
		go to bad3;
	     end;
	     else if tao.output_mode = 0 then do;	/* none specelse ified */
		if tao.expiration ^= "00000" then do;
		     msg = """-expires""" || NOUT;
		     go to bad3;
		end;
		if tao.force then do;
		     msg = """-force""" || NOUT;
		     go to bad3;
		end;
	     end;
	     else if tao.output_mode < 3 then do;	/* output mode is extend or modify */
		if tao.expiration ^= "00000" then do;	/* and expiration specified */
		     if tao.output_mode = 1 then
			msg = """-extend"" and ""-expires"".";
		     else msg = """-modify"" and ""-expires"".";
		     go to bad1;
		end;
	     end;
	end;

	if tao.sequence = 0 then do;			/* no explicit sequence */
	     if tao.file_id = "" then do;		/* and no -name */
		msg = """-name"" or ""-number"" needed.";
		go to bad3;
	     end;
	end;

format_ck:
	if tao.format = "" then do;			/* default format */
	     format_code = 0;
	     go to test (0);
	end;
	do i = 1 to 7;				/* validate format */
	     if tao.format = format.type (standard, i) then do;
						/* match? */
		format_code = format.fcode (standard, i);
		block_attribute = format.blkatrib (standard, i);
		go to test (format_code);
	     end;
	end;
	msg = "Unsupported ""-format"" option.";
	go to bad;

test (1):
	if tao.reclen ^= 0 then do;			/* u format */
	     msg = """-record"" and ""-format"".";
	     go to bad1;
	end;
	go to test (0);
test (2):
	if tao.blklen ^= 0 then do;			/* f format */
	     if tao.reclen ^= 0 then do;
		if block_attribute then do;
		     if mod (tao.blklen, tao.reclen) ^= 0 then do;
br_inc:
			msg = """-block"" and ""-record"".";
			go to bad1;
		     end;
		end;
		else if tao.blklen ^= tao.reclen then
		     go to br_inc;
	     end;
	end;
	go to test (0);
test (3):
	if tao.blklen ^= 0 then
	     if tao.reclen ^= 0 then do;		/* d/v format */
		if standard = 1 then
		     i = 0;			/* don't allow for BDW if ANSI */
		else i = 4;			/* IBM - allow for 4 byte BDW */
		if block_attribute then do;
		     if tao.blklen < tao.reclen + i then
			go to br_inc;
		end;
		else if tao.blklen ^= tao.reclen + i then
		     go to br_inc;
	     end;
test (0):
test (4):
	tstring = module_name (standard);		/* initialize attach description with module name */
	do i = 1 to tao.noptions;			/* append each option */
	     tstring = tstring || " " || options (i);
	end;
	return;

bad:
	ecode = error_table_$bad_arg;
	return;
bad1:
	ecode = error_table_$inconsistent;
	return;
bad3:
	code = error_table_$noarg;
	return;

     end check_attopt;

tao_init:
     procedure;					/* initialize attach options */

	tao.noptions, tao.ntracks, tao.retain, tao.output_mode, tao.sequence, tao.blklen, tao.reclen, tao.mode,
	     tao.nvolumes, tao.ndrives = 0;

	tao.density = -1;

	tao.write_ring, tao.clear_cseg, tao.force, tao.user_labels, tao.DOS, tao.no_labels = "0"b;

	tao.format, tao.replace_id, tao.file_id, tao.volname (*), tao.comment (*) = "";

	tao.expiration = "00000";

	return;

     end tao_init;

cseg_init:
     procedure;					/* initializes cseg with attach data */
	cseg.flP = null;
	cseg.open_mode = 0;
	cseg.force = tao.force;
	cseg.file_lock = "0"b;
	cseg.close_rewind = "0"b;
	cseg.user_labels = tao.user_labels;
	cseg.output_mode = tao.output_mode;
	cseg.replace_id = tao.replace_id;
	cseg.retain = tao.retain;
	if tao.ndrives ^= 0 then
	     cseg.ndrives = tao.ndrives;		/* set ndrives only if specified */
	cseg.rlN = -1;
	cseg.user_label_routine (*) = tape_ansi_attach_$no_user_routine;
	return;
     end cseg_init;

fd_init:
     procedure;					/* initializes file data with attach and mount data */
	fd.hdr1.file_id = tao.file_id;
	fd.hdr1.set_id = vl (1).volname;
	fd.hdr1.canonical_set_id = vl (1).canonical_volname;
	fd.hdr1.sequence = tao.sequence;
	fd.hdr1.creation = today ();
	fd.hdr1.expiration = tao.expiration;
	if standard = 1 then
	     fd.access = " ";
	else fd.access = "0";
	fd.hdr1.system = system_code (standard);
	fd.hdr2.format = format_code;
	fd.hdr2.blocked = block_attribute;
	fd.hdr2.blklen = tao.blklen;
	fd.hdr2.reclen = tao.reclen;
	fd.hdr2.mode = tao.mode;
	fd.hdr2.bo = 0;
	fd.cc = " ";
     end fd_init;


vl_init:
     procedure (n);					/* initialize a volume link */
dcl      n		  fixed bin;		/* link index */
dcl      canon_std		  (2) fixed bin initial (Volume_ansi_tape, Volume_ibm_tape);

	vl (n).volname = tao.volname (n);
	vl (n).comment = tao.comment (n);
	vl (n).fflX = 0;
	vl (n).cflX = 0;
	vl (n).pos = 0;
	vl (n).lflX = 0;
	vl (n).tracks = 0;
	vl (n).density = 0;
	vl (n).label_type = 0;
	vl (n).usage_count = 0;
	vl (n).read_errors = 0;
	vl (n).write_errors = 0;
	vl (n).rcp_id = 0;
	vl (n).event_chan = 0;
	vl (n).tape_drive = "";
	vl (n).write_VOL1 = 0;
	vl (n).ioi_index = 0;
	call canon_for_volume_label_ (VOLUME_TYPE (TAPE_VOL_VTYPEX), vl (n).volname, vl (n).canonical_volname,
	     canon_std (standard), code);
	if code ^= 0 then do;
	     error_msg = tao.volname (1);
	     goto bad_attopt;
	end;

	return;
     end vl_init;

er_exit:
	if comerr then
	     call com_err_ (code, module_name (standard), "^a", error_msg);
	call cleaner;
	return;


handler:
     procedure;					/* intercept any faults during iocb manipulation */
dcl      1 ti		  aligned,
	 2 version	  fixed bin init (0),
	 2 code		  fixed bin (35);

	if mask ^= "0"b then do;			/* IPS interrupts masked */
	     ti.code = error_table_$unable_to_do_io;	/* very bad trouble */
	     call terminate_process_ ("fatal_error", addr (ti));
						/* kill the process */
	end;
	call continue_to_signal_ (0);
	return;
     end handler;


cleaner:
     procedure;					/* tidy up if bad trouble */
	if cP ^= null then do;			/* cseg exixts */
	     do i = 1 to cseg.vcN;			/* check every link, if any */
		if vl (i).rcp_id ^= 0 then
		     call tape_ansi_mount_cntl_$free (cP, i, 0);
						/* active */
	     end;
	     call hcs_$delentry_seg (cP, 0);		/* delete cseg */
	end;
     end cleaner;


today:
     procedure returns (char (5));			/* returns today's date in Julian form */
dcl      clock		  fixed bin (71),		/* holds hardware clock value */
         ddd		  picture "999",		/* day of year */
         yy		  picture "99",		/* year */
         temp		  fixed bin;		/* temporary */

	clock = clock_ ();				/* get hardware clock value */
	call datebin_$dayr_clk (clock, temp);		/* get day of year */
	ddd = temp;				/* convert to characters */
	call datebin_ (clock, 0, 0, 0, temp, 0, 0, 0, 0, 0);
						/* get year */
	yy = temp - 1900;				/* drop century and convert to characters */
	return (yy || ddd);				/* return formatted date */

     end today;

no_user_routine:
     entry;					/* dummy entry point to indicate no user label routine */




     end tape_ansi_attach_;
