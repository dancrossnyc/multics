/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* INSTALL - program to copy new tables into >system_control_1>update
   and signal the answering service to install them.

   Written by THVV
   Modified 750114 by PG to add command options for authorizations, etc.
   Modified 750614 by T. Casey to enable install of MGT
   Modified 760804 by THVV to eliminate response handler
   Modified 062377 by Robert Coren to add TTT to list of legal tables
   Modified 03/16/78 by C. D. Tavares to add RTDT
   Modified 12/26/81 by E. N. Kittlitz to use whotab instead of proj_admin_seg to send wakeup.
   Modified 1/2/82 by Benson I. Margulies for ttt installations through gate.
   Modified April 1982 by E. N. Kittlitz to not write original table.
   Modified July 1982 by E. N. Kittlitz to not use sc_stat_ (TOOLS), because this is an SSS program.
*/


/****^  HISTORY COMMENTS:
  1) change(86-05-02,Kissel), approve(86-07-23,MCR7460), audit(86-07-28,Ex),
     install(86-08-05,MR12.0-1115):
     Changed to accept the "nit" suffix for the DSA NIT.  It is handled just
     like the "ttt" suffix, but dsa_install_nit_ is called rather than
     installation_gate_$install_ttt
                                                   END HISTORY COMMENTS */


/* format: style4 */
install: proc;

/* entries */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  dsa_install_nit_ entry (ptr, uns fixed bin (18), char (*), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_group_id_ entry returns (char (32));
dcl  get_process_id_ entry returns (bit (36));
dcl  get_wdir_ entry returns (char (168));		/* return working dir */
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*),
	fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$wakeup entry (bit (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  installation_gate_$install_ttt entry (ptr, fixed bin (18) uns, char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* builtins */

dcl  (dim, divide, index, length, null, reverse, rtrim, substr) builtin;

/* external static */

dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$not_seg_type ext fixed bin (35) static;

/* static */

dcl  LEGAL_TYPES (7) char (4) aligned static options (constant) initial
	("sat", "pdt", "mgt", "cdt", "ttt", "rtdt", "nit");
dcl  sysdir char (64) int static init (">system_control_1");


/* automatic */

dcl  (idir char (80), copyname char (15));
dcl  (dir char (168), ename char (32));

dcl  (argno, i) fixed bin;
dcl  code fixed bin (35);
dcl  arg_length fixed bin (21);
dcl  lng fixed bin (21);
dcl  arg_ptr ptr;
dcl  bitcount fixed bin (24);
dcl  (segp, copyp) ptr;				/* ... */
dcl  suffix char (4) varying;				/* pdt, etc */
dcl  whoptr pointer;
dcl  answer character (256);
dcl  update_attributes_sw bit (1) aligned;
dcl  update_authorization_sw bit (1) aligned;

/* based */

dcl  arg_string char (arg_length) based (arg_ptr);

dcl  1 t based (segp) aligned,			/* dummy structure for seg. header */
       2 author like author_dcl.author;

dcl  1 segmnt based aligned,				/* structure to move_ stuff */
       2 words (lng) fixed bin;

/* ext static */

declare  whotab_$ ext bit (36) aligned;

/* include files */

%include access_mode_values;
%include author_dcl;
%include whotab;
%include terminate_file;
/* condition */

declare  cleanup condition;
declare  linkage_error condition;


/* - - - - - - - - - - - - - - - -- - - - - */


	update_attributes_sw, update_authorization_sw = ""b;

	on linkage_error begin;
	     call hcs_$initiate (sysdir, "whotab", "whotab_", 0, 0,
		whoptr, code);
	     if whoptr = null
	     then do;
		call com_err_ (code, "install", "cannot initiate ^a.", pathname_ (sysdir, "whotab"));
		go to RETURN;
	     end;
	end;

	whoptr = addr (whotab_$);
	revert linkage_error;

	call cu_$arg_ptr (1, arg_ptr, arg_length, code);	/* get name of segment */
	if code ^= 0 then do;
	     call com_err_ (code, "install", "Usage: install pathname -all(-a), -attributes(-attr), -authorization(-auth)");
	     return;
	end;

	call expand_pathname_ (arg_string, dir, ename, code);
	if code ^= 0 then do;
	     call com_err_ (code, "install", arg_string);
	     return;
	end;

	if index (ename, ".") = 0 then goto not_known_type;

	i = length (rtrim (ename));

	suffix = reverse (before (reverse (ename), "."));

	do i = 1 to dim (LEGAL_TYPES, 1) while (LEGAL_TYPES (i) ^= suffix);
	end;

	if i > dim (LEGAL_TYPES, 1) then do;
not_known_type:
	     call com_err_ (error_table_$not_seg_type, "install",
		"Table is not ^v(^a, ^)or ^a.  Installation refused.",
		dim (LEGAL_TYPES, 1) - 1, LEGAL_TYPES (*));
	     return;
	end;

	copyp, segp = null;
	on cleanup call clean_up;

	call initiate_file_ (dir, ename, R_ACCESS, segp, bitcount, code);
	if code ^= 0 then do;
	     call com_err_ (code, "install", "^a", pathname_ (dir, ename));
	     go to RETURN;				/* segp may be nonnull */
	end;

	if bitcount < 2304 then do;			/* check length of segment */
	     call ioa_ ("install: ^a less than 64 words long.", pathname_ (dir, ename));
	     go to RETURN;
	end;

/* read the arguments */

	do argno = 2 to cu_$arg_count ();
	     call cu_$arg_ptr (argno, arg_ptr, arg_length, code);
	     if code ^= 0 then go to no_more_args;

	     if arg_string = "-all" | arg_string = "-a" then
		update_attributes_sw, update_authorization_sw = "1"b;
	     else if arg_string = "-attributes" | arg_string = "-attr" then
		update_attributes_sw = "1"b;
	     else if arg_string = "-authorization" | arg_string = "-auth" then
		update_authorization_sw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, "install", "^a", arg_string);
		return;
	     end;
	end;

no_more_args:
	if argno = 2 then				/* if no options were given, use default */
	     update_attributes_sw = "1"b;		/* dft is -attr */

	lng = divide (bitcount + 35, 36, 17, 0);	/* get wordcount */

	if t.table = "TTT"
	then do;					/* The first of the easy variety */
						/* Note we ignore control arguments */
	     call installation_gate_$install_ttt (segp, (lng), answer, code);
	     if code ^= 0
	     then call com_err_ (code, "install", "^a installing ^a.",
		     answer, pathname_ (dir, ename));
	     else call ioa_ ("install: Installed ^a as system ttt.",
		     pathname_ (dir, ename));
	     go to RETURN;
	end;

	if t.table = "NIT"
	then do;					/* The next of the easy variety */
						/* Note we ignore control arguments */
	     /*** Get ready for problems. */

	     on linkage_error
		begin;
		code = error_table_$bad_arg;
		answer = "DSA is not enabled on this system.  ";
		goto NIT_ERROR;
	     end;

	     call dsa_install_nit_ (segp, (lng), answer, code);

	     revert linkage_error;

NIT_ERROR:
	     if code ^= 0
	     then call com_err_ (code, "install", "^a installing ^a.",
		     answer, pathname_ (dir, ename));
	     else call ioa_ ("install: Installed ^a as DSA system nit.",
		     pathname_ (dir, ename));
	     go to RETURN;
	end;

	idir = pathname_ (sysdir, "update");
	copyname = unique_chars_ (""b);		/* make up a name */

	call hcs_$make_seg (idir, copyname, "", 01010b, copyp, code);
	if copyp = null then do;			/* make null segment */
	     call com_err_ (code, "install", "can't create ^a>^a", idir, copyname);
	     go to RETURN;
	end;
	copyp -> segmnt = segp -> segmnt;		/* copy seg into update dir */
	copyp -> t.author.w_dir = get_wdir_ ();		/* set working dir into head of table */
	copyp -> t.author.proc_group_id = get_group_id_ (); /* Get name of this user (with tag) */
	copyp -> t.update_authorization = update_authorization_sw; /* now the controls */
	copyp -> t.update_attributes = update_attributes_sw; /* ... */

	call terminate_file_ (copyp, bitcount, TERM_FILE_TRUNC_BC_TERM, (0));
	copyp = null;

	call hcs_$wakeup ((whotab.installation_request_pid), whotab.installation_request_channel, 0, code);

RETURN:
	call clean_up;
	return;					/* done */

clean_up:
     procedure;
	if copyp ^= null
	then call hcs_$delentry_seg (copyp, (0));
	copyp = null;
	if segp ^= null
	then call terminate_file_ (segp, (0), TERM_FILE_TERM, (0));
	segp = null;
     end clean_up;

     end install;
