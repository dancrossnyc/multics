/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(75-01-01,Herbst), approve(), audit(), install():
     Pre-hcom comments.
     Written 01/01/75 by Steve Herbst
     ACL commands moved to set_acl.pl1 08/27/82 S. Herbst
  2) change(86-11-18,Lippard), approve(86-11-24,MCR7578),
     audit(87-07-13,Dickson), install(87-08-06,MR12.1-1067):
     Modified to use expand_pathname_$add_suffix instead of expand_path_.
  3) change(87-08-12,Lippard), approve(86-11-24,PBF7578),
     audit(87-08-13,Dickson), install(87-08-13,MR12.1-1087):
     Modified to add the suffix "ms" for message segments rather than
     always just adding "mbx".
                                                   END HISTORY COMMENTS */


ms_create: mscr: proc;

/* This procedure implements the special create, delete, add_name, delete_name,
   rename, set_max_length and safety_switch commands for mailboxes and message segments. */


dcl ename (99) char(32) aligned based(names_ptr);		/* names from hcs_$star_ */

dcl 1 entries (ecount) aligned based(entries_ptr),	/* entry info from hcs_$star_ */
     2 etype fixed bin(1) unaligned,
     2 nnames fixed bin(15) unaligned,
     2 nindex fixed bin unaligned;

dcl area area based(area_ptr);

dcl arg char(al) based(ap);
dcl dn char(168);
dcl (command, en, equal_name, new_name) char(32);
dcl amax_length char(8);
dcl exmode_letters char(7) init("adroswu");
dcl suffix char (4) varying;

dcl ap ptr;
dcl (area_ptr, entries_ptr, names_ptr) ptr init(null);

dcl (create, delete, delete_name) bit (1) aligned;
dcl (brief, got_path, got_max_length, octal, stars) bit(1) aligned;
dcl (safety_switch, yes_sw) bit (1) aligned;

dcl (branches init(10b), lk_type init(0), seg_type init(1), dir_type init(2))
	fixed bin(2) int static options(constant);
dcl type fixed bin(2);
dcl mode fixed bin(5);
dcl (al, arg_count, arg_index, ecount, i, j, k, name_count) fixed bin;
dcl (max_length, rounded_max_length) fixed bin(19);
dcl code fixed bin(35);

dcl error_table_$action_not_performed fixed bin(35) ext;
dcl error_table_$badopt fixed bin(35) ext;
dcl error_table_$badstar fixed bin(35) ext;
dcl error_table_$incorrect_access fixed bin(35) ext;
dcl error_table_$namedup fixed bin(35) ext;
dcl error_table_$no_dir fixed bin(35) ext;
dcl error_table_$no_info fixed bin(35) ext;
dcl error_table_$noentry fixed bin(35) ext;
dcl error_table_$nostars fixed bin(35) ext;

dcl sys_info$max_seg_size fixed bin(19) ext;

dcl check_star_name_$entry entry(char(*),fixed bin(35));
dcl (com_err_, com_err_$suppress_name) entry options(variable);
dcl command_query_$yes_no entry options(variable);
dcl cu_$arg_count entry(fixed bin);
dcl cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin(35));
dcl cv_dec_check_ entry(char(*),fixed bin(35)) returns(fixed bin(35));
dcl cv_oct_check_ entry(char(*),fixed bin(35)) returns(fixed bin(35));
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl get_equal_name_ entry(char(*),char(*),char(*),fixed bin(35));
dcl get_ring_ entry returns(fixed bin);
dcl get_system_free_area_ entry returns(ptr);
dcl hcs_$get_safety_sw entry(char(*),char(*),bit(1)aligned,fixed bin(35));
dcl hcs_$get_user_effmode entry(char(*),char(*),char(*),fixed bin,fixed bin(5),fixed bin(35));
dcl hcs_$star_ entry(char(*),char(*),fixed bin(2),ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl hcs_$status_minf entry(char(*),char(*),fixed bin(1),fixed bin(2),fixed bin(24),fixed bin(35));
dcl nd_handler_ entry(char(*),char(*),char(*),fixed bin(35));

dcl (ev1 entry variable,
	message_segment_$create, mailbox_$create,
	message_segment_$delete, mailbox_$delete)
		entry(char(*),char(*),fixed bin(35));
dcl (ev2 entry variable,
	message_segment_$chname_file, mailbox_$chname_file)
		entry(char(*),char(*),char(*),char(*),fixed bin(35));
dcl (ev3 entry variable,
	message_segment_$set_max_length_file, mailbox_$set_max_length_file)
		entry(char(*),char(*),fixed bin(19),fixed bin(35));
dcl (ev6 entry variable,
	message_segment_$set_safety_switch, mailbox_$set_safety_switch)
		entry(char(*),char(*),bit(1)aligned,fixed bin(35));

dcl (bit, divide, mod, null, substr) builtin;

dcl cleanup condition;
/**/
	command = "ms_create";
	create = "1"b;
	delete, delete_name = "0"b;
	suffix = ".ms";
	ev1 = message_segment_$create;
	go to COMMON;

mbx_create: mbcr: entry;

	command = "mbx_create";
	create = "1"b;
	delete, delete_name = "0"b;
	suffix = ".mbx";
	ev1 = mailbox_$create;
	go to COMMON;

ms_delete: msdl: entry;

	command = "ms_delete";
	delete = "1"b;
	create, delete_name = "0"b;
	suffix = ".ms";
	ev1 = message_segment_$delete;
	ev6 = message_segment_$set_safety_switch;
	go to COMMON;

mbx_delete: mbdl: entry;

	command = "mbx_delete";
	delete = "1"b;
	create, delete_name = "0"b;
	suffix = ".mbx";
	ev1 = mailbox_$delete;
	ev6 = mailbox_$set_safety_switch;
	go to COMMON;

ms_delete_name: msdn: entry;

	command = "ms_delete_name";
	delete_name = "1"b;
	create, delete = "0"b;
	suffix = ".ms";
	ev2 = message_segment_$chname_file;
	go to COMMON;

mbx_delete_name: mbdn: entry;

	command = "mbx_delete_name";
	delete_name = "1"b;
	create, delete = "0"b;
	suffix = ".mbx";
	ev2 = mailbox_$chname_file;
/**/
  COMMON: on condition(cleanup) call clean_up;

	call cu_$arg_count(arg_count);
	if arg_count=0 then do;
	     call com_err_$suppress_name(0,command,"Usage:  ^a paths",command);
	     return;
	end;

	call verify_args;

	do arg_index = 1 to arg_count;
	     if arg_index>1 then do;			/* free last name's allocations */
		if entries_ptr^=null then free entries in(area);
		if names_ptr^=null then free ename in(area);
	     end;
	     call get_entries;
	     do j = 1 to ecount;
		if stars & delete_name then name_count = nnames(j);  /* all names */
		else name_count = 1;		/* just all entries */
		do k = 1 to name_count;
		     if stars then en = ename(nindex(j)+k-1);
		     if delete then do;
			type = seg_type;
			call hcs_$status_minf(dn,en,0,type,0,code);
			if type=lk_type then do;
			     call com_err_(0,command,"^a^[>^]^a is a link. Use unlink.",dn,dn^=">",en);
			     go to NEXT;
			end;
			else if type=dir_type then do;
			     call com_err_(0,command,"^a^[>^]^a is a directory. Use delete_dir.",dn,dn^=">",en);
			     go to NEXT;
			end;
			if code=0 then do;
			     call hcs_$get_safety_sw(dn,en,safety_switch,code);
			     if safety_switch & code=0 then do;
				call hcs_$get_user_effmode(dn,"","",get_ring_(),mode,code);
				if code^=0 | substr(bit(mode,5),4,1) then do;  /* need modify */
				     call command_query_$yes_no (yes_sw, 0, command, "",
					"^a^[>^]^a is protected. Do you want to delete it?",
					dn, dn ^= ">", en);

				     if ^yes_sw then go to NEXT;
				     call ev6 (dn, en, "0"b, code);
				end;
			     end;
			end;
		     end;
  TRY_AGAIN:	     if delete_name then call ev2(dn,en,en,"",code);
			else call ev1(dn,en,code);
		     if code^=0 then
			if code=error_table_$namedup then do;
			     new_name = en;
			     call nd_handler_(command,dn,new_name,code);
			     if code=0 then go to TRY_AGAIN;
			end;
			else call com_err_(code,command,"^a^[>^]^a",dn,dn^=">",en);
NEXT:		end;
	     end;
	end;
	go to RETURN;
/**/
ms_add_name: msan: entry;

	command = "ms_add_name";
	suffix = ".ms";
	ev2 = message_segment_$chname_file;
	go to ADD_NAME;

mbx_add_name: mban: entry;

	command = "mbx_add_name";
	suffix = ".mbx";
	ev2 = mailbox_$chname_file;

  ADD_NAME:
	on condition(cleanup) call clean_up;

	call cu_$arg_count(arg_count);
	if arg_count<2 then do;
	     call com_err_$suppress_name(0,command,"Usage:  ^a path names",command);
	     return;
	end;

	call verify_args;

	arg_index = 1;
	call get_entries;
	do i = 2 to arg_count;
	     call cu_$arg_ptr(i,ap,al,code);
	     equal_name = arg;
	     do j = 1 to ecount;
		if stars then name_count = nnames(j);
		else name_count = 1;
		do k = 1 to name_count;
		     if stars then en = ename(nindex(j)+k-1);
		     call get_equal_name_(en,equal_name,new_name,code);
		     if code^=0 then do;
			call com_err_(code,command,"^a",arg);
			go to NEXT_NAME;
		     end;
  ADD_AGAIN:	     call ev2(dn,en,"",new_name,code);
		     if code^=0 then
			if code=error_table_$namedup then do;
			     call nd_handler_(command,dn,new_name,code);
			     if code=0 then go to ADD_AGAIN;
			end;
			else if code=error_table_$noentry | code=error_table_$no_dir
			     | code=error_table_$incorrect_access then do;
				call com_err_(code,command,"^a^[>^]^a",dn,dn^=">",en);
				go to RETURN;
			end;
			else call com_err_(code,command,"^a on ^a^[>^]^a",new_name,dn,dn^=">",en);
		end;
	     end;
  NEXT_NAME:
	end;
	go to RETURN;
/**/
ms_rename: msrn: entry;

	command = "ms_rename";
	suffix = ".ms";
	ev2 = message_segment_$chname_file;
	go to RENAME;

mbx_rename: mbrn: entry;

	command = "mbx_rename";
	suffix = ".mbx";
	ev2 = mailbox_$chname_file;

 RENAME:	on condition(cleanup) call clean_up;

	call cu_$arg_count(arg_count);
	if arg_count=0 | mod(arg_count,2)^=0 then do;
	     call com_err_$suppress_name(0,command,
		"Usage:  ^a path1 name1 ... {pathj} {namej}",command);
	     return;
	end;

	call verify_args;

	do arg_index = 1 by 2 to arg_count-1;
	     call get_entries;
	     call cu_$arg_ptr(arg_index+1,ap,al,code);
	     equal_name = arg;
	     do j = 1 to ecount;
		if stars then name_count = nnames(j);
		else name_count = 1;
		do k = 1 to name_count;
		     if stars then en = ename(nindex(j)+k-1);
		     call get_equal_name_(en,equal_name,new_name,code);
		     if code^=0 then do;
			call com_err_(code,command,"^a",arg);
			go to NEXT_PAIR;
		     end;
  RENAME_AGAIN:	     call ev2(dn,en,en,new_name,code);
		     if code^=0 then
			if code=error_table_$namedup then do;
			     call nd_handler_(command,dn,new_name,code);
			     if code=0 then go to RENAME_AGAIN;
			end;
			else if code=error_table_$noentry | code=error_table_$no_dir
			     | code=error_table_$incorrect_access then do;
				call com_err_(code,command,"^a^[>^]^a",dn,dn^=">",en);
				go to NEXT_PAIR;
			end;
			else call com_err_(code,command,"^a on ^a^[>^]^a",new_name,dn,dn^=">",en);
		end;
	     end;
  NEXT_PAIR:
	end;
	go to RETURN;
/**/
ms_set_max_length: mssml: entry;

	command = "ms_set_max_length";
	suffix = ".ms";
	ev3 = message_segment_$set_max_length_file;
	go to SET_MAX_LENGTH;

mbx_set_max_length: mbsml: entry;

	command = "mbx_set_max_length";
	suffix = ".mbx";
	ev3 = mailbox_$set_max_length_file;

  SET_MAX_LENGTH:
	on condition(cleanup) call clean_up;

	call cu_$arg_count(arg_count);
	brief, got_path, got_max_length, octal = "0"b;
	do arg_index = 1 to arg_count;
	     call cu_$arg_ptr(arg_index,ap,al,code);
	     if substr(arg,1,1)="-" then		/* control argument */
		if arg="-decimal" | arg="-dc" then octal = "0"b;
		else if arg="-octal" | arg="-oc" then octal = "1"b;
		else if arg="-brief" | arg="-bf" then brief = "1"b;
		else do;
		     call com_err_(error_table_$badopt,command,"^a",arg);
		     return;
		end;
	     else if ^got_path then do;
		call get_entries;
		got_path = "1"b;
	     end;
	     else do;
		amax_length = arg;
		got_max_length = "1"b;
	     end;
	end;

	if ^got_path | ^got_max_length then do;
	     call com_err_$suppress_name(0,command,
		"Usage:  ^a path max_length {control_args}",command);
	     go to RETURN;
	end;
	if octal then max_length = cv_oct_check_(amax_length,code);
	     else max_length = cv_dec_check_(amax_length,code);
	if code^=0 then do;
	     call com_err_(0,command,"^a is not a valid number.",amax_length);
	     go to RETURN;
	end;
	if max_length>sys_info$max_seg_size then do;
	     call com_err_(0,command,"Desired max length ^a exceeds maximum segment size ^d.",
					amax_length,sys_info$max_seg_size);
	     go to RETURN;
	end;
	if mod(max_length,1024)^=0 then do;
	     rounded_max_length = divide(max_length+1023,1024,19,0)*1024;
	     if ^brief then
		if octal then call com_err_(0,command,
		     "^o is not a multiple of 2000 (1024 decimal) words.^/^o used for max length.",
		     max_length,rounded_max_length);
		else call com_err_(0,command,
		     "^d is not a multiple of 1024 words.^/^d used for max length.",
		     max_length,rounded_max_length);
	     max_length = rounded_max_length;
	end;
	else rounded_max_length = max_length;

	do j = 1 to ecount;
	     if stars then en = ename(nindex(j));
	     call ev3(dn,en,rounded_max_length,code);
	     if code^=0 then
		if code=error_table_$action_not_performed then
		     if suffix=".ms" then call com_err_(0,command,
				"Message segment must be empty. ^a^[>^]^a",dn,dn^=">",en);
		     else call com_err_(0,command,
				"Mailbox must be empty. ^a^[>^]^a",dn,dn^=">",en);
		else do;
		     call com_err_(code,command,"^a^[>^]^a",dn,dn^=">",en);
		     if code=error_table_$incorrect_access |
			code=error_table_$no_info then go to RETURN;
		end;
	end;
	go to RETURN;
/**/
ms_safety_switch_on: msssn: entry;

	command = "ms_safety_switch_on";
	safety_switch = "1"b;
MS_SSW:	suffix = ".ms";
	ev6 = message_segment_$set_safety_switch;
	go to SET_SAFETY_SWITCH;

mbx_safety_switch_on: mbssn: entry;

	command = "mbx_safety_switch_on";
	safety_switch = "1"b;
MBX_SSW:	suffix = ".mbx";
	ev6 = mailbox_$set_safety_switch;
	go to SET_SAFETY_SWITCH;

ms_safety_switch_off: msssf: entry;

	command = "ms_safety_switch_off";
	safety_switch = "0"b;
	go to MS_SSW;

mbx_safety_switch_off: mbssf: entry;

	command = "mbx_safety_switch_off";
	safety_switch = "0"b;
	go to MBX_SSW;
/**/
SET_SAFETY_SWITCH: on condition (cleanup) call clean_up;

	call cu_$arg_count(arg_count);
	if arg_count<1 then do;
	     call com_err_$suppress_name(0,command,"Usage:  ^a paths",command);
	     go to RETURN;
	end;

	call verify_args;

	do arg_index = 1 to arg_count;
	     if arg_index>1 then do;
		if entries_ptr^=null then free entries in(area);
		if names_ptr^=null then free ename in(area);
	     end;

	     call get_entries;

	     do j = 1 to ecount;
		if stars then en = ename(nindex(j));
		call ev6(dn,en,safety_switch,code);
		if code^=0 then do;
		     call com_err_(code,command,"^a^[>^]^a",dn,dn^=">",en);
		     if code=error_table_$incorrect_access |
			code=error_table_$no_info then go to NEXT_ARG;
		end;
	     end;
NEXT_ARG:
	end;
	go to RETURN;
%page;
get_entries: proc;

	/* Internal procedure to expand pathname and apply star convention. */
	/* The variable arg_index is an implicit input argument = index of a command argument. */

	call cu_$arg_ptr(arg_index,ap,al,code);
	call expand_pathname_$add_suffix (arg, substr (suffix, 2), dn, en, code);
	if code^=0 then do;
	     call com_err_(code,command,"^a",arg);
	     go to RETURN;
	end;

	call check_star_name_$entry(en,code);
	if code=0 then do;				/* not a star name */
	     stars = "0"b;
	     ecount = 1;
	     return;
	end;
	if code=error_table_$badstar then do;
	     call com_err_(code,command,"^a",en);
	     go to RETURN;
	end;

	stars = "1"b;
	if command="ms_create" | command="mbx_create" then do;
	     call com_err_(error_table_$nostars,command);
	     go to RETURN;
	end;

	if area_ptr=null then area_ptr = get_system_free_area_();

	call hcs_$star_(dn,en,(branches),area_ptr,ecount,entries_ptr,names_ptr,code);
	if code^=0 then do;
	     call com_err_(code,command,"^a>^a",dn,en);
	     go to RETURN;
	end;

end get_entries;


verify_args: proc;

	/* This internal procedure scans the arguments and aborts with an
	   error message if it finds a control argument. */

	do arg_index = 1 to arg_count;
	     call cu_$arg_ptr(arg_index,ap,al,code);
	     if substr(arg,1,1)="-" then do;
		call com_err_(error_table_$badopt,command,"^a",arg);
		go to RETURN;
	     end;
	end;

end verify_args;
/**/
  RETURN: call clean_up;
	return;

clean_up: proc;

	if entries_ptr^=null then free entries in(area);
	if names_ptr^=null then free ename in(area);

end clean_up;


end ms_create;
