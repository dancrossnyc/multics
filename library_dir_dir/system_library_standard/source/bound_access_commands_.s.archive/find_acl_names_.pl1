/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


find_acl_names_: proc (aptr, acln, aclp, aclcnt, flptr, num, code);

/* This procedure takes an access name as given to access commands, determines its type, and
   searches the given ACL for matches.  A flag is set for any match. */

/* initially coded by M. Weaver  17 March 1970 */
/* last modified by M. Weaver 11 April 1970  5:45 PM */

dcl  acname char (acln) based (aptr);
dcl (name, nm) char (32) var;
dcl (temp1, temp2) char (29) var;
dcl (aclp, flptr, ap, fp, aptr) ptr;
dcl (nfd, i, j, m, n, type, aclcnt, acln, num, typ) fixed bin;
dcl  code fixed bin (35);
dcl  flags (0:99) bit (1) aligned based (fp);
dcl  ft bit (1) aligned;
dcl 1 acl (0:99) aligned based (ap),
    2 userid char (32) aligned,
    2 pack_bits char (4) aligned;
dcl (index, mod, length, substr) builtin;

/* * * * * * * * * * */

/*  copy arguments */
	ap = aclp;
	fp = flptr;
	code = 0;					/* code = 1 => all acl names are to be used */

	ft = "0"b;
	go to start;

find_type_: entry (aptr, acln, nm, typ);
	ft = "1"b;
						/* this entry is for setacl, which only needs the type, not the search */

/* determine structure of acname */

start:	type = 0;					/* initialize */
	if acname = "." then go to set_all;
	n = index (acname, ".");			/* find first . */
	if n ^= 1 then type = 4;			/* pn. or pn.. or pn.pj. or pn.pj.t */
	if n = 0 then go to set_name;
	else if n = acln then do;
set_name:	     name = acname;
	     go to check_t;
	end;
	m = index (substr (acname, n+1), ".");		/* find second . */
	if m = 1 then do;
	     if n + m = acln then do;			/* pn.. or .. */
		if type = 0 then do;		/* .. */
set_all:		     if ^ft then do;
			code = 1;
			num = 0;
		     end;
		     else typ = 8;
		     return;
		end;
		else do;				/* pn.. */
		     name = substr (acname, 1, n);
		     go to check_t;
		end;
	     end;
	     else do;				/* pn..t or ..t */
		if type = 0 then name = substr (acname, 2) || " "; /* ..t */
		else name = acname;			/* pn..t */
		type = type + 1;
		go to check_t;
	     end;
	end;					/* end of m = 1 */

	else do;					/* pn.pj.t or pn.pj. or .pj. or .pj.t or pn.pj or .pj */
	     if m ^= 0 then
		if n + m ^= acln then type = type + 1;	/* pn.pj.t or .pj.t */
	     type = type + 2;
	     go to set_name;
	end;

check_t:	if mod (type, 2) = 0 then
	     if substr (name, length (name), 1) ^= "."
	     then name = name || ".";			/* pn or pn.pj or .pj */
	if ft then do;				/* only need type and name for setacl */
	     typ = type;
	     nm = name;
	     return;
	end;
	nfd = 0;					/* initialize number found */

	if type < 4 then				/* ..t or .pj. or .pj.t */
	     do i = 0 to aclcnt;
	     if index (acl (i).userid, name) > 0 then do;
		flags (i) = "1"b;
		nfd = nfd+ 1;
	     end;
	end;

	else if type = 7 then do;			/* pn.pj.t */
	     do i = 0 to aclcnt while (acl (i).userid ^= name); end;
	     if i <= aclcnt then do;
		flags (i) = "1"b;
		nfd = 1;
	     end;
	end;

	else if type = 5 then do;			/* pn..t */
	     temp1 = substr (name, 1, n);		/* get pn. */
	     do i = 0 to aclcnt while (index (acl (i).userid, temp1) ^= 1); end;
	     if i < aclcnt then do;			/* found pn. */
		temp2 = substr (name, n+1) || " ";
		do j = i to aclcnt while (index (acl (j).userid, temp1) = 1);
		     if index (acl (j).userid, temp2) ^= 0 then do; /* look for .t */
			flags (j) = "1"b;
			nfd = nfd + 1;
		     end;
		end;
	     end;
	end;

	else do;					/* type = 4 or 6;  pn. or pn.pj. */
	     do i = 0 to aclcnt while (index (acl (i).userid, name) ^= 1); end;
	     if i <= aclcnt then
		do j = i to aclcnt while (index (acl (j).userid, name) = 1);
		flags (j) = "1"b;
		nfd = nfd + 1;
	     end;
	end;


/* The acl primitives put all the entries for a person together, and within this
   grouping they put all the entries for a particular project together. */


	num = nfd;
	if nfd = aclcnt + 1 then code = 1;
	return;
     end find_acl_names_;
