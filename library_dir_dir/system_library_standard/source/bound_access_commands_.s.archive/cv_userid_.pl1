/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cv_userid_:	procedure (arg) returns (char(32));


/*

	This procedure converts an unnormalized process group id to
	standard format.  Example:  ".SysLib" becomes "*.SysLib.*".
	Calling sequence:

		normal_id = cv_userid_(string);

	The user, project, and tag fields are limited to 20, 9, and 1
	characters in length, respectively.

	P. Bos, May 1972

*/


     dcl	arg			char(*);		/* unnormalized userid e.g. ".SysLib" */

     dcl (addr, length, substr)	builtin;

     dcl (end, start) (3)		fixed bin init ((3) 1),
	string (3)		char(20) varying;

     dcl	lmax (3)			fixed bin int static init (20, 9, 1);

     dcl	chr			char(1) aligned,
	cp			ptr,
         (i, j, l)			fixed bin;

     dcl	1 c			based (cp),	/* char array overlaid on arg */
	  2 char (l)		char(1) unal;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	cp = addr (arg);				/* get pointer to unnormalized id */
	l = length (arg);				/* and its size */
	i = 1;					/* starting on first name component */

	do j = 1 to l;				/* scan char by char */
	     chr = c.char(j);			/* align this char */
	     if chr = " " then do;			/* blank implies end of string */
		end(i) = j;			/* mark it */
		go to done;			/* and exit */
		end;
	     if chr = "." then do;			/* "." marks end of component */
		end(i) = j;			/* save index */
		if i = 3 then			/* userid has only three components */
		     go to done;			/* exit after third one */
		i = i + 1;			/* starting next component */
		start(i) = j + 1;			/* mark start index for new component */
		end;
	     end;
	end(i) = j;				/* fell off end, mark index */

done:	do i = 1 to 3;				/* extract name components */
	     l = end(i) - start(i);			/* optimize */
	     if l > 0 then do;			/* is this field really there? */
		if l > lmax(i) then			/* each field has maximum width */
		     l = lmax(i);			/* adjust if too big */
		string(i) = substr (arg, start(i), l);	/* extract subfield */
		end;
	     else					/* nothing there */
		string(i) = "*";			/* null component implies "*" */
	     end;

	return (string(1) || "." || string(2) || "." || string(3));	/* form normalized id and return */

	end cv_userid_;
