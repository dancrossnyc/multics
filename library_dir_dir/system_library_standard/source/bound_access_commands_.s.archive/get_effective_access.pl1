/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: on,style2,^inddcls,linecom,ifthendo,ifthen,^indnoniterdo,dclind5,idind35 */

/* DESCRIPTION
     This is a command/AF to return a user's effective access
to a branch without respect to AIM.
*/


/****^  HISTORY COMMENTS:
  1) change(83-09-13,Lippard), approve(86-03-10,MCR6565), audit(), install():
     Initial coding.
  2) change(84-04-26,Lippard), approve(86-03-10,MCR6899), audit(), install():
     Removed the extra linefeed from error messages and to not abort
     because of error_table_$nomatch.
  3) change(85-02-06,MSharpe), approve(86-03-10,MCR7122), audit(), install():
     replaced -fcnt with -inase/inaee; to report unsupop.
  4) change(86-03-03,Newcomb), approve(86-03-26,MCR7366), audit(86-04-15,Cox),
     install(86-04-22,MR12.0-1042):
     corrected to allow the "<" path by expanding the path before checking for a
     starname.
                                                   END HISTORY COMMENTS */

%page;
get_effective_access:
gea:
     procedure options (variable);

dcl  (						/* Automatics */
     all_modes			char (36),
     argl				fixed bin (21),
     argn				fixed bin,
     argp				ptr,
     bit_count			fixed bin (24),
     bits_ptr			ptr,
     code				fixed bin (35),
     dname			char (168),
     ename			char (32),
     (idx, jdx)			fixed bin,
     (mode, ex_mode)		bit (36) aligned,
     return_len			fixed bin (21),
     return_ptr			ptr,
     return_string			char (36) varying,
     1 si				aligned like suffix_info,
     type				fixed bin (2),
     userid			char (32),
     user_ring			fixed bin,
     (						/* Flags */
     active_function,
     userid_arg,
     path_arg,
     multiple_paths,
     star_path,
     ring_arg,
     no_type,
     printed_path
     )				bit (1) aligned
     )				automatic;

dcl						/* Based */
     arg				char (argl) based (argp),
     bits				(36) bit (1) unaligned based (bits_ptr),
     return_arg			char (return_len) varying based (return_ptr);

dcl  (						/* External Entries */
     (active_fnc_err_, com_err_)	entry options (variable),
     check_star_name_$entry		entry (char (*), fixed bin (35)),
     cu_$arg_ptr			entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     cu_$af_arg_ptr			entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     cu_$af_return_arg		entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     cv_userid_			entry (char (*)) returns (char (32)),
     expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35)),
     fs_util_$get_user_access_modes	entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35)),
     fs_util_$suffix_info		entry (char (*), char (*), ptr, fixed bin (35)),
     get_system_free_area_		entry () returns (ptr),
     hcs_$get_user_access_modes	entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35)),
     hcs_$star_			entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				fixed bin (35)),
     hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				fixed bin (35)),
     ioa_				entry options (variable),
     pathname_			entry (char (*), char (*)) returns (char (168))
     )				external;

dcl  (						/* Entries:  variable */
     complain			entry variable options (variable),
     get_arg_ptr			variable entry (fixed bin, ptr, fixed bin (21), fixed bin (35))
     );

dcl  (						/* Constants */
     ME				char (20) initial ("get_effective_access"),
     TRUE				bit (1) init ("1"b),
     FALSE			bit (1) init ("0"b),
     CHASE			fixed bin (1) init (1),
     SEGMENT			fixed bin (2) init (1),
     DIRECTORY			fixed bin (2) init (2)
     )				internal static options (constant);

dcl  (						/* error codes */
     error_table_$badopt,
     error_table_$bad_conversion,
     error_table_$badstar,
     error_table_$noarg,
     error_table_$nomatch,
     error_table_$unsupported_operation
     )				fixed bin (35) ext static;

/* PL/I things */
dcl  (addr, convert, length, null, rtrim, substr, sum)
				builtin;
dcl  (cleanup, conversion, size)	condition;
%page;
/* initialize switches */
	userid_arg, path_arg, multiple_paths, ring_arg, no_type, printed_path = FALSE;

/* process arguments */
	call cu_$af_return_arg (argn, return_ptr, return_len, code);

	if code = 0 then do;			/* active function invocation */
	     active_function = TRUE;
	     get_arg_ptr = cu_$af_arg_ptr;
	     complain = active_fnc_err_;
	end;

	else do;					/* command invocation */
	     active_function = FALSE;
	     get_arg_ptr = cu_$arg_ptr;
	     complain = com_err_;
	end;

	do idx = 1 to argn;
	     call get_arg_ptr (idx, argp, argl, code);
	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-interpret_as_standard_entry" | arg = "-inase" then
		     no_type = TRUE;

		else if arg = "-interpret_as_extended_entry" | arg = "-inaee" then
		     no_type = FALSE;

		else if arg = "-ring" then do;
		     ring_arg = TRUE;
		     idx = idx + 1;
		     if idx > argn then do;
			call complain (error_table_$noarg, ME, "ring");
			return;
		     end;
		     call get_arg_ptr (idx, argp, argl, code);
		     on conversion, size goto CONVERSION;
		     user_ring = convert (user_ring, arg);
		     revert conversion, size;
		     if user_ring < 1 | user_ring > 7 then do;
			call complain (0, ME, "Invalid ring.  Ring must be an integer 1-7.");
			return;
		     end;
		end;
		else if arg = "-user" then do;
		     idx = idx + 1;
		     if idx > argn then do;
			call complain (error_table_$noarg, ME, "user name");
			return;
		     end;
		     call get_arg_ptr (idx, argp, argl, code);
		     userid = cv_userid_ (arg);
		     userid_arg = TRUE;
		end;
		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;
	     end;
	     else do;
		if path_arg then
		     multiple_paths = TRUE;
		path_arg = TRUE;
	     end;
	end;					/* arg loop */

	if ^path_arg then do;
	     call complain (0, ME, "Usage: ^[[^]gea paths {-control_args}^[]^]", active_function, active_function);
	     return;
	end;

	return_string = "";

	do idx = 1 to argn;				/* process pathnames */
	     call get_arg_ptr (idx, argp, argl, (0));
	     if arg = "-interpret_as_standard_entry" | arg = "-inase" then
		;
	     else if arg = "-interpret_as_extended_entry" | arg = "-inaee" then
		;
	     else if arg = "-ring" | arg = "-user" then
		idx = idx + 1;
	     else do;				/* pathname argument, let's do our job */
		call expand_pathname_ (arg, dname, ename, code);
		if code ^= 0 then do;
		     call complain (code, ME, "^a", arg);
		     return;
		end;
		star_path = FALSE;
		call check_star_name_$entry (ename, code);
		if code = error_table_$badstar then do;
		     call complain (code, ME, "^a", arg);
		     return;
		end;
		else if code ^= 0 then
		     star_path = TRUE;

		if star_path then do;
		     star_names_ptr, star_entry_ptr = null ();
		     on cleanup call free_star_structures ();
		     call hcs_$star_ (dname, ename, star_ALL_ENTRIES, get_system_free_area_ (), star_entry_count,
			star_entry_ptr, star_names_ptr, code);

		     if code ^= 0 then do;
			call complain (code, ME, "^a", pathname_ (dname, ename));
			if code ^= error_table_$nomatch then
			     return;		/* nothing to free */
		     end;

		     do jdx = 1 to star_entry_count;
			call return_info (dname, star_names (star_entries.nindex (jdx)), return_string, code);
			if code = 0 & ^active_function then do;
			     call ioa_ ("^[^/^]^3x^a^/^a", printed_path,
				pathname_ (dname, star_names (star_entries.nindex (jdx))), return_string);
			     printed_path = TRUE;
			end;
			else if code = 0 then
			     return_arg = return_arg || return_string || " ";

			else if code = error_table_$unsupported_operation & ^active_function then
			     call complain (code, ME, "^a",
				pathname_ (dname, star_names (star_entries.nindex (jdx))));
		     end;
		     call free_star_structures ();
		     revert cleanup;
		end;

		else do;
		     call return_info (dname, ename, return_string, code);

		     if ^active_function & multiple_paths & code = 0 then do;
			call ioa_ ("^[^/^]^3x^a^/^a", printed_path, pathname_ (dname, ename), return_string);
			printed_path = TRUE;
		     end;
		     else if active_function & code ^= 0 then
			return;
		     else if active_function then
			return_arg = return_arg || return_string || " ";
		     else if code = error_table_$unsupported_operation then
			call complain (code, ME);
		end;
	     end;
	end;					/* pathname processing loop */

	if active_function then
	     return_arg = rtrim (return_arg);
	else if ^star_path & ^multiple_paths & code = 0 then
	     call ioa_ ("^a", return_string);
	return;

CONVERSION:
	call complain (error_table_$bad_conversion, ME, "^a", arg);
	return;
%page;
free_star_structures:
     procedure;
	if star_names_ptr ^= null () then do;
	     free star_names;			/* in system free area */
	     star_names_ptr = null ();
	end;
	if star_entry_ptr ^= null () then do;
	     free star_entries;			/* in system free area */
	     star_entry_ptr = null ();
	end;
     end free_star_structures;




/* get the effective access on a specific branch entry */
return_info:
     procedure (P_dname, P_ename, P_return_string, P_code);
dcl  (P_dname, P_ename)		char (*) parm;
dcl  P_return_string		char (*) varying parm;
dcl  P_code			fixed bin (35) parm;
dcl  idx				fixed bin;

	P_code = 0;

	si.version = SUFFIX_INFO_VERSION_1;

	call fs_util_$suffix_info (P_dname, P_ename, addr (si), code);

	if code ^= 0 then do;
	     call complain (code, ME, "^a", pathname_ (P_dname, P_ename));
	     P_code = code;
	     return;
	end;

	if si.type = FS_OBJECT_TYPE_SEGMENT then
	     type = SEGMENT;
	else if si.type = FS_OBJECT_TYPE_DIRECTORY then
	     type = DIRECTORY;
	else if si.type = FS_OBJECT_TYPE_MSF then
	     type = SEGMENT;

	if ^userid_arg then
	     userid = "";
	if ^ring_arg then
	     user_ring = -1;

	P_return_string = "";

	if no_type then do;
	     call hcs_$status_minf (P_dname, P_ename, CHASE, type, bit_count, code);

	     if code ^= 0 then do;
		call complain (code, ME, "^a", pathname_ (dname, ename));
		return;
	     end;

	     if type = SEGMENT then
		all_modes = "rew";
	     else if type = DIRECTORY then
		all_modes = "sma";
	end;
	else all_modes = si.modes;

	if no_type then
	     call hcs_$get_user_access_modes (P_dname, P_ename, userid, user_ring, mode, ex_mode, code);
	else call fs_util_$get_user_access_modes (P_dname, P_ename, userid, user_ring, mode, ex_mode, code);
	if ^si.extended_acl | si.standard_object | no_type then
	     bits_ptr = addr (mode);
	else bits_ptr = addr (ex_mode);

	do idx = 1 to length (rtrim (all_modes));
	     if bits (idx) then
		P_return_string = P_return_string || substr (all_modes, idx, 1);
	end;

	if length (P_return_string) = 0 then
	     P_return_string = "null";

     end return_info;
%page;
%include suffix_info;
%page;
%include copy_flags;
%page;
%include star_structures;
     end get_effective_access;
