/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/**** CHECK_GATE_ACCESS_:  This program exists to allow programs to avoid
      referencing privileged gates when there are alternatives for 
      unprivileged users thereby preventing access violation audits.
      This program takes a gate name as a parameter as well as a pointer
      to be used for referencing directory determination and returns a
      zero error code if the gate is located using the normal search
      rules and if the user has execute access to this gate.  If the
      gate is found, but the user lacks sufficient access to call the gate,
      error_table_$moderr is returned.  If the gate is not located, then
      error_table_$noentry is returned.
*/

/* Written 1984-08-30 by E. Swenson */

check_gate_access_:
     procedure (P_gate_name, P_reference_ptr, P_code);

/* Parameter */

	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_gate_name		 char (*) parameter;
	dcl     P_reference_ptr	 ptr parameter;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     found_with_bad_access	 bit (1) aligned;
	dcl     found_with_good_access bit (1) aligned;
	dcl     i			 fixed bin (17);

/**** There is no real include file for the search rules.  So until we 
      create one and change all the programs which reference search rules
      to use the include file, this program may as well use its own
      declaration too. */

	dcl     1 search_rules	 aligned,
		2 number		 fixed bin (17),
		2 names		 (21) char (168);

/* External Entries */

	dcl     get_pdir_		 entry () returns (char (168));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$fs_get_seg_ptr	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$fs_search_get_wdir
				 entry (ptr, fixed bin);
	dcl     hcs_$get_search_rules	 entry (ptr);
	dcl     hcs_$get_user_effmode	 entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     sub_err_		 entry () options (variable);
	dcl     user_info_$homedir	 entry (char (*));

/* External Static */

	dcl     error_table_$noentry	 fixed bin (35) external static;
	dcl     error_table_$moderr	 fixed bin (35) external static;

/* Constant */

	dcl     ME		 char (32) initial ("check_gate_access_") internal static options (constant);

/* Program */

	call hcs_$get_search_rules (addr (search_rules));
	found_with_good_access = "0"b;
	found_with_bad_access = "0"b;
	do i = 1 to search_rules.number while (^found_with_good_access);
	     call TRY_TO_LOCATE_GATE ((search_rules.names (i)));
	     if code = 0
	     then found_with_good_access = "1"b;
	     else if code = error_table_$moderr
	     then found_with_bad_access = "1"b;		/* remember we found, bud didn't have access. */
	end;
	if found_with_good_access
	then P_code = 0;
	else if found_with_bad_access
	then P_code = error_table_$moderr;
	else P_code = code;
	return;
%page;
TRY_TO_LOCATE_GATE:
     procedure (search_rule_name);

	dcl     search_rule_name	 char (*) parameter;

	dcl     lth		 fixed bin;
	dcl     pathname		 char (168);

	if substr (search_rule_name, 1, 1) = ">"
	then call TRY_DIRECTORY (search_rule_name);
	else if search_rule_name = "initiated_segments"
	then call TRY_INITIATED_SEGMENTS ();
	else if search_rule_name = "referencing_dir"
	then call TRY_REFERENCING_DIR (P_reference_ptr);
	else if search_rule_name = "working_dir"
	then do;
		call hcs_$fs_search_get_wdir (addr (pathname), lth);
		if lth ^= 0
		then call TRY_DIRECTORY (substr (pathname, 1, lth));
		else code = error_table_$noentry;
	     end;
	else if search_rule_name = "home_dir"
	then do;
		call user_info_$homedir (pathname);
		call TRY_DIRECTORY (pathname);
	     end;
	else if search_rule_name = "process_dir"
	then call TRY_DIRECTORY (get_pdir_ ());
	else call sub_err_ (0, ME, ACTION_DEFAULT_RESTART, null (), 0, "Invalid search rule name ^a", search_rule_name);
	return;

     end TRY_TO_LOCATE_GATE;
%page;
TRY_DIRECTORY:
     procedure (dir_name);

	dcl     dir_name		 char (*) parameter;

	dcl     mode		 fixed bin (5);
	dcl     type		 fixed bin (2);

	call hcs_$status_minf (dir_name, P_gate_name,	/* no chase */
	     0, type, (0), code);
	if code ^= 0
	then return;

	if type ^= Segment
	then do;
		code = error_table_$noentry;
		return;
	     end;

	call hcs_$get_user_effmode (dir_name, P_gate_name, "" /* self */, -1 /* caller ring */, mode, code);
	if code ^= 0
	then return;

	if mode ^= E_ACCESS_BIN & mode ^= RE_ACCESS_BIN & mode ^= REW_ACCESS_BIN
	then code = error_table_$moderr;

	return;
     end TRY_DIRECTORY;
%page;
TRY_INITIATED_SEGMENTS:
     procedure ();

	dcl     gate_ptr		 ptr;

	call hcs_$fs_get_seg_ptr (P_gate_name, gate_ptr, code);
	if code ^= 0
	then code = error_table_$noentry;
	return;

     end TRY_INITIATED_SEGMENTS;
%page;
TRY_REFERENCING_DIR:
     procedure (ref_ptr);

	dcl     ref_ptr		 ptr parameter;
	dcl     dn		 char (168);
	dcl     ldn		 fixed bin;
	dcl     en		 char (32);

	if ref_ptr = null
	then code = error_table_$noentry;
	else do;
		call hcs_$fs_get_path_name (ref_ptr, dn, ldn, en, code);
		if code ^= 0
		then code = error_table_$noentry;

		else call TRY_DIRECTORY (substr (dn, 1, ldn));
	     end;
	return;

     end TRY_REFERENCING_DIR;

/* format: off */
%page; %include access_mode_values;
%page; %include status_structures;
%page; %include sub_err_flags;
/* format: on */

     end check_gate_access_;
