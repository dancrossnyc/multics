/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cv_acl_:		procedure (aclp, n, line, len, asw);


/*

	This procedure accepts a standard-format access control list entry
	(one only), and formats it for printing, returning the formatted
	string to the caller.  Options allow the mode field, the user name,
	and error message corresponding to the status code to be suppressed.
	It is expected that when extended access is fully implemented, an
	additional argument will specify the acl type.

	Option bit ("asw") definitions:

		bit 1 on		add mode field
		bit 2 on		add error message
		bit 3 on		suppress user name

	Other option bit definitions may be added from time to time, in a
	transparent way, i.e. having the bit set to 0 or omitted will
	result in no change from the previous version of the program.

	P. Bos, May 1972

	Modified Apr. 1973 by Peter B. Kelley		to change acl structure to new
						hcs_ acl primitives.
	Modified Jun. 1973 by P.B. Kelley	          removed "a" bit from ACL defs.
						added cv_dir_acl_ entry and its associated
						mode representations.

*/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	aclp			ptr,		/* pointer to acl array */
	n			fixed bin,	/* array index of acl entry to format */
	line			char(*),		/* formatted output string */
	len			fixed bin,	/* number of significant chars in line */
	asw			bit(*);		/* option bits */

     dcl	check_fs_errcode_		entry (fixed bin(35), char(8) aligned, char(100) aligned);

     dcl (addr, fixed, length, substr)	builtin;

     dcl (e, i, l, ll, lmax)		fixed bin;

     dcl (p, sp, mp)		ptr;

     dcl	sws			bit(3) aligned;	/* fixed-length copy of "asw" */

     dcl	chars			char(i) based(p),	/* based char string */
	dummy			char(8) aligned,	/* passed to check_fs_errcode_ */
	info			char(100) aligned;	/* him too */

     dcl	1 s			based (sp),	/* overlaid on sws */
	 (2 msw			bit(1),		/* non-zero if mode field to be added */
	  2 esw			bit(1),		/* non-zero if error message to be added */
	  2 nsw			bit(1)) unal;	/* non-zero if user name to be suppressed */

     dcl  1 SEG_mode aligned int static,		/* segment mode representations */
        	  2 mode (0:7)		char(4) init (
					"null",	/* "000" */
					"w",	/* "001" */
					"e",	/* "010" */
					"ew",	/* "011" */
					"r",	/* "100" */
					"rw",	/* "101" */
					"re",	/* "110" */
					"rew");	/* "111" */

     dcl  1 DIR_mode aligned int static,		/* directory mode representations */
	  2 mode (0:7)		char(4) init (
					"null",	/* "000" */
					"a",	/* "001" */
					"m",	/* "010" */
					"ma",	/* "011" */
					"s",	/* "100" */
					"sa",	/* "101" */
					"sm",	/* "110" */
					"sma");	/* "111" */

     dcl  1 M based (mp) aligned,			/* for referencing appropriate struc. */
	  2 mode (0:7)		char(4);

     dcl	1 acl (n)			aligned based (aclp),	/* acl entry */
	  2 userid		char(32),		/* user name */
	  2 mode			bit(36),		/* 1-3 "rew", rest 0 */
	  2 pad			bit (36),		/* must be 0 */
	  2 code			fixed bin (35);	/* status code during processing */

     dcl  1 diracl (n)		aligned based (aclp),	/* dir acl entry */
	  2 userid		char(32),		/* user name */
	  2 mode			bit(36),		/* 1-3 "sma", rest 0 */
	  2 code			fixed bin (35);	/* status code during processing */

     dcl acl_code			fixed bin (35);	/* copy of status code */

/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	mp = addr(SEG_mode);			/* point to segment modes */
	e = 1;
	goto COMMON;

cv_dir_acl_:	entry (aclp, n, line, len, asw);

	mp = addr(DIR_mode);			/* point to directory modes */
	e = 2;

COMMON:	line = "";				/* initialize output string */
	l = 0;					/* no chars in it yet */
	lmax = length (line);			/* better not put more in */
	sws = asw;				/* copy option bits */
	sp = addr (sws);				/* and get pointer for overlay */
	if s.msw then do;				/* user wants mode printed */
	     if e = 1 then
		call addchr (mp->M.mode (fixed (substr (acl(n).mode,1,3))) || "      ");/* insert it (field width 10) */
	     else
		call addchr (mp->M.mode(fixed(substr(diracl(n).mode,1,3)))||"      ");/* insert it(field width 10) */
	     end;
	if ^s.nsw then do;				/* if user name not suppressed */
	     ll = l;				/* save current line length for later */
	     if e = 1 then
		p = addr (acl(n).userid);		/* get pointer to name */
	     else
		p = addr ( diracl(n).userid);
	     i = 32;				/* 32 chars long */
	     call adjust (p, i);			/* strip leading & trailing blanks */
	     call addchr (chars);			/* insert into line */
	     end;
	if s.esw then do;				/* user wants error message */
	     if e = 1 
		then acl_code = acl(n).code;		/* copy segment acl code */
	     else 
		acl_code = diracl(n).code;		/* dir acl code in different place */
	     if acl_code ^= 0 then do;		/* looks like an error */
		if ^s.nsw then do;			/* if we had user name, form neat columns */
		     if l - ll < 20 then		/* most user names ought to fit in 20 chars */
			l = ll + 20;		/* add blanks if less than that */
		     else				/* if too big, */
			l = l + 1;		/* add a blank */
		     if l > lmax then do;		/* make sure we didn't run out */
			l = ll + i;		/* reset it if we did */
			go to rtn;		/* and exit */
			end;
		     end;
		call check_fs_errcode_( acl_code, dummy, info);	/* get error message */
		p = addr (info);			/* get pointer to it */
		i = 100;				/* 100 chars long */
		call adjust (p, i);			/* strip blanks */
		call addchr (chars);		/* insert what's left */
		end;
	     end;

rtn:	len = l;					/* give caller length of string */
	return;					/* and return to him */
/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


addchr:		procedure (arg);			/* procedure to add arg to line */


     dcl	arg			char(*);		/* char string to insert into line */

     dcl	t			fixed bin;	/* temp */


	t = length (arg);				/* get size of string to add */
	if t > lmax - l then			/* maximum of lmax chars in message */
	     t = lmax - l;				/* make sure we don't run off end */
	if t ^= 0 then do;				/* still room, put it in */
	     substr (line, l+1, t) = arg;		/* after what's already there */
	     l = l + t;				/* line got longer */
	     end;
	return;					/* done */

	end addchr;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


adjust:		procedure (argp, argl);		/* procedure to strip leading, trailing blanks */


     dcl	argp			ptr,		/* pointer to char string */
	argl			fixed bin;	/* length of string */

     dcl	t			fixed bin;	/* temp */

     dcl	1 c			based (argp),	/* char array overlaid on string */
	  2 char (argl)		char(1) unal;	/* makes better code than substr */


	do t = 1 to argl;				/* scan from front for first non-blank */
	     if c.char(t) ^= " " then			/* non-blank? */
		go to first;			/* yes, exit loop */
	     end;
first:	argp = addr (c.char(t));			/* adjust pointer to point to it */
	argl = argl - t + 1;			/* adjust length */
	if argl ^= 0 then do;			/* if string not all blank */
	     do t = argl to 1 by -1;			/* scan from end for last non-blank */
		if c.char(t) ^= " " then		/* found it? */
		     go to last;			/* yes, skip */
		end;
last:	     argl = t;				/* set new length */
	     end;
	return;					/* bye... */

	end adjust;


	end cv_acl_;
