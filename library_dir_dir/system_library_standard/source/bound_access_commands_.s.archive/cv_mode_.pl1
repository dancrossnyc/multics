/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cv_mode_:		procedure (chars, bits, code);


/*

	This procedure converts standard mode characters (rew, null, n)
	into the corresponding binary attribute string as found in an acl
	entry.  Mode characters in the input string may be in any order,
	and embedded blanks are ignored.  If the string is "null" or "n",
	"0"b is returned.

	P. Bos, May 1972

	Modified by Peter B. Kelley, Apr. 26, 1973 to implement new ACL/RB primitives.
		Effect of change was to change "trewa" modes to "rewa" modes.
	Modified by P. B. Kelley, Jun. 1973 to ignore "a" _s_e_g_m_e_n_t mode representation.
			-added entry cv_dir_mode_ and associated mode representations.

*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	chars			char(*),		/* input string ("rew", "null", "n") */
	bits			bit(*),		/* binary mode corresponding to chars */
	code			fixed bin(35);	/* status code for bad mode */

     dcl (addr, length, null)		builtin;

     dcl	error_table_$bad_acl_mode	ext fixed bin(35);

     dcl (bp, cp, mp)		ptr;

     dcl (i, j, l)		fixed bin;

     dcl	mode			bit(3) aligned;	/* internal temp for "bits" */

     dcl	chr			char(1) aligned;

     dcl  1 s aligned int static,
	  2 mchr (3)			char(1) init ("r", "e", "w");

     dcl  1 d aligned int static,
	  2 mchr (3)			char(1) init ("s", "m", "a");

     dcl  1 M aligned based (mp),
	  2 mchr (3)			char(1);

     dcl	1 b			based (bp),	/* bit array */
	  2 bit(3)		bit(1) unal;

     dcl	1 c			based (cp),	/* char array */
	  2 char(l)		char(1) unal;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	mp = addr(s);				/* point to segment modes */
	goto COMMON;

cv_dir_mode_:	entry (chars, bits, code);

	mp = addr(d);				/* point to directory modes */

COMMON:
	code = 0;					/* reset status code */
	bits,
	mode = ""b;				/* zero return string and bit temporary */
	bp = addr (mode);				/* used to reference string as bit array */
	cp = addr (chars);				/* .. char array */
	if chars ^= "null" then if chars ^= "n" then do;	/* chars is real mode specification */
	     l = length (chars);			/* get length of input string */
	     do i = 1 to l;				/* scan char by char */
		chr = c.char(i);			/* copy char for efficiency */
		if chr = " " then			/* ignore blanks */
		     go to next;			/* get next char */
		do j = 1 to 3;			/* search mode char table */
		     if chr = mp->M.mchr(j) then do;	/* found char in table? */
			b.bit(j) = "1"b;		/* yes, set corresponding bit in mode string */
			go to next;		/* go get next char */
			end;
		     end;
		code = error_table_$bad_acl_mode;	/* illegal character in mode specification */
		return;				/* return with bits = "0"b */
next:		end;
	     bits = mode;				/* give mode string to user */
	     end;
	return;					/* finis */

	end cv_mode_;
