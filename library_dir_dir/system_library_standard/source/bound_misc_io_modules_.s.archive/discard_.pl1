/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* Modified 05/15/84 by Jim Lippard to free attach data on detach */


/****^  HISTORY COMMENTS:
  1) change(86-06-20,Kissel), approve(86-07-23,MCR7455), audit(86-07-31,Ex),
     install(86-08-14,MR12.0-1126):
     Modified to handle all opening modes and IOX operations.  Also added the
     correct cleanup protocol around calls to hcs_$(set reset)_ips_mask.
                                                   END HISTORY COMMENTS */


discard_:
     proc ();

RETURN:
	return;

/* Parameters. */

dcl  actlen fixed bin (21) parameter;
dcl  args (*) char (*) varying parameter;
dcl  buflen fixed (21) parameter;
dcl  bufptr ptr parameter;
dcl  Code fixed bin (35) parameter;
dcl  extend_bit bit (1) aligned parameter;
dcl  infptr ptr parameter;
dcl  Iocb_ptr ptr parameter;
dcl  key char (256) varying parameter;
dcl  len fixed (21) parameter;
dcl  loud_sw bit (1) aligned parameter;
dcl  mode fixed bin parameter;
dcl  newmode char (*) parameter;
dcl  oldmode char (*) parameter;
dcl  order char (*) parameter;
dcl  position_type fixed bin parameter;
dcl  position_n fixed bin (21) parameter;

/* Automatic. */

dcl  blkptr ptr;
dcl  iocb_ptr ptr;
dcl  mask bit (36) aligned;

/* Based. */

dcl  based_area area based;

dcl  1 IOCB aligned like iocb based (iocb_ptr);

dcl  1 blk aligned based (blkptr),
       2 attach char (8) varying,
       2 open char (31) varying;

/* Procedures. */

dcl  com_err_ entry () options (variable);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);

/* Constants. */

dcl  error_table_$bad_mode fixed (35) ext;
dcl  error_table_$end_of_info fixed bin (35) ext static;
dcl  error_table_$no_record fixed (35) ext;
dcl  error_table_$not_detached fixed (35) ext;
dcl  error_table_$wrong_no_of_args fixed (35) ext;
dcl  error_table_$no_operation fixed (35) ext;

/* Built-in. */

dcl  (addr, hbound, lbound, null, substr) builtin;

/* Conditions. */

dcl  any_other condition;
dcl  cleanup condition;

/* End of declarations. */

/* Beginning of entry point ..... discard_discard_attach(Iocb_ptr,args,loud_sw) ..... */

discard_attach:
     entry (Iocb_ptr, args, loud_sw, Code);

	mask = ""b;
	iocb_ptr = Iocb_ptr;
	on cleanup call Cleanup_Handler ();
	on any_other call Any_Other_Handler ();
	call hcs_$set_ips_mask (""b, mask);

	if IOCB.attach_descrip_ptr ^= null () then do;
	     call Cleanup_Handler ();
	     if loud_sw then call com_err_ (error_table_$not_detached, "discard_");
	     Code = error_table_$not_detached;
	     end;
	else do;
	     allocate blk in (get_system_free_area_ () -> based_area) set (blkptr);
	     blk.attach = "discard_";
	     blk.open = "";
	     IOCB.attach_descrip_ptr = addr (blk.attach);
	     IOCB.attach_data_ptr = blkptr;
	     IOCB.detach_iocb = discard_detach;
	     IOCB.open = discard_open;
	     IOCB.modes = iox_$err_not_open;
	     IOCB.control = iox_$err_not_open;
	     call iox_$propagate (iocb_ptr);
	     call hcs_$reset_ips_mask (mask, mask);
	     Code = 0;
	     end;
	call GOTO_RETURN ();

/* End of entry point ..... discard_$discard_attach(Iocb_ptr,args,loud_sw) ..... */





/* Handler for the 'detach_iocb' I/O operation. */

discard_detach:
     entry (Iocb_ptr, Code);
	mask = ""b;
	iocb_ptr = Iocb_ptr;
	on cleanup call Cleanup_Handler ();
	on any_other call Any_Other_Handler ();
	call hcs_$set_ips_mask (""b, mask);
	blkptr = IOCB.attach_data_ptr;
	IOCB.attach_descrip_ptr, IOCB.attach_data_ptr = null ();
	IOCB.detach_iocb = iox_$err_not_attached;
	IOCB.open = iox_$err_not_attached;
	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	Code = 0;
	free blkptr -> blk;
	call GOTO_RETURN ();

/* End of 'detach_iocb' handler. */





/* Handler for the 'open' I/O operation. */

discard_open:
     entry (Iocb_ptr, mode, extend_bit, Code);
	mask = ""b;
	on cleanup call Cleanup_Handler ();
	on any_other call Any_Other_Handler ();
	call hcs_$set_ips_mask (""b, mask);
	iocb_ptr = Iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = IOCB.attach_data_ptr;

	if mode > lbound (iox_modes, 1) & mode < hbound (iox_modes, 1)
	then blk.open = iox_modes (mode);
	else do;
	     call Cleanup_Handler ();
	     Code = error_table_$bad_mode;
	     call GOTO_RETURN ();
	     end;

	if mode = Stream_input then do;
	     IOCB.get_line = discard_get_chars;		/* We always return 0 anyway. */
	     IOCB.get_chars = discard_get_chars;
	     IOCB.position = discard_position;
	     end;

	else if mode = Stream_output then IOCB.put_chars = discard_put_chars;

	else if mode = Stream_input_output then do;
	     IOCB.get_line = discard_get_chars;		/* We always return 0 anyway. */
	     IOCB.get_chars = discard_get_chars;
	     IOCB.put_chars = discard_put_chars;
	     IOCB.position = discard_position;
	     end;

	else if mode = Sequential_input then do;
	     IOCB.read_record = discard_read;
	     IOCB.read_length = discard_read_length;
	     IOCB.position = discard_position;
	     end;

	else if mode = Sequential_output then do;
	     IOCB.write_record = discard_write;
	     IOCB.position = discard_position;
	     end;

	else if mode = Sequential_input_output then do;
	     IOCB.read_record = discard_read;
	     IOCB.read_length = discard_read_length;
	     IOCB.write_record = discard_write;
	     IOCB.position = discard_position;
	     end;

	else if mode = Sequential_update then do;
	     IOCB.read_record = discard_read;
	     IOCB.read_length = discard_read_length;
	     IOCB.write_record = discard_write;
	     IOCB.rewrite_record = discard_write;	/* It's all the same to us. */
	     IOCB.delete_record = discard_delete;
	     IOCB.position = discard_position;
	     end;

	else if mode = Keyed_sequential_input then do;
	     IOCB.read_record = discard_read;
	     IOCB.read_length = discard_read_length;
	     IOCB.position = discard_position;
	     IOCB.seek_key = discard_seek_key;
	     IOCB.read_key = discard_seek_key;		/* They have the same calling sequence. */
	     end;

	else if mode = Keyed_sequential_output then do;
	     IOCB.write_record = discard_write;
	     IOCB.seek_key = discard_seek_key;
	     end;

	else if mode = Keyed_sequential_update then do;
	     IOCB.read_record = discard_read;
	     IOCB.delete_record = discard_delete;
	     IOCB.read_length = discard_read_length;
	     IOCB.position = discard_position;
	     IOCB.seek_key = discard_seek_key;
	     IOCB.read_key = discard_seek_key;		/* They have the same calling sequence. */
	     IOCB.write_record = discard_write;
	     IOCB.rewrite_record = discard_write;	/* It's all the same to us. */
	     end;

	else if mode = Direct_input then do;
	     IOCB.read_record = discard_read;
	     IOCB.read_length = discard_read_length;
	     IOCB.seek_key = discard_seek_key;
	     end;

	else if mode = Direct_output then do;
	     IOCB.write_record = discard_write;
	     IOCB.seek_key = discard_seek_key;
	     end;

	else if mode = Direct_update then do;
	     IOCB.read_record = discard_read;
	     IOCB.rewrite_record = discard_write;	/* It's all the same to us. */
	     IOCB.delete_record = discard_delete;
	     IOCB.read_length = discard_read_length;
	     IOCB.seek_key = discard_seek_key;
	     IOCB.write_record = discard_write;
	     end;

	else ;					/* We already checked the mode above. */

	if extend_bit then blk.open = blk.open || " -extend";

	IOCB.open_descrip_ptr = addr (blk.open);
	IOCB.detach_iocb = iox_$err_not_closed;
	IOCB.open = iox_$err_not_closed;
	IOCB.close = discard_close;
	IOCB.modes = discard_modes;
	IOCB.control = discard_control;

	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);

	Code = 0;
	call GOTO_RETURN ();

/* End of 'open' handler. */





/* Handler for the 'close' I/O operation. */

discard_close:
     entry (Iocb_ptr, Code);
	mask = ""b;
	on cleanup call Cleanup_Handler ();
	on any_other call Any_Other_Handler ();
	call hcs_$set_ips_mask (""b, mask);
	iocb_ptr = Iocb_ptr -> iocb.actual_iocb_ptr;
	blkptr = IOCB.attach_data_ptr;
	IOCB.open_descrip_ptr = null ();
	IOCB.detach_iocb = discard_detach;
	IOCB.open = discard_open;
	IOCB.close = iox_$err_not_open;
	IOCB.get_line = iox_$err_not_open;
	IOCB.get_chars = iox_$err_not_open;
	IOCB.put_chars = iox_$err_not_open;
	IOCB.modes = iox_$err_not_open;
	IOCB.position = iox_$err_not_open;
	IOCB.control = iox_$err_not_open;
	IOCB.read_record = iox_$err_not_open;
	IOCB.write_record = iox_$err_not_open;
	IOCB.rewrite_record = iox_$err_not_open;
	IOCB.delete_record = iox_$err_not_open;
	IOCB.seek_key = iox_$err_not_open;
	IOCB.read_key = iox_$err_not_open;
	IOCB.read_length = iox_$err_not_open;
	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	Code = 0;
	call GOTO_RETURN ();

/* End of 'close' handler. */





/* Handler for the 'get_line' and  'get_chars' I/O operations. */

discard_get_chars:
     entry (Iocb_ptr, bufptr, buflen, actlen, Code);
	actlen = 0;
	Code = error_table_$end_of_info;
	call GOTO_RETURN ();

/* End of 'get_line' and  'get_chars' handlers. */





/* Handler for the 'put_chars' I/O operation. */

discard_put_chars:
     entry (Iocb_ptr, bufptr, buflen, Code);
	Code = 0;
	call GOTO_RETURN ();

/* End of 'put_chars' handler. */





/* Handler for the 'modes' I/O operation. */

discard_modes:
     entry (Iocb_ptr, newmode, oldmode, Code);
	oldmode = "";
	Code = 0;
	call GOTO_RETURN ();

/* End of 'modes' handler. */





/* Handler for the 'position' I/O operation. */

discard_position:
     entry (Iocb_ptr, position_type, position_n, Code);
	Code = 0;
	call GOTO_RETURN ();

/* End of 'position' handler. */





/* Handler for the 'control' I/O operation. */

discard_control:
     entry (Iocb_ptr, order, infptr, Code);
	if order = "io_call"
	then Code = error_table_$no_operation;
	else Code = 0;
	call GOTO_RETURN ();

/* End of 'control' handler. */





/* Handler for the 'read_record' I/O operation. */

discard_read:
     entry (Iocb_ptr, bufptr, buflen, actlen, Code);
	actlen = 0;
	Code = error_table_$end_of_info;
	call GOTO_RETURN ();

/* End of 'read_record' handler. */





/* Handler for the 'write_record' and 'rewrite_record I/O operations. */

discard_write:
     entry (Iocb_ptr, bufptr, buflen, Code);
	Code = 0;
	call GOTO_RETURN ();

/* End of 'write_record' and 'rewrite_record' handlers. */





/* Handler for the 'delete_record' I/O operation. */

discard_delete:
     entry (Iocb_ptr, Code);
	Code = error_table_$no_record;
	call GOTO_RETURN ();

/* End of 'delete_record' handler. */





/* Handler for the 'seek_key' and 'read_key' I/O operations. */

discard_seek_key:
     entry (Iocb_ptr, key, len, Code);
	len = 0;
	Code = error_table_$no_record;
	call GOTO_RETURN ();

/* End of 'seek_key' and 'read_key' handlers. */





/* Handler for the 'read_length' I/O operation. */

discard_read_length:
     entry (Iocb_ptr, actlen, Code);
	actlen = 0;
	Code = error_table_$no_record;
	call GOTO_RETURN ();

/* End of 'read_length' handler. */

/* format: ^indcomtxt */

/*****************************************************************************/
/*							       */
/*   PROCEDURE:  Any_Other_Handler				       */
/*							       */
/*   This procedure restores the IPS mask if necessary and continues to      */
/*   signal whatever the problem was.				       */
/*							       */
/*****************************************************************************/

Any_Other_Handler:
     proc ();

	if substr (mask, 36, 1) then call hcs_$reset_ips_mask (mask, mask);

	call continue_to_signal_ ((0));		/* Ignore the code. */

	return;

     end Any_Other_Handler;

/*****************************************************************************/
/*							       */
/*   PROCEDURE:  Cleanup_Handler				       */
/*							       */
/*   This procedure restores the IPS mask if necessary.		       */
/*							       */
/*****************************************************************************/

Cleanup_Handler:
     proc ();

	if substr (mask, 36, 1) then call hcs_$reset_ips_mask (mask, mask);

	return;

     end Cleanup_Handler;

/*****************************************************************************/
/*							       */
/*   PROCEDURE:  GOTO_RETURN					       */
/*							       */
/*   This procedure only exists to aid debugging, and centralize the return. */
/*							       */
/*****************************************************************************/

GOTO_RETURN:
     proc ();

	goto RETURN;				/* A non-local goto to the main return. */

     end GOTO_RETURN;

/* format: revert */
%page;
%include iocb;
%include iox_dcls;
%include iox_modes;

     end discard_;
