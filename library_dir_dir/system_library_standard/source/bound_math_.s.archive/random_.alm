"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This procedure generates pseudo-random numbers using the 
" Tausworth method.  36 bits are used in the generation.
"
" There are multiple entry points.  For all entry points:
"	The first argument is a fixed binary input argument,
"     which is a non-zero integer.  This is an optional argument--
"     if not provided by caller, a value maintained in internal
"     static is used.  This value, from either source,
"     is the seed for the random number generator.  Its value is
"     modified so that upon return it has the value that should
"     be used as the seed for the next call.
"
" There are a set of entry points with two arguments which
" are used to generate a single random number.  For these:
"	The second argument is a floating point return argument
"     that returns the value of the random number generated.
"
" There are a set of entry points with three arguments which
" are used to generate a sequence of random numbers.  For these:
"	The second argument is an array of single precision
"     floating point numbers.  This array returns a sequence of
"     of random numbers, beginning at the base of the array.
"	The third argument is a fixed binary(17) input
"     argument the specifies the size of the array.
"
"	Coded 1 January 1970 by Roger R. Schell
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	name	random_

" Table of contents
	entry	set_seed
	entry	get_seed
	entry	random_
	entry	uniform
	entry	uniform_ant
	entry	uniform_seq
	entry	uniform_ant_seq
	entry	normal
	entry	normal_ant
	entry	normal_seq
	entry	normal_ant_seq
	entry	exponential
	entry	exponential_seq


	equ	shift,11
	equ	size,36
	equ	expon,0		exponent to convert integer to floating point


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" CODING CONVENTIONS
"
"     XR0	used for return address for specific distribution subroutines
"     XR1	used for return address for generator primitive subroutine
"     XR2	general purpose register for distribution subroutines
"     XR3	usedto indicate: 1=> antithetic variable, 0=> usual
"     XR4	contains the address of the distribution subroutine for this call
"     XR5	index into return array for the next random number
"     XR6	count of the number of values to be generated after current one
"     XR7	general purpose register
"
"     A-reg distribution routine uses to return floating point value
"     Q-reg always has the seed used by primitive generator
"
"     BP	pointer to base of return arguments
"     AP	pointer to the seed
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "




"
"	call random_$set_seed(seed);


set_seed:
	ldq	ap|2,*	qet new seed into Q-reg
	stq	lp|internal_seed	save as new value of seed
	tra	return	return to caller



"
"	call random_$get_seed(seed);


get_seed:
	ldq	lp|internal_seed	get current value of seed
	stq	ap|2,*	return value to caller
	tra	return	return to caller



"
"	call random_$uniform(seed,random_no);


random_:
uniform:
	eax4	uniform_	set XR4 to the address of uniform distribution
	tra	single	this entry generates a single random number



"
"	call random_$uniform_ant(seed,random_no);
"		This entry gives negatively correlated value.



uniform_ant:
	eax4	uniform_ant_	set up the proper distribution
	tra	single	this entry generates a single random number



"
"	call random_$uniform_seq(seed,array,array_size);
"		This entry gives an array of return values



uniform_seq:
	eax4	uniform_	we generate sequence from uniform distribution
	tra	sequence	this entry gives a sequence of numbers



"
"	call random_$uniform_ant_seq(seed,array,array_size);


uniform_ant_seq:
	eax4	uniform_ant_	negatively correlated generator
	tra	sequence	this entry gives a sequence of numbers



"
"	call random_$normal(seed,random_no);


normal:
	eax4	normal_	normal distribution
	eax3	0	not negatively correlated value
	tra	single	this entry gives a single number



"
"	call random_$normal_ant(seed,random_no);


normal_ant:
	eax4	normal_	normal distribution
	eax3	1	negatively correlated
	tra	single	this entry gives single number



"
"	call random_$normal_seq(seed,array,array_size);



normal_seq:
	eax4	normal_	normal distribution
	eax3	0	not negatively correlated value
	tra	sequence	this entry gives a sequence of numbers



"
"	call random_$normal_ant_seq(seed,array,array_size);


normal_ant_seq:
	eax4	normal_	normal distribution
	eax3	1	negatively correlated
	tra	sequence	this entry gives a sequence of numbers



"
"	call random_$exponential(seed,random_no);


exponential:
	eax4	exponential_	exponential distribution
	tra	single	this entry gives a single value



"
"	call random_$exponential_seq(seed,array,array_size);


exponential_seq:
	eax4	exponential_	exponential distribution
	tra	sequence	this entry gives a sequence of numbers



"!!!!!!!!!!--set up the number of values to be generated--!!!!!!!!!!


sequence:
	ldx7	ap|0	twice number of arguments in XR7
	lxl6	ap|0,7*	length of sequence to XR6
	eax7	-2,7	subtract two from XR7
	eax6	-1,6	decrement by one
	tpl	common	if positive value, use it
	tra	return	if zero or negative, return

single:
	ldx7	ap|0	twice number of arguments in XR7
	eax6	0	use sequence of length one

common:
	eppbp	ap|0,7*	set bp to point to first return value
	eax5	0	index into array is in XR5
	eaa	-2,7	upper A-reg has offset of seed in arglist
	ars	19	should be one or zero in A-reg
	xec	set_ap,al	set ap to point to the seed
	szn	ap|0	test for a seed of zero
	tnz	loop	if non-zero continue
	eax4	zero_arg	if zero, generate zero return values

loop:
	tsx0	0,4	go to appropriate generator
	fst	bp|0,5	store value returned by generator
	eax5	1,5	increment index into array
	eax6	-1,6	decrement count of remaining
	tpl	loop	if not done, loop again

return:
	short_return



set_ap:		"get pointer to seed--from caller or default
	eppap	lp|internal_seed	use internal value if not provided in call
	eppap	ap|2,*	seed is the first argument if provided




"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
"$	This is the primitive that actually generates the
"$	random number in integer form from the seed.
"$
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



generate:
	ldq	ap|0	load seed into Q-reg
	qrl	shift	shift right the seed
	ersq	ap|0	exclusive or to the seed
	ldq	ap|0	put same value in Q-reg
	qls	size-shift	shift the result left
	ersq	ap|0	exclusive or to previous result
	tra	0,1	return to the caller of primitive




"!!!!!!!!!!--zero argument generator--!!!!!!!!!!

zero_arg:		"used if input seed is zero
	fld	=0.,du	load a floating point zero
	tra	0,0	return




"!!!!!!!!!!--uniform generator--!!!!!!!!!!

uniform_:
	tsx1	generate	generate one random number
	lda	ap|0	load A-reg with integer value
	arl	1	make it a positive number
	lde	expon,du	convert to floating point
	fad	=0.,du	normalize
	tra	0,0	return


uniform_ant_:
	tsx1	generate	generate one random number
	lda	ap|0	load integer value into A-reg
	arl	1	make it a positive number
	lde	expon,du	convert to floating point
	fneg		"take negative value
	fad	=1.,du	normalize
	tra	0,0	return




"!!!!!!!!!!--exponential generator--!!!!!!!!!!

exponential_:
	eax7	-1	count number of 'runs' with XR7
outer:
	eax7	1,7	add one to count of 'runs'
	eax2	1	use as counter of 'run' length
			"initialize XR2 with a count of one
	tsx1	generate	go to primitive generator
	lda	ap|0	get seed in A-reg
	arl	1	make it a positive number
	lde	expon,du	convert to floating point
	fst	bp|0,5	store it temporarily in return value
inner:
	lda	ap|0	keep value in A-reg for comparison
	tsx1	generate	generate another value
	eax2	1,2	add one to count of 'run'length
	cmpa	ap|0	compare last number with new one
	trc	inner	if still a run down,loop again
	anx2	=1,du	check if 'run' has even length
	tnz	outer	if not even, get another run
	eaa	0,7	no of runs before even length
	lde	=17b25,du	convert to floating point
	fad	bp|0,5	add first random number to number of 'runs'
	tra 	0,0	return




"!!!!!!!!!!--normal distribution generator--!!!!!!!!!!

normal_:
	fld	=0.,du	load a zero
	eax2	12	use XR2 to count 12 times thru loop
n_loop:
	fst	bp|0,5	store the new sum
	tsx1	generate	generate the next random number
	lda	ap|0	load seed into A-reg
	arl	1	make it a positive number
	lde	expon,du	convert to floating point
	fad	bp|0,5	add random number to sum
	eax2	-1,2	decrement counter by one
	tnz	n_loop	accumulate twelve numbers
	fsb	=6.,du	give a mean of zero
	xec	n_norm,3	antithetic if appropriate
	tra	0,0	return

n_norm:
	nop	"o.k. as is if not antithetic
	fneg	"take negative for antithetic





"
"	INTERNAL STATIC DATA
"

	use	.lkstat.
	join	/link/.lkstat.

internal_seed:
	dec	4084114320	"initial internal seed for a new process

	use	main


	end
