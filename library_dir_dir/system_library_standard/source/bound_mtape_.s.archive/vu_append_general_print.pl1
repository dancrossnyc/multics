/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_append_general_print:
append_general_print_vector:
   proc ();

/* DESCRIPTION:

          This entry appends a print vector to a print vector array.
*/

/* HISTORY:
Written by Lindsey Spratt, sometime in 1980?
Modified:
03/10/83 by Lindsey Spratt:  Added a new parameter (now the 4th one) which is
	  used to specify that an existing print_vector is to be added onto.
03/15/83 by Lindsey Spratt:  Added a nosubrg prefix to avoid a compiler bug in
	  assigning from one array to another when the arrays have different
	  extents.
08/30/83 by Lindsey L. Spratt:  Fixed to use vd_error_$dim_already_in_vector.
*/

/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    dimension_name_ptr     ptr;
      dcl	    dimension_name_length  fixed bin;


      dcl	    CODE_ARG_IDX	       fixed bin;
      dcl	    PVA_PTR_ARG_IDX	       fixed bin;
      dcl	    (dim_idx, temp_dim_idx)
			       fixed bin;
      dcl	    values_given	       bit (1) aligned init ("0"b);
      dcl	    is_dimension_value     bit (1) aligned;
      dcl	    old_pva_ptr	       ptr;
      dcl	    vector_idx	       fixed bin;
      dcl	    (vector_slot_idx_ptr, old_print_vector_ptr)
			       ptr init (null);
      dcl	    free_old_print_vector_array_ptr
			       ptr;
      dcl	    arg_list_arg_count     fixed bin;
      dcl	    arg_list_ptr	       ptr;
      dcl	    type		       fixed bin;
      dcl	    packed	       bit (1) aligned;
      dcl	    size		       fixed bin;
      dcl	    ndims		       fixed bin;
      dcl	    scale		       fixed bin;
      dcl	    p_code_ptr	       ptr;
      dcl	    nargs		       fixed bin;
      dcl	    arg_idx	       fixed bin;
      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    vector_slot_idx	       fixed bin (35) based (vector_slot_idx_ptr) aligned;
      dcl	    free_old_print_vector_array
			       bit (1) aligned based (free_old_print_vector_array_ptr);
      dcl	    work_area	       area based (work_area_ptr);
      dcl	    s_fixed_real_template  based fixed bin;
      dcl	    ptr_template	       based ptr;
      dcl	    dimension_name	       based (dimension_name_ptr) char (dimension_name_length);
      dcl	    v_char_template	       based char (size) varying;
      dcl	    char_template	       based char (size);

      dcl	    p_code	       based (p_code_ptr) fixed bin (35);


/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    MYNAME	       init ("vu_append_general_print") char (40) varying internal static
			       options (constant);

      dcl	    (
	    AREA_PTR_ARG_IDX       init (1),
	    SLOT_INCREASE_ARG_IDX  init (2),
	    FREE_OLD_PVA_ARG_IDX   init (3),
	    VECTOR_SLOT_IDX_ARG_IDX
			       init (4),
	    NUMBER_OF_DIMENSIONS_ARG_IDX
			       init (5),
	    MAXIMUM_VALUE_LENGTH_ARG_IDX
			       init (6),
	    NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING
			       init (4),
	    PVA_PTR_ARG_OFFSET_FROM_END
			       init (1),
	    NUMBER_OF_NONVALUE_ARGS_AT_END
			       init (2)
	    )		       fixed bin internal static options (constant);


/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      dcl	    cu_$arg_count	       entry (fixed bin);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$bad_arg   fixed bin (35) ext;
      dcl	    error_table_$fatal_error
			       fixed bin (35) ext;
      dcl	    vd_error_$dim_already_in_vector
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      call cu_$arg_count (nargs);
      arg_list_arg_count = nargs;
      call cu_$arg_list_ptr (arg_list_ptr);

      CODE_ARG_IDX = nargs;
      PVA_PTR_ARG_IDX = nargs - PVA_PTR_ARG_OFFSET_FROM_END;

      call decode_descriptor_ (arg_list_ptr, CODE_ARG_IDX, type, packed, ndims, size, scale);
      if type ^= s_fixed_real_desc
      then call
	    sub_err_ (error_table_$fatal_error, MYNAME, "s", null, 0,
	    "^/^a was called incorrectly.^/The final argument must be fixed bin(35).", MYNAME);

      p_code_ptr = arg_list_ptr -> arg_list.arg_ptrs (CODE_ARG_IDX);

      call decode_descriptor_ (arg_list_ptr, AREA_PTR_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= pointer_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

      work_area_ptr = arg_list_ptr -> arg_list.arg_ptrs (AREA_PTR_ARG_IDX) -> ptr_template;

      call decode_descriptor_ (arg_list_ptr, PVA_PTR_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= pointer_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

      print_vector_array_ptr = arg_list_ptr -> arg_list.arg_ptrs (PVA_PTR_ARG_IDX) -> ptr_template;

      call decode_descriptor_ (arg_list_ptr, SLOT_INCREASE_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= s_fixed_real_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;


      pva_number_of_vector_slots =
         print_vector_array.number_of_vector_slots
         + arg_list_ptr -> arg_list.arg_ptrs (SLOT_INCREASE_ARG_IDX) -> s_fixed_real_template;
      call decode_descriptor_ (arg_list_ptr, FREE_OLD_PVA_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= bit_desc | packed | size ^= 1
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

      free_old_print_vector_array_ptr = arg_list_ptr -> arg_list.arg_ptrs (FREE_OLD_PVA_ARG_IDX);

      call decode_descriptor_ (arg_list_ptr, VECTOR_SLOT_IDX_ARG_IDX, type, packed, ndims, size, scale);
      if type ^= s_fixed_real_desc | packed
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;
      vector_slot_idx_ptr = arg_list_ptr -> arg_list.arg_ptrs (VECTOR_SLOT_IDX_ARG_IDX);
      if vector_slot_idx = 0 | vector_slot_idx < -1 | vector_slot_idx > print_vector_array.number_of_vectors
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;
      else if vector_slot_idx = -1
      then old_print_vector_ptr = null;
      else old_print_vector_ptr = print_vector_array.vector_slot (vector_slot_idx);


      call decode_descriptor_ (arg_list_ptr, NUMBER_OF_DIMENSIONS_ARG_IDX, type, packed, ndims, size, scale);
      if type = s_fixed_real_desc
      then if ^packed
	 then
	    do;
	       values_given = "0"b;
	       pv_number_of_dimensions =
		arg_list_ptr -> arg_list.arg_ptrs (NUMBER_OF_DIMENSIONS_ARG_IDX) -> s_fixed_real_template;
	       call decode_descriptor_ (arg_list_ptr, MAXIMUM_VALUE_LENGTH_ARG_IDX, type, packed, ndims, size, scale);
	       if type = s_fixed_real_desc
	       then if ^packed
		  then pv_maximum_value_length =
			arg_list_ptr -> arg_list.arg_ptrs (MAXIMUM_VALUE_LENGTH_ARG_IDX) -> s_fixed_real_template;
		  else
		     do;
		        p_code = error_table_$bad_arg;
		        return;
		     end;

	    end;
	 else
	    do;
	       p_code = error_table_$bad_arg;
	       return;
	    end;
      else
         do;
	  values_given = "1"b;
	  pv_number_of_dimensions =
	     (nargs - (NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + NUMBER_OF_NONVALUE_ARGS_AT_END)) / 2;
	  pv_maximum_value_length = 0;

	  do arg_idx = NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + 2 to nargs - NUMBER_OF_NONVALUE_ARGS_AT_END by 2;

	     call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);

	     if type = v_char_desc | type = char_desc
	     then
	        do;

		 pv_maximum_value_length =
		    max (pv_maximum_value_length,
		    length (rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template)));
	        end;
	     else
	        do;
		 p_code = error_table_$bad_arg;
		 return;
	        end;
	  end;
         end;

      if old_print_vector_ptr = null
      then
         do;
	  alloc print_vector in (work_area);
	  print_vector_array.number_of_vectors = print_vector_array.number_of_vectors + 1;
	  if print_vector_array.number_of_vectors > print_vector_array.number_of_vector_slots
	  then
	     do;
	        pva_maximum_dimension_name_length = print_vector_array.maximum_dimension_name_length;
	        pva_number_of_dimensions = print_vector_array.number_of_dimensions;
	        old_pva_ptr = print_vector_array_ptr;
	        alloc print_vector_array in (work_area);
	        arg_list_ptr -> arg_list.arg_ptrs (PVA_PTR_ARG_IDX) -> ptr_template = print_vector_array_ptr;
	        print_vector_array.version = PRINT_VECTOR_ARRAY_VERSION_2;
	        print_vector_array.dimension_table = old_pva_ptr -> print_vector_array.dimension_table;
	        print_vector_array.number_of_vectors = old_pva_ptr -> print_vector_array.number_of_vectors;
						/* This number includes the newly created print_vector. */
	        do vector_idx = 1 to print_vector_array.number_of_vectors - 1;
(nosubrg):
		 print_vector_array.vector_slot (vector_idx) =
		    old_pva_ptr -> print_vector_array.vector_slot (vector_idx);
	        end;
	        if free_old_print_vector_array
	        then free old_pva_ptr -> print_vector_array in (work_area);
	     end;
	  print_vector_array.vector_slot (print_vector_array.number_of_vectors) = print_vector_ptr;

	  dim_idx = 0;
         end;
      else
         do;
	  pv_number_of_dimensions = pv_number_of_dimensions + old_print_vector_ptr -> print_vector.number_of_dimensions;
	  pv_maximum_value_length =
	     max (pv_maximum_value_length, old_print_vector_ptr -> print_vector.maximum_value_length);
	  alloc print_vector in (work_area);
	  do dim_idx = 1 to old_print_vector_ptr -> print_vector.number_of_dimensions;
(nosubrg):
	     print_vector.dimension (dim_idx) = old_print_vector_ptr -> print_vector.dimension (dim_idx);
	  end;
	  dim_idx = old_print_vector_ptr -> print_vector.number_of_dimensions;
         end;

      is_dimension_value = "1"b;
      if values_given
      then
         do arg_idx = NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONVALUE_ARGS_AT_END;
	  is_dimension_value = (mod (arg_idx - NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING, 2) = 0);
	  call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
	  if type ^= v_char_desc & type ^= char_desc
	  then
	     do;
	        p_code = error_table_$bad_arg;
	        return;
	     end;
	  else if is_dimension_value
	  then
	     do;
	        print_vector_array.dimension_table (print_vector.dimension (dim_idx).identifier).maximum_value_length =
		 max (print_vector_array.dimension_table (print_vector.dimension (dim_idx).identifier)
		 .maximum_value_length, size);
	        print_vector.dimension (dim_idx).value =
		 rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template);
	     end;
	  else
	     do;
	        dim_idx = dim_idx + 1;
	        dimension_name_ptr = arg_list_ptr -> arg_list.arg_ptrs (arg_idx);
	        dimension_name_length = size;
	        do print_vector.dimension (dim_idx).identifier = 1 to print_vector_array.number_of_dimensions
		 while (print_vector_array.dimension_table (print_vector.dimension (dim_idx).identifier).name
		 ^= dimension_name);
	        end;
	        if print_vector.dimension (dim_idx).identifier > print_vector_array.number_of_dimensions
	        then call
		      vector_util_$append_dimension_print (work_area_ptr, free_old_print_vector_array, dimension_name,
		      print_vector_array_ptr, null, print_vector.dimension (dim_idx).identifier, p_code);

	        do temp_dim_idx = 1 to dim_idx - 1
		 while (print_vector.dimension (temp_dim_idx).identifier
		 ^= print_vector.dimension (dim_idx).identifier);
	        end;
	        if temp_dim_idx < dim_idx
	        then
		 do;
		    p_code = vd_error_$dim_already_in_vector;
		    return;
		 end;

	     end;
         end;
      else
         do;
	  do dim_idx = dim_idx + 1 to print_vector.number_of_dimensions;
	     print_vector.dimension (dim_idx).value = "";
	     print_vector.dimension (dim_idx).identifier = 0;
	  end;
         end;
      if old_print_vector_ptr ^= null
      then
         do;
	  print_vector_array.vector_slot (vector_slot_idx) = print_vector_ptr;
	  free old_print_vector_ptr -> print_vector in (work_area);
	  old_print_vector_ptr = null;
         end;
      return;

%include vu_print_vector_array;
%page;
%include desc_types;
%page;
%include descriptor;
%page;
%include arg_list;
%page;
%include vu_entry_dcls;
   end vu_append_general_print;
