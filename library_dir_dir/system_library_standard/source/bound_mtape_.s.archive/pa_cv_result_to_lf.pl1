/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
pa_cv_result_to_lf:
   proc (p_definition_ptr, p_result_ptr, p_linear_form, p_code);

/* DESCRIPTION:

         This entry converts a result pva into a linear form.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 07/05/83.
Modified:
07/06/83 by Lindsey L. Spratt:  Fixed setting of is_arg_dimension array to set
            "0"b for dimensions which aren't arg_dimensions.
07/08/83 by Lindsey L. Spratt:  Fixed to prefix option values which start with
            "-" with a "-quote ".  Fixed to requote all option values.
08/26/83 by S. Krupp: Changed to only requote option values that don't
            contain reserved command line characters.  Changed to prefix
	  only non-literal option values with "-quote".
09/13/83 by S. Krupp: Commented out -quote facility due to problems
            in making it compatible with the Force_literal facility.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_definition_ptr       ptr;		/*is a pointer to the definition
                                       print_vector_array for the command
                                       named in the result pva.  If this
                                       pointer is null, then a definition is
                                       found by searching the
                                       process_arguments search list.*/
      dcl	    p_result_ptr	       ptr;		/*is a pointer to a result
                                       print_vector_array.*/
      dcl	    p_linear_form	       char (*) varying;	/*is the linear form converted from*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system error code.*/

/* Automatic */

      dcl	    (command_name_id, option_name_identifier, instance_identifier, pv_idx)
			       fixed bin init (-1);
      dcl	    (option_name, instance_count, old_instance_count)
			       char (64) varying init ("");
      dcl	    current_linear_form    char (1024) varying;
      dcl	    result_command_name    char (32) varying init ("");
      dcl	    definition_ptr	       ptr init (null);
      dcl	    work_area_ptr	       ptr init (null);


/* Based */


/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("pa_cv_result_to_lf") char (32) varying internal static options (constant);
      dcl	    UNDEFINED_DIMENSION    init (-1) fixed bin internal static options (constant);
      dcl	    (
	    SPACE_CHAR	       init (" "),
	    TAB_CHAR	       init ("	"),
	    NEWLINE_CHAR	       init ("
")
	    )		       char (1) internal static options (constant);

/* Entry */

      dcl	    process_arguments_$get_definition
			       entry (char (*) var, ptr, ptr, fixed bin (35));
      dcl	    process_arguments_$get_reference_name
			       entry (ptr, char (*) var, char (*) var, char (*) var);

      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);
      dcl	    requote_string_	       entry (char (*)) returns (char (*));

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      dcl	    (
	    error_table_$unimplemented_version,
	    error_table_$bad_arg
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_linear_form = "";
      definition_ptr = p_definition_ptr;
      on cleanup call FINISH;
      if work_area_ptr = null
      then work_area_ptr = get_system_free_area_ ();
      call CHECK_VERSION (p_result_ptr -> print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      call SET_ID_REQUIRED (p_result_ptr, COMMAND_NAME_DIM_NAME, command_name_id);
      call GET_VALUE (p_result_ptr -> print_vector_array.vector_slot (1), command_name_id, result_command_name);

      if definition_ptr = null
      then
         do;
	  call process_arguments_$get_definition (result_command_name, work_area_ptr, definition_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN;
         end;
      call
         CHECK_VERSION (definition_ptr -> print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      call SET_ID_REQUIRED (p_result_ptr, OPTION_NAME_DIM_NAME, option_name_identifier);
      call SET_ID_REQUIRED (p_result_ptr, INSTANCE_DIM_NAME, instance_identifier);

BUILD_LINEAR_FORM_BLOCK:
      begin;
         dcl     blfb_is_arg_dimension	(p_result_ptr -> print_vector_array.number_of_dimensions) bit (1) aligned;

         call FIND_ARG_DIMENSIONS (p_result_ptr, blfb_is_arg_dimension);

BLFB_PRINT_VECTOR_LOOP:
         do pv_idx = 1 to p_result_ptr -> print_vector_array.number_of_vectors;
	  print_vector_ptr = p_result_ptr -> print_vector_array.vector_slot (pv_idx);
	  old_instance_count = instance_count;
	  call GET_VALUE (print_vector_ptr, option_name_identifier, option_name);
	  call GET_VALUE (print_vector_ptr, instance_identifier, instance_count);
	  if instance_count = old_instance_count
	  then call GET_ARG_VALUES (blfb_is_arg_dimension, print_vector_ptr, current_linear_form);
	  else call GET_REFNAME_AND_VALUES (blfb_is_arg_dimension, print_vector_ptr, option_name, current_linear_form);
	  p_linear_form = p_linear_form || " " || current_linear_form;
         end BLFB_PRINT_VECTOR_LOOP;
      end BUILD_LINEAR_FORM_BLOCK;
      call FINISH;
MAIN_RETURN:
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
SET_ID:
   proc (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      dcl	    si_p_pva_ptr	       ptr parameter;
      dcl	    si_p_dim_name	       char (*) varying parameter;
      dcl	    si_p_dim_id	       fixed bin parameter;

      dcl	    si_dim_is_required     bit (1) aligned init ("0"b);

      dcl	    requote_string_	       entry (char (*)) returns (char (*));
      goto SI_JOIN;

SET_ID_REQUIRED:
   entry (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      si_dim_is_required = "1"b;

SI_JOIN:
      do si_p_dim_id = 1 to si_p_pva_ptr -> print_vector_array.number_of_dimensions
         while (si_p_pva_ptr -> print_vector_array.dimension_table (si_p_dim_id).name ^= si_p_dim_name);
      end;
      if si_p_dim_id > si_p_pva_ptr -> print_vector_array.number_of_dimensions
      then if si_dim_is_required
	 then call
	         sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0,
	         "^/The argument processing definition structure must have a ^a dimension in it,
but the one provided does not.", requote_string_ ((si_p_dim_name)));
	 else si_p_dim_id = UNDEFINED_DIMENSION;

   end SET_ID;
%page;
GET_DIM_IDX:
   proc (gdi_p_pv_ptr, gdi_p_identifier, gdi_p_dim_idx);
      dcl	    gdi_p_pv_ptr	       ptr;
      dcl	    gdi_p_identifier       fixed bin;
      dcl	    gdi_p_dim_idx	       fixed bin;

      do gdi_p_dim_idx = 1 to gdi_p_pv_ptr -> print_vector.number_of_dimensions
         while (gdi_p_pv_ptr -> print_vector.dimension (gdi_p_dim_idx).identifier ^= gdi_p_identifier);
      end;
      if gdi_p_dim_idx > gdi_p_pv_ptr -> print_vector.number_of_dimensions
      then gdi_p_dim_idx = UNDEFINED_DIMENSION;
   end GET_DIM_IDX;
%page;
GET_VALUE:
   proc (gv_p_print_vector_ptr, gv_p_dim_identifier, gv_p_dim_value);
      dcl	    gv_p_print_vector_ptr  ptr parameter;
      dcl	    gv_p_dim_identifier    fixed bin parameter;
      dcl	    gv_p_dim_value	       char (*) varying;

      dcl	    gv_dim_idx	       fixed bin init (0);

      call GET_DIM_IDX (gv_p_print_vector_ptr, gv_p_dim_identifier, gv_dim_idx);

      if gv_dim_idx = UNDEFINED_DIMENSION
      then call
	    sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0,
	    "^/All of the vectors in the result print_vector_array must contain the
dimension with identifier ^d.  The current print_vector does not.", gv_p_dim_identifier);
      gv_p_dim_value = gv_p_print_vector_ptr -> print_vector.dimension (gv_dim_idx).value;
   end GET_VALUE;
%page;
FINISH:
   proc;
      if p_definition_ptr = null & definition_ptr ^= null
      then
         do;
	  do pv_idx = 1 to definition_ptr -> print_vector_array.number_of_vectors;
	     print_vector_ptr = definition_ptr -> print_vector_array.vector_slot (pv_idx);
	     if print_vector_ptr ^= null
	     then free print_vector;
	  end;
	  free definition_ptr -> print_vector_array;
         end;
   end FINISH;


ERROR_RETURN:
   proc ();
      call FINISH ();
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
GET_ARG_VALUES:
   proc (gav_p_is_arg_dimension, gav_p_print_vector_ptr, gav_p_value_str);
      dcl	    gav_p_is_arg_dimension (*) bit (1) aligned parameter;
      dcl	    gav_p_print_vector_ptr ptr parameter;
      dcl	    gav_p_value_str	       char (*) varying parameter;

      dcl	    gav_current_value_ptr  ptr init (null);
      dcl	    gav_current_value      based (gav_current_value_ptr) char (sys_info$max_seg_size * 4) varying;

      dcl	    gav_dim_idx	       fixed bin init (0);
      dcl     RESERVED_CHARS	       char(64) var init(SPACE_CHAR || TAB_CHAR || NEWLINE_CHAR || """;[]()|");

      gav_p_value_str = "";
      do gav_dim_idx = 1 to gav_p_print_vector_ptr -> print_vector.number_of_dimensions;

         if gav_p_is_arg_dimension (gav_p_print_vector_ptr -> print_vector.dimension (gav_dim_idx).identifier)
         then
	  do;
	     gav_current_value_ptr = addr (gav_p_print_vector_ptr -> print_vector.dimension (gav_dim_idx).value);
/*	     if index (ltrim (gav_current_value, SPACE_CHAR || TAB_CHAR), "-") = 1
	     then gav_p_value_str = gav_p_value_str || " " || "-quote"; */
	     if search(gav_current_value, RESERVED_CHARS) > 0
	     then gav_p_value_str = gav_p_value_str || " " || requote_string_((gav_current_value));
	     else gav_p_value_str = gav_p_value_str || " " || gav_current_value;
	  end;

      end;
   end GET_ARG_VALUES;
%page;
GET_REFNAME_AND_VALUES:
   proc (grav_p_is_arg_dimension, grav_p_print_vector_ptr, grav_p_option_name, grav_p_linear_form);
      dcl	    grav_p_is_arg_dimension
			       (*) bit (1) aligned parameter;
      dcl	    grav_p_print_vector_ptr
			       ptr parameter;
      dcl	    grav_p_option_name     char (*) varying parameter;
      dcl	    grav_p_linear_form     char (*) varying parameter;

      dcl	    (grav_positive_refname, grav_negative_refname)
			       char (256) varying init ("");

      grav_p_linear_form = "";

      call
         process_arguments_$get_reference_name (definition_ptr, grav_p_option_name, grav_positive_refname,
         grav_negative_refname);
      call GET_ARG_VALUES (grav_p_is_arg_dimension, grav_p_print_vector_ptr, grav_p_linear_form);

      if grav_negative_refname = ""
      then grav_p_linear_form = grav_positive_refname || " " || grav_p_linear_form;
      else if index (grav_p_linear_form, "false") > 0
      then grav_p_linear_form = grav_negative_refname;
      else grav_p_linear_form = grav_positive_refname;
   end GET_REFNAME_AND_VALUES;
%page;
FIND_ARG_DIMENSIONS:
   proc (fad_p_result_ptr, fad_p_is_arg_dimension);
      dcl	    fad_p_result_ptr       ptr parameter;
      dcl	    fad_p_is_arg_dimension (*) bit (1) aligned parameter;

      dcl	    fad_dim_identifier     fixed bin init (0);
      dcl	    fad_dim_name	       char (128) varying init ("");

      fad_p_is_arg_dimension (*) = "1"b;

      do fad_dim_name = COMMAND_NAME_DIM_NAME, OPTION_NAME_DIM_NAME, ORDER_DIM_NAME, INSTANCE_DIM_NAME;
         call SET_ID_REQUIRED (fad_p_result_ptr, fad_dim_name, fad_dim_identifier);
         fad_p_is_arg_dimension (fad_dim_identifier) = "0"b;
      end;
   end FIND_ARG_DIMENSIONS;
%page;
%include sub_err_flags;
%page;
%include vu_print_vector_array;
%page;
%include pa_dim_name_constants;
   end pa_cv_result_to_lf;
