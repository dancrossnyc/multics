/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

mtape_control_: procedure;

/* format: style4 */

/* *	This program is part of the mtape_ I/O module and as such is not
   *	called directly by users, but through the iox_ I/O system.
   *
   *	Modification History:
   *
   *	Created by J. A. Bush 10/05/82
   *	Modified by J. A. Bush 12/01/83 to update error statistics before
   *	gathering information for volume_("" set_)status operations.
*/

/*		ARGUMENT DATA		*/

dcl  arg_iocbp ptr;					/* Input IOCB Pointer */
dcl  arg_order_name char (*);				/* Input control order name */
dcl  arg_info_ptr ptr;				/* Input control order info pointer */
dcl  arg_code fixed bin (35);				/* Return error code */

/*		AUTOMATIC DATA		*/

dcl  iocbp ptr;					/* Auto copy of IOCB pointer */
dcl  order_name char (32);				/* Auto copy of control order name */
dcl  info_ptr ptr;					/* Auto copy of control order info pointer */
dcl  code fixed bin (35);
dcl  (cox, i) fixed bin;
dcl  open bit (1) aligned;
dcl  nvp ptr;
dcl  vol_string char (128);
dcl  short_info char (8) aligned;
dcl  long_info char (100) aligned;

/*		CONSTANT DATA		*/

dcl  myname char (6) int static options (constant) init ("mtape_");
dcl  ORDER_NAMES (16) char (19) int static options (constant) init
	("change_module", "cmod",
	"file_set_status", "fsst",
	"file_status", "fst",
	"force_end_of_volume", "feov",
	"hardware_status", "hwst",
	"ring_in", "rin",
	"volume_set_status", "vsst",
	"volume_status", "vst");

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$no_file fixed bin (35) ext static;
dcl  error_table_$no_operation fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  error_table_$not_closed fixed bin (35) ext static;
dcl  error_table_$not_open fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

dcl  (addr, convert, hbound, lbound, ltrim, null, rtrim, size, substr, sum, unspec) builtin;

/*		EXTERNAL ENTRIES		*/

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  mtape_util_$alloc entry (ptr, fixed bin, ptr, fixed bin (21), ptr);
dcl  mtape_util_$error entry options (variable);
dcl  mtape_util_$get_statistics entry (ptr, fixed bin (35));
dcl  mtape_util_$init_pfm entry (ptr, fixed bin (35));
dcl  mtape_mount_cntl_$demount entry (ptr, fixed bin (35));
dcl  mtape_io_$order entry (ptr, char (*), fixed bin, ptr, fixed bin (35));
dcl  iox_$propagate entry (ptr);

/*		BASED STORAGE		*/

dcl  based_area area based (mtape_data.areap);
dcl  order_arg char (32) varying based (info_ptr);
%page;
/* control - entry to implement the iox_$control entry point */

control: entry (arg_iocbp, arg_order_name, arg_info_ptr, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;	/* copy arguments */
	mtdp = iocbp -> iocb.attach_data_ptr;		/* get ptr to our data structure */
	mtape_data.iocb_ptr = iocbp;			/* save our IOCB ptr */
	maip = mtape_data.attach_info_ptr;
	moip = mtape_data.open_info_ptr;
	code, arg_code = 0;				/* Reset return code */
	if arg_order_name = "io_call" then do;		/* execute order on behalf of io_call? */
	     io_call_infop = arg_info_ptr;		/* yes, set info ptr to io_call structure */
	     order_name = io_call_info.order_name;	/* copy target order */
	     if io_call_info.nargs ^= 0 then		/* if target order has args */
		info_ptr = addr (io_call_info.args (1));/* point to first 1 */
	     else info_ptr = null;			/* allocate any structures in my area */
	end;
	else do;					/* not called from io_call */
	     io_call_infop = null;			/* null => not called from io_call */
	     order_name = arg_order_name;
	     info_ptr = arg_info_ptr;
	end;

/* First call the PFM and see if he wants to handle the control order */

	call mtape_data.order (mtdp, order_name, info_ptr, io_call_infop, code);
	if code ^= error_table_$no_operation then	/* he either did it or */
	     go to CONTROL_OP_END;			/* got another error, return */
	code = 0;					/* give mtape_ proper a chance */

/* PFM passed the buck back to us, does it stop here? */

	if iocbp -> iocb.open_descrip_ptr ^= null then	/* is file open now? */
	     open = "1"b;				/* yes, set flag */
	else open = "0"b;				/* no I/O switch is closed */
	do cox = hbound (ORDER_NAMES, 1) to lbound (ORDER_NAMES, 1) by -1 /* find the right control order */
	     while (order_name ^= ORDER_NAMES (cox));
	end;
	go to CONTROL_OP (cox);			/* go process found control operation */

CONTROL_OP (0):					/* unrecognized by mtape_ */
	code = error_table_$no_operation; code = error_table_$no_operation;
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (1):					/* "change_module" operation */
CONTROL_OP (2):					/* "cmod" operation */
	call CHECK_CLOSED;				/* I/O switch must be closed */
	if info_ptr ^= null then do;			/* Non-null means to "push" a new PFM */
	     if mtape_data.saved_pfm_info_ptr = null then do; /* must allocate a structure */
		allocate mtape_saved_pfm_info in (based_area) set (mspfmip);
		mtape_data.saved_pfm_info_ptr = mspfmip;/* save ptr */
		mtape_saved_pfm_info.version = mtape_saved_pfm_info_version_1; /* and set version */
	     end;
	     mtape_saved_pfm_info.pfm_name = mtape_attach_info.pfm_prefix; /* save the old PFM prefix */
	     mtape_saved_pfm_info.old_pfm_entries = mtape_data.pfm_required_entries; /* and PFM entries */
	     mtape_attach_info.pfm_prefix = order_arg;
	end;
	else do;					/* Null info ptr, this is a "POP" request */
	     mspfmip = mtape_data.saved_pfm_info_ptr;	/* get saved info */
	     mtape_attach_info.pfm_prefix = mtape_saved_pfm_info.pfm_name;
	end;
	call mtape_util_$init_pfm (mtdp, code);		/* search for new PFM */
	if code ^= 0 then do;			/* if some error, restore other PFM */
	     mtape_data.pfm_required_entries = mtape_saved_pfm_info.old_pfm_entries;
	     go to CONTROL_OP_END;
	end;
	free mtape_data.tlb -> mtape_label_record in (based_area); /* free up label buffer */
	mtape_data.tlb = null;			/* this causes PFM to go through initialzation properly */
	call mtape_data.pfm_init (mtdp, code);		/* init the new PFM */
	if code ^= 0 then do;			/* couldn't init it */
	     mtape_data.pfm_required_entries = mtape_saved_pfm_info.old_pfm_entries;
	     go to CONTROL_OP_END;
	end;
	mtape_data.first_file = "0"b;			/* reset for consistency checks */
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (3):					/* "file_set_status" operation */
CONTROL_OP (4):					/* "fsst" operation */
	call CHECK_VERSION (fsst_version_1);		/* check version if user allocated structure */
	if mtape_data.fi_head = null then do;		/* never been opened */
	     code = error_table_$no_file;
	     call mtape_util_$error (mtdp, code,
		"^/The file set has not been opened during this attachment");
	     go to CONTROL_OP_END;
	end;
	if info_ptr = null then do;			/* we have to allocate the structure ourselves */
	     mtape_fsst_nfiles = 0;			/* first we have to determine the # of files */
	     do fi_ptr = mtape_data.fi_head repeat mtape_file_info.next_fi_ptr while (fi_ptr ^= null);
		if mtape_file_info.section = 1 then	/* only count whole files */
		     mtape_fsst_nfiles = mtape_fsst_nfiles + 1; /* increment number of files */
	     end;
	     if mtape_fsst_nfiles = 0 then do;		/* no files processed yet */
		code = error_table_$no_file;		/* set real error code later */
		go to CONTROL_OP_END;
	     end;
	     allocate mtape_fsst in (based_area) set (fsst_ptr); /* allocate the structure */
	     mtape_fsst.version = fsst_version_1;	/* set version number */
	end;
	else fsst_ptr = info_ptr;			/* otherwise use user structure */
	mtape_fsst.file_set_id = mtape_data.fi_head -> mtape_file_info.file_set_id; /* set file set id */
	mtape_fsst.file_type = mtape_data.vs_head -> mtape_vol_set.volume_type; /* set volume type */
	mtape_fsst_nfiles = 0;
	do fi_ptr = mtape_data.fi_head repeat mtape_file_info.next_fi_ptr while (fi_ptr ^= null);
	     if mtape_file_info.section = 1 then do;	/* only count whole files */
		mtape_fsst_nfiles = mtape_fsst_nfiles + 1; /* increment number of files */
		f_statp = addr (mtape_fsst.fs_stat (mtape_fsst_nfiles)); /* set file_status ptr */
		call SET_FILE_STATUS;		/* copy the file status for this file */
	     end;
	end;
	mtape_fsst.nfiles = mtape_fsst_nfiles;		/* set number of files for refer extent */
	if io_call_infop ^= null then do;		/* if called from io_call, display the structure */
	     call io_call_info.report ("File Set Status for ""^a"" file set ""^a"", number of files - ^d.",
		Tape_volume_types (mtape_fsst.file_type), mtape_fsst.file_set_id, mtape_fsst.nfiles);
	     do i = 1 to mtape_fsst.nfiles;		/* iterate through each file */
		f_statp = addr (mtape_fsst.fs_stat (i));/* set ptr to current structure */
		call DISPLAY_FILE_STATUS;		/* do the display for each file */
	     end;
	     free mtape_fsst in (based_area);		/* free the file status structure */
	end;
	else if info_ptr = null then			/* if the user let us allocate the structure */
	     arg_info_ptr = fsst_ptr;			/* return pointer to allocated structure */
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (5):					/* "file_status" operation */
CONTROL_OP (6):					/* "fst" operation */
	call CHECK_VERSION (fst_version_1);		/* check version if user allocated structure */
	if mtape_data.fi_current = null then do;	/* never been opened */
	     code = error_table_$no_file;
	     call mtape_util_$error (mtdp, code,
		"^/The file set has not been opened during this attachment");
	     go to CONTROL_OP_END;
	end;
	if info_ptr = null then do;			/* we have to allocate the structure ourselves */
	     allocate mtape_fst in (based_area) set (fst_ptr); /* allocate the structure */
	     mtape_fst.version = fst_version_1;		/* set version number */
	end;
	else fst_ptr = info_ptr;			/* otherwise use user structure */
	mtape_fst.file_type = mtape_data.vs_head -> mtape_vol_set.volume_type; /* set volume type */
	fi_ptr = mtape_data.fi_current;		/* set up for current file */
	f_statp = addr (mtape_fst.f_stat);		/* set file_status ptr */
	call SET_FILE_STATUS;			/* copy the file status for this file */
	if io_call_infop ^= null then do;		/* if called from io_call, display the structure */
	     call io_call_info.report ("Status of current File for ""^a"" file set",
		Tape_volume_types (mtape_fst.file_type));
	     call DISPLAY_FILE_STATUS;		/* do the display for each file */
	     free mtape_fst in (based_area);		/* free the file status structure */
	end;
	else if info_ptr = null then			/* if the user let us allocate the structure */
	     arg_info_ptr = fst_ptr;			/* return pointer to allocated structure */
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (7):					/* "force_end_of_volume" operation */
CONTROL_OP (8):					/* "feov" operation */
	if ^open |				/* I/O switch must be open for output */
	     (open & mtape_open_info.open_mode ^= Sequential_output &
	     mtape_open_info.open_mode ^= Stream_output) then do;
	     code = error_table_$not_open;		/* set an appropriate error code */
	     call mtape_util_$error (mtdp, code,
		"^/The ""^a"" control operation requires that the I/O switch be open for output",
		order_name);
	end;
	else do;
	     mtape_data.force_end_of_volume = "1"b;	/* simulate EOT marker */
	     mtape_data.arg_buf_ptr = null;		/* set up to flush buffers */
	     mtape_data.arg_buf_len = 0;
	     call mtape_data.write (mtdp, code);	/* flush out buffers, and do volume switch */
	end;
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (9):					/* "hardware_status" operation */
CONTROL_OP (10):					/* "hwst" operation */
	call CHECK_VERSION (hwst_version_1);		/* check version if user allocated structure */
	if info_ptr = null then do;			/* we have to allocate the structure ourselves */
	     allocate mtape_hardware_status in (based_area) set (hwst_ptr); /* allocate the structure */
	     mtape_hardware_status.version = hwst_version_1; /* set version number */
	end;
	else hwst_ptr = info_ptr;			/* otherwise use user structure */
	call SET_HARDWARE_STATUS;			/* copy the hardware status */
	if io_call_infop ^= null then do;		/* if called from io_call, display the structure */
	     call DISPLAY_HARDWARE_STATUS;		/* display last hardware status */
	     free mtape_hardware_status in (based_area);	/* free the file status structure */
	end;
	else if info_ptr = null then			/* if the user let us allocate the structure */
	     arg_info_ptr = hwst_ptr;			/* return pointer to allocated structure */
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (11):					/* "ring_in" operation */
CONTROL_OP (12):					/* "rin" operation */
	call CHECK_CLOSED;				/* I/O switch must be closed */
	if ^mtape_attach_info.ring then do;		/* if a ring already in, this is a NOP */
	     call mtape_util_$alloc (mtdp, MTAPE_ALLOC_STR, null, size (mtape_data) * 4, mtape_data.cmtdp);
	     mtape_data.cmtdp -> mtape_data = mtape_data; /* allocate and copy control structure */
	     mtdp, iocbp -> iocb.attach_data_ptr = mtape_data.cmtdp; /* use copy */
	     call iox_$propagate (iocbp);		/* let iox_ know about iocb change */
	     nvp = mtape_data.vs_current;		/* save current volume ptr */
	     do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (vs_ptr ^= null);
		if mtape_vol_set.mounted then do;	/* if volume currently mounted... */
		     mtape_data.vs_current = vs_ptr;	/* set current volume set ptr */
		     mtape_data.tioi_id = mtape_vol_set.tioi_id; /* just to be sure */
		     call mtape_io_$order (mtdp, "rwnw", 0, null, code); /* rewind volume */
		     call mtape_mount_cntl_$demount (mtdp, code); /* demount the volume */
		end;
	     end;
	     code = 0;
	     mtape_data.lab_bufp = null;		/* avoid invalid ptrs */
	     mtape_data.tioi_id = "0"b;		/* reset this constant */
	     mtape_data.vs_current = nvp;		/* restore current volume ptr */
	     mtape_attach_info.ring = "1"b;		/* and set the write ring flag */
	end;
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (13):					/* "volume_set_status" operation */
CONTROL_OP (14):					/* "vsst" operation */
	call CHECK_VERSION (vsst_version_1);		/* check version if user allocated structure */
	if info_ptr = null then do;			/* we have to allocate the structure ourselves */
	     mtape_vsst_nvolumes = 0;			/* vsrst we have to determine the # of volumes */
	     do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (vs_ptr ^= null);
		mtape_vsst_nvolumes = mtape_vsst_nvolumes + 1; /* increment number of volumes */
	     end;
	     if mtape_vsst_nvolumes = 0 then do;	/* no volumes processed yet */
		code = error_table_$no_operation;	/* set real error code later */
		go to CONTROL_OP_END;
	     end;
	     allocate mtape_vsst in (based_area) set (vsst_ptr); /* allocate the structure */
	     mtape_vsst.version = vsst_version_1;	/* set version number */
	end;
	else vsst_ptr = info_ptr;			/* otherwise use user structure */
	mtape_vsst.volume_type = mtape_data.vs_head -> mtape_vol_set.volume_type; /* set volume type */
	mtape_vsst_nvolumes = 0;
	do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (vs_ptr ^= null);
	     mtape_vsst_nvolumes = mtape_vsst_nvolumes + 1; /* increment number of volumes */
	     v_statp = addr (mtape_vsst.vs_stat (mtape_vsst_nvolumes)); /* set volume status ptr */
	     call SET_VOLUME_STATUS;			/* copy the volume status for this volume */
	end;
	mtape_vsst.nvolumes = mtape_vsst_nvolumes;	/* set number of volumes for refer extent */
	if io_call_infop ^= null then do;		/* if called from io_call, display the structure */
	     call io_call_info.report ("Volume Set Status for ""^a"" volume set, number of volumes - ^d.",
		Tape_volume_types (mtape_vsst.volume_type), mtape_vsst.nvolumes);
	     do i = 1 to mtape_vsst.nvolumes;		/* iterate through each volume */
		v_statp = addr (mtape_vsst.vs_stat (i));/* set ptr to current structure */
		call DISPLAY_VOLUME_STATUS;		/* do the display for each volume */
	     end;
	     free mtape_vsst in (based_area);		/* free the volume status structure */
	end;
	else if info_ptr = null then			/* if the user let us allocate the structure */
	     arg_info_ptr = vsst_ptr;			/* return pointer to allocated structure */
	go to CONTROL_OP_END;			/* take common exit */

CONTROL_OP (15):					/* "volume_status" operation */
CONTROL_OP (16):					/* "vst" operation */
	call CHECK_VERSION (vst_version_1);		/* check version if user allocated structure */
	if info_ptr = null then do;			/* we have to allocate the structure ourselves */
	     allocate mtape_vst in (based_area) set (vst_ptr); /* allocate the structure */
	     mtape_vst.version = vst_version_1;		/* set version number */
	end;
	else vst_ptr = info_ptr;			/* otherwise use user structure */
	mtape_vst.volume_type = mtape_data.vs_head -> mtape_vol_set.volume_type; /* set volume type */
	vs_ptr = mtape_data.vs_current;		/* set up for current volume */
	v_statp = addr (mtape_vst.v_stat);		/* set volume_status ptr */
	call SET_VOLUME_STATUS;			/* copy the volume status for this volume */
	if io_call_infop ^= null then do;		/* if called from io_call, display the structure */
	     call io_call_info.report ("Status of current Volume for ""^a"" volume set",
		Tape_volume_types (mtape_vst.volume_type));
	     call DISPLAY_VOLUME_STATUS;		/* do the display for each volume */
	     free mtape_vst in (based_area);		/* free the volume status structure */
	end;
	else if info_ptr = null then			/* if the user let us allocate the structure */
	     arg_info_ptr = vst_ptr;			/* return pointer to allocated structure */

CONTROL_OP_END:
	arg_code = code;				/* return error code */
	return;
%page;
/* CHECK_VERSION - internal procedure to check the structure version number for user allocated structures */

CHECK_VERSION: proc (req_version);

dcl  req_version char (8);
dcl  1 version_check based (info_ptr) aligned,		/* generic structure to check version number */
       2 version char (8);

	if info_ptr ^= null then			/* if user has allocated his own structure */
	     if version_check.version ^= req_version then do; /* but the version number is wrong */
		code = error_table_$unimplemented_version; /* set appropriate error code */
		go to CONTROL_OP_END;		/* take non-local goto to error return */
	     end;

     end CHECK_VERSION;

/* CHECK_CLOSED - internal procedure to verify that I/O switch is closed */

CHECK_CLOSED: proc;

	if open then do;				/* can't be open */
	     code = error_table_$not_closed;
	     call mtape_util_$error (mtdp, code,
		"^/The ""^a"" control operation requires that the I/O switch be closed.", order_name);
	     go to CONTROL_OP_END;			/* take non-local goto and return */
	end;

     end CHECK_CLOSED;
%page;
/* DISPLAY_HARDWARE_STATUS - internal procedure to display hardware status for io_call */

DISPLAY_HARDWARE_STATUS: proc;

	call io_call_info.report ("^/Last reported hardware status; Description:^/^a",
	     mtape_hardware_status.description);
	call io_call_info.report ("^/I/O Status Words:^-^12.3b  ^12.3b",
	     substr (mtape_hardware_status.iom_status, 1, 36), substr (mtape_hardware_status.iom_status, 37, 36));
	call io_call_info.report ("List Pointer Words:^-^12.3b  ^12.3b",
	     substr (mtape_hardware_status.iom_lpw, 1, 36), substr (mtape_hardware_status.iom_lpw, 37, 36));

     end DISPLAY_HARDWARE_STATUS;
%page;
/* DISPLAY_FILE_STATUS - internal procedure to display file status for each file */

DISPLAY_FILE_STATUS: proc;

dcl  i fixed bin;

	call io_call_info.report ("^/File Number:^-^d", file_status.file_seq);
	call io_call_info.report ("File Name:^-^a", file_status.file_id);
	call io_call_info.report ("File State:^-^[Never opened^;Not open^;Open^;Open with error^]",
	     file_status.file_state + 1);
	if file_status.error_code ^= 0 then do;
	     call convert_status_code_ (file_status.error_code, short_info, long_info);
	     call io_call_info.report ("File Code:^-^w (^a)", file_status.error_code, long_info);
	end;
	vol_string = "";				/* clear out volume name string */
	i = 0;
	do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (i < file_status.end_vol_index);
	     i = i + 1;				/* increment volume index */
	     if i >= file_status.begin_vol_index then do; /* at beginning volume of file? */
		if mtape_vol_set.volume_id ^= "" then	/* if volume id has been set */
		     vol_string = rtrim (vol_string) || " " || mtape_vol_set.volume_id;
		else vol_string = rtrim (vol_string) || " " || mtape_vol_set.volume_name;
	     end;
	end;
	vol_string = ltrim (vol_string);		/* trim off leading white space */
	call io_call_info.report ("File Sections:^-^d", file_status.file_sections);
	call io_call_info.report ("On Volume^[s^]:^-^a", (file_status.file_sections > 1), vol_string);
	if file_status.generation > 0 then		/* if a gereration number exists */
	     call io_call_info.report ("Generation:^-^d^[; Generation Version:^-^d^;^1s^]",
		file_status.generation, (file_status.gen_version > 0), file_status.gen_version);
	if file_status.creation ^= " 00000" then	/* if creation date exists.. */
	     call io_call_info.report ("Creation Date:^-^a", CV_DATE (file_status.creation));
	if file_status.expiration ^= " 00000" then	/* if expiration date exists.. */
	     call io_call_info.report ("Expiration Date:^-^a", CV_DATE (file_status.expiration));
	call io_call_info.report ("File Format:^-^a", file_status.file_format);
	call io_call_info.report ("Block Length:^-^d", file_status.block_len);
	call io_call_info.report ("Record Length:^-^d", file_status.reclen);
	call io_call_info.report ("Recording Mode:^-^a", file_status.recording_mode);
	if file_status.block_count ^= 0 then
	     call io_call_info.report ("Block Count:^-^d", file_status.block_count);
	call io_call_info.report ("Read Errors:^-^d", file_status.read_errors);
	call io_call_info.report ("Write Errors:^-^d", file_status.write_errors);

     end DISPLAY_FILE_STATUS;
%page;
/* SET_FILE_STATUS - internal procedure to  copy the file status for this file */

SET_FILE_STATUS: proc;

dcl  i fixed bin;

	unspec (file_status) = "0"b;			/* clear the structure first */
	file_status.file_id = mtape_file_info.file_id;	/* set appropriate fields */
	file_status.file_seq = mtape_file_info.seq_number;
	file_status.generation = mtape_file_info.generation;
	file_status.gen_version = mtape_file_info.gen_version;
	file_status.creation = mtape_file_info.creation_date;
	file_status.expiration = mtape_file_info.expiration_date;
	file_status.file_format = mtape_file_info.file_code;
	file_status.block_len = mtape_file_info.block_size;
	file_status.reclen = mtape_file_info.record_size;
	file_status.block_count = mtape_file_info.block_count;
	file_status.read_errors = mtape_file_info.read_errors;
	file_status.write_errors = mtape_file_info.write_errors;
	if mtape_file_info.conversion = MTAPE_CV_EBCDIC then /* set proper recording mode */
	     file_status.recording_mode = "EBCDIC";
	else if mtape_file_info.conversion = MTAPE_CV_BCD then
	     file_status.recording_mode = "BCD";
	else if mtape_file_info.conversion = MTAPE_NO_CONVERSION & mtape_file_info.hdw_mode = MTAPE_HWM_NINE then
	     file_status.recording_mode = "ASCII";
	else if mtape_file_info.hdw_mode = MTAPE_HWM_BIN then
	     file_status.recording_mode = "BINARY";
	else file_status.recording_mode = "******";
	i = 0;					/* reset volume count */
	do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (file_status.end_vol_index = 0);
	     i = i + 1;				/* increment volume index */
	     if vs_ptr = mtape_file_info.begin_vs_ptr then
		file_status.begin_vol_index = i;
	     if file_status.begin_vol_index ^= 0 then
		file_status.file_sections = file_status.file_sections + 1;
	     if vs_ptr = mtape_file_info.end_vs_ptr then
		file_status.end_vol_index = i;
	end;
	if mtape_file_info.position_within_file = NOT_POSITIONED_IN_FILE then
	     file_status.file_state = 1;
	else if ^open then
	     file_status.file_state = 1;
	else if mtape_data.error_lock ^= 0 then		/* if an error lock exists.. */
	     file_status.file_state = 3;
	else file_status.file_state = 2;
	file_status.error_code = mtape_data.error_lock;

     end SET_FILE_STATUS;
%page;
/* DISPLAY_VOLUME_STATUS - internal procedure to display volume status for each volume */

DISPLAY_VOLUME_STATUS: proc;

	call io_call_info.report ("^/Volume Name:^-^a", volume_status.volume_name);
	call io_call_info.report ("Volume ID:^-^a", volume_status.volume_id);
	call io_call_info.report ("Mounted:^2-^[Yes^;No^]", volume_status.mounted);
	if volume_status.device_name ^= "" then
	     call io_call_info.report ("On Device:^-^a", volume_status.device_name);
	call io_call_info.report ("Volume Sequence:^-^d", volume_status.volume_index);
	if volume_status.mounts > 0 then do;		/* if volume has ever been mounted */
	     if volume_status.mounts > 1 | ^volume_status.mounted then do; /* if not currently mounted | > 1 mount */
		call io_call_info.report ("Total Volume Error Statistics^[ Across ^d Volume Mounts^;^1s^]:^/",
		     (volume_status.mounts > 1), volume_status.mounts);
		call REPORT_ERR_STATS (addr (volume_status.tot_error_stats));
	     end;
	     if volume_status.mounted then do;		/* if volume currently mounted */
		call io_call_info.report ("Volume Error Statistics For Current Mount:^/");
		call REPORT_ERR_STATS (addr (volume_status.rel_error_stats));
	     end;
	end;

     end DISPLAY_VOLUME_STATUS;
%page;
/* SET_VOLUME_STATUS - internal procedure to  copy the volume status for this volume */

SET_VOLUME_STATUS: proc;

	volume_status.volume_name = mtape_vol_set.volume_name; /* copy volume info */
	volume_status.volume_id = mtape_vol_set.volume_id;
	volume_status.mounted = mtape_vol_set.mounted;
	volume_status.volume_index = mtape_vol_set.volume_index;
	volume_status.device_name = mtape_vol_set.device_name;
	volume_status.mounts = mtape_vol_set.mounts;
	if open & mtape_data.tioi_id = mtape_vol_set.tioi_id then do; /* update error stats */
	     if mtape_open_info.open_mode = Sequential_output |
		mtape_open_info.open_mode = Stream_output then do; /* currently open for output */
		mtape_data.arg_buf_ptr = null;	/* set up to flush out buffers */
		mtape_data.arg_buf_len = 0;
		call mtape_data.write (mtdp, code);	/* flush out buffers */
	     end;
	     call mtape_util_$get_statistics (mtdp, code);/* update error stats */
	end;
	volume_status.tot_error_stats = mtape_vol_set.tot_error_stats;
	volume_status.rel_error_stats = mtape_vol_set.rel_error_stats;

     end SET_VOLUME_STATUS;

/* REPORT_ERR_STATS - internal procedure to format error statistics for io_call */

REPORT_ERR_STATS: proc (esp);

dcl  esp ptr;
dcl  i fixed bin;

	es_ptr = esp;
	call io_call_info.report ("Operation^20tNumber Processed^40tErrors^/");
	if mtape_err_stats.read.operations > 0 then	/* Where any reads done? */
	     call io_call_info.report ("Read^20t^d^40t^d",
		mtape_err_stats.read.operations, mtape_err_stats.read.errors);
	if mtape_err_stats.write.operations > 0 then	/* Where any writes done? */
	     call io_call_info.report ("Write^20t^d^40t^d",
		mtape_err_stats.write.operations, mtape_err_stats.write.errors);
	if mtape_err_stats.orders.operations > 0 then	/* Where any orders done? */
	     call io_call_info.report ("Non-data Xfer Cmds^20t^d^40t^d",
		mtape_err_stats.orders.operations, mtape_err_stats.orders.errors);
	if sum (mtape_err_stats.successful_retry) > 0 then do; /* Do not display unless we have some */
	     call io_call_info.report ("^/Successful Read Error Recovery Stratagy^/");
	     call io_call_info.report ("IDCW Chn Cmd^20tSuccessful Recoverys^/");
	     do i = hbound (mtape_err_stats.successful_retry, 1);
		if mtape_err_stats.successful_retry (i) > 0 then /* only display case if retrys */
		     call io_call_info.report ("^5x3^d^20t^d", i, mtape_err_stats.successful_retry (i));
	     end;
	end;

     end REPORT_ERR_STATS;
%page;
/* SET_HARDWARE_STATUS - internal procedure to obtain last hardware status from
   tape_ioi_ and fill in mtape_hardware_status structure */

SET_HARDWARE_STATUS: proc;

	allocate ths in (based_area) set (ths_ptr);	/* allocate tape_ioi_ status structure */
	ths.version = THS_VERSION_1;			/* set proper version number */
	call tape_ioi_$hardware_status (mtape_data.tioi_id, ths_ptr, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code, "Error from tape_ioi_$hardware_status.");
	     go to CONTROL_OP_END;
	end;
	mtape_hardware_status.description = ths.description; /* now fill in our structure */
	mtape_hardware_status.iom_status = ths.iom;
	mtape_hardware_status.iom_lpw = ths.lpw;
	free ths in (based_area);			/* free up tape_ioi_ structure */

     end SET_HARDWARE_STATUS;
%page;
/* CV_DATE - function to convert julian date (yyddd) to month/day/year */

CV_DATE: proc (julian) returns (char (10) aligned);

dcl  julian char (6) aligned;				/* date in form: " yyddd" */

dcl  clock fixed bin (71),
     (month, day, year) fixed bin,
     (Cmonth, Cday, Cyear) pic "99",
     date_time char (10) aligned,
     code fixed bin (35);

dcl  decode_clock_value_$date_time entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
	fixed bin, fixed bin (71), fixed bin, char (4), fixed bin (35)),
     encode_clock_value_$offsets entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
	fixed bin, fixed bin (71), fixed bin, char (4), fixed bin (71), fixed bin (35));

	year = convert (year, substr (julian, 2, 2));
	day = convert (day, substr (julian, 4, 3));
	call encode_clock_value_$offsets (0, 0, day - 1, year - 1, 0, 0, 0, 0, 0, "gmt", clock, code);
	if code ^= 0 then return ("unknown");
	call decode_clock_value_$date_time (clock, month, day, year, 0, 0, 0, 0, 0, "gmt", code);
	if code ^= 0 then return ("unknown");
	Cmonth = month;
	Cday = day;
	Cyear = year - 1900;
	date_time = Cmonth || "/" || Cday || "/" || Cyear;
	return (date_time);

     end CV_DATE;
%page;
%include iocb;
%page;
%include mtape_data;
%page;
%include mtape_attach_info;
%page;
%include mtape_open_close_info;
%page;
%include mtape_file_info;
%page;
%include mtape_vol_set;
%page;
%include io_call_info;
%page;
%include rcp_volume_formats;

%include mtape_saved_pfm_info;
%page;
%include mtape_file_status;
%page;
%include mtape_volume_status;

%include mtape_err_stats;
%page;
%include mtape_hardware_status;

%include iox_modes;
%page;
%include mtape_label_record;
%page;
%include mtape_constants;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_hw_status;

     end mtape_control_;
