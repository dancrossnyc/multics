/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_init_print_vector_array:
init_print_vector_array:
   proc ();

/* Written by Lindsey Spratt.
Modified:
03/09/82 by Lindsey Spratt:  Changed to use named constants for the position
	  of the arguments.  Added another calling sequence.
*/
/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    names_given	       bit (1) aligned init ("0"b);
      dcl	    arg_list_arg_count     fixed bin;
      dcl	    arg_list_ptr	       ptr;
      dcl	    type		       fixed bin;
      dcl	    packed	       bit (1) aligned;
      dcl	    size		       fixed bin;
      dcl	    ndims		       fixed bin;
      dcl	    scale		       fixed bin;
      dcl	    CODE_ARG_IDX	       fixed bin;
      dcl	    PVA_PTR_ARG_IDX	       fixed bin;
      dcl	    p_code_ptr	       ptr;
      dcl	    nargs		       fixed bin;
      dcl	    arg_idx	       fixed bin;
      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    work_area	       area based (work_area_ptr);
      dcl	    s_fixed_real_template  based fixed bin;
      dcl	    ptr_template	       based ptr;
      dcl	    v_char_template	       based char (size) varying;
      dcl	    char_template	       based char (size);

      dcl	    p_code	       based (p_code_ptr) fixed bin (35);


/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    MYNAME	       init ("vector_util_$init_print_vector_array") char (40) varying internal
			       static options (constant);
      dcl	    (
	    AREA_PTR_ARG_IDX       init (1),
	    NUMBER_OF_SLOTS_ARG_IDX
			       init (2),
	    NUMBER_OF_NONNAME_ARGS_AT_BEGINNING
			       init (2),
	    PVA_PTR_ARG_OFFSET_FROM_END
			       init (1),
	    NUMBER_OF_NONNAME_ARGS_AT_END
			       init (2),
	    NUMBER_OF_DIMENSIONS_ARG_IDX
			       init (3),
	    MAX_DIM_NAME_LEN_ARG_IDX
			       init (4)
	    )		       fixed bin (17) internal static options (constant);

/* Entry */

      dcl	    vector_util_$err_no_operation
			       entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      dcl	    cu_$arg_count	       entry (fixed bin);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$bad_arg   fixed bin (35) ext;
      dcl	    error_table_$fatal_error
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      call cu_$arg_count (nargs);
      arg_list_arg_count = nargs;
      call cu_$arg_list_ptr (arg_list_ptr);
      CODE_ARG_IDX = nargs;
      PVA_PTR_ARG_IDX = nargs - PVA_PTR_ARG_OFFSET_FROM_END;

      call decode_descriptor_ (arg_list_ptr, CODE_ARG_IDX, type, packed, ndims, size, scale);
      if type ^= s_fixed_real_desc
      then call
	    sub_err_ (error_table_$fatal_error, MYNAME, "s", null, 0,
	    "^/^a was called incorrectly.^/The final argument must be fixed bin(35).", MYNAME);

      p_code_ptr = arg_list_ptr -> arg_list.arg_ptrs (CODE_ARG_IDX);
      p_code = 0;

      call decode_descriptor_ (arg_list_ptr, AREA_PTR_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= pointer_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

      work_area_ptr = arg_list_ptr -> arg_list.arg_ptrs (AREA_PTR_ARG_IDX) -> ptr_template;

      call decode_descriptor_ (arg_list_ptr, NUMBER_OF_SLOTS_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= s_fixed_real_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;
      pva_number_of_vector_slots = arg_list_ptr -> arg_list.arg_ptrs (NUMBER_OF_SLOTS_ARG_IDX) -> s_fixed_real_template;

      call decode_descriptor_ (arg_list_ptr, PVA_PTR_ARG_IDX, type, packed, ndims, size, scale);

      if type ^= pointer_desc
      then
         do;
	  p_code = error_table_$bad_arg;
	  return;
         end;

/* All of the arguments except for the vd_info_ptr, 
the max_splitter_len, the return pointer to the input_vector that is defined,
and the final "code" argument, are dimension names.*/

      call decode_descriptor_ (arg_list_ptr, NUMBER_OF_DIMENSIONS_ARG_IDX, type, packed, ndims, size, scale);
      if type = s_fixed_real_desc
      then
         do;
	  pva_number_of_dimensions =
	     arg_list_ptr -> arg_list.arg_ptrs (NUMBER_OF_DIMENSIONS_ARG_IDX) -> s_fixed_real_template;
	  names_given = "0"b;
	  call decode_descriptor_ (arg_list_ptr, MAX_DIM_NAME_LEN_ARG_IDX, type, packed, ndims, size, scale);
	  if type ^= s_fixed_real_desc
	  then
	     do;
	        p_code = error_table_$bad_arg;
	        return;
	     end;
	  pva_maximum_dimension_name_length =
	     arg_list_ptr -> arg_list.arg_ptrs (MAX_DIM_NAME_LEN_ARG_IDX) -> s_fixed_real_template;
         end;
      else
         do;
	  names_given = "1"b;
	  pva_number_of_dimensions = nargs - (NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + NUMBER_OF_NONNAME_ARGS_AT_END);

	  pva_maximum_dimension_name_length = 0;
	  do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END;
	     call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);

	     if type = v_char_desc | type = char_desc
	     then
	        do;
		 pva_maximum_dimension_name_length =
		    max (pva_maximum_dimension_name_length,
		    length (rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template)));
	        end;
	     else
	        do;
		 p_code = error_table_$bad_arg;
		 return;
	        end;
	  end;
         end;

      alloc print_vector_array in (work_area);
      print_vector_array.version = PRINT_VECTOR_ARRAY_VERSION_2;
      print_vector_array.number_of_vectors = 0;
      print_vector_array.dimension_table.descriptor_ptr = null;
      print_vector_array.dimension_table.cv_to_print = vector_util_$err_no_operation;
      print_vector_array.dimension_table.cv_to_typed = vector_util_$err_no_operation;
      print_vector_array.dimension_table.maximum_value_length = 0;
      if names_given
      then
         do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END;
	  call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
	  if type = v_char_desc | type = char_desc
	  then print_vector_array.dimension_table (arg_idx - NUMBER_OF_NONNAME_ARGS_AT_BEGINNING).name =
		rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template);
	  else
	     do;
	        p_code = error_table_$bad_arg;
	        return;
	     end;
         end;
      else print_vector_array.dimension_table.name = "";

      arg_list_ptr -> arg_list.arg_ptrs (PVA_PTR_ARG_IDX) -> ptr_template = print_vector_array_ptr;
      return;

%include vu_print_vector_array;
%page;
%include desc_types;
%page;
%include descriptor;
%page;
%include arg_list;
   end vu_init_print_vector_array;
