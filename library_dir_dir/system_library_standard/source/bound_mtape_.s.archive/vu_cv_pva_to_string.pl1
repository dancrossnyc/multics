/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_cv_pva_to_string:
   proc (p_print_vector_array_ptr, p_pva_string_ptr, p_pva_string_length, p_code);

/* DESCRIPTION:

         This  entry  takes  a print_vector_array as input and produces a bit
     string as output which is suitable for permanent storage, formatted as  a
     pva_string followed by any number of pv_strings.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 07/24/83.
Modified:
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_print_vector_array_ptr
			       ptr;		/*is a pointer to a
                                             print_vector_array.*/
      dcl	    p_pva_string_ptr       ptr;		/*is a pointer to a buffer in
                                             which the pva_string is to be
                                             placed.*/
      dcl	    p_pva_string_length    fixed bin (35);	/*on input, this is the length in
                                             bytes of the pva_string buffer;
                                             on output, this is the length in
                                             bytes of the pva_string
                                             produced.*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system error
                                             code.*/

/* Automatic */

      dcl	    (pva_string_length_in_words, pva_string_buffer_length_in_words)
			       fixed bin (35) init (0);
      dcl	    (dim_idx, vector_idx)  init (0) fixed bin;

/* Based */
/* Builtin */

      dcl	    (addwordno, currentsize, divide, null)
			       builtin;

/* Constant */

      dcl	    BYTES_PER_WORD	       init (4) fixed bin (35) internal static options (constant);

      dcl	    myname	       init ("vu_cv_pva_to_string") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    error_table_$fatal_error
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;

      print_vector_array_ptr = p_print_vector_array_ptr;
      call CHECK_VERSION (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      pva_string_ptr = p_pva_string_ptr;
      pva_string.number_of_dimensions = print_vector_array.number_of_dimensions;
      pva_string.maximum_name_length = print_vector_array.maximum_dimension_name_length;

      pva_string_buffer_length_in_words = divide (p_pva_string_length, BYTES_PER_WORD, 35, 0);
      pva_string_length_in_words = currentsize (pva_string);

      if pva_string_length_in_words > pva_string_buffer_length_in_words
      then call
	    sub_err_ (error_table_$fatal_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/The buffer provided by the caller to hold the pva_string was only ^d words
long, when ^d words are required to hold just the pva_string structure.", pva_string_buffer_length_in_words,
	    pva_string_length_in_words);

      pva_string.version = PVA_STRING_VERSION_1;
      pva_string.number_of_vectors = print_vector_array.number_of_vectors;

      do dim_idx = 1 to print_vector_array.number_of_dimensions;
         pva_string.dimension_table (dim_idx).name = print_vector_array.dimension_table (dim_idx).name;
      end;

      do vector_idx = 1 to print_vector_array.number_of_vectors;

         pv_string_ptr = addwordno (pva_string_ptr, pva_string_length_in_words);
         print_vector_ptr = print_vector_array.vector_slot (vector_idx);

         pv_string.number_of_dimensions = print_vector.number_of_dimensions;
         pv_string.maximum_value_length = print_vector.maximum_value_length;

         do dim_idx = 1 to print_vector.number_of_dimensions;

	  pv_string.dimension (dim_idx).identifier = print_vector.dimension (dim_idx).identifier;
	  pv_string.dimension (dim_idx).value = print_vector.dimension (dim_idx).value;

         end;

         pva_string_length_in_words = pva_string_length_in_words + currentsize (pv_string);

      end;

      p_pva_string_length = BYTES_PER_WORD * pva_string_length_in_words;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include vu_pva_string;
%page;
%include vu_print_vector_array;
   end vu_cv_pva_to_string;
