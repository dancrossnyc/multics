/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
mtape_util_: procedure;

/* format: style4 */

/* *	This program is part of the mtape_ I/O module and as such is not
   *	called directly by users, but through the iox_ I/O system.  This
   *	program implements several common subroutines.
   *
   *	Modification History:
   *
   *	Created by J. A. Bush 10/05/82
   *	Modified by J. A. Bush 01/09/84 to enable referencing dir search rule
   *	 when searching for Per-Format modules
*/

/*		ARGUMENT DATA		*/

dcl  arg_mtdp ptr;					/* Pointer to mtape_data */
dcl  arg_alloc_type fixed bin;			/* Type of structure to allocate */
dcl  arg_prev_ptr ptr;				/* Pointer to previously allocated structure */
dcl  arg_length fixed bin (21);			/* Length of string to allocate */
dcl  arg_return_ptr ptr;				/* Pointer to allocated storage */
dcl  arg_code fixed bin (35);				/* Return error code */
dcl  arg_qcode fixed bin;				/* User query index */

/*		AUTOMATIC DATA		*/

dcl  (prev_ptr, temp_ptr, argp, qep, ep) ptr;
dcl  pfmn char (32);
dcl  (str_length, rs_len) fixed bin (21);
dcl  (alloc_type, i, cdx) fixed bin;
dcl  explain_str char (1024);
dcl  rs_emess char (512);
dcl  answer char (128);
dcl  code fixed bin (35);
dcl  invert_qsw bit (1) aligned;
dcl  1 atec aligned like tec;

/*		CONSTANT DATA		*/

dcl  myname char (6) int static options (constant) init ("mtape_");
dcl  1 EXPLAIN_NO_NEXT_VOLUME int static options (constant),
       2 n_lines fixed bin init (5),
       2 text (5) char (71) unaligned init
	  ("Physical end of volume has been detected on a multi-volume file, but",
	  "no volumes remain in the volume sequence list.  A ""yes"" answer will",
	  "lock the file such that no further I/O operations are possible (i.e.",
	  "the file may only be closed).  A ""no"" answer will cause a further",
	  "query for the next volume name.");

dcl  1 EXPLAIN_LABELED_VOLUME int static options (constant),
       2 n_lines fixed bin init (9),
       2 text (9) char (71) unaligned init
	  ("The indicated volume requires initialization but contains a valid",
	  "volume label of some other type not recognized by the Per Format",
	  "module currently in control.  A ""yes"" answer will cause the volume",
	  "to be initialized with the volume label sequence of the Per-Format",
	  "module in control.  A ""no"" answer will cause one of the following",
	  "actions.  If this is the initial file opening, then the opening will",
	  "be aborted.  If this condition was detected on a subsequent volume",
	  "switch of a multi-volume file, then the file will be locked such that",
	  "further I/O operations are not possible.");

dcl  1 EXPLAIN_UNEXPIRED_VOLUME int static options (constant),
       2 n_lines fixed bin init (4),
       2 text (4) char (71) unaligned init
	  ("It has been determined that the indicated volume must be initialized",
	  "but its first file contains an expiration date which is in the future.",
	  "A ""yes"" answer will allow processing to continue.",
	  "A ""no"" answer will abort the opening.");

dcl  1 EXPLAIN_INCORRECT_VOLUME int static options (constant),
       2 n_lines fixed bin init (6),
       2 text (6) char (71) unaligned init
	  ("The volume name specified by the user and the volume name recorded on",
	  "the indicated volume do not agree. If opening for output, a ""yes""",
	  "answer will cause the volume to be initialized with the volume name",
	  "specified by the user.  If opening for input, a ""yes"" answer will",
	  "cause the descrepency to be ignored and processing will continue.  A",
	  """no"" answer will cause the opening to be aborted.");

dcl  1 EXPLAIN_UNEXPIRED_FILE int static options (constant),
       2 n_lines fixed bin init (5),
       2 text (5) char (71) unaligned init
	  ("The file that is being opened currently exists and must be replaced,",
	  "modified or extended but the recorded files expiration date is in the",
	  "future.  A ""yes"" answer will cause the file labels to be overwritten",
	  "and processing will continue.  A ""no"" answer will abort the file",
	  "opening.");

dcl  1 EXPLAIN_ABORT_FILE int static options (constant),
       2 n_lines fixed bin init (6),
       2 text (6) char (71) unaligned init
	  ("Unrecoverable tape errors have ocurred while attempting to write file",
	  "headers, trailers or tape marks, thus invalidating the file-set",
	  "structure. A ""yes"" answer causes an attempt to be made to delete",
	  "the defective file section.  A ""no"" answer will cause no action",
	  "to be taken.  In either case, the file is locked and no further",
	  "I/O is possible.");

dcl  1 EXPLAIN_NEW_VOLUME int static options (constant),
       2 n_lines fixed bin init (4),
       2 text (4) char (71) unaligned init
	  ("The user is requested to supply the volume name of a new volume",
	  "following a ""no"" answer from a previous ""no_next_volume"" query.",
	  "An optional mount comment may also be supplied.  The expected user",
	  "response must be in the form: ""volume_name -comment STR"".");
dcl  NL char (1) int static options (constant) init ("
");

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$no_next_volume fixed bin (35) ext static;
dcl  error_table_$uninitialized_volume fixed bin (35) ext static;
dcl  error_table_$unexpired_volume fixed bin (35) ext static;
dcl  error_table_$unexpired_file fixed bin (35) ext static;
dcl  error_table_$file_aborted fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

dcl  (addr, codeptr, hbound, index, length, ltrim, null, rtrim, substr, translate) builtin;

/*		EXTERNAL ENTRIES		*/

dcl  tape_ioi_$get_statistics entry (bit (36) aligned, ptr, fixed bin (35));
dcl  tape_ioi_$reset_statistics entry (bit (36) aligned, fixed bin (35));
dcl  mtape_util_$error entry options (variable);
dcl  canon_for_volume_label_ entry (char (*), char (*), char (*) aligned, fixed bin, fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  command_query_ entry () options (variable);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  hcs_$make_entry entry (ptr, char (*), char (*), entry, fixed bin (35));
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));

/*		BASED STORAGE		*/

dcl  based_str char (str_length) based;
dcl  based_area area based (mtape_data.areap);

dcl  1 query_explanation based (qep),			/* command query explanation template */
       2 n_lines fixed bin,				/* number of lines in the explanation text */
       2 text (12) char (71) unaligned;			/* message text array */
%page;
/* alloc - entry to allocate storage for various structures
   *
   *	Usage:
   *
   *	dcl mtape_util_$alloc entry (ptr, fixed bin, ptr, fixed bin (21), ptr);
   *	call mtape_util_$alloc (mtdp, alloc_type, prev_ptr, str_length, return_ptr);
   *
   *	where:
   *	1. mtdp
   *	     is a pointer to the mtape_data structure defined by
   *	     mtape_data.incl.pl1. (INPUT)
   *	2. alloc_type
   *	     is the structure type to be allocated, defined in
   *	     mtape_constants.incl.pl1. (INPUT)
   *	3. prev_ptr
   *	     is a pointer to the previous structure of this type, for types
   *	     1 - 3. If non-null, the previous and next pointers in the
   *	     respective structures will be linked. (INPUT)
   *	4. str_length
   *	     is the string length in characters to be allocated for type 4
   *	     allocation. The parameter is ignored for other allocation types.
   *	     (INPUT)
   *	5. return_ptr
   *	     is a pointer to the allocated storage. (OUTPUT)
*/

alloc: entry (arg_mtdp, arg_alloc_type, arg_prev_ptr, arg_length, arg_return_ptr);
	mtdp = arg_mtdp;				/* copy arguments */
	alloc_type = arg_alloc_type;
	prev_ptr = arg_prev_ptr;
	go to alloc_storage (alloc_type);		/* go do the appropriate allocation */


alloc_storage (1):					/* allocate a volume set structure */
	allocate mtape_vol_set in (based_area) set (temp_ptr); /* that should do it */
	vs_ptr = temp_ptr;				/* initialize the structure */
	mtape_vol_set.version = mtape_vs_version_1;
	mtape_vol_set.mrm_vs_ptr, mtape_vol_set.lrm_vs_ptr = null;
	mtape_vol_set.first_vl_ptr, mtape_vol_set.last_vl_ptr = null;
	mtape_vol_set.volume_name, mtape_vol_set.volume_id = "";
	mtape_vol_set.mount_comment, mtape_vol_set.device_name = "";
	mtape_vol_set.demount_comment = "";
	mtape_vol_set.next_vs_ptr = null;		/* link the structures if possible */
	mtape_vol_set.prev_vs_ptr = prev_ptr;
	if prev_ptr ^= null then do;			/* if user supplied valid prev ptr.. */
	     prev_ptr -> mtape_vol_set.next_vs_ptr = vs_ptr; /* link the previous volume set */
	     mtape_vol_set.volume_index = prev_ptr -> mtape_vol_set.volume_index + 1; /* increment vol sequence */
	end;
	else mtape_vol_set.volume_index = 1;		/* first volume, set to 1 */
	go to alloc_end;

alloc_storage (2):					/* allocate a label record structure */
	allocate mtape_label_record in (based_area) set (temp_ptr); /* that should do it */
	lr_ptr = temp_ptr;				/* initialize the structure */
	mtape_label_record.version = mtape_lr_version_1;
	mtape_label_record.lab_ptr = null;
	mtape_label_record.next_lab_ptr = null;		/* link the structures if possible */
	mtape_label_record.prev_lab_ptr = prev_ptr;
	if prev_ptr ^= null then			/* if user supplied valid prev ptr.. */
	     prev_ptr -> mtape_label_record.next_lab_ptr = lr_ptr; /* link the previous label record */
	go to alloc_end;

alloc_storage (3):					/* allocate a file info structure */
	allocate mtape_file_info in (based_area) set (temp_ptr); /* that should do it */
	fi_ptr = temp_ptr;				/* initialize structure */
	mtape_file_info.version = mtape_fi_version_1;
	mtape_file_info.first_file_lab_ptr, mtape_file_info.last_file_lab_ptr = null;
	mtape_file_info.first_file_trail_ptr, mtape_file_info.last_file_trail_ptr = null;
	mtape_file_info.first_file_section_ptr = null;
	mtape_file_info.begin_vs_ptr, mtape_file_info.end_vs_ptr = null;
	mtape_file_info.file_id, mtape_file_info.file_set_id = "";
	mtape_file_info.creation_date, mtape_file_info.expiration_date = "";
	mtape_file_info.pfm_opt_str (*) = "";
	mtape_file_info.char_size = 9;		/* until told otherwise */
	mtape_file_info.next_fi_ptr = null;		/* link the structures if possible */
	mtape_file_info.prev_fi_ptr = prev_ptr;
	if prev_ptr ^= null then			/* if user supplied valid prev ptr.. */
	     prev_ptr -> mtape_file_info.next_fi_ptr = fi_ptr; /* link the previous file structure */
	go to alloc_end;

alloc_storage (4):					/* allocate storage for a string of bytes */
	str_length = arg_length;			/* copy the length */
	allocate based_str in (based_area) set (temp_ptr);/* that should do it */
	go to alloc_end;

alloc_end:
	arg_return_ptr = temp_ptr;			/* copy the pointer for the user */
	return;					/* thats all folks */
%page;
/* error - entry to display error messages */

error: entry (arg_mtdp, arg_code);			/* externally declared as options (variable) */

	if arg_mtdp -> mtape_data.display_errors then do; /* only display errors if he wants us to */
	     rs_emess = "";				/* pad the message first */
	     call cu_$arg_list_ptr (argp);		/* get ptr to our argument list */
	     call ioa_$general_rs (argp, 3, 4, rs_emess, rs_len, "1"b, "0"b); /* format message */
	     call com_err_ (arg_code, myname, rs_emess);	/* display message */
	end;

	return;
%page;
/* get_statistics - entry to update error statistics counters in vol_set and file_info structures */

get_statistics: entry (arg_mtdp, arg_code);

	mtdp = arg_mtdp;				/* copy args */
	vs_ptr = mtape_data.vs_current;
	fi_ptr = mtape_data.fi_current;

	code, arg_code = 0;
	tape_ioi_error_counts_ptr = addr (atec);	/* set ptr to auto structure */
	tec.version = TEC_VERSION_1;			/* set structure version */
	call tape_ioi_$get_statistics (mtape_data.tioi_id, tape_ioi_error_counts_ptr, code);
	if code ^= 0 then do;			/* if error, probably wrong version */
	     call mtape_util_$error (mtdp, code, "Error from tape_ioi_$get_statistics");
	     go to gs_return;
	end;
	call tape_ioi_$reset_statistics (mtape_data.tioi_id, code); /* reset tape_ioi_ error counters */
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code, "Error from tape_ioi_$reset_statistics");
	     go to gs_return;
	end;

/* Now that we have the current error stats, merge them in with vol_set and file_info structures */

	mtape_vol_set.tot_error_stats.read.errors =
	     mtape_vol_set.tot_error_stats.read.errors + tec.reads.errors;
	mtape_vol_set.tot_error_stats.read.operations =
	     mtape_vol_set.tot_error_stats.read.operations + tec.reads.total;
	mtape_vol_set.tot_error_stats.write.errors =
	     mtape_vol_set.tot_error_stats.write.errors + tec.writes.errors;
	mtape_vol_set.tot_error_stats.write.operations =
	     mtape_vol_set.tot_error_stats.write.operations + tec.writes.total;
	mtape_vol_set.tot_error_stats.orders.errors =
	     mtape_vol_set.tot_error_stats.orders.errors + tec.orders.errors;
	mtape_vol_set.tot_error_stats.orders.operations =
	     mtape_vol_set.tot_error_stats.orders.operations + tec.orders.total;

	mtape_vol_set.rel_error_stats.read.errors =
	     mtape_vol_set.rel_error_stats.read.errors + tec.reads.errors;
	mtape_vol_set.rel_error_stats.read.operations =
	     mtape_vol_set.rel_error_stats.read.operations + tec.reads.total;
	mtape_vol_set.rel_error_stats.write.errors =
	     mtape_vol_set.rel_error_stats.write.errors + tec.writes.errors;
	mtape_vol_set.rel_error_stats.write.operations =
	     mtape_vol_set.rel_error_stats.write.operations + tec.writes.total;
	mtape_vol_set.rel_error_stats.orders.errors =
	     mtape_vol_set.rel_error_stats.orders.errors + tec.orders.errors;
	mtape_vol_set.rel_error_stats.orders.operations =
	     mtape_vol_set.rel_error_stats.orders.operations + tec.orders.total;
	do i = 1 to hbound (mtape_vol_set.tot_error_stats.successful_retry, 1);
	     mtape_vol_set.tot_error_stats.successful_retry (i) = mtape_vol_set.tot_error_stats.successful_retry (i)
		+ tec.successful_retry_strategy (i);
	     mtape_vol_set.rel_error_stats.successful_retry (i) = mtape_vol_set.rel_error_stats.successful_retry (i)
		+ tec.successful_retry_strategy (i);
	end;
	if fi_ptr ^= null then do;			/* update file error statistics? */
	     mtape_file_info.read_errors = mtape_file_info.read_errors + tec.reads.errors;
	     mtape_file_info.write_errors = mtape_file_info.write_errors + tec.writes.errors;
	end;

gs_return:
	arg_code = code;
	return;
%page;
/* init_pfm - entry to select the appropriate Per-Format module and check it for existence and access */

init_pfm: entry (arg_mtdp, arg_code);

	mtdp = arg_mtdp;				/* copy args */
	vs_ptr = mtape_data.vs_current;
	maip = mtape_data.attach_info_ptr;
	code, arg_code = 0;

	if mtape_attach_info.pfm_prefix ^= "" then	/*  if a "-vt" specified by the user */
	     pfmn = mtape_attach_info.pfm_prefix;	/* use user specifed prefix */
	else do;					/* otherwise check RCP designation */
	     if mtape_vol_set.volume_type = Volume_multics_tape | /* is tape one we recognize? */
		mtape_vol_set.volume_type = Volume_gcos_tape |
		mtape_vol_set.volume_type = Volume_ibm_tape |
		mtape_vol_set.volume_type = Volume_ansi_tape then
		pfmn = Tape_volume_types (mtape_vol_set.volume_type); /* yes, form prefix directly */
	     else if mtape_vol_set.volume_type = Volume_unknown_format then /* if readable but unrecognized.. */
		pfmn = "raw";			/* set prefix for the "raw" PFM */
	     else pfmn = mtape_attach_info.default_pfm_prefix; /* Use default prefix */
	end;
	pfmn = translate (pfmn, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"); /* Make it LC */
	mtape_attach_info.pfm_prefix = pfmn;		/* save the PFM prefix */
	if index (pfmn, "_tape_io_") = 0 then		/* if user didn't already do it.. */
	     pfmn = rtrim (pfmn) || "_tape_io_";	/*  complete PFM name */

/* Locate the Per-Format module, using the standard object search rules */

	call hcs_$make_ptr (codeptr (mtape_util_), pfmn, "", ep, code);
	if ep = null then do;			/* if we can't find it complain */
	     call mtape_util_$error (mtdp, code, "Can't find the ""^a"" Per-Format module.", pfmn);
	     arg_code = code;
	     return;
	end;
	mtape_data.pfm_name = pfmn;			/* success, save the PFM name */

/* Make sure all required entry points are there */

	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "pfm_init", mtape_data.pfm_init, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""pfm_init"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "file_open", mtape_data.file_open, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""file_open"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "file_close", mtape_data.file_close, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""file_close"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "read", mtape_data.read, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""read"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "write", mtape_data.write, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""write"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "order", mtape_data.order, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""order"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "decode_file_labels", mtape_data.decode_file_labels, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""decode_file_labels"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;
	call hcs_$make_entry (codeptr (mtape_util_), pfmn, "encode_file_labels", mtape_data.encode_file_labels, code);
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code,
		"Could not find the ""encode_file_labels"" entry point for the ""^a"" Per-Format module.", pfmn);
	     call SAVE_CODE;			/* set return code (if not already set ) */
	end;

	return;
%page;
/* user_query - entry to generate standard user queries for various information */

user_query: entry (arg_mtdp, arg_qcode, arg_code);

	mtdp = arg_mtdp;				/* copy args */
	vs_ptr = mtape_data.vs_current;
	fi_ptr = mtape_data.fi_current;
	maip = mtape_data.attach_info_ptr;
	moip = mtape_data.open_info_ptr;
	mpfmip = mtape_data.pfm_info_ptr;
	rs_emess, answer = "";			/* pad message and answer with blanks */
	invert_qsw = "0"b;				/* yes answer is positive for most */
	arg_code = 0;				/* clear return code for positive response */
	query_info.version = query_info_version_6;	/* set version number */
	query_info.yes_or_no_sw = "1"b;		/* set yes or no switch */
	query_info.prompt_after_explanation = "1"b;
	go to U_QUERY (arg_qcode);			/* ask the right question */

U_QUERY (1):					/* Q_NO_NEXT_VOLUME */
	qep = addr (EXPLAIN_NO_NEXT_VOLUME);		/* set the explaination ptr */
	code = error_table_$no_next_volume;		/* set appropriate error code */
	invert_qsw = "1"b;				/* no answer is the positive in this case */
	call ioa_$rsnnl ("Reached the end of volume on volume ^a.
Do you wish to terminate processing of this volume-set?",
	     rs_emess, rs_len, mtape_vol_set.volume_id);

	go to U_QUERY_COM;

U_QUERY (2):					/* Q_LABELED_VOLUME */
	qep = addr (EXPLAIN_LABELED_VOLUME);		/* set the explaination ptr */
	code = error_table_$uninitialized_volume;	/* set appropriate error code */
	query_info.query_code = 2;			/* set query code of command_question handlers */
	call ioa_$rsnnl ("Volume ^a has a valid ^a volume label.
Do you want to ^[initialize it with a standard ^a volume label^;^1suse this volume for unlabeled output^]? ",
	     rs_emess, rs_len, mtape_vol_set.volume_id, Tape_volume_types (mtape_vol_set.volume_type),
	     mtape_attach_info.labeled, mtape_pfm_info.module_id);
	go to U_QUERY_COM;

U_QUERY (3):					/* Q_UNEXPIRED_VOLUME */
	qep = addr (EXPLAIN_UNEXPIRED_VOLUME);		/* set the explaination ptr */
	code = error_table_$unexpired_volume;		/* set appropriate error code */
	call ioa_$rsnnl ("Volume ^a requires initialization, but contains an unexpired file.
Do you want to initialize it?",
	     rs_emess, rs_len, mtape_vol_set.volume_name);
	go to U_QUERY_COM;

U_QUERY (4):					/* Q_INCORRECT_VOLUME */
	qep = addr (EXPLAIN_INCORRECT_VOLUME);		/* set the explaination ptr */
	code = error_table_$uninitialized_volume;	/* set appropriate error code */
	query_info.query_code = 3;			/* set query code of command_question handlers */
	call ioa_$rsnnl ("Warning: Label for volume ^a contains identifier ^a instead.
Do you want to ^[continue processing^;re-initialize it as the desired volume^]?",
	     rs_emess, rs_len,
	     mtape_vol_set.volume_name, mtape_vol_set.volume_id, (mtape_open_info.open_mode = Sequential_input));
	go to U_QUERY_COM;

U_QUERY (5):					/* Q_UNEXPIRED_FILE */
	qep = addr (EXPLAIN_UNEXPIRED_FILE);		/* set the explaination ptr */
	code = error_table_$unexpired_file;		/* set appropriate error code */
	call ioa_$rsnnl ("Do you want to overwrite the unexpired file ""^a""?",
	     rs_emess, rs_len, mtape_file_info.file_id);
	go to U_QUERY_COM;

U_QUERY (6):					/* Q_ABORT_FILE */
	qep = addr (EXPLAIN_ABORT_FILE);		/* set the explaination ptr */
	code = error_table_$file_aborted;		/* set appropriate error code */
	call ioa_$rsnnl ("Error while writing labels of file ""^a"", section ^d.
The defective file section invalidates the structure of the entire file set.
Do you want to delete the defective section?", rs_emess, rs_len,
	     mtape_file_info.file_id, mtape_file_info.section);
	go to U_QUERY_COM;

U_QUERY_COM:
	query_info.status_code = code;		/* set error code */
	call SET_EXPLANATION;			/* set up the explanation string */
	call command_query_ (addr (query_info), answer, myname, rtrim (rs_emess)); /* ask question */
	if (answer = "no" & ^invert_qsw) | (answer = "yes" & invert_qsw) then
	     arg_code = code;			/* answer was negative, return code */
	else if arg_qcode = Q_NO_NEXT_VOLUME then do;	/* must get new volume name */
	     call alloc (mtdp, MTAPE_ALLOC_VS, mtape_data.vs_tail, 0, vs_ptr); /* allocate vol_set struct. */
	     mtape_data.vs_tail = vs_ptr;
	     answer = "";				/* initialize answer */
	     query_info.yes_or_no_sw = "0"b;		/* not a yes/no answer */
	     query_info.suppress_name_sw = "0"b;
	     query_info.status_code, query_info.query_code = 0;
	     qep = addr (EXPLAIN_NEW_VOLUME);		/* set the explaination ptr */
	     call SET_EXPLANATION;			/* set up the explanation string */
	     code = 1;				/* go through loop at least once */
	     do while (code ^= 0);			/* do it until user gets it right */
		call command_query_ (addr (query_info), answer, myname,
		     "^[(""^a"" incorrect)^/^;^1s^]Enter volume name of next volume (and optional comment).^/",
		     (answer ^= ""), answer);
		if answer ^= "" then do;		/* if we have some answer */
		     cdx = index (answer, " ") - 1;	/* index to end of volume name */
		     if cdx < 0 then		/* if no comment given */
			cdx = length (rtrim (answer));
		     call canon_for_volume_label_ (VOLUME_TYPE (TAPE_VOL_VTYPEX), substr (answer, 1, cdx),
			mtape_vol_set.volume_name, 0, code);
		     if code ^= 0 then		/* if error from canonicalize */
			query_info.status_code = code;
		     else do;			/* now check for comment */
			answer = ltrim (substr (answer, cdx + 1)); /* remove volume name */
			if answer ^= "" then do;	/* we have some comment */
			     if substr (answer, 1, 8) = "-comment" | substr (answer, 1, 4) = "-com" then
				answer = substr (answer, index (answer, " ") + 1); /* strip off control arg */
			     mtape_vol_set.mount_comment = answer; /* copy the mount comment */
			end;
		     end;
		end;
	     end;
	end;
	return;
%page;
/* SET_EXPLANATION - internal procedure to set up the command_query_ explanation string and pointer */

SET_EXPLANATION: proc;

dcl  i fixed bin;

	explain_str = "";
	do i = 1 to query_explanation.n_lines;
	     explain_str = rtrim (explain_str) || query_explanation.text (i) || NL;
	end;
	query_info.explanation_ptr = addr (explain_str);
	query_info.explanation_len = length (rtrim (explain_str));

     end SET_EXPLANATION;

/* SAVE_CODE - internal procedure to set the return error code if not already set */

SAVE_CODE: proc;

	if arg_code = 0 then			/* set return code only if not already set */
	     arg_code = code;

     end SAVE_CODE;
%page;
%include mtape_data;
%page;
%include mtape_attach_info;
%page;
%include mtape_open_close_info;
%page;
%include mtape_pfm_info;
%page;
%include mtape_vol_set;
%page;
%include mtape_label_record;

%include mtape_err_stats;
%page;
%include mtape_file_info;
%page;
%include mtape_constants;
%page;
%include query_info;
%page;
%include rcp_resource_types;
%page;
%include rcp_volume_formats;

%include tape_ioi_error_counts;
%page;
%include iox_modes;

     end mtape_util_;
