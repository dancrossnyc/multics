/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
pa_get_refname:
   proc (p_definition_pva_ptr, p_option_name, p_positive_reference_name, p_negative_reference_name);

/* DESCRIPTION:

         This  entry  returns  the primary name by which the specified option
     can be referenced in a linear form.  If the option is one  which  sets  a
     flag  based  on  whether  it  is referenced by its "positive" name or its
     "negative" name, then this entry returns the primary "positive"  and  the
     primary "negative" reference names.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 06/30/83.
Modified:
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_definition_pva_ptr   ptr;		/*is a pointer to a standard
                                                argument processing
                                                definition.*/
      dcl	    p_option_name	       char (*) varying;	/*is the name of an option for
                                                which the reference name is
                                                desired.*/
      dcl	    p_positive_reference_name
			       char (*) varying;	/*is the primary reference
                                                name for the specified option.
                                                If the option has positive and
                                                negative reference names, then
                                                this is the primary positive
                                                reference name.*/
      dcl	    p_negative_reference_name
			       char (*) varying;	/*is the primary negative
                                                reference name.  If the option
                                                does not have a negative
                                                reference name, this parameter
                                                gets a null value.*/

/* Automatic */

      dcl	    (option_name_identifier, synonym_identifier, negative_form_identifier)
			       fixed bin init (0);
      dcl	    (pv_dim_idx, syn_pv_dim_idx, neg_pv_dim_idx)
			       fixed bin init (0);
      dcl	    print_vector_idx       fixed bin init (0);
      dcl	    (finished, have_found_a_vector_for_the_option)
			       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    UNDEFINED_DIMENSION    init (-1) fixed bin internal static options (constant);
      dcl	    myname	       init ("pa_get_refname") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    error_table_$bad_arg
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      print_vector_array_ptr = p_definition_pva_ptr;
      call CHECK_VERSION (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      call SET_ID_REQUIRED (print_vector_array_ptr, OPTION_NAME_DIM_NAME, option_name_identifier);
      call SET_ID_REQUIRED (print_vector_array_ptr, SYNONYM_DIM_NAME, synonym_identifier);
      call SET_ID (print_vector_array_ptr, NEGATIVE_FORM_DIM_NAME, negative_form_identifier);
      if negative_form_identifier = UNDEFINED_DIMENSION
      then neg_pv_dim_idx = UNDEFINED_DIMENSION;
      else neg_pv_dim_idx = 0;

      p_negative_reference_name, p_positive_reference_name = "";

DEFINITION_LOOP:
      do print_vector_idx = 1 to print_vector_array.number_of_vectors while (^finished);
         print_vector_ptr = print_vector_array.vector_slot (print_vector_idx);
         call GET_DIM_IDX (print_vector_ptr, option_name_identifier, pv_dim_idx);
         if pv_dim_idx ^= UNDEFINED_DIMENSION
         then if print_vector.dimension (pv_dim_idx).value = p_option_name
	    then
FOUND_VECTOR_FOR_OPTION:
	       do;
		have_found_a_vector_for_the_option = "1"b;
		call GET_DIM_IDX (print_vector_ptr, synonym_identifier, syn_pv_dim_idx);
		if syn_pv_dim_idx ^= UNDEFINED_DIMENSION
		then
PROCESS_REFNAME:
		   do;
		      if negative_form_identifier ^= UNDEFINED_DIMENSION
		      then call GET_DIM_IDX (print_vector_ptr, negative_form_identifier, neg_pv_dim_idx);
		      if neg_pv_dim_idx = UNDEFINED_DIMENSION
		      then
		         do;
			  if p_positive_reference_name = ""
			  then p_positive_reference_name = print_vector.dimension (syn_pv_dim_idx).value;
			  finished =
			     (p_negative_reference_name ^= "" | negative_form_identifier = UNDEFINED_DIMENSION);

		         end;
		      else
		         do;
			  if p_negative_reference_name = ""
			  then p_negative_reference_name = print_vector.dimension (syn_pv_dim_idx).value;
			  finished = (p_positive_reference_name ^= "");
		         end;
		   end PROCESS_REFNAME;
	       end FOUND_VECTOR_FOR_OPTION;
	    else finished = have_found_a_vector_for_the_option;
      end DEFINITION_LOOP;
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
SET_ID:
   proc (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      dcl	    si_p_pva_ptr	       ptr parameter;
      dcl	    si_p_dim_name	       char (*) varying parameter;
      dcl	    si_p_dim_id	       fixed bin parameter;

      dcl	    si_dim_is_required     bit (1) aligned init ("0"b);

      dcl	    requote_string_	       entry (char (*)) returns (char (*));
      goto SI_JOIN;

SET_ID_REQUIRED:
   entry (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      si_dim_is_required = "1"b;

SI_JOIN:
      do si_p_dim_id = 1 to si_p_pva_ptr -> print_vector_array.number_of_dimensions
         while (si_p_pva_ptr -> print_vector_array.dimension_table (si_p_dim_id).name ^= si_p_dim_name);
      end;
      if si_p_dim_id > si_p_pva_ptr -> print_vector_array.number_of_dimensions
      then if si_dim_is_required
	 then call
	         sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0,
	         "^/The argument processing definition structure must have a ^a dimension in it,
but the one provided does not.", requote_string_ ((si_p_dim_name)));
	 else si_p_dim_id = UNDEFINED_DIMENSION;

   end SET_ID;
%page;
GET_DIM_IDX:
   proc (gdi_p_pv_ptr, gdi_p_identifier, gdi_p_dim_idx);
      dcl	    gdi_p_pv_ptr	       ptr;
      dcl	    gdi_p_identifier       fixed bin;
      dcl	    gdi_p_dim_idx	       fixed bin;

      do gdi_p_dim_idx = 1 to gdi_p_pv_ptr -> print_vector.number_of_dimensions
         while (gdi_p_pv_ptr -> print_vector.dimension (gdi_p_dim_idx).identifier ^= gdi_p_identifier);
      end;
      if gdi_p_dim_idx > gdi_p_pv_ptr -> print_vector.number_of_dimensions
      then gdi_p_dim_idx = UNDEFINED_DIMENSION;
   end GET_DIM_IDX;
%page;
%include sub_err_flags;
%page;
%include vu_print_vector_array;
%page;
%include pa_dim_name_constants;
   end pa_get_refname;
