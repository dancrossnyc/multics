/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,inddcls,^ifthendo,^indproc,indcom,^indblkcom,declareind8,dclind4 */
mtape_set_defaults: proc ();

     /* DESCRIPTION:

        This command sets default arguments used by the mtape_ I/O module.
        The default arguments, specified in the command line, for a
        particular tape operation and (perhaps) volume type are processed by
        the mtape_ argument processing routine (process_arguments_ for now)
        and are converted to a string representation which is stored in
        the data space of a specified value segment.

     */

     /* HISTORY:

        Written 09/13/83 by S. Krupp.
     */

     /* START OF DECLARATIONS */

     /* Automatic */

          dcl answer char(3) var;
          dcl arg_array_max_length fixed bin(21);
	dcl arg_array_ptr ptr;
          dcl arg_array_size fixed bin;
          dcl arg_list_ptr ptr;
	dcl arg_str_length fixed bin(21);
	dcl arg_str_ptr ptr;
	dcl based_varying_char_ptr ptr;
          dcl code fixed bin(35);
	dcl db_dirname char(168);
	dcl db_entryname char(32);
	dcl db_full_pathname char(168) var;
	dcl db_rel_pathname char(168) var;
	dcl default_arguments_ptr ptr;
	dcl definition_ptr ptr;
	dcl found_option bit(4);
	dcl idx fixed bin;
          dcl nargs fixed bin;
	dcl operation char(32) var;
	dcl program_name char(64) var;
	dcl result_ptr ptr;
          dcl value_seg_ptr ptr;
	dcl volume_type char(32) var;

          dcl 1 auto_area_info like area_info;
	dcl 1 auto_query_info like query_info;

     /* Based */

          dcl arg_array(arg_array_size) char(arg_array_max_length) var based(arg_array_ptr);
	dcl arg_str char(arg_str_length) var based(arg_str_ptr);
	dcl based_varying_char char(sys_info$max_seg_size) var based(based_varying_char_ptr);
          dcl found_option_array(4) bit(1) unaligned based(addr(found_option));
	dcl work_area area based(auto_area_info.areap);

     /* Builtin */

          dcl (addr, divide, hbound, length, max, null, search, unspec) builtin;

     /* Condition */

          dcl cleanup condition;

     /* Entries */

          dcl com_err_ entry() options(variable);
          dcl command_query_ entry() options(variable);
          dcl cu_$arg_count entry (fixed bin, fixed bin(35));
          dcl cu_$arg_list_ptr entry (ptr);
          dcl define_area_ entry (ptr, fixed bin(35));
	dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
	dcl hcs_$append_branch entry (char(*), char(*), fixed bin(5), fixed bin(35));
	dcl initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl ioa_ entry() options(variable);
	dcl ioa_$rsnnl entry() options(variable);
	dcl pathname_ entry (char(*), char(*)) returns(char(168));
	dcl process_arguments_$argument_array entry(char(*), fixed bin, (*) char(*) var, ptr, ptr, ptr, fixed bin(35));
	dcl process_arguments_$argument_list entry(char(*), fixed bin, ptr, fixed bin, ptr, ptr, ptr, fixed bin(35));
	dcl process_arguments_$get_option_value entry options(variable);
	dcl release_area_ entry (ptr);
	dcl requote_string_ entry (char(*)) returns(char(*));
	dcl term_$seg_ptr entry (ptr, fixed bin(35));
	dcl value_$init_seg entry (ptr, fixed bin, ptr, fixed bin(19), fixed bin(35));
	dcl value_$set_data entry (ptr, bit(36) aligned, char(*), ptr, fixed bin(18), ptr, ptr, fixed bin(18), fixed bin(35));

     /* Static */

          dcl (MYNAME init("mtape_set_defaults"),
	     PROGRAM_NAME_PREFIX init("mtape_"),
	     RESERVED_CHARS init(" 	
"";[]()|")					/* SPACE || TAB || NEWLINE || """;[]()|" */
              ) char(32) var int static options(constant);

          dcl (ARG_PROCESSING_MODE init(0),
	     FIRST_ARG_TO_PROCESS init(1)
	    ) fixed bin int static options(constant);

          dcl BIN_PERMANENT_VALUE fixed bin init(0) internal static options(constant);
          dcl PERMANENT_VALUE bit(2) aligned init("01"b) internal static options(constant);
	dcl VALUE_SUFFIX char(5) init("value") internal static options(constant);
	dcl VALUE_SEG_SIZE fixed bin(19) init(0) internal static options(constant);

          dcl (OPERATION_OPTION_IDX init(1),
	     VOLUME_TYPE_OPTION_IDX init(2),
	     PATHNAME_OPTION_IDX init(3),
	     DEFAULT_ARGUMENTS_OPTION_IDX init(4)
             ) fixed bin int static options(constant);

          dcl (OPERATION_OPTION_NAME init("operation"),
	     VOLUME_TYPE_OPTION_NAME init("volume_type"),
	     PATHNAME_OPTION_NAME init("pathname"),
               DEFAULT_ARGUMENTS_OPTION_NAME init("default_arguments")
              ) char(32) var int static options(constant);

          dcl LONG_OPTION_REFNAME(4) char(32) var int static options(constant)
	    init("operation", "-volume_type", "-pathname", "-arguments");

          dcl (ATTACH_IDX init(1),
               OPEN_IDX init(2),
               CLOSE_IDX init(3),
               DETACH_IDX init(4)
              ) fixed bin internal static options(constant);

          dcl OPERATIONS(4) char(6) internal static options(constant)
              init("attach", "open", "close", "detach");

          dcl VOLUME_TYPES(2) char(32) internal static options(constant)
             init("ansi", "ibm");

          dcl (error_table_$bad_arg,
	     error_table_$noarg,
	     error_table_$noentry
	    ) fixed bin(35) ext static;

          dcl sys_info$max_seg_size fixed bin(35) ext static;

     /* Include */

%page;
%include access_mode_values;
%page;
%include area_info;
%page;
%include pa_option_value_list;
%page;
%include pa_value_names;
%page;
%include query_info;

     /* END OF DECLARATIONS */
%page;

     /* Main Procedure */

     /* Initialize */

          value_seg_ptr = null;

	unspec (auto_area_info) = "0"b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.areap = null;
	auto_area_info.owner = MYNAME;
	auto_area_info.size = sys_info$max_seg_size;
	auto_area_info.zero_on_alloc = "1"b;
	auto_area_info.extend = "1"b;

          call cu_$arg_count(nargs, code);
          if code ^= 0
          then call ABORT(code, "Could not get the argument count.", "");

          if nargs = 0
          then call ABORT(0, "Usage ""mtape_set_defaults OPERATION {-control_args} -ag ARGS""", "");

	unspec(auto_query_info) = "0"b;
	auto_query_info.version = query_info_version_5;
	auto_query_info.yes_or_no_sw = "1"b;
	auto_query_info.question_iocbp = null;
	auto_query_info.answer_iocbp = null;
	auto_query_info.explanation_ptr = null;

	on cleanup call CLEANUP();

	call define_area_(addr(auto_area_info), code);
	if code ^= 0
	then call ABORT(code, "Unable to allocate a work area.", "");

  /* Get mtape_set_default's argument list. */

          call cu_$arg_list_ptr(arg_list_ptr);

  /* Process mtape_set_defaults's arguments. */

          call process_arguments_$argument_list((MYNAME), ARG_PROCESSING_MODE,
	   arg_list_ptr, FIRST_ARG_TO_PROCESS, null, auto_area_info.areap,
	   result_ptr, code);
          if code ^= 0
	then call ABORT_SILENT();			/* Error msg already printed. */

  /* Get information needed to process the arguments that are the
     subject of the command line (i.e., the arguments that are
     the defaults for the specified tape processing operation and
     volume type). */

          call process_arguments_$get_option_value(result_ptr,
	   auto_area_info.areap, found_option, OPERATION_OPTION_NAME,
	   operation, VOLUME_TYPE_OPTION_NAME, volume_type,
	   PATHNAME_OPTION_NAME, db_rel_pathname, DEFAULT_ARGUMENTS_OPTION_NAME,
	   default_arguments_ptr);

          if ^found_option_array(OPERATION_OPTION_IDX)
          then call ABORT(error_table_$noarg, "Missing ""^a"" option.",
	   (LONG_OPTION_REFNAME(OPERATION_OPTION_IDX)));

         do idx = 1 to hbound(OPERATIONS, 1) while(OPERATIONS(idx) ^= operation);
          end;

          if idx > hbound(OPERATIONS, 1)
          then call ABORT(error_table_$bad_arg, "Unknown operation specified:  ""^a"".", (operation));

	if ^found_option_array(DEFAULT_ARGUMENTS_OPTION_IDX)
	then call ABORT(error_table_$noarg, "Missing ""^a"" option.",
	   (LONG_OPTION_REFNAME(DEFAULT_ARGUMENTS_OPTION_IDX)));

	if found_option_array(VOLUME_TYPE_OPTION_IDX)
          then do;
               do idx = 1 to hbound(VOLUME_TYPES, 1) while(VOLUME_TYPES(idx) ^= volume_type);
               end;

               if idx > hbound(VOLUME_TYPES, 1)
               then call ABORT(error_table_$bad_arg, "Unknown volume type specified:  ""^a"".", (volume_type));

               if operation = OPERATIONS(ATTACH_IDX) | operation = OPERATIONS(DETACH_IDX)
               then call ABORT(error_table_$bad_arg, "Cannot specify the volume type """ ||
                  volume_type || """ with the ""^a"" operation.", (operation));
          end;

  /* Build the program name from the specified tape processing operation and
     volume type. */
 
          call ioa_$rsnnl("^a.^a^[.^a^;^]", program_name, (0), PROGRAM_NAME_PREFIX,
	   operation, found_option_array(VOLUME_TYPE_OPTION_IDX), volume_type);

  /* Transfer program_name's arguments to an array for processing
     by the mtape_ argument processing routine (process_arguments_). */

          arg_array_size = default_arguments_ptr->option_value_list.number_of_values;
	arg_array_max_length = 0;
	arg_str_length = 0;

	do idx = 1 to arg_array_size;
	     based_varying_char_ptr = default_arguments_ptr->option_value_list.value(idx).ptr;
	     arg_array_max_length = max(arg_array_max_length, length(based_varying_char));
	     if idx ^= 1
	     then arg_str_length = arg_str_length + 1;
	     if search(based_varying_char, RESERVED_CHARS) > 0
	     then arg_str_length = arg_str_length + length(requote_string_((based_varying_char)));
	     else arg_str_length = arg_str_length + length(based_varying_char);
	end;

	alloc arg_array in (work_area) set (arg_array_ptr);
	alloc arg_str in(work_area) set(arg_str_ptr);
	arg_str = "";

	do idx = 1 to arg_array_size;
	     based_varying_char_ptr = default_arguments_ptr->option_value_list.value(idx).ptr;
	     arg_array(idx) = based_varying_char;
	     if idx ^= 1
	     then arg_str = arg_str || " ";
	     if search(based_varying_char, RESERVED_CHARS) > 0
	     then arg_str = arg_str || requote_string_((based_varying_char));
	     else arg_str = arg_str || (based_varying_char);
	end;

  /* Process program_name's arguments. */

          definition_ptr = null;

	call process_arguments_$argument_array((program_name), ARG_PROCESSING_MODE,
	   arg_array, definition_ptr, auto_area_info.areap, result_ptr, code);
	if code ^= 0
	then call ABORT_SILENT();			/* Error msg already printed. */

  /* Now check out the value seg where we will store the user specified
     default arguments.  Create it if necessary. */

          call expand_pathname_$add_suffix((db_rel_pathname), VALUE_SUFFIX, db_dirname, db_entryname, code);
	if code ^= 0
	then call ABORT(code, "^a", (db_rel_pathname));

	db_full_pathname = pathname_(db_dirname, db_entryname);

	call initiate_file_(db_dirname, db_entryname, RW_ACCESS, value_seg_ptr, (0), code);
	if code = error_table_$noentry
	then do;
	     call command_query_(addr(auto_query_info), answer, MYNAME,
	        "The value segment ""^a""^/does not exist." ||
	        "Do you wish to create it?", (db_full_pathname));
	     if answer = "no" | answer = "n"
	     then call ABORT(code, "^a", (db_full_pathname));
	     else call ioa_("Creating ^a.", db_full_pathname);
	     call hcs_$append_branch(db_dirname, db_entryname, RW_ACCESS_BIN, code);
	     if code ^= 0
	     then call ABORT(code, "While creating ^a.", (db_full_pathname));
	     call initiate_file_(db_dirname, db_entryname, RW_ACCESS, value_seg_ptr, (0), code);
	     if code ^= 0
	     then call ABORT(code, "Unable to initiate ^a.", (db_full_pathname));
	     call value_$init_seg(value_seg_ptr, BIN_PERMANENT_VALUE, null, VALUE_SEG_SIZE, code);
	     if code ^= 0
	     then call ABORT(code, "While initiating ^a as a value segment.", (db_full_pathname));
	end;
	else if code ^= 0
	then call ABORT(code, "Unable to initiate ^a.", (db_full_pathname));

  /* Store the linear form (arg_str). */

          call value_$set_data(value_seg_ptr, (PERMANENT_VALUE), DEFAULT_LINEAR_FORM_PREFIX ||
	   "." || program_name, addr(arg_str), divide(length(arg_str) + 3, 4, 17, 0) + 1,
	   null, (null), (0), code);
	if code ^= 0
	then call ABORT(code, "Unable to store the default arguments in ^a", (db_full_pathname));

          call CLEANUP();

RETURN:

          return;
%page;
CLEANUP: proc();

          if auto_area_info.areap ^= null
	then call release_area_(auto_area_info.areap);

	if value_seg_ptr ^= null
	then call term_$seg_ptr(value_seg_ptr, code);

     end CLEANUP;


ABORT: proc (code, msg, msg_arg);

     /* Parameter */

	dcl code fixed bin (35);
	dcl msg char (*);
	dcl msg_arg char (*);

	call com_err_ (code, MYNAME, msg, msg_arg);
	call CLEANUP();

	goto RETURN;

     end ABORT;


ABORT_SILENT: proc();

          call CLEANUP();

	goto RETURN;

     end ABORT_SILENT;

     end mtape_set_defaults;
