/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
mtape_position_: procedure (arg_iocbp, arg_type, arg_n, arg_code);

/* format: style4 */

/* *	This program is part of the mtape_ I/O module and as such is not
   *	called directly by users, but through the iox_ I/O system.
   *	This program contains the entries necessary to implement the
   *	iox_$position and iox_$read_length entries for the mtape_ I/O module.
   *
   *	Modification History:
   *
   *	Created by J. A. Bush 12/13/82
   *	Modified by J. A. Bush 12/01/83 for performance improvements
*/

/*		ARGUMENT DATA		*/

dcl  arg_iocbp ptr;					/* Pointer to our IOCB */
dcl  arg_type fixed bin;				/* Type of positioning to be done */
dcl  arg_n fixed bin (21);				/* Number of elements to position, or the length of record */
dcl  arg_code fixed bin (35);				/* Return error code */

/*		AUTOMATIC DATA		*/

dcl  code fixed bin (35);
dcl  (i, tot_rcds, fwd_rcds, n_its, n_chars, n, rcd_len) fixed bin (21);
dcl  (j, idx) fixed bin;
dcl  found bit (1) aligned;

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$no_operation fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

dcl  (abs, addr, hbound, lbound, null, sum) builtin;

/*		EXTERNAL ENTRIES		*/

dcl  mtape_io_$order entry (ptr, char (*), fixed bin, ptr, fixed bin (35));
dcl  mtape_io_$read_block entry (ptr, fixed bin (35));

/*		BASED DATA		*/

%page;
/* Start of the mtape_position_ entry. This implements the iox_$position entry */

	call SETUP;				/* get things set up */
	if arg_type < -1 | arg_type > 3 |
	     (arg_type = 3 & mtape_open_info.open_mode ^= Stream_input) then do; /* Invalid type? */
	     arg_code = error_table_$no_operation;	/* yes, can't do this type of positioning */
	     return;
	end;
	n = abs (arg_n);				/* get the absolute value of arg_n */
	go to action (arg_type);			/* go do appropriate positioning */

action (-1):					/* Position to beginning of file */
	mtape_close_info.position = 1;		/* simulate closing the file, and position  to BOF */
	call mtape_data.file_close (mtdp, code);	/* call the PFM entry to close the file */
	go to position_exit;

action (+1):					/* Position to end of file */
	mtape_close_info.position = 2;		/* simulate closing the file, and position  to EOF */
	call mtape_data.file_close (mtdp, code);	/* call the PFM entry to close the file */
	go to position_exit;

action (0):					/* Position fwd or backward arg_n records  */
	if mtape_open_info.open_mode = Stream_input | mtape_open_info.open_mode = Stream_input_output then do;
	     code = error_table_$no_operation;		/* Type 0 not supported for Stream I/O */
	     go to position_exit;
	end;
	if arg_n = 0 then				/* if nothing to do, return */
	     go to position_exit;
	if arg_n > 0 then				/* position fwd n records  */
	     call FORWARD_SPACE (n);
	else call BACKSPACE (n);			/* backspace n records  */
	go to position_exit;

action (2):					/* position to absolute record or character */
	if n = mtape_data.tot_lrec then ;		/* we are there now */
	else if n > mtape_data.tot_lrec then do;	/* position forward from this point */
	     fwd_rcds = n - mtape_data.tot_lrec;
	     call FORWARD_SPACE (fwd_rcds);		/* go forward delta amount */
	end;
	else do;					/* must backspace to get there */
	     n = mtape_data.tot_lrec - n;		/* adjust count */
	     call BACKSPACE (n);			/* and backup this many records */
	end;
	go to position_exit;

action (3):					/* position fwd arg_n characters (stream_input only) */
	call FORWARD_SPACE (n);			/* this should do it */

position_exit:
	arg_code = code;				/* copy return error code */
	return;
%page;
/* The following entry implements the iox_$read_length entry for mtape_ */

read_length: entry (arg_iocbp, arg_n, arg_code);

	call SETUP;				/* get things set up */
	mtape_data.arg_buf_ptr = null;		/* don't have a buffer */
	mtape_data.arg_buf_len = 0;
	call mtape_data.read (mtdp, code);		/* read the next logical record */
	arg_n = mtape_data.arg_rec_len;		/* copy length for user */
	if code = 0 then				/* only reposition if no error */
	     call BACKSPACE (1);			/* yes, must backspace a block */
	arg_code = code;				/* copy return error code */
	return;
%page;
/* SETUP - internal procedure to initialize our processing enviornment */

SETUP: proc;

	mtdp = arg_iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get ptr to our control structure */
	fi_ptr = mtape_data.fi_current;		/* and pointer to our current file structure */
	moip = mtape_data.open_info_ptr;
	mcip = mtape_data.close_info_ptr;
	code = 0;					/* reset error code */

     end SETUP;

/* FORWARD_SPACE - internal procedure to position forward desired records or chars */

FORWARD_SPACE: proc (fn);

dcl  fn fixed bin (21);

	if mtape_open_info.open_mode = Sequential_input | mtape_open_info.open_mode = Sequential_input_output then do;
	     n_its = fn;				/* reading records, set number of iterations */
	     mtape_data.arg_buf_len = 0;		/* and characters to read to 0 */
	end;
	else do;					/* Stream_input or Stream_input_output */
	     n_its = 1;				/* set iterations to 1 and */
	     mtape_data.arg_buf_len = fn;		/* characters to read forward */
	end;
	mtape_data.arg_buf_ptr = null;		/* We don't have a buffer for data */
	do i = 1 to n_its while (code = 0);		/* go forward desired number of records */
	     call mtape_data.read (mtdp, code);
	end;

     end FORWARD_SPACE;
%page;
/* BACKSPACE - internal procedure to position backwards desired records or chars */

BACKSPACE: proc (bn);

dcl  bn fixed bin (21);

	if bn <= hbound (mtape_data.lrec_rrc.block_no, 1) + 1 then do; /*  Record in lrec history? */
	     idx = mtape_data.lrec_rrcx - 1;		/* yes, repostion to apropriate log record */
	     do i = 1 to bn;
		if i ^= bn then do;
		     idx = idx - 1;
		     if idx < lbound (mtape_data.lrec_rrc.block_no, 1) then /* if we have reached the bottom */
			idx = hbound (mtape_data.lrec_rrc.block_no, 1); /* reset to top */
		end;
	     end;
	     if mtape_data.lrec_rrc (idx).block_no < mtape_data.phy_block then do;
		j = mtape_data.phy_block - mtape_data.lrec_rrc (idx).block_no + 1; /* we have to bks "j" blocks */
		call mtape_io_$order (mtdp, "bsr", j, null, code);
		if code ^= 0 then return;
		mtape_data.prev_block_no = mtape_data.prev_block_no - (j - 1); /* correct prev block */
		call mtape_io_$read_block (mtdp, code);
		if code ^= 0 then return;
	     end;
	     mtape_data.log_record_ptr = addr (tape_blk (mtape_data.lrec_rrc (idx).byte_offset));
	     mtape_data.processed = mtape_data.lrec_rrc (idx).byte_offset - 1;
	     mtape_data.length = mtape_data.lrec_rrc (idx).block_len;
	     mtape_data.log_record = mtape_data.lrec_rrc (idx).lrec_no;
	     mtape_data.remain = mtape_data.length - mtape_data.processed;
	     mtape_data.lrec_rrcx = idx;		/* reset lrec history index */
	end;
	else do;					/* no, is it in the block history? */
	     if bn <= mtape_data.log_record then do;	/* reposition within current block */
		fwd_rcds = mtape_data.log_record - bn;	/* compute rcds fwd from 1st rcd in blk */
		mtape_data.log_record = 0;		/* reset logical records in this blk */
		mtape_data.processed = mtape_data.buffer_offset;
		mtape_data.remain = mtape_data.length - mtape_data.processed;
		mtape_data.log_record_ptr = addr (tape_blk (mtape_data.processed + 1));
		mtape_data.tot_lrec = mtape_data.tot_lrec - bn; /* adjust total log records */
	     end;

	     else if bn <= sum (mtape_data.blk_rrrc) then do; /* repositon by backspacing blocks */
		idx = mtape_data.blk_rrcx - 1;	/* start from last block stored */
		if idx < lbound (mtape_data.blk_rrrc, 1) then /* if at bottom of queue.. */
		     idx = hbound (mtape_data.blk_rrrc, 1); /* go to top */
		tot_rcds = mtape_data.log_record;	/* preload total with count of current blk */
		j = 1;				/* initialize blocks to backspace (including current) */
		found = "0"b;
		do i = idx by -1 while (^found);	/* scan the queue */
		     j = j + 1;			/* increment blocks to backspace */
		     tot_rcds = tot_rcds + mtape_data.blk_rrrc (i); /* increment total */
		     mtape_data.blk_rrrc (i) = 0;	/* clear this position */
		     if bn <= tot_rcds then
			found = "1"b;		/* found the right block */
		     else if i - 1 < lbound (mtape_data.blk_rrrc, 1) then /* if at bottom of queue.. */
			i = hbound (mtape_data.blk_rrrc, 1) + 1; /* set for the top */
		end;
		mtape_data.blk_rrcx = i + 1;		/* reset block index */
		fwd_rcds = tot_rcds - bn;		/* compute the number of rcds forward */
		call mtape_io_$order (mtdp, "bsr", j, null, code); /* backspace j blocks */
		if code ^= 0 then return;		/* bad error return */
		mtape_data.log_record_ptr = null;	/* force block read */
		mtape_data.remain = 0;
		mtape_data.tot_lrec = mtape_data.tot_lrec - bn; /* adjust total log records */
	     end;
	     else do;				/* must go to beginning  of file */
		fwd_rcds = mtape_data.tot_lrec - bn;	/* get number forward */
		mtape_close_info.position = 3;	/* position to beginning of file section */
		call mtape_data.file_close (mtdp, code);/* simulate closing */
		if code ^= 0 then return;
	     end;
	     call FORWARD_SPACE (fwd_rcds);		/* now position forward for indicated records */
	end;

     end BACKSPACE;
%page;
%include iocb;
%page;
%include mtape_data;
%page;
%include mtape_open_close_info;
%page;
%include mtape_file_info;
%page;
%include iox_modes;

     end mtape_position_;
