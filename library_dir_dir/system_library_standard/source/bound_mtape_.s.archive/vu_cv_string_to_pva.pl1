/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_cv_string_to_pva:
   proc (p_pva_string_ptr, p_pva_string_length, p_area_ptr, p_print_vector_array_ptr, p_code);

/* DESCRIPTION:

         This    entry    converts   a   pva_string   representation   of   a
     print_vector_array back into a print_vector_array.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 07/24/83.
Modified:
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_pva_string_ptr       ptr;		/*is a pointer to a pva_string.*/
      dcl	    p_pva_string_length    fixed bin (35);	/*is the length of the pva_string
                                             in bytes.*/
      dcl	    p_area_ptr	       ptr;		/*is a pointer to a PL1 area in
                                             which the converted
                                             print_vector_array is to be
                                             placed.*/
      dcl	    p_print_vector_array_ptr
			       ptr;		/*is a pointer to a
                                             print_vector_array which is the
                                             converted version of the
                                             pva_string.*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system error
                                             code.*/

/* Automatic */

      dcl	    (dim_idx, vector_idx)  fixed bin (17) init (0);
      dcl	    current_pva_string_word_offset
			       fixed bin (35) init (0);

/* Based */
/* Builtin */

      dcl	    (addwordno, currentsize, length, max, null)
			       builtin;

/* Constant */

      dcl	    (
	    DEFAULT_SLOT_INCREASE_FACTOR
			       init (0) fixed bin (35),
	    DEFAULT_VECTOR_SLOT_IDX
			       init (-1) fixed bin (35),
	    DONT_FREE_OLD_PVA      init ("0"b) bit (1) aligned,
	    myname	       init ("vu_cv_string_to_pva") char (32) varying
	    )		       internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      pva_string_ptr = p_pva_string_ptr;
      call CHECK_VERSION (pva_string.version, PVA_STRING_VERSION_1, "pva_string");

      call
         vector_util_$init_print_vector_array (p_area_ptr, bin (pva_string.number_of_vectors, 35, 0),
         bin (pva_string.number_of_dimensions, 35, 0), bin (pva_string.maximum_name_length, 35, 0),
         print_vector_array_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION_FB (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      print_vector_array.number_of_vectors = 0;		/* This value is incremented by $append_general_print_vector */

      do dim_idx = 1 to pva_string.number_of_dimensions;
         print_vector_array.dimension_table (dim_idx).name = pva_string.dimension_table (dim_idx).name;
         print_vector_array.dimension_table (dim_idx).maximum_value_length = 0;
      end;

      current_pva_string_word_offset = currentsize (pva_string);

      do vector_idx = 1 to pva_string.number_of_vectors;

         pv_string_ptr = addwordno (pva_string_ptr, current_pva_string_word_offset);

         call
	  vector_util_$append_general_print_vector (p_area_ptr, DEFAULT_SLOT_INCREASE_FACTOR, DONT_FREE_OLD_PVA,
	  DEFAULT_VECTOR_SLOT_IDX, bin (pv_string.number_of_dimensions, 35, 0),
	  bin (pv_string.maximum_value_length, 35, 0), print_vector_array_ptr, p_code);
         if p_code ^= 0
         then call ERROR_RETURN ();

         print_vector_ptr = print_vector_array.vector_slot (print_vector_array.number_of_vectors);

         do dim_idx = 1 to pv_string.number_of_dimensions;
	  print_vector.dimension (dim_idx).identifier = pv_string.dimension (dim_idx).identifier;
	  print_vector.dimension (dim_idx).value = pv_string.dimension (dim_idx).value;
	  print_vector_array.dimension_table (print_vector.dimension (dim_idx).identifier).maximum_value_length =
	     max (print_vector_array.dimension_table (print_vector.dimension (dim_idx).identifier).maximum_value_length,
	     length (print_vector.dimension (dim_idx).value));
         end;

         current_pva_string_word_offset = current_pva_string_word_offset + currentsize (pv_string);

      end;

      p_print_vector_array_ptr = print_vector_array_ptr;

MAIN_RETURN:
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*);
      dcl	    p_expected_version     char (*);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_FB:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION_FB;
%page;
ERROR_RETURN:
   proc;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
%include sub_err_flags;
%page;
%include vu_print_vector_array;
%page;
%include vu_pva_string;
%page;
%include vu_entry_dcls;
   end vu_cv_string_to_pva;

