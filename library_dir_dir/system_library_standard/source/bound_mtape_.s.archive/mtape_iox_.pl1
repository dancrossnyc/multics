/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-08-17,GWMay), approve(87-09-09,MECR0006),
     audit(87-09-04,Farley), install(87-09-09,MR12.1-1101):
     Added more complete setting of the iocb.  Return on tape errors.
  2) change(87-10-19,GWMay), approve(87-10-19,MCR7779), audit(87-11-02,Farley),
     install(87-11-30,MR12.2-1006):
     Formally install MECR0006.
                                                   END HISTORY COMMENTS */


mtape_iox_: procedure;

/* format: style4 */

/* *	This program is part of the mtape_ I/O module and as such is not
   *	called directly by users, but through the iox_ I/O system. This
   *	program implements most of the entries called through iox_ for
   *	mtape_.
   *
   *	Modification History:
   *
   *	Created by J. A. Bush 10/05/82
   *	Modified by J. A. Bush 12/01/83 for performance improvements
*/

/*		ARGUMENT DATA		*/

dcl  arg_iocbp ptr;					/* (Input) Pointer to the I/O control block */
dcl  arg_options (*) char (*) varying;			/* (Input) Attach options from attach description. */
dcl  arg_com_err_flag bit (1) aligned;			/* (Input) "1"b => call com_err_ on attach errors */
dcl  arg_extend_flag bit (1);
dcl  arg_open_mode fixed bin;				/* Opening mode */
dcl  arg_buf_ptr ptr;				/* Pointer to users buffer to read into/write from */
dcl  arg_buf_len fixed bin (21);			/* Length of users buffer/bytes to be read */
dcl  arg_rec_len fixed bin (21);			/* Length of record/number of bytes read */
dcl  arg_code fixed bin (35);				/* (Output) Standard system error code */

/*		AUTOMATIC DATA		*/

dcl  iocbp ptr;					/* pointer to our IOCB */
dcl  com_err_flag bit (1) aligned;			/* "1"b => call com_err_ on attach errors */
dcl  (output, com_sent) bit (1) aligned;
dcl  (i, nsusp_bufs) fixed bin;
dcl  ips_mask bit (36) aligned;
dcl  desc_len fixed bin (21);
dcl  (code, iox_code) fixed bin (35);			/* error code value */
dcl  1 auto_mtd like mtape_data aligned;		/* temporary auto copy of mtape_ data base */
dcl  1 ai like area_info aligned;

/*		CONSTANT DATA		*/

dcl  myname char (6) int static options (constant) init ("mtape_");
dcl  null_options (1) char (1) varying int static options (constant) init ("");
dcl  READ_IO fixed bin int static options (constant) init (1);
dcl  WRITE_IO fixed bin int static options (constant) init (2);

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$no_operation fixed bin (35) ext static;
dcl  error_table_$not_detached fixed bin (35) ext static;
dcl  error_table_$bad_mode fixed bin (35) ext static;
dcl  error_table_$bad_label fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  error_table_$long_record fixed bin (35) ext static;
dcl  sys_info$max_seg_size fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

dcl  (addr, hbound, lbound, length, null, unspec) builtin;

/*		EXTERNAL ENTRIES		*/

dcl  (ioa_, com_err_) entry options (variable);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  user_info_$process_type entry (fixed bin);
dcl  mtape_util_$error entry options (variable);
dcl  mtape_util_$get_statistics entry (ptr, fixed bin (35));
dcl  mtape_util_$init_pfm entry (ptr, fixed bin (35));
dcl  mtape_util_$user_query entry (ptr, fixed bin, fixed bin (35));
dcl  mtape_parse_$attach entry (ptr, (*) char (*) varying, fixed bin (35));
dcl  mtape_parse_$open entry (ptr, (*) char (*) varying, fixed bin, fixed bin (35));
dcl  mtape_parse_$close entry (ptr, (*) char (*) varying, fixed bin (35));
dcl  mtape_parse_$detach entry (ptr, (*) char (*) varying, fixed bin (35));
dcl  mtape_mount_cntl_$mount entry (ptr, fixed bin (35));
dcl  mtape_mount_cntl_$demount entry (ptr, fixed bin (35));
dcl  mtape_iox_$open entry options (variable);
dcl  mtape_iox_$open_file entry options (variable);
dcl  mtape_iox_$close entry options (variable);
dcl  mtape_iox_$close_file entry options (variable);
dcl  mtape_iox_$detach entry options (variable);
dcl  mtape_iox_$detach_iocb entry options (variable);
dcl  mtape_control_$control entry options (variable);
dcl  mtape_position_ entry options (variable);
dcl  mtape_position_$read_length entry options (variable);
dcl  mtape_io_$allocate_buffers entry (ptr, fixed bin (21), fixed bin (35));
dcl  mtape_io_$set_mode entry (ptr, char (*), fixed bin, ptr, fixed bin (35));
dcl  mtape_io_$order entry (ptr, char (*), fixed bin, ptr, fixed bin (35));
dcl  mtape_io_$stop_tape entry (ptr, fixed bin (35));
dcl  mtape_iox_$write entry options (variable);
dcl  mtape_iox_$read entry options (variable);
dcl  iox_$propagate entry (ptr);
dcl  iox_$err_not_open entry () options (variable);
dcl  iox_$err_not_closed entry () options (variable);
dcl  iox_$err_not_attached entry () options (variable);
dcl  define_area_ entry (ptr, fixed bin (35));
dcl  release_area_ entry (ptr);
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));

/*		BASED STORAGE		*/

dcl  desc_string char (desc_len) varying based;
dcl  based_area area based (mtape_data.areap);

/* CONDITIONS */

dcl  (any_other, cleanup) condition;
%page;
mtape_attach: entry (arg_iocbp, arg_options, arg_com_err_flag, arg_code);

/* *	This entry is called to attach a tape volume or volume set to the
   *	users process through the specified I/O switch. The major tasks
   *	performed by this entry are as follows:
   *
   *	1. Parsing and validation of the options array, which iox_ generated
   *	   from the users attach description.
   *	2. Initialization of the mtape_ environment, including allocation of
   *	   1 volume set structure for each volume set member specified in
   *	   the options array and initialization of the global default values
   *	   from the users default value_seg (this includes creation of the
   *	   global default values on first reference).
   *	3. Requesting the mount of the first volume in the volume set via
   *	   RCP.
   *	4. Establishing the tape_ioi_ activation.
   *	5. Selection of the appropriate "Per-Format" module, based on
   *	   information returned from RCP in conjuction with any "-label" and
   *	   "-no_labels" information specified by the user in the attach
   *	   description and/or the current value of the "mtape_.global.label"
   *	   default value.
   *	6. Perform a search for the selected per-format module via the
   *	   search path  mechanism to verify its existence.
   *	7. Fill in the standard fields of the I/O control block to indicate
   *	   I/O switch attachment complete, ready for opening.
*/

	iocbp = arg_iocbp;				/* copy arguments */
	com_err_flag = arg_com_err_flag;
	mtdp = null;				/* make this ptr consistent for first possible error msg */
	if iocbp -> iocb.attach_data_ptr ^= null then do; /* If aready attached.. */
	     call ATTACH_ERROR (error_table_$not_detached, (iocbp -> iocb.name)); /* complain and let user call */
	     return;				/* again until he gets it right */
	end;

	on cleanup call CLEANUP;

	call INIT_ENVIRONMENT;			/* Initialize working environment */
	if arg_code ^= 0 then			/* quit if some problem */
	     return;
	call mtape_parse_$attach (mtdp, arg_options, code); /* parse the attach options */
	if code ^= 0 then do;			/* return to user if unrecoverable error */
	     arg_code = code;
	     call CLEANUP;				/* undo everything we have done so far */
	     return;
	end;
	com_err_flag = com_err_flag | mtape_data.display_errors; /* error messages if either one */
	if mtape_attach_info.display then do;		/* user wants to see attach description */
	     desc_len = length (mtape_data.atdp -> desc_string); /* set the length */
	     call ioa_ ("^/ATTACH DESCRIPTION:^/^a^/", mtape_data.atdp -> desc_string); /* display it */
	end;

	call mtape_mount_cntl_$mount (mtdp, code);	/* get the first volume mounted */
	if code ^= 0 then do;			/* return to user if unrecoverable error */
	     arg_code = code;
	     call CLEANUP;				/* undo everything we have done so far */
	     return;
	end;

	call mtape_util_$init_pfm (mtdp, code);		/* perform the Per-Format module selection */
	if code ^= 0 then do;			/* if we can't find it, bail out */
	     call CLEANUP;
	     arg_code = code;
	     return;
	end;
	call mtape_data.pfm_init (mtdp, code);		/* Let PFM initialize and check volume label */
	if code ^= 0 then do;
	     arg_code = code;
	     call CLEANUP;
	     return;
	end;
	if (^mtape_attach_info.labeled & ^mtape_pfm_info.no_labels_ok) then do; /* illegal combo */
	     arg_code = error_table_$inconsistent;
	     call mtape_util_$error (mtdp, arg_code,
		"^/The ^a Per-Format module does not support unlabeled volumes", mtape_pfm_info.module_id);
	     return;
	end;

/* The attachment is now complete. We must now fill in the IOCB with
   appropriate information and propagate it. */

	ips_mask = ""b;
	on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
	call hcs_$set_ips_mask ("0"b, ips_mask);

	iocbp -> iocb.attach_descrip_ptr = mtape_data.atdp;
	iocbp -> iocb.attach_data_ptr = mtdp;
	iocbp -> iocb.detach_iocb = mtape_iox_$detach_iocb;
	iocbp -> iocb.detach = mtape_iox_$detach;
	iocbp -> iocb.open = mtape_iox_$open;
	iocbp -> iocb.open_file = mtape_iox_$open_file;
	iocbp -> iocb.close = iox_$err_not_open;
	iocbp -> iocb.close_file = iox_$err_not_open;
	iocbp -> iocb.control = mtape_control_$control;

	call iox_$propagate (iocbp);			/* propagate this IOCB */
	call hcs_$reset_ips_mask (ips_mask, ips_mask);

	return;					/* thats all folks */
%page;
/* open - entry to open the I/O switch */

open: entry (arg_iocbp, arg_open_mode, arg_extend_flag, arg_code);

/* this entry merely passes control to the open_file entry with a null option array */

	call open_file_int (arg_iocbp, arg_open_mode, null_options, arg_extend_flag, arg_code);

	return;

/* open_file - entry to open an I/O switch with open arguments passed in the open argument array */

open_file: open_file_int: entry (arg_iocbp, arg_open_mode, arg_options, arg_extend_flag, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;	/* copy argument */
	code, arg_code = 0;				/* reset return code */
	mtdp = iocbp -> iocb.attach_data_ptr;		/* get our working storage pointer */
	mtape_data.iocb_ptr = iocbp;			/* save our IOCB ptr */
	maip = mtape_data.attach_info_ptr;
	moip = mtape_data.open_info_ptr;
	mpfmip = mtape_data.pfm_info_ptr;
	mspfmip = mtape_data.saved_pfm_info_ptr;
	vs_ptr = mtape_data.vs_current;		/* get vol set structure ptr */
	do i = 1 to hbound (mtape_pfm_info.open_modes_allowed, 1) /* check open mode legality */
	     while (arg_open_mode ^= mtape_pfm_info.open_modes_allowed (i));
	end;
	if i > hbound (mtape_pfm_info.open_modes_allowed, 1) then do; /* can't open for this mode */
	     code = error_table_$bad_mode;		/* set appropriate error code */
	     call mtape_util_$error (mtdp, code,
		"Open mode of ^d is invalid for the selected Per-Format module", arg_open_mode);
	     go to OPEN_EXIT;
	end;
	if arg_open_mode = Stream_input | arg_open_mode = Sequential_input then /* input mode? */
	     output = "0"b;
	else output = "1"b;				/* no output type mode */
	if output & ^mtape_attach_info.ring then do;	/* if output mode and no write ring */
	     code = error_table_$bad_mode;
	     call mtape_util_$error (mtdp, code,
		"Opening for ""^a"" requires the presence of a write ring.^/^a^/^a", iox_modes (arg_open_mode),
		"Either detach and reattach with a ""-ring"" attach description argument,",
		"or use the ""ring_in"" control order.");
	     go to OPEN_EXIT;
	end;
	if ^mtape_data.first_file then		/* if the first opening */
	     if output then do;			/* opening for output */
		mtape_vol_set.volume_density = mtape_attach_info.density;

		if mtape_vol_set.volume_check = RECOG_FORMAT_VOLUME | /* query user before destroying */
		     (mtape_vol_set.volume_check < BLANK_VOLUME & ^mtape_attach_info.labeled) then do;
		     call mtape_util_$user_query (mtdp, Q_LABELED_VOLUME, code);
		     if code ^= 0 then go to OPEN_EXIT;
		end;
	     end;
	     else do;				/* opening for input */
		if mtape_vol_set.volume_check > NON_MULT_VOLUME & /* trying to read is clearly wrong */
		     ^(mtape_pfm_info.no_labels_ok & mtape_vol_set.volume_check = UNLABELED_VOLUME) then do;
		     code = error_table_$bad_label;	/* set appropriate error code */
		     call mtape_util_$error (mtdp, code,/* and report error */
			"^/Attempting to open a file for ^a on a volume ^[(^a) ^;^1s^]which has an ^a label",
			iox_modes (arg_open_mode), (mtape_vol_set.volume_check = RECOG_FORMAT_VOLUME),
			mtape_vol_set.volume_id, Tape_volume_types (mtape_vol_set.volume_type));
		end;
		else if (mtape_vol_set.volume_check < BLANK_VOLUME & ^mtape_attach_info.labeled) then do;
		     call mtape_util_$error (mtdp, 0,
			"Volume ^a will be processed as a standard ^a labeled tape. ^a.",
			mtape_vol_set.volume_id, mtape_pfm_info.module_id,
			"The ""-no_labels"" attach description argument will be ignored");
		     mtape_attach_info.labeled = "1"b;	/* make it a labeled tape */
		end;
		else if (mtape_vol_set.volume_check = UNLABELED_VOLUME & mtape_pfm_info.no_labels_ok) then
		     if mtape_attach_info.labeled then do; /* go ahead and process as unlabeled */
			call mtape_util_$error (mtdp, 0, "Volume ^a will be processed as an ^a unlabeled volume",
			     mtape_vol_set.volume_name, mtape_pfm_info.module_id);
			mtape_attach_info.labeled = "0"b; /* force the unlabeled attribute */
		     end;
	     end;
	if code ^= 0 then				/* if some problem up above */
	     go to OPEN_EXIT;			/* bail out now */
	call mtape_parse_$open (mtdp, arg_options, arg_open_mode, code); /* go parse the open options */
	if code ^= 0 then go to OPEN_EXIT;
	if mtape_open_info.display then do;		/* user wants to see open description */
	     desc_len = length (mtape_data.opdp -> desc_string); /* set the length */
	     call ioa_ ("^/OPEN DESCRIPTION:^/^a^/", mtape_data.opdp -> desc_string); /* display it */
	end;
	call mtape_data.file_open (mtdp, code);		/* let the PFM do his thing */
	if code ^= 0 then go to OPEN_EXIT;
	mtape_data.error_lock = 0;			/* reset data error lock */
	if mspfmip ^= null then			/* if we have done a change_module control OP */
	     if output then				/* and this is an output type opening */
		if mtape_saved_pfm_info.open_mode = 0 then /* and first output */
		     mtape_saved_pfm_info.open_mode = arg_open_mode; /* save this one */
	fi_ptr = mtape_data.fi_current;
	mtape_data.char_size = mtape_file_info.char_size; /* copy required info into mtape_data */
	mtape_data.length_mode = mtape_file_info.length_mode;
	mtape_data.hdw_mode = mtape_file_info.hdw_mode;
	mtape_data.conversion = mtape_file_info.conversion;
	mtape_data.buffer_offset = mtape_file_info.buffer_offset;
	mtape_data.block_size, mtape_data.length = mtape_file_info.block_size;
	mtape_data.record_size = mtape_file_info.record_size;
	mtape_data.native_file = mtape_file_info.native_file;
	if mtape_file_info.file_format > 4 then do;	/* set adjusted format code */
	     mtape_data.ad_file_format = mtape_file_info.file_format - 3;
	     mtape_data.file_blocked = "1"b;		/* set switch for blocked file */
	end;
	else do;					/* not a blocked file */
	     mtape_data.ad_file_format = mtape_file_info.file_format;
	     mtape_data.file_blocked = "0"b;
	end;
	mtape_data.tot_bytes_processed, mtape_data.last_io, mtape_data.prev_block_no = 0;
	mtape_data.write_after_read, mtape_data.run = "0"b;
	mtape_data.first_file = "1"b;
	if mtape_data.nbufs > 0 then			/* buffers already allocated? */
	     if mtape_data.buf_size ^= mtape_data.block_size then do;
		call tape_ioi_$deallocate_buffers (mtape_data.tioi_id, code);
		if code ^= 0 then go to OPEN_EXIT;
		mtape_data.nbufs = 0;		/* set indicator to reallocate buffers */
	     end;
	     else do;				/* buffers allocated and of right size */
		call tape_ioi_$list_buffers (mtape_data.tioi_id, READY_STATE, mtape_data.buf_ptrs, nsusp_bufs, code);
		if code ^= 0 then go to OPEN_EXIT;
	     end;
	if mtape_data.nbufs = 0 then do;		/* If we don't already have buffers */
	     call mtape_io_$allocate_buffers (mtdp, mtape_data.block_size, code); /* allocate them */
	     if code ^= 0 then go to OPEN_EXIT;
	end;
	call mtape_io_$set_mode (mtdp, "data", mtape_data.hdw_mode, null, code); /* set desired HW mode */
	if code = 0 then
	     call mtape_io_$set_mode (mtdp, "length", mtape_data.length_mode, null, code); /* and length mode */
	if code ^= 0 then go to OPEN_EXIT;
	mtape_data.cur_buf_idx = lbound (mtape_data.buf_ptrs, 1);
	mtape_data.cur_buf_ptr = mtape_data.buf_ptrs (mtape_data.cur_buf_idx);
	mtape_data.cur_block.length = mtape_data.buf_size;/* set up for max length */
	mtape_data.processed = mtape_data.buffer_offset;	/* skip over  any buffer offset */
	if output then				/* if writing, set remaining bytes */
	     mtape_data.remain = mtape_data.cur_block.length - mtape_data.processed;
	else mtape_data.remain = 0;			/* if reading, must read first block */
	mtape_data.log_record_ptr = addr (tape_blk (mtape_data.processed + 1)); /* set initial lrec ptr */
	mtape_data.buf_len (*) = 0;
	if mtape_open_info.comment ^= "" then		/* user wants to see comment */
	     call ioa_ ("^/OPEN COMMENT:^/^a^/", mtape_open_info.comment);

/* opened ok, now fill in IOCB */

	ips_mask = ""b;
	on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
	call hcs_$set_ips_mask ("0"b, ips_mask);

	iocbp -> iocb.open_descrip_ptr = mtape_data.opdp;
	iocbp -> iocb.open = iox_$err_not_closed;
	iocbp -> iocb.open_file = iox_$err_not_closed;
	iocbp -> iocb.detach_iocb = iox_$err_not_closed;
	iocbp -> iocb.detach = iox_$err_not_closed;
	iocbp -> iocb.close = mtape_iox_$close;
	iocbp -> iocb.close_file = mtape_iox_$close_file;
	if arg_open_mode = Sequential_output then
	     iocbp -> iocb.write_record = mtape_iox_$write;
	else if arg_open_mode = Stream_output then
	     iocbp -> iocb.put_chars = mtape_iox_$write;
	else if arg_open_mode = Sequential_input then do;
	     iocbp -> iocb.read_record = mtape_iox_$read;
	     iocbp -> iocb.position = mtape_position_;
	     iocbp -> iocb.read_length = mtape_position_$read_length;
	end;
	else if arg_open_mode = Stream_input then do;
	     iocbp -> iocb.get_chars = mtape_iox_$read;
	     iocbp -> iocb.position = mtape_position_;
	end;
	else if arg_open_mode = Sequential_input_output then do;
	     iocbp -> iocb.read_record = mtape_iox_$read;
	     iocbp -> iocb.write_record = mtape_iox_$write;
	     iocbp -> iocb.position = mtape_position_;
	     iocbp -> iocb.read_length = mtape_position_$read_length;
	end;
	else do;					/* Steam_input_output */
	     iocbp -> iocb.get_chars = mtape_iox_$read;
	     iocbp -> iocb.put_chars = mtape_iox_$write;
	     iocbp -> iocb.position = mtape_position_;
	end;
	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

OPEN_EXIT:
	arg_code = code;
	return;
%page;
/* close - entry to close the I/O switch */

close: entry (arg_iocbp, arg_code);

/* this entry merely passes control to the close_file entry with a null option array */

	call close_file_int (arg_iocbp, null_options, arg_code);

	return;

/* close_file - entry to close an I/O switch with close arguments passed in the close argument array */

close_file: close_file_int: entry (arg_iocbp, arg_options, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;	/* copy argument */
	arg_code = 0;				/* reset return code */
	mtdp = iocbp -> iocb.attach_data_ptr;		/* get our working storage pointer */
	mtape_data.iocb_ptr = iocbp;			/* save our IOCB ptr */
	vs_ptr = mtape_data.vs_current;		/* get vol set structure ptr */
	maip = mtape_data.attach_info_ptr;
	moip = mtape_data.open_info_ptr;
	mcip = mtape_data.close_info_ptr;
	mpfmip = mtape_data.pfm_info_ptr;
	call mtape_parse_$close (mtdp, arg_options, code);/* go parse the close description */
	if code ^= 0 then go to CLOSE_EXIT;
	if mtape_close_info.display then do;		/* user wants to see close description */
	     desc_len = length (mtape_data.cldp -> desc_string); /* set the length */
	     call ioa_ ("^/CLOSE DESCRIPTION:^/^a^/", mtape_data.cldp -> desc_string); /* display it */
	end;
	call mtape_data.file_close (mtdp, code);	/* let the PFM do his thing */
	if mtape_data.fi_current ^= null then		/* if we were actually processing file */
	     call mtape_io_$stop_tape (mtdp, code);	/* get the tape stopped & buffers rdyed */
	call mtape_util_$get_statistics (mtdp, code);	/* update error stats */
	mtape_data.error_lock = 0;			/* reset data error lock */
	mtape_data.cur_block.length, mtape_data.cur_block.processed,
	     mtape_data.cur_block.remain, mtape_data.cur_block.log_record = 0;
	mtape_data.last_io, mtape_data.lrec_rrcx = 0;
	mtape_data.lrec_rrc (*).block_no, mtape_data.lrec_rrc (*).abs_byte,
	     mtape_data.lrec_rrc (*).byte_offset = 0;
	if mtape_close_info.comment ^= "" then		/* user wants to see comment */
	     call ioa_ ("^/CLOSE COMMENT:^/^a^/", mtape_close_info.comment);

/* closed ok, now reset pertinent IOCB entries */

	ips_mask = ""b;
	on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
	call hcs_$set_ips_mask ("0"b, ips_mask);

	iocbp -> iocb.detach_iocb = mtape_iox_$detach_iocb;
	iocbp -> iocb.detach = mtape_iox_$detach;
	iocbp -> iocb.open = mtape_iox_$open;
	iocbp -> iocb.open_file = mtape_iox_$open_file;
	iocbp -> iocb.control = mtape_control_$control;
	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.put_chars = iox_$err_not_open;
	iocbp -> iocb.get_chars = iox_$err_not_open;
	iocbp -> iocb.write_record = iox_$err_not_open;
	iocbp -> iocb.read_record = iox_$err_not_open;
	iocbp -> iocb.read_length = iox_$err_not_open;
	iocbp -> iocb.position = iox_$err_not_open;
	iocbp -> iocb.close = iox_$err_not_open;
	iocbp -> iocb.close_file = iox_$err_not_open;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (ips_mask, ips_mask);

CLOSE_EXIT:
	arg_code = code;
	return;
%page;
/* detach_iocb - entry to detach the I/O switch */

detach_iocb: entry (arg_iocbp, arg_code);

/* this entry merely passes control to the detach entry with a null option array */

	call detach_int (arg_iocbp, null_options, arg_code);

	return;

/* detach - entry to detach an I/O switch with detach arguments passed in the detach argument array */

detach: detach_int: entry (arg_iocbp, arg_options, arg_code);

	iocbp = arg_iocbp -> iocb.actual_iocb_ptr;	/* copy argument */
	arg_code = 0;				/* reset return code */
	mtdp = iocbp -> iocb.attach_data_ptr;		/* get our root pointer */
	mtape_data.iocb_ptr = iocbp;			/* save our IOCB ptr */
	mdip = mtape_data.detach_info_ptr;		/* set this ptr */
	call mtape_parse_$detach (mtdp, arg_options, code); /* parse detach options */
	if code ^= 0 then
	     go to DETACH_EXIT;
	if mtape_detach_info.display then do;		/* user wants to see detach description */
	     desc_len = length (mtape_data.dtdp -> desc_string); /* set the length */
	     call ioa_ ("^/DETACH DESCRIPTION:^/^a^/", mtape_data.dtdp -> desc_string); /* display it */
	end;
	auto_mtd = mtape_data;			/* copy mtape_data back to auto storage */
	mtdp = addr (auto_mtd);			/* now we can deallocate our work area */

/* Now go through the entire volume set and demount all volumes */
	com_sent = "0"b;
	do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (vs_ptr ^= null);
	     if mtape_vol_set.mounted then do;		/* if volume currently mounted... */
		mtape_data.vs_current = vs_ptr;	/* set current volume set ptr */
		mtape_data.tioi_id = mtape_vol_set.tioi_id; /* just to be sure */
		if mtape_detach_info.comment ^= "" then /* if we have a demount comment */
		     if ^com_sent then do;		/* and it hasn't already been seen */
			com_sent = "1"b;		/* set flag so we want send it again */
			mtape_vol_set.demount_comment = mtape_detach_info.comment; /* copy the comment */
		     end;
		if mtape_detach_info.unload then	/* if user wants volume unloaded */
		     call mtape_io_$order (mtdp, "runw", 0, null, code); /* unload volume */
		else call mtape_io_$order (mtdp, "rwnw", 0, null, code); /* rewind volume */
		call mtape_mount_cntl_$demount (mtdp, code); /* demount the volume */
	     end;
	end;

	call release_area_ (mtape_data.areap);		/* we can free up our area now */
	if mtape_data.mount_echan ^= 0 then		/* if we created mount event channel.. */
	     call ipc_$delete_ev_chn (mtape_data.mount_echan, code); /* delete it */
	if mtape_data.io_echan ^= 0 then		/* if we created io event channel.. */
	     call ipc_$delete_ev_chn (mtape_data.io_echan, code); /* delete it */
	ips_mask = ""b;
	on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
	call hcs_$set_ips_mask ("0"b, ips_mask);

	iocbp -> iocb.attach_data_ptr = null;
	iocbp -> iocb.attach_descrip_ptr = null;
	iocbp -> iocb.open = iox_$err_not_attached;
	iocbp -> iocb.open_file = iox_$err_not_attached;
	iocbp -> iocb.close = iox_$err_not_attached;
	iocbp -> iocb.close_file = iox_$err_not_attached;
	iocbp -> iocb.detach = iox_$err_not_attached;
	iocbp -> iocb.detach_iocb = iox_$err_not_attached;
	call iox_$propagate (iocbp);			/* wipe us out as far as iox_ is concerned */

	call hcs_$reset_ips_mask (ips_mask, ips_mask);

DETACH_EXIT:
	arg_code = code;				/* copy return code */

	return;
%page;
/* read - This entry implements the iox_$read_record entry for sqi and sqio openings,
   and the iox_$get_chars entry for si and sio openings */

read: entry (arg_iocbp, arg_buf_ptr, arg_buf_len, arg_rec_len, arg_code);

	mtdp = arg_iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get ptr to our control structure */
	mtape_data.iocb_ptr = arg_iocbp -> iocb.actual_iocb_ptr; /* save IOCB ptr */
	mtape_data.arg_buf_ptr = arg_buf_ptr;		/* save iox_ args for PFM */
	mtape_data.arg_buf_len = arg_buf_len;
	if mtape_data.error_lock ^= 0 then do;		/* if a previous error exists.. */
	     arg_rec_len = 0;			/* can't read anymore */
	     arg_code = mtape_data.error_lock;		/* give user back same error */
	     return;
	end;
	if mtape_data.last_io = WRITE_IO then do;	/* Read after write a no-no */
	     iox_code = error_table_$no_operation;	/* set error code */
	     call mtape_util_$error (mtdp, code, "Attempting forward read after write.");
	     go to read_return;
	end;
	mtape_data.last_io = READ_IO;			/* set for next operation check */
	call RECORD_HISTORY;			/* update record history counters */
	call mtape_data.read (mtdp, iox_code);		/* let the PFM do the work */
	arg_rec_len = mtape_data.arg_rec_len;		/* copy record length for user */
	if iox_code ^= 0 then			/* if we had an error */
	     if iox_code ^= error_table_$long_record then do; /* and not a long record */
		mtape_data.error_lock = iox_code;	/* set the error lock */
		go to read_return;
	     end;
	mtape_data.log_record = mtape_data.log_record + 1;/* increment log records, this block */
read_return:
	arg_code = iox_code;			/* return error code */
	return;
%page;
/* write - This entry implements the iox_$write_record entry for sqo and sqio openings,
   and the iox_$put_chars entry for so and sio openings */

write: entry (arg_iocbp, arg_buf_ptr, arg_buf_len, arg_code);

	mtdp = arg_iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get ptr to our control structure */
	mtape_data.iocb_ptr = arg_iocbp -> iocb.actual_iocb_ptr; /* save IOCB ptr */
	mtape_data.arg_buf_ptr = arg_buf_ptr;		/* copy iox_ args for PFM */
	mtape_data.arg_buf_len = arg_buf_len;
	if mtape_data.error_lock ^= 0 then do;		/* if a previous error exists.. */
	     arg_code = mtape_data.error_lock;		/* give user back same error */
	     return;
	end;
	if mtape_data.last_io = READ_IO then		/* nothing wrong with this for input/output openings */
	     mtape_data.write_after_read = "1"b;	/* But flag it */
	mtape_data.last_io = WRITE_IO;
	call RECORD_HISTORY;			/* increment record history counters */
	call mtape_data.write (mtdp, iox_code);		/* let the PFM do the work */
	if iox_code ^= 0 then			/* if we had an error */
	     if iox_code ^= error_table_$long_record then do; /* and not a long record */
		mtape_data.error_lock = iox_code;	/* set the error lock */
		go to write_return;
	     end;
	mtape_data.log_record = mtape_data.log_record + 1;/* increment log record counter */
write_return:
	arg_code = iox_code;			/* return error code */
	return;
%page;
/* ATTACH_ERROR - internal procedure to handle errors encountered during the attach call. */

ATTACH_ERROR: procedure (ecode, msg);

dcl  ecode fixed bin (35);
dcl  msg char (*);

	arg_code = ecode;				/* return error code to user */
	if com_err_flag then
	     call com_err_ (ecode, myname, "^a", msg);

     end ATTACH_ERROR;

/* CLEANUP - internal procedure to clean up the mtape_ environment  on an attach error */

CLEANUP: procedure;

	if mtdp ^= null then do;			/* if we have a structure already */
	     if mtape_data.vs_current ^= null then	/* if we have a volume set */
		if mtape_data.vs_current -> mtape_vol_set.mounted then do; /* and a volume is mounted */
		     auto_mtd = mtape_data;		/* copy mtape_ data out of work area */
		     mtdp = addr (auto_mtd);		/* and set ptr to it */
		     call mtape_mount_cntl_$demount (mtdp, (0)); /* demount it */
		end;

	     call release_area_ (mtape_data.areap);	/* release our area */
	     mtdp = null;				/* set pointer to null */
	end;

     end CLEANUP;

/* RECORD_HISTORY - internal procedure to record logical record history */

RECORD_HISTORY: proc;

	mtape_data.lrec_rrc (mtape_data.lrec_rrcx).block_no = mtape_data.phy_block;
	mtape_data.lrec_rrc (mtape_data.lrec_rrcx).block_len = mtape_data.length;
	mtape_data.lrec_rrc (mtape_data.lrec_rrcx).lrec_no = mtape_data.log_record;
	mtape_data.lrec_rrc (mtape_data.lrec_rrcx).abs_byte = mtape_data.tot_bytes_processed;
	mtape_data.lrec_rrc (mtape_data.lrec_rrcx).byte_offset = mtape_data.processed + 1;
	mtape_data.lrec_rrcx = mtape_data.lrec_rrcx + 1;	/* increment history index */
	if mtape_data.lrec_rrcx > hbound (mtape_data.lrec_rrc.block_no, 1) then /* if at the top of RRC */
	     mtape_data.lrec_rrcx = lbound (mtape_data.lrec_rrc.block_no, 1); /* reset for bottom */

     end RECORD_HISTORY;
%page;
/* INIT_ENVIRONMENT - internal procedure to initialize the mtape_ working environment */

INIT_ENVIRONMENT: procedure;

	mtdp = addr (auto_mtd);			/* put data in temporary auto copy for now */
	unspec (auto_mtd) = "0"b;			/* Initialize structure */
	mtape_data.version = mtape_data_version_1;	/* set version */
	mtape_data.areap = null;			/* Now set some required fields */
	mtape_data.iocb_ptr = iocbp;			/* save IOCB ptr */
	mtape_data.atdp, mtape_data.opdp, mtape_data.cldp, mtape_data.dtdp, mtape_data.cmtdp = null;
	mtape_data.vs_head, mtape_data.vs_tail, mtape_data.vs_current = null;
	mtape_data.fi_head, mtape_data.fi_tail, mtape_data.fi_current = null;
	mtape_data.vs_mounted_tail, mtape_data.tape_infop, mtape_data.tlb = null;
	mtape_data.buf_ptrs (*), mtape_data.saved_pfm_info_ptr, mtape_data.last_ur_status_ptr = null;
	mtape_data.lab_bufp, mtape_data.cur_buf_ptr, mtape_data.log_record_ptr = null;
	mtape_data.pfm_name, mtape_data.abs_ans = "";
	call user_info_$process_type (i);		/* What kind of user is this anyway? */
	if i ^= 2 then				/* if not absentee.... */
	     mtape_data.user_type = "1"b;		/* set bit for interactive user */

	unspec (ai) = "0"b;				/* clear out area info */
	ai.version = area_info_version_1;		/* set up area info block */
	ai.control.extend = "1"b;
	ai.control.zero_on_alloc = "1"b;
	ai.owner = myname;
	ai.size = sys_info$max_seg_size;
	ai.version_of_area = area_info_version_1;
	ai.areap = null;
	call define_area_ (addr (ai), code);		/* get an area, for general use */
	if code ^= 0 then do;
	     call ATTACH_ERROR (code, "from define_area_");
	     return;
	end;
	mtape_data.areap = ai.areap;			/* copy area pointer */

/* Now allocate assorted info structures */

	allocate mtape_attach_info in (based_area) set (maip); /* allocate attach info structure */
	allocate mtape_open_info in (based_area) set (moip); /* allocate open info structure */
	allocate mtape_close_info in (based_area) set (mcip); /* allocate close info structure */
	allocate mtape_detach_info in (based_area) set (mdip); /* allocate detach info structure */
	allocate mtape_pfm_info in (based_area) set (mpfmip); /* allocate pfm info structure */

/* and do any necessary initialization */

	mtape_attach_info.version = mtape_attach_info_version_1; /* Set proper structure version */
	mtape_attach_info.version = mtape_attach_info_version_1;
	mtape_open_info.version = mtape_open_info_version_1;
	mtape_close_info.version = mtape_close_info_version_1;
	mtape_open_info.cs_ptr, mtape_close_info.cs_ptr = null;
	mtape_open_info.cal_ptr, mtape_close_info.cal_ptr = null;
	mtape_open_info.so_ptr, mtape_close_info.so_ptr = null;
	mtape_detach_info.version = mtape_detach_info_version_1;
	mtape_pfm_info.version = mtape_pfm_info_version_1;
	mtape_data.attach_info_ptr = maip;		/* Record ptrs in root structure */
	mtape_data.open_info_ptr = moip;
	mtape_data.close_info_ptr = mcip;
	mtape_data.detach_info_ptr = mdip;
	mtape_data.pfm_info_ptr = mpfmip;
	mtape_pfm_info.module_id = "";		/* Do any necessary blank filling */
	mtape_pfm_info.pfm_open_options.pfm_opt_flags (*).flag_name = "";
	mtape_pfm_info.pfm_open_options.pfm_opt_flags (*).flag_ant_name = "";
	mtape_pfm_info.pfm_open_options.pfm_opt_value_name (*) = "";
	mtape_pfm_info.pfm_open_options.pfm_opt_str_name (*) = "";
	mtape_pfm_info.pfm_close_options.pfm_opt_flags (*).flag_name = "";
	mtape_pfm_info.pfm_close_options.pfm_opt_flags (*).flag_ant_name = "";
	mtape_pfm_info.pfm_close_options.pfm_opt_value_name (*) = "";
	mtape_pfm_info.pfm_close_options.pfm_opt_str_name (*) = "";
	mtape_attach_info.pfm_prefix, mtape_attach_info.default_pfm_prefix = "";

     end INIT_ENVIRONMENT;
%page;
%include iocb;
%page;
%include mtape_data;
%page;
%include mtape_attach_info;

%include mtape_detach_info;

%include mtape_saved_pfm_info;
%page;
%include mtape_open_close_info;
%page;
%include mtape_pfm_info;

%include mtape_err_stats;
%page;
%include mtape_vol_set;
%page;
%include mtape_file_info;
%page;
%include mtape_constants;
%page;
%include area_info;
%page;
%include rcp_volume_formats;
%page;
%include iox_modes;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_buffer_status;

     end mtape_iox_;
