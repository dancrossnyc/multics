/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
pa_get_option_value:
   proc (p_result_print_vector_array_ptr, p_area_ptr, p_found_option);

/* DESCRIPTION:

         This entry extracts the values of arguments of options as present in
     a result print_vector_array produced by process_arguments_.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 06/11/83.
Modified:
06/15/83 by Lindsey L. Spratt:  Added a new argument, p_found_option, to
            record which of the requested options were found in the result
            pva.
06/30/83 by Lindsey L. Spratt:  Changed to use pa_dim_name_constants.incl.pl1.
           Changed to look for the option name dimension in the print_vector
            rather than assume it is the next to last dimension.
07/07/83 by Lindsey L. Spratt:  Fixed to correctly handle varying character
            return data.
08/04/83 by S. Krupp to correctly handle varying character input data
            (the option_name argument specifically).
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_result_print_vector_array_ptr
			       ptr;		/*is a pointer to a result
                                                print_vector_array produced by
                                                process_arguments_.*/
      dcl	    p_area_ptr	       ptr;		/*is a pointer to the area in
                                                which this entry is to
                                                allocate its output
                                                information (when
                                                appropriate).*/
      dcl	    p_found_option	       bit (*) parameter;

/* Automatic */

      dcl	    output_area_ptr	       ptr init (null);	/* Pointer on which output_area is based. */
      dcl	    system_area_ptr	       ptr init (null);
      dcl	    nargs		       fixed bin init (0);	/* Number of arguments with which this subroutine was called. */
      dcl	    arg_list_ptr	       ptr init (null);	/* Pointer to the argument list for this subroutine. */
      dcl	    arg_list_arg_count     fixed bin init (0);	/* Variable used by the arg_list structure. */
      dcl	    number_of_option_values_requested
			       fixed bin init (0);
      dcl	    option_name_identifier fixed bin init (0);	/* This is the index into the dimension_table */
						/* of the definition of the option_name dimension. */
      dcl	    vhbu_number_of_vectors fixed bin init (0);	/* The extent of the vector_has_been_used bit array. */
      dcl	    vector_has_been_used_ptr
			       ptr init (null);	/* Points at the vector_has_been_used array. */

      dcl	    option_idx	       fixed bin init (0);	/* The loop counter for the OPTION_LOOP. */
      dcl	    option_name_arg_idx    fixed bin init (0);	/* The index into the argument list of the current */
						/* (in the OPTION_LOOP) option's name. */
      dcl	    option_variable_arg_idx
			       fixed bin init (0);	/* The index into the argument list of the */
						/* current option's return value variable. */

      dcl	    type		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
      dcl	    packed	       bit (1) aligned init ("0"b);
						/* Set by calling decode_descriptor_. */
      dcl	    ndims		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
      dcl	    size		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
      dcl	    scale		       fixed bin init (0);	/* Set by calling decode_descriptor_. */

      dcl	    option_name_ptr	       ptr init (null);	/* Pointer on which option_name is based. Set from */
						/* the argument_list. */
      dcl	    option_name_length     fixed bin init (0);	/* Length of the option_name from the argument_list. */

      dcl	    current_option_vector_idx
			       fixed bin init (0);	/* Index into the print_vector_array of */
						/* the print_vector from which the current */
						/* option_value was extracted. */
      dcl	    option_value_ptr       ptr init (null);	/* Pointer on which the option_value is based. */

      dcl	    data_ptr	       ptr init (null);	/* Pointer to return variable in which the option_value is to */
						/* be placed. */

      dcl	    char_data_length       fixed bin init (0);
      dcl	    vchar_data_length      fixed bin init (0);

      dcl	    option_value_link_ptr  ptr init (null);
      dcl	    root_option_value_link_ptr
			       ptr init (null);
      dcl	    previous_option_value_link_ptr
			       ptr init (null);
      dcl	    next_option_value_link_ptr
			       ptr init (null);

      dcl	    value_idx	       fixed bin init (0);

/* Based */

      dcl	    output_area	       area based (output_area_ptr);
						/* Area in which option_value_list structures */
						/* area allocated for the caller. */
      dcl	    system_area	       area based (system_area_ptr);
						/* Area for scratch storage. */
      dcl	    vector_has_been_used   (vhbu_number_of_vectors) bit (1) aligned based (vector_has_been_used_ptr);
						/* This array is used by FIND_OPTION_VALUE to avoid looking at */
						/* any vector in the caller-provided print_vector_array */
						/* more than once. */
      dcl	    option_name	       char (option_name_length) based (option_name_ptr);
      dcl	    option_value	       char (sys_info$max_seg_size * 4) varying based (option_value_ptr);
      dcl	    var_option_name_size   fixed bin(21) based(addwordno(option_name_ptr, -1));

      dcl	    aligned_char_data      based (data_ptr) aligned char (char_data_length);
      dcl	    unaligned_char_data    based (data_ptr) unaligned char (char_data_length);

      dcl	    aligned_vchar_data     based (data_ptr) aligned char (vchar_data_length) varying;
      dcl	    unaligned_vchar_data   based (data_ptr) unaligned char (vchar_data_length) varying;

      dcl	    aligned_flag_data      based (data_ptr) aligned bit (1);
      dcl	    unaligned_flag_data    based (data_ptr) unaligned bit (1);

      dcl	    aligned_integer_data   based (data_ptr) aligned fixed bin (35);
      dcl	    unaligned_integer_data based (data_ptr) unaligned fixed bin (35);

      dcl	    aligned_list_ptr_data  based (data_ptr) aligned ptr;
      dcl	    unaligned_list_ptr_data
			       based (data_ptr) unaligned ptr;

      dcl	    1 option_value_link    based (option_value_link_ptr),
	      2 next_ptr	       ptr init (null),
	      2 value_ptr	       ptr init (null),
	      2 vector_idx	       fixed bin init (0);

/* Builtin */

      dcl	    (addr, divide, null, substr)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    MINIMUM_POSSIBLE_NUMBER_OF_ARGS
			       init (5),
	    NUMBER_OF_NONVALUE_ARGS
			       init (3),
	    NUMBER_OF_INITIAL_NONVALUE_ARGS
			       init (3),
	    NO_CURRENT_OPTION_VECTOR_IDX
			       init (0)
	    )		       fixed bin internal static options (constant);

      dcl	    MYNAME	       init ("pa_get_option_value") char (32) varying internal static options (constant);

/* Entry */

      dcl	    requote_string_	       entry (char (*)) returns (char (*));
      dcl	    get_system_free_area_  entry () returns (ptr);

      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);

      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

      dcl	    (
	    error_table_$unimplemented_version,
	    error_table_$too_few_args,
	    error_table_$bad_arg,
	    error_table_$noarg
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      print_vector_array_ptr = p_result_print_vector_array_ptr;
      output_area_ptr = p_area_ptr;
      system_area_ptr = get_system_free_area_ ();

      call CHECK_VERSION (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");

      on cleanup call FINISH;

      call cu_$arg_count (nargs, (0));
      arg_list_arg_count = nargs;
      call cu_$arg_list_ptr (arg_list_ptr);


      if nargs < MINIMUM_POSSIBLE_NUMBER_OF_ARGS
      then call sub_err_ (error_table_$too_few_args, MYNAME, ACTION_CANT_RESTART, null, 0);
      else if mod (nargs - NUMBER_OF_NONVALUE_ARGS, 2) ^= 0
      then call
	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/The option names/value variable arguments must be paired.  
This was not the case.");

      number_of_option_values_requested = divide (nargs - NUMBER_OF_NONVALUE_ARGS, 2, 17, 0);

      call GET_DIMENSION_IDENTIFIER (print_vector_array_ptr, (OPTION_NAME_DIM_NAME), option_name_identifier);

      vhbu_number_of_vectors = print_vector_array.number_of_vectors;
      alloc vector_has_been_used in (system_area);
      unspec (vector_has_been_used) = "0"b;

      if length (p_found_option) < number_of_option_values_requested
      then call
	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/The caller-provided ""found_option"" string must have as many bits in it
as the number of options for which values are requested.  However, there are
only ^d bits in the ""found_option"" string and ^d options were requested.", length (p_found_option),
	    number_of_option_values_requested);

      p_found_option = "0"b;

OPTION_LOOP:
      do option_idx = 1 to number_of_option_values_requested;
         option_name_arg_idx = 2 * (option_idx - 1) + 1 + NUMBER_OF_INITIAL_NONVALUE_ARGS;
         option_variable_arg_idx = option_name_arg_idx + 1;

         call decode_descriptor_ (arg_list_ptr, option_name_arg_idx, type, packed, ndims, size, scale);
         if type ^= char_dtype & type ^= varying_char_dtype
         then call
	       sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	       "^/Option name parameter number ^d (argument number ^d) does not have 
a character string data type.", option_idx, option_name_arg_idx);

         option_name_ptr = arg_list_ptr -> arg_list.arg_ptrs (option_name_arg_idx);
         if type = varying_char_dtype
         then option_name_length = var_option_name_size;
         else option_name_length = size;

         current_option_vector_idx = NO_CURRENT_OPTION_VECTOR_IDX;

         call
	  FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name), vector_has_been_used,
	  current_option_vector_idx, option_value_ptr);

         if option_value_ptr ^= null
         then
PROCESS_OPTION_VALUE:
	  do;
	     substr (p_found_option, option_idx, 1) = "1"b;
	     call decode_descriptor_ (arg_list_ptr, option_variable_arg_idx, type, packed, ndims, size, scale);

	     data_ptr = arg_list_ptr -> arg_list.arg_ptrs (option_variable_arg_idx);

	     if type = char_dtype
	     then
CHAR_DATA:
	        do;
		 char_data_length = size;
		 if packed
		 then
		    do;
(stringsize):
		       unaligned_char_data = option_value;
		    end;
		 else
		    do;
(stringsize):
		       aligned_char_data = option_value;
		    end;
	        end CHAR_DATA;
	     else if type = varying_char_dtype
	     then
VCHAR_DATA:
	        do;
		 data_ptr = addwordno (data_ptr, -1);	/* To adjust for peculiar handling of the varying data type in arg_list preparation. */
		 vchar_data_length = size;
		 if packed
		 then
		    do;
(stringsize):
		       unaligned_vchar_data = option_value;
		    end;
		 else
		    do;
(stringsize):
		       aligned_vchar_data = option_value;
		    end;
	        end VCHAR_DATA;
	     else if type = bit_dtype & size = 1
	     then
FLAG_DATA:
	        do;
		 if packed
		 then unaligned_flag_data = CONVERT_TO_FLAG (option_value);
		 else aligned_flag_data = CONVERT_TO_FLAG (option_value);
	        end FLAG_DATA;
	     else if type = real_fix_bin_1_dtype
	     then
INTEGER_DATA:
	        do;
		 if packed
		 then unaligned_integer_data = CONVERT_TO_INTEGER (option_value);
		 else aligned_integer_data = CONVERT_TO_INTEGER (option_value);
	        end INTEGER_DATA;
	     else if type = pointer_dtype
	     then
DATA_LIST:
	        do;
		 alloc option_value_link in (system_area);
		 root_option_value_link_ptr = option_value_link_ptr;
		 option_value_link.value_ptr = option_value_ptr;
		 option_value_link.vector_idx = current_option_vector_idx;

		 call
		    FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name),
		    vector_has_been_used, current_option_vector_idx, option_value_ptr);
DATA_LIST_LOOP:
		 do ovl_number_of_values = 1 by 1 while (option_value_ptr ^= null);
		    previous_option_value_link_ptr = option_value_link_ptr;
		    alloc option_value_link in (system_area);
		    previous_option_value_link_ptr -> option_value_link.next_ptr = option_value_link_ptr;
		    option_value_link.next_ptr = null;
		    option_value_link.value_ptr = option_value_ptr;
		    option_value_link.vector_idx = current_option_vector_idx;
		    call
		       FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name),
		       vector_has_been_used, current_option_vector_idx, option_value_ptr);

		 end DATA_LIST_LOOP;

/* The refer extent variable, ovl_number_of_values, is set in the 
DATA_LIST_LOOP. 
*/

		 alloc option_value_list in (output_area);
		 option_value_list.version = OPTION_VALUE_LIST_VERSION_1;
		 option_value_link_ptr = root_option_value_link_ptr;
		 do value_idx = 1 to option_value_list.number_of_values;
		    next_option_value_link_ptr = option_value_link.next_ptr;
		    option_value_list.value (value_idx).ptr = option_value_link.value_ptr;
		    option_value_list.value (value_idx).vector_idx = option_value_link.vector_idx;

		    option_value_link_ptr = next_option_value_link_ptr;

		 end;

		 if packed
		 then unaligned_list_ptr_data = option_value_list_ptr;
		 else aligned_list_ptr_data = option_value_list_ptr;

	        end DATA_LIST;
	     else call
		   sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
		   "^/Option variable parameter number ^d (argument number ^d) does not have 
a valid data type.  It must be one of the following data types:
character (varying or non-varying), bit (1), fixed bin (<36), or pointer.", option_idx, option_variable_arg_idx);
	  end PROCESS_OPTION_VALUE;
      end OPTION_LOOP;

      call FINISH;
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
GET_DIMENSION_IDENTIFIER:
   proc (gdi_p_pva_ptr, gdi_p_dimension_name, gdi_p_dimension_identifier);
      dcl	    gdi_p_pva_ptr	       ptr parameter;
      dcl	    gdi_p_dimension_name   char (*) parameter;
      dcl	    gdi_p_dimension_identifier
			       fixed bin parameter;

      dcl	    gdi_dim_idx	       fixed bin;

      do gdi_dim_idx = 1 to gdi_p_pva_ptr -> print_vector_array.number_of_dimensions
         while (gdi_p_pva_ptr -> print_vector_array.dimension_table (gdi_dim_idx).name ^= gdi_p_dimension_name);
      end;
      if gdi_dim_idx > gdi_p_pva_ptr -> print_vector_array.number_of_dimensions
      then call
	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/The input result print_vector_array does not have a dimension named ^a.",
	    requote_string_ (gdi_p_dimension_name));
      gdi_p_dimension_identifier = gdi_dim_idx;
   end GET_DIMENSION_IDENTIFIER;
%page;
FIND_OPTION_VALUE:
   proc (fov_p_print_vector_array_ptr, fov_p_option_name_identifier, fov_p_option_name, fov_p_vector_has_been_used,
      fov_p_current_option_vector_idx, fov_p_option_value_ptr);
      dcl	    fov_p_print_vector_array_ptr
			       ptr parameter;
      dcl	    fov_p_option_name_identifier
			       fixed bin parameter;
      dcl	    fov_p_option_name      char (*) parameter;
      dcl	    fov_p_vector_has_been_used
			       (*) bit (1) aligned parameter;
      dcl	    fov_p_current_option_vector_idx
			       fixed bin parameter;
      dcl	    fov_p_option_value_ptr ptr parameter;

      dcl	    fov_print_vector_ptr   ptr;
      dcl	    fov_print_vector_idx   fixed bin (35);
      dcl	    (fov_name_dim_idx, fov_value_dim_idx)
			       fixed bin init (0);


FOV_PRINT_VECTOR_LOOP:
      do fov_print_vector_idx = fov_p_current_option_vector_idx + 1
         to fov_p_print_vector_array_ptr -> print_vector_array.number_of_vectors;
         if ^fov_p_vector_has_been_used (fov_print_vector_idx)
         then
	  do;
	     fov_print_vector_ptr =
	        fov_p_print_vector_array_ptr -> print_vector_array.vector_slot (fov_print_vector_idx);

	     do fov_name_dim_idx = 1 to fov_print_vector_ptr -> print_vector.number_of_dimensions
	        while (fov_print_vector_ptr -> print_vector.dimension (fov_name_dim_idx).identifier
	        ^= fov_p_option_name_identifier);
	     end;
	     if fov_name_dim_idx > fov_print_vector_ptr -> print_vector.number_of_dimensions
	     then call
		   sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
		   "^/The option name dimension must be present in all of the
result print_vectors.  This is not the case for print_vector ^d.", fov_print_vector_idx);

	     if fov_p_option_name = fov_print_vector_ptr -> print_vector.dimension (fov_name_dim_idx).value
	     then
	        do;
		 fov_p_current_option_vector_idx = fov_print_vector_idx;
		 fov_value_dim_idx = fov_print_vector_ptr -> print_vector.number_of_dimensions;
		 fov_p_option_value_ptr =
		    addr (fov_print_vector_ptr -> print_vector.dimension (fov_value_dim_idx).value);
		 fov_p_vector_has_been_used (fov_print_vector_idx) = "1"b;
		 return;
	        end;
	  end;
      end FOV_PRINT_VECTOR_LOOP;

      fov_p_current_option_vector_idx = 0;
      fov_p_option_value_ptr = null;


   end FIND_OPTION_VALUE;
%page;
CONVERT_TO_FLAG:
   proc (ctf_p_option_value) returns (bit (1) aligned);
      dcl	    ctf_p_option_value     char (*) varying parameter;

      if ctf_p_option_value = "true" | ctf_p_option_value = "t" | ctf_p_option_value = "on" | ctf_p_option_value = "yes"
         | ctf_p_option_value = "y" | ctf_p_option_value = "1"
      then return ("1"b);
      else if ctf_p_option_value = "false" | ctf_p_option_value = "f" | ctf_p_option_value = "off"
	    | ctf_p_option_value = "no" | ctf_p_option_value = "n" | ctf_p_option_value = "0"
      then return ("0"b);
      else call
	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/The option  ^a has a value which is not convertable to a flag.
Its value is ^a.", requote_string_ ((option_name)), requote_string_ ((ctf_p_option_value)));
   end CONVERT_TO_FLAG;
%page;
CONVERT_TO_INTEGER:
   proc (cti_p_option_value) returns (fixed bin (35));
      dcl	    cti_p_option_value     char (*) varying parameter;

      dcl	    cti_integer	       fixed bin (35);
      dcl	    cti_code	       fixed bin (35);
      dcl	    cv_dec_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
      dcl	    requote_string_	       entry (char (*)) returns (char (*));

      cti_integer = cv_dec_check_ ((cti_p_option_value), cti_code);
      if cti_code ^= 0
      then call
	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
	    "^/The value for option ^a, ^a, couldn't be converted to an integer.
The conversion failed on character ^d, ^a.", requote_string_ ((option_name)), requote_string_ ((cti_p_option_value)),
	    cti_code, requote_string_ (substr (cti_p_option_value, cti_code, 1)));
      return (cti_integer);
   end CONVERT_TO_INTEGER;
%page;
FINISH:
   proc ();
      if root_option_value_link_ptr ^= null
      then
         do;
	  root_option_value_link_ptr = null;
	  option_value_link_ptr = root_option_value_link_ptr;
	  do while (option_value_link_ptr ^= null);
	     next_option_value_link_ptr = option_value_link_ptr;
	     free option_value_link in (system_area);
	     option_value_link_ptr = next_option_value_link_ptr;
	  end;
         end;
      if vector_has_been_used_ptr ^= null
      then free vector_has_been_used in (system_area);
   end FINISH;
%page;
%include sub_err_flags;
%page;
%include vu_print_vector_array;
%page;
%include std_descriptor_types;
%page;
%include pa_option_value_list;
%page;
%include pa_dim_name_constants;
%page;
%include arg_list;
   end pa_get_option_value;
