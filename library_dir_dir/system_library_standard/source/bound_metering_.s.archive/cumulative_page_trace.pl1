/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cumulative_page_trace: cpt: proc;

/*
   Additional control arguments:

   -length n, -lg n  format output with line length n.
*/

/* coded	Feb 10, 1971	J.W. Gintell */
/* modified June, 1974 for new system trace in 23.10 - MCR 598  */
/* modified June 1975 by John Gintell for MCR's 957,970, and 1060 */
/* modified Aug 1976 by John Gintell to make cleanup condition handler work */
/* modified July 1977 by John Gintell to add linkage fault trace, segment fault counting and default -int 500 */
/* modified January 81 by J. Bongiovanni to avoid fatal process error due to
          record quota overflow in pdir, add -temp_dir  */
/* modified January 82 by J. Bongiovanni for extended page fault type */

		        
		        

dcl  hcs_$high_low_seg_count external entry (fixed bin, fixed bin);
dcl  hcs_$trace_marker entry (char (4));
dcl  hcs_$make_seg external entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin(35));
dcl  hcs_$truncate_seg external entry (ptr, fixed bin, fixed bin(35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin(35));
dcl  absolute_pathname_ entry (char(*), char(*), fixed bin(35));
dcl  ioa_ external entry options (variable);
dcl  ioa_$rsnnl external entry options (variable);
dcl  ioa_$ioa_switch external entry options (variable);
dcl  page_trace$print_trace_entry entry (ptr, ptr, bit (1) aligned);
dcl  cv_bin_$oct external entry (fixed bin (11)) returns (char (12) aligned);
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin(35));
dcl  iox_$attach_iocb entry (ptr, char (*), fixed bin(35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin(35));
dcl  iox_$close entry (ptr, fixed bin(35));
dcl  iox_$detach_iocb entry (ptr, fixed bin(35));
dcl  com_err_ external entry options (variable);
dcl  cv_dec_check_ external entry (char (*), fixed bin(35)) returns (fixed bin);
dcl  cu_$arg_ptr external entry (fixed bin, ptr, fixed bin, fixed bin(35));
dcl  cu_$arg_count external entry returns (fixed bin);
dcl  cu_$cp external entry (ptr, fixed bin, fixed bin(35));
dcl  hcs_$get_page_trace external entry (ptr);
dcl  hcs_$fs_get_path_name external entry (ptr, char (*), fixed bin, char (*), fixed bin(35));
dcl  interpret_bind_map_ entry (ptr, char (*), fixed bin, fixed bin(35));
dcl  get_entry_name_ entry (ptr, char (*), fixed bin, char (8), fixed bin(35));
dcl  ring0_get_$name external entry (char (*), char (*), ptr, fixed bin(35));
dcl  ring0_get_$definition external entry (ptr, char (*), char (*), fixed bin, fixed bin, fixed bin(35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin(35));
dcl (null, addr, baseptr, max, fixed, substr, divide, ltrim, ptr, rel, binary, baseno, stackframeptr, hbound) builtin;
dcl  timer_manager_$sleep external entry (fixed bin (71), bit (2));
dcl  timer_manager_$cpu_call external entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call external entry (entry);

dcl  sys_info$max_seg_size external fixed bin (19);
dcl  highpage fixed bin static;
dcl  myname char (21) static options (constant) init ("cumulative_page_trace");

%include trace_types;
%include sys_trace;


dcl (cleanup, not_in_read_bracket, record_quota_overflow) condition;

dcl 1 trace_copy aligned like trace;

dcl  char4 char (4) based;
dcl  cptb char (4);
dcl  cpte char (4);					/* marker */
dcl  counter fixed bin static init (0);			/* counter for marker */

dcl 1 seg (0:1023) aligned based (datap),		/* array of counters, one for each page of each segment */
    2 any bit (1) unaligned,				/* = 1 if any pages seen in this segment */
    2 segf fixed bin (16) unaligned,
    2 total_no_page fixed bin (17) unaligned,		/* number of pages touched for this segment */
    2 total_no_pagef fixed bin (35),			/* total number of faults for this segment */
    2 page (0:255) fixed bin (8) unaligned;
dcl  datap ptr static;				/* pointer to data segment */
dcl  packedptr ptr unal based;
dcl  unpackedptr ptr;

dcl 1 linkfaults based (linkp),
    2 nextlp fixed bin,
    2 elem (0:131070),
      3 fromptr ptr unal,
      3 toptr ptr unal;
dcl  linkp ptr init (null) static;

dcl  seg_no fixed bin (11);
dcl  type fixed bin (5);
dcl  page_no fixed bin (11);
dcl  beg_found bit (1);				/* used during scan to mark when in good zone */
dcl  beg_found1 bit (1);
dcl  end_found bit (1);				/* used during scan to indicate when end marker found */

dcl  total_pages fixed bin init (0);
dcl  total_segf fixed bin init (0);
dcl  total_pfaults fixed bin init (0) static;

dcl  flushptr (0:63) ptr init ((64) null);
dcl  qoverflow bit (1) init (""b);
dcl  make_seg_failed bit (1) init (""b);
dcl  flushp_index fixed bin;
dcl  zzzzz9 pic "zzzzz9";
dcl  flushi fixed bin;
dcl 1 flush_seg based aligned,
    2 page (0:255),
      3 word (0:1023) fixed bin;
dcl  garbage fixed bin;
dcl  nused fixed bin;
dcl  nused_ptr ptr init (null);
dcl  nused_offset fixed bin;
dcl (last_blockno) fixed bin;
dcl  deftype fixed bin;

dcl  dirname char (168);
dcl  ename char (32);				/* returned name of segment */
dcl  comp_name char (8);
dcl  callee_name char (32);
dcl  caller_ename char (32);
dcl  entry_name char (32);
dcl  offset fixed bin;
dcl  char32 char (32);
dcl  path char (168);				/* pathname for ios_ call */
dcl  pnum char (8);					/* string in which to put page number */
dcl  pnumb char (pnumbl) based (addr (pnum));
dcl  pnumbl fixed bin;				/* length of page number string */
dcl  arg char (len) based (aptr);			/* argument string from cu_$arg_ptr */
dcl  len fixed bin;
dcl  aptr ptr;					/* pointer to argument returned by cu_$arg_ptr */
dcl  iocbp ptr;					/* pointer to iocb for cpt.out */
dcl  dump_iocbp ptr;				/* pointer to iocb for cpt.dump, user must attach open */
dcl  command char (132);				/* command string */
dcl  comptr ptr;
dcl  comlen fixed bin;				/* length of command string */
dcl  pstring char (256) ;				/* place in which to build page number string */
dcl  pstringf char (lstr) based (addr (pstring));
dcl (i, j, k, high_seg) fixed bin;
dcl  code fixed bin (35);
dcl  maxhigh fixed bin static init (0);
dcl  timersw bit (1) init (""b);
dcl  ignoreint bit (1) init ("0"b);
dcl  save_ignoreint bit (1);
dcl  look_for_timers bit (1) init ("0"b);
dcl  look_for_restart bit (1) init ("0"b);
dcl  noise bit (1) ;				/* if we suspect noise in data */
dcl  tempdsw bit (1) init ("0"b);
dcl  temp_dir_name char (168);

dcl (countsw, loopsw, flushsw, sleepsw, printsw, totalsw, resetsw, comsw, debugsw, tracesw) bit (1) init (""b);
dcl  intsw bit (1) init ("1"b);
dcl (linksw, printlinksw) bit (1) init (""b);
dcl  nocaller bit (1);
dcl  longsw bit (1) aligned init (""b);
dcl  loopcnt fixed bin init (0);			/* count of number of loops requested */
dcl  totalloop fixed bin static;			/* total number of iterations */
dcl  sleeptime fixed bin (71);			/* length of sleep time */
dcl  inttime fixed bin (71) init (500000);		/* length of CPU interrupt interval */
dcl  totalint fixed bin init (0);			/* total number of interrupts */
dcl  lstr fixed bin;				/* length of page number string mod line */
dcl  maxlstr fixed bin init (80);			/* max length */

dcl  firstinit bit (1) static init ("1"b);		/* initialization switch */
dcl  hcsc fixed bin static;				/* hardcore segment count */

	if firstinit then do;			/* first time initialization */

	     highpage = divide (sys_info$max_seg_size, 1024, 17, 0) - 1;
	     call hcs_$high_low_seg_count (high_seg, hcsc); /* get high hardcore segment count */
	     call hcs_$make_seg ("", "cpt.data", "", 01010b, datap, code);
	     if datap = null then do;
TEMPERR:		call com_err_ ((code), myname, "Couldn't make temp seg.");
		return;
	     end;
	     call hcs_$make_seg ("", "cpt.link", "", 01010b, linkp, code);
	     if linkp = null then goto TEMPERR;
	     call reset;

	     firstinit = ""b;
	end;

/* obtain all arguments given to command */
	do i = 1 to cu_$arg_count ();

	     call cu_$arg_ptr (i, aptr, len, code);
	     if code = 0 then do;

		if arg = "-flush" then flushsw = "1"b;
		else if arg = "-trace" then do;
		     tracesw = "1"b;
		     call attach (iocbp, "cpt.out");
		     if code ^= 0 then goto ARGERR;
		end;
		else if arg = "-sleep" then do;
		     sleepsw = "1"b;
		     i = i +1;
		     call cu_$arg_ptr (i, aptr, len, code);
		     if code ^= 0 then go to ARGERR;
		     sleeptime = cv_dec_check_ (arg, code);
		     if sleeptime <= 0 | code ^= 0 then go to ARGERR;
		end;
		else if arg = "-loop" then do;
		     loopsw = "1"b;
		     i = i +1;
		     call cu_$arg_ptr (i, aptr, len, code);
		     if code ^= 0 then go to ARGERR;
		     loopcnt = cv_dec_check_ (arg, code);
		     if loopcnt <= 0 | code ^= 0 then go to ARGERR;
		end;
		else if arg = "-interrupt" | arg = "-int" then do;
		     intsw = "1"b;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, len, code);
		     if code ^= 0 then go to ARGERR;
		     inttime = cv_dec_check_ (arg, code);
		     if inttime < 100 | code ^= 0 then goto ARGERR;
		     inttime = inttime * 1000;
		end;
		else if arg = "-temp_dir" | arg = "-td" then do;
		     tempdsw = "1"b;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, len, code);
		     if code ^= 0 then goto ARGERR;
		     call absolute_pathname_ (arg, temp_dir_name, code);
		     if code ^= 0 then goto ARGERR;
		end;
		else if arg = "-reset" | arg = "-rs" then resetsw = "1"b;
		else if arg = "-trace_linkage_faults" then linksw = "1"b;
		else if arg = "-print_linkage_faults" then printlinksw = "1"b;
		else if arg = "-count" | arg = "-ct" then countsw = "1"b;
		else if arg = "-print" | arg = "-pr" then printsw = "1"b;
		else if arg = "-total" | arg = "-tt" then totalsw = "1"b;
		else if arg = "-shortline" | arg = "-short" | arg = "-sh" then maxlstr = 48;
		else if arg = "-timers" then timersw = "1"b;
		else if arg = "-long" | arg = "-lg" then longsw = "1"b;
		else if arg = "-length" | arg = "-ln" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, len, code);
		     if code ^= 0 then goto ARGERR;
		     maxlstr = cv_dec_check_ (arg, code);
		     if maxlstr < 48 | code ^= 0 then goto ARGERR;
		     if maxlstr > 130 then goto ARGERR;
		     maxlstr = maxlstr - 32;
		end;
		else if substr (arg, 1, 1) = "-" then goto ARGERR;
		else if ^comsw then do;		/* this is command string */
		     command = arg;			/* copy since must be aligned */
		     comsw = "1"b;
		     comlen = len;
		     if ^loopsw then loopcnt = 1;
		end;
		else do;
ARGERR:		     call com_err_ (code, myname, "Invalid argument - ^a", arg);
		     return;
		end;
	     end;
	end;

	if fixed (printsw) + fixed (countsw) + fixed (totalsw) > 1 then do;
	     call com_err_ ((0), myname, "Only one of -count, -print, and -total may be specified");
	     return;
	end;
	if countsw | totalsw then printsw = "1"b;

	if ^(comsw | printsw | resetsw | printlinksw) then do;
	     call com_err_ ((0), myname, "No printing requests or command string was given.");
	     return;
	end;


	if resetsw then call reset;
	on condition (cleanup) call cleaner;
	comptr = addr (command);

/* Now start the calling and accumulation of page trace data */

	do j = 1 to loopcnt;

	     if intsw then do;
		call timer_manager_$cpu_call (inttime, "10"b, timer);
		look_for_timers = ^timersw;
		ignoreint = "0"b;
	     end;

	     cptb = nexts ();
	     cpte = nexts ();
	     if flushsw then call flush;
	     call hcs_$trace_marker (cptb);

	     if comsw then call cu_$cp (comptr, comlen, code);

	     ignoreint = "1"b;

	     call hcs_$trace_marker (cpte);
	     call hcs_$get_page_trace (addr (trace_copy));

	     if intsw then do;
		call timer_manager_$reset_cpu_call (timer);
		look_for_timers = "0"b;
	     end;


	     call get_trace;			/* get page trace data */

	     if sleepsw then if j ^= loopcnt then call timer_manager_$sleep (sleeptime, "11"b);

	end;

	if intsw & totalint ^= 0 then call ioa_ ("cumulative_page_trace: There were ^d interrupts.^/", totalint);
	if qoverflow then call ioa_ ("cumulative_page_trace:  Insufficient quota to flush all pages.");
	if printsw then call print;
	if printlinksw then call printlinks;

	call cleaner;

cleaner:	proc;
	     if intsw then call timer_manager_$reset_cpu_call (timer);
	     if tracesw then call detach (iocbp, "cpt.out");
	     if debugsw then call detach (dump_iocbp, "cpt.dump");
	     if flushsw then do flushp_index = 0 to hbound (flushptr, 1);
		if flushptr (flushp_index) ^= null then do;
		     call hcs_$delentry_seg (flushptr (flushp_index), code);
		     flushptr (flushp_index) = null;
		end;
	     end;
	     
     return;
	end cleaner;

detach:	proc (a_iocbp, a_switchname);
dcl  a_iocbp ptr;					/* pointer to iocb */
dcl  a_switchname char (*);

	     call iox_$close (a_iocbp, code);
	     if code ^= 0 then call iox_err;

	     call iox_$detach_iocb (a_iocbp, code);
	     if code ^= 0 then call iox_err;

iox_err:	     proc;

		call com_err_ (code, myname, a_switchname);

	     end iox_err;

	end detach;

attach:	proc (a_iocbp, a_switchname);

dcl  a_iocbp ptr;
dcl  a_switchname char (*);

	     i = i + 1;
	     call cu_$arg_ptr (i, aptr, len, code);
	     if code ^= 0 then return;
	     path = arg;
	     call iox_$find_iocb (a_switchname, a_iocbp, code);
	     if code ^= 0 then return;
	     call iox_$attach_iocb (a_iocbp, "vfile_ "||path||" -extend", code);
	     if code ^= 0 then return;
	     call iox_$open (a_iocbp, 2, "0"b, code);
	     if code ^= 0 then return;

	end attach;

get_trace: procedure;

	     beg_found, beg_found1, end_found, noise = ""b;
	     if tracesw then call ioa_$ioa_switch (iocbp, "^/");

AGAIN:	     do i = trace_copy.next_free + 1 to trace_copy.last_available, 1 to trace_copy.next_free;

		trace_ptr = addr (trace_copy.data (i));
		type = page_trace_entry.type;

		if type = extended_page_fault_type then do;
		     seg_no = binary (extended_page_trace_entry.tsr_segno_1
			|| extended_page_trace_entry.tsr_segno_2, 12);
		     page_no = extended_page_trace_entry.tsr_pageno;
		end;
		else do;
		     seg_no = page_trace_entry.segment_number;
		     page_no = page_trace_entry.page_number;
		end;
		
		if ^beg_found then do;
		     if type = marker_type & addr (trace_copy.data (i)) -> char4 = cptb then do;
			if look_for_restart then beg_found1 = "1"b;
			else beg_found = "1"b;
		     end;
		     else if look_for_restart & beg_found1 then if type = restart_fault_type then beg_found = "1"b;
		     goto SKIP;
		end;

		if type = marker_type & addr (trace_copy.data (i)) -> char4 = cpte then do;
		     end_found = "1"b;
		     goto DONE;
		end;

		else if type = signaller_type & look_for_timers & addr (trace_copy.data (i)) -> char4 = "cput" then do;
		     end_found = "1"b;
		     goto DONE;
		end;

		else if linksw & type = linkage_fault_start then call linkfaultstart;

		else if linksw & type = linkage_fault_end then call linkfaultend;

		else if type = seg_fault_start then do;
		     seg (seg_no).segf = seg (seg_no).segf + 1;
		end;

		else if type = page_fault_type | type = extended_page_fault_type then do;
		     if seg (seg_no).page (page_no) = 0 then seg (seg_no).total_no_page = seg (seg_no).total_no_page + 1;
		     seg (seg_no).page (page_no) = seg (seg_no).page (page_no) + 1;
		     seg (seg_no).any = "1"b;
		     seg (seg_no).total_no_pagef = seg (seg_no).total_no_pagef + 1;
		     maxhigh = max (maxhigh, seg_no);
		     total_pfaults = total_pfaults + 1;
		end;
		if tracesw then
		     call page_trace$print_trace_entry (addr (trace_copy.data (i)), iocbp, longsw);
SKIP:	     end;

	     if ^beg_found then do;
		beg_found, noise = "1"b;
		if tracesw
		then call ioa_$ioa_switch (iocbp, "^/Some page faults have been missed - no beginning marker^/");
		goto AGAIN;
	     end;

	     if ^end_found then do;
		if tracesw then call ioa_$ioa_switch (iocbp, "^/Some page faults have been missed - no end marker^/");
		noise = "1"b;
	     end;

DONE:
	     if noise then call ioa_ ("cumulative_page_trace: Some page faults have been missed.");

	end get_trace;

timer:	procedure;

	     if ignoreint then return;
	     call hcs_$trace_marker (cpte);
	     call hcs_$get_page_trace (addr (trace_copy));
	     call get_trace;
	     look_for_restart = ^timersw;		/* OK to turn on now */

	     totalint = totalint + 1;
	     call timer_manager_$cpu_call (inttime, "10"b, timer);

	     cptb = nexts ();
	     cpte = nexts ();
	     if flushsw then call flush;
	     call hcs_$trace_marker (cptb);

	end timer;


/* procedure used to reset the accumulated page trace data */
reset:	procedure;

	     call hcs_$truncate_seg (datap, 0, code);

	     totalloop = 0;
	     maxhigh = 0;
	     total_pfaults = 0;
	     if linkp ^= null then call hcs_$truncate_seg (linkp, 0, code);

	end reset;

nexts:	proc returns (char (4));

dcl  zzz9 pic "zzz9";

	     zzz9 = counter;
	     counter = counter + 1;
	     return (zzz9);

	end nexts;

linkfaultstart: proc;

	     if toptr (nextlp) = null () then nextlp = nextlp + 1; /* didn't get an end linkage fault */
	     fromptr (nextlp) = addr (trace_copy.data (i)) -> packedptr;
	     toptr (nextlp) = null ();

	end linkfaultstart;


linkfaultend: proc;

	     toptr (nextlp) = addr (trace_copy.data (i)) -> packedptr;
	     nextlp = nextlp + 1;

	end linkfaultend;

/* procedure used to print the accumulated page trace data */
print:	procedure;


	     if ^totalsw then call ioa_ ("^/Segment name^-^-   page numbers^/");
	     else call ioa_ ("^/Segment name ^-^- Page Faults     Segment Faults^/^-^-^- #pages  #faults  #faults^/");

	     do i = 0 to maxhigh;

		if seg (i).any then do;
		     call getname (fixed (i, 11));

		     lstr = 0;
		     char32 = ename;
		     total_pages = total_pages + seg (i).total_no_page;
		     total_segf = total_segf + seg (i).segf;

		     if totalsw then call ioa_ ("^32a^4d^9d^9d",
			ename, seg (i).total_no_page, seg (i).total_no_pagef, seg (i).segf);
		     else do;
			do j = 0 to highpage;	/* build string of page numbers */
			     if seg (i).page (j) ^= 0 then do;
				if seg (i).page (j) = 1 | ^countsw then call ioa_$rsnnl ("^o ", pnum, pnumbl, j);
				else call ioa_$rsnnl ("^o(^d) ", pnum, pnumbl, j, seg (i).page (j));
				substr (pstring, lstr+1, pnumbl) = pnumb;
				lstr = lstr + pnumbl; /* string length */
				if lstr >maxlstr then do;
				     call ioa_ ("^32a^a", char32, pstringf);
				     char32 = "";
				     lstr = 0;
				end;
			     end;
			end;
			if lstr ^= 0 then call ioa_ ("^32a^a", char32, pstringf);
		     end;
		end;
	     end;

	     call ioa_ ("^/Total number of pages: ^d, Total page faults: ^d, Total segment faults: ^d^/",
		total_pages, total_pfaults, total_segf);

	end print;

printlinks: proc;

	     call ioa_ ("^2/^2- Linkage Faults^/");

	     do i = 0 to nextlp -1;

		unpackedptr = fromptr (i);
		if baseno (unpackedptr) = "0"b
		then do;
		     caller_ename = "hcs_$make_ptr call";
		     nocaller = "1"b;
		end;
		else do;
		     nocaller = "0"b;
		     offset = binary (rel (unpackedptr), 18);
		     entry_name = "";
		     on not_in_read_bracket goto ISGATE;
		     call interpret_bind_map_ (unpackedptr, entry_name, offset, code);
		     revert not_in_read_bracket;
ISGATE:
		     if entry_name ^= "" then entry_name = ": " || entry_name;
		     call getname (fixed (baseno (unpackedptr), 11));
		     caller_ename = ename;
		end;

		unpackedptr = toptr (i);
		call get_entry_name_ (unpackedptr, callee_name, binary (baseno (unpackedptr)), comp_name, code);
		if callee_name = "" then callee_name = "0";
		call getname (fixed (baseno (unpackedptr), 11));

		call ioa_ ("^a^[^s^s^;^a|^o^]    ===>    ^a$^a",
		     caller_ename, nocaller, entry_name, offset, ename, callee_name);
	     end;
	     call ioa_ ("");

	end printlinks;

getname:	procedure (segnum);

dcl  segnum fixed bin (11);

	     ename = "";

	     if segnum < hcsc then call ring0_get_$name (dirname, ename, baseptr (segnum), code);
	     else call hcs_$fs_get_path_name (baseptr (segnum), dirname, k, ename, code);
	     if ename = "" then ename = ">";

	     if code ^= 0 then ename = ltrim (cv_bin_$oct (segnum)); /* convert segment number */

	end getname;

/*  procedure called for each iteration if -flush specified.
    The idea is to improve the accuracy of the data by eliminating the effect
    of background system load.  This is done by flushing main memory of all
    pages which we (or, for that matter, anyone else) might have touched.
    The only way to do this is to fill memory with other pages.  These
    pages belong to segments in the process directory, or in a user-specified
    directory, and we create these segments during the
    first pass through this procedure.  Note that this extraneous paging
    is detrimental to system performance, and that this detriment is
    evident to all users on the system.  If the flush pages are in
    the process directory, strange things can happen due to record quota
    overflow.  The stack might not be able to expand to handle the record
    quota overflow condition, resulting in a fatal process error.
    If the pages are left around between calls to cpt, someone else might
    get a record quota overflow (probably on the stack).  To avoid these
    problems, we do the following:
          1. Touch the next page of the stack, in case we need to expand
             it for any reason and no quota is left.
          2. Truncate all flush segments after flushing (thus returning
             their quota)
    Note that these problems are not serious if the user has specified
    -temp_dir.										*/
	

flush:	procedure;

	     if qoverflow | make_seg_failed then return;	/* lost before				*/
	     save_ignoreint = ignoreint;
	     ignoreint = "1"b;			/* could lose interrupts */
	     last_blockno = 0;
	     call ring0_get_$definition (nused_ptr, "sst", "nused", nused_offset, deftype, code);
	     if code = 0
	     then do;
		call ring_zero_peek_ (ptr (nused_ptr, nused_offset), addr (nused), 1, code);
		if code ^= 0 then nused = 1024;
	     end;
	     else nused = 1024;

	     garbage = stackframeptr () -> flush_seg.page (1).word (0); /* get page for stack expand	*/

	     do flushp_index = 0 to divide (nused+highpage, highpage, 17, 0) -1;
		if flushptr (flushp_index) = null then do;
		     zzzzz9 = flushp_index;
		     if tempdsw
			then call hcs_$make_seg (temp_dir_name, "cpt.flush."||ltrim (zzzzz9), "", 01010b, flushptr (flushp_index), code);
		     else call hcs_$make_seg ("", "cpt.flush."||ltrim (zzzzz9), "", 01010b, flushptr (flushp_index), code);
		     if flushptr (flushp_index) = null then do;
			call com_err_ (code, myname, "cpt.flush");
			make_seg_failed = "1"b;
			return;
		     end;

		end;

		on record_quota_overflow begin;
		     qoverflow = "1"b;
		     goto NOQUOTA;
		end;
		do flushi = 0 to highpage;
		     garbage = flushptr (flushp_index) -> flush_seg.page (flushi).word (0);
		end;
		revert record_quota_overflow;
	     end;
NOQUOTA:
	     do flushp_index = 0 to divide (nused+highpage, highpage, 17, 0) -1;
		if flushptr (flushp_index) ^= null()
		     then call hcs_$truncate_seg (flushptr (flushp_index), 0, code);
	     end;

	     ignoreint = save_ignoreint;

	end flush;

     end cumulative_page_trace;
