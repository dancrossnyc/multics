/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


change_index:
     proc (iocb_ptr, abort_exit);
	indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
	f_b_ptr = file_base_ptr;
	fs_ptr = indx_cb.file_state_ptr;
	is_ptr = indx_cb.index_state_ptr;
	call initialize_substate;
	do while (index_action ^= 0);			/* the change cycle */
	     pos_ptr = change_position_ptr;
	     call prepare_next_state;
	     call save_node_head;
	     if index_action = insert_action
	     then do;
		     if last_branch_num = 1
		     then call insert_at_root;
		     else do;
			     call set_new_cont_space;
			     space = scat_space + new_cont_space;
			     if space < 0
			     then call overflow;
			     else do;
				     call simple_insert (branch_num);
				     call adjust_branch_num;
				end;
			end;
		end;				/* end insert action */
	     else do;
		     call set_old_key_info;
		     if index_action = delete_action
		     then do;
			     call simple_delete;
			     space = cont_space (node_ptr) + scat_space;
			     if space > half_node_length
			     then call underflow;
			     else call adjust_branch_num;
			end;			/* end delete action */
		     else do;			/* replace action */
			     x = old_key_length - new_key_length;
			     if x = 0
			     then do;
				     record_designator (branch_num) = new_record_designator;
						/* should use record_descrip, but compiler problems */
				     substr (keys, key_pos (branch_num), new_key_length) =
					substr (new_key_string, 1, new_key_length);
				     call adjust_branch_num;
				end;
			     else do;
				     y = cont_space (node_ptr);
				     space = y + scat_space + x;
				     if space >= 0
				     then do;	/* key will fit */
					     call replace_key;
					     if space > half_node_length
					     then call underflow;
					     else call adjust_branch_num;
					end;
				     else do;	/* key won't fit, turn into overflow-insert */
					     call set_new_branch;
					     call simple_delete;
					     call overflow;
					end;
				end;
			end;			/* end replace action */
		end;
	     call switch_index_state;
	end;					/* end change cycle */
	return;					/* end change_index routine */

prepare_next_state:
     proc;					/* sets up alternate index state variables */
	a_s_ptr = addr (index_state_blocks (1 - index_state));
	a_s_ptr -> index_action = 0;
	a_s_ptr -> index_substate = 0;
	a_s_ptr -> branch_num_adjust = 0;
	a_s_ptr -> index_height = index_height;
	a_s_ptr -> current_node = file_position_ptr -> node;
	a_s_ptr -> number_of_nodes = number_of_nodes;
	a_s_ptr -> index_tail_comp_num = index_tail_comp_num;
	a_s_ptr -> free_node_designator = free_node_designator;
     end prepare_next_state;

initialize_substate:
     proc;
	if repeating
	then do;
		if index_substate = 0
		then repeating = "0"b;
		else next_substate = 0;
		return;				/* don't alter permanent substate vars */
	     end;
	branch_num_adjust = 0;
	index_substate = 0;
	file_substate = file_substate + 1;
     end initialize_substate;

save_node_head:
     proc;
	if repeating
	then do;					/* restore header variables */
		call check_index_substate;
		last_branch_num = old_last_branch_num;
		low_key_pos = old_low_key_pos;
		scat_space = old_scat_space;
		return;
	     end;
	old_last_branch_num = last_branch_num;
	old_low_key_pos = low_key_pos;
	old_scat_space = scat_space;
	index_substate = index_substate + 1;
     end save_node_head;

switch_index_state:
     proc;
	if a_s_ptr -> index_action = 0
	then if new_desc_val = 0			/* not replacing non-leaf key */
	     then go to switch;
	change_position_ptr = parent_position_ptr;	/* pop change position */
	a_s_ptr -> change_node = node;
	call save_position_stack;
switch:
	index_state = 1 - index_state;		/* switch states */
	index_state_ptr = a_s_ptr;
	is_ptr = index_state_ptr;
	return;					/* end of switch_state routine */

save_position_stack:
     proc;
	p = root_position_ptr;

	do i = 1 to a_s_ptr -> index_height;
	     p = p -> son_position_ptr;
	     a_s_ptr -> saved_node (i) = p -> node;
	     a_s_ptr -> saved_branch_num (i) = p -> branch_num;
	end;

	dcl     p			 ptr;
	dcl     i			 fixed;
     end save_position_stack;

     end switch_index_state;

simple_insert:
     proc (b_num);
	if new_cont_space < 0
	then call compact_node (node_ptr);
	if b_num < last_branch_num
	then call move_bytes (node_ptr, 5 + bd_len * b_num, bd_len, bd_len * (last_branch_num - b_num));
	call insert_key (b_num);
	last_branch_num = last_branch_num + 1;
	branch (b_num + 1) = new_branch;
	return;
	dcl     i			 fixed;
	dcl     b_num		 fixed;
     end;						/* end simple insert */

insert_key:
     proc (br_num);
	low_key_pos = low_key_pos - new_key_length;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	record_designator (br_num) = new_record_designator;
						/* should use record_descrip, but compiler problems */
	key_length (br_num) = new_key_length;
	key_pos (br_num) = low_key_pos;
	substr (keys, low_key_pos, new_key_length) = substr (new_key_string, 1, new_key_length);
	index_substate = index_substate + 1;
	dcl     br_num		 fixed;
     end insert_key;

simple_delete:
     proc;
	call free_key_space;
	last_branch_num = last_branch_num - 1;
	if branch_num < last_branch_num
	then call move_bytes (node_ptr, 5 + bd_len * (branch_num + 1), -bd_len, bd_len * (last_branch_num - branch_num));
	return;

	dcl     len		 fixed;
     end;						/* end simple delete */

adjust_branch_num:
     proc;
	branch_num = branch_num + branch_num_adjust;
     end;

move_bytes:
     proc (np, source_offset, displacement, n_bytes);
	dest_offset = source_offset + displacement;
	call save_new_string;
	call set_new_string;
	return;					/* end move_bytes main routine */

save_new_string:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	substr (spare_node, dest_offset, n_bytes) = substr (np -> keys, source_offset, n_bytes);
	index_substate = index_substate + 1;
     end;

set_new_string:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	substr (np -> keys, dest_offset, n_bytes) = substr (spare_node, dest_offset, n_bytes);
	index_substate = index_substate + 1;
     end;

	dcl     np		 ptr;
	dcl     (source_offset, displacement, n_bytes, dest_offset)
				 fixed;
     end move_bytes;

set_new_branch:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	new_branch = branch (branch_num + 1);
	index_substate = index_substate + 1;
     end;

set_old_key_info:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	old_key_pos = key_pos (branch_num);
	old_key_length = key_length (branch_num);
	index_substate = index_substate + 1;
     end;

free_key_space:
     proc;
	if old_key_pos = low_key_pos
	then low_key_pos = low_key_pos + old_key_length;
	else scat_space = scat_space + old_key_length;
     end;

replace_key:
     proc;
	call free_key_space;
	if new_key_length > y
	then do;					/* make room for larger key */
		call zero_key;
		call compact_node (node_ptr);
	     end;
	call insert_key (branch_num);
	return;					/* end of replace_key routine */

zero_key:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	key_length (branch_num) = 0;
	index_substate = index_substate + 1;
     end zero_key;

     end replace_key;

compact_node:
     proc (n_ptr);
	np = n_ptr;
	call make_compact_copy;
	call set_compacted_node;
	np -> low_key_pos = new_low_key_pos;
	np -> scat_space = 0;
	return;					/* end of compaction routine */

make_compact_copy:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	n_keys = np -> last_branch_num - 1;
	len = n_keys * bd_len + node_head_length;
	substr (spare_node, 1, len) = substr (np -> keys, 1, len);
	k = node_length + 1;

	do i = 1 to n_keys;
	     m = np -> key_length (i);
	     if m > 0
	     then do;
		     k = k - m;
		     substr (spare_node, k, m) = substr (np -> keys, np -> key_pos (i), m);
		     addr (spare_node) -> key_pos (i) = k;
		end;
	end;

	new_low_key_pos = k;
	index_substate = index_substate + 1;
	dcl     (n_keys, len)	 fixed;
     end make_compact_copy;

set_compacted_node:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	substr (np -> keys, 1, node_length) = substr (spare_node, 1, node_length);
	index_substate = index_substate + 1;
     end;

	dcl     (np, n_ptr)		 ptr;
	dcl     (i, k, m)		 fixed;
     end;						/* end compact node */

set_new_cont_space:
     proc;
	new_cont_space = cont_space (node_ptr) - new_key_length - bd_len;
     end set_new_cont_space;

cont_space:
     proc (np) returns (fixed);
	return (np -> low_key_pos - 1 - node_head_length + bd_len - np -> last_branch_num * bd_len);
	dcl     np		 ptr;
     end cont_space;

insert_at_root:
     proc;
	call extend_position_stack (indx_cb_ptr);	/* sets change position to new frame */
	pos_ptr = change_position_ptr;
	call create_node (node, node_ptr);
	call set_first_branch;
	only_branch_in_root = node;
	a_s_ptr -> index_height = index_height + 1;
	a_s_ptr -> current_node = file_position_ptr -> node;
	old_index_height = a_s_ptr -> index_height;
	branch_num = 1;
	new_cont_space = 0;				/* avoids unnecessary compaction */
	call simple_insert (1);
	call adjust_branch_num;
	return;

set_first_branch:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	branch (1) = only_branch_in_root;
	index_substate = index_substate + 1;
     end;
     end;						/* end insert_at_root */

overflow:
     proc;
	is_overflow = "1"b;
	num_of_keys = last_branch_num;		/* num of keys in node + 1 for inserted key */
	call get_parent;
	if is_ks_out
	then do;					/* create right brother but don't balance */
		call split (num_of_keys - 1);
		call adjust_position_right;
		return;
	     end;
	if p_b_num < p_n_ptr -> last_branch_num
	then do;					/* try rotate right */
		call get_right_brother;
		call rotate_right;			/* sets count */
		if first_count > 0
		then do;
			call adjust_position_right;
			return;
		     end;
	     end;
						/* rotate left or split */
	if p_b_num > 1
	then do;					/* try left brother */
		call get_left_brother;
		call rotate_left;			/* sets count */
		if second_count > 0
		then do;
			call adjust_position_left;
			return;
		     end;
	     end;
						/* must split node, p_b_num irrelevant(no pivot),split sets b_n_ptr */
	call find_split_num;
	call split (split_num);			/* split_num is num of key after last included in space */
	call adjust_position_right;
	return;					/* end overflow code */

get_parent:
     proc;
	p_n_ptr = parent_position_ptr -> node_ptr;
	p_b_num = parent_position_ptr -> branch_num;
     end;

get_right_brother:
     proc;
	b_node = p_n_ptr -> branch (p_b_num + 1);
	b_n_ptr = get_ptr (b_node);
	call set_b_vars;
	return;					/* end of get_right_brother routine */

get_left_brother:
     entry;
	p_b_num = p_b_num - 1;
	b_node = p_n_ptr -> branch (p_b_num);
	b_n_ptr = get_ptr (b_node);
	call set_b_vars;
	return;					/* end of get_left_brother routine */

set_b_vars:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	b_space = cont_space (b_n_ptr) + b_n_ptr -> scat_space;
	last_b_num = b_n_ptr -> last_branch_num;
	index_substate = index_substate + 1;
     end set_b_vars;

     end get_right_brother;

find_split_num:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	space = node_head_length;

	do split_num = 1 repeat (split_num + 1) while (space < half_node_length);
	     space = space + bd_len + key_length (split_num);
	end;

	index_substate = index_substate + 1;
     end find_split_num;

underflow:
     entry;
	is_overflow = "0"b;
	call get_parent;
	if p_b_num < p_n_ptr -> last_branch_num
	then do;					/*
						   balance or combine with right brother */
		call get_right_brother;
		num_of_keys = last_b_num - 1;
		dest_np = node_ptr;
		if is_combination_possible ()
		then call combine (node_ptr, b_n_ptr);
		else call rotate_left;
		call adjust_branch_num;
	     end;
	else if p_b_num > 1
	then do;					/* balance or combine with left brother */
		call get_left_brother;
		num_of_keys = last_b_num - 1;
		parent_position_ptr -> branch_num = p_b_num;
		dest_np = b_n_ptr;
		if is_combination_possible ()
		then do;
			call combine (b_n_ptr, node_ptr);
			call set_node_to_brother;
			branch_num = last_b_num + branch_num + branch_num_adjust;
		     end;
		else do;
			call rotate_right;
			branch_num = branch_num + branch_num_adjust + count;
			a_s_ptr -> branch_num_adjust = 1;
		     end;
	     end;
	else /* the parent node is the root node */
	     if last_branch_num = 1			/* height of tree decreases */
	then call underflow_to_root;
	else call adjust_branch_num;
	return;					/* end of underflow code */

underflow_to_root:
     proc;
	call set_root_branch;
	call free_node (node, node_ptr);
	a_s_ptr -> index_height = index_height - 1;
	old_index_height = a_s_ptr -> index_height;
	node_ptr = parent_position_ptr -> node_ptr;
	node = parent_position_ptr -> node;
	a_s_ptr -> current_node = file_position_ptr -> node;
	branch_num = 1;
	root_position_ptr = pos_ptr;
	return;					/* end of underflow_to_root routine */

set_root_branch:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	only_branch_in_root = branch (1);
	index_substate = index_substate + 1;
     end;

     end underflow_to_root;

/* Declarations */
	dcl     is_new_key		 bit (1) aligned;
	dcl     is_overflow		 bit (1) aligned;
	dcl     (p_n_ptr, b_n_ptr)	 ptr;		/* parent,brother nodes */
	dcl     b_node		 fixed (35);	/* brother node designator */
	dcl     last_b_num_left	 fixed;		/* used in combining node with left brother */
	dcl     p_b_num		 fixed;		/* branch num for pivot kay is parent */
	dcl     n_ptr		 ptr;
	dcl     (dest_np, np1, np2)	 ptr;
	dcl     i			 fixed;
	dcl     num_of_keys		 fixed;		/* number of keys available for rotation,
						   includes new key in overflow case */

get_key:
     proc (i, p, k);				/* locates the node(p)and branch_num(k)for the ith key"in"
						   the source node. Allows for new key. This routine is used in rotate_x and
						   split */
	p = np1;
	k = i;
	if is_overflow
	then if i >= branch_num
	     then if i = branch_num
		then do;				/* use new key */
			p = addr (fake_node);
			k = 1;
			is_new_key = "1"b;
			return;
		     end;
		else k = k - 1;
	is_new_key = "0"b;
	return;

	dcl     i			 fixed;		/* 1<=i<=num_of_keys */
	dcl     k			 fixed;
	dcl     p			 ptr;
     end;						/* end get_key */

split:
     proc (n);					/* creates new right brother */
	count = num_of_keys - n + 1;
	call create_node (b_node, b_n_ptr);
	a_s_ptr -> new_branch = b_node;
	a_s_ptr -> index_action = insert_action;
	call set_nps;
	call split_keys;
	np2 -> last_branch_num = 0;
	call finish_dest_node;
	call finish_left_node;
	return;					/* end of split routine */

split_keys:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	call get_key (n, p, k);
	call set_upbound_key;
	np2 -> branch (1) = first_branch;
	call set_dest_node_info;
	dest_b_num = num_of_keys - n;

	do i = num_of_keys to n + 1 by -1;
	     call get_key (i, source_n_ptr, source_b_num);
	     call move_adjust;
	     dest_b_num = dest_b_num - 1;
	end;

	index_substate = index_substate + 1;
     end split_keys;

	dcl     n			 fixed;		/* index of first key to be moved */
	dcl     b_num		 fixed;
	dcl     n_ptr		 ptr;
     end;						/* end split */

move_adjust:
     proc;					/* adjust low_key_pos and free space count in source */
	source_key_pos = source_n_ptr -> key_pos (source_b_num);
	source_key_len = source_n_ptr -> key_length (source_b_num);
	if source_key_pos > min_source_key_pos
	then new_scat_space = new_scat_space + source_key_len;
	else if ^is_new_key
	then min_source_key_pos = min_source_key_pos + source_key_len;
move:
     entry;					/* moves key and bd_words from source node to dest node */
	dest_bd_words = source_bd_words;
	min_dest_key_pos = min_dest_key_pos - source_key_len;
	dest_n_ptr -> key_pos (dest_b_num) = min_dest_key_pos;
	substr (dest_n_ptr -> keys, min_dest_key_pos, source_key_len) =
	     substr (source_n_ptr -> keys, source_key_pos, source_key_len);
	dcl     source_bd_words	 (branch_and_descrip_size) based (addr (source_n_ptr -> descrip (source_b_num)))
				 fixed;
	dcl     dest_bd_words	 (branch_and_descrip_size) based (addr (dest_n_ptr -> descrip (dest_b_num))) fixed;
     end move_adjust;

set_new_key_and_descrip:
     proc (n_ptr, b_num);
	a_s_ptr -> new_key_length = n_ptr -> key_length (b_num);
	substr (a_s_ptr -> new_key_string, 1, a_s_ptr -> new_key_length) =
	     substr (n_ptr -> keys, n_ptr -> key_pos (b_num), a_s_ptr -> new_key_length);
	a_s_ptr -> new_record_designator = n_ptr -> record_designator (b_num);
	return;

	dcl     n_ptr		 ptr;
	dcl     b_num		 fixed;
     end;						/* end set-new_key */

compact_if_nec:
     proc;
	b_n_ptr -> last_branch_num = last_b_num;
	if must_compact_dest
	then call compact_node (np2);
     end;

rotate_right:
     proc;
	i = num_of_keys;				/* defines first key to be moved */
	di = -1;
	call compute_count;
	call set_first_count;
	if first_count ^= 0
	then do;					/* rotation is possible */
		a_s_ptr -> index_action = replace_action;
		call compact_if_nec;
		call move_bytes (np2, bd_len + 1, count * bd_len, bd_len * (np2 -> last_branch_num - 1) + 4);
		call rotate_keys_right;
		np2 -> branch (1) = first_branch;
		call finish_dest_node;
		call finish_left_node;
	     end;
	return;					/* end rotate_right code */

rotate_keys_right:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	call set_dest_node_info;
	dest_b_num = count;
	call move_key_down;
	np2 -> branch (count + 1) = np2 -> branch (1);
	call get_key (num_of_keys + 1 - count, p, k);
	call set_upbound_key;

	do i = 1 to count - 1;
	     call get_key (num_of_keys + 1 - i, source_n_ptr, source_b_num);
	     dest_b_num = dest_b_num - 1;
	     call move_adjust;
	end;

	index_substate = index_substate + 1;
     end rotate_keys_right;

set_first_count:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	first_count = count;
	index_substate = index_substate + 1;
     end;

set_second_count:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	second_count = count;
	index_substate = index_substate + 1;
     end;

rotate_left:
     entry;
	i = 1;					/* defines first key to be moved */
	di = 1;
	call compute_count;
	call set_second_count;
	if second_count ^= 0
	then do;					/* rotation is possible */
		a_s_ptr -> index_action = replace_action;
		call compact_if_nec;
		call rotate_keys_left;
		np1 -> branch (1) = first_branch;
		call finish_dest_node;
		call finish_right_node;
	     end;
	return;					/* end rotate_left */

rotate_keys_left:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	call set_dest_node_info;
	call move_key_down;
	call get_key (count, p, k);
	call set_upbound_key;

	do i = 1 to count - 1;
	     call get_key (i, source_n_ptr, source_b_num);
	     dest_b_num = dest_b_num + 1;
	     call move_adjust;
	end;

	index_substate = index_substate + 1;
     end rotate_keys_left;

	dcl     i			 fixed;		/* indexes keys "in" source node-including inserted keys */
	dcl     di		 fixed;		/* defines order to take keys from source node */

compute_count:
     proc;
	call set_nps;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	if is_overflow
	then do;
		x = space;
		y = b_space;
	     end;
	else do;
		x = b_space;
		y = space;
	     end;
	dy = bd_len + p_n_ptr -> key_length (p_b_num);	/* parent key is first to be moved */
	count = 0;
	call get_key (i, p, k);
	dx = bd_len + p -> key_length (k);
	do while (i > 0);				/* i=0 just a convienient stop flag */
	     if dy > y
	     then i = 0;
	     else do;				/* key will fit */
		     count = count + 1;
		     y = y - dy;
		     x = x + dx;
		     if x >= y
		     then i = 0;			/* nodes are more or less balanced */
		     else do;
			     dy = dx;
			     i = i + di;
			     call get_key (i, p, k);
			     dx = bd_len + p -> key_length (k);
			end;
		end;
	end;
	if x < 0
	then count = 0;				/* can not move enough keys to correct overflow */
	else if count > 0
	then if y < np2 -> scat_space
	     then must_compact_dest = "1"b;
	     else must_compact_dest = "0"b;
	index_substate = index_substate + 1;
	return;

	dcl     (x, y)		 fixed;		/* x is space in source node,y in target node.
						   Initially x<y. Indeed, is overflow case x<o. routine finds count

						   of keys to be moved such that x>=y if possible. Constraint is y>=o */
	dcl     (dx, dy)		 fixed;
     end;						/* end compute_count_set_nps */

     end;						/* end rotate_right */

set_dest_node_info:
     proc;
	dest_n_ptr = np2;
	dest_b_num = np2 -> last_branch_num;
	min_dest_key_pos = np2 -> low_key_pos;
     end;

move_key_down:
     proc;
	source_n_ptr = p_n_ptr;
	source_b_num = p_b_num;
	source_key_pos = source_n_ptr -> key_pos (source_b_num);
	source_key_len = source_n_ptr -> key_length (source_b_num);
	call move;
	np2 -> branch (dest_b_num + 1) = np1 -> branch (1);
     end move_key_down;

set_upbound_key:
     proc;
	call set_new_key_and_descrip (p, k);
	first_branch = p -> branch (k + 1);
	min_source_key_pos = np1 -> low_key_pos;
	new_scat_space = np1 -> scat_space;
	key_len = p -> key_length (k);
	if p -> key_pos (k) > min_source_key_pos
	then new_scat_space = new_scat_space + key_len;
	else if ^is_new_key
	then min_source_key_pos = min_source_key_pos + key_len;
	dcl     key_len		 fixed;
     end;

finish_dest_node:
     proc;
	np2 -> low_key_pos = min_dest_key_pos;
	np2 -> last_branch_num = np2 -> last_branch_num + count;
     end;

set_nps:
     proc;
	if is_overflow
	then do;
		np1 = node_ptr;
		np2 = b_n_ptr;
	     end;
	else do;
		np1 = b_n_ptr;
		np2 = node_ptr;
	     end;
     end set_nps;

finish_left_node:
     proc;					/* called after split or right rotate */
	call set_source_vars;
	if is_overflow
	then /* main node is left one */
	     if branch_num <= last_branch_num
	     then do;				/* new key must be inserted */
		     call set_new_cont_space;
		     call simple_insert (branch_num);
		end;
	     else /* new key was moved */
		np1 -> last_branch_num = np1 -> last_branch_num + 1;
     end;						/* end finish_left_node */

finish_right_node:
     proc;					/* called after left rotate */
	call set_source_vars;
	if is_overflow
	then do;					/* main node is right one */
		if branch_num <= count
		then do;				/* new key was moved */
			np1 -> last_branch_num = np1 -> last_branch_num + 1;
			call left_shift (count - 1);
		     end;
		else do;				/* new key must be inserted */
			call left_shift (count);
			call set_new_cont_space;
			call simple_insert (branch_num - count);
		     end;
	     end;
	else /* underflow case,brother node is right one */
	     call left_shift (count);
     end;						/* end finish_right_node */

set_source_vars:
     proc;
	np1 -> last_branch_num = np1 -> last_branch_num - count;
	np1 -> low_key_pos = min_source_key_pos;
	np1 -> scat_space = new_scat_space;
     end;

left_shift:
     proc (n);					/* shifts descriptors n places left within node */
	disp = n * bd_len;
	call move_bytes (np1, 1 + node_head_length + disp, -disp, bd_len * (np1 -> last_branch_num - 1));
	dcl     (disp, n)		 fixed;
     end;						/* end left_shift */

is_combination_possible:
     proc returns (bit (1));
	spare_space = space + b_space + node_head_length - node_length - p_n_ptr -> key_length (p_b_num) - bd_len;
	if spare_space >= 0
	then do;
		if spare_space < dest_np -> scat_space
		then must_compact_dest = "1"b;
		else must_compact_dest = "0"b;
		return ("1"b);
	     end;
	return ("0"b);
     end is_combination_possible;

combine:
     proc (n_ptr_1, n_ptr_2);				/* moves key  in parent and all keys in node 2 (the right node)
						   into node 1 (movement to left), deletes node 2 */
	a_s_ptr -> index_action = delete_action;
	np1 = n_ptr_2;
	np2 = n_ptr_1;
	call compact_if_nec;
	call combine_keys;
	call finish_dest_node;
	call free_node (p_n_ptr -> branch (p_b_num + 1), np1);
						/* delete right node */
	return;					/* end of combine routine */

combine_keys:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	call set_dest_node_info;
	call move_key_down;
	count = np1 -> last_branch_num;
	source_n_ptr = np1;

	do source_b_num = 1 to count - 1;
	     dest_b_num = dest_b_num + 1;
	     source_key_pos = source_n_ptr -> key_pos (source_b_num);
	     source_key_len = source_n_ptr -> key_length (source_b_num);
	     call move;
	end;

	index_substate = index_substate + 1;
     end combine_keys;

	dcl     (n_ptr_1, n_ptr_2)	 ptr;
     end;						/* end combine */

adjust_position_right:
     proc;					/* used after split or right rotation for overflow */
	call adjust_branch_num;
	if branch_num > last_branch_num
	then do;
		branch_num = branch_num - last_branch_num;
		call set_node_to_brother;
		a_s_ptr -> branch_num_adjust = 1;
	     end;
	else if branch_num = last_branch_num
	then if file_position_ptr = pos_ptr
	     then call set_current_node_to_parent;
	return;
     end;						/* end adjust_position_right */

adjust_position_left:
     proc;					/* used after left rotation for overflow */
	parent_position_ptr -> branch_num = p_b_num;
	branch_num = branch_num + branch_num_adjust - count;
	if branch_num = 0
	then if file_position_ptr = pos_ptr		/* position moves to parent */
	     then do;
		     call set_current_node_to_parent;
		     return;
		end;
	if branch_num <= 0				/* position is in left node */
	then do;
		call set_node_to_brother;
		branch_num = last_branch_num + branch_num;
	     end;
	else a_s_ptr -> branch_num_adjust = 1;		/* position is in right node */
	return;
     end;						/* end adjust_position_left */

set_node_to_brother:
     proc;
	node = b_node;
	node_ptr = b_n_ptr;
	a_s_ptr -> current_node = file_position_ptr -> node;
     end;

set_current_node_to_parent:
     proc;
	file_position_ptr = parent_position_ptr;
	a_s_ptr -> current_node = parent_position_ptr -> node;
     end;

	dcl     p			 ptr;
	dcl     k			 fixed;
     end;						/* end overflow_underflow */

create_node:
     proc (designator, node_ptr_arg);			/* ref17 */
	a_s_ptr -> number_of_nodes = number_of_nodes + 1;
	free_node_ptr = get_ptr (free_node_designator);
	call save_create_free_info;
	if free_node_designator ^= 0
	then if old_number_of_free_nodes > 0
	     then do;				/* grab a free node from the list */
		     designator = nodes (old_number_of_free_nodes);
		     number_of_free_nodes = old_number_of_free_nodes - 1;
		     node_ptr_arg = get_ptr (designator);
		end;
	     else do;				/* use this free node */
		     designator = free_node_designator;
		     node_ptr_arg = free_node_ptr;
		     a_s_ptr -> free_node_designator = old_next_node_designator;
		end;
	else if old_seg_lim + node_size <= max_seg_limit
	then do;					/* use next available page of index tail */
		call make_designator (index_tail_comp_num, (old_seg_lim), designator);
		node_ptr_arg = get_ptr (designator);
		seg_limit (index_tail_comp_num) = old_seg_lim + node_size;
	     end;
	else do;					/* get a new index file component */
		a_s_ptr -> index_tail_comp_num = new_index_comp_num;
		call get_new_seg (iocb_ptr, a_s_ptr -> index_tail_comp_num, node_ptr_arg, index_substate, abort_exit);
		comp_link (a_s_ptr -> index_tail_comp_num) = index_tail_comp_num;
		call make_designator (a_s_ptr -> index_tail_comp_num, 0, designator);
		seg_limit (a_s_ptr -> index_tail_comp_num) = node_size;
	     end;
	node_ptr_arg -> last_branch_num = 1;
	node_ptr_arg -> low_key_pos = node_length + 1;
	node_ptr_arg -> scat_space = 0;
	return;					/* end create node code */

save_create_free_info:
     proc;
	if repeating
	then do;
		call check_index_substate;
		return;
	     end;
	old_seg_lim = abs (seg_limit (index_tail_comp_num));
	old_number_of_free_nodes = number_of_free_nodes;
	old_next_node_designator = next_node_designator;
	new_index_comp_num = last_comp_num + 1;
	index_substate = index_substate + 1;
     end save_create_free_info;

free_node:
     entry (designator, node_ptr_arg);
	a_s_ptr -> number_of_nodes = number_of_nodes - 1;
	if free_node_designator ^= 0
	then do;					/* at least one free node exists */
		free_node_ptr = get_ptr (free_node_designator);
		call save_create_free_info;
		if old_number_of_free_nodes < (node_size - 2)
		then do;				/* add new entry to free list */
			number_of_free_nodes = old_number_of_free_nodes + 1;
			nodes (number_of_free_nodes) = designator;
			unspec (node_words) = "0"b;
			return;
		     end;
	     end;
	free_node_ptr = node_ptr_arg;
	number_of_free_nodes = 0;
	next_node_designator = free_node_designator;
	a_s_ptr -> free_node_designator = designator;
	return;					/* end of free_node routine */

	dcl     1 free_node		 based (free_node_ptr),
		2 number_of_free_nodes
				 fixed,
		2 next_node_designator
				 fixed (35),
		2 nodes		 (1 /* really node-size-2 */) fixed (35);
	dcl     designator		 fixed (35);
	dcl     node_ptr_arg	 ptr;
	dcl     node_words		 (node_size) fixed based (node_ptr_arg);
	dcl     free_node_ptr	 ptr;
     end create_node;

check_index_substate:
     proc;
	next_substate = next_substate + 1;
	if index_substate = next_substate
	then repeating = "0"b;			/* execution resumes normally */
     end check_index_substate;

get_ptr:
     proc (descriptor) returns (ptr);
	return (addr (seg_ptr_array (desc.comp_num) -> seg_array (fixed (desc.offset))));
	dcl     descriptor		 fixed (35);
	dcl     1 desc		 like designator_struct aligned based (addr (descriptor));
     end get_ptr;

/* Arguments */
	dcl     iocb_ptr		 ptr;
	dcl     abort_exit		 label;

/* Local Variables */
	dcl     (source_n_ptr, dest_n_ptr)
				 ptr;
	dcl     (source_b_num, source_key_pos, source_key_len, dest_b_num)
				 fixed;
	dcl     pos_ptr		 ptr;
	dcl     spare_space		 fixed;
	dcl     new_cont_space	 fixed;
	dcl     space		 fixed;
	dcl     (x, y)		 fixed;
	dcl     a_s_ptr		 ptr;

/* Constants Depending on Node Structure */
	dcl     bd_len		 static options (constant) fixed init (12);
	dcl     branch_and_descrip_size
				 static options (constant) fixed init (3);
	dcl     node_head_length	 static options (constant) fixed init (16);
						/* includes first branch */

%include vfile_indx;
%include iocbv;
     end change_index;
