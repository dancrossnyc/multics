/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* changed October, 1978 by Jim Paradise to impliment the -no_end option (see end of source for comments) */

open_uns_file:
     proc (iocb_ptr, fcb_ptr_arg, first_seg_ptr, is_new_file, mode, close_x, first_seg_bitcount, max_component_size, code);

	code = 0;
	if atb.header_present			/* -header attach option present */
	then if is_new_file				/*  set header identifier in new file */
	     then do;				/* initialize header */
		     call hcs_$set_bc_seg (first_seg_ptr, 36 * size (header), code);
		     if code ^= 0
		     then return;			/* shouldn't happen */
		     first_seg_ptr -> header.identifier = atb.header_id;
		end;
	     else if (first_seg_ptr -> file_code ^= uns_code)
		     | ((first_seg_ptr -> header.identifier ^= atb.header_id) & (atb.header_id ^= 0))
	     then do;				/* signal error--identifiers must match */
		     code = error_table_$incompatible_attach;
		     return;			/* opening is unsuccessful */
		end;
	call create_initialize_cb;
	close_x = close_uns_file;
	control = control_uns_file;
	if mode = 1				/* input */
	then do;
		get_line = get_line_uns_file;
		get_chars = get_chars_uns_file;
		position = position_uns_file;
	     end;
	else if mode = 2				/* output */
	then do;
		put_chars = fast_put;
	     end;
	else do;					/* input - output */
		get_line = get_line_uns_file;
		get_chars = get_chars_uns_file;
		position = position_uns_file;
		put_chars = fast_put;
	     end;
	return;					/* end open routine */

control_uns_file:
     entry (iocb_ptr, order, info_ptr, code);
	code = 0;
	call get_current_state;

	if order = "read_position"
	then if current_state = read_state
	     then do;
		     info.next_position = base_pos + read_pos - 1;
						/* essentially the defining
						   relationship for absolute position in the read state */
		     info.end_position = end_pos;	/* always valid in read state */
		end;
	     else if current_state = write_state
	     then do;
		     info.next_position = base_pos + write_pos - 1;
						/* -1 because byte offset
						   starts with 1 at base of segment */
		     info.end_position = info.next_position;
						/* pos always at eof in write state */
		end;
	     else do;				/* beyond eof */
		     info.next_position = base_pos + write_pos - 1;
		     info.end_position = end_pos;
		end;

/* for debugging
   else if order = "display_uns_cb" then call display_uns_cb;
*/

	else if (order = "truncate") & (^input_only)
	then do;
		if current_state = read_state
		then do;				/* might not be at eof so truncate */
			call truncate_and_change_to_write;
			code = foo;		/* what the hell */
		     end;
		else if current_state = beyond_eof_state
		then code = error_table_$no_operation;	/* not allowed */
	     end;

	else if order = "file_status"
	then do;
		call vfile_status_$seg (iocb_ptr, file_base_ptr, info_ptr, code);
		return;
	     end;

	else if order = "io_call"
	then call vfile_io_control (iocb_ptr, file_base_ptr, info_ptr, code);
	else code = error_table_$no_operation;

	return;					/* end of control routine */

create_initialize_cb:
     proc;
	call alloc_cb_file (size (cb_uns_file), open_data_ptr);
	write_limit = 4 * max_component_size + 1;
	beyond_limits = 2 ** 34 - 1;
	fcb_ptr = fcb_ptr_arg;
	seg_ptr = first_seg_ptr;
	call hcs_$status_mins (seg_ptr, foo2, bitcount, foo35);
	component = 0;
	header_is_present = atb.header_present;		/* -header option was used for attachment */
	if header_is_present
	then base_pos = -4 * size (header);		/* absolute byte position of file base is negative */
	else base_pos = 0;				/* no header--first byte is byte_0 */
	if is_new_file & header_is_present
	then end_seg = 4 * size (header) + 1;
	else end_seg = divide (first_seg_bitcount + 8, 9, 21, 0) + 1;
	read_pos = 1 - base_pos;			/* byte offset of zeroth position in file */
	tail_len = end_seg - read_pos;		/* bytes remaining beyond next_pos in this segment */
	write_pos, old_write_pos = beyond_limits;	/* start in read state */
	input_only = (mode = 1);			/* stream_input */
	ssf_sw = atb.ssf;				/* -ssf option indicates no msf's allowed */
	noend = atb.noend_sw;			/* -no_end attach option */
	is_msf = atb.msf;				/* on if already an msf */
	append_sw = atb.appending;			/* -append attachment */
	no_trunc_sw = atb.no_trunc;			/* -no_trunc attach option */
	current_state = read_state;
	call set_end_pos;				/* gets total byte count of file */
	if (mode = 2) | (^append_sw & ^no_trunc_sw & (mode = 3))
						/* start in write state */
	then do;
		write_pos, old_write_pos = read_pos;	/* tail_len already zero */
		current_state = write_state;		/* for completeness */
	     end;
	file_base_ptr = seg_ptr;
     end;						/* end create_initialize_cb */


close_uns_file:
     entry (iocb_ptr);
	call get_current_state;
	call change_to_read_state;
						/* sets bit count of file */
	call free_cb_file (size (cb_uns_file), open_data_ptr);
	return;					/* end close routine */

get_chars_uns_file:
     entry (iocb_ptr, buff_ptr, buff_len, rec_len, code);
	call get_current_state;
	if current_state = beyond_eof_state
	then do;
		code = error_table_$end_of_info;
		rec_len = 0;			/* no data */
		return;
	     end;
	len = min (tail_len, buff_len);
	if len > 0
	then do;
		buffer = record_read;
		read_pos = read_pos + len;
		tail_len = tail_len - len;
		if buff_len = len			/* all bytes moved */
		then do;
			code = 0;
			rec_len = len;
		     end;
		else do;				/* exceptional case_end of segment */
			call get_chars_uns_file (iocb_ptr, addr (buff_tail), buff_len - len, rec_len, code);
			rec_len = rec_len + len;
			if (code ^= 0) & (rec_len > 0)
			then code = error_table_$short_record;
		     end;
	     end;
	else if buff_len <= 0
	then do;					/* no move */
		code = 0;
		rec_len = 0;
	     end;
	else do;					/* end of segment case */
		call next_seg_read;
		if code ^= 0 & code ^= error_table_$end_of_info
						/* msf error */
		then return;
		if code ^= 0
		then rec_len = 0;
		else call get_chars_uns_file (iocb_ptr, buff_ptr, buff_len, rec_len, code);
	     end;
	return;					/* end get chars routine */

get_line_uns_file:
     entry (iocb_ptr, buff_ptr, buff_len, rec_len, code);
	call get_current_state;
	if current_state = beyond_eof_state
	then do;
		code = error_table_$end_of_info;
		rec_len = 0;			/* no data */
		return;
	     end;
	len = min (tail_len, buff_len);
	if len > 0
	then do;
		len2 = len;
		len = index (record_read, new_line);
		if len ^= 0			/* new line found */
		then do;
			code = 0;
			buffer = record_read;
			rec_len = len;
			read_pos = read_pos + len;
			tail_len = tail_len - len;
		     end;
		else do;				/* new_line not found */
			len = len2;
			buffer = record_read;	/* move len bytes */
			read_pos = read_pos + len;
			tail_len = tail_len - len;
			if buff_len = len
			then do;			/* long record case */
				rec_len = len;
				code = error_table_$long_record;
			     end;
			else do;			/* end of segment case */
				call get_line_uns_file (iocb_ptr, addr (buff_tail), buff_len - len, rec_len, code);
				rec_len = rec_len + len;
				if (code ^= 0) & (rec_len > 0)
				then code = error_table_$short_record;
			     end;
		     end;
	     end;
	else if buff_len <= 0
	then do;					/* no move */
		code = error_table_$long_record;
		rec_len = 0;
	     end;
	else do;					/* end of segment case */
		call next_seg_read;
		if code ^= 0 & code ^= error_table_$end_of_info
						/* msf error */
		then return;
		if code ^= 0
		then rec_len = 0;
		else call get_line_uns_file (iocb_ptr, buff_ptr, buff_len, rec_len, code);
	     end;
	return;					/* end of get_line routine */

skip_record:
     proc;					/* skips one record and (as needed by read) increments len2 by
						   length skipped, excluding new_line */
	do while ("1"b);				/* may cross boundaries of msf components */
	     len = tail_len;
	     if len ^= 0
	     then do;
		     len = index (record_read, new_line);
		     if len ^= 0
		     then do;			/* new line found */
			     code = 0;
			     len2 = len2 + len - 1;
			     read_pos = read_pos + len;
			     tail_len = tail_len - len;
			     return;
			end;
		     else do;			/* record extends to next seg */
			     len2 = len2 + tail_len;
			     read_pos = read_pos + tail_len;
			     tail_len = 0;
			end;
		end;
	     else do;				/* at end of seg */
		     call next_seg_read;
		     if code ^= 0
		     then return;
		end;
	end;
     end;						/* end skip record */

next_seg_read:
     proc;
	if current_state ^= read_state
	then code = error_table_$end_of_info;
	else do;
		foo = 0;
		if ^is_msf
		then next_seg_ptr = null;
		else do;
			call msf_manager_$get_ptr (fcb_ptr, component + 1, "0"b, next_seg_ptr, bitcount, foo);
		     end;
		if next_seg_ptr = null
		then do;
			if foo ^= 0		/* msf error? */
			then do;			/* return a code back */
				if foo = error_table_$noentry
						/* way to find eof */
				then code = error_table_$end_of_info;
				else code = foo;	/* return the code */
			     end;
			else code = error_table_$end_of_info;
			return;
		     end;
		else do;
			base_pos = base_pos + end_seg - 1;
						/* absolute byte position of new seg base */
			seg_ptr = next_seg_ptr;
			call hcs_$status_mins (seg_ptr, foo2, bitcount, foo35);
			component = component + 1;
			tail_len = divide (bitcount + 8, 9, 21, 0);
			end_seg = tail_len + 1;
			read_pos = 1;
			code = 0;
		     end;
	     end;
     end;						/* end next seg read */

position_uns_file:
     entry (iocb_ptr, pos_type, skip, code);
	call get_current_state;
	if pos_type = 0
	then call position_skip;
	else if pos_type = 2			/* direct positioning */
	then call position_abs;
	else if pos_type = 1
	then call position_eof;
	else if pos_type ^= -1
	then code = error_table_$bad_arg;
	else call position_bof;
	return;					/* end position routine */

change_to_read_state:
     proc;					/* no effect if already in read state */
	if current_state = read_state
	then return;
	if current_state = beyond_eof_state
	then write_pos, old_write_pos = beyond_limits;	/* switch to read state
						   no change, since the positioning absolute to beyond eof
						   did a position_eof before everything */
	else do;
		end_seg = write_pos;
		read_pos = write_pos;
		end_pos = base_pos + end_seg - 1;	/* must be last comp since write state */
		tail_len = 0;
		write_pos, old_write_pos = beyond_limits;
		call hcs_$set_bc_seg (seg_ptr, 9 * (end_seg - 1), foo);
	     end;
     end;						/* end change_to_read_state */


position_abs:
     proc;					/* sets position directly to specified byte */
	if skip < 0				/* negative absolute position is undefined */
	then code = error_table_$negative_nelem;
	else do;
		call change_to_read_state;
		code = 0;
		if skip >= end_pos
		then do;
			call position_eof;
			if skip > end_pos		/* attempt to pass eof */
			then if ^noend		/* not allowed by specifying -no_end */
			     then code = error_table_$end_of_info;
			     else do;		/* -no_end specified */
				     write_pos, old_write_pos = skip + 1 - base_pos;
						/* set the position beyond to the absolute position: */
				     current_state = beyond_eof_state;
				end;		/* segment(s) may not be defined */
			return;			/* done processing in this case */
		     end;

		do while ((skip < base_pos) & (code = 0));
						/* requested pos in previous component */
		     call prev_seg_read;
		end;

		do while ((skip >= base_pos + end_seg) & (code = 0));
						/* requested pos in succeeding component */
		     call next_seg_read;
		end;

		if code ^= 0 & code ^= error_table_$end_of_info
						/* msf error */
		then return;

		if code = 0			/* position lies within current segment */
		then do;
			read_pos = skip + 1 - base_pos;
						/* set next byte offset for reading */
			tail_len = end_seg - read_pos;
						/* bytes following next in this segment */
		     end;
	     end;
     end position_abs;

position_skip:
     proc;
	if skip > 0
	then do;					/* check if pos'ed after eof */
		if current_state = beyond_eof_state
		then do;
			code = error_table_$end_of_info;
			return;
		     end;
		else do;				/* forwards skip */
			code = 0;
			count = skip;
			do while (count > 0);
			     len2 = 0;		/* skip record increments this for read */
			     call skip_record;
			     if code ^= 0 & code ^= error_table_$end_of_info
						/* msf error */
			     then return;
			     if code ^= 0
			     then count = 0;
			     else count = count - 1;
			end;
		     end;
	     end;
	else do;					/* backwards skip */
		count = -skip;
		code = 0;
		call change_to_read_state;
		do while (count > 0);
		     call find_preceding_new_line;
		     if code = 0
		     then count = count - 1;
		     else count = 0;
		end;
		if code = 0			/* positioned at new_line character */
		then do;
			call find_preceding_new_line;
			if code = 0		/* positioned at new_line character */
			then call get_chars_uns_file (iocb_ptr, addr (dummy_buffer), 1, foo21, foo);
						/* skips over new line character */
			code = 0;
		     end;
	     end;
     end position_skip;

find_preceding_new_line:
     proc;
						/* this moves read_pos back to first preceding new_line
						   character or beginning of file if there is none.
						   In the latter case code is set to end_of_info */

	do while (code = 0);			/* may cross msf component boundaries */
	     flag = "1"b;
	     k = read_pos;
	     if header_is_present
	     then if component = 0
		then min_pos = 4 * size (header) + 1;	/* can't position beneath header */
		else min_pos = 1;
	     else min_pos = 1;
	     do while (flag);
		k = k - 1;
		if k < min_pos			/* at base of segment */
		then flag = "0"b;
		else if seg (k) = new_line
		then flag = "0"b;
	     end;
	     if k >= min_pos			/* new_line found */
	     then do;
		     code = 0;
		     read_pos = k;
		     tail_len = end_seg - k;
		     return;
		end;
	     else do;				/* beginning of segment */
		     read_pos = min_pos;
		     tail_len = end_seg - read_pos;
		     if component = 0		/* beginning of file */
		     then do;
			     code = error_table_$end_of_info;
			     return;
			end;
		     else call prev_seg_read;		/* moves pos to end of prev seg */
		end;
	end;

	dcl     flag		 bit (1) aligned;
	dcl     (k, min_pos)	 fixed bin (21);
     end;						/* end_find_preceding_line */
	dcl     count		 fixed bin;
	dcl     foo21		 fixed bin (21);

position_eof:
     proc;
	if current_state = beyond_eof_state
	then do;
		call change_to_read_state;
	     end;
	code = 0;
	if current_state = read_state
	then do;
		do while (code = 0);
		     call next_seg_read;
		end;
		if code ^= error_table_$end_of_info	/* msf error */
		then return;
		code = 0;
		read_pos = end_seg;
		tail_len = 0;
	     end;
     end;						/* end position_eof */

position_bof:
     proc;					/* sets position to beginning of file */
	code = 0;
	call change_to_read_state;
	if ^is_msf
	then do;					/* current segment must be first */
		read_pos = 1 - base_pos;
		tail_len = end_seg - read_pos;
		return;
	     end;
	call msf_manager_$get_ptr (fcb_ptr, 0, "0"b, next_seg_ptr, bitcount, foo);
	if next_seg_ptr ^= null
	then do;
		seg_ptr = next_seg_ptr;
		call hcs_$status_mins (seg_ptr, foo2, bitcount, foo35);
		component = 0;
		if header_is_present
		then base_pos = -4 * size (header);	/* abs pos of first seg base is neg */
		else base_pos = 0;			/* first byte in seg is zeroth absolute byte position */
		end_seg = divide (bitcount + 8, 9, 21, 0) + 1;
		read_pos = 1 - base_pos;
		tail_len = end_seg - read_pos;	/* always holds in read state */
	     end;
	else code = foo;
     end position_bof;

put_chars_uns_file:
     entry (iocb_ptr, buff_ptr, buff_len, code);
	code = 0;
	call get_current_state;
	len = max (buff_len, 0);
	old_pos = write_pos;
	write_pos, old_write_pos = write_pos + len;
	if write_pos <= write_limit			/* normal case */
	then do;
		record_write = buffer;
	     end;
	else if old_pos < write_limit			/* long record case */
	then do;
		len = write_limit - old_pos;
		write_pos, old_write_pos = write_limit;
		record_write = buffer;
		call put_chars_uns_file (iocb_ptr, addr (buff_tail), buff_len - len, code);
	     end;
	else do;					/* end of seg or read state */
		write_pos, old_write_pos = old_pos;
		code = 0;
		if write_pos = write_limit		/* end of seg case */
		then call new_seg_write;
		else if current_state = beyond_eof_state
		then do;				/* spacing beyond eof */
			do while ((write_pos > write_limit) & (code = 0));
						/* space to proper component */
			     old_pos = write_pos;	/* save position */
			     call new_seg_write;	/* write out seg, and get new one */
			     write_pos, old_write_pos = old_pos - write_limit + 1;
			     end_seg = write_pos;
			end;
			if code = 0		/* only continue if no errors */
			then do;			/* output the characters */
				current_state = write_state;
				call put_chars_uns_file (iocb_ptr, buff_ptr, buff_len, code);
						/* output */
				return;		/* done */
			     end;
		     end;
		else if append_sw			/* -append attachment */
		then do;				/* go to end of file and change to write state */
			call position_eof;		/* sets tail_len to 0 */
			write_pos, old_write_pos = end_seg;
						/* changes to write state */
			current_state = write_state;
		     end;
		else if ^no_trunc_sw		/* did not use -no_trunc option */
		then call truncate_and_change_to_write;
		else do;				/* rewrite and possibly append */
			if buff_len <= 0
			then return;		/* no-op in this case */
			if tail_len > 0		/* not yet at end of seg */
			then do;			/* replace bytes in tail */
				len = min (tail_len, buff_len);
						/* may need next comp */
				old_pos = read_pos; /* start at read position */
				record_write = buffer;
						/* move buffer contents */
				read_pos = read_pos + len;
						/* advance next position */
				tail_len = tail_len - len;
						/* fewer chars remain */
				if buff_len > len	/* part of buffer not moved */
				then call put_chars_uns_file (iocb_ptr, addr (buff_tail), buff_len - len, code);
						/* move rest of buffer */
				return;		/* finished put operation */
			     end;
			else do;			/* end of segment case */
				call next_seg_read; /* looks for next component */
				if code ^= 0	/* end of file */
				then do;
					write_pos, old_write_pos = end_seg;
						/* change to write state */
					current_state = write_state;
					code = 0; /* not an error */
				     end;
			     end;
		     end;
		if code = 0
		then call put_chars_uns_file (iocb_ptr, buff_ptr, buff_len, code);
	     end;
	current_state = write_state;
	return;					/* end put chars routine */

prev_seg_read:
     proc;					/* moves position to end of previous component */
	call msf_manager_$get_ptr (fcb_ptr, component - 1, "0"b, next_seg_ptr, bitcount, foo);
	if next_seg_ptr = null
	then do;
		code = error_table_$bad_file;
		return;
	     end;
	else do;
		seg_ptr = next_seg_ptr;
		component = component - 1;
		read_pos = divide (bitcount + 8, 9, 21, 0) + 1;
						/* position at end of seg */
		end_seg = read_pos;
		tail_len = 0;
		if (header_is_present) & (component = 0)
		then base_pos = -4 * size (header);	/* offsets header at file base */
		else base_pos = base_pos - end_seg + 1; /* subtract contents of prev segment */
	     end;
     end prev_seg_read;

new_seg_write:
     proc;
	if ssf_sw					/* prevents adding new component */
	then do;					/* flag the error */
		code = error_table_$file_is_full;
		return;
	     end;
	if ^is_msf				/* single segment */
	then do;
		call msf_manager_$open (substr (attach_descrip_string, 8, dname_len),
		     substr (attach_descrip_string, 9 + dname_len, ename_len), fcb_ptr, foo);
		is_msf = "1"b;
		atb.fcbp = fcb_ptr;
	     end;
	call msf_manager_$get_ptr (fcb_ptr, component + 1, "1"b, next_seg_ptr, foo24, foo);
	if next_seg_ptr = null
	then code = foo;
	else do;
		call hcs_$set_bc_seg (seg_ptr, 9 * (write_limit - 1), foo);
		seg_ptr = next_seg_ptr;
		component = component + 1;
		write_pos, old_write_pos = 1;
		base_pos = base_pos + write_limit - 1;	/* set base position of new comp */
		end_seg = 1;
		read_pos = 1;
		code = 0;
	     end;
     end;						/* end new_seg_write */

set_end_pos:
     proc;					/* determines number of bytes in file */
	if is_new_file
	then end_pos = 0;				/* file is empty */
	else do;					/* get last component, set end_pos , and reset position if necessary */
		call position_eof;			/*  finds last component */
		end_pos = base_pos + end_seg - 1;	/* base pos was set by position_eof */
		if (mode = 1) | ((mode = 3) & (append_sw | no_trunc_sw))
						/* bof at open */
		then call position_bof;		/* resets positions */
	     end;
     end set_end_pos;

truncate_and_change_to_write:
     proc;
	end_seg = read_pos;
	write_pos, old_write_pos = end_seg;
	current_state = write_state;
	tail_len = 0;
	call hcs_$set_bc_seg (seg_ptr, 9 * (end_seg - 1), foo);
	if ^is_msf
	then call hcs_$truncate_seg (seg_ptr, divide (end_seg + 2, 4, 18, 0), foo);
	else call msf_manager_$adjust (fcb_ptr, component, 9 * (end_seg - 1), "010"b, foo);
     end;						/* end truncate_and_change_to_write */

get_current_state:
     proc;
	if write_pos = beyond_limits
	then do;
		current_state = read_state;
		return;
	     end;
	if write_pos ^= old_write_pos			/* fast_put has done some work */
	then do;
		current_state = write_state;
		return;
	     end;
	if current_state = beyond_eof_state
	then return;
	current_state = write_state;
	return;
     end get_current_state;

/* for debugging
   display_uns_cb: proc;
   call ioa_ ( "uns_cb: ^p ^- current_state: ^d ^- write_limit: ^d ^- is_msf: ^b",
   open_data_ptr, current_state, write_limit, is_msf);
   call ioa_ ( "ptrs: ^-fcb: ^p ^-file_base: ^p ^-comp num: ^d ^-seg: ^p",
   fcb_ptr, file_base_ptr, component, seg_ptr );
   call ioa_ ( "read_pos: ^d ^-tail_len: ^d ^-base_pos: ^d ^-end_pos: ^d",
   read_pos, tail_len, base_pos, end_pos );
   call ioa_ ( "end_seg: ^d ^-write_pos: ^d ^-old_write_pos: ^d",
   end_seg, write_pos, old_write_pos );
   return;
   end;
*/

/* DECLARATIONS FOR WHOLE PROGRAM */
	dcl     (vfile_io_control, vfile_status_$seg)
				 entry (ptr, ptr, ptr, fixed (35));
	dcl     fast_put		 entry (ptr, ptr, fixed (21), fixed (35));
	dcl     max		 builtin;
	dcl     addr		 builtin;
	dcl     alloc_cb_file	 entry (fixed bin, ptr);
	dcl     bitcount		 fixed bin (24);
	dcl     buffer		 char (len) based (buff_ptr);
						/* len is length
						   that will be used in data transfer */
	dcl     buff_len		 fixed bin (21);	/* length as specified in call */
	dcl     buff_ptr		 ptr;
	dcl     buff_tail		 char (buff_len - len) based (addr (buff_array (len + 1)));
						/* remainder of buffer after
						   data transfer, its length is > 0 */
	dcl     buff_array		 (buff_len) char (1) based (buff_ptr);
	dcl     1 header		 based (seg_ptr),	/* optional header for unstructured files */
		2 common_header_words,
		  3 file_code	 fixed,		/* identifies file type */
		  3 words		 (3) fixed,
		2 identifier	 fixed (35),	/* user defined field */
		2 words		 (11) fixed;	/* for possible future use */
	dcl     uns_code		 static internal fixed init (31191);
%include vf_attach_block;
	dcl     order		 char (*);
	dcl     info_ptr		 ptr;
	dcl     1 info		 based (info_ptr),	/* used for "read_position" order */
		2 next_position	 fixed (34),	/* absolute position of next byte */
		2 end_position	 fixed (34);	/* total number of bytes in the file */
	dcl     1 cb_uns_file	 based (open_data_ptr),
		2 seg_ptr		 ptr,		/* ptr to base of current segment in file */
		2 write_limit	 fixed bin (34),	/* 1+(max size of first component) */
		2 beyond_limits	 fixed bin (34),	/* max 34 bit number */
		2 fcb_ptr		 ptr,		/* ptr to msf_manager control block */
		2 component	 fixed bin,	/* component number for current seg */
		2 end_seg		 fixed bin (34),	/* in read state =
						   first byte beyond countents of current segment
						   in write state is same for moment write state
						   entered */
		2 read_pos	 fixed bin (34),	/* in read state =
						   next byte to be read, in write state is
						   same as end_seg */
		2 tail_len	 fixed bin (34),	/* in read state = number of
						   bytes remaining in current seg, in
						   write state = 0 */
		2 write_pos	 fixed bin (34),	/* in read state =
						   beyond_limits, in write state = next byte
						   to be written.  Hence write_pos = write_limit
						   is end of segment condition for writing */
		2 base_pos	 fixed (34),	/* absolute position of first byte in current seg */
		2 end_pos		 fixed (34),	/* in read state gives total byte count of file */
		2 input_only	 bit (1) aligned,	/* mode is stream_input */
		2 append_sw	 bit (1) aligned,	/* -append attach option used */
		2 no_trunc_sw	 bit (1) aligned,	/* -no_trunc option */
		2 header_is_present	 bit (1) aligned,	/* -header option */
		2 ssf_sw		 bit (1) aligned,	/* prevents growth to msf */
		2 is_msf		 bit (1) aligned,	/* set when msf opened */
		2 file_base_ptr	 ptr,
		2 noend		 bit (1) aligned,	/* -no_end attach option */
		2 old_write_pos	 fixed (34),	/* save of the previous write_pos to determine
						   if fast_put did any writing */
		2 current_state	 fixed bin;	/* what state the file is in at time of entry */
	dcl     close_x		 entry;
	dcl     code		 fixed bin (35);
	dcl     divide		 builtin;
	dcl     dummy_buffer	 char (1);
	dcl     error_table_$bad_file	 external fixed bin (35);
	dcl     error_table_$short_record
				 external fixed (35) static;
	dcl     (error_table_$incompatible_attach, error_table_$file_is_full, error_table_$no_operation,
	        error_table_$negative_nelem)
				 fixed (35) external static;
	dcl     error_table_$end_of_info
				 external fixed bin (35);
	dcl     error_table_$noentry	 external fixed bin (35);
	dcl     error_table_$long_record
				 external fixed bin (35);
	dcl     error_table_$bad_arg	 external fixed bin (35);
	dcl     fcb_ptr_arg		 ptr;
	dcl     first_seg_ptr	 ptr;
	dcl     first_seg_bitcount	 fixed bin (24);
	dcl     foo		 fixed bin (35);
	dcl     foo2		 fixed bin (2);
	dcl     foo24		 fixed bin (24);
	dcl     foo35		 fixed bin (35);
	dcl     free_cb_file	 entry (fixed bin, ptr);
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     hcs_$terminate_noname	 entry (ptr, fixed (35));
	dcl     hcs_$truncate_seg	 entry (ptr, fixed (18), fixed (35));
	dcl     msf_manager_$open	 entry (char (*), char (*), ptr, fixed (35));
	dcl     hcs_$set_bc_seg	 entry (ptr,	/* ptr to segment */
				 fixed bin (24),	/* bitcount */
				 fixed bin (35));	/* status code */
	dcl     index		 builtin;
	dcl     is_new_file		 bit (1) aligned;
						/* for debugging
						   dcl ioa_ entry options (variable);
						*/
	dcl     iocb_ptr		 ptr;		/* for open and close entries this points to the actual iocb.
						   for other entries it points to an iocb that may be syned */
	dcl     len		 fixed bin (21);	/* length of string to be
						   moved in one operation */
	dcl     len2		 fixed bin (21);
	dcl     max_component_size	 fixed bin (19);
	dcl     min		 builtin;
	dcl     mode		 fixed bin;	/* = 1, 2, or 3 */
	dcl     msf_manager_$adjust	 entry (ptr,	/* fcb_ptr */
				 fixed bin,	/* component number of segment to be
						   made last segment */
				 fixed bin (24),	/* bitcount for that seg -- not reliable */
				 bit (3),		/* "010" =  don't set bit counts (use hcs_$set_bc_seg), truncate
						   segment, dont terminate components */
				 fixed bin (35));	/* status code */
	dcl     msf_manager_$get_ptr	 entry (ptr,	/* fcb_ptr */
				 fixed bin,	/* component number of desired segment */
				 bit (1),		/* create switch */
				 ptr,		/* ptr to seg or null if error, output */
				 fixed bin (24),	/* bitcount of segment, output */
				 fixed bin (35));	/* status code */
	dcl     null		 builtin;
	dcl     next_seg_ptr	 ptr;
	dcl     new_line		 static internal char (1) init ("
");
	dcl     old_pos		 fixed bin (21);
	dcl     pos_type		 fixed bin;
	dcl     record_read		 char (len) based (addr (seg (read_pos)));
	dcl     record_write	 char (len) based (addr (seg (old_pos)));
	dcl     rec_len		 fixed bin (21);
	dcl     seg		 (1048576) char (1) based (seg_ptr);
	dcl     skip		 fixed (34);
	dcl     size		 builtin;
						/* state variables */
	dcl     read_state		 fixed bin init (1);
	dcl     beyond_eof_state	 fixed bin init (2);
	dcl     write_state		 fixed bin init (3);
%include iocbv;

/* GENERAL COMMENTS
   This external procedure implements io to-from
   unstructured files.  The entries open and close are
   called from open_file and close_file, see vfile_attach .
   They setup (respectively free) the control block, which
   the other entries access through open_data_ptr
   in the actual iocb.  The other entries are called
   through the iocb.  The code for each entry immediately
   follows the entry and terminates with a return
   statement.

   Before reading the code, familiarize yourself with
   the general conventions for implementing attachments
   (see the MPM), and the specs for the operations.


   At the beginning (and again at the end) of an
   operation (e.g. get_line), the control block is
   in either the read state or the write state.
   See the declaration of cb_uns_file for details.
   The two states are distinguished by the value
   of write_pos, but there are other differences as well.

   The general method for each operation is to test for
   the nonexceptional case, control block in the
   correct state and the buffer not too long for
   the remainder of the segment.  In the exceptional
   cases some progress is made, i.e. some data is
   transferred, or the contro blocks state is
   changed, or a new segment is obtained.  Then
   the operation is completed by a recursive call. */

/* changes due to implimenting of the -no_end option:
   1. operations were changed to accept the idea of being beyond end-of-file (eof)
   2. the positioning to allow the changing of write_pos to be greater than the end_pos
   3. a way of identifying the state of the file
   4. a new state of the file was added: beyond eof
   5. the write_pos needed to be stored away in another place to be able to determine
   that fast_put had done some work, and therefore the file was in write state
   6. mostly in need of determining if there was a problem in msf_manager_
   changes were made to allow error codes other than expected to reflect through
*/
     end /* end of open_uns_file program */;
