/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* record_stream_ program for handling stream output mode of opening */
rs_open_str_out_:
     proc (iocb_ptr_arg);
	iocb_ptr = iocb_ptr_arg;
						/* set entry in iocb for valid operation */
	put_chars = put_chars_rs;
	return;					/* finished with opening routine */

put_chars_rs:
     entry (iocb_ptr_arg, buff_ptr_arg, buff_len_arg, code);
	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
	rsab_ptr = attach_data_ptr;
	rs_buff_ptr = open_data_ptr;
	buff_len = buff_len_arg;
	buff_ptr = buff_ptr_arg;
	if buff_len_arg < 0
	then code = error_table_$negative_nelem;
	else do;					/* process characters in output buffer */
		code = 0;
		if length_n <= 0
		then /* default case */
		     do while ((buff_len > 0) & (code = 0));
			line_len = index (buffer, newline) - 1;
			if line_len ^= 0
			then /* non-null line in output buffer */
			     if line_len < 0	/* no newline found */
			     then go to append;	/* append remaining chars to rs_buffer */
			     else /* newline found in output buffer */
				if n_left > 0
			     then /* rs_buffer not empty */
				do;		/*  append rest of line to rs_buffer and flush */
				     substr (rs_buffer, n_left + 1, line_len) = substr (buffer, 1, line_len);
				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, line_len + n_left, code);
				     n_left = 0;
				end;		/* rs_buffer now empty */
			     else call iox_$write_record (target_iocb_ptr, buff_ptr, line_len, code);
			buff_len = buff_len - line_len - 1;
			buff_ptr = addr (buff (line_len + 2));
		     end;				/* end of default case */

		else do;				/* -length  n case */
			if n_left > 0
			then /* rs_buffer not empty */
			     if n_left + buff_len >= length_n
			     then /* enough for full record */
				do;		/* append and write out record from rs_buffer */
				     tail_len = length_n - n_left;
				     substr (rs_buffer, n_left + 1, tail_len) = substr (buffer, 1, tail_len);
				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, length_n, code);
				     buff_len = buff_len - tail_len;
				     buff_ptr = addr (buff (tail_len + 1));
				     n_left = 0;	/* rs_buffer mpty */
				end;
			     else go to append;	/* not enough for full record to be written */

			do while (buff_len >= length_n);
			     call iox_$write_record (target_iocb_ptr, buff_ptr, length_n, code);
			     buff_len = buff_len - length_n;
			     buff_ptr = addr (buff (length_n + 1));
			end;			/* fewer than length_n characters remain */

append:
			if buff_len > 0
			then /* characters remain, but not enough for a full record */
			     do;			/* append remaining chars to rs_buffer */
				substr (rs_buffer, n_left + 1, buff_len) = buffer;
				n_left = n_left + buff_len;
			     end;
		     end;				/* end of -length n case */
	     end;					/* no more characters to process */
	return;					/* end of put_chars routine */

/* declarations for entire program */
	dcl     (iocb_ptr_arg, iocb_ptr)
				 ptr;
	dcl     code		 fixed (35);
%include rs_attach_block;
%include iocbv;
%include rs_buffer;
	dcl     iox_$write_record	 entry (ptr, ptr, fixed (21), fixed (35));
	dcl     (buff_ptr_arg, buff_ptr)
				 ptr;
	dcl     buffer		 char (buff_len) based (buff_ptr);
	dcl     (buff_len_arg, buff_len)
				 fixed (21);
	dcl     error_table_$negative_nelem
				 external fixed (35);
	dcl     line_len		 fixed (21);
	dcl     (addr, index, size, substr)
				 builtin;
	dcl     newline		 char (1) static internal aligned init ("
");
	dcl     buff		 (buff_len) char (1) based (buff_ptr);
	dcl     tail_len		 fixed (21);


     end rs_open_str_out_;
