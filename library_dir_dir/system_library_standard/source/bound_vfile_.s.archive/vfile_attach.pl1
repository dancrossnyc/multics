/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-07-01,GWMay), approve(87-07-01,MCR7730), audit(87-08-10,JRGray),
     install(87-09-10,MR12.1-1104):
     Added the -truncate, -tc argument so that the -extend arg can be
     overriden.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */
vfile_attach:
   proc (iocb_ptr_arg, option_array, command_switch, code);

/* Modified:
04/05/82 by Lindsey Spratt:  Changed to correctly report the blocking value,
	  the wait-time for the share option, and the identifier for the
	  unstructured header.  If more than one of these was present in the
	  attach options, the values for all of them would be reported as
	  being the same as the value for the last one given.  Also, changed
	  "-exclu" to "-exclusive" in the attach description, as -exclu is
	  not a valid attach option.
*/
/* Declarations and general comments are at the end
   of the program. */

      iocb_ptr = iocb_ptr_arg;
      call verify_and_interpret_args;
      if trans_opt & (code = 0)			/* -transaction attachment */
      then
         do;
	  call iox_$look_iocb ((tcf_name), tcf_ptr, code);
	  if code = 0
	  then if tcf_ptr -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr ^= null
	       then if index (tcf_ptr -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr -> attach_descrip_string,
		       "-stationary") ^= 0
		  then
		     do;				/* complain */
		        code = error_table_$incompatible_attach;
		        call sub_err_ (code, "vfile_", "c", null,
			   "The tcf switch must not be attached with the -stationary option.");
		     end;
         end;
      if code = 0
      then call create_attach_block;
      if code = 0
      then
         do;					/* set pointers, entries in iocb */
	  attach_data_ptr = attach_block_ptr;
	  attach_descrip_ptr = addr (attach_descrip);
	  open = open_file;
	  control = control_file;			/* file_status supported with switch closed */
	  detach_iocb = detach_file;
	  call iox_$propagate (iocb_ptr);
         end;
      else if command_switch
      then call com_err_ (code, "vfile_", "^a", name);
      return;

verify_and_interpret_args:
   proc;
      if attach_descrip_ptr ^= null
      then code = error_table_$not_detached;
      else if length (option_array (1)) > 168
      then code = error_table_$pathlong;
      else
         do;
	  code = 0;
	  n_opts = hbound (option_array, 1);
	  if n_opts > 10
	  then code = error_table_$bad_arg;
	  else
	     do i = 2 to n_opts while (code = 0);
	        if option_array (i) = "-extend"
	        then extend_attach_option = "1"b;
	        else if option_array (i) = "-truncate" | option_array (i) = "-tc"
	        then extend_attach_option = "0"b;

	        else if option_array (i) = "-share"
	        then
		 do;				/* pick up wait_time */
		    shared_option = "1"b;
		    call get_n_opt (wait_time_option);	/* pick up number */
		    if wait_time_option < -1
		    then code = error_table_$bad_arg;
		 end;
	        else if option_array (i) = "-blocked"	/* blocked file */
	        then
		 do;				/* pick up max_rec_len if given */
		    blocked_option = "1"b;
		    call get_n_opt (max_recl);	/* get optional number */
		    if max_recl < 0
		    then code = error_table_$negative_nelem;
		 end;
	        else if option_array (i) = "-append"
	        then append_option = "1"b;
	        else if option_array (i) = "-no_trunc"
	        then no_trunc_option = "1"b;
	        else if option_array (i) = "-header"
	        then
		 do;				/* set header info */
		    header_option = "1"b;
		    call get_n_opt (identifier);	/* pick up optional ident number */
		 end;
	        else if option_array (i) = "-old"
	        then old_option = "1"b;		/* prevents creation */
	        else if option_array (i) = "-ssf"
	        then ssf_option = "1"b;
	        else if option_array (i) = "-dup_ok"
	        then dup_ok_opt = "1"b;
	        else if (option_array (i) = "-stationary") | (option_array (i) = "-stat")
	        then stat_opt = "1"b;
	        else if option_array (i) = "-no_end"
	        then noend_option = "1"b;		/* allows positioning beyond eof */
	        else if option_array (i) = "-exclusive"
	        then exclu_option = "1"b;
	        else if (option_array (i) = "-transaction") | (option_array (i) = "-trans")
	        then if i >= n_opts			/* no more args */
		   then code = error_table_$noarg;
		   else
		      do;				/* get tcf switch name */
		         i = i + 1;			/* skip over next arg */
		         tcf_name = option_array (i);
		         trans_opt = "1"b;
		      end;
	        else if (option_array (i) = "-checkpoint")
	        then checkpoint_opt = "1"b;
	        else code = error_table_$bad_arg;
	     end;
         end;
      if code = 0
      then
         do;
	  rel_pathname = option_array (1);
	  rel_pathname_length = length (option_array (1));
	  if ((extend_attach_option & (append_option | no_trunc_option)) | (append_option & no_trunc_option)
	       | (header_option & (checkpoint_opt | blocked_option | exclu_option | shared_option))
	       | (blocked_option & (checkpoint_opt | no_trunc_option))
	       | ((dup_ok_opt | stat_opt | trans_opt)
	       & (checkpoint_opt | ssf_option | blocked_option | no_trunc_option | append_option | noend_option))
	       | (shared_option & (no_trunc_option | exclu_option)))
	  then code = error_table_$bad_arg;
         end;
      return;
   end;						/* end verify args */

get_n_opt:
   proc (n);					/* used to pick up optional numerical argument */
      if i < n_opts
      then
         do;					/* another option exists--look at it */
	  num = cv_dec_check_ ((option_array (i + 1)), er_code);
	  if er_code = 0				/* valid integer */
	  then
	     do;					/* grab next option */
	        i = i + 1;				/* advance option_array index */
	        saved_i = i;			/* save element number */
	        n = num;				/* set the argument */
	     end;
         end;
      dcl	    (n, num)	       fixed (35);
   end get_n_opt;

create_attach_block:
   proc;
      dname, ename = " ";
      call expand_path_ (addr (rel_pathname), rel_pathname_length, addr (dname), addr (ename), code);
      if code = 0
      then
         do;
	  call alloc_cb_file (size (attach_block), attach_block_ptr);
	  dup_ok_sw = dup_ok_opt;
	  noend_sw = noend_option;
	  exclu_sw = exclu_option;
	  stat_sw = stat_opt;
	  trans_sw = trans_opt;
	  checkpoint_sw = checkpoint_opt;
	  ssf = ssf_option;
	  old = old_option;
	  blocked = blocked_option;
	  max_rec_len = max_recl;
	  header_present = header_option;
	  header_id = identifier;
	  no_trunc = no_trunc_option;
	  appending = append_option;
	  extend_attach = extend_attach_option | appending | no_trunc | old;
	  shared = shared_option;
	  wait_time = 1000000 * wait_time_option;
	  interp = 0;				/* this option may be supported in future */
	  dname_len = length (dname) + 1 - verify (reverse (dname), " ");
	  ename_len = length (ename) + 1 - verify (reverse (ename), " ");
	  string = "vfile_ " || substr (dname, 1, dname_len) || ">";
	  string = string || substr (ename, 1, ename_len);
	  if no_trunc
	  then string = string || " -no_trunc";
	  if appending
	  then string = string || " -append";
	  if extend_attach_option
	  then string = string || " -extend";
	  if noend_sw
	  then string = string || " -no_end";
	  if interp = 1
	  then string = string || " -raw";
	  if old
	  then string = string || " -old";
	  if ssf					/* limited to single-segment files */
	  then string = string || " -ssf";
	  if dup_ok_sw
	  then string = string || " -dup_ok";
	  if stat_sw
	  then string = string || " -stationary";
	  if trans_sw
	  then
	     do;
	        string = string || " -transaction " || tcf_name;
	        attach_block.tcf_iocbp = tcf_ptr;
	     end;
	  if checkpoint_sw
	  then string = string || " -checkpoint";
	  if header_present
	  then
	     do;
	        string = string || " -header";
	        string = string || " " || ltrim (char (identifier));
	     end;
	  if blocked
	  then
	     do;
	        string = string || " -blocked";
	        string = string || " " || ltrim (char (max_rec_len));
	     end;
	  if exclu_sw
	  then string = string || " -exclusive";
	  if shared
	  then
	     do;
	        string = string || " -share ";
	        string = string || ltrim (char (wait_time_option));
	     end;
	  attach_descrip_len = length (string);
	  attach_descrip_string = string;
         end;

      dcl	    ename		       char (32) aligned;
      dcl	    expand_path_	       external entry (ptr,	/* ptr to relative pathname */
			       fixed bin,		/* length of relative pathname */
			       ptr,		/* ptr to char(l68) aligned to hold expanded
						   directory name */
			       ptr,		/* ptr to char(32) aligned to hold expanded
						   entry name */
			       fixed bin (35));	/* status code */
      dcl	    dname		       char (168) aligned;
      dcl	    string	       char (256) varying;
   end;						/* end create_attach_block */

open_file:
   entry (iocb_ptr_arg, mode_arg, extend_arg, code);
      begin;
         iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
         attach_block_ptr = attach_data_ptr;
         was_msf = "0"b;
         i_set_lock = "0"b;				/* will unlock file only if I locked it */
         fcb_ptr, first_seg_ptr = null;			/* will cleanup if non-null */
         mode = mode_arg;
         call verify_open_args_set_descrip;
         if code = 0
         then call get_file_base;
         if code = 0
         then call check_set_file_type;
         if code = 0
         then call check_set_file_already_open;
         if (code = 0) & (^is_msf) & (file_type = 2 /* indexed */)
         then call open_msf;				/* always use msf_manager with indexed files */
         if code = 0
         then
	  do;
	     if file_type = 0
	     then open_x = open_uns_file;
	     else if file_type = 1
	     then open_x = open_seq_file;
	     else if file_type = 2
	     then open_x = open_indx_file;
	     else if file_type = 3
	     then open_x = open_blk_file;
	     call open_x (iocb_ptr, fcb_ptr, first_seg_ptr, is_new_file, mode, close_x, first_seg_bitcount,
		max_component_size, code);
	  end;
         if code = 0
         then
	  do;
	     close = close_file;
	     open_descrip_ptr = addr (open_descrip);
	     call iox_$propagate (iocb_ptr);
	  end;
         else
	  do;
	     if first_seg_ptr ^= null
	     then if i_set_lock
		then call set_lock_$unlock (open_lock, foo);
	     call cleanup;
	  end;
         return;					/* end of opening main routine */

verify_open_args_set_descrip:
   proc;
      if (mode <= 0) | (mode > 13)
      then code = error_table_$bad_arg;
      else if (interp = 1) & (mode ^= 1)
      then code = error_table_$incompatible_attach;
      else if (((blocked | checkpoint_sw) & ((mode < 4) | (mode > 7))) | ((ssf | noend_sw) & (mode > 7))
	 | (exclu_sw & is_input_only_mode (mode))
	 | ((trans_sw | shared | exclu_sw | dup_ok_sw | stat_sw)
	 & ((mode < 4) | (^(extend_arg | extend_attach) & ((mode = 5) | (mode = 6)))))
	 | ((no_trunc | header_present) & (mode > 3)))
      then code = error_table_$incompatible_attach;
      else
         do;
	  code = 0;
	  open_descrip_len = length (mode_descrip (mode));
	  open_descrip_string = mode_descrip (mode);
         end;

      dcl	    string	       char (32) varying;
   end;						/* end verify_open_args_set_descrip */

get_file_base:
   proc;
      branch_info.bit_count = "0"b;
      is_msf = "0"b;
      attach_block.last_comp = 0;
      call hcs_$status_long (substr (attach_descrip_string, 8, dname_len),
	 substr (attach_descrip_string, 9 + dname_len, ename_len), 1, addr (branch_info), null, foo);
      if foo ^= 0
      then if foo = error_table_$no_s_permission
	 then foo = 0;				/* we don't need any missing info */
      if (type = "10"b) & (bit_count = "0"b) & (foo = 0)
      then
         do;					/* entry is a directory--flag the error */
	  code = error_table_$dirseg;
	  return;					/* unsuccessfulopening */
         end;
      else if (type = "10"b) & (foo = 0)		/* must be an msf */
      then if ssf					/* -ssf option was specified--no msf's allowed */
	 then
	    do;					/* flag the error */
	       code = error_table_$incompatible_attach;
	       return;
	    end;
	 else
	    do;
	       was_msf = "1"b;
	       attach_block.last_comp = fixed (bit_count) - 1;
	       call open_msf;
	       call msf_manager_$get_ptr (fcb_ptr, 0, "0"b, first_seg_ptr, first_seg_bitcount, foo);
	    end;
      is_new_file =
	 (is_output_mode (mode) & ^extend_attach & ^extend_arg)
	 | ((branch_info.bit_count = "0"b) & ^is_input_only_mode (mode) & ^old);
      if ^is_msf
      then
         do;					/* get pointer to base of single segment file */
	  first_seg_bitcount = fixed (branch_info.bit_count, 24, 0);
	  if is_new_file
	  then call hcs_$make_seg (substr (attach_descrip_string, 8, dname_len),
		  substr (attach_descrip_string, 9 + dname_len, ename_len), "", 01010b /* rw access */, first_seg_ptr,
		  foo);
	  else call hcs_$initiate (substr (attach_descrip_string, 8, dname_len),
		  substr (attach_descrip_string, 9 + dname_len, ename_len), "", 0, 1, first_seg_ptr, foo);
         end;
      if first_seg_ptr = null
      then code = foo;
      if code = 0
      then
         do;					/* check access */
	  access_mode = 0;
	  call hcs_$fs_get_mode (first_seg_ptr, access_mode, foo);
	  if (access_required (mode) & ^bit (access_mode)) ^= "0"b
	  then code = error_table_$moderr;
         end;
      if code = 0
      then
         do;
	  call hcs_$get_max_length_seg (first_seg_ptr, max_component_size, foo);
	  if is_new_file
	  then
	     do;
	        if ^is_msf				/* single segment */
	        then call hcs_$truncate_seg (first_seg_ptr, 0, foo);
	        else call msf_manager_$adjust (fcb_ptr, 0, 0, "010"b, foo);
						/* truncate file, which leaves first
						   page set to zero */
	        call hcs_$set_bc_seg (first_seg_ptr, 0, foo);
	        first_seg_bitcount = 0;
	     end;
         end;

      dcl	    access_mode	       fixed bin (5);
      dcl	    hcs_$fs_get_mode       external entry (ptr, fixed bin (5), fixed bin (35));
						/* second arg
						   interpreted as bit(5), second bit = read access,
						   fourth bit is write access, other bits irrelevant here */
      dcl	    hcs_$get_max_length_seg
			       entry (ptr,		/* ptr to seg */
			       fixed bin (19),	/* max length in words */
			       fixed bin (35));	/* code */
      dcl	    hcs_$set_bc_seg	       entry (ptr,		/* ptr to segment */
			       fixed bin (24),	/* bitcount */
			       fixed bin (35));	/* status code */
   end get_file_base;

check_set_file_type:
   proc;
      if mode < 4
      then
         do;
	  file_type = 0;
	  if is_new_file & header_present
	  then file_code = file_code_table (0);
         end;
      else if is_new_file
      then
         do;
	  if mode < 8
	  then if blocked
	       then file_type = 3;
	       else file_type = 1;			/* normal sequential file */
	  else file_type = 2;
	  call check_type;
	  if code = 0
	  then file_code = file_code_table (file_type);
         end;
      else
         do;
	  if file_code = file_code_table (1)
	  then file_type = 1;
	  else if file_code = file_code_table (2)
	  then file_type = 2;
	  else if file_code = file_code_table (3)
	  then file_type = 3;
	  else code = error_table_$bad_file;
	  if code = 0
	  then call check_type;
         end;
      return;					/* end of check_set_file_type main routine */

check_type:
   proc;
      if ^substr (compatible_types (mode), file_type, 1) | ((file_type = 2) & ssf)
	 | (((file_type = 1) | (file_type = 2)) & noend_sw) | (checkpoint_sw & ^(file_type = 1))
	 | ((dup_ok_sw | stat_sw | trans_sw) & (file_type ^= 2)) | ((shared | exclu_sw) & (file_type < 2))
      then code = error_table_$incompatible_attach;
   end check_type;

      dcl	    compatible_types       (4:13) bit (3) static
			       init ("111"b, "101"b, "101"b, "111"b, "010"b, "010"b, "010"b, "010"b, "010"b, "010"b)
			       ;
      dcl	    file_code_table	       (0:3) static internal fixed bin init (31191, 83711, 7129, 22513);
   end;						/* end check_set_file_type */

open_msf:
   proc;						/* opens ssf as msf for indexed file */
      is_msf = "1"b;
      call msf_manager_$open (substr (attach_descrip_string, 8, dname_len),
	 substr (attach_descrip_string, 9 + dname_len, ename_len), fcb_ptr, foo);
						/* creates msf control block */
      if (fcb_ptr = null) & (foo ^= 0)
      then code = foo;				/* unexpected error */
   end open_msf;

check_set_file_already_open:
   proc;
      if file_type ^= 0
      then
         do;
	  if is_input_only_mode (mode)
	  then
	     do;
	        if ^shared & (open_lock ^= "0"b)
	        then code = error_table_$file_busy;
	     end;
	  else
	     do;
	        call set_lock_$lock (open_lock, divide (wait_time + 500000, 1000000, 35, 0), foo);
	        if foo ^= 0
	        then if foo = error_table_$invalid_lock_reset
						/* locked by dead proc */
		   then
		      do;
		         inv_lock_reset = "1"b;
		         i_set_lock = "1"b;
		      end;
		   else code = error_table_$file_busy;
	        else
		 do;
		    inv_lock_reset = "0"b;
		    i_set_lock = "1"b;
		 end;
	     end;
         end;

   end;						/* end check_set_file_already_open */

         dcl     i_set_lock		bit (1) aligned;
         dcl     first_seg_bitcount	fixed bin (24);
         dcl     is_new_file		bit (1) aligned;
         dcl     open_x		variable entry (ptr,/* iocb_ptr, input */
				ptr,		/* fcb_ptr, input */
				ptr,		/* first_seg_ptr, input */
				bit (1) aligned,	/* is_new_file, input */
				fixed bin,	/* mode */
				entry,		/* close_x, output */
				fixed bin (24),	/* first seg bitcount */
				fixed bin (19),	/* max_component_size */
				fixed bin (35));	/* code, if not 0, open_x leaves iocb as is */
         dcl     open_uns_file	entry external;
         dcl     open_seq_file	entry external;
         dcl     open_blk_file	entry external;
         dcl     open_indx_file	entry external;
      end;					/* end of open_file routine */

cleanup:
   proc;
      if fcb_ptr ^= null
      then call msf_manager_$close (fcb_ptr);
      if (^was_msf) & (first_seg_ptr ^= null)
      then call hcs_$terminate_noname (first_seg_ptr, foo);
   end cleanup;

control_file:
   entry (iocb_ptr_arg, order, info_ptr, code);
      iocb_ptr = iocb_ptr_arg -> iocb.actual_iocb_ptr;


      if order = "file_status"
      then call vfile_status_$seg (iocb_ptr, (null), info_ptr, code);

      else if order = "io_call"
      then call vfile_io_control (iocb_ptr, (null), info_ptr, code);

      else code = error_table_$no_operation;
      return;					/* end of control operation supported with switch closed */

close_file:
   entry (iocb_ptr_arg, code);
      code = 0;
      iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
      attach_block_ptr = attach_data_ptr;
      call close_x (iocb_ptr);
      if (file_type = 1 /* seq */) & (^is_input_only_mode (mode))
      then call set_lock_$unlock (open_lock, foo);
      iocb.control = control_file;
      open_descrip_ptr = null;
      open = open_file;
      detach_iocb = detach_file;
      call iox_$propagate (iocb_ptr);
      call cleanup;
      return;					/* end of close routine */

detach_file:
   entry (iocb_ptr_arg, code);
      begin;
         iocb_ptr = iocb_ptr_arg;
         attach_block_ptr = attach_data_ptr;
         code = 0;
         attach_descrip_ptr = null;
         call iox_$propagate (iocb_ptr);
         call free_cb_file (size (attach_block), attach_block_ptr);
      end;
      return;					/* end detach routine */

/* DECLARATIONS FOR COMPLETE PROGRAM */
      dcl	    sub_err_	       entry options (variable);

      dcl	    info_ptr	       ptr;
      dcl	    order		       char (*);
      dcl	    vfile_status_$seg      entry (ptr, ptr, ptr, fixed (35));
      dcl	    vfile_io_control       entry (ptr, ptr, ptr, fixed (35));
      dcl	    1 branch_info	       aligned,		/* info returned by hcs_$status_long */
	      2 type	       bit (2) unal,
	      2 pad0	       bit (34) unal,
	      2 words1	       (6) fixed,		/* of no interest */
	      2 pad1	       bit (12) unal,
	      2 bit_count	       bit (24) unal,	/* distinguishes msf and dir */
	      2 words2	       (2);
      dcl	    hcs_$status_long       entry (char (*), char (*), fixed (1), ptr, ptr, fixed (35));
      dcl	    hcs_$initiate	       entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
      dcl	    hcs_$terminate_noname  entry (ptr, fixed (35));
      dcl	    hcs_$truncate_seg      entry (ptr, fixed (18), fixed (35));
      dcl	    hcs_$make_seg	       entry (char (*), char (*), char (*), fixed (5), ptr, fixed (35));
      dcl	    msf_manager_$close     external entry (ptr);	/* This entry frees the msf file control block
						   and terminates all initiated components */
      dcl	    msf_manager_$adjust    external entry (ptr,	/* fcb_ptr input */
			       fixed bin,		/* component number, input */
			       fixed bin (24),	/* bit count, input */
			       bit (3),		/* "010"b implies don't set bit counts (use hcs_$set_bc_seg), truncate
						   seg, don't terminate seg */
			       fixed bin (35));	/* code, output */
      dcl	    msf_manager_$get_ptr   external entry (ptr,	/* fcb_ptr, input */
			       fixed bin,		/* create switch, input */
			       bit (1),		/* create switch, input */
			       ptr,		/* pointer to seg., output, null if error */
			       fixed bin (24),	/* bit count, output */
			       fixed bin (35));	/* code, output */
      dcl	    msf_manager_$open      external entry (char (*),
						/* directory pathname, input */
			       char (*),		/* entry name, input */
			       ptr,		/* fcb_ptr, output, good unless code is
						   error_table_$dirseg */
			       fixed bin (35));	/* code, output */
      dcl	    (extend_attach_option, shared_option, blocked_option, append_option, old_option, dup_ok_opt, exclu_option,
	    noend_option, stat_opt, trans_opt, checkpoint_opt)
			       bit (1) aligned init ("0"b);
      dcl	    tcf_name	       char (32) var;
      dcl	    tcf_ptr	       ptr;
      dcl	    (no_trunc_option, ssf_option, header_option)
			       bit (1) aligned init ("0"b);
      dcl	    wait_time_option       fixed (35) init (1);
      dcl	    identifier	       fixed (35) init (0);
      dcl	    max_recl	       fixed (35) init (0);
      dcl	    (n, i, n_opts, er_code);
      dcl	    saved_i	       fixed init (0);
      dcl	    cv_dec_check_	       entry (char (*), fixed) returns (fixed (35));
      dcl	    access_required	       (13) bit (5) static internal
			       init ("01000"b, "00010"b, "01010"b, "01000"b, "01010"b, "01010"b, "01010"b, "01000"b,
			       "01010"b, "01010"b, "01000"b, "01010"b, "01010"b);
						/* second bit is r access, fourth bit is w access */
      dcl	    addr		       builtin;
      dcl	    alloc_cb_file	       external entry (fixed bin,
						/* size of block in words, input */
			       ptr);		/* pointer to block, output */
      dcl	    1 attach_block	       based (attach_block_ptr),
						/* the following are set by attach_file */
	      2 flags	       aligned,
	        3 (extend_attach, appending, no_trunc, old, ssf, header_present, blocked, shared, was_msf, is_msf,
		   inv_lock_reset, dup_ok_sw, trans_sw, noend_sw, exclu_sw, stat_sw, checkpoint_sw)
			       bit (1) unal,
	        3 pad	       bit (19) unal,
	      2 wait_time	       fixed (35),
	      2 interp	       fixed,
	      2 max_rec_len	       fixed (35),
	      2 header_id	       fixed (35),
	      2 attach_descrip,
	        3 attach_descrip_len
			       fixed bin (35),	/* < = 256 */
	        3 attach_descrip_string
			       char (256),		/* "-pn " (4 chars), the directory
						   pathname (dname_len chars), ">", the entry
						   name (ename_len chars), " -extend" (optional 8 chars),
						   and " -raw" or " -extend"(optional 8 chars) */
	      2 dname_len	       fixed bin,		/* < = l68 */
	      2 ename_len	       fixed bin,		/* < = 32 */
						/* The following are set by open_file */
	      2 open_descrip,
	        3 open_descrip_len fixed bin (35),	/* < = 31 */
	        3 open_descrip_string
			       char (32),		/* The string
						   contains the opening mode, e.g., "stream output",
						   (< = 23 chars) and " -extend" (8chars optional) */
	      2 mode	       fixed bin,		/* opening mode 1 <= 13 */
	      2 file_type	       fixed bin,		/* 0 = uns, 1 = seq, 2 = indx, 3 = blk */
	      2 fcb_ptr	       ptr,		/* pointer to msf_manager control block */
	      2 first_seg_ptr      ptr,		/* pointer to first component
						   of the file.  Thie pointer is valid throughout the
						   file opening */
	      2 close_x	       entry (ptr),		/* routine to perform operations required
						   for closing specific type of file obtained from open_x see
						   open_file */
	      2 last_comp	       fixed,		/* msf component number at open */
	      2 tcf_iocbp	       ptr;		/* iocb ptr for transaction control switch */
      dcl	    attach_block_ptr       ptr;
      dcl	    bit		       builtin;
      dcl	    code		       fixed bin (35);	/* status code argument */
      dcl	    com_err_	       entry options (variable);
      dcl	    command_switch	       bit (1) aligned;
      dcl	    1 common_header	       based (first_seg_ptr), /* This
						   header is used for all seq and indx files.  Its contents
						   are manipulated by open_file and close_file but not by the
						   specific access methods.  Its size is 4 words */
	      2 file_code	       fixed bin (35),
	      2 open_lock	       bit (36) aligned,	/* nonzero if file open unless shared */
	      2 reserved	       (2) fixed bin;
      dcl	    extend_arg	       bit (1) aligned;
      dcl	    foo		       fixed bin (35);	/* used when output parameters value is to
						   beignored */
      dcl	    hbound	       builtin;
      dcl	    iocb_ptr	       ptr;
      dcl	    iocb_ptr_arg	       ptr;
      dcl	    is_input_only_mode     (13) static internal bit (1)
			       init ("1"b, "0"b, "0"b, "1"b, "0"b, "0"b, "0"b, "1"b, "0"b, "0"b, "1"b, "0"b, "0"b);
      dcl	    is_output_mode	       (13) static internal bit (1)
			       init ("0"b, "1"b, "1"b, "0"b, "1"b, "1"b, "0"b, "0"b, "1"b, "0"b, "0"b, "1"b, "0"b);
      dcl	    length	       builtin;
      dcl	    max_component_size     fixed bin (19);
      dcl	    mode_arg	       fixed bin;
      dcl	    mode_descrip	       (13) char (24) varying static internal
			       init ("stream_input", "stream_output", "stream_input_output", "sequential_input",
			       "sequential_output", "sequential_input_output", "sequential_update",
			       "keyed_sequential_input", "keyed_sequential_output", "keyed_sequential_update",
			       "direct_input", "direct_output", "direct_update");
      dcl	    null		       builtin;
      dcl	    option_array	       (*) char (*) varying;
      dcl	    iox_$propagate	       entry (ptr);
      dcl	    iox_$look_iocb	       entry (char (*), ptr, fixed (35));
      dcl	    rel_pathname	       char (168);
      dcl	    rel_pathname_length    fixed bin;
      dcl	    reverse	       builtin;
      dcl	    set_lock_$lock	       entry (bit (36) aligned,
						/* lock word */
			       fixed bin,		/* num of seconds to wait */
			       fixed bin (35));	/* code=0 or et_$invalid_lock_reset are success codes */
      dcl	    set_lock_$unlock       entry (bit (36) aligned,
						/* lock word */
			       fixed bin (35));	/* code */
      dcl	    size		       builtin;
      dcl	    substr	       builtin;
      dcl	    verify	       builtin;
      dcl	    error_table_$negative_nelem
			       external fixed (35);
      dcl	    error_table_$noarg     external fixed (35);
      dcl	    error_table_$no_s_permission
			       external fixed (35);
      dcl	    error_table_$no_operation
			       fixed (35) external;
      dcl	    error_table_$bad_arg   external fixed bin (35);
      dcl	    error_table_$pathlong  external fixed bin (35);
      dcl	    error_table_$moderr    external fixed bin (35);
      dcl	    error_table_$dirseg    external fixed bin (35);
      dcl	    error_table_$not_detached
			       external fixed bin (35);
      dcl	    error_table_$bad_file  external fixed bin (35);
      dcl	    error_table_$file_busy external fixed bin (35);
      dcl	    error_table_$incompatible_attach
			       external fixed bin (35);
      dcl	    error_table_$invalid_lock_reset
			       external fixed bin (35);
      dcl	    free_cb_file	       external entry (fixed bin,
						/* size of block in words, input */
			       ptr);		/* pointer to block); input */
%include iocbv;

/* GENERAL COMMENTS
   This external procedure implements file attachment and the
   i-o operations open, close and detach for this attachment
   (entries: open_file, close_file, detach_file).  The code for
   each entry immediately follows the entry and terminates with
   a return statement.

   Before reading the code familiarize yourself with the general
   conventions for implementing attachments (see the MPM) and read
   the declarations of attach_block and common header.

   The whole thing can be considered a single program in which attach,
   open, close, and detach are done in that order.  The difficult operation
   is open.  It does that which is common to the various types of
   files.  The specific access method is called (via open_x) to set up its
   control block and perform any special file initialization.  open_file will
   have to be changed when file types are put in the directory branches. */
   end /* end of vfile_attach program */;
