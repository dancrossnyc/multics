/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(84-08-22,Ranzenbach), approve(), audit(), install():
     Modified to call unique_chars_.
  2) change(87-07-01,GWMay), approve(87-07-01,MCR7730), audit(87-09-10,GDixon),
     install(87-09-10,MR12.1-1104):
     Completely restructured the code. Added any_other handlers.
     Changed the close routine to always close the control block.
     Changed the detach routine to always detach the control block.
     Changed recursive call for -target attachment to a nonrecursive
     method.
                                                   END HISTORY COMMENTS */


/* format: off */
%page;
/* main program of record_stream_ io module */

record_stream_attach: proc (Piocb_ptr,	/* (input) - control block pointer  */
		        option_array, 
				/* (input) - control arguments      */
		        Pcom_err,	/* (input) - ON = report errors     */
		        Pcode);	/* (output)- error status	      */

       iocb_ptr = Piocb_ptr;
       Scom_err = Pcom_err;
       call initialize$attach();

       if iocb.attach_descrip_ptr ^= null then
	call CHECK_CODE_return_on_error (error_table_$not_detached, ME,
	"^a", iocb.name);

       call get_args ();

/* create and initialize rs attach block, with cleanup handler for block */

       rsab_ptr = null;
       on cleanup call record_stream_detach_ ();
       EXIT = EXIT_WITH_DETACH;

       call alloc_cb_file (size (rs_attach_block), rsab_ptr);

/* If the -target option is present. Attach the target descrip. */

       if target_args ^= "" then do;
	rs_attach_desc.switch_name =  "rs_" || unique_chars_ ("0"b);
	rs_attach_block.i_attached_target = TRUE;
	call iox_$attach_name (rs_attach_desc.switch_name,
	   rs_attach_block.target_iocb_ptr, (target_args), null, code);
	call CHECK_CODE_return_on_error (code, ME,
	   "Target attach description failed:^/^a",
	      target_args);
	end;

/* Otherwise, find target IOCB. */

       else do;
	rs_attach_block.i_attached_target = FALSE;
	call iox_$find_iocb (rs_attach_desc.switch_name,
	   rs_attach_block.target_iocb_ptr, code);
	call CHECK_CODE_return_on_error (code, ME,
	   "Looking for target IOCB ^a",
	   rs_attach_desc.switch_name);
	end;

       rs_attach_block.attach_descrip_string =
	rs_attach_desc.module_name 
	|| rtrim(rs_attach_desc.switch_name)
	|| rtrim(rs_attach_desc.args);
       rs_attach_block.attach_descrip_len = 
	length (rtrim (rs_attach_block.attach_descrip_string));

       rs_attach_block.target_name = rs_attach_desc.switch_name;
       rs_attach_block.length_n = arg_record_length;
       rs_attach_block.open_descrip_len = 0;
       rs_attach_block.open_descrip_string = "";
       rs_attach_block.mode = 0;
       rs_attach_block.i_opened_target = FALSE;
       rs_attach_block.base = 0;
       rs_attach_block.n_left = 0;

/* Set the iocb to the attach state */
       
       ips_mask = ""b;
       on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
       call hcs_$set_ips_mask ("0"b, ips_mask);
       iocb.attach_data_ptr = rsab_ptr;
       iocb.attach_descrip_ptr = addr (rs_attach_block.attach_descrip);
       iocb.detach_iocb = record_stream_detach;
       iocb.open = record_stream_open;
       iocb.modes = record_stream_modes;
       iocb.control = record_stream_control;

       call iox_$propagate (iocb_ptr);
       call hcs_$reset_ips_mask (ips_mask, ips_mask);

EXIT_BY_RETURN:
       return;

EXIT_WITH_DETACH:  
       call record_stream_detach_();
       return;
%page;
get_args: proc ();

       arg_record_length = 0;
       rs_attach_desc.module_name = ME;
       rs_attach_desc.switch_name = "";
       rs_attach_desc.args = "";
       target_args = "";

       do i = 1 to hbound (option_array, 1);

	code = 0;

	if option_array (i) = "-no_newline" | option_array (i) = "-nnl" then
	   arg_record_length = -1;
	else
	   if option_array (i) = "-length"
	      | option_array (i) = "-ln" then do;
	      if i + 1 > hbound (option_array, 1) then
	         call CHECK_CODE (error_table_$noarg, ME,
"^/^a requires a positive integer value.",
		  option_array (i));
	      else do;
	         i = i + 1;
	         arg_record_length =
		  cv_dec_check_ ((option_array (i)), ercode);
	         if ercode ^= 0
		  | arg_record_length <= 0
		  | arg_record_length > CHARS_PER_SEGMENT then
		  call CHECK_CODE (error_table_$bad_arg, ME,
"^/^a ^a.  The value must be a positive integer less than ^d.",
		  option_array (i - 1), option_array (i),
		  CHARS_PER_SEGMENT+1);
	         end;
	      end;

          else
	   if option_array (i) = "-target" then do;

/* Build the attach description for the target I/O module. */

	      if i + 1 > hbound (option_array, 1) then
	         call CHECK_CODE (error_table_$noarg, ME,
	         "^a requires an attach description operand.",
	         option_array(i));
	      else do;
	         i = i + 1;
	         target_args = target_args || option_array (i);
	         do i = i + 1 to hbound (option_array, 1);	
		  target_args = target_args || " ";
		  target_args =
		     target_args || requote_string_ ((option_array (i)));
		  end;
	         end;
	      end;

          else
	   if i = 1 then do;	/* switch name must be in position 1*/
	      if length (option_array (i)) >
	         length(rs_attach_desc.switch_name) then
	         call CHECK_CODE (error_table_$bigarg, ME,
"^/Target switch name value is longer than ^a characters: ^a.",
		  length(rs_attach_desc.switch_name), option_array (i));
	      else
	         rs_attach_desc.switch_name = option_array (i);
	      end;

	else
	   if index (option_array(i), "-") = 1 then
	      call CHECK_CODE (error_table_$bad_opt, ME,
	   "^a", option_array (i));

          else
	   call CHECK_CODE (error_table_$bad_arg, ME,
	   "^a", option_array (i));
	end;

       if rs_attach_desc.switch_name = "" then do;
	if target_args = "" then
	   call CHECK_CODE (error_table_$noarg, ME, "Target switch name");
          end;
       else
	if target_args ^= "" then
	   call CHECK_CODE (error_table_$bad_arg, ME,
"^/Cannot give both a target switch name and -target attach description.");

       if Serror_occurred then 
	go to EXIT;

       if arg_record_length < 0 then	/* leading space separates switch    */
	rs_attach_desc.args = " -nnl";/* name from control args in attach  */
       else			/* description.		       */
	if arg_record_length > 0 then		
	   rs_attach_desc.args =			
	      " -length " || ltrim (char (arg_record_length));

       return;
       end get_args;
%page;
record_stream_open: entry (Piocb_ptr,	/* (input) - control block pointer  */
		       open_mode,	/* (input) - opening mode(sqi etc.) */
		       Sextend,	/* (input) - ON = add to the file   */
		       Pcode);	/* (output)- error status	      */

       dcl open_mode		fixed bin parameter,
	 Sextend			bit (1) aligned parameter;

       call initialize;
				/* verify open args & set descript. */

       if open_mode < lbound (iox_modes, 1)
	| open_mode > hbound(iox_modes, 1)
	| Sextend then
	call CHECK_CODE_return_on_error (error_table_$bad_arg, ME);

       else
	if open_mode = Stream_input_output
	   | open_mode > Sequential_output then
	   call CHECK_CODE_return_on_error (error_table_$bad_mode, ME);

       else
	if open_mode = Stream_output | open_mode = Sequential_input then do;
	   if rs_attach_block.length_n < 0 then
	      call CHECK_CODE_return_on_error (
	      error_table_$invalid_record_length, ME);
	   end;

       else
	if open_mode = Sequential_output | open_mode = Stream_input then do;
	   if rs_attach_block.length_n > 0 then
	      call CHECK_CODE_return_on_error (
	      error_table_$invalid_record_length, ME);
	   end;

/* The open_mode is valid set the open description */

       rs_attach_block.mode = open_mode;
       rs_attach_block.open_descrip_len =
	length (rtrim (iox_modes (open_mode)));
       rs_attach_block.open_descrip_string = iox_modes (open_mode);
%page;
/* If the target switch exists, find out how the targets was opened. */
       
       if rs_attach_block.target_iocb_ptr = null then
	call CHECK_CODE_return_on_error (error_table_$no_iocb, ME);

       target_open_mode_ptr =
	rs_attach_block.target_iocb_ptr -> iocb.open_descrip_ptr;

       if target_open_mode_ptr ^= null then
	target_open_mode = before (target_open_mode, SPACE);

/* If switch is its own target report the error -- looping attachment */

       if iocb_ptr -> iocb.actual_iocb_ptr
	= rs_attach_block.target_iocb_ptr -> iocb.actual_iocb_ptr then
	   call CHECK_CODE_return_on_error (error_table_$att_loop, ME);

/* Set i_opened_target before the cleanup handler. */

       if rs_attach_block.target_iocb_ptr -> iocb.open_descrip_ptr = null then
	rs_attach_block.i_opened_target = TRUE;

       on cleanup call record_stream_close_ ();
       EXIT = EXIT_WITH_CLOSE;

/* If not open, open the target switch else check its current open mode. */
/* Open the target switch using the opposite mode of what was input. */

       if rs_attach_block.i_opened_target then
	call iox_$open (rs_attach_block.target_iocb_ptr,
	   (op_mode (rs_attach_block.mode)), "0"b, code);

       else			/* target already opened            */
	if (target_open_mode ^= iox_modes (op_mode (rs_attach_block.mode)))
	   & (target_open_mode ^= iox_modes (op_io_mode (rs_attach_block.mode))) then
	   code = error_table_$incompatible_attach;

       call CHECK_CODE_return_on_error (code, ME);
%page;
/* Non-Sequential outputs require an internal buffer. */

       if rs_attach_block.mode ^= Sequential_output then do;
	call get_temp_segment_ (ME, iocb.open_data_ptr, code);
	call CHECK_CODE_return_on_error (code, ME);
	end;

/* call initialization routine appropriate to opening mode */

       ips_mask = ""b;
       on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
       call hcs_$set_ips_mask ("0"b, ips_mask);

       if rs_attach_block.mode = Stream_input then
	call rs_open_str_in_ (iocb_ptr);
       else
	if rs_attach_block.mode = Stream_output then
	   call rs_open_str_out_ (iocb_ptr);
       else
	if rs_attach_block.mode = Sequential_input then
	   call rs_open_seq_in_ (iocb_ptr);
       else
	call rs_open_seq_out_ (iocb_ptr);

/* Set up the iocb entries */

       iocb.open_descrip_ptr = addr (rs_attach_block.open_descrip);
       iocb.close = record_stream_close;

       call iox_$propagate (iocb_ptr);

       call hcs_$reset_ips_mask (ips_mask, ips_mask);
       return;

EXIT_WITH_CLOSE:
       call record_stream_close_();
       return;
%page;
record_stream_close: entry (Piocb_ptr,	/* (input) control block pointer   */
		        Pcode);	/* (output) error status	     */

       call initialize;
       call record_stream_close_ ();
       call CHECK_CODE_return_on_error (code, ME);
       return;


record_stream_close_: proc ();

/* This is an internal procedure so that the open entry can use it
   in its cleanup handler. */

/* If Stream_output, the target is open for sequential output. Flush the
   temp work buffer. */

       if rs_attach_block.mode ^= Sequential_output then do;

	if rs_attach_block.mode = Stream_output
	   & rs_attach_block.n_left > 0 then
	   call iox_$write_record (rs_attach_block.target_iocb_ptr,
	      iocb.open_data_ptr, rs_attach_block.n_left, code);

	if iocb.open_data_ptr ^= null then
	   call release_temp_segment_ (ME, iocb.open_data_ptr, ercode);
	end;

       if rs_attach_block.i_opened_target then do;
	call iox_$close (rs_attach_block.target_iocb_ptr, ercode);
	if code = 0 then
	   code = ercode;
	end;

       ips_mask = ""b;
       on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
       call hcs_$set_ips_mask ("0"b, ips_mask);

       iocb.open_descrip_ptr = null;
       iocb.open_data_ptr = null;
       iocb.detach_iocb = record_stream_detach;
       iocb.open = record_stream_open;

       call iox_$propagate (iocb_ptr);

       call hcs_$reset_ips_mask (ips_mask, ips_mask);
       return;
       end record_stream_close_;
%page;
record_stream_detach: entry (Piocb_ptr, /* (input) - control block pointer  */
		         Pcode);	/* (output)- error status	      */

       call initialize();		  
       call record_stream_detach_ ();
       call CHECK_CODE_return_on_error (code, ME);
       return;

record_stream_detach_: proc ();

/* This is an internal procedure so that the attach entry can use it
   in its cleanup handler. */

/* detach target if it was attached with the -target option */

       if rsab_ptr = null then
	return;
	
       if rs_attach_block.i_attached_target then do;
	call iox_$detach_iocb (rs_attach_block.target_iocb_ptr, code);
	call iox_$destroy_iocb (rs_attach_block.target_iocb_ptr, ercode);
	end;

       ips_mask = ""b;
       on any_other call hcs_$reset_ips_mask (ips_mask, ips_mask);
       call hcs_$set_ips_mask ("0"b, ips_mask);

       iocb.attach_data_ptr = null;
       iocb.attach_descrip_ptr = null;

       call iox_$propagate (iocb_ptr);
       call hcs_$reset_ips_mask (ips_mask, ips_mask);

       call free_cb_file (size (rs_attach_block), rsab_ptr);
       rsab_ptr = null;

       return;
       end record_stream_detach_;
%page;
record_stream_modes: entry (Piocb_ptr,	/* (input) - control block pointer  */
		        new_modes,	/* (input) - modes to set to        */
		        old_modes,	/* (output)- current modes	      */
		        Pcode);	/* (output)- error status	      */

       dcl new_modes		char (*) parameter,
	 old_modes		char (*) parameter;

       call initialize;
       call iox_$modes (rs_attach_block.target_iocb_ptr, new_modes, old_modes,
	Pcode);
				/* pass call to target              */
       return;
%page;
record_stream_control: entry (Piocb_ptr,/* (input) - control block pointer  */
		          order,    /* (input) - requested order	      */
			info_ptr, /* (input) - info for the control et*/
			Pcode);	/* (output)- error status           */

       dcl order			char(*) parameter,
	 info_ptr			ptr parameter;

       call initialize;
       call iox_$control (rs_attach_block.target_iocb_ptr, order, info_ptr,
	Pcode);
				/* pass call to target              */
       return;
%page;
initialize: proc;
/* internal procedure for initializing pointers and other variables */

       iocb_ptr = Piocb_ptr -> iocb.actual_iocb_ptr;
       rsab_ptr = iocb.attach_data_ptr;
       Scom_err = FALSE;

initialize$attach:
       entry;

       Pcode, code = 0;
       Serror_occurred = FALSE;
       EXIT = EXIT_BY_RETURN;
       return;

       end initialize;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This procedure examines its code parameter.  If it is nonzero, it sets    */
/* the code output parameter of the current external entrypoint.  It	       */
/* optionally prints an error message.  Execution stops (via nonlocal goto)  */
/* for nonzero codes passed to CHECK_CODE_return_on_error.  If code is 0,    */
/* these programs do nothing but return to their caller.		       */
/*							       */
/* Syntax:  call CHECK_CODE (code, program_name, ioa_ctl_str, ioa_args);     */
/*	  call CHECK_CODE_return_on_error			       */
/*	       (code, program_name, ioa_ctl_str, ioa_args);	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

CHECK_CODE:
       proc options(variable);

       dcl error_code		fixed bin(35) based (p_error_code),
	 p_error_code		ptr;

       dcl Sfatal			bit (1) aligned;

       dcl cu_$arg_list_ptr		entry returns(ptr),
	 cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21),
				      fixed bin(35)),
           cu_$generate_call		entry (entry, ptr);

       Sfatal = FALSE;
       go to ERROR_COMMON;

CHECK_CODE_return_on_error:
       entry options (variable);
       
       Sfatal = TRUE;

ERROR_COMMON:

       call cu_$arg_ptr (1, p_error_code, 0, 0);
       if error_code = 0 then return;
       if Pcode = 0 then		/* set output code parameter if it   */
	Pcode = error_code;		/*  hasn't been set before.	       */

       if Scom_err then
	call cu_$generate_call (com_err_, cu_$arg_list_ptr());

       Serror_occurred = TRUE;
       if Sfatal then
	go to EXIT;
       return;
       end CHECK_CODE;
%page;
/* parameters */

       dcl Piocb_ptr		ptr parameter,
	 Pcom_err			bit (1) aligned parameter,
	 Pcode			fixed bin (35) parameter,
	 option_array(*)		char (*) varying parameter;

/* automatic */

       dcl EXIT			label variable,
	 Scom_err			bit (1) aligned,
	 Serror_occurred		bit (1) aligned,
	 arg_record_length		fixed bin (35),
	 code			fixed bin(35),
	 ercode			fixed bin (35),
	 i			fixed bin,
	 ips_mask			bit(36) aligned,
           1 rs_attach_desc		aligned,
	   2 module_name		char (15),
	   2 switch_name		char (32) unal,
	   2 args			char (20),
           target_args		char (1024) varying;

/* based */

       dcl target_open_mode_ptr	ptr,
	 target_open_mode		char (24) varying
				based (target_open_mode_ptr);

/* entries */

       dcl alloc_cb_file		entry (fixed bin, ptr),
	 cv_dec_check_		entry (char(*), fixed bin(35)) returns(fixed bin(35)),
	 com_err_			entry() options(variable),
	 get_temp_segment_		entry (char(*), ptr, fixed bin(35)),
	 free_cb_file		entry (fixed bin, ptr),
	 hcs_$reset_ips_mask	entry (bit(36) aligned, bit(36) aligned),
	 hcs_$set_ips_mask		entry (bit(36) aligned, bit(36) aligned),
	 release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
           requote_string_		entry (char(*)) returns(char(*)),
	 rs_open_seq_in_		entry (ptr),
	 rs_open_seq_out_		entry (ptr),
	 rs_open_str_in_		entry (ptr),
	 rs_open_str_out_		entry (ptr),
	 unique_chars_		entry (bit(*)) returns(char(15));

/* external static */  

       dcl (error_table_$att_loop,
	 error_table_$bad_arg,
	 error_table_$bad_opt ,
	 error_table_$bad_mode,	
	 error_table_$bigarg,
	 error_table_$incompatible_attach,
	 error_table_$invalid_record_length,
	 error_table_$no_iocb,
	 error_table_$noarg,
	 error_table_$not_detached)	fixed bin(35) ext static;

/* internal static */  

       dcl FALSE			bit (1) aligned internal static
				options (constant) init ("0"b);

       dcl ME			char (14) internal static
				options (constant) 
				init ("record_stream_");

       dcl TRUE			bit (1) aligned internal static
				options (constant) init ("1"b);

       dcl SPACE			char (1) aligned internal static
				options (constant) init (" ");

       dcl op_io_mode (5)		fixed bin internal static options
				(constant) init (6, 6, 6, 3, 3);

       dcl op_mode (5)		fixed bin internal static options
				(constant) init (4, 5, 6, 1, 2);

/* builtins */

       dcl (addr, before, char, hbound, index, lbound, length, ltrim, null,
	 rtrim, size)		builtin;

/* conditions */

       dcl (any_other, cleanup)	condition;
%page;
%include rs_attach_block;
%page;
       dcl iocb_ptr			ptr;
%include iocbv;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include system_constants;
%page;
%include sub_err_flags;

end record_stream_attach;
