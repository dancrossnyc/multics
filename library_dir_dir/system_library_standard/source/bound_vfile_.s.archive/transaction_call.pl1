/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Command Interface to transaction_call_.

   Rewritten 8-Mar-79 by M. N. Davidoff.
*/
transaction_call:
trc:
     procedure;

/* auotmatic */

	declare arg_count		 fixed binary;
	declare arg_length		 fixed binary (21);
	declare arg_list_ptr	 pointer;
	declare arg_ptr		 pointer;
	declare argument_no		 fixed binary;
	declare argx		 fixed binary;
	declare code		 fixed binary (35);
	declare operation		 char (32);
	declare tcf_io_switch	 char (32);
	declare tcf_iocb_ptr	 pointer;
	declare transaction_no	 fixed binary (35);

/* based */

	declare arg_string		 char (arg_length) based (arg_ptr);

/* builtin */

	declare addr		 builtin;
	declare index		 builtin;
	declare length		 builtin;
	declare null		 builtin;
	declare rtrim		 builtin;
	declare string		 builtin;

/* condition */

	declare program_interrupt	 condition;
	declare transaction_failure	 condition;

/* internal static */

	declare command		 char (16) internal static options (constant) initial ("transaction_call");

/* external static */

	declare error_table_$asynch_change
				 fixed binary (35) external static;
	declare error_table_$badopt	 fixed binary (35) external static;

/* entry */

	declare com_err_		 entry options (variable);
	declare com_err_$suppress_name entry options (variable);
	declare cu_$arg_count	 entry (fixed binary);
	declare cu_$arg_list_ptr	 entry (pointer);
	declare cu_$arg_ptr		 entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
	declare cu_$arg_ptr_rel	 entry (fixed binary, pointer, fixed binary (21), fixed binary (35), pointer);
	declare cv_dec_check_	 entry (char (*), fixed binary (35)) returns (fixed binary (35));
	declare ioa_		 entry options (variable);
	declare iox_$look_iocb	 entry (char (*), pointer, fixed binary (35));
	declare transaction_call_$assign
				 entry (pointer, fixed binary (35), fixed binary (35));
	declare transaction_call_$change_current_transaction_no
				 entry (pointer, fixed binary (35), fixed binary (35));
	declare transaction_call_$commit
				 entry (pointer, fixed binary (35), fixed binary (35));
	declare transaction_call_$number
				 entry (pointer, fixed binary (35), fixed binary (35));
	declare transaction_call_$rollback
				 entry (pointer, fixed binary (35), fixed binary (35));
	declare transaction_call_$status
				 entry (pointer, fixed binary (35), bit (36) aligned, pointer, fixed binary,
				 fixed binary (35));
	declare transaction_call_$transact
				 entry (pointer, char (*), fixed binary (35), fixed binary (35));

%include transaction_call;

/* program */

	call cu_$arg_list_ptr (arg_list_ptr);

	call cu_$arg_count (arg_count);
	if arg_count < 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a operation tcf_io_switch {args}", command);
		return;
	     end;

	do argx = 1 to 2;
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;

	     if index (arg_string, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", arg_string);
		     return;
		end;

	     else if argx = 1
	     then operation = arg_string;
	     else tcf_io_switch = arg_string;
	end;

	call iox_$look_iocb (tcf_io_switch, tcf_iocb_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "^a", tcf_io_switch);
		return;
	     end;

	if operation = "assign" | operation = "a"
	then call assign;

	else if operation = "change_current_transaction_no" | operation = "cctn"
	then call change_current_transaction_no;

	else if operation = "commit" | operation = "c"
	then call commit;

	else if operation = "number" | operation = "n"
	then call number;

	else if operation = "rollback" | operation = "r"
	then call rollback;

	else if operation = "status" | operation = "s"
	then call status;

	else if operation = "transact" | operation = "t"
	then call transact;

	else do;
		call com_err_ (0, command, "Specified operation is not implemented by this command. ^a", operation);
		return;
	     end;

	return;

/* Get a new transaction number. */

assign:
     procedure;

	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a assign tcf_io_switch", command);
		return;
	     end;

	call transaction_call_$assign (tcf_iocb_ptr, transaction_no, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Assigning a transaction number.");
		return;
	     end;

	call ioa_ ("Transaction ^d.", transaction_no);
     end assign;

/* Change to another transaction. */

change_current_transaction_no:
     procedure;

	argument_no = 0;
	do argx = 3 to arg_count;
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;

	     if index (arg_string, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", arg_string);
		     return;
		end;

	     else do;
		     argument_no = argument_no + 1;

		     if argument_no = 1
		     then do;
			     transaction_no = cv_dec_check_ (arg_string, code);
			     if code ^= 0
			     then do;
				     call com_err_ (0, command, "Transaction number expected. ^a", arg_string);
				     return;
				end;
			end;
		end;
	end;

	if argument_no ^= 1
	then do;
		call com_err_$suppress_name (0, command,
		     "Usage: ^a change_current_transaction_no tcf_io_switch transaction_no", command);
		return;
	     end;

	call transaction_call_$change_current_transaction_no (tcf_iocb_ptr, transaction_no, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Changing the current transaction number.");
		return;
	     end;
     end change_current_transaction_no;

/* Commit a transaction. */

commit:
     procedure;

	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a commit tcf_io_switch", command);
		return;
	     end;

	call transaction_call_$commit (tcf_iocb_ptr, transaction_no, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Committing transaction ^d.", transaction_no);
		return;
	     end;

	if transaction_no ^= 0
	then call ioa_ ("Transaction ^d committed.", transaction_no);
     end commit;

/* Get the current transaction number. */

number:
     procedure;

	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a number tcf_io_switch", command);
		return;
	     end;

	call transaction_call_$number (tcf_iocb_ptr, transaction_no, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Getting current transaction number.");
		return;
	     end;

	call ioa_ ("The current transaction number is ^d.", transaction_no);
     end number;

/* Rollback a transaction. */

rollback:
     procedure;

	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a rollback tcf_io_switch", command);
		return;
	     end;

	call transaction_call_$rollback (tcf_iocb_ptr, transaction_no, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Rolling back transaction ^d.", transaction_no);
		return;
	     end;

	if transaction_no ^= 0
	then call ioa_ ("Transaction ^d rolled back.", transaction_no);
     end rollback;

/* Get a transaction's status. */

status:
     procedure;

	declare 1 status_s		 aligned like trc_status;
	declare 1 sw		 unaligned,
		2 brief		 bit (1),
		2 verify_refs	 bit (1),
		2 list		 bit (1);
	declare transaction_status	 fixed binary;

	string (sw) = ""b;
	transaction_no = 0;

	argument_no = 0;
	do argx = 3 to arg_count;
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;

	     if arg_string = "-brief" | arg_string = "-bf"
	     then sw.brief = "1"b;

	     else if arg_string = "-verify" | arg_string = "-vf"
	     then sw.verify_refs = "1"b;

	     else if arg_string = "-list" | arg_string = "-ls"
	     then sw.list = "1"b;

	     else if index (arg_string, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", arg_string);
		     return;
		end;

	     else do;
		     argument_no = argument_no + 1;

		     if argument_no = 1
		     then do;
			     transaction_no = cv_dec_check_ (arg_string, code);
			     if code ^= 0
			     then do;
				     call com_err_ (0, command, "Transaction number expected. ^a", arg_string);
				     return;
				end;
			end;
		end;
	end;

	if argument_no > 1
	then do;
		call com_err_$suppress_name (0, command,
		     "Usage: ^a status tcf_io_switch {transaction_no} {-control_args}", command);
		return;
	     end;

	trc_flags = ""b;
	trc_flag_s.verify_refs = sw.verify_refs;
	trc_flag_s.list = sw.list;

	status_s.version = trc_status_version_1;

	if sw.brief
	then trc_status_ptr = null;
	else trc_status_ptr = addr (status_s);

	if sw.list
	then call ioa_ ("^/Reference list^[ until first asychronous change^]:", sw.verify_refs);

	call transaction_call_$status (tcf_iocb_ptr, transaction_no, trc_flags, trc_status_ptr, transaction_status, code);
	if code ^= 0 & code ^= error_table_$asynch_change
	then do;
		call com_err_ (code, command, "Getting the status of ^[the current transaction^s^;transaction ^d^].",
		     transaction_no = 0, transaction_no);
		return;
	     end;

	if transaction_no ^= 0 | ^sw.brief
	then call ioa_ ("^/transaction:^2-^[^d^s^;^s^d^]", sw.brief, transaction_no, status_s.transaction_no);

	call ioa_ ("status:^3-^[^[incomplete^;committed^;rolled back^;undefined^]^s^;^s^d^]",
	     trc_INCOMPLETE <= transaction_status & transaction_status <= trc_UNDEFINED, transaction_status + 1,
	     transaction_status);

	if transaction_status ^= trc_UNDEFINED & ^sw.brief
	then call ioa_ ("passive references:^2-^d^/non-passive references:^-^d", status_s.passive_refs,
		status_s.non_passive_refs);

	if code ^= 0
	then call com_err_ (code, command);
     end status;

/* Execute a command line as a transaction. */

transact:
     procedure;

	declare command_line_length	 fixed binary (21);
	declare first_command_line_arg fixed binary;
	declare retry_limit		 fixed binary;
	declare 1 sw		 unaligned,
		2 signal		 bit (1),
		2 no_signal	 bit (1);

	string (sw) = ""b;
	retry_limit = 0;

	first_command_line_arg = 0;
	argx = 3;
	do while (argx <= arg_count);
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;

	     if first_command_line_arg > 0
	     then command_line_length = command_line_length + length (arg_string) + 1;

	     else if arg_string = "-retry"
	     then do;
		     argx = argx + 1;
		     if argx > arg_count
		     then do;
			     call com_err_ (0, command, "Missing retry limit after -retry.");
			     return;
			end;

		     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, command, "Argument ^d.", argx);
			     return;
			end;

		     retry_limit = cv_dec_check_ (arg_string, code);
		     if code ^= 0
		     then do;
			     call com_err_ (0, command, "Retry limit expected. ^a", arg_string);
			     return;
			end;
		end;

	     else if arg_string = "-signal"
	     then sw.signal = "1"b;

	     else if arg_string = "-no_signal"
	     then sw.no_signal = "1"b;

	     else if index (arg_string, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", arg_string);
		     return;
		end;

	     else do;
		     first_command_line_arg = argx;
		     command_line_length = length (arg_string);
		end;

	     argx = argx + 1;
	end;

	if first_command_line_arg = 0
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a transact tcf_io_switch {-control_args} command_line",
		     command);
		return;
	     end;

	if sw.signal & sw.no_signal
	then do;
		call com_err_ (0, command, "The -signal and -no_signal control arguments are incompatible.");
		return;
	     end;

	sw.signal = ^sw.no_signal;

	begin;
	     declare command_line	      char (command_line_length);
	     declare one_more_time	      bit (1);
	     declare try		      fixed binary;

	     do argx = first_command_line_arg to arg_count;
		call cu_$arg_ptr_rel (argx, arg_ptr, arg_length, code, arg_list_ptr);
		if code ^= 0
		then do;
			call com_err_ (code, command, "Argument ^d.", argx);
			return;
		     end;

		if argx = first_command_line_arg
		then command_line = arg_string;
		else command_line = rtrim (command_line) || " " || arg_string;
	     end;

	     if sw.signal
	     then on program_interrupt
		     goto execute_command_line;

	     try = 0;

execute_command_line:
	     one_more_time = "1"b;
	     do while (try <= retry_limit & code = error_table_$asynch_change | one_more_time);
		one_more_time = "0"b;
		try = try + 1;

		call transaction_call_$transact (tcf_iocb_ptr, command_line, transaction_no, code);
	     end;

	     if code = 0
	     then call ioa_ ("The transaction committed on try ^d with transaction number ^d.", try, transaction_no);

	     else if code = error_table_$asynch_change
	     then if sw.signal
		then signal transaction_failure;
		else call com_err_ (code, command, "On try ^d.", try);

	     else call com_err_ (code, command, "On transaction ^d.", transaction_no);
	end;
     end transact;

     end transaction_call;
