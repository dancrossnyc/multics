/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Vfile_ Transaction Interfaces.

   Written by Mike Asherman.
Modified:
03/02/79  by  M. N. Davidoff to use better interfaces and cleaned up a little .
05/17/79  by  Lindsey Spratt to interpret 22-byte reflist keys as non-passive references when gk_inf.descrip
		= -1.
07/06/79  by  M. N. Davidoff to fix bug where transaction_call_$status was not verifying if P_trc_status_ptr = null.
*/
transaction_call_:
     procedure;

/* parameter */

	declare P_command_line	 char (*);
	declare P_status		 fixed binary;
	declare P_transaction_no	 fixed binary (35);
	declare P_trc_flags		 bit (36) aligned;
	declare P_trc_status_ptr	 pointer;
	declare code		 fixed binary (35);
	declare tcfp		 pointer;

/* automatic */

	declare adjust_mod		 fixed binary (35);
	declare block_ptr		 pointer;
	declare change_tcf		 bit (1) aligned;
	declare cur_mod		 fixed binary (35);
	declare cur_tcode		 fixed binary (35);
	declare current_descrip	 fixed binary (35);
	declare end_of_reference_list	 bit (1) aligned;
	declare entry_point		 char (32);
	declare 1 gk_inf,
		2 header		 like gk_header,
		2 key		 char (22);
	declare ind_desc		 fixed binary (35);
	declare iocb_ptr		 pointer;
	declare iocbp		 pointer;
	declare last_file_id	 fixed binary (35);
	declare mod		 fixed binary;
	declare pos_ptr		 pointer;
	declare ref_cnt		 fixed binary;
	declare refp		 pointer;
	declare rollback_sw		 bit (1) aligned;
	declare time_stamp		 fixed binary (71);
	declare timeout		 fixed binary (71);
	declare transaction		 bit (1) aligned;
	declare unique_name		 char (32);

/* based */

/* Reference list and TCF key structure.  The TCF has keys which are 4 bytes long.  These keys are transaction
   entries.  The reference list has keys which are 12, 16 or 22 bytes long.  The 12 byte keys are I/O switch entries.
   The 16 and 22 byte keys are reference list entries. */

	declare 1 gk_key		 aligned based (addr (gk_inf.key)),
		2 number		 fixed binary (35),
		2 file_id		 fixed binary (35),
		2 rec_id		 fixed binary (35),
		2 blockp		 pointer unaligned,
		2 time		 fixed binary (53) unaligned;

/* builtin */

	declare binary		 builtin;
	declare codeptr		 builtin;
	declare clock		 builtin;
	declare rtrim		 builtin;
	declare stacq		 builtin;
	declare string		 builtin;

/* condition */

	declare cleanup		 condition;

/* entry */

	declare cu_$cp		 entry (pointer, fixed binary (21), fixed binary (35));
	declare date_time_		 entry (fixed binary (71), char (*));
	declare get_pdir_		 entry returns (char (168));
	declare ioa_		 entry options (variable);
	declare open_indx_file$adjust_record
				 entry (pointer, fixed binary (35), fixed binary (35), fixed binary (35));
	declare sub_err_		 entry options (variable);
	declare unique_chars_	 entry (bit (*)) returns (char (15));

/* Execute a Multics command line as a transaction. */

transact:
     entry (tcfp, P_command_line, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_command_line		(Input) Multics command line to execute
   P_transaction_no		(Output) transaction number of the transaction
   code			(Output) standard status code */

	entry_point = "transact";
	code = 0;
	P_transaction_no = 0;

	call check_tcf_io_switch;

	on cleanup
	     call rollback (tcfp, P_transaction_no, code);

	call cu_$cp (addr (P_command_line), length (P_command_line), code);

	call commit (tcfp, P_transaction_no, code);
	if code ^= error_table_$asynch_change
	then return;

	call rollback (tcfp, P_transaction_no, code);

	code = error_table_$asynch_change;
	return;

/* Obtain the status of a transaction. */

status:
     entry (tcfp, P_transaction_no, P_trc_flags, P_trc_status_ptr, P_status, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Input) transaction to find the status of.  Zero
			means the current transaction.
   P_trc_flags		(Input) what actions to perform
   P_trc_status_ptr		(Input) pointer to a trc_status structure or null
   P_status		(Output) status of the transaction
   code 			(Output) standard status code */

	entry_point = "status";
	trc_flags = P_trc_flags;
	trc_status_ptr = P_trc_status_ptr;
	P_status = trc_UNDEFINED;
	code = 0;

	call check_tcf_io_switch;

	if P_transaction_no = 0
	then cur_tcode = tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code;
	else cur_tcode = P_transaction_no;

	if cur_tcode ^= 0
	then do;
		unspec (gk_inf.flags) = ""b;
		gk_inf.input_key = "1"b;
		gk_inf.head_size = 4;
		gk_inf.key_len = 4;
		gk_key.number = cur_tcode;

		call iox_$control (tcfp, "get_key", addr (gk_inf), code);

		if code = 0
		then P_status = -gk_inf.descrip;
		else if code = error_table_$no_key | code = error_table_$no_record
		then code = 0;
		else call check_code ("Can't get TCF entry.");
	     end;

/* Return more detailed information only if requested. */

	if trc_status_ptr ^= null
	then do;
		if trc_status.version ^= trc_status_version_1
		then do;
			code = error_table_$unimplemented_version;
			return;
		     end;

		trc_status.transaction_no = cur_tcode;
		trc_status.transaction_status = P_status;
		trc_status.passive_refs = 0;
		trc_status.non_passive_refs = 0;
	     end;

	if P_status = trc_UNDEFINED
	then return;

/* There are no asynchronous changes or references if there is no reference list. */

	refp = tcfp -> iocb.open_data_ptr -> indx_cb.reflp;
	if refp = null
	then return;

	call verification ("1"b, trc_flag_s.verify_refs);

	code = 0;
	return;

/* Clean up after aborting a transaction. */

rollback:
     entry (tcfp, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Output) transaction number of the aborted transaction
   code			(Output) standard status code */

	entry_point = "rollback";
	rollback_sw = "1"b;
	goto join;

/* Start a new transaction and finish an old one. */

checkpoint:					/* TEMPORARY -- This entry point should be deleted. */
commit:
     entry (tcfp, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Output) transaction number of the completed transaction
   code			(Output) standard status code */

	entry_point = "commit";
	rollback_sw = "0"b;

join:
	P_transaction_no = 0;
	code = 0;

	call check_tcf_io_switch;

	cur_tcode = tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code;
	P_transaction_no = cur_tcode;

/* Return if there is no transaction in progress. */

	if cur_tcode = 0
	then return;

/* Get the reference list.  It's an error if there isn't one because a transaction is in progress. */

	refp = tcfp -> iocb.open_data_ptr -> indx_cb.reflp;
	if refp = null
	then do;
		code = error_table_$no_operation;
		call check_code ("No reference list.");
	     end;

/* Indicate roll back or roll forward to adjust_record logic.  Perform passive verification before the commitment. */

	if rollback_sw
	then adjust_mod = 0;
	else do;
		adjust_mod = cur_tcode;
		call verification ("0"b, "1"b);
	     end;

/* Go through non-passive references and indicate the status of the transaction. */

	call find_first_ref;
	if code ^= 0
	then do;
		code = error_table_$no_operation;
		call check_code ("No reference list entries after passive verification.");
	     end;

	call get_next_non_passive_ref (end_of_reference_list);

	change_tcf = "1"b;
	last_file_id = 0;
	do while (gk_key.number = cur_tcode & ^end_of_reference_list);
	     if gk_key.file_id ^= last_file_id		/* must set iocbp for this file */
	     then do;
		     call set_iocbp (gk_key.file_id);	/* gets information from start of reference list */
		     last_file_id = gk_key.file_id;
		end;

/* Prepare to alter the TCF entry.  A commitment or rollback is irreversible once the TCF has been changed. */

	     if change_tcf
	     then begin;
		     declare 1 rk_inf,
			     2 header	      like rk_header,
			     2 key	      char (4);
		     declare transaction_status     fixed binary;

		     tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code = 0;

		     string (rk_inf.flags) = "111"b;
		     rk_inf.old_descrip = -trc_INCOMPLETE;
		     rk_inf.key_len = length (rk_inf.key);
		     unspec (rk_inf.key) = unspec (cur_tcode);

		     if rollback_sw
		     then rk_inf.new_descrip = -trc_ROLLED_BACK;
		     else rk_inf.new_descrip = -trc_COMMITTED;

		     call iox_$control (tcfp, "reassign_key", addr (rk_inf), code);
		     if code ^= 0
		     then if code = error_table_$no_key
			then call check_code ("No TCF entry for transaction.");
			else if code ^= error_table_$no_record
			then call check_code ("Can't change TCF entry.");
			else do;			/* see if already did operation */
				call status (tcfp, cur_tcode, ""b, null, transaction_status, code);
				call check_code ("Couldn't change TCF entry.  Can't get transaction's status.");

				if transaction_status = trc_UNDEFINED
				then do;
					code = error_table_$no_operation;
					call check_code ("Couldn't change TCF entry.  Transaction's entry is gone.")
					     ;
				     end;

				if rollback_sw
				then if transaction_status = trc_COMMITTED
				     then do;
					     code = error_table_$no_operation;
					     call check_code ("Transaction already committed.");
					end;
				     else if transaction_status ^= trc_ROLLED_BACK
				     then do;
					     code = error_table_$no_operation;
					     call check_code ("Invalid TCF status code found during rollback.");
					end;
				     else ;
				else if transaction_status = trc_ROLLED_BACK
				then do;
					code = error_table_$no_operation;
					call check_code ("Transaction already rolled back.");
				     end;
				else if transaction_status ^= trc_COMMITTED
				then do;
					code = error_table_$no_operation;
					call check_code ("Invalid TCF status code found during commitment.");
				     end;
			     end;

		     change_tcf = "0"b;
		end;

	     call open_indx_file$adjust_record (iocbp, gk_key.rec_id, adjust_mod, code);
	     call check_code ("Can't adjust a modified record.");

	     gk_inf.descrip = 0;			/* move onto the next non-passive reference */
	     call get_next_non_passive_ref (end_of_reference_list);
	end;

	code = 0;
	tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code = 0;

return_from_transaction_call_:
	return;

/* Reserve a transaction number for the next transaction. */

assign:
     entry (tcfp, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Output) new transaction number
   code			(Output) standard status code */

	entry_point = "assign";
	P_transaction_no = 0;

	call check_tcf_io_switch;

	if tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code ^= 0
	then do;
		code = error_table_$no_operation;
		return;
	     end;

/* This loop will try again if there is an asynchronous insertion. */

	code = 1;
	do while (code ^= 0);
	     call iox_$position (tcfp, 1, 0, code);	/* eof */
	     call check_code ("Can't position to end of TCF to find last entry.");

	     call iox_$position (tcfp, 0, -1, code);	/* backspace */
	     if code = 0
	     then do;				/* get last used transaction number */
		     unspec (gk_inf.flags) = ""b;

		     call iox_$control (tcfp, "get_key", addr (gk_inf), code);
		     call check_code ("Can't get last key of TCF.");

		     cur_tcode = gk_key.number + 1;
		end;
	     else if code = error_table_$end_of_info
	     then cur_tcode = 1;			/* first TCF entry */
	     else call check_code ("Can't backspace from end of TCF.");

	     call create_tcf_entry (cur_tcode);
	     if code ^= 0
	     then if code ^= error_table_$key_duplication
		then call check_code ("Can't add a new key to the TCF.");
	end;

	P_transaction_no = cur_tcode;
	return;

/* Get the current transaction number. */

number:
     entry (tcfp, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Output) current transaction number
   code			(Output) standard status code */

	entry_point = "number";
	P_transaction_no = 0;
	code = 0;

	call check_tcf_io_switch;

	P_transaction_no = tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code;
	return;

/* Change the current transaction number.  This should be used with caution. */

change_current_transaction_no:
     entry (tcfp, P_transaction_no, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   P_transaction_no		(Input) new current transaction number
   code			(Output) standard status code */

	entry_point = "change_current_transaction_no";
	code = 0;

	call check_tcf_io_switch;

	if P_transaction_no < 0
	then do;
		code = error_table_$bad_arg;
		return;
	     end;


	tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code = P_transaction_no;
	return;

/* Create a reference list. */

setup_ref_list:
     entry (tcfp, code);

/* tcfp			(Input) pointer to the iocb for the TCF I/O switch
   code			(Output) standard status code */

	entry_point = "setup_ref_list";
	code = 0;

	call check_tcf_io_switch;

	unique_name = unique_chars_ (""b) || ".refl.vfile_";

	call iox_$attach_name (unique_name, iocbp, "vfile_ " || rtrim (get_pdir_ ()) || ">" || unique_name,
	     codeptr (transaction_call_), code);
	call check_code ("Can't attach reference list.");

	call iox_$open (iocbp, Keyed_sequential_update, "0"b, code);
	call check_code ("Can't open reference list.");

	tcfp -> iocb.open_data_ptr -> indx_cb.reflp = iocbp;
	return;

/* Make sure the TCF I/O switch is open. */

check_tcf_io_switch:
     procedure;

	if tcfp -> iocb.open_descrip_ptr ^= null
	then return;

	code = error_table_$not_open;
	goto return_from_transaction_call_;
     end check_tcf_io_switch;

/* Perform passive verification. */

verification:
     procedure (verify_only, check_asynch_changes);

	declare verify_only		 bit (1) aligned;	/* (Input) on if only obtaining a transaction's status */
	declare check_asynch_changes	 bit (1);		/* (Input) on to check for asychronous changes */

	declare end_of_reference_list	 bit (1) aligned;
	declare my_lock_id		 bit (36) aligned;

	call find_first_ref;
	if code ^= 0
	then if verify_only
	     then return;
	     else do;
		     code = error_table_$no_operation;
		     call check_code ("No reference list entries.");
		end;

	my_lock_id = tcfp -> iocb.open_data_ptr -> indx_cb.saved_lock_copy;
	transaction = "1"b;
	timeout = 0;				/* no point waiting to verify */

	end_of_reference_list = "0"b;
	do while (gk_key.number = cur_tcode & ^end_of_reference_list);
	     block_ptr = gk_key.blockp;		/* pointer to stat record header */

/* If the record is locked, then we have a non-passive reference, otherwise if the record is not locked, the
   reference is passive.  For non-passive references before a commitment (^verify_only) make sure
   record_block.lock_flag is on.  All flags will then be set before the commitment starts.  This will force users to
   examine the TCF to determine which record image currently applies.  When record_block.lock_flag is off, the before
   image is guaranteed to be valid.  */

	     if gk_inf.descrip = -1
	     then if verify_only
		then do;
			if trc_status_ptr ^= null
			then trc_status.non_passive_refs = trc_status.non_passive_refs + 1;

			if trc_flag_s.list
			then if gk_inf.key_len = 16
			     then call ioa_ ("File: ^o, Descriptor: ^o Locked.", gk_key.file_id, gk_key.rec_id);
			     else begin;
				     declare date_time_string	      char (24);
				     call date_time_ ((gk_key.time), date_time_string);
				     call ioa_ ("File: ^o, Descriptor: ^o, Last modified: ^a, Locked.",
					gk_key.file_id, gk_key.rec_id, date_time_string);
				end;
		     end;
		else if stacq (block_ptr -> stat_struct.record_lock, my_lock_id, my_lock_id)
						/* be sure under own lock */
		then if ^block_ptr -> record_block.lock_flag & stat_struct.modifier = cur_tcode
		     then block_ptr -> record_block.lock_flag = "1"b;
		     else ;
		else ;
	     else do;

/* Verify a passive reference. */

		     if verify_only
		     then do;
			     if trc_status_ptr ^= null
			     then trc_status.passive_refs = trc_status.passive_refs + 1;

			     if trc_flag_s.list
			     then if gk_inf.key_len = 16
				then call ioa_ ("File: ^o, Descriptor: ^o, Last modifier: ^d.", gk_key.file_id,
					gk_key.rec_id, gk_inf.descrip);
				else begin;
					declare date_time_string	 char (24);

					call date_time_ ((gk_key.time), date_time_string);
					call ioa_
					     ("File: ^o, Descriptor: ^o, Last modified: ^a, Image descriptor: ^o.",
					     gk_key.file_id, gk_key.rec_id, date_time_string, gk_inf.descrip);
				     end;
			end;

		     if check_asynch_changes
		     then begin;
			     declare asynch_change	      bit (1) aligned;

			     current_descrip = gk_key.rec_id;
			     call set_current_image_info;

/* Long form verification uses the time_stamp and the indirect descriptor. */

			     if cur_mod = 0 | cur_mod = -1
			     then if gk_inf.key_len = 16
				then asynch_change = gk_inf.descrip ^= -3 | time_stamp ^= 0 | ind_desc ^= -1;
				else if gk_inf.key_len > 16
						/* A key_len of >16 occurs when: passive & ((cur_mod = 0) | (cur_mod = -1))
		         or; not passive & (stat_struct.prev_mod = 0).
(This latter implies cur_mod = 0.)
		        and; this reference must be the first to this 
			        record in  the reflist by this 
			        transaction.
If not passive then gk_inf.descrip = -1, and the converse.  If gk_inf.descrip
is not = -1, then the old check for inequality with ind_desc is used.
*/
				then if gk_inf.descrip ^= -1
				     then asynch_change = gk_key.time ^= time_stamp | gk_inf.descrip ^= ind_desc;
				     else asynch_change = gk_key.time ^= time_stamp;
				else asynch_change = "0"b;
			     else asynch_change = gk_inf.key_len > 16 | cur_mod ^= gk_inf.descrip;

			     if asynch_change
			     then do;
				     code = error_table_$asynch_change;
				     goto return_from_transaction_call_;
				end;
			end;
		end;

/* Move on to the next reference for this transaction. */

	     call iox_$position (refp, 0, 1, code);
	     call check_code ("Can't position to next reference list entry.");

	     call iox_$control (refp, "get_key", addr (gk_inf), code);
	     if code ^= 0
	     then if code = error_table_$end_of_info
		then end_of_reference_list = "1"b;
		else call check_code ("Can't get next reference list entry for verification.");
	end;
     end verification;

/* Locate first item in reference list for this transaction. */

find_first_ref:
     procedure;

	unspec (gk_inf.flags) = ""b;
	gk_inf.input_key = "1"b;
	gk_inf.head_size = 4;
	gk_inf.key_len = 4;
	gk_key.number = cur_tcode;

	call iox_$control (refp, "get_key", addr (gk_inf), code);
	if code ^= 0
	then if code ^= error_table_$no_record & code ^= error_table_$no_key
	     then call check_code ("Can't find first reference list entry.");

	gk_inf.input_key = "0"b;			/* suppress seeking on next get_key */
     end find_first_ref;

/* Get the next locked item in the reference list. */

get_next_non_passive_ref:
     procedure (end_of_reference_list);

	declare end_of_reference_list	 bit (1) aligned;	/* (Output) on if no more items in reference list */

/* Skip over the passive references. */

	end_of_reference_list = "0"b;
	do while ((gk_inf.descrip >= 0 | gk_inf.descrip = -3) & ^end_of_reference_list);
	     call iox_$position (refp, 0, 1, code);
	     call check_code ("Can't position to next non-passive reference list entry.");

	     call iox_$control (refp, "get_key", addr (gk_inf), code);
	     if code ^= 0
	     then if code = error_table_$no_record | code = error_table_$end_of_info
		then end_of_reference_list = "1"b;
		else call check_code ("Can't get next non-passive reference list entry.");
	end;
     end get_next_non_passive_ref;

/* Create an entry in the TCF for a new transaction. */

create_tcf_entry:
     procedure (mod_arg);

	declare mod_arg		 fixed binary (35); /* (Input) transaction to create a TCF entry for */

	unspec (gk_inf.flags) = "11"b;
	gk_inf.descrip = -trc_INCOMPLETE;
	gk_inf.key_len = 4;
	gk_key.number = mod_arg;

	call iox_$control (tcfp, "add_key", addr (gk_inf), code);
	if code = 0
	then tcfp -> iocb.open_data_ptr -> indx_cb.transaction_code = mod_arg;
     end create_tcf_entry;

/* Obtain a file's iocb pointer. */

set_iocbp:
     procedure (uid_arg);

	declare uid_arg		 fixed binary (35); /* (Input) file_id of the iocb to find */

	declare 1 gk_inf,
		2 header		 like gk_header,
		2 key		 char (12);

	declare gk_desc		 pointer unaligned based (addr (gk_inf.descrip));
	declare 1 gk_key		 aligned based (addr (gk_inf.key)),
		2 zero		 fixed binary (35),
		2 lock_id		 bit (36),
		2 file_id		 fixed binary (35);

	unspec (gk_inf.flags) = ""b;
	gk_inf.input_key = "1"b;
	gk_inf.reset_pos = "1"b;			/* don't lose place in reference list */
	gk_inf.head_size = length (gk_inf.key);
	gk_inf.key_len = length (gk_inf.key);
	gk_key.zero = 0;
	gk_key.lock_id = refp -> iocb.open_data_ptr -> indx_cb.saved_lock_copy;
	gk_key.file_id = uid_arg;

	call iox_$control (refp, "get_key", addr (gk_inf), code);
	call check_code ("Can't get I/O switch reference list entry.");

	iocbp = gk_desc;
     end set_iocbp;

/* Error reporting routine. */

check_code:
     procedure (message);

	declare message		 char (*);	/* (Input) error message */

	declare sub_code		 fixed binary (35);

	if code = 0
	then return;

	sub_code = 0;
	call sub_err_ (code, "transaction_call_$" || entry_point, "c", null, sub_code, message);
	goto return_from_transaction_call_;
     end check_code;

/* The set_current_image_info procedure uses the following global variables as arguments:
   (Who knows, it may also use some more.)

   block_ptr	(Input/Output) pointer to stat record header
   code		(Output) standard status code
   cur_mod	(Output) The transaction number of the current modifier.  Zero and negative numbers are special.
		-1 means the current modifier is outside the transaction system.
   current_descrip	(Input) the current record's descriptor
   ind_desc	(Output) The indirect descriptor.  Component and offset of where the record is.  -1 is special.
   mod		(Output) Some kind of modifier's transaction number.
   ref_cnt	(Output) reference count
   timeout	(Output) when the information becomes invalid?
   time_stamp	(Output) when the record was last modified.
   transaction	(Input) whether or not this opening is in transaction mode
*/
%include set_current_image_info;

%include transaction_call;
%include vfile_indx;
%include ak_info;
%include iocbv;
%include iox_entries;
%include vfile_error_codes;
%include iox_modes;
     end transaction_call_;
