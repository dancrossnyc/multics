/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* this routine is used by io_call to support control
   orders issued to vfile_ from command level */

/* format: style2 */
vfile_io_control:
     proc (iocb_ptr, file_base_ptr, io_call_infop, code);
	is_af = "0"b;				/* not active function entry */
mainline:
	brief_sw = "0"b;
	info_ptr = addr (info);
	if (io_call_info.order_name = "get_key") | (io_call_info.order_name = "gk")
	then do;
		substr_sw = "0"b;
		gk_info_ptr = info_ptr;
		unspec (gk_info.flags) = "0"b;
		gk_info.version = gk_info_version_0;

		do i = 1 to nargs;			/* pick up optional args */
		     if (io_call_info.args (i) = "-substr") | (io_call_info.args (i) = "-su")
		     then if io_call_info.nargs < i + 1
			then go to noarg;
			else do;
				i = i + 1;
				comma_off = index (io_call_info.args (i), ",");
				substr_sw = "1"b;
				if comma_off = 0	/* whole tail wanted */
				then substr_off = fixed (io_call_info.args (i));
				else do;
					substr_off = fixed (substr (io_call_info.args (i), 1, comma_off - 1));
					substr_len = fixed (substr (io_call_info.args (i), comma_off + 1));
				     end;
			     end;
		     else if io_call_info.args (i) = "-head"
						/* next arg is head */
		     then if io_call_info.nargs <= i	/* not enough args */
			then do;
noarg:
				code = error_table_$noarg;
				return;		/* abort */
			     end;
			else do;
				i = i + 1;
handle_head:
				gk_info.input_key = "1"b;
				if gk_info.current
				then go to badarg;	/* -cur_pos and -head conflict */
				gk_info.key_len = length (io_call_info.args (i));
				gk_info.head_size = gk_info.key_len;
				gk_info.key = io_call_info.args (i);
			     end;
		     else if (io_call_info.args (i) = "-desc") | (io_call_info.args (i) = "-ds")
		     then if i = io_call_info.nargs
			then go to noarg;
			else do;
				i = i + 1;
				if gk_info.desc_code = 1
						/* -current descriptor specified */
				then go to badarg;	/* conflicts with given descriptor */
				gk_info.input_desc = "1"b;
				gk_info.descrip = cv_oct_ ((io_call_info.args (i)));
			     end;
		     else if (io_call_info.args (i) = "-reset") | (io_call_info.args (i) = "-rs")
		     then gk_info.reset_pos = "1"b;
		     else if (io_call_info.args (i) = "-current") | (io_call_info.args (i) = "-cur")
		     then if gk_info.input_desc
			then go to badarg;		/* conflicting options */
			else gk_info.desc_code = 1;
		     else if (io_call_info.args (i) = "-rel_type") | (io_call_info.args (i) = "-rel")
		     then if io_call_info.nargs = i
			then go to noarg;
			else do;
				if gk_info.current	/* -cur_pos specified */
				then go to badarg;	/* conflicts */
				i = i + 1;
				gk_info.rel_type = fixed (io_call_info.args (i));
				if (gk_info.rel_type < 0) | (gk_info.rel_type > 2)
				then go to badarg;
			     end;
		     else if io_call_info.args (i) = "-cur_pos"
		     then if gk_info.input_key | (gk_info.rel_type ^= 0)
			then go to badarg;
			else gk_info.current = "1"b;
		     else if (io_call_info.args (i) = "-brief") | (io_call_info.args (i) = "-bf")
		     then brief_sw = "1"b;
		     else if gk_info.input_key	/* head already given */
		     then do;			/* must be an invalid arg */
badarg:
			     code = error_table_$bad_arg;
			     return;
			end;
		     else go to handle_head;
		end;

		call control ("get_key");
		if substr_sw
		then if comma_off = 0
		     then substr_len = gk_info.key_len + 1 - substr_off;
		     else ;
		else do;
			substr_off = 1;
			substr_len = gk_info.key_len;
		     end;
		substr_len = min (substr_len, gk_info.key_len + 1 - substr_off);
		if is_af
		then if code = 0
		     then do;
			     io_call_af_ret = substr (gk_info.key, substr_off, min (af_returnl, substr_len));
			     return;
			end;
		     else do;
			     io_call_af_ret = "";
			     if brief_sw
			     then do;
brief_ret:
				     if code = 0
				     then return;
				     if (code ^= error_table_$no_operation) & (code ^= error_table_$bad_arg)
				     then code = 0;
				     return;
				end;
			end;
		if brief_sw
		then go to brief_ret;
		if code = 0
		then if substr_sw
		     then call io_call_info.report (substr (gk_info.key, substr_off, substr_len));
		     else call io_call_info.report ("key: ^a
descrip: ^o", gk_info.key, gk_info.descrip);
		return;
	     end;

	if ((io_call_info.order_name = "read_position") | (io_call_info.order_name = "rp")) & ^is_af
	then do;					/* no input args--just print results */
		call control ("read_position");
		if code = 0
		then call io_call_info.report ("next pos: ^d
end pos: ^d", rp_info.next_pos, rp_info.end_pos);
	     end;

	else if ((io_call_info.order_name = "record_status") | (io_call_info.order_name = "rs")
		| (io_call_info.order_name = "rsb")) & ^is_af
	then do;
		brief_sw = (io_call_info.order_name = "rsb");
		i = 0;
		if io_call_info.nargs > 0
		then if (io_call_info.args (1) = "-brief") | (io_call_info.args (1) = "-bf")
		     then do;
			     i = 1;
			     brief_sw = "1"b;
			end;
		rs_info_ptr = info_ptr;
		rs_info.version = rs_info_version_2;
		rs_info.record_ptr = null;
		rs_info.ref_count = -1;
		rs_info.modifier = 0;
		rs_info.last_image_modifier = 0;
		if io_call_info.nargs - i >= 1	/* more optional argument given */
		then if io_call_info.args (1 + i) = "-pos"
		     then string (rs_info.flags) = "0000001"b;
						/* locate_pos_sw */
		     else string (rs_info.flags) = substr (bit (io_call_info.args (1 + i)), 1, 7);
		else string (rs_info.flags) = "0"b;
		if rs_info.create_sw		/* two more args required */
		then do;				/* get rec_len and block_size */
			if io_call_info.nargs - i < 2
			then do;
				code = error_table_$noarg;
				return;		/* abort */
			     end;
			rs_info.record_length = fixed (io_call_info.args (2 + i), 21, 0);
						/* length in bytes */
			if nargs = 2 + i		/* max_rec_len not specified, use default */
			then rs_info.max_rec_len = rs_info.record_length;
			else rs_info.max_rec_len = fixed (io_call_info.args (3 + i), 19, 0);
						/* max rec len in bytes */
		     end;
		else if rs_info.locate_sw		/* one additional arg required */
		then if io_call_info.nargs < 2 + i
		     then do;
			     code = error_table_$noarg;
			     return;
			end;
		     else rs_info.descriptor = cv_oct_ ((io_call_info.args (2 + i)));
		else if rs_info.locate_pos_sw
		then if io_call_info.nargs < 2 + i
		     then go to noarg;		/* pos specification required */
		     else do;
			     rs_info.record_length = fixed (io_call_info.args (2 + i));
			     if io_call_info.nargs < 3 + i
			     then rs_info.descriptor = 0;
			     else rs_info.descriptor = cv_oct_ ((io_call_info.args (3 + i)));
			end;
		if rs_info.lock_sw			/* modifier code may be supplied */
		then if rs_info.create_sw & (io_call_info.nargs > 3 + i)
		     then rs_info.modifier = fixed (io_call_info.args (4 + i), 35, 0);
		     else if rs_info.locate_sw & (io_call_info.nargs > 2 + i)
		     then rs_info.modifier = fixed (io_call_info.args (3 + i), 35, 0);
		     else if io_call_info.nargs > 1 + i
		     then rs_info.modifier = fixed (io_call_info.args (2 + i), 35, 0);
		call control ("record_status");
		if brief_sw
		then go to brief_ret;
		if (code ^= 0) & (rs_info.record_ptr = null) & (rs_info.ref_count = -1)
						/* no info returned */
		then return;			/* don't print out a bunch of garbage */
		call io_call_info.report ("record bytes: ^d
max rec bytes: ^d", rs_info.record_length, rs_info.max_rec_len);
		if rs_info.max_rec_len ^= 0		/* block has been allocated */
		then call io_call_info.report ("record ptr: ^p
descriptor: ^o", rs_info.record_ptr, rs_info.descriptor);
		if rs_info.ref_count >= 0		/* more stats to print */
		then do;
			call date_time_ (rs_info.time_last_modified, date_time);
			call io_call_info.report ("ref count: ^d
last changed: ^a", rs_info.ref_count, date_time);

			if rs_info.modifier ^= 0
			then call io_call_info.report ("modifier: ^d", rs_info.modifier);
			if rs_info.last_image_modifier ^= 0
			then call io_call_info.report ("last modifier: ^d", rs_info.last_image_modifier);
		     end;
	     end;

	else if ((io_call_info.order_name = "seek_head") | (io_call_info.order_name = "sh")) & ^is_af
	then if io_call_info.nargs < 1		/* one or two are required */
	     then code = error_table_$noarg;
	     else if io_call_info.nargs > 3
	     then code = error_table_$too_many_args;
	     else do;				/* set up info structure */
		     i = 0;
		     if (io_call_info.args (1) = "-brief") | (io_call_info.args (1) = "-bf")
		     then do;
			     i = 1;
			     brief_sw = "1"b;
			end;
		     if io_call_info.nargs = 1 + i	/* use default rel_type=0 */
		     then sh_info.rel_type = 0;
		     else sh_info.rel_type = fixed (io_call_info.args (1 + i), 17, 0);
						/* 0,1, or 2 to
						   indicate =,>=, or > */
		     if (io_call_info.nargs = 3) & ^brief_sw
		     then code = error_table_$bad_arg;
		     else do;
			     sh_info.key_len = length (io_call_info.args (io_call_info.nargs));
						/* length of search key */
			     sh_info.key = io_call_info.args (io_call_info.nargs);
						/* for comparison with key heads */
			     call control ("seek_head");
			end;
		     if brief_sw
		     then go to brief_ret;
		     return;
		end;

	else if ((io_call_info.order_name = "add_key") | (io_call_info.order_name = "ak")) & ^is_af
	then if io_call_info.nargs < 1		/* one arg required */
	     then code = error_table_$noarg;
	     else do;
		     call get_ak_args;
		     call control ("add_key");
		end;

	else if ((io_call_info.order_name = "delete_key") | (io_call_info.order_name = "dk")) & ^is_af
	then if io_call_info.nargs >= 1		/* args are optional */
	     then do;
		     call get_ak_args;
		     call control ("delete_key");
		end;
	     else call iox_$control (iocb_ptr, "delete_key", (null), code);

	else if ((io_call_info.order_name = "reassign_key") | (io_call_info.order_name = "rk")) & ^is_af
	then if io_call_info.nargs < 2		/* two args required */
	     then code = error_table_$noarg;
	     else do;
		     call get_rk_args;
		     call control ("reassign_key");	/* make given key point to current rec */
		end;

	else if (io_call_info.order_name = "select") | (io_call_info.order_name = "sl")
	then do;
		unspec (common_sl_info.flags) = "0"b;
		common_sl_info.version = sl_info_version_0;
		common_sl_info.desc_arrayp = null;
		if nargs = 0			/* just return status of current subset */
		then do;
			common_sl_info.array_limit = 0;
						/* without tail structure */
			common_sl_info.status_only = "1"b;
		     end;
		else do;
			call process_select_args;
			if code ^= 0
			then go to exit;
			call build_select_info;
		     end;
		call control ("select");
		if is_af
		then do;				/* handle active function reference */
			if (code ^= 0) & (code = error_table_$no_record)
						/* seletion of null set */
			then io_call_af_ret = "-0";	/* special notation for the null set */
			else io_call_af_ret = char (common_sl_info.subset_no);
						/* return the subset number */
			if brief_sw
			then go to brief_ret;	/* see if code should be cleared */
			return;			/* finished with active function evaluation */
		     end;
		if (code = 0) & ^brief_sw
		then call report_subset_status;
		if common_sl_info.output_descriptors & (code = 0)
		then call list_descriptors;		/* frees temporary descriptor array */
		if brief_sw
		then go to brief_ret;
	     end;

	else if (io_call_info.order_name = "exclude") | (io_call_info.order_name = "ex")
	then if io_call_info.nargs < 1		/* arg required */
	     then code = error_table_$noarg;
	     else do;
		     unspec (common_sl_info.flags) = "0"b;
		     common_sl_info.version = sl_info_version_0;
		     common_sl_info.desc_arrayp = null;
		     call process_select_args;
		     if code ^= 0
		     then go to exit;
		     call build_select_info;
		     call control ("exclude");
		     if is_af
		     then do;
			     if (code ^= 0) & (code = error_table_$no_record)
						/* seletion of null set */
			     then io_call_af_ret = "-0";
						/* special notation for the null set */
			     else io_call_af_ret = char (common_sl_info.subset_no);
						/* return the subset number */
			     if brief_sw
			     then go to brief_ret;
			     return;
			end;
		     if (code = 0) & ^brief_sw
		     then call report_subset_status;
		     if common_sl_info.output_descriptors & (code = 0)
		     then call list_descriptors;
		     if brief_sw
		     then go to brief_ret;
		end;

	else if is_af				/* called as an active function */
	then do;					/* error -- not permitted for any of the following orders */
		code = error_table_$no_operation;
		return;
	     end;
	else if (io_call_info.order_name = "tr") /* no info struc required */ | (io_call_info.order_name = "tc")
	then call control ("truncate");

	else if (io_call_info.order_name = "max_rec_len") | (io_call_info.order_name = "mx")
	then do;					/* takes one optional arg */
		if io_call_info.nargs >= 1		/* arg present */
		then mx_info.new_max_recl = fixed (io_call_info.args (1), 21, 0);
		else mx_info.new_max_recl = 0;	/* indicates no chanfge */
		call control ("max_rec_len");
		if code = 0
		then call io_call_info.report ("old max recl: ^d", mx_info.old_max_recl);
	     end;

	else if (io_call_info.order_name = "error_status") | (io_call_info.order_name = "er")
	then do;					/* no inputs--print results */
		er_info.version = 1;		/* only version supported */
		call control ("error_status");
		if code = 0
		then if er_info.error_type = 0
		     then call io_call_info.error (0, io_call_info.caller_name, "no errors");
		     else call io_call_info.report ("requested: ^d
received: ^d", er_info.requested, er_info.received);
	     end;

	else if (io_call_info.order_name = "min_block_size") | (io_call_info.order_name = "mb")
	then do;
		if io_call_info.nargs < 1
		then do;
			mb_info.min_cap = 0;
			mb_info.min_res = 0;
		     end;
		else mb_info.min_res = fixed (io_call_info.args (1), 17, 0);
		if io_call_info.nargs < 2
		then mb_info.min_cap = 0;
		else mb_info.min_cap = fixed (io_call_info.args (2), 21, 0);
		call control ("min_block_size");
	     end;

	else if (io_call_info.order_name = "set_wait_time") | (io_call_info.order_name = "sw")
	then if io_call_info.nargs < 1
	     then code = error_table_$noarg;
	     else do;
		     if io_call_info.nargs = 1
		     then new_wait_time = float (io_call_info.args (1));
		     else if (io_call_info.args (1) = "-cdtm") | (io_call_info.args (1) = "-collection_delay_time")
		     then do;
			     wt_info.version = -2;
			     wt_info.collection_delay_time = float (io_call_info.args (2));
			end;
		     else do;
			     code = error_table_$too_many_args;
			     return;
			end;
		     call control ("set_wait_time");
		end;

	else if (io_call_info.order_name = "set_file_lock") | (io_call_info.order_name = "sf")
	then if io_call_info.nargs < 1
	     then code = error_table_$noarg;
	     else do;
		     set_lock_flag = bit (io_call_info.args (1), 2);
		     call control ("set_file_lock");
		end;

	else if (io_call_info.order_name = "file_status") | (io_call_info.order_name = "fs")
	then call vfile_status$print_ (iocb_ptr, file_base_ptr, io_call_info.report, code);
	else call control ((io_call_info.order_name));	/* no info struc */

	return;					/* end of vfile_io_control main routine */

af:
     entry (iocb_ptr, file_base_ptr, io_call_infop, code);
	is_af = "1"b;
	go to mainline;				/* let each order do it's thing */

control:
     proc (order_arg);				/* passes order call through iox_ */
	call iox_$control (iocb_ptr, (order_arg), addr (info), code);
	dcl     order_arg		 char (24) var;
     end control;

get_ak_args:
     proc;					/*  picks up optional key and descrip */
	ak_info_ptr = info_ptr;
	if nargs = 1
	then do;					/* use default switch settings--adding key to current */
		string (ak_info.flags) = "10"b;	/* just input key */
		ak_info.key_len = length (io_call_info.args (1));
		ak_info.key = io_call_info.args (1);
		return;
	     end;
	string (ak_info.flags) = bit (io_call_info.args (1));
	if ak_info.input_key & ak_info.input_desc & (io_call_info.nargs < 3)
	then do;					/* error */
noarg:
		code = error_table_$noarg;
		go to exit;
	     end;
	if ak_info.input_key
	then do;					/* pick up key arg */
		ak_info.key_len = length (io_call_info.args (2));
		ak_info.key = io_call_info.args (2);
		if ak_info.input_desc		/* descrip also given */
		then ak_info.descrip = cv_oct_ ((io_call_info.args (3)));
	     end;
	else ak_info.descrip = cv_oct_ ((io_call_info.args (2)));
	return;					/* end of get_ak_args routine */

get_rk_args:
     entry;					/* picks up optional args for "reassign_key" order */
	rk_info_ptr = info_ptr;
	string (rk_info.flags) = bit (io_call_info.args (1));
	if rk_info.input_key
	then do;					/* pick up key arg */
		rk_info.key_len = length (io_call_info.args (2));
		rk_info.key = io_call_info.args (2);
		if io_call_info.nargs < 3		/* at least one more arg required */
		then go to noarg;			/* error */
		if rk_info.input_old_desc
		then do;				/* may be two more args */
			rk_info.old_descrip = cv_oct_ ((io_call_info.args (3)));
			if rk_info.input_new_desc	/* yes--there is another arg */
			then if io_call_info.nargs < 4
			     then go to noarg;
			     else rk_info.new_descrip = cv_oct_ ((io_call_info.args (4)));
		     end;
		else rk_info.new_descrip = cv_oct_ ((io_call_info.args (3)));
	     end;
	else if rk_info.input_old_desc
	then do;
		rk_info.old_descrip = cv_oct_ ((io_call_info.args (2)));
		if rk_info.input_new_desc
		then if io_call_info.nargs < 3
		     then go to noarg;
		     else rk_info.new_descrip = cv_oct_ ((io_call_info.args (3)));
	     end;
	else rk_info.new_descrip = cv_oct_ ((io_call_info.args (2)));
	return;					/* end of get_rk_args routine */
     end get_ak_args;

process_select_args:
     proc;					/* builds info structure elements for "select" order */
	sl_array_limit = 0;
	i = 1;
	if is_bf_or_ls_opt ()
	then do;
		i = 2;
		if io_call_info.nargs = 1
		then do;
			common_sl_info.status_only = "1"b;
			return;
		     end;
	     end;
	common_sl_info.status_only = "0"b;
	if (io_call_info.args (i) = "-reset") | (io_call_info.args (i) = "-rs")
	then do;
		common_sl_info.list_type = 0;		/* indicates re-selection */
		if nargs > i
		then common_sl_info.subset_no = fixed (io_call_info.args (i + 1));
		else common_sl_info.subset_no = 0;	/* default is identity subset */
		common_sl_info.array_limit = 0;	/* smallest info structure supported */
		return;				/* done processing args */
	     end;
	common_sl_info.list_type = 1;
	if io_call_info.args (io_call_info.nargs) = "-delete_old_subsets" | io_call_info.args (io_call_info.nargs) = "-dos"
	then common_sl_info.delete_old_subsets = "1"b;

	if (io_call_info.args (i) = "-or") | /* wants default delimiter */ (io_call_info.args (i) = "-or_key")
	     | (io_call_info.args (i) = "-ork")
	then do;
		default_delim = io_call_info.args (i);
		if default_delim = "-or_key"
		then default_delim = "-ork";
		i = i + 1;
		if i > nargs
		then go to no_arg;
	     end;
	else default_delim = "";
	if (default_delim = "") & ((io_call_info.args (i) = "-desc") | (io_call_info.args (i) = "-ds"))
	then do;
		call build_array;
		return;
	     end;
	if (default_delim = "") | (default_delim = "-or")
	then if io_call_info.args (i) = "-head"
	     then do;
		     i = i + 1;			/* advance to next arg */
		     head = "1"b;			/* list of intervals representation */
		end;
	     else if io_call_info.args (i) = "-key"
	     then do;
		     i = i + 1;
		     head = "0"b;			/* first interval must match key exactly */
		end;
	     else head = "1"b;
	else head = "0"b;

	do int = 1 to max_int;			/* for each index interval specified */
	     len = length (io_call_info.args (i));
	     f_head.length (int) = len;
	     f_head.kptr (int) = addrel (addr (io_call_info.args (i)), 1);
	     i = i + 1;
	     if i > nargs - bin (common_sl_info.delete_old_subsets)
	     then do;
		     if head
		     then l_head.length (int) = len;
		     else l_head.length (int) = -1;	/* by convention, indicates exact key match */
		     l_head.kptr (int) = f_head.kptr (int);
		     return;
		end;
	     if (default_delim = "")
		& ((io_call_info.args (i) = "-or") | (io_call_info.args (i) = "-ork")
		| (io_call_info.args (i) = "-or_key"))
	     then do;
		     i = i + 1;
new_int:
		     if head
		     then l_head.length (int) = len;
		     else l_head.length (int) = -1;
		     l_head.kptr (int) = f_head.kptr (int);
		     if (default_delim = "-or") | ((default_delim ^= "-ork") & (io_call_info.args (i - 1) = "-or"))
		     then head = "1"b;
		     else head = "0"b;
		     if i > nargs
		     then do;
no_arg:
			     code = error_table_$noarg;
			     return;
			end;
		end;
	     else if (default_delim ^= "-ork") & ((io_call_info.args (i) = "-thru") | (io_call_info.args (i) = "-to"))
	     then if ^head
		then do;				/* error-- "-thru" not allowed with key match spec */
bad_arg:
			code = error_table_$bad_arg;
			return;			/* abort */
		     end;
		else do;
			i = i + 1;
			if i > nargs
			then go to no_arg;
			len = length (io_call_info.args (i));
			if io_call_info.args (i - 1) = "-to"
						/* open ended interval */
			then l_head.length (int) = -len;
						/* convention for indicating open interval */
			else l_head.length (int) = len;
						/* inclusive interval */
			l_head.kptr (int) = addrel (addr (io_call_info.args (i)), 1);
			i = i + 1;
			if i > nargs
			then return;
			if (default_delim = "")
			     & ((io_call_info.args (i) ^= "-or") & (io_call_info.args (i) ^= "-ork")
			     & (io_call_info.args (i) ^= "-or_key"))
			then go to bad_arg;
			if default_delim = ""
			then i = i + 1;
			if i > nargs
			then go to no_arg;
		     end;
	     else if default_delim = ""
	     then go to bad_arg;
	     else go to new_int;
	end;					/* end of arg pick-up loop */

	code = error_table_$too_many_args;
     end process_select_args;

report_subset_status:
     proc;
	call io_call_info.report ("subset: ^d ,records: ^d", common_sl_info.subset_no, common_sl_info.count);
     end report_subset_status;

list_descriptors:
     proc;					/* prints list of octal descriptors and frees list allocation */

	do i = 1 to common_sl_info.count;		/* loop through array elements */
	     call io_call_info.report ("^o", common_sl_info.desc_arrayp -> desc_array (i));
	end;

	free common_sl_info.desc_arrayp -> desc_array;
     end list_descriptors;

is_bf_or_ls_opt:
     proc returns (bit (1) aligned);
	if (io_call_info.args (i) = "-brief") | (io_call_info.args (i) = "-bf")
	then do;
		brief_sw = "1"b;
		return ("1"b);
	     end;
	if (io_call_info.args (i) = "-list") | (io_call_info.args (i) = "-ls")
	then do;
		common_sl_info.output_descriptors = "1"b;
		return ("1"b);
	     end;
	return ("0"b);
     end is_bf_or_ls_opt;

build_select_info:
     proc;					/* prepares info structure for select or exclude */
	if common_sl_info.list_type ^= 1
	then return;				/* no tail structure required */
	common_sl_info.array_limit = int;
	if size (hi_sl_info) > max_info_size
	then do;					/* implementation limit */
		code = error_table_$too_many_args;
		go to exit;
	     end;

	do i = 1 to int;
	     hi_sl_info.interval (i) = temp_int (i);
	end;

	dcl     i			 fixed;
     end build_select_info;

build_array:
     proc;					/* prepares info structure for descriptor list */
	common_sl_info.list_type = 2;			/* code for descriptor array specification */
	common_sl_info.array_limit = nargs - i;		/* prev arg was -ds or -desc */
	if size (da_sl_info) > max_info_size		/* implementation limit--should do allocation if necessary */
	then do;					/* cop out solution--eventually do this better */
		code = error_table_$too_many_args;
		go to exit;			/* abort */
	     end;

	do n = i + 1 to nargs;			/* pick up descriptor args */
	     da_sl_info.desc_array (n - i) = cv_oct_ ((io_call_info.args (n)));
	end;

	dcl     n			 fixed;
     end build_array;

exit:
	return;					/* external exit */

	dcl     iocb_ptr		 ptr;
	dcl     is_af		 bit (1) aligned;
	dcl     brief_sw		 bit (1) aligned;
	dcl     (i, len)		 fixed;
	dcl     info_ptr		 ptr;
	dcl     vfile_status$print_	 entry (ptr, ptr, entry options (variable), fixed (35));
	dcl     date_time_		 entry (fixed (71), char (*));
	dcl     date_time		 char (24);
	dcl     file_base_ptr	 ptr;
%include rs_info;
%include io_call_info;
	dcl     code		 fixed (35);
	dcl     (char, fixed, unspec, string, length, addr, null, size)
				 builtin;
%include vfile_error_codes;
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed (35));
	dcl     max_info_size	 static fixed internal options (constant) init (200);
	dcl     1 wt_info		 based (addr (info)),
		2 version		 float,
		2 collection_delay_time
				 float;
	dcl     1 info,				/* large enough for any vfile_ supported info struc */
		2 words		 (max_info_size) fixed;
						/* largest info structure */
	dcl     1 sh_info		 based (addr (info)),
						/* for "seek_head" */
		2 rel_type	 fixed,		/* 0,1, or 2 for =,>=, or > */
		2 key_len		 fixed,		/* length of search key below */
		2 key		 char (256);	/* compared with key heads in file */
	dcl     1 rp_info		 based (addr (info)),
						/* for "read_position" */
		2 next_pos	 fixed (34),	/* abs position of next byte or record */
		2 end_pos		 fixed (34);	/* total count of bytes or records in file */
	dcl     1 mx_info		 based (addr (info)),
						/* for "max_rec_len" */
		2 old_max_recl	 fixed (21),	/* output */
		2 new_max_recl	 fixed (21);	/* input--zero indicates no change */
	dcl     1 er_info		 based (addr (info)),
						/* for "error_status" */
		2 version		 fixed,		/* (Input) must=1 */
		2 error_type	 fixed,		/* only one currently supported */
		2 requested	 fixed (34),	/* position skip arg issued on call */
		2 received	 fixed (34);	/* successful skips actually made */
	dcl     1 mb_info		 based (addr (info)),
						/* for "min_block_size" */
		2 min_res		 fixed (21),
		2 min_cap		 fixed (21);	/* minimum allocation for record block */
	dcl     new_wait_time	 float based (addr (info));
	dcl     set_lock_flag	 bit (2) aligned based (addr (info));
	dcl     cv_oct_		 entry (char (*)) returns (fixed (35));
%include ak_info;
%include select_info;
	dcl     int		 fixed;
	dcl     1 temp_int		 (1:max_int),
		2 f_head,
		  3 length	 fixed,
		  3 kptr		 ptr,
		2 l_head,
		  3 length	 fixed,
		  3 kptr		 ptr;
	dcl     max_int		 static fixed options (constant) init (50);
	dcl     head		 bit (1) aligned;
	dcl     default_delim	 char (8) aligned;
	dcl     comma_off		 fixed;
	dcl     substr_off		 fixed;
	dcl     substr_len		 fixed;
	dcl     substr_sw		 bit (1) aligned;
     end vfile_io_control;
