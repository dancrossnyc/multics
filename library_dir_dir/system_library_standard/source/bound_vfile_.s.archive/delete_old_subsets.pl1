/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
delete_old_subsets:
     proc (p_iocb_ptr);

/* START OF DECLARATIONS */
/* Parameter */

	dcl     p_iocb_ptr		 ptr;

/* Automatic */

	dcl     attach_descrip	 char (256) varying;
	dcl     mode		 fixed bin;
	dcl     fcb_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     pos_ptr		 ptr;
	dcl     iocb_ptr		 ptr;
	dcl     dname		 char (168);
	dcl     ename		 char (32);

/* Based */
/* Builtin */
/* Controlled */
/* Constant */

	dcl     SET_BC_AND_TRUNCATE	 init ("110"b) bit (3) internal static options (constant);
	dcl     myname		 init ("vfile_") char (6) internal static options (constant);
	dcl     PATHNAME_START	 init (8) fixed bin internal static options (constant);

/* Entry */

	dcl     msf_manager_$adjust	 entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
	dcl     msf_manager_$open	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     msf_manager_$close	 entry (ptr);
	dcl     sub_err_		 entry options (variable);

/* External */
/* END OF DECLARATIONS */

	iocb_ptr = null;
	indx_cb_ptr = p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_data_ptr;
	attach_descrip = p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> atb.attach_descrip_string;

	dname =
	     substr (attach_descrip, PATHNAME_START,
	     p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> atb.dname_len);
	ename =
	     substr (attach_descrip,
	     PATHNAME_START + p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> atb.dname_len + 1,
	     p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> atb.ename_len);
	mode = p_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> atb.opening_mode;

	call iox_$close (p_iocb_ptr, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to close the temporary for subsets.");

	call iox_$detach_iocb (p_iocb_ptr, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to detach the switch for subsets.");


	call msf_manager_$open (dname, ename, fcb_ptr, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to open the msf for temporary subsets.");

	call msf_manager_$adjust (fcb_ptr, 0, 0, SET_BC_AND_TRUNCATE, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to adjust the msf ofr temporary subsets.");

	call msf_manager_$close (fcb_ptr);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to close the msf ofr temporary subsets.");

	call iox_$attach_ptr (p_iocb_ptr, (attach_descrip), null, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to attach the temporary subset vfile_.");

	call iox_$open (p_iocb_ptr, mode, "0"b, code);
	if code ^= 0
	then call sub_err_ (code, myname, "s", null, 0, "Unable to open the temporary subset vfile_.");

	return;

%include iocb;
%include iox_dcls;
%include vfile_indx;
%include vf_attach_block;
     end delete_old_subsets;
