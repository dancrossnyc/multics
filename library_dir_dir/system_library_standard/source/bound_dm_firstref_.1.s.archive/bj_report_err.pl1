/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bj_report_err:
     procedure (p_code, p_caller_name);

/* DESCRIPTION

	The gateway through which before journal manager support routines
     tell before journal manager subroutine interfaces that an error has
     occurred.  this procedure will make the error code available to the
     before journal manager in a global basis, log the error in the system
     log, and either return to the before journal manager interface
     procedure or signal an error.  the intelligence needed to decide
     whether or not to signal an error resides in this procedure.

	Arguments:

     p_code -        INPUT, standard status code of error
     p_caller_name - INPUT, name of support routine that took the error
*/

/* HISTORY
Written by M. Pandolf, 05/24/83.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
02/05/85 by Stanford Cox: Added trailing "_" to transaction_bj_full_ condition.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/
%page;
/* copy the error code into a externally available location */

	bjm_data_$bj_code = p_code;

/* log the error in the data management log. we assume errors are few */

	call dm_misc_util_$log (LOG_SV, p_code, p_caller_name,
	     "When called by ^a in transaction ^o.",
	     bjm_data_$bj_operation, dm_data_$current_txn_id);

/*
   this next portion of code sends the error in one of two directions: either
   a non standard return is made to a predefined location or a condition is
   signalled.  there is no slick way to test and branch - the error code must
   be checked to see if it is one of those requiring a signal.
*/

	if p_code = dm_error_$bj_journal_full
	then do;

	     call FILL_SIGNAL_STRUCTURE ();
	     call signal_ ("transaction_bj_full_", null (), addr (my_signal_structure));

	end;

	else do;

	     goto bjm_data_$bj_exit_err;

	end;

%page;

/* INTERNAL PROCEDURE */

FILL_SIGNAL_STRUCTURE:
     procedure ();

	my_signal_structure.length = size (my_signal_structure);
	my_signal_structure.version = 1;
	my_signal_structure.action_flags.cant_restart = "1"b;
	my_signal_structure.action_flags.default_restart = "0"b;
	my_signal_structure.action_flags.quiet_restart = "0"b;
	my_signal_structure.action_flags.support_signal = "0"b;
	my_signal_structure.action_flags.pad = ""b;
	my_signal_structure.info_string = "";
	my_signal_structure.status_code = p_code;

	return;

     end FILL_SIGNAL_STRUCTURE;

%page;

/* DECLARATIONS */

/* Parameters */

dcl  p_code		        fixed bin (35) parameter;
dcl  p_caller_name		        char (*);

/* Automatic */

dcl  1 my_signal_structure	        aligned like condition_info_header;

/* Static, External */

dcl  dm_data_$current_txn_id	        bit (36) aligned external static;
dcl  dm_error_$bj_journal_full        fixed bin (35) ext static;

/* Entry */

dcl  dm_misc_util_$log	        entry () options (variable);
dcl  signal_		        entry () options (variable);

/* Builtin */

dcl  null			        builtin;
dcl  size			        builtin;

/* Include Files */

%page;
%include dm_bj_global_error_info;
%page;
%include dm_log_sv_codes;
%page;
%include condition_info_header;
%page;

     end bj_report_err;
