/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	This procedure removes a process_id from the before journal per
     system check in table.  It produces minimal changes: all bits in the
     table for a process are removed and the process_id is removed.  If the
     journal is no longer used by any process nor by any transaction, it is
     deactivated.
*/

/* HISTORY:

Written by M. Pandolf, 11/08/82.
Modified:
11/23/82 by A. Bensoussan:  to call dm_hcs_$free_journal.
02/25/83 by A. Bensoussan:  to free bj_pste.
03/29/83 by A. Bensoussan:  to call bj_pste_register$check_out_dead where
	  the knowledge about the check_in_table is centralized, and also
	  to call bj_pste_delete where the deletion of pste is centralized.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
12/10/84 by R. Michael Tague:  Changed incl name to dm_daemon_sv_codes.
01/16/85 by Lee A. Newcomb:  Fixed to not set bjm_data_$exit_err before setting
            bjm_data_$bj_operation; removed the unreferenced
            dm_daemon_sv_codes.incl.pl1 and other unref'd variables; fixed the
            format to conform with project standards.
02/13/85 by Lee A. Newcomb:  Fixed to use the ERROR_RETURN mechanism; use
	  use the new version constant BJ_PSTE_VERSION_2; and to check
	  the version of the BJ_PST after we get its location.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bjm_adjust_process_id:
   procedure (p_process_id, p_code);

/* DECLARATIONS */

/* Parameters */
dcl  (
     p_process_id			bit (36),		/* process to eliminate */
     p_code			fixed bin (35)	/* error code */
     )				parameter;

/* Automatic */
dcl  (
     bjm_clean_up_needed		bit (1) aligned init (""b),
     process_id			bit (36) aligned,	/* local copy of parameter */
     code				fixed bin (35),	/* local status code */
     bj_ix			fixed bin		/* index of journal in PST tables */
     )				automatic;

/* Builtin */
dcl  (addr, null)			builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     CHECK_FOR_BJM_RECURSION		bit (1) aligned init ("1"b),
     DONT_CHECK_FOR_BJM_RECURSION	bit (1) aligned init ("0"b),
     ME				char (32)
				init ("bjm_adjust_process_id")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_cleanup_tables$handler	entry (fixed bin (35)),
     bj_pst_lock			entry (),
     bj_pst_lock$unlock		entry (),
     bj_pste_delete			entry (ptr),
     bj_pste_register$check_out_dead	entry (ptr, bit (36) aligned),
     hcs_$validate_processid		entry (bit (36) aligned,
				fixed bin (35))
     )				external;		/* External */
dcl  (
     bjm_data_$bj_pst_ptr		pointer,
     (
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_recursive_invoc,
     dm_error_$valid_process
     )				fixed bin (35)
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
COPY_AND_INIT_PARAMETERS:
   do;
      process_id = p_process_id;
      p_code = 0;
   end COPY_AND_INIT_PARAMETERS;

SETUP_FOR_NON_STANDARD_EXIT:
   do;
      on cleanup call CLEAN_UP ();

      call SET_BJM_DATA_ERROR_HANDLING_VALUES (NONLOCAL_ERROR_EXIT, ME,
	 CHECK_FOR_BJM_RECURSION);

   end SETUP_FOR_NON_STANDARD_EXIT;

FIND_BJ_PST:
   do;
      bj_pst_ptr = bjm_data_$bj_pst_ptr;
      call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
	 dm_error_$bj_bad_pst_version);
   end FIND_BJ_PST;

/* verify that the process is is valid */

   call hcs_$validate_processid (process_id, code);
   if code = 0 then
      call ERROR_RETURN (dm_error_$valid_process);
   else code = 0;

/* lock the PST to prevent the tables being modified */

   call bj_pst_lock ();


/* Check out this dead process from all journals where it might be registered.
   Also remove its process_id from the before journal process table.*/

   call bj_pste_register$check_out_dead (null (), process_id);


/* Now try to deactivate any journal that seems to be not used by any process
   and any transaction.*/
DEACTIVE_UNUSED_JOURNALS:
   do bj_ix = 1 to bj_pst.max_n_entries;

      bj_pste_ptr = addr (bj_pst.e (bj_ix));

      if bj_pste.version = BJ_PSTE_VERSION_2 & bj_pste.n_processes = 0
	 & bj_pste.n_txn = 0 then
         call bj_pste_delete (bj_pste_ptr);		/* Will double check */
   end DEACTIVE_UNUSED_JOURNALS;

/* Unlock the bj_pst */
   call bj_pst_lock$unlock ();

   call FINISH ();

MAIN_RETURN:
   return;
%page;
NONLOCAL_ERROR_EXIT:
   call ERROR_RETURN (bjm_data_$bj_code);
%skip (4);
FINISH:
   proc ();

   call SET_BJM_DATA_ERROR_HANDLING_VALUES (bjm_data_$bj_default_error_label,
        "", DONT_CHECK_FOR_BJM_RECURSION);

   return;

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call CLEAN_UP ();
   p_code = er_p_code;
   goto MAIN_RETURN;

   end ERROR_RETURN;
%skip (4);
CLEAN_UP:
   proc ();

   if bjm_clean_up_needed then
      call bj_cleanup_tables$handler (0);

   call FINISH ();

   return;

   end CLEAN_UP;
%page;
SET_BJM_DATA_ERROR_HANDLING_VALUES:
   proc (sbdehv_p_error_exit, sbdehv_p_operation,
        sbdehv_p_check_for_recursive_invocation);

/* This internal procedure centralizes the setting of the BJM global	*/
/* error values in bjm_data_.  It is called near the beginning of	*/
/* this module, and in the FINISH internal procedure.  ONLY THE FIRST	*/
/* OF THESE CALLS SHOULD ASK FOR DETECTION OF A RECURSIVE INVOCATION	*/
/* OF THE BEFORE JOURNAL MANAGER, if the other calls did, we could	*/
/* end up getting a recursive call ERROR_RETURN, CLEAN_UP, FINISH,	*/
/* this proc, etc.						*/

dcl  (
     sbdehv_p_error_exit		label variable,
     sbdehv_p_operation		char (*),
     sbdehv_p_check_for_recursive_invocation
				bit (1) aligned
     )				parameter;

   if sbdehv_p_check_for_recursive_invocation then
      if bjm_data_$bj_operation ^= "" then
         call ERROR_RETURN (dm_error_$bj_recursive_invoc);

   bjm_clean_up_needed = "1"b;
   bjm_data_$bj_exit_err = sbdehv_p_error_exit;
   bjm_data_$bj_operation = sbdehv_p_operation;
   bjm_data_$bj_code = 0;

   return;

   end SET_BJM_DATA_ERROR_HANDLING_VALUES;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check both	*/
/* the PPT and PPTE structure versions.				*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_global_error_info;


   end bjm_adjust_process_id;
