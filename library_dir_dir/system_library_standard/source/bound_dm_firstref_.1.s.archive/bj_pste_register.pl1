/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_pste_register -  Procedure with three entry points to
     associate a process with a per-system table entry.  The entry points
     are "check_in", "check_out", and "check_out_dead" which create and
     delete association information.  The two main functions of these
     operations are to register the procedure in the per-system table
     check-in-table, and to update the PSTE cell "n_processes".

     NOTE: (bj_pste.version = 0) means that pste is not in use.

     ASSUMPTIONS ABOUT ENVIRONMENT:
      1) the before journal PST is already locked for one writer only.
      2) the process executing this code may not be able to successfuly
         complete this procedure.
*/

/* HISTORY:
Written by Mike Pandolf, 06/28/82.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_(pst pste)_version_bad
            to bj_bad_(pst pste)_version.
11/12/84 by M. Sharpe:  to correct format and dcls; to use ERROR_RETURN
	  technology; to remove the unused entrypoint bj_pste_register;
	  to change "if pix ^= 0..." ~line 306 to "if pix = 0...".
02/18/85 by Lee A. Newcomb:  Fixed to use the new BJ_PSTE_VERSION_2 constant;
            added the CHECK_VERSION_NUMERIC proc; changed each entry to use
            its full name in calls to bj_report_err; turned formatting on for
            the procedure; removed all mention of the never-implemented "undo"
	  functionality; standardized int process variable names.
02/28/85 by Lee A. Newcomb:  Added journalization comment for previous
            changes; initialized myname to an indicator of an invalid entry.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_pste_register$check_in:
   proc (p_bj_pste_ptr);

/* DECLARATIONS */

/* Parameter */
dcl  (
     p_bj_pste_ptr			ptr,		/* PSTE to which we are to "attach" */
     p_process_id			bit (36) aligned
     )				parameter;

/* Automatic */
dcl  (
     code				fixed bin (35) init (0),
						/* status code we use to verify subroutine calls */
     my_process_id			bit (36) init (""b),/* used to compare against check_in_table entries */
     have_process_ix		bit (1) aligned,	/* "1"b => found check_in_table entry with our process_id */
     first_free_process_ix		fixed bin (17) init (0),
						/* index of empty check_in_table entry that we will use */
     this_process_ix		fixed bin (17) init (0),
						/* do loop variable; index into check_in_table */
     max_n_processes		fixed bin init (0),
     max_n_journals			fixed bin init (0),
     myname			char (32)
				init (BJ_PSTE_REGISTER_MYNAME_NOT_SET)
     )				automatic;

/* Based */
/* Builtin */
dcl  (null, ptr)			builtin;

/* Condition */
/* Constants */
dcl  (
     BJ_PSTE_REGISTER_CHECK_IN	char (32)
				init ("bj_pste_register$check_in"),
     BJ_PSTE_REGISTER_CHECK_OUT	char (32)
				init ("bj_pste_register$check_out"),
     BJ_PSTE_REGISTER_CHECK_OUT_DEAD	char (32)
				init (
				"bj_pste_register$check_out_dead"),
     BJ_PSTE_REGISTER_MYNAME_NOT_SET	char (32)
				init (
				"bj_pste_register myname not set")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_report_err			entry (fixed bin (35), char (*)),
     get_process_id_		entry () returns (bit (36)),
     hcs_$validate_processid		entry (bit (36) aligned,
				fixed bin (35))
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     (
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_bad_pste_version,
     dm_error_$bj_pst_cit_full
     )				fixed bin (35)
     )				external;

/* Static */
dcl  process_ix			fixed bin init (-1) internal static;

/* END OF DECLARATIONS */
%page;
/* bj_pste_register$check_in:			repeat for reader	*/
/*      proc (p_bj_pste_ptr);					*/

   myname = BJ_PSTE_REGISTER_CHECK_IN;
   bj_pste_ptr = p_bj_pste_ptr;
   if bj_pste.version ^= 0 then			/* will be 0 for first user of PSTE */
      call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	 dm_error_$bj_bad_pste_version);

   call SET_PTRS ();

   if process_ix = -1 then				/* must get an index */
      process_ix = GET_PROCESS_IX ();

   if bj_check_in_table.cross_proc_bj (process_ix, bj_pste.bj_ix) = "0"b
   then do;
      bj_pste.n_processes = bj_pste.n_processes + 1;
      bj_check_in_table.cross_proc_bj (process_ix, bj_pste.bj_ix) = "1"b;
   end;

   go to MAIN_RETURN;

/* end bj_pste_register$check_in; */
%skip (4);
bj_pste_register$check_out:
   entry (p_bj_pste_ptr);

   myname = BJ_PSTE_REGISTER_CHECK_OUT;

   if process_ix = -1 then
      ;						/* process not in check in table */
   else do;
      bj_pste_ptr = p_bj_pste_ptr;			/* version of zero ==> not in use */
      if bj_pste.version ^= 0 then do;
         call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	    dm_error_$bj_bad_pste_version);

         call SET_PTRS ();

         call CHECK_OUT (process_ix, bj_pste.bj_ix);
      end;
   end;

   go to MAIN_RETURN;

/* end bj_pste_register$check_out; */
%page;
bj_pste_register$check_out_dead:
   entry (p_bj_pste_ptr, p_process_id);

   myname = BJ_PSTE_REGISTER_CHECK_OUT_DEAD;
   call SET_PTRS ();

   if p_bj_pste_ptr ^= null () then do;
      bj_pste_ptr = p_bj_pste_ptr;
      call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	 dm_error_$bj_bad_pste_version);
      if p_process_id = "0"b then
         call CLEAN_ALL_DEAD_IN_ONE_BJ (bj_pste_ptr);
      else call CLEAN_ONE_DEAD_IN_ONE_BJ (bj_pste_ptr, p_process_id);
   end;
   else						/* p_bj_pste_ptr must be null */
        if p_process_id ^= "0"b then
      call CLEAN_ONE_DEAD_IN_ALL_BJ (p_process_id);
   else call CLEAN_ALL_DEAD_IN_ALL_BJ ();

   go to MAIN_RETURN;

/* end bj_pste_register$check_out_dead; */
%skip (4);
MAIN_RETURN:
   return;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35);

   call bj_report_err (er_p_code, myname);		/* does not return */

   end ERROR_RETURN;
%page;
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check several	*/
/* structures with numeric versions.  It is hoped newer versions of	*/
/* these structures will be changed to use char (8) versions.	*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%skip (4);
SET_PTRS:
   procedure ();

/* Get pointers to system tables and the max dimensions of them.	*/

   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);

   bj_check_in_table_ptr = ptr (bj_pst_ptr, bj_pst.check_in_table_offset);

   max_n_processes = dm_system_data_$bj_max_n_processes;
   max_n_journals = dm_system_data_$bj_max_n_journals;

   return;

   end SET_PTRS;
%page;
CHECK_OUT:
   proc (co_p_process_index, co_p_journal_index);

/* Remove the process as a user of the PSTE in the check in table,	*/
/* decrementing the count of the process' using the PSTE on the way.	*/

dcl  (
     co_p_process_index		fixed bin,	/* Input */
     co_p_journal_index		fixed bin		/* Input */
     )				parameter;

   if bj_check_in_table.cross_proc_bj (co_p_process_index, co_p_journal_index)
        = "1"b then do;				/* are using */
      bj_check_in_table
	 .cross_proc_bj (co_p_process_index, co_p_journal_index) = "0"b;
						/* now not using */
      bj_pst.e (co_p_journal_index).n_processes =
	 bj_pst.e (co_p_journal_index).n_processes - 1;
   end;

   return;

   end CHECK_OUT;
%page;
CLEAN_ALL_DEAD_IN_ONE_BJ:
   proc (cadiob_p_bj_pste_ptr);			/* Used by bj_close_oid */

dcl  cadiob_p_bj_pste_ptr		ptr parameter;

dcl  (
     (
     cadiob_journal_index		init (0),
     cadiob_number_of_live_processes	init (0),
     cadiob_process_index		init (0)
     )				fixed bin,
     cadiob_process_id		bit (36) aligned
     )				automatic;

   bj_pste_ptr = cadiob_p_bj_pste_ptr;

   cadiob_journal_index = bj_pste.bj_ix;

   do cadiob_process_index = 1 to max_n_processes;
      if bj_check_in_table
	 .cross_proc_bj (cadiob_process_index, cadiob_journal_index) then do;
         cadiob_process_id =
	    bj_check_in_table.process_id (cadiob_process_index);
         if PROCESS_IS_DEAD (cadiob_process_id) then
	  call CHECK_OUT (cadiob_process_index, cadiob_journal_index);
         else cadiob_number_of_live_processes =
	         cadiob_number_of_live_processes + 1;
      end;
   end;

   bj_pste.n_processes = cadiob_number_of_live_processes;

   return;

   end CLEAN_ALL_DEAD_IN_ONE_BJ;
%page;
CLEAN_ONE_DEAD_IN_ALL_BJ:
   proc (codiab_p_process_id);			/* Used bt bjm_adjust_processes */

dcl  codiab_p_process_id		bit (36) aligned parameter;

dcl  (
     codiab_process_id		bit (36) aligned init (""b),
     codiab_process_index		fixed bin init (0),
     codiab_journal_index		fixed bin init (0)
     )				automatic;

   codiab_process_id = codiab_p_process_id;
   if ^PROCESS_IS_DEAD (codiab_process_id) then
      return;

   codiab_process_index = FIND_PROCESS_IX (codiab_process_id);
   if codiab_process_index = 0 then
      return;

   do codiab_journal_index = 1 to max_n_journals;

      if bj_pst.e (codiab_journal_index).version = 0 then
         ;					/* pste not in use */
      else do;
         call CHECK_VERSION_NUMERIC (bj_pst.e (codiab_journal_index).version,
	    BJ_PSTE_VERSION_2, dm_error_$bj_bad_pste_version);
         call CHECK_OUT (codiab_process_index, codiab_journal_index);
      end;
   end;

   bj_check_in_table.process_id (codiab_process_index) = (36)"0"b;

   return;

   end CLEAN_ONE_DEAD_IN_ALL_BJ;
%page;
CLEAN_ONE_DEAD_IN_ONE_BJ:
   proc (codiob_p_bj_pste_ptr, codiob_p_process_id);	/* Not very useful */

dcl  (
     codiob_p_bj_pste_ptr		ptr,
     codiob_p_process_id		bit (36) aligned
     )				parameter;

dcl  (
     codiob_process_id		bit (36) aligned,
     codiob_process_index		fixed bin,
     codiob_journal_index		fixed bin
     )				automatic;

   bj_pste_ptr = codiob_p_bj_pste_ptr;
   codiob_process_id = codiob_p_process_id;

   codiob_journal_index = bj_pste.bj_ix;

   codiob_process_index = FIND_PROCESS_IX (codiob_process_id);
   if codiob_process_index = 0 then
      return;

   if ^PROCESS_IS_DEAD (codiob_process_id) then
      return;

   call CHECK_OUT (codiob_process_index, codiob_journal_index);

   return;

   end CLEAN_ONE_DEAD_IN_ONE_BJ;
%page;
CLEAN_ALL_DEAD_IN_ALL_BJ:
   proc ();

/* NOT IMPLEMENTED */
   return;

   end CLEAN_ALL_DEAD_IN_ALL_BJ;
%skip (4);
PROCESS_IS_DEAD:
   proc (pid_p_process_id) returns (bit (1) aligned);


dcl  pid_p_process_id		bit (36) aligned parameter;

dcl  pid_code			fixed bin (35) init (0) automatic;

   call hcs_$validate_processid (pid_p_process_id, pid_code);

   if pid_code ^= 0 then
      return ("1"b);
   else return ("0"b);

   end PROCESS_IS_DEAD;
%page;
GET_PROCESS_IX:
   procedure () returns (fixed bin);

/* See if our process is in the check in table (CIT).  If	*/
/* it is not, we try to find a free spot and claim it for	*/
/* ourself.  Whether we were in it to start or not, we tell	*/
/* the caller what index into the CIT we have.  Note: it is	*/
/* possible for the CIT to be full; if so, we call the	*/
/* ERROR_RETURN procedure and do not return to the caller.	*/

dcl  (
     gpi_first_free_process_index	fixed bin init (0),
     gpi_have_process_index		bit (1) aligned init (""b),
     gpi_this_process_id		bit (36) aligned init (""b),
     gpi_this_process_index		fixed bin init (0)
     )				automatic;

   gpi_this_process_id = get_process_id_ ();

IS_PROCESS_IN_CIT:
   do gpi_this_process_index = 1 to dm_system_data_$bj_max_n_processes
        while (^gpi_have_process_index);		/* to see if we are registered in PST already */

      if bj_check_in_table.process_id (gpi_this_process_index)
	 = gpi_this_process_id then
         gpi_have_process_index = "1"b;

      else if bj_check_in_table.process_id (gpi_this_process_index) = (36)"0"b
	 then
         if gpi_first_free_process_index = 0 then
	  gpi_first_free_process_index = gpi_this_process_index;
   end IS_PROCESS_IN_CIT;

   gpi_this_process_index = gpi_this_process_index - 1;	/* cancel out +1 effect of do loop */

   if ^gpi_have_process_index then			/* NOT in PST yet */
      if gpi_first_free_process_index = 0 then		/* no more room in CIT */
         call ERROR_RETURN (dm_error_$bj_pst_cit_full);

      else do;					/* we now add new CIT entry for our process */
         gpi_this_process_index = gpi_first_free_process_index;

/* zero the cross_proc_bj row this process will use */
         bj_check_in_table.cross_proc_bj (gpi_this_process_index, *) = "0"b;

         bj_check_in_table.process_id (gpi_this_process_index) =
	    gpi_this_process_id;
      end;					/* now in CIT */

   else ;						/* we were already in CIT */

   return (gpi_this_process_index);

   end GET_PROCESS_IX;
%page;
FIND_PROCESS_IX:
   proc (fpi_p_process_id) returns (fixed bin);

dcl  fpi_p_process_id		bit (36) aligned parameter;

dcl  (
     fpi_process_id			bit (36) aligned init (""b),
     fpi_process_index		fixed bin init (0)
     )				automatic;

   fpi_process_id = fpi_p_process_id;

   do fpi_process_index = 1 to max_n_processes;

      if bj_check_in_table.process_id (fpi_process_index) = fpi_process_id then
         return (fpi_process_index);

   end;

   return (0);

   end FIND_PROCESS_IX;
%page;
%include dm_bj_static;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_check_in_table;


   end bj_pste_register$check_in;
