/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_ppte_create adds information of a before journal open in the
     current process to the BJ per-process table.  Any entry's version
     component being zero indicates a free entry.  We use the first entry
     free as found via a linear search through the table.  It is assumed
     the calling module has already determined there is no entry for the
     journal; no check is made to verify this.
*/

/* HISTORY:
Written by Mike Pandolf, 08/04/82.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_ppt_version_bad to
            bj_bad_ppt_version.
02/08/85 by Lee A. Newcomb:  Fixed to declare dm_error_ codes correctly (with
            precision 35 instead of 17); added DESCRIPTION section and fixed
            format to follow project standards; removed obsolete comments
            about "undo" functionality; added ERROR_RETURN and
            CHECK_VERSION_NUMERIC procs.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_ppte_create:
   proc (p_bj_uid, p_file_oid, p_pste_ptr) returns (ptr);

/* DECLARATIONS */

/* Parameter */
dcl  (
     p_bj_uid			bit (36) aligned,
     p_file_oid			bit (36) aligned,
     p_pste_ptr			ptr
     )				parameter;

/* Automatic */
dcl  (
     found			bit (1) aligned init (""b),
     ppte_index			fixed bin
     )				automatic;

/* Builtin */
dcl  (addr, max)			builtin;

/* Condition */
/* Constant */
dcl  ME				char (14)
				init ("bj_ppte_create") internal
				static options (constant);

/* Entry */
dcl  (
     bj_report_err			entry (fixed bin (35), char (*)),
     clock_			entry returns (fixed bin (71))
     )				external;

/* External */
dcl  (
     bjm_data_$bj_ppt_ptr		pointer,
     dm_error_$bj_bad_ppt_version	fixed bin (35),
     dm_error_$bj_ppt_full		fixed bin (35)
     )				external;

/* Static */

/* END OF DECLARATIONS */
%page;
/* bj_ppte_create:				repeat for reader	*/
/*     proc (p_bj_uid, p_file_oid, p_pste_ptr) returns (ptr);	*/

   bj_ppt_ptr = bjm_data_$bj_ppt_ptr;

   call CHECK_VERSION_NUMERIC (bj_ppt.version, BJ_PPT_VERSION_1,
        dm_error_$bj_bad_ppt_version);

   do ppte_index = 1 to bj_ppt.max_n_entries while (^found);
      if bj_ppt.e (ppte_index).version = 0 then
         found = "1"b;
   end;

   if ^found then
      call ERROR_RETURN (dm_error_$bj_ppt_full);
   else						/* must fix since PL/I puts us one past */
        ppte_index = ppte_index - 1;			/* the entry we desire */

   bj_ppte_ptr = addr (bj_ppt.e (ppte_index));

   bj_ppte.bj_uid = p_bj_uid;
   bj_ppte.pf_oid = p_file_oid;
   bj_ppte.bj_pste_ptr = p_pste_ptr;
   bj_ppte.open_time = clock_ ();
   bj_ppte.n_opening = 1;

   bj_ppt.n_entries_used = bj_ppt.n_entries_used + 1;
   bj_ppt.highest_ix_used = max (ppte_index, bj_ppt.highest_ix_used);

   bj_ppte.version = BJ_PPTE_VERSION_1;

   return (bj_ppte_ptr);

/* end bj_ppte_create; */
%page;
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call bj_report_err (er_p_code, ME);

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_desired_version, cvn_p_error_to_use);

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_desired_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_desired_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_static;
%page;
%include dm_bj_ppt;


   end bj_ppte_create;
