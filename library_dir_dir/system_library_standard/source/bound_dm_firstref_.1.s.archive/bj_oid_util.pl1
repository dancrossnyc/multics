/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*   DESCRIPTION:

	Bj_oid_util is a procedure to convert between a before journal
     opening id and the per process before journal table entry pointer.
     The before journal opening id is based upon the table entry pointer:
     its first 18 bits are the offset from the pointer and its last 18 bits
     are the last 18 bits from the before journal unique id.

     	Each entrypoint as a short description section.

	NOTE:  the use of dm_error_$bj_bad_ppte_version to report a
     mismatch in the CHECK_UID_PART_OF_OID internal procedure should be
     changed.  It is not currently being done as it is unknown how many
     other places the same "error" is and time constraints.
*/

/*   HISTORY:

Written by Mike Pandolf, 06/28/82.
Modified:
07/10/82 by M. Pandolf:  added get_default_oid entry.
10/27/82 by M. Pandolf:  changed get_default_oid to get_latest_oid.
12/07/82 by Lee A. Newcomb:  added get_uid.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_(ppt ppte)_version_bad
            to $bj_bad_(ppt ppte)_version.
02/05/85 by Lee A. Newcomb:  Fixed format to conform with project standards;
            removed declarations for unused variables and added some for
            variables dcl'd by context or implication; added various internal
            procedures to aid in maintenance (e.g., ERROR_RETURN).
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_oid_util$get_oid:
   proc (p_bj_ppte_ptr) returns (bit (36) aligned);


/* DECLARATIONS */

/* Parameter */
dcl  (
     p_bj_ppte_ptr			pointer,
     p_bj_oid			bit (36) aligned
     )				parameter;

/* Automatic */
dcl  (
     bj_oid			bit (36) aligned,
     max_open_time			fixed bin (71),
     myname			char (32) init ("bj_oid_util$?"),
     this_ppte			fixed bin
     )				automatic;

/* Builtins */
dcl  (addr, ptr, rel, substr)		builtin;

/* Condition */
/* Constants */
/* Entries */

dcl  bj_report_err			entry (fixed bin (35), char (*));

/* External */
dcl  (
     bjm_data_$bj_ppt_ptr		pointer,
     dm_error_$bj_bad_ppt_version	fixed bin (35),
     dm_error_$bj_bad_ppte_version	fixed bin (35)
     )				external static;

/* Static */
/* END OF DECLARATIONS */
%page;
/* bj_oid_util$get_oid:			repeat for reader	*/
/*     proc (p_bj_ppte_ptr) returns (bit (36) aligned);		*/

/*   DESCRIPTION:

	The get_oid entrypoint expects a pointer to a before journal
     per-process table entry and will generate an opening id from the
     information in the pointer and the entry.
*/

   bj_ppte_ptr = p_bj_ppte_ptr;
   myname = "bj_oid_util$get_oid";

   call CHECK_VERSION_NUMERIC (bj_ppte.version, BJ_PPT_VERSION_1,
        dm_error_$bj_bad_ppte_version);

   bj_oid = rel (bj_ppte_ptr) || substr (bj_ppte.bj_uid, 19, 18);

   return (bj_oid);

/* end bj_oid_util$get_oid; */
%page;
bj_oid_util$get_uid:
   entry (p_bj_oid) returns (bit (36) aligned);

/*   DESCRIPTION:

	Get_uid is expected to return the unique ID of a before journal
     to its caller given the journal's opening ID.  It does this using the
     basic code of the get_ptr entry, but for convenience, grabs the UID
     for the caller.
*/

   bj_oid = p_bj_oid;				/* copy to local */

   bj_ppte_ptr = ptr (bjm_data_$bj_ppt_ptr, substr (bj_oid, 1, 18));
   myname = "bj_oid_util$get_uid";

   call CHECK_VERSION_NUMERIC (bj_ppte.version, BJ_PPTE_VERSION_1,
        dm_error_$bj_bad_ppte_version);
   call CHECK_UID_PART_OF_OID (bj_ppte.bj_uid, bj_oid);

   return (bj_ppte.bj_uid);

/* end bj_oid_util$get_uid; */
%page;
bj_oid_util$get_ptr:
   entry (p_bj_oid) returns (pointer);

/*   DESCRIPTION:

	The get_ptr entrypoint expects a before journal opening id and
     will obtain a pointer to the before journal table entry for the before
     journal referenced by the oid.     
*/

   bj_oid = p_bj_oid;

   bj_ppte_ptr = ptr (bjm_data_$bj_ppt_ptr, substr (bj_oid, 1, 18));
   myname = "bj_oid_util$get_ptr";

   call CHECK_VERSION_NUMERIC (bj_ppte.version, BJ_PPTE_VERSION_1,
        dm_error_$bj_bad_ppte_version);
   call CHECK_UID_PART_OF_OID (bj_ppte.bj_uid, bj_oid);

   return (bj_ppte_ptr);

/* end bj_oid_util$get_ptr; */
%page;
bj_oid_util$get_latest_oid:
   entry () returns (bit (36) aligned);

/*   DESCRIPTION:

	The bj_latest_oid entry searches the PPT for the most
     recently opened before journal, which is specified to be the default
     before journal when the old one is closed.

     ASSUMPTIONS:

     1) the cell bjm_data_$bj_ppt_ptr -> bj_ppt.default_bj_oid is zero,
     2) the version of the PPTE for the just closed before journal is zero.
*/

   bj_ppt_ptr = bjm_data_$bj_ppt_ptr;
   myname = "bj_oid_util$get_latest_oid";

   call CHECK_VERSION_NUMERIC (bj_ppt.version, BJ_PPT_VERSION_1,
        dm_error_$bj_bad_ppt_version);

   bj_oid = (36)"0"b;
   max_open_time = 0;

   do this_ppte = 1 to dm_system_data_$bj_max_n_journals;

      if bj_ppt.e (this_ppte).version = BJ_PPTE_VERSION_1 then
         if bj_ppt.e (this_ppte).open_time > max_open_time then do;

	  max_open_time = bj_ppt.e (this_ppte).open_time;
	  bj_oid =
	       rel (addr (bj_ppt.e (this_ppte)))
	       || substr (bj_ppt.e (this_ppte).bj_uid, 19, 18);
         end;
         else ;

   end;

   return (bj_oid);

/* end bj_oid_util$get_latest_oid; */
%page;
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call bj_report_err (er_p_code, myname);		/* no return */

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check both	*/
/* the PPT and PPTE structure versions.				*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%skip (4);
CHECK_UID_PART_OF_OID:
   proc (cupoo_p_bj_ppte_uid, cupoo_p_bj_oid);

dcl  (
     cupoo_p_bj_ppte_uid		bit (36) aligned,
     cupoo_p_bj_oid			bit (36) aligned
     )				parameter;

   if (substr (cupoo_p_bj_ppte_uid, 19, 18) ^= substr (cupoo_p_bj_oid, 19, 18))
        then
      call ERROR_RETURN (dm_error_$bj_bad_ppte_version);

   end CHECK_UID_PART_OF_OID;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_static;


   end bj_oid_util$get_oid;
