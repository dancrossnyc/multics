/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: ^indcomtxt */
/* DESCRIPTION:
	The subroutine interface to send wakeup to alleged daemon process
     which is running the data management system.  There is one entrypoint
     for each request.
*/

/* HISTORY:

Written by M. Pandolf, 10/27/82.
Modified:
11/04/82 by M. Pandolf:  to add bury_dead_process entrypoint.
11/22/82 by M. Pandolf:  to add new_proc entrypoint.
01/25/83 by M. Pandolf:  to add adjust_tdt_entry entrypoint and to add the
	  name adjust_process_id to bury entry.
06/07/83 by M. Pandolf:  to add flush_journals entrypoint.
07/26/83 by M. Pandolf:  to add process_command entrypoint.
01/04/84 by L. A. Newcomb:  renamed dm_gate_$get_aim_dir to
            dm_gate_$dm_get_aim_dir to track the gates entries new name.
09/27/84 by Lee A. Newcomb:  added the new_process_notifications entry, and
	  removed unused entry dm_send_request_.
10/29/84 by Lee A. Newcomb:  Fixed to not use dm_ prefix on
            dm_misc_util_$get_aim_dir.
12/08/84 by Lindsey L. Spratt:  Removed the entryname bury_dead_process.
            Removed entirely the entries:  noop, flush_journals, terminate,
            list_ref_names, process_command.
01/22/85 by R. Michael Tague:  Added the kill_txn entry and changed the 
            new_process_notifications entry name to new_process_notifies.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

dm_send_request_$shutdown:
     proc (p_code);


/* START OF DECLARATIONS */

/* Parameter */
dcl  (
     p_code		        fixed bin (35),
     p_process_id		        bit (36),
     p_txn_id		        bit (36) aligned,
     p_txn_ix		        fixed bin (17)
     )			        parameter;

/* Automatic */
dcl  (
     message		        fixed bin (71),	/* for wakeup call */
     emp			        pointer		/* pointer to message */
     )			        automatic;

/* Based */

dcl  1 event_message	        aligned based (emp) like dm_request_message;

/* Builtin */
dcl  addr			        builtin;

/* Entry */
dcl  hcs_$wakeup		        entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35))
			        external;

/* External */
dcl  (
     (dm_request_action_$adjust_process_id,
     dm_request_action_$adjust_tdt,
     dm_request_action_$adjust_tdt_entry,
     dm_request_action_$adjust_txn,
     dm_request_action_$kill_txn,
     dm_request_action_$new_proc,
     dm_request_action_$new_process_notifications,
     dm_request_action_$shutdown)     fixed bin,
     dm_system_data_$initializer_event_chn fixed bin (71),
     dm_system_data_$initializer_processid bit (36) aligned
     )			        external static;

/* END OF DECLARATIONS */
%page;
/* dm_send_request_$shutdown: */
/*     proc (p_code); */

	p_code = 0;
	message = 0;
	emp = addr (message);
	event_message.action_type = dm_request_action_$shutdown;
	call SEND_MESSAGE (message, p_code);
	return;

new_proc:
     entry (p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	event_message.action_type = dm_request_action_$new_proc;
	call SEND_MESSAGE (message, p_code);
	return;

adjust_txn:
     entry (p_txn_id, p_txn_ix, p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	emp -> dm_adjust_txn_message.action_type = dm_request_action_$adjust_txn;
	emp -> dm_adjust_txn_message.transaction_index = p_txn_ix;
	emp -> dm_adjust_txn_message.transaction_id = p_txn_id;
	call SEND_MESSAGE (message, p_code);
	return;

adjust_tdt_entry:
     entry (p_txn_id, p_txn_ix, p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	emp -> dm_adjust_tdt_entry_message.action_type = dm_request_action_$adjust_tdt_entry;
	emp -> dm_adjust_tdt_entry_message.transaction_index = p_txn_ix;
	emp -> dm_adjust_tdt_entry_message.transaction_id = p_txn_id;
	call SEND_MESSAGE (message, p_code);
	return;

adjust_tdt:
     entry (p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	event_message.action_type = dm_request_action_$adjust_tdt;
	call SEND_MESSAGE (message, p_code);
	return;

adjust_process_id:
     entry (p_process_id, p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	emp -> dm_adjust_process_id_message.action_type = dm_request_action_$adjust_process_id;
	emp -> dm_adjust_process_id_message.process_id = p_process_id;
	call SEND_MESSAGE (message, p_code);
	return;

new_process_notifies:
     entry (p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	emp -> event_message.action_type = dm_request_action_$new_process_notifications;
	call SEND_MESSAGE (message, p_code);
	return;

kill_txn:
     entry (p_txn_id, p_code);

	p_code = 0;
	message = 0;
	emp = addr (message);
	emp -> dm_kill_txn.action_type = dm_request_action_$kill_txn;
	emp -> dm_kill_txn.transaction_id = p_txn_id;
	call SEND_MESSAGE (message, p_code);
	return;

%page;

/* INTERNAL PROCEDURE */

SEND_MESSAGE:
     procedure (sm_p_message, sm_p_code);

dcl  (
     sm_p_message		        fixed bin (71),
     sm_p_code		        fixed bin (35)
     )			        parameter;

/* get the process and event channel from dm_system_data_ and send wakeup */

	call hcs_$wakeup (dm_system_data_$initializer_processid,
	     dm_system_data_$initializer_event_chn,
	     sm_p_message,
	     sm_p_code);

	return;
     end SEND_MESSAGE;
%page;
%include dm_request_message;


     end dm_send_request_$shutdown;
