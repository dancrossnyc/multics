/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

        This  routine schedules a Data Management shutdown on behalf of a DM
   administrator or operator.  It is the data-management-ring portion of the
   dm_system_shutdown  command  and  the  Data_Management  daemon   shutdown
   request.      Expected   as  input  are  a  pointer  to  a  shutdown_spec
   (p_shutdown_spec_ptr) containing the reason, times and  delays  specified
   by  the  caller of the command/request,  and a pointer to a shutdown_info
   structure (p_shutdown_info_ptr).  The shutdown_info.version must be  set,
   but  otherwise  the  structure  is  used  to  return  information.    The
   shutdown_info structure, on return, contains the reason  and  a  complete
   set  of  times.,  as well as output flags indicating whether there was an
   error (no_time_specified is ON) and whether  any  of  the  administrative
   times  were  used to re-schedule the current shutdown (times_have_changed
   is ON).

   The algorithm used by this routine is as follows:
   
   1) Calculate a complete set of times from the times and delays specified
   by the admnistrator.
   
   2) If no times could be calculated because there was both no
   administrator-specified time and no Multics shutdown time currently
   scheduled, return a shutdown_info with all times equal to 0 and
   output_flags.no_time_specified set to on.
   
   Otherwise,
   
   3) Select a set of times by:
      3.1) Calculating the default times based on the scheduled Multics
           shutdown time;
      3.2) If there is no Multics shutdown time currently scheduled
           (multics_shutdown_info.output_flags.no_time_specified is on),
           select the administrative times as the times for the new DM
           shutdown;
      3.3) Otherwise, compare the administrative and Multics times,
           selecting the earlier of each time, to create the resultant set
           of times for the new DM shutdown.

   4) Save the administrative times in dm_system_data_.

   5) If any of the administrative times were selected (indicated by
      resultant_shutdown_info.output_flags.times_have_changed being on)
      alert the Data Management daemon to actually schedule the new DM
      shutdown.  Otherwise, don't bother the daemon, as the current
      shutdown should not be changed.
   
   6) Return to the caller the resultant times.
*/

/* HISTORY:

Written by Matthew C. Pierret, 09/13/84.
Modified:
09/27/84 by Lee A. Newcomb:  Saved admin shutdown reason in dm_system_data_
	  and fixed sending shutdown request to Daemon.
02/19/85 by Lee A. Newcomb:  Fixed to copy the ptr parameters and the
            structures they locate before validating the structure versions.
*/

/* format: style2,ind3 */
/* format: ll79,comcol50,^indprocbody,^indnoniterdo,indnoniterend */

dm_admin_sched_shutdown:
   proc (p_shutdown_spec_ptr, p_shutdown_info_ptr);

/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_shutdown_spec_ptr    ptr;	         /*points to a shutdown_spec.*/
   dcl	 p_shutdown_info_ptr    ptr;	         /*points to a shutdown_info.*/

/* Automatic */

   dcl	 1 admin_shutdown_info  aligned like shutdown_info;
   dcl	 1 admin_shutdown_spec  aligned like shutdown_spec;
   dcl	 1 multics_shutdown_info
			    aligned like shutdown_info;
   dcl	 1 multics_shutdown_spec
			    aligned like shutdown_spec;
   dcl	 1 resultant_shutdown_info
			    aligned like shutdown_info;

/* Based */
/* Builtin */

   dcl	 (addr, null, unspec)   builtin;

/* Constant */

   dcl	 myname		    char (32) varying
			    init ("dm_admin_sched_shutdown")
			    internal static options (constant);

/* Entry */

   dcl	 dm_compare_shutdown_info
			    entry (ptr, ptr, ptr);
   dcl	 dm_process_shutdown_spec
			    entry (ptr, ptr);
   dcl	 dm_send_request_$shutdown
			    entry (fixed bin (35));
   dcl	 sub_err_		    entry () options (variable);

/* External */

   dcl	 (
	 dm_system_data_$saved_user_warning_time,
	 dm_system_data_$saved_begin_shutdown_time,
	 dm_system_data_$saved_user_shutdown_time,
	 dm_system_data_$saved_user_bump_time,
	 dm_system_data_$saved_daemon_logout_time
	 )		    fixed bin (71) ext;
   dcl	 dm_system_data_$saved_shutdown_reason
			    char (64) ext;
   dcl	 error_table_$unimplemented_version
			    fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
COPY_PARAMETERS:
   do;
      shutdown_spec_ptr = p_shutdown_spec_ptr;
      shutdown_info_ptr = p_shutdown_info_ptr;
      admin_shutdown_spec = shutdown_spec;
      resultant_shutdown_info.version = shutdown_info.version;
				         /* all we need for the info structure */
   end COPY_PARAMETERS;

   call CHECK_VERSION (admin_shutdown_spec.version, SHUTDOWN_SPEC_VERSION_1,
        "shutdown_spec");
   call CHECK_VERSION (resultant_shutdown_info.version,
        SHUTDOWN_INFO_VERSION_1, "shutdown_info");

   unspec (admin_shutdown_info) = ""b;
   admin_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;

   unspec (multics_shutdown_spec) = ""b;
   multics_shutdown_spec.version = SHUTDOWN_SPEC_VERSION_1;
   unspec (multics_shutdown_info) = ""b;
   multics_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;

   unspec (resultant_shutdown_info) = ""b;
   resultant_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;

   call dm_process_shutdown_spec (addr (admin_shutdown_spec),
        addr (admin_shutdown_info));

   if admin_shutdown_info.output_flags.no_time_specified
   then p_shutdown_info_ptr -> shutdown_info = admin_shutdown_info;
   else
      do;
      call dm_process_shutdown_spec (addr (multics_shutdown_spec),
	 addr (multics_shutdown_info));
      if multics_shutdown_info.output_flags.no_time_specified
      then
TAKE_ADMIN_TIMES:
         do;
         resultant_shutdown_info = admin_shutdown_info;
         resultant_shutdown_info.output_flags.times_have_changed = "1"b;
         end TAKE_ADMIN_TIMES;
      else
TAKE_EARLIER_TIMES:
         do;
         call dm_compare_shutdown_info (addr (multics_shutdown_info),
	    addr (admin_shutdown_info), addr (resultant_shutdown_info));
         end TAKE_EARLIER_TIMES;
%page;
SET_SAVED_ADMIN_SHUTDOWN_TIMES_AND_REASON:
      do;
         dm_system_data_$saved_user_warning_time =
	    admin_shutdown_info.times.user_warning_time;
         dm_system_data_$saved_begin_shutdown_time =
	    admin_shutdown_info.times.begin_shutdown_time;
         dm_system_data_$saved_user_shutdown_time =
	    admin_shutdown_info.times.user_shutdown_time;
         dm_system_data_$saved_user_bump_time =
	    admin_shutdown_info.times.user_bump_time;
         dm_system_data_$saved_daemon_logout_time =
	    admin_shutdown_info.times.daemon_logout_time;
         dm_system_data_$saved_shutdown_reason = admin_shutdown_info.reason;
      end SET_SAVED_ADMIN_SHUTDOWN_TIMES_AND_REASON;

      if resultant_shutdown_info.output_flags.times_have_changed
      then call dm_send_request_$shutdown ((0));
      else /* actual shutdown schedule is unchanged */
	 ;

      p_shutdown_info_ptr -> shutdown_info = resultant_shutdown_info;

      end;

   return;

/* end dm_admin_sched_shutdown; */
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

   dcl	 cv_p_received_version  char (8) aligned;
   dcl	 cv_p_expected_version  char (8) aligned;
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name,
	   cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_shutdown_spec;
%page;
%include sub_err_flags;
   end dm_admin_sched_shutdown;
