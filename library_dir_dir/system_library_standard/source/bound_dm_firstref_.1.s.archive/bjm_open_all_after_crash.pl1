/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format:  style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

bjm_open_all_after_crash:
     proc (Old_boot_dir, Bj_oid_p, Bj_uid_p, N_bjs_opened_for_recovery, Code);

/*  DESCRIPTION:
     This program is intended to be called during DMS crash recovery by the
   DMS Daemon.  It finds the BJ unique id to pathname table in the
   directory specified and loops through it calling the normal opening
   program once it has the name.  The opening id returned and the unique id
   found are returned in the arrays located by Bj_oid_p and Bj_uid_p.
*/

/*  HISTORY:

Written by Lee A. Newcomb, 01/06/83.
Modified:
03/07/83 by L. A. Newcomb: use dm_log_sv_codes.incl.pl1.
04/06/83 by L. A. Newcomb: use bjm_$open_bj_for_recovery and
	  $find_old_uid_pn_table.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/
%page;
/* START DECLARATIONS (except include files) */

dcl  (						/* parameters */
     Old_boot_dir		        char (*),		/* INPUT: dir. with the old bootload's tables */
     Bj_oid_p		        ptr,		/* INPUT: loc. of BJ opening id array */
     Bj_uid_p		        ptr,		/* INPUT: loc. of BJ unique id array */
     N_bjs_opened_for_recovery        fixed bin,		/* OUTPUT: how successful we were */
     Code			        fixed bin (35)	/* OUTPUT: normal error code, recovery fails if ^= 0 */
     )			        parameter;

dcl  (						/* automatics */
     bj_oid_p		        ptr,		/* local copy of parameter */
     bj_uid_p		        ptr,		/* local copy of parameter */
     curr_bj_oid		        bit (36) aligned,	/* holder before storing in caller's array */
     code			        fixed bin (35),	/* local error code holder */
     have_an_error		        bit (1) aligned,	/* used for setting return Code after loop */
     idx			        fixed bin,		/* index to loop through BJ UID-pathname table */
     n_bjs_opened_for_recovery        fixed bin		/* local copy of parameter */
     )			        automatic;

dcl  (						/* arrays the caller expects filled in */
     bj_oid		        based (bj_oid_p),	/* based on the local version of */
     bj_uid		        based (bj_uid_p)	/*     the parameters */
     )			        bit (36) aligned dim (1:n_bjs_opened_for_recovery);

dcl  (						/* error codes */
     dm_error_$bj_not_all_opened_after_crash
     )			        fixed bin (35) ext static;

dcl						/* external entries called */
     before_journal_manager_$open_bj_for_recovery
			        entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
     before_journal_manager_$find_old_uid_pn_table
			        entry (char (*), ptr, fixed bin (35)),
     dm_misc_util_$log	        entry options (variable);

/* END DECLARATIONS */
%page;
/* copy much used input parameters to automatic and init. output parameters */

	bj_oid_p = Bj_oid_p;
	bj_uid_p = Bj_uid_p;

	N_bjs_opened_for_recovery = 0;		/* assume all BJ's were closed */
	Code = 0;					/* and let's be optimistic */

	n_bjs_opened_for_recovery = 0;		/* set local holder of # of BJ's we've opened */


/* First things first, we have to find the old UID-pathname table used */
/*     by the previous DMS boot. */

	call before_journal_manager_$find_old_uid_pn_table (Old_boot_dir, bj_pn_table_ptr, Code);
	if Code ^= 0 then do;			/* could not find the table */
	     call dm_misc_util_$log (LOG_SV, Code, "bjm_open_all_after_crash",
		"Could not find BJ UID-pathname table in dir. ^a.", Old_boot_dir);
	     return;				/* no cleanup to do */
	end;


/* Now loop through the table, opening before journals as we find them. */
/*     When an opening is successful, store the required data in the */
/*     return arrays. */

	have_an_error = ""b;			/* to detect an error on one or more opens */

	do idx = 1 to bj_pn_table.max_n_entries;

	     if bj_pn_table.bj_uid (idx) ^= ""b then do;	/* have an occupied entry */
						/* N.B., we pass dir & entry by value for alignment */
		call before_journal_manager_$open_bj_for_recovery ((bj_pn_table.dir (idx)),
		     (bj_pn_table.entry (idx)), curr_bj_oid, code);
		if code ^= 0 then do;
		     have_an_error = "1"b;		/* so we can set Code at end */
		     call dm_misc_util_$log (LOG_SV, code, "bjm_open_all_after_crash",
			"Error trying to open ^a>^a.", bj_pn_table.dir (idx), bj_pn_table.entry (idx));
		end;

		else do;				/* no problems, record data */
		     n_bjs_opened_for_recovery = n_bjs_opened_for_recovery + 1;
		     bj_oid (n_bjs_opened_for_recovery) = curr_bj_oid;
		     bj_uid (n_bjs_opened_for_recovery) = bj_pn_table.bj_uid (idx);
		end;

	     end;					/* of trying to open a filled entry */
	end;					/* of opening loop */
%page;
/* now must see if any errors were encountered so can tell caller */

	if have_an_error then
	     Code = dm_error_$bj_not_all_opened_after_crash;

/* DONE */
	N_bjs_opened_for_recovery = n_bjs_opened_for_recovery; /* tell caller how many we got for her */

	return;

/*   end bjm_open_all_after_crash; */

/* INCLUDE FILES start next page */
%page;
%include dm_bj_pn_table;
%page;
%include dm_log_sv_codes;


     end bjm_open_all_after_crash;
