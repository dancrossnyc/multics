/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

dm_get_daemon_info_:
     proc (p_dm_daemon_info_ptr);

/* DESCRIPTION:

         This program retrieves from a DMS' dm_system_data_ information about
     the caretaker Daemon of the DMS.  This is because the system data segment
     for  a  DM system is not available in any ring other than ring 2, but the
     data on the caretaker Daemon is needed in ring 4.    Currently,  this  is
     considered privileged data and wil be called via dm_daemon_gate_.
*/

/* HISTORY:

Written by L. A. Newcomb, 03/22/84.
Modified:
*/

/* START OF DECLARATIONS */
/* Parameter */

dcl  p_dm_daemon_info_ptr	        ptr;		/* addr (dm_daemon_info) struct. to be filled in.*/

/* Automatic */
/* Based */
/* Builtin */

dcl  null			        builtin;

/* Constant */

dcl  myname		        init ("dm_get_daemon_info_") char (32) varying internal static options (constant);

/* Entry */

dcl  sub_err_		        entry () options (variable);

/* External */

dcl  (
     dm_system_data_$command_ms_name  char (32) aligned,
     dm_system_data_$initializer_event_chn fixed bin (71),
     dm_system_data_$initializer_name char (32) aligned,
     dm_system_data_$initializer_processid bit (36) aligned,
     dm_system_data_$initializer_wakeup_increment fixed bin
     )			        external static;

/* Status/Error Codes */

dcl  error_table_$unimplemented_version fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
	dm_daemon_info_ptr = p_dm_daemon_info_ptr;	/* get to local storage */

/* check version of return structure, passing given version by value to */
/* bypass alignment warning. */

	call CHECK_VERSION ((dm_daemon_info.version), DM_DAEMON_INFO_VERSION_1, "dm_daemon_info");

/* now fill in the return structure */

	dm_daemon_info.event_channel = dm_system_data_$initializer_event_chn;
	dm_daemon_info.process_id = dm_system_data_$initializer_processid;
	dm_daemon_info.wakeup_increment = dm_system_data_$initializer_wakeup_increment;
	dm_daemon_info.user_id = dm_system_data_$initializer_name;
	dm_daemon_info.command_ms_name = dm_system_data_$command_ms_name;

	return;

/*   end dm_get_daemon_info_ */
%page;
CHECK_VERSION:
     proc (p_received_version, p_expected_version, p_structure_name);
dcl  p_received_version	        char (*);
dcl  p_expected_version	        char (*);
dcl  p_structure_name	        char (*);

	if p_received_version ^= p_expected_version
	then call
		sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
		"^/Expected version ^a of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

     end CHECK_VERSION;
%page; %include sub_err_flags;
%page; %include dm_daemon_info;


     end dm_get_daemon_info_;
