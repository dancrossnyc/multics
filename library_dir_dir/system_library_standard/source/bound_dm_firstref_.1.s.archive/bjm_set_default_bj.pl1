/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
     This program sets up an implicitly referenced before journal.

     This procedure accepts a before journal OID and validates the before
journal.  If the before journal is opened in this process, it then
becomes the new default before journal.  If it is not opened, then
a non-zero error code is returned.
*/

/*  HISTORY:
Written by Mike Pandolf, 07/06/82.
Modified:
10/04/82 by Lee A. Newcomb:  To record user's explicit setting in a new
	  default_bj cell:  user_set_oid.
11/11/82 by M. Pandolf:  to use standard entry and exit protocol.
03/14/83 by L. A. Newcomb:  to use dm_error_$bj_journal_not_opened.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
10/16/84 by Maggie Sharpe:  placed a version check of bj_ppte after getting
            the bj_ppte_ptr; corrected format; changed to use
	  "call ERROR_RETURN (code)" convention.
02/26/85 by Lee A. Newcomb:  Corrected to use dm_error_$bj_bad_ppte_version
            when testing the PPTE, not $bj_txt_version_bad.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */
%page;
bjm_set_default_bj:
     procedure (p_bj_oid, p_code);

/* DECLARATIONS */

/* Parameter */

dcl  p_bj_oid		        bit (36) aligned parameter; /* bj OID to become the new default */
dcl  p_code		        fixed bin (35) parameter; /* standard system status code */

/* Automatic */

dcl  bj_oid		        bit (36) aligned;	/* local copy of bj OID */
dcl  code			        fixed bin (35);

/* Condition */

dcl  cleanup		        condition;

/* Entry */

dcl  bj_oid_util$get_ptr	        entry (bit (36) aligned) returns (ptr);
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));

/* External Static  */

dcl  bjm_data_$bj_ppt_ptr	        pointer external static;
dcl  dm_error_$bj_bad_ppte_version    fixed bin (35) external static;
dcl  dm_error_$bj_journal_not_opened  fixed bin (35) external static;
dcl  dm_error_$bj_recursive_invoc     fixed bin (35) external static;

/* Internal Static */

dcl  ME			        char (20) internal static options (constant) init ("bjm_set_default_bj");

/* copy argument */

	bj_oid = p_bj_oid;
	p_code = 0;

/* set up error handling environment */

	on cleanup call CLEANUP;

	if bjm_data_$bj_operation = ""
	     then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto MAIN_RETURN;
	end;

	bjm_data_$bj_exit_err = nonlocal_exit_err;
	bjm_data_$bj_code = 0;

/* get pointer to the PPTE */

	bj_ppte_ptr = bj_oid_util$get_ptr (bj_oid);
	if bj_ppte.version ^= BJ_PPTE_VERSION_1 then
	     call ERROR_RETURN (dm_error_$bj_bad_ppte_version);

/* make sure the before journal is open, then set default OID */

	if bj_ppte.n_opening = 0
	     then call ERROR_RETURN (dm_error_$bj_journal_not_opened);
	else
	     bjm_data_$bj_ppt_ptr -> bj_ppt.default_bj.user_set_oid = bj_oid;

	bjm_data_$bj_operation = "";

	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

MAIN_RETURN:
	return;

nonlocal_exit_err:
	call ERROR_RETURN (bjm_data_$bj_code);


/* INTERNAL PROCEDURES */


ERROR_RETURN:
     proc (error_code);

dcl  error_code		        fixed bin (35);

	call CLEANUP;
	p_code = error_code;
	goto MAIN_RETURN;

     end ERROR_RETURN;


CLEANUP:
     procedure ();

dcl  cleanup_code		        fixed bin (35);

	call bj_cleanup_tables$handler (cleanup_code);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

	return;

     end CLEANUP;


%page; %include dm_bj_static;
%page; %include dm_bj_ppt;
%page; %include dm_bj_global_error_info;


     end bjm_set_default_bj;
