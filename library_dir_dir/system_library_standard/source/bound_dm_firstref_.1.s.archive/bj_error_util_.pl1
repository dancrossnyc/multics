/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

*/

/* HISTORY:

Written by Matthew Pierret, 07/02/84.
Modified:
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* format: style2,ind3 */
%page;
bj_error_util_$signal:
   procedure ();


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_code	       fixed bin (35) based (p_code_ptr);
						/* is a standard system error code. */
      dcl	    p_signalling_program_name
			       char (pspn_length) based (p_signalling_program_name_ptr);
      dcl	    p_bj_error_flags_string
			       bit (36) aligned based (p_bj_error_flags_ptr);
      dcl	    p_severity	       fixed bin (17) based (p_severity_ptr);

/* Automatic */

      dcl	    arg_count	       fixed bin init (-1);
      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    p_code_ptr	       ptr init (null);
      dcl	    p_signalling_program_name_ptr
			       ptr init (null);
      dcl	    p_bj_error_flags_ptr   ptr init (null);
      dcl	    p_severity_ptr	       ptr init (null);
      dcl	    pspn_length	       fixed bin (21) init (-1);

      dcl	    code		       fixed bin (35) init (0);

      dcl	    prev_error_object_ptr  ptr init (null);
      dcl	    message_buffer_ptr     ptr init (null);
      dcl	    message_length	       fixed bin (21) init (-1);

      dcl	    (pad_sw, nl_sw)	       bit (1) aligned;

      dcl	    1 my_bj_sub_error_info aligned like bj_sub_error_info;

      dcl	    1 my_condition_info    aligned like condition_info;

/* Based */

      dcl	    message_buffer	       char (sys_info$max_seg_size * 4) based (message_buffer_ptr);
      dcl	    message	       char (message_length) based (message_buffer_ptr);

/* Builtin */

      dcl	    (addr, length, max, min, null, rtrim, substr)
			       builtin;

/* Condition */

      dcl	    (any_other, cleanup)   condition;

/* Constant */

      dcl	    myname	       init ("bj_error_util_") char (32) varying internal static options (constant);
      dcl	    (
	    CODE_ARGUMENT_IDX      init (1),
	    SIGNALLING_PROGRAM_NAME_ARGUMENT_IDX
			       init (2),
	    BJ_ERROR_FLAGS_ARGUMENT_IDX
			       init (3),
	    SEVERITY_ARGUMENT_IDX  init (4),
	    FIRST_MESSAGE_ARGUMENT_IDX
			       init (5),
	    NUMBER_OF_REQUIRED_ARGUMENTS
			       init (4),
	    DEFAULT_SEVERITY       init (0)
	    )		       fixed bin internal static options (constant);
      dcl	    NON_ACTION_FLAGS_MASK  init ((18)"1"b || (18)"0"b) bit (36) aligned internal static options (constant);

/* Entry */

      dcl	    hcs_$create_branch_    entry (char (*), char (*), ptr, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    cu_$cp	       entry (ptr, fixed bin (21), fixed bin (35));
      dcl	    dm_misc_util_$log      entry () options (variable);
      dcl	    find_condition_info_   entry (ptr, ptr, fixed bin (35));
      dcl	    get_dm_dir_	       entry () returns (char (168));
      dcl	    get_temp_segment_      entry (char (*), ptr, fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));
      dcl	    release_temp_segment_  entry (char (*), ptr, fixed bin (35));
      dcl	    signal_	       entry () options (variable);
      dcl	    sub_err_	       entry () options (variable);
      dcl	    unique_chars_	       entry (bit (*)) returns (char (15));

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    (
	    error_table_$fatal_error,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

/* This "entry point" is actually the main procedure statement above.

   signal:
   entry ();
*/

/**** Get pointer to this routine's arg_list */

      call cu_$arg_list_ptr (arg_list_ptr);
      call cu_$arg_count (arg_count, (0));

      if arg_count < NUMBER_OF_REQUIRED_ARGUMENTS
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/^10xThis entry requires at least ^d arguments.^/^10xOnly ^d arguments were received.",
	    (NUMBER_OF_REQUIRED_ARGUMENTS), arg_count);

/**** Set the parameter values. */

      call cu_$arg_ptr (CODE_ARGUMENT_IDX, p_code_ptr, (0), (0));
      call cu_$arg_ptr (SIGNALLING_PROGRAM_NAME_ARGUMENT_IDX, p_signalling_program_name_ptr, (0), (0));
      call cu_$arg_ptr (BJ_ERROR_FLAGS_ARGUMENT_IDX, p_bj_error_flags_ptr, (0), (0));
      call cu_$arg_ptr (SEVERITY_ARGUMENT_IDX, p_severity_ptr, (0), (0));

/**** Setup message buffer in a temporary segment. ****/

      on cleanup call FINISH ();

      call get_temp_segment_ ((myname), message_buffer_ptr, code);
      if code ^= 0
      then call
	    sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	    "^/^10xAn attempt to acquire a temporary segment failed while^/^10xpreparing error message.");

      call
         ioa_$general_rs (arg_list_ptr, FIRST_MESSAGE_ARGUMENT_IDX, FIRST_MESSAGE_ARGUMENT_IDX + 1, message_buffer,
         message_length, pad_sw, nl_sw);

      unspec (my_bj_sub_error_info) = ""b;
      bj_sub_error_info_ptr = addr (my_bj_sub_error_info);

      bj_sub_error_info.header.version = BJ_SUB_ERROR_INFO_VERSION_100;
      bj_sub_error_info.header.length = size (bj_sub_error_info);
      bj_sub_error_info.header.status_code = p_code;
      string (bj_sub_error_info.header.action_flags) = p_bj_error_flags_string & NON_ACTION_FLAGS_MASK;
      bj_sub_error_info.header.action_flags.support_signal = "1"b;

      bj_sub_error_info.module_name = p_signalling_program_name;

      if message_length <= 256
      then
         do;
	  bj_sub_error_info.header.info_string = message;
	  bj_sub_error_info.message_length = message_length;
	  bj_sub_error_info.message_ptr = addr (bj_sub_error_info.header.info_string);
         end;
      else
         do;
	  bj_sub_error_info.header.info_string = "";
	  bj_sub_error_info.message_length = message_length;
	  bj_sub_error_info.message_ptr = message_buffer_ptr;
         end;


/**** Log message if requested. */

      if p_bj_error_flags_ptr -> bj_error_flags.log.system
      then call
	    dm_misc_util_$log (max (DEFAULT_SEVERITY, p_severity), bj_sub_error_info.header.status_code,
	    (bj_sub_error_info.module_name), message);



/**** Signal bj_sub_error_ condition. */

      call signal_ ("bj_sub_error_", null, bj_sub_error_info_ptr, null);

      do while (bj_sub_error_info.header.action_flags.cant_restart);
						/* If user can't hack return */
         call signal_ ("illegal_return", null, bj_sub_error_info_ptr, null);
      end;

      call FINISH ();

      return;
%page;
FINISH:
   proc ();

      if message_buffer_ptr ^= null
      then call release_temp_segment_ ((myname), message_buffer_ptr, (0));

   end FINISH;
%page;
get_code:
   entry () returns (fixed bin (35));

      bj_sub_error_info_ptr = GET_ERROR_INFO_PTR ();

      return (bj_sub_error_info.header.status_code);




get_message:
   entry () returns (char (*));

      bj_sub_error_info_ptr = GET_ERROR_INFO_PTR ();

      message_length = bj_sub_error_info.message_length;
      message_buffer_ptr = bj_sub_error_info.message_ptr;

      return (message);


GET_ERROR_INFO_PTR:
   proc () returns (ptr);

      dcl	    geip_code	       fixed bin (35) init (0);

      condition_info_ptr = addr (my_condition_info);
      call find_condition_info_ ((null), condition_info_ptr, geip_code);
      if geip_code ^= 0
      then call sub_err_ (geip_code, myname, ACTION_CANT_RESTART, null, 0, "^/Attempt to find condition info failed.");
      if condition_info_ptr = null
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut no condition info exists.",
	    BJ_SUB_ERROR_CONDITION_NAME);
      if condition_info.condition_name ^= BJ_SUB_ERROR_CONDITION_NAME
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	    "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut the current condition is ^a.",
	    BJ_SUB_ERROR_CONDITION_NAME, condition_info.condition_name);
      if condition_info.info_ptr = null
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	    "^/The condition_info.info_ptr variable is not set.");

      if condition_info.info_ptr -> bj_sub_error_info.header.version ^= BJ_SUB_ERROR_INFO_VERSION_100
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the bj_sub_error_info structure; received ^d.", BJ_SUB_ERROR_INFO_VERSION_100,
	    condition_info.info_ptr -> bj_sub_error_info.header.version);

      return (condition_info.info_ptr);


   end GET_ERROR_INFO_PTR;
%page;
%include dm_bj_sub_error_info;
%page;
%include dm_bj_sub_error_flags;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include sub_err_flags;

   end bj_error_util_$signal;
