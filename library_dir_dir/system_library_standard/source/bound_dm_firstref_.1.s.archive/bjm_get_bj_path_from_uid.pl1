/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_get_bj_path_from_uid:
     procedure (p_bj_uid, p_bj_dir, p_bj_entry, p_code);


/* DESCRIPTION:
     A procedure to return the dir and entry names of an open before
journal given its opening ID.

     BJ_UID is an input argument.  BJ_DIR, BJ_ENTRY, and CODE are
output arguments.
*/

/* HISTORY:
Written by M. Pandolf, 01/05/83.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
%page;
/* initialize parameters */

	bj_uid = p_bj_uid;
	p_bj_dir = "";
	p_bj_entry = "";
	p_code = 0;

/* set up addresses for unexpected error */

	on cleanup call CLEANUP;

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto quick_exit;
	end;

	bjm_data_$bj_exit_err = nonlocal_error_exit;
	bjm_data_$bj_code = 0;

/* lock the PST so that the references to it will be done while it is stable */

	call bj_pst_lock ();

/* get a pointer to the PSTE */

	bj_pste_ptr = bj_pst_search (bj_uid);
	if bj_pste_ptr = null ()
	then do;
	     call bj_pst_lock$unlock ();
	     p_code = error_table_$noentry;
	     goto local_error_exit;
	end;

/* use the bj_ix to look up the BJ pathname in the pathname table */

	bj_pn_table_ptr = ptr (bjm_data_$bj_pst_ptr, bjm_data_$bj_pst_ptr -> bj_pst.pn_table_offset);

	p_bj_dir = bj_pn_table (bj_pste.bj_ix).dir;
	p_bj_entry = bj_pn_table (bj_pste.bj_ix).entry;

/* done */

	call bj_pst_lock$unlock ();

std_exit:
	bjm_data_$bj_operation = "";

	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

quick_exit:
	return;

nonlocal_error_exit:
	p_code = bjm_data_$bj_code;

local_error_exit:
	call CLEANUP;
	goto quick_exit;

/* INTERNAL PROCEDURES */

CLEANUP:
     procedure ();

dcl  code			        fixed bin (35);

	call bj_cleanup_tables$handler (code);

	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;
	bjm_data_$bj_operation = "";

	return;

     end CLEANUP;


/* DECLARATIONS */

/* Parameters */

dcl  p_bj_uid		        bit (36) aligned parameter; /* BJ unique ID */
dcl  p_bj_dir		        char (*) parameter;	/* dir of BJ identified bj BJ_OID */
dcl  p_bj_entry		        char (*) parameter;	/* entryname of BJ identified bj BJ_OID */
dcl  p_code		        fixed bin (35) parameter; /* standard system ststus code */

/* Automatic */

dcl  bj_uid		        bit (36) aligned;	/* local copy of before journal UID */

/* Static, External */

dcl  dm_error_$bj_recursive_invoc     fixed bin (35) external static;
dcl  error_table_$noentry	        fixed bin (35) ext static;
dcl  bjm_data_$bj_pst_ptr	        pointer external static;

/* Constant */

dcl  ME			        char (32) internal static options (constant)
			        init ("bjm_get_bj_path_from_uid");

/* Entry */

dcl  bj_pst_lock		        entry ();
dcl  bj_pst_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_pst_lock$unlock	        entry ();
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));

/* Builtin */

dcl  ptr			        builtin;

/* Condition */

dcl  cleanup		        condition;

/* Include Files */

%page;
%include dm_bj_static;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_pn_table;
%page;
%include dm_bj_global_error_info;
%page;

     end bjm_get_bj_path_from_uid;
