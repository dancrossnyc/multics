/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_per_process_init_:
     procedure ();

/* bjm_per_process_init_ - the before journal manager per process data
   initialization procedure.

   this procedure fills in the necessary cells in the data segment
   dm_data_.  it implicitly creates the table bj_ppt, which is the
   per process before journal table.  if all is successful, it returns
   with a zero code.
*/

/* HISTORY:
Written by M. Pandolf, 07/10/82.
Modified:
02/25/83 by M. Pandolf to be used as a first ref trap.
03/04/83 by Jeffrey D. Ives, add validation level setting.
08/05/83 by Lee A. Newcomb:  removed obsolete status codes in
	  calls to dm_per_system_ entries.
09/07/83 by L. A. Newcomb: renamed so an "_" ends the proc name.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
11/22/84 by Lee A. Newcomb:  Removed obsolete dm_common_init_ references.
*/

/*  set up dm_data_ */

	call cu_$level_get (saved_validation_level);
	on cleanup call cu_$level_set (saved_validation_level);
	call cu_$level_set (get_ring_ ());

/* allocate the per process table according to data management protocol */

	allocate bj_ppt
	     in (dm_data_$area_ptr -> per_process_dms_area)
	     set (bjm_data_$bj_ppt_ptr);

/* initialize the per process table */

	bj_ppt_ptr = bjm_data_$bj_ppt_ptr;

	unspec (bj_ppt) = "0"b;

	bj_ppt.max_n_entries = dm_system_data_$bj_max_n_journals;
	bj_ppt.n_entries_used = 0;
	bj_ppt.highest_ix_used = 0;
	bj_ppt.process_id = get_process_id_ ();
	bj_ppt.process_ix = -1;

	bj_ppt.version = BJ_PPT_VERSION_1;

/* fill pointers to other data bases */

	call dm_per_system_$initiate (BJ_PST, "", bjm_data_$bj_pst_ptr);
	if bjm_data_$bj_pst_ptr = null ()
	then do;
	     call sub_err_ (code, ME, "s", null (), retval, "Cannot access before journal system table.");
	     goto exit;
	end;

	dm_data_$bj_txt_ptr =
	     ptr (addr (dm_system_data_$bj_txt_relp), dm_system_data_$bj_txt_relp);

	call get_temp_segment_ (BJ_MGR, bjm_data_$bj_rollback_buffer_ptr, code);
	if code ^= 0
	then do;
	     call sub_err_ (code, ME, "s", null (), retval, "Cannot get temporary space for rollbacks.");
	     goto exit;
	end;

/* finished */

exit:
	call cu_$level_set (saved_validation_level);

	return;


/* DECLARATIONS */

/* Automatic */

dcl  code			        fixed bin (35);	/* local copy of status code */
dcl  retval		        fixed bin (35) init (0); /* needed for sub_err_ call */
dcl  saved_validation_level	        fixed bin init (0);
dcl  cleanup		        condition;

/* Static, External */

dcl  dm_data_$area_ptr	        pointer external static;
dcl  bjm_data_$bj_ppt_ptr	        pointer external static;
dcl  bjm_data_$bj_pst_ptr	        pointer external static;
dcl  dm_data_$bj_txt_ptr	        pointer external static;
dcl  dm_system_data_$bj_txt_relp      bit (18) external static;
dcl  bjm_data_$bj_rollback_buffer_ptr pointer external static;


/* Based */

dcl  per_process_dms_area	        area based;

/* Constant */

dcl  BJ_MGR		        char (32) internal static options (constant)
			        init ("before_journal_manager_");
dcl  ME			        char (32) internal static options (constant)
			        init ("before journal process init");

/* Entry */

dcl  cu_$level_get		        entry (fixed bin);
dcl  cu_$level_set		        entry (fixed bin);
dcl  get_ring_		        entry () returns (fixed bin (3));

dcl  dm_per_system_$initiate	        entry (char (*), char (*), pointer);
dcl  get_process_id_	        entry () returns (bit (36));
dcl  get_temp_segment_	        entry (char (*), ptr, fixed bin (35));
dcl  sub_err_		        entry () options (variable);

/* Builtin */

dcl  (
     addr, ptr, rel, unspec
     )			        builtin;

/* Include Files */
%page; %include dm_bj_static;
%page; %include dm_bj_ppt;
%page; %include dm_bj_names;


     end bjm_per_process_init_;
