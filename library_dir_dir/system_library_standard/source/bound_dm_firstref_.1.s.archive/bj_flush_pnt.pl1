/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_flush_pnt flushes the Data Management System's before journal
     pathname to UID table.  This is done to guarantee a journal can be
     opened for recovery after a Multics' system crash.
*/

/* HISTORY:
Written by Lee A. Newcomb, 04/30/83.
Modified:
12/06/83 by Lee A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
02/18/85 by Lee A. Newcomb:  Fixed to check the version of the BJ PST and the
            format and declarations; also added a DESCRIPTION section.
*/

/* format:style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_flush_pnt:
   proc ();

/* DECLARATIONS */

/* Parameter */
/* Automatic */
dcl  (
     code				fixed bin (35) init (0),
     first_page			fixed bin,
     last_page			fixed bin,
     n_pages			fixed bin
     )				automatic;

dcl  1 my_flush_consec		aligned automatic,
       2 version			init (FLUSH_CONSEC_VERSION_1),
       2 n_segs			init (1),		/* UID-pathname table is single seg. */
       2 seg			dim (1) like flush_consec.seg;

/* Based */
/* Builtin */
dcl  (addr, baseno, bin, divide, ptr, size)
				builtin;

/* Condition */
/* Constant */
dcl  ME				char (12)
				init ("bj_flush_pnt") internal
				static options (constant);

/* Entry */
dcl  (
     bj_report_err			entry (fixed bin (35), char (*)),
     hcs_$flush_consecutive_pages	entry (ptr, fixed bin (35))
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     dm_error_$bj_bad_pst_version	fixed bin (35),
     dm_system_data_$bj_max_n_journals	fixed bin
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
/* bj_flush_pnt:				repeat for reader	*/
/*      proc ();						*/

   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);
   bj_pn_table_ptr = ptr (bj_pst_ptr, bj_pst.pn_table_offset);

   first_page = divide (bj_pst.pn_table_offset, 1024, 17, 0);

   last_page =
        divide (bj_pst.pn_table_offset + size (bj_pn_table) - 1, 1024, 17, 0);

   n_pages = last_page - first_page + 1;

   my_flush_consec.seg (1).segno = bin (baseno (bj_pst_ptr));
   my_flush_consec.seg (1).first_page = first_page;
   my_flush_consec.seg (1).n_pages = n_pages;


   call hcs_$flush_consecutive_pages (addr (my_flush_consec), code);
   if code ^= 0 then
      call ERROR_RETURN (code);

   return;

/* end bj_flush_pnt; */
%page;
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call bj_report_err (er_p_code, ME);			/* Will do a non local goto */

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed as this is really a template proc	*/
/* used in several modules to check structure versions.  It is hoped	*/
/* newer versions of these structures will be changed to use	*/
/*  char (8) versions.					*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_pn_table;
%page;
%include flush_structures;


   end bj_flush_pnt;
