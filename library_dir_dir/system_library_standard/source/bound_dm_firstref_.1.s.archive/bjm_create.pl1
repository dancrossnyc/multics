/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

	bjm_create implements before_journal_manager_$create_bj to create a
     before journal in a specific directory with a given name.  File manager
     is used to create the journal and journal specific data is written for
     later use.  The journal is in a closed state at return time.

	The current calling sequence is very specific; it is hoped a
     future implementation will replace the size parameters with a
     create_info strucutre (as file_manager_ uses).  As a result of the
     current calling sequence, a user wishing to set a per-transaction
     storage limit for the new before journal must first create it, and
     then call before_journal_manager_$set_transaction_storage_limit.
*/

/* HISTORY:
Written by Andre Bensoussan, 07/15/82.
Modified:
10/15/82 by M. Pandolf:  to use file_manager_ to manipulate data 
	  management system files.
11/11/82 by M. Pandolf:  to conform to standard entry and exit sequence.
12/20/82 by M. Pandolf:  to better manage file_manager_ calls.
03/16/83 by A. Bensoussan:  to set the ACL of the created journal using
	  using dm_system_data_$initializer_name so the DMS creator
	  (Daemon) can use it in rollback.
03/23/83 by Jeff Ives:  to set p_code (parameter) on normal return.
03/24/83 by Lee A. Newcomb:  to set p_code when a bj_recursive_invoc is
	  detected.
06/07/83 by A. Bensoussan:  to refuse to create a journal with size < 3.
11/02/83 by M. Pandolf:  to only allow entrynames ending in ".bj"
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/25/84 by Matthew Pierret: Changed to use file_manager_$add_acl_entries
            instead of the obsolete $acl_add.
08/20/84 by Matthew C. Pierret:  Changed to use FILE_CREATE_INFO_VERSION_2,
            which required explicitly setting the protected flag to off and
            setting the extended ring brackets to the ring of execution (the
            data management ring).
10/18/84 by Maggie Sharpe:  cleaned up dcls; corrected minor format problems;
            checked "code" after call to fm_$close; changed to use
            fm_$add_acl_entries instead of fm_$acl_add;changed to use "call
            ERROR (code)" convention.
10/26/84 by Maggie Sharpe:  to changed the label ERROR to ERROR_RETURN.
12/12/84 by Lindsey Spratt:  Fixed to create the dmf with rings of 7,7, rather
	  than "level", since the bj's can only be used properly if the user
	  level is in the read/write bracket of the bj.  When this
	  limitation is removed, bj's will be dmf's with ring brackets equal
	  to the data_management_ringno.
12/27/84 by Matt Pierret:  Fixed call to file_manager_$add_acl_entries to use
	  the general_acl structure instead of just the acl entries.
12/28/84 by Lee A. Newcomb:  Fixed to create the BJ DMF with rings brackets
	  [DM ring, DM ring], used acl_structures and access_mode_values
	  includes, fixed up error/cleanup processing, renamed ERROR_RETRUN
	  to ERROR_RETURN, and did some general reorganization for the above
	  changes and readability.
02/07/85 by Lee A. Newcomb:  Fixed to use file_manager_$create_open instead of
            separate create and open calls; added FINISH procedure and fixed
            CLEANUP to use it so the validation level gets reset properly.
02/12/85 by Lee A. Newcomb:  Fixed to use the correct version constant for
	  bj_pste's:  BJ_PSTE_VERSION_2, and to have CLEAN_UP not do
	  all its steps unless setup to do so.
02/13/85 by Lee A. Newcomb:  Removed unused "%include dm_bj_static;".
03/13/85 by Lee A. Newcomb:  Added the setting of the per-transaction storage
            limit, currently as the maximum possible value.
03/22/85 by Lee A. Newcomb:  Fixed to setup the cleanup handler when it should
            be and to set bjm_data_$bj_code in case it has a leftover status
            in it.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
bjm_create:
   proc (p_dir, p_entry, p_max_size, p_ci_size, p_code);


/* DECLARATIONS */

/* Parameter */
dcl  (
     p_dir			char (*),		/* Dir path of the journal */
     p_entry			char (*),		/* Entry name of the journal */
     p_max_size			fixed bin,	/* In number of CI's */
     p_ci_size			fixed bin,	/* In number of bytes */
     p_code			fixed bin (35)	/* returned status code */
     )				parameter;

/* Automatic */
dcl  (
     bj_dir			char (168) init (""),
     bj_entry			char (32) init (""),
     bj_uid			bit (36) aligned init (NULL_ID),
     bjm_clean_up_needed		bit (1) aligned init (FALSE),
     ci_size			fixed bin init (0),
     code				fixed bin (35) init (0),
     create_code			fixed bin (35) init (-1),
     dm_ring			fixed bin,
     fm_oid			bit (36) aligned init (NULL_ID),
     fm_uid			bit (36) init (NULL_ID),
     level			fixed bin init (0),
     max_size			fixed bin init (0),
     1 my_bj_header			like bj_header,
     1 my_file_create_info		aligned like file_create_info
     )				automatic;

dcl  1 my_general_acl		aligned automatic,
       2 version			char (8) aligned
				init (GENERAL_ACL_VERSION_1),
       2 count			fixed bin init (1),
       2 entries			dim (1)
				like general_extended_acl_entry;

/* Builtin */
dcl  (addr, length, size, substr, reverse, rtrim, unspec)
				builtin;

/* Condition */
dcl  cleanup			condition;
%page;
/* Constant */
dcl  (
     myname			char (10) init ("bjm_create"),
     CHECK_FOR_BJM_RECURSION		bit (1) aligned init ("1"b),
     DONT_CHECK_FOR_BJM_RECURSION	bit (1) aligned init (""b),
     FALSE			bit (1) aligned init (""b),
     NULL_ID			bit (36) aligned init (""b),
     TRUE				bit (1) aligned init ("1"b)
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_ci_zero$put_header		entry (bit (36) aligned, ptr,
				fixed bin),
     bj_ci_zero$get_pf_uid		entry (bit (36) aligned)
				returns (bit (36)),
     bj_cleanup_tables$handler	entry (fixed bin (35)),
     bj_max_txn_storage_limit		entry (ptr) returns (fixed bin (35)),
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     file_manager_$add_acl_entries	entry (char (*), char (*), ptr,
				fixed bin (35)),
     file_manager_$allocate		entry (bit (36) aligned, fixed bin,
				fixed bin, fixed bin (35)),
     file_manager_$close		entry (bit (36) aligned,
				fixed bin (35)),
     file_manager_$create_open	entry (char (*), char (*), ptr,
				bit (36) aligned, fixed bin (35)),
     file_manager_$delete		entry (char (*), char (*),
				fixed bin (35)),
     file_manager_$flush_consecutive_ci entry (bit (36) aligned, fixed bin,
				fixed bin, fixed bin (35)),
     get_ring_			entry returns (fixed bin (3))
     )				external;

/* External */
dcl  (
     (
     dm_error_$bj_illegal_size,
     dm_error_$bj_invalid_name,
     dm_error_$bj_recursive_invoc
     )				fixed bin (35),
     dm_system_data_$initializer_name	char (32) aligned
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
COPY_PARAMETERS:
   do;
      bj_dir = p_dir;
      bj_entry = p_entry;
      max_size = p_max_size;
      ci_size = p_ci_size;				/* let fm_$create_open tell if in error */
      p_code = 0;					/* assume we will succeed */
   end COPY_PARAMETERS;


PARTIALLY_VALIDATE_INPUT_PARAMETERS:
   do;
      if ^IS_VALID_BJ_NAME (bj_entry) then
         call ERROR_RETURN (dm_error_$bj_invalid_name);
      if max_size < 3 then
         call ERROR_RETURN (dm_error_$bj_illegal_size);
   end PARTIALLY_VALIDATE_INPUT_PARAMETERS;


SETUP_FOR_NON_STANDARD_EXIT:
   do;
      call cu_$level_get (level);
      dm_ring = get_ring_ ();

      on cleanup call CLEANUP ();
      call SET_BJM_DATA_ERROR_HANDLING_VALUES (NONLOCAL_ERROR_EXIT, myname,
	 CHECK_FOR_BJM_RECURSION);

   end SETUP_FOR_NON_STANDARD_EXIT;


FILL_IN_FILE_CREATE_INFO:
   do;
      unspec (my_file_create_info) = "0"b;
      my_file_create_info.version = FILE_CREATE_INFO_VERSION_2;
      my_file_create_info.blocking_factor = 255;
      my_file_create_info.ci_size_in_bytes = ci_size;
      my_file_create_info.ring_brackets (*) = dm_ring;
   end FILL_IN_FILE_CREATE_INFO;
%page;
   call cu_$level_set (dm_ring);			/* set for rest of main proc */

CREATE_NEW_BJ:
   do;
      call file_manager_$create_open (bj_dir, bj_entry,
	 addr (my_file_create_info), fm_oid, create_code);
      if create_code ^= 0 then
         call ERROR_RETURN (create_code);

      fm_uid = bj_ci_zero$get_pf_uid (fm_oid);
      bj_uid = fm_uid;
   end CREATE_NEW_BJ;


GIVE_DM_DAEMON_RW_ACCESS_TO_BJ:
   do;
      my_general_acl.access_name (1) = dm_system_data_$initializer_name;
      my_general_acl.mode (1) = RW_ACCESS;
      my_general_acl.extended_mode (1) = N_ACCESS;	/* BJ's don't have xacl's */
      my_general_acl.status_code (1) = 0;		/* assume no error */

      call file_manager_$add_acl_entries (bj_dir, bj_entry,
	 addr (my_general_acl), code);
      if code ^= 0 then
         call ERROR_RETURN (code);
   end GIVE_DM_DAEMON_RW_ACCESS_TO_BJ;


ALLOCATE_AND_INITIALIZE_ALL_BJ_CIS:
   do;

/* Have file_manager_ allocate disk addresses for all CI's.  Then	*/
/* flush all of them to make sure the CI's and their VTOCE'S are	*/
/* updated on disk.						*/

      call file_manager_$allocate (fm_oid, 1, max_size - 1, code);
      if code ^= 0 then
         call ERROR_RETURN (code);

      call file_manager_$flush_consecutive_ci (fm_oid, 1, max_size - 1, code);
      if code ^= 0 then
         call ERROR_RETURN (code);

   end ALLOCATE_AND_INITIALIZE_ALL_BJ_CIS;
%page;
MAKE_BJ_HEADER:
   do;

/* Get the journal header information & write it to CI 0 and flush it */

      bj_header_ptr = addr (my_bj_header);
      unspec (bj_header) = "0"b;

      bj_header.version = BJ_PSTE_VERSION_2;
      bj_header.bj_uid = bj_uid;
      bj_header.ci_size = ci_size;
      bj_header.max_size = max_size;
      bj_header.update_frequency = BJ_UPDATE_FREQUENCY;
      bj_header.txn_storage_limit = bj_max_txn_storage_limit (bj_header_ptr);
      bj_header.active = "0"b;

      bj_header.cl.lowest_ci = 1;
      bj_header.cl.highest_ci = max_size - 1;
      bj_header.cl.number_ci = max_size - 1;
      bj_header.cl.origin_ci = 1;

      call bj_ci_zero$put_header (fm_oid, bj_header_ptr, size (bj_header));

      call file_manager_$flush_consecutive_ci (fm_oid, 0 /* CI 0 */,
	 1 /* one CI to flush */, code);
      if code ^= 0 then
         call ERROR_RETURN (code);

   end MAKE_BJ_HEADER;


CLOSE_BJ_FILE:
   do;
      call file_manager_$close (fm_oid, code);
      if code ^= 0 then
         call ERROR_RETURN (code);
   end CLOSE_BJ_FILE;



   call FINISH ();

MAIN_RETURN:
   return;

/* end bjm_create; */
%page;
NONLOCAL_ERROR_EXIT:
   call ERROR_RETURN (bjm_data_$bj_code);
%skip (4);
FINISH:
   proc ();

   call SET_BJM_DATA_ERROR_HANDLING_VALUES (bjm_data_$bj_default_error_label,
        "", DONT_CHECK_FOR_BJM_RECURSION);
   call cu_$level_set (level);

   return;

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call CLEANUP ();
   p_code = er_p_code;
   goto MAIN_RETURN;

   end ERROR_RETURN;
%skip (4);
CLEANUP:
   proc ();

/* We ignore errors as it does not matter if we get called	*/
/* >1 times.  We may not use fm_$delete_close as there is a	*/
/* slight possibility we may have closed the file after	*/
/* creating it before executing this code.		*/

   if fm_oid ^= NULL_ID then				/* we opened */
      call file_manager_$close (fm_oid, 0);

   if create_code = 0 then				/* we created */
      call file_manager_$delete (bj_dir, bj_entry, 0);

   if bjm_clean_up_needed = TRUE then
      call bj_cleanup_tables$handler (0);

   call FINISH ();

   return;

   end CLEANUP;
%page;
SET_BJM_DATA_ERROR_HANDLING_VALUES:
   proc (sbdehv_p_error_exit, sbdehv_p_operation,
        sbdehv_p_check_for_recursive_invocation);

/* This internal procedure centralizes the setting of the BJM global	*/
/* error values in bjm_data_.  It is called near the beginning of	*/
/* this module, and in the FINISH internal procedure.  ONLY THE FIRST	*/
/* OF THESE CALLS SHOULD ASK FOR DETECTION OF A RECURSIVE INVOCATION	*/
/* OF THE BEFORE JOURNAL MANAGER, if the other calls did, we could	*/
/* end up getting a recursive call ERROR_RETURN, CLEANUP, FINISH,	*/
/* this proc, etc.						*/
/*							*/
/* Note: if sbdehv_p_check_for_recursive_invocation and		*/
/* bjm_clean_up_needed are both false, we do not set any values.	*/
/* This may happen if we call ERROR_RETURN before calling this	*/
/* proc, if the partial argument validation fails.		*/

dcl  (
     sbdehv_p_error_exit		label variable,
     sbdehv_p_operation		char (*),
     sbdehv_p_check_for_recursive_invocation
				bit (1) aligned
     )				parameter;

   if sbdehv_p_check_for_recursive_invocation = CHECK_FOR_BJM_RECURSION then
      if bjm_data_$bj_operation ^= "" then
         call ERROR_RETURN (dm_error_$bj_recursive_invoc);

/* only set bjm_data_ values if we set them */
   if bjm_clean_up_needed = FALSE
        & sbdehv_p_check_for_recursive_invocation
        = DONT_CHECK_FOR_BJM_RECURSION then
      ;
   else
SET_BJM_DATA_ERROR_VALUES:
      do;
      bjm_clean_up_needed = TRUE;
      bjm_data_$bj_operation = sbdehv_p_operation;
      bjm_data_$bj_exit_err = sbdehv_p_error_exit;
      bjm_data_$bj_code = 0;
   end SET_BJM_DATA_ERROR_VALUES;

   return;

   end SET_BJM_DATA_ERROR_HANDLING_VALUES;
%skip (4);
IS_VALID_BJ_NAME:
   proc (ivbn_p_bj_name) reducible returns (bit (1) aligned);

dcl  ivbn_p_bj_name			char (*) parameter;

   return ((length (rtrim (ivbn_p_bj_name)) < 33)
        & (substr (reverse (rtrim (ivbn_p_bj_name)), 1, 3) = "jb."));

   end IS_VALID_BJ_NAME;
%page;
%include dm_bj_header;
%page;
%include dm_bj_pste;
%page;
%include dm_file_create_info;
%page;
%include dm_bj_global_error_info;
%page;
%include acl_structures;
%page;
%include access_mode_values;


   end bjm_create;
