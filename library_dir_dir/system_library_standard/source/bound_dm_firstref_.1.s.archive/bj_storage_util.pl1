/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:


   ==> bj_storage_util$next_used_ci (bj_pste_ptr, ci_no)  	returns ci_no of next CI in used part of Circ. List.

   ==> bj_storage_util$previous_used_ci (bj_pste_ptr, ci_no)	returns ci_no of previous CI in used part of Circ. List.

   ==> bj_storage_util$next_free_ci  (bj_pste_ptr)		returns ci_no of next free CI.

   ==> bj_storage_util$distance (bj_pste_ptr, ci_no)	returns distance from origin.

*/


/* HISTORY:
Written by Andre Bensoussan,  08/13/1982.
Modified:
12/17/82 by Andre Bensoussan:  to add the previous_used_ci entrypoint
11/02/84 by Maggie Sharpe:  to change parameter names from capitalized names
	  to names prefixed by "p_"; to use call ERROR_RETURN (code) method
	  of error handling; corrected minor format problems.
*/

/* format: style5,^inddcls,^indcomtxt */

bj_storage_util:
        proc;				      /*  Never called here */

        signal error;
        return;


/* Paramaters */

dcl     p_bj_pste_ptr	  ptr;
dcl     p_current		  fixed bin (24) uns;
dcl     p_ci_no		  fixed bin (24) uns;


/* Automatic */

dcl     current		  fixed bin (24) uns;
dcl     next		  fixed bin (24) uns;
dcl     previous		  fixed bin (24) uns;
dcl     ci_no		  fixed bin (24) uns;
dcl     code		  fixed bin (35);

/* Conditions */

dcl     error		  condition;


/* Constant */

dcl     ME		  char (15) internal static
			  options (constant) init ("bj_storage_util");

/* External */

dcl     dm_error_$bj_bad_ci_no  ext fixed bin (35);
dcl     dm_error_$bj_no_next_used_ci
			  ext fixed bin (35);
dcl     dm_error_$bj_no_previous_used_ci
			  ext fixed bin (35);
dcl     dm_error_$bj_logic_err  ext fixed bin (35);

/* Entries */

dcl     bj_storage_recycle	  entry (ptr, fixed bin (35));
dcl     bj_report_err	  entry (fixed bin (35), char (*));

%page;

next_used_ci:
        entry (p_bj_pste_ptr, p_current) returns (fixed bin (24) uns);



/* Returns the ci_no of the next CI used in the journal.

   If the next ci used is undefined, it sets a code and invokes
   the bj_report_err procedure, which will do a non local goto
   to the bjm primitive. The various cases where the next used ci
   may be undefined are:

   o p_current is not in the circular list of the journal.
   o p_current is not in the used part of the journal.
   o p_current is the last in the used part of the journal and has no next used. */



        bj_pste_ptr = p_bj_pste_ptr;
        current = p_current;


/* Note that DISTANCE checks that current is in the circular list */


        if DISTANCE (current) >= DISTANCE (bj_pste.last_ci_buffered) then
	      call ERROR_RETURN (dm_error_$bj_no_next_used_ci);


        if current < bj_pste.cl.highest_ci then
	      next = current + 1;

        else
	      next = bj_pste.cl.lowest_ci;

        if next = bj_pste.cl.origin_ci then
	      call ERROR_RETURN (dm_error_$bj_logic_err);

        return (next);
%page;

/**** ******  NOT USED YET -- Still an internal proc in bj_storage_append. *** ****/


next_free_ci:
        entry (p_bj_pste_ptr) returns (fixed bin (24) uns);



        bj_pste_ptr = p_bj_pste_ptr;
        current = bj_pste.last_ci_buffered;

        if current < bj_pste.cl.highest_ci then
	      next = current + 1;
        else
	      next = bj_pste.cl.lowest_ci;

        if next = bj_pste.cl.origin_ci then
	      do;
	      call bj_storage_recycle (bj_pste_ptr, code);
	      if code ^= 0 then
		    call ERROR_RETURN (code);
	      end;


        return (next);
%page;

previous_used_ci:
        entry (p_bj_pste_ptr, p_current) returns (fixed bin (24) uns);



/* Returns the ci_no of the previous CI used in the journal.
   If there is no such CI, it sets the code to an error code value
   and invokes the bj_report_err procedure, which will do a non local
   goto to the external label set by the bjm primitive, or the caller
   of bj_storage_util. The various cases where there is no such CI are:

   o p_current is not a CI of the circular list of the journal
   o p_current is not in the used part of the journal.
   o p_current is the first CI in the used list: it has no previous. */



        bj_pste_ptr = p_bj_pste_ptr;
        current = p_current;


        if DISTANCE (current) > DISTANCE (bj_pste.last_ci_buffered) then
	      call ERROR_RETURN (dm_error_$bj_bad_ci_no);


        if current = bj_pste.cl.origin_ci then
	      call ERROR_RETURN (dm_error_$bj_no_previous_used_ci);


        if current > bj_pste.cl.lowest_ci then
	      previous = current - 1;
        else
	      previous = bj_pste.cl.highest_ci;

        return (previous);
%page;

distance:
        entry (p_bj_pste_ptr, p_ci_no) returns (fixed bin (24) uns);


/* Returns the distance of a given CI to the origin of the
   circular list. The given CI has to be in the circular list,
   otherwise an error_code is set and a nonlocal goto is performed.
   the distance returned is always  positive or null, and represents
   the number of steps forwards starting at the origin to get to
   the given CI.

   0 <= distance < bj_pste.cl.number_ci

*/





        bj_pste_ptr = p_bj_pste_ptr;
        ci_no = p_ci_no;


        return (DISTANCE (ci_no));
%page;


DISTANCE:
        proc (ci) returns (fixed bin (24) uns);


dcl     ci		  fixed bin (24) uns;



        if ci < bj_pste.cl.lowest_ci		      /* Make sure ci is in Circ.List */
	  | ci > bj_pste.cl.highest_ci then
	      call ERROR_RETURN (dm_error_$bj_bad_ci_no);


        if ci >= bj_pste.cl.origin_ci then
	      return (ci - bj_pste.cl.origin_ci);
        else
	      return (ci - bj_pste.cl.origin_ci + bj_pste.cl.number_ci);

        end DISTANCE;



ERROR_RETURN:
        proc (error_code);

dcl     error_code		  fixed bin (35);

        call bj_report_err (error_code, ME);	      /* does not return */

        end ERROR_RETURN;

%page;
%include dm_bj_pste;

        end bj_storage_util;
