/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	This module, bj_pste_lock, manages the lock on an individual
     entry in the BJ_PST.  There are four entries:  $lock,
     $lock_partial_check, $unlock, and $unlock_cleanup.  $lock requires the
     PSTE to be valid.  $lock_partial_check is used in reocvery from a
     crash and the PSTE version may not have been filled in yet.  $unlock
     and $unlock_cleanup do not check the PSTE version by design, but
     require the process_id in the lock word and the calling process to be
     the same;  the only difference is $unlock causes an error and
     $unlock_cleanup will only log an error.

     NOTE:
     The PST does not have to be locked to lock a PSTE.  See bj_pst_lock
     for the cases wehere the PST is locked.  We lock a PSTE when doing a
     read or write operation on the BJ, or when synchronizing the PSTE with
     the associated TXTE.
*/

/* HISTORY:
Written by A. Bensoussan, 02/23/83.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_bad_pste_ix to bj_bad_pste_idx.
11/02/84 by Maggie Sharpe:  To use "call ERROR_RETURN (code)" method of error
            handling; clean up dcls and format; use the constant APPE instead
            of the literal "appe" in several place.
02/14/85 by Lee A. Newcomb:  Fixed to use the new BJ_PSTE_VERSION_2 constant;
            removed the unused entry bj_pste_lock$; added the
            CHECK_VERSION_NUMERIC proc; changed so each entry would use its
            full name in calls to bj_report_err.
02/28/85 by Lee A. Newcomb:  Fixed to always check the PSTE version in $lock;
            reverted to NOT check the PSTE version in the unlock entries;
            initialized myname to an indicator of invalidity; added to the
            description to help readers.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
05/10/85 by R. Michael Tague:  Replaced explicit reference to dm_journal_seg
            will a call to dm_hcs_$validate_bj_uid.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_pste_lock$lock:
   proc (p_bj_pste_ptr, p_bj_uid);

/* DECLARATIONS */
/* Parameter */
dcl  (
     p_bj_pste_ptr			ptr,		/* Input */
     p_bj_uid			bit (36) aligned	/* Input - If null dont check uid */
     )				parameter;

/* Automatic */
dcl  (
     code				fixed bin (35) init (0),
     myname			char (32)
				init (BJ_PSTE_LOCK_MYNAME_NOT_SET)
     )				automatic;

/* Based */
/* Builtin */
dcl  addr				builtin;

/* Condition */
/* Constant */
dcl  (
     APPE				char (4) init ("appe"),
     BJ_PSTE_LOCK			char (32) init ("bj_pste_lock$lock"),
     BJ_PSTE_LOCK_MYNAME_NOT_SET	char (32)
				init ("bj_pste_lock myname not set"),
     BJ_PSTE_LOCK_UNLOCK		char (32) init ("bj_pste_lock$unlock"),
     BJ_PSTE_LOCK_UNLOCK_CLEANUP	char (32)
				init ("bj_pste_lock$unlock_cleanup"),
     BJ_PSTE_LOCK_PARTIAL_CHECK	char (32)
				init (
				"bj_pste_lock$lock_partial_check")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_report_err			entry (fixed bin (35), char (*)),
     bj_storage_append$adjust		entry (ptr),
     dm_hcs_$validate_bj_uid		entry (bit (36) aligned, fixed bin) returns (bit (1) aligned),
     dm_misc_util_$log		entry () options (variable),
     get_process_id_		entry returns (bit (36) aligned),
     lock_manager_$lock_fast		entry (ptr, fixed bin (71),
				fixed bin (35)),
     lock_manager_$unlock_fast	entry (ptr, fixed bin (35))
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     bjm_data_$lock_manager_timeout	fixed bin (71),
     (
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_bad_pste_idx,
     dm_error_$bj_bad_pste_ptr,
     dm_error_$bj_bad_pste_version,
     dm_error_$bj_uids_dont_agree,
     dm_error_$bj_uids_dont_match,
     dm_error_$fast_lock_invalid_reset
     )				fixed bin (35)
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
/* bj_pste_lock$lock:			repeat for reader	*/
/*      proc (p_bj_pste_ptr, p_bj_uid);				*/

   myname = BJ_PSTE_LOCK;
   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);

   bj_pste_ptr = p_bj_pste_ptr;
   call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
        dm_error_$bj_bad_pste_version);

   if bj_pste.bj_ix < 1 | bj_pste.bj_ix > bj_pst.max_n_entries then
      call ERROR_RETURN (dm_error_$bj_bad_pste_idx);

   if bj_pste_ptr ^= addr (bj_pst.e (bj_pste.bj_ix)) then
      call ERROR_RETURN (dm_error_$bj_bad_pste_ptr);

   call lock_manager_$lock_fast (addr (bj_pste.lock),
        bjm_data_$lock_manager_timeout, code);

   if code ^= 0 & code ^= dm_error_$fast_lock_invalid_reset then
      call ERROR_RETURN (code);

/* We recheck the PSTE version in case another process	*/
/* deleted it between the time we checked the version and	*/
/* got the lock.					*/
   call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
        dm_error_$bj_bad_pste_version);

   if bj_pste.bj_uid ^= p_bj_uid then
      call ERROR_RETURN (dm_error_$bj_uids_dont_match);

   if ^dm_hcs_$validate_bj_uid (bj_pste.bj_uid, bj_pste.bj_ix) then
      call ERROR_RETURN (dm_error_$bj_uids_dont_agree);

   if bj_pste.append_state.current_operation = APPE then
      call bj_storage_append$adjust (bj_pste_ptr);

   go to MAIN_RETURN;

/* end bj_pste_lock$lock; */
%page;
bj_pste_lock$unlock:
   entry (p_bj_pste_ptr);

   myname = BJ_PSTE_LOCK_UNLOCK;
   bj_pste_ptr = p_bj_pste_ptr;

   if bj_pste.append_state.current_operation = APPE then
      if bj_pste.lock.pid = get_process_id_ () then
         call bj_storage_append$adjust (bj_pste_ptr);

   call lock_manager_$unlock_fast (addr (bj_pste.lock), code);
   if code ^= 0 then
      call ERROR_RETURN (code);

   go to MAIN_RETURN;

/* end bj_pste_lock$unlock; */
%skip (4);
bj_pste_lock$unlock_cleanup:
   entry (p_bj_pste_ptr);

   myname = BJ_PSTE_LOCK_UNLOCK_CLEANUP;
   bj_pste_ptr = p_bj_pste_ptr;

   if bj_pste.append_state.current_operation = APPE then
      if bj_pste.lock.pid = get_process_id_ () then
         call bj_storage_append$adjust (bj_pste_ptr);

   call lock_manager_$unlock_fast (addr (bj_pste.lock), code);

   if code ^= 0 then
      call dm_misc_util_$log (LOG_SV, code, myname, "while unlocking bj_pste");

   go to MAIN_RETURN;

/* end bj_pste_lock$unlock_cleanup; */
%page;
bj_pste_lock$lock_partial_check:
   entry (p_bj_pste_ptr);

   myname = BJ_PSTE_LOCK_PARTIAL_CHECK;
   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);
   bj_pste_ptr = p_bj_pste_ptr;
   if bj_pste.version ^= 0 then			/* may be a PSTE */
      call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	 dm_error_$bj_bad_pste_version);

   if bj_pste.bj_ix < 1 | bj_pste.bj_ix > bj_pst.max_n_entries then
      call ERROR_RETURN (dm_error_$bj_bad_pste_idx);

   if bj_pste_ptr ^= addr (bj_pst.e (bj_pste.bj_ix)) then
      call ERROR_RETURN (dm_error_$bj_bad_pste_ptr);

   call lock_manager_$lock_fast (addr (bj_pste.lock),
        bjm_data_$lock_manager_timeout, code);

   if code ^= 0 & code ^= dm_error_$fast_lock_invalid_reset then
      call ERROR_RETURN (code);

/* We recheck the PSTE version in case another process	*/
/* deleted it between the time we checked the version and	*/
/* got the lock.					*/
   if bj_pste.version ^= 0 then			/* fully in use entry */
      call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	 dm_error_$bj_bad_pste_version);

   if ^dm_hcs_$validate_bj_uid (bj_pste.bj_uid, bj_pste.bj_ix) then
      call ERROR_RETURN (dm_error_$bj_uids_dont_agree);

   if bj_pste.append_state.current_operation = APPE then
      if bj_pste.version ^= 0 then
         call bj_storage_append$adjust (bj_pste_ptr);

   go to MAIN_RETURN;

/* end bj_pste_lock$lock_partial_check; */
%page;
MAIN_RETURN:
   return;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35);

   call bj_report_err (er_p_code, myname);		/* does not return */
   goto MAIN_RETURN;				/* but better safe than sorry */
   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check several	*/
/* structures with numeric versions.  It is hoped newer versions of	*/
/* these structures will be changed to use char (8) versions.	*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_log_sv_codes;


   end bj_pste_lock$lock;
