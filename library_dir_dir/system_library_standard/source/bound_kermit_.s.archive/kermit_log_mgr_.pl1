/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

kermit_log_mgr_: proc;
  
  /********************************************************************/
  /*							*/
  /*n	kermit_log_mgr_					*/
  /*							*/
  /*d	The kermit log manager controls the enabling and disabling 	*/
  /*d	of the logging function from both the subroutine and	*/
  /*d	request levels, as well as the printing of statistics that	*/
  /*d	are derived from the logged info and the logging itself.	*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* constants */
  
  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  
  dcl Unused		bit (1) aligned static options (constant)
			     init ("0"b);
  dcl Default_log		char (10) static options (constant)
			     init ("kermit.log");
  
  /* arguments */
  
  dcl A_code		fixed bin (35) parameter;
  dcl A_filename		char (*) varying;
  dcl A_infop		ptr parameter;
  dcl A_sci_ptr		ptr parameter;
  dcl A_statisticsp		ptr parameter;
  
  /* procedures */
  
  dcl get_shortest_path_	entry (char(*)) returns(char(168));
  dcl ioa_		entry() options(variable);
  dcl ioa_$ioa_switch	entry() options(variable);
  dcl iox_$attach_name	entry (char(*), ptr, char(*), ptr,
			     fixed bin(35));
  dcl iox_$close		entry (ptr, fixed bin(35));
  dcl iox_$detach_iocb	entry (ptr, fixed bin(35));
  dcl iox_$open		entry (ptr, fixed bin, bit(1) aligned,
			     fixed bin(35));
  dcl convert_status_code_	entry (fixed bin(35), char(8) aligned,
			     char(100) aligned);
  dcl date_time_$format	entry (char(*), fixed bin(71), char(*), char(*))
			     returns (char (250) varying);
  dcl expand_pathname_$component
			entry (char(*), char(*), char(*), char(*),
			     fixed bin(35));
  dcl pathname_$component	entry (char(*), char(*), char(*)) 
			    returns(char(194));
  dcl ssu_$abort_line	entry() options(variable);
  dcl ssu_$arg_count	entry (ptr, fixed bin);
  dcl ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin(21));
  
  /* external */
  
  dcl error_table_$badopt	external fixed bin (35);
  dcl error_table_$noarg	external fixed bin (35);
  dcl error_table_$too_many_args
			external fixed bin (35);
  dcl kermit_et_$log_not_disabled
			external fixed bin (35);
  dcl kermit_et_$log_open	external fixed bin (35);
  dcl kermit_et_$no_log	external fixed bin (35);
  dcl kermit_et_$no_valid_stats
			external fixed bin (35);
  
  /* based */
  
  dcl arg			char (argl) based (argp);
  dcl 01 info		aligned like kermit_info based (A_infop);
  dcl 01 log_info		aligned like kermit_log_info
			     based (info.log_infop);
  dcl 01 stats		aligned like kermit_stats_info
			     based (A_statisticsp);
  
  /* automatic */
  
  dcl argl		fixed bin (21);
  dcl argp		ptr;
  dcl atd			char (256) varying;
  dcl cps			fixed bin (21);
  dcl cnm			char (32);
  dcl dnm			char (168);
  dcl ec			fixed bin (35);
  dcl enm			char (32);
  dcl extend		bit (1);
  dcl finished		char (250) varying;
  dcl i			fixed bin;
  dcl interval		fixed bin (71);
  dcl iocbp		ptr;
  dcl last_send		bit (1);
  dcl message		char (100) aligned;
  dcl nargs		fixed bin;
  dcl path		char (194);
  dcl started		char (250) varying;
  dcl time		float bin (63);
  
  /* conditions */
  
  /* builtin */
  
  dcl null		builtin;
  
  /* include files */
  

%include iox_modes;

%include kermit_dcls;

%include kermit_info;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


close_log: entry (A_infop, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$close_log		external	*/
  /*i	Input:	info_ptr					*/
  /*f	Function:	checks if there is currently a log_file open and	*/
  /*f		closes it if there is.			*/
  /*o	Output:	error_code				*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  A_code = 0;
  
  /* make sure there is a log_file open first			*/
  
  if log_info.log_file.iocbp = null
    then A_code = kermit_et_$no_log;
    
  /* make sure logging is disabled on the file before closing it	*/
  
  else if log_info.enabled
    then A_code = kermit_et_$log_not_disabled;
    else do;
      call iox_$close (log_info.log_file.iocbp, A_code);
      if A_code = 0
        then call iox_$detach_iocb (log_info.log_file.iocbp, A_code);
      log_info.log_file.iocbp = null;
    end;
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


disable: entry (A_infop, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$suspend_logging	external	*/
  /*i	Input:	info_ptr					*/
  /*f	Function:	clears the logging_enabled switch in the log_info	*/
  /*f		database.					*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* make sure we have a log file attached			*/
  
  if log_info.log_file.iocbp = null
    then A_code = kermit_et_$no_log;
    else log_info.flags.enabled = false;
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


display_statistics: entry (A_sci_ptr, A_infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$display_statistics	external	*/
  /*i	Input:	sci_ptr, info_ptr				*/
  /*f	Function:	extracts the statistics info from the log_info	*/
  /*f		database, calculates the derived values, then	*/
  /*f		formats and displays the resulting statistics.	*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-11-02	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* abort if thewre are no valid statistics avaliable		*/
  
  if ^log_info.flags.stats_valid
    then call ssu_$abort_line (A_sci_ptr, kermit_et_$no_valid_stats);
    
  /* see if the caller was send				*/
  
  last_send = (log_info.statistics.caller = "send");
  
  /* header line						*/
  
  call ioa_ ("Statistics for ^[un^]successful ^[send^;receive^] of file",
	(log_info.statistics.status ^= 0), last_send);
  
  /* pathname of the transferred file				*/
  
  call expand_pathname_$component (log_info.statistics.filename,
				dnm, enm, cnm, ec);
  log_info.statistics.filename = pathname_$component (dnm, enm, cnm);
  
  call ioa_ ("  ^a", get_shortest_path_ (log_info.statistics.filename));
  
  /* converted status code message if non-zero			*/
  
  if log_info.statistics.status ^= 0
    then do;
      call convert_status_code_ (log_info.statistics.status, (""), message);
      call ioa_ ("  Reason:^17t^a", message);
    end;
    
  /* error message from remote, (if one was supplied)		*/
  
  if log_info.statistics.error_message ^= ""
    then call ioa_ ("  Error message:^17t^a",
	log_info.statistics.error_message);
  
  /* calculate start and finish times				*/
  
  started = date_time_$format ("date_time",
		log_info.statistics.start_time, "", "");
  finished = date_time_$format ("date_time",
		log_info.statistics.end_time, "", "");
  
  call ioa_ ("  Started:^30t^a", started);
  call ioa_ ("  Finished:^30t^a", finished);
  
  /* print out statistics					*/
  
  call ioa_ ("  Length of file:^30t^d characters",
	log_info.statistics.file_len);
  call ioa_ ("  File characters ^[sent^;received^]:^30t^d characters",
	last_send, log_info.statistics.char_count);
  call ioa_ ("  Packets ^[sent^;received^]:^30t^d packets", last_send,
	log_info.statistics.packet_count);
  call ioa_ ("  Characters ^[sent^;received^]:^30t^d characters",
	last_send, log_info.statistics.packet_chars);
  call ioa_ ("  Retries:^30t^d packets", log_info.statistics.packet_retries);
  
  /* calculate effective transmission rate			*/
  
  interval = log_info.statistics.end_time - log_info.statistics.start_time;
  
  /* convert time to seconds from microseconds			*/
  
  time = float (interval) / 1000000.0;
  if time = 0.0
    then cps = 0;
    else cps = log_info.statistics.char_count / time;
  
  call ioa_ ("  Transmission rate:^30t^d characters/second", cps);
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


enable: entry (A_infop, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$enable		external	*/
  /*i	Input:	info_ptr					*/
  /*f	Function:	sets the logging_enabled switch in the log_info	*/
  /*f		database					*/
  /*o	Output:	error_code				*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  A_code = 0;
  
  /* make sure there is a log_file open first			*/
  
  if log_info.log_file.iocbp = null
    then A_code = kermit_et_$no_log;
    else log_info.flags.enabled = true;
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


end_log: entry (A_sci_ptr, A_infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$end_log		external	*/
  /*i	Input:	sci_ptr, info_ptr				*/
  /*f	Function:	calls kermit_log_mgr_$disable to terminate the	*/
  /*f		logging operation, then calls			*/
  /*f		kermit_log_mgr_$close_log to close the log file.	*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* disable logging and close the log				*/
  
  call kermit_log_mgr_$disable (A_infop, ec);
  call kermit_log_mgr_$close_log (A_infop, ec);
  
  /* print a message if it didn't work				*/
  
  if ec ^= 0
    then call ssu_$abort_line (A_sci_ptr, ec);
    
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


log_message: entry (A_infop, A_statisticsp);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$log_message		external	*/
  /*i	Input:	info_ptr, statistics_ptr			*/
  /*f	Function:	writes the statistics info into the log_info	*/
  /*f		database.  Then checks the logging_enabled switch	*/
  /*f		and formats the statistics and writes them to the	*/
  /*f		log_file if logging_enabled is on.		*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* copy the stats info and mark it as valid			*/
  
  log_info.statistics = stats;
  log_info.stats_valid = true;
  
  iocbp = log_info.log_file.iocbp;
  
  /* if we have a log open, format a message			*/
  
  if log_info.enabled
    then do;
      
  /* format the initial log message line			*/
      
      if stats.status = 0
        then call ioa_$ioa_switch (iocbp,
		"^a:^10tFile ^[sent^;received^] successfully",
		stats.caller, (stats.caller = "send"));
        else do;
	call convert_status_code_ (stats.status, (""), message);
	call ioa_$ioa_switch (iocbp, "^a:^10t^a", stats.caller, message);
        end;
      
  /* format the pathname of the segment				*/
      
      call expand_pathname_$component (stats.filename, dnm, enm, cnm, ec);
      path = pathname_$component (dnm, enm, cnm);
      path = get_shortest_path_ (path);
      
      call ioa_$ioa_switch (iocbp, "^5t^a", path);
      
  /* format the statistics info				*/
      
      call ioa_$ioa_switch (iocbp, 
	"^5tFile contains ^d chars, ^d chars ^[sent^;received^]",
	stats.file_len, stats.char_count, (stats.caller = "send"));
      call ioa_$ioa_switch (iocbp,
	"^5t^d packets ^[sent^;received^] totalling ^d chars, ^d retries",
	stats.packet_count, (stats.caller = "send"),
	stats.packet_chars, stats.packet_retries);
      
  /* format the start and end times				*/
  
      started = date_time_$format ("date_time", stats.start_time, "", "");
      finished = date_time_$format ("date_time", stats.end_time, "", "");
      call ioa_$ioa_switch (iocbp, "^5tStarted: ^a,  Finished: ^a",
	started, finished);
      
  /* format the remote error message if supplied			*/
      
      if stats.status ^= 0
        then call ioa_$ioa_switch (iocbp, "^5t^a", stats.error_message);
    end;
          
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


open_log: entry (A_infop, A_filename, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$open_log		external	*/
  /*i	Input:	info_ptr, log_file_name			*/
  /*f	Function:	attempts to open the named file for output	*/
  /*f		and stores the iocbp in the log_info database.	*/
  /*o	Output:	error_code				*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* make sure there is not already a log_file open		*/
  
  if log_info.log_file.iocbp ^= null
    then A_code = kermit_et_$log_open;
    else do;
      atd = "vfile_ " || A_filename;
      call iox_$attach_name ("kermit_log", log_info.log_file.iocbp,
	(atd), null, A_code);
      if A_code = 0
        then call iox_$open (log_info.log_file.iocbp, Stream_output, Unused,
	A_code);
    end;
          
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


start_log: entry (A_sci_ptr, A_infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_log_mgr_$start_log		external	*/
  /*i	Input:	sci_ptr, info_ptr	 			*/
  /*f	Function:	opens the file specified by log path if given or	*/
  /*f		the default log file if no log_file_path was	*/
  /*f		specified. Then call kermit_log_mgr_$enable to	*/
  /*f		enable logging operation.			*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-31	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* get the arg count					*/
  
  call ssu_$arg_count (A_sci_ptr, nargs);
  
  extend = true;
  atd = "";
  
  /* parse the arguments					*/
  
  do i = 1 to nargs;
    call ssu_$arg_ptr (A_sci_ptr, i, argp, argl);
    
    if index (arg, "-") ^= 1
      then atd = arg;
    else if arg = "-truncate" | arg = "-tc"
      then extend = false;
    else if arg = "-extend"
      then extend = true;
      else call ssu_$abort_line (A_sci_ptr, error_table_$badopt, arg);
  end;
  
  if atd = ""
    then atd = Default_log;
    
  /* setup the atd for truncation/extension			*/
  
  if extend
    then atd = atd || " -extend";
  
  /* open the log file and enable logging			*/
  
  call kermit_log_mgr_$open_log (A_infop, atd, ec);
  
  if ec ^= 0
    then call ssu_$abort_line (A_sci_ptr, ec);
    
  call kermit_log_mgr_$enable (A_infop, ec);
  
  return;
  
end kermit_log_mgr_;
