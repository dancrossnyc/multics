/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-11-24,Huen), approve(87-11-24,MCR7803), audit(87-12-07,RWaters),
     install(88-09-16,MR12.2-1113):
     Fix kermit error 12.
  2) change(89-01-02,Huen), approve(89-01-02,MCR8027), audit(89-01-25,Lee),
     install(89-03-01,MR12.3-1020):
     Fix kermit bugs: PC_File_Transfer 18, 20, and 23.
                                                   END HISTORY COMMENTS */


kermit_remote_requests_: proc;

/********************************************************************/
/*							*/
/*n	Name:	kermit_remote_requests_			*/
/*							*/
/*d	This module contains the kermit requests that are used to	*/
/*d	request operations from a remote kermit server.		*/
/*							*/
/*l	Written:	84-11-11	by Dean Elhard			*/
/*l	Modified:	84-01-21	by Maureen Mallmes			*/
/*l	     		Added a quit handler, handle_quit.  See	*/
/*l	     		error #5 in the Kermit error list.	*/
/*l	     		Added a cleanup handler, cleanup_modes	*/
/*l	Modified: 86-10-14  by Don Kozlowski - Use rtrim to remove	*/
/*l			trailing blanks of remote_filename      */
/*l			(kermit12)			*/
/*							*/
/**********************************************************************/

/* constants */

	dcl     true		 bit (1) static options (constant) init ("1"b);
	dcl     false		 bit (1) static options (constant) init ("0"b);

	dcl     Ack_reqd		 bit (1) static options (constant) init ("1"b);
	dcl     No_ack		 bit (1) static options (constant) init ("0"b);

	dcl     Ack_packet_type	 char (1) static options (constant) init ("Y");
	dcl     Nak_packet_type	 char (1) static options (constant) init ("N");
	dcl     Error_packet_type	 char (1) static options (constant) init ("E");
	dcl     Generic_packet_type	 char (1) static options (constant) init ("G");
	dcl     Receive_init_packet_type
				 char (1) static options (constant) init ("R");

	dcl     Logout_command	 char (1) static options (constant) init ("L");
	dcl     Finish_command	 char (1) static options (constant) init ("F");

/* parameters */

	dcl     A_sci_ptr		 ptr parameter;
	dcl     A_infop		 ptr parameter;

/* procedures */

	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*),
				 fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$get_request_name	 entry (ptr) returns (char (32));

/* external */

	dcl     error_table_$action_not_performed
				 external fixed bin (35);
	dcl     error_table_$badopt
				 external fixed bin (35);
	dcl     error_table_$nostars
				 external fixed bin (35);
	dcl     error_table_$too_many_args
				 external fixed bin (35);

/* based */

	dcl     arg		 char (argl) based (argp);

/* automatic */

	dcl     arg_idx		 fixed bin;
	dcl     argl		 fixed bin (21);
	dcl     argp		 ptr;
	dcl     dname		 char (168);
	dcl     ec		 fixed bin (35);
	dcl     ename		 char (32);
	dcl     file_count		 fixed bin;
	dcl     file_sw		 bit (1);
	dcl     first_filename	 char (168);
	dcl     initial_state	 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     reason		 char (94);
	dcl     remote_file_sw	 bit (1);
	dcl     remote_filename	 char (94);
	dcl     transfer_modes_set	 bit (1);
	dcl     sequence_no		 fixed bin;

/* conditions */

	dcl     cleanup		 condition;
	dcl     quit		 condition;

/* builtin */

	dcl     addr		  builtin;
	dcl     index		  builtin;
	dcl     length		  builtin;
	dcl     rtrim		  builtin;

/* include files */

%include kermit_dcls;

%include kermit_info;

%include kermit_transfer_info;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


get: entry (A_sci_ptr,				/* subsystem control info ptr		*/
	A_infop);					/* subsystem info ptr		*/

/********************************************************************/
/*							*/
/*n	Name:	kermit_remote_requests_$get		external	*/
/*i	Input:	sci_ptr, info_ptr				*/
/*f	Function:	implements the kermit get remote request.  The	*/
/*f		get request sends a Receive-init packet to the	*/
/*f		remote server indicating the file that the server	*/
/*f		is to send and then call kermit_receive_ to	*/
/*f		receive the file.				*/
/*o	Output:	none					*/
/*							*/
/*l	Written:	84-11-12	by Dean Elhard			*/
/*l	Modified:	85-01-18	by Maureen Mallmes to detect invalid	*/
/*l			control arguments.  See problem number	*/
/*l			3 in the kermit error list.		*/
/*l	     		Modified to disallow starnames and	*/
/*l			archive components for the local file.	*/
/*l			Added quit and cleanup handlers to	*/
/*l			reset tty_ modes.			*/
/*l       Modified: 89-01-02  by S. Huen - The inital state of "get"  */
/*l	                    should start with "Rec_init" instead of */
/*l	                    "Rec_File". (pc_20)                     */
/*							*/
/********************************************************************/

	file_sw = false;
	remote_file_sw = false;
	transfer_modes_set = false;
	remote_filename = "";
	first_filename = "";

/*  Set up quit and cleanup handlers  */

	on quit call handle_quit (A_infop, transfer_modes_set);
	on cleanup call cleanup_modes (A_infop, transfer_modes_set);

	call ssu_$arg_count (A_sci_ptr, nargs);

/* print a usage line if no args were specified			*/

	if nargs = 0
	then call ssu_$abort_line (A_sci_ptr, 0, "Usage: ^a remote_source_path {local_destination_path}", ssu_$get_request_name (A_sci_ptr));

/*  get the arguments  */
	do arg_idx = 1 to nargs;
	     call ssu_$arg_ptr (A_sci_ptr, arg_idx, argp, argl);

	     if index (arg, "-") ^= 1 then do;
						/* get the remote system filename/pathname/filespec/whatever	*/
		     if ^remote_file_sw then do;
			     remote_filename = arg;
			     remote_file_sw = true;
			end;

		     else if ^file_sw then do;
			     call expand_pathname_ (arg, dname, ename, ec);
			     if ec = 0 then do;
				     call check_star_name_$entry (ename, ec);
				     if ec ^= 0 & ec < 3 then ec = error_table_$nostars;
				end;

			     if ec ^= 0
			     then call ssu_$abort_line (A_sci_ptr, ec, "^a", arg);
			     first_filename = pathname_ (dname, ename);
			     file_sw = true;
			end;

		     else call ssu_$abort_line (A_sci_ptr, error_table_$too_many_args, "^/Usage: ^a remote_source_path {local_destination_path}", ssu_$get_request_name (A_sci_ptr));
		end;

	     else call ssu_$abort_line (A_sci_ptr, error_table_$badopt, "^a", arg);
	end;


/* inform the user what is going on				*/

	call ioa_ ("^/Receiving. . .");

/* send the receive-init packet				*/

	call send_packet (A_infop, Receive_init_packet_type, rtrim(remote_filename),
	     No_ack, reason, ec);
/* Fix bug 20 - the initial state should start with Rec_init instead of Rec_File */
	initial_state = Rec_init;
	sequence_no = 0;

/* perform a receive if the packet got there and was acknowledged	*/

	if ec = 0
	then do;
		call kermit_xfer_modes_$init (A_infop, (0));
		call kermit_comm_mgr_$set_line_modes (A_infop, (0));
		transfer_modes_set = true;
		call kermit_receive_$receive_from_remote (A_infop, initial_state,
		     sequence_no, first_filename, file_sw, file_count, ec);
		call kermit_comm_mgr_$reset_line_modes (A_infop, (0));
		transfer_modes_set = false;
		if ec = 0
		then call ioa_ ("^/Successfully received ^d file(s).", file_count);
	     end;

/* reset the line modes					*/

	call kermit_comm_mgr_$reset_line_modes (A_infop, 0);
	transfer_modes_set = false;

	if ec ^= 0
	then call ssu_$abort_line (A_sci_ptr, ec, arg);

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


finish: entry (A_sci_ptr,				/* subsystem control info ptr		*/
	A_infop);					/* subsystem info ptr		*/

/********************************************************************/
/*							*/
/*n	Name:	kermit_remote_requests_$finish	external	*/
/*i	Input:	sci_ptr, info_ptr				*/
/*f	Function:	This routine implements the kermit finish remote	*/
/*f		request.  The finish remote request sends the	*/
/*f		remote server a generic command packet which will	*/
/*f		cause the server to terminate server operation	*/
/*f		and return to the kermit request loop.		*/
/*o	Output:	none					*/
/*							*/
/*l	Written:	84-11-12	by Dean Elhard			*/
/*							*/
/********************************************************************/

/* send the generic-finish packet to the remote server		*/

	call send_packet (A_infop, Generic_packet_type, Finish_command,
	     Ack_reqd, reason, ec);
	if ec ^= 0
	then call ssu_$abort_line (A_sci_ptr, ec, reason);

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


logout: entry (A_sci_ptr,				/* subsystem control info ptr		*/
	A_infop);					/* subsystem info ptr		*/

/********************************************************************/
/*							*/
/*n	Name:	kermit_remote_requests_$logout	external	*/
/*i	Input:	sci_ptr, info_ptr				*/
/*f	Function:	This routine implements the kermit logout remote	*/
/*f		request.  The logout remote request sends the	*/
/*f		remote server a generic command packet which will	*/
/*f		cause the server to terminate server operation	*/
/*f		and log the user out from the remote system.	*/
/*o	Output:	none					*/
/*							*/
/*l	Written:	84-11-12	by Dean Elhard			*/
/*							*/
/********************************************************************/

/* send the generic-logout command packet			*/

	call send_packet (A_infop, Generic_packet_type, Logout_command,
	     Ack_reqd, reason, ec);
	if ec ^= 0
	then call ssu_$abort_line (A_sci_ptr, ec, reason);

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


send_packet: proc (infop,				/* subsystem info ptr		*/
	type,					/* type of packet to send		*/
	data,					/* data to send in packet		*/
	ack,					/* acknowledge required switch	*/
	reason,					/* error message returned from remote	*/
	ec);					/* error code			*/

/********************************************************************/
/*							*/
/*n	Name:	send_packet			internal	*/
/*i	Input:	info_ptr, type, data, ack_sw			*/
/*f	Function:	sends a packet to the remote server and waits for	*/
/*f		a reply if necessary.  If the packet is Nak'ed,	*/
/*f		the packet will be retransmitted.  If an error	*/
/*f		packet is returned send-packet will return with	*/
/*f		a nonzero error code and the error message in the	*/
/*f		reason field.  The returned code will only be	*/
/*f		zero if the packet was Ack'ed or no Ack was	*/
/*f		required					*/
/*o	Output:	reason, error_code				*/
/*							*/
/*l	Written:	84-11-12	by Dean Elhard			*/
/*l	Modified:	85-01-18	by Maureen Mallmes 			*/
/*l			Added quit and cleanup handlers to	*/
/*l			reset tty_ modes.			*/
/*							*/
/********************************************************************/

/* parameters */

	dcl     infop		 ptr;
	dcl     type		 char (1);
	dcl     data		 char (*);
	dcl     ack		 bit (1);
	dcl     reason		 char (*);
	dcl     ec		 fixed bin (35);

/* based */

	dcl     message		 char (rcvd) based (addr (buffer));

/* automatic */

	dcl     buffer		 char (3000);
	dcl     rcvd		 fixed bin (21);
	dcl     remote_type		 char (1);
	dcl     retry_count		 fixed bin;
	dcl     transfer_modes_set	 bit (1);
	dcl     seq_no		 fixed bin;


	reason = "";
	transfer_modes_set = false;

/*  Set up quit and cleanup handlers  */

	on quit call handle_quit (infop, transfer_modes_set);
	on cleanup call cleanup_modes (infop, transfer_modes_set);

/* set up the temporary modes database			*/

	call kermit_xfer_modes_$init (infop, ec);
	if ec ^= 0
	then return;

/* clear out any pending nacks from the server			*/

	call kermit_comm_mgr_$flush_input (infop, ec);

/* set up the modes on the transfer channel			*/

	call kermit_comm_mgr_$set_line_modes (infop, ec);
	if ec ^= 0
	then do;
		reason = "^/Unable to set line modes for command.";
		return;
	     end;

	transfer_modes_set = true;
						/* handle sending packets that require no ack			*/

	if ^ack
	then do;
		call kermit_pad_$send (infop, type, addr (data),
		     length (data), 0, (0), (0), ec);
		if ec ^= 0
		then do;
			call kermit_comm_mgr_$reset_line_modes (infop, (0));
			transfer_modes_set = false;
			reason = "^/Unable to send command.";
		     end;
		return;
	     end;

	remote_type = Nak_packet_type;
	retry_count = 0;

/* send the packet until we get a non-ack/non-timeout		*/

	do while (((ec ^= 0) | (seq_no ^= 0) |
	     (remote_type = Nak_packet_type)) & (retry_count < 5));
	     retry_count = retry_count + 1;
	     call kermit_pad_$send (infop, type, addr (data),
		length (data), 0, (0), (0), ec);
	     if ec ^= 0
	     then do;
		     call kermit_comm_mgr_$reset_line_modes (infop, (0));
		     transfer_modes_set = false;
		     reason = "^/Unable to send command.";
		     return;
		end;

	     call kermit_pad_$receive (infop, remote_type, addr (buffer),
		length (buffer), seq_no, rcvd, (0), (""b), ec);
	end;

/* put the line_modes back					*/

	call kermit_comm_mgr_$reset_line_modes (infop, ec);
	transfer_modes_set = false;

/* if we received an error packet back, set the code and reason	*/

	if remote_type = Error_packet_type
	then do;
		reason = message;
		ec = error_table_$action_not_performed;
	     end;
	else if remote_type ^= Ack_packet_type
	then do;
		reason = "Unknown response from host.";
		ec = error_table_$action_not_performed;
	     end;
	else ec = 0;

     end send_packet;

handle_quit:
     proc (infop,					/* subsystem info ptr		*/
	transfer_modes_sw);				/* = "1"b if transfer modes set	*/

/********************************************************************/
/*							*/
/*n	Name:	handle_quit			internal	*/
/*i	Input:	infop, transfer_modes_sw			*/
/*f	Function:	Resets the line modes for standard user i/o, if	*/
/*f		the line modes have been changed for 'remote 	*/
/*f		communication'.  If restarted 'remote	 	*/
/*f		communication' modes are reestablished before	*/
/*f		returning.				*/
/*o	Output:	none					*/
/*							*/
/*l	Written:	85-01-21	by Maureen Mallmes			*/
/*							*/
/********************************************************************/


/*  parameters  */

	dcl     infop		 ptr;
	dcl     transfer_modes_sw	 bit (1);

/*  automatic  */

	dcl     01 cl_info_struc	 aligned,
		02 resetread	 bit (1) unal,
		02 mbz		 bit (35) unal;


	cl_info_struc.resetread = true;
	cl_info_struc.mbz = false;

	if transfer_modes_sw then do;
						/*  Reset the modes for user input and output  */
		call kermit_comm_mgr_$reset_line_modes (infop, (0));
		transfer_modes_sw = false;
						/*  Pass control  */
		call cu_$cl (cl_info_struc);
						/*  Back (restart) so set the modes for file transfer  */
		call kermit_comm_mgr_$set_line_modes (infop, (0));
		transfer_modes_sw = true;
	     end;
	else call continue_to_signal_ (0);		/* do nothing  */

	return;
     end handle_quit;


cleanup_modes:
     proc (infop,					/* subsystem info ptr		*/
	transfer_modes_sw);				/* = "1"b if transfer modes set	*/

/********************************************************************/
/*							*/
/*n	Name:	cleanup_modes			internal	*/
/*i	Input:	infop, transfer_modes_sw			*/
/*f	Function:	Resets the line modes for standard user i/o, if	*/
/*f		the line modes have been changed for 'remote 	*/
/*f		communication'.                	 	*/
/*o	Output:	none					*/
/*							*/
/*l	Written:	85-01-21	by Maureen Mallmes			*/
/*							*/
/********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     transfer_modes_sw	 bit (1);


	if transfer_modes_sw then call kermit_comm_mgr_$reset_line_modes (infop, (0));
	transfer_modes_sw = false;
	return;

     end cleanup_modes;

     end kermit_remote_requests_;
