/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-11-24,Huen), approve(87-11-24,MCR7803), audit(87-12-07,RWaters),
     install(88-09-16,MR12.2-1113):
     Fix kermit error 13.
                                                   END HISTORY COMMENTS */


kermit_server_request_:
     proc (kermit_scip, infop);

/**********************************************************************/
/*							*/
/*n	Name:	kermit_server_request_		external	*/
/*i	Input:	kermit_scip, infop				*/
/*f 	Function: Sets up a Kermit environment that does not have a */
/*f		user interface. i.e. all further commands to	*/
/*f		multics-kermit come in the form of packets from	*/
/*f		the remote.				*/
/*o 	Output:	none					*/
/*l	Modified: 86-01-31  by Don Kozlowski - Delete the 5 second  */
/*l			waiting before setting the file transfer*/
/*l			mode. (kermit 13)			*/
/*l	Modified: 86-10-09  by Don Kozlowski - Set the server flag  */
/*l			properly. (kermit 13)                   */
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     kermit_scip		 ptr;

/*  automatic  */

	dcl     01 cl_info_struc	 aligned,
		02 resetread	 bit (1) unal,
		02 mbz		 bit (35) unal;
	dcl     code		 fixed bin (35);
	dcl     filenames_areap	 ptr;
	dcl     transfer_modes_set	 bit (1);

/*  constants  */

	dcl     False		 bit (1) internal static options (constant) init ("0"b);
	dcl     True		 bit (1) internal static options (constant) init ("1"b);

/*  builtin  */

	dcl     null		 builtin;


/*  procedures  */
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$get_temp_segment	 entry (ptr, char (*), ptr);
	dcl     ssu_$release_temp_segment entry (ptr, ptr);

  /* based */
  
  dcl 01 info		aligned like kermit_info based (infop);
  dcl 01 comm_info		aligned like kermit_comm_info
			     based (info.comm_infop);
  
/*  Conditions  */

	dcl     cleanup		 condition;
	dcl     quit		 condition;


/*  include files  */

%include kermit_dcls;

%include kermit_info;

	transfer_modes_set = False;
	cl_info_struc.resetread = True;
	cl_info_struc.mbz = False;
	comm_info.server = "1"b;		/* We are now a server */

	on quit begin;
		if transfer_modes_set then do;
						/*  Reset the modes for user input and output  */
			call kermit_comm_mgr_$reset_line_modes (infop, code);
			transfer_modes_set = False;
						/*  Pass control  */
			call cu_$cl (cl_info_struc);
						/*  Back (restart) so set the modes for file transfer  */
			call kermit_comm_mgr_$set_line_modes (infop, code);
			transfer_modes_set = True;
		     end;
		else call continue_to_signal_ (0);	/* do nothing  */
	     end;

	filenames_areap = null;

	on cleanup call server_request_cleanup;

	call ssu_$get_temp_segment (kermit_scip, "filenames", filenames_areap);
	call kermit_xfer_modes_$init (infop, code);
						/*  this should never happen  */
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code);
						/*  Set the tty_ modes  */

	call kermit_comm_mgr_$set_line_modes (infop, code);
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^/^a", "Unable to set line modes for file transfer");
	transfer_modes_set = True;

/*  Invoke the server  */

	call kermit_server_ (infop, filenames_areap);
						/*  Server done  */
	call server_request_cleanup;
	return;

server_request_cleanup:
     proc;

	comm_info.server = "0"b;		/* We are NOT a server */
	if filenames_areap ^= null then call ssu_$release_temp_segment (kermit_scip, filenames_areap);
	filenames_areap = null;
	if transfer_modes_set then call kermit_comm_mgr_$reset_line_modes (infop, code);
	transfer_modes_set = False;
	comm_info.server = "0"b;		/* We are NOT a server */
	return;
     end server_request_cleanup;

     end kermit_server_request_;
