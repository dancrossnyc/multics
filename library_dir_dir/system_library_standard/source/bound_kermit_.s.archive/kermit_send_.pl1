/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
  2) change(89-01-02,Huen), approve(89-01-02,MCR8036), audit(89-01-25,Lee),
     install(89-03-01,MR12.3-1020):
     Fix kermit bug: PC_File_Transfer 24 - kermit is being changed to correctly
     handle links to multisegment files.
  3) change(90-09-20,Huen), approve(90-09-20,MCR8203), audit(90-09-25,Gray),
     install(90-10-14,MR12.4-1039):
     phx21339 (pc_25): kermit is changed to ignore redundant ACKs.
                                                   END HISTORY COMMENTS */


kermit_send_: proc;

/**********************************************************************/
/*							*/
/*n	kermit_send_					*/
/*							*/
/*d	This routine is responsible for sending files to a	*/
/*d	remote kermit.					*/
/*							*/
/*l	Written:	84-10-23	by Maureen Mallmes			*/
/*l	Modified:	84-11-05	by Dean Elhard to add archive support	*/
/*l	Modified:	87-07-22	by Don Kozlowski - Support msf file	*/
/*l		(kermit 17)                			*/
/*							*/
/**********************************************************************/

/*  Not an entry  */
	return;



/* parameters  */

	dcl     ec		 fixed bin (35);
	dcl     file_sw		 bit (1);
	dcl     filenames_areap	 ptr;
	dcl     files_sent		 fixed bin;
	dcl     first_filename	 char (*);
	dcl     infop		 ptr;

/*  automatic  */

	dcl     ktip		 ptr;
	dcl     retry_max		 fixed bin (8) unal;
	dcl     retry_select	 (1) fixed bin;
	dcl     state		 fixed bin;

/*  based */

	dcl     01 filenames	 like kermit_filenames based (filenames_areap);
	dcl     01 kermit_stats	 aligned like kermit_stats_info;
	dcl     01 kti		 like kermit_transfer_info;

/*  labels  */

	dcl     send_state		 (0:6) label init (Send_Init, Send_File, Send_Data, Send_Eof, Send_Break, Send_Abort, Send_Complete);

/*  constants  */

	dcl     Byte_length		 fixed bin internal static options (constant) init (9);
	dcl     Max_packet_size	 fixed bin (21) internal static options (constant) init (94);
	dcl     Max_remote_packet_size fixed bin (21) internal static options (constant) init (3000);
	dcl     Mod_64		 fixed bin internal static options (constant) init (64);
	dcl     Whoami		 char (4) internal static options (constant) init ("send");

/*  builtin  */

	dcl     (addr, char, index, length, ltrim) 	builtin;
	dcl     (mod, rtrim, substr, null) 		builtin;

/*  conditions */

	dcl     cleanup		 condition;


/* constants */
	
	dcl     False		 bit (1) internal static options (constant) init ("0"b);
	dcl     True		 bit (1) internal static options (constant) init ("1"b);

/*  external  */

	dcl     error_table_$empty_file fixed bin (35) ext static;
	dcl     error_table_$dirseg fixed bin(35) ext static;
	dcl     kermit_et_$fatal_error fixed bin (35) ext static;
	dcl     kermit_et_$no_initialization fixed bin (35) ext static;
	dcl     kermit_et_$remote_file_abort fixed bin (35) ext static;
	dcl     kermit_et_$remote_group_abort fixed bin (35) ext static;
	dcl     kermit_et_$too_many_retries fixed bin (35) ext static;

/*  procedures  */

	dcl     add_char_offset_	 entry (ptr, fixed bin (21)) returns (ptr) reducible;
	dcl     clock_		 entry () returns (fixed bin (71));
	dcl     hcs_$status_minf       entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     iox_$close	 	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb       entry (ptr, fixed bin (35));
	dcl     pathname_$component	 entry (char (*), char (*), char (*)) returns (char (194));
	dcl     pathname_		 entry (char(*), char(*)) returns(char(168));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	

/* include files  */
%include access_mode_values;

%include kermit_dcls;

%include kermit_info;

%include kermit_mode_info;

%include kermit_transfer_info;

%include iox_modes;

%include terminate_file;

send_to_remote:
     entry (infop, filenames_areap, first_filename, file_sw, files_sent, ec);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_to_remote		external	*/
/*i	Input:	infop, filenames_areap, first_filename, file_sw	*/
/*f 	Function: Sends the file or files specified to the	*/
/*f		microcomputer.				*/
/*f		Provides a state-switching mechanism and data 	*/
/*f		interface via calls to send_init, send_filename,	*/
/*f		send_data, send_eof, send_eot and abort.	*/
/*f		Uses transfer_info to update log.		*/
/*o 	Output:	files_sent, ec				*/
/*							*/
/**********************************************************************/

	retry_select = Retry_threshold;
	call kermit_mode_mgr_$retrieve (infop, Permanent, retry_select, addr (retry_max), ec);

	ktip = addr (kti);
	kti.retry_threshold = retry_max;
	kti.retry_count = 0;
	kti.sequence_n = 0;
	kti.filenamesp = filenames_areap;
	kti.filenames_idx = 0;
	kti.filep = null;
	kti.iocb_ptr = null;
	kti.msf = False;
	kti.buffp = null;
	kti.file_count = 0;
	kti.statisticsp = addr (kermit_stats);

	kermit_stats.caller = Whoami;
	kermit_stats.status = 0;
	kermit_stats.filename = "";
	kermit_stats.file_len = 0;
	kermit_stats.char_count = 0;
	kermit_stats.packet_chars = 0;
	kermit_stats.packet_count = 0;
	kermit_stats.packet_retries = 0;
	kermit_stats.start_time = 0;
	kermit_stats.end_time = 0;
	kermit_stats.error_message = "";

	on cleanup begin;
		if kti.filep ^= null then
		     call terminate_file_ (kti.filep, 0, TERM_FILE_TERM, (0));
		kti.filep = null;
		if kti.iocb_ptr ^= null then do;
		     call iox_$close (kti.iocb_ptr, ec);
		     call iox_$detach_iocb (kti.iocb_ptr, ec);
		     kti.iocb_ptr = null;
		     kti.msf = False;
		     end;
	     end;

	state = Send_init;



/*  State switcher  */

	do while ("1"b);

	     goto send_state (state);

Send_Init:
	     call send_init (infop, ktip, state);
	     goto exit_state;

Send_File:
	     call send_filename (infop, ktip, first_filename, file_sw, state);
	     if kermit_stats.status ^= 0 then call update_log (infop, ktip);
	     goto exit_state;
Send_Data:
	     call send_data (infop, ktip, state);
	     goto exit_state;

Send_Eof:
	     call send_eof (infop, ktip, state);
	     if state ^= Send_eof then call update_log (infop, ktip);
	     goto exit_state;

Send_Break:
	     call send_break (infop, ktip, state);
	     goto exit_state;

Send_Abort:
	     call abort_group (infop, ktip);
	     ec = kermit_stats.status;

Send_Complete:
	     files_sent = kti.file_count;
	     return;

exit_state: end;

	return;

send_break: proc (infop, ktip, state);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_break		internal	*/
/*i 	Input:	infop, ktip				*/
/*f	Function:	Transmits an End-of-Transmission (EOT) packet.	*/
/*f		Sets state according to acknowledgement from 	*/
/*f		remote. 	                              	*/
/*o	Output:	state					*/
/*							*/
/**********************************************************************/

/* parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;
	dcl     state		 fixed bin;

/*  automatic  */

	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     idx		 fixed bin;
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;

/*  based */

	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

/*  labels  */

	dcl     packet		 (0:3) label init (Other, Nak, Ack, Error);

/*  constants  */

	dcl     Packet_string	 char (3) internal static options (constant) init ("NYE");


	ec = 0;
	packet_type = "";
	remote_datap = addr (remote_data);
	kti.retry_count = kti.retry_count + 1;

/*  Should we give up?  */
	if kti.retry_count > kti.retry_threshold then do;
		kermit_stats.status = kermit_et_$too_many_retries;
		call kermit_pad_$send (infop, Error_packet, null, (0), kti.sequence_n, (0), (0), ec);
		state = Send_abort;
		return;
	     end;

	call kermit_pad_$send (infop, Eot_packet, null, (0), kti.sequence_n, chars_sent, packet_size, ec);
	if ec ^= 0 then goto Retry_packet;

Ignore_packet:
	call kermit_pad_$receive (infop, packet_type, remote_datap, Max_remote_packet_size, packet_n, chars_received, packet_size, eol_split, ec);
	if ec ^= 0 then goto Retry_packet;

	idx = index (Packet_string, packet_type);
	goto packet (idx);


Ack:						/*  Received an ACK packet  */
	if mod (packet_n + 1, Mod_64) = kti.sequence_n 
	     then goto Ignore_packet;                     /*  Ignore redundant ACK */
	if kti.sequence_n ^= packet_n then goto Retry_packet;
	kti.retry_count = 0;
	kti.sequence_n = mod (kti.sequence_n + 1, Mod_64);
	state = Send_complete;
	return;

Error:						/*  Received an Error packet  */
	kermit_stats.status = kermit_et_$fatal_error;
	kermit_stats.error_message = substr (remote_data, 1, chars_received);
	state = Send_abort;
	return;

Nak:						/*  Received a Nak packet  */
Other:						/*  Got something other than the above  */
Retry_packet:
	kermit_stats.packet_retries = kermit_stats.packet_retries + 1;
	return;
     end send_break;


send_data: proc (infop, ktip, state);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_data		internal	*/
/*i 	Input:	infop, ktip				*/
/*f	Function:	Transmits a Data (D) packet, which		*/
/*f		contains file data in the data field.		*/
/*f		Sets state according to acknowledgement from 	*/
/*f		remote. 	                               	*/
/*o	Output:	state					*/
/*							*/
/**********************************************************************/

/* parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;
	dcl     state		 fixed bin;

/*  automatic  */

	dcl     bit_count		 fixed bin (24);
	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     idx		 fixed bin;
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     r_packet_size	 fixed bin (21);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;


/*  based */

	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

/*  labels  */

	dcl     packet		 (0:3) label init (Other, Nak, Ack, Error);

/*  constants  */

	dcl     Packet_string	 char (3) internal static options (constant) init ("NYE");

	dcl     initiate_file_$component
				 entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));


	ec = 0;
	remote_datap = addr (remote_data);

	kti.retry_count = kti.retry_count + 1;

/*  Should we give up?  */
	if kti.retry_count > kti.retry_threshold then do;
		kermit_stats.status = kermit_et_$too_many_retries;
		call kermit_pad_$send (infop, Error_packet, null, (0), kti.sequence_n, (0), (0), ec);
		state = Send_abort;
		return;
	     end;

	call kermit_pad_$send (infop, Data_packet, kti.buffp, kermit_stats.file_len - kermit_stats.char_count, kti.sequence_n, chars_sent, packet_size, ec);
	if ec ^= 0 then goto Retry_packet;

Ignore_packet:
	call kermit_pad_$receive (infop, packet_type, remote_datap, Max_remote_packet_size, packet_n, chars_received, r_packet_size, eol_split, ec);
	if ec ^= 0 then goto Retry_packet;

	idx = index (Packet_string, packet_type);
	goto packet (idx);

Ack:						/*  Received an ACK packet  */
	if mod (packet_n + 1, Mod_64) = kti.sequence_n 
	     then goto Ignore_packet;                     /*  Ignore redundant ACK */
	else if kti.sequence_n ^= packet_n then goto Retry_packet;

	kti.retry_count = 0;
	kti.sequence_n = mod (kti.sequence_n + 1, Mod_64);
	kermit_stats.char_count = kermit_stats.char_count + chars_sent;
	kti.buffp = add_char_offset_ (kti.buffp, chars_sent);
	kermit_stats.packet_count = kermit_stats.packet_count + 1;
	kermit_stats.packet_chars = kermit_stats.packet_chars + packet_size;

/*  Check for remote file/group abort  */
	if chars_received ^= 0 then do;
		if substr (remote_data, 1, chars_received) = "X" then
		     kermit_stats.status = kermit_et_$remote_file_abort;
		else if substr (remote_data, 1, chars_received) = "Z" then
		     kermit_stats.status = kermit_et_$remote_group_abort;
	     end;


	if kermit_stats.char_count = kermit_stats.file_len
	     & kti.msf
	     & kti.msf_count > kti.msf_current
	     then do;
	     kti.msf_current = kti.msf_current + 1;
	     call terminate_file_ (kti.filep, 0, TERM_FILE_TERM, (0));
	     call initiate_file_$component ( pathname_ (
		filenames.directory (kti.filenames_idx),
		filenames.entry_name (kti.filenames_idx)),
		ltrim (char (kti.msf_current)),
		"",R_ACCESS, kti.filep, bit_count, ec);
	     kti.buffp = kti.filep;
	     kermit_stats.file_len = bit_count / Byte_length + kermit_stats.char_count;
	     end;
	
	     
	if kermit_stats.char_count = kermit_stats.file_len | kermit_stats.status ^= 0 then state = Send_eof;
	return;

Error:						/*  Received an Error packet  */
	kermit_stats.status = kermit_et_$fatal_error;
	kermit_stats.error_message = substr (remote_data, 1, chars_received);
	state = Send_abort;
	return;

Nak:						/*  Received a Nak packet  */
Other:						/*  Got something other than the above  */
Retry_packet:
	kermit_stats.packet_retries = kermit_stats.packet_retries + 1;
	return;

     end send_data;

send_eof: proc (infop, ktip, state);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_eof		internal	*/
/*i 	Input:	infop, ktip				*/
/*f 	Function:	Sends an End-Of-File (Z) packet.		*/
/*f		If the eof packet is in response to an abort	*/
/*f		request received earlier from the remote then	*/
/*f		a "D" is placed in the data part of the packet.	*/
/*f		Sets state according to acknowledgement from      */
/*f		remote. 	                              	*/
/*o 	Output:	state					*/
/*							*/
/**********************************************************************/

/* parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;
	dcl     state		 fixed bin;

/*  automatic  */

	dcl     abort_char		 char (1);
	dcl     abort_char_lth	 fixed bin (21);
	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     idx		 fixed bin;
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;

/*  based */

	dcl     01 filenames	 like kermit_filenames based (kti.filenamesp);
	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

/*  labels  */

	dcl     packet		 (0:3) label init (Other, Nak, Ack, Error);

/*  constants  */

	dcl     Packet_string	 char (3) internal static options (constant) init ("NYE");

	ec = 0;
	remote_datap = addr (remote_data);
	kti.retry_count = kti.retry_count + 1;

/*  Should we give up?  */
	if kti.retry_count > kti.retry_threshold then do;
		kermit_stats.status = kermit_et_$too_many_retries;
		call kermit_pad_$send (infop, Error_packet, null, (0), kti.sequence_n, (0), (0), ec);
		state = Send_abort;
		return;
	     end;

	if kermit_stats.status ^= 0 then do;		/* responding to abort request  */
		abort_char = "D";
		abort_char_lth = 1;
	     end;

	else abort_char_lth = 0;			/*  no previous abort request  */

	call kermit_pad_$send (infop, Eof_packet, addr (abort_char), abort_char_lth, kti.sequence_n, chars_sent, packet_size, ec);
	if ec ^= 0 then goto Retry_packet;

Ignore_packet:
	call kermit_pad_$receive (infop, packet_type, remote_datap, Max_remote_packet_size, packet_n, chars_received, packet_size, eol_split, ec);
	if ec ^= 0 then goto Retry_packet;

	idx = index (Packet_string, packet_type);
	goto packet (idx);

Ack:						/*  Received an ACK packet  */
	if mod (packet_n + 1, Mod_64) = kti.sequence_n 
	     then goto Ignore_packet;                     /*  Ignore redundant ACK */
	if kti.sequence_n ^= packet_n then goto Retry_packet;

	kti.retry_count = 0;
	kti.sequence_n = mod (kti.sequence_n + 1, Mod_64);
	kermit_stats.end_time = clock_ ();
	if kermit_stats.status = 0 then kti.file_count = kti.file_count + 1;
	if kermit_stats.status = kermit_et_$remote_group_abort then state = Send_abort;
	else if kti.filenames_idx = filenames.n_paths then state = Send_break;
	else state = Send_file_header;
	return;

Error:						/*  Received an Error packet  */
	kermit_stats.status = kermit_et_$fatal_error;
	kermit_stats.error_message = substr (remote_data, 1, chars_received);
	state = Send_abort;
	return;

Nak:						/*  Received a Nak packet  */
Other:						/*  Got something other than the above  */
Retry_packet:
	kermit_stats.packet_retries = kermit_stats.packet_retries + 1;
	return;
     end send_eof;

send_filename: proc (infop, ktip, first_filename, file_sw, state);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_filename		internal	*/
/*i 	Input:	infop, ktip				*/
/*f	Function:	Transmits a File-Header (F) packet, which	*/
/*f		contains the file's name in the data field.	*/
/*f		Sets state according to acknowledgement from 	*/
/*f		remote. 	                                	*/
/*o	Output:	state					*/
/*l	Modified: 89-01-02 by S Huen - Handle links to Multisegment */
/*l	          files correctly. (pc_24)                          */
/*							*/
/**********************************************************************/




/* parameters  */

	dcl     file_sw		 bit (1);
	dcl     first_filename	 char (*);
	dcl     infop		 ptr;
	dcl     ktip		 ptr;
	dcl     state		 fixed bin;

/*  automatic  */

	dcl     bit_count		 fixed bin (24);
	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     idx		 fixed bin;
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;
	dcl     source_file		 char (32);
	dcl     source_filep	 ptr;
	dcl     source_file_lth	 fixed bin (21);

/*  based */

	dcl     01 filenames	 like kermit_filenames based (kti.filenamesp);
	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

/*  labels  */

	dcl     packet		 (0:3) label init (Other, Nak, Ack, Error);

/*  constants  */

	dcl     Packet_string	 char (3) internal static options (constant) init ("NYE");


/*  procedures  */

	dcl     initiate_file_$component
				 entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));

	ec = 0;
	remote_datap = addr (remote_data);
	kti.retry_count = kti.retry_count + 1;

/*  Should we give up?  */
	if kti.retry_count > kti.retry_threshold then do;
		kermit_stats.status = kermit_et_$too_many_retries;
		call kermit_pad_$send (infop, Error_packet, null, (0), kti.sequence_n, (0), (0), ec);
		state = Send_abort;
		return;
	     end;

/*  Have we already set up the file  */
	if (kti.filep = null) & (kti.iocb_ptr = null) then do;
		kermit_stats.status = 0;
		bit_count = 0;
		kti.filenames_idx = kti.filenames_idx + 1;

/* make sure there's really another file  */
		if kti.filenames_idx > filenames.n_paths then do;
			state = Send_break;
			return;
		     end;

		call initiate_file_$component (filenames.directory (kti.filenames_idx), filenames.entry_name (kti.filenames_idx), filenames.component (kti.filenames_idx), R_ACCESS, kti.filep, bit_count, ec);
		if ec = error_table_$dirseg
		     & (filenames.component (kti.filenames_idx) = "")
		     then do;
		     call hcs_$status_minf (
			filenames.directory (kti.filenames_idx),
			filenames.entry_name (kti.filenames_idx),
			(1), (0), bit_count , ec);
		     if bit_count > 0 then do;
			kti.msf = True;
			kti.msf_count = bit_count;
			kti.msf_current = 0;
			call initiate_file_$component ( pathname_ (
			     filenames.directory (kti.filenames_idx),
			     filenames.entry_name (kti.filenames_idx)),
			     "0", "",R_ACCESS, kti.filep, bit_count, ec);
			end;
		     else ec = error_table_$dirseg;
		     end;
		kermit_stats.filename = pathname_$component (filenames.directory (kti.filenames_idx), filenames.entry_name (kti.filenames_idx), filenames.component (kti.filenames_idx));
		kermit_stats.start_time = clock_ ();
		kermit_stats.file_len = bit_count / Byte_length;
		if ec ^= 0 | bit_count = 0 then do;
			if ec ^= 0 then kermit_stats.status = ec;
			else kermit_stats.status = error_table_$empty_file;
			kti.filep = null;
			kermit_stats.end_time = kermit_stats.start_time;
			if kti.msf then do;
			     call iox_$close (kti.iocb_ptr, ec);
			     call iox_$detach_iocb (kti.iocb_ptr, ec);
			     kti.msf = False;
			     kti.iocb_ptr = null;
			     end;
			return;
		     end;
		else kti.buffp = kti.filep;
	     end;

/*  we have a user-specified destination path for the first file  */
	if file_sw then do;
		source_file = first_filename;
		file_sw = False;
	     end;

	else do;
		if filenames.component (kti.filenames_idx) = "" then
		     source_file = filenames.entry_name (kti.filenames_idx);
		else source_file = filenames.component (kti.filenames_idx);
	     end;


	source_filep = addr (source_file);
	source_file_lth = length (rtrim (source_file));

	call kermit_pad_$send (infop, File_header_packet, source_filep, source_file_lth, kti.sequence_n, chars_sent, packet_size, ec);
	if ec ^= 0 then goto Retry_packet;

Ignore_packet:
	call kermit_pad_$receive (infop, packet_type, remote_datap, Max_remote_packet_size, packet_n, chars_received, packet_size, eol_split, ec);
	if ec ^= 0 then goto Retry_packet;

	idx = index (Packet_string, packet_type);
	goto packet (idx);

Ack:						/*  Received an ACK packet  */
	if mod (packet_n + 1, Mod_64) = kti.sequence_n 
	     then goto Ignore_packet;                     /*  Ignore redundant ACK */
	if kti.sequence_n ^= packet_n then goto Retry_packet;

	kti.retry_count = 0;
	kti.sequence_n = mod (kti.sequence_n + 1, Mod_64);
	state = Send_data;
	return;

Error:						/*  Received an Error packet  */
	kermit_stats.status = kermit_et_$fatal_error;
	kermit_stats.error_message = substr (remote_data, 1, chars_received);
	state = Send_abort;
	return;

Nak:						/*  Received a Nak packet  */
Other:						/*  Got something other than the above  */
Retry_packet:
	kermit_stats.packet_retries = kermit_stats.packet_retries + 1;
	return;
     end send_filename;


send_init: proc (infop, ktip, state);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$send_init		internal	*/
/*i 	Input:	infop, ktip				*/
/*f 	Function: Transmits a Send-Initiate (S) packet to specify 	*/
/*f		local parameters (packet length, timeout, etc.)	*/
/*f		Waits for the remote's parameters via an ACK (Y)	*/
/*f		packet with the remote parameters in the data  	*/
/*f		field.  The results of this negotiation are	*/
/*f		recorded in New-Modes.                       	*/
/*o 	Output:	state					*/
/*							*/
/**********************************************************************/

/* parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;
	dcl     state		 fixed bin;

/*  automatic  */

	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     idx		 fixed bin;
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;
	dcl     send_init_data	 char (Max_packet_size);
	dcl     send_init_packet	 char (Max_packet_size);
	dcl     send_init_data_lth	 fixed bin (21);
	dcl     send_init_packet_lth	 fixed bin (21);
	dcl     send_init_datap	 ptr;
	dcl     send_init_packetp	 ptr;

/*  based */

	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

/*  labels  */

	dcl     packet		 (0:3) label init (Other, Nak, Ack, Error);

/*  constants  */

	dcl     Packet_string	 char (3) internal static options (constant) init ("NYE");

	ec = 0;
	send_init_datap = addr (send_init_data);
	send_init_packetp = addr (send_init_packet);
	remote_datap = addr (remote_data);
	kti.retry_count = kti.retry_count + 1;

/*  Should we give up?  */
	if kti.retry_count > kti.retry_threshold then do;
		kermit_stats.status = kermit_et_$no_initialization;
		call kermit_pad_$send (infop, Error_packet, null, (0), kti.sequence_n, (0), (0), ec);
		state = Send_abort;
		return;
	     end;

/*  Clear the tty_ line (first time only)  */
	if kti.retry_count = 1 then call kermit_comm_mgr_$flush_input (infop, ec);

/*  Get local send-init data  */
	call kermit_xfer_modes_$get_local_params (infop, send_init_datap, send_init_data_lth, send_init_packetp, send_init_packet_lth, ec);
	if ec ^= 0 then goto Retry_packet;

	call kermit_pad_$send (infop, Send_init_packet, send_init_packetp, send_init_packet_lth, kti.sequence_n, chars_sent, packet_size, ec);
	if ec ^= 0 then goto Retry_packet;

Ignore_packet:
	call kermit_pad_$receive (infop, packet_type, remote_datap, Max_remote_packet_size, packet_n, chars_received, packet_size, eol_split, ec);
	if ec ^= 0 then goto Retry_packet;

	idx = index (Packet_string, packet_type);
	goto packet (idx);


Ack:						/*  Received an ACK packet  */
	if mod (packet_n + 1, Mod_64) = kti.sequence_n 
	     then goto Ignore_packet;                     /*  Ignore redundant ACK */
	if packet_n ^= kti.sequence_n then goto Retry_packet;
						/* Have the remote init data, so set the transfer modes  */
	call kermit_xfer_modes_$process_params (infop, remote_datap, chars_received, send_init_datap, ec);
	if ec ^= 0 then
	     goto Retry_packet;

/* And reset the tty_ line  */
	call kermit_comm_mgr_$reset_line_modes (infop, ec);
	call kermit_comm_mgr_$set_line_modes (infop, ec);

	kti.retry_count = 0;
	kti.sequence_n = mod (kti.sequence_n + 1, Mod_64);
	state = Send_file_header;
	return;

Error:						/*  Received an Error packet  */
	kermit_stats.status = kermit_et_$fatal_error;
	kermit_stats.error_message = substr (remote_data, 1, chars_received);
	state = Send_abort;
	return;

Nak:						/*  Received a Nak packet  */
Other:						/*  Got something other than the above  */
Retry_packet:
	kermit_stats.packet_retries = kermit_stats.packet_retries + 1;
	return;
     end send_init;

update_log:
     proc (infop, ktip);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$update_log		internal	*/
/*i 	Input:	infop, ktip				*/
/*f	Function:	Calls the log_mgr_ to updates the log-file and	*/
/*f		statistics database.  Re-initializes all file 	*/
/*f		associated variables.			*/
/*o	Output:	none					*/
/*							*/
/**********************************************************************/

/* parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;


/*  based */

	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);

	call kermit_log_mgr_$log_message (infop, kti.statisticsp);

	if kti.filep ^= null
	     then call terminate_file_ (kti.filep, 0, TERM_FILE_TERM, (0));
	if kti.iocb_ptr ^= null
	     then do;
	     call iox_$close (kti.iocb_ptr, ec);
	     call iox_$detach_iocb (kti.iocb_ptr, ec);
	     end;
	kti.iocb_ptr = null;
	kti.filep = null;
	kti.buffp = null;

	kermit_stats.filename, kermit_stats.error_message = "";
	if kermit_stats.status = kermit_et_$remote_file_abort then kermit_stats.status = 0;

	kermit_stats.file_len, kermit_stats.char_count,
	     kermit_stats.packet_chars, kermit_stats.packet_count,
	     kermit_stats.packet_retries, kermit_stats.start_time,
	     kermit_stats.end_time = 0;

	return;
     end update_log;

abort_group:
     proc (infop, ktip);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_send_$abort			internal	*/
/*i 	Input:	infop, ktip				*/
/*f 	Function: Aborts transaction. Records aborted file and   	*/
/*f		files that could not be sent.			*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     ktip		 ptr;

/* automatic  */

	dcl     idx		 fixed bin;

/*  based  */

	dcl     01 filenames	 like kermit_filenames based (kti.filenamesp);
	dcl     01 kermit_stats	 aligned like kermit_stats_info based (kti.statisticsp);
	dcl     01 kti		 like kermit_transfer_info based (ktip);


/*  Were we in the middle of a file transfer?  */
	if (kti.filep ^= null) | (kti.iocb_ptr ^= null) then
	     call update_log (infop, ktip);

/*  Log all files that could not be sent in this transaction  */
	do idx = kti.filenames_idx + 1 to filenames.n_paths;
	     kermit_stats.filename = pathname_$component (filenames.directory (idx), filenames.entry_name (idx), filenames.component (idx));
	     call kermit_log_mgr_$log_message (infop, kti.statisticsp);
	end;

	return;
     end abort_group;

     end kermit_send_;
