/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

kermit_send_request_: proc (kermit_scip, infop);

/**********************************************************************/
/*							*/
/*n	Name:	 kermit_send_request_		external	*/
/*i	Input:	 kermit_scip, infop				*/
/*f	Function:  checks the request line.			*/
/*f		 calls kermit_get_filenames to extract the	*/
/*f		 filenames from the request_line. Sets up the	*/
/*f		 communications environment for file transfer. 	*/
/*f		 Informs the user of the success of the  	*/
/*f		 transaction.				*/
/*o	Output:	 none					*/
/*							*/
/*l	Written:	84-10-23	by Maureen Mallmes			*/
/*l	Modified:	85-01-17	by Maureen Mallmes to detect invalid	*/
/*l			control arguments.  See problem number	*/
/*l			3 in the kermit error list.		*/
/*							*/
/**********************************************************************/


/*  automatic  */

	dcl     arg_idx		 fixed binary;
	dcl     arg_lth		 fixed binary (21);
	dcl     arg_ptr		 ptr;
	dcl     argument		 character (arg_lth) based (arg_ptr);
	dcl     argument_count	 fixed bin;
	dcl     01 cl_info_struc	 aligned,
		02 resetread	 bit (1) unal,
		02 mbz		 bit (35) unal;
	dcl     code		 fixed bin (35);
	dcl     infop		 ptr;
	dcl     filenames_areap	 ptr;
	dcl     file_sw		 bit (1);
	dcl     files_sent		 fixed bin;
	dcl     first_filename	 char (168);
	dcl     kermit_scip		 ptr;
	dcl     reason		 char (256);
	dcl     source_file_sw	 bit (1);
	dcl     source_files	 char (168);
	dcl     transfer_modes_set	 bit (1);

/*  based  */

	dcl     01 filenames	 like kermit_filenames based (filenames_areap);

/*  constants  */

	dcl     False		 bit (1) internal static options (constant) init ("0"b);
	dcl     Five_seconds	 fixed bin (71) internal static options (constant) init (5);
	dcl     True		 bit (1) internal static options (constant) init ("1"b);

/*  builtin  */

	dcl     (addr, index, null)	 builtin;


/*  externals  */

	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$too_many_args fixed bin (35) ext static;


/*  procedures  */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
	dcl     ioa_		 entry () options (variable);
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$get_request_name	 entry (ptr) returns (char (32));
	dcl     ssu_$get_temp_segment	 entry (ptr, char (*), ptr);
	dcl     ssu_$release_temp_segment entry (ptr, ptr);

/*  Conditions  */

	dcl     cleanup		 condition;
	dcl     quit		 condition;

/*  Include files  */

%include kermit_dcls;

%include kermit_transfer_info;


/*  Initialize variables  */

	code = 0;
	source_file_sw = False;
	file_sw = False;
	transfer_modes_set = False;
	cl_info_struc.resetread = True;
	cl_info_struc.mbz = False;

	on quit begin;
		if transfer_modes_set then do;
						/*  Reset the modes for user input and output  */
			call kermit_comm_mgr_$reset_line_modes (infop, code);
			transfer_modes_set = False;
						/*  Pass control  */
			call cu_$cl (cl_info_struc);
						/*  Back (restart) so set the modes for file transfer  */
			call kermit_comm_mgr_$set_line_modes (infop, code);
			transfer_modes_set = True;
		     end;
		else call continue_to_signal_ (0);	/* do nothing  */
	     end;


/* get storage for filenames  */

	filenames_areap = null;

	on cleanup call send_request_cleanup;

	call ssu_$get_temp_segment (kermit_scip, "filenames", filenames_areap);

/*  Usage  */
	call ssu_$arg_count (kermit_scip, argument_count);
	if argument_count = 0 then
	     call ssu_$abort_line (kermit_scip, 0, "Usage: ^a local_source_path {remote_destination_path}", ssu_$get_request_name (kermit_scip));

/*  get the arguments  */
	do arg_idx = 1 to argument_count;
	     call ssu_$arg_ptr (kermit_scip, arg_idx, arg_ptr, arg_lth);

	     if index (argument, "-") ^= 1 then do;
		     if ^source_file_sw then do;
			     source_files = argument;
			     source_file_sw = True;
			end;

		     else if ^file_sw then do;
			     first_filename = argument;
			     file_sw = True;
			end;

		     else call ssu_$abort_line (kermit_scip, error_table_$too_many_args, "^/Usage: ^a local_source_path {remote_destination_path}", ssu_$get_request_name (kermit_scip));
		end;

	     else call ssu_$abort_line (kermit_scip, error_table_$badopt, "^a", argument);
	end;

	call kermit_get_filenames_ (infop, source_files, filenames_areap,
	     reason, code);
	if code ^= 0
	then call ssu_$abort_line (kermit_scip, code, "^a", reason);



/*  ...greet the user  */
	call ioa_ ("^/Sending ^d file(s)...", filenames.n_paths);
						/*  ...and send the files  */
						/*  Give the user some time get back to remote  */
	call kermit_xfer_modes_$init (infop, code);
						/*  this should never happen  */
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code);
						/*  Set the tty_ modes  */
	call kermit_comm_mgr_$set_line_modes (infop, code);
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^/^a", "Unable to set line modes for file transfer");
	transfer_modes_set = True;

/*  Send the files  */
	call timer_manager_$sleep (Five_seconds, "11"b);
	call kermit_send_$send_to_remote (infop, filenames_areap, first_filename, file_sw, files_sent, code);
						/*  Done sending  */
	call kermit_comm_mgr_$reset_line_modes (infop, (0));
	transfer_modes_set = False;

	if code ^= 0 then
	     call ssu_$abort_line (kermit_scip, code, "^/^d files sent.", files_sent);

	call ioa_ ("^/Transaction completed: ^d file(s) sent.", files_sent);
	call send_request_cleanup;
	return;


/*  Cleanup the area for the filenames  */
send_request_cleanup:
     proc;

	if filenames_areap ^= null then call ssu_$release_temp_segment (kermit_scip, filenames_areap);
	filenames_areap = null;
	if transfer_modes_set then call kermit_comm_mgr_$reset_line_modes (infop, code);
	transfer_modes_set = False;
	return;
     end send_request_cleanup;

     end kermit_send_request_;
