/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
  2) change(89-01-02,Huen), approve(89-01-02,MCR8027), audit(89-01-25,Lee),
     install(89-03-01,MR12.3-1020):
     Fix kermit bugs: PC_File_Transfer 18, 20, and 23.
                                                   END HISTORY COMMENTS */


kermit_xfer_modes_:
     proc;

/********************************************************************/
/*							*/
/*n	kermit_xfer_modes_					*/
/*							*/
/*d	This routine is responsible for setting the modes		*/
/*d	required for file transfer.				*/
/*							*/
/*l	Written:	84-10-23	by Maureen Mallmes			*/
/*l       Modified: 87-06-15  by S. Huen - Add extended packet length */
/*l                 based on D. Kozlowski's version (kermit 16)  .    */
/*							*/
/********************************************************************/


/*  Not an entry  */
	return;

/*  parameters  */
	dcl     encoded_params_lth	 fixed bin (21);
	dcl     encoded_paramsp	 ptr;
	dcl     ec		 fixed bin (35);
	dcl     infop		 ptr;
	dcl     local_paramsp	 ptr;
	dcl     local_params_lth	 fixed bin (21);
	dcl     remote_paramsp	 ptr;
	dcl     remote_params_lth	 fixed bin (21);
	dcl     temp_defaultsp	 ptr;

/* automatic  */

	dcl     reset_sw		 bit (1);
	dcl     send_init_select	 (N_params) fixed bin;

/*  constants  */

	dcl     Init_field		 (13) fixed bin static options (constant) init
				 (1,		/* MAXL is char  */
				 1,		/* TIME is char  */
				 1,		/* NPAD is char  */
				 2,		/* PADC is ctl   */
				 1,		/* EOL  is char  */
				 0,		/* QCTL is none  */
				 0,		/* QBIN is none  */
				 3,		/* CHKT is binary*/
				 0,		/* REPT is none  */
				 1,		/* CAPAS is char */
				 1,		/* WINDO  ischar */
				 1,		/* MAXLX1 is char*/
				 1);		/* MAXLX2 is char*/



	dcl     Char_coded		 fixed bin static options (constant) init (1);
	dcl     Ctl_coded		 fixed bin static options (constant) init (2);
	dcl     Binary_coded	 fixed bin static options (constant) init (3);
	dcl     False		 bit (1) static options (constant) init ("0"b);
	dcl     N_params		 fixed bin static options (constant) init (13);
	dcl     True		 bit (1) static options (constant) init ("1"b);

/* builtin  */

	dcl     (addr, bool, byte, fixed)  builtin;
	dcl     (min, mod, rank, unspec)   builtin;

/*  include  */

%include kermit_mode_info;

%include kermit_dcls;

init:
     entry (infop, ec);

/**********************************************************************/
/*							*/
/*n	Name:	kermit_xfer_modes_$init		external	*/
/*i	Input:	infop					*/
/*f	Function: Calls modes_manager to initialize new-modes to 	*/
/*f		defaults.	 Sets modes to get first packet through.*/
/*o	Output:	ec					*/
/*							*/
/**********************************************************************/


	ec = 0;

/*  Set temporary modes to defaults  */
	temp_defaultsp = addr (Temp_defaults);
	call kermit_mode_mgr_$store (infop, Temporary, Store_all, temp_defaultsp, ec);
	if ec ^= 0 then return;

/*  SET user-specified modes  */
	call set_initial_modes (ec);
	return;


get_local_params:
     entry (infop, local_paramsp, local_params_lth, encoded_paramsp, encoded_params_lth, ec);

/**********************************************************************/
/*							*/
/*n 	Name:	transfer_modes_$get_local_params		*/
/*i 	Input:	infop					*/
/*f 	Function: Gets the local modes from the modes_info database	*/
/*f		and puts them in a character string using the	*/
/*f		format of the data field to the send_init packet.	*/
/*o 	Output:	local_paramsp, local_params_lth,encoded_paramsp,  */
/*o                 encoded_params_lth, ec                           	*/
/*							*/
/**********************************************************************/

	ec = 0;
	local_params_lth = N_params;

/* Select send-init values  */

	send_init_select (1) = I_maxl;
	send_init_select (2) = O_timeout;
	send_init_select (3) = I_n_pads;
	send_init_select (4) = I_pad_char;
	send_init_select (5) = I_eol_char;
	send_init_select (6) = O_quote_char;
	send_init_select (7) = G_eight_bit_char;
	send_init_select (8) = G_check_type;
	send_init_select (9) = G_repeat_char;
	send_init_select (10) = G_capabilities;
	send_init_select (11) = G_window;
	send_init_select (12) = I_max_lenx1;
	send_init_select (13) = I_max_lenx2;

	call kermit_mode_mgr_$retrieve (infop, Temporary, send_init_select, local_paramsp, ec);
	if ec ^= 0 then return;
	call get_encoded_params (local_paramsp, local_params_lth, encoded_paramsp, encoded_params_lth);
	return;

process_params: entry (infop, remote_paramsp, remote_params_lth, local_paramsp, ec);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_xfer_modes_$process_params	external	*/
/*i 	Input:	infop, remote_paramsp, remote_params_lth	*/
/*i		local_paramsp				*/
/*f 	Function: Sets the modes for file transfer.		*/
/*f 		Calls set_transfer_modes.			*/
/*o 	Output:	ec					*/
/*							*/
/**********************************************************************/

	ec = 0;
	reset_sw = False;
	call set_transfer_modes (infop, remote_paramsp, remote_params_lth, local_paramsp, reset_sw, ec);
	return;



check_params: entry (infop, remote_paramsp, remote_params_lth, local_paramsp, ec);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_xfer_modes_$check_params	external	*/
/*i 	Input:	infop, remote_paramsp, remote_params_lth	*/
/*i		local_paramsp				*/
/*f 	Function: Checks the modes for file transfer.		*/
/*f 		Calls set_transfer_modes.			*/
/*o 	Output:	ec					*/
/*							*/
/**********************************************************************/

	ec = 0;
	reset_sw = True;
	call set_transfer_modes (infop, remote_paramsp, remote_params_lth, local_paramsp, reset_sw, ec);
	return;

get_encoded_params: proc (local_paramsp, local_params_lth, encoded_paramsp, encoded_params_lth);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_xfer_modes_$get_encoded_params	internal	*/
/*i 	Input:	local_paramsp, local_params_lth                   */
/*f 	Function: Encodes data for Send-Init packet		*/
/*o 	Output:	encoded_paramsp, encoded_params_lth               */
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     encoded_params_lth	 fixed bin (21);
	dcl     encoded_paramsp	 ptr;
	dcl     local_params_lth	 fixed bin (21);
	dcl     local_paramsp	 ptr;


/*  automatic  */

	dcl     idx		 fixed bin;

/*  based  */


	dcl     e_params		 (1:1) fixed bin (8) unal based (encoded_paramsp);
	dcl     l_params		 (1:1) fixed bin (8) unal based (local_paramsp);


/*  encode the send-init data  */

	do idx = 1 to local_params_lth;
	     if Init_field (idx) = Char_coded then e_params (idx) = l_params (idx) + 32;
	     else if Init_field (idx) = Ctl_coded then unspec (e_params (idx)) =
		     bool (unspec (l_params (idx)), "100"b3, "0110"b);
	     else if Init_field (idx) = Binary_coded then
		e_params (idx) = l_params (idx) + 48;
	     else e_params (idx) = l_params (idx);
	end;
	encoded_params_lth = local_params_lth;

	return;
     end get_encoded_params;

set_initial_modes: proc (ec);

/**********************************************************************/
/*							*/
/*n	Name:	kermit_xfer_modes_$set_initial_modes	internal	*/
/*i	Input:	none					*/
/*f	Function:	Sets modes to get first packet through.		*/
/*o	Output:	ec					*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     ec		 fixed bin (35);

/*  automatic  */

	dcl     perm_modes		 (17) fixed bin (8) unal;
	dcl     perm_modesp		 ptr;
	dcl     perm_modes_select	 (17) fixed bin;
	dcl     temp_modes_select	 (16) fixed bin;

/*  constants  */

	dcl     Ebp_select		 fixed bin internal static options (constant) init (11);
	dcl     Line_byte_size_select	 fixed bin internal static options (constant) init (17);
	dcl     Eight_bit		 fixed bin (8) unal internal static options (constant) init (8);
	dcl     No		 char (1) unal internal static options (constant) init ("N");

	ec = 0;
	perm_modesp = addr (perm_modes);


	perm_modes_select (1) = Maxl;
	perm_modes_select (2) = Timeout;
	perm_modes_select (3) = N_pads;
	perm_modes_select (4) = Pad_char;
	perm_modes_select (5) = Eol_char;
	perm_modes_select (6) = Quote_char;
	perm_modes_select (7) = Check_type;
	perm_modes_select (8) = Start_char;
	perm_modes_select (9) = Parity;
	perm_modes_select (10) = Eol_char;		/*  again for output  */
	perm_modes_select (Ebp_select) = Eight_bit_char;
	perm_modes_select (12) = Repeat_char;
	perm_modes_select (13) = Capabilities;
	perm_modes_select (14) = Window_size;
	perm_modes_select (15) = Max_len_ext_1;
	perm_modes_select (16) = Max_len_ext_2;
	perm_modes_select (Line_byte_size_select) = Line_byte_size;

	temp_modes_select (1) = I_maxl;
	temp_modes_select (2) = O_timeout;
	temp_modes_select (3) = I_n_pads;
	temp_modes_select (4) = I_pad_char;
	temp_modes_select (5) = I_eol_char;
	temp_modes_select (6) = O_quote_char;
	temp_modes_select (7) = G_check_type;
	temp_modes_select (8) = G_start_char;
	temp_modes_select (9) = G_parity;
	temp_modes_select (10) = O_eol_char;
	temp_modes_select (11) = G_eight_bit_char;
	temp_modes_select (12) = G_repeat_char;
	temp_modes_select (13) = G_capabilities;
	temp_modes_select (14) = G_window;
	temp_modes_select (15) = I_max_lenx1;
	temp_modes_select (16) = I_max_lenx2;

	call kermit_mode_mgr_$retrieve (infop, Permanent, perm_modes_select, perm_modesp, ec);
	if ec ^= 0 then return;

/*  No eight_bit_prefixing if binary mode is set  */
	if perm_modes (Line_byte_size_select) = Eight_bit then perm_modes (Ebp_select) = rank (No);

	call kermit_mode_mgr_$store (infop, Temporary, temp_modes_select, perm_modesp, ec);


	return;
     end set_initial_modes;

set_transfer_modes: proc (infop, remote_paramsp, remote_lth, local_paramsp, reset_sw, ec);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_xfer_modes_$set_transfer_modes	internal	*/
/*i 	Input:	infop, remote_paramsp, remote_lth, local_paramsp	*/
/*i		reset_sw					*/
/*f 	Function: Sets the applicable values for the remote and 	*/
/*f 		local in new_modes.				*/
/*o 	Output:	ec					*/
/*l       Modified: 89-01-02  by S. Huen - Ignore invalid value and   */
/*l	          assume default value for the "maxl" field when    */
/*l	          using extended packet length. (pc_23) .           */
/*							*/
/**********************************************************************/


/*  parameters  */

	dcl     ec		 fixed bin (35);
	dcl     infop		 ptr;
	dcl     remote_paramsp	 ptr;
	dcl     local_paramsp	 ptr;
	dcl     remote_lth		 fixed bin (21);
	dcl     reset_sw		 bit (1);


/*  automatic  */
          dcl     tmp		 fixed bin (9);		
	dcl     (remote_len, local_len) fixed bin;		
	dcl     global_modes	 (7) char (1) unal;
	dcl     global_modesp	 ptr;
	dcl     01 modes_select	 aligned,
		02 remote		 (6) fixed bin,
		02 global		 (7) fixed bin;
	dcl     old_modes		 (N_params) char (1);
	dcl     old_modesp		 ptr;
	dcl     r_paramsp		 ptr;
	dcl     remote_params	 (remote_lth) char (1) unal;

/*  based  */

	dcl     local_params	 (N_params) char (1) based (local_paramsp) unal;
	dcl     old_modes_select	 (N_params) fixed bin based (addr (modes_select)) aligned;

/*  constants  */

	dcl     Chkt		 fixed bin (8) internal static options (constant) init (8);
	dcl     Default_8bit_prefix	 char (1) internal static options (constant) init ("&");
	dcl     Qbin		 fixed bin (8) internal static options (constant) init (7);
	dcl     Rept		 fixed bin (8) internal static options (constant) init (9);
	dcl     Capas		 fixed bin (8) internal static options (constant) init (10);
	dcl     Max_len_ext		 fixed bin (8) internal static options (constant) init (13);
	dcl     Yes		 char (1) internal static options (constant) init ("Y");



	ec = 0;
	r_paramsp = addr (remote_params);

/*  Specify modes to be set by initialization packet  */

	modes_select.remote (1) = O_maxl;
	modes_select.remote (2) = I_timeout;
	modes_select.remote (3) = O_n_pads;
	modes_select.remote (4) = O_pad_char;
	modes_select.remote (5) = O_eol_char;
	modes_select.remote (6) = I_quote_char;

	modes_select.global (1) = G_eight_bit_char;
	modes_select.global (2) = G_check_type;
	modes_select.global (3) = G_repeat_char;
	modes_select.global (4) = G_capabilities;
	modes_select.global (5) = G_window;
	modes_select.global (6) = O_max_lenx1;
	modes_select.global (7) = O_max_lenx2;

/*  Get the old modes  */
	old_modesp = addr (old_modes);
	call kermit_mode_mgr_$retrieve (infop, Temporary, old_modes_select, old_modesp, ec);

/*  Decode the remote initialization parameters  */
	call decode_params (infop, remote_paramsp, r_paramsp, remote_lth);


/*  set global modes (same for input and output), but dependent on both systems  */
/*  8-bit quoting prefix  */
	if remote_lth < Qbin then unspec (global_modes (1)) = unspec (Temp_defaults.qbin);
	else do;
		if remote_params (Qbin) = Yes & local_params (Qbin) = Yes then global_modes (1)
			= Default_8bit_prefix;
		else if remote_params (Qbin) = Yes then global_modes (1) = local_params (Qbin);
		else if local_params (Qbin) = Yes then global_modes (1) = remote_params (Qbin);
		else if local_params (Qbin) ^= remote_params (Qbin) then unspec (global_modes (1)) = unspec (Temp_defaults.qbin);
		else if local_params (Qbin) = remote_params (Qbin) then global_modes (1) = local_params (Qbin);
	     end;

/*  Error detecting code  */
	if remote_lth < Chkt | local_params (Chkt) ^= remote_params (Chkt)
	then unspec (global_modes (2)) = unspec (Temp_defaults.chkt);
	else global_modes (2) = local_params (Chkt);

/*  Repeat prefix  */
	if remote_lth < Rept | local_params (Rept) ^= remote_params (Rept)
	then unspec (global_modes (3)) = unspec (Temp_defaults.rept);
	else global_modes (3) = local_params (Rept);

/* Capabilities */
	if remote_lth < Capas
	     then unspec (global_modes (4)) = "0"b;
	else unspec (global_modes (4))
	     = unspec (local_params (Capas)) & unspec (remote_params (Capas));
/* Window */
	global_modes (5) = " ";

/* Max extended packet length */
	if unspec (global_modes (4)) & Ext_Headers
	     then do;
	     /* some kermits leave invalid values for maxl, we don't use
	        maxl with ext_packets,  so ignore invalid value */
	     remote_params(1) = "^"; /* assume maxl is 94 when ext_packet */
	     
	     if remote_lth < Max_len_ext
	     then do;
	     global_modes (6) = "%"; /* the default is 500 for ext_packet */
	     global_modes (7) = "9";
	     end;
	     else do;
	     remote_len = rank (remote_params (12)) * 95
		+ rank (remote_params (13));
	     local_len = rank (local_params (12)) * 95
		+ rank (local_params (13));
	     remote_len = min (local_len, remote_len);
	     tmp = fixed (remote_len / 95);
	     global_modes (6) = byte (tmp);
	     global_modes (7) = byte (mod (remote_len, 95));
	     end;
	end;

/*  Store remote parameters  */
	call kermit_mode_mgr_$store (infop, Temporary, modes_select.remote, r_paramsp, ec);
	if ec ^= 0 then goto reset_modes;

/*  Store global parameters  */
	global_modesp = addr (global_modes);
	call kermit_mode_mgr_$store (infop, Temporary, modes_select.global, global_modesp, ec);

reset_modes:
	if reset_sw then
	     if ec=0 then call kermit_mode_mgr_$store (infop, Temporary, old_modes_select, old_modesp, ec);
	     else call kermit_mode_mgr_$store (infop, Temporary, old_modes_select, old_modesp, 0);
	return;
     end set_transfer_modes;

decode_params: proc (infop, datap, decoded_datap, n_params);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_xfer_modes_$decode_params	internal	*/
/*i 	Input:	infop, datap, decoded_datap        		*/
/*f 	Function: Decodes Send-Init data.			*/
/*o 	Output:	n_params					*/
/*							*/
/**********************************************************************/


/*  parameters  */

	dcl     datap		 ptr;
	dcl     decoded_datap	 ptr;
	dcl     infop		 ptr;
	dcl     n_params		 fixed bin (21);

/*  automatic  */

	dcl     idx		 fixed bin;

/*  based  */
	dcl     decoded_data	 (n_params) fixed bin (8) unal based (decoded_datap);
	dcl     packet_data		 (n_params) fixed bin (8) unal based (datap);


	do idx = 1 to n_params;
	     if Init_field (idx) = Char_coded then decoded_data (idx) = packet_data (idx) - 32;
	     else if Init_field (idx) = Ctl_coded then unspec (decoded_data (idx)) =
		     bool (unspec (packet_data (idx)), "100"b3, "0110"b);
	     else if Init_field (idx) = Binary_coded then
		decoded_data (idx) = packet_data (idx) - 48;
	     else decoded_data (idx) = packet_data (idx);
	end;

	return;
     end decode_params;

     end kermit_xfer_modes_;
