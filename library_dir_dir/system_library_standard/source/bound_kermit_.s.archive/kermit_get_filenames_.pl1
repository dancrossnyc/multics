/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
  2) change(89-01-02,Huen), approve(89-01-02,MCR8036), audit(89-01-25,Lee),
     install(89-03-01,MR12.3-1020):
     Fix kermit bug: PC_File_Transfer 24 - kermit is being changed to correctly
     handle links to multisegment files.
                                                   END HISTORY COMMENTS */


kermit_get_filenames_:
     proc (infop, argument, filenames_areap, reason, ec);


/**********************************************************************/
/*							*/
/*n	Name:	kermit_get_filenames_		internal	*/
/*i	Input:	argument, filenames_areap        		*/
/*f	Function: Gets the filenames and stores them in the 	*/
/*f		area pointed to filenames_areap.		*/
/*o	Output:	reason, ec				*/
/*							*/
/*l	Written:	84-10-23	by Maureen Mallmes			*/
/*l	Modified:	84-11-05	to add archive support		*/
/*l	Modified:	87-06-24	by Don Kozlowski - Support msf file 	*/
/*l			(kermit 17)                             */
/*l       Modified: 89-01-02  by S Huen - Handle links to multisegment*/
/*l                 file correctly. (pc_24)                           */
/*							*/
/**********************************************************************/

/*  constants  */

	dcl     All_match_star_name	 fixed bin internal static options (constant) init (2);
	dcl     Non_star_name	 fixed bin internal static options (constant) init (0);
	dcl     Star_name		 fixed bin internal static options (constant) init (1);

/*  parameters  */

	dcl     argument		 char (*);
	dcl     infop		 ptr;
	dcl     filenames_areap	 ptr;
	dcl     reason		 char (*);
	dcl     ec		 fixed bin (35);

/*  Automatic  */

	dcl     bit_count		 fixed bin (24);
	dcl     idx		 fixed binary;
	dcl     ename		 char (32);
	dcl     kermit_scip		 ptr;
	dcl     select_sw		 fixed binary (2);
	dcl     segp		 ptr;
	dcl     source_component	 char (32);
	dcl     source_dir		 character (168);
	dcl     source_ename	 character (32);
	dcl     source_stars	 fixed binary (35);
	dcl     system_area_ptr	 ptr;

/*  Based  */

	dcl     01 filenames	 like kermit_filenames based (filenames_areap);
	dcl     01 ki		 like kermit_info based (infop);

/*  Builtin  */

	dcl     (null, sum) builtin;

/*  Areas    */

	dcl     system_area		 area based (system_area_ptr);

/*  Externals  */

	dcl     error_table_$dirseg	 fixed bin (35) ext static;
	dcl     kermit_et_$archive_star
				 fixed bin (35) ext static;

/*  Procedures  */

	dcl     expand_pathname_$component
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (pointer);
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     initiate_file_$component
				 entry (char(*), char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl     pathname_$component	 entry (char (*), char (*), char (*)) returns (char (194));
	dcl     terminate_file_	 entry (ptr, fixed bin(24), bit(*), fixed bin(35));

/*  conditions  */

	dcl     cleanup		 condition;

/*  Include files  */
%include access_mode_values;

%include kermit_info;

%include kermit_transfer_info;

%include star_structures;

%include terminate_file;

	kermit_scip = ki.sci_ptr;
	select_sw = star_BRANCHES_ONLY;
	star_entry_ptr, star_names_ptr = null;

/*  Get the pathname  */
	call expand_pathname_$component (argument, source_dir, source_ename, source_component, ec);
	if ec ^= 0 then do;
	     reason = argument;
	     return;
	end;


	call check_star_name_$entry (source_ename, source_stars);
	if (source_stars ^= Non_star_name) & (source_stars ^= Star_name) & (source_stars ^= All_match_star_name)
	then do;
	     reason = pathname_$component (source_dir, source_ename, source_component);
	     ec = source_stars;
	     return;
	end;
	
	if source_stars = Non_star_name then do;	/* not a star name  */
		
		/* see if we can find the segment/component */
		
		call initiate_file_$component (source_dir, source_ename, source_component, R_ACCESS, segp, bit_count, ec);
		if ec = error_table_$dirseg & source_component = ""
		     then do;
		         call hcs_$status_minf (source_dir,
			    source_ename, (1), (0), bit_count , ec);
		         if bit_count ^= 0 then do;
			    call initiate_file_$component (
			         pathname_$component (source_dir, source_ename, ""),
			         "0", "", R_ACCESS, segp, bit_count, ec);
			    end;
		         else ec = error_table_$dirseg;
		     end;
		     if ec ^= 0 then do;
		     reason = pathname_$component (source_dir, source_ename, source_component);
		     return;
		end;
		
		/* clean up the address space */
		
	          if segp ^= null then
		     call terminate_file_ (segp, bit_count, TERM_FILE_TERM, ec);
		
/* Save the filename  */

		filenames.n_paths = filenames.n_paths + 1;
		filenames.pathname.directory (filenames.n_paths) = source_dir;
		filenames.pathname.entry_name (filenames.n_paths) = source_ename;
		filenames.pathname.component (filenames.n_paths) = source_component;
		return;
	     end;

	else do;					/*  get star names  */

		if source_component ^= "" then do;
		     ec = kermit_et_$archive_star;
		     reason = pathname_$component (source_dir, source_ename, source_component);
		     return;
		end;

		system_area_ptr = get_system_free_area_ ();
		on cleanup call filenames_cleanup;

		call hcs_$star_ (source_dir, source_ename, select_sw, system_area_ptr,
		     star_entry_count, star_entry_ptr, star_names_ptr, ec);
		if ec ^= 0 then do;
		     reason = pathname_$component (source_dir, source_ename, source_component);
		     return;
		end;


/*  Save the filenames  */
		do idx = 1 to star_entry_count;
		     ename = star_names (star_entries (idx).nindex);
		     filenames.n_paths = filenames.n_paths + 1;
		     filenames.pathname.directory (filenames.n_paths) = source_dir;
		     filenames.pathname.entry_name (filenames.n_paths) = ename;
		     filenames.pathname.component (filenames.n_paths) = "";
		end;
	     end;
	call filenames_cleanup;
	return;

/* cleanup star names area  */

filenames_cleanup:
     proc;

	if star_names_ptr ^= null
	then do;
		free star_names in (system_area);
		star_names_ptr = null;
	     end;

	if star_entry_ptr ^= null
	then do;
		free star_entries in (system_area);
		star_entry_ptr = null;
	     end;

	return;
     end filenames_cleanup;

     end kermit_get_filenames_;
