/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3,^indnoniterdo */
interpret_op_ptr_:
     proc (mcptr, a_sp, callp, op_name, frame_flag);

/* This procedure  checks to see if p points to pl1_operators_ or pl1_operators.
   If it does, the procedure tries to obtain the location of the transfer to the
   operator segment.  An effort is made to determine whether the given stack
   frame was in use at the time of the transfer.
   Coded by M. Weaver 26 June 1973 */
/* modified by M. Weaver 6 October 1973  to make use of new operator segdefs */
/* modified by M. Weaver 1/17/74  to handle operator call outs */
/* modified by J.M. Broughton on 26 June 1975 to handle trace operators and calls through entry vars */
/* modified by JMB on 8 July 1975 to handle basic operators */
/* Modified by R.J.C. Kissel in June 1977 to handle COBOL operators. */
/* Modified by S. Webber Oct 1977 to fix bugs in handling of cobol operators */
/* Modified by P. Krupp November 1977 to handle the ALM entry operator used by trace */
/* Modified by M. Weaver July 1981 to handle algol68_operators_ and remove code for pl1_operators (version 1) */
/* Modified by M. Weaver January 1982 to not activate linkage sections of non-pl1 operators */
/* Modified by M. Weaver October 1983 to handle pascal_operators_ and check for null condition pointer */
/* Changed to view stack_frame.return_ptr through RETURN_PTR_MASK 03/07/84 S. Herbst */


declare	(p, a_sp, mcptr, callp, rsp, return_ptr_copy)
			ptr;
declare	(p1, p2, p3, p4, p5)
			ptr;
declare	cobol_operators_ptr ptr;
declare	algol68_operators_ptr
			ptr;
declare	basic_operators_ptr ptr;
declare 	pascal_operators_ptr ptr;

declare	op_name		char (32) aligned;


declare	frame_flag	bit (1) aligned;
declare	opsegno		bit (18) aligned;
declare	sx		(0:7) bit (18) unaligned based;
declare	have_made_basic_search
			bit (1) aligned;
declare	real_condition_segno
			bit (18) aligned;

declare	(addr, addrel, baseno, baseptr, bin, null, ptr, rel, unspec)
			builtin;

declare	1 tra_inst	aligned based,
	  2 addr		bit (18) unaligned,
	  2 opcode	bit (10) unaligned,
	  2 junk		bit (8) unaligned;

declare	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));

declare	offset		fixed bin (18);
declare	code		fixed bin (35);
declare	(
	pl1_operators_$entry_operators,
	pl1_operators_$entry_operators_end,
	pl1_operators_$trace_entry_operators,
	pl1_operators_$trace_entry_operators_end,
	pl1_operators_$math_routines_,
	pl1_operators_$math_routines_end_,
	pl1_operators_$alm_operators_begin,
	pl1_operators_$alm_operators_end,
	pl1_operators_$alm_call,
	pl1_operators_$alm_push,
	pl1_operators_$alm_return,
	pl1_operators_$forward_call,
	pl1_operators_$var_call,
	pl1_operators_$alm_trace_operators_begin,
	pl1_operators_$alm_trace_operators_end
	)		fixed bin (35) external;

declare	(
	basic_operators_$end_basic_operators,
	basic_operators_$enter_proc,
	basic_operators_$end_entry_ops,
	basic_operators_$call_op_begin,
	basic_operators_$new_frame,
	basic_operators_$call_op_end,
	cobol_operators_$cobol_operators_,
	cobol_operators_$cobol_operators_end,
	algol68_operators_$algol68_operators_,
	algol68_operators_$end_operators,
	algol68_operators_$entry_operators_begin,
	algol68_operators_$entry_operators_end,
	pascal_operators_$pascal_operators_,
	pascal_operators_$pascal_operators_end
	)		fixed bin (35) external;

dcl	1 cobol_stack_frame aligned based (sp),
	  2 pad1		(1:64) bit (36),
	  2 return_to_main_ptr
			ptr;			/* actual cobol return pointer */

%include stack_frame;

/*  */
%include mc;

%include basic_operator_frame;

declare	bo_pt		pointer;



/*  */
	sp = a_sp;				/* initialize */
	callp = null;
	op_name = " ";
	frame_flag = "1"b;
	have_made_basic_search = "0"b;

/* be sure that given environment is usable */

	if mcptr ^= null
	then do;					/* had a fault */
	     scup = addr (mcptr -> mc.scu (0));
	     p = ptr (baseptr (bin (bin (scup -> scu.ppr.psr, 15), 18)), scup -> scu.ilc);
	end;
	else if sp ^= null
	then unspec (p) = unspec (sp -> stack_frame.return_ptr) & RETURN_PTR_MASK;
	else return;				/* have no environment to use */

	real_condition_segno = baseno (p);
	if real_condition_segno = baseno (null)		/* this is safer than p = null */
	then return;				/* believe it or not, this does sometimes happen */

/* see if we have pl1_operators_ */

	if real_condition_segno = baseno (addr (pl1_operators_$entry_operators))
	then do;

/* Assume all ops are bound together either
   with no other segs or at beginning
   of bound segment */

	     opsegno = baseno (addr (pl1_operators_$entry_operators));
	     p1 = addr (pl1_operators_$math_routines_end_);
						/* see if we can tell  where end of ops is */
	     if bin (rel (p), 18) > bin (rel (p1), 18)
	     then return;

	     op_name = "pl1_operators_";

	     if mcptr = null
	     then do;				/* assume p is ret_ptr */
		if sp -> stack_frame.entry_ptr ^= null	/* should be OK, but just in case.. */
		then if baseno (sp -> stack_frame.entry_ptr) ^= opsegno
		     then do;			/* see if frame belongs to an op */
			if sp -> stack_frame.operator_return_offset ^= "0"b
			then callp = ptr (sp -> stack_frame.entry_ptr, sp -> stack_frame.operator_return_offset);
			else callp = ptr (sp -> stack_frame.entry_ptr, addrel (sp, 8) -> sx (0));
			if rel (callp) ^= "0"b
			then callp = addrel (callp, -1);
						/* never return neg offset */
		     end;
		return;				/* in any case, that's all we can do */
	     end;

/* have machine conditions, assume p is ppr */

	     offset = bin (rel (p), 18);		/* use to find out what kind of operator we're in */

/* see if fault occurred in an entry operator */

	     if offset >= bin (addr (pl1_operators_$entry_operators) -> tra_inst.addr, 18)
	     then do;				/* have entry operator */
		p1 = addr (pl1_operators_$entry_operators_end);
		if offset <= bin (rel (p1), 18)
		then do;
		     callp = addrel (mcptr -> mc.prs (2), -1);
						/* transfer was by tsp2 inst */
		     frame_flag = "0"b;		/* we were creating new frame, probably not completed */
		     return;
		end;
	     end;

	     if offset >= bin (addr (pl1_operators_$trace_entry_operators) -> tra_inst.addr, 18)
	     then do;
		p1 = addr (pl1_operators_$trace_entry_operators_end);
		if offset <= bin (rel (p1), 18)
		then do;
		     callp = addrel (mcptr -> mc.prs (2), -1);
		     frame_flag = "0"b;
		     return;
		end;
	     end;

/* check to see if fault frame is same as given frame;
   in any case, use fault frame */

	     rsp = mcptr -> mc.prs (6);		/* pick up sp from mc */
	     if sp ^= null
	     then rsp = ptr (sp, rel (rsp));		/* in case we are working on dead stack */
	     if rsp ^= sp
	     then frame_flag = "0"b;			/* different frame */

/* see if we were in an alm operator */

	     p1 = addr (pl1_operators_$alm_operators_begin);
	     p2 = addr (pl1_operators_$alm_operators_end);
	     if (offset >= bin (rel (p1), 18)) & (offset <= bin (rel (p2), 18))
	     then do;				/* find out which alm operator */
		p3 = addr (pl1_operators_$alm_call);
		p4 = addr (pl1_operators_$alm_push);
		if (offset >= bin (rel (p3), 18)) & (offset < bin (rel (p4), 18))
		then do;				/* alm call */
		     callp = addrel (mcptr -> mc.prs (4), -1);
		     return;
		end;
		p5 = addr (pl1_operators_$alm_return);
		if (offset >= bin (rel (p4), 18)) & (offset < bin (rel (p5), 18))
		then do;				/* alm push or entry */
		     callp = addrel (mcptr -> mc.prs (2), -1);
		     frame_flag = "0"b;		/* were working on new frame */
		     return;
		end;
		else return;			/* must have been in a return op; can do nothing */
	     end;

/* see if we were in the alm trace entry operator */

	     p1 = addr (pl1_operators_$alm_trace_operators_begin);
	     p2 = addr (pl1_operators_$alm_trace_operators_end);
	     if (offset >= bin (rel (p1), 18)) & (offset <= bin (rel (p2), 18))
	     then do;
		callp = addrel (mcptr -> mc.prs (2), -1);
		frame_flag = "0"b;			/* were working on a new frame */
		return;
	     end;

/* see if fault occurred in math routines */

	     p1 = addr (pl1_operators_$math_routines_);
	     if offset > bin (rel (p1), 18)
	     then do;
		callp = addrel (mcptr -> mc.prs (3), -1);
		if baseno (callp) = basic_operators_segno ()
		then do;				/* basic programs transfer to math operators from basic operators
						   and store return_pt in temp3 when they do */

		     unspec (p2) = unspec (sp -> d_basic_operators_frame.d_temp (3));
		     callp = addrel (p2, -1);
		end;
		return;
	     end;

/* see if we were in process of making a call */


check_call:
	     unspec (return_ptr_copy) = unspec (rsp -> stack_frame.return_ptr) & RETURN_PTR_MASK;

	     if p = addr (pl1_operators_$forward_call)
	     then callp = addrel (return_ptr_copy, -1);
						/* were making a call */

	     else if p = addr (pl1_operators_$var_call)
	     then callp = addrel (return_ptr_copy, -1);
						/* calling int proc or entry variable */

	     else if baseno (rsp -> stack_frame.entry_ptr) = opsegno
	     then ;				/* op had own frame */

/* call offset was stored either in x0 or at sp|37;
   can assume entry_ptr is good */

	     else if rsp -> stack_frame.operator_return_offset
	     then callp = ptr (rsp -> stack_frame.entry_ptr, bin (rsp -> stack_frame.operator_return_offset, 18) - 1);

	     else callp = ptr (rsp -> stack_frame.entry_ptr, bin (mcptr -> mc.regs.x (0), 18) - 1);

	     return;

	end;					/* done with pl1_operators_ */


	else if real_condition_segno = cobol_operators_segno ()
	then do;
	     if (rel (p) >= rel (addr (cobol_operators_$cobol_operators_)))
		& (rel (p) <= rel (addr (cobol_operators_$cobol_operators_end)))
	     then do;

/* Must be a cobol program.  Cobol always sets the return pointer to
   point to a special return operator so we can no use this.  However,
   in general cobol puts a return pointer to the main program in
   the stack frame at location 64 ( called return_to_main_ptr), and
   in the future this will always be valid;  so we will use it here.		*/

		op_name = "cobol_operators_";
		callp = cobol_stack_frame.return_to_main_ptr;

		if rel (callp) > "0"b
		then callp = addrel (callp, -1);	/* never return a neg offset */

	     end;
	end;

/* check here for basic_operators_; assume that basic_operators_ is bound
   first in bound_basic_runtime_ */

	else if real_condition_segno = basic_operators_segno ()
	then do;
	     if rel (p) < rel (addr (basic_operators_$end_basic_operators))
	     then do;
		op_name = "basic_operators_";

/* the offset of the operator return location is generally in x7;
   first take care of some special cases:  here look for part of entry
   sequence -- program has not yet been entered, but assume that
   we were in entry sequence. */

		p1 = addr (basic_operators_$enter_proc);
		p2 = addr (basic_operators_$end_entry_ops);
		if (rel (p1) <= rel (p)) & (rel (p) < rel (p2))
		then do;
		     if mcptr ^= null ()
		     then do;
			callp = addrel (mcptr -> mc.prs (2), 2);
						/* pr2 probably -> eax7 in entry code */
		     end;
		     return;
		end;

/* now check for case where we are calling another program,
   and before frame for program is created  -- cannot tell where we came
   from as x7 has been smashed, so use entry pointer of caller */

		p1 = addr (basic_operators_$call_op_begin);
		p2 = addr (basic_operators_$new_frame);
		if (rel (p1) <= rel (p)) & (rel (p) < rel (p2))
		then do;
		     if mcptr ^= null ()
		     then callp = sp -> stack_frame.entry_ptr;
		     return;
		end;

/* last special case: calling another basic program, and frame for the program
   has been pushed, use entry pointer in pr2 as location.  In this section
   pr2 -> location after tsp2, what addr of tsp2 */

		p1 = addr (basic_operators_$call_op_end);
		if (rel (p2) <= rel (p)) & (rel (p) < rel (p1))
		then do;
		     if mcptr ^= null ()
		     then callp = addrel (mcptr -> mc.prs (2), -1);
		     return;
		end;

/* try to get address from x7 */

		if mcptr ^= null ()
		then callp = addrel (ptr (sp -> stack_frame.entry_ptr, mcptr -> mc.regs.x (7)), -1);
		else do;				/* no fault, assume called out */
		     unspec (p1) = unspec (sp -> d_basic_operators_frame.d_temp (3));
						/* return pt */
		     do while (rel (p1) ^= (18)"0"b);	/* search for tsx7 to call op */
			p1 = addrel (p1, -1);
			if p1 -> tra_inst.opcode = "1110001110"b
			then do;
			     callp = p1;
			     return;
			end;
		     end;
		end;
		return;
	     end;

	end;

	else if real_condition_segno = algol68_operators_segno ()
	then do;
	     if (rel (p) >= rel (addr (algol68_operators_$algol68_operators_)))
		& (rel (p) <= rel (addr (algol68_operators_$end_operators)))
	     then do;
		op_name = "algol68_operators_";

/* first see if we are in an entry operator */

		p1 = addr (algol68_operators_$entry_operators_begin);
		p2 = addr (algol68_operators_$entry_operators_end);
		if (rel (p1) <= rel (p)) & (rel (p) <= rel (p2))
		then do;				/* in entry op; transferred by tsp2 */
		     if mcptr ^= null ()
		     then callp = addrel (mcptr -> mc.prs (2), -1);
		     return;
		end;

/* otherwise assume that transfer was by tsx2 */

		if mcptr ^= null ()
		then callp = ptr (sp -> stack_frame.entry_ptr, bin (mcptr -> mc.regs.x (2), 18) - 1);
	     end;
	end;

	else if real_condition_segno = pascal_operators_segno ()
	then do;
	     if (rel (p) >= rel (addr (pascal_operators_$pascal_operators_)))
		& (rel (p) <= rel (addr (pascal_operators_$pascal_operators_end)))
	     then do;
		op_name = "pascal_operators_";
		if mcptr ^= null ()			/* all xfers to pascal ops are by tsp3 */
		then callp = addrel (mcptr -> mc.prs (3), -1);
	     end;
	end;


	return;




/* This procedure is used to get a pointer to the end of basic_operators_.  It calls hcs_$make_ptr
   to avoid a linkage fault if basic is not at the current installation (it is unbundled).  This routine
   should be called before any other references are made to basic operators.
   This program will not cause basic_operators_' linkage section to be combined. */

basic_operators_segno:
     procedure () returns (bit (18) aligned);

	if ^have_made_basic_search
	then do;
	     call hcs_$make_ptr (null (), "basic_operators_", "", basic_operators_ptr, code);
	     have_made_basic_search = "1"b;
	end;

	return (baseno (basic_operators_ptr));

     end basic_operators_segno;

cobol_operators_segno:
     proc () returns (bit (18) aligned);

	call hcs_$make_ptr (null (), "cobol_operators_", "", cobol_operators_ptr, code);


	return (baseno (cobol_operators_ptr));


     end cobol_operators_segno;


algol68_operators_segno:
     proc () returns (bit (18) aligned);


	call hcs_$make_ptr (null (), "algol68_operators_", "", algol68_operators_ptr, code);

	return (baseno (algol68_operators_ptr));

     end algol68_operators_segno;


pascal_operators_segno:
     proc () returns (bit (18) aligned);

	call hcs_$make_ptr (null (), "pascal_operators_", "", pascal_operators_ptr, code);

	return (baseno (pascal_operators_ptr));

     end pascal_operators_segno;


     end interpret_op_ptr_;
