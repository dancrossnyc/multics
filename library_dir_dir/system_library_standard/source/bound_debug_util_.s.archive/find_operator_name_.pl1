/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style3,^indnoniterdo */
find_operator_name_:
     proc (tname, callp, op_name);

/* This procedure is given a pointer to an instruction transferring to pl1_operators_ (or cobol_operators_, etc.)
   and returns the name of the operator being referenced.

	coded by M. Weaver 11 July 1973
*/
/* Modified by M. Weaver 1/12/74 for 10-bit opcodes */
/* Modified by S.E. Barr 7/76 to remove version I operator decoding */
/* Modified: 5-4-77 by SHW for more general operator name segments */
/* Modified 7/81 by M. Weaver for algol68 and to call hcs_$make_ptr */
/* Modified 5/82 by M. Weaver to fix bug in above change */
/* Modified 9/82 by JM Athane for pascal compiler and bug fix */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

declare	tname		char (*);			/* name of translator or operator segment */
declare	(callp, nptr, linkp, entryp)
			ptr;

declare	(op_index, offset, nsize, i)
			fixed bin;
declare	code		fixed bin (35);

declare	op_name		char (32) aligned;
declare	onp		ptr;
declare	name		char (nsize) based (nptr) aligned;

declare	word		bit (36) aligned based,
	masked_word	bit (36) aligned;

dcl	(
	mask		init ("700000777777"b3),
	tsx0_ap		init ("000000700100"b3),	/* tsx0 pr0|0 */
	tsp2_bp		init ("200000272100"b3),	/* tsp2 pr2|0 */
	tra_ap		init ("000000710100"b3),	/* tra pr0|0 */
	tsp3_ap		init ("000000273100"b3),	/* tsp3 pr0|0 */
	tsp3_lp		init ("400000273100"b3)	/* tsp3 pr4|0 */
	)		bit (36) aligned static;

declare	(
	tsx0		init ("1110000000"b),
	tsp2		init ("0101110100"b),
	tra		init ("1110010000"b),
	tsp3		init ("0101110110"b),
	tsp4		init ("1101110000"b)
	)		bit (10) aligned;


dcl	other_language_names
			(4) char (8) varying static options (constant) init ("cobol", "basic", "pascal", "algol68");
dcl	other_language_xfer_instruction
			(4) bit (36) aligned static options (constant) init ("000000700100"b3,
						/* tsx0 pr0|0 */
			"000000707100"b3,		/* tsx7 pr0|0 */
			"000000273100"b3,		/* tsp3 pr0|0 */
			"000000702100"b3) /* tsx2 */;
dcl	other_language_masks
			(4) bit (36) aligned static options (constant)
			init ("700000777777"b3, "700000777777"b3, "700000777777"b3, "000000777777"b3);

dcl	pl1_operator_names_$pl1_operator_names_
			ext;

%include operator_names;

%include interpret_link_info;
declare	interpret_link_	entry (ptr, ptr, fixed bin (35));
declare	get_operator_names_ptr_
			entry (char (*), ptr);
declare	get_link_ptr_	entry (ptr, ptr, ptr);
declare	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));

declare	(addr, bin, hbound, lbound, null, ptr, rel, substr)
			builtin;

declare	1 inst		aligned based,		/* template for instruction word */
	  2 base		bit (3) unal,
	  2 address	bit (15) unal,
	  2 opcode	bit (10) unal,
	  2 junk1		bit (1) unal,
	  2 base_flag	bit (1) unal,
	  2 junk2		bit (6) unal;

declare	1 name_pair	aligned based,		/* template for word in operator name table */
	  2 rel_ptr	bit (18) unal,
	  2 size		fixed bin (17) unal;

dcl	1 auto_interpret_link_info
			aligned like interpret_link_info;


/**/
%include stack_header;

/**/

	op_name = "";				/* initialize output arg */
	call get_operator_names_ptr_ (tname, onp);	/* map translator name into appropriate pointer */
	masked_word = callp -> word & mask;

	offset = bin (callp -> inst.address, 15);	/* get offset in op transfer vector */
	if offset > 16384
	then offset = offset - 32768;

	if onp = addr (pl1_operator_names_$pl1_operator_names_)
	then do;

	     if masked_word = tsp3_lp
	     then do;				/* xfer to math routines via link */
		call get_link_ptr_ (callp, linkp, entryp);
						/* get ptr to link */
		if linkp = null
		then return;			/* can't find name */

		auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

		call interpret_link_ (addr (auto_interpret_link_info), linkp, code);
		if code = 0
		then op_name = substr (auto_interpret_link_info.entry_point_name, 2);
		return;
	     end;

	     if masked_word ^= tsx0_ap
	     then if masked_word ^= tsp3_ap
		then if masked_word ^= tsp2_bp
		     then if masked_word ^= tra_ap
			then go to try_alm_ops;	/* not tsx0 pr0|k or tsp2 pr2|k or tsp3 pr0|k */

	     call standard_operator_names;

	end;

	else if onp = null
	then do;					/* try alm */
try_alm_ops:
	     sb = ptr (addr (nptr), 0);		/* get ptr to stack header */
	     if ^((callp -> inst.base_flag) & (callp -> inst.base = "111"b))
	     then return;				/* doesn't reference stack header */
	     if callp -> inst.opcode = tsp4
	     then do;
		if "000"b || callp -> inst.address = rel (addr (sb -> stack_header.call_op_ptr))
		then op_name = "alm_call";
	     end;
	     else if callp -> inst.opcode = tsp2
	     then do;
		if "000"b || callp -> inst.address = rel (addr (sb -> stack_header.push_op_ptr))
		then op_name = "alm_push";
		else if "000"b || callp -> inst.address = rel (addr (sb -> stack_header.entry_op_ptr))
		then op_name = "alm_entry";
	     end;
	     else if callp -> inst.opcode = tra
	     then do;
		if "000"b || callp -> inst.address = rel (addr (sb -> stack_header.return_op_ptr))
		then op_name = "alm_return";
		else if "000"b || callp -> inst.address = rel (addr (sb -> stack_header.return_no_pop_op_ptr))
		then op_name = "alm_return_no_pop";
	     end;
	     else return;
	end;

	else do i = lbound (other_language_names, 1) to hbound (other_language_names, 1);

		if onp = operator_names_ptr (other_language_names (i))
		then do;
		     if (callp -> word & other_language_masks (i)) = other_language_xfer_instruction (i)
		     then call standard_operator_names;
		     return;
		end;
	     end;

	return;					/* unknown operator seg */

operator_names_ptr:
     proc (language_name) returns (ptr);

declare	language_name	char (8) varying;
declare	op_names_segname	char (24);
declare	op_names_ptr	ptr;

	op_names_segname = language_name || "_operator_names_";
	call hcs_$make_ptr (onp, op_names_segname, op_names_segname, op_names_ptr, code);

	return (op_names_ptr);

     end;


standard_operator_names:
     proc;

	op_names_pt = onp;
	if offset >= operator_names.first & offset <= operator_names.last
	then do;
	     nptr = addr (operator_names.names (offset));
	     goto common;
	end;

	else if offset >= operator_names.first_special & offset <= operator_names.last_special
	then do;
	     do op_index = 1 to operator_names.number_special;
		if operator_names.special (op_index).offset = offset
		then do;
		     nptr = addr (operator_names.special (op_index).namep);
		     goto common;
		end;
	     end;
	end;

	return;

common:
	nsize = nptr -> name_pair.size;		/* get size of name */
	nptr = ptr (nptr, nptr -> name_pair.rel_ptr);

	op_name = name;				/* copy name into arg */

	return;
     end;

     end find_operator_name_;
