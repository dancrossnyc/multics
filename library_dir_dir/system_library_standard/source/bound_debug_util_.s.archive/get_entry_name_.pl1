/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1989           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-11-07,Lee), approve(88-12-05,MCR8030), audit(88-12-23,Flegel),
     install(89-01-24,MR12.3-1012):
     phx20737 (Commands 573) - Fix a bug which prevents the entry name from
     being returned when passed an entry point at location 0 of a non-PL1 or
     non-BASIC object segment.
                                                   END HISTORY COMMENTS */


/* format: style1,^indattr,declareind10 */
get_entry_name_: proc (entry_ptr, ename, segnum, comp, code);

/* If entry_ptr points to an entry sequence or to a segdef, this procedure will
   do its best to return the associated name.
   If entry_ptr points to an entry sequence in the combined linkage section, the segment number
   returned will be that of the owner of the entry.

   coded 7 June 1973 by M. Weaver
   modified 26 June 1975 by J.M. Broughton to handle begin block entry
   modified 31 July 1975 by M. Weaver to call find_nonobject_info_
*/

	declare	entry_ptr ptr;			/* ptr to entry sequence (input) */
	declare	ename char (*);			/* name associated with entry seqence (output) */
	declare	segnum fixed bin (18);		/* segment number of text */
	declare	code fixed bin (35);		/* status code (output) */
	declare	comp char (8) aligned;		/* if ^blank, name of entry's compiler */

	declare	(addr, addrel, baseno, bin, divide, hbound, index, null, ptr, rel, string) builtin;

	declare	(i, j, size, based_fixed based, lang, adjust, section) fixed bin;
	declare	adj_offset fixed bin (18);
	declare	type fixed bin (2);
	declare	mode fixed bin (5);
	declare	bitcnt fixed bin (24);
	declare	first_seq (4) fixed bin init (1, 3, 3, 5);
	declare	last_seq (4) fixed bin init (2, 4, 4, 5);
	declare	seq_lng (5) fixed bin init (3, 6, 3, 3, 3);

	declare	(error_table_$name_not_found, error_table_$moderr, error_table_$dirseg,
		error_table_$invalidsegno, error_table_$begin_block) ext fixed bin (35);

	declare	known_names char (32) aligned init ("pl1     v2pl1   PL/I    basic   ");
	declare	name char (size) based (namep);
	declare	section_name char (8) aligned;

	declare	std_sw bit (1) aligned;
	declare	op_seq (5, 6) bit (10) unaligned int static init (
		     "1100101110"b /* eax7 */, "1100101100"b /* eax6 */, "0101110100"b /* tsp2 */, "0"b, "0"b, "0"b,
		     "1100101110"b /* eax7 */, "1100101100"b /* eax6 */, "0100111010"b /* lda */,
		     "0111010100"b /*epp2 */, "0111110000"b /* epsp4 */, "0101110100"b /* tsp2 */,
		     "1100101110"b /* eax7 */, "0111010100"b /* epp2 */, "0101110100"b /* tsp2 */, "0"b, "0"b, "0"b,
		     "1100101110"b /* eax7 */, "1110000000"b /* tsx0 */, "0101110100"b /* tsp2 */, "0"b, "0"b, "0"b,
		     "1100101110"b /* eax7 */, "0111010100"b /* epp2 */, "0101110100"b /* tsp2 */, "0"b, "0"b, "0"b);

	declare	begin_block_entries (2) bit (36) aligned initial
		     ("000000000110001100010111010001000000"b, /* tsp2 pr0|614 */
		     "000000001011111110010111010001000000"b /* tsp2 pr0|1376 */);

	declare	(segptr, np, namep, def_ptr) ptr;

	declare	hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	declare	hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
	declare	object_info_$display ext entry (ptr, fixed bin (24), ptr, fixed bin (35));
	declare	component_info_$offset ext entry (ptr, fixed bin (18), ptr, fixed bin (35));
	declare	find_nonobject_info_ entry (ptr, char (*), fixed bin (18), char (8) aligned,
		     fixed bin (18), fixed bin (35));
	declare	get_def_name_ ext entry (ptr, ptr, bit (18), fixed bin, char (*), fixed bin (35));
	declare	condition_ entry (char (*), entry);

	declare	1 half aligned based,
		  2 (left, right) bit (18) unaligned;

	declare	1 acc aligned based,		/* overlay for acc string */
		  2 count fixed bin (8) unaligned,
		  2 string char (31) unaligned;	/* string will never be used as string */

	declare	1 inst_seq (6) aligned based,		/* template for 6180 instruction */
		  2 address bit (18) unaligned,
		  2 opcode bit (10) unaligned,
		  2 mod bit (8) unaligned;

/* declaration of non class 3 definition (new format) */
%include definition;

/**/
%include object_info;

	declare	1 oi structure aligned like object_info;
						/**/
%include component_info;
/**/

/* initialize some stuff */

	lang = 0;
	comp = " ";
	std_sw = "0"b;
	ename = " ";
	adjust = 1;				/* assume standard object or v2pl1 */

	call condition_ ("any_other", catch);
	segptr = ptr (entry_ptr, 0);			/* get ptr to base of seg */
	segnum = bin (baseno (entry_ptr), 18);		/* get segment number of input ptr */
	section = -1;				/* in case we can't tell if it's text */
	def_ptr = segptr;				/* till we get something better */
	call hcs_$status_mins (segptr, type, bitcnt, code); /* get type and bitcnt */
	if code ^= 0
	then if code = error_table_$invalidsegno	/* probably hardcore */
	     then go to search_defs;
	     else return;
	if type = 2 then do;
		code = error_table_$dirseg;		/* dirs don't have entry points */
		return;
	     end;
	call hcs_$fs_get_mode (segptr, mode, code);	/* get mode wrt validation level */
	if code ^= 0 then return;			/* don't see how this could happen */
	if mode < 8				/* no read access */
	then if mode < 4				/* no execute access */
	     then do;				/* can't see defs (probably none anyway */
		     code = error_table_$moderr;
		     return;
		end;
	     else go to search_defs;			/* probably a gate; read defs in ro */

	oi.version_number = object_info_version_2;
	call object_info_$display (segptr, bitcnt, addr (oi), code); /* may need def ptr */
	if code ^= 0 then do;			/* not object seg; see if it's a linkage section */
		call find_nonobject_info_ (entry_ptr, ename, segnum, section_name, adj_offset, code);
		return;				/* everything done that can be */
	     end;
	def_ptr = oi.defp;				/* now we have ptr to actual defs */

	i = bin (rel (entry_ptr), 18);		/* get offset of input ptr */
	j = bin (rel (oi.textp), 18);			/* get offset of beginning of text */
	if (i >= j) & (i <= j + oi.tlng) then section = 0;/* is text */
	else go to no_name;				/* not in text; can't be entry */

	if oi.compiler ^= "binder" then do;		/* this compiler generated all entries */
		std_sw = oi.format.standard;
		comp = oi.compiler;
	     end;
	else do;					/* consult the bind map for this component */
		call component_info_$offset (segptr, bin (rel (entry_ptr), 18), addr (ci), code);
		if code ^= 0 then go to no_name;
		std_sw = ci.standard;
		comp = ci.compiler;
	     end;

/* if language is familiar, determine if we have a valid entry sequence */

	lang = divide (index (known_names, comp) + 7, 8, 17, 0); /* see if it's pl1 */
	if lang = 0 then if std_sw then go to get_std_name; /* std obj seg */
	     else go to search_defs;			/* non-std obj; look for match in defs */

/* check for valid entry sequence; v1pl1, v2pl1, and basic are the only langs we know */

	do i = first_seq (lang) to last_seq (lang);	/* each lang may have several sequence types */
	     do j = 1 to seq_lng (i);			/* look only at relevant number */
		if entry_ptr -> inst_seq (j).opcode ^= op_seq (i, j) then go to try_next;
	     end;
	     go to valid_entry;			/* sequence matches */
try_next: end;

/* if lang is PL/I, then we will check if the entry is for a begin block */

	if (lang = 2) | (lang = 3) then do;
		do i = 1 to hbound (begin_block_entries, 1);
		     if string (entry_ptr -> inst_seq (2)) = begin_block_entries (i) then do;
			     code = error_table_$begin_block;
			     ename = "begin block";
			     return;
			end;
		end;
	     end;

no_name:	code = error_table_$name_not_found;
	return;

valid_entry: if lang = 1 then adjust = 3;		/* v1pl1 is different */

get_std_name:
	if i - adjust < 0 then go to search_defs;	/* RL: phx20737 - handle location 0 */
	np = addrel (entry_ptr, -adjust);		/* get ptr to size or rel ptr */
	if std_sw then do;				/* look for name in defs */
		if bin (np -> half.left, 18) > oi.dlng then go to search_defs; /* not in def section */
		namep = addrel (oi.defp, np -> half.left); /* get ptr to entry's def */
		if namep -> definition.value ^= rel (entry_ptr) then goto search_defs;
						/* be sure we have correct def */
		if bin (namep -> definition.symbol, 18) > oi.dlng then go to search_defs;
		namep = addrel (oi.defp, namep -> definition.symbol); /* get ptr to def name */
		size = namep -> acc.count;
		namep = addr (namep -> acc.string);
	     end;
	else do;					/* not standard object, but is pl1  */
		size = np -> based_fixed;		/* get name length in chars */
		if size > 256 then go to no_name;	/* somehow this isn't a name */
		namep = addrel (np, -divide (size + 3, 4, 17, 0)); /* name string is in text */
	     end;

	ename = name;				/* fill in return args */
	return;

search_defs:					/* non-standard object; look for def for this offset */
	call get_def_name_ (null, def_ptr, rel (entry_ptr), section, ename, code);

	return;

catch: proc (mcptr, condname, wcptr, infoptr, continue);

	declare	(mcptr, wcptr, infoptr) ptr;
	declare	condname char (*);
	declare	continue bit (1) aligned;

	if condname = "quit"
	     | condname = "alrm"
	     | condname = "cput"
	     | condname = "program_interrupt"
	     | condname = "finish"
	     | condname = "storage"
	     | condname = "mme2"
	then continue = "1"b;

	else if condname ^= "cleanup" then go to no_name; /* probably access fault;
						   in any case, forget it */
	return;
     end;

     end get_entry_name_;
