/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   Modified in July 1977 by R.J.C. Kissel to handle new data types.  When any_to_any_ is
   updated to handle all data types, all references to probe_assign_ should be changed to references
   to assign_ and probe_assign_ and probe_convert_ should be deleted.
   Modified 11 Apr 79 JRDavis for proper handling of unaligned dec  -use data_type_info_
   Modified 20 June 79 JRDavis to use assign_$computational_ instead of probe_assign_
   Modified 2 Feb 84 JRGray to use generic_decimal types and to remove call to numeric_to_ascii_
*/
arithmetic_to_ascii_: proc (p, type, packed, precision, scale, ans);

dcl  p ptr parameter,				/* input: to the arithmetic data to convert */
     type fixed bin parameter,			/* input: data type of the input: data */
     packed bit (1) aligned parameter,			/* input: is it packed? */
     precision fixed bin parameter,			/* input: precision of the data */
     scale fixed bin parameter,			/* input: scale factor (if fixed) */
     ans char (132) varying parameter;			/* output: ASCII rep of data */

dcl  01 generic_decimal_struc aligned based,
	02 exponent fixed bin(35) aligned,
	02 sign char(1) unaligned,
	02 mantissa char(k) unaligned;

dcl  01 number aligned based(addr(number_block)),		/* temp to convert all types to */
	02 (real, imaginary) like generic_decimal_struc aligned;

dcl  number_block bit(36 * 32) aligned;			/* storage for temporary */

dcl  k fixed bin;
dcl 1 src_str aligned like computational_data;
dcl 1 tar_str aligned like computational_data;
dcl  code fixed bin (35);

dcl  assign_$computational_ entry (ptr, ptr, fixed bin (35));
dcl (addr, ceil, char, copy, divide, hbound, length, ltrim, null, rtrim, substr) builtin;

	if type < 1 | type > hbound (data_type_info_$info, 1) /* bad data type */
	then do;
	     ans = "(bad data type)";
	     return;
	end;

	if ^data_type_info_$info (type).arithmetic	/* not arithmetic type */
	then do;
	     ans = "(not arithmetic type)";
	     return;
	end;

/* Get decimal precision corresponding to input
   Note: assign_$computational will take care of rounding/truncation */

	if precision < 1 then k = data_type_info_$max_decimal_precision;
	else if data_type_info_$info (type).decimal then k = precision;
	else k = ceil (divide (precision * 100, 332, 17, 0)) + 1;

/* convert to internal storage - complex generic dec */
	tar_str.address = addr (number_block);
	tar_str.data_type = cplx_flt_dec_generic_dtype;
	tar_str.flags = "0"b;
	tar_str.prec_or_length = k;
	tar_str.scale = 0;
	tar_str.picture_image_ptr = null ();		/* superfluous, but be safe */

	src_str.address = p;
	src_str.data_type = type;
	src_str.flags = "0"b;
	src_str.packed = packed;
	src_str.prec_or_length = precision;
	src_str.scale = scale;

	/* let assign_$computational_ do rounding/truncation */
	call assign_$computational_ (addr (tar_str), addr (src_str), code);

	ans = ltrim(simplify(addr(number.real), k), "+");
	if data_type_info_$info (type).complex		/* has complex part */
	then ans = ans || simplify (addr(number.imaginary), k) || "i";
	return;

/*	simplify returns a compact form of a generic number.
	Note: simplify leaves on the sign "+" or "-"	*/

simplify:	proc(NUMBER_ptr, precision) returns(char(72) varying);
dcl	(NUMBER_ptr, number_ptr) ptr;
dcl	01 number aligned based(number_ptr),
	  02 exponent fixed bin(35),
	  02 sign char(1) unaligned,
	  02 mantissa char(precision) unaligned;

dcl	mantissa char(72) varying;
dcl	exponent fixed bin(35);
dcl	(precision, digits) fixed bin;

	/*  force normalization  */
	number_ptr = NUMBER_ptr;
	mantissa = ltrim(number.mantissa, "0");
	if mantissa="" then return("+0");
	exponent = number.exponent + length(mantissa) -1;
	mantissa = rtrim(mantissa, "0");
	digits = length(mantissa);

	if 2-exponent > precision | exponent+1 > precision		/* exponential form */
	then return(sign || substr(mantissa, 1, 1) || rtrim("." || substr(mantissa, 2), ".")
		|| "e" || ltrim(char(exponent)) );

	/* use real form */
	if exponent < 0 then return(sign || "0." || copy("0", -exponent-1) || mantissa);
	if exponent+1 >= digits then return(sign || mantissa || copy("0", exponent-digits+1));
	return(sign || substr(mantissa, 1, exponent+1) || "." || substr(mantissa, exponent+2));
end simplify;

%include computational_data;
%include data_type_info_;
%include std_descriptor_types;
     end;
