/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

stack_frame_exit_:	proc(a_sp, mcptr, wcptr, co_flag, last_ptr, op_name, sitp);

/* This procedure  returns the address of the most recent location executed
   by the owner of the given stack frame.  The method is somewhat heuristic so a bit structure
   is returned indicating what the program thinks the situation is */
/* coded by M. Weaver 27 June 1973 */
/* modified by J.M. Broughton 26 June 1975 to handle being block entries */
/* Changed to copy stack_frame.return_ptr through RETURN_PTR_MASK 03/07/84 S. Herbst */


declare	(a_sp, mcptr, wcptr, last_ptr, callp, p, sitp) ptr;

declare	code fixed bin(35);

declare	op_name char(32) aligned;

declare	frame_flag bit(1) aligned;
declare	co_flag bit(1) unaligned;
declare	based_bit bit(36) aligned based;
declare	nsp pointer;
declare	i fixed bin;
declare	begin_block_entries (2) bit(36) aligned initial
	     (	"000000000110001100010111010001000000"b,  /* tsp2 pr0|614 */
		"000000001011111110010111010001000000"b   /* tsp2 pr0|1376 */   );

declare	(addr, addrel, bin, baseno, baseptr, fixed, hbound, null, ptr, rel, string, substr, unspec) builtin;
declare	interpret_op_ptr_ entry(ptr, ptr, ptr, char(32) aligned, bit(1) aligned);
declare	legal_f_ entry(ptr, fixed bin(35));
declare	compare_offsets_ entry(ptr, fixed bin(18), fixed bin(18), bit(1) aligned);

declare	1 situation aligned based(sitp),			/* describes what was found */
	  2 bad_frame bit(1) unal,
	  2 exists_ppr bit(1) unal,
	  2 ppr_is_owner bit(1) unal,
	  2 ppr_is_ops bit(1) unal,
	  2 caller_is_owner bit(1) unal,
	  2 entry_ptr_invalid bit(1) unal,
	  2 ret_ptr_is_ops bit(1) unal,
	  2 called_begin_block bit(1) unal,
	  2 pad bit(28) unal;

%include mc;

/**/
%include stack_frame;

%include stack_header;

/**/

%include its;
/**/
	last_ptr = null;
	op_name = " ";
	string (sitp -> situation) = (36)"0"b;			/* initialize all situation flags */

	/* see if we have a real stack frame */

	call legal_f_(a_sp, code);
	if code ^= 0 then do;			/* don't have a real frame */
	     bad_frame = "1"b;
	     return;
	end;

	sp = a_sp;

	/* find out if we have mc to look at */


	if (sp -> stack_frame.entry_ptr = null)
	| (addr(sp -> stack_frame.entry_ptr) -> its.its_mod ^= "100011"b)
	     then entry_ptr_invalid = "1"b;		/* want this to be set first */

	if co_flag then if wcptr ^= null then mcp = wcptr;	/* had left this ring with a fault */
		else mcp = null;			/* any mc for crawlout are for lower ring */
	else mcp = mcptr;
	if mcp = null then go to use_ret_ptr;		/* no mc to look at */
	else exists_ppr = "1"b;

	/* we do; see if ppr is pl1_operators_ */

	scup = addr(mcp -> mc.scu(0));

	p = ptr(baseptr(bin(bin(scup -> scu.ppr.psr, 15), 18)), scup -> scu.ilc);
						/* pick up ppr */

	call interpret_op_ptr_(mcp, sp, last_ptr, op_name, frame_flag);

	if last_ptr ^= null then do;			/* ppr was pl1 ops */
	     ppr_is_ops = "1"b;
	     if ^frame_flag then go to use_ret_ptr;	/* but it's not related to this frame */
	     caller_is_owner = "1"b;			/* ppr is related to this frame */
	     return;
	end;

	/* ppr ^= pl1_ops; see if it is owner of frame */

	if ^frame_flag then go to use_ret_ptr;		/* sp in mc doesn't match a_sp */

	if ^entry_ptr_invalid then do;
	     /* if we have an entry ptr, assume it points to owner */
	     if baseno(p) = baseno(sp -> stack_frame.entry_ptr)
	     then do;				/* same seg; see if same component */
		call compare_offsets_(ptr(p,0), bin(rel(p), 18), bin(rel(entry_ptr), 18),
		     frame_flag);
		if frame_flag then do;		/* is then same component */
		     ppr_is_owner = "1"b;
		     last_ptr = p;
		     return;
		end;
	     end;
	     go to use_ret_ptr;			/* ppr is not frame's owner */
	end;

	last_ptr = p;				/* can't tell; assume ppr is owner */
	return;


use_ret_ptr:	/* we're pretty sure that ret ptr accurately reflects the most recent use of the frame */


	/* When a begin block is entered, it does not set the return pointer. So if the
	   next frame belongs to a begin block, the return pointer will not reflect the
	   location at which the frame was exited. What we want is the last location
	   before the begin block. */

	nsp = ptr (sp, rel (sp -> stack_frame.next_sp));
	if (nsp -> stack_frame.entry_ptr ^= null) & (addr (nsp -> stack_frame.entry_ptr) -> its.its_mod = "100011"b)
	     then do i = 1 to hbound (begin_block_entries, 1);
		if addrel (nsp -> stack_frame.entry_ptr, 1) -> based_bit = begin_block_entries(i)
		     then do;
			called_begin_block = "1"b;
			ret_ptr_is_ops = "0"b;
			last_ptr = addrel (nsp -> stack_frame.entry_ptr, -1);
			return;
		     end;
	     end;

	call interpret_op_ptr_(null, sp, last_ptr, op_name, frame_flag);

	if last_ptr = null then do;				/* ptr can be used as id */
	     if addr(sp -> stack_frame.return_ptr) -> its.its_mod ^= "100011"b then do; /* not a ptr */
		if ^entry_ptr_invalid then last_ptr = sp -> stack_frame.entry_ptr;
		else last_ptr = null;			/* have no clue */
	     end;
	     else do;
		unspec (last_ptr) = unspec (sp -> stack_frame.return_ptr) & RETURN_PTR_MASK;
		if rel(last_ptr) ^= "0"b
		then last_ptr = addrel(last_ptr, -1);
	     end;
	end;

	else ret_ptr_is_ops = "1"b;			/* use caller of pl1 ops */


	return;

	end stack_frame_exit_;
