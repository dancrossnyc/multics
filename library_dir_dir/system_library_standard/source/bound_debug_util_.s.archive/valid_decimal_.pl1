/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

valid_decimal_: proc (P_dtype, P_dptr, P_prec) returns (bit (1));

/*  My contract: you give me the true dtype and precision of decimal data, and its address
   I will return true if  the data is completly valid for EIS use

   design and code by JRDavis Aug 78
   modified 12 Apr 79 to do 4bit decimal right, and use data_type_info_
   modified 31 Jan 84 by R. Gray to support generic types

*/

	dcl     (P_dtype		 fixed bin,	/* data type  of data */
	        P_dptr		 ptr,		/* to data to test */
	        P_prec		 fixed bin) parameter; /* declared precision of data */

	dcl     prec		 fixed bin init (P_prec), /* copy arg for efficiency */
	        dtype		 fixed bin init (P_dtype), /* ditto */
	        dptr		 ptr init (P_dptr), /* likewise */
	        sign_index		 fixed bin,	/* which char is sign char */
	        digit_index,			/* which is first of digits */
	        imag_index		 fixed bin,	/* where imag component begins */
	        data_char		 char (122) based (dptr), /* overlay for data */
	        (YES		 init ("1"b), NO init ("0"b)) bit (1) static options (constant);

	dcl     1 atr		 aligned like data_type_info_$info based (atrp); /* the atributes of our data type */
	dcl     atrp		 ptr;

	dcl     (abs, addr, lbound, hbound, substr, verify, index) builtin;

	dcl     validate_4bit_decimal_$sign entry (ptr, fixed bin) returns (bit (1) aligned),
	        validate_4bit_decimal_$digits entry (ptr, fixed bin, fixed bin) returns (bit (1) aligned);



	if prec < 0 | prec > data_type_info_$max_decimal_precision then return (NO);
	if dtype < 1 | dtype > hbound (data_type_info_$info, 1) then return (NO);

	atrp = addr (data_type_info_$info (dtype));	/* set up atr for convenience */

	if ^atr.computational | ^atr.arithmetic | ^atr.decimal /* not dec? yechh */
	then return (NO);

	if atr.packed_dec				/* 4bit decimal */
	then do;
		if atr.signed
		then do;
			if atr.trailing_sign
			then do;
				sign_index = prec;	/* is offset, not index per se */
				digit_index = 0;
			     end;
			else do;			/* leading sign, more familiar */
				sign_index = 0;
				digit_index = 1;
			     end;

			if ^validate_4bit_decimal_$sign (dptr, sign_index) then return (NO);
		     end;				/* signed */
		else digit_index = 0;

		if ^validate_4bit_decimal_$digits (dptr, digit_index, prec) then return (NO);

		if atr.complex then do;
			imag_index = prec + 1;
			if ^atr.fixed
			then imag_index = imag_index + 2; /* for exponent */
			if ^atr.digit_aligned	/* is byte aligned, may need pad */
			then if mod (imag_index, 2) = 1
			     then imag_index = imag_index + 1;

			if atr.overpunched
			then return (NO);		/* how did you get past the door? */
			else if ^validate_4bit_decimal_$sign (dptr, imag_index + sign_index) then return (NO);

			if ^validate_4bit_decimal_$digits (dptr, imag_index + digit_index, prec) then return (NO);
		     end;				/* testing imag part */


		return (YES);
	     end;					/* packed dec testing */

	else do;					/* 9bit decimal */

		if atr.signed
		then do;
			if atr.overpunched
			then do;
				if atr.trailing_sign
				then do;
					sign_index = prec;
					digit_index = 1;
				     end;
				else do;
					sign_index = 1;
					digit_index = 2;
				     end;

				if ^nine_bit_overpunched_sign_ok (substr (data_char, sign_index, 1)) then return (NO);
				if ^nine_bit_digit_ok (substr (data_char, digit_index, prec - 1)) then return (NO);

				if atr.complex	/* no idea how to validate this */
				then return (NO);
				return (YES);
			     end;			/* overpunched */
			else do;			/* regular signed 9 bit */
				if atr.generic
				then do;
					sign_index = 5;
					digit_index = 6;
				     end;
				else if atr.trailing_sign
				then do;
					sign_index = prec + 1;
					digit_index = 1;
				     end;
				else do;
					sign_index = 1;
					digit_index = 2;
				     end;

				if ^nine_bit_sign_ok (substr (data_char, sign_index, 1)) then return (NO);
			     end;			/* non-overpunched signed 9bit */
		     end;				/* signed */
		else digit_index = 1;		/* unsigned */

		if ^nine_bit_digit_ok (substr (data_char, digit_index, prec)) then return (NO);

		if atr.complex then do;
			imag_index = prec + 1;
			if atr.generic then imag_index = 4 * ceil(imag_index/4e0) +4; /* skip exponent word align */
			if ^atr.fixed then imag_index = imag_index + 1; /* skip exponent */
			if ^nine_bit_sign_ok (substr (data_char, imag_index + sign_index, 1)) then return (NO);

			if ^nine_bit_digit_ok (substr (data_char, imag_index + digit_index, prec)) then return (NO);
		     end;				/* checking imag part */

		return (YES);
	     end;					/* 9 bit decimal */

	return (NO);				/* should never get here */


nine_bit_sign_ok: proc (ch) returns (bit (1));
	dcl     ch		 char (1);
	return (index (data_type_info_$ninebit_sign_chars, ch) ^= 0); /* sign must be one of these */
     end nine_bit_sign_ok;

nine_bit_digit_ok: proc (chs) returns (bit (1));
	dcl     chs		 char (*);
	return (verify (chs, data_type_info_$ninebit_digit_chars) = 0); /* must all be valid digits */
     end nine_bit_digit_ok;

nine_bit_overpunched_sign_ok: proc (ch) returns (bit (1));
	dcl     ch		 char (1);
	return (index (data_type_info_$ninebit_overpunched_sign_chars, ch) ^= 0);
     end nine_bit_overpunched_sign_ok;
%include data_type_info_;

     end /* valid_decimal_ */;
