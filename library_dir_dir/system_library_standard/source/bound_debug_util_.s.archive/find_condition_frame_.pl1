/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

find_condition_frame_:	proc(startp) returns(ptr);

/* This procedure returns a pointer to the stack frame associated with the most recent
   condition to occur before the stack frame pointer to be startp.
   It is written to work with an arbitrary stack segment.

	coded by M. Weaver 20 June 1973 */

/* Changed to view stack_frame.return_ptr through RETURN_PTR_MASK 03/07/84 S. Herbst */

declare	startp ptr;
declare	sig_caller_count fixed bin;
declare	cu_$stack_frame_ptr entry(ptr);
declare	(null, ptr, rel) builtin;

%include stack_frame;


%include stack_header;

/**/
	/* get starting pointer if not provided */

	if startp = null then call cu_$stack_frame_ptr(sp);
	else sp = startp;
	sb = ptr(sp, 0);
	sig_caller_count = 0;

	/* We may need to skip the first frame--it may be the frame found
	   the last time around; but we don't ignore it since it could still affect
	   interpretation of the next level */

	if sp -> stack_frame_flags.signaller then do;

	     if sp -> stack_frame.entry_ptr = sb -> stack_header.signal_ptr
		then sig_caller_count = 2;	/* have found signal frame */

	     sp = ptr(sp, rel(sp -> stack_frame.prev_sp));  /* skip this frame */

	end;

	/* Loop through the stack looking for a condition frame.
	   If a signal frame is found, we must determine whether signal_ was
	   invoked for a software condition or a hardware fault.
	   If there is a signaller flag 2 frames before the signal_ frame, there
	   was a hardware fault; otherwise the condition is associated
	   with the caller of signal_ */

	do while (sp ^= null);

	     if sp -> stack_frame_flags.signaller then return(sp);	/* this frame got fault */

	     if sp -> stack_frame_flags.crawl_out
		then if unspec (sp -> stack_frame.return_ptr) & RETURN_PTR_MASK ^=
		     unspec (sb -> stack_header.unwinder_ptr) & RETURN_PTR_MASK
						/* flag is also set by unwinder_ */
			then return (ptr(sp, rel(sp -> stack_frame.prev_sp)));

	     if sig_caller_count = 1 then return (ptr(sp, rel(sp -> stack_frame.next_sp)));
				/* didn't find signaller frame; must have software condition */

	     else if sig_caller_count = 2 then sig_caller_count = 1;  /* must go back one more */

	     else if sp -> stack_frame_flags.signal
		then sig_caller_count = 2;	/* note existence of signal_ frame */

	     if sp -> stack_frame.prev_sp = null then sp = null;	/* must special case null */
	     else sp = ptr(sp, rel(sp -> stack_frame.prev_sp));	/* go look at previous frame */

	end;

	return (sp);			/* no condition frames; return null */
	end find_condition_frame_;
