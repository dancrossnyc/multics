/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
generic_math_:	proc;
/*	This is a set of utilities that allow the basic functions:
	 add, subtract, multiply, divide and negation to be performed
	 on the generic number types.	*/

/*	Written by Rick Gray 02/02/84 to help provide Fortran Hex support	*/
/*	Modified by R. Gray 01/01/84 to work on unnormalized decimal data */

/*	Note for possible future expansion:
	log(x)   ==  log(manitissa) + log(exponent base) * exponent
	exp(x)   --  exponent = floor(x / log(exponent base))
	         --  mantissa = exp(x - exponent * log(exponent base)) */
 
dcl	zerodivide condition;

dcl	dbl_max_decimal_precision fixed bin int static options(constant) init(118);
dcl	max_binary_precision fixed bin int static options(constant) init(63);
dcl	01 gen_decimal_struc based aligned,
	  02 exponent fixed bin(35),
	  02 mantissa fixed decimal(59);

dcl	01 cplx_gen_decimal_struc based aligned,
	  02 (real, imaginary) aligned like gen_decimal_struc;

dcl	01 float_decimal_struc based aligned,
	  02 mantissa fixed decimal(59),
	  02 pad bit(1) unaligned,
	  02 exponent fixed bin(7) unaligned;

dcl	fldt float decimal(59) based aligned;

dcl	01 gen_binary_struc based aligned,
	  02 pad bit(8) unaligned,
	  02 mantissa fixed bin(63) unaligned,
	  02 exponent fixed bin(35) aligned;

dcl	01 cplx_gen_binary_struc based aligned,
	  02 real like gen_binary_struc aligned,
	  02 pad fixed bin(35),
	  02 imaginary like gen_binary_struc aligned;

dcl	01 float_binary_struc based aligned,
	  02 exponent fixed bin(7) unaligned,
	  02 mantissa fixed bin(63) unaligned;

dcl	flbt float binary(63) based aligned;

dcl	01 (xd, yd, zd) parameter like gen_decimal_struc aligned;
dcl	01 (xdc, ydc, zdc) parameter like cplx_gen_decimal_struc aligned;
dcl	01 (ad, bd, cd) like float_decimal_struc aligned;

dcl	01 (xb, yb, zb) parameter like gen_binary_struc aligned;
dcl	01 (xbc, ybc, zbc) parameter like cplx_gen_binary_struc aligned;
dcl	01 (ab, bb, cb) like float_binary_struc aligned;

/* ******************** generic decimal routines ******************** */

negate_decimal:	entry(yd, xd);
	xd.exponent = yd.exponent;
	xd.mantissa = - yd.mantissa;
	return;

negate_decimal_complex:	entry(ydc, xdc);
	xdc.real.exponent = ydc.real.exponent;
	xdc.real.mantissa = - ydc.real.mantissa;
	xdc.imaginary.exponent = ydc.imaginary.exponent;
	xdc.imaginary.mantissa = - ydc.imaginary.mantissa;
	return;

add_decimal:	entry(yd, zd, xd);
	if yd.mantissa = 0 then xd = zd;
	else if zd.mantissa = 0 then xd = yd;
	else if yd.exponent > zd.exponent then
	     if yd.exponent-zd.exponent > dbl_max_decimal_precision then xd = yd;
	     else do;
		ad.exponent = 0;
		ad.mantissa = yd.mantissa;
		bd.exponent = zd.exponent - yd.exponent;
		bd.mantissa = zd.mantissa;
		addr(cd) -> fldt = addr(ad) -> fldt + addr(bd) -> fldt;
		xd.mantissa = cd.mantissa;
		xd.exponent = yd.exponent + cd.exponent;
	       end;
	else if zd.exponent-yd.exponent > dbl_max_decimal_precision then xd = zd;
	     else do;
		ad.exponent = 0;
		ad.mantissa = zd.mantissa;
		bd.exponent = yd.exponent - zd.exponent;
		bd.mantissa = yd.mantissa;
		addr(cd) -> fldt = addr(ad) -> fldt + addr(bd) -> fldt;
		xd.mantissa = cd.mantissa;
		xd.exponent = zd.exponent + cd.exponent;
	       end;
	return;

add_decimal_complex:	entry(ydc, zdc, xdc);
	call add_decimal(ydc.real, zdc.real, xdc.real);
	call add_decimal(ydc.imaginary, zdc.imaginary, xdc.imaginary);
	return;

subtract_decimal:	entry(yd, zd, xd);
	if zd.mantissa = 0 then xd = yd;
	else if yd.mantissa = 0 then call negate_decimal(zd, xd);
	else if yd.exponent > zd.exponent then
	     if yd.exponent-zd.exponent > dbl_max_decimal_precision then xd = yd;
	     else do;
		ad.exponent = 0;
		ad.mantissa = yd.mantissa;
		bd.exponent = zd.exponent - yd.exponent;
		bd.mantissa = zd.mantissa;
		addr(cd) -> fldt = addr(ad) -> fldt - addr(bd) -> fldt;
		xd.mantissa = cd.mantissa;
		xd.exponent = yd.exponent + cd.exponent;
	       end;
	else if zd.exponent-yd.exponent > dbl_max_decimal_precision then do;
		xd.mantissa = -zd.mantissa;
		xd.exponent = zd.exponent;
	       end;
	     else do;
		ad.exponent = 0;
		ad.mantissa = zd.mantissa;
		bd.exponent = yd.exponent - zd.exponent;
		bd.mantissa = yd.mantissa;
		addr(cd) -> fldt = addr(bd) -> fldt - addr(ad) -> fldt;
		xd.mantissa = cd.mantissa;
		xd.exponent = zd.exponent + cd.exponent;
	       end;
	return;

subtract_decimal_complex:	entry(ydc, zdc, xdc);
	call subtract_decimal(ydc.real, zdc.real, xdc.real);
	call subtract_decimal(ydc.imaginary, zdc.imaginary, xdc.imaginary);
	return;

multiply_decimal:	entry(yd, zd, xd);
	if yd.mantissa = 0 | zd.mantissa = 0 then do;
		xd.mantissa = 0;
		xd.exponent = 127;
		return;
	  end;
	ad.exponent, bd.exponent = 0;
	ad.mantissa = yd.mantissa;
	bd.mantissa = zd.mantissa;
	addr(cd) -> fldt = addr(ad) -> fldt * addr(bd) -> fldt;
	xd.mantissa = cd.mantissa;
	xd.exponent = yd.exponent + zd.exponent + cd.exponent;
	return;

multiply_decimal_complex:	entry(ydc, zdc, xdc);
	begin;
	dcl	01 (product1, product2, temp) like gen_decimal_struc aligned;

		call multiply_decimal(ydc.real, zdc.real, product1);
		call multiply_decimal(ydc.imaginary, zdc.imaginary, product2);
		call subtract_decimal(product1, product2, temp);

		call multiply_decimal(ydc.real, zdc.imaginary, product1);
		call multiply_decimal(ydc.imaginary, zdc.real, product2);
		call add_decimal(product1, product2, xdc.imaginary);
		xdc.real = temp;	/* temp is used to allow operand & result to be same variable */
	end;
	return;

divide_decimal:	entry(yd, zd, xd);
	if zd.mantissa = 0 then signal zerodivide;
	if yd.mantissa = 0 then do;
		xd = yd;
		return;
	  end;
	ad.exponent, bd.exponent = 0;
	ad.mantissa = yd.mantissa;
	bd.mantissa = zd.mantissa;
	addr(cd) -> fldt = addr(ad) -> fldt / addr(bd) -> fldt;
	xd.mantissa = cd.mantissa;
	xd.exponent = yd.exponent + cd.exponent - zd.exponent;
	return;

divide_decimal_complex:	entry(ydc, zdc, xdc);
	begin;
	dcl	01 (product1, product2, divisor, temp) like gen_decimal_struc aligned;

		call multiply_decimal(zdc.real, zdc.real, product1);
		call multiply_decimal(zdc.imaginary, zdc.imaginary, product2);
		call add_decimal(product1, product2, divisor);

		call multiply_decimal(ydc.real, zdc.real, product1);
		call multiply_decimal(ydc.imaginary, zdc.imaginary, product2);
		call add_decimal(product1, product2, xdc.real);
		call divide_decimal(xdc.real, divisor, temp);

		call multiply_decimal(ydc.imaginary, zdc.real, product1);
		call multiply_decimal(ydc.real, zdc.imaginary, product2);
		call subtract_decimal(product1, product2, xdc.imaginary);
		call divide_decimal(xdc.imaginary, divisor, xdc.imaginary);
		xdc.real = temp;	/* temp is used to allow operand & result to be same variable */
	end;					
	return;

/* ******************** generic binary routines ******************** */

negate_binary:	entry(yb, xb);
	ab.exponent = 0;
	ab.mantissa = yb.mantissa;
	addr(ab) -> flbt = - addr(ab) -> flbt;
	xb.exponent = yb.exponent + ab.exponent;
	xb.mantissa = ab.mantissa;
	return;

negate_binary_complex:	entry(ybc, xbc);
	call negate_binary(ybc.real, xbc.real);
	call negate_binary(ybc.imaginary, xbc.imaginary);
	return;

add_binary:	entry(yb, zb, xb);
	if yb.mantissa = 0 then xb = zb;
	else if zb.mantissa = 0 then xb = yb;
	else if yb.exponent > zb.exponent then
	     if yb.exponent-zb.exponent > max_binary_precision then xb = yb;
	     else do;
		ab.exponent = 0;
		ab.mantissa = yb.mantissa;
		bb.exponent = zb.exponent - yb.exponent;
		bb.mantissa = zb.mantissa;
		addr(cb) -> flbt = addr(ab) -> flbt + addr(bb) -> flbt;
		xb.mantissa = cb.mantissa;
		xb.exponent = yb.exponent + cb.exponent;
	       end;
	else if zb.exponent-yb.exponent > max_binary_precision then xb = zb;
	     else do;
		ab.exponent = 0;
		ab.mantissa = zb.mantissa;
		bb.exponent = yb.exponent - zb.exponent;
		bb.mantissa = yb.mantissa;
		addr(cb) -> flbt = addr(ab) -> flbt + addr(bb) -> flbt;
		xb.mantissa = cb.mantissa;
		xb.exponent = zb.exponent + cb.exponent;
	       end;
	return;

add_binary_complex:	entry(ybc, zbc, xbc);
	call add_binary(ybc.real, zbc.real, xbc.real);
	call add_binary(ybc.imaginary, zbc.imaginary, xbc.imaginary);
	return;

subtract_binary:	entry(yb, zb, xb);
	if yb.mantissa = 0 then call negate_binary(zb, xb);
	else if zb.mantissa = 0 then xb = yb;
	else if yb.exponent > zb.exponent then
	     if yb.exponent-zb.exponent > max_binary_precision then xb = yb;
	     else do;
		ab.exponent = 0;
		ab.mantissa = yb.mantissa;
		bb.exponent = zb.exponent - yb.exponent;
		bb.mantissa = zb.mantissa;
		addr(cb) -> flbt = addr(ab) -> flbt - addr(bb) -> flbt;
		xb.mantissa = cb.mantissa;
		xb.exponent = yb.exponent + cb.exponent;
	       end;
	else if zb.exponent-yb.exponent > max_binary_precision then do;
		xb.mantissa = -zb.mantissa;
		xb.exponent = zb.exponent;
	       end;
	     else do;
		ab.exponent = 0;
		ab.mantissa = zb.mantissa;
		bb.exponent = yb.exponent - zb.exponent;
		bb.mantissa = yb.mantissa;
		addr(cb) -> flbt = addr(bb) -> flbt - addr(ab) -> flbt;
		xb.mantissa = cb.mantissa;
		xb.exponent = zb.exponent + cb.exponent;
	       end;
	return;

subtract_binary_complex:	entry(ybc, zbc, xbc);
	call subtract_binary(ybc.real, zbc.real, xbc.real);
	call subtract_binary(ybc.imaginary, zbc.imaginary, xbc.imaginary);
	return;

multiply_binary:	entry(yb, zb, xb);
	if yb.mantissa = 0 | xb.mantissa = 0 then do;
		xb.mantissa = 0;
		xb.exponent = 127;
		return;
	  end;
	ab.exponent, bb.exponent = 0;
	ab.mantissa = yb.mantissa;
	bb.mantissa = zb.mantissa;
	addr(cb) -> flbt = addr(ab) -> flbt * addr(bb) -> flbt;
	xb.mantissa = cb.mantissa;
	xb.exponent = yb.exponent + zb.exponent + cb.exponent;
	return;

multiply_binary_complex:	entry(ybc, zbc, xbc);
	begin;
	dcl	01 (product1, product2) like gen_binary_struc aligned;

		call multiply_binary(ybc.real, zbc.real, product1);
		call multiply_binary(ybc.imaginary, zbc.imaginary, product2);
		call subtract_binary(product1, product2, xbc.real);

		call multiply_binary(ybc.real, zbc.imaginary, product1);
		call multiply_binary(ybc.imaginary, zbc.real, product2);
		call add_binary(product1, product2, xbc.imaginary);
	end;
	return;

divide_binary:	entry(yb, zb, xb);
	if zb.mantissa = 0 then signal zerodivide;
	if yb.mantissa = 0 then do;
		xb = yb;
		return;
	  end;
	ab.exponent, bb.exponent = 0;
	ab.mantissa = yb.mantissa;
	bb.mantissa = zb.mantissa;
	addr(cb) -> flbt = addr(ab) -> flbt / addr(bb) -> flbt;
	xb.mantissa = cb.mantissa;
	xb.exponent = yb.exponent + cb.exponent - zb.exponent;
	return;

divide_binary_complex:	entry(ybc, zbc, xbc);
	begin;
	dcl	01 (product1, product2, divisor) like gen_binary_struc aligned;

		call multiply_binary(zbc.real, zbc.real, product1);
		call multiply_binary(zbc.imaginary, zbc.imaginary, product2);
		call add_binary(product1, product2, divisor);

		call multiply_binary(ybc.real, zbc.real, product1);
		call multiply_binary(ybc.imaginary, zbc.imaginary, product2);
		call add_binary(product1, product2, xbc.real);
		call divide_binary((xbc.real), divisor, xbc.real);

		call multiply_binary(ybc.imaginary, zbc.real, product1);
		call multiply_binary(ybc.real, zbc.imaginary, product2);
		call subtract_binary(product1, product2, xbc.imaginary);
		call divide_binary((xbc.imaginary), divisor, xbc.imaginary);
	end;					
	return;
end generic_math_;
