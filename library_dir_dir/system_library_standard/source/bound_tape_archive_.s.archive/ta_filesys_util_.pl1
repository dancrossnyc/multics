/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_filesys_util_: proc; return;

/* This module performs branch manipulation for tape_archive.  It examines
   files and records all their interesting attributes for storage on tape.
   It also replaces as many of these as possible when a file is
   extracted from tape.
   Written 06/07/77 by C. D. Tavares.
   Modified 09/24/79 by CDT to implement star convention entry.
   Modified 09/03/80 by CDT for version 3.
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
   Modified 7/83 by S. Krupp for conversion to mtape_.
*/

/* BASED */

dcl 1 based_acl_list (ta_attributes.acl_count) aligned based (acl_list_ptr) like ta_attributes.acl_list;

dcl  name_array (binary (branch.nnames)) char (32) aligned based;
dcl  system_free_area area (sys_info$max_seg_size) based (system_free_ptr);
dcl  based_segment char (char_count) based (seg_ptr) aligned;

/* AUTOMATIC */

dcl  dirname char (168),
     ename char (32);

dcl 1 auto_branch like status_branch aligned automatic;

dcl 1 info like indx_info automatic;

dcl 1 auto_sfb aligned automatic like status_for_backup;

dcl  acl_list_ptr pointer,
     char_count fixed bin (21),
     check_for_binary bit (1),
     i fixed bin,
     n_components fixed bin,
     msf_fcb_ptr pointer,
     seg_ptr pointer,
     temp_area area (3000),
     temp_bit bit (1) aligned;

/* ENTRIES */

dcl  get_system_free_area_ ext entry returns (pointer),
     hcs_$get_bc_author ext entry (char (*), char (*), char (*) aligned, fixed bin (35)),
     hcs_$get_max_length ext entry (char (*), char (*), fixed bin (19), fixed bin (35)),
     hcs_$get_safety_sw ext entry (char (*), char (*), bit (1) aligned, fixed bin (35)),
     hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     hcs_$list_acl ext entry (char (*), char (*), pointer, pointer, pointer, fixed bin, fixed bin (35)),
     hcs_$star_dir_list_ ext entry (char (*), char (*), fixed bin (3), pointer, fixed bin, fixed bin, pointer, pointer, fixed bin (35)),
     hcs_$status_for_backup ext entry (char (*), char (*), pointer, fixed bin (35)),
     hcs_$status_long ext entry (char (*), char (*), fixed bin, pointer, pointer, fixed bin (35)),
     hcs_$terminate_noname ext entry (pointer, fixed bin (35)),
     msf_manager_$acl_list ext entry (pointer, pointer, pointer, pointer, fixed bin, fixed bin (35)),
     msf_manager_$get_ptr ext entry (pointer, fixed bin, bit (1) aligned, pointer, fixed bin (24), fixed bin (35)),
     msf_manager_$close ext entry (pointer),
     msf_manager_$open ext entry (char (*), char (*), pointer, fixed bin (35)),
     nd_handler_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     nd_handler_$force ext entry (char (*), char (*), char (*), fixed bin (35)),
     vfile_status_ ext entry (char (*), char (*), pointer, fixed bin (35));

/* INTERNAL STATIC */

dcl  system_free_ptr pointer static initial (null);

/* EXTERNAL STATIC */

dcl (error_table_$action_not_performed,
     error_table_$dirseg,
     error_table_$namedup,
     error_table_$noentry,
     error_table_$segnamedup) fixed bin (35) external static;

dcl  sys_info$max_seg_size fixed bin (35) external static;

/* BUILTINS AND CONDITIONS */

dcl (addr, binary, collate, divide, empty, length, max, null, pointer, rtrim, sum, unspec, verify) builtin;

dcl  cleanup condition;
%include tape_archive_table_dcl;
%page;
%include tape_archive_attributes;
%page;
%include tape_archive_star;
%page;
%include star_structures;
%page;
%include status_for_backup;
%page;
%include vfs_info;
%page;
star_list: entry (a_dirname, a_starname, ta_filesys_star_ptr, code);

dcl  a_starname char (*) parameter;

	if system_free_ptr = null then
	     system_free_ptr = get_system_free_area_ ();

	ta_filesys_star_ptr,
	     star_list_branch_ptr,
	     star_list_names_ptr = null;

	on cleanup begin;
	     if star_list_names_ptr ^= null then
		free star_list_names in (system_free_area);
	     if star_list_branch_ptr ^= null then
		free star_dir_list_branch in (system_free_area);
	     if ta_filesys_star_ptr ^= null then
		free ta_filesys_star_info in (system_free_area);
	end;

	star_select_sw = star_BRANCHES_ONLY;

	call hcs_$star_dir_list_ (a_dirname, a_starname, star_select_sw, system_free_ptr, star_branch_count, star_link_count,
	     star_list_branch_ptr, star_list_names_ptr, code);
	if code ^= 0 then return;

	ta_star_match_count = 0;

	do i = 1 to star_branch_count;
	     if star_dir_list_branch (i).type = star_DIRECTORY then
		if star_dir_list_branch (i).bit_count > 0 then /* it's an MSF */
		     star_dir_list_branch (i).type = star_SEGMENT; /* so lie. */

	     if star_dir_list_branch (i).type = star_SEGMENT then
		ta_star_match_count = ta_star_match_count + 1;
	end;

	allocate ta_filesys_star_info in (system_free_area);

	ta_star_match_count = 0;

	do i = 1 to star_branch_count;
	     if star_dir_list_branch (i).type = star_SEGMENT then do;
		ta_star_match_count = ta_star_match_count + 1;
		ta_filesys_star_info.ename (ta_star_match_count) = star_list_names (star_dir_list_branch (i).nindex);
	     end;
	end;

	free star_list_names in (system_free_area);
	free star_dir_list_branch in (system_free_area);
	return;
%page;
get_file_info: entry (a_dirname, a_ename, branch_type, file_length, safety_sw, binary_file, dtbm, code);

/* This entry returns a short status of a segment or MSF in the file system, including whether or not its
   contents contain any non-ASCII characters. */

dcl (a_dirname char (*),
     a_ename char (*),
     branch_type fixed bin,
     file_length fixed bin (35),
     safety_sw bit (1) aligned,
     binary_file bit (1) aligned,
     dtbm bit (36),
     code fixed bin (35)) parameter;

	call hcs_$status_long (a_dirname, a_ename, 1 /* chase */, addr (auto_branch), null, code);
	if code ^= 0 then return;

	call hcs_$get_safety_sw (a_dirname, a_ename, safety_sw, code);
	if code ^= 0 then return;

	branch_type = binary (auto_branch.type);
	dtbm = auto_branch.dtem;

	if auto_branch.type = Segment then do;
	     file_length = (binary (auto_branch.bit_count) + 36863) / 36864e0; /* 1024 * 36 */
						/* we return file length in pages */
	     if ^binary_file then binary_file = check_binary_file (a_dirname, a_ename, binary (auto_branch.bit_count));
	end;

	else do;					/* MSF, this is a toughy */

	     n_components = binary (auto_branch.bit_count);
	     if n_components = 0 then do;		/* real dir, not an MSF */
		code = error_table_$dirseg;
		return;
	     end;

	     begin;

dcl  component_file_lengths (0:n_components-1) fixed bin (24);

		call get_component_lengths (a_dirname, a_ename, n_components, component_file_lengths, binary_file);
		component_file_lengths = (component_file_lengths + 36863) / 36864e0;
		file_length = sum (component_file_lengths) + binary (auto_branch.records_used);
	     end;
	end;

returner:
	return;
%skip(5);
check_binary_file: proc (a_dirname, a_ename, bitcount) returns (bit (1) aligned);

dcl (a_dirname char (*),
     a_ename char (*),
     bitcount fixed bin (24)) parameter;

dcl  binary_file bit (1) aligned;

	     call hcs_$initiate (a_dirname, a_ename, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then goto returner;

	     char_count = divide (bitcount, 9, 21, 0);
	     binary_file = ""b;

	     if verify (based_segment, collate ()) > 0 then binary_file = "1"b;

	     call hcs_$terminate_noname (seg_ptr, code);
	     return (binary_file);
	end check_binary_file;
%page;
create_attribute_file: entry (table_ptr, request_no, attribute_seg_ptr, binary_file, code);

/* This entry fills in the contents of the attribute file which will be put onto tape preceding each component.
   The attribute file contains all the attributes of a segment in the file system (like ACL, names,
   and other things) which have to be restored whenever the file is reloaded into the file system.
   Also, since it has the information handy, it fills in components of the request structure with
   the same information where necessary. */

dcl  request_no fixed bin parameter,
     attribute_seg_ptr pointer parameter;

	ta_attributes.version_no = tape_archive_version_4;
	status_ptr = addr (ta_attributes.branch);
	temp_area = empty ();
	request_ptr = addr (request_queue (request_no));

	dirname = request.directory_name;
	ename = request.entry_name;

	call hcs_$status_long (dirname, ename,
	     1 /* chase */, addr (ta_attributes.branch), addr (temp_area), code);
	if code ^= 0 then return;

	request.entry_status_descriptor.uid = ta_attributes.branch.uid;  /* used for checking against table deletion */

	if request.single_name then do;		/* user requested that only one name be recorded */
	     ta_attributes.branch.nnames = 1b;
	     ta_attributes.names (1) = ename;
	end;
	else unspec (ta_attributes.names) = unspec (pointer (addr (temp_area), branch.names_relp) -> name_array);

	call hcs_$get_safety_sw (dirname, ename, ta_attributes.safety_switch, code);
	if code ^= 0 then return;

	request.safety_switch = ta_attributes.safety_switch;

	call hcs_$get_bc_author (dirname, ename, request.bitcount_author, code);
	if code ^= 0 then return;

	temp_area = empty ();

	check_for_binary = (^binary_file) & (binary (ta_attributes.dtem) > binary (request.date_time_branch_modified));
						/* only check for ascii-ness if it was ascii before and someone changed it since */

	if ta_attributes.branch.type = Segment then do;

	     call hcs_$get_max_length (dirname, ename, ta_attributes.max_length, code);
	     if code ^= 0 then return;

	     ta_attributes.n_components = 0;

	     auto_sfb.version = status_for_backup_version_2;

	     call hcs_$status_for_backup (dirname, ename, addr (auto_sfb), code);
	     if code ^= 0 then return;

	     ta_attributes.entrypt_is_bounded = auto_sfb.entrypt;
	     ta_attributes.entrypt_bound = auto_sfb.entrypt_bound;

	     call hcs_$list_acl (dirname, ename,
		addr (temp_area), acl_list_ptr, null, ta_attributes.acl_count, code);
	     if code ^= 0 then return;

	     unspec (ta_attributes.acl_list) = unspec (based_acl_list);

	     if ^binary_file then binary_file = check_binary_file (dirname, ename, binary (ta_attributes.bit_count));
	end;

	else do;					/* MSF (we hope) */
	     if ta_attributes.bit_count = 0 then do;
		code = error_table_$dirseg;
		return;
	     end;

	     ta_attributes.n_components = binary (ta_attributes.bit_count);

	     call msf_manager_$open (dirname, ename, msf_fcb_ptr, code);
	     if code ^= 0 then return;

	     call msf_manager_$acl_list (msf_fcb_ptr, addr (temp_area), acl_list_ptr, null, acl_count, code);
	     if code ^= 0 then return;

	     unspec (ta_attributes.acl_list) = unspec (based_acl_list);

	     call msf_manager_$close (msf_fcb_ptr);

	     temp_bit = ^check_for_binary;		/* temp bit of 0 means to check for binary */

bugblock:	     begin;				/* PL/I bug won't generate calling seq right for the array */
dcl  temp_ptr pointer,				/* unless we fake it out this way */
     based_array (0:ta_attributes.n_components - 1) fixed bin (24) based (temp_ptr);

		temp_ptr = addr (ta_attributes.component_bc); /* This forces correct address computation */

		call get_component_lengths (dirname, ename, ta_attributes.n_components, based_array (*), temp_bit);
	     end bugblock;

	     if check_for_binary then binary_file = temp_bit;
	end;

	request.date_time_branch_modified = ta_attributes.dtem;
	request.date_time_dumped = ta_attributes.dtd;

	ta_attributes.own_length_in_chars = length (unspec (ta_attributes)) / 9e0;

	return;
%page;
prepare_extraction: entry (table_ptr, request_no, code);

/* This entry simply checks to see if something we are extracting already exists or not, and figures out
   how to handle things in case it does. */

	request_ptr = addr (request_queue (request_no));

	dirname = request.directory_name;
	ename = request.entry_name;

	call hcs_$status_long (dirname, ename, 1 /* chase */, addr (auto_branch), null (), code);

	if code = 0 then do;			/* file already exists */
	     if auto_branch.uid = table_ptr -> tape_archive_table.perm_table_uid then do;
		call ioa_ ("tape_archive: Extraction into active table ^a has been suppressed.", ename);
		code = error_table_$action_not_performed;
	     end;
	     else do;
		if request.force then call nd_handler_$force ("tape_archive", dirname, ename, code);
		else call nd_handler_ ("tape_archive", dirname, ename, code);
		if code = 1 then code = error_table_$action_not_performed;
	     end;
	     return;
	end;

	if code = error_table_$noentry then code = 0;	/* file not found, this is what we want */

	return;
%page;
replace_attributes: entry (table_ptr, request_no, attribute_seg_ptr, code);

/* This entry takes the attribute file read in from the tape and places every attribute which is replaceable
   back onto the segment branch.  Things like dates and unique ID's are ignored (of course) */

/* ENTRIEs */

dcl  com_err_ ext entry options (variable),
     ioa_ ext entry options (variable),
     cu_$level_get ext entry (fixed bin);

dcl  hcs_$chname_file ext entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     hcs_$replace_acl ext entry (char (*), char (*), pointer, fixed bin, bit (1) aligned, fixed bin (35)),
     hcs_$set_bc ext entry (char (*), char (*), fixed bin (24), fixed bin (35)),
     hcs_$set_copysw ext entry (char (*), char (*), fixed bin (1), fixed bin (35)),
     hcs_$set_entry_bound ext entry (char (*), char (*), fixed bin (18), fixed bin (35)),
     hcs_$set_max_length ext entry (char (*), char (*), fixed bin (19), fixed bin (35)),
     hcs_$set_ring_brackets ext entry (char (*), char (*), fixed bin dimension (3), fixed bin (35)),
     hcs_$set_safety_sw ext entry (char (*), char (*), bit (1) aligned, fixed bin (35)),
     msf_manager_$acl_replace ext entry (pointer, pointer, fixed bin, bit (1) aligned, fixed bin (35));

/* STATIC */

dcl  validation_level fixed bin static initial (-1);

dcl  rb (3) fixed bin;

	request_ptr = addr (request_queue (request_no));

	dirname = request.directory_name;
	ename = request.entry_name;
	code = 0;

	if ta_attributes.version_no ^= tape_archive_version_4 then; /* doesn't matter, this structure */
						/* has been identical from version 1 of tape_archive */
						/* the versions differed only in the online table format */

	if ta_attributes.safety_switch then
	     call hcs_$set_safety_sw (dirname, ename, "1"b, code);
	if code ^= 0 then call explain (code, "set safety switch of");

	if ta_attributes.copy_switch then
	     call hcs_$set_copysw (dirname, ename, 1, code);
	if code ^= 0 then call explain (code, "set copy switch of");

	if ta_attributes.type = Segment then do;

	     if ta_attributes.entrypt_is_bounded then
		call hcs_$set_entry_bound (dirname, ename, binary (ta_attributes.entrypt_bound), code);
	     if code ^= 0 then call explain (code, "set entrypoint bound of");

	     call hcs_$set_bc (dirname, ename, binary (ta_attributes.bit_count), code);
						/* set the bitcount even though vfile_ has ostensibly set it */
	     if code ^= 0 then call explain (code, "set bit count of");

	     call hcs_$set_max_length (dirname, ename, ta_attributes.max_length, code);
	     if code ^= 0 then call explain (code, "set max length of");

	     call hcs_$replace_acl (dirname, ename, addr (ta_attributes.acl_list), ta_attributes.acl_count, "1"b, code);
						/* don't add SysDaemons if they weren't on before. */
	     if code ^= 0 then call explain (code, "replace ACL of");

	     do i = 0 to 2;
		rb (i+1) = binary (ta_attributes.ring_brackets (i));
	     end;

	     if validation_level = -1 then call cu_$level_get (validation_level);

	     if rb (1) < validation_level then do;
		rb = max (rb, validation_level);
		call ioa_ ("tape_archive: Warning - raising ring brackets of ^a to ^d,^d,^d.", ename, rb);
	     end;

	     call hcs_$set_ring_brackets (dirname, ename, rb, code);
	     if code ^= 0 then call explain (code, "set ring brackets of");
	end;

	else do;					/* file is an MSF */

	     call msf_manager_$open (dirname, ename, msf_fcb_ptr, code);
	     if code ^= 0 then call explain (code, "open MSF");

	     call msf_manager_$acl_replace (msf_fcb_ptr, addr (ta_attributes.acl_list), ta_attributes.acl_count, "1"b, code);
	     if code ^= 0 then call explain (code, "replace ACL of MSF");

	     call msf_manager_$close (msf_fcb_ptr);
	end;

	if ^request.single_name then
	     do i = 1 to binary (ta_attributes.nnames);

	     call hcs_$chname_file (dirname, ename, "", ta_attributes.names (i), code);
	     if code = error_table_$segnamedup then code = 0;
	     else if code = error_table_$namedup then do;
		call hcs_$status_long (dirname, ta_attributes.names (i), 1 /* chase */, addr (auto_branch), null (), code);
		if code = 0 then do;
		     if auto_branch.uid = table_ptr -> tape_archive_table.perm_table_uid then
			call ioa_ ("tape_archive: Potential conflict with active table, name ^a not added to ^a>^a.", ta_attributes.names (i), dirname, ename);
		     else do;
			if request.force then call nd_handler_$force ("tape_archive", dirname, ta_attributes.names (i), code);
			else call nd_handler_ ("tape_archive", dirname, ta_attributes.names (i), code);
			if code = 0 then i = i - 1;		/* name removal succeeded, try again */
			else code = error_table_$namedup;
		     end;
		end;
	     end;
	     if code ^= 0 then call explain (code, "add name " || rtrim (ta_attributes.names (i)) || " to");
	end;

	code = 0;
	return;
%page;
get_component_lengths: proc (a_dirname, a_ename, n_components, bc_array, binary_file);

/* This internal subroutine returns an array of lengths (in pages) for all the components of an MSF.
   Additionally, it checks each component (if necessary) to ensure that it contains only ASCII chars. */

dcl (a_dirname char (*),
     a_ename char (*),
     n_components fixed bin,
     bc_array (*) fixed bin (24),
     binary_file bit (1) aligned) parameter;

/* AUTOMATIC */

dcl  i fixed bin,
     bit_count fixed bin (24);

	     unspec (bc_array) = ""b;

	     if ^binary_file then do;			/* make sure the file is a stream file */
		uns_info.info_version = vfs_version_1;

		call vfile_status_ (a_dirname, a_ename, addr (uns_info), code);
		if code ^= 0 then return;

		if info.type > 1 then binary_file = "1"b; /* structured file, don't even try to stream it */
	     end;

	     call msf_manager_$open (a_dirname, a_ename, msf_fcb_ptr, code);
	     if code ^= 0 then return;

	     do i = 0 to n_components - 1;

		call msf_manager_$get_ptr (msf_fcb_ptr, i, ""b /* do not create */, seg_ptr, bit_count, code);
		if seg_ptr = null then do;
		     call msf_manager_$close (msf_fcb_ptr);
		     return;
		end;

		char_count = divide (bit_count, 9, 21, 0);

		bc_array (i) = bit_count;

		if ^binary_file then		/* check for legal ASCII */
		     if verify (based_segment, collate ()) > 0 then /* AHA, a binary byte */
			binary_file = "1"b;
	     end;

	     call msf_manager_$close (msf_fcb_ptr);
	     return;
	end get_component_lengths;
%skip(5);
explain:	proc (code, explanation);

dcl  code fixed bin (35) parameter,
     explanation char (*) parameter;

	     call com_err_ (code, "tape_archive", "Cannot ^a ^a>^a.", explanation, dirname, ename);
	     code = 0;
	end explain;

     end ta_filesys_util_;
