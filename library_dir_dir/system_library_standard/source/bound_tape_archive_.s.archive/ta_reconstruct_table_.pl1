/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-27,Spitzer), approve(85-09-27,MCR7212),
     audit(85-10-11,Blair), install(85-12-16,MR12.0-1001):
     Initial coding.
                                                   END HISTORY COMMENTS */


/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

ta_reconstruct_table_:
     proc (Ptable_ptr, arg_array, table_name, code);

/*
This procedure implements the reconstruct key of tape_archive.
Usage:  ta reconstruct <table_name> {volume_id_list} {-control_args}
     volume_id_list = up to 8 tape names
     -force, -fc
     -long, -lg
     -density N, -den N
     -retain {all|none}
     -io_module tape_ansi_|tape_ibm_, -iom tape_ansi_|tape_ibm_
     -volume_type ansi|ibm, -vt ansi|ibm
*/

/* Written 85-2-19 by Charlie Spitzer. */

	table_ptr = Ptable_ptr;

	n_volids = 0;
	density = 0;
	retain_sw = "0"b;
	io_module = "";
	volume_type = "";
	volid (*) = "";
	nargs = dim (arg_array, 1);
	force_sw, long_sw = "0"b;

	do i = 1 to nargs;
	     arg = arg_array (i);
	     if substr (arg, 1, 1) = "-"
	     then if /* case */ arg = "-io_module" | arg = "-iom"
		then if i = nargs
		     then do;
missing_arg:
			call com_err_ (error_table_$noarg, myname, "After ^a.", arg);
			return;
			end;
		     else do;
			i = i + 1;
			io_module = arg_array (i);
			if io_module ^= "tape_ansi_" & io_module ^= "tape_ibm_"
			then do;
			     call com_err_ (error_table_$bad_arg, myname, "I/O module ^a not supported.", io_module)
				;
			     return;
			     end;
			end;
		else if arg = "-volume_type" | arg = "-vt"
		then if i = nargs
		     then goto missing_arg;
		     else do;
			i = i + 1;
			volume_type = arg_array (i);
			if volume_type ^= "ansi" & volume_type ^= "ibm"
			then do;
			     call com_err_ (error_table_$bad_arg, myname, "Volume type ^a not supported.",
				io_module);
			     return;
			     end;
			end;
		else if arg = "-retain"
		then if i = nargs
		     then retain_sw = "0"b;
		     else if substr (arg_array (i + 1), 1, 1) = "-"
		     then retain_sw = "0"b;
		     else do;
			i = i + 1;
			if arg_array (i) = "all"
			then retain_sw = "1"b;
			else if arg_array (i) = "none"
			     then retain_sw = "0"b;
			     else do;
bad_argument:
				call com_err_ (error_table_$bad_arg, myname, "^a", arg_array (i));
				return;
				end;
			end;
		else if arg = "-density" | arg = "-den"
		then if i = nargs
		     then goto missing_arg;
		     else do;
			i = i + 1;
			density = cv_dec_check_ (arg_array (i), code);
			if code ^= 0
			then do;
			     call com_err_ (0, myname, "^a is not a valid density.", arg_array (i));
			     return;
			     end;
			end;
		else if arg = "-force" | arg = "-fc"
		then force_sw = "1"b;
		else if arg = "-long" | arg = "-lg"
		then long_sw = "1"b;
		else do;
		     call com_err_ (error_table_$badopt, myname, "^a", arg);
		     return;
		     end;
	     else if n_volids = hbound (volid, 1)
		then do;
		     call com_err_ (error_table_$too_many_args, myname, "Only ^d volume ids allowed.", n_volids);
		     return;
		     end;
		else do;
		     n_volids = n_volids + 1;
		     volid (n_volids) = arg;
		     end;
	     end;

	if io_module ^= ""
	then if volume_type ^= ""
	     then if (io_module = "tape_ansi_" & volume_type = "ansi") | (io_module = "tape_ibm_" & volume_type = "ibm")
		then ;				/* ok */
		else do;
		     call com_err_ (error_table_$inconsistent, myname, "io_module = ^a and volume_type = ^a.",
			io_module, volume_type);
		     return;
		     end;
	     else if io_module = "tape_ansi_"
		then volume_type = "ansi";
		else volume_type = "ibm";
	else if volume_type ^= ""
	     then if volume_type = "ansi"
		then io_module = "tape_ansi_";
		else io_module = "tape_ibm_";
	     else do;				/* default them */
		volume_type = "ansi";
		io_module = "tape_ansi_";
		end;

	query_info.version = query_info_version_5;
	if ^force_sw
	     & (tape_archive_table.tape_info.n_volumes_in_set (1) + tape_archive_table.tape_info.n_volumes_in_set (2))
	     ^= 0
	then do;					/* there appears to be some data in the table already */
	     query_info.yes_or_no_sw = "1"b;
	     call command_query_ (addr (query_info), answer, myname, "^a^/^14x^a^/^14x^a?  ",
		"Reconstructing the table from the tape volume will destroy all",
		"information in the table before reading the tape volume.", "Do you wish to proceed");
	     if answer = "no"
	     then return;
	     end;

	if n_volids = 0
	then do;
	     query_info.yes_or_no_sw = "0"b;
	     call command_query_ (addr (query_info), answer, myname, "Enter volume name of first volume:  ");
	     n_volids = 1;
	     volid (1) = answer;
	     end;

	do i = 1 to n_volids;
	     call resource_info_$canonicalize_name ("tape_vol", (volid (i)), volid (i), code);
	     if code ^= 0
	     then do;
		call com_err_ (code, myname, "Canonicalizing volume ^a.", volid (i));
		return;
		end;
	     end;

	call iox_$find_iocb ("ta_tape_input_", tape_input_switch, code);
	if code ^= 0
	then do;
	     call com_err_ (code, myname, "Finding tape input switch.");
	     goto DONE;
	     end;

	if density = 0
	then density = Default_density;

	temp_ptrs (*) = null;
	on cleanup call cleaner;

	call get_temp_segments_ (myname, temp_ptrs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, myname, "Unable to get temporary segments.");
	     goto DONE;
	     end;
	temp_table_ptr = temp_ptrs (1);
	attribute_seg_ptr = temp_ptrs (2);
	data_seg_ptr = temp_ptrs (3);

	call ta_table_mgr_$lock_and_copy (table_ptr, temp_table_ptr, table_name, Modify, code);
	if code ^= 0
	then do;
	     call com_err_ (code, myname, "Unable to lock the table.");
	     goto DONE;
	     end;

	current_time = substr (bit (clock ()), 20, 36);
	table_ptr = temp_table_ptr;			/* operate on the temp segment */

/* Mount the volume */
	call ioa_$rsnnl ("^a^v( ^a^) -density ^d -volume_type ^a", attach_description, 0,
	     TAPE_ARCHIVE_IO_MODULE, hbound (volid, 1), volid (*), density, volume_type);

	call iox_$attach_ptr (tape_input_switch, attach_description, codeptr (ta_reconstruct_table_), code);
	if code ^= 0
	then if code = error_table_$not_detached
	     then ;				/* ok */
	     else do;
		call com_err_ (code, myname, "Attaching tape with attach description ""^a"".", attach_description);
		goto DONE;
		end;

	open_description = "-mode binary -block 8192 -number 1";
	call iox_$open_file (tape_input_switch, Sequential_input, open_description, ""b, code);
	if code ^= 0
	then do;
	     call com_err_ (code, myname, "Opening tape with open description ""^a"".", open_description);
	     goto DONE;
	     end;
	open_description = "-mode binary -block 8192";

/* Start filling in the pieces of the table that we know */

/* tape_archive_table.nonvolatile_part */
	tape_archive_table.io_module_name = io_module;
	tape_archive_table.table_is_consistent = "0"b;

/* tape_archive_table.volatile_part */
	unspec (tape_archive_table.volatile_part) = "0"b;

	tape_archive_table.incomplete_write_op_last = "1"b;
	tape_archive_table.tape_info.density (1) = density;
	tape_archive_table.tape_info.density (2) = Default_density;
	tape_archive_table.tape_info.active_set = 1;
	tape_archive_table.n_volumes_in_set (1) = n_volids;
	tape_archive_table.volume_set (1).volume_id (*) = volid (*);
	tape_archive_table.volume_set (2).volume_id (*) = "";

	max_chars_in_seg = sys_info$max_seg_size * 4;
	fst_ptr = addr (automatic_fst);
	mtape_fst.version = fst_version_1;
	table_number = 0;

/* Read all the files on the tape */
	do while (code = 0);
	     call iox_$control (tape_input_switch, "file_status", fst_ptr, code);
	     if code = 0
	     then do;
check_file_name:
		attribute_file_name = mtape_fst.f_stat.file_id;
		if substr (attribute_file_name, 1, length (ATTRIBUTE_FILE_PREFIX)) = ATTRIBUTE_FILE_PREFIX
		then do;				/* found an attribute file */
		     call iox_$read_record (tape_input_switch, attribute_seg_ptr, max_chars_in_seg, n_chars_read,
			code);
		     if code = error_table_$short_record
		     then code = 0;
		     if code = 0
		     then do;
			attribute_file_number =
			     fixed (substr (attribute_file_name, length (ATTRIBUTE_FILE_PREFIX) + 1, 4));
			call iox_$close (tape_input_switch, code);
			call iox_$open_file (tape_input_switch, Sequential_input, open_description, ""b, code);
			if code = 0
			then do;
			     call iox_$control (tape_input_switch, "file_status", fst_ptr, code);
			     if code = 0
			     then do;
				data_file_name = mtape_fst.f_stat.file_id;
				data_file_number =
				     fixed (substr (data_file_name, length (ATTRIBUTE_FILE_PREFIX) + 1, 4));
				if data_file_number = attribute_file_number + 1
				then call process_file;
				else do;
				     call com_err_ (error_table_$no_file, myname,
					"Could not locate the data file for attribute file ^d, skipping to next file."
					, attribute_file_number);
				     goto check_file_name;
				     end;
				end;
			     end;
			end;
		     end;
		else if substr (attribute_file_name, 1, length (TABLE_FILE_PREFIX)) = TABLE_FILE_PREFIX
		     then call process_table;
		     else call com_err_ (0, myname, "Found file named ^a, skipping to next file.",
			     attribute_file_name);

		if code = 0
		then do;
		     call iox_$close (tape_input_switch, code);
		     if code = 0
		     then call iox_$open_file (tape_input_switch, Sequential_input, open_description, "0"b, code);
		     end;

		end;
	     end;					/* do while */

	if code ^= error_table_$no_file
	then call com_err_ (code, myname, "Reading the tape searching for files.");

	tape_archive_table.table_is_consistent = "1"b;

	call ta_table_mgr_$copy_and_unlock (table_ptr, Ptable_ptr, code);
	if code ^= 0
	then call com_err_ (code, myname, "Unable to unlock the table.");

	table_ptr = Ptable_ptr;
	call hcs_$truncate_seg (table_ptr, currentsize (tape_archive_table) + 1, (0));
	call hcs_$set_bc_seg (table_ptr, currentsize (tape_archive_table) * 4, (0));
	call hcs_$set_safety_sw_seg (table_ptr, "1"b, (0));

DONE:
	call cleaner;
	return;
%page;
/* We have successfully read in the attribute file and the tape is positioned
at the beginning of the data file. We need to parse the attribute file and fill
in the tape_archive_table.component section */

process_file:
     proc;

dcl  binary_segment bit (1) aligned;

	if long_sw
	then call com_err_$suppress_name (0, myname, "Processing file ^a.", ta_attributes.names (1));

	tape_archive_table.n_components, tape_archive_table.n_component_slots = tape_archive_table.n_components + 1;
	component_ptr = addr (tape_archive_table.component_table (tape_archive_table.n_components));

	component.safety_switch = ta_attributes.safety_switch;
	component.pad = ""b;
	component.tape_file_name = data_file_name;
	component.entry_name = ta_attributes.names (1);
	component.date_time_archived = current_time;	/* not in table, use now */
	component.date_time_branch_modified = ta_attributes.dtem;
	component.date_time_dumped = ta_attributes.dtd;
	component.bitcount_author = "???";		/* ??? not in table */
	component.attribute_file_no = attribute_file_number;
	component.uid = ta_attributes.uid;
	component.future_expansion (*) = ""b;

	component.previous_instance_backchain = 0;
	component.associated_request_index = 0;
	component.date_time_deleted = ""b;
	component.future_expansion (*) = ""b;

	component.file_length = 0;
	component.n_tape_records = 0;
	component.no_final_newline = "0"b;
	binary_segment = "0"b;

/*
read the data file to see how long it is, the recording mode, and if we
can read the entire file
*/
	call iox_$read_record (tape_input_switch, data_seg_ptr, max_chars_in_seg, n_chars_read, code);
	do while (code = 0);
	     component.no_final_newline = (substr (data_seg, n_chars_read, 1) = NL);
	     component.n_tape_records = component.n_tape_records + divide (n_chars_read + 8191, 8192, 35, 0);
	     component.file_length = component.file_length + n_chars_read;
	     if ^binary_segment
	     then binary_segment = (verify (substr (data_seg, 1, n_chars_read), collate ()) > 0);

	     call iox_$read_record (tape_input_switch, data_seg_ptr, max_chars_in_seg, n_chars_read, code);
	     if code = error_table_$short_record
	     then code = 0;
	     end;
	if code ^= error_table_$end_of_info
	then do;
	     call com_err_ (code, myname, "Reading data file ^a.", ta_attributes.names (1));
	     return;
	     end;
	else code = 0;

	component.file_length = divide (component.file_length + 4095, 4096, 35, 0);
						/* length in Multics records */

	tape_archive_table.total_records = tape_archive_table.total_records + component.file_length;
	tape_archive_table.last_tape_file_no = tape_archive_table.last_tape_file_no + 1;

	if binary_segment
	then component.recording_mode = "binary";
	else if volume_type = "ibm"
	     then component.recording_mode = "ebcdic";
	     else component.recording_mode = "ascii";

	component.valid = "1"b;

	return;
     end process_file;
%page;
process_table:
     proc;

dcl  done bit (1) aligned;
dcl  first_found fixed bin;
dcl  new_component_ptr ptr;
dcl  (i,j) fixed bin;

	table_number = fixed (substr (attribute_file_name, length (TABLE_FILE_PREFIX)+1, 4));
	if long_sw
	then call com_err_$suppress_name (0, myname, "Processing table ^i", table_number);

	call iox_$read_record (tape_input_switch, data_seg_ptr, max_chars_in_seg, n_chars_read, code);
	if code ^= 0
	then if code ^= error_table_$short_record
	     then do;
		call com_err_ (code, myname, "Reading table ^i.", table_number);
		return;
		end;
	     else code = 0;

	if data_seg_ptr -> tape_archive_table.version_number ^= tape_archive_version_4
	then do;
	     call com_err_ (error_table_$unimplemented_version, myname,
		"Found table version ^i, expecting version ^i. Skipping to next file.",
		data_seg_ptr -> tape_archive_table.version_number, tape_archive_version_4);
	     return;
	     end;

/* Loop through all entries in the table. If an entry in the table matches
what we read in recently, use the information from the read-in table to update
the information in the table we are building, as not all the component
information is stored in the attribute files. Logically deleted files will come
back, as will files that are replaced by ones further down the tape. The user
will have to clean this up, as we have no idea from mtape_ whether any portions
of the tape were skipped, thus loosing the backchain indices in the table. */

	first_found = 1;
	do i = 1 to data_seg_ptr -> tape_archive_table.n_component_slots;
	     new_component_ptr = addr (data_seg_ptr -> tape_archive_table.component_table (i));
	     if new_component_ptr -> component.valid
	     then do;
		done = "0"b;
		do j = first_found to tape_archive_table.n_component_slots while (^done);
		     component_ptr = addr (tape_archive_table.component_table (j));
		     if component.valid
		     then if new_component_ptr -> component.tape_file_name = component.tape_file_name
			then do;			/* same file, use data not found on tape */
			     component.bitcount_author = new_component_ptr -> component.bitcount_author;
			     component.date_time_archived = new_component_ptr -> component.date_time_archived;
			     first_found = j + 1;	/* for next time through loop */
			     done = "1"b;
			     end;
		     end;				/* do j */
		end;
	     end;					/* do i */

	tape_archive_table.last_table_no = table_number;
	tape_archive_table.date_time_tape_modified = data_seg_ptr -> tape_archive_table.date_time_tape_modified;
	tape_archive_table.date_time_last_compacted = data_seg_ptr -> tape_archive_table.date_time_last_compacted;

	return;
     end process_table;
%page;
cleaner:
     proc;

	if temp_ptrs (1) ^= null
	then call release_temp_segments_ (myname, temp_ptrs, (0));

	if tape_input_switch ^= null
	then do;
	     call iox_$close (tape_input_switch, (0));
	     if retain_sw
	     then do;
		tape_archive_table.mount_lock = get_lock_id_ ();
		tape_archive_table.highest_mount_type = Read;
		end;
	     else call iox_$detach_iocb (tape_input_switch, (0));
	     tape_input_switch = null;
	     end;

	call ta_table_mgr_$unlock (Ptable_ptr, (0));

	return;
     end cleaner;
%page;
%include iox_dcls;
%include iox_modes;
%include query_info_;
%include mtape_file_status;
%include tape_archive_attributes;
%include tape_archive_table_dcl;
%page;
/* Arguments */

dcl  arg_array (*) char (168) parameter;
dcl  code fixed bin (35) parameter;
dcl  max_chars_in_seg fixed bin (21);
dcl  Ptable_ptr ptr parameter;
dcl  table_name char (*) parameter;

/* Automatic */

dcl  answer char (32) varying;
dcl  arg char (168);
dcl  attach_description char (256);
dcl  attribute_file_name char (32);
dcl  attribute_file_number fixed bin;
dcl  attribute_seg_ptr ptr;
dcl  1 automatic_fst aligned like mtape_fst;
dcl  current_time bit (36);
dcl  data_file_name char (32);
dcl  data_file_number fixed bin;
dcl  data_seg_ptr ptr;
dcl  density fixed bin;
dcl  force_sw bit (1) aligned;
dcl  i fixed bin;
dcl  io_module char (10);
dcl  long_sw bit (1) aligned;
dcl  n_chars_read fixed bin (21);
dcl  n_volids fixed bin;
dcl  nargs fixed bin;
dcl  open_description char (168);
dcl  retain_sw bit (1) aligned;
dcl  table_number fixed bin;
dcl  tape_input_switch ptr;
dcl  temp_ptrs (3) ptr;
dcl  temp_table_ptr ptr;
dcl  volid (8) char (32);
dcl  volume_type char (4);

/* Based */

dcl  data_seg char (max_chars_in_seg) based (data_seg_ptr);

/* Builtins */

dcl  addr builtin;
dcl  binary builtin;
dcl  bit builtin;
dcl  clock builtin;
dcl  codeptr builtin;
dcl  collate builtin;
dcl  currentsize builtin;
dcl  dim builtin;
dcl  divide builtin;
dcl  fixed builtin;
dcl  hbound builtin;
dcl  length builtin;
dcl  null builtin;
dcl  substr builtin;
dcl  unspec builtin;
dcl  verify builtin;

/* Conditions */

dcl  cleanup condition;

/* Static */

dcl  ATTRIBUTE_FILE_PREFIX char (13) int static options (constant) init ("ATTRIBUTEFILE");
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$end_of_info fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  error_table_$no_file fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$not_detached fixed bin (35) ext static;
dcl  error_table_$short_record fixed bin (35) ext static;
dcl  error_table_$too_many_args fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  myname char (32) int static options (constant) init ("tape_archive");
dcl  NL char (1) int static options (constant) init ("
");
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  TABLE_FILE_PREFIX char (13) int static options (constant) init ("ONLINE-TABLE-");

/* Entries */

dcl  com_err_ ext entry options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  command_query_ entry () options (variable);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_lock_id_ entry () returns (bit (36) aligned);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$set_safety_sw_seg entry (ptr, bit (1), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  resource_info_$canonicalize_name entry (char (*), char (*), char (*), fixed bin (35));
dcl  ta_table_mgr_$copy_and_unlock entry (ptr, ptr, fixed bin (35));
dcl  ta_table_mgr_$lock_and_copy entry (ptr, ptr, char (*), fixed bin, fixed bin (35));
dcl  ta_table_mgr_$unlock entry (ptr, fixed bin (35));

     end ta_reconstruct_table_;
