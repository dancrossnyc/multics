/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* asum_create_segment_ -- program to create (if needed) and initialize
   one segment of the as_user_message. Note that this program is NOT
   used by a process reading that wants to initiate a new segment,
   only by a process that KNOWS that the segment in question has not
   yet been used in the current session. Thus it cheerfully truncates
   segments that already exist. */

/* format: style5,indcomtxt */

/* Written 2/20/85, BIM */

asum_create_segment_:
        procedure (P_segment_index, P_segment_ptr);

        declare P_segment_index	fixed bin;      /* Which segment do we create ? */
        declare P_segment_ptr		pointer;

%include asum_data_;
%include as_user_message_system;
%include access_mode_values;
%page;

        declare code		fixed bin (35);
        declare saved_privileges	bit (36) aligned;
        declare segment_entryname	char (32);
        declare seg_ptr		pointer;
        declare first		bit (1) aligned;

        declare admin_gate_$set_privileges
				entry (bit (36) aligned,
				bit (36) aligned);
        declare admin_gate_$reset_privileges
				entry (bit (36) aligned);
        declare asum_error_		entry options (variable);
					      /* signals a condition, unwinding */
        declare delete_$path		entry (character (*), character (*),
				bit (36) aligned, character (*),
				fixed binary (35));
        declare hcs_$create_branch_	entry (char (*), char (*), ptr,
				fixed bin (35));
        declare hcs_$replace_acl	entry (char (*), char (*), ptr,
				fixed bin, bit (1), fixed bin (35));
        declare hcs_$truncate_seg	entry (ptr, fixed bin (19),
				fixed bin (35));
        declare initiate_file_	entry (character (*), character (*),
				bit (*), pointer, fixed binary (24),
				fixed binary (35));
        declare pathname_		entry (character (*), character (*))
				returns (character (168));
        declare error_table_$noentry	fixed bin (35) ext static;

        declare (
	      sys_info$seg_privilege,
	      sys_info$dir_privilege
	      )			bit (36) aligned external;

        declare cleanup		condition;

        dcl     addr		builtin;
        dcl     string		builtin;
        dcl     substr		builtin;
%page;


        first = "0"b;
        go to COMMON;
first:
        entry (P_segment_ptr);

        first = "1"b;
COMMON:
/**** Assume caller is at validation level 1 */
        saved_privileges = ""b;
        on cleanup
	      begin;
	      if substr (saved_privileges, 36, 1) = "1"b then
		    call admin_gate_$reset_privileges (saved_privileges);
	      end;

        if ^first then
	      do;
	      as_user_message_segment_name.constant =
		AS_USER_MESSAGE_SEGMENT_NAME_CONSTANT;
	      as_user_message_segment_name.index = P_segment_index;

	      segment_entryname = string (as_user_message_segment_name);
	      end;
        else
	      segment_entryname = AS_USER_MESSAGE_SYSTEM_NAME;

RETRY_INITIATE:
        call initiate_file_ (asum_data_$db_dir, segment_entryname, RW_ACCESS,
	  seg_ptr, (0), code);
        if code ^= error_table_$noentry & code ^= 0     /* Something is busted */
	  then
	      call PROBLEM_SEGMENT;		      /* ACL, or seg-fault, or ?dir? */

        if code = error_table_$noentry then
	      call CREATE_SEGMENT;

/**** We get here with the segment initiated. */

        call hcs_$truncate_seg (seg_ptr, 0, code);
        if code ^= 0 then
	      call asum_error_ (code, "asum_create_segment_",
		"Failed to truncate segment ^a",
		pathname_ (asum_data_$db_dir, segment_entryname));

/**** The segment now exists and is empty. The message segment
      primitives provide no entrypoint to initialize an empty
      segment. They initialize it when you add something.
      So at this point we hand the segment up to our caller,
      who has the data to write the first message. */

        P_segment_ptr = seg_ptr;
        return;
%page;

PROBLEM_SEGMENT:
        procedure;


        if asum_data_$db_multiclass then
	      call admin_gate_$set_privileges (sys_info$seg_privilege
		| sys_info$dir_privilege, saved_privileges);

        call delete_$path (asum_data_$db_dir, segment_entryname, "101110"b, "",
	  code);

        if code ^= 0 then
	      call asum_error_ (code, "asum_create_segment_",
		"Segment ^a exists, but cannot be initiated or deleted.",
		pathname_ (asum_data_$db_dir, segment_entryname));

        end PROBLEM_SEGMENT;

%page;

CREATE_SEGMENT:
        procedure;

        if asum_data_$db_multiclass & ^substr (saved_privileges, 36, 1)
					      /* might be already set */
	  then
	      call admin_gate_$set_privileges (sys_info$seg_privilege
		| sys_info$dir_privilege, saved_privileges);

        call hcs_$create_branch_ (asum_data_$db_dir, segment_entryname,
	  addr (asum_data_$db_cbi), code);
        if code ^= 0 then
	      call asum_error_ (code, "asum_create_segment_",
		"Failed to append ^a",
		pathname_ (asum_data_$db_dir, segment_entryname));

        code = 0;
        if asum_data_$db_multiclass then
	      call hcs_$replace_acl (asum_data_$db_dir, segment_entryname,
		addr (asum_data_$acl_entries), asum_data_$n_acl_entries,
		"1"b, code);
        if code ^= 0 then
	      call asum_error_ (code, "asum_create_segment_",
		"Failed to replace the ACL of ^a",
		pathname_ (asum_data_$db_dir, segment_entryname));
        if substr (saved_privileges, 36, 1) = "1"b then
	      call admin_gate_$reset_privileges (saved_privileges);
        go to RETRY_INITIATE;			      /* Okay, its there now */

        end CREATE_SEGMENT;
        end asum_create_segment_;
