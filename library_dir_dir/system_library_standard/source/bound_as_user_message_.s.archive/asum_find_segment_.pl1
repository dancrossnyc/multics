/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* asum_find_segment_ -- per-process finder of existing segments.
   assumes that asum_data_$system_info_ptr is set.
   tolerates asum_data_$process_info_ptr = null ();
*/

/* format: style5,indcomtxt */

/**** Written 1985-02-20 by BIM */

asum_find_segment_:
        procedure (P_segment_index, P_segment_ptr);

        declare P_segment_index	fixed bin;      /* Which segment do we create ? */
        declare P_segment_ptr		pointer;

        dcl     null		builtin;
        dcl     string		builtin;

%include asum_data_;
%include as_user_message_system;
%include access_mode_values;
%page;

        declare code		fixed bin (35);
        declare segment_entryname	char (32);
        declare seg_ptr		pointer;
        declare first		bit (1) aligned;

        declare asum_error_		entry options (variable);
					      /* signals a condition, unwinding */

        declare initiate_file_	entry (character (*), character (*),
				bit (*), pointer, fixed binary (24),
				fixed binary (35));
        declare pathname_		entry (character (*), character (*))
				returns (character (168));
%page;

        first = "0"b;
        go to COMMON;

first:
        entry;
        first = "1"b;
COMMON:
        as_user_message_perprocess_info_ptr = asum_data_$process_info_ptr;
        as_user_message_system_info_ptr = asum_data_$system_info_ptr;

        if ^first then
	      do;
	      as_user_message_segment_name.constant =
		AS_USER_MESSAGE_SEGMENT_NAME_CONSTANT;
	      as_user_message_segment_name.index = P_segment_index;

	      segment_entryname = string (as_user_message_segment_name);
	      end;
        else
	      segment_entryname = AS_USER_MESSAGE_SYSTEM_NAME;

        seg_ptr = null ();
        if ^first then
	      if asum_data_$process_info_ptr ^= null () then
		    call look_in_perprocess_info;

        if seg_ptr = null () then
	      do;
	      call initiate_file_ (asum_data_$db_dir, segment_entryname,
		RW_ACCESS, seg_ptr, (0), code);
	      if code ^= 0 then
		    if ^first then
			  call asum_error_ (code, "asum_find_segment_",
			      "Missing segment index ^d", P_segment_index)
			      ;
		    else
			  call asum_error_ (code, "asum_find_segment_",
			      "Missing as_user_message_system_data");
	      if asum_data_$process_info_ptr ^= null () then
		    if ^first then
			  as_user_message_perprocess_info
			      .mseg_ptr (P_segment_index) = seg_ptr;
		    else
			  asum_data_$system_info_ptr = seg_ptr;

	      end;

        if ^first then
	      P_segment_ptr = seg_ptr;
        return;

look_in_perprocess_info:
        procedure;

        if as_user_message_perprocess_info.mseg_ptr (P_segment_index) ^= null ()
	  then
	      seg_ptr =
		as_user_message_perprocess_info.mseg_ptr (P_segment_index);
        return;

        end look_in_perprocess_info;

        end asum_find_segment_;

