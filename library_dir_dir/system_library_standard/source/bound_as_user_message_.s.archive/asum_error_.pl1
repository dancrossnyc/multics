/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* asum_error_ -- general error trap */

/* format: style2 */

/**** Written 1985-02-20 by BIM */

asum_error_:
     procedure options (variable);

	declare error_switch	 bit (1) aligned;
	declare as_user_message_error_ condition;

	declare admin_gate_$syserr	 entry options (variable);
	declare cu_$arg_list_ptr	 entry returns (ptr);
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare convert_status_code_	 entry (fixed binary (35), character (8) aligned, character (100) aligned);
	declare ioa_$general_rs	 entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21),
				 bit (1) aligned, bit (1) aligned);


	declare ioa_		 entry () options (variable);

%include asum_data_;
%include syserr_constants;


	declare code_ptr		 pointer;
	declare code		 fixed bin (35) based (code_ptr);
	declare error_message	 char (100) aligned;
	declare message_1		 char (1000);
	declare name_ptr		 ptr;
	declare name_length		 fixed bin (21);
	declare name		 char (name_length) based (name_ptr);


	error_switch = "1"b;
	go to COMMON;
log:
     entry;
	error_switch = "0"b;

COMMON:
	call cu_$arg_ptr (1, code_ptr, (0), (0));
	if code ^= 0
	then call convert_status_code_ (code, "", error_message);
	else error_message = "";

	call cu_$arg_ptr (2, name_ptr, name_length, (0));
	message_1 = "";
	call ioa_$general_rs (cu_$arg_list_ptr (), 3, 4, message_1, (0), "0"b, "0"b);
	if asum_data_$db_multiclass
	then call admin_gate_$syserr (LOG, "^a: ^a ^a", name, error_message, message_1);
	else call ioa_ ("^a: ^a ^a", name, error_message, message_1);
	if error_switch
	then signal as_user_message_error_;
     end asum_error_;
