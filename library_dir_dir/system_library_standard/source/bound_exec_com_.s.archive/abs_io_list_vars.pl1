/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
abs_io_list_vars: proc (A_abs_data_ptr, A_parsed_args_ptr, A_error_msg, A_code);

/* Does &list_variables for abs_io_v2_get_line. Similar to the logic in the value_list command. */
/* Written 06/07/83 by Steve Herbst */


/* Parameters */

dcl (A_abs_data_ptr, A_parsed_args_ptr) ptr;
dcl A_error_msg char (*);
dcl A_code fixed bin (35);

/* Based */

dcl arg char (arg_len) based (arg_ptr);
dcl based_area area based (area_ptr);

/* Automatic */

dcl (default_sw, exclude_first_sw, match_arg_sw, match_sw, val_sw, var_sw) bit (1) aligned;

dcl (area_ptr, arg_ptr) ptr;

dcl (i, name_index) fixed bin;
dcl arg_len fixed bin (21);
dcl code fixed bin (35);

/* External */

dcl error_table_$badstar fixed bin (35) ext;
dcl error_table_$badsyntax fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;

/* Entries */

dcl check_star_name_$entry entry (char(*), fixed bin(35));
dcl get_system_free_area_ entry returns (ptr);
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl requote_string_ entry (char(*)) returns(char(*));
dcl value_$list entry (ptr, bit(36) aligned, ptr, ptr, ptr, fixed bin(35));

/* Builtins */

dcl (index, null, substr, unspec) builtin;

/* Conditions */

dcl cleanup condition;
%page;
	abs_data_ptr = A_abs_data_ptr;
	parsed_args_ptr = A_parsed_args_ptr;
	A_code = 0;

	match_info_ptr, value_list_info_ptr = null;

	exclude_first_sw, match_sw, match_arg_sw, val_sw, var_sw = "0"b;
	alloc_name_count, alloc_max_name_len = 0;

	if parsed_args_ptr ^= null then
	     do i = 1 to parsed_args.count;

		arg_ptr = parsed_args.ptr (i);
		arg_len = parsed_args.len (i);

		if index (arg, "&") = 1 then

		     if arg = "&exclude" | arg = "&ex" | arg = "&match" then do;
			i = i + 1;
			if i > parsed_args.count then call error ("No value specified for " || arg);
			if ^match_sw & (arg = "&exclude" | arg = "&ex") then exclude_first_sw = "1"b;
			match_sw = "1"b;
			if arg = "&match" then match_arg_sw = "1"b;
			arg_ptr = parsed_args.ptr (i);
			arg_len = parsed_args.len (i);
NAME:
			alloc_name_count = alloc_name_count + 1;
			alloc_max_name_len = max (alloc_max_name_len, arg_len);
		     end;

		     else if arg = "&value" | arg = "&val" then val_sw = "1"b;

		     else if arg = "&variable" | arg = "&var" then var_sw = "1"b;

		     else call error ("Invalid &list_variables control argument " || arg);

		else do;
		     match_sw, match_arg_sw = "1"b;
		     go to NAME;
		end;
	     end;

	if ^val_sw & ^var_sw then val_sw, var_sw = "1"b;	/* default is to print both var name and value */

	default_sw = (alloc_name_count = 0);
	if default_sw then do;
	     alloc_name_count = 1;
	     alloc_max_name_len = 2;
	end;
	else if exclude_first_sw then alloc_name_count = alloc_name_count + 1;
						/* if &exclude is first, start by matching "**" */

/* Allocate and fill the match structure */

	area_ptr = get_system_free_area_ ();

	on cleanup call clean_up;

	allocate match_info in (based_area) set (match_info_ptr);

	unspec (match_info) = "0"b;
	match_info.version = match_info_version_1;
	match_info.name_count = alloc_name_count;
	match_info.max_name_len = alloc_max_name_len;

	if default_sw | exclude_first_sw then do;
	     name_index = 1;
	     match_info.exclude_sw (1), match_info.regexp_sw (1) = "0"b;
	     match_info.name (1) = "**";
	end;
	else name_index = 0;

	if ^default_sw then do i = 1 to parsed_args.count;

	     arg_ptr = parsed_args.ptr (i);
	     arg_len = parsed_args.len (i);

	     if index (arg, "&") = 1 then do;

		if arg = "&exclude" | arg = "&ex" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "1"b;
MATCH_ARG:
		     i = i + 1;
MATCH_NAME:
		     arg_ptr = parsed_args.ptr (i);
		     arg_len = parsed_args.len (i);
		     if substr (arg, 1, 1) = "/" & substr (arg, arg_len, 1) = "/" & arg ^= "/" then do;
			match_info.regexp_sw (name_index) = "1"b;
			match_info.name (name_index) = substr (arg, 2, arg_len - 2);
		     end;
		     else do;
			call check_star_name_$entry (arg, code);
			if code = error_table_$badstar then
			     call error ("Invalid starname arg to &list_variables: " || arg);
			match_info.regexp_sw (name_index) = "0"b;
			match_info.name (name_index) = arg;
		     end;
		end;

		else if arg = "&match" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "0"b;
		     go to MATCH_ARG;
		end;
	     end;

	     else do;
		name_index = name_index + 1;
		match_info.exclude_sw (name_index) = "0"b;
		go to MATCH_NAME;
	     end;
	end;

	call value_$list (abs_data.variables_ptr, "01"b, match_info_ptr, area_ptr, value_list_info_ptr, code);
	if code ^= 0 then
	     if code = error_table_$nomatch then call ioa_ ("No variables set.");
	     else do;
		A_error_msg = "";
		A_code = code;
	     end;

/* Print the results */

	else do i = 1 to value_list_info.pair_count;

	     if var_sw then call ioa_$nnl ("^2x^a^[^30t^]",
		substr (value_list_info.chars, value_list_info.name_index (i), value_list_info.name_len (i)),
		val_sw);
	     if val_sw then call ioa_ ("^a", requote_string_ (
		substr (value_list_info.chars, value_list_info.value_index (i), value_list_info.value_len (i))));
	     else call ioa_ ("");
	end;
RETURN:
	call clean_up;

	return;
%page;
clean_up: proc;

	if match_info_ptr ^= null then free match_info_ptr -> match_info in (based_area);
	if value_list_info_ptr ^= null then free value_list_info_ptr -> value_list_info in (based_area);

end clean_up;
%page;
error: proc (P_str);

dcl P_str char (*);

	A_error_msg = P_str;
	A_code = error_table_$badsyntax;

	go to RETURN;

end error;
%page;
%include abs_io_data;
%page;
%include abs_io_expand;
%page;
%include value_structures;


end abs_io_list_vars;
