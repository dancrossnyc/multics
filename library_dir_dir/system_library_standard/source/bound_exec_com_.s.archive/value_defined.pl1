/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


value_defined: vdf: proc;

/* Written 11/17/80 by S. Herbst */

dcl arg char (arg_len) based (arg_ptr);
dcl return_arg char (return_len) varying based (return_ptr);

dcl name char (name_len) based (name_ptr);

dcl (seg_dn, seg_path) char (168);
dcl seg_en char (32);
dcl ME char (32) int static options (constant) init ("value");

dcl call_switches bit (36) aligned;
dcl (af_sw, defined_sw, got_name_sw, path_sw) bit (1);

dcl (arg_ptr, name_ptr, return_ptr, seg_ptr) ptr;

dcl (arg_len, name_len, return_len) fixed (21);
dcl (arg_count, i) fixed;
dcl (code, code1) fixed (35);

dcl error_table_$badopt fixed (35) ext;
dcl error_table_$not_act_fnc fixed (35) ext;
dcl error_table_$oldnamerr fixed (35) ext;

dcl complain entry variable options (variable);

dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
dcl ioa_ entry options (variable);
dcl value_$defined entry (ptr, bit (36) aligned, char (*), fixed (35)) returns (bit (1));
dcl value_$get_path entry (char (*), fixed (35));

dcl (index, null, substr) builtin;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;

	got_name_sw, path_sw = "0"b;
	call_switches = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then

		if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call complain (0, ME, "No value specified for -name.");
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     got_name_sw = "1"b;
		     name_ptr = arg_ptr;
		     name_len = arg_len;
		end;

		else if arg = "-pathname" | arg = "-pn" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call complain (0, ME, "No value specified for -pathname.");
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     call expand_pathname_$add_suffix (arg, "value", seg_dn, seg_en, code);
		     if code ^= 0 then do;
			call complain (code, ME, "^a", arg);
			return;
		     end;
		     path_sw = "1"b;
		end;

		else if arg = "-permanent" | arg = "-perm" then substr (call_switches, 2, 1) = "1"b;

		else if arg = "-perprocess" | arg = "-pp" then substr (call_switches, 1, 1) = "1"b;

		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else if got_name_sw then do;
USAGE:		if af_sw then call active_fnc_err_$suppress_name (0, ME,
		     "Usage:  [value_defined name {-control_args}]");
		else call com_err_$suppress_name (0, ME, "Usage:  value_defined name {-control_args}");
		return;
	     end;

	     else do;
		got_name_sw = "1"b;
		name_ptr = arg_ptr;
		name_len = arg_len;
	     end;
	end;

	if ^got_name_sw then go to USAGE;

	if substr (call_switches, 1, 2) = "00"b then substr (call_switches, 1, 2) = "11"b;  /* default is both */

	if path_sw then do;
	     call hcs_$initiate (seg_dn, seg_en, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then do;
		call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		return;
	     end;
	end;
	else seg_ptr = null;			/* default: user's default seg if -perm */

/* Do the work */

	defined_sw = value_$defined (seg_ptr, call_switches, name, code);

	if code ^= 0 then do;
	     if code = error_table_$oldnamerr then call complain (code, ME, "^a", name);
	     else if seg_ptr = null then do;
		call value_$get_path (seg_path, code1);
		if code1 ^= 0 then seg_path = "";
		call complain (code, ME, "Default value segment ^a", seg_path);
	     end;
	     else call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
	     return;
	end;

	if af_sw then
	     if defined_sw then return_arg = "true";
	     else return_arg = "false";

	else call ioa_ ("^[true^;false^]", defined_sw);

	return;

end value_defined;
