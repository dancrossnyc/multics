/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-01-19,TLNguyen), approve(89-01-19,MCR8051),
     audit(89-02-03,Parisek), install(89-02-27,MR12.3-1015):
     Accept a starname whose length is longer than 32 characters
     (entryname length) when specifying the -match or -exclude
     control argument.
                                                   END HISTORY COMMENTS */


value_list: vls: proc;

/* Written 04/15/81 by S. Herbst */
/* Fixed bug in vls -all 06/02/82 S. Herbst */
/* Added -depth, changed to omit pushed values by default 07/26/84 S. Herbst */
/* Added -brief, changed to report nomatch's for individual args 07/27/84 S. Herbst */
/* Fixed -data erroneous "not found" error message 12/17/84 Steve Herbst */

%include check_star_name;
%include value_structures;

/* Constants */

dcl ME char (32) aligned int static options (constant) init ("value_list");
dcl PERPROCESS_SW bit (36) int static options (constant) init ("100000000000000000000000000000000000"b);


/* Based */

dcl arg char (arg_len) based (arg_ptr);
dcl return_arg char (return_len) varying based (return_ptr);


/* Automatic */

dcl based_area area based (area_ptr);

dcl (seg_dn, seg_path) char (168);
dcl seg_en char (32);
dcl num_str char (16);

dcl call_switches bit (36) aligned;
dcl (af_sw, all_sw, bad_starname_sw, brief_sw, data_only_sw, default_sw, exclude_first_sw) bit (1);
dcl (listed_data_sw, listed_sw, match_sw, match_arg_sw, path_sw, some_sw, some_data_sw, val_sw, var_sw) bit (1);

dcl (area_ptr, arg_ptr, return_ptr, seg_ptr) ptr;

dcl (arg_count, i, j, k, name_index) fixed bin;
dcl (bottom_index, more_count, print_count, push_depth, same_count, top_index) fixed bin;
dcl starname_type fixed bin (2);
dcl (arg_len, return_len) fixed bin (21);
dcl code fixed bin (35);

dcl complain entry variable options (variable);


/* External */

dcl error_table_$bad_conversion fixed bin (35) ext;
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;
dcl error_table_$not_act_fnc fixed bin (35) ext;
dcl error_table_$oldnamerr fixed bin (35) ext;

dcl active_fnc_err_ entry options (variable);
dcl check_star_name_ entry (char (*), bit (36) aligned, fixed bin (2), fixed bin (35));
dcl check_star_name_$entry entry (char (*), fixed bin (35));
dcl com_err_ entry options (variable);
dcl cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl get_system_free_area_ entry returns (ptr);
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl pathname_ entry (char (*), char (*)) returns (char (168));
dcl requote_string_ entry (char (*)) returns (char (*));
dcl value_$get_path entry (char (*), fixed bin (35));
dcl value_$list entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed (35));
dcl value_$list_data_names entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed (35));

dcl (index, length, max, min, null, rtrim, substr, unspec) builtin;

dcl cleanup condition;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;
	else if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     code = 0;
	end;
	else do;
	     call com_err_ (code, ME);
	     return;
	end;

	area_ptr = get_system_free_area_ ();
	match_info_ptr, seg_ptr, value_list_info_ptr = null;

	on cleanup call clean_up ();

	all_sw, brief_sw, data_only_sw, exclude_first_sw, match_sw, match_arg_sw, path_sw, val_sw, var_sw = "0"b;
	call_switches = "0"b;
	push_depth = 1;				/* default = list latest only */
	alloc_name_count, alloc_max_name_len = 0;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then
		if arg = "-all" | arg = "-a" then all_sw = "1"b;

		else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;

		else if arg = "-data" then data_only_sw = "1"b;

		else if arg = "-depth" | arg = "-dh" then do;
		     i = i + 1;
		     if i > arg_count then call give_up ("No value specified for " || arg);
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     push_depth = cv_dec_check_ (arg, code);
		     if code ^= 0 then do;
			call complain (error_table_$bad_conversion, ME, "-depth value ^a", arg);
			return;
		     end;
		end;

		else if arg = "-exclude" | arg = "-ex" | arg = "-match" then do;
		     i = i + 1;
		     if i > arg_count then call give_up ("No value specified for " || arg);
		     if ^match_sw & (arg = "-exclude" | arg = "-ex") then exclude_first_sw = "1"b;
		     match_sw = "1"b;
		     if arg = "-match" then match_arg_sw = "1"b;
NAME_NEXT:
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
NAME:
		     alloc_name_count = alloc_name_count + 1;
		     alloc_max_name_len = max (alloc_max_name_len, arg_len);
		end;

		else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;

		else if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then call give_up ("No value specified for -name");
		     match_sw, match_arg_sw = "1"b;
		     go to NAME_NEXT;
		end;

		else if arg = "-pathname" | arg = "-pn" then do;
		     i = i + 1;
		     if i > arg_count then call give_up ("No value specified for -pathname");
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     call expand_pathname_$add_suffix (arg, "value", seg_dn, seg_en, code);
		     if code ^= 0 then do;
			call complain (code, ME, "^a", arg);
			return;
		     end;
		     path_sw = "1"b;
		end;

		else if arg = "-permanent" | arg = "-perm" then substr (call_switches, 2, 1) = "1"b;

		else if arg = "-perprocess" | arg = "-pp" then substr (call_switches, 1, 1) = "1"b;

		else if arg = "-value" | arg = "-val" then val_sw = "1"b;

		else if arg = "-variable" | arg = "-var" then var_sw = "1"b;

		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else do;				/* individual name to be matched */
		match_sw, match_arg_sw = "1"b;
		go to NAME;
	     end;
	end;

	if ^val_sw & ^var_sw then
	     if af_sw then
		call give_up ("Either -var or -val required to the active function.");
	     else var_sw, val_sw = "1"b;

	if substr (call_switches, 1, 2) = "00"b then substr (call_switches, 1, 2) = "11"b;
						/* default is both */

	if path_sw then do;
	     call hcs_$initiate (seg_dn, seg_en, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then do;
		call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		return;
	     end;
	end;

	default_sw = (alloc_name_count = 0);
	if default_sw then do;
	     alloc_name_count = 1;
	     alloc_max_name_len = 2;
	end;
	else if exclude_first_sw then alloc_name_count = alloc_name_count + 1;
						/* if -exclude is first, start by matching "**" */

/* Allocate and fill the match structure */

	allocate match_info in (based_area) set (match_info_ptr);

	unspec (match_info) = "0"b;
	match_info.version = match_info_version_1;
	match_info.name_count = alloc_name_count;
	match_info.max_name_len = alloc_max_name_len;
	name_index = 0;

	if default_sw | exclude_first_sw then do;
	     name_index = 1;
	     match_info.exclude_sw (1), match_info.regexp_sw (1) = "0"b;
	     match_info.name (1) = "**";
	end;

	bad_starname_sw = "0"b;

	if ^default_sw then
	     do i = 1 to arg_count;

		call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		if index (arg, "-") = 1 then do;

		     if arg = "-exclude" | arg = "-ex" then do;
			name_index = name_index + 1;
			match_info.exclude_sw (name_index) = "1"b;
MATCH_NAME:
			i = i + 1;
			call cu_$arg_ptr (i, arg_ptr, arg_len, code);
			if substr (arg, 1, 1) = "/" & substr (arg, arg_len, 1) = "/" & arg ^= "/" then do;
						/* The specified STR for -ex is a qedx regular expression */
			     match_info.regexp_sw (name_index) = "1"b;
			     match_info.name (name_index) = substr (arg, 2, arg_len - 2);
			end;
			else do;                      /* The specified STR for either -ex or -match is a starname. */
                                                            /* We allow lengths of longer than 32 chars. */
			     call check_star_name_ (arg, (CHECK_STAR_IGNORE_LENGTH), starname_type, code);
			     if code ^= 0 then do;
				bad_starname_sw = "1"b;
				call complain (code, ME, "^a", arg);
			     end;
			     match_info.regexp_sw (name_index) = "0"b;
						/* a starname */
			     match_info.name (name_index) = arg;
			end;
		     end;


		     else if arg = "-match" then do;
			name_index = name_index + 1;
			match_info.exclude_sw (name_index) = "0"b;
			go to MATCH_NAME;
		     end;

		     else if arg = "-name" | arg = "-nm" then do;
			i = i + 1;
			call cu_$arg_ptr (i, arg_ptr, arg_len, code);
PLAIN_NAME:
			name_index = name_index + 1;
			match_info.exclude_sw (name_index), match_info.regexp_sw (name_index) = "0"b;
			match_info.name (name_index) = arg;
		     end;

		     else if arg = "-depth" | arg = "-dh" |
			arg = "-pathname" | arg = "-pn" then i = i + 1;
		end;

		else go to PLAIN_NAME;
	     end;

	if bad_starname_sw then go to RETURN;

	listed_data_sw, listed_sw = "0"b;
	if data_only_sw then go to LIST_DATA;

	call value_$list (seg_ptr, call_switches, match_info_ptr, area_ptr, value_list_info_ptr, code);
	if code ^= 0 then do;
ERROR:
	     if code = error_table_$nomatch then
		if all_sw & ^listed_data_sw then go to LIST_DATA;
		else if af_sw then return;		/* return null string */
		else call complain (0, ME, "No matching names.");
	     else do;
		if seg_ptr = null then
		     call value_$get_path (seg_path, (0));
		else seg_path = pathname_ (seg_dn, seg_en);
		call complain (code, ME, "^a", seg_path);
	     end;
	     go to RETURN;
	end;

	listed_sw = "1"b;				/* Note that we have had data to list.			*/

/* Show the results */

	do i = 1 to value_list_info.pair_count;

	     do j = i to value_list_info.pair_count while
		(substr (value_list_info.chars, value_list_info.name_index (j), value_list_info.name_len (j)) =
		 substr (value_list_info.chars, value_list_info.name_index (i), value_list_info.name_len (i)));
	     end;
	     same_count = j - i;			/* number of pushed values for same var name */

	     if same_count > 1 then do;		/* some pushed values */

		top_index = i;
		print_count = min (same_count, push_depth);
		more_count = same_count - print_count;
		bottom_index = top_index + print_count - 1;

		do k = top_index to bottom_index;

		     call print_one (k, top_index, bottom_index, more_count);
		end;

		i = j - 1;
	     end;

	     else call print_one (i, i, i, 0);

	end;

	if ^all_sw then go to DONE_LISTING;		/* Don't list data variables unless requested.		*/

	free value_list_info_ptr -> value_list_info in (based_area);

LIST_DATA:
	listed_data_sw = "1"b;

	call value_$list_data_names (seg_ptr, call_switches, match_info_ptr, area_ptr, value_list_info_ptr, code);
	if code ^= 0 then
	     if listed_sw & code = error_table_$nomatch then go to RETURN;
	     else go to ERROR;

	do i = 1 to value_list_info.pair_count;

	     do j = i to value_list_info.pair_count while
		(substr (value_list_info.chars, value_list_info.name_index (j), value_list_info.name_len (j)) =
		 substr (value_list_info.chars, value_list_info.name_index (i), value_list_info.name_len (i)));
	     end;
	     same_count = j - i;			/* number of pushed values for same var name */

	     if same_count > 1 then do;		/* some pushed values */
		top_index = i;
		print_count = min (same_count, push_depth);
		more_count = same_count - print_count;
		bottom_index = top_index + print_count - 1;

		do k = top_index to bottom_index;

		     call print_one_data (k, top_index, bottom_index, more_count);
		end;

		i = j - 1;
	     end;

	     else call print_one_data (i, i, i, 0);

	end;
DONE_LISTING:
	if ^brief_sw then do;			/* check for individual match failures */

	     match_info.name_count = 1;		/* do this name by name */
	     match_info.exclude_sw (1) = "0"b;

	     do i = 1 to arg_count;

		call cu_$arg_ptr (i, arg_ptr, arg_len, 0);
		if index (arg, "-") = 1 then do;
		     if arg = "-depth" | arg = "-dh" |
		        arg = "-exclude" | arg = "-ex" |  /* ignore the -exclude and -match names */
		        arg = "-match" |
		        arg = "-pathname" | arg = "-pn" then i = i + 1;
		end;
		else do;
		     match_info.name (1) = arg;
		     some_sw, some_data_sw = "0"b;
		     if ^data_only_sw then do;
			if value_list_info_ptr ^= null then free value_list_info in (based_area);

			call value_$list (seg_ptr, call_switches, match_info_ptr, area_ptr,
			     value_list_info_ptr, code);
			some_sw = (code = 0);
		     end;
		     if all_sw | data_only_sw then do;
			if value_list_info_ptr ^= null then free value_list_info in (based_area);

			call value_$list_data_names (seg_ptr, call_switches, match_info_ptr, area_ptr,
			     value_list_info_ptr, code);
			     some_data_sw = (code = 0);
		     end;
		     if ^some_sw & ^some_data_sw then do;
			call check_star_name_$entry (arg, code);
			if code = 0 then call complain (error_table_$oldnamerr, ME, "^a", arg);
			else call complain (error_table_$nomatch, ME, "^a", arg);
		     end;
		end;
	     end;
	end;
RETURN:
	call clean_up;

	return;
%page;
clean_up:
     proc;

	if match_info_ptr ^= null then free match_info_ptr -> match_info in (based_area);
	if value_list_info_ptr ^= null then free value_list_info_ptr -> value_list_info in (based_area);

	if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, 0);

     end clean_up;





give_up:
     proc (P_str);

dcl P_str char (*);

	call complain (0, ME, "^a", P_str);
	go to RETURN;

     end give_up;
%page;
print_one: proc (P_index, P_top_index, P_bottom_index, P_more_count);

dcl (P_index, P_top_index, P_bottom_index, P_more_count) fixed;

	if af_sw then do;
	     if var_sw then do;
		if length (return_arg) > 0 then return_arg = return_arg || " ";
		return_arg = return_arg || requote_string_ (
		     substr (value_list_info.chars,
			value_list_info.name_index (P_index),
			value_list_info.name_len (P_index)));
	     end;
	     if val_sw then do;
		if length (return_arg) > 0 then return_arg = return_arg || " ";
		return_arg = return_arg || requote_string_ (
		     substr (value_list_info.chars,
			value_list_info.value_index (P_index),
			value_list_info.value_len (P_index)));
	     end;
	end;

	else call ioa_ ("^[^[PP^]^5t^a^[^31.2t^a^]^;^3s^a^]^a", var_sw,
	     value_list_info.type_switches (P_index) & PERPROCESS_SW,
	     substr (value_list_info.chars,
		value_list_info.name_index (P_index),
		value_list_info.name_len (P_index)),
	     val_sw,
	     requote_string_ (
		substr (value_list_info.chars,
		     value_list_info.value_index (P_index),
		     value_list_info.value_len (P_index))),
	     pushed_message (P_index, P_top_index, P_bottom_index, P_more_count));

end print_one;
%page;
print_one_data: proc (P_index, P_top_index, P_bottom_index, P_more_count);

dcl (P_index, P_top_index, P_bottom_index, P_more_count) fixed bin;

	if af_sw then do;
	     if var_sw then do;
		if length (return_arg) > 0 then return_arg = return_arg || " ";
		return_arg = return_arg || requote_string_ (
		     substr (value_list_info.chars,
			value_list_info.name_index (P_index),
			value_list_info.name_len (P_index)));
	     end;
	     if val_sw then do;			/* give length in words rather than the value */
		if length (return_arg) > 0 then return_arg = return_arg || " ";
		call ioa_$rsnnl ("^d", num_str, length (num_str), value_list_info.value_len (P_index));
		return_arg = return_arg || rtrim (num_str);
	     end;
	end;

	else call ioa_ ("^[^[PP^]^5t^a^[^31.2t^]^;^3s^]^[(^d word^[s^])^]^a", var_sw,
	     value_list_info.type_switches (P_index) & PERPROCESS_SW,
	     substr (value_list_info.chars,
		value_list_info.name_index (P_index),
		value_list_info.name_len (P_index)),
	     val_sw, val_sw, value_list_info.value_len (P_index),
	     value_list_info.value_len (P_index) ^= 1,
	     pushed_message (P_index, P_top_index, P_bottom_index, P_more_count));

end print_one_data;
%page;
pushed_message: proc (P_index, P_top_index, P_bottom_index, P_more_count) returns (char (32) varying);

dcl (P_index, P_top_index, P_bottom_index, P_more_count) fixed;
dcl message char (32) varying;

	message = "";
	if P_top_index ^= P_bottom_index then do;
	     if P_index = P_top_index then message = " (current value)";
	     else if P_index = P_bottom_index then
		if P_more_count > 0 then
		     call ioa_$rsnnl (" (^d more pushed value^[s^])", message, length (message),
			P_more_count, P_more_count > 1);
		else message = " (earliest value)";
	end;
	else if P_more_count > 0 then
	     call ioa_$rsnnl (" (^d pushed value^[s^])", message, length (message),
		P_more_count, P_more_count > 1);

	return (message);

end pushed_message;

end value_list;
