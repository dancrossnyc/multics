/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


value_path: vp: proc;

/* Constants */

dcl ME char (32) int static options (constant) init ("value_path");

/* Based */

dcl return_arg char (return_len) varying based (return_ptr);

/* Automatic */

dcl path char (168);
dcl af_sw bit (1) aligned;
dcl return_ptr ptr;
dcl return_len fixed bin (24);
dcl arg_count fixed bin;
dcl code fixed bin (35);

/* External */

dcl error_table_$not_act_fnc fixed bin (35) ext;

dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (24), fixed bin (35));
dcl ioa_ entry options (variable);
dcl value_$get_path entry (char (*), fixed bin (35));

dcl rtrim builtin;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	end;
	else do;
	     af_sw = "1"b;
	     return_arg = "";
	end;

	if arg_count ^= 0 then do;
	     if af_sw then call active_fnc_err_$suppress_name (0, ME, "Usage:  [vp]");
	     else call com_err_$suppress_name (0, ME, "Usage:  vp");
	     return;
	end;

	call value_$get_path (path, code);
	if code ^= 0 then do;
	     if af_sw then call active_fnc_err_ (code, ME);
	     else call com_err_ (code, ME);
	     return;
	end;

	if af_sw then return_arg = rtrim (path);
	else call ioa_ ("^a", path);

end value_path;
