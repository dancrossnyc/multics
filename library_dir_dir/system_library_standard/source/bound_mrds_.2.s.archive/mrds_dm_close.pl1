/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* DESCRIPTION:

   This procedure closes a data model that  has  been  opened  by  a
   previous call to either the dmd_ or the mmi_ opening entry.

   There are three entries. mrds_dm_close for use by internal  mrds.
   close_dm  for  external use by dmd_. close_model for external use
   bu mmi_. The external entries check for the user be a DBA if  the
   database is secured.

*/

/* PARAMETERS:

   data_model_ptr - - (input) ptr, for the mrds_dm_close and close_dm entries,
   the pointer returned by a call to dmd_$open

   open_name - - (input) char(*), for the close_model entry,
   the open name used in the call to mmi_$open_model

   code - - (output) fixed bin (35), the error status encoding

*/

/* HISTORY:

   Modified by J. A. Weeldreyer to  add  abort  entry  --  November,
   1976.

   Modified by Oris Friesen to accomodate new version data bases  --
   October 1978

   Modified by R. Lackey June 1979 to ad mode to get_opening

   Modified by Jim Gray - - Feb. 1980, to call the  old  version  of
   close_dm,  if  the  data_model_ptr  points  to an iocb_ptr in the
   area_linker, since this means data_model vfile of the old version
   was used.

   81-02-12 Jim Gray : added  need  for  caller  to  be  DBA  if  db
   secured, and call made to external dmd_$close_dm which should not
   be used by mrds. internal mrds should only call rmds_dm_close.

   81-04-22 Jim Gray : added close_model entry for mmi_, and removed
   use   of   mrds_dm_open_table_mgr   to   remove   opening  number
   restrictions.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

/* BEGIN CHANGE 81-02-12 *********************************************** */

mrds_dm_close: procedure (data_model_ptr_a, code_a);

/* entry to be used by internal mrds calls */

	internal_call = "1"b;

	data_model_ptr = data_model_ptr_a;

	call common ();

	code_a = code;

	return;




close_dm: entry (data_model_ptr_b, code_b);

/* entry to be used by external dmd_ callers,
   user must be a DBA if db is secured */

	internal_call = "0"b;

	data_model_ptr = data_model_ptr_b;

	call common ();

	code_b = code;

	return;

/* END CHANGE 81-02-12 ******************************************** */

/* BEGIN CHANGE 81-04-22 ********************************************** */

close_model: entry (open_name, code_c);

/* this entry closes a model that has been opened by a call to
   mmi_$open_model, by disassociating the open name from the model pointer
   It uses the close_dm entry so that the user must be a DBA,
   if the database has been secured. */

	call mu_open_name_manager$get_model_pointer (open_name, model_type, model_ptr, code_c);
	if code_c = 0 then do;

		call close_dm (model_ptr, code_c);
		if code_c = 0 then do;

			call mu_open_name_manager$delete_open_name (open_name, code_c);

		     end;

	     end;

	return;

/* END CHANGE 81-04-22 *********************************************** */

common: procedure ();

	code = 0;
	call hcs_$fs_get_path_name (data_model_ptr, db_path, ldn, model_name, code);
	if code ^= 0 then goto exit;

/* check for user being a DBA if database is secured */

	if ^internal_call then
	     call secured_db_check ();

exit:	return;

     end;

/* BEGIN CHANGE 81-02-12 ********************************************* */

secured_db_check: procedure ();

/* routine to check for the database being is a secured state,
   and if so, that the user is a DBA, and thus may use the external entry */

	if code ^= 0 then ;
	else if internal_call then ;
	else do;

/* get the secured state of the dataabase */

		call mrds_dm_db_secured$get_secured_status (data_model_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, code);
		if code ^= 0 then

		     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the secured state of database """, db_path, """.");

		else if ^database_state.secured then ;
		else do;

/* database secured, see if the user is a DBA */

			call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
			     mrds_authorization_structure_version, mrds_authorization_ptr, code);
			if code ^= 0 then

			     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				"Unable to get user class for database """, db_path, """.");

			else if mrds_authorization.administrator then ;
			else do;

/* not DBA on secured db, issue error */

				code = error_table_$insufficient_access;
				call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a ^a",
				     "The database """, db_path, """ has been secured,",
				     "so the caller must be a DBA to use direct model access.");

			     end;

		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr = null ();

     end;

/* END CHANGE 81-02-12 ************************************************ */

	declare NULL_OFFSET		 bit (18) init ((18)"1"b); /* mrds version of null offset */
	declare caller_name		 char (32) init ("mrds_dm_open"); /* name of calling routine */
	declare code		 fixed bin (35);	/* a standard Multics system status code */
	declare code_a		 fixed bin (35);	/* temp for mrds_dm_close entry */
	declare code_b		 fixed bin (35);	/* temp for close_dm entry */
	declare code_c		 fixed bin (35);	/* error code for the close_model entry */
	declare continue		 char (1) init ("c"); /* dont stop after print mesg */
	declare data_model_ptr	 ptr;		/* pointer to the data_model to be closed */
	declare data_model_ptr_a	 ptr;		/* temp for rmds_dm_close entry */
	declare data_model_ptr_b	 ptr;		/* temp for close_dm entry */
	declare db_path		 char (168);
	declare error_table_$insufficient_access fixed bin (35) ext; /* not DBA and db secured */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare info_ptr		 ptr init (null ());/* unused */
	declare internal_call	 bit (1);		/* on => called from mrds, not by dmd_ */
	declare ldn		 fixed bin;
	declare local_area		 area (1024);	/* space for db state, and user class info */
	declare mu_open_name_manager$delete_open_name entry (char (*), fixed bin (35)); /* disassociates open name */
	declare mu_open_name_manager$get_model_pointer entry (char (*), char (1), ptr, fixed bin (35)); /* gets model ptr from open name */
	declare model_name		 char (32);
	declare model_ptr		 ptr;
	declare model_type		 char (1);	/* type of opening */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if DBA */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare open_name		 char (*);	/* opening association name */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare (addr, empty, null, rtrim) builtin;

%include mdbm_db_model;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;

     end mrds_dm_close;
