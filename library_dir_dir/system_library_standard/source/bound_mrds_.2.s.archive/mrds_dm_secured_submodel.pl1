/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - February 1981

*/

mrds_dm_secured_submodel: procedure (db_dir, sm_dir, sm_name) returns (bit (1));

/* DESCRIPTION:

   This routine determines whether a given submodel resides under the
   secure.submodels directory in the database.
   It requires the path to the database, the submodel containing dir,
   and the submodel name, returning either true or false.
   This routine was written because it is common code used in several places,
   and the same algorithm was desired.
   It is not meant to be used externally to mrds, so absolute
   pathnames are requried.

*/

/* PARAMETERS:

   db_dir - - (input) char(*), the absolute path of the database

   sm_dir - - (input) char(*), the absolute path of the containing dir
   for the submodel in question.

   sm_name - - (input) char(*), the entryname of the submodel in question

   returned - - (output) bit(1), on => secured submodel in secure.submodels directory
   underneath the database dir

*/

/* check for the submodel being properly under the db */

	real_sm_dir = rtrim (db_dir) || ">" || mrds_data_$submodel_dir_name;
	if get_uid (sm_dir, sm_name, chase_links) = /* get uids, submodel + where should be */
	     get_uid (real_sm_dir, sm_name, dont_chase_links) then
	     answer = "1"b;				/* secured submodel */
	else answer = "0"b;				/* not a secure submodel */

	return (answer);

get_uid: procedure (dir, entry, chase_sw) returns (bit (36));

/* routine to get the unique identifier of an entry,
   chasing links or not as chase_sw is set */

	allocate status_branch set (status_ptr) in (work_area); /* this area init only for submodels */

	call hcs_$status_long (dir, entry, chase_sw, status_ptr, addr (work_area), temp_code);

	if temp_code ^= 0 & temp_code ^= error_table_$no_s_permission then
	     entry_uid = bit (chase_sw);		/* return junk if we cant get uid */
	else if chase_sw = dont_chase_links & status_ptr -> status_branch.short.type = Link then
	     entry_uid = bit (chase_sw);
	else entry_uid = status_ptr -> status_branch.long.uid;

	return (entry_uid);



	declare entry_uid		 bit (36);	/* returned unique id of entry */
	declare temp_code		 fixed bin (35);	/* unused err code, only effects of error reported */
	declare dir		 char (*);	/* directory of entry */
	declare entry		 char (*);	/* entry portion */
	declare chase_sw		 fixed bin (1);	/* 0 => dont, 1 => do chase links */

     end;

	declare addr		 builtin;
	declare bit		 builtin;
	declare empty		 builtin;
	declare rtrim		 builtin;
	declare answer		 bit (1);		/* returned answer, on => secured submodel */
	declare hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)); /* gets all info about entry */
	declare chase_links		 fixed bin (1) init (1); /*  1 => do chase links */
	declare dont_chase_links	 fixed bin (1) init (0); /* 0 => dont chase links */
	declare real_sm_dir		 char (168);	/* actual path to submodel dir from db */
	declare error_table_$no_s_permission fixed bin (35) ext; /* null access on dir */
	declare work_area		 area (2048);	/* space for status long info */
	declare db_dir		 char (*);	/* abs path to db */
	declare sm_dir		 char (*);	/* abs path to sm containing dir */
	declare sm_name		 char (*);	/* entryname of submodel */
	declare mrds_data_$submodel_dir_name char (16) char (16) ext; /* name of submodel directory */

%include status_structures;

     end;
