/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

mrds_dm_display_history: proc (I_mrds_dm_display_info_ptr, O_err_msg, O_err_code);

/*	     BEGIN_DESCRIPTION

   The purpose of this procedure is to display the restrucutring history
   maintained in the db_model.  If the database has not been restructured it
   says so.  If the database has been restructured more then once the list of
   entries are displayed in reverse chronalogical order.

   .           END_DESCRIPTION     */


/****^  HISTORY COMMENTS:
  1) change(82-06-02,Lackey), approve(), audit(), install():
     written.
  2) change(82-07-14,Lackey), approve(), audit(), install():
     changed length of entry_dis.inv from 40 chars to 64 chars to eliminate
     a stringsize condition.
  3) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Add more operation strings.
                                                   END HISTORY COMMENTS */


/*     PARAMETERS	       */

	dcl     I_mrds_dm_display_info_ptr ptr parameter;
	dcl     O_err_code		 fixed bin (35) parameter;
	dcl     O_err_msg		 char (*) parameter;

	O_err_code, code = 0;
	O_err_msg = "";
	mrds_dm_display_info_ptr = I_mrds_dm_display_info_ptr;
	dbm_ptr = mrds_dm_display_info.dbm_ptr;
	iocb_ptr = mrds_dm_display_info.output_iocb_ptr;

	if mrds_dm_display_info.version ^= MRDS_DM_DISPLAY_INFO_VERSION_1 then do;
		O_err_msg = "For mrds_dm_display_info.version";
		O_err_code = error_table_$unimplemented_version;
	     end;


/* Check for no restructuring   */

	else if db_model.last_restructuring_history_offset = NULL_OFFSET then
	     call ioa_$ioa_switch (iocb_ptr,
		"^/Database has never been restructured.^/^a",
		mrds_dm_display_info.db_path);




/* Display list in reverse order   */

	else do;

		call ioa_$ioa_switch (iocb_ptr, "^/HISTORY:");

		do rmdb_history_entry_ptr = pointer (dbm_ptr, db_model.last_restructuring_history_offset)
		     repeat pointer (dbm_ptr, rmdb_history_entry.offset_to_previous_entry)
		     while (rel (rmdb_history_entry_ptr) ^= NULL_OFFSET);

		     entry_dis.id = rmdb_history_entry.user_id;
		     call date_time_ (rmdb_history_entry.date_time_restructured, entry_dis.dt);
		     entry_dis.op = OPERATION_NAME (rmdb_history_entry.operation);
		     if RELATION_OPERATIONS (rmdb_history_entry.operation) then
			rel_name = "RELATION:        ";
		     else rel_name = "";
		     if (ATTRIBUTE_OPERATIONS (rmdb_history_entry.operation) & ^(RELATION_OPERATIONS (rmdb_history_entry.operation))
			& ^(RENAME_OPERATIONS (rmdb_history_entry.operation)))
		     then rel_name = "DOMAIN:          ";
		     if RENAME_OPERATIONS (rmdb_history_entry.operation)
		     then rel_name = "OLD NAME:        ";
		     entry_dis.inv = rel_name || rmdb_history_entry.object_name;

		     call iox_$put_chars (iocb_ptr, addr (entry_dis),
			length (string (entry_dis)), code);
		     if code ^= 0 then do;
			     O_err_msg = "While doing a put chars";
			     O_err_code = code;
			     return;
			end;

		     if rmdb_history_entry.secondary_object_name ^= "" then do;
			     if (ATTRIBUTE_OPERATIONS (rmdb_history_entry.operation) & ^(RENAME_OPERATIONS (rmdb_history_entry.operation))) then
				attr_name = "ATTRIBUTE:";
			     else if RENAME_OPERATIONS (rmdb_history_entry.operation) then
				attr_name = "NEW NAME: ";
			     else attr_name = "";

			     call ioa_$ioa_switch (iocb_ptr, "^21x^a^39t^a",
				attr_name, rmdb_history_entry.secondary_object_name);
			end;

		end;

	     call ioa_$ioa_switch (iocb_ptr, "");		/* Add line feed at end */
	     end;


	return;

%page;
	dcl     addr		 builtin;
	dcl     attr_name		 char (32) varying;
	dcl     code		 fixed bin (35);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     ioa_$ioa_switch	 entry () options (variable);
	dcl     iocb_ptr		 ptr;
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     length		 builtin;
	dcl     NULL_OFFSET		 bit (18) int static options (constant) init ((18)"1"b);
	dcl     pointer		 builtin;
	dcl     rel		 builtin;
	dcl     rel_name		 char (32) varying;
	dcl     string		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

	dcl     1 entry_dis		 unaligned,	/* Entry display */
		2 l1		 char (22) init ("
Restructured by:"),
		2 id		 char (32),
		2 l2		 char (22) init ("
Restructured on:"),
		2 dt		 char (16),
		2 l3		 char (22) init ("
Operation:"),
		2 op		 char (32),
		2 l4		 char (22) init ("
Involving:"),
		2 inv		 char (64),
		2 nl		 char (1) init ("
");

/* NOTE:   The RELATION_OPERATIONS and OPERATION_NAME dimentions must be kept the same */

	dcl     RELATION_OPERATIONS	 (11) bit (1) int static options (constant) init (
				 "1"b, "1"b, "1"b, "1"b,
				 "0"b, "0"b, "0"b, "0"b,
				 "0"b, "0"b, "1"b);

	dcl     ATTRIBUTE_OPERATIONS	 (11) bit (1) int static options (constant) init (
				 "0"b, "0"b, "1"b, "1"b,
				 "1"b, "1"b, "0"b, "0"b,
				 "1"b, "0"b, "0"b);

          dcl     RENAME_OPERATIONS      (11) bit (1) int static options (constant) init (
                                         "0"b, "0"b, "0"b, "0"b,
                                         "0"b, "0"b, "0"b, "0"b,
                                         "1"b, "1"b, "1"b);
	dcl     OPERATION_NAME	 (11) char (32) int static options (constant) init (
	        "ADD RELATION",	"DELETE RELATION",
	        "ADD INDEX",	"DELETE INDEX",
	        "ADD ATTRIBUTE",	"DELETE ATTRIBUTE",
	        "ADD DOMAIN",	"DELETE DOMAIN",
	        "RENAME ATTRIBUTE",	"RENAME DOMAIN",
	        "RENAME RELATION");
%page;
%include mrds_dm_display_info;
%page;
%include rmdb_history_entry;
%page;
%include mdbm_db_model;

     end mrds_dm_display_history;
