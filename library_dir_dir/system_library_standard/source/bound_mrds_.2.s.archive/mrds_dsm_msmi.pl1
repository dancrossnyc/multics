/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-18,Blair), approve(88-02-25,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Use "mrds" searchlist to find submodel.  SCP 6366.
                                                   END HISTORY COMMENTS */


mrds_dsm_msmi: msmi_: proc;

/* DESCRIPTION:

   This module implements the msmi_ interface of MRDS. It  allows  a
   user  to  determine the data model mapping and access permissions
   that are defined in a MRDS submodel as  well  as  certain  things
   about  the submodel itself. At the same time it protects a secure
   database by not returning model information to anyone but DBAs.

   Before a submodel can be referenced it must be "readied" via  the
   open_submodel  entry.  When  the submodel is not longer needed it
   should be "closed" via the close_submodel entry.

   Entries:

   .   mrds_dsm_msmi:
   .        should never be called.

   .   close_submodel:
   .        closes the submodel file to further output, removes  the
   .        opening_name from the open name name list, and frees the
   .        open_info structure.

   .   get_attribute_data:
   .        loads the mrds_dsm_attribute_data  structure  with  data
   .        about the attributes in the specified relation.

   .   get_relation_data:
   .        loads the  mrds_dsm_relation_data  structure  with  data
   .        about all the relations in the submodel view.

   .   get_submodel_info:
   .        loads the mrds_dsm_submodel_info structure with  general
   .        information about the submodel.

   .   open_submodel:
   .        sets up a submodel so the other entries  can  use  it  -
   .        opens  the  submodel  vfile  for reading, determines the
   .        security state of the database and the authorization  of
   .        the  caller  and  associates  an  opening_name  with  an
   .        allocated structure containing information needed by the
   .        rest  of  the  entries.  Also  the  first call sets up a
   .        temporary segment to  be  used  as  a  work  area.  This
   .        segment  remains  associated  with mrds_dsm_msmi for the
   .        life of the process.


   This   module   is   not   recursive    because    the    entries
   get_attribute_data  and  get_relation_data  use vfile subsets and
   cannot be recursive. It was decieded to make  the  entire  module
   non-recursive  instead of just parts of it to avoid complex rules
   when decieding what sequences could or could  not  be  recursive,
   i.e  a  call  to get_attribute_data cannot be interrupted to call
   get_relation_data but can be interrupted to call open_submodel.

   Known Bugs:

   Other Problems:

   .   The temp segment used to hold the msmi_area should go into  a
   .   lower  ring  so  that  the  open_info.return_model_stuff  bit
   .   cannot be twiddled.



   HISTORY:

   81-04-06 Davids: Coded.

   81-05-21  Rickie  E.  Brinegar:  Modified  to  use  the   changed
   .        mrds_dsm_relation_names.incl.pl1      which      changed
   .        dsm_relation_names to mrds_dsm_relation_names.

   81-06-01   Davids:   changed   mrds_dsm_header_str.incl.pl1    to
   .        mrds_dsm_header.incl.pl1
*/

/* PARAMETERS */

	dcl     attribute_data_ptr	 ptr;		/* (output) pointer to the attribute_data structure */
	dcl     code		 fixed bin (35);	/* (output) error code */
	dcl     dsm_path		 char (*);	/* (input) path relative or absolute to the submodel */
	dcl     opening_name	 char (*);	/* (input) unique identifing name for this opening */
	dcl     relation_data_ptr	 ptr;		/* (output) pointer to the relation_data structure */
	dcl     relation_name	 char (*);	/* (input) name of relation, used in get_attribute_data */
	dcl     str_version		 fixed bin;	/* (input) version of the submodel_info str
						   to be allocated and returned */
	dcl     submodel_info_ptr	 ptr;		/* (output) pointer to the submodel_info structure */
	dcl     users_area_ptr	 ptr;		/* (input) points to a freeing area */

/* AUTOMATIC */

	dcl     db_path		 char (168);	/* absolute path to the database that the submodel refers to */
	dcl     dsm_dirname		 char (168);	/* absolute path of the submodel's containing directory */
	dcl     dsm_entryname	 char (32);	/* entry name of the submodel */
	dcl     mrds_dsm_header_ptr	 ptr;		/* points to a copy of the submodels header record */
	dcl     dsm_iocb_ptr	 ptr;		/* pointer to the submodel's iocb */
	dcl     dsm_path_absolute	 char (168);	/* absolute path to the entry specified
						   by the parameter dsm_path */
	dcl     i			 fixed bin;	/* loop index */
	dcl     ignore_arg_char1	 char (1);	/* output argument returned from a call - never used */
	dcl     ignore_error	 fixed bin (35);	/* an error code that will be ignored */
	dcl     internal_error	 fixed bin (35) init (0); /* so as not to use the parameter code */
	dcl     local_area		 area (50);	/* local area for temporary allocations */
	dcl     01 local_area_info	 like area_info;	/* local copy of the area_info structure */
	dcl     name_not_deleted	 bit (1) unal;	/* indicates that the opening_name has not yet been
						   deleted from the open_name_manager - used in close_submodel */
	dcl     open_info_ptr	 ptr;		/* points to an open_info structure */
	dcl     open_info_ptr2	 ptr;		/* a copy of the open_info_ptr - used in close_submodel */

/* BASED */

	dcl     01 open_info	 based (open_info_ptr),
		02 iocb		 ptr,		/* pointer to this openings submodels iocb */
		02 return_model_stuff bit (1),	/* if true model info will be returned */
		02 dsm_path	 char (168);	/* absolute path of the submodel used
						   in the opening (may be a link) */
	dcl     msmi_area		 area (sys_info$max_seg_size) based (msmi_area_ptr);
						/* area for big allocations and
						   static stuff (open_info structures) */
	dcl     users_area		 area based (users_area_ptr); /* freeing area that the user has set up */

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     empty		 builtin;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;
          dcl     search                 builtin;		  
	dcl     unspec		 builtin;

/* CONDITIONS */

	dcl     area		 condition;
	dcl     cleanup		 condition;

/* CONSTANTS */

	dcl     DSM_SUFFIX		 char (3) init ("dsm") internal static options (constant);
          dcl     MRDS_SEARCHLIST        char (4) init ("mrds") internal static options (constant);
/* EXTERNAL STATIC */

	dcl     error_table_$area_too_small fixed bin (35) external static;
	dcl     error_table_$badcall	 fixed bin (35) external static;
	dcl     error_table_$no_record fixed bin (35) external static;
	dcl     error_table_$unimplemented_version fixed bin (35) external static;
	dcl     mrds_error_$not_freeing_area fixed bin (35) external static;
	dcl     mrds_error_$recursion_error fixed bin (35) external static;
	dcl     mrds_error_$unknown_relation_name fixed bin (35) external static;
	dcl     sys_info$max_seg_size	 fixed bin (35) external static;

/* INTERNAL STATIC */

	dcl     executing		 bit (1) unal init ("0"b) internal static; /* true while code is being executed - prevents recursion */
	dcl     msmi_area_ptr	 ptr init (null ()) internal static; /* points to a temporary segment in the pdir, set on the process's
						   first call to the open_submodel entry point.
						   Remains set for the life of the process */

/* ENTRIES */

	dcl     area_info_		 entry (ptr, fixed bin (35));
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), pointer, fixed bin (35));
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     mrds_dsm_determine_auth_sec entry (char (*), char (*), char (*)) returns (bit (1));
	dcl     mrds_dsm_open$read_share entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_read_header	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_read_header$db_path entry (ptr, char (168), fixed bin (35));
	dcl     mrds_dsm_read_relation entry (char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_get_relation_names entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mu_open_name_manager$define_open_name entry (char (*), char (1), ptr, fixed bin (35));
	dcl     mu_open_name_manager$delete_open_name entry (char (*), fixed bin (35));
	dcl     mu_open_name_manager$get_model_pointer entry (char (*), char (1), ptr, fixed bin (35));

%include area_info;
%page;
%include mrds_dsm_attribute_data;
%page;
%include mrds_dsm_header;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_dsm_relation_data;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_dsm_submodel_info;

/* MAIN ENTRY POINT */

	call report_error (error_table_$badcall,
	     "The entry point mrds_dsm_msmi$mrds_dsm_msmi (msmi_$msmi_) should never be called", "", "", "");

	return;

close_submodel: entry (opening_name, code);

/*
   where:
   .   opening_name: (input) unique identifing name for this opening
   .   code: (output) error code

   This entry "closes" a submodel so that it may not  be  referenced
   by  any  of  the  other  entry  points.  This entails closing the
   submodel  vfile  to  further  output,  freeing   the   associated
   open_info  structure  and  deleting  the  opening_name  from  the
   open_name manager - this will also allow the opening_name  to  be
   used again.

   All   of   the   work   is   actually   done   by   the   routine
   cleanup_close_submodel.

   The variables open_info_ptr2 and  name_not_deleted  are  used  as
   switches  to be sure that the submodel is "closed" and to prevent
   errors from trying to  do  things  twice.  There  are  of  course
   windows where the operation has been performed but the switch not
   yet set, these windows are as small as possible.
*/

	code = 0;					/* initialize output variables */

	if executing				/* This module cannot be recursive */
	then internal_error = mrds_error_$recursion_error;
	else do;
		open_info_ptr = null ();		/* initialize working variables */
		open_info_ptr2 = null ();
		name_not_deleted = "1"b;

		on cleanup call cleanup_close_submodel; /* setup the cleanup condition handler */
		executing = "1"b;			/* and set flag to prevent recursion */

		call cleanup_close_submodel;		/* do the actual work */
		code = internal_error;		/* set output parameters */
	     end;					/* executing flag is reset in cleanup_close_submodel */

	return;

get_attribute_data: entry (opening_name, relation_name, users_area_ptr, str_version, attribute_data_ptr, code);

/*
   where:
   .   opening_name: (input) unique indetifing name for a opening
   .   relation_name: (input) name of relation whose attribute  data
   .        is wanted
   .   users_area_ptr: (input) pointer to a freeing area set  up  by
   .        the caller
   .   str_version: (input) version of  the  mrds_dsm_attribute_data
   .        structure expected to be allocated.
   .   attribute_data_ptr:    (output)      pointer      to      the
   .        mrds_dsm_attribute_data structure which was allocated
   .   code: (output) error code.

   This entry point returns a pointer to the mrds_dsm_attribute_data
   structure,  which  contains information about the attributes in a
   specific submodel relation. If the submodel refers  to  a  secure
   database  and the caller is not a DBA the names of the attributes
   in the model will be returned as spaces.

   The structure is allocated in  a  freeing  area  set  up  by  the
   caller who is responsible for freeing it.
*/



	code = 0;					/* initialize output variables */
	attribute_data_ptr = null ();

	if executing				/* This module cannot be recursive */
	then internal_error = mrds_error_$recursion_error;
	else do;
		mrds_dsm_attribute_data_ptr = null ();	/* initialize working variables */
		relation_block_ptr = null ();

		on cleanup call cleanup_get_attribute_data; /* setup the cleanup condition handler */
		executing = "1"b;			/* and set flag to prevent recursion */

		call verify_input_parameters (opening_name, /* verify some of the input */
		     users_area_ptr, str_version,	/* parameters and get the open_info pointer */
		     mrds_dsm_attribute_data_structure_version,
		     open_info_ptr, internal_error);
		if internal_error ^= 0
		then goto exit_get_attribute_data;

		call mrds_dsm_read_relation (relation_name, /* get the relation and attribute */
		     msmi_area_ptr, relation_block_ptr, /* data for the specified relation */
		     open_info.iocb, internal_error);
		if internal_error ^= 0
		then do;
			if internal_error = error_table_$no_record
			then internal_error = mrds_error_$unknown_relation_name;
			goto exit_get_attribute_data;
		     end;

		on area /* trap the area condition while */
		     begin;			/* allocating in the user's area */
			internal_error = error_table_$area_too_small;
			goto exit_get_attribute_data;
		     end;
		mrds_dsm_attribute_data_num_atts =
		     relation_block.no_rb_attributes;
		allocate mrds_dsm_attribute_data
		     in (users_area) set (mrds_dsm_attribute_data_ptr);
		revert area;

		unspec (mrds_dsm_attribute_data) = "0"b;/* initialize the allocated structure */
		mrds_dsm_attribute_data.number_of_attributes =
		     mrds_dsm_attribute_data_num_atts;
		mrds_dsm_attribute_data.version =
		     mrds_dsm_attribute_data_structure_version;

		do i = 1 to mrds_dsm_attribute_data_num_atts; /* load the structure */

		     mrds_dsm_attribute_data.attributes (i).submodel_attribute_name =
			relation_block.attribute_info (i).dsm_attr_name;
						/* supress model names if the caller is not a DBA */
		     if open_info.return_model_stuff	/* and the database is secure */
		     then mrds_dsm_attribute_data.attributes (i).model_attribute_name =
			     relation_block.attribute_info (i).dm_attr_name;
		     else mrds_dsm_attribute_data.attributes (i).model_attribute_name = " ";

		     mrds_dsm_attribute_data.attributes (i).read_access =
			relation_block.attribute_info (i).attr_access.read;
		     mrds_dsm_attribute_data.attributes (i).modify_access =
			relation_block.attribute_info (i).attr_access.modify;
		     mrds_dsm_attribute_data.attributes (i).null_access =
			relation_block.attribute_info (i).attr_access.null;
		     mrds_dsm_attribute_data.attributes (i).mbz1 = "0"b;
		end;

		free relation_block_ptr -> relation_block;

		attribute_data_ptr = mrds_dsm_attribute_data_ptr;

exit_get_attribute_data:
		code = internal_error;
		executing = "0"b;			/* no longer executing */

	     end;

	return;

get_relation_data: entry (opening_name, users_area_ptr, str_version, relation_data_ptr, code);

/*
   where:
   .   opening_name: (input) unique indetifing name for a opening
   .   users_area_ptr: (input) pointer to a freeing area set  up  by
   .        the caller
   .   str_version: (input) version  of  the  mrds_dsm_relation_data
   .        structure expected to be allocated.
   .   relation_data_ptr:     (output)      pointer      to      the
   .        mrds_dsm_relation_data structure which was allocated
   .   code: (output) error code.

   This entry point returns a pointer to the  mrds_dsm_relation_data
   structure  which  contains information about all of the relations
   in a submodel view. If the submodel refers to a  secure  database
   and  the  caller  is not a DBA then the names of the relations in
   the model are returned as blanks.

   The structure is allocated in  a  freeing  area  set  up  by  the
   caller who is responsible for freeing it.
*/



	code = 0;					/* initiate output variables */
	relation_data_ptr = null ();

	if executing				/* This module cannot be recursive */
	then internal_error = mrds_error_$recursion_error;
	else do;
		mrds_dsm_relation_data_ptr = null ();	/* initialize working variables */
		mrds_dsm_relation_names_ptr = null ();
		relation_block_ptr = null ();

		on cleanup call cleanup_get_relation_data; /* setup cleanup condition handler */
		executing = "1"b;			/* and set flag to prevent recursion */

		call verify_input_parameters (opening_name, /* verify the input parameters */
		     users_area_ptr, str_version,	/* and get the open_info pointer */
		     mrds_dsm_relation_data_structure_version,
		     open_info_ptr, internal_error);
		if internal_error ^= 0
		then goto exit_get_relation_data;

		call mrds_dsm_get_relation_names /* get a list of all the */
		     (msmi_area_ptr, mrds_dsm_relation_names_ptr, /* relations in the submodel */
		     open_info.iocb, internal_error);
		if internal_error ^= 0
		then do;
			call report_error (internal_error, /* this error should never occur */
			     "PROGRAM LOGIC ERROR^/Could not get the list of submodel relation names",
			     "", "", "");
			goto exit_get_relation_data;
		     end;

		on area /* trap the area condition while */
		     begin;			/* allocating in the user's area */
			internal_error = error_table_$area_too_small;
			goto exit_get_relation_data;
		     end;
		mrds_dsm_relation_data_num_rels = mrds_dsm_relation_names.nrels;
		allocate mrds_dsm_relation_data in (users_area) set (mrds_dsm_relation_data_ptr);
		revert area;

		unspec (mrds_dsm_relation_data) = "0"b; /* initialize the allocated structure */
		mrds_dsm_relation_data.number_of_relations =
		     mrds_dsm_relation_data_num_rels;
		mrds_dsm_relation_data.version =
		     mrds_dsm_relation_data_structure_version;

		do i = 1 to mrds_dsm_relation_names.nrels; /* load the structure */

		     call mrds_dsm_read_relation /* get relation and attribute data */
			(mrds_dsm_relation_names.relation (i), /* ingore attribute data */
			msmi_area_ptr, relation_block_ptr,
			open_info.iocb, internal_error);
		     if internal_error ^= 0
		     then do;
			     call report_error (internal_error, /* this error should never occur */
				"PROGRAM LOGIC ERROR^/Could not read the relation record for relation ^a",
				mrds_dsm_relation_names.relation (i), "", "");
			     goto exit_get_relation_data;
			end;

		     mrds_dsm_relation_data.relations (i).submodel_relation_name = mrds_dsm_relation_names.relation (i);
						/* surpress model names if the caller is not a DBA */
		     if open_info.return_model_stuff	/* and the database is secure */
		     then mrds_dsm_relation_data.relations (i).model_relation_name = relation_block.dm_rel_name;
		     else mrds_dsm_relation_data.relations (i).model_relation_name = " ";

		     mrds_dsm_relation_data.relations (i).append_access = relation_block.rel_access.append;
		     mrds_dsm_relation_data.relations (i).delete_access = relation_block.rel_access.delete;
		     mrds_dsm_relation_data.relations (i).null_access = relation_block.rel_access.null;
		     mrds_dsm_relation_data.relations (i).mbz1 = "0"b;

		     free relation_block_ptr -> relation_block;
		end;

		free mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names;

		relation_data_ptr = mrds_dsm_relation_data_ptr;

exit_get_relation_data:
		code = internal_error;
		executing = "0"b;			/* no longer executing */

	     end;

	return;

get_submodel_info: entry (opening_name, users_area_ptr, str_version, submodel_info_ptr, code);

/*
   where:
   .   opening_name: (input) unique indetifing name for a opening
   .   users_area_ptr: (input) pointer to a freeing area set  up  by
   .        the caller
   .   str_version: (input) version  of  the  mrds_dsm_relation_data
   .        structure expected to be allocated.
   .   relation_data_ptr:     (output)      pointer      to      the
   .        mrds_dsm_relation_data structure which was allocated
   .   code: (output) error code.

   This entry point returns a pointer to the  mrds_dsm_submodel_info
   structure  which  contains general information about the submodel
   associated with the opening_name.

   The structure is allocated in  a  freeing  area  set  up  by  the
   caller who is resp}onsible for freeing it.
*/


	code = 0;					/* initialize output variables */
	submodel_info_ptr = null ();

	if executing				/* This module cannot be recursive */
	then internal_error = mrds_error_$recursion_error;
	else do;
		mrds_dsm_submodel_info_ptr = null ();	/* initialize working variables */
		mrds_dsm_header_ptr = null ();

		on cleanup call cleanup_get_submodel_info; /* setup the cleanup condition handler */
		executing = "1"b;			/* and set flag to prevent recursion */

		call verify_input_parameters (opening_name, /* verify the input parameters */
		     users_area_ptr, str_version,	/* and get the open_info pointer */
		     mrds_dsm_submodel_info_structure_version,
		     open_info_ptr, internal_error);
		if internal_error ^= 0
		then goto exit_get_submodel_info;

		call mrds_dsm_read_header (msmi_area_ptr, /* get the info in the submodel header */
		     mrds_dsm_header_ptr, open_info.iocb,
		     internal_error);
		if internal_error ^= 0
		then do;
			call report_error (internal_error, /* this error should never occur */
			     "PROGRAM LOGIC ERROR^/Could not read the submodel header record",
			     "", "", "");
			goto exit_get_submodel_info;
		     end;

		on area /* trap the area condition while */
		     begin;			/* allocating in the user's area */
			internal_error = error_table_$area_too_small;
			goto exit_get_submodel_info;
		     end;
		allocate mrds_dsm_submodel_info in (users_area) set (mrds_dsm_submodel_info_ptr);
		revert area;

		unspec (mrds_dsm_submodel_info) = "0"b; /* initialize the allocated structure */
		mrds_dsm_submodel_info.version =
		     mrds_dsm_submodel_info_structure_version;
						/* load the structure */
		mrds_dsm_submodel_info.submodel_version =
		     mrds_dsm_header_ptr -> mrds_dsm_header.dsm_generator_version;
		mrds_dsm_submodel_info.database_path =
		     mrds_dsm_header_ptr -> mrds_dsm_header.database_pn;
		mrds_dsm_submodel_info.submodel_path =
		     open_info.dsm_path;
		mrds_dsm_submodel_info.date_time_created =
		     mrds_dsm_header_ptr -> mrds_dsm_header.date_time_generated;
		mrds_dsm_submodel_info.creator_id =
		     mrds_dsm_header_ptr -> mrds_dsm_header.creator_id;

		free mrds_dsm_header_ptr -> mrds_dsm_header;

		submodel_info_ptr = mrds_dsm_submodel_info_ptr;

exit_get_submodel_info:
		code = internal_error;
		executing = "0"b;			/* no longer executing */

	     end;

	return;

open_submodel: entry (opening_name, dsm_path, code);

/*
   where:
   .   opening_name: (input) unique identifing name for a opening
   .   dsm_path: (input) path relative or absolute to the submodel.
   .   code: (output) error code

   This entry point prepares a submodel so that it may be referenced
   by  the  other  entry  points  in  this module, it associates the
   opened submodel with the opening_name.

   It opens  the  submodel  for  shared  reading.  and  sets  up  an
   association  between  the  users unique identifier (opening_name)
   and the opening information (open_info). This opening information
   is  a  pointer to the submodels iocb and an indication of whether
   model information may be returned (only if the  database  is  not
   secure  or  if the database is secure and the user is a DBA), the
   submodel path is also saved.

   The open_info structure is allocated in a  temporary  segment  in
   the  process  directory.  This temporary segment is set up on the
   process's first call to this entry point and  remains  associated
   with this module for the life of the process.
*/
dcl       suffixed_name_$make entry (char(*), char(*), char(32), fixed bin(35));
dcl       search_paths_$find_dir entry (char(*), ptr, char(*), char(*), char(*), fixed bin(35));

	code = 0;					/* initialize output variables */

	if executing				/* this module cannot be recursive */
	then internal_error = mrds_error_$recursion_error;
	else do;
		dsm_iocb_ptr = null ();
		open_info_ptr = null ();

		on cleanup call cleanup_open_submodel;	/* setup the cleanup condition handler */
		executing = "1"b;			/* and set flag to prevent recursion */

		if msmi_area_ptr = null ()		/* if the msmi_area has not yet been set up - set it up */
		then do;
			call get_temp_segment_ ("mrds_dsm_msmi", msmi_area_ptr, internal_error);
			if internal_error ^= 0
			then do;
				call report_error (internal_error,
				     "Could not get a temp segment to hold opening information", "", "", "");
				goto exit_open_submodel;
			     end;
			else msmi_area_ptr -> msmi_area = empty (); /* define an empty area in the segment */
		     end;

		if search (dsm_path, "<>") = 0 then do;
		     call suffixed_name_$make (dsm_path, DSM_SUFFIX, dsm_entryname, internal_error);
		     if internal_error ^= 0 
			then goto exit_open_submodel;
		     call search_paths_$find_dir (MRDS_SEARCHLIST, null(), dsm_entryname, "", dsm_dirname, internal_error);
		     if internal_error ^= 0 
			then goto exit_open_submodel;
		     end;
		else do;
		     call expand_pathname_$add_suffix (dsm_path, /* add .dsm to the input path if its not */
			DSM_SUFFIX, dsm_dirname,		/* already there and expand it to get the */
			dsm_entryname, internal_error);	/* absolute path of the directory and entry name */
		     if internal_error ^= 0
			then goto exit_open_submodel;
		     end;
		dsm_path_absolute = rtrim (dsm_dirname) ||
		     ">" || dsm_entryname;
		call mrds_dsm_open$read_share /* open the submodel, allowing multiple readers */
		     (dsm_path_absolute, dsm_iocb_ptr, internal_error);
		if internal_error ^= 0
		then goto exit_open_submodel;

		call mrds_dsm_read_header$db_path /* get the absolute path of the db */
		     (dsm_iocb_ptr, db_path, internal_error); /* that the submodel is defined for */
		if internal_error ^= 0
		then do;
			call report_error (internal_error, /* this error should never occur */
			     "PROGRAM LOGIC ERROR^/Could not read submodel ^a>^a's" ||
			     " header to get the database path", dsm_dirname, dsm_entryname, "");
			call mrds_dsm_close$force (dsm_iocb_ptr);
			goto exit_open_submodel;
		     end;

		allocate open_info in (msmi_area) /* allocate the open_info structure */
		     set (open_info_ptr);		/* to store */
		open_info.iocb = dsm_iocb_ptr;	/* submodel iocb pointer */
		open_info.dsm_path = dsm_path_absolute; /* input submodel path and */
		open_info.return_model_stuff = /* whether to return model info or not */
		     mrds_dsm_determine_auth_sec (db_path,
		     dsm_dirname, dsm_entryname);

		call mu_open_name_manager$define_open_name (opening_name, /* assocate the opening_name */
		     "s", open_info_ptr, internal_error); /* with the open_info structure */
		if internal_error ^= 0		/* in case of error free the open_info structure */
		then free open_info_ptr -> open_info;

exit_open_submodel:
		code = internal_error;
		executing = "0"b;			/* no longer executing */
	     end;

	return;

cleanup_close_submodel: proc;

/*
   This procedure  "closes"  a  submodel,  that  is  it  closes  the
   submodel  vfile  to further output, frees the open_info structure
   and deletes the opening_name from the  name  list.  Because  this
   routine  is  also  a  cleanup  handler  and the goal is to always
   "close" the submodel special switches are set and tested.

   .        open_info_ptr: if not null then a call to
   .        get_model_ptr has been successfully made.

   .        open_info_ptr2:  if  not  null  then  the
   .        open_info  structure  has  not  yet  been
   .        freed.

   .        name_not_deleted: if "1"b then a call  to
   .        delete_name has not yet been made.
*/

	internal_error = 0;
	if open_info_ptr = null ()			/* if the open_info_ptr has not yet been obtained - get it */
	then do;
		call mu_open_name_manager$get_model_pointer (opening_name, ignore_arg_char1,
		     open_info_ptr, internal_error);
		open_info_ptr2 = open_info_ptr;
	     end;

	if internal_error = 0			/* if open_info_ptr was obtained without error */
	then do;
		if name_not_deleted			/* and the name has not yet been deleted */
		then do;				/* from the open_name list - delete it */
			call mu_open_name_manager$delete_open_name
			     (opening_name, internal_error);
			name_not_deleted = "0"b;
			if internal_error ^= 0	/* You should always be able to delete a */
			then do;			/* name which can get a model pointer */
				call report_error (internal_error, "PROGRAM LOGIC ERROR^/Could not delete" ||
				     " the opening name ^a the submodel HAS been closed but you cannot use" ||
				     " the opening name over again", opening_name, "", "");
				internal_error = 0;
			     end;
		     end;

		if open_info_ptr2 ^= null ()		/* free an allocated open_info structure */
		then do;
			call mrds_dsm_close$force /* close the submodel - without generating errors */
			     (open_info.iocb);
			free open_info_ptr2 -> open_info; /* and free the structure */
		     end;
	     end;

	executing = "0"b;

     end /* cleanup_close_submodel */;

cleanup_get_attribute_data: proc;

/*
   This procedure cleansup allocated structures in the event that  a
   cleanup    condition    is    signaled    while   executing   the
   get_attribute_data entry. It also resets  the  executing  bit  to
   allow the module to be recalled.
*/



	if relation_block_ptr ^= null ()		/* free an allocated relation_block structure */
	then free relation_block_ptr -> relation_block;

	if mrds_dsm_attribute_data_ptr ^= null ()	/* free an allocated mrds_dsm_attribute_data structure */
	then free mrds_dsm_attribute_data_ptr -> mrds_dsm_attribute_data;

	executing = "0"b;				/* allow the module to be recalled */

     end /* cleanup_get_attribute_data */;

cleanup_get_relation_data: proc;

/*
   This procedure cleansup allocated structures in the event that  a
   cleanup    condition    is    signaled    while   executing   the
   get_relation_data entry. It also resets the executing bit so that
   the moduled can be called again.
*/




	if mrds_dsm_relation_data_ptr ^= null ()	/* free an allocated mrds_dsm_relation_data structure */
	then free mrds_dsm_relation_data_ptr -> mrds_dsm_relation_data;

	if mrds_dsm_relation_names_ptr ^= null ()	/* free an allocated mrds_dsm_relation_names structure */
	then free mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names;

	if relation_block_ptr ^= null ()		/* free an allocated relation_block structure */
	then free relation_block_ptr -> relation_block;

	executing = "0"b;				/* allow the module to be called again */

     end /* cleanup_get_relation_data */;

cleanup_get_submodel_info: proc;

/*
   This procedure cleansup allocated structures in the event that  a
   cleanup    condition    is    signaled    while   executing   the
   get_submodel_info entry. It also resets the executing bit so  the
   module can be recalled.
*/



	if mrds_dsm_header_ptr ^= null ()		/* free an allocated mrds_dsm_header structure */
	then free mrds_dsm_header_ptr -> mrds_dsm_header;

	if mrds_dsm_submodel_info_ptr ^= null ()	/* free an allocated mrds_dsm_submodel structure */
	then free mrds_dsm_submodel_info_ptr -> mrds_dsm_submodel_info;

	executing = "0"b;				/* allow the module to be called again */

     end;						/* cleanup_get_submodel_info */

cleanup_open_submodel: proc;

/*
   This procedure cleansup  allocated  structures  and  closes  open
   files  in  the  event  that a cleanup condition is signaled while
   executing the open_submodel entry. It also resets  the  executing
   bit so the model can be recalled.
*/



	if dsm_iocb_ptr ^= null ()			/* if the submodel has been opened close it */
	then call mrds_dsm_close$force (dsm_iocb_ptr);

	if open_info_ptr ^= null ()
	then do;
		call mu_open_name_manager$delete_open_name /* the name may not have been added yet */
		     (opening_name, ignore_error);	/* so ignore any errors */
		free open_info_ptr -> open_info;	/* free an allocated open_info structure */
	     end;

	executing = "0"b;				/* allow the module to be recalled */

     end /* cleanup_open_submodel */;

verify_input_parameters: proc (opening_name, users_area_ptr, str_version, version_limit, open_info_ptr, icode);

/*
   This routine is used to verify the input parameters:

   .   opening_name: to be sure that  the  name  is  associated
   .        with a submodel opening

   .   users_area_ptr: to be sure that it points to  a  freeing
   .        area

   .   str_version: to be sure that the  requested  version  of
   .        the structure can be allocated  (assumes  that  all
   .        versions  of  the structure <= version_limit can be
   .        allocated

   the routine also returns the pointer to a open_info  structure  -
   provided that all the parameters are ok.
*/


/* PARAMETERS */

	dcl     opening_name	 char (*);	/* (input) name identifing the opening */
	dcl     users_area_ptr	 ptr;		/* (input) pointer to users area */
	dcl     str_version		 fixed bin;	/* (input) str version requested by user */
	dcl     version_limit	 fixed bin;	/* (input) maximum str version obtainable */
	dcl     open_info_ptr	 ptr;		/* (output) open_info associated with opening_name */
	dcl     icode		 fixed bin (35);	/* (output) error icode */


	icode = 0;

	call mu_open_name_manager$get_model_pointer /* get the open_info associated with the opening_name */
	     (opening_name, ignore_arg_char1, open_info_ptr, icode);
	if icode = 0
	then do;
		if users_area_ptr = null ()		/* check to be sure that the area */
		then icode = error_table_$badcall;	/* is a freeing area */
		else do;
			unspec (local_area_info) = "0"b;
			local_area_info.version = 1;
			local_area_info.areap = users_area_ptr;
			call area_info_ (addr (local_area_info), icode);
			if icode = 0
			then do;
				if local_area_info.no_freeing
				then icode = mrds_error_$not_freeing_area;
			     end;
		     end;
		if icode = 0
		then do;
			if (str_version > version_limit) | /* make sure that the requested */
			     (str_version < 0)	/* structure can be allocated */
			then icode =
				error_table_$unimplemented_version;
		     end;
	     end;

	return;

     end /* verify_input_parameters */;

report_error: proc (icode, message, arg1, arg2, arg3);

/*
   This routine is used to report errors via the sub_err_ condition.
   sub_err_ is called with the continue switch set so that after the
   sub_err_ condition has been  acted  on  by  the  system  and  the
   message  is printed control is returned to the entry which called
   report_error. All this assumes that the user has not set  up  his
   own  sub_err_  handler  - if he has he can return control to this
   module or not as well as printing the message or not.
*/


/* PARAMETERS */

	dcl     icode		 fixed bin (35);	/* (input) error code */
	dcl     message		 char (*);	/* (input) error message */
	dcl     arg1		 char (*);	/* (input) first argument to error message */
	dcl     arg2		 char (*);	/* (input) second argument to error message */
	dcl     arg3		 char (*);	/* (input) third argument to error message */

/* AUTOMATIC */

	dcl     retval		 fixed bin (35);

/* ENTRIES */

	dcl     sub_err_		 entry options (variable);



	call sub_err_ (icode, "mrds_dsm_msmi", "c", null (), retval, message, arg1, arg2, arg3);

	return;

     end /* report_error */;

     end /* mrds_dsm_msmi */;
