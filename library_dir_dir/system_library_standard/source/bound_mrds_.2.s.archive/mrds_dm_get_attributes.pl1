/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* BEGIN DESCRIPTION:

   This routine  returns  info  about  the  attributes  of  a  given
   relation   in  the  database  model.  There  are  three  entries.
   mrd_dm_get_attributes is internal for use by mrds.  get_relations
   is external for use by dmd_, and get_model_attributes is external
   for use by mmi_. The external entries check for a non-dba  trying
   to use this interface on a secured db.
   
   END DESCRIPTION
*/

/* PARAMETERS:

   ======= get_model_attributes entry

   open_name - -  (input)  char(*),  the  opening  name  supplie  to
   mmi_$open_model

   relation_name - - (input) char(*), the relation  for  which  attr
   info is desired

   area_ptr - - (input) ptr, pointer to an area in which  to  return
   info

   structure_version - - (input) fixed bin,  the  desired  structure
   version

   mrds_db_model_rel_attrs_ptr -  -  (output)  ptr,  points  to  the
   attribute      information      in      the      structure     in
   mrd_db_model_rel_attrs.incl.pl1

   code - - (output) fixed bin(35), the error status encoding

   ======= get_attributes and mrds_dm_get_attributes entries

   data_model_ptr - - (input) ptr, pointer returned from a  call  to
   dmd_$open_dm

   relation_name - - (input) char(32), the relation for  which  attr
   info is desired

   area_ptr - - (input) ptr, points to an area in  which  to  return
   info

   rd_ptr - - (output) ptr, points to the rel_desc  structure  given
   in mrds_rel_desc.incl.pl1

   code - - (output) fixed bin(35), the error status encoding

*/

/* HISTORY:

   Modified by Oris Friesen to accomodate new version data bases  --
   October 1978

   Modified by Jim Gray - - Feb. 1980, to correctly determine  which
   version database data_model_ptr refers to.

   Modified by Jim Gray - - April 1980,  to  correctly  handle  case
   when unknown relation name is given.

   Modified by Jim Gray - - 80-9-23, to add entries for setting type
   of  descriptor,  user  or  db  view,  wanted in the returned info
   structure

   81-01-31 Jim Gray : added setting of needed access for DBA types,
   if access violation occurred.

   81-02-12 Jim Gray : added check  for  user  being  a  DBA  if  db
   secured,  and  external  dmd_  entry  called, this get_attributes
   entry should not be called by  mrds,  use  mrds_dm_get_attributes
   instead.

   81-04-23 Jim Gray : changed the method of  getting  the  relation
   model  pointer.  Now  the  assumption  is  made that there is one
   relation per file,  and  the  file  has  the  same  name  as  the
   relation.  This  was  done on the premise that blocked files will
   not be implemented.

   81-04-23 Jim Gray : added get_model_attributes entry for mmi_

   82-08-20 D. Woodka deleted reference to rel_desc.attributes.bit_offset
   for DMS conversion.

   82-11-24 Davids: modified to convert from rel_desc_v3 which is
   returned from the call to dmd_v1_$get_attributes to the new
   rel_desc structure.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

/* BEGIN CHANGE 81-02-12 ********************************************* */

mrds_dm_get_attributes: procedure (data_model_ptr_a, relation_name_a, area_ptr_a, rd_ptr_a, code_a);

/* entry to be used internally by mrds, no access checking */

	internal_call = "1"b;

	data_model_ptr = data_model_ptr_a;
	relation_name = relation_name_a;
	area_ptr = area_ptr_a;

	call common ();

	code_a = code;
	rd_ptr_a = rd_ptr;

	return;



get_attributes: entry (data_model_ptr_b, relation_name_b, area_ptr_b, rd_ptr_b, code_b);

/* entry to be used by external calls, not mrds,
   if the db is secured, then the caller must be a DBA */

	internal_call = "0"b;

	data_model_ptr = data_model_ptr_b;
	relation_name = relation_name_b;
	area_ptr = area_ptr_b;

	call common ();

	code_b = code;
	rd_ptr_b = rd_ptr;

	return;

/* END CHANGE 81-02-12 ************************************************ */

/* BEGIN CHANGE 81-04-23 B ***************************************** */

get_model_attributes: entry (open_name, relation_name_c, area_ptr_c, structure_version,
	mrds_db_model_rel_attrs_ptr, code_c);

/* this entry is used by the mmi_ interface.
   it calls get_attributes to handle both old and new version models,
   and to have secured database non-dba user checks made. */

	code_c = 0;
	mrds_db_model_rel_attrs_ptr = null ();

/* get a model pointer from the open name */

	call mu_open_name_manager$get_model_pointer (open_name, model_type, model_ptr, code_c);
	if code_c = 0 then do;

/* get the attribute information */

		call get_attributes (model_ptr, (relation_name_c), addr (local_area), rd_ptr_c, code_c);
		if code_c = 0 then do;

			rd_ptr = rd_ptr_c;
			area_ptr = area_ptr_c;

/* check the users arguments */

			if area_ptr = null () then
			     code_c = error_table_$badcall;
			else do;
				unspec (my_area_info) = "0"b;
				my_area_info.version = 1;
				my_area_info.areap = area_ptr;

				call area_info_ (addr (my_area_info), code_c);
				if code_c ^= 0 then ;
				else if my_area_info.no_freeing then
				     code_c = mrds_error_$not_freeing_area;
				else do;

					if structure_version ^= mrds_db_model_rel_attrs_structure_version then
					     code_c = error_table_$unimplemented_version;
					else do;


/* fill in the users attribute structure */

						on area begin;
							code_c = error_table_$area_too_small;
							goto skip_allocate;
						     end;

						on cleanup begin;
							if mrds_db_model_rel_attrs_ptr ^= null () then do;
								free mrds_db_model_rel_attrs in (return_area);
								mrds_db_model_rel_attrs_ptr = null ();
							     end;
						     end;

						mrds_db_model_rel_attrs_count_init = rel_desc.num_attr;
						allocate mrds_db_model_rel_attrs set (mrds_db_model_rel_attrs_ptr) in (return_area);
						revert area;

						unspec (mrds_db_model_rel_attrs) = "0"b;
						mrds_db_model_rel_attrs.version = mrds_db_model_rel_attrs_structure_version;
						mrds_db_model_rel_attrs.attribute_count = mrds_db_model_rel_attrs_count_init;

/* do all the attributes in this relation */

						do i = 1 to mrds_db_model_rel_attrs_count_init;

						     mrds_db_model_rel_attrs.attribute (i).name = rel_desc.attributes (i).attribute_name;
						     mrds_db_model_rel_attrs.attribute (i).domain = rel_desc.attributes (i).domain_name;
						     mrds_db_model_rel_attrs.attribute (i).user_data_type =
							rel_desc.attributes (i).descriptor;
						     if rel_desc.attributes (i).key_attr_order = 1 |
							rel_desc.attributes (i).inver_flag then
							mrds_db_model_rel_attrs.attribute (i).indexed = "1"b;

						end;

					     end;
				     end;
			     end;
		     end;
	     end;
skip_allocate:

	return;

/* END CHANGE 81-04-23 B ***************************************** */

/* entries to set wether the user or database view data type descriptor is to be returned */

set_user_view: entry ();
	user_data_type_wanted = "1"b;
	return;

set_db_view: entry ();
	user_data_type_wanted = "0"b;
	return;

common: procedure ();
	code = 0;
	rd_ptr = null;

/* check for which mrds version to call   based on which version of the model we have */

	call hcs_$fs_get_path_name (data_model_ptr, db_path, ldn, model_name, code);
	if code = 0 then do;

/* check for the database being secured, but the user not being a DBA */

		dbm_ptr = data_model_ptr;
		if ^internal_call then
		     call secured_db_check ();

/* BEGIN CHANGE 81-04-23 A ********************************************** */

		if code = 0 then do;

/* check for a good relation name given   this search assumes that there is one relation per file,
   and that the relation name is the same as the file name */

			on no_read_permission begin;
				code = mrds_error_$no_model_access;
				rd_ptr = null ();
				goto exit;
			     end;

			done, rel_found = "0"b;
			fi_ptr = ptr (dbm_ptr, db_model.file_ptr);
			do while (^done);
			     if relation_name = file_info.file_name then
				done, rel_found = "1"b;
			     else if file_info.fwd_ptr ^= NULL_OFS then
				fi_ptr = ptr (dbm_ptr, file_info.fwd_ptr);
			     else done = "1"b;
			end;
			if ^rel_found then
			     code = mrds_error_$no_model_rel;
			else do;


/* BEGIN CHANGE 81-01-31 ********************************************* */

				call hcs_$initiate (db_path, rtrim (file_info.file_name) || ".m", "", 0, 1, fm_ptr, code);
				if code = error_table_$moderr | code = error_table_$no_info then do;
					call mrds_dm_authorization$set_needed_access
					     (rtrim (db_path), code); /* fails if not DBA */
					if code ^= 0 then
					     code = mrds_error_$no_model_access;
					else call hcs_$initiate (db_path, rtrim (file_info.file_name) || ".m", "", 0, 1,
						fm_ptr, code);
				     end;

/* END CHANGE 81-01-31 *********************************************** */

/* get the attribute information */

				if fm_ptr ^= null () then do;
					code = 0;
					on cleanup begin;
						if rd_ptr ^= null () then do;
							free rel_desc in (return_area);
							rd_ptr = null ();
						     end;
					     end;

					ri_ptr = ptr (fm_ptr, file_model.rel_ptr); /* this assumes one relation per file */

/* END CHANGE 81-04-23 A ************************************************* */

					num_attr_alloc = rel_info.num_attr;
					allocate rel_desc in (return_area);
					unspec (rel_desc) = "0"b;
					rel_desc.num_attr = num_attr_alloc;
					rel_desc.key_length = rel_info.max_key_len;
					rel_desc.data_length = rel_info.max_data_len;
					rel_desc.num_keys = 0;
					rel_desc.inversion = rel_info.indexed;

/* go through all attributes in this relation */

					cnt = 1;
					do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr)
					     repeat ptr (fm_ptr, attr_info.fwd_thread)
					     while (rel (ai_ptr) ^= NULL_OFS);
					     rel_desc.attributes.attribute_name (cnt) = attr_info.name;
					     di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
					     rel_desc.attributes.domain_name (cnt) = domain_info.name;

					     rel_desc.attributes.bit_length (cnt) = bit (fixed (attr_info.bit_length, 18));
					     rel_desc.attributes.key_flag (cnt) = attr_info.key_attr;
					     rel_desc.attributes.inver_flag (cnt) = attr_info.index_attr;
					     rel_desc.attributes.key_attr_order (cnt) = attr_info.key_order;
					     if user_data_type_wanted | ^internal_call then
						rel_desc.attributes.descriptor (cnt) = domain_info.user_desc;
					     else rel_desc.attributes.descriptor (cnt) = domain_info.db_desc;
					     if attr_info.key_attr then rel_desc.num_keys = rel_desc.num_keys + 1;
					     cnt = cnt + 1;
					end;
				     end;
			     end;
		     end;
	     end;
exit:
	return;
     end;

/* BEGIN CHANGE 81-02-12 ********************************************* */

secured_db_check: procedure ();

/* routine to check for the database being is a secured state,
   and if so, that the user is a DBA, and thus may use the external entry */

	if code ^= 0 then ;
	else if internal_call then ;
	else do;

/* get the secured state of the dataabase */

		call mrds_dm_db_secured$get_secured_status (dbm_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, code);
		if code ^= 0 then

		     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the secured state of database """, db_path, """.");

		else if ^database_state.secured then ;
		else do;

/* database secured, see if the user is a DBA */

			call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
			     mrds_authorization_structure_version, mrds_authorization_ptr, code);
			if code ^= 0 then

			     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				"Unable to get user class for database """, db_path, """.");

			else if mrds_authorization.administrator then ;
			else do;

/* not DBA on secured db, issue error */

				code = error_table_$insufficient_access;
				call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a ^a",
				     "The database """, db_path, """ has been secured,",
				     "so the caller must be a DBA to use direct model access.");

			     end;

		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr, dbm_ptr = null ();

     end;

/* END CHANGE 81-02-12 ************************************************ */

	declare NULL_OFS		 int static bit (18) unal init ("111111111111111111"b) options (constant);
	declare area		 condition;	/* if area too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area details */
	declare area_ptr		 ptr;		/* pointer to area in which information is returned */
	declare area_ptr_a		 ptr;		/* temp for mrds_dm_get_attributes entry */
	declare area_ptr_b		 ptr;		/* temp for get_attributes entry */
	declare area_ptr_c		 ptr;		/* temp for get_model_attributes entry */
	declare caller_name		 char (32) init ("dmd_$open_dm"); /* name of calling routine */
	declare cleanup		 condition;
	declare cnt		 fixed bin;
	declare code		 fixed bin (35);	/* a standard Multics system status code */
	declare code_a		 fixed bin (35);	/* temp for mrds_dm_get_attributes entry */
	declare code_b		 fixed bin (35);	/* temp for get_attributes entry */
	declare code_c		 fixed bin (35);	/* temp for get_model_attributes entry */
	declare continue		 char (1) init ("c"); /* dont stop after print mesg */
	declare data_model_ptr	 ptr;		/* pointer to data model to be searched (Input) */
	declare data_model_ptr_a	 ptr;		/* temp for mrds_dm_get_attributes entry */
	declare data_model_ptr_b	 ptr;		/* temp for get_attributes entry */
	declare db_path		 char (168);
	declare done		 bit (1);		/* on => get out of loop */
	declare error_table_$area_too_small fixed bin (35) ext; /* area not big enough */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$insufficient_access fixed bin (35) ext; /* not DBA and db secured */
	declare error_table_$moderr	 fixed bin (35) ext;/* incorrect access */
	declare error_table_$no_info	 fixed bin (35) ext;/* no db dir acl, and no rel model acl */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	declare i			 fixed bin;	/* loop index */
	declare info_ptr		 ptr init (null ());/* unused */
	declare internal_call	 bit (1);		/* on => called from mrds, not by dmd_ */
	declare ldn		 fixed bin;
	declare local_area		 area (8192);	/* space for db state, and user class info */
	declare mu_open_name_manager$get_model_pointer entry (char (*), char (1), ptr, fixed bin (35)); /* gets ptr from name */
	declare model_name		 char (32);
	declare model_ptr		 ptr;
	declare model_type		 char (1);	/* type of model opening */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if DBA */
	declare mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* sets access for DBA types */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no r acl to model */
	declare mrds_error_$no_model_rel fixed bin (35) ext; /* rel name not known in model */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attr for area */
	declare no_read_permission	 condition;	/* no r acl to model */
	declare open_name		 char (*);	/* name associated with this model opening */
	declare rd_ptr_a		 ptr;		/* temp for mrds_dm_get_attributes entry */
	declare rd_ptr_b		 ptr;		/* temp for get_attributes entry */
	declare rd_ptr_c		 ptr;		/* temp for get_model_attributes entry */
	declare rel_found		 bit (1);		/* on => good rel name given */
	declare relation_name	 char (32);	/* name of relation for which attribute information is desired */
	declare relation_name_a	 char (32);	/* temp for mrds_dm_get_attributes entry */
	declare relation_name_b	 char (32);	/* temp for get_attributes entry */
	declare relation_name_c	 char (*);	/* temp for get_model_attributes entry */
	declare return_area		 area (sys_info$max_seg_size) based (area_ptr);
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare structure_version	 fixed bin;	/* desired structure version */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare sys_info$max_seg_size	 fixed bin (35) external;
	declare user_data_type_wanted	 bit (1) init ("0"b) int static; /* on => user descr, else db descr */
	declare (addr, bit, empty, fixed, null, ptr, rel, rtrim, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local copy */

%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include mrds_rel_desc;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include area_info;
%page;
%include mrds_db_model_rel_attrs;
%page;
%include arg_list;

     end mrds_dm_get_attributes;
