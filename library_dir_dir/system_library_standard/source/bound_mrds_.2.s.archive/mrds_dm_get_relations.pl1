/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* DESCRIPTION:

   The routine returns the names of all  relations  defined  in  the
   database  model. There are 3 entries, mrds_dm_get_relations is an
   internal entry for use by  mrds,  get_relations  is  an  external
   entry  for  use  by  dmd_, and get_model_relations is an external
   entry for use by mmi_. The external entries make sure the user is
   a DBA if the database has been secured.

*/

/* PARAMETERS:

   ======= get_model_relations entry

   open_name - - (input) char(*), the open name supplied in the call
   to mmi_$open_model

   area_ptr - - (input) ptr, pointer to an area in which  to  return
   info

   structure_version - - (input) fixed bin,  the  desired  structure
   version

   mrd_db_model_relations_ptr - - (output) ptr, the pointer  to  the
   list of model relation names in mrd_db_model_relations.incl.pl1

   code - - (output) fixed bin (35), the error status encoding

   ======= mrds_dm_get_relations and get_relations entries

   data_model_ptr - - (input) ptr, the pointer returned from a  call
   to dmd_$open_dm

   area_ptr - - (input) ptr, points to an area in  which  to  return
   info

   mr_ptr - - (output) ptr, points to the relation names returned in
   mrds_model_relations.incl.pl1

   code - - (output) fixed bin (35), the error status encoding

*/

/* HISTORY :

   Modified by J. A. Weeldreyer to incorporate domain separation  --
   November, 1976.

   Modified by Oris Friesen to accomodate new version data bases  --
   October 1978

   Modified by Jim Gray  -  -  Feb.  1980,  to  correctly  determine
   whether  data_model_ptr  refers to an old or new version database
   model.

   80-12-30 Jim Gray : captured error  message  when  no  access  to
   model segment, and translated into meaningful mrds error code.

   81-01-31 Jim Gray : added setting of needed for DBA types, if  an
   access violation occurs.

   81-02-12  Jim  Gray  :  added  need  for  external   callers   to
   dmd_$get_relations  to be a DBA if db secured, this should not be
   called   internally   from   mrds,   mrds    should    use    the
   mrds_dm_get_relations entry.

   81-04-23 Jim Gray : changed method of  obtaining  relation  names
   from that of looking at all relation model segments, to using the
   file names as the relation names, and getting them all out of the
   db_model segment. This was done on the premise that blocked files
   are not to be implemented.

   81-04-23 Jim Gray : added get_model_relations entry for mmi_

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

/* BEGIN CHANGE 81-02-12 ********************************************* */

mrds_dm_get_relations: procedure (data_model_ptr_a, area_ptr_a, mr_ptr_a, code_a);

/* entry to be used internal by mrds, no access checking required */

	internal_call = "1"b;

	data_model_ptr = data_model_ptr_a;
	area_ptr = area_ptr_a;

	call common ();

	mr_ptr_a = mr_ptr;
	code_a = code;

	return;




get_relations: entry (data_model_ptr_b, area_ptr_b, mr_ptr_b, code_b);

/* this entry should only be called externally from dmd_, never by mrds */

	internal_call = "0"b;

	data_model_ptr = data_model_ptr_b;
	area_ptr = area_ptr_b;

	call common ();

	mr_ptr_b = mr_ptr;
	code_b = code;

	return;

/* END CHANGE 81-02-12 ****************************************** */

/* BEGIN CHANGE 81-04-23 B ********************************************* */

get_model_relations: entry (open_name, area_ptr_c, structure_version, mrds_db_model_relations_ptr, code_c);

/* this entry is for the mmi_ interface. it calls the get_relations
   entry to be able to handle both old and new version databases,
   and also to be able to detect non-dba's using a secured database. */

	code_c = 0;
	mrds_db_model_relations_ptr = null ();

/* get the model pointer from the opening name */

	call mu_open_name_manager$get_model_pointer (open_name, model_type, model_ptr, code_c);
	if code_c = 0 then do;

/* get the list of relation names from the old or new model */

		call get_relations (model_ptr, addr (local_area), mr_ptr_c, code_c);
		if code_c = 0 then do;

/* check the callers arguments */

			mr_ptr = mr_ptr_c;
			area_ptr = area_ptr_c;

			if area_ptr = null () then
			     code_c = error_table_$badcall;
			else do;
				unspec (my_area_info) = "0"b;
				my_area_info.version = 1;
				my_area_info.areap = area_ptr;

				call area_info_ (addr (my_area_info), code_c);
				if code_c ^= 0 then ;
				else if my_area_info.no_freeing then
				     code_c = mrds_error_$not_freeing_area;
				else do;

					if structure_version ^= mrds_db_model_relations_structure_version then
					     code_c = error_table_$unimplemented_version;
					else do;

/* fill in the users structure details */

						on area begin;
							code_c = error_table_$area_too_small;
							goto skip_allocate;
						     end;

						on cleanup begin;
							if mrds_db_model_relations_ptr ^= null () then do;
								free mrds_db_model_relations in (return_area);
								mrds_db_model_relations_ptr = null ();
							     end;
						     end;

						mrds_db_model_relations_count_init = model_relations.nrels;
						allocate mrds_db_model_relations set (mrds_db_model_relations_ptr) in (return_area);
						revert area;

						unspec (mrds_db_model_relations) = "0"b;
						mrds_db_model_relations.version = mrds_db_model_relations_structure_version;
						mrds_db_model_relations.relation_count = mrds_db_model_relations_count_init;

/* get all relation names */

						do i = 1 to mrds_db_model_relations_count_init;

						     mrds_db_model_relations.relation (i).name = model_relations.relation_name (i);

						end;

					     end;
				     end;
			     end;
		     end;
	     end;

skip_allocate:

	return;

/* END CHANGE 81-04-23 B ********************************************* */

common: procedure ();

/* check for which version of mrds to call,
   based on the version of the model being referenced */

	mr_ptr = null ();
	code = 0;

	call hcs_$fs_get_path_name (data_model_ptr, db_path, ldn, model_name, code);
	if code = 0 then do;

		dbm_ptr = data_model_ptr;

/* check for a non-DBA trying to use this interface
   on a secured database, which is not allowed */

		if ^internal_call then
		     call secured_db_check ();

/* get the relation names from the database model */

		if code = 0 then do;

/* BEGIN CHANGE 81-04-23 A ******************************************** */

			on cleanup begin;
				if mr_ptr ^= null then do;
					free model_relations in (return_area);
					mr_ptr = null ();
				     end;
			     end;

			on no_read_permission begin;
				code = mrds_error_$no_model_access;
				mr_ptr = null ();
				goto exit;
			     end;

			num_relations_alloc = db_model.num_rels;
			allocate model_relations in (return_area);
			unspec (model_relations) = "0"b;
			model_relations.nrels = num_relations_alloc;

			indx1 = 1;

			do fi_ptr = ptr (dbm_ptr, db_model.file_ptr)
			     repeat ptr (dbm_ptr, file_info.fwd_ptr)
			     while (rel (fi_ptr) ^= NULL_OFS);

/* get the relation name out of the db_model segment,
   by assuming that there is one relation per file,
   and the file name is the same as the relation name. */

			     model_relations.relation_name (indx1) = file_info.file_name;
			     indx1 = indx1 + 1;
			end;

/* END CHANGE 81-04-23 A ********************************************* */


		     end;
	     end;
exit:
	return;

     end;

/* BEGIN CHANGE 81-02-12 ********************************************* */

secured_db_check: procedure ();

/* routine to check for the database being is a secured state,
   and if so, that the user is a DBA, and thus may use the external entry */

	if code ^= 0 then ;
	else if internal_call then ;
	else do;

/* get the secured state of the dataabase */

		call mrds_dm_db_secured$get_secured_status (dbm_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, code);
		if code ^= 0 then

		     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the secured state of database """, db_path, """.");

		else if ^database_state.secured then ;
		else do;

/* database secured, see if the user is a DBA */

			call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
			     mrds_authorization_structure_version, mrds_authorization_ptr, code);
			if code ^= 0 then

			     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				"Unable to get user class for database """, db_path, """.");

			else if mrds_authorization.administrator then ;
			else do;

/* not DBA on secured db, issue error */

				code = error_table_$insufficient_access;
				call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a ^a",
				     "The database """, db_path, """ has been secured,",
				     "so the caller must be a DBA to use direct model access.");

			     end;

		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr, dbm_ptr = null ();

     end;

/* END CHANGE 81-02-12 ************************************************ */

	declare NULL_OFS		 bit (18) unal int static init ("111111111111111111"b) options (constant);
	declare area		 condition;	/* if area too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area details */
	declare area_ptr		 ptr;		/* pointer to the area in which to return information */
	declare area_ptr_a		 ptr;		/* temp for mrds_dm_get_relations entry */
	declare area_ptr_b		 ptr;		/* temp for get_relations entry */
	declare area_ptr_c		 ptr;		/* temp for get_model_relations entry */
	declare caller_name		 char (32) init ("dmd_$open_dm"); /* name of calling routine */
	declare cleanup		 condition;
	declare code		 fixed bin (35);	/* a standard Multics system status code (Output) */
	declare code_a		 fixed bin (35);	/* temp for mrds_dm_get_relations entry */
	declare code_b		 fixed bin (35);	/* temp for get_relations entry */
	declare code_c		 fixed bin (35);	/* temp for get_model_relations entry */
	declare continue		 char (1) init ("c"); /* dont stop after print mesg */
	declare data_model_ptr	 ptr;		/* iocb pointer to the data model to be searched (Input) */
	declare data_model_ptr_a	 ptr;		/* temp for mrds_dm_get_relations entry */
	declare data_model_ptr_b	 ptr;		/* temp for get_relations entry */
	declare db_path		 char (168);
	declare error_table_$area_too_small fixed bin (35) ext; /* area not big enough */
	declare error_table_$badcall	 fixed bin (35) ext;/* area ptr null */
	declare error_table_$insufficient_access fixed bin (35) ext; /* not DBA and db secured */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare i			 fixed bin;	/* loop index */
	declare indx1		 fixed bin;
	declare info_ptr		 ptr init (null ());/* unused */
	declare internal_call	 bit (1);		/* on => called from mrds, not by dmd_ */
	declare ldn		 fixed bin;
	declare local_area		 area (4096);	/* space for db state, and user class info */
	declare mu_open_name_manager$get_model_pointer entry (char (*), char (1), ptr, fixed bin (35)); /* gets ptr from name */
	declare model_name		 char (32);
	declare model_ptr		 ptr;
	declare model_type		 char (1);	/* type of model opening */
	declare mr_ptr_a		 ptr;		/* temp for mrds_dm_get_relations entry */
	declare mr_ptr_b		 ptr;		/* temp for get_relations entry */
	declare mr_ptr_c		 ptr;		/* temp for get_model_relations entry */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if DBA */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no r acl to model */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attr for area */
	declare no_read_permission	 condition;	/* no r acl on model */
	declare open_name		 char (*);	/* opening name associated with model opening */
	declare return_area		 area (sys_info$max_seg_size) based (area_ptr);
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare structure_version	 fixed bin;	/* desired version of structure */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare sys_info$max_seg_size	 fixed bin (35) external;
	declare (addr, empty, fixed, null, ptr, rel, rtrim, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local copy */

%include mrds_model_relations;
%page;
%include mdbm_db_model;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include mrds_db_model_relations;
%page;
%include area_info;

     end mrds_dm_get_relations;
