/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_get_relation_names: proc (p_area_ptr, p_dsm_relation_names_ptr, p_iocb_ptr, p_code);

/* DESCRIPTION:

   This routine loads a mrds_dsm_relation_names structure  with  the
   number and names of the relations in the submodel.

   It is assumed that p_area_ptr points to  a  non-freeing  area  so
   that   if   an  error  occurs  after  mrds_dsm_relation_names  is
   allocated    it    is    not    freed     even     though     the
   p_dsm_relation_names_ptr is set to null.

   The number_of_rels entry returns only the number of relations.

   Known bugs:

   Other problems:

   HISTORY

   80-12-24 Davids: This routine has been modified from  an  eariler
   .        version which had no  header  or  history  section.  The
   .        biggest changes were handling of version 4 submodels and
   .        a call to sub_err_ to explan any errors.

   81-01-06 Davids: Removed inline code to read the submodel  header
   .        record   and   replaced    it    with    a    call    to
   .        mrds_dsm_get_version.  added  the declarations for those
   .        iox_  entries  used  and  removed  the   include   files
   .        mrds_dsm_header_str and iox_dcls.

   81-01-09 Davids: changed  the  call  to  mrds_dsm_get_version  to
   .        mrds_dsm_read_header$version.

   81-01-12  Davids:   changed   mrds_dsm_display_rels.incl.pl1   to
   .         mrds_dsm_relation_names.incl.pl1

   81-01-13 Davids: modified so that for  version  1  submodels  the
   .        first part of the key head range is \001  and  the  last
   .        part  is  \177.  The reason why the select must still be
   .        done is that i need the number of relation to  know  how
   .        much space to allocate.

   81-01-28 Davids:  changed drel_ptr to mrds_dsm_relation_names_ptr
   .        and  nrels_alloc  to mrds_dsm_relation_names_nrels_alloc
   .        to      correspond      to      changes      in      the
   .        mrds_mrds_dsm_relation_names include file.

   81-02-19 Davids: added the number_of_rels  entry.  this  required
   .        building the internal procedure set_up_subset and having
   .        error_exit (renamed to cleanup) return rather than doing
   .        a goto error_return.

   81-02-20   Davids:   renamed    the    cleanup    procedure    to
   .        in_case_of_error.  also  added  a  call  to  the  finish
   .        procedure  in the number_of_rels entry. without the call
   .        the subset was never being reset.

   81-02-23 Davids: the number_of_rels entry now sets  the  variable
   .        code so there can be correct error reporting.

   81-05-20  Rickie  E.  Brinegar:  changed   all   referecnces   to
   .        dsm_relation_names  to  mrds_dsm_relation_names  due  to
   .        changed include file.

   81-06-09 Davids: It was discovered that the file key for  version
   .        4 submodels contained the model relation  name  and  not
   .        the  submodel  relation  name.  Processing  to  get  the
   .        relation names for version 4 submodels  was  changed  to
   .        set  up  a  subset containing both the relation and file
   .        records. Processing to load the  mrds_dsm_relation_names
   .        structure was change to ignore keys with file prefix.
*/

/* PARAMETER */

	dcl     p_area_ptr		 ptr;		/* (input) area to allocate mrds_dsm_relation_names structure in */
	dcl     p_dsm_relation_names_ptr ptr;		/* (output) pointer to the mrds_dsm_relation_names structure */
	dcl     p_iocb_ptr		 ptr;		/* (input) pointer to submodel iocb */
	dcl     p_code		 fixed bin (35);	/* (output) error code */

/* AUTOMATIC */

	dcl     answer		 fixed bin;	/* return value for the number_of_rels entry */
	dcl     code		 fixed bin (35);	/* local error code */
	dcl     idx		 fixed bin;	/* loop index */
	dcl     info_ptr		 ptr init (null ());/* pointer to the select set structure */
	dcl     key		 char (256) varying;/* submodel record key */
	dcl     f_key_header	 char (256) varying;/* defines start of range for leading part of relation record key
						   = REL_HEAD for version 5
						   = "file:" for version 4
						   = "\001" for version 1 */
	dcl     l_key_header	 char (256) varying;/* defines end of range for leading part of relation record key
						   = REL_HEAD
						   = "file:"
						   = "\177" */
	dcl     message		 char (100);	/* error message returned from set_up_subset */
	dcl     rec_len		 fixed bin (21);	/* length of a submodel record */
	dcl     version		 fixed bin;	/* submodel version */

/* BASED */

	dcl     area		 area (sys_info$max_seg_size) based (p_area_ptr);
						/* assumed to be a non-freeing area */

/* BUILTIN */

	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     after		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;
	dcl     substr		 builtin;

/* CONSTANT */

	dcl     BOF		 fixed bin init (-1) internal static options (constant);
						/* used to indicate the beginning of the file */

/* ENTRIES */

	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     iox_$read_key	 entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
	dcl     mrds_dsm_read_header$version entry (ptr, fixed bin, fixed bin (35));

/* EXTERNAL */

	dcl     error_table_$end_of_info fixed bin (35) external static;
	dcl     mrds_error_$version_not_supported fixed bin (35) external static;
	dcl     sys_info$max_seg_size	 fixed bin (19) ext;

%include select_info;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_dsm_head_strings;

	call set_up_subset (code, message);
	if code ^= 0
	then do;
		call in_case_of_error (message);
		goto error_return;
	     end;

	call iox_$position (p_iocb_ptr, BOF, 0, code);
	if code ^= 0
	then do;
		call in_case_of_error ("Problem while trying to position to the first relation record");
		goto error_return;
	     end;

	call iox_$read_key (p_iocb_ptr, key, rec_len, code); /* read submodel and load mrds_dsm_relation_names str */
	if code ^= 0
	then do;
		call in_case_of_error ("Problem while trying to read the key of the first relation record");
		goto error_return;
	     end;

	if version ^= 4
	then mrds_dsm_relation_names_nrels_alloc = hi_sl_info.count;
	else mrds_dsm_relation_names_nrels_alloc = hi_sl_info.count / 2;
						/* both relation and file records are selected for version 4 */
	allocate mrds_dsm_relation_names in (area);

	do idx = 1 by 1 while (code = 0);
	     if version < 4
	     then mrds_dsm_relation_names.relation (idx) = key;
	     else
		if version > 4
	     then mrds_dsm_relation_names.relation (idx) = after (key, f_key_header);
	     else
		if version = 4
	     then do;
		     if substr (key, 1, 5) = "file:"
		     then idx = idx - 1;
		     else mrds_dsm_relation_names.relation (idx) = key;
		end;

	     call iox_$position (p_iocb_ptr, 0, 1, code);
	     if code = 0
	     then call iox_$read_key (p_iocb_ptr, key, rec_len, code);
	end;
	if code ^= error_table_$end_of_info
	then do;
		call in_case_of_error ("Problem while reading the keys of subsequent relation records");
		goto error_return;
	     end;



	p_dsm_relation_names_ptr = mrds_dsm_relation_names_ptr;
	p_code = 0;
	call finish;
	return;

error_return:
	p_code = code;
	p_dsm_relation_names_ptr = null ();
	return;

number_of_rels: entry (p_iocb_ptr, p_code) returns (fixed bin);

	call set_up_subset (p_code, message);
	if p_code = 0
	then do;
		if version ^= 4
		then answer = hi_sl_info.count;
		else answer = hi_sl_info.count / 2;
		call finish;
	     end;
	else do;
		code = p_code;
		call in_case_of_error (message);
		answer = 0;
	     end;

	return (answer);

set_up_subset: proc (l_code, l_message);

/* PARAMETERS */

	dcl     l_code		 fixed bin (35);	/* (output) local error code */
	dcl     l_message		 char (*);	/* (output) local error message */




	call mrds_dsm_read_header$version (p_iocb_ptr, version, l_code);
	if l_code ^= 0
	then l_message = "Could not get the submodel version";
	else
	     if version = 5				/* set key_header based on version */
	then do;
		f_key_header = REL_HEAD;
		l_key_header = REL_HEAD;
	     end;
	else
	     if version = 4
	then do;
		f_key_header = "A";			/* file and relation records */
		l_key_header = "z";
	     end;
	else
	     if version = 1
	then do;
		f_key_header = "";			/* \001 */
		l_key_header = "";			/* \177 */
	     end;
	else do;
		l_code = mrds_error_$version_not_supported;
		l_message = "Unrecognized version of submodel";
	     end;




	if l_code = 0
	then do;
		sl_array_limit = 1;			/* build the select info str */
		allocate hi_sl_info set (info_ptr);
		hi_sl_info.version = sl_info_version_0;
		hi_sl_info.list_type = 1;
		hi_sl_info.interval (1).first_head.length = length (f_key_header);
		hi_sl_info.interval (1).first_head.kptr = addrel (addr (f_key_header), 1);
		hi_sl_info.interval (1).last_head.length = length (l_key_header);
		hi_sl_info.interval (1).last_head.kptr = addrel (addr (l_key_header), 1);



		call iox_$control (p_iocb_ptr, "select", info_ptr, l_code); /* select the relation records */
		if l_code ^= 0
		then l_message = "Problem while selecting submodel's relations";
	     end;

	return;

     end /* set_up_subset */;

finish: proc;

/*
   This procedure resets the subset number in the submodel vfile  so
   that  the next vfile access looks at the entire vfile rather than
   just the relation record subset.
*/

	dcl     f_code		 fixed bin (35);	/* local error code */


	if info_ptr ^= null
	then do;
		if hi_sl_info.subset_no > 0
		then do;
			hi_sl_info.list_type = 0;
			hi_sl_info.subset_no = 0;
			call iox_$control (p_iocb_ptr, "select", info_ptr, f_code);
		     end;
		free info_ptr -> hi_sl_info;
	     end;
     end;						/*  finish */

in_case_of_error: proc (message);

/* PARAMETERS */

	dcl     message		 char (*);	/* (input) error message */

/* AUITOMATIC */

	dcl     retval		 fixed bin (35);

/* ENTRIES */

	dcl     sub_err_		 entry options (variable);



	call finish;

	call sub_err_ (code, "mrds_dsm_get_relation_names", "c", null (), retval, message);

	return;

     end /* in_case_of_error */;

     end;						/*  mrds_dsm_get_relation_names */
