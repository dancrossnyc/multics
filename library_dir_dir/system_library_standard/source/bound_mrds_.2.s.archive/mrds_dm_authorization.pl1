/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-19,Blair), approve(88-02-26,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Add code to search a "mrds" search list for the db pathname.  SCP 6366.
  2) change(88-02-25,Blair), approve(88-02-25,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Establish a local area for the search_path list in case we aren't
     passed an area_ptr.
                                                   END HISTORY COMMENTS */


mrds_dm_authorization: procedure (); return;		/* not a legal entry */

/* DESCRIPTION:

   This   routine   has    two    entries,    get_user_class,    and
   set_needed_access.  The  first determines whether the caller is a
   database administrator (has sma on the db dir) or a normal  user.
   The  second entry is used to give DBA's all access they will ever
   need for any operation against the database. An error is returned
   if the database is an unsupported version.

*/

/* PARAMETERS:

   database_path - - (input) char(*), the relative pathname  of  the
   database,  this can not be a submodel pathname, the suffix is not
   necessary.

   area_ptr - - (input) pointer, get entry only, a freeing  area  in
   which   to   allocate   the   structure  containing  the  desired
   information.

   structure_version - - (input) fixed  bin,  get  entry  only,  the
   desired  version  of  the structure, normaly the version given in
   the include file with the structure.

   mrds_authorization_ptr - - (output) pointer, get entry only,  the
   pointer  to the structure to be allocated in the callers area, as
   defined by the include file in mrds_authorization.incl.pl1

   error_code - - (output) fixed bin(35), the error status encoding,
   0 unless an error occurred.

*/
%page;
/* HISTORY:

   81-01-15 Jim Gray : Originally error_coded.

   81-04-17  Jim  Gray  :  made  modifications  to   implement   the
   mmi_$get_authorization  entry  point.  Improved path handling for
   this  and  the  mmi_$get_secured_state  routine  by  writing  the
   mrds_dm_check_path  routine. Added use of hcs_$status_ instead of
   hcs_$get_user_effmode.

   81-10-06 Davids: added a line to set the value of  star_entry_ptr
   to local_star_entry_ptr. This is so that references to star_names
   do not reference through a null pointer (star_names has an extent
   based   on   a   value   from   star_entries).   The   value   of
   star_entry_count was already being set correctly.

   83-01-21 Roger Lackey: Added  check for mrds_error_$no_model_access
   which is now returned from mrds_dm_check_path.

   83-05-31 Davids: Replaced reference to hcs_$add_acl_entries with a reference
   to object_type_$add_acl_entries. This was needed so that acls could be set
   on ring 2 dms files.

   83-06-07 Davids: Added a call to object_type_$validate before the call to
   the msf manager for setting acls on msfs. If validate returns a 0 code
   then object_type_$add_acl_entries will be called since it recognizes the
   msf and can set the acls correctly. Currently object_type_ wrorks for ring 2
   msf (dm files) but not regular ring 4 msfs.

   83-09-30 Mike Kubicar : Several significant changes.  Added an error routine
   to provide one convenient way of exiting this module.  This gets rid of the
   HORRIBLE nested if structure that used to be here.  This routine is now
   called when appropriate.  Also rewrote the force_dir_contents_acl procedure
   to use the fs_util_ subroutine instead of munging acls with hcs_.

*/
%page;
/* entry to determine if user is a DBA or peon */

get_user_class: get_authorization: entry (rel_db_path, area_ptr, structure_version, structure_ptr, error_code);

	error_code = 0;
	mrds_authorization_ptr = null ();

	call check_path ();
	if error_code = 0 then do;			/* check arguments other than database path */
		if area_ptr = null () then
		     error_code = error_table_$badcall;
		else do;
			unspec (my_area_info) = "0"b;
			my_area_info.version = 1;
			my_area_info.areap = area_ptr;

			call area_info_ (addr (my_area_info), error_code);
			if error_code ^= 0 then ;	/* couldn't get area info */
			else if my_area_info.no_freeing then
			     error_code = mrds_error_$not_freeing_area;
			else do;

				if structure_version ^= mrds_authorization_structure_version then
				     error_code = error_table_$unimplemented_version;
				else do;

					on area begin; /* in case allocate fails */
						error_code = error_table_$area_too_small;
						goto skip_allocate;
					     end;

					on cleanup begin;
						if mrds_authorization_ptr ^= null then do;
							free mrds_authorization_ptr -> mrds_authorization in (work_area);
							mrds_authorization_ptr = null ();
						     end;
					     end;

					allocate mrds_authorization set (mrds_authorization_ptr) in (work_area);
					revert area;

					call get_user_info (); /* fill in structure info */

skip_allocate:
				     end;

			     end;
		     end;
	     
	     end;

	structure_ptr = mrds_authorization_ptr;

	return;
%page;
/* entry to set any access a DBA might need */

set_needed_access: entry (rel_db_path, error_code);

	error_code = 0;
	call check_path ();
	if error_code = 0 then do;

		mrds_authorization_ptr = addr (local_mrds_authorization);
		call get_user_info ();
		if error_code ^= 0 then ;
		else if mrds_authorization.administrator then
		     call set_db_acls ();
		else error_code = error_table_$insufficient_access;

	     end;

	return;
%page;
check_path: procedure ();

/* routine to verify good database path
   by checking for a path with a .db suffix,
   being a directory containing a segment db_model,
   which should be for a version 4 database. */

dcl local_area area (2048);

          use_search_paths = "0"b;
	if search (rel_db_path, "<>") = 0 then do;
	     call search_paths_$get (MRDS_SEARCHLIST, sl_control_default, "", null (), addr(local_area),
		sl_info_version_1, mrds_search_list_ptr, error_code);
	     if error_code ^= 0 then return;
	     loop_idx = mrds_search_list_ptr -> sl_info.num_paths;
	     use_search_paths = "1"b;
	     end;
	else do;
	     call absolute_pathname_ (rel_db_path, abs_db_path, error_code);
	     if error_code ^= 0 then return;
	     loop_idx = 1;
	     end;

	error_code = 1;
	do idx = 1 to loop_idx while (error_code ^= 0);
	     if use_search_paths then abs_db_path = pathname_ (mrds_search_list_ptr -> sl_info.paths(idx).pathname, rel_db_path);
	     call mrds_dm_check_path (rtrim(abs_db_path), containing_dir, db_dir, new_found, error_code);

	     if error_code = error_table_$incorrect_access |
		error_code = mrds_error_$no_model_access then
		error_code = 0;		/* ignore access error */
	     end;                               /* no more search paths or we got a good one */

	if error_code = 0 & ^new_found then
	     error_code = mrds_error_$version_not_supported;

     end;
%page;
get_user_info: procedure ();

/* routine to determine class of user, DBA or peon */

	unspec (my_status_branch) = "0"b;		/* in case incorrect access => non-dba */

/* get access mode on db dir for caller */

	call hcs_$status_ (rtrim (containing_dir), rtrim (db_dir), chase_links,
	     addr (my_status_branch), addr (local_area), error_code);
	if error_code ^= 0 & error_code ^= error_table_$incorrect_access
	     & error_code ^= error_table_$no_s_permission then do; /* couldn't get access */
		free mrds_authorization_ptr -> mrds_authorization in (work_area);
		mrds_authorization_ptr = null ();
	     end;
	else do;

		error_code = 0;

		access_mode_overlay_ptr = addr (my_status_branch.mode);

		unspec (mrds_authorization) = "0"b;
		mrds_authorization.version = mrds_authorization_structure_version;

/* check for sma on db dir  */

		if access_mode_overlay.status & access_mode_overlay.modify & access_mode_overlay.append then do;

/* user is a DBA */
			mrds_authorization.administrator = "1"b;
			mrds_authorization.normal_user = "1"b;

		     end;
		else do;

/* user is a peon */

			mrds_authorization.administrator = "0"b;
			mrds_authorization.normal_user = "1"b;

		     end;

	     end;

     end;
%page;
set_db_acls: procedure ();

/* routine to set all access a DBA will ever need */

	acl_count = 1;
	allocate file_acl in (local_area);
	file_acl.version = GENERAL_ACL_VERSION_1;
	file_acl.count = acl_count;
	file_acl.entries (1).access_name = get_group_id_$tag_star ();
	file_acl.entries (1).mode = RW_ACCESS;
	file_acl.entries (1).status_code = 0;
	allocate dir_acl in (local_area);
	dir_acl.version = GENERAL_ACL_VERSION_1;
	dir_acl.count = acl_count;
	dir_acl.entries (1).access_name = get_group_id_$tag_star ();
	dir_acl.entries (1).mode = SMA_ACCESS;
	dir_acl.entries (1).status_code = 0;

/* call the recursive routine, that works on one directories contents at a time */

	abs_db_path = rtrim (containing_dir) || ">" || db_dir;

	call force_dir_contents_acls (rtrim (abs_db_path), file_acl_ptr,
	     dir_acl_ptr);

     end;
%page;
force_dir_contents_acls: procedure (abs_dir_path, facl_ptr, dacl_ptr);

/* get a list of all segs and dirs in this directory */

	call hcs_$star_ (abs_dir_path, "**", star_BRANCHES_ONLY,
	     addr (local_area), star_entry_count, star_entry_ptr,
	     star_names_ptr, code);
	if code = error_table_$nomatch
	then return;				/* Nothing to do */
	else if code ^= 0
	then call error (code);


/* set acls of rw and sma for each entry found */

	do local_index = 1 to star_entry_count;
	     current_name = star_names (star_entries.nindex (local_index));
	     call fs_util_$get_type (abs_dir_path, current_name, file_type,
		code);
	     if code ^= 0
	     then call error (code);
	     if file_type = FS_OBJECT_TYPE_DIRECTORY then do;
		     call fs_util_$add_acl_entries (abs_dir_path, current_name,
			dacl_ptr, code);
		     if code = error_table_$argerr
		     then call error (
			     dacl_ptr -> dir_acl.entries (1).status_code);
		     else if code ^= 0
		     then call error (code);

/* Now do everything in this directory too */

		     call force_dir_contents_acls ((rtrim (abs_dir_path)
			|| ">" || rtrim (current_name)), facl_ptr, dacl_ptr);
		end;
	     else do;
		     call fs_util_$add_acl_entries (abs_dir_path,
			current_name, facl_ptr, code);
		     if code = error_table_$argerr
		     then call error (facl_ptr
			     -> file_acl.entries (1).status_code);
		     else if code ^= 0
		     then call error (code);
		end;
	end;

	declare abs_dir_path	 char (*);	/* local copy of the directory name we are currently working on */
	declare code		 fixed bin (35);	/* Error code */
	declare current_name	 char (35);	/* Current name from starname call */
	declare dacl_ptr		 ptr;		/* Pointer to a general acl structure containing dir acls */
	declare facl_ptr		 ptr;		/* Same as above but for file acls */
	declare file_type		 char (32);	/* What kind of file system entity are we dealing with */
	declare fs_util_$add_acl_entries entry (char (*), char (*), ptr, fixed bin (35));
	declare fs_util_$get_type	 entry (char (*), char (*), char (*), fixed bin (35));
	declare local_index		 fixed bin;	/* local copy of index into list of entries */
%page;
%include star_structures;

     end;
%page;
error: proc (cd);

	dcl     cd		 fixed bin (35);

	error_code = cd;
	goto PROGRAM_EXIT;
     end error;


PROGRAM_EXIT:

%page;
          declare MRDS_SEARCHLIST        char (4) int static options (constant) init ("mrds");
	declare abs_db_path		 char (168);	/* absolute path to db */
          declare absolute_pathname_     entry (char(*), char(*), fixed bin(35));
	declare access_mode_overlay_ptr ptr;		/* points to access_mode */
	declare area		 condition;	/* if area to small for allocate */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area details */
	declare area_ptr		 ptr;		/* pointer to users area */
	declare chase_links		 fixed bin (1) init (1); /* find link target info */
	declare cleanup		 condition;	/* signaled upon quit/release */
	declare containing_dir	 char (168);	/* name of dir containing db */
	declare db_dir		 char (32);	/* entry name of db dir */
	declare 1 dir_acl		 like general_acl based (dir_acl_ptr); /* For setting dir acls */
	declare dir_acl_ptr		 ptr;		/* pointer to  directory acl structure */
	declare dont_chase_links	 fixed bin (1) init (0); /* get info about link, not target */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$area_too_small fixed bin (35) ext; /* for area condition */
	declare error_table_$argerr	 fixed bin (35) ext;/* returned if acl structure status code ^= 0 */
	declare error_table_$badcall	 fixed bin (35) ext;/* null pointer given */
	declare error_table_$incorrect_access fixed bin (35) ext; /* no access on dir, or entry */
	declare error_table_$insufficient_access fixed bin (35) ext; /* process doesn't have sufficient access */
	declare error_table_$no_s_permission fixed bin (35) ext; /* no "s" on containing dir */
	declare error_table_$nomatch	 fixed bin (35) ext;/* nothing found in directory */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* bad structure version */
	declare 1 file_acl		 like general_acl based (file_acl_ptr); /* For setting file acls */
	declare file_acl_ptr	 ptr;		/* Default pointer for above */
	declare get_group_id_$tag_star entry returns (char (32)); /* gets person.project.* */
	declare hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)); /* gets list of star names */
	declare hcs_$status_	 entry (char (*), char (*), fixed bin (1),
				 ptr, ptr, fixed bin (35)); /* gets access mode */
          declare idx                    fixed bin;
	declare local_area		 area (5000);	/* space for star entries/names structures */
          declare loop_idx               fixed bin;
	declare mrds_dm_check_path	 entry (char (*), char (168), char (32), bit (1), fixed bin (35)); /* verifies db path */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attribute */
	declare mrds_error_$no_model_access fixed bin (35) ext static;
	declare mrds_error_$version_not_supported fixed bin (35) ext; /*  db doesn't have secured bit */
          declare mrds_search_list_ptr   ptr;
	declare new_found		 bit (1);		/* on => new version db arch */
          declare pathname_              entry (char(*), char(*)) returns(char(168));
	declare rel_db_path		 char (*);	/* input database path */
          declare search_paths_$get      entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr, fixed bin(35));
	declare structure_ptr	 ptr;		/* parameter version of mrds_authorization_ptr */
	declare structure_version	 fixed bin;	/* desired version of structure */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* alrgest segmetn size */
          declare use_search_paths       bit (1);
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for users area */
	declare (addr, empty, null, rtrim, search, sum, unspec) builtin;
	declare 1 access_mode_overlay	 based (access_mode_overlay_ptr),
		2 unused		 bit (1) unal,
		2 status		 bit (1) unal,	/* status permission */
		2 unimplemented	 bit (1) unal,
		2 modify		 bit (1) unal,	/* modify permission */
		2 append		 bit (1) unal;	/* append permission */
	declare 1 local_mrds_authorization like mrds_authorization; /* for set_needed_access entryies use */
	declare 1 my_area_info	 like area_info;	/* local copy */
	declare 1 my_status_branch	 like status_branch.short; /* local copy */
%page;
%include access_mode_values;
%page;
%include acl_structures;
%page;
%include copy_flags;
%page;
%include mrds_authorization;
%page;
%include mdbm_db_model;
%page;
%include sl_info;
%page;
%include sl_control_s;
%include status_structures;
%page;
%include suffix_info;
%page;
%include area_info;

     end mrds_dm_authorization;
