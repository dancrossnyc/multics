/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* -sem mrds_dsm_semantics
   -ssl
   -table mrds_dsm_parse_table
   -alm
   -term
   -ct
   -recover ;
   -order
   <identifier>
   ;
   -parse */

mrds_dsm_semantics: proc (p_mrds_dsm_semantics_info_ptr, rule, alt, p_lex_stack_ptr, ls_top, p_code);

/*
   This is the LRK source and the semantics for parsing  mrds  cmdsm
   sources. The source mrds_dsm_semantics.pl1 is produced by running
   LRK  over  mrds_dsm_parse.lrk.  Changes  should  never  be   made
   directly   to  the  module  mrds_dsm_semantics,  but  instead  to
   mrds_dsm_parse.lrk.

   The production of a dsm is a two pass  process,  the  first  pass
   being  done  by this module (mrds_dsm_semantics) in collaboration
   with mrds_dsm_parse and mrds_dsm_scanner, and the various  tables
   and  include  files  built  by LRK using mrds_dsm_parse.lrk. This
   produces a submodel with all of the relation records  implied  by
   the  cmdsm,  with  attribute  names  filled in but no access bits
   turned on. The second pass is  done  by  mrds_dsm_compute_access.
   This  consists  solely  of  setting access bits. Using two passes
   allows the syntax  for  cmdsm  sources  to  be  completely  order
   independent,  e.g.  one  needn't define a relation before setting
   access to it (or vice versa).

   Present in the submodel at this  time  are  also  various  access
   records,  default  relation  access,  default  attribute  access,
   relation access, and attribute access.  The  record  portions  of
   these   records   are  all  identical,  being  the  access_record
   structure.  The  keys  are   built   using   strings   from   the
   mrds_dsm_head_strings  include  file  and  relation and attribute
   names, concatenating strings together in some instances.

   The  basic  scheme  of  the  semantics  is  that  each  RULE   is
   individually   invoked   by  the  parser,  mrds_dsm_parse.  Where
   necessary to keep track of information between successive  RULEs,
   the  semantics pointer in the lex_stack is used to hang arbitrary
   structures off of.  For  instance,  the  alias  RULE  leaves  the
   semantics  pointer  pointing  at  an  alias  structure  with null
   forward and backward pointers. The alias  list  RULE  leaves  the
   semantics  pointer  pointing at an end of a doubly linked list of
   alias structures. The relation spec RULE actually uses the  alias
   structures  to  figure  out  the  dsm  relation  name,  the model
   relation name, and the dsm and model attribute names.

   Known Bugs:

   Other Problems:

   1) mode_str has to be changed from update to modify. It  must  be
   changed  simultaneously  in  several modules. Since the user does
   not see the update value there is no hurry.

   HISTORY:

   ??-??-?? Spratt: written.

   80-09-20 Spratt: The alias list was being followed backwards (via
   .        the "prev" pointers) when filling  in  the  rel_rec.attr
   .        array  in  the  code  for  the  "relation specification"
   .        production. This was changed to follow  the  alias  list
   .        along  the "next" thread, hence recording the attributes
   .        in the correct order.

   80-09-25 Spratt: Added  the  "in  <relation>"  construct  to  the
   .        attracc statement.

   80-12-05 Spratt: Removed status relation  access  keyword,  added
   .        "null"  relation  access  keyword.  Formatted  the   lrk
   .        source.

   81-01-05 Davids: changed the update and u keywords to modify  and
   .        m. added the  keywords  append_tuple  and  delete_tuple.
   .        removed  the  keywords  status and s. added the key word
   .        with and corrected rel  access  spec  to  use  the  with
   .        keyword.

   .        Added  the  attribute   access   modes   read_attr   and
   .        modify_attr,  changed  read  and modify to read attr and
   .        modify attr. Changed deltup and apptup to d and a.

   81-01-27 Davids: added statements to free the alias, rel_rec  and
   .        access_record structures.

   81-02-03 Davids: modified the rel access spec rule alternative  2
   .        (with option) to take the symbol and symbol length  from
   .        ls_top  -  8 rather than 7. 7 was just plain wrong. Also
   .        the rel_access_head had to take  the  semantics  pointer
   .        from ls_top - 6 rather than 5.

   81-03-09 Davids: modified default  relation  access  and  default
   .        attribute access statements so that the access list  may
   .        optionaly be enclosed in ().

   81-04-28     Davids:     replaced      the      reference      to
   .        cmdsm_access_record.incl.pl1                        with
   .        mrds_dsm_access_record.incl.pl1

   .        added a statement  in  the  make_access_record  internal
   .        procedure  to  set  the  used  bit  of the access_record
   .        structure to "0"b;

   81-04-29 Davids: replaced the  include  file  cmdsm_rel_rec  with
   .        mrds_dsm_rel_rec_5.  all  references  to  rel_rec  where
   .        changed   to   rel_rec_5   and   the  pointer  reference
   .        rel_rec_5_ptr was added to all references to rel_rec_5.

   81-05-08  Davids:  added  the   validate_relation   routine   and
   .        corrected the report_error routine to be able to  report
   .        errors   with   severity  greater  than  1  with  out  a
   .        conversion error (there was an  extra  ^d  in  the  ioa_
   .        control string).

   .        removed the use  of  include  files  from  the  internal
   .        procedures  make_access_record  and free_link_list. this
   .        was done by declaring local pointers and refering to the
   .        based  structures  using  the pointer. The local copy is
   .        perhaps not needed but i'm stcking to the original  code
   .        as much as possible.

   81-05-11 Davids: added calls to ioa using the listing iocb_ptr if
   .        that pointer is non-null (in the report_error procedure)

   .        removed  some  undeclared   variables   (including   the
   .        iox_dcls include file - explicitly declared seek_key and
   .        write_record)  and  declared  some  builtins  that  were
   .        implicitly declared.

   81-05-12 Davids: added code to validate that no relation has  the
   .        same submodel attribute name defined twice or  uses  the
   .        same  model  attribute  to define two different submodel
   .        attributes.

   81-05-13 Davids: added code to check  the  lengths  of  both  the
   .        submodel relation name  and  attribute  name.  attribute
   .        names  are  checked  in  the  validate_relation routine,
   .        relation names are checked in the relation_specification
   .        rule (which later calls validate_relation) because it is
   .        the only  place  that  the  submodel  relation  name  is
   .        available.

   81-05-20 Davids:  changed  relacc  and  attracc  to  rel_acc  and
   .        attr_acc.

   81-05-21  Davids:  moved  code  that  checks  the  length of the
   .       submodel name to the validate_relation proc and pass the
   .       name to that proc as a parameter.

   .       added  code  to write a model_relation_name key for each
   .       relation.   the  key  points  to  the  submodel relation
   .       record.   this  code  is  used  to  be sure that a model
   .       relation is used to define only 1 submodel relation.

   81-05-22 Davids: changed code so that the model relation name key
   .        is not pointing at the relation  record  but  at  a  new
   .        (just written) record that contains no information. this
   .        was because having the two keys pointing at the relation
   .        record was screwing up compute_access which uses the key
   .        value to get the relation name.

   81-05-28 Davids: changed the cmdsm_head_strings include  file  to
   .        mrds_dsm_head_strings      include     file,     changed
   .        cmdsm_link_list include file to mrds_dsm_link_list.
*/

/* PARAMETER */

	dcl     p_mrds_dsm_semantics_info_ptr ptr;
	dcl     p_code		 fixed bin (35);
	dcl     rule		 fixed bin (24);
	dcl     alt		 fixed bin (24);
	dcl     p_lex_stack_ptr	 ptr;
	dcl     ls_top		 fixed bin (24);

/* AUTOMATIC */

	dcl     rel_rec_5_ptr	 ptr init (null ());
	dcl     work_area_ptr	 ptr;
	dcl     debug_sw		 bit (1) aligned;
	dcl     submodel_iocb_ptr	 ptr;
	dcl     message		 char (256);
	dcl     message_length;
	dcl     alias_ptr		 ptr;
	dcl     key_string		 char (256) varying;
	dcl     code		 fixed bin (35);
	dcl     attr_idx		 fixed bin;
	dcl     rec_len		 fixed bin (21);
	dcl     mode_str		 char (32) varying;
	dcl     temp_ptr		 ptr;

/* BASED */

	dcl     work_area		 area (261120) based (work_area_ptr);
	dcl     seg_str		 char (261120) based;
	dcl     1 alias		 based (alias_ptr),
		2 prev		 ptr,
		2 next		 ptr,
		2 dm_name		 char (256) varying,
		2 dsm_name	 char (256) varying;

/* BUILTIN */

	dcl     max		 builtin;
	dcl     null		 builtin;
	dcl     currentsize		 builtin;
	dcl     hbound		 builtin;
	dcl     length		 builtin;
	dcl     addr		 builtin;
	dcl     substr		 builtin;

/* ENTRY */

	dcl     mrds_dm_get_attributes entry (ptr, char (32), ptr, ptr, fixed bin (35));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$rs		 entry options (variable);
	dcl     ioa_		 entry () options (variable);
	dcl     iox_$seek_key	 entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* EXTERNAL */

	dcl     error_table_$no_record fixed bin (35) external static;
	dcl     error_table_$key_duplication fixed bin (35) external static;
	dcl     mrds_error_$inconsistent_submodel fixed bin (35) external static;
	dcl     mrds_error_$invalid_rel fixed bin (35) external static;
	dcl     mrds_error_$no_model_attr fixed bin (35) external static;
	dcl     mrds_error_$no_model_rel fixed bin (35) external static;

	mrds_dsm_semantics_info_ptr = p_mrds_dsm_semantics_info_ptr;
	submodel_iocb_ptr = mrds_dsm_semantics_info.submodel_iocb_ptr;
	work_area_ptr = mrds_dsm_semantics_info.work_area_ptr;
	debug_sw = mrds_dsm_semantics_info.debug_semantics;
	lex_stack_ptr = p_lex_stack_ptr;
	p_code = 0;

	goto RULE (rule);

/* <source> ::= <statement list> ! */
RULE (0001):
	if debug_sw
	then call ioa_ ("Source.");
	return;

/* <statement list> ::= <statement list> <statement> | <statement> ! */
RULE (0002):
	if debug_sw
	then call ioa_ ("Statement list.");
	return;

/* <statement> ::= <relation statement>
   |<relation access statement>
   |<attribute access statement>
   |<default relation access statement>
   |<default attribute access statement>! */
RULE (0003):
	if debug_sw
	then call ioa_ ("Statement");
	return;

/* <relation statement> ::= <relation key> ': <relation specification list> ;! */
RULE (0004):
	if debug_sw
	then call ioa_ ("Relation statement.");
	return;

/* <relation specification list> ::= <relation specification list>, <relation specification>
   |<relation specification>! */
RULE (0005):
	if debug_sw
	then call ioa_ ("Relation specification list.");
	return;

/* <relation specification> ::= <alias> (<alias list>)! */
RULE (0006):
	if debug_sw
	then call ioa_ ("Relation specification.");
	key_string = REL_HEAD || lex_stack (ls_top - 3).semantics_ptr -> alias.dsm_name;
	call iox_$seek_key (submodel_iocb_ptr, key_string, rec_len, code);
	if code = 0
	then do;
		call ioa_$rs ("Relation ^a in line number ^d.", message, message_length,
		     lex_stack (ls_top - 3).semantics_ptr -> alias.dsm_name, lex_stack (ls_top - 3).line);
		call report_error (1, (DUPLICATE_RELATION_DEF_ERROR), (message));
		return;
	     end;
	else if code ^= error_table_$no_record
	then do;
		call ioa_$rs ("Unable to make entry for relation ^a in submodel.", message, message_length,
		     lex_stack (ls_top - 3).semantics_ptr -> alias.dsm_name);
		call report_error (4, (code), (message));
		return;
	     end;

/*  The semantics_ptr points at the tail of the alias list. When through with
   this loop, alias_ptr will point at the root ot the alias list.
*/

	alias_ptr = lex_stack (ls_top - 1).semantics_ptr;
	do attr_idx = 1 by 1 while (alias.prev ^= null);
	     alias_ptr = alias.prev;
	end;

	rel_rec_5_attr_num = attr_idx;
	allocate rel_rec_5 in (work_area) set (rel_rec_5_ptr);
	rel_rec_5_ptr -> rel_rec_5.rel_dm_name = lex_stack (ls_top - 3).semantics_ptr -> alias.dm_name;

/* alias_ptr is set to the "Root" of the list of aliases (attributes) by the short loop
   following the "prev" chain, above.
*/

	do attr_idx = 1 to rel_rec_5_attr_num;
	     rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dsm_name = alias.dsm_name;
	     rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dm_name = alias.dm_name;
	     temp_ptr = alias_ptr;
	     alias_ptr = alias.next;
	     free temp_ptr -> alias in (work_area);
	end;

	call iox_$write_record (submodel_iocb_ptr, rel_rec_5_ptr, 4 * currentsize (rel_rec_5_ptr -> rel_rec_5), code);
	if code ^= 0
	then do;
		call ioa_$rs ("Unable to write submodel entry for relation ^a.", message, message_length,
		     rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		call report_error (4, (code), message);
	     end;

	call validate_relation (lex_stack (ls_top - 3).semantics_ptr -> alias.dsm_name);

	free rel_rec_5_ptr -> rel_rec_5 in (work_area);

	return;

/* <alias list> ::= <alias list> <alias> | <alias>! */
RULE (0007):
	if debug_sw
	then call ioa_ ("Alias list.");
	if alt = 1
	then do;
		lex_stack (ls_top).semantics_ptr -> alias.prev = lex_stack (ls_top - 1).semantics_ptr;
		lex_stack (ls_top - 1).semantics_ptr -> alias.next = lex_stack (ls_top).semantics_ptr;
		lex_stack (ls_top - 1).semantics_ptr = lex_stack (ls_top).semantics_ptr;
	     end;
	return;

/* <alias> ::= <general identifier> '= <general identifier> | <general identifier>! */
RULE (0008):
	if debug_sw
	then call ioa_ ("Alias.");
	allocate alias in (work_area);
	alias.prev = null;
	alias.next = null;
	alias.dm_name = substr (lex_stack (ls_top).symptr -> seg_str, 1, lex_stack (ls_top).symlen);
	if alt = 1
	then do;
		alias.dsm_name = substr (lex_stack (ls_top - 2).symptr -> seg_str, 1, lex_stack (ls_top - 2).symlen);
		lex_stack (ls_top - 2).semantics_ptr = alias_ptr;
	     end;
	else do;
		alias.dsm_name = substr (lex_stack (ls_top).symptr -> seg_str, 1, lex_stack (ls_top).symlen);
		lex_stack (ls_top).semantics_ptr = alias_ptr;
	     end;
	return;

/* <relation access statement> ::= <relation access key> ': <rel access spec list> ;! */
RULE (0009):
	if debug_sw
	then call ioa_ ("Relation access statement.");
	return;

/* <rel access spec list> ::= <rel access spec list>, <rel access spec>
   |<rel access spec>! */
RULE (0010):
	if debug_sw
	then call ioa_ ("Rel access spec list.");
	return;

/* <rel access spec> ::= <general identifier> (<rel access modes list>)
   | <general identifier> (<rel access modes list>) <with keyword> <attribute access key> (<attr access modes list>)! */
RULE (0011):
	if debug_sw
	then call ioa_ ("Rel access spec.");
	if alt = 1
	then do;
		call process_access (REL_ACCESS_HEAD
		     || substr (lex_stack (ls_top - 3).symptr -> seg_str, 1, lex_stack (ls_top - 3).symlen),
		     lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then do;
			p_code = code;
			return;
		     end;
	     end;
	else if alt = 2
	then do;
		call process_access (REL_ACCESS_HEAD
		     || substr (lex_stack (ls_top - 8).symptr -> seg_str, 1, lex_stack (ls_top - 8).symlen),
		     lex_stack (ls_top - 6).semantics_ptr, code);
		if code ^= 0
		then do;
			p_code = code;
			return;
		     end;
		call process_access (REL_ATTR_ACCESS_HEAD
		     || substr (lex_stack (ls_top - 8).symptr -> seg_str, 1, lex_stack (ls_top - 8).symlen),
		     lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then do;
			p_code = code;
			return;
		     end;
	     end;

	return;

/* <rel access modes list> ::= <rel access modes list>, <relation access mode key>
   | <relation access mode key>! */
RULE (0012):
	if debug_sw
	then call ioa_ ("Rel access mode list.");
	if alt = 1
	then do;
		lex_stack (ls_top).semantics_ptr -> link.prev = lex_stack (ls_top - 2).semantics_ptr;
		lex_stack (ls_top - 2).semantics_ptr -> link.next = lex_stack (ls_top).semantics_ptr;
		lex_stack (ls_top - 2).semantics_ptr = lex_stack (ls_top).semantics_ptr;
	     end;
	return;



/* <relation access mode key> ::= <delete tuple key>
   | <null key>
   | <append tuple key>! */
RULE (0013):
	if debug_sw
	then call ioa_ ("Relation access mode key.");
	if alt = 1
	then mode_str = "delete_tuple";
	else if alt = 2
	then mode_str = "null";
	else mode_str = "append_tuple";

	link_str_len = length (mode_str);
	allocate link in (work_area);
	link.str = mode_str;
	link.next = null;
	link.prev = null;
	lex_stack (ls_top).semantics_ptr = link_ptr;
	return;

/* <attribute access statement> ::= <attribute access key> ': <attr access spec list> ;! */
RULE (0014):
	if debug_sw
	then call ioa_ ("Attribute access statement.");
	return;

/* <attr access spec list> ::= <attr access spec list>, <attr access spec>
   | <attr access spec>! */
RULE (0015):
	if debug_sw
	then call ioa_ ("Attr access spec list.");
	return;

/* <attr access spec> ::= <general identifier> (<attr access modes list>)
   | <general identifier> <in keyword> <general identifier> (<attr access modes list>)! */
RULE (0016):
	if debug_sw
	then call ioa_ ("Attr access spec.");
	if alt = 1
	then do;
		call process_access (ATTR_ACCESS_HEAD
		     || substr (lex_stack (ls_top - 3).symptr -> seg_str, 1, lex_stack (ls_top - 3).symlen),
		     lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
		return;
	     end;
	else do;
		call process_access (ATTR_ACCESS_HEAD
		     || substr (lex_stack (ls_top - 5).symptr -> seg_str, 1, lex_stack (ls_top - 5).symlen)
		     || ATTR_REL_DELIMITER
		     || substr (lex_stack (ls_top - 3).symptr -> seg_str, 1, lex_stack (ls_top - 3).symlen),
		     lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
		return;
	     end;

/* <attr access modes list> ::= <attr access modes list>, <attribute access mode key>
   | <attribute access mode key>! */
RULE (0017):
	if debug_sw
	then call ioa_ ("Attr access mode list.");
	if alt = 1
	then do;
		lex_stack (ls_top).semantics_ptr -> link.prev = lex_stack (ls_top - 2).semantics_ptr;
		lex_stack (ls_top - 2).semantics_ptr -> link.next = lex_stack (ls_top).semantics_ptr;
		lex_stack (ls_top - 2).semantics_ptr = lex_stack (ls_top).semantics_ptr;
	     end;
	return;

/* <attribute access mode key> ::= <read key> | <null key> | <modify key>! */
RULE (0018):
	if debug_sw
	then call ioa_ ("Attribute access mode key.");
	if alt = 1
	then mode_str = "read";
	else if alt = 2
	then mode_str = "null";
	else if alt = 3
	then mode_str = "update";
	link_str_len = length (mode_str);
	allocate link in (work_area);
	link.str = mode_str;
	link.prev = null;
	link.next = null;
	lex_stack (ls_top).semantics_ptr = link_ptr;
	return;

/* <default attribute access statement> ::= <default attribute access key> ': <attr access modes list> ;
   |   <default attribute access key> ': (<attr access modes list>) ;! */
RULE (0019):
	if debug_sw
	then call ioa_ ("Default attribute access statement.");
	if alt = 1
	then do;
		call process_access ((DEF_ATTR_ACCESS_HEAD), lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
	     end;
	else
	     if alt = 2
	then do;
		call process_access ((DEF_ATTR_ACCESS_HEAD), lex_stack (ls_top - 2).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
	     end;
	return;

/* <default relation access statement> ::= <default relation access key> ': <rel access modes list> ;
   |   <default relation access key> ': (<rel access modes list>) ;! */
RULE (0020):
	if debug_sw
	then call ioa_ ("Default relation access statement.");
	if alt = 1
	then do;
		call process_access ((DEF_REL_ACCESS_HEAD), lex_stack (ls_top - 1).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
	     end;
	else
	     if alt = 2
	then do;
		call process_access ((DEF_REL_ACCESS_HEAD), lex_stack (ls_top - 2).semantics_ptr, code);
		if code ^= 0
		then p_code = code;
	     end;
	return;



/* <relation access key> ::= <relation keyword> <access keyword> | <rel_acc keyword>! */
RULE (0021):
	if debug_sw
	then call ioa_ ("Relation access key.");
	return;

/* <attribute access key> ::= <attribute keyword> <access keyword> | <attr_acc keyword>! */
RULE (0022):
	if debug_sw
	then call ioa_ ("Attribute access key.");
	return;

/* <default attribute access key> ::= <default keyword> <attribute keyword > <access keyword> | <default keyword> <attr_acc keyword>! */
RULE (0023):
	if debug_sw
	then call ioa_ ("Default attribute access key.");
	return;

/* <default relation access key> ::= <default keyword> <relation keyword> <access keyword> | <default keyword> <rel_acc keyword>! */
RULE (0024):
	if debug_sw
	then call ioa_ ("Default relation access key.");
	return;



/* <delete tuple key> ::= <delete keyword> <tuple keyword> | <d keyword> | <delete_tuple keyword>! */
RULE (0025):
	if debug_sw
	then call ioa_ ("Delete tuple key.");
	return;

/* <append tuple key> ::= <append keyword> <tuple keyword> | <a keyword> | <append_tuple keyword>! */
RULE (0026):
	if debug_sw
	then call ioa_ ("Append tuple key.");
	return;

/* <read key> ::= <read keyword> <attr keyword> | <read_attr keyword> | <r keyword>! */
RULE (0027):
	if debug_sw
	then call ioa_ ("Read key.");
	return;

/* <modify key> ::= <modify keyword> <attr keyword> | <modify_attr keyword> | <m keyword>! */
RULE (0028):
	if debug_sw
	then call ioa_ ("Update key.");
	return;

/* <null key> ::= <null keyword> | <n keyword>! */
RULE (0029):
	if debug_sw
	then call ioa_ ("Null key.");
	return;

/* <general identifier> ::= <identifier>
   | <relation keyword>
   | <attribute keyword>
   | <access keyword>
   | <attr_acc keyword>
   | <rel_acc keyword>
   | <default keyword>
   | <in keyword>
   | <with keyword>
   | <delete keyword>
   | <append keyword>
   | <tuple keyword>
   | <attr keyword>
   | <d keyword>
   | <a keyword>
   | <delete_tuple keyword>
   | <append_tuple keyword>
   | <read keyword>
   | <read_attr keyword>
   | <r keyword>
   | <modify keyword>
   | <modify_attr keyword>
   | <m keyword>
   | <null keyword>
   | <n keyword>! */
RULE (0030):
	if debug_sw
	then call ioa_ ("General identifier.");
	return;

/* <relation keyword> ::= relation! */
RULE (0031):
	if debug_sw
	then call ioa_ ("Relation keyword.");
	return;

/* <attribute keyword> ::= attribute! */
RULE (0032):
	if debug_sw
	then call ioa_ ("Attribute keyword.");
	return;

/* <access keyword> ::= access! */
RULE (0033):
	if debug_sw
	then call ioa_ ("Access keyword.");
	return;

/* <rel_acc keyword> ::= rel_acc! */
RULE (0034):
	if debug_sw
	then call ioa_ ("Rel_acc keyword.");
	return;

/* <attr_acc keyword> ::= attr_acc! */
RULE (0035):
	if debug_sw
	then call ioa_ ("Attr_acc keyword.");
	return;

/* <default keyword> ::= default! */
RULE (0036):
	if debug_sw
	then call ioa_ ("Default keyword.");
	return;

/* <relation key> ::= <relation keyword>! */
RULE (0037):
	if debug_sw
	then call ioa_ ("Relation key.");

/* <in keyword> ::= in! */
RULE (0038):
	if debug_sw
	then call ioa_ ("In keyword.");
	return;

/* <with keyword> ::= with! */
RULE (0039):
	if debug_sw
	then call ioa_ ("With keyword.");
	return;

/* <delete keyword> ::= delete! */
RULE (0040):
	if debug_sw
	then call ioa_ ("Deltup keyword.");
	return;

/* <append keyword> ::= append! */
RULE (0041):
	if debug_sw
	then call ioa_ ("Apptup keyword.");
	return;

/* <tuple keyword> ::= tuple! */
RULE (0042):
	if debug_sw
	then call ioa_ ("Tuple keyword.");
	return;

/* <attr keyword> ::= attr! */
RULE (0043):
	if debug_sw
	then call ioa_ ("Attr keyword.");
	return;

/* <d keyword> ::= d! */
RULE (0044):
	if debug_sw
	then call ioa_ ("D keyword.");
	return;

/* <a keyword> ::= a! */
RULE (0045):
	if debug_sw
	then call ioa_ ("A keyword.");
	return;

/* <delete_tuple keyword> ::= delete_tuple! */
RULE (0046):
	if debug_sw
	then call ioa_ ("Delete_tuple keyword.");
	return;

/* <append_tuple keyword> ::= append_tuple! */
RULE (0047):
	if debug_sw
	then call ioa_ ("Append_tuple keyword.");
	return;

/* <read keyword> ::= read! */
RULE (0048):
	if debug_sw
	then call ioa_ ("Read keyword.");
	return;

/* <read_attr keyword> ::= read_attr! */
RULE (0049):
	if debug_sw
	then call ioa_ ("Read_attr keyword.");
	return;

/* <modify keyword> ::= modify! */
RULE (0050):
	if debug_sw
	then call ioa_ ("Update keyword.");
	return;

/* <modify_attr keyword> ::= modify_attr! */
RULE (0051):
	if debug_sw
	then call ioa_ ("Modify_attr keuword.");
	return;

/* <null keyword> ::= null! */
RULE (0052):
	if debug_sw
	then call ioa_ ("Null keyword.");
	return;

/* <n keyword> ::= n! */
RULE (0053):
	if debug_sw
	then call ioa_ ("N keyword.");
	return;

/* <r keyword> ::= r! */
RULE (0054):
	if debug_sw
	then call ioa_ ("R keyword.");
	return;

/* <m keyword> ::= m! */
RULE (0055):
	if debug_sw
	then call ioa_ ("U keyword.");
	return;

make_access_record: proc (p_link_ptr, p_work_area_ptr, p_access_rec_ptr);

/* PARAMETER */

	dcl     p_link_ptr		 ptr;
	dcl     p_work_area_ptr	 ptr;
	dcl     p_access_rec_ptr	 ptr;

/* AUTOMATIC */

	dcl     local_access_record_ptr ptr;
	dcl     local_link_ptr	 ptr;
	dcl     mode_idx		 fixed bin;

/* BASED */

	dcl     work_area		 area (261120) based (p_work_area_ptr);



	local_link_ptr = p_link_ptr;
	do mode_idx = 0 by 1 while (local_link_ptr ^= null);
	     local_link_ptr = local_link_ptr -> link.prev;
	end;

	access_record_mode_num = mode_idx;
	allocate access_record in (work_area) set (local_access_record_ptr);
	local_link_ptr = p_link_ptr;
	do mode_idx = 1 to access_record_mode_num;
	     local_access_record_ptr -> access_record.modes (mode_idx) = local_link_ptr -> link.str;
	     local_link_ptr = local_link_ptr -> link.prev;
	end;
	local_access_record_ptr -> access_record.used = "0"b;
	p_access_rec_ptr = local_access_record_ptr;

	return;

     end;						/* End of make_access_record. */

free_link_list: proc (p_link_ptr, p_work_area_ptr);

/* PARAMETER */

	dcl     p_link_ptr		 ptr;
	dcl     p_work_area_ptr	 ptr;

/* AUTOMATIC */

	dcl     local_link_ptr	 ptr;
	dcl     prev_link_ptr	 ptr;

/* BASED */

	dcl     work_area		 based (p_work_area_ptr) area (261120);



	local_link_ptr = p_link_ptr;
	do while (local_link_ptr ^= null);
	     prev_link_ptr = local_link_ptr -> link.prev;
	     free local_link_ptr -> link in (work_area);
	     local_link_ptr = prev_link_ptr;
	end;

	return;

     end;						/* End of free_link_list. */

report_error: proc (p_severity, p_error_number, p_message);

/* PARAMETER */

	dcl     p_severity		 fixed bin;
	dcl     p_error_number	 fixed bin (35);
	dcl     p_message		 char (*);

/* AUTOMATIC */

	dcl     long_message	 char (100);
	dcl     short_message	 char (8);

/* ENTRIES */

	dcl     convert_status_code_	 entry (fixed bin (35), char (8), char (100));


	if p_error_number > hbound (MRDS_DSM_ERROR_MESSAGE, 1)
	then do;
		call convert_status_code_ (p_error_number, short_message, long_message);
		call ioa_$ioa_switch (mrds_dsm_semantics_info.error_iocb_ptr,
		     "^[Severity ^d, Error^;^sWarning^] On or Before Line ^d.^/^a^/^a", (p_severity > 1), p_severity,
		     lex_stack (ls_top).line, long_message, p_message);
		if mrds_dsm_semantics_info.listing_iocb_ptr ^= null ()
		then do;
			call ioa_$ioa_switch (mrds_dsm_semantics_info.listing_iocb_ptr,
			     "^[Severity ^d, Error^;^sWarning^] On or Before Line ^d.^/^a^/^a", (p_severity > 1), p_severity,
			     lex_stack (ls_top).line, long_message, p_message);
		     end;
	     end;
	else do;
		call ioa_$ioa_switch (mrds_dsm_semantics_info.error_iocb_ptr,
		     "^[Severity ^d, Error^;^sWarning^] On or Before Line ^d.^/^a^/^a", (p_severity > 1), p_severity,
		     lex_stack (ls_top).line, MRDS_DSM_ERROR_MESSAGE (p_error_number), p_message);
		if mrds_dsm_semantics_info.listing_iocb_ptr ^= null ()
		then do;
			call ioa_$ioa_switch (mrds_dsm_semantics_info.listing_iocb_ptr,
			     "^[Severity ^d, Error^;^sWarning^] On or Before Line ^d.^/^a^/^a", (p_severity > 1), p_severity,
			     lex_stack (ls_top).line, MRDS_DSM_ERROR_MESSAGE (p_error_number), p_message);
		     end;
	     end;
	mrds_dsm_semantics_info.highest_severity = max (mrds_dsm_semantics_info.highest_severity, p_severity);
     end;						/* End of report_error. */

process_access: proc (p_key_string, p_link_list_ptr, p_code);

	dcl     p_key_string	 char (256) varying;
	dcl     p_link_list_ptr	 ptr;
	dcl     p_code		 fixed bin (35);



	call iox_$seek_key (submodel_iocb_ptr, p_key_string, rec_len, p_code);
	if p_code = 0
	then do;
		p_code = error_table_$key_duplication;
		call ioa_$rs ("Multiple specifications for ^a submodel entry.", message, message_length, p_key_string);
		call report_error (2, DUPLICATE_ENTRY_ERROR, (message));
		return;
	     end;
	else if p_code ^= error_table_$no_record
	then do;
		call ioa_$rs ("Unable to seek submodel entry for ^a.", message, message_length, p_key_string);
		call report_error (4, (p_code), (message));
		return;
	     end;

	call make_access_record (p_link_list_ptr, work_area_ptr, access_record_ptr);

	call iox_$write_record (submodel_iocb_ptr, access_record_ptr, 4 * currentsize (access_record), p_code);
	if p_code ^= 0
	then do;
		call ioa_$rs ("Unable to write submodel entry for ^a.", message, message_length, p_key_string);
		call report_error (4, (p_code), (message));
		return;
	     end;

	free access_record_ptr -> access_record in (work_area);

	call free_link_list (p_link_list_ptr, work_area_ptr);
	p_code = 0;
     end;						/* End of process_access. */

validate_relation: proc (dsm_relation_name);

	dcl     dsm_relation_name	 char (256) varying;

	dcl     found		 bit (1) unal;
	dcl     model_attr_idx	 fixed bin;
	dcl     j			 fixed bin;

	if length (dsm_relation_name) > 30
	then do;
		call ioa_$rs ("Submodel relation name ^a has exceeded the maximum length of 30 characters",
		     message, message_length, dsm_relation_name);
		call report_error (4, mrds_error_$inconsistent_submodel, message);
	     end;

	call mrds_dm_get_attributes
	     (mrds_dsm_semantics_info.data_model_ptr,
	     (rel_rec_5_ptr -> rel_rec_5.rel_dm_name),
	     work_area_ptr,
	     rd_ptr,
	     code);
	if code = mrds_error_$no_model_rel
	then do;
		call ioa_$rs ("Model relation ^a does not exist in the database", message, message_length,
		     rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		call report_error (4, mrds_error_$invalid_rel, message);
		return;
	     end;
	else
	     if code ^= 0
	then do;
		call ioa_$rs ("Unable to read model relation ^a for validation", message, message_length,
		     rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		call report_error (4, code, message);
		return;
	     end;

	do attr_idx = 1 to rel_rec_5_attr_num;

	     if length (rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dsm_name) > 32
	     then do;
		     call ioa_$rs ("Submodel attribute name ^a has exceeded the maximum length of 32 characters",
			message, message_length, rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dsm_name);
		     call report_error (4, mrds_error_$inconsistent_submodel, message);
		end;

	     found = "0"b;
	     do model_attr_idx = 1 to rd_ptr -> rel_desc.num_attr while (^found);
		if rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dm_name
		     = rd_ptr -> rel_desc.attributes (model_attr_idx).attribute_name
		then found = "1"b;
	     end;
	     if ^found
	     then do;
		     call ioa_$rs ("Model attribute ^a used in defining submodel attribute ^a does " ||
			"not exist in the model relation ^a", message, message_length,
			rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dm_name,
			rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dsm_name,
			rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		     call report_error (4, mrds_error_$no_model_attr, message);
		end;

	     do j = 1 to attr_idx - 1;

		if rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dsm_name
		     = rel_rec_5_ptr -> rel_rec_5.attr (j).dsm_name
		then do;
			call ioa_$rs ("Submodel attribute ^a defined multiple times at attribute positions ^i and ^i",
			     message, message_length, rel_rec_5_ptr -> rel_rec_5.attr (j).dsm_name,
			     j, attr_idx);
			call report_error (4, mrds_error_$inconsistent_submodel, message);
		     end;

		if rel_rec_5_ptr -> rel_rec_5.attr (attr_idx).dm_name
		     = rel_rec_5_ptr -> rel_rec_5.attr (j).dm_name
		then do;
			call ioa_$rs ("Model attribute ^a used multiple times at attribute positions ^i and ^i",
			     message, message_length, rel_rec_5_ptr -> rel_rec_5.attr (j).dm_name,
			     j, attr_idx);
			call report_error (4, mrds_error_$inconsistent_submodel, message);
		     end;

	     end;

	end;

	key_string = MODEL_REL_HEAD || rel_rec_5_ptr -> rel_rec_5.rel_dm_name;
	call iox_$seek_key (submodel_iocb_ptr, key_string, rec_len, code);
	if code = 0
	then do;
		call ioa_$rs ("Model relation ^a has already been used to define a relation",
		     message, message_length, rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		call report_error (4, mrds_error_$inconsistent_submodel, message);
		code = 0;
	     end;
	else
	     if code ^= error_table_$no_record
	then do;
		call ioa_$rs ("PROGRAM LOGIC ERROR^/Could not seek key for validating model relation use for ^a",
		     message, message_length, rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
		code = 0;
	     end;
	else do;
		call iox_$write_record (submodel_iocb_ptr, addr (j), 1, code);
		if code ^= 0
		then do;
			call ioa_$rs ("PROGRAM LOGIC ERROR^/Unable to write record for validating model relation use for ^a",
			     message, message_length, rel_rec_5_ptr -> rel_rec_5.rel_dm_name);
			code = 0;
		     end;
	     end;

	free rd_ptr -> rel_desc;

	return;

     end validate_relation;

%include mrds_dsm_link_list;
%page;
%include mrds_dsm_access_record;
%page;
%include mrds_dsm_parse_stack;
%page;
%include mrds_dsm_rel_rec_5;
%page;
%include mrds_dsm_head_strings;
%page;
%include mrds_dsm_sem_info;
%page;
%include mrds_dsm_error_info;
%page;
%include mrds_rel_desc;


     end;						/* End of mrds_dsm_semantics. */
