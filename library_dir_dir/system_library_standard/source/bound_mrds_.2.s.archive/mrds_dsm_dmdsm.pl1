/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */


mrds_dsm_dmdsm: proc (mrds_dsm_display_info_ptr, code);

/* DESCRIPTION:

   This  is the basic subroutine for displaying the submodel.  It is called by
   both display_mrds_dsm and create_mrds_dsm.



   PARAMETERS:

   mrds_dsm_display_info_ptr:  pointer  to the mrds_dsm_display_info structure
   containted in mrds_dsm_display_info.incl.pl1.  This variable is declared in
   the afore mentioned include file.

   code: the standard system return code.




   HISTORY:

   81-05-22 Rickie E. Brinegar: Initially Written.

   81-06-02   Davids:   changed   the   mrds_dsm_headr_str   include  file  to
   mrds_dsm_header.

   81-06-09    Rickie    E.     Brinegar:    modified    to    make   use   of
   mrds_dsm_display_info.submodel_secured when displaying the long format.

   81-06-11  Rickie  E.  Brinegar: Modified to incorporate audit changes which
   include:
   1) trapping the sub_error_ condition.
   2)    Just    printing    a    message    and    then    continuing    when
   error_table_$no_record is returned by mrds_dsm_read_relation.

*/

%include mrds_dm_header;
%page;
%include mrds_dsm_display_info;
%page;
%include mrds_dsm_entry_dcls;
%page;
%include mrds_dsm_header;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_rel_desc;

/* AUTOMATIC */

	dcl     (attr_index,			/* submodel attribute index */
	        dm_attr_index,			/* data model attribute index */
	        rel_index)		 fixed bin;	/* relation index */

	dcl     (data_model_ptr	 init (null),	/* To model that this submodel is for */
	        hd_ptr		 init (null),	/* To header information */
	        wa_ptr		 init (null)) ptr;	/* To temp segment */

	dcl     date_time_str	 char (25);	/* for date_time conversions */

/* BASED */

	dcl     work_area		 area (sys_info$max_seg_size) based (wa_ptr);

/* BUILTIN */

	dcl     (addr,
	        empty,
	        null)		 builtin;

/* CONDITION */

	dcl     (cleanup,
	        sub_error_)		 condition;

/* CONSTANT */

	dcl     READ_MODE		 init (2) fixed bin internal static options (constant);

/* ENTRY */

	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     mrds_dm_close	 entry (ptr, fixed bin (35));
	dcl     mrds_dm_get_attributes entry entry (ptr, char (32), ptr, ptr, fixed bin (35));
	dcl     mrds_dm_get_header	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
	dcl     mu_display_descriptor	 entry (ptr) returns (char (120) varying);
	dcl     mu_trim_descriptor	 entry (char (120) varying) returns (char (*));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));

/* EXTERNAL */

	dcl     (error_table_$no_record,
	        sys_info$max_seg_size) fixed bin (35) ext;

	dcl     (iox_$error_output,
	        iox_$user_output)	 ptr ext;

/* PARAMETER */

	dcl     code		 fixed bin (35);	/* INPUT: Standard return code */


/* ****************************************************************************
   INITIALIZATION
   **************************************************************************** */

	on cleanup call finish;

	call get_temp_segment_ ("mrds_dsm_dmdsm", wa_ptr, code);
	if code ^= 0 then
	     go to exit;

	work_area = empty;

/* ****************************************************************************
   Get the list of relations to be displayed.
   **************************************************************************** */

	mrds_dsm_relation_names_ptr = mrds_dsm_display_info.rel_names_array_ptr;

	if mrds_dsm_relation_names_ptr = null then do;
		call mrds_dsm_get_relation_names (wa_ptr, mrds_dsm_relation_names_ptr, mrds_dsm_display_info.submodel_iocb_ptr,
		     code);
		if code ^= 0 then
		     go to exit;
	     end;

/* ****************************************************************************
   Print the display. This code is maintained in the alphabetical order of the
   value of mrds_dsm_display_info.format
   **************************************************************************** */

	on sub_error_ ;
	if mrds_dsm_display_info.format = "b" then /* if brief format */
	     call brief_format;
	else
	     if mrds_dsm_display_info.format = "c" then do; /* if cmdsm format */
		call mrds_dsm_read_header (wa_ptr, hd_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);
		if code ^= 0 then
		     go to exit;
		call cmdsm_format;
	     end;
	else
	     if mrds_dsm_display_info.format = "l" then do; /* if long format */
		call mrds_dsm_read_header (wa_ptr, hd_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);
		if code ^= 0 then
		     go to exit;
		call long_format;
	     end;
	else
	     if mrds_dsm_display_info.format = "r" then /* if rel_name format */
	     call rel_name_format;

/* ****************************************************************************
   All done
   **************************************************************************** */

exit:	call finish;
	return;					/* Normal end for mrds_dsm_dmdsm. */

brief_format: proc;

/* ****************************************************************************
   Display relation names, attribute names and, possibly, their respective
   access information
   **************************************************************************** */

	do rel_index = 1 to mrds_dsm_relation_names.nrels;/* get the submodel relation info */
	     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (rel_index), wa_ptr,
		relation_block_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);

	     if code = 0 then do;
		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
						/* display the relation info */
			"^/^[^[a^]^[d^]^[n^]^5t^a^;^3s^5t^a^]",
			mrds_dsm_display_info.access,
			relation_block.rel_access.append,
			relation_block.rel_access.delete,
			relation_block.rel_access.null,
			relation_block.dsm_rel_name);

		     do attr_index = 1 to relation_block.no_rb_attributes; /* display this relations
						   attribute info */
			call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
			     "^[^[r^]^[m^]^[n^]^8t^a^;^3s^8t^a^]",
			     mrds_dsm_display_info.access,
			     relation_block.attribute_info (attr_index).attr_access.read,
			     relation_block.attribute_info (attr_index).attr_access.modify,
			     relation_block.attribute_info (attr_index).attr_access.null,
			     relation_block.attribute_info (attr_index).dsm_attr_name);
		     end;

		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "");
		end;
	     else
		if code = error_table_$no_record then
		call relation_not_in_submodel;
	     else
		go to exit;
	end;
     end brief_format;

cmdsm_format: proc;

/* ****************************************************************************
   Display the submodel information in a format that may be used to create a new
   submodel.
   **************************************************************************** */

	call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "^//*" ||
	     /* Print the header information */
	     "^/created from:^2x^a" ||
	     "^/^9xfor:^2x^a" ||
	     "^/^10xby:^2xdisplay_mrds_dsm -cmdsm^/*/^/",
	     mrds_dsm_display_info.submodel_pathname,
	     hd_ptr -> mrds_dsm_header.database_pn);

	do rel_index = 1 to mrds_dsm_relation_names.nrels;/* get the relation information */

	     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (rel_index), wa_ptr,
		relation_block_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);

	     if code = 0 then do;
		     if mrds_dsm_display_info.access then /* print the relation access info */
			call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
			     "relation access:^4x^a^x(^[append_tuple^[^x^]^;^s^]^[delete_tuple^[^x^]^;^s^]^[null^]);^/",
			     mrds_dsm_relation_names.relation (rel_index),
			     relation_block.rel_access.append,
			     (relation_block.rel_access.delete | relation_block.rel_access.null),
			     relation_block.rel_access.delete,
			     relation_block.rel_access.null,
			     relation_block.rel_access.null);

		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
						/* Print the relation info */
			"relation:^11x^a^x=^x^a",
			relation_block.dsm_rel_name, relation_block.dm_rel_name);

		     do attr_index = 1 to relation_block.no_rb_attributes; /* print the attribute info
						   (except access info) */

			call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
			     "^30t^[(^;^x^]^a^x=^x^a^[);^/^]",
			     (attr_index = 1),
			     relation_block.attribute_info (attr_index).dsm_attr_name,
			     relation_block.attribute_info (attr_index).dm_attr_name,
			     (attr_index = relation_block.no_rb_attributes));
		     end;

		     if mrds_dsm_display_info.access then /* print the attribute access info */

			do attr_index = 1 to relation_block.no_rb_attributes;

			     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
				"^[attribute access:^3x^;^21t^]^a^xin^x^a^x(^[read_attr^[^x^]^;^s^]" ||
				"^[delete_tuple^[^x^]^;^s^]^[null^])^[;^;,^]",
				(attr_index = 1),
				relation_block.attribute_info (attr_index).dsm_attr_name,
				relation_block.dsm_rel_name,
				relation_block.attribute_info (attr_index).attr_access.read,
				(relation_block.attribute_info (attr_index).attr_access.modify |
				relation_block.attribute_info (attr_index).attr_access.null),
				relation_block.attribute_info (attr_index).attr_access.modify,
				relation_block.attribute_info (attr_index).attr_access.null,
				relation_block.attribute_info (attr_index).attr_access.null,
				(attr_index = relation_block.no_rb_attributes));
			end;

		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "^[^;^//*^x^74(*^)^x*/^/^]",
						/* print the relation seperation comment line */
			(rel_index = mrds_dsm_relation_names.nrels));
		end;
	     else
		if code = error_table_$no_record then
		call relation_not_in_submodel;
	     else
		go to exit;
	end;

     end cmdsm_format;

long_format: proc;

/* ****************************************************************************
   Display everthing known about the submodel
   **************************************************************************** */

	call mrds_dm_open (hd_ptr -> mrds_dsm_header.database_pn, READ_MODE, data_model_ptr, code);
	if code ^= 0 then
	     go to exit;

/* Display header information */
	call date_time_ (hd_ptr -> mrds_dsm_header.date_time_generated, date_time_str);

	call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, /* display submodel header */
	     "^/Submodel path:^6x^a" ||
	     "^/^6xVersion:^6x^d" ||
	     "^/^3xCreated by:^6x^a" ||
	     "^/^3xCreated on:^6x^a" ||
	     "^/",
	     mrds_dsm_display_info.submodel_pathname,
	     hd_ptr -> mrds_dsm_header.dsm_generator_version,
	     hd_ptr -> mrds_dsm_header.creator_id,
	     date_time_str);

	call mrds_dm_get_header (data_model_ptr, wa_ptr, dmh_ptr, code); /* display model header info */
	if code ^= 0 then
	     go to exit;

	call date_time_ (dm_header.create_time, date_time_str);

	call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
	     "Database path:^6x^a" ||
	     "^/^6xVersion:^6x^d" ||
	     "^/^3xCreated by:^6x^a" ||
	     "^/^3xCreated on:^6x^a" ||
	     "^/",
	     hd_ptr -> mrds_dsm_header.database_pn,
	     dm_header.dmd_version,
	     dm_header.creator_id,
	     date_time_str);

	do rel_index = 1 to mrds_dsm_relation_names.nrels;/* Display each relation in the list */

	     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (rel_index), wa_ptr,
		relation_block_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);

	     if code = 0 then do;
		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
			"^/Submodel Relation Name:^6x^a" ||
			"^[^/^12xModel Name:^6x^a^;^s^]" ||
			"^[^/^16xAccess:^6x^[append_tuple ^]^[delete_tuple ^]^[null ^]^;^3s^]",
			relation_block.dsm_rel_name,
			(mrds_dsm_display_info.administrator | ^mrds_dsm_display_info.db_secured),
			relation_block.dm_rel_name,
			mrds_dsm_display_info.access,
			relation_block.rel_access.append, relation_block.rel_access.delete, relation_block.rel_access.null);

		     call mrds_dm_get_attributes (data_model_ptr, relation_block.dm_rel_name, wa_ptr,
			rd_ptr, code);		/* get datamodel attribute info */
		     if code ^= 0 then
			go to exit;

		     do attr_index = 1 to relation_block.no_rb_attributes; /* display each of this
						   realtions attributes' info */

			dm_attr_index = 1;		/* get data model attribute index */
			do while (dm_attr_index ^> rel_desc.num_attr &
			     rel_desc.attributes (dm_attr_index).attribute_name ^=
			     relation_block.attribute_info (attr_index).dm_attr_name);
			     dm_attr_index = dm_attr_index + 1;
			end;

			call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
			     "^/^9xSubmodel Attribute name:^6x^a" ||
			     "^[^/^22xModel Name:^6x^a^;^s^]" ||
			     "^[^/^26xAccess:^6x^[read_attr ^]^[modify_attr ^]^[null ^]^;^3s^]" ||
			     "^[^/^23xData Type:^6x^a" ||
			     "^[^/^39x^[Key ^]^[Index ^]^;^2s^]^;^4s^]",
			     relation_block.attribute_info (attr_index).dsm_attr_name,
			     (mrds_dsm_display_info.administrator | ^mrds_dsm_display_info.db_secured),
			     relation_block.attribute_info (attr_index).dm_attr_name,
			     mrds_dsm_display_info.access,
			     relation_block.attribute_info (attr_index).read, relation_block.attribute_info (attr_index).modify,
			     relation_block.attribute_info (attr_index).null,
			     (mrds_dsm_display_info.administrator | mrds_dsm_display_info.submodel_secured |
			     ^mrds_dsm_display_info.db_secured),
			     mu_trim_descriptor (mu_display_descriptor (addr (rel_desc.attributes (dm_attr_index).descriptor))),
			     (rel_desc.attributes (dm_attr_index).key_flag | rel_desc.attributes (dm_attr_index).inver_flag),
			     (rel_desc.attributes (dm_attr_index).key_flag & (mrds_dsm_display_info.administrator
			     | ^mrds_dsm_display_info.db_secured)),
			     (rel_desc.attributes (dm_attr_index).inver_flag
			     | (rel_desc.attributes (dm_attr_index).key_flag
			     & rel_desc.attributes (dm_attr_index).key_attr_order = 1
			     & mrds_dsm_display_info.db_secured & ^mrds_dsm_display_info.administrator)));

		     end;

		     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "");
		end;
	     else
		if code = error_table_$no_record then
		call relation_not_in_submodel;
	     else
		go to exit;
	end;

     end long_format;

rel_name_format: proc;

/* ****************************************************************************
   Display relation names and access
   **************************************************************************** */
	call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "");

	do rel_index = 1 to mrds_dsm_relation_names.nrels;

	     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (rel_index), wa_ptr,
		relation_block_ptr, mrds_dsm_display_info.submodel_iocb_ptr, code);

	     if code = 0 then
		call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr,
		     "^[^[a^]^[d^]^[n^]^5t^a^;^3s^5t^a^]",
		     mrds_dsm_display_info.access,
		     relation_block.rel_access.append,
		     relation_block.rel_access.delete,
		     relation_block.rel_access.null,
		     relation_block.dsm_rel_name);
	     else
		if code = error_table_$no_record then
		call relation_not_in_submodel;
	     else
		go to exit;
	end;

	call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "");

     end rel_name_format;

finish:
     proc;

/* ****************************************************************************
   Clean up anything left laying around
   **************************************************************************** */

	if data_model_ptr ^= null then
	     call mrds_dm_close (data_model_ptr, code);

	if wa_ptr ^= null then do;
		if hd_ptr ^= null then
		     free hd_ptr -> mrds_dsm_header;

		if mrds_dsm_display_info.rel_names_array_ptr = null & mrds_dsm_relation_names_ptr ^= null then
		     free mrds_dsm_relation_names;
		call release_temp_segment_ ("mrds_dsm_dmdsm", wa_ptr, code);
	     end;

     end finish;

relation_not_in_submodel:
     proc;

/* ****************************************************************************
   Display a message telling that the current relation is not in the submodel
   **************************************************************************** */

	call ioa_$ioa_switch (iox_$error_output, "Relation ^a is not in submodel ^a",
	     mrds_dsm_relation_names.relation (rel_index),
	     mrds_dsm_display_info.submodel_pathname);

	if mrds_dsm_display_info.output_iocb_ptr ^= iox_$user_output then
	     call ioa_$ioa_switch (mrds_dsm_display_info.output_iocb_ptr, "Relation ^a is not in submodel ^a",
		mrds_dsm_relation_names.relation (rel_index),
		mrds_dsm_display_info.submodel_pathname);

     end relation_not_in_submodel;

     end mrds_dsm_dmdsm;
