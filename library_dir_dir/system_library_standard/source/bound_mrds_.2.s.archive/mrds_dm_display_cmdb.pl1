/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

mrds_dm_display_cmdb: proc (I_mrds_dm_display_info_ptr, O_err_msg, O_err_code);

/* The purpose of this procedure is to display the db_model info in the
   form of a cmdb source.  The output is through the iocb_ptr supplied in
   mrds_dm_display_info.
*/


/****^  HISTORY COMMENTS:
  1) change(82-05-15,Lackey), approve(), audit(), install():
     written.
  2) change(83-10-03,Benjamin), approve(), audit(), install():
     to put the attribute information handling inside a begin block to keep from
     truncating the line when there are a lot of attributes.
  3) change(85-12-07,Spitzer), approve(85-12-07,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     Don't put unreferenced domains in the cmdb output. Put in a check to see
     if there are any referenced domains in the database. Use crossreference
     file for list of attributes.
                                                   END HISTORY COMMENTS */


/*      PARAMETERS     */

	dcl     I_mrds_dm_display_info_ptr ptr parameter; /* Pointer to mrds_dm_display_info structure */
	dcl     O_err_msg		 char (*) parameter;/* Text of error message */
	dcl     O_err_code		 fixed bin (35) parameter; /* Erro code */

%page;
/* mrds_dm_display_cmdb:  proc (I_mrds_dm_display_info_ptr, O_err_msg, O_err_code); */

	mrds_dm_display_info_ptr = I_mrds_dm_display_info_ptr; /* Init parameters */
	O_err_msg = "";
	O_err_code = 0;

	iocb_ptr = mrds_dm_display_info.output_iocb_ptr;	/* For faster reference */
	temp_file_iocb_ptr = null;
	dbm_ptr = mrds_dm_display_info.dbm_ptr;
	rel_name_table_ptr = null;			/* Not allocated yet */
	number_indexed_rels = 0;			/* Number relations indexed */

	on cleanup call tidy_up;			/* Establish clenaup handler */


	if mrds_dm_display_info.version ^= MRDS_DM_DISPLAY_INFO_VERSION_1 then
	     call error (error_table_$unimplemented_version,
		"For mrds_dm_display_info.version");



/*   ****   Output the header   ***    */

	if mrds_dm_display_info.sw.long then do;	/* If long output header */

		call date_time_ (clock (), time_of_list);

		call
		     ioa_$ioa_switch (iocb_ptr,
		     "^/ /* Created from   ^a ^/^2-^a^-*/",
		     mrds_dm_display_info.db_path,
		     time_of_list);
	     end;
%page;
/*    **** Output domain section  ****    */

	if db_model.domain_ptr = NULL_OFFSET then do;
NO_DOMAINS:         call ioa_$ioa_switch (iocb_ptr,
		     "^2/No domains exist for the data base^/^a",
		     mrds_dm_display_info.db_path);
		return;
	     end;

	call ioa_$ioa_switch (iocb_ptr, "^/domain:");	/* Domain section */

	found_one = "1"b;
	do di_ptr = ptr (dbm_ptr, db_model.domain_ptr) /* Loop thru all domains */
	     repeat ptr (dbm_ptr, domain_info.fwd_thread)
	     while (rel (di_ptr) ^= NULL_OFFSET);

	     if ^domain_info.unreferenced then do;
		if found_one then found_one = "0"b;
		else call ioa_$ioa_switch (iocb_ptr, ",");
		long_desc_str = mdbm_util_$display_descriptor (addr (domain_info.db_desc));
		if mrds_dm_display_info.sw.long then do;
			desc_str = long_desc_str;
			call ioa_$ioa_switch_nnl (iocb_ptr, "^-^a^/^-^5x^a",
			     domain_info.name, long_desc_str);
		     end;
		else do;
			desc_str = mdbm_util_$trim_descriptor (long_desc_str);
			call ioa_$ioa_switch_nnl (iocb_ptr, "^-^20a^1x^a",
			     domain_info.name, desc_str);
		     end;

		if domain_info.check_path_ptr ^= NULL_OFFSET then
		     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-check_proc ^a",
			get_path_entry (domain_info.check_path_ptr, "$"));

		if domain_info.encd_path_ptr ^= NULL_OFFSET then
		     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-encode_proc ^a",
			get_path_entry (domain_info.encd_path_ptr, "$"));

		if domain_info.decd_path_ptr ^= NULL_OFFSET then
		     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_proc ^a",
			get_path_entry (domain_info.decd_path_ptr, "$"));

		if domain_info.db_desc ^= domain_info.user_desc then
		     /* It had a -decode_dcl */
		     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_dcl ^/^15x^a",
			mdbm_util_$display_descriptor (addr (domain_info.user_desc)));

		end;
	end;					/* End Domain section */
	if found_one then goto NO_DOMAINS;

	call ioa_$ioa_switch (iocb_ptr, ";");

	if db_model.num_rels > 0 then call build_db_attr_list; /* Build attribute list in vfile */
%page;
/*   *****        Output Attribute section if needed         ***        */

	if found_one then do;			/* If any attributes
						   exists with a name different
						   then its domain name */

		call ioa_$ioa_switch (iocb_ptr, "^2/attribute:"); /* Attribute section */

		call iox_$position (temp_file_iocb_ptr, BOF, 0, code);
		if code ^= 0 then call error (code, "Positioning temp file to BOF");

		printed_one_sw = "0"b;

		seek_head_info.seek_type = 0;
		seek_head_info.seek_key = ATTRIBUTE_KEY_HEAD;
		seek_head_info.n = length (ATTRIBUTE_KEY_HEAD);
		call iox_$control (temp_file_iocb_ptr, "seek_head", addr (seek_head_info), code);
		if code = error_table_$no_record then do;
		     call ioa_$ioa_switch (iocb_ptr, "^2/No attributes exist for the data base^/^a",
			mrds_dm_display_info.db_path);
		     return;
		     end;

		crossref_info_record_ptr = addr (domain_offset);
		do while (code = 0);

		     call iox_$read_key (temp_file_iocb_ptr, key, rec_len, code);
		     if code = 0 then
			if substr (key, 1, length (ATTRIBUTE_KEY_HEAD)) ^= ATTRIBUTE_KEY_HEAD then
			     code = error_table_$end_of_info;

		     if code = 0 then do;
			call iox_$read_record (temp_file_iocb_ptr,
			     crossref_info_record_ptr, 2, (0), code);
			if code = error_table_$long_record then
			     code = 0;
			if code = 0 then do;

			     di_ptr = ptr (dbm_ptr, domain_offset);
			     key = substr (key, length (ATTRIBUTE_KEY_HEAD) + 1);

			     if rtrim (domain_info.name) ^= key then do;

				     if printed_one_sw then
					call ioa_$ioa_switch (iocb_ptr, ","); /* Put comma at end of line */

				     call ioa_$ioa_switch_nnl (iocb_ptr, "^-^20a^1x^a",
					key, di_ptr -> domain_info.name);

				     printed_one_sw = "1"b;
				end;
			     end;
			end;

		end;				/* do while code = 0 */

		if code ^= error_table_$end_of_info then
		     call error (code, "Getting attribute names from temp fiel");

		call ioa_$ioa_switch (iocb_ptr, ";");	/* Put semicolon at end of line */
	     end;					/* End found one */
%page;
/*    *****     Output relation section       *****     */

	if db_model.num_rels < 1 then do;		/* No relation defined in db */
		call ioa_$ioa_switch (iocb_ptr,
		     "^2/There are no relations defined for the data base^/^a",
		     mrds_dm_display_info.db_path);
		return;
	     end;


	call ioa_$ioa_switch_nnl (iocb_ptr, "^2/relation:"); /* Relation section */

	do i = 1 to rel_name_table_ix;

	     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^-^20a^1x(", rel_name_table (i).rel_name);

	     fm_ptr = rel_name_table (i).file_model_ptr;
	     ri_ptr = rel_name_table (i).rel_info_ptr;

	     begin;

		dcl     attr_line		 char (rel_info.num_attr * 35) varying;

		attr_line = "";

		do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* Loop thru all attibutes getting the attr_name */
		     repeat ptr (fm_ptr, attr_info.fwd_thread)
		     while (rel (ai_ptr) ^= NULL_OFFSET);

		     attr_line = attr_line || rtrim (attr_info.name);

		     if attr_info.key_attr then attr_line = attr_line || "*";

		     if attr_info.fwd_thread = NULL_OFFSET then /* Last attr in rel */
			attr_line = attr_line || ")";
		     else attr_line = attr_line || "  ";

		end;

		if i = db_model.num_rels then /* Last relation */
		     call ioa_$ioa_switch_nnl (iocb_ptr, "^a;", attr_line);
		else call ioa_$ioa_switch_nnl (iocb_ptr, "^a,", attr_line);

	     end;					/* begin block */

	     line = "";
	end;
%page;
/*     *****     index section for output     ***** */

	if number_indexed_rels > 0 then do;		/* If any relations were indexed */

		call ioa_$ioa_switch_nnl (iocb_ptr, "^2/index:");

		number_indexed_rels_used = 0;

		do i = 1 to rel_name_table_ix;

		     if rel_name_table (i).indexed then do;

			     number_indexed_rels_used = number_indexed_rels_used + 1;

			     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^-^20a^1x(", rel_name_table (i).rel_name);

			     fm_ptr = rel_name_table (i).file_model_ptr;
			     ri_ptr = rel_name_table (i).rel_info_ptr;
			     line = "";
			     one_found = "0"b;

			     do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* Loop thru all attibutes getting the attr_name */
				repeat ptr (fm_ptr, attr_info.fwd_thread)
				while (rel (ai_ptr) ^= NULL_OFFSET);

				if attr_info.index_attr then do;

					if one_found then line = line || "  ";
					line = line || rtrim (attr_info.name);

					one_found = "1"b;
				     end;
			     end;

			     if number_indexed_rels_used = number_indexed_rels then /* last one */
				call ioa_$ioa_switch_nnl (iocb_ptr, "^a);", line);
			     else call ioa_$ioa_switch_nnl (iocb_ptr, "^a),", line);

			     line = "";
			end;

		end;				/* End if rel_name_table.indexed */

	     end;					/* END if indexed_found */

	call ioa_$ioa_switch (iocb_ptr, "^/");		/* Add a couple if line feeds at the end */

	call tidy_up;

exit:	return;
%page;
/*  * * * * * * * * * * *  build_db_attr_list  * * * * * * * * * * * * * *   */


build_db_attr_list: proc;

/*
   This internal subroutine calls the subroutine to build the database
   crossreference file. It also checks to see if an attribute name exists that
   is different then a domain name, if so it sets the found_one bit. The
   rel_name_table is allocated and filled in as the relation info is
   encountered.
*/

	temp_file_iocb_ptr = mrds_dm_display_info.xref_iocb_ptr;
	if temp_file_iocb_ptr = null then do;
	     call mu_db_xref$xref_build (mrds_dm_display_info.temp_dir_path, mrds_dm_display_info.db_path, dbm_ptr,
		mrds_dm_display_info.xref_name, mrds_dm_display_info.xref_iocb_ptr, error_message, code);
	     if code ^= 0 then call error (code, error_message);

	     temp_file_iocb_ptr = mrds_dm_display_info.xref_iocb_ptr;
	     end;

/* Create the rel_name_table structure and initialize it */
	allocate rel_name_table in (wa) set (rel_name_table_ptr);
	rel_name_table (*).indexed = "0"b;		/* Init to off */
	rel_name_table_ix = 0;			/* To start with */
	rel_name_table (*).file_model_ptr = null;

	found_one = "0"b;				/* Just to be sure */

/*  Walk the file_info list to get relation info */
	do fi_ptr = ptr (dbm_ptr, db_model.file_ptr) /* Loop thru all files (relations ) */
	     repeat ptr (dbm_ptr, file_info.fwd_ptr)
	     while (rel (fi_ptr) ^= NULL_OFFSET);

	     file_model_name = rtrim (file_info.file_name) || ".m";

	     call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
	     if fm_ptr = null then call error (code, rtrim (db_path) || ">" || file_model_name);

	     ri_ptr = ptr (fm_ptr, file_model.rel_ptr);	/* Relation info ptr */
	     rel_name_table_ix = rel_name_table_ix + 1;	/* Next array index */
	     rel_name_table (rel_name_table_ix).rel_name = file_info.file_name; /* Save rel info */
	     rel_name_table (rel_name_table_ix).file_model_ptr = fm_ptr;
	     rel_name_table (rel_name_table_ix).rel_info_ptr = ri_ptr;
	     rel_name_table (rel_name_table_ix).indexed = rel_info.indexed;
	     if rel_name_table (rel_name_table_ix).indexed then
		number_indexed_rels = number_indexed_rels + 1; /* Keep count */

/*
   Look through all the attributes in each relation looking for an attribute
   that is based upon a domain with a different name. If we find one, set
   found_one on. This bit is later used to determine if the "attribute:"
   statement need to be emitted. We can stop looking after the first one
   is found, as we only have to find one.
*/
	     do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr)
		repeat ptr (fm_ptr, attr_info.fwd_thread)
		while (rel (ai_ptr) ^= NULL_OFFSET & ^found_one);

		di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
		if domain_info.name ^= attr_info.name
		then found_one = "1"b;
	     end;					/* END of all attrs */

	end;					/* END of all files (relations) */
						/* vfile_ now contains all unique attribute names as keys with domain offset as data */

     end build_db_attr_list;

%page;
/*  * * * * * * * * * * * * * *      error     * * * * * * * * * * * * * *   */



error: proc (err_code, err_message);			/* Error procedure  */

	dcl     err_code		 fixed bin (35);
	dcl     err_message		 char (*);


	O_err_code = err_code;
	O_err_msg = err_message;
	call tidy_up;
	goto exit;

     end error;





/* * * * * * * * * * * * * * * *   tidy_up  * * * * * * * * * * * * * * *  */

tidy_up: proc;

	if rel_name_table_ptr ^= null then do;
	     do i = 1 to rel_name_table_ix;
		call terminate_file_ (rel_name_table (i).file_model_ptr, 0, TERM_FILE_TERM, (0));
		end;
	     free rel_name_table;
	     end;

     end tidy_up;
%page;
/*    * * * * * * * *     get_path_entry      * * * * * * * * * *           */

get_path_entry: procedure (path_ptr, separator) returns (char (256));

	dcl     path_ptr		 bit (18) unal;	/* offset to struct in dbm_area */
	dcl     separator		 char (1);	/* either ">" or "$" */

/* get the path - entry character string from the path_entry structure */

	path_entry_ptr = ptr (dbm_ptr, path_ptr);

	return (rtrim (path_entry.path) || separator || rtrim (path_entry.entry));

     end get_path_entry;
%page;
	dcl     addr		 builtin;
	dcl     BOF		 int static options (constant) init (-1);
	dcl     cleanup		 condition;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     desc_str		 char (120) varying;
	dcl     domain_offset	 bit (18) aligned;
	dcl     error_message	 char (500);
	dcl     error_table_$end_of_info fixed bin (35) ext static;
	dcl     error_table_$long_record fixed bin(35) ext static;
	dcl     error_table_$no_record fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     file_model_name	 char (32);
	dcl     fixed		 builtin;
	dcl     found_one		 bit (1);
	dcl     i			 fixed bin;
	dcl     initiate_file_	 entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl     ioa_$ioa_switch	 entry () options (variable);
	dcl     ioa_$ioa_switch_nnl	 entry () options (variable);
	dcl     iocb_ptr		 ptr;
	dcl     iox_$control	 entry (ptr, char(*), ptr, fixed bin(35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     iox_$read_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$read_record	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     key		 char (256) varying;
	dcl     length		 builtin;
	dcl     line		 char (500) varying;
	dcl     long_desc_str	 char (120) varying;
	dcl     mdbm_util_$display_descriptor entry (ptr) returns (char (120) varying);
	dcl     mdbm_util_$trim_descriptor entry (char (120) varying) returns (char (*));
	dcl     mu_db_xref$xref_build	 entry (char(*), char(*), ptr, char(*), ptr, char(*), fixed bin(35));
	dcl     null		 builtin;
	dcl     NULL_OFFSET		 int static bit (18) unal init ((18)"1"b) options (constant);
	dcl     number_indexed_rels	 fixed bin;
	dcl     number_indexed_rels_used fixed bin;
	dcl     one_found		 bit (1);
	dcl     printed_one_sw	 bit (1);
	dcl     ptr		 builtin;
	dcl     rec_len		 fixed bin (21);
	dcl     rel		 builtin;
	dcl     rel_name_table_ix	 fixed bin;
	dcl     rtrim		 builtin;
	dcl     substr		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     temp_file_iocb_ptr	 ptr;
	dcl     terminate_file_	 entry (ptr, fixed bin(24), bit(*), fixed bin(35));
	dcl     time_of_list	 char (24);
	dcl     wa		 area based (mrds_dm_display_info.work_area_ptr);

	dcl     1 seek_head_info	 aligned,
	          2 seek_type	 fixed bin,
		2 n		 fixed bin,
		2 seek_key	 char (256);

	dcl     1 rel_name_table	 (db_model.num_rels) aligned based (rel_name_table_ptr),
		2 rel_name	 char (32),	/* Relation name of this relation */
		2 file_model_ptr	 ptr,		/* Pointer to file_model for this relation */
		2 rel_info_ptr	 ptr,		/* Pointer to rel_info for this relation */
		2 indexed		 bit (1);		/* On = this rel contains an indexed attr */

	dcl     rel_name_table_ptr	 ptr;		/* Pointer to rel_name_table */
%page;
%include access_mode_values;
%page;
%include mrds_dm_display_info;
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include rmdb_crossref_info;
%page;
%include terminate_file;

     end mrds_dm_display_cmdb;

