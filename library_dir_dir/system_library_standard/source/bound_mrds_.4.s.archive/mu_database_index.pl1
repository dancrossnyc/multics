/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_database_index: procedure (index, dbcb_ptr); index = 0; dbcb_ptr = null (); return; /* invalid entry */

/* DESCRIPTION:

   this routine manages the  database  opening  index  table,  which
   contains  pointers  to the resultant models created at open time.
   the database index is the  array  address  of  the  corresponding
   dbcb_ptr(database  control block pointer in the resultant model).
   their are six entries, set_dbcb_ptr to enter a dbcb_ptr into  the
   table  and  get  a  new opening index. clear_dbcb_ptr to remove a
   dbcb_ptr from the table and make it's index reusable get_dbcb_ptr
   to  get  the resultant model dbcb pointer given an opening index.
   num_db_open to return the number of databases open by the calling
   process.  any_new_open to return true if any new version database
   is open. set_dbcb_flag to set a flag in  the  table  and  reserve
   that  slot  from  use  by a new version database, once a database
   index for an old version has been obtained.  NOTE:  this  routine
   needs  to  be  rewritten  to  avoid  the  critical  region due to
   recursion via a quit/re-invoke

*/

/* PARAMETERS:

   index - - (input for clear, get, set_flag and output for set_ptr)
   fixed bin(35) database opening index.

   dbcb_ptr - - (output for clear and get/ input for set) pointer to
   the  resultant  model  non_secure  segment known as dbcb(database
   control block).

   num_dbcb - - (output  for  num_db_open)  the  current  number  of
   databases open for this process, declared fixed bin(17).

   new_db_open - - (output) bit(1) aligned, output from any_new_open
   entry, on if any new version database is open.

*/

/* HISTORY:

   rewritten by Jim Gray - - August 1979 to 1) document module logic
   2)  correct  num_db_open entry to reflect current table status 3)
   correct logic of set_dbcb_ptr 4) make name change so calls are of
   form db_index$set, db_index$get, etc.

   Modified by  Jim  Gray  -  -  March  1980,  to  add  the  entries
   any_new_open,  set_dbcb_flag,  to build the logic for determining
   old/new version databases from their database index.

   Modified by Jim Gray - - June 1980, to pass  back  paths  of  old
   version   databases   in  phony  version  of  resultant  used  by
   dsl_$list_dbs.

   81-1-9 Jim Gray : changed to use actual include files for old and
   new  resultant  structures, also added more info to phony version
   of new version resultant, that  is  taken  from  an  old  version
   resultant  for  old  version  databases. This included open_mode,
   dbc_ptr,  db_version.  Thus  the  legimate  values  that  can  be
   obtained  from  the  phony  resultant,  for  old version database
   openings are: in the dbcb open_mode - dbc_ptr - rdbi_ptr  in  the
   rm_db_info  db_path - sm_path(always = db_path) - db_version This
   solves the problem with  DMOD  not  being  able  to  display  old
   version   databases   open   modes,  and  provides  for  the  new
   display_mrds_scope_settings  to  be  able  to  display  the   dbc
   structure version (as concurrency control version)

   81-04-24 Jim Gray :  changed  internal  static  tables  to  based
   arrays  in  a  temp  segment,  so  that  mrds_data_$max_dbs could
   automatically change the maximum number of openings allowed.

   81-04-27 Jim Gray :  extended  old  resultant  to  hold  submodel
   opening  information,  thus the phony resultant now has good info
   for dbcb.dsm_sw, rm_db_info.sm_ath & sm_version

   83-06-21 Davids: Eliminated the dbcb_flag_table which kept track of
   old/new version database openings (old version databases can no longer
   be opened). This eliminated a lot of overhead two entries were also
   deleted - set_dbcb_flag and any_new_open. 
*/

set_dbcb_ptr: get_database_index: entry (index, dbcb_ptr);

	if ^index_table_ready then
	     call init_index_table ();

/* given a dbcb pointer(resultant model control block segment pointer),
   find an empty space in the database index table, put the pointer
   their, and return the index value as the database index for this opening.
   0 is returned as an index, if the table is full. */

	index = 0;
	found = OFF;
	i = 1;

	do while (^found);

/* note: the flag table says whether an old version db_index is using the slot */

	     if dbcb_ptr_table (i) = null () then do;
		     found = ON;
		     dbcb_ptr_table (i) = dbcb_ptr;
		     index = i;
		end;

	     else if i < mrds_data_$max_dbs then /* not an empty slot */
		i = i + 1;			/* go to next slot */
	     else found = ON;			/* end of table reached, => table full */

	end;

	return;

clear_dbcb_ptr: reset_resultant_model_pointer: entry (index, dbcb_ptr);

	if ^index_table_ready then
	     call init_index_table ();

/* given a database index, find the corresponding resultant
   model control block segment pointer in the table, and
   set the dbcb_ptr to the value found their, at the same
   time setting that table entry to null, thus deleting
   that database index as a valid entry.
   an index outside the table limits returns a null pointer. */


	if index < 1 | index > mrds_data_$max_dbs then
	     dbcb_ptr = null ();
	else do;
		dbcb_ptr = dbcb_ptr_table (index);
		dbcb_ptr_table (index) = null ();
	     end;

	return;

get_dbcb_ptr: get_resultant_model_pointer: entry (index, dbcb_ptr);

	if ^index_table_ready then
	     call init_index_table ();

/* given a database index, look
   in the dbcb pointer table for the
   resultant model control block segment
   pointer corresponding to that index.
   a index beyond table limits results
   in a null pointer being returned. */


	if index < 1 | index > mrds_data_$max_dbs
	then dbcb_ptr = null ();			/* not valid index */
	else dbcb_ptr = dbcb_ptr_table (index);		/* new version */

	return;

num_db_open: get_number_open_dbs: entry returns (fixed bin);

	if ^index_table_ready then
	     call init_index_table ();

/* count the number of "good" database indexes already used in the
   dbcb pointer table, and return this as number of
   databases open by the caller process */


	num_dbcb = 0;
	do i = 1 by 1 to mrds_data_$max_dbs;
	     if dbcb_ptr_table (i) ^= null ()
	     then num_dbcb = num_dbcb + 1;
	end;

	return (num_dbcb);

init_index_table: procedure ();

/* this routine gets temp space for the db_index arrays,
   and initializes the two arrays involved.
   The arrays are made based, rather than internal static,
   so that the mrds_data_$max_dbs can be changed to automatically
   change the limit on the number of permissible openings.
   This temp space will remain around for the life of the process. */

	call get_temp_segment_ (caller_name, temp_seg_ptr, code);
	if code ^= 0 then
	     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a",
		"Unable to get a temp segment for managing the database opening indexes.");
	else do;

		temp_seg_ptr -> index_area = empty ();

		allocate dbcb_ptr_table set (dbcb_ptr_table_ptr) in (index_area);

		do i = 1 to mrds_data_$max_dbs;

		     dbcb_ptr_table (i) = null ();

		end;

		index_table_ready = ON;

	     end;

     end;

	declare OFF		 bit (1) init ("0"b) int static options (constant); /* false value */
	declare ON		 bit (1) init ("1"b) int static options (constant); /* true value */
	declare caller_name		 char (20) init ("mu_database_index"); /* name of calling routine */
	declare code		 fixed bin (35);	/* for sub_err_ */
	declare continue		 char (1) init ("c") int static options (constant); /* dont stop after printing mesg */
	declare dbcb_ptr_table	 (1:mrds_data_$max_dbs) ptr based (dbcb_ptr_table_ptr); /* table of dbcb ptrs */
	declare dbcb_ptr_table_ptr	 ptr init (null ()) int static; /* points to dbcb_ptr_table */
	declare found		 bit (1);		/* on => can exit search loop */
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets index space */
	declare i			 fixed bin;
	declare index		 fixed bin (35);	/* index into table of dbcb pointers */
	declare index_area		 area (sys_info$max_seg_size) based (temp_seg_ptr); /* space for index tables */
	declare index_table_ready	 bit (1) int static init ("0"b); /* on => index arrays already init */
	declare info_ptr		 ptr init (null ());/* unused */
	declare mrds_data_$max_dbs	 fixed bin ext;	/* max number of openings allowed */
	declare num_dbcb		 fixed bin;	/* num dbcb pointers in table */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare sub_err_		 entry options (variable); /* reports subroutine errors */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	declare temp_seg_ptr	 ptr;		/* points to temp index space */
	declare (empty, null)	 builtin;

%include mrds_dbcb;

%include mdbm_rm_db_info;

     end;
