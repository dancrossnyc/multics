/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-08-13,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-07,Dupuis), install(88-08-01,MR12.2-1073):
     Removed change of 84-11-05. i.e. reinstalled initialization of
     even_word_pad.
                                                   END HISTORY COMMENTS */



mu_sec_init_res:
init_res:
     proc (dsm_path, submodel_version, db_path, insecure_db_ptr,
	insecure_dbcb_ptr, insecure_rdbi_ptr, error_code);

/* BEGIN DESCRIPTION 

   This  routine  gets  a  segment  to  be  used  as the secure portion of the
   resultant  model  in  the  process  directory,  and  initializes  its base
   structure rm_db_info, as well as the rm_rel_array and rm_rel_array for both
   temporary  relations and  the  files/relations known to the user from the
   submodel or model he opened with.

   END DESCRIPTION


   PARAMETERS:

   dsm_path  - - (input) char(168), the pathname of the submodel if a submodel
   opening was used

   submodel_version  -  - (input) fixed bin, the version of the submodel used,
   if this was an opening via a submodel, else 0.

   db_path - - (input) char(168), the pathname of the database model

   insecure_db_ptr - - (input) the insecure pointer to the db_model segment in
   the database model

   insecure_dbcb_ptr  -  -  (input)  pointer  to the non-secure portion of the
   resultant  model,  which  contains the database index for this opening, and
   the submodel switch

   insecure_rdbi_ptr  -  -  (input)  pointer  to  the rm_db_info segment, the
   secure portion of the resultant

   error_code  -  -  (output)  fixed bin (35) error type encoding, 0 unless an
   error occurred

   sub_error_  -  - (output) condition, signaled upon occurence of an error to
   provide more info


   HISTORY:

   78-08-01 Oris D. Friesen: Originally written.

   79-05-01 Jim Gray : Rewritten to
   1) reflect resultant model changes of the active bit in the file array
   2) the mdbm_secured bit in the file array, no longer in rm_file_info
   3) add TP ctl_file iocb_ptr and sw_name to rm_db_info
   4) add freeing of submodel parameter structures after their use
   5) add use of sub_err_ and structured error handling
   6) change interface to allow more general information as input

   80-02-01  Jim  Gray : Modified to make rm_db_info.static_area extensible to
   handle large database resultant model building during opening.

   80-03-25 R. Lackey: Modified to remove calls to mdbm_util_

   80-10-01  Lindsey  Spratt:  changed  to  work  with the new secure submodel
   system;  the  mdbm_secured  switches, rm_rel_array.file_data.mdbm_secured,
   rm_db_info.mdbm_secured,  are  set  to the value of dsm_sw; dsmd_ calls are
   now   directly   to  the  relevant  mrds_dsm  module;  an  external  static
   submodel_iocb_ptr,  set  by  mrds_dsl_init_res,  is used when accessing the
   submodel.

   80-11-03  Jim  Gray  :  Modified to change delete_$ptr to hcs_$delentry_seg
   calls for performance.

   80-11-05  Jim  Gray  :  Modified  to set the mdbm_secured switches from the
   secured bit the the database model, as set by secure_mrds_db.

   80-11-06  Jim  Gray : Modified to only set rm_db_info.mdbm_secured from the
   model   secured   bit,   and   elsewhere   set   mdbm_secured   bits   from
   rm_db_info.mdbm_secured,  so that the model is only touched once in getting
   this info.

   81-1-12  Jim  Gray  :  added  submodel_version  parameter, so this could be
   initialized in the resultant when opening was via a submodel.

   81-01-28   Davids:   changed  drel_ptr  to  mrds_dsm_relation_names_ptr  to
   correspond to changes in the mrds_dsm_relation_names include file.

   81-03-27 Jim Gray : removed call to obsolete module mus_ptr_man.

   81-05-21    Rickie   E.    Brinegar:   Modified   to   use   the   modified
   mrds_dsm_get_relation_names.incl.pl1  which  changed  dsm_relation_names to
   mrds_dsm_relation_name.

   81-05-28 Jim Gray : modified for new structure of resultant.  This included
   combining  the  rm_rel/file_arrays,  and  adding  info  to  the  rm_db_info
   structure for a domain list.

   81-09-16  Rickie  E.  Brinegar: Modified model_name to be char (32) and the
   assignment  of name_in_model to be done via an rtrim to eliminate substring
   condtion from occurring on a compile.

   81-12-07  Roger D. Lackey: Modified to cause get_temp_segment_ to be called
   only when submodel is used.   And to change the initization of the variable
   caller_name from mrds_dsl_open to mu_sec_init_res. For TR12046.

   81-12-17 Davids: modified so that the rm_rel_array used for temp_rels has a
   dimension 1 greater than mrds_data_$max_temp_rels. this extra slot is  used
   when a temp rel is being self-defined. TR11630.

   82-07-21 Woodka: modified to initialize rdbi_ptr to null to prevent clean_up
   from trying to delete whatever rdbi_ptr happened to be pointing at if the 
   user hit break before the pointer was assigned. TR phx13152.

   83-05-04 Davids: Modified so that the segment the rdbi is in is a temp
   segment obtained from mu_temp_segment. Cleanup of the segment in case of an
   error will be done by the mrds_dsl_init_res module which will clean up all
   temp segments. The variable resultant_dir and the entry
   mrds_dsl_resultant_storage$get_temp_dir were deleted since mu_temp_segments
   knows where to put the temp segment. The entries hcs_$make_seg,
   unique_chars_ and hcs_$delentry_seg were also deleted since no segments
   need to be explicitly created, unique character strings are not needed for
   names for those segments which are no longer created. Cleanup is no done 
   by mrds_dsl_init_res which will cleanup all temp segments.

   83-05-16 Davids: Deleted the internal procedure get_rdbi_ptr which got a
   temp segment to put the rdbi into. Also converted the insecure_rdbi_ptr
   from an output parameter to an input parameter. The temp segment is now
   obtained in mrds_dsl_init_res in the same call that gets the other
   temp segments. Deleted the declaration for mu_temp_segments$get_temp_segment

   83-05-20 Davids: Added code to set the new rm_db_info.saved_res_version from
   mrds_data_$saved_res_version.

   84-11-05 Thanh Nguyen:  Changed  the  initialization  of  even_word_pad  to
   ref_name_proc_ptr in the structure rm_db_info. 
*/
%page;
/* initialize */

	dbm_ptr = insecure_db_ptr;			/* get local version of pointers */
	dbcb_ptr = insecure_dbcb_ptr;
	rdbi_ptr = insecure_rdbi_ptr;
	db_index = dbcb_ptr -> dbcb.dbi;
	dsm_sw = dbcb_ptr -> dbcb.dsm_sw;
	error_code = 0;
	area_ptr = null ();
	clean_up_condition = OFF;

/* establish handler to tie up loose ends if user does a quit/release */

	on cleanup
	     begin;
		clean_up_condition = ON;
		if substr (db_mu_sec_init_res, 1, 1) then
		     on sub_error_ ;		/* ignore sub_err_ calls during cleanup */
		call clean_up ();
	     end;

/* get space for submodel parameter structures */


	if dsm_sw then do;
		call get_temp_segment_ (caller_name, area_ptr, error_code);

		if error_code ^= 0 then
		     call
			sub_err_ (error_code, caller_name, continue, info_ptr,
			return_value, "^/^a",
			"Unable to get a temporary segment for submodel parameter structure area"
			);

		area_ptr -> parameter_area = empty ();
	     end;


/* get the number of relations and files in the model or submodel */

	call get_number_of_relations ();

/* initialize the rm_db_info based on this segment */

	call init_rm_db_info ();

/* initialize the temporary relation file and rel arrays */

	call init_temp_rel_array ();

/* initialize the normal model or submodel file and rel arrays */

	call init_rel_array ();

/* get rid of any temporary storage, and cleanup after errors */

	call clean_up ();

	return;
%page;
get_number_of_relations:
     procedure ();

/* set the number of relations known to the user,
   based upon the opening mode from model or submodel */

	if ^dsm_sw then /* not submodel, get from model */
	     number_of_relations = dbm_ptr -> db_model.num_rels;


	else do;					/* get from submodel */

		call mrds_dsm_get_relation_names (area_ptr,
		     mrds_dsm_relation_names_ptr,	/* points to relation name list returned */
		     submodel_iocb_ptr,
		     error_code);

		if error_code = 0 then
		     number_of_relations =
			mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names.nrels;
		else do;
			call
			     sub_err_ (error_code, caller_name, continue, info_ptr,
			     return_value, "^/^a ^a",
			     "Unable to get the relation names for the submodel", dsm_path);
			number_of_relations = 0;
		     end;

	     end;

     end;
%page;
init_rm_db_info:
     procedure ();

/* fill in the rm_db_info initial values */

	if error_code = 0 then do;

		rm_db_info.db_version = dbm_ptr -> db_model.version;
		rm_db_info.db_path = db_path;
		rm_db_info.sm_path = dsm_path;
		if dsm_sw then
		     rm_db_info.sm_version = submodel_version;
		else rm_db_info.sm_version = 0;
		rm_db_info.val_level = 4;		/* default validation level */
		rm_db_info.mdbm_secured = db_model.mdbm_secured; /* depends on secure_mrds_db command */
		rm_db_info.administrator = OFF;	/* set in mrds_dsl_init_res */
		rm_db_info.pad = OFF;
		rm_db_info.domain_list_ptr = null ();
		rm_db_info.ra_ptr = null ();
		rm_db_info.tra_ptr = null ();
		rm_db_info.saved_res_version = mrds_data_$saved_res_version;
		rm_db_info.even_word_pad = 0;

/* define the secure resultant model area as extensible */

		rdbi_area_ptr = addr (rm_db_info.static_area);
		area_size = sys_info$max_seg_size - fixed (rel (rdbi_area_ptr));

		call
		     mu_define_area (rdbi_area_ptr, area_size, "MRDS.rdbi",
		     "1"b /* extensible */, "0"b /* freeing */, "0"b,
		     "0"b /* no zeroing */, error_code);

	     end;



	declare area_size		 fixed bin (18);	/* size of area to be defined, initially */
	declare rdbi_area_ptr	 ptr;		/* points to area to be defined */


     end;
%page;
init_temp_rel_array:
     procedure ();

/*
   get space for the temp rel rel_array in the
   rm_db_info area, and fill in the initial values.
   There is one more slot than max so that a temp rel can be self-defined.
   This slot is not usable by the user.
*/

	rm_num_rels_init = mrds_data_$max_temp_rels + 1;

	allocate rm_rel_array set (rmra_ptr) in (rm_db_info.static_area);

	rm_db_info.tra_ptr = rmra_ptr;


	do i = 1 by 1 to rm_num_rels_init;
	     call fill_rel_array_entry ((BLANK), (BLANK));
	end;




     end;
%page;
init_rel_array:
     procedure ();

/* get space for the normal rel array over the submodel or model,
   in the rm_db_info area, and fill in the initial values */

	rm_num_rels_init = number_of_relations;

	allocate rm_rel_array set (rmra_ptr) in (rm_db_info.static_area);

	rm_db_info.ra_ptr = rmra_ptr;

	rm_rel_array.num_rels = rm_num_rels_init;

	do i = 1 by 1 to rm_num_rels_init while (error_code = 0);

	     if ^dsm_sw then do;			/* from model */

		     if i = 1 then
			fi_ptr = pointer (dbm_ptr, dbm_ptr -> db_model.file_ptr);
		     else fi_ptr = pointer (dbm_ptr, fi_ptr -> file_info.fwd_ptr);

		     model_name, submodel_name = fi_ptr -> file_info.file_name;
		end;

	     else do;				/* from submodel */
		     call
			mrds_dsm_read_relation ((mrds_dsm_relation_names.relation (i)),
			area_ptr, relation_block_ptr, submodel_iocb_ptr, error_code);
		     if error_code ^= 0 then do;
			     call
				sub_err_ (error_code, caller_name, continue, info_ptr,
				return_value, "^/^a^a^a",
				"Unable to get the model name of submodel file """,
				mrds_dsm_relation_names.relation (i), """.");
			     model_name, submodel_name = BLANK;
			end;
		     else do;
			     model_name = relation_block.dm_rel_name;
			     submodel_name = relation_block.dsm_rel_name;
			end;
		end;

	     call fill_rel_array_entry (model_name, submodel_name);
	end;


     end;
%page;
fill_rel_array_entry:
     procedure (name_in_model, name_in_submodel);

/* initialize a relation array element */

	rm_rel_array.name (i).submodel = name_in_submodel;
	rm_rel_array.name (i).mark = "!";		/* name separator for searching */
	rm_rel_array.rel_data (i).model_name = rtrim (name_in_model);
	rm_rel_array.rel_data (i).ri_ptr = null ();

	declare name_in_model	 char (32);	/* name stored in db */
	declare name_in_submodel	 char (32);	/* alias given in submodel */

     end;
%page;
clean_up:
     procedure ();

/* get rid of temp parameter area used for submodels */


	if area_ptr ^= null () then do;

		call release_temp_segment_ (caller_name, area_ptr, code);
		if code ^= 0 then
		     call sub_err_ (code, caller_name, continue, info_ptr, return_value,
			"^/^a",
			"Unable to release the temp segment used for submodel parameter area."
			);
		area_ptr = null ();
	     end;

	if error_code ^= 0 | clean_up_condition
	then rdbi_ptr = null ();			/* the temp seg will be deleted by the mrds_dsl_init_res cleanup handler */

     end;
%page;
	dcl     db_index		 fixed bin (35);	/* output parameter -- data base index */
	dcl     insecure_db_ptr	 ptr;		/* parameter -- points to db model or submodel */
	declare insecure_dbcb_ptr	 ptr;		/* pointer to non-secure segment in resultant model */
	dcl     dsm_sw		 bit (1) unal;	/* parameter -- ON => submodel */
	dcl     submodel_iocb_ptr	 ext ptr init (null); /* Also used by mrds_dsl_init_res,
						   mus_get_relation_names, and
						   mus_get_attribute_names. */
	declare cleanup		 condition;	/* signaled during release */
	declare clean_up_condition	 bit (1);		/* on => cleanup signaled */
	dcl     insecure_rdbi_ptr	 ptr;		/* parameter -- points to res. model db info */
	dcl     error_code		 fixed bin (35);
	dcl     db_path		 char (168);	/* abs. path of data base */
	dcl     dsm_path		 char (168);	/* path name of submodel */
	dcl     i			 fixed bin;	/* index value */


	dcl     (addr, fixed, empty, null, pointer, rel, rtrim, substr) builtin;

	declare code		 fixed bin (35);	/* unused */
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* gets parameter space */
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* cleans up area */
	declare parameter_area
				 area (sys_info$max_seg_size - 24 /* for area header */) based;
						/* space for parameters */
	declare OFF		 bit (1) internal static options (constant) init ("0"b);
						/* false value */
	declare ON		 bit (1) internal static options (constant) init ("1"b);
						/* true value */
	declare BLANK		 char (1) internal static options (constant) init (" ");
						/* empty space */
	declare caller_name		 char (20) init ("mu_sec_init_res"); /* routine reporting error */
	declare continue		 char (1) init ("c"); /* no halt after printing error message */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare area_ptr		 ptr;		/* space for working structures */
	declare sub_err_		 entry options (variable); /* error reporter */
	declare number_of_relations	 fixed bin;	/* submodel, or model count */
	declare model_name		 char (32);	/* name of rel in db */
	declare submodel_name	 char (32);	/* name of rel in submodel */
	declare sub_error_		 condition;	/* signaled when sub_err_ called */
	declare mu_define_area
				 entry (ptr, fixed bin (18), char (11), bit (1) aligned,
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
						/* sets up call to define_area_ */
	declare submodel_version	 fixed bin;	/* version of submodel used */

	dcl     (
	        mrds_data_$max_temp_rels,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);
	dcl     mrds_data_$saved_res_version ext char (8);
%page;
%include mrds_dbcb;
%page;
%include mdbm_db_model;
%page;
%include mdbm_rm_db_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mrds_dsm_entry_dcls;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_debug_names;
%page;
%include mrds_authorization;
     end mu_sec_init_res;
