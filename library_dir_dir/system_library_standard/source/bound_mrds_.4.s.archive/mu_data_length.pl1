/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:
   originally written by jim gray - - April 1979
   Modified by Rickie E. Brinegar on December 28, 1979 to make code a non static
   variable as opposed to the declaration of int static options
   (constant) it was originally declared as.
   Modified by Rickie E. Brinegar on January 9, 1980 to change the declaration of
   return_value from in static options (constant) to automatic.
   Modified by Jim Gray - - 80-9-18, to add the $get_data_pad_length entry, so that mu_build_tuple
   count have a common data primitive routine to get the amount of padding for aligned
   data types from.
*/


mu_data_length: get_data_bit_length: procedure (input_descriptor) returns (fixed bin (35));

/* DESCRIPTION:
   given a 36-bit multics pl1 argument descriptor
   this routine determines the number of bits of storage
   that the data type, alignment, and precision or size
   requires when residing in memory, not counting words
   skipped to obtain even word boundaries.
   the descriptor is assumed to be valid, with correct values for
   scale, precision, size, etc. for that data type, since this is to
   be an efficient run-time routine having had error checks made elsewhere.
   also, the data is assumed to be scalar, i.e. that there are
   no array bounds, as this will be expanded elsewhere.
   decimal 4-bit non-byte aligned are treated as byte aligned data.
   The entry $get_data_pad_length returns instead of the storage bit length,
   the amount of padding that aligned data types needed.
*/

/* PARAMETERS:
   input_descriptor - - (input) bit(36) multics pl1 argument descriptor,
   see subsystem writers guide for format.

   bit_length - - (output) returned storage space needed in bits,
   declared fixed bin(35).

   pad_length - - (output) fixed bin(35), for the $get_data_pad_length only, this is the number
   of bits required to pad aligned data out to it's full size.
   it will be 0 for unaligned data types ;

   sub_error_ - - (output) condition, signaled upon occurence of error
*/

/* get local version of the descriptor */

	descriptor = input_descriptor;

	call common ();

	return (bit_length);






/* entry to return the amount of padding space used */

get_data_pad_length: entry (entry_descriptor) returns (fixed bin (35));

	descriptor = entry_descriptor;

	pad_length = 0;				/* for unaligned types */

	call common ();

	return (pad_length);

common: procedure ();

/* CASE STRUCTURE BASED ON THE DATA TYPE */

	goto case (type);

/* UNUSED */
case (0):
	call unimplemented_data_type ();
	goto end_case;

/* REAL FIXED BINARY SHORT */
case (1):
	bit_length = precision + SIGN;
	if packed then ;
	else do;
		pad_length = ONE_WORD - bit_length;
		bit_length = ONE_WORD;
	     end;
	goto end_case;

/* READ FIXED BINARY LONG */
case (2):
	bit_length = precision + SIGN;
	if packed then ;
	else do;
		pad_length = TWO_WORD - bit_length;
		bit_length = TWO_WORD;
	     end;
	goto end_case;

/* REAL FLOATING BINARY SHORT */
case (3):
	bit_length = precision + ONE_BYTE;
	if packed then ;
	else do;
		pad_length = ONE_WORD - bit_length;
		bit_length = ONE_WORD;
	     end;
	goto end_case;

/*  REAL FLOATING BINARY LONG */
case (4):
	bit_length = precision + ONE_BYTE;
	if packed then ;
	else do;
		pad_length = TWO_WORD - bit_length;
		bit_length = TWO_WORD;
	     end;
	goto end_case;

/* COMPLEX FIXED BINARY SHORT */
case (5):
	bit_length = DOUBLE * (precision + SIGN);
	if packed then ;
	else do;
		pad_length = TWO_WORD - bit_length;
		bit_length = TWO_WORD;
	     end;
	goto end_case;

/* COMPLEX FIXED BINARY LONG */
case (6):
	bit_length = DOUBLE * (precision + SIGN);
	if packed then ;
	else do;
		pad_length = FOUR_WORD - bit_length;
		bit_length = FOUR_WORD;
	     end;
	goto end_case;

/* COMPLEX FLOATING BINARY SHORT */
case (7):
	bit_length = DOUBLE * (precision + ONE_BYTE);
	if packed then ;
	else do;
		pad_length = TWO_WORD - bit_length;
		bit_length = TWO_WORD;
	     end;
	goto end_case;

/* COMPLEX FLOATING BINARY LONG */
case (8):
	bit_length = DOUBLE * (precision + ONE_BYTE);
	if packed then ;
	else do;
		pad_length = FOUR_WORD - bit_length;
		bit_length = FOUR_WORD;
	     end;
	goto end_case;

/* REAL FIXED DECIMAL */
case (9):
	bit_length = ONE_BYTE * (precision + SIGN);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FLOATING DECIMAL */
case (10):
	bit_length = ONE_BYTE * (precision + SIGN_AND_EXPONENT);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* COMPLEX FIXED DECIMAL */
case (11):
	bit_length = DOUBLE * ONE_BYTE * (precision + SIGN);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* COMPLEX FLOATING DECIMAL */
case (12):
	bit_length = DOUBLE * ONE_BYTE * (precision + SIGN_AND_EXPONENT);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* POINTER */
case (13):
	if packed then
	     bit_length = ONE_WORD;
	else bit_length = TWO_WORD;
	goto end_case;

/* OFFSET */
case (14):
	if packed then
	     call invalid_alignment ();
	else bit_length = ONE_WORD;
	goto end_case;

/* LABEL */
case (15):
	if packed then
	     call invalid_alignment ();
	else bit_length = FOUR_WORD;
	goto end_case;

/* ENTRY */
case (16):
	if packed then
	     call invalid_alignment ();
	else bit_length = FOUR_WORD;
	goto end_case;

/* NOTE: this length is correct for structures declared
   without arrays only. (i.e. only scalar elements) */

/* STRUCTURE */
case (17):
	bit_length = ONE_WORD * size;
	goto end_case;

/* AREA */
case (18):
	bit_length = ONE_WORD * size;
	goto end_case;

/* BIT STRING */
case (19):
	bit_length = size;
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* VARYING BIT STRING */
case (20):
	bit_length = size + ONE_WORD;
	if packed then
	     call invalid_alignment ();
	else call pad_to_word_boundary ();
	goto end_case;

/* CHARACTER STRING */
case (21):
	bit_length = ONE_BYTE * size;
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* VARYING CHARACTER STRING */
case (22):
	bit_length = (ONE_BYTE * size) + ONE_WORD;
	if packed then
	     call invalid_alignment ();
	else call pad_to_word_boundary ();
	goto end_case;

/* FILE */
case (23):
	bit_length = FOUR_WORD;
	goto end_case;

/* UNUSED */
case (24):
case (25):
case (26):
case (27):
case (28):
	call unimplemented_data_type ();
	goto end_case;

/* REAL FIXED DECIMAL LEADING OVERPUNCHED SIGN 9-BIT */
case (29):
	bit_length = ONE_BYTE * precision;
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FIXED DECIMAL TRAILING OVERPUNCHED SIGN 9-BIT */
case (30):
	bit_length = ONE_BYTE * precision;
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* UNUSED */
case (31):
case (32):
	call unimplemented_data_type ();
	goto end_case;

/* REAL FIXED BINARY SHORT UNSIGNED */
case (33):
	bit_length = precision;
	if packed then ;
	else do;
		pad_length = ONE_WORD - bit_length;
		bit_length = ONE_WORD;
	     end;
	goto end_case;

/* REAL FIXED BINARY LONG UNSIGNED */
case (34):
	bit_length = precision;
	if packed then ;
	else do;
		pad_length = TWO_WORD - bit_length;
		bit_length = TWO_WORD;
	     end;
	goto end_case;

/* REAL FIXED DECIMAL UNSIGNED 9-BIT */
case (35):
	bit_length = ONE_BYTE * precision;
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FIXED DECIMAL TRAILING SIGN 9-BIT */
case (36):
	bit_length = ONE_BYTE * (precision + SIGN);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* UNUSED */
case (37):
	call unimplemented_data_type ();
	goto end_case;

/* NOTE: non-byte-aligned decimal 4-bit requires knowledge of
   physical 1/2 byte alignment to determine actual bit length,
   thus it is unsupported by pl1, and MRDS, and the returned
   bit length will be the same as if it were the corresponding
   byte aligned decimal 4-bit data type. */

/* REAL FIXED DECIMAL UNSIGNED 4-BIT */
case (38):
	bit_length = ONE_BYTE * floor ((precision + PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FIXED DECIMAL TRAILING SIGN 4-BIT */
case (39):
	bit_length = ONE_BYTE * floor ((precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* UNUSED */
case (40):
	call unimplemented_data_type ();
	goto end_case;

/* REAL FIXED DECIMAL LEADING SIGN 4-BIT */
case (41):
	bit_length = ONE_BYTE * floor ((precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FLOATING DECIMAL 4-BIT */
case (42):
	bit_length = ONE_BYTE * floor ((precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FIXED DECIMAL LEADING SIGN 4-BIT BYTE-ALIGNED */
case (43):
	bit_length = ONE_BYTE * floor ((precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* REAL FLOATING DECIMAL 4-BIT BYTE-ALIGNED */
case (44):
	bit_length = ONE_BYTE * floor ((precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* COMPLEX FIXED DECIMAL LEADING SIGN 4-BIT BYTE-ALIGNED */
case (45):
	bit_length = DOUBLE * ONE_BYTE * floor ((precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* COMPLEX FLOATING DECIMAL 4-BIT BYTE-ALIGNED */
case (46):
	bit_length = DOUBLE * ONE_BYTE * floor ((precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
	if packed then ;
	else call pad_to_word_boundary ();
	goto end_case;

/* UNUSED */
case (47):
case (48):
case (49):
case (50):
case (51):
case (52):
case (53):
case (54):
case (55):
case (56):
case (57):
case (58):
case (59):
case (60):
case (61):
case (62):
case (63):
	call unimplemented_data_type ();
	goto end_case;

/* END OF DESCRIPTOR TYPE CASE STATEMENT */
end_case:

     end;

pad_to_word_boundary: procedure ();

/* fill out the bit length to reflect a word boundary aligned,
   integral number of words storage space */

	if mod (bit_length, ONE_WORD) = 0 then ;
	else do;
		pad_length = (ONE_WORD - mod (bit_length, ONE_WORD));
		bit_length = bit_length + pad_length;
	     end;

     end;

unimplemented_data_type: procedure ();

/* report that an unused data type was given in the descriptor */

	code = mrds_error_$invalid_dm_descriptor;

	call sub_err_ (code, caller_name, continue, info_ptr, return_value,
	     "^/An invalid data type = ^d, ""^a"", was given in the descriptor.",
	     type, mu_display_descriptor (addr (descriptor)));

	bit_length, pad_length = 0;

     end;

invalid_alignment: procedure ();

/* report incorrect use of the packed feature */

	code = mrds_error_$invalid_dm_descriptor;

	call sub_err_ (code, caller_name, continue, info_ptr, return_value,
	     "^/The unaligned (packed) attribute can not be used with the data type = ""^a"".",
	     mu_display_descriptor (addr (descriptor)));

	bit_length, pad_length = 0;

     end;

	declare SIGN_AND_PAD	 fixed bin init (2) int static options (constant); /* sign digit + 1/2 byte padding */
	declare SIGN_EXPONENT_AND_PAD	 fixed bin init (4) int static options (constant); /* sign digit, exp byte, + 1/2 byte pad */
	declare PAD		 fixed bin init (1) int static options (constant); /* 1/2 byte padding */
	declare PER_BYTE_FACTOR	 fixed bin init (2) int static options (constant); /* number of digits per byte */
	declare SIGN_AND_EXPONENT	 fixed bin init (2) int static options (constant); /* float decimal exp and sign char space */
	declare DOUBLE		 fixed bin init (2) int static options (constant); /* multiplier for complex numbers */
	declare SIGN		 fixed bin init (1) int static options (constant); /* space for sign */
	declare input_descriptor	 bit (36);	/* users descriptor parameter */
	declare code		 fixed bin (35) init (0); /* error encoding */
	declare caller_name		 char (14) init ("mu_data_length") int static options (constant); /* name of calling routine */
	declare continue		 char (1) init ("c") int static options (constant); /* after printing, keep going */
	declare info_ptr		 ptr init (null ()) int static options (constant); /* unused */
	declare return_value	 fixed bin (35) init (0);
	declare bit_length		 fixed bin (35);	/* returned storage length */
	declare sub_err_		 entry options (variable); /* error reporting routine */
	declare (mod, addr, floor)	 builtin;
	declare descriptor		 bit (36);	/* basic multics pl1 descriptor */
	declare ONE_WORD		 fixed bin init (36) int static options (constant); /* bit length of a word */
	declare TWO_WORD		 fixed bin init (72) int static options (constant); /* bit length of two words */
	declare FOUR_WORD		 fixed bin init (144) int static options (constant); /* bit length of four words */
	declare ONE_BYTE		 fixed bin init (9) int static options (constant); /* bit length of a byte (character) */
	declare 1 descriptor_precision unal based (addr (descriptor)), /* overlay for arith precision */
		2 unused		 bit (24) unal,	/* skip over first part */
		2 precision	 unsigned fixed bin (12) unal; /* arith precision */
	declare 1 descriptor_packed_flag unal based (addr (descriptor)), /* overlay for packed */
		2 unused_1	 bit (7) unal,
		2 packed		 bit (1) unal,	/* ON => unaligned */
		2 unused_2	 bit (28) unal;
	declare 1 descriptor_type	 unal based (addr (descriptor)), /* overlay for descriptor type */
		2 unused_1	 bit (1) unal,
		2 type		 unsigned fixed bin (6) unal, /* descriptor type code */
		2 unused_2	 bit (29) unal;
	declare mrds_error_$invalid_dm_descriptor fixed bin (35) ext; /* bad data type */
	declare mu_display_descriptor	 entry (ptr) returns (char (120) varying); /* for trouble reporting */
	declare 1 descriptor_size	 unal based (addr (descriptor)), /* string/area/structure size overlay */
		2 unused		 bit (12) unal,
		2 size		 unsigned fixed bin (24) unal; /* size field */
	declare pad_length		 fixed bin (35);	/* length to pad aligned data types */
	declare entry_descriptor	 bit (36);	/* descriptor paramter for pad length entry */
     end;
