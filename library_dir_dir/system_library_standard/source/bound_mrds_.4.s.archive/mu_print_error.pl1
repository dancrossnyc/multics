/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-08,Dupuis), install(88-08-01,MR12.2-1073):
     Written.
                                                   END HISTORY COMMENTS */


mu_print_error:
    proc (a_se_info_ptr);

/*   DESCRIPTION

   The purpose of this procedure is to try and print some form of intelligent
   error message from the parser when syntax errors are discovered in the
   parsing of a selection expression.

   HISTORY:

   84-11-05 Originally written by John Hergert (FMC).

   86-02-25 John Hergert: modified for new parser.

   INPUT CONDITIONS:

   se_info_ptr points to the se_info structure which has all the info to print


   OUTPUT DEFINITIONS:

   This routine calls ioa_ with a formatted selection expression and
   the error code generated in the parse after signalling mrds_se_error_.

*/

        se_info_ptr = a_se_info_ptr;

        if se_info.se_length = 0 then return;

        se_len = se_info.se_length;
        se_ptr = se_info.se_ptr;
        call init_sex;				/* make local copy of sex */

        on cleanup free sex in (work_area);

        if se_info.token_start > se_info.se_length
        then
	   raw_token_position, token_position = se_info.se_length;
        else raw_token_position, token_position = se_info.token_start;

        token_ptr = addcharno(se_info.se_ptr,se_info.token_start-1);

        call format_sex;

/* now put in the pointer to the offending token */

        current_NL = 1;
        done = "0"b;
        do while (^done);
	  next_NL = index (substr (sex || NL, current_NL), NL);
	  if token_position >= next_NL then do;
	      token_position = token_position - next_NL + 1;
	      current_NL = current_NL + next_NL;
	  end;
	  else do;
	      if current_NL + next_NL < length (sex)	/* we are not in the last line */
	      then sex =
		     substr (sex, 1, current_NL + next_NL - 1)
						/* first portion of se */
		     || copy (" ", token_position - 1) || "^"
		     || NL			/* the pointer */
		     || substr (sex, current_NL + next_NL);
						/* the second portion of the se */

	      else sex = sex || NL || copy (" ", token_position - 1) || "^";
	      done = "1"b;
	  end;
        end;

        call convert_status_code_ (se_info.error_code, short_message,
	  long_message);
						/* get english error message */

        msei.header.version = error_info_version;
        msei.header.action_flags.cant_restart = "0"b;
        msei.header.action_flags.default_restart = "1"b;
        msei.header.action_flags.quiet_restart = "0"b;
        msei.header.action_flags.support_signal = "1"b;
        msei.header.action_flags.pad = "0"b;
        msei.header.info_string = "";			/* used by default_error_handler_ */
        msei.header.status_code = se_info.error_code;
        msei.error_type = se_info.error_type;
        msei.error_msg = se_info.error_msg;
        msei.token = token;
        msei.raw_select_expr.se_ptr = se_info.se_ptr;
        msei.raw_select_expr.se_len = se_info.se_length;
        msei.raw_select_expr.token_position = raw_token_position;
        msei.formatted_select_expr.se_ptr = addr (sex);
        msei.formatted_select_expr.se_len = length (sex);
        msei.formatted_select_expr.token_position = token_position;
        msei.header.length = size (msei);

        call signal_ ("mrds_se_error_", null, addr (msei), null);
						/* see if anyone wants to handle it. */

/* if no one handles the signal the default_error_handler_ will just
   put the string "default_error_handler_" into info_string. */

        if msei.header.info_string = "default_error_handler_"
						/* user didnt handle it */
        then
	   call ioa_$ioa_switch (iox_$error_output,
	       "^2/Error: MRDS ^a error.^/^a^/^[^s^;^a^/^]^a^/",
	       rtrim (se_info.error_type), rtrim (long_message),
	       se_info.error_msg = " ", rtrim (se_info.error_msg),
	       rtrim (sex));

        free sex in (work_area);

        return;

print_se:
    entry (a_se_ptr, a_se_len);

/* entry to just print out formatted selection expression */

        if se_len ^= 0 then do;
	  se_ptr = a_se_ptr;
	  se_len = a_se_len;
	  call init_sex;				/* make a local copy of sex */
	  on cleanup free sex in (work_area);

	  call format_sex;
	  call ioa_ ("^/^a^/", rtrim (sex));
	  free sex in (work_area);
        end;

        return;

format_sex:
    proc;
						/*
						   procedure to format the selection expression by putting newlines in before
						   keywords
						*/
						/* put NL's in to sex before each keyword */

        do j = 1 to hbound (keyword.name, 1);		/* for each keyword */
	  if keyword.major_keyword (j) then do;
	      i = verify (sex, WHITE_SPACE) + 1;	/* start after the first keyword */
	      done = "0"b;
	      do while (^done);			/* until end of sex is reached */
		if i < length (sex) then do;
		    x = index (substr (sex, i), rtrim (keyword.name (j)));
		    if x ^= 0 then do;
		        sex = substr (sex, 1, x + i - 2) || NL
			  || substr (sex, x + i - 1);
		        i = x + i + 4;		/* skip past the NL and the token */
		    end;
		    else done = "1"b;
		end;
		else done = "1"b;
	      end;
	  end;
        end;



/* break each line into no more than 79 chars */

        current_NL = 1;
        done = "0"b;

        do while (^done);
	  if current_NL < length (sex) then do;
	      next_NL = index (substr (sex || NL, current_NL), NL);
	      if next_NL > 79 then do;
		i = index (reverse (substr (sex, 1, current_NL + 79)), SP);
		if i < 80 then do;
		    sex = substr (sex, 1, current_NL + 80 - i) || NL
		        || substr (sex, current_NL + 81 - i);
		    current_NL = current_NL + 82 - i;
		end;
		else done = "1"b;
	      end;
	      else if next_NL = 0
		 then done = "1"b;
		 else current_NL = current_NL + next_NL + 1;
	  end;
	  else done = "1"b;
        end;

    end format_sex;

init_sex:
    proc;

/* Since we are going to be manipulating the selection expression we need
   to make a local copy. Since we have no idea how big it is going to get
   we need to put it somewhere out of the way
*/

        work_area_ptr = get_system_free_area_ ();
        allocate sex in (work_area) set (sex_ptr);

        sex = arg_sex;

    end;

%include mrds_se_info;
%page;
%include mrds_dsl_keywords;
%page;
%include mrds_se_error_info;
%page;
%include condition_info_header;

/* ARGS */
dcl     a_se_info_ptr	 ptr parameter;
dcl     a_se_ptr		 ptr parameter;
dcl     a_se_len		 fixed bin (17) parameter;


/* LOCALS */

dcl     se_info_ptr		 ptr;
dcl     work_area_ptr	 ptr;
dcl     sex_ptr		 ptr;

dcl     1 msei		 aligned like mrds_se_error_info;
						/* the working copy */

dcl     short_message	 char (8) aligned;
dcl     long_message	 char (100) aligned;
dcl     token		 char (se_info.token_length) based (token_ptr);
dcl     token_ptr              ptr;

dcl     (raw_token_position, token_position, current_NL, next_NL, i, j, x)
			 fixed bin;
dcl     done		 bit;
dcl     WHITE_SPACE		 char (6) based (addr (WHITE_SPACE_data));
dcl     WHITE_SPACE_data	 (6) bit (9) unaligned internal static
			 options (constant)
			 init ("011"b3, "012"b3, "013"b3, "014"b3,
			 "015"b3, "040"b3);		/* HT LF VT FF CR SP */
dcl     NL		 char (1) based (addr(NL_data));
dcl NL_data bit(9) internal static options (constant) init("012"b3);
dcl     SP		 char (1) internal static options (constant)
			 init (" ");

dcl     se_ptr		 ptr;
dcl     se_len		 fixed bin;
dcl     arg_sex		 char (se_len) based (se_ptr);
dcl     sex		 char (se_len + 256) var based (sex_ptr);

dcl     mrds_data_$max_td_len	 fixed bin (35) ext;
dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
dcl     iox_$error_output	 ptr ext static;

dcl     cleanup		 condition;

dcl     (addcharno, addr, char, copy, fixed, hbound, index, length, ltrim, null, rel, reverse, rtrim,
        size, substr, verify)		 builtin;

dcl     work_area		 area based (work_area_ptr);

dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned,
			 char (100) aligned);
dcl     get_system_free_area_	 entry () returns (ptr);
dcl     ioa_		 entry () options (variable);
dcl     ioa_$ioa_switch	 entry () options (variable);
dcl     signal_		 entry (char (*), ptr, ptr, ptr);

    end mu_print_error;

