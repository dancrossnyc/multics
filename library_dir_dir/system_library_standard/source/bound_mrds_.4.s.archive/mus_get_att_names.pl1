/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-08-12,Blair), approve(86-08-12,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Check for when the submodel name doesn't match any name in the model so
     that we can tell the user to correct and recreate his submodel.  This
     situation can arise as the result of restructuring.
                                                   END HISTORY COMMENTS */


mus_get_att_names:
     proc (dbm_ptr, dsm_sw, rns_ptr, rel_index, wa_ptr, ans_ptr, error_code);

/* DESCRIPTION:

   BEGIN_DESCRIPTION
   For  a given relation in a submodel or model, return an array of attributes
   defined  for  that relation, giving the number of attributes, number of key
   attributes,  attribute  model  name,  it's  submodel  name,  attribute info
   pointer, and domain info pointer.



   PARAMETERS:

   dbm_ptr - - (input) pointer to the db_model segment in the database model

   dsm_sw  -  -  (input)  bit  (1), ON => this is a submodel relation, else =>
   model relation

   rns_ptr - - (input) pointer to the rel_names array structure containing the
   relation model and submodel name, and it's rel info pointer

   rel_index  - - (input) fixed bin, index into the rel_names array giving the
   desired relation for which to return attribute information

   wa_ptr  -  -  (input) pointer to an area in which to allocate the attribute
   information array to be returned

   ans_ptr  -  -  (output) pointer to the att_name array allocated in the area
   pointed  to by wa_ptr, containing the desired attribute information for the
   relation specified by the rel_name array and index

   error_code  -  -  (output) fixed bin (35), error type encoding, 0 unless an
   error occured

   sub_error_  -  - (output) condition, signaled upon occurence of an error to
   provide more info
   END_DESCRIPTION


   HISTORY:

   78-08-01 Oris D. Friesen: Originally written.

   79-06-01 Jim Gray : Modified to
   1) add number of key and varying attributes to info returned
   2) add sub_err_ reporting of errors
   3) change from freeing to area deleting in higher routine for cleanup
   4) document the program interface and logic

   80-08-01  Spratt:  Changed  to  understand new submodel system; an external
   submodel  iocb ptr was added for reference through mrds_dsm modules, set by
   higher  program;  dsmd_$foo  calls  changed  to  mrds_dsm_foo  calls;  uses
   relation_block structure instead of dsm_relation_str; the r_perm and u_perm
   switches    are   now   set   in   the   attr_names.item   structure;   the
   mrds_dsm_rel_block and mrds_dsm_entry_dcls include files were added.

   80-09-23  Davids: modified so that att_names.item.r_perm and u_perm are set
   to "1"b when opening is done via the model.

   81-01-14  Davids:  modified  to  use the new relation_block structure which
   individually names the attribute access bits.

   81-01-23  Jim  Gray  :  added  last_model_attr_char_var  bit  to  att_names
   interface  structure,  so that partial view submodels can properly find the
   end of tuple.

   81-05-29   Jim   Gray   :   modified   to  use  resultant  structures,  and
   mdbm_rel_att_array include file without foreign key info.

   81-07-01  Rickie  E.  Brinegar: modified to set last_model_attr_char_var to
   "1"b if the current attribute is character varying and to set it to "0"b if
   the  current  attribute  is  bit varying.  This guarantees that if the last
   varying attribute in the definition order character type (implying the last
   attribute    in    the    tuple    will    be   character   varying)   then
   att_names.last_model_attr_char_var  is  set.  This is a part of the fix for
   TR 9755.

   82-06-03 Mike Kubicar : added fix for TR phx12282.  The problem was that
   last_mode_attr_char_var could be set incorrectly if a submodel instead of
   a model were opened.

*/

/* initialize */

	error_code = 0;
	ans_ptr = null;

/* get the rel_info pointer, and number of attributes from the rel_name array */

	ri_ptr = rel_names.item.ri_ptr (rel_index);
	num_atts_init = rel_names.item.natts (rel_index);

/* initialize the attribute array to be returned */

	allocate att_names in (work_area);
	unspec (att_names) = "0"b;
	att_names.num = num_atts_init;

/* fill in the attribute array information */

	if dsm_sw then
	     call submodel_relation ();
	else call model_relation ();

	return;

submodel_relation:
     procedure ();

/* call the submodel(opened in a higher routine) to get the
   attributes involved with this submodel definition of this relation */

	num_dims = 0;
	call mrds_dsm_read_relation (rel_names.item.sm (rel_index), wa_ptr, relation_block_ptr, submodel_iocb_ptr, error_code);
	if error_code ^= 0 then
	     call
		sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
		"Unable to get the attribute information for submodel relation ""^a"".", rel_names.item (rel_index).sm);
	else if relation_block.version ^= RELATION_BLOCK_VERSION_1 then do;
		error_code = error_table_$unimplemented_version;
		call
		     sub_err_ (error_table_$unimplemented_version, caller_name, continue, info_ptr, return_value,
		     "Expecting version ^d of the relation_block structure, got version ^d.", RELATION_BLOCK_VERSION_1,
		     relation_block.version);
	     end;
	else do;

/* go through all attributes defined for this submodel relation */

		j = 0;				/* no key attrs yet */
		k = 0;
		do i = 1 to relation_block_ptr -> relation_block.no_rb_attributes;

/* search the model attribute list for this relation,
   to find the current submodel attribute, in order to get
   the correct attr_info for this attribute */

		     do ai_ptr = ptr (ri_ptr, rel_info.attr_ptr) repeat ptr (ri_ptr, attr_info.fwd_thread)
			while (attr_info.name ^= relation_block.attribute_info.dm_attr_name (i) &  attr_info.fwd_thread ^= NULL_OFFSET);
		     end;

/* fill in the att_name array slot for this submodel attribute */

		     if (attr_info.fwd_thread = NULL_OFFSET & attr_info.name ^= relation_block.attribute_info.dm_attr_name (i))
		     then do;
			error_code = mrds_error_$inconsistent_submodel;
			call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, 
			"Attribute ""^a"" in the submodel does not correspond to an attribute in the model. Please correct and recreate the submodel.", rtrim (relation_block.attribute_info.dm_attr_name (i)));
			end;
		     att_names.item.sm (i) = relation_block.attribute_info.dsm_attr_name (i);
		     att_names.item.dm (i) = attr_info.name;
		     att_names.item.ai_ptr (i) = ai_ptr;
		     att_names.item.di_ptr (i), di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
		     att_names.item.rai_ptr (i) = null;
		     att_names.item.r_perm (i) = relation_block.attribute_info.attr_access.read (i);
		     att_names.item.u_perm (i) = relation_block.attribute_info.attr_access.modify (i);

/* count up key and varying attributes */

		     if attr_info.key_attr
		     then j = j + 1;

		     if domain_info.db_desc_is_ptr then
			desc_ptr = addr (domain_info.db_desc) -> pointer_format;
		     else desc_ptr = addr (domain_info.db_desc);

		     if descriptor.type = 20 | descriptor.type = 22
		     then k = k + 1;		/* this is a varying bit or char string data type */
		end;

		att_names.num_key_attrs = j;
		att_names.num_varying_attrs = k;
	     end;

/* find out if the last attr in the model is character or not */

	i = 1;
	do ai_ptr = ptr (ri_ptr, rel_info.attr_ptr) repeat ptr (ri_ptr, attr_info.fwd_thread) while (i <= rel_info.num_attr);
	     i = i + 1;
	end;

	     di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);

	     if domain_info.db_desc_is_ptr then
		desc_ptr = addr (domain_info.db_desc) -> pointer_format;
	     else desc_ptr = addr (domain_info.db_desc);

	     if descriptor.type = 22 then
		att_names.last_model_attr_char_var = "1"b;
	     else if descriptor.type = 20 then
		att_names.last_model_attr_char_var = "0"b;

     end;

model_relation:
     procedure ();

/* go through the model's list of attributes for this relation,
   and fill in the attribute array to be returned */

	i = 1;
	do ai_ptr = ptr (ri_ptr, rel_info.attr_ptr) repeat ptr (ri_ptr, attr_info.fwd_thread) while (i <= att_names.num);

	     att_names.item.sm (i) = attr_info.name;
	     att_names.item.dm (i) = attr_info.name;
	     att_names.item.ai_ptr (i) = ai_ptr;
	     att_names.item.di_ptr (i), di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
	     att_names.item.rai_ptr (i) = null;
	     att_names.item.r_perm = "1"b;		/* opening via the model gives complete access */
	     att_names.item.u_perm = "1"b;


	     if domain_info.db_desc_is_ptr then
		desc_ptr = addr (domain_info.db_desc) -> pointer_format;
	     else desc_ptr = addr (domain_info.db_desc);

	     if descriptor.type = 22 then
		att_names.last_model_attr_char_var = "1"b;
	     else if descriptor.type = 20 then
		att_names.last_model_attr_char_var = "0"b;

	     i = i + 1;

	end;

/* set the number of key and varying attributes */

	att_names.num_key_attrs = rel_info.num_key_attrs;
	att_names.num_varying_attrs = rel_info.nvar_atts;

     end;

	dcl     wa_ptr		 ptr;		/* points to working area */
	dcl     (i, j, k)		 fixed bin;	/* index variable */
	dcl     rel_index		 fixed bin;	/* index into rel_names structure */
	dcl     error_code		 fixed bin (35);

	dcl     dsm_sw		 bit (1) unal;	/* ON => data submodel was used to open the data base */

	dcl     work_area		 area based (wa_ptr);

	dcl     (ptr, addr, null, unspec) builtin;

	dcl     error_table_$unimplemented_version fixed bin (35) ext;
          dcl     mrds_error_$inconsistent_submodel fixed bin(35) ext static;

	declare caller_name		 char (20) init ("mrds_dsl_ready_file") int static options (constant);
						/* name of calling routine */
	declare continue		 char (1) init ("c") int static options (constant);
						/* no stop after printing */
          declare NULL_OFFSET            bit (18) unaligned int static options (constant) init ((18)"1"b);
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35);	/* unused */
	declare sub_err_		 entry options (variable); /* error reporting routine */
	declare submodel_iocb_ptr	 ext ptr init (null); /* Set in mrds_dsl_init_res, used by
						   mu_sec_init_res and
						   mus_get_rel_names. */
	declare pointer_format	 ptr based;	/* overlay to pick up a pointer */

%include mdbm_descriptor;

%include mdbm_db_model;

%include mdbm_file_model;

%include mdbm_rel_att_array;

%include mrds_dsm_rel_block;
%include mrds_dsm_entry_dcls;
     end mus_get_att_names;
