/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Written by Jim Gray - - Dec. 1979, to include new data  types  in
   MR7  release of PL1 and replace the old mrds_cmdb_alpha_desc with
   a more general routine.

   Modified  March  25,  1980  by  R.  Lackey  to  remove  calls  to
   mdbm_util_

   81-09-23 Davids: changed an if statement with a substr  reference
   to  an  if  statement  with  an  index  reference  to  prevent  a
   stringrange condition from occuring if the  requested  string  is
   larger than the original string.
*/


mu_display_descriptor: display_descriptor: procedure (desc_ptr) returns (char (120) varying);

/* DESCRIPTION:

   given a pointer to a multics  pl1  standard  argument  descriptor
   (see  subsystem  writers  guide  for  format and data types) this
   routine returns a character string that includes the pl1 keywords
   attributes  that  would  have  appeared  in  a  declaration  that
   produced the given descriptor,  plus  some  clarifying  comments,
   when  no  keywords  are  available to describe the data type. for
   example: if the input pointer pointed to the descriptor
   "100000110000000000000000000000010001"b  then  the  output  would
   look like "real fixed binary (17,0) unaligned" for an input of
   "100100110000000000000000000000010001"b the output would be
   "real fixed decimal (17,0) unaligned /* leading sign 4-bit byte-aligned * /"
   structures are only displayed as "structure /* 4 elements * /"
   an array example would be "character (96) varying aligned dimension(1:20,3:-3)"

   NOTE: the descriptor/array bounds informations is assumed  to  be
   in correct format with legal values, no error checking is done in
   this  routine,  since  this  is  to  be  an  efficient   run-time
   routine(cmdb should guarantee correctness).

*/

/* PARAMETERS:

   desc_ptr - - (input) pointer, points to a standard multics pl1 argument
   descriptor(bit(36) aligned), as described in the subsystem writers guide(under argument list format)
   if not scalar, the array bounds/multiplier follow the descriptor in consecutive fixed bin(35) words.

   declaration - - (output) char(120) varying, the declaration of the data type varying,
   as it would appear after a declare statement that would produce
   the given descriptor, plus clarifying comments.

*/

/* break down the descriptor into its individual parts */

	call decode_descriptor_ (desc_ptr, 0, type, unaligned, ndims, size, scale);

/* set up the return declaration according to the descriptor fields */

	if type < 1 | type > 63 then
	     declaration = "Unrecognized data type";
	else do;

/* get the basic data type declaration based on the type */

		declaration = data_type (type);

		if index (declaration, "Unused") = 1 then ; /* CHANGE 81-09-23 ********** */
		else do;

/* go add data type specific information */

			call add_specifics ();

/* now add common attribute information, first alignment */

			if ^new_format_descriptor then ; /* packing info not available in old descriptor */
			else do;

				if unaligned then
				     declaration = declaration || " unaligned";
				else declaration = declaration || " aligned";

			     end;

/* now add dimension info, if any */

			if ndims = 0 then ;
			else do;

				if ^new_format_descriptor then /* number of dimension unknown in old format */
				     declaration = declaration || " /* array, old format descriptor */";
				else call add_dimension ();

			     end;

/* add on clarifying comments */

			declaration = declaration || comment (type);

		     end;

	     end;

/* report final declaration attributes to caller */

	return (declaration);

add_specifics: procedure ();

/* add precision/scale for numbers, string size for bit/char, or
   number of elements for a structure */

/* numeric types need a precision, scale field attribute */

	if mu_data_class$number (desc_ptr) then do;	/* arithmetic data types */

		declaration = declaration || " (";
		declaration = declaration || ltrim (char (size));

		if ^mu_data_class$fixed (desc_ptr) then ; /* float types don't have scale */
		else do;
			declaration = declaration || ",";
			declaration = declaration || ltrim (char (scale));
		     end;

		declaration = declaration || ")";

	     end;

/* areas, bit, and character types need a size field */

	else if type >= 18 & type <= 22 then do;	/* area or bit or character */

		declaration = declaration || " (";
		declaration = declaration || ltrim (char (size));
		declaration = declaration || ")";

/* add the varying/nonvarying attribute for bit or character strings */

		if type = 20 | type = 22 then
		     declaration = declaration || " varying";
		else if type = 19 | type = 21 then
		     declaration = declaration || " nonvarying";

	     end;
						/* report via a comment, the number of structure elements */

	else if type = 17 then do;			/* structure */

		if ^new_format_descriptor then ;	/* no info on elements in old descriptor */
		else do;

			declaration = declaration || " /* ";
			declaration = declaration || ltrim (char (size));
			declaration = declaration || " element";
			if size = 1 then
			     declaration = declaration || " */";
			else declaration = declaration || "s */";

		     end;

	     end;

     end;

add_dimension: procedure ();

/* add the dimension attribute, with array bounds */

	declaration = declaration || " dimension (";

/* add a bound_pair "upper:lower" for each dimension */

	do dimension_number = 1 to ndims;

	     offset = (3 * dimension_number) - 2;	/* number of words from descriptor to bound */

/* pick up bounds words following descriptor */

	     declaration = declaration || ltrim (char (addrel (desc_ptr, offset) -> lower_bound));
	     declaration = declaration || ":";
	     declaration = declaration || ltrim (char (addrel (desc_ptr, offset + 1) -> upper_bound));

/* add separator or terminator */

	     if dimension_number < ndims then
		declaration = declaration || ",";
	     else declaration = declaration || ")";

	end;

     end;

	dcl     desc_ptr		 ptr;		/* pointer to Multics descriptor (input) */

	declare declaration		 char (120) varying;/* This variable used to build return declaration */
	declare type		 fixed bin;	/* descriptor type */
	declare unaligned		 bit (1) aligned;	/* indicates unaligned ("1"b) or aligned ("0"b) */
	declare ndims		 fixed bin;	/* number dimensions ; must be zero for dbm version 1 */
	declare size		 fixed bin;	/* char string size or arithmetic precision */
	declare scale		 fixed bin;	/* arithmetic scale factor */

	declare data_type		 (1:63) char (28) varying internal static options (constant) initial (
				 "real fixed binary", "real fixed binary", "real float binary", "real float binary", /* 1 - 4 */
				 "complex fixed binary", "complex fixed binary", "complex float binary", "complex float binary", /* 5 - 8 */
				 "real fixed decimal", "real float decimal", "complex fixed decimal", "complex float decimal", /* 9 - 12 */
				 "pointer", "offset", "label", "entry", /* 13 - 16 */
				 "structure", "area", "bit", "bit", /* 17 - 20 */
				 "character", "character", "file", /* 21 - 23 */
				 (5) ("Unused data type"), /* 24 - 28 */
				 (2) ("real fixed decimal"), /* 29 - 30 */
				 (2) ("Unused data type"), /* 31 - 32 */
				 (2) ("real unsigned fixed binary"), /* 33 - 34 */
				 "real unsigned fixed decimal", /* 35 */
				 "real fixed decimal", /* 36 */
				 "Unused data type",/* 37 */
				 "real unsigned fixed decimal", /* 38 */
				 "real fixed decimal", /* 39 */
				 "Unused data type",/* 40 */
				 (2) ("real fixed decimal", "real float decimal"), /* 41 - 44 */
				 "complex fixed decimal", "complex float decimal", /* 45 - 46 */
				 (17) ("Unused data type")); /* 47 - 63 */

	declare comment		 (1:63) char (40) varying internal static options (constant) initial (
				 (8) (""),	/* 1 - 8 */
				 (2) (" /* leading sign 9-bit */", " /* 9-bit */"), /* 9 - 12 */
				 (16) (""),	/* 13 - 28 */
				 " /* leading overpunched sign 9-bit */", /* 29 */
				 " /* trailing overpunched sign 9-bit */", /* 30 */
				 (4) (""),	/* 31 - 34 */
				 " /* 9-bit */",	/* 35 */
				 " /* trailing sign 9-bit */", /* 36 */
				 "", " /* 4-bit */",/* 37 - 38 */
				 " /* trailing sign 4-bit */", /* 39 */
				 "", " /* leading sign 4-bit */", " /* 4-bit */", /* 40 - 42 */
				 " /* leading sign 4-bit byte-aligned */", /* 43 */
				 " /* 4-bit byte-aligned */", /* 44 */
				 " /* leading sign 4-bit byte-aligned */", /* 45 */
				 " /* 4-bit byte-aligned */", /* 46 */
				 (17) (""));	/* 47 - 63 */

	declare (ltrim, index, addrel, char) builtin;
	declare decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
	declare new_format_descriptor	 bit (1) unal based (desc_ptr); /* version bit of descriptor is first */
	declare dimension_number	 fixed bin;	/* number of current dimension */
	declare offset		 fixed bin;	/* number of words past desc_ptr, to get array bound */
	declare (lower_bound, upper_bound) fixed bin (35) based; /* overlays for array bound info */
	declare (mu_data_class$number,
	        mu_data_class$fixed)	 entry (ptr) returns (bit (1) aligned); /* decides if data in entries class */

     end;
