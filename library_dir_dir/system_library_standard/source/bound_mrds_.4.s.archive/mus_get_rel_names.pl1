/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mus_get_rel_names: proc (dsm_sw, rmra_ptr, fa_index, wa_ptr, fm_ptr, rns_ptr, error_code);

/* DESCRIPTION:

   For  a  given  file  in  a  submodel or model, return an array of relations
   defined  for  that  file,  giving  the  number  of  relations, and for each
   relation  giving  the  number  of  attributes,  the model name and rel_info
   pointer, and the number of links it is involved in as parent and/or child.



   PARAMETERS:

   dsm_sw  -  -  (input) bit (1), ON => this is a submodel file, else => model
   file

   rmra_ptr  -  -  (input)  pointer to the resultant model file array for this
   opening  of  the  database,  which  contains file names and pointers to the
   resultant file_info structures

   fa_index  -  -  (input)  fixed  bin,  index  into the file array giving the
   desired file for which to return relation information

   wa_ptr  -  -  (input)  pointer to an area in which to allocate the relation
   information array to be returned

   fm_ptr - - (input) pointer to the database file model for this file

   rns_ptr  -  -  (output) pointer to the rel_names array structure containing
   relation  model and submodel name, and it's rel_info pointer as well as the
   attribute, parent link, and child link count

   error_code  -  -  (output) fixed bin (35), error type encoding, 0 unless an
   error occurred

   sub_error_  -  -  (output)  condition, signaled upon occurrence of error to
   provide more info



   HISTORY:

   78-08-01 Oris D. Friesen: Originally written.

   79-06-01 Jim Gray : Modified as follows:
   1) add sub_err_ reporting of errors
   2) change from freeing to area deleting in higher routine for cleanup
   3) document the program interface and logic

   80-04-01 Jim Gray : Modified to add total_view bit to relation info so that
   submodel permissions can be determined.

   80-08-01  Lindsey Spratt: Modified to use the new submodel security system.
   This  involved changing all calls to dsmd_$foo to be calls to mrds_dsm_foo,
   adding  an  external  static  submodel_iocb_ptr, setting the rel_names.item
   access  permission  bits, and using the relation_block structure instead of
   the  mrds_dsm_relation_str  structure.  Also, added the mrds_dsm_entry_dcls
   and the mrds_dsm_rel_block include files.

   80-09-23 Davids: modified so that rel_names.item.r_per (i), m_perm, s_perm,
   and d_perm are set to "1"b when opening is done via the model.

   80-11-07  Jim Gray : Modified to set the status_perm bit from dsm_rel_flags
   bit  1,  status_perm  (perviously  r_perm) had never been set from submodel
   processed access permission, and was just always set to true.

   80-12-30  Davids:  modified  internal  procedure  submodel_relation so that
   rel_names.item.status_perm  is  always  "0"b  since  it  no  longer has any
   meaning  and  append_tuple  and  delete_tuple  come  from  bits  1 and 2 of
   relation_block.dsm_rel_flags.access  rather than bits 2 and 3.  when status
   went away the bit positions where shifted and because of the implementation
   of  compute_access  it  is  easier to change the bit position meanings than
   shift them back.

   81-01-12   Davids:  took  the  call  to  mrds_dsm_read_relation  which  was
   incorrectly  used  to  set  up  a  mrds_dsm_relation_names  str  out of the
   submodel_relation     procedure    and    instead    just    allocated    a
   mrds_dsm_relation_names  str.   the  relation name is currently correct but
   may  not  be  forever.   as  soon as an interface for files in submodels is
   built this code should change

   81-01-14 Davids: modified to use the new relation_block structure which has
   individual variables for all the relation access rather than doing substr's
   from a bit string.

   81-01-28   Davids:  changed  drel_ptr  to  mrds_dsm_relation_names_ptr  and
   nrels_alloc to mrds_dsm_relation_names_nrels_alloc to correspond to changes
   in the mrds_dsm_relation_names include file.

   81-05-21    Rickie    E.    Brinegar:   changed   to   use   the   modified
   mrds_dsm_relation_names  include file.  The structure name was changed from
   dsm_relation_names to mrds_dsm_relation_names.

   81-05-29 Jim Gray : modified to use new mdbm_rel_att_array structures,
   modified to remove foreign key information.


*/

/* initialize */

	error_code = 0;
	rns_ptr = null;
	rmri_ptr = rm_rel_array.rel_data.ri_ptr (fa_index);

/* fill in the relation array information */

	if dsm_sw then
	     call submodel_relation ();
	else call model_relation ();

	return;

submodel_relation: procedure ();
	mrds_dsm_relation_names_nrels_alloc = 1;
	allocate mrds_dsm_relation_names set (mrds_dsm_relation_names_ptr) in (work_area);
	mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names.relation (1) = rm_rel_array.name.submodel (fa_index);

/* get space for the return structure array */

	num_rels_init = mrds_dsm_relation_names.nrels;
	allocate rel_names set (rns_ptr) in (work_area);
	rel_names.num = num_rels_init;

/* then get the dsm relation definition record for each rel. in above list --
   this gives us the corresponding data model name */

	do i = 1 to mrds_dsm_relation_names.nrels while (error_code = 0);

	     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (i),
		wa_ptr, relation_block_ptr, submodel_iocb_ptr, error_code);
	     if error_code ^= 0 then
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
		     "Unable to get the submodel information for relation """,
		     mrds_dsm_relation_names (i).relation, """.");
	     else if relation_block.version ^= RELATION_BLOCK_VERSION_1
	     then do;
		     error_code = error_table_$unimplemented_version;
		     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
			"Expecting version ^d, actually got version ^d.",
			RELATION_BLOCK_VERSION_1, relation_block.version);
		end;
	     else do;

/* now find the corresponding rel_info structure in the file_model */

		     do ri_ptr = ptr (fm_ptr, file_model.rel_ptr)
			repeat ptr (fm_ptr, rel_info.fwd_thread)
			while (relation_block.dm_rel_name ^=
			rel_info.name);
		     end;

/* fill in the rel_names array information for this relation */

		     rel_names.item.natts (i) = relation_block.no_rb_attributes;
		     rel_names.item.sm (i) = mrds_dsm_relation_names.relation (i);
		     rel_names.item.dm (i) = rel_info.name;
		     rel_names.item.ri_ptr (i) = ri_ptr;
		     rel_names.item.total_view (i) = (rel_info.num_attr =
			relation_block.no_rb_attributes);
		     rel_names.item.status_perm (i) = "0"b;
		     rel_names.item.unused_perm (i) = "0"b;
		     rel_names.item.append_tuple_perm (i) = relation_block.rel_access.append;
		     rel_names.item.delete_tuple_perm (i) = relation_block.rel_access.delete;
		     rel_names.item.pad (i) = "0"b;

		end;

	end;

     end;

model_relation: procedure ();

/* get the number of model relations for this file,
   and then get space for the return structure array */

	num_rels_init = file_model.num_rels;
	allocate rel_names set (rns_ptr) in (work_area);
	rel_names.num = num_rels_init;

/* fill in the rel_names array for each relation in this file */

	i = 1;
	do ri_ptr = ptr (fm_ptr, file_model.rel_ptr)
	     repeat ptr (fm_ptr, rel_info.fwd_thread)
	     while (i <= rel_names.num);

	     rel_names.item.natts (i) = rel_info.num_attr;
	     rel_names.item.sm (i) = rel_info.name;
	     rel_names.item.dm (i) = rel_info.name;
	     rel_names.item.ri_ptr (i) = ri_ptr;
	     rel_names.item.total_view (i) = "1"b;	/* model always complete view */
	     rel_names.item.pad (i) = "0"b;
	     rel_names.item.status_perm (i) = "1"b;	/* for opening via the model there */
	     rel_names.item.unused_perm (i) = "0"b;	/* is complete access */
	     rel_names.item.append_tuple_perm (i) = "1"b;
	     rel_names.item.delete_tuple_perm (i) = "1"b;
	     i = i + 1;
	end;

     end;

	declare sub_err_		 entry options (variable); /* error reporting routine */
	declare caller_name		 char (20) init ("mrds_dsl_ready_file") internal static options (constant); /* name of calling routine */
	declare continue		 char (1) init ("c") int static options (constant); /* don't stop after printing message */
	declare info_ptr		 ptr init (null ()) int static options (constant); /* unused */
	declare submodel_iocb_ptr	 ptr ext init (null);
	declare return_value	 fixed bin (35) init (0) int static options (constant); /* unused */
	dcl     wa_ptr		 ptr;		/* points to working area */
	dcl     i			 fixed bin;	/* index variable */
	dcl     dsm_sw		 bit (1) unal;	/* ON => we come from a data submodel */
	dcl     fa_index		 fixed bin;	/* index into rm_file_array structure */
	dcl     error_code		 fixed bin (35);

	dcl     work_area		 area based (wa_ptr);

	dcl     (null, ptr, addr, rel, fixed) builtin;

	dcl     error_table_$unimplemented_version fixed bin (35) ext;
	dcl     sys_info$max_seg_size	 ext fixed bin;

%include mdbm_rm_rel_array;
%page;
%include mdbm_file_model;
%page;
%include mdbm_rel_att_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_dsm_entry_dcls;
     end mus_get_rel_names;
