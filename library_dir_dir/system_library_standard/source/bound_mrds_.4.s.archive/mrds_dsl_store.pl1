/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
                                                   END HISTORY COMMENTS */

mrds_dsl_store:
store:
     proc;


/*

		      BEGIN_DESCRIPTION

   The call to store looks like :

   call  mrds_dsl_store (database_index, relation_name, value_1, ..., value_n,
   code);

   store  accepts  as  input  from  the  caller an index to the database to be
   referenced  the  name  of  the  relation  to  be  affected the values to be
   assigned to a tuple of the affected relation and a recturn code.

   if the attempt to store is unsuccesful for some reason a nonzero code value
   is returned to the caller

   store  requires  that  the  database is open for update or exclusive update
   activity and that append_tuple or store_tuple scope be set on the relation.
		       END_DESCRIPTION

   Known Bugs:
      1) data types of the arguments are not checked so it is possible
         to have a character string dbi which is treated as a fixed
         bin (35) value (NSD 83-04-05)

   Other Problems:
      1) replacing the mdbm_arg_list include file with the system arg_list
         include file would reduce the number of index calculations needed
         and the divide operation to get the number of arguments. It would
         also improve the readability since descriptor and argument pointers
         would be separated.
      2) investigate the need to call mu_release_area in every call (is
         it really necessary to free the temp segment or can it be kept
         around) also a faster way to empty the area.

   HISTORY:

   76-02-01 Oris Friesen : Originally written.

   78-05-01 J. A. Weeldreyer: Rewritten for MR7.0.

   79-22-04 Al Kepner: to add scope checking.

   79-08-27  NSDavids:  Modified  to return a zero value error code if the the
   store was successful rather than just not changing the value of the code.

   79-12-01  Jim  Gray  : Modified to add call to mu_valid_data_type, and make
   changes  to  assign_  length parameter handling to make packed decimal data
   types available, also corrected signed scale problem

   80-02-01  Jim  Gray  :  Modified  to  put  allocations  in  a  non-freeing,
   extensible area managed by this routine.

   80-05-08 Davids: modified assignments of tuple_num_atts and tuple_nvar_atts
   to  take  values from rm_rel_info.model_num_attr and model_nvar_atts rather
   than  rm_rel_info.num_attr  and  nvar_atts.  This was to fix a problem with
   submodels were the submodel view did not contain a varying string attribute
   and the model did.

   80-12-10  Jim  Gray  :  modified  scope check to handle r-u to r-s-m-d type
   scope  modes  change, and new name of append_tuple for store.  Details of a
   store scope violation are now reported via sub_err_

   81-01-29 Jim Gray : removed references to mdbm_data_$current_version, using
   a constant instead, to allow future db version expansion.

   81-03-27 Jim Gray : changed dbi to dbcb_ptr parameter for mu_store, as part
   of getting rid of mus_ptr_man module.

   81-05-06   Rickie   E.   Brinegar:  modified  to  make  use  of  a  changed
   rm_domain_info structure.

   81-06-01 Jim Gray : modified to use new resultant structures.

   81-06-18  Roger  Lackey  : modified to use last_store_rel_name in dbdb.incl
   also to remove references to store_info.n36 n27 n18 and store_info.ht_len.

   81-06-19 Roger Lackey : Minor format cleanup for previous change.

   81-07-02  Jim  Gray  : added code to update the relation reference count in
   the new statistics section of rm_rel_info.

   81-07-07  Jim  Gray : added reset of the auto -another rel name in the dbcb
   to  the  clean up handler, so that errors do not cause the flag to get hung
   up.

   81-09-17  Rickie  E.   Brinegar: moved the seting of num_ptrs to a point in
   frong  of  the  first reference of arg_list.arg_ptrs to eliminate subscript
   range faults.

   81-10-30 Davids: Modified so that the internal procedure error is
   not  called  if the error returned by mu_store is dup_store. This
   allows the -another (either explicit or automatic  (by  specifing
   the  same  rel  name)) to be used after the dup_store error. this
   answers tr11808

   81-12-15 R. Lackey : Modify to search rm_rel_array for full name. TR11887.

   81-12-18 Davids: Modified so that rel_name if not  found  in  the
   list  of permanent relations will be considered a temp rel index.
   Scopes are not checked for temporary relations. This so that temp
   rels can be updateable.

   82-01-08 R. Lackey : Added check to detect relation names longer
   then 30 characters.

   82-08-19 Mike Kubicar : Removed all reference to the tuple structure;
   changed mrds_dsl_store to use a simple_typed_vector instead.

   83-01-18 Davids: Added transaction code

   83-01-24 Davids: modifed to set mstxn_txn_id = "0"b as the first thing, so that
   it is set incase an error occurs in argument processing or getting the 
   database index.
   
   83-03-35 Roger Lackey : Modified to check scope on all calls

   83-03-28 Roger Lackey : Changed place where move_list was allocated to be in
                           do  new store.

   83-03-30 Davids: Changes to improve preformance - replaced multiple
   references to "fixed (arg_list.code = SPECIAL)" with a reference to an
   automatic variable and reference the above code fragment 1 to set the
   variable (environment_pointer_offset). Also replaced references to the
   "/" infix operator with the divide builtin.

   83-03-31 Davids: More changes to improve performance - removed excess
   if-then-else nesting, removed extraneous setup of a cleanup condition
   handler, shortened test for a relation name over 30 characters by first
   testing the actual length of the relname and only if thats greater than
   30 then determining if the first space occurs within the limit, this
   replaced always doing a length (rtrim (relname)), shortened all the code
   that assignes the move_list.item_user_desc_ptr to just an assignment
   from the desc_ptr instead of lots of hairy ifs that checked to see if
   the descriptor was for a structure (at this point it never could be) or
   an array (again at this point point it couldn't be). Removed include files
   mdbm_rm_attr_info, mdbm_rm_domain_info and vu_typed_vector.

   83-04-04 Davids: Added view, and security level checking
   which used to be in mu_store. Added variables mdbm_error_$view_prevent,
   and inc_rel_acc. Note that ready_mode checking was not copied from 
   mu_store since ready_mode is no longer needed, if scopes are ok ready_mode
   will always be ok. Also it is not necessary to check the read permission
   access on the key attributes for security checking since you cannot create
   a submodel with append access on a relation unless all of its key attrs
   have read access so the check was redundant.

   83-04-05 Davids: Replaced the call to mu_store with calls to mu_build_tuple
   mu_cursor_manager_$get and dbcb.relmgr_entries.put_tuple (the calls that
   mu_store used to make). The call to mu_cursor_manager_$get is done only for
   a "new" store, the cursor_ptr is saved in the store_info structure. The
   variable unused_tuple_id was added since the call to put_tuple returns the
   tuple_id. The variable t_ptr was deleted since it was not needed and a
   check to be sure that the dbi_ptr was non-null was deleted since the
   argument list cannot have null argument pointers.

   83-04-06 Davids: modified the scope checking code to use the new
   scope_flags_ptr in the rm_rel_info structure instead of sequentially
   looking through the scope_info array. Deleted declaration to variable j
   which is no longer used. Moved the transaction start include file to right
   before the if statement that determines if this is a "new" store. This was
   needed becuase cursors for protected data files must be created in a
   transaction.

   83-04-07 Davids: Replaced the use of the val_args array with an array of just
   the argument pointers and an array of just the argument descriptors. For the
   case of a structure these new arrays are based on the val_args array. For
   the non-structure case they are based on the original argument list. This
   eliminated the allocation of the val_args array and the loop setting each
   element of the array from the argument list for the non-structure case. It
   also eliminates additions in the index calculation when the move_list is
   built. The new variables arg_val_ptr_array_ptr, arg_val_ptr_array,
   arg_desc_ptr_array_ptr, arg_desc_ptr_array were added. The variables doffset
   work_area are no longer used and were deleted.

   83-05-04 Davids: Modified so that mu_define_area is called with a name
   of MRDS || dbi_pic. This will allow closes to be faster since all
   temp_segments with the name MRDS || dbi_pic can be deleted/freed in 1 call.
   the variable dbi_pic was created as an easy way to convert from fixed bin
   to character.

   83-05-23 Mike Kubicar : relation manager calling sequence change

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)

   84-05-21 Moberg:  Fixed check for long relation names which had an off by
   one error.
*/

	icode, num_dims = 0;
	dbcb_ptr, arg_ptr = null;
	mstxn_txn_id = "0"b;

	call cu_$arg_list_ptr (al_ptr);
	num_ptrs = arg_list.arg_count;
	if arg_list.arg_count < 8
	then signal arg_err;			/* must be at least four arguments */

/* get ptr to return code argument */
	n_args = divide (arg_list.arg_count, 2, 17, 0);
	c_ptr = arg_list.arg_des_ptr (n_args);
	code = 0;					/* in case things work make sure to return 0. */
	dbi_ptr = arg_list.arg_des_ptr (1);		/* get the index value to the
						   data base which is to be stored into */

/* translate it into a ptr to th database control block */
	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null then
	     call error (mrds_error_$invalid_db_index);

	rdbi_ptr = dbcb.rdbi_ptr;

	mstxn_transactions_needed = dbcb.transactions_needed;

	on cleanup begin;
		call mstxn_cleanup;
		call clean_up;
	     end;

	on any_other call mstxn_any_other;

	dbi_pic = dbcb.dbi;
	call
	     mu_define_area$define_temp_dir_area (dbcb.store_area_ptr, db_index, (sys_info$max_seg_size),
	     "MRDS" || dbi_pic, "0"b /* not extensible */,
	     "1"b /* no freeing */, "0"b, "0"b /* no zeroing */, icode);
	if icode ^= 0 then
	     call error (icode);
	area_ptr = dbcb.store_area_ptr;

	rn_ptr = arg_list.arg_des_ptr (2);
	environment_pointer_offset = fixed (arg_list.code = SPECIAL);
	desc_ptr = arg_list.arg_des_ptr (2 + n_args + environment_pointer_offset);
	rn_len = fixed (string (descriptor.size));
	if rn_len > 30
	then do;
		first_space = index (rel_name, " ");
		if first_space = 0 | first_space > 31
		then call error (mrds_error_$rel_name_too_long);
	     end;

%include mrds_start_transaction;

	if mstxn_code ^= 0
	then call error (mstxn_code);

	dbcb.user_started_transaction = user_started_transaction;

	if rel_name = "-another" | dbcb.last_store_rel_name = rel_name then do;

		if dbcb.sti_ptr = null then
		     call error (mrds_error_$no_prev_store);
		sti_ptr = dbcb.sti_ptr;		/* pick up info from prev. store */
		rmri_ptr = store_info.ri_ptr;
		ml_ptr = store_info.ml_ptr;
	     end;
	else do;					/* if new store */

		dbcb.last_store_rel_name = "!!!!!!!... ...!!!!!"; /*  Temparory store bad rel name so it won't compare if this store fails */

		call free_store_info;
		allocate store_info in (dbcb.static_area); /* set up store information */
		dbcb.sti_ptr = sti_ptr;
		store_info.ml_ptr = null ();
		store_info.temp_rel = "0"b;		/* Until we find out */
		rmra_ptr = rm_db_info.ra_ptr;		/* find rel info */

		rel_name_32 = rel_name;		/* Get proper length for search */
		i = index (string (rm_rel_array.name), "!" || rel_name_32);

		if i = 0 then do;			/* if not found - could be temp rel index */
			rmra_ptr = rm_db_info.tra_ptr;
			i = cv_dec_check_ (rel_name, icode); /* if number it must be a temp rel */
			if icode ^= 0
			then call error (mrds_error_$unknown_relation_name);
			else
			     if i < 1 | i > mrds_data_$max_temp_rels /* must be a number within range */
			then call error (mrds_error_$undefined_temp_rel_index);
			else
			     if rm_rel_array.rel_data.ri_ptr (i) = null () /* must be a defined temp rel */
			then call error (mrds_error_$undefined_temp_rel_index);
			else do;
				rmri_ptr = rm_rel_array.rel_data.ri_ptr (i);
				store_info.temp_rel = "1"b;
			     end;
		     end;
		else do;
			i = divide ((i - 1), 33, 17, 0) + 1; /* convert from char to array index */
			rmri_ptr = rm_rel_array.rel_data.ri_ptr (i);
			store_info.temp_rel = "0"b;
		     end;

		call mu_cursor_manager_$get (dbcb.dbi, rmri_ptr, 0, /* tuple variable = 0 for stores */
		     rm_rel_info.rel_id, dbcb.relmgr_entries.create_cursor, /* so that retrieve-store-retrieve */
		     dbcb.relmgr_entries.open, dbcb.cursor_ptrs_storage_ptr, /* can be done without screwups */
		     dbcb.cursor_storage_area_ptr, store_info.cursor_ptr, icode);
		if icode ^= 0
		then call error (icode);

		if rm_rel_info.last_statistics_update_count ^= 0 & /* 0 => staticstics not ever set */
		     rm_rel_info.last_statistics_update_count
		     <= mrds_data_$statistics_update_count_interval then
		     rm_rel_info.last_statistics_update_count =
			rm_rel_info.last_statistics_update_count + 1;
						/* add to reference count for this rel */

		store_info.ri_ptr = rmri_ptr;
		store_info.num_atts = rm_rel_info.model_num_attr;
						/* allocate space for tuple */
		ml_nitems_init = rm_rel_info.num_attr;	/* allocate and set up move list */
		allocate move_list in (dbcb.static_area) set (store_info.ml_ptr);
		ml_ptr = store_info.ml_ptr;
		do i = 1 to move_list.nitems;
		     move_list.item.attr_index (i) = i;
		end;

	     end;					/* if new store */

	if ^store_info.temp_rel
	then do;
		if ^rm_rel_info.scope_flags_ptr -> scope_flags.permits.append_tuple
		then do;				/* if scope not set for append_tuple */
			call sub_err_ (mrds_error_$scope_viol, caller_name, continue, info_ptr, return_value,
			     "^/The relation ""^a"" needs a scope permission of ""append tuple"" in order to perform this operation",
			     rm_rel_info.name);
			call error (mrds_error_$scope_viol);
		     end;

		if ^rm_rel_info.store		/* verify submodel view valid for store */
		then call error (mrds_error_$view_prevent);

		if rm_rel_info.mdbm_secured		/* verify security access if necessary */
		then do;
			if ^rm_rel_info.append_tuple_perm /* check access to rel. */
			then call error (mrds_error_$inc_rel_acc);
		     end;

	     end;					/* check scope, view, security access */

	desc_ptr = arg_list.arg_des_ptr (n_args + environment_pointer_offset + 3);
	if descriptor.type = STRUCTURE_TYPE & n_args = 4 then do;
						/* if values in structure */
		data_ptr = arg_list.arg_des_ptr (3);	/* ptr to the third argument */
		descr_ptr = desc_ptr;		/* ptr to
						   the descriptor of the third argument */
		call
		     mu_break_structure (area_ptr, data_ptr, descr_ptr, arg_ptr,
		     val_arg_count, icode);		/* break_structure procedure implicitly sets arg_ptr by allocating
						   val_args in static_area */
		if icode ^= 0 then
		     call error (icode);

		arg_val_ptr_array_ptr = addr (val_args (1));
		arg_desc_ptr_array_ptr = addr (val_args (val_arg_count + 1));

		was_structure = "1"b;
	     end;

	else do;					/* third arg was not a structure */
		val_arg_count = n_args - 3;		/* this is the number of values passed
						   by the caller */

		arg_val_ptr_array_ptr = addr (arg_list.arg_des_ptr (3));
		arg_desc_ptr_array_ptr = addr (arg_list.arg_des_ptr (environment_pointer_offset + 3 + n_args));

		was_structure = "0"b;
	     end;

	if val_arg_count ^= rm_rel_info.num_attr
	then call error (error_table_$wrong_no_of_args);

	do i = 1 to val_arg_count;			/* build move_list */
	     desc_ptr = arg_desc_ptr_array (i);
	     if ^mu_valid_data_type$valid_scalar_data_type (desc_ptr -> descriptor_overlay)
	     then call error (mrds_error_$invalid_dm_descriptor);

	     move_list.item.user_ptr (i) = arg_val_ptr_array (i);
	     if ^was_structure then
		if descriptor.type = VAR_CHAR | descriptor.type = VAR_BIT then
		     move_list.item.user_ptr (i) =
			addrel (move_list.item.user_ptr (i), -1);
	     move_list.item.user_desc_ptr (i) = desc_ptr;
	end;

	call mu_build_tuple (rmri_ptr, area_ptr, dbcb.store_vector_ptr, ml_ptr, "0"b, icode); /* build the tuple */
	if icode ^= 0
	then call error (icode);

	call dbcb.relmgr_entries.put_tuple (store_info.cursor_ptr,
	     dbcb.store_vector_ptr, unused_tuple_id, icode);
	if icode = dm_error_$key_duplication then do;
		icode = mrds_error_$dup_store;	/* The error code everyone is expecting */
		mftxn_code = 0;
	     end;
	else mftxn_code = icode;

%include mrds_finish_transaction;

	if mftxn_code ^= 0
	then call error (mftxn_code);

	if icode ^= 0 then do;
		if icode = mrds_error_$dup_store	/* do not call the clean up procedure */
		then code = icode;			/* in the event of a duplicate key error */
		else call error (icode);
	     end;

	dbcb.last_store_rel_name = rel_name;		/* Save the relation name for next call to store */

exit:
	if dbcb_ptr = null () then
	     ;
	else if dbcb.store_area_ptr ^= null () then
	     call mu_release_area (dbcb.store_area_ptr);
	return;


should_rollback: proc () returns (bit (1));

	return ("0"b);

/* There are no circumstances under which a rollback is desired here */

     end should_rollback;



restore_significant_data: proc;

	return;					/* no data need be restored before a retry */

     end restore_significant_data;
%page;
clean_up:
     proc;


	if dbcb_ptr ^= null then do;
		call free_store_info;
		dbcb.last_store_rel_name = "!!!!!!!!  !!!!!!!"; /* reset so errors don't
						   leave this in a state implying that
						   -another can automatically be forced */
	     end;

     end clean_up;


free_store_info:
     proc;

	if dbcb.sti_ptr ^= null then do;		/* clean out store info */
		sti_ptr = dbcb.sti_ptr;
		if store_info.ml_ptr ^= null then do;
			free store_info.ml_ptr -> move_list in (dbcb.static_area);
			store_info.ml_ptr = null ();
		     end;
		free store_info in (dbcb.static_area);
		dbcb.sti_ptr = null ();
	     end;

     end free_store_info;
%page;
error:
     proc (err_code);
	dcl     err_code		 fixed bin (35);
	code = err_code;
	call clean_up;
	go to exit;
     end error;
%page;
	dcl     mu_valid_data_type$valid_scalar_data_type entry (bit (36)) returns (bit (1) aligned);
	dcl     descriptor_overlay	 bit (36) unal based; /* overlay for descriptor */
	dcl     area_ptr		 ptr;
	dcl     mu_release_area	 entry (ptr);
	dcl     mu_define_area$define_temp_dir_area
				 entry (ptr, fixed bin (35), fixed bin (18), char (11), bit (1) aligned,
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     sub_err_		 entry options (variable); /* reports errors */
	dcl     continue		 char (1) init ("c"); /* dont stop after printing mesg */
	dcl     caller_name		 char (32) init ("mrds_dsl_store"); /* name of calling routine */
	dcl     info_ptr		 ptr init (null ());/* unused */
	dcl     return_value	 fixed bin (35) init (0); /* unused */
	dcl     environment_pointer_offset fixed bin;	/* 1 if the argument list contains an environment pointer */
						/* 0 if the arg list doesn't contain the environment pointer */
	dcl     SPECIAL		 fixed bin static internal init (8) options (constant);
	dcl     STRUCTURE_TYPE	 fixed bin static internal init (17) options (constant);
						/* data type for a structure */
	dcl     VAR_BIT		 fixed bin (5) static internal init (20) options (constant);
	dcl     VAR_CHAR		 fixed bin (5) internal static init (22) options (constant);
	dcl     (
	        n_args,				/* number of arguments passed to store */
	        rn_len,				/* length of relation name parameter */
	        val_arg_count,			/* the number of values specified for this tuple */
	        i,
	        first_space				/* index of first space in relation name */
	        /* 0 implies no spaces */
	        )			 fixed bin;	/* index used within the store procedure */

	dcl     rel_name		 char (rn_len) based (rn_ptr); /* relation name passed by caller */
	dcl     rel_name_32		 char (32);	/* Rel_name 32 characters long used for searching */
	dcl     db_index		 fixed bin (35) based (dbi_ptr); /* database_index passed by caller */
	dcl     code		 fixed bin (35) based (c_ptr); /* code returned to caller */

	dcl     was_structure	 bit (1) unal;	/* on if user views as a structure */
	dcl     icode		 fixed bin (35);	/* internal error return code */
	dcl     val_args		 (2 * val_arg_count) ptr based (arg_ptr); /* an array of pointers to
						   user supplied values followed by pointers to
						   the descriptors for those values returned by mu_break_structure */
	dcl     arg_val_ptr_array	 (val_arg_count) ptr based (arg_val_ptr_array_ptr);
						/* array of pointers to user supplied argument values */
	dcl     arg_val_ptr_array_ptr	 ptr;
	dcl     arg_desc_ptr_array	 (val_arg_count) ptr based (arg_desc_ptr_array_ptr);
						/* array of pointers to the descriptors of the user supplied argument values */
	dcl     arg_desc_ptr_array_ptr ptr;

	dcl     unused_tuple_id	 bit (36) aligned;	/* tuple id of the tuple just stored - not used */
	dcl     (rn_ptr, c_ptr, dbi_ptr, data_ptr, descr_ptr, sti_ptr,
	        arg_ptr)		 ptr;

	dcl     (null, addr, addrel, string, divide, fixed) builtin;
	dcl     (index, rel)	 builtin;

	dcl     1 store_info	 aligned based (sti_ptr), /* static store information */
		2 ri_ptr		 ptr,
		2 ml_ptr		 ptr,
		2 num_atts	 fixed bin,
		2 nvar_atts	 fixed bin,
		2 cursor_ptr	 ptr,
		2 temp_rel	 bit (1);		/* On = storeing in to a temp rel */

%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_db_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_move_list;
%page;
%include mdbm_descriptor;
%page;
%include mdbm_arg_list;
%page;
%include mdbm_scope_info;
%page;
/* dbm subroutines */

	dcl     mu_break_structure	 entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr);
	dcl     mu_build_tuple	 entry (ptr, ptr, ptr, ptr, bit (1) aligned, fixed bin (35));
	dcl     mu_cursor_manager_$get entry (fixed bin (35), ptr, fixed bin (35), bit (36) aligned, entry, entry, ptr,
				 ptr, ptr, fixed bin (35));

	dcl     error_table_$wrong_no_of_args fixed bin (35) ext;

	dcl     mrds_data_$max_temp_rels fixed bin (35) ext;

	dcl     dm_error_$key_duplication fixed bin (35) ext static;

	dcl     mrds_error_$dup_store	 fixed bin (35) external static;
	dcl     mrds_error_$invalid_db_index fixed bin (35) ext;
	dcl     mrds_error_$invalid_dm_descriptor fixed bin (35) ext;
	dcl     mrds_error_$no_prev_store fixed bin (35) ext;
	dcl     mrds_error_$rel_name_too_long fixed bin (35) ext;
	dcl     mrds_error_$scope_viol fixed bin (35) ext;
	dcl     mrds_error_$undefined_temp_rel_index fixed bin (35) ext;
	dcl     mrds_error_$unknown_relation_name fixed bin (35) ext;

	dcl     mrds_error_$view_prevent fixed bin (35) external static;
	dcl     mrds_error_$inc_rel_acc fixed bin (35) external static;

	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

/*    Multics subroutines */

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));

	dcl     arg_err		 condition;
	dcl     cleanup		 condition;
	dcl     any_other		 condition;
	dcl     mrds_data_$statistics_update_count_interval fixed bin (35) ext;
	dcl     dbi_pic		 picture "999";

     end mrds_dsl_store;

