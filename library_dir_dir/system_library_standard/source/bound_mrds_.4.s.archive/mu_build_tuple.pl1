/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */



/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_build_tuple:
     proc (rmri_ptr, area_ptr, vector_ptr, ml_ptr, mod_flag, code);

/* NOTES:

		      BEGIN_DESCRIPTION

   This  procedure  inserts user values into the supplied tuple.  Encoding and
   domain  integrity  checking are performed if specified.

		       END_DESCRIPTION


   HISTORY:

   78-07-01 J. A. Weeldreyer : Initially written.

   79-05-19  Al  Kepner:  Modified  to  provide  a  handler for the conversion
   condition.

   79-06-09   Al   Kepner:  Modified  to  align  varying  attributes  on  word
   boundaries.

   79-11-16  Davids:  Corrected  calculation of offset in the tuple of varying
   strings  which  always assumed that the lengths were bit when they may have
   been character.  This could result in losing characters.

   79-12-12  Mary  Ward: Modified to correctly initialize icode and to provide
   some  measure  of  integrity checking on the data returned from user encode
   and check procedures.

   80-02-01 Jim Gray : Modified to add area_ptr parameter.

   80-02-02  Jim Gray : Modified to change the check_proc accept_flag to fixed
   bin(35), to comply with cobol interface capability.


   80-05-07 Davids: modified assignments of tuple_num_atts and tuple_nvar_atts
   to  take  values from rm_rel_info.model_num_attr and model_nvar_atts rather
   than  rm_rel_info.num_attr  and  nvar_atts.  This was to fix a problem with
   submodels were the submodel view did not contain a varying string attribute
   and the model did.

   80-09-18  Jim  Gray  :  Modified  to correct problem with modifying varying
   character string attributes.  The routine shift_attr was not converting the
   shift  length  to bit from char before shifting attributes to make room for
   the modified attribute value.

   80-09-18  Jim  Gray  :  Modified to make sure that padding space in aligned
   data  types  was  always  handled  the same, regardless of who, or how this
   module  was  called.  This was a critical bug because it caused compares to
   fail  where  they should have suceeded, and requires the user to reload his
   database, using the new version of this routine.

   80-09-19  Jim  Gray  :  Modified  to  make  padding  fix work for only byte
   oriented  data  (i.e.   strings  types  like  bit or char, and decimal data
   types) since binary arith types which are handled by word oriented hardware
   instructions  will  be  right justified, and not contain garbage in padding
   space.   Also  complex  types (binary) have there padding split between the
   real and imag parts.  (this all apllies to aligned data only)

   80-12-08 Davids: modified so that the pointer passed to Check_out points to
   the  begining  of  the  variable  in  all  cases.   It used to point to the
   begining  of  the  character  string  instead  of the length word in varing
   string  types.  This was because the pointer is used in a gen_call in which
   case  it  must  point  to  the characters not the length - but it was never
   changed back.  This was done in response to TR8572.

   81-01-17 Jim Gray : made same changes as made to mus_mod_ubtup for TR 8670,
   see that module for details.

   81-01-23 Jim Gray : corrected problem with modifying a varying attribute in
   the  case  that  the  new  size was smaller than the old size.  the routine
   shift_insert  was  causing attributes to the left of the modified attribute
   to  be  moved, when for either positive or negative shifts, only attributes
   to the right of the modified attribute in the tuple have to be moved.

   81-02-17  Jim  Gray  :  change A, for TR 9133, changed if statement in case
   where  a  new  tuple  with varying attrs is being built, and the attr being
   added to the tuple is the last varying attr so far, but of a different type
   (char versus bit) from that of the previous varying attr.  Previously a bit
   varying following a char varying caused the char varying to be overwritten,
   because  the char length was not multiplied by 9 to get a bit length.  Note
   that  for  dsl_$store  calls,  the  attrs will always be in order, thus the
   current  attr  is  the last one defined so far, only temp rel will possibly
   have the attrs differ from definition order.

   81-02-17  Jim Gray : change B, corrected second parameter to compute shift,
   to correctly be a bit rather than char length.  The effect previously, when
   the count field of the varying attr was passed was to either undershift for
   negative  shift_delta,  or overshift for positive shift_delta.  Thus either
   space  was  not recovered, or space was used when not needed.  This was for
   TR 9136, the shift_len part of that TR fix was done 80-09-19.

   81-02-17  Jim Gray : change C, for TR 9138, pointing out problem with doing
   in  place  moves  of tuple data during a modify, that can cause part of the
   string  to  overwrite  itself.   The temp_string is placed on the stack for
   this case, since only one attr is done at a time, and the largest attr is <
   1300  words.  Note that to make this fail previously required at least a 16
   character string, since the hardware works on double word pairs (i.e.  four
   words).

   81-05-06   Rickie  E.   Brinegar:  Changed  the  use  of  cu_$gen_call  for
   check_procs and encode_procs to cu_$generate_call.  This was done to permit
   check_procs and encode_procs to be written in other than pl1.

   81-05-23 Jim Gray : commented out references to threads in the tuple structure,
   as part of removing unused parts in the include file.

   81-06-01 Jim Gray : changed to use new version of resultant.

   81-08-11 Jim Gray : fixed trashed tuple problem that occurs  when
   a submodel re-orders the relation from (kh* ht* indx data) to (kh
   data indx kt) with all attributes varying strings  and  the  data
   values  are "kh1", "data1", "indx1", "kt1" for a store operation.
   The problem was that when moving attributes that are to appear to
   the  right of the current attr (say indx which arrives 3rd in the
   move list), the length of the current attribute being replaced is
   really  -36 not 0, so that the not yet existing attrs count field
   is considered for the length of the move for attrs to the right.

   81-10-22 Davids: Have converted references of the form:
   .          ptr = addr (bit_array (large_offset))
   .	              to
   .          ptr = add_bit_offset (bit_array_ptr, large_offset - 1)
   This gets around a pl1 bug (tr11784) that causes the first method
   to  produce  the  wrong  value  when  the code is compiled with a
   subscriptrange condition. The "-1" is needed because  bit_array's
   first element is 1 not 0.

   82-09-14 Mike Kubicar : Converted to use the vector structure.

   83-03-28 Davids: Modified so the general and simple typed_vectors
   only have the type and number_of_dimensions elements set correctly.
   The value_ptr and identifier (general vector only) elements are
   left un-initialized. This was done to improve the performance
   of this module which was terrible before the change. 
*/

	wa_ptr = area_ptr;				/* initialize */
	icode = 0;
	ub_alloc = "0"b;
	on conversion go to conversion_error;

	if mod_flag then do;
		general_typed_vector_ptr = vector_ptr;
		general_typed_vector.type = GENERAL_TYPED_VECTOR_TYPE;
		general_typed_vector.number_of_dimensions = move_list.nitems;
	     end;
	else do;
		simple_typed_vector_ptr = vector_ptr;
		simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
		simple_typed_vector.number_of_dimensions = move_list.nitems;
	     end;

	do i = 1 to move_list.nitems;			/* beginning of attribute value insertion loop */

	     rai_ptr = rm_rel_info.attr_ptrs (move_list.item.attr_index (i));
						/* pick up info ptrs */
	     rdi_ptr = rm_attr_info.domain_ptr;

	     if rm_domain_info.encd_proc then do;	/* if value must be encoded */
		     allocate value_for_db in (work_area) set (db_val_ptr);

		     value_for_db = "0"b;		/* clear space */

		     if move_list.item.user_desc_ptr (i) -> bit36 ^= /* if must convert prior to encoding */
			rm_domain_info.user_desc then do;

			     if rm_domain_info.user_bit_len > 2376 then do;
						/* if long, alloc. space */
				     allocate value_for_user in (work_area) set (user_val_ptr);
				     ub_alloc = "1"b;
				end;
			     else user_val_ptr = addr (wksp); /* else use stack */

			     value_for_user = "0"b;	/* clear area */

			     call
				mu_convert (move_list.item.user_ptr (i),
				move_list.item.user_desc_ptr (i), user_val_ptr,
				addr (rm_domain_info.user_desc), icode);
			     if icode ^= 0 then
				call error (icode);

			     encode_list.uv_ptr = user_val_ptr; /* put ptr in arg list */
			end;			/* if needed to convert */
		     else encode_list.uv_ptr = move_list.item.user_ptr (i);
						/* if no need to convert */

		     user_descriptor = rm_domain_info.user_desc; /* get descriptor for encode input */
		     encode_list.ud_ptr = addr (user_descriptor); /* put addr in arg list */

		     if encode_list.ud_ptr -> descriptor.type = VAR_CHAR
			/* if varying, reset arg ptr */
			| encode_list.ud_ptr -> descriptor.type = VAR_BIT then
			/* to point to string, not length */
			encode_list.uv_ptr =
			     addr (encode_list.uv_ptr -> varying.string);

		     encode_list.dbv_ptr = db_val_ptr;	/* will be output from encode */
		     db_descriptor = rm_domain_info.db_desc; /* move descriptor into local storage */
		     encode_list.dbd_ptr = addr (db_descriptor); /* and put in arg list */

		     if encode_list.dbd_ptr -> descriptor.type = VAR_CHAR
			| encode_list.dbd_ptr -> descriptor.type = VAR_BIT then
			encode_list.dbv_ptr =
			     addr (encode_list.dbv_ptr -> varying.string);

		     encode_list.code_ptr = addr (icode); /* move return code info into arg list */
		     encode_list.coded_ptr = addr (FB35_DESC);

/* 81-05-06 Rickie E. Brinegar: Start changed code ************************* */

		     call cu_$generate_call /* call user's encode proc with three arguments */
			(rm_domain_info.encd_proc_entry, addr (encode_list));
						/* call encode_proc(val_for_user,val_for_db,icode) */

/* 81-05-06 Rickie E. Brinegar: End changed code *************************** */

		     if icode ^= 0 then
			call error (icode);

		     if encode_list.dbd_ptr -> descriptor.type = VAR_CHAR
			/* move the pointer back to the length word */
			| encode_list.dbd_ptr -> descriptor.type = VAR_BIT
						/* this should be ok because varing */
		     then encode_list.dbv_ptr = addrel (encode_list.dbv_ptr, -1);
						/* strings aligned so no bit offset */

		     call Check_out (encode_list.dbd_ptr, encode_list.dbv_ptr, icode);
						/* make sure no hanky-panky */
		     if icode ^= 0 then
			call error (icode);		/* some sort of trouble */

		     if ub_alloc then do;		/* finished with user bit string */
			     ub_alloc = "0"b;
			end;

		end;				/* if encoding */

	     else do;				/* if not encoding */

		     if move_list.item.user_desc_ptr (i) -> bit36 ^= /* if must convert */
			rm_domain_info.db_desc then do;

			     allocate value_for_db in (work_area);

			     value_for_db = "0"b;	/* clear space */

			     call
				mu_convert (move_list.item.user_ptr (i),
				move_list.item.user_desc_ptr (i), db_val_ptr,
				addr (rm_domain_info.db_desc), icode);
			     if icode ^= 0 then
				call error (icode);
			end;			/* if converting */

		     else /* if no conversion required */
			db_val_ptr = move_list.item.user_ptr (i); /* point to user value as given */
		end;				/* if not encoding */

	     if rm_domain_info.ck_proc then do;		/* if there is domain integ. check proc. */

		     check_list.val_ptr = db_val_ptr;	/* set up arg list */

		     db_descriptor = rm_domain_info.db_desc; /* move descriptor into stack */
		     check_list.vd_ptr = addr (db_descriptor); /* and pass to arg list */

		     if check_list.vd_ptr -> descriptor.type = VAR_CHAR
			| check_list.vd_ptr -> descriptor.type = VAR_BIT then
			check_list.val_ptr =
			     addr (check_list.val_ptr -> varying.string);

		     accept_flag = 0;
		     check_list.af_ptr = addr (accept_flag); /* move return val stuff into arg list */
		     check_list.afd_ptr = addr (FB35_DESC);

/* 81-05-06 Rickie E. Brinegar: Start changed code ************************* */

		     call
			cu_$generate_call (rm_domain_info.ck_proc_entry,
			addr (check_list));		/* check_proc(val_for_db, accept_flag); */

/* 81-05-06 Rickie E. Brinegar: End changed code *************************** */

		     if accept_flag = 0 then /* was not acceptable */
			call error (mdbm_error_$dom_integ);

		     if check_list.vd_ptr -> descriptor.type = VAR_CHAR
			/* move the pointer back to the length word */
			| check_list.vd_ptr -> descriptor.type = VAR_BIT
						/* this should be ok because varing */
		     then check_list.val_ptr = addrel (check_list.val_ptr, -1);
						/* strings aligned so no bit offset */
		     call Check_out (check_list.vd_ptr, check_list.val_ptr, icode);
						/* make sure no hanky-panky */
		     if icode ^= 0 then
			call error (icode);
		end;				/* checking domain via proc. */

/* When boolean integrity checking is implemented, it should be inserted here */


	     if mod_flag then do;
		     general_typed_vector.dimension (i).identifier =
			rm_attr_info.model_defn_order;
		     general_typed_vector.dimension (i).value_ptr =
			db_val_ptr;
		end;
	     else simple_typed_vector.dimension (rm_attr_info.model_defn_order)
		     .value_ptr = db_val_ptr;

	end;					/* attribute value insertion loop */

	code = 0;

exit:
	return;

conversion_error:
	;
	code = mdbm_error_$conversion_condition;
	go to exit;

Check_out:
     procedure (user_desc_ptr, user_data_ptr, code);

/* This procedure makes a few simple test to determine if data returned
   from a user's encode/check procedure is what it claims to be.  Four checks
   are made:
   1) The descriptor is compared to the original descriptor.  A difference
   is deemed to be the result of deliberate misrepresentation and cause an error
   to be returned indicating an inconsistent database.
   2) Decimal data is checked for validity.  If invalidly formatted decimal
   data gets into the database, it can cause problems later.  Checking it now is
   easy.
   3) Varying strings are checked to make sure that they aren't too long.
   4) Character data is verified to contain legitimate ascii data. */

	dcl     (
	        user_desc_ptr,			/* points to returned user_descriptor */
	        user_data_ptr
	        )			 ptr;		/* points to returned user data */
	dcl     code		 fixed bin (35);	/* will be returned as non-zero if some problem with data */

	dcl     (dtype, dprec)	 fixed bin;
	dcl     (char_len, OK_char)	 fixed bin (21);
	dcl     OK_dec		 bit (1);

	dcl     var_char_str	 char (char_len) varying based;
	dcl     char_str		 char (char_len) based;
	dcl     length		 fixed bin (35) based unaligned;

	dcl     1 arithmetic_desc	 aligned based,
		2 fill		 bit (12) unaligned,
		(
		2 scale		 fixed bin (12),	/* for arithmetic data types */
		2 precision	 fixed bin (12)
		) /* size is divided into scale & precision */
				 unsigned unaligned;

	dcl     desc_overlay	 bit (36) based;	/* used for comparison purposes */

	code = 0;					/* init */

	if user_desc_ptr -> desc_overlay ^= rm_domain_info.db_desc then
	     code = mdbm_error_$incons_db;		/* this is verboten */

	else do;					/* user meant well, but double check anyway */
		dtype = user_desc_ptr -> descriptor.type; /* get type into convenient location */

		if (dtype >= FIXED_DEC & dtype <= CMPLX_FLT_DEC) /* standard decimal data types */
		     | (dtype >= PACKED_FIXED_DEC & dtype <= PACKED_CMPLX_FLT_DEC)
						/* packed decimal data types */
		then do;				/* verify that it really is decimal data */
			dprec = user_desc_ptr -> arithmetic_desc.precision;
						/* get precision for call */
			OK_dec = valid_decimal_ (dtype, user_data_ptr, dprec);
						/* check it out */
			if ^OK_dec then
			     code = error_table_$improper_data_format; /* never make it */
		     end;

		else if dtype = VAR_BIT then do;	/* varying bit string */
			if user_data_ptr -> length > rm_attr_info.bit_length then
			     code = error_table_$improper_data_format; /* too long */
		     end;

		else if dtype = CHAR | dtype = VAR_CHAR then do; /* character string */
			OK_char = 0;		/* assume the best */
			if dtype = VAR_CHAR then do;	/* varying string */
				char_len = user_data_ptr -> length; /* get length out of string */
				if (char_len * 9) > rm_attr_info.bit_length then
				     OK_char = 1;
				else OK_char =
					verify (user_data_ptr -> var_char_str, collate ());
			     end;
			else do;
				char_len = user_desc_ptr -> descriptor.size;
				OK_char = verify (user_data_ptr -> char_str, collate ());
			     end;
			if OK_char ^= 0 then
			     code = error_table_$improper_data_format;
		     end;
	     end;

     end Check_out;

error:
     proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_move_list;
%page;
%include vu_typed_vector;
%page;
	dcl     (
	        wa_ptr,				/* pointer to work area */
	        db_val_ptr,				/* pointer to converted value, ready for tuple */
	        vector_ptr,				/* pointer to vector */
	        user_val_ptr
	        )			 ptr;		/* pointer to converted value, prior to encoding */
	dcl     wksp		 (33) fixed bin (71);

	dcl     (
	        mod_flag,				/* Input: on indicats modify rather than store */
	        ub_alloc
	        )			 bit (1) aligned;

	dcl     i			 fixed bin;	/* internal indexes */

	dcl     (
	        code,				/* Output: status code */
	        icode				/* internal status code */
	        )			 fixed bin (35);

	dcl     accept_flag		 fixed bin (35);
	dcl     db_descriptor	 bit (36) aligned;	/* temporary for database definition descriptor */
	dcl     user_descriptor	 bit (36) aligned;	/* temprorary for user proc descriptor */

	dcl     work_area		 area (sys_info$max_seg_size) based (wa_ptr); /* working area */
	dcl     value_for_db	 bit (rm_attr_info.bit_length) based (db_val_ptr);
						/* converted value, ready for tuple */
	dcl     value_for_user	 bit (rm_domain_info.user_bit_len) based (user_val_ptr);
						/* converted val., ready for encoding */
	dcl     bit36		 bit (36) based;	/* templates */
	dcl     1 varying		 based unaligned,	/* description of varying string - used for arg list building */
		2 length		 fixed bin (35),	/* length portion of varying string */
		2 string		 char (0);	/* string portion of varying string */

	dcl     1 descriptor	 aligned based,
	        (
		2 flag		 bit (1),
		2 type		 fixed bin (6) unsigned, /* data type */
		2 packed		 bit (1),		/* ON = unaligned */
		2 number_dims	 fixed bin (4) unsigned, /* non-zero for arrays */
		2 size		 fixed bin (24) unsigned
		)		 unaligned,	/* size of data */
		2 array_info	 (0 refer (descriptor.number_dims)),
		  3 lower_bound	 fixed bin (35),
		  3 upper_bound	 fixed bin (35),
		  3 multiplier	 fixed bin (35);

	dcl     1 encode_list	 aligned,		/* arg list for encode proc. */
		2 nargs		 fixed bin (17) unal init (6),
		2 code		 fixed bin (17) unal init (4),
		2 ndescs		 fixed bin (17) unal init (6),
		2 pad		 fixed bin (17) unal init (0),
		2 uv_ptr		 ptr,
		2 dbv_ptr		 ptr,
		2 code_ptr	 ptr,
		2 ud_ptr		 ptr,
		2 dbd_ptr		 ptr,
		2 coded_ptr	 ptr;

	dcl     1 check_list	 aligned,		/* arg list for integ. check proc. */
		2 nargs		 fixed bin (17) unal init (4),
		2 code		 fixed bin (17) unal init (4),
		2 ndescs		 fixed bin (17) unal init (4),
		2 pad		 fixed bin (17) unal init (0),
		2 val_ptr		 ptr,
		2 af_ptr		 ptr,
		2 vd_ptr		 ptr,
		2 afd_ptr		 ptr;

	dcl     FB35_DESC		 bit (36) aligned int static options (constant)
				 init ("100000100000000000000000000000100011"b);
	dcl /* interesting data types */
	        (
	        FIXED_DEC		 init (9),
	        CMPLX_FLT_DEC	 init (12),
	        VAR_BIT		 init (20),
	        CHAR		 init (21),
	        VAR_CHAR		 init (22),
	        PACKED_FIXED_DEC	 init (41),
	        PACKED_CMPLX_FLT_DEC	 init (46)
	        )			 unsigned binary (6) static options (constant);

	dcl     (
	        sys_info$max_seg_size,
	        mdbm_error_$dom_integ
	        )			 ext fixed bin (35);
	dcl     mdbm_error_$incons_db	 external fixed bin (35);
	dcl     error_table_$improper_data_format external fixed bin (35);
	dcl     mdbm_error_$conversion_condition ext fixed bin (35);

	dcl     conversion		 condition;

	dcl     (addr, addrel, collate, verify, null) builtin;

	dcl     mu_convert		 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     valid_decimal_	 entry (fixed bin, ptr, fixed bin) returns (bit (1));
	declare area_ptr		 ptr;
     end mu_build_tuple;
