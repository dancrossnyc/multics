/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
mu_db_inconsistent: proc (db_model_ptr, name, message, undo_request);

/*
                   BEGIN_DESCRIPTION
   This procedure manipulates the consistancy bit in the  db  model.
   This  bit  is  used  to  indicate  that  the  database  is  in an
   inconsistent state due to  restructuring  operations.  Associated
   with  the  bit is a message structure that contains space for the
   name of the operation that set  the  bit,  text  for  a  more
   detailed explaination and an rmdb request that can be executed to
   undo the operation that set the bit and cause the database to become
   consistent.

   At the moment the message structure is allocated  only  once  for
   the  life  of  the  database. Allocation can not done during data
   base creation since there  are  already  existing  databases  out
   there  without  the  structure.  Allocation takes place the first
   time the message structure is needed, which is when the data base
   is set to inconsistent. Once the structure exists it is reused.

   There are three entry points:
   .	     inconsistent_set
   .	     inconsistent_reset
   .	     inconsistent_get_info


   The set entry point sets the database to inconsistent and  loads
   the message structure, allocating it if need be.
                   END_DESCRIPTION

   Known Bugs:

   Other Problems:

   .                       HISTORY
   82-04-15 Davids: Written

   82-04-27 Davids: added the undo_request element to the message structure
   and changed the interfaces to accept and return the value for it.

   82-04-30  R. Lackey : added the set entry point

   82-07-01 Roger Lackey : changed entry point names to include inconsistent_
   for binding

   83-02-24 Davids: explicitly declared variables that were declared by
   context or implication. Deleted declarations to variables that were
   never referenced.
*/
%page;
/* PARAMETERS */

	dcl     db_model_ptr	 ptr;		/* (input) points to the data model for the data base */
	dcl     name		 char (*);	/* (input) name of request associated with the message
						   truncated to 32 chars */
	dcl     message		 char (*);	/* (input) explainatory message, truncated to 200 chars */
	dcl     undo_request	 char (*);	/* (input) rmdb request that can be used to undo the request that
						   .       is setting the database inconsistent, executing it
						   .       will cause the database to be consistent again */
	dcl     O_value		 bit (1);		/* (output) true ==> db is inconsistent */
	dcl     O_name		 char (*);	/* (output) same as name */
	dcl     O_message		 char (*);	/* (output) same as message */
	dcl     O_undo_request	 char (*);	/* (output) same as undo_request */

/* CONSTANTS */

	dcl     NULL_OFFSET		 bit (18) unal init ("111111111111111111"b);

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     fixed		 builtin;
	dcl     length		 builtin;
	dcl     pointer		 builtin;
	dcl     rel		 builtin;

/* EXTERNAL */

	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

/* INCLUDES */
%page;
%include mdbm_db_model;

inconsistent_set: entry (db_model_ptr, name, message, undo_request);

/* set entry point */

	if db_model_ptr -> db_model.inconsistent_message_offset = NULL_OFFSET
	then do;
		message_str_len = 500;
		allocate message_str set (message_str_ptr) in (db_model_ptr -> db_model.dbm_area);
	     end;
	else message_str_ptr = pointer (db_model_ptr, db_model_ptr -> db_model.inconsistent_message_offset);

	message_str.len = length (message);
	message_str.text = message;
	message_str.name = name;
	message_str.undo_request = undo_request;
	message_str.mbz = "0"b;

	db_model_ptr -> db_model.inconsistent_message_offset = rel (message_str_ptr);
	db_model_ptr -> db_model.consistant = "0"b;

	return;

inconsistent_reset: entry (db_model_ptr);

	if db_model_ptr -> db_model.inconsistent_message_offset ^= NULL_OFFSET
	then do;
		message_str_ptr = pointer (db_model_ptr, db_model_ptr -> db_model.inconsistent_message_offset);
		message_str.len = 0;
		message_str.text = "";
		message_str.name = "";
		message_str.undo_request = "";
	     end;

	db_model_ptr -> db_model.consistant = "1"b;
	return;

inconsistent_get_info: entry (db_model_ptr, O_value, O_name, O_message, O_undo_request);

	O_value = ^db_model_ptr -> db_model.consistant;

	if db_model_ptr -> db_model.inconsistent_message_offset = NULL_OFFSET
	then do;
		O_name = "";
		O_message = "";
		O_undo_request = "";
	     end;
	else do;
		message_str_ptr = pointer (db_model_ptr, db_model_ptr -> db_model.inconsistent_message_offset);
		O_name = message_str.name;
		O_message = message_str.text;
		O_undo_request = message_str.undo_request;
	     end;

	return;

     end mu_db_inconsistent;
