/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_get_data: get_data: proc (a_rmri_ptr, a_area_ptr, a_simple_typed_vector_ptr, a_ml_ptr, code);

/* NOTES:

   This procedure moves  attribute  values  from  a  tuple  to  user
   arguments.  Any  required conversions are performed, and decoding
   takes place if specified.  The  $item  entry  performs  the  same
   function for a single (possibly mis-aligned) attribute value.


   HISTORY:

   78-11-01 J. A. Weeldreyer: Initially written.

   79-07-11 Al Kepner: Modified to change  the  length  field  of  a
   varying char attribute from a bit length to a char length.

   80-02-01 Jim Gray  :  Modified  to  make  use  of  an  extensible
   non-freeing area.


   80-05-08  Davids:  modified  assignments  of  tuple_num_atts  and
   tuple_nvar_atts  to  take  values from rm_rel_info.model_num_attr
   and  model_nvar_atts   rather   than   rm_rel_info.num_attr   and
   nvar_atts.  This  was  to  fix  a problem with submodels were the
   submodel view did not contain a varying string attribute and  the
   model did.

   80-08-12 Davids: length of attributes  for  moves  not  requiring
   conversion          are         now         calculated         by
   mu_data_length$get_data_bit_length. this fixes a bug caused  when
   decoded declaration and data mode declaration are not the same.

   81-05-06 Rickie E. Brinegar: Modified  to  use  cu_$generate_call
   and the changed resultant model.

   81-06-01 Jim Gray : changed to use new resultant structure.

   81-10-17 Davids: added calls to add_bit_offset_ to calculate  the
   value   of  item_ptr  in  mu_get_data  because  the  old  way  of
   overlaying a bit array and taking the addr  of  some  element  in
   that  array  ran into a pl1 bug when the offset was large and the
   compiler had all the prefixes set.

   82-08-20 D. Woodka : removed references to rm_attr_info.bit_offset
   and rm_rel_info.max_data_len for DMS conversion

   82-09-03 Mike Kubicar : Converted to use simple_typed_vectors.

   83-04-07 Davids: Deleted declaration to unused variable fb35u.

   84-07-19 Hergert: Initialized icode to 0 in get_item just in case
   users decode proc doesnt handle code properly.

   84-09-05 Thanh Nguyen: Added code to check for needing of data type
   conversion, in case of the user descriptor (if the decode_declare present)
   is different with the actual target user data type. (TR # 16198)

   85-01-15 Thanh Nguyen: Modified code to call mrds_space_allocate function
   to allocate value_for_db or value_for_user instead of using the standard
   PL/I allocate, so we would not have the overflow of area (in case of the
   caller is mu_retrieve).  Added mrds_space_allocate.incl.pl1.
*/


	area_ptr = a_area_ptr;
	rmri_ptr = a_rmri_ptr;			/* move into local storage */
	simple_typed_vector_ptr = a_simple_typed_vector_ptr;
	ml_ptr = a_ml_ptr;

	do i = 1 to move_list.nitems;			/* loop for each value to be moved */

	     raip = rm_rel_info.attr_ptrs (move_list.item.attr_index (i));

	     item_ptr = simple_typed_vector.dimension (raip ->
		rm_attr_info.defn_order).value_ptr;

	     call get_item (raip, item_ptr,		/* call proc. to do the work */
		move_list.item.user_ptr (i), move_list.item.user_desc_ptr (i));

	end;					/* attr. value loop */

	code = 0;

exit:
	return;

item: get_data_item: entry
	(a_raip, b_area_ptr, a_item_ptr, a_targ_ptr, a_desc_ptr, code);

/* Entry to pass only one item back to the user.  THis item may be mis-aligned. */

	dcl     (a_raip,
	        b_area_ptr,
	        a_item_ptr,
	        a_desc_ptr,
	        a_targ_ptr)		 ptr;


	area_ptr = b_area_ptr;
	call get_item (a_raip, a_item_ptr, a_targ_ptr, a_desc_ptr);

	code = 0;

	return;

get_item: proc (aip, ip, target_data_ptr, target_desc_ptr);

/* Procedure to process a single value */

	dcl     (aip,
	        ip,
	        target_data_ptr,
	        target_desc_ptr)	 ptr;
						/* just make sure code = 0 in case user's decode proc doesn't handle code properly. */
	icode = 0;
	rai_ptr = aip;				/* attribute info */
	rdi_ptr = rm_attr_info.domain_ptr;		/* domain info */

	if ^rm_domain_info.decd_proc then do;		/* if no decoding */

		if target_desc_ptr -> bit36 = rm_domain_info.db_desc &
		     target_desc_ptr -> bit36 = rm_domain_info.user_desc
						/* if no conversion */
		then do;
			len = mu_data_length$get_data_bit_length ((rm_domain_info.user_desc));
			target_data_ptr -> target_str = ip -> src_str;
		     end;

		else do;				/* if must convert */
			call align_item;		/* move into temp & set db_val_ptr */

			call mu_convert (db_val_ptr,	/* convert from db data type */
			     addr (rm_domain_info.db_desc),
			     target_data_ptr,	/* to data type that user wants */
			     target_desc_ptr,
			     icode);
			if icode ^= 0 then call error (icode);
		     end;				/* if must convert */

	     end;					/* if no decoding */

	else do;					/* if must decode */

		call align_item;			/* move into temp & set db_val_ptr */

		if rm_domain_info.user_bit_len > 2376 then do; /* if wont fit into work space */
			user_val_ptr = mrds_space_allocate (area_ptr, (rm_domain_info.user_bit_len + 35) / 36);
			if user_val_ptr = null then
			     call error (error_table_$noalloc);
			ub_alloc = "1"b;
		     end;
		else user_val_ptr = addr (wksp2);	/* if will fit */

		value_for_user = "0"b;		/* clear out space */

		decode_list.uv_ptr = user_val_ptr;	/* user val is output from decode */
		user_descriptor = rm_domain_info.user_desc; /* move descriptor into local storage */
		decode_list.ud_ptr = addr (user_descriptor);

		if decode_list.ud_ptr -> descriptor.type = VAR_CHAR /* varying strings are strange */
		     | decode_list.ud_ptr -> descriptor.type = VAR_BIT then
		     decode_list.uv_ptr = addr (decode_list.uv_ptr -> varying.string); /* point to string, not length */

		decode_list.dbv_ptr = db_val_ptr;	/* db value is input to decode */
		db_descriptor = rm_domain_info.db_desc; /* move into local storage */
		decode_list.dbd_ptr = addr (db_descriptor); /* and get into arg list */

		if decode_list.dbd_ptr -> descriptor.type = VAR_CHAR /* more strange strings */
		     | decode_list.dbd_ptr -> descriptor.type = VAR_BIT then
		     decode_list.dbv_ptr = addr (decode_list.dbv_ptr -> varying.string);

		decode_list.code_ptr = addr (icode);	/* return code */
		decode_list.coded_ptr = addr (FB35_DESC);

/* 81-05-06 Rickie E. Brinegar: Start changed code ************************* */

		call cu_$generate_call /* call decode_proc(value_for_user, value_for_db, icode) */
		     (rm_domain_info.decd_proc_entry, addr (decode_list));

/* 81-05-06 Rickie E. Brinegar: End changed code *************************** */

		if icode ^= 0 then call error (icode);

		if target_desc_ptr -> bit36 = rm_domain_info.user_desc /* if no conversion required */
		then do;
			len = mu_data_length$get_data_bit_length ((rm_domain_info.user_desc));
			target_data_ptr -> target_str = user_val_ptr -> src_str;
		     end;

		else do;
			call mu_convert (user_val_ptr,/* convert decoded output as appropriate */
			     addr (rm_domain_info.user_desc),
			     target_data_ptr,
			     target_desc_ptr,
			     icode);
			if icode ^= 0 then call error (icode);
		     end;				/* convertion required */

	     end;					/* if needed to decode */

align_item: proc;

/* Procedure to move source item to a properly aligned position */

	dcl     src_str		 bit (len) based (ip);

	if rm_attr_info.bit_length > 2376 then do;	/* if wont fit in work space */
		db_val_ptr = mrds_space_allocate (area_ptr, (rm_attr_info.bit_length + 35) / 36);
		if db_val_ptr = null then call error (error_table_$noalloc);
		db_alloc = "1"b;
	     end;
	else db_val_ptr = addr (wksp1);		/* if will fit */
	value_for_db = "0"b;			/* clear out space */

	len = rm_attr_info.bit_length;

	value_for_db = src_str;

     end align_item;

     end get_item;
%page;
%include mrds_space_allocate;
%page;
error: proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;

%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_move_list;
%page;
%include vu_typed_vector;
%page;
	dcl /* input parameters */
	        a_rmri_ptr		 ptr,
	        a_area_ptr		 ptr,
	        a_simple_typed_vector_ptr ptr,		/* points to tuple structure */
	        a_ml_ptr		 ptr;		/* points to move_list structure for user's output */

	dcl     (raip,				/* temp attr info pointer */
	        item_ptr,				/* pointer to value */
	        db_val_ptr,				/* pointer to converted value, ready for tuple */
	        user_val_ptr)	 ptr;		/* pointer to converted value, prior to encoding */

	dcl     (wksp1,				/* work spaces to minimize allocations */
	        wksp2)		 (33) fixed bin (71);

	dcl     (db_alloc,				/* to remember allocations */
	        ub_alloc)		 bit (1) aligned;

	dcl     target_str		 bit (len) based;
	dcl     src_str		 bit (len) based;
	dcl     len		 fixed bin;	/* length of value */
	dcl     i			 fixed bin;	/* internal indexes */

	dcl     (code,				/* Output: status code */
	        icode)		 fixed bin (35);	/* internal status code */
	dcl     db_descriptor	 bit (36) aligned;	/* describes the way db wants data */
	dcl     user_descriptor	 bit (36) aligned;	/* describes the way user proc wants data */

	dcl     work_area		 area (sys_info$max_seg_size) based (area_ptr); /* working area */
	dcl     value_for_db	 bit (rm_attr_info.bit_length) based (db_val_ptr); /* converted value, ready for tuple */
	dcl     value_for_user	 bit (rm_domain_info.user_bit_len) based (user_val_ptr); /* converted val., ready for encoding */
	dcl     bit36		 bit (36) based;	/* templates */

	dcl     1 varying		 based unaligned,	/* description of varying string */
		2 length		 fixed bin (35),	/* length word */
		2 string		 char (0);	/* string starts here */

	dcl     1 descriptor	 aligned based,
	        ( 2 flag		 bit (1),
		2 type		 fixed bin (6) unsigned, /* data type */
		2 packed		 bit (1),		/* ON = unaligned */
		2 number_dims	 fixed bin (4) unsigned, /* non-zero for arrays */
		2 size		 fixed bin (24) unsigned) unaligned, /* size of data */
		2 array_info	 (0 refer (descriptor.number_dims)),
		  3 lower_bound	 fixed bin (35),
		  3 upper_bound	 fixed bin (35),
		  3 multiplier	 fixed bin (35);

	dcl     1 decode_list	 aligned,		/* arg list for decode proc. */
		2 nargs		 fixed bin (17) unal init (6),
		2 code		 fixed bin (17) unal init (4),
		2 ndescs		 fixed bin (17) unal init (6),
		2 pad		 fixed bin (17) unal init (0),
		2 dbv_ptr		 ptr,
		2 uv_ptr		 ptr,
		2 code_ptr	 ptr,
		2 dbd_ptr		 ptr,
		2 ud_ptr		 ptr,
		2 coded_ptr	 ptr;

	dcl     FB35_DESC		 bit (36) aligned int static options (constant)
				 init ("100000100000000000000000000000100011"b);
	dcl     VAR_BIT		 fixed bin (5) int static options (constant) init (20);
	dcl     VAR_CHAR		 fixed bin (5) int static options (constant) init (22);

	dcl     sys_info$max_seg_size	 ext fixed bin (35);
	dcl     error_table_$noalloc	 fixed bin (35) ext static;
	dcl     (addr,
	        null)		 builtin;


	dcl     mu_convert		 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_data_length$get_data_bit_length entry (bit (36)) returns (fixed bin (35));

/* 81-05-06 Rickie E. Brinegar: Start changed code ************************* */

	dcl     cu_$generate_call	 entry (entry, ptr);

/* 81-05-06 Rickie E. Brinegar: End changed code *************************** */

	declare area_ptr		 ptr;
     end mu_get_data;
