/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


mu_concurrency_control: procedure (); return;		/* not a valid entry */


/* HISTORY

   Originally written by Friesen in august 1977
   Modified by oris friesen in Aug. 1978 for new version data bases
   Modified by M. Pierret 17 April 1980 to remove priority_ofs and wakeup_ofs.
   (now dbc.obsolete)

   80-12-09 Jim Gray : completely rewritten to
   1) propoerly init the dbc structure including pad areas.
   2) change the interface into an abstract data type
   with 4 entries for use by AMDB, CMDB, DMDBS, and QMDB/OPEN.
   3) As part of the above change, implement r-u scope mode
   to r-s-m-d scope mode conversion.
   4) change the module name from mu_init_dbc to mu_concurrency_control
   5) provide more detailed documentation of module and it's enviornment

   80-12-24 Jim Gray : modified get_latest_dbc routine to return access violation
   message instead of version problem message, when null access on db control segment.

   80-12-24 Jim Gray : modified re_init_dbc to give detailed sub_err_ message
   if user does not have "w" access to control segment.

   81-01-15 Jim Gray : modified to fix loophole, where user could have two
   segments, one named dbc, the other db.control, or one segment with both names,
   and thus attempt to run both MR8 and MR9 mrds on the same database concurrenty,
   but without any real concurrent access protection.

   81-01-16 Jim Gray : moved access violation check to get_any_dbc so other
   than open gets sub_err_ details. Also added no control segment found
   sub_err_ to that routine, to compliment, 2 control segment sub_err_
   already there done as part of the last change fixing the loophole.

   81-01-16 Jim Gray : changed logic for handling bad bit count of control
   segment upon open. Now a bad version or a bit count less than the minimum strucutre
   size causes a message indicating that amdb -rs must be done on the db before using.

   81-01-27 Jim Gray : added setting of needed access for DBA types, if get access violation.

   83-06-13 Davids: Cleaned up declarations.
*/

/* DESCRIPTION:

   this routine handles initialization
   of the database control segment for several different needs.
   There are four entries:
   reset_control_segment is called by adjust_mrds_db when -reset is specified,
   in order to completely re-init the dbc structures,
   and possibly update the version of these, plus change the segments name.
   This is a DBA priviledged action.
   create_control_segment is called by create_mrds_db to create the
   control segment under the database at database creation time.
   open_control_segment is called by quiesce_mrds_db and dsl_$open, to get
   a pointer to the dbc, if it is the latest version dbc,
   otherwise a remedial action message is issued.
   get_control_segment is called by display_mrds_db_status to get any version
   dbc segment pointer, looking for latest version first,
   in order to be able to display it's info.

*/

/* PARAMETERS:

   db_path - - (input) char(168), the absolute pathname of the database.

   dbc_ptr_param - - (input/output) ptr, this is an output parameter for all entries
   except reset_control_segment, in which case it is an input parameter.
   This is a pointer the database control segment.

   bit_count - - (output) fixed bin(24), the bit count of the database control segment.

   icode - - (output) fixed bin(35), the error status encoding,
   0 unless an error occured.

*/

create_control_segment: entry (db_path, dbc_ptr_param, bit_count, icode);

/* entry to create the database control segment */

	call make_control_seg ();
	dbc_ptr_param = dbc_ptr;
	return;


get_control_segment: entry (db_path, dbc_ptr_param, bit_count, icode);

/* entry to get a pointer to the database control segment,
   using any of the known names of versions for that segment,
   latest version names are tried first, only display or conversion routines should use this entry */

	call get_any_dbc ();
	dbc_ptr_param = dbc_ptr;
	return;


open_control_segment: entry (db_path, dbc_ptr_param, bit_count, icode);

/* entry to look only for the  latest version segment
   name for the datbase control segment. If not found, a message
   is issued, indicating AMDB -rs must be done to update the dbc version.
   This is the normal entry point to be used by any routine requiring the dbc ptr */

	call get_latest_dbc ();
	dbc_ptr_param = dbc_ptr;
	return;


reset_control_segment: entry (db_path, dbc_ptr_param, bit_count, icode);

/* entry to re-initialize the dbc. This may involve changing versions
   of the dbc structures and the control segment name. */

	dbc_ptr = dbc_ptr_param;
	call re_init_dbc ();
	return;

make_control_seg: procedure ();

/* this routine initially creates the database control segment
   in the  fashion determined by the latest version */

	call hcs_$make_seg (db_path, rtrim (mrds_data_$control_segment_name), "", 10, dbc_ptr, icode);
	if dbc_ptr = null () then ;
	else do;
		icode = 0;

		call init_dbc ();			/* fill in the dbc structures */
	     end;

     end;

re_init_dbc: procedure ();

/* this routine re-initializes the database control segment
   structures to the latest versions initial  values. */


/* zero out the control segment, then set it's bit count to 0 */

	call hcs_$truncate_seg (dbc_ptr, 0, icode);
	if icode = error_table_$moderr then do;
		entryname = mrds_data_$control_segment_name; /* default, in case can't get real name being used */
		call hcs_$fs_get_path_name (dbc_ptr, dir_name, ldn, entryname, discard);
		call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^a^a^a^a",
		     "Insufficient access to re-initialize the database control segment """, rtrim (db_path),
		     ">", rtrim (entryname), """.");
	     end;
	else if icode = 0 then do;
		call hcs_$set_bc_seg (dbc_ptr, 0, icode);

		if icode = 0 then do;

/* initialize dbc values */

			call init_dbc ();

			if icode = 0 then do;


/* change the name of the database control segment, so that r-u scope mode
   users will not concurrently be using a r-s-m-d scope mode version dbc. */

				call hcs_$chname_seg (dbc_ptr, "dbc", rtrim (mrds_data_$control_segment_name), icode);
				if icode = error_table_$segnamedup then
				     icode = 0;	/* ignore error, if name already changed */
			     end;

		     end;

	     end;
     end;

init_dbc: procedure ();

/* this routine sets the inital values in the dbc structure,
   and then sets the control segments bit count */

	dbc.version = VERSION_NBR;
	dbc.dtd_mrds = 0;				/* has never been dumped -- is a new data base */
	dbc.flags = OFF;
	dbc.quiesce_lock = OFF;
	dbc.wakeup_waiters = 0;
	dbc.user_counts = 0;
	dbc.open_lock = OFF;
	dbc.scope_lock = OFF;
	dbc.sa_size = sys_info$max_seg_size - fixed (rel (addr (dbc.static_area))) + 1;
	dbc.pad2 = OFF;
	dbc.offsets = NULL_OFS;
	dbc.offsets.obsolete = OFF;
	dbc.pad3 = OFF;
	dbc.static_area = empty ();

	bit_count = 36 * fixed (rel (addr (dbc.static_area)));
	call hcs_$set_bc_seg (dbc_ptr, bit_count, icode);

     end;

get_latest_dbc: procedure ();

/* this routine attempts to get a pointer to the
   latest version database control segment.
   If an unsupported version is detected, an error is issued.
   If an older or bad version is detected, a message is issued
   that indicates that AMDB -rs must be done to update the version. */

	old_version, cant_get_version, bad_version = OFF;

	call get_any_dbc ();

	if icode = mrds_error_$version_not_supported | dbc_ptr = null () then ;
	else do;

		call hcs_$fs_get_path_name (dbc_ptr, dir_name, ldn, entryname, icode);

		if icode ^= 0 then
		     cant_get_version = ON;
		else if entryname = "dbc" then
		     old_version = ON;
		else if dbc.version < 4 | dbc.version > 5 |
			bit_count < 36 * fixed (rel (addr (dbc.static_area))) then /* minimum allowable bit count */
		     bad_version = ON;
		else if dbc.version = 4 then
		     old_version = ON;

		if cant_get_version then do;

/* unable to get segment name, to determine if this is a proper
   new version control segment for open to accept */

			call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^p^a^a^a",
			     "Unable to get the segment name for the pointer """, dbc_ptr,
			     """ to the database control segment under the database """,
			     db_path, """.");

		     end;
		else if bad_version then do;

/* unknown dbc version, give up */

			icode = mrds_error_$version_not_supported;
			call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a ^d^a ^d^/^a ^a ^a",
			     "The database control segment has an unknown version =", dbc.version,
			     ", or a bad bit count =", bit_count,
			     """adjust_mrds_db", db_path, "-reset"" must be run before it can be used.");
		     end;
		else if old_version then do;
			debug_sw = OFF;
			if ^debug_sw then do;

/* old version dbc's must be updated to the latest version
   before we can let the suer set any scopes or open */

				icode = mrds_error_$version_not_supported;
				call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^/^a^/^a ^a ^a",
				     "The version of the control segment has changed,",
				     "to support r-m-a(s)-d instead of r-u scope modes.",
				     """adjust_mrds_db", db_path,
				     "-reset"" must be run before it can be used.");
			     end;
			else do;			/* unused test code for auto conversion of dbc version */

/* this code is for test purposes only and is not mormally executed.
   it causes r-u dbc's to be converted to r-s-m-d dbc's.
   concurrent r-u and r-s-m-d users can cause the dbc to become incosistent */

				call set_lock_$lock (dbc.scope_lock, (mrds_data_$lock_wait_time), icode);
				if icode = error_table_$invalid_lock_reset | icode = error_table_$locked_by_this_process then
				     icode = 0;	/* ignore these errors */

				if icode = error_table_$no_w_permission then
				     call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^a^a^a^a",
					"No permission to set scope lock on """, rtrim (db_path),
					">", rtrim (mrds_data_$control_segment_name), """.");
				else if icode ^= 0 then do;
					dbc.trouble_switch = ON; /* something messed up, lock against further opens */
				     end;
				else do;

/* convert fil_list structures from ru to rusmd codes usage */

					call process_user_list (pointer (dbc_ptr, dbc.active_users_ofs), "1"b);
					call process_user_list (pointer (dbc_ptr, dbc.waiting_users_ofs), "0"b);
					dbc.version = 5; /* now converted to version 5 dbc */
				     end;

				if icode = 0 then
				     call set_lock_$unlock (dbc.scope_lock, icode);

			     end;
		     end;


	     end;

     end;

get_any_dbc: procedure ();

/* routine to get a pointer to any version of the database control segment,
   starting with latest versions first. */

	call hcs_$initiate_count (db_path, rtrim (mrds_data_$control_segment_name), "",
	     bit_count, 0, first_dbc_ptr, icode);

	if icode = error_table_$moderr then do;

/* set access for the user and retry, if he is a DBA */

		call mrds_dm_authorization$set_needed_access (rtrim (db_path), icode); /* fails if user not DBA */
		if icode ^= 0 then
		     icode = error_table_$moderr;
		else call hcs_$initiate_count (db_path, rtrim (mrds_data_$control_segment_name), "",
			bit_count, 0, first_dbc_ptr, icode);

	     end;

	if icode = error_table_$moderr then

/* null access on database control segment */

	     call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^a^a^a^a",
		"Unable to get pointer to the database control segment """, rtrim (db_path),
		">", rtrim (mrds_data_$control_segment_name), """.");

	else do;

		call hcs_$initiate_count (db_path, "dbc", "", temp_bit_count, 0, second_dbc_ptr, temp_code);

/* on an access violation, set access for the user and retry, if he is a DBA */

		if temp_code = error_table_$moderr then do;
			call mrds_dm_authorization$set_needed_access (rtrim (db_path), temp_code);
			if temp_code ^= 0 then
			     temp_code = error_table_$moderr;
			else call hcs_$initiate_count (db_path, "dbc", "", temp_bit_count, 0, second_dbc_ptr, temp_code);
		     end;


/* check for foul deeds by the user, only debug tool users may pass */

		if first_dbc_ptr ^= null () & second_dbc_ptr ^= null () & /* too many control segments */
		     substr (db_mu_concurrency_control, 1, 1) ^= "1"b then do;
			dbc_ptr = null ();
			icode = mrds_error_$version_not_supported;
			call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^/^a^a^a^/^a",
			     "Unable to determine the database control segment version,",
			     "because both a ""dbc"" and a ""db.control"" segment were found under the database """,
			     db_path, """",
			     "either the old or new version may be present, not both!");
		     end;
		else do;

			if first_dbc_ptr = null () & second_dbc_ptr = null () then do; /* not enough control segments */
				dbc_ptr = null ();
				call sub_err_ (icode, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				     "Neither a ""dbc"", nor a ""db.control"" control segment was found under the database """,
				     db_path, """.");
			     end;
			else if first_dbc_ptr = null () then do; /* old control segment - dbc */
				dbc_ptr = second_dbc_ptr;
				bit_count = temp_bit_count;
			     end;
			else dbc_ptr = first_dbc_ptr; /* new control segment - db.control */

		     end;

		if dbc_ptr ^= null () then
		     icode = 0;			/* ignore name_dup errors */

	     end;


	declare (first_dbc_ptr, second_dbc_ptr) ptr;	/* temporary copies of dbc pointer */

     end;

process_user_list: procedure (in_ul_ptr, active_list);

/* routine to trace through the linked user list */

	ul_ptr = in_ul_ptr;
	do while (rel (ul_ptr) ^= NULL_OFS);

	     call process_file_list (pointer (dbc_ptr, user_list.fil_list_ofs));
	     if active_list then
		ul_ptr = pointer (dbc_ptr, user_list.next_active_ofs);
	     else ul_ptr = pointer (dbc_ptr, user_list.next_waiting_ofs);

	end;

	declare in_ul_ptr		 ptr;		/* input to start of list */
	declare active_list		 bit (1);		/* on => active, off => waiting list of users */


     end;

process_file_list: procedure (in_fl_ptr);

/* routine to trace a list of file list structures  */

	fl_ptr = in_fl_ptr;
	do while (rel (fl_ptr) ^= NULL_OFS);

	     if fil_list.permits.update then do;
		     fil_list.permits.append_tuple = ON;
		     fil_list.permits.delete_tuple = ON;
		     fil_list.permits.modify_attr = ON;
		end;
	     else do;
		     fil_list.permits.append_tuple = OFF;
		     fil_list.permits.delete_tuple = OFF;
		     fil_list.permits.modify_attr = OFF;
		end;


	     if fil_list.prevents.update then do;
		     fil_list.prevents.append_tuple = ON;
		     fil_list.prevents.delete_tuple = ON;
		     fil_list.prevents.modify_attr = ON;
		end;
	     else do;
		     fil_list.prevents.append_tuple = OFF;
		     fil_list.prevents.delete_tuple = OFF;
		     fil_list.prevents.modify_attr = OFF;
		end;

	     fl_ptr = pointer (dbc_ptr, fil_list.next_ofs);

	end;

	declare in_fl_ptr		 ptr;		/* input to start of list */

     end;

	declare sub_err_		 entry options (variable); /* reports errors */
	declare hcs_$chname_seg	 entry (ptr, char (*), char (*), fixed bin (35)); /* changes seg name */
	declare error_table_$segnamedup fixed bin (35) ext; /* entry not found */
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin (18), fixed bin (35));

	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

	dcl     (addr, empty, fixed, null, pointer, rel, rtrim, substr) builtin;
	declare set_lock_$unlock	 entry (bit (36) aligned, fixed bin (35));
	declare set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	declare error_table_$invalid_lock_reset fixed bin (35) ext;
	declare error_table_$locked_by_this_process fixed bin (35) ext;
	declare mrds_data_$lock_wait_time fixed bin (35) ext;
	declare mrds_data_$control_segment_name char (32) ext; /* name of control segment */
	declare debug_sw		 bit (1);		/* for testing purposes */
	declare continue		 char (1) init ("c"); /* dont stop after printing error */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unsued */
	declare caller_name		 char (32) init ("mu_concurrency_control"); /* name of calling routine */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* bad dbc version */
	declare db_path		 char (168);	/* input database path */
	declare temp_code		 fixed bin (35);	/* unused */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare old_version		 bit (1);		/* on => need to convert */
	declare bad_version		 bit (1);		/* on => unsupported version */
	declare hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)); /* makes segmetn */
	declare hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24),
				 fixed bin (2), ptr, fixed bin (35)); /* gets seg ptr and bit count */
	declare error_table_$moderr	 fixed bin (35) ext;/* incorrect access on entry */
	declare error_table_$no_w_permission fixed bin (35) ext; /* no "w" acl */
	declare dir_name		 char (168);	/* name of dbc dir */
	declare discard		 fixed bin (35);	/* unused error code */
	declare ldn		 fixed bin;	/* length of dbc dir name */
	declare entryname		 char (32);	/* either dbc or db.control */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35)); /* gets name from ptr */
	declare temp_bit_count	 fixed bin (24);	/* temporary for get dbc seg bit count */
	declare cant_get_version	 bit (1);		/* on => couldnt get segment name from dbc_ptr */
	declare mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* sets access for dba types */
	dcl     dbc_ptr_param	 ptr parm;	/* ptr to the data base control segment (input) */

	dcl     bit_count		 fixed bin (24);	/* bit count of dbc segment */

	dcl     icode		 fixed bin (35);	/* returrn code */

%include mdbm_dbc;

%include mdbm_users;

%include mrds_debug_names;
     end;

