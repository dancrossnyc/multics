/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_store: store: proc;				/* This entry point is not used */
	return;

/*
		      BEGIN_DESCRIPTION

   This is the MDBM utility routine which will store a tuple into the database,
   given information on the relation into which the tuple is to be stored and
   a list of user-supplied values.

		       END_DESCRIPTION



*/
%page;
/* HISTORY:

   Initially written by JA Weeldreyer -- June, 1978.
   6-sep-79 Davids: Modified to accommodate a change to the calling sequence of mu_encd_key
   16-oct-79 Davids: Modified to correctly calculate the lengths of varying strings
   28-nov-79 Davids: Removed calculation of length (in bits) of varying strings
   so that length word will consistantly contain the number of bits or characters
   (depending on data type) throught out MRDS (i hope)
   Modified by Jim Gray - - Feb. 1980, to make use of extensible non-freeing area.
   8-may-80  Davids:  modified  assignments  of  tuple_num_atts  and
   tuple_nvar_atts  to  take  values from rm_rel_info.model_num_attr
   and  model_nvar_atts   rather   than   rm_rel_info.num_attr   and
   nvar_atts.  This  was  to  fix  a problem with submodels were the
   submodel view did not contain a varying string attribute and  the
   model did.
   Modified by Jim Gray - - June 1980, to add first_time_flag to direct entry,
   so that definition of large temp rels could reuse space already allocated.

   80-11-04 Davids: removed the code checking for update  access  on
   each  attribute  in  the relation since the current definition of
   store  requires  only  append  (s_perm  =  "1"b)  access  on  the
   relation.   also   removed   the   include   file   reference  to
   mdbm_rm_db_info.incl.pl1 and declared  rdbi_ptr  (which  was  the
   only thing used from that include file) as an automatic pointer.

   80-11-07  Davids:  Changed  reference  to  rm_rel_info.s_perm  to
   rm_rel_info.append_tuple_perm   to  correspond  to  include  file
   changes.

   80-11-21 Davids: For the secured database case, added a check  to
   be sure that r_perm is set for all attributes of the primary key.
   This was needed to prevent a situation where  tuples  are  stored
   until  the  dup_key  error  is  returned - at which time database
   security has been broken.

   81-03-27 Jim Gray : added dbcb_ptr parameter in place of dbi parameter
   for each entry, as part of getting rid of mus_ptr_man module.
   Combined mu_sec_store into this module.

   81-04-30 Jim Gray : commented out calls to mus_add_btup
   and mus_add_lks

   81-05-01 Jim Gray : removed calls to mu_hash_key and mu_build_parl
   by commenting them out, since they are only used by blocked files
   and foreign keys, which are not implemented.


   81-05-29 Jim Gray : changed to use new form of resultant structure.
   Also deleted unused code.

   82-09-07 Mike Kubicar : converted to use the tuple structure.  Note that
   this routine should not have to access the internal structure of a tuple
   since it merely passes tuples between routines via pointer.  In this phase
   of the conversion (of tuples) some code which references the tuple
   structure has been left in.  This is because the code will be deleted soon
   as it manipulates key lists.  Key list code will be deleted when the
   module is entirely converted.

   82-09-24 D. Woodka : Modified for DMS conversion to call mu_cursor_manager
   and relation_manager put_tuple. 

   83-03-30 Davids: Eliminated variables that were not used (in some cases they
   were set but had no impact on the rest of the execution): direct,
   allocation_flag, temp_flag, TEMP, ncbs, change_bits, cbp, saved_cbp, and i.
   Removed the references to the mdbm_change_bits mdbm_rm_domain_info
   mdbm_descriptor mdbm_index and mdbm_rm_db_info include files.
   Moved the call to build_tuple to before the direct entry so the direct flag
   indicating the type of entry was not needed (build_tuple is not called if
   the module is called via the direct entry). Note that the first_time_flag
   and area_ptr in the calling sequence of the direct entry are no longer
   needed. Explicitly declared the builtins addr, fixed, and rel which were
   declared by implication.

   83-04-04 Davids: Eliminated the ready_mode, view and security level
   checking (moved them into mrds_dsl_store). Also eliminated the variables
   i, mdbm_error_$inc_rel_acc, mdbm_error_$inc_attr_acc, UPDATE, LOAD,
   SCOPE_UPDATE, mdbm_error_$inc_ready_mode, mdbm_error_$view_prevent, null
   and the mdbm_rm_attr_info include file which are no longer needed.

   83-04-08 Mike Kubicar : Removed unused code (mu_store main entry point).
   Also unused parameters from mu_store_$direct.  Added check of error
   code after call to mu_cursor_manager_$get and made sure the tuple
   variable index used in the call is zero.

   83-05-23 Mike Kubicar : Changed relation manager calling sequences.

*/
%page;
direct: store_direct: entry (dbcb_ptr, rmri_ptr, simple_typed_vector_ptr, code);

/* get cursor for call to relation_manager put_tuple */

	tuple_variable_index = 0;			/* tvi is always zero for any store */
	call mu_cursor_manager_$get (dbcb.dbi, rmri_ptr, tuple_variable_index,
	     rm_rel_info.rel_id, dbcb.relmgr_entries.create_cursor,
	     dbcb.relmgr_entries.open, dbcb.cursor_ptrs_storage_ptr,
	     dbcb.cursor_storage_area_ptr, cursor_ptr, code);
	if code ^= 0
	then call error (code);
	call dbcb.relmgr_entries.put_tuple (cursor_ptr,
	     simple_typed_vector_ptr, tuple_id, code);
	if code ^= 0 then call error (code);


	code = 0;
exit:
	return;
%page;
error: proc (cd);

/* Error procedure, sets code, cleans up, and exits */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;

	dcl     cursor_ptr		 ptr;		/* ptr for cursor to use for put_tuple */
	dcl     code		 fixed bin (35);	/* Output: status code */
	dcl     tuple_id		 bit (36) aligned;	/* tuple id for stored tuple */
	dcl     tuple_variable_index	 fixed bin (35);	/* for call to cursor_manager */
	dcl     simple_typed_vector_ptr ptr;		/* vector to be stored */
	dcl     (addr, fixed, rel)	 builtin;
	dcl     mu_cursor_manager_$get entry (fixed bin (35), ptr, fixed bin (35), bit (36) aligned, entry, entry, ptr, ptr,
				 ptr, fixed bin (35));
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
%page;
%include mdbm_rm_rel_info;
%page;
%include mrds_dbcb;
%page;
     end mu_store;
