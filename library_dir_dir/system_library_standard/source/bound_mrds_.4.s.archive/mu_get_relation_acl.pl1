/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mu_get_relation_acl: get_relation_acl: procedure (database_path, model_relation_name,
	DBA, read_acl, write_acl, error_code);

/* DESCRIPTION:

   given an absoulte database path, and the model name of a relation,
   plus whether the user is a database administrator,
   this routine will return the Multics acl's the user
   has to the relation data multi-segment file (vfile_).

*/

/* PARAMERERS:

   database_path - - (input) char(*), the absolute pathname of the database
   with suffix (as can be obtained from rm_db_info.db_path)

   model_relation_name - - (input) char(*), the name of the relation as it
   appears in the model, not a submodel name

   DBA - - (input) bit(1), if this bit is on, it indicates the user
   is a database administrator, and that if he does not
   have "rw" acl to the relation, he should get it.

   read_acl - - (output) bit(1), this bit is on if the user
   had read ("r") acl on the given relation data

   write_acl - - (output) bit(1), this bit is on if the user
   has write ("w") acl on the given relation data

   error_code - - (output) fixed bin(35), the error status encoding.

*/

/* HISTORY:

   Originally written by Jim Gray - - March 1981

   83-05-31 Davids: Modified to use object_type_$get_user_access_modes so that
   ring 2 dms files can be handled ok.

   83-07-05 Mike Kubicar : Still problems with object_type.  I had to make
   a distinction between vfile msfs and dmfile msfs.

   83-09-30 Mike Kubicar : Upgraded to use the again new versions of
   fs_util_ (object_type_).  Hopefully the distinction between vfile msfs
   and dmfiles has gone away.

*/
%page;
/* initialize */

	error_code = 0;
	need_to_set_acls = "0"b;
	mode = "0"b;

	call fs_util_$get_user_access_modes (database_path,
	     model_relation_name, (""), (-1), mode, unused, error_code);
	if error_code = 0 then do;
		if DBA & /* check for a DBA without rw acl */
		     addr (mode) -> access_string ^= "101"b
		then need_to_set_acls = "1"b;
		else need_to_set_acls = "0"b;
	     end;
	else if error_code = error_table_$incorrect_access | /* null on msf, "s" or greator on db dir */
		error_code = error_table_$no_info then do; /* null on both db dir and msf */
		if DBA then
		     need_to_set_acls = "1"b;
		else do;				/* user not a DBA, and not sufficient access */

/* assume that we failed because there was not access of "s"
   on the msf "dir", and no access on component 0,
   thus the user has "n" access to the msf */

			mode = "0"b;		/* set null access */
			error_code = 0;
			need_to_set_acls = "0"b;

		     end;

	     end;

	if need_to_set_acls then do;

		call mrds_dm_authorization$set_needed_access
		     (database_path, error_code);	/* fails if user not dba */
		if error_code = 0 then
		     mode = "101"b;			/* set rw access */
	     end;

/* set the users acl bits for returning */

	read_acl = addr (mode) -> access.read;
	write_acl = addr (mode) -> access.write;

	return;
%page;
	dcl     addr		 builtin;
	dcl     mode		 bit (36) aligned;
	dcl     unused		 bit (36) aligned;
	dcl     access_string	 based bit (3) unal;
	dcl     1 access		 based unal,	/* overlay for getting access bits */
		2 read		 bit (1) unal,
		2 exec		 bit (1) unal,
		2 write		 bit (1) unal;
	dcl     DBA		 bit (1);		/* on =. user is a database administorator */
	dcl     database_path	 char (*);	/* absolute pathname of the database dir */
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     error_table_$incorrect_access fixed bin (35) ext; /* null on msf, "s" or more on db dir */
	dcl     error_table_$no_info	 fixed bin (35) ext;/* null on both msf and db dir */
	dcl     fs_util_$get_user_access_modes entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				 bit (36) aligned, fixed bin (35));
	dcl     model_relation_name	 char (*);	/* name of the relation data msf in the model */
	dcl     mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* gives DBA all acls he needs */
	dcl     need_to_set_acls	 bit (1);		/* on => set rw acls for a DBA */
	dcl     read_acl		 bit (1);		/* on => user has "r" acl to relation data */
	dcl     write_acl		 bit (1);		/* on => user has "w" acl to relation data */

     end;
