/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-07-01 by Thanh
     Nguyen. (see mrds #137)
                                                   END HISTORY COMMENTS */

/* HISTORY:
   Originally written by Jim Gray - - September 1979
   5-jun-80 Davids: Modified to correctly calculate the number of arguments   when called with the dl_scope_all entry.
   Modified by Jim Gray - - June 1980, to detect dl_scope on unshared openings.

   80-12-10 Jim Gray : removed conversion or r-s-m-d modes to r-u type scope modes
   so that complete r-s-m-d modes could be implemented.
   Also changed displayed names of modes as follows:
   retrieve now = read_attr, store/update now = append_tuple
   delete now = delete_tuple, modify now = modify_attr
   This was done to agree with security acl modes.
   Also added use of mrds_new_scope_modes and mrds_opening_modes_ include files.

   80-12-11 Jim Gray : Changed error reproting on detection of invalid combination
   of modes into a sum when the set_scope_all entry was used.

   81-01-29 Jim Gray : removed references to mdbm_data_$current_version,
   using a constant instead, to allow for future db version expansion.
   Previously, since no relation name was available, a null ptr was referenced.

   81-06-01 Jim Gray : removed all code tranlating from a file
   to relation interface, as part of changing to use new resultant model
   structures.

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)

   85-07-01 Thanh Nguyen: Added code to set the dbcb.scopes_changed on when
   ever scopes had been successfully modified.  The mrds_dsl_gen_srch_prog 
   and mrds_dsl_optimize will reset at the time they build a new search_vars
   structure for a new select_expression.  So we can detect that the scopes
   had been changed in -another.
*/

mrds_dsl_set_scope: procedure (); return;		/* not valid entry */

/* DESCRIPTION:
   this routine was written to allow upward compatible calls to
   dsl_$set_scope, dsl_$set_scope_all, dsl_$dl_scope, and dsl_$dl_scope_all.
   if this routine is called by a user with an old version database,
   the calls are simply passed on(via generate_call) to the old version programs.
   if called by the new version database user, the _all entries,
   simply call the corresponding fscope_all entries to take the
   correct scope action on all files, and thus all relations.
   if the non "_all" entries are called, then a new argument list is built
   that contains the file names of files containing the given relations,
   the permit/prevent operations are set according, and the appropriate
   fscope entry point is called. note: relation modify/delete are converted to file update scope.  */

/* PARAMETERS:
   database_index - - (input) fixed bin(35) aligned, the opening index returned
   from the call to dsl_$open for the users database.

   relation_name - - (input) char nonvarying, only for the non "_all" entries,
   the name of the relation on which to set/delete scope.
   any number of relation_name/permits/prevents triples may be present(up to number of relation).
   when this argument is missing(in "_all" entries) all relations are affected.

   permits - - (input) fixed bin (17), the operations to be permitted on the relations,
   it is a sum of the codes desired, where the allowed codes are:
   1(retrieve), 2(store/update), 4(delete), 8(modify)

   prevents - - (input) fixed bin (17), the operations which others(processes)
   are to prevented from doing. a sum of the desired codes, as above.

   wait_time - - (input) fixed bin (35), optional time to wait in seconds, on set_scope entries,
   if the request can not be honored immediately.

   error_code - - (output) fixed bin(35), the error status encoding, 0 unless an error occured

   sub_error_ - - (output) condition, signaled upon occurence of an error to provide more info  */

/* NOTE ON USE OF DSL_$DL_SCOPE WITH NEW VERSION DATABASES:

   The use of dsl_$dl_scope with blocked files,
   when not all relations in the file are specified in the argument list,
   will not be allowed for the following reasons:

   1) this routine is primarily a transition tool to get old version
   application programs to run without change on new version databases
   by converting set/dl_scope calls into set/dl_fscope (file scope) calls.
   Since relations get default unblocked files when processed
   by create_mrds_db, and there is only one relation per file,
   no problems are encountered in the use of this tool.
   However, the following example illustrates a problem with "partial dl_scope",
   on blocked files.

   EXAMPLE: file_1 has two relations rel_1 and rel_2 with current scope settings of:
   rel_1 has retrieve and update scopes, rel_2 has only retrieve scope.
   a call to this module to delete both retrieve and update
   scope on rel_1 would be transformed into a call to dl_fscope on file_1.
   this would result in null scopes for both rel_1 and rel_2!!
   attempts to access or delete scope on rel_2 would result in an error.

   this is a problem with the algorithm used in this module, i.e. deleting
   the maximum, not minimum scope on a file.

   2) to correct the problem noted in 1 above would require changes to the
   rm_rel_array to maintain per process scopes in affect per relation,
   thus requiring recompilation of many modules, when ideally the
   transition tool should be limited to the logic in this module.

   3) most important, if users are going to change to the new blocked file
   structure for their databases, then they should be making use of the
   set/dl_fscope entries, and not this transition tool, which may eventually
   not be supported.


   Therefore the following RESTRICTIONS ON THE USE OF DL_SCOPE are enforced:

   1) no restrictions on the user of dl_scope_all.

   2) no restrictions on unblocked files.

   3) when blocked files are in use, dl_scope may be successfully be used
   only when all relations in the file have their complete scopes given
   in the call, i.e. "partial deletes are not allowed"

   in terms of the given example this means, that to remove update permission
   from rel_1, the call would contain the arguments:

   rel_1 update null rel_2 update null

   for relation/permit/prevent triples, even though rel_2 has no update permission
   in the sense of the old scope mechanism.

*/

set_scope: entry ();

/* entry called to set scope on a single relation, or list of relations */

	SET_SCOPE_ENTRY = ON;
	SCOPE_ALL_ENTRY = OFF;
	min_args = 5;				/* args = db_index, rel_name, permits, prevents, error_code
						   any number of rel_name/permits/prevents triples allowed
						   wait time argument is optional */

	goto common_scope_routine;			/* use goto to save external argument list for cu_ call */




set_scope_all: entry ();

/* entry called to set scope on all relations, without naming them */

	SET_SCOPE_ENTRY = ON;
	SCOPE_ALL_ENTRY = ON;
	min_args = 4;				/* args = db_index, permits, prevents, error_code
						   wait time argument is optional */

	goto common_scope_routine;






dl_scope: entry ();

/* entry called to delete scope on a single relation, or list of relations */

	SET_SCOPE_ENTRY = OFF;
	SCOPE_ALL_ENTRY = OFF;
	min_args = 5;				/* args = db_index, rel_name, permits, prevents, error_code
						   any number of rel_name/permits/prevents triples allowed
						   wait time argument not allowed */

	goto common_scope_routine;




dl_scope_all: entry ();

/* entry called to delete scope on all relations without naming them */

	SET_SCOPE_ENTRY = OFF;
	SCOPE_ALL_ENTRY = ON;
	min_args = 2;				/* args = db_index, error_code */

	goto common_scope_routine;

common_scope_routine: ;

/* logic common to all entry points for setting/deleting scope,
   on all relations, or one at a time, as specified by arguments */

	error_code = 0;				/* initialize */

/* get the external procedures argument list, before going to an internal routine */

	call cu_$arg_list_ptr (al_ptr);		/* get argument list */

/* determine user's database version number */

	call get_version_of_caller ();

/* now make the appropriate call -- to set_scope for old versions, to set_fscope for new_versions */

	call pass_call_to_correct_version ();

/* now set the users error code, if neccessary */

	if error_code = 0 then
	     if dbcb_ptr ^= null then
		dbcb.scopes_changed = "1"b;
	     else;
	else if desc_index = 0 & ^(SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY) then ; /* can't get descriptor, or dl_scope_all */
	else do;
		desc_ptr = arg_list.arg_des_ptr (desc_index + nargs);
		if ^(SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY) & /* ignore for dl_scope_all */
		     desc_ptr -> descriptor_ovrly ^= fixed_bin_35_descr then ; /* don't assign unknown data type */
		else if arg_list.arg_des_ptr (nargs) -> error_code_ovrly ^= 0 then ; /* set by called version */
		else arg_list.arg_des_ptr (nargs) -> error_code_ovrly = error_code;
	     end;

	return;

get_version_of_caller: procedure ();

/* first get the callers argument list, and check for minimum arguments,
   before finding version of database from resultant model via the database index */

	if SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY then /* dl_scope_all called */
	     nargs = arg_list.arg_count / 2;		/* not an options (variable) entry */
	else nargs = arg_list.desc_count / 2;		/* = number of args if called options(variable) */
	desc_index = 0;				/* in case of early error */

	if nargs < min_args then do;
		error_code = error_table_$wrong_no_of_args;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a ^d ^a",
		     "The number of arguments =", nargs,
		     "was less than the minimum of", min_args,
		     "or the entry was not declared ""options (variable)"".");
	     end;
	else do;

/* get the offset of descriptors in the argument list */

		if SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY then ; /* no descriptors for dl_scope_all */
		else if arg_list.code = SPECIAL then
		     desc_index = nargs + 1;
		else desc_index = nargs;
		num_ptrs = desc_index + nargs;

/* check for a valid error code argument, and then initialize it */

		desc_ptr = arg_list.arg_des_ptr (desc_index + nargs);
		if ^(SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY) & /* can't check descriptor on dl_scope_all */
		     desc_ptr -> descriptor_ovrly ^= fixed_bin_35_descr then do;
			error_code = error_table_$bad_arg;
			call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^a",
			     "The error code(last) argument",
			     "was not declared ""fixed binary (35) aligned"".");
		     end;
		else do;

			arg_list.arg_des_ptr (nargs) -> error_code_ovrly = 0; /* initialize users error code */

/* check for old or new version database call to set_scope
   by getting the version out of the resultant model built
   at open time, via the given database index */

			num_dims = 0;

			if SCOPE_ALL_ENTRY & ^SET_SCOPE_ENTRY then /* can't check descriptor on dl_scope_all */
			     desc_ptr = addr (fixed_bin_35_descr); /* => don't convert, use arg directly */
			else desc_ptr = arg_list.arg_des_ptr (desc_index + 1);

			call mu_convert_parameter$convert_input_parameter (arg_list.arg_des_ptr (1), desc_ptr, db_index_ptr,
			     addr (fixed_bin_35_descr), addr (local_area), error_code);
			if error_code ^= 0 then do;
				call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
				     "The database index argument could not be converted to ""fixed binary (35) aligned"".");
			     end;
			else do;

/* check for valid database index, in order to get resultant model pointer */

				call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);

				if dbcb_ptr = null () then do;
					error_code = mrds_error_$invalid_db_index;
					call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a",
					     "The database index =", db_index,
					     "does not refer to a database that is currently open by this process.");
				     end;

			     end;

		     end;

	     end;

     end;

pass_call_to_correct_version: procedure ();

/* call old set_scope, for old version database calls,
   and the new set_fscope for new version database calls,
   after converting relation names into files names,
   with duplicates removed, and max permissions granted,
   and max prevents allowed that will not conflict. */

	if error_code ^= 0 then ;
	else do;

		new_al_ptr = al_ptr;

		exclusive_opening = (fixed (dbcb.open_mode) = EXCLUSIVE_RETRIEVAL |
		     fixed (dbcb.open_mode) = EXCLUSIVE_UPDATE);
		if exclusive_opening then error_code = mrds_error_$unshared_opening;

		if SCOPE_ALL_ENTRY then do;


			if SET_SCOPE_ENTRY then
			     entry_name = mrds_dsl_set_fscope$set_fscope_all;
			else entry_name = mrds_dsl_dl_fscope$dl_fscope_all;
		     end;
		else do;

			if SET_SCOPE_ENTRY then
			     entry_name = mrds_dsl_set_fscope$set_fscope;
			else entry_name = mrds_dsl_dl_fscope$dl_fscope;
		     end;

		if error_code ^= 0 then ;
		else call cu_$generate_call (entry_name, new_al_ptr);
	     end;
     end;

	declare sub_err_		 entry options (variable); /* reports errors */
	declare caller_name		 char (20) init ("mrds_dsl_set_scope"); /* name of calling routine */
	declare continue		 char (1) init ("c"); /* don't stop after printing error msg */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare cu_$arg_list_ptr	 entry (ptr);	/* gets pointer to argument list */
	declare cu_$generate_call	 entry (entry, ptr);/* makes call to given entry with given arg list */
	declare SCOPE_ALL_ENTRY	 bit (1);		/* on => all entry called */
	declare entry_name		 entry options (variable) variable;
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets ptr for opening index */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* bad database indeex */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* bad subroutine argument */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* bad argument count */
	declare db_index		 fixed bin (35) based (db_index_ptr); /* database index */
	declare db_index_ptr	 ptr;		/* points to database index */
	declare nargs		 fixed bin;	/* number of input arguments */
	declare descriptor_ovrly	 bit (36) unal based; /* overlay for descriptor */
	declare fixed_bin_35_descr	 bit (36) init ("100000100000000000000000000000100011"b); /* descriptor for fixed bin(35) */
	declare desc_index		 fixed bin;	/* offset to start of descriptors in array */
	declare SPECIAL		 fixed bin init (8);/* special version code for arg list */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare new_al_ptr		 ptr;		/* points to converted argument list */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	declare (addr, rel, fixed, null, empty) builtin;
	declare min_args		 fixed bin;	/* either 4 or 5, for "all" or not entries */
	declare CHAR_NONVAR		 fixed bin init (21); /* nonvarying character string data type */
	declare fixed_bin_17_descr	 bit (36) init ("100000100000000000000000000000010001"b); /* descriptor for fixed bin (17) */
	declare char_nonvar_descr	 bit (36) init ("101010100000000000000000000000011110"b); /* char(30) nonvarying descriptor */
	declare NON_SPECIAL		 fixed bin init (4);/* no extra pointer in arg list */
	declare local_area		 area (100);	/* space for converting parameters */
	declare SET_SCOPE_ENTRY	 bit (1);		/* on => called to set, not delete, scope */
	declare error_code_ovrly	 fixed bin (35) based; /* overlay for assigning error code */
	declare mu_convert_parameter$convert_input_parameter entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35)); /* gets in needed type */

	declare (mrds_dsl_dl_fscope$dl_fscope,
	        mrds_dsl_dl_fscope$dl_fscope_all,
	        mrds_dsl_set_fscope$set_fscope,
	        mrds_dsl_set_fscope$set_fscope_all) entry options (variable); /* actual procedures that will be called */
	declare mrds_error_$unshared_opening fixed bin (35) ext; /* opened er or eu => dont allow delete scope */
	declare exclusive_opening	 bit (1);		/* on => er or eu open mode */

%include mdbm_descriptor;
%include mrds_new_scope_modes;
%include mrds_opening_modes_;
%include mrds_dbcb;
%include mdbm_arg_list;


     end;
