/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-08,Dupuis), install(88-08-01,MR12.2-1073):
     Written.
                                                   END HISTORY COMMENTS */


mrds_dsl_where_clause_:
    proc ();

/* NOTES:

   This  procedure  translates  the  -where  clause  within  a  DSL  selection
   expression  into  a  tabular form which cam be efficiently processed by the
   data base search procedures.


   INPUT CONDITIONS:

   dbcb_ptr points to a valid DBCB which contains the -range clause tables and
   the -select clause tables for the current selection expression.

   se_ptr points to the beginning of the selection expression.

   se_len is the number of characters in the selection expression.

   start_pos  is  the  index of the character immediately following the -where
   keyword.

   argp_ptr points to the next in a list of argument pointers for values to be
   pluffed into the selection expression.

   descp_ptr  points  to  the  next  in  the  list of corresponding descriptor
   pointers.

   num_args is the number of unused values.

   OUTPUT DEFINITIONS:

   output_pred_ptr - - (output) ptr, to root of predicate tree


   start_pos, argp_ptr, descp_ptr, and num_args are undefined.

   code = 0;  if there are no errors.

   code = mrds_error_$where_syntax; if a syntax error occurs within the -where
   clause.

   code  =  mrds_error_$unbal_parens;  if the number of right parentheses does
   not match the number of left parentheses.

   code = mrds_error_$op_stack_ovfl;  if the operator stack has overflowed.

   code = mrds_error_$node_stack_ovfl;  if the node stack has overflowed.

   code  =  mrds_error_$undef_quant;  if  a  tuple variable is neither free no
   quantified.

   code =  mrds_error_$empty where;  if nothing followed the -where keyword.

   code  =  mrds_error_$not_leaf;  if  a  "not"  operation  is specified for a
   constant or a tuple attribute.

   code  =  mrds_error_$bool_leaf;  if an "and" of "or" operation is specified
   for a constant of tuple attribute.

   code  =  mrds_error_$rel_node;  if a relational operator has been specified
   for a term or group of terms.

   code   =   mrds_error_$quant_stack_ovfl;   if   the  quantifier  stack  has
   overflowed.

   code = mrds_error_$mult_quant; if a quantification has been specified for a
   tuple  variable  within  the  scope of another quantification for that same
   variable.

   code   =   mrds_error_$quant_free_conflict;   if  quantification  has  been
   specified for a typle variable which also appears in the select list.

   code  =  mrds_error_$ill_constant_occur;  if  a  literal  constant has been
   designated for comparison to a term or group of terms.

   code  = mrds_error_$inv_literal_type; if a literal value is not a string or
   arithmetic data type.

   code = mrds_error_$lit_string_ovfl;  if the literal area has overflowed.

   code = something else;  if another error is detected by a subroutine.

   HISTORY:

   76-02-01 J. A. Weeldreyer : Initially written.

   76-11-01 J. A. Weeldreyer: Modified to incorporate inverted attributes.

   77-04-01 J. A. Weeldreyer: Modified to catch undetected illegal terms.

   77-04-02  J.  A.  Weeldreyer: Modified to handle expressions, and to remove
   explicit quantification.

   77-11-01  J.   A.   Weeldreyer:  Modified  to  eliminate  concept  of bound
   variables.

   78-01-01  J.   A.   Weeldreyer:  Modified  to zero pad bits when allocating
   literals.

   78-02-01  J.   A.   Weeldreyer: Modified to properly handle exprs.  without
   variables.

   78-07-01 J. A. Weeldreyer: Modified to fix error in cleanup handler.

   79-02-01 J. A. Weeldreyer for MR7.0.

   79-06-01 Al Kepner: Modified to use select_area.

   79-08-28  NSDavids:  Modified  to  skip evaluation of the expression if the
   pointer  to  the  expreession  structure  is  null (hopefully that means we
   already have the expression value.) Exactly how all the modules communicate
   i don't know - i doubt if god does !

   79-11-01  Jim  Gray  : Modified to make comparisons of attrs from different
   domains  a  warning  error  message,  instead  of  a fatal error.  However,
   comparison  of  different  data types is still a fatal error(see comment in
   code).

   80-02-01  Jim  Gray  :  Modified  to  add  area_ptr parameter, passed on to
   mrds_dsl_eval_expr.

   80-09-24  Davids: added to the code that processes ATTR type tokens a check
   to  be  sure the user has r_perm on the attribute.  if he/she does not then
   processing  can  stop  with  an  incorrect  access error.  Also removed the
   include files mrds_expressions and mdbm_arg_list which were not used.  this
   will  improved  performance  slightly  since variables were initialized but
   never  referenced.   also removed a couple of declared but never referenced
   variables  that  were  not  in  include  files.

   80-11-05  Jim Gray : Modified to "and" the mdbm_secured bit with the r_perm
   bit in rm_attr_info so that secure_mrds_db turns this check on.

   81-05-06  Rickie  E.   Brinegar:  Modified  to  make  use  of  the  changed
   rm_domain_info structure.

   81-05-19  Jim  Gray  :  changed comparing of different domain data types to
   non-fatal  error,  leaving  in  the  sub_err_ message, for test purposes in
   working  on  the  domain_compare  proposal,  that will allow any two domain
   types to be used in where clause comparisons.


   81-05-20  Jim  Gray  :  changed  where clause domain comparison error to be
   controlable by a mrds debug switch bit 1 for this routine.

   81-05-20  Rickie  E.   Brinegar: Added to the code to reset the encode proc
   switch in the li structure for each attribute.

   81-06-23 Jim Gray : changed where clause to not call optimize,
   but to return pred tree root pointer instead. translate now calls optimize
   whether there is a where clause or not.

   81-09-21 Davids: modified an if statement so that the index value
   was  checked  before  the  index  was used as a subscript into an
   array. This prevents a subscriptrange condition.

   83-02-28 Moberg: made comparsions of different domains illegal if one of
   the domains has an encode proc.  This is because the compare code has no
   idea of how to deal with this case.  When compare is fixed, this check
   should be removed, but until then this is better than giving the wrong
   answer.

   83-04-04 Davids increased the length of difference_mesg from 10 to 11
   to accommodate "encode proc" and prevent a stringsize condition from
   occuring. deleted declarations to so_ptr and descr_overly which were
   never referenced

   84-09-13 Hergert: added check for -compiled keyword and code to handle
   new substituion argmunet .X. Basically a call to mrds_dsl_make_literal$alloc
   instead of mrds_dsl_make_literal, because we dont have a value for .x.
   at this time.

   84-11-01 Hergert: added call to mu_print_error for reporting errors.

   85-08-22 Hergert Turned off error printing when in domain procs.
*/

build_attribute:
    entry (psi_ptr,dbcb_ptr, a_select_area_ptr, rel_index, ai_ptr, code);
						/* tuple attribute */

dcl     rel_index		 fixed bin;		/* relation index */
dcl     ai_ptr		 ptr;			/* attribute_info ptr */

        if parser_static_info.ns_ptr = null then do;
	   allocate ns in (parser_work_area);
	   top_node = 0;
        end;

        code = 0;
        select_area_ptr = a_select_area_ptr;
        if top_node >= mrds_data_$max_pred_nodes
        then					/* if node stack overflow */
	   call error (mrds_error_$node_stack_ovfl, LOUD, 0, WC_TYPE,
	        "Too many items have been specified in the where clause.");

        else do;					/* if still room,  build tuple attr. leaf */

	  allocate pred_leaf in (select_area);		/* make a place for it */
						/* Allocations in select_area are never freed.
						   This area is reinitialized
						   at the beginning of each new selection expression. */
	  rai_ptr = ai_ptr;				/* for rm_attr_info */
	  if rm_attr_info.mdbm_secured & ^(rm_attr_info.read_perm)
						/* if you don't have read access to an attribute */
	  then call error (mrds_error_$inc_attr_acc, LOUD, 0, AV_TYPE,
		  "You must have read permission on this attribute to use it as a qualifier."
		  );
						/* it shouldn't be in the where clause */

	  pred_leaf.id.var_id = "0"b || bit (rel_index);
						/* fill in data */
	  pred_leaf.id.attr_id = "0"b || bit (rm_attr_info.defn_order);
	  pred_leaf.type = LEAF;
	  pred_leaf.ai_ptr = ai_ptr;
	  pred_leaf.lit_offset,
	       pred_leaf.lit_length = 0;
	  pred_leaf.dummy,
	       pred_leaf.rslt_desc = "0"b;
	  pred_leaf.lit_desc_ptr,
	       pred_leaf.lit_ptr,
	       pred_leaf.expr_ptr,
	       pred_leaf.parent = null;

	  pred_leaf.data_type = ATTR;

	  top_node = top_node + 1;			/* increment node counter */
	  node_stack (top_node) = pl_ptr;		/* add leaf to node stack */
        end;					/* if room in stack */

        return;

build_expr:
    entry (psi_ptr,efd_ptr, a_select_area_ptr, code);

        if parser_static_info.ns_ptr = null then do;
	   allocate ns in (parser_work_area);
	   top_node = 0;
        end;

        code = 0;
        select_area_ptr = a_select_area_ptr;
        if top_node >= mrds_data_$max_pred_nodes
        then					/* if node stack overflow */
	   call error (mrds_error_$node_stack_ovfl, LOUD, 0, WC_TYPE,
	        "Too many items have been specified in the where clause.");


        allocate pred_leaf in (select_area);		/* Allocations in select_area are never freed.
						   This area is reinitialized
						   at the beginning of each new selection expression. */
        pred_leaf.id.var_id = "0"b || bit (exp_fun_data.var_index);
						/* fill in the pred_leaf */
        pred_leaf.type = LEAF;
        pred_leaf.data_type = EXPRES;
        pred_leaf.dummy,
	   pred_leaf.id.attr_id = "0"b;
        pred_leaf.lit_offset = exp_fun_data.loc_index;
        pred_leaf.lit_length = exp_fun_data.bit_length;
        pred_leaf.rslt_desc = exp_fun_data.descriptor;
        pred_leaf.lit_ptr = exp_fun_data.assn_ptr;
        pred_leaf.lit_desc_ptr = addr (pred_leaf.rslt_desc);
        pred_leaf.expr_ptr = exp_fun_data.ef_ptr;
        pred_leaf.ai_ptr,
	   pred_leaf.parent = null;

        top_node = top_node + 1;
        node_stack (top_node) = pl_ptr;			/* add to stack */


        return;

finish:
    entry (psi_ptr,output_pred_ptr);

        node_stack (top_node) -> pred_node.root = "1"b;	/* set root flag in top node */
        output_pred_ptr = node_stack (top_node);
        top_node = 0;

        return;

build_node:
    entry (psi_ptr,dbcb_ptr, a_select_area_ptr, operator_id, logical_node, not_node,
         code);

/* Build a node from the top one or two items in the node stack,
   Pop them from the stack and replace them with it. */

dcl     operator_id		 fixed bin;
dcl     logical_node	 bit (1) aligned;
dcl     not_node		 bit (1) aligned;

        code = 0;
        select_area_ptr = a_select_area_ptr;

        allocate pred_node in (select_area);		/* make place for new node */

        pred_node.parent = null;
        pred_node.type = NODE;
        pred_node.id.op_code = op_array (operator_id);
        pred_node.determined, pred_node.root = "0"b;

        if logical_node then do;			/* if node is logical operator & | ^ */

	  string (pred_node.id.lleaf_id),
	       string (pred_node.id.rleaf_id),
	       pred_node.term = "0"b;
	  pred_node.term_type = 0;

	  if not_node then do;

	      pred_node.rbr = null;			/* if only one branch, the right will be null */
	      pred_node.lbr = node_stack (top_node);	/* existing node placed under new one */

	      node_stack (top_node) -> pred_node.parent = pn_ptr;
						/* fill in parent pointer for child */

	  end;					/* if not_node */

	  else do;				/* node will have two branches & or | */

	      pred_node.lbr = node_stack (top_node - 1);
	      pred_node.rbr = node_stack (top_node);

	      node_stack (top_node) -> pred_node.parent,	/* let the bastards know who their father is */
		 node_stack (top_node - 1) -> pred_node.parent = pn_ptr;

	      top_node = top_node - 1;		/* replace top 2 nodes with new one */

	  end;					/* else & or | */
        end;					/* if logical_node */

        else do;					/* if not logical, must be relational = < > ...  */

	  pred_node.term = "1"b;

	  pred_node.lbr = node_stack (top_node - 1);
	  pred_node.rbr = node_stack (top_node);

	  pred_node.id.lleaf_id = pred_node.lbr -> pred_leaf.id;
	  pred_node.id.rleaf_id = pred_node.rbr -> pred_leaf.id;

	  pred_node.term_type =
	       term_type_array (node_stack (top_node - 1)
	       -> pred_leaf.data_type,
	       node_stack (top_node) -> pred_leaf.data_type);

	  if pred_node.term_type = 0
	  then					/* cant have a constant as first leaf for some odd reason */
	       call error (mrds_error_$ill_term, LOUD, 2, WC_TYPE,
		  "A constant is not allowed as the first item in a qualifier."
		  );

	  if pred_node.lbr -> pred_leaf.data_type = ATTR
	       & pred_node.rbr -> pred_leaf.data_type = ATTR
	  then					/* if both leaves are attrs */

	       if substr (db_mrds_dsl_where_clause, 1, 1)
						/* debug bit 1 on => give details of cross domain compare */
						/* cannot do cross domain compares when encode procs are involved */
		  | pred_node.rbr -> pred_leaf.ai_ptr ->
		  rm_attr_info.domain_ptr -> rm_domain_info.encd_proc
		  | pred_node.lbr -> pred_leaf.ai_ptr ->
		  rm_attr_info.domain_ptr -> rm_domain_info.encd_proc
	       then do;

/*  check for a comparison of non-comparable domains, a possible
   semantic oversight(e.g.  age char(6) shouldn't be compared to
   employee_num char(6) ) or an invalid use of comparisons, since
   comparing of different data types can not be allowed in general, due
   to the "non-conversion of keys" prior to compares.  (e.g.  a fixed
   dec(4) compared to a char(6) in a vfile_ key will not work) this is
   due to the use of select/exclude in the new architecture note: it
   would be possible to allow comparing of differing data types, if the
   types were not keys or secondary indexes or involved in a link.  this
   is because the vanilla attributes left would not(in the new
   architecture) be involved in any use of vfile_ keys, and thus not use
   key comparisons, instead mu_comapre_values would be invoked, which
   does conversions prior to comparing values.  it still
   limits(currently) the comparisons to 1) real to real, 2) complex to
   complex, 3) bit to bit, and 4) char to char data types, but at least
   a fixed bin (17) unal could be compared to a fixed dec(5) However
   allowing these comparisons would essentially be encouraging an
   inappropriate use of a relational interface, and been decided
   against.
*/

		 if pred_node.rbr -> pred_leaf.ai_ptr ->
		      rm_attr_info.domain_ptr -> rm_domain_info.name ^=
		      pred_node.lbr -> pred_leaf.ai_ptr ->
		      rm_attr_info.domain_ptr -> rm_domain_info.name
		 then do;

/* domains are different, check for different data types */

		     if pred_node.rbr -> pred_leaf.ai_ptr
			-> rm_attr_info.domain_ptr ->
			rm_domain_info.encd_proc
			| pred_node.lbr -> pred_leaf.ai_ptr
			-> rm_attr_info.domain_ptr ->
			rm_domain_info.encd_proc then do;
		         fatal_flag = "1"b;
		         difference_mesg = "encode proc";
		         reason_mesg =
			    """, comparing of different encode procs is not allowed."
			    ;
		     end;
		     else if pred_node.rbr -> pred_leaf.ai_ptr
			     -> rm_attr_info.domain_ptr ->
			     rm_domain_info.db_desc ^=
			     pred_node.lbr -> pred_leaf.ai_ptr
			     -> rm_attr_info.domain_ptr ->
			     rm_domain_info.db_desc then do;
			    fatal_flag = "1"b;
			    difference_mesg = "data type";
			    reason_mesg =
			         """, comparing of different data types is not allowed."
			         ;
			end;
			else do;
			    fatal_flag = "0"b;
			    difference_mesg = "domain";
			    reason_mesg =
			         """, this may be an invalid comparison of semantically different domains."
			         ;
			end;

/* issue the warning or error */

		     call sub_err_ (mrds_error_$diff_comp_domain,
			caller_name,
			continue, info_ptr, return_value,
			"^/^a^a^a ^a ^a^a^a^/",
			"The attribute """,
			pred_node.rbr -> pred_leaf.ai_ptr
			-> rm_attr_info.name,
			""" does not have the same", difference_mesg,
			"as the attribute """,
			pred_node.lbr -> pred_leaf.ai_ptr
			-> rm_attr_info.name,
			reason_mesg);


		     if fatal_flag
		     then
			call error (mrds_error_$diff_comp_domain,
			     ^LOUD, 0, "", "");

		 end;

	       end;


	  node_stack (top_node) -> pred_leaf.parent,
	       node_stack (top_node - 1) -> pred_leaf.parent = pn_ptr;
						/* set parent ptrs in leaves */

	  top_node = top_node - 1;			/* replace top two nodes with new node */

        end;					/* if relat. op. */

        node_stack (top_node) = pn_ptr;

        return;					/* build_node */

build_literal:
    entry (psi_ptr,dbcb_ptr, a_select_area_ptr, a_ptr, d_ptr, x_pred_leaf_ptr,
         dot_x_dot, code);

/* Build a pred leaf for any literal we have found. These are .V., .X.,
   and any actual literal constant found in the where clause */


dcl     (
        a_ptr,					/* Input -- pointer to literal value */
        d_ptr
        )			 ptr;			/* Input -- pointer to literal descriptor */
dcl     dot_x_dot		 bit (1) aligned;		/* literal is a .X. */

        if parser_static_info.ns_ptr = null then do;
	   allocate ns in (parser_work_area);
	   top_node = 0;
        end;

        code = 0;
        select_area_ptr = a_select_area_ptr;
        if top_node >= mrds_data_$max_pred_nodes		/* if about to overflow the node stack */
        then call error (mrds_error_$node_stack_ovfl, LOUD, 0, WC_TYPE,
	        "Too many items have been specified in the where clause.");

        if top_node < 1
        then call error (mrds_error_$ill_term, LOUD, 0, WC_TYPE, "");
						/* if no prev leaf */

        allocate pred_leaf in (select_area);		/* make place for leaf */
						/* Allocations in select_area are never freed.
						   This area is reinitialized
						   at the beginning of each new selection expression. */

        pred_leaf.expr_ptr,
	   pred_leaf.ai_ptr,
	   pred_leaf.parent = null;			/* fill it in */
        pred_leaf.type = LEAF;
        pred_leaf.data_type = CONST;
        pred_leaf.dummy,
	   pred_leaf.rslt_desc,
	   pred_leaf.id.var_id = "0"b;

        go to set_li (node_stack (top_node) -> pred_leaf.data_type);
set_li (1):					/* constant */
        call error (mrds_error_$ill_term, LOUD, 0, WC_TYPE,
	   "Two constants cannot be compared.");	/* cant compare two constants */

set_li (2):					/* db. attr. */
        rai_ptr = node_stack (top_node) -> pred_leaf.ai_ptr;/* pick up attr info ptr */
        rdi_ptr = rm_attr_info.domain_ptr;

        if rm_domain_info.encd_proc then do;
	  li.encd_entry = rm_domain_info.encd_proc_entry;
	  li.encd_proc = "1"b;
        end;
        else li.encd_proc = "0"b;

        li.encdd_ptr = addr (rm_domain_info.user_desc);
        li.litd_ptr = addr (rm_domain_info.db_desc);
        li.encd_blen = rm_domain_info.user_bit_len;
        li.lit_blen = rm_attr_info.bit_length;
        go to set_done;

set_li (3):					/* expr */
        li.encd_proc = "0"b;
        li.encdd_ptr = null;
        li.litd_ptr = node_stack (top_node) -> pred_leaf.lit_desc_ptr;
        li.encd_blen,
	   li.lit_blen = 0;

set_done:
        li.src_ptr = a_ptr;				/* fill in info for make_literal */
        li.srcd_ptr = d_ptr;

        if dot_x_dot then do;				/* since this is a .x. we need to save the place where we
						   have to plug in the  proper value when we finally know it later */
	  if x_pred_leaf_ptr = null then do;
	      allocate x_pred_leaf in (select_area);
	      x_pred_leaf.number_of_x = 0;
	  end;
	  x_pred_leaf.number_of_x = x_pred_leaf.number_of_x + 1;

	  call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li), code);
	  if code ^= 0 then call error (code, LOUD, 0, WC_TYPE, "");

	  x_pred_leaf.info.encode_bit_len (x_pred_leaf.number_of_x) =
	       li.encd_blen;
	  x_pred_leaf.info.lit_val_ptr (x_pred_leaf.number_of_x) =
	       li.lit_ptr;
	  x_pred_leaf.info.lit_val_len (x_pred_leaf.number_of_x) =
	       li.lit_blen;
	  x_pred_leaf.info.encode_in_desc_ptr (x_pred_leaf.number_of_x) =
	       li.encdd_ptr;
	  x_pred_leaf.info.encode_out_desc_ptr (x_pred_leaf.number_of_x) =
	       li.litd_ptr;
	  if li.encd_proc then do;
	      x_pred_leaf.info.encode_proc (x_pred_leaf.number_of_x) = "1"b;
	      x_pred_leaf.info.encode_entry (x_pred_leaf.number_of_x) =
		 li.encd_entry;
	  end;
	  else x_pred_leaf.info.encode_proc (x_pred_leaf.number_of_x) = "0"b;

        end;
        else do;
	  call mrds_dsl_make_literal (dbcb_ptr, addr (li), code);
	  if code ^= 0
	  then call error (code, ^LOUD, 0, WC_TYPE,
		  "The data type of the supplied constant can not be converted to that of the attribute."
		  );
        end;

        pred_leaf.lit_offset = li.lit_offset;
        pred_leaf.lit_length = li.lit_blen;
        pred_leaf.lit_ptr = li.lit_ptr;
        pred_leaf.lit_desc_ptr = li.litd_ptr;
        pred_leaf.id.attr_id = substr (bit (li.lit_offset), 18);

        top_node = top_node + 1;			/* add new leaf to stack */
        node_stack (top_node) = pl_ptr;

        return;					/* build_literal */

error:
    proc (cd, loud, stack_offset, error_type, message);

dcl     cd		 fixed bin (35);		/* standard error code */
dcl     loud		 bit (1) aligned;		/* OFF => dont print or signal error */
dcl     stack_offset	 fixed bin;		/* offset from ls_top of where token is in lex stack */
dcl     error_type		 char (*);
dcl     message		 char (*);

        se_info_ptr = dbcb.se_info_ptr;

        code = cd;

        se_info.loud = loud;
        se_info.error_type = error_type;
        se_info.token_start = 0;
        se_info.stack_offset = stack_offset;		/* save this for semantics */
        se_info.error_msg = message;
        se_info.error_info_supplied = "1"b;		/* so no one else handles it */

        goto exit;

    end error;

%include mrds_dbcb;
%page;
%include mrds_predicate_tree;
%page;
%include mrds_se_info;
%page;
%include mrds_exp_fun_data;
%page;
%include mrds_compiled_se_info;
%page;
%include mrds_lit_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mrds_range;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;
%page;
%include mrds_debug_names;

dcl     LOUD		 bit init ("1"b) aligned internal static
			 options (constant);
dcl     a_select_area_ptr	 ptr;
dcl     addr		 builtin;
dcl     bit		 builtin;
dcl     caller_name		 char (21) init ("mrds_dsl_where_clause")
			 int static options (constant);
dcl     code		 fixed bin (35);		/* Output -- return code */
dcl     continue		 char (1) init ("c") int static
			 options (constant);	/* don't stop after printing error */
dcl     difference_mesg	 char (11) varying;		/* either "domain" or "datr type" differs */
dcl     fatal_flag		 bit (1);			/* on => fatal non-comparable domain comparison attempt */
dcl     fixed		 builtin;
dcl     info_ptr		 ptr init (null ());	/* unused */
dcl     1 li		 aligned like lit_info;
dcl     mrds_data_$max_pred_nodes
			 fixed bin (35) external static;
dcl     mrds_dsl_make_literal	 entry (ptr, ptr, fixed bin (35));
dcl     mrds_dsl_make_literal$alloc
			 entry (ptr, ptr, fixed bin (35));
dcl     mrds_error_$diff_comp_domain
			 fixed bin (35) external static;
dcl     mrds_error_$ill_term	 fixed bin (35) external static;
dcl     mrds_error_$inc_attr_acc
			 fixed bin (35) external static;
dcl     mrds_error_$node_stack_ovfl
			 fixed bin (35) external static;
dcl    1 ns aligned based (parser_static_info.ns_ptr),
         2 top_node fixed bin(35),
         2 node_stack (mrds_data_$max_pred_nodes) ptr; /* stack of pending nodes;  */
dcl     null		 builtin;
dcl     op_array		 (1:55) bit (6) unal int static
			 options (constant) init (
			 "02"b3,			/* 1 and */
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3, "00"b3, "00"b3,
			 "00"b3, "00"b3, "00"b3, "00"b3,
			 "07"b3,			/* 42 lt */
			 "11"b3,			/* 43 le */
			 "00"b3, "00"b3, "00"b3, "00"b3,
			 "05"b3,			/* 48 eq */
			 "10"b3,			/* 49 gt */
			 "12"b3,			/* 50 ge */
			 "00"b3, "00"b3,
			 "04"b3,			/* 53 not */
			 "06"b3,			/* 54 ne */
			 "03"b3);			/* 55 or */
dcl     output_pred_ptr	 ptr;			/* to root of pred tree */
dcl     reason_mesg		 char (80) varying;		/* reason for warning/error */
dcl     rel		 builtin;
dcl     return_value	 fixed bin (35) init (0);	/* unused */
dcl     se_info_ptr		 ptr;
dcl     string		 builtin;
dcl     sub_err_		 entry options (variable);	/* reports specifics of subroutine error */
dcl     substr		 builtin;
dcl     sys_info$max_seg_size	 fixed bin (35) external static;
dcl     term_type_array	 (3, 3) fixed bin int static
			 options (constant) init (
			 0, 0, 0,			/* const <op> * */
			 1, 2, 2,			/* var <op> * */
			 1, 2, 2);		/* expr <op> * */

exit:
    end mrds_dsl_where_clause_;
