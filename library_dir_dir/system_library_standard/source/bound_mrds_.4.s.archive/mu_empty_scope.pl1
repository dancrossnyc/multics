/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_empty_scope:
empty_scope:
     procedure (dbc_p, scope_p, rdbi_p, delink);

/*
   DESCRIPTION:
   This procedure empties the scope definition of a user for the data base specified.
   ---------------------------------------------------------------------------
   HISTORY:
   Written in 1975
   Modified by O D Friesen in July 1977 to handle queued scope requests
   Changed from mrds_dsl_empty_scope to mu_empty_scope by O Friesen - Sept. 1978 -
   to handle file scopes
   Modified by M. Pierret 13 December 1979 to fix bug.  If database was opened twice
   by the same process, it was not gauranteed to empty the scope associated
   with the correct opening.  (Test for rdbi_ptr was incorrect)
   Modified by M. Pierret 14 January 1980 to force conflict check even if process id and db are same
   Modified by M. Pierret 22 July 1980 to make scope_info...flags = "0"b one assignment instead of four.
   --------------------------------------------------------------------------- */

	dcl     dbc_p		 ptr parm;
	dcl     scope_p		 ptr parm;
	dcl     rdbi_p		 ptr parm;
	dcl     rdbi_ptr		 ptr;
	dcl     i			 fixed bin;
	dcl     delink		 bit (1) unal;
	dcl     icode		 fixed bin (35);	/* return code */

	dcl     sys_info$max_seg_size	 fixed bin (35) ext;

	dcl     mu_de_queue_user	 entry (bit (1), bit (1), ptr, ptr, fixed bin (35));
	dcl     get_process_id_	 entry returns (bit (36));

	dcl     addr		 builtin;
	dcl     fixed		 builtin;
	dcl     null		 builtin;
	dcl     rel		 builtin;
	dcl     unspec		 builtin;


	dbc_ptr = dbc_p;				/* use local variable */
	scope_ptr = scope_p;
	rdbi_ptr = rdbi_p;
	num_filns = 0;

	do i = 1 to scope_info.nfiles;		/* iterate once for each file in data base */
	     scope_info.scope.flags (i) = "0"b;
	end;

	scope_info.active_scopes = 0;

/* Get rid of all traces of this user on any scope list */

	if delink
	then do;
		ul_ptr = convert (dbc_ptr, dbc.open_users_ofs);
		do while (ul_ptr ^= null);

		     if user_list.process_id = get_process_id_ ()
			& unspec (user_list.rdbi_bits) = unspec (rdbi_ptr)
		     then do;
			     call mu_de_queue_user (NO_DQ_OPEN, FREE_FIL_LIST, dbc_ptr, ul_ptr,
				icode);
			     ul_ptr = null;
			end;
		     else ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		end;

	     end;
	return;

convert:
     proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from "0"b to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the reultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */

	dcl     (null, ptr)		 builtin;

	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;

%include mdbm_dbc;

%include mdbm_users;

%include mdbm_scope_info;

     end mu_empty_scope;

