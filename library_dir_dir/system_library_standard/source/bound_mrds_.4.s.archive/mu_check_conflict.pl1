/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_check_conflict: check_conflict: procedure (set_or_del_scope, input_fil_list_ptr,
	permit_requests_ptr, prevent_requests_ptr, conflict_detail_ptr, conflict_sw);

/*
   DESCRIPTION:
   This procedure checks to see if there is a conflict between the scope
   being requested for a given file and the scope currently in force for
   each user of the file

   It also checks to see if the scope to be deleted is a proper subset
   of the scope which the user currently has in force

   ---------------------------------------------------------------------------

   HISTORY:

   Originally coded by Oris Friesen in July 1977
   Modified 24 July 1980 by M Pierret to make permit/prevent ops be 2 bits
   called bits instead of one for mod,del,store.. Also to do indexing on bits
   directly instead of whole structure, since garbage in fillers were causing
   incorrect results.

   80-12-10 Jim Gray : completely rewritten to
   1) change from r-u to r-s-m-d type scope modes
   2) provide a common include file for passing
   scope mode request parameter information
   3) add a parameter containg the details of
   exactly what conflict resulted in setting the switch.
   4) document the module more completely

*/

/* PARAMETERS:

   set_or_del_scope - - (input) bit (1), indicates whether this is a call
   from set_scope(ON), or delete_scope(OFF), so that the type
   of conflict to be checked for can be known.

   input_fil_list_ptr - - (input) ptr, points to the particular entry
   in the databsae control segment about which conflict is to be checked.
   This file/relation entry contains what scope other users already
   have had set.

   permit_requests_ptr - - (input) ptr, points to an overlay of the fixed bin
   encoding of the requested permit ops given to set/dl_scope.

   prevent_requests_ptr - - (input) ptr, same as above, but for prevent ops.

   conflict_detail_ptr - - (input) ptr, pointer to a structure which will be filled
   in giving the details of what the actual conflict was, that may have caused
   setting of the conflcit_sw.

   conflict_sw - - (output) bit(1), this will be ON if a scope conflict
   has been detected, else OFF.

*/

/* set up local variables and initialize */

	fl_ptr = input_fil_list_ptr;			/* use local variable */
	unspec (conflict_detail) = "0"b;		/* initialize */

	if set_or_del_scope = SET then do;

/* this is a set_scope request, thus we must make sure that the requested
   permit modes are not being prevented by some other user.
   Also, the requested prevent modes must not already be in effect by
   some other user on the relation/file under consideration */

		conflict_detail.permits.read_attr = (permit_requests.read_attr & fil_list.prevents.read_attr);
		conflict_detail.permits.modify_attr = (permit_requests.modify_attr & fil_list.prevents.modify_attr);
		conflict_detail.permits.append_tuple = (permit_requests.append_tuple & fil_list.prevents.append_tuple);
		conflict_detail.permits.delete_tuple = (permit_requests.delete_tuple & fil_list.prevents.delete_tuple);

		conflict_detail.prevents.read_attr = (prevent_requests.read_attr & fil_list.permits.read_attr);
		conflict_detail.prevents.modify_attr = (prevent_requests.modify_attr & fil_list.permits.modify_attr);
		conflict_detail.prevents.append_tuple = (prevent_requests.append_tuple & fil_list.permits.append_tuple);
		conflict_detail.prevents.delete_tuple = (prevent_requests.delete_tuple & fil_list.permits.delete_tuple);

	     end;

	else do;

/* the requested operation is a del_scope,
   thus we must check that the given permit and prevent modes
   given do in fact exist as already set on this file/relation */

		conflict_detail.permits.read_attr = (permit_requests.read_attr & ^(fil_list.permits.read_attr));
		conflict_detail.permits.modify_attr = (permit_requests.modify_attr & ^(fil_list.permits.modify_attr));
		conflict_detail.permits.append_tuple = (permit_requests.append_tuple & ^(fil_list.permits.append_tuple));
		conflict_detail.permits.delete_tuple = (permit_requests.delete_tuple & ^(fil_list.permits.delete_tuple));

		conflict_detail.prevents.read_attr = (prevent_requests.read_attr & ^(fil_list.prevents.read_attr));
		conflict_detail.prevents.modify_attr = (prevent_requests.modify_attr & ^(fil_list.prevents.modify_attr));
		conflict_detail.prevents.append_tuple = (prevent_requests.append_tuple & ^(fil_list.prevents.append_tuple));
		conflict_detail.prevents.delete_tuple = (prevent_requests.delete_tuple & ^(fil_list.prevents.delete_tuple));


	     end;

/* now we can set the conflict switch, since all the details are known */

	conflict_sw = ^((string (conflict_detail.permits) = "0"b) & (string (conflict_detail.prevents) = "0"b));

	return;


	dcl     input_fil_list_ptr	 ptr parm;

	dcl     null		 builtin;
	dcl     string		 builtin;
	dcl     unspec		 builtin;

	dcl     conflict_sw		 bit (1) unal;	/* ON => a conflict in scope requested has been detected */
	dcl     set_or_del_scope	 bit (1) unal;	/* ON => set_scope request; OFF => dl_scope request */

%include mdbm_users;
%include mdbm_scope_requests;

     end mu_check_conflict;

