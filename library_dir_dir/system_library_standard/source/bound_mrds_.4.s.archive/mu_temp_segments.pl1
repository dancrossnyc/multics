/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-14,Spitzer), approve(86-02-14,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     add free_temp_segments, get_temp_segment_path, cleanup_temp_dir
     and get_temp_segments_path entry points.
                                                   END HISTORY COMMENTS */


/* HISTORY:

   11/21/75	by S. Webber (Initial coding)
   11/15/76	by Larry Johnson to add arguments to list_temp_segments
   08/29/77	by Melanie Weaver to add entry list_segnos
   11/2/77	by Richard A. Barnes to add get_temp_segment_ & release_temp_segment_
   08/25/80         by E Brunelle, renamed mu* to be used by the MRDS system
   .                to allow 'temp' segments to be put into the mrds temp dir
   .		and to add entry  free_temp_segment_, which does not truncate
   .		temp seg, to improve performance
   10/20/80		by Jim Gray, to use mrds_dsl_resultant_storage$get_opening_temp_dir, so that
   .		proper temp dir for a databse opening is used,
   .		this required adding the database index parameter to
   .		"get" entries.
   10/20/80		by Jim Gray, to change naming conventions for entries
   .		to those used by mdbm_util_, this meant removing
   .		trailing "_", having an unused main procedure, and entry
   .		names as would be seen in calls to mdbm_util_$get_temp_segment, etc.
   10/20/80		by Jim Gray, to add delete_all_temp_segments
   .		entry, so that dsl_$close can remove temp segs from the temp dir.
   10/20/80		by Jim Gray, to remove code that wiped out the caller when releasing,
   .		so that the delete entry could work properly, since the logic
   .		for the "used" bit always masks anyone from seeing it anyway.
   10/21/80		by Jim Gray, to change ".temp." suffix of temp seg names
   .		to ".MRDS.", in order to identify mrds temp segs.
   10/21/80		by Jim Gray, to insure that only temp segs belonging
   .		to the current caller, of those that are free, are actually used by the caller.
   .		this avoids one database opening using temp segs in another
   .		opeings temp dir, which can be removed by that opening being closed.
   10/21/80		by Jim Gray, to add free_all_temp_segments entry,
   .		that will be used by mrds_dsl_delete_se instead of
   .		the entry release_all_temp_segments.
   .		this is a tradeoff of capacity against performance.

   81-09-16 Davids: changed the declarations of ename to  char  (32)
   from char (20) and block.name to char (32) from char (25) so that
   stringsize errors would not result when compiling with  a  prefix
   of stringsize.

   83-03-10 Davids: added the delete_temp_segment entry point.

   83-05-03 Davids: Modified so that the uid of the directory the temp seg is
   in is recorded in the block structure (dir_uid element). When a call to
   get a temp segment is made the uid of the opening_temp_dir is obtained and
   a free temp segment in the same temp dir is looked for. The old check that
   assigned a temp segment only if the caller names were equal was removed - 
   as long as the temp seg is currently free who cares who originally created
   it. For segments that are freed or released the caller name is changed to
   FREE so that a call to (free release delete)_all which acts only on the
   caller name will work correctly, i.e. not delete anything its not supposed
   to. Adding the dbi onto the caller name does not help since the database
   index is reused.

   83-05-04 Davids: Modified to set the a_code parameter to 0 in the
   delete_temp_segment entry so that if the segment is deleted it will return
   0 and not what ever happened to be input.
*/

mu_temp_segments:
     proc ();
	return;					/* not valid entry */

/* description and parameters on next page */
%page;
/* DESCRIPTION:

   this program was originally the system get_temp_segment_ manager routines.
   It was adopted for the MRDS subsystem utility interface.
   This allowed the storage for the temp segments to be other than the process dir.
   It added the entries free_temp_segment, and delete_all_temp_segments
   to the existing entries of get_temp_segments(s), release_temp_segment(s),
   list_temp_segments, list_segnos, release_all_temp_segments.
   The free_temp_segment(s) does not do truncation on the temp segment,
   in order to improve performance (the existing space is just reused)
   The delete_all_temp_segments is used by dsl_$close to actually remove
   all temp segments associated with a particular database opening.
   The segments are named {unique_name}.MRDS.[seg_no]
   The storage of the temp segments can be changed via the set_mrds_temp_dir command.
   Each database opening will have it's own independent set of temp segs,
   that are managed in a pool, unaffected by other db openings.
   Currently mrds_dsl_search uses the temp segments for tid_array storage
   in processing internal mrds intersection/union/difference of tuple id sets.

*/

/* Parameters */

	dcl     a_caller		 char (*);	/* INPUT: calling program identifier */
	dcl     a_path		 char (*);	/* INPUT: directory to create temp segs in */
	dcl     a_ptrs		 (*) ptr;		/* pointers to temp segments INPUT/OUTPUT */
	dcl     a_code		 fixed bin (35);	/* OUTPUT: error status encoding */
	declare a_db_index		 fixed bin (35);	/* INPUT: database opening index */
%page;
/* Automatic */

	dcl     new_block_ptr	 ptr;
	dcl     array_ptr		 ptr;
	declare temp_dir		 char (168);	/* path of mrds temp dir for this opening */
	dcl     j			 fixed bin;
	dcl     n_segs		 fixed bin;
	dcl     new_blocks		 fixed bin;
	dcl     i			 fixed bin;
	dcl     n_found		 fixed bin;
	declare n_deleted		 fixed bin;
	dcl     old_blocks		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     ename		 char (32);	/* CHANGE 81-09-16 */
	dcl     ename2		 char (32);
	dcl     segno		 (4) char (1) defined (ename2) pos (22);
	dcl     segment_number	 fixed bin;
	dcl     found_it		 bit (1);
	dcl     arg_count		 fixed bin;
	dcl     arg_list_ptr	 ptr;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin;
	dcl     release_called	 bit (1);
	dcl     containing_temp_dir	 char (168);
	dcl     entry_temp_dir	 char (32);
	dcl     temp_dir_uid	 bit (36);
	dcl     01 local_status	 like status_branch;

/* Based */

	dcl     ptrs		 (n_segs) ptr based (array_ptr);
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     1 octal_digits	 aligned based (addr (segment_number)),
		2 filler		 bit (24) unal,
		2 digit		 (4) bit (3) unal;
	dcl     1 new_block		 (new_blocks) aligned based (new_block_ptr) like block;
	dcl     1 block		 (n_blocks) aligned based (block_ptr),
		2 dir_uid		 bit (36),
		2 caller		 char (32),
		2 segptr		 ptr,
		2 name		 char (32),	/* CHANGE 81-09-16 */
		2 used		 bit (1);
	dcl     area		 area based (areap);

/* Static */

	dcl     block_ptr		 ptr static init (null);
	dcl     areap		 ptr static init (null);
	dcl     n_blocks		 fixed bin static init (0);

/* Builtin */

	dcl     (addr, baseno, bin, dim, max, null, substr) builtin;

/* Entries */

	dcl     hcs_$chname_seg	 entry (ptr, char (*), char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry returns (ptr);
	dcl     hcs_$delentry_seg	 entry (ptr, fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     unique_bits_	 entry returns (bit (70));
	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin, fixed bin (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$make_seg
				 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35))
				 ;
	dcl     ioa_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
	dcl     mrds_dsl_resultant_storage$get_opening_temp_dir
				 entry (fixed bin (35), fixed bin (35)) returns (char (168));

/* External */

	dcl     error_table_$argerr	 fixed bin (35) ext;
	dcl     error_table_$no_s_permission fixed bin (35) ext;


/* Includes */
%page;
%include status_structures;
%page;
/* Execution of mu_get_temp_segments_ begins here */

get_temp_segments:
     entry (a_db_index, a_caller, a_ptrs, a_code);

	n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */
	goto gts_join;

get_temp_segments_path:
     entry (a_path, a_caller, a_ptrs, a_code);

	temp_dir = a_path;
	n_segs = dim (a_ptrs, 1);
	array_ptr = addr (a_ptrs);
	goto gts_join_have_path;

gts_join:
	temp_dir =
	     mrds_dsl_resultant_storage$get_opening_temp_dir (a_db_index, code);
	if code ^= 0 then do;
		a_code = code;
		return;
	     end;

gts_join_have_path:
	a_code = 0;
	n_found = 0;				/* initialize indicating we've found no free entries */
	call expand_pathname_ (temp_dir, containing_temp_dir, entry_temp_dir, code);
	if code ^= 0 then do;
		a_code = code;
		return;
	     end;
	status_ptr = addr (local_status);
	call hcs_$status_long (containing_temp_dir, entry_temp_dir, 0, status_ptr, null (), code);
	if code ^= 0 & code ^= error_table_$no_s_permission then do;
		a_code = code;
		return;
	     end;
	temp_dir_uid = status_ptr -> status_branch.long.uid;

	if block_ptr = null then do;			/* we haven't yet gotten any segments */
		n_blocks = n_segs;			/* so get the exact amount requested */
		areap = get_system_free_area_ ();	/* get pointer to standard area to use */
		allocate block in (area) set (block_ptr); /* get the needed storage */
		old_blocks = 0;			/* needed by get_new_segments routine */
		call get_new_segments;		/* do the work in this subr */
		return;
	     end;

	do i = 1 to n_blocks while (n_found < n_segs);	/* search for the necessary free segments */
	     if ^block (i).used & (block (i).dir_uid = temp_dir_uid) then do;
						/* we found another free one */

/* we have found an unused temp seg in the appropriate temp dir */

		     block (i).used = "1"b;		/* mark entry as being used */
		     block (i).caller = a_caller;	/* update the caller name */
		     n_found = n_found + 1;
		     ptrs (n_found) = block (i).segptr;
		end;
	end;
	if n_found < n_segs then do;			/* there weren't enough free ones */
		new_blocks = n_blocks + n_segs - n_found; /* get more storage, just large enough */
		old_blocks = n_blocks;
		if areap = null then
		     areap = get_system_free_area_ ();	/* get pointer to area */
		allocate new_block in (area) set (new_block_ptr); /* get the needed storage */
		new_block_ptr -> block = block;	/* copy the current structure */
		free block in (area);
		n_blocks = new_blocks;
		block_ptr = new_block_ptr;
		call get_new_segments;		/* get the needed segments */
	     end;

	return;
%page;
get_new_segments:
     proc;

	dcl     (i, j)		 fixed bin;

	do i = old_blocks + 1 to n_blocks;		/* initialize the new entries */
	     block (i).used = "1"b;			/* the caller will use these blocks */
	     block (i).caller = a_caller;		/* ditto */
	     block (i).dir_uid = temp_dir_uid;
	     ename2 = unique_chars_ (unique_bits_ ()) || ".MRDS.";
	     ename = ename2;
	     call
		hcs_$make_seg (temp_dir, ename, "", 01110b, block (i).segptr, code);
	     if code ^= 0 then do;
		     call undo;
		     return;
		end;
	     segment_number = bin (baseno (block (i).segptr), 18);
	     do j = 1 to 4;
		segno (j) = substr ("01234567", bin (digit (j), 3) + 1, 1);
	     end;
	     call hcs_$chname_seg (block (i).segptr, ename, ename2, code);
	     if code ^= 0 then do;
		     call undo;
		     return;
		end;
	     block (i).name = ename2;
	     n_found = n_found + 1;
	     ptrs (n_found) = block (i).segptr;
	end;

undo:
     proc;

	a_code = code;
	n_blocks = old_blocks;			/* reset to the way things were */
	do j = old_blocks + 1 to i - 1;		/* clean up the segments we already got */
	     call hcs_$delentry_seg (block (j).segptr, code);
	end;

     end;
     end;
%page;
get_temp_segment:
     entry (a_db_index, a_caller, a_ptr, a_code);

	dcl     a_ptr		 ptr parameter;

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	go to gts_join;

get_temp_segment_path:
     entry (a_path, a_caller, a_ptr, a_code);

	temp_dir = a_path;
	n_segs = 1;
	array_ptr = addr (a_ptr);
	goto gts_join_have_path;
%page;
release_temp_segments:
     entry (a_caller, a_ptrs, a_code);

	n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */
	release_called = "1"b;			/* need to truncate also */
rts_join:
	a_code = 0;
	do i = 1 to n_segs;				/* release each segment passed in */
	     if ptrs (i) ^= null then do;
		     found_it = "0"b;		/* flag says we've not yet found this segment */
		     do j = 1 to n_blocks while (^found_it); /* search for segment in array */
			if block (j).used then do;	/* candidate, see if right one */
				if ptrs (i) = block (j).segptr then do; /* we found the given segment */
					if block (j).caller ^= a_caller then
					     a_code = error_table_$argerr;
					else do;	/* the right guy (as far as we care) */
						if release_called then do; /* wants to truncate it also */
							call hcs_$truncate_seg (block (j).segptr, 0, code);
						/* truncate now */
							if code ^= 0 then
							     a_code = code; /* accumulate error */
						     end;
						block (j).used = "0"b; /* ditto */
						block (j).caller = "FREE";
						ptrs (i) = null;
						found_it = "1"b;
					     end;
				     end;
			     end;
		     end;
		     if ^found_it then
			a_code = error_table_$argerr;
		end;
	end;
	return;
%page;
release_temp_segment:
     entry (a_caller, a_ptr, a_code);

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	release_called = "1"b;			/* truncate the seg also */
	goto rts_join;

free_temp_segments:
     entry (a_caller, a_ptrs, a_code);

	n_segs = dim (a_ptrs, 1);
	array_ptr = addr (a_ptrs);
	release_called = "0"b;
	goto rts_join;



free_temp_segment:
     entry (a_caller, a_ptr, a_code);

/* this entry will just free the segment and not truncate it */
/* this is a performance hack */

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	release_called = "0"b;			/* just free the seg */
	goto rts_join;
%page;
release_all_temp_segments:
     entry (a_caller, a_code);

/* entry to release all temp segments for a_caller */

	release_called = "1"b;

rats_join:
	a_code = 0;
	found_it = "0"b;				/* flag says we've not yet found this segment */
	do j = 1 to n_blocks;			/* search for segment in array */
	     if block (j).used then /* candidate, see if right one */
		if block (j).caller = a_caller then do; /* the right guy (as far as we care) */
			if release_called then do;
				call hcs_$truncate_seg (block (j).segptr, 0, code);
						/* truncate now */
				if code ^= 0 then
				     a_code = code; /* accumulate error */
			     end;
			block (j).used = "0"b;	/* ditto */
			block (j).caller = "FREE";
			found_it = "1"b;
		     end;
	end;
	if ^found_it then
	     a_code = error_table_$argerr;
	return;










free_all_temp_segments:
     entry (a_caller, a_code);

/* entry to set temp segs for caller to un-unused,
   without doing a truncation of the segments.
   this saves time, but allows the temp segs to grow to that
   size which the largest selection expression would use */

	release_called = "0"b;
	goto rats_join;
%page;
delete_all_temp_segments:
     entry (a_caller, a_code);

/* entry to delete all temp segments for a_caller */

	a_code = 0;
	found_it = "0"b;				/* flag says we've not yet found this segment */
	n_deleted = 0;
	do j = 1 to n_blocks;			/* search for segment in array */
	     if block (j).caller = a_caller then do;	/* the right guy (as far as we care) */
		     call hcs_$delentry_seg (block (j).segptr, code);
		     if code ^= 0 then
			a_code = code;		/* accumulate error */
		     n_deleted = n_deleted + 1;
		     found_it = "1"b;
		end;
	end;

/* shrink list of temp segments, removing current callers
   temp segments from the list of all temp segs */


	if ^found_it then
	     a_code = error_table_$argerr;		/* no segs for caller */
	else do;
		new_blocks = n_blocks - n_deleted;
		old_blocks = n_blocks;
		if areap = null then
		     areap = get_system_free_area_ ();
		allocate new_block in (area) set (new_block_ptr);

		i = 1;
		do j = 1 to old_blocks;
		     if block (j).caller = a_caller then
			;
		     else do;			/* save everyone elses temp segs */
			     new_block (i) = block (j);
			     i = i + 1;
			end;

		end;

		free block in (area);
		n_blocks = new_blocks;
		block_ptr = new_block_ptr;

	     end;

	return;
%page;
/* this entry is mainly called by restructure_mrds_db to delete all the temp
   segments in some directory. this is because rmdb creates a temp dir in the
   temp dir specified, then deletes the created dir to get rid of all segments
   at once. the saved static pointers in this program are invalid and may point
   to other initiated segments. */

cleanup_temp_dir:
     entry (a_path, a_code);

	a_code = 0;
	found_it = "0"b;
	n_deleted = 0;
	call expand_pathname_ (a_path, containing_temp_dir, entry_temp_dir, code);
	if code ^= 0 then do;
	     a_code = code;
	     goto end_cleanup_temp_dir;
	     end;

	status_ptr = addr (local_status);
	call hcs_$status_long (containing_temp_dir, entry_temp_dir, 0, status_ptr, null (), code);
	if code ^= 0 & code ^= error_table_$no_s_permission then do;
	     a_code = code;
	     goto end_cleanup_temp_dir;
	     end;
	temp_dir_uid = status_ptr -> status_branch.long.uid;

/* delete all segments with the same containing directory uid */
	do j = 1 to n_blocks;
	     if block (j).dir_uid = temp_dir_uid then do;
		call hcs_$delentry_seg (block (j).segptr, code);
		if code ^= 0 then a_code = code;

		n_deleted = n_deleted + 1;
		found_it = "1"b;
		end;
	     end;					/* do j */

/* shrink the list of temp segments. */
	if ^found_it then
	     a_code = error_table_$argerr;
	else do;
	     new_blocks = n_blocks - n_deleted;
	     old_blocks = n_blocks;
	     if areap = null then
		areap = get_system_free_area_ ();
	     allocate new_block in (area) set (new_block_ptr);

	     i = 1;
	     do j = 1 to old_blocks;
		if block (j).dir_uid = temp_dir_uid then
		     ;				/* ignore this directories entries */
		else do;
		     new_block (i) = block (j);
		     i = i + 1;
		     end;
		end;				/* do j */

	     free block in (area);
	     n_blocks = new_blocks;
	     block_ptr = new_block_ptr;

	     end;

end_cleanup_temp_dir:
	     return;
%page;
delete_temp_segment: entry (a_caller, a_ptr, a_code);

/* this entry will delete the segment with the given name and pointer */

	n_segs = 1;
	array_ptr = addr (a_ptr);
	a_code = 0;

	found_it = "0"b;
	do i = 1 to n_blocks while (^found_it);
	     if block (i).segptr = ptrs (1) & block (i).caller = a_caller
	     then found_it = "1"b;
	end;

	if ^found_it
	then do;
		a_code = error_table_$argerr;
		goto exit_delete_temp_segment;
	     end;

	i = i - 1;				/* search loop increments i before checking found_it */
	call hcs_$delentry_seg (block (i).segptr, code);
	if code ^= 0
	then do;
		a_code = code;
		goto exit_delete_temp_segment;
	     end;

	new_blocks = n_blocks - 1;
	old_blocks = n_blocks;
	if areap = null
	then areap = get_system_free_area_ ();
	allocate new_block in (area) set (new_block_ptr);
	do j = 1 to i - 1;
	     new_block (j) = block (j);
	end;
	do j = i + 1 to old_blocks;
	     new_block (j - 1) = block (j);
	end;
	free block in (area);
	n_blocks = new_blocks;
	block_ptr = new_block_ptr;

exit_delete_temp_segment:
	return;
%page;
list_temp_segments:
     entry;

	if n_blocks = 0 then do;			/* nothing ever allocated */
		call ioa_ ("No temporary segments.");
		return;
	     end;
	call cu_$arg_count (arg_count);
	call cu_$arg_list_ptr (arg_list_ptr);

	begin;					/* to allocate storage */

	     dcl	   treq		      char (32);
	     dcl	   req		      (max (1, arg_count)) char (32);
	     dcl	   nreq		      fixed bin;	/* number of names requested */
	     dcl	   all_sw		      bit (1);	/* set if -all given */
	     dcl	   (i, j, cnt)	      fixed bin;
	     dcl	   dup_sw		      bit (1);

	     nreq = 0;
	     all_sw = "0"b;
	     do i = 1 to arg_count;			/* get table of requests */
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);
		if arg = "-all" | arg = "-a" then
		     all_sw = "1"b;
		else do;
			dup_sw = "0"b;		/* be sure not given dup args */
			treq = arg;
			do j = 1 to nreq;
			     if req (j) = treq then
				dup_sw = "1"b;
			end;
			if ^dup_sw then do;		/* new one */
				nreq = nreq + 1;
				req (nreq) = treq;
			     end;
		     end;
	     end;
	     if all_sw then
		nreq = 0;

	     if nreq = 0 then do;			/* if no special requests */
		     cnt = 0;
		     do i = 1 to n_blocks;		/* count free segs */
			if ^block.used (i) then
			     cnt = cnt + 1;
		     end;
		     call
			ioa_ ("^/^-^d Segment^[s^],  ^d Free^/", n_blocks,
			(n_blocks ^= 1), cnt);
		end;
	     else do;				/* count segments that match requests */
		     cnt = 0;
		     do i = 1 to n_blocks;
			if block.used (i) then
			     do j = 1 to nreq;
				if block.caller (i) = req (j) then
				     cnt = cnt + 1;
			     end;
		     end;
		     call ioa_ ("^/^-^d Segment^[s^] used.^/", cnt, (cnt ^= 1));
		end;

	     do i = 1 to n_blocks;			/* now print them */
		if all_sw then
		     go to print_it;
		else if block.used (i) then do;
			if nreq = 0 then
			     go to print_it;
			else
			     do j = 1 to nreq;
				if block.caller (i) = req (j) then
				     go to print_it;
			     end;
		     end;
		go to next_block;
print_it:
		call
		     ioa_ ("^a  ^[^a^;(free)^]", block.name (i), block.used (i),
		     block.caller (i));
next_block:
	     end;
	     call ioa_ ("");
	end;
	return;
%page;
list_segnos:
     entry (struc_ptr);

	dcl     struc_ptr		 ptr;
	dcl     1 segno_struc	 aligned based (struc_ptr),
		2 num_segs	 fixed bin,
		2 segno		 (n_blocks) fixed bin;


	if (block_ptr = null) | (areap = null) then do;
		struc_ptr = null;
		return;
	     end;

	allocate segno_struc in (area) set (struc_ptr);
	segno_struc.num_segs = n_blocks;
	do i = 1 to n_blocks;
	     segno_struc.segno (i) = bin (baseno (block (i).segptr), 15);
	end;

	return;


     end;
