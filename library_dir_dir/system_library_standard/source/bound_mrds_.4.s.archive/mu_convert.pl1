/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* BEGIN DESCRIPTION

   This procedure converts data located by the source_ptr with a descriptor
   located by source_desc_ptr, to the data located by target_ptr and described
   by the descriptor located by target_desc_ptr.

   The conversion is done using assign_round_.
   NOTE: assign_ currently only handles data types 1-12, 19-22, 33-34, & 41-46.

   Error conditions are returned as mrds_error codes, for example,
   the conversion condition is returned as the error code
   mrds_error_$conversion_condition.

   END DESCRIPTION
*/

/* HISTORY
   Written by R. D. Lackey June 1979
   Modified by Jim Gray  Oct. 1979 to add illegal_procedure condition capture.
   Modified by Rickie E. Brinegar December 8, 1979 to have each condition captured use its own error code.
   Modified by Jim Gray  Dec. 1979, to correct the length parameter handling
   for assign_, when the data type is string
   Modified by M Pierret 8 October 1980 to combine all condition handlers into one.
   Modified by D. Woodka 07/02/82 to change the any-other condition to continue
   instead of doing a goto EXIT. 
*/

mu_convert:
convert_data:
     proc (a_source_ptr, a_source_desc_ptr, a_target_ptr, a_target_desc_ptr,
	a_code);


/*    	PARAMETERS

   a_source_ptr	    ptr		Pointer to source data
   a_source_desc_ptr    ptr		Pointer to source descriptor
   a_target_ptr	    ptr		Pointer to targer data
   a_target_desc_ptr    ptr		Pointer to target descriptor
   a_code fixed bin (35) 		Error code
*/
%page;
	a_code = 0;
	source_ptr = a_source_ptr;			/* copy arguments */
	source_desc_ptr = a_source_desc_ptr;
	target_ptr = a_target_ptr;
	target_desc_ptr = a_target_desc_ptr;

	target_type =
	     2 * target_desc_ptr -> descriptor.type
	     + fixed (target_desc_ptr -> descriptor.packed);

	if target_desc_ptr -> descriptor.type >= 19
	     & target_desc_ptr -> descriptor.type <= 22 then
	     target_length = fixed (string (target_desc_ptr -> descriptor.size));
	else do;
		target_len.scale =
		     addr (target_desc_ptr -> descriptor.scale) -> signed_scale;
		target_len.precision = fixed (target_desc_ptr -> descriptor.precision);
	     end;

	source_type =
	     2 * source_desc_ptr -> descriptor.type
	     + fixed (source_desc_ptr -> descriptor.packed);

	if source_desc_ptr -> descriptor.type >= 19
	     & source_desc_ptr -> descriptor.type <= 22 then
	     source_length = fixed (string (source_desc_ptr -> descriptor.size));
	else do;
		source_len.scale =
		     addr (source_desc_ptr -> descriptor.scale) -> signed_scale;
		source_len.precision = fixed (source_desc_ptr -> descriptor.precision);
	     end;

	on any_other
	     begin;

		call find_condition_info_ ((null), addr (cond_info), a_code);
		do cond_idx = 1 to 7
		     while (cond_info.condition_name ^= cond_name (cond_idx));
		end;
		if cond_idx > 7 then
		     call continue_to_signal_ (a_code);

		goto COND (cond_idx);

COND (1):						/* size */
		a_code = mrds_error_$size_condition;
		goto EXIT;

COND (2):						/* conversion */
		a_code = mrds_error_$conversion_condition;
		goto EXIT;


COND (3):						/* fixedoverflow */
		a_code = mrds_error_$fixedoverflow_condition;
		goto EXIT;

COND (4):						/* error */
		a_code = mrds_error_$error_condition;
		goto EXIT;

COND (5):						/* illegal_procedure */
		a_code = mrds_error_$illegal_procedure_condition;
		goto EXIT;

COND (6):						/*  overflow */
		a_code = mrds_error_$overflow_condition;
		goto EXIT;

COND (7):						/* underflow */
		a_code = mrds_error_$underflow_condition;
		goto EXIT;

COND (8):						/* any other */
		call continue_to_signal_ (a_code);


	     end;					/* end of condition handler */


	call
	     assign_round_ (target_ptr, target_type, target_length, source_ptr,
	     source_type, source_length);

EXIT:
	return;

/*	PARAMETERS	*/

	dcl     a_source_ptr	 ptr;		/* (INPUT) Pointer to source data */
	dcl     a_source_desc_ptr	 ptr;		/* (INPUT) Pointer to source descriptor */
	dcl     a_target_ptr	 ptr;		/* (INPUT) Pointer to target data */
	dcl     a_target_desc_ptr	 ptr;		/* (INPUT) Pointer to target descriptor */
	dcl     a_code		 fixed bin (35);	/* (OUTPUT) Error code */

/*	OTHERS		*/

	dcl     source_desc_ptr	 ptr;
	dcl     target_desc_ptr	 ptr;

	dcl     source_ptr		 ptr;
	dcl     target_ptr		 ptr;

	dcl     source_type		 fixed bin;
	dcl     target_type		 fixed bin;
	dcl     cond_idx		 fixed bin;

	dcl     source_length	 fixed bin (35);

	dcl     1 source_len	 aligned based (addr (source_length)), /* Length of source */
		2 scale		 fixed bin (17) unal,
		2 precision	 fixed bin (17) unal;

	declare signed_scale	 fixed bin (11) unal based; /* signed fixed binary version of bit(12) */

	dcl     target_length	 fixed bin (35);

	dcl     1 target_len	 aligned based (addr (target_length)), /* Length of target */
		2 scale		 fixed bin (17) unal,
		2 precision	 fixed bin (17) unal;

	dcl     1 cond_info		 aligned,
		2 mc_ptr		 ptr,
		2 version		 fixed bin,
		2 condition_name	 char (32) varying,
		2 info_ptr	 ptr,
		2 wc_ptr		 ptr,
		2 loc_ptr		 ptr,
		2 flags		 aligned,
		  3 crawlout	 bit (1) unal,
		  3 mbz1		 bit (35) unal,
		2 mbz2		 bit (36) aligned,
		2 user_loc_ptr	 ptr,
		2 mbz		 (4) bit (36) aligned;

	dcl     cond_name		 (7) char (32) varying int static options (constant)
				 init ("size", "conversion", "fixedoverflow", "error",
				 "illegal_procedure", "overflow", "underflow");

/* Builtin */

	dcl     (addr, fixed, null, string) builtin;

/* External Entries */

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));

/* External */

	dcl     (
	        mrds_error_$conversion_condition,
	        mrds_error_$error_condition,
	        mrds_error_$fixedoverflow_condition,
	        mrds_error_$illegal_procedure_condition,
	        mrds_error_$overflow_condition,
	        mrds_error_$size_condition,
	        mrds_error_$underflow_condition
	        )			 ext fixed bin (35);
	dcl     any_other		 condition;

%include mdbm_descriptor;

     end mu_convert;
