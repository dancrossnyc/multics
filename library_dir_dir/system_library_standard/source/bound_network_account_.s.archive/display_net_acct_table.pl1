/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-04-07,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     New program.
  2) change(87-04-21,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     Changed to select active_connection_info based on both the process_id and
     session_id.
  3) change(87-05-07,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     Add $test entrypoint to allow display of a NAT in a test mode in another
     directory.
  4) change(87-06-11,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     Fix problem of not displaying proper user for a network record.
  5) change(87-06-16,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     Changed the display values for delete & unassigned records in the brief
     display.
  6) change(87-07-31,Brunelle), approve(87-07-31,MCR7694),
     audit(87-07-31,GDixon), install(87-08-04,MR12.1-1055):
     Check version from network accounting.
     Correct errors discovered during auditing.
                                                   END HISTORY COMMENTS */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* TO BE SUPPLIED:						       */
/*							       */
/* This program should be changed to cycle entirely through the	       */
/* network_account_array calling GET_CONNECTION_INFO for each entry and      */
/* storing data for later display.  This would allow us to know the proper   */
/* sizes for each of the display fields and would also allow us to sort      */
/* output into any order the user wishes.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* format: style4 */

display_net_acct_table: dnat: proc;

/* Utility to display the contents of the Network Account Table */

/* External procedures */

dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hpriv_connection_list_$get_next_owner entry (bit (18), bit (36), ptr, fixed bin (35));
dcl  hpriv_connection_list_$get_next_user entry (bit (36), bit (18), ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  network_accounting_gate_$dump_table entry (ptr, ptr, char (*), fixed bin (35));
dcl  network_accounting_gate_$get_path entry (char (*));
dcl  network_accounting_gate_$test entry (char (*));

/* External */

dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;

/* Conditions & Builtin */

dcl  (addr, index, null) builtin;
dcl  (cleanup, linkage_error) condition;

/* Internal Static */

dcl  ME char (23) int static options (constant) init ("display_net_acct_table");

/* Automatic */

dcl  access_error_string char (64);
dcl  arg_count fixed bin;
dcl  arg_len fixed bin (21);
dcl  arg_ptr ptr;
dcl  brief_sw bit (1);
dcl  connection_name char (32);
dcl  connection_offset bit (18);
dcl  error fixed bin (35);
dcl  error_message char (100);
dcl  group_id char (32);
dcl  i fixed bin;
dcl  seeking_user bit (1);
dcl  system_area_ptr ptr;
dcl  table_path char (168);

dcl  1 aci aligned like active_connection_info;

/* Based */

dcl  arg char (arg_len) based (arg_ptr);
dcl  system_area area based (system_area_ptr);
dcl  test_dir char (arg_len) based (arg_ptr);

%page;
COMMON:	brief_sw = "1"b;				/* default to brief mode */

/* see if they want long mode */
	call cu_$arg_count (arg_count, error);
	if error ^= 0 then do;
	     call com_err_ (error, ME);
	     return;
	end;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, 0);
	     if index (arg, "-") ^= 1 then do;
		call com_err_ (0, ME, "Usage:  ^a {-control_arg}", ME);
		return;
	     end;
	     else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;
	     else do;
		call com_err_ (error_table_$badopt, ME, "^a", arg);
		return;
	     end;
	end;

	network_account_array_ptr = null;
	system_area_ptr = get_system_free_area_ ();
	aci.version = ACT_INFO_VERSION_1;

	on cleanup call CLEAN_UP;
	on linkage_error begin;
	     access_error_string = "network_accounting_gate_";
	     go to NO_ACCESS_ERROR;
	end;

/* get location of the NAT being processed */
	call network_accounting_gate_$get_path (table_path);

/* get all entries in the NAT */
	call network_accounting_gate_$dump_table (system_area_ptr, network_account_array_ptr, error_message, error);
	if error ^= 0 then do;
	     call com_err_ (error, ME, "Dumping table ^a", table_path);
	     go to RETURN;
	end;

	if network_account_array_ptr = null then go to TABLE_EMPTY;

	else do;
	     if network_account_array.version ^= NET_ACCT_ARRAY_VERSION_1 then do;
		call com_err_ (0, ME, 
		     "Illegal version (^a) for net acct array.  Should be ^a",
		     network_account_array.version, NET_ACCT_ARRAY_VERSION_1);
		free network_account_array in (system_area);
		network_account_array_ptr = null;
	     end;
	end;
	

/* special case empty table */
	if network_account_array.count = 0 then do;
TABLE_EMPTY:   call ioa_ ("Table ^a contains no entries.", table_path);
	     go to RETURN;
	end;

	call ioa_ ("Dumping Network Account Table^/Pathname:  ^a", table_path);

	if brief_sw then do;
	     call ioa_ ("
                 Network              Connect
    Channel Name   Type   Bytes   Pkts   Secs User");
	end;

/* in case we don't have access on hpriv_connection_list_ */
	on linkage_error begin;
	     access_error_string = "hpriv_connection_list_";
	     go to NO_ACCESS_ERROR;
	end;

	do i = 1 to network_account_array.count;
	     network_account_data_ptr = addr (network_account_array.record (i));

/* get information from the connection list about this user */
	     call GET_CONNECTION_INFO;

	     call DISPLAY_THE_DATA_RECORD;
skip_this_entry:
	end;
RETURN:
	call CLEAN_UP;

	return;

NO_ACCESS_ERROR:
	call com_err_ (0, ME, "Sorry, you don't have access on ^a.", access_error_string);
	go to RETURN;
%page;

/* entrypoint to allow display of NAT in test mode.  This may be in a directory
   other than the standard system directory */

test: entry;

/* see if user gave directory to use */
	call cu_$arg_count (arg_count, error);
	if error ^= 0 then do;
	     call com_err_ (error, ME || "$test");
	     return;
	end;
	if arg_count = 0 then do;			/* must give directory */
	     call com_err_ (0, ME || "$test", "Must give name of test directory to use.");
	     return;
	end;

	network_account_array_ptr = null;

	on linkage_error begin;
	     access_error_string = "network_accounting_gate_";
	     go to NO_ACCESS_ERROR;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, error);
	call network_accounting_gate_$test (test_dir);
	go to RETURN;

CLEAN_UP: proc;

	if network_account_array_ptr ^= null then
	     free network_account_array in (system_area);

     end CLEAN_UP;
%page;

DISPLAY_THE_DATA_RECORD: proc;

/* subroutine to display the NAT record */

	if brief_sw then do;
	     call ioa_ ("^[D^; ^]^[U^; ^]^[P^; ^] ^13a  ^[UNK  ^s^;^5a^] ^6d ^6d ^6d ^[^.3b-^d^;^2s^a^]",
		network_account_data.delete_sw,
		network_account_data.unassigned_sw,
		network_account_data.purged,
		connection_name,
		network_account_data.network_id < 0,
		NETWORK_TYPE_VALUES (network_account_data.network_id),
		network_account_data.byte_count,
		network_account_data.packet_count,
		network_account_data.connect_time,
		group_id = "Unknown.Unk",
		network_account_data.process_id,
		network_account_data.session_handle,
		group_id);
	end;

	else do;

	     call ioa_ ("^/User process ID: ^w", network_account_data.process_id);
	     call ioa_ ("Connection handle: ^d", network_account_data.session_handle);
	     call ioa_ ("Connection name: ^a", connection_name);
	     call ioa_ ("Network type: ^[UNKNOWN ^s^;^a ^](^d)",
		network_account_data.network_id < 0,
		NETWORK_TYPE_VALUES (network_account_data.network_id), network_account_data.network_id);
	     call ioa_ ("User group ID: ^a", group_id);
	     call ioa_ ("Bytes since last zeroed: ^d", network_account_data.byte_count);
	     call ioa_ ("Packets since last zeroed: ^d", network_account_data.packet_count);
	     call ioa_ ("Connect seconds since last zeroed: ^d", network_account_data.connect_time);
	     call ioa_ ("Delete switch: ^[on^;off^]", network_account_data.delete_sw);
	     call ioa_ ("Unassigned switch: ^[on^;off^]", network_account_data.unassigned_sw);
	     call ioa_ ("Purged switch: ^[on^;off^]", network_account_data.purged);
	end;

     end DISPLAY_THE_DATA_RECORD;
%page;
GET_CONNECTION_INFO: proc;

/* get connection list info for user of NAT record */

	if network_account_data.unassigned_sw then	/*  if unassigned connection then */
	     seeking_user = "0"b;			/* look in owner list only */
	else seeking_user = "1"b;			/* else look in the user list first */
	connection_offset = "0"b;			/* start with first connection for this process */

retry_connection_seek:
	if seeking_user then
	     call hpriv_connection_list_$get_next_user ((network_account_data.process_id), connection_offset,
		addr (aci), error);
	else call hpriv_connection_list_$get_next_owner (connection_offset, (network_account_data.process_id),
		addr (aci), error);

	if error = 0 then do;

/* we found an entry for this processid.  if the session handle matches then
   we are all done.  else try to find the next entry for this processid */

	     if aci.connection_handle ^= network_account_data.session_handle then do;
		connection_offset = aci.offset;	/* set to try for next entry for this user */
		go to retry_connection_seek;		/* and try again */
	     end;
	end;
	else do;

/* no entry for this processid.  if we are seeking for the user, then shift
   to seek if there are any entries where this processid is the owner of the
   session.  else, punt out with an unknown name and groupid */

	     if error = error_table_$noentry then do;
fake_no_entry:	if seeking_user then do;
		     seeking_user = "0"b;		/* set to seek for owner of this session */
		     connection_offset = "0"b;	/* and start at the beginning of the owners chain */
		     go to retry_connection_seek;	/* and try again */
		end;
		connection_name = "UNKNOWN";
		group_id = "Unknown.Unk";
		return;
	     end;
	     else do;
		call com_err_ (error, ME, "Getting connection list entry.");
		go to RETURN;
	     end;
	end;
	connection_name = aci.connection_name;
	if network_account_data.unassigned_sw then
	     group_id = aci.owner_group_id;
	else group_id = aci.user_group_id;

     end GET_CONNECTION_INFO;
%page; %include active_connection_info;
%page; %include net_event_message;
%page; %include network_account_array;

     end display_net_acct_table;
