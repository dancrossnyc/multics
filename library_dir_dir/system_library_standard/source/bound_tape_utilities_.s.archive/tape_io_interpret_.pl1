/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-04-13,TLNguyen), approve(87-04-13,MCR7664),
     audit(87-06-08,GWMay), install(87-07-15,MR12.1-1040):
     make tape_in able to read imcomplete ANSI tapes.
  2) change(88-02-03,GWMay), approve(88-02-03,MCR7837), audit(88-04-12,Farley),
     install(88-04-19,MR12.2-1039):
     Reformatted and simplified error messages.
     changed to pass the value of abort_sw to the close_tape_file
     routine.
                                                   END HISTORY COMMENTS */


tape_io_interpret_: proc (arg_tape_io_data_ptr);

/* format: style4 */
/* tape_io_interpret_ - This module interprets the Volume Control Blocks (VCBs)
   and File Control Blocks (FCBs) created from the tcl file by tape_io.rd (with
   the aid of the reduction compiler package), and does the actual tape to SS file
   (tape_in) or SS file to tape (tape_out) I/O.

   Modification History:
   Created circa 1979 by M. R. Jordan by extracting required functionality from tape_io.rd
   Completed and extensively modified 4/82 by J. A. Bush for understandability and
   to make it easier to convert to future improved tape software.
   Modfied 10/26/82 by J. A. Bush to fix bugs (phx10501, phx13989)
*/

/* PARAMETERS */

dcl  arg_tape_io_data_ptr ptr;


/* BASED STORAGE */

dcl  1 input_record based (wt_ptr) unaligned,		/* template for writing input record */
       2 cw char (amrl),				/* number of chars to write */
       2 next_char bit (0);				/* to allow setting ptr to end of last record */

/* AUTOMATIC STORAGE */

dcl  1 ads like device_status;			/* auto copy of device_status structure */
dcl  1 atfs like tape_file_status;			/* auto copy of tape_file_status structure */

dcl  1 tape_attach_descp aligned,			/* iox_ attachment descption structure for tape */
       2 vol_string char (256) varying,			/* volume portion of attach desc */
       2 file_string char (256) varying,		/* file portion of attach desc */
       2 string char (512) varying;			/* full attach description */

dcl  1 vfile_info aligned,				/* structure for vfile_status_ */
       2 info_version fixed,
       2 type fixed,
       2 records fixed (34),
       2 flags aligned,
         3 lock_status bit (2) unaligned,
         3 pad bit (34) unaligned,
       2 version fixed,
       2 action fixed,
       2 max_rec_len fixed (21);

/* automatic storage */
dcl  add_specified_attributes bit (1);
dcl  abort_sw bit (1) aligned;
dcl  amrl fixed bin (21);				/* number of chars requested/transmitted per io xfer */
dcl  answer char (128) varying;
dcl  blkl picture "zzzzzzz9";
dcl  recl picture "zzzzzzz9";
dcl  secq picture "zzz9";
dcl  blockl fixed bin (21);
dcl  char_cnt fixed bin (21);				/* number of characters transferred per fcb io action */
dcl  code fixed bin (35);				/* error code */
dcl  cont_sw bit (1);
dcl  control_sw bit (1);
dcl  db_sw bit (1) init ("0"b);
dcl  end_of_data bit (1);				/* EOD detected bit */
dcl  end_of_tape bit (1);				/* EOT detected bit */
dcl  file_count fixed bin;
dcl  fileid char (17) varying;
dcl  fnbr fixed bin;
dcl  i fixed bin;					/* temporary storage */
dcl  longinfo char (100) aligned;
dcl  name char (8) varying;				/* command name */
dcl  pathname char (168) varying;
dcl  rcode fixed bin (35);
dcl  ring_sw bit (1);				/* switch to make sure a ring gets in tape mounted for sqi */
dcl  (blen, rlen, wlen, b_offset) fixed bin (21);
dcl  wt_ptr ptr;
dcl  shortinfo char (8) aligned;
dcl  ss_atd char (256);
dcl  ss_iocbp ptr initial (null);
dcl  ss_open_mode fixed bin;
dcl  ss_switch char (26);				/* file switch name */
dcl  tape_iocbp ptr;
dcl  tape_switch char (26);				/* tape_switch name */
dcl  tstring char (256) varying;
dcl  vol_init bit (1);				/* ON => develop volume portion of attach desc */
dcl  writeff_sw bit (1);
dcl  zlck bit (1) aligned;
dcl  cant_cont bit (1) aligned;
dcl  output bit (1) aligned;				/* shorter form of tape_io_data.control.writing */
dcl  io_started bit (1) aligned;

/* CONSTANTS */

dcl  IBMNL fixed bin internal static options (constant) init (3);
dcl  IBMDOS fixed bin internal static options (constant) init (4);
dcl  q_mess1 char (57) int static options (constant) init
	("ride the control file and read the storage system file as");
dcl  q_mess2 char (56) int static options (constant) init
	("write this storage system file by changing its format to");
dcl  DENSITY (4) char (4) varying internal static options (constant) init ("", "800", "1600", "6250");
dcl  FORMAT (11) char (3) varying internal static options (constant) init
	("u", "f", "d", "v", "fb", "db", "vb", "s", "sb", "vs", "vbs");
dcl  MODE (3) char (8) varying internal static options (constant) init
	("ascii", "ebcdic", "binary");
dcl  IO_MODULE_NAME (4) char (12) varying internal static options (constant) init
	("tape_ansi_", "tape_ibm_", "tape_ibm_", "tape_ibm_");
dcl  OUTPUT_MODE (4) char (12) varying internal static options (constant) init
	(" -extend ", " -modify ", " -generate ", " -create ");
dcl  sys_info$max_seg_size fixed bin (35) external static;	/* maximum segment size in words */
dcl  wks_ptr ptr int static init (null);		/* I/O buffer pointer */
dcl  (tape_attached, tape_opened, ss_file_attached, ss_file_opened) bit (1) aligned int static init ("0"b);
dcl  cleanup condition;

/* ERROR CODES */

dcl  error_table_$dirseg fixed bin (35) ext static;
dcl  error_table_$end_of_info fixed bin (35) ext static;
dcl  error_table_$eov_on_write fixed bin (35) ext static;
dcl  error_table_$file_busy fixed bin (35) ext static;
dcl  error_table_$insufficient_open fixed bin (35) ext static;
dcl  error_table_$moderr fixed bin (35) ext static;
dcl  error_table_$no_file fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$short_record fixed bin (35) ext static;


/* BUILTIN FUNCTIONS */

dcl  addr builtin;
dcl  fixed builtin;
dcl  ltrim builtin;
dcl  min builtin;
dcl  null builtin;
dcl  rtrim builtin;
dcl  substr builtin;


/* EXTERNAL PROCEDURES */

dcl  com_err_ ext entry options (variable);
dcl  command_query_ ext entry options (variable);
dcl  convert_status_code_ ext entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$cl entry;
dcl  ioa_ ext entry options (variable);
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  vfile_status_ entry (char (*), char (*), ptr, fixed (35));
%page;
	tape_io_data_ptr = arg_tape_io_data_ptr;	/* copy arg */
	output = tape_io_data.control.writing_tape;	/* makes program easier to read */
	if output then				/* if writing tape, this is tape_out */
	     name = "tape_out";
	else name = "tape_in";

	call get_temp_segment_ ((name), wks_ptr, code);	/* get a buffer segment */
	if code ^= 0 then do;
	     call com_err_ (code, name, "Attempting to get tape I/O buffer segment");
	     return;
	end;
	query_info.version = query_info_version_4;	/* set version number */
	vfile_info.info_version = 1;			/* set vfile_status_ info structure version */
	file_count = 0;
	ss_switch = name || "_" || "ss_file";		/* initialize the SS file switch */
	abort_sw, writeff_sw = "0"b;
	ss_iocbp, tape_iocbp = null;
	blen = sys_info$max_seg_size * 4;		/* set buffer size to max */
	ring_sw = output | tape_io_data.control.ring;
	on cleanup call Cleaner ();			/* establish cleanup handler */

	do vcb_ptr = first_vcb_ptr repeat vcb.next_vcb_ptr while (vcb_ptr ^= null () & ^abort_sw);
	     vol_init = "1"b;			/* set the init flag for each volume-group */
	     fnbr = 0;				/* reset the file number */
	     tape_switch = name || "_" || vcb.volid (1);
	     do fcb_ptr = vcb.first_fcb_ptr repeat fcb.next_fcb_ptr while (fcb_ptr ^= null () & ^abort_sw);
		call fcb_worker;			/* perform requested io */
	     end;
	end;

	if ^abort_sw then
	     call ioa_ ("^/^a: Completed processing of  ^a>^a: ^d ^[file^;files^] transferred.", name,
		tape_io_data.source.dirname, tape_io_data.source.ename, file_count, (file_count = 1));

	call Cleaner ();				/* close and detach resources still opened or attached */

	return;
%page;
fcb_worker: procedure;				/* performs io */

	char_cnt, blockl = 0;
	end_of_data, abort_sw, control_sw, cont_sw = "0"b;/* (re-) set  */
	if fcb.tape.file_id ^= "*" then		/* set fileid for error msg */
	     fileid = rtrim (fcb.tape.file_id);
	else do;					/* if name = * then use  file number for error msg */
	     secq = fixed (fcb.tape.sequence);
	     fileid = "#" || ltrim (secq);
	end;
	goto FORMAT (fcb.tape.format);		/* dispatch on format */
FORMAT (0):					/* not specified */
	amrl = sys_info$max_seg_size * 4;		/* assume the worst */
	goto COMMON_WORK;

FORMAT (1):					/* U */
	amrl = fcb.tape.blklen;			/* U - try to get blklen characters */
	goto COMMON_WORK;

FORMAT (2):					/* F */
FORMAT (5):					/* FB */
	amrl = fcb.tape.reclen;			/* F or FB - try to get reclen characters */
	goto COMMON_WORK;

FORMAT (3):					/* D */
FORMAT (4):					/* V */
FORMAT (6):					/* DB */
FORMAT (7):					/* VB */
	amrl = fcb.tape.reclen - 4;			/* D, V, DB or VB - try to get reclen - rcw/rdw characters */
	goto COMMON_WORK;

FORMAT (8):					/* S */
FORMAT (9):					/* SB */
FORMAT (10):					/* VS */
FORMAT (11):					/* VBS */
	amrl = min (fcb.tape.reclen, sys_info$max_seg_size * 4);

COMMON_WORK:
	if fcb.segment.dirname = ">" then		/* special case the root dir */
	     pathname = ">" || fcb.segment.ename;
	else pathname = rtrim (fcb.segment.dirname) || ">" || fcb.segment.ename;
	if output then
	     call write_tape ();			/* tape write logic */
	else call read_tape ();			/* tape read logic */
	if char_cnt = 0 & io_started then		/* if no date xfered, tell user */
	     if output then
		call ioa_ ("^a: Storage system file ""^a"", transfer to tape file ^a of volume-set ^a has zero length.",
		     name, pathname, fcb.tape.file_id, vcb.volid (1));
	     else call ioa_ ("^a: Tape file ""^a"" transfer to storage system file ""^a"" has zero length.",
		     name, fileid, pathname);

	return;					/* exit */


     end fcb_worker;
%page;
/* read_tape - subroutine to read tape file into SS file */

read_tape: proc;

	call check_ss_file;				/* check SS file for access and consistency */
	call build_tape_attach;			/* create tape attach description */
	call open_tape_file;			/* attach and open tape file */
	call open_ss_file;				/* attach  and open SS file */

/* main processing loop, read tape/write ss file */

	do while (^end_of_data & ^abort_sw & ^cont_sw);	/* do until no more data */
	     call iox_$read_record (tape_iocbp, wks_ptr, blen, rlen, code);
	     if code = error_table_$end_of_info then	/* EOF detected */
		end_of_data = "1"b;			/* set terminate condition */
	     else if code ^= 0 then			/* we have a real  tape error */
		call check_tape_status;		/* go report it, and determine what to do */
	     else do;				/* good read, write the data into SS file */
		wt_ptr = wks_ptr;			/* start at beginning of buffer */
		b_offset = 0;
		if rlen = 0 then			/* special case for zero length records */
		     zlck = "1"b;
		else zlck = "0"b;			/* not a zero length record */
		do while ((b_offset < rlen | zlck) & ^abort_sw & ^cont_sw); /* do while data to write */
		     zlck = "0"b;			/* only one iteration for zero length records */
		     wlen = min (amrl, rlen - b_offset);/* set length of record to write */
ss_wrt_retry:
		     call iox_$write_record (ss_iocbp, wt_ptr, wlen, code); /* write the SS file record */
		     if code ^= 0 then do;		/* if error writing to SS file */
			call check_ss_file_status;	/* go report it and determine what to do */
			if control_sw then		/* if user fixed problem */
			     go to ss_wrt_retry;
		     end;
		     else do;			/* no error */
			char_cnt = char_cnt + wlen;	/* increment file character count */
			if fcb.segment.truncate_lines = 2 then /* if user want to chop of line.. */
			     b_offset = rlen;	/* set so we only go through once */
			else b_offset = b_offset + wlen; /* increment input record char offset */
			wt_ptr = addr (input_record.next_char); /* increment input data ptr */
		     end;
		end;

	     end;
	end;
	call close_ss_file;				/* close and detach SS file */
	call close_tape_file (abort_sw);		/* close and detach tape file */

     end read_tape;
%page;
/* write_tape - subroutine to write tape file from SS file */

write_tape: proc;

	call check_ss_file;				/* check SS file for access and consistency */
	if fcb.tape.sequence = -1 then do;		/* if "tape_extend" was specified */
	     if fnbr = 0 then			/* and this is the first attachment for this volume */
		call position_to_end;		/* position tape to end of last file on tape */
	     else do;				/* otherwise increment the file number */
		fnbr = fnbr + 1;
		fcb.tape.sequence = fnbr;		/* set the valid sequence number */
	     end;
	end;
	else fnbr = fnbr + 1;
	call build_tape_attach;			/* create tape attach description */
	call open_tape_file;			/* attach and open tape file */
	call open_ss_file;				/* attach  and open SS file */

/* main processing loop, read SS file/write tape */

	do while (^end_of_data & ^abort_sw & ^cont_sw);	/* do until no more data */
ss_rd_retry:
	     call iox_$read_record (ss_iocbp, wks_ptr, blen, rlen, code);
	     if code = error_table_$end_of_info then	/* EOF detected */
		end_of_data = "1"b;			/* set terminate condition */
	     else if code ^= 0 & code ^= error_table_$short_record then do; /* if some error.. */
		call check_ss_file_status;		/* go report it, and determine what to do */
		if control_sw then			/* if user fixed problem */
		     go to ss_rd_retry;		/* go retry read */
	     end;
	     else do;				/* good read, write the date into the tape file */
		wt_ptr = wks_ptr;			/* start at beginning of buffer */
		b_offset = 0;
		if rlen = 0 then			/* special case for zero length records */
		     zlck = "1"b;
		else zlck = "0"b;			/* not a zero length record */
		do while ((b_offset < rlen | zlck) & ^abort_sw & ^cont_sw); /* do while data to write */
		     zlck = "0"b;			/* only one iteration for zero length records */
		     wlen = min (amrl, rlen - b_offset);/* set length of record to write */
		     call iox_$write_record (tape_iocbp, wt_ptr, wlen, code); /* write the tape record */
		     if code ^= 0 then		/* if error writing to tape file */
			call check_tape_status;	/* go report it and determine what to do */
		     else do;			/* no error */
			char_cnt = char_cnt + wlen;	/* increment file character count */
			if fcb.segment.truncate_lines = 2 then /* if user want to chop of line.. */
			     b_offset = rlen;	/* set so we only go through once */
			else b_offset = b_offset + wlen; /* increment input record char offset */
			wt_ptr = addr (input_record.next_char); /* increment input data ptr */
		     end;
		end;
	     end;
	end;
	call close_ss_file;				/* close and detach SS file */
	call close_tape_file (abort_sw);		/* close and detach tape file */

     end write_tape;
%page;
/* open_tape_file - procedure to attach and open tape file */

open_tape_file: proc;

	if abort_sw | cont_sw then return;		/* if a bad error has already ocurred, bail out */

	code = 0;
	do while (code = 0 & ^tape_opened);
	     call iox_$attach_name (tape_switch, tape_iocbp,
		(tape_attach_descp.string), null, code);

	     if code ^= 0 then do;			/* attach failed */
		call com_err_ (code, name, "
Unable to attach tape file ^a of volume-set ^a.
Attach description is: ""^a""",
		     fileid, vcb.volid (1), tape_attach_descp.string);
		call cntl_cont_abort ("0"b);
		return;
	     end;

	     tape_attached = "1"b;			/* set flag for cleanup handler */

	     if output then				/* tape_out command: users want to write to the tape */
		call iox_$open (tape_iocbp, Sequential_output, "0"b, code); /* open for output */
	     else					/* tape_in command: users want to read from tape files */
		call iox_$open (tape_iocbp, Sequential_input, "0"b, code); /* open for input */

	     if code = 0 then
		tape_opened = "1"b;			/* set flag for cleanup handler */
	     else do;				/* open failed */
		if code = error_table_$insufficient_open then do; /* special case of tape_in command. */

		     if add_specified_attributes then do; /* because the tape doesn't contain info,  */
						/* so add info from TCL file.  Then try to attach and open again */
			call iox_$detach_iocb (tape_iocbp, (0));

			call ioa_ ("
tape_in:  WARNING because the volume name ""^a"" cannot be read as recorded,
the structure attributes specified in the TCL file will be used.",
			     vcb.volid (1));

			recl = fixed (fcb.tape.reclen);
			tape_attach_descp.string = tape_attach_descp.string
			     || " -record " || ltrim (recl)
			     || " -block " || ltrim (blkl)
			     || " -format " || FORMAT (fcb.tape.format);

			add_specified_attributes = "0"b;
			code = 0;
		     end;
		end;

		if code ^= 0 then do;
		     call com_err_ (code, name, "
Unable to open tape file ^a of volume-set ^a for ^[output^;input^].
Attach description is: ""^a""",
			fileid, vcb.volid (1), output, tape_attach_descp.string);
		     call cntl_cont_abort ("0"b);
		     return;
		end;
	     end;
	end;
     end open_tape_file;
%page;
/* close_tape_file - procedure to close and detach tape file */

close_tape_file: proc (force_detach);

dcl  force_detach bit (1) aligned;

	if tape_opened then do;			/* if the tape was opened, close it */

/* see if any more <file-groups> this volume. If not, or if cleanup, take down tape */

	     if fcb.next_fcb_ptr = null | force_detach then
		call iox_$control (tape_iocbp, "retain_none", null, (0)); /* cause tape to be demounted */
	     call iox_$close (tape_iocbp, (0));		/* close the file */
	     tape_opened = "0"b;			/* reset flag */
	end;
	if tape_attached then do;			/* if the tape was attached, detach it */
	     call iox_$detach_iocb (tape_iocbp, (0));
	     file_count = file_count + 1;		/* increment file count */
	     tape_attached = "0"b;			/* reset flag */
	end;

     end close_tape_file;
%page;
/* open_ss_file - procedure to attach and open storage system file */

open_ss_file: proc;

	if abort_sw | cont_sw then return;		/* if a bad error has already ocurred, bail out */
	if fcb.segment.format = 1 then		/* if stream file, use record_stream_ */
	     ss_atd = "record_stream_ -target vfile_ " || pathname; /* to convert stream <--> record */
	else ss_atd = "vfile_ " || pathname;		/* structured file, attach vfile_ directly */
	if fcb.segment.extend = 2 then		/* if extending existing SS file */
	     ss_atd = rtrim (ss_atd) || " -extend";	/* put it in attach desc */
	control_sw = "1"b;				/* allow at least one iteration */
	do while (control_sw);
	     control_sw = "0"b;
	     call close_ss_file;			/* make sure file switch is closed/detached first */
	     call iox_$attach_name (ss_switch, ss_iocbp, ss_atd, null, code); /* attach SS file */
	     if code ^= 0 then do;
		call com_err_ (code, name, "
Unable to attach storage system file ""^a"" for ^[input^;output^]
(file ^a of volume-set ^a).
Attach description is: ""^a"".",
		     pathname, output, fileid, vcb.volid (1), ss_atd);
		call cntl_cont_abort ("1"b);		/* go ask user what to do */
		if ^control_sw then return;		/* give up */
	     end;
	     else do;				/* attempt opening if no errors */
		ss_file_attached = "1"b;		/* set flag for cleanup handler */
		if output then			/* if writing tape/reading ss file */
		     ss_open_mode = Sequential_input;
		else ss_open_mode = Sequential_output;	/* reading tape/writing ss file */
		call iox_$open (ss_iocbp, ss_open_mode, "0"b, code); /* open storage file for write */
		if code ^= 0 then do;
		     call com_err_ (code, name, "
Unable to open storage system file ""^a"" for ^a
(file ^a on volume-set ^a).
Attach description is: ""^a"".",
			pathname, iox_modes (ss_open_mode), fileid,
			vcb.volid (1), ss_atd);
		     call cntl_cont_abort ("1"b);
		     if ^control_sw then return;
		end;
		else do;
		     ss_file_opened = "1"b;		/* set flag for cleanup handler, if no errors */
		     io_started = "1"b;		/* I/O ready to start */
		end;

	     end;
	end;

     end open_ss_file;
%page;
/* check_ss_file - procedure to check storage system file for access etc. */

check_ss_file: proc;

	io_started = "0"b;				/* No I/O started yet */
	control_sw = "1"b;				/* allow at least one iteration */
	do while (control_sw);
	     control_sw = "0"b;
	     query_info.yes_or_no_sw = "1"b;
	     call vfile_status_ ((fcb.segment.dirname), (fcb.segment.ename), addr (vfile_info), code);
	     if code ^= 0 then do;
		if code = error_table_$moderr then
		     call com_err_ (code, name, "
Storage system file ""^a"" has incorrect access for status check.",
			pathname);
		else if code = error_table_$dirseg then
		     call com_err_ (code, name, "
Storage system file ""^a"" is a directory.",
			pathname);
		else if code = error_table_$noentry then/* if file does not exist */
		     if output then			/* if writing tape/reading ss file */
			call com_err_ (code, name, "
Storage system file ""^a"" does not already exist.",
			     pathname);
		     else if fcb.segment.extend = 2 then/* cannot extend non-existant file */
			call com_err_ (code, name, "
Cannot extend storage system file, ""^a"", as it does not already exist.",
			     pathname);
		     else return;			/* return, no problems */
		else call com_err_ (code, name, "
Cannot get status of storage system file ""^a"".",
			pathname);
		go to ask_user;			/* see what user wants to do */
	     end;
	     if ^output & fcb.segment.extend ^= 2 then do;/* reading tape/writing SS file */
		call command_query_ (addr (query_info), answer, name,
		     "Storage system file ""^a"" already exists.^/Do you wish to overwrite it? ",
		     pathname);
		if answer = "no" then
		     go to ask_user;		/* go ask user what to do */
	     end;
	     if vfile_info.type = 1 then do;		/* unstructured file */
		if fcb.segment.format = 2 then do;	/* error if specified structured file */
		     call ioa_ ("^a: Storage system file ""^a"" exists as an unstructured file.",
			name, pathname);
		     call command_query_ (addr (query_info), answer, name,
			"Do you wish to over^[^a unstructured^s^;^s^a structured^]? ",
			output, q_mess1, q_mess2);
		     if answer = "yes" then do;
			if output then		/* if writing tape/reading SS file */
			     fcb.segment.format = 1;
			else if fcb.segment.extend = 2 then /* if reading tape/writing SS file */
			     fcb.segment.extend = 1;	/* change file format by creating new file */
		     end;
		     else go to ask_user;		/* no, go see what user wants to do */
		end;
	     end;
	     else if vfile_info.type = 2 then do;	/* sequential file */
		if vfile_info.flags.lock_status ^= "00"b then do;
		     code = error_table_$file_busy;
		     call com_err_ (code, name, "
Storage system file, ""^a"", is locked.",
			pathname);
		     go to ask_user;		/* go see what user wants to do */
		end;
		if fcb.segment.format ^= 2 then do;	/* error if specified unstructured file */
		     call ioa_ ("^a: Storage system file ""^a"" already exists as a sequential file.",
			name, pathname);
		     call command_query_ (addr (query_info), answer, name,
			"Do you wish to over^[^a sequential^s^;^s^a unstructured^]? ",
			output, q_mess1, q_mess2);
		     if answer = "yes" then do;
			if output then		/* if writing tape/reading SS file */
			     fcb.segment.format = 2;
			else if fcb.segment.extend = 2 then /* if reading tape/writing SS file */
			     fcb.segment.extend = 1;	/* change file format by creating new file */
		     end;
		     else go to ask_user;		/* no, go see what user wants to do */
		end;
	     end;
	     else do;				/* error-- no other types supproted */
		call com_err_ (0, name, "
Storage system file ""^a"" is not unstructured or sequential.",
		     pathname);
ask_user:
		call cntl_cont_abort ("1"b);		/* see what user wnats to do */
		if ^control_sw then return;
	     end;
	end;

     end check_ss_file;

/* Cleaner - procedure to close and detach resources when processing completed  or on a cleanup condition */

Cleaner: proc;

	if wks_ptr ^= null then do;			/* if we have a buffer segment assigned.. */
	     call release_temp_segment_ ((name), wks_ptr, (0)); /* release it */
	     wks_ptr = null;			/* reset the ptr */
	end;
	call close_ss_file;				/* close and detach Storage system file */
	call close_tape_file ("1"b);			/* close and demount tape volume */

     end Cleaner;


/* close_ss_file - procedure to close and detach storage system file */

close_ss_file: proc;

	if ss_file_opened then do;			/* if the file is opened.. */
	     call iox_$close (ss_iocbp, (0));		/* close it unconditionaly */
	     ss_file_opened = "0"b;			/* and reset flag */
	end;
	if ss_file_attached then do;			/* if the file is attached.. */
	     call iox_$detach_iocb (ss_iocbp, (0));	/* detach it unconditionaly */
	     ss_file_attached = "0"b;			/* and reset flag */
	end;

     end close_ss_file;
%page;
/* check_ss_file_status - procedure to  check storage system file status errors */

check_ss_file_status: proc;

	call com_err_ (code, name, "
Error ^[reading from^;writing to^] storage system file ""^a""
(file ^a of volume-set ^a).",
	     output, pathname, fileid, vcb.volid (1));

	call cntl_cont_abort ("1"b);

     end check_ss_file_status;


/* check_tape_status - procedure to check tape errors */

check_tape_status: proc;

	end_of_data = "1"b;				/* Will not continue I/O  on this tape volume */
	call iox_$control (tape_iocbp, "file_status", addr (atfs), rcode);
	if atfs.state > 0 then
	     blockl = atfs.cur_blkcnt;
	if code = error_table_$eov_on_write then do;	/* End-of-Tape has been detected */
	     char_cnt = char_cnt + rlen;		/* add chars which were output to total count.	*/
	     call com_err_ (0, name, "
End-of-Tape detected while writing tape file ^a of volume-set ^a
(storage system file ""^a"").
^d characters have been written to ^d blocks.",
		fileid, vcb.volid (1), pathname, char_cnt, blockl);
	     end_of_tape = "1"b;			/* indicate we had EOT condition */
	end;
						/* format: off */
	else call com_err_ (code, name, "
Error while ^[writing^;reading^] tape file ^a of volume set ^a
(storage system file ""^a"").
^d characters have been ^[written to^;read from^] ^d blocks.
The volume-set will be detached.",
		output, fileid, vcb.volid (1), pathname, char_cnt,
		output, blockl);
/* format: on */
	call error_report;				/* go give the user the real status */
	call cntl_cont_abort ("0"b);			/* ask user what he wants to do */

     end check_tape_status;
%page;
/* internal procedure to move tape to end of files for appending a new file */
/* enter here if fcb.tape.sequence = -1 and fnbr = 0 */

position_to_end: procedure;

	if abort_sw | cont_sw then return;		/* if a bad error has already ocurred, bail out */
	do fnbr = 1 by 1;
	     secq = fixed (fnbr);			/* file number as char string */
	     call build_tape_attach;			/* go build positioning attach desc */
	     if writeff_sw then
		writeff_sw = "0"b;			/* cant write 1st file as file 1 in append mode */

	     call iox_$attach_name (tape_switch, tape_iocbp, (tape_attach_descp.string), null, rcode);
	     if rcode ^= 0 then do;			/* unable to attach tape file  */
bad_position:
		call com_err_ (rcode, name, "
Error while positioning to append to volume-set.
Attach description is: ""^a""",
		     tape_attach_descp.string);
		call error_report;
		call cntl_cont_abort ("0"b);
		fnbr = 0;
		return;
	     end;
	     call iox_$open (tape_iocbp, Sequential_input, "0"b, rcode); /* open tape file for read */
	     if rcode = error_table_$no_file then
		fcb.tape.sequence = fnbr;		/* this is the file number we will use to append as */
	     else if rcode ^= 0 then
		goto bad_position;
	     call iox_$close (tape_iocbp, rcode);	/* close the tape file */
	     call iox_$detach_iocb (tape_iocbp, rcode);
	     if rcode ^= 0 then			/* error closing or detaching */
		go to bad_position;
	     if fcb.tape.sequence ^= -1 then do;
		rcode = 0;
		call ioa_ ("^a: Tape file ""^a"" will be appended as file #^d", name, fileid, fnbr);
		return;
	     end;
	end;

     end position_to_end;

/* error_report - procedure to report the hardware status in English */

error_report: proc;

	call iox_$control (tape_iocbp, "status", addr (ads), code);
	if code = 0 then do;
	     call ioa_ ("^/^a: Description of error follows: ^/", name);
	     do i = 1 to ads.n_minor;			/* loop and print all minor status codes */
		call convert_status_code_ (ads.minor (i), shortinfo, longinfo);
		call ioa_ ("^a^/", longinfo);
	     end;
	end;
     end error_report;
%page;
build_tape_attach: procedure;
	add_specified_attributes = "1"b;
	if abort_sw | cont_sw then return;		/* if a bad error has already ocurred, bail out */
	tstring = "";				/* initialize  */
	if vol_init then do;			/* only do this once per <volume-group> */
	     if output then
		if fcb.tape.sequence = 0 then
		     writeff_sw = "1"b;
	     tstring = IO_MODULE_NAME (vcb.tape_type);
	     do i = 1 to vcb.nvols;			/* up to vcb.nvols volumes per set allowed */
		if substr (vcb.volid (i), 1, 1) = "-" then do;
		     tstring = tstring || " " || "-volume " || rtrim (vcb.volid (i));
		end;
		else tstring = tstring || " " || rtrim (vcb.volid (i));
		if vcb.comment (i) ^= " " then
		     tstring = tstring || " -comment " ||
			requote_string_ (rtrim (vcb.comment (i)));
	     end;
	     tstring = tstring || " -density " || DENSITY (vcb.density);
	     if vcb.tape_type = IBMNL then
		tstring = tstring || " -no_labels";
	     else if vcb.tape_type = IBMDOS then
		tstring = tstring || " -dos";
	     vol_init = "0"b;			/* reset for rest of <volume-group> */
	     tape_attach_descp.vol_string = tstring;	/* copy volume  portion of attach desc. */
	end;

	tstring = " -retain all";			/* keep volume mounted between attachments */
	if writeff_sw then do;			/* set up so 1st file written will be file 1 on the tape */
	     fcb.tape.sequence = 1;			/* will start at file 1 on tape */
	     secq = fixed (fcb.tape.sequence);
	     writeff_sw = "0"b;			/* reset so we don't come back */
	end;
	if ring_sw then				/* if writing or "-ring" control arg */
	     tstring = tstring || " -ring";
	if fcb.tape.sequence = -1 then		/* if tape positioning required.. */
	     tstring = tstring || " -number " || secq;
	else do;					/* no tape positioning required */
	     if fcb.tape.cmode > 0 then
		tstring = tstring || " -mode " || MODE (fcb.tape.cmode);
	     if fcb.tape.file_id ^= "*" then		/* start options check now */
		tstring = tstring || " -name " || rtrim (fcb.tape.file_id);
	     if fcb.tape.sequence > 0 then do;
		secq = fixed (fcb.tape.sequence);
		tstring = tstring || " -number " || ltrim (secq);
	     end;
	     blkl = fixed (fcb.tape.blklen);		/* convert block length to char data */
	     if output | vcb.tape_type = IBMNL | vcb.tape_type = IBMDOS then do; /* don't set for input on SL tapes */

		if fcb.tape.reclen > 0 then do;	/* set up the real attach desc. */
		     recl = fixed (fcb.tape.reclen);
		     tstring = tstring || " -record " || ltrim (recl);
		end;
		if fcb.tape.blklen > 0 then
		     tstring = tstring || " -block " || ltrim (blkl);
		if fcb.tape.format > 0 then
		     tstring = tstring || " -format " || FORMAT (fcb.tape.format);
		add_specified_attributes = "0"b;
	     end;
	     else if fcb.tape.blklen > 8192 then	/* unless large block wanted */
		tstring = tstring || " -block " || ltrim (blkl);
	     if output then do;			/* only add output options if writing tape */
		if tape_io_data.control.force then
		     tstring = tstring || " -force ";
		if fcb.tape.expiration ^= "" then
		     tstring = tstring || " -expires " || fcb.tape.expiration;
		if fcb.tape.replace_id ^= "" then
		     tstring = tstring || " -replace " || fcb.tape.replace_id;
		if fcb.tape.output_mode > 0 then
		     tstring = tstring || OUTPUT_MODE (fcb.tape.output_mode);
	     end;
	end;
	tape_attach_descp.file_string = tstring;
	tape_attach_descp.string = tape_attach_descp.vol_string || tape_attach_descp.file_string;
	if db_sw then
	     call ioa_ ("Attach desc: ""^a""", tape_attach_descp.string);

     end build_tape_attach;
%page;
/* internal procedure to help user direct the processing of his control file
   after the occurrence of an error or other interruption in execution. */

cntl_cont_abort: procedure (idx);

dcl  idx bit (1) aligned;

	query_info.yes_or_no_sw = "0"b;		/* not looking for yes or no answer */
	abort_sw, control_sw, cont_sw = "0"b;		/* reset switches */
	cant_cont = (fcb.next_fcb_ptr = null & vcb.next_vcb_ptr = null); /* determine if continuation is possible */
	if ^idx then				/* if not control option and */
	     if cant_cont then do;			/* no file/volume groups left to process */
		abort_sw = "1"b;			/* the only possible action is to abort */
		call ioa_ ("^a: Control file exhausted, aborting.", name);
		return;
	     end;
	call ioa_ ("^a: Do you wish to ^[^a^[,^] ^;^2s^]^[^[^/^-^]^a ^]or abort the control file?",
	     name, idx, "control the process", (idx & ^cant_cont), ^cant_cont,
	     (idx & ^cant_cont), "continue to the next <file-group>");
ASK1:
	call command_query_ (addr (query_info), answer, name,
	     "Please answer either ^[""control"", ^]^[""continue"", ^]or ""abort"":", idx, ^cant_cont);

	if answer = "control" & idx then do;
	     call ioa_ ("^a: You may now take action to correct the problem.^/^a",
		name, "Type ""start"" (or ""sr""), when you are ready to resume operations.");
	     control_sw = "1"b;
	     call cu_$cl ();			/* pass control to get_to_cl_$unclaimed_signal */
	end;
	else if answer = "continue" & ^cant_cont then
	     cont_sw = "1"b;
	else if answer = "abort" then
	     abort_sw = "1"b;
	else go to ASK1;

     end cntl_cont_abort;
%page;
%include tape_file_status;
%page;
%include tape_io_data;
%page;
%include device_status;

%include iox_modes;
%page;
%include query_info_;

     end tape_io_interpret_;
