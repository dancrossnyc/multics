/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(76-05-01,Phillipps), approve(), audit(), install():
     old history comments.
     Written by J.B.  Phillipps.
     change 76-09-01 Phillipps.
     change 78-06-01 Jordan.
     change 78-10-01 Jordan.
     change 80-06-01 Jordan to remove backspace characters from usage message.
     change 81-06-01 Jordan to fix some bugs.
  2) change(85-10-01,GWMay), approve(84-02-29,MCR7154),
     audit(86-10-22,Gilcrease), install(86-10-22,MR12.0-1191):
     Complete Rewrite - changed to use mtape_ instead of the tape_ansi_
     and tape_ibm_ i/o modules.  Removed the -io_module(iom) control by
     undocumenting it and replaced it with the -volume_type(-vt) control
     arg when -iom is used -vt is assumed. Removed the -retain control by
     undocumenting and ingnoring the control in the code.
  3) change(88-02-17,GWMay), approve(88-03-14,MCR7856),
     audit(88-03-15,Wallman), install(88-04-19,MR12.2-1039):
     Changed to use -next_file for first open call.
                                                   END HISTORY COMMENTS */

%page;
/****^ PROGRAM DESCRIPTION:

   Command to list tape characteristics and file attributes of
   OS and ANSI standard labeled volumes. 
                                                   END PROGRAM DESCRIPTION */


list_tape_contents: ltc: procedure;

/* based storage */

       dcl arg			char (Larg) aligned based (Parg);

/* builtin functions */

       dcl (addr, char, fixed, length, null, rtrim, search, substr)
				builtin;

/* conditions */

       dcl (cleanup, command_error)	condition;

/* automatic storage */      

       dcl 1 lto aligned,
	 2 print_mode fixed bin,	/* 1 - long info; 2 - brief info;   */
				/* 3 - default info		      */
	 2 list_limit fixed bin (24),	/* list list_limit number           */
           2 volid char (6);		/* volume-set name */


       dcl Larg			fixed bin,
	 Lcurrent_line		fixed bin,
           Parg_list		ptr,
           Parg			ptr,
           Piocb			ptr,
	 Sprint_banner                bit(1),
           cmd_name			char (18),
           code			fixed bin (35),
           number_of_like_files	fixed bin initial (0),
           1 current_file		aligned like mtape_fst,
           current_file_no		fixed bin (24),
	 current_line                 char(256) varying,
           input_attach_args		char (270) aligned varying,
           mtape_attach_desc		char (270) aligned varying,
           mtape_open_desc		char (270) aligned varying,
           n_args			fixed bin,
           next_arg			fixed bin,
	 previous_line		char(256) varying,
           tape_io_switch		char (26),
           temp			fixed bin(24);
		     

/* constants */

       dcl ANSI_TAPE_ATTACH_DESC        char (104) internal static
				options (constant) init
              ("mtape_ -volume_type ansi -no_display -density 1600 -track 9 -error -device 1 -label -no_system -no_wait "),
           ANSI_TAPE_OPEN_DESC          char (46) internal static
				options (constant) init 
	    ("-no_display -not_last_file -next_file"),
           BRIEF			fixed bin (2) internal static
				options (constant) init (2),
           DEFAULT			fixed bin (2) internal static
				options (constant) init (3),
           FALSE			bit(1) internal static 
				options (constant) init ("0"b),
           IBM_TAPE_ATTACH_DESC         char (103) internal static
				options (constant) init
              ("mtape_ -volume_type ibm -no_display -density 1600 -track 9 -error -device 1 -label -no_system -no_wait "),
           IBM_TAPE_OPEN_DESC		char (69) internal static
				options (constant) init
              ("-no_display -not_last_file -next_file -no_system_use -ndos"),
           LONG			fixed bin (2) internal static
				options (constant) init (1),
           TRUE			bit(1) internal static
				options (constant) init ("1"b);

/* error codes */

       dcl (error_table_$bad_arg,
	  error_table_$bad_volid,
	  error_table_$noarg,
	  error_table_$nodescr,
	  error_table_$no_file,
	  error_table_$not_detached)	fixed bin (35) ext;

/* external procedures */

       dcl com_err_			entry options (variable),
	 convert_date_to_binary_	entry (char(*), fixed bin(71), 
				fixed bin(35)),
           cu_$arg_count		entry (fixed bin),
           cu_$arg_list_ptr		entry (ptr),
           cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin,
				fixed bin (35), ptr),
           cv_dec_check_		ext entry (char (*), fixed bin (35))
				returns (fixed bin (35)),
           date_time_$format		entry (char(*), fixed bin(71), char(*),
				char(*)) returns(char(250) var),
           ioa_			entry() options(variable),
           ioa_$rsnnl		entry() options(variable),
           iox_$attach_ioname		entry (char (*), ptr, char (*), 
				fixed bin (35)),
           iox_$close_file		entry (ptr, char(*), fixed bin(35)),
           iox_$control		entry (ptr, char(*), ptr,
				fixed bin(35)),
           iox_$detach		entry (ptr, char(*), fixed bin(35)),
           iox_$open_file		entry (ptr, fixed bin, char(*), 
				bit(1) aligned, fixed bin(35)),
           requote_string_		entry (char (*)) returns (char (*));
%page;     
/* ************************************************************************ */
/*							      */
/* Begin  Execution  Here:					      */
/*   1) set up condition handlers.				      */
/*   2) set up work area.					      */
/*   3) check for arguments,  if none found abort.		      */
/*   4) check arguments for conditional input of first argument.  It must be*/
/*      either "-volume", "-vol" or a value that does not begin with a "-". */
/*   5) If the first input value is the volume identifier, prefice it with  */
/*      the word " -volume ".					      */
/*							      */
/* ************************************************************************ */

program_setup:	     
       do;
          cmd_name = "list_tape_contents";
	Piocb = null();
	on cleanup call janitor;

	mtape_attach_desc = ANSI_TAPE_ATTACH_DESC;
	mtape_open_desc = ANSI_TAPE_OPEN_DESC;
          temp = 0;
	lto.print_mode = DEFAULT;
	lto.list_limit = 99999;	/* set to no limit                  */
				/* set the default IO module	      */
	current_file_no = 0;	/* default start -next_file         */
	Sprint_banner = TRUE;
	number_of_like_files = 0;
	current_file.version = fst_version_1;

	call cu_$arg_count (n_args);	/* get number of args typed in      */
	if n_args = 0 then		
	   code = error_table_$noarg;
	else do;
	   call cu_$arg_list_ptr (Parg_list);
	   next_arg = 1;
	   call get_arg_ptr;
	   if length (arg) = 0 then
	      code = error_table_$noarg;
	   else do;
	      if substr(arg, 1, length("-")) = "-" then
	         if arg = "-volume" | arg = "-vol" then
	            if get_another_arg () then;
	            else code = error_table_$noarg;
	         else
		  code = error_table_$bad_volid;
	     end;
	  end;
%page;
         if code = 0 then do;
	  input_attach_args = " -volume ";
	  lto.volid = arg;
	  tape_io_switch = cmd_name || "." || lto.volid;
	  if search (arg, """ ") ^= 0 then
	     input_attach_args =
	        input_attach_args || requote_string_ ((arg));
	  else
	     input_attach_args = input_attach_args || arg;
	  end;
         else do;
	  call com_err_ (code, cmd_name, "
Usage:  list_tape_contents vn1 {-comment c1} ... vnN {-comment cN} 
                               {-attach_args} {-control_args}

        attach_args:  any combination of mtape_ attach control arguments.");
            call ioa_ ("
        control_args: -volume_type (""ansi""|""ibm""), -vt (""ansi""|""ibm"")
		  -from file_number,   0 < file_number < 10000
		  -to file_number,     0 < file_number < 10000
		  -long,  -lg
		  -brief, -bf");

	  return;
	  end;
         end program_setup;
%page;
/* ************************************************************************ */
/*							      */
/* Argument Processing Loop:					      */
/*    1) get the next arg.					      */
/*    2) if found, check for a length > 0.			      */
/*    3) if ok, then check to see if it is a control for ltc. If so,	      */
/*       evaluate it.					      */
/*       if not, pass it along to mtape_ for evaluation.		      */
/*							      */
/* ************************************************************************ */
process_input_arg_loop:

       do while (get_another_arg ());

          if arg = "-long" | arg = "-lg" then lto.print_mode = LONG;

	else
	   if arg = "-brief" | arg = "-bf" then lto.print_mode = BRIEF;



				/* convert to binary                */
				/* only up to 4 digit file sequence */
				/* numbers allowed                  */
	else
	   if arg = "-from" then 
from_ctl:	   do;
	      if get_another_arg () then do;
	         temp = fixed (cv_dec_check_ ((arg), code), 17);
	         if code = 0 then
		  if temp > 0 & temp < 10000 then
		     current_file_no = temp;
		     else call com_err_ (error_table_$bad_arg, cmd_name, "
-from ^a
 value must be an integer from 1 to 9999.", arg);
	         else call com_err_ (error_table_$bad_arg, cmd_name, "
-from ^a
 value must be an integer from 1 to 9999.", arg);
	         end;
	   else call com_err_ (error_table_$noarg, cmd_name, "
-from requires an operand of an integer from 1 to 9999.");
	   end from_ctl;



				/* convert to binary                */
				/* only up to 4 digit file sequence */
				/* numbers allowed                  */
          else 
	   if arg = "-to" then 
to_ctl:	   do;
	      if get_another_arg () then do;
	         temp = fixed (cv_dec_check_ ((arg), code), 17);
	         if code = 0 then
		  if temp > 0 & temp < 10000 then
		     lto.list_limit = temp;
		  else call com_err_ (error_table_$bad_arg, cmd_name, "
-to ^a
 value must be an integer from 1 to 9999.", arg);
                   else call com_err_ (error_table_$bad_arg, cmd_name, "
-to ^a
 value must be an integer from 1 to 9999.", arg);
	         end;
	   else call com_err_ (error_table_$noarg, cmd_name, "
-to requires an operand of an integer from 1 to 9999.");
	   end to_ctl;



          else
	   if arg = "-io_module" | arg = "-iom" then
iom_ctl:	   do;
	      if get_another_arg () then
	         if arg = "tape_ansi_" then do;
		  mtape_attach_desc = ANSI_TAPE_ATTACH_DESC;
		  mtape_open_desc = ANSI_TAPE_OPEN_DESC;
		  end;
	         else if arg = "ibm" then do;
		  mtape_attach_desc = IBM_TAPE_ATTACH_DESC;
		  mtape_open_desc = IBM_TAPE_OPEN_DESC;
		  end;
	         else call com_err_ (error_table_$bad_arg, cmd_name, "
-io_module(-iom) ^a
 operand value must be ""tape_ansi_"" or ""tape_ibm_"".", arg);
	      else call com_err_ (error_table_$noarg, cmd_name, "
-io_module(-iom) requires an operand of ""tape_ansi_"" or ""tape_ibm_"".");
	      end iom_ctl;



          else
	   if arg = "volume_type" | arg = "-vt" then
vt_ctl:	   do;
	      if get_another_arg () then
	         if arg = "tape_ansi_" then do;
		  mtape_attach_desc = ANSI_TAPE_ATTACH_DESC;
		  mtape_open_desc = ANSI_TAPE_OPEN_DESC;
		  end;
	         else if arg = "ibm" then do;
		  mtape_attach_desc = IBM_TAPE_ATTACH_DESC;
		  mtape_open_desc = IBM_TAPE_OPEN_DESC;
		  end;
	         else call com_err_ (error_table_$bad_arg, cmd_name, "
-volume_type(-vt) ^a
 operand must be ""ansi"" or ""ibm"".", arg);
	      else call com_err_ (error_table_$noarg, cmd_name, "
-volume_type(-vt) requires an operand value of ""ansi"" or ""ibm"".");
	      end vt_ctl;



          else 
	   if arg = "-retain" | arg = "-ret" then
retain_ctl:  do;
	      if get_another_arg () then;
	      end retain_ctl;



          else
mtape_ctls:  do;			/* all remaining input arguments are*/
				/* passed along to mtape_ for	      */
				/* evaluation.		      */
             input_attach_args = input_attach_args || " ";
   	   if search (arg, """ ") ^= 0 then
	      input_attach_args = 
	         input_attach_args || requote_string_ ((arg));
	   else input_attach_args = input_attach_args || arg;

	   end mtape_ctls;
	     

          end process_input_arg_loop;



       /* If any of the arguments were found to be in error, then stop the  */
       /*	program.						      */

       if code ^= error_table_$nodescr then
	return;
%page;
/* ************************************************************************ */
/*							      */
/* Attach mtape_ to the requested volume set.			      */
/*   1) establish a condition handler to trap mtape_ errors.	      */
/*							      */
/* ************************************************************************ */

       mtape_attach_desc = mtape_attach_desc || input_attach_args;

       on command_error code=0;

       call iox_$attach_ioname
	(tape_io_switch, Piocb, (mtape_attach_desc), code);
       if code = error_table_$not_detached | code = 0 then;
       else do;			/* unable to attach tape file       */
	call com_err_ (code, cmd_name, "
While attaching file number ^d, volume ^a.  Attach description:^/^a",
	   current_file_no, lto.volid, mtape_attach_desc);
	call janitor;
	return;
	end;
%page;
/* ************************************************************************ */
/* Print information about the files in the volume set		      */
/* ************************************************************************ */
print_loop:

       do while (current_file_no <= lto.list_limit & code = 0);
          if current_file_no > 0 then
	   call iox_$open_file (Piocb, 4,
	     (mtape_open_desc || " -number" || char(current_file_no)),
	     "0"b, code);
	else
	   call iox_$open_file (Piocb, 4, (mtape_open_desc), "0"b, code);

	if code = 0 then
	   call iox_$control (Piocb, "file_status", addr (current_file), 
	      code);



	if code = 0 then
print_file_info:
	do;
	   if lto.print_mode = BRIEF then
brief_print_mode:
	   do;
	      if Sprint_banner then do;
	         call ioa_ ("
ID                                Number
");
	         Sprint_banner = FALSE;
	         end;
	      call ioa_ ("^32a^3x^5d", current_file.file_id, 
	         current_file.file_seq);
	      end brief_print_mode;



	   else
	      if lto.print_mode = LONG then
long_print_mode:
	      do;
	         call ioa_$rsnnl ("Section:^5x^4d
Created:^1x^8a^20tExpires:^1x^8a^40tGeneration:^1x^4d^58tVersion:^5x^4d
^[Format:^2x^4a^20tMode:^4x^6a^40tBlksize:^3x^5d^58tLrecl:^4x^7d^]",
		  current_line,
		  Lcurrent_line,
		  current_file.begin_vol_index,
		  cv_date (current_file.creation),
		  cv_date (current_file.expiration),
		  current_file.generation,
		  current_file.gen_version,
		  current_file.file_format ^= "",
		  current_file.file_format,
		  current_file.recording_mode,
		  current_file.block_len,
		  current_file.reclen);

	         if current_line = previous_line then
		  number_of_like_files = number_of_like_files + 1;
	         else
		  if number_of_like_files > 0 then do;
		     call ioa_ ("
The last ^d files have the same characteristics.", number_of_like_files + 1);
		     number_of_like_files = 0;
		     end;

	         call ioa_ ("
ID: ^32a^40tNumber:^4x^5d^[^58t^a^]",
		  current_file.file_id,
		  current_file.file_seq,
		  current_line ^= previous_line,
		  current_line);

	         previous_line = current_line;
	         end long_print_mode;



	   else
default_print_mode:
	      do;
	         if Sprint_banner then do;
		  call ioa_ ("
ID                Number   Format   Blksize   Lrecl    Mode   Created   Expires
");
		  Sprint_banner = FALSE;
		  end;

	         call ioa_$rsnnl ("^[****^6x****^4x****^4x**** ^s4"
		  || "^;^3a^5x^5d^2x^7d^3x^6a^]^2x^8a^2x^8a",
		  current_line,
		  Lcurrent_line,
		  current_file.file_format = "",
		  current_file.file_format,
		  current_file.block_len,
		  current_file.reclen,
		  current_file.recording_mode,
		  cv_date (current_file.creation),
		  cv_date (current_file.expiration));

	         if current_line = previous_line then
		  number_of_like_files = number_of_like_files + 1;
	         else
		  if number_of_like_files > 0 then do;
		     call ioa_ ("
The last ^d files have the same characteristics.", number_of_like_files + 1);
		     number_of_like_files = 0;
		     end;

	         call ioa_ ("^[^17a^;^a^/^17x^]^5d^[^7x^a^]",
		     length (rtrim (current_file.file_id)) < 18,
		     current_file.file_id, 
		     current_file.file_seq,
                         current_line ^= previous_line,
                         current_line);

	         previous_line = current_line;
	         end default_print_mode;



	      call iox_$close_file (Piocb,
	         "-no_display -close_position leave", code);

	      end print_file_info;
	   current_file_no = current_file_no + 1; 
	   end print_loop;



       if code = error_table_$no_file | code = 0 then;
       else 
	call com_err_ (code, cmd_name, "
While processing file number ^d, volume ^a
Attach description:^/^a", current_file_no, lto.volid, mtape_attach_desc);

       call janitor;

       if number_of_like_files > 0 then
	call ioa_ ("
The last ^d files have the same characteristics.", number_of_like_files + 1);

       if lto.list_limit = 99999 then;
       else if lto.list_limit > current_file_no then
	call ioa_ ("
Warning: file listing limit ^d, specified exceeds the number of
         files on the tape, ^d.", lto.list_limit, current_file_no);
%page;
/* ************************************************************************ */
/*     sees if 2nd part of two-part option exists			      */
/* ************************************************************************ */

get_another_arg: procedure returns (bit (1));

       if next_arg + 1 > n_args then do;
	code = error_table_$nodescr;
	return (FALSE);
	end;
       else do;			/* 2nd part does exist              */
	next_arg = next_arg + 1;	/* increment the option index	      */
	call get_arg_ptr;
	if code ^= 0 then
	   return (FALSE);
	else
	   return (TRUE);
	end;

       end get_another_arg;


/* ************************************************************************ */
get_arg_ptr: procedure;

       code = 0;
       call cu_$arg_ptr_rel (next_arg, Parg, Larg, code, Parg_list);
       return;
       end get_arg_ptr;
%page;
/* ************************************************************************ */
janitor: procedure;			/* cleanup control file, temp, obj, */
				/* and status segments	      */

       if Piocb ^= null () then do;
	call iox_$close_file (Piocb, "-no_display -close_position leave",
	   code);
	call iox_$detach (Piocb, "-no_display -rewind", code);
	end;
       return;
       end janitor;
%page;
/* ************************************************************************ */
cv_date: proc (julian) returns (char (8) aligned);

				/* date in form: yyddd              */
       dcl julian			char(6) aligned;
 
       dcl clock_value		fixed bin (71),
	 code			fixed bin (35);


       call convert_date_to_binary_ (("January 1, 19" ||
	substr(julian, 2, length("yy")) || " +" ||
	substr(julian, 4, length("ddd")) || "days -1day"),
	clock_value, code);

       if code ^= 0 then
	return (" unknown");

       return (date_time_$format ("multics_date", clock_value, "", ""));

       end cv_date;
%page;
%include mtape_file_status;

     end list_tape_contents;
