/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
ms_table_mgr_:
     procedure;

/* Multi-segment table manager for large system tables. */
/* Written by C. Hornig, June 1979. */
/* Modified by C. Hornig, January 1980, for salvager */
/* Modified by B. Margolin, July 1983, for case-insensitive searching */
/* Modified 1984-07-23 BIM for structure redesign. */
/* Modified 1984-07-31 by Eric Swenson to fix various bugs. */

	declare (
	        (Dirname, Ename)	 character (*),	/* MSF pathname */
	        Create_info_ptr	 pointer,		/* to ms_table_info */
	        Status_ptr		 pointer,		/* to mstb_status */
	        Type		 character (*) aligned,
						/* type of table (for checking) */
	        Tp		 pointer,		/* my data pointer */
	        Hp		 pointer,		/* header pointer */
	        Ne		 fixed bin (35),	/* number of used entries */
	        Key		 character (*),
	        Ep		 pointer,		/* pointer to entry */
	        Record		 fixed bin (35),
	        Code		 fixed (35),
	        Write		 bit (1) aligned,
	        Clock		 fixed bin (35),
	        Locker		 bit (36) aligned,
	        Locked_to_locker	 bit (1) aligned
	        )			 parameter;


/* External Static */

	dcl     error_table_$bad_index fixed bin (35) external static;
	dcl     error_table_$checksum_failure
				 fixed bin (35) external static;
	dcl     error_table_$id_already_exists
				 fixed bin (35) external static;
	dcl     error_table_$id_not_found
				 fixed bin (35) external static;
	dcl     error_table_$inconsistent
				 fixed bin (35) external static;
	dcl     error_table_$invalid_lock_reset
				 fixed bin (35) external;
	dcl     error_table_$locked_by_this_process
				 fixed bin (35) external static;
	dcl     error_table_$namedup	 fixed bin (35) external static;
	dcl     error_table_$no_record fixed bin (35) external static;
	dcl     error_table_$noalloc	 fixed bin (35) external static;
	dcl     error_table_$noentry	 fixed bin (35) external static;
	dcl     error_table_$request_id_ambiguous
				 fixed bin (35) external static;
	dcl     error_table_$unimplemented_version
				 fixed bin (35) external static;

/* External Entries */

	declare delete_$path	 entry (character (*), character (*), bit (36) aligned, character (*),
				 fixed binary (35));
	declare hash_index_		 entry (pointer, fixed bin (21), fixed bin (35), fixed bin (35))
				 returns (fixed bin (35));
	declare hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	declare hcs_$set_max_length_seg
				 entry (pointer, fixed bin (19), fixed bin (35));

	declare mstb_checksum_$sum_entry
				 entry (ptr, fixed bin (35)) returns (fixed bin (18) unsigned aligned);
	declare mstb_checksum_$check_entry
				 entry (ptr, fixed bin (35), fixed bin (18) unsigned aligned)
				 returns (bit (1) aligned);

	declare msf_manager_$open	 entry (character (*), character (*), pointer, fixed bin (35));
	declare msf_manager_$get_ptr	 entry (pointer, unsigned fixed bin (18), bit aligned, pointer, fixed bin (24),
				 fixed bin (35));
	declare msf_manager_$msf_get_ptr
				 entry (pointer, fixed binary, bit (1), pointer, fixed binary (24),
				 fixed binary (35));
	declare msf_manager_$close	 entry (pointer);

	declare set_lock_$lock	 entry (bit (36) aligned, fixed binary, fixed binary (35));
	declare set_lock_$unlock	 entry (bit (36) aligned, fixed binary (35));

/* Automatic */

	declare code		 fixed bin (35);
	declare i			 unsigned fixed bin (18);
	declare bc		 fixed bin (24);
	declare component		 unsigned fixed bin (18);
	declare (enum, record)	 fixed bin (35);
	declare now		 fixed bin (71);
	declare case_ins		 bit (1);
	declare tp		 pointer;
	dcl     ignore_mylock	 bit (1) aligned automatic;
	dcl     unlock_when_done	 bit (1) aligned automatic;

/* Constant */

	dcl     DONT_IGNORE_MYLOCK	 bit (1) aligned internal static options (constant) initial ("0"b);

	declare (addr, addrel, clock, divide, max, mod, null, pointer, size, currentize)
				 builtin;

	declare (cleanup, fixedoverflow)
				 condition;


/* * * * * * * * * * CREATE * * * * * * * * * */

create:
     entry (Dirname, Ename, Create_info_ptr, Code);

/* Create MSF "Path" with characteristics described in ms_table_info. */

	Code = 0;

/**** There is no compatability behind V3, since the reformat was pretty
      drastic. */

	if Create_info_ptr -> ms_table_info.version ^= MS_TABLE_INFO_VERSION_3
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	call msf_manager_$open (Dirname, Ename, tp, code);
	if code ^= error_table_$noentry
	then do;
		if code = 0
		then do;
			Code = error_table_$namedup;
			call msf_manager_$close (tp);
		     end;
		else Code = code;
		return;
	     end;

	call msf_manager_$msf_get_ptr (tp, 0, "1"b, hdrp, bc, code);
						/* create the header */
	if hdrp = null ()
	then do;
		Code = code;
		return;
	     end;
	mt_header.mti = Create_info_ptr -> ms_table_info;
	if mod (mt_header.mti.entry_size, 2) ^= 0
	then mt_header.mti.entry_size = mt_header.mti.entry_size + 1;
	mt_header.used_entries, mt_header.deleted_entries = 0;
	mt_header.entries_per_component = divide (mt_header.max_size - size (comp_header), currentsize (entry), 18);
	mt_header.entry_offset = 1 + divide (size (mt_header) - size (comp_header) - 1, currentsize (entry), 18);
	mt_header.number_components =
	     max (1, divide (mt_header.max_entries + mt_header.entry_offset - 1, mt_header.entries_per_component, 18));
	mt_header.total_entries =
	     (1 + mt_header.number_components) * mt_header.entries_per_component - mt_header.entry_offset;

	mt_header.lock = ""b;
	mt_header.pclock = 0;
	mt_header.meters = 0;
	mt_header.header.pad = ""b;
	now = clock ();
	do i = 0 to mt_header.number_components;
	     call msf_manager_$get_ptr (tp, i, "1"b, segp, bc, code);
	     if code ^= 0
	     then do;
		     Code = code;
		     return;
		end;
	     comp_header.type = mt_header.mti.type;
	     comp_header.dt_created, comp_header.dt_updated = now;
	     comp_header.component = i;
	     call hcs_$set_max_length_seg (segp, (mt_header.max_size), code);
	     call hcs_$set_bc_seg (segp, 36 * mt_header.max_size, code);
	end;

	call set_mt_header_check;
	call msf_manager_$close (tp);
RETURN:
	return;

/* * * * * * * * * DELETE * * * * * * * * * * */


delete:
     entry (Dirname, Ename, Code);

	Code = 0;
	string (delete_options) = ""b;
	delete_options.force, delete_options.directory, delete_options.segment, delete_options.raw = "1"b;

/**** We have to have chased the links already to have validated the suffix */

	call delete_$path (Dirname, Ename, string (delete_options), "ms_table_mgr_$delete", Code);
	return;

/* * * * * * * * * * OPEN * * * * * * * * * * */

open:
     entry (Dirname, Ename, Type, Tp, Hp, Code);

	Code = 0;
	Tp, Hp = null ();

	call msf_manager_$open (Dirname, Ename, tp, code);
	if tp = null ()
	then do;
		Code = code;
		return;
	     end;
	call get_header;
	if mt_header.version ^= MS_TABLE_INFO_VERSION_3
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;
	if (mt_header.mti.type ^= Type) & (Type ^= "")
	then do;
		Code = error_table_$inconsistent;
		return;
	     end;
	Hp = addr (mt_header.header_data);
	Tp = tp;
	return;

/* * * * * * * * * * VERIFY * * * * * * * * * */


/**** Verify, called per-bootload, revalidates all the checksums. 
      It stops at the first problem. It is assumed that the salvager
      is used to make a complete survey of the data. */


verify:
     entry (Tp, Code);

	Code = 0;
	tp = Tp;

	call get_header;				/* This will abort if the header info fails to check */
	do i = 0 to mt_header.number_components;
	     call get_component (i);
	     if comp_header.type ^= mt_header.mti.type | comp_header.component ^= i
		| comp_header.dt_updated ^= mt_header.comp_hdr.dt_updated
	     then do;
		     Code = error_table_$inconsistent;
		     return;
		end;
	end;
	return;

/* * * * * * * * * * TABLE_INFO * * * * * * * * * * */

table_data:
     entry (Tp, Create_info_ptr, Hp, Ne, Code);

	Code, Ne = 0;
	Hp = null ();
	tp = Tp;

	call get_header;
	Create_info_ptr -> ms_table_info = mt_header.mti;
	Hp = pointer (hdrp, size (mt_header));
	Ne = mt_header.used_entries - mt_header.deleted_entries;
	return;

/* * * * * * * * * * STATUS * * * * * * * * */

status:
     entry (Tp, Status_ptr, Code);
	Code = 0;
	tp = Tp;
	call get_header;

	if Status_ptr -> mstb_status.version ^= MSTB_STATUS_VERSION_1
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	Status_ptr -> mstb_status = mt_header.header, by name;
	Status_ptr -> mstb_status.version = MSTB_STATUS_VERSION_1;
						/* vapped by by-name */
	return;

/* * * * * * * * * * CLOSE * * * * * * * * * */

close:
     entry (Tp, Code);

	Code = 0;
	tp = Tp;

	call msf_manager_$close (tp);
	return;

/* * * * * * * * * * NEW_ENTRY_IGNORE_MYLOCK * * * * * * * * * */

/**** Same as NEW__ENTRY below, but does not error return on mylock error.*/

new_entry_ignore_mylock:
     entry (Tp, Key, Ep, Code);

	ignore_mylock = "1"b;
	goto NEW_ENTRY_JOIN;

/* * * * * * * * * * NEW_ENTRY * * * * * * * * * */

/**** A new-entry will be filled in and returned to us with a call to
      update_entry. */

new_entry:
     entry (Tp, Key, Ep, Code);

	ignore_mylock = "0"b;

NEW_ENTRY_JOIN:
	Code = 0;
	Ep = null ();
	tp = Tp;

	call get_header;				/* Must get header before calling lock */

	on cleanup call unlock ();
	call lock (ignore_mylock);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	if hash_search (Key, "0"b)
	then do;
		Code = error_table_$id_already_exists;
		go to NEW_ENTRY_UNLOCK_RETURN;
	     end;

	if ep = null ()
	then do;
		Code = error_table_$noalloc;
		go to NEW_ENTRY_UNLOCK_RETURN;
	     end;

/**** Past here we will not unlock the lock */

	entry.key = Key;
	entry.inconsistent,				/* checksum will fail, its not set */
	     entry.used = "1"b;
	mt_header.used_entries = mt_header.used_entries + 1;
	call set_checkpoint;
	Ep = addr (entry.entry_data);
	return;

NEW_ENTRY_UNLOCK_RETURN:
	call unlock;
	return;

/* * * * * * * * * * FIND_ENTRY * * * * * * * * * */

find_entry:
     entry (Tp, Key, Ep, Write, Clock, Code);

	case_ins = "0"b;
	go to FIND_ENTRY_COMMON;

find_entry_case_ins:
     entry (Tp, Key, Ep, Write, Clock, Code);

	case_ins = "1"b;

FIND_ENTRY_COMMON:
	Code = 0;
	Ep = null ();
	tp = Tp;

	call get_header;
	if Write
	then do;
		call lock (DONT_IGNORE_MYLOCK);
		if code ^= 0
		then do;
			Code = code;
			return;
		     end;
	     end;
	else Clock = mt_header.pclock;

	if ^hash_search (Key, case_ins)
	then do;
		Code = error_table_$id_not_found;
		go to FIND_ERROR_RETURN;
	     end;
	if ep = null ()
	then do;					/* Ambiguous */
		Code = error_table_$request_id_ambiguous;
		go to FIND_ERROR_RETURN;
	     end;

	begin;
	     dcl	   1 copy_entry	      aligned like entry automatic;

	     copy_entry = ep -> entry;
	     copy_entry.checksum = 0;

	     if ^mstb_checksum_$check_entry (addr (copy_entry), divide (currentsize (entry), 2, 35, 0),
		(entry.checksum))
	     then Code = error_table_$checksum_failure;
	end;

	if Write
	then entry.inconsistent = "1"b;
	Ep = addr (entry.entry_data);
	return;

FIND_ERROR_RETURN:
	if Write
	then call unlock;
	return;

/* * * * * * * * * * DELETE_ENTRY_IGNORE_MYLOCK * * * * * * * * * */

delete_entry_ignore_mylock:
     entry (Tp, Key, Code);

	ignore_mylock = "1"b;
	goto DELETE_ENTRY_JOIN;

/* * * * * * * * * * DELETE_ENTRY * * * * * * * * * */

delete_entry:
     entry (Tp, Key, Code);

	ignore_mylock = "0"b;

DELETE_ENTRY_JOIN:
	Code = 0;
	tp = Tp;

	call get_header;
	on cleanup call unlock;
	call lock (ignore_mylock);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;
	if ^hash_search (Key, "0"b)
	then do;
		Code = error_table_$id_not_found;
		goto DELETE_ENTRY_UNLOCK_RETURN;
	     end;

	entry.deleted = "1"b;
	entry.checksum = 0;
	entry.checksum = mstb_checksum_$sum_entry (ep, divide (currentsize (entry), 2, 35, 0));
	mt_header.deleted_entries = mt_header.deleted_entries + 1;

	call set_checkpoint;

DELETE_ENTRY_UNLOCK_RETURN:
	call unlock ();
	return;

/* * * * * * * * * * ABS_ENTRY * * * * * * * ** * */

abs_entry:
     entry (Tp, Record, Key, Write, Ep, Clock, Code);

	Code = 0;
	Ep = null ();
	Key = "";
	tp = Tp;

	call get_header;
	if Write
	then do;
		on cleanup call unlock;
		call lock (DONT_IGNORE_MYLOCK);
		if code ^= 0
		then do;
			Code = code;
			return;
		     end;
	     end;
	else Clock = mt_header.pclock;

	record = Record - 1;
	if record + mt_header.entry_offset >= mt_header.total_entries
	then do;
		Code = error_table_$bad_index;
		go to FIND_ERROR_RETURN;
	     end;
	call get_entry (record);
	if entry.deleted | ^entry.used
	then do;
		Code = error_table_$no_record;
		go to FIND_ERROR_RETURN;
	     end;
	begin;

	     dcl	   1 copy_entry	      aligned like entry automatic;

	     copy_entry = ep -> entry;
	     copy_entry.checksum = 0;

	     if ^mstb_checksum_$check_entry (addr (copy_entry), divide (currentsize (entry), 2, 35, 0),
		(entry.checksum))
	     then Code = error_table_$checksum_failure;
	end;

	Ep = addr (entry.entry_data);
	Key = entry.key;
	if Write
	then entry.inconsistent = "1"b;
	return;

/* * * * * * * * * * UPDATE_ENTRY_DONT_UNLOCK * * * * * * * * * */

update_entry_dont_unlock:
     entry (Tp, Ep, Code);

	unlock_when_done = "0"b;
	goto UPDATE_ENTRY_JOIN;

/* * * * * * * * * * UPDATE_ENTRY * * * * * * * * * * */

update_entry:
     entry (Tp, Ep, Code);

	unlock_when_done = "1"b;

UPDATE_ENTRY_JOIN:
	tp = Tp;
	Code = 0;
	call get_header;

/* Uk. We have to turn one of their ep's into one of ours. */

	begin;
	     declare 1 dummy_entry	      aligned like entry;
	     ep = addwordno (Ep, -(wordno (addr (dummy_entry.entry_data)) - wordno (addr (dummy_entry))));
	end;

/**** Null out the caller-supplied Ep so that caller will not unknowingly
      update the entry after our checksum has been calculated. */

	Ep = null ();

	entry.inconsistent = "0"b;
	entry.checksum = 0;
	entry.checksum = mstb_checksum_$sum_entry (ep, divide (currentsize (entry), 2, 35, 0));
	call set_checkpoint;
	if unlock_when_done
	then call unlock ();
	return;


lock:
     entry (Tp, Code);

	tp = Tp;
	Code = 0;
	call get_header;
	call lock (DONT_IGNORE_MYLOCK);
	Code = code;
	return;


unlock:
     entry (Tp, Code);

	tp = Tp;
	Code = 0;
	call get_header;
	call unlock;
	return;

check_lock:
     entry (Dirname, Ename, Locker, Locked_to_locker);

	/*** WARNING - if we make set_lock_ use the HC, this will need to be changed. */

	Locked_to_locker = "0"b;
	call open (Dirname, Ename, "", tp, hdrp, code);
	if code ^= 0
	then return;				/* broken table */
	if Locker = mt_header.lock
	then do;
		Locked_to_locker = "1"b;
		call unlock;
	     end;
	call close (tp, (0));			/* if there is a static opening it will be undisturbed. */
	return;

get_change_clock:
     entry (Tp, Clock, Code);

	tp = Tp;
	Code = 0;
	call get_header;
	Clock = mt_header.pclock;
	return;


/* * * * * * * * * * GET_HEADER * * * * * * * * * */

get_header:
     procedure;

	call msf_manager_$get_ptr (tp, 0, "0"b, hdrp, bc, code);
	if hdrp = null ()
	then do;
		Code = code;
		goto RETURN;
	     end;
	segp = hdrp;
	component = 0;
	call check_mt_header_check;			/* aborts us on error */
     end;

/* * * * * * * * * * GET_COMPONENT * * * * * * * * * * */

get_component:
     procedure (Component);

	declare Component		 unsigned fixed bin (18) parameter;

	component = Component;
	call msf_manager_$get_ptr (tp, component, "0"b, segp, bc, code);
	if segp = null ()
	then do;
		Code = code;
		goto RETURN;
	     end;
	return;
     end;

/* * * * * * * * * * SET_CHECKPOINT * * * * * * * * * */

set_checkpoint:
     procedure;

	declare now		 fixed bin (71);

	now = clock ();
	do i = 0 to mt_header.number_components;
	     call get_component (i);
	     comp_header.dt_updated = now;
	end;
	on fixedoverflow
	     begin;
		mt_header.pclock = 1;
		go to SET_CLOCK;
	     end;
(fixedoverflow):
	mt_header.pclock = mt_header.pclock + 1;
SET_CLOCK:
	return;
     end set_checkpoint;

/* * * * * * * * * * HASH_SEARCH * * * * * * * * * */

hash_search:
     procedure (Key, Case_ins) returns (bit aligned);

	declare (
	        Key		 character (*),
	        Case_ins		 bit (1)
	        )			 parameter;
	declare (hash_key, match_key)	 character (32) aligned;
	declare (found_one, case_ins)	 bit (1);
	declare save_ep		 ptr;
	declare hash		 fixed bin (35);
	declare saved_clock		 fixed bin (35);

	hash_key = lowercase (Key);
	case_ins = Case_ins;
	if case_ins
	then match_key = hash_key;			/* Lowercase */
	else match_key = Key;			/* Normal */

	hash = hash_index_ (addr (hash_key), 32, 1, mt_header.total_entries);

	if mt_header.keep_meters
	then mt_header.meters.searches = mt_header.meters.searches + 1;

RETRY:
	saved_clock = mt_header.pclock;
	found_one = "0"b;
	save_ep = null ();
	do enum = hash to mt_header.total_entries - mt_header.entry_offset - 1, 0 to hash - 1;
	     call get_entry (enum);

	     if mt_header.keep_meters
	     then mt_header.meters.entries_examined = mt_header.meters.entries_examined + 1;
	     if ^entry.used
	     then do;				/* End of hash bucket */
		     if case_ins & found_one
		     then do;
			     ep = save_ep;
			     go to RETURN_1;
			end;
		     goto RETURN_0;
		end;
	     if ^entry.deleted
	     then do;
		     if case_ins
		     then do;			/* Case-insensitive match */
			     if lowercase (entry.key) = match_key
			     then if found_one
				then do;
					ep = null ();
						/* This nonsense combination */
					go to RETURN_1;
						/* indicates ambiguous match */
				     end;
				else do;
					found_one = "1"b;
					save_ep = ep;
						/* Save for later */
				     end;
			end;			/* Case-sensitive match */
		     else if entry.key = match_key
		     then go to RETURN_1;
		end;
	end;
	if found_one
	then do;
		ep = save_ep;
		go to RETURN_1;
	     end;
	else do;
		ep = null ();
		go to RETURN_0;
	     end;

RETURN_0:
	if saved_clock ^= mt_header.pclock
	then go to RETRY;
	return ("0"b);
RETURN_1:
	if saved_clock ^= mt_header.pclock
	then go to RETRY;
	return ("1"b);

lowercase:
     proc (String) returns (char (32)) reducible;

	dcl     String		 char (*) parameter;
	dcl     (
	        LOWER		 init ("abcdefghijklmnopqrstuvwxyz"),
	        UPPER		 init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
	        )			 char (26) int static options (constant);
	dcl     translate		 builtin;

	return (translate (String, LOWER, UPPER));

     end lowercase;


     end hash_search;

/* * * * * * * * * * GET_ENTRY * * * * * * * * * */

get_entry:
     procedure (Enum);

	declare Enum		 fixed bin (35) parameter;
	declare enum		 fixed bin (35);
	declare ecomp		 unsigned fixed bin (18);

	enum = Enum + mt_header.entry_offset;
	ecomp = divide (enum, mt_header.entries_per_component, 18);
	if ecomp ^= component
	then call get_component (ecomp);
	ep = pointer (segp, size (comp_header) + (currentsize (entry)) * mod (enum, mt_header.entries_per_component));
     end get_entry;

lock:
     procedure (P_ignore_mylock);

	dcl     P_ignore_mylock	 bit (1) aligned parameter;

	call set_lock_$lock (mt_header.lock, 5, code);
	if (code = error_table_$locked_by_this_process & P_ignore_mylock) | code = error_table_$invalid_lock_reset
	then code = 0;
	return;
     end lock;

unlock:
     procedure;

	call set_lock_$unlock (mt_header.lock, code);
	return;
     end unlock;

set_mt_header_check:
     procedure;

	mt_header.perm_data_checksum = mt_header_check ();
	return;
     end set_mt_header_check;

mt_header_check:
     procedure returns (fixed bin (35));

	return (mt_header.number_components + mt_header.entries_per_component + mt_header.entry_offset
	     + mt_header.total_entries + mt_header.header_size + mt_header.entry_size);
     end mt_header_check;

check_mt_header_check:
     procedure;

	if mt_header.perm_data_checksum ^= mt_header_check ()
	then do;
		Code = error_table_$inconsistent;
		go to RETURN;
	     end;
     end check_mt_header_check;

/* format: off */
%page;%include ms_table_info;
%page;%include ms_table_status;
%page;%include mstb_format;
%page;%include delete_options;
/* format: on */

     end ms_table_mgr_;
