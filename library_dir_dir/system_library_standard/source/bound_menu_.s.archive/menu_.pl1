/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

menu_:
     procedure;
	return;

/* Subroutines for Menu Presentation.  MTB - 493

   James R. Davis January - February 1981

   entries here:

   create
   display
   get_choice
   describe
   destroy
   list
   store
   retrieve

*/

/*
   Maintained by Suzanne L. Krupp

   Modified 06/05/81 by Suzanne Krupp to include store_menu and retrieve_menu
   entry points.

   Modified 06/29/81 to make store_menu and retrieve_menu entry points use
   value segments (so that we can now store more than one menu
   per segment.

   Modified 06/29/81 to fix bug in menu_$get_choice where it can't handle a
   function_key_data_ptr.

   Modified by BIM July 1981 for to remove the _menu from the names,
   fix up the value stuff, and add the delete and list entrypoints.

   Auditing changes BIM October 1981.

   Modified January 1981 by Chris Jones to make menus case-insensitive when possible.

   84-03-15 Davids: Modified call to hcs_$initiate in the LIST procedure
   to use the valiables dname and ename which are input to the LIST proc
   instead of using P_dname and P_ename which are input to the list entry
   which calls the LIST proc. A procedure should use its own parameters.
   This answers TR15713.

   84-09-18 Davids: Added calls to window_$sync after all calls to
   window_$overwrite_text. These occur in the display_menu entry and in the
   get_choice entry. This should prevent the pause that can occur when a menu
   is being displayed and the long delay that can occur between the time the
   user makes a selection and the time the selection is flaged with an asterix.
   Also deleted declared but unreferenced variables.
*/

/* ***** INTERNAL REPRESENTATION OF A MENU ***** */

	declare 1 menu		 aligned based (menu_ptr),
		2 version		 char (8) init (MENU_VERSION),
		2 window_requirements,		/* size of menu */
		  3 height	 fixed bin,	/* number of lines */
		  3 width		 fixed bin,
		2 n_options	 fixed bin,
		2 flags		 unaligned,
		  3 case_insensitive bit (1) unal,
		  3 mbz1		 bit (17) unal,
		2 asterixed_option	 fixed bin (17) unal,
						/* or zero if none */
		2 option_info	 (61),		/* max is 61 */
		  3 key		 char (1) unal,
		  3 pad		 bit (27) unal,
		  3 line		 fixed bin,	/* where to echo */
		  3 col		 fixed bin,
		2 lines		 (lines_alloc refer (menu.height)) unal char (chars_alloc refer (menu.width));

	declare menu_ptr		 pointer;
	declare menu_segment_ptr	 ptr;

	declare MENU_VERSION	 char (8) aligned internal static options (constant) init ("menu_v_3");

	declare lines_alloc		 fixed bin (21);
	declare chars_alloc		 fixed bin (21);


/* Parameters of the various entries */

	declare (
	        P_choices		 (*) char (*) varying,
	        P_create_sw		 bit (1) aligned,
	        P_dname		 char (*),
	        P_ename		 char (*),
	        P_menu_name		 char (*),
	        P_headers		 (*) char (*) varying,
	        P_trailers		 (*) char (*) varying,
	        P_format_ptr	 pointer,
	        P_keys		 (*) char (1) unal,
	        P_areap		 pointer,
	        P_needs_ptr		 pointer,
	        P_menu_ptr		 pointer,
	        P_code		 fixed bin (35),
	        P_window		 pointer,
	        P_function_key_info_ptr
				 pointer,
	        P_fkeyp		 bit (1) aligned,
	        P_selection		 fixed bin,
	        P_starname		 character (*),
	        P_list_ptr		 pointer,
	        P_mli_version	 fixed bin
	        )			 parameter;

	declare (
	        error_table_$unimplemented_version,
	        error_table_$noentry
	        )			 fixed bin (35) external static;

	declare created_sw		 bit (1) aligned;

	declare (addr, copy, currentsize, dimension, divide, hbound, index, length, lbound, max, mod, null, sign)
				 builtin;

	declare add_char_offset_	 entry (pointer, fixed bin (21)) returns (pointer) reducible;
	declare get_system_free_area_	 entry () returns (ptr);
	declare get_user_free_area_	 entry () returns (pointer);
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	declare hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	declare hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	declare value_$init_seg	 entry (ptr, fixed bin, ptr, fixed bin (19), fixed bin (35));
	declare value_$get_data	 entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35))
				 ;
	declare value_$set_data	 entry (ptr, bit (36) aligned, char (*), ptr, fixed bin (18), ptr, ptr,
				 fixed bin (18), fixed bin (35));
	declare value_$list_data_names entry (pointer, bit (36) aligned, pointer, pointer, pointer, fixed binary (35));


	declare cleanup		 condition;

create_menu:
create:
     entry (P_choices, P_headers, P_trailers, P_format_ptr, P_keys, P_areap, P_needs_ptr, P_menu_ptr, P_code);
common_create:
	begin;
	     declare n_choices	      fixed bin;
	     declare (header_ct, menu_ct, trailer_ct)
				      fixed bin;	/* lines devoted to each */
	     declare menu_et_$too_few_keys  fixed bin (35) ext static;
	     declare menu_et_$higher_than_max
				      fixed bin (35) external static;
	     declare menu_et_$too_many_options
				      fixed bin (35) ext static;
	     declare menu_et_$keys_not_unique
				      fixed bin (35) ext static;

	     P_code = 0;
	     P_menu_ptr = null ();
	     menu_format_ptr = P_format_ptr;
	     menu_requirements_ptr = P_needs_ptr;
	     n_choices = dimension (P_choices, 1);

/* check validity of parms */
	     if menu_format.version ^= menu_format_version_1 | menu_requirements.version ^= menu_requirements_version_1
	     then call ERROR (error_table_$unimplemented_version);
	     if menu_format.pad ^= "0"b
	     then call ERROR (error_table_$unimplemented_version);
	     if n_choices = 0			/* Perhaps this should be an error? */
	     then ;				/* nothing to display */
	     if n_choices > dimension (P_keys, 1)
	     then call ERROR (menu_et_$too_few_keys);
	     if n_choices > hbound (menu.option_info, 1)
	     then call ERROR (menu_et_$too_many_options);
	     if ^all_keys_unique (n_choices)
	     then call ERROR (menu_et_$keys_not_unique);

/* parms look good, now calculate size of screen image so we can allocate it */
	     header_ct = sign (length (P_headers (1))) * dimension (P_headers, 1);
	     menu_ct = divide (n_choices, menu_format.n_columns, 17) + sign (mod (n_choices, menu_format.n_columns));
	     trailer_ct = sign (length (P_trailers (1))) * dimension (P_trailers, 1);
	     lines_alloc = header_ct + menu_ct + trailer_ct;

	     if menu_format.max_height > 0
	     then if lines_alloc > menu_format.max_height
		then call ERROR (menu_et_$higher_than_max);

	     chars_alloc = menu_format.max_width;

	     begin;
		declare based_area		 area based (areap);
		declare areap		 ptr;

		if P_areap ^= null
		then areap = P_areap;
		else areap = get_system_free_area_ ();

		allocate menu in (based_area);
	     end;

/* now fill in data structure */

	     menu.version = MENU_VERSION;
	     menu.height = lines_alloc;
	     menu.width = chars_alloc;
	     menu.n_options = n_choices;
	     menu.flags = ""b;
	     menu.case_insensitive = not_mixed_cases (n_choices);
	     menu.asterixed_option = 0;

	     menu.lines (*) = " ";
	     call format_screen ();
	     P_menu_ptr = menu_ptr;

	     call fill_requirements_from_menu ();

	     return;

all_keys_unique:
     procedure (kc) returns (bit (1) aligned);
	declare kc		 fixed bin parameter;
						/* how many matter */
	declare i			 fixed bin;
	declare (index, substr)	 builtin;
	declare key_overlay		 char (kc) defined (P_keys);
	do i = 1 to kc - 1;
	     if index (substr (key_overlay, kc + 1), P_keys (i)) > 0
	     then return ("0"b);			/* a match ! */
	end;
	return ("1"b);
     end all_keys_unique;

not_mixed_cases:
     proc (kc) returns (bit (1) unal);

	dcl     kc		 fixed bin;

	dcl     key_overlay		 char (kc) defined (P_keys);
	dcl     UPPER_CASE_LETTERS	 char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ") internal static options (constant);
	dcl     LOWER_CASE_LETTERS	 char (26) init ("abcdefghijklmnopqrstuvwxyz") internal static options (constant);

	if (search (key_overlay, UPPER_CASE_LETTERS) = 0) & (search (key_overlay, LOWER_CASE_LETTERS) = 0)
	then return ("0"b);
	if (search (key_overlay, UPPER_CASE_LETTERS) ^= 0) & (search (key_overlay, LOWER_CASE_LETTERS) ^= 0)
	then return ("0"b);
	return ("1"b);

     end not_mixed_cases;



/* BUILD SCREEN IMAGE:

   +------------------------------------------------------+ --
   |_HEADER_ONE___________________________________________| header_ct = 2
   |_HEADER_TWO___________________________________________| __
   |_(1)_choice_one_|_(3)_choice_three_|_(4)_choice four__| menu_ct = 2
   |_(2)_choice_two_|__________________|__________________| __
   |_TRAILER______________________________________________| trailer_ct = 1

   <- chars_per_box ->

   choices are positioned  as evenly as possible:  never more than one extra
   choice per column.  The portion of the screen devoted to choices begins
   at the "first_option_char"'th char of the display image (lines).  The
   choices are divided into "boxes".  If the number of choices is a multiple
   of the  number of columns, the boxes are an array "n_columns" wide, and
   choices/n_columns high.  And if there is a remainder R, the first R columns
   get an extra choice.

*/

format_screen:
     procedure;
	declare i			 fixed bin;
	declare (first_header_line, first_menu_line, first_trailer_line)
				 fixed bin;
	declare chars_per_box	 fixed bin;
	declare first_option_char	 fixed bin (21);
	declare extra		 fixed bin;

	first_header_line = 1;
	first_menu_line = first_header_line + header_ct;
	first_trailer_line = first_menu_line + menu_ct;

/* the headers and trailers are easy */
	do i = 1 to header_ct;
	     menu.lines (first_header_line + i - 1) =
		format (P_headers (i), menu_format.center_headers, menu_format.pad_char, menu_format.max_width);
	end;
	do i = 1 to trailer_ct;
	     menu.lines (first_trailer_line + i - 1) =
		format (P_trailers (i), menu_format.center_trailers, menu_format.pad_char, menu_format.max_width);
	end;

	chars_per_box = divide (menu_format.max_width, menu_format.n_columns, 17);
	extra = mod (menu_format.max_width, menu_format.n_columns);
	first_option_char = (header_ct * menu.width) + 1;

format_boxes:
	begin;
	     declare 1 boxes	      (0:menu_ct - 1) defined (menu.lines) position (first_option_char),
		     2 row	      (0:menu_format.n_columns - 1),
		       3 constant,
		         4 lp	      char (2) unal,/* " (" */
		         4 k	      char (1) unal,/* key image */
		         4 rp	      char (2) unal,/* ") " */
		       3 name	      char (chars_per_box - 5) unal,
		     2 pad	      char (extra) unal;
	     declare menu_line	      fixed bin;
	     declare menu_row	      fixed bin;

	     do i = 1 to hbound (P_choices, 1);
		menu.option_info (i).key = P_keys (i);
		call get_box_coords (i, menu_row, menu_line);
		menu.option_info (i).line = first_menu_line + menu_line;
		menu.option_info (i).col = 3 + menu_row * chars_per_box;

		boxes (menu_line).row (menu_row).lp = " (";
		boxes (menu_line).row (menu_row).k = P_keys (i);
		boxes (menu_line).row (menu_row).rp = ") ";
		boxes (menu_line).row (menu_row).name = P_choices (i);
	     end;
	end format_boxes;
	return;

get_box_coords:
     procedure (mi, bx, by);
	declare mi		 fixed bin parameter;
						/* input */
	declare (by, bx)		 fixed bin parameter;
						/* output */

	by = mod (mi - 1, menu_ct);
	bx = divide (mi - 1, menu_ct, 17);
     end get_box_coords;


/* This has an implementation limit of 200 chars / line, but
   surely that is reasonable? - if I use returns (char(*)) I become
   non-quick */
format:
     procedure (raw, center, padc, ll) returns (char (200) varying);
	declare raw		 char (*) varying parameter;
	declare center		 bit (1) unal parameter;
	declare padc		 char (1) aligned parameter;
	declare ll		 fixed bin parameter;
	declare lbuf		 char (200) varying;
	declare lct		 fixed bin;

	if ^center
	then lbuf = raw;
	else do;
		lct = divide (max (0, ll - length (raw)), 2, 17);
		lbuf = copy (padc, lct);
		lbuf = lbuf || raw;
		lbuf = lbuf || copy (padc, lct + mod (lct, 2));
	     end;
	return (lbuf);
     end format;
     end format_screen;

	end common_create;

display_menu:
display:
     entry (P_window, P_menu_ptr, P_code);
	call setup ();
	begin;

	     declare window_display_	      entry (pointer, (*) char (*) unal, fixed bin (35));

	     call window_display_ (P_window, menu.lines, P_code);
	     if menu.asterixed_option > 0
	     then do;
		     call cursor_to_option ((menu.asterixed_option));
		     call window_$overwrite_text (P_window, "*", P_code);
		end;
	     call window_$sync (P_window, P_code);
	end;					/* begin block */
	return;

get_choice:
     entry (P_window, P_menu_ptr, P_function_key_info_ptr, P_fkeyp, P_selection, P_code);
	call setup ();
	function_key_data_ptr = P_function_key_info_ptr;
	if function_key_data_ptr ^= null
	then if function_key_data.version ^= function_key_data_version_1
	     then call ERROR (error_table_$unimplemented_version);

	begin;
	     declare c		      char (1);
	     declare cc		      char (1);
	     declare ck		      char (1);
	     declare opx		      fixed bin;	/* index thru options */
	     declare possible	      bit (1) aligned;
	     declare fkeyb		      char (32) varying;
	     declare pseq		      char (pseql) based (pseqp);
	     declare pseql		      fixed bin (21);
	     declare pseqp		      ptr;

	     if menu.asterixed_option ^= 0
	     then do;
		     call cursor_to_option ((menu.asterixed_option));
		     call window_$overwrite_text (P_window, menu.option_info (menu.asterixed_option).key, P_code);
		     if P_code ^= 0
		     then go to RETURN;
		     call window_$sync (P_window, P_code);
		     if P_code ^= 0
		     then go to RETURN;
		end;

	     call cursor_to_option (1);
	     do while ("1"b);			/* until valid key hit */
		c = read_a_char ();
		if menu.case_insensitive
		then cc = upper_case (c);
		else cc = c;

		do opx = 1 to menu.n_options;
		     if menu.case_insensitive
		     then ck = upper_case ((menu.option_info (opx).key));
		     else ck = menu.option_info (opx).key;
		     if cc = ck
		     then do;
			     call cursor_to_option (opx);
			     P_fkeyp = "0"b;
			     P_selection = opx;

			     call window_$overwrite_text (P_window, "*", P_code);
			     if P_code ^= 0
			     then go to RETURN;
			     menu.asterixed_option = opx;
			     call window_$sync (P_window, P_code);
			     go to RETURN;


			end;			/* matching option */
		end;				/* loop thru options */
		if function_key_data_ptr ^= null
		then possible = "1"b;		/* enter loop */
		else possible = "0"b;
		fkeyb = c;
		do while (possible);
		     possible = "0"b;
		     do opx = lbound (function_key_data.function_keys, 1)
			to hbound (function_key_data.function_keys, 1);
			pseql = function_key_data.function_keys (opx, KEY_PLAIN).sequence_length;
			pseqp =
			     add_char_offset_ (function_key_data.seq_ptr,
			     (function_key_data.function_keys (opx, KEY_PLAIN).sequence_index) - 1);

			if length (pseq) = length (fkeyb) & pseq = fkeyb
			then do;
				P_fkeyp = "1"b;
				P_selection = opx;
				return;
			     end;			/* match - Win */
			else if ^possible		/* look for possibles */
			then if length (pseq) > length (fkeyb)
						/* we hope to match if we grow */
			     then if index (pseq, fkeyb) = 1
						/* pseq begins with fkeyb */
				then possible = "1"b;
		     end;				/* loop thru f keys */
		     if possible
		     then fkeyb = fkeyb || read_a_char ();
		end;				/* if even one has hopes, keep trying */

/* fall out, no match */
		call window_$bell (P_window, (0));

	     end;					/* loop waiting for good one */

read_a_char:
     procedure returns (char (1));
	declare ac		 char (1);
	begin;
	     declare break		      character (1) varying;
	     call window_$get_unechoed_chars (P_window, 1, ac, (0), break, P_code);
	     if P_code ^= 0
	     then goto ERROR_EXIT;
	     if length (break) = 1
	     then ac = break;
	     /*** else ac already has the right thing */
	end;
	return (ac);
     end read_a_char;

upper_case:
     proc (c) returns (char (1));

	dcl     c			 char (1);

	if (rank (c) < rank ("a")) | (rank (c) > rank ("z"))
	then return (c);
	else return (byte (rank (c) - (rank ("a") - rank ("A"))));

     end upper_case;
	end;					/* begin block */

store_menu:
store:
     entry (P_dname, P_ename, P_menu_name, P_create_sw, P_menu_ptr, P_code);

	call setup ();
	menu_segment_ptr = null;
	created_sw = "0"b;
	on cleanup call term_menu ();

	call hcs_$initiate (P_dname, P_ename, "", 0, 1, menu_segment_ptr, P_code);
	if P_code = error_table_$noentry & P_create_sw
	then do;
		created_sw = "1"b;
		call hcs_$make_seg (P_dname, P_ename, "", RW_ACCESS_BIN, menu_segment_ptr, P_code);
		if menu_segment_ptr = null
		then go to SEG_ERR;
		call value_$init_seg (menu_segment_ptr, 0, null, 0, P_code);
		if P_code ^= 0
		then go to SEG_ERR;

	     end;

	if menu_segment_ptr = null
	then go to SEG_ERR;

	menu.asterixed_option = 0;

	call value_$set_data (menu_segment_ptr, "01"b, value_name (P_menu_name), P_menu_ptr, currentsize (menu), null,
	     null, (0), P_code);

	if P_code = 0				/* don't let term_menu delete new segment */
	then created_sw = "0"b;			/* if we succeeded */
	call term_menu ();

	return;


delete_menu:
delete:
     entry (P_dname, P_ename, P_menu_name, P_code);

	P_code = 0;
	created_sw = "0"b;
	on cleanup call term_menu;
	call hcs_$initiate (P_dname, P_ename, "", 0, 1, menu_segment_ptr, P_code);
	if menu_segment_ptr = null
	then go to SEG_ERR;

/* Should be changed to use delete_data as soon as that exists */
/* since that will give us an error if the value isn't there to delete */

	call value_$set_data (menu_segment_ptr, "01"b, value_name (P_menu_name), null, 0, null, null, (0), P_code);
						/* Null ptr deletes value */
	call term_menu ();
	return;

retrieve_menu:
retrieve:
     entry (P_dname, P_ename, P_menu_name, P_areap, P_menu_ptr, P_code);

	P_code = 0;
	P_menu_ptr = null;
	menu_segment_ptr = null;
	created_sw = "0"b;
	on cleanup call term_menu ();

	call hcs_$initiate (P_dname, P_ename, "", 0, 1, menu_segment_ptr, P_code);
	if menu_segment_ptr = null
	then go to SEG_ERR;

	begin;

	     declare areap		      ptr;

	     if P_areap = null
	     then areap = get_user_free_area_ ();
	     else areap = P_areap;

	     call value_$get_data (menu_segment_ptr, "01"b, value_name (P_menu_name), areap, menu_ptr, (0), P_code);
	     if P_code ^= 0
	     then go to SEG_ERR;

	end;					/* begin */


	if menu.version ^= MENU_VERSION
	then do;
		P_code = error_table_$unimplemented_version;
		go to SEG_ERR;
	     end;

	P_menu_ptr = menu_ptr;
	call term_menu ();

	return;


SEG_ERR:
	call term_menu ();

	go to ERROR_EXIT;

list_menus:
list:
     entry (P_dname, P_ename, P_starname, P_areap, P_mli_version, P_list_ptr, P_code);


	if P_mli_version ^= menu_list_info_version_1
	then do;
		P_code = error_table_$unimplemented_version;
		return;
	     end;

	call LIST (P_dname, P_ename, P_starname, P_areap, P_list_ptr, P_code);
	return;

LIST:
     procedure (dname, ename, starname, area_ptr, list_ptr, code);
	declare (dname, ename, starname)
				 character (*);
	declare area_ptr		 pointer;
	declare list_ptr		 pointer;
	declare (i, listx, vlistx)	 fixed bin (21);
	declare code		 fixed bin (35);
	declare auto_area_ptr	 pointer;
	declare the_general_area	 area based (auto_area_ptr);

	if area_ptr = null ()
	then auto_area_ptr = get_user_free_area_ ();
	else auto_area_ptr = area_ptr;

	code = 0;

	list_ptr, menu_segment_ptr, menu_list_info_ptr, match_info_ptr, value_list_info_ptr = null ();

	on cleanup
	     begin;
		if menu_list_info_ptr ^= null
		then free menu_list_info;
		if match_info_ptr ^= null
		then free match_info;
		if value_list_info_ptr ^= null
		then free value_list_info;
		if menu_segment_ptr ^= null
		then call hcs_$terminate_noname (menu_segment_ptr, (0));
	     end;

	call hcs_$initiate (dname, ename, "", 0, 1, menu_segment_ptr, code);
	if menu_segment_ptr = null
	then go to SEG_ERR;

	alloc_name_count = 1;
	alloc_max_name_len = length (value_name (starname));
	allocate match_info;

	match_info.version = match_info_version_1;
	match_info.name_array (1).exclude_sw = "0"b;
	match_info.name_array (1).regexp_sw = "0"b;
	match_info.name_array (1).pad = ""b;
	match_info.name_array (1).name = value_name (starname);

	call value_$list_data_names (menu_segment_ptr, "01"b, match_info_ptr, get_system_free_area_ (),
	     value_list_info_ptr, code);
	free match_info;
	if code ^= 0
	then return;


	menu_list_n_names = value_list_info.pair_count;
	menu_list_name_string_length =
	     sum (value_list_info.name_len) - (value_list_info.pair_count * length (".menu_"));

	allocate menu_list_info in (the_general_area);

	menu_list_info.version = menu_list_info_version_1;

	listx = 1;
	do i = 1 to value_list_info.pair_count;
	     menu_list_info.position (i) = listx;
	     menu_list_info.length (i) = value_list_info.name_len (i) - length (".menu_");

	     vlistx = value_list_info.name_index (i);

	     substr (menu_list_info.name_string, listx, menu_list_info.length (i)) =
		substr (value_list_info.chars, vlistx, menu_list_info.length (i));
	     listx = listx + menu_list_info.length (i);
	end;

	list_ptr = addr (menu_list_info);
	free value_list_info;
	call hcs_$terminate_noname (menu_segment_ptr, (0));
     end LIST;

/* This is called whenever we leave store_menu or retrieve_menu.
   It terminates the null refname. */

term_menu:
     procedure ();

	declare hcs_$terminate_noname	 entry (ptr, fixed bin (35));
	declare delete_$ptr		 entry (pointer, bit (6), character (*), fixed binary (35));

	if menu_segment_ptr ^= null
	then if created_sw
	     then call delete_$ptr (menu_segment_ptr, "100101"b, "", (0));
	     else call hcs_$terminate_noname (menu_segment_ptr, (0));

     end term_menu;

value_name:
     procedure (name) returns (character (*));
	declare name		 character (*);

	return (rtrim (name) || ".menu_");		/* user may not add the suffix themselves */
     end value_name;

describe_menu:
describe:
     entry (P_menu_ptr, P_needs_ptr, P_code);

	call setup ();
	menu_requirements_ptr = P_needs_ptr;
	if menu_requirements.version ^= menu_requirements_version_1
	then do;
		P_code = error_table_$unimplemented_version;
		return;
	     end;

	call fill_requirements_from_menu ();
	return;


fill_requirements_from_menu:
     procedure ();

	menu_requirements.lines_needed = menu.height;
	menu_requirements.width_needed = menu.width;
	menu_requirements.n_options = menu.n_options;
     end fill_requirements_from_menu;



destroy_menu:
destroy:
     entry (P_menu_ptr, P_code);
	call setup ();
	free menu_ptr -> menu;
	return;



setup:
     procedure ();
	P_code = 0;
	if P_menu_ptr -> menu.version ^= MENU_VERSION
	then call ERROR (error_table_$unimplemented_version);
	menu_ptr = P_menu_ptr;
     end setup;


cursor_to_option:
     procedure (e);
	declare e			 fixed bin parameter;
	call window_$position_cursor (P_window, menu.option_info (e).line, menu.option_info (e).col, P_code);
	if P_code ^= 0
	then goto ERROR_EXIT;

     end cursor_to_option;


ERROR:
     procedure (code);
	declare code		 fixed bin (35) parameter;
	P_code = code;
	goto ERROR_EXIT;
     end ERROR;

RETURN:
ERROR_EXIT:
	return;

%include menu_dcls;
%include window_dcls;
%include function_key_data;
%include access_mode_values;
%include value_structures;
%include menu_list_info;
     end menu_;
