/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*
   This program is part of the wrapper used by FORTRAN and COBOL programs to access the menu system.
   It exists because the menu_ subroutines make use of data types which have no counterparts in FORTRAN and/or COBOL.
*/
/* Written March to April 1982 by Chris Jones */
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
fc_menu_create:
     proc;

	signal condition (bad_call_);			/* not a true entrypoint */
	return;

/* Parameters */

dcl	p_choices		   (*) char (*) parameter;	/* (Input) the options the menu will have */
dcl	1 p_choices_struc	   parameter aligned,	/* ...same, for COBOL */
	  2 choices	   (*) char (*) unal;
dcl	p_code		   fixed bin (35) parameter;	/* (Output) status code */
dcl	p_headers		   (*) char (*) parameter;	/* (Input) menu headers */
dcl	1 p_headers_struc	   parameter aligned,
	  2 headers	   (*) char (*) unal;
dcl	p_keys		   (*) char (1) parameter;	/* (Input) the selection keys */
dcl	1 p_keys_struc	   parameter aligned,
	  2 keys		   (*) char (1) unal;
dcl	p_menu_format_array	   (6) fixed bin parameter;	/* (Input) various menu formatting parameters */
dcl	1 p_menu_format_struc  aligned parameter,	/* (Input) ditto, for COBOL programs */
	  2 version	   fixed bin,
	  2 constraints,
	    3 max_width	   fixed bin,
	    3 max_height	   fixed bin,
	  2 n_columns	   fixed bin,
	  2 flags		   unal,
	    3 center_headers   pic "9",
	    3 center_trailers  pic "9",
	  2 pad_char	   char (1) unal;
dcl	p_menu_id		   fixed bin (35) parameter;	/* (Output) how a menu is identified */
dcl	p_menu_needs_array	   (3) fixed bin parameter;	/* (Output) describes size of created menu */
dcl	1 p_menu_needs_struc   aligned parameter,	/* ...for COBOL programs */
	  2 lines_needed	   fixed bin (35),
	  2 width_needed	   fixed bin (35),
	  2 n_options	   fixed bin (35);
dcl	p_menu_ptr	   ptr;			/* (Input) an unpacked menu_id */
dcl	p_pad_char	   char (1) parameter;	/* (Input) character used for padding */
dcl	p_trailers	   (*) char (*) parameter;	/* (Input) menu trailers */
dcl	1 p_trailers_struc	   parameter aligned,
	  2 trailers	   (*) char (*) unal;

/* Automatic storage */

dcl	1 auto_menu_format	   like menu_format;
dcl	1 auto_menu_requirements
			   like menu_requirements;
dcl	fortran_entry	   bit (1) aligned;		/* "1"b if called from a FORTRAN program */
dcl	menu_id_ptr	   ptr;			/* used to redefine p_menu_id */
dcl	menu_ptr		   ptr;			/* used in calls to the menu_ subroutines */

/* Based variables */

dcl	THE_AREA		   area based (get_system_free_area_ ());
dcl	menu_array	   (fc_menu_data_$menu_array_size) ptr based (fc_menu_data_$menu_array_ptr);
						/* array of menus we are managing */
dcl	packed_menu_ptr	   ptr unal based (menu_id_ptr);
						/* overlays the fixed bin (35) which is the menu_id */

/* Static storage and constants */

dcl	MENU_ARRAY_SIZE_INCREMENT
			   fixed bin init (5) static options (constant);

/* The following constants are used as indices into the arrays a FORTRAN program passes in in lieu of structures. */

dcl	VERSION		   fixed bin init (1) static options (constant);
dcl	MAX_WIDTH		   fixed bin init (2) static options (constant);
dcl	MAX_HEIGHT	   fixed bin init (3) static options (constant);
dcl	N_COLUMNS		   fixed bin init (4) static options (constant);
dcl	CENTER_HEADERS	   fixed bin init (5) static options (constant);
dcl	CENTER_TRAILERS	   fixed bin init (6) static options (constant);

dcl	LINES_NEEDED	   fixed bin init (1) static options (constant);
dcl	WIDTH_NEEDED	   fixed bin init (2) static options (constant);
dcl	N_OPTIONS		   fixed bin init (3) static options (constant);

/* External entries and variables */

dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;

dcl	fc_menu_data_$initialized
			   bit (1) aligned external static;
dcl	fc_menu_data_$menu_array_ptr
			   ptr external static;
dcl	fc_menu_data_$menu_array_size
			   fixed bin external static;

dcl	get_system_free_area_  entry () returns (ptr);

/* Conditions and builtins */

dcl	(bad_call_)	   condition;

dcl	(addr, hbound, lbound, length, null, rtrim)
			   builtin;

/* Entries to create a menu */

fortran_create:
     entry (p_choices, p_headers, p_trailers, p_pad_char, p_menu_format_array, p_keys, p_menu_needs_array, p_menu_id,
	p_code);

	call must_have_initialized;
	fortran_entry = "1"b;
	auto_menu_format.version = p_menu_format_array (VERSION);
	auto_menu_format.max_width = p_menu_format_array (MAX_WIDTH);
	auto_menu_format.max_height = p_menu_format_array (MAX_HEIGHT);
	auto_menu_format.n_columns = p_menu_format_array (N_COLUMNS);
	auto_menu_format.center_headers = (p_menu_format_array (CENTER_HEADERS) ^= 0);
	auto_menu_format.center_trailers = (p_menu_format_array (CENTER_TRAILERS) ^= 0);
	auto_menu_format.pad_char = p_pad_char;
	call create_the_menu (p_choices, p_headers, p_trailers, p_keys);
	return;

/* The COBOL version of this entry point */

cobol_create:
     entry (p_choices_struc, p_headers_struc, p_trailers_struc, p_menu_format_struc, p_keys_struc, p_menu_needs_struc,
	p_menu_id, p_code);

	call must_have_initialized;
	fortran_entry = "0"b;
	auto_menu_format.version = p_menu_format_struc.version;
	auto_menu_format.max_width = p_menu_format_struc.max_width;
	auto_menu_format.max_height = p_menu_format_struc.max_height;
	auto_menu_format.n_columns = p_menu_format_struc.n_columns;
	auto_menu_format.center_headers = (p_menu_format_struc.center_headers ^= 0);
	auto_menu_format.center_trailers = (p_menu_format_struc.center_trailers ^= 0);
	auto_menu_format.pad_char = p_menu_format_struc.pad_char;
	call create_the_menu ((p_choices_struc.choices), (p_headers_struc.headers), (p_trailers_struc.trailers),
	     (p_keys_struc.keys));
	return;

create_the_menu:
     proc (arg_choices, arg_headers, arg_trailers, arg_keys);

dcl	arg_choices	   (*) char (*) parameter;
dcl	arg_headers	   (*) char (*) parameter;
dcl	arg_keys		   (*) char (1) parameter;
dcl	arg_trailers	   (*) char (*) parameter;

dcl	array_idx		   fixed bin;
dcl	choices		   (lbound (arg_choices, 1):hbound (arg_choices, 1))
			   char (length (arg_choices (hbound (arg_choices, 1)))) varying;
dcl	headers		   (lbound (arg_headers, 1):hbound (arg_headers, 1))
			   char (length (arg_headers (hbound (arg_headers, 1)))) varying;
dcl	keys		   (lbound (arg_keys, 1):hbound (arg_keys, 1)) char (1) unal;
dcl	trailers		   (lbound (arg_trailers, 1):hbound (arg_trailers, 1))
			   char (length (arg_trailers (hbound (arg_trailers, 1)))) varying;

/* Copy all of the arguments into the right kind of structure */

	do array_idx = lbound (arg_choices, 1) to hbound (arg_choices, 1);
	     choices (array_idx) = rtrim (arg_choices (array_idx));
	end;
	do array_idx = lbound (arg_headers, 1) to hbound (arg_headers, 1);
	     headers (array_idx) = rtrim (arg_headers (array_idx));
	end;
	do array_idx = lbound (arg_trailers, 1) to hbound (arg_trailers, 1);
	     trailers (array_idx) = rtrim (arg_trailers (array_idx));
	end;
	do array_idx = lbound (arg_keys, 1) to hbound (arg_keys, 1);
	     keys (array_idx) = arg_keys (array_idx);
	end;

	auto_menu_requirements.version = menu_requirements_version_1;
	auto_menu_format.pad = ""b;

/* Create the menu, and copy back the returned items */

	call menu_$create (choices, headers, trailers, addr (auto_menu_format), keys, null (),
	     addr (auto_menu_requirements), menu_ptr, p_code);
	if fortran_entry then do;
	     p_menu_needs_array (LINES_NEEDED) = auto_menu_requirements.lines_needed;
	     p_menu_needs_array (WIDTH_NEEDED) = auto_menu_requirements.width_needed;
	     p_menu_needs_array (N_OPTIONS) = auto_menu_requirements.n_options;
	end;
	else do;
	     p_menu_needs_struc.lines_needed = auto_menu_requirements.lines_needed;
	     p_menu_needs_struc.width_needed = auto_menu_requirements.width_needed;
	     p_menu_needs_struc.n_options = auto_menu_requirements.n_options;
	end;
	menu_id_ptr = addr (p_menu_id);
	packed_menu_ptr = menu_ptr;			/* sets menu_id */

	call add_to_menu_array_proc (menu_ptr);		/* remember we created it */

     end create_the_menu;

/* Entry to destroy a previously created menu */

destroy:
     entry (p_menu_id, p_code);

	call must_have_initialized;
	menu_id_ptr = addr (p_menu_id);
	menu_ptr = packed_menu_ptr;
	call remove_from_menu_array (menu_ptr);
	call menu_$destroy (menu_ptr, p_code);
	packed_menu_ptr = menu_ptr;
	return;

add_to_menu_array:
     entry (p_menu_ptr);

	call add_to_menu_array_proc (p_menu_ptr);
	return;

/* Routine to add a newly created menu to the array of menus we will destroy on termination of this package.
   This routine handles the case of growing the menu_array if necessary. */

add_to_menu_array_proc:
     proc (menu_ptr);

dcl	menu_ptr		   ptr;			/* the id to add to the array */

dcl	menu_array_idx	   fixed bin;		/* index into menu_array */

	do menu_array_idx = 1 to fc_menu_data_$menu_array_size while (menu_array (menu_array_idx) ^= null ());
	end;
	if menu_array_idx > fc_menu_data_$menu_array_size then do;
						/* must grow menu_array */

	     begin;				/* so we can define some tricky arrays */

dcl	new_menu_array_end_ptr ptr;
dcl	old_menu_array_ptr	   ptr;
dcl	old_menu_array_size	   fixed bin;

dcl	old_menu_array	   (old_menu_array_size) ptr based (old_menu_array_ptr);
dcl	menu_array_beginning   (old_menu_array_size) ptr based (fc_menu_data_$menu_array_ptr);
dcl	menu_array_end	   (MENU_ARRAY_SIZE_INCREMENT) ptr based (new_menu_array_end_ptr);

		old_menu_array_ptr = fc_menu_data_$menu_array_ptr;
						/* save so we can access after creating new one */
		old_menu_array_size = fc_menu_data_$menu_array_size;
		menu_array_idx = fc_menu_data_$menu_array_size + 1;
						/* this is where the new free slot will be */

		fc_menu_data_$menu_array_size = fc_menu_data_$menu_array_size + MENU_ARRAY_SIZE_INCREMENT;
		allocate menu_array in (THE_AREA) set (fc_menu_data_$menu_array_ptr);
		new_menu_array_end_ptr = addr (menu_array (menu_array_idx));
		menu_array_beginning (*) = old_menu_array (*);
						/* copy all the old values */
		free old_menu_array;		/* all done with this now */
		menu_array_end (*) = null ();
	     end;					/* the begin */
	end;					/* the do */

	menu_array (menu_array_idx) = menu_ptr;

     end add_to_menu_array_proc;

remove_from_menu_array:
     proc (menu_ptr);

dcl	menu_ptr		   ptr;

dcl	menu_array_idx	   fixed bin;

	do menu_array_idx = 1 to fc_menu_data_$menu_array_size while (menu_array (menu_array_idx) ^= menu_ptr);
	end;

	if menu_array_idx <= fc_menu_data_$menu_array_size then
	     if menu_array (menu_array_idx) = menu_ptr then
		menu_array (menu_array_idx) = null ();

     end remove_from_menu_array;

must_have_initialized:
     proc;

	if ^fc_menu_data_$initialized then
	     goto HAVE_NOT_INITIALIZED;

     end must_have_initialized;

HAVE_NOT_INITIALIZED:
	p_code = error_table_$out_of_sequence;
	return;

%include menu_dcls;

     end fc_menu_create;
