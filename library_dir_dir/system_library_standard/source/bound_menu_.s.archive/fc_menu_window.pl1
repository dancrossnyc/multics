/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*
   This is the FORTRAN/COBOL interface to the window system.  It is a very primitive interface, consisting
   only of those entries absolutely necessary for the operation of the menu subroutines.  These are
   create, destroy, and change.
*/
/* Written April 1982 by Chris Jones */
/* Modified 20 August 1984 by Jon A. Rochlis for MR11 video. Changes the
   reference window_position_info.mbz to window_position_info.column */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
fc_menu_window:
     proc;

	signal bad_call_;				/* not a true entrypoint */
	return;

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (Output) standard status code */
dcl	p_first_line	   fixed bin (35) parameter;	/* (Input) where the window is to start */
dcl	p_height		   fixed bin (35) parameter;	/* (Input) how high the window is to be */
dcl	p_switch_name	   char (*) parameter;	/* (Input) name of the switch the window is attached to */
dcl	p_window_id	   fixed bin (35) parameter;	/* (Input/Output) how a window is identified */
dcl	p_window_ptr	   ptr parameter;		/* (Input) used to add a window to the array */

/* Automatic variables */

dcl	1 auto_window_info	   like window_position_info;
dcl	window_iocb_ptr	   ptr;

/* Based variables */

dcl	THE_AREA		   area based (get_system_free_area_ ());
dcl	window_array	   (fc_menu_data_$window_array_size) ptr based (fc_menu_data_$window_array_ptr);

/* Constants */

dcl	WINDOW_ARRAY_SIZE_INCREMENT
			   fixed bin static init (3) options (constant);
						/* External variables and entries */

dcl	get_system_free_area_  entry () returns (ptr);
dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	iox_$find_iocb	   entry (char (*), ptr, fixed bin (35));
dcl	window_$clear_window   entry (ptr, fixed bin (35));
dcl	window_$create	   entry (ptr, ptr, ptr, fixed bin (35));
dcl	window_$destroy	   entry (ptr, fixed bin (35));

dcl	error_table_$no_operation
			   fixed bin (35) ext static;
dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;
dcl	video_et_$overlaps_screen_edge
			   fixed bin (35) ext static;

dcl	fc_menu_data_$auto_window
			   bit (1) aligned ext static;
dcl	fc_menu_data_$initialized
			   bit (1) aligned ext static;
dcl	1 fc_menu_data_$user_io_window_info
			   like window_position_info ext static aligned;
dcl	fc_menu_data_$window_array_ptr
			   ptr ext static;
dcl	fc_menu_data_$window_array_size
			   fixed bin ext static;
dcl	video_data_$terminal_iocb
			   ptr ext static;

/* Builtins and conditions */

dcl	(addr, null)	   builtin;

dcl	(bad_call_)	   condition;

create:
     entry (p_first_line, p_height, p_switch_name, p_window_id, p_code);

	call must_have_initialized;
	call validate_origin_and_height;
	call iox_$find_iocb (p_switch_name, window_iocb_ptr, p_code);
	if p_code ^= 0 then
	     return;
	auto_window_info.version = window_position_info_version_1;
	auto_window_info.column = 0;
	auto_window_info.line = fc_menu_data_$user_io_window_info.line + p_first_line - 1;
	auto_window_info.width = 0;			/* not used currently */
	auto_window_info.height = p_height;
	call window_$create (video_data_$terminal_iocb, addr (auto_window_info), window_iocb_ptr, p_code);
	if p_code ^= 0 then
	     return;
	call add_to_window_array_proc (window_iocb_ptr);
	p_window_id = pack_ptr (window_iocb_ptr);	/* pack the pointer into an integer */
	return;

/* Entry to destroy a previously created window. */

destroy:
     entry (p_window_id, p_code);

	call must_have_initialized;
	window_iocb_ptr = unpack_ptr (p_window_id);
	call remove_from_window_array (window_iocb_ptr);
	call window_$destroy (window_iocb_ptr, p_code);
	if p_code = 0 then
	     p_window_id = 0;
	return;

/* Entry to change the size and/or position of a window. */
change:
     entry (p_window_id, p_first_line, p_height, p_code);

	call must_have_initialized;
	call validate_origin_and_height;
	window_iocb_ptr = unpack_ptr (p_window_id);
	auto_window_info.version = window_position_info_version_1;
	auto_window_info.column = 0;
	auto_window_info.line = fc_menu_data_$user_io_window_info.line + p_first_line - 1;
	auto_window_info.width = 0;			/* not used currently */
	auto_window_info.height = p_height;
	call iox_$control (window_iocb_ptr, "set_window_info", addr (auto_window_info), p_code);
	return;

clear_window:
     entry (p_window_id, p_code);

	window_iocb_ptr = unpack_ptr (p_window_id);
	call window_$clear_window (window_iocb_ptr, p_code);
	return;

add_to_window_array:
     entry (p_window_ptr);

	call add_to_window_array_proc (p_window_ptr);
	return;

/* Routine to add a newly created window to the array of windows we will destroy on termination of this package.
   This routine handles the case of growing the window_array if necessary. */

add_to_window_array_proc:
     proc (window_ptr);

dcl	window_ptr	   ptr;			/* the id to add to the array */

dcl	window_array_idx	   fixed bin;		/* index into window_array */

	do window_array_idx = 1 to fc_menu_data_$window_array_size while (window_array (window_array_idx) ^= null ());
	end;
	if window_array_idx > fc_menu_data_$window_array_size then do;
						/* must grow window_array */

	     begin;				/* so we can define some tricky arrays */

dcl	new_window_array_end_ptr
			   ptr;
dcl	old_window_array_ptr   ptr;
dcl	old_window_array_size  fixed bin;

dcl	old_window_array	   (old_window_array_size) ptr based (old_window_array_ptr);
dcl	window_array_beginning (old_window_array_size) ptr based (fc_menu_data_$window_array_ptr);
dcl	window_array_end	   (WINDOW_ARRAY_SIZE_INCREMENT) ptr based (new_window_array_end_ptr);

		old_window_array_ptr = fc_menu_data_$window_array_ptr;
						/* save so we can access after creating new one */
		old_window_array_size = fc_menu_data_$window_array_size;
		window_array_idx = fc_menu_data_$window_array_size + 1;
						/* this is where the new free slot will be */

		fc_menu_data_$window_array_size = fc_menu_data_$window_array_size + WINDOW_ARRAY_SIZE_INCREMENT;
		allocate window_array in (THE_AREA) set (fc_menu_data_$window_array_ptr);
		new_window_array_end_ptr = addr (window_array (window_array_idx));
		window_array_beginning (*) = old_window_array (*);
						/* copy all the old values */
		free old_window_array;		/* all done with this now */
		window_array_end (*) = null ();
	     end;					/* the begin */
	end;					/* the do */

	window_array (window_array_idx) = window_ptr;

     end add_to_window_array_proc;

remove_from_window_array:
     proc (window_ptr);

dcl	window_ptr	   ptr;

dcl	window_array_idx	   fixed bin;

	do window_array_idx = 1 to fc_menu_data_$window_array_size
	     while (window_array (window_array_idx) ^= window_ptr);
	end;

	if window_array_idx <= fc_menu_data_$window_array_size then
	     if window_array (window_array_idx) = window_ptr then
		window_array (window_array_idx) = null ();

     end remove_from_window_array;

pack_ptr:
     proc (p) returns (fixed bin (35));

dcl	p		   ptr;

dcl	pp		   ptr unal based;
dcl	ptr_as_integer	   fixed bin (35);

	addr (ptr_as_integer) -> pp = p;
	return (ptr_as_integer);

     end pack_ptr;

unpack_ptr:
     proc (pp) returns (ptr);

dcl	pp		   fixed bin (35);

dcl	packed_ptr	   ptr unal based (addr (pp));

	return (packed_ptr);

     end unpack_ptr;

/* Routine to make sure we've initialized, and to make sure we aren't being called if automatic windows were specified */
must_have_initialized:
     proc;

	if ^fc_menu_data_$initialized then
	     goto HAVE_NOT_INITIALIZED;
	if fc_menu_data_$auto_window then
	     goto ILLEGAL_WINDOW_OPERATION;

     end must_have_initialized;

HAVE_NOT_INITIALIZED:
	p_code = error_table_$out_of_sequence;
	return;

ILLEGAL_WINDOW_OPERATION:
	p_code = error_table_$no_operation;
	return;

validate_origin_and_height:
     proc;

	if (p_first_line < 1)
	     | (p_first_line + p_height
	     > fc_menu_data_$user_io_window_info.line + fc_menu_data_$user_io_window_info.height) then
	     goto ILLEGAL_WINDOW_SIZE;
     end validate_origin_and_height;

ILLEGAL_WINDOW_SIZE:
	p_code = video_et_$overlaps_screen_edge;
	return;

%include window_control_info;

     end fc_menu_window;
