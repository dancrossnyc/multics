/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*
   FORTRAN/COBOL menu interface value segment manipulation routines
*/
/* Written April 1982 by Chris Jones */
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
fc_menu_value_seg_man:
     proc;

	signal condition (bad_call_);			/* not a true entrypoint */
	return;

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (Output) status code */
dcl	p_count		   fixed bin (35) parameter;	/* (Output) number of names matching p_match_string */
dcl	p_create_seg	   fixed bin parameter;	/* (Input) whether or not to create the value seg */
dcl	p_dir_name	   char (*) parameter;	/* (Input) directory in which the value segment lives */
dcl	p_entry_name	   char (*) parameter;	/* (Input) entry name of the value segment */
dcl	p_match_string	   char (*) parameter;	/* (Input) star name used to match menu names */
dcl	p_menu_id		   fixed bin (35) parameter;	/* (Output) how a menu is identified */
dcl	p_menu_name	   char (*) parameter;	/* (Input) name of the menu being stored or retrieved */
dcl	p_names		   (*) char (*) parameter;	/* (Output) names which match p_match_string */

/* Automatic storage */

dcl	menu_id_ptr	   ptr;			/* used to redefine p_menu_id */
dcl	menu_ptr		   ptr;			/* used in calls to the menu_ subroutines */

/* Based variables */

dcl	packed_menu_ptr	   ptr unal based (menu_id_ptr);
						/* overlays the fixed bin (35) which is the menu_id */

/* External entries and variables */

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;
dcl	error_table_$smallarg  fixed bin (35) ext static;

dcl	fc_menu_data_$initialized
			   bit (1) aligned external static;

dcl	fc_menu_create$add_to_menu_array
			   entry (ptr);

/* Conditions and builtins */

dcl	(bad_call_)	   condition;

dcl	(addr, dim, lbound, min, null, substr)
			   builtin;

/* Entry to store a menu object in a value segment. */

store:
     entry (p_dir_name, p_entry_name, p_menu_name, p_create_seg, p_menu_id, p_code);

	call must_have_initialized;
	if (p_create_seg ^= 0) & (p_create_seg ^= 1) then do;
	     p_code = error_table_$bad_arg;
	     return;
	end;
	menu_id_ptr = addr (p_menu_id);
	menu_ptr = packed_menu_ptr;			/* unpack the pointer */
	call menu_$store (p_dir_name, p_entry_name, p_menu_name, (p_create_seg = 1), menu_ptr, p_code);
	return;

/* Entry to retrieve a menu from a value segment. */

retrieve:
     entry (p_dir_name, p_entry_name, p_menu_name, p_menu_id, p_code);

	call must_have_initialized;
	menu_id_ptr = addr (p_menu_id);
	call menu_$retrieve (p_dir_name, p_entry_name, p_menu_name, null (), menu_ptr, p_code);
	if p_code = 0 then do;
	     call fc_menu_create$add_to_menu_array (menu_ptr);
	     packed_menu_ptr = menu_ptr;
	end;
	return;

/* Entry to delete a stored menu object from a value segment.  This is simply a pass-through to the menu_ subr. */

delete:
     entry (p_dir_name, p_entry_name, p_menu_name, p_code);

	call must_have_initialized;
	call menu_$delete (p_dir_name, p_entry_name, p_menu_name, p_code);
	return;

/* Entry to return a list of menu names stored in a value segment. */

list:
     entry (p_dir_name, p_entry_name, p_match_string, p_count, p_names, p_code);

dcl	names_idx		   fixed bin;

	call must_have_initialized;
	call menu_$list (p_dir_name, p_entry_name, p_match_string, null (), menu_list_info_version_1,
	     menu_list_info_ptr, p_code);

/* Copy the names into the provided array */

	if p_code = 0 then do;
	     p_count = menu_list_info.n_names;
	     do names_idx = 1 to min (menu_list_info.n_names, dim (p_names, 1));
		p_names (lbound (p_names, 1) + names_idx - 1) =
		     substr (menu_list_info.name_string, menu_list_info.position (names_idx),
		     menu_list_info.length (names_idx));
	     end;
	     if menu_list_info.n_names > dim (p_names, 1) then
		p_code = error_table_$smallarg;
	     free menu_list_info;
	end;
	return;

must_have_initialized:
     proc;

	if ^fc_menu_data_$initialized then
	     goto HAVE_NOT_INITIALIZED;

     end must_have_initialized;

HAVE_NOT_INITIALIZED:
	p_code = error_table_$out_of_sequence;
	return;

%include menu_dcls;
%page;
%include menu_list_info;

     end fc_menu_value_seg_man;
