//  Functions to perform mathematical operations not provided by the language.
//  Last modified on 06/03/74 at 12:02:56 by R F Mabee.
//  Reinstalled with no material change in June 1974 by R F Mabee.
//  This module first installed on 6180 Multics in June 1973 by R F Mabee.
//  Formed from bcpl_lib_, first installed on 645 Multics in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

manifest
     $(	LogEofTwo = 0.6931471806  $)

let MaxI (a, b) = a < b -> b, a
and MinI (a, b) = a < b -> a, b
and MaxR (a, b) = a .< b -> b, a
and MinR (a, b) = a .< b -> a, b
and AbsI (a) = a < 0 -> -a, a
and AbsR (a) = a .< 0.0 -> .-a, a

let RandomI () = valof		//  Return random positive integer. Borrowed from Roger Schell's version.
     $(	static  $(  Seed = 0  $)
	if Seed = 0 do				//  Get unique initial value.
	     $(	let v = vec 2
		RawClockTime (v)
		Seed := v!1			//  Time in microseconds up to about 20 hours.
	     $)
	Seed := Seed neqv (Seed rshift 11)
	Seed := Seed neqv (Seed lshift 25)
	resultis Seed rshift 1			//  Make sure result is positive.
     $)
and RandomR () = ItoR (RandomI ()) ./ ItoR (true rshift 1)	//  Return random floating-point number between 0 and 1.

let SquareRoot (x) = valof		//  Return square root of a floating-point number.
     $(	let p = x / 2 & (true lshift 36 - 8) | (1 lshift 36 - 8 - 2)	//  Let x = m * 2**n where .5 <_ m < 1.
	unless (x & (1 lshift 36 - 8)) = 0 do p := p .* 1.414213557		//  Now p**2 = 2**n / 2.
	let m = x & (true rshift 8 + 1)
	let y = p .* (m .* 0.586 .+ 0.42) .* 2.0	//  Interpolate square root of m.  y is first estimate of result.
	for i = 0 to 2 do y := (y .+ x ./ y) .* 0.5	//  Improve estimate by Newton-Raphson approximation.
	resultis y
     $)
and Exponential (x) = valof		//  Return e ** x (x is a floating-point number).
     $(	manifest
	     $(	A = 87.4175034
		B = .- 617.972360
		C = 0.0346573560
		D = 9.95459586
	     $)
	test x .ge 0.0
	then test x .< 1.0E-8
	     then resultis 1.0		//  This close to zero result is always 1.0.
	     or if x .> 88.028 resultis 0.17014118E39	//  Too big, return largest possible number.
	or test x .> .- 1.0E-8
	   then resultis 1.0		//  Close to zero, result is always 1.0.
	   or if x .< .- 88.028 resultis 0.0	//  Too small, return smallest possible number (zero).

	x := x .* (1.0 ./ LogEofTwo)		//  x is now log base two of desired result.
	let n = RtoI (x)
	let r = x .- ItoR (n)		//  Result is 2**r * 2**n, where 0 <_ r < 1.
	let y = 1.0 .+ r .* 2.0 ./ (D .- r .+ C .* r .* r .+ B ./ (r .* r .+ A))	//  Polynomial interpolation.
	resultis y + (n lshift 36 - 8)		//  Add n to binary exponent.
     $)
and Logarithm (x) = valof		//  Return natural logarithm of floating-point number x.
     $(	manifest
	     $(	C1 = 0.10764273
		C2 = 1.21873057
		C3 = .- 1.091870621
		C4 = .- 1.39755978
		B1 = 1.0 ./ 128.0
		B2 = .- 0.5 .- 3.0 ./ 262144.0
		B3 = 1.414213557 ./ 2.0
	     $)
	let z = x .- 1.0
	if .- B1 .< z .< B1 resultis z .+ B2 .* z .* z .+ z .* z .* z .* z ./ 3.0	//  For x near one use polynomial.
	let p = ItoR (((x rshift 36 - 8) neqv (1 lshift 8 - 1)) - (1 lshift 8 - 1))
	p := (p .- 0.5) .* LogEofTwo		//  Logarithm of exponent.
	let m = x & (true rshift 8 + 1)	//  Fractional part.
	z := (m .- B3) ./ (m .+ B3)
	resultis (p .+ z .* (C1 .* z .* z .+ C2 .+ C3 ./ (z .* z .+ C4)))
     $)

let IpowerI (Integer, Exp) = valof			//  Return Integer ** Exp (both integers).
     $(	let Result = 1
	if Exp < 0 resultis 0			//  Get rid of this case right away.
	until Exp = 0 do
	     $(	unless (Exp & 1) = 0 do Result := Result * Integer
		Integer := Integer * Integer
		Exp := Exp rshift 1
	     $)
	resultis Result
     $)
and RpowerI (Real, Exp) = valof			//  Return Real ** Exp (Exp integer).
     $(	let Result = 1.0
	if Exp < 0 do Real, Exp := 1.0 ./ Real, - Exp
	until Exp = 0 do
	     $(	unless (Exp & 1) = 0 do Result := Result .* Real
		Real := Real .* Real
		Exp := Exp rshift 1
	     $)
	resultis Result
     $)
and RpowerR (Real, Exp) = valof			//  Return Real ** Exp (both reals).
     $(	let x = Logarithm (Real)
	resultis Exponential (x .* Exp)
     $)
