//  Interface to Multics file system routines for BCPL programs.
//  Last modified on 06/03/74 at 11:56:55 by R F Mabee.
//  Reinstalled with no material change in June 1974, R F Mabee.
//  Modified for 6180 bootstrap and installed in June 1973, R F Mabee.
//  First installed in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

external
     $(	ExpandPath = "expand_path_"		//  call expand_path_ (path name ptr, path name length,
					//	dir name ptr, entry name ptr, return code)
	Initiate = "hcs_$initiate"		//  call hcs_$initiate (dir name, entry name, reference name,
					//	segno_sw, copy_sw, return ptr, return code)
	StatusMinf = "hcs_$status_minf"	//  call hcs_$status_minf (dir name, entry name, chase_sw,
					//	return type, return bit count, return code)
	MakeSeg = "hcs_$make_seg"		//  call hcs_$make_seg (dir name, entry name, reference name,
					//	access mode, return ptr, return code)
	Delentry = "hcs_$delentry_file"	//  call hcs_$delentry_file (dir name, entry name, return code)
	TruncateSeg = "hcs_$truncate_seg"	//  call hcs_$truncate_seg (segment ptr, word length, return code)
	TerminateNoname = "hcs_$terminate_noname" // call hcs_$terminate_noname (segment ptr, return code)
	SetBC = "hcs_$set_bc_seg"		//  call hcs_$set_bc_seg (segment ptr, bit count, return code)
	FsGetPathName = "hcs_$fs_get_path_name"	//  call hcs_$fs_get_path_name (segment ptr, return dir name,
					//	return dir name length, return entry name, return code)
	GetWdir = "get_wdir_"		//  call get_wdir_ (return working dir name)
	GetPdir = "get_pdir_"		//  call get_pdir_ (return process dir name)
	AssignLinkage = "hcs_$assign_linkage"	//  call hcs_$assign_linkage (# words, return ptr)
	MakePtr = "hcs_$make_ptr"		//  call hcs_$make_ptr (caller ptr, name1, name2, return ptr, return code)
	VirtualCpuTime = "virtual_cpu_time_"	//  call virtual_cpu_time_ (return 52-bit cpu usage)

	SegKnown = "error_table_$segknown"	//  declare error_table_$segknown fixed binary external static;
	ZeroLenSeg = "error_table_$zero_length_seg" // declare error_table_$zero_length_seg fixed binary external static;
	DirSeg = "error_table_$dirseg"	//  declare error_table_$dirseg fixed binary external static;
	NoEntry = "error_table_$noentry"	//  declare error_table_$noentry fixed binary external static;

	MaxSegSize = "sys_info$max_seg_size"	//  declare sys_info$max_seg_size fixed binary external static;
     $)
global
     $(	FirstTemp : 42; Freearea : 43
	Freelimit : 44; Freelist : 45
     $)
static
     $(	Zero = 0; One = 1; Eleven = 11  $)	//  Constants for Multics calls.

let ExpandPathname (Name, Path) = valof		//  Returns Path containing full pathname as string.
     $(	let Dir, Ent = vec 42, vec 8
	let v = vec 6
	let l = Length (Name)
	call ExpandPath (ITS (Name, v, CountSize) pointer, lv l, ITS (Dir, v + 2) pointer,
							ITS (Ent, v + 4) pointer, lv Errcode bit 36)
	resultis JoinPathname (Dir, Ent, Path)
     $)
and JoinPathname (Dir, Ent, Path) = valof
     $(	MakeBcplString (Dir, 168, Path)
	if Path!0 = ">"!0 do Path!0 := ""!0
	let v = vec 10
	MakeBcplString (Ent, 32, v)
	resultis Concatenate (Path, 168, Path, ">", v)
     $)
and SplitPathname (Path, Dir, Ent) be		//  Get back aligned Dir168, Ent32 for internal use.
     $(	let Temp = vec 50
	for i = Length (Path) to 1 by -1 if Subch (Path, i) = '>' do
		     $(	Substr (Temp, Path, 1, MinI (i - 1, 168))
			MakePl1String (i = 1 -> ">", Temp, Dir, 168)
			Substr (Temp, Path, i + 1, 32)
			MakePl1String (Temp, Ent, 32)
			return
		     $)
	MakePl1String (Path, Dir, 168)
	MakePl1String ("", Ent, 32)
     $)

let FindSegment (Path, LvL) = valof		//  Return pointer to named segment.  rv LvL gets bit count.
     $(	let Dir, Ent = vec 42, vec 8
	SplitPathname (Path, Dir, Ent)
	let Type, v = 0, vec 2
	call StatusMinf (Dir char 168, Ent char 32, lv One, lv Type, LvL, lv Errcode bit 36)
	if Type = 2 do Errcode := rv DirSeg
	unless Errcode = 0 resultis Null
	call Initiate (Dir char 168, Ent char 32, lv Zero char 0, lv Zero, lv One, v pointer, lv Errcode bit 36)
	if Errcode ne 0 then if Errcode = rv SegKnown do Errcode := 0
	resultis BCPLaddr (v)
     $)

let MakeSegment (Path) = valof			//  Return pointer to named segment, creating it or truncating it.
     $(	let v, Dir, Ent = vec 2, vec 42, vec 8
	SplitPathname (Path, Dir, Ent)
	call MakeSeg (Dir char 168, Ent char 32, lv Zero char 0, lv Eleven, v pointer, lv Errcode bit 36)
	let p = BCPLaddr (v)
	unless Errcode = 0 logor p = Null do SetBitCount (p, 0)
	resultis p
     $)

and SetBitCount (p, l) be			//  Truncate segment p to l bits.
     $(	let v = vec 2
	let n = (l + WordSize - 1) / WordSize
	call TruncateSeg (ITS (p, v) pointer, lv n, lv Errcode bit 36)
	call SetBC (ITS (p, v) pointer, lv l, lv Errcode bit 36)
     $)
and Terminate (p) be			//  Terminate one null reference name on segment p.
     $(	let v = vec 2
	call TerminateNoname (ITS (p, v) pointer, lv Errcode bit 36)
     $)
and GetPathname (p, Path) = valof
     $(	let Dir, Ent = vec 42, vec 8
	let v, x = vec 2, nil
	call FsGetPathName (ITS (p, v) pointer, Dir char 168, lv x, Ent char 32, lv Errcode bit 36)
	resultis JoinPathname (Dir, Ent, Path)
     $)

let MakeTempSeg (Index, ID) = valof		//  Create a temporary segment in the process directory.
     $(	unless NumbArgs () = 2 do ID := "temp"
	let Name, v = vec 50, vec 2
	MakeName (Index, ID, Name)
	call MakeSeg ("" string, Name string, "" string, lv Eleven, v pointer, lv Errcode bit 36)
	resultis BCPLaddr (v)
     $)
and DeleteTempSeg (Index, ID) be		//  Delete a temporary segment from the process directory.
     $(	unless NumbArgs () = 2 do ID := "temp"
	let Name, Pdir = vec 50, vec 50
	MakeName (Index, ID, Name)
	call GetPdir (Pdir char 168)
	call Delentry (Pdir char 168, Name string, lv Errcode bit 36)
     $)
and MakeName (Index, ID, Name) be		//  Fabricate temp seg name.
     $(	let w = vec 50
	Concatenate (Name, 32, ProgramID, ".temp_seg_", ConvertNtoS (Index, w), ".", ID)
     $)

let Allocate (n) = valof				//  Return a pointer to n free words from the combined linkage.
     $(	let v = vec 2
	if n < 0 logor n ge 16000 do n := 16000
	n := n + n rem 2		//  Round up to even number.
	call AssignLinkage (lv n, v pointer, lv Errcode bit 36)	//  Let hcs_ entry do the work.
	resultis BCPLaddr (v)
     $)

manifest $( NewvecID = $8001234567654  $)	//  Magic flag must be present or vector cannot be freed.
static $( NewvecTemps = 0  $)			//  Used to obtain unique names for temporary segments.
let NewvecInit (Space, Size) be		//  Initialize free-storage allocation package.
     $(	for i = 0 to 20 do Space!i := 0
	Freelist := Space
	Freearea := Space + 21
	Freelimit := Space + Size
	FirstTemp := NewvecTemps
     $)
and Newvec (Size) = valof		//  Get a vector of length Size from free storage.
     $(	Size := Size + 1		//  n-word vector has n+1 words.
	Size := Size & Right
	let j = 0		//  Determine next larger power of two.
	     $(	Size := Size rshift 1
		if Size = 0 break
		j := j + 1
	     $)	repeat
	let p = Freelist!j		//  Look first for reusable space of same size.
	unless p = 0 do
	     $(	Freelist!j := p!0
		p!0 := NewvecID | j lshift 30
		resultis lv p!1
	     $)
   Try:	p := Freearea		//  Carve new chunk off unused block.
	Freearea := Freearea + (2 lshift j)
	if Freearea le Freelimit do			//  If it fits, done.
	     $(	p!0 := NewvecID | j lshift 30
		resultis lv p!1
	     $)
	NewvecTemps := NewvecTemps + 1		//  Need more space, grab another segment.
	Freearea := MakeTempSeg (NewvecTemps, "Newvec")
	Freelimit := Freearea + rv MaxSegSize
	goto Try
     $)
and Freevec (Space) be		//  Put back a previously allocated vector.
     $(	Space := lv Space!(-1)
	let j = Space!0
	unless (j & $8007777777777) = NewvecID return		//  Clobbered somehow?
	j := j rshift 30
	Space!0 := Freelist!j
	Freelist!j := Space
     $)
and NewvecCleanup () be		//  Release segments created by Newvec in this invocation.
     $(	while FirstTemp < NewvecTemps do
	     $(	FirstTemp := FirstTemp + 1
		DeleteTempSeg (FirstTemp, "Newvec")
	     $)
     $)
let Findadr (s, t) = valof	//  Invoke the linker with string variable arguments.
			//  The external declaration should be used if the names are known at compile time.
     $(	let v, w = vec 2, vec 2
	let N1, N2 = vec 128, vec 128
	test NumbArgs () = 1
	then $(	let i = IndexCh (s, '$')
		test i = 0
		then t := s
		or   $(	Substr (N1, s, 1, MinI (i - 1, 511))
			Substr (N2, s, i + 1, 511)
			s, t := N1, N2
		     $)
	     $)
	or if t = 0 do t := ""		//  For direct text reference. No linkage section is required.
	let CallerPtr = rv (lv s - 2)		//  Routine that called Findadr; used for referencing_dir rule.
	call MakePtr (ITS (CallerPtr, w) pointer, s string, t string, v pointer, lv Errcode bit 36)
	unless Errcode = 0 resultis Null
	resultis BCPLaddr (v)
     $)

let GetCpuUsage () = valof		//  Return cpu time usage in microseconds.
     $(	let v = vec 2
	call VirtualCpuTime (v fixed double)
	resultis v!1
     $)
