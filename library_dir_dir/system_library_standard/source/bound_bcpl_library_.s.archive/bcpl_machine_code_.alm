"  Stuff coded in ALM for faster execution or easier writing.
"  Last modified on 08/02/74 at 19:05:37 by R F Mabee.
"  Reinstalled with no material change in August 1974, R F Mabee.
"  Transformed to 6180 machine code and installed in June 1973 by R F Mabee.
"  First installed as bcpl_alm_ in September 1971 by R F Mabee.

"  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

"  General permission is granted to copy and use this program, but not to sell it, provided that the above
"  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
"  Please contact R F Mabee at MIT for information on this program and versions for other machines.

"		calling sequence for all routines (BCPL standard call):
"
"	lda	arg1
"	sta	sb|k+2,1
"	lda	arg2
"	sta	sb|k+3,1
"	..
"	lda	argn
"	sta	sb|k+n+1,1
"	tspbp	routine
"	zero	k,n		" n is restricted to 6 bits.
"	stq	result		" i.e. result of routine is in Q, if any.
"
"	Return is always to bp|1. Registers bp, lp, sp, sb, and x1 should not be altered.
"	lp can be reloaded from the caller's frame.

"	save sequence used by BCPL programs:
"
"	adlx1	bp|0		" increment stack pointer.
"	sprpbp	sb|0,1
"	sprplp	sb|1,1		" new lp - set by entry sequence.

"	standard BCPL return sequence:
"
"	lprpbp	sb|0,1
"	sblx1	bp|0		" decrement stack pointer.
"	lprplp	sb|1		" reload caller's lp from his frame.
"	tra	bp|1

"	These routines use x2 for the stack pointer to shorten the save and
"	return sequences. A standard _g_e_t_l_p sequence is used only when the routine
"	must be able to access the linkage section.

	use	textc

	segdef	RawClockTime	" RawClockTime (Space2) = Space2.
RawClockTime:
	eax2	bp|0,*1
	sprpbp	sb|0,2
	getlp			" find linkage section to reference links.
	rccl	<sys_info>|[clock_],*	" clock reading in microseconds, GMT.
	lprpap	sb|2,2
	staq	ap|0
	ldq	sb|2,2		" result to Q.
	lprpbp	sb|0,2		" reload return address.
	lprplp	sb|1,1		" restore caller's lp.
	tra	bp|1		" that's all.

	segdef	TimeToSeconds	" TimeToSeconds (RawTime) = Seconds since 1901.
TimeToSeconds:
	eax2	bp|0,*1
	lprpap	sb|2,2
	ldaq	ap|0
	dvf	number-*,ic	" Divide by one million to get seconds.
	lrl	36		" result to Q.
	tra	bp|1

number:	dec	500000		" because dvf ignores lowest bit of Q.

	segdef	ItoR		" ItoR (Integer) = floating point number.
ItoR:	eax2	bp|0,*1		" to address args.
	fld	=35b25,du		" puts binary point between A & Q.
	lda	sb|2,2		" the integer.
	fad	=0.0,du		" normalize a floating point number.
	fst	sb|3,2		" get it back in Q.
	ldq	sb|3,2		" result.
	tra	bp|1		" return.

	segdef	RtoI		" RtoI (Floating point number) = Integer.
RtoI:	eax2	bp|0,*1
	fld	sb|2,2		" the floating point number.
	tmi	negative
	ufa	=71b25,du		" move binary point over to right of Q.
	tra	bp|1

negative:	fneg	0,dl		" make positive for proper truncation (toward zero).
	ufa	=71b25,du
	negl	0,du		" restore sign.
	tra	bp|1

	segdef	SetOverflowMask	" SetOverflowMask (Boolean).
SetOverflowMask:
	eax2	bp|0,*1
	ldi	=o004000,dl	" disable overflow fault.
	lda	sb|2,2		" the boolean value.
	tnz	2,ic		" if true, leave disabled.
	ldi	0,dl		" re-enable overflow fault.
	tra	bp|1

	segdef	BCPLaddr		" BCPLaddr (ITS ptr) = bcpl address.
BCPLaddr:	eax2	bp|0,*1
	lprpap	sb|2,2		" BCPL address of ITS pair.
	eppab	ap|0,*		" evaluate ITS (or any other indirect) address.
	sprpab	sb|3,2		" store BCPL pointer.
	ldq	sb|3,2		" return result in Q.
	tra	bp|1

	segdef	ITS		" ITS (Address to be stored, Vector, bit offset) = Vector.
ITS:	eax2	bp|0,*1
	lprpbb	sb|2,2
	lprpap	sb|3,2
	lxl3	bp|0		" get number of arguments.
	anx3	63,du		" mask off possible extraneous bits.
	cmpx3	3,du		" check for third argument.
	tmi	3,ic		" only two args, use default offset.
	ldq	sb|4,2		" bit offset argument.
	abd	bb|0,ql		" add in bit offset.

	spribb	ap|0		" store as ITS pair.
	ldq	sb|3,2		" result is Vector.
	tra	bp|1

	segdef	NumbArgs		" NumbArgs () = number of arguments passed to caller.
NumbArgs:	lprpap	sb|0,1		" assume normal save sequence.
	ldq	ap|0
	anq	63,dl		" mask excess bits.
	tra	bp|1		" that's all.

	segdef	Readch		" Readch (Stream, lv Ch).
Readch:	eax2	bp|0,*1
	lprpap	sb|2,2		" stream.
	lprpab	sb|3,2		" lv Ch.
	lda	ap|0		" Nextch (character offset to next character).
	cmpa	ap|1		" Maxch (current number of characters in buffer).
	tpl	refill-*,ic
	aos	ap|0		" count character.
	lprpbb	ap|6		" load address of buffer.
	mrl	(pr,al),(pr),fill(0)
	desc9a	bb|0,1
	desc9a	ab|0,4		" Move will pad left of Ch.
	tra	bp|1

refill:	szn	ap|4		" routine to refill buffer.
	tze	nofill-*,ic	" cannot be refilled.
	eax1	0,2		" prepare to call out.
	eax2	2048,2
	anx2	=o777760,du
	stx2	sb|stack_header.stack_end_ptr+1
	sprpbp	sb|0,1
	sprplp	sb|1,1		" save caller's lp.
	sprpap	sb|6,1		" pass one argument, namely the stream address.
	lprpab	ap|4		" routine to refill buffer.
	tspbp	ab|0		" call.
	zero	4,1
	lprpbp	sb|0,1		" undo the save.
	sblx1	bp|0
	tra	Readch-*,ic	" try Readch all over again.

nofill:	lda	=o7777,dl		" return Endofstreamch if buffer cannot be refilled.
	sta	ab|0
	tra	bp|1

	segdef	Writech		" Writech (Stream, Ch).
Writech:	eax2	bp|0,*1
	lprpap	sb|2,2		" the stream.
	lda	ap|0		" Nextch (character offset in buffer).
	cmpa	ap|1		" Maxch (length of buffer).
	tpl	full-*,ic		" buffer is full - write it out.
	aos	ap|0		" count character.
	lprpbb	ap|6		" buffer.
	eppab	sb|3,2		" lv Ch.
	mlr	(pr),(pr,al)
	desc9a	ab|0(3),1	" Move from rightmost byte of Ch
	desc9a	bb|0,1		" to indexed byte of buffer.
	lda	ap|2		" delimiter if any (character ending line).
	tze	bp|1		" no delimiter.
	cmpa	sb|3,2		" compare to Ch.
	tnz	bp|1		" no match - done.
	tsx6	empty-*,ic	" write out buffer, set return point.
	tra	bp|1

full:	eax6	Writech-*,ic	" set return point from empty
empty:	szn	ap|4		" routine to write out buffer.
	tze	bp|1		" buffer cannot be written out.
	eax1	0,2		" prepare for call out.
	eax2	2048,2
	anx2	=o777760,du
	stx2	sb|stack_header.stack_end_ptr+1
	sprpbp	sb|0,1		" Save old return address
	sprplp	sb|1,1		" and caller's lp.
	stx6	sb|4,1		" save return point from empty.
	sprpap	sb|8,1		" pass one arg, the address of the stream.
	lprpab	ap|4		" routine to write out buffer.
	tspbp	ab|0		" call.
	zero	6,1
	lprpbp	sb|0,1		" restore old return address.
	ldx6	sb|4,1		" return point from empty.
	sblx1	bp|0
	tra	0,6		" return or try again to write character.

	segdef	Packstring	" Packstring (Unpacked string, Vector).
Packstring:
	eax2	bp|0,*1
	sprpbp	sb|0,2		" save return address.
	lprpap	sb|2,2		" address of unpacked string.
	lprpbp	sb|3,2		" address of vector.
	lda	ap|0		" length of string.
	ada	1,dl		" + 2 bytes for length, - 1 for divide.
	lrl	2		" number of words in A.
	qrl	16		" number of bytes used in last word in Qu.
	eax5	0,qu
	eppbp	bp|1,al		" bp -> last word to be stored into.
	neg
	eax6	-1,al		" so that bp|0,6 points to first word.
	lda	ap|2
	lrl	9
	lda	ap|1
	lrl	9
	lda	ap|0
	lrl	18
	eppap	ap|-1
	tra	penter-*,ic	" Jump into loop.

ploop:	lda	ap|3		" take four characters in reverse order.
	lrl	9		" and shift each one into Q.
	lda	ap|2
	lrl	9
	lda	ap|1
	lrl	9
	lda	ap|0
	lrl	9
penter:	stq	bp|0,6		" store packed word.
	eppap	ap|4		" advance pointer to unpacked version.
	adx6	1,du		" increment counter.
	tmi	ploop-*,ic
	anq	masklist,5	" mask off trailing character positions in last word.
	stq	bp|-1,6		" overwrite last word as stored within loop.
	tra	reloadreturn-*,ic

masklist:	oct	777000000000
	oct	777777000000
	oct	777777777000
	oct	777777777777

	segdef	Unpackstring	" Unpackstring (String, Vector).
Unpackstring:
	eax2	bp|0,*1
	sprpbp	sb|0,2		" save return address.
	lprpap	sb|2,2		" string address.
	lprpbp	sb|3,2		" vector address.
	lda	ap|0		" get character count.
	lrl	18
	sta	bp|0		" store length of string.
	eppbp	bp|2,al		" bp -> last word of unpacked string to be stored.
	neg
	eax6	-1,al		" so bp|0,6 will point to first word (after count).
	tra	uenter-*,ic	" Jump into loop.

uloop:	ldq	ap|0		" next four characters.
	lda	0,dl		" clear A.
	lls	9		" shift next character into A.
	sta	bp|0,6		" store it.
	adx6	1,du		" check for end.
	tpl	reloadreturn-*,ic
	lda	0,dl
	lls	9
	sta	bp|0,6
	adx6	1,du
	tpl	reloadreturn-*,ic
uenter:	lda	0,dl
	lls	9
	sta	bp|0,6
	adx6	1,du
	tpl	reloadreturn-*,ic
	lda	0,dl
	lls	9
	sta	bp|0,6
	eppap	ap|1		" advance pointer to string.
	adx6	1,du		" check for end.
	tmi	uloop-*,ic
	tra	reloadreturn-*,ic

	segdef	Move		" Move (Toptr, Fromptr, Wordcount).
Move:	eax2	bp|0,*1
	sprpbp	sb|0,2
	lprpap	sb|2,2		" Toptr.
	lprpbp	sb|3,2		" Fromptr.
	eax6	0		" count number of words already moved.
	stz	sb|5,2		" clear for later use.
mloop:	lda	sb|4,2		" Wordcount.
	sxl6	sb|5,2		" words already moved.
	sba	sb|5,2		" words left to move.
	tmi	reloadreturn-*,ic
	tze	reloadreturn-*,ic
	als	10		" set up for rpd.
	bool	rpdbits,001000	" the only way to specify the address in octal.
	eax0	rpdbits,al	" make it an rpda (index on first instruction).
	odd
	rpdx	,1		" X0 contains tally, RPDA code, and (null) termination bits.
	ldq	bp|0,6
	stq	ap|0,6
	tra	mloop-*,ic

	segdef	MoveBits		" MoveBits (To, Tobit, From, Frombit, Bitcount).
MoveBits:	eax2	bp|0,*1
	lprpap	sb|2,2		" To.
	lda	sb|3,2		" Tobit.
	lprpab	sb|4,2		" From.
	ldq	sb|5,2		" Frombit.
	abd	ap|0,al		" Free A by adding offset into pointer.
	lda	sb|6,2		" Bitcount.
	tmoz	bp|1		" Nothing to move.

	csl	bool(03),(pr,rl,ql),(pr,rl)	" This is really a copy.
	descb	ab|0,al		" Offset by ql.
	descb	ap|0,al		" Length in al.
	tra	bp|1

	segdef	ScanChar		" ScanChar (Ptr, Offset, Length, Ch) = Offset to Ch or -1.
ScanChar:	eax2	bp|0,*1
	lprpap	sb|2,2		" Ptr.
	lda	sb|3,2		" Offset.
	ldq	sb|4,2		" Length.
	eppab	sb|5,2		" lv Ch.
	scm	mask(0),(pr,rl,al),(pr)	" Match on all 9 bits of character.
	desc9a	ap|0,ql		" Length in ql, offset in al.
	desc9a	ab|0(3),1		" Ch right justified.
	arg	sp|0		" Resulting offset stored here.
	ldq	sp|0
	ttf	bp|1		" Return it if match occurred.
	lcq	1,dl
	tra	bp|1

reloadreturn:	"		" common return sequence when bp has been stored.
	lprpbp	sb|0,2
	tra	bp|1

	segdef	Subch		" Subch (String, Characteroffset) = Character.
Subch:	eax2	bp|0,*1
	lprpap	sb|2,2		" String.
	lda	sb|3,2		" Characteroffset.
	mrl	(pr,al),(pr),fill(0)	" Copy character right justified.
	desc9a	ap|0(1),1	" Offset by one extra for string count byte.
	desc9a	sp|0,4
	ldq	sp|0
	tra	bp|1

	segdef	Level		" Level () = level (sp in left half, x1 in right half).
Level:	eaa	sp|0		" sp in Au.
	eaq	0,1		" x1 in Qu.
	arl	18
	lrl	18		" result in Q.
	tra	bp|1

	segdef	Longjump		" Longjump (Label, Level).
Longjump:	eax2	bp|0,*1
	sprpbp	sb|0,2		" save return address although don't use it.
	getlp			" find linkage section.
	lprpbp	sb|2,2		" label.
	ldq	sb|3,2		" level.
	eax6	sp|0		" current sp.
	cmpx6	sb|3,2		" check for jump crossing Multics stack frames.
	tnz	hard_way-*,ic	" do it by calling the unwinder.
	eax1	0,ql		" set x1 (BCPL stack frame pointer).
	lprplp	sb|1,1		" reload lp from old frame.
	tra	bp|0		" goto label.

hard_way:	eax3	64,2		" adjust stack frame.
	anx3	=o777760,du
	stx3	sb|stack_header.stack_end_ptr+1
	eppbb	sb|0,qu		" old stack frame (old sp).
	stq	bb|8		" store args for use by do_jump after unwinding.
	spribp	bb|0
	eppbp	do_jump-*,ic	"'return' address from unwinder
	spribp	sb|2,2		" make label variable.
	spribb	sb|4,2		" part of label variable by PL/I standards.
	eppap	sb|8,2		" arglist for the unwinder.
	eppbp	sb|2,2		" the argument - the label variable.
	spribp	ap|2
	fld	=1b24,dl		" one arg, no descriptors.
	staq	ap|0		" put count in arglist.
	short_call	<unwinder_>|[unwinder_]
	arg	12345		" just in case unwinder_ returns.

do_jump:	lxl1	sp|8		" come here in right stack frame.
	lprplp	sb|1,1		" reload and jump.
	tra	sp|0,*

	segdef	Pl1Call		" Pl1Call (F, Arglist)
Pl1Call:	adlx1	bp|0
	sprpbp	sb|0,1		" save any registers needed later.
	sxl1	sp|8
	sprilp	sp|24
	lprpbp	sb|2,1		" Pick up routine address
	lprpap	sb|3,1		" and argument list pointer.
	tsplp	sb|stack_header.call_op_ptr,*
	lxl1	sp|8		" Restore and return.
	lprpbp	sb|0,1
	sblx1	bp|0
	lprplp	sb|1,1
	tra	bp|1

	segdef	Bcall		" Bcall (F, n, (list X1, ..., Xn)) = F (X1, ..., Xn).
Bcall:	adlx1	bp|0		" more like the regular BCPL save sequence.
	sprpbp	sb|0,1		" save return address.
	getlp			" find linkage section.
	sprplp	sb|1,1		" save its address too.
	eax2	2048,1		" adjust stack frame for adequate room.
	anx2	=o777760,du
	stx2	sb|stack_header.stack_end_ptr+1
	lprpap	sb|4,1		" arg list address.
	eppbp	sb|8,1		" address of first arg for BCPL call.
	lxl6	sb|3,1		" arg count.
	sxl6	lp|nargs		" initialize arg count for NumbArgs.
cloop:	sbx6	1,du		" copy arguments into stack.
	tmi	doit-*,ic
	ldq	ap|0,6
	stq	bp|0,6
	tra	cloop-*,ic
doit:	lprpap	sb|2,1		" routine address.
	tra	lp|realcall	" put call and its data word in static section.

	use	linklc
	join	/link/linklc

realcall:	tspbp	ap|0		" make the call from here.
nargs:	zero	6,12345
	lprpbp	sb|0,1		" restore and return.
	sblx1	bp|0
	lprplp	sb|1,1
	tra	bp|1



	use	textc		" back to text section.

	include	stack_header	" Get declaration of stack_header.stack_end_ptr.

	end
