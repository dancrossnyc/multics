/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pdt_counter_check: proc;

/* Command to go thru pdt entries, checking the various process counters for correctness
   and consistency. (They can get inconsistent because of answering service bugs, or faults during
   logins and logouts, caused by hardware problems, damaged segments, etc.)

   WARNING:
   This command provides an alternative to patching system tables with debug.
   While it does contain some knowledge about proper and consistent values for
   the counters, it is capable of making things worse if it is misused. It is
   strongly recommended that a Honeywell representative be consulted before
   using this command with the -reset or -query arguments.

   USAGE: pdt_counter_check {-ctl_args}

   Action: (only one of the following):
   *	-check	just print messages about errors (DEFAULT)
   *	-query	ask if bad counters should be reset, after each error message
   *	-reset	reset bad counters automatically

   Verbosity: (default is to print only when counters are clearly wrong,
   *           and not print nonzero counters that could be right or wrong).
   *	-print_non_zero, -print_nonzero, -pnz
   *		print all nonzero counters

   Person and Project (default is all persons and all projects):
   *	-user Person_id  just check pdt entries belonging to this person
   *	-project Project just check this project's pdt entries

   Where to find SAT and PDTs:
   *	-sat_dir PATH    default >sc1
   *	-pdt_dir PATH    default >sc1>pdt

   Coded January 1980 by Tom Casey.
   Modified march 3, 1980 by Tom Casey to add -pnz and warning in usage comments.

*/

/* DECLARATIONS */

/* Automatic */

/* binary */
dcl  code fixed bin (35);
dcl (argl, argno, nargs) fixed bin;
dcl (active_projects, checked_projects, pdt_entries, active_users, error_count, now_in_error_count) fixed bin init (0);
dcl (pdtx, satx) fixed bin;

/* bit */
dcl (project_found, user_found) bit (1) aligned init (""b);
dcl (check_sw, query_sw, reset_sw, user_sw, project_sw, pnz_sw) bit (1) aligned init (""b);
dcl  reset_negative bit (1) aligned;

/* char */
dcl  ename char (32);
dcl  pdt_dir char (168) init (">sc1>pdt");
dcl  sat_dir char (168) init (">sc1");
dcl  project_name char (9) init ("");
dcl  user_name char (22) init ("");
dcl  pers char (22) varying init ("");
dcl  proj char (9) varying init ("");

/* ptr */
dcl (argp, pdtp, pdtep, satp, satep) ptr init (null);

/* Based */

dcl  arg char (argl) based (argp);

/* Builtin and Condition */

dcl (addr, null, rtrim, substr) builtin;
dcl  cleanup condition;

/* Entries */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35)); /* inpath,outpath,code */
dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);		/* qi_ptr,answer c*v, caller c*, ioa_ctl_string c*, ioa_args */
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);

/* External static */

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);

/* Internal Static */

dcl  me char (17) int static options (constant) init ("pdt_counter_check");

/* Include files */

%page;
%include pdt;
%page;
%include query_info;
%page;
%include sat;
%page;
%include user_attributes;

/* PROCEDURE */

/* Process Arguments */

	call cu_$arg_count (nargs);

	do argno = 1 to nargs;

	     call get_arg;
	     if substr (arg, 1, 1) ^= "-" then do;
		call com_err_ (0, me,
		     "Unknown argument: ""^a""; all args must be preceded by an identifying control arg.", arg);
		return;
	     end;
	     if arg = "-check" | arg = "-ck" then
		check_sw = "1"b;
	     else if arg = "-query" then
		query_sw = "1"b;
	     else if arg = "-reset" then
		reset_sw = "1"b;
	     else if arg = "-pnz" | arg = "-print_nonzero" | arg = "-print_non_zero" then
		pnz_sw = "1"b;
	     else if arg = "-user" then do;
		call get_next_arg;
		if argl > 22 then do;
		     call com_err_ (0, me, "User name ""^a"" too long (max 22 chars)", arg);
		     return;
		end;
		user_name = arg;
		user_sw = "1"b;
	     end;
	     else if arg = "-project" then do;
		call get_next_arg;
		if argl > 9 then do;
		     call com_err_ (0, me, "Project name ""^a"" too long (max 9 chars)", arg);
		     return;
		end;
		project_name = arg;
		project_sw = "1"b;
	     end;
	     else if arg = "-sat_dir" then do;
		call get_next_arg;
		call absolute_pathname_ ((arg), sat_dir, code);
		if code ^= 0 then do;
path_error:	     call com_err_ (code, me, arg);
		     return;
		end;
	     end;
	     else if arg = "-pdt_dir" then do;
		call get_next_arg;
		call absolute_pathname_ (arg, pdt_dir, code);
		if code ^= 0 then goto path_error;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, me, arg);
		return;
	     end;
	end;					/* end loop thru args */

/* Check for legal combinations of args */

	if (reset_sw & (query_sw | check_sw))
	| (query_sw &check_sw) then do;
	     call com_err_ (0, me, "Only one of -reset, -query, and -check bay be given.");
	     return;
	end;

/* Initialize, and initiate segments */

	on cleanup begin;
	     if satp ^= null then
		call hcs_$terminate_noname (satp, (0));
	     if pdtp ^= null then
		call hcs_$terminate_noname (pdtp, (0));
	end;

	call hcs_$initiate (sat_dir, "sat", "", 0, 0, satp, code);
	if satp = null then do;
	     call com_err_ (code, me, "^a>sat", sat_dir);
	     return;
	end;

/* Loop thru PDTs */

	do satx = 1 to sat.current_size
		while (^project_found);
	     satep = addr (sat.project (satx));

	     proj = rtrim (project.project_id);
	     if project_sw then
		if project_name = proj then
		     project_found = "1"b;

	     if project.state = 1			/* if project is active */
	     & (project_found | ^project_sw) then do;	/* and we want to check it */
		active_projects = active_projects + 1;
		ename = proj || ".pdt";
		call hcs_$initiate (pdt_dir, ename, "", 0, 0, pdtp, code);
		if pdtp = null then
		     call com_err_ (code, me, "^a>^a", pdt_dir, ename);
		else do;
		     checked_projects = checked_projects + 1;
		     call check_project;
		     call hcs_$terminate_noname (pdtp, code);
		     if code ^= 0 then
			call com_err_ (code, me, "^a>^a", pdt_dir, ename);
		end;				/* end pdt initiated successfully */
	     end;					/* end project is active */
	end;					/* end loop thru SAT */

/* Print summary of what was done */

	if ^project_sw then				/* if not doing just one project */
	     call ioa_
	     ("^a: ^d SAT entries, ^d active projects, ^d PDTs, ^d PDT entries, ^d active users, ^d with bad counters",
	     me, sat.current_size, active_projects, checked_projects, pdt_entries, active_users, error_count);

	else if active_projects = 0 then		/* if we didn't find the specified project */
	     call com_err_ (0, me, "Project ""^a"" ^[inactive^;not in SAT^].", project_name, project_found);

	else call ioa_ ("^a: ^a project: ^d PDT entries, ^d active users, ^d with bad counters.",
	     me, project_name, pdt_entries, active_users, error_count);

	if user_sw & ^user_found then			/* if specified user wasn't found */
	     call com_err_ (0, me, "User ""^a"" not found in ^[any^s^;^a^] project.",
	     user_name, (^project_sw), project_name);

	if now_in_error_count > 0 then
	     call ioa_ ("^a: ^d projects had sum of now_in's > project.n_users", me, now_in_error_count);


/* Clean up and return */

	call hcs_$terminate_noname (satp, code);
	if code ^= 0 then
	     call com_err_ (code, me, "^a>sat", sat_dir);

nonlocal_return_label:
	return;

/* Internal Procedures  */

check_negative: proc (num, name) returns (fixed bin);

dcl  num fixed bin;
dcl  name char (*);
dcl  retval fixed bin;

	     reset_negative = ""b;
	     retval = num;

	     if retval < 0 then do;			/* negative value is always an error */
		call ioa_ ("^a: ^[project^x^s^;^a.^]^a ^a is negative (^d)", me, (pers = ""), pers, proj, name, num);
		if reset (retval, name) then do;
		     retval = 0;
		     reset_negative = "1"b;		/* tell caller to reset the real variable */
		end;				/* we can't, because num is passed by value */
	     end;					/* end it is negative */

	     return (retval);

	end check_negative;

check_project: proc;

/* declarations */

dcl  zero_now_in bit (1) aligned;
dcl  sigma_now_in fixed bin;
dcl (nusers, nowin, nfg, nbg, nint, ndisc) fixed bin;
dcl  user_on_project bit (1) aligned init (""b);

/* initialize */

	     sigma_now_in = 0;
	     nusers = check_negative ((project.n_users), "n_users");
	     if reset_negative then
		project.n_users = nusers;
	     if pnz_sw then				/* if user wants to see all nonzero values */
		if nusers ^= 0 then
		     call ioa_ ("^a: project ^a n_users = ^d", me, proj, nusers);
	     if nusers = 0 | user_sw then		/* if no users on project logged in, or just checking one user */
		zero_now_in = "1"b;			/* than it's ok to zero the users' now_in counters */
	     else zero_now_in = ""b;			/* otherwise, we dare not zero the now_in counters */

/* loop thru users */

	     do pdtx = 1 to pdt.current_size
		     while (^user_on_project);	/* exit loop if we hit specified user's pdt entry */
		pdtep = addr (pdt.user (pdtx));
		pers = rtrim (user.person_id);
		pdt_entries = pdt_entries + 1;

		if user_sw then			/* if a user name was specified */
		     if pers = user_name then		/* and this PDT entry belongs to that user */
			user_on_project = "1"b;	/* remember to exit the loop */

		if user.state = 1			/* if user is active */
		& (user_on_project | ^user_sw) then do; /* and we want to check him */
		     active_users = active_users + 1;
		     nowin = check_negative ((user.now_in), "now_in");
		     if reset_negative then
			user.now_in = nowin;

		     sigma_now_in = sigma_now_in + nowin;

		     if now_in > 0 then		/* if user.now_in is > 0 */
			if zero_now_in then		/* and it's ok to reset it */
			     if reset (nowin, "now_in") then /* and user said -reset or -query and "yes" */
				nowin, user.now_in = 0; /* reset it */

		     nfg = check_negative ((user.n_foreground), "n_foreground");
		     if reset_negative then
			user.n_foreground = nfg;
		     nbg = check_negative ((user.n_background), "n_background");
		     if reset_negative then
			user.n_background = nbg;

		     if nfg + nbg ^= nowin then do;
			call ioa_ ("^a: ^a.^a n_foreground + n_background (^d+^d) ^= now_in (^d)",
			     me, pers, proj, nfg, nbg, nowin);

			if nowin = 0 then do;	/* if nowin is zero, it's ok to zero nfg and nbg */
			     if reset (nfg, "n_foreground") then
				nfg, user.n_foreground = 0;
			     if reset (nbg, "n_background") then
				nbg, user.n_background = 0;
			end;
		     end;				/* end nfg+nbg ^= nowin */

		     nint = check_negative ((user.n_interactive), "n_interactive");
		     if reset_negative then
			ndisc, user.n_interactive = 0;
		     ndisc = check_negative ((user.n_disconnected), "n_disconnected");

		     if nint > nfg then do;		/* n_interactive shouldn't be > n_foreground */
			call ioa_ ("^a: ^a.^a n_interactive (^d) > n_foreground (^d)",
			     me, pers, proj, nint, nfg);
			if reset (nint, "n_interactive") then
			     nint, user.n_interactive = nfg;
		     end;

		     if ndisc > nint then do;		/* n_disconnected shouldn't be > n_interactive */
			call ioa_ ("^a: ^a.^a n_disconnected (^d) > n_interactive (^d)",
			     me, pers, proj, ndisc, nint);
		     end;

		     if pnz_sw then			/* if user wants to see all nonzero values */
			if (nowin ^= 0 | nfg ^= 0 | nbg ^= 0 | nint ^= 0 | ndisc ^= 0) then
			     call ioa_ ("^a: ^a.^a nowin=^d nfg=^d nbg=^d nint=^d ndisc=^d",
			     me, pers, proj, nowin, nfg, nbg, nint, ndisc);

		end;				/* end user is active */

		else if user_on_project then
		     call ioa_ ("^a: user ^a deleted from project ^a", me, pers, proj);

	     end;					/* end loop thru pdt */

	     if sigma_now_in > project.n_users then do;	/* if users' now_in counters add up to more than
						   project's counter of logged in users */
		now_in_error_count = now_in_error_count + 1; /* count these occurrences for the summary */
		call ioa_ ("^a: ^a project: sum of now_in's (^d) > project.n_users (^d)",
		     me, proj, sigma_now_in, project.n_users);
	     end;

	     if user_on_project then user_found = "1"b;	/* remember that specified user was on at least one project */

	     return;

	end check_project;

get_next_arg: proc;

	     argno = argno + 1;

	     if argno > nargs then do;
		call com_err_ (error_table_$noarg, me, "after ^a", arg);
		goto nonlocal_return_label;
	     end;

get_arg:	     entry;

	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, me);
		goto nonlocal_return_label;
	     end;

	     return;

	end get_next_arg;

reset:	proc (num, name) returns (bit (1) aligned);

dcl  num fixed bin;
dcl  name char (*);

	     if reset_sw then return ("1"b);
	     if query_sw then do;

/* TO BE WRITTEN */

		return (""b);
	     end;

	     return (""b);

	end reset;

     end pdt_counter_check;
