/* ***************************************************************
   *                                                             *
   * Copyright, (C) Honeywell Information Systems Inc., 1981     *
   *                                                             *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *                                                             *
   * Copyright (c) 1972 by Massachusetts Institute of            *
   * Technology and Honeywell Information Systems, Inc.          *
   *                                                             *
   *************************************************************** */

          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: translator_temp_							*/
	/*									*/
	/*      This subroutine performs very fast, no_freeing-style storage allocations	*/
	/* (similar to those of alloc_ in a no-freeing area).  Its advantage over alloc_ or the	*/
	/* PL/I allocate operator is that it has an associated include file containing an	*/
	/* allocation procedure which is quicker to execute that a PL/I allocate statement.	*/
	/*									*/
	/*      Historically, this routine was written before the PL/I allocate operator	*/
	/* existed (ie, all PL/I allocate statements were implemented as subroutine calls to the	*/
	/* external alloc_ subroutine), and before no-freeing areas were known to alloc_.  Given	*/
	/* that several programs use it, we must continue to support it.			*/
	/*									*/
	/* Status									*/
	/*									*/
	/* 0) Created by:  G. C. Dixon  in  January, 1975					*/
	/* 1) Modified by: G. C. Dixon  in  February, 1981 - use get_temp_segment_ to obtain	*/
	/*    temporary segments, rather than teco's get_temp_seg_ subroutine.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */




/****^  HISTORY COMMENTS:
  1) change(2020-08-09,GDixon), approve(2020-11-30,MCR10083),
     audit(2020-12-20,Swenson), install(2020-12-20,MR12.6g-0049):
     Add translator_temp_$empty_all_segments entry point.
                                                   END HISTORY COMMENTS */





translator_temp_:
	procedure;

     dcl	program_id		char(*) aligned,	/* Name of program wanting temporary segs. (In)	*/
	APseg			ptr,		/* ptr to the temporary segment. (In/Out)	*/
	code			fixed bin(35),	/* a status code. (Out)			*/
	APold_seg			ptr,		/* ptr to a previously-obtained temp seg. (In)	*/
	Nwords			fixed bin;	/* number of words to be allocated from temp seg.	*/
						/* (In)					*/

     dcl	Pnext_seg			ptr,		/* temp pointers.				*/
	Pprev_seg			ptr,
	Pseg			ptr;
%page;
     dcl						/*		based variables		*/
	1 seg			aligned based (Pseg),
						/* header of the temporary segment.		*/
	  2 Pfirst_temp_seg		ptr unal,		/*   ptr to first temp seg of a group.		*/
	  2 Ofree			fixed bin(35),	/*   offset of next free word in temp seg.	*/
	  2 Lfree			fixed bin(35),	/*   length of remaining free space in temp seg.	*/
	  2 Pprev_temp_seg		ptr unal,		/*   ptr to immediately previous temp seg of group*/
	  2 Pnext_temp_seg		ptr unal,		/*   ptr to next temp seg of group.		*/
	  2 pad1 (3)		fixed bin(35),
	  2 seg_type		char(16),		/*   set to "translator_temp_" for dumping id.	*/
	  2 pad2 (4)		fixed bin(35),
	  2 program_id		char(32);		/*   program name to be passed to 		*/
						/*     release_temp_segment_.			*/

     dcl (null, size)		builtin;

     dcl						/*		entries			*/
	get_temp_segment_		entry (char(*) aligned, ptr, fixed bin(35)),
	hcs_$truncate_seg		entry (ptr, fixed bin(19), fixed bin(35)),
	release_temp_segment_	entry (char(*) aligned, ptr, fixed bin(35));

     dcl						/*		static variables		*/
	sys_info$max_seg_size	fixed bin(35) ext static;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_segment:	entry (program_id, APseg, code);	/* get ptr to first temporary segment associated 	*/
						/*   with this invocation of named program.	*/

	call get_temp_segment_ (program_id, Pseg, code);
	if Pseg ^= null then do;			/* create a temp seg in process directory.	*/
	     seg.Pfirst_temp_seg = Pseg;
	     seg.Ofree = size(seg);
	     seg.Lfree = sys_info$max_seg_size - size(seg);
	     seg.Pprev_temp_seg = null;
	     seg.Pnext_temp_seg = null;
	     seg.pad1(*) = 0;
	     seg.seg_type = "translator_temp_";
	     seg.pad2(*) = 0;
	     seg.program_id = program_id;
	     end;
	APseg = Pseg;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_next_segment:
	entry (APold_seg, APseg, code);		/* get subsequent temporary segments associated	*/
						/*   with this temp segment group.		*/

	do Pseg = APold_seg repeat seg.Pnext_temp_seg	/* find last temp seg in chained list.		*/
	   while (seg.Pnext_temp_seg ^= null);
	     end;
	Pprev_seg = Pseg;
	call get_temp_segment_ (seg.program_id, Pseg, code);
	if Pseg ^= null then do;
	     seg.Pfirst_temp_seg = Pprev_seg -> seg.Pfirst_temp_seg;
	     seg.Ofree = size(seg);
	     seg.Lfree = sys_info$max_seg_size - size(seg);
	     seg.Pprev_temp_seg = Pprev_seg;
	     seg.Pnext_temp_seg = null;
	     seg.pad1(*) = 0;
	     seg.seg_type = "translator_temp_";
	     seg.pad2(*) = 0;
	     seg.program_id = Pprev_seg->seg.program_id;
	     Pprev_seg->seg.Pnext_temp_seg = Pseg;
	     end;
	APseg = Pseg;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


empty_all_segments:					/* release all temporary segments except the 1st	*/
	entry (APseg, code);			/*  and truncate all storage in that segment.	*/

	APseg, Pseg = APseg->seg.Pfirst_temp_seg;	/* Make sure caller has pointer to first temp seg */
	do Pseg = seg.Pnext_temp_seg repeat Pnext_seg
	   while (Pseg ^= null);			/* Walk thru this activation's temp segs; all but */
	     Pnext_seg = seg.Pnext_temp_seg;		/*  first APseg are released.			*/
	     call release_temp_segment_ (seg.program_id, Pseg, code);
	     if code ^= 0 then return;
	     end;

	Pseg = APseg;				/* Reset seg values in the first segment...       */
						/*  following code in $get_segment initialization */
	seg.Pfirst_temp_seg = Pseg;
	seg.Ofree = size(seg);
	seg.Lfree = sys_info$max_seg_size - size(seg);
	seg.Pprev_temp_seg = null;
	seg.Pnext_temp_seg = null;
	seg.pad1(*) = 0;
	seg.seg_type = "translator_temp_";
	seg.pad2(*) = 0;
/*	seg.program_id = program_id;			/*  . program_id does not change.	          */

	call hcs_$truncate_seg (Pseg, size(seg), 0);	/* zero storage beyond header.	          */
	return;
	

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


release_segment:
	entry (APseg, code);			/* release a single one of the temporary segments	*/
						/*   associated with this temp seg group.	*/

	Pseg = APseg;
	Pprev_seg = seg.Pprev_temp_seg;		/* unchain this temp seg from previous in group.	*/
	if Pprev_seg ^= null then
	     Pprev_seg -> seg.Pnext_temp_seg = seg.Pnext_temp_seg;
	Pnext_seg = seg.Pnext_temp_seg;		/* unchain this temp seg from next in group.	*/
	if Pnext_seg ^= null then
	     Pnext_seg -> seg.Pprev_temp_seg = seg.Pprev_temp_seg;

	call release_temp_segment_ (seg.program_id, APseg, code);
	if code = 0 then APseg = null;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

release_all_segments:
	entry (APseg, code);			/* release all of the temporary segments	*/
						/*   associated with this temp seg group.	*/

	do Pseg = APseg->seg.Pfirst_temp_seg repeat Pnext_seg
	   while (Pseg ^= null);
	     Pnext_seg = seg.Pnext_temp_seg;
	     call release_temp_segment_ (seg.program_id, Pseg, code);
	     if code ^= 0 then return;
	     end;
	APseg = null;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


allocate:	entry (APseg, Nwords) returns (ptr);		/* allocate space in one of the temp segs.	*/

	return (allocate (APseg, Nwords));
%page;
%include translator_temp_alloc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	end translator_temp_;
