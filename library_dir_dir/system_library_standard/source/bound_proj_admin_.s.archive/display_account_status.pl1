/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-08-14,Hartogs), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29,MR12.2-1093):
     Changed to display <none> when there are no authorized groups in -long
     output. (phx16057)
  2) change(99-06-23,Haggett):
     Y2K
                                                   END HISTORY COMMENTS */


/*  DISPLAY_ACCOUNT_STATUS - command to print the contents of the various account files
   that have been copied into the PDT.

   USAGE:   display_account_status {project_name} {control_args}
   -brief,-bf -no_header,-nhe and -long,-lg are accepted
*/

/*
   Initial coding June 1977 by John Gintell
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA)
   Modified Apr 1980 by J. N. R. Barnecut to print requistion amount. (UNCA)
   Modified March 1981 by John Gintell for MCR 4851
   Modified June 1981 by E. N. Kittlitz for multiple rate structures.
   Modified 1984-08-27 BIM for login auth ranges, projfile/reqfile versions.
   Modified 1984-12-14 by EJ Sharpe for new audit flags
*/

display_account_status: das: procedure;



/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  ctr fixed bin init (0);
dcl  authorization_string char (500);
dcl  audit_string char (256);
dcl  disk_price float bin;
dcl  disk_chg float bin (63);
dcl  dum (0:7) float bin;
dcl (an, nargs) fixed bin;
dcl  rs_name char (32);
dcl  attr varying char (512);
dcl (pdt_dir, pdt_path) char (168) aligned;
dcl  projname char (9);
dcl  namexx char (24);
dcl  accxx char (32);
dcl  datestr char (16) aligned;
dcl  date_string char (24) aligned;
dcl  sel_name char (32) aligned init ("");
dcl  pdt_name char (32) aligned;
dcl (i, slng) fixed bin;
dcl  code fixed bin (35);
dcl  no_header bit (1) init (""b);
dcl  brief bit (1) init (""b);
dcl  pmf bit (1) init (""b);
dcl  long bit (1) init (""b);
dcl (argp, pdtep, pdtp) ptr;
dcl (pp, qp, satp, satep) ptr;
dcl (projp, reqp) ptr;
dcl  max_rs_number fixed bin;

dcl 1 req based (reqp) aligned,
    2 entry like reqfile.reqfiletab;
dcl 1 proj based (projp),
    2 entry like projfile.projfiletab;

/* DECLARATION OF INTERNAL STATIC */

dcl  NEVER fixed bin (71) int static init
    (4418064000000000) options (constant);

dcl  myname static char (22) init ("display_account_status") options (constant);

/* DECLARATION OF BASED STRUCTURES */

dcl  arg char (slng) unaligned based (argp);


/* DECLARATION OF BUILTIN FUNCTIONS */

dcl (addr, addrel, clock, divide, length, max, null, search, substr, rtrim, unspec) builtin;

/* DECLARATION OF EXTERNAL ENTRIES */

dcl  expand_pathname_ entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));
dcl  format_attributes_ entry (ptr, char (*) var);
dcl  convert_access_audit_flags_$to_string entry (bit (36) aligned, char (*), fixed bin (35));
dcl  convert_access_class_$to_string_range entry ( (2) bit (72) aligned, character (*), fixed binary (35));
dcl  user_info_ entry (char (*), char (*), char (*));
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  system_info_$prices_rs ext entry
    (fixed bin, (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, float bin, float bin);
dcl  system_info_$rs_name ext entry (fixed bin, char (*), fixed bin (35));

/* DECLARATION OF EXTERNAL STATIC */

dcl  error_table_$entlong fixed bin(35) ext static;

%include pdt;
%include reqfile;
%include projfile;
%include sat;
%include user_attributes;

/* LOCATE AND INITIALIZE A PDT */

	call system_info_$max_rs_number (max_rs_number);

	pdt_path = "";				/* keep ERR from crapping out */
	call cu_$arg_count (nargs, code);
	if code ^= 0 then go to ERR;

	an = 1;

	if nargs ^= 0 then do;
	     call cu_$arg_ptr (1, argp, slng, code);	/* get 1st arg: name of pdt */
	     if substr (arg, 1, 1) ^= "-" then do;
		pdt_path = arg;
		if substr (pdt_path, max (slng-3, 1), 4) ^= ".pdt" then do;
		     pdt_path = rtrim (pdt_path) || ".pdt";
		end;
		an = 2;
	     end;
	     else call get_default_project;
	end;
	else call get_default_project;

	if search (pdt_path, "><") ^= 0 then do;
	     call expand_pathname_ (pdt_path, pdt_dir, pdt_name, code);
	     if code ^= 0 then do;
ERR:		call com_err_ (code, myname, "^a", pdt_path);
		return;
	     end;
	end;
	else if length(rtrim(pdt_path)) > length(pdt_name) then do;
	     call com_err_ (error_table_$entlong, myname, "^a", pdt_path);
	     return;
	end;
	else do;
	     pdt_name = substr(pdt_path,1,length(pdt_name));
	     pdt_dir = ">system_control_1>pdt";
	end;

	call hcs_$initiate (pdt_dir, pdt_name, "", 0, 0, pdtp, code);
	if pdtp = null then do;
	     call com_err_ (code, myname, "^a>^a", pdt_dir, pdt_name);
	     return;
	end;

	if pdt.projfile_version ^= PROJFILE_VERSION & pdt.reqfile_version ^= REQFILE_VERSION & pdt.sat_version ^= SAT_version then do;
	     call com_err_ ((0), myname, "PDT not in proper format.");
	     goto TERM;
	end;

	do an = an to nargs;
	     call cu_$arg_ptr (an, argp, slng, code);	/* get next arg:  a control arg */
	     if arg = "-brief" | arg = "-bf" then no_header, brief = "1"b;
	     else if arg = "-long" | arg = "-lg" then long = "1"b;
	     else if arg = "-no_header" | arg = "-nhe" then no_header = "1"b;
	     else do;
		call com_err_ (0, myname, "Unrecognized control argument - ^a", arg);
		go to TERM;
	     end;
	end;

	projp = addr (pdt.projentry);
	reqp = addr (pdt.reqentry);
	satep = addrel (addr (pdt.satentry), -24);	/* satentry is missing first 24 words */

	call system_info_$prices_rs ((pdt.rs_number), dum, dum, dum, dum, disk_price, dum (0));
	if max_rs_number > 0 then do;
	     call system_info_$rs_name ((pdt.rs_number), rs_name, code);
	     if code ^= 0 then call com_err_ (code, myname,
		"Rate structure ^d for project ^a.  Default rates will be used", pdt.rs_number, pdt_name);
	end;
	disk_chg = disk_price * proj.disk_psec;

	if ^no_header then do;
	     call date_time_ ((clock ()), datestr);
	     call ioa_ ("^/^2-^28a^3x^20a^/", pdt_name, datestr);
	     call date_time_ (pdt.date_reqfile_copied, datestr);
	     call ioa_ ("^2-Account information copied ^4x^a^/", datestr);
	     call ioa_ ("Projectid:^10x^a;", pdt.project_name);
	end;

	if brief then do;
	     call ioa_ ("month-to-date charges:  total: $^.2f, disk: $^.2f, misc: $^.2f",
		req.chg_mo, disk_chg, proj.misc_charges);
	end;
	else do;
	     if long then do;
		call ioa_ ("^/REQFILE");
		call ioa_ (" account:^-^-^a", req.mitacct);
		call ioa_ (" reqno:^-^-^a", req.reqno);
		if max_rs_number > 0 then
		     call ioa_ (" rate structure:^-^a", rs_name);
		call ioa_ (" qflag:^-^-^a", fudge0 ((req.qflag)));
		call ioa_ (" date on:^-^-^a", cv_time (req.qdn));
		call ioa_ (" date off:^-^a", cv_time (req.qdf));
		call ioa_ (" billing name:^-^a", req.billing_name);
		call ioa_ (" billing addr:^-^a", req.billing_addr);
	     end;
	     call ioa_ (" charge this month:^-$ ^12.2f", req.chg_mo);
	     call ioa_ (" charge this req:^-$ ^12.2f", req.chg_tr);
	     call ioa_ (" req amount:^-$ ^12.2f^41tbalance:^-^[OPEN^s^;$ ^.2f^]", req.req_amt, req.req_amt = 0, req.req_amt -req.chg_tr -req.chg_mo);
	     call ioa_ (" cutoff date:^-^a", cv_time (req.cutoff));
	     if long then do;
		call ioa_ ("^/PROJFILE");
		call ioa_ (" title:^-^-^a", proj.title);
		call ioa_ (" investigator:^-^a", proj.inv);
		call ioa_ (" inv address:^-^a", proj.inv_addr);
		call ioa_ (" supervisor:^-^a", proj.sup);
		call ioa_ (" sup addr:^-^a", proj.sup_addr);
		call ioa_ (" sup phone:^-^a", proj.sup_phone);
		call ioa_ (" date on:^-^-^a", cv_time (proj.on));
		call ioa_ (" date off:^-^a", cv_time (proj.off));
	     end;
	     call ioa_ (" disk page-months:^-^d,  $ ^.2f", divide (proj.disk_psec, 60*60*24*30, 35, 0), disk_chg);
	     call ioa_ (" disk quota:^-^d", proj.disk_quota);
	     call ioa_ (" disk use:^-^d", proj.disk_use);
	     call ioa_ (" dir disk use:^-^d", proj.dir_disk_use);
	     call ioa_ (" misc charges:^-$ ^.2f", proj.misc_charges);
	     call ioa_ (" # misc charges:^-^d", proj.n_misc);
	     if long then do;
		call ioa_ ("^/SAT");
		call format_attributes_ (addr (project.at), attr);
		call ioa_ (" attributes:^-^a", attr);
		do i = 1 to 4;
		     if project.userid (i) ^= "" then call ioa_ (" administrator:^-^a", project.userid (i));
		end;
		call ioa_ (" ring:^2-^d,^d", project.min_ring, project.max_ring);
		if project.alias ^= "" then call ioa_ (" alias:^2-^a", project.alias);
		call ioa_ (" default group:^-^a", fudge0 (project.group));
		call ioa_ (" authorized groups:^-^[<none>^3s^;^a^[^s^;, ^a^]",
		     fudge0(project.groups(1)) = "", 
		     fudge0(project.groups(1)), 
		     fudge0(project.groups(2)) = "",
		     fudge0(project.groups(2)));
		call ioa_ (" max grace:^-^d", project.grace_max);
		if project.audit ^= ""b then do;
		     call convert_access_audit_flags_$to_string (project.audit, audit_string, code);
		     if code ^= 0 then call com_err_ (code, myname, "Cannot convert audit string");
		     else call ioa_ (" audit flags:^-^a", audit_string);
		end;
		if project.project_authorization (1) | project.project_authorization (2) ^= ""b then do;
		     call convert_access_class_$to_string_range (project.project_authorization, authorization_string, code);
		     if code ^= 0 then authorization_string = "unknown";
		     call ioa_ (" authorization:^-^a", authorization_string);
		end;
		call ioa_ (" days to cutoff:^-^d", project.days_to_cutoff);
		call ioa_ (" percent balance:^-^d%", project.pct_balance);
		call ioa_ (" dollars to cutoff:^-$ ^.2f", project.dollars_to_cutoff);
		call ioa_ ("");
	     end;
	end;
TERM:	call hcs_$terminate_noname (pdtp, code);
	return;

get_default_project: proc;
	     call user_info_ (namexx, projname, accxx);
	     pdt_path = rtrim (projname) || ".pdt";
	end get_default_project;

cv_time:	proc (time) returns (char (24) aligned);

dcl  time fixed bin (71);

	     if time = 0 then return ("");
	     if time = NEVER then return ("");
	     call date_time_ (time, date_string);

	     return (date_string);
	end cv_time;

fudge0:	proc (input) returns (char (*));

dcl  input char (*);
	     if unspec (input) = ""b then return ("");
	     else return (input);
	end fudge0;


     end display_account_status;
