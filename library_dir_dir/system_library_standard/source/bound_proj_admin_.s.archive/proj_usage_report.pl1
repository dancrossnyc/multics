/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


proj_usage_report:
pur:
     procedure;

/* PROJ_USAGE_REPORT - Print a month-to-date usage report for a project from the PDT */


/****^  HISTORY COMMENTS:
  1) change(86-01-01,Gilcrease), approve(86-03-27,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
     To make old comments acceptible to history_comment
      Modified Jan 11, 1977 by John Gintell to:
        add -sort fraction_used , add subtotal, fix minor bugs,
        improve output format, and cleanup program
      Modified June 1979 by C. Hornig to:
        print absolute spending and device charges.
      Modified Feb 1980 by M. B. Armstrong to:
        implement multiple rate structures. (UNCA)
      Modified by R. McDonald May 1980 to:
        include page charges (UNCA)
      Modified October 1980 by C. Hornig for:
        time zone problems and -user
      Modified June 1981 by E. N. Kittlitz for:
        UNCA rate-structures, page charging
  2) change(86-02-26,Gilcrease), approve(86-03-27,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
        Add weekly to display array. SCP 6250.
  3) change(87-08-10,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
     Correct functioning of -user (phx13898, phx15772, phx17001).
  4) change(99-06-23,Haggett):
     Y2K
                                                   END HISTORY COMMENTS */



dcl  OPEN float bin int static options (constant) init (1e37);
dcl  NEVER fixed bin (71) int static options (constant) init (4418064000000000);
dcl  MILLION fixed bin (35) internal static options (constant) init (1000000);
dcl  cutinc (0:6) character (8) internal static options (constant)
     init ("", ",daily", ",monthly", ",yearly", ",cyear", ",fyear", ",weekly");

dcl  en char (32);
dcl  pdtp ptr;					/* ptr to pdt */
dcl  pdtep ptr;					/* ptr to user entry in pdt */
dcl  nzsw bit (1) aligned;
dcl  flag char (1) aligned;				/* star if user deleted */
dcl  limv char (8) aligned;				/* limit value */
dcl  x (1019) char (32) aligned;			/* sort array */
dcl  y (1019) fixed bin;
dcl  yy (1019) fixed bin;				/* to allow -nz option */
dcl  z (1019) float bin;
dcl  rs_name char (32);
dcl  sort_sw fixed bin;
dcl  brief bit (1);
dcl  no_header bit (1);
dcl  total bit (1);
dcl  user_sw bit (1) aligned;
dcl  long bit (1);
dcl  rev bit (1);
dcl  sc fixed bin;
dcl (user_count, print_count) fixed bin;
dcl  addamt float bin;
dcl  time_string char (24) aligned;
dcl (subtotal_limit, subtotal_nolimit) float bin;		/* subtotals */
dcl  cuttime character (8) aligned;
dcl (h, i, m) fixed bin;
dcl 1 dvt (16) aligned,
    2 name character (8),
    2 price (0:7) float bin;
dcl (begini, endi, incr) fixed bin;
dcl  ap ptr;
dcl  al fixed bin (21);
dcl  ec fixed bin (35);
dcl  con fixed bin (71);
dcl (tempi, tempa, tempio, tempdev) float bin;
dcl  arg_count fixed bin;
dcl  max_rs_number fixed bin;

dcl 1 total_user aligned like user;

dcl  bchr char (al) unaligned based (ap);

dcl (addr, clock, divide, mod, null, rtrim, substr, unspec) builtin;

dcl  error_table_$badopt fixed bin ext;

dcl  user_info_ entry (char (*), char (*), char (*));
dcl  system_info_$device_prices_rs entry (fixed bin, fixed bin, pointer);
dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35));
dcl  idsort_ entry ((*) char (32) aligned, (*) fixed bin, fixed bin);
dcl  flt_bin_sort_ entry ((*) float bin, (*) fixed bin, fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  com_err_ entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  system_info_$max_rs_number entry (fixed bin);

dcl  dirname char (168) static internal init (">system_control_dir>pdt");
%page;
	call system_info_$max_rs_number (max_rs_number);

	sort_sw = 1;
	user_sw, nzsw, brief, long, no_header, total, rev = "0"b;
	sc, user_count = 0;
	en = "";

	call cu_$arg_count (arg_count, ec);
	if ec ^= 0 then do;
bad_arg_code:
	     call com_err_ (ec, "proj_usage_report");
	     return;
	end;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, ap, al, ec);
	     if ec ^= 0 then go to bad_arg_code;
	     if /* case */ substr (bchr, 1, 1) ^= "-"
	     then if ^user_sw then do;
		     if en ^= "" then do;
			call com_err_ (0, "proj_usage_report", "Only one project may be specified.");
			return;
		     end;
		     en = bchr || ".pdt";
		end;
		else do;
		     user_count = user_count + 1;
(subrg):
		     x (user_count) = bchr;
		end;
	     else if bchr = "-nz" then nzsw = "1"b;
	     else if bchr = "-user" then do;
		user_sw = "1"b;
		yy (*) = 0;
	     end;
	     else if bchr = "-sort" then do;
		i = i + 1;
		sc = sc + 1;
		call cu_$arg_ptr (i, ap, al, ec);
		if ec ^= 0 then do;
		     call com_err_ (0, "proj_usage_report", "Sort type did not follow -sort control argument.");
VALID:
		     call ioa_ ("Valid types are: use, rem, limit, name, or fraction_used.");
		     return;
		end;
		sort_sw = 0;
		if /* case */ bchr = "name" then sort_sw = 1;
		else if bchr = "use" then sort_sw = 2;
		else if bchr = "rem" then sort_sw = 3;
		else if bchr = "limit" then sort_sw = 4;
		else if bchr = "fraction_used" then sort_sw = 5;
		else do;
		     call com_err_ (0, "proj_usage_report", "Sort type not recognized. ""^a""", bchr);
		     goto VALID;			/* print message and return */
		end;
	     end;
	     else if bchr = "-brief" | bchr = "-bf" then no_header, brief = "1"b;
	     else if bchr = "-no_header" | bchr = "-nhe" then no_header = "1"b;
	     else if bchr = "-total" | bchr = "-tt" then total = "1"b;
	     else if bchr = "-long" | bchr = "-lg" then long = "1"b;
	     else if bchr = "-reverse" | bchr = "-rev" then rev = "1"b;
	     else if bchr = "-pathname" | bchr = "-pn" then do;
		i = i + 1;
		call cu_$arg_ptr (i, ap, al, ec);
		if ec ^= 0 then do;
		     call com_err_ (0, "proj_usage_report", "pathname argument did not follow control argument");
		     return;
		end;
		call expand_pathname_$add_suffix (bchr, "pdt", dirname, en, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, "proj_usage_report", bchr);
		     return;
		end;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, "proj_usage_report", """^a""", bchr);
		return;
	     end;
	end;

	if sc > 1 then do;
	     call com_err_ (0, "proj_usage_report", "More than one instance of sort control argument.");
	     return;
	end;

	if en = "" then do;
	     call user_info_ ((""), en, (""));
	     en = rtrim (en) || ".pdt";
	end;

	call hcs_$initiate (dirname, en, "", 0, 1, pdtp, ec);
	if pdtp = null () then do;
	     call com_err_ (ec, "proj_usage_report", "^a>^a", dirname, en);
	     return;
	end;

	if ^no_header then do;
	     call date_time_ (clock (), time_string);
	     if max_rs_number > 0 then do;
		call system_info_$rs_name ((pdt.rs_number), rs_name, ec);
		if ec ^= 0 then call com_err_ (ec, "proj_usage_report", "For rate structure ^d.  Contact your system administrator.", pdt.rs_number);
	     end;
	     call ioa_ ("^5x^a PROJECT USAGE REPORT -- ^a^[^/^5xRate Structure -- ^a^;^s^]^/", pdt.project_name, time_string, (max_rs_number > 0), rs_name);
	     call ioa_ (
		" User^19xCharge^4xLimit Logins Interact: Connect; Absentee; IO Daemon; Device; Absolute Spending^/");
	end;

	if ^brief then call system_info_$device_prices_rs ((pdt.rs_number), i, addr (dvt));

	m = 0;					/* initialize count */
	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     if (user.state ^= 0) & ((user.dollar_charge ^= 0e0) | ^nzsw) then do;
		if user_sw then do;
		     do m = 1 to user_count;
			if user.person_id = x (m) then goto got_user;
		     end;
		     goto next_user;
		end;
		else do;
		     user_count, m = user_count + 1;
		     x (m) = user.person_id;
		end;

got_user:
		if /* case */ sort_sw = 2 then z (m) = user.dollar_charge;
		else if sort_sw = 3
		then if user.dollar_limit > OPEN
		     then z (m) = OPEN - user.dollar_charge;
		     else z (m) = user.dollar_limit - user.dollar_charge;
		else if sort_sw = 4 then z (m) = user.dollar_limit;
		else if sort_sw = 5 then z (m) = user.dollar_charge / user.dollar_limit;

		y (m) = i;
		yy (m) = m;
	     end;
next_user:
	end;

          m = user_count;
	if m > 1 then
	     if sort_sw = 1
	     then call idsort_ (x, yy, m);
	     else call flt_bin_sort_ (z, yy, m);

	if rev then do;
	     begini = m;
	     endi = 1;
	     incr = -1;
	end;
	else do;
	     begini = 1;
	     endi = m;
	     incr = 1;
	end;

	unspec (total_user) = ""b;
	total_user.state = 1;
	total_user.absolute_limit = OPEN;
	total_user.absolute_cutoff = NEVER;
	total_user.shift_limit = OPEN;
	total_user.dollar_limit = OPEN;
	print_count = 0;
	subtotal_limit, subtotal_nolimit = 0e0;

	do i = begini to endi by incr;
	     if yy (i) > 0 then do;
		print_count = print_count + 1;
		pdtep = addr (pdt.user (y (yy (i))));
		if ^total then call display_user;

		if user.dollar_limit < OPEN
		then subtotal_limit = subtotal_limit + user.dollar_charge;
		else subtotal_nolimit = subtotal_nolimit + user.dollar_charge;
		total_user.logins = total_user.logins + user.logins;
		total_user.interactive = total_user.interactive + user.interactive;
		total_user.absentee = total_user.absentee + user.absentee;
		total_user.iod = total_user.iod + user.iod;
		total_user.devices = total_user.devices + user.devices;
	     end;
	end;

	if print_count ^= 1 then do;
	     call ioa_ ("");
	     if subtotal_limit ^= 0e0 & subtotal_nolimit ^= 0e0
	     then call ioa_ ("SUBTOTAL  (with limit)    $^8.2f", subtotal_limit);

	     call ioa_$rsnnl ("TOTAL (^d users)", total_user.person_id, (0), print_count);
	     total_user.dollar_charge = subtotal_limit + subtotal_nolimit;
	     pdtep = addr (total_user);
	     call display_user;
	end;

	call hcs_$terminate_noname (pdtp, ec);
	return;
%page;
cv_time:
	procedure (time) returns (char (10) aligned);

/* procedure to convert from fixed bin (71) to a nice formatted string of hrs: mins: secs */

dcl  time fixed bin (71);
dcl  j fixed bin;
dcl  hours fixed bin;
dcl  minutes fixed bin;
dcl  seconds fixed bin;
dcl  answer char (10) aligned;


	     seconds = divide (time, MILLION, 35, 0);
	     minutes = divide (seconds, 60, 35, 0);
	     seconds = mod (seconds, 60);		/* get rid of the remainder */
	     hours = divide (minutes, 60, 35, 0);
	     minutes = mod (minutes, 60);		/* get rid of the remainder */

	     call ioa_$rsnnl ("^4d:^2d:^2d", answer, j, hours, minutes, seconds);
	     if substr (answer, 6, 1) = " " then substr (answer, 6, 1) = "0";
	     if substr (answer, 9, 1) = " " then substr (answer, 9, 1) = "0";

	     return (answer);
	end cv_time;


cv_limit:
	procedure (limit, lim, amt);

/* procedure to convert a float bin $limit into either the string, "open", if $limit is >= 1e37,
   or to convert a float bin $limit into an integer $limit  */


dcl  limit float bin;
dcl  lim char (8) aligned;
dcl  amt float bin;
dcl  jj fixed bin;


	     if limit >= OPEN then do;
		lim = "    open";
		amt = 0e0;
	     end;
	     else do;
		call ioa_$rsnnl ("^8.2f", lim, jj, limit);
		amt = limit;
	     end;
	     return;
	end cv_limit;
%page;
display_user:
	procedure;
	     if user.state ^= 0 then do;
		if user.state = 2
		then flag = "*";
		else flag = "";
		if user.now_in > 0 then flag = ">";
		call cv_limit (user.dollar_limit, limv, addamt);
		if brief
		then if limv = "    open" then limv = (8)" ";

		tempi, tempa, tempdev, tempio = 0e0;
		con = 0;
		do h = 0 to 7;
		     tempi = tempi + user.interactive (h).charge;
		     con = con + user.interactive (h).connect;
		end;
		do h = 1 to 4;
		     tempa = tempa + user.absentee (h).charge;
		     tempio = tempio + user.iod (h).charge;
		end;
		do h = 1 to 16;
		     tempdev = tempdev + user.devices (h);
		end;

		if user.absolute_cutoff = NEVER
		then cuttime = "NEVER";
		else call date_time_ (user.absolute_cutoff, cuttime);

		if brief
		then call ioa_ ("^1a^20a $^8.2f ^8a", flag, user.person_id, user.dollar_charge, limv);
		else do;
		     if long then call ioa_ ("");
		     call ioa_ (
			"^1a^20a ^8.2f ^8a ^5d ^8.2f ^10a ^8.2f ^8.2f ^8.2f^[ ^9.2f^;^s^]^[/^.2f^;^s^]^[,^a^;^s^]^a",
			flag, user.person_id, user.dollar_charge, limv, user.logins, tempi, cv_time (con), tempa, tempio,
			tempdev, (user.absolute_spent > 0e0 | user.absolute_limit < OPEN), user.absolute_spent,
			(user.absolute_limit < OPEN), user.absolute_limit, (cuttime ^= "NEVER"), cuttime,
			cutinc (user.absolute_increm));
		end;

		if long then do;
		     do h = 0 to 7;
			if user.interactive (h).charge ^= 0e0 | user.interactive (h).cpu ^= 0
			| user.interactive (h).core ^= 0 | user.interactive (h).connect ^= 0
			| user.interactive (h).io_ops ^= 0
			then call ioa_ (
			     "^-Shift ^d Interactive:^32t^8.2f; CPU = ^8a; KMU = ^6.1f; Connect = ^8a;^[ IO = ^9d;^;^s^]"
			     , h, user.interactive (h).charge, cv_time (user.interactive (h).cpu),
			     user.interactive (h).core / 1e6, cv_time (user.interactive (h).connect),
			     (user.interactive (h).io_ops ^= 0), user.interactive (h).io_ops);
		     end;
		     do h = 1 to 4;
			if user.absentee (h).charge ^= 0e0 | user.absentee (h).jobs ^= 0 | user.absentee (h).cpu ^= 0
			| user.absentee (h).memory ^= 0
			then call ioa_ ("^-Queue ^d Absentee:^32t^8.2f; CPU = ^8a; KMU = ^6.1f; Jobs = ^4d;", h,
			     user.absentee (h).charge, cv_time (user.absentee (h).cpu),
			     user.absentee (h).memory / 1e6, user.absentee (h).jobs);
		     end;
		     do h = 1 to 4;
			if user.iod (h).charge ^= 0e0 | user.iod (h).pieces ^= 0 |
			user.iod (h).pages ^= 0 | user.iod (h).lines ^= 0
			then call ioa_ ("^-Queue ^d IO Daemon:^32t^8.2f; ^6d Pieces, ^5d Pages, ^8d Lines;", h,
			     user.iod (h).charge, user.iod (h).pieces,
			     user.iod (h).pages, user.iod (h).lines);
		     end;
		     do h = 1 to 16;
			if user.devices (h) ^= 0e0
			then call ioa_ ("^-Device ^a^32t^8.2f", dvt (h).name, user.devices (h));
		     end;
		end;
	     end;
	end display_user;
%page;
%include user_attributes;
%include pdt;

     end proj_usage_report;
