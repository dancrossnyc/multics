/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
format_attributes_: proc (input_attribute_ptr, output_attribute_string);

/* Written October 1979 by T. Casey to merge the old format_attributes_ and lookup_attribute_
   subroutines and centralize the mapping between attribute names and bits in the attributes word. */


/****^  HISTORY COMMENTS:
  1) change(87-04-20,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1055):
     Eliminate use of attribute_names.incl.pl1, in favor of a similar array
     placed directly in user_attributes.incl.pl1.
                                                   END HISTORY COMMENTS */


/* DECLARATIONS */

/* Parameters */

/* format_attributes_ parameters */

dcl  input_attribute_ptr ptr;				/* ptr to input attributes word to be formatted */
dcl  output_attribute_string char (*) varying;		/* output string to return names of attributes that are on */

/* lookup_attribute_ parameters */

dcl  input_attribute_name char (*);			/* name of single attribute to be looked up */
dcl  output_attribute_ptr ptr;			/* ptr to output attributes word in which we're to
						   turn on the bit corresponding to input_attribute_name */
dcl  output_code fixed bin (35);			/* error code, set if input_attribute_name is invalid */

/* Automatic */

dcl  atp ptr;					/* ptr to attributes word */
dcl  attr_word bit (36);				/* place to copy the input attributes word */
dcl  i fixed bin;					/* do loop index */
dcl  vstr char (300) varying;				/* place to build output string for format_attributes_ */

/* Builtin */

dcl  (addr, hbound, length, rtrim, substr) builtin;

/* Based structures  */


dcl  b36 bit (36) aligned based (atp);			/* alternate way to access attributes word */

%page;
/* MAIN ENTRY POINT format_attributes_: proc (input_attribute_ptr, output_attribute_string); */

	attr_word = input_attribute_ptr -> b36;		/* copy attributes word into temporary */
	atp = addr (attr_word);			/* point our working pointer at the temporary */
						/* flip the secondary, primary, and edit_only bits, since
						   the names are no_secondary, no_primary, and no_edit_only */
	atp -> user_attributes.sb_ok = ^atp -> user_attributes.sb_ok;
	atp -> user_attributes.pm_ok = ^atp -> user_attributes.pm_ok;
	atp -> user_attributes.eo_ok = ^atp -> user_attributes.eo_ok;
	atp -> user_attributes.vdim = ""b;		/* don't print vdim because it's obsolete */
	vstr = "";				/* start with empty string */

	do i = 1 to hbound (USER_ATTRIBUTE_NAMES, 1);	/* look at all the bits whose names we know */
	     if substr (b36, i, 1) then do;		/* if the bit is on */
		vstr = vstr || rtrim (USER_ATTRIBUTE_NAMES (i));
						/* add its name to the string, followed by comma-space */
		vstr = vstr || ", ";		/* separate concatenation statements produce better code */
	     end;
	end;

	i = length (vstr);
	if i > 0 then do;				/* if any of the bits were on */
	     vstr = substr (vstr, 1, i - 2);		/* chop off the trailing comma-space */
	     vstr = vstr || ";";			/* and replace it with a semicolon */
	end;
	else vstr = rtrim (USER_ATTRIBUTE_NAMES (0));	/* should be "none" */

	output_attribute_string = vstr;		/* copy string into return argument */

	return;

lookup_attribute_: entry (input_attribute_name, output_attribute_ptr, output_code);

	atp = output_attribute_ptr;			/* copy ptr to attributes word */
	output_code = 0;				/* assume there will be no error */

	if input_attribute_name = "" then return;	/* avoid match on a null alternate name */

	do i = 0 to hbound (USER_ATTRIBUTE_NAMES, 1)	/* search list of names */
	     while (input_attribute_name ^= USER_ATTRIBUTE_NAMES (i)
						/* until we find a match with a primary name */
	     & input_attribute_name ^= ALT_USER_ATTRIBUTE_NAMES (i));
						/* or with an alternate name */
	end;

	if i > hbound (USER_ATTRIBUTE_NAMES, 1) then output_code = 1;
						/* tell caller if name was invalid */
	else if i > 0 then				/* if name was other than "null" or "none" */
	     substr (b36, i, 1) = "1"b;		/* turn on the bit corresponding to that attribute */

	return;
%page;
%include user_attributes;


     end format_attributes_;
