/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/******************************************************************************/
/*							        */
/*   DESCRIPTION:						        */
/*							        */
/*        This command implements the general interactive network function    */
/*   interface.  The syntax is:				        */
/*							        */
/*   	nr <function> {<function_args>}			        */
/*							        */
/*   The <function> is used to look up the subroutine that implements that    */
/*   function in the Network Information Table, using the net_info_table_     */
/*   entries.  That subroutine is then called to do all the work.  Basically  */
/*   this command is just a framework into which different functions can be   */
/*   plugged.						        */
/*							        */
/*							        */
/*   JOURNALIZATION:					        */
/*							        */
/*   1) Written 3/82 by R.J.C. Kissel				        */
/*							        */
/******************************************************************************/

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

network_request:
nr:
     proc ();

/* Automatic */

dcl  arg			       char (arg_len) based (arg_ptr);
dcl  arg_idx		       fixed bin;
dcl  arg_len		       fixed bin (21);
dcl  arg_ptr		       ptr;
dcl  arg_list_ptr		       ptr;

dcl  1 auto_area_info	       aligned like area_info;
dcl  based_area		       area (sys_info$max_seg_size) based;
dcl  code			       fixed bin (35);
dcl  command_name		       char (16);
dcl  function_name		       char (32);
dcl  get_argument		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35)) variable;
dcl  in_iocbp		       ptr;

dcl  nasp_area_ptr		       ptr defined (auto_area_info.areap);
dcl  nasp_complete		       bit (1);
dcl  nasp_error_message	       char (256) varying;
dcl  nasp_name		       char (32);
dcl  nasp_unhold		       bit (1);

dcl  nasp_structure		       bit (nasp_structure_len) based (nasp_structure_ptr) aligned;
dcl  nasp_structure_len	       fixed bin (24);
dcl  nasp_structure_ptr	       ptr;

dcl  number_of_args		       fixed bin;
dcl  out_iocbp		       ptr;
dcl  queued_flag		       bit (1);
dcl  report_error		       entry () options (variable) variable;

dcl  return_arg		       char (return_arg_len) based (return_arg_ptr);
dcl  return_arg_len		       fixed bin (21);
dcl  return_arg_ptr		       ptr;

dcl  usage		       char (64);

/* Local Constants */

dcl  COM_USAGE		       char (64) internal static options (constant)
			       init ("Usage: nr <function> {<function_args>}");
dcl  AF_USAGE		       char (64) internal static options (constant)
			       init ("Usage: [nr <function> {<function_args>}]");

/* External Constants */

dcl  error_table_$fatal_error	       fixed bin (35) ext static;
dcl  error_table_$noarg	       fixed bin (35) ext static;
dcl  error_table_$not_act_fnc	       fixed bin (35) ext static;

dcl  iox_$user_input	       ptr ext static;
dcl  iox_$user_output	       ptr ext static;

dcl  sys_info$max_seg_size	       fixed bin (35) ext static;

/* External Entries */

dcl  active_fnc_err_	       entry options (variable);
dcl  com_err_		       entry () options (variable);
dcl  cu_$af_return_arg	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$af_arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_list_ptr	       entry (ptr);
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl  cv_entry_		       entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  define_area_		       entry (ptr, fixed bin (35));
dcl  ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
dcl  net_info_table_$get_nasp_name   entry (char (*), char (*), fixed bin (35));
dcl  release_area_		       entry (ptr);

/* Builtin Functions and Conditions */

dcl  addr			       builtin;
dcl  null			       builtin;
dcl  rtrim		       builtin;

dcl  cleanup		       condition;

/* Include Files */

%include nasp_entry_dcls;

%include area_info;

	command_name = "network_request";
	in_iocbp = iox_$user_input;
	out_iocbp = iox_$user_output;
	queued_flag = "0"b;				/* This is an interactive request. */

	nasp_area_ptr = null ();			/* This sets auto_area_info.areap too. */
	nasp_structure_ptr = null ();
	nasp_structure_len = 0;

	call cu_$af_return_arg (number_of_args, return_arg_ptr, return_arg_len, code);

	if code = 0
	     then do;				/* An active function call. */
		report_error = active_fnc_err_;
		get_argument = cu_$af_arg_ptr;
		usage = AF_USAGE;
		end;

	else if code = error_table_$not_act_fnc
	     then do;				/* A command call. */
		return_arg_ptr = null ();
		report_error = com_err_;
		get_argument = cu_$arg_ptr;
		usage = COM_USAGE;
		end;

	else do;					/* An error. */
	     return_arg_ptr = null ();
	     report_error = com_err_;
	     call ERROR (code, "Trying to get the command arguments.");
	     end;

	if number_of_args < 1 then call ERROR (error_table_$noarg, "^/^a.", usage);

	arg_idx = 1;				/* Process the function argument. */

	call get_argument (arg_idx, arg_ptr, arg_len, code);
	if code ^= 0 then call ERROR (code, "Trying to get the <function> argument.");

	function_name = arg;

	call net_info_table_$get_nasp_name (function_name, nasp_name, code);
	if code ^= 0 then call ERROR (code, "Trying to get the NASP name for the function: ^a.", function_name);

	NASP_parser = cv_entry_ (rtrim (nasp_name) || "$parser", null (), code);
	if code ^= 0 then call ERROR (code, "Trying to generate the NASP_$parser entry.");

	NASP_execute = cv_entry_ (rtrim (nasp_name) || "$execute", null (), code);
	if code ^= 0 then call ERROR (code, "Trying to generate the NASP_$execute entry.");

/* Set up so the NASP entry can get its arguments from our argument list. */

	arg_idx = arg_idx + 1;

	call cu_$arg_list_ptr (arg_list_ptr);

	on cleanup call Cleanup_Handler ();

/* Get a temporary area */

	auto_area_info.version = area_info_version_1;
	auto_area_info.control = "0"b;
	auto_area_info.control.extend = "1"b;
	auto_area_info.control.zero_on_alloc = "1"b;
	auto_area_info.owner = command_name;
	auto_area_info.size = sys_info$max_seg_size;

	call define_area_ (addr (auto_area_info), code);
	if code ^= 0 then call ERROR (code, "Trying to define a temporary area.");

/* Do the real work by calling the NASP entries. */

	call NASP_parser (in_iocbp, out_iocbp, command_name, arg_list_ptr, arg_idx, queued_flag, nasp_area_ptr,
	     nasp_structure_ptr, nasp_structure_len, nasp_error_message, code);
	if code ^= 0 then call ERROR (code, "From ^a$parser: ^a", nasp_name, nasp_error_message);

	call NASP_execute (in_iocbp, out_iocbp, command_name, queued_flag, nasp_structure_ptr, nasp_structure_len,
	     nasp_complete, nasp_unhold, nasp_error_message, code);
	if code ^= 0 then call ERROR (code, "From ^a$execute: ^a", nasp_name, nasp_error_message);

/* nasp_complete and nasp_unhold are ignored for an interactive request, so we are done. */

	call Cleanup_Handler ();

	if return_arg_ptr ^= null () then return_arg = "true";

RETURN:
	return;

/*****************************************************************************/
/*							       */
/*   PROCEDURE: ERROR					       */
/*							       */
/*   This subroutine expects arguments as follows:		       */
/*							       */
/*         call ERROR (code, ioa_control_string, ioa_arguments, ...)	       */
/*							       */
/*   where: code is fixed bin (35), and ioa_control_string and ioa_arguments */
/*          are optional character strings as defined for ioa_.	       */
/*							       */
/*   Some global variables are used:				       */
/*							       */
/*   	Cleanup_Handler (a procedure that does cleanup)		       */
/*							       */
/*     For commands:					       */
/*   	report_error (an entry variable set to com_err_ or active_fnc_err_)*/
/*   	command_name (the character string name of the command)	       */
/*	return_arg_ptr (used to return "false" for active functions)       */
/*							       */
/*     For subroutines:					       */
/*	depends on the error reporting strategy chosen.		       */
/*							       */
/*   At completion a non-local goto is done to the label RETURN.	       */
/*							       */
/*   Declarations are expected for:				       */
/*							       */
/*   	cu_$arg_list_ptr					       */
/*   	cu_$arg_ptr					       */
/*   	cu_$arg_count					       */
/*   	error_table_$fatal_error				       */
/*   	ioa_$general_rs					       */
/*							       */
/*****************************************************************************/

ERROR:
     proc () options (variable, non_quick);

dcl  arg_list_ptr		       ptr;
dcl  arg_len		       fixed bin (21);
dcl  arg_ptr		       ptr;
dcl  based_code		       fixed bin (35) based;
dcl  caller_code		       fixed bin (35);
dcl  code			       fixed bin (35);
dcl  err_msg		       char (256);
dcl  err_msg_len		       fixed bin (21);
dcl  nargs		       fixed bin;

	call cu_$arg_count (nargs, code);		/* IGNORE CODE */

	if nargs >= 1
	     then do;				/* We were called correctly. */
		arg_ptr = null ();			/* Set this so we know if cu_$arg_ptr worked. */
		call cu_$arg_ptr (1, arg_ptr, arg_len, code);

		if arg_ptr ^= null ()
		     then caller_code = arg_ptr -> based_code;
						/* The normal case. */
		     else caller_code = error_table_$fatal_error;
						/* Some problem with our arg list. */

		if nargs > 1
		     then do;			/* There is a message. */
			call cu_$arg_list_ptr (arg_list_ptr);
			call ioa_$general_rs (arg_list_ptr, 2, 3, err_msg, err_msg_len, "1"b, "0"b);
			end;

		     else do;			/* No message. */
			err_msg = "";
			err_msg_len = 0;
			end;
		end;				/* We were called correctly. */

	     else do;				/* We were called with no arguments. */
		caller_code = error_table_$fatal_error; /* The best we can do. */
		err_msg = "";
		err_msg_len = 0;
		end;				/* We were called with no arguments. */

	call Cleanup_Handler ();

/* The following lines must be modified depending on the error reporting strategy used. */

	call report_error (caller_code, command_name, "^a", err_msg);

	if return_arg_ptr ^= null () then return_arg = "false";

/* Do a non-local goto back to the outermost block. */

	goto RETURN;

     end ERROR;

Cleanup_Handler:
     proc ();

	if nasp_area_ptr ^= null ()
	     then do;
		if nasp_structure_ptr ^= null () then free nasp_structure in (nasp_area_ptr -> based_area);

		call release_area_ (nasp_area_ptr);
		end;

	return;

     end Cleanup_Handler;

     end network_request;
