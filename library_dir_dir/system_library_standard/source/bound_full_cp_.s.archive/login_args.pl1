/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */

/* Written  81-12-03 E. N. Kittlitz. */
/* Modified 82-06-04 E. N. Kittlitz. make [login_args -ct] return "0", not "". */

login_arg:
login_args:
     proc;


/* command/active-function to return login arguments, specified either
   to enter_abs_request (absentee processes) or to the login request (daemon
   or interactive processes) using the -arguments control argument.

   Syntax: login_arg {argument_number} {-control_args}

   where:

   argument_number
   may be a postive non-zero decimal number,
   the number of the argument whose value is required.

   CONTROL ARGUMENTS:

   -count, -ct
   count of login arguments supplied to login request or enter_abs_request.

   -from argument_number, -fm argument_number
   number of first argument to return.  All succeeding defined arguments
   are also returned.  (one per line if this is a command invocation,
   or separated by a space for active function use.)

   -no_requote
   prevents the requoting of each argument.

   -quote
   causes each quote in the argument to be doubled.  The same as -requote
   except that the string is not enclosed in quotation marks.

   -requote
   causes each argument to be requoted. This is the default.
*/

dcl  ME char (10) init ("login_args") static options (constant);
dcl  NO_REQUOTE fixed bin init (0) static options (constant);

dcl  FORMAT char (14) int static options (constant) init ("^[^d) ^;^s^]^a");
dcl  QUOTE fixed bin init (1) static options (constant);
dcl  REQUOTE fixed bin init (2) static options (constant);

dcl  argn fixed bin;				/* current command argument number */
dcl  argp ptr;					/* ptr to command argument */
dcl  argument_number fixed bin (35);			/* which argument the user wants */
dcl  count_sw bit (1) aligned;			/* true if -count specified */
dcl  from_sw bit (1) aligned;				/* true if -from specified */
dcl  i fixed bin;
dcl  quote_option fixed bin;

dcl  (null, substr, ltrim, char) builtin;

dcl  error_proc entry options (variable) variable;	/* procedure called to indicate an error */
dcl  arg_proc entry (fixed bin, ptr, fixed bin (21), fixed bin (35)) variable;
						/* procedure called to obtain a command argument */
dcl  argc fixed bin;				/* number of command arguments */
dcl  arg char (argl) based (argp);			/* command argument */
dcl  argl fixed bin (21);				/* length of command argument */
dcl  lg_argp ptr;					/* ptr to login argument */
dcl  lg_argc fixed bin;				/* number of login arguments */
dcl  lg_arg char (lg_argl) based (lg_argp);		/* login argument */
dcl  lg_argl fixed bin (21);				/* length of login argument */
dcl  af_sw bit (1) aligned;				/* "1"b if invoked as active function */
dcl  af_argp ptr;					/* pointer to af return argument */
dcl  af_argl fixed bin (21);				/* max length of af return argument */
dcl  af_arg char (af_argl) based (af_argp) varying;	/* af return argument */
dcl  code fixed bin (35);

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  requote_string_$quote_string entry (char (*)) returns (char (*));
dcl  user_info_$login_arg_count entry (fixed bin, fixed bin (21), fixed bin (21));
dcl  user_info_$login_arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

dcl  error_table_$not_act_fnc fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;

%page;
	call cu_$af_return_arg (argc, af_argp, af_argl, code);
	if code = 0 then do;
	     arg_proc = cu_$af_arg_ptr;
	     error_proc = active_fnc_err_;
	     af_sw = "1"b;
	     af_arg = "";				/* initialize output string */
	end;
	else do;
	     error_proc = com_err_;
	     arg_proc = cu_$arg_ptr;
	     af_sw = "0"b;
	     af_argp = null;
	     af_argl = 0;
	     if code ^= error_table_$not_act_fnc then go to no_info_error;
	end;

	argument_number = -1;			/* defaults for any case */
	from_sw = "0"b;				/* not explicit or implicit -from */
	quote_option = REQUOTE;			/* default quoting */
	count_sw = "0"b;				/* -count not specified */

process_arguments:
	do argn = 1 to argc;			/* one by one */
	     call arg_proc (argn, argp, argl, code);
	     if code ^= 0 then go to no_info_error;	/* couldn't get that argument */
	     if arg = "-count" | arg = "-ct" then do;
		if argc ^= 1 then do;
		     call error_proc (error_table_$inconsistent, ME,
			"-count may not be specified with any other control argument.");
		     return;
		end;
		count_sw = "1"b;
	     end;
	     else if arg = "-from" | arg = "-fm" then do;
		from_sw = "1"b;
		argn = argn + 1;
		call arg_proc (argn, argp, argl, code);
		if code ^= 0 then do;
		     call error_proc (code, ME, "argument_number expected following -from.");
		     return;
		end;
try_for_argument_number:
		if argument_number > 0 then do;
		     call error_proc (0, ME, "argument_number specified more than once.");
		     return;
		end;
		argument_number = cv_dec_check_ (arg, code);
		if code ^= 0 | argument_number < 1 then do;
		     call error_proc (0, ME, "^a must be an integer number greater than zero.", arg);
		     return;
		end;
	     end;
	     else if arg = "-no_requote" then quote_option = NO_REQUOTE;
	     else if arg = "-quote" then quote_option = QUOTE;
	     else if arg = "-requote" then quote_option = REQUOTE;
	     else if substr (arg, 1, 1) = "-" then do;
		call error_proc (error_table_$badopt, ME, "^a", arg);
		return;
	     end;
	     else go to try_for_argument_number;
	end process_arguments;

	call user_info_$login_arg_count (lg_argc, (0), (0)); /* first, get number of login arguments */

	if lg_argc = 0 then do;
	     if ^af_sw then
		call error_proc (0, ME, "There are no login arguments.");
	     else if count_sw then
		af_arg = "0";			/* -count: return a number */
	     return;
	end;

	if count_sw then do;			/* only want the count? */
	     if af_sw then
		af_arg = ltrim (char (lg_argc));
	     else call ioa_ (ltrim (char (lg_argc)));
	     return;
	end;

	if argument_number < 0 then do;
	     argument_number = 1;			/* use default if we must */
	     from_sw = "1"b;
	end;

	if argument_number > lg_argc then do;		/* we don't go as high as user asked */
	     if ^af_sw then
		call error_proc (0, ME,
		     "argument_number ^d exceeds the number of login arguments (^d).",
		     argument_number, lg_argc);
	     return;
	end;

make_result:
	do i = argument_number to lg_argc while (from_sw | i = argument_number);
	     call user_info_$login_arg_ptr (i, lg_argp, lg_argl, code);
	     if code ^= 0 then do;
		call error_proc (code, ME, "While obtaining login argument ^d.", i);
		return;
	     end;
	     if af_sw then
		if i > argument_number then af_arg = af_arg || " ";
	     if quote_option = REQUOTE then
		if af_sw then
		     af_arg = af_arg || requote_string_ (lg_arg);
		else call ioa_ (FORMAT, from_sw, i, requote_string_ (lg_arg));
	     else if quote_option = QUOTE then
		if af_sw then
		     af_arg = af_arg || requote_string_$quote_string (lg_arg);
		else call ioa_ (FORMAT, from_sw, i, requote_string_$quote_string (lg_arg));
	     else if af_sw then
		af_arg = af_arg || lg_arg;
	     else call ioa_ (FORMAT, from_sw, i, lg_arg);
	end make_result;

	return;


no_info_error:
	call error_proc (code, ME);
	return;

     end login_args;
