/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


query: procedure options (variable);


/*
   Record of Change:

   Created by Gary C. Dixon  on November 23, 1972
   Control arguments -non_null and -accept added by Txom McGary April 1977.
   Modified 6/81 by M.R. Jordan to add control arguments.
   Modified 9/81 by M.R. Jordan to get the defaults for question and answer IOCB pointers right.
   Modified 06/14/84 by S. Herbst to always write on specified IOCB, never on error_output.
   
   Name:  query

   An active function which asks the user a yes-or-no question.  If the user
   answers "yes", then query returns "true".  If the user answers "no", query
   returns "false".

   Usage

   [query question-text {-control_args}]

   1) question-text (Input)

   is a character string which forms the text of the question which the
   user is asked.

   2) control_arg (Input)

   is one of the following:

   -brief, -bf

   supresses the newline before and spaces after the question.

   -disable_cp_escape, -dcpe

   disables the command processor escape sequence .. as a response.

   -enable_cp_escape, -ecpe

   enables the command processor escape sequence .. as a response.

   -input_switch STR, -isw STR

   specifies the I/O switch over which input is to be requested.

   -long, -lg

   adds leading newline and 3 spaces to question to be asked.

   -output_switch STR, -osw STR

   specifies the I/O switch over which the question is to be output.

   -repeat DT, -rp DT

   repeats teh question every DT is the user does not answer.
   
   Name:  response

   An active function which asks any question of the user, and returns the
   user's response as the value of the active function.

   Usage

   [response question-text {-control_args}]

   1) question-text (Input) is as above.

   2) control_arg may be one of the control arguments listed above for query
   or one of the following:

   -non_null

   specifies that a null response is not allowed.

   -accept STR1 ... STRn

   specifies allowable responses.


   Example

   Assume that the user's start_up.ec contained the following lines:

   &command_line off
   &print Beginning start_up.
   abbrev
   &if [query "start_up:  Do you wish to continue?"] &then &else &quit
   mail
   check_info_segs
   .
   .

   Then the following dialogue would cause the start_up.ec to terminate
   execution after the query:

   Beginning start_up.
   start_up.ec:  Do you wish to continue?   !no
   r 1722  25.797  402+625

*/


/****^  HISTORY COMMENTS:
  1) change(87-12-17,Gilcrease), approve(88-01-06,MCR7827),
     audit(88-01-08,Parisek), install(88-01-12,MR12.2-1012):
               Add the -trim, -no_trim control arguments.
                                                   END HISTORY COMMENTS */


/*		CONSTANTS			*/

dcl  NAME (2) char (8) static options (constant) init ("query", "response");
dcl  QUERY fixed bin static options (constant) init (1);
dcl  RESPONSE fixed bin static options (constant) init (2);

/*		AUTOMATIC			*/

dcl  accept_null bit (1);
dcl  arg_len fixed bin;
dcl  arg_list_ptr ptr;
dcl  arg_ptr ptr;
dcl  argn fixed bin;
dcl  called_as_active_function bit (1);
dcl  code fixed bin (35);
dcl  entry_point fixed bin;
dcl  error entry options (variable) variable;
dcl  error_has_occured bit (1);
dcl  first_acceptable_arg fixed bin;
dcl  get_arg entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr) variable;
dcl  max_length fixed bin;
dcl  nargs fixed bin;
dcl  no_trim bit (1);
dcl  print_iocbp ptr;
dcl  question_len fixed bin;
dcl  question_ptr ptr;
dcl  rtn_string_ptr ptr;
dcl  temp_string char (512) varying;

dcl 1 my_query_info like query_info;

/*		BASED			*/

dcl  answer char (max_length) varying based (rtn_string_ptr);
dcl  arg char (arg_len) based (arg_ptr);
dcl  question char (question_len) based (question_ptr);

dcl 1 open_descrip aligned based,
    2 length fixed bin (17),
    2 string char (0 refer (open_descrip.length));

/*		ERROR CODES		*/

dcl  error_table_$bad_arg fixed bin (35) static ext;
dcl  error_table_$badopt fixed bin (35) static ext;
dcl  error_table_$noarg fixed bin (35) static ext;
dcl  error_table_$not_act_fnc fixed bin (35) static ext;
dcl  error_table_$not_open fixed bin (35) static ext;

/*		EXTERNAL ENTRIES		*/

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  cu_$af_arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$af_arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cu_$af_return_arg ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_switch ext entry options (variable);
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$user_io ptr ext;

/*		BUILTIN FUNCTIONS		*/

dcl  addr builtin;
dcl  clock builtin;
dcl  divide builtin;
dcl  maxlength builtin;
dcl  null builtin;
dcl  substr builtin;

%include iocb;

%include query_info;

	entry_point = QUERY;
	go to COMMON;


response:	entry options (variable);

	entry_point = RESPONSE;


COMMON:

	call cu_$af_arg_count (nargs, code);
	if code = error_table_$not_act_fnc
	then do;
	     called_as_active_function = "0"b;
	     rtn_string_ptr = addr (temp_string);
	     max_length = maxlength (temp_string);
	     get_arg = cu_$arg_ptr_rel;
	     error = com_err_;
	end;
	else if code = 0
	then do;
	     called_as_active_function = "1"b;
	     call cu_$af_return_arg (nargs, rtn_string_ptr, max_length, code);
	     if code ^= 0
	     then do;
		call active_fnc_err_ (code, (NAME (entry_point)));
		return;
	     end;
	     get_arg = cu_$af_arg_ptr_rel;
	     error = active_fnc_err_;
	end;
	else do;
	     error = active_fnc_err_;


USAGE:

	     call error (code, (NAME (entry_point)),
		"^/Usage: ^[[^]^a question {-control_args}^[]^]",
		called_as_active_function, (NAME (entry_point)),
		called_as_active_function);
	     return;
	end;
	if nargs < 1
	then do;
	     code = error_table_$noarg;
	     goto USAGE;
	end;


	call cu_$arg_list_ptr (arg_list_ptr);


	call get_arg (1, question_ptr, question_len, code, arg_list_ptr);
	if code ^= 0
	then do;
	     call error (code, (NAME (entry_point)),
		"Referencing first argument.");
	     return;
	end;

	accept_null = "1"b;
	answer = "";
	error_has_occured = "0"b;
	first_acceptable_arg = 0;
	no_trim = "0"b;


	my_query_info.version = query_info_version_5;
	my_query_info.switches.yes_or_no_sw = (entry_point = QUERY);
	my_query_info.switches.suppress_name_sw = "1"b;
	my_query_info.switches.cp_escape_control = "00"b;
	my_query_info.switches.suppress_spacing = "0"b;
	my_query_info.switches.padding = ""b;
	my_query_info.status_code = 0;
	my_query_info.query_code = 0;
	my_query_info.question_iocbp = null ();
	my_query_info.answer_iocbp = null ();
	my_query_info.repeat_time = 0;
	my_query_info.explanation_ptr = null ();
	my_query_info.explanation_len = 0;


	call Process_Control_Args (2);
	if error_has_occured
	then return;

	print_iocbp = my_query_info.question_iocbp;
	if print_iocbp = null then print_iocbp = iox_$user_io;


ASK:

	if no_trim then call command_query_ (addr (my_query_info), answer, (NAME (entry_point)),
	     "^va", question_len, question);
	else call command_query_ (addr (my_query_info), answer, (NAME (entry_point)),
	     "^a", question);
	goto PROCESS (entry_point);


PROCESS (1):					/* QUERY */

	if answer = "yes"
	then answer = "true";
	else answer = "false";


EXIT:

	if ^called_as_active_function
	then call ioa_ ("^a", answer);
	return;


PROCESS (2):					/* RESPONSE */

	if ^accept_null & answer = ""
	then do;
	     call ioa_$ioa_switch (print_iocbp,
		"^a:  Null response not allowed, please retype.",
		(NAME (entry_point)));
	     goto ASK;
	end;

	if first_acceptable_arg = 0
	then goto EXIT;

	do argn = first_acceptable_arg to nargs by 1;
	     call Get_Arg (argn, "");
	     if answer = arg
	     then goto EXIT;
	end;
	call ioa_$ioa_switch (print_iocbp,
	     "^a:  '^a' is not an acceptable answer.^/Acceptable answers are:",
	     (NAME (entry_point)), answer);
	do argn = first_acceptable_arg to nargs;
	     call Get_Arg (argn, "");
	     call ioa_$ioa_switch (print_iocbp, "^-'^a'", arg);
	end;
	goto ASK;

Process_Control_Args: procedure (first_argn);


dcl  first_argn fixed bin;
dcl  argn fixed bin;


	     do argn = first_argn repeat argn+1 while (argn <= nargs);

		call Get_Arg (argn, "");

		if arg = "-accept" & entry_point = RESPONSE
		then do;
		     first_acceptable_arg = argn+1;
		     if first_acceptable_arg > nargs
		     then do;
			call error (error_table_$noarg, (NAME (entry_point)),
			     "Missing argument(s) following -accept.");
			error_has_occured = "1"b;
		     end;
		     argn = nargs;
		end;

		else if arg = "-brief" | arg = "-bf"
		then my_query_info.switches.suppress_spacing = "1"b;

		else if arg = "-no_trim" then no_trim = "1"b;

		else if arg = "-trim" then no_trim = "0"b;

		else if arg = "-disable_cp_escape" | arg = "-dcpe"
		then my_query_info.switches.cp_escape_control = "10"b;

		else if arg = "-enable_cp_escape" | arg = "-ecpe"
		then my_query_info.switches.cp_escape_control = "11"b;

		else if arg = "-input_switch" | arg = "-isw"
		then do;
		     call Get_Arg (argn+1,
			"Missing I/O switch name following " || arg);
		     if addr (arg) ^= null ()
		     then my_query_info.answer_iocbp = IOCBp (arg, "1"b);
		     argn = argn+1;
		end;

		else if arg = "-long" | arg = "-lg"
		then my_query_info.switches.suppress_spacing = "0"b;

		else if arg = "-non_null" & entry_point = RESPONSE
		then accept_null = "0"b;

		else if arg = "-output_switch" | arg = "-osw"
		then do;
		     call Get_Arg (argn+1,
			"Missing I/O switch name following " || arg);
		     if addr (arg) ^= null ()
		     then my_query_info.question_iocbp = IOCBp (arg, "0"b);
		     argn = argn+1;
		end;

		else if arg = "-repeat" | arg = "-rp"
		then do;
		     call Get_Arg (argn+1,
			"Missing repeat interval following " || arg);
		     if addr (arg) ^= null ()
		     then my_query_info.repeat_time = Date_Time (arg);
		     argn = argn+1;
		end;

		else do;
		     call error (error_table_$badopt, (NAME (entry_point)),
			"^a", arg);
		     error_has_occured = "1"b;
		end;

	     end;


	     return;

IOCBp:	     procedure (switch_name, input_flag) returns (ptr);


dcl  input_flag bit (1);
dcl  iocbp ptr;
dcl  switch_name char (*);


		call iox_$look_iocb (switch_name, iocbp, code);
		if code ^= 0
		then do;
		     call error (code, (NAME (entry_point)), "^a", switch_name);
		     error_has_occured = "1"b;
		     return (null ());
		end;

		if iocbp -> iocb.open_descrip_ptr = null ()
		then do;
		     call error (error_table_$not_open, (NAME (entry_point)),
			"^a", switch_name);
		     error_has_occured = "1"b;
		     return (null ());
		end;

		if substr (iocbp -> iocb.open_descrip_ptr -> open_descrip.string, 1, 19) = "stream_input_output"
		then return (iocbp);
		if substr (iocbp -> iocb.open_descrip_ptr -> open_descrip.string, 1, 12) = "stream_input" & input_flag
		then return (iocbp);
		if substr (iocbp -> iocb.open_descrip_ptr -> open_descrip.string, 1, 13) = "stream_output" & ^input_flag
		then return (iocbp);


		call error (0, (NAME (entry_point)),
		     "I/O switch ^a not open for stream_^[input^;output^] or stream_input_output.",
		     switch_name, input_flag);
		error_has_occured = "1"b;
		return (null ());


	     end IOCBp;

Date_Time:     procedure (date_time_string) returns (fixed bin (71));


dcl  current_date_time fixed bin (71);
dcl  date_time fixed bin (71);
dcl  date_time_string char (*);


		current_date_time = clock ();
		call convert_date_to_binary_$relative (date_time_string,
		     date_time, current_date_time, code);
		date_time = divide ((date_time-current_date_time), 1000000, 71, 0);

		if code ^= 0
		then do;
		     call error (code, (NAME (entry_point)),
			"Converting ""^a"" to binary date/time.",
			date_time_string);
		     error_has_occured = "1"b;
		     return (0);
		end;
		else if date_time < 30		/* 30 seconds */
		then do;
		     call error (error_table_$bad_arg, (NAME (entry_point)),
			"Specified date/time is not ^[far enough ^]in the future.  ^a",
			(date_time > 0), date_time_string);
		     error_has_occured = "1"b;
		     return (0);
		end;


		return (date_time);


	     end Date_Time;


	end Process_Control_Args;

Get_Arg:	procedure (argn, mess);


dcl  argn fixed bin;
dcl  mess char (*);


	     call get_arg (argn, arg_ptr, arg_len, code, arg_list_ptr);
	     if code = 0
	     then return;


	     call error (code, (NAME (entry_point)),
		"^[Refencing argument ^d^s^;^s^a^].",
		(mess = ""), argn, mess);


	     arg_ptr = null ();
	     arg_len = 0;
	     error_has_occured = "1"b;


	     return;


	end Get_Arg;


     end query;
