/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


hexadecimal: hex: proc;

/* Implements the hexadecimal, decimal, octal and binary commands/afs.
   Written 03/09/81 S. Herbst */


/* Based */

dcl  arg char (arg_len) based (arg_ptr);
dcl  return_arg char (return_len) varying based (return_ptr);


/* Automatic */

dcl  ME char (32);
dcl  val_str char (72) varying;

dcl  af_sw bit (1) aligned;

dcl (arg_ptr, return_ptr) ptr;

dcl  char8 char (8);
dcl  float59 float dec (59);
dcl  fixed71 fixed bin (71);
dcl (arg_len, return_len) fixed bin (21);
dcl (digit_val, input_base) fixed bin (5);
dcl (arg_count, arg_index, base, i, point_count) fixed bin;
dcl  code fixed bin (35);

dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$not_act_fnc fixed bin (35) ext;

dcl  complain entry variable options (variable);

dcl (active_fnc_err_, active_fnc_err_$af_suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl  numeric_to_ascii_base_ entry (float dec (59), fixed bin, fixed bin) returns (char (72) varying);

dcl (convert, decimal, index, low, substr, unspec) builtin;

dcl (conversion, overflow, underflow) condition;
%page;

	ME = "hexadecimal";
	base = 16;
	go to START;

decimal: dec: entry;

	ME = "decimal";
	base = 10;
	go to START;

octal: oct: entry;

	ME = "octal";
	base = 8;
	go to START;

binary: bin: entry;

	ME = "binary";
	base = 2;
	go to START;


START:
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     if arg_count = 0 then do;
		call com_err_$suppress_name (0, ME, "Usage:  ^a num_args", ME);
		return;
	     end;
	     af_sw = "0"b;
	     complain = com_err_;
	end;
	else if code = 0 then do;
	     if arg_count = 0 then do;
		call active_fnc_err_$af_suppress_name (0, ME, "Usage:  [^a num_args]", ME);
		return;
	     end;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     return_arg = "";
	end;
	else do;
	     call active_fnc_err_ (code, ME);
	     return;
	end;

	on conversion, overflow, underflow go to BAD_NUM;

	do arg_index = 1 to arg_count;

	     call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);

	     if arg_len = 0 then float59 = 0;
	     else do;

		i = index ("bqox", substr (arg, arg_len, 1));
		if i ^= 0 then do;
		     input_base = 2 ** i;
		     float59 = 0;
		     point_count = -1;		/* scanning for decimal point */

		     do i = 1 to arg_len - 1;

			if substr (arg, i, 1) = "." then do;
			     if point_count >= 0 then do;
BAD_NUM:				call complain (error_table_$bad_conversion, ME, "^a", arg);
				return;
			     end;
			     point_count = 0;
			end;
			else do;
			     digit_val = index ("0123456789ABCDEFabcdef", substr (arg, i, 1)) - 1;
			     if digit_val < 0 then go to BAD_NUM;
			     if digit_val > 15 then digit_val = digit_val - 6; /* lowercase abcdef */
			     if digit_val >= input_base then go to BAD_NUM;

			     if point_count >= 0 then point_count = point_count + 1; /* after the decimal point */

			     float59 = float59 * decimal (input_base, 2) + decimal (digit_val, 2);
			end;
		     end;

		     if point_count > 0 then		/* decimal point in the input */
			float59 = float59 / decimal (input_base ** point_count);
		end;
		else if substr (arg, arg_len, 1) = "u" then do; /* unspec */
		     arg_len = arg_len - 1;
		     if arg_len > 8 then do;
			call complain (0, ME, """u"" conversion only allows 8 characters.  ^au", arg);
			return;
		     end;
		     char8 = low (8 - arg_len) || arg;
		     unspec (fixed71) = unspec (char8);
		     float59 = fixed71;
		end;
		else float59 = convert (float59, arg);
	     end;

	     val_str = numeric_to_ascii_base_ (float59, 0, base);
APPEND:
	     if af_sw then do;
		if return_arg ^= "" then return_arg = return_arg || " ";
		return_arg = return_arg || val_str;
	     end;
	     else call ioa_$nnl ("^a ", val_str);
	end;

	if ^af_sw then call ioa_ ("");

     end hexadecimal;
