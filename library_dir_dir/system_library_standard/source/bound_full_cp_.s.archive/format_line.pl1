/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
fl:
format_line: 
     procedure options (variable);			/* command/active function interface to ioa_	*/
						/* updated 03/08/82: change usage message to use  */
						/* the long name of the command by LAB.		*/

	who_am_i = "format_line";
	newline_sw = "1"b;
	go to COMMON;

flnnl:
format_line_nnl:
     entry options (variable);			/* interface to ioa_$nnl */

	who_am_i = "format_line_nnl";
	newline_sw = "0"b;
	go to COMMON;
%page;
declare	(addr, hbound, index, null, substr)
			builtin;

declare	cleanup		condition;

declare	active_function	bit (1),			/* mode of operation (how were we called?)	*/
	arg_count		fixed bin,		/* number of arguments we were passed.		*/
	arg_list_ptr	ptr,			/* ptr to argument list			*/
	idx		fixed bin,		/* an index temporary.			*/
	newline_sw	bit (1),			/* are we fl or flnnl?			*/
	overflow		bit (1),			/* for AF case:  is return arg too short?	*/
	return_max_len	fixed bin,		/* maximum length of our return value.		*/
	return_ptr	ptr,			/* ptr to our return value.			*/
	rs_idx		fixed bin (21),		/* index of first quote in return string	*/
	seg_ptr		ptr,			/* ptr to temp for requoting if too big for stack */
	status		fixed bin (35),		/* an error code variable.			*/
	who_am_i		char (32);		/* name for error messages			*/

declare	seg		char (rs.len - rs_idx + 1) based (seg_ptr);

declare	1 rs		based (return_ptr) aligned,	/* our return value.			*/
	  2 len		fixed bin (21),		/* its current length.			*/
	  2 first_quote	char (1) unaligned,		/* quote we put around it			*/
	  2 value		char (return_max_len refer (rs.len)) unal,
						/* its character-string value.		*/
	  2 last_quote	char (1) unaligned;		/* other quote we put around it		*/

declare	1 arg_list	aligned based (arg_list_ptr),
	  2 n_args	fixed bin (17) unal,
	  2 code		fixed bin (17) unal,
	  2 n_desc	fixed bin (17) unal,
	  2 mbz		fixed bin (17) unal,
	  2 arg_ptrs	(arg_count) ptr,
	  2 desc_ptrs	(arg_count) ptr;

declare	(
	active_fnc_err_,
	active_fnc_err_$af_suppress_name,
	com_err_,
	com_err_$suppress_name
	)		entry options (variable),
	cu_$af_return_arg	entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	cu_$arg_list_ptr	entry () returns (ptr),
	cu_$generate_call	entry (entry, ptr),
	get_temp_segment_	entry (char (*), ptr, fixed bin (35)),
	ioa_		entry options (variable),
	ioa_$general_rs	entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned),
	ioa_$nnl		entry options (variable),
	release_temp_segment_
			entry (char (*), ptr, fixed bin (35));

declare	(
	error_table_$command_line_overflow,
	error_table_$not_act_fnc
	)		fixed bin (35) external;
%page;
/*	find out how many args we were passed, and get ptr to and max length of return arg.		*/

COMMON:
	call cu_$af_return_arg (arg_count, return_ptr, return_max_len, status);

	if status = 0 then active_function = "1"b;
	else if status = error_table_$not_act_fnc then active_function = "0"b;
	else do;
		call com_err_ (status, who_am_i);	/* error if called without arg descriptors.	*/
		return;
	     end;

	if arg_count = 0 then do;
		if active_function
		then call active_fnc_err_$af_suppress_name (0, who_am_i, "Usage:  [format_line^[_nnl^] control_string {args}]",
			^newline_sw);
		else call com_err_$suppress_name (0, who_am_i, "Usage:  format_line^[_nnl^] control_string {args}", ^newline_sw);
		return;
	     end;

	arg_list_ptr = cu_$arg_list_ptr ();

	if ^active_function then do;
		if newline_sw
		then call cu_$generate_call (ioa_, arg_list_ptr);
		else call cu_$generate_call (ioa_$nnl, arg_list_ptr);
		return;
	     end;

	return_max_len = return_max_len - 2;		/* leave room for our quotes			*/
	rs.len = return_max_len + 1;			/* be able to detect overlength line.		*/
%page;

/* Now, a new param list for the call to ioa_$general_rs must be constructed.
   This is necessary because the argument list we were passed contains an extra argument for
   the active function returns string. This argument may confuse ioa_ */

	begin;					/* this is to allocate the list		*/

declare	1 auto_arg_list	like arg_list aligned automatic;

	     auto_arg_list.n_args = 2 * arg_count;
	     auto_arg_list.n_desc = 2 * arg_count;
	     auto_arg_list.code = 4;
	     auto_arg_list.mbz = 0;

	     if arg_list.code = 8
	     then arg_count = arg_count + 2;		/* if extra pointer supplied			*/
	     else arg_count = arg_count + 1;		/* else just skip return argument		*/
	     do idx = 1 to hbound (auto_arg_list.arg_ptrs, 1);
		auto_arg_list.arg_ptrs (idx) = arg_list.arg_ptrs (idx);
		auto_arg_list.desc_ptrs (idx) = arg_list.desc_ptrs (idx);
	     end;

	     call ioa_$general_rs (addr (auto_arg_list), 1, 2, rs.value, rs.len, "0"b, "0"b);
	end;

	overflow = "0"b;
	rs_idx = index (rs.value, """");		/* embedded quotes?				*/
	if rs_idx > 0
	then if rs.len - rs_idx > 4095 then do;		/* If we take up more than a page don't use stack */
		     seg_ptr = null ();
		     on cleanup call release_temp_segment_ (who_am_i, seg_ptr, (0));
		     call get_temp_segment_ (who_am_i, seg_ptr, status);
		     if status ^= 0 then do;
			     call active_fnc_err_ (status, who_am_i, "Getting temp segment.");
			     return;
			end;
		     seg = substr (rs.value, rs_idx);
		     call double_quotes (seg);
		     call release_temp_segment_ (who_am_i, seg_ptr, (0));
		end;
	     else call double_quotes (substr (rs.value, rs_idx));
	else if rs.len > return_max_len then do;
		rs.len = return_max_len;
		overflow = "1"b;
	     end;

	rs.first_quote, rs.last_quote = """";		/* put quotes around result			*/
	rs.len = rs.len + 2;			/* include room for the two quotes we're adding.	*/

	if overflow
	then call active_fnc_err_ (error_table_$command_line_overflow, who_am_i,
		"Type ""start"" to continue with truncated string.");

	return;
%page;
double_quotes:
     procedure (copy);				/* procedure to double any quotes appearing in	*/
						/* the variable, arg.			*/

declare	copy		char (*);

declare	arg_len		fixed bin,		/* length of arg				*/
	arg_ptr		ptr,			/* ptr to arg				*/
	arg		char (arg_len) based (arg_ptr),
	clen		fixed bin (21),		/* current string length.			*/
	quote_idx		fixed bin (21),		/* another index temporary.			*/
	slen		fixed bin (21);		/* a string length temporary.			*/

	arg_ptr = addr (substr (rs.value, rs_idx));	/* set ptr to copy back into at first quote	*/
	arg_len = rs.len - rs_idx + 1;		/* adjust length accordingly			*/
	return_max_len = return_max_len - rs_idx + 1;	/* set max length down accordingly		*/
	rs.len = rs_idx - 1;			/* set current length down to point so far valid	*/
	clen = 0;					/* set index to start scanning copy for quotes	*/

	do while ("1"b);
	     return_max_len = return_max_len - 1;	/* we're going to add a second quote after one	*/
						/* we've found in copy. Exclude this quote from	*/
						/* the length of arg.  Instead shift ptr to	*/
						/* arg 1 char to the right.  Then, index values	*/
						/* have the same meaning in arg and copy.	*/
	     if clen >= return_max_len then do;		/* punt if there's no room left for two quotes	*/
		     overflow = "1"b;
		     return;
		end;
	     substr (arg, clen + 1, 2) = """""";	/* add double quote to end of arg.		*/
	     rs.len = rs.len + 2;			/* update length of return value to reflect the	*/
						/* double quote.				*/
	     arg_ptr = addr (substr (arg, 2));		/* move ptr to arg 1 char to the right		*/
	     clen = clen + 1;			/* look at chars after the quote we've doubled.	*/
	     quote_idx = index (substr (copy, clen + 1), """") - 1;
						/* find next quote in these chars.		*/
	     if quote_idx < 0
	     then slen = arg_len - clen;		/* No quotes, so get length of rest of string	*/
	     else slen = quote_idx;			/* length of stuff before quote		*/
	     if clen + slen > return_max_len then do;	/* if too long to fit, truncate it here		*/
		     slen = return_max_len - clen;
		     quote_idx = -1;		/* stop search and exit (fake "no more quotes")	*/
		     overflow = "1"b;		/* report error				*/
		end;
	     if slen > 0 then substr (arg, clen + 1, slen) = substr (copy, clen + 1, slen);
						/* append this substr to end of arg.		*/
	     rs.len = rs.len + slen;			/* add length of substr to length of ret value.	*/
	     if quote_idx < 0 then return;		/* if we didn't find a quote, then all done.	*/
	     clen = clen + quote_idx;			/* set index of quote we found, and loop.	*/
	end;

     end double_quotes;

     end format_line;

