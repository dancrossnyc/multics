/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
rank:
     procedure;

/* **********************************************************************
   *  Active function/command to implement the PL/I builtin functions   *
   *  rank and byte.                                                    *
   *                                                                    *
   *  Written August 1981 by Warren Johnson.                            *
   *  Modified as per MCR for installation, November 1981, Benson I.    *
   *					         Margulies    *
   *  Modified to fix NNo and other problems, BIM, 10/82                *
   *  Modified to fix "byte 32" and "byte 34" (i.e. to use requote_     *
   *    before calling ioa_), June 1983, Chris Jones		  *
   *  Modified to fix arg processing errors, 1 Nov 1983 C Spitzer	  *
   ********************************************************************** */

	dcl     active_fnc_err_	 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     cu_$af_return_arg	 entry (fixed, ptr, fixed (21), fixed (35));
	dcl     cu_$arg_ptr		 entry (fixed, ptr, fixed (21), fixed (35));
	dcl     cv_dec_check_	 entry (char (*), fixed (35)) returns (fixed (35));
	dcl     cv_oct_check_	 entry (char (*), fixed (35)) returns (fixed (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     (rank, byte, rtrim, substr, length, before, index)
				 builtin;

	dcl     error_table_$badopt	 fixed (35) external;
	dcl     error_table_$bigarg	 fixed (35) external;
	dcl     error_table_$noarg	 fixed (35) external;
	dcl     error_table_$not_act_fnc
				 fixed (35) external;
	dcl     error_table_$too_many_args
				 fixed (35) external;

	dcl     error_table_$smallarg	 fixed bin (35) ext static;
	dcl     error_table_$bad_conversion
				 fixed bin (35) ext static;

	dcl     gripe		 entry variable options (variable);

	dcl     (nargs, i)		 fixed;
	dcl     (rsl, argl)		 fixed (21);
	dcl     (rv, code)		 fixed (35);

	dcl     (argp, rsp)		 ptr;

	dcl     rs		 char (rsl) varying based (rsp);
	dcl     arg		 char (argl) based (argp);
	dcl     cname		 char (4);
	dcl     have_main_arg	 bit (1) aligned;
	dcl     main_arg		 char (32);

	dcl     (command, octal_sw)	 bit (1);
%page;
	cname = "rank";
	go to JOIN;

byte:
     entry;

	cname = "byte";

JOIN:
	octal_sw = "0"b;
	call cu_$af_return_arg (nargs, rsp, rsl, code);
	if code = error_table_$not_act_fnc
	then do;					/* called as a command */
		command = "1"b;
		gripe = com_err_;
	     end;
	else if code = 0
	then do;					/* active function */
		command = "0"b;
		gripe = active_fnc_err_;
	     end;
	else do;
		call com_err_ (code, cname);
		return;
	     end;

	if nargs = 0
	then do;					/* one input arg required, one optional */
USAGE:
		call gripe (error_table_$noarg, cname, "^/Usage is: ^[[^]^a ^[CHAR^;NO^] {-control_args}^[]^]",
		     ^command, cname, cname = "rank", ^command);
		return;
	     end;

	have_main_arg = "0"b;

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, argl, (0));

	     if ^(length (arg) > 1 & char (arg, 1) = "-")
	     then do;
		     if have_main_arg
		     then do;
			     call com_err_ (error_table_$too_many_args, cname,
				"Only one character may be specified. ^a is the second.", arg);
			     return;
			end;
		     have_main_arg = "1"b;
		     main_arg = arg;		/* so, it can be truncated */
		end;

	     else if (arg = "-octal" | arg = "-oc") & cname = "rank"
						/* not on byte */
	     then octal_sw = "1"b;
	     else if (arg = "-decimal" | arg = "-dec") & cname = "rank"
	     then octal_sw = "0"b;			/* allow defaulting */
	     else do;
		     call gripe (error_table_$badopt, cname, arg);
		     return;
		end;
	end;

	if ^have_main_arg
	then go to USAGE;

	if cname = "rank"				/* RANK */
	then do;
		if length (rtrim (main_arg)) > 1
		then do;
			call gripe (error_table_$bigarg, cname,
			     "Only one character may be given. ""^a"" is too long.", main_arg);
			return;
		     end;


		rv = rank (char (main_arg, 1));
		if octal_sw
		then if command
		     then call ioa_ ("^o", rv);
		     else call ioa_$rsnnl ("^o", rs, (rsl), rv);
		else if command
		then call ioa_ ("^d", rv);
		else call ioa_$rsnnl ("^d", rs, (rsl), rv);
	     end;

	else do;					/* BYTE */
		if character (reverse (rtrim (main_arg)), 1) = "o"
		then rv = cv_oct_check_ (before (main_arg, "o"), code);
		else rv = cv_dec_check_ (main_arg, code);
		if code ^= 0
		then do;
			call gripe (error_table_$bad_conversion, cname, "Invalid number: ^a.", main_arg);
			return;
		     end;
		else if rv < 0 | rv > 511
		then do;
			call gripe (0, cname, "Number out of range: ^a.", main_arg);
			return;
		     end;
		else if command
		then call ioa_ ("^a", requote_string_ (byte (rv)));
		else rs = byte (rv);
	     end;

	if ^command
	then rs = requote_string_ ((rs));

	return;

     end rank;
