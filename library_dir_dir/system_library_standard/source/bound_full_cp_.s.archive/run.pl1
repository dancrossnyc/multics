/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


run:
     proc;

/* This procedure is the run command.  The syntax is:
   run {-control_structure} {main_program} {program_args}
   If no exec_com is specified and -no_exec_com is not specified, main_program.run.ec in the main program's
   directory is used.
*/
/* coded by Melanie Weaver August 1977 */
/* modified June 1979 by Melanie Weaver */

	dcl     (i, j, k, m, alng, nargs, nprogargs, ref_name_spec_count)
				 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     type		 fixed bin (2);
	dcl     bit_cnt		 fixed bin (24);

	dcl     me		 char (3) init ("run") static options (constant);
	dcl     arg		 char (alng) based (aptr);
	dcl     (main_dir, arg_ec_name)
				 char (168);
	dcl     ec_name		 char (168) var;
	dcl     main_ename		 char (32);

	dcl     (no_ec, have_main)	 bit (1) aligned;

	dcl     (aptr, arglist_ptr, new_arglist_ptr, sys_areap)
				 ptr;

	dcl     (error_table_$noarg, error_table_$badopt)
				 fixed bin (35) ext;

	dcl     system_area		 area based (sys_areap);

	dcl     1 control_structure	 aligned like run_control_structure;

	dcl     1 char_desc		 aligned,
		2 flag		 bit (1) unal init ("1"b),
		2 type		 fixed bin (5) unal init (21),
		2 packed		 bit (1) unal init ("1"b),
		2 number_dims	 bit (4) unal init ("0"b),
		2 size		 fixed bin (23) unal;

	dcl     1 old_arglist	 aligned based (arglist_ptr),
		2 (arg_count, code)	 fixed bin (17) unal,
		2 (desc_count, mbz)	 fixed (17) unal,
		2 args		 (nargs) ptr,
		2 descs		 (nargs) ptr;

	dcl     1 new_arglist	 aligned based (new_arglist_ptr),
		2 (arg_count, code)	 fixed bin (17) unal,
		2 (desc_count, mbz)	 fixed bin (17) unal,
		2 args		 (nprogargs) ptr,
		2 descs		 (nprogargs) ptr;

	dcl     (addr, hbound, length, null, rtrim, substr, unspec)
				 builtin;

	dcl     main_entry		 entry variable;

	dcl     cu_$arg_count	 entry () returns (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry () returns (ptr);
	dcl     com_err_		 entry options (variable);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     hcs_$make_entry	 entry (ptr, char (*), char (*), entry, fixed bin (35));
	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
	dcl     run_		 entry (entry, ptr, ptr, fixed bin (35));
	dcl     get_wdir_		 entry () returns (char (168));
	dcl     get_system_free_area_	 entry () returns (ptr);


%include run_control_structure;

	unspec (control_structure) = "0"b;
	control_structure.version = run_control_structure_version_1;
	no_ec = "0"b;
	ref_name_spec_count = 0;

	nargs = cu_$arg_count ();

	do i = 1 to nargs;				/* find all control args */

	     call cu_$arg_ptr (i, aptr, alng, code);
	     if code ^= 0
	     then do;
		     if code = error_table_$noarg
		     then goto no_main;
		     call com_err_ (code, me);
		     return;
		end;

	     if (arg = "-exec_com") | (arg = "-ec")
	     then do;
		     i = i + 1;
		     control_structure.flags.ec = "1"b;
		     no_ec = "0"b;
		     call cu_$arg_ptr (i, aptr, alng, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, me, "exec_com name");
			     return;
			end;
		     ec_name = arg;
		end;

	     else if (arg = "-no_exec_com") | (arg = "-nec")
	     then do;
		     control_structure.flags.ec = "0"b;
		     no_ec = "1"b;
		end;

	     else if (arg = "-limit") | (arg = "-li")
	     then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, aptr, alng, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, me, "time limit");
			     return;
			end;
		     control_structure.time_limit = cv_dec_check_ (arg, code);
		     if code ^= 0
		     then do;
			     call com_err_ (0, me, "Invalid time limit specification ^a.", arg);
			     return;
			end;
		end;

	     else if (arg = "-copy_reference_names") | (arg = "-crn")
	     then do;
		     control_structure.reference_name_switch = COPY_REFERENCE_NAMES;
		     ref_name_spec_count = ref_name_spec_count + 1;
		end;

	     else if (arg = "-old_reference_names") | (arg = "-orn")
	     then do;
		     control_structure.reference_name_switch = OLD_REFERENCE_NAMES;
		     ref_name_spec_count = ref_name_spec_count + 1;
		end;

	     else if (arg = "-new_reference_names") | (arg = "-nrn")
	     then do;
		     control_structure.reference_name_switch = NEW_REFERENCE_NAMES;
		     ref_name_spec_count = ref_name_spec_count + 1;
		end;

	     else if substr (arg, 1, 1) = "-"
	     then do;
		     call com_err_ (error_table_$badopt, me, arg);
		     return;
		end;

	     else do;				/* main program name */

		     if ^control_structure.flags.ec
		     then do;			/* need to know dir of main program */
			     call expand_pathname_ (arg, main_dir, main_ename, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, me, arg);
				     return;
				end;
			end;
		     have_main = "1"b;
		     goto setup_entry_var;
		end;

	end;

no_main:
	have_main = "0"b;

setup_entry_var:
	if ref_name_spec_count > 1
	then do;
		call com_err_ (0, me, "Only one reference name control argument may be specified.");
		return;
	     end;

	if control_structure.flags.ec
	then if no_ec
	     then do;
		     call com_err_ (0, me, "Incompatible exec_com arguments specified.");
		     return;
		end;

	if ^control_structure.flags.ec
	then if ^no_ec
	     then do;				/* look for main_program.run.ec */
		     if ^have_main
		     then do;
			     call com_err_ (0, me, "No exec_com or main program specified.");
			     return;
			end;
		     call hcs_$status_minf (main_dir, rtrim (main_ename) || ".run.ec", 1, type, bit_cnt, code);
		     if code = 0
		     then do;
			     control_structure.flags.ec = "1"b;
			     ec_name = rtrim (main_dir) || ">" || rtrim (main_ename) || ".run.ec";
			end;
		end;

	if control_structure.flags.ec
	then do;					/* this is not an else clause because flag
						   could have been reset */
		call hcs_$make_entry (null, "exec_com", "exec_com", main_entry, code);
		if code ^= 0
		then do;
			call com_err_ (code, me, "exec_com");
			return;
		     end;
		i = i - 1;			/* must pass ec name to ec */
	     end;

	else do;					/* no exec_com; i is index of main */
		i = i + 1;			/* don't pass name of main to main */
		main_entry = cv_entry_ (arg, null, code);
		if code ^= 0
		then do;
			call com_err_ (code, me, arg);
			return;
		     end;
	     end;

	if i > nargs
	then nprogargs = 0;
	else nprogargs = nargs - i + 1;

	sys_areap = get_system_free_area_ ();
	allocate new_arglist in (sys_areap -> system_area) set (new_arglist_ptr);

	arglist_ptr = cu_$arg_list_ptr ();

	new_arglist.arg_count, new_arglist.desc_count = nprogargs * 2;
	new_arglist.code = 4;
	if control_structure.flags.ec
	then do;					/* set up ec_name arg */
		m = 2;
		arg_ec_name = ec_name;		/* can't pass varying string in command arglist */
		new_arglist.args (1) = addr (arg_ec_name);
		char_desc.size = length (ec_name);
		new_arglist.descs (1) = addr (char_desc);
	     end;
	else m = 1;				/* first arg is from original arg list */

	do j = m to nprogargs;
	     k = j + i - 1;
	     new_arglist.args (j) = old_arglist.args (k);
	     new_arglist.descs (j) = old_arglist.descs (k);
	end;

	call run_ (main_entry, new_arglist_ptr, addr (control_structure), code);

	if code ^= 0
	then call com_err_ (code, me);

	free new_arglist_ptr -> new_arglist;

	return;

     end;
