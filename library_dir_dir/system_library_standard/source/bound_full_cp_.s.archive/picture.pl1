/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-10-20,TLNguyen), approve(86-10-20,MCR7560),
     audit(86-10-22,Gilcrease), install(86-10-22,MR12.0-1195):
     Correct an usage message.
                                                   END HISTORY COMMENTS */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

/* Created: Mar 78	J Falksen					       */
/* Updated: Aug 78  J Falksen					       */
/*   added conversion handler					       */
/*   fixed error message					       */
/*   added valid_pictured_data entry				       */
/*   removed quotes from command output				       */
/*   made command use NL separator when multiple output values	       */
/* Updated: Aug 80  J Falksen					       */
/*   cleanup for installation and format_pl1			       */
/* Updated: Oct. 86 Tai L. Nguyen                                            */
/*   corrected an usage message                                              */

/* Syntax:  pic pic_string values {-control_arg}			       */
/*							       */
/* Function: returns one or more values processed through a specified	       */
/* PL/I picture.						       */
/*							       */
/* Arguments:						       */
/* pic_string						       */
/*    is a valid PL/I picture as defined in the PL/I Reference Manual and    */
/*    the PL/I Language Specification.				       */
/* values							       */
/*    are strings having data appropriate for editing into the picture.      */
/*    Each value must be convertible to the type implied by the picture      */
/*    specified.  If multiple values are presented, the results are	       */
/*    separated by single spaces.  Any resulting value that contains a       */
/*    space is quoted.					       */
/*							       */
/* Control argument:					       */
/* -strip							       */
/*    removes leading spaces from edited picture values; removes trailing    */
/*    zeros following a decimal point; removes a decimal point if it would   */
/*    have been the last character of a returned value.		       */
/*							       */
/*							       */
/* Syntax as active function:  [pic pic_string values {-control_arg}]	       */

/* Syntax:  [vpd pic_string values]				       */
/*							       */
/* Function: Returns "true" if all values can be formatted via pic_string.   */
/* Otherwise returns "false".					       */
/*							       */
/*							       */
/* Arguments:						       */
/* pic_string						       */
/*    is a valid PL/I picture.				       */
/* value							       */
/*    is a string to be edited into the picture.			       */
/*							       */
/*							       */
/* Notes:  For more information on PL/I picture and picture strings, see     */
/* the PL/I Reference Manual, Order No.  AM83 or the PL/I Language	       */
/* Specification, Order No. AG94.				       */

pic: picture: proc;			/* edit a value into a picture       */

      testing = "0"b;
      me = "picture";
      goto start;

valid_pictured_data: vpd: entry;	/* see if value will edit into pic   */

      testing = "1"b;
      me = "valid_pictured_data";
      goto start;

start:
      strip_sw = "0"b;		/* dont strip leading/trailing       */
      call cu_$af_arg_count (argct, code);
      if (code ^= 0)		/* called as command?	       */
      then do;			/* ...YES			       */
         retval_p = null ();		/* no return string		       */
         error = com_err_;		/* set error message routine	       */
         arg_ptr = cu_$arg_ptr;
      end;
      else do;			/* ...NO			       */
         call cu_$af_return_arg (argct, retval_p, retval_l, code);
				/* get return string	       */
         retval = "";
         error = active_fnc_err_;	/* set error message routine	       */
         arg_ptr = cu_$af_arg_ptr;
      end;
      if (argct < 2)
      then do;			/* tsk, tsk		       */
         if (me = "picture")
         then call error (error_table_$noarg, me,
	       "Usage:^-pic pic_str {-strip} value ...");
         else call error (error_table_$noarg, me,
	       "Usage:^-vpd pic_str value ...");
         return;
      end;
      call arg_ptr (1, argp, argl, code); /* get the picture string	       */
      if (argl = 0)			/* he wants the default	       */
      then do;
         the_picture = default;
         picp = addr (default);
         picl = length (default);	/* which include NO extraneous       */
         strip_sw = "1"b;		/*  spaces or blanks	       */
dcl default	char (13) int static options (constant)
		init ("(15)-9v.(15)9");
      end;
      else do;			/* use his picture  (SMILE!)	       */
         the_picture = arg;
         picp = argp;
         picl = argl;
      end;

      call picture_info_ ((picv), addr (buff), code);
				/* let PL/I routine process it       */
      if (code ^= 0)		/* Oh,			       */
      then do;			/* ...you didnt like that one!       */
         call error (0, me,
	  "^[Normalized picture > 64 char" ||
	  "^;Scale factor not in range -128:+127" ||
	  "^;Syntax error^]. ^a",
	  sign (code - 434) + 2,	/* That's right, they return a FUNNY */
	  the_picture);		/*  code!			       */
         return;
      end;
      do argno = 2 to argct while (^strip_sw);
         call arg_ptr (argno, argp, argl, code);
         if (arg = "-strip")
         then strip_sw = "1"b;
      end;

      on condition (conversion)	/* just in case he blows it	       */
         begin;
	  Cond = "Conversion";
	  goto err_exit;
         end;
      on condition (size)		/* just in case he blows it	       */
         begin;
	  Cond = "Size";
	  goto err_exit;
         end;
      do argno = 2 to argct;
         call arg_ptr (argno, argp, argl, code);
         if (arg ^= "-strip")
         then do;

/* let somebody do it who UNDERSTANDS all these things		       */
	  temp_length = addr (buff) -> picture_image.prec
	     + 262144 * (addr (buff) -> picture_image.scale
	     - addr (buff) -> picture_image.scalefactor);

	  call assign_ (addr (temp),
	     map_type (addr (buff) -> picture_image.type),
	     temp_length, argp, 42, (argl));
	  call pack_picture_ (addr (target) -> bit1, buff, temp);

	  if ^testing		/* not valid_pictured_data	       */
	  then do;
	     pictured
	        = substr (target, 1, addr (buff) -> picture_image.varlength);
	     if strip_sw		/* should we dump the extras?	       */
	     then do;
	        pictured = ltrim (pictured);
	        if (index (pictured, ".") ^= 0)
	        then do;
		 pictured = rtrim (pictured, "0");
		 if (substr (pictured, length (pictured), 1) = ".")
		 then pictured
		         = substr (pictured, 1, length (pictured) - 1);
	        end;
	     end;
	     if (retval_p = null ())
	     then call ioa_ ("^a", pictured);
	     else do;
	        j = index (pictured, " ");
	        if (length (retval) > 0)
	        then retval = retval || " ";
	        if (j > 0)
	        then retval = retval || """";
	        retval = retval || pictured;
	        if (j > 0)
	        then retval = retval || """";
	     end;
	  end;
         end;
      end;
      if testing
      then do;
         if (retval_p = null ())	/* command?		       */
         then call ioa_ ("true");	/* yes. print it		       */
         else retval = "true";	/* no. return it		       */
      end;

      return;

err_exit:
      if testing
      then do;
         if (retval_p = null ())	/* command?		       */
         then call ioa_ ("false");	/* yes. print it		       */
         else retval = "false";	/* no. return it		       */
      end;
      else call error (0, me,
	    "^a condition occurred while editing ""^a"" thru ""^a""",
	    Cond, arg, the_picture);
      return;

dcl active_fnc_err_ entry options (variable);
dcl arg		char (argl) based (argp);
dcl argct		fixed bin;
dcl argl		fixed bin (21);
dcl argno		fixed bin;
dcl argp		ptr;
dcl assign_	entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin,
		fixed bin (35));
dcl bit1		bit (1) unaligned based;
dcl buff		(20) fixed binary;
dcl code		fixed bin (35);
dcl Cond		char (12);
dcl com_err_	entry options (variable);
dcl conversion	condition;
dcl cu_$af_arg_count entry (fixed bin, fixed bin (35));
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35))
		automatic;
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl error		entry options (variable) automatic;
dcl error_table_$noarg fixed bin (35) ext static;
dcl ioa_		entry options (variable);
dcl j		fixed bin;
dcl me		char (32);
dcl pack_picture_	options (variable);
dcl picl		fixed bin;
dcl picp		ptr;
dcl picture_info_	entry (char (*) aligned, ptr, fixed bin (35));
dcl pictured	char (256) var;
dcl picv		char (picl) based (picp);
dcl retval	char (retval_l) var based (retval_p);
dcl retval_l	fixed bin (21);
dcl retval_p	ptr;
dcl size		condition;
dcl strip_sw	bit (1);
dcl target	char (128);
dcl temp		(128) char (1) unaligned;
dcl temp_length	fixed bin (35);
dcl testing	bit (1);
dcl the_picture	char (100) var;

dcl (addr, index, length, ltrim, null, rtrim, sign, substr) builtin;

%include picture_image;
dcl map_type	(24:28) fixed bin int static init (
		42,		/* character		       */
		18,		/* real fixed dec		       */
		22,		/* cplx fixed dec		       */
		20,		/* real float dec		       */
		24);		/* cplx float dec		       */
   end picture;
