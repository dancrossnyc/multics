/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
     audit(86-08-01,Schroth), install(86-11-20,MR12.0-1222):
     null variable node seg ptr in cleanup_old_linkage_section
  2) change(88-05-03,Farley), approve(88-05-26,MCR7901), audit(88-06-07,GWMay),
     install(88-07-05,MR12.2-1053):
     Changed RNT area manipulation code to use stack_header.rnt_ptr directly,
     instead of copying to the automatic rntp variable.  The RNT area can move
     and using the stack_header is the only sure way of referencing the correct
     location.  Also inhibit interrupts during this period.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
run_:
     proc (main_entry, arglist_ptr, ca_ptr, code);

/* coded December 1977 by Melanie Weaver */
/* modified June 1979 by Melanie Weaver to add -old_reference_names handling */
/* modified February 1983 by Melanie Weaver to clean up vla segments */

/* Parameters */

dcl	main_entry	entry variable;
dcl	arglist_ptr	ptr;
dcl	ca_ptr		ptr;
dcl	code		fixed bin (35);

/* Static */

dcl	in_run		bit (1) aligned static init ("0"b);
						/* init important for stop_run */
dcl	run_sp		ptr static init (null);
dcl	static_abort_label	label static;
dcl	1 saved_ptrs	aligned static like env_ptrs;
dcl	saved_vla_flag	bit (1) aligned static;	/* Automatic */

dcl	(i, j, old_cur_lot_size, old_rnt_size, rnt_size, nwords, linkage_lng, static_lng, hcscnt, highseg)
			fixed bin;
dcl	xcode		fixed bin (35);
dcl	mask		bit (36) aligned;
dcl	timer_set		bit (1) aligned;
dcl	Its_mod		bit (6) aligned static options (constant) init ("100011"b);
dcl	perprocess_array	(4096) bit (1) unaligned;
dcl	(new_lot_ptr, new_isot_ptr, new_sct_ptr, area_ptr, new_rnt_areap, tss_ptr, old_rntp, new_rntp, linkp, run_stp,
	stp, tp, np, link_ptr, temp_ptr, table_ptr)
			ptr;
dcl	(outer_env_linkage_ptr, run_unit_linkage_ptr)
			ptr unaligned;
dcl	search_rule_entry_var
			entry (ptr, fixed bin (35)) variable;
dcl	1 search_rules	aligned,
	  2 number	fixed bin,
	  2 name		(21) char (168) aligned;

dcl	1 auto_run_control_structure
			aligned like run_control_structure;

dcl	1 ainfo		aligned like area_info;

dcl	1 finish_info	aligned,
	  2 header	aligned like condition_info_header,
	  2 type		char (8);

dcl	1 cond_info	aligned like condition_info;

/* Based */

dcl	sct_array		(128) bit (36) aligned based;
dcl	based_array	(nwords) fixed bin (35) based;
dcl	based_area	area based;
dcl	based_bit		bit (72) aligned based;
dcl	rnt_area		area (rnt_size) based;
dcl	old_rnt_area	area (old_rnt_size) based;
dcl	linkage_section	(linkage_lng) fixed bin (35) based;
dcl	static_section	(static_lng) fixed bin (35) based;
dcl	1 control_args	aligned based (ca_ptr),
	  2 flags		aligned,
	    3 ec		bit (1) unaligned,
	    3 crn		bit (1) unaligned,
	    3 pad		bit (34) unaligned,
	  2 time_limit	fixed bin (35);
dcl	1 temp_seg_struc	aligned based (tss_ptr),
	  2 ntemps	fixed bin,
	  2 segno		(2000) fixed bin;


/* Builtins */

dcl	(addr, addrel, baseno, baseptr, bin, empty, hbound, lbound, null, stackbaseptr, stackframeptr)
			builtin;
dcl	(ptr, rel, size, string, unspec)
			builtin;

/* Conditions */

dcl	(any_other, cleanup, finish, command_abort_)
			condition;

/* externals */

dcl	sys_info$max_seg_size
			ext fixed bin (19);
dcl	error_table_$run_unit_not_recursive
			external fixed bin (35);

dcl	(get_temp_segment_, release_temp_segment_)
			entry (char (*), ptr, fixed bin (35));
dcl	define_area_	entry (ptr, fixed bin (35));
dcl	hcs_$high_low_seg_count
			entry (fixed bin, fixed bin);
dcl	hcs_$initiate_search_rules
			entry (ptr, fixed bin (35));
dcl	find_command_$clear entry ();
dcl	(
	hcs_$set_ips_mask,
	hcs_$reset_ips_mask
	)		entry (bit (36) aligned, bit (36) aligned);
dcl	timer_manager_$cpu_call
			entry (fixed bin (71), bit (2), entry);
dcl	timer_manager_$reset_cpu_call
			entry (entry);
dcl	cu_$generate_call	entry (entry, ptr);
dcl	execute_epilogue_	entry (bit (1) aligned);
dcl	get_temp_segments_$list_segnos
			entry (ptr);
dcl	hcs_$terminate_seg	entry (ptr, fixed bin (1), fixed bin (35));
dcl	link_unsnap_	entry (ptr, ptr, ptr, fixed bin, fixed bin);
dcl	release_area_	entry (ptr);
dcl	find_condition_info_
			entry (ptr, ptr, fixed bin (35));
dcl	continue_to_signal_ entry (fixed bin (35));
dcl	signal_		entry (char (*), ptr, ptr);
dcl	hcs_$get_search_rules
			entry (ptr);
dcl	fortran_storage_manager_$get_vla_segnos
			entry ((4096) bit (1) unaligned);
dcl	fortran_storage_manager_$free
			entry (ptr);

	if in_run
	then do;					/* do not allow recursive invocation because it won't work */
	     code = error_table_$run_unit_not_recursive;
	     return;
	end;

	code = 0;
	area_ptr = null;
	temp_ptr = null;

	if ca_ptr -> run_control_structure.version = run_control_structure_version_1
	then run_cs_ptr = ca_ptr;			/* caller used include file */
	else do;					/* copy items into standard structure */
	     run_cs_ptr = addr (auto_run_control_structure);
	     run_control_structure.flags.ec = control_args.flags.ec;
	     if control_args.flags.crn
	     then run_control_structure.reference_name_switch = COPY_REFERENCE_NAMES;
	     else run_control_structure.reference_name_switch = NEW_REFERENCE_NAMES;
	     run_control_structure.time_limit = control_args.time_limit;
	end;

	mask = "0"b;
	on cleanup
	     begin;
		if temp_ptr ^= null
		then call release_temp_segment_ ("run_", temp_ptr, code);
		if mask
		then call hcs_$reset_ips_mask (mask, mask);
	     end;

	call get_temp_segment_ ("run_", temp_ptr, code);
	if code ^= 0
	then return;

	call hcs_$set_ips_mask ("0"b, mask);

	run_sp = stackframeptr;			/* save for environment_info entry point */
	sb = stackbaseptr;
	new_lot_ptr = temp_ptr;
	old_cur_lot_size = sb -> stack_header.cur_lot_size;
	new_isot_ptr, new_sct_ptr = addrel (new_lot_ptr, old_cur_lot_size);
	lotp = sb -> stack_header.lot_ptr;
	isotp = sb -> stack_header.isot_ptr;

/* 	fill in run unit lot */
/* WARNING:  If this code is changed to combine new linkage sections for perprocess static segments
   (copying active static sections), stack_header.trans_op_tv_ptr must be pushed,
   since it must point to the actual links being used.
   This assumes that operator_pointers_ is still perprocess static. */

	call hcs_$high_low_seg_count (highseg, hcscnt);
	do i = hcscnt to hcscnt + highseg;
	     if baseno (lotp -> lot.lp (i)) = "0"b
	     then do;				/* either 0 or lot fault; just copy entry */
		unspec (new_lot_ptr -> lot.lp (i)) = unspec (lotp -> lot.lp (i));
						/* use bit copy to avoid possible fault */
		unspec (new_isot_ptr -> isot.isp (i)) = unspec (isotp -> isot.isp (i));
	     end;
	     else if ^lotp -> lot.lp (i) -> linkage_header_flags.perprocess_static
	     then unspec (new_lot_ptr -> lot.lp (i)) = lot_fault;
	     else do;				/* perprocess static; use same linkage and static */
		new_lot_ptr -> lot.lp (i) = lotp -> lot.lp (i);
						/* this should combine if there was a lot fault */
		new_isot_ptr -> isot.isp (i) = isotp -> isot.isp (i);
						/* we want any isot faults to handled at this time
						   so static will be in the right place */
	     end;
	end;

	new_isot_ptr -> sct_array = isotp -> sct_array;	/* copy static condition table */

/* set up the area for linkage sections, etc. */

	ainfo.version = area_info_version_1;
	ainfo.size = sys_info$max_seg_size - 2 * old_cur_lot_size;
						/* everything except lot annd isot */
	area_ptr, ainfo.areap = addrel (new_isot_ptr, old_cur_lot_size);
	string (ainfo.control) = "0"b;
	ainfo.control.extend = "1"b;
	ainfo.control.zero_on_free = "1"b;
	ainfo.control.system = "1"b;
	ainfo.owner = "run_";

	call define_area_ (addr (ainfo), code);
	if code ^= 0
	then do;
	     call release_temp_segment_ ("run_", temp_ptr, xcode);
	     call hcs_$reset_ips_mask (mask, mask);
	     return;
	end;

/* allocate new rnt area and initialize rnt if necessary */

	if run_control_structure.reference_name_switch ^= OLD_REFERENCE_NAMES
	then do;					/* set up new name space */
allocate_new_rnt:
	     rnt_size = sb -> stack_header.rnt_ptr -> rnt.rnt_area_size;
	     allocate rnt_area in (area_ptr -> based_area) set (new_rnt_areap);
	     if run_control_structure.reference_name_switch = COPY_REFERENCE_NAMES
	     then do;				/* copy whole area and update ptrs in rnt */
		new_rnt_areap -> rnt_area = empty;
		new_rnt_areap -> rnt_area = sb -> stack_header.rnt_ptr -> rnt.areap -> rnt_area;
		if rnt_size ^= sb -> stack_header.rnt_ptr -> rnt.rnt_area_size
		then do;				/* Has RNT grown/moved during the copy? */
		     free new_rnt_areap -> rnt_area;	/* remove the new area */
		     goto allocate_new_rnt;		/* and try again */
		end;
		new_rntp =
		     addrel (new_rnt_areap,
		     (bin (rel (sb -> stack_header.rnt_ptr), 18)
		     - bin (rel (sb -> stack_header.rnt_ptr -> rnt.areap), 18)));
		new_rntp -> rnt.srulep =
		     addrel (new_rnt_areap,
		     (bin (rel (sb -> stack_header.rnt_ptr -> rnt.srulep), 18)
		     - bin (rel (sb -> stack_header.rnt_ptr -> rnt.areap), 18)));
	     end;
	     else do;				/* initialize rnt and set up to init search rules */
		ainfo.control.extend = "0"b;		/* other control settings are ok */
		ainfo.owner = "rnt";
		ainfo.size = rnt_size;
		ainfo.areap = new_rnt_areap;
		call define_area_ (addr (ainfo), code);
		if code ^= 0
		then do;
		     call release_temp_segment_ ("run_", temp_ptr, xcode);
		     call hcs_$reset_ips_mask (mask, mask);
		     return;
		end;
		allocate rnt in (new_rnt_areap -> based_rnt_area) set (new_rntp);
		new_rntp -> rnt.name_hash_table (*) = null;
		new_rntp -> rnt.segno_hash_table (*) = null;
		new_rntp -> rnt.srulep = null;
		call hcs_$get_search_rules (addr (search_rules));
						/* use existing rules by default */
		search_rule_entry_var = hcs_$initiate_search_rules;
						/* must snap link before entering run environment */
	     end;

	     new_rntp -> rnt.areap = new_rnt_areap;	/* same for both cases */
	     new_rntp -> rnt.rnt_area_size = rnt_size;

	end;
	else new_rntp = sb -> stack_header.rnt_ptr;	/* no net change when keep same name space */


/* save current environment pointers in static */

	saved_ptrs.version = 1;
	saved_ptrs.pad = 0;
	saved_ptrs.lot_ptr = lotp;
	saved_ptrs.isot_ptr = isotp;
	saved_ptrs.clr_ptr = sb -> stack_header.clr_ptr;
	saved_ptrs.combined_stat_ptr = sb -> stack_header.combined_stat_ptr;
	saved_ptrs.user_free_ptr = sb -> stack_header.user_free_ptr;
	saved_ptrs.sys_link_info_ptr = sb -> stack_header.sys_link_info_ptr;
	saved_ptrs.rnt_ptr = sb -> stack_header.rnt_ptr;
	saved_ptrs.sct_ptr = sb -> stack_header.sct_ptr;
	saved_vla_flag = sb -> stack_header.have_static_vlas;

/* set up condition handlers */

	on finish
	     begin;
dcl	1 based_finish_info aligned based like finish_info;

		call find_condition_info_ (null, addr (cond_info), xcode);
		if cond_info.info_ptr = null
		then call continue_to_signal_ (xcode);
		else if cond_info.info_ptr -> based_finish_info.type ^= "run"
		then call continue_to_signal_ (xcode);	/* stop signalling if finish is just for run */
	     end;
	on any_other system;			/* set up wall */

	run_sp -> stack_frame_flags.run_unit_manager = "1"b;
						/* mark stack frame for PL/I options (main) */

	call find_command_$clear;			/* reset command processor's associative memory */

	on cleanup
	     begin;
		call restore_environment;
		if temp_ptr ^= null
		then call release_temp_segment_ ("run_", temp_ptr, code);
		if mask
		then call hcs_$reset_ips_mask (mask, mask);
	     end;

/* change to run environment */

	sb -> stack_header.lot_ptr = new_lot_ptr;
	sb -> stack_header.isot_ptr, sb -> stack_header.sct_ptr = new_isot_ptr;
	sb -> stack_header.clr_ptr = area_ptr;
	sb -> stack_header.combined_stat_ptr = area_ptr;
	sb -> stack_header.user_free_ptr = area_ptr;
	sb -> stack_header.sys_link_info_ptr = null;
	sb -> stack_header.rnt_ptr = new_rntp;
	sb -> stack_header.have_static_vlas = "0"b;

	if run_control_structure.reference_name_switch = NEW_REFERENCE_NAMES
						/* fill in search rules without snapping links */
	then call search_rule_entry_var (addr (search_rules), code);

	call hcs_$reset_ips_mask (mask, mask);		/* unmask now */

	timer_set = "0"b;
	on cleanup call Clean_up;

	if run_control_structure.time_limit > 0
	then do;
	     timer_set = "1"b;			/* doesn't hurt to set it ahead of time */
	     call timer_manager_$cpu_call ((run_control_structure.time_limit), "11"b, interrupt_run);
	end;

	static_abort_label = abort;
	in_run = "1"b;
	sb -> stack_header.main_proc_invoked = 0;	/* be sure this is set correctly */
	sb -> stack_header.run_unit_depth = 1;

	call cu_$generate_call (main_entry, arglist_ptr); /* start running */

abort:
	on cleanup call quick_cleanup;		/* be sure critical environment changing is done */
	call Clean_up;

	return;

Clean_up:
     proc;

	if timer_set
	then call timer_manager_$reset_cpu_call (interrupt_run);


	if in_run
	then do;					/* probably did something before stopping */
	     call execute_epilogue_ ("1"b);		/* just run epilogue_ handlers */
	     if old_cur_lot_size < sb -> stack_header.cur_lot_size
	     then do;				/* lot has grown; grow the outer env lot also */

/*	This code is similar to that in link_man$grow_lot, which cannot be used here
   .	because  it updates the stack header itself, which has already been done within the run unit. */

		nwords = 2 * sb -> stack_header.max_lot_size;
		allocate based_array in (saved_ptrs.clr_ptr -> based_area) set (saved_ptrs.lot_ptr);
						/* allocate new lot and isot */
		saved_ptrs.isot_ptr = addrel (saved_ptrs.lot_ptr, sb -> stack_header.max_lot_size);
		nwords = old_cur_lot_size;
		saved_ptrs.lot_ptr -> based_array = lotp -> based_array;
						/* copy old lot and isot */
		saved_ptrs.isot_ptr -> based_array = isotp -> based_array;
		lotp = saved_ptrs.lot_ptr;
		isotp = saved_ptrs.isot_ptr;
		old_cur_lot_size = sb -> stack_header.max_lot_size;

		new_lot_ptr = sb -> stack_header.lot_ptr;
						/* update run copies also */

		new_isot_ptr = sb -> stack_header.isot_ptr;

	     end;

/*	Now, if VLA external variables have been used, we must check
	all the external variables and free any attached VLA segments.
	We do not need to free the variables themselves because they
	will go away anyway.
*/

	     table_ptr = sb -> stack_header.sys_link_info_ptr;
	     if table_ptr ^= null
	     then if table_ptr -> variable_table_header.flags.have_vla_variables
		then call free_vla_common ();

	     call hcs_$high_low_seg_count (highseg, hcscnt);
						/* find current range of segment numbers */

	     if run_control_structure.reference_name_switch ^= OLD_REFERENCE_NAMES
	     then do;				/* terminate segs initiated only in run unit
						   and adjust outer environment LOT */

/*	obtain list of non-procedure perprocess_segments */

		string (perprocess_array) = "0"b;

		call find_area_components (saved_ptrs.clr_ptr);
						/* find all extensions of outer clr area */

		if saved_ptrs.combined_stat_ptr ^= saved_ptrs.clr_ptr
		then call find_area_components (saved_ptrs.combined_stat_ptr);

		if (sb -> stack_header.system_free_ptr ^= saved_ptrs.clr_ptr)
		     & (sb -> stack_header.system_free_ptr ^= saved_ptrs.combined_stat_ptr)
		then call find_area_components (sb -> stack_header.system_free_ptr);

		if (saved_ptrs.user_free_ptr ^= saved_ptrs.clr_ptr)
		     & (saved_ptrs.user_free_ptr ^= saved_ptrs.combined_stat_ptr)
		     & (saved_ptrs.user_free_ptr ^= sb -> stack_header.system_free_ptr)
		then call find_area_components (saved_ptrs.user_free_ptr);

		call find_area_components (area_ptr);	/* note components in own area; they  should
						   be terminated and deleted  later by release_area_
						   if they are not temp segments */

		call get_temp_segments_$list_segnos (tss_ptr);
						/* find all the temp segs */
		do i = 1 to temp_seg_struc.ntemps;
		     perprocess_array (temp_seg_struc.segno (i)) = "1"b;
		end;
		free tss_ptr -> temp_seg_struc;

		if sb -> stack_header.have_static_vlas
		then call fortran_storage_manager_$get_vla_segnos (perprocess_array);
						/* Note segments used in VLAs so they won't
					   be terminated prematurely.
					   fsm$free wants to truncate them first. */

/* The following code updates the outer environment LOT with the permanent changes that
   have taken place during the run unit.  This comment explains what the possibilities
   are and what actions are taken for each case.


   .				Run Unit
   .				Environment

   .		                  0       lot fault  linkage ptr
   .		            ____________________________________
   .		          0 | no change |    *1     |    *2     |
   . Outer	            _|____________|____________|___________|
   . Environment	  lot fault |    *5     | no change |    *3     |
   .		            _|____________|____________|____________|
   . 		linkage ptr |    *4     | no change |    *6     |
   .		            _|____________|____________|____________|

   .	*1   lot fault if non object perprocess segment; otherwise terminate

   .	*2   if perprocess, allocate linkage in outer, copy virgin linkage, copy static from run unit,
   .		and update outer lot; if not perprocess, terminate

   .	*3   if perprocess, same as *2 perprocess; otherwise do not change

   .	*4   (segment terminated during run unit) do everything term_ does except terminating,
   .		before environment is restored (don't risk reuse of segno in meantime)

   .	*5   (segment terminated during run unit) zero LOT entry and unsnap links to seg in outer

   .	*6   if perprocess, unsnap all links snapped during run unit because some are
		invalid; otherwise (shouldn't be possible) do not change

*/

		do i = hcscnt to hcscnt + highseg;
		     unspec (outer_env_linkage_ptr) = unspec (lotp -> lot.lp (i));
		     unspec (run_unit_linkage_ptr) = unspec (new_lot_ptr -> lot.lp (i));
		     if unspec (outer_env_linkage_ptr) = unspec (run_unit_linkage_ptr)
		     then do;
			if baseno (outer_env_linkage_ptr)
						/* had linkage ptr in outer env */
			then if outer_env_linkage_ptr -> linkage_header_flags.perprocess_static
						/* superfluous; wouldn't be = if not perprocess */
			     then call unsnap_links_in_outer_pps_linkage (i);
		     end;

		     else if unspec (outer_env_linkage_ptr) = "0"b
		     then do;			/* seg not  known before run unit */
			if unspec (run_unit_linkage_ptr) = lot_fault
			then do;			/* no active linkage section */
			     if perprocess_array (i)
			     then unspec (lotp -> lot.lp (i)) = lot_fault;
						/* don't forget about temp segs, etc. */
			     else call hcs_$terminate_seg (baseptr (i), 0, code);
			end;
			else do;			/* segment with linkage section */
			     if run_unit_linkage_ptr -> linkage_header_flags.perprocess_static
			     then call copy_linkage (i);
			     else do;
				if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
				then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
				call hcs_$terminate_seg (baseptr (i), 0, code);
			     end;
			end;
		     end;

		     else if unspec (outer_env_linkage_ptr) = lot_fault
		     then do;			/* segment initiated before run unit but no linkage in outer */
			if unspec (run_unit_linkage_ptr) = "0"b
			then do;
			     call link_unsnap_ (lotp, isotp, addrel (baseptr (i), -1), hcscnt, highseg);
						/* indicate no linkage section by offset of -1 */
			     lotp -> lot.lp (i) = baseptr (0);
						/* indicate termination in outer env */
			end;
			else do;			/* seg has linkage section in run unit only */
			     if run_unit_linkage_ptr -> linkage_header_flags.perprocess_static
			     then call copy_linkage (i);
			     else if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
			     then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
						/* leave a lot fault but free "attached" VLAs
						   before throwing away linkage section from run unit */
			end;
		     end;
		     else do;			/* seg with linkage section in outer environment */
			if unspec (run_unit_linkage_ptr) = "0"b
			then call cleanup_old_linkage_section (i);
						/* seg has since been terminated; clean up outer env */
			else if unspec (run_unit_linkage_ptr) ^= lot_fault
						/* non-pps linkage section in run unit;
						   free "attached" VLAs before throwing it away */
			then if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
			     then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
		     end;

		end;

	     end;					/* of new_name_space cleanup */

	     else do;				/* same name space case -- same RNT is used
						   and segs are not terminated */
		if sb -> stack_header.rnt_ptr ^= saved_ptrs.rnt_ptr
		then do;				/* RNT got reallocated (grown) in run unit's area;
						   copy it back into outer environment */

		     call hcs_$set_ips_mask ("0"b, mask);
reallocate_new_rnt:
		     rnt_size = sb -> stack_header.rnt_ptr -> rnt.rnt_area_size;
		     allocate rnt_area in (saved_ptrs.clr_ptr -> based_area) set (new_rnt_areap);
						/* allocate new RNT in outer environment */
		     new_rnt_areap -> rnt_area = empty; /* PL/I areas must be initiaslized
						   before being used in any way */
		     new_rnt_areap -> rnt_area = sb -> stack_header.rnt_ptr -> rnt.areap -> rnt_area;
						/* copy it out */
		     if rnt_size ^= sb -> stack_header.rnt_ptr -> rnt.rnt_area_size
		     then do;			/* Has RNT grown/moved during the copy? */
			free new_rnt_areap -> rnt_area;
						/* remove the new area */
			goto reallocate_new_rnt;	/* and try again */
		     end;
		     new_rntp =
			addrel (new_rnt_areap,
			bin (rel (sb -> stack_header.rnt_ptr), 18)
			- bin (rel (sb -> stack_header.rnt_ptr -> rnt.areap), 18));
						/* locate copy of RNT within area */
		     new_rntp -> rnt.areap = new_rnt_areap;
		     new_rntp -> rnt.srulep =
			addrel (new_rnt_areap,
			bin (rel (sb -> stack_header.rnt_ptr -> rnt.srulep), 18)
			- bin (rel (sb -> stack_header.rnt_ptr -> rnt.areap), 18));
						/* must relocate search rule ptr in new area */
		     old_rntp = sb -> stack_header.rnt_ptr;
		     old_rnt_size = sb -> stack_header.rnt_ptr -> rnt.rnt_area_size;
		     sb -> stack_header.rnt_ptr = new_rntp;
		     free old_rntp -> rnt.areap -> old_rnt_area;
		     call hcs_$reset_ips_mask (mask, mask);
		end;

/* The following code updates the outer environment LOT with the permanent changes that
   have taken place during the run unit.  This comment explains what the possibilities
   are and what actions are taken for each case.


   .				Run Unit
   .				Environment

   .		                  0       lot fault  linkage ptr
   .		            ____________________________________
   .		          0 | no change | lot fault |    *1     |
   . Outer	            _|____________|____________|___________|
   . Environment	  lot fault |    *2     | no change |    *1     |
   .		            _|____________|____________|____________|
   .		linkage ptr |    *3     | no change |    *4     |
   .		            _|____________|____________|____________|

	*1    if perprocess, allocate linkage in outer, copy virgin linkage, copy static from run unit,
		and update outer LOT; if not perprocess, set lot fault

	*2    (segment terminated during run unit) zero LOT entry and unsnap links to segment in outer

	*3    (segment terminated during run unit) do everything term_ does except terminating,
		before environment is restored

   .	*4   if perprocess, unsnap all links snapped during run unit because some are
		invalid; otherwise (shouldn't be possible) do not change

*/

		do i = hcscnt to hcscnt + highseg;
		     unspec (outer_env_linkage_ptr) = unspec (lotp -> lot.lp (i));
		     unspec (run_unit_linkage_ptr) = unspec (new_lot_ptr -> lot.lp (i));

		     if unspec (outer_env_linkage_ptr) = unspec (run_unit_linkage_ptr)
		     then do;
			if baseno (outer_env_linkage_ptr)
						/* had linkage ptr in outer env */
			then if outer_env_linkage_ptr -> linkage_header_flags.perprocess_static
						/* superfluous; wouldn't be = if not perprocess */
			     then call unsnap_links_in_outer_pps_linkage (i);
		     end;

		     else if unspec (outer_env_linkage_ptr) = "0"b
		     then do;			/* segment was not known before run unit */
			if unspec (run_unit_linkage_ptr) = lot_fault
			then unspec (lotp -> lot.lp (i)) = lot_fault;
			else do;
			     if run_unit_linkage_ptr -> linkage_header_flags.perprocess_static
			     then call copy_linkage (i);
			     else do;
				if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
				then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
				unspec (lotp -> lot.lp (i)) = lot_fault;
			     end;
			end;
		     end;

		     else if unspec (outer_env_linkage_ptr) = lot_fault
		     then do;			/* segment was initiated before run unit but
						   had no linkage in outer */
			if unspec (run_unit_linkage_ptr) = "0"b
			then do;
			     call link_unsnap_ (lotp, isotp, addrel (baseptr (i), -1), hcscnt, highseg);
						/* indicate no linkage section by offset of -1 */
			     lotp -> lot.lp (i) = baseptr (0);
						/* indicate termination in outer environment */
			end;
			else do;
			     if run_unit_linkage_ptr -> linkage_header_flags.perprocess_static
			     then call copy_linkage (i);
			     else if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
			     then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
			end;
		     end;

		     else do;			/* segment with linkage section in outer environment */
			if unspec (run_unit_linkage_ptr) = "0"b
			then call cleanup_old_linkage_section (i);
						/* segment has since been terminated;
						   clean up outer environment */
			else if unspec (run_unit_linkage_ptr) ^= lot_fault
						/* non-pps linkage section in run unit;
						   free "attached" VLAs before throwing it away */
			then if run_unit_linkage_ptr -> linkage_header_flags.static_vlas
			     then call fortran_storage_manager_$free ((run_unit_linkage_ptr));
		     end;

		end;				/* of LOT entry comparison loop */

	     end;					/* of code to cleanup same name space case */

	end;					/* of stuff done when in_run is on */

/*		now restore the outer environment */


	call quick_cleanup;

	code = 0;					/* just in case */
     end;

interrupt_run:
     proc (mcptr, cname);

/* This is the routine called by timer_manager_ when the user specifies a time limit. */

dcl	mcptr		ptr;
dcl	cname		char (*);
dcl	answer		char (10) varying;
dcl	command_query_	entry options (variable);
dcl	1 query_info	aligned,
	  2 version	fixed bin init (2),
	  2 yes_or_no_sw	bit (1) unaligned init ("1"b),
	  2 suppress_name_sw
			bit (1) unaligned init ("0"b),
	  2 code		fixed bin (35) init (0),
	  2 query_code	fixed bin (35) init (0);

	call command_query_ (addr (query_info), answer, "run",
	     "Time limit reached.  Do you want to continue the program?  ");
	if answer = "no"
	then goto abort;
	call timer_manager_$cpu_call ((run_control_structure.time_limit), "11"b, interrupt_run);

     end;

quick_cleanup:
     proc;

/* this procedure does the most essential cleaning up of the environment and static variables */

	sb -> stack_header.run_unit_depth = 0;
	sb -> stack_header.main_proc_invoked = 0;
	mask = "0"b;
	on cleanup
	     begin;
		if mask
		then call hcs_$reset_ips_mask (mask, mask);
	     end;

	call hcs_$set_ips_mask ("0"b, mask);
	call restore_environment;
	in_run = "0"b;
	call hcs_$reset_ips_mask (mask, mask);

	run_sp = null;
	call find_command_$clear;			/* clear command processor assoc. memory again */

     end;

restore_environment:
     proc;

/* restore original stack header variables and release temp seg */

	sb -> stack_header.lot_ptr = saved_ptrs.lot_ptr;
	sb -> stack_header.isot_ptr = saved_ptrs.isot_ptr;
	sb -> stack_header.clr_ptr = saved_ptrs.clr_ptr;
	sb -> stack_header.combined_stat_ptr = saved_ptrs.combined_stat_ptr;
	sb -> stack_header.user_free_ptr = saved_ptrs.user_free_ptr;
	sb -> stack_header.sys_link_info_ptr = saved_ptrs.sys_link_info_ptr;
	sb -> stack_header.sct_ptr = saved_ptrs.sct_ptr;
	if run_control_structure.reference_name_switch ^= OLD_REFERENCE_NAMES
	then sb -> stack_header.rnt_ptr = saved_ptrs.rnt_ptr;
	sb -> stack_header.have_static_vlas = saved_vla_flag;

	if area_ptr ^= null
	then call release_area_ (area_ptr);		/* clean up any area extensions */
	if temp_ptr ^= null
	then call release_temp_segment_ ("run_", temp_ptr, code);

     end;

copy_linkage:
     proc (segno);

/* copy original linkage section and static section from run unit into outer environment */

dcl	segno		fixed bin;


	linkage_lng = bin (run_unit_linkage_ptr -> header.stats.block_length, 18);
	allocate linkage_section in (saved_ptrs.clr_ptr -> based_area) set (linkp);
	linkp -> linkage_section = run_unit_linkage_ptr -> header.original_linkage_ptr -> linkage_section;
						/* copy virgin linkage into outer env */
	linkage_lng = size (header);
	linkp -> linkage_section = run_unit_linkage_ptr -> linkage_section;
						/* copy active header stuff */
	static_lng = bin (linkp -> header.stats.static_length, 18);
	if static_lng > 0
	then do;					/* have a static section */
	     run_stp = new_isot_ptr -> isot.isp (segno);
	     if run_stp ^= run_unit_linkage_ptr		/* separate static */
	     then allocate static_section in (saved_ptrs.combined_stat_ptr -> based_area) set (stp);
	     else do;
		stp = addrel (linkp, size (header));
		run_stp = addrel (run_stp, size (header));
	     end;
	     stp -> static_section = run_stp -> static_section;
						/* copy static */
	     if new_isot_ptr -> isot.isp (segno) = run_unit_linkage_ptr
	     then stp = linkp;
	end;
	else stp = linkp;				/* no static; isote = lote by default */

	saved_ptrs.lot_ptr -> lot.lp (segno) = linkp;	/* update original lot, isot */
	saved_ptrs.isot_ptr -> isot.isp (segno) = stp;

     end;

unsnap_links_in_outer_pps_linkage:
     proc (segno);

/* This procedure unsnaps all links in a perprocess segment that were snapped during the run unit
   because they may have been snapped to segments being terminated.  This wouldn't be necessary
   if perprocess segments also got new linkage sections during run units.
*/

declare	segno		fixed bin;

	linkp = lotp -> lot.lp (segno);
	do j = bin (linkp -> header.stats.begin_links, 18) to bin (linkp -> header.stats.block_length, 18) - 1 by 2;
	     link_ptr = addrel (linkp, j);
	     if link_ptr -> link.ft2 = Its_mod		/* snapped link */
	     then if link_ptr -> link.run_depth > 0	/* snapped during run unit */
		then link_ptr -> based_bit = addrel (linkp -> header.original_linkage_ptr, j) -> based_bit;
	end;

	return;

     end;

cleanup_old_linkage_section:
     proc (segno);

/* This procedure does what term_ does but in the outer environment (except terminating). */

dcl	segno		fixed bin;

	call link_unsnap_ (lotp, isotp, (outer_env_linkage_ptr), hcscnt, highseg);
	if saved_ptrs.sys_link_info_ptr ^= null
	then do;					/* there are *system links */
	     tp = saved_ptrs.sys_link_info_ptr;
	     do j = lbound (tp -> variable_table_header.hash_table, 1)
		to hbound (tp -> variable_table_header.hash_table, 1);
		do np = tp -> variable_table_header.hash_table (j) repeat np -> variable_node.forward_thread
		     while (np ^= null);
		     if bin (baseno (np -> variable_node.init_ptr), 15) = i
		     then do;			/* zap init ptrs to terminated seg */
			np -> variable_node.init_ptr = null;
			np -> variable_node.seg_ptr = null;
		     end;

		end;
	     end;
	end;

/*		now free static and linkage */
	if isotp -> isot.isp (segno) ^= outer_env_linkage_ptr
	then if isotp -> isot1 (segno).flags.fault ^= "11"b
	     then do;				/* have separate static section to free */
		free isotp -> isot.isp (segno) -> static_section;
	     end;
	unspec (isotp -> isot.isp (segno)) = "0"b;	/* 0 the isot slot to be discarded */
	free outer_env_linkage_ptr -> linkage_section;
	unspec (lotp -> lot.lp (segno)) = "0"b;

	return;

     end /* cleanup_old_linkage_section */;

find_area_components:
     proc (a_area_ptr);

/* this subroutine turns on a bit in the perprocess array for each segment
   contained in the given area. */

dcl	(a_area_ptr, area_ptr)
			ptr;
dcl	ii		fixed bin;

	area_ptr = a_area_ptr;
	do ii = 1 to 500 while (area_ptr ^= null);	/* set limit to avoid infinite loop */
	     perprocess_array (bin (baseno (area_ptr), 15)) = "1"b;
	     if area_ptr -> area_header.extend_info
	     then area_ptr = addrel (area_ptr, area_ptr -> area_header.extend_info) -> extend_block.next_area;
	     else area_ptr = null;
	end;

     end;

free_vla_common:
     proc ();

dcl	node_ptr		ptr;
dcl	hash_index	fixed bin;

	if table_ptr -> variable_table_header.cur_num_of_variables < 1
	then return;

	do hash_index = lbound (table_ptr -> variable_table_header.hash_table, 1)
	     to hbound (table_ptr -> variable_table_header.hash_table, 1);

	     node_ptr = table_ptr -> variable_table_header.hash_table (hash_index);
	     do while (node_ptr ^= null);
		if node_ptr -> variable_node.vbl_size > sys_info$max_seg_size
		then call fortran_storage_manager_$free (node_ptr);
		node_ptr = node_ptr -> variable_node.forward_thread;
	     end;
	end;

	return;
     end;

environment_info:
     entry (asp, ep, ecode);

/* This entry returns stack header information which is relevant for a given stack frame */

dcl	(asp, ep)		ptr;
dcl	ecode		fixed bin (35);

	ecode = 0;

	if in_run & (bin (rel (asp), 18) < bin (rel (run_sp), 18))
	then do;
	     ep -> env_ptrs = saved_ptrs;
	end;

	else do;					/* in run unit; return current info */
	     sb = ptr (addr (sb), 0);
	     ep -> env_ptrs.lot_ptr = sb -> stack_header.lot_ptr;
	     ep -> env_ptrs.isot_ptr = sb -> stack_header.isot_ptr;
	     ep -> env_ptrs.clr_ptr = sb -> stack_header.clr_ptr;
	     ep -> env_ptrs.combined_stat_ptr = sb -> stack_header.combined_stat_ptr;
	     ep -> env_ptrs.user_free_ptr = sb -> stack_header.user_free_ptr;
	     ep -> env_ptrs.sys_link_info_ptr = sb -> stack_header.sys_link_info_ptr;
	     ep -> env_ptrs.rnt_ptr = sb -> stack_header.rnt_ptr;
	     ep -> env_ptrs.sct_ptr = sb -> stack_header.sct_ptr;
	end;

	return;

stop_run:
     entry;

/* This entry is a command and is also called by the PL/I and fortran stop statements */

	if in_run
	then do;					/* set up structure for signalling finish */
	     finish_info.header.length = size (finish_info);
	     finish_info.header.version = 1;
	     string (finish_info.header.action_flags) = "0"b;
	     finish_info.header.default_restart = "1"b;
	     finish_info.header.info_string = "";
	     finish_info.header.status_code = 0;
	     finish_info.type = "run";
	     call signal_ ("finish", null, addr (finish_info));

	     goto static_abort_label;
	end;

	else do;
	     signal command_abort_;
	     return;
	end;

%include run_control_structure;

%include env_ptrs;


%include lot;

%include area_info;


%include area_structures;

%include rnt;

%include stack_header;

%include linkdcl;






%include system_link_names;

%include stack_frame;



%include condition_info_header;

%include condition_info;





     end;
