/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


	

/****^  HISTORY COMMENTS:
  1) change(89-01-16,TLNguyen), approve(89-01-27,MCR8053),
     audit(89-02-23,RBarstad), install(89-03-01,MR12.3-1018):
     1. Modify "Syntax" portion in comment lines stated at the beginning
        of the source program to provide more information for usage.
     
     2. Fix stringrange condition raised at the run time during testing
        period.
     
     3. Fix the bug occured when given L <= U and -I.  For examples:
        index_set 1 1 -1; index_set -7 -5 -2
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* index_set active function & command						*/
	/*									*/
	/* Function:  returns/prints one or more sets of numbers.  Numbers are separated from	*/
	/* one another by a space.  Each set contains numbers in the sequence:		*/
	/*									*/
	/*	L, L+I, L+2I, L+3I, ... L+kI						*/
	/*									*/
	/* where k is the largest integer such that  L+kI<=U.  L, U, and I are integers (either	*/
	/* positive or negative) representing the lowest number of each set,  an upper bound	*/
	/* on set elements, and an increment between numbers of the set.			*/
	/*									*/
	/* Syntax:                                                                                */
          /*       case 1:	[index_set U]   is equivalent to   [index_set 1 U 1]		*/
          /*                                                                                        */
	/*       case 2:    [index_set L U]                                                       */
          /*                                  is equivalent to   [index_set L U 1]  if L <= U       */
          /*                                  is equivalent to   [index_set L U -1] if L > U        */
                
          /*                                                                                        */
          /*       case 3:    [index_set L U -I]                                                    */
          /*                                  is treated as      [index_set L U I]  if L <= U       */
          /*                                                                                        */
          /*       case 4:    [index_set L U I]                                                     */
          /*                                  is treated as      [index_set L U -I]  if L > U       */
          /*                                                                                        */
          /*       case 5:	[index_set L1 U1 I1 ... Ln Un In]				*/
	/*									*/
	/* Status:								*/
	/* 0) Recoded by  Gary Dixon,  June 1978.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Fixed to handle "index_set 0 0" and reject increments of 0 - 07/07/81 S. Herbst */

index_set: procedure;				/* This active function returns a string of no.	*/

     dcl (Larg, Lret, Ls)		fixed bin(21),
         (Nargs, Ngroups)		fixed bin,
         (Parg, Parg_list,  Pret)	ptr,
	Scommand			bit(1) aligned,
	code			fixed bin(35),
         (conversion, size)		condition,
	err			entry options(variable) variable,
	get_arg			entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr) variable,
         (i, j, k)			fixed bin,
	Npic			pic "---------9";

     dcl	arg			char(Larg) based(Parg),
	ret			char(Lret) varying based(Pret);

     dcl (abs, addr, convert, divide, length, log10, ltrim, maxlength, mod, substr)
				builtin;

     dcl (active_fnc_err_,
	com_err_)			entry options(variable),
         (cu_$af_arg_ptr_rel,
	cu_$arg_ptr_rel)		entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_list_ptr		entry returns(ptr),
	iox_$put_chars		entry (ptr, ptr, fixed bin(21), fixed bin(35));

     dcl (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) aligned int static options(constant),
	NL			char(1) aligned int static options(constant) init("
"),
         (error_table_$bad_conversion,
	error_table_$not_act_fnc,
	error_table_$out_of_bounds,
	error_table_$wrong_no_of_args)	fixed bin(35) ext static,
	iox_$user_output		ptr ext static;

	call cu_$af_return_arg (Nargs, Pret, Lret, code);	/* See if invoked as command of af. Get af ret.	*/
	if code = error_table_$not_act_fnc then  do;	/* Invoked as a command.			*/
	     err = com_err_;
	     get_arg = cu_$arg_ptr_rel;		/*   Report errors/get args accordingly.	*/
	     Scommand = TRUE;
	     Lret = 100000;				/*   Limit printed output to 100000 chars.	*/
	     end;					/*   per invocation of the command.		*/
	else if code = 0 then do;			/* Invoked as an active function.		*/
	     err = active_fnc_err_;
	     get_arg = cu_$af_arg_ptr_rel;
	     Scommand = FALSE;
	     end;
	else go to BAD_INVOKE;			/* Invoked without argument descriptors.	*/

	if Nargs = 0 then go to WNOA;			/* Must be called with 1, 2, or 3 args, or	*/
	else if Nargs < 3 then;			/* with a multiple of three args.		*/
	else if mod(Nargs,3) ^= 0 then go to WNOA;

	if Nargs < 3 then				/* When called with 3 or less args, output only	*/
	     Ngroups = 1;				/* one set of numbers.			*/
	else Ngroups = divide(Nargs,3,17,0);		/* Otherwise output one set or group per triplet	*/
	Parg_list = cu_$arg_list_ptr();		/* of input args.  Remember args before entering	*/
						/* begin block to get space for set boundaries.	*/

     begin;					/* Start of BEGIN BLOCK for group boundary store	*/

     dcl	1 group (Ngroups),				/* space for set boundaries.			*/
	  2 (lb, ub, incr)		fixed bin(34),	/*   lower bound, upper bound, increment.	*/
	vector (3 * Ngroups)	fixed bin(34) based(addr(group));

	on conversion, size go to BAD_BOUND;
	if Nargs = 1 then do;			/* If only 1 arg, fake a lower bound of 1.	*/
	     group(1).lb = 1;
	     group(1).incr = 1;
	     i = 2;				/*   1st arg is the upper bound.		*/
	     call get_arg (1, Parg, Larg, 0, Parg_list);	/*   get 1st arg and store it.		*/
	     group(1).ub = convert(group(1).ub, arg);
	     if abs(group(1).ub) > 1000000000 then	/*   All lower/upper bounds <= one billion.	*/
		go to BAD_BOUND;
	     end;
	else do;					/* More than 1 arg.  Process in triplets.	*/
	     if Nargs = 2 then			/* If only 2 args, fake third arg of 1 for incr.	*/
		group(1).incr = 1;
	     j = 0;				/* Initialize triplet counter.		*/
	     do i = 1 to Nargs;			/* 1st args of triplet is L; 2nd is U; 3rd is I.	*/
		call get_arg (i, Parg, Larg, 0, Parg_list);
	    	vector(i) = convert(vector(i), arg);
		if abs(vector(i)) > 1000000000 then	/*   All lower/upper bounds <= one billion.	*/
		     go to BAD_BOUND;
		j = j + 1;
		if j = 3 then  do;			/* Triplet complete?  */
		     if vector (i) = 0 then do;         /* increment value cannot be zero. */
			call err (error_table_$bad_conversion, "index_set",
			     "Increment cannot be zero (Argument ^d)", i);
			return;
		     end;
		     else if vector(i) > 1000000 then	/*     Increments <= one million.		*/
			go to BAD_BOUND;
		     else;                              /* otherwise, either negative or position increment value is ok */

		     j = 0;			/* reset triplet counter; prepare for next triple.*/
		     end;
		end;
	     end;
	revert conversion;

	Ls = 0;					/* Compute length of string needed to return all	*/
	do i = 1 to Ngroups;			/* sets of numbers.				*/
	     Ls = Ls + s_length(group(i));
	     end;
	if Ls > Lret then do;			/* Complain if return string is too long.	*/
	     call err (error_table_$out_of_bounds, "index_set",
"Return string of ^d chars is longer than ^d.",
		Ls, Lret);
	     go to RETURN;
	     end;

	if ^Scommand then Ls = 0;                         /* If invoked as active function, use af return   */
                                                            /* arg to hold string; as command, allocate       */
                                                            /* storage via begin block (below) to hold string.*/
     
	

     begin;					/* Start of BEGIN BLOCK for result string storage.*/

     dcl	s char (Ls) varying;                              /* the returned integers are hold in an automatic character string */
	

	if Scommand then do;
	     Pret = addr (s);
	     Lret = maxlength (s);
	end;

	ret = "";

	do i = 1 to Ngroups;			/* For each set (group) of numbers to be returned,*/
	     if group(i).lb <= group(i).ub then do;	/* if L < = U and I is negative, then I is assumed to be positive */
		if group (i).incr < 0 then
		     group (i).incr = abs (group (i).incr);
	     end;
	     else do;                                     /* if L > U and I is positive, then I is assumed to be negative */
		if group (i).incr > 0 then
		     group (i).incr = - (group (i).incr);
	     end;

	     do j = group(i).lb to group(i).ub by group(i).incr;
		Npic = j;				/*   compute group elements; store in result str.	*/

		if (i = 1) & (j = group (i).lb) then    /* if this is the first time in both loops */
		     ret = ltrim (Npic);                /* then get the returned integer */
		else ret = ret || ltrim(Npic);          /* append the returned integer to the already string of returned integers */

		ret = ret || " ";                      /* each returned integer is separated by a white space */
		end;
	     end;
	if Scommand then do;			/* Print result string when invoked as a command  */
	     substr(ret, length (ret), 1) = NL;           /* add the Newline character in place of a white space at the end */

	     call iox_$put_chars (iox_$user_output, addr (substr (ret, 1)), length (ret), code);
	     end;
	else ret = substr (ret, 1, length (ret) - 1);     /* Return af result (except for extra space	*/
						/* at end of string).			*/


	end;					/* End of BEGIN BLOCK for result string storage.	*/

s_length: procedure (g) returns (fixed bin(21));		/* This internal proc computes APPROXIMATE length	*/
						/* of result string needed for 1 group (set) of	*/
						/* numbers.  The guess is always guaranteed to be	*/
						/* >= the storage actually required.		*/

     dcl	1 g,
	  2 (l, u, i)		fixed bin(34),
         (lb, ub)			fixed bin(34),
         (i, j)			fixed bin,
	len			fixed bin(71);


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* A set of numbers is defined by a triplet (L U I) where L is lower bound, U is upper	*/
	/* bound, I is increment between numbers.					*/
	/*									*/
	/* s_length(L U I) can be found by the following procedure:				*/
	/* 1) Start out by assuming an increment of 1 (L U 1).				*/
	/* 2) Break apart (L U 1) into one or more intervals, each of whose L is 1, -1, or 0.	*/
	/*    For example,								*/
	/*	(1 10 1) ==> stays unbroken						*/
	/*	(5 10 1) ==> (1 10 1) - (1 4 1) (ie, {1 2 3 4 5 6 7 8 9 10} - {1 2 3 4}	*/
	/*	(-7 -1 1)==> (-1 -7 1)						*/
	/*	(-4 5 1) ==> (-1 -4 1) + (0 0 1) + (1 5 1)				*/
	/* 3) s_length(0 0 1) is 2.							*/
	/* 4) s_length(-|L| -|U| 1) = s_length(|L| |U| 1) + n_elements(|L| |U| 1)		*/
	/*    For example, s_length(-1 -7 1) = s_length(1 7 1) + 7, because a - sign precedes	*/
	/*    each element of (-1 -7 1).						*/
	/* 5) At this point, any s_length(L U 1) can be computed as sum or difference of some	*/
	/*    s_length(1 Ui 1).							*/
	/*									*/
	/* To compute s_length(1 U 1), do the following.					*/
	/* 6) Determine how many chars required to output U followed by a space.		*/
	/*   	n_chars(U) = log10(U)+2						*/
	/*    In all uses of log10(U) in this algorithm, we are interested only in the integer	*/
	/*    part of the value.  For example, log10(250) = 2 and 4 chars are req'd to output 250.*/
	/*    These are the longest numbers of the set.					*/
	/* 7) Determine how many of these longest numbers there are.			*/
	/*	n_longest(U) = U - (10**log10(U) - 1)					*/
	/*    For example, n_longest(110) = 110 - (10**log10(110) - 1)			*/
	/*			    = 110 - (10**2 - 1) = 110 - 99 = 11			*/
	/*    The table subtrahend(0:8) contains the values of (10**log10(U) - 1) for values of	*/
	/*    log10(U) from 0 to 8.							*/
	/* 8) From (6) and (7) we have:						*/
	/*	s_length( 10**log10(U)  U  1) = n_chars(U) * n_longest(U)			*/
	/*    For example, s_length(100 110 1) = n_chars(110)    *  n_longest(110)		*/
	/*			         = (log10(110)+2)  *  (110 - 99)		*/
	/*			         =       4         *      11        = 44		*/
	/* 9) Since  s_length(1 U 1)  =  s_length(1  10**log10(U)-1  1)  +  			*/
	/*			   s_length(10**log10(U)  U  1)			*/
	/*    we can compute s_length(1 U 1) from (8) above and s_length(1  10**log10(U)-1  1).	*/
	/*    s_length(1  10**log10(U)-1   1)  is stored in the addend(0:8) table below for 	*/
	/*    values of log10(U) from 0 to 8.  Values of s_length(-1  -(10**log10(U)-1)  1)  are	*/
	/*    stored in neg_addend(0:8) below.						*/

	/* Thus, we have from the above:						*/
	/*	s_length(1 U 1) = s_length(10**log10(U) U 1) + s_length(1 10**log10(U)-1 1)	*/
	/*		      = n_chars(U) * n_longest(U)  + addend(log10(U))		*/
	/*		      = log10(U)+2 * (U - subtrahend(log10(U))) + addend(log10(U))	*/
	/* and    s_length(-1 -|U| 1) =						*/
	/*		      = log10(|U|)+3 * (|U| - subtrahend(log10(|U|))) +		*/
	/*		        neg_addend(log10(|U|))				*/
	/*									*/
	/* At this point, we can compute s_length(L U 1) for any integer L and U.		*/
	/* The value computed by the above formula is exact!  We provide the following 		*/
	/* approximation for handling integer increments > 1.				*/
	/* s_length(1 U I) =							*/
	/*					log10(U)				*/
	/*					________				*/
	/*					\				*/
	/*					 \				*/
	/*		   s_length(1 U 1)		  \				*/
	/*		   ---------------	+	   >	(k+2)			*/
	/*			I		  /				*/
	/*					 /				*/
	/*					/________				*/
	/*					  k = 0				*/
	/* The rational is that only every Ith number of the set will be output, so the		*/
	/* result string need be only 1/I as long, approximately.  The approximation comes from	*/
	/* the fact that I probably does not evenly divide the number of elements of any given	*/
	/* length in the set of numbers.  To compensate, we add room for one number of each length*/
	/* to the result string (the summation does this).  If for shorthand we write the	*/
	/* summation above as sum(k+2, k=0 to log10(U)), then we have			*/
	/* s_length(-1 -|U| |I|) = s_length(-1 -|U| 1) / I   +   sum(k+3, k = 0 to log10(|U|))	*/
	/*									*/
	/* By the rules of algebra, we have						*/
	/*	sum(k+2, k = 0 to log10(U))  =  sum(k, k = 0 to log10(U)) + 2*(log10(U)+1)	*/
	/*			         =  (log10(U)*(log10(U)+1)) / 2  +  2*(log10(U)+1)	*/
	/* This result is used in the equations below.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


     dcl	addend (0:8)		fixed bin(71) int static options(constant) init(
					    0,
					   18,
					  288,
					 3888,
					48888,
				         588888,
				        6888888,
				       78888888,
				      888888888),
	neg_addend (0:8)		fixed bin(71) int static options(constant) init(
					    0,
					   27,
					  387,
					 4887,
					58887,
				         688887,
				        7888887,
				       88888887,
				      988888887),
	subtrahend (0:8)		fixed bin(71) int static options(constant) init(
					    0,
				   	    9,
					   99,
					  999,
					 9999,
					99999,
				         999999,
				        9999999,
				       99999999);

	if g.l > g.u then do;			/* Treat (12 5 1) as (5 12 1), etc.		*/
	     lb = g.u;				/*   Swap upper and lower bounds.		*/
	     ub = g.l;
	     end;
	else do;					/* Copy upper and lower bounds without swap.	*/
	     lb = g.l;
	     ub = g.u;
	     end;
	if (lb>=0) & (ub>=0) then do;			/* All numbers in set are nonnegative.		*/
	     if ub = 0 then i = 0;
	     else i = log10(ub);			/*   This number is used everywhere.		*/

	     len = addend(i) + (i+2)*(ub-subtrahend(i));	/*   compute s_length(1 U 1).			*/

	     if lb = 1 then;
	     else if lb = 0 then			/*   add 2 to handle "0 " if present.		*/
		len = len + 2;
	     else do;				/*   s_length(L U 1) = s_length(1 U 1) -	*/
		lb = lb - 1;			/*	s_length(1 L-1 1)			*/
		if lb = 0 then j = 0;
		else j = log10(lb);

		len = len - (addend(j) + (j+2)*(lb-subtrahend(j)));
		end;

	     if g.i ^= 1 then			/*   s_length(L U I) = s_length(L U 1)/I +	*/
						/*	sum(k+2, k = 0 to i)		*/
		len = divide (len, abs (g.i), 35, 0) + divide (i * (i + 1), 2, 35, 0) + 2 * (i + 1);
	     end;
	else if (lb<=0) & (ub<=0) then do;		/* All numbers of set are nonpositive.		*/
	     k  = lb;				/*   Treat (-5 -2 1) as (2 5 1) from counting	*/
	     lb = -ub;				/*     standpoint.				*/
	     ub = -k;
	     if ub = 0 then i = 0;
	     else i = log10(ub);			/*   Compute s_length(1 |U| 1)		*/

	     len = neg_addend(i) + (i+3)*(ub-subtrahend(i));

	     if lb = 1 then;
	     else if lb = 0 then			/*   add 2 to handle "0 " if present.		*/
		len = len + 2;
	     else do;				/*   s_length(|L| |U| 1) = s_length(1 |U| 1) -	*/
		lb = lb - 1;			/*	s_length(1 |L|-1 1)			*/
		if lb = 0 then j = 0;
		else j = log10(lb);

		len = len - (neg_addend(j) + (j+3)*(lb-subtrahend(j)));
		end;

	     if g.i ^= 1 then			/*   s_length(L U I) = s_length(L U 1)/I +	*/
						/* 	sum(k+3, k = 0 to i)		*/
		len = divide (len, abs (g.i), 35, 0) + divide (i * (i + 1), 2, 35, 0) + 3 * (i + 1);
	     end;
	else do;					/* Sets contains both positive and negative numbers*/
						/* so use a combination of 2 cases above.	*/
	     lb = -lb;				/* lb < 0; invert its sign.			*/
	     if lb = 0 then i = 0;
	     else i = log10(lb);

	     len = neg_addend(i) + (i+3)*(lb-subtrahend(i));
	     len = len + 2;				/* Account for the 0 between neg. lower bound	*/
						/* and pos. upper bound.			*/

	     if ub = 0 then j = 0;
	     else j = log10(ub);

	     len = len + (addend(j) + (j+2)*(ub-subtrahend(j)));

	     if g.i ^= 1 then
		len = divide (len, abs (g.i), 35, 0) + divide ((i + j) * (i + j + 1), 2, 35, 0) + 3 * (i + 1) + 2 * (j + 1);
	     end;

	if len > Lret then do;			/* If return string too long, report it now when	*/
	     call err (error_table_$out_of_bounds, "index_set", "
String needed to return numbers from ^d to ^d is too long.", g.l, g.u);
	     go to RETURN;				/* we know which set is too big.		*/
	     end;					/* Check for sum of all sets is done by caller.	*/

	return (len);

	end s_length;


     end;						/* End of BEGIN BLOCK for group boundary store.	*/


RETURN:	return;

WNOA:	call err (error_table_$wrong_no_of_args, "index_set",
"^/Usage:	^[^;[^]index_set  first1 bound1 increment1 ... firstN boundN incrementN^[^;]^]
or:	^[^;[^]index_set  first  bound^[^;]^]
or:	^[^;[^]index_set  bound^[^;]^]", Scommand, Scommand, Scommand, Scommand, Scommand, Scommand);

	return;

BAD_BOUND:
	call err (error_table_$bad_conversion, "index_set", " ^a is an invalid ^[increment^;first number^;bound^].
Argument must satisfy the condition:
  ^[-1000000^;-1000000000^;-1000000000^] <= ^[increment^;first number^;bound^] <= ^[1000000^;1000000000^;1000000000^]",
 	     arg, mod(i,3)+1, mod(i,3)+1, mod(i,3)+1, mod(i,3)+1);

	return;

BAD_INVOKE:
	call active_fnc_err_ (code,  "index_set");

	return;

     end index_set;
