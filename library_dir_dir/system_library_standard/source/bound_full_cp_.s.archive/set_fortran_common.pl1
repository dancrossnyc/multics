/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7420),
     audit(86-08-21,Schroth), install(86-11-20,MR12.0-1222):
     changed calling sequence for list_init_
  2) change(86-08-06,Elhard), approve(86-08-06,MCR7457),
     audit(86-08-22,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to look in all components of object MSFs for external links and
     to ignore external variables with deferred initialization.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
set_fortran_common:
sfc:
     proc;

/* This program finds the links to common blocks in the specified segments and obtains the
   initialization info from them.  If there are multiple initializations for the same
   common block, they are combined, with the longest length being used.    Then all the common
   blocks are initialized with the specified init info (allocated first if necessary).
*/
/* coded October 18, 1977 by Melanie Weaver */
/* modified December , 1977 by Melanie Weaver to increase dimensions and handle stat_ */
/* Modified: November 12, 1982 - T Oke, to handle Very Large Array COMMON.            */
/* modified January 1983 by Melanie Weaver to handle variables occupying a whole segment */
/* Modified November 1 1984 by M. Mabey to explicitly zero any variable that is          */
/*	reinitialized with list templates.				         */

/* AUTOMATIC */

dcl	(nargs, alng, i, j, nblocks)
			fixed bin;
dcl	(new_vsize, variable_size)
			fixed bin (35);
dcl	bitcnt		fixed bin (24);
dcl	type		fixed bin (18);
dcl	code		fixed bin (35);

dcl	(longsw, fatalsw, found_sw)
			bit (1) aligned;
dcl	block_end		bit (18) aligned;
dcl	dummy_init_info	bit (72) aligned;
dcl	k		fixed bin;
dcl	sys_areap		ptr;
dcl	sys_area		area based (sys_areap);
dcl	n_segs		fixed bin;
dcl	msf_sw		bit (1);

dcl	(aptr, seg_ptr, p, type_ptr, segnp, node_ptr, ext_ptr)
			ptr;
dcl	viptr		(2) ptr;


dcl	ext_name		char (65);
dcl	dir		char (168);
dcl	ent		char (32);
dcl	component_generator char (8);

dcl	1 seg_info	(1000) aligned based (viptr (2)),
	  2 pathname	char (168),
	  2 segp		ptr,
	  2 bc		fixed bin (24);

dcl	1 var_info	(10000) aligned based (viptr (1)),
	  2 init_ptr	ptr,
	  2 vsize		fixed bin (35),
	  2 init_owner	fixed bin,
	  2 name		char (65) unaligned;

dcl	1 oi		aligned like object_info;

/* CONSTANTS */

dcl	me		char (18) init ("set_fortran_common") static options (constant);
dcl	Fault_Tag_2	bit (6) aligned init ("100110"b) static options (constant);

/* EXTERNALS */

dcl	(addr, addrel, baseno, bin, bit, clock, divide, empty, 
	fixed, index, rel, max, null, ptr, substr, unspec)
			builtin;

dcl	cleanup		condition;

dcl	(
	error_table_$badopt,
	error_table_$bad_link_target_init_info
	)		ext fixed bin (35);
dcl	sys_info$max_seg_size
			ext fixed bin (35);
dcl	pl1_operators_$VLA_words_per_seg_
			fixed bin (19) external;

dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	(com_err_, ioa_)	entry options (variable);
dcl	get_system_free_area_
			entry () returns (ptr);
dcl	object_lib_$initiate
			entry (char (*), char (*), char (*), bit (1), ptr, fixed bin (24), bit (1), fixed bin (35));
dcl	object_lib_$get_component_info
			entry (ptr, ptr, char (8), char (*), ptr, fixed bin (35));
dcl	pathname_		entry (char (*), char (*)) returns (char (168));
dcl	object_info_$brief	entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl	set_ext_variable_	entry (char(*), ptr, ptr, bit(1) aligned,
		          ptr, fixed bin(35));
dcl	hcs_$terminate_noname
			entry (ptr, fixed bin (35));
dcl	(get_temp_segments_, release_temp_segments_)
			entry (char (*), (*) ptr, fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	unique_chars_	entry (bit (36)) returns (char (15));
dcl	list_init_	entry (ptr, ptr, fixed bin (35), ptr , ptr,
			fixed bin(35));
dcl	list_init_$variable_already_zero
			entry (ptr, ptr, fixed bin (35), ptr, ptr,
			fixed bin(35));

dcl	fortran_storage_manager_$alloc
			entry (fixed bin, ptr, ptr);
dcl	fortran_storage_manager_$free
			entry (ptr);


/* BASED */

dcl	arg		char (alng) based (aptr);
dcl	new_init_info	(new_vsize) fixed bin (35) based;
dcl	based_area	area (variable_size) based;
dcl	variable		(variable_size) bit (36) based;



dcl	1 acc_name	aligned based,
	  2 nsize		fixed bin (8) unal,
	  2 string	char (0 refer (acc_name.nsize)) unaligned;


/*  */
	nblocks = 0;
	n_segs = 0;
	longsw = "0"b;
	fatalsw = "0"b;
	sb = ptr (addr (sb), 0);
	lotp = sb -> stack_header.lot_ptr;

	call cu_$arg_count (nargs);

	if nargs = 0
	then do;
	     call com_err_ (0, me, "Usage is:  set_fortran_common paths {-long}");
	     return;
	end;

	sys_areap = get_system_free_area_ ();

	viptr (1) = null;
	comp_infop = null;
	on cleanup
	     begin;
		if viptr (1) ^= null then do;
		     do i = 1 to n_segs;
			if seg_info (i).segp ^= null
			then call hcs_$terminate_noname (seg_info (i).segp, code);
		     end;
		     call release_temp_segments_ (me, viptr, code);
		end;
		if comp_infop ^= null
		then free component_info in (sys_area);
	     end;

	call get_temp_segments_ (me, viptr, code);

	do i = 1 to nargs;				/* first loop to find control args */
	     call cu_$arg_ptr (i, aptr, alng, code);
	     if (arg = "-long") | (arg = "-lg")
	     then do;
		longsw = "1"b;
		goto end_arg_loop;
	     end;
	     else if substr (arg, 1, 1) = "-"
	     then do;
		call com_err_ (error_table_$badopt, me, arg);
		fatalsw = "1"b;
	     end;
	     call expand_pathname_ (arg, dir, ent, code);
	     if code ^= 0
	     then do;
error1:
		call com_err_ (code, me, arg);
		fatalsw = "1"b;
		goto end_arg_loop;
	     end;

	     call object_lib_$initiate (dir, ent, "", "1"b, seg_ptr, bitcnt, msf_sw, code);
	     if code ^= 0
	     then do;
error2:
		call com_err_ (code, me, "^a>^a", dir, ent);
		fatalsw = "1"b;
		goto end_arg_loop;
	     end;
	     seg_info (n_segs+1).segp = null;		/* initialize variable for cleanup handler. */
	     n_segs = n_segs + 1;

	     do j = 1 to n_segs - 1;			/* see if this arg is a duplicate */
		if seg_info (j).segp = seg_ptr
		then do;				/* already have this one */
		     n_segs = n_segs - 1;
		     goto end_arg_loop;
		end;
	     end;
	     seg_info (n_segs).segp = seg_ptr;
	     seg_info (n_segs).bc = bitcnt;
	     seg_info (n_segs).pathname = pathname_ (dir, ent);

	     if msf_sw
	     then do;
		call object_lib_$get_component_info (seg_ptr, sys_areap, component_info_version_1, "none", comp_infop, code);
		if code ^= 0
		then goto error2;

		do j = 1 to component_info.max;
		     seg_info (n_segs+1).segp = null;	/* initialize variable for cleanup handler. */
		     n_segs = n_segs + 1;

		     do k = 1 to n_segs - 1;		/* see if this arg is a duplicate */
			if seg_info (k).segp = component_info.comp (j).segp
			then do;			/* already have this one */
			     n_segs = n_segs - 1;
			     free component_info in (sys_area);
			     comp_infop = null;
			     goto end_arg_loop;
			end;
		     end;
		     seg_info (n_segs).segp = component_info.comp (j).segp;
		     seg_info (n_segs).bc = component_info.comp (j).bc;
		     seg_info (n_segs).pathname = pathname_ (dir, ent);
		end;

		free component_info in (sys_area);
		comp_infop = null;
	     end;

end_arg_loop:
	end;

	if fatalsw
	then goto terminate;

	do i = 1 to n_segs;				/* get object info and check for non fortran */

	     oi.version_number = object_info_version_2;
	     call object_info_$brief (seg_info (i).segp, seg_info (i).bc, addr (oi), code);
	     if code ^= 0
	     then goto error2;

/*
   .	     call get_bound_seg_info_ (seg_ptr, bitcnt, addr (oi), bmp, binder_sblkp, code);
   .	     if code ^= 0 then do;
   .		if code ^= error_table_$not_bound then goto error2;
   .		if (oi.compiler = "fortran") | (oi.compiler = "fortran2") then goto has_fortran;
   .	     end;
   .	     else do j = 1 to bmp -> bindmap.n_components;
   .	          component_generator = addrel (oi.symbp, bmp -> bindmap.component (j).symb_start)
   .	     	     -> std_symbol_header.generator;
   .		if (component_generator = "fortran") | (component_generator = "fortran2")
   .		then goto has_fortran;
   .	     end;
   .
   .	     fatalsw = "1"b;
   .	     if code = 0 then call com_err_ (0, me, "^a does not have a fortran component.", arg);
   .	     else call com_err_ (0, me, "^a was not compiled by fortran.", arg);
   .
   .	     goto end_arg_loop;
   .
   .has_fortran:
*/
/* look through links for common */
	     if oi.linkp -> virgin_linkage_header.defs_in_link = "010000"b
	     then block_end = rel (addrel (oi.linkp, oi.linkp -> virgin_linkage_header.def_offset));
	     else block_end = rel (addrel (oi.linkp, oi.linkp -> virgin_linkage_header.linkage_section_lng));

	     do p = addrel (oi.linkp, oi.linkp -> header.stats.begin_links) repeat (addrel (p, 2))
		while (rel (p) < block_end);

		if p -> link.ft2 = Fault_Tag_2
		then do;				/* see if it is to common */
		     type_ptr = addrel (oi.defp, (addrel (oi.defp, p -> link.exp_ptr) -> exp_word.type_ptr));
		     type = bin (type_ptr -> type_pair.type, 18);
		     if type = 5
		     then do;
			if bin (type_ptr -> type_pair.seg_ptr, 18) = 5
						/* *system */
			then ext_name = addrel (oi.defp, type_ptr -> type_pair.ext_ptr) -> acc_name.string;
			else goto next_link;
		     end;
		     else if type = 6
		     then do;
			segnp = addrel (oi.defp, type_ptr -> type_pair.seg_ptr);
			ext_ptr = addrel (oi.defp, type_ptr -> type_pair.ext_ptr);
			if ext_ptr -> acc_name.nsize = 0
			then do;
			     j = index (segnp -> acc_name.string, ".com");
			     if (j = 0) | (j < (segnp -> acc_name.nsize - 3))
			     then goto next_link;
			     ext_name = substr (segnp -> acc_name.string, 1, j - 1);
			     if ext_name = "b_"
			     then ext_name = "blnk*com";
			end;
			else if segnp -> acc_name.string = "stat_"
			then ext_name = ext_ptr -> acc_name.string;
			else if segnp -> acc_name.string = "cobol_fsb_"
			then ext_name = "cobol_fsb_" || ext_ptr -> acc_name.string;
			else goto next_link;
		     end;
		     else goto next_link;
		end;
		else goto next_link;		/* not a link */

		if type_ptr -> type_pair.trap_ptr = "0"b
		then goto next_link;		/* no init info */
		init_info_ptr = addrel (oi.defp, type_ptr -> type_pair.trap_ptr);

		do j = 1 to nblocks;		/* see if name is on list; if not, add it */
		     if ext_name = var_info (j).name
		     then do;			/* we do have name */
			if init_info_ptr -> init_info.type > NO_INIT
			     & init_info_ptr -> init_info.type ^= INIT_DEFERRED
			then do;			/* we have an init template */
			     if var_info (j).init_ptr -> init_info.type = NO_INIT
			     then do;		/* now we have init template to use */
				var_info (j).init_ptr = init_info_ptr;
				var_info (j).init_owner = i;
			     end;
			     else if var_info (j).init_ptr -> init_info.size < init_info_ptr -> init_info.size
			     then do;		/* have a larger template to use */
				call ioa_ (
				     "^a:  Initialization for common block ^a defined in subprogram ^a^/^-replacing initialization defined in subprogram ^a because it is longer.",
				     me, ext_name, seg_info (i).pathname,
				     seg_info (var_info (j).init_owner).pathname);
				var_info (j).init_ptr = init_info_ptr;
				var_info (j).init_owner = i;
			     end;
			     else do;		/* new template is same or smaller size */
				if unspec (var_info (j).init_ptr -> init_info.init_template)
				     ^= unspec (init_info_ptr -> init_info.init_template)
				then call ioa_ (
					"^a:  Initialization for common block ^a defined in subprogram ^a is ignored; ^/^-using initialization defined in subprogram ^a.",
					me, ext_name, seg_info (i).pathname,
					seg_info (var_info (j).init_owner).pathname);
			     end;
			end;
			var_info (j).vsize = max (var_info (j).vsize, init_info_ptr -> init_info.size);
			goto next_link;
		     end;
		end;
		nblocks = nblocks + 1;

		var_info (nblocks).init_ptr = init_info_ptr;
		var_info (nblocks).vsize = init_info_ptr -> init_info.size;
		var_info (nblocks).init_owner = i;
		var_info (nblocks).name = ext_name;
next_link:
	     end;
	end;

	if fatalsw
	then goto terminate;			/* we have gone as far as we can go */
	if nblocks = 0
	then do;
	     call ioa_ ("^a:  None of the specified programs have any common blocks.", me);
	     goto terminate;
	end;

/* now allocate/initialize all common blocks */

	do i = 1 to nblocks;
	     new_vsize = 0;
	     if var_info (i).vsize > var_info (i).init_ptr -> init_info.size
	     then do;				/* must make temp init info with correct size */
		if var_info (i).init_ptr -> init_info.type = TEMPLATE_INIT
		then do;				/* must copy template */
		     new_vsize = var_info (i).vsize + 2;
		     allocate new_init_info in (sb -> stack_header.user_free_ptr -> based_area) set (init_info_ptr);
		     init_info_ptr -> init_info.size = var_info (i).vsize;
		     init_info_ptr -> init_info.type = TEMPLATE_INIT;
		     unspec (init_info_ptr -> init_info.init_template) =
			unspec (var_info (i).init_ptr -> init_info.init_template);
		end;
		else if var_info (i).init_ptr -> init_info.type = LIST_TEMPLATE_INIT
		then do;				/* copy list template */
		     new_vsize = var_info (i).init_ptr -> list_init_info.list_size + 3;
		     allocate new_init_info in (sb -> stack_header.user_free_ptr -> based_area) set (init_info_ptr);
		     unspec (init_info_ptr -> list_init_info) = unspec (var_info (i).init_ptr -> list_init_info);
		     init_info_ptr -> init_info.size = var_info (i).vsize;
		end;
		else do;
		     init_info_ptr = addr (dummy_init_info);
		     init_info_ptr -> init_info.size = var_info (i).vsize;
		     init_info_ptr -> init_info.type = var_info (i).init_ptr -> init_info.type;
		end;
	     end;
	     else init_info_ptr = var_info (i).init_ptr;	/* can use program's init info directly */

	     call set_ext_variable_ (var_info (i).name, init_info_ptr, sb,
		found_sw, node_ptr, code);
	     if code ^= 0
	     then if ^found_sw
		then do;
init_error:
		     call com_err_ (code, me, "Initializing common block ^a", var_info (i).name);
		     if new_vsize > 0
		     then free init_info_ptr -> new_init_info;
		     goto terminate;
		end;

	     if ^found_sw
	     then goto next_block;			/* allocated as specified */

	     if node_ptr -> variable_node.vbl_size < init_info_ptr -> init_info.size
	     then do;				/* must reallocate and unsnap links */
		if longsw
		then call ioa_ (
			"^a:  Common block ^a is already in use with a smaller block length.^/^-The old version will be deleted.",
			me, var_info (i).name);
		call delete_it (node_ptr);
		variable_size = init_info_ptr -> init_info.size;

		if variable_size > sys_info$max_seg_size
		then do;
		     if (init_info_ptr -> init_info.type ^= NO_INIT)
			& (init_info_ptr -> init_info.type ^= LIST_TEMPLATE_INIT)
		     then do;			/* multi-seg variable can't have template or area */
			code = error_table_$bad_link_target_init_info;
			go to init_error;
		     end;
		     call fortran_storage_manager_$alloc (
			divide (variable_size + pl1_operators_$VLA_words_per_seg_ - 1,
			pl1_operators_$VLA_words_per_seg_, 17), node_ptr, node_ptr -> variable_node.vbl_ptr);
		end;
		else if variable_size > (sys_info$max_seg_size - 50)
		then do;
		     call hcs_$make_seg ("", unique_chars_ (""b) || "linker", "", 01110b,
			node_ptr -> variable_node.vbl_ptr, code);
		     if code ^= 0
		     then go to init_error;
		end;
		else allocate variable in (sb -> stack_header.user_free_ptr -> based_area)
			set (node_ptr -> variable_node.vbl_ptr);

		node_ptr -> variable_node.vbl_size = variable_size;
		node_ptr -> variable_node.time_allocated = clock ();
		sb -> stack_header.sys_link_info_ptr -> variable_table_header.total_allocated_size =
		     sb -> stack_header.sys_link_info_ptr -> variable_table_header.total_allocated_size
		     + variable_size;
	     end;

/* reinitialize the variable; not worth checking to see if it's already OK */

	     variable_size = node_ptr -> variable_node.vbl_size;

	     if init_info_ptr -> init_info.type = NO_INIT
	     then call list_init_ (node_ptr -> variable_node.vbl_ptr, 
		     null (), variable_size, null(), null(), code);

	     else if init_info_ptr -> init_info.type = EMPTY_AREA_INIT
						/* this would not be a fortran link */
	     then node_ptr -> variable_node.vbl_ptr -> based_area = empty;

	     else if init_info_ptr -> init_info.type = LIST_TEMPLATE_INIT
						/* list_template init */
	     then do;
		call list_init_ (node_ptr -> variable_node.vbl_ptr,
		     null (), variable_size, null(), null(), code);
		call list_init_$variable_already_zero (
		     node_ptr -> variable_node.vbl_ptr,
		     addr (init_info_ptr -> list_init_info.template), 
		     variable_size, null(), null(), code);
	     end;
	     else unspec (node_ptr -> variable_node.vbl_ptr -> variable) =
		     unspec (init_info_ptr -> init_info.init_template);


/* now check for possible errors from list init and set_ext_var */

               if code ^= 0 then
                 do;
                 call com_err_ (code,me, " while referencing ^a",
		  node_ptr->variable_node.name);
	       goto terminate;
                 end;

	     node_ptr -> variable_node.init_type = init_info_ptr -> init_info.type;

next_block:
	     node_ptr -> variable_node.init_ptr = var_info (i).init_ptr;
						/* fill in with permanent address */
	     if new_vsize > 0
	     then free init_info_ptr -> new_init_info;
	end;

/* now terminate noname everything that was known before the command was invoked */

terminate:
	do i = 1 to n_segs;
	     if seg_info (i).segp ^= null
	     then call hcs_$terminate_noname (seg_info (i).segp, code);
	end;


	if viptr (1) ^= null
	then call release_temp_segments_ (me, viptr, code);

	return;

/*  */
delete_it:
     proc (np);

/* This procedure unsnaps the links to an external variable and then frees it */

dcl	(np, headptr, defstartptr, linkstartptr, itsptr, vlp, lptr, vptr)
			ptr;
dcl	based_ptr		ptr based;
dcl	based_double	bit (72) aligned based;
dcl	(segno, hcscnt, high_seg)
			fixed bin;
dcl	vsize		fixed bin (35);
dcl	old_variable	(vsize) bit (36) based;
dcl	hcs_$high_low_seg_count
			entry (fixed bin, fixed bin);
dcl	delete_$ptr	entry (ptr, bit (6), char (*), fixed bin (35));

	vptr = np -> variable_node.vbl_ptr;		/* get value links would have */

	call hcs_$high_low_seg_count (high_seg, hcscnt);

	do segno = hcscnt + 1 to hcscnt + high_seg;
	     if rel (lotp -> lot.lp (segno)) ^= "0"b
	     then do;
		headptr = lotp -> lot.lp (segno);
		defstartptr = headptr -> header.def_ptr;/* pointer to beginning of def section */
		linkstartptr = addrel (headptr, headptr -> header.stats.begin_links);

/* check for defs in linkage section and compute end of links */

		if (baseno (linkstartptr) = baseno (defstartptr))
		     & (fixed (rel (defstartptr), 18) > fixed (rel (linkstartptr), 18))
		then block_end = rel (defstartptr);	/* end of links before end of block if defs follow links */

		else block_end = rel (addrel (headptr, headptr -> header.stats.block_length));
						/* end of links and of block are the same */

		do itsptr = linkstartptr repeat (addrel (itsptr, 2)) /* loop through all links */
		     while (rel (itsptr) < block_end);
		     if itsptr -> its.its_mod = "100011"b
		     then do;			/* snapped link */
			lptr = itsptr -> based_ptr;	/* copy to pick up any indirection */
			if lptr = vptr
			then do;			/* have a link pointing to the variable; unsnap */
			     vlp = headptr -> header.original_linkage_ptr;
			     itsptr -> based_double =
				addrel (vlp, bit (bin (bin (rel (itsptr), 18) - bin (rel (headptr), 18), 18)))
				-> based_double;
			end;
		     end;
		end;
	     end;
	end;

/* now free the variable */

	vsize = np -> variable_node.vbl_size;

	if vsize > sys_info$max_seg_size
	then call fortran_storage_manager_$free (np);

	else if rel (np -> variable_node.vbl_ptr) = "0"b	/* separate seg was created outside area */
	then call delete_$ptr (np -> variable_node.vbl_ptr, "010100"b, me, code);

	else free np -> variable_node.vbl_ptr -> old_variable;

	np -> variable_node.vbl_ptr = null;
	sb -> stack_header.sys_link_info_ptr -> variable_table_header.total_allocated_size =
	     sb -> stack_header.sys_link_info_ptr -> variable_table_header.total_allocated_size - vsize;

	return;

     end;						/* of delete_it */


%page;
/* Include Files */
%include system_link_names;
%page;
%include system_link_init_info;
%page;
%include object_info;
%page;
%include linkdcl;
%page;
%include stack_header;
%page;
%include lot;
%page;
%include its;
%page;
%include std_symbol_header;
%page;
%include object_lib_defs;

     end;
