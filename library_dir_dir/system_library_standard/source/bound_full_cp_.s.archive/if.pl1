/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Conditionally executes one of two command/request lines; as an active function/request, conditionally returns one of
   two strings */

/* Created:  September 1970 by THVV */
/* Modified: 27 April 1976 by Steve Herbst to accept keys "true" and "false" */
/* Modified: 17 February 1982 by G. Palter to add ssu_if_request_ and convert to use a standalone subsystem invocation */
/* Modified: 8 September 1982 by G. Palter to propogate subsystem/request line aborts */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


if:
     procedure () options (variable);


dcl  P_sci_ptr pointer parameter;			/* ssu_if_request_: -> SCI of subsystem */
dcl  P_info_ptr pointer parameter;			/* ssu_if_request_: -> subsystem's internal data */

dcl  sci_ptr pointer;
dcl  standalone_invocation bit (1) aligned;

dcl  active_function bit (1) aligned;
dcl  nargs fixed binary;

dcl  return_string char (rl) varying based (rp);
dcl  rl fixed binary (21);
dcl  rp pointer;

dcl  argument character (al) based (ap);
dcl  al fixed binary (21);
dcl  ap pointer;

dcl  second_argument character (cl) based (cp);
dcl  cl fixed binary (21);
dcl  cp pointer;

dcl  key character (8);
dcl  an fixed binary;

dcl  notsw bit (1) aligned;
dcl  thenloc fixed binary;
dcl  elseloc fixed binary;

dcl  ec fixed binary (35);

dcl  i fixed binary;
dcl  (first_number, second_number) fixed binary (35);

dcl  chase fixed binary (1);
dcl  type fixed binary (2);
dcl  bc fixed binary (24);
dcl  dn character (168);
dcl  en character (32);

dcl  timestr character (24);

dcl  yes_no_sw bit (1);

dcl  error_table_$bad_conversion fixed binary (35) external;
dcl  error_table_$noarg fixed binary (35) external;
dcl  ssu_et_$null_request_line fixed binary (35) external;
dcl  ssu_et_$subsystem_aborted fixed binary (35) external;

dcl  active_fnc_err_ entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  command_query_$yes_no entry () options (variable);
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21)) returns (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  date_time_ entry (fixed binary (71), character (*));
dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  hcs_$status_minf
	entry (character (*), character (*), fixed binary (1), fixed binary (2), fixed binary (24), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$execute_line entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$return_arg entry (pointer, fixed binary, bit (1) aligned, pointer, fixed binary (21));
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));

dcl  cleanup condition;

dcl  (clock, null, substr) builtin;

/**/

/* Multics if command/active-function */

/* if: entry () options (variable); */

	standalone_invocation = "1"b;			/* must create a standalone subsystem to do this */
	call ssu_$standalone_invocation (sci_ptr, "if", "1.0", cu_$arg_list_ptr (), abort_if_command, ec);
	if ec ^= 0 then do;				/* please forgive the following, but ... */
	     if cu_$af_return_arg (0, (null ()), (0)) = 0 then
		call active_fnc_err_ (ec, "if", "Can not establish standalone subsystem invocation.");
	     else call com_err_ (ec, "if", "Can not establish standalone subsystem invocation.");
	     return;
	end;
	go to COMMON;


/* Standard subsystem if request */

ssu_if_request_:
     entry (P_sci_ptr, P_info_ptr);

	standalone_invocation = "0"b;			/* caller supplied the subsystem */
	sci_ptr = P_sci_ptr;
	go to COMMON;


/* Actual work starts here */

COMMON:
	on condition (cleanup)
	     begin;
		if standalone_invocation then call ssu_$destroy_invocation (sci_ptr);
	     end;

	call ssu_$return_arg (sci_ptr, nargs, active_function, rp, rl);

	if nargs = 0 then				/* abort_line never returns */
PRINT_USAGE_MESSAGE:
	     if active_function then
		call ssu_$abort_line (sci_ptr, 0, "Usage:  [^a key -then {value1} {-else value2}]",
		     ssu_$get_request_name (sci_ptr));
	     else call ssu_$abort_line (sci_ptr, 0,
		     "Usage:  ^a key -then {^[command^;request^]1} {-else ^[command^;request^]2}",
		     ssu_$get_request_name (sci_ptr), standalone_invocation, standalone_invocation);

	an = 2;					/* index of first argument after the key */
	notsw = "0"b;				/* do not invert the test */
	thenloc, elseloc = 0;			/* no -then or -else yet */
	chase = 1;				/* chase links by default */


/* Get the keyword */

	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
	key = argument;

	if key = "-not" then do;			/* users wishes to invert the test */
	     notsw = "1"b;
	     an = an + 1;				/* next argument is the keyword */
	     call ssu_$arg_ptr (sci_ptr, 2, ap, al);
	     key = argument;
	end;

	else if substr (key, 1, 1) = "^" then do;	/* users wises to invert the test */
	     key = substr (key, 2, 7);
	     notsw = "1"b;
	end;


/* Locate then and else clauses (if any) and validate command/request syntax */

	do i = an to nargs;

	     call ssu_$arg_ptr (sci_ptr, i, ap, al);

	     if argument = "-then" then do;
		if thenloc ^= 0 then go to PRINT_USAGE_MESSAGE;
		thenloc = i;			/* remember location of "-then" */
	     end;

	     else if argument = "-else" then do;
		if elseloc ^= 0 then go to PRINT_USAGE_MESSAGE;
		elseloc = i;			/* remember location of "-else" */
	     end;
	end;

	if thenloc = 0 then go to PRINT_USAGE_MESSAGE;	/* -then must be supplied */

	if elseloc > 0 then do;			/* -else must follow -then with, at most, one ... */
	     if elseloc < thenloc then go to PRINT_USAGE_MESSAGE;
	     if elseloc > (thenloc + 2) then go to PRINT_USAGE_MESSAGE;
	     if (elseloc + 1) ^= nargs then go to PRINT_USAGE_MESSAGE;
	end;					/* ... intervening argument and must be followed by one */

	else do;					/* -then alone: it may be followed by no more than one arg */
	     if nargs > (thenloc + 1) then go to PRINT_USAGE_MESSAGE;
	end;


/* Determine results of the key (execution/no-execution) */

	if key = "true" then go to RESULT_IS_TRUE;	/* key was an active string */

	if key = "false" then go to RESULT_IS_FALSE;	/* key was an active string */

	if key = "is" then do;			/* check that a branch (seg/MSF/dir) exists */
CHECK_ENTRY_EXISTENCE:
	     if an = thenloc then			/* no pathname was supplied */
		call ssu_$abort_line (sci_ptr, error_table_$noarg, "Pathname after ""^a"".", key);
	     call ssu_$arg_ptr (sci_ptr, an, ap, al);
	     call expand_pathname_ (argument, dn, en, ec);
	     if ec ^= 0 then go to STATUS_MINF_CALL_FAILS;/* bad pathname: same as no entry */
	     if key = "islink" then chase = 0;		/* look for a link */
	     if key = "isfile" then chase = 0;		/* look for a segment */
	     if key = "isdir" then chase = 0;		/* look for a directory */
	     call hcs_$status_minf (dn, en, chase, type, bc, ec);
	     if ec ^= 0 then
STATUS_MINF_CALL_FAILS:				/* entry does not exist */
		if key = "isnt" then
		     go to RESULT_IS_TRUE;
		else go to RESULT_IS_FALSE;
	     if key = "is" then go to RESULT_IS_TRUE;	/* entry is there */
	     if key = "isnt" then go to RESULT_IS_FALSE;	/* entry is there: asked if it wasn't */
	     if key = "isdir" then			/* looking for a directory */
		if type = 2 then go to RESULT_IS_TRUE;
	     if key = "islink" then			/* looking for a link */
		if type = 0 then go to RESULT_IS_TRUE;
	     if key = "isfile" then			/* looking for a segment */
		if type = 1 then go to RESULT_IS_TRUE;
	     if key = "isnzf" then			/* looking for a non-zero length segment */
		if (type = 1) & (bc > 0) then go to RESULT_IS_TRUE;
	     go to RESULT_IS_FALSE;			/* here iff test failed */
	end;

	else if key = "isnt" then go to CHECK_ENTRY_EXISTENCE;
						/* check for non-existence of a branch */
	else if key = "isfile" then go to CHECK_ENTRY_EXISTENCE;
						/* check for existence of a segment */
	else if key = "isdir" then go to CHECK_ENTRY_EXISTENCE;
						/* check for existence of a directory */
	else if key = "islink" then go to CHECK_ENTRY_EXISTENCE;
						/* check for existence of a link */
	else if key = "isnzf" then go to CHECK_ENTRY_EXISTENCE;
						/* check for existence of a non-zero length segment */

	else if key = "arg" then			/* check for an argument after the key and before -then */
	     if an = thenloc then
		go to RESULT_IS_FALSE;
	     else go to RESULT_IS_TRUE;

	else if key = "noarg" then			/* check that no argument follows key */
	     if an = thenloc then
		go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;

	else if key = "day" then do;			/* check the date: arg after key is day name or day of month */
	     if an = thenloc then go to RESULT_IS_FALSE;
	     call ssu_$arg_ptr (sci_ptr, an, ap, al);
	     call date_time_ (clock (), timestr);	/* read the clock */
	     if substr (argument, 1, 1) > "A" then	/* alphabetic: check day of week */
		if substr (argument, 1, 3) = substr (timestr, 22, 3) then
		     go to RESULT_IS_TRUE;
		else go to RESULT_IS_FALSE;
	     else if argument = substr (timestr, 4, 2) then go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;
	end;

	else if key = "argeq" then do;		/* check two arguments after key for equality */
	     if an = thenloc then go to RESULT_IS_TRUE;	/* ... neither given */
	     if an = (thenloc - 1) then go to RESULT_IS_FALSE;
						/* ... only one is given: can't be equal */
	     call ssu_$arg_ptr (sci_ptr, an, ap, al);
	     call ssu_$arg_ptr (sci_ptr, (an + 1), cp, cl);
	     if argument = second_argument then
		go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;
	end;

	else if key = "ask" then do;			/* ask a question */
	     if an = thenloc then			/* ... question was already typed */
		call command_query_$yes_no (yes_no_sw, 0, ssu_$get_subsystem_and_request_name (sci_ptr), "", "?");
	     else do;				/* ... pickup question after the key */
		call ssu_$arg_ptr (sci_ptr, an, ap, al);
		call command_query_$yes_no (yes_no_sw, 0, ssu_$get_subsystem_and_request_name (sci_ptr), "", argument)
		     ;
	     end;
	     if yes_no_sw then
		go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;
	end;

	else if key = "less" then do;			/* numerical checks */
NUMERICAL_COMPARISONS:
	     if an = thenloc then go to RESULT_IS_FALSE;	/* both arguments must be there */
	     if an = (thenloc - 1) then go to RESULT_IS_FALSE;
	     call ssu_$arg_ptr (sci_ptr, an, ap, al);
	     first_number = cv_dec_check_ (argument, ec);
	     if ec ^= 0 then
NON_NUMERIC_ARGUMENT:
		call ssu_$abort_line (sci_ptr, error_table_$bad_conversion, "^a", argument);
	     call ssu_$arg_ptr (sci_ptr, (an + 1), ap, al);
	     second_number = cv_dec_check_ (argument, ec);
	     if ec ^= 0 then go to NON_NUMERIC_ARGUMENT;
	     if first_number < second_number then
		if key = "less" then
		     go to RESULT_IS_TRUE;
		else go to RESULT_IS_FALSE;
	     else if first_number > second_number then
		if key = "less" then
		     go to RESULT_IS_FALSE;
		else go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;		/* no check for equality on numbers */
	end;

	else if (key = "greater") | (key = "grt") then go to NUMERICAL_COMPARISONS;

	else if key = "number" then do;		/* check that argument after key is a number */
	     if an = thenloc then go to RESULT_IS_FALSE;	/* ... not there */
	     call ssu_$arg_ptr (sci_ptr, an, ap, al);
	     first_number = cv_dec_check_ (argument, ec);
	     if ec = 0 then
		go to RESULT_IS_TRUE;
	     else go to RESULT_IS_FALSE;
	end;

	else call ssu_$abort_line (sci_ptr, 0, "Unknown keyword ""^a"".", key);


/* Result of the test was false */

RESULT_IS_FALSE:
	if notsw then go to RESULT_IS_REALLY_TRUE;	/* sense of test was reversed */

RESULT_IS_REALLY_FALSE:
	if elseloc = 0 then go to RETURN_FROM_IF;	/* no else clause */
	an = elseloc + 1;				/* find where else clause is */
	go to EXECUTE_OR_RETURN_STRING;


/* Result of the test was true */

RESULT_IS_TRUE:
	if notsw then go to RESULT_IS_REALLY_FALSE;	/* sense of the test was reversed */

RESULT_IS_REALLY_TRUE:
	an = thenloc + 1;				/* argument index of then clause (if present) */
	if an = elseloc then go to RETURN_FROM_IF;	/* a null then clause */


/* Execute/return the selected string */

EXECUTE_OR_RETURN_STRING:
	if an > nargs then go to RETURN_FROM_IF;	/* clause is not present */

	call ssu_$arg_ptr (sci_ptr, an, ap, al);

	if active_function then			/* active function/request: return the string */
	     return_string = argument;
	else do;					/* command/request: execute it */
	     if al > 0 then call ssu_$execute_line (sci_ptr, ap, al, ec);
	     if ^standalone_invocation & (ec ^= 0) & (ec ^= ssu_et_$null_request_line) then
		if ec = ssu_et_$subsystem_aborted then
		     call ssu_$abort_subsystem (sci_ptr);
		else call ssu_$abort_line (sci_ptr);
	end;


/* Clean up */

RETURN_FROM_IF:
	if standalone_invocation then			/* we created the invocation */
	     call ssu_$destroy_invocation (sci_ptr);

	return;



/* Internal procedure invoked by ssu_$abort_line when if was invoked as a Multics command/active function */

abort_if_command:
     procedure ();

	go to RETURN_FROM_IF;			/* message has been printed: now we can punt */

     end abort_if_command;

     end if;
