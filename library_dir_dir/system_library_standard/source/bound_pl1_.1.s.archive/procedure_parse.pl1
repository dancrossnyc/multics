/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change calls to 'lex' and 'statement_type', for constant reference
     resolution fix.
                                                   END HISTORY COMMENTS */


/*	This procedure parses all statements occuring in begin blocks and procedures.
	It calls itself recursively to handle nested blocks.

Note well: The declarations and all statements after the label "get_next_statement" are copied in do_parse, and any changes
	made to either must be made to both.

	written by j.d. mills on 24 may 1968
	re-written by R.A. Freiburghouse on Aug 7, 1970 for version II
	modified by R.A. Barnes Feb 13, 1977 for option on begin stmt
	Modified on: May 24 1979 by PCK to implement options(packed_decimal)
	Modified on: 18 March 1980 by M. N. Davidoff to fix bug 1825.  Procedure_parse no longer sets
		pl1_stat_$cur_statement on end statements.  This is consistent with do_parse.  If procedure_parse
		sets pl1_stat_$cur_statement on end statements, and there is a begin block in an else clause
		with a multiple closure end statement, then a call to create_statement in if_parse will fail.
	Modified on: 21 March 1980 by M. N. Davidoff to print warnings for multiple closure end statements.
*/
/* format: style3 */
procedure_parse:
     proc (k, entry_ptr, our_conditions, father_block, his_end_ptr, block_type, our_return_flag);

dcl	block_type	bit (9) aligned;
dcl	(p, q, entry_ptr, label_ptr, end_ptr, cur_block, father_block, his_end_ptr)
			ptr;
dcl	(k, type)		fixed bin (15);
dcl	(conditions, our_conditions)
			bit (12) aligned;
dcl	(begin_entered, return_flag, our_return_flag)
			bit (1) aligned;

dcl	pl1_stat_$cur_statement
			ptr ext static;
dcl	pl1_stat_$check_ansi
			bit (1) aligned ext static;
dcl	(binary, bit, null) builtin;

dcl	action_index	(0:36) fixed bin (15) int static
			init (0, 0, 0, 1, 0, 10, 2, 10, 10, 0, 3, 0, 4, 8, 0, 10, 0, 10, 0, 5, 10, 0, 6, 10, 7, 10, 10,
			8, 0, 10, 0, 0, 0, 10, 0, 10, 9);

%include parse;
%include token_list;
%include block;
%include declare_type;
%include op_codes;
%include statement;
%include token;
%include block_types;
%include statement_types;
%include token_types;
%include list;

/* program */

	return_flag = our_return_flag;
	conditions = our_conditions;

	if block_type = on_unit			/* on begin block */
	then do;
		begin_entered = "1"b;
		cur_block = father_block;
		cur_block -> block.prefix = conditions;
		call begin_parse;
	     end;

	else if block_type = begin_block
	then do;
		begin_entered = "1"b;

		pl1_stat_$cur_statement, p = create_statement (begin_statement, father_block, entry_ptr, our_conditions);
		if entry_ptr ^= null
		then call declare_label (father_block, p, entry_ptr, by_explicit_context);

		p -> statement.root, cur_block = create_block (block_type, father_block);
		cur_block -> block.prefix = conditions;

		call begin_parse;

/* to prevent a fault which might occur if the first statement in the begin block required the inserting of another statement,
   we make the first statement of the begin block be a null */

		q = create_statement (null_statement, cur_block, null, conditions);
	     end;

	else do;					/* internal or external procedure block */
		begin_entered = "0"b;
		cur_block = create_block (block_type, father_block);
		cur_block -> block.prefix = conditions;
		call process_entry (k + 1, procedure_statement, cur_block, entry_ptr, conditions);
	     end;

get_next_statement:
	call lex(cur_block);                              /* places current statement in token_list(3000); */

get_statement_type:
	conditions = cur_block -> block.prefix;

	k = 1;					/* first token */
	type = statement_type (cur_block, k, label_ptr, conditions);
	go to action (action_index (type));

/*	***************** Statements requiring individual parsing procedures. ******** */

action (1):					/* begin statement	*/
	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, begin_block, return_flag);
	go to compound_parse_return;

action (10):
	call io_statement_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag, bit (binary (type, 9, 0)));
	goto compound_parse_return;


action (2):					/* declare statement */
	call declare_parse (k, cur_block, label_ptr);
	go to get_next_statement;
action (9):					/* default statement */
	call default_parse (k, cur_block, label_ptr);
	go to get_next_statement;

action (3):					/* do statement	*/
	call do_parse (k, label_ptr, conditions, cur_block, end_ptr, begin_entered, return_flag, "0"b);
	go to compound_parse_return;

action (5):					/* if statement	*/
	call if_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag);
	if end_ptr = null
	then go to get_statement_type;		/* non-null if eof */
	go to end_proc;

action (6):					/* on statement	*/
	call on_parse (k, label_ptr, conditions, cur_block, end_ptr);
	go to compound_parse_return;

action (7):					/* proc statement	*/
	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, internal_procedure, "0"b);

compound_parse_return:
	if end_ptr = null
	then go to get_next_statement;
	go to end_proc;

/*	***************** Statements which may be in error. ***************** */

action (8):					/* entry & return statements */
	if begin_entered
	then if type = binary (entry_statement, 9, 0)	/* entry statement */
	     then do;
		     call parse_error (411, null);	/* entry statement not allowed in begin block */
		     go to get_next_statement;
		end;
	     else if return_flag
	     then do;
		     call parse_error (412, null);	/* return statement not allowed in on-unit begin block */
		     go to get_next_statement;
		end;

	if type = binary (entry_statement, 9, 0)	/* entry statement */
	then do;
		k = k + 1;
		call process_entry (k, entry_statement, cur_block, label_ptr, conditions);
		go to get_next_statement;
	     end;

/*	***************** Statements all parsed in statement_parse.********************** */


action (0):
	call statement_parse (k, label_ptr, conditions, cur_block, type);
	go to get_next_statement;

/*	***************** Statement processed in line. ******************************* */

action (4):					/* end statement	*/
	k = k + 1;
	if t_table.type = identifier
	then do;
		end_ptr = token_list (k);		/* end <identifier>; */
		k = k + 1;
	     end;
	else end_ptr = null;
	if t_table.type ^= semi_colon
	then call parse_error (416, token_list (k));

end_proc:
	conditions = cur_block -> block.prefix;

	q = create_statement (end_statement, cur_block, null, conditions);
	q -> statement.root = create_operator (std_return, 0);

	if end_ptr ^= null				/* if "end <identifier>" closes block, */
	then do;					/* check for a match at beginning. */
		do p = entry_ptr repeat p -> list.element (1) while (p ^= null);
		     if end_ptr = p -> list.element (2)
		     then go to ck_labels;		/* match; ends us only */
		end;

		if type = binary (end_statement, 9)
		then call parse_error (377, null);

		call error (384, (cur_block -> block.main), null);

		his_end_ptr = end_ptr;		/* no match, ends this block and outer block(s), */
		entry_ptr = label_ptr;		/* any prefix labels get passed back up.  */
		return;
	     end;

ck_labels:
	his_end_ptr = null;				/* "end;" -- ends this block only, even if labels exist. */
	if label_ptr ^= null
	then do;
		call declare_label (cur_block, q, label_ptr, by_explicit_context);
		q -> statement.labels = label_ptr;
	     end;

	return;

/* parses begin stmt after "begin" */

begin_parse:
     proc;

	k = k + 1;
	if t_table.type = identifier & t_table.string = "options"
	then do;
		if pl1_stat_$check_ansi
		then call parse_error (355, token_list (k));
		k = k + 1;
		if t_table.type ^= left_parn
		then call parse_error (38, null);	/* bad syntax in options */
		else do;
			k = k + 1;
			if t_table.string = "non_quick"
			then do;
				cur_block -> block.why_nonquick.options_non_quick = "1"b;
				cur_block -> block.no_stack = "0"b;
				k = k + 1;
			     end;
			if t_table.type ^= right_parn
			then call parse_error (348, token_list (k));
						/* invalid option */
			k = k + 1;
		     end;
	     end;

	if t_table.type ^= semi_colon
	then call parse_error (410, null);		/* illegal syntax in begin block */
     end begin_parse;

     end procedure_parse;
