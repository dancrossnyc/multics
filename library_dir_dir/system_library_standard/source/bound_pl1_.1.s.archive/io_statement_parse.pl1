/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


io_statement_parse:	proc(k_index,entry_ptr,conditions_par,father_block_par,end_ptr_par,return_flag_par,statement_type_par);

				/*
				   forwards added as open keyword.
				   buffered,unbuffered deleted.
				*/




dcl	k_index fixed bin(15),
	statement_ptr ptr,
	father_block_par ptr,
	(stype_b9,statement_type_par) bit(9) aligned,
	(end_ptr_par,label_ptr,end_ptr,t,q,loc) ptr,
	(return_flag_par,return_flag) bit(1) aligned,
	(conditions,conditions_par) bit(12) aligned;



dcl	( addr,bit,char,fixed,hbound,null,substr ) builtin;


dcl	pl1_stat_$cur_statement ptr static ext;
dcl	pl1_stat_$check_ansi bit(1) aligned ext;
dcl	(arg,cur_block,dp,fnp,root_op,st,entry_ptr) ptr,
	(dpt,errp,locate_variable,previous_edit_ptr) ptr init(null),

	(options_allowed_index,iocode,error_number,i,k,n,open_index,operand_number) fixed bin(15),
	(data_index,operands,option_index,stype) fixed bin(15),

	get_put bit(1) aligned,
	try_else bit(1) aligned init("0"b),
	opcode bit(9) aligned,
	(fab2_bits, io_job,io_job_item,io_jobs_allowed) bit(36) aligned,

	tstring12 char(12) aligned,
	tstring char(8) aligned;


dcl	action_index(0:38) fixed bin(15) int static
	init ( 0,0,0,1,0,	7,5,7,7,0,	2,0,5,5,0,	5,0,7,6,3,
	       7,0,4,7,5,	7,7,5,0,7,	0,0,4,7,0,	7,5,5,0);

dcl	option_keyword(19) char(8) aligned int static
		init("file","string","skip","title","key",
		     "keyto","keyfrom","copy","line","linesize",
		     "set","into","ignore","from","page",
		     "pagesize","list","data","edit");


dcl	plio_options(19) fixed bin(15) int static
		init(1,2,11,36,21,
		     22,23,12,10,33,
		     24,25,26,27,9,
		     32,6,4,5);


	/* order of bits for io_job and options_allowed:

	file,stri,vary,	data,edit,list,
	get ,put, page,	line,skip,copy,
	x,   x,   x,   	read,writ,rewr,
	dele,loca,key,	kyto,kyfr,set,
	into,igno,from,	else,ref, x,
	x,   psiz,lsiz,	open,clos,title		*/


dcl	options_allowed(9) bit(36) aligned int static
		init(	"110111000011"b,
			"11011100111"b,
			"1000000000000000000011011100001"b,
			"100000000000000000000010001"b,
			"100000000000000000001000001"b,
			"100000000000000000001"b,
			"100000000000000000000011"b,
			"100000000000000000000000000000011001"b,
			"1"b   );


dcl	io_jobs_forbidden(19) bit(36) aligned int static init(

/*	 fsvdelgpplsc lurwrdlkkksiifer nploct	(see declaration of "option_keyword"
	 itaadieuaiko onereeoeyyengrle lsspli	for list down and  "order of bits
	 lrrtisttgnip claiwlcytfttnosf oiieot	for io_job and options_allowed" for
	 eiyatt  eepy kkdtrea or oome  kzznsl	list across)		*/

	"000111001111111111111111111111111111"b,	/* file */
	"000111000001"b,				/* string */
	"100111000011"b,				/* skip */
	"100000000000000000000000000000011000"b,	/* title */
	"1000000000000000000000011110001"b,		/* key */
	"1000000000000000000000011110001"b,		/* keyto */
	"1000000000000000000000010010000"b,		/* keyfrom */
	"110111001111"b,				/* copy */
	"100111001100"b,				/* line */
	"100000000000000000000000000000010001"b,	/* linesize */
	"1000000000000000000011100010001"b,		/* set */
	"1000000000000000000011000010001"b,		/* into */
	"1000000000000000000011000010001"b,		/* ignore */
	"100000000000000000001010001000"b,		/* from */
	"100111001100"b,				/* page */
	"100000000000000000000000000000001001"b,	/* pagesize */
	"111000001111"b,				/* list */
	"111000001111"b,				/* data */
	"111000001111"b	);			/* edit */




dcl	open_keyword(12) char(12) aligned int static
		init("print","input","output","update","stream",
		     "record","sequential","seql","direct","keyed",
		     "environment","env");

dcl	bit_index(12) fixed bin(15) int static
		init(5,6,7,8,9,  11,12,12,13,18  ,20,20);

dcl	label_index(19) fixed bin(15) int static
		init(1,2,2,2,2,1,2,1,2,2,1,1,2,1,3,2,4,4,4);




%include parse;
%include list;
%include block_types;
%include label;
%include block;
%include context_codes;
%include nodes;
%include declare_type;
%include operator;
%include op_codes;
%include statement;
%include statement_types;
%include symbol;
%include token_list;
%include token_types;

/* 		Build the IO statement  */


	k=k_index+1;
	stype_b9 =statement_type_par;
	cur_block=father_block_par;
	conditions=conditions_par;
	return_flag=return_flag_par;
	end_ptr_par=null;
	pl1_stat_$cur_statement,
	statement_ptr=create_statement(stype_b9,cur_block,entry_ptr,conditions);

	if stype_b9 ^= format_statement then
		if entry_ptr ^= null	/* LABEL on non-format statement */
		then call declare_label(cur_block,statement_ptr,entry_ptr,by_explicit_context);
		else;
	else	do;			/* FORMAT STATEMENT */
		t=statement_ptr->statement.labels;
		statement_ptr->statement.labels=null;
			do while (t^=null);
			q=t->list.element(2);
			if q->node.type=reference_node then call parse_error(169,null);
			else	do;
				q=create_symbol(cur_block,q,by_explicit_context);
				q->symbol.constant,
				q->symbol.format="1"b;
				q->symbol.initial=statement_ptr;
				end;
			t=t->list.element(1);
			end;

		if format_list_parse(k,cur_block,statement_ptr,fnp)
		then	if t_table.type^=semi_colon
			then	goto err428;
			else	goto ret;
		else	goto error_recover;
		end;


	if stype_b9=get_statement
	then do;
		opcode=get_file;
		operands=5;
		iocode=7;
		options_allowed_index=1;
	end;				else

	if stype_b9=put_statement
	then do;
		opcode=put_file;
		operands=5;
		iocode=8;
		options_allowed_index=2;
	end;				else /* (to make the label work)  */
comma_loop:
	if stype_b9=open_statement
	then do;
		fab2_bits="0"b;
		opcode=open_file;
		operands=6;
		iocode=34;
		options_allowed_index=8;
	end;				else

	if stype_b9=close_statement
	then do;
		opcode=close_file;
		operands=3;
		iocode=35;
		options_allowed_index=9;
	end;				else

	if stype_b9=read_statement
	then do;
		opcode=read_file;
		operands=4;
		iocode=16;
		options_allowed_index=3;
	end;				else

	if stype_b9=write_statement
	then do;
		opcode=write_file;
		operands=4;
		iocode=17;
		options_allowed_index=4;
	end;				else

	if stype_b9=rewrite_statement
	then do;
		opcode=rewrite_file;
		operands=4;
		iocode=18;
		options_allowed_index=5;
	end;				else

	if stype_b9=locate_statement
	then do;
		opcode=locate_file;
		operands=5;
		iocode=20;
		options_allowed_index=7;

		if t_table.type=identifier then
			do;
			locate_variable=token_list(k);
			k=k+1;
			end;
		else goto err257;

	end;				else

	if stype_b9=delete_statement
	then do;
		opcode=delete_file;
		operands=4;
		iocode=19;
		options_allowed_index=6;
	end;				else


	goto err288;

/* 		Set up the statement */



	statement_ptr->statement.root  ,
	root_op=create_operator(opcode,operands);



	get_put = stype_b9=get_statement | stype_b9=put_statement;
	io_job="0"b;
	substr(io_job,iocode,1)="1"b;	/* shows statement type */
	io_jobs_allowed=options_allowed(options_allowed_index);

	/*  */

options_loop:
	tstring=t_table.string;

	if t_table.type=identifier
	then 	do;
		io_job_item="0"b;
			do option_index=1 to hbound(option_keyword,1) while(tstring^=option_keyword(option_index));
			end;
		if option_index<=hbound(option_keyword,1)
		then	do;

			substr(io_job_item,plio_options(option_index),1)="1"b;
			if (io_job_item & io_jobs_allowed)="0"b then go to err239;
			if io_job_item & io_job then go to err247;
			io_job=io_job | io_job_item;

			io_jobs_allowed=io_jobs_allowed & io_jobs_forbidden(option_index);



			if option_index<3
			then	operand_number=2;		else

			if option_index<8
			then	operand_number=3;		else

			if option_index<15
			then	operand_number=1;

			else	operand_number=4;



				/*
				   THIS TABLE TO BE USED BY
				   IO-SEMANTICS !!!!!!!!!!!

				operand(1):	copy,line,linesize,set,into,ignore,from
				   operand(2):	file,string,(ref)
				   operand(3):	key,keyto,keyfrom,skip,title
				   operand(4):	pagesize,data_spec,locate's variable
				   operand(5):	fab2_bits
				   operand(last)=
				   operand(operands)=io_job OR fab2_bits
					*/

			k=k+1;
			goto option_label(label_index(option_index));
			end;


/*  OPEN STATEMENT  */
		if stype_b9 ^= open_statement then goto err288;

		tstring12=t_table.string;
		do open_index=1 to hbound(open_keyword,1) while(tstring12^=open_keyword(open_index));
		end;

		if open_index>hbound(open_keyword,1) then goto err288;

		substr(io_job_item,bit_index(open_index),1)="1"b;
		if io_job_item & fab2_bits then goto err247;
		fab2_bits = fab2_bits | io_job_item;
		k=k+1;
		if open_index=11 | open_index=12	/* environment(interactive)  */
		then	do;
			if pl1_stat_$check_ansi
			     then call parse_error(355,token_list(k-1));
			if t_table.type^=left_parn then goto err197;
			k=k+1;
			if t_table.string = "interactive" then substr(fab2_bits,14,1) = "1"b; 
				else if t_table.string = "stringvalue" then substr(fab2_bits,17,1) = "1"b; 
					else goto err197;
			k=k+1;
			if t_table.type^=right_parn then goto err197;
			k=k+1;
			end;
		goto options_loop;
		end;

/* 		Let's get out now */



	if t_table.type=semi_colon
	|  t_table.type=comma
	then	do;
exit:		if get_put
		then	if (io_job & "000111001110"b)="0"b
			then	goto err254;		/* GET and PUT requires either SKIP or LINE or PAGE or DS */

		if  root_op->operator.operand(2)=null	/* FILE or (REF) required for non-stream */
		then	do;
			if ^get_put then goto err245;
			if substr(io_job,7,1)
			then	root_op->operator.operand(2)=
				create_token("sysin",identifier);
			else	root_op->operator.operand(2)=
				create_token("sysprint",identifier);
			substr(io_job,1,1)="1"b;
			end;


		if stype_b9=write_statement & root_op->operator.operand(1)=null
		then	goto err241;


		if stype_b9=read_statement then
			do;
			if substr(io_job,24,3)="000"b then  goto err448;
					/* into, set, ignore : one must appear  */
			if substr(io_job,26,1) then if substr(io_job,21,2)^="00"b then goto err449;
					/* ignore cannot have key or keyto */
			end;

		if stype_b9=locate_statement
		then	root_op->operator.operand(4)=locate_variable;

		if substr(io_job,1,1)	/* file context */
		then	call context((root_op->operator.operand(2)),cur_block,file_name_context);
		else 	if substr(io_job,2,1)
			then	if io_job & "00000000111"b then goto err239;

		if substr(io_job,12,1)	/* copy-file */
		then	call context((root_op->operator.operand(1)),cur_block,file_name_context);

		if substr(io_job,24,1)	/* set */
		then	call context((root_op->operand(1)),cur_block,pointer_context);

		if stype_b9=open_statement
		then	root_op->operator.operand(5)=create_token(char(fab2_bits,36)||"b",bit_string);

		root_op->operator.operand(operands)=
		create_token(char(io_job,36)||"b",bit_string);

		if t_table.type=comma
		then	do;
			if stype_b9^=open_statement
			then if stype_b9^=close_statement
			      then goto err288;
	
			pl1_stat_$cur_statement,
			statement_ptr=create_statement(stype_b9,cur_block,null,conditions);
			k=k+1;
			goto comma_loop;
			end;



		go to ret;



		end;
	go to err1;	/* mysterious token */

			/*      */

option_label(1):

	if t_table.type^=left_parn
	then do;
		if option_index ^=8 /* copy */ then go to err237;
		root_op->operator.operand(1)=create_token("sysprint",identifier);
		goto options_loop;
	end;



	k=k+1;
	arg = reference_parse(k,cur_block);
	if arg = null then go to err240;

	goto attach_arg;

option_label(2):

	if t_table.type^=left_parn
	then do;
		if option_index^=3			/*   skip   */
		then goto err237;

		goto option_label(3);
	end;

	k=k+1;
	arg = expression_parse(k,cur_block);
	if arg = null then go to err290;

	goto attach_arg;

option_label(3):

ck_labels:
	if option_index=2 then		/* string option adjustments */

		do;
		if stype_b9=put_statement & root_op->operator.operand(2)->node.type=operator_node
		then goto err243;
	
		if stype_b9=get_statement
		then	root_op->operator.op_code=get_string;
		else	root_op->operator.op_code=put_string;
		end;

	goto options_loop;

			/*      */

attach_arg:
	root_op->operator.operand(operand_number)=arg;

locate_right_parn:
	if t_table.type^=right_parn then goto err238;

	k=k+1;
	goto ck_labels;

option_label(4):
	k=k-1;
	if ^get_put then goto err289;
		data_index=1+8*(option_index-17);	/* for historical reasons */

	if stype_b9=get_statement
	then	if data_index=1
		then	opcode=get_list_trans;	else

		if data_index=9
		then	opcode=get_data_trans;

		else	opcode=get_edit_trans;

	else	if data_index=1
		then	opcode=put_list_trans;	else

		if data_index=9
		then	opcode=put_data_trans;	else

		if data_index=17
		then	opcode=put_edit_trans;

		else	goto err288;

	k=k+1;

	if data_index=9 & t_table.type^=left_parn
	then do;
		root_op->operator.operand(4)=create_operator(opcode,2);
		goto options_loop;
	end;

edit_loop:
	if ^data_list_parse(k,cur_block,dp) then goto error_recover;
	if dp->operator.op_code=do_fun then goto err293;

	if data_index<17
	then do;
		dpt=create_operator(opcode,2);
		dpt->operator.operand(1)=dp;

		root_op->operator.operand(4)=dpt;
	end;
	else do;
		if ^format_list_parse(k,cur_block,(null),fnp) then goto error_recover;

		dpt=create_operator(opcode,3);
		dpt->operator.operand(1)=dp;
		dpt->operator.operand(2)=fnp;

		if previous_edit_ptr^=null
		then	previous_edit_ptr->operator.operand(3)=dpt;
		else	root_op->operator.operand(4)=dpt;

		previous_edit_ptr=dpt;
		if t_table.type=left_parn then goto edit_loop;
	end;

	goto options_loop;



			/*      */

err1:
	error_number=1;
	goto err_list;

err197:
	error_number=197;
	goto err;

err237:
	error_number=237;
	goto err_list;

err238:
	error_number=238;
	goto err_list;

err239:
	error_number=239;
	goto err;

err240:
	error_number=240;
	goto err_list;

err241:
	error_number=241;
	goto err;

err243:
	error_number=243;
	goto err;

err245:
	error_number=245;
	goto err;

err247:
	error_number=247;
	goto err;

err254:
	error_number=254;
	goto err;

err257:
	error_number=257;
	goto err;

err288:
	call parse_error(288,token_list(k));
	k=k+1;
	goto options_loop;

err289:
	error_number=289;
	goto err;

err290:
	error_number=290;
	errp=arg;
	goto err_list;

err293:
	error_number=293;
	goto err;

err428:
	error_number=428;
	errp=null;
	goto err;

err448:
	error_number=448;
	goto err;

err449:
	error_number=449;
	goto err;


err_list:
	errp=token_list(k);

err:
	call parse_error(error_number,errp);

error_recover:
	statement_ptr->statement.statement_type=null_statement;
	statement_ptr->statement.root=null;



ret:
	return;


	end io_statement_parse;
