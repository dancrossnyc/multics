/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change calls to 'lex' and 'statement_type', for constant reference
     resolution fix.
                                                   END HISTORY COMMENTS */


if_parse:
     procedure (k, entry_ptr, our_conditions, father_block, his_end_ptr, our_return_flag);

/* This procedure parses if statements and else clauses.
   It always returns having called lex to look at the next statement. */

/* Original by:	J. D. Mills	4 June 1968
   to pl1:			26 July 1969
   Re-written by:	P. Green		25 October 1970 for Version II

   Modified:	29 May 1979 by R. A. Barnes to fix bug 1829 (WARNING 56 by
   	if <expr> then stop; else ...)
   Modified 790823 by PG to perform goto optimization only if -optimize was specified.
*/

/* Variables

   if		ptr to if statement.
   expr		ptr to if statement expression.
   loc		ptr to label used for jump around then body.
   location	ptr to token of loc.
   t		temporary ptr.		*/

/* builtins */

dcl	(bit, binary, null, string, substr)
			builtin;

/* automatic */

dcl	(k, then_type, type, n)
			fixed bin (15);
dcl	(t, if, do, entry_ptr, label_ptr, father_block, cblock, end_ptr, his_end_ptr, p, q, expr, loc, location)
			ptr;
dcl	(conditions, our_conditions)
			bit (12) aligned;
dcl	(our_return_flag, return_flag, else, then_goto_optimized)
			bit (1) aligned;
dcl	(bit_type, jump_if_false, jump_if_true)
			bit (9);

/* external static */

dcl	(
	pl1_stat_$cur_statement
			ptr,
	pl1_stat_$optimize	bit (1) aligned,
	pl1_stat_$profile	bit (1) aligned
	)		external static;

/* internal static */

dcl	rel_to_jump	(4:9) bit (9) internal static initial ("001011001"b,
						/* less_than	-> jump_if_ge */
			"001011000"b,		/* greater_than	-> jump_if_le */
			"001010111"b,		/* equal		-> jump_if_ne */
			"001010110"b,		/* not_equal	-> jump_if_eq */
			"001010101"b,		/* less_or_equal	-> jump_if_gt */
			"001010100"b);		/* greater_or_equal	-> jump_if_lt */

dcl	action_index	(0:36) fixed bin (15) int static
			init (0, 0, 0, 1, 0, 7, 5, 7, 7, 0, 2, 0, 5, 5, 0, 5, 0, 7, 6, 3, 7, 0, 4, 7, 5, 7, 7, 5, 0, 7,
			0, 0, 4, 7, 0, 7, 5);

/* include files */

%include parse;
%include token_list;
%include token;
%include token_types;
%include op_codes;
%include block;
%include block_types;
%include statement;
%include statement_types;
%include nodes;
%include operator;
%include list;
%include label;
%include declare_type;

/* program */

	then_goto_optimized, else = "0"b;
	end_ptr = null;
	cblock = father_block;
	return_flag = our_return_flag;
	conditions = our_conditions;

	pl1_stat_$cur_statement, if = create_statement (if_statement, cblock, entry_ptr, conditions);

	if entry_ptr ^= null
	then call declare_label (cblock, if, entry_ptr, by_explicit_context);

	k = k + 1;
	expr = expression_parse (k, cblock);

	if expr = null
	then do;
		call parse_error (432, null);
		loc = null;

		do while ("1"b);
		     if t_table.type = semi_colon
		     then do;
			     label_ptr = null;
			     type = binary (null_statement);
			     go to action (0);
			end;

		     if t_table.string = "then"
		     then do;
			     k = k + 1;
			     go to get_statement_type;
			end;
		     k = k + 1;
		end;
	     end;

	bit_type = ""b;

	if expr -> node.type = operator_node
	then bit_type = expr -> operator.op_code;

	if substr (bit_type, 1, 5) = "00100"b		/* relational class */
	then do;					/* change relational to jump op */
		jump_if_false, expr -> operator.op_code = rel_to_jump (binary (substr (bit_type, 6, 4), 4));
		jump_if_true = bit_type | "000010000"b;
	     end;
	else do;
		q = create_operator (jump_false, 2);
		q -> operator.operand (2) = expr;
		expr = q;
		jump_if_true = jump_true;
		jump_if_false = jump_false;
	     end;

	loc = create_label (cblock, null, by_compiler);	/* label is used to jump around then clause */
	expr -> operand (1) = loc;
	if -> statement.root = expr;
	location = loc -> label.token;

	if t_table.string = "then"
	then k = k + 1;
	else call parse_error (431, null);

get_statement_type:
	conditions = cblock -> block.prefix;
	then_type, type = statement_type (cblock, k, label_ptr, conditions);
	go to action (action_index (type));

/* 	***************** Statements requiring individual parsing procedures. ******** */

action (1):					/* begin statement */
	call procedure_parse (k, label_ptr, conditions, cblock, end_ptr, begin_block, return_flag);
	go to end_up;

action (2):					/* do statement    */
	call do_parse (k, label_ptr, conditions, cblock, end_ptr, return_flag, return_flag, "0"b);
	go to end_up;

action (3):					/* if statement    */
	call if_parse (k, label_ptr, conditions, cblock, end_ptr, return_flag);
	go to if_end_up;

action (4):					/* on statement    */
	call on_parse (k, label_ptr, conditions, cblock, end_ptr);
	go to end_up;

/*	***************** Statements in error. *************************************** */

action (5):					/* declare,end,entry,format,procedure & possibly return stmts */
	if type = binary (return_statement, 9)
	then if return_flag
	     then n = 412;
	     else go to action (0);
	else n = 430;
	call parse_error (n, null);
	go to end_up;

/* 	***************** Statements all parsed in statement_parse. ****************** */

action (0):
	call statement_parse (k, label_ptr, conditions, cblock, type);
	go to end_up;

/*	***************** Statements processed in-line ******************************* */

action (6):					/* go to statement in then clause */
	if label_ptr ^= null | conditions ^= cblock -> block.prefix | ^pl1_stat_$optimize
	then go to action (0);

	if t_table.string = "goto"
	then k = k + 1;
	else do;
		k = k + 1;

		if t_table.string ^= "to"
		then call parse_error (446, null);
		else k = k + 1;
	     end;

	if expr = null
	then expr = create_operator ((jump_if_true), 2);
	else expr -> op_code = jump_if_true;

	expr -> operand (1) = reference_parse (k, cblock);

	if expr -> operand (1) = null
	then call print (446);
	else if t_table.type ^= semi_colon
	then call parse_error (1, null);

	then_goto_optimized = "1"b;
	goto end_up;

action (7):
	call io_statement_parse (k, label_ptr, conditions, cblock, end_ptr, return_flag, bit (binary (type, 9)));
	goto end_up;

end_up:
	if end_ptr = null
	then call lex(cblock);			/* ^=null ==> end of block */

/* If the statement following the if statement has a label on it, e.g.
   	if e1 then label: ....
   we have to insert a null statement with 0 statement id before it.  This is
   done to prevent problems if the semantic translator has to expand the
   labelled statement into several statements.  This must also
   be done if the profile option is used. */

if_end_up:
	q = if -> statement.next;
	if q ^= null
	then if q -> statement.labels ^= null | (^else & pl1_stat_$profile)
	     then do;
		     q = create_statement (null_statement, if, null, conditions);
		     string (q -> statement.source_id) = "0"b;
		end;

	if else
	then go to process_else_clause;		/* second time thru */

	if ^then_goto_optimized
	then do;

/* following code is executed after the then clause is parsed. */

		q = create_statement (null_statement, cblock, null, conditions);

/* following code sets the id of the statement holding
   the label to the id of the statement preceding it.  This is
   done so that the following statement can be expanded into several
   statements.  We can't just set id of statement to 0 because that
   fouls up the optimizer */

		string (q -> statement.source_id) = string (q -> statement.back -> statement.source_id);

		if loc ^= null
		then do;
			t, q -> statement.labels = create_list (2);
			loc -> label.statement = q;
			t -> list.element (2) = location;
		     end;
		else go to exit;
	     end;

	if end_ptr ^= null				/* unsatisfied labelled END statement */
	then go to exit;

	k = 1;
	if t_table.string ^= "else"
	then go to exit;				/* no else clause; return */

	k = k + 1;
	if t_table.type ^= left_parn
	then go to call_st1;

/*  else  (  */

	if token_list (k + 3) -> token.type ^= colon
	then go to call_st1;			/* could be assignment or condition prefix list */

/*  else  (  <anything>  )  :  */

	k = k + 1;

	if t_table.type = identifier			/* it's a CPL in an else clause */
	then do;
		k = 2;
		else = "1"b;			/* this is the case that statement type */
		go to call_st;			/* can't handle.  */
	     end;

/* it must be a label array named "else" ! */

call_st1:
	k = 1;
call_st:
	conditions = cblock -> block.prefix;
	type = statement_type (cblock, k, label_ptr, conditions);

	if type = binary (else_clause, 9)
	then do;
		if else
		then call print (150);		/* no if stmnt before else */

		else = "1"b;
		k = k + 1;
		go to call_st;
	     end;

	if ^else
	then go to exit;

/* Now that we know we have an else clause, we check the type of statement
   in it--certain combinations may be optimized slightly.	*/

	if type ^= binary (goto_statement, 9) | label_ptr ^= null | conditions ^= cblock -> block.prefix
	     | ^pl1_stat_$optimize
	then go to action (action_index (type));

	if then_goto_optimized
	then go to action (0);

	if t_table.string = "goto"
	then k = k + 1;
	else do;
		k = k + 1;

		if t_table.string ^= "to"
		then call parse_error (446, null);
		else k = k + 1;
	     end;

	expr -> operator.op_code = jump_if_false;
	expr -> operand (1) = reference_parse (k, cblock);

	if expr -> operand (1) = null
	then call print (446);
	else if t_table.type ^= semi_colon
	then call parse_error (1, null);
						/* delete null statement. */
	q -> statement.back -> statement.next = null;	/* since this is the last statement on the chain. */
	cblock -> block.end_main = q -> statement.back;	/* reset block ptr */
	loc -> label.statement = null;

	if end_ptr = null
	then call lex(cblock);

	goto exit;

/* following code is executed after the else clause is parsed. */

/* When control reaches here, the tree is as follows:

  if->      ----  if_statement
            |           |
            |           |
            |     then body
            |           |
            |           |     q->  - - - - - - go to statement
	  |	    |			|
   t->      ----> null statement		|
	              |			|
		    |			|
		    |			|
	          else body			|
		    |			|
  p->		    |    < - - - - - - - - null statement

   We must insert a goto statement after the "then" body which
   transfers control around the else body. This action is not done
   if the then body does not exist, or if it is a return statement 
   or a stop statement.  This action is also not done if the "then"
   body is a noniterative do-group whose end statement has only one
   label (which therefore must be compiler created), and which has
   a return statement, a goto statement, or a stop statement preceding
   the end statement.	*/

process_else_clause:
	t = loc -> label.statement;
	if t = null
	then go to exit;

	if (then_type = binary (return_statement, 9)) | (then_type = binary (stop_statement, 9))
	then go to exit;

	p = t -> statement.back;
	bit_type = p -> statement.statement_type;

	if (bit_type = return_statement) | (bit_type = goto_statement) | (bit_type = stop_statement)
	then go to exit;

	if then_type = binary (do_statement, 9)
	then do;
		do = if -> statement.next;
		do while (do -> statement.statement_type ^= do_statement);
						/* skip any null stmts */
		     do = do -> statement.next;	/* to get to the do stmt */
		end;
		if do -> statement.root -> operator.operand (3) = null
						/* if no do_spec operator */
		then if p -> statement.labels -> list.element (1) = null
						/* if one label */
		     then do;			/* we know p -> end stmt */
			     bit_type = p -> statement.back -> statement.statement_type;
			     if (bit_type = return_statement) | (bit_type = goto_statement)
				| (bit_type = stop_statement)
			     then go to exit;
			end;
	     end;

	if label_ptr = null & type = binary (null_statement, 9)
	then go to exit;

	q = create_statement (goto_statement, p, null, conditions);

/* we have to set the id of the goto and the null statement following
   it to be the same as the id of the last statement in the then group.
   This is necessary to prevent difficulties if the semantic translator
   has to expand the first statement of else group into several statements */

	string (t -> statement.source_id), string (q -> statement.source_id) = string (p -> statement.source_id);

	t, q -> statement.root = create_operator (jump, 1);
	q, t -> operand (1) = create_label (cblock, null, by_compiler);

/* make a label for the newly created jump operator */

	p = create_statement (null_statement, cblock, null, conditions);

/* following code sets the id of the statement holding
   the label to the id of the statement before it.  This is
   done so that the following statement can be expanded into several
   statements.  We can't just set id of statement to 0 because
   that fouls up the optimizer */

	string (p -> statement.source_id) = string (p -> statement.back -> statement.source_id);

	q -> label.statement = p;
	t, p -> statement.labels = create_list (2);	/* again, t is a temporary ptr. */
	t -> list.element (2) = q -> label.token;	/* fish out name from label node */

exit:
	entry_ptr = label_ptr;
	his_end_ptr = end_ptr;
	return;

print:
     proc (m);

dcl	m		fixed bin (15);

	call parse_error (m, null);
	if -> statement.root = null;
	if -> statement.statement_type = null_statement;

     end print;

     end /* if_parse */;
