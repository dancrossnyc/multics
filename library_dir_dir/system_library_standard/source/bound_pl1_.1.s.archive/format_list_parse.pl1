/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-08-23,RWaters), approve(88-08-23,MCR7915), audit(88-09-28,Huen),
     install(88-10-12,MR12.2-1163):
     Trap invalid 'a' format items which cause runtime errors.
                                                   END HISTORY COMMENTS */


format_list_parse:	proc(k,cur_block,st,format_tree) returns(bit(1)aligned);

/* Modified 770705 by PG to fix 1640 (letting "i" get thru as a valid format) */
/* Modified 770706 by PG to be a structured program */
/* Modified 18/08/88 by RWaters to check for proper 'a' formats in get stmnts */

/* parameters */

dcl (	k fixed bin (15),
	cur_block ptr,
	st ptr,
	format_tree ptr
	) parameter;

/* automatic */

dcl	(c, expr (3), item, last, lparen, p, pic_symbol, rptr) ptr,
	(i, indx, ksaved, n, pic_code, num_ops) fixed bin (15),
	formatcode bit(9) aligned,
	b_type char (1);

/* builtins */

dcl	(hbound, lbound, null, substr) builtin;

/* internal static */

dcl	format_names (17) char (6) aligned internal static initial (
	"a", "f", "e", "x", "skip", "page", "line", "col", "column", "b", "b1", "b2",
	"b3", "b4", "c", "p", "r");

/* include files */

%include parse;
%include declare_type;
%include operator;
%include op_codes;
%include picture_image;
%include reference;
%include statement;
%include token_list;
%include token;
%include token_types;
%include symbol;

/* program */

	ksaved = k;
	if t_table.type ^= left_parn
	then go to err278;

	last = null;
	k = k + 1;

next_item:
	rptr = null;
	if t_table.type = dec_integer | t_table.type = left_parn
	then do;
		if t_table.type = dec_integer
		then	rptr = token_list (k);
		else do;
			k = k + 1;
			rptr = expression_parse (k, cur_block);
			if rptr = null then go to err278;

			if t_table.type ^= right_parn then goto err278;
		     end;

		k = k + 1;

		if t_table.type =left_parn
		then	if format_list_parse (k, cur_block, (null), item)
			then do;
				lparen = create_operator (l_parn, 3);
				lparen -> operator.operand (3) = item;

				item = lparen;
				go to end_action2;
			     end;
			else goto err278;
	     end;

	if t_table.type ^= identifier
	then go to err278;

	do indx = lbound (format_names, 1) to hbound (format_names, 1) while (t_table.string ^= format_names (indx));
	end;

	if indx > hbound (format_names, 1)
	then go to err298;

	k = k + 1;
	go to action (indx);

/* Set the operator code for each format operator */

action (1):					/* a format */
	formatcode = a_format;
	go to action2 (indx);

action (2):					/* f format */
	formatcode = f_format;
	go to action2 (indx);

action (3):					/* e format */
	formatcode = e_format;
	go to action2 (indx);

action (4):					/* x format */
	formatcode = x_format;
	go to action2 (indx);

action (5):					/* skip format */
	formatcode = skip_format;
	go to action2 (indx);

action (6):					/* page format */
	formatcode = page_format;
	go to action2 (indx);

action (7):					/* line format */
	formatcode = line_format;
	go to action2 (indx);

action (8):					/* col format */
action (9):					/* column format */
	formatcode = column_format;
	go to action2 (indx);

action (10):					/* b format */
action (11):					/* b1 format */
	formatcode = b_format;
	go to action2 (indx);

action (12):					/* b2 format */
action (13):					/* b3 format */
action (14):					/* b4 format */
	formatcode = bn_format;
	go to action2 (indx);

action (15):					/* c (complex) format */
	formatcode = c_format;
	go to action2 (indx);

action (16):					/* p (picture) format */
	formatcode = picture_format;
	go to action2 (indx);

action (17):					/* r (remote) format */
	formatcode = r_format;
	go to action2 (indx);

/* Now parse the (sometimes) optional arguments to each format operator */

action2 (1):					/* a (char) format */
	if t_table.type = left_parn
	then go to merge_xr;

	/* get edit (foo)(a) is illegal */
	/* it must be get edit (foo)(a(size)); */
	if token_list (1)->t_table.string = "get" 
	then do;
	     call parse_error (391, token_list (k));
	     goto ret0;
	end;
	item = create_operator (formatcode, 2);
	go to end_action2;


action2 (5):					/* skip format */
action2 (10):					/* b (bit) format */
action2 (11):					/* b1 (bit) format */
	if t_table.type = left_parn
	then go to merge_xr;

	item = create_operator (formatcode, 2);
	go to end_action2;

action2 (4):					/* x (spaces) format */
action2 (7):					/* line format */
action2 (8):					/* col format */
action2 (9):					/* column format */
action2 (17):					/* r (remote) format */
	if t_table.type ^= left_parn
	then go to err278;

merge_xr:
	k = k + 1;
	item = create_operator (formatcode, 3);
	if formatcode = r_format
	then item -> operator.operand (3) = reference_parse (k, cur_block);
	else item -> operator.operand (3) = expression_parse (k, cur_block);

	if item -> operator.operand (3) = null
	then go to err278;

	if t_table.type ^= right_parn
	then go to err278;

	k = k + 1;
	go to end_action2;

action2 (2):					/* f format */
action2 (3):					/* e format */
	if t_table.type ^= left_parn
	then go to err278;

	k = k + 1;
	expr (1) = expression_parse (k, cur_block);
	if expr (1) = null
	then go to err278;

	do n = 2 to 3 while (t_table.type = comma);
	     k = k + 1;
	     expr (n) = expression_parse (k, cur_block);
	     if expr (n) = null
	     then go to err278;
	end;
	n = n - 1;

	if t_table.type ^= right_parn
	then go to err278;

	k = k + 1;
	item = create_operator (formatcode, 2 + n);
	item -> operator.operand (3) = expr (1);

	if n > 1
	then do;
		item -> operator.operand (4) = expr (2);

		if n > 2
		then item -> operator.operand (5) = expr (3);
	     end;

	go to end_action2;

action2 (6):					/* page format */
	item = create_operator (formatcode, 2);
	go to end_action2;

action2 (15):					/* c (complex) format */
	if ^format_list_parse (k, cur_block, (null), item)
	then go to err278;

	c = create_operator (c_format, 4);
	c -> operator.operand (3) = item;

	if item -> operand (1) = null
	then c -> operator.number = 3;
	else do;
		c -> operator.operand (4) = item -> operator.operand (1);
		if c -> operator.operand (4) -> operator.operand (1) ^= null
		then go to err427;

		item -> operator.operand (1) = null;
	     end;

	item = c;

	do i = 3 to item -> operator.number;
	     if item -> operand (i) -> op_code = picture_format
	     then if item -> operand (i) -> operand (3) -> reference.symbol -> symbol.initial -> picture_image.type = 24
		then go to err170;
	end;
	go to end_action2;

action2 (12):					/* b2 format */
action2 (13):					/* b3 format */
action2 (14):					/* b4 format */
	b_type = substr (token_list (k - 1) -> token.string, 2, 1);
	if t_table.type ^= left_parn
	then num_ops = 3;
	else num_ops = 4;

	item = create_operator (formatcode, num_ops);
	item -> operator.operand (3) = create_token (b_type, dec_integer);

	if num_ops = 4
	then do;
		k = k + 1;
		item -> operand (4) = expression_parse (k, cur_block);
		if item -> operator.operand (4) = null
		then go to err278;

		if t_table.type ^= right_parn
		then go to err278;

		k = k + 1;
	     end;
	go to end_action2;

action2 (16):					/* p format */
	if t_table.type ^= char_string
	then go to err297;

	item = create_operator (formatcode, 3);
	pic_symbol = create_symbol (cur_block, null, by_compiler);
	call declare_picture (t_table.string, pic_symbol, pic_code);
	item -> operand (3) = pic_symbol -> symbol.general;
	call free_node (pic_symbol);

	if pic_code ^= 0
	then do;
		call parse_error (pic_code, token_list (k));
		go to ret0;
	     end;

	item -> operator.operand (3) -> reference.symbol -> symbol.allocate = "1"b;
	k = k + 1;

end_action2:
	if last = null
	then p = item;
	else last -> operator.operand (1) = item;

	item -> operator.operand (2) = rptr;
	last = item;

	if t_table.type = comma
	then do;
		k = k + 1;
		goto next_item;
	     end;

	if t_table.type ^= right_parn
	then go to err278;

	k = k + 1;

	if st ^= null
	then st -> statement.root = p;

	format_tree = p;

	return ("1"b);

err297:
	call parse_error (297, null);			/* Syntax error in a picture format item. */
	goto ret0;

err298:
	call parse_error (298, token_list (k));		/* Syntax error. $ is not a valid format keyword. */
	go to ret0;

err278:
	call parse_error (278, token_list (k));		/* Syntax error in a format-list */
	goto ret0;

err170:
	call parse_error (170, null);			/* A complex format item must contain e, f, or a numeric-picture */
	goto ret0;

err427:
	call parse_error (427, null);			/* Syntax error in a complex format-list */

ret0:
	k=ksaved;
	return("0"b);

     end /* format_list_parse */;
