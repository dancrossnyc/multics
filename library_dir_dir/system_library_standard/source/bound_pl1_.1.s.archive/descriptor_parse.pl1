/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
This procedure is called to parse description lists.
Description lists occur in three contexts:
	entry(description_list)	in the entry attribute
	returns(description_list)	in the returns attribute
	when(description_list)	in the when clause of the generic attribute

Input:
	k is on the left parenthesis

Output:
	k is on the right parenthesis
	the return pointer is null if () else
	the return pointer points to the first list(2) item.
	list.element(1) points to the major symbol
	list.element(2) points to the next list(2) item or is null.
	the major symbol son pointer points to the sons or is null.
	the sons, if any, are properly linked, i.e. the father, brother, and son
	pointers are set correctly.
	The names associated with the symbols are constructed as follows:
	if token is null, a compiler generated name is used.
	if token is not null, its string concatenated with char(n),
	where n is the major symbol number, concatenated with "]" is used.
*/

descriptor_parse: proc(cblock,token,k) returns(ptr);

/* Modified 780814 by PG to work as specified for null lists */

/* parameters */

dcl	(cblock ptr,
	token ptr,
	k fixed bin (15)) parameter;

/* automatic */

declare	(name,listptr,previous_listptr,previous_descriptor,p,s)	pointer;
dcl	n fixed bin (15);
dcl	level fixed bin(8);
dcl	in_generic bit(1) aligned;

/* builtins */

dcl	null builtin;

/* include files */

%include parse;
%include symbol;
%include token_list;
%include token_types;
%include declare_type;
%include list;

/* program */

	n=0;
	k = k + 1;				/* step over left_parn */
	listptr,previous_descriptor = null;

	do while (t_table.type ^= right_parn);
	     n=n+1;
	     if t_table.type = comma			/* no attributes */
	     then call declare_parse$abort(199,null);

	     name = token;
	     in_generic = (name = null);
	     level = 0;

	     if in_generic & t_table.type = asterisk	/* no attributes for this descriptor */
	     then do;
		     s = null;
		     k = k + 1;
		end;
	     else do;
		     if t_table.type = dec_integer		/* a structure level number */
		     then do;
			     level = token_to_binary(token_list(k));
			     k=k+1;
			end;

		     if ^in_generic
		     then if substr (name -> t_table.string, name -> t_table.size, 1) ^= "]"
			then name = create_token (name -> t_table.string || bindec$vs ((n)) || "]", identifier);

		     s = create_symbol(cblock,name,by_compiler);
		     s->symbol.level = level;
		     call link_symbol(previous_descriptor,s);	/* perform appropriate structure linking */
		     k=k-1;
		     call attribute_parse(cblock,s,k,in_generic);
		end;

	     if level <= 1
	     then do;
		     p = create_list(2);
		     p->list.element(1) = s;

		     if listptr = null
		     then listptr = p;
		     else previous_listptr->list.element(2) = p;
		     previous_listptr = p;
		end;

	     if t_table.type = comma
	     then k = k + 1;
	     else if t_table.type ^= right_parn
		then call declare_parse$abort (1, null);
	end;
	return (listptr);

%include link_symbol;

     end /* descriptor_parse */;
