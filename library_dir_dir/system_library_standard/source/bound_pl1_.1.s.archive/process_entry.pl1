/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	Modified on:	23 June 1975 by EEW  for new entry sequence
	Modified:	18 Feb 1977 by RAB for -check_ansi
	Modified:	30 Dec 1977 by RAB fo options(separate_static)	
	Modified: 15 Feb 1978 by PCK to implement options(main)
	Modified:	6 Apr 1978 by RAB to fix 1725
	Modified:	24 August 1978 by RAB to make check_ansi more informative
	Modified: 24 May 1979 by PCK to implement options(packed_decimal)
	Modified: 3 September 1981 by EBush for temporary extension of 
		max parameters per proceedure/entry to 512 */

process_entry: proc(k,stmnt_type,cblock,entries,conditions);

dcl	(cblock,entries,p,q,e,return,s,t) ptr;
dcl	(k,n,i) fixed bin(15);
dcl	(stmnt_type,st_type) bit(9) aligned;
dcl	(reducible,variable_arg) bit(1) aligned;
dcl	pl1_stat_$cur_statement ptr ext static;
dcl	pl1_stat_$unwind label external static;
dcl	pl1_stat_$root ptr ext static;
dcl	(pl1_stat_$check_ansi,pl1_stat_$options_packed_dec) bit(1) aligned ext static;
dcl	pl1_stat_$validate_proc ptr ext static;
dcl	cg_static_$support bit(1) aligned ext static;
dcl	cg_static_$separate_static bit(1) aligned ext static;
dcl	stack(513) ptr;
dcl	conditions bit(12) aligned;

dcl	(null,string) builtin;

%include parse;
%include token_list;
%include context_codes;
%include nodes;
%include token;
%include statement_types;
%include statement;
%include cross_reference;
%include symbol;
%include declare_type;
%include operator;
%include token_types;
%include op_codes;
%include list;
%include block;
%include block_types;






begin:
	if entries = null
	     then call parse_error(266,null);
	pl1_stat_$unwind=make_entry;			/* in case descriptor_parse finds any errors */
	reducible, variable_arg = "0"b;
	n=0;
	return=null;
	st_type = stmnt_type;
	if t_table.type ^= left_parn then go to options;
	if token_list(k+1)->token.type = right_parn
		then do;
			k=k+2;				/* this is a null arg list	*/
			go to options;
		     end;
circut:	k=k+1;
	if t_table.type ^= identifier then call print(35);
	n=n+1;
	if n>512 then call print(34);
	stack(n)=token_list(k);
	call context(stack(n),cblock,parameter_context);
	k=k+1;
	if t_table.type = comma then go to circut;
	if t_table.type ^= right_parn then call print(35);
	k=k+1;
options:
	if t_table.type = semi_colon then go to make_entry;
	if t_table.type ^= identifier then call print(36);
	if t_table.string = "returns"
		then do;
			k=k+1;
			if t_table.type ^= left_parn then call print(37);
			return = descriptor_parse(cblock,
				create_token(entries->list.element(2)->token.string||"[return value]",
						identifier),k);
			if return ^= null
			then do;
				if return->list.element(2) ^= null then call print(37);
				return = return->list.element(1);
				return->symbol.parameter = "1"b;
				n=n+1;
				stack(n) = return->symbol.token;
			     end;
			if t_table.type ^= right_parn then call print(37);
			k=k+1;
			go to options;
		     end;
	if t_table.string = "recursive" | t_table.string = "irreducible" | t_table.string = "irred"
		then do;
			if pl1_stat_$check_ansi
			then if t_table.string ^= "recursive"
			     then call print_warning(354,token_list(k));

			k=k+1;
			go to options;
		     end;
	if t_table.string = "reducible" | t_table.string = "red"
		then do;
			if pl1_stat_$check_ansi
			     then call print_warning(354,token_list(k));

			k=k+1;
			reducible="1"b;
			go to options;
		     end;
	if t_table.string = "options"
		then do;
			if pl1_stat_$check_ansi
			     then call print_warning(355,(token_list(k)));

			k=k+1;
			if t_table.type ^= left_parn then call print(38);
opt_circuit:
			k=k+1;
			if t_table.string = "validate"
				then do;
					if pl1_stat_$validate_proc ^= null then call print(39);
					k=k+1;
					if t_table.type ^= left_parn then go to bad;
					k=k+1;
					if t_table.type ^= identifier then call print(40);
					t = token_list(k);
					k=k+1;
					if t_table.type ^= right_parn then go to bad;
						s = create_symbol((pl1_stat_$root->block.son),t,by_explicit_context);
						s->symbol.cross_references = create_cross_reference();
						string(s->symbol.cross_references->cross_reference.source_id) = string(pl1_stat_$statement_id);
					s->symbol.entry,
					s->symbol.external,
					s->symbol.allocate = "1"b;
					pl1_stat_$validate_proc = s;
					k=k+1;
				     end;
			else if t_table.string = "rename"
				then do;
					if ^reserve$rename_parse(k) then go to make_entry;
				     end;
				else if t_table.string = "non_quick"
				      | t_table.string = "no_quick_blocks"
				     then do;
					cblock -> block.why_nonquick.options_non_quick = "1"b;
					cblock -> block.no_stack = "0"b;
					k = k + 1;
					end;
				     else if t_table.string = "support"
					then do;
					     cg_static_$support = "1"b;
					     k = k + 1;
					     end;
					else if t_table.string = "variable"
					     then do;
						variable_arg = "1"b;
						cblock -> block.why_nonquick.options_variable = "1"b;
						cblock -> block.no_stack = "0"b;
						k = k + 1;
						end;
					     else if t_table.string = "separate_static"
						then do;
						     cg_static_$separate_static = "1"b;
						     k = k + 1;
						     end;
						else if t_table.string = "main" | t_table.string = "packed_decimal"
						     then do;
							if stmnt_type^=procedure_statement
							     then do;
								call parse_error(368,token_list(k));
								go to make_entry;
								end;
							if cblock->block.block_type^=external_procedure
							     then do;
								call parse_error(369,token_list(k));
								go to make_entry;
								end;

							if t_table.string = "main"
							then cblock -> block.options_main = "1"b;
							else pl1_stat_$options_packed_dec = "1"b;

							k = k+1;
							end;
			if t_table.type = comma then go to opt_circuit;
			if t_table.type ^= right_parn then go to bad;
			k=k+1;
			go to options;
		     end;

bad:
	call parse_error(41,token_list(k));			/* invalid option	*/

/* create an entry statement for each entry label.  If returns(...) was given then
   each entry is a function, otherwize they are subroutines.	*/

make_entry:
	do e = entries repeat e->list.element(1) while(e^=null);
	     q=create_list(2);
	     q->list.element(2)=e->list.element(2);
	     if q->element(2)->node.type=reference_node
	     then do;
		call parse_error(270,null);
		return;
	     end;
	     pl1_stat_$cur_statement  ,
	     p=create_statement(st_type,cblock,q,conditions);
	     p->statement.root,q = create_operator(std_entry,n);
	     do i=1 to n;
		q->operand(i) = stack(i);
	     end;

/* Declare each name as an entry constant.				*/

	     q=create_symbol((cblock->block.father),(e->list.element(2)),by_explicit_context);
	     if variable_arg
	        then if return = null
		   then q -> symbol.variable_arg_list = "1"b;
		   else call parse_error(483,null);
	     if return ^= null
		then do;
			q->symbol.returns ="1"b;
			q->symbol.dcl_size = return;
			return->symbol.passed_as_arg = "1"b;
		     end;
	     q->symbol.entry,
	     q->symbol.constant="1"b;
	     if cblock->block.block_type ^= external_procedure then q->symbol.internal="1"b;
	     q->symbol.reducible=reducible;
	     q->symbol.equivalence = cblock;
	     q->symbol.initial = p;		/* set initial field to point to entry statement */
	     string(q->symbol.source_id) = string(pl1_stat_$statement_id);
	     cblock->block.number_of_entries = cblock->block.number_of_entries + 1;
	     st_type = entry_statement;
	end;

/* error message subroutine	*/

print: proc(m);

dcl	m fixed bin(15);

	call parse_error(m,null);
	go to make_entry;
	end;


print_warning: proc(m,p);

dcl	m fixed bin(15);
dcl	p ptr;

	call parse_error(m,p);

	end;


	end process_entry;
