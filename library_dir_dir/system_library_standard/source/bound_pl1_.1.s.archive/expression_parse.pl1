/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


expression_parse:
	procedure(i,cblock) recursive returns(pointer);


/*	Parameters	*/

dcl	i		fixed bin(15),
	r		ptr,
	cblock		ptr;

dcl	(addr,binary,fixed,index,null,search,substr) builtin;


/*	Automatic stuff.	*/

dcl	(j, k, si, n)	fixed bin(15),
	(eloc,oploc)	fixed bin(15),
	ch		char(1),
	opindex		fixed bin(5),
	q		ptr,
	type		bit(9) aligned,
	(r2,r3)		ptr,
	stack(0:12)	ptr;

/*	Constants.	*/

dcl	precedence(0:18) fixed bin(15) internal static
	initial(	0,	/* illegal */
		5,	/* +, plus */
		5,	/* -, minus */
		6,	/* *, asterisk */
		6,	/* /, slash */
		7,	/* **, expon */
		7,	/* ^, not */
		2,	/* &, and */
		1,	/* |, or */
		4,	/* ||, cat */
		3,	/* =, eq	*/
		3,	/* ^=, ne */
		3,	/* <, lt */
		3,	/* >, gt */
		3,	/* <=, le */
		3,	/* >=, ge */
		3,	/* ^>, ngt */
		3,	/* ^<, nlt */
		3);	/* =, assignment */

dcl	op_table(0:18) bit(9) aligned internal static options(constant)
	initial(	""b,		/* illegal */
		"000010001"b,	/* +, plus */
		"000010010"b,	/* -, minus */
		"000010011"b,	/* *, asterisk */
		"000010100"b,	/* /, slash */
		"100100100"b,	/* **, expon */
		"000100100"b,	/* ^, not */
		"000100001"b,	/* &, and */
		"000100010"b,	/* |, or */
		"000100101"b,	/* ||, cat */
		"001000110"b,	/* =, eq */
		"001000111"b,	/* ^=, ne */
		"001000100"b,	/* <, lt */
		"001000101"b,	/* >, gt */
		"001001000"b,	/* <=, le */
		"001001001"b,	/* >=, ge */
		"001001000"b,	/* ^>, ngt */
		"001001001"b,	/* ^<, nlt */
		"001000110"b);	/* =, assignment ( equal relational ) */

/*	t and tlist are used to get better accessing to token_list in
	inner procedure "primitive".			*/

dcl	t		ptr internal static,
	tlist(3000)	ptr based(t);

%include parse;
%include token_list;
%include token;
%include nodes;
%include operator;
%include op_codes;
%include token_types;
/*		This procedure parses expressions using a simple operator
	precedence technique.  The syntax parsed is

		<expression> ::= <primitive> [<operator> <primitive>]...

	where the nth operator and its operands are stacked if the
	n+1st operator has higher precedence.  The primitive is parsed by
	the internal entry called "primitive".  The primitives include
	parenthesized expressions, prefix operators, and exponentiation. */

	t = pl1_stat_$token_list_ptr;
	k = i;
	si = 0;
	stack(0) = primitive(k);

fetchop:	type = t_table.type;

checkop:	if type & is_delimiter
	then if type <= assignment
	then do;

		if type = not then goto fail;

		if si ^= 0		/* If past first op then check prec. */
		then do;

			opindex = binary(substr(stack(si-1) -> token.type,5,5));
			if precedence(opindex) >=
			   precedence(fixed(substr(type,5,5),5)) then go to unstack;

		     end;

stackop:		si = si + 1;
		stack(si) = token_list(k);
		si = si + 1;
		k = k + 1;
		stack(si) = primitive(k);

		go to fetchop;

	     end;

	if si = 0 then go to succeed;

unstackop:opindex = binary(substr(stack(si-1) -> token.type,5,5));

unstack:	r2 = stack(si-2);
	r3 = stack(si);

	if opindex = 9
	then do;

	     /* attempt to optimize cat (||) */

	     if r2 -> node.type = token_node
	     then if r3 -> node.type = token_node
	     then if r2 -> token.type & r3 -> token.type & is_constant
	     then do;
		q = evaluate(op_table(9),r2,r3);
		go to pop;
		end;
	     end;

	if opindex >= 4
	then do;

	     /* operator not + - or * */

make_op:	     q = create_operator((op_table(opindex)),3);
	     q -> operator.operand(2) = r2;
	     q -> operator.operand(3) = r3;

pop:	     si = si - 2;
	     stack(si) = q;

	     go to checkop;
	     end;

	if r2 -> node.type ^= token_node then goto make_op;
	if r3 -> node.type ^= token_node then goto make_op;

	/* Check for constants on both sides of operator */

	if (r2 -> token.type & is_arithmetic_constant) ^= is_arithmetic_constant then goto make_op;
	if r2 -> token.type >= i_fixed_bin then goto make_op;

	if (r3 -> token.type & is_arithmetic_constant) ^= is_arithmetic_constant then goto make_op;

	if r2 -> token.loc ^= r3 -> token.loc then go to make_op;	/* require both to have same "p" attribute */

	/* Check for "complex" constant */

	if r3 -> token.type >= i_fixed_bin
	then do;
	     if opindex >= 3 then goto make_op;

	     oploc = search(substr(r3->token.string,2),"+-");	/* This block of code is to ensure	*/
	     if oploc ^= 0 then do;				/* that r3 points to an imaginary,	*/
		eloc = index(r3->token.string,"e");		/* not complex, number.		*/
		if eloc = 0 then goto make_op;
		if oploc < eloc then goto make_op;
		if search(substr(r3->token.string,eloc+2),"+-") ^= 0 then goto make_op;
		end;

	     /* form new token representing the complex constant */

	     if opindex = 1		/* addition */
	     then if substr(r3 -> token.string,1,1) = "-"
		then do;
		     j = 2;
		     ch = "-";
		     end;
		else do;
		     ch = "+";
		     if substr(r3 -> token.string,1,1) = "+" then j = 2; else j = 1;
		     end;
	     else if substr(r3 -> token.string,1,1) = "-"
		then do;
		     j = 2;
		     ch = "+";
		     end;
		else do;
		     ch = "-";
		     if substr(r3 -> token.string,1,1) = "+" then j = 2; else j = 1;
		     end;

	     q = create_token$protected (r2 -> token.string || ch || substr (r3 ->token.string, j), (r3 -> token.type), (r2 -> token.loc));
	     goto pop;
	     end;

	/* have constant operands, evalute expression if possible */

	q = evaluate((op_table(opindex)),r2,r3);
	goto pop;

fail:	r = null;
	go to ret;

succeed:	r = stack(0);
	i = k;

ret:	return(r);

/*	Primitive parses prefix expressions, exponentiation operators,
	and parenthesized expressions.		*/

primitive: proc(i) returns(ptr);

dcl	(p,q)	ptr,
	i	fixed bin(15),
	(ttype,
	  type)	bit(9) aligned;

	type = tlist(i) -> token.type;

	if type = plus
	then do;
		i = i + 1;
		p = primitive(i);
		if p -> node.type = token_node
		then do;
			ttype, type = p -> token.type;
			if (type & is_arithmetic_constant) = is_arithmetic_constant
			then	if substr(p->token.string,1,1) = "-" | substr(p->token.string,1,1) = "+"
				then q = p;
				else q = create_token$protected ("+" || p -> token.string, ttype, (p -> token.loc));
			else go to plusop;
		     end;
		else do;
plusop:
			q = create_operator((prefix_plus),2);
			q->operator.operand(2) = p;
		     end;

	     end;

	else if type = minus
	then do;

		i = i + 1;
		p = primitive(i);
		if p -> node.type = token_node
		then do;

			ttype, type = p -> token.type;

			if (type & is_arithmetic_constant) = is_arithmetic_constant
			then	if substr(p->token.string,1,1) = "-"
				then q = create_token$protected (substr (p -> token.string, 2), ttype, (p -> token.loc));
				else	if substr (p -> token.string, 1, 1) = "+"
				  	then q = create_token$protected ("-" || substr (p -> token.string, 2), ttype, (p -> token.loc));
					else q = create_token$protected ("-" || p -> token.string, ttype, (p -> token.loc));
			else go to negop;
		     end;
		else do;

negop:			q = create_operator((negate), 2);
			q -> operator.operand(2) = p;

		     end;

	     end;

	else if type = not
	then do;

		i = i + 1;
		q = create_operator((not_bits), 2);
		q -> operator.operand(2) = primitive(i);

	     end;

	else if type = left_parn
	then do;

		i = i + 1;
		q = expression_parse(i,cblock);
		if q = null then go to phail;
		if tlist(i) -> token.type ^= right_parn then go to phail;

		i = i + 1;
	     end;

	else if type & is_constant
	then do;

		q = tlist(i);
		i = i + 1;

	     end;

	else do;
		q = reference_parse(i,cblock);
		if q = null then go to phail;
	     end;

	if tlist(i) -> token.type = expon
	then do;

		i = i + 1;
		p = q;
		q = create_operator((exp), 3);
		q -> operator.operand(2) = p;
		q -> operator.operand(3) = primitive(i);

	     end;

	return(q);

phail:	go to fail;

	end primitive;
	end expression_parse;
