/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


declare_label:	proc(cblock,cstatement,clabel,dcltype);

	/* same in VERSION 1 and VERSION 2 */


dcl	(cblock,cstatement,clabel) ptr,
	(d,q,t) ptr,

	(n,value) fixed bin(15),

	array bit(1) aligned,
	dcltype bit(3) aligned;

dcl	(max,min,null) builtin;

%include language_utility;
%include block;
%include label;
%include list;
%include nodes;
%include reference;
%include token;
%include label_array_element;

begin:
	q=clabel;
	do while(q^=null);
		array="0"b;
		value = 0;
		t=q->list.element(2);
		if t->node.type=reference_node
		then do;
			array="1"b;
			value = token_to_binary((t->reference.offset->list.element(1)));
			t=t->reference.symbol;	/* get token pointer */
		end;
		d=t->token.declaration;
		do while(d^=null);
			if d->label.block_node = cblock & d->node.type = label_node
				then do;
					if d->label.array ^= array
					then call parse_error(31,t);

					else if ^ array
					then call parse_error(54,t);

					else do;
					     d->label.low_bound = min(value,d->label.low_bound);
					     d->label.high_bound = max(value,d->label.high_bound);
					     call push_array_element;
					     end;

					goto next_label;
				     end;
			d=d->label.multi_use;
		end;
		d=create_label(cblock,t,dcltype);

		if array
		then do;
		     d -> label.array = "1"b;
		     d -> label.low_bound, d -> label.high_bound = value;
		     call push_array_element;
		     end;
		else d -> label.statement = cstatement;

next_label:
		q=q->list.element(1);
	end;


push_array_element:	proc;

dcl	lae ptr;

	/* associate this label array element with this statement */

	lae = create_list(3);
	lae -> label_array_element.node_type = label_array_element_node;
	lae -> label_array_element.statement = cstatement;
	lae -> label_array_element.value = value;
	lae -> label_array_element.next = d -> label.statement;
	d -> label.statement = lae;

	end;


	end declare_label;
