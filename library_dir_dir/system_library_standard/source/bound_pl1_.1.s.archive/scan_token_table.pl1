/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* SCAN_TOKEN_TABLE - Program to check for duplicate declarations. */

/* Modified Dec 1978 by David Spector to fix bug 1784 */

scan_token_table:
     procedure;

/* automatic */

dcl	(p,q,q1,q2,q3) pointer;
dcl	i fixed bin;

/* builtins */

dcl	(hbound, lbound, null) builtin;

/* include files */

%include declare_type;
%include language_utility;
%include nodes;
%include pl1_token_hash_table;
%include symbol;
%include token;

/* program */

	do i = lbound (hash_table, 1) to hbound (hash_table, 1);

	     do p = hash_table (i) repeat (p -> token.next) while (p ^= null);

		do q1 = p->token.declaration repeat q1->symbol.multi_use while(q1^=null);
		     q3 = q1;
		     if q1->symbol.dcl_type = by_compiler then go to loop1;

		     do q2 = q1->symbol.multi_use repeat q2->symbol.multi_use while(q2^=null);
			if q2->symbol.dcl_type = by_compiler then go to loop2;
	
			if q1->symbol.block_node ^=
			   q2->symbol.block_node then go to loop2;
	
			if q1->node.type ^= q2->node.type		/* label node vs. symbol node */
			then do;
				if q1->node.type = symbol_node
				then q = q1;
				else q = q2;
				q3 = q;
				if q->symbol.level <= 1 then go to multi_dcl;	/* label vs. scalar or level 1 name */
				go to loop2;
			     end;
	
			if q1->symbol.father ^= q2->symbol.father then go to loop2;
			q3 = q1;
	
multi_dcl:
			if ^q3->symbol.param_desc
			then	call error_$no_text(76, q3 -> symbol.source_id, q3);
			go to next_token;
loop2:
		     end;

loop1:
		end;
	
next_token:
	     end;

	end;

	return;

     end /* scan_token_table */;
