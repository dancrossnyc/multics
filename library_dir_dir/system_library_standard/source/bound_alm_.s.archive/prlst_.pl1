/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Rewritten to ignore alignment and not put out padding characters.
                                                   END HISTORY COMMENTS */


/* prlst_ procedure to put a remark into the ALM listing. A newline
   is added to each line. This is used by all of ALM except prwrd_
   which does it himself for efficiency.

   Totally recoded by Richard Gray, 2/14/85, (alm 6) to remove word
   alignments and padding characters.  Note: lstlen used to be
   current length of listing component in words, now the length is
   in characters. */

prlst_:	procedure(remark);
dcl	remark char(*);
dcl	(length, substr) builtin;
dcl	(strstart, strlen, strmaxlen) fixed bin(21);
dcl	listing_segment char(strlen) based(list);
dcl	ec fixed bin(35);

dcl	eb_data_$list_component fixed bin external;
dcl	eb_data_$listing_max_length fixed bin(19) external;
dcl	eb_data_$who_am_I char(12) external;
dcl	error_table_$segknown fixed bin(35) external;
dcl	utils_$abort external entry;
dcl	com_err_ entry options(variable);
dcl	msf_manager_$get_ptr entry(ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl	NL char(1) int static options(constant) init("
");

%include segnfo;

%include lstcom;

%include alm_options;

	if tnolst ^= 0 then return; /* no listing wanted */
	strstart = lstlen + 1;
	strlen = length(remark) + 1;
	strmaxlen = 4*eb_data_$listing_max_length - lstlen;
	if strlen > strmaxlen then do;
		lstlen = lstlen + strmaxlen;
		substr(listing_segment, strstart, strmaxlen) = substr(remark, 1, strmaxlen);
		call new_list_seg;
		lstlen = strlen - strmaxlen;
		substr(listing_segment, 1, lstlen) = substr(remark || NL, strmaxlen+1, lstlen);
		return;
	  end;
	lstlen = lstlen + strlen;
	substr(listing_segment, strstart, strlen) = remark || NL;
	return;

new_list_seg:	entry;
	eb_data_$list_component = eb_data_$list_component + 1;
	call msf_manager_$get_ptr(eb_data_$segnfo.list_fcb, eb_data_$list_component, "1"b, eb_data_$segnfo.list, 0, ec);
	eb_data_$segnfo.lstlen = 0;
	if ec ^= 0 then  if ec ^= error_table_$segknown then do;
		if tquietsw ^= 1 then call com_err_(ec, eb_data_$who_am_I, "Listing segment.");
		call utils_$abort;
	  end;
end prlst_;
