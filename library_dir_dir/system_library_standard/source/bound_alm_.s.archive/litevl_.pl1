/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


litevl_:
	procedure (ad, admod, txtern);

/* Modified 740820 by PG to fix ancient bug (from the FORTRAN version, apparently) whereby
   parameters of the itsevl and itbevl entries were used as temporaries by the code of other entries! */
/*	Modified on 08/06/73 at 12:56:08 by R F Mabee.
	by R F Mabee in June 1973 to add BCD literals.
	by R F Mabee on 22 November 1972 to allow user-defined internal symbols as base names in ITB.
	by R F Mabee on 2 November 1972 to fix bugs with parentheses around literals.
	by R F Mabee on 13 June 1972 to change followon pointer format and repair clobbered source.
	by RHG on 22 Sept 1970 to check for nl or; during aci literal
*/

/* LITEVL:
	routine to evaluate literal constants in variable field. */
/*	octal, decimal, and vfd literals are evaluated and tabulated */
/*      litevl also checks for dl or du modifier for immediate operand. */
/*      for this reason decevl (called by litevl) must return type */
/*      of literal evaluated. */


/* INCLUDE FILES USED BY LITEVL */

% include concom;
% include varcom;
% include codtab;
% include erflgs;
% include lclit;
% include alm_options;

/* END OF THE INCLUDE FILES */
/**/

/* PARAMETERS */

declare xrslts (8) fixed bin(35);

/* EXTERNAL ENTRIES USED BY LITEVL */

declare	utils_$putach ext entry (fixed bin (26), fixed bin (26), fixed bin (26)),
	getbit_$getbit_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)),
	getid_$getid_ ext entry,
	inputs_$next ext entry,
	utils_$makins ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	modevl_$modevl_ ext entry (fixed bin (26)) returns (fixed bin (26)),
	expevl_$expevl_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	table_$table_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	vfdevl_$vfdevl_ ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	octevl_$octevl_ ext entry (fixed bin (26)) returns (fixed bin (26)),
	decevl_$decevl_ ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	utils_$ls ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	utils_$rs ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	utils_$and ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	glpl_$setblk ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	glpl_$storr ext entry (fixed bin (26), fixed bin (26)) ,
	glpl_$crh ext entry (fixed bin (26)) returns (fixed bin (26)),
	glpl_$clh ext entry (fixed bin (26)) returns (fixed bin (26)),
	glpl_$cwrd ext entry (fixed bin) returns (fixed bin),
	glpl_$glwrd ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26));


/* EXTERNAL DATA USED BY LITEVL */

declare	(eb_data_$jba,	eb_data_$jbi,	eb_data_$jbm,	eb_data_$jbo,
	eb_data_$jbv,	eb_data_$ibtb,	eb_data_$ibts,	eb_data_$iasc,
	eb_data_$ibtp,	eb_data_$jbh,
	eb_data_$ifxd,	eb_data_$iint,	eb_data_$ioct,	eb_data_$ivfd,
	eb_data_$imach,	eb_data_$iitb,	eb_data_$iits,	eb_data_$ierr ) ext fixed bin (35);

 declare	eb_data_$bcd_table (0:127) ext unaligned bit (6);

declare	 eb_data_$lavptr ext ptr;
 

/* AUTOMATIC DATA USED BY LITEVL */

declare	 (ad,	admod,	ipair (2)) fixed bin (26);
declare (ipmod,	iprht,	ipval,	j,	junk,	k,	lcptr,	nprime,	tbscl, lcptrx,
	txtern,	 rleft, xn,	bcdlet,	type,	flags,	i,	iaddr,	ipbas ) fixed bin (26);
dcl iplft fixed bin (26);
declare	parentheses fixed binary;	/* Count of nesting parentheses to be paired at end. */

declare	1 literal aligned,
	2 (block (2),rslts (8)) fixed bin (26);

declare	 n fixed bin (26) defined block (2);

declare	its_or_itb_entry bit (1) aligned initial ("0"b);	/* make sure it always has a good value */

/* BASED OVERLAYS USED BY LITEVL */

declare	1 word based aligned,
	  2 left   bit (18) unaligned,
	  2 right  bit (18) unaligned;

 declare	bcd (1:6) based unaligned bit (6);




/*      main entry, get next character and branch on literal type. */
	tbscl = 0 /*FALSE*/;	/*This was not in the Fortran -- tres, tres mal code */
	parentheses = 0;
label_100:
	call inputs_$next;
	lcptr = 0;
	if (brk (1) = inum | brk (1) = iplus | brk (1) = iminus | brk (1) = ipoint)
	then do;
		/* must be a decimal or aci literal */

		n = decevl_$decevl_ (rslts (1), type);
		go to label_400;
	     end;

	if (brk (1) = ilet) then goto label_300;
	if (brk (1) ^= ilpar) then goto label_370;
	parentheses = parentheses + 1;
	goto label_100;

/*      break is letter, branch on type. */
label_300:
	if (brk (2) = eb_data_$jba) then goto label_310;
	if (brk (2) = eb_data_$jbo) then goto label_320;
	if (brk (2) = eb_data_$jbv) then goto label_330;
	if (brk (2) = eb_data_$jbm) then goto label_335;
	if brk (2) = eb_data_$jbh then goto label_bcd;

	if (brk (2) ^= eb_data_$jbi) then goto label_305;
	call getid_$getid_;
	if (brk (1) ^= ilpar) then goto label_370;
	parentheses = parentheses + 1;
	if (sym (1) = eb_data_$ibtb) then goto label_340;
	if (sym (1) = eb_data_$ibts) then goto label_355;
	if sym (1) = eb_data_$ibtp then goto label_340;
label_305:
	goto label_370;

/*      routine for aci literal. */
label_310:
	n = 1;
	type = eb_data_$iasc;
	rslts (1) = 0;
	do i = 1 to 4;
	     call inputs_$next;
	     if brk (1) = inl then goto label_400;
	     call utils_$putach (rslts (1),i,brk (2));
	end;

	call inputs_$next;
	goto label_400;

/*	routine for bcd literal. */
label_bcd:
	n = 1;
	type = eb_data_$iasc;
	rslts (1) = 0;
	do i = 1 to 6;
		call inputs_$next;
		if brk (1) = inl then goto label_400;
		addr (rslts (1)) -> bcd (i) = eb_data_$bcd_table (brk (2));
		end;
	call inputs_$next;
	goto label_400;

/*      routine for octal literals. */
label_320:
	n = octevl_$octevl_ (rslts (1));
	type = eb_data_$ioct;
	goto label_400;

/*      routine for variable field literals. */
label_330:
	n = vfdevl_$vfdevl_ (rslts (1),flags);
	lcptr = flags;
	type = eb_data_$ivfd;
	goto label_400;

/*      machine literals not yet coded. */
label_335:
	goto label_370;

/*      entry for itb type literal. */
itbevl:	entry (ipair, xrslts);

	its_or_itb_entry = "1"b;			/* note that we came in here */

	tbscl = 1;	/*TRUE*/
label_340:
	iprht = mitb;
	type = eb_data_$iitb;
	call getid_$getid_;
	if (^ (sym (1) ^= 0  &  brk (1) = icomma)) then goto label_350;
	do i = 1 to 8;
	     if (sym (1)  ^=  symbas (i)) then goto label_345;
	     iplft = 32768* (i-1);
	     goto label_360;
label_345:
	end;

	if table_$table_ (iserch,sym (1),iplft,clint,junk) ^= 0 then goto label_357;
label_350:
	junk = expevl_$expevl_ (0, iplft, iaddr );
	if (iaddr ^= 0) then prntr = 1;	/*TRUE*/
label_357:
	iplft = 32768*iplft;
	goto label_360;

/*      entry for its type literals. */
itsevl:	entry (ipair, xrslts);

	its_or_itb_entry = "1"b;			/* note that we came in here */

	tbscl = 1;	/*TRUE*/
label_355:
	iprht = mits;
	type = eb_data_$iits;
	call getid_$getid_;
	junk = expevl_$expevl_ (0, iplft, iaddr );
	if (iaddr ^= 0) then prntr = 1;	/*TRUE*/
	if tnewmachine ^= 0 then iplft = utils_$and (iplft, (fivsev));
label_360:
	if (brk (1) ^= icomma) then goto label_370;
	call getid_$getid_;
	junk = expevl_$expevl_ (0, ipval, iaddr );
	rleft = 0;
	if (iaddr  =  0) then goto label_361;
	ipval = ipval + glpl_$clh (iaddr+3);
	if (tbscl ^= 0  |  iaddr  =  0) then goto label_363;
	rslts (1) = 0;
	rslts (2) = glpl_$glwrd (iaddr,0);
	lcptr = glpl_$setblk (rslts (1),2);
	goto label_361;
label_363:
	call getbit_$getbit_ (iaddr,ipbas,/* ipb29 */  0 ,rleft);
label_361:
	ipmod = 0;
	if (brk (1) ^= icomma) then goto label_362;
	ipmod = modevl_$modevl_ (brk (1) );
label_362:

	rslts (1) = glpl_$glwrd (iplft,iprht);
	rslts (2) = utils_$makins (ipbas,ipval,0,/* ipb29 */  0 ,ipmod);
	n = 2;
	if (tbscl = 0) then goto label_400;
label_365:
	ipair (1) = rslts (1);
	ipair (2) = rslts (2);
	rslts (1) = 0;
	rslts (2) = glpl_$glwrd (rleft,0);
	go to return_from_its_itb;

/*	illegal literal type. */
label_370:
	n = 1;
	rslts (1) = 0;
	rslts (2) = 0;
	rleft = 0;
	type = eb_data_$ierr;
	prntf = 1;	/*TRUE*/
	if (tbscl ^= 0) then goto label_365;
	rslts (1) = 0;
	rslts (2) = 0;
	call inputs_$next;
	goto label_400;

/*	entry to define a literal in ext vector. */
litasn:	entry (ad, xrslts, xn, lcptrx );

	lcptr = lcptrx;
	n = xn;
	if (n > 8) then n = 8;
	do i = 1 to n;
	     rslts (i) = xrslts (i);
	end;
	goto label_500;


/*	literal evaluated, check for du or dl modifier. */
label_400:
	admod = 0;
	do while (parentheses > 0 & brk (1) = irpar);	/* Pair off parends. */
		call inputs_$next ();
		parentheses = parentheses - 1;
		end;
	if (brk (1) ^= icomma | txtern = 0 | parentheses ^= 0) then goto label_500;
	admod = modevl_$modevl_ (brk (1) );
	if (n >= 2) then goto label_500;
	if (admod ^= mdu  &  admod ^= mdl) then goto label_500;
	if (type = eb_data_$imach | type = eb_data_$ivfd | type = eb_data_$ioct
	| type = eb_data_$iint | type = eb_data_$ifxd) then goto label_410;
		ad = utils_$rs (rslts (1),18);
		goto label_420;
label_410:

		ad = utils_$and (rslts (1),sixsev);
label_420:

	n = 0;
	goto label_700;


/*	search literal list for this literal and assign if not there. */
/*	funny business because of equivalence between n and block (2) */
/*	and desire to put lcptr in left half of block (2). */
label_500:
	j = litlst;
	nprime = n;
	block (2) = glpl_$glwrd (lcptr,n);
	litc = glpl_$crh (lplit+1);
label_510:
	if (j = 0) then goto label_540;
	if (glpl_$cwrd (j+1) ^= nprime) then goto label_530;
do_520:	do k = 1 to nprime;
	if (glpl_$cwrd (j+k+1) ^= rslts (k)) then goto label_530;
label_520:	end do_520;
		ad = glpl_$clh (j);
	goto label_700;
label_530:
	j = glpl_$crh (j);
	goto label_510;

/*	not found in list, assign this literal. */
label_540:
	if (nprime > 1  &  mod (litc,2) ^= 0) then litc = litc+1;
	block (1) = utils_$ls (litc,18);
	j = glpl_$setblk (block (1),nprime+2);
	ndltls -> word.right = addr (j ) -> word.right;
	ndltls = ptr (eb_data_$lavptr, j );
	ad = litc;
	litc = litc+nprime;


/*	final return section. */
label_700:
	call glpl_$storr (lplit+1,litc);

	/* if we came in the itbevl or itsevl entries, we must simulate passing "rslts" by reference.
	   (since rslts is not a parameter to all entry points, but is used as a temporary in all
	   entry points, we cannot just make it a real parameter. sigh!) */

return_from_its_itb:
	if its_or_itb_entry
	then do;
		xrslts (1) = rslts (1);
		xrslts (2) = rslts (2);
	     end;

	return;

	end litevl_;
