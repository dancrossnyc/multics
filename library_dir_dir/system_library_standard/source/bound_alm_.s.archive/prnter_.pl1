/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


prnter_:	procedure ( line ) ;

  
	/* Last modified on 4/3/77 by Greenberg for macro entries. */
	/* Last modified on 11/23/72 at 02:29:18 by R F Mabee. Removed superfluous "abandoning assembly" message. */
	/* Modified by RHG on 17 September 1970 for new listing package */
  
	/* this procedure calls prlst to generate the comment and then writes 
	  the comment into the user's output stream */

declare line char (*)  ;

declare ioa_ external entry options (variable);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_output ptr external;

dcl  p1_macroerr_debug_sw static init ("0"b)bit (1);
dcl  nl char (1) static options (constant) init ("
");

declare	eb_data_$abort_assembly external static label;
declare	eb_data_$who_am_I external static char(12);
declare	com_err_ external entry options (variable);
  
declare prlst_$prlst_ external entry (char(*)) ;

	call prlst_$prlst_(line) ;

	call ioa_(line) ;

	return;

no_storage:	entry ;
		/* for GLPL usage */
	call com_err_(0, eb_data_$who_am_I, "list of available storage has been exhausted") ;

	go to abort_it ;


phsmsg:	entry ;
		/* for OBJECT usage */

	call com_err_(0,eb_data_$who_am_I, "Phase error while generating the object segment") ;

	go to abort_it ;



no_end_card:	entry ;

	call com_err_(0,eb_data_$who_am_I, "End statement missing.") ;

	go to abort_it ;

abort1:	entry ;

	/* for general usage */

abort_it:	goto eb_data_$abort_assembly;

macro_error:  entry (console_remark,  listing_remark);

dcl (console_remark, listing_remark) char (*);

	if tpass2 = 0 & ^p1_macroerr_debug_sw then return;

	if console_remark ^= "" & tquietsw = 0 then do;
	     call iox_$put_chars (iox_$user_output, addr (console_remark), length (console_remark), (0));
	     call iox_$put_chars (iox_$user_output, addr (nl), 1, (0));
	end;

	if listing_remark ^= "" then call prlst_$prlst_ (listing_remark);
	return;

debug_p1_macroerr: entry (sw);

	dcl sw char (*);

	if sw = "on" then p1_macroerr_debug_sw = "1"b;
	else p1_macroerr_debug_sw = "0"b;
	return;

general_abort: entry (abort_remark);

dcl  abort_remark char (*);

	call com_err_  (0, eb_data_$who_am_I, abort_remark);
	call prlst_$prlst_ (abort_remark);
	go to abort_it;

/**/

%include varcom;
%include alm_options;

end prnter_ ;
