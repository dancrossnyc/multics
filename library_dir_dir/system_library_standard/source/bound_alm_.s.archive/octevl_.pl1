/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-09-03,Oke), approve(86-09-03,MCR7543), audit(86-09-30,JRGray),
     install(86-10-08,MR12.0-1180):
     Extend octal input
     processing to permit 1 or 2 word values.  Double precision is selected
     if an "L" suffix is supplied.  Previously >12 digits wasg an F error,
     now an "F" error is >12 digits if single, >24 digits if double.  Permits
     double-word octal literals and constants to be generated.
                                                   END HISTORY COMMENTS */

octevl_:
	procedure( rslts ) returns ( fixed bin(17) );

/* OCTEVL:     evaluates octal literal field and returns results and brk. */
/* octevl returns one word if no "L" suffix, two words if "L" suffix  */
/* supplied.  Modifier done by litevl. */
/*  note that according to bsa conventions, no negative sign is */
/*  allowed in octal fields, and fields may be separated by */
/*  commas followed by blanks. */

	/* Last modified by Nate Adleman on June 28, 1970 at 2104 for the new CODTAB */

/* INCLUDE FILES USED BY OCTEVL */

% include varcom;
% include erflgs;
% include codtab;

/* AUTOMATIC DATA USED BY OCTEVL */

declare double bit (1);
declare nochrs fixed bin(17) ;
dcl rslts(2) fixed bin (35);
dcl num bit (72) aligned;
dcl num_array (2) fixed bin (35) unaligned based (addr (num));
/* EXTERNAL ENTRIES CALLED BY OCTEVL */

declare	inputs_$next ext entry,
	inputs_$nxtnb ext entry ;


/* EXTERNAL FUNCTIONS USED BY OCTEVL */

declare	utils_$and ext entry (fixed bin(26), fixed bin(26)) returns (fixed bin(26)) ;
 
 
/**/
/* - - - - - - - - - PROGRAM STARTS HERE - - - - - - - - */

	/* setup num and get next character */

label_100:
	double = ""b;
	num = "0"b;
	nochrs = 0;
	call inputs_$nxtnb;

/*   conversion loop. */

label_110:
	if (brk(1) ^= inum) then go to label_150;

/*   check to see that only octal digits are in the expression */
/* by  seeing if the digit is greater than 7 */
/* 55 is 067 octal which is the ascii character 7 */

	if  brk(2) > 55 then  prnt7 = 1;	/*TRUE*/

/* now check to see that there are  no more than 12 characters */
/* in the expression */

	nochrs = nochrs + 1;
	if  nochrs > 24  then prntf = 1;	/*TRUE*/
	num = substr (num, 4, 69) || bit (fixed (brk(2)-48, 3));
	call inputs_$next;
	go to label_110;

/*   set results and return to caller. */

label_150:
	if byte(brk(2)) = "L" then do;
	     double = "1"b;
	     call inputs_$next;
	end;
	if ^double then do;
	     if nochrs > 12 then prntf = 1;	/*TRUE*/
	     rslts(1) = num_array (2);
	     return(1);
	end;

/* return two words. */

	rslts(1) = num_array (1);
	rslts(2) = num_array (2);
	return (2);
	end octevl_ ;
