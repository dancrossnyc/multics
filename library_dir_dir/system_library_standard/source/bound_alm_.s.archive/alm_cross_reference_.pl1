/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* This routine writes the cross reference table into the listing for ALM.
   The data is accumulated by table_ in a list structure addressable through
   the global (varcom) cell symbol_tree_rel.  This module merely formats
   the information and calls prlst_ for each line.

   First written on 07/23/72 at 20:41:52 by R F Mabee.
   Modified on 11/22/72 at 22:39:54 by R F Mabee. 
   Modified to change tree_recurse subprocedure from recursive to iterative one
	  on 02/10/76 by Eugene E Wiatrowski		*/

alm_cross_reference_: procedure;

 declare	com_err_ entry options(variable);

 declare	1 word based aligned,
	  2 left bit (18) unaligned,
	  2 right bit (18) unaligned;

 declare	eb_data_$lavptr external static pointer;

 declare	cv_bin_$dec external entry (fixed binary, char (*)),
	cv_bin_$oct external entry (fixed binary, char (*)),
	prlst_ external entry (char (*));


 declare	(pointer, addr, substr, char, fixed, bit, length, convert) builtin;


% include	alm_xref_nodes;

% include	alm_include_file_info;

% include	alm_list_beads;

% include	varcom;

% include	concom;


/* Main procedure, print heading and recurse over tree. */

	if symbol_tree_rel = 0 then return;
	call prlst_ ("               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number
");
	call tree_recurse ((symbol_tree_rel));
	return;

tree_recurse: procedure (tree_rel);		/*  walks the cross-reference tree. */

 declare	(tree_rel,subtree_rel,stack_offset)	 fixed binary (17);

 declare	tree_ptr 		pointer;

declare	returning		bit(1) aligned;

declare	stack(1000)	fixed bin;

	stack_offset = 0;
	returning = "0"b;

	do while(tree_rel > 0);
	   tree_ptr = pointer(eb_data_$lavptr,tree_rel);
	   subtree_rel = tree_ptr -> symbol_tree_node.low_sublist;

	   if subtree_rel > 0 & ^ returning
	      then do;
		 /* push on stack */
		 if stack_offset < hbound(stack,1)
		    then do;
			stack_offset = stack_offset + 1;
			stack(stack_offset) = tree_rel;
			end;
		    else do;
			call com_err_(0,"alm","cross-reference tree too big to display");
			return;
			end;
		 end;
	      else do;
		 call do_symbol(tree_ptr);
		 subtree_rel = tree_ptr -> symbol_tree_node.high_sublist;
		 if subtree_rel = 0
		    then do;
			/* pop the stack */
			if stack_offset > 0
			   then do;
				subtree_rel = stack(stack_offset);
				stack_offset = stack_offset - 1;
				end;
			returning = "1"b;
			end;
		    else returning = "0"b;
		 end;
	   tree_rel = subtree_rel;
	end;

	end;

do_symbol: procedure (tree_ptr);		/* Put out name, value, and referencing line numbers for one symbol. */
 declare	tree_ptr pointer;

 declare	line_rel bit (18), line_ptr pointer,
	name_ptr pointer, name_len fixed binary,
	line_no fixed binary, file_no fixed binary, last_file_no fixed binary,
	value fixed binary, buf_len fixed binary, buf_len_two fixed binary,
	buffer char (140) varying, numbuf char (12);

 declare	1 acc based aligned,
	  2 len bit (9) unaligned,
	  2 str char (32) unaligned;


	line_rel = tree_ptr -> symbol_tree_node.line_list_forward_rel;
	if line_rel = "0"b then return;

	if substr (tree_ptr -> symbol_tree_node.flags, 1, 3) = "110"b
	then value = fixed (tree_ptr -> symbol_tree_node.origin, 18);	/* Location counter node - print origin. */
	else value = fixed (tree_ptr -> symbol_tree_node.value, 18);
	if substr (tree_ptr -> symbol_tree_node.flags, 1, 3) = "001"b
	   then if tree_ptr -> symbol_tree_node.location_counter ^= "0"b then do;
		name_ptr = pointer (eb_data_$lavptr, tree_ptr -> symbol_tree_node.location_counter);
		value = value + fixed (name_ptr -> location_counter_bead.origin, 18);
		end;

	if substr (tree_ptr -> symbol_tree_node.flags, 1, 3) = "010"b
	then numbuf = "";	/* No useful value in external symbol node. */
	else if substr (tree_ptr -> symbol_tree_node.flags, 1, 3) = "000"b
	then numbuf = "";	/* Or in undefined symbol node. */
	else call cv_bin_$oct (value, numbuf);
	buffer = numbuf || (4)" ";

	name_ptr = pointer (eb_data_$lavptr, tree_ptr -> symbol_tree_node.name_rel);
	name_len = fixed (name_ptr -> acc.len, 9);
	if name_len < 24 then buf_len = 41;		/* Adjust beginning of next field to 6-character boundary. */
	else buf_len = 23 + name_len - mod (name_len, 6);
	buffer = buffer || substr (name_ptr -> acc.str, 1, name_len);
	buffer = char (buffer, buf_len);

	last_file_no = 0;

line_loop:	line_ptr = pointer (eb_data_$lavptr, line_rel);
		line_no = line_ptr -> line_node.line_no;
		file_no = convert (file_no, addr (line_no) -> word.left);
		line_no = convert (line_no, addr (line_no) -> word.right);

		line_rel = line_ptr -> line_node.forward_rel;

		if file_no ^= last_file_no then do;
			name_ptr = pointer (eb_data_$lavptr, file_no);
			name_len = index (name_ptr -> source_info.search_name, " ") - 1;
			if name_len <= 0 then name_len = length (name_ptr -> source_info.search_name);

		/* Strip off .alm, .incl suffixes if present. */

			if name_len > 4
			   then if substr (name_ptr -> source_info.search_name, name_len - 3, 4) = ".alm"
			   	 then name_len = name_len - 4;
			if name_len > 5
			   then if substr (name_ptr -> source_info.search_name, name_len - 4, 5) = ".incl"
				 then name_len = name_len - 5;

			if length (buffer) > buf_len then do;
				call prlst_ ((buffer));
				buffer = char ("", buf_len);
				end;
			if name_len < 12 then buf_len_two = buf_len + 12;	/* Adjust position to 6-character boundary. */
			else buf_len_two = buf_len + 6 + name_len - mod (name_len, 6);

			buffer = buffer || substr (name_ptr -> source_info.search_name, 1, name_len) || ":";
			buffer = char (buffer, buf_len_two);
			last_file_no = file_no;
			end;

		else if length (buffer) >= 120
		        then if line_rel ^= "0"b then do;	/* Avoid single entry on last line. */
			call prlst_ ((buffer));
			buffer = char ("", buf_len_two);
			end;

		call cv_bin_$dec (line_no, numbuf);
		buffer = buffer || substr (numbuf, 8, 5);
		if line_rel ^= "0"b then do;
			buffer = buffer || ",";
			goto line_loop;
			end;
	/* End of line_loop. */
	call prlst_ (buffer || ".");
	end;
end;
