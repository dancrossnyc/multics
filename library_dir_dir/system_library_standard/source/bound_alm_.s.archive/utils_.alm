" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	utils_
"	   	utils, utility machine language programs for alm.

"NOTE: segdefs are used rather than entrys where possible to speed up execution.
"the routines defined by segdefs must not use the linkage section, as lp may not be
"properly set

" Last modified on 11/12/72 at 02:01:23 by R F Mabee. Fixed short return for followon.
"	on 07/25/72 at 08:44:38 by R F Mabee. Added utils_$compare_acc to compare ACC strings.
"	on 03/04/72 at 20:49:26 by R F Mabee. Made opcode field 10 bits in makins.
"	by RHG on 22 Sept 1970 to fix bug in upkflg
"	by RHG on 17 Sept 1970 to delete
"		unnecessary entries and change "entry" to "segdef" where possible


"	basic shift and logical operations.



	segdef	and
and:	null
	ldq	ap|2,*
	anq	ap|4,*
	tra	store_6-*,ic


	segdef	ls		left shift operator.
ls:	null
	ldq	ap|2,*		get word,
	lda	ap|4,*		and shift,
	qls	0,al		then shift,
	tra	store_6-*,ic




	segdef	rs		right shift operator.
rs:	null
	ldq	ap|2,*		get word,
	lda	ap|4,*		and shift,
	qrl	0,al		then shift,
	tra	store_6-*,ic




	segdef	or		or operator
or:	null
	ldq	ap|2,*		get a operand
	orq	ap|4,*		or in b operand
store_6:	stq	ap|6,*
utils_short_return:
	short_return




"	make external address subroutine.

	segdef	exadrs		define entry.
exadrs:	null
	lda	ap|4,*		get displacement,
	lrl	15		and position.
	lda	ap|2,*		get base register,
	lrl	3+18		and position,
	tra	store_6-*,ic




"	get symbol character count from symbol first word.


	entry	nswrds		define entry.
nswrds:	null
	ldq	ap|2,*		get first word of ASCII string or relative ptr into free_ segment
	cmpq	=1,du		string has value in left part of Q-reg
	trc	have_string-*,ic
have_ptr:	ldq	<eb_data_>|[lavptr],*ql load first word of ASCII string
have_string:
	null
	qrl	3*9+2		position character count,
	adq	=1,dl		and form word count
	stq	ap|4,*
	tra	utils_short_return-*,ic then return to caller.




"	make instruction from its five fields.


	segdef	makins		define entry.
makins:	null
	lda	ap|6,*
	ana	=o777400,dl	isolate 10-bit opcode field.
	ora	ap|10,*		insert modifier,
	lrl	6		..
	ora	ap|8,*		insert b29,
	lrl	18-6		..
	lda	ap|4,*		insert displacement,
	lrl	15		..
	canq	=o1000,dl		test b29.
	tze	bypass-*,ic	skip if zero,
	lda	ap|2,*		insert base,
bypass:	lrl	3		else, take high bits of displacement.
	stq	ap|12,*		store answer.
	tra	utils_short_return-*,ic then return to caller.




"	pack and unpack routines for table flags.

	entry	pckflg		(word)  define entry.
pckflg:	null
	eax7	-36		set x7
	eppbp	<eb_data_>|[flgvec]
pklp:	lda	bp|36,7		insert flag vector word
	lrl	1		shift into assembled word
	stz	bp|36,7		clear the flag
	adx7	=1,du		decrement index into flag vector
	tnz	pklp-*,ic		loop if more to do.
	stq	ap|2,*		all done, save flags,
	tra	utils_short_return-*,ic and return to caller.




	entry	upkflg		(word)  define entry.
upkflg:	null
	eax7	36		initialize loop control
	eppbp	<eb_data_>|[flgvec]
	ldq	ap|2,*		get packed word
loopbk:	lda	=0,dl		clear the A-reg
	lls	1		shift in bit of packed word
	orsa	bp|-1,7		store bit into word vector
	sbx7	=1,du		bump loop control
	tnz	loopbk-*,ic	go back if more to do
	tra	utils_short_return-*,ic else, return to caller




"	put character routine, ascii.


	segdef	putach		(word,charno,char)  define entry.
putach:	null
	lda	ap|6,*		get the character
	lxl0	ap|4,*		get the character position
	xec	als-1,0		position the character
	eppbp	ap|2,*		get a pointer to the word
	xec	stba-1,0		store the character
	tra	utils_short_return-*,ic

als:	als	27
	als	18
	als	9
	nop	0,du

stba:	stba	bp|0,40
	stba	bp|0,20
	stba	bp|0,10
	stba	bp|0,04




"	exit and close-out routines, terminate run.


	entry	abort		utils$abort entry point.
abort:	tra	<prnter_>|[abort1]	have prnter_ give abort message and abort.


" compare_acc compares two ACC format strings in alphabetic collating
" sequence. It returns as a result: zero if the two strings are
" identical, a negative number if the first is less, or a positive
" number if the second is less.
" Its arguments are offsets into the scratch segment.

	entry	compare_acc
	temp	temp
compare_acc:
	save			" result = compare_acc (name_rel_1, name_rel_2);
	lda	ap|2,*
	ldq	ap|4,*
	eppbp	<eb_data_>|[lavptr],*
	eppap	bp|0,al		" ap points to base of first ACC string.
	eppbp	bp|0,ql		" and bp points to base of second.

	lda	bp|0
	ana	=o000137137137	" Compare first word without case bits.
	sta	temp
	lda	ap|0
	ana	=o000137137137
	sba	temp
	tnz	comp_done

" First three letters the same, start full check.

	lda	bp|0
	arl	29		" Length in words minus one.
	sta	temp
	lda	ap|0
	arl	29
	cmpa	temp
	tmi	2,ic
	lda	temp		" The length of the shorter one.
	ada	1,dl		" Get full word count.

	eppap	ap|0,al		" Add length to pointers, put negative length in xr0.
	eppbp	bp|0,al		" This is so one register can double as index and counter.
	neg	0,dl		" bp|0,0 is now the base of the ACC string.
	eax0	0,al

" Now look at rest of words, ignoring case bits.

	eax1	0,0
comp_l1:	adx1	1,du
	tpl	comp_d1

	lda	bp|0,1
	ana	=o137137137137
	sta	temp
	lda	ap|0,1
	ana	=o137137137137
	sba	temp
	tnz	comp_done
	tra	comp_l1
comp_d1:

" Now there is no difference except possibly case bits, so check them.
" First word first.

	lda	bp|0,0
	ana	=o000777777777
	sta	temp
	lda	ap|0,0
	ana	=o000777777777
	sba	temp
	tnz	comp_done

" Run over rest of words again.

	eax1	0,0
comp_l2:	adx1	1,du
	tpl	comp_d2

	lda	ap|0,1
	sba	bp|0,1
	tnz	comp_done
	tra	comp_l2
comp_d2:

" Now the only possible difference is in the lengths.

	lda	ap|0,0
	sba	bp|0,0
comp_done:
	eppap	sp|26,*
	sta	ap|6,*
	return

	end
