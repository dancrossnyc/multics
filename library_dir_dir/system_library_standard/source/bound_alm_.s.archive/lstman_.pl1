/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to support *heap exernal variables.
                                                   END HISTORY COMMENTS */


lstman_:	procedure (dummy);
  
/*	Last modified on 08/28/72 at 18:24:08 by R F Mabee.
	Made blkasn call table_ to enter names in xref tree, 27 July 1972, R F Mabee.
	Modified to put new object format entry sequence in text, 21 March 1972, R F Mabee.
	by Paul Green on June 23, 1970 at 2255
	by Noel I. Morris on March 1, 1977 for *system links	*/
  
/*		list manipulating routines for eplbsa.
	lstman has eight entries and handles reference lists for eplbsa.


	the eight entries are as follows:
	   namasn(xsym)  for assigning eplbsa names to definition region,
	   blkasn(type,snlnk,xnlnk,trptr)  for assigning type-pairs,
	   trpasn(trpcal,trparg)  for assigning trap words,
	   lnkasn(blklnk,inexp,admod)  for assigning link pairs,
	   eptasn(eploc,epnlnk,epllnk)  for assigning entry points,
	   sdfasn(sdloc,sdnlnk)  for assigning segment definitions,
	   outasn(xspc,rtnpt)  for mm or xo calls,
	   calser(calpc,outlnk)  to search call list.
	in addition, various counts are maintained by these routines
	for use by postp2 in outputting the definitions. */
 

%	include	varcom;
%	include	alm_options;
%	include	alm_lc;
%	include	erflgs;
%	include	concom;
/* END OF THE INCLUDE FILES FOR LSTMAN */
/**/

dcl (	glpl_$clh		ext entry ( fixed bin(26) ),
	glpl_$crh		ext entry ( fixed bin(26) ),
	glpl_$cwrd	ext entry ( fixed bin (26) ),
	glpl_$glwrd	ext entry ( fixed bin (26), fixed bin (26) ),
	glpl_$setblk	ext entry ( fixed bin(26), fixed bin(26) ),
	table_ external entry (fixed binary (26), fixed binary, fixed binary, fixed binary, fixed binary),
	utils_$nswrds	ext entry ( fixed bin (26) )
		) returns ( fixed bin(26));

dcl ( 	words(5),	xsym(8),	type,	nwrds,	xnlnk,	trptr,	trpcal,	trparg,	blklnk,
	inexp,	admod,	eploc,	epnlnk,	epllnk,	sdloc,	snlnk,	xspc,	rtnpt,
	calpc,	outlnk,	explnk,	tvrtn,	tvno,	tvlnk,	epelnk,	eptlc,	sdlc,
	rtnlc,	etrap,	eclass,	sdtrap,	sclass,	k,	j,	iad,	lc,	
	l,	ii,	lnkout,	namlnk,	link,	sdnlnk,	dummy	) fixed bin (26) ;

 declare	temp_ptr pointer;

dcl (eb_data_$l0r0, eb_data_$l1r0, eb_data_$l2r0, eb_data_$l3r0 ) ext fixed bin (17) ;
 declare	eb_data_$atext (2) fixed binary external static,
	eb_data_$alink (2) fixed binary external static,
	eb_data_$asym (2) fixed binary external static,
	eb_data_$astat (2) fixed binary external static,
	eb_data_$asys (2) fixed binary external static,
	eb_data_$aheap (2) fixed binary external static;

 declare	eb_data_$new_nentls external fixed binary;

dcl eb_data_$lavptr ext pointer;

 declare	based_word fixed binary based aligned;
dcl 1 word based  aligned,
   2 left char(2) unaligned,
   2 right char(2) unaligned;

 declare	twop18 fixed binary (26) internal static initial (1000000000000000000b);

/* The following variables are used to assign the return arguments for each routine, since PL/I
   has a difficult time determining which position gets the returns value, since it has to figure
   out which entry was entered, and how many args it had. We can do it much better this way */

dcl (	namrtn,	blkretn,	trapretn,	lnkretn,	eptretn,	sdfretn,	outretn,	calretn ) fixed bin (17);


/*
	j = namasn, maintain list of external names with no duplications.
	note possibility of   entry x $, x   lda .x.1.x. $, but resultant
	x entry in table is unique.
					*/
namasn:	entry(xsym, namrtn);

label_1000:
	  nwrds = utils_$nswrds(xsym(1)) ;
		if nwrds  ^=  0  then go to  label_1010 ;
	   prntf =  1 ; 
	namrtn = 0;
	return;

label_1010:
	  j = namlst ;


label_1020:
	  if j  =  0 then go to label_1050 ;
		link = glpl_$clh(j) ;

label_1030:
	do  k = 1 to nwrds ;
	  if (xsym(k)  ^=  glpl_$cwrd(link+k-1)) then go to label_1040 ;
end label_1030 ;

	namrtn = j;
	return;
 
label_1040:
  	j = glpl_$crh(j) ;
	go to label_1020 ;
 
label_1050:
	namlnk = glpl_$setblk(xsym(1),nwrds) ;
	words(1) = glpl_$glwrd(namlnk,namlst) ; 
	words(2) = 0 ; 
	namlst = glpl_$setblk(words(1),2) ; 
	namrtn = namlst;
	return;
    

/*
	j = blkasn, maintain list of type-pair blocks, note that
	type 3 or 4 block with zero segment pointer refers to the text
	segment associated with this block. */
 
blkasn:	entry( type, snlnk, xnlnk, trptr, blkretn );

/* Put segname and entryname in cross reference tree. */
	if tnoxref ^= 0 then goto label_2000;

	if type = 3 | type = 4 then ii = table_ (iassgn, glpl_$clh (snlnk), 0, 0, 0);	/* Segname is valid. */
	else if type = 1 | type = 5 then do;	/* Self-reference, fabricate name. */
		if snlnk = 0 then temp_ptr = addr (eb_data_$atext (1));
		else if snlnk = 1 then temp_ptr = addr (eb_data_$alink (1));
		else if snlnk = 2 then temp_ptr = addr (eb_data_$asym (1));
		else if snlnk = 4 then temp_ptr = addr (eb_data_$astat (1));
		else if snlnk = 5 then temp_ptr = addr (eb_data_$asys (1));
		else if snlnk = 6 then temp_ptr = addr (eb_data_$aheap (1));
		ii = table_ (iassgn, temp_ptr -> based_word, 0, 0, 0);
		end;

	if type = 2 | type = 4 | type = 5 then ii = table_ (iassgn, glpl_$clh (xnlnk), 0, 0, 0);	/* Valid entry name. */

label_2000:
	words(2) = glpl_$glwrd(type,trptr) ; 
	words(3) = glpl_$glwrd(snlnk,xnlnk) ; 

label_2010:
	j = blklst;		/* blklst is index of lastest "block" created. */

label_2020:
	  if (j  =  0) then go to label_2200 ;	/* search blklst, if found, return index, if not, add it on. */
	/* ignore presence of trptr in search */
	if (type  =  glpl_$clh(j+1)  &  words(3)  =  glpl_$cwrd(j+2)) then go to label_2100 ;
	j = glpl_$crh(j) ;
	go to label_2020 ; 
  
label_2100:
	blkretn = j;
	return;
  
label_2200:
	words(1) = blklst ;
	blklst = glpl_$setblk(words(1),3) ;
	blkretn = blklst;
	return;

  
	/*
	j  =  trpasn, maintain list of trap pointer words. */
  
trpasn:	entry (trpcal, trparg, trapretn );

label_3000:
	words(2) = glpl_$glwrd(trpcal,trparg) ; 
  
label_3010:
	j = trplst ;
  
label_3020:
	if (j  =  0) then go to label_3200 ; 
	if (words(2)  =  glpl_$cwrd(j+1)) then go to label_3100 ; 
	j = glpl_$crh(j) ; 
	go to label_3020 ; 
  
label_3100:
	trapretn = j;
	return;
  
label_3200:
	words(1) = trplst ; 
	trplst = glpl_$setblk(words(1),2) ; 
	trapretn = trplst;
	return;
  
  
	/*	xlnkno = lnkasn, enter normal link pair words into link list.
  
	explst entries are of the form--
	0,next
	ptr to type-pair block,value of internal expressison
	0,ptr to location counter for inexp.
	--the lh of first word is filled in during postp2 with the
	absolute address of the internal expression word.  this
	address is then used in the second word of the link
	pair. */
  
lnkasn:	entry (blklnk,inexp,admod,lc, lnkretn ) ; 

label_4000:
	words(2) = glpl_$glwrd(blklnk,inexp) ; 
	iad = lc ; 
  
label_4010:
	j = explst ;

label_4020:
	if (j  =  0) then go to label_4200 ;
	if (words(2)  =  glpl_$cwrd(j+1) & glpl_$crh(j+2)  =  iad) then go to label_4100 ; 
	j = glpl_$crh(j) ; 
	go to label_4020 ; 
  
label_4100:
	explnk = j ; 
	go to label_4300 ; 
  
label_4200:
	words(1) = explst ; 
	words(3) = iad ; 
	explst = glpl_$setblk(words(1),3) ; 
	explnk = explst ; 
	words(2) = glpl_$glwrd(explnk,admod) ; 
	go to label_4500 ; 
  
label_4300:
	words(2)   =  glpl_$glwrd(explnk,admod) ;

label_4310:
	j = lnklst ; 
	l  =  0 ;

label_4320:
	if j  =  0 then go to label_4500 ; 

	 ii  =  glpl_$clh(j) ; 
	 if ( ii < 3) then go to label_4330 ; 
	    l = l+2 ; 
	   go to label_4340 ; 
label_4330:
	if ( words(2)   =   glpl_$cwrd(j+1)  &  ii   =   1 ) then go to label_4400 ; 
	if  ii   =   1  then l  =  l+2 ; 
	 if(ii   ^=   2 ) then go to label_4340 ; 
	if tnewobject = 0 then l  =  l + 6 ; 
label_4340:
	j = glpl_$crh(j) ; 
	go to label_4320 ; 
  
label_4400:
	lnkretn = l;
	return;
  
label_4500:
	words(1) = eb_data_$l1r0 ; 
	link = glpl_$setblk(words(1),2) ; 
	ndlkls -> word.right = addr(link) -> word.right;
	ndlkls = ptr( eb_data_$lavptr,link );
	lnkretn = lnkno;			/* this saves having to subtract the 2 again */
	lnkno = lnkno+2 ; 
	return;
  
  
	 /*  xlnkno = eptasn, enter entry points into link structure list. */
  
eptasn:	entry(eploc,epnlnk,epllnk,eptlc,etrap,eclass, eptretn );
  
label_5000:
	tvno = tvcnt ; 	/* add to transfer vector */
	tvcnt = tvcnt+1 ; 
  
	words(1)  =  eb_data_$l0r0 ; 
	words(2) = glpl_$glwrd(tvno,eploc) ; 
	words(3) = glpl_$glwrd(eptlc,tinhib) ; 
	tvlnk = glpl_$setblk(words(1),3) ; 
	ndtvls -> word.right = addr(tvlnk) -> word.right;
	ndtvls = ptr( eb_data_$lavptr,tvlnk );
  
label_5100:
	words(1) = eb_data_$l2r0 ; 
	words(2) = glpl_$glwrd(epllnk,tvno) ; 
	 words(3)  =  glpl_$glwrd(tvlnk,tinhib) ; 
	epelnk = glpl_$setblk(words(1),3) ; 
	ndlkls->word.right = addr(epelnk)->word.right;
	ndlkls = ptr( eb_data_$lavptr, epelnk);
  
label_5200:
	if epnlnk  =  0 then go to label_5300 ;     
	words(1) = glpl_$glwrd(epnlnk,xdflst) ; 
	if tnewobject = 0 then do;
		words(2) = glpl_$glwrd(lnkno,eclass) ; 
		words(3) = glpl_$glwrd(etrap,(lpsect)) ; 
		end;
	else do;
		words (2) = glpl_$glwrd (entrieslc + 1, 0);
		words (3) = glpl_$glwrd (etrap, (lpentries));
		end;
	words (4) = epelnk * twop18;
	xdflst = glpl_$setblk (words (1), 4); 
 
label_5300:
   
  
	 /*   the length of the entry sequence is 6 words for both
	 mastermode and slave programs. */
	eptretn = lnkno;
	if tnewobject = 0 then lnkno  =  lnkno + 6; 
	else entrieslc = entrieslc + eb_data_$new_nentls;
	return;
  
  
		/* j  =  sdfasn, enter segdef information into definition list. */
  
sdfasn:	entry( sdloc, sdnlnk, sdlc, sdtrap, sclass, sdfretn );

label_6000:
	if tprot  ^=  0 then prntx  =  1 ;

label_6100:
	words(1) = glpl_$glwrd(sdnlnk,xdflst) ; 
	words(2) = glpl_$glwrd(sdloc,sclass) ; 
	words(3) = glpl_$glwrd(sdtrap,sdlc) ; 
	words (4) = 0;
	xdflst = glpl_$setblk (words (1), 4) ; 
	sdfretn = xdflst ;
	return;
  
  
		/* j   =  outasn, enter information of mm or xo  call into link list. */
	    	/* final format of block in link list is,
	   (3,next),(traout),(mylnk,tvno),(spc,lpaswd) */
  
outasn:	entry (xspc,rtnpt,rtnlc, outretn );

label_7000:
	tvno = tvcnt ; 
	tvcnt = tvcnt+1 ; 
	words(1) = eb_data_$l0r0 ; 
	words(2) = glpl_$glwrd(tvno,rtnpt) ; 
	words(3) = glpl_$glwrd(rtnlc,tinhib) ; 
	tvlnk = glpl_$setblk(words(1),3) ; 
	ndtvls -> word.right = addr( tvlnk ) -> word.right;
	ndtvls = ptr( eb_data_$lavptr, tvlnk);
  
	/* assign outlst block */
label_7100:
	words(1) = eb_data_$l3r0 ; 
	words(2) = eb_data_$l0r0 ; 
	words(3) = glpl_$glwrd(mylnk,tvno) ; 
	words(4) = glpl_$glwrd(xspc,0) ; 
	words(5) = tinhib ; 
	lnkout = glpl_$setblk(words(1),5) ; 
	ndlkls -> word.right = addr( lnkout ) -> word.right;
	ndlkls = ptr( eb_data_$lavptr, lnkout);
	lnkno = lnkno+2 ; 
	outretn = lnkout ;
	return;
  
  
		/* j  =  calser, search call list for calpc, return lstlnk and outlnk. */
  
calser:	entry (calpc,outlnk, calretn );

label_8000:
	j = lnklst ;
  
	l = 0 ;

label_8010:
	if j  =  0 then go to label_8200 ;
	if (glpl_$clh(j)  ^=  3) then go to label_8020 ; 
	   if (glpl_$clh(j+3)  =  calpc) then go to label_8100 ; 
	   l = l+2 ; 
	   go to label_8030 ; 

label_8020:
	ii  =  glpl_$clh(j) ; 
	if ( ii   =   1 ) then l  =  l + 2 ; 
	 if ii  ^=   2  then go to label_8030 ; 
	 l  =  l + 6 ; 

label_8030:
	j = glpl_$crh(j) ; 
	go to label_8010 ; 
  
		/* found, set lstman and outlnk, then return. */
label_8100:
  
	outlnk = l ; 
	calretn = j;
	return;
  
	/* not found, return with zeroes */
label_8200:
	outlnk = 0 ; 
	calretn = 0;
	return;
  
  
end lstman_;
