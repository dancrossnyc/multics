" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	glpl_		GE-list-processing-language.
"	an adaptation of flpl and mlpl to the ge-645 to be used
"	with the fortran compiler, especially for the eplbsa
"	assembler.	j.w.poduska, november 1965.


" Last modified on 11/12/72 at 01:07:44 by R F Mabee.
" Modified on 11 November 1972 by R F Mabee to fix short return and bb reference for followon.
"	by RHG on 26 Sept 1970 to combine storage_control_ back in
"	by RHG on 2 Sept 1970 for new listing package
"	by RHG on 28 August 1970 at 1420 to make ersblk do nothing
"	by NA on June 28, 1970 at 2022


	equ	nextf,64
	equ	first_free,65
	equ	lavlth,261120	length of free storage segment

	temp	t(2)


	entry	crh
crh:
	ldq	ap|2,*
	ldq	<eb_data_>|[lavptr],*ql
	anq	=o777777,dl
	stq	ap|4,*
	short_return		" short return as there is no save at entries


	entry	clh
clh:
	ldq	ap|2,*
	ldq	<eb_data_>|[lavptr],*ql
	qrl	18
	stq	ap|4,*
	short_return


	entry	cllh
cllh:
	ldq	ap|2,*
	eppbp	<eb_data_>|[lavptr],*
	ldq	bp|0,ql
	ldq	bp|0,qu
	qrl	18
	stq	ap|4,*
	short_return


"	routines for storing and modifying link-words.

	entry	storl		store left half.
storl:	lxl1	ap|2,*		get the offset into the free storage segment
	lxl0	ap|4,*		get the word to be stored
	stx0	<eb_data_>|[lavptr],*1 store it
	short_return		and return


	entry	storr		store right half.
storr:	lxl1	ap|2,*		get the offset into the free storage segment
	lxl0	ap|4,*		get the word to be stored
	sxl0	<eb_data_>|[lavptr],*1 store it in the right half
	short_return		and return


	entry	slwrd		store total link word.
slwrd:
	lxl7	ap|2,*		get word pointer,
	lda	ap|4,*		get left half,
	ldq	ap|6,*		get right half,
	qlr	18		and position word in ac.
	llr	18		..
	sta	<eb_data_>|[lavptr],*7
	short_return		and return to caller.


	entry	glwrd		construct link word and return.
glwrd:
	lda	ap|4,*		get right half,
	ldq	ap|2,*		and left half,
	alr	18		and form word in mq.
	llr	18		..
	stq	ap|6,*		return in the third argument
	short_return		and return lword to caller.


"	routines for reading total words


	entry	cwrd		read contents of total word.
cwrd:
	ldq	ap|2,*		get word pointer,
	ldq	<eb_data_>|[lavptr],*ql
	stq	ap|4,*
	short_return		and return to caller.


"	routines for manipulating blocks of information.


	entry	genlas		generate the free storage list.
genlas:
	lda	first_free,dl	get the address of the first word in the scratch segment
	eppbp	<eb_data_>|[lavptr],*
	sta	bp|nextf		store it in the uninit pointer
	short_return		and return


	entry	setblk		get a block of free storage.
setblk:	eppbp	<eb_data_>|[lavptr],*
	epbpbb	bp|0		" Should turn into epbpbb on 645F, harmless here.
	ldq	bp|nextf		get next free location
	stq	ap|6,*		return it
	eppbp	bp|0,ql		reset bp to point to the new block
	adq	ap|4,*		add the number of words requested
	stq	bb|nextf		save the new next free
	cmpq	lavlth,dl		check for overflowing scratch segment
	tpl	<prnter_>|[no_storage] complain if overflow
	ldq	ap|4,*		get the count again
	qls	2		multiply by 2
	eppap	ap|2,*		ap -> data words
	mlr	(pr,rl),(pr,rl)	move the data
	desc9a	ap|0,ql
	desc9a	bp|0,ql
	short_return
	short_return		and return if done

	end
