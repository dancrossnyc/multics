" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	name	oplook_		Look up op in table and return 645 machine code.

"                   Modified  on 09/30/80 by E Bush to implement decors.
"                   Modified  on 06/15/75 by Eugene E Wiatrowski
"		Modified on 08/08/73 at 22:20:48 by R F Mabee.
"		Modified in June 1973 by R F Mabee to add EIS and related instructions.
"		Modified on 12 November 1972 by R F Mabee to fix short return for followon.
"		Modified on 08/17/72 at 23:00:38 by R F Mabee. Added 6180 opcodes.
"		Modified 12 November 1970, R H Campbell, for lam, fstr.

"		The table is maintained alphabetically in two tables.
"		The first table contains double word entries
"		of the ASCII opcode, left justified.
"		The second table contains the binary equivalence,
"		either as an opcode or a pseudo-op number.
"		The search procedure is a
"		binary search with termination on the end of the list.


	equ	sym,4

	entry	oplook_		Entry to find opcode.
	entry	reset		Entry to reset at start of each pass.
	entry	redefine		Entry to redefine op as macro.



	use	executable

oplook_:
	stz	ap|2,*		Clear all returned values.
	stz	ap|4,*
	stz	ap|6,*

	tsx7	lookop		Look up opcode
	tra	opnfnd		Error return.
	ldx1	valtbl,au		Get the type field.
	sxl1	ap|4,*		Deposit it.
	lxl1	valtbl,au		Get the opcode.
	sxl1	ap|6,*		Deposit it.
exit:	short_return		Do a short return because we did no save on entry.

opnfnd:	null			Op-code not found.
	aos	ap|2,*		Set bad op flag.
	tra	exit		Then return to caller.


lookop:	eppbp	eb_data_$varcom+sym	bp -> symbol for comparison
	lda	bp|0		First word of symbol in A.
	arl	36-9		Get count field in AL.
	cmpa	8,dl		More than 7 characters?
	tpl	look_long		If so, special lookup.

	ldaq	bp|0		Symbol to match must be on an even word.
	lls	9		Shift out the character count.
	eax0	0		xr0 used as ptr into optable.
	eax1	cycles		xr1 used as ptr into table of xr mods.
stepup:	adx0	powers,1		Go higher.
	cmpx0	num_ops*2,du	Check for too high.
	tmi	loop		If OK try it, otherwise backup.
backup:	sbx0	powers,1		Go lower.
loop:	eax1	-1,1		Decrement loop counter.
	tmi	0,7		Op not found.
	cmpaq	optbl,0		Look for first word of op.
	tmi	backup		ASCII symbol < table -- go lower.
	tnz	stepup		ASCII symbol > table entry, go higher.
"				We have the right entry -- get the info on it.
	eaa	0,0		Move the pointer to a.
	ars	1		Divide it by two, valtbl entries are one word long.
opfnd:	sztl	(),(pr,au),bool(05)	Test for redefinition.
	descb	*,0
	descb	lp|undefined_op_list,1
	tnz	0,7		If redefined, say it's not found.
	tra	1,7		Take successful return.

look_long:
	eax0	n_long_ops*6-6	Initialize table pointer.
long_loop:
	eppbb	long_op_table,0	bb -> table entry
	lda	bb|0		Get table entry in AU.
	cmpc	(pr),(pr)		compare with symbol
	desc9a	bp|0,20
	desc9a	bb|1,20
	tze	opfnd		Got'cha.

	eax0	-6,0		Step to next entry.
	tpl	long_loop		If more, loop.
	tra	0,7		If not, op not found.

"	Table of numbers to increase and decrease index by powers of two.

powers:	zero	0,0		End of the line, not there.
	zero	2,0
	zero	4,0
	zero	8,0
	zero	16,0
	zero	32,0
	zero	64,0
	zero	128,0
	zero	256,0
	zero	512,0
	zero	1024,0
	equ	cycles,*-powers-1	Maximum number of comparisons.



reset:	eax0	num_ops		Number of operations in X0.
	csl	(),(pr,rl),bool(00)	Reset undefined op list.
	descb	*,0
	descb	lp|undefined_op_list,x0

	short_return


redefine:	tsx7	lookop		Find opcode.
	tra	exit		If not found, just return.

	csl	(),(pr,au),bool(17)	Turn on undefined bit.
	descb	*,0
	descb	lp|undefined_op_list,1

	short_return


"	Operations table follows.

	segdef	opcode_table
opcode_table:			" This definition is provided so other tools
				" can use the assembler's data base.
	zero	0,num_ops*2
	zero	optbl-opcode_table,valtbl-opcode_table


	use	op_mnemonic
	even			Make sure we are even for the cmpaq.
	equ	optbl,*-2		Minus 2 because we can't access the first entry.

	use	op_value
	equ	valtbl,*-1	Corresponding offset for valtbl.

	use	long_ops
	equ	long_op_table,*
	set	n_long_ops,0


" Format of entry:
" In op_mnemonic, double word containing first 7 characters
" of mnemonic, left justified and zero filled.
" In op_value, single word containing 18 bit pseudo-op
" index (zero for normal instruction), 10 bit opcode written
" as 9 + 1 (as in 6140 EPS-1), 4 bits of flags, and 4 bits
" of decor class. For "desc" instructions, last 4 bits of 10
" bit opcode field denote operand formats.

" The decor class denotes the intersection of decors in which  the
" instruction is valid.
       



" OPCODE DEFINING MACROS.


	maclist	off

	macro	mnem
	use	op_mnemonic
	maclist	on,save
	aci	"&1"
	maclist	object
&<=&l1,4&[	acc	""
&]
&>&l1,8&[	warn	(Mnemonic "&1" is longer than 8 characters.)
&]
	maclist	restore
	&end

	macro	defop		mnemonic,type,args
	mnem	&1
	&2op	&F3
	&end

	macro	defmac		macname,args
	maclist	on,save
	macro	&1op
	use	op_value
	maclist	on,save
	vfd	18/&2,o9/&3,1/&4,o4/&5,o4/&6

	maclist	restore
	&&end

	maclist	restore
	&end

          defmac    ,0,&1,&2,&3,&4      code,bit27,flags,decor_class
          defmac    pseud,&1,0,0,0,&2   value,decor_class
	defmac	rpt,52,&1,0,&2,&3	,abcbits,decor_class
	defmac	ar,53,&1,1,&2,&3	opcode,flags,decor_class
	defmac	pr,44,0,0,0,&1      decor_class
	defmac	xr,43,0,0,0,&1      decor_class
	defmac	eis,54,&1,1,&2,&3	opcode,bitop,decor_class

	macro	longop
	pseudop	&1,&3
	set	op_index,*-valtbl-1
	use	long_ops
	maclist	on,save
	zero	op_index
	acc	"&2"
	maclist	object
&<=&l2,11&[	acc	""
&]
&<=&l2,15&[	acc	""
&]
&>&l2,19&[	warn	(Long mnemonic "&2" is longer than 19 characters.)
&]
	maclist 	on

	maclist	restore
	set	n_long_ops,n_long_ops+1
	&end

	macro	descop		bytesize,type,decor_class
	use	op_value
	maclist	on,save
	ife	&2,a
	vfd	18/55,o6/0,o4/0,4/&1,o4/&3
	ifend
	ife	&2,b
	vfd	18/56,o6/0,o4/0,4/1,o4/&3
	ifend
	ife	&2,fl
	vfd	18/57,o6/0,o4/0,4/&1,o4/&3
	ifend
	ife	&2,ls
	vfd	18/57,o6/0,o4/1,4/&1,o4/&3
	ifend
	ife	&2,ts
	vfd	18/57,o6/0,o4/2,4/&1,o4/&3
	ifend
	ife	&2,ns
	vfd	18/57,o6/0,o4/3,4/&1,o4/&3
	ifend

	maclist	restore
	&end






	include  defops





	use	op_mnemonic
	equ	num_ops,(*-optbl)/2


	use	static
	join	/link/static

undefined_op_list:
	bss	,(num_ops+35)/36	bit table of redefined ops


	end
