/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to support the new "init"link" pseudo and to allow for
     blocks that are to be joined to the definition section.
  2) change(86-11-14,JRGray), approve(86-11-14,MCR7568),
     audit(86-11-21,RWaters), install(86-11-26,MR12.0-1228):
     Modified to backpatch the address of definitions into entry sequences
     associated with the 'ext_entry' pseudo-operation.
                                                   END HISTORY COMMENTS */


alm_definitions_$assign_definitions: procedure;

/* Separated from postp2_, November 1970, R H Campbell. */
/* Modified 2 December 1970, R H Campbell. */
/* Modified for new object segment format March 31 1972, R F Mabee. */
/* Entry fix_entries added 6 May 1972 by R F Mabee. */
/* Last modified on 06/13/72 at 21:06:41 by R F Mabee. */
/* This procedure is called to put out the
   symbolic definition region (to either text or link).
   The arrangement of the output information is determined by the
   two flags tprot (for transfer vector and error call) and
   tmvdef (for moving definitions to the linkage file).
   Tprot should imply tmvdef.
   If the definitions are to go in the linkage file,
   a pre-pass must be made to assign locations
   before the information is put out
   because the links must be assigned first. */

dcl (addr, bin, bit, convert, divide, index, hbound, length, mod, null, pointer, rel, string, substr, unspec) builtin;
						/* AUTOMATIC VARIABLES */
dcl  iright fixed bin (18);
dcl  irword;
dcl  itemp;
dcl  code fixed bin (35);
dcl  cleanup condition;
dcl  lnkorg;
dcl  ndefs fixed bin static;
dcl  htc fixed bin;
dcl  htp (1) ptr;
dcl  no_items bit (1);				/* Flag to show no detail items printed for heading. */
dcl  nwrds fixed bin (26);
dcl  rlkdef fixed bin;
dcl  rright fixed bin (26);
dcl (j, k) pointer;
dcl (namlnk, symlnk) pointer;
dcl (rsydef, trp, val) fixed bin (26);
dcl (seg, xnam) bit (18);

dcl  text_word(0:261119) fixed bin(35) based(eb_data_$segnfo.text);

dcl 1 symht based (htp (1)) aligned,
    2 size fixed bin,
    2 table (0 refer (symht.size)),
     (3 defp bit (18),
      3 pad bit (18)) unal;

declare 1 segname aligned,
        2 acc_length bit (9) unaligned,
        2 acc_string char (32) unaligned;
declare  segname_overlay bit (297) aligned based (addr (segname));

declare (backward_thread, zero_word_ptr, segname_def_blk) fixed bin;
						/* Headings placed in listing (watch for form-feeds). */
dcl  ff_NAME_DEFINITIONS_FOR_ENTRY_POINTS_AND_SEGDEFS_nl static character (47)
     aligned initial ("NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS
");
dcl  nl_EXTERNAL_NAMES_nl static character (16) aligned initial ("
EXTERNAL NAMES
");
dcl  nl_HASH_TABLE_nl static char (24) aligned initial ("
DEFINITIONS HASH TABLE
");
dcl  nl_INTERNAL_EXPRESSION_WORDS_nl static character (27) aligned initial ("
INTERNAL EXPRESSION WORDS
");
dcl  nl_NO_EXTERNAL_NAMES static character (18) aligned initial ("
NO EXTERNAL NAMES");
dcl  nl_NO_TRAP_POINTER_WORDS static character (22) aligned initial ("
NO TRAP POINTER WORDS");
dcl  nl_TRAP_POINTER_WORDS_nl static character (20) aligned initial ("
TRAP POINTER WORDS
");
dcl  nl_TYPE_PAIR_BLOCKS_nl static character (18) aligned initial ("
TYPE PAIR BLOCKS
");
						/* EXTERNAL DATA */
dcl (eb_data_$stnam, eb_data_$typr2 (5)) external fixed bin (26);
dcl  eb_data_$lavptr external pointer;
						/* EXTERNAL ENTRIES */
dcl  prlst_$prlst_ entry (character (*) aligned);
dcl  prnam_$prnam_ entry (pointer);
dcl  putout_$putblk entry (fixed bin (26), pointer, fixed bin (26), fixed bin (26), pointer);
dcl  putout_$putwrd entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26));
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), dim (*) ptr, fixed bin (35));
dcl  prnter_ entry (char (*));
dcl  prnter_$abort1 entry;
						/* EXTERNAL FUNCTIONS */
dcl  twop18 static fixed bin (26) initial (1000000000000000000b);
						/* INCLUDE FILES */

%	include alm_lc;

%	include alm_list_beads;

/* miscellaneous whole words for use with relocation processing */

%	include alm_relocation_bits;

%	include concom;

%	include segnfo;

/* common for symbol table header processing. */

%	include sthedr;

%	include varcom;

/* END OF DECLARATIONS */
/*  */
/* initialize defc to 21 */
/* to account for the 21 words required by symbol table, */
/* rel_text, rel_link, and rel_symbol definitions. */
	defc = 21;
						/* put code of 1 in 5th word of lpdefs node since now */
						/* in link segment - as defs are in .link. */
	pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.section = "000000000000000001"b; /* eb_data_$ilink */
						/* assign map, entries, and segdefs. */
	j = pointer (eb_data_$lavptr, xdflst);
	do while (rel (j));
	     defc = defc + 2;
	     j = pointer (eb_data_$lavptr, j -> external_definition_bead.next);
	end;
	defc = defc + 1;
						/* Assign other names in name list. */
	j = pointer (eb_data_$lavptr, namlst);
	do while (rel (j));
	     defc = defc + divide (bin (pointer (eb_data_$lavptr, j -> name_bead.name) -> acc.lg, 9) + 4, 4, 26, 0);
	     j = pointer (eb_data_$lavptr, j -> name_bead.next);
	end;
						/* assign trap words. */
	j = pointer (eb_data_$lavptr, trplst);
	do while (rel (j));
	     j -> trap_bead.location = bit (bin (defc, 18), 18);
	     defc = defc + 1;
	     j = pointer (eb_data_$lavptr, j -> trap_bead.next);
	end;
						/* assign type - pair blocks. */
	j = pointer (eb_data_$lavptr, blklst);
	do while (rel (j));
	     defc = defc + 2;
	     j = pointer (eb_data_$lavptr, j -> type_pair_bead.next);
	end;
						/* assign expression words. */
	j = pointer (eb_data_$lavptr, explst);
	do while (rel (j));
	     j -> expression_bead.location = bit (bin (defc, 18), 18);
	     defc = defc + 1;
	     j = pointer (eb_data_$lavptr, j -> expression_bead.next);
	end;
						/* set defcnt, and go to put out links. */
	defcnt = defc;
	return;					/* Return to caller. */
						/*  */
alm_definitions_$fix_entries: entry;

/* This entry is used to calculate where definitions for entry points will be placed
   so the entry sequences can reference them as required by new object segment format. */

	defc = 7;					/* 3-header, 3-segname def'n, 1-first word of acc segname string. */
	itemp = index (sthedr_$seg_name, " ") - 1;
	if itemp < 0 then itemp = length (sthedr_$seg_name);
	defc = defc + divide (itemp, 4, 26, 0);		/* Rest of acc segname string. */

	j = pointer (eb_data_$lavptr, xdflst);
	ndefs = 0;
	do while (rel (j));
	     k = pointer (eb_data_$lavptr, j -> external_definition_bead.entry_bead_ptr);
	     if rel (k) then k -> entry_bead.link_no = bit (bin (defc, 18));
	     defc = defc + 3;
	     k = pointer (eb_data_$lavptr, j -> external_definition_bead.name);
	     k = pointer (eb_data_$lavptr, k -> name_bead.name);
	     defc = defc + divide (bin (k -> acc.lg, 9) + 4, 4, 26, 0);
	     j = pointer (eb_data_$lavptr, j -> external_definition_bead.next);
	     ndefs = ndefs + 1;
	end;

	defc = defc + 7;				/* 7 words for symbol_table def */
	return;
						/*  */
alm_definitions_$emit_definitions:			/* part 2, put out definition words. */
	entry (lnkorg, rlkdef, rsydef);		/* Returns place to store defs. of rel_link and rel_symbol. */
	call prlst_$prlst_ (ff_NAME_DEFINITIONS_FOR_ENTRY_POINTS_AND_SEGDEFS_nl);
	htc = defc;
	defc = 0;
	curlc = lpdefs;

	call putout_$putwrd (defc, (defc + 3) * twop18, i66, ildefs); /* definitions header. */
	call putout_$putwrd (defc, htc * twop18 + 110000000000000000b, i66, ildefs);
						/* Unused bits in definitions header must have ignore flag. */

	zero_word_ptr = defc;			/* Convenient word full of zeros. */
	call putout_$putwrd (defc, 0, i66, 0);

	backward_thread = zero_word_ptr;		/* End of thread, zero word. */

	segname_def_blk = defc;			/* Address of class-3 segname definition. */
	segname_overlay = ""b;
	itemp = index (sthedr_$seg_name, " ") - 1;
	if itemp < 0 then itemp = length (sthedr_$seg_name);
	segname.acc_length = bit (bin (itemp, 9));
	substr (segname.acc_string, 1, itemp) = sthedr_$seg_name;
	nwrds = divide (itemp, 4, 26, 0) + 1;
	call putout_$putwrd (defc, (3 + nwrds + defc) * twop18 + backward_thread, i66, ildefs + idefpt);
						/* class-3, segname definition. */
	call putout_$putwrd (defc, zero_word_ptr * twop18 + 100000000000000011b, i66, ildefs);
	call putout_$putwrd (defc, (defc + 1) * twop18 + defc + 1 + nwrds, i66, ildefs + idefpt);
	call putout_$putblk (defc, addr (segname), i3333, nwrds, null ());

/* create the definitions hash table tmeplate */
	on cleanup
	     call release_temp_segments_ ("ALM definitions hash table", htp, code);
	call get_temp_segments_ ("ALM definitions hash table", htp, code);
	if code ^= 0 then do;
	     call prnter_ ("
Unable to make definitions hash table template segment.
");
	     call prnter_$abort1 ();
	end;
	symht.size = hlen (ndefs);

/* put out map and entry and segdef names. */
	backward_thread = segname_def_blk;
	j = pointer (eb_data_$lavptr, xdflst);
	do while (rel (j));
	     namlnk = pointer (eb_data_$lavptr, j -> external_definition_bead.name);
	     symlnk = pointer (eb_data_$lavptr, namlnk -> name_bead.name);
	     nwrds = divide (bin (symlnk -> acc.lg, 9) + 4, 4, 17);
	     val = convert (val, j -> external_definition_bead.location);
	     k = pointer (eb_data_$lavptr, j -> external_definition_bead.location_counter);
	     if rel (k) then
		do;
		val = val + bin (k -> location_counter_bead.origin, 18);
		irword = bin (k -> location_counter_bead.section, 18);
	     end;

	     if bin(j -> external_definition_bead.class, 18) > 7 then do;
		text_word(val-1) = text_word(val-1) + twop18 * defc;
	       end;
	     val = val * twop18 + bin (j -> external_definition_bead.class, 18);

	     trp = backward_thread + twop18;
	     backward_thread = defc;
	     rright = idefpt;
	     val = val + 100000000000000000b;
	     if j -> external_definition_bead.entry_bead_ptr then val = val + 001000000000000000b;

	     call hash ();

	     call putout_$putwrd (defc, (2 + nwrds + defc) * twop18 + trp, i66, ildefs + rright);
	     call putout_$putwrd (defc, val, i66, ibits (irword) * twop18);
	     call putout_$putwrd (defc, (defc + 1) * twop18 + segname_def_blk, i66, ildefs + idefpt);

/* Save name address in case it is used in a link reference. See "EXTERNAL NAMES" stuff. */
	     namlnk -> name_bead.section = "000000000000000001"b;
	     namlnk -> name_bead.location = bit (bin (defc, 18), 18);

	     call prnam_$prnam_ (symlnk);
	     call putout_$putblk (defc, symlnk, i3333, nwrds, null);
	     j = pointer (eb_data_$lavptr, j -> external_definition_bead.next);
	end;

/* produce the header definition. */
	symlnk = addr (eb_data_$stnam);
	call hash ();

	val = zero_word_ptr * twop18 + backward_thread;
	rright = idefpt;
	call putout_$putwrd (defc, val, i66, ildefs + rright);
	val = bin (pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin, 18) * twop18 + 2;
	val = val + 100000000000000000b;
	call putout_$putwrd (defc, val, i66, ilsymb);
	call putout_$putwrd (defc, (defc + 1) * twop18 + segname_def_blk, i66, ildefs + idefpt);
	call prnam_$prnam_ (symlnk);
	call putout_$putblk (defc, symlnk, i3333, 4, null);

/* put out the definitions hash table */
	call prlst_$prlst_ (nl_HASH_TABLE_nl);
	call putout_$putwrd (defc, bin (symht.size, 26), i66, 0);
	do itemp = 1 to symht.size;
	     unspec (val) = string (symht.table (itemp));
	     if symht.defp (itemp) then
		call putout_$putwrd (defc, val, i66, ildefs);
	     else
		call putout_$putwrd (defc, val, i66, 0);
	end;
	call release_temp_segments_ ("ALM definitions hash table", htp, code);

/* punch out all other assigned names. */
	no_items = "1"b;				/* Set flag: we haven't printed anything yet. */
	j = pointer (eb_data_$lavptr, namlst);
	do while (rel (j));
	     if j -> name_bead.section = ""b then	/* Was name already put out in segdef's? If not, put it out now. */
		do;
		if no_items then			/* Have we printed the heading yet? */
		     call prlst_$prlst_ (nl_EXTERNAL_NAMES_nl);
		no_items = ""b;			/* Clear flag. */
		symlnk = pointer (eb_data_$lavptr, j -> name_bead.name);
		nwrds = divide (bin (symlnk -> acc.lg, 9) + 4, 4, 17);
		j -> name_bead.location = bit (bin (defc, 18), 18);
		call prnam_$prnam_ (symlnk);
		call putout_$putblk (defc, symlnk, i3333, nwrds, null);
	     end;
	     j = pointer (eb_data_$lavptr, j -> name_bead.next);
	end;
	if no_items then				/* Were any names printed? */
	     call prlst_$prlst_ (nl_NO_EXTERNAL_NAMES);

/* punch out trap pointer words. */
	if (trplst = 0) then
	     call prlst_$prlst_ (nl_NO_TRAP_POINTER_WORDS);
	else
	do;
	     call prlst_$prlst_ (nl_TRAP_POINTER_WORDS_nl);
	     j = pointer (eb_data_$lavptr, trplst);
	     do while (rel (j));
		iright = convert (iright, j -> trap_bead.argument); /* Get link number of argument. */
		rright = 0;			/* Assume no argument supplied. */
		if iright ^= 0 then			/* Was there, in fact, one? */
		     do;				/* Yes. */
		     iright = iright + lnkorg;	/* Yes make up pointer to link location. */
		     rright = ilblok;		/* Set up relocation bits. */
		end;
		j -> trap_bead.location = bit (bin (defc, 18), 18);
		call putout_$putwrd (defc,
		     (bin (j -> trap_bead.call, 18) + lnkorg) * twop18 + iright,
		     i66, ilblok * twop18 + rright);
		j = pointer (eb_data_$lavptr, j -> trap_bead.next);
	     end;
	end;

/* punch out type - pair blocks. */
	call prlst_$prlst_ (nl_TYPE_PAIR_BLOCKS_nl);
	j = pointer (eb_data_$lavptr, blklst);
	do while (rel (j));
	     j -> type_pair_bead.location = bit (bin (defc, 18), 18);
	     trp = convert (trp, j -> type_pair_bead.trap);
	     rright = 0;
	     if (trp ^= 0) then do;
		rright = idefpt;
		if (fixed(j->type_pair_bead.type,18) = 5) then do;
			rright = 27; /* 33 octal special defn reloc */
			trp = trp - 1; /* 1 was added to allow for special rel of 0 */
		  end;
		else trp = convert (trp, pointer (eb_data_$lavptr, trp) -> trap_bead.location);
	     end;
	     itemp = convert (itemp, j -> type_pair_bead.type);
	     call putout_$putwrd (defc, itemp * twop18 + trp, i66, rright);
	     seg = j -> type_pair_bead.segment;
	     if itemp = 3 then
		go to type_3_or_4;
	     if itemp = 4 then			/* */
type_3_or_4:	seg = pointer (eb_data_$lavptr, seg) -> name_bead.location;
	     xnam = j -> type_pair_bead.symbol;
	     if xnam then
		xnam = pointer (eb_data_$lavptr, xnam) -> name_bead.location;
	     call putout_$putwrd (defc, bin (seg || xnam, 26), i66, eb_data_$typr2 (itemp));
	     j = pointer (eb_data_$lavptr, j -> type_pair_bead.next);
	end;

/* punch out internal expression words. */
	call prlst_$prlst_ (nl_INTERNAL_EXPRESSION_WORDS_nl);
	j = pointer (eb_data_$lavptr, explst);
	do while (rel (j));
	     j -> expression_bead.location = bit (bin (defc, 18), 18);
	     val = convert (val, j -> expression_bead.expression);
	     k = pointer (eb_data_$lavptr, j -> expression_bead.location_counter);
	     rright = 0;
	     if rel (k) then
		do;
		val = val + bin (k -> location_counter_bead.origin, 18);
		rright = ibits (bin (k -> location_counter_bead.section, 18));
	     end;
	     call putout_$putwrd (defc,
		bin (pointer (eb_data_$lavptr,
		j -> expression_bead.type_pair) -> type_pair_bead.location, 18) * twop18 + val,
		i66, ildefs + rright);
	     j = pointer (eb_data_$lavptr, j -> expression_bead.next);
	end;

/*  */

hlen: proc (s) returns (fixed bin);

dcl  s fixed bin;					/* required hash buckets */

dcl  s1 fixed bin,					/* minimum hash table size desired */
     i fixed bin;					/* iteration variable */

dcl  sizes (11) fixed bin static options (constant) init
	(13, 27, 53, 89, 157, 307, 503, 733, 1009, 1451, 2003);


	s1 = s * 1.25e0;				/* Allow for 25% of buckets to be empty. */
	do i = 1 to hbound (sizes, 1);		/* Pick an appropriate sizes. */
	     if s1 <= sizes (i) then
		return (sizes (i));
	end;
	return (s1);				/* Default for very large hash tables. */


     end hlen;



hash: proc;

dcl  word fixed bin (35) based;			/* first word of name */


	itemp = mod (symlnk -> word, symht.size) + 1;
	do while (symht.defp (itemp));
	     itemp = mod (itemp, symht.size) + 1;
	end;
	symht.defp (itemp) = bit (bin (defc, 18));


     end hash;



     end alm_definitions_$assign_definitions;
