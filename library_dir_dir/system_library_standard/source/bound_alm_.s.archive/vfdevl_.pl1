/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

vfdevl_: vfdcnt:

	procedure (rslts, flags, k);	/* note that k is really the return value of vfdevl */
 
/* vfdevl evaluate variable field expr and return results and break. */
/* vfdevl returns at most 10 words in rslts, no modifiers are allowed */
/* note that type #a# fields are allowed and yield right justified */
/* ascii characters preceded by nulls. fields may be any number */
/* of bits long, but only the rightmost 36 bits of any field are */
/* evaluated, the leading (n-36) bits will be zeroes (nulls) . */
/* flags argument is for possible future relocation bits. */


/*	Modified for "vfd" pseudo-op on 12/15/75 by Eugene E Wiatrowski.
 	Modified on 112372 at 03:01:33 by R F Mabee.
	by R F Mabee and RHG to straighten out prntr on expevl_ error error.
	by R F Mabee on 2 November 1972 to fix bug that terminated scan on 4 char field.
	by RHG on 1 April 1971 to fix bad expevl_ to set prntr, not prnte
	by NA on July 16, 1970 at 0918 to fix n > 36 fields */


% include varcom;
% include concom;
% include erflgs;
% include codtab;

/* EXTERNAL ENTRIES */

declare	inputs_$next ext entry,
	inputs_$nxtnb ext entry,
	getid_$getid_ ext entry;

/* EXTERNAL FUNCTIONS */

declare	utils_$ls ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)) ,
	utils_$rs ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)) ,
	glpl_$setblk ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)) ,
	expevl_$expevl_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)) ,
	utils_$or ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (35)),
	utils_$and ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (35));

/* EXTERNAL DATA */

declare	 (eb_data_$jbo, eb_data_$jba, eb_data_$twop18) ext fixed bin (35);

/* INTERNAL DATA */

declare	 rslts (128) fixed bin(35);
declare	 ( flags, val, word, lcvec (128) , trel, i, j, k, ibl, nn, iaddr, l, n, let) fixed bin (26);
declare    vfd_buffer_size	init(128)		fixed bin int static;


 
 
 	i = 1;
	rslts (1) = 0;
	j = 0;
	n = 0;
	let = 0;
label_107:

          lcvec(*) = 0;
 
	trel = 0;	/* FALSE */
	flags = 0;
	call inputs_$nxtnb;
	goto label_120;

/* Count gathering loop.  */
label_110:
	call inputs_$next;
label_120:
	if (brk (1) = inum) then goto label_200;
	if (brk (1) = ilet) then goto label_210;
	if (brk (1) = islash) then goto label_300;
	goto label_530;

/* process characters in count field. */
label_200:
	n = 10*n+utils_$and (brk (2) , 15);
	goto label_110;

label_210:
		let = brk (2);
		goto label_110;

/* slash found, branch to evaluate field. */
label_300:
	if (let = 0) then goto label_310;
	if (let = eb_data_$jbo) then goto label_320;
	if (let = eb_data_$jba) then goto label_335;
	goto label_530;

label_310:
	ibl = 0;
	goto label_325;

label_320:
	ibl = 1;
label_325:
	call getid_$getid_;
	nn = expevl_$expevl_ (ibl, val, iaddr);
	if (iaddr = 0) then goto label_400;
	if (n >= 18 & val < eb_data_$twop18) then goto label_326;
		prntr = 1;	/*TRUE*/
		goto label_400;

label_326:
	k = j+n;
	l = 0;
label_327:
	if (k <=  36) then goto label_328;
		k = k-36;
		l = l+1;
		goto label_327;

label_328:
	if (k ^= 18) then goto label_329;
		l = l+i;
		lcvec (l) = utils_$ls (iaddr, 18);
		trel = 1;	/*TRUE*/
		goto label_400;

label_329:
	if (k ^= 36) then goto label_330;
		l = l+i;
		lcvec (l) = utils_$or (lcvec (l) , iaddr);
		trel = 1;	/*TRUE*/
		goto label_400;

label_330:
	prntr = 1;	/*TRUE*/
	goto label_400;

label_335:
	val = 0;

label_337:
	call inputs_$next;
	if (brk (1) = icomma | brk (1) = inl) then goto label_400;
	val = utils_$or (512*val, brk (2) );
	goto label_337;
	

/* field evaluated, insert in output buffer. */
label_400:
	if n <= 35 then val = utils_$and (val, utils_$rs (-1, 36 - n) );
label_420:
	if ( (j+n) < 36) then goto label_440;
	n = n- (36-j);
	rslts (i) = utils_$or (utils_$ls (word, 36-j) , utils_$rs (val, n) );
	j = 0;
	i = i+1;
	if (i > vfd_buffer_size) then goto label_530;
label_430:
	if (n < 36) then goto label_440;
		n = n-36;
		rslts (i) = utils_$rs (val, n);
		i = i+1;
		if (i > vfd_buffer_size) then goto label_530;
		goto label_430;

label_440:
	if n > 35 then word = val;
	else word = utils_$or (utils_$ls (word, n) , utils_$and (val, utils_$rs (-1, 36-n) ) );
	j = j+n;
	n = 0;
	let = 0;
	if (brk (1) = icomma) then goto label_110;

/* all done, position last word, and return to caller. */
label_500:
	if (j = 0) then goto label_510;
	rslts (i) = utils_$ls (word, 36-j);
	k = i;
	goto label_520;



/* overflow return, set flags and return partial buffer. */

label_530:

	prnte = 1;
	goto label_500;


label_510:
	
	k = i-1;
	if (i = 1) then k = 1;
label_520:
	
	if (trel ^=  0) then flags = glpl_$setblk (lcvec (1) , k);
 
end vfdevl_;
