/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


pulnk_:
	procedure( pc, word, relwrd ) ;

/* N. Adleman on June 24, 1970 at 1011  */
/* Modified for separate static on 06/15/75 by Eugene E Wiatrowski */
  
	/* makes calls to stack the linkage words and stack the
	  associated relocation bits in the scratch segment */

declare (pc, word, relwrd) fixed bin (26);
declare (lbits, rbits, itemp, nl, nr, i, ik, ival ) fixed bin ( 17 ) aligned ;

declare eb_data_$stat_len ext fixed bin(26);
declare eb_data_$separate_static ext bit(1) aligned;

% include objnfo ;

	/* EXTERNAL ENTRIES */
declare	object_$objlk ext entry (fixed bin (26), fixed bin (26)),
	object_$wrblk ext entry (fixed bin (26), fixed bin (26)),
	object_$gtblk ext entry (fixed bin, fixed bin, fixed bin) ;

/* 	*/

	call object_$objlk( pc, word ) ;	/* write the linkage into the scratch segment */

	call object_$wrblk( pc, relwrd ) ;	/* insert the relocation bits into the proper place in the scratch segment */ 


	return ;




lnkcnt:	entry( ival ) ;	/* entry to count the number of relocation bits for the linkage portion */

	ival = 0 ;

	if eb_data_$separate_static
	   then do;
	        itemp = (eb_data_$stat_len + ilkpc) - 1;
	        ik = eb_data_$stat_len;
	        end;
	   else do;
	        itemp = ilkpc - 1;
	        ik = 0;
	        end;

label_1000:
	do i = ik to itemp ;

		call object_$gtblk( i, lbits, rbits ) ;

		nl = 1 ;

		nr = 1 ;

		if lbits ^= 0 then nl = 5 ;

		if rbits ^= 0 then nr = 5 ;

		ival = nl + nr + ival ;

end label_1000 ;

	ilkcnt = ival ;

end pulnk_ ;
