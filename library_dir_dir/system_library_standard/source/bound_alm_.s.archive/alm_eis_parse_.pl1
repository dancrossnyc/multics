/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/*  EIS multi-word instruction pseudo-operations are handled by this module.  */
/*  Last modified on 08/06/73 at 12:32:40 by R F Mabee.  */
/*  First written on 14 January 1973 by R F Mabee.  */

alm_eis_parse_$instruction: procedure (binop, flags, rleft) returns (fixed bin (35));

 declare	(binop, flags, rleft) fixed bin (26);	/*  Parameters.  */

 declare	modifiers (3) fixed bin (26), mf_count fixed bin (26), (i, j) fixed bin (26),
	(eis_length, eis_offset, eis_scale) fixed bin (26),
	right_half fixed bin (18),
	(basno, value, admod, b29, iaddr) fixed bin (26);

dcl	ixvrvl_notag fixed bin (26) init (0) int static;

 declare	left_half bit (18);

 declare	utils_$and ext entry (fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	utils_$makins ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (35)),
	expevl_$expevl_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
	varevl_$varevl_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26))
									returns (fixed bin),
	getid_$getid_ ext entry,
	inputs_$next ext entry,
	getbit_$getbit_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26));


 declare	eb_data_$lavptr external pointer,
	1 eb_data_$eis_flag_keys (3) aligned external,
	  2 one fixed bin,
	  2 two fixed bin,
	  2 three fixed bin,
	1 eb_data_$eis_value_keys (3) aligned external,
	  2 one fixed bin,
	  2 two fixed bin,
	1 eb_data_$eis_mf (3) aligned external,
	  2 key fixed bin,
	  2 mbz bit (29) unaligned,
	  2 bits bit (7) unaligned,
	eb_data_$rlist (0:15) external aligned fixed bin;

 declare	1 glpl_words (0:262143) aligned based (eb_data_$lavptr),
	  2 left bit (18) unaligned,
	  2 right bit (18) unaligned;

/*  Include files.  */

% include varcom;

% include concom;

% include erflgs;

% include codtab;


/*  End of include files. /*  Beginning of entry alm_eis_parse_$instruction.  */

	modifiers (*) = 0;
	mf_count = 0;
	left_half = ""b;

eis_loop:	call getid_$getid_;
	if brk (1) = ilpar then do;
		if sym (1) = 0 then do;	/*  Modifier field - starts with "(".  */
			if mf_count >= 3 then prntf = 1;
			else mf_count = mf_count + 1;
			call getid_$getid_;
			modifiers (mf_count) = get_eis_modifier ();
			end;
		else do;			/*  Keyword with parenthesized subexpression.  */
			do j = 1 to 3 while (sym (1) ^= eb_data_$eis_value_keys (j).one); end;
			if sym (2) ^= eb_data_$eis_value_keys (j).two then prntf = 1;
			call getid_$getid_;
			if expevl_$expevl_ (1, value, iaddr) = 0 then prnte = 1;	/*  Force octal.  */
			if iaddr ^= 0 then prntr = 1;
			if j = 1 then substr (left_half, 1, 9) = bit (fixed (value, 9));	/*  MASK  */
			else if j = 2 then substr (left_half, 6, 4) = bit (fixed (value, 4));	/*  BOOL  */
			else if j = 3 then if flags ^= 0				/*  FILL  */
				then substr (left_half, 1, 1) = bit (fixed (value, 1));	/*  Bit instruction.  */
				else substr (left_half, 1, 9) = bit (fixed (value, 9));	/*  Char instruction.  */
			else prntf = 1;
			end;

		if brk (1) = irpar then call getid_$getid_;
		else prnte = 1;
		end;
	else do;
		do j = 1 to 3 while (sym (1) ^= eb_data_$eis_flag_keys (j).one); end;
		if sym (2) ^= eb_data_$eis_flag_keys (j).two then prntf = 1;
		if j = 1 then substr (left_half, 1, 1) = "1"b;		/*  ASCII  */
		else if j = 2 then substr (left_half, 10, 1) = "1"b;	/*  ENABLEFAULT  */
		else if j = 3 then substr (left_half, 11, 1) = "1"b;	/*  ROUND  */
		else prntf = 1;
		end;

	if brk (1) = icomma then goto eis_loop;
	if brk (1) ^= isp & brk (1) ^= inl then prnte = 1;

	if mf_count > 1 then do;			/*  Stuff modifiers into appropriate fields.  */
		substr (left_half, 12, 7) = bit (fixed (modifiers (2), 7));
		if mf_count = 3 then substr (left_half, 3, 7) = bit (fixed (modifiers (3), 7));
		end;

	rleft = 0;				/*  Always absolute.  */
	return (utils_$makins (0, fixed (left_half, 18), binop, 0, 0) + modifiers (1));


/*  /*  Internal routine to process an EIS modifier field.  */

get_eis_modifier: procedure returns (fixed bin);

 declare	(i, value, iaddr) fixed bin (26), modifier bit (7);

	modifier = "0"b;
mod_loop:
	/*  First search for special keywords "pr", "id", "rl".  */
	do i = 1 to 3;
		if sym (1) = eb_data_$eis_mf (i).key then do;
			modifier = modifier | eb_data_$eis_mf (i).bits;
			goto out;
			end;
		end;

	/*  Then search for register name.  */
	do i = 0 to 15;
		if sym (1) = eb_data_$rlist (i) then do;
			modifier = modifier | bit (fixed (i, 7));
			goto out;
			end;
		end;

	/*  Not a reserved word; it must be a user-defined name or boolean expression.  */
	if expevl_$expevl_ (1, value, iaddr) = 0 then prnte = 1;
	if iaddr ^= 0 then prntr = 1;
	modifier = modifier | bit (fixed (value, 7));

out:	if brk (1) = icomma then do;
		call getid_$getid_ ();
		goto mod_loop;
		end;

	return (fixed (modifier, 7));
	end;


/*/*  Routine to evaluate EIS descriptor pseudo-ops.  */

alm_eis_parse_$descriptor: entry (type, byte_size, n_format, rleft) returns (fixed bin (35));

 declare	(type, byte_size, n_format) fixed bin;		/*  Parameters.  */

	if varevl_$varevl_ (ixvrvl_notag, basno, value, admod, b29, iaddr) = 0 then prnte = 1;
	if iaddr = 0 then rleft = 0;			/*  Compute relocation code and absolute value.  */
	else do;
		value = value + fixed (glpl_words (iaddr + 3).left, 18);
		call getbit_$getbit_ (iaddr, basno, b29, rleft);
		rleft = rleft * 262144;
		end;
	if admod ^= 0 then prntr = 1;
	if b29 ^= 0 then value = utils_$and (value, 32768 - 1) + basno * 32768;	/*  Squeeze base in.  */

	eis_length, eis_offset, eis_scale = 0;
	if brk (1) = ilpar then do;			/*  Offset field.  */
		call getid_$getid_;
		if expevl_$expevl_ (0, eis_offset, iaddr) = 0 then prnte = 1;
		if iaddr ^= 0 then prntr = 1;
		if eis_offset < 0 | eis_offset * byte_size > 35 then do;
			prnte = 1;
			eis_offset = 0;
			end;
		if brk (1) = irpar then call getid_$getid_;
		else prnte = 1;
		end;

	if brk (1) ^= icomma then goto desc_out;
	call getid_$getid_;				/*  length field.  */
	do i = 0 to 15;	/*  Is it a register name?  */
		if sym (1) = eb_data_$rlist (i) then do;
			eis_length = i;
			goto out;
			end;
		end;

	/*  Otherwise it is a constant expression for the length.  */
	if expevl_$expevl_ (0, eis_length, iaddr) = 0 then prnte = 1;
	if iaddr ^= 0 then prntr = 1;
	if type = 3 then j = 64; else j = 4096;	/*  max value of length field.  */
	if eis_length < 0 | eis_length >= j then do;
		prnte = 1;
		eis_length = j - 1;
		end;

out:	if brk (1) ^= icomma then goto desc_out;
	if type ^= 3 then prntf = 1;			/*  Scale factor field exists only in numeric descriptors.  */
	call getid_$getid_;
	if expevl_$expevl_ (0, eis_scale, iaddr) = 0 then prnte = 1;
	if iaddr ^= 0 then prntr = 1;
	if eis_scale < -32 | eis_scale > 31 then do;
		prnte = 1;
		eis_scale = 0;
		end;
	if eis_scale < 0 then eis_scale = eis_scale + 64;	/*  force into six bits.  */

desc_out:
	if brk (1) ^= isp & brk (1) ^= inl then prntf = 1;

	if type = 2 then				/*  Bit descriptor.  */
		right_half = (divide (eis_offset, 9, 2, 0) * 16 + mod (eis_offset, 9)) * 4096 + eis_length;
	else do;
		if byte_size = 9 then eis_offset = eis_offset * 2;
		if type = 1 then do;		/*  Alphanumeric descriptor.  */
			if byte_size = 9 then j = 0;
			else if byte_size = 6 then j = 1;
			else j = 2;
			right_half = (eis_offset * 8 + j * 2) * 4096 + eis_length;
			end;
		else do;				/*  numeric descriptor.  */
			if byte_size = 9 then j = 0; else j = 1;
			right_half = (eis_offset * 8 + j * 4 + n_format) * 4096
							+ eis_scale * 64 + eis_length;
			end;
		end;

	return (value * 262144 + right_half);
	end;
