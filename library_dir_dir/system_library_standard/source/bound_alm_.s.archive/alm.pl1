/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Rewritten to use the new alm_ subroutine.
  2) change(86-11-14,JRGray), approve(86-11-14,MCR7568),
     audit(86-11-21,RWaters), install(86-11-26,MR12.0-1228):
     Also MCR7572. Modified to update the version field to 7.3 .
  3) change(87-04-22,JRGray), approve(87-07-03,MCR7689),
     audit(87-07-09,RWaters), install(87-11-02,MR12.2-1001):
     Modified for fix for alm 19: change version field to 7.4 .
  4) change(88-03-21,JRGray), approve(88-08-05,MCR7952),
     audit(88-09-30,WAAnderson), install(88-10-17,MR12.2-1169):
     Modified for Symbol Table support, updated version.
  5) change(89-04-17,JRGray), approve(89-04-17,MCR8078), audit(89-04-18,Huen),
     install(89-06-09,MR12.3-1055):
     Modified to allow for archive component pathnames.
                                                   END HISTORY COMMENTS */


alm:     proc;
/* Completely rewritten August 4 1985 by R. Gray to fix various bugs, 
   and call the new alm_ subroutine.
*/

dcl	usage_string char(31) int static options(constant) init("Usage: alm path {-control_args}");

dcl	alm_ entry(ptr, ptr, fixed bin, fixed bin(35));
dcl	com_err_ entry options(variable);
dcl	cu_$arg_count entry(fixed bin, fixed bin(35));
dcl	cu_$arg_ptr entry(fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl	expand_pathname_$component_add_suffix entry(char(*), char(*), char(*), char(*), char(*), fixed bin(35));
dcl	find_source_file_ entry (char(*), char(*), char(*), ptr, fixed bin(24), fixed bin(35));
dcl	get_wdir_ entry returns(char(168));
dcl	ioa_ entry options(variable);
dcl	terminate_file_ entry(ptr, fixed bin(24), bit(*), fixed bin(35));
dcl	tssi_$clean_up_file entry(ptr, ptr);
dcl	tssi_$clean_up_segment entry(ptr);
dcl	tssi_$get_file entry(char(*), char(*), ptr, ptr, ptr, fixed bin(35));
dcl	tssi_$get_segment entry(char(*), char(*), ptr, ptr, fixed bin(35));
dcl	tssi_$finish_segment entry(ptr, fixed bin(24), bit(36) aligned, ptr, fixed bin(35));
dcl	tssi_$finish_file entry(ptr, fixed bin, fixed bin(24), bit(36) aligned, ptr, fixed bin(35));

dcl	(addr, after, before, char, hbound, ltrim, null, rtrim, substr) builtin;

dcl	argument_ptr ptr;
dcl	argument_len fixed bin(21);
dcl	argument_count fixed bin;
dcl	argument char(argument_len) based(argument_ptr);
dcl	cleanup condition;

dcl	error_table_$badopt external static fixed bin(35);
dcl	error_table_$noarg external static fixed bin(35);
dcl	error_table_$too_many_args external static fixed bin(35);

dcl	alm_severity_ external static fixed bin;

dcl	(dirname, working_dir) char(168);
dcl	ec fixed bin(35);
dcl	(entryname, compname) char(33);	/* length is 33 instead of 32 to insure trailing blank */
dcl	(i, j) fixed bin;
dcl	(object_aclinfo_ptr, list_aclinfo_ptr) ptr;
dcl	objectname char(32);

dcl	01 alm_arguments, 	/* like alm_args */
	  02 version char(8),
	  02 arg_count fixed bin,
	  02 arg(400),
	    03 arg_ptr ptr,
	    03 len fixed bin(21);

dcl	01 global_info like alm_info;

%include alm_info;

	/* initialization of alm_info structure */
	global_info.version = ALM_INFO_V1;
	global_info.symbols = "1"b;	/* default include symbols in list */
	global_info.brief = "0"b;
	global_info.list = "0"b;
	global_info.table = "0"b;
	global_info.brief_table = "0"b;
	global_info.target = "";

	global_info.generator = "alm";
	global_info.gen_number = 8;
	global_info.gen_version = "ALM Version 8.14 March 1989";
	global_info.gen_created = 0; /* alm_ will calculate this field */

	global_info.option_string = "";
	global_info.source_path = "";
	global_info.source_entryname = "";
	global_info.source_ptr = null();
	global_info.source_bc = 0;
	global_info.object_ptr = null();
	global_info.object_bc = 0;
	global_info.list_fcb_ptr = null();
	global_info.list_component_ptr = null();
	global_info.list_bc = 0;
	global_info.list_component = 0;

	alm_arguments.version = ALM_ARGS_V1;
	alm_arguments.arg_count = 0;

	alm_severity_ = 5;
	object_aclinfo_ptr = null();
	list_aclinfo_ptr = null();
	call cu_$arg_count(argument_count, ec);
	if ec ^= 0 then call error(ec, "");


	do i = 1 to argument_count;
	     call cu_$arg_ptr(i, argument_ptr, argument_len, ec);
	     if ec ^= 0 then call error(ec, "Argument #" || ltrim(char(i)));
	     if substr(argument, 1, 1) ^= "-"
	     then if global_info.source_path = "" then global_info.source_path = argument;
	     else call error(0, "Only one pathname can be specified");
	     else if argument = "-list" | argument = "-ls" then global_info.list = "1"b;
	     else if argument = "-no_list" | argument = "-nls" then global_info.list = "0"b;
	     else if argument = "-symbols" | argument = "-sb" then global_info.symbols = "1"b;
	     else if argument = "-no_symbols" | argument = "-nsb" then global_info.symbols = "0"b;
	     else if argument = "-brief" | argument = "-bf" then global_info.brief = "1"b;
	     else if argument = "-no_brief" | argument = "-nbf" then global_info.brief = "0"b;
	     else if argument = "-table" | argument = "-tb" then global_info.table = "1"b;
	     else if argument = "-no_table" | argument = "-ntb" then global_info.table = "0"b;
	     else if argument = "-brief_table" | argument = "-bftb" then global_info.brief_table = "1"b;
	     else if argument = "-no_brief_table" | argument = "-nbftb" then global_info.brief_table = "0"b;
	     else if argument = "-arguments" | argument = "-ag" then do;
		alm_arguments.arg_count = argument_count - i;
		if alm_arguments.arg_count > hbound(alm_arguments.arg, 1) then call error(error_table_$too_many_args, char(alm_arguments.arg_count));
		do j = 1 to alm_arguments.arg_count;
		     call cu_$arg_ptr(i + j, alm_arguments.arg_ptr(j), alm_arguments.len(j), ec);
		     if ec ^= 0 then call error(ec, "Argument #" || ltrim(char(i + j)));
		end;
		i = argument_count;
	     end;
	     else if argument = "-target" | argument = "-tgt" then do;
		i = i + 1;
		call cu_$arg_ptr(i, argument_ptr, argument_len, ec);
		if ec ^= 0 then call error(ec, "Target value.");
		global_info.target = argument;
	     end;
	     else call error(error_table_$badopt, argument);
	end;

	if global_info.source_path = "" then call error(error_table_$noarg, usage_string);
	/* get absolute pathname. Can't use absolute_pathname_ cause it hates archives */
	call expand_pathname_$component_add_suffix(global_info.source_path, "alm", dirname, entryname, compname, ec);
	if ec ^= 0 then call error(ec, global_info.source_path);
	if compname = "" then global_info.source_path = rtrim(dirname, "> ") || ">" || rtrim(entryname);
	else global_info.source_path = rtrim(dirname, "> ") || ">" || before(entryname, ".archive ") || "::" || rtrim(compname);

	if global_info.target = "" then global_info.option_string = ""; else global_info.option_string = "-target " || global_info.target || " ";
	if global_info.list then global_info.option_string = global_info.option_string || "list ";
	if global_info.symbols then global_info.option_string = global_info.option_string || "symbols ";
	if global_info.brief then global_info.option_string = global_info.option_string || "brief ";
	if global_info.table then global_info.option_string = global_info.option_string || "table ";
	if global_info.brief_table then global_info.option_string = global_info.option_string || "brief_table ";
	if alm_arguments.arg_count > 0 then do;
		global_info.option_string = global_info.option_string || "-arguments ";
		do i = 1 to alm_arguments.arg_count;
			argument_ptr = alm_arguments.arg_ptr(i);
			argument_len = alm_arguments.len(i);
			global_info.option_string = global_info.option_string || argument || " ";
		  end;
	  end;


	call find_source_file_(global_info.source_path, "alm", global_info.source_entryname,
	  global_info.source_ptr, global_info.source_bc, ec);
	if ec^=0 then call error(ec, global_info.source_path);

on	cleanup call clean_up;

	working_dir = get_wdir_();
	objectname = before(global_info.source_entryname || " ", ".alm ");
	objectname = before(objectname, ".ex ");
	call tssi_$get_segment(working_dir, objectname, global_info.object_ptr,  object_aclinfo_ptr, ec);
	if ec^=0 then call error(ec, "While accessing object segment.");

	if global_info.list then do;
		call tssi_$get_file(working_dir, rtrim(objectname) || ".list",
		  global_info.list_component_ptr, list_aclinfo_ptr, global_info.list_fcb_ptr, ec);
		if ec^=0 then call error(ec, "While accessing listing file.");
	  end;

	if ^global_info.brief then call ioa_("ALM "  ||
	  before(after(global_info.gen_version, "Version "), " "));

	call alm_(addr(global_info), addr(alm_arguments), alm_severity_, ec);
	if ec ^= 0 then call com_err_(ec, "alm", global_info.source_path);

	if global_info.list_fcb_ptr ^= null() then do;
		call tssi_$finish_file(global_info.list_fcb_ptr, global_info.list_component,
		  global_info.list_bc, "101"b, list_aclinfo_ptr, ec);
		if ec^=0 then call error(ec, "While finishing with listing file.");
	  end;

	call tssi_$finish_segment(global_info.object_ptr, global_info.object_bc,
	  "110"b, object_aclinfo_ptr, ec);
	if ec^=0 then call error(ec, "While finishing with object segment.");

	call terminate_file_(global_info.source_ptr, global_info.source_bc, "001"b, ec);
	if ec^=0 then call error(ec, "While terminating source segment.");
abort:	return;

error:     proc(code, string);
dcl	code fixed bin(35);
dcl	string char(*);

	call com_err_(code, "alm", string);
	call clean_up;
	goto abort;
end error;

clean_up:	proc;
	if list_aclinfo_ptr ^= null() then call tssi_$clean_up_file(global_info.list_fcb_ptr, list_aclinfo_ptr);
	if object_aclinfo_ptr ^= null() then call tssi_$clean_up_segment(object_aclinfo_ptr);
	if global_info.source_ptr ^= null() then call terminate_file_(global_info.source_ptr, 0, "001"b, 0);
end clean_up;

end alm;
