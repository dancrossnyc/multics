/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to support error severity, block joined to the definition
     section, and to remove pads from the listing.
                                                   END HISTORY COMMENTS */


prwrd_$prwrd_: procedure (pc, word, how);

/*
   Modified 4/29/81 by EBush to make A error fatal and B non-fatal.
   Modified 2/5/81 by EBush to add A error.
   Modified 3/25/77 by Greenberg for iox_ and no line buffer.
   Modified 3/23/77 by Noel I. Morris for macro processing.
   modified in 01/74 by E Stone to convert to v2 and to change check for end of listing seg
   modified on 11/28/72 at 20:49:00 by R F Mabee.
   Another line numbering change and 36-bit values for equ, 28 November 1972, R F Mabee.
   Minor change to line numbering, 23 July 1972, R F Mabee.
   Added B and C error codes, 16 April 1972, R F Mabee.
   by RHG on 3 June 1971 to get binlin right even if no list
   by R H Campbell 15 Nov 1970
   */
	relwrd = ""b;
	go to pr_common;

prwrd_$source_only:
	entry;
	source_only_flag = "1"b;
	go to common;

prwrd_$prwrd2:
	entry (pc, word, how, relarg);
	relwrd = relarg;
pr_common:
	source_only_flag = ""b;
	go to common;				/* Go to it. */
						/*  */
dcl  prlst_$new_list_seg entry;
dcl  eb_data_$ib6 external fixed bin;			/* character (4) */
dcl  eb_data_$macro_linect external fixed bin;
dcl  eb_data_$listing_max_length external fixed bin (35);
dcl  eb_data_$nlpads external character (4);
dcl  eb_data_$macro_depth fixed bin external,
     eb_data_$include_control bit (110) aligned external;
dcl  eb_data_$include_number fixed bin external;
dcl  eb_data_$macro_listing_control bit (36) aligned external;
dcl  err_count fixed bin;
dcl  source_had_been_printed bit (1) aligned;
dcl  flag_character char (18) static options (constant) init
    ("EFMNOPRSTUXBCDA567");
dcl  error_sv(18) fixed bin int static options(constant) init
    (3, 1, 3, 2, 3, 3, 1, 2, 2, 3, 0, 1, 0, 3, 3, 0, 0, 1);
dcl  how fixed bin (35);				/* character (4) aligned */
dcl  i fixed bin;
dcl  hdrlen fixed bin;
dcl  source_charray char (1) unal based (source) dim (srclen);
dcl  source_line char (linelen) based (addr (source_charray (begin_line + 1)));
dcl  linelen fixed bin;
dcl  padlen fixed bin;
dcl  iox_$user_output ptr ext;
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  prwrd_util_$pc entry (char (40), bit (36) aligned);
dcl  prwrd_util_$inst entry (char (40), bit (36) aligned, fixed bin (35));
dcl  j fixed bin;
dcl  listing_buf char (40);
dcl  (strstart, strlen, strmaxlen) fixed bin(21);
dcl  listing_segment char(strlen) based(list);
dcl  based_listing_buf char (hdrlen) based (addr (listing_buf));
dcl 1 listline aligned based (addrel (list, lstlen)),	/* to listing */
    2 chars char (linelen) unal,
    2 pads char (padlen) unal;

dcl  listing_buf_pointer pointer;
dcl  NL static character (1) initial ("
");						/* New line. */
dcl  num pic "zzzzzzz9";
dcl  zzzz9 pic "zzzz9";
dcl  pc bit (36) aligned;				/* fixed bin (35) */
dcl  relarg bit (36) aligned;
dcl  reloc_character char (32) static options (constant) init
    ("a???????????????0123456789Ld???*");
dcl  relwrd bit (36) aligned;
dcl  source_only_flag bit (1) aligned;
dcl  source_segment character (srclen) based (source) aligned;
dcl  word bit (36) aligned;
dcl (addr, addrel, bin, divide, index, length, ltrim, min, substr) builtin;
%	include concom;
%	include erflgs;
%	include lstcom;
%	include segnfo;
%	include varcom;
%	include alm_options;
/*  */
/* FIRST CLEAR THE LISTING BUFFER */
common:	listing_buf = " ";				/* Blank out listing buffer header */
						/* FIRST PRINT THE FLAGS IF ANY */
	err_count = 0;
	do i = 1 to 18;				/* Print out the error flags, if any. */
	     if flgvec (i) ^= 0 then do;		/* Is this flag set? */
		tfatal = max(tfatal, error_sv(i));	/* Severity of worst error. */
		flgvec (i) = 0;			/* Clear the flag now that we are printing it. */
		if err_count < 3 then do;		/* Do we have room for this flag? */
		     substr (listing_buf, err_count + 1, 1) = substr (flag_character, i, 1); /* Yes, print it. */
		     err_count = err_count + 1;
		end;
	     end;
	end;

	if err_count = 0 & tnolst ^= 0 then do;
	     source_printed = "1"b;			/* Don't print if no list, no errors. */
	     return;
	end;

	if (eb_data_$macro_depth > 0) & (err_count = 0) then do;
	     if substr (eb_data_$macro_listing_control, 1, 1) then
		source_printed = "1"b;
	     if substr (eb_data_$macro_listing_control, 2, 1) then
		return;
	end;

	if ^source_only_flag then do;

/* NOW PRINT OUT THE PROGRAM COUNTER */
	     if how ^= eb_data_$ib6 then
		call prwrd_util_$pc (listing_buf, pc);

/* CHECK IF LEFT HALF OF WORD IS BLANK */
	     if how = ibb then;
	     else if (how = eb_data_$ib6) then
		if (substr (word, 1, 18) ^= "0"b) then
		     call prwrd_util_$inst (listing_buf, word, (i66));
		else call prwrd_util_$inst (listing_buf, word, how);
	     else do;
		substr (listing_buf, 13, 1) = substr (reloc_character, bin (substr (relwrd, 1, 18), 18) + 1, 1);
		substr (listing_buf, 14, 1) = substr (reloc_character, bin (substr (relwrd, 19, 18), 18) + 1, 1);
		call prwrd_util_$inst (listing_buf, word, how);
	     end;
	end;
	else if eb_data_$macro_linect > 0 then do;	/* List macro def line */
	     zzzz9 = eb_data_$macro_linect;
	     substr (listing_buf, 27, 5) = zzzz9;
	end;

/* NOW ADD THE SOURCE IF IT HAS NOT ALREADY BEEN PRINTED */
	source_had_been_printed = source_printed;
	if tquietsw ^= 0 then err_count = 0;		/* Force error count zero in quiet mode. */
	if source_printed & err_count = 0 then do;	/* Only octal word to print. */
	     substr (listing_buf, 32, 1) = NL;		/* Append a new-line character. */
	     hdrlen = 32;
	end;
	else do;
	     hdrlen = 40;
	     if tpostp = 0 then do;

		num = binlin;
		j = length (ltrim (num));
		i = 39 - j;
		substr (listing_buf, i, j) = ltrim (num);

		if include_index > 0 then do;		/* Insert include file number into listing. */
		     num = eb_data_$include_number;
		     j = length (ltrim (num));
		     i = i - 1;
		     substr (listing_buf, i, 1) = "-";
		     i = i - j;
		     substr (listing_buf, i, j) = ltrim (num);
		end;

	     end;
	     linelen = index (substr (source_segment, begin_line + 1), NL) - 1; /* Find last character on this line. */
	     if linelen < 0 then linelen = srclen - begin_line;
	     if err_count ^= 0 & tquietsw = 0 then do;	/* Output problems to iox_ */
		call iox_$put_chars (iox_$user_output, addr (listing_buf), hdrlen, (0));
		call iox_$put_chars (iox_$user_output, addr (source_line), length (source_line)+1, (0));
	     end;

	     if source_had_been_printed then
		substr (listing_buf, 40, 1) = NL;
	     source_only_flag = "0"b;			/* make sure we print. */
	     source_printed = "1"b;
	     if substr (eb_data_$include_control, 1, 1) | source_had_been_printed then
		substr (listing_buf, 33, 6) = "";	/* Greenberg doesn't like this. */
	end;
	if source_only_flag then return;
	if tnolst ^= 0 then return;			/* As you like it, mister. */

	strstart = lstlen + 1;
	strmaxlen = 4*eb_data_$listing_max_length - lstlen;
	if hdrlen > strmaxlen then do;
		lstlen = lstlen + strmaxlen;
		substr(listing_segment, strstart, strmaxlen) = substr(listing_buf, 1, strmaxlen);
		call prlst_$new_list_seg;
		lstlen = hdrlen - strmaxlen;
		substr(listing_segment, 1, lstlen) = substr(listing_buf, strmaxlen+1, lstlen);
	  end;
	else do;
	     lstlen = lstlen + hdrlen;
	     substr(listing_segment, strstart, hdrlen) = based_listing_buf;
	  end;

	if source_had_been_printed then return;		/* detail line */

	strstart = lstlen + 1;
	strlen = length(source_line) + 1;
	strmaxlen = 4*eb_data_$listing_max_length - lstlen;
	if strlen > strmaxlen then do;
		lstlen = lstlen + strmaxlen;
		substr(listing_segment, strstart, strmaxlen) = substr(source_line, 1, strmaxlen);
		call prlst_$new_list_seg;
		lstlen = strlen - strmaxlen;
		substr(listing_segment, 1, lstlen) = substr(source_line || NL, strmaxlen+1, lstlen);
		return;
	  end;
	lstlen = lstlen + strlen;
	substr(listing_segment, strstart, strlen) = source_line || NL;
	return;

end prwrd_$prwrd_;
