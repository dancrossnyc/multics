/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */



/* format: style2,idind30,indcomtxt */

/* Typed-segment primitives for message segments */

/* Created:  January 1983 by G. Palter */
/* Modified: 2/20/83 Jay Pattin to add lots more entries */
/* 830922 BIM for new calling sequences for acls */
/* 1984.08.28 MAP to set user_area_ptr when list_acl is invoked */
/* 1985-05-02, BIM: remove unneeded include of access_mode_values */
/* 1985-05-06, BIM: check code on exit from message_segment_$acl_list */

suffix_ms_:
     procedure ();


/* Common Parameters */

          dcl     P_desired_version             character (*) parameter;
          dcl     P_dirname                     character (*) parameter;
                                                            /* directory containing the message segment */
          dcl     P_ename                       character (*) parameter;
                                                            /* name of the message segment */
          dcl     P_code                        fixed binary (35) parameter;

/* suffix_info and list_switches Parameters */

          dcl     P_suffix_info_ptr             ptr parameter;
          dcl     P_switch_list_ptr             ptr parameter;

/* chname_file Parameters */

          dcl     P_old_name                    character (*) parameter;
                                                            /* name to be deleted */
          dcl     P_new_name                    character (*) parameter;
                                                            /* name to be added */

/* copy parameters */

          dcl     P_copy_options_ptr            ptr parameter;

/* Parameters used by most ACL entries */

          dcl     P_acl_ptr                     pointer parameter;
                                                            /* -> an ACL array structure */


/* list_acl Parameters */

          dcl     P_user_area_ptr               pointer parameter;
                                                            /* -> area where to allocate listed_acl if non-null */


/* replace_acl Parameters */

          dcl     P_no_sysdaemon                bit (1) parameter;
                                                            /* ON => do not add explicit *.SysDaemon.* term */

/* switch Parameters */

          dcl     P_switch_name                 char (*) parameter;
          dcl     P_value                       bit (1) aligned parameter;

/* (get set)_max_length and bit_count parameters */

          dcl     P_max_length                  fixed bin (19) parameter;

/* get_user_access_modes parameters */

          dcl     (P_modes, P_exmodes)          bit (36) aligned;
          dcl     P_ring                        fixed bin;
          dcl     P_user_name                   char (*);

/* Remaining declarations */

          dcl     old_acl_ptr                   pointer;

          dcl     user_area_ptr                 pointer;
          dcl     user_area                     area based (user_area_ptr);
          dcl     system_free_area              area based (get_system_free_area_ ());

          dcl     idx                           fixed binary;
          dcl     rings                         (3) fixed bin (3);
          dcl     value                         bit (1);
          dcl     err_switch                    bit (1) aligned;

          dcl     error_table_$argerr           fixed binary (35) external;
          dcl     error_table_$unsupported_operation
                                                fixed binary (35) external;
          dcl     error_table_$unimplemented_version
                                                fixed bin (35) ext static;

          dcl     (get_system_free_area_, get_user_free_area_)
                                                entry () returns (pointer);
          dcl     hcs_$get_max_length           entry (char (*), char (*), fixed bin (19), fixed bin (35));
          dcl     hcs_$get_safety_sw            entry (char (*), char (*), bit (1), fixed bin (35));
          dcl     hcs_$get_user_access_modes    entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
                                                bit (36) aligned, fixed bin (35));
          dcl     message_segment_$copy         entry (character (*), character (*), character (*), character (*),
                                                bit (1) aligned, fixed binary (35));
          dcl     message_segment_$chname_file  entry (character (*), character (*), character (*), character (*),
                                                fixed binary (35));
          dcl     message_segment_$delete       entry (character (*), character (*), fixed binary (35));
          dcl     message_segment_$ms_acl_add   entry (character (*), character (*), pointer, fixed binary,
                                                fixed binary (35));
          dcl     message_segment_$ms_acl_delete
                                                entry (character (*), character (*), pointer, fixed binary, pointer,
                                                fixed binary (35));
          dcl     message_segment_$ms_acl_list  entry (character (*), character (*), pointer, fixed binary, pointer,
                                                fixed binary (35));
          dcl     message_segment_$ms_acl_replace
                                                entry (character (*), character (*), pointer, fixed binary,
                                                fixed binary (35));
          dcl     message_segment_$set_max_length_file
                                                entry (char (*), char (*), fixed bin (19), fixed bin (35));
          dcl     message_segment_$set_safety_switch
                                                entry (char (*), char (*), bit (1) aligned, fixed bin (35));
          dcl     message_segment_$validate     entry (character (*), character (*), fixed binary (35));
          dcl     sub_err_                      entry () options (variable);

          dcl     cleanup                       condition;

          dcl     null                          builtin;    /* format: off */
%page; %include suffix_info;
%page; %include copy_options;
%page; %include copy_flags;
%page; %include acl_structures;
%include sub_err_flags;
/* format: on */



/* Deletes a message segment */

delentry_file:
     entry (P_dirname, P_ename, P_code);

          call message_segment_$delete (P_dirname, P_ename, P_code);
          return;



/* Changes the names on a message segment */

chname_file:
     entry (P_dirname, P_ename, P_old_name, P_new_name, P_code);

          call message_segment_$chname_file (P_dirname, P_ename, P_old_name, P_new_name, P_code);
          return;

/* copies a message segment */

copy:
     entry (P_copy_options_ptr, P_code);

          copy_options_ptr = P_copy_options_ptr;
          if copy_options.extend | copy_options.update
          then do;
                    P_code = error_table_$unsupported_operation;
                    return;
               end;

          call message_segment_$copy (copy_options.source_dir, copy_options.source_name, copy_options.target_dir,
               copy_options.target_name, err_switch, P_code);

          copy_options.target_err_switch = err_switch;
          return;


/* validates that an entry is a message segment */

validate:
     entry (P_dirname, P_ename, P_code);

          call message_segment_$validate (P_dirname, P_ename, P_code);
          return;


/* Returns information about message segments */

suffix_info:
     entry (P_suffix_info_ptr);

          suffix_info_ptr = P_suffix_info_ptr;

          if suffix_info.version ^= SUFFIX_INFO_VERSION_1
          then call sub_err_ (error_table_$unimplemented_version, "bad suffix info version", ACTION_CANT_RESTART, null (),
                    (0), "Invalid version ^a in call to suffix_ms_$suffix_info.", suffix_info.version);
          suffix_info.type = "ms";
          suffix_info.type_name = "message segment";
          suffix_info.plural_name = "message segments";
          string (suffix_info.flags) = ""b;
          suffix_info.extended_acl = "0"b;
          suffix_info.has_switches = "1"b;
          suffix_info.modes = "adros";
          suffix_info.max_mode_len = 5;
          suffix_info.num_ring_brackets = 0;                /* Don't display them */
          string (suffix_info.copy_flags) = ""b;
          suffix_info.copy_flags.names, suffix_info.copy_flags.acl, suffix_info.copy_flags.max_length,
               suffix_info.copy_flags.safety_switch = "1"b;

          suffix_info.info_pathname = "extended_access.gi.info";

          return;

/* returns names of non-standard switches */

list_switches:
     entry (P_desired_version, P_user_area_ptr, P_switch_list_ptr, P_code);

          if P_desired_version ^= SWITCH_LIST_VERSION_1
          then do;
                    P_code = error_table_$unimplemented_version;
                    return;
               end;
          alloc_switch_count, alloc_switch_name_count = 1;
          user_area_ptr = P_user_area_ptr;
          if user_area_ptr = null ()
          then user_area_ptr = get_user_free_area_ ();

          allocate switch_list in (user_area);

          switch_list.version = SWITCH_LIST_VERSION_1;
          switch_list.switches (1).name_index = 1;
          switch_list.switches (1).name_count = 1;
          switch_list.switches (1).default_value = "0"b;
          switch_list.names (1) = "safety";

          P_switch_list_ptr = switch_list_ptr;
          return;
%page;
/* Adds ACL entries to a message segment */
/**** This has to convert structures from the new interface to the old one. */

add_acl_entries:
     entry (P_dirname, P_ename, P_acl_ptr, P_code);

          old_acl_ptr = null ();

          on cleanup
               begin;
                    if old_acl_ptr ^= null ()
                    then do;
                              free old_acl_ptr -> segment_acl_array;
                              old_acl_ptr = null ();
                         end;
               end;

          acl_ptr = P_acl_ptr;
          acl_count = general_acl.count;
          allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
          do idx = 1 to acl_count;                          /* no aggregate, since we rearrange */
               old_acl_ptr -> segment_acl_array (idx).access_name = general_acl.entries (idx).access_name;
               old_acl_ptr -> segment_acl_array (idx).mode = ""b;
               old_acl_ptr -> segment_acl_array (idx).extended_mode = general_acl.entries (idx).mode;
               old_acl_ptr -> segment_acl_array (idx).status_code = 0;
          end;

          call message_segment_$ms_acl_add (P_dirname, P_ename, old_acl_ptr, acl_count, P_code);
          general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
          free old_acl_ptr -> segment_acl_array;
          return;



/* Lists ACL entries on a message segment */

list_acl:
     entry (P_dirname, P_ename, P_desired_version, P_user_area_ptr, P_acl_ptr, P_code);

          old_acl_ptr = null ();

          on cleanup
               begin;
                    if old_acl_ptr ^= null ()
                    then do;
                              free old_acl_ptr -> segment_acl_array;
                              old_acl_ptr = null ();
                         end;
               end;

	user_area_ptr = P_user_area_ptr;
          acl_ptr = P_acl_ptr;

          if acl_ptr ^= null ()
          then do;                                          /* wants to list specific entries */
                    if general_acl.version ^= GENERAL_ACL_VERSION_1
                    then do;
                              P_code = error_table_$unimplemented_version;
                              return;
                         end;
                    acl_count = general_acl.count;
                    allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
                                                            /* only access_name is interesting */
                    old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;

                    call message_segment_$ms_acl_list (P_dirname, P_ename, old_acl_ptr, acl_count, null (), P_code);
                    general_acl.entries (*).mode = old_acl_ptr -> segment_acl_array (*).extended_mode;
                    general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
                    free old_acl_ptr -> segment_acl_array;

               end;


          else do;                                          /* wants to list an acl entirely */
                    if P_desired_version ^= GENERAL_ACL_VERSION_1
                    then do;
                              P_code = error_table_$unimplemented_version;
                              return;
                         end;
                    if user_area_ptr = null ()
                    then user_area_ptr = get_user_free_area_ ();
                    call message_segment_$ms_acl_list (P_dirname, P_ename, old_acl_ptr, acl_count,
                         get_system_free_area_ (), P_code); /* caller wants the entire ACL */
		if P_code ^= 0 then return;
                    if acl_count = 0
                    then do;
                              P_acl_ptr = null ();
                              return;
                         end;

                    allocate general_acl in (user_area);
                    P_acl_ptr = acl_ptr;
                    general_acl.version = GENERAL_ACL_VERSION_1;
                    do idx = 1 to acl_count;
                         general_acl.entries (idx).access_name = old_acl_ptr -> segment_acl_array (idx).access_name;
                         general_acl.entries (idx).mode = old_acl_ptr -> segment_acl_array (idx).extended_mode;
                         general_acl.entries (*).status_code = 0;
                    end;
                    free old_acl_ptr -> segment_acl_array;
                    P_acl_ptr = acl_ptr;
               end;

          return;
%page;
/* Deletes ACL entries from a message segment */

delete_acl_entries:
     entry (P_dirname, P_ename, P_acl_ptr, P_code);

          old_acl_ptr = null ();

          on cleanup
               begin;
                    if old_acl_ptr ^= null ()
                    then do;
                              free old_acl_ptr -> segment_acl_array;
                              old_acl_ptr = null ();
                         end;
               end;

          acl_ptr = P_acl_ptr;
          acl_count = general_delete_acl.count;

          allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
          segment_acl_array (*).access_name = general_delete_acl.entries (*).access_name;

          call message_segment_$ms_acl_delete (P_dirname, P_ename, old_acl_ptr, acl_count, null (), P_code);

          general_delete_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
          free old_acl_ptr -> segment_acl_array;

          return;
%page;
/* Replaces the ACL of a message segment */

/**** NOTE -- the default SysDaemon access for an mseg is NULL.
      Therefore, the no_sysdaemon switch is a noop. */

replace_acl:
     entry (P_dirname, P_ename, P_acl_ptr, P_no_sysdaemon, P_code);

          old_acl_ptr = null ();

          on cleanup
               begin;
                    if old_acl_ptr ^= null ()
                    then do;
                              free old_acl_ptr -> segment_acl_array;
                              old_acl_ptr = null ();
                         end;
               end;

          acl_ptr = P_acl_ptr;
          acl_count = general_acl.count;

          if acl_count = 0                                  /* cannot have no_sysdaemon */
          then do;
                    call message_segment_$ms_acl_replace (P_dirname, P_ename, null (), -1, P_code);
                    return;
               end;

          allocate segment_acl_array in (system_free_area) set (old_acl_ptr);

          do idx = 1 to acl_count;                          /* no need to splice in funny acl */
               old_acl_ptr -> segment_acl_array (idx).access_name = general_acl.entries (idx).access_name;
               old_acl_ptr -> segment_acl_array (idx).extended_mode = general_acl.entries (idx).mode;
               old_acl_ptr -> segment_acl_array (idx).mode = ""b;
               old_acl_ptr -> segment_acl_array (idx).status_code = 0;

          end;

          call message_segment_$ms_acl_replace (P_dirname, P_ename, old_acl_ptr, acl_count, P_code);

          general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
          free old_acl_ptr -> segment_acl_array;

          return;
%page;
get_switch:
     entry (P_dirname, P_ename, P_switch_name, P_value, P_code);

          call message_segment_$validate (P_dirname, P_ename, P_code);
          if P_code = 0
          then do;
                    if P_switch_name = "safety"
                    then do;
                              call hcs_$get_safety_sw (P_dirname, P_ename, value, P_code);
                              P_value = value;
                         end;
                    else P_code = error_table_$argerr;
               end;

          return;

set_switch:
     entry (P_dirname, P_ename, P_switch_name, P_value, P_code);

          call message_segment_$validate (P_dirname, P_ename, P_code);
          if P_code = 0
          then do;
                    if P_switch_name = "safety"
                    then call message_segment_$set_safety_switch (P_dirname, P_ename, P_value, P_code);
                    else P_code = error_table_$argerr;
               end;

          return;
%page;
get_max_length:
     entry (P_dirname, P_ename, P_max_length, P_code);

          call message_segment_$validate (P_dirname, P_ename, P_code);
          if P_code = 0
          then call hcs_$get_max_length (P_dirname, P_ename, P_max_length, P_code);
          return;

set_max_length:
     entry (P_dirname, P_ename, P_max_length, P_code);

          call message_segment_$set_max_length_file (P_dirname, P_ename, P_max_length, P_code);
          return;


get_user_access_modes:
     entry (P_dirname, P_ename, P_user_name, P_ring, P_modes, P_exmodes, P_code);

          P_exmodes = ""b;                                  /* msegs, like dirs, have only modes, no exmodes */
          call message_segment_$validate (P_dirname, P_ename, P_code);
          if P_code = 0
          then call hcs_$get_user_access_modes (P_dirname, P_ename, P_user_name, P_ring, ((36)"0"b), P_modes, P_code);
          return;

     end suffix_ms_;
