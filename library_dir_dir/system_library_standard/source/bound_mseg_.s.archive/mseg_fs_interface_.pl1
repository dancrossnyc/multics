/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-05-28,Palter), approve(86-02-20,MCR7345),
     audit(86-02-21,MSharpe), install(86-07-11,MR12.0-1092):
     Fix delete_acl_entries_seg to not always return error_table_$argerr.
  2) change(85-06-12,Palter), approve(86-02-20,MCR7345),
     audit(86-02-21,MSharpe), install(86-07-11,MR12.0-1092):
     Fix list_acl_seg to not return error_table_$noalloc for an empty ring 0
     ACL.
  3) change(86-10-29,Lippard), approve(86-11-24,MCR7578),
     audit(87-07-13,Dickson), install(87-08-06,MR12.1-1067):
     Modified to enforce restrictions on extended ACLs.
  4) change(88-03-09,Lippard), approve(88-03-28,MCR7869),
     audit(88-04-26,Parisek), install(88-05-03,MR12.2-1044):
     Modified to return specific error codes for inconsistent ACL modes.
                                                   END HISTORY COMMENTS */


/* Message segment primitive operations (mseg_) which interface with the ring-0 file system */

/* Created:  April 1985 by G. Palter based upon mseg_, mseg_create_, mseg_access_, and mseg_chname_ */

/* format: style3,linecom */

mseg_fs_interface_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	P_mseg_operation_ptr
			pointer parameter;
dcl	P_code		fixed binary (35) parameter;

dcl	P_acl_ptr		pointer parameter;		/* add_acl_entries_seg: -> ACL entries to add/update (I);
						   create_seg: -> initial ACL for the segment (if any) (I);
						   delete_acl_entries_seg: -> ACL entries to be deleted (I);
						   list_acl_seg: set -> the segment's ACL (O);
						   list_acl_entries_seg: -> ACL entries to be listed (I);
						   replace_acl_seg: -> the segment's new ACL (I) */

dcl	P_old_name	character (*) parameter;	/* chname_seg: old name to be removed (I) */
dcl	P_new_name	character (*) parameter;	/* chname_seg: new name to be added (I) */

dcl	P_mseg_index_table_ptr			/* delete_seg: -> caller's table of user ring indeces (I) */
			pointer parameter;

dcl	P_safety_switch	bit (1) aligned parameter;	/* set_safety_switch_seg: the new value of the switch (I) */


/* Local copies of parameters */

dcl	code		fixed binary (35);


/* Remaining declarations */

dcl	system_area	area based (system_area_ptr);
dcl	system_area_ptr	pointer;

dcl	1 ring0_acl	aligned based (ring0_acl_ptr),
	  2 entries	(ring0_acl_count) aligned like segment_acl_entry;
dcl	1 ring0_delete_acl	aligned based (ring0_acl_ptr),
	  2 entries	(ring0_acl_count) aligned like delete_acl_entry;
dcl	ring0_acl_ptr	pointer;
dcl	ring0_acl_count	fixed binary;

dcl	1 default_initial_acl			/* general_extended_acl can not be used with like */
			aligned,
	  2 version	character (8) aligned,
	  2 count		fixed binary,
	  2 entries	(3) like general_extended_acl_entry;

dcl	1 cbi		aligned like create_branch_info;

dcl	1 delete_all_others_acl
			aligned like delete_acl_entry;
dcl	delete_all_others_access
			bit (1) aligned;
dcl	delete_all_others_code
			fixed binary (35);

dcl	ext_mode		bit (36) aligned;

dcl	operation_specific_return
			entry (fixed binary (35)) variable;
dcl	operation_specific_abort
			entry () variable;
dcl	operation_name	character (64);

dcl	mseg_dir_name	character (168);
dcl	mseg_entryname	character (32);

dcl	rqo_detected	bit (1) aligned;

dcl	lock_code		fixed binary (35);

dcl	acl_idx		fixed binary;

dcl	1 EMPTY_ACL	aligned static options (constant),
	  2 version	character (8) initial ("gxacl001"),
	  2 count		fixed binary initial (0);

dcl	(
	SYSDAEMONS	initial ("*.SysDaemon.*"),
	ALL_OTHERS	initial ("*.*.*")
	)		character (32) static options (constant);

dcl	DONT_ADD_SYSDAEMONS bit (1) static options (constant) initial ("1"b);

dcl	(
	error_table_$action_not_performed,
	error_table_$argerr,
	error_table_$bad_acl_mode,
	error_table_$bad_mbx_acl_rs,
	error_table_$bad_mbx_acl_awu,
	error_table_$bad_subr_arg,
	error_table_$invalid_lock_reset,
	error_table_$locked_by_this_process,
	error_table_$lock_wait_time_exceeded,
	error_table_$noalloc,
	error_table_$null_info_ptr,
	error_table_$unimplemented_version,
	error_table_$user_not_found
	)		fixed binary (35) external;

dcl	get_system_free_area_
			entry () returns (pointer);
dcl	hcs_$add_acl_entries
			entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
dcl	hcs_$chname_file	entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	hcs_$chname_seg	entry (pointer, character (*), character (*), fixed binary (35));
dcl	hcs_$create_branch_ entry (character (*), character (*), pointer, fixed binary (35));
dcl	hcs_$delentry_seg	entry (pointer, fixed binary (35));
dcl	hcs_$delete_acl_entries
			entry (character (*), character (*), pointer, fixed binary, fixed binary (35));
dcl	hcs_$list_acl	entry (character (*), character (*), pointer, pointer, pointer, fixed binary,
			fixed binary (35));
dcl	hcs_$replace_acl	entry (character (*), character (*), pointer, fixed binary, bit (1), fixed binary (35));
dcl	hcs_$set_safety_sw	entry (character (*), character (*), bit (1), fixed binary (35));
dcl	hcs_$set_safety_sw_seg
			entry (pointer, bit (1), fixed binary (35));
dcl	mseg_index_$delete	entry (pointer, pointer);
dcl	mseg_utils_$abort_operation
			entry (pointer);
dcl	mseg_utils_$begin_operation
			entry (bit (36) aligned, pointer, character (*), character (*), character (*), pointer,
			bit (1) aligned, fixed binary (35));
dcl	mseg_utils_$finish_operation
			entry (pointer);
dcl	mseg_utils_$request_unlock_on_finish
			entry (pointer);
dcl	mseg_utils_$salvage_for_cause
			entry (pointer, fixed binary (35)) options (variable);
dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	sub_err_		entry () options (variable);

dcl	(addr, after, before, bool, dimension, null, reverse, string)
			builtin;

dcl	(area, cleanup)	condition;
%page;
/* Add (or update) ACL entries */

mseg_fs_interface_$add_acl_entries_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$add_acl_entries_seg);
	if code ^= 0
	then call return_from_operation (code);

	call validate_acl ();

	call hcs_$add_acl_entries (mseg_dir_name, mseg_entryname, addr (general_extended_acl.entries),
	     general_extended_acl.count, code);

	call return_from_operation (code);
%page;
/* Change the names -- This entrypoint assumes that the caller has validated the suffix on the new name if necessary. */

mseg_fs_interface_$chname_seg:
     entry (P_mseg_operation_ptr, P_old_name, P_new_name, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$chname_seg);
	if code ^= 0
	then call return_from_operation (code);

	if mseg_ptr ^= null ()			/* use the pointer interface whenever possible */
	then call hcs_$chname_seg (mseg_ptr, P_old_name, P_new_name, code);
	else call hcs_$chname_file (mseg_dir_name, mseg_entryname, P_old_name, P_new_name, code);

	call return_from_operation (code);
%page;
/* Create the segment -- This entrypoint assumes that our caller has already chased any links in order to validate the
   user has access to create the branch and that it will have the proper suffix.  If we are called with the pathname of a
   link, we will fail with error_table_$namedup. */

mseg_fs_interface_$create_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$create_seg);
	if code ^= 0
	then call return_from_operation (code);


	/*** Validate the initial ACL for the new segment -- If we are creating a mailbox or queue message segment, we
	     will supply a standard initial ACL if the caller doesn't provide one.  If we are creating any other type of
	     message segment, the caller must supply the initial ACL as we have no idea what would be proper for that
	     type of segment. */

	if P_acl_ptr = null ()			/* we are to provide the default initial ACL */
	then if (mseg_operation.type = MSEG_TYPE_MBX) | (mseg_operation.type = MSEG_TYPE_MS)
	     then do;
		     acl_ptr = addr (default_initial_acl);
		     default_initial_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;
		     default_initial_acl.count = dimension (default_initial_acl.entries, 1);
		     if before (mseg_operation.caller.group_id, ".") = "anonymous"
		     then default_initial_acl.entries (1).access_name =
			     reverse (after (reverse (mseg_operation.caller.group_id), ".")) || ".*";
		     else default_initial_acl.entries (1).access_name =
			     before (mseg_operation.caller.group_id, ".") || ".*.*";
		     default_initial_acl.entries (2).access_name = SYSDAEMONS;
		     default_initial_acl.entries (3).access_name = ALL_OTHERS;
		     default_initial_acl.entries (*).mode = RW_ACCESS;
		     if mseg_operation.type = MSEG_TYPE_MBX
		     then default_initial_acl.entries (*).extended_mode = MSEG_MBX_INITIAL_ACL (*);
		     else /*** if mseg_operation.type = MSEG_TYPE_MS then */
			default_initial_acl.entries (*).extended_mode = MSEG_QUEUE_INITIAL_ACL (*);
		end;

	     else call sub_err_ (error_table_$bad_subr_arg, operation_name, ACTION_CANT_RESTART, 0, null (),
		     "No initial ACL supplied for ^a which is not a mailbox or queue message segment.",
		     pathname_ (mseg_dir_name, mseg_entryname));

	else call validate_acl ();			/* caller has supplied the initial ACL */


	/*** Create the segment */

	cbi.version = create_branch_version_2;
	string (cbi.switches) = ""b;
	cbi.mbz2 = ""b;
	cbi.bitcnt, cbi.quota, cbi.dir_quota = 0;

	cbi.userid = "*.*.*";			/* give everyone real read/write access ... */
	cbi.mode = RW_ACCESS;
	cbi.rings (*) = mseg_data_$execution_ring;	/* ... but only in the current ring or below */

	if mseg_operation.call_admin_gate
	then do;					/* only make it a multiclass segment if running in ring 1 */
		cbi.priv_upgrade_sw = "1"b;
		cbi.access_class = mseg_operation.caller.max_authorization;
	     end;

	else do;					/* create an ordinary segment if outside ring 1 */
		cbi.parent_ac_sw = "1"b;
		cbi.access_class = ""b;		/* ... this is ignored if parent_ac_sw is set */
	     end;

	call hcs_$create_branch_ (mseg_dir_name, mseg_entryname, addr (cbi), code);
	if code ^= 0
	then call return_from_operation (code);


	/*** We have succesfully created the segment -- Set its initial ACL.  We must use our replace_acl_seg primitive
	     rather than calling hcs_$replace_acl directly in case the caller has supplied an initial ACL without a
	     "*.*.*" term.  Proper operation of the primitives require that all users have read/write real access to any
	     message segment. */

	on area call return_noalloc_from_operation ();

	call replace_acl_seg ();			/* it does the return_from_operation for us */
%page;
/* Delete ACL entries */

mseg_fs_interface_$delete_acl_entries_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	ring0_acl_ptr = null ();
	operation_specific_return = return_from_delete_acl_entries_seg;
	operation_specific_abort = abort_delete_acl_entries_seg;

	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$delete_acl_entries_seg);

	acl_ptr = P_acl_ptr;

	if acl_ptr = null ()
	then do;	/*** An empty general_delete_acl is translated into a request to delete the entire ACL. */
		acl_ptr = addr (EMPTY_ACL);
		on area call return_noalloc_from_operation ();
		call replace_acl_seg ();		/* it does return_from_operation for us */
	     end;

	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then /*** Our caller, as opposed to the user's application, is responsible for creating the ACL structure.
		Therefore, an incorrect version indicates a programming error in our caller. */
	     call sub_err_ (error_table_$unimplemented_version, operation_name, ACTION_CANT_RESTART, null (), 0,
		"general_delete_acl.version = ""^a"".", general_delete_acl.version);


	/*** Examine the ACL entries to be deleted -- If the caller asks to delete the ACL term for "*.*.*", we will
	     actually not delete it.  Instead, we will change its extended access to null as we must insure that all
	     users always have read/write real access to all message segments. */

	system_area_ptr = get_system_free_area_ ();
	ring0_acl_count = general_delete_acl.count;

	on area call return_noalloc_from_operation ();
	allocate ring0_delete_acl in (system_area) set (ring0_acl_ptr);
	revert area;

	ring0_acl_count = 0;			/* no entries in the ACL yet */
	delete_all_others_access = "0"b;

	do acl_idx = 1 to general_delete_acl.count;
	     if general_delete_acl.entries (acl_idx).access_name = ALL_OTHERS
	     then delete_all_others_access = "1"b;
	     else do;
		     ring0_acl_count = ring0_acl_count + 1;
		     ring0_delete_acl.entries (ring0_acl_count).access_name =
			general_delete_acl.entries (acl_idx).access_name;
		end;
	end;


	/*** Delete the requested non "*.*.*" ACL entries */

	if ring0_acl_count ^= 0
	then call hcs_$delete_acl_entries (mseg_dir_name, mseg_entryname, addr (ring0_delete_acl), ring0_acl_count,
		code);

	else code = 0;				/* no non "*.*.*" terms to delete */


	/*** Remove the extended access for "*.*.*" if requested */

	if delete_all_others_access & ((code = 0) | (code = error_table_$argerr))
	then do;					/* don't bother if ring 0 will complain */
		delete_all_others_acl.access_name = ALL_OTHERS;
		call hcs_$delete_acl_entries (mseg_dir_name, mseg_entryname, addr (delete_all_others_acl), 1,
		     delete_all_others_code);
		if delete_all_others_code = error_table_$argerr
		then delete_all_others_code = delete_all_others_acl.status_code;
	     end;

	else delete_all_others_code = error_table_$action_not_performed;


	/*** Return the results of the above actions to our caller */

	ring0_acl_count = 0;

	do acl_idx = 1 to general_delete_acl.count;
	     if general_delete_acl.entries (acl_idx).access_name = ALL_OTHERS
	     then general_delete_acl.entries (acl_idx).status_code = delete_all_others_code;
	     else do;
		     ring0_acl_count = ring0_acl_count + 1;
		     general_delete_acl.entries (acl_idx).status_code =
			ring0_delete_acl.entries (ring0_acl_count).status_code;
		end;
	end;

	if code = 0				/* all non "*.*.*" terms were deleted ... */
	then if delete_all_others_access & (delete_all_others_code ^= 0)
	     then code = error_table_$argerr;		/* ... but the "*.*.*" deletion failed: let the caller know */

	call return_from_operation (code);



/* Special processing required upon the completion of a delete_acl_entries_seg operation */

return_from_delete_acl_entries_seg:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if ring0_acl_ptr ^= null ()
	then do;
		free ring0_delete_acl in (system_area);
		ring0_acl_ptr = null ();
	     end;

	return;

     end return_from_delete_acl_entries_seg;



/* Special processing required upon abnormal termination of a delete_acl_entries_seg operation */

abort_delete_acl_entries_seg:
     procedure ();

	if ring0_acl_ptr ^= null ()
	then do;
		free ring0_delete_acl in (system_area);
		ring0_acl_ptr = null ();
	     end;

	return;

     end abort_delete_acl_entries_seg;
%page;
/* Delete the segment -- We must try to delete even if we can't lock the segment due to RQO or connection failures.
   Therefore, we only request mseg_utils_ to try to lock the segment but not to check the results.  If, however, we do
   lock the segment but can't delete it, we must be certain to unlock the segment before returning to our caller. */

mseg_fs_interface_$delete_seg:
     entry (P_mseg_operation_ptr, P_mseg_index_table_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$delete_seg);

	if code = error_table_$lock_wait_time_exceeded	/* someone's still using it */
	then call return_from_operation (code);

	lock_code = code;				/* we'll need this later in case we can't delete it */

	call hcs_$delentry_seg (mseg_ptr, code);

	if code = 0				/* it's deleted: flush it from the caller's index table */
	then call mseg_index_$delete (mseg_operation_ptr, P_mseg_index_table_ptr);

	else if ^rqo_detected			/* couldn't delete it but we might have locked it */
	then do;
		if lock_code = 0			/* ... we did lock it: be sure it get's unlocked */
		then call mseg_utils_$request_unlock_on_finish (mseg_operation_ptr);
		else if (lock_code = error_table_$invalid_lock_reset)
		     | (lock_code = error_table_$locked_by_this_process)
		then do;				/* ... we locked it but it should have been salvaged */
			call mseg_utils_$salvage_for_cause (mseg_operation_ptr, lock_code);
			call mseg_utils_$request_unlock_on_finish (mseg_operation_ptr);
		     end;
	     end;

	call return_from_operation (code);
%page;
/* List the entire ACL */

mseg_fs_interface_$list_acl_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	acl_ptr, ring0_acl_ptr = null ();
	operation_specific_return = return_from_list_acl_seg;
	operation_specific_abort = abort_list_acl_seg;

	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$list_acl_seg);

	system_area_ptr = get_system_free_area_ ();

	call hcs_$list_acl (mseg_dir_name, mseg_entryname, system_area_ptr, ring0_acl_ptr, null (), ring0_acl_count,
	     code);
	if code ^= 0
	then call return_from_operation (code);


	/*** If the ACL term for "*.*.*" has null extended access, we will not return that term to our caller. */

	acl_count = ring0_acl_count;			/* we'll usually return the entire ACL */

	if ring0_acl_count > 0
	then if (ring0_acl.entries (ring0_acl_count).access_name = ALL_OTHERS)
		& (ring0_acl.entries (ring0_acl_count).extended_mode = MSEG_NULL_ACCESS)
	     then acl_count = ring0_acl_count - 1;


	/*** Copy the ring0 ACL into a general_extended_acl structure as expected by our caller */

	on area call return_noalloc_from_operation ();
	allocate general_extended_acl in (system_area) set (acl_ptr);
	revert area;

	general_extended_acl.version = GENERAL_EXTENDED_ACL_VERSION_1;

	do acl_idx = 1 to acl_count;
	     general_extended_acl.entries (acl_idx) = ring0_acl.entries (acl_idx);
	end;

	P_acl_ptr = acl_ptr;			/* ... and give it to our caller */

	call return_from_operation (0);



/* Special processing required upon the completion of a list_acl_seg operation */

return_from_list_acl_seg:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if ring0_acl_ptr ^= null ()
	then do;
		free ring0_acl in (system_area);
		ring0_acl_ptr = null ();
	     end;

	if (acl_ptr ^= null ()) & (p_code ^= 0)
	then do;					/* we aren't going to return this ACL because of errors */
		free general_extended_acl in (system_area);
		acl_ptr = null ();
	     end;

	return;

     end return_from_list_acl_seg;



/* Special processing required upon abnormal termination of a list_acl_seg operation */

abort_list_acl_seg:
     procedure ();

	if ring0_acl_ptr ^= null ()
	then do;
		free ring0_acl in (system_area);
		ring0_acl_ptr = null ();
	     end;

	if acl_ptr ^= null ()
	then do;
		free general_extended_acl in (system_area);
		acl_ptr = null ();
	     end;

	return;

     end abort_list_acl_seg;
%page;
/* List individual ACL entries */

mseg_fs_interface_$list_acl_entries_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$list_acl_entries_seg);


	/*** Our caller, as opposed to the user's application, is responsible for creating the ACL structure supplied
	      to all mseg_ entrypoints.  Therefore, a missing structure or an incorrect version indicates a programming
	      error in our caller. */

	acl_ptr = P_acl_ptr;

	if acl_ptr = null ()
	then call sub_err_ (error_table_$null_info_ptr, operation_name, ACTION_CANT_RESTART, null (), 0,
		"general_extended_acl_ptr");

	if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	then call sub_err_ (error_table_$unimplemented_version, operation_name, ACTION_CANT_RESTART, null (), 0,
		"general_extended_acl.version = ""^a"".", general_extended_acl.version);


	/*** List the individual ACL entries -- If the caller asks to list the ACL term for "*.*.*" and its extended
	     mode is null, we will claim that "*.*.*" has no ACL term.  We do this to hide from our caller the fact that
	     we must always insure that all users have read/write real access to all message segments. */

	call hcs_$list_acl (mseg_dir_name, mseg_entryname, null (), (null ()), addr (general_extended_acl.entries),
	     general_extended_acl.count, code);

	if (code = 0) | (code = error_table_$argerr)
	then do;					/* only if ring 0 actually returned something */
		do acl_idx = 1 to general_extended_acl.count;
		     if (general_extended_acl.entries (acl_idx).access_name = ALL_OTHERS)
			& (general_extended_acl.entries (acl_idx).extended_mode = MSEG_NULL_ACCESS)
		     then do;
			     general_extended_acl.entries (acl_idx).status_code = error_table_$user_not_found;
			     code = error_table_$argerr;
			end;
		end;
	     end;

	call return_from_operation (code);
%page;
/* Replace the ACL */

mseg_fs_interface_$replace_acl_seg:
     entry (P_mseg_operation_ptr, P_acl_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$replace_acl_seg);

	if P_acl_ptr = null ()
	then acl_ptr = addr (EMPTY_ACL);		/* we must have an ACL structure for proper operation */
	else call validate_acl ();			/* insure the caller's ACL is OK */

	on area call return_noalloc_from_operation ();

	call replace_acl_seg ();			/* it does the return_from_operation for us */



/* Actually replace the ACL -- This internal procedure is also used by create_seg and delete_acl_entries_seg. */

replace_acl_seg:
     procedure ();

dcl	original_acl_ptr	pointer;
dcl	add_all_others_acl	bit (1) aligned;


	/*** Examine the new ACL -- If the new ACL does not contain an entry for "*.*.*", we will supply one with null
	     extended access.  We do this to insure that we always have read/write access to all message segments. */

	add_all_others_acl = "1"b;			/* until proven otherwise */

	do acl_idx = 1 to general_extended_acl.count while (add_all_others_acl);
	     if general_extended_acl.entries (acl_idx).access_name = ALL_OTHERS
	     then add_all_others_acl = "0"b;
	end;

	if add_all_others_acl
	then do;
		system_area_ptr = get_system_free_area_ ();
		original_acl_ptr = acl_ptr;		/* remember where our caller's ACL resides */

		acl_ptr = null ();			/* for cleanup handler */
		operation_specific_return = return_from_replace_acl_seg;
		operation_specific_abort = abort_replace_acl_seg;

		acl_count = original_acl_ptr -> general_extended_acl.count + 1;
		allocate general_extended_acl in (system_area) set (acl_ptr);

		do acl_idx = 1 to original_acl_ptr -> general_extended_acl.count;
		     general_extended_acl.entries (acl_idx) =
			original_acl_ptr -> general_extended_acl.entries (acl_idx);
		end;

		general_extended_acl.entries (acl_count).access_name = ALL_OTHERS;
		general_extended_acl.entries (acl_count).mode = RW_ACCESS;
		general_extended_acl.entries (acl_count).extended_mode = MSEG_NULL_ACCESS;
	     end;


	/*** Replace the ACL */

	call hcs_$replace_acl (mseg_dir_name, mseg_entryname, addr (general_extended_acl.entries),
	     general_extended_acl.count, DONT_ADD_SYSDAEMONS, code);

	call return_from_operation (code);



/* Special processing required upon the completion of a replace_acl_seg operation -- This entrypoint will only be invoked
   if we created a copy of the caller's ACL with an extra entry for "*.*.*".  This entrypoint will copy the per-ACL status
   codes back into the caller's structure and free the copy. */

return_from_replace_acl_seg:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	do acl_idx = 1 to original_acl_ptr -> general_extended_acl.count;
	     original_acl_ptr -> general_extended_acl.entries (acl_idx).status_code =
		general_extended_acl.entries (acl_idx).status_code;
	end;

	free general_extended_acl in (system_area);
	acl_ptr = null ();

	return;

     end return_from_replace_acl_seg;



/* Special processing required upon abnormal termination of a replace_acl_seg operation -- This entrypoint will only be
   invoked if we created a copy of the caller's ACL which we must now free. */

abort_replace_acl_seg:
     procedure ();

	if acl_ptr ^= null ()
	then do;
		free general_extended_acl in (system_area);
		acl_ptr = null ();
	     end;

	return;

     end abort_replace_acl_seg;

     end replace_acl_seg;
%page;
/* Set the safety switch */

mseg_fs_interface_$set_safety_switch_seg:
     entry (P_mseg_operation_ptr, P_safety_switch, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$set_safety_switch_seg);
	if code ^= 0
	then call return_from_operation (code);

	if mseg_ptr ^= null ()			/* use the pointer interface whenever possible */
	then call hcs_$set_safety_sw_seg (mseg_ptr, (P_safety_switch), code);
	else call hcs_$set_safety_sw (mseg_dir_name, mseg_entryname, (P_safety_switch), code);

	call return_from_operation (code);
%page;
/* Common initialization for all operations */

setup_operation:
     procedure ();

	code = 0;

	operation_specific_abort = nulle;		/* nothing special when we abort or return (yet) */
	operation_specific_return = nulle;

	mseg_operation_ptr = null ();

	return;

     end setup_operation;



/* Begin the operation -- This procedure isn't part of setup_operation so that we can be certain to have a cleanup handler
   available at all times that the message segment may be in use. */

begin_operation:
     procedure (p_mseg_operation_id);

dcl	p_mseg_operation_id bit (36) aligned parameter;

	mseg_operation_ptr = P_mseg_operation_ptr;

	call mseg_utils_$begin_operation (p_mseg_operation_id, mseg_operation_ptr, operation_name, mseg_dir_name,
	     mseg_entryname, mseg_ptr, rqo_detected, code);

	return;

     end begin_operation;



/* The "null" entry which indicates that there's no special abort/return processing for an operation */

nulle:
     procedure ();

	return;

     end nulle;
%page;
/* Return after completion of an operation */

return_from_operation:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if operation_specific_return ^= nulle		/* let the operation do anything special */
	then call operation_specific_return (p_code);

	if mseg_operation_ptr ^= null ()		/* may be invoked before we've called begin_operation */
	then call mseg_utils_$finish_operation (mseg_operation_ptr);

	P_code = p_code;				/* set our caller's status code */
	go to RETURN_FROM_OPERATION;

     end return_from_operation;

RETURN_FROM_OPERATION:
	return;



/* Return error_table$_noalloc to our caller after an allocation failure */

return_noalloc_from_operation:
     procedure ();

	if operation_specific_return ^= nulle		/* let the operation do anything special */
	then call operation_specific_return (error_table_$noalloc);

	call mseg_utils_$finish_operation (mseg_operation_ptr);

	P_code = error_table_$noalloc;		/* set our caller's status code */
	go to RETURN_FROM_OPERATION;

     end return_noalloc_from_operation;



/* Abort an operation */

operation_was_aborted:
     procedure ();

	if operation_specific_abort ^= nulle		/* let the operation do anything special */
	then call operation_specific_abort ();

	call mseg_utils_$abort_operation (mseg_operation_ptr);

	return;

     end operation_was_aborted;
%page;
/* Validate the ACL structure -- We force the real modes in the structure to RW_ACCESS as that access is required for
   proper operation of the primitives.  We also verify that the extended modes do not request any unused modes. */

validate_acl:
     procedure ();

dcl	found_invalid_mode	bit (1) aligned;

	acl_ptr = P_acl_ptr;

	/*** Our caller, as opposed to the user's application, is responsible for creating the ACL structure supplied
	      to all mseg_ entrypoints.  Therefore, a missing structure or an incorrect version indicates a programming
	      error in our caller. */

	if acl_ptr = null ()
	then call sub_err_ (error_table_$null_info_ptr, operation_name, ACTION_CANT_RESTART, null (), 0,
		"general_extended_acl_ptr");

	if general_extended_acl.version ^= GENERAL_EXTENDED_ACL_VERSION_1
	then call sub_err_ (error_table_$unimplemented_version, operation_name, ACTION_CANT_RESTART, null (), 0,
		"general_extended_acl.version = ""^a"".", general_extended_acl.version);

/* Check for invalid extended modes.  The following requirements are enforced:
   1. No bits outside of MSEG_FULL_ACCESS may be on.
   2. If r permission is given, s permission must be given.
   3. If w permission is given, a permission must be given.
   4. If u permission is given, a permission must be given. */
	found_invalid_mode = "0"b;

	do acl_idx = 1 to general_extended_acl.count;
	     general_extended_acl.entries (acl_idx).mode = RW_ACCESS;
	     ext_mode = general_extended_acl.entries (acl_idx).extended_mode;
	     if bool (ext_mode, MSEG_FULL_ACCESS, "0010"b) = ""b
		& ^(((ext_mode & MSEG_R_ACCESS) ^= ""b) & ^((ext_mode & MSEG_S_ACCESS) ^= ""b))
		& ^(((ext_mode & MSEG_W_ACCESS) ^= ""b) & ^((ext_mode & MSEG_A_ACCESS) ^= ""b))
		& ^(((ext_mode & MSEG_U_ACCESS) ^= ""b) & ^((ext_mode & MSEG_A_ACCESS) ^= ""b))
	     then general_extended_acl.entries (acl_idx).status_code = 0;
	     else do;
		     if (((ext_mode & MSEG_R_ACCESS) ^= ""b) & ^((ext_mode & MSEG_S_ACCESS) ^= ""b))
		     then general_extended_acl.entries (acl_idx).status_code = error_table_$bad_mbx_acl_rs;
		     else if (((ext_mode & MSEG_W_ACCESS) ^= ""b) & ^((ext_mode & MSEG_A_ACCESS) ^= ""b))
		     | (((ext_mode & MSEG_U_ACCESS) ^= ""b) & ^((ext_mode & MSEG_A_ACCESS) ^= ""b))
		     then general_extended_acl.entries (acl_idx).status_code = error_table_$bad_mbx_acl_awu;
		     else general_extended_acl.entries (acl_idx).status_code = error_table_$bad_acl_mode;
		     found_invalid_mode = "1"b;
		end;
	end;

	if found_invalid_mode			/* error_table_$argerr => check the individual status_codes */
	then call return_from_operation (error_table_$argerr);

	return;

     end validate_acl;

/* format: off */
%page; %include mseg_data_;
%page; %include mseg_operation;
%page; %include mseg_message_info;
%page; %include mseg_wakeup_state;
%page; %include entry_access_info;
%page; %include mseg_operations_;
%page; %include acl_structures;
%page; %include access_mode_values;
%page; %include mseg_access_mode_values;
%page; %include create_branch_info;
%page; %include sub_err_flags;
/* format: on */

     end mseg_fs_interface_;
