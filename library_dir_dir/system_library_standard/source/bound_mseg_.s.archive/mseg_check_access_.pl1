/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-07-19,Palter), approve(86-02-20,MCR7345),
     audit(86-02-21,MSharpe), install(86-07-11,MR12.0-1092):
     Changed to not turn error_table_$noentry into error_table_$no_info if the
     directory name given to the file entrypoint is a link to a directory to
     which the user has status permission.
  2) change(85-07-24,Palter), approve(86-02-20,MCR7345),
     audit(86-02-21,MSharpe), install(86-07-11,MR12.0-1092):
     Return the new error code error_table_$not_own_message when asked to read
     or read&delete a message through an own gate which is not an own message
     and the user has sufficient access to perform the operation if a non-own
     gate were used.
  3) change(86-06-11,Lippard), approve(86-07-10,MCR7441),
     audit(86-08-05,GDixon), install(86-08-06,MR12.0-1118):
     Modified by Jim Lippard to allow courtesy upgrades of messages to
     recipient's access class.
  4) change(86-10-29,Lippard), approve(86-11-24,MCR7578),
     audit(87-07-13,Dickson), install(87-08-06,MR12.1-1067):
     Modified to use error_table_$bad_file_name instead of $badstar and to
     call access_audit_r1_$(check log)_general when there is no valid mseg ptr.
  5) change(88-08-08,Lippard), approve(88-05-02,PBF7881),
     audit(88-08-09,Farley), install(88-09-88,MR12.2-1084):
     Corrected fix for when to call (check log)_general entrypoints.
     (phx20094)  Also changed to generate audit messages when an
     entry's audit switch is on.
                                                   END HISTORY COMMENTS */

/*
   mseg_check_access_ - procedure to calculate validity of access to
   a given message segment and to log the query appropriately.

   written February 1985 by M. Pandolf
   modified March 1985 by M. Pandolf to remove name checking
                                     to use seg ptrs as a rule
			       to save access_info per ring 1 call
   modified April 1985 by M. Pandolf for misc bug fixes
   Modified 1985-04-16, BIM: restructure.
   Modified: 6 May 1985 by G Palter to censor error codes properly
*/

/* format: style3,idind30 */

mseg_check_access_:
     procedure (p_mseg_operation_ptr, p_status);

	return;					/* not an entrypoint */


/* Parameters */

dcl	p_mseg_operation_ptr	pointer parameter;
dcl	p_status			fixed bin (35) parameter;


/* Automatic */

dcl	initiate_failure		bit (1) aligned;

dcl	1 parent_access_info	aligned like entry_access_info;
dcl	parent_access_info_valid	bit (1) aligned;

dcl	link_dir_name		character (168);
dcl	link_entryname		character (32);

dcl	entry_type		fixed bin;
dcl	status			fixed bin (35);
dcl	used_privilege		bit (1) aligned;
dcl	use_ai_restricted		bit (1) aligned;


/* Constants */

declare	(
	SEGMENT			init (1),
	MESSAGE			init (2),
	CHECK			init (3)
	)			fixed bin int static options (constant);

declare	(
	DONT_CHASE		initial (0),
	CHASE			initial (1)
	)			fixed binary (1) static options (constant);


/* Static, External */

dcl	(
	error_table_$ai_restricted,
	error_table_$bad_file_name,
	error_table_$incorrect_access,
	error_table_$invalid_lock_reset,
	error_table_$moderr,
	error_table_$no_info,
	error_table_$no_message,
	error_table_$noentry,
	error_table_$not_own_message,
	error_table_$not_seg_type,
	error_table_$oosw
	)			fixed binary (35) external;

dcl	(
	sys_info$dir_privilege,
	sys_info$ring1_privilege
	)			bit (36) aligned external;


/* Entries */
dcl	access_audit_r1_$check_general
				entry () options (variable) returns (bit (1) aligned);
dcl	access_audit_r1_$check_obj_class
				entry () options (variable) returns (bit (1) aligned);
dcl	access_audit_r1_$check_obj_path
				entry () options (variable) returns (bit (1) aligned);
dcl	access_audit_r1_$check_obj_ptr
				entry () options (variable) returns (bit (1) aligned);
dcl	access_audit_r1_$log_general	entry () options (variable);
dcl	access_audit_r1_$log_obj_class
				entry () options (variable);
dcl	access_audit_r1_$log_obj_path	entry () options (variable);
dcl	access_audit_r1_$log_obj_ptr	entry () options (variable);
dcl	admin_gate_$admin_level_no_fs_audit
				entry (fixed binary (3));
dcl	aim_check_$greater		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	aim_check_$equal		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	aim_check_$greater_or_equal	entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	hcs_$fs_get_path_name	entry (pointer, character (*), fixed binary, character (*), fixed binary (35));
dcl	hcs_$get_access_info	entry (char (*), char (*), fixed bin (1), ptr, fixed bin (35));
dcl	hcs_$get_access_info_seg	entry (ptr, ptr, fixed bin (35));
dcl	hcs_$get_link_target	entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	hcs_$level_set		entry (fixed bin (3));
dcl	pathname_			entry (char (*), char (*)) returns (char (168));
dcl	read_allowed_		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	read_write_allowed_		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	write_allowed_		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	set_lock_$lock		entry (bit (36) aligned, fixed binary, fixed binary (35));
dcl	sub_err_			entry () options (variable);


/* Builtins */

dcl	(addr, after, before, index, length, null, reverse, size, string, substr)
				builtin;
%page;
/**** This entrypoint is called when we have an actual message
      that we propose to delete, read, or update */

message:
     entry (p_mseg_operation_ptr, p_status);


	entry_type = MESSAGE;
	initiate_failure = "0"b;

/**** We do this work in-line here since it has little or nothing
      to do with the segment/check entrypoints. */

	status = 0;

	mseg_operation_ptr = p_mseg_operation_ptr;
	mseg_access_operation_ptr = addr (mseg_access_operations_$data (mseg_operation.access_operation));

	used_privilege = "0"b;
	use_ai_restricted = "0"b;			/* ON => audit as AIM restricted but return no_message */

	call check_message_access ();

	if mseg_operation.suppress_access_checks = "0"b	/* only audit if we actually made access checks ... */
	then if use_ai_restricted
	     then call audit_operation (error_table_$ai_restricted);
	     else call audit_operation (status);

	go to exit;


check_message_access:
     procedure ();

declare	aim_code			fixed bin (35);
declare	owner_code		fixed bin (35);

	aim_code, owner_code = 0;
	md_ptr = mseg_operation.md_ptr;

	if (mseg_operation.access_operation = mseg_access_operations_$read_own_message)
	     | (mseg_operation.access_operation = mseg_access_operations_$read_delete_own_message)
	then /*** The user has asked to only operate on his own messages */
	     if owner_matches ()
	     then owner_code = 0;
	     else if mseg_operation.access_info_valid
		& ((mseg_operation.access_info.extended_access_modes & MSEG_R_ACCESS) ^= ""b)
	     then /*** The user has read access and, therefore, is allowed
		     to find out the he did specify a real message. */
		owner_code = error_table_$not_own_message;
	     else owner_code = error_table_$no_message;

	else if mseg_operation.only_own_access
	then /*** We had to substitute own access for read and/or delete
		access in order to allow this operation to get this far. */
	     if owner_matches ()
	     then owner_code = 0;
	     else if mseg_operation.access_info_valid
		& ((mseg_operation.access_info.extended_access_modes & MSEG_R_ACCESS) ^= ""b)
	     then /*** We substituted own for delete as the user has read
		     access -- Therefore we can tell the user that he lacks
		     the appropriate access to modify the message as he
		     does have enough access to find out it exists. */
		owner_code = error_table_$moderr;
	     else owner_code = error_table_$no_message;

	else owner_code = 0;

	if mseg_operation.suppress_access_checks	/* all we are doing is checking owner-ness */
	then do;
		if owner_code ^= 0
		then status = error_table_$no_message;
		return;
	     end;

	if mseg_access_operation.mseg_access_op_index = MSEG_READ_MESSAGE
	then do;
		if ^aim_check_$greater_or_equal (mseg_operation.caller.authorization,
		     message_descriptor.ms_access_class)
		then if ((mseg_operation.caller.privileges & sys_info$ring1_privilege) ^= ""b)
		     then used_privilege = "1"b;
		     else do;
			     aim_code = error_table_$no_message;
			     use_ai_restricted = "1"b;
			end;
		else ;				/* authorization is OK */
	     end;

	else if mseg_access_operation.mseg_access_op_index = MSEG_MODIFY_MESSAGE
	then do;
		if ^aim_check_$equal (mseg_operation.caller.authorization, message_descriptor.ms_access_class)
		then if ((mseg_operation.caller.privileges & sys_info$ring1_privilege) ^= ""b)
		     then used_privilege = "1"b;
		     else if
			aim_check_$greater (mseg_operation.caller.authorization, message_descriptor.ms_access_class)
		     then aim_code = error_table_$ai_restricted;
		     else do;
			     aim_code = error_table_$no_message;
			     use_ai_restricted = "1"b;
			end;
	     end;


/**** Now invent the correct status code. If we were willing to
      return ai_restricted, then we are willing to inform the user
      that the message exists, and so we return the owner code (if any).
      If the aim code was no_message, meaning that we are not willing
      to reveal the existence of the message, then we must return that. */

	if aim_code = error_table_$ai_restricted & owner_code ^= 0
	then status = owner_code;
	else if aim_code ^= 0
	then status = aim_code;
	else status = owner_code;

	return;


owner_matches:
     procedure returns (bit (1) aligned);

declare	name			char (32) varying;
declare	message_name		char (32) varying;

	name = before (mseg_operation.caller.group_id, ".");
						/* assume user name is relevant to begin with */
	message_name = before (message_descriptor.sender_id, ".");

	if message_name = "anonymous"
	then if name ^= "anonymous"
	     then return ("0"b);			/* only anon can own anon */

	if name = "anonymous"			/* nope, project is important */
	then do;
		name = before (after (mseg_operation.caller.group_id, "."), ".");
						/* PROJECT */
		message_name = before (after (message_descriptor.sender_id, "."), ".");
						/* PROJECT */
	     end;

	return (name = message_name);

     end owner_matches;

     end check_message_access;
%page;
/**** This entrypoint is called for segment-level access checks.
      It respects mseg_access_operation.dont_audit_success.
      Those operations are audited when the $message entrypoint is called */

segment:
     entry (p_mseg_operation_ptr, p_status);

	entry_type = SEGMENT;
	initiate_failure = "0"b;
	go to COMMON;


/**** This entrypoint is called for a few cases where the situation
      is so intricate that the caller takes responsibility for
      the audit situation. */

check:
     entry (p_mseg_operation_ptr, p_status);

	entry_type = CHECK;
	initiate_failure = "0"b;

COMMON:
	p_status = 0;

	mseg_operation_ptr = p_mseg_operation_ptr;
	if mseg_operation.suppress_access_checks
	then return;

	if ^mseg_operation.mseg_ptr_valid & ^mseg_operation.mseg_pathname_valid
	then call sub_err_ (0, "mseg_check_access_", ACTION_CANT_RESTART, null (), (0),
		"Neither a pathname nor a segment pointer was supplied.");

	used_privilege = "0"b;
	mseg_access_operation_ptr = addr (mseg_access_operations_$data (mseg_operation.access_operation));


/**** Obtain access information needed to validate the user's access.  As our
      validation level is now lower than the user's, we can learn things about
      the segment that the user isn't allowed to know.  We must be sure to
      translate any error codes obtain through this knowlege into
      error_table_$no_info. */

	parent_access_info_valid = "0"b;

	if mseg_access_operation.mseg_access_op_index = MSEG_CREATE_SEG
	then do;

/**** Creation is different from the other operations in that we expect that
      the segment doesn't exist.  Therefore, we must find the true pathname
      of the segment by chasing the link ourself and, as the segment is assumed
      to not exist, we need only check that it will have a proper name.  We
      chase the link using the user's validation rather than our own to insure
      that get_link_target returns the status code that the user would see. */

		call hcs_$level_set (mseg_operation.caller.validation_level);
		call hcs_$get_link_target (mseg_operation.dir_name, mseg_operation.entryname, link_dir_name,
		     link_entryname, status);
		if mseg_operation.call_admin_gate
		then call admin_gate_$admin_level_no_fs_audit ((0));
		else call hcs_$level_set (mseg_data_$execution_ring);

		if (status ^= 0) & (status ^= error_table_$noentry)
		then go to audit_and_exit;		/* it's already the proper code */

		mseg_operation.dir_name = link_dir_name;/* be sure to use the "chased" pathname */
		mseg_operation.entryname = link_entryname;
		mseg_operation.access_info.extended_access_modes = MSEG_NULL_ACCESS;
						/* above will force censor_if_neeed into action */

		if ^valid_name (mseg_operation.entryname)
		then do;
			status = censor_if_needed (error_table_$bad_file_name);
			go to audit_and_exit;
		     end;
	     end;


	else if mseg_operation.access_info_valid = "0"b
	then do;
		if mseg_operation.mseg_ptr_valid
		then call hcs_$get_access_info_seg (mseg_operation.mseg_ptr, addr (mseg_operation.access_info),
			status);
		else call hcs_$get_access_info (mseg_operation.dir_name, mseg_operation.entryname, 1 /* chase */,
			addr (mseg_operation.access_info), status);
		if status ^= 0
		then do;
			status = censor_if_needed (status);
			go to audit_and_exit;
		     end;
		mseg_operation.access_info_valid = "1"b;
		if ^valid_segment ()
		then do;
			status = censor_if_needed (error_table_$not_seg_type);
			go to audit_and_exit;
		     end;
	     end;


/**** Check access based upon discretionary and mandatory controls.  As message
      segments do not yet have extended ring brackets, the only ring bracket
      check that must be made is when the user does not have the proper
      discretionary access (i.e., extended modes).  In this case, while we may
      be able to tell the exact error in our ring, the branch's parent's ring
      brackets may prohibit us from telling the user and we must then return
      error_table_$no_info. */

	status = 0;

	if acl_ok_for_operation (status)
	then if aim_ok_for_operation ()
	     then ;
	     else status = error_table_$ai_restricted;
	/*** acl_ok_for_operation will set status to proper value */


/**** Audit the success/failure of the operation if appropriate */

audit_and_exit:
	call audit_operation (status);

exit:
	p_status = status;

	return;
%page;
/**** This entrypoint is called by mseg_mbx_ms_gate_target_ if its call to
      mseg_$initiate_seg fails.  The purpose of this entrypoint is to audit
      the failure of the operation being attempted by the gate target.
      Further, this entrypoint is responsible for censoring the error code
      returned to the user of the gate because, as we are normally at a
      lower validation level than the user, we can determine more about the
      failure to initiate the segment than the user should be allowed
      to know. */

audit_initiate_failure:
     entry (p_mseg_operation_ptr, p_status);

	entry_type = SEGMENT;			/* we want the audit */
	initiate_failure = "1"b;

	mseg_operation_ptr = p_mseg_operation_ptr;
	mseg_access_operation_ptr = addr (mseg_access_operations_$data (mseg_operation.access_operation));

	parent_access_info_valid = "0"b;		/* censor_if_needed must find the parent's access */
	mseg_operation.access_info.extended_access_modes = MSEG_NULL_ACCESS;
	status = censor_if_needed (p_status);

	used_privilege = ((mseg_operation.caller.privileges & sys_info$ring1_privilege) ^= ""b);
	call audit_operation (status);

	p_status = status;				/* be sure the gate returns the right code */

	return;
%page;
valid_segment:
     procedure () returns (bit (1) aligned);

dcl	bracket			fixed bin;

	if mseg_operation.access_info.type ^= 1		/* seg */
	then return ("0"b);

	do bracket = 1 to 3;
	     if mseg_operation.access_info.ring_brackets (bracket) ^= mseg_data_$execution_ring
	     then return ("0"b);
	end;

	return (valid_name (mseg_operation.access_info.entryname));

     end valid_segment;


valid_name:
     procedure (p_entryname) returns (bit (1) aligned);

dcl	p_entryname		character (32) parameter;
dcl	xiffus_index		fixed bin;
dcl	name_length		fixed bin;

	name_length = length (p_entryname);

	xiffus_index = index (reverse (p_entryname), ".");/* suffix backwards, silly */

	if xiffus_index = 0
	then return ("0"b);

	if mseg_operation.type = MSEG_TYPE_MBX
	then if substr (p_entryname, name_length - xiffus_index + 2) ^= "mbx"
	     then return ("0"b);

	if mseg_operation.type = MSEG_TYPE_MS
	then if substr (p_entryname, name_length - xiffus_index + 2) ^= "ms"
	     then return ("0"b);

	return ("1"b);

     end valid_name;
%page;
/**** Censor the status code we want to return to the user if appropriate --
      As we are usually running with a lower validation level than the user,
      we can often determine certain things about the segment that the user
      can not determine on his own.  In particular, if the user were to make
      one of the calls which we made from his validation level, where his real
      effective access to the segment would be null, ring 0 will return
      error_table_$no_info unless the user has non-null effective access to
      the segment's parent.  Therefore, we must do the same.  We do this by
      changing any code to be returned into error_table_$no_info if the user
      has both null extended access to the segment and null effective access
      to the parent.  We use the extended access to the segment rather than
      the real access to decide when we should censor as the extended access
      is what the user considers to be his real access to the segment. */

censor_if_needed:
     procedure (p_return_status) returns (fixed binary (35));

dcl	p_return_status		fixed binary (35);

dcl	parent_dir_name		character (168);
dcl	chase_the_parent		fixed binary (1);
dcl	code			fixed binary (35);


	if (p_return_status ^= error_table_$bad_file_name) & (p_return_status ^= error_table_$incorrect_access)
	     & (p_return_status ^= error_table_$moderr) & (p_return_status ^= error_table_$noentry)
	     & (p_return_status ^= error_table_$not_seg_type)
	then return (p_return_status);		/* only censor codes that user may not be able to determine */

	if parent_access_info_valid = "0"b
	then do;

/**** We need to determine the parent's effective access.  First we must get
      the pathname.  As this procedure can be called before the access_info of
      the segment has been determined, we may have to look in several places to
      find the parent's name. */

		if mseg_operation.access_info_valid
		then do;
			parent_dir_name = mseg_operation.access_info.dir_name;
			chase_the_parent = DONT_CHASE;
		     end;

		else if mseg_operation.mseg_pathname_valid
		then do;
			parent_dir_name = mseg_operation.dir_name;
			chase_the_parent = CHASE;
		     end;

		else /*** if mseg_operation.mseg_ptr_valid then */
		     do;
			call hcs_$fs_get_path_name (mseg_operation.mseg_ptr, parent_dir_name, (0), ((32)" "), code);
			if code ^= 0		/* only fails if parent and segment access both null */
			then return (error_table_$no_info);
			chase_the_parent = DONT_CHASE;
		     end;

		parent_access_info.version = ENTRY_ACCESS_INFO_VERSION_1;

		call hcs_$get_access_info (parent_dir_name, "", chase_the_parent, addr (parent_access_info), code);
		if code ^= 0			/* failure implies no access on the parent */
		then return (error_table_$no_info);

/**** As our execution ring is always lower (or equal) to our caller's
      validation level, we must factor the directory ring brackets into our
      effective access on the parent ourselves. */

		if mseg_operation.caller.validation_level > parent_access_info.ring_brackets (1)
		then /*** outside of modify bracket -- remove M and A access */
		     parent_access_info.effective_access_modes =
			parent_access_info.effective_access_modes & ^(A_ACCESS | M_ACCESS);

		if mseg_operation.caller.validation_level > parent_access_info.ring_brackets (2)
		then /*** outside of status bracket -- remove S access */
		     parent_access_info.effective_access_modes =
			parent_access_info.effective_access_modes & ^(S_ACCESS);

		parent_access_info_valid = "1"b;
	     end;

/**** Now that we have the parent's effective access based on the user's
      validation, we can properly censor the status code we want to return. */

	if ((mseg_operation.access_info.extended_access_modes & MSEG_FULL_ACCESS) = ""b)
	     & ((parent_access_info.effective_access_modes & SMA_ACCESS) = ""b)
	then return (error_table_$no_info);
	else return (p_return_status);

     end censor_if_needed;
%page;
acl_ok_for_operation:
     procedure (return_status) returns (bit (1) aligned);

declare	return_status		fixed bin (35);
declare	grant_on_ex_access		bit (1) aligned;

	grant_on_ex_access = ex_acl_ok ();		/* check if extended access is OK */

	if mseg_access_operation.flags.dir_modes_or_ex_modes
	then if grant_on_ex_access
	     then return ("1"b);
	     else return (parent_access_ok ());

	if ^grant_on_ex_access
	then do;
		return_status = censor_if_needed (error_table_$moderr);
		return ("0"b);
	     end;

	if mseg_access_operation.flags.dir_modes
	then return (parent_access_ok ());

	else return ("1"b);


ex_acl_ok:
     procedure returns (bit (1) aligned);

declare	test_mode			bit (36) aligned;

	if mseg_access_operation.flags.no_modes
	then return ("1"b);

	if mseg_access_operation.flags.non_null_modes
	then return ((mseg_operation.access_info.extended_access_modes & MSEG_FULL_ACCESS) ^= ""b);

/**** O mode is handled as follows: if all the requested x modes are present,
      then we are fine. Otherwise, check the O substitution flags. */

	if (mseg_operation.access_info.extended_access_modes & mseg_access_operation.required_modes)
	     = mseg_access_operation.required_modes
	then return ("1"b);

	if (mseg_operation.access_info.extended_access_modes & MSEG_O_ACCESS) = ""b
	then return ("0"b);				/* if no own mode, then give up */

	if ^(mseg_access_operation.flags.o_for_r | mseg_access_operation.flags.o_for_d)
	then return ("0"b);

	test_mode = mseg_access_operation.required_modes; /* start with the full set */
	if mseg_access_operation.flags.o_for_r
	then test_mode = (test_mode & ^MSEG_R_ACCESS);	/* remove R from the st */
	if mseg_access_operation.flags.o_for_d
	then test_mode = (test_mode & ^MSEG_D_ACCESS);	/* Remove D from the set */

	if (test_mode & mseg_operation.access_info.extended_access_modes) = test_mode
	then do;					/* Do we have enough ? */
		mseg_operation.only_own_access = "1"b;	/* yes, but note that we used O */
		return ("1"b);
	     end;

	else return ("0"b);

     end ex_acl_ok;


parent_access_ok:
     procedure returns (bit (1) aligned);

declare	code			fixed bin (35);

	parent_access_info.version = ENTRY_ACCESS_INFO_VERSION_1;

	if mseg_operation.access_info_valid		/* access_info isn't valid for create operation */
	then call hcs_$get_access_info (mseg_operation.access_info.dir_name, "", (0), addr (parent_access_info), code);
	else call hcs_$get_access_info (mseg_operation.dir_name, "", (0), addr (parent_access_info), code);

	if code ^= 0
	then do;
		return_status = error_table_$no_info;
		return ("0"b);
	     end;

/**** As our execution ring is always lower (or equal) to our caller's
      validation level, we must factor the directory ring brackets into our
      effective access on the parent ourselves. */

	if mseg_operation.caller.validation_level > parent_access_info.ring_brackets (1)
	then /*** outside of modify bracket -- remove M and A access */
	     parent_access_info.effective_access_modes =
		parent_access_info.effective_access_modes & ^(A_ACCESS | M_ACCESS);

	if mseg_operation.caller.validation_level > parent_access_info.ring_brackets (2)
	then /*** outside of status bracket -- remove S access */
	     parent_access_info.effective_access_modes = parent_access_info.effective_access_modes & ^(S_ACCESS);

	parent_access_info_valid = "1"b;		/* stop censor_if_needed from making the call twice */

/**** The directory ring brackets are now properly factored into our access.
      We can now check if we have the access we need. */

	if (mseg_access_operation.required_dir_modes & parent_access_info.effective_access_modes)
	     = mseg_access_operation.required_dir_modes
	then return ("1"b);				/* enough access */

/**** We don't have the required access to the branch's parent -- We want
      to return error_table_$incorrect_access unless the user isn't allowed
      to determine that from his validation level.  Therefore, we'll simply
      allow censor_if_needed to make the decision on which code to return. */

	return_status = censor_if_needed (error_table_$incorrect_access);

	return ("0"b);

     end parent_access_ok;

     end acl_ok_for_operation;
%page;
aim_ok_for_operation:
     procedure returns (bit (1) aligned);

dcl	code			fixed bin (35);

/****^ There are some standard AIM tests, and some peculiar ones.
       the standard ones are keyed off of the READ/APPEND/MODIFY
       classification.
   
       The per-segment checks are these:

       READ-SEGMENT-INFO -- auth >= segment-min-auth 
       MODIFY-SEGMENT-INFO -- auth = segment-min-auth
       COPY-SEGMENT -- max-auth >= segment-max-auth (insures new container will hold all messages)
		   auth = segment-min-auth		   

       Special checks:

       ADD-MESSAGE -- segment-min <= message-acc <= segment-max
		  auth <= message-acc OR ring1 priv
       
       ACCEPT-MESSAGES  -- MODIFY-SEGMENT-INFO + various
		    additional checks below.
*/

	if mseg_access_operation.mseg_access_op_index = MSEG_READ_SEG_ATTR
	then return (read_attr_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_MODIFY_SEG_ATTR
	then return (modify_attr_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_COPY_SEG
	then return (copy_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_ADD_MESSAGE
	then return (add_message_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_MODIFY_MESSAGE
	then return (modify_message_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_ACCEPT_WAKEUPS
	then return (accept_wakeups_ok ());

	else if mseg_access_operation.mseg_access_op_index = MSEG_READ_MESSAGE
	then return (read_message_ok ());

	else return ("1"b);				/* no check defined */


read_attr_ok:
     procedure returns (bit (1) aligned);

	if read_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.parent_access_class)
	then return ("1"b);
	else return (priv_ok ());

     end read_attr_ok;


modify_attr_ok:
     procedure returns (bit (1) aligned);
	if read_write_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.parent_access_class)
	then return ("1"b);
	else return (priv_ok ());

     end modify_attr_ok;


copy_ok:
     procedure returns (bit (1) aligned);

	if aim_check_$greater_or_equal (mseg_operation.caller.max_authorization,
	     mseg_operation.access_info.access_class)
	     & read_write_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.parent_access_class)
	then return ("1"b);
	return (priv_ok () & ((mseg_operation.caller.privileges & sys_info$dir_privilege) ^= ""b));
						/* the caller cannot append the new message segment with the appropriate characteristics without dir priv */

     end copy_ok;


add_message_ok:
     procedure returns (bit (1) aligned);

	if ^(aim_check_$greater_or_equal (mseg_operation.message_info.ms_access_class,
	     mseg_operation.access_info.parent_access_class)
	     &
	     aim_check_$greater_or_equal (mseg_operation.access_info.access_class,
	     mseg_operation.message_info.ms_access_class))
	then return ("0"b);				/* Message not permitted in segment, no-how */

	if priv_ok ()
	then return ("1"b);				/* no need for user checks */

	if ^aim_check_$greater_or_equal (mseg_operation.caller.authorization,
	     mseg_operation.access_info.parent_access_class)
	then return ("0"b);				/* not allowed to write in here */

	if ^aim_check_$greater_or_equal (mseg_operation.message_info.ms_access_class,
	     mseg_operation.caller.authorization)
	then return ("0"b);				/* must mark information >= to self */

/* Reject if message access class is greater than the sender's maximum
   authorization except in the case of courtesy upgrades, when the message
   access class is the same as the authorization of the recipient. */
	if ^aim_check_$greater_or_equal (mseg_operation.caller.max_authorization,
	     mseg_operation.message_info.ms_access_class)
	then if mseg_operation.wakeup_state_valid
	     then if ^aim_check_$equal (mseg_operation.message_info.ms_access_class,
		     mseg_operation.wakeup_state.access_class)
		then return ("0"b);
		else;
	     else return ("0"b);			/* must mark information <= to max */

	return ("1"b);

/**** If message>=user, and message<=segment_max, then user <=segment_max,
      so no seperate check is needed for that. */

     end add_message_ok;


modify_message_ok:
     procedure returns (bit (1) aligned);

/**** This is just the initial segment check */
/**** Can we possibly modify anything in this segment? */

	if read_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.parent_access_class)
	     & write_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.access_class)
	then return ("1"b);
	else return (priv_ok ());

     end modify_message_ok;


read_message_ok:
     procedure returns (bit (1) aligned);

/**** This is just the initial segment check */

	if read_allowed_ (mseg_operation.caller.authorization, mseg_operation.access_info.parent_access_class)
	then return ("1"b);
	else return (priv_ok ());

     end read_message_ok;


priv_ok:
     procedure returns (bit (1) aligned);

	if (mseg_operation.caller.privileges & sys_info$ring1_privilege) ^= ""b
	then do;
		used_privilege = "1"b;
		return ("1"b);
	     end;
	else return ("0"b);

     end priv_ok;


accept_wakeups_ok:
     procedure () returns (bit (1) aligned);

declare	test_lock_id		bit (36) aligned;

	if ^basic_accept_ok ()
	then return ("0"b);

/**** Now check for the covert channel ... */

	if ^mseg_operation.wakeup_state_valid
	then return ("1"b);				/* no message implies that all is fine */

	if aim_check_$greater_or_equal (mseg_operation.caller.authorization, mseg_operation.wakeup_state.access_class)
	then return ("1"b);

	test_lock_id = mseg_operation.wakeup_state.lock_id;
	call set_lock_$lock (test_lock_id, 0, code);

	if (code = 0) | (code = error_table_$invalid_lock_reset)
	then return ("1"b);
	else return ("0"b);


basic_accept_ok:
     procedure returns (bit (1) aligned);

	return (modify_message_ok ());		/* Same check */

     end basic_accept_ok;

     end accept_wakeups_ok;

     end aim_ok_for_operation;
%page;
audit_operation:
     procedure (code);

dcl	code			fixed bin (35) parameter;

declare	1 event_flags		unaligned like audit_event_flags;
declare	do_audit			bit (1) aligned;
declare	1 a_audit_mseg_msg		aligned like audit_mseg_msg_info;

	if entry_type = CHECK
	then return;

	if mseg_access_operation.dont_audit
	then return;
	if ^mseg_operation.call_admin_gate
	then return;

	if code = 0 & entry_type = SEGMENT & mseg_access_operation.flags.dont_audit_success
	then return;				/* This will be audited on the second pass */

	if (code ^= 0) & (code ^= error_table_$ai_restricted) & (code ^= error_table_$incorrect_access)
	     & (code ^= error_table_$moderr) & (code ^= error_table_$no_info) & (code ^= error_table_$oosw)
	then return;				/* only audit success or access violations */

	string (event_flags) = ""b;
	if code = 0
	then event_flags.grant = "1"b;
	if mseg_access_operation.admin
	then event_flags.admin_op = "1"b;
	if used_privilege
	then event_flags.priv_op = "1"b;

/**** Now for a puzzle. Audit the message, or audit the segment? 
      We check based on the message, if any, and then log the 
      segment. */

/* Checks for the case where the audit switch is on.  These need to be
   reached before such checks as the one below for the case where
   mseg_access_operation.access_info_valid is on, as that doesn't
   reference the mailbox entry itself. */

	if mseg_operation.mseg_ptr_valid
	then do_audit =
		access_audit_r1_$check_obj_ptr (string (event_flags), mseg_access_operation.access_operation,
		mseg_operation.mseg_ptr);

	else if mseg_operation.mseg_pathname_valid
	then do_audit =
		access_audit_r1_$check_obj_path (string (event_flags), mseg_access_operation.access_operation,
		pathname_ (mseg_operation.dir_name, mseg_operation.entryname));

	if do_audit then goto DO_THE_AUDIT;

/* Now check for the other conditions. */

	if mseg_operation.md_ptr_valid = "1"b
	then do_audit =
		access_audit_r1_$check_obj_class (string (event_flags), mseg_access_operation.access_operation,
		mseg_operation.md_ptr -> message_descriptor.ms_access_class);

	else if mseg_access_operation.mseg_access_op_index = MSEG_ADD_MESSAGE
	then do_audit =
		access_audit_r1_$check_obj_class (string (event_flags), mseg_access_operation.access_operation,
		mseg_operation.message_info.ms_access_class);

	else if mseg_access_operation.mseg_access_op_index = MSEG_CREATE_SEG
	then do_audit =
		access_audit_r1_$check_obj_class (string (event_flags), mseg_access_operation.access_operation,
		mseg_operation.caller.max_authorization);

	else if mseg_operation.access_info_valid
	then if mseg_access_operation.mseg_access_op_index = MSEG_COPY_SEG
	     then do_audit =
		     access_audit_r1_$check_obj_class (string (event_flags), mseg_access_operation.access_operation,
		     mseg_operation.access_info.access_class);
						/* we are copying all of those message, possibly up to the max */
	     else do_audit =
		     access_audit_r1_$check_obj_class (string (event_flags), mseg_access_operation.access_operation,
		     mseg_operation.access_info.parent_access_class);
						/* The mseg information is controlled at the base access class, not the MAX */

	else if mseg_operation.mseg_ptr_valid
	then do_audit =
		access_audit_r1_$check_obj_ptr (string (event_flags), mseg_access_operation.access_operation,
		mseg_operation.mseg_ptr);

	else if initiate_failure
	then do_audit =
		access_audit_r1_$check_general (string (event_flags), mseg_access_operation.access_operation);

	else if mseg_operation.mseg_pathname_valid
	then do_audit =
		access_audit_r1_$check_obj_path (string (event_flags), mseg_access_operation.access_operation,
		pathname_ (mseg_operation.dir_name, mseg_operation.entryname));

	else call sub_err_ (0, "mseg_check_access_", ACTION_CANT_RESTART, null (), (0),
		"Attempt to audit an mseg operation without a valid mseg_operation.");

	if ^do_audit
	then return;

DO_THE_AUDIT:
	audit_mseg_msg_ptr = null ();
	if mseg_operation.md_ptr_valid
	then do;
		audit_mseg_msg_ptr = addr (a_audit_mseg_msg);
		audit_mseg_msg_info.info_type = AAB_mseg_msg;
		audit_mseg_msg_info.version = AUDIT_MSEG_MSG_INFO_VERSION_5;
		audit_mseg_msg_info.descriptor = mseg_operation.md_ptr -> message_descriptor, by name;
	     end;

	if mseg_access_operation.mseg_access_op_index = MSEG_CREATE_SEG
	then call access_audit_r1_$log_obj_class ("mseg_check_access_", mseg_operation.caller.validation_level,
		string (event_flags), mseg_access_operation.access_operation, mseg_operation.caller.max_authorization,
		pathname_ (mseg_operation.dir_name, mseg_operation.entryname), code, audit_mseg_msg_ptr,
		size (audit_mseg_msg_info));


	else if mseg_operation.mseg_ptr_valid
	then call access_audit_r1_$log_obj_ptr ("mseg_check_access_", mseg_operation.caller.validation_level,
		string (event_flags), mseg_access_operation.access_operation, mseg_operation.mseg_ptr, code,
		audit_mseg_msg_ptr, size (audit_mseg_msg_info));

	else if initiate_failure
	then call access_audit_r1_$log_general ("mseg_check_access_", mseg_operation.caller.validation_level,
		string (event_flags), mseg_access_operation.access_operation,
		pathname_ (mseg_operation.dir_name, mseg_operation.entryname), code,
		audit_mseg_msg_ptr, size (audit_mseg_msg_info));

	else call access_audit_r1_$log_obj_path ("mseg_check_access_", mseg_operation.caller.validation_level,
		string (event_flags), mseg_access_operation.access_operation,
		pathname_ (mseg_operation.dir_name, mseg_operation.entryname), code,
		audit_mseg_msg_ptr, size (audit_mseg_msg_info));

	return;

     end audit_operation;

/* format: off */
%page; %include access_audit_binary_def;
%page; %include access_audit_mseg_info;
%page; %include mseg_access_mode_values;
%page; %include mseg_access_operation;
%page; %include mseg_data_;
%page; %include mseg_message_info;
%page; %include mseg_operation;
%page; %include mseg_segment;
%page; %include mseg_message;
%page; %include access_mode_values;
%page; %include access_audit_eventflags;
%page; %include entry_access_info;
%page; %include mseg_wakeup_state;
%page; %include sub_err_flags;
%page; %include mseg_access_operations_;
%page;

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   Audit (mseg_check_access_): [GRANTED | DENIED] OPERATION_DESCRIPTION ADDED_INFO

   S:  $access_audit

   T:  $run

   M:  An access control decision has been made by the mseg_ primitives.
   The OPERATION_DESCRIPTION specifies the operation requested by the user.
   GRANTED or DENIED indicates whether access was granted or not. 
   the ADDED_INFO describes the user and the message segment or mailbox.
   The associated binary info describes the message in the segment if
   a specific message was involved.

   A:  $notify_ssa

   
   END MESSAGE DOCUMENTATION */

/* format: on */

     end mseg_check_access_;
