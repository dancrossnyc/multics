/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(1986-03-05,LJAdams), approve(1986-03-05,MCR7327),
     audit(1986-03-10,Lippard), install(1986-04-24,MR12.0-1048):
     There are three main programs used in help they are: help, help_, and
     help_rql_.
     
     Some of the changes made include:
     
        restructuring the programs to  use line parsing
     
        change the help command to use ssu_$create_standalone_invocation, and
        to be callable as a request from within ssu_
     
        withdraw support of old format info segs (those containing "\006" as
        paragraph indicators)
     
        make help -bf always return some information
     
        allow "List of" sections to have multiple consecutive list item lines
        starting in the left margin.  Item descriptions are no longer required
        but if present, must be indented three spaces
  2) change(1987-04-27,LJAdams), approve(1987-09-03,MCR7766),
     audit(1988-08-07,GDixon), install(1988-09-13,MR12.2-1109):
     Changed version to Vhelp_args_3.
     Added support for -cs (case_sensitive) and -ncs (non_case_sensitive).
  3) change(1988-02-17,LJAdams), approve(1988-03-07,MCR7857),
     audit(1988-08-07,GDixon), install(1988-09-13,MR12.2-1109):
     The cleanup procedure was not deleting all the temporary segments.
     Changed cleanup to use the help_args.help_data_ptr which points to a
     second help_args structure that is used only for the list_request
     operation.
  4) change(2020-08-12,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     A) Add -info control argument to permit use of help command
        to test locating subsystem topics using :[Info]: divider.
               Syntax: help HELP_INFO_NAME -Info TOPIC
        where TOPIC gives a name in the :[Info]: divider line.
     B) Allow -cs to be given with -ca (as well as -scn and -srh).
     C) Reorder internal arrays holding names of supported control argument.
     D) Allow other control arguments to be given with: -brief or -control_arg
     E) Add hidden control arguments: -no_video (-nv) and -debug (-db)
         -no_video: disables help_ code that overwrites prompt and user response
           after user replies "yes" to the prompt.
         -debug OP: turns on special debugging code in help_.  OP may be an
           integer between 1 and 14 inclusive.  Only values 1, 2, 3 were defined
                as of this writing.
                 OP=1: enable debug_prompt and debug_print calls in help_listen_util_.
                       These show factors affect next prompt, and next text printed;
                 OP=2: enable print stmts in help_util_$format_LIST showing how number
                       of columns and rows were determined in the formatted LIST.
                 OP=3: print iFile.caseI and .structure values seen by help_ after
                       info segment has been parsed.
           The OP value is stored in help_args.pad2(6) array element.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Name:	help								*/
/*									*/
/* This is the command interface to the Multics help facility.  It does the following.	*/
/*									*/
/* 1) call help_$init to obtain a help_args structure in which arguments and control	*/
/*    arguments can be stored.						*/
/* 2) process caller-supplied arguments, filling in the help_args structure.		*/
/* 3) call help_ with the help_args structure to actually find and print the info segs.	*/
/* 4) call help_$term to release the help_args structure.				*/
/*									*/
/* help searches for info segments (having a suffix of info) in the directories given in	*/
/* the search paths of the info_segments (info_segs or infos) search list, which	*/
/* is maintained by the Multics search facility.					*/
/*									*/
/* Status									*/
/*									*/
/* 0) Created:   November, 1969   by T. H. VanVleck				*/
/* 1) Modified:  February, 1975   by T. H. VanVleck - complete rewrite		*/
/* 2) Modified:  September,1976   by Steve Herbst - accept -pathname ctl_arg		*/
/* 3) Modified:  June, 1977	    by Paul Green - diagnose zero-length info segs	*/
/* 4) Modified:  October, 1978    by Gary Dixon - complete rewrite; split into help	*/
/*				command and separate help_ subroutine.		*/
/* 5) Modified:  June, 1983       by Gary Dixon - add ssu_help_request entrypoint.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
%page;
/* format: style2,ind2,ll131,dclind4,idind15,comcol41,linecom,ifthen */
help:
  procedure;

    dcl (Iarg, Iarg_end_ca, Iarg_end_scn, Iarg_start_ca, Iarg_start_scn, Iarg_start_srh, Ipath)
		   fixed bin,
        (Larg, Lop)	   fixed bin (21),
        Nargs	   fixed bin,
        Nctl_args	   fixed bin,
        (Parg, Pop)	   ptr,
        Serror	   bit (1),
        Stopics	   bit (1),
        Sstandalone_invocation
		   bit (1),
        (cleanup, conversion, size)
		   condition,
        code	   fixed bin (35),
        error_type	   fixed bin,
        j		   fixed bin,
        sci_ptr	   ptr;

    dcl arg	   char (Larg) based (Parg),
        op	   char (Lop) based (Pop);

    dcl (bin, convert, dim, index, maxlength, null, substr)
		   builtin;

    dcl com_err_	   entry options (variable),
        cu_$arg_count  entry (fixed bin, fixed bin (35)),
        ssu_$abort_line
		   entry () options (variable),
        ssu_$arg_count entry (ptr, fixed bin),
        ssu_$arg_ptr   entry (ptr, fixed bin, ptr, fixed bin (21)),
        ssu_$destroy_invocation
		   entry (ptr),
        ssu_$get_subsystem_and_request_name
		   entry (ptr) returns (char (72) var),
        ssu_$standalone_invocation
		   entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

    dcl (
        FALSE	   init ("0"b),
        TRUE	   init ("1"b)
        )		   bit (1) aligned int static options (constant);

/* format: off */
    dcl (
        ctl_abbrev	   (19) char (6) varying int static options (constant) init (
		   "-scn",	/* 1 */
		   "-srh",	/* 2 */
		   "-bf",		/* 3 */
		   "-ca",		/* 4 */
		   "-ep",		/* 5 */
		   "-he",		/* 6 */
		   "-bfhe",	/* 7 */
		   "-pn",		/* 8 */
		   "-a",		/* 9 */
		   "-title",	/*10 */
		   "-topic",	/*11 ssu_ only */
                       "-lep",          /*12 */
                       "-cs",           /*13 */
                       "-ncs",          /*14 */
		   "-Info",	/*15 */
		   "-mln",	/*16 */
		   "-minln",	/*17 hidden control arg */
		   "-nv",		/*18 hidden control arg */
		   "-db"),	/*19 hidden control arg */
        ctl_word	   (19) char (20) varying int static options (constant) init (
		   "-section",	/* 1 */
		   "-search",	/* 2 */
		   "-brief",	/* 3 */
		   "-control_arg",	/* 4 */
		   "-entry_point",	/* 5 */
		   "-header",	/* 6 */
		   "-brief_header", /* 7 */
		   "-pathname",	/* 8 */
		   "-all",	/* 9 */
		   "-titles",	/*10 */
		   "-topics",	/*11 ssu_ only */
		   "-list_entry_points",
		                    /*12 */
                       "-case_sensitive",
                                        /*13 */
                       "-non_case_sensitive",
                                        /*14 */
		   "-info",	/*15 */
		   "-maxlines",	/*16 */
		   "-minlines",	/*17 hidden control arg */
		   "-no_video",     /*18 hidden control arg */
		   "-debug"),	/*19 hidden control arg */
        ctl_obsolete   (2) char (3) varying int static options (constant) init (
		   "-sc",		/* 1 */
		   "-sh")		/* 2 */
        );
/* format: on */

    dcl (
        error_table_$active_function,
        error_table_$bad_arg,
        error_table_$badopt,
        error_table_$bigarg,
        error_table_$inconsistent,
        error_table_$noarg,
        error_table_$noentry,
        error_table_$unimplemented_version
        )		   fixed bin (35) ext static;
%page;
%include help_args_;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


    call cu_$arg_count (Nargs, code);	/* help cannot be invoked as active function.	*/
    if code = error_table_$active_function then
      do;
        call com_err_ (code, "help");
        return;
      end;

    Sstandalone_invocation = TRUE;
    sci_ptr = null;
    Phelp_args = null;
    on cleanup call janitor ();	/* Cleanup help arg segment if help aborted.	*/

    call ssu_$standalone_invocation (sci_ptr, "help", "1", null, abort_help_command, code);
    if code ^= 0 then
      do;
        call com_err_ (code, "help", "Calling ssu_$standalone_invocation");
        return;
      end;
    go to COMMON;

ssu_help_request:
  entry (Asci_ptr, AStopics, find_subsystem_info_file);

    dcl Asci_ptr	   ptr,
        AStopics	   bit (1),
        find_subsystem_info_file
		   entry (ptr, char (*)) returns (char (300) var);

    sci_ptr = Asci_ptr;
    AStopics = FALSE;
    Sstandalone_invocation = FALSE;
    Phelp_args = null;
    on cleanup call janitor ();

COMMON:
    call help_$init (ssu_$get_subsystem_and_request_name (sci_ptr), "info_segments", "", Vhelp_args_3, Phelp_args, code);
    if Phelp_args = null then		/* get help input arguments.			*/
      go to ARG_STRUC_ERR;
    if help_args.version ^= Vhelp_args_3 then
      do;				/* check version of structure for validity.	*/
        code = error_table_$unimplemented_version;
        go to ARG_STRUC_ERR;
      end;
    help_args.sci_ptr = sci_ptr;
%page;
    call ssu_$arg_count (sci_ptr, Nargs);
				/* get count of input arguments.		*/
    Serror = FALSE;			/* Remember if error encountered in args.	*/
    Iarg_start_srh = Nargs + 1;	/* -search not encountered so far.		*/
    Iarg_start_ca = Nargs + 1;	/* Same for -control_arg.			*/
    Iarg_start_scn = Nargs + 1;	/* Same for -section			*/
    Iarg_end_ca = 0;
    Iarg_end_scn = 0;
    if Sstandalone_invocation then
      help_args.Sctl.he_pn = TRUE;	/* Output long heading by default.		*/
    help_args.Sctl.he_counts = TRUE;
    Stopics = FALSE;
    Nctl_args = 0;
    do Iarg = 1 to Nargs;		/* Process args.				*/
      call ssu_$arg_ptr (sci_ptr, Iarg, Parg, Larg);
      if index (arg, "-") = 1 then
PROCESS_CONTROL_ARG:
        do;
	Nctl_args = Nctl_args + 1;
	do j = 1 to dim (ctl_abbrev, 1) while (arg ^= ctl_abbrev (j));
	end;
	if j > dim (ctl_abbrev, 1) then
	  do;
	    do j = 1 to dim (ctl_word, 1) while (arg ^= ctl_word (j));
	    end;
	    if j > dim (ctl_word, 1) then
	      do;
	        do j = 1 to dim (ctl_obsolete, 1) while (arg ^= ctl_obsolete (j));
	        end;
	        if j > dim (ctl_obsolete, 1) then
		do;
		  Serror = TRUE;
		  call ssu_$abort_line (sci_ptr, error_table_$badopt, arg);
		  go to NEXT_ARG;
		end;
	      end;
	  end;
	go to DO_ARG (j);
%page;
DO_ARG (1):
	if Iarg = Nargs then
	  go to NO_OPERAND;
	call ssu_$arg_ptr (sci_ptr, Iarg + 1, Pop, Lop);
	if Lop >= 1 then
	  if substr (op, 1, 1) = "-" then
	    go to NO_OPERAND;
	help_args.Sctl.scn = TRUE;
	Iarg = Iarg + 1;		/* -section:  next arg guaranteed part of         */
	Iarg_start_scn = Iarg;	/*   section name.                                */
	Iarg_end_scn = Iarg;
	do Iarg = Iarg + 1 to Nargs;	/* Remaining args not starting with - are part    */
				/*   of section name too.                         */
	  call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	  if Lop >= 1 then
	    if substr (op, 1, 1) = "-" then
	      do;
	        Iarg = Iarg - 1;
	        go to NEXT_ARG;
	      end;
	  Iarg_end_scn = Iarg;
	end;
	go to NEXT_ARG;
%page;
DO_ARG (2):
	if Iarg = Nargs then
	  go to NO_OPERAND;
	help_args.Sctl.srh = TRUE;	/* -search:  All remaining args are search        */
				/*   strings.  Last arg could be -cs/-ncs         */
	Iarg_start_srh = Iarg + 1;	/* Remember where search args begin.              */
	Iarg = Nargs;
	go to NEXT_ARG;

DO_ARG (3):
	help_args.Sctl.bf = TRUE;	/* -brief                                         */
	go to NEXT_ARG;

DO_ARG (4):
	if Iarg = Nargs then
	  go to NO_OPERAND;
	Iarg = Iarg + 1;		/* -control_arg:  args not starting with - are    */
				/*   control argument names.                      */
	Iarg_start_ca = Iarg;	/* Remember where ca names start.                 */
	Iarg_end_ca = Iarg;		/* Remember where last ca name is.		*/
	help_args.Sctl.ca = TRUE;	/* -ca					*/
	do Iarg = Iarg + 1 to Nargs;
	  call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	  if Lop >= 1 then
	    if substr (op, 1, 1) = "-" then
	      do;
	        Iarg = Iarg - 1;
	        go to NEXT_ARG;
	      end;
	  Iarg_end_ca = Iarg;
	end;
	go to NEXT_ARG;
%page;
DO_ARG (5):
	help_args.Sctl.ep = TRUE;	/* -entry_point				*/
	go to NEXT_ARG;

DO_ARG (6):
	help_args.Sctl.he_only = TRUE;/* -header (print only heading)		*/
	go to NEXT_ARG;

DO_ARG (7):
	help_args.Sctl.he_pn = FALSE; /* -brief_header (output brief headings)	*/
	go to NEXT_ARG;

DO_ARG (8):
	if Iarg = Nargs then
	  go to NO_OPERAND;		/* -pathname:  following arg is a pathname,	*/
	Iarg = Iarg + 1;		/*   no matter what it looks like.		*/
	call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	j = 1;
	if maxlength (help_args.path (j).value) < Lop then
	  do;
	    call ssu_$abort_line (sci_ptr, error_table_$bigarg, " ^a ^a", arg, op);
	    Serror = TRUE;
	  end;
	else
	  do;
	    help_args.Npaths, j = help_args.Npaths + 1;
	    help_args.path (j).S = "0"b;
	    help_args.path (j).S.pn_ctl_arg = TRUE;
	    help_args.path (j).value = op;
	    help_args.path (j).info_name = "";
	  end;
	go to NEXT_ARG;
%page;
DO_ARG (9):
	help_args.Sctl.all = TRUE;	/* -all					*/
	go to NEXT_ARG;

DO_ARG (10):
	help_args.Sctl.title = TRUE;	/* -title					*/
	go to NEXT_ARG;

DO_ARG (11):
	Stopics = TRUE;		/* -topics - This arg is allowed only in the	*/
	go to NEXT_ARG;		/*   ssu_ help request, not in help command.	*/
				/*   It supports obsolete function of listing	*/
				/*   all available subsystem info segs.  Proper	*/
				/*   method of doing this is list_help request.	*/

DO_ARG (12):
	help_args.Sctl.lep = TRUE;	/* -list_entrypoints                              */
	goto NEXT_ARG;

DO_ARG (13):
	help_args.Sctl.cs = TRUE;	/* -case_sensitive                                */
	goto NEXT_ARG;

DO_ARG (14):
	help_args.Sctl.cs = FALSE;	/* -non_case_sensitive                            */
	goto NEXT_ARG;

DO_ARG (15):
	if Iarg = Nargs then
	  go to NO_OPERAND;		/* -Info NAME				*/
	Iarg = Iarg + 1;
	call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	j = 1;
	if maxlength (help_args.path (j).info_name) < Lop then
	  do;
	    call ssu_$abort_line (sci_ptr, error_table_$bigarg, " -info ^a", op);
	    Serror = TRUE;
	  end;
	else
	  do;
	    j = help_args.Npaths;
	    if j = 0 then
	      call ssu_$abort_line (sci_ptr, error_table_$inconsistent, " -info must follow an info segment name.");
	    help_args.path (j).info_name = op;
	    if op = "?" then
	         help_args.path (j).info_name_not_starname = TRUE;
              help_args.Sctl.he_info_name = TRUE;
	  end;
	go to NEXT_ARG;

DO_ARG (16):
	if Iarg = Nargs then
	  go to NO_OPERAND;		/* -maxlines N				*/
	Iarg = Iarg + 1;
	call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	on conversion, size go to BAD_MAX_OPERAND;
	help_args.max_Lpgh = convert (help_args.max_Lpgh, op);
	revert conversion, size;
	if help_args.max_Lpgh < 1 | help_args.max_Lpgh > 200 then
	  go to BAD_MAX_OPERAND;
	go to NEXT_ARG;

DO_ARG (17):
	if Iarg = Nargs then
	  go to NO_OPERAND;		/* -minlines N				*/
	Iarg = Iarg + 1;
	call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
	on conversion, size go to BAD_MIN_OPERAND;
	help_args.min_Lpgh = convert (help_args.min_Lpgh, op);
	revert conversion, size;
	if help_args.min_Lpgh < 1 | help_args.min_Lpgh > 50 then
	  go to BAD_MIN_OPERAND;
	go to NEXT_ARG;

DO_ARG (18):
	help_args.Sctl.no_video = TRUE;
	goto NEXT_ARG;		/* -no_video, -nv				*/

DO_ARG (19):
	help_args.Sctl.mbz1 = FALSE;  /* -debug N, -db N				*/
	if Iarg = Nargs then
	  go to NO_OPERAND;		
	Iarg = Iarg + 1;
	call ssu_$arg_ptr (sci_ptr, Iarg, Pop, Lop);
  dcl  db_op fixed bin(4) unsigned;
	on conversion, size go to BAD_DB_OPERAND;
	db_op = convert (db_op, op);
	revert conversion, size;
	if db_op < 0 | db_op > 15 then
	  go to BAD_DB_OPERAND;
	help_args.pad2 (6) = db_op;
	go to NEXT_ARG;

NO_OPERAND:
	Serror = TRUE;		/* No operand given with -scn, -srh, -ca, -pn	*/
	call ssu_$abort_line (sci_ptr, error_table_$noarg, "No operand given following ^a.", arg);
	go to NEXT_ARG;

BAD_DB_OPERAND:
	Serror = TRUE;		/* Bad numeric operand with -debug.	*/
	call ssu_$abort_line (sci_ptr, error_table_$bad_arg, " ^a ^a^/  Operand must be an integer from 0 to 15.", arg, op);
	go to NEXT_ARG;

BAD_MAX_OPERAND:
	Serror = TRUE;		/* Bad numeric operand with -maxlines.	*/
	call ssu_$abort_line (sci_ptr, error_table_$bad_arg, " ^a ^a^/Operand must be an integer from 1 to 200.", arg, op);
	go to NEXT_ARG;

BAD_MIN_OPERAND:
	Serror = TRUE;		/* Bad numeric operand with -minlines.	*/
	call ssu_$abort_line (sci_ptr, error_table_$bad_arg, " ^a ^a^/Operand must be an integer from 1 to 50.", arg, op);
	go to NEXT_ARG;

        end PROCESS_CONTROL_ARG;
      else
PROCESS_ONE_POSITIONAL_ARG:
        do;
	j = 1;
	if maxlength (help_args.path (j).value) < Larg then
	  do;
	    call ssu_$abort_line (sci_ptr, error_table_$bigarg, " ^a", arg);
	    Serror = TRUE;
	  end;
	else
	  do;
	    help_args.Npaths, j = help_args.Npaths + 1;
	    help_args.path (j).S = "0"b;
	    help_args.path (j).info_name = "";
	    if Sstandalone_invocation then
	      help_args.path (j).value = arg;
	    else help_args.path (j).value = find_subsystem_info_file (sci_ptr, arg);
	  end;
        end PROCESS_ONE_POSITIONAL_ARG;
NEXT_ARG:
    end;
%page;
    if Stopics then
      do;
        if Nctl_args ^= 1 | help_args.Npaths ^= 0 then
	call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-topics and any other arguments");
        AStopics = TRUE;
        go to RETURN;
      end;

    if help_args.Sctl.he_only then
      if help_args.Sctl.title | help_args.Sctl.bf | help_args.Sctl.all | help_args.Sctl.ca |  help_args.Sctl.lep
	 then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "
-header may not be given with: ^[ -brief^]^[ -title^]^[ -control_arg^]^[ -all^]^[ -lep^].", help_args.Sctl.bf,
	     help_args.Sctl.title, help_args.Sctl.ca, help_args.Sctl.all, help_args.Sctl.lep);
        end;
    if help_args.Sctl.cs then		/* complain if cs given without scn or srh	*/
      if ^help_args.Sctl.srh & ^help_args.Sctl.scn & ^help_args.Sctl.ca then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "
^[-cs^] may only be used with the -srh, -scn or -ca arguments.", help_args.Sctl.cs);
        end;
    if help_args.Sctl.lep then	/* Complain if scn or srh given with lep          */
      if help_args.Sctl.srh | help_args.Sctl.scn then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-lep may not be given with : ^[ -srh^]^[ -scn^].",
	     help_args.Sctl.srh, help_args.Sctl.scn);
        end;
    if help_args.Npaths = 0 then
      do;				/* Supply default pathname of help_system.gi.info.*/
        if Sstandalone_invocation then
	do;
	  help_args.Npaths = 1;
	  help_args.path (1).value = "help_system.gi.info";
				/* Give info for installed help command.	*/
	  help_args.path (1).info_name = "";
	  help_args.path (1).S = "0"b;
	end;
        else call ssu_$abort_line (sci_ptr, error_table_$noarg, "One or more topic names.");
      end;
%page;
    do Iarg = Iarg_start_ca to Iarg_end_ca;
				/* Add control arg names to arg structure.	*/
      call ssu_$arg_ptr (sci_ptr, Iarg, Parg, Larg);
      j = 1;
      if maxlength (help_args.ca (j)) < Larg then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$bigarg, " -ca ^a
Maximum length is ^d characters.", arg, maxlength (help_args.ca (j)));
        end;
      else
        do;
	help_args.Ncas, j = help_args.Ncas + 1;
	help_args.ca (j) = arg;
        end;
    end;
    do Iarg = Iarg_start_scn to Iarg_end_scn;
				/* Add -section substrings to arg structure.	*/
      call ssu_$arg_ptr (sci_ptr, Iarg, Parg, Larg);
      j = 1;
      if maxlength (help_args.scn (j)) < Larg then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$bigarg, " -scn ^a
Maximum length is ^d characters.", arg, maxlength (help_args.scn (j)));
        end;
      else
        do;
	help_args.Nscns, j = help_args.Nscns + 1;
	help_args.scn (j) = arg;
        end;
    end;
    do Iarg = Iarg_start_srh to Nargs;	/* Add -search args to control structure.	*/
      call ssu_$arg_ptr (sci_ptr, Iarg, Parg, Larg);
      j = 1;
      if maxlength (help_args.srh (j)) < Larg then
        do;
	Serror = TRUE;
	call ssu_$abort_line (sci_ptr, error_table_$bigarg, " -srh ^a
Maximum length is ^d characters.", arg, maxlength (help_args.srh (j)));
        end;
      else
        do;
	help_args.Nsrhs, j = help_args.Nsrhs + 1;
	help_args.srh (j) = arg;
        end;
    end;
    if Serror then
      goto RETURN;         

    call help_ (ssu_$get_subsystem_and_request_name (sci_ptr), Phelp_args, "info", error_type, code);
    go to ERROR (error_type);
%page;
ARG_STRUC_ERR:
ERROR (1):			/* bad help_args version.			*/
ERROR (2):			/* No pathnames given in help_args.		*/
    call ssu_$abort_line (sci_ptr, code, "^/Processing the argument structure used by help_.");
    goto RETURN;

ERROR (3):			/* Error encountered in processing one or more	*/
				/* of the pathnames given in help_args.		*/
    do Ipath = 1 to help_args.Npaths;
      if help_args.path (Ipath).code ^= 0 then
        call ssu_$abort_line (sci_ptr, help_args.path (Ipath).code, " ^[-pn ^]^a", help_args.path (Ipath).S.pn_ctl_arg,
	   help_args.path (Ipath).value);
    end;
    goto RETURN;

ERROR (5):			/* If a nonzero error code is returned, it means	*/
				/* than -section and -search failed to find any	*/
				/* matching info segs to print.  This error must	*/
				/* be reported to the user.			*/
    if code ^= 0 then
      call ssu_$abort_line (sci_ptr, error_table_$noentry,
	 "
Looking for infos matching info_name^[s^]^[^; and -search criteria^; and -section criteria^;"
	 || ", plus -section and -search criteria^].", (help_args.Npaths > 1),
	 (1 + 2 * bin (help_args.Sctl.scn, 1) + bin (help_args.Sctl.srh, 1)));

ERROR (4):			/* No fatal errors encountered.  Most nonfatal	*/
RETURN:				/*   errors have been reported by help_.	*/
    call janitor ();
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


abort_help_command:
  procedure ();

    go to RETURN;

  end abort_help_command;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


janitor:
  procedure;

    dcl Acode	   fixed bin (35);

    if Phelp_args ^= null then
      call help_$term (ssu_$get_subsystem_and_request_name (sci_ptr), Phelp_args, Acode);
    if Sstandalone_invocation then
      call ssu_$destroy_invocation (sci_ptr);

  end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  end help;
