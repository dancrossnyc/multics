
/****^  HISTORY COMMENTS:
  1) change(2020-11-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      Initial version of this subroutine interface for
      verifying info segment contents.
                                                   END HISTORY COMMENTS */

info_seg_verify_:
     proc();
     
  dcl  ioa_ entry() options(variable);

  dcl  info_seg_verify_iFile_ entry (ptr, ptr);

  dcl (hbound, lbound) builtin;

%page;
%include info_seg_dcls_;
%page;
%include verify_info_data;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_verify_$iFiles						        */
	/*									        */
	/* Function: initiates and verifies content of each iFile structure, reporting		        */
	/* failures to meet info segment organization and formatting guidelines.		        */
	/*									        */
	/* If verify_info_data.totalsS is "1"b, two values are set in info_seg_data to		        */
	/* report that issues were found:						        */
	/*   .error_count       count of errors or issues found.				        */
	/*   .highest_severity  severity of the most serious error or issue found.		        */
	/*									        */
	/* If verify_info_data.totalsS is "0"b, those values are set, but error or warning	        */
	/* messages are displayed for each error or issue found in a particular info		        */
	/* segment.  Also, info segment organization is reported to the user as segments	        */
	/* are verified.								        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/* declare info_seg_verify_$iFiles entry (ptr);					        */
	/* call info_seg_$verify_iFiles (verify_info_dataP);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* verify_info_dataP							        */
	/*    points to the verify_info_data structure (see verify_info_data.incl.pl1).		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

iFiles:
     entry (AvidP);
     
  dcl  AvidP ptr,					/* Input argument to info_seg_ routines, pointing to      */
      1 vid aligned like verify_info_data based (AvidP);	/*  the verify_info_data structure.		        */

  dcl  info_seg_$parse_iFile entry (ptr, ptr);

     do iFileP = vid.isd.files.firstP			/* For each file...				        */
	repeat iFile.nextP while(iFileP ^= null());

	call info_seg_$parse_iFile (addr(vid.isd), iFileP);    
	if  iFile.P = null()  then			/*  - parse the file into its components.	        */
	     return;

	vid.segs_processed = vid.segs_processed + 1;	/*  - count the file as having been parsed.	        */
	call info_seg_verify_iFile_ (AvidP, iFileP);	/*  - verify file against info seg standards.	        */
	end;
     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_verify_$display_specifications
	/* 
	/* Function: displays guidelines for:
	/*  - supported info segment block orders.
	/*  - rules for determining kind of each block.
	/*  - recommended section titles used in each kind of block.
	/*  - preferred section titles, with recommendations for mapping
	/*    deprecated (obsolete) titles to a preferred title.
	/* 
	/* Syntax:
	/* declare info_seg_$display_specifications entry (ptr);
	/* call info_seg_$display_specifications (verify_info_dataP);
	/* 
	/* Arguments:
	/* verify_info_dataP
	/*    points to the verify_info_data structure.  Refer to verify_info_data.incl.pl1.
	/* 
	/* Notes:
	/* The specification(s) to display are specified by the verify_info_data.rules_area index.  
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

display_specifications:
     entry (AvidP);
     
/*dcl  AvidP ptr;					/* Pointer to verify_info_data input structure.	        */

  dcl  BAD_title_seenS bit(1) aligned;
  dcl (caseI, kindID, ruleI) fixed bin;			/* Index in table arrays.			        */

     if  vid.rules_area < lbound(VI_RULES_AREA,1) | vid.rules_area > hbound(VI_RULES_AREA,1)  then
	return;
     goto RULES(vid.rules_area);
     
RULES( VI_RULE_all_areas ):
     call rules_file_structure();
     call rules_block_kind();
     call rules_for_sections_of_all_kinds();
     call rules_known_section_titles();
     return;
     

RULES( VI_RULE_file_structure ):
     call rules_file_structure();
     return;

RULES( VI_RULE_block_kind ):
     call rules_block_kind();
     return;

RULES( VI_RULE_section_titles ):
     call rules_known_section_titles();
     return;
     

RULES( VI_RULE_all_kinds ):
     call rules_for_sections_of_all_kinds();
     return;


RULES( VI_RULE_command_titles ):
     call rules_titles_for_block_kind (iBlok_kind_COMMAND);
     call rules_titles_for_block_kind (iBlok_kind_ACTIVE_FUNCTION);
     call rules_titles_for_block_kind (iBlok_kind_COMMAND_AF);
     return;

RULES( VI_RULE_subsystem_titles ):
     call rules_titles_for_block_kind (iBlok_kind_REQUEST);
     call rules_titles_for_block_kind (iBlok_kind_ACTIVE_REQUEST);
     call rules_titles_for_block_kind (iBlok_kind_REQUEST_AR);
     call rules_titles_for_block_kind (iBlok_kind_SUBSYSTEM_SUMMARY);
     call rules_titles_for_block_kind (iBlok_kind_SUBSYSTEM_TOPIC);
     return;

RULES( VI_RULE_request_titles ):
     call rules_titles_for_block_kind (iBlok_kind_REQUEST);
     call rules_titles_for_block_kind (iBlok_kind_ACTIVE_REQUEST);
     call rules_titles_for_block_kind (iBlok_kind_REQUEST_AR);
     return;

RULES( VI_RULE_gi_titles ):
     call rules_titles_for_block_kind (iBlok_kind_GENERAL_INFO);
     return;

RULES( VI_RULE_topic_titles ):
     call rules_titles_for_block_kind (iBlok_kind_SUBSYSTEM_TOPIC);
     return;

RULES( VI_RULE_subroutine_titles ):
     call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_INTRO);
     call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_BRIEF_INTRO);
     call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_ENTRY);
     return;
     
RULES(VI_RULE_io_titles ):
     call rules_titles_for_block_kind (iBlok_kind_IO_MODULE);
     call rules_titles_for_block_kind (iBlok_kind_IO_OPERATION);
     call rules_titles_for_block_kind (iBlok_kind_IO_CONTROL);
     return;

%page;
rules_for_sections_of_all_kinds:
	proc();
	
	call rules_titles_for_block_kind (iBlok_kind_COMMAND);
	call rules_titles_for_block_kind (iBlok_kind_ACTIVE_FUNCTION);
	call rules_titles_for_block_kind (iBlok_kind_COMMAND_AF);

	call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_INTRO);
	call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_BRIEF_INTRO);
	call rules_titles_for_block_kind (iBlok_kind_SUBROUTINE_ENTRY);

	call rules_titles_for_block_kind (iBlok_kind_REQUEST);
	call rules_titles_for_block_kind (iBlok_kind_ACTIVE_REQUEST);
	call rules_titles_for_block_kind (iBlok_kind_REQUEST_AR);
	call rules_titles_for_block_kind (iBlok_kind_SUBSYSTEM_SUMMARY);
	call rules_titles_for_block_kind (iBlok_kind_SUBSYSTEM_TOPIC);
     
	call rules_titles_for_block_kind (iBlok_kind_GENERAL_INFO);

	call rules_titles_for_block_kind (iBlok_kind_IO_MODULE);
	call rules_titles_for_block_kind (iBlok_kind_IO_OPERATION);
	call rules_titles_for_block_kind (iBlok_kind_IO_CONTROL);

	end rules_for_sections_of_all_kinds;
     

rules_file_structure:	         /*  block divider sequence  => file structID => struct_str iFile_structure     */
          proc();

	call ioa_ ("               Info Block Divider Lines");
	call ioa_ ("");
	call ioa_ (":Info: NAME1: ... {NAMEn:}  BLOCK_HEADING");
	call ioa_ ("	Normal block divider.  From 1 to 10 names may be given.");
	call ioa_ ("	BLOCK_HEADER may appear on line following divider token.");
	call ioa_ ("	NAMEs are expected to appear as names on the info segment");
	call ioa_ ("	with an "".info"" suffix (e.g., NAME1.info).");
	call ioa_ (":[Info]: NAME1: ... {NAMEn:}  BLOCK_HEADING");	
	call ioa_ ("	Hidden block divider.  Like :Info: divider, except NAMEs");
	call ioa_ ("	will not appear as names on the info segment.  Hidden blocks");
	call ioa_ ("	are accessed by a subsystem's help request, which calls help_");
	call ioa_ ("	with a specific info seg PATHNAME and separate INFO_NAME to");
	call ioa_ ("	locate a particular hidden block.");
	call ioa_ (":Entry: EP_NAME1: ... {EP_NAMEn:}  BLOCK_HEADING");
	call ioa_ ("	Subroutine entrypoint description block divider.  From 1 to 10");
	call ioa_ ("	EP_NAMEs may be given, each up to 32 characters in length.");
	call ioa_ (":hcom:");
	call ioa_ ("	Info segment history comment divider.  Must be final divider");
	call ioa_ ("	in info seg.  All lines following this divider are ignored by");
	call ioa_ ("	verify_info and help_.");
	call ioa_ ("");
	call ioa_ ("");
	call ioa_("                Supported Info Segment Structures^/");
	call ioa_(      "^-       SPECIFICATION");
	call ioa_(" CASE ^-CARD  1st MIDDLE LAST       ERROR   or   INFO SEG STRUCTURE");
	do caseI = lbound(iFile_structure.array, 1) to hbound(iFile_structure.array, 1);
	     call show_file_structure (caseI);
	     end;
	call ioa_ ("");
	call ioa_ ("  LEGEND:  CARDinality");
	call ioa_ ("            J     J total blocks of any divider type.");
	call ioa_ ("            J+    J or more total blocks of any divider type.");
	call ioa_ ("");
	call ioa_ ("                1st Block");
	call ioa_ ("                 N     First info block has no block divider.");
	call ioa_ ("                 E     First info block has :Entry: block divider.");
	call ioa_ ("                 I     First info block has :Info: block divider.");
	call ioa_ ("                [I]    First info block has :[Info]: block divider.");
	call ioa_ ("                 .     Don't care about first block divider.");
	call ioa_ ("");
	call ioa_ ("                    MIDDLE Blocks");
	call ioa_ ("                     H.H.     Two or more history blocks in info segment.");
	call ioa_ ("                     H        History block in middle of info segment.");
	call ioa_ ("                     E...     One or more :Entry: blocks in middle of segment.");
	call ioa_ ("                     E.I.     Mixture of :Entry: and :Info: or :[Info]: blocks.");
	call ioa_ ("                     I...     One or more :Info: or :[Info]: blocks in middle of segment.");
	call ioa_ ("");
	call ioa_ ("                           LAST Block");
	call ioa_ ("                            H     History comment is last block of segment.");
	call ioa_ ("                            .     Don't care about last block of segment.");
	call ioa_("^- --------------------------------------------------"); 

	end rules_file_structure;
     
rules_block_kind:
          procedure();	         /*  1st/2nd section titles  => block kindID => kind_str    iBlok_kind	        */
			         /*        file/block names  => block kindID                iBlok_name	        */

	call ioa_("^/         Kinds of Info Blocks");
	call ioa_("^/^2x iBlok.kind ^2x Block Kind^/");
	do kindID = iBlok_kind_COMMAND,
		  iBlok_kind_ACTIVE_FUNCTION,
		  iBlok_kind_COMMAND_AF,
		  
		  iBlok_kind_GENERAL_INFO,

		  iBlok_kind_SUBROUTINE_INTRO,
		  iBlok_kind_SUBROUTINE_BRIEF_INTRO,
		  iBlok_kind_SUBROUTINE_ENTRY,

		  iBlok_kind_REQUEST,
		  iBlok_kind_ACTIVE_REQUEST,
		  iBlok_kind_REQUEST_AR,
		  iBlok_kind_SUBSYSTEM_SUMMARY,
		  iBlok_kind_SUBSYSTEM_TOPIC,

		  iBlok_kind_IO_MODULE,
		  iBlok_kind_IO_OPERATION,
		  iBlok_kind_IO_CONTROL,

		  iBlok_kind_HISTORY_COMMENT,

		  iBlok_kind_Header_Only,

		  iBlok_kind_Unknown;
	     call ioa_("^- ^2d ^2x ^a", kindID, iBlok_kind_display_string(kindID));
	     end;
	

	call ioa_("^3/         Rules for Determining Kind of Info Block^/");
	do kindID = lbound(iBlok_kind.array, 1) to hbound(iBlok_kind.array, 1);
	     call show_block_kind (kindID);
	     end;
	call ioa_("^- --------------------------------------------------"); 

	end rules_block_kind;

rules_titles_for_block_kind:
     	proc (kindID);	         /*              block kind  => section_title_sequences     iSect_sequence      */

  dcl  kindID fixed bin;				/* An iBlok_kind_XXX value for kind of block whose        */
						/*  section titles are to be displayed.		        */

	if  show_section_title_sequence (kindID)  then
	     call ioa_ ("");

	call ioa_("^- --------------------------------------------------"); 

	end rules_titles_for_block_kind;

rules_known_section_titles:
     	proc();		         /*          section_titles  (PREF vs BAD)                  iSect_title	        */

	call ioa_ ("^/ Preferred Section Titles (in alphabetic order, each preceded by section type)^/");
	BAD_title_seenS = F;

	do ruleI = lbound(iSect_title.array, 1) to hbound(iSect_title.array, 1);
	     if ^BAD_title_seenS then
	     if  iSect_title.ilk(ruleI) = BAD  then do;
		BAD_title_seenS = T;
		call ioa_ ("^/ Obsolete or Deprecated Section Title ^vt        Preferred Title^/", 
		     iSect_title_MAXLENGTH_KNOWN_TITLE+2);
		end;

	     call show_section_title (ruleI);
	     end;
	call ioa_("^- --------------------------------------------------"); 

	end rules_known_section_titles;
%page;
/* -------------------------------------------------------------------------------- 
   INTERNAL PROCEDURE:  show_block_kind

   FUNCTION:  Displays rules followed by verify_info for determining kind of block
	    represented by an info block (including :Entry: blocks) of unknown kind.
	    These rules are actually defined by: info_seg_specifications_.cds, and
	    are actually implemented by info_seg_parse_.

   RULE FLAVORS: Several attributes of a info block may be used in a rule to determine 
	       the kind of block.  These different combinations of attribute types 
	       characterize a rule "flavor".

	       A) A rule with no attributes leaves the info block kind unchanged
		(usually iBlok_kind_Unknown).

                 B) A rule with method: "Refine an earlier kind", combined with a
		"first section title" changes kind of block to a different kind.

                 C) A rule with method: "Refine an earlier kind", and no "first 
		section title" requirement leaves block kind unchanged.

                 D) A rule with method: "Path contains >subsystem> or >ss>", combined
	          with a 1 or 2 titles changes kind of block to a different kind.
		(Note: so far, flavor D is only kind of rule that accepts a method
		 plus 1, or 1 and 2, section titles.  For all other flavors, .third_title=0)

                 E) A rule with method: "Names on info seg determine kind" changes
		info block kind if certain name extensions (like .gi.info) are
		attached to the block, or to the info seg containing only one block
		with no :Info: dividers.

                 F) A rule with method: "Header date before 1985" and a specific
		section title changes block kind to a specific kind value.

	       G) A rule with method: "Block name is: summary.topic"
		changes block kind to iBlok_kind_SUBSYSTEM_SUMMARY.

                 H) A rule with two section titles changes info block type to a
		specific value.
   -------------------------------------------------------------------------------- */

show_block_kind:
     proc (AruleI);

  dcl  AruleI fixed bin;				/* Index into iBlok_kind array		        */

  dcl (title, title1, title2) char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var;
						/* Section title string.			        */
  dcl (type1, type2) fixed bin;

     if  lbound(iBlok_kind.array, 1) <= AruleI  &  AruleI <=  hbound(iBlok_kind.array, 1)  then;
     else return;
     
     if  iBlok_kind.method_or_title(AruleI) = 0  then do;	/* Rule flavor: A				        */

	call ioa_ (" Rule ^2d:  => ^33t block kind remains:  ^a", AruleI, 
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	end;

     else if       iBlok_kind.method_or_title(AruleI) = iBlok_method_REFINE_EARLIER_KIND  &
	         iBlok_kind.second_title(AruleI)   ^= 0  then do;
						/* Rule flavor: B				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI,
	     iBlok_kind_display_string(iBlok_kind_SUBROUTINE_INTRO) );
	call ioa_ ("^- &   1st section:  ^a", form_section_title( iBlok_kind.second_title(AruleI) ) );
	call ioa_ ("^- => ^[^35t block kind stays^;^30t block kind changes to^]:  ^a", 
	     iBlok_kind.kindID(AruleI) = iBlok_kind_SUBROUTINE_INTRO,
	     iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else if       iBlok_kind.method_or_title(AruleI) = iBlok_method_REFINE_EARLIER_KIND  &
	         iBlok_kind.second_title(AruleI)    = 0  then do;
						/* Rule flavor: C				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI,
	     iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	call ioa_ ("^- => ^35t block kind stays:  ^a", 
	     iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else if       iBlok_kind.method_or_title(AruleI) = iBlok_method_PATH_subsystem  &
	         iBlok_kind.second_title(AruleI)   ^= 0			     &
	         iBlok_kind.third_title (AruleI)   ^= 0  then do;
						/* Rule flavor: D				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI,
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   Info seg directory contains entryname: subsystem or ss");
	call ioa_ ("^- &   1st section:  ^a", form_section_title( iBlok_kind.second_title(AruleI) ) );
	call ioa_ ("^- &   2nd section:  ^a", form_section_title( iBlok_kind.third_title (AruleI) ) );
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else if       iBlok_kind.method_or_title(AruleI) = iBlok_method_PATH_subsystem  &
	         iBlok_kind.second_title(AruleI)   ^= 0  then do;
						/* Rule flavor: D				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI,
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   Info seg directory contains entryname: subsystem or ss");
	call ioa_ ("^- &   1st section:  ^a", form_section_title( iBlok_kind.second_title(AruleI) ) );
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else if       iBlok_kind.method_or_title(AruleI) = iBlok_method_NAMES_MAY_TELL_KIND  then do;
						/* Rule flavor: E				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI, 
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   Block name has suffix...^[ ^47t or File name has suffix...^]", 
	     name_type (iBlok_kind.kindID(AruleI)) = iBlok_name_ENDS);
	call right_adjusted_arrays (iBlok_kind.kindID(AruleI) );
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );

	if  iBlok_kind.second_title(AruleI) ^= 0  then do;
	     call ioa_ ("^/  OR^-File structure sets initial block kind to:^54t ^a", 
		iBlok_kind_display_string(iBlok_kind_Unknown) );
	     call ioa_ ("^- &   1st section:  ^a", form_section_title (iBlok_kind.second_title(AruleI)) );
	     call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	     end;
	end;
     else if  iBlok_kind.method_or_title(AruleI) = iBlok_method_DATE_BEFORE_1985  &
	    iBlok_kind.second_title(AruleI)   ^= 0  then do;
						/* Rule flavor: F				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI, 
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   Block header has ISO_DATE before 1985");
	call ioa_ ("^- &   1st section:  ^a", form_section_title( iBlok_kind.second_title(AruleI) ) );
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else if  iBlok_kind.method_or_title(AruleI) = iBlok_method_NAME_summary_topic  &
	    iBlok_kind.second_title(AruleI)    = 0  then do;
						/* Rule flavor: G				        */
	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI, 
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   :Info: block has name: summary.topic");
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     else do;					/* Rule flavor: H				        */
						/* method_or_title is a section title		        */ 
	type1 = iBlok_kind.method_or_title(AruleI);	/* Copy section title constraints from the table row,     */
	type2 = iBlok_kind.second_title(AruleI);	/*  for ease of reference below.		        */
	title1 = form_section_title(type1);
	if  type2 ^= 0  then 
	     title2 = form_section_title(type2);
	else title2 = "";

	call ioa_ (" Rule ^2d:^-File structure sets initial block kind to:^54t ^a", AruleI, 
	     iBlok_kind_display_string(iBlok_kind_Unknown) );
	call ioa_ ("^- &   1st section:  ^a^[^/" || 
		 "^-     2nd section:  ^a^/" ||
		 "^-      (in ^[that^;either^] order)^;^2s^]", 
	     title1, 
	     (type2 ^= 0), 
	      title2, (iBlok_kind.kindID(AruleI) = iBlok_kind_SUBROUTINE_ENTRY));
	call ioa_ ("^- => ^30t block kind changes to:  ^a", iBlok_kind_display_string(iBlok_kind.kindID(AruleI)) );
	end;
     call ioa_ ("");
     return;


right_adjusted_arrays:				/* Internal procedure to right-adjust column entries      */
	proc (AkindID);				/*  in a column of 32 chars wide strings.	        */

  dcl  AkindID fixed bin;
  dcl  Aname_type fixed bin;
     
  dcl nmI fixed bin;

	do nmI = lbound(iBlok_name.array, 1) to hbound(iBlok_name.array, 1);
	     if  iBlok_name.kindID(nmI) = AkindID  then do;	
		if       iBlok_name.name_type(nmI) = iBlok_block_name_ENDS  then
		     call ioa_("^- ^vx^a", 
			32-length(iBlok_name.name(nmI, iBlok_NAME_WITHOUT_info))+1, 
				iBlok_name.name(nmI, iBlok_NAME_WITHOUT_info) );
		else if  iBlok_name.name_type(nmI) = iBlok_name_ENDS  then do;
		     call ioa_("^- ^vx^a ^vx^a", 
			32-length(iBlok_name.name(nmI, iBlok_NAME_WITHOUT_info))+1, 
				iBlok_name.name(nmI, iBlok_NAME_WITHOUT_info),
			32-length(iBlok_name.name(nmI, iBlok_NAME_WITH_info))+1, 
				iBlok_name.name(nmI, iBlok_NAME_WITH_info) );
		     end;
		end;
	     end;
	return;

name_type:
	entry (AkindID) returns (fixed bin);
     
	do nmI = lbound(iBlok_name.array, 1) to hbound(iBlok_name.array, 1);
	     if  iBlok_name.kindID(nmI) = AkindID  then 
		return (iBlok_name.name_type(nmI));
	     end;
	return (iBlok_name_ENDS);

	end right_adjusted_arrays;

     end show_block_kind;
%page;
/* -----------------------------------------------------------------
   INTERNAL_PROCEDURE:  show_file_structure

   DEFINITION:
    Info seg structure
	   A pattern of :Info: and :Entry: and :Internal: blocks. 
	   These may be patterns supported by help_; or unsupported
	   patterns.

   FUNCTION: Display one rule for info seg structure.  An info seg's
	   pattern of blocks is compared against ordered set of rules
	   until the pattern matches a given rule.  The seg's structure
	   is then known:
                 iFile.structure = iFile_structure.array(AruleI).structID;

	   The ordered set of rules is displayed by calling with 
	   AruleI incrementing from 1 to hbound(iFile_structure.array,1).

	   info_seg_dcls_.incl.pl1 contains iFile_structure_XXX
	   constants which identify the supported patterns; 
	   and iFile_struc_err_XXX constants identifying unsupported
	   patterns.  
   ----------------------------------------------------------------- */

show_file_structure:
     proc (AruleI);

  dcl  AruleI fixed bin;				/* Index into iFile_structure.array, where:	        */
						/*    1 <=  AruleI  <= hbound(iFile_structure.array,1)    */

     call ioa_("  ^2d  ^-| ^19a |  ^[Severity 5. ^;^12x^]^a", 
	AruleI, iFile_structure.spec(AruleI), 
	(iFile_structure.structID(AruleI) <= iFile_struc_err_UNSET), iFile_structure.display_label(AruleI) );

     end show_file_structure;
%page;
/* -----------------------------------------------------------------
   INTERNAL PROCEDURE:  show_section_title

   FUNCTION:  Show one item from the list of known info seg 
	    section titles.  If iSect_title.ilk = PREF, the title
	    is preferred for use in today's info segs; only the 
	    section title is listed.  If .ilk = BAD, the title is
	    obsolete or its use is deprecated; the title and its
	    recommended replacement title are shown.

	    Each title may be an exact string; or may begin with
	    an exact substring and continue with other lowercase
	    letters.  The form_section_title internal procedure
	    formats the displayed title to illustrate these nuances.
   ----------------------------------------------------------------- */
show_section_title:
     proc (AruleI);

  dcl  AruleI fixed bin;				/* Index into iSect_title array		        */

  dcl (title, title1) char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var;
						/* Section title string.			        */

     title = form_section_title (AruleI);
     if  iSect_title.ilk(AruleI) = BAD  then do;
	title1 = form_section_title (iSect_title.sectionID(AruleI));
	call ioa_ ("  ^2x    ^va   =>  ^a", iSect_title_MAXLENGTH_KNOWN_TITLE+2, title, title1);
	end;
     else call ioa_ ("  ^2d    ^a", AruleI, title);

     end show_section_title;
%page;
/* -----------------------------------------------------------------
   INTERNAL PROCEDURE:  show_section_title_sequence

   FUNCTION:  For certain well-defined kinds of info blocks, a rule
	    defines the required or recommended sequence of sections
	    needed to convey appropriate information to the user in
	    a fashion following info seg guidelines.

	    Some sections are required; others are suggested for
	    use when appropriate/needed to convey information 
	    (optional).  

	    This routine displays all required or suggested section
	    titles for a given kind of info block, in a recommended
	    order of appearance within that block.
   ----------------------------------------------------------------- */

show_section_title_sequence:
     proc (AkindID) returns (bit(1) aligned);
     
  dcl  AkindID fixed bin;				/* Index into iSect_sequence array		        */

  dcl (i, last_pos) fixed bin;
  dcl title char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var;	/* Section title string.			        */

     if  lbound(iSect_sequence.array, 1) <= AkindID  &  AkindID <=  hbound(iSect_sequence.array, 1)  then;
     else do;
	call ioa_ ("^/ Section Titles for  ^a:^/", iBlok_kind_display_string(AkindID) );
	call ioa_ ("    No section titles are required or recommended.");
	return (T);
	end;

     iTitle_seqP = addr(iSect_sequence.array(AkindID));
     last_pos = -1;

     call ioa_ ("^/ Section Titles for  ^a:^/", iBlok_kind_display_string(AkindID) );
     call ioa_ ("^2x ^a ^2x ^va  ^a", "ORDER", maxlength(iCard_string(1)), "CARDINALITY", "TITLE");  
     do i = lbound(iTitle_seq.array, 1) to hbound(iTitle_seq.array, 1);
	title = form_section_title (iTitle_seq.type(i) );
	call ioa_(
	     "^3x ^[^2d^;^s^2x^] ^2x ^va  ^a",
	     (iTitle_seq.position(i) ^= 0  &  iTitle_seq.position(i) ^= last_pos), iTitle_seq.position(i),
	     maxlength(iCard_string(1)), iCard_string(iTitle_seq.cardinality(i)),
	     title);
	last_pos = iTitle_seq.position(i);
	if  iTitle_seq.type(i) = iSect_ENTRY_POINTS_IN  then
	     call ioa_( "^-^vx     ^a", maxlength(iCard_string(1)), INFO_SUBROUTINE_INTRO_ENTRY_POINTS_IN_CONTENTS);
	end;
     return (T);

     end show_section_title_sequence;
%page;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* UNRETAINED ENTRY: info_seg_verify_$section_title				        */
	/*									        */
	/* FUNCTION: returns the section title display string matching an iSect.type value.	        */
	/*									        */
	/* NOTE: This routine is intentionally not retained in bound_info_rtns_.bind.  It is referenced   */
	/* only by other components of that bound segment.				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

section_title:
     entry (AiSect_type) returns(char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var);
     
  dcl  AiSect_type fixed bin;				/* An iSect_XXXX value (assigned to iSect.type).     (In) */

     if  lbound(iSect_title.title,1) <= AiSect_type & AiSect_type <= hbound(iSect_title.title,1)  then
	return (form_section_title(AiSect_type));
     else return ("");
     
/* -----------------------------------------------------------------
   INTERNAL SUBROUTINE: form_section_title

   FUNCTION:  returns the display string for a given iSect_XXX section
	    type (a value in iSect.type).
   ----------------------------------------------------------------- */

form_section_title:					/* Internal procedure to form a section title 	        */
     proc (AruleI) returns (char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var);
						/*  presentation string from data in an iSect_title       */
						/*  array item.				        */
  dcl  AruleI fixed bin;

  dcl  title char(iSect_title_MAXLENGTH_KNOWN_TITLE+2) var;

     title = iSect_title.title(AruleI);
     if  iSect_title.cmp(AruleI) = BEGINS  then do;	/* Title begins with an exact substring...	        */
	if  index(title, "(") = length(title)  then
	     title = title || "...)" || COLON;
	else title = title || "..."  || COLON;
	end;
     else title = title || COLON;			/* An exact section title.			        */
     return (title);
     
     end form_section_title;
%page;
%include ssu_subroutine_dcls_;

     end info_seg_verify_;
