
	
/****^  HISTORY COMMENTS:
  1) change(2021-02-23,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version of info_seg_allocate_ subroutine.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  info_seg_allocate_						        */
	/*									        */
	/* FUNCTION:  Allocate and initialize the various structures used to describe info segment        */
	/* components.								        */
	/*									        */
	/* Major structures defining components of an info segment, listed in order of smallest to        */
	/* largest aggregate of characters in the info segment.				        */
	/*									        */
	/*  - iLine	defines content of one line of an info segment.			        */
	/*  - iPgh	defines a list of lines in one paragraph of an info segment.	        */
	/*  - iSect	defines a list paragraphs combined into one titled section of an info seg.    */
	/*  - List	defines a list of items in a section describing arguments, control args, etc. */
	/*		Only names of the items are in the list, not their descriptions.	        */
	/*  - Operation_List							        */
	/*                  defines a list of command/request/IO_Module operations, with a pointer to     */
	/*		the info block that describes that operation.			        */
	/*  - iBlok	defines block divider (optional), header line, and sections in one block      */
	/* 		of an info segment.  A block describes one info topic, command/AF, subsystem  */
	/*		request, subroutine or subroutine entrypoint, etc.		        */
	/*  - iFile	defines one info segment, which may contain one or more blocks of data.       */
	/*		Each block can be located and displayed individually.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

info_seg_allocate_:
     proc();

  dcl (currentsize, dim, null, size) builtin;

%page;
%include info_seg_dcls_;
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$iBlok

   FUNCTION:  allocate/initialize a structure describing one block
	    of an info segment.

    Caller passes in:
     - line number within the file of line being described.
     - pointer to structure describing info block containing this line.
     - constant describing the info block divider identifier.  This is
       one of the iBlok_divider_XXX constants in info_seg_dcls_.incl.pl1.
   ----------------------------------------------------------------- */

iBlok:
     entry (AisdP, Aline_number, Ablock_strP, Adivider) returns (ptr);

  dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
      1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl  Aline_number fixed bin;			/* Line number within info segment of iBlok divider.      */
						/*  - This is 1 for structure_SINGLE info segments having */
						/*    no block divider.			        */
  dcl  Ablock_strP ptr;				/* Points to data for this block.		        */
  dcl  Adivider fixed bin;				/* Block's divider token type.		        */

     iBlokP = allocate (isd.areaP, size(iBlok));

     iBlok.ID = iBlokID;
     iBlok.L = 0;
     iBlok.P = Ablock_strP;
     iBlok.sib = null();
     iBlok.relatives = null();

     iBlok.line_in_file = Aline_number;
     iBlok.line_count = 0;
     iBlok.names.N = 0;
     iBlok.names.nm(*) = "";

     iBlok.header.str = "";
     iBlok.header.reformatted = "";
     iBlok.header.wordN = 0;
     iBlok.header.word(*) = "";
     iBlok.header.after_header_iLineP = null();

     iBlok.seenS = F;
     iBlok.syntax = F;
     iBlok.errors = F;

     iBlok.divider = Adivider;			/* Certain divider types identify an exact blok.kind      */
     if       Adivider = iBlok_divider_hcom  then
	iBlok.kind = iBlok_kind_HISTORY_COMMENT;
     else if  Adivider = iBlok_divider_hcom_obsolete then
	iBlok.kind = iBlok_kind_HISTORY_COMMENT;
     else if  Adivider = iBlok_divider_Entry  then
	iBlok.kind = iBlok_kind_SUBROUTINE_ENTRY;
     else iBlok.kind = iBlok_kind_Unknown;

     return (iBlokP);
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$iFile

   FUNCTION:  allocate/initialize a structure describing one info 
	    segment.

    Caller passes directory/entryname components of info seg's 
    absolute pathname.
   ----------------------------------------------------------------- */

iFile:
     entry (AisdP, Adir, Aent, Auid) returns(ptr);

/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl (Adir, Aent) char(*);				/* Absolute pathname of info seg represented by the iFile */
  dcl  Auid bit(36) aligned;

     iFileP = allocate (isd.areaP, size(iFile));

     iFile.ID = iFileID;
     iFile.L = 0;
     iFile.P = null();
     iFile.sib = null();
     iFile.relatives = null();

     iFile.dir = Adir;
     iFile.ent = Aent;
     iFile.uid = Auid;

     iFile.caseI = iFile_case_UNSET;
     iFile.structure = iFile_struc_err_UNSET;
     iFile.names.N = 0;
     iFile.names.nm(*) = "";
     return (iFileP);
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$iLine

   FUNCTION:  Allocate iLine structure holding data for each line found.

    Caller passes information found while parsing file characters
    to identify line contents:
     - line number within the file
     - pointer to, and length of, line contents (excluding NL character)
     - flag indicating whether NL was missing (ie, final line of the file)
   ----------------------------------------------------------------- */

iLine:
     entry (AisdP, Aline_number, AlineP, AlineL, AmissingNL) returns(ptr);

/*dcl  Aline_number fixed bin;			/* Line number within info segment on which iBlok starts. */
  dcl  AlineP ptr;					/* Pointer to line contents within info segment.	        */
  dcl  AlineL fixed bin(21);				/* Length of line contents, not including NL.	        */
  dcl  AmissingNL bit(1) aligned;			/* T: line is final content of info segment, and did not  */
						/*    end with a NL character.		        */

  dcl  Aline char(AlineL) based(AlineP);		/* line contents.				        */
  

     iLineP = allocate (isd.areaP, size(iLine));

     iLine.ID = iLineID;
     iLine.L = AlineL;
     iLine.P = AlineP;
     iLine.sibs = null();
     iLine.relatives = null();

     iLine.line_in_file = Aline_number;
     iLine.errors = F;
     iLine.NL_missingS = AmissingNL;
     return (iLineP);
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$List

   FUNCTION:  Allocate List structure holding data for each Argument, 
	    Control_arg or List of ... (excluding List of ... operations:) 
	    found in a section.

    Caller passes information found while parsing lines in the section:
     - pointer overlaying an iList structure as a List whose items 
       array is copied into the allocated List structure.  This includes:
         - pointer to the iSect describing section that defines this list.
   ----------------------------------------------------------------- */

List:
     entry (AisdP, AListP) returns (ptr);
     
/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl  AListP ptr;					/* Pointer to max-size iList structure holding data items */
						/*  for List being allocated.			        */
     ListN = dim(AListP->List.items,1);

     ListP = allocate (isd.areaP, size(List));
     
     List.ID = iListID;
     List.L = 0;
     List.P = null();
     List.parentSectP = AListP->List.parentSectP;
     List.N = ListN;
     List.items(*) = AListP->List.items(*);
     
     return (ListP);


/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$Operation_List

   FUNCTION:  Allocate Operation_List structure holding data for each 
	    Operation name found in a "List of operations" or
	    "List of control operations" section.

    Caller passes information found while parsing lines in the section:
     - short name of :Info: blok holding "List of ... operations" section.
     - pointer overlaying an iList structure as a List whose items 
       array is copied into the allocated List structure.  This includes:
         - pointer to the iSect describing section that defines this list.
   ----------------------------------------------------------------- */

Operation_List:
     entry (AisdP, Ashort_block_name, AListP) returns (ptr);
     
/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl  Ashort_block_name char(*) var;			/* Shortest name on block w/ List of operations section.  */

/*dcl  AListP ptr;					/* Pointer to max-size iList structure holding data items */
						/*  for List being allocated.			        */

     ListP = AListP;
     Operation_ListN = dim(List.items,1);

     Operation_ListP = allocate (isd.areaP, size(Operation_List));
     
     Operation_List.ID = OListID;
     Operation_List.L = 0;
     Operation_List.P = null();
     Operation_List.parentSectP = List.parentSectP;
     Operation_List.blok_name   = Ashort_block_name;
     Operation_List.N = Operation_ListN;
     Operation_List.items(*)    = List.items(*);
     Operation_List.per_operation_iBlokP(*) = null();

     return (Operation_ListP);
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$iPgh

   FUNCTION:  Allocate iPgh structure holding data for each paragraph found.

    Caller passes information found while parsing lines in the file:
     - line number within the file of first paragraph line.
     - pointer to beginning of paragraph contents.
   ----------------------------------------------------------------- */

iPgh:
     entry (AisdP, Aline_number, Apgh_strP) returns (ptr);

/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

/*dcl  Aline_number fixed bin;			/* Line number within info segment of iPgh.	        */
  dcl  Apgh_strP ptr;				/* Points to data for this paragraph.		        */

     iPghP = allocate (isd.areaP, size(iPgh));

     iPgh.ID = iPghID;
     iPgh.L = 0;
     iPgh.P = Apgh_strP;
     iPgh.sibs = null();
     iPgh.relatives = null();

     iPgh.line_in_file = Aline_number;
     iPgh.line_count = 0;
     iPgh.seenS = F;
     iPgh.errors = F;

     return (iPghP);


/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$iSect

   FUNCTION:  Allocate iSect structure holding data for each section found.

    Caller passes information found while parsing paragraphs in the file:
     - line number within the file of first section line.  This line
       contains the section title.
     - pointer to beginning of section contents.
   ----------------------------------------------------------------- */

iSect:
     entry (AisdP, Aline_number, Asect_strP) returns (ptr);

/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

/*dcl  Aline_number fixed bin;			/* Line number within info segment of iSect.	        */
  dcl  Asect_strP ptr;				/* Points to data for this section.		        */

     iSectP = allocate (isd.areaP, size(iSect));

     iSect.ID = iSectID;
     iSect.L = 0;
     iSect.P = Asect_strP;
     iSect.sib = null();
     iSect.relatives = null();

     iSect.line_in_file = Aline_number;
     iSect.line_count = 0;
     iSect.type = iSect_Untitled;
     iSect.sequence = 0;
     iSect.title = "";
     iSect.syntax.N = 0;
     iSect.syntax.str = "";
     iSect.errors = F;

     return (iSectP);
%page;
/* -----------------------------------------------------------------
   ENTRY:  info_seg_allocate_$String

   FUNCTION:  Allocate storage for a variable-extent character string.

    Caller passes in a String structure.
   ----------------------------------------------------------------- */

String:
     entry (AisdP, AStringP) returns (ptr);

/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl  AStringP ptr,				/* Points to an input String structure.		        */
      1 AString aligned based(AStringP),		/* Basic form of AString matches that of char(L) varying  */
        2 L fixed bin(21),				/*  (NOTE: This dcl comes from help_responses_$lep_setup) */
        2 text char(0 refer (AString.L));

  dcl 1 STRING aligned based(STRING_P),			/* Basic form of STRING matches that of char(L) varying   */
        2 L fixed bin(21),				/*  (NOTE: This dcl comes from help_responses_$lep_setup) */
        2 text char(0 refer (STRING.L)),
       STRING_P ptr;

     STRING_P = allocate (isd.areaP, currentsize(AString));
     STRING.L = AString.L;
     STRING.text = AString.text;
     return (STRING_P);
%page;
%include ssu_subroutine_dcls_;
%page;
%include translator_temp_alloc;

     end info_seg_allocate_;
