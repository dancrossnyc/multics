	
/****^  HISTORY COMMENTS:
  1) change(2021-02-23,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version of info_seg_error_ subroutine.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  info_seg_error_						        */
	/*									        */
	/* Displays error messages for info_seg_verify_ subroutine that include ioa_ control codes.       */
	/* ioa_ selects arguments from our free-form parameter list to edit into the error message.       */
	/*									        */
	/* Syntax:								        */
	/*   dcl info_seg_error_ entry options(variable);					        */
	/*   call info_seg_error_ (AvidP, Aseverity, Amsg, arg1, ..., argN);			        */
	/*									        */
	/* Arguments:								        */
	/* AvidP									        */
	/*    points to the verify_info_data structure, which:				        */
	/*     - records highest-encountered error severity,				        */
	/*     - count of calls to info_seg_error_.					        */
	/*    controls whether the error message is actually output via the totalsS switch.	        */
	/* Asev									        */
	/*    severity of the current message to be displayed.  This is an integer from 1 to 5.	        */
	/* Amsg									        */
	/*    an error message string including ioa_ control codes to permit easy formatting of the       */
	/*    message to be output, and editing of arbitrary optional arguments into that string.	        */
	/*									        */
	/* Notes:									        */
	/* This functionality must be defined in a separate source module, because its entrypoints        */
	/* accept a varying number of arguments, always requiring callers to generate a full argument     */
	/* list with descriptors.  PL/I does not generate such varying argument lists for calls to        */
	/* internal procedures within same source module.					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

info_seg_error_:
     proc (AvidP, Asev, Amsg) options(variable);		

  dcl  AvidP ptr,					/* Points to an info_seg_data structure.	        */
       Asev fixed bin,				/* An error severity value (usually from 1 to 5)	        */
       Amsg char(*);				/* An error message that uses ioa_ control codes to       */
						/*  editing additional arguments into the final output    */
						/*  message displayed to the user.		        */
  dcl 1 vid aligned like verify_info_data based(AvidP);


  dcl (F init("0"b),
       T init("1"b)
       ) bit(1) aligned int static options(constant);

  dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin(35));
  dcl  cu_$arg_list_ptr entry (ptr);
  dcl  get_line_length_$switch entry (ptr, fixed bin(35)) returns(fixed bin);
  dcl  info_seg_util_$max_name_width entry ((*) char(32) var) returns(fixed bin);
  dcl  ioa_ entry() options(variable);
  dcl  ioa_$general_rs_control_string entry(ptr, char(*), fixed bin, char(*), fixed bin(21), bit(1) aligned,
	bit(1) aligned);

  dcl  iox_$user_output ptr ext static;

  dcl  arg_count fixed bin;				/* Count of arguments passed to info_seg_error_	        */
  dcl  arg_listP ptr;				/* Argument list passed to info_seg_error_	        */
  dcl  argI fixed bin;				/* Index in argument list of first argument to edit       */
						/*  with ioa_ control codes in Amsg.		        */

  dcl  error_emittedS bit(1) aligned int static init(F);	/* Switch turned on after an error message is displayed.  */
						/*  Value is remembered between calls to info_seg_error_. */

  dcl  ignore_code fixed bin(35);			/* Ignored status code.			        */
  dcl  message_displayS bit(1) aligned;

  dcl  msg char(500);				/* Amsg with ioa_ control codes replaced by arguments     */
						/*  from our options(variable) parameter list.	        */
  dcl  msgL fixed bin(21);

  dcl (char, copy, length, ltrim, max, min, rtrim, substr) builtin;
%page;
     message_displayS = ^vid.totalsS;			/* Setup for displaying an error message.	        */
     argI = 4;					/* 4th argument starts optional substitution args.        */

     vid.highest_severity = max(vid.highest_severity, Asev);
     vid.error_count = vid.error_count + 1;		/* Remember count and highest severity of errors emitted. */
     
     if  ^message_displayS  then			/* Stop if we're not displaying messages.	        */
	return;

MESSAGE_COMPOSE:
     call cu_$arg_list_ptr (arg_listP);			/* Get pointer to our complete argument list, containing  */
						/*  a variable number of arguments.		        */
     call cu_$arg_count_rel (arg_count, arg_listP, ignore_code);
						/* Count of those input arguments.		        */

     if  argI <= arg_count  then			/* If optional arguments were given by caller, edit       */
						/*  those using ioa_ control codes in Amsg, storing       */
						/*  the edited result in msg string.	        */
	call ioa_$general_rs_control_string (arg_listP, Amsg, argI, msg, msgL, F, F);	

     else do;					/* If no optional arguments were given, just copy Amsg    */
	msg  = Amsg;				/*  into the message string.			        */
	msgL = length(rtrim(Amsg));
	end;

     call ioa_ ("^6x Severity ^d.  " || substr(msg, 1, msgL), Asev);
						/* Output the error message.			        */
     error_emittedS = T;				/*  - Remember such error message has been emitted.       */
     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRYPOINT:  info_seg_error_$name_list					        */
	/*									        */
	/* Displays an error message for info_seg_verify_ subroutine that ends with a list of segment     */
	/* or block names.  These are displayed in a compact fashion as columns of equal widths.	        */
	/*									        */
	/* Syntax:								        */
	/*   dcl info_seg_error_$name_list entry (ptr, fixed bin, char(*), fixed bin, fixed bin,	        */
	/*				  (*) char(32) var );			        */
	/*   call info_seg_error_ (AisdP, Asev, Amsg, Aname_line_indent, Aname_length, Aname_array);      */
	/*									        */
	/* Arguments:								        */
	/* AisdP									        */
	/*    points to the info_seg_data structure, which:				        */
	/*     - records highest-encountered error severity,				        */
	/*     - count of calls to info_seg_error_.					        */
	/*    controls whether the error message is actually output via the totalsS switch.	        */
	/* Asev									        */
	/*    severity of the current message to be displayed.  This is an integer from 0 to 5.	        */
	/*    If Asev is 0, then no error message is displayed or tallied.  Only the name list is	        */
	/*    displayed.								        */
	/* Amsg									        */
	/*    an error message string including ioa_ control codes to permit easy formatting of the       */
	/*    message to be output.							        */
	/* Aname_line_indent							        */
	/*     number of spaces prepended to the start of each row of the name list.		        */
	/* Aname_width								        */
	/*    width of name columns.  If 0, that length is found by scanning Aname_array for its maximum  */
	/*    width name.								        */
	/* Aname_array								        */
	/*    array of names to be displayed.  Names are displayed in the order given by this array, with */
	/*    column entries separated by 2 spaces.					        */
	/*									        */
	/* Notes:									        */
	/* When Asev = 0, if Amsg ^= "", then that is the ioa_ control string displayed before the first  */
	/* line of the name list.							        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

info_seg_error_$name_list:
     entry (AvidP, Asev, Amsg, Aname_line_indent, Aname_width, Aname_array);

  dcl  Aname_line_indent fixed bin;
  dcl  Aname_width fixed bin;
  dcl  Aname_array (*) char(32) var;

  dcl (colI, colN) fixed bin;
  dcl  max_lineL fixed bin;
  dcl  nmI fixed bin;
  dcl  nmW fixed bin;				/* Width of columns in name list.		        */
  dcl  row char(160) var;
  dcl (rowI, rowN) fixed bin;

     if  Asev > 0  then				/* Display error message preceding name list.	        */
	call info_seg_error_( AvidP, Asev, Amsg);
     else if  Amsg ^= ""  then			/*  OR  display a heading for name list.	        */
	call ioa_( Amsg );
     
     if  Aname_width > 0  then			/* Get desired width of name columns for our list.        */
	nmW = Aname_width;
     else nmW = info_seg_util_$max_name_width (Aname_array);
     nmW = min( nmW, 32);

     max_lineL = get_line_length_$switch (iox_$user_output, ignore_code);
     colN = divide( (max_lineL - Aname_line_indent - 2), nmW+2, 17, 0);
     colN = min(10, max(1, colN));
     rowN = divide( dimension(Aname_array,1) + (colN-1), colN, 17, 0);

     do rowI = 1 to rowN;
	row = "^vx";
	do colI = 0 to colN-1;
	     nmI = (colI * rowN) + rowI;
	     if  nmI <= dimension(Aname_array,1)  then
		row = row || "  " || Aname_array(nmI) || copy(" ", nmW - length(Aname_array(nmI)));
	     end;
	call ioa_( row, Aname_line_indent-2 );
	end;
     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRYPOINT:  info_seg_error_$nl_after_error					        */
	/*									        */
	/* Outputs a line if prior calls have emitted an error message.			        */
	/*									        */
	/* Syntax:								        */
	/*   dcl info_seg_error_$nl_after_error entry();					        */
	/*   call info_seg_error_$nl_after_error();					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

nl_after_error:
     entry();

     if  error_emittedS  then do;			/* If prior call to info_seg_error_ output a message,     */
	call ioa_("");				/*  output a NL character,			        */
	error_emittedS = F;				/*  and turn off error_emittedS     		        */
	end;
     return;
     

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRYPOINT:  info_seg_error_$set_error_emitted					        */
	/*									        */
	/* Sets switch that remembers a prior call to info_seg_error_ (displaying a prior error	        */
	/* message) without output of any characters.					        */
	/*									        */
	/* Syntax:								        */
	/*   dcl info_seg_error_$set_error_emitted entry (bit(1) aligned);			        */
	/*   call info_seg_error_$set_error_emitted (new_switch_setting);			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

set_error_emitted:
     entry (Asw);
     
  dcl  Asw bit(1) aligned;

     error_emittedS = Asw;
     return;
%page;
%include info_seg_dcls_;
%page;
%include verify_info_data;

     end info_seg_error_;
