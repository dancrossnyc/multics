/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

user_info_:
     proc;

/* USER_INFO_ - procedure to return selected information from the PIT

   The information returned was put there by the procedure "cpg_"
   when the process was created.

   The following entries exist:

   .	user_info_$user_info_ (name, proj, acct)
   .	user_info_$whoami (name, proj, acct)
   .	user_info_$login_data (name, proj, acct, anon, stby, weight, time_login, login_word)
   .	user_info_$usage_data (n_processes, cputime_old_procs, time_login, time_proc_create,core_old_procs,io_old_procs)
   .	user_info_$homedir (home_directory)
   .	user_info_$responder (login_responder)
   .	user_info_$tty_data (terminal_id, terminal_type, channel_id, line_type)
   .	user_info_$terminal_data (terminal_id, terminal_type_name, channel_id, line_type, charge_type)
   .      user_info_$service_type (service_type)
   .      user_info_$process_type (process_type)
   .	user_info_$logout_data (logout_channel, logout_processid)
   .	user_info_$login_line (login_string)
   .	user_info_$absentee_queue (q)
   .	user_info_$absin (path)
   .	user_info_$absout (path)
   .	user_info_$outer_module (om)
   .	user_info_$load_ctl_info (group, sb, bumpclock, weight)
   .      user_info_$authorization_range (range)
   .	user_info_$attributes (att)
   .	user_info_$limits (mlim, clim, cdate, crf, shlim, msp, csp, shsp)
   .	user_info_$rs_name (rs_name)
   .	user_info_$rs_number (rs_number)
   .	user_info_$absentee_request_id (request_id)
   .	user_info_$absout_truncation (truncate_bit)
   .	user_info_$absentee_restarted (restarted_bit)
   .      user_info_$ring_range (range)

   If an entry which takes multiple arguments is called with too few arguments,
   only those supplied will be set.

   THVV 9/70   */


/****^  HISTORY COMMENTS:
  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     1st comment for hcom.
        Modified 761229 by D. M. Wells to add $service_type and $process_type entry
     points, to add line_type parameter to $tty_data, and to get info for
     $tty_data from PIT rather than the user_i/o IOSIM.
     Modified 6/20/77 by J. Stern to add $terminal_data (obsoletes $tty_data)
     Modified April 1979 by T. Casey to return correct information in foreground absentee jobs.
     Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA)
     Modified June 1981 by E. N. Kittlitz for UNCA rate structures.
     Modified December 1981 by E. N. Kittlitz for login_arg_ptr, login_arg_count.
     Modified 11/81 by B. Margulies for sub_err_ vs. com_err_.
     Modified 10/82 by E. N. Kittlitz for absentee_request_id.
     Modified 1984-07-26 BIM for user_info_$authorization_range
  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     Add the entries absout_truncation & absentee_restarted for -truncate absout, SCP6297.
  3) change(86-11-11,Gilcrease), approve(86-11-11,PBF7370),
     audit(86-11-12,Fawcett), install(86-11-12,MR12.0-1214):
     PBF: sub_err_ called with wrong arguments in fillpp procedure.
  4) change(87-11-20,Parisek), approve(88-02-11,MCR7849),
     audit(88-03-07,Lippard), install(88-07-13,MR12.2-1047):
     Added the ring_range entry which returns low & high ring authorizations.
     SCP6367.
                                                   END HISTORY COMMENTS */


	dcl     arg_infop		 pointer;
	dcl     arg_offset		 fixed bin;
	dcl     (pp, whoptr)	 pointer,
	        i			 fixed bin,
	        ii		 fixed bin,
	        hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35)),
                  current_validation     fixed bin (3),
   	        hcs_$level_set         entry (fixed bin (3)),
     	        hcs_$level_get         entry (fixed bin (3)),
     	        get_ring_		 entry() returns(fixed bin(3)),
	        get_pdir_		 entry returns (char (168)),
	        format_attributes_	 entry (ptr, char (*) var),
	        ec		 fixed bin (35),
	        sub_err_		 entry options (variable),
	        sysdir		 char (64) int static init (">system_control_dir") options (constant),
	        system_info_$device_prices
				 entry (fixed bin, ptr),
	        system_info_$rs_name	 entry (fixed bin, char (*), fixed bin (35)),
	        cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));

	dcl     error_table_$noarg	 fixed bin (35) ext static;

	dcl     1 dvt		 (16),
		2 device_id	 char (8),
		2 device_price	 (0:7) float bin;

	dcl     ndev		 fixed bin;

	dcl     ap		 ptr,
	        al		 fixed bin,
	        bbit		 bit (1) based (ap),
	        bchr		 char (al) based (ap) unaligned,
	        bfix		 fixed bin (35) based (ap),
	        bf17		 fixed bin based (ap),
	        bf21		 fixed bin (21) based (ap),
	        bf71		 fixed bin (71) based (ap),
	        bflt		 float bin based (ap),
	        bb36		 bit (36) based (ap),
	        bptr		 ptr based (ap),
	        tvcs		 char (512) var,
	        bftary		 (0:7) float bin based (ap);
	dcl     (addr, before, null,  max, ptr, substr)
				 builtin;


%include pit;
%include user_attributes;

%include whotab;

%page;

fillpp:
     proc;					/* internal proc to fill in PIT ptr on first call */

	declare whotab_$		 bit (36) aligned external static;
	declare linkage_error	 condition;

	on linkage_error				/* AS12.0 INSTALLATION KLUGE */
	     begin;				/* to be removed after hardcore is installed */

	          call hcs_$level_get (current_validation);
     	          call hcs_$level_set (get_ring_ ());
		call hcs_$initiate ((get_pdir_ ()), "pit", "pit_", 0, 1, pp, ec);
		call hcs_$level_set (current_validation);
		if pp = null
		then call sub_err_ (ec, "user_info_", "s", null (), (0), "pit");
	     end;					/* END OF KLUGE */

	pp = addr (pit_$);				/* we depend on this refname being in the environment */
	on linkage_error
	     begin;

	          call hcs_$level_get (current_validation);
     	          call hcs_$level_set (get_ring_ ());
		call hcs_$initiate (sysdir, "whotab", "whotab_", 0, 1, whoptr, ec);
		call hcs_$level_set (current_validation);
		if whoptr = null
		then call sub_err_ (ec, "user_info_", "s", null (), (0), "whotab");
	     end;

	whoptr = addr (whotab_$);

     end fillpp;

%page;

whoami:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.login_name;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.project;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.account;

	return;

login_data:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.login_name;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.project;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.account;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.anonymous;
	call cu_$arg_ptr (5, ap, al, ec);
	if ec ^= 0
	then return;
	i = pp -> pit.whox;				/* use current data from whotab */
	if i = 0
	then bfix = pp -> pit.standby;		/* oof. unlisted users */
	else bfix = whotab.e (i).stby;		/* user may have been promoted since login */
	call cu_$arg_ptr (6, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.user_weight;
	call cu_$arg_ptr (7, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.login_time;
	call cu_$arg_ptr (8, ap, al, ec);
	if ec ^= 0
	then return;
	if pp -> pit.anonymous = 1
	then bchr = "enter";
	else bchr = "login";

	return;

usage_data:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.n_processes;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.old_proc_cpu;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.login_time;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.proc_creation_time;
	call cu_$arg_ptr (5, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.old_proc_core;
	call cu_$arg_ptr (6, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.old_proc_io_ops;

	return;

homedir:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.homedir;

	return;

responder:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.login_responder;

	return;

tty_data:
     entry;

	call fillpp;

	if pp -> pit.process_type = 2
	then do;
		call cu_$arg_ptr (1, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = "abs";
		call cu_$arg_ptr (2, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.tty_type;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty;
		call cu_$arg_ptr (4, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.line_type;
	     end;

	else do;
		call cu_$arg_ptr (1, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty_answerback;
		call cu_$arg_ptr (2, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.tty_type;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty;
		call cu_$arg_ptr (4, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.line_type;
	     end;

	return;

terminal_data:
     entry;

	call fillpp;

	if pp -> pit.process_type = 2
	then do;
		call cu_$arg_ptr (1, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = "abs";
		call cu_$arg_ptr (2, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.term_type_name;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty;
		call cu_$arg_ptr (4, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.line_type;
		call cu_$arg_ptr (5, ap, al, ec);
		if ec ^= 0
		then return;
		if pp -> pit.charge_type = 0
		then bchr = "none";
		else do;
			call system_info_$device_prices (ndev, addr (dvt));
			bchr = dvt (pp -> pit.charge_type).device_id;
		     end;
	     end;

	else do;
		call cu_$arg_ptr (1, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty_answerback;
		call cu_$arg_ptr (2, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.term_type_name;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bchr = pp -> pit.tty;
		call cu_$arg_ptr (4, ap, al, ec);
		if ec ^= 0
		then return;
		bfix = pp -> pit.line_type;
		call cu_$arg_ptr (5, ap, al, ec);
		if ec ^= 0
		then return;
		if pp -> pit.charge_type = 0
		then bchr = "none";
		else do;
			call system_info_$device_prices (ndev, addr (dvt));
			bchr = dvt (pp -> pit.charge_type).device_id;
		     end;
	     end;

	return;

service_type:
     entry ();

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.service_type;

	return;

process_type:
     entry ();

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.process_type;

	return;

logout_data:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.logout_channel;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;
	bb36 = pp -> pit.logout_pid;

	return;


login_line:
     entry;
	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.login_line;

	return;

absentee_queue:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	if pp -> pit.process_type = 2
	then bfix = pp -> pit.abs_queue;
	else bfix = -1;

	return;

load_ctl_info:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.group;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;

	i = pp -> pit.whox;				/* use current data from whotab */
	if i = 0
	then do;					/* unlisted user? */
		bfix = pp -> pit.standby;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bf71 = pp -> pit.cant_bump_until;
	     end;
	else do;
		bfix = whotab.e (i).stby;
		call cu_$arg_ptr (3, ap, al, ec);
		if ec ^= 0
		then return;
		bf71 = whotab.e (i).cant_bump_until;
	     end;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.user_weight;
	return;

authorization_range:
	entry (a_auth_range);

dcl  a_auth_range (2) bit (72) aligned;

	call fillpp;
	a_auth_range = pp -> pit.authorization_range;
	return;

attributes:
     entry (atts);

	dcl     atts		 char (*) var;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	call format_attributes_ (addr (pp -> pit.at), tvcs);
	atts = tvcs;

	return;

absin:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;

	if pp -> pit.process_type ^= 2
	then bchr = "";
	else bchr = pp -> pit.input_seg;

	return;

absout:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;

	if pp -> pit.process_type ^= 2
	then bchr = "";
	else do;
		if pp -> pit.output_seg = ""
		then do;
			bchr = before (pp -> pit.input_seg, ".absin") || ".absout";
		     end;
		else bchr = pp -> pit.output_seg;
	     end;

	return;

outer_module:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bchr = pp -> pit.outer_module;

	return;

limits:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bflt = pp -> pit.dollar_limit;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;
	bflt = pp -> pit.absolute_limit;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0
	then return;
	bf71 = pp -> pit.absolute_cutoff;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0
	then return;
	bfix = pp -> pit.absolute_increm;
	call cu_$arg_ptr (5, ap, al, ec);
	if ec ^= 0
	then return;
	do i = 0 to 7;
	     bftary (i) = pp -> pit.shift_limit (i);
	end;
	call cu_$arg_ptr (6, ap, al, ec);
	if ec ^= 0
	then return;
	bflt = pp -> pit.dollar_charge;
	call cu_$arg_ptr (7, ap, al, ec);
	if ec ^= 0
	then return;
	bflt = pp -> pit.absolute_spent;
	call cu_$arg_ptr (8, ap, al, ec);
	if ec ^= 0
	then return;
	do i = 0 to 7;
	     bftary (i) = pp -> pit.interactive (i).charge;
	end;
	return;

rs_name:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	call system_info_$rs_name ((pp -> pit.rs_number), bchr, ec);
	if ec ^= 0
	then call sub_err_ (ec, "user_info_", "s", null (), (0), "Rate structure ^d invalid.
Contact your system administrator.", pp -> pit.rs_number);
	return;

rs_number:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	bf17 = pp -> pit.rs_number;
	return;

login_arg_count:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	if pp -> pit.arg_info_ptr = 0
	then /* no login arguments */
	     bf17 = 0;
	else bf17 = ptr (pp, pp -> pit.arg_info_ptr) -> arg_info.arg_count;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0
	then return;

	bf21 = 0;
	if pp -> pit.arg_info_ptr = 0
	then return;
	else do ii = 1 to ptr (pp, pp -> pit.arg_info_ptr) -> arg_info.arg_count;
		bf21 = max (ptr (pp, pp -> pit.arg_info_ptr) -> arg_info.arg_lengths (ii), bf21);
	     end;

	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0
	then return;

	if pp -> pit.arg_info_ptr = 0
	then bf21 = 0;
	else bf21 = ptr (pp, pp -> pit.arg_info_ptr) -> arg_info.ln_args;
	return;


login_arg_ptr:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0
	then return;
	i = bf17;					/* get argument number */
	call cu_$arg_ptr (2, ap, al, ec);		/* argument pointer */
	if ec ^= 0
	then return;

	if pp -> pit.arg_info_ptr = 0
	then do;
		arg_infop = null;
		i = -1;
	     end;
	else arg_infop = ptr (pp, pp -> pit.arg_info_ptr);
	if i < 1
	then bptr = null;
	else if i > arg_infop -> arg_info.arg_count
	then do;
		bptr = null;
		i = -1;
	     end;
	else do;
		arg_offset = 1;
		do ii = 1 to i - 1;
		     arg_offset = arg_offset + arg_infop -> arg_info.arg_lengths (ii);
		end;
		bptr = addr (substr (arg_infop -> arg_info.args, arg_offset, 1));
						/* illegal pl1 */
	     end;
	call cu_$arg_ptr (3, ap, al, ec);		/* argument length */
	if ec ^= 0
	then return;
	if i < 0
	then bf21 = 0;
	else bf21 = arg_infop -> arg_info.arg_lengths (i);
	call cu_$arg_ptr (4, ap, al, ec);		/* return code */
	if ec ^= 0
	then return;
	if i < 0
	then bfix = error_table_$noarg;
	else bfix = 0;
	return;


absentee_request_id:
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec = 0
	then bf71 = pp -> pit.request_id;
	return;

absout_truncation:				/* truncate .absout bit */
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	if pp -> pit.process_type = 2 then bbit = pp -> pit.truncate_absout;
	else bbit = "0"b;
	return;

absentee_restarted:			/* restarted bit */
     entry;

	call fillpp;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	if pp -> pit.process_type ^= 2 then bbit = "0"b;
	else bbit = pp -> pit.restarted;
	return;

ring_range:					/* get low and high allowed login ring level */
	entry (a_ring_range);
	
dcl  a_ring_range (2) fixed bin;
	
	call fillpp;
	a_ring_range (1) = pp -> pit.min_ring;		/* lowest allowed */
	a_ring_range (2) = pp -> pit.max_ring;		/* highest allowed */
	return;

     end user_info_;
