
/****^  HISTORY COMMENTS:
  1) change(2020-09-06,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     help requests:  help, h; ? (summarize_responses)
  2) change(2020-10-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version created as part of help_ rewrite.
  3) change(2020-11-11,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Add rest -top control arg.
      B) Add top -section control arg.
      C) Add lep -unseen control arg.
      D) Add ep -match, -exact and -unseen control args.
                                                   END HISTORY COMMENTS */

help_requests_:
     procedure (AsciP, help_infoP);
     
/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */

  dcl  cu_$decode_entry_value entry (entry, ptr, ptr);
  dcl  hcs_$fs_get_path_name entry (ptr, char(*), fixed bin, char(*), fixed bin(35));
  dcl  hcs_$get_uid_file entry (char(*), char(*), bit(36) aligned, fixed bin(35));

  dcl  help_util_$execute entry (ptr, ptr, char(*));
  dcl  help_util_$format_LIST entry (ptr, ptr, ptr, fixed bin, fixed bin);
  dcl  help_util_$print_LIST entry (ptr, ptr, ptr);
  dcl  help_util_$print_section entry (ptr, ptr, ptr);

  dcl  info_seg_$examine_iFile entry (ptr, char(*), char(*), bit(36) aligned, fixed bin(35)) returns(ptr);
  dcl  info_seg_$parse_iFile entry (ptr, ptr);

  dcl  requote_string_ entry (char(*)) returns(char(*));
  dcl  ssu_$get_subsystem_version entry (ptr) returns(char(32));

  dcl (error_table_$bigarg,
       error_table_$badopt,
       error_table_$noarg,
       error_table_$noentry
        ) fixed bin(35) ext static;

  dcl (addr, length, maxlength, null, rtrim, string) builtin;

  dcl  cleanup condition;
%page;
%include "_help_shared_data_";			/* Include near top so DISPLAY_MODE_xxx constants can be  */
						/*  referenced as label array index values.	        */
%page;
/* ======================================================================
   REQUEST: quit, q

   Function: Exit from help_$help_ call.
   ====================================================================== */

quit:
     entry (AsciP, help_infoP);

/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */

     call arg_setup (AsciP);				/* Error if any arguments given after the request name.   */
     if args_remain() then
	call response_error (hi.sciP, 0, "No arguments may be given.");
						/*  - This error reporting routine does not return.       */
     call newline (1);
     call ssu_$abort_subsystem(hi.sciP);
     return;
%page;
/* ======================================================================
   REQUEST: . (self_identify)

   Function: Display help subsystem name and version.
   ====================================================================== */

self_identify:
     entry (AsciP, help_infoP);

/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */

     call arg_setup (AsciP);				/* Error if any arguments given after the request name.   */
     if args_remain() then
	call response_error (hi.sciP, 0, "No arguments may be given.");
						/*  - This error reporting routine does not return.       */
     call newline (1);
     call ioa ("^a", ssu_$get_subsystem_version (AsciP) );
     call newline (1);
     return;
%page;
/* ======================================================================
   REQUEST: ? (summarize_responses)

   Function: Display a LIST of possible responses to help_ query/header
	   prompts.
   ====================================================================== */

summarize_responses:
     entry (AsciP, help_infoP);
     
/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* The following table defines the output LIST displayed by the help request: ?		        */
	/* It is also defined/referenced in several other places, and all of these need to remain	        */
	/* synchronized:  help_request_tables_.alm					        */
	/*                help_responses_.pl1 (comment near top of program)			        */
	/*	        help.info :[Info]: summary.topic				        */
	/*									        */
	/* Requests in table below are organized by popularity with users.  Related responses are	        */
	/* grouped into sections with blank items between these sections.			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  NONSUBR_RESPONSES (37) char (65) var int static options (constant) init (
	"yes, y",
	"rest {-section | -unseen} {-top},",
	"   r {-scn | -uns} {-t}",			/* List of allowed responses to questions asked by help_  */
	"skip {-section | -seen | -rest},",		/*  for non-subroutine block.			        */
	"   s {-scn | -seen | -rest}",		/*  [Taken from older version of help_; now enhanced.]    */
	"next, no, n",
	"quit, q",
	"",
	"brief, bf",
	"control_arg {STRs} {-case_sensitive},",
	"   ca {STRs} {-cs}",
	"",
	"titles {-top | -unseen},",
	" title {-t | -uns}",
	"section {STRs} {-case_sensitive} {-top},",
	"   scn  {STRs} {-cs} {-t}",
	"search  {STRs} {-case_sensitive} {-top},",
	"   srh  {STRs} {-cs} {-t},",
	"   sh   {STRs} {-cs} {-t}",
	"",
	"top {-section}, t {-scn}",
	"header, he",
	"",
	"unseen_paragraphs_only, unseen, uns",
	"every_paragraph_visible, every_pgh, every",
	"",
	"find_info {STRs} {-case_sensitive} {-top},",
	"   find   {STRs} {-cs} {-t}",
	"info {INFO_NAME} {-list|-ls}",
	"all_paragraphs, all",
	"",
	"help {RESPONSE_NAME} {-brief | -control_arg STR},",
	"   h {RESPONSE_NAME} {-bf | -ca STR}",
	"list_responses, list_requests, lr",
	"?",
	".",
	".. MULTICS_COMMAND_LINE"
	);

  dcl  SUBR_RESPONSES (42) char (65) var int static options (constant) init (
	"yes, y",
	"rest {-section | -unseen} {-top},",
	"   r {-scn | -uns} {-t}",			/* List of allowed responses to questions asked by help_  */
	"skip {-section | -seen | -rest}",		/*  for subroutine (intro/entrypoints) block.	        */
	"   s {-scn | -seen | -rest},",		/*  [Taken from older version of help_; now enhanced.]    */
	"next, no, n",			
	"quit, q",
	"",
	"brief, bf",
	"control_arg {STRs} {-case_sensitive},",
	"   ca {STRs} {-cs}",
	"",
	"titles {-top | -unseen},",
	" title {-t | -uns}",
	"section {STRs} {-case_sensitive} {-top},",
	"   scn  {STRs} {-cs} {-t}",
	"search  {STRs} {-case_sensitive} {-top},",
	"   srh  {STRs} {-cs} {-t},",
	"   sh   {STRs} {-cs} {-t}",
	"",
	"top {-section}, t {-scn}",
	"header, he",
	"",
	"unseen_paragraphs_only, unseen, uns",
	"every_paragraph_visible, every_pgh, every",
	"",
	"list_entry_points {-unseen},",
	"   list_ep {-uns},",
	"   lep {-uns}",
	"entry_point {-match | -exact} {EP_STR} {-unseen},",
	"   ep {-match | -exact} {EP_STR} {-uns}",
	"find_entry_point {STRs} {-case_sensitive} {-top},",
	"   find_ep {STRs} {-case_sensitive} {-top},",
	"   find {STRs} {-cs} {-t}",
	"all_entry_points, aep, all",
	"",
	"help {RESPONSE_NAME} {-brief | -control_arg STR},",
	"   h {RESPONSE_NAME} {-bf | -ca STR}",
	"list_responses, list_requests, lr",
	"?",
	".",
	".. MULTICS_COMMAND_LINE"
	);

  dcl 1 responses aligned based (Presponses),
      2 header like LIST.header,
      2 title char (84),				/*   title of output list.			        */
      2 group (0 refer (responses.N)) like LIST.group,
      2 print_array (0 refer (responses.Npghs), 0 refer (responses.Nrows)),
        3 line_out char (HELP_LINE_SIZE_MAX),
       Presponses ptr;

  dcl  MAX_RESPONSES_COLUMNS fixed bin int static options(constant) init(2);
  dcl  MAX_RESPONSES_PARAGRAPHS fixed bin int static options(constant) init(2);

     call arg_setup (AsciP);				/* Error if any arguments given after the request name.   */
     if args_remain() then
	call response_error (hi.sciP, 0, "No arguments may be given.");
						/*  - This error reporting routine does not return.       */

     goto SUMMARIZE_FOR (hi.display_mode);
     
SUMMARIZE_FOR (DISPLAY_MODE_non_subroutine):
     if  hi.LIST_non_subroutine_responsesP = null()  then do;
	hi.LIST_non_subroutine_responsesP, Presponses = hi.next_free_spaceP;
	responses.header = 0;
	responses.title = "List of responses for most infos:";
	responses.N = dim(NONSUBR_RESPONSES, 1);
	responses.group.arg = NONSUBR_RESPONSES;
	responses.group.Snot_found = 0;
	
	call help_util_$format_LIST (AsciP, help_infoP, Presponses, MAX_RESPONSES_COLUMNS, MAX_RESPONSES_PARAGRAPHS);
	end;
     else Presponses = hi.LIST_non_subroutine_responsesP;
     goto SUMMARIZE_DISPLAY_LIST;

SUMMARIZE_FOR (DISPLAY_MODE_subroutine):
     if  hi.LIST_subroutine_responsesP = null()  then do;
	hi.LIST_subroutine_responsesP, Presponses = hi.next_free_spaceP;
	responses.header = 0;
	responses.title = "List of responses for subroutine infos:";
	responses.N = dim(SUBR_RESPONSES, 1);
	responses.group.arg = SUBR_RESPONSES;
	responses.group.Snot_found = 0;
	
	call help_util_$format_LIST (AsciP, help_infoP, Presponses, MAX_RESPONSES_COLUMNS, MAX_RESPONSES_PARAGRAPHS);
	end;
     else Presponses = hi.LIST_subroutine_responsesP;
     goto SUMMARIZE_DISPLAY_LIST;

SUMMARIZE_FOR (DISPLAY_MODE_unset):
     call response_error (hi.sciP, error_table_$noarg, "Internal error: hi.display_mode is unset.");
     return;

SUMMARIZE_FOR (DISPLAY_MODE_help_request_loop):
     return;					/* No prompts or responses occur in help_request_loop mode*/

SUMMARIZE_DISPLAY_LIST:
     call help_util_$print_LIST (AsciP, help_infoP, Presponses);
     call newline (1);

     hi.prompt_repeatS = T;
     return;
%page;
/* ======================================================================
   REQUEST: help, h

   Function: Display information about a given help response, or requests.

   This is a simplistic version of the Multics help command, tailored for
   the ssu_ environment in which requests may originate from different sources:
     - requests defined by the current subsystem     (help)
     - requests defined by the ssu_ subsystem itself (ssu_ built-ins)

   Info segments for each type of request are stored in different locations
   and in differing formats.

     - help-specific responses and requests are all defined as :[Info]: 
       partitions within the help command info segment: help.info

     - ssu_-provided requests are defined as separate info segments
       at: >doc>subsystem>ssu.REQUEST_NAME.info

   This help request is part of the Multics help_ ssu subsystem.
   It uses absolute pathnames to search for info segments to be displayed.
/* ====================================================================== */

help:
     entry (AsciP, help_infoP);
     
/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */

  dcl 1 args aligned,
      2 sciP ptr,
      2 operands,
        3 topic char(425) var,
        3 ca_operand char(32) var,
      2 S,
        3 (briefS,					/* help RESPONSE_NAME -brief			        */
	 caS,					/* help RESPONSE_NAME -control_arg STR		        */
	 errorS					/* T: an error occurred processing args.	        */
           ) bit(1) unaligned;

     args.sciP = AsciP;
     args.operands = "";
     args.S = F;

     call arg_setup (AsciP);				/* Select help topic, or a format via -Control_args       */
     if args_remain() then
	call Args_help (args);
     if  args.errorS  then				/* Errors diagnosed by Args_help?		        */
	call response_error (AsciP);			/*  - Abort remainder of response line.		        */


     if  args.caS & args.ca_operand = ""  then 
	call response_error (AsciP, error_table_$noarg, "Missing operand for: -control_arg");
						/*  - This error reporting routine does not return.       */
     

     if  args.topic = ""  then do;			/* If no topic given, summarize "More help?" responses    */
	call help_util_$execute (hi.sciP, help_infoP, "?");
						/*  - This list of responses is easily recognizable and   */
	call newline(1);				/*    needs to demarcation lines.		        */
	call ioa ("For more information about any response above, type:");
	call ioa ("   help RESPONSE_NAME");
	call ioa ("or:");
	call ioa ("   help RESPONSE_NAME -brief");
	call ioa ("For example:");
	call ioa ("   help scn");
	call newline(1);

	hi.prompt_repeatS = T;
	return;
	end;
     

/* -----------------------------------------------------------------
   Locate newest version of help.info segment.
   ----------------------------------------------------------------- */

  dcl (HELP_FILE_DIR        char(168) init(">doc>info"),	
       HELP_FILE_ENTRYNAME  char( 32) init("help.info")
       ) int static options(constant);
     

  dcl  help_file_uid bit(36) aligned int static init("0"b);
  dcl  help_file_dir char(168) int static init("");
     
     if  help_file_uid = F then do;			/* If not located before in this process...	        */

  dcl (entryP, envP) ptr;				/* Get referencing_dir: directory in which help_ resides. */
	call cu_$decode_entry_value (help_requests_, entryP, envP);

  dcl  referencing_dir char(168);
	call hcs_$fs_get_path_name (entryP, referencing_dir, 0, "", code);

	call hcs_$get_uid_file (referencing_dir, HELP_FILE_ENTRYNAME, help_file_uid, code);
						/* Does help.info exist in referencing dir?  Get its uid. */
						/*  info_seg_ can recognize file's uid if it has already  */
						/*  parsed that file.			        */

	if  help_file_uid = F  then do;		/* help.info not found in referencing dir; use >doc>info  */
	     call hcs_$get_uid_file (HELP_FILE_DIR, HELP_FILE_ENTRYNAME, help_file_uid, code);
	     
	     if  help_file_uid = F  then 		/* Very bad!  >doc>info>help.info was not found.	        */
		call response_error (AsciP, error_table_$noentry, "help info segment: ^a>^a", 
		     HELP_FILE_DIR, HELP_FILE_ENTRYNAME);

	     help_file_dir = HELP_FILE_DIR;		/* Remember dir holding latest help.info for future       */
	     end;					/*   use in this process.			        */
	else help_file_dir = referencing_dir;
	end;

/* -----------------------------------------------------------------
   Call info_seg_ to parse help.info into blocks, sections, 
   paragraphs, and lines.
   ----------------------------------------------------------------- */

  dcl 1 isd aligned like info_seg_data based (hi.isdP);

     iFileP =					/* Get threaded list of blocks/lines in help.info seg.    */
	info_seg_$examine_iFile (addr (isd), help_file_dir, HELP_FILE_ENTRYNAME, help_file_uid, code);
						/*  info_seg_ will return previously parsed version of    */
						/*  file, if it parsed one in this instance of help_.     */
     if  iFileP = null()  then 
	call response_error (AsciP, code, "Parsing help info segment: ^a>^a", help_file_dir, HELP_FILE_ENTRYNAME);
						/*   - Report any errors in parsing help.info seg.        */

     call info_seg_$parse_iFile (addr (isd), addr (iFile));	/*   - Complete parsing each info block into sections,    */
						/*     and paragraphs (if it wasn't done in early use     */
						/*     of help.info				        */

/* -----------------------------------------------------------------
   Find block matching user-specified TOPIC, which should be a
   help RESPONSE_NAME.
   ----------------------------------------------------------------- */

  dcl  nmI fixed bin;
     
     do iBlokP = iFile.relatives.bloks.firstP		/* Walk list of :[Info]: hidden blocks in help.info.      */
	repeat iBlok.sib.nextP  while (iBlokP ^= null() );/*   Hidden blocks are those without an external 	        */
						/*   RESPONSE_NAME.info on the help.info segment.	        */
	if  iBlok.divider = iBlok_divider_Info_no_ext_names  then do;
	     do nmI = lbound(Blok_names,1) to hbound(Blok_names,1);
	          if  args.topic = Blok_names(nmI)  then
		     goto HELP_found_block;
		end;
	     end;
	end;
     call response_error (AsciP, 0, "No information found for TOPIC: ^a", args.topic);
						/*  - This error reporting routine does not return.       */
     

/* -----------------------------------------------------------------
   Display all of desired RESPONSE_NAME block, or brief or control_arg
   information for that block.
   ----------------------------------------------------------------- */

  dcl 1 saved_help_info_ptrs aligned like help_info.info_ptrs;
  dcl  saved_display_mode fixed bin;
  dcl  SP_SP char(2) int static options(constant) init("  ");

HELP_found_block:
     saved_help_info_ptrs = hi.info_ptrs;		/* Save pointers relating to prior info seg being	        */
     saved_display_mode = hi.display_mode;		/*  displayed when "help RESPONSE_NAME" was given.        */

     hi.iFileP = iFileP;				/* Focus on help.info and the RESPONSE_NAME block.        */
     hi.iBlokP = iBlokP;
     hi.selected = null();
     hi.iPgh_print_range = null();
     hi.display_mode = DISPLAY_MODE_help_request_loop;	/* Let response routines we call know help_requests_$help */
						/*  is calling them.			        */

     call newline (1);				/* Show demarcation line separating prior info seg output */
						/*  from description of the help RESPONSE_NAME.  Don't    */
						/*  want user confused by scroll-back in terminal buffer. */
     call ioa ("  /* --  help response:  ^a  ^20(-^)", string(iBlok.header.reformatted) );
     call newline (1);

     if  args.briefS  then do;			/* Display any brief description of RESPONSE_NAME blok.   */
	call help_util_$execute (AsciP, help_infoP, "brief");
	end;

     if  args.caS  then do;				/* Display RESPONSE_NAME args matching -control_arg STR   */
	call newline (1);				/*  - Because of hi.display_mode, our operand won't be    */
	call help_util_$execute (AsciP, help_infoP,	/*    saved in control_args STRs from past calls.	        */
	     "control_arg " || requote_string_ ( (args.ca_operand) ) );
	end;

     if  args.briefS | args.caS  then			/* If either/both control args given, print nothing else  */
	goto HELP_ending_output;			/*  besides their output.			        */
     

     call newline (1);				/* If no control args given, print all of RESPONSE_NAME   */
     do iSectP = iBlok.relatives.sects.firstP		/*   block.				        */
	repeat iSect.sib.nextP  while (iSectP ^= null() );
	call help_util_$print_section (hi.sciP, help_infoP, iSectP);
	end;

HELP_ending_output:
     call newline (1);				/* Print end of demarcation lines.		        */
     call ioa ("     --^v(-^) */", 
	length ("  help response:  ") + length (rtrim (string (iBlok.header.reformatted))) + length(SP_SP) + 20);
     call newline (1);

     hi.info_ptrs = saved_help_info_ptrs;		/* Restore data for prior info seg being displayed when   */
     hi.display_mode = saved_display_mode;		/*  "help RESPONSE_NAME" was given as the response.       */
     hi.prompt_repeatS = T;				/* Force help to redisplay prompt for prior info seg text */
     return;
%page;
/* ------------------------------------------------------------
   Process help request's -control_arg arguments.
   ------------------------------------------------------------ */

Args_help:
     proc (c);

  dcl 1 c aligned like args;				/*  control arg specification data                   (in) */

     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if isControlArg(arg) then do;

	     if       arg = "-bf"     | arg = "-brief"          then c.briefS = T;
	     else if  arg = "-ca"     | arg = "-control_arg"    then do; c.caS = T;
							     c.ca_operand = "";
							     end;
               else do;
		call error (c.sciP, error_table_$badopt, "Unsupported control arg: ^a", arg);
		c.errorS = T;
		end;
	     end;
	
	else do;					/* If arg is a -control_arg operand		        */
	     if c.caS & c.ca_operand = "" then
		c.ca_operand = arg;

	     else do;
		c.topic = arg;
		if length(arg) > maxlength(c.topic) then do;
		     call error (c.sciP, error_table_$bigarg, 
		          "'^a' may be up to ^d characters long.", arg, maxlength(c.topic));
		     c.errorS = T;
		     end;
		end;
	     end;

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end;

     end Args_help;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  help_requests_$unknown_response					        */
	/*									        */
	/* REPLACES: ssu_ unknown_request procedure.					        */
	/*									        */
	/* FUNCTION: diagnose RESPONSE_NAME entered by user that is not one of the defined responses.     */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


unknown_response:
     entry (AsciP, help_infoP, P_response_name, P_arg_list_ptr, P_continue_sw);

/*dcl  AsciP ptr;					/* help_ subsystem's sci_ptr			(Input) */
/*dcl  help_infoP  ptr;				/* points to the help_info (hi) data structure.   (Input) */
  dcl  P_response_name char(*);			/* name of the response entered by the user.      (Input) */
  dcl  P_arg_list_ptr ptr;				/* points to argument list for that response.     (Input) */
  dcl  P_continue_sw bit(1) aligned;			/* if set to "1"b, indicates that this routine	        */
						/*  diagnosed the unknown response event.        (Output) */

  dcl  SR_RESPONSE_NAME char(1) int static options(constant) init("?");

       call response_error (AsciP, 0, "Unknown response ""^a"".  Type ""^a"" for possible responses.",
	  P_response_name, SR_RESPONSE_NAME);		/* response_error calls ssu_$abort_line, so this call     */
						/* never returns.				        */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
%include info_seg_dcls_;
%page;
%include ssu_request_dcls_;
%page;
%include help_args_;
%page;
%include help_cis_args_;

     end help_requests_;
