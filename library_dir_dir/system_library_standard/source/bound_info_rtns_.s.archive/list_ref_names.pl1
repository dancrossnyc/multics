/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_ref_names: lrn: proc;

/* This command lists the reference names of segments */
/* initially coded Jan 1971 by Dan Bricklin */
/* last modified by Dan B. March 1971 */
/* Fixed to abort for invalid -from and -to, Steve Herbst 11/8/77 */
/* Fixed to not make copy in [pd] if copy switch is on 03/20/80 S. Herbst */
/* Changed to always print segno, path, and refnames 12/13/83 S. Herbst */
/* Fixed to rtrim the refnames it prints 12/14/83 S. Herbst */

dcl
    (i, alen, from_seg, to_seg, argno, seg_no, num_null) fixed bin,
     code fixed bin (35),
     error_table_$badopt fixed bin (35) ext,
     error_table_$segknown fixed bin (35) ext,
    (aptr, segptr) ptr,
    (brief, prt, allsw, no_zero) bit (1) aligned,
     which char (16) init ("list_ref_names") int static aligned,
     dirname char (168) aligned,
     ename char (32) aligned,
     arg char (alen) based (aptr),
     ret label init (end_loop),
     plural char (1) aligned,

     1 p aligned,
     2 ignore char (31) unaligned,
     2 rname char (32) unaligned,
     2 nl char (1) unaligned,

     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_oct_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     expand_pathname_ ext entry (char (*), char (*) aligned, char (*) aligned, fixed bin (35)),
     hcs_$initiate ext entry (char (*)aligned, char (*)aligned, char (*)aligned, fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     com_err_ ext entry options (variable),
     ioa_ ext entry options (variable),
     hcs_$terminate_noname ext entry (ptr, fixed bin (35)),
     hcs_$fs_get_path_name ext entry (ptr, char (*)aligned, fixed bin, char (*)aligned, fixed bin (35)),
     hcs_$high_low_seg_count ext entry (fixed bin, fixed bin),
     hcs_$fs_get_ref_name ext entry (ptr, fixed bin, char (*), fixed bin (35)),
     ring0_get_$name ext entry (char (*)aligned, char (*)aligned, ptr, fixed bin (35)),
     iox_$user_output ptr ext;

dcl (addr, baseno, baseptr, fixed, length, substr) builtin;

	allsw, brief, no_zero = "0"b;			/* assume print ring-0, and not all and brief options */
	nl = "
";						/* set nl equal to a newline char */
	argno = 1;				/* start with first argument */

	do i = 1 by 1;				/* look at all arguments */
	     call cu_$arg_ptr (i, aptr, alen, code);	/* for the -all and -brief options */
	     if code ^= 0 then go to next;		/* end of argument list */
	     if arg = "-brief" | arg = "-bf" then brief = "1"b; /* found a brief option */
	     if arg = "-all" | arg = "-a" then allsw = "1"b; /* found an all option, so set switch to remember */
	end;

next:	from_seg = 0;				/* default from segment number is zero */

	call cu_$arg_ptr (argno, aptr, alen, code);	/* get next argument */

	if code ^= 0 then do;			/* end of argument list */
	     if argno = 1 | argno = 2 & brief then do;	/* if nothing was given, print all non-ring zero */
		no_zero = "1"b;			/* don't print ring zero ones */
		go to all;
	     end;
	     return;				/* else return to caller */
	end;

	if arg = "-to" then do;			/* if the -to option is encountered, do */
	     argno = argno + 1;			/* look at next argument */
to_sec:	     call cu_$arg_ptr (argno, aptr, alen, code);
	     if code ^= 0 then do;			/* if not there then it is an error */
error:		call com_err_ (code, which);		/* print message */
		return;				/* end of arg list, so return */
	     end;

	     to_seg = cv_oct_check_ (arg, code);	/* convert to number */

	     if code ^= 0 | to_seg < 0 then do;
		call com_err_ (0, which, "Invalid -to argument ^a", arg);
		return;
	     end;

got_to:	     if from_seg>to_seg then do;		/* if lower bound > upper bound then error */
		call com_err_ (0, which, "Lower segment number bound ^o greater than upper bound ^o",
		     from_seg, to_seg);
		return;
	     end;

num_print:					/* given segment number, print info */
	     prt = "0"b;				/* nothing printed yet */

	     do seg_no = from_seg to to_seg;		/* do for each segment number in range */

		call hcs_$fs_get_path_name (baseptr (seg_no), dirname, i, ename, code); /* get path name */
		if code ^= 0 then do;		/* if unable then try the following */
		     if no_zero then go to end_loop;	/* if no ring-0 ones to be printed, don't even check */
		     call ring0_get_$name (dirname, ename, baseptr (seg_no), code); /* is it in ring 0 ? */
		     if code ^= 0 then go to end_loop;	/* if not, then ignore it for now */

		     if dirname = "" then call ioa_ ("   ^o ^a (ring 0)", seg_no, ename); /* no dir */

		     else do;

			if dirname = ">" then dirname = ""; /* don't have two >'s on root */

			call ioa_ ("   ^o ^a>^a (ring 0)", seg_no, dirname, ename); /* print info */

		     end;

		     prt = "1"b;

		     go to printed;			/* skip around regular print routine */
		end;

		if i = 1 then dirname = "";		/* if name is only >, then remove it, since we have one */

		prt = "1"b;			/* we printed something */

		call ioa_ ("^/   ^o ^a>^a", seg_no, dirname, ename); /* print number and path */

printed:		if ^brief then do;			/* print reference names, if not brief */

		     ret = end_loop;		/* pseudo call */

		     go to ref_print;

		end;

end_loop:	     end;					/* end of loop for each segment number */

	     if ^prt then
		if to_seg = from_seg then call com_err_ (0, which, "Invalid segment number ^o", from_seg);
		else call com_err_ (0, which, "Invalid segment numbers ^o and ^o", from_seg, to_seg);

	     argno = argno + 1;
	     go to next;
	end;

	if arg = "-from" | arg = "-fm" then do;		/* if -from option encountered */
	     argno = argno + 1;			/* look for number after it */
	     call cu_$arg_ptr (argno, aptr, alen, code);
	     if code ^= 0 then go to error;		/* not found is an error */

	     from_seg = cv_oct_check_ (arg, code);	/* make it a number */

	     if code ^= 0 | from_seg < 0 then do;
		call com_err_ (0, which, "Invalid -from argument ^a", arg);
		return;
	     end;

	     call cu_$arg_ptr (argno + 1, aptr, alen, code); /* look for a "-to" after the from number */


all:	     call hcs_$high_low_seg_count (to_seg, i);	/* get last allocated segment number */
	     to_seg = to_seg + i;			/* by adding high hc to number after hardcore */
	     if from_seg>to_seg then do;		/* starting after last seg */
		call com_err_ (0, which, "Lower bound ^o greater than highest segment number ^o.",
		     from_seg, to_seg);

		return;

	     end;

	     if code = 0 then if arg = "-to" then do;
		     argno = argno + 2;
		     go to to_sec;
		end;


	     go to got_to;


	end;

	if arg = "-name" | arg = "-nm" then do;		/* if name option */
	     argno = argno + 1;			/* get next argument */
	     call cu_$arg_ptr (argno, aptr, alen, code);	/* and treat it as a character string */
	     if code = 0 then go to no_num;		/* regardless of how it looks */
	     else go to error;			/* if none there, then error */
	end;

	if arg = "-brief" | arg = "-bf" then do;	/* ignore brief options since we already processed it */
	     argno = argno + 1;
	     go to next;
	end;

	if allsw then do;				/* if all option was present */
	     from_seg = 0;				/* simulate -from 0 */
	     go to all;
	end;

	if substr (arg, 1, 1) = "-" then do;		/* look for option type args which we can't identify */
	     call com_err_ (error_table_$badopt, which, "^a", arg);
	     return;
	end;

	seg_no = cv_oct_check_ (arg, code);		/* see if argument can be seen as a number */

	if code = 0 then do;			/* if so, then do */
	     to_seg, from_seg = seg_no;		/* pretend that it is: -from num -to num */
	     go to num_print;			/* go to numbered segment printing routine */
	end;

no_num:	call expand_pathname_ (arg, dirname, ename, code);
	if code ^= 0 then go to error;

	call hcs_$initiate (dirname, ename, "", 0, 1, segptr, code); /* see if it is there already and where */

	if code = 0 then do;			/* wasn't known in advance, no good */
	     call com_err_ (0, which, "Segment not known. ^a^[>^]^a", dirname, dirname ^= ">", ename);
	     call hcs_$terminate_noname (segptr, code);	/* terminate the reference */
	     argno = argno + 1;			/* try next argument */
	     go to next;
	end;

	if code ^= error_table_$segknown then do;	/* if it wasn't known, another error */
	     call com_err_ (code, which, "^a^[>^]^a", dirname, dirname ^= ">", ename);
	     argno = argno + 1;			/* try again */
	     go to next;
	end;

	seg_no = fixed (baseno (segptr));		/* get segment number part of pointer */

	call hcs_$terminate_noname (segptr, code);	/* this reference dosn't count, so end it */

	call ioa_ ("^/   ^o ^a>^a", seg_no, dirname, ename);  /* print number and path */

	argno = argno + 1;				/* get ready for next argument */

	if brief then go to next;			/* skip ref name printing */

	ret = next;				/* pseudo call */

ref_print:
	num_null = 0;				/* no null reference names found so far for this segment */

	do i = 1 by 1;				/* look at all reference names */
	     call hcs_$fs_get_ref_name (baseptr (seg_no), i, p.rname, code); /* get reference names from this entry */
	     if code ^= 0 then go to fin;		/* when ended, then go to fin */

/* if not null, write structure with it and newline */
	     if p.rname ^= "" then
		call ioa_ ("^a", p.rname);

	     else num_null = num_null + 1;		/* else count number of null refs */

	end;

fin:	if num_null>0 then do;			/* print number of null refs if > zero */
	     if num_null = 1 then plural = " ";		/* de-pluralize word */
	     else plural = "s";			/* pluralize word */
	     call ioa_ ("^d null reference name^a", num_null, plural);
	end;

	go to ret;				/* pseudo return */


     end;
