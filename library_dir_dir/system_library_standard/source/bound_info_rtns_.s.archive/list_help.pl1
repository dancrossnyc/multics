/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(74-06-01,Dean), approve(), audit(), install():
     Written June 1974 by John W. Dean III MITIPC
  2) change(78-10-01,Greenberg), approve(), audit(), install():
     Modified October 1978 by Bernie S. Greenberg for new search facility etc.
  3) change(80-06-11,Herbst), approve(), audit(), install():
     Modified 06/11/80 by S. Herbst to implement [list_help] and add
      -absolute_pathname.
  4) change(81-09-01,GJohnson), approve(), audit(), install():
     Modified September, 1981 by Gary E. Johnson:
      - increase printed output limit to 4092 characters
      - no error message when empty dir encountered
      - ignore ".info" suffix
      - allow multiple -pn arguments
      - allow -brief on active function invocation
      - implement case insensitivity
      - add -long control argument
  5) change(83-12-01,Spitzer), approve(), audit(), install():
     Modified December 1983 by C. Spitzer:
      - add -sort control argument
  6) change(85-01-25,Lippard), approve(85-01-23,MCR7158),
     audit(85-10-04,RBarstad), install(85-12-17,MR12.0-1001):
     Modified January 1985 by Jim Lippard:
      - not complain about info segs to which user doesn't have access
                                                   END HISTORY COMMENTS */


list_help:
lh:  procedure;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/*             Command to list names of "help" files:				*/
/*                  if no args are given, a usage message is printed,			*/
/*                  arguments are taken as "topics" to be searched for,		*/
/*                  only names which contain one of the topics will be listed		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*   LIST OF AUTOMATIC VARIABLES    */


declare  absp_sw bit (1),				/* -absolute_pathname specified */
         af_sw bit (1),				/* invoked as an active function */
        (alp, eptr, nptr) pointer,
         arglen fixed binary (21),
        (argptr, return_ptr) ptr,
         arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr) variable,
         brief bit (1),				/* controls output format */
         complain entry variable options (variable),
         code fixed bin (35),				/* general code variable */
         ecount fixed bin,
         entryname char (32) varying,
         xentryname char (32) varying,

        (numpath, return_len) fixed binary,
         found bit (1),				/* topic found in file name */
        (i, iname, narg, nargs, nentry, nname) fixed bin,
         list_all bit (1),				/* -all option */
         link_target_type fixed binary (2),
         ndir fixed bin,				/* directory counter */
         ntopics fixed bin,				/* number of topics given as arguments */
         number_printed fixed bin,			/* number of files listed */
         outstring char (4092) varying,
         pn_flag bit (1),				/* user has specified the dir */
         sort_sw bit (1) aligned,			/* want sorting on output */
         sort_stringsl fixed bin (21),
         tempp (4) ptr,
         (sort_strings_arrayp, ptr_arrayp, index_arrayp, length_arrayp) ptr;

/* LIST OF BASED VARIABLES  */

declare  area area based (areap),
         arg char (arglen) based (argptr),
         return_arg char (return_len) varying based (return_ptr);

declare 1 ptr_array based (ptr_arrayp) aligned,
        2 n fixed bin (18),
        2 ptr (ptr_array.n) ptr unaligned;

declare 1 length_array based (length_arrayp) aligned,
        2 n fixed bin (18),
        2 length (length_array.n) fixed bin (18);

declare 1 index_array based (index_arrayp) aligned,
        2 n fixed bin (18),
        2 index (index_array.n) fixed bin (21);

declare sort_strings char (sort_stringsl) based (sort_strings_arrayp);
declare sort_strings_array (sort_stringsl) char (1) unaligned based (sort_strings_arrayp);

declare 1 entry (ecount) aligned based (eptr),
        2 type bit (2) unaligned,
        2 nnames fixed bin (15) unaligned,
        2 nindex fixed bin (17) unaligned,
         names (iname) char (32) based (nptr);

/*  LIST OF CONDITIONS */

declare  cleanup condition;

declare  absolute_pathname_ entry (char (*), char (*), fixed bin (35)),
         active_fnc_err_ entry options (variable),
         com_err_ entry options (variable),
         check_star_name_$path entry (char (*), fixed bin (35)),
         cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35)),
         cu_$arg_list_ptr entry (pointer),
         cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
         cu_$af_arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
         get_system_free_area_ entry returns (pointer),
         hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
         hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
         fixed bin (35)),
         ioa_ entry options (variable),
         pathname_ entry (char(*), char(*)) returns(char(168)),
         sort_items_indirect_$adj_char entry (ptr, ptr, ptr),
        (get_temp_segments_, release_temp_segments_) entry (char(*), (*) ptr, fixed bin(35)),
         search_paths_$get entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));


/*	    LIST OF STATIC VARIABLES          */

declare  areap ptr int static init (null),
         error_table_$badopt fixed bin (35) external,	/* illegal control argument */
         error_table_$inconsistent fixed bin (35) external,
         error_table_$incorrect_access fixed bin (35) external,
         error_table_$noentry fixed bin(35) ext static,
         error_table_$no_info fixed bin(35) ext static,
         error_table_$nomatch fixed bin (35) external,
         error_table_$nostars fixed bin (35) external,
         error_table_$wrong_no_of_args fixed bin (35) external,
         myname char (32) options (constant) static init ("list_help"),
         sys_info$max_seg_size fixed bin(35) ext static,
        (upper_case char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
         lower_case char (26) init ("abcdefghijklmnopqrstuvwxyz")) static options (constant);


declare (addr, divide, index, length, null, rtrim, substr, translate, unspec) builtin;

/* initialization and argument handling */


	call cu_$af_return_arg (nargs, return_ptr, return_len, code);
	if code ^= 0 then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     arg_ptr = cu_$arg_ptr_rel;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     return_arg = "";
	     arg_ptr = cu_$af_arg_ptr_rel;
	end;

	call cu_$arg_list_ptr (alp);

BLOCK:	begin;
declare  user_dir (divide (nargs, 2, 17, 0)) char (168);	/* for user specified directory */
declare  topic (nargs) char (32) varying;		/* can't be more topics than arguments */

	     numpath = 0;				/* for pathname count */
	     list_all = "0"b;
	     number_printed = 0;
	     ntopics = 0;
	     absp_sw = "0"b;
	     pn_flag = "0"b;
	     sort_sw = "0"b;
	     brief = af_sw;
	     do narg = 1 to nargs;
		call arg_ptr (narg, argptr, arglen, code, alp);
		if index (arg, "-") = 1 then do;
		     if arg = "-long" | arg = "-lg" then brief = "0"b;
		     else if arg = "-brief" | arg = "-bf" then brief = "1"b;
		     else if arg = "-a" | arg = "-all" then list_all = "1"b;
		     else if arg = "-absolute_pathname" | arg = "-absp" then absp_sw = "1"b;
		     else if arg = "-sort" then sort_sw = "1"b;
		     else if arg = "-no_sort" then sort_sw = "0"b;
		     else if arg = "-pathname" | arg = "-pn" then do;
			pn_flag = "1"b;
			narg = narg + 1;
			call arg_ptr (narg, argptr, arglen, code, alp);
						/* get user specified dir path */

			if code ^= 0 then do;
			     call complain (code, myname, "
The -pn control argument must be followed by a pathname.");
			     return;
			end;


			numpath = numpath + 1;
			call absolute_pathname_ (arg, user_dir (numpath), code);
						/* get absolute path of dir */
			if code ^= 0 then do;
			     call complain (code, myname, "^a", arg);
			     return;
end_path:			end;
			call check_star_name_$path (user_dir (numpath), code);
			if code ^= 0 then do;
			     if code = 1 | code = 2 then code = error_table_$nostars;
			     else call complain (code, myname, "^a", arg);
			     return;
			end;
		     end;
		     else do;
BAD_OPT:			call complain (error_table_$badopt, myname, """^a""", arg);
			return;
		     end;
		end;

		else do;
		     ntopics = ntopics+1;
		     topic (ntopics) = translate (arg, lower_case, upper_case);
		end;


	     end;					/* of arg getting loop */

	     if ntopics > 0 then do;			/* both topics and -all in same command */
		if list_all then do;
		     call complain (error_table_$inconsistent, myname, "
Topics cannot be specified with -all.");
		     return;
		end;
	     end;
	     if af_sw then if ^brief then do;
		call complain (error_table_$badopt, myname, "
The -long control arg is not accepted for active function.");
		return;
	     end;

	     if ntopics = 0 then do;			/* ntopics=0 and -all not specified is wrong */
		if ^list_all then do;
		     call complain (error_table_$wrong_no_of_args, myname, "
You must specify topics or use the -all control_arg.  For details, type,

     help lh");
		     return;
		end;
	     end;


	     areap = get_system_free_area_ ();		/* for allocating star info */
	     sl_info_p = null;
	     eptr, nptr = null;
	     tempp (*) = null;
	     on cleanup call clean_up;

	     if ^pn_flag then do;
		call search_paths_$get ("info_segments", sl_control_default,
		     "", null, areap, sl_info_version_1, sl_info_p, code);
		if code ^= 0 then do;
		     call complain (code, myname, "Getting search list for info segments.");
		     return;
		end;
	     end;


/* searching and printing of file names */

	     if pn_flag then do ndir = 1 to numpath;	/* specified by -pn option */
		call scan_dir (user_dir (ndir));
	     end;
						/* default directories */
	     else do ndir = 1 to sl_info.num_paths;
		call scan_dir (sl_info.pathname (ndir));
	     end;

	     if number_printed = 0 & ^af_sw then call ioa_ ("No files found.");
	     else if sort_sw
		then do;
		     unspec (index_array) = "0"b;
		     call sort_items_indirect_$adj_char (ptr_arrayp, index_arrayp, length_arrayp);
		     do i = 1 to ptr_array.n;
			argptr = ptr_array.ptr (index_array.index (i));
			arglen = length_array.length (index_array.index (i));
			if af_sw
			then return_arg = return_arg || arg;
			else call ioa_ ("^a", arg);
			end;
		     end;

	     call clean_up;

	     goto RETURN;
	     					/* internal proc to do searching and listing */

scan_dir:	     procedure (dirname);

declare  dirname char (168) parameter;
declare  strip_info_suffix bit (1) aligned;

		call hcs_$star_ (dirname, "**.info", 3, areap, ecount, eptr, nptr, code);
						/* use "**" to avoid duplication of effort */
						/* get all segs and links in specified dir */
		if code ^= 0 then do;		/* problem getting info */
		     if code ^= error_table_$nomatch then do;
			call complain (code, myname, "Listing files in ^a.", dirname);

			return;
		     end;
		end;


		do nentry = 1 to ecount;		/* scan all entries */
		     if entry.type (nentry) = "10"b then go to NEXT_ENTRY; /* ignore directories */
		     iname = entry.nindex (nentry);
		     if entry.type (nentry) = "00"b then do;
			call hcs_$status_minf (dirname, names(iname), 1, link_target_type,
			     0, code);
			if code = error_table_$noentry then go to NEXT_ENTRY;
			else if code = error_table_$incorrect_access then go to NEXT_ENTRY;
			else if code = error_table_$no_info then go to NEXT_ENTRY;
			else if code ^= 0 then do;
			     call complain (code, myname, "^a",
				pathname_ (dirname, names (iname)));
			     go to NEXT_ENTRY;
			end;
			if link_target_type = 00b | link_target_type = 10b then go to NEXT_ENTRY;
		     end;
		     nname = 1;			/* nname is the number+1 of names with ".info" */
		     found = list_all;		/* no topics matched for this seg yet */
		     strip_info_suffix = "0"b;
		     do nname = 1 to entry.nnames (nentry);
						/* go through all names */
			entryname = rtrim (names (iname));

			if substr (entryname, length (entryname) - length (".info") + 1) = ".info" then do;
			     entryname = substr (entryname, 1, length (entryname) - length (".info"));
			     strip_info_suffix = "1"b;
			     xentryname = translate (entryname, lower_case, upper_case);
			end;
			else go to NEXT_ENTRY;

			if ^found then do;		/* topics specified and not matched yet */
			     do i = 1 to ntopics
				     while (index (xentryname, topic (i)) = 0);
			     end;
			     found = (i <= ntopics);
			end;

			if nname = 1 then do;	/* first name */
			     if absp_sw then do;
				outstring = rtrim (pathname_ ((dirname), (entryname)));
				if strip_info_suffix then outstring = outstring || ".info";
				end;
			     else outstring = entryname;
			end;


			if ^brief & nname > 1 then do; /* additional names */
			     if nname = 2 then outstring = outstring || " (";
			     else outstring = outstring || ", ";
			     outstring = outstring || entryname;
			end;

			iname = iname+1;
		     end;				/* end of loop for names of one entry */

		     if found then do;		/* there is something to print */
			if ^brief & nname > 2 then	/* add closing paren */
			     outstring = outstring||")";

			if sort_sw then call add_to_sort_data (outstring);
			else if af_sw then do;
				if number_printed > 0 then return_arg = return_arg || " ";
				return_arg = return_arg || outstring;
			     end;
			     else call ioa_ ("^a", outstring);

			number_printed = number_printed+1;
		     end;

NEXT_ENTRY:
		end;				/* end of processing for one entry */

		if nptr ^= null () then do; free names in (area); nptr = null (); end;
		if eptr ^= null () then do; free entry in (area); eptr = null (); end;

	     end scan_dir;				/* end of processing for one directory */

	end BLOCK;				/*  end of begin block for topic allocation */

RETURN:
	return;

add_to_sort_data:
     proc (in);

dcl  in char (*) varying parameter;
dcl  len fixed bin (21);

	if tempp (1) = null then do;
	     call get_temp_segments_ (myname, tempp, code);
	     if code ^= 0 then do;
		call complain (code, myname, "Getting temp segments.");
		goto RETURN;
		end;
	     ptr_arrayp = tempp (1);
	     index_arrayp = tempp (2);
	     length_arrayp = tempp (3);
	     sort_strings_arrayp = tempp (4);
	     length_array.n, ptr_array.n, index_array.n = 0;
	     sort_stringsl = 0;
	     end;

	len = length (in);
	if sort_stringsl + len + 1 > sys_info$max_seg_size * 4 then do;
	     call complain (0, myname, "Attempt to sort too much data.");
	     goto RETURN;
	     end;

	ptr_array.n = ptr_array.n + 1;
	ptr_array.ptr (ptr_array.n) = addr (sort_strings_array (sort_stringsl+1));

	length_array.n = length_array.n + 1;
	length_array.length (length_array.n) = len;

	substr (sort_strings, sort_stringsl+1, len) = in;
	sort_stringsl = sort_stringsl + len;

	return;
	end add_to_sort_data;

/* procedure to free things allocated by hcs_$star_ */

clean_up:	proc;
	     if nptr ^= null () then do; free names in (area); nptr = null (); end;
	     if eptr ^= null () then do; free entry in (area); eptr = null (); end;
	     if sl_info_p ^= null () then do; free sl_info in (area); sl_info_p = null (); end;
	     if tempp (1) ^= null () then call release_temp_segments_ (myname, tempp, (0));

	end clean_up;


%include sl_info;
%include sl_control_s;
     end;
