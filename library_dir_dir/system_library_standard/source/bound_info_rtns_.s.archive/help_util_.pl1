
/****^  HISTORY COMMENTS:
  1) change(2020-10-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version created as part of help_ rewrite
  2) change(2020-11-23,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Fix list identification logic in $print_iSect_List entry point.
  3) change(2021-01-03,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) $print_iSect_List subr sets iSect.help_listP to point to a LIST
         structure summarizing content of items in that section.  Change
         code to copy that formatted LIST from help_info temp seg in which
         it was built into space in the translator_temp_ area containing
         other info_seg_ structures (like iSect) so the LIST storage
         is tied to that of the iSect structure pointing to it.
                                                   END HISTORY COMMENTS */

help_util_:
     procedure();

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY:  help_util_$count_file_lines

   FUNCTION:  return count of a lines of all blocks in info seg, plus
	    a 2-line separator between blocks.  

   NOTE:  This is NOT equivalent to info_seg_util_$count_file_lines,
	because help_responses_$lep_setup replaces an "Entry points in ..."
	placeholder section with an actual list of entry points.  
	Those new lines are added to iBlok.line_count.

	Also, the info_seg_util_ routine returns count of lines in
	history comment blocks, whereas those blocks are removed from
	consideration by help_.
   ====================================================================== */

count_file_lines:
     entry (AsciP, help_infoP, AiFileP) returns(fixed bin);
     
/*dcl  AsciP ptr;					/* Declared in ssu_XXX.incl.pl1		        */
/*dcl  help_infoP ptr;				/* Declared in _help_shared_data_.incl.pl1	        */

  dcl  AiFileP ptr;					/* Points to info seg iFile descriptor.		        */

     Phelp_args = hi.help_argsP;


  dcl  count fixed bin;
  
     count = -help_args.Lspace_between_infos;
     iFileP = AiFileP;
     
     do iBlokP = iFile.relatives.bloks.firstP
	repeat iBlok.sib.nextP  while (iBlokP ^= null() );
	count = count + help_args.Lspace_between_infos;
	count = count + iBlok.line_count;
	end;
     if  count < 0  then
	count = 0;
     return (count);
%page;
/* ======================================================================
   ENTRY: execute

   Function: Execute a help_ subsystem request line (response string).
   ====================================================================== */

execute:
     entry (AsciP, help_infoP, Arequest_response);
     
/*dcl  AsciP ptr;					/* Declared in ssu_XXX.incl.pl1		        */
/*dcl  help_infoP ptr;				/* Declared in _help_shared_data_.incl.pl1	        */

  dcl  Arequest_response char(*);			/* string containing a request/response to be invoked.    */

  dcl (ssu_et_$program_interrupt,
       ssu_et_$subsystem_aborted
       ) fixed bin(35) ext static;

     call ssu_$execute_string (AsciP, Arequest_response, code);
     if  code = ssu_et_$program_interrupt  then
	goto hi.PI_LABEL;
     else if  code = ssu_et_$subsystem_aborted  then
	goto hi.SUBSYSTEM_ABORT_LABEL;
     else if  code ^= 0  then
	call error (AsciP, code, " Executing string: ^a", Arequest_response);

     return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY: print_LIST

   Function: Display a formatted LIST structure.  print_list precedes
	   the output with blank line.
   ====================================================================== */

print_LIST:
     entry (AsciP, help_infoP, pLIST);

/*dcl  pLIST	   ptr;				/* ptr to argument list to be printed.		        */

  dcl  nlS bit(1) aligned;
  
  dcl 1 L		   aligned based (pLIST),		/* Overlay of LIST structure.			        */
      2 header	   like LIST.header,		/*  - array bounds and counts.		        */
      2 title	   char (84),			/*  - "section title" of output list.		        */
      2 group	   (0 refer (L.N)) like LIST.group,	/*  - .arg(*) are elements in the list.		        */
      2 arr	   (0 refer (L.Npghs), 0 refer (L.Nrows)) like LIST.print_array;
						/*  - .line_out(*) are rows of list to be displayed.      */
						/*    Each row contains Ncols of .arg(I) items.	        */
						/*     (see LIST dcl in _help_shared_data_.incl.pl1)      */

     if  hi.print_inhibitS  then
	return;

     if  length(L.title) > 0  then do;
	call newline (1);
	call ioa ("^a", L.title);
	end;

FIND_END_ARRAY:					/* Find end of actual data so extraneous blank lines are  */
     Ipgh = L.Npghs;				/*  not output				        */
     do Irow = L.Nrows to 1 by -1  
	while (L.arr (Ipgh, Irow).line_out = "");
	end;
     last_line = Irow;


    do Ipgh = 1 to L.Npghs;				/* Output paragraphs, one at a time.		        */
         if Ipgh > 1 then
	    call newline (1);

         hb = L.Nrows;				/* Set last line of actual data in this paragraph.        */
         if Ipgh = L.Npghs then
	    hb = last_line;

         do Irow = 1 to hb;				/* Output rows, one at a time.		        */
	    if  L.arr (Ipgh, Irow).line_out = ""  then
	         if  Ipgh < L.Npghs  |  L.Npghs = 1  then
	              call newline (1);
	         else;				/*  - Don't output blank lines at end of last paragraph   */
	    else call ioa ("^a", L.arr (Ipgh, Irow).line_out);
						/*  - Actual line_out item preceded by 1 SP char.  This   */
						/*    was accounted for by $format_LIST entry lengths.    */
	    end;
         end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY: print_section

   Function: Display iSect of an info segment.
   ====================================================================== */

print_section:
     entry (AsciP, help_infoP, AiSectP);		/* This procedure formats a list of values.	        */

  dcl  AiSectP ptr;					/* Points to iSect to be printed.		(Input) */
     
     if  hi.print_inhibitS  then
	return;

     iSectP = AiSectP;

     call newline (1);				/* Print blank line before section title.	        */

     do iLineP = iSect.lines.firstP			/* Print each line of section (w/ 1 blank between pghs)   */
	repeat iLine.sibs.sect.nextP while (iLineP ^= null() );
	call ioa ("^a", Line);
	end;

     call newline (1);				/* Print blank line after final block data.	        */

     return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY: print_iSect_List

   Function: Display the List.items names in help_ LIST format.
   ====================================================================== */

print_iSect_List:
     entry (AsciP, help_infoP, AiSectP);

/*dcl  AiSectP ptr;					/* Points to iSect whose List is to be printed.	(Input) */

  dcl  DEFAULT_LIST_COLUMNS fixed bin int static options(constant) init(0);
  dcl  DEFAULT_LIST_PARAGRAPHS fixed bin int static options(constant) init(0);

  dcl 1 isd aligned like info_seg_data based (isdP),
       isdP ptr;
  dcl  translator_temp_$allocate entry (ptr, fixed bin) returns(ptr);
    
  dcl 1 perm_LIST	   aligned based (perm_LISTp),	/* Copy of sect_LIST allocated in info_seg_ areaP	        */
      2 header	   like LIST.header,		/*  - array bounds and counts.		        */
      2 title	   char (84),			/*  - "section title" of output list.		        */
      2 group	   (0 refer (perm_LIST.N)) like LIST.group,
						/*  - .arg(*) are elements in the list.		        */
      2 arr	   (0 refer (perm_LIST.Npghs), 0 refer (perm_LIST.Nrows)) like LIST.print_array,
       perm_LISTp ptr;

  dcl 1 sect_LIST	   aligned based (sect_LISTp),	/* Overlay for my LIST structure.		        */
      2 header	   like LIST.header,		/*  - array bounds and counts.		        */
      2 title	   char (84),			/*  - "section title" of output list.		        */
      2 group	   (0 refer (sect_LIST.N)) like LIST.group,
						/*  - .arg(*) are elements in the list.		        */
      2 arr	   (0 refer (sect_LIST.Npghs), 0 refer (sect_LIST.Nrows)) like LIST.print_array,
       sect_LISTp ptr;



     if  hi.print_inhibitS  then
	return;

     iSectP = AiSectP;
     iBlokP = iSect.relatives.blokP;

     if  iSect.help_listP = null()  then do;

	Operation_ListP, ListP, sect_LISTp = null();
	if  iBlok.syntax.multi_operationsS  &	
	    iSect.type = iSect_LIST_OF_OPERATIONS  &
	    iBlok.relatives.multi_operation_listP ^= null()  then 
	     Operation_ListP = iBlok.relatives.multi_operation_listP;
	else if  iBlok.syntax.multi_controlsS  &	
	    iSect.type = iSect_LIST_OF_CONTROL_OPERATIONS  &
	    iBlok.relatives.multi_control_listP ^= null()  then 
	     Operation_ListP = iBlok.relatives.multi_control_listP;
	else if  iBlok.syntax.request_summaryS  then 
	     Operation_ListP = iBlok.relatives.multi_operation_listP;
	else if  iSect.relatives.listP ^= null()  then 
	     ListP = iSect.listP;

	if  Operation_ListP ^= null() 
	 &  Operation_List.parentSectP = iSectP  then do;
	     sect_LISTp = hi.next_free_spaceP;
	     call copy_Lcom_to_LIST (AsciP, help_infoP, 
		iSect.title.should_be, addr(Operation_List.common), sect_LISTp);
	     end;

	if  ListP ^= null()
	 &  List.parentSectP = iSectP  then do;
	     sect_LISTp = hi.next_free_spaceP;
	     call copy_Lcom_to_LIST (AsciP, help_infoP, 
		iSect.title.should_be, addr(List.common), sect_LISTp);
	     end;
	
	if  sect_LISTp ^= null()  then do;
	     call format_one_use_LIST (AsciP, help_infoP, sect_LISTp, DEFAULT_LIST_COLUMNS, DEFAULT_LIST_PARAGRAPHS);

	     isdP = hi.isdP;			/* Allocate permanent copy of LIST in info_seg_'s area.   */
	     perm_LISTp = translator_temp_$allocate (isd.areaP, currentsize(sect_LIST));

	     perm_LIST.header = sect_LIST.header;	/* Copy my LIST into that permanent storage.	        */
	     perm_LIST.title  = sect_LIST.title;	/*  - Structure cannot be copied in one statement due to  */
	     perm_LIST.group  = sect_LIST.group;	/*    adjustable-size elements with refer extents in the  */
	     perm_LIST.arr    = sect_LIST.arr;		/*    sub-arrays.  Set extents in permanent struct; then  */
						/*    copy sub-structs from our LIST into perm structure. */

	     iSect.help_listP = perm_LISTp;		/* Record location of permanent LIST in iSect structure.  */
	     end;
	end;

     if  iSect.help_listP ^= null()  then do;

	call print_LIST (AsciP, help_infoP, iSect.help_listP);

	call newline (1);				/* Print blank line after LIST.		        */
	end;

     return;
%page;
/* ======================================================================
   ENTRY: copy_Lcom_to_LIST

   Function: Copy section title and List.common (info_seg_ data) into a
	   help_ LIST structure.

   Note on structure names:
    - info_seg_dcls_.incl.pl1 defines structures:
       - List: an adjustable-sized array of items.
          - Items may be: Argument names, Control argument names, List of ... item names, etc.
          - Each item may have 1-4 name variants.
	- Each list includes a pointer to the info section which describes those items.
       - Operation_List: a kind of List whose items describe other info blocks.
          - Items may be: operations supported by a multi-operation command (io_call, history_comment, etc.).
	- Items share same List.common (or Lcom) substructure.
	- Extra elements of an Operation_List:
             - blok_name: name of the info block containing the section describing items in the Operation_List.
	   - per_operation_iBlokP: array of pointers to the info block references by each operation item.
       - Lcom: overlay for the List.common substructure shared by List and Operation_List instances.

   ====================================================================== */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Lcom item names could be:							        */
	/*  - an argument name 		(e.g., PATHNAME			)	        */
	/*  - a control argument name		(e.g., -long			)	        */
	/*  - a control arg w/ operand	(e.g., -set_log_dir DIRNAME		)	        */
	/*				(      -lines START:{COUNT}		)	        */
	/*  - a set of words		(e.g., Severity 5			)	        */
	/*				(      history_comment.display.info	)	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

copy_Lcom_to_LIST:
     entry (AsciP, help_infoP, Atitle, LcomP, pLIST);
	
  dcl  Atitle 	   char(71) var,			/* iSect.title.should_be value.		(input) */
/*     LcomP	   ptr,				/* Points to info_seg_ List.Lcom data.            (input) */
						/*  (actually declared in info_seg_dcls_.incl.pl1)        */
       pLIST	   ptr;				/* Points to target LIST to be filled.	         (output) */
       
  dcl 1 Tg	   aligned based (pLIST),		/* Overlay of target LIST structure.		        */
      2 header	   like LIST.header,		/*  - array bounds and counts.		        */
      2 title	   char (84),			/*  - "section title" of output list.		        */
      2 group	   (0 refer (Tg.N)) like LIST.group,	/*  - .arg(*) are elements in the list.		        */
      2 arr	   (0 refer (Tg.Npghs), 0 refer (Tg.Nrows)) like LIST.print_array;
     
     Tg.header = 0;
     Tg.title = Atitle || COLON;

  dcl (COMMA           char(1) init(","),
       COMMA_SP	   char(2) init(", ")
       ) int static options(constant);
  dcl (ITEM_NAME_WIDTH_FOR_COMMA_SEP_NAMES_IN_1_ROW init(18)
       ) fixed bin int static options(constant);
     

  dcl  full_item char(HELP_LINE_SIZE_MAX) var;
  dcl  nmI fixed bin;

LCOM_ITEM_NAMES:
     do LcomI = lbound(Lcom.items,1) to hbound(Lcom.items,1);
	if  dim(Lcom_item_names,1) = 0  then
	     goto LCOM_NEXT_ITEM;

	nmI = 1;
	full_item = Lcom_item_names(nmI);
	if  length(full_item) > ITEM_NAME_WIDTH_FOR_COMMA_SEP_NAMES_IN_1_ROW  then
	     goto LCOM_ONE_LINE_PER_ITEM_NAME;

	do nmI = 2 to hbound(Lcom_item_names,1);
	     full_item = full_item || COMMA_SP || Lcom_item_names(nmI);
	     end;
	if  length(full_item) > maxlength(Tg.group.arg(1))  then
	     goto LCOM_ONE_LINE_PER_ITEM_NAME;
	
	Tg.N = Tg.N + 1;
	Tg.group.arg(Tg.N) = full_item;
	go to LCOM_NEXT_ITEM;
	
LCOM_ONE_LINE_PER_ITEM_NAME:
	nmI = 1;
	Tg.N = Tg.N + 1;
	Tg.group.arg(Tg.N) = Lcom_item_names(nmI);
	
	do nmI = nmI + 1 to hbound(Lcom_item_names,1);
	     Tg.group.arg(Tg.N) = Tg.group.arg(Tg.N) || COMMA;
	     Tg.N = Tg.N + 1;
	     Tg.group.arg(Tg.N) = SP_SP || Lcom_item_names(nmI);
	     end;

LCOM_NEXT_ITEM:
	end LCOM_ITEM_NAMES;

     Tg.group.Snot_found(*) = 0;
     return;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY: print_iSect_List_match

   Function: Display the List.items names and definitions for any 
	   List.items that match one of the STRs in the ca input structure.
   ====================================================================== */

print_iSect_List_match:
     entry (AsciP, help_infoP, AiSectP, AiSTRsP) returns (bit(1) aligned);

/*dcl  AiSectP ptr;					/* Points to iSect whose List is to be printed.	(Input) */
  dcl  AiSTRsP ptr;					/* Points to list of control_arg STRs to find.    (Input) */

  dcl 1 ca aligned based (caP),     
      2 case_sensitiveS bit(1) aligned,			/*  T: search in case-sensitive manner.		        */
						/*  F: search in case-insensitive manner.	        */
      2 N fixed bin,				/* Number of items currently in the cache.	        */
      2 str (0 refer (ca.N)) char(32) var,		/*  - Current STR values.			        */
       caP ptr;

     if  hi.print_inhibitS  then			/* Stop if printing is inhibited.  But we might have      */
	return (T);				/*  printed something.  Don't rock the boat.	        */

     iSectP = AiSectP;
     iBlokP = iSect.relatives.blokP;

     caP = AiSTRsP;					/* Access STRs array.			        */

     if  iBlokP ^= null()  then do;			/* Access the info_seg_ List associated with iSect.       */
	if  iBlok.syntax.multi_operationsS  then 
	     Operation_ListP = iBlok.relatives.multi_operation_listP;
	else if  iBlok.syntax.multi_controlsS  then
	     Operation_ListP = iBlok.relatives.multi_control_listP;
	else if  iBlok.syntax.request_summaryS  then
	     Operation_ListP = iBlok.relatives.multi_operation_listP;
	else Operation_ListP = null();
	end;

     if  Operation_ListP ^= null()  then do;
	if  Operation_List.parentSectP = iSectP  then
	     LcomP = addr(Operation_List.common);
	else LcomP = null();
	end;
     else do;
	ListP = iSect.relatives.listP;
	if  ListP ^= null()  &  List.parentSectP = iSectP  then
	     LcomP = addr(List.common);
	else LcomP = null();
	end;
     if  LcomP = null()  then
	return (F);


  dcl  title char(71) var;

     title = iSect.title.should_be;


  dcl  strI fixed bin;
  dcl (nameLineP, firstDefLineP, lastDefLineP) ptr;

SEARCH_LCOM_ITEM_NAMES:
     do LcomI = lbound(Lcom.items,1) to hbound(Lcom.items,1);
	if  dim(Lcom_item_names,1) = 0  then
	     goto SEARCH_LCOM_NEXT_ITEM;

	nmI = 1;
	full_item = Lcom_item_names(nmI);

	do nmI = 2 to hbound(Lcom_item_names,1);
	     full_item = full_item || COMMA_SP || Lcom_item_names(nmI);
	     end;
	
	if  ^ca.case_sensitiveS  then
	     full_item = translate (full_item, LOWER_CASE, UPPER_CASE);
	
	do strI = lbound(ca.str,1) to hbound(ca.str,1);
	     if  index(full_item, ca.str(strI)) > 0  then
		goto SEARCH_LCOM_DISPLAY_ITEM;
	     end;
	goto SEARCH_LCOM_NEXT_ITEM;
	
SEARCH_LCOM_DISPLAY_ITEM:
	if  title ^= ""  then do;
	     call newline (1);
	     call ioa ("^a:", title);
	     title = "";
	     end;
	do iLineP = Lcom.items(LcomI).nameP
	     repeat iLine.sect.nextP  while (iLineP ^= null() );
	     call ioa ("^a", Line);
	     if  iLineP = Lcom.items(LcomI).defEndP  then
		goto SEARCH_LCOM_NEXT_ITEM;
	     end;

SEARCH_LCOM_NEXT_ITEM:
	end SEARCH_LCOM_ITEM_NAMES;

     if  title = ""  then
	call newline (1);				/* Print blank line after end of section output.	        */
     return (title = "");

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
/* ======================================================================
   ENTRY: format_LIST

   Function: Format values in a LIST.arg(*) array into a multi-paragraph,
	   multi-column table with array elements descending in columns.
   ====================================================================== */


format_LIST:
     entry (AsciP, help_infoP, pLIST, Mcols, Mpghs);	/* This procedure formats a list of values.	        */

  dcl  
/*     pLIST	   ptr,				/* Points to LIST to be formatted.		(Input) */
       Mcols	   fixed bin,			/* Maximum columns to be used in format.	        */
       Mpghs	   fixed bin;			/* Maximum paragraphs to be used.  0 means no limit.      */

/*dcl 1 L		   aligned based (pLIST),		/* Overlay of LIST structure.			        *
      2 header	   like LIST.header,		/*  - array bounds and counts.		        *
      2 title	   char (84),			/*  - "section title" of output list.		        *
      2 group	   (0 refer (L.N)) like LIST.group,	/*  - .arg(*) are elements in the list.		        *
      2 arr	   (0 refer (L.Npghs), 0 refer (L.Nrows)) like LIST.print_array;
						/*  - .line_out(*) are rows of list to be displayed.      *
						/*    Each row contains Ncols of .arg(I) items.	        *
						/*     (see LIST dcl in _help_shared_data_.incl.pl1)      */
  dcl  one_useS bit(1) aligned;
  
     one_useS = F;
     goto format_LIST_COMMON;
     

/* ======================================================================
   ENTRY: format_one_use_LIST

   Function: Format values in a LIST.arg(*) array into a multi-paragraph,
	   multi-column table with array elements descending in columns.
	   The set_space_used routine is NOT CALLED.  So storage locations
	   holding this list WILL BE OVERWRITTEN by next reference to
	   help_info.next_free_spaceP (or hi.next_free_spaceP).
   ====================================================================== */

format_one_use_LIST:
     entry (AsciP, help_infoP, pLIST, Mcols, Mpghs);	/* This procedure formats a list of values, but does not  */
						/*  call set_space_used to reserve LIST storage space.    */
     
     one_useS = T;
     goto format_LIST_COMMON;


  dcl (dim, divide, index, length, max, min, substr, sum, verify) builtin;

  dcl (Icol, Ipgh, Irow)
		   fixed bin,
       Continued_arg   bit (1) aligned,
       ct_lines	   fixed bin,
       hb		   fixed bin,
       line_position   fixed bin,
       long_line	   bit (1) aligned,
       one_line_paragraph
		   bit (1) aligned,
       one_line_list   bit (1) aligned,
       Sdoes_not_fit   bit (1) aligned,
       argI	   fixed bin,
       last_line	   fixed bin,
       length_args	   fixed bin,
      (i, j)	   fixed bin,
       save_N	   fixed bin;


  dcl (SP_SP 	   char (2) init ("  "),
       SP_SP_SP 	   char (3) init ("   ")
       ) int static options(constant);


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Format the arguments in as many columns as possible to reduce the output lines.	        */
	/* However, if the output fits in 2 or more row configs, the number of rows is chosen so that     */
	/* all columns but the final one are full.					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

format_LIST_COMMON:
     Phelp_args = hi.help_argsP;

     long_line = F;
     one_line_paragraph = F;
     one_line_list = F;

     if Mcols < 1 then				/* Allow caller to limit number of columns.	        */
	L.Ncols = dim (L.ML, 1);			/*  - try for up to 6 columns; OR		        */
     else L.Ncols = min (Mcols, dim (L.ML, 1));		/*  - try for caller-specified max number of columns.     */

     save_N = L.N;					/* If arguments are combined, then total number of        */
						/*  elements must be reduced for row calculation.	        */
						/*  Save original count of elements.		        */

     if  help_args.pad2(6) = 2  then do;		/* -db 2:  Initial inputs to format.		        */
	call ioa ("-- format   items: ^2d   Mcols: ^d   Mpghs: ^d", L.N, Mcols, Mpghs);
	end;
	
     

     Sdoes_not_fit = T;
HOW_MANY_COLUMNS:
     do L.Ncols = L.Ncols to 1 by -1 while (Sdoes_not_fit);
	L.Nrows = divide (save_N + L.Ncols - 1, L.Ncols, 17, 0);
						/* Compute how many rows are required to display the args */
						/*  in L.Ncols columns.			        */

ROW_RETURN:					/* Row array bounds exceeded - recompute bounds	        */
	if Mpghs = 1 then do;			/*  compute how many paragraphs are needed.	        */
	     L.Npghs = 1;
	     L.Nrows = L.Nrows + 1;
	     end;
	else do;
	     L.Npghs = divide (L.Nrows + help_args.max_Lpgh - 2, help_args.max_Lpgh - 1, 17, 0);
	     L.Nrows = divide (L.Nrows + L.Npghs - 1, L.Npghs, 17, 0);
	     end;

	do i = 1 to L.Npghs;			/* Populate output lines with SP characters.	        */
	     do j = 1 to L.Nrows;			/*  - clear lines to properly display them in probe       */
		L.arr (i, j).line_out = SP;
		end;
	     end;

	if  help_args.pad2(6) = 2  then do;		/* -db 2:  Initial inputs to format.		        */
/*	     call ioa ("-- format   items: ^2d   Mcols: ^d   Mpghs: ^d", L.N, MCols, Mpghs);  */
	     call ioa ("   trying    rows: ^2d    cols: ^d    pghs: ^d", L.Nrows, L.Ncols, L.Npghs);
	     end;

	ct_lines = 0;				/* Initialize counters, index values, lengths, etc.       */
	argI = 0;
	L.ML (*) = 0;
	line_position = 0;
	length_args = 0;

	Continued_arg = F;				/* Initialize flags (too many flags...)		        */
	one_line_paragraph = F;
	long_line = F;

FIND_COLUMN_CONFIG:
	do Ipgh = 1 to L.Npghs;			/* Walk thru all paragraphs.  Each shares column widths.  */
	     do Icol = 1 to L.Ncols;			/* - Fill given column in all rows before doing next col. */
		if Icol = 1 then
		     line_position = 2;
		else line_position = line_position + L.ML (Icol - 1) + length(SP_SP_SP);

		do Irow = 1 to L.Nrows;		/*   - For this column, fill each row.		        */
CHECK_EMPTY_ARG:	     if  argI < L.N  then do;		/*      - Are there items to fill?		        */

			argI = argI + 1;

			if  length (L.arg (argI)) = 0  &  Irow = 1  then 
			     goto CHECK_EMPTY_ARG;	/*   - Avoid empty slot at top of 2nd-Nth columns.        */

			L.ML (Icol) = max (L.ML (Icol), length (L.arg (argI)));
						/*      - Widen column to accommodate this arg.	        */

			if  length(SP) + sum (L.ML) + (L.Ncols - 1) * length(SP_SP_SP) > hi.terminal_lineL  then
			     goto LINE_TOO_LONG;	/*      - Each line_out begins with 1 SP character.       */

			if  Icol = 1  then		/* Clear row before using to remove earlier config tries. */
			     L.arr (Ipgh, Irow).line_out = SP;

			substr (L.arr (Ipgh, Irow).line_out, line_position, length (L.arg (argI))) = 
			     L.arg (argI);		/* Overwrite column with arg(I) value		        */

			if  line_position = 1  then	/* Increase count of lines actually output	        */
			     ct_lines = ct_lines + 1;

			if  arg_ends (argI, COMMA)  then
			if  Irow = L.Nrows  then	/* If next .arg begins w/ SP_SP, it is continuation of    */
			     Continued_arg = T;	/*  this arg.  If this arg in last row, add new row so    */
						/*  next arg follows this arg in printed list. 	        */

CONTINUED_ARG:		do while (Continued_arg);	/* If current arg is in last row of list, but is followed */
			     argI = argI + 1;	/*   by continued arg, add row to list to hold next arg.  */
			     L.ML (Icol) = max (L.ML (Icol), length (L.arg (argI)));
			     if  length(SP) + sum (L.ML) + (L.Ncols - 1) * length(SP_SP_SP) > hi.terminal_lineL  then
				goto LINE_TOO_LONG;

			     Irow = Irow + 1;	/* If adding row to list, put spaces in earlier columns   */
			     if  Irow > L.Nrows  then do;
				L.Nrows = L.Nrows + 1;
				L.arr (Ipgh, Irow).line_out = SP;
				ct_lines = ct_lines + 1;
				end;

			     if Icol = 1 then	/* Clear row initially			        */
				L.arr (Ipgh, Irow).line_out = SP;

			     substr (L.arr (Ipgh, Irow).line_out, line_position, length (L.arg (argI))) = 
				L.arg (argI);	/* Add continued arg to current column in new row.        */

			     if  argI = L.N  then	/* Check for further continued args.		        */
				Continued_arg = F;
			     else if  ^arg_ends (argI, COMMA)  then
				Continued_arg = F;
			     end CONTINUED_ARG;

			if  argI = L.N  &  Ipgh = L.Npghs  &  Icol = 1  then
			do while (Irow < L.Nrows);	/* More rows defined than are actual args for last pgh    */
			     Irow = Irow + 1;
			     L.arr (Ipgh, Irow).line_out = SP;
			     end;

			end;			/* argI <= L.N */
		     end;				/* Irow        */
		end;				/* Icol	     */
	     end FIND_COLUMN_CONFIG;			/* Ipgh	     */

	if  Irow > L.Nrows & argI < L.N  then do;
	     L.Nrows = L.Nrows + 1;
	     goto ROW_RETURN;
	     end;

	if  help_args.pad2(6) = 2  then do;		/* -db 2:  Initial inputs to format.		        */
	     call ioa ("   -using    rows: ^2d    cols: ^d    pghs: ^d", L.Nrows, L.Ncols, L.Npghs);
	     call ioa ("       col widths: ^v(^2d  ^)", L.Ncols, L.ML(*));
	     end;


	Sdoes_not_fit = F;

LINE_TOO_LONG:
	end HOW_MANY_COLUMNS;			/* Sdoes_not_fit*/

     L.Ncols = L.Ncols + 1;				/* do group decrements one too many */
     if  ^one_useS  then
	call set_space_used (currentsize (L));		/* Set hi.next_free_spaceP beyond current LIST size.      */
     return;


arg_begins:
     	proc (No_arg, prefix) returns (bit(1) aligned);
	
  dcl  No_arg fixed bin;
  dcl  prefix char(*);
	
	if  No_arg <= dim(L.arg, 1)  then
	if  length (L.arg(No_arg)) >= length (prefix)   then
	if  substr (L.arg(No_arg), 1, length (prefix)) = prefix  then
	     return (T);
	return (F);

arg_ends:
     	entry (No_arg, suffix) returns (bit(1) aligned);

  dcl  suffix char(*);

	if  No_arg <= dim(L.arg, 1)  then
	if  length (L.arg(No_arg)) >= length (prefix)   then
	if  substr (L.arg(No_arg), length(L.arg(No_arg))-length(suffix)+1, length (suffix)) = suffix  then
	     return (T);
	return (F);

	end arg_begins;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
%include help_args_;
%page;
%include help_cis_args_;
%page;
%include "_help_shared_data_";
%page;
%include info_seg_dcls_;
%page;
%include ssu_subroutine_dcls_;

     end help_util_;
