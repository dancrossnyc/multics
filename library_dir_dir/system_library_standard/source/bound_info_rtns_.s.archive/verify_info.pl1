	
/****^  HISTORY COMMENTS:
  1) change(2021-02-23,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version of verify_info command.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  verify_info, vi							        */
	/*									        */
	/* Function:  verify info segment format.					        */
	/*									        */
	/* Note:  This program replaces the earlier validate_info_seg (vis) program.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

verify_info:
vi:  proc options(variable);

display_usage:					/* Display usage for command.			        */
          proc();

          call ssu_$abort_subsystem (C.sciP, 0, "^(^a^)", "
Syntax as a command:  vi INFO_SEGS {-control_args}

Syntax as an active function:  [vi INFO_SEGS]
");
	end display_usage;



  dcl  com_err_ entry() options(variable);
  dcl  ioa_ entry() options(variable);

  dcl  info_seg_$append_iFiles entry (ptr, char(*));
  dcl  info_seg_$initialize entry (ptr, char(*), char(*), ptr, entry, fixed bin(35));
  dcl  info_seg_$terminate entry (ptr);
  dcl  info_seg_verify_$display_specifications entry (ptr);
  dcl  info_seg_verify_$iFiles entry (ptr);

  dcl  suppress_warning entry variable init(standalone_cleanup_handler);
						/* Suppress compiler warning about procedure in 	        */
						/*  ssu_standalone_commmand_.incl.pl1 that is unreferenced*/

  dcl (error_table_$bad_arg,
       error_table_$bad_conversion,
       error_table_$badopt
       ) fixed bin(35) ext static;

  dcl (addr, char, ltrim, null, size, translate, verify) builtin;
%page;
%include verify_info_data;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* COMMAND:  verify_info, vi							        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* ------------------------------------------------------------
    Initialize data structure used by verify_info_seg_ routine.
   ------------------------------------------------------------ */

  dcl 1 C aligned like verify_info_data;		/* Data for the info_seg_verify_ subroutine.	        */

     C.vid_version = verify_info_data_version_01;		/*  - Use version_01 in verify_info_data_.incl.pl1        */
     C.inputs.rules_area = VI_RULE_unset;		/*  - Setup storage for control arguments.	        */

     C.inputs.switches = F;				/*  - Control arg switches off by default.	        */
     C.inputs.naming = VI_NAMING_off;			/*  - Changing names is off by default.		        */
     C.inputs.lines = 0;				/*  - info seg line display disabled, by default.	        */
     C.results = 0;					/*  - No files verified as command gets invoked.	        */

     C.isd.version = info_seg_data_version_01;		/*  - Initialize substructure used by info_seg_	        */
     C.isd.standalone_invocationS = F;			/*  - Initialize data switches.		        */
     C.isd.ptrs = null();				/*  - Initialize pointers tested by cleanup handler.      */
     C.isd.relatives = null();			

/* ------------------------------------------------------------
    1) Establish cleanup handler for info_seg_ data.
    2) Call info_seg_ to setup its ssu_ standalone invocation
       (used throughout verify_info, info_seg_, and info_seg_verify_
        to report errors on behalf of the calling command, etc).
   ------------------------------------------------------------ */

  dcl  PROC    char(11) internal static options(constant) init("verify_info");
  dcl  VERSION char(16) internal static options(constant) init("verify_info__1.0");

						/* Setup cleanup on-unit for:			        */
     on cleanup call vi_cleanup_handler( addr(C.isd) );	/*  - the info_seg_ data.  info_seg_$terminate cleans up  */
						/*    this struct, and all files initiated via info_seg_. */
						/*  - the ssu_ standalone invocation setup by info_seg_   */

     call info_seg_$initialize (addr(C.isd), PROC, VERSION, cu_$arg_list_ptr(), abort_to_EXIT, code);
     if  code ^= 0  then do;
	call com_err_ (code, PROC, "FATAL ERROR from info_seg_$initialize");
	return;
	end;

/* ------------------------------------------------------------
    Get our command arguments.
     - Any file names are stored in an iFile structure chained
       off the C.files list.
   ------------------------------------------------------------ */

     call arg_setup (C.sciP);				/* Prepare to process arguments.		        */

     if ^args_remain() then				/* If no args given...			        */
	call display_usage();			/*  - command/AF displays usage		        */

     call controlArgs(C);				/* Get arguments.				        */

     if  isAF  then do;				/* If called as an active function, only return 	        */
	C.totalsS = T;				/*   highest_severity error number encountered.	        */
	if  C.fileS  |  C.blockS  |  C.sectionS  | 
	    C.listS  |  C.briefS  |  C.rules_area ^= VI_RULE_unset  then do;
	     call display_usage();
	     goto EXIT;
	     end;
	end;

     if  C.totalsS  &  C.naming > VI_NAMING_off  then	/* -totals inconsistent with renaming operations.	        */
	C.naming = VI_NAMING_off;

     if  C.totalsS  &  C.briefS  then			/* -totals inconsistent with -brief display.	        */
	C.briefS = F;

/* ------------------------------------------------------------
    Process incoming command arguments.
     - Any file names are stored in the C.files sub-structure.
   ------------------------------------------------------------ */

     if  C.rules_area ^= VI_RULE_unset  then do;		/* User asked to see guidelines and rules used by vi?     */
	call info_seg_verify_$display_specifications (addr(C));
	if  C.files.firstP = null()  then		/*  - If no files given, just exit after spec display.    */
	     goto EXIT;
	end;
     

     if  C.files.firstP = null()  then			/* User gave no input file names?  Complain via usage msg */
	call display_usage();

     call info_seg_verify_$iFiles (addr(C));		/* info_seg_verify_$iFiles checks format of all input     */
						/* files.					        */
						/*  - If -totals given, it returns only an error_count    */
						/*    and highest_severity, instead of printing more      */
						/*    verbose stuff.  vi command displays those values.   */
     if  isAF  then do;
	af_ret = ltrim(char(C.highest_severity));
	end;
     else if  C.totalsS  then do;  
	if  C.error_count > 0  then
	     call ioa_("^d error^[s^] found in ^d file^[s^];  highest severity was ^d",
	          C.error_count, C.error_count ^= 1, 
		C.segs_processed, C.segs_processed ^= 1,
		C.highest_severity);
	end;
     else call ioa_("");				/* Separate verbose command output from ready line.       */

/* ------------------------------------------------------------
    Exit with cleanup of the info_seg_ data structures.
     - The abort_to_EXIT subroutine (in ssu_standalone_commmand.incl.pl1)
       also transfers to this EXIT label to perform an abort
       of the entire command when needed.
   ------------------------------------------------------------ */

EXIT:						/* Exit command/request with appropriate cleanup	        */
     call vi_cleanup_handler( addr(C.isd) );
     return;



vi_cleanup_handler:					/* Cleanup on-unit for vi command, and its supporting     */
     proc (isdP);					/*  info_seg_ data structures and ssu_ invocation.        */

  dcl  isdP ptr;

     call info_seg_$terminate (isdP);			/* Ask info_seg_ to terminate files, cleanup ssu_, etc.   */

     end vi_cleanup_handler;
%page;
/* ------------------------------------------------------------
    Capture INFO_SEG paths, and get -control_arg arguments.
   ------------------------------------------------------------ */

controlArgs:
     proc (c);

  dcl 1 c aligned like verify_info_data;		/*  control arg specification data                   (in) */

  dcl  DIGITS char(10) int static options(constant) init("0123456789");
  dcl 1 optS,
      2 (debug,
         rules
         ) bit(1) aligned;
  dcl  lineRangeP ptr;
     
     optS = F;
     lineRangeP = null();

SCAN_ARGS:
     do while (args_remain());
	call ssu_$arg_ptr (c.sciP, argI+1, argP, argL);	/* Conditionally read next arg to command/af/request      */
					
	if  optS.debug  then do;
	     call get_debug();
	     optS.debug = F;
	     end;

	else if  lineRangeP ^= null()  then do;
	     call get_line_range( lineRangeP, arg );
	     lineRangeP = null();
	     end;

	else if  optS.rules  then do;
	     call get_rule_type();
	     optS.rules = F;
	     end;

	else if isControlArg(arg) then do;

	     if       arg = "-nm"     | arg = "-names"        then c.naming = VI_NAMING_query;
	     else if  arg = "-nnm"    | arg = "-no_names"     then c.naming = VI_NAMING_off;
	     else if  arg = "-fnm"    | arg = "-force_names"  then c.naming = VI_NAMING_force;

	     else if  arg = "-tt"     | arg = "-totals"       then c.totalsS = T;

	     else if  arg = "-lg"     | arg = "-long"         then c.briefS = F;
	     else if  arg = "-bf"     | arg = "-brief"        then c.briefS = T;

	     else if  		  arg = "-rules"        then optS.rules = T;

	     else if  arg = "-ln"     | arg = "-lines"        then lineRangeP = addr(c.lines.file);
	     else if  arg = "-bk"     | arg = "-block"        then lineRangeP = addr(c.lines.blok);

	     else if  arg = "-db"     | arg = "-debug"        then optS.debug = T;

               else call ssu_$print_message (c.sciP, error_table_$badopt, 
		"Ignoring unsupported control arg: ^a", arg);
	     end;
	
	else call info_seg_$append_iFiles (addr(c.isd), arg);
						/* All non-control arguments are pathnames.	        */
	     					/*   info_seg_ does all the work on our behalf.	        */

	argI = argI + 1;				/* Record that we processed the arg just examined above.  */
	end SCAN_ARGS;

     if  lineRangeP ^= null()  then			/* Handle -lines or -block or -rules  as final argument.  */
	call get_line_range( lineRangeP, "");
     if  optS.rules  then
	c.rules_area = VI_RULE_all_areas;

     return;
%page;

get_debug:
     proc();
     
  dcl (i, j) fixed bin;
     
     do i = lbound(VI_DEBUG_OPERAND,1) to hbound(VI_DEBUG_OPERAND,1);
	do j = lbound(VI_DEBUG_OPERAND,2) to hbound(VI_DEBUG_OPERAND,2);
	     if  arg = VI_DEBUG_OPERAND(i,j)  then
		goto SET_DB(i);
	     end;
	end;
     call ssu_$print_message( c.sciP, error_table_$bad_arg, "-debug ^a", arg);
     return;
    
SET_DB(VI_DEBUG_file):
     c.fileS = T;
     return;
     
SET_DB(VI_DEBUG_block):  
     c.blockS = T;
     return;
     
SET_DB(VI_DEBUG_section):  
     c.sectionS = T;
     return;
     
SET_DB(VI_DEBUG_list):  
     c.listS = T;
     return;

     end get_debug;

/* -----------------------------------------------------------------
   INTERNAL PROCEDURE:  get_line_range

   FUNCTION:  Parse operand of -lines or -block into a line range:
	     - count of lines, and
	     - starting line number (optional)

   Format of a line range:
     -lines,
     -lines COUNT, 
     -lines START:{COUNT}
       displays lines of the info segment.  The optional START line number
       and COUNT of lines refer to lines within the entire info segment.

       If START is not given, it defaults to: 1

       If START is a negative integer, it refers to a line number
       counting back from the end of the segment: -lines -3: displays the
       final 3 lines of the segment.  

       If COUNT is not given, it defaults to: 9999
   ----------------------------------------------------------------- */

get_line_range:
     proc ( AlineRangeP, Aarg );

  dcl  AlineRangeP ptr;				/* Pointer to either c.lines.file or c.lines.blok	        */
  dcl  Aarg char(*);				/* Incoming argument (operand of -lines or -block)        */
						/*  containing the line_range specification.	        */

  dcl  spec char(length(Aarg)) var init(Aarg);		/* Copy arg into varying string to simplify manipulation  */

  dcl 1 lineRange aligned like verify_info_data.lines.file based( AlineRangeP );

  dcl  count char(20) var;				/* Strings to hold components of line range.	        */
  dcl  start char(8) var;

  dcl  DIGITS char(10) int static options(constant) init("0123456789");
  dcl  SIGNED_DIGITS char(12) int static options(constant) init("+-0123456789");

	count = "9999";
	start = "1";

	spec = ltrim(rtrim(spec));
	if  spec = ""  then
	     goto ASSIGN_RANGE;
	if  index(spec, COLON) > 1  then do;
	     start = rtrim(before(spec, COLON));
	     count = ltrim( after(spec, COLON));
	     if  count = ""  then
		count = "9999";
	     end;
	else if  index(spec, COLON) = 1  then
	     count = ltrim( after(spec, COLON));
	else count = spec;

	if  length(start) = 1  then			/* Make sure start is at least 2 digits in length.        */
	     start = "0" || start;
						/*  - start must be an optionally-signed integer string   */
	if  verify(substr(start,1,1), SIGNED_DIGITS) = 0   &
	    verify(substr(start,2), DIGITS) = 0            &
	    verify(count, DIGITS) = 0  then do;		/*  - count must be an unsigned integer string.	        */
ASSIGN_RANGE:  lineRange.start = binary(start,17,0);
	     lineRange.count = binary(count,17,0);
	     end;
	else call ssu_$print_message (c.sciP, error_table_$bad_arg, "^[-lines^;-block^] ^a",
	     lineRangeP = addr(c.lines.file), arg);

	end get_line_range;


get_rule_type:
     proc();
     
  dcl (i, j, k) fixed bin;
     
	do i = lbound(VI_RULES_AREA,1) to hbound(VI_RULES_AREA,1);
	     do j = lbound(VI_RULES_AREA,2) to hbound(VI_RULES_AREA,2);
		if  VI_RULES_AREA(i,1) = "all_kinds"  then
		     k = i;			/* Gather demarcation element for possible error message. */
		if  arg = VI_RULES_AREA(i,j)  then do;
		     c.rules_area = i;
		     return;
		     end;
		end;
	     end;
	call ssu_$abort_line( c.sciP, error_table_$bad_arg, "-rules ^a" ||
	     "^/Argument may be:"  ||
	     "^/   ^v(^a, ^a    ^)" ||
	     "^/or a block kind:"  ||
	   "^(^/   ^2(^a, ^a^2-^)^)",
	     arg, k-1, VI_RULES_AREA(*,*) );
	return;

	end get_rule_type;

     end controlArgs;
%page;
%include ssu_standalone_command_;
%page;
%include info_seg_dcls_;

     end verify_info;
