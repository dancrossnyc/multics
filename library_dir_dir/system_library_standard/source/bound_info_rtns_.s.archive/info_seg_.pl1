
	
/****^  HISTORY COMMENTS:
  1) change(2021-02-23,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
     Initial version of info_seg_ subroutine.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* SUBROUTINE:  info_seg_							        */
	/*									        */
	/* FUNCTION: creates an ssu_ standalone invocation to parse info segments into components.        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

info_seg_: 
     proc();
     
  dcl  check_star_name_ entry (char(*), bit(36), fixed bin(2), fixed bin(35));
  dcl  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
  dcl  get_system_free_area_ entry() returns(ptr);
  dcl  hcs_$get_uid_file entry (char(*), char(*), bit(36) aligned, fixed bin(35));
  dcl  hcs_$star_ entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35));
  dcl  hcs_$status_ entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
  dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
  dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));

  dcl  info_seg_allocate_$iFile entry (ptr, char(*), char(*), bit(36) aligned) returns(ptr);

  dcl  info_seg_parse_$block_header_sects_pghs entry (ptr, ptr);
  dcl  info_seg_parse_$block_headers entry (ptr, ptr);
  dcl  info_seg_parse_$file_lines_and_blocks entry (ptr, ptr);
  dcl  info_seg_parse_$file_structure entry (ptr) returns(fixed bin);

  dcl  info_seg_verify_ entry (ptr, ptr);

  dcl  ioa_ entry() options(variable);
  dcl  pathname_ entry (char(*), char(*)) returns(char(168));

  dcl  suffixed_name_$make entry (char(*), char(*), char(32), fixed bin(35));
  dcl  terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));

  dcl  translator_temp_$get_segment entry (char(*) aligned, ptr, fixed bin(35));
  dcl  translator_temp_$empty_all_segments entry (ptr, fixed bin(35));
  dcl  translator_temp_$release_all_segments entry (ptr, fixed bin(35));


  dcl (error_table_$bad_seg,
       error_table_$inconsistent,
       error_table_$noalloc,
       error_table_$unimplemented_version
       ) fixed bin(35) ext static;

  dcl (addr, dim, divide, hbound, index, lbound, min, null, rtrim, translate) builtin;

  dcl  cleanup condition;

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$initialize						        */
	/*									        */
	/* FUNCTION: creates an ssu_ standalone invocation to simplify argument		        */
	/* processing and storage management for any command using info_seg_.			        */
	/*									        */
	/* Completes initialization of the info_seg_data structure provided by the		        */
	/* caller.								        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/* declare info_seg_$initialize entry (ptr, char(*), char(*), ptr,			        */
	/*      entry variable, fixed bin(35);						        */
	/* call info_seg_$initialize (info_seg_dataP, caller_name, caller_version,		        */
	/*      arg_list_ptr, ssu_abort_routine, code);					        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1) which		        */
	/*    caller provides as input.						        */
	/*      A) Caller sets info_seg_data.version to indicate which structure version	        */
	/*         it is presenting.							        */
	/*      B) Caller sets info_seg_data.ptrs = null() to prepare for a later		        */
	/*         call to info_seg_$terminate						        */
	/*      C) Caller optionally sets info_seg_data.ptrs.sciP to an ssu_ subsystem sci_ptr value      */
	/*	 created by the caller.  If .sciP is non-null, the caller_name, caller_version,	        */
	/*	 arg_list_ptr, and ssu_abort_routine parameters are ignored.		        */
	/*    See the "Notes on cleanup" section for more information.			        */
	/*									        */
	/*									        */
	/*    The following arguments are passed directly to ssu_$standalone_invocation.	        */
	/*    See the MPM Subroutines description of that entrypoint for more details.		        */
	/* caller_name								        */
	/*    gives name of calling command.  Can be accessed by ssu_$get_subsystem_name.	        */
	/* caller_version								        */
	/*    gives caller's version number.  Can be accessed by ssu_$get_subsystem_version.	        */
	/* arg_list_ptr								        */
	/*    points to calling command's input argument list.  Use ssu_$arg_ptr to		        */
	/*    access arguments.  To simply argument handling, see:				        */
	/*       ssu_standalone_command_.incl.pl1					        */
	/* ssu_abort_routine							        */
	/*    subroutine to be called if future info_seg_$XXX routine  needs to abort the	        */
	/*    calling command.  This subroutine should go to a label that exits the		        */
	/*    command (call's its cleanup routine, then returns).				        */
	/*									        */
	/*									        */
	/* code									        */
	/*    is an ssu_ status code.  It is non-zero when a fatal error occurs.		        */
	/*    Cases include:							        */
	/*     - info_seg_data.version has a value not supported by info_seg_; or		        */
	/*     - ssu_$standalone_invocation creation failed.				        */
	/*    ssu_$print_message (and other ssu_ routines) may not be called to report		        */
	/*    such errors.								        */
	/*									        */
	/*									        */
	/* Notes on cleanup:							        */
	/* When initialization completes, info_seg_data.ptrs point to data items		        */
	/* used in subsequent calls to info_seg_ subroutines.  The caller must create a		        */
	/* cleanup on-unit that calls a routine to release storage for these data items:	        */
	/*    - Calls info_seg_$terminate to terminate info segments, release			        */
	/*      storage for structures describing those info segments, and destroy the ssu_ 	        */
	/*      invocation identified by the info_seg_data.sciP pointer.			        */
	/*									        */
	/* In addition, the caller must call the above routine before the command		        */
	/* returns.								        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

initialize:
     entry (AisdP, Acaller_name, Acaller_version, Aarg_listP, Assu_abort_routine, Acode);

  dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
      1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */

  dcl  Acaller_name char(*);
  dcl  Acaller_version char(*);
  dcl  Aarg_listP ptr;
  dcl  Assu_abort_routine entry variable;
  dcl  Acode fixed bin(35);				/* Status code.				        */

/* ------------------------------------------------------------
    Check for errors in the caller's input arguments to this
    subroutine.
   ------------------------------------------------------------ */

     if  isd.version ^= info_seg_data_version_01  then do;
	Acode = error_table_$unimplemented_version;
	return;
	end;

     if  isd.sciP = null() then do;			/* Some callers will provide their own ssu_ sci_ptr       */
	isd.standalone_invocationS = T;
	call ssu_$standalone_invocation (isd.sciP, Acaller_name, Acaller_version, Aarg_listP, Assu_abort_routine, Acode);
	if  Acode ^= 0  then return;
	end;
     else isd.standalone_invocationS = F;

/* ------------------------------------------------------------
   Finish initializing the info_seg_data structure.
    .areaP: a no-freeing of storage extendable area segment, 
       used for data structures describing each info segment.  
       isd.files.firstP points to these structures. 
    .std_areaP: a standard storage area segment provided by 
       ssu_, needed for free-able structures allocated by Multics 
       subroutines like hcs_$status_.
   ------------------------------------------------------------ */

INIT_COMMON:
     call translator_temp_$get_segment (ssu_$get_subsystem_name (isd.sciP), isd.areaP, Acode);
     if  Acode ^= 0  then 
	return;

  dcl  INFO_SEG_AREA_IS_STANDARD_AREA ptr int static options(constant) init(null());
  dcl  INFO_SEG_AREA_TAG char (23) int static options(constant) init("info_seg_ standard area");     

     if  isd.std_areaP = null()  then			/* info_seg_$init_for_help_ callers can supply a non-null */
						/* value for this pointer, because they also set .sciP    */
						/*  to their own ssu_ subsystem.  For $initialize callers,*/
						/*  this pointer should be null and is set by...	        */
	call ssu_$get_area (isd.sciP, INFO_SEG_AREA_IS_STANDARD_AREA, INFO_SEG_AREA_TAG, isd.std_areaP);

     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$init_for_help_	(entrypoint not retained by bound_info_rtns_.bind)        */
	/*									        */
	/* FUNCTION: completes initialization of the info_seg_data structure provided by help_.           */
	/*	   Only help_ can call this entrypoint.					        */
	/*									        */
	/* Syntax:								        */
	/*    declare info_seg_$init_for_help entry (ptr, fixed bin(35);			        */
	/*    call info_seg_$init_for_help (info_seg_dataP, code);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1) which		        */
	/*    help_ provides as input.						        */
	/*      A) help_ sets info_seg_data.version to indicate which structure version		        */
	/*         it is presenting.							        */
	/*      B) help_ sets info_seg_data.ptrs = null() to prepare for a later		        */
	/*         call to info_seg_$terminate						        */
	/*      C) help_ sets info_seg_data.ptrs.isdP to an ssu_ sci_ptr value created by the caller.     */
	/*      D) help_ optionally sets info_seg_data.ptrs.std_areaP to an area with "standard           */
	/*         characteristics" setup by the caller's ssu_ invocation.			        */
	/*    See the "Notes on cleanup" section for more information.			        */
	/*									        */
	/* code									        */
	/*    is a status code.  It is non-zero when a fatal error occurs.			        */
	/*    Cases include:							        */
	/*     - info_seg_data.version has a value not supported by info_seg_.		        */
	/*									        */
	/*									        */
	/* Notes on cleanup:							        */
	/* When initialization completes, info_seg_data.ptrs point to data items		        */
	/* used in subsequent calls to info_seg_ subroutines.  The help_ must create a		        */
	/* cleanup on-unit that calls a routine to release storage for these data items:	        */
	/*    - Calls info_seg_$terminate to terminate info segments and releases		        */
	/*      storage holding structures describing those info segments.			        */
	/*									        */
	/* In addition, the caller must call the above routine before the command returns.	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

init_for_help_:
     entry (AisdP, Acode);

/*dcl  AisdP ptr,					/* Input argument to info_seg_ routines, pointing to      */
/*    1 isd aligned like info_seg_data based (AisdP);	/*  the info_seg_data (isd) structure.		        */
/*dcl  Acode fixed bin(35);				/* Status code.				        */

/* ------------------------------------------------------------
    Check for errors in the caller's input arguments to this
    subroutine.
   ------------------------------------------------------------ */

     if  isd.version ^= info_seg_data_version_01  then do;
	Acode = error_table_$unimplemented_version;
	return;
	end;

     if  isd.sciP = null() then do;			/* All callers must provide their own ssu_ sci_ptr        */
	Acode = error_table_$inconsistent;
	return;
	end;
     isd.standalone_invocationS = F;
     goto INIT_COMMON;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$reinitialize						        */
	/*									        */
	/* FUNCTION: terminates any info segment files that were parsed, and empties		        */
	/* temporary storage used for info segment data structures.				        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/*    declare info_seg_$reinitialize entry (ptr);					        */
	/*									        */
	/*    call info_seg_$reinitialize (info_seg_dataP);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1).		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

reinitialize:
     entry (AisdP);
     
/*dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */

     do iFileP = isd.files.firstP repeat iFile.nextP while(iFileP ^= null());
	if  iFile.P ^= null()  then			/*  - Terminate each info segment file.		        */
	     call terminate_file_ (iFile.P, 0, TERM_FILE_TERM, code);
	end;

     isd.files = null();				/*  - Remove iFile structures from info_seg_data.	        */

     if  isd.areaP ^= null()  then			/*  - Release temporary segments hold iXXX structures.    */
	call translator_temp_$empty_all_segments (isd.areaP, code);
     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$terminate						        */
	/*									        */
	/* FUNCTION: terminates any info segment files that were parsed, and releases		        */
	/* temporary storage used for info segment data structures.				        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/*    declare info_seg_$terminate_iFiles entry (ptr);				        */
	/*									        */
	/*    call info_seg_$terminate_iFiles (info_seg_dataP);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1).		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

terminate:
     entry (AisdP);
     
/*dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */

     do iFileP = isd.files.firstP			/*  - Terminate each info segment file.		        */
	repeat iFile.nextP  while(iFileP ^= null());
	if  iFile.P ^= null()  then
	     call terminate_file_ (iFile.P, 0, TERM_FILE_TERM, code);
	end;

     isd.files = null();				/*  - Remove iFile structures from info_seg_data.	        */

     if  isd.areaP ^= null()  then do;			/*  - Release temporary segments hold iXXX structures.    */
	call translator_temp_$release_all_segments (isd.areaP, code);
	isd.areaP = null();
	end;

     call standalone_cleanup_handler (isd.standalone_invocationS, isd.sciP);
						/* cleanup handler (in ssu_standalone_command_.incl.pl1)  */
						/*  terminates the ssu_ invocation created by info_seg_   */
						/*  on our behalf.				        */
     return;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$append_iFiles						        */
	/*									        */
	/* FUNCTION: creates an iFile structure for each info segment matching an input		        */
	/* pathname.  Each new iFile structure is attached to the info_seg_data.files		        */
	/* threaded list, in alphabetic order by first entryname of the info segment.		        */
	/* For details, see the "Notes on iFile structures" below.				        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/* declare info_seg_$append_iFiles entry (ptr, char(*));				        */
	/* call info_seg_$append_iFiles (info_seg_dataP, path);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1).		        */
	/* path									        */
	/*    a relative or absolute pathname identifying one or more info segments.  A		        */
	/*    suffix of .info is assumed if not present.  The star convention is		        */
	/*    supported.								        */
	/*									        */
	/*									        */
	/* Notes on iFile structures:							        */
	/* Each iFile structure created by info_seg_ is added to the info_seg_data.files	        */
	/* threaded list.  Use the following code to set iFileP to point to structures on	        */
	/* this list:								        */
	/*									        */
	/*      do iFileP = info_seg_data.files.firstP					        */
	/*           repeat iFile.nextP  while (iFileP ^= null() );				        */
	/*              ... <code to operate on each iFile> ...				        */
	/*           end;								        */
	/*									        */
	/* The iFile and info_seg_data structures are declared in:  info_seg_dcls_.incl.pl1	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

append_iFiles:
     entry (AisdP, Apath);
     
/*dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */
  dcl  Apath char(*);

  dcl  dir char(168),
       ent char(32),
       star_type fixed bin(2);

     call expand_pathname_ (Apath, dir, ent, code);
     if  code ^= 0  then do;
	call ssu_$print_message (isd.sciP, code, " ^a", Apath);
	return;
	end;

     call suffixed_name_$make (ent, info_seg_suffix, ent, code);
     if  code ^= 0  then do;
	call ssu_$print_message (isd.sciP, code, ": ^a", ent);
	return;
	end;

     call check_star_name_ (ent, CHECK_STAR_ENTRY_DEFAULT, star_type, code);
     if  code ^= 0  then do;
	call ssu_$print_message (isd.sciP, code, ": ^a", ent);
	return;
	end;
     
  dcl  fP ptr;

     if  star_type = STAR_TYPE_USE_PL1_COMPARE  then do;	/* Simple case: no star name.			        */
	call hcs_$get_uid_file (dir, ent, uid, code);
	fP = info_seg_allocate_$iFile (AisdP, dir, ent, uid);
						/*  - Create iFile to hold the dir/ent values.	        */
	if  fP ^= null()  then			/*  - Append iFile to our info_seg_data.files list.       */
	     call insert_file_in_isd (addr(isd), fP);
	return;
	end;


     star_entry_ptr, star_names_ptr = null();		/* Prepare to cleanup storage allocated by hcs_$star_     */
     on cleanup call append_janitor();

     call hcs_$star_ (dir, ent, star_ALL_ENTRIES, isd.std_areaP, 
	star_entry_count, star_entry_ptr, star_names_ptr, code);
     if code ^= 0 then do;
	call ssu_$print_message (isd.sciP, code, "^/^-Looking for entries matching: ^a>^a", dir, ent);
	return;
	end;

  dcl  CHASE_LINKS fixed bin(1) int static options(constant) init(1);
  dcl  bit_count fixed bin(24);
  dcl (entI, nmFirstI) fixed bin;
  dcl  ent_type fixed bin(2);
  dcl  ent_type_SEGMENT fixed bin(2) int static options(constant) init(1);
  dcl  uid bit(36) aligned;
     

STAR_ENTRIES:					/* Walk array of branches returned by hcs_$star_	        */
     do entI = lbound(star_entries,1) to hbound(star_entries,1);
						/*  - For each segment...			        */
	nmFirstI = star_entries(entI).nindex;
	ent = star_names(nmFirstI);			/*     - Get first name on the segment.		        */

	if  star_entries(entI).type = star_SEGMENT then  do;
ALLOCATE_FILE: call hcs_$get_uid_file (dir, ent, uid, code);
	     fP = info_seg_allocate_$iFile (AisdP, dir, ent, uid);
						/*     - Create iFile to hold the dir/ent values.	        */
	     if  fP ^= null()  then			/*     - Append iFile to our info_seg_data.files list.    */
		call insert_file_in_isd (addr(isd), fP);
	     end;
						/*  - For each link...			        */
	else if  star_entries(entI).type = star_LINK  then do;
	     call hcs_$status_minf( dir, ent, CHASE_LINKS, ent_type, bit_count, code);
						/*     - Chase link to ensure it points to a segment.     */
	     if  code = 0  &  ent_type = ent_type_SEGMENT  then
		goto ALLOCATE_FILE;
	     end;

	end STAR_ENTRIES;

     call append_janitor();
     return;
     
append_janitor:
     proc();
     
     if star_names_ptr ^= null then			/* star_names must be freed first, because its extent     */
	free star_names;				/*  depends upon data returned in star_entries array.     */
     if star_entry_ptr ^= null then
	free star_entries;

     end append_janitor;
%page;
/* -----------------------------------------------------------------
   INTERNAL PROCEDURE:  insert_file_in_isd

   FUNCTION:  Attach an iFile structure to the isd.files thread
	    in alphabetic order by file's absolute pathname.

   USURPS:    iFileP
   ----------------------------------------------------------------- */

insert_file_in_isd:
     proc (AisdP, AiFileP);
     
  dcl  AisdP ptr;					/* Pointer to info_seg_data structure.		        */
  dcl  AiFileP ptr;					/* Pointer to file inserted alphabetically into that data.*/

  dcl 1 isd aligned like info_seg_data based(AisdP);
  dcl 1 iF aligned like iFile based(AiFileP);

     do iFileP = isd.files.firstP			/* Check if new iFile.uid already exists in list.	        */
          repeat iFile.nextP  while (iFileP ^= null() );
	if  iF.uid = iFile.uid  then			/*  - File found earlier under a different name.	        */
	     return;
	end;

     iF.sib = null();
     do iFileP = isd.files.firstP			/* Can insert new file alphabetically into mid-chain?     */
          repeat iFile.nextP  while (iFileP ^= null() );

	if  pathname_(iF.dir, iF.ent) < pathname_(iFile.dir, iFile.ent)  then do;
						/*  - Yes.  Insert the new block prior to this iFile.     */
	     if  iFile.prevP = null()  then do;		/*       Make new iFile the first member.	        */
		isd.files.firstP = addr(iF);		
		end;
	     else do;				/*       Insert new iFile before existing member.	        */
		iFile.prevP->iFile.nextP = addr(iF);	/*       Chain its prior member to new iFile.	        */
		iF.prevP = iFile.prevP;
		end;

	     iFile.prevP = addr(iF);			/*       Chain new iFile to the existing member.	        */
	     iF.nextP = addr(iFile);
	     return;
	     end;
	end;
     if  isd.files.firstP = null()  then do;		/*  - No.  Append the new file to end of chain.	        */
	isd.files.firstP, isd.files.lastP = addr(iF);	/*     - Chain empty?  New file is only chain member.     */
	end;

     else do;
	iFileP = isd.files.lastP;			/*     - Get prior to current last thread member.	        */
	isd.files.lastP = addr(iF);			/*     - Chain new file as last thread member.	        */

	iFile.sib.nextP = addr(iF);			/*     - Chain new file to former last file on thread.    */
	iF.sib.prevP = addr(iFile);
	end;

     end insert_file_in_isd;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$examine_iFile						        */
	/*									        */
	/* FUNCTION: creates an iFile structure for a given info segment.  Each new iFile structure       */
	/* is attached to the info_seg_data.files threaded list, in alphabetic order by given entryname   */
	/* of that info segment.  For details, see the "Notes on iFile structures" below.	        */
	/*									        */
	/* Examines each iFile to locate its info blocks.  An iBlok structure is attached to iFile        */
	/* describing each of these blocks.						        */
	/*									        */
	/* Note that the blocks attached to the iFile have NOT been divided into paragraphs and	        */
	/* sections.  These can be added to the iBlok structures by subsequently calling:	        */
	/*   info_seg_$parse_iFile							        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/*    declare info_seg_$examine_iFile entry (ptr, char(*), char(*), bit(36) aligned, 	        */
	/*        fixed bin(35)) returns (ptr);						        */
	/*    iFileP = info_seg_$examine_iFile (info_seg_dataP, dir, ent, uid, code);		        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1). (Input)	        */
	/* dir									        */
	/*    absolute pathname of directory containing info segment. (Input)			        */
	/* ent									        */
	/*    entry name by which info segment was selected from that directory. (Input)	        */
	/* uid									        */
	/*    unique identifier for that info segment. (Input)				        */
	/* iFileP									        */
	/*    points to a new iFile structure for that info segment, or to an existing iFile structure    */
	/*    if the info segment was already added via an earlier call to this function. (Output)        */
	/* code									        */
	/*    standard status code. (Output)  It reports any error encountered while initiating the       */
	/*    file.								        */
	/*									        */
	/*									        */
	/* Notes on iFile structures:							        */
	/* Each iFile structure created by info_seg_ is added to the info_seg_data.files	        */
	/* threaded list.  Use the following code to set iFileP to point to structures on	        */
	/* this list:								        */
	/*									        */
	/*      do iFileP = info_seg_data.files.firstP					        */
	/*           repeat iFile.nextP  while (iFileP ^= null() );				        */
	/*              ... <code to operate on each iFile> ...				        */
	/*           end;								        */
	/*									        */
	/* The iFile and info_seg_data structures are declared in:  info_seg_dcls_.incl.pl1	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

examine_iFile:
     entry (AisdP, Adir, Aent, Auid, Acode) returns (ptr);

/*dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */
  dcl  Adir char(*);
  dcl  Aent char(*);
  dcl  Auid bit(36) aligned;
/*dcl  Acode fixed bin(35);				/* Status code.				        */

     Acode = 0;

     do iFileP = isd.files.firstP			/* See if info seg previously added to isd.files under    */
          repeat iFile.sib.nextP while (iFileP ^= null() ); /*  same uid but perhaps different dir/ent name.	        */
	if  iFile.uid = Auid  then do;
	     if  iFile.bloks.firstP = null()  then	/*  - Examine returned iFile for its blocks.	        */
		call get_iBloks (AisdP, iFileP, Acode);

	     return (iFileP);			/*  - Return previously-seen iFile to the caller.	        */
	     end;
	end;
     
     iFileP = info_seg_allocate_$iFile (AisdP, Adir, Aent, Auid);
						/* Create iFile to hold the dir/ent values.	        */
     if  iFileP ^= null()  then do;
	fP = iFileP;				/*  - insert_file_in_isd used iFileP for its own purposes */
	call insert_file_in_isd (addr(isd), fP);	/*  - Add new iFile structure to isd.files threaded list. */
	iFileP = fP;

	if  iFile.bloks.firstP = null()  then		/*  - Examine returned iFile for its blocks.	        */
	     call get_iBloks (AisdP, iFileP, Acode);

	return (iFileP);				/*  - Return new iFile to the caller.		        */
	end;

     Acode = error_table_$noalloc;			/*  - Error happened while allocating iFile structure.    */
     return (null());
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$parse_iFile						        */
	/*									        */
	/* FUNCTION: initiates the info segment described by iFile, and parses that		        */
	/* segment into one or more components:						        */
	/*									        */
	/*    - info block   Portion of an info segment completely describing:		        */
	/*                   a command or active function; a subroutine or its		        */
	/*                   entrypoints; a subsystem request or active request; or some	        */
	/*                   other topic of general information.				        */
	/*    - section      A titled group of paragraphs in an info block.			        */
	/*    - paragraph    A group of lines from an info block which are displayed as a	        */
	/*                   unit.							        */
	/*    - line         A set of characters short enough to display on a single row	        */
	/*                   of most display terminals.					        */
	/*									        */
	/*									        */
	/* Syntax:								        */
	/* declare info_seg_$parse_iFile entry (ptr, ptr);				        */
	/* call info_seg_$parse_iFile (info_seg_dataP, iFileP);				        */
	/*									        */
	/*									        */
	/* Arguments:								        */
	/* info_seg_dataP								        */
	/*    points to the info_seg_data structure (see info_seg_dcls_.incl.pl1).		        */
	/* iFileP									        */
	/*    points to an iFile input structure for the file to be parsed.			        */
	/*									        */
	/*									        */
	/* Notes:									        */
	/* Before calling info_seg_$parse_iFile, the iFile structure contains only		        */
	/* the location of an info segment, and threads to other iFile structures.		        */
	/*									        */
	/* After parsing, the following information has been added to the iFile		        */
	/* structure:								        */
	/*  - A pointer to, and length of, the characters in the info segment.		        */
	/*  - An array of all names on the info segment.					        */
	/*  - A list of iLine structures, each describing a line of the info segment.		        */
	/*  - A list of iBlok structures, each describing a block of the info segment.		        */
	/*  - Integers classifying the block organization within the info segment.		        */
	/*									        */
	/*									        */
	/* In addition, each iBlok structure describes:					        */
	/*  - A pointer to, and length of, the characters in the block.			        */
	/*  - An array of names in the block divider (if the block began with a divider).	        */
	/*  - Block header information (date and header string).				        */
	/*  - A list of iSect structures, each describing sections within the block.		        */
	/*  - A list of iPgh structures, each describing paragraphs within the block.		        */
	/*  - A list of iLine structures, each describing lines within the block.		        */
	/*									        */
	/*									        */
	/* ENTRY:  info_seg_$get_iBloks						        */
	/*									        */
	/* FUNCTION: initiates the info segment described by iFile, and locates in that		        */
	/* segment one or more blocks.  Don't get iFile.names.				        */
	/*									        */
	/*    - info block   Portion of an info segment completely describing:		        */
	/*                   a command or active function; a subroutine or its		        */
	/*                   entrypoints; a subsystem request or active request; or some	        */
	/*                   other topic of general information.				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

get_iBloks:
     entry (AisdP, AiFileP, Acode);

/*dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */
  dcl  AiFileP ptr;					/* Pointer to iFile structure for selected file.	        */
/*dcl  Acode fixed bin(35);				/* Status code.				        */
  

  dcl  only_blocksS bit(1) aligned;

     only_blocksS = T;
     Acode = 0;
     goto BLOCKS_JOIN;
     

parse_iFile:
     entry (AisdP, AiFileP);
     
  dcl  bc fixed bin(24);
  dcl  snap_link fixed bin;

     only_blocksS = F;


BLOCKS_JOIN:
     iFileP = AiFileP;

     if  iFile.P = null()  |  iFile.structure = iFile_struc_err_UNSET  then do;
	call initiate_file_ (iFile.dir, iFile.ent, R_ACCESS, iFile.P, bc, code);
	if  code ^= 0  then do;
PARSE_report_error:
	     if  only_blocksS  then
		Acode = code;
	     else do;
		call ioa_("");
		call ssu_$print_message (isd.sciP, code, "^/  Initiating for reading: ^a>^a", iFile.dir, iFile.ent);
		end;
	     return;
	     end;
	iFile.L = divide (bc, BITS_PER_CHAR, 21, 0);
	if  (bc - (BITS_PER_CHAR * iFile.L)) > 0  then do;
	     code = error_table_$bad_seg;
	     goto PARSE_report_error;
	     end;

	if  iFile.names.N = 0  &  ^only_blocksS  then	/* Segment may have many names.		        */
	     call get_file_names (addr(isd), addr(iFile));/*  - Get them, if not supplied by caller.	        */

	call info_seg_parse_$file_lines_and_blocks (addr(isd), addr(iFile));
						/* Create iLine structure for each line of info segment.  */
						/* Create iBlok structure for each line beginning with a  */
						/*  block divider string, and for first block of segment  */
						/*  if it has no divider.			        */
						/* Thread each iLine onto:
						/*   - iFile            (via iLine.sibs.file thread)      */
						/*   - containing iBlok (via iLine.sibs.blok thread)      */

	iFile.caseI = info_seg_parse_$file_structure (addr(iFile));
						/* Match order of blocks found in info segment against    */
						/*  supported block sequence organizations.	        */
						/*   - For SUBROUTINE orgs, iBlok.kind has been set.      */
						/*   - For xxx_HCOM orgs, history iBlok.kind has been set.*/
						/* Must examine blocks to get missing blok information    */
						/*  for other blocks.			        */

	snap_link = info_seg_specifications_$file_structures;
						/* This is an avoidance of dps8 simulator's improper      */
						/*  dynamic linking fault  implementation in next stmt.   */
	iFile.structure = iFile_structure.structID(iFile.caseI);    
						/* Map iFile.caseI to a known structure type, or to a     */
	end;					/*  non-positive structure error (iFile_struc_err_XXX).   */

     if  only_blocksS  then
	call info_seg_parse_$block_headers (addr(isd), addr(iFile));
						/* Group lines of each block into:		        */
						/*  - iBlok.header (block heading line)		        */

     else call info_seg_parse_$block_header_sects_pghs (addr(isd), addr(iFile));
						/* Group lines of each block into:		        */
						/*  - iBlok.header (block heading line)		        */
						/*  - iBlok.pghs   (list of iPgh paragraphs within block) */
						/*  - iBlok.sects  (list of iSect sections within block)  */
     return;					

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* ENTRY:  info_seg_$unthread_iBlok						        */
	/*									        */
	/* FUNCTION: Unthreads an iBlok structure from its parent iFile structure.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

unthread_iBlok:
     entry (AiBlokP);
     
  dcl  AiBlokP ptr;					/* points of iBlok to be unthreaded from parent iFile     */
     
     iBlokP = AiBlokP;
     iFileP = iBlok.relatives.fileP;
     
  dcl (sibNextP, sibPrevP) ptr;

     sibPrevP = iBlok.sib.prevP;
     sibNextP = iBlok.sib.nextP;

     if  sibPrevP ^= null()  then do;
	sibPrevP->iBlok.sib.nextP = sibNextP;
	iBlok.sib.prevP = null();
	end;
     if  sibNextP ^= null()  then do;
	sibNextP->iBlok.sib.prevP = sibPrevP;
	iBlok.sib.nextP = null();
	end;
     if  iFile.bloks.firstP = iBlokP  then
	iFile.bloks.firstP = sibNextP;
     if  iFile.bloks.lastP = iBlokP  then
	iFile.bloks.lastP = sibPrevP;

     return;
%page;

/* -----------------------------------------------------------------
   INTERNAL PROCEDURE:  get_file_names

   FUNCTION:  Gets a list of current names on an info segment, storing
	    them in the iFile.names list.
   ----------------------------------------------------------------- */

get_file_names:
     proc (AisdP, AiFileP);
     
  dcl  AisdP ptr;					/* Pointer to info_seg_data input structure.	        */
  dcl  AiFileP ptr;					/* Pointer to iFile structure for selected file.	        */

  dcl 1 isd aligned like info_seg_data based(AisdP);

  dcl  nmI fixed bin;
  dcl 1 st aligned like status_branch.short;

     status_area_ptr = isd.std_areaP;
     st.nnames = 0;
     status_ptr = addr(st);
     on cleanup call gfm_janitor();

     call hcs_$status_ (AiFileP->iFile.dir, AiFileP->iFile.ent, 0, status_ptr, status_area_ptr, code);
     if  status_ptr ^= null()  then do;
	AiFileP->iFile.names.N = min(st.nnames, hbound(AiFileP->iFile.names.nm,1));
	do nmI = lbound(AiFileP->iFile.names.nm,1) to hbound(AiFileP->iFile.names.nm,1);
	     AiFileP->iFile.names.nm(nmI) = rtrim(status_entry_names(nmI));
	     end;
	end;
     else do;
	AiFileP->iFile.names.N = 1;
	AiFileP->iFile.names.nm(1) = rtrim(AiFileP->iFile.ent);
	end;

     call gfm_janitor();
     return;
     

gfm_janitor:
	proc ();

	if  st.nnames ^= 0  then do;
	     free status_entry_names;
	     st.nnames = 0;
	     end;

	end gfm_janitor;

     end get_file_names;
%page;
%include info_seg_dcls_;
%page;
%include access_mode_values;
%page;
%include check_star_name;
%page;
%include ssu_invoker_dcls_;
%page;
%include star_structures;
%page;
%include status_structures;
%page;
%include system_constants;
%page;
%include terminate_file;
     end info_seg_;
