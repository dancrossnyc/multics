/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
        Given a pointer to a field_table and a list of field ids, this module
   builds a typed_vector_array, allocated in the provided area, by converting 
   field descriptions in the field_table into dimension descriptions in the
   dimension_table.
*/

/* HISTORY:
Written by Matthew Pierret 04/05/82.
Modified:
04/14/82 by Lindsey Spratt: Changed the field_table location to be 1-originned
	  instead of 0-originned.  ft_maximum_field_name_length is no longer
	  calculated but is simply set to
	  typed_vector_array.maximum_dimension_name_length.  Also, the
	  descriptor_string based variable was changed from unaligned to
	  aligned.
06/28/82 by Lindsey Spratt: Declared a local automatic variable
	  "number_of_fields".  field_table.number_of_fields was being set to
	   the number of field ids being passed in as an argument.
08/19/82 by Matthew Pierret:  Changed p_ids to p_id_list_ptr, which
            points to id_list structure.
10/14/82 by Matthew Pierret:  Added p_number_of_vector_slots.
03/22/83 by Lindsey Spratt:  Changed to use version 2 of the field_table
	  structure.  Added the CHECK_VERSION_CHAR internal procedure.
06/14/83 by Matthew Pierret:  Changed to leave a blank dimension_table entry
            if a non-positive id is specified in p_id_list.
            Added FINISH routine as cleanup handler and enabled cleanup
            condition.  Added copyright notice.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.  Removed some
            un-used variables.
11/27/84 by Lindsey L. Spratt:  Changed to use dm_vector_util_ instead of
            vector_util_.
12/07/84 by M. Sharpe: to clean up format and dcls; to correct calls to
	  CHECK_VERSION* to pass parameters by reference where possible.
*/
/* format: style2,ind3 */

dmu_cv_table_to_typed_array:
cv_table_to_typed_array:
   proc (p_field_table_ptr, p_id_list_ptr, p_area_ptr, p_number_of_vector_slots, p_typed_vector_array_ptr, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_area_ptr	       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_field_table_ptr      ptr;
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_number_of_vector_slots
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    process_all_fields     bit (1) aligned;
      dcl	    number_of_fields       fixed bin;
      dcl	    dimension_idx	       fixed bin;
      dcl	    field_id	       fixed bin (17);
      dcl	    area_ptr	       ptr;
      dcl	    descriptor_string_ptr  ptr;

/* Based */

      dcl	    area		       area (sys_info$max_seg_size) based (area_ptr);
      dcl	    descriptor_string      aligned bit (36) based (descriptor_string_ptr);

/* Builtin */

      dcl	    (hbound, max, null, substr)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dmu_cv_table_to_typed_array") char (32) varying int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry options (variable);
      dcl	    dm_vector_util_$init_typed_vector_array
			       entry options (variable);
      dcl	    dm_vector_util_$free_typed_vector_array
			       entry (ptr, ptr, fixed bin (35));

/* External */

      dcl	    error_table_$fatal_error
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      area_ptr = p_area_ptr;
      field_table_ptr = p_field_table_ptr;

      call CHECK_VERSION_CHAR ((field_table.version), (FIELD_TABLE_VERSION_3), "field_table");

      if p_id_list_ptr = null
      then
         do;

	  number_of_fields = hbound (field_table.field, 1);
	  process_all_fields = "1"b;

         end;
      else
         do;

	  id_list_ptr = p_id_list_ptr;
	  call CHECK_VERSION (id_list.version, (ID_LIST_VERSION_1), "id_list");

	  process_all_fields = "0"b;
	  number_of_fields = id_list.number_of_ids;

         end;

      tva_maximum_dimension_name_length = 0;
      do dimension_idx = 1 to number_of_fields;
         if process_all_fields
         then field_id = dimension_idx;
         else field_id = id_list.id (dimension_idx);
         if field_id >= 1
         then tva_maximum_dimension_name_length =
	         max (tva_maximum_dimension_name_length, field_table.field (field_id).length_of_name);
      end;

      typed_vector_array_ptr = null;

      on cleanup call FINISH ();

      call dm_vector_util_$init_typed_vector_array (area_ptr, p_number_of_vector_slots, number_of_fields,
	 tva_maximum_dimension_name_length, typed_vector_array_ptr, p_code);
      if p_code ^= 0
      then return;
      call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");


      dimension_idx = 0;
SET_NAME_AND_DESCRIPTOR:
      do dimension_idx = 1 to number_of_fields;

         if process_all_fields
         then field_id = dimension_idx;
         else field_id = id_list.id (dimension_idx);

         if field_id >= 1				/* If field_id<1, leave dimension_table entry empty */
         then
	  do;
	     typed_vector_array.dimension_table (dimension_idx).name =
		substr (field_table.field_names, field_table.field (field_id).location_of_name,
		field_table.field (field_id).length_of_name);
	     if field_table.field (field_id).flags.descriptor_is_varying
	     then call sub_err_ (error_table_$fatal_error, myname, "s", null, 0,
		     "^/The capability to handle varying length descriptors is not yet supported.");

	     alloc descriptor_string in (area);
	     descriptor_string = field_table.field (field_id).descriptor;

	     typed_vector_array.dimension_table (dimension_idx).descriptor_ptr = descriptor_string_ptr;
	  end;
      end SET_NAME_AND_DESCRIPTOR;

      p_typed_vector_array_ptr = typed_vector_array_ptr;

      return;
%page;
FINISH:
   proc ();

      if typed_vector_array_ptr ^= null
      then call dm_vector_util_$free_typed_vector_array (area_ptr, typed_vector_array_ptr, (0));

   end FINISH;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*) parameter;
      dcl	    p_expected_version     char (*) parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION_CHAR;
%page;
%include vu_typed_vector_array;
%page;
%include dm_field_table;
%page;
%include dm_id_list;
%page;
%include sub_err_flags;
   end dmu_cv_table_to_typed_array;
