/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION

        This module implements collection_manager_$put.

        This module is a transfer vector of sorts for routines which put
   an element.  Two things determine the proper routine to invoke: the Element
   Storage Method used by the collection and the entry through which this
   routine was invoked.  The ESM is determined by looking in the
   collection_header.  The $info and $buffered_info entries are passed the
   collection_header as part of the cm_info structure; The other entries get
   the collection_header by setting up a cm_info structure
   (cm_opening_info$get).  If entered through one of the buffered entries,
   this is a "buffered allocation".  Buffered puts are only supported for
   ordered ESM collections.
   
        If Ordered ESM is in force, p_element_id contains the control
   interval/slot number to put; if Basic ESM, p_element_id holds ci/slot
   of the "related" element (see the documentation for explanation of related
   element).  If BESM, a free slot is looked for; if OESM slots to the right
   of the specified slot are shifted over one.  An optimization exists which
   should be implemented in the next phase which will keep track of whether a
   free slot exists in a ci.


   ***** NOTE: The term "put" was previously referred to as "allocate" *****
   ***** "Put" means to allocate space for a new element, and put the  *****
   ***** value of the element in that space.                           *****
*/

/* HISTORY:
Written by Matthew C Pierret.
Modified:
03/23/82 by Matthew Pierret: Added "header" entry to allow collection manager
            routines to supply the collmgr_header.  This saves a get of that
            structure and assures that all modules are working on the same copy
            of the structure.
04/07/82 by Matthew Pierret: Added calculation of maxim space available.
                 Added following logic: If the requested control 
            interval is 0 but the requested collection is not the header
            collection (meaning that no particular control interval is
            requested) then check the last_used_ci for the collection. If
            non-zero, then set element_id.control_interval_id to be the
            last_used_ci. If zero, then allocate a new control interval and set
            element_id.control_interval_id to be the new control interval.
            This is done for Basic ESM only. It is an error for such a situation
            to occur using Ordered ESM
04/17/82 by Matthew Pierret: Removed call to cm_get_header_and_slot. This is
            now done at a later stage for each control interval attempted.
            This approach helps eliminate inconsistencies between the ci
            header this routine looks at and the one its subroutines look at.
06/08/82 by Matthew Pierret: Changed to use collection_header instead of
            collmgr_header.collection (). Also made calculation of maximum
            free space take datum header into account, returning only the
            largest element acceptable instead of the largest datum.
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl.
08/03/82 by Matthew Pierret: Changed to use last_control_interval in calling
            sequence to cm_allocate_basic_element.
09/07/82 by Matthew Pierret: Fixed p_code/code bug in call to cm_get_element.
11/09/82 by Matthew Pierret: Added opening info. Moved calculation of free
            space into lower routines.
01/07/83 by Matthew Pierret: Added $buffered and $buffered_info entries.
            Basic ESM still does not support buffered allocation.
01/07/83 by Matthew Pierret: Fixed bug which set bci_header_ptr to the addr of
            a local automatic_bci_header even if p_ci_buffer_ptr was supplied.
02/02/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2.
05/21/84 by Matthew Pierret: Renamed include file dm_cm_esm_info to dm_esm_info
10/03/84 by Matthew Pierret: Removed un-used constants. Added unspec builtin.
            Removed unnecessary calls-by-value to CHECK_VERSION.  Changed to
            use the standard sub_err_ action flags and to use the code
            dm_error_$unimplemented_esm instead of 0 in sub_err_ call
            reporting that the Basic ESM cannot use the buffered access method.
*/


/* format: style2,ind3 */

cm_put:
   proc (p_file_opening_id, p_collection_id, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available,
        p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr;
      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_length       fixed bin (35);
      dcl	    p_element_ptr	       ptr;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_maximum_space_available
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 automatic_bci_header aligned like bci_header;
      dcl	    element_length_in_bits fixed bin (35);
      dcl	    is_buffered	       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    (addr, null, unspec)   builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_put") char (32) varying int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_esm
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);


/* END OF DECLARATIONS */

      unspec (automatic_bci_header) = "0"b;
      bci_header_ptr = addr (automatic_bci_header);

      goto NO_INFO_JOIN;

buffered:
   entry (p_ci_buffer_ptr, p_file_opening_id, p_collection_id, p_element_ptr, p_element_length, p_element_id,
        p_maximum_space_available, p_code);

      is_buffered = "1"b;
      bci_header_ptr = p_ci_buffer_ptr;

NO_INFO_JOIN:
      call cm_opening_info$get (p_file_opening_id, p_collection_id, cm_info_ptr, p_code);
      if p_code ^= 0
      then return;

      goto JOIN;


info:
   entry (p_cm_info_ptr, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available, p_code);

      cm_info_ptr = p_cm_info_ptr;
      unspec (automatic_bci_header) = "0"b;
      bci_header_ptr = addr (automatic_bci_header);

      goto JOIN;

/********************* Not yet used. ********************

buffered_info:
   entry (p_cm_info_ptr, p_ci_buffer_ptr, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available,
      p_code);

      is_buffered = "1"b;
      cm_info_ptr = p_cm_info_ptr;
      bci_header_ptr = p_ci_buffer_ptr;

      goto JOIN;

************************************************************ */
%page;

JOIN:
      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      collection_header_ptr = cm_info.header_ptr;

      call CHECK_VERSION ("collection_header", collection_header.version, COLLECTION_HEADER_VERSION_2);

      p_code = 0;
      p_maximum_space_available = -1;

      element_id_string = p_element_id;

      if collection_header.flags.fixed_size_elements
      then element_length_in_bits = collection_header.maximum_element_size;
      else element_length_in_bits = p_element_length;

      if collection_header.element_storage_method = ORDERED_ELEMENT_STORAGE_METHOD
      then if is_buffered
	 then call cm_put_ordered_element$buffered (cm_info_ptr, bci_header_ptr, element_length_in_bits, p_element_ptr,
		 element_id_string, p_maximum_space_available, p_code);
	 else call cm_put_ordered_element (cm_info_ptr, bci_header_ptr, element_length_in_bits, p_element_ptr,
		 element_id_string, p_maximum_space_available, p_code);

      else if is_buffered
      then call sub_err_ (dm_error_$unimplemented_esm, myname, ACTION_CANT_RESTART, null, 0,
	      "Buffered element allocation is not supported for collections using the^/Basic element storage method.");
      else call cm_put_basic_element (cm_info_ptr, bci_header_ptr, element_length_in_bits, p_element_ptr,
	      element_id_string, p_maximum_space_available, p_code);


      if p_code = 0
      then p_element_id = element_id_string;


      return;					/* Effective end of cm_put */

%page;
CHECK_VERSION:
   proc (p_structure_name, p_given_version, p_correct_version);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_collection_header;
%page;
%include dm_esm_info;
%page;
%include dm_element_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_put;
