/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:  
          This program compares the value of two keys.
     It is responsible for "parsing" the key bit string into its constituent
     fields, using the information provided by the field_table.
          The comparison is done a-field-at-a-time, starting with field 1 and
     continuing with field 2, field 3, etc. until either an inequality is
     found or all of the fields have been compared.  
          Key1 must be a full key string.  Key2 may be a "truncated" key as 
     produced by the im_make_parent_key module.
*/

/* HISTORY:

Written by Lindsey Spratt, 11/03/82.

Modified:
12/08/82 by Lindsey Spratt:  Fixed code which extracts lengths of varying
	  strings to cope with different size variable lengths (currently 9,
	  18 and 36 bit length variables are possible).
06/29/83 by Lindsey L. Spratt:  Fixed to support comparison of a full key1
            string with a "truncated" key2 string.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
11/09/84 by Lindsey L. Spratt:  Minor format changes.  Declared the builtins.
*/

/* format: style2,ind3 */
dmu_compare_strings:
   proc (p_field_table_ptr, p_key1_string_ptr, p_key1_string_length, p_key2_string_ptr, p_key2_string_length,
        p_key2_last_field_idx, p_first_inequal_field_id, p_key1_equal_to_key2, p_key1_less_than_key2, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;
      dcl	    p_key1_string_ptr      ptr parameter;
      dcl	    p_key1_string_length   fixed bin (24) parameter;
      dcl	    p_key2_string_ptr      ptr;
      dcl	    p_key2_string_length   fixed bin (24);
      dcl	    p_key2_last_field_idx  fixed bin (17) unaligned;
      dcl	    p_first_inequal_field_id
			       fixed bin (17) parameter;
      dcl	    p_key1_equal_to_key2   bit (1) aligned;
      dcl	    p_key1_less_than_key2  bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 truncated_field_descriptor
			       like arg_descriptor;
      dcl	    last_field_is_truncated
			       bit (1) aligned init ("0"b);
      dcl	    last_field_value_ptr   ptr init (null);
      dcl	    (last_field_value_length, last_field_value_length_in_bits)
			       fixed bin (35) init (-1);

      dcl	    field_idx	       fixed bin init (-1);
      dcl	    (current_field_id, current_field_variable_length, current_field_location)
			       fixed bin (35) init (-1);
      dcl	    maximum_field_idx      fixed bin (17) init (-1);
      dcl	    varying_field_idx      fixed bin init (-1);
      dcl	    myname	       init ("dmu_compare_strings") char (32) varying;
      dcl	    key2_field_value_length
			       fixed bin (35);
      dcl	    key2_field_value_ptr   ptr;
      dcl	    key2_field_value_offset
			       fixed bin (24);
      dcl	    key1_field_value_length
			       fixed bin (35);
      dcl	    key1_field_value_ptr   ptr;
      dcl	    key1_field_value_offset
			       fixed bin (24);
      dcl	    (key1_location_of_first_varying_field, key2_location_of_first_varying_field)
			       fixed bin (35) init (-1);
      dcl	    last_field_length_in_bits
			       fixed bin (35) init (-1);
      dcl	    field_descriptor_ptr   ptr init (null);

/* Based */

      dcl	    based_real_fix_bin_1u  based fixed bin (35) unaligned;

      dcl	    p_key1_string	       based (p_key1_string_ptr) bit (p_key1_string_length);
      dcl	    key1_bit_array	       (p_key1_string_length) bit (1) based (p_key1_string_ptr);
      dcl	    p_key2_string	       based (p_key2_string_ptr) bit (p_key2_string_length);
      dcl	    key2_bit_array	       (p_key2_string_length) bit (1) based (p_key2_string_ptr);


/* Builtin */

      dcl	    (addr, bin, copy, hbound, null, substr, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    (
	    BITS_PER_WORD	       init (36),
	    BITS_PER_BYTE	       init (9),
	    BYTES_PER_WORD	       init (4)
	    )		       internal static options (constant) fixed bin (17);

/* Entry */

      dcl	    dmu_compare_values$field_to_field
			       entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35), bit (1) aligned,
			       bit (1) aligned, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      p_code = 0;
      p_key1_equal_to_key2 = "1"b;
      p_key1_less_than_key2 = "0"b;

      if p_key2_last_field_idx = -1
      then
         do;
	  maximum_field_idx = hbound (field_table.field, 1);
	  key1_location_of_first_varying_field, key2_location_of_first_varying_field =
	       field_table.location_of_first_varying_field;
	  last_field_is_truncated = "0"b;
         end;
      else
SETUP_TRUNCATED_FIELD:
         do;
	  maximum_field_idx = p_key2_last_field_idx;
	  arg_descriptor_ptr = addr (field_table.field (p_key2_last_field_idx).descriptor);

	  if field_table.varying_field_map (p_key2_last_field_idx).varying_field_index = 0
	  then if arg_descriptor.type = bit_dtype
	       then
		do;
		   if arg_descriptor.size > BITS_PER_WORD + BITS_PER_BYTE
		   then
		      do;
		         truncated_field_descriptor.packed = "1"b;
		         truncated_field_descriptor.flag = "1"b;
		         truncated_field_descriptor.type = varying_bit_dtype;
		         truncated_field_descriptor.size = arg_descriptor.size;
		         last_field_value_length =
			    addr (key2_bit_array (field_table.field (p_key2_last_field_idx).location))
			    -> based_real_fix_bin_1u;
		         last_field_length_in_bits = last_field_value_length + BITS_PER_WORD;
		         last_field_value_ptr =
			    addr (
			    key2_bit_array (field_table.field (p_key2_last_field_idx).location + BITS_PER_WORD));
		         last_field_is_truncated = "1"b;
		      end;
		end;
	       else if arg_descriptor.type = char_dtype
	       then
		do;
		   if arg_descriptor.size > BYTES_PER_WORD + 1
		   then
		      do;
		         truncated_field_descriptor.packed = "1"b;
		         truncated_field_descriptor.flag = "1"b;

		         truncated_field_descriptor.type = varying_char_dtype;
		         truncated_field_descriptor.size = arg_descriptor.size;
		         last_field_value_length =
			    addr (key2_bit_array (field_table.field (p_key2_last_field_idx).location))
			    -> based_real_fix_bin_1u;
		         last_field_value_length_in_bits = last_field_value_length * BITS_PER_BYTE + BITS_PER_WORD;
		         last_field_value_ptr =
			    addr (
			    key2_bit_array (field_table.field (p_key2_last_field_idx).location + BITS_PER_WORD));
		         last_field_is_truncated = "1"b;
		      end;
		end;

	  if last_field_is_truncated
	  then key2_location_of_first_varying_field =
		  field_table.field (p_key2_last_field_idx).location + last_field_length_in_bits;
	  else if p_key2_last_field_idx < field_table.number_of_fields
	  then key2_location_of_first_varying_field = field_table.field (p_key2_last_field_idx + 1).location;
	  else key2_location_of_first_varying_field = field_table.location_of_first_varying_field;
         end SETUP_TRUNCATED_FIELD;

FIELD_LOOP:
      do field_idx = 1 to maximum_field_idx while (p_code = 0 & p_key1_equal_to_key2);
         if last_field_is_truncated & p_key2_last_field_idx = field_idx
         then
PREPARE_TRUNCATED_FIELD:
	  do;
	     key1_field_value_length = truncated_field_descriptor.size;
	     key1_field_value_ptr = addr (key1_bit_array (field_table.field (field_idx).location));
	     key2_field_value_length = last_field_value_length;
	     key2_field_value_ptr = last_field_value_ptr;
	     field_descriptor_ptr = addr (truncated_field_descriptor);
	  end PREPARE_TRUNCATED_FIELD;
         else if field_table.varying_field_map (field_idx).varying_field_index = 0
         then
PREPARE_NONVARYING_FIELD:
	  do;
	     key1_field_value_length = -1;
	     key1_field_value_ptr = addr (key1_bit_array (field_table.field (field_idx).location));
	     key2_field_value_length = -1;
	     key2_field_value_ptr = addr (key2_bit_array (field_table.field (field_idx).location));
	     field_descriptor_ptr = addr (field_table.field (field_idx).descriptor);
	  end PREPARE_NONVARYING_FIELD;
         else
PREPARE_VARYING_FIELD:
	  do;
	     unspec (key1_field_value_length) =
		copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
		||
		substr (p_key1_string, field_table.field (field_idx).location,
		field_table.field (field_idx).length_in_bits);
	     key1_field_value_offset = key1_location_of_first_varying_field;
	     unspec (key2_field_value_length) =
		copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
		||
		substr (p_key2_string, field_table.field (field_idx).location,
		field_table.field (field_idx).length_in_bits);
	     key2_field_value_offset = key2_location_of_first_varying_field;
SET_VARYING_FIELD_VALUE_OFFSET:
	     do varying_field_idx = 1 to field_table.varying_field_map (field_idx).varying_field_index - 1;
	        current_field_id = field_table.varying_field_map (varying_field_idx).field_id;
	        current_field_location = field_table.field (current_field_id).location;
	        current_field_variable_length = field_table.field (current_field_id).length_in_bits;

	        key1_field_value_offset =
		   key1_field_value_offset
		   + bin (substr (p_key1_string, current_field_location, current_field_variable_length), 24, 0);
	        key2_field_value_offset =
		   key2_field_value_offset
		   + bin (substr (p_key2_string, current_field_location, current_field_variable_length), 24, 0);
	     end SET_VARYING_FIELD_VALUE_OFFSET;

	     key1_field_value_ptr = addr (key1_bit_array (key1_field_value_offset));
	     key2_field_value_ptr = addr (key2_bit_array (key2_field_value_offset));
	     field_descriptor_ptr = addr (field_table.field (field_idx).descriptor);
	  end PREPARE_VARYING_FIELD;

         call dmu_compare_values$field_to_field (field_descriptor_ptr, key1_field_value_ptr, key1_field_value_length,
	    key2_field_value_ptr, key2_field_value_length, p_key1_equal_to_key2, p_key1_less_than_key2, p_code);


      end FIELD_LOOP;

      p_first_inequal_field_id = field_idx - bin (^p_key1_equal_to_key2);

      return;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version, p_structure_name)
			       char (*) aligned parameter;
      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
%include sub_err_flags;
%page;
%include dm_field_table;
%page;
%include vu_typed_vector;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
   end dmu_compare_strings;
