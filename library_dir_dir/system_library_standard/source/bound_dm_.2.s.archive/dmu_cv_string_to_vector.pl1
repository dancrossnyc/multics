/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          Converts data in the form of a non-varying bit string, formatted
     according to the supplied field_table, to a simple typed vector
     structure.  The new typed_vector is allocated in the caller-supplied
     area.  The caller may supply a list of fields to be converted, in which
     case the fields are converted to vector "values" and ordered in the
     returned vector in the same order as they appear in the caller-supplied
     id_list structure.  If the id_list_ptr is null, then a simple
     typed_vector containing all of the fields in the field_table is returned.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/20/82, from dmu_cv_vector_to_string.
Modified:
05/17/82 by Lindsey Spratt: Changed to use (varying_field_idx > 0) to
	  determine if the field under consideration is a varying string or
	  not.  Also, converted from the field_id_list structure to the
	  id_list structure.
10/19/82 by Lindsey Spratt:  Fixed cv_field to use a parameter to  specify
	  which dimension of the simple_typed_vector is to be used as the
	  target of the conversion.
12/09/82 by Lindsey Spratt:  Fixed handling of varying character strings to
	  interpret the length variable value correctly.
02/04/83 by Lindsey Spratt:  Fixed to deal with varying strings correctly when
	  given an id_list.
02/08/83 by Lindsey Spratt:  Added a new entry point, called "new" which sets
	  the value of simple_typed_vector_ptr to p_simple_typed_vector_ptr
	  rather than always making it null.  Changed the rest of the module
	  to use the passed in simple_typed_vector if there is one.  A new
	  entry point was added so that modules could be converted over to
	  use the new approach (which relies on the caller being very
	  careful about the INPUT value of p_simple_typed_vector_ptr) in a
	  gradual fashion.
03/22/83 by Lindsey Spratt:  Changed to use version 2 field_table.  Changed to
	  check version numbers in the field_table and id_lsit structures.
04/03/83 by Lindsey L. Spratt:  Fixed vs_length to be declared fixed bin (35)
            instead of fixed bin (17).
04/03/83 by Lindsey L. Spratt:  Made version check of the id_list structure
            conditional on whether the id_list_ptr is null or not.
04/04/83 by Lindsey L. Spratt:  Fixed the re-use of the
            current_varying_field_bit_index in the non-null id_list case.
06/14/83 by Matthew Pierret:  Changed to leave an empty
            simple_typed_vector.value_ptr entry for each non-positive id in
            the given id_list.  Added a cleanup handler to free an allocated
            simple_typed_vector.  This is incomplete, as the values are not
            also freed.  Added copyright notice.
02/22/84 by Matthew Pierret:  Changed cv_field to two separate routines,
            CV_VARYING_FIELD and CV_NONVARYING_FIELD.  Changed the way fields
            are converted, from using a substr approach to usign an overlay 
            approach, in hopes of enhancing efficiency.  Added a check to
            see if all of the given id_list actually contains all fields in
            the order defined in in field_table.  If so, pretend that no
            id_list was supplied as the conversion of the all fields is
            faster than selected fields.
02/24/84 by Matthew Pierret:  Fixed improper use of addbitno builtin. The 
            number addbitno takes is an offset, but was being used as an index.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
05/03/84 by Matthew Pierret:  Changed to use dm_error_$bad_vector_type instead
            of vd_error_$bad_vector_structure_type.
10/13/84 by Lindsey L. Spratt:  Fixed to set p_code to 0 on entry.  Deleted
            unused variables and changed to pass id_list.version by reference
            in call to CHECK_VERSION, in response to audit comments.
02/04/85 by Lindsey L. Spratt:  Added area condition handler and the
            ERROR_RETURN proc.
*/

/* format: style2,ind3 */

dmu_cv_string_to_vector:
   proc;
      call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	 "^/An invalid entry (dmu_cv_string_to_vector$dmu_cv_string_to_vector) was
invoked.");


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_id_list_ptr	       ptr;
      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_string_length	       fixed bin (35);
      dcl	    p_string_ptr	       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    input_string_ptr       ptr;

      dcl	    id_list_idx	       fixed bin;

      dcl	    old_varying_field_idx  fixed bin (35) init (0);
      dcl	    current_varying_field_idx
			       fixed bin (35) init (0);
      dcl	    field_idx	       fixed bin (17);
      dcl	    current_varying_field_bit_index
			       fixed bin (35);
      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

      dcl	    (addbitno, bin, null)  builtin;

/* Condition */

      dcl	    (area, cleanup)	       condition;

/* Constant */

      dcl	    myname	       init ("dmu_cv_string_to_vector") char (32) varying internal static
			       options (constant);

      dcl	    BITS_PER_BYTE	       init (9) fixed bin (17) int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$area_too_small,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      dcl	    (dm_error_$programming_error)
			       fixed bin (35) ext;
      dcl	    dm_error_$bad_vector_type
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

old:
   entry (p_field_table_ptr, p_work_area_ptr, p_string_ptr, p_string_length, p_id_list_ptr, p_typed_vector_ptr, p_code);
      simple_typed_vector_ptr = null;
      goto JOIN;

new:
   entry (p_field_table_ptr, p_work_area_ptr, p_string_ptr, p_string_length, p_id_list_ptr, p_typed_vector_ptr, p_code);
      simple_typed_vector_ptr = p_typed_vector_ptr;

JOIN:
      p_code = 0;
      input_string_ptr = p_string_ptr;

      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      id_list_ptr = p_id_list_ptr;
      work_area_ptr = p_work_area_ptr;

      current_varying_field_bit_index = field_table.location_of_first_varying_field;

      on area call ERROR_RETURN (error_table_$area_too_small);

      if id_list_ptr ^= null
      then
         do;
	  call CHECK_VERSION (id_list.version, (ID_LIST_VERSION_1), "id_list");

/* See if the id_list actually contains all fields */

	  if id_list.number_of_ids = field_table.number_of_fields
	  then
	     do;
	        do id_list_idx = 1 to id_list.number_of_ids while (id_list_idx = id_list.id (id_list_idx));
	        end;
	        if id_list_idx > id_list.number_of_ids	/* contains all fields in order */
	        then id_list_ptr = null;
	     end;
         end;

      if id_list_ptr = null
      then
         do;
	  if simple_typed_vector_ptr = null
	  then
	     do;
	        on cleanup call FINISH;

	        stv_number_of_dimensions = field_table.number_of_fields;
	        alloc simple_typed_vector in (work_area);
	        simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
	        simple_typed_vector.dimension.value_ptr = null;
	     end;
	  else if simple_typed_vector.type ^= SIMPLE_TYPED_VECTOR_TYPE
	  then call sub_err_ (dm_error_$bad_vector_type, myname, ACTION_CANT_RESTART, null, 0,
		  "^/Expected a ""simple"" typed_vector (type = ^d).
Received instead a typed_vector with type = ^d.", SIMPLE_TYPED_VECTOR_TYPE, simple_typed_vector.type);
	  else if simple_typed_vector.number_of_dimensions < field_table.number_of_fields
	  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/The provided ""simple"" typed_vector has only ^d dimensions, while the 
number of dimensions requested is ^d.", simple_typed_vector.number_of_dimensions, field_table.number_of_fields);


	  do field_idx = 1 to field_table.number_of_fields;
	     if field_table.varying_field_map (field_idx).varying_field_index <= 0
	     then call CV_NONVARYING_FIELD (field_idx, field_idx);
	     else call CV_VARYING_FIELD (field_idx, field_idx, current_varying_field_bit_index);
	  end;
         end;
      else
         do;
	  if simple_typed_vector_ptr = null
	  then
	     do;
	        on cleanup call FINISH;

	        stv_number_of_dimensions = id_list.number_of_ids;
	        alloc simple_typed_vector in (work_area);
	        simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
	        simple_typed_vector.dimension.value_ptr = null;
	     end;
	  else if simple_typed_vector.type ^= SIMPLE_TYPED_VECTOR_TYPE
	  then call sub_err_ (dm_error_$bad_vector_type, myname, ACTION_CANT_RESTART, null, 0,
		  "^/Expected a ""simple"" typed_vector (type = ^d).
Received instead a typed_vector with type = ^d.", SIMPLE_TYPED_VECTOR_TYPE, simple_typed_vector.type);
	  else if simple_typed_vector.number_of_dimensions < id_list.number_of_ids
	  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/The provided ""simple"" typed_vector has only ^d dimensions, while the 
number of dimensions requested is ^d.", simple_typed_vector.number_of_dimensions, id_list.number_of_ids);


	  do id_list_idx = 1 to id_list.number_of_ids;

	     field_idx = id_list.id (id_list_idx);

	     if field_idx >= 1			/* If field_idx < 1, ignore it. */
	     then
	        do;
		 current_varying_field_idx = field_table.varying_field_map (field_idx).varying_field_index;

		 if current_varying_field_idx <= 0
		 then call CV_NONVARYING_FIELD (id_list_idx, field_idx);
		 else
		    do;				/* Current field is varying */
		       if current_varying_field_idx ^= old_varying_field_idx + 1
						/* The current_varying_field_bit_index is not valid for the current field. */
		       then current_varying_field_bit_index = -1;
		       old_varying_field_idx = current_varying_field_idx;

		       call CV_VARYING_FIELD (id_list_idx, field_idx, current_varying_field_bit_index);
		    end;
	        end;
	  end;
         end;


      if p_typed_vector_ptr ^= simple_typed_vector_ptr
      then p_typed_vector_ptr = simple_typed_vector_ptr;

MAIN_RETURN:
      return;
%page;
FINISH:
   proc ();


      if simple_typed_vector_ptr ^= null & simple_typed_vector_ptr ^= p_typed_vector_ptr
      then free simple_typed_vector in (work_area);

/**** Also need to free dimension values. */

   end FINISH;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parm;
      p_code = er_p_code;
      call FINISH ();
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CV_VARYING_FIELD:
   proc (cvf_p_dimension_idx, cvf_p_field_idx, cvf_p_current_varying_field_bit_index);

/* This routine copies the value of a varying field in the input string to
   a stand-alone varying dimension string. The location of the varying field
   in the input string is determined by adding up the lengths of all prior
   varying fields in the input string and the location of the first varying
   field. */

/* Global variables:

   input_string_ptr - points to the input string
   simple_typed_vector - the simple_typed_vector which holds the dimension
                         values to be returned.
   field_table - the field_table describing the fields in the input string.
   work_area - the area in which this program allocates things.
*/

      dcl	    cvf_p_dimension_idx    fixed bin;
      dcl	    cvf_p_field_idx	       fixed bin;
      dcl	    cvf_p_current_varying_field_bit_index
			       fixed bin (35);

      dcl	    cvf_field_idx	       fixed bin;
      dcl	    cvf_current_varying_field_bit_index
			       fixed bin (35);

      dcl	    cvf_varying_field_idx  fixed bin init (0);	/* index into field_table.varying_field_map for each prior varying field */
      dcl	    cvf_temp_field_idx     fixed bin init (0);	/* index into field_table.field for each prior varying field */
      dcl	    cvf_temp_varying_field_length
			       fixed bin (35) init (0);
						/* length of each prior varying field */

      dcl	    cvf_dimension_value_string
			       bit (cvf_dimension_value_length) varying based (cvf_dimension_value_ptr);
						/* Varying bit string which holds converted field value */
      dcl	    cvf_dimension_value_length
			       fixed bin (35) init (0);
      dcl	    cvf_dimension_value_ptr
			       ptr init (null);

      dcl	    cvf_dimension_value_length_overlay
			       fixed bin (35) based (cvf_dimension_value_ptr);
						/* Overlays the length word of the varying dimension_value_string */
						/* This is used to change the length from bit- to character-length*/
      dcl	    cvf_dimension_value_length_in_characters
			       fixed bin (35) init (0);
						/* Saved length of the dimension in characters. */

      dcl	    cvf_field_value_string bit (cvf_dimension_value_length) based (cvf_field_value_ptr);
						/* Non-varying bit string overlay of field in input string */
      dcl	    cvf_field_value_ptr    ptr init (null);

      dcl	    cvf_length_field_string
			       bit (cvf_length_field_length) based (cvf_length_field_ptr);
						/* Bit string overlay of varying field length in input string */
      dcl	    cvf_length_field_length
			       fixed bin (35) init (0);
      dcl	    cvf_length_field_ptr   ptr init (null);

      dcl	    cvf_field_length_is_in_characters
			       bit (1) aligned init ("0"b);



      cvf_field_idx = cvf_p_field_idx;			/* for efficiency */
      cvf_current_varying_field_bit_index = cvf_p_current_varying_field_bit_index;


      if cvf_current_varying_field_bit_index = -1
      then /* Find location of varying field */
         do;
	  cvf_current_varying_field_bit_index = field_table.location_of_first_varying_field;

CVF_LOOP_THROUGH_VARYING_FIELDS:
	  do cvf_varying_field_idx = 1 to field_table.varying_field_map (cvf_field_idx).varying_field_index - 1;

	     cvf_temp_field_idx = field_table.varying_field_map (cvf_varying_field_idx).field_id;
	     cvf_length_field_length = field_table.field (cvf_temp_field_idx).length_in_bits;
	     cvf_length_field_ptr = addbitno (input_string_ptr, field_table.field (cvf_temp_field_idx).location - 1);
	     cvf_temp_varying_field_length = bin (cvf_length_field_string, 35, 0);

	     if field_table.field (cvf_temp_field_idx).flags.length_is_in_characters
	     then cvf_temp_varying_field_length = cvf_temp_varying_field_length * BITS_PER_BYTE;

	     cvf_current_varying_field_bit_index = cvf_current_varying_field_bit_index + cvf_temp_varying_field_length;

	  end CVF_LOOP_THROUGH_VARYING_FIELDS;

         end;


/* Set the length of the dimension */

      cvf_length_field_length = field_table.field (cvf_field_idx).length_in_bits;
      cvf_length_field_ptr = addbitno (input_string_ptr, field_table.field (cvf_field_idx).location - 1);
      cvf_dimension_value_length = bin (cvf_length_field_string, 35, 0);

      cvf_field_length_is_in_characters = field_table.field (cvf_field_idx).flags.length_is_in_characters;
      if cvf_field_length_is_in_characters		/* Change character length to bit length */
      then
         do;
	  cvf_dimension_value_length_in_characters = cvf_dimension_value_length;
	  cvf_dimension_value_length = cvf_dimension_value_length * BITS_PER_BYTE;
         end;

/* Set the pointer to the dimension to return */

      cvf_dimension_value_ptr = simple_typed_vector.dimension (cvf_p_dimension_idx).value_ptr;
      if cvf_dimension_value_ptr = null
      then
         do;
	  alloc cvf_dimension_value_string in (work_area);
	  simple_typed_vector.dimension (cvf_p_dimension_idx).value_ptr = cvf_dimension_value_ptr;
         end;

      cvf_field_value_ptr = addbitno (input_string_ptr, cvf_current_varying_field_bit_index - 1);

      cvf_dimension_value_string = cvf_field_value_string;	/* Copy the value */

      if cvf_field_length_is_in_characters
      then cvf_dimension_value_length_overlay = cvf_dimension_value_length_in_characters;

      cvf_p_current_varying_field_bit_index = cvf_current_varying_field_bit_index + cvf_dimension_value_length;
						/* Set return value */

      return;

   end CV_VARYING_FIELD;
%page;
CV_NONVARYING_FIELD:
   proc (cnf_p_dimension_idx, cnf_p_field_idx);

/* This routine copies the value of the cnf_p_field_idx'th field in the
   string into a stand-alone, nonvarying dimension value. */

      dcl	    cnf_p_dimension_idx    fixed bin;
      dcl	    cnf_p_field_idx	       fixed bin;

      dcl	    cnf_field_idx	       fixed bin;		/* Local copy for efficiency */
      dcl	    cnf_field_value_ptr    ptr;
      dcl	    cnf_dimension_value_ptr
			       ptr;
      dcl	    cnf_dimension_value_length
			       fixed bin;		/* Length of dimension value in bits */
      dcl	    cnf_dimension_value_string
			       bit (cnf_dimension_value_length) based (cnf_dimension_value_ptr);

/* Global variables:

   input_string_ptr - points to the input string
   simple_typed_vector - the simple_typed_vector which holds the dimension
                         values to be returned.
   field_table - the field_table describing the fields in the input string.
   work_area - the area in which this program allocates things.
*/

      cnf_field_idx = cnf_p_field_idx;

      cnf_dimension_value_length = field_table.field (cnf_field_idx).length_in_bits;
      cnf_dimension_value_ptr = simple_typed_vector.dimension (cnf_p_dimension_idx).value_ptr;
      if cnf_dimension_value_ptr = null
      then
         do;
	  alloc cnf_dimension_value_string in (work_area);
	  simple_typed_vector.dimension (cnf_p_dimension_idx).value_ptr = cnf_dimension_value_ptr;
         end;

      cnf_field_value_ptr = addbitno (input_string_ptr, field_table.field (cnf_field_idx).location - 1);

      cnf_dimension_value_string = cnf_field_value_ptr -> cnf_dimension_value_string;

      return;

   end CV_NONVARYING_FIELD;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned parameter;
      dcl	    p_expected_version     char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure. Received version ^a.", p_expected_version, p_structure_name,
	      p_received_version);

   end CHECK_VERSION_CHAR;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35) parameter;
      dcl	    p_expected_version     fixed bin (35) parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure. Received version ^d.", p_expected_version, p_structure_name,
	      p_received_version);

   end CHECK_VERSION;
%page;
%include vu_typed_vector;
%page;
%include dm_field_table;
%page;
%include dm_id_list;
%page;
%include sub_err_flags;
   end dmu_cv_string_to_vector;
