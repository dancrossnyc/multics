/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:

         This routine increments each word of a contiguous string of words by
     the  respective  values  in  a caller-supplied array of words.  Given the
     identifier of  an  element  (p_element_id)  in  which  the  words  to  be
     incremented  reside, and the bit-offset from the beginning of the element
     to  the  beginning  of  the  string  of   words,   this   routine   calls
     file_manager_$postcommit_increment  to  do  the actual increment.  If the
     element is a multi-datum element, a separate call for each datum is made.

     The reason for this special entry to increment words  instead  of  having
     the  caller  increment the words and call collection_manager_$modify with
     the updated element is because it is  intended  that  the  words  not  be
     updated   until  the  current  transaction  commits.    Currently
     the  only  user  of  this  routine  is  index_manager_  for  updating its
     key_count_array.

     This           routine           implements           the           entry
     collection_manager_$postcommit_increment.
*/

/* HISTORY:

Written by Matthew C. Pierret, 02/15/85.
Modified:
03/06/85 by R. Michael Tague: Finished implementation.
04/22/85 by R. Michael Tauge: Converted one ERROR_RETURN to use ERROR_SIGNAL,
            Removed es_arg_count and es_code dcl, declared addbitno, divide,
	  and unspec builtins, made version check for CI use CHECK_VERSION
	  instead of a special CHECK_CI_VERSION, and changed ERROR_SIGNAL to
	  use a different mechanism of constructing error strings.
*/

/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Converted one ERROR_RETURN to use ERROR_SIGNAL,
     Removed es_arg_count and es_code dcl, declared addbitno, divide,
     and unspec builtins, made version check for CI use CHECK_VERSION
     instead of a special CHECK_CI_VERSION, and changed ERROR_SIGNAL to
     use a different mechanism of constructing error strings.
  2) change(86-04-22,Pierret), approve(86-04-22,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Removed local_cm_postcommit_info structure and es_message_overlay, using
     instead cm_postcommit_info and substr (es_message, 1, es_message_length),
     respectively.
  3) change(87-01-15,Hergert), approve(87-04-01,MCR7632),
     audit(87-02-02,Dupuis), install(87-04-02,MR12.1-1020):
     For TR phx20754, arranged to keep the element id of the key_count_array so
     that we can use it at postcommit time if necessary. We save it in
     local_fm_increment_info and pass it on to fm_put_.
                                                   END HISTORY COMMENTS */



/* format: style5,^indcomtxt */
cm_postcommit_increment:
        proc (p_file_opening_id, p_collection_id, p_element_id,
	  p_cm_increment_info_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

        dcl     p_file_opening_id	bit (36) aligned;
					      /* opening identifier of file */
        dcl     p_collection_id	bit (36) aligned;
					      /* identifier of collection */
        dcl     p_element_id		bit (36) aligned;
					      /* identifier of element */
        dcl     p_cm_increment_info_ptr ptr;	      /* points to cm_ioncrement_info structure */
        dcl     p_code		fixed bin (35); /* status code */

/* Automatic */

        dcl     code		fixed bin (35);
        dcl     collection_id		bit (36) aligned;
        dcl     file_opening_id	bit (36) aligned;
        dcl     1 local_bci_header	aligned like bci_header;
        dcl     1 local_datum_slot	aligned like datum_slot;
        dcl     1 local_fm_increment_info
				aligned like fm_increment_info;

/* Builtin */

        dcl     (addbitno, addr, divide, null, substr, unspec)
				builtin;

/* Constant */

        dcl     myname		init ("cm_postcommit_increment")
				char (32) varying internal
				static options (constant);

        dcl     BITS_PER_BYTE		fixed bin init (9) internal
				static options (constant);
        dcl     BITS_PER_WORD		fixed bin init (36) internal
				static options (constant);
        dcl     (NO_PAD, NO_NL)	init ("0"b) bit (1) aligned
				internal static options (constant);
        dcl     NOT_CONTINUED		bit (1) init ("0"b) internal
				static options (constant);

/* Entry */

        dcl     cu_$arg_list_ptr	entry (ptr);
        dcl     file_manager_$postcommit_increment
				entry (bit (36) aligned, fixed bin (27),
				ptr, fixed bin (35));
        dcl     ioa_$general_rs	entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned);
        dcl     sub_err_		entry () options (variable);

/* External */

        dcl     dm_error_$ci_not_in_collection
				fixed bin (35) ext;
        dcl     dm_error_$invalid_increment_offset
				fixed bin (35) ext;
        dcl     dm_error_$invalid_increment_words
				fixed bin (35) ext;
        dcl     dm_error_$long_increment_length
				fixed bin (35) ext;
        dcl     dm_error_$programming_error
				fixed bin (35) ext;
        dcl     dm_error_$unimplemented_entry
				fixed bin (35) ext;
        dcl     error_table_$unimplemented_version
				fixed bin (35) ext;

/* END OF DECLARATIONS */

        file_opening_id = p_file_opening_id;
        collection_id = p_collection_id;
        element_id_string = p_element_id;
        cm_increment_info_ptr = p_cm_increment_info_ptr;
        call CHECK_VERSION (cm_increment_info.version,
	  CM_INCREMENT_INFO_VERSION_1, "cm_increment_info");
        unspec (local_fm_increment_info) = ""b;
        local_fm_increment_info.version = FM_INCREMENT_INFO_VERSION_1;

        p_code = 0;
        code = 0;

        unspec (local_bci_header) = ""b;
        unspec (local_datum_slot) = ""b;

        if cm_increment_info.offset_in_bits < 0 then
	      call ERROR_SIGNAL (dm_error_$invalid_increment_offset);
        if cm_increment_info.number_of_words < 1 then
	      call ERROR_SIGNAL (dm_error_$invalid_increment_words);
        call cm_get_bci_header$slot (file_opening_id, addr (local_bci_header),
	  addr (local_datum_slot), element_id_string, code);
        if code ^= 0 then
	      call ERROR_SIGNAL (code);
        else
	      call CHECK_VERSION (local_bci_header.layout_type,
		BASIC_CI_LAYOUT_1, "basic_control_interval");
        if local_bci_header.collection_id ^= collection_id then
	      call ERROR_SIGNAL (dm_error_$ci_not_in_collection);

        if local_datum_slot.flags.is_continued = NOT_CONTINUED then
	      call SINGLE_DATUM (code);
        else
	      call MULTI_DATUM (code);
        call FINISH (code);

MAIN_RETURN:
        return;

%page;
/* *************************************************************************
   * CHECK_VERSION - standard structure version check routine.	     *
   ************************************************************************* */

CHECK_VERSION:
        proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name)
	  ;
        dcl     cv_p_received_version	char (*) aligned;
        dcl     cv_p_expected_version	char (*) aligned;
        dcl     cv_p_structure_name	char (*);

        if cv_p_received_version ^= cv_p_expected_version then
	      call ERROR_SIGNAL (error_table_$unimplemented_version,
		"^/Expected version ^a of the ^a structure.  Received version ^d instead.",
		cv_p_expected_version, cv_p_structure_name,
		cv_p_received_version);

        end CHECK_VERSION;
%page;
/* *************************************************************************
   * ERROR_SIGNAL - This routine calls sub_err_ instead of returning.      *
   ************************************************************************* */

ERROR_SIGNAL:
        proc () options (variable);
        dcl     es_arg_list_ptr	ptr;
        dcl     es_message		char (1024);
        dcl     es_message_length	fixed bin (21);
        dcl     es_based_error_code	fixed bin (35) based;

        call cu_$arg_list_ptr (es_arg_list_ptr);
        if es_arg_list_ptr -> arg_list.arg_count > 0 then
	      do;
	      if es_arg_list_ptr -> arg_list.arg_count > 1 then
		    call ioa_$general_rs (es_arg_list_ptr, 2, 3, es_message,
		        es_message_length, NO_PAD, NO_NL);
	      else
		    es_message_length = 0;
	      call sub_err_ (es_arg_list_ptr -> arg_list.arg_ptrs (1)
		-> es_based_error_code, myname, ACTION_CANT_RESTART, null,
		0, substr (es_message, 1, es_message_length));
	      end;
        else
	      call sub_err_ (dm_error_$programming_error, myname,
		ACTION_CANT_RESTART, null, 0,
		"The ERROR_SIGNAL routine was called without any arguments.")
		;
        end ERROR_SIGNAL;
%page;
/* *************************************************************************
   * FINISH - all exits pass through here.			     *
   ************************************************************************* */

FINISH:
        proc (f_p_code);
        dcl     f_p_code		fixed bin (35);

        p_code = f_p_code;
        end FINISH;
%page;
/* *************************************************************************
   * MULTI_DATUM - This procedure handler the case where an element is     *
   * spread across several datums.  This is not currently implemented.     *
   ************************************************************************* */

MULTI_DATUM:
        proc (md_code);
        dcl     md_code		fixed bin (35);

        md_code = 0;
        call ERROR_SIGNAL (dm_error_$unimplemented_entry,
	  "^/Multi-datum postincrement handlers have not been implemented.");
        end MULTI_DATUM;
%page;
/* *************************************************************************
   * SINGLE_DATUM - This procedure is called when the entire element is    *
   * contained is one datum.  Only one postcommit handler need be set up.  *
   ************************************************************************* */

SINGLE_DATUM:
        proc (sd_code);
        dcl     sd_code		fixed bin (35);
        dcl     sd_ci_num		fixed bin (27);

        sd_code = 0;
        if local_datum_slot.length_in_bits
	  < cm_increment_info.offset_in_bits
	  + cm_increment_info.number_of_words * BITS_PER_WORD then
	      call ERROR_SIGNAL (dm_error_$long_increment_length);

        sd_ci_num = element_id.control_interval_id;
        local_fm_increment_info.offset_in_bytes =
	  local_datum_slot.offset_in_bytes
	  + divide (cm_increment_info.offset_in_bits, BITS_PER_BYTE, 24, 0);
        local_fm_increment_info.increments_ptr =
	  addbitno (cm_increment_info.increments_ptr,
	  cm_increment_info.offset_in_bits);
        local_fm_increment_info.number_of_words =
	  cm_increment_info.number_of_words;
        local_fm_increment_info.element_id = element_id_string;

        call file_manager_$postcommit_increment (file_opening_id, sd_ci_num,
	  addr (local_fm_increment_info), sd_code);
        end SINGLE_DATUM;
%page;
%include arg_list;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_entry_dcls;
%page;
%include dm_cm_increment_info;
%page;
%include dm_element_id;
%page;
%include dm_fm_increment_info;
%page;
%include sub_err_flags;

        end cm_postcommit_increment;
