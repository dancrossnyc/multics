/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */



/* DESCRIPTION

        This module implements collection_manager_$simple_get_by_ci_ptr
   and collection_manager_$simple_get_from_ci_buffer.  The two entries
   behave identically.  Both exist to maintain symmetry of operations.

        This module copies the specified element (identified by
   p_element_id) from the given control interval to the caller's output
   buffer pointed to by p_buffer_ptr.  If the element does not fit in the
   buffer, i.e., the number of bytes required to hold the element is
   greater than the number of whole bytes in p_buffer_length,
   dm_error_$long_return_element is returned in the p_code parameter.
   
        The caller supplies a pointer (p_ci_ptr) to the control interval
   from which the element is to be copied.  This pointer may point to the
   actual control interval in the file or to a buffered copy of the
   control interval.  The former is obtained by calling
   collection_manager_$get_control_interval_pointer, the latter by calling
   collection_manager_$setup_ci_buffer.  The element must be wholely
   contained in the control interval, i.e., the element must be a single
   datum element.
*/

/* HISTORY:
Written by Matthew Pierret, 11/10/83.
   (63rd anniversary of O.S.Pierret's birth)
Modified:
04/13/84 by Matthew Pierret:  Changed name of p_buffered_ci_ptr to
            p_ci_buffer_ptr to conform to documentation.
10/04/84 by Matthew Pierret:  Changed bits-to-bytes calculation to
            bytes = divide (bits + BITS_PER_BYTE -1, BITS_PER_BYTE, 17, 0) from
            bytes = ceil (divide (bits, BITS_PER_BYTE, 35, 18)) as the former
            is more efficient.  Changed name to cm_simple_get_element from
            cm_simple_get_buf_element as it deals with both buffered and
            unbuffered elements.
*/

/* format: style2,ind3 */

cm_simple_get_element:
   proc (p_ci_buffer_ptr, p_collection_id, p_element_id, p_buffer_ptr, p_buffer_length, p_element_length, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_buffer_ptr	       ptr;
      dcl	    p_buffer_length	       fixed bin (35);
      dcl	    p_element_length       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    buffer_length_in_bytes fixed bin (17);
      dcl	    datum_contents_length_in_bytes
			       fixed bin (17);
      dcl	    datum_contents_offset_in_bytes
			       fixed bin (17);
      dcl	    datum_slot_index       fixed bin (17);

      dcl	    buffer_ptr	       ptr;

/* Based */

      dcl	    datum_contents_string  char (datum_contents_length_in_bytes) based;

/* Builtin */

      dcl	    (addcharno, addr, divide, null)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_simple_get_element") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element,
	    dm_error_$unimplemented_ci_version,
	    dm_error_$long_return_element
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;

      datum_slot_index = addr (p_element_id) -> element_id.index;

      basic_control_interval_ptr = p_ci_buffer_ptr;

      if basic_control_interval.header.layout_type ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected a control interval with a layout type of ""^a"";^/received layout ""^a"".", BASIC_CI_LAYOUT_1,
	      basic_control_interval.header.layout_type);

      if basic_control_interval.header.collection_id ^= p_collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);

      buffer_ptr = p_buffer_ptr;
      buffer_length_in_bytes = divide (p_buffer_length, BITS_PER_BYTE, 17, 0);

      datum_contents_offset_in_bytes = basic_control_interval.datum_position_table (datum_slot_index).offset_in_bytes;
      if datum_contents_offset_in_bytes = FREE_SLOT
      then call ERROR_RETURN (dm_error_$no_element);

      datum_contents_length_in_bits = basic_control_interval.datum_position_table (datum_slot_index).length_in_bits;
      if datum_contents_length_in_bits > buffer_length_in_bytes * BITS_PER_BYTE
      then call ERROR_RETURN (dm_error_$long_return_element);

      datum_contents_length_in_bytes = divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

      /*** Copy the datum. */

      buffer_ptr -> datum_contents_string =
	 addcharno (basic_control_interval_ptr, datum_contents_offset_in_bytes) -> datum_contents_string;

      p_element_length = datum_contents_length_in_bits;
RETURN:
      return;
%page;
FINISH:
   proc ();

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_element_id;
%page;
%include sub_err_flags;

   end cm_simple_get_element;
