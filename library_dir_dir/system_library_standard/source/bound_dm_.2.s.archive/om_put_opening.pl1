/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         Puts  an  opening in a table of pointers to opening info structures.
     The info structure should have already been allocated by the callerin the
     area pointed to  by  get_dm_free_area_.    The  argument  p_table_ptr
     should point to a table set up previously by opening_manager_$init.
*/

/* HISTORY:

Written by Matthew Pierret, 07/26/82.
Modified:
08/10/82 by Matthew Pierret:  Changed p_code to fixed bin (35) from (17).
08/11/82 by Matthew Pierret:  Changed to allow "put"-ing an opening that already
            exists.
04/12/83 by Matthew Pierret:  Changed to use OPENING_TABLE_VERSION_2.  This
            version is 0-originned becaused hash_index_ can return a value of
            0.  Also changed to use get_dm_free_area_ to get the pointer to an
            area.
09/01/83 by Lindsey L. Spratt:  Changed to call om_get_opening$hash_index
            instead of hash_index_.
11/07/84 by Stanford S. Cox:  MAIN: Chg to thread bead at top, chg to not modify
            bead if it exists, moved ALLOCATE_HASH_BEAD inline.
*/

/* format: style2,ind3 */
om_put_opening:
   proc (p_table_ptr, p_id, p_info_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_table_ptr	       ptr parameter;
      dcl	    p_id		       bit (72) aligned parameter;
      dcl	    p_info_ptr	       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    hash_index	       fixed bin (35);
      dcl	    opening_info_ptr       ptr;
      dcl	    opening_id	       bit (72) aligned;
      dcl	    previous_hash_bead_ptr ptr;

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Static */

      dcl	    dm_area_ptr	       ptr int static;

/* Builtin */

      dcl	    (null)	       builtin;

/* Constant */

      dcl	    myname	       char (32) varying init ("om_put_opening") int static options (constant);

/* Entry */

      dcl	    om_get_opening$hash_index
			       entry (bit (72) aligned, fixed bin (35)) returns (fixed bin);
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    sys_info$max_seg_size  ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      opening_id = p_id;
      opening_info_ptr = p_info_ptr;
      opening_table_ptr = p_table_ptr;
      if dm_area_ptr = null ()
      then dm_area_ptr = get_dm_free_area_ ();
      call CHECK_VERSION ("opening_table", opening_table.version, OPENING_TABLE_VERSION_2);

      hash_index = om_get_opening$hash_index (opening_id, opening_table.upper_bound);

      hash_bead_ptr = opening_table.hash_entry_ptr (hash_index);
      previous_hash_bead_ptr = hash_bead_ptr;

      alloc hash_bead in (dm_area);

      hash_bead.key = opening_id;
      hash_bead.info_ptr = opening_info_ptr;
      hash_bead.next_ptr = null ();

      hash_bead.next_ptr = previous_hash_bead_ptr;
      opening_table.hash_entry_ptr (hash_index) = hash_bead_ptr;

      return;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_om_table;
%page;
%include dm_om_hash_bead;
%page;
%include sub_err_flags;

   end om_put_opening;
