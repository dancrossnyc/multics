/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  routine  creates  a  dimension_table  structure.  The name  and
     descriptor for each dimension is gotten  selectively  from  the  supplied
     attribute_info   structure,  with  those  attributes  identified  by  the
     supplied    id_list    structure    being    selected.         If     the
     p_include_element_id_dimension   flag   is  on,  the  last  dimension  is
     constructed with the name "0" and a descriptor for a 'bit  (36)  aligned'
     field.
*/

/* HISTORY:

Written by Matthew Pierret, 08/24/83.
Modified:
11/28/83 by Matthew Pierret:  Changed to interpret id_list.id of -1 as meaning
            the element id.
12/07/84 by Maggie Sharpe:  to correct format and dcls; to change
            the call to CHANGE_VERSION_FB to pass appropriate arg
            by reference instead of value.
*/

/* format: style2,ind3 */

dfu_cv_attr_to_dim_table:
   proc (p_work_area_ptr, p_attribute_info_ptr, p_id_list_ptr, p_add_element_id_dimension, p_dimension_table_ptr);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr;		/*is a pointer to a work area.*/
      dcl	    p_attribute_info_ptr   ptr;		/*is a pointer to an attribute_info structure.*/
      dcl	    p_id_list_ptr	       ptr;		/*is a ponter to an id_list structure.*/
      dcl	    p_add_element_id_dimension
			       bit (1) aligned;	/*if on indicates that the last dimension */
						/* is to be set up as for an element_id.*/
      dcl	    p_dimension_table_ptr  ptr;		/*is a pointer to the dimension_table structure */
						/* created.*/

/* Automatic */

      dcl	    (attribute_idx, dimension_idx)
			       fixed bin (35) init (-1);

/* Based */

      dcl	    p_work_area	       area (10000) based (p_work_area_ptr);

/* Builtin */

      dcl	    (addr, fixed, hbound,
	     null, unspec)	       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dfu_cv_attr_to_dim_table") char (32) varying internal static
			       options (constant);
      dcl	    ELEMENT_ID_ID	       init (-1) fixed bin internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_dimension_table_ptr = null;

      if p_work_area_ptr = null
      then call
	    sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	    "^/The first argument, an area pointer, is null.");
						/* FOR DM_ERROR_UTIL_:

	    dm_error_util_$signal (dm_error_$programming_error, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
	    "^/The first argument, an area pointer, is null.");
*/

      attribute_info_ptr = p_attribute_info_ptr;
      call CHECK_VERSION ((attribute_info.version), (ATTRIBUTE_INFO_VERSION_1), "attribute_info");

      if p_id_list_ptr = null
      then dt_number_of_dimensions = hbound (attribute_info.attribute, 1);
      else
         do;
	  id_list_ptr = p_id_list_ptr;
	  call CHECK_VERSION_FB (id_list.version, (ID_LIST_VERSION_1), "id_list");
	  dt_number_of_dimensions = hbound (id_list.id, 1);
         end;

      if p_add_element_id_dimension
      then dt_number_of_dimensions = dt_number_of_dimensions + 1;

      dt_maximum_dimension_name_length = attribute_info.maximum_attribute_name_length;

      on cleanup call FINISH ();

      alloc dimension_table in (p_work_area);

      do dimension_idx = 1 to hbound (dimension_table.dimension, 1) - fixed (p_add_element_id_dimension);
         if id_list_ptr = null
         then attribute_idx = dimension_idx;
         else if id_list.id (dimension_idx) = ELEMENT_ID_ID
         then call INIT_ELEMENT_ID_DIMENSION (dimension_idx);
         else
	  do;
	     do attribute_idx = 1 to hbound (attribute_info.attribute, 1)
	        while (attribute_idx ^= id_list.id (dimension_idx));
	     end;
	     if attribute_idx > hbound (attribute_info.attribute, 1)
	     then call
		   sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		   "^/The specified attribute id, ^d, is not recorded in attribute_info.", id_list.id (dimension_idx))
		   ;				/* FOR DM_ERROR_UTIL_:

		   dm_error_util_$signal (dm_error_$programming_error, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
		   "^/The specified attribute id, ^d, is not recorded in attribute_info.", id_list.id (dimension_idx))
		   ;
*/
	  end;

         dimension_table.dimension (dimension_idx).name = attribute_info.attribute (attribute_idx).name;
         dimension_table.dimension (dimension_idx).descriptor_ptr =
	  addr (dimension_table.dimension (dimension_idx).descriptor_string);
         dimension_table.dimension (dimension_idx).descriptor_string =
	  attribute_info.attribute (attribute_idx).descriptor;
      end;

      if p_add_element_id_dimension
      then call INIT_ELEMENT_ID_DIMENSION (dimension_idx);

      p_dimension_table_ptr = dimension_table_ptr;

      return;
%page;
FINISH:
   proc ();

      if dimension_table_ptr ^= null
      then if p_dimension_table_ptr = null
	 then free dimension_table;

   end FINISH;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*);
      dcl	    p_expected_version     char (*);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);
						/* FOR DM_ERROR_UTIL_:

	    dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS
	    "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);
*/
   end CHECK_VERSION;



CHECK_VERSION_FB:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
						/* FOR DM_ERROR_UTIL_: 

	    dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS, 
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
*/
   end CHECK_VERSION_FB;
%page;
INIT_ELEMENT_ID_DIMENSION:
   proc (ieid_p_dimension_idx);

      dcl	    ieid_p_dimension_idx   fixed bin (35);

      dimension_table.dimension (ieid_p_dimension_idx).name = "0";
      arg_descriptor_ptr = addr (dimension_table.dimension (ieid_p_dimension_idx).descriptor_string);
      dimension_table.dimension (ieid_p_dimension_idx).descriptor_ptr = arg_descriptor_ptr;
      unspec (arg_descriptor) = "0"b;
      fixed_arg_descriptor.flag = "1"b;
      fixed_arg_descriptor.type = bit_dtype;
      fixed_arg_descriptor.precision = 36;

      return;

%page;	%include arg_descriptor;
%page;	%include std_descriptor_types;
   end INIT_ELEMENT_ID_DIMENSION;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_id_list;
%page;
%include vu_dimension_table;
%page;
%include sub_err_flags;
   end dfu_cv_attr_to_dim_table;
