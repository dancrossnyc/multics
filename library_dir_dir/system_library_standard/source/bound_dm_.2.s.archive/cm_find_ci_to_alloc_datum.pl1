/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This  routine  examines  a number of control intervals attempting to
     find one which has enough free space in which to allocate a  datum  of  a
     given  size.   If no control interval is found, one is allocated and that
     control interval becomes the one inwhich to allocate the datum.

          The caller supplies  the  number  of  bytes  required  to  hold  the
     contents  of  the  datum  and  flags indicating whether a continued_datum
     header, a coninued_continuation_datum header or no header is required.  A
     starting point may be supplied (p_input_ci).  The routine  returns  the
     control  interval found (p_return_ci) and a pointer to the bci_header of
     the control interval (p_bci_header).
*/

/* HISTORY:

Written by Matthew Pierret, 10/27/82.
Modified:
11/19/82 by Lindsey Spratt:  Changed to get the bci_header after allocating a
	  new control interval.
02/02/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Added sub_err_
            call to report problems getting the last CI. Changed to use
            cm_opening_info$get_storage_record instead of getting the storage
            record directly.
07/19/83 by Matthew Pierret: Changed to allow for the space taken up by the
            new datum slot in calculating the available free space.
08/05/83 by Matthew Pierret: Changed to use
            cm_determine_free_space$does_new_datum_fit, which returns a flag
            indicating whether there is enough free space in which to fit the
            new datum, accounting for a possible new slot and datum header.
            Removed the obsolete dm_data_$area_ptr.
05/21/84 by Matthew Pierret: Renamed include file dm_cm_cism_info to
            dm_cism_info.  Added RETURN and ERROR_RETURN procedures. Changed
            to use automatic code variable instead of p_code parameter.
09/26/84 by Matthew Pierret: Renamed RETURN to RETURN_CI.  Changed GET_LAST_CI
            to a function.  Changed CHECK_VERSION_CHAR_4 to CHECK_CI_VERSION.
            Moved all includes out of internal subroutines, making references
            to structures in those subroutines be by explicit pointer
            reference.
*/

/* format: style2,ind3 */

cm_find_ci_to_alloc_datum:
   proc (p_cm_info_ptr, p_datum_contents_length_in_bytes, p_input_ci, p_is_continued, p_is_continuation, p_bci_header_ptr,
        p_return_ci, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_datum_contents_length_in_bytes
			       fixed bin (35) parameter;
      dcl	    p_input_ci	       fixed bin (24) uns parameter;
      dcl	    p_is_continued	       bit (1) aligned parameter;
      dcl	    p_is_continuation      bit (1) aligned parameter;
      dcl	    p_bci_header_ptr       ptr;
      dcl	    p_return_ci	       fixed bin (24) uns parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    (input_ci, last_ci, new_ci)
			       fixed bin (24) uns init (0);
      dcl	    total_free_bytes       fixed bin (35) init (0);
      dcl	    fits_in_ci	       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    (null, unspec)	       builtin;

/* Constant */

      dcl	    myname	       init ("cm_find_ci_to_alloc_datum") char (32) varying internal static
			       options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$misformatted_ci,
	    dm_error_$unimplemented_ci_version,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code, code = 0;
      input_ci = p_input_ci;
      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION ((cm_info.version), (CM_INFO_VERSION_2), "cm_info");

      bci_header_ptr = p_bci_header_ptr;
      if unspec (bci_header) ^= "0"b
      then call CHECK_CI_VERSION (bci_header.layout_type);

      if input_ci ^= 0 | (input_ci = 0 & cm_info.collection_id = HEADER_COLLECTION_ID)
      then
         do;
	  if unspec (bci_header) = "0"b
	  then
	     do;
	        call cm_get_bci_header (cm_info.file_oid, input_ci, bci_header_ptr, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);
	     end;

	  call cm_determine_free_space$does_new_datum_fit (bci_header_ptr, p_datum_contents_length_in_bytes, (0),
	       p_is_continued, p_is_continuation, fits_in_ci, ("0"b), total_free_bytes);

	  if fits_in_ci
	  then call RETURN_CI (input_ci);
         end;

      last_ci = GET_LAST_CI (cm_info_ptr);

      if input_ci ^= last_ci
      then
         do;
	  call cm_get_bci_header (cm_info.file_oid, last_ci, bci_header_ptr, code);
	  if code ^= 0
	  then
	     do;
	        if code = dm_error_$ci_not_allocated | code = dm_error_$misformatted_ci
	        then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
		        "^/This internal inconsistency was encountered attempting to get control^/interval ^d. The storage record for collection ^3bo claims this control^/interval is the last control interval in the collection."
		        , last_ci, cm_info.collection_id);

	        else call ERROR_RETURN (code);
	     end;

	  call cm_determine_free_space$does_new_datum_fit (bci_header_ptr, p_datum_contents_length_in_bytes, (0),
	       p_is_continued, p_is_continuation, fits_in_ci, ("0"b), total_free_bytes);

	  if fits_in_ci
	  then call RETURN_CI (last_ci);
         end;

/***** Still have not found a suitable control interval.  Allocate a new one. */

      call cm_allocate_ci$info (cm_info_ptr, new_ci, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call cm_get_bci_header (cm_info.file_oid, new_ci, bci_header_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      else call RETURN_CI (new_ci);

MAIN_RETURN:
      return;


RETURN_CI:
   proc (rc_p_return_ci);

      dcl	    rc_p_return_ci	       fixed bin (24) uns;

      p_return_ci = rc_p_return_ci;
      go to MAIN_RETURN;

   end RETURN_CI;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_given_version, cv_p_correct_version, cv_p_structure_name);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of ^a structure; received ^8a.", cv_p_correct_version, cv_p_structure_name,
	      cv_p_given_version);

      return;

   end CHECK_VERSION;


CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a control interval; received ^a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
GET_LAST_CI:
   proc (glc_p_cm_info_ptr) returns (fixed bin (24) uns);

      dcl	    glc_p_cm_info_ptr      ptr;
      dcl	    glc_collection_header_ptr
			       ptr;
      dcl	    glc_code	       fixed bin (35);

      glc_collection_header_ptr = glc_p_cm_info_ptr -> cm_info.header_ptr;
      call CHECK_VERSION (glc_collection_header_ptr -> collection_header.version, COLLECTION_HEADER_VERSION_2,
	 "collection_header");

      if glc_p_cm_info_ptr -> cm_info.storage_record_ptr = null ()
      then
         do;
	  glc_code = 0;
	  call cm_opening_info$get_storage_record (glc_p_cm_info_ptr, glc_code);
	  if glc_code ^= 0
	  then call ERROR_RETURN (glc_code);
         end;

      if glc_collection_header_ptr -> collection_header.control_interval_storage_method
	 = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
      then return (glc_p_cm_info_ptr -> cm_info.storage_record_ptr -> unblocked_storage_record.last_control_interval);
      else return (glc_p_cm_info_ptr -> cm_info.storage_record_ptr -> blocked_storage_record.last_control_interval);

   end GET_LAST_CI;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_storage_record;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_cism_info;
%page;
%include dm_hdr_collection_id;
%page;
%include sub_err_flags;
%page;
%include dm_cm_entry_dcls;

   end cm_find_ci_to_alloc_datum;
