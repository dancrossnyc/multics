/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
dmu_display_string:
   proc (p_field_table_ptr, p_string_ptr, p_string_length, p_code);

/* DESCRIPTION:

         This  program  takes  as input a field_table and a "data string" and
     displays the data string interpreted according to the field_table.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 05/08/83.
Modified:
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;		/*is a pointer to field_table which is
                                      used to control the display of the data
                                      string.*/
      dcl	    p_string_ptr	       ptr;		/*is a pointer to the data string to be
                                      displayed.*/
      dcl	    p_string_length	       fixed bin (35);	/*is the length of the data string
                                      pointed at by string_ptr.*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system error code.*/

/* Automatic */

      dcl	    field_idx	       fixed bin;
      dcl	    current_varying_field_bit_index
			       fixed bin (35) init (0);

/* Based */
/* Builtin */

      dcl	    (null, substr)	       builtin;

/* Constant */

      dcl	    myname	       init ("dmu_display_string") char (32) varying internal static options (constant);
      dcl	    (
	    BITS_PER_WORD	       init (36),
	    BITS_PER_BYTE	       init (9)
	    )		       fixed bin internal static options (constant);

/* Entry */

      dcl	    ioa_		       entry () options (variable);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

/* END OF DECLARATIONS */

      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION ((field_table.version), (FIELD_TABLE_VERSION_3), "field_table");

      current_varying_field_bit_index = field_table.location_of_first_varying_field;

      call ioa_ ("Id^10tName^/^2xLocation^12tValue");
FIELD_LOOP:
      do field_idx = 1 to field_table.number_of_fields;
         call DISPLAY_FIELD (field_idx, current_varying_field_bit_index);
      end FIELD_LOOP;

      return;
%page;
DISPLAY_FIELD:
   proc (p_field_idx, p_current_varying_field_bit_index);
      dcl	    p_field_idx	       fixed bin;
      dcl	    p_current_varying_field_bit_index
			       fixed bin (35);
      dcl	    vs_length	       fixed bin (35);
      dcl	    (varying_field_idx, temp_field_idx, temp_varying_field_length)
			       fixed bin (35);
      dcl	    based_bit_string       bit (sys_info$max_seg_size * BITS_PER_WORD) based;


      if field_table.varying_field_map (p_field_idx).varying_field_index > 0
      then
VARYING_FIELD:
         do;
	  unspec (vs_length) =
	     copy ("0"b, BITS_PER_WORD - field_table.field (p_field_idx).length_in_bits)
	     ||
	     substr (p_string_ptr -> based_bit_string, field_table.field (p_field_idx).location,
	     field_table.field (p_field_idx).length_in_bits);
	  if field_table.field (p_field_idx).length_is_in_characters
	  then vs_length = vs_length * BITS_PER_BYTE;

	  if p_current_varying_field_bit_index = -1
	  then
	     do;
	        p_current_varying_field_bit_index = field_table.location_of_first_varying_field;
	        do varying_field_idx = 1 to field_table.varying_field_map (p_field_idx).varying_field_index - 1;
		 temp_field_idx = field_table.varying_field_map (varying_field_idx).field_id;
		 unspec (temp_varying_field_length) =
		    copy ("0"b, BITS_PER_WORD - field_table.field (temp_field_idx).length_in_bits)
		    ||
		    substr (p_string_ptr -> based_bit_string, field_table.field (temp_field_idx).location,
		    field_table.field (temp_field_idx).length_in_bits);

		 if field_table.field (temp_field_idx).flags.length_is_in_characters
		 then temp_varying_field_length = temp_varying_field_length * BITS_PER_BYTE;

		 p_current_varying_field_bit_index = p_current_varying_field_bit_index + temp_varying_field_length;
	        end;

	     end;
	  call
	     ioa_ ("(^d)^10t^a^/^2x^d^12t^.3b^/^2x^d^12t^.3b", p_field_idx,
	     substr (field_table.field_names, field_table.field (p_field_idx).location_of_name,
	     field_table.field (p_field_idx).length_of_name), field_table.field (p_field_idx).location,
	     bin (
	     substr (p_string_ptr -> based_bit_string, field_table.field (p_field_idx).location,
	     field_table.field (p_field_idx).length_in_bits)), p_current_varying_field_bit_index,
	     substr (p_string_ptr -> based_bit_string, p_current_varying_field_bit_index, vs_length));

	  p_current_varying_field_bit_index = p_current_varying_field_bit_index + vs_length;
         end VARYING_FIELD;
      else
         do;
	  call
	     ioa_ ("(^d)^10t^a^/^2x^d^12t^.3b", p_field_idx,
	     substr (field_table.field_names, field_table.field (p_field_idx).location_of_name,
	     field_table.field (p_field_idx).length_of_name), field_table.field (p_field_idx).location,
	     bin (
	     substr (p_string_ptr -> based_bit_string, field_table.field (p_field_idx).location,
	     field_table.field (p_field_idx).length_in_bits)));

         end;

   end DISPLAY_FIELD;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*);
      dcl	    p_expected_version     char (*);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include dm_field_table;
   end dmu_display_string;
