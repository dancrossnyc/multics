/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

        This module implements collection_manager_$get_header.  It returns
   to the caller the caller-defined collection header of the specified
   collection (p_collection_id).  The header is returned in the specified
   buffer (p_buffer_ptr, p_buffer_length) if it will fit, or in a newly
   allocated buffer in the specified area (p_area_ptr).
*/

/* HISTORY:
Written by Matthew Pierret, 04/01/82.
Modified:
04/13/82 by Lindsey Spratt: Fixed to set the collmgr_header_ptr. Previously,
	  the collmgr_header_buffer_ptr was being set, but not the
	  collmgr_header_ptr.  The collmgr_header_buffer_ptr is no longer
	  used.
05/20/82 by Matthew Pierret: Changed to use collection_header instead of 
            collmgr_header.collection (), and to call cm_get_collection_header.
08/04/82 by Matthew Pierret: Changed to use bit(36)aligned collection id.
11/04/82 by Matthew Pierret:  Changed to use opening info (cm_info) and
            upgraded to COLLECTION_HEADER_VERSION_2.
01/27/83 by Matthew Pierret:  Upgraded to CM_INFO_VERSION_2. Changed to report
            certain errors attempting to get the header via sub_err_. These
            errors indicate an internal inconsistency.
10/02/84 by Matthew Pierret:  Removed error_table_$unimplemented_version,
               added addr.  Added DESCRIPTION.
12/03/84 by Matthew Pierret:  Changed to use dm_hdr_collection_id.incl.pl1 
            instead of the obsolete cm_cm_header.incl.pl1.
*/

/* format: style2,ind3 */

cm_get_header:
   proc (p_file_opening_id, p_collection_id, p_buffer_ptr, p_buffer_length, p_area_ptr, p_new_buffer_was_allocated,
        p_header_ptr, p_header_length, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_buffer_ptr	       ptr;
      dcl	    p_buffer_length	       fixed bin (17);
      dcl	    p_area_ptr	       ptr;
      dcl	    p_new_buffer_was_allocated
			       bit (1) aligned;
      dcl	    p_header_ptr	       ptr;
      dcl	    p_header_length	       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */
/* Based */
/* Builtin */

      dcl	    (addr, null)	       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_get_header") char (32) varying int static options (constant);
      dcl	    UNINITIALIZED_ELEMENT_ID
			       bit (36) aligned init ("0"b) int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$no_header_record,
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      p_new_buffer_was_allocated = "0"b;

      call cm_opening_info$get (p_file_opening_id, p_collection_id, cm_info_ptr, p_code);
      if p_code ^= 0
      then return;

      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      collection_header_ptr = cm_info.header_ptr;

      call CHECK_VERSION ("collection_header", collection_header.version, COLLECTION_HEADER_VERSION_2);


      if collection_header.header_record_element_id = UNINITIALIZED_ELEMENT_ID
      then
         do;
	  p_code = dm_error_$no_header_record;
	  return;
         end;

      element_id_string = collection_header.header_record_element_id;
      call cm_get_element (cm_info.file_oid, HEADER_COLLECTION_ID, element_id_string, 0, p_buffer_ptr, (p_buffer_length),
	 p_area_ptr, p_new_buffer_was_allocated, p_header_ptr, p_header_length, p_code);

      if p_code ^= 0
      then if p_code = dm_error_$no_element | p_code = dm_error_$ci_not_allocated
	      | p_code = dm_error_$ci_not_in_collection
	 then call sub_err_ (p_code, myname, ACTION_CANT_RESTART, null, 0,
		 "^/An internal inconsistency was encountered attempting to get the user header^/for collection ^3bo at control interval ^d, slot ^d."
		 , p_collection_id, element_id.control_interval_id, element_id.index);

      return;

%page;
CHECK_VERSION:
   proc (p_structure_name, p_given_version, p_correct_version);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_element_id;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_get_header;
