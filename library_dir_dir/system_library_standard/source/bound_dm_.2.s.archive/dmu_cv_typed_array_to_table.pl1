/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
        Given a pointer to a typed vector array, this module builds a
   field_table, allocated in the provided area, by converting the dimension
   descriptions in the dimension_table into field descriptions in the
   field_table.  
   
        A field_table describes how fields are layed out in a record
   string or key string, generically known as data strings.  A data
   string is divided into two parts, the fixed part and the varying
   part.  There is a fixed-size field for each field of the
   record/key in the fixed part, whether the field is varying or
   nonvarying.  These fixed-sized fields are in the order specified
   in typed_vector_array.dimension_table.  These fixed-sized fields
   are aligned according to their data types.
   
        Nonvarying fields are kept in their entirety in their
   corresponding fixed-sized field in the fixed part.  Varying fields
   have the lengths of the varying fields kept in their corresponding
   fixed-sized fileds in the fixed part.  The contents of the varying
   fields are kept in the varying part.
*/

/* HISTORY:
Written by Matthew Pierret 04/05/82.
Modified:
04/14/82 by Lindsey Spratt: Changed the field_table location to be 1-originned
	  instead of 0-originned.  ft_maximum_field_name_length is no longer
	  calculated but is simply set to
	  typed_vector_array.maximum_dimension_name_length.  Also, the
	  descriptor_string based variable was changed from unaligned to
	  aligned.
05/19/82 by Lindsey Spratt: Changed to always set the
	  location_of_first_varying_field to reflect the length of the fixed
	  portion of the data string, whether or not there are any varying
	  fields.
03/22/83 by Lindsey Spratt:  Changed to use version 2 of the field_table 
	  structure.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3, which includes
            laying out the field names in a single string at the end of the
            structure (field_names).  Also changed to align fields within the
            data string.
09/12/84 by Matthew C. Pierret:  Changed the SET_FIELD_LOCATIONS loop to set
            the location after calculating what the location should be,
            instead of before.  Upper-cased the internal subroutine names and
            added a prefix before each variable local to an internal
            subroutine.  Changed the format style from style2,ind3, so
            reformat before comparing with the old version.
*/

/* format: style2,ind3 */
/* format: ll79,comcol50,indcomtxt,^indnoniterdo,indnoniterend */

dmu_cv_typed_array_to_table:
   proc (p_typed_vector_array_ptr, p_area_ptr, p_field_table_ptr,
        p_maximum_record_length, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_area_ptr	       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_field_table_ptr      ptr;
      dcl	    p_maximum_record_length
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    alignment	       fixed bin;
      dcl	    bits_past_alignment_boundary
			       fixed bin;
      dcl	    dimension_idx	       fixed bin;
      dcl	    field_idx	       fixed bin;
      dcl	    location_of_next_field fixed bin (35);
      dcl	    varying_field_portion_length
			       fixed bin (35);
      dcl	    field_length_in_bits   fixed bin (35);
      dcl	    position_in_varying_fields
			       fixed bin;
      dcl	    area_ptr	       ptr;

/* Based */

      dcl	    area		       area (sys_info$max_seg_size)
			       based (area_ptr);
      dcl	    descriptor_string      aligned bit (36) based;

/* Builtin */

      dcl	    (hbound, null, length, string, addr)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("dmu_cv_typed_array_to_table")
			       char (32) varying int static
			       options (constant);
      dcl	    MAXIMUM_LENGTH_HELD_IN_ONE_BYTE
			       fixed bin (35) int static
			       options (constant)
			       init (511 /* 2 ** 9 - 1 */);
      dcl	    MAXIMUM_LENGTH_HELD_IN_TWO_BYTES
			       fixed bin (35) int static
			       options (constant)
			       init (262143511 /* 2 ** 18 - 1 */);
      dcl	    ONE_BYTE	       fixed bin int static
			       options (constant) init (9);
      dcl	    TWO_BYTES	       fixed bin int static
			       options (constant) init (18);
      dcl	    FOUR_BYTES	       fixed bin int static
			       options (constant) init (36);

/* Entry */

      dcl	    sub_err_	       entry options (variable);
      dcl	    dmu_get_data_bit_length$alignment
			       entry (bit (36) aligned, fixed bin (35),
			       fixed bin (17), fixed bin (35));

/* External */

      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* END OF DECLARATIONS */

      typed_vector_array_ptr = p_typed_vector_array_ptr;
      area_ptr = p_area_ptr;
      p_code = 0;

      if typed_vector_array.version ^= TYPED_VECTOR_ARRAY_VERSION_2
      then call sub_err_ (error_table_$unimplemented_version, myname,
	      ACTION_CANT_RESTART, null, 0,
	      "^/Expecting version ^d of the typed_vector_array structure, received version ^d."
	      , TYPED_VECTOR_ARRAY_VERSION_2, typed_vector_array.version);

      ft_number_of_fields = typed_vector_array.number_of_dimensions;
      ft_length_of_field_names = 0;
SET_LENGTH_OF_FIELD_NAMES:
      do field_idx = 1 to ft_number_of_fields;
         ft_length_of_field_names =
	    ft_length_of_field_names
	    +
	    length (
	    rtrim (typed_vector_array.dimension_table (field_idx).name));
      end SET_LENGTH_OF_FIELD_NAMES;

      alloc field_table in (area);
      field_table.field_names = "";

SET_NAME_AND_DESCRIPTOR:
      do field_idx = 1 to field_table.number_of_fields;
         field_table.field (field_idx).location_of_name =
	    length (rtrim (field_table.field_names)) + 1;
         field_table.field (field_idx).length_of_name =
	    length (
	    rtrim (typed_vector_array.dimension_table (field_idx).name));
         field_table.field_names =
	    rtrim (field_table.field_names)
	    || rtrim (typed_vector_array.dimension_table (field_idx).name);

         field_table.field (field_idx).descriptor =
	    typed_vector_array.dimension_table (field_idx).descriptor_ptr
	    -> descriptor_string;
         string (field_table.field (field_idx).flags) = "0"b;
      end SET_NAME_AND_DESCRIPTOR;

      position_in_varying_fields = 0;
SETUP_VARYING_FIELD_MAP:
      do field_idx = 1 to hbound (field_table.field, 1);
         if FIELD_IS_VARYING (field_table.field (field_idx).descriptor)
         then
	  do;
	  field_table.field (field_idx).flags.length_is_in_characters =
	       FIELD_IS_CHARACTER_VARYING (field_table.field (field_idx)
	       .descriptor);
	  position_in_varying_fields = position_in_varying_fields + 1;
	  field_table.varying_field_map (position_in_varying_fields)
	       .field_id = field_idx;
	  field_table.varying_field_map (field_idx).varying_field_index =
	       position_in_varying_fields;
	  end;
      end SETUP_VARYING_FIELD_MAP;

      location_of_next_field = 1;
      varying_field_portion_length = 0;
SET_FIELD_LOCATIONS:
      do field_idx = 1 to hbound (field_table.field, 1);
         call dmu_get_data_bit_length$alignment (field_table.field (field_idx)
	    .descriptor, field_length_in_bits, alignment, code);
         if code ^= 0
         then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	         "^/Could not get bit-length of filed with descriptor ^3bo.",
	         field_table.field (field_idx).descriptor);

         bits_past_alignment_boundary =
	    mod (location_of_next_field - 1, alignment);
         if bits_past_alignment_boundary > 0
         then location_of_next_field =
	         location_of_next_field + alignment
	         - bits_past_alignment_boundary;

         if field_table.varying_field_map (field_idx).varying_field_index = 0
         then field_table.field (field_idx).length_in_bits =
	         field_length_in_bits;
         else
	  do;
	  if field_length_in_bits < MAXIMUM_LENGTH_HELD_IN_ONE_BYTE
	  then field_table.field (field_idx).length_in_bits = ONE_BYTE;
	  else if field_length_in_bits < MAXIMUM_LENGTH_HELD_IN_TWO_BYTES
	  then field_table.field (field_idx).length_in_bits = TWO_BYTES;
	  else field_table.field (field_idx).length_in_bits = FOUR_BYTES;

	  varying_field_portion_length =
	       varying_field_portion_length + field_length_in_bits;
	  end;
         field_table.field (field_idx).location = location_of_next_field;
         location_of_next_field =
	    location_of_next_field
	    + field_table.field (field_idx).length_in_bits;

      end SET_FIELD_LOCATIONS;
      field_table.location_of_first_varying_field = location_of_next_field;

      p_field_table_ptr = field_table_ptr;
      p_maximum_record_length =
	 location_of_next_field + varying_field_portion_length;

      return;
%page;
FIELD_IS_VARYING:
   proc (fiv_p_descriptor_string) returns (bit (1) aligned);

      dcl	    fiv_p_descriptor_string
			       bit (36) aligned;
      dcl	    1 fiv_descriptor_type  unal
			       based (addr (fiv_p_descriptor_string)),
	      2 unused1	       bit (1) unal,
	      2 type	       fixed bin (6) unsigned unal,
	      2 unused2	       bit (29) unal;
      dcl	    BIT_VARYING	       fixed bin (6) unsigned init (20);
      dcl	    CHAR_VARYING	       fixed bin (6) init (22);

      if fiv_descriptor_type.type = BIT_VARYING
	 | fiv_descriptor_type.type = CHAR_VARYING
      then return ("1"b);
      else return ("0"b);

   end FIELD_IS_VARYING;
%page;
FIELD_IS_CHARACTER_VARYING:
   proc (ficv_p_descriptor_string) returns (bit (1) aligned);

      dcl	    ficv_p_descriptor_string
			       bit (36) aligned;
      dcl	    1 ficv_descriptor_type unal
			       based (addr (ficv_p_descriptor_string)),
	      2 unused1	       bit (1) unal,
	      2 type	       fixed bin (6) unsigned unal,
	      2 unused2	       bit (29) unal;
      dcl	    BIT_VARYING	       fixed bin (6) unsigned init (20);
      dcl	    CHAR_VARYING	       fixed bin (6) init (22);

      if ficv_descriptor_type.type = CHAR_VARYING
      then return ("1"b);
      else return ("0"b);

   end FIELD_IS_CHARACTER_VARYING;
%page;
%include vu_typed_vector_array;
%page;
%include dm_field_table;
%page;
%include sub_err_flags;
   end dmu_cv_typed_array_to_table;
