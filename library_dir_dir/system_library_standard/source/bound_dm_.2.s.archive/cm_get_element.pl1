/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

   This module implements collection_manager_$get 
   (cm_get_element$cm_get_element), collection_manager_$get_exclusive
   (cm_get_element$exclusive) and collection_manager_$get_by_ci_ptr
   (cm_get_element$by_ci_ptr);

   This module gets the specified element.  The location of the element
   is p_position elements from p_element_id.  The data is returned in the
   buffer located at p_buffer_ptr (if it fits).  p_buffer_length is the
   bit length of that caller-supplied buffer.  If the buffer is too small
   to hold the data, space is allocated in the provided area and the 
   data is returned there.
*/

/* HISTORY:

Written 02/25/82 by Matthew Pierret.
Modified:
03/23/82 by Matthew Pierret: Changed to return dm_error_$invalid_element_id
            if given a slot index of less-than 1.
03/25/82 by Matthew Pierret: Fixed bug which improperly set p_element_ptr/length.
04/07/82 by Matthew Pierret: Changed p_buffer_length to be a bit length.
05/10/82 by Lindsey Spratt: Use the precision and scale of (35,18) when
	  dividing to find the length in bytes from the length in bits.
	  Also, subtract the datum header length when setting the returned
	  element_length.
06/09/82 by Matthew Pierret: Added code to support getting element portions
            if portion_beginning_index is equal to 1. Added consistency check
            to make sure that the control interval in which the element resides
            belongs to the specified collection. 
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl.pl1,
            add_ci_part to cm_add_ci_part, ..BYTE_LENGTH to ..LENGTH_IN_BYTES,
            calling sequence of cm_add_ci_part.
07/09/82 by Matthew Pierret: Added exclusive entry. Replaced calls to 
            cm_add_ci_part with in-line code.
09/02/82 by Matthew Pierret:  Added ability to position forward or backward.
            p_element_id is now an input/output parameter, as it is set to the
            id of the element positioned to. 
10/19/82 by Matthew Pierret:  Added check for free datum slot.
            Changed to use dm_error_$no_element.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.
11/08/82 by Matthew Pierret:  Changed to support multi-datum elements.
12/01/82 by Lindsey Spratt: Changed to initialize p_new_buffer_was_allocated
	  to "0"b.  Also, removed the get_element entry name.
01/04/83 by Lindsey Spratt:  Fixed to use a local buffer when getting the
	  first datum of a multi-datum element; also, to return an error
	  code when the supplied buffer is too small, no area was supplied
	  and the element is multi-datum.
01/26/83 by Matthew Pierret: Changed to provide better error reporting.
            Errors encountered getting continuation datums are reported via
            sub_err_, as they represent inconsistencies in the collection's
            data.
02/07/83 by Matthew Pierret: Changed to use cm_get_id$header_return_slot to
            position to an element.  Added the $info* entries.
            Added $bypass_info. This entry is called by cm_opening_info$get.
            It does not attempt to get cm_info. If it did, an infinite loop
            would occur with cm_get_element and cm_opening_info calling each
            repeatedly.
04/03/83 by Lindsey L. Spratt:  Changed length variables to be declared fixed
            bin (35) instead of fixed bin (17).
04/03/83 by Lindsey L. Spratt:  Fixed to use a (71,18) when doing the division
            to set the element_length_in_bytes in the multi-datum case.
04/06/83 by Lindsey L. Spratt:  Fixed multi-datum case to subtract the initial
            datum length from the element_length_in_bytes (which was already
            being decremented for each of the other datums).  Added an error
            check for the multi-datum length inconsistency.
04/29/83 by Matthew Pierret: Changed to use addcharno instead of addr(substr())
            and to use dm_error_$long_return_element.
05/04/83 by Matthew Pierret:  Changed dm_error_$col_is_inconsistent to
            $programming_error.
07/14/83 by Matthew Pierret:  Changed to consider the case of an
            element_id.index of 0 without intended positioning away to be in
            error.  dm_error_$no_element is returned. Changed to allow an
            element_id_string of "0"b if positioning is specified.
10/13/83 by Lindsey L. Spratt:  Changed to not get the opening_info in the get
            or exclusive_get entries.
10/17/83 by Lindsey L. Spratt:  Fixed to properly copy the
            position_from_specified_element value for the NO_INFO_JOIN
            entries.
01/24/84 by Matthew Pierret:  Fixed multi-datum gets to stop inadvertently
            attempting to get two ci parts instead of one by forgetting to
            reset ci_parts.number_of_parts to 1.
02/07/84 by Matthew Pierret:  Changed to make use of the 
            file_manager_$get_ci_ptr operation to reduce the number of calls
            to file_manager_$get.  Added the p_position argument to the
            $bypass_info entry so that it has the same calling sequence as
            $cm_get_element and $exclusive, and removed all other entries.
            A lot of extra code is generated by the compiler when a routine
            has multiple entrypoints with the same arguments in different 
            places.  This is no longer the case for cm_get_element.
03/15/84 by Lindsey L. Spratt:  Fixed MULTI_DATUM_GET to set the
            cd_datum_header.  (Matt and Lee B.  helped)
03/16/84 by Matthew Pierret:  Changed to special case 
            dm_error_$ci_not_allocated when returned from fm_$get_ci_ptr.
05/09/84 by Matthew Pierret:  Changed the buffer used to be even word aligned.
07/18/84 by Matthew Pierret:  Changed to return dm_error_$ci_not_in_collection
            if the error is detected on the first control interval examined,
            but to call sub_err_ on subsequent control intervals.  This is 
            because the former indicates that the caller probably supplied
            the wrong element id, while the latter indicates an inconsistency
            in the collection.
10/01/84 by Matthew Pierret:  Changed for the changes in datum structures
            (they are all based on datum_ptr and datum_contents_length_in_bits)
            Changed expression of converting bits to bytes for efficiency:
            ceil (divide (bits ,BITS_PER_BYTE ,35 ,18)) is better as
            divide (bits + BITS_PER_BYTE -1, BITS_PER_BYTE, 17, 0).
            Added comment to explain why buffer_ptr=null need not be checked
            when determining whether to allocate a new buffer.
12/03/84 by Matthew Pierret:  Added the local cd_datum_header, which was 
            removed from dm_cm_datum.incl.pl1.
*/

/* format: style2,ind3,ll79 */

cm_get_element:
   proc (p_file_opening_id, p_collection_id, p_element_id, p_position,
        p_buffer_ptr, p_buffer_length, p_area_ptr, p_new_buffer_was_allocated,
        p_element_ptr, p_element_length, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_position	       fixed bin (17);
      dcl	    p_buffer_ptr	       ptr;
      dcl	    p_buffer_length	       fixed bin (35);
      dcl	    p_area_ptr	       ptr;
      dcl	    p_new_buffer_was_allocated
			       bit (1) aligned;
      dcl	    p_element_ptr	       ptr;
      dcl	    p_element_length       fixed bin (35);
      dcl	    p_code	       fixed bin (35);
      dcl	    p_input_ci_ptr	       ptr;
      dcl	    p_return_ci_ptr	       ptr;

/* Automatic */

      dcl	    (file_opening_id, collection_id)
			       bit (36) aligned;
      dcl	    (continuation_datum_id_string, continued_datum_id_string)
			       init ("0"b) bit (36) aligned;

      dcl	    code		       fixed bin (35) init (0);
      dcl	    buffer_length_in_bits  fixed bin (35) init (0);
      dcl	    buffer_length_in_double_words
			       fixed bin (17) init (0);
      dcl	    datum_contents_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    element_length_in_bits fixed bin (35) init (0);
      dcl	    element_length_in_bytes
			       fixed bin (35) init (0);
      dcl	    remaining_element_length_in_bytes
			       fixed bin (35) init (0);
      dcl	    position_from_specified_element
			       fixed bin (17) init (0);
						/* This should probably be 35, eventually. */

      dcl	    exclusive_get	       bit (1) aligned init ("0"b);
      dcl	    return_last_used_ci_ptr
			       bit (1) aligned init ("0"b);

      dcl	    ci_ptr	       ptr init (null);
      dcl	    work_area_ptr	       ptr init (null);
      dcl	    buffer_ptr	       ptr init (null);
      dcl	    current_buffer_ptr     ptr init (null);
      dcl	    datum_contents_ptr     ptr init (null);

      dcl	    1 cd_datum_header      aligned like continued_datum.header;

/* Based */

      dcl	    1 continued_datum_id   aligned like datum_id
			       based (addr (continued_datum_id_string));
      dcl	    1 continuation_datum_id
			       aligned like datum_id
			       based (
			       addr (continuation_datum_id_string));
      dcl	    work_area	       area based (work_area_ptr);
      dcl	    buffer	       (buffer_length_in_double_words) fixed
			       bin (71) based (buffer_ptr);
      dcl	    datum_contents_string  char (datum_contents_length_in_bytes)
			       based;

/* Builtin */

      dcl	    (addr, addcharno, ceil, divide, length, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("cm_get_element") char (32)
			       varying internal static
			       options (constant);
      dcl	    (
	    BITS_PER_BYTE	       init (9),
	    BYTES_PER_DOUBLE_WORD  init (8)
	    )		       fixed bin int static options (constant);
      dcl	    (
	    THIS_IS_FIRST_CI_SEEN  init ("1"b),
	    THIS_IS_NOT_FIRST_CI_SEEN
			       init ("0"b)
	    )		       bit (1) aligned internal static
			       options (constant);

/* Entry */

      dcl	    file_manager_$get_ci_ptr
			       entry (bit (36) aligned, fixed bin (27),
			       ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element,
	    dm_error_$long_return_element,
	    dm_error_$programming_error
	    )		       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */
%page;
      exclusive_get = "0"b;
      return_last_used_ci_ptr = "0"b;
      position_from_specified_element = p_position;
      ci_ptr = null ();
      go to JOIN;

exclusive:
   entry (p_file_opening_id, p_collection_id, p_element_id, p_position,
        p_buffer_ptr, p_buffer_length, p_area_ptr, p_new_buffer_was_allocated,
        p_element_ptr, p_element_length, p_code);

      exclusive_get = "1"b;
      return_last_used_ci_ptr = "0"b;
      position_from_specified_element = p_position;
      ci_ptr = null ();
      go to JOIN;


by_ci_ptr:
   entry (p_input_ci_ptr, p_file_opening_id, p_collection_id, p_element_id,
        p_position, p_buffer_ptr, p_buffer_length, p_area_ptr,
        p_new_buffer_was_allocated, p_element_ptr, p_element_length,
        p_return_ci_ptr, p_code);

      exclusive_get = "0"b;
      return_last_used_ci_ptr = "1"b;
      position_from_specified_element = p_position;
      ci_ptr = p_input_ci_ptr;
      go to JOIN;
%page;
JOIN:
      p_code = 0;
      p_new_buffer_was_allocated = "0"b;
      file_opening_id = p_file_opening_id;
      collection_id = p_collection_id;
      element_id_string = p_element_id;
      buffer_ptr = p_buffer_ptr;			/* format: equalind0 */

      if buffer_ptr = null
      then buffer_length_in_bits = -1;			/* no buffer */
      else buffer_length_in_bits = p_buffer_length;

      if position_from_specified_element = 0
      then
         do;
	  if element_id.index <= 0
	  then call ERROR_RETURN (dm_error_$no_element);
	  call GET_CI_PTR (THIS_IS_FIRST_CI_SEEN, file_opening_id,
	       collection_id, (element_id.control_interval_id), ci_ptr);
	  if element_id.index
	       > ci_ptr -> basic_control_interval.header.number_of_datums
	  then call ERROR_RETURN (dm_error_$no_element);
         end;
      else
         do;
	  call cm_get_id$ptr (file_opening_id, collection_id,
	       (element_id_string), position_from_specified_element,
	       (element_id_string = "0"b), ci_ptr, ci_ptr, element_id_string,
	       code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;

      /*** This is the control interval in which the elment to be retrieved lives.
        Return it if it has been requested.  This is done here because ci_ptr may change
        later on if the element is a multi-datum element, but we want to return
        the ptr to the control interval in which the element starts. */

      if return_last_used_ci_ptr
      then p_return_ci_ptr = ci_ptr;

      /*** Copy datum slot into local storage for efficiency. */

      datum_slot_ptr =
	 addr (ci_ptr
	 -> basic_control_interval.datum_position_table (element_id.index));

      /*** If no element corresponds to this datum slot, report to caller that
        the element could not be found. */

      if datum_slot.offset_in_bytes = FREE_SLOT /* no datum here */
	 | datum_slot.flags.is_continuation		/* this datum is not the start of an element */
      then call ERROR_RETURN (dm_error_$no_element);


      if ^datum_slot.flags.is_continued
      then
SIMPLE_GET:
         do;

	  /*** The datum described by datum_slot is the entire element.  Get the datum
in the supplied buffer or in the supplied work area if
the the buffer is not supplied or is too small.
There is no need to check to see if buffer_ptr is null,
as if it is, buffer_length_in_bytes is -1, and so will
always pass the test to see if the buffer is to small.. */

	  datum_contents_ptr =
	       addcharno (ci_ptr, datum_slot.offset_in_bytes);
	  datum_contents_length_in_bytes =
	       divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1,
	       BITS_PER_BYTE, 17, 0);

	  if datum_contents_length_in_bytes * BITS_PER_BYTE
	       > buffer_length_in_bits		/* datum_contents_length_in_bytes * BITS_PER_BYTE is used */
						/* in this test instead of datum_slot.length_in_bits      */
						/* because the buffer must be large enough to fit the     */
						/* contents when copied in bytes.                         */
	  then
SG_ALLOC_BUFFER:
	     do;					/* Buffer is too small. Try allocating a buffer in the work area. */
	        work_area_ptr = p_area_ptr;
	        if work_area_ptr = null
	        then
		 do;
		    p_element_length =
		         datum_contents_length_in_bytes * BITS_PER_BYTE;
						/* Not the actual length of the element, but the minimum */
						/* size a buffer must be to hold the element. */
		    call ERROR_RETURN (dm_error_$long_return_element);
		 end;
	        else
		 do;				/* Allocate the buffer. */
		    buffer_length_in_double_words =
		         divide (datum_contents_length_in_bytes,
		         BYTES_PER_DOUBLE_WORD, 35, 0) + 1;
		    on cleanup call FINISH ();
		    alloc buffer in (work_area);
		    p_new_buffer_was_allocated = "1"b;
		 end;
	     end SG_ALLOC_BUFFER;

	  /*** Now, copy the datum contents into the buffer. */

	  buffer_ptr -> datum_contents_string =
	       datum_contents_ptr -> datum_contents_string;

	  p_element_ptr = buffer_ptr;
	  p_element_length = datum_slot.length_in_bits;

         end SIMPLE_GET;

      else call MULTI_DATUM_GET ();			/* The element consists of more than one datum. */

      if p_element_id ^= element_id_string
      then p_element_id = element_id_string;

RETURN:
      return;
%page;
FINISH:
   proc ();

      if buffer_ptr ^= p_buffer_ptr & buffer_ptr ^= null
      then
         do;
	  p_new_buffer_was_allocated = "0"b;
	  free buffer in (work_area);
         end;

   end FINISH;

ERROR_RETURN:
   proc (er_code);

      dcl	    er_code	       fixed bin (35);

      p_code = er_code;
      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_LAYOUT:
   proc (ccl_p_ci_layout);
      dcl	    ccl_p_ci_layout	       char (4) aligned;

      if ccl_p_ci_layout ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (error_table_$unimplemented_version, myname,
	      ACTION_CANT_RESTART, null, 0,
	      "^/Expected a version ^a control interval. Received version ^a instead."
	      , BASIC_CI_LAYOUT_1, ccl_p_ci_layout);

   end CHECK_CI_LAYOUT;
%page;
GET_CI_PTR:
   proc (gcp_p_this_is_initial_ci, gcp_p_foid, gcp_p_collection_id,
        gcp_p_ci_id, gcp_p_ci_ptr);

      dcl	    gcp_p_this_is_initial_ci
			       bit (1) aligned;
      dcl	    gcp_p_foid	       bit (36) aligned;
      dcl	    gcp_p_collection_id    bit (36) aligned;
      dcl	    gcp_p_ci_id	       fixed bin (24) unsigned;
      dcl	    gcp_p_ci_ptr	       ptr;

      if gcp_p_this_is_initial_ci = THIS_IS_FIRST_CI_SEEN
      then
         do;
	  if gcp_p_ci_ptr = null ()
	  then gcp_p_ci_ptr = REALLY_GET_CI_PTR (gcp_p_this_is_initial_ci);
	  else /* gcp_p_ci_ptr = gcp_p_ci_ptr */
	       ;
         end;
      else
         do;
	  if gcp_p_ci_ptr = null
	  then call sub_err_ (dm_error_$programming_error, myname,
		  ACTION_CANT_RESTART, null (), 0, "^/^a ^d ^a,^/^a",
		  "Control interval", gcp_p_ci_id,
		  "was not the first one examined",
		  "yet there is no previous control interval.");
	  else gcp_p_ci_ptr = REALLY_GET_CI_PTR (gcp_p_this_is_initial_ci);
         end;

      call CHECK_CI_LAYOUT ((gcp_p_ci_ptr -> bci_header.layout_type));

      if gcp_p_ci_ptr -> bci_header.collection_id ^= gcp_p_collection_id
      then if gcp_p_this_is_initial_ci
	 then call ERROR_RETURN (dm_error_$ci_not_in_collection);
	 else call sub_err_ (dm_error_$programming_error, myname,
		 ACTION_CANT_RESTART, null, 0,
		 "^/^a ^d ^a ^3bo ^a^/^a ^3bo.", "Control interval",
		 gcp_p_ci_id, "is in collection",
		 gcp_p_ci_ptr -> bci_header.collection_id,
		 "but was expected to", "be in collection",
		 gcp_p_collection_id);
      else return;

REALLY_GET_CI_PTR:
   proc (rgcp_p_is_initial_ci) returns (ptr);

      dcl	    rgcp_p_is_initial_ci   bit (1) aligned;
      dcl	    rgcp_ci_ptr	       ptr init (null ());
      dcl	    rgcp_code	       fixed bin (35) init (0);

      call file_manager_$get_ci_ptr (gcp_p_foid, (gcp_p_ci_id), rgcp_ci_ptr,
	 rgcp_code);
      if rgcp_code ^= 0
      then if rgcp_code ^= dm_error_$ci_not_allocated
	 then call ERROR_RETURN (rgcp_code);
	 else if rgcp_p_is_initial_ci = THIS_IS_FIRST_CI_SEEN
	 then call ERROR_RETURN (dm_error_$no_element);	/* First datum of element. */
						/* No CI means no element. */
	 else
	    do;					/* Is a continuation datum. */
						/* No CI means improperly formed continued datum. */
	       call sub_err_ (rgcp_code, myname, ACTION_CANT_RESTART, null,
		  0,
		  "^/Control interval ^d was expected to hold the continuation of ^/the datum at slot ^d of control interval ^d."
		  , gcp_p_ci_id, continued_datum_id.index,
		  continued_datum_id.control_interval_id);
	    end;
      else return (rgcp_ci_ptr);


   end REALLY_GET_CI_PTR;

   end GET_CI_PTR;
%page;
MULTI_DATUM_GET:
   proc ();


      /*** The datum is by definition a "continued" datum, described by the
        continued_datum structure.  Set a pointer to the beginning of that structure,
        extract header information and datum contents from it. */

      datum_ptr = addcharno (ci_ptr, datum_slot.offset_in_bytes);
						/* Points to beginning of continued_datum. */
      datum_contents_length_in_bits =
	 datum_slot.length_in_bits - CD_DATUM_HEADER_LENGTH_IN_BITS;
      datum_contents_ptr = addr (continued_datum.contents);
      datum_contents_length_in_bytes =
	 divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1,
	 BITS_PER_BYTE, 17, 0);

      element_length_in_bits = continued_datum.header.full_length;
						/* Full length of element. */
      element_length_in_bytes =
	 divide (element_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE,
	 35, 0);

      if element_length_in_bytes * BITS_PER_BYTE > buffer_length_in_bits
						/* element_length_in_bytes * BITS_PER_BYTE is used in this        */
						/* test instead of datum_slot.length_in_bits because the buffer   */
						/* must be large enough to fit the contents when copied in bytes. */
      then
MG_ALLOC_BUFFER:
         do;					/* Buffer is too small. Try allocating a buffer in the work area. */
	  work_area_ptr = p_area_ptr;
	  if work_area_ptr = null
	  then
	     do;
	        p_element_length = element_length_in_bytes * BITS_PER_BYTE;
						/* Not the actual length of the element, but the minimum size a  */
						/* buffer must be to hold the element. */
	        call ERROR_RETURN (dm_error_$long_return_element);
	     end;
	  else
	     do;					/* Allocate the buffer. */
	        buffer_length_in_double_words =
		   divide (element_length_in_bytes, BYTES_PER_DOUBLE_WORD,
		   17, 0) + 1;
	        on cleanup call FINISH ();
	        alloc buffer in (work_area);
	        p_new_buffer_was_allocated = "1"b;
	     end;
         end MG_ALLOC_BUFFER;

      if datum_contents_length_in_bytes <= 0
      then
         do;
	  current_buffer_ptr = buffer_ptr;
	  remaining_element_length_in_bytes = element_length_in_bytes;
         end;
      else
         do;
	  buffer_ptr -> datum_contents_string =
	       datum_contents_ptr -> datum_contents_string;
	  current_buffer_ptr =
	       addcharno (buffer_ptr, datum_contents_length_in_bytes);
	  remaining_element_length_in_bytes =
	       element_length_in_bytes - datum_contents_length_in_bytes;
						/* This is to indicate how much is left to be gotten. */
         end;

      continued_datum_id_string = element_id_string;	/* datum id of the continued datum, i.e., the the datum most recently */
						/* copied.  The element is continued in another datum. */
      cd_datum_header = continued_datum.header;

      continuation_datum_id = cd_datum_header.continuation; /* datum id of the datum which is the continuation of the continued datum. */

GET_EACH_DATUM_LOOP:
      do while (continuation_datum_id_string ^= "0"b
	 & remaining_element_length_in_bytes > 0);

         call GET_CI_PTR (THIS_IS_NOT_FIRST_CI_SEEN, file_opening_id,
	    collection_id, (continuation_datum_id.control_interval_id),
	    ci_ptr);

         if continuation_datum_id.index
	    > ci_ptr -> basic_control_interval.header.number_of_datums
         then call sub_err_ (dm_error_$programming_error, myname,
	         ACTION_CANT_RESTART, null, 0,
	         "^/There is no datum at slot ^d of control interval ^d.  A continuation^/of the datum at slot ^d of control interval ^d was expected to be there."
	         , continuation_datum_id.index,
	         continuation_datum_id.control_interval_id,
	         continued_datum_id.index,
	         continued_datum_id.control_interval_id);

         datum_slot_ptr =
	    addr (ci_ptr
	    -> basic_control_interval
	    .datum_position_table (continuation_datum_id.index));
         datum_ptr = addcharno (ci_ptr, datum_slot.offset_in_bytes);
         if datum_slot.is_continued
         then
	  do;
	     datum_contents_length_in_bits =
		datum_slot.length_in_bits
		- length (unspec (continued_continuation_datum.header));
	     datum_contents_length_in_bytes =
		divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1,
		BITS_PER_BYTE, 17, 0);
	     datum_contents_ptr =
		addr (continued_continuation_datum.contents);

	     continued_datum_id_string = continuation_datum_id_string;
	     continuation_datum_id =
		continued_continuation_datum.header.continuation;
	  end;
         else
	  do;
	     datum_contents_length_in_bytes =
		divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1,
		BITS_PER_BYTE, 17, 0);
	     datum_contents_ptr = addr (continuation_datum.contents);
	     continuation_datum_id_string = "0"b;
	  end;

         current_buffer_ptr -> datum_contents_string =
	    datum_contents_ptr -> datum_contents_string;

         current_buffer_ptr =
	    addcharno (current_buffer_ptr, datum_contents_length_in_bytes);

         remaining_element_length_in_bytes =
	    remaining_element_length_in_bytes
	    - datum_contents_length_in_bytes;

      end GET_EACH_DATUM_LOOP;

      if remaining_element_length_in_bytes > 0
      then call sub_err_ (dm_error_$programming_error, myname,
	      ACTION_CANT_RESTART, null, 0,
	      "^/The length of the element at slot ^d of control interval ^d is^/recorded as ^d bits.  The actual length is ^d bits."
	      , element_id.index, element_id.control_interval_id,
	      element_length_in_bits,
	      (element_length_in_bits
	      - remaining_element_length_in_bytes * BITS_PER_BYTE));

      p_element_ptr = buffer_ptr;
      p_element_length = cd_datum_header.full_length;

   end MULTI_DATUM_GET;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_element_id;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_get_element;
