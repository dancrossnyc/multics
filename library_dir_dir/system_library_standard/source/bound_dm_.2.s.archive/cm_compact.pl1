/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/* DESCRIPTION:

   Given the identifier of a control interval (in p_element_id) or a pointer
   to a copy of a control interval (p_ci_buffer_ptr), re-arrange the contents
   of the control interval so as to maximize the amount of contiguous space in
   the free pool, or un-used portion, between the header and slots on one side
   and the used portion (where each datum is stored).  The non-buffered
   entries must first get the contents of the control interval in a local
   buffer (old_ci), compact the contents of the control interval into another
   local buffer (new_ci), and finally put the new contents back into the file.
   The buffered entries are given a pointer to a buffered control interval
   from which to work.  On input, this control interval buffer contains the
   contents of the control interval to be compacted; on output, it contains
   the new, compacted contents of the control interval.  Therefore, the
   buffered entries must first copy the contents of the control interval
   buffer into a local buffer (old_ci), then compact the contents back into
   the supplied control interval buffer.  The file is not actually updated by
   the buffered entries.
   
        The caller specified the number of datum slots (p_number_of_slots) the
   control interval is to have after the compaction.  This allows the caller
   to specify more slots than are in the old control interval.
   
        The replacement entries do not retain the contents of the datum
   specified by p_element_id, but do retain the datum's slot.  This is used
   when modifying a datum to a size larger than its previous size and larger
   than can fit in the current free pool.  One wants the contents, which will
   be changed, to be removed by the compaction, to be replaced later with the
   new contents.  The non-replacement entries retain each datum.
   
        If p_basic_control_interval_header_ptr (only in the non-buffered
   entries) is non-null, it points to a buffer maintained by the caller in
   which to but the contents of the control interval header after the
   compaction.  The caller may need some of the information in that header.
*/

/* HISTORY:
Written by Matthew Pierret 06/15/82.
     (Mostly copied from cm_compact_and_add.pl1)
Modified:
09/21/82 by Lindsey Spratt:  Added the replacement entry.  This entry is used
	  to reclaim them the storage associated with the p_element_id'th
	  slot, rather than create a new slot a p_element_id.  It is called
	  by cm_put_element.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.
11/03/82 by Matthew Pierret:  Converted to use the BASIC_CI_LAYOUT_1, which
            has flags in the datum slots.
11/23/82 by Matthew Pierret:  Added initialization of new_control_interval_buffer
            improper initialization was allowing stack garbage to find its way
            into the datum slot flags.  Also fully qualified all references
            to basic_control_interval with one of new_ci_ptr and old_ci_ptr.
01/07/83 by Matthew Pierret:  Added $buffered & $buffered_replacement entries.
02/03/83 by Matthew Pierret:  Changed to check CI version for $buffered*
01/13/84 by Matthew Pierret:  Added check to make sure that slots are not
            inserted in past the end of the new CI's datum_position_table.
09/26/84 by Matthew Pierret:  Beefed up DESCRIPTION section.  Removed un-used
            variables. Removed BEGIN_BLOCK, instead declaring the control
            interval buffers in the main procedure. Changed to use 
            file_manager_$simple_(get put), thus removing the ci_parts
            structure.
*/


/****^  HISTORY COMMENTS:
  1) change(89-05-10,Dupuis), approve(89-06-06,MCR8112),
     audit(89-06-07,Farley), install(89-06-09,MR12.3-1054):
     Fixed a bug in the compaction algorithm where it was clobbering free
     slots because a loop counter wasn't being updated.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */

cm_compact:
   proc (p_file_opening_id, p_number_of_slots, p_element_id, p_basic_control_interval_header_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_number_of_slots      fixed bin;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_basic_control_interval_header_ptr
			       ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    ci_length_in_bytes     fixed bin (21);
      dcl	    datum_length_in_bytes  fixed bin (17);
      dcl	    old_datum_offset       fixed bin;
      dcl	    new_datum_offset       fixed bin;
      dcl	    old_slot_idx	       fixed bin init (-1);
      dcl	    new_slot_idx	       fixed bin init (-1);
      dcl	    new_ci_ptr	       ptr;
      dcl	    old_ci_ptr	       ptr;
      dcl	    (is_buffered, is_replacement)
			       bit (1) aligned;

      dcl	    new_ci	       (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES / BYTES_PER_DOUBLE_WORD) fixed
			       bin (71);
      dcl	    old_ci	       (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES / BYTES_PER_DOUBLE_WORD) fixed
			       bin (71);

/* Based */

      dcl	    based_ci	       char (ci_length_in_bytes) based;

/* Builtin */

      dcl	    (addr, ceil, divide, hbound, null, string, substr, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_compact") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    BYTES_PER_DOUBLE_WORD  fixed bin init (8) int static options (constant);
      dcl	    START_OF_CI_OFFSET     fixed bin (21) init (0) int static options (constant);

/* Entry */

      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    file_manager_$simple_put
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_ci_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      is_buffered = "0"b;
      is_replacement = "0"b;
      go to JOIN;


replacement:
   entry (p_file_opening_id, p_number_of_slots, p_element_id, p_basic_control_interval_header_ptr, p_code);

      is_buffered = "0"b;
      is_replacement = "1"b;
      go to JOIN;

buffered:
   entry (p_ci_buffer_ptr, p_number_of_slots, p_element_id, p_code);

      is_buffered = "1"b;
      is_replacement = "0"b;
      new_ci_ptr = p_ci_buffer_ptr;
      go to JOIN;


buffered_replacement:
   entry (p_ci_buffer_ptr, p_number_of_slots, p_element_id, p_code);

      is_buffered = "1"b;
      is_replacement = "1"b;
      new_ci_ptr = p_ci_buffer_ptr;
      go to JOIN;

JOIN:
      p_code, code = 0;
      element_id_string = p_element_id;

      if element_id.control_interval_id = 0
      then ci_length_in_bytes = CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES;
      else ci_length_in_bytes = CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES;

      old_ci_ptr = addr (old_ci);

      if is_buffered
      then
         do;
	  call CHECK_CI_VERSION (new_ci_ptr -> basic_control_interval.header.layout_type);
	  unspec (old_ci_ptr -> based_ci) = unspec (new_ci_ptr -> based_ci);
	  unspec (new_ci_ptr -> based_ci) = ""b;
         end;
      else
         do;
	  call file_manager_$simple_get (p_file_opening_id, (element_id.control_interval_id), START_OF_CI_OFFSET,
	       old_ci_ptr, ci_length_in_bytes, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  call CHECK_CI_VERSION (old_ci_ptr -> basic_control_interval.header.layout_type);
	  new_ci_ptr = addr (new_ci);
	  unspec (new_ci_ptr -> based_ci) = "0"b;
         end;

      basic_control_interval_ptr = null;

      new_datum_offset = ci_length_in_bytes;

      new_ci_ptr -> basic_control_interval.header = old_ci_ptr -> basic_control_interval.header;
      new_ci_ptr -> basic_control_interval.header.scattered_free_space = 0;
      new_ci_ptr -> basic_control_interval.header.number_of_datums = p_number_of_slots;

      new_slot_idx = 1;
PUT_EACH_DATUM_IN_NEW_CI_LOOP:
      do old_slot_idx = 1 to hbound (old_ci_ptr -> basic_control_interval.datum_position_table, 1)
	 while (new_slot_idx <= hbound (new_ci_ptr -> basic_control_interval.datum_position_table, 1));
         if new_slot_idx = element_id.index
         then
	  do;
	     string (new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).flags) = "0"b;
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).offset_in_bytes = FREE_SLOT;
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).length_in_bits = 0;

	     new_slot_idx = new_slot_idx + 1;
	     if ^is_replacement
	     then if old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).offset_in_bytes
		     ^= FREE_SLOT
		then old_slot_idx = old_slot_idx - 1;	/* The old_slot hasn't been processed yet. old_slot_idx */
						/* will be incremented back up to the current old_slot at */
						/* the end of the loop. */
	  end;
         else if old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).offset_in_bytes = FREE_SLOT
         then
COPY_FREE_SLOT:
	  do;
	     string (new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).flags) = "0"b;
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).offset_in_bytes = FREE_SLOT;
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).length_in_bits = 0;

	     new_slot_idx = new_slot_idx + 1;
	  end COPY_FREE_SLOT;
         else
COPY_OLD_DATUM:
	  do;
	     datum_length_in_bytes =
		ceil (
		divide (old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).length_in_bits,
		BITS_PER_BYTE, 35, 18));

	     new_datum_offset = new_datum_offset - datum_length_in_bytes;

	     old_datum_offset =
		old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).offset_in_bytes;
	     substr (new_ci_ptr -> based_ci, new_datum_offset + 1, datum_length_in_bytes) =
		substr (old_ci_ptr -> based_ci, old_datum_offset + 1, datum_length_in_bytes);

	     string (new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).flags) =
		string (old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).flags);
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).offset_in_bytes =
		new_datum_offset;
	     new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).length_in_bits =
		old_ci_ptr -> basic_control_interval.datum_position_table (old_slot_idx).length_in_bits;

	     new_slot_idx = new_slot_idx + 1;

	  end COPY_OLD_DATUM;
      end PUT_EACH_DATUM_IN_NEW_CI_LOOP;

INIT_NEW_FREE_SLOTS:
      do new_slot_idx = new_slot_idx to element_id.index - 1;

         string (new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).flags) = "0"b;
         new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).offset_in_bytes = FREE_SLOT;
         new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).length_in_bits = 0;

      end INIT_NEW_FREE_SLOTS;

      if element_id.index = new_slot_idx
      then new_ci_ptr -> basic_control_interval.datum_position_table (new_slot_idx).offset_in_bytes = FREE_SLOT;

      new_ci_ptr -> basic_control_interval.header.start_of_used_space = new_datum_offset;

      if ^is_buffered
      then
         do;
	  call file_manager_$simple_put (p_file_opening_id, (element_id.control_interval_id), START_OF_CI_OFFSET,
	       new_ci_ptr, ci_length_in_bytes, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  p_basic_control_interval_header_ptr -> basic_control_interval.header =
	       new_ci_ptr -> basic_control_interval.header;
         end;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^4a"" control interval; received ""^4a"".", BASIC_CI_LAYOUT_1, ccv_p_given_version);

      return;


   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_element_id;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;

   end cm_compact;
