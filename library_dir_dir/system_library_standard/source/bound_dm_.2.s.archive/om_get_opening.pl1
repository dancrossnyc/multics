/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         Finds and returns a pointer to the opening associated with the given
     opening  identifier.  A hash is used to keep track of pointers to opening
     info structures.  The id is bit (72) aligned.    The  p_table_ptr  should
     point to a table set up by opening_manager_$init.
*/

/* HISTORY:

Written by Matthew Pierret, 07/26/82.
Modified:
08/10/82 by Matthew Pierret:  Changed p_code to fixed bin (35) from (17).
            Also changed ot.number_of_entries to ot.upper_bound.
04/12/83 by Matthew Pierret:  Changed to use OPENING_TABLE_VERSION_2.  This 
            represents no real change. The version was changed because
            other modules used a different structure with the same version.
11/08/84 by Stanford S. Cox:  MAIN: Moved CV inline,  updated sub_err_ call.
12/05/84 by Stanford S. Cox:  MAIN: Chg to signal sub_err_ if open table
   	  appears damaged.
*/

/* format: style2,ind3 */
om_get_opening:
   proc (p_table_ptr, p_id, p_info_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_table_ptr	       ptr parameter;
      dcl	    p_id		       bit (72) aligned parameter;
      dcl	    p_info_ptr	       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    bound_idx	       fixed bin (17);
      dcl	    hash_index	       fixed bin (35);
      dcl	    opening_id	       bit (72) aligned;

/* Based */
/* Builtin */

      dcl	    (bin, mod, null)       builtin;

/* Constant */

      dcl	    myname	       char (32) varying init ("om_get_opening") int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$no_opening   ext fixed bin (35);
      dcl	    dm_error_$open_table_damaged
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      p_info_ptr = null;
      opening_table_ptr = p_table_ptr;
      opening_id = p_id;

      if opening_table.version ^= OPENING_TABLE_VERSION_2
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", OPENING_TABLE_VERSION_2, "opening_table",
	      opening_table.version);

      /***  hash_index = hash_index_ (addr (opening_id), OPENING_ID_LENGTH, OT_HASH_BIAS, opening_table.upper_bound); */

      hash_index = HASH_INDEX (opening_id, opening_table.upper_bound);

      hash_bead_ptr = opening_table.hash_entry_ptr (hash_index);
      if hash_bead_ptr = null
      then p_code = dm_error_$no_opening;
      else
         do;
	  do bound_idx = 1 to HASH_UPPER_BOUND while (hash_bead.next_ptr ^= null & hash_bead.key ^= opening_id);
	     hash_bead_ptr = hash_bead.next_ptr;
	  end;

	  if bound_idx > HASH_UPPER_BOUND
	  then call sub_err_ (dm_error_$open_table_damaged, myname, ACTION_CANT_RESTART, null (), 0,
		  "^/Searching for opening id ^.3b.", opening_id);
	  else if hash_bead.key = opening_id
	  then p_info_ptr = hash_bead.info_ptr;
	  else p_code = dm_error_$no_opening;

         end;

      return;



hash_index:
   entry (p_hash_opening_id, p_hash_upper_bound) returns (fixed bin (17));
      dcl	    p_hash_opening_id      bit (72) aligned;
      dcl	    p_hash_upper_bound     fixed bin (35);
      return (HASH_INDEX (p_hash_opening_id, p_hash_upper_bound));

HASH_INDEX:
   proc (hi_p_opening_id, hi_p_upper_bound) returns (fixed bin (17));
      dcl	    hi_p_opening_id	       bit (72) aligned;
      dcl	    hi_p_upper_bound       fixed bin (35);
      return (mod (bin (hi_p_opening_id, 71), hi_p_upper_bound));
   end HASH_INDEX;
%page;
%include dm_om_table;
%page;
%include dm_om_hash_bead;
%page;
%include sub_err_flags;

   end om_get_opening;
