/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         Given  a  pointer  to a field_table, convert that field_table into a
     dimension_table.  The caller supplies the area in which to  allocate  the
     dimension_table..    The caller also supplies an id_list to specify which
     fields to convert into dimensions.
*/

/* HISTORY:

Written by Matthew Pierret, 08/25/83.
Modified:
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
12/07/84 by M. Sharpe to correct format and the call to CHECK_VERSION_FB
	  to pass appropriate arg by reference.
*/

/* format: style2,ind3 */

dfu_cv_field_to_dim_table:
   proc (p_work_area_ptr, p_field_table_ptr, p_id_list_ptr, p_dimension_table_ptr);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr;		/* is a pointer to an area in which to */
						/* allocate dimension_table*/
      dcl	    p_field_table_ptr      ptr;		/* is a pointer to the input */
						/* field_table to convert*/
      dcl	    p_id_list_ptr	       ptr;		/* is a pointer to the input */
						/* id_list which selects the fields to convert*/
      dcl	    p_dimension_table_ptr  ptr;		/* is the pointer to the */
						/* returned dimension_table*/

/* Automatic */

      dcl	    (dimension_idx, field_id)
			       fixed bin (17) init (-1);

/* Based */

      dcl	    p_work_area	       area (10000) based (p_work_area_ptr);

/* Builtin */

      dcl	    (addr, hbound, max, null, substr)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dfu_cv_field_to_dim_table") char (32) varying internal static
			       options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_dimension_table_ptr = null;

      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION ((field_table.version), (FIELD_TABLE_VERSION_3), "field_table");
      if p_id_list_ptr = null
      then dt_number_of_dimensions = hbound (field_table.field, 1);
      else
         do;
	  id_list_ptr = p_id_list_ptr;
	  call CHECK_VERSION_FB (id_list.version, (ID_LIST_VERSION_1), "id_list");
	  dt_number_of_dimensions = hbound (id_list.id, 1);
         end;

      dt_maximum_dimension_name_length = 0;
      do dimension_idx = 1 to dt_number_of_dimensions;
         dt_maximum_dimension_name_length =
	  max (dt_maximum_dimension_name_length, field_table.field (dimension_idx).length_of_name);
      end;

      on cleanup call FINISH ();

      alloc dimension_table in (p_work_area);

      do dimension_idx = 1 to hbound (dimension_table.dimension, 1);

         if p_id_list_ptr = null
         then field_id = dimension_idx;
         else field_id = id_list.id (dimension_idx);

         if field_id >= 1				/* If field_id <1, leave dimension_table entryempty */
         then
	  do;
	     dimension_table.dimension (dimension_idx).name =
	        substr (field_table.field_names, field_table.field (field_id).location_of_name,
	        field_table.field (field_id).length_of_name);
	     if field_table.field (field_id).flags.descriptor_is_varying
	     then call
		   sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		   "^/The capability to handle varying length descriptors is not yet implemented.");
						/* FOR DM_ERROR_UTIL_: Replace preceding statement with following

		   dm_error_util_$signal (dm_error_$programming_error, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
		   "^/The capability to handle varying length descriptors is not yet implemented.");
*/
	     dimension_table.dimension (dimension_idx).descriptor_ptr =
	        addr (dimension_table.dimension (dimension_idx).descriptor_string);
	     dimension_table.dimension (dimension_idx).descriptor_string = field_table.field (field_id).descriptor;
	  end;
      end;

      p_dimension_table_ptr = dimension_table_ptr;

      return;
%page;
FINISH:
   proc ();

      if dimension_table_ptr ^= null & p_dimension_table_ptr ^= dimension_table_ptr
      then free dimension_table;

   end FINISH;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*);
      dcl	    p_expected_version     char (*);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);
						/* FOR DM_ERROR_UTIL_: Replace preceding statement with following

	    dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
	    "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);
*/

   end CHECK_VERSION;



CHECK_VERSION_FB:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
						/* FOR DM_ERROR_UTIL_: Replace preceding statement with following

	    dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
*/

   end CHECK_VERSION_FB;
%page;
%include dm_field_table;
%page;
%include vu_dimension_table;
%page;
%include dm_id_list;
%page;
%include sub_err_flags;
   end dfu_cv_field_to_dim_table;
