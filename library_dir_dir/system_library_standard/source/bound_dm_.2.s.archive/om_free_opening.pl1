/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         Removes  an opening info structure from the opening table.  An error
     is returned if the table does not exist or if the supplied openin id does
     not correspond to an existing opening.
*/

/* HISTORY:

Written by Matthew Pierret, 07/27/82.
Modified:
08/11/82 by Matthew Pierret:  Changed ot.number_of_entries to ot.upper_bound.
04/12/83 by Matthew Pierret:  Changed to use OPENING_TABLE_VERSION_2.  This
            version is 0-originned because hash_index_ can return a value of
            0.  The "free" statement was changed to include the area from
            which to free.  Changed to use get_dm_free_area_.
09/01/83 by Lindsey L. Spratt:  Changed to use the om_get_opening$hash_index
            entry instead of calling hash_index_.
11/08/84 by Stanford S. Cox:  CV: Updated sub_err_ call.
12/05/84 by Stanford S. Cox:  MAIN: Chg to signal sub_err_ if open table
   	  appears damaged.
*/

/* format: style2,ind3 */
om_free_opening:
   proc (p_table_ptr, p_id, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_table_ptr	       ptr parameter;
      dcl	    p_id		       bit (72) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    bound_idx	       fixed bin (17);
      dcl	    hash_index	       fixed bin (35);
      dcl	    opening_id	       bit (72) aligned;
      dcl	    previous_hash_bead_ptr ptr;

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (static_dm_area_ptr);

/* Builtin */

      dcl	    (null)	       builtin;

/* Constant */

      dcl	    myname	       char (32) varying init ("om_free_opening") int static options (constant);

/* Entry */

      dcl	    om_get_opening$hash_index
			       entry (bit (72) aligned, fixed bin (35)) returns (fixed bin);
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$no_opening   ext fixed bin (35);
      dcl	    dm_error_$open_table_damaged
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* Static */

      dcl	    static_dm_area_ptr     ptr internal static init (null);

/* END OF DECLARATIONS */

      p_code = 0;
      opening_table_ptr = p_table_ptr;
      opening_id = p_id;

      call CHECK_VERSION ("opening_table", opening_table.version, OPENING_TABLE_VERSION_2);

      hash_index = om_get_opening$hash_index (opening_id, opening_table.upper_bound);

      hash_bead_ptr = opening_table.hash_entry_ptr (hash_index);
      if hash_bead_ptr = null
      then p_code = dm_error_$no_opening;
      else
         do;
	  previous_hash_bead_ptr = null;

	  do bound_idx = 1 to HASH_UPPER_BOUND while (hash_bead.next_ptr ^= null & hash_bead.key ^= opening_id);
	     previous_hash_bead_ptr = hash_bead_ptr;
	     hash_bead_ptr = hash_bead.next_ptr;
	  end;

	  if bound_idx > HASH_UPPER_BOUND
	  then call sub_err_ (dm_error_$open_table_damaged, myname, ACTION_CANT_RESTART, null (), 0,
		  "^/Searching for opening id ^.3b.", opening_id);
	  else if hash_bead.key ^= opening_id
	  then p_code = dm_error_$no_opening;
	  else
	     do;
	        if previous_hash_bead_ptr = null
	        then opening_table.hash_entry_ptr (hash_index) = hash_bead.next_ptr;
	        else previous_hash_bead_ptr -> hash_bead.next_ptr = hash_bead.next_ptr;

	        if static_dm_area_ptr = null
	        then static_dm_area_ptr = get_dm_free_area_ ();

	        free hash_bead in (dm_area);
	     end;
         end;

      return;

CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_om_table;
%page;
%include dm_om_hash_bead;
%page;
%include sub_err_flags;

   end om_free_opening;

