/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine creates a collection. Basically this consists of the
     following steps:
     1) initialize and store a collection_header structure as a regular
     element in the header collection.  The element id of this element is
     the collection's id.
     2) initialize and store a storage record.  Depending on the requested
     control interval storage method, this will either be an
     unblocked_storage_record structure or a blocked_storage_record structure.
     3) Add the new collection id to the collection_id_table structure and
     put it back in the header collection. The CIT is infinitely (nearly)
     extendable.
     4) Update the number of collections in the cm_file_header structure and
     put it back in the header collection.
*/

/* HISTORY:
Written by Matthew Pierret.
Modified:
03/26/82 by Matthew Pierret: Fixed a bug which used wrong value to signify
            beginning-of-element to put_element.
            Also fixed bug that tried to put, instead of allocate, the 
            collmgr_header the first time around.
            Extended collmgr_header to contain an entry for the header 
            collection, initialized the first tiem this module is called.
04/16/82 by Matthew Pierret: Made to set the thread_control_intervals flag.
04/21/82 by Matthew Pierret: Removed code to create collmgr_header if not found.
            This function has been moved to cm_init_ci_0, which is called by
            page_file_manager_$create.
05/19/82 by Matthew Pierret: Changed collmgr_header to contain an array of
            element ids "pointing" to collection_header's, each stored as an
            element in the header collection.
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl,
            new calling sequence to cm_put_element.
07/28/82 by Matthew Pierret: Adjusted for extensibility of collmgr_header.
10/12/82 by Matthew Pierret:  Fixed bug that truncated collection_id_table.
11/03/82 by Matthew Pierret:  Changed to use version 2 of collection_header,
            separate element for storage element, cm_file_header instead of
            collmgr_header, opening info (cm_info).
12/03/82 by Lindsey Spratt:  Changed to set the collection_id_table_ptr when
            there are no collections.  It was just being used uninitialized.
04/29/83 by Matthew Pierret: Removed some unused variables.
05/21/84 by Matthew Pierret: Renamed include files dm_cm_(esm csim)_info
            to dm_(esm cism)_info. Added ERROR_RETURN procedure. Added version
            checks for the *esm_info and *cism_info structures.
06/12/84 by Matthew Pierret: Re-named cm_put_element to cm_modify,
            cm_allocate_element to cm_put.
09/26/84 by Matthew Pierret: Moved declaration of et_$unimplemented_version
            to the main procedure.
*/


/* format: style2,ind3 */

cm_create_collection:
   proc (p_file_opening_id, p_cism_info_ptr, p_esm_info_ptr, p_collection_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_cism_info_ptr	       ptr;
      dcl	    p_esm_info_ptr	       ptr;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 automatic_collection_header
			       aligned like collection_header;
      dcl	    1 automatic_cm_file_header
			       aligned like cm_file_header;
      dcl	    automatic_storage_record_buffer
			       (6) fixed bin (71) init (0, 0, 0, 0, 0, 0);
      dcl	    code		       fixed bin (35);
      dcl	    collection_id	       bit (36) aligned;
      dcl	    collection_entry_idx   fixed bin;
      dcl	    collection_id_table_length_in_dwords
			       fixed bin (17);
      dcl	    collection_id_table_length_in_bits
			       fixed bin (35);

/* Based */
/* Builtin */

      dcl	    (length, unspec, null, addr, divide)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    FULL_LENGTH_OF_ELEMENT fixed bin (35) init (-1);
      dcl	    BITS_PER_BYTE	       fixed bin init (4);
      dcl	    BITS_PER_WORD	       fixed bin init (36);
      dcl	    NO_HEADER_RECORD       bit (36) aligned init ("0"b);
      dcl	    myname	       init ("cm_create_collection") char (20);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_cism
			       ext fixed bin (35);
      dcl	    dm_error_$unimplemented_esm
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code, code = 0;

      call cm_opening_info$get (p_file_opening_id, HEADER_COLLECTION_ID, cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      unblocked_cism_info_ptr = p_cism_info_ptr;
      call CHECK_VERSION ("cism_info", unblocked_cism_info.version, CISM_INFO_VERSION_1);
      basic_esm_info_ptr = p_esm_info_ptr;
      call CHECK_VERSION ("cism_info", basic_esm_info.version, ESM_INFO_VERSION_1);

      collection_id = "0"b;

      unspec (automatic_cm_file_header) = "0"b;
      unspec (automatic_collection_header) = "0"b;

/*
     Get the cm_file_header.  
*/

      call cm_get_element (cm_info.file_oid, cm_info.collection_id, CM_FILE_HEADER_ELEMENT_ID, 0,
	 addr (automatic_cm_file_header), length (unspec (automatic_cm_file_header)), null, ("0"b), cm_file_header_ptr,
	 (0), code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call CHECK_VERSION ("cm_file_header", cm_file_header.version, CM_FILE_HEADER_VERSION_1);

/*
     Set up space for the collection_id_table. Each collection id takes up one
     word in the collection_id_table and one may be added for the new
     collection.
*/

      collection_id_table_length_in_dwords = divide (cm_file_header.number_of_collections, 2, 17, 0) + 1;
      collection_id_table_length_in_bits = cm_file_header.number_of_collections * BITS_PER_WORD;

BEGIN_BLOCK:
      begin;

         dcl     automatic_cit_buffer	(collection_id_table_length_in_dwords) fixed bin (71);

         automatic_cit_buffer = 0;
         cit_number_of_collections = cm_file_header.number_of_collections;

         if cm_file_header.number_of_collections > 0
         then call cm_get_element (cm_info.file_oid, HEADER_COLLECTION_ID, cm_file_header.collection_id_table_element_id,
	         0, addr (automatic_cit_buffer), collection_id_table_length_in_bits, null, ("0"b),
	         collection_id_table_ptr, (0), code);
         else collection_id_table_ptr = addr (automatic_cit_buffer);
         if code ^= 0
         then call ERROR_RETURN (code);

/*
    Find a free slot in the collection_id_table, extending the table by one if
    necessary.
*/

         do collection_entry_idx = 1 to cm_file_header.number_of_collections
	    while (collection_id_table (collection_entry_idx) ^= "0"b);
         end;

         if collection_entry_idx > cm_file_header.number_of_collections
         then
	  do;
	     collection_id_table_length_in_bits = collection_id_table_length_in_bits + BITS_PER_WORD;
	     cit_number_of_collections = cm_file_header.number_of_collections + 1;
	     cm_file_header.number_of_collections = cit_number_of_collections;

	  end;

/* 
     Initialize the collection_header for the new collection from the supplied
     information.
*/

         collection_header_ptr = addr (automatic_collection_header);
         collection_header.version = COLLECTION_HEADER_VERSION_2;
         collection_header.control_interval_storage_method = unblocked_cism_info.type;
         collection_header.element_storage_method = basic_esm_info.type;

         if basic_esm_info.type = BASIC_ELEMENT_STORAGE_METHOD
         then
BASIC_ESM:
	  do;
	     collection_header.flags.fixed_size_elements = basic_esm_info.flags.fixed_length;
	     collection_header.flags.thread_elements = basic_esm_info.flags.threaded;
	     collection_header.flags.must_be_zero1 = "0"b;
	     collection_header.maximum_element_size = basic_esm_info.maximum_element_length;

	  end BASIC_ESM;

         else if basic_esm_info.type = ORDERED_ELEMENT_STORAGE_METHOD
         then
ORDERED_ESM:
	  do;
	     ordered_esm_info_ptr = p_esm_info_ptr;
	     collection_header.flags.fixed_size_elements = ordered_esm_info.flags.fixed_length;
	     collection_header.flags.thread_elements = "0"b;
	     collection_header.flags.must_be_zero1 = "0"b;
	     collection_header.maximum_element_size = ordered_esm_info.maximum_element_length;

	  end ORDERED_ESM;

         else call sub_err_ (dm_error_$unimplemented_esm, myname, ACTION_CANT_RESTART, null, 0,
	         "^/This routine does not implement element storage method ^d.", basic_esm_info.type);


         if unblocked_cism_info.type = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
         then
UNBLOCKED:
	  do;
	     unblocked_storage_record_ptr = addr (automatic_storage_record_buffer);

	     unblocked_storage_record.first_control_interval = 0;
	     unblocked_storage_record.last_control_interval = 0;

	     collection_header.flags.thread_control_intervals = "1"b;

	     call cm_put$info (cm_info_ptr, unblocked_storage_record_ptr, length (unspec (unblocked_storage_record)),
		collection_header.storage_record_element_id, (0), code);
	     if code ^= 0
	     then call ERROR_RETURN (code);

	  end UNBLOCKED;

         else if unblocked_cism_info.type = BLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
         then
BLOCKED:
	  do;
	     call sub_err_ (dm_error_$unimplemented_cism, myname, ACTION_CANT_RESTART, null, 0,
		"^/This routine does not implement control interval storage method ^d.", unblocked_cism_info.type);
						/* Not yet anyway */

	     blocked_cism_info_ptr = p_cism_info_ptr;
	     blocked_storage_record_ptr = addr (automatic_storage_record_buffer);

	     blocked_storage_record.last_control_interval = 0;
	     blocked_storage_record.number_of_blocks = 1;
	     blocked_storage_record.number_of_control_intervals_per_block =
		blocked_cism_info.number_of_control_intervals_per_block;

	     call cm_put$info (cm_info_ptr, unblocked_storage_record_ptr, length (unspec (blocked_storage_record)),
		collection_header.storage_record_element_id, (0), code);
	     if code ^= 0
	     then call ERROR_RETURN (code);

	  end BLOCKED;

         else call sub_err_ (dm_error_$unimplemented_cism, myname, ACTION_CANT_RESTART, null, 0,
	         "^/This routine does not implement control interval storage method ^d.", unblocked_cism_info.type);

/* Allocate a new element and put the new collection_header in it. */

         call cm_put$info (cm_info_ptr, collection_header_ptr, length (unspec (collection_header)), collection_id, (0),
	    code);
         if code ^= 0
         then call ERROR_RETURN (code);

/* Put back the table of collection_header element_ids, with the new id */

         collection_id_table (collection_entry_idx) = collection_id;

         call cm_modify$info (cm_info_ptr, collection_id_table_ptr, collection_id_table_length_in_bits,
	    cm_file_header.collection_id_table_element_id, (0), code);
         if code ^= 0
         then call ERROR_RETURN (code);

/* Put the cm_file_header. */

         call cm_modify$info (cm_info_ptr, cm_file_header_ptr, FULL_LENGTH_OF_ELEMENT, CM_FILE_HEADER_ELEMENT_ID, (0),
	    code);
         if code ^= 0
         then call ERROR_RETURN (code);


      end BEGIN_BLOCK;

      p_collection_id = collection_id;
      p_code = code;

MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;

%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);
      else return;

   end CHECK_VERSION;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_hdr_col_ids;
%page;
%include dm_cm_info;
%page;
%include dm_cm_file_header;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_storage_record;
%page;
%include dm_cism_info;
%page;
%include dm_esm_info;
%page;
%include dm_element_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_create_collection;
