/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed GET_CONTINUATION to correctly use a continued-datum header, not a
     continued-continuation-datum header, to get the continuation datum id.
  2) change(86-04-22,Pierret), approve(86-04-22,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Removed dm_cm_datum_constants.incl.pl1 as it was not used.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION

          This routine deletes an element specified by p_element_id.  If using
     the Basic Element Storage Method the return value of p_element_id is
     the id of the next non-free, non-continuation datum (if there is one in
     the collection); otherwise p_element_id is "0"b, meaning that the deleted
     element was the last element of the collection.
     
          Basic ESM elements are deleted by zeroing the slot in which the 
     containing datum is stored;  Ordered ESM elements are deleted by shifting
     slots to the right of the containing datum one slot towards the left.
     If this action leaves free slots at the end of the slot table, those slots
     are removed and the number of slots is decremented. If there remain any 
     free slots withinn the table, the free_slot_is_present flag is turned on.
     
          The zero-on-free option (indicated by p_zero_on_free) is not yet
     implemented.

CONVENTIONS:
     
     Labels, internal procedure labels and constant names are all in
     upper-case. Parameter variables are prefixed with "p_". Variables
     declared in subroutine are perfixed with the lowercase initials of the
     subroutine name.  Subroutine parameters are prefixed with <initials>_p_.
     
     When an error is encountered, whether in the main procedure are in a
     subroutine, the ERROR_RETURN subroutine is invoked, which sets the 
     output code p_code and causes a return to the caller of the main 
     procedure.  For this reason, code checks are unnecessary after control
     returns from a subroutine.
*/

/* HISTORY:
Written by Matthew Pierret 04/../82.
Modified:
05/20/82 by Matthew Pierret: Changed to use collection_header instead of
            collmgr_header.collection (), and to call cm_get_collection_header.
            Added ability to free uninitialized trailing slots.
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl.pl1,
            ci_parts offset to ignore non-addressable ci header.
08/13/82 by Matthew Pierret:  Added Basic ESM.
09/09/82 by Matthew Pierret:  Changed to return the element_id of the next
            element.  Fixed bug in calculation of offset of slots to shift.
            Changed datum_slots_buffer to always be based on number_of_slots,
            removing number_of_slots_to_shift.
09/10/82 by Lindsey Spratt: Changed to call PUT_HEADER_AND_SLOTS in each of
	  the freeing cases.  This is necessary because the data being put,
	  in some cases, is allocated in a begin block and therefore
	  vanishes at the end of the code for that case.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.
11/10/82 by Matthew Pierret:  Changed to support multi-datum elements, free
            control interval if nothing left (BESM only).
02/08/83 by Mathew Pierret:  Upgraded to CM_INFO_VERSION_2. Changed to use
            cm_get_bci_header$slot instead of cm_get_header_and_slot.
            Changed to return dm_error_$no_element if p_element_id.index = 0.
04/06/83 by Lindsey L. Spratt:  Fixed to use the correct datum header size
            when getting the continuation of a multi-datum element.  It was
            using the continued-continuation datum header length when it
            should have been using the conintued datum header length.
            Fixed GET_CONTINUED_CONTINUATION to correctly interpret the datum
            header.
07/14/83 by Matthew Pierret:  Essentially re-wrote most of the module to
            simplify the code and make the ordered and basic ESMs behave in a
            similar fashion.  Now both get the whole slot table always, modify
            the slots, check for free slots, decrement the number of datums
            and replace the bci_header and slot table.  Both also use
            cm_get_id to position.  Also, added an ERROR_RETURN routine which
            sets p_code and non-locally goes to the main return statement in
            the main procedure.  Internal subroutines use ERROR_RETURN, so
            their callers can assume that if control is returned to the
            caller, no errors were encountered.  Also, renamed subroutine
            variables to be prefixed with the initials of the subroutine.
10/14/83 by Lindsey L. Spratt:  Changed to use cm_get_id$info_header instead
            of cm_get_id$header.
02/07/84 by Matthew Pierret:  Changed to use cm_get_id$id instead of
            $info_header.  $info_header is now obsolete.  In the future, this
            routine should be changed to look at data in control intervals by
            getting a pointer to the addressable portion of the control
            interval via file_manager_$get_ci_ptr, and should use
            cm_get_id$ptr.
05/21/84 by Matthew Pierret: Renamed include file dm_cm_esm_info to
            dm_esm_info.
09/28/84 by Matthew Pierret: Renamed to cm_delete from cm_free_element in
            accordance with new naming scheme for operations. Corrected a
            situation wherein it was possible to free a control interval 
            because there was no datum left after the deletion, but then
            write into that freed control interval by calling
            PUT_HEADER_AND_SLOTS. Removed include files from subroutines,
            adding explicit pointer references in those subroutines to
            structures that are declared globally. Cleaned up incorrect
            declarations.  Added use of file_mnager_$simple_get.
12/03/84 by Matthew Pierret: Changed to use my_ci_parts instead of
            automatic_ci_parts_buffer, the former using a "like" to
            ci_parts.part.  Fixed the improper use of the glogal
            datum_slot instead of using an explicit pointer reference in
            PUT_HEADER_AND_SLOTS.
12/11/84 by Matthew Pierret:  Initialized my_ci_parts.pad to 0.
05/21/85 by Matthew C. Pierret:  Changed GET_CONTINUATION to correctly assume
            the supplied offset is to the beginning of a continued-datum, not
            a continued-continuation-datum.  The two have different headers,
            so incorrect an value was being returned.
*/

/* format: style2,ind3 */

cm_delete:
   proc (p_file_opening_id, p_collection_id, p_element_id, p_zero_on_free, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_zero_on_free	       bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    1 automatic_bci_header aligned like bci_header;
      dcl	    1 automatic_datum_slot aligned like datum_slot;
      dcl	    1 my_ci_parts	       aligned,
	      2 number_of_ci_parts fixed bin init (0),
	      2 pad	       fixed bin init (0),
	      2 part	       (2) like ci_parts.part;

      dcl	    continuation_datum_id_string
			       bit (36) aligned init ("0"b);
      dcl	    next_element_id_string bit (36) aligned init ("0"b);

      dcl	    is_ordered_esm	       bit (1) aligned init ("0"b);

      dcl	    first_free_slot_idx    fixed bin (17);
      dcl	    slot_idx	       fixed bin (17);
      dcl	    st_number_of_slots     fixed bin (17);

/* Based */
/* Builtin */

      dcl	    (addr, divide, null, size, unspec)
			       builtin;

/* Controlled */
/*  Constant */

      dcl	    myname	       init ("cm_delete") char (32) varying int static options (constant);
      dcl	    RELATIVE	       init ("0"b) bit (1) aligned int static options (constant);
      dcl	    NEXT_ELEMENT	       init (1) fixed bin (17) int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin int static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$put      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$end_of_collection,
	    dm_error_$no_element,
	    dm_error_$ci_not_in_collection
	    )		       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

      code = 0;
      call cm_opening_info$get (p_file_opening_id, p_collection_id, cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      else go to JOIN;


info:
   entry (p_cm_info_ptr, p_element_id, p_zero_on_free, p_code);

      code = 0;
      cm_info_ptr = p_cm_info_ptr;
      go to JOIN;
%page;
JOIN:
      p_code = 0;

      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      collection_header_ptr = cm_info.header_ptr;
      call CHECK_VERSION ("collection_header", collection_header.version, COLLECTION_HEADER_VERSION_2);

      element_id_string = p_element_id;
      if element_id.index = 0
      then call ERROR_RETURN (dm_error_$no_element);

      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);

      call cm_get_bci_header$slot (cm_info.file_oid, bci_header_ptr, datum_slot_ptr, element_id_string, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if bci_header.collection_id ^= cm_info.collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);

      if datum_slot.offset_in_bytes = FREE_SLOT | datum_slot.flags.is_continuation
      then call ERROR_RETURN (dm_error_$no_element);


      if collection_header.element_storage_method = ORDERED_ELEMENT_STORAGE_METHOD
      then is_ordered_esm = "1"b;
      else is_ordered_esm = "0"b;

      if datum_slot.is_continued
      then
         do;

         /*** The element is a multi-datum element. Free the trailing
	    datums first. It is necessary to get the id of the first continuation
	    datum out of this initial datum.  The routine cm_delete_cn_datum will
	    return subsequent continuation ids. */

	  continuation_datum_id_string =
	       GET_CONTINUATION ((element_id.control_interval_id), (datum_slot.offset_in_bytes));

	  do while (continuation_datum_id_string ^= "0"b);

	     call cm_delete_cn_datum (cm_info_ptr, p_zero_on_free, continuation_datum_id_string, code);
	     if code ^= 0
	     then call ERROR_RETURN (code);
	  end;

         end;

      st_number_of_slots = bci_header.number_of_datums;

BEGIN_BLOCK:
      begin;

         dcl     1 slot_table		aligned,
	         2 slot		(st_number_of_slots) like datum_slot;

         ci_parts_ptr = addr (my_ci_parts);
         ci_parts.number_of_parts = 1;
         call GET_SLOT_TABLE (cm_info.file_oid, (element_id.control_interval_id), addr (slot_table), st_number_of_slots,
	    ci_parts_ptr);

         if ^is_ordered_esm
         then
	  do;

	  /*** This is a basic collection. Find the id of the next element, to be returned
	       to the caller. This must be done before deleteing the specified element. */

	     call cm_get_id$id (cm_info.file_oid, cm_info.collection_id, element_id_string, NEXT_ELEMENT, RELATIVE,
		next_element_id_string, code);
	     if code ^= 0
	     then if code = dm_error_$end_of_collection
		then code = 0;
		else call ERROR_RETURN (code);
	  end;

         if is_ordered_esm
         then
	  do;

	  /*** This is an ordered collection. Shift slots one to left and
	       decrement the number of datums in the control interval. */

	     do slot_idx = element_id.index to bci_header.number_of_datums - 1;
	        slot_table.slot (slot_idx) = slot_table.slot (slot_idx + 1);
	     end;
	     unspec (slot_table.slot (slot_idx)) = "0"b;
	     bci_header.number_of_datums = bci_header.number_of_datums - 1;

	  end;
         else /* Simply free the specified slot */
	    unspec (slot_table.slot (element_id.index)) = "0"b;


         do slot_idx = bci_header.number_of_datums to 1 by -1 while (unspec (slot_table.slot (slot_idx)) = "0"b);
         end;


         if ^is_ordered_esm & slot_idx <= 0
         then
FREE_ENTIRE_CI:
	  do;

	  /*** The control interval is empty.  Free it */

	     call cm_free_ci$info (cm_info_ptr, (element_id.control_interval_id), p_zero_on_free, code);
	     if code ^= 0
	     then call ERROR_RETURN (code);
	  end FREE_ENTIRE_CI;
         else
UPDATE_CI:
	  do;

	  /*** There remains at least one datum in the control interval.
	       Update the number of datums in the bci_header, and the
	       free_slot_is_resent flag if there remain any free slots.
	       Then put the modified bci_header and datum_slot_table back
	       in the control interval. */

	     bci_header.number_of_datums = slot_idx;

	     do first_free_slot_idx = 1 to bci_header.number_of_datums
		while (unspec (slot_table.slot (first_free_slot_idx)) ^= ""b);
	     end;
	     if first_free_slot_idx < bci_header.number_of_datums
	     then bci_header.flags.free_slot_is_present = "1"b;
	     else bci_header.flags.free_slot_is_present = "0"b;

	     call PUT_HEADER_AND_SLOTS (cm_info.file_oid, bci_header_ptr, datum_slot_ptr,
		(element_id.control_interval_id), ci_parts_ptr);

	  end UPDATE_CI;
      end BEGIN_BLOCK;

      if ^is_ordered_esm
      then p_element_id = next_element_id_string;

MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of ^a structure; received ^8a.", cv_p_correct_version, cv_p_structure_name,
	      cv_p_given_version);
      else return;

   end CHECK_VERSION;
%page;
PUT_HEADER_AND_SLOTS:
   proc (phas_p_file_opening_id, phas_p_bci_header_ptr, phas_p_datum_slot_ptr, phas_p_control_interval_id,
        phas_p_ci_parts_ptr);

      dcl	    phas_p_file_opening_id bit (36) aligned;
      dcl	    phas_p_bci_header_ptr  ptr;
      dcl	    phas_p_datum_slot_ptr  ptr;
      dcl	    phas_p_control_interval_id
			       fixed bin (27);
      dcl	    phas_p_ci_parts_ptr    ptr;
      dcl	    phas_code	       fixed bin (35);

      phas_code = 0;

      if phas_p_datum_slot_ptr -> datum_slot.offset_in_bytes = phas_p_bci_header_ptr -> bci_header.start_of_used_space
      then phas_p_bci_header_ptr -> bci_header.start_of_used_space =
	      phas_p_bci_header_ptr -> bci_header.start_of_used_space
	      + BITS_TO_BYTES ((phas_p_datum_slot_ptr -> datum_slot.length_in_bits));
      else phas_p_bci_header_ptr -> bci_header.scattered_free_space =
	      phas_p_bci_header_ptr -> bci_header.scattered_free_space
	      + BITS_TO_BYTES ((phas_p_datum_slot_ptr -> datum_slot.length_in_bits));


      phas_p_ci_parts_ptr -> ci_parts.number_of_parts = 2;
      phas_p_ci_parts_ptr -> ci_parts.part (2).offset_in_bytes = 0;
      phas_p_ci_parts_ptr -> ci_parts.part (2).length_in_bytes = size (bci_header) * BYTES_PER_WORD;
      phas_p_ci_parts_ptr -> ci_parts.part (2).local_ptr = phas_p_bci_header_ptr;

      call file_manager_$put (phas_p_file_opening_id, phas_p_control_interval_id, phas_p_ci_parts_ptr, phas_code);
      if phas_code ^= 0
      then call ERROR_RETURN (phas_code);
      else return;

   end PUT_HEADER_AND_SLOTS;
%page;
BITS_TO_BYTES:
   proc (btb_p_bits) returns (fixed bin (17));

      dcl	    btb_p_bits	       fixed bin (35);

      return (divide (btb_p_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0));

   end BITS_TO_BYTES;
%page;
GET_CONTINUATION:
   proc (gc_p_ci, gc_p_offset) returns (bit (36) aligned);

/* Given the CI and the offset in bytes within the CI of a continued_datum
   (i.e., the first datum of a multi-datum element), this routine returns
   the continuation id in the continued_datum's header. This is the id of
   the second datum of the multi-datum element. */

      dcl	    gc_p_ci	       fixed bin (27);
      dcl	    gc_p_offset	       fixed bin (21);
      dcl	    1 gc_continued_datum_header
			       aligned like continued_datum.header;
      dcl	    gc_code	       fixed bin (35);

      call file_manager_$simple_get (cm_info.file_oid, gc_p_ci, gc_p_offset, addr (gc_continued_datum_header),
	 (size (gc_continued_datum_header) * BYTES_PER_WORD), gc_code);
      if gc_code ^= 0
      then call ERROR_RETURN (gc_code);
      else return (unspec (gc_continued_datum_header.continuation));


   end GET_CONTINUATION;
%page;
GET_SLOT_TABLE:
   proc (gst_p_file_oid, gst_p_control_interval_id, gst_p_slot_table_ptr, gst_p_slot_table_length_in_words,
        gst_p_ci_parts_ptr);

      dcl	    gst_p_file_oid	       bit (36) aligned;
      dcl	    gst_p_control_interval_id
			       fixed bin (27);
      dcl	    gst_p_slot_table_ptr   ptr;
      dcl	    gst_p_slot_table_length_in_words
			       fixed bin (17);
      dcl	    gst_p_ci_parts_ptr     ptr;

      dcl	    gst_code	       fixed bin (35);

      gst_p_ci_parts_ptr -> ci_parts.number_of_parts = 1;
      gst_p_ci_parts_ptr -> ci_parts.part (1).offset_in_bytes = size (bci_header) * BYTES_PER_WORD;
      gst_p_ci_parts_ptr -> ci_parts.part (1).length_in_bytes = gst_p_slot_table_length_in_words * BYTES_PER_WORD;
      gst_p_ci_parts_ptr -> ci_parts.part (1).local_ptr = gst_p_slot_table_ptr;

      call file_manager_$get (gst_p_file_oid, gst_p_control_interval_id, gst_p_ci_parts_ptr, gst_code);
      if gst_code ^= 0
      then call ERROR_RETURN (gst_code);
      else return;


   end GET_SLOT_TABLE;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_collection_header;
%page;
%include dm_element_id;
%page;
%include dm_esm_info;
%page;
%include dm_ci_parts;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_delete;
