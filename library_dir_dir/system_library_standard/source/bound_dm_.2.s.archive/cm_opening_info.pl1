/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This   routine   handles   all  manipulation  of  opening  info  for
     collections.

     $get gets a pointer to a cm_info structure associated with  the  supplied
     p_file_oid and p_collection_id.  If no cm_info exists yet, it creates one
     by  extracting  information out of the collection header and stores it in
     the opening info area (dm_data_$area_ptr). If cm_info exists and the
     current transaction is not the same as that identified by 
     cm_info.current_txn_id, the information is copied from the collection
     header to the location where cm_info is stored.

     $full_get is the same as $get, except it also gets the storage record
     for the collection.  The reason for the two entries is because most
     operations do not need the information in the storage record, and
     shouldn't pay the expense and possible concurrency problems of getting
     the storage record.

     $get_storage_record - given a pointer to a cm_info structure, sets
     cm_info.storage_record_ptr to the location of the collection's storage
     record.  If cm_info.storage_record_ptr = null or cm_info.current_txn_id
     ^= the current transaciton, the storage record is retrieved from the
     collection header.

     These entries call cm_get_element, depending on it not in turn calling
     one of these entries again.  If cm_get_element is ever changed to use
     opening info, these entries will have to be changed to get elements
     in another way.
     
     $opening_table_ptr - is a function which returns the value of the static
     variable static_opening_table_ptr.
     
     $degug_(on off) - turn debugging features (on off) for this process.
*/

/* HISTORY:

Written by Matthew Pierret, 11/01/82.
Modified:
11/22/82 by Lindsey Spratt:  Changed to initialize collection_header_ptr to
	  null.
12/10/82 by Lindsey Spratt:  Changed to refresh the cm_info if the txn has
	  changed.  Also, fixed to not free the cm_info (in FINISH) if not
	  allocated by this module.
01/25/83 by Matthew Pierret: Added $get_storage_record entry. Changed to
            convert certain error codes to dm_error_$collection_not_found
            when error is encountered attempting to get the collection_header.
            It is assumed that the caller supplied an incorrect collection_id.
            Changed to report an internal inconsistency if the same errors
            are encountered attempting to get the storage record, as this 
            indicates that the collection_header.storage_record_element_id
            is invalid.
            Changed to use cm_info version 2.
            Changed to use cm_get_element$bypass_info to prevent looping.
03/24/83 by Matthew Pierret: Added $opening_table_ptr entry.
04/08/83 by Matthew Pierret: Chnaged to set cm_info.storage_record_ptr to null
            after refreshing. Changed to not use dm_data_$(area_ptr
            current_txn_id), but to call (get_dm_free_area_ 
            tm_$get_current_txn_id) instead.
04/08/83 by Lindsey L. Spratt:  Fixed to initialize the storage_record_ptr to
            null when refreshing the opening.
04/12/83 by Lindsey L. Spratt:  Changed to only get the storage_record when
            the get_storage_record flag is on and the
            cm_info.storage_record_ptr is null.  Added the debug displays and
	  the debug_on/off entries.
02/08/84 by Matthew Pierret:  Changed to new calling sequence of 
            cm_get_element$bypass_info, which now includes a position arg.
10/02/84 by Matthew Pierret:  Changed to use cm_get_element instead of
            cm_get_element$bypass_info (now obsolete).  Added ERROR_RETURN 
            procedure. Changed CHECK_VERSION to follow variable name
            prefixing convention.  Made dm_area_ptr a static variable,
            initialized to null, so that get_dm_free_area_ need only be called
            once per process.  Changed the get_info and get_storage_record
            flags to both be set for each of the entries which use them.
*/

/* format: style2,ind3 */

cm_opening_info:
   proc ();

      return;


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_oid	       bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (get_info, get_storage_record)
			       bit (1) aligned;
      dcl	    (alloc_new_cm_info, refresh_cm_info, init_table)
			       bit (1) aligned init ("0"b);
      dcl	    code		       fixed bin (35);
      dcl	    current_transaction_id bit (36) aligned init ("0"b);

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Builtin */

      dcl	    (addr, max, null, size)
			       builtin;

/* Constant */

      dcl	    DONT_POSITION	       init (0) fixed bin internal static options (constant);
      dcl	    BITS_PER_WORD	       init (36) fixed bin internal static options (constant);
      dcl	    NUMBER_OF_BUCKETS      init (20) fixed bin internal static options (constant);
      dcl	    myname	       init ("cm_opening_info") char (32) varying internal static options (constant);

/* Entry */

      dcl	    ioa_		       entry () options (variable);
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$put_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$init  entry (fixed bin, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    transaction_manager_$get_current_txn_id
			       entry (bit (36) aligned, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$ci_not_in_collection,
	    dm_error_$collection_not_found,
	    dm_error_$programming_error,
	    dm_error_$no_element,
	    dm_error_$no_current_transaction
	    )		       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* Static */

      dcl	    internal_debug	       bit (1) init ("0"b) aligned internal static;
      dcl	    static_opening_table_ptr
			       init (null) ptr internal static;
      dcl	    dm_area_ptr	       init (null) ptr internal static;

/* END OF DECLARATIONS */

opening_table_ptr:
   entry () returns (ptr);

      return (static_opening_table_ptr);

debug_on:
   entry ();
      internal_debug = "1"b;
      return;
debug_off:
   entry ();
      internal_debug = "0"b;
      return;

get_storage_record:
   entry (p_cm_info_ptr, p_code);

      get_info = "0"b;
      get_storage_record = "1"b;
      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");
      call CHECK_VERSION (cm_info.header_ptr -> collection_header.version, COLLECTION_HEADER_VERSION_2,
	 "collection_header");

      goto JOIN;

full_get:
   entry (p_file_oid, p_collection_id, p_cm_info_ptr, p_code);

      get_info = "1"b;
      get_storage_record = "1"b;
      collection_header_ptr, cm_info_ptr = null;
      go to JOIN;

get:
   entry (p_file_oid, p_collection_id, p_cm_info_ptr, p_code);

      get_info = "1"b;
      get_storage_record = "0"b;
      collection_header_ptr, cm_info_ptr = null;
      go to JOIN;

JOIN:
      p_code, code = 0;
      call transaction_manager_$get_current_txn_id (current_transaction_id, code);
      if code ^= 0
      then if code ^= dm_error_$no_current_transaction
	 then call ERROR_RETURN (code);
	 else code = 0;

      if dm_area_ptr = null
      then dm_area_ptr = get_dm_free_area_ ();

      if get_info
      then
GET_HEADER:
         do;

	  if static_opening_table_ptr = null
	  then
	     do;
	        alloc_new_cm_info, refresh_cm_info, init_table = "1"b;
	        call opening_manager_$init (NUMBER_OF_BUCKETS, static_opening_table_ptr, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);
	     end;
	  else
	     do;
	        call opening_manager_$get_opening (static_opening_table_ptr, (p_file_oid || p_collection_id),
		   cm_info_ptr, code);
	        if code ^= 0
	        then
		 do;
		    code = 0;
		    refresh_cm_info, alloc_new_cm_info = "1"b;
		 end;
	        else
		 do;
		    call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");
		    if cm_info.current_txn_id ^= current_transaction_id
		    then refresh_cm_info = "1"b;
		 end;
	     end;

	  if refresh_cm_info
	  then
	     do;

/*
     The opening info could not be found, so create a cm_info structure
     and set up an entry in the opening_info_table for it.
*/
	        if internal_debug
	        then
		 do;
		    call ioa_ ("Getting opening info for collection ^3bo in file ^3bo.", p_collection_id, p_file_oid);
		    if init_table
		    then call ioa_ ("^5xInitialized the opening table.");
		    if alloc_new_cm_info
		    then call ioa_ ("^5xAllocating a new opening.");
		    else call ioa_ (
			    "^5xRefreshing the opening because it was last valid for txn ^3bo,^/^10xand the current txn is ^3bo."
			    , cm_info.current_txn_id, current_transaction_id);
		 end;

	        if alloc_new_cm_info
	        then
		 do;
		    alloc cm_info in (work_area);
		    cm_info.version = CM_INFO_VERSION_2;
		 end;

	        call cm_get_element (p_file_oid, HEADER_COLLECTION_ID, p_collection_id, DONT_POSITION,
		   cm_info.header_ptr, size (collection_header) * BITS_PER_WORD, dm_area_ptr, ("1"b),
		   cm_info.header_ptr, (0), code);
	        if code ^= 0
	        then
		 do;
		    if code = dm_error_$ci_not_in_collection | code = dm_error_$no_element
		    then call ERROR_RETURN (dm_error_$collection_not_found);
		    else call ERROR_RETURN (code);
		 end;
	        collection_header_ptr = cm_info.header_ptr;
	        call CHECK_VERSION (collection_header.version, COLLECTION_HEADER_VERSION_2, "collection_header");


	        cm_info.current_txn_id = current_transaction_id;
	        cm_info.file_oid = p_file_oid;
	        cm_info.collection_id = p_collection_id;
	        cm_info.storage_record_ptr = null;


	        if alloc_new_cm_info
	        then
		 do;
		    call opening_manager_$put_opening (static_opening_table_ptr, (p_file_oid || p_collection_id),
		         cm_info_ptr, code);
		    if code ^= 0
		    then call ERROR_RETURN (code);
		 end;
	     end;
         end GET_HEADER;

      if get_storage_record
      then if cm_info.storage_record_ptr = null
	 then
	    do;
	       if internal_debug
	       then call ioa_ ("^5xGetting the storage record for collection ^3bo of file ^3bo.", cm_info.collection_id,
		       cm_info.file_oid);
	       call cm_get_element (cm_info.file_oid, HEADER_COLLECTION_ID,
		  cm_info.header_ptr -> collection_header.storage_record_element_id, DONT_POSITION,
		  cm_info.storage_record_buffer_ptr,
		  max (size (blocked_storage_record), size (unblocked_storage_record)) * BITS_PER_WORD, dm_area_ptr,
		  ("1"b), cm_info.storage_record_ptr, (0), code);
	       if code ^= 0
	       then if code ^= dm_error_$ci_not_in_collection & code ^= dm_error_$no_element
		  then call ERROR_RETURN (code);
		  else call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
			  "^/^a ^3bo ^a^/^a^/control interval ^d, slot ^d. ^[That control interval is not part of the ^/header_collection.^;That slot contains no data.^]"
			  , "The storage record for collection", cm_info.collection_id,
			  "is not at the location recorded",
			  "in the collection's header.  The header claims the storage record is at",
			  addr (cm_info.header_ptr -> collection_header.storage_record_element_id)
			  -> element_id.control_interval_id,
			  addr (cm_info.header_ptr -> collection_header.storage_record_element_id)
			  -> element_id.index);


	       cm_info.current_txn_id = current_transaction_id;
	       cm_info.storage_record_buffer_ptr = cm_info.storage_record_ptr;
	    end;

      p_cm_info_ptr = cm_info_ptr;
MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
FINISH:
   proc ();					/*
     Free anything that this instance of cm_opening_info allocated.
     The storage record need not be freed, as it can not have been 
     allocated if this routine was called.
*/

      if alloc_new_cm_info
      then
         do;
	  if collection_header_ptr ^= null
	  then free collection_header in (work_area);

	  if cm_info_ptr ^= null & p_cm_info_ptr ^= cm_info_ptr
	  then free cm_info in (work_area);
         end;
      return;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_storage_record;
%page;
%include dm_element_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;
   end cm_opening_info;
