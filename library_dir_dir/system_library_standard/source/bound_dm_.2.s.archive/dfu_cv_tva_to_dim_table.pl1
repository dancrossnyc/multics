/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This   routine   converts   the  typed_vector_array.dimenstion_table
     sub-structure into a stand-alone dimension_table structure.
*/

/* HISTORY:

Written by Matthew Pierret, 08/24/83.
Modified:
12/07/84 by M. Sharpe:  to cleanup format and dcls; to modify the call to
	  CHECK_VERSION_FB to pass params by reference.
*/

/* format: style2,ind3 */

dfu_cv_tva_to_dim_table:
   proc (p_work_area_ptr, p_typed_vector_array_ptr, p_dimension_table_ptr);

/* START OF DECLARATIONS */
/* Parameter */
      dcl	    p_work_area_ptr	       ptr;		/* is a pointer to a work area */
      dcl	    p_typed_vector_array_ptr
			       ptr;		/* is a pointer to an input typed_vector_array */
      dcl	    p_dimension_table_ptr  ptr;		/* is a pointer to the output dimension_table */

/* Automatic */
      dcl	    dimension_idx	       fixed bin (35) init (-1);

/* Based */

      dcl	    p_work_area	       area (10000) based (p_work_area_ptr);
      dcl	    based_descriptor_string
			       bit (36) based;

/* Builtin */

      dcl	    (addr, hbound, null)   builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dfu_cv_tva_to_dim_table") char (32) varying internal static
			       options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
      p_dimension_table_ptr = null;

      typed_vector_array_ptr = p_typed_vector_array_ptr;
      call CHECK_VERSION_FB (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");

      on cleanup call FINISH ();

      dt_number_of_dimensions = hbound (typed_vector_array.dimension_table, 1);
      dt_maximum_dimension_name_length = typed_vector_array.maximum_dimension_name_length;
      alloc dimension_table in (p_work_area);

      do dimension_idx = 1 to hbound (dimension_table.dimension, 1);
         dimension_table.dimension (dimension_idx).name = typed_vector_array.dimension_table (dimension_idx).name;
         dimension_table.dimension (dimension_idx).descriptor_ptr =
	  addr (dimension_table.dimension (dimension_idx).descriptor_string);
         dimension_table.dimension (dimension_idx).descriptor_string =
	  typed_vector_array.dimension_table (dimension_idx).descriptor_ptr -> based_descriptor_string;
         dimension_table.dimension (dimension_idx).cv_to_typed =
	  typed_vector_array.dimension_table (dimension_idx).cv_to_typed;
         dimension_table.dimension (dimension_idx).cv_to_print =
	  typed_vector_array.dimension_table (dimension_idx).cv_to_print;
      end;

      p_dimension_table_ptr = dimension_table_ptr;

      return;
%page;
FINISH:
   proc ();

      if dimension_table_ptr ^= null & p_dimension_table_ptr = null
      then free dimension_table;

   end FINISH;
%page;
CHECK_VERSION_FB:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
						/* FOR DM_ERROR_UTIL_: Replace preceding statement with following

	    dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
*/

   end CHECK_VERSION_FB;
%page;
%include vu_dimension_table;
%page;
%include vu_typed_vector_array;
%page;
%include sub_err_flags;
   end dfu_cv_tva_to_dim_table;
