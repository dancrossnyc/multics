/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This module implements collection_manager_$compact_control_interval.

         Given an identifier of  a  control interval in a file, re-arrange the
     contents of the control interval so as to concentrate  all  of  the  free
     space  in one contiguous area of the control interval.  This is necessary
     at times to recover scattered free space and is known as  compacting  the
     control  interval.    In normal use of collection_manager_, this entry is
     never needed.  It is only used by applications which attempt at their own
     risk to make simple modifications  to  control  intervals  without  going
     through collection_manager_.
*/

/* HISTORY:

Written by Matthew Pierret, 04/03/84.
Modified:
09/26/84 by Matthew Pierret:  Changed to use file_manager_$simple_put, thus
            removing the need for the ci_parts structure.  Added
            CHECK_CI_VERSION to verify the correctness of the control interval
            layout type.
*/

/* format: style2,ind3 */

cm_compact_ci:
   proc (p_file_opening_id, p_control_interval_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;	/*is the opening identifier of the file.*/
      dcl	    p_control_interval_id  fixed bin (24) uns;	/* identifies a control interval to be compacted. */
      dcl	    p_code	       fixed bin (35);	/*is a standard system error code.*/

/* Automatic */

      dcl	    ci_id		       fixed bin (24) uns;
      dcl	    ci_length_in_bytes     fixed bin (21) init (-1);
      dcl	    code		       fixed bin (35) init (0);
      dcl	    datum_length_in_bytes  fixed bin (35) init (-1);
      dcl	    file_opening_id	       bit (36) aligned;
      dcl	    local_ci_buffer	       (512) fixed bin (71) init ((512) 0);
      dcl	    new_datum_offset_in_bytes
			       fixed bin (35);
      dcl	    new_ci_ptr	       ptr init (null);
      dcl	    new_datum_ptr	       ptr init (null);
      dcl	    new_slot_ptr	       ptr init (null);
      dcl	    old_ci_ptr	       ptr init (null);
      dcl	    old_datum_ptr	       ptr init (null);
      dcl	    old_slot_ptr	       ptr init (null);
      dcl	    slot_idx	       fixed bin;
      dcl	    slot_offset_in_bytes   fixed bin init (-1);

/* Based */

      dcl	    datum_string	       char (datum_length_in_bytes) unal based;
      dcl	    1 new_slot	       aligned like datum_slot based (new_slot_ptr);
      dcl	    1 old_slot	       aligned like datum_slot based (old_slot_ptr);

/* Builtin */

      dcl	    (addcharno, addr, ceil, divide, null)
			       builtin;

/* Constant */

      dcl	    myname	       init ("cm_compact_ci") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin internal static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin internal static options (constant);
      dcl	    START_OF_CI_OFFSET     init (0) fixed bin (21) internal static options (constant);

/* Entry */

      dcl	    file_manager_$get_ci_ptr
			       entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$simple_put
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_ci_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      file_opening_id = p_file_opening_id;

      ci_id = p_control_interval_id;

      call file_manager_$get_ci_ptr (file_opening_id, (ci_id), old_ci_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      else call CHECK_CI_VERSION (old_ci_ptr -> bci_header.layout_type);

      new_ci_ptr = addr (local_ci_buffer);
      new_ci_ptr -> bci_header = old_ci_ptr -> bci_header;

      if ci_id = 0
      then ci_length_in_bytes = CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES;
      else ci_length_in_bytes = CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES;

      new_datum_offset_in_bytes = ci_length_in_bytes;

      slot_offset_in_bytes = DATUM_POSITION_TABLE_OFFSET_IN_BYTES;

      do slot_idx = 1 to old_ci_ptr -> bci_header.number_of_datums;

         old_slot_ptr = addcharno (old_ci_ptr, slot_offset_in_bytes);
         new_slot_ptr = addcharno (new_ci_ptr, slot_offset_in_bytes);

         new_slot = old_slot;

         if old_slot.offset_in_bytes ^= FREE_SLOT
         then
	  do;
	     datum_length_in_bytes = ceil (divide (old_slot.length_in_bits, BITS_PER_BYTE, 35, 18));

	     new_datum_offset_in_bytes = new_datum_offset_in_bytes - datum_length_in_bytes;
	     new_slot.offset_in_bytes = new_datum_offset_in_bytes;

	     new_datum_ptr = addcharno (new_ci_ptr, new_slot.offset_in_bytes);
	     old_datum_ptr = addcharno (old_ci_ptr, old_slot.offset_in_bytes);

	     new_datum_ptr -> datum_string = old_datum_ptr -> datum_string;

	  end;

         slot_offset_in_bytes = slot_offset_in_bytes + BYTES_PER_WORD;

      end;

      new_ci_ptr -> bci_header.start_of_used_space = new_datum_offset_in_bytes;
      new_ci_ptr -> bci_header.scattered_free_space = 0;

      call file_manager_$simple_put (file_opening_id, (ci_id), START_OF_CI_OFFSET, new_ci_ptr, ci_length_in_bytes, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      p_code = 0;
MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

   end FINISH;



CHECK_CI_VERSION:
   proc (ccv_p_version_received);

      dcl	    ccv_p_version_received char (4) aligned;

      if ccv_p_version_received ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^4a; received version ^4a.", BASIC_CI_LAYOUT_1, ccv_p_version_received);
      else return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;
   end cm_compact_ci;
