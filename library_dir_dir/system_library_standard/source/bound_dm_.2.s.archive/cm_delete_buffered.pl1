/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION

   This routine frees an element specified by p_element_id.  If using
   the Basic Element Storage Method the return value of p_element_id is
   either id of the next non-free, non-continuation datum (if there is one in
   this control interval), the control interval id of the next control
   interval and a slot index of 0 (if there is another control interval),
   or "0"b.  The caller can assume that a value of "0"b means that the freed
   element was the last element of the collection.

   Using Basic ESM if the element to be freed is stored in a datum
   slot other than the last slot of the slot table (datum_position_table)
   that slot is marked free by zeroing it and bci_header.free_slot_is_present
   is turned on to note the existence of the free slot.  If the last slot
   is being freed, the table is truncated. If there exists a contiguous
   block of free slots adjacent to the last slot, these slots are truncated
   also, and the whole slot table is searched to see if all of the free slots
   have been truncated.  If so, turn bci_header.free_slot_is_present off;
   otherwise leave it on.

   The zero-on-free option (indicated by p_zero_on_free) is not yet
   implemented.
*/

/* HISTORY:

Written by Matthew Pierret 01/10/83.
Modified:
02/04/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Changed to
            check control interval layout type.
05/21/84 by Matthew Pierret: Renamed include file dm_cm_cism_info to
            dm_cism_info. Added ERROR_RETURN procedure. Changed to not get
            opening info unless a multi-datum element is to be deleted.
09/28/84 by Matthew Pierret: Fixed HISTORY section. Changed comments to be
            indented properly. Corrected mis-statement in DESCRIPTION
            which claimed that element_id.index could be 0 on inpput.
            Improved expression for converting bits to bytes.
12/03/84 by Matthew Pierret:  Fixed HISTORY section and removed indcomtxt
            from the main format statement as that mode causes the HISTORY
            section to be formatted in a non-standard fashion.  Removed the
            un-used sys_info$max_seg_size, BYTES_PER_WORD, next_element_id
            dm_esm_info.incl.pl1.
*/

/* format: style2,ind3 */
/* format: indcomtxt   */

cm_delete_buffered:
   proc (p_ci_buffer_ptr, p_file_opening_id, p_collection_id, p_element_id, p_zero_on_free, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr;
      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_zero_on_free	       bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    (file_opening_id, collection_id)
			       bit (36) aligned;
      dcl	    continuation_datum_id_string
			       bit (36) aligned init ("0"b);
      dcl	    1 local_datum_slot     aligned like datum_slot;
      dcl	    next_element_id_string bit (36) aligned init ("0"b);
      dcl	    (new_number_of_datums, new_start_of_used_space, new_scattered_free_space)
			       fixed bin (17);
      dcl	    slot_idx	       fixed bin;

      dcl	    slot_not_specified     bit (1) aligned init ("0"b);
      dcl	    found		       bit (1) aligned init ("0"b);


/* Based */

      dcl	    1 continuation_datum_id
			       aligned like datum_id based (addr (continuation_datum_id_string));

/* Builtin */

      dcl	    (addcharno, addr, divide, null, unspec)
			       builtin;

/* Controlled */
/*  Constant */

      dcl	    myname	       init ("cm_delete_buffered") char (32) varying int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);
      dcl	    ZEROED_DATUM_SLOT      init (0) fixed bin (35) int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$no_element,
	    dm_error_$ci_not_in_collection,
	    dm_error_$unimplemented_ci_version,
	    error_table_$unimplemented_version
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */

      cm_info_ptr = null;
      file_opening_id = p_file_opening_id;
      collection_id = p_collection_id;

      go to JOIN;


info:
   entry (p_cm_info_ptr, p_ci_buffer_ptr, p_element_id, p_zero_on_free, p_code);

      cm_info_ptr = p_cm_info_ptr;

      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      file_opening_id = cm_info.file_oid;
      collection_id = cm_info.collection_id;

      go to JOIN;
%page;
JOIN:
      p_code, code = 0;

      element_id_string = p_element_id;

      basic_control_interval_ptr, bci_header_ptr = p_ci_buffer_ptr;

      call CHECK_CI_VERSION (bci_header.layout_type);

      if bci_header.collection_id ^= collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);

/* Verify supplied element id. */

      if element_id.index > bci_header.number_of_datums | element_id.index <= 0
      then call ERROR_RETURN (dm_error_$no_element);

/* Verify the datum slot. The slot must correspond with an allocated, non-continuation datum. */

      local_datum_slot = basic_control_interval.datum_position_table (element_id.index);

      if local_datum_slot.offset_in_bytes = FREE_SLOT | local_datum_slot.flags.is_continuation
      then call ERROR_RETURN (dm_error_$no_element);


/**** Calculate new values for scattered free space and start of used space
      and the number of datums for the control interval. */

      new_number_of_datums = bci_header.number_of_datums - 1;
      new_start_of_used_space = bci_header.start_of_used_space;
      new_scattered_free_space = bci_header.scattered_free_space;

      if local_datum_slot.offset_in_bytes = bci_header.start_of_used_space
      then new_start_of_used_space =
	      new_start_of_used_space
	      + divide (local_datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);
      else new_scattered_free_space =
	      new_scattered_free_space
	      + divide (local_datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

      if local_datum_slot.is_continued
      then
         do;

	  /*** The element is a multi-datum element. Free the trailing datums first.
	       It is necessary to get the id of the first continuation datum out of
	       this initial datum.  The routine cm_delete_cn_datum will return subsequent
	       continuation ids. It may also be necessary to get the opening info for the
	       collection (cm_info) it it has not geen goten already (cm_info_ptr=null). */

	  if cm_info_ptr = null
	  then
	     do;
	        call cm_opening_info$get (file_opening_id, collection_id, cm_info_ptr, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);
	        call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);
	     end;

	  datum_ptr = addcharno (bci_header_ptr, local_datum_slot.offset_in_bytes);
						/* continued_datum is based on datum_ptr */
	  continuation_datum_id = continued_datum.continuation;
						/* This sets continuation_datum_id_string */

	  do while (continuation_datum_id_string ^= "0"b & code = 0);

	     call cm_delete_cn_datum (cm_info_ptr, p_zero_on_free, continuation_datum_id_string, code);

	  end;

	  if code ^= 0
	  then call ERROR_RETURN (code);

         end;

/**** Shift trailing slots one slot to the left to recover the recently
      freed slot, zero-ing out the rightmost slot. */

      do slot_idx = element_id.index to new_number_of_datums;
         basic_control_interval.datum_position_table (slot_idx) =
	    basic_control_interval.datum_position_table (slot_idx + 1);
      end;

      unspec (basic_control_interval.datum_position_table (new_number_of_datums + 1)) = unspec (ZEROED_DATUM_SLOT);

      bci_header.scattered_free_space = new_scattered_free_space;
      bci_header.start_of_used_space = new_start_of_used_space;
      bci_header.number_of_datums = new_number_of_datums;

MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of ^a structure; received ^8a.", cv_p_correct_version, cv_p_structure_name,
	      cv_p_given_version);

      return;

   end CHECK_VERSION;


CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^4a control interval; received ^4a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);

      return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_datum;
%page;
%include dm_element_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_delete_buffered;
