/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:
         This   routine  frees  the  opening  information  maintained  for  a
     collection, and removes the  collection  from  the  collection_manager_'s
     per-process opening table.
*/

/* HISTORY:
Written by Matthew Pierret, 03/25/83.
Modified:
05/21/84 by Matthew Pierret: Renamed include file dm_cm_cism_info to
            dm_cism_info.
10/01/84 by Matthew Pierret: Added FREE_STORAGE routine, which actually frees
            the structures.  FINISH now calls this routine.  Added RETURN
            and ERROR_RETURN routines.  Removed "in (dm_area)" from free
            statements, as it is unnecessary, and removed declarations for
            dm_area, dm_area_ptr and get_dm_free_area_. Changed 
            REPORT_WRONG_VERSION to the standard CHECK_VERSION.

*/

/* format: style2,ind3 */

cm_free_opening_info:
   proc (p_file_opening_id, p_collection_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    collection_opening_id  bit (72) aligned;
      dcl	    (per_process_opening_table_ptr, temp_cm_info_ptr)
			       ptr;

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("cm_free_opening_info") char (32) varying internal static options (constant);
      dcl	    NO_ERRORS	       init (0) fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    cm_opening_info$opening_table_ptr
			       entry () returns (ptr);
      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$free_opening
			       entry (ptr, bit (72) aligned, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$no_opening,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code, code = 0;
      cm_info_ptr, collection_header_ptr, blocked_storage_record_ptr, unblocked_storage_record_ptr = null;

      per_process_opening_table_ptr = cm_opening_info$opening_table_ptr ();
      if per_process_opening_table_ptr = null
      then call RETURN (NO_ERRORS);

      collection_opening_id = p_file_opening_id || p_collection_id;

      call opening_manager_$get_opening (per_process_opening_table_ptr, collection_opening_id, temp_cm_info_ptr, code);
      if code ^= 0
      then if code = dm_error_$no_opening
	 then call RETURN (NO_ERRORS);
	 else call ERROR_RETURN (code);

      if temp_cm_info_ptr = null
      then call RETURN (NO_ERRORS);

      call CHECK_VERSION (temp_cm_info_ptr -> cm_info.version, CM_INFO_VERSION_2, "cm_info");
      cm_info_ptr = temp_cm_info_ptr;

      if cm_info.header_ptr ^= null
      then
         do;
	  call CHECK_VERSION (cm_info.header_ptr -> collection_header.version, COLLECTION_HEADER_VERSION_2,
	       "collection_header");

	  collection_header_ptr = cm_info.header_ptr;

	  if cm_info.storage_record_buffer_ptr ^= null
	  then if collection_header.control_interval_storage_method = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
	       then unblocked_storage_record_ptr = cm_info.storage_record_buffer_ptr;
	       else if collection_header.control_interval_storage_method = BLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
	       then blocked_storage_record_ptr = cm_info.storage_record_buffer_ptr;
         end;


      call opening_manager_$free_opening (per_process_opening_table_ptr, collection_opening_id, p_code);
      if p_code ^= 0
      then return;

      on cleanup call FINISH ();

      call FREE_STORAGE ();
MAIN_RETURN:
      return;

RETURN:
   proc (r_p_code);

      dcl	    r_p_code	       fixed bin (35);

      p_code = r_p_code;
      go to MAIN_RETURN;

   end RETURN;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      call RETURN (er_p_code);

   end ERROR_RETURN;
%page;
FINISH:
   proc ();

      call FREE_STORAGE ();

   end FINISH;

FREE_STORAGE:
   proc ();

      if cm_info_ptr ^= null
      then free cm_info;
      if collection_header_ptr ^= null
      then free collection_header;
      if blocked_storage_record_ptr ^= null
      then free blocked_storage_record;
      if unblocked_storage_record_ptr ^= null
      then free unblocked_storage_record;

   end FREE_STORAGE;
%page;
CHECK_VERSION:
   proc (cv_p_given_version, cv_p_correct_version, cv_p_structure_name);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of ^a structure; received ^8a.", cv_p_correct_version, cv_p_structure_name,
	      cv_p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_storage_record;
%page;
%include dm_cism_info;
%page;
%include sub_err_flags;
   end cm_free_opening_info;
