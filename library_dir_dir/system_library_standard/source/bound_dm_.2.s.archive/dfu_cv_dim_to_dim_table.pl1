/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   Allocate  a dimension_table with the extents supplied by the caller,  and
   selectively  copy  entries  from  the input dimension_table to the output
   dimension_table.   The id_list supplied by the caller is used to identify
   those dimensions to be copied.  If the  output  dimension_table  contains
   more  dimensions  than  the  input  dimension_table,  the entries for the
   excess dimensions are initialized to null values.
*/

/* HISTORY:

Written by Matthew Pierret, 10/04/83.
Modified:
12/07/84 by M. Sharpe:  to clean up format and dcls; to correct calls to
	  CHECK_VERSION* to pass appropriate args by reference.
*/

/* format: style2,ind3,^indblkcom */

dfu_cv_dim_to_dim_table:
   proc (p_work_area_ptr, p_number_of_dimensions, p_maximum_dimension_name_length, p_id_list_ptr,
      p_input_dimension_table_ptr, p_output_dimension_table_ptr);


/* START OF DECLARATIONS */

/* format: ll132 */

/* Parameter */

      dcl	    p_work_area_ptr	       ptr;		/* points to the area in which
						   to allocate
						   output_dimension_table. */
      dcl	    p_number_of_dimensions fixed bin (35);	/* is the number_of_dimensions
						   in output_dimension_table.  If
						   -1, the number of dimensions
						   is the same as in
						   input_dimension_table. */
      dcl	    p_maximum_dimension_name_length
			       fixed bin (35);	/* is the maximum dimension
						   name length for
						   output_dimension_table.  If
						   -1, the maximum dimension name
						   length for
						   input_dimension_table is
						   used. */
      dcl	    p_id_list_ptr	       ptr;		/* points to an id_list which
						   identifies the dimensions in
						   input_dimension_table to copy
						   to output_dimension_table.
						   The ids are the index in
						   input_dimension_table of the
						   dimensions.  If p_id_list_ptr
						   is null, copy all of the
						   dimensions. */
      dcl	    p_input_dimension_table_ptr
			       ptr;		/* points to the
						   dimension_table from which
						   dimensions are copied.  If
						   null, the
						   output_dimension_table is
						   empty. */
      dcl	    p_output_dimension_table_ptr
			       ptr;		/* points to the newly
						   allocated dimension_table. */

/* Automatic */

      dcl	    (dimension_idx, dimension_to_copy, number_of_dimensions_to_copy)
			       fixed bin (35);
      dcl	    (input_dimension_table_ptr, work_area_ptr)
			       ptr;

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

      dcl	    (addr, hbound, max, null)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dfu_cv_dim_to_dim_table") char (32) varying internal static options (constant);
      dcl	    (
	    USE_DEFAULT_NUMBER_OF_DIMENSIONS
			       init (-1),
	    USE_DEFAULT_MAXIMUM_DIMENSION_NAME_LENGTH
			       init (-1)
	    )		       fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);
						/* FOR DM_ERROR_UTIL_: Replace preceding statement with following */
						/*    dcl	    dm_error_util_$signal  entry () options (variable); */

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_output_dimension_table_ptr = null;

      work_area_ptr = p_work_area_ptr;

      input_dimension_table_ptr = p_input_dimension_table_ptr;
      if input_dimension_table_ptr = null
      then
         do;

         /*** No input_dimension_table is supplied. Set the extents from the parameters. */

	  dt_number_of_dimensions = p_number_of_dimensions;
	  dt_maximum_dimension_name_length = p_maximum_dimension_name_length;
         end;
      else
         do;

         /*** An input_dimension_table is supplied.  Verify its version. */

	  call
	     CHECK_VERSION ((input_dimension_table_ptr -> dimension_table.version), DIMENSION_TABLE_VERSION_1,
	     "dimension_table");

         /*** Set up extents for output dimension_table. */

	  if p_number_of_dimensions = USE_DEFAULT_NUMBER_OF_DIMENSIONS
	  then dt_number_of_dimensions = input_dimension_table_ptr -> dimension_table.number_of_dimensions;
						/* Get number of dimensions from input_dimension_table. */
	  else dt_number_of_dimensions = p_number_of_dimensions;
						/* Get number_of_dimensions from parameter. */

	  if p_maximum_dimension_name_length = USE_DEFAULT_MAXIMUM_DIMENSION_NAME_LENGTH
	  then dt_maximum_dimension_name_length = input_dimension_table_ptr -> dimension_table.maximum_dimension_name_length;
						/* Get maximum_dimension_name_length from input_dimension_table. */
	  else dt_maximum_dimension_name_length =
		max (p_maximum_dimension_name_length,
		input_dimension_table_ptr -> dimension_table.maximum_dimension_name_length);
						/* Use larger of parameter and input_dimension_table. */

         /*** Set up id_list structure. This is done only in this do-group because
	    an id_list is useless if no input dimension_table is specified. */

	  id_list_ptr = p_id_list_ptr;
	  if id_list_ptr = null
	  then
	     do;
	        number_of_dimensions_to_copy = input_dimension_table_ptr -> dimension_table.number_of_dimensions;
	        if number_of_dimensions_to_copy > dt_number_of_dimensions
	        then call
		      sub_err_ (0, myname, ACTION_CANT_RESTART, null, 0,
		      "The caller specified that all ^d dimensions in the input^/dimension_table be copied into the output dimension_table;^/that table can only hold ^d dimensions."
		      , number_of_dimensions_to_copy, dt_number_of_dimensions);

/*
	FOR DM_ERROR_UTIL_: Replace preceding statement with following

	        then call dm_error_util_$signal (0, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
		"The caller specified that all ^d dimensions in the input^/dimension_table be copied into the output dimension_table;^/that table can only hold ^d dimensions.",
		number_of_dimensions_to_copy, dt_number_of_dimensions);
*/
	     end;
	  else
	     do;
	        call CHECK_VERSION_FB (id_list.version, (ID_LIST_VERSION_1), "id_list");
	        number_of_dimensions_to_copy = id_list.number_of_ids;
	        if number_of_dimensions_to_copy > dt_number_of_dimensions
	        then call
		      sub_err_ (0, myname, ACTION_CANT_RESTART, null, 0,
		      "The caller-specified id_list contains ^d dimension identifiers^/but the output dimension_table can only hold ^d dimensions."
		      , number_of_dimensions_to_copy, dt_number_of_dimensions);
/*
	FOR DM_ERROR_UTIL_: Replace preceding statement with following

	        then call dm_error_util_$signal
		   (0, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
		   "The caller-specified id_list contains ^d dimension identifiers^/but the output dimension_table can only hold ^d dimensions.",
		   number_of_dimensions_to_copy, dt_number_of_dimensions);

*/
	        if number_of_dimensions_to_copy > input_dimension_table_ptr -> dimension_table.number_of_dimensions
	        then call
		      sub_err_ (0, myname, ACTION_CANT_RESTART, null, 0,
		      "The caller-specified id_list contains ^d dimension identifiers^/but the input dimension_table can only hold ^d dimensions."
		      , number_of_dimensions_to_copy, dt_number_of_dimensions);
/*
	FOR DM_ERROR_UTIL_: Replace preceding statement with following

		then call dm_error_util_$signal (0, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
		"The caller-specified id_list contains ^d dimension identifiers^/but the input dimension_table can only hold ^d dimensions.",
		number_of_dimensions_to_copy, dt_number_of_dimensions);
*/
	     end;
         end;

   /*** Allocate output dimension_table. */

      on cleanup call FINISH ();

      allocate dimension_table in (work_area);

      if input_dimension_table_ptr ^= null
      then
COPY:
         do dimension_idx = 1 to number_of_dimensions_to_copy;
	  if id_list_ptr = null
	  then dimension_to_copy = dimension_idx;
	  else if id_list.id (dimension_idx) >= 1
		& id_list.id (dimension_idx) <= hbound (input_dimension_table_ptr -> dimension_table.dimension, 1)
	  then dimension_to_copy = id_list.id (dimension_idx);
	  else call
		sub_err_ (0, myname, ACTION_CANT_RESTART, null, 0,
		"^/The id_list used to identify dimensions to copy from one dimension_table^/to another contains an identifier, ^d, that does not identify a dimension^/in the input dimension_table."
		, (id_list.id (dimension_idx)));
/*
	FOR DM_ERROR_UTIL_: Replace preceding statement with following

	       else call dm_error_util_$signal (0, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
	       "^/The id_list used to identify dimensions to copy from one dimension_table^/to another contains an identifier, ^d, that does not identify a dimension^/in the input dimension_table.",
	       (id_list.id (dimension_idx)));
*/
	  dimension_table.dimension (dimension_idx).name =
	     input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).name;
	  dimension_table.dimension (dimension_idx).descriptor_string =
	     input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).descriptor_string;
	  dimension_table.dimension (dimension_idx).cv_to_print =
	     input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).cv_to_print;
	  dimension_table.dimension (dimension_idx).cv_to_typed =
	     input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).cv_to_typed;
	  if input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).descriptor_ptr
	     = addr (input_dimension_table_ptr -> dimension_table.dimension (dimension_to_copy).descriptor_string)
	  then dimension_table.dimension (dimension_idx).descriptor_ptr =
		addr (dimension_table.dimension (dimension_idx).descriptor_string);
	  else ;					/* Allocate new descriptor. */
         end COPY;

      p_output_dimension_table_ptr = dimension_table_ptr;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     char (*);
      dcl	    p_expected_version     char (*);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);
/*
	FOR DM_ERROR_UTIL_:

      dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
        "^/Expected version ^a of the ^a structure.^/Received version ^a instead.",
        p_expected_version, p_structure_name, p_received_version);
*/
   end CHECK_VERSION;


CHECK_VERSION_FB:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
/*

        FOR DM_ERROR_UTIL_: Replace preceding statement with following

        then call dm_error_util_$signal (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART || NO_ANCILLARY_ACTIONS,
        "^/Expected version ^d of the ^a structure.^/Received version ^d instead.",
        p_expected_version, p_structure_name, p_received_version);

*/

   end CHECK_VERSION_FB;
%page;
FINISH:
   proc ();

      if dimension_table_ptr ^= null
      then free dimension_table;

   end FINISH;
%page;
%include vu_dimension_table;
%page;
%include dm_id_list;
%page;
%include sub_err_flags;
   end dfu_cv_dim_to_dim_table;
