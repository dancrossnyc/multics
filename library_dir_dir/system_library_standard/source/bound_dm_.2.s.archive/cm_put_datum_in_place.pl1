/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine places a datum in the place indicated by the supplied 
     datum slot (p_datum_slot_ptr).  It assumes that the caller has already
     determined that the datum will fit there. Four entries work as follows:
     
     $cm_put_datum_in_place - 
       (1) Update datum_slot.length_in_bits, bci_header.scattered_free_space.
       (2) Invoke file_manager_ to put:
           (a) the datum contents at the offset in datum_slot.offset_in_bytes;
           (b) the datum slot at the location indicated by p_element_id;
           (c) the bci_header at the base of the addressable control interval
     This entry assumes that p_datum_slot_ptr -> datum_slot.flags and 
     .offset_in_bytes are set correctly.
     
     $continued - 
       (1) Update datum_slot.(length_in_bits length_in_bits),
           bci_header.scattered_free_space.
       (2) Setup a local datum header using p_element_length_in_bits and
           p_continuation.
       (3) Invoke file_manager_ to put:
           (a) the datum header at the offset in datum_slot.offset_in_bytes;
           (b) the datum contents at the offset in datum_slot.offset_in_bytes
               + the length of the datum header;
           (c) the datum slot at the location indicated by p_element_id;
           (d) the bci_header at the base of the addressable control interval
     This entry assumes that p_datum_slot_ptr -> datum_slot.is_continuation &
     .offset_in_bytes are set correctly.

     $buffered - same as $cm_put_datum_in_place except:
       (2) Directly copies datum contents only.
       This entry also assumes that p_datum_slot_ptr points directly into the 
       control interval buffer.

     $buffered_continued - same as $continued except:
       (3) Directly copies (a) and (b) only.
       This entry also assumes that p_datum_slot_ptr points directly
       into the control interval buffer.
*/

/* HISTORY:
Written by Matthew Pierret.
Modified:
04/13/82 by Matthew Pierret: Fixed bug. Uninitialized element_ptr was being 
            used instead of p_element_ptr.
05/10/82 by Lindsey Spratt:  Fixed scattered_free_space calculation to account
	  for the datum header length. Extended the division of the
	  element_length_in_bits to use (35,18) as the precision and scale
	  instead of (17,2).  This is because the element_length_in_bytes
	  was coming up 1 too small when the element length wasn't an
	  integral number of bytes.
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl.pl1,
            ignore non-addressable portion of CI, change calling sequence of 
            cm_add_ci_part.
08/04/82 by Matthew Pierret: Removed calls to cm_add_ci_part, making that code
            in-line.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.  Changed to
            handle zero-length datum contents.
11/09/82 by Matthew Pierret:  Added "continued" entry for storing continued
            datums (Cd and CdCn).
01/04/83 by Matthew Pierret: Added $buffered and $buffered_continued to do
            puts into a supplied ci buffer.
01/14/83 by Lindsey Spratt:  Fixed to set bci_header_ptr = p_bci_header_ptr
	  for main entry.
01/21/83 by Matthew Pierret: Changed based_ci_string character overlay to be based_ci, a bit (9)
            array.  This was to remove the "addr(substr())" construct, which
            is not guaranteed to be correct in all cases.
10/03/84 by Matthew Pierret: Removed un-used dm_cm_entry_dcls.incl.pl1,
            substr and ceil.  Changed bit-to-byte calculation to
            divide (bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0) from
            ceil (divide (bits, BITS_PER_BYTE, 35, 18)).  The former is more
            efficient.  Changed to declare correct calling sequence of
            file_manager_$put.
12/03/84 by Matthew Pierret:  Added the local cd_datum_header and
            cdcn_datum_header, which were removed from dm_cm_datum.incl.pl1.
*/

/* format: style2,ind3 */

cm_put_datum_in_place:
   proc (p_file_opening_id, p_element_id, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_bci_header_ptr, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_datum_contents_ptr   ptr;
      dcl	    p_datum_contents_length_in_bits
			       fixed bin (35);
      dcl	    p_datum_slot_ptr       ptr;
      dcl	    p_bci_header_ptr       ptr;
      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_element_length_in_bits
			       fixed bin (35);
      dcl	    p_continuation	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    automatic_ci_parts_buffer
			       (18) fixed bin (71);	/* Max of 3 parts */
      dcl	    is_buffered	       bit (1) aligned init ("0"b);
      dcl	    replace_bci_header     bit (1) aligned init ("0"b);
      dcl	    based_byte_string_length
			       fixed bin (35) init (0);
      dcl	    datum_contents_length_in_bytes
			       fixed bin (17);
      dcl	    datum_header_length_in_bytes
			       fixed bin (35) init (0);
      dcl	    old_datum_length_in_bytes
			       fixed bin (17);
      dcl	    ci_datum_contents_ptr  ptr init (null);
      dcl	    ci_datum_header_ptr    ptr init (null);
      dcl	    datum_header_ptr       ptr init (null);

      dcl	    1 cd_datum_header      aligned like continued_datum.header;
      dcl	    1 cdcn_datum_header    aligned like continued_continuation_datum.header;

/* Based */

      dcl	    1 based_ci	       aligned based (bci_header_ptr),
	      2 byte	       (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES) bit (9) unaligned;
      dcl	    based_byte_string      char (based_byte_string_length) based;

/* Builtin */

      dcl	    (addr, divide, null, size, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    BYTES_PER_WORD	       fixed bin init (4) int static options (constant);

/* Entry */

      dcl	    file_manager_$put      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));

/* External */
/* END OF DECLARATIONS */

      bci_header_ptr = p_bci_header_ptr;
      datum_slot_ptr = p_datum_slot_ptr;

      goto JOIN;

buffered:
   entry (p_ci_buffer_ptr, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr, p_code);

      bci_header_ptr = p_ci_buffer_ptr;
      datum_slot_ptr = p_datum_slot_ptr;
      is_buffered = "1"b;

      goto JOIN;

continued:
   entry (p_file_opening_id, p_element_id, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_bci_header_ptr, p_element_length_in_bits, p_continuation, p_code);

      bci_header_ptr = p_bci_header_ptr;

      goto CD_JOIN;

buffered_continued:
   entry (p_ci_buffer_ptr, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_element_length_in_bits, p_continuation, p_code);

      bci_header_ptr = p_ci_buffer_ptr;
      is_buffered = "1"b;

CD_JOIN:
      datum_slot_ptr = p_datum_slot_ptr;

      datum_slot.flags.is_continued = "1"b;

      if p_element_length_in_bits < 0
      then
         do;
	  datum_slot.flags.is_continuation = "1"b;
	  datum_header_length_in_bytes = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;

	  unspec (cdcn_datum_header.continuation) = p_continuation;
	  datum_header_ptr = addr (cdcn_datum_header);
         end;
      else
         do;
	  datum_slot.flags.is_continuation = "0"b;
	  datum_header_length_in_bytes = CD_DATUM_HEADER_LENGTH_IN_BYTES;

	  cd_datum_header.full_length = p_element_length_in_bits;
	  unspec (cd_datum_header.continuation) = p_continuation;

	  datum_header_ptr = addr (cd_datum_header);
         end;

      goto JOIN;
%page;
JOIN:
      p_code = 0;

      datum_contents_length_in_bits = p_datum_contents_length_in_bits;
      datum_contents_length_in_bytes = divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);
      old_datum_length_in_bytes = divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

      if old_datum_length_in_bytes > datum_contents_length_in_bytes + datum_header_length_in_bytes
      then
         do;
	  bci_header.scattered_free_space =
	       bci_header.scattered_free_space + old_datum_length_in_bytes - datum_contents_length_in_bytes
	       - datum_header_length_in_bytes;

	  replace_bci_header = "1"b;
         end;

      datum_slot.length_in_bits = datum_contents_length_in_bits + datum_header_length_in_bytes * BITS_PER_BYTE;

      if is_buffered
      then
         do;
	  if datum_contents_length_in_bytes > 0
	  then
	     do;
	        based_byte_string_length = datum_contents_length_in_bytes;
	        ci_datum_contents_ptr =
		   addr (based_ci.byte (datum_slot.offset_in_bytes + datum_header_length_in_bytes + 1));
	        ci_datum_contents_ptr -> based_byte_string = p_datum_contents_ptr -> based_byte_string;
	     end;

	  if datum_header_length_in_bytes > 0
	  then
	     do;
	        based_byte_string_length = datum_header_length_in_bytes;
	        ci_datum_header_ptr = addr (based_ci.byte (datum_slot.offset_in_bytes + 1));
	        ci_datum_header_ptr -> based_byte_string = datum_header_ptr -> based_byte_string;
	     end;
         end;
      else
         do;
	  element_id_string = p_element_id;

	  automatic_ci_parts_buffer = 0;
	  ci_parts_ptr = addr (automatic_ci_parts_buffer);
	  ci_parts.number_of_parts = 0;

	  if datum_contents_length_in_bytes > 0
	  then
	     do;
	        ci_parts.number_of_parts = ci_parts.number_of_parts + 1;

	        ci_parts.part (ci_parts.number_of_parts).offset_in_bytes =
		   datum_slot.offset_in_bytes + datum_header_length_in_bytes;
	        ci_parts.part (ci_parts.number_of_parts).length_in_bytes = datum_contents_length_in_bytes;
	        ci_parts.part (ci_parts.number_of_parts).local_ptr = p_datum_contents_ptr;

	     end;

	  if datum_slot.is_continued
	  then
	     do;
	        ci_parts.number_of_parts = ci_parts.number_of_parts + 1;

	        ci_parts.part (ci_parts.number_of_parts).offset_in_bytes = datum_slot.offset_in_bytes;
	        ci_parts.part (ci_parts.number_of_parts).length_in_bytes = datum_header_length_in_bytes;
	        ci_parts.part (ci_parts.number_of_parts).local_ptr = datum_header_ptr;

	     end;

	  ci_parts.number_of_parts = ci_parts.number_of_parts + 1;

	  ci_parts.part (ci_parts.number_of_parts).offset_in_bytes =
	       BYTES_PER_WORD * ((element_id.index - 1) + size (bci_header));
	  ci_parts.part (ci_parts.number_of_parts).length_in_bytes = BYTES_PER_WORD;
	  ci_parts.part (ci_parts.number_of_parts).local_ptr = datum_slot_ptr;

	  if replace_bci_header
	  then
	     do;
	        ci_parts.number_of_parts = ci_parts.number_of_parts + 1;

	        ci_parts.part (ci_parts.number_of_parts).offset_in_bytes = 0;
	        ci_parts.part (ci_parts.number_of_parts).length_in_bytes = size (bci_header) * BYTES_PER_WORD;
	        ci_parts.part (ci_parts.number_of_parts).local_ptr = bci_header_ptr;


	     end;


	  call file_manager_$put (p_file_opening_id, (element_id.control_interval_id), ci_parts_ptr, p_code);

         end;

      return;

%page;
%include dm_cm_basic_ci;
%page;
%include dm_ci_parts;
%page;
%include dm_ci_lengths;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_cm_datum;
%page;
%include dm_element_id;

   end cm_put_datum_in_place;
