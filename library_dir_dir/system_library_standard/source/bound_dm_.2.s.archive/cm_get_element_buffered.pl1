/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */



/* DESCRIPTION

   This module implements collection_manager_$get_from_ci_buffer
   (cm_get_element_buffered$whole) and 
   collection_manager_$get_portion_from_ci_buffer 
   (cm_get_element_buffered$portion).

   This module gets the specified element.  The location of the element
   is p_position elements from p_element_id.  The data is returned in the
   buffer located at p_buffer_ptr (if it fits).  p_buffer_length is the
   bit length of that caller-supplied buffer.  If the buffer is too small
   to hold the data or the requested element is an overlength element,
   space is allocated in the provided area and the data is returned
   there.
*/

/* HISTORY:
Written by Matthew Pierret, 11/15/82.
Modified:
01/27/83 by Matthew Pierret: Enhanced error reporting ability. Added 
            consistency checks for multi-datum elements and changed to report
            certain errors getting continuation datums via sub_err_, as they
            indicate an inconsistency internal to the collection.
            Changed to use dm_error_$unimplemented_ci_version.
04/29/83 by Matthew Pierret: Changed to use addcharno instead of addr(substr())
            and dm_error_$long_return_element instead of $long_element.
            Also changed to use ERROR_RETURN routine for all error returns.
05/04/83 by Matthew Pierret:  Fixed used of addcharno.  Was adding byte too
            many on each use of addcharno. Changed to use 
            dm_error_$programming_error instead of $col_is_inconsistent.
11/07/83 by Matthew Pierret: Added $whole and $portion. $whole is the old
            behavior - return whole element. $portion returns a portion of the
            element.  Disallowed specifying element_id.index of zero.
11/17/83 by Lindsey L. Spratt:  Fixed to use the
            datum_contents_length_in_(bits bytes) in the SIMPLE_GET do-group,
            rather than referring back to datum_slot_table.length_in_bits,
            which is incorrect (too large) when doing a get_element_portion.
04/13/84 by Matthew Pierret:  Changed names of variable which contained
            "buffered_ci" to contain "ci_buffer" instead to conform with
            documentation.
05/09/84 by Matthew Pierret:  Changed to align allocated buffers on even word
            boundaries.
07/23/84 by Matthew Pierret:  Changed declaration of buffer to be fixed bin(71)
            instead allowing it to default to fixed bin (17).  Also changed
            the FINISH procedure to check buffer_ptr instead of
            p_new_buffer_was_allocated to determine if buffer should be freed.
10/01/84 by Matthew Pierret:  Changed to base all datum structures on datum_ptr
            and datum_contents_length_in_bits.  Changed to use 
            bytes = divide (bits+BITS_PER_BYTE-1, BITS_PER_BYTE, 17, 0)
            to convert bits to bytes more efficiently.  This is only used in 
            the critical path, SIMPLE_GET.
12/03/84 by Matthew Pierret:  Added the local cdcn_datum_header, which was 
            removed from dm_cm_datum.incl.pl1.
*/

/* format: style2,ind3 */

cm_get_element_buffered:
   proc ();
      call sub_err_ (dm_error_$programming_error, myname, ACTION_CAN_RESTART, null, 0, "This is not a valid entry point.")
	 ;

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_buffer_ptr	       ptr;
      dcl	    p_buffer_length	       fixed bin (35);
      dcl	    p_area_ptr	       ptr;
      dcl	    p_new_buffer_was_allocated
			       bit (1) aligned;
      dcl	    p_element_ptr	       ptr;
      dcl	    p_element_length       fixed bin (35);
      dcl	    p_portion_beginning_index
			       fixed bin (35);
      dcl	    p_portion_length       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 automatic_bci_header aligned like bci_header;
      dcl	    1 automatic_datum_slot aligned like datum_slot;
      dcl	    automatic_cip_buffer   (8) fixed bin (71) init (0, 0, 0, 0, 0, 0, 0, 0);
      dcl	    (continuation_datum_id_string, continued_datum_id_string)
			       bit (36) aligned;
      dcl	    buffer_length_in_bytes fixed bin (17) init (0);
      dcl	    ci_buffer_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    datum_contents_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    datum_contents_offset_in_bytes
			       fixed bin (17) init (0);
      dcl	    datum_header_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    element_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    old_buffer_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    slot_idx	       fixed bin (17) init (0);

      dcl	    new_buffer_allowed     bit (1) aligned init ("0"b);
      dcl	    use_supplied_buffer    bit (1) aligned init ("0"b);
      dcl	    get_whole_element      bit (1) aligned;

      dcl	    work_area_ptr	       ptr init (null);
      dcl	    buffer_ptr	       ptr init (null);
      dcl	    ci_buffer_ptr	       ptr init (null);
      dcl	    current_buffer_ptr     ptr init (null);

      dcl	    1 cdcn_datum_header    aligned like continued_continuation_datum.header;

/* Based */

      dcl	    1 continuation_datum_id
			       aligned like datum_id based (addr (continuation_datum_id_string));
      dcl	    datum_contents_string  char (datum_contents_length_in_bytes) based;
      dcl	    work_area	       area based (work_area_ptr);
      dcl	    buffer	       (buffer_length_in_bytes / BYTES_PER_DOUBLE_WORD + 1) fixed bin (71)
			       based (buffer_ptr);

/* Builtin */

      dcl	    (addcharno, addr, ceil, divide, floor, min, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("cm_get_element_buffered") char (32) varying internal static
			       options (constant);
      dcl	    BYTES_PER_DOUBLE_WORD  init (8) fixed bin int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, uns fixed bin (24), ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_in_collection,
	    dm_error_$ci_not_allocated,
	    dm_error_$no_element,
	    dm_error_$no_output_buffer,
	    dm_error_$misformatted_ci,
	    dm_error_$programming_error,
	    dm_error_$long_return_element,
	    error_table_$bad_arg
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

whole:
   entry (p_ci_buffer_ptr, p_file_opening_id, p_collection_id, p_element_id, p_buffer_ptr, p_buffer_length, p_area_ptr,
        p_new_buffer_was_allocated, p_element_ptr, p_element_length, p_code);

      get_whole_element = "1"b;
      goto JOIN;

portion:
   entry (p_ci_buffer_ptr, p_file_opening_id, p_collection_id, p_element_id, p_buffer_ptr, p_buffer_length, p_area_ptr,
        p_portion_beginning_index, p_portion_length, p_new_buffer_was_allocated, p_element_ptr, p_element_length, p_code);

      get_whole_element = "0"b;
      if p_portion_length < 1 | p_portion_beginning_index ^= 1
      then call ERROR_RETURN (error_table_$bad_arg);
      goto JOIN;

%page;
JOIN:
      p_code = 0;

      element_id_string = p_element_id;

      if element_id.control_interval_id = 0
      then ci_buffer_length_in_bytes = CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES;
      else ci_buffer_length_in_bytes = CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES;

      basic_control_interval_ptr, ci_buffer_ptr = p_ci_buffer_ptr;

      call CHECK_CI_VERSION (basic_control_interval.header.layout_type);

      if basic_control_interval.header.collection_id ^= p_collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);


      if element_id_string = "0"b | element_id.index > basic_control_interval.header.number_of_datums
      then call ERROR_RETURN (dm_error_$no_element);


/*
     Verify the existence of an output buffer and record its length.
     If no buffer is supplied, check for an area. If no area is supplied,
     the call is in error.
*/

      if p_buffer_ptr ^= null
      then
         do;
	  buffer_ptr = p_buffer_ptr;
	  buffer_length_in_bytes = floor (divide (p_buffer_length, BITS_PER_BYTE, 35, 18));
	  use_supplied_buffer = "1"b;
         end;

      if p_area_ptr ^= null
      then
         do;
	  work_area_ptr = p_area_ptr;
	  new_buffer_allowed = "1"b;
         end;

      if ^use_supplied_buffer & ^new_buffer_allowed
      then call ERROR_RETURN (dm_error_$no_output_buffer);


/*
     If no element corresponds to this datum slot, report to caller that
     the element could not be found.
*/

      if basic_control_interval.datum_position_table (element_id.index).offset_in_bytes = FREE_SLOT
	 | basic_control_interval.datum_position_table (element_id.index).flags.is_continuation
      then call ERROR_RETURN (dm_error_$no_element);


      if ^basic_control_interval.datum_position_table (element_id.index).flags.is_continued
      then
SIMPLE_GET:
         do;

/*
     The datum described by the datum slot is the entire element.  Get the 
     datum and return.
*/

	  if get_whole_element
	  then datum_contents_length_in_bits =
		  basic_control_interval.datum_position_table (element_id.index).length_in_bits;
	  else datum_contents_length_in_bits =
		  min (p_portion_length,
		  basic_control_interval.datum_position_table (element_id.index).length_in_bits);
	  datum_contents_length_in_bytes =
	       divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

	  if ^use_supplied_buffer | (use_supplied_buffer & datum_contents_length_in_bytes > buffer_length_in_bytes)
	  then if new_buffer_allowed
	       then
		do;
		   buffer_length_in_bytes = datum_contents_length_in_bytes;
		   on cleanup call FINISH ();
		   alloc buffer in (work_area);
		   p_new_buffer_was_allocated = "1"b;
		end;
	       else
		do;
		   p_element_length = datum_contents_length_in_bytes * BITS_PER_BYTE;
		   call ERROR_RETURN (dm_error_$long_return_element);
		end;


/*
     The buffer is set up and can hold the datum. Move the datum from the 
     ci_buffer to the buffer.
*/

	  datum_contents_offset_in_bytes =
	       basic_control_interval.datum_position_table (element_id.index).offset_in_bytes;

	  buffer_ptr -> datum_contents_string =
	       addcharno (ci_buffer_ptr, datum_contents_offset_in_bytes) -> datum_contents_string;

	  p_element_ptr = buffer_ptr;
	  p_element_length = datum_contents_length_in_bits;

         end SIMPLE_GET;

      else
MULTI_DATUM_GET:
         do;

/*
     The element consists of more than one datum.
*/

	  datum_ptr =
	       addcharno (ci_buffer_ptr, basic_control_interval.datum_position_table (element_id.index).offset_in_bytes)
	       ;

	  element_length_in_bytes = ceil (divide (continued_datum.header.full_length, BITS_PER_BYTE, 35, 18));

	  if use_supplied_buffer
	  then if element_length_in_bytes > buffer_length_in_bytes
	       then use_supplied_buffer = "0"b;

	  if ^use_supplied_buffer
	  then if new_buffer_allowed
	       then
		do;

/*
     A buffer must be allocated in the area to hold the element.  This may be 
     because no buffer was supplied or because the supplied buffer is too
     small to hold the entire element.
*/

		   buffer_length_in_bytes = element_length_in_bytes;
		   on cleanup call FINISH ();
		   alloc buffer in (work_area);
		   p_new_buffer_was_allocated = "1"b;

		end;
	       else
		do;
		   p_element_length = datum_contents_length_in_bytes * BITS_PER_BYTE;
		   call ERROR_RETURN (dm_error_$long_return_element);
		end;

/*
     buffer_ptr points to an appropriately sized buffer.  Copy the initial
     datum contents into the buffer. Set current_buffer_ptr to point to the end
     of the datum contents in the buffer, i.e., the place to put the next
     datum. Get the continuation datums and
     append them to the end of the retrieved element (at current_buffer_ptr).
*/

	  datum_contents_length_in_bytes =
	       ceil (
	       divide (basic_control_interval.datum_position_table (element_id.index).length_in_bits, BITS_PER_BYTE, 35,
	       18));

	  datum_contents_offset_in_bytes =
	       basic_control_interval.datum_position_table (element_id.index).offset_in_bytes;

	  buffer_ptr -> datum_contents_string =
	       addcharno (ci_buffer_ptr, datum_contents_offset_in_bytes) -> datum_contents_string;

	  current_buffer_ptr = addcharno (buffer_ptr, datum_contents_length_in_bytes);

	  continued_datum_id_string = element_id_string;
	  continuation_datum_id_string = unspec (continued_datum.header.continuation);

	  unspec (automatic_bci_header) = "0"b;
	  unspec (automatic_datum_slot) = "0"b;

	  bci_header_ptr = addr (automatic_bci_header);
	  datum_slot_ptr = addr (automatic_datum_slot);

	  ci_parts_ptr = addr (automatic_cip_buffer);

GET_EACH_DATUM_LOOP:
	  do while (continuation_datum_id_string ^= "0"b & element_length_in_bytes > 0);

	     unspec (cdcn_datum_header.continuation) = "0"b;

	     call cm_get_bci_header$slot (p_file_opening_id, bci_header_ptr, datum_slot_ptr,
		continuation_datum_id_string, p_code);
	     if p_code ^= 0
	     then if p_code = dm_error_$no_element | p_code = dm_error_$ci_not_allocated
		     | p_code = dm_error_$misformatted_ci
		then call REPORT_MULTI_DATUM_INCONSISTENCY (addr (continued_datum_id_string)
			-> element_id.control_interval_id, addr (continued_datum_id_string) -> element_id.index,
			continuation_datum_id.control_interval_id, continuation_datum_id.index, p_code);
		else call ERROR_RETURN (p_code);


	     call VERIFY_MULTI_DATUM_CONSISTENCY (addr (continued_datum_id_string) -> element_id.control_interval_id,
		addr (continued_datum_id_string) -> element_id.index, p_collection_id,
		continuation_datum_id.control_interval_id, continuation_datum_id.index, bci_header.collection_id,
		(datum_slot.offset_in_bytes = FREE_SLOT), (^datum_slot.flags.is_continuation));

	     if datum_slot.flags.is_continued
	     then datum_header_length_in_bytes = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;
	     else datum_header_length_in_bytes = 0;

	     datum_contents_length_in_bytes =
		ceil (divide (datum_slot.length_in_bits, BITS_PER_BYTE, 35, 18)) - datum_header_length_in_bytes;

	     ci_parts.number_of_parts = 1;

	     ci_parts.part (1).offset_in_bytes = datum_slot.offset_in_bytes + datum_header_length_in_bytes;
	     ci_parts.part (1).length_in_bytes = datum_contents_length_in_bytes;
	     ci_parts.part (1).local_ptr = current_buffer_ptr;

	     if datum_slot.flags.is_continued
	     then
	        do;

		 ci_parts.number_of_parts = 2;
		 ci_parts.part (2).offset_in_bytes = datum_slot.offset_in_bytes;
		 ci_parts.part (2).length_in_bytes = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;
		 ci_parts.part (2).local_ptr = addr (cdcn_datum_header);

	        end;

	     call file_manager_$get (p_file_opening_id, (continuation_datum_id.control_interval_id), ci_parts_ptr,
		p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);


	     current_buffer_ptr = addcharno (current_buffer_ptr, datum_contents_length_in_bytes);

	     element_length_in_bytes = element_length_in_bytes - datum_contents_length_in_bytes;

	     continued_datum_id_string = continuation_datum_id_string;
	     continuation_datum_id = cdcn_datum_header.continuation;

	  end GET_EACH_DATUM_LOOP;


	  p_element_ptr = buffer_ptr;
	  p_element_length = continued_datum.header.full_length;

         end MULTI_DATUM_GET;


RETURN:
      return;
%page;
FINISH:
   proc ();

      if buffer_ptr ^= null & buffer_ptr ^= p_buffer_ptr & buffer_ptr ^= p_element_ptr
      then
         do;
	  free buffer in (work_area);
	  p_new_buffer_was_allocated = "0"b;
         end;

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;
      dcl	    dm_error_$unimplemented_ci_version
			       ext fixed bin (35);

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, "s", null, 0,
	      "^/Expected version ""^4a"" control interval; received ""^4a"".", BASIC_CI_LAYOUT_1, ccv_p_given_version);

      return;

   end CHECK_CI_VERSION;
%page;
REPORT_MULTI_DATUM_INCONSISTENCY:
   proc (rmdi_p_cd_ci, rmdi_p_cd_index, rmdi_p_cn_ci, rmdi_p_cn_index, rmdi_p_code);

      dcl	    (rmdi_p_cd_ci, rmdi_p_cn_ci)
			       fixed bin (24) unsigned unaligned;
      dcl	    (rmdi_p_cd_index, rmdi_p_cn_index)
			       fixed bin (12) unsigned unaligned;
      dcl	    rmdi_p_code	       fixed bin (35);

      call sub_err_ (rmdi_p_code, ACTION_CANT_RESTART, null, 0,
	 "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d. ^[^s^a^;^[^a^s^;^s^a^]"
	 , rmdi_p_cd_ci, rmdi_p_cd_index, rmdi_p_cn_ci, rmdi_p_cn_index, (rmdi_p_code = dm_error_$no_element),
	 (rmdi_p_code = dm_error_$ci_not_allocated), "That slot is a free slot.",
	 "That control interval is not allocated for use.", "That control interval is incorrectly formatted.");

   end REPORT_MULTI_DATUM_INCONSISTENCY;
%page;
VERIFY_MULTI_DATUM_CONSISTENCY:
   proc (vmdi_p_cd_ci, vmdi_p_cd_index, vmdi_p_cd_collection_id, vmdi_p_cn_ci, vmdi_p_cn_index, vmdi_p_cn_collection_id,
        vmdi_p_cn_slot_is_free, vmdi_p_cn_slot_is_not_continuation);

      dcl	    (vmdi_p_cd_ci, vmdi_p_cn_ci)
			       fixed bin (24) unsigned unaligned;
      dcl	    (vmdi_p_cd_index, vmdi_p_cn_index)
			       fixed bin (12) unsigned unaligned;
      dcl	    (vmdi_p_cd_collection_id, vmdi_p_cn_collection_id)
			       bit (36) aligned;
      dcl	    (vmdi_p_cn_slot_is_free, vmdi_p_cn_slot_is_not_continuation)
			       bit (1) aligned;

      if vmdi_p_cn_collection_id ^= vmdi_p_cd_collection_id
      then call sub_err_ (dm_error_$programming_error, ACTION_CANT_RESTART, null, 0,
	      "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d, but the two are in different collections.^/The former is in collection ^3bo;^/the latter is in collection ^3bo."
	      , vmdi_p_cd_ci, vmdi_p_cd_index, vmdi_p_cn_ci, vmdi_p_cn_index, vmdi_p_cd_collection_id,
	      vmdi_p_cn_collection_id);
      else if vmdi_p_cn_slot_is_free | vmdi_p_cn_slot_is_not_continuation
      then call sub_err_ (dm_error_$programming_error, ACTION_CANT_RESTART, null, 0,
	      "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d. ^[^That slot ^[is free^;is not a continuation datum^]."
	      , vmdi_p_cd_ci, vmdi_p_cd_index, vmdi_p_cn_ci, vmdi_p_cn_index, vmdi_p_cn_slot_is_free);

   end VERIFY_MULTI_DATUM_CONSISTENCY;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_element_id;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_ci_lengths;
%page;
%include dm_ci_parts;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_get_element_buffered;
