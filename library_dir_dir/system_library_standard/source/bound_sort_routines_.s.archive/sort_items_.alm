" **********************************************************************
" *                                                                    *
" * This is in the PUBLIC DOMAIN and may be copied without permission. *
" *                                                                    *
" **********************************************************************
sort_items_:				"just a program label

	name sort_items_			"define objectname

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"This is an ALM version of sort_items_.pl1, written at AFDSC/CMMS.  The
"   program provides a generalized sorting facility for several unique data
"   types.  It uses a vector of unaligned pointers to the items to be sorted.
"   The program then sorts the pointers, leaving the data untouched.  This
"   program is written to replace the system program sort_items_.  Entry
"   points are identical, with only the algorithm changed.
"The outstanding feature of sort_items_.alm is its heavy dependence on
"   hardware registers as program storage.  This reduces the necessity
"   to access main memory and allows the program to operate more directly
"   on the hardware.
"The algorithm used by the program is the heapsort algorithm as stated by
"   Knuth's "The Art of Computer Programming", (vol. 3, pp 146-147) with
"   the modification suggested in Exercise 18 (problem pg 158, answer pg 618).
"There are three major coding sections: init, fix_heap, and sort_heap.
"   Each section will document current register usage.
"The maximum number of data items is 261119!!

"Converted from PL/I March 1982  @ AFDSC/CMMS by LT F. Patrick Clark,
"   USAF and Lee A. Newcomb, HISI.
"Modified April, 1983 by LT F. Patrick Clark (AFDSC/CMMS) to change
"   sub_err_ flag parameter and clean up documentation.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"ENTRIES:
"   1) sort_items_$fixed_bin - sorts fixed bin (35) numbers
"   declaration --> declare sort_items_$fixed_bin entry (ptr);
"   usage --> call sort_items_$fixed_bin (vec_ptr);
"
"   2) sort_items_$float_bin - sorts float bin (63) numbers
"   declaration --> declare sort_items_$float_bin entry (ptr);
"   usage --> call sort_items_$float_bin (vec_ptr);
"
"   3) sort_items_$char - sorts nonvarying character strings
"   declaration --> declare sort_items_$char entry (ptr, fixed bin (24));
"   usage --> call sort_items_$char (vec_ptr, str_length);
"
"   4) sort_items_$bit - sorts nonvarying bit strings
"   declaration --> declare sort_items_$bit entry (ptr, fixed bin (24));
"   usage --> call sort_items_$bit (vec_ptr, str_length);
"
"   5) sort_items_$varying_char -- sorts varying character strings
"   declaration --> declare sort_items_$varying_char entry (ptr);
"   usage --> call sort_items_$varying_char (vec_ptr);
"
"   6) sort_items_$general -- sorts items based on a user defined function
"   declaration --> declare sort_items_$general entry (ptr, entry);
"   usage --> call sort_items_$general (vec_ptr, function_name);
"
"   where:
"      vec_ptr - points to a structure of pointers of items to be sorted.  It has
"	the form:
"		dcl 01 vec aligned,
"		       02 n fixed bin (24),
"		       02 vector (vec.n) ptr unaligned;
"      str_length - data string length for $bit or $char entries.
"      function_name - name of a user defined function which states the
"	relationship between two data items.  It must have the following
"	format:
"	declaration --> declare function entry (ptr unaligned, ptr unaligned)
"			returns (fixed bin (1));
"	usage --> value = function (ptr_1st_item, ptr_2nd_item);
"
"	where:
"	   ptr_1st_item - is an unaligned ptr to the first data item
"	   ptr_2nd_item - is an unaligned ptr to the second data item
"	   value - is the result of comparing the two items.  It can be:
"	      < 0 => first item < second item
"	      >=0 => first item >= second item
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"the six entries
	 entry fixed_bin,float_bin,char,bit,varying_char,general

"define stack frame temporaries, largest first
	temp8	arg_list_1,arg_list_2,arg_list_3	"area for arg lists
	tempd	arg_list_4		"arg list area, connected to temp8's above
	temp	general_pptr_1,general_pptr_2,general_value	"$general function args
	temp	N_in_upper		"loop index temporary
	temp	error_value		"error value for sub_err_

"define constants for sub_err_ call
total_items_err_msg:
	aci	/Item count outside legal bounds./

string_length_err_msg:
	aci	/Data length ouside legal bounds./

program_name:
	aci	/sort_items_/

sub_err_flag:
	oct	000000000000

fixed_35_desc:
	oct	404000000043

program_name_desc:
	oct	526000000013

sub_err_flag_desc:
	oct	516000000044

ptr_desc:
	oct	464000000000

err_msg_desc:
	oct	526000000040
"
	include	stack_header
"
	include	stack_frame
"
"We use label arrays similar to those used by PL/1 in code generation.
label_vec_A:				"for 1st case statement
	tra  	compare0_A
	tra	compare1_A
	tra	compare2_A
	tra	compare3_A
	tra	compare4_A
	tra	compare5_A

label_vec_B:				"for 2nd case statement
	tra	compare0_B
	tra	compare1_B
	tra	compare2_B
	tra	compare3_B
	tra	compare4_B
	tra	compare5_B

label_vec_C:				"for 3rd case statement
	tra	compare0_C
	tra	compare1_C
	tra	compare2_C
	tra	compare3_C
	tra	compare4_C
	tra	compare5_C

label_vec_D:				"for 4th case statemtent
	tra	compare0_D
	tra	compare1_D
	tra	compare2_D
	tra	compare3_D
	tra	compare4_D
	tra	compare5_D
"
init:					"just a section label
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"This is the init section of sort_items_.  Each of the six possible entries
"   pushes a stack frame and sets registers as needed.  The parameters
"   of the entry points are found and put in registers or local storage
"   in order to eliminate the parameter passing mechanisms usually needed
"   for each reference.
"This section also gets and verifies the second parameter of the entries
"   that have one.  The $char and $bit entries put the parameter
"   in $A, WHICH MUST NOT BE CHANGED BY ANY OTHER PART OF THOSE ENTRIES!!
"   The $general entry creates the function argument list and sets $PR0 to
"   point to it, and set $PR2 to point to the function entry value.
"   Register usage is as follows:
"   PR0 -- initially is addr (agrument list)
"	 later has addr (arg_list) {$general entry ONLY!!}
"   PR2 -- function entry ptr {$general entry ONLY!!}
"   PR4 -- addr (linkage section)
"   PR5 -- addr (ptr array base)
"   PR6 -- addr (stack frame)
"   PR7 -- addr (stack base)
"   X7 -- data type as defined by entry point called
"   A -- data string length {$char, $bit entries ONLY!!}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
fixed_bin:				"entry (vec_ptr)
	push
	ldx7	1,du			"data type by definition
	tra	common-*,ic		"go get parameter
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
float_bin:				"entry (vec_ptr)
	push
	ldx7	2,du			"data type by definition
	tra	common-*,ic		"go get parameter
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
char:					"entry (vec_ptr, str_length)
	push
	ldx7	3,du			"data type by definition
	epp1	pr0|4,*			"addr (data string length)
	ldq	pr1|0			"data string length
	tmi	string_length_err-*,ic	"if < 0, got bad arg
	qrs	2			"convert characters to words
	tra	string_length_compare-*,ic	"validate arg
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
bit:					"entry (vec_ptr, str_length)
	push
	ldx7	4,du			"data type by definition
	epp1	pr0|4,*			"addr (data string length)
	ldq	pr1|0			"data string length
	tmi	string_length_err-*,ic	"if < 0, got bad arg
	div	36,dl			"convert bits to words
	tra	string_length_compare-*,ic	"validate arg
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
varying_char:				"entry (vec_ptr)
	push
	ldx7	5,du			"data type by definition
	tra	common-*,ic		"go get parameter
"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
general:					"entry (vec_ptr, function)
	push
	ldx7	0,du			"data type by definition
	epp1	pr0|4,*			"addr (addr (entry pair))
	epp2	pr1|2,*			"environment ptr
	spri2	arg_list_2		"store in arg list
	epp2	pr1|0,*			"addr (user function)
	fld	6144,dl			"get arg list header
	ora	8,dl			"call type where environment ptr is used
	staq	arg_list_1		"store arg list header
	epp1	general_value		"addr (return value)
	spri1	arg_list_1+6		"store as 3rd parameter
	epp1	general_pptr_1		"addr (1st packed ptr)
	spri1	arg_list_1+2		"store as 1st parameter
	epp1	general_pptr_2		"addr (2nd packed ptr)
	spri1	arg_list_1+4		"store as 2nd parameter
	tra	common-*,ic		"go get parameter
"
string_length_compare:			"verify string length
	cmpq	sys_info$max_seg_size	"larger than a segment??
	tmoz	length_good-*,ic		"no, set data length

string_length_err:
	epp3	string_length_err_msg-*,ic	"get error message
	spri3	arg_list_2+4		"store in arg list

sub_err_call:
	ldq	error_table_$out_of_bounds	"get error value
	stq	error_value		"save for sub_err_ call
	lda	12,du			"get number of args
	ora	4,dl			"get call type
	ldq	12,du			"get number of descriptors
	staq	arg_list_1		"store arg list header
	epp3	error_value		"addr (error value)
	spri3	arg_list_1+2		"store in arg list
	epp3	program_name-*,ic		"addr (program name)
	spri3	arg_list_1+4		"store in arg list
	epp3	sub_err_flag-*,ic		"addr (sub_err_ flag)
	spri3	arg_list_1+6		"store in arg list
	epp3	pr7|stack_header.parent_ptr	"addr (null ptr)
	spri3	arg_list_2		"store in arg list
	epp3	general_value		"addr (return value)
	stz	pr3|0			"zero return value
	spri3	arg_list_2+2		"store in arg list
	epp3	fixed_35_desc-*,ic		"addr (fixed bin (35) descriptor))
	spri3	arg_list_2+6		"store in arg list
	spri3	arg_list_3+6		"store again for return value
	epp3	program_name_desc-*,ic	"addr (character string descriptor)
	spri3	arg_list_3		"store in arg list
	epp3	sub_err_flag_desc-*,ic	"addr (character string descriptor)
	spri3	arg_list_3+2		"store in arg list
	epp3	ptr_desc-*,ic		"addr (ptr descriptor)
	spri3	arg_list_3+4		"store in arg list
	epp3	err_msg_desc-*,ic		"get error message descriptor
	spri3	arg_list_4		"store in arg list
	call	sub_err_$sub_err_(arg_list_1)	"call sub_err_
	return				"leave program
"
length_good:				"set data length in $A!!
	lda	pr1|0			"get data length

common:					"verify array ptr size is in bounds
	epp5	pr0|2,*			"addr (addr (ptr array base))
	epp5	pr5|0,*			"addr (ptr array base)
	ldq	pr5|0			"number of items to sort
	tmi	items_err-*,ic		"if < 0, got bad arg
	cmpq	sys_info$max_seg_size	"larger than a segment??
	tmi	n_elems_ok-*,ic		"no, continue processing

items_err:				"have error, can't go on
	epp3	total_items_err_msg-*,ic	"get error message
	spri3	arg_list_2+4		"put in arg list
	tra	sub_err_call-*,ic		"report problems

n_elems_ok:
	cmpq	2,dl			"0 or 1 item in array??
	trc	store_vars-*,ic		"no, have to do sort
	return				"yes, sort finished

store_vars: 
	qls	18			"move total items to $QU
	stq	N_in_upper		"store total items count
	cmpx7	0,du			"is it $general entry??
	tnz	fix_heap-*,ic		"no, start sort
	epp0	arg_list_1		"yes, set $PR0 to arg list
"
fix_heap:					"just a section label
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"This is the fix_heap section of sort_items_indirect_.  It creates a
"   heap, which is an almost complete binary tree in which each node is
"   less than or equal to its father.  Register usage is as follows:
"   PR0 -- addr (arg_list) {$general entry ONLY!!}
"   PR1 -- right son ptr (if one exists)
"   PR2 -- function entry ptr {$general entry ONLY!!}
"   PR3 -- larger son ptr (initially assumed to be left son)
"   PR4 -- parent ptr
"   PR5 -- addr (ptr array base)
"   PR6 -- addr (stack frame)
"   PR7 -- addr (stack base)
"   X4 -- larger child index (initially assumed to be left son index)
"   X5 -- parent index
"   X6 -- FH_do_i loop control variable
"   X7 -- data type as defined by entry point
"   A -- data string length {$char, $bit entries ONLY!!}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	ldq	pr5|0			"put total items in $Q
	qrl	1			"divide by shifting bits right
	eax6	0,ql			"load loop start value from $Q
	tra	FH_loop_start-*,ic		"goto loop start

FH_do_i:					"start of do i loop, or
compareB_else:				"no switch was made this time, or
FH_do_while_end:				"do while done, try do i again
	sprp4	pr5|0,x5			"son ptr = parent ptr
	sblx6	1,du			"decrement loop index by 1

FH_loop_start:
	tze	sort_heap-*,ic		"loop finished, go to sort_heap
	eax5	0,x6			"loop index is parent index
	lprp4	pr5|0,x5			"get parent ptr

FH_do_while:				"walk parent branch, swap up if son > parent
	eaq	0,x5			"put parent index in $Q
	qls	1			"*2, gives left son index
	eax4	0,qu			"assume left son is larger
	cmpx4	N_in_upper		"is left son index <= ptr array bound??
	tnc	FH_two_sons-*,ic		"have two sons
	tnz	FH_do_while_end-*,ic	"too big, try do i loop again
	lprp3	pr5|0,x4			"get left son ptr
	tra	label_vec_B,x7*		"find larger of son and parent

FH_two_sons:
	lprp3	pr5|0,x4			"get left son ptr
	lprp1	pr5|1,x4			"get right son ptr
	tra	label_vec_A,x7*		"find larger of sons
"
compare0_A:				"for $general entry
	sprp3	general_pptr_1		"store left son ptr
	sprp1	general_pptr_2		"store right son ptr
	"call pseudo-op simulated to call function
	spri	pr6|0			"save all PR's
	sreg	pr6|stack_frame.regs	"save rest of registers
	tsp4	pr7|stack_header.call_op_ptr,*     "use stack header ptr to call
	lpri	pr6|0			"reclaim our PR's
	lreg	pr6|stack_frame.regs	"reclaim rest of registers
	"test function return value
	szn	general_value		"is left son data < right son data??
	tpl	compare0_B-*,ic		"no, left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare0_B:				"for $general entry
	sprp4	general_pptr_1		"store parent ptr
	sprp3	general_pptr_2		"store son ptr
	"call pseudo-op simulated to call function
	spri	pr6|0			"save all PR's
	sreg	pr6|stack_frame.regs	"save rest of registers
	tsp4	pr7|stack_header.call_op_ptr,*     "use stack header ptr to call
	lpri	pr6|0			"reclaim our PR's
	lreg	pr6|stack_frame.regs	"reclaim rest of registers
	"test function return value
	szn	general_value		"is parent data < son data??
	tpl	compareB_else-*,ic		"no, parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
compare1_A:				"for $fixed_bin entry
	ldq	pr3|0			"left son data
	cmpq	pr1|0			"is left son data < right son data??
	tpl	compare1_B-*,ic		"no, left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare1_B:				"for $fixed_bin entry
	ldq	pr4|0			"parent data
	cmpq	pr3|0			"is parent data < son data??
	tpl	compareB_else-*,ic		"no, parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
compare2_A:				"for $float_bin entry
	dfld	pr3|0			"left son data
	dfcmp	pr1|0			"is left son data < right son data??
	tpl	compare2_B-*,ic		"no, left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare2_B:				"for $float_bin entry
	dfld	pr4|0			"parent data
	dfcmp	pr3|0			"is parent data < son data??
	tpl	compareB_else-*,ic		"no, parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
compare3_A:				"for $char entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|0,al			"left son data
	  desc9a	pr1|0,al			"right son data
	trc	compare3_B-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare3_B:				"for $char entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr4|0,al			"parent data
	  desc9a	pr3|0,al			"son data
	trc	compareB_else-*,ic		"parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
compare4_A:				"for $bit entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpb	(pr,rl),(pr,rl),fill(0)	"compare two bit strings
	  descb	pr3|0,al			"left son data
	  descb	pr1|0,al			"right son data
	trc	compare4_B-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare4_B:				"for $bit entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpb	(pr,rl),(pr,rl),fill(0)	"compare two bit strings
	  descb	pr4|0,al			"parent data
	  descb	pr3|0,al			"son data
	trc	compareB_else-*,ic		"parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
compare5_A:				"for $varying_char entry
	lda	pr3|0			"left son data length
	ldq	pr1|0			"right son data length
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|1,al			"left son data
	  desc9a	pr1|1,ql			"right son data
	trc	compare5_B-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

compare5_B:				"for $varying_char entry
	lda	pr4|0			"parent data length
	ldq	pr3|0			"son data length
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare the two strings
	  desc9a	pr4|1,al			"parent data
	  desc9a	pr3|1,ql			"son data
	trc	compareB_else-*,ic		"parent is larger
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	FH_do_while-*,ic		"compare parent with new sons
	tra	FH_do_while_end-*,ic	"if bit 0 on, parent index *2 BIG, quit
"
sort_heap:				"just a program label
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"This is the sort_heap section of sort_items_.  It sorts the heap by
"   putting the root node value in its proper place and adjusting the
"   remaining heap, producing a new root node value.  Register
"   usage is as follows:
"   PR0 -- addr (arg_list) {$general entry ONLY!!}
"   PR1 -- right son ptr (if one exists)
"   PR2 -- function entry ptr {$general entry ONLY!!}
"   PR3 -- larger son ptr for compare C (initially assumed to be left son)
"	 parent ptr for compare D
"   PR3 -- larger son ptr (initially assumed to be left son)
"   PR4 -- last leaf ptr
"   PR5 -- addr (ptr array base)
"   PR6 -- addr (stack frame)
"   PR7 -- addr (stack base)
"   X4 -- larger child index (initially assumed to be left son index)
"   X5 -- parent index
"   X6 -- SH_do_i loop control variable
"   X7 -- data type as defined by entry point
"   A -- data string length {$char, $bit entries ONLY!!}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
	ldx6	N_in_upper		"put total items in loop counter
	tra	SH_loop_start-*,ic		"goto loop start

SH_do_i:					"start of do i loop, or
compareD_then:				"finished backing up tree, or
SH_do_while_end:				"do while done, try do i again
	sprp4	pr5|0,x4			"son ptr = last leaf ptr

SH_loop_start:
	sblx6	1,du			"decrement loop index by 1
	tze	sort_end-*,ic		"loop done, goto sort_end
	stx6	N_in_upper		"store counter index bound
	lprp4	pr5|1,x6			"get last leaf ptr
	ldq	pr5|1			"get root ptr
	stq	pr5|1,x6			"last leaf storage = root ptr
	ldx5	1,du			"parent index = 1

SH_do_while:				"walk tree, swap up if son > last leaf
	eaq	0,x5			"put parent index in $Q
	qls	1			"multiply by 2
	eax4	0,qu			"put in larger child index
	cmpx4	N_in_upper		"is larger son index <= loop index??
	tnc	SH_two_sons-*,ic		"have two sons
	tze	SH_one_son-*,ic		"have one son
	eax4	0,x5			"too big, get old value
	tra	label_vec_D,x7*		"go back up tree

SH_two_sons:
	lprp3	pr5|0,x4			"get left son ptr
	lprp1	pr5|1,x4			"get right son ptr
	tra	label_vec_C,x7*		"find larger of sons

SH_one_son:
	lprp3	pr5|0,x4			"get larger son ptr
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons
	tra	label_vec_D,x7*		"else go back up tree
"
compare0_C:				"for $general entry
	sprp3	general_pptr_1		"left son ptr
	sprp1	general_pptr_2		"right son ptr
	"call pseudo-op simulated to call function
	spri	pr6|0			"save all PR's
	sreg	pr6|stack_frame.regs	"save rest of registers
	tsp4	pr7|stack_header.call_op_ptr,*     "use stack header ptr to call
	lpri	pr6|0			"reclaim our PR's
	lreg	pr6|stack_frame.regs	"reclaim rest of registers
	"test function return value
	szn	general_value		"is left son data < right son data??
	tpl	assignment0_C-*,ic		"no, left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment0_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare0_D:				"for $general entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	sprp3	general_pptr_1		"set parent ptr
	sprp4	general_pptr_2		"set last leaf ptr
	"call pseudo-op simulated to call function
	spri	pr6|0			"save all PR's
	sreg	pr6|stack_frame.regs	"save rest of registers
	tsp4	pr7|stack_header.call_op_ptr,*     "use stack header ptr to call
	lpri	pr6|0			"reclaim our PR's
	lreg	pr6|stack_frame.regs	"reclaim rest of registers
	"test function return value
	szn	general_value		"is parent data < last leaf data??
	tpl	compareD_then-*,ic		"no, parent is larger
	sprp3	pr5|0,x4			"son ptr = parent ptr
	eax4	0,x5			"son index = parent index
	tra	compare0_D-*,ic		"go back up tree
"
compare1_C:				"for $fixed_bin entry
	ldq	pr3|0			"left son data
	cmpq	pr1|0			"is left son data < right son data??
	tpl	assignment1_C-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment1_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare1_D:				"for $fixed_bin entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	ldq	pr3|0			"parent data
	cmpq	pr4|0			"is parent data < last leaf data??
	tpl	compareD_then-*,ic		"no, parent is larger
	sprp3	pr5|0,x4			"son ptr = parent ptr
	eax4	0,x5			"son index = parent index
	tra	compare1_D-*,ic		"go back up tree
"
compare2_C:				"for $float_bin entry
	dfld	pr3|0			"left son data
	dfcmp	pr1|0			"is left son data < right son data??
	tpl	assignment2_C-*,ic		"no, left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment2_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare2_D:				"for $float_bin entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	dfld	pr3|0			"parent data
	dfcmp	pr4|0			"is parent data < last leaf data??
	tpl	compareD_then-*,ic		"no, parent is larger
	sprp3	pr5|0,x4			"son index = parent index
	eax4	0,x5			"son index = parent index
	tra	compare2_D-*,ic		"go back up tree
"
compare3_C:				"for $char entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|0,al			"left son data
	  desc9a	pr1|0,al			"right son data
	trc	assignment3_C-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment3_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare3_D:				"for $char entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|0,al			"parent data
	  desc9a	pr4|0,al			"last leaf data
	trc	compareD_then-*,ic		"parent is larger
	sprp3	pr5|0,x4			"son ptr = parent ptr
	eax4	0,x5			"son index = parent index
	tra	compare3_D-*,ic		"go back up tree
"
compare4_C:				"for $bit entry
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpb	(pr,rl),(pr,rl),fill(0)	"compare two bit strings
	  descb	pr3|0,al			"left son data
	  descb	pr1|0,al			"right son data
	trc	assignment4_C-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment4_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare4_D:				"for $bit entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	"N. B. data string length is in $A, DO NOT DESTROY!!
	cmpb	(pr,rl),(pr,rl),fill(0)	"compare two bit strings
	  descb	pr3|0,al			"parent data
	  descb	pr4|0,al			"last leaf data
	trc	compareD_then-*,ic		"parent is larger
	sprp3	pr5|0,x4			"son ptr = parent ptr
	eax4	0,x5			"son index = parent index
	tra	compare4_D-*,ic		"go back up tree
"
compare5_C:				"for $varying_char entry
	lda	pr3|0			"left son data length
	ldq	pr1|0			"right son data length
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|1,al			"left son data
	  desc9a	pr1|1,ql			"right son data
	trc	assignment5_C-*,ic		"left son is larger
	adlx4	1,du			"larger son index = right son index
	epp3	pr1|0			"larger son ptr = right son ptr

assignment5_C:
	sprp3	pr5|0,x5			"parent ptr = son ptr
	eax5	0,x4			"parent index = son index
	tpl	SH_do_while-*,ic		"compare parent with new sons

compare5_D:				"for $varying_char entry
	eaq	0,x4			"put son index in $Q
	qrl	1			"divide by shifting bits right
	eax5	0,qu			"put in parent index
	tze	compareD_then-*,ic		"if = 0, try do i loop again
	lprp3	pr5|0,x5			"get parent ptr
	lda	pr3|0			"parent data length
	ldq	pr4|0			"last leaf data length
	cmpc	(pr,rl),(pr,rl),fill(040)	"compare two strings
	  desc9a	pr3|1,al			"parent data
	  desc9a	pr4|1,ql			"last leaf data
	trc	compareD_then-*,ic		"parent is larger
	sprp3	pr5|0,x4			"son ptr = parent ptr
	eax4	0,x5			"son index = parent index
	tra	compare5_D-*,ic		"go back up tree

sort_end:					"sort finished, go home
	return
	end				"program done
