/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style4 */

/* DIAL_MANAGER_CALL - Command interface to dial_manager_ */

/* Written February 1979 by Larry Johnson */
/* Modified December 1980 by E. N. Kittlitz for V2 dial_manager_arg, new dial_manager functions */
/* Modified 84-04-12 BIM for access_class */

dial_manager_call: procedure options (variable);

/* Automatic */

dcl  code fixed bin (35);
dcl  save_code fixed bin (35);
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  entry entry (ptr, fixed bin (35)) variable;
dcl  next_arg fixed bin;
dcl  arg_count fixed bin;

dcl  io_module char (32);
dcl  n_dialed fixed bin;
dcl  channel_name char (32);
dcl  1 status_flags aligned,
       2 dialed_up bit (1) unal,
       2 hung_up bit (1) unal,
       2 control bit (1) unal,
       2 pad bit (33) unal;

dcl  1 auto_dial_manager_arg like dial_manager_arg aligned automatic;
dcl  dmap ptr;

/* Based */

dcl  arg char (arg_len) based (arg_ptr);

/* Internal static */

dcl  static_channel fixed (71) int static init (0);
dcl  static_channel_is_wait bit (1) int static;		/* Current state of chanel - wait/call */
dcl  reporting_enabled bit (1) init ("1"b) int static;

/* Constants */

dcl  name char (17) int static options (constant) init ("dial_manager_call");

/* External */

dcl  iox_$user_output ptr ext static;

dcl  convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_wait_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  convert_dial_message_$return_io_module entry (fixed bin (71), char (*), char (*), fixed bin,
	1 aligned like status_flags, fixed bin (35));

dcl  (dial_manager_$allow_dials,
     dial_manager_$registered_server,
     dial_manager_$dial_out,
     dial_manager_$release_channel,
     dial_manager_$release_channel_no_hangup,
     dial_manager_$release_channel_no_listen,
     dial_manager_$release_dial_id,
     dial_manager_$shutoff_dials,
     dial_manager_$privileged_attach,
     dial_manager_$tandd_attach,
     dial_manager_$terminate_dial_out) entry (ptr, fixed bin (35));

dcl  (addr, null) builtin;

/* Setup event channel for this program */

	if static_channel = 0 then do;
	     call ipc_$create_ev_chn (static_channel, code);
	     if code ^= 0 then do;
		call convert_ipc_code_ (code);
		call com_err_ (code, name, "Unable to create event channel.");
		static_channel = 0;
		return;
	     end;
	     else static_channel_is_wait = "1"b;
	end;

/* Initialize dial_manager_args */

	dmap = addr (auto_dial_manager_arg);
	dmap -> dial_manager_arg.version = dial_manager_arg_version_4;
	dmap -> dial_manager_arg.dial_qualifier = "";
	dmap -> dial_manager_arg.dial_channel = static_channel;
	dmap -> dial_manager_arg.channel_name = "";
	dmap -> dial_manager_arg.reservation_string = "";
	dmap -> dial_manager_arg.dial_out_destination = "";
	dmap -> dial_manager_arg.access_class = ""b;
	dmap -> dial_manager_arg.flags = "0"b;

/* Process arguments */

	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, "dial_manager_call");
	     return;
	end;

	next_arg = 1;
	call get_arg ("Usage: dial_manager_call request qualifier/channel");

	if arg = "allow_dials" | arg = "ad" then do;
	     call get_qualifier;
	     entry = dial_manager_$allow_dials;
	end;
	else if arg = "registered_server" | arg = "rs" then do;
	     call get_qualifier;
	     entry = dial_manager_$registered_server;
	end;
	else if arg = "dial_out" | arg = "do" then do;
	     call get_channel;
	     call get_dial_out_destination;
	     if next_arg <= arg_count then call get_reservation_string;
	     if next_arg <= arg_count then call get_access_class;
	     entry = dial_manager_$dial_out;
	end;
	else if arg = "release_channel" | arg = "rc" then do;
	     call get_channel;
	     entry = dial_manager_$release_channel;
	end;
	else if arg = "release_channel_no_hangup" | arg = "rcnh" then do;
	     call get_channel;
	     entry = dial_manager_$release_channel_no_hangup;
	end;
	else if arg = "release_channel_no_listen" | arg = "rcnl" then do;
	     call get_channel;
	     entry = dial_manager_$release_channel_no_listen;
	end;
	else if arg = "shutoff_dials" | arg = "sd" then do;
	     call get_qualifier;
	     entry = dial_manager_$shutoff_dials;
	end;
	else if arg = "privileged_attach" | arg = "pa" then do;
	     call get_channel;
	     entry = dial_manager_$privileged_attach;
	end;
	else if arg = "tandd_attach" | arg = "tda" then do;
	     call get_channel;
	     entry = dial_manager_$tandd_attach;
	end;
	else if arg = "terminate_dial_out" | arg = "tdo" then do;
	     call get_channel;
	     entry = dial_manager_$terminate_dial_out;
	end;
	else if arg = "release_dial_id" | arg = "rdi" then do;
	     call get_qualifier;
	     entry = dial_manager_$release_dial_id;
	end;
	else if arg = "start_report" | arg = "start" then do;
	     reporting_enabled = "1"b;
	     go to done;
	end;
	else if arg = "stop_report" | arg = "stop" then do;
	     reporting_enabled = "0"b;
	     go to done;
	end;
	else do;
bad_arg:	     call com_err_ (0, name, "Unrecognized arg: ^a", arg);
	     return;
	end;

/* Make the dial manager call */

	if ^static_channel_is_wait then do;
	     call ipc_$decl_ev_wait_chn (static_channel, code);
	     if code ^= 0 then do;
		call convert_ipc_code_ (code);
		call com_err_ (code, name, "Unable to setup event wait channel.");
		return;
	     end;
	     static_channel_is_wait = "1"b;
	end;

	call entry (dmap, save_code);			/* make the call */

	call ipc_$decl_ev_call_chn (static_channel, handler, null (), 10, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     call com_err_ (code, name, "Unable to setup event call channel.");
	end;
	else static_channel_is_wait = "0"b;
	if save_code ^= 0 then call com_err_ (save_code, name, "dial_manager_ error.");

/* Allow event calls to go off in case channel is already dialed.  This is done
   because of the way dial_manager_ uses the event channel.  A subsequent
   invocation of dial_manager_ without an intervening block will cause
   dial_manager_ to get out of step with the event messages. */

	call timer_manager_$sleep (250000, "10"b);

done:	return;

/* Handler for event call wakeups, utility procedures */

handler: entry (arg_event_call_infop);

dcl  arg_event_call_infop ptr;

	if ^reporting_enabled then return;
	event_call_info_ptr = arg_event_call_infop;

	call convert_dial_message_$return_io_module (event_call_info.message, channel_name, io_module, n_dialed,
	     status_flags, code);
	if code ^= 0 then call com_err_ (code, name, "dial_manager_ error.");
	else do;
	     if status_flags.control then call ioa_ ("^a: Channels dialed=^d", name, n_dialed);
	     else call ioa_ ("^a: Channel ^a (^a) ^[dialed^]^[hungup^].", name, channel_name, io_module,
		     status_flags.dialed_up, status_flags.hung_up);
	     call iox_$control (iox_$user_output, "start", null (), code);
	end;
	return;

get_arg: proc (msg);

dcl  msg char (*);

	call cu_$arg_ptr (next_arg, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "^a", msg);
	     go to done;
	end;
	next_arg = next_arg + 1;
	return;

     end get_arg;

get_qualifier: proc;

	call get_arg ("qualifier");
	dmap -> dial_manager_arg.dial_qualifier = arg;
	if next_arg <= arg_count then do;
	     call get_access_class;
	     dmap -> dial_manager_arg.privileged_operation = "1"b;
	end;
	return;

     end get_qualifier;

get_access_class:
     procedure;
	call get_arg ("access class");
	call convert_authorization_$from_string (dmap -> dial_manager_arg.access_class, arg, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "^a", arg);
	     go to done;
	end;
	dmap -> dial_manager_arg.access_class_required = "1"b;
     end get_access_class;

get_channel: proc;

	call get_arg ("channel");
	dmap -> dial_manager_arg.channel_name = arg;
	return;

     end get_channel;

get_dial_out_destination: proc;

	call get_arg ("destination");
	dmap -> dial_manager_arg.dial_out_destination = arg;
	return;

     end get_dial_out_destination;

get_reservation_string: proc;

	call get_arg ("reservation");
	dmap -> dial_manager_arg.reservation_string = arg;
	return;

     end get_reservation_string;

%include dial_manager_arg;

%include event_call_info;

     end dial_manager_call;

