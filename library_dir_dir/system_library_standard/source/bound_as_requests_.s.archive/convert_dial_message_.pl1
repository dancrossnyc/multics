/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* CONVERT_DIAL_MESSAGE_ - Procedure to convert the event message
   received on a dial control channel into a device name, default
   IOSIM/DIM name, and standard status code.

   Written 750310 by Paul Green
   Modified 03/18/76 by David Jordan to add return_io_module entry.
   Modified 07/05/76 by D. M. Wells to understand about FTP channels
   and to use as_data_ names for IOSIMs
   Modified 04/23/79 by C. Hornig to know that AS uses iox_.
   Modified 80-11-11 by E.N. Kittlitz for full error code, line type.
   Modified May 1982 by E. N. Kittlitz for silly error_table_ typo.
*/



/****^  HISTORY COMMENTS:
  1) change(86-06-30,Coren), approve(86-06-30,MCR7415),
     audit(86-07-02,Margolin), install(86-07-11,MR12.0-1092):
     Use dial_event_message.incl.pl1 to interpret the format of the message.
     Call as_user_message_$read_message to get the information defining the
     connection if the ls_message flag is set in the event message.
                                                   END HISTORY COMMENTS */


/* format: style4 */
convert_dial_message_:
     procedure (bv_dial_message_fb, bv_device, bv_io_module, bv_n_dialed, bv_status, bv_code);

/* parameters */

dcl  (bv_dial_message_fb fixed bin (71),		/* Input */
     bv_device char (*),				/* Output */
     bv_io_module char (*),				/* Output */
     bv_n_dialed fixed bin,				/* Output */
     bv_code fixed bin (35)				/* Output */
     ) parameter;

dcl  1 bv_status aligned parameter,			/* Output */
       2 dialed_up bit (1) unaligned,
       2 hung_up bit (1) unaligned,
       2 control bit (1) unaligned,
       2 pad bit (33) unaligned;

dcl  bv_dial_message bit (72) aligned based (addr (bv_dial_message_fb));

/* automatic */

dcl  make_iox_name bit (1) aligned;			/* which flavor of io module, "1"b-> iox */
dcl  chan_name char (32);
dcl  code fixed bin (35);
dcl  system_areap pointer;

dcl  1 auto_user_message_info aligned like as_user_message_info;

/* based */

dcl  user_message (as_user_message_info.message_length) bit (36) aligned based (ls_connection_message_ptr);

dcl  1 message_device unal based (dial_event_message_ptr),	/* for messages that contain devxs */
       2 devx fixed bin (17) unal,
       2 line_type bin (17) unal,
       2 pad fixed bin (35) unal;

dcl  1 message_error aligned based (dial_event_message_ptr),/* for messages that contain full error codes */
       2 error_code fixed bin (35) aligned,
       2 pad fixed bin (35) aligned;

dcl  1 devx_tab_entry aligned based,			/* format of internal dexv tab entry */
       2 channel char (32),
       2 devx fixed bin;

dcl  1 devx_tab aligned based (devx_tabp),
       2 devx_entries (n_devx_entries) like devx_tab_entry;

/* builtins and conditions */

dcl  (addr, fixed, hbound, length, null, rtrim, string) builtin;

dcl  cleanup condition;

/* entries */

dcl  hcs_$tty_get_name entry (fixed bin, char (*), fixed bin, fixed bin (35));
dcl  get_temp_segment_ entry (char (*), pointer, fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  user_message_$read_message entry (pointer, pointer, fixed bin (35));

/* external static */

dcl  (as_data_$g115_dim, as_data_$mrd_dim, as_data_$ntty_dim, as_data_$tty_dim)
	character (32) external static;

dcl  (error_table_$action_not_performed,
     error_table_$unimplemented_version,
     error_table_$smallarg,
     error_table_$badcall)
	fixed bin (35) external static;

/* internal static variables */

dcl  n_devx_entries fixed bin int static;		/* size of current devx_tab */
dcl  devx_tabp ptr int static init (null);
dcl  1 static_devx_tab aligned int static,		/* use this little table until it overflows */
       2 entries (8) like devx_tab_entry;

/* program */

	make_iox_name = ""b;			/* return ios DIM name */
	goto cv_go;

return_io_module: entry (bv_dial_message_fb, bv_device, bv_io_module,
	bv_n_dialed, bv_status, bv_code);

	make_iox_name = "1"b;			/* caller wants to use iox */
	goto cv_go;

cv_go:
	dial_event_message_ptr = addr (bv_dial_message);	/* get set to overlay on message */
	bv_n_dialed = -1;				/* not all messages set this...initialize it */
	string (bv_status) = ""b;			/* .. */

/* check for message of all 1s (-1) which dial_manager_ may return */

	if bv_dial_message = (72)"1"b then do;
	     bv_code = error_table_$badcall;
	     bv_status.control = "1"b;
	     return;
	end;

/* See if this is a control message or a terminal status message */

	if dial_event_message.description = "contrl"	/* it's a control message */
	then do;
	     bv_status.control = "1"b;		/* mark as a control message */

	     if dial_event_message.control = DIALS_ALLOWED
	     then bv_code = 0;
	     else if dial_event_message.control = DIALS_DENIED
	     then bv_code = error_table_$action_not_performed;
	     else do;
		bv_n_dialed = fixed (dial_event_message.control, 18);
		bv_code = 0;
	     end;
	     return;
	end;

/* See if this is an error message */

	if dial_event_message.error_msg then do;	/* it's an error return */
	     bv_status.control = "1"b;
	     bv_code = message_error.error_code;
	     return;
	end;


/* It is a terminal status message ... return device name from message */

	bv_status.control = "0"b;			/* mark as a terminal info message */
	if dial_event_message.devx_msg then do;
	     call hcs_$tty_get_name ((message_device.devx), chan_name, (0), code);
	     if code ^= 0 then do;
		if dial_event_message.control = JUST_HUNGUP then do; /* I may have name internally */
		     call lookup_chan_name ((message_device.devx), chan_name);
		     if chan_name = "" then do;
			bv_code = code;
			return;
		     end;
		end;
		else do;
		     bv_code = code;
		     return;
		end;
	     end;
	     else if dial_event_message.control = JUST_DIALED then
		call store_chan_name ((message_device.devx), chan_name);

	     if length (bv_device) < length (rtrim (chan_name)) then do;
		bv_code = error_table_$smallarg;
		return;
	     end;
	     bv_device = chan_name;

/* try to deduce I/O module name from line type */

	     bv_io_module = as_data_$tty_dim;		/* default assumed */
	     if message_device.line_type = LINE_MC then bv_io_module = as_data_$mrd_dim;
	     else if message_device.line_type = LINE_TELNET then bv_io_module = as_data_$ntty_dim;
	     else if message_device.line_type = LINE_G115 then bv_io_module = as_data_$g115_dim;
	     else if message_device.line_type = LINE_BSC then bv_io_module = "bisync_";
	end;

	else if dial_event_message.ls_msg
	then do;					/* message is from login server; the "device" name and I/O module are in a user_message sent by the login server */
	     as_user_message_info_ptr = addr (auto_user_message_info);
	     as_user_message_info.version = AS_USER_MESSAGE_INFO_VERSION_1;
	     string (as_user_message_info.flags) = ""b;
	     as_user_message_info.message_handle = dial_event_message_handle || USER_MESSAGE_LS_CONNECTION_INFO_HANDLE_LOWER_18;
	     system_areap = get_system_free_area_ ();
	     ls_connection_message_ptr = null ();

	     on cleanup
		begin;
		if ls_connection_message_ptr ^= null ()
		then free user_message;
	     end;

	     call user_message_$read_message (system_areap, as_user_message_info_ptr, code);
	     if code ^= 0
	     then do;
		bv_code = code;
		return;
	     end;

	     ls_connection_message_ptr = as_user_message_info.message_ptr;
	     if ls_connection_message_common.version ^= LS_CONNECTION_MESSAGE_V1
	     then do;
		free user_message;
		bv_code = error_table_$unimplemented_version;
		return;
	     end;

	     bv_device = ls_connection_message_common.connection_name;
	     bv_io_module = ls_connection_message_common.io_module_name;
	     free user_message;
	end;

	else bv_device = dial_event_message.description;	/* this should never happen, but it's all we've got */

	if ^make_iox_name then			/* user really wanted an iox io module name */
	     if bv_io_module = as_data_$tty_dim then bv_io_module = "tw_"; /* map the names */
	     else if bv_io_module = as_data_$ntty_dim then bv_io_module = "ntw_";
	     else if bv_io_module = as_data_$mrd_dim then bv_io_module = "mrd_";
	     else ;				/* don't know how to map name, leave asis */

/* Convert control bits into standard status code. */

	if dial_event_message.control = JUST_DIALED
	then bv_status.dialed_up = "1"b;
	else if dial_event_message.control = JUST_HUNGUP
	then bv_status.hung_up = "1"b;

/* That's it. */

	bv_code = 0;
	return;

/* procedure to manage an internal data-base of channel names and devx's */
/* this is because if we are told by the answering service that one of our
   channels hung up, we are only told the devx. There is no sure way of finding
   the channel name unless we remember it ourselves from the time the channel
   hung up. */

store_chan_name: proc (devx, name);

dcl  devx fixed bin;
dcl  name char (*);

dcl  i fixed bin;
dcl  code fixed (35);
dcl  p ptr;

	if devx_tabp = null () then do;		/* once per process */
	     devx_tabp = addr (static_devx_tab);
	     n_devx_entries = hbound (static_devx_tab.entries, 1);
	     do i = 1 to n_devx_entries;
		devx_tab.devx (i) = -1;
		devx_tab.channel (i) = "";
	     end;
	end;

	do i = 1 to n_devx_entries;			/* look for entry for given devx */
	     if devx_tab.devx (i) = devx then do;
		devx_tab.channel (i) = name;		/* remember name */
		return;
	     end;
	end;

	do i = 1 to n_devx_entries;			/* look for free entry */
	     if devx_tab.devx (i) = -1 then do;
		devx_tab.devx (i) = devx;
		devx_tab.channel (i) = name;
		return;
	     end;
	end;

	if devx_tabp = addr (static_devx_tab) then do;	/* our internal static table is full */
	     call get_temp_segment_ ("convert_dial_message_", p, code);
	     if code ^= 0 then return;		/* punt */
	     do i = 1 to n_devx_entries;
		p -> devx_tab.devx (i) = devx_tab.devx (i);
		p -> devx_tab.channel (i) = devx_tab.channel (i);
	     end;
	     devx_tabp = p;				/* abandon internal static table */
	end;

	n_devx_entries = n_devx_entries + 1;		/* can grow without bound now */
	devx_tab.devx (n_devx_entries) = devx;
	devx_tab.channel (n_devx_entries) = name;
	return;

lookup_chan_name: entry (devx, name);

	name = "";
	if devx_tabp = null () then return;
	do i = 1 to n_devx_entries;
	     if devx_tab.devx (i) = devx then do;
		name = devx_tab.channel (i);
		return;
	     end;
	end;

     end store_chan_name;

%include line_types;
%page;
%include as_user_message_info;
%page;
%include user_message_handles;
%page;
%include ls_connection_message;
%page;
%include dial_event_message;

     end convert_dial_message_;
