/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* send_as_request_ -- common subroutine interface. */
/* format: style2 */

/**** Created 1984-12 */
/**** Modified 1985-02-21, BIM -- initialize code, create ev chan. */
/**** Modified 1985-03-18, E. Swenson to return error code if executed
      in the Initializer process. */

send_as_request_$block:
     procedure (Info_ptr, Info_length, Message_id, Reply, Code);

	declare Info_ptr		 pointer;
	declare Info_length		 fixed bin;
	declare Message_id		 bit (72) aligned;
	declare Reply		 bit (72) aligned;
	declare Code		 fixed bin (35);

	dcl     system_info_$request_chn
				 entry (bit (36) aligned, fixed bin (71), char (*), char (*));
	dcl     get_group_id_	 entry () returns (char (32));
	dcl     hcs_$wakeup		 entry (bit (36) aligned, fixed bin (71), bit (72) aligned, fixed bin (35));
	dcl     message_segment_$add_file
				 entry (char (*), char (*), ptr, fixed bin (18), bit (72) aligned, fixed bin (35))
				 ;
	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$block		 entry (ptr, ptr, fixed bin (35));

	dcl     block_flag		 bit (1) aligned;
	dcl     code		 fixed bin (35);
	dcl     request_process_id	 bit (36) aligned;
	dcl     request_channel	 fixed bin (71);
	dcl     request_uid		 bit (72) aligned;
	dcl     ms_dir_name		 char (168);
	dcl     ms_entryname	 char (32);
	dcl     msg_ptr		 pointer;
	dcl     msg_length		 fixed bin (18);
	dcl     created_ev_chn	 bit (1) aligned;
%include event_wait_channel;
%include event_wait_info;
	dcl     1 EWI		 aligned like event_wait_info;

	dcl     error_table_$action_not_performed
				 fixed bin (35) external;
	dcl     error_table_$unimplemented_version
				 fixed bin (35) ext static;

	dcl     cleanup		 condition;


	block_flag = "1"b;
	goto COMMON;

send_as_request_$no_block:
     entry (Info_ptr, Info_length, Message_id, Code);

	block_flag = "0"b;
COMMON:
	Code = 0;

/**** The following code prevents this call from being made in the
      Initializer process.  We do not want to invoke the AS request
      mechanism from within the Initializer process, because it would
      be possible to get into the AS request server recursively which
      doesn't work.  (The event call channel is inhibited while executing
      the handler (as_request_server_) and therefore the server will not
      function recursively). */

	if get_group_id_ () = "Initializer.SysDaemon.z"
	then do;
		Code = error_table_$action_not_performed;
		return;
	     end;

	msg_ptr = Info_ptr;
	msg_length = Info_length * 36;
	if msg_ptr -> as_request_header.version ^= as_request_version_1
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;
	created_ev_chn = "0"b;
	on cleanup
	     begin;
		if created_ev_chn
		then call ipc_$delete_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
	     end;
	if block_flag & (msg_ptr -> as_request_header.reply_channel = 0)
	then do;
		created_ev_chn = "1"b;
		call ipc_$create_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
	     end;
	if test_flag
	then do;
		request_process_id = static_process_id;
		request_channel = static_channel;
		ms_dir_name = static_dir_name;
		ms_entryname = static_entryname;
	     end;
	else call system_info_$request_chn (request_process_id, request_channel, ms_dir_name, ms_entryname);
	call message_segment_$add_file (ms_dir_name, ms_entryname, msg_ptr, msg_length, request_uid, code);
	if code ^= 0
	then do;
		Code = code;
		go to RETURN;
	     end;
	Message_id = request_uid;
	call hcs_$wakeup (request_process_id, request_channel, request_uid, code);
	if code ^= 0
	then do;
		Code = code;
		go to RETURN;
	     end;

	if msg_ptr -> as_request_header.reply_channel = 0 | ^block_flag
	then return;

	event_wait_channel.pad = ""b;
	event_wait_channel.channel_id (1) = msg_ptr -> as_request_header.reply_channel;
	call ipc_$block (addr (event_wait_channel), addr (EWI), code);
	if code ^= 0
	then do;
		Code = code;
		go to RETURN;
	     end;
	Reply = unspec (EWI.message);
RETURN:
	if created_ev_chn
	then call ipc_$delete_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
	return;

test:
     entry (a_pid, a_event, a_dir, a_entryname);

	declare (a_dir, a_entryname)	 char (*);
	declare a_pid		 bit (36) aligned;
	declare a_event		 fixed bin (71);

	declare test_flag		 bit (1) aligned internal static init ("0"b);
	declare (
	        static_process_id	 bit (36) aligned,
	        static_channel	 fixed bin (71),
	        static_dir_name	 char (168),
	        static_entryname	 char (32)
	        )			 int static;

	test_flag = "1"b;
	static_process_id = a_pid;
	static_channel = a_event;
	static_dir_name = a_dir;
	static_entryname = a_entryname;
	return;

no_test:
     entry;
	test_flag = "0"b;
	return;

%include as_request_header;
     end send_as_request_$block;


