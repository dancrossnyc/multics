/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

/* LOGOUT - Command to destroy a process and log the user off the system.

   logout -hold			don't hangup the line...let another user login on this terminal
   logout -brief			don't print logout message


   NEW_PROC - Command to destroy a process and create a new one for the same user.

   new_proc			create a new process with same attributes as this one
   new_proc -auth new_authorization	create a new process whose authorization is new_authorization


   Written 750406 by PG (split off from terminate_process_)
   Modified Aug 25, 1977 by S. Webber to add term_signal_handler_
   Modified April 1979 by T. Casey for MR7.0a to make process type determination work right for foreground absentee jobs.
   Modified December 1980 by E. N. Kittlitz for absentee cancellation message
   Modified 3/82 BIM for new print_abs_msg_, finish_info.incl.pl1
   Modified 84-06-24 BIM to check strict trusted path.
*/


/****^  HISTORY COMMENTS:
  1) change(86-05-19,GDixon), approve(86-09-26,MCR7499),
     audit(86-10-08,Beattie), install(86-10-13,MR12.0-1183):
     Resolve uninitialized variable (logout_string) in new_proc command by
     moving no_more_arguments label so variable doesn't get referenced by the
     new_proc control path. (phx20351)
  2) change(87-04-08,Parisek), approve(87-07-14,MCR7644),
     audit(87-07-24,GDixon), install(87-08-04,MR12.1-1055):
     Added the "disconnect" entry point.
                                                   END HISTORY COMMENTS */


logout:
     procedure options (variable);

/* automatic */

dcl  process_type fixed bin;				/* = 2 if this is an absentee process */
dcl  argno fixed bin;
dcl  arg_length fixed bin (21);
dcl  arg_ptr ptr;
dcl  attr char (128) varying;
dcl  authorization bit (72) aligned;
dcl  code fixed bin (35);
dcl  my_name char (12);
dcl  term_structure_ptr ptr;


dcl  1 logout_string aligned,				/* information about logouts */
       2 version fixed bin,				/* this is version 0 */
       2 hold bit (1) unaligned,			/* don't hangup line */
       2 brief bit (1) unaligned,			/* don't print logout message */
       2 pad bit (34) unaligned;			/* must be zero */

dcl  1 new_proc_string aligned,			/* information about new_procs */
       2 version fixed bin,				/* this is version 1 */
       2 authorization_option bit (1) unaligned,		/* use value of new_authorization, below */
       2 pad bit (35) unaligned,			/* must be zero */
       2 new_authorization bit (72) aligned;		/* authorization of new process */

dcl  1 disc_string aligned,				/* info about user invoked disconnect */
       2 version fixed bin,				/* this is version 0 */
       2 pad bit(36) aligned;				/* init "0"b */

dcl  1 local_finish_info aligned like finish_info;

%include finish_info;
%include condition_info_header;
%include trusted_path_flags;

/* based */

dcl  argument char (arg_length) based (arg_ptr);

/* builtins */

dcl  (addr, index, null, size, string, unspec) builtin;

/* external static */

dcl  error_table_$badopt fixed bin (35) external static;

/* entries */

dcl  aim_check_$equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  com_err_ entry options (variable);
dcl  convert_access_class_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  execute_epilogue_ entry (bit (1) aligned);
dcl  get_process_authorization_ entry () returns (bit (72) aligned);
dcl  get_process_max_authorization_ entry returns (bit (72) aligned);
dcl  ioa_ entry options (variable);
dcl  print_abs_msg_$logout entry ();
dcl  save_on_disconnect entry;
dcl  signal_ entry (char (*), ptr, ptr);
dcl  system_info_$trusted_path_flags entry returns (bit (36) aligned);
dcl  terminate_process_ entry (char (*), ptr);
dcl  user_info_$attributes entry (char(*) varying);
dcl  user_info_$process_type entry (fixed bin);


/* program */

	my_name = "logout";
	finish_info_ptr = addr (local_finish_info);
	finish_info.type = "logout";

	call user_info_$process_type (process_type);	/* we will need to know if this is absentee later */

	logout_string.version = 0;
	logout_string.hold = "0"b;			/* set default values for arguments */
	logout_string.brief = "0"b;			/* .. */
	logout_string.pad = ""b;
	term_structure_ptr = addr (logout_string);

	do argno = 1 by 1;				/* read all arguments */
	     call cu_$arg_ptr (argno, arg_ptr, arg_length, code);
	     if code ^= 0 then go to no_more_logout_arguments;

	     if argument = "-hold" | argument = "-hd"
	     then logout_string.hold = "1"b;		/* user doesn't want line hung up */

	     else if argument = "-brief" | argument = "-bf"
	     then logout_string.brief = "1"b;		/* user doesn't want logout message printed */

	     else go to bad_argument;
	end;

no_more_logout_arguments:
	if ^logout_string.brief then do;		/* print absentee logout message */
	     if process_type = 2 then call print_abs_msg_$logout;
	end;

	if logout_string.hold
	then do;
	     string (trusted_path_flags) = system_info_$trusted_path_flags ();
	     if trusted_path_flags.login then do;
		if logout_string.hold & my_name = "logout" then do;
		     call com_err_ (0, my_name, "logout -hold is not permitted at this site to ensure secure logins.");
		     return;
		end;
	     end;
	end;

no_more_arguments:
	if my_name = "disconnect" then do;
	     call user_info_$attributes (attr);		/* check for disconnect_ok */
	     if index (attr, "disconnect_ok") = 0 then do;
		call com_err_ (0, my_name, "You lack permission to disconnect your process.
Check with your project administrator for more information.");
		return;
	     end;
	     call save_on_disconnect;			/* Ensure process will be saved. */
	     call terminate_process_ (my_name, term_structure_ptr);
	     return;
	end;
						/* assume that's what we want */
	else do;
	     finish_info.length = size (finish_info);
	     finish_info.version = 1;
	     finish_info.info_string = "";
	     unspec (finish_info.action_flags) = ""b;
	     finish_info.status_code = 0;
	     call signal_ ("finish", null (), addr (finish_info));
	     call execute_epilogue_ ("0"b);		/* The "0"b says not just a run unit */
	     call terminate_process_ (my_name, term_structure_ptr);
	     go to no_more_arguments;			/* and don't come back */
	end;

new_proc:
     entry;					/* entry to create a new process */

	my_name = "new_proc";
	finish_info_ptr = addr (local_finish_info);
	finish_info.type = "new_proc";

	call user_info_$process_type (process_type);	/* is this an process_type process? */

	if process_type = 2 then do;			/* yes! */
	     call com_err_ (0, my_name, "Invalid command for absentee process.");
	     return;
	end;

	new_proc_string.version = 1;
	new_proc_string.authorization_option = "0"b;	/* initialize options */
	new_proc_string.new_authorization = ""b;	/* .. */
	new_proc_string.pad = ""b;
	term_structure_ptr = addr (new_proc_string);	/* set ptr to argument */

	do argno = 1 by 1;				/* read all arguments */
	     call cu_$arg_ptr (argno, arg_ptr, arg_length, code);
	     if code ^= 0 then go to no_more_arguments;	/* go do it */

	     if argument = "-authorization" | argument = "-auth"
	     then do;
		new_proc_string.authorization_option = "1"b;
		argno = argno + 1;
		call cu_$arg_ptr (argno, arg_ptr, arg_length, code);
		if code ^= 0 then do;
		     call com_err_ (code, my_name, "-authorization must be followed by an authorization.");
		     return;
		end;

		call convert_access_class_$from_string (authorization, argument, code);
		if code ^= 0 then do;
		     call com_err_ (code, my_name, "^a", argument);
		     return;
		end;

/* get the max authorization of this process */

		if ^aim_check_$greater_or_equal (get_process_max_authorization_ (), authorization) then do;
		     call com_err_ (0, my_name, "You cannot new_proc to the requested authorization.");
		     return;
		end;

		string (trusted_path_flags) = system_info_$trusted_path_flags ();
		if trusted_path_flags.login then if
			^aim_check_$equal (get_process_authorization_ (), authorization)
		     then do;
			call com_err_ (0, my_name, "new_proc -authorization is not permitted at this site to ensure secure logins.");
			return;
		     end;

		new_proc_string.new_authorization = authorization; /* pass to terminate_process_ */
	     end;
	     else go to bad_argument;
	end;

bad_argument:
	call com_err_ (error_table_$badopt, my_name, argument);
	return;

term_signal_handler_: entry;

	my_name = "term_signal";
	finish_info_ptr = addr (local_finish_info);
	finish_info.type = "termsgnl";

	call user_info_$process_type (process_type);

	if process_type = 2 then			/* absentee cancellation */
	     call ioa_ ("^2/Process terminated by the system.  The reason will be sent by Multics mail.");

	logout_string.version = 0;
	logout_string.hold = "0"b;
	logout_string.brief = "0"b;
	logout_string.pad = "0"b;
	term_structure_ptr = addr (logout_string);

	goto no_more_logout_arguments;

disconnect:
	entry;
	
	my_name = "disconnect";

	call user_info_$process_type (process_type);
	
	if process_type ^= 1 then do;
	     call com_err_ (0, my_name, "Command valid for interactive processes only.");
	     return;
	end;
	
	disc_string.version = 0;
	disc_string.pad = ""b;
	term_structure_ptr = addr (disc_string);
	
	do argno = 1 by 1;
	     call cu_$arg_ptr (argno, arg_ptr, arg_length, code);
	     if code ^= 0 then go to no_more_arguments;
	     else go to bad_argument;
	end;

     end logout;
