/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


complex_binary_op_:	proc(poperation,pop3,pdesc3,pop1,pdesc1,pop2,pdesc2);

/* Program to implement PL/I Version II runtime complex binary operators.

	Modified:	June 9, 1978 by RAB for better complex floating abs
	Modified:	March 2, 1978 by RAB for better complex floating divide
   Written by Richard A. Barnes October 16, 1972.  */


dcl	poperation fixed bin(17),
	pop3 bit(144) unaligned,
	pdesc3 bit(36) aligned,
	pop1 bit(144) unaligned,
	pdesc1 bit(36) aligned,
	pop2 bit(144) unaligned,
	pdesc2 bit(36) aligned;

dcl	operation fixed bin(17);

dcl	1 desc1 aligned,
		2 flag bit(1) unal,
		2 type bit(6) unal,
		2 packed bit(1) unal,
		2 number_dims bit(4) unal,
		2 scale bit(12) unal,
		2 precision bit(12) unal;

dcl	1 desc2 like desc1 aligned;
dcl	1 desc3 like desc1 aligned;

dcl  (	sa based(addr(a)),
	sb based(addr(b)),
	sc based(addr(c)),
	sd based(addr(d)),
	se based(addr(e)),
	sf based(addr(f))) bit(72) aligned;

dcl	(a,b,c,d,e,f) float bin(63);

dcl	length fixed bin(17);

dcl  (	ia based(addr(a)),
	ib based(addr(b)),
	ic based(addr(c)),
	id based(addr(d)),
	ie based(addr(e)),
	if based(addr(f))) fixed bin(71);

dcl  (	comparison	init(0),
	addition		init(1),
	subtraction	init(2),
	multiplication	init(3),
	division		init(4),
	negate		init(5),
	real_fun		init(6),
	imag_fun		init(7),
	round_fun		init(8),
	complex_fun	init(9),
	abs_fun		init(10),
	conjg_fun		init(11)) fixed bin(17) internal static;

dcl	based_fb based fixed bin(17);
dcl	comp fixed bin(17);

dcl	(ac,bd,ad,bc,cd,denom) float bin(63);

dcl	1 dop1,
		2 scale1 fixed bin(17),
		2 prec1 fixed bin(17),
		2 p ptr,
		2 q ptr;
dcl	1 dop2,
		2 scale2 fixed bin(17),
		2 prec2 fixed bin(17),
		2 r ptr,
		2 s ptr;
dcl	1 dop3,
		2 scale3 fixed bin(17),
		2 prec3 fixed bin(17),
		2 t ptr,
		2 u ptr;

dcl	(d1_scale,d2_scale) fixed bin(17);

dcl	rtype fixed bin(17);
dcl	(t1,t2,t3,t4,t5,t6) fixed bin(71);
dcl	dscale fixed bin(17);
dcl	rscale fixed bin(17);	/* scale of result of our operations */
dcl	ifloat bit(1) aligned;
dcl	code fixed bin(17);

/* Function Definitions */

dcl	fixed_divide_ entry(fixed bin(71),fixed bin(71),fixed bin,fixed bin,fixed bin,fixed bin) returns (fixed bin(71));
dcl	fixed_round_ entry(fixed bin(71),fixed bin,fixed bin) returns(fixed bin(71));
dcl	float_round_ entry(float bin(63),fixed bin) returns(float bin(63));
dcl	scaler_ entry(fixed bin(71),fixed bin,fixed bin);
dcl	size_check_ entry(fixed bin(71),fixed bin) returns(fixed bin);
dcl	pl1_signal_$help_plio2_signal_ entry (char(*),ptr,fixed bin(15),
		char(256) varying,fixed bin(15));

dcl	(addr,fixed,float,index,max,mod,null,round,sqrt,substr,string) builtin;
/*  */


/*
	(e + fi) = pop3
	(a + bi) = pop1
	(c + di) = pop2

	(a + bi) + (c + di) = ((a+c) + (b+d)i)
	(a + bi) - (c + di) = ((a-c) + (b-d)i)
	(a + bi) * (c + di) = ((a*c - b*d) + (a*d + b*c)i)

	(a + bi) / (c + di) = ((__a*__c_+___b*__d)_ + (__b*__c_-___a*__d)_i)
			   (c*c + d*d)   (c*c + d*d)

	abs((a+bi)) = sqrt(a*a + b*b)

	round((a+bi),pdesc2) = (round(a,pdesc2) + round(b,pdesc2)i)

	- (a + bi) = (-a - bi)
							*/

/*  */
/*  Internal procedure to get an operand into our work area */

getrand:	proc(rand,pdesc,struct);

dcl	rand bit(144) unal,
	1 desc like desc1 aligned;
dcl	1 pdesc like desc1 aligned;

dcl	1 struct,
		2 pscale fixed bin(17),
		2 pprec fixed bin(17),
		2 pp ptr,
		2 qq ptr;

dcl	prec fixed bin(17);
dcl	(p,q) pointer;

dcl  (	a based(p),
	b based(q)) float bin(63);

dcl  (	sa based(p),
	sb based(q)) bit(72) aligned;

dcl  (	ia based(p),
	ib based(q)) fixed bin(71);

dcl	float bit(1) aligned defined(ifloat);
dcl	short bit(1) aligned;
dcl	itype fixed bin(17);

dcl	rp pointer init(addr(rand));

dcl	rshort(2) float bin(27) based(rp);
dcl	rlong(2) float bin(63) based(rp);
dcl	ishort(2) fixed bin(35) based(rp);
dcl	ilong(2) fixed bin(71) based(rp);

dcl	ones bit(72) aligned internal static init((72)"1"b);

begin:
	string(desc) = string(pdesc);
	short = substr(desc.type,6,1);
	itype = fixed(desc.type,6);
	prec = pprec;
	p = pp;
	q = qq;

	if float then
	do;
		if desc.packed then
		do;
			length = prec + 9;
			substr(sa,1,length) = substr(rand,1,length);
			if itype < 5 then b = 0;	/* real */
			else substr(sb,1,length) = substr(rand,length+1,length);	/* complex */
		end;
		else
		do;
			b = 0;
			if short then	/* short */
			do;
				a = rshort(1);
				if itype > 4 then b = rshort(2);	/* complex */
			end;
			else			/* long  */
			do;
				a = rlong(1);
				if itype > 4 then b = rlong(2);	/* complex */
			end;
		end;
	end;
	else					/* fixed */
	do;
		if desc.packed then
		do;
			length = prec + 1;
			substr(sa,72-length+1,length) = substr(rand,1,length);
			if substr(rand,1,1) then substr(sa,1,72-length) = ones;
			if itype < 5 then ib = 0;
			else
			do;
				substr(sb,72-length+1,length) = substr(rand,length+1,length);
				if substr(rand,length+1,1) then substr(sb,1,72-length) = ones;
			end;
		end;
		else
		do;
			ib = 0;
			if short then		/* short */
			do;
				ia = ishort(1);
				if itype > 4 then ib = ishort(2);
			end;
			else
			do;
				ia = ilong(1);
				if itype > 4 then ib = ilong(2);
			end;
		end;
	end;
end;

/*  */

begin:
	dop1.p = addr(a);
	dop1.q = addr(b);
	dop2.r = addr(c);
	dop2.s = addr(d);
	dop3.t = addr(e);
	dop3.u = addr(f);

	ia,ib,ic,id,ie,if = 0;
	string(desc1) = pdesc1;
	string(desc3) = pdesc3;
	prec1 = fixed(desc1.precision,12);
	prec3 = fixed(desc3.precision,12);
	operation = poperation;
	rtype = mod(fixed(desc1.type,6),4);
	ifloat = rtype=0|rtype=3;
	call getrand(pop1,desc1,dop1);
	if operation < negate | operation = complex_fun then
	do;
		string(desc2) = pdesc2;
		prec2 = fixed(desc2.precision,12);
		call getrand(pop2,desc2,dop2);
	end;

	if ifloat then		/* float */
	do;
		length = prec3 + 9;
		if ^desc3.packed then if length > 36 then length = 72;
					       else length = 36;
		go to float_op(operation);

/* comparison */

float_op(0):
		comp = 1;		/* ^= */
		if a = c then if b = d then comp = 0;		/* = */
		addr(pop3)->based_fb = comp;
		return;

/* addition */

float_op(1):
		e = a + c;
		f = b + d;
		go to return_float;

/* subtraction */

float_op(2):
		e = a - c;
		f = b - d;
		go to return_float;

/* multiplication or division */

float_op(3):	float_op(4):
		ac = a*c;
		bd = b*d;
		ad = a*d;
		bc = b*c;
		if operation = multiplication then
		do;
			e = ac - bd;
			f = ad + bc;
			go to return_float;
		end;
		else	/* division */
		do;
			if abs(d) < abs(c)
			then do;
			     cd = d/c;
			     denom = c + d*cd;
			     e = (a + b*cd) / denom;
			     f = (b - a*cd) / denom;
			     end;

			else do;
			     cd = c/d;
			     denom = c*cd + d;
			     e = (a*cd + b) / denom;
			     f = (b*cd - a) / denom;
			     end;

			go to return_float;
		end;

/* negate */

float_op(5):
		e = -a;
		f = -b;
		go to return_float;

/* real */

float_op(6):
		e = a;
		go to return_real;

/* imag */

float_op(7):
		e = b;
		go to return_real;

/* round */

float_op(8):
		e = float_round_(a,prec2);
		f = float_round_(b,prec2);
		go to return_float;

/* complex */

float_op(9):
		e = a;
		f = c;
		go to return_float;

/* abs */

float_op(10):
		a = abs(a);
		b = abs(b);

		if a ^= 0.0e0
		then if b ^= 0.0e0
		     then if a > b
			then e = a * sqrt(1.0e0b + (b/a)*(b/a));
			else e = b * sqrt(1.0e0b + (a/b)*(a/b));
		     else e = a;
		else e = b;

		go to return_real;

/* conjg */

float_op(11):
		e = a;
		f = -b;

return_float:
		substr(pop3,length+1,length) = substr(sf,1,length);
return_real:
		substr(pop3,1,length) = substr(se,1,length);
		return;
	end;
/*  */
	else				/* fixed point */
	do;
		scale1 = fixed(desc1.scale,12);
		if scale1 > 2047 then scale1 = scale1 - 4096;
		scale3 = fixed(desc3.scale,12);
		if scale3 > 2047 then scale3 = scale3 - 4096;
		if operation < negate | operation = complex_fun then
		do;
			scale2 = fixed(desc2.scale,12);
			if scale2 > 2047 then scale2 = scale2 - 4096;
		end;
		length = prec3 + 1;
		if ^desc3.packed then if length > 36 then length = 72;
					       else length = 36;

		code = 0;
		rscale = scale1;
		go to fixed_op(operation);

/* comparison, addition, or subtraction */

fixed_op(0):	fixed_op(1):	fixed_op(2):	fixed_op(9):

		rscale = max(scale1,scale2);
		dscale = scale1 - scale2;
		if dscale > 0 then
		do;
			call scaler_(ic,dscale,code);
			call scaler_(id,dscale,code);
		end;
		else if dscale < 0 then
		do;
			dscale = -dscale;
			call scaler_(ia,dscale,code);
			call scaler_(ib,dscale,code);
		end;

		if operation = comparison then
		do;
			comp = 1;		/* ^= */
			if ia = ic then if ib = id then comp = 0;	/* = */
			addr(pop3)->based_fb = comp;
			return;
		end;

		if operation = addition then
		do;
			ie = ia + ic;
			if = ib + id;
			go to return_fixed;
		end;

		if operation = subtraction then
		do;
			ie = ia - ic;
			if = ib - id;
			go to return_fixed;
		end;

		if operation = complex_fun then
		do;
			ie = ia;
			if = ic;
			go to return_fixed;
		end;

/* multiplication or division */

fixed_op(3):	fixed_op(4):
		t1 = ia*ic;
		t2 = ib*id;
		t3 = ia*id;
		t4 = ib*ic;
		if operation = multiplication then
		do;
			ie = t1 - t2;
			if = t3 + t4;
			rscale = scale1 + scale2;
			go to return_fixed;
		end;
		else		/* division */
		do;
			d1_scale = scale1 + scale2;
			d2_scale = scale2 + scale2;
			t5 = ic*ic;
			t6 = id*id;
			t5 = t5 + t6;
			t1 = t1 + t2;
			t3 = t4 - t3;
			ie = fixed_divide_(t1,t5,d1_scale,d2_scale,scale3,code);
			if = fixed_divide_(t3,t5,d1_scale,d2_scale,scale3,code);
			rscale = scale3;
			go to return_fixed;
		end;

/* negate */

fixed_op(5):
		ie = -ia;
		if = -ib;
		go to return_fixed;

/* real */

fixed_op(6):
		ie = ia;
		go to return_fixed_real;

/* imag */

fixed_op(7):
		ie = ib;
		go to return_fixed_real;

/* round */

fixed_op(8):
		ie = fixed_round_(ia,prec2,scale1);
		if = fixed_round_(ib,prec2,scale1);
		rscale = prec2;
		go to return_fixed;

/* abs */

fixed_op(10):
		ie = fixed(sqrt(float(ia*ia + ib*ib,63)),71);
		go to return_fixed_real;

/* conjg */

fixed_op(11):
		ie = ia;
		if = -ib;
return_fixed:
		dscale = scale3 - rscale;
		if dscale ^= 0 then call scaler_(if,dscale,code);
		if code ^= 0 then go to signal;
		substr(pop3,length+1,length) = substr(sf,72-length+1,length);
		if size_check_(if,length) ^= 0 then go to signal;

return_fixed_real_1:
		if dscale ^= 0 then
		do;
			call scaler_(ie,dscale,code);
			if code ^= 0 then go to signal;
		end;
		substr(pop3,1,length) = substr(se,72-length+1,length);
		if size_check_(ie,length) ^= 0 then go to signal;
		return;

return_fixed_real:
		dscale = scale3 - rscale;
		go to return_fixed_real_1;
	end;

/* Signal SIZE condition */

signal:	call pl1_signal_$help_plio2_signal_("size",null,243,"",0);

end;
