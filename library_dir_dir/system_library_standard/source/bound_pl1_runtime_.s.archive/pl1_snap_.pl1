/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-09-27,RWaters), approve(89-09-27,MCR8068), audit(89-09-27,Vu),
     install(89-10-02,MR12.3-1080):
     Fixed to remove duplicate declaration attributes.
                                                   END HISTORY COMMENTS */


pl1_snap_: proc(conname);


		/* This procedure is invoked by the standard system default handler when a quit occurs */

/* Last Modified: (Date and reason):
	15 July 1977 by SHW to correctly reestablish the standard attachments, use iox_ entries
	     and to change snap routine from debug to probe.
          10/82 BIM to compile for 10.1 
*/


dcl	conname char(32);
dcl	absin_seg char(168) aligned;

dcl	null builtin;

dcl	code fixed bin(35);


dcl	ioa_ entry options(variable),
	user_info_$absin entry(char(*) aligned),
	(probe, trace_stack) entry(),
	iox_$modes entry(ptr,char(*),char(*),fixed bin(35)),
	iox_$attach_iocb entry(ptr,char(*),fixed bin(35)),
	iox_$control entry(ptr,char(*),ptr,fixed bin(35)),
	iox_$close entry (ptr,fixed bin (35)),
	iox_$detach_iocb entry (ptr,fixed bin (35));
/*  */

dcl  default_inhibits (3) int static bit (36) aligned init (
     "0"b,
     "0"b,
     "0"b
     );
dcl 1 old_info (3) aligned,
						/* first structure of information is for user_input;
						   the second is for user_output;
						   the third is for error_output */
    2 device ptr,
    2 mode bit (36) aligned;
dcl (new_uio_mode, old_uio_mode) char (256);

dcl  i fixed bin,
     iox_code fixed bin (35);

dcl  iocbp (4) ptr init (	 iox_$user_input,
			 iox_$user_output,
			 iox_$error_output,
			 iox_$user_io);		/* MUST be automatic for this init to work */	

dcl iocbp_names(4) char(12) aligned int static options(constant) init(
	"user_input",
	"user_output",
	"error_output",
	"user_i/o"	);

dcl iox_$user_io ext static ptr;
dcl iox_$user_input ext static ptr;
dcl iox_$user_output ext static ptr;
dcl iox_$error_output ext static ptr;
						/*  */
%include iocbx;




		/* This entry is invoked by signal_ to implement pl1 snap */
		/* i/o code is stolen from get_to_cl_ */



		/* Save attachments of user_input, user_output and error_output, and restore them
		   to the standard attachments */
	call save_io_;

		/* find out whether we are interactive or absentee */
	call user_info_$absin(absin_seg);
	if absin_seg = " " then do;		/* no absin seg; interactive */
	     call iox_$control(iox_$user_io, "resetread", null, code);	/* throw away any read ahead data */
	     call ioa_("PL/I snap for condition ^a; you are entering probe", conname);
	     call probe();
	end;
	else do;					/* we are in absentee */
	     call ioa_("PL/I snap for condition ^a; trace_stack is being called", conname);
	     call trace_stack();
	end;
	
		/* If control returns here, a "start" command has been typed.
		   The first thing we must do is restart any previously stopped io.  Then
		   we must restore the attachments of user_input, user_output and error_output to
		   what they were at the time of the quit or unclaimed signal. */
	call iox_$control(iox_$user_io, "start", null, code);
	call restore_io_;
	
		/* Return to procedure being "started" */
	return;
/*  */
/* Internal procedure to save attachments of user_input, user_output and error_output
   and restore them to the standard attachment. It is
   called after a quit or unclaimed signal */


save_io_:	proc;





/* save attachments */
	     do i = 1 to 3;
		if iocbp (i) -> iocb.actual_iocb_ptr = iocbp (i) then /* not a syn */
		     do;
		     old_info (i).device = iocbp (4);	/* ptr to iocb for user_i/o */
		     old_info (i).mode = default_inhibits (i); /* store default inhibits */
		end;
		else do;				/* it was syn */
		     old_info (i).device = iocbp (i) -> iocb.syn_father;
		     old_info (i).mode = iocbp (i) -> iocb.syn_inhibits; /* copy mode */
		end;
	     end;

/* restore user_input, user_output, and error_output to standard attachments */
	     do i = 1 to 3;
		if iocbp (i) -> iocb.actual_iocb_ptr = iocbp (i) then
		     call iox_$close (iocbp (i), iox_code);
		call iox_$detach_iocb (iocbp (i), iox_code);
		call iox_$attach_iocb(iocbp(i),"syn_ user_i/o", iox_code);
	     end;
	     old_uio_mode = " ";			/* init */
	     new_uio_mode = "default.";
	     call iox_$modes (iox_$user_io, new_uio_mode, old_uio_mode, iox_code);
	     call iox_$control (iox_$user_io, "printer_on", null, iox_code);

	     return;
	end save_io_;

/*  */

/* Internal procedure which restores user_input, error_output and user output to the values
   they had at the time of a quit or unclaimed signal. It is meant
   to be called in conjunction with save_io_ */

restore_io_: proc;


/* Restore attachments */
	     do i = 1 to 3;
		call iox_$detach_iocb (iocbp (i), iox_code);
		call iox_$attach_iocb(iocbp(i),"syn_ "||iocbp_names(i), iox_code);
	     end;


/* Restore mode of user_i/o to what it was at time of quit */
	     call iox_$modes (iox_$user_io, old_uio_mode, new_uio_mode, iox_code);

	     return;

	end restore_io_;

end;
