" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

	name	fixed_ops_
	entry	scaler_
	entry	fixed_divide_
	entry	fixed_round_
	entry	float_round_
	entry	size_check_
"
"	scaler_(var fixed bin(71),nbits fixed bin(17),code fixed bin(17))
"
"	(nbits is the amount of shifting to be done)
"
scaler_:	lxl0	ap|4,*	get nbits
	tmi	scale_down
	ldaq	ap|2,*	get var
	lls	0,0	shift the appropriate amount
	tnc	2,ic
	aos	ap|6,*	set code if hi-order bits lost
	staq	ap|2,*	store result back
	short_return
"
scale_down:
	lcq	ap|4,*	amount to shift is -nbits
	eax0	0,ql	"
	ldaq	ap|2,*	get var
	tmi	scale_down_neg
"
	lrs	0,0	shift appropriate amount
	staq	ap|2,*	store result back
	short_return
"
scale_down_neg:
	negl	0	make positive
	lrs	0,0	shift appropriate amount
	negl	0	restore sign
	staq	ap|2,*	store result
	short_return
"
"
"	result fixed bin(71) = fixed_divide_((var1,var2) fixed bin(71),
"				(scale1,scale2,scale3,code) fixed bin(17))
"
	bool	op_vec,551	from assembly of pl1_operators_
	equ	tbp,38		""
	tempd	dtemp(12)		NECESSARY TO SIMULATE PL/I STACK FRAME
fixed_divide_:	
	push
	eppbp	*	save ptr to base of text segment
	spbpbp	sp|tbp
"
	ldq	ap|6,*		calculate scale1 - (scale2 - scale3) for shifting
	sbq	ap|8,*
	adq	ap|10,*
	eax1	0,ql		save in index register for pl1_operators_
"
	ldaq	ap|2,*		load dividend
	eppbp	ap|4,*		point to divisor
	eppbb	ap|14,*		save ptr to result
	eppap	sb|stack_header.pl1_operators_ptr,*
	tsx0	ap|op_vec+402	call divide operator
"
	staq	bb|0		save result
	return
"
"
"	result fixed bin(71) = fixed_round_(var fixed bin(71),nplace fixed bin(17),
"					inscale fixed bin(17))
"
fixed_round_:
"
"	assumption:	inscale > nplace
"
	ldq	ap|6,*	get inscale
	sbq	ap|4,*	get inscale-nplace
	eax0	0,ql	save it
	ldaq	ap|2,*	get the variable
	tmi	round_neg
"
	lrs	-1,0	shift out unnecessary bits
	adl	1,dl	add rounding factor
	lrs	1	truncate
	staq	ap|8,*	store result
	short_return
"
round_neg:
	negl	0	get absolute value
	lrs	-1,0	shift out unnecessary bits
	adl	1,dl	add rounding factor
	lrs	1	truncate
	negl	0	restore sign
	staq	ap|8,*	store result
	short_return
"
"
"	result float bin(63) = float_round_(var float bin(63),nplace fixed bin(17))
"
float_round_:
	lcq	ap|4,*	amount to shift is 70 - nplace
	eax0	70,ql	"
	dfld	ap|2,*	get the variable
	tmi	float_neg
"
	lrs	0,0	shift out unnecessary bits
	adl	1,dl	add in rounding factor
	lrs	1	truncate
	lls	1,0	normalize
	tnc	3,ic	transfer if no carry into sign bit
	ade	1024,du	add one to exponent
	lrl	1	shift aq back one bit
	dfst	ap|6,*	store result
	short_return
"
float_neg:
	fneg	0	get abs(var)
	lrs	0,0	shift out unnecessary bits
	adl	1,dl	add rounding factor
	lrs	1	truncate
	lls	1,0	normalize
	tnc	3,ic	transfer if no carry into sign bit
	ade	1024,du	add one to exponent
	lrl	1	shift aq back one bit
	fneg	0	restore sign
	dfst	ap|6,*	store result
	short_return
"
"
"	code fixed bin(17) = size_check_(var fixed bin(71),length fixed bin(17))
"
size_check_:
	ldq	72,dl	amount to shift is 72 - length.
	sbq	ap|4,*	""
	tze	size_good
"
	eax0	0,ql
	ldaq	ap|2,*	get var
	lls	0,0	shift
	trc	size_bad	if there is a carry, signal size.
"
size_good:
	stz	ap|6,*	code = 0
	short_return
"
size_bad:
	sxl0	ap|6,*	code ^= 0
	short_return
"
	include	stack_header
	end
