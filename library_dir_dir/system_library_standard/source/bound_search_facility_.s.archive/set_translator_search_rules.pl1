/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-02-16,Lippard), approve(88-02-16,MCR7822),
     audit(88-02-16,Blair):
     Modified to use "uid" instead of "pad2".
                                                   END HISTORY COMMENTS */

/*	Translator Search Rules Commands
	This is just a write-around to search_paths_ and the "translator" search list.

	Rewritten 6-Nov-78 by Monte Davidoff.
*/
set_translator_search_rules:
stsr:
     procedure;

/* automatic */

	declare command		 char (32);	/* what command this is */
	declare sl_info_ptr		 pointer;

/* builtin */

	declare null		 builtin;
	declare search		 builtin;
	declare substr		 builtin;

/* condition */

	declare cleanup		 condition;

/* internal static */

	declare LIST		 char (10) internal static options (constant) initial ("translator");

/* external static */

	declare error_table_$action_not_performed
				 fixed binary (35) external static;
	declare error_table_$badopt	 fixed binary (35) external static;

/* external entry */

	declare absolute_pathname_	 entry (char (*), char (*), fixed binary (35));
	declare com_err_		 entry options (variable);
	declare cu_$arg_count	 entry (fixed binary);
	declare cu_$arg_ptr		 entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed binary (35));
	declare get_system_free_area_	 entry () returns (pointer);
	declare hcs_$status_minf	 entry (char (*), char (*), fixed binary (1), fixed binary (2), fixed binary (24),
				 fixed binary (35));
	declare ioa_		 entry options (variable);
	declare search_paths_$get	 entry (char (*), bit (36), char (*), pointer, pointer, fixed binary, pointer,
				 fixed binary (35));
	declare search_paths_$set	 entry (char (*), pointer, pointer, fixed binary (35));

%include sl_info;

/* set_translator_search_rules */

	command = "set_translator_search_rules";
	sl_info_ptr = null;
	on cleanup
	     call cleanup_;
	call set_translator_search_rules_;
	call cleanup_;
	return;

print_translator_search_rules:
ptsr:
	entry;

	command = "print_translator_search_rules";
	sl_info_ptr = null;
	on cleanup
	     call cleanup_;
	begin;
	     declare code		      fixed binary (35);
	     declare pathx		      fixed binary;

	     call search_paths_$get (LIST, ""b, "", null, get_system_free_area_ (), sl_info_version_1, sl_info_ptr, code);
	     if code = 0
	     then do pathx = 1 to sl_info_ptr -> sl_info.num_paths;
		     call ioa_ ("^a", sl_info_ptr -> sl_info.paths (pathx).pathname);
		end;
	     else call com_err_ (code, command, LIST);
	end;
	call cleanup_;
	return;

set_translator_search_rules_:
     procedure;

	declare arg_count		 fixed binary;
	declare arg_length		 fixed binary (21);
	declare arg_ptr		 pointer;
	declare argx		 fixed binary;
	declare code		 fixed binary (35);
	declare default_sw		 bit (1);
	declare pathx		 fixed binary;

	declare arg_string		 char (arg_length) based (arg_ptr);

	call cu_$arg_count (arg_count);
	default_sw = "0"b;
	do argx = 1 to arg_count while ( ^default_sw);
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;
	     if arg_string = "-default"
	     then default_sw = "1"b;
	end;

	if default_sw
	then call create_sl_info (arg_count + 2, sl_info_ptr);
	else call create_sl_info (arg_count, sl_info_ptr);

	pathx = 0;
	do argx = 1 to arg_count;
	     pathx = pathx + 1;
	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", argx);
		     return;
		end;
	     if arg_string = "-default"
	     then do;
		     sl_info_ptr -> sl_info.paths (pathx).type = WORKING_DIR;
		     sl_info_ptr -> sl_info.paths (pathx).pathname = "-working_dir";
		     call check_for_duplicates (sl_info_ptr, pathx, code);
		     if code ^= 0
		     then return;
		     pathx = pathx + 1;

		     sl_info_ptr -> sl_info.paths (pathx).type = UNEXPANDED_PATH;
		     sl_info_ptr -> sl_info.paths (pathx).pathname = ">udd>[user project]>include";
		     call check_for_duplicates (sl_info_ptr, pathx, code);
		     if code ^= 0
		     then return;
		     pathx = pathx + 1;

		     sl_info_ptr -> sl_info.paths (pathx).type = ABSOLUTE_PATH;
		     sl_info_ptr -> sl_info.paths (pathx).pathname = ">ldd>include";
		     call check_for_duplicates (sl_info_ptr, pathx, code);
		     if code ^= 0
		     then return;
		end;
	     else do;
		     call get_path_type (arg_string, sl_info_ptr -> sl_info.paths (pathx).type,
			sl_info_ptr -> sl_info.paths (pathx).pathname, code);
		     if code ^= 0
		     then return;

		     call check_for_duplicates (sl_info_ptr, pathx, code);
		     if code ^= 0
		     then return;
		end;
	end;

	call set_the_search_paths_of_a_search_list (sl_info_ptr, code);
	if code ^= 0
	then return;

	call check_paths_for_warnings (sl_info_ptr);
     end set_translator_search_rules_;

/* Allocate and initialize an sl_info structure */

create_sl_info:
     procedure (path_count, sl_info_ptr);

	declare path_count		 fixed binary;	/* (Input) number of search paths in sl_info */
	declare sl_info_ptr		 pointer;		/* (Output) pointer to sl_info */

	sl_info_ptr = null;
	if path_count ^= 0
	then do;
		sl_info_num_paths = path_count;
		allocate sl_info set (sl_info_ptr);

		sl_info_ptr -> sl_info.version = sl_info_version_1;
		sl_info_ptr -> sl_info.change_index_p = null;
		sl_info_ptr -> sl_info.change_index = 0;
		sl_info_ptr -> sl_info.pad1 (*) = ""b;
		sl_info_ptr -> sl_info.paths (*).code = 0;
		sl_info_ptr -> sl_info.paths (*).uid = ""b;
	     end;
     end create_sl_info;

/* Convert an argument into a search path type and pathname */

get_path_type:
     procedure (search_path, type, pathname, code);

	declare search_path		 char (*);	/* (Input) search path to convert */
	declare type		 fixed binary;	/* (Output) search path type */
	declare pathname		 char (*);	/* (Output) search pathname */
	declare code		 fixed binary (35); /* (Output) standard status code */

	type = 0;
	pathname = search_path;
	code = 0;
	if is_control_arg (search_path)
	then if search_path = "-home_dir"
	     then type = HOME_DIR;
	     else if search_path = "-referencing_dir"
	     then type = REFERENCING_DIR;
	     else if search_path = "-working_dir" | search_path = "-wd"
	     then do;
		     type = WORKING_DIR;
		     pathname = "-working_dir";
		end;
	     else do;
		     code = error_table_$badopt;
		     call com_err_ (code, command, "^a", search_path);
		end;
	else do;
		if search (search_path, "[]") = 0
		then type = ABSOLUTE_PATH;
		else type = UNEXPANDED_PATH;

		call absolute_pathname_ (search_path, pathname, code);
		if code ^= 0
		then call com_err_ (code, command, "^a", search_path);
	     end;
     end get_path_type;

/* Check for a duplicate entry in sl_info */

check_for_duplicates:
     procedure (sl_info_ptr, pathx, code);

	declare sl_info_ptr		 pointer;		/* (Input) pointer to sl_info */
	declare pathx		 fixed binary;	/* (Input) last used entry in sl_info */
	declare code		 fixed binary (35); /* (Output) non-standard status code */

	code = 0;
	if path_index (sl_info_ptr, sl_info_ptr -> sl_info.paths (pathx).pathname) >= pathx
	then return;

	call com_err_ (0, command, "Search path specified twice. ^a", sl_info_ptr -> sl_info.paths (pathx).pathname);
	code = 1;
     end check_for_duplicates;

/*	Check if an argument is a control-argument.

	A control-argument is defined for this procedure to be anything starting with a hyphen.
*/
is_control_arg:
     procedure (arg) returns (bit (1));

	declare arg		 char (*);	/* (Input) a command argument */

	if arg = ""
	then return ("0"b);
	else return (substr (arg, 1, 1) = "-");
     end is_control_arg;

/* Find the index of a search path in sl_info */

path_index:
     procedure (sl_info_ptr, pathname) returns (fixed binary);

	declare sl_info_ptr		 pointer;		/* (Input) pointer to sl_info */
	declare pathname		 char (*);	/* (Input) pathname to look for */

	declare pathx		 fixed binary;

	do pathx = 1 to sl_info_ptr -> sl_info.num_paths while (pathname ^= sl_info_ptr -> sl_info.paths (pathx).pathname);
	end;
	if pathx > sl_info_ptr -> sl_info.num_paths
	then return (0);
	else return (pathx);
     end path_index;

/*	Change a search list.

	Appropriate error and warning messages are printed.
*/
set_the_search_paths_of_a_search_list:
     procedure (sl_info_ptr, code);

	declare sl_info_ptr		 pointer;		/* (Updated) pointer to sl_info with the new search list */
	declare code		 fixed binary (35); /* (Output) standard status code */

	call search_paths_$set (LIST, null, sl_info_ptr, code);
	if code ^= 0
	then do;
		if code = error_table_$action_not_performed
		then do;				/* change to "begin;" when compiler bug 1789 is fixed in MR7.0 */
			declare pathx		 fixed binary;

			do pathx = 1 to sl_info_ptr -> sl_info.num_paths;
			     if sl_info_ptr -> sl_info.paths (pathx).code ^= 0
			     then call com_err_ (sl_info_ptr -> sl_info.paths (pathx).code, command, "^a",
				     sl_info_ptr -> sl_info.paths (pathx).pathname);
			end;
		     end;

		else call com_err_ (code, command, LIST);
	     end;

	if sl_info_ptr ^= null
	then do;
		free sl_info_ptr -> sl_info;
		sl_info_ptr = null;
	     end;
     end set_the_search_paths_of_a_search_list;

/* Warn the user if directories being added to the search list don't exist */

check_paths_for_warnings:
     procedure (sl_info_ptr);

	declare sl_info_ptr		 pointer;		/* (Output) pointer to allocate sl_info in */

	declare code		 fixed binary (35);

	call search_paths_$get (LIST, "1"b, "", null, get_system_free_area_ (), sl_info_version_1, sl_info_ptr, code);
	if sl_info_ptr ^= null
	then do;					/* change to "begin;" when compiler bug 1789 is fixed in MR7.0 */
		declare pathx		 fixed binary;

		do pathx = 1 to sl_info_ptr -> sl_info.num_paths;
		     if sl_info_ptr -> sl_info.paths (pathx).type = ABSOLUTE_PATH
			| sl_info_ptr -> sl_info.paths (pathx).type = UNEXPANDED_PATH
		     then do;			/* change to "begin;" when compiler bug 1789 is fixed in MR7.0 */
			     declare bit_count	      fixed binary (24);
			     declare dir_name	      char (168);
			     declare entry_type	      fixed binary (2);
			     declare entryname	      char (32);

			     call expand_pathname_ (sl_info_ptr -> sl_info.paths (pathx).pathname, dir_name, entryname,
				code);
			     call hcs_$status_minf (dir_name, entryname, 0, entry_type, bit_count, code);
			     if code ^= 0
			     then call com_err_ (code, command, "Warning. ^a",
				     sl_info_ptr -> sl_info.paths (pathx).pathname);
			end;
		end;

		free sl_info_ptr -> sl_info;
		sl_info_ptr = null;
	     end;
     end check_paths_for_warnings;

cleanup_:
     procedure;

	if sl_info_ptr ^= null
	then do;
		free sl_info_ptr -> sl_info;
		sl_info_ptr = null;
	     end;
     end cleanup_;

     end set_translator_search_rules;
