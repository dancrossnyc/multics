/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Scan a modes string and apply the modes to the current style.

   Written 5-Nov-79 by M. N. Davidoff.
*/
/* format: style5 */
format_pl1_modes_:
        procedure (P_temp_segs, P_modes_string, P_source_ptr, P_revert_ok_sw,
	  P_printed_error_msg_sw);

        declare P_temp_segs		(*) pointer;    /* (Input) array of temporary segment pointers */
        declare P_modes_string	char (*);	      /* (Input) modes string to scan */
        declare P_source_ptr		pointer;	      /* (Input) pointer to control comment in source segment, or
					         null for a command line modes string */
        declare P_revert_ok_sw	bit (1);	      /* (Input) on if there is a prevailing style */
        declare P_printed_error_msg_sw	bit (1);	      /* (Input/Output) on if printed it's a bad modes string */

/* automatic */

        declare modes_string_length	fixed binary (21);
        declare scan_index		fixed binary (21);
        declare scan_length		fixed binary (21);

/* based */

        declare modes_string		char (modes_string_length)
				based (addr (P_modes_string));

/* builtin */

        declare (addr, binary, divide, hbound, index, lbound, length, null,
	      reverse, rtrim, search, size, substr, verify)
				builtin;

/* internal static */

        declare HT_SP		char (2) internal static
				options (constant) initial ("	 ");
        declare digits		char (10) internal static
				options (constant)
				initial ("0123456789");

/* entry */

        declare com_err_		entry options (variable);

%include format_pl1_dcls;

/* program */

        temp_segs (*) = P_temp_segs (*);

        modes_string_length = length (rtrim (P_modes_string, HT_SP));
        if modes_string_length = 0 then
	      call error (2, "");

        scan_index = verify (P_modes_string, HT_SP);
        do while (scan_index <= length (modes_string));
	      scan_length =
		index (substr (modes_string, scan_index), mode_separator)
		- 1;
	      if scan_length < 0 then
		    scan_length =
		        length (substr (modes_string, scan_index));

	      begin;
		    declare mode		      char (scan_length)
					      defined (modes_string)
					      position (scan_index);

		    call apply_mode (mode);
	      end;

	      scan_index = scan_index + scan_length + length (mode_separator);
        end;

        if index (reverse (modes_string), reverse (mode_separator)) = 1 then
	      call error (2, "");

return:
        return;

/* Apply one mode to the current style. */

apply_mode:
        procedure (mode_and_value);

        declare mode_and_value	char (*);	      /* (Input) mode to apply */

        declare mode		char (32);
        declare mode_index		fixed binary;
        declare mode_length		fixed binary (21);
        declare mode_start_pos	fixed binary (21);
        declare not_sw		bit (1) aligned;
        declare value		fixed binary;

        not_sw = index (mode_and_value, switch_mode_not_indicator) = 1;
        if not_sw then
	      mode_start_pos = length (switch_mode_not_indicator) + 1;
        else
	      mode_start_pos = 1;

        mode_length =
	  search (substr (mode_and_value, mode_start_pos), digits) - 1;
        if mode_length < 0 then
	      mode_length = length (substr (mode_and_value, mode_start_pos));

        mode = substr (mode_and_value, mode_start_pos, mode_length);

        if mode_start_pos + mode_length > length (mode_and_value) then
	      value = -1;
        else
	      begin;
	      declare conversion	        condition;
	      declare size		        condition;

	      if verify (
		substr (mode_and_value, mode_start_pos + mode_length),
		digits) ^= 0 then
		    call error (2, mode_and_value);

	      on conversion, size call error (2, mode_and_value);

(conversion, size):
	      value =
		binary (
		substr (mode_and_value, mode_start_pos + mode_length), 17);
	      end;

        if mode = revert_mode then
	      if not_sw | value >= 0 | ^P_revert_ok_sw then
		    call error (2, mode_and_value);
	      else
		    do;
		    global.current_style = global.prevailing_style;
		    return;
		    end;

        if mode = style_mode then
	      if value < lbound (styles, 1) | hbound (styles, 1) < value
		| not_sw then
		    call error (2, mode_and_value);
	      else
		    do;
		    global.current_style = styles (value);
		    return;
		    end;

        do mode_index = lbound (value_mode_names, 1)
	  to hbound (value_mode_names, 1);
	      if mode = value_mode_names (mode_index) then
		    if not_sw | value < 0 then
			  call error (2, mode_and_value);
		    else
			  do;
			  global.current_style.values (mode_index) =
			      value;
			  return;
			  end;
        end;

        if value >= 0 then
	      call error (2, mode_and_value);

        do mode_index = lbound (switch_mode_names, 1)
	  to hbound (switch_mode_names, 1);
	      if mode = switch_mode_names (mode_index) then
		    do;
		    global.current_style.switches (mode_index) = ^not_sw;
		    return;
		    end;
        end;

        do mode_index = lbound (switch_antonym_names, 1)
	  to hbound (switch_antonym_names, 1);
	      if mode = switch_antonym_names (mode_index) then
		    do;
		    global.current_style.switches (mode_index) = not_sw;
		    return;
		    end;
        end;

        call error (2, mode_and_value);
        end apply_mode;

/* Print an error message. */

error:
        procedure (severity, mode);

        declare severity		fixed binary (35);
					      /* (Input) severity of the error */
        declare mode		char (*);	      /* (Input) mode that is in error */

        if ^P_printed_error_msg_sw then
	      do;
	      if P_source_ptr = null then
		    do;
		    global.max_severity = 5;
		    call com_err_ (0, command, "Invalid mode. ""^a""", mode)
		        ;
		    end;

	      else
		    call format_pl1_error_ (temp_segs (*), severity,
		        "Invalid mode. """ || mode || """", P_source_ptr);

	      P_printed_error_msg_sw = "1"b;
	      end;

        goto return;
        end error;

        end format_pl1_modes_;
