/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   Produce a list of statements from a list of tokens.  The token type
   assigned by format_pl1_lex_ is not based upon the context of the token.
   For example, format_pl1_lex_ assigns "-" the token type minus.  This token
   may be a prefix_minus token depending upon the context.  This procedure
   uses contextual information to make sure the token type is correct.  The
   steps are:

   1) Find the end of condition prefix lists, if any.
   2) Find the end of label prefix lists, if any, and fix up the token types.
   3) Figure out the type of the next statement.
   4) Find the end of the statement.
   5) Fix up the token types in the statement.

   Maintenance Instructions:

   To add another token type:

   1) If necesary, change fix_up_tokens to recognize the context in
   which this token occurs and change an existing token type to the
   new one.

   To add another PL/I statement:

   1) Add a statement type declaration to format_pl1_dcls.incl.pl1.
   2) Add entries to the is_independent_statement, is macro_whitespace,
   and is_macro_statement arrays in format_pl1_dcls.incl.pl1.
   3) Change statement_type to recognize the new statement.  This
   includes adding entries to the keyword, s_type, and
   paren_not_allowed arrays.
   4) If the statement does not end with a semicolon, change
   find_end_of_statement.
   5) If the statement requires certain token types be changed in order
   to be formatted properly, change fix_up_tokens.

   To add another macro:

   1) Add a statement type declaration that starts with "percent_" to
   format_pl1_dcls.incl.pl1.
   2) Add entries to the is_independent_statement, is_macro_statement,
   and is_macro_whitespace array in format_pl1_dcls.incl.pl1.
   3) Change percent_statement_type to recognize the new macro.
   4) If the macro does not end with a semicolon, change
   find_end_of_statement.
   5) If the macro requires certain token types be changed in order to
   be formatted properly, change fix_up_tokens.

*/

/* HISTORY:
   Written by Paul Green, 11/05/77.

   Modified:
   12/10/78 by Monte Davidoff:  Removed from format_pl1_.
   06/05/84 by R. Michael Tague:  To handle all legal pmac % statements.
   02/12/85 by R. Michael Tague:  Changed test for the "Unknown statement
               after macro" error message to use is_macro_statement instead
               of comparing with percent_statment.  This should have been
	     changed before.
*/

/* format: style5,^indcomtxt */
format_pl1_stmt_type_:
        procedure (P_temp_segs);

        declare P_temp_segs		(*) pointer;    /* (Input) array of temporary segment pointers */

/* automatic */

        declare stmtx		fixed binary;   /* index into stmt */

/* builtin */

        declare (divide, hbound, index, lbound, length, size, substr, unspec)
				builtin;

%include format_pl1_dcls;

/* program */

        temp_segs (*) = P_temp_segs (*);
        global.n_stmts = 0;

        unspec (stmt (1)) = ""b;		      /* build dummy first stmt */
        stmt (1).type = unknown_statement;
        stmt (1).subtype = subtype_none;
        stmt (1).start = 1;
        stmt (1).end = 1;
        stmtx = 1;

        begin;
	      declare tokenx	        fixed binary;

	      tokenx = 2;
	      do while (tokenx <= global.n_tokens);
		    call type_the_prefix_lists (tokenx);

		    if tokenx <= global.n_tokens then
			  call type_one_statement (tokenx);
	      end;
        end;

        if stmtx >= hbound (stmt, 1) then
	      call error (4, "Too many statements.", (stmt (stmtx).start));

        unspec (stmt (stmtx + 1)) = ""b;	      /* build dummy last stmt */
        stmt (stmtx + 1).type = unknown_statement;
        stmt (stmtx + 1).subtype = subtype_none;
        stmt (stmtx + 1).start = global.n_tokens + 1;
        stmt (stmtx + 1).end = global.n_tokens + 1;

unrecoverable_error:
        global.n_stmts = stmtx;

        return;

type_the_prefix_lists:
        procedure (tokenx);

        declare tokenx		fixed binary;   /* (Updated) current token */

        declare label		bit (1) aligned;
        declare labelx		fixed binary;
        declare prefix_start		fixed binary;

/* condition prefix list */

        prefix_start = tokenx;
        do while (token (tokenx).type = left_parn);
	      tokenx = tokenx + 1;

	      if token (tokenx).type = identifier then
		    tokenx = tokenx + 1;

	      else if token (tokenx).type ^= percent then
		    call error (3,
		        "Missing identifier in condition prefix list.",
		        tokenx);

	      do while (token (tokenx).type = comma);
		    tokenx = tokenx + 1;

		    if token (tokenx).type = identifier then
			  tokenx = tokenx + 1;

		    else if token (tokenx).type ^= percent then
			  call error (3,
			      "Missing identifier in condition prefix list.",
			      tokenx);
	      end;

	      if token (tokenx).type = right_parn then
		    tokenx = tokenx + 1;

	      else if token (tokenx).type ^= percent then
		    call error (3,
		        "Missing right parenthesis in condition prefix list.",
		        tokenx);

	      if token (tokenx).type = colon then
		    tokenx = tokenx + 1;

	      else if token (tokenx).type ^= percent then
		    call error (3,
		        "Missing colon after condition prefix list.",
		        tokenx);
        end;

        if tokenx > prefix_start then
	      call make_stmt (condition_prefix_list, subtype_none,
		prefix_start, tokenx - 1);

/* label prefix list */

        prefix_start = tokenx;
        label = "1"b;
        do while (token (tokenx).type = identifier & label);
	      labelx = tokenx + 1;

	      if token (labelx).type = left_parn then
		    do;
		    labelx = labelx + 1;

		    if token (labelx).type = plus
		        | token (labelx).type = minus then
			  labelx = labelx + 1;

		    if token (labelx).type = dec_integer
		        |
		        may_be_percent_replace_label_prefix (tokenx, labelx)
		        then
			  do;
			  labelx = labelx + 1;

			  if token (labelx).type = right_parn then
				labelx = labelx + 1;
			  else
				label = "0"b;
			  end;

		    else
			  label = "0"b;
		    end;

	      if token (labelx).type = colon & label then
		    do tokenx = tokenx to labelx;
			  if token (tokenx).type = plus then
				token (tokenx).type = prefix_plus;

			  else if token (tokenx).type = minus then
				token (tokenx).type = prefix_minus;
		    end;

	      else
		    label = "0"b;
        end;

        if tokenx > prefix_start then
	      call make_stmt (label_prefix_list, subtype_none, prefix_start,
		tokenx - 1);

        return;

/* Label prefixes have the form "id ( [+|-] dec_integer ) :".  The %replace
   macro introduces the possibility that the dec_integer may be an identifier
   that is replaced by a dec_integer.  "id ( id ) :" can't always be formatted
   as a label prefix since "else ( overflow ) :" is ambiguous.  This could be
   an else clause with a condition prefix, rather than a label array named
   "else" with a %replace identifier named "overflow".  This procedure allows
   label prefixes of the form "id ( id ) :" unless the label array is "else"
   and the subscript is a condition prefix list condition name.
*/
may_be_percent_replace_label_prefix:
        procedure (label_token, subscript_token) returns (bit (1) aligned);

        declare label_token		fixed binary;   /* (Input) index of label name token */
        declare subscript_token	fixed binary;   /* (Input) index of subscript token */

        declare cnx			fixed binary;
        declare subscript_start_pos	fixed binary (21);

        declare label_string		char (token (label_token).string_size)
				based (token (label_token).string_ptr);
        declare subscript_string	char (token (subscript_token)
				.string_size)
				based (token (subscript_token)
				.string_ptr);

        declare condition_name	(17) char (16) internal static
				options (constant)
				initial ("conversion", "conv",
				"fixedoverflow", "fofl", "overflow",
				"ofl", "size", "stringrange", "strg",
				"stringsize", "strz", "subscriptrange",
				"subrg", "underflow", "ufl",
				"zerodivide", "zdiv");
        declare disable_prefix	char (2) internal static
				options (constant) initial ("no");

        if token (subscript_token).type ^= identifier then
	      return ("0"b);

        if label_token + 2 ^= subscript_token | label_string ^= "else" then
	      return ("1"b);

        if index (subscript_string, disable_prefix) = 1 then
	      subscript_start_pos = length (disable_prefix) + 1;
        else
	      subscript_start_pos = 1;

        do cnx = lbound (condition_name, 1) to hbound (condition_name, 1)
	  while (condition_name (cnx)
	  ^= substr (subscript_string, subscript_start_pos));
        end;

        return (cnx > hbound (condition_name, 1));
        end may_be_percent_replace_label_prefix;

        end type_the_prefix_lists;

/* Get the type of one statement.

   If the statement contains an embedded statement, e.g.  if, else or on, then
   tokenx is left pointing to the first token of the embedded statement.
*/
type_one_statement:
        procedure (tokenx);

        declare tokenx		fixed binary;   /* (Updated) index of current token, updated to first token of
					         next statement */

        declare start		fixed binary;
        declare type		fixed binary (8);

        start = tokenx;
        type = statement_type (start);
        call find_end_of_statement (type, start, tokenx);
        call fix_up_tokens (type, start, tokenx);

        call make_stmt (type, statement_subtype (type, start, tokenx), start,
	  tokenx);

        tokenx = tokenx + 1;

        return;

statement_type:
        procedure (first_token) returns (fixed binary (8));

        declare first_token		fixed binary;   /* (Input) first token of statement */

        declare tokenx		fixed binary;
        declare keywordx		fixed binary;

        declare tokenx_token_string	char (token (tokenx).string_size)
				based (token (tokenx).string_ptr);

        declare keyword		(34) char (12) aligned internal
				static options (constant)
				initial ("alloc", "allocate", "begin",
				"call", "close", "dcl", "declare",
				"default", "delete", "dft", "do",
				"else", "end", "entry", "format",
				"free", "get", "go", "goto", "if",
				"locate", "on", "open", "proc",
				"procedure", "put", "read", "return",
				"revert", "rewrite", "signal", "stop",
				"system", "write");

        declare s_type		(34) fixed binary (8) internal
				static options (constant) initial (1,
					      /* alloc */
				1,	      /* allocate */
				3,	      /* begin */
				4,	      /* call */
				5,	      /* close */
				6,	      /* dcl */
				6,	      /* declare */
				36,	      /* default */
				8,	      /* delete */
				36,	      /* dft */
				10,	      /* do */
				11,	      /* else */
				12,	      /* end */
				13,	      /* entry */
				15,	      /* format */
				16,	      /* free */
				17,	      /* get */
				18,	      /* go */
				18,	      /* goto */
				19,	      /* if */
				20,	      /* locate */
				22,	      /* on */
				23,	      /* open */
				24,	      /* proc */
				24,	      /* procedure */
				25,	      /* put */
				26,	      /* read */
				27,	      /* return */
				28,	      /* revert */
				29,	      /* rewrite */
				30,	      /* signal */
				31,	      /* stop */
				32,	      /* system */
				35);	      /* write */

        declare paren_not_allowed	(34) bit (1) aligned internal
				static options (constant)
				initial ("1"b, "1"b, "1"b, "1"b, "1"b,
				"0"b, "0"b, "0"b, "1"b, "0"b, "1"b,
				"0"b, "1"b, "0"b, "0"b, "1"b, "1"b,
				"1"b, "1"b, "0"b, "1"b, "1"b, "1"b,
				"0"b, "0"b, "1"b, "1"b, "0"b, "1"b,
				"1"b, "1"b, "1"b, "1"b, "1"b);

/* Figure out what the next statement is. */

        tokenx = first_token;

        if token (tokenx).type = semi_colon then
	      return (null_statement);

        if token (tokenx).type = percent then
	      return (percent_statement_type (tokenx));

        if token (tokenx).type ^= identifier then
	      do;
	      if global.include_file & stmtx = 1 then
		    call error (1,
		        "Unknown statement at beginning of include file.",
		        tokenx);

	      else if is_macro_statement (stmt (stmtx).type) then
		    call error (1, "Unknown statement after macro.", tokenx)
		        ;

	      else
		    call error (3, "Unknown statement.", tokenx);

	      return (unknown_statement);
	      end;

/* statement starts with an identifier */

        if token (tokenx + 1).type = assignment
	  | token (tokenx + 1).type = arrow
	  | token (tokenx + 1).type = period | token (tokenx + 1).type = comma
	  then
	      return (assignment_statement);

        do keywordx = lbound (keyword, 1) to hbound (keyword, 1)
	  while (keyword (keywordx) ^= tokenx_token_string);
        end;

        if keywordx > hbound (keyword, 1) then
	      return (assignment_statement);

        if token (tokenx + 1).type = left_parn then
	      if paren_not_allowed (keywordx) then
		    return (assignment_statement);
	      else
		    ;

        else
	      return (s_type (keywordx));

/* statement starts with "keyword (" */

        call skip_parens (tokenx);

        if token (tokenx).type = arrow | token (tokenx).type = period then
	      return (assignment_statement);

        if token (tokenx).type = comma then
	      if s_type (keywordx) = declare_statement then
		    do;
		    do while (token (tokenx).type ^= semi_colon
		        & token (tokenx).type ^= assignment);
			  if token (tokenx).type = left_parn then
				call skip_parens (tokenx);
			  else
				tokenx = tokenx + 1;
		    end;

		    if token (tokenx).type = assignment then
			  return (assignment_statement);
		    else
			  return (declare_statement);
		    end;

	      else
		    return (assignment_statement);

        if token (tokenx).type = assignment then
	      if s_type (keywordx) ^= if_statement then
		    return (assignment_statement);
	      else
		    ;

        else
	      return (s_type (keywordx));

/* statement starts with "if ( ... ) =" */

        call find_then (first_token, tokenx);

        if token (tokenx).type = identifier then
	      return (if_statement);

        return (assignment_statement);

percent_statement_type:
        procedure (first_token) returns (fixed binary (8));

        declare first_token		fixed binary;   /* (Input) first token of statement */
        declare first_token_string	char (token (first_token).string_size)
				based (token (first_token).string_ptr);

        if first_token_string = "%" then
	      return (percent_statement);
        else if first_token_string = "%abort" then
	      return (percent_abort_statement);
        else if first_token_string = "%default" then
	      return (percent_default_statement);
        else if first_token_string = "%else" then
	      return (percent_else_statement);
        else if first_token_string = "%elseif" then
	      return (percent_elseif_statement);
        else if first_token_string = "%endif" then
	      return (percent_endif_statement);
        else if first_token_string = "%error" then
	      return (percent_error_statement);
        else if first_token_string = "%if" then
	      return (percent_if_statement);
        else if first_token_string = "%include" then
	      return (percent_include_statement);
        else if first_token_string = "%INCLUDE" then
	      return (percent_include_statement);
        else if first_token_string = "%page" then
	      return (percent_page_statement);
        else if first_token_string = "%print" then
	      return (percent_print_statement);
        else if first_token_string = "%replace" then
	      return (percent_replace_statement);
        else if first_token_string = "%set" then
	      return (percent_set_statement);
        else if first_token_string = "%skip" then
	      return (percent_skip_statement);
        else if first_token_string = "%warn" then
	      return (percent_warn_statement);
        else
	      do;
	      call error (3, "Unknown macro.", first_token);
	      return (percent_statement);
	      end;
        end percent_statement_type;

        end statement_type;

find_end_of_statement:
        procedure (stmt_type, first_token, last_token);

        declare stmt_type		fixed binary (8);
					      /* (Input) type of the statement */
        declare first_token		fixed binary;   /* (Input) first token of the statement */
        declare last_token		fixed binary;   /* (Output) last token of the statement */

        declare last_token_string	char (token (last_token).string_size)
				based (token (last_token).string_ptr);

        if stmt_type = on_statement then
	      do;
	      last_token = first_token + 1;

	      call condition_name (last_token);
	      do while (token (last_token).type = comma);
		    last_token = last_token + 1;
		    call condition_name (last_token);
	      end;

	      if token (last_token).type = identifier then
		    if last_token_string = "snap" then
			  if is_snap (last_token) then
				last_token = last_token + 1;

	      last_token = last_token - 1;
	      end;

        else if stmt_type = if_statement then
	      do;
	      last_token = first_token;
	      call find_then (first_token, last_token);

	      if token (last_token).type ^= identifier
		& token (last_token).type ^= percent then
		    call error (3, "Missing ""then"" in if statement.",
		        first_token);

	      if token (last_token).type = percent
		| token (last_token).type = no_token then
		    last_token = last_token - 1;
	      end;

        else if stmt_type = percent_if_statement
	  | stmt_type = percent_elseif_statement then
	      begin;
	      declare found_percent_then      bit (1) aligned;

	      do last_token = first_token + 1 by 1
		while (^is_end_of_statement (token (last_token).type));
	      end;

	      if token (last_token).type = percent then
		    found_percent_then = last_token_string = "%then";
	      else
		    found_percent_then = "0"b;

	      if ^found_percent_then then
		    do;
		    call error (3,
		        "Missing ""%then"" in %if or %elseif macro.",
		        first_token);

		    if token (last_token).type ^= semi_colon then
			  last_token = last_token - 1;
		    end;
	      end;

        else if stmt_type = else_clause | stmt_type = percent_else_statement
	  | stmt_type = percent_endif_statement then
	      last_token = first_token;

        else
	      do last_token = first_token by 1
		while (token (last_token).type ^= semi_colon
		& token (last_token + 1).type ^= percent
		& token (last_token + 1).type ^= no_token);
	      end;

        return;

condition_name:
        procedure (tokenx);

        declare tokenx		fixed binary;   /* (Updated) current token position */

        if token (tokenx).type = identifier then
	      do;
	      tokenx = tokenx + 1;

	      if token (tokenx).type = left_parn then
		    begin;
		    declare tx		      fixed binary;

		    tx = tokenx;
		    call skip_parens (tx);

		    if token (tx).type ^= colon then
			  tokenx = tx;
		    end;
	      end;

        else if token (last_token).type ^= percent then
	      call error (3, "Missing identifier in condition name.", tokenx);
        end condition_name;

is_snap:
        procedure (snap_token) returns (bit (1) aligned);

        declare snap_token		fixed binary;   /* (Input) token containing "snap" */

        declare tokenx		fixed binary;

        tokenx = snap_token + 1;

        if token (tokenx).type = identifier | token (tokenx).type = semi_colon
	  then
	      return ("1"b);

        if token (tokenx).type ^= left_parn then
	      return ("0"b);

        call skip_parens (tokenx);

        return (token (tokenx).type = colon);
        end is_snap;

        end find_end_of_statement;

fix_up_tokens:
        procedure (stmt_type, first_token, last_token);

        declare stmt_type		fixed binary (8);
					      /* (Input) type of the current statement */
        declare first_token		fixed binary;   /* (Input) first token of the statement */
        declare last_token		fixed binary;   /* (Input) last token of the statement */

        declare tokenx		fixed binary;
        declare paren_depth		fixed binary;
        declare skip_assignment	bit (1) aligned;

        declare tokenx_token_string	char (token (tokenx).string_size)
				based (token (tokenx).string_ptr);

        if stmt_type = if_statement then
	      do;
	      skip_assignment = "0"b;
	      token (first_token).type = keyword_token;

	      if token (last_token).type = identifier then
		    token (last_token).type = keyword_token;
	      end;

        else if stmt_type = assignment_statement then
	      skip_assignment = "1"b;

        else if stmt_type = do_statement then
	      do;
	      tokenx = first_token + 1;

	      if tokenx >= last_token then
		    skip_assignment = "0"b;	      /* <noniterative do> */
	      else
		    do;
		    skip_assignment = "1"b;

		    if token (tokenx).type = identifier then
			  if tokenx_token_string = "while"
			      & token (tokenx + 1).type = left_parn then
				do;
				tokenx = tokenx + 1;
				call skip_parens (tokenx);

				if tokenx >= last_token then
				        skip_assignment = "0"b;
					      /* <do while> */
				end;

		    if skip_assignment	      /* <multiple do> */
		        then
			  do tokenx = tokenx + 1 to last_token - 1;
				if token (tokenx).type = identifier then
				        if tokenx_token_string = "while"
					  | tokenx_token_string = "to"
					  | tokenx_token_string = "by"
					  | tokenx_token_string
					  = "repeat" then
					      if could_end_an_expression
						(token (tokenx - 1)
						.type) then
						    token (tokenx)
						        .type =
						        keyword_token
						        ;
					      else
						    ;
				        else
					      ;

				else if token (tokenx).type = left_parn
				    then
				        do;
				        call skip_parens (tokenx);
				        tokenx = tokenx - 1;
				        end;
			  end;
		    end;
	      end;

        else if stmt_type = percent_replace_statement then
	      do;
	      tokenx = first_token + 2;
	      if tokenx <= last_token then
		    if token (tokenx).type = identifier then
			  if tokenx_token_string = "by" then
				token (tokenx).type = keyword_token;
	      end;

        else if stmt_type = percent_set_statement
	  | stmt_type = percent_default_statement then
	      do;
	      tokenx = first_token + 2;
	      if tokenx <= last_token then
		    if token (tokenx).type = identifier then
			  if tokenx_token_string = "to" then
				token (tokenx).type = keyword_token;
	      end;

        else
	      skip_assignment = "0"b;

        paren_depth = 0;
        do tokenx = first_token to last_token;
	      if token (tokenx).type = left_parn then
		    paren_depth = paren_depth + 1;

	      else if token (tokenx).type = right_parn then
		    paren_depth = paren_depth - 1;

	      else if token (tokenx).type = assignment then
		    if paren_depth = 0 & skip_assignment then
			  skip_assignment = "0"b;
		    else
			  token (tokenx).type = eq;

	      else if token (tokenx).type = comma
		& stmt_type = assignment_statement & skip_assignment
		& paren_depth = 0 then
		    token (tokenx).type = target_comma;

	      else if token (tokenx).type = percent
		& length (tokenx_token_string) > length ("%") then
		    token (tokenx).type = keyword_token;

	      else if token (tokenx).type = plus | token (tokenx).type = minus
		then
		    if ^could_end_an_expression (token (tokenx - 1).type)
		        then
			  if token (tokenx).type = minus then
				token (tokenx).type = prefix_minus;
			  else
				token (tokenx).type = prefix_plus;
        end;
        end fix_up_tokens;

find_then:
        procedure (first_token, tokenx);

        declare first_token		fixed binary;   /* (Input) first token of the statement */
        declare tokenx		fixed binary;   /* (Updated) current token on input,
					         then token or end of statement on output */

        declare tokenx_token_string	char (token (tokenx).string_size)
				based (token (tokenx).string_ptr);

        do tokenx = tokenx + 1 by 1
	  while (^is_end_of_statement (token (tokenx).type));
	      if token (tokenx).type = identifier then
		    if tokenx_token_string = "then" then
			  if could_end_an_expression (token (tokenx - 1)
			      .type) & first_token < tokenx - 1 then
				return;
			  else
				;
		    else
			  ;

	      else if token (tokenx).type = left_parn then
		    do;
		    call skip_parens (tokenx);
		    tokenx = tokenx - 1;
		    end;
        end;
        end find_then;

skip_parens:
        procedure (tokenx);

        declare tokenx		fixed binary;   /* (Updated) on input, index of left_parn token,
					         on output, index of end of statement token or token
					         after matching right_parn, whichever comes first */

        declare paren_depth		fixed binary;

        paren_depth = 1;
        do tokenx = tokenx + 1 by 1
	  while (paren_depth > 0 & ^is_end_of_statement (token (tokenx).type))
	  ;
	      if token (tokenx).type = left_parn then
		    paren_depth = paren_depth + 1;

	      else if token (tokenx).type = right_parn then
		    paren_depth = paren_depth - 1;
        end;
        end skip_parens;

could_end_an_expression:
        procedure (type) returns (bit (1) aligned);

        declare type		fixed binary (8) unaligned;
					      /* (Input) token type which might end an expression */

        return (type = identifier | type = isub | type = right_parn
	  | min_constant_token <= type & type <= max_constant_token);
        end could_end_an_expression;

is_end_of_statement:
        procedure (type) returns (bit (1) aligned);

        declare type		fixed binary (8) unaligned;
					      /* (Input) token type which might end a statement */

        return (type = semi_colon | type = percent | type = no_token);
        end is_end_of_statement;

statement_subtype:
        procedure (stmt_type, first_token, last_token)
	  returns (fixed binary (8));

        declare stmt_type		fixed binary (8);
					      /* (Input) type of the statement */
        declare first_token		fixed binary;   /* (Input) first token of the statement */
        declare last_token		fixed binary;   /* (Input) last token of the statement */

        if stmt_type = do_statement then
	      if token (last_token).type = semi_colon
		& last_token = first_token + 1 then
		    return (subtype_noniterative_do);

        return (subtype_none);
        end statement_subtype;

        end type_one_statement;

/* Make a stmt entry. */

make_stmt:
        procedure (type, subtype, start, end);

        declare type		fixed binary (8);
					      /* (Input) statement type */
        declare subtype		fixed binary (8);
					      /* (Input) statement subtype */
        declare start		fixed binary;   /* (Input) first token of statement */
        declare end			fixed binary;   /* (Input) last token of statement */

        if stmtx >= hbound (stmt, 1) then
	      call error (4, "Too many statements.", start);

        stmtx = stmtx + 1;
        unspec (stmt (stmtx)) = ""b;
        stmt (stmtx).type = type;
        stmt (stmtx).subtype = subtype;
        stmt (stmtx).start = start;
        stmt (stmtx).end = end;
        end make_stmt;

/* Print an error message. */

error:
        procedure (severity, error_string, tokenx);

        declare severity		fixed binary (35);
					      /* (Input) severity of the error */
        declare error_string		char (*);	      /* (Input) error message */
        declare tokenx		fixed binary;   /* (Input) token on which error occurred */

        call format_pl1_error_ (temp_segs (*), severity, error_string,
	  (token (tokenx).string_ptr));

        if severity >= 4 then
	      goto unrecoverable_error;
        end error;

        end format_pl1_stmt_type_;
