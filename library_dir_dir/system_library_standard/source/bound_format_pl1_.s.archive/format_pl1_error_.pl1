/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Centralize format_pl1 error reporting.

   Written by Paul Green.
   Modified by Monte Davidoff.
*/
/* format: style5 */
format_pl1_error_:
        procedure (P_temp_segs, P_severity, P_error_string, P_source_ptr);

        declare P_temp_segs		(*) pointer;    /* (Input) array of temporary segment pointers */
        declare P_severity		fixed binary (35);
					      /* (Input) severity of the error */
        declare P_error_string	char (*);	      /* (Input) error message */
        declare P_source_ptr		pointer;	      /* (Input) pointer to where error occured in the source */

/* automatic */

        declare line_length		fixed binary (21);
        declare line_number		fixed binary (21);
        declare line_start		fixed binary (21);

/* based */

        declare source_string		char (global.source_length)
				based (global.source_ptr);

/* builtin */

        declare (divide, index, length, max, null, size, substr)
				builtin;

/* internal static */

        declare NL			char (1) internal static
				options (constant) initial ("
");

/* entry */

        declare char_offset_		entry (pointer)
				returns (fixed binary (21)) reducible;
        declare ioa_		entry options (variable);

%include format_pl1_dcls;

/* program */

        temp_segs (*) = P_temp_segs (*);

        global.max_severity = max (global.max_severity, P_severity);

        line_number = 0;

        if P_source_ptr ^= null then
	      begin;
	      declare loop		        bit (1) aligned;
	      declare source_position	        fixed binary (21);

	      source_position =
		char_offset_ (P_source_ptr)
		- char_offset_ (global.source_ptr) + 1;

	      line_start = 1;
	      line_length = 0;

	      loop = "1"b;
	      do while (loop);
		    line_number = line_number + 1;
		    line_start = line_start + line_length;
		    line_length =
		        index (substr (source_string, line_start), NL);

		    loop = line_start + line_length <= source_position
		        & line_length > 0;
	      end;

	      if line_length = 0 then
		    line_length =
		        length (substr (source_string, line_start)) + 1;
	      end;

/* Print the error message. */

        call ioa_ ("^/^[WARNING^s^;SEVERITY ^d ERROR^]^[^s^; ON LINE ^d^]",
	  P_severity = 1, P_severity, line_number = 0, line_number);

        if P_error_string ^= "" then
	      call ioa_ ("^a", P_error_string);

        if line_number > 0 then
	      call ioa_ ("SOURCE:^-^a",
		substr (source_string, line_start, line_length - 1));
        end format_pl1_error_;
