/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   This is the lexical analysis program for the format_pl1 command.  The
   primary responsibilities of this program are:

   1) Break the source program into tokens.
   2) Thread comments off the preceding token.
   3) Thread interstatement white space off the preceding token.
   4) Diagnose errors in the lexical syntax of programs.

   This program also performs several miscellaneous chores that assist
   subsequent phases.  They are:

   1) Determine the type of arithmetic constants.

   Maintenance Instructions:

   To add another token type:

   1) Add a token type declaration to format_pl1_dcls.incl.pl1.
   2) Adjust the token class limits in format_pl1_dcls.incl.pl1.
   3) If necessary, adjust tentative_token_type and action_table.

   To add another macro:

   1) To add another macro statement, see in format_pl1_stmt_type_.
   2) To add another macro reference, i.e.  a macro construct that gets
   formatted like a PL/I reference such as %isarg, %isdef, and
   %target, add an entry to the ignore_percent_token array.
*/

/* HISTORY:
   Written by Paul Green, 11/05/77.
   from "lex" in the PL/I compiler.
   Modified:
   12/26/77 by Paul Green:  Save comments and vertical white space as
   token trailers.
   11/01/78 by Monte Davidoff:
   06/05/84 by R. Michael Tague:  Make format_pl1 handle all % macro statements.
   Changed %arg to %isarg, and added %isdef to ignore_percent_token.
*/
/* format: style5 */
format_pl1_lex_:
        procedure (P_temp_segs);

        declare P_temp_segs		(*) pointer;    /* (Input) array of temporary segment pointers */

/* automatic */

        declare action_index		fixed binary;   /* index of action to execute */
        declare current_char		char (1) aligned;
					      /* character that stopped the scan, char we are checking */
        declare loop		bit (1) aligned;/* loop control variable */
        declare scan_index		fixed binary (21);
					      /* index (relative to source_index) of forward scan */
        declare source_index		fixed binary (21);
					      /* index into current source segment */
        declare source_length		fixed binary (21);
					      /* length (in characters) of current source segment */
        declare source_ptr		pointer;	      /* pointer to base of source segment */
        declare string_length		fixed binary (21);
					      /* number of characters in dequoted string */
        declare token_length		fixed binary (21);
					      /* length of token in characters */
        declare token_start		fixed binary (21);
					      /* index of first character of current token */
        declare token_type		fixed binary (8);
					      /* type of current token */
        declare tokenx		fixed binary;   /* index into token */
        declare trailerx		fixed binary;   /* index into trailer */

        declare tentative_token_type	(0:128) fixed binary (8)
				initial ((9) invalid_char,
					      /* 000-010	ctl chars	*/
				no_token,	      /* 011		HT	*/
				(3) nl_vt_np_token,
					      /* 012-014	NL VT NP	*/
				(19) invalid_char,
					      /* 015-037	ctl chars	*/
				no_token,	      /* 040		SP	*/
				invalid_char,   /* 041		!	*/
				char_string,    /* 042		"	*/
				(2) invalid_char,
					      /* 043-044	# $	*/
				percent,	      /* 045		%	*/
				and,	      /* 046		&	*/
				invalid_char,   /* 047		'	*/
				left_parn,      /* 050		(	*/
				right_parn,     /* 051		)	*/
				asterisk,	      /* 052		*	*/
				plus,	      /* 053		+	*/
				comma,	      /* 054		,	*/
				minus,	      /* 055		-	*/
				period,	      /* 056		.	*/
				slash,	      /* 057		/	*/
				(10) dec_integer,
					      /* 060-071	0 - 9	*/
				colon,	      /* 072		:	*/
				semi_colon,     /* 073		;	*/
				lt,	      /* 074		<	*/
				assignment,     /* 075		=	*/
				gt,	      /* 076		>	*/
				(2) invalid_char,
					      /* 077-100	? @	*/
				(26) identifier,/* 101-132	A - Z	*/
				(3) invalid_char,
					      /* 133-135	[ \ ]	*/
				not,	      /* 136		^	*/
				(2) invalid_char,
					      /* 137-140	_ `	*/
				(26) identifier,/* 141-172	a - z	*/
				invalid_char,   /* 173		{	*/
				or,	      /* 174		|	*/
				(3) invalid_char,
					      /* 175-177	} ~ PAD	*/
				invalid_char);  /* >177		non-ASCII	*/

/* based */

        declare source_string		char (source_length) based (source_ptr);
        declare source_string_array	(source_length) char (1)
				based (source_ptr);
        declare token_string		char (token (tokenx).string_size)
				based (token (tokenx).string_ptr);

/* builtin */

        declare (addr, binary, bit, char, divide, hbound, index, lbound, length,
	      min, null, rank, search, size, substr, unspec, verify)
				builtin;

/* internal static */

        declare action_table		(0:128) fixed binary internal
				static options (constant)
				initial ((9) 10,/* 000-010	ctl chars */
				1,	      /* 011		HT	*/
				(3) 9,	      /* 012-014	NL VT NP	*/
				(19) 10,	      /* 015-037	ctl chars	*/
				1,	      /* 040		SP	*/
				10,	      /* 041		!	*/
				2,	      /* 042		"	*/
				10,	      /* 043		#	*/
				10,	      /* 044		$	*/
				4,	      /* 045		%	*/
				5,	      /* 046		&	*/
				10,	      /* 047		'	*/
				(2) 5,	      /* 050-051	( )	*/
				11,	      /* 052		*	*/
				(2) 5,	      /* 053-054	+ ,	*/
				12,	      /* 055		-	*/
				7,	      /* 056		.	*/
				6,	      /* 057		/	*/
				(10) 8,	      /* 060-071	0 - 9	*/
				(2) 5,	      /* 072-073	: ;	*/
				13,	      /* 074		<	*/
				5,	      /* 075		=	*/
				14,	      /* 076		>	*/
				(2) 10,	      /* 077-100	? @	*/
				(26) 3,	      /* 101-132	A - Z	*/
				(3) 10,	      /* 133-135	[ \ ]	*/
				15,	      /* 136		^	*/
				(2) 10,	      /* 137-140	_ `	*/
				(26) 3,	      /* 141-172	a - z	*/
				10,	      /* 173		{	*/
				16,	      /* 174		|	*/
				(3) 10,	      /* 175-177	} ~ PAD	*/
				10);	      /* >177		non-ASCII	*/

        declare bit_string_characters	char (23) internal static
				options (constant)
				initial ("""0123456789ABCDEFabcdef");
        declare digits		char (10) internal static
				options (constant)
				initial ("0123456789");
        declare identifier_characters	char (64) internal static
				options (constant)
				initial (
				"$0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
				);
        declare ignore_percent_token	(3) char (8) internal static
				options (constant)
				initial ("%isarg", "%isdef", "%target");
        declare HT_SP		char (2) internal static
				options (constant) initial ("	 ");
        declare NL_VT_NP		char (3) internal static
				options (constant) initial ("
");
%include format_pl1_dcls;

/* program */

        temp_segs (*) = P_temp_segs (*);
        global.n_tokens = 0;
        global.n_trailers = 0;

        source_ptr = global.source_ptr;
        source_length = global.source_length;
        source_index = 1;

        unspec (token (1)) = ""b;		      /* build dummy first token */
        token (1).type = no_token;
        token (1).string_ptr = null;
        tokenx = 1;
        trailerx = 0;

action (1):				      /* Scan horizontal white space */
        scan_index = verify (substr (source_string, source_index), HT_SP);
        if scan_index = 0 then
	      goto end_of_source_reached_but_no_pending_token;

        source_index = source_index + scan_index;
        current_char = substr (source_string, source_index - 1, 1);

        token_start = source_index - 1;
        token_type =
	  tentative_token_type (
	  min (rank (current_char), hbound (tentative_token_type, 1)));

        action_index =
	  action_table (min (rank (current_char), hbound (action_table, 1)));
        goto action (action_index);

action (2):				      /* Scan string: current_char = '"' */
        string_length = 0;			      /* count of number of characters in reduced string */

        loop = "1"b;
        do while (loop);
	      scan_index =
		index (substr (source_string, source_index), """") - 1;
	      if scan_index < 0 then
		    do;
		    call error (3,
		        "Missing double quote after string constant.",
		        token_start);

		    source_index = source_length + 1;
		    string_length =
		        string_length + (source_length - token_start + 1);
		    goto end_of_source_reached;
		    end;

	      source_index = source_index + scan_index + 1;
	      string_length = string_length + scan_index;

	      if source_index > source_length	      /* not an error */
		then
		    goto end_of_source_reached;

	      loop = substr (source_string, source_index, 1) = """";
	      if loop then
		    do;
		    source_index = source_index + 1;
		    string_length = string_length + 1;
		    end;
        end;

        if substr (source_string, source_index, 1) = "b" then
	      do;
	      token_type = bit_string;
	      source_index = source_index + 1;

	      if source_index <= source_length then
		    if index ("1234",
		        substr (source_string, source_index, 1)) > 0 then
			  source_index = source_index + 1;

	      if string_length > max_bit_string_constant then
		    call error (2, "Bit-string constant too long.",
		        token_start);

	      if verify (
		substr (source_string, token_start,
		source_index - token_start), bit_string_characters) ^= 0
		then
		    call error (2,
		        "Invalid characters in bit-string constant.",
		        token_start);
	      end;

        else
	      do;
	      if string_length > max_char_string_constant then
		    call error (2, "Character-string constant too long.",
		        token_start);

	      if global.ca.check_strings
		& (
		search (
		substr (source_string, token_start,
		source_index - token_start), NL_VT_NP) > 0
		|
		index (
		substr (source_string, token_start,
		source_index - token_start), "/*") > 0
		|
		index (
		substr (source_string, token_start,
		source_index - token_start), "*/") > 0) then
		    call error (1,
		        "Character-string constant contains ""/*"", ""*/"", or vertical white space."
		        , token_start);
	      end;

        call make_token;
        goto check_syntax_after_constant;

action (3):				      /* Scan identifiers */
        call scan_past_identifier_characters;
        call make_token;

/* Now make sure the syntax after the identifier is correct. */

        if substr (source_string, source_index, 1) = """"
	  & token_string ^= "p" & token_string ^= "pic"
	  & token_string ^= "picture" then
	      call error (2, "Double quote after identifier.", source_index);

        goto action (1);

action (4):				      /* % */
        if source_index > source_length then
	      goto end_of_source_reached;

        current_char = substr (source_string, source_index, 1);
        action_index =
	  action_table (min (rank (current_char), hbound (action_table, 1)));

        if action_index ^= 3			      /* identifier */
	  then
	      do;
	      call make_token;
	      goto action (1);
	      end;

        source_index = source_index + 1;
        call scan_past_identifier_characters;

        do action_index = lbound (ignore_percent_token, 1)
	  to hbound (ignore_percent_token, 1)
	  while (ignore_percent_token (action_index)
	  ^= substr (source_string, token_start, source_index - token_start));
        end;

        if action_index <= hbound (ignore_percent_token, 1) then
	      token_type = identifier;

        call make_token;

/* Now make sure the syntax after the %<identifier> is correct. */

        if substr (source_string, source_index, 1) = """" then
	      call error (2, "Double quote after %identifier.", source_index);

        goto action (1);

action (5):				      /* Single character tokens */
        call make_token;
        goto action (1);

action (6):				      /* Separate / and /* */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) ^= "*" then
	      do;
	      call make_token;
	      goto action (1);
	      end;

        token_type = comment_token;
        source_index = source_index + 1;

        scan_index = index (substr (source_string, source_index), "*/") - 1;
        if scan_index < 0 then
	      do;
	      call error (3, "Missing ""*/"" at end of comment.", token_start)
		;

	      source_index = source_length + 1;
	      call make_trailer;
	      goto end_of_source_reached_but_no_pending_token;
	      end;

        source_index = source_index + scan_index + length ("*/");

        if index (
	  substr (source_string, token_start + length ("/*"),
	  source_index - token_start - length ("/*") - length ("*/")), "/*")
	  > 0 & global.ca.check_comments then
	      call error (1, "Comment contains ""/*"".", token_start);

        call make_trailer;
        goto action (1);

action (7):				      /* Separate . and numbers: current_char = "." */
        if source_index > source_length then
	      goto end_of_source_reached;

        if index (digits, substr (source_string, source_index, 1)) = 0 then
	      do;
	      call make_token;
	      goto action (1);
	      end;

        token_type = fixed_dec;
        call scan_past_digits;
        goto scan_exponent;

action (8):				      /* Scan numbers and isubs: current char = <digit> */
        if source_index > source_length then
	      goto end_of_source_reached;

        call scan_past_digits;

        if substr (source_string, source_index, 1) = "." then
	      do;
	      token_type = fixed_dec;
	      source_index = source_index + 1;
	      call scan_past_digits;
	      end;

        else    if source_index + 2 <= source_length then
	      if substr (source_string, source_index, 3) = "sub" then
		    do;
		    source_index = source_index + 3;
		    token_type = isub;
		    call make_token;
		    goto check_syntax_after_constant;
		    end;

scan_exponent:
        token_length = source_index - token_start;      /* remember length of mantissa for later error check */

        if substr (source_string, source_index, 1) = "e"
	  | substr (source_string, source_index, 1) = "f" then
	      do;
	      if substr (source_string, source_index, 1) = "e" then
		    token_type =
		        bit_to_arithmetic (arithmetic_to_bit (token_type)
		        | is_float_constant);

	      token_type =
		bit_to_arithmetic (arithmetic_to_bit (token_type)
		& ^is_integral_constant);
	      source_index = source_index + 1;

	      if source_index > source_length then
		    do;
		    call error (3,
		        "Missing exponent in arithmetic constant.",
		        token_start);
		    goto end_of_source_reached;
		    end;

	      if substr (source_string, source_index, 1) = "+"
		| substr (source_string, source_index, 1) = "-" then
		    do;
		    source_index = source_index + 1;

		    if source_index > source_length then
			  do;
			  call error (3,
			      "Missing exponent in arithmetic constant.",
			      token_start);
			  goto end_of_source_reached;
			  end;
		    end;

	      call scan_past_digits;
	      end;

        if substr (source_string, source_index, 1) = "b"/* binary constant */
	  then
	      do;
	      token_type =
		bit_to_arithmetic (arithmetic_to_bit (token_type)
		& ^is_decimal_constant);
	      source_index = source_index + 1;

	      if verify (substr (source_string, token_start, token_length),
		".01") > 0 then
		    call error (2, "Non-binary digit in binary constant.",
		        token_start);
	      end;

        if source_index <= source_length then
	      if substr (source_string, source_index, 1) = "p" then
		    do;			      /* default suppression indicator */
		    token_type =
		        bit_to_arithmetic (arithmetic_to_bit (token_type)
		        & ^is_integral_constant);
		    source_index = source_index + 1;
		    end;

        if source_index <= source_length then
	      if substr (source_string, source_index, 1) = "i" then
		    do;			      /* imaginary constant */
		    token_type =
		        bit_to_arithmetic (arithmetic_to_bit (token_type)
		        | is_imaginary_constant);
		    source_index = source_index + 1;
		    end;

        call make_token;

/* Now make sure the syntax after the constant is correct. */

check_syntax_after_constant:
        if source_index > source_length then
	      goto end_of_source_reached;

        current_char = substr (source_string, source_index, 1);
        action_index =
	  action_table (min (rank (current_char), hbound (action_table, 1)));

        if action_index = 2 | action_index = 3 | action_index = 8
					      /* double quote, identifier, or arithmetic constant */
	  then
	      call error (2, "Invalid syntax after constant or isub.",
		source_index);

        goto action (1);

action (9):				      /* Scan NL VT NP */
        scan_index =
	  verify (substr (source_string, source_index), NL_VT_NP) - 1;
        if scan_index < 0 then
	      source_index = source_length + 1;
        else
	      source_index = source_index + scan_index;

        call make_trailer;
        goto action (1);

action (10):				      /* Invalid characters */
        if rank (current_char) < 32 | 128 <= rank (current_char) then
	      call error (2,
		"Invalid character. """
		|| char (bit (rank (current_char))) || """b",
		source_index - 1);

        else    if current_char = "_" | current_char = "$" then
	      call error (2,
		"""" || current_char || """ may not start an identifier.",
		source_index - 1);

        else
	      call error (2, "Invalid character. """ || current_char || """",
		source_index - 1);

        call make_token;
        goto action (1);

action (11):				      /* Separate * and ** */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = "*" then
	      do;
	      source_index = source_index + 1;
	      token_type = expon;
	      end;

        call make_token;
        goto action (1);

action (12):				      /* Separate - and -> */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = ">" then
	      do;
	      source_index = source_index + 1;
	      token_type = arrow;
	      end;

        call make_token;
        goto action (1);

action (13):				      /* Separate < and <= */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = "=" then
	      do;
	      source_index = source_index + 1;
	      token_type = le;
	      end;

        call make_token;
        goto action (1);

action (14):				      /* Separate > and >= */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = "=" then
	      do;
	      source_index = source_index + 1;
	      token_type = ge;
	      end;

        call make_token;
        goto action (1);

action (15):				      /* Separate ^ and ^= and ^< and ^> */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = "=" then
	      do;
	      source_index = source_index + 1;
	      token_type = ne;
	      end;

        else    if substr (source_string, source_index, 1) = "<" then
	      do;
	      source_index = source_index + 1;
	      token_type = nlt;
	      end;

        else    if substr (source_string, source_index, 1) = ">" then
	      do;
	      source_index = source_index + 1;
	      token_type = ngt;
	      end;

        call make_token;
        goto action (1);

action (16):				      /* Separate | and || */
        if source_index > source_length then
	      goto end_of_source_reached;

        if substr (source_string, source_index, 1) = "|" then
	      do;
	      source_index = source_index + 1;
	      token_type = cat;
	      end;

        call make_token;
        goto action (1);

/* Control transfers here whenever the lex reaches the end of the current source segment. */

end_of_source_reached:
        call make_token;

end_of_source_reached_but_no_pending_token:
        if tokenx >= hbound (token, 1) then
	      call error (4, "Too many tokens.", source_length);

        unspec (token (tokenx + 1)) = ""b;	      /* build dummy last token */
        token (tokenx + 1).type = no_token;

/* Set string_ptr so error messages will indicate the end of the program. */

        if source_length = 0 then
	      token (tokenx + 1).string_ptr = null;
        else
	      token (tokenx + 1).string_ptr =
		addr (source_string_array (source_length));

unrecoverable_error:
        global.n_tokens = tokenx;
        global.n_trailers = trailerx;

        return;

/* Make a Token.

   Convention:
   token_type	set to the correct type
   token_start	set to index of first character of token
   source_index	set to index of first character after token
*/
make_token:
        procedure;

        token_length = source_index - token_start;

        if token_type = identifier & token_length > max_identifier_length then
	      call error (2, "Identifier too long.", token_start);

        if tokenx >= hbound (token, 1) then
	      call error (4, "Too many tokens.", token_start);

        tokenx = tokenx + 1;
        unspec (token (tokenx)) = ""b;
        token (tokenx).type = token_type;
        token (tokenx).string_size = token_length;
        token (tokenx).string_ptr = addr (source_string_array (token_start));
        end make_token;

/* Make a token trailer and thread it off of the previous token.

   Convention:
   token_start	set to index of first char of trailer
   token_type	set to trailer type
   source_index	set to first char past trailer
*/
make_trailer:
        procedure;

        if trailerx >= hbound (trailer, 1) then
	      call error (4, "Too many trailers.", token_start);

        trailerx = trailerx + 1;
        unspec (trailer (trailerx)) = ""b;
        trailer (trailerx).type = token_type;
        trailer (trailerx).string_size = source_index - token_start;
        trailer (trailerx).string_ptr =
	  addr (source_string_array (token_start));

        if token (tokenx).trailer_index = 0 then
	      token (tokenx).trailer_index = trailerx;
        else
	      trailer (trailerx - 1).continued = "1"b;
        end make_trailer;

/* Convert an arithmetic token type to it's bit string encoding. */

arithmetic_to_bit:
        procedure (type) returns (bit (4) aligned);

        declare type		fixed binary (8);
					      /* (Input) arithmetic token type */

        return (bit (binary (type - min_arithmetic_token, 4), 4));
        end arithmetic_to_bit;

/* Convert the bit string encoding of an arithmetic token type to it's token type. */

bit_to_arithmetic:
        procedure (bit_encoding) returns (fixed binary (8));

        declare bit_encoding		bit (4) aligned;/* (Input) arithmetic token type bit string encoding */

        return (binary (bit_encoding, 4) + min_arithmetic_token);
        end bit_to_arithmetic;

/* Scan sequences of identifier characters.

   Convention:
   source_index	Entry: on character after identifier character
   Exit: on stopping break
*/
scan_past_identifier_characters:
        procedure;

        scan_index =
	  verify (substr (source_string, source_index), identifier_characters)
	  - 1;
        if scan_index < 0 then
	      do;
	      source_index = source_length + 1;
	      goto end_of_source_reached;
	      end;

        source_index = source_index + scan_index;
        end scan_past_identifier_characters;

/* Scan sequences of <digits>.

   Convention:
   source_index	Entry: on character after digit
   Exit: on stopping break
*/
scan_past_digits:
        procedure;

        scan_index = verify (substr (source_string, source_index), digits) - 1;
        if scan_index < 0 then
	      do;
	      source_index = source_length + 1;
	      goto end_of_source_reached;
	      end;

        source_index = source_index + scan_index;
        end scan_past_digits;

/* Print an error message. */

error:
        procedure (severity, error_string, error_index);

        declare severity		fixed binary (35);
					      /* (Input) severity of error */
        declare error_string		char (*);	      /* (Input) error message */
        declare error_index		fixed binary (21);
					      /* (Input) index into source where error occured */

        call format_pl1_error_ (temp_segs (*), severity, error_string,
	  addr (source_string_array (error_index)));

        if severity >= 4 then
	      goto unrecoverable_error;
        end error;

        end format_pl1_lex_;
