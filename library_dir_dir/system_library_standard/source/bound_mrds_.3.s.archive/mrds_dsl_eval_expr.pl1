/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_eval_expr:
eval_expr:
     proc (area_ptr, expr_ptr, rmri_ptr, simple_typed_vector_ptr, code);

/* DESCRIPTION:

   This routine evaluates functions and arithmetic expressions appearing in the
   where clause.


   MRDS_DEBUG_TOOL SWITCHES:

   bit 1 = display intermediate expressions.
   bits 2 through 9 = not used.


   HISTORY:

   79-02-01 J. A. Weeldreyer: Modified for MR7.0.

   79-05-10 Al Kepner: Modified to add a handler for the conversion condition.

   79-05-22 Al Kepner: Modified to prevent misuse of the expression stack which
   resulted in a subscriptrange condition.

   79-08-28  NSDavids:  Removed  special  handling of the first argument of the
   expression.   Why  it  was there I don't know but it was not handling a real
   argument and an expression type of complex correcly.

   79-11-30  Rickie  E.   Brinegar:  Modified  to  use mrds_debug_tool switches
   instead of the entry points db_on and db_off.

   79-12-01  Jim  Gray: Modified to make calls to mu_data_class$complex_data_class
   and $real_data_class for determining data categories, so that packed decimal
   was included.

   80-02-01 Jim Gray: Modified to add area_ptr parameter.

   80-05-07  Davids: Modified assignments of tuple_num_atts and tuple_nvar_atts
   to  take  values  from rm_rel_info.model_num_attr and model_nvar_atts rather
   than  rm_rel_info.num_attr  and  nvar_atts.   This was to fix a problem with
   submodels  were the submodel view did not contain a varying string attribute
   and the model did.

   80-08-01  Rickie  E.   Brinegar:  Modified  to  make  the stack structure an
   automatic variable and remove unreferenced declared variables not in include
   files.

   81-02-20  Rickie  E.  Brinegar: Changed calls to mdb_display_value_ to calls
   to  mdb_display_data_value$ptr.  The latter routine does not truncate at 256
   characters of output.

   81-06-01 Jim Gray : modified to use new resultant structure.

   82-08-25 Mike Kubicar : converted from tuple structure to simple typed
   vector.

*/

	display_intermed_expr = substr (db_mrds_dsl_eval_expr, 1, 1);
	num_dims = 0;

	on conversion goto conversion_error;


	wa_ptr = area_ptr;
	stack.top_entry = 0;			/* init for no operands */
	call determine_result_type (expr.nitems);	/* set result_type switch for the first entry in the expression structure */


/*
   now process each entry in the expression
*/

	do i = 1 to expr.nitems;

/* the operand will be DATA type or SCAL_FUN type
   which will be processed when an OPERATOR is encountered
*/


	     if expr.item.type (i) = DATA then do;
		     if expr.item.data_type (i) = DATABASE then
			call get_db_item (i);	/* must initialize ptr for assign_ */

		     if expr.item.desc (i) = expr.item.desc (expr.nitems)
						/* no need for conversion */
		     then call increment_stack (i, expr.item.assn_ptr (i));

		     else do;			/* must convert to intermediate type and precision */
			     stack.top_entry = stack.top_entry + 1; /* push up by 1 */
			     if result_type = CMPX then do; /* mode is complex */
				     assign_desc = CFLTD59;
				     op_ptr = addr (stack.operand.cmpx_op (stack.top_entry));
						/* ptr to intermediate value */
				end;

			     else do;		/* treat as if mode is rea */
				     assign_desc = RFLTD59;
				     op_ptr = addr (stack.operand.real_op (stack.top_entry));
				end;

			     call
				mu_convert$convert_data (expr.item.assn_ptr (i),
				addr (expr.item.desc (i)), op_ptr, addr (assign_desc), icode);
			     if icode ^= 0 then
				call error (icode);
			     stack.operand.index (stack.top_entry) = i; /* index to entry in expr structure */
			     stack.operand.data_ptr (stack.top_entry) = op_ptr;
						/* ptr to operand data */

			end;
		end;				/* end of DATA type processing;
						   */


/* is it a SCAL_FUN type */

	     else if expr.item.type (i) = SCAL_FUN then do; /* is a scalar function */
		     call
			mrds_dsl_eval_func (area_ptr, expr.item.fn_ptr (i), rmri_ptr,
			simple_typed_vector_ptr, icode);
		     if icode ^= 0 then
			call error (icode);
		     call increment_stack (i, expr.item.assn_ptr (i));
						/* result of function is predetermined to
						   be float dec (59)
						   add index and pointer to the operand stack
						   */
		end;

/* is it an OPERATOR type */

	     else if expr.item.type (i) = OPERATOR then do; /* is an operator,
						   so result of operation will be pointed to by this entry in the expr structure */
		     call process_op (i, result_type);
		     call increment_stack (i, expr.item.assn_ptr (i));
						/*
						   add the index and data pointer of the operand to the stack ...
						   it will always be float dec (59)
						   */

		end;
	end;					/* end of do loop which processes each item in the expr structure
						   list */

	code = 0;

	if display_intermed_expr then do;
		call ioa_$nnl ("Expression value: ");

/* 81-02-20 Rickie E. Brinegar: Start changes ****************************** */

		call
		     mdb_display_data_value$ptr (expr.item (expr.nitems).assn_ptr,
		     addr (expr.item (expr.nitems).desc));

/* 81-02-20 Rickie E. Brinegar: End changes ******************************** */

	     end;
exit:
	return;


conversion_error:
	;
	code = mrds_error_$conversion_condition;
	go to exit;

determine_result_type:
     proc (i);

/* is the mode for this entry complex or real
   or character or bit */

	dcl     i			 fixed bin;	/* index value to expression entry */

/* see if the mode for this entry is complex */

	if mu_data_class$complex_data_class (addr (expr.item.desc (i))) then
	     result_type = CMPX;

	else if mu_data_class$real_data_class (addr (expr.item.desc (i))) then
	     result_type = REAL;


	else result_type = CHAR_BIT;			/* mode is character or bit,
						   will be treated as real */

     end determine_result_type;

process_op:
     proc (indx, result_type);

/* This procedure performs the operation designated by the indx element of
   the expr structure upon
   the first operand comes from the top entry in the stack
   and the second operand comes from the next to top entry

   The result is placed in the location pointed to by the assn_ptr variable
   in the indx element of the expr structure.
*/

	dcl     indx		 fixed bin;	/* indx to the expr structure list */
	dcl     result_type		 bit (1) unal;	/* ON => complex mode;  OFF => real mode */

	goto case (expr.item.op_code (indx));

case (1):						/* ADDITION */
	if result_type = CMPX then
	     expr.item.assn_ptr (indx) -> op_cmpx =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_cmpx
		+ stack.operand.data_ptr (stack.top_entry) -> op_cmpx;

	else expr.item.assn_ptr (indx) -> op_real =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_real
		+ stack.operand.data_ptr (stack.top_entry) -> op_real;
	goto exit;


case (2):						/* SUBTRACTION */
	if result_type = CMPX then
	     expr.item.assn_ptr (indx) -> op_cmpx =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_cmpx
		- stack.operand.data_ptr (stack.top_entry) -> op_cmpx;

	else expr.item.assn_ptr (indx) -> op_real =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_real
		- stack.operand.data_ptr (stack.top_entry) -> op_real;
	goto exit;

case (3):						/* MULTIPLY */
	if result_type = CMPX then
	     expr.item.assn_ptr (indx) -> op_cmpx =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_cmpx
		* stack.operand.data_ptr (stack.top_entry) -> op_cmpx;

	else expr.item.assn_ptr (indx) -> op_real =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_real
		* stack.operand.data_ptr (stack.top_entry) -> op_real;
	goto exit;

case (4):						/* DIVISION */
	if result_type = CMPX then
	     expr.item.assn_ptr (indx) -> op_cmpx =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_cmpx
		/ stack.operand.data_ptr (stack.top_entry) -> op_cmpx;

	else expr.item.assn_ptr (indx) -> op_real =
		stack.operand.data_ptr (stack.top_entry - 1) -> op_real
		/ stack.operand.data_ptr (stack.top_entry) -> op_real;
	goto exit;


exit:						/* decrement the stack by 2 because we always operate on two
						   operands at a time
						   */
	stack.top_entry = stack.top_entry - 2;

	return;
     end process_op;

get_db_item:
     proc (ii);

/* procedure to move an attr. value out of the tuple, and decode it if necessary. */

	dcl     ii		 fixed bin;	/* item index */

	rai_ptr = expr.item.ai_ptr (ii);

	call
	     mu_get_data$get_data_item (rai_ptr, area_ptr,
	     (simple_typed_vector.dimension (rm_attr_info.defn_order).value_ptr),
	     expr.item.assn_ptr (ii), addr (expr.item.desc (ii)), icode);
	if icode ^= 0 then
	     call error (icode);

     end get_db_item;

error:
     proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;


increment_stack:
     proc (indx, data_ptr);

/* this procedure adds an expression index value and a pointer to the

   relevant data to a stack to facilitate processing of the expression
   structure list
*/

	dcl     indx		 fixed bin;	/* index to the relevant entry in the expr structure list */
	dcl     data_ptr		 ptr;		/* pointer to the data to be used as an operand */

	if stack.top_entry ^< mrds_data_$max_expr_stack_size then
	     call error (mrds_error_$expr_stack_ovfl);

	stack.top_entry = stack.top_entry + 1;		/* push up by 1 */
	stack.operand.index (stack.top_entry) = indx;	/* index to entry in expr structure */
	stack.operand.data_ptr (stack.top_entry) = data_ptr; /* ptr to operand data */

     end increment_stack;

	declare area_ptr		 ptr;
	dcl     1 stack,
		2 top_entry	 fixed bin,	/* top entry in the operand stack */
		2 operand		 (mrds_data_$max_expr_stack_size), /* (expr.nitems refer (stack.top_entry)), */
		  3 index		 fixed bin,	/* index to expr structure for this operand */
		  3 data_ptr	 ptr,		/* ptr to data for this operand */
		  3 real_op	 real float dec (59) aligned, /* intermediate value for real operand */
		  3 cmpx_op	 complex float dec (59) aligned; /* intermediate value for complex operands */

	dcl     assign_desc		 bit (36);	/* descriptor for REAL or COMPLEX float dec (59) */
	dcl     op_cmpx		 complex float dec (59) aligned based; /* if mode is complex */
	dcl     op_real		 real float dec (59) aligned based; /* format for first operand if mode is real */

	dcl     (
	        display_intermed_expr,		/* debug_tool switch */
	        result_type
	        )			 bit (1) unal;	/* ON => complex; OFF => treat as real */

	dcl     (
	        op_ptr,				/* ptr to operand */
	        wa_ptr
	        )			 ptr;

	dcl     (
	        CHAR_BIT		 bit (1) unal init ("0"b), /* mode is char or bit */
	        CMPX		 bit (1) unal init ("1"b), /* complex mode */
	        REAL		 bit (1) unal init ("0"b)
	        )			 internal static options (constant); /* real mode */

	dcl     i			 fixed bin;	/* index value */

	dcl     (
	        code,				/* Output:  status code */
	        icode				/* internal status code */
	        )			 fixed bin (35);	/* to data in tuple.data */

	dcl     (addr, null, substr)	 builtin;

	dcl     conversion		 condition;

	dcl     ioa_$nnl		 entry options (variable);

/* 81-02-20 Rickie E. Brinegar: Start changes ****************************** */

	dcl     mdb_display_data_value$ptr entry (ptr, ptr);

/* 81-02-20 Rickie E. Brinegar: End changes ******************************** */

	dcl     mu_data_class$complex_data_class entry (ptr) returns (bit (1) aligned);
	dcl     mu_convert$convert_data entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_get_data$get_data_item entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_data_class$real_data_class entry (ptr) returns (bit (1) aligned);
	dcl     mrds_dsl_eval_func	 entry (ptr, ptr, ptr, ptr, fixed bin (35));

	dcl     mrds_data_$max_expr_stack_size fixed bin (35) ext;
	dcl     mrds_error_$conversion_condition fixed bin (35) ext;
	dcl     mrds_error_$expr_stack_ovfl fixed bin (35) ext;

%include mdbm_descriptor;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_rel_info;
%page;
%include mrds_debug_names;
%page;
%include mrds_expressions;
%page;
%include vu_typed_vector;

     end mrds_dsl_eval_expr;
