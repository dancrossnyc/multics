/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
  2) change(87-01-22,Hergert), approve(88-05-19,MCR7903),
     audit(88-05-19,Dupuis), install(88-08-01,MR12.2-1073):
     For new parser, changed references of sel_ptr to select_list_ptr.
  3) change(89-09-25,AWTaylor), approve(89-09-25,MCR8116),
     audit(89-10-12,Hussein), install(89-10-13,MR12.3-1093):	
     phx21249 - Created variable last_tuple_id to prevent redundent processing
     in while loop.
                                                   END HISTORY COMMENTS */


mrds_dsl_delete: delete: proc;

/* (database_index, selection_expression, values, code) */
%page;
/* NOTES:

   The purpose of this procedure is to implement the dsl_$delete function.
   This procedure calls translate with the selection expression then calls search and mu_delete.

   HISTORY:
   Written by R. D. Lackey January, 1976

   Modified for MR7.0 by JA Weeldreyer -- October, 1978.

   Modified by Al Kepner, March 26, 1979, to add caller parameter to
   mrds_dsl_translate.

   Modified by Al Kepner, Aug  6,  1979,  to  pick  up  the  correct
   var_index for the tuple being deleted.

   Modified by Jim Gray - - Nov. 1979,  to  correct  calculation  of
   num_args  that  will be passed to mrds_dsl_translate from nargs -
   2, to nargs - 3.

   Modified by Jim Gray - - Feb. 1980,  to  put  allocations  in  an
   extensible, non-freeing area managed by this routine.

   Modified by Jim Gray - - June 1980,  to  add  first_time_flag  to
   mu_delete interface, so allocated space could be reused.

   81-01-29     Jim     Gray     :     removed     references     to
   mdbm_data_$current_version,  using  a  constant instead, to allow
   for future db version expansion.

   81-03-24 Jim Gray : added capability for user to delcare

   81-03-27 Jim  Gray  :  changed  dbi  parameter  to  mu_delete  to
   dbcb_ptr  as  part  of removing use of mus_ptr_man. the selection
   expression either char varying or nonvarying.

   81-07-07 Jim Gray : removed  reset  of  dbcb.last_store_rel_name,
   since  deletes  will  have no affect on store -another info. Also
   added change of statistics  update  count  by  number  of  tuples
   deleted.

   81-10-13 Davids: moved the code that sets the value  of  num_ptrs
   to  preceed  any  reference  that  would  need  that  value, this
   prevents possible subscriptrange errors if the  random  value  of
   num_ptrs is small.

   82-10-07 Mike Kubicar : converted to use the relation manager.  This
   involved deleting the call to mu_delete (the module has been deleted)
   and calling relmgr_$delete_tuples_by_id with an array of no more than
   100 tuples.  Any other functions of mu_delete needed have been moved to
   this routine (a few security checks).

   82-12-10 Davids: Modified the declaration of num_deleted to fixed bin (35)
   from fixed bin. This was needed because the declaration of the relation
   manager entries in the dbcb was changed from options variable to reality. 

   83-01-21 Mike Kubicar: Added transaction processing include files.

   83-02-16 Davids: Modified to not loop through collecting 100 tuple ids
   for tuples to be deleted when the selection expression was a -current
   just to get 1 tuple id.

   83-05-04 Davids: Modified so that mu_define_area is called with a name
   of MRDS || dbi_pic. This will allow closes to be faster since all
   temp_segments with the name MRDS || dbi_pic can be deleted/freed in 1 call.
   the variable dbi_pic was created as an easy way to convert from fixed bin
   to character.

   83-05-31 Mike Kubicar : Update relation manager calling sequences.

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)

   85-01-15 Thanh Nguyen:  Added code to create a special work area using 
   mu_define_area$define_spec_temp_dir_area.  For now, this work area is used
   by mu_retrieve and mu_get_data to "allocate" value_for_db and value_for_user
   thru function mrds_space_allocate and reinitialize the area thru subroutine
   mrds_area_initialize.
*/
%page;
/* INPUT CONDITIONS:
   database_index 		is the index of the database the used wishes to delete.

   selection_expression 	is the expression supplied by the user to select the tuplies to be modified.

   values			are any values used by the selection expression.
*/

/* OUTPUT CONDITIONS:
   If no errors are encountered the deletion was performed.

   code = 0;				If no errors are detected.

   code = mrds_error_$invalid_db_index;  	If no dbcb_ptr was found for the database index.

   code = mrds_error_$tuple_not_found;	If no tuples satisying the se. expr. were found.

   code = something else;  			If some other error was detected;


   If less then 3 arguments were passed to this procedure the
   condition arg_error will be signaled.
*/
%page;
	dbcb_ptr, area_ptr = null ();
	mstxn_txn_id = "0"b;
	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to this proc arg list */
	if al_ptr = null then signal arg_error;		/* This returns you to command level */

	nargs = arg_list.arg_count / 2;		/* Get the number of arguments to this proc */
	if nargs < 3 then signal arg_error;		/* This returns to command level */


	call cu_$arg_ptr (nargs, cd_ptr, arg_len, icode); /* Get  pointer to callers return code */
	if icode ^= 0 then signal arg_error;		/* This returns to command level */

	call cu_$arg_ptr (1, dbi_ptr, arg_len, icode);	/* Get pointer to database index */
	if icode ^= 0 then call error (icode);

	call cu_$arg_ptr (2, se_ptr, se_len, icode);	/* Get pointer to selection expression */
	if icode ^= 0 then call error (icode);

	if arg_list.code = 4
	then do;
		num_ptrs = arg_list.arg_count;
		desc_ptr = arg_list.arg_des_ptr (nargs + 2);
	     end;
	else do;
		num_ptrs = arg_list.arg_count + 1;
		desc_ptr = arg_list.arg_des_ptr (nargs + 3);
	     end;
	if descriptor.type = 22 then do;
		se_len_ptr = addrel (se_ptr, -1);	/* get current length of varying string */
		se_len = se_len_ptr -> se_len_ovrly;
	     end;

	appl_ptr = addr (arg_list.arg_des_ptr (3));	/* Get pointer to the beginning  */
						/*   of the arg_ptr_list for translate */
						/* Now get pointer to beginning of descriptor */
						/*   pointer list for translate */
	if arg_list.code = 4 then adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 3));
	else adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 4));

	num_args = nargs - 3;			/* Number of args passed to translate */

	call mu_database_index$get_resultant_model_pointer (database_index, dbcb_ptr); /* Get the dbcb pointer */
	if dbcb_ptr = null then call error (mrds_error_$invalid_db_index);

	mstxn_transactions_needed = dbcb.transactions_needed;
	save_adpl_ptr = adpl_ptr;
	save_appl_ptr = appl_ptr;
	save_num_args = num_args;
	on cleanup call mstxn_cleanup;
	on any_other call mstxn_any_other;

%include mrds_start_transaction;
	if mstxn_code ^= 0
	then call error (mstxn_code);

	dbcb.user_started_transaction = user_started_transaction;
	dbi_pic = dbcb.dbi;
	call mu_define_area$define_temp_dir_area (dbcb.delete_area_ptr, database_index, (sys_info$max_seg_size), "MRDS" || dbi_pic,
	     "0"b /* not extensible */, "1"b /* no freeing */, "0"b, "0"b /* no zeroing */, icode);
	if icode ^= 0 then call error (icode);
	area_ptr = dbcb.delete_area_ptr;
						/* Create a work area for mu_retrieve to allocate the value_for_user. */
	call mu_define_area$define_spec_temp_dir_area (dbcb.work_area_ptr, database_index, "MRDS" || dbi_pic, icode);
	if icode ^= 0 then call error (icode);

	call mrds_dsl_translate (dbcb_ptr, area_ptr, mrds_data_$caller_delete,
	     se_ptr, se_len, appl_ptr, adpl_ptr, num_args, icode);
	if icode ^= 0 then call error (icode);
	if ^dbcb.val_del then call error (mrds_error_$inval_del_expr);

	ti_ptr = dbcb.ti_ptr;
	range_ptr = dbcb.range_ptr;
	if dbcb.current_flag then select_list_ptr = dbcb.current_ptr;
	else select_list_ptr = dbcb.select_ptr;

	call mrds_dsl_search (dbcb_ptr, area_ptr, icode); /* look for first tuple */
	if icode ^= 0 then call error (icode);

	vi = select_list.item (1).var_index;		/* var_index for tuples to be deleted. */
	ntuples_deleted = 0;
	first_time_flag = "1"b;
	rmri_ptr = range.tup_var.ri_ptr (vi);

/* Do some checking to make sure we have the correct permissions */

	if rm_rel_info.ready_mode ^= SCOPE_UPDATE
	then call error (mrds_error_$inc_ready_mode);
	if ^rm_rel_info.delete
	then call error (mrds_error_$view_prevent);
	if rm_rel_info.mdbm_secured & ^rm_rel_info.delete_tuple_perm
	then call error (mrds_error_$inc_rel_acc);


/* So do the delete */

	call mu_cursor_manager_$get (database_index, rmri_ptr, 0,
	     rm_rel_info.rel_id, dbcb.relmgr_entries.create_cursor,
	     dbcb.relmgr_entries.open, dbcb.cursor_ptrs_storage_ptr,
	     dbcb.cursor_storage_area_ptr, cursor_ptr, icode);
	if icode ^= 0
	then call error (icode);
	eil_number_of_elements = MAX_TUPLES_PER_CALL;
	allocate element_id_list in (work_area) set (element_id_list_ptr);
	element_id_list.version = ELEMENT_ID_LIST_VERSION_1;
	element_id_list.number_of_elements = 0;

/* phx21249, AWTaylor. Init last_tuple_id */

	last_tuple_id = "0"b;

	do while (icode = 0);
	     if dbcb.current_flag
	     then do;
		     element_id_list.number_of_elements = 1;
		     element_id_list.id (element_id_list.number_of_elements)
			= tuple_info.tuple.tuple_id (vi);
		     icode = mrds_error_$tuple_not_found;
		end;
	     else do;
		     do while ((icode = 0)
			& (element_id_list.number_of_elements
			< MAX_TUPLES_PER_CALL));

/* phx21249, AWTaylor. Added a check to skip over redundant tuples */

			if ((element_id_list.number_of_elements = 0) |
			     (tuple_info.tuple_id(vi) ^= last_tuple_id)) then do;
			     element_id_list.number_of_elements
			     = element_id_list.number_of_elements + 1;
			     element_id_list.id (element_id_list.number_of_elements)
			     = tuple_info.tuple.tuple_id (vi);
			end;
			last_tuple_id = tuple_info.tuple.tuple_id(vi);
			call mrds_dsl_search (dbcb_ptr, area_ptr, icode);
		     end;
		end;
	     if (icode ^= 0) & (icode ^= mrds_error_$tuple_not_found)
	     then call error (icode);
	     num_deleted = 0;
	     if element_id_list.number_of_elements > 0 then do;
		     save_icode = icode;		/* Remember code from search */
		     call dbcb.relmgr_entries.delete_tuples_by_id (
			cursor_ptr, element_id_list_ptr, num_deleted, icode);
		     if icode ^= 0
		     then call error (icode);
		     icode = save_icode;
		end;
	     ntuples_deleted = ntuples_deleted + num_deleted;
	     element_id_list.number_of_elements = 0;
	end;

	if rm_rel_info.last_statistics_update_count ^= 0 & /* 0 => not stats got yet */
	     rm_rel_info.last_statistics_update_count <= mrds_data_$statistics_update_count_interval then do;
		rm_rel_info.last_statistics_update_count =
		     rm_rel_info.last_statistics_update_count + ntuples_deleted;
	     end;


	if icode ^= mrds_error_$tuple_not_found then call error (icode);

	code = 0;

exit:

	if code = mrds_error_$tuple_not_found
	then mftxn_code = 0;
	else mftxn_code = code;
%include mrds_finish_transaction;
	if mftxn_code ^= 0
	then code = mftxn_code;

	if dbcb_ptr = null () then ;
	else if dbcb.delete_area_ptr ^= null () then
	     call mu_release_area (dbcb.delete_area_ptr);

	return;					/* Return to the caller with a code */
%page;
error: proc (cd);					/* Internal error  procedure */

	dcl     cd		 fixed bin (35);

	code = cd;				/* Return the error code to caller */
	go to exit;

     end error;

%page;
/**********
*
*  These routines are used by the transaction processing include files.
*  Restore_significant_data restores any data needed by delete to restart,
*  in case a rollback should occur.  Should_rollback decides if a rollback
*  is appropriate.  Right now, it never is.
*
**********/

restore_significant_data:
     proc;
	adpl_ptr = save_adpl_ptr;
	appl_ptr = save_appl_ptr;
	num_args = save_num_args;
	code = 0;
     end restore_significant_data;

should_rollback:
     proc returns (bit (1));
	return ("0"b);
						/* MRDS does not currently rollback transactions */
     end should_rollback;
%page;
%include dm_element_id_list;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_rel_info;
%page;
%include mrds_range;
%page;
%include mrds_tuple_info;
%page;
%include mdbm_arg_list;
%page;
%include mrds_select_list;
%page;
%include mdbm_descriptor;
%page;

/* Multics subroutines */

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));

	dcl     sys_info$max_seg_size	 ext fixed bin;


/*  DBM Routines */

	dcl     mrds_dsl_search	 entry (ptr, ptr, fixed bin (35));
	dcl     mrds_dsl_translate	 entry (ptr, ptr, fixed bin, ptr, fixed bin, ptr, ptr, fixed bin, fixed bin (35));
	dcl     mu_cursor_manager_$get entry (fixed bin (35), ptr, fixed bin (35),
				 bit (36) aligned, entry, entry, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr);
	dcl     mrds_data_$caller_delete fixed bin (17) ext;
	dcl     mrds_data_$max_id_len	 ext fixed bin (35);

	dcl     (mrds_error_$tuple_not_found,
	        mrds_error_$inval_del_expr,
	        mrds_error_$invalid_db_index) ext fixed bin (35);

/* Based variable */

	dcl     work_area		 area based (area_ptr);
	dcl     code		 fixed bin (35) based (cd_ptr);
	dcl     database_index	 fixed bin (35) based (dbi_ptr);

/* Pointers */

	dcl     (se_ptr,				/* Points to the selection expression */
	        appl_ptr,				/* Points to the list of arg pointers for translate */
	        adpl_ptr,				/* Points to the list of arg descriptors for translate */
	        cd_ptr,				/* Points to callers return code */
	        cursor_ptr,				/* Cursor for relation to operate on */
	        dbi_ptr)		 ptr;		/* Points to the database index */


/* Others */

	dcl     any_other		 condition;
	dcl     cleanup		 condition;
	dcl     (nargs,				/* Number of arguments passed to this proc */
	        arg_len,
	        se_len,				/* Selection expression length */
	        vi,				/* index of tuple_variable for tuple being deleted. */
	        num_args)		 fixed bin;	/* Number of args passed to translate */

	dcl     num_deleted		 fixed bin (35);	/* Number of tuples deleted by relation manager */


	dcl     icode		 fixed bin (35);	/* Internal error code */
	dcl     save_icode		 fixed bin (35);	/* Temp save of icode */
	dcl     ntuples_deleted	 fixed bin (35);	/* deleted tuple counter */

	dcl     arg_error		 condition;	/* Condition signaled if less then 3 arguments
						   were passed to this proc */

	dcl     area_ptr		 ptr;
	dcl     mrds_data_$max_attributes fixed bin (35) ext static;
	dcl     mrds_data_$statistics_update_count_interval fixed bin (35) ext; /* number of updates/references before next stats update */
	dcl     mrds_error_$inc_ready_mode fixed bin (35) ext static; /* Update mode not correct */
	dcl     mrds_error_$inc_rel_acc fixed bin (35) ext static; /* Not allowed by submodel */
	dcl     mrds_error_$view_prevent fixed bin (35) ext static; /* Not allowed by submodel */
	dcl     first_time_flag	 bit (1) aligned;	/* on => first call to mu_delete */
	dcl     mu_release_area	 entry (ptr);
	dcl     mu_define_area$define_temp_dir_area entry (ptr, fixed bin (35), fixed bin (18), char (11), bit (1) aligned,
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     mu_define_area$define_spec_temp_dir_area entry (ptr, fixed bin (35), char (11), fixed bin (35));
dcl  last_tuple_id bit (36) aligned; /* Last tuple id used to check for redundancy */
	dcl     save_adpl_ptr	 ptr;		/* Saved copy of adpl_ptr in case of rollback */
	dcl     save_appl_ptr	 ptr;		/* Saved copy of appl_ptr in case of rollback */
	dcl     save_num_args	 fixed bin;	/* Saved copy of num_args in case of rollback */
	dcl     se_len_ptr		 ptr;		/* temp for getting varying se len */
	dcl     se_len_ovrly	 fixed bin (35) based;
	dcl     (null,
	        addr,
	        addrel,
	        fixed,
	        rel)		 builtin;
	dcl     MAX_TUPLES_PER_CALL	 fixed bin int static
				 options (constant) init (100);
						/* Number of tuples to delete (max) per call to relation manager */
	dcl     SCOPE_UPDATE	 fixed bin int static init (6)
				 options (constant);
						/* Update permission needed */
	dcl     dbi_pic		 picture "999";

     end;
