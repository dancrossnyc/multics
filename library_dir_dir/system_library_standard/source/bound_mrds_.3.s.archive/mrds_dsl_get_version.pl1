/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-01-11,Blair), approve(88-02-26,MCR7840),
     audit(88-03-03,Dupuis), install(88-03-08,MR12.2-1034):
     Get the list of mrds search_paths and loop through them to find the
     pathname of the database.
  2) change(88-02-26,Blair), approve(88-02-26,MCR7840),
     audit(88-03-03,Dupuis), install(88-03-08,MR12.2-1034):
     Create a local area in which to put the 'mrds' search_list infos.
                                                   END HISTORY COMMENTS */

/* HISTORY:

   Originally written by Jim Gray - - February 1980

   Modified by Jim Gray - - April 1980, to work with submodels.

   Modified   by   Jim   Gray   -   -    21-June-80,    to    return
   mrds_error_$no_model_submodel instead of $no_database.

   80-12-24 Jim Gray : changed error returned when  null  access  to
   db_model  or  a submodel msf, to new mrds_error_$no_model_access,
   instead of no database model/submodel found.

   81-01-22 Jim Gray : changed  $header  entry  into  get_path_info,
   with  a new structure for the interface, that contains additional
   info, in order to make an isolated (from  mrds  structures)  user
   interface.

   81-02-11 Jim Gray : changed calls to  external  dsmd_,  into  the
   internal interface rmds_dsm_dsmd.

   81-04-22 Jim Gray : modified logic to work with mrds_dm_open that
   now  used  mrds_dm_check_path,  and may automatically add the .db
   suffix  on  it's  own,  and  returns  mrds_error_$no_model_access
   rather than error_table_$moderr.

   81-06-02 Davids: changed from mrds_dsm_header_str.incl.pl1  which
   dcld   dsm_header_record  to  mrds_dsm_header.incl.pl1  which
   declares   mrds_dsm_header.   Also   changed   from   calls    to
   mrds_dsm_dsmd$  to  calls to various mrds_dsm_* routines (changes
   are from the user view to the internal mrds view).

   82-01-19 R. Lackey : modified to to look for a database foo.db if a
   directory foo was found that was not a database.

   82-06-23 R. Lackey : changed returned pathname to not have two "db"
   suffixes if error not_database was returned.
   
   82-06-28 D. Woodka : changed return pathname to not have "dsm.db"
   suffix if the path was a submodel.
 
   82-12-21 Roger Lackey : Fixed subscript range error for checking for
   .dsm suffix.

   82-12-21 Roger Lackey : Added length, rtrim and substr declarations.

   83-01-07 Roger Lackey : Added code to return mrds_error_$no_model_access
                           for the case where a submodel was found but no 
		       use did not have access  to it.

   83-01-17 Roger Lackey : Added call to mrds_dm_check_path which now handles
                           the adding of db suffix.

   83-03-08 Mike Kubicar : Added the entry point $get_path_info_and_view_name
   which does the same thing as $get_path_info plus returns the path
   expansion of in_path with the proper suffix added.  This is needed by the
   dsl_$open routine when this expansion differs from the absolute pathname.

   83-06-16 Davids: Modified to return the error mrds_error_$version_3_db
   if its a version 3 database or mrds_error_$version_1_dsm if its a
   version 1 submodel (this error code is actually returned by mrds_dsm_open).
*/

mrds_dsl_get_version: get_db_version: procedure (in_path_A, out_path, version, code_a);
%page;
/* BEGIN DESCRIPTION:

   given a pathname, this routine will determine what version
   database that pathname refers to, and return it, along with the
   "true" pathname of the database, having the ".db" suffix added to
   the input path, if it was not given, and this database was a
   version that has this suffix.  The $get_path_info entry will
   return the complete header inforamtion, rather than just the
   version number.  The $get_path_info_and_view_name will also
   contain the expanded pathname of the relative pathname supplied
   by the user with suffixes added as necessary.

   END DESCRIPTION 
*/

/* PARAMETERS:

   in_path - - (input) char(168) for  the  get_version  entry,  else
   char(*),  the  relative pathname of the database, with or without
   the ".db" suffix, if the database has that suffix.

   out_path - - (output) char(168), for the get_version entry  only,
   the  absolute  pathname of the database with the ".db" suffix, if
   the database has that suffix.

   version - - (output) fixed bin, for the get_version  entry  only,
   the  version  number  of the database, currently between 1 and 4.
   this is the output from the normal entry.

   area_ptr - - (input) pointer, for the get_path_info entries only,
   pointer  to  a  freeing  area  supplied  by  the  user, where the
   structure can be allocated.

   structure_version  -  -  (input) fixed bin, for the get_path_info
   entries  only,  the desired version of the structure, normaly set
   to the version in the include file.

   mrds_path_info_ptr  -  -  (output) pointer, for the get_path_info
   entries  only,  points  to  the  allocated  copy of the structure
   defined  in mrds_path_info.incl.pl1, which will be filled in with
   the  data  model  information.   this  filled in structure is the
   output from the $get_path_info entry.
   
   view_dir     -     -     (output)     char     (*),    for    the
   get_path_info_and_view_name entry only, the directory name of the
   relative pathname in_path.
   
   view_entry     -     -     (output)    char    (*),    for    the
   get_path_info_and_view_name  entry only, the entry name, possibly
   with suffix added, of in_path.

   error_code - - (output) fixed bin(35), the error status encoding,
   0 unless an error occured in expanding a pathname, or getting the
   version of a database(such as path does not refer to a database).

*/
%page;
/* normal entry to get version number */

	entry_name = "get_db_version";
	if length (rtrim (in_path_A)) > length (in_path) then do;
		code_a = error_table_$dirlong;
		return;
	     end;
	in_path = rtrim (in_path_A);
	version = 0;

	call common ();

	code_a = error_code;

	return;
%page;
/* entry to get complete header information plus the path expansion
   of in_path */

get_path_info_and_view_name:
     entry (in_path_B, area_ptr, structure_version, mrds_path_info_ptr,
	view_dir, view_entry, code_b);
	entry_name = "get_path_info_and_view_name";
	go to GET_PATH_INFO_COMMON;
%page;
/* entry to get complete header information */

get_path_info: entry (in_path_B, area_ptr, structure_version, mrds_path_info_ptr, code_b);

	entry_name = "get_path_info";

GET_PATH_INFO_COMMON:
	if length (rtrim (in_path_B)) > length (in_path) then do;
		code_b = error_table_$dirlong;
		return;
	     end;
	in_path = rtrim (in_path_B);

/* initialize */

	abs_path = " ";
	code_b, error_code = 0;

	mrds_path_info_ptr = null ();

/* check the caller's arguments */


	if area_ptr = null () then
	     error_code = error_table_$badcall;
	else do;
		unspec (my_area_info) = "0"b;
		my_area_info.version = 1;
		my_area_info.areap = area_ptr;

		call area_info_ (addr (my_area_info), error_code);
		if error_code = 0 then
		     if my_area_info.no_freeing then
			error_code = mrds_error_$not_freeing_area;
		     else do;

			     if structure_version ^= mrds_path_info_structure_version then
				error_code = error_table_$unimplemented_version;
			     else do;

/* set of the path info structure in the users area */

				     on area begin;
					     error_code = error_table_$area_too_small;
					     goto skip_allocate;
					end;

				     on cleanup begin;
					     if mrds_path_info_ptr ^= null () then do;
						     free mrds_path_info in (work_area);
						     mrds_path_info_ptr = null ();
						end;
					end;

				     allocate mrds_path_info set (mrds_path_info_ptr) in (work_area);
				     revert area;

				     unspec (mrds_path_info) = "0"b;
				     mrds_path_info.version = mrds_path_info_structure_version;
				end;
			end;
	     end;

skip_allocate:


/*  put the rest of the details of the path
   into the users structure */

	if error_code = 0 then
	     call common ();			/*  get the path information */

	code_b = error_code;

	return;
%page;
common: procedure ();

/* routine common to both entry points */

/* try the path as a model path first, with or without suffix */

	suffix_tried = "";
	use_search_paths = "0"b;
	if search (in_path,"<>") = 0 then do;
	     use_search_paths = "1"b;
	     call search_paths_$get (MRDS_SEARCHLIST, sl_control_default, "", null (), addr(local_area), sl_info_version_1, mrds_search_list_ptr, error_code);
	     loop_idx = mrds_search_list_ptr -> sl_info.num_paths;
	     end;
	else do;
	     call absolute_pathname_ (in_path, abs_path, error_code);
	     loop_idx = 1;
	     end;
	
	if error_code = 0 then do;
	     error_code = 1;
	     do idx = 1 to loop_idx while (error_code ^= 0);
		if use_search_paths then abs_path = pathname_ (mrds_search_list_ptr -> sl_info.paths(idx).pathname, in_path);
		call get_version (abs_path);

		if error_code = mrds_error_$no_database then do; /* if the database was not found */

			saved_code = error_code;	/* save the error_code and path, in case submodels fail */
			saved_path = abs_path;

/* unable to get version as a database model,
   now try it as a submodel, adding the ".dsm" suffix */


			suffix_tried = "dsm";
			call absolute_pathname_$add_suffix (abs_path, "dsm", abs_path, error_code);
			if error_code = 0 then do;

				call get_dsm_version ();

				if error_code ^= 0 then do; /* if it was not a submodel */
					if error_code ^= error_table_$moderr &
					     error_code ^= mrds_error_$version_1_dsm then do; /* Got a dsm but no access or old version */
						error_code = saved_code;
						abs_path = saved_path; /* restore the original name */

					     end;
				     end;
			     end;
		     end;

	if error_code ^= 0 then do;

		if error_code = mrds_error_$no_database then do;
			mrds_path_info_ptr -> mrds_path_info.type.not_mrds = "1"b;
			suffix_tried = "db";
			call absolute_pathname_$add_suffix (in_path, "db",
			     abs_path, dummy_code);
		     end;

		else if error_code = mrds_error_$no_model_access | error_code = error_table_$no_info then
		     error_code = mrds_error_$no_model_access;
		else do;
			if error_code = error_table_$moderr then do;
				mrds_path_info_ptr -> mrds_path_info.type.not_mrds = "0"b;
				error_code = mrds_error_$no_model_access;
			     end;
			else do;
				mrds_path_info_ptr -> mrds_path_info.type.not_mrds = "1"b;
				if error_code ^= mrds_error_$version_3_db &
				     error_code ^= mrds_error_$version_1_dsm
				then error_code = mrds_error_$no_model_submodel;
			     end;
		     end;
	     end;
	end;
     end;


	if entry_name = "get_db_version" then
	     out_path = abs_path;
	else mrds_path_info_ptr -> mrds_path_info.absolute_path = abs_path;
	if entry_name = "get_path_info_and_view_name" then
	     if suffix_tried = "dsm" then do;
		     call expand_pathname_$add_suffix (abs_path, suffix_tried,
			view_dir, view_entry, saved_code);
		     if error_code = 0
		     then saved_code = error_code;
		end;
	     else call mrds_dm_check_path (abs_path, view_dir, view_entry,
		     view_new_db, saved_code);

     end;
%page;
get_version: procedure (get_version_abs_path);

/* try opening the database model at this pathname */

	dcl     get_version_abs_path	 char (168) parameter;

	call mrds_dm_check_path (get_version_abs_path, containing_dir, db_dir, new_found, error_code);
	if error_code = 0
	then do;
		if ^new_found
		then error_code = mrds_error_$version_3_db;
		else do;
			get_version_abs_path = rtrim (containing_dir) || ">";
			get_version_abs_path = rtrim (get_version_abs_path) || db_dir;

			call mrds_dm_open (get_version_abs_path, 2 /* retrieval */, data_model_ptr, error_code);
		     end;
	     end;
	if error_code = mrds_error_$no_model_access then do;
		saved_code = error_code;		/* remember access problem */
		get_version_abs_path = rtrim (containing_dir) || ">";
		get_version_abs_path = rtrim (get_version_abs_path) || db_dir;

		if entry_name = "get_db_version" then ;
		else mrds_path_info_ptr -> mrds_path_info.type.model = "1"b;
	     end;

	else if error_code = 0 then do;

/* get the path from the model pointer, in case a suffix was added to the supplied path */

		call hcs_$fs_get_path_name (data_model_ptr, db_path, ldn, model_name, error_code);
		if error_code = 0 then do;

			if index (model_name, ".area.linker") ^= 0 then ; /* old version db */
			else get_version_abs_path = db_path; /* new version db, possiblily with suffix */


/* good database path, get the header information */

			local_area_ptr = addr (header_space);
			call mrds_dm_get_header (data_model_ptr, local_area_ptr, dmh_ptr, error_code);
			if error_code = 0 then do;

				if entry_name = "get_db_version" then
				     version = dmh_ptr -> dm_header.dmd_version;
				else do;
					mrds_path_info_ptr -> mrds_path_info.type.model = "1"b;
					mrds_path_info_ptr -> mrds_path_info.mrds_version = dmh_ptr -> dm_header.dmd_version;
					mrds_path_info_ptr -> mrds_path_info.creator_id = dmh_ptr -> dm_header.creator_id;
					mrds_path_info_ptr -> mrds_path_info.creation_time = dmh_ptr -> dm_header.create_time;
				     end;

			     end;

		     end;

/* close the opened model */

		call mrds_dm_close (data_model_ptr, discard_code);

	     end;

     end;
%page;
get_dsm_version: procedure ();

/* try opening a submodel using the path with ".dsm" suffix */

	call mrds_dsm_open$read (abs_path, submodel_iocb_ptr, error_code);
	if error_code = error_table_$no_info then do;
		saved_code = error_code;		/* remember access problem */
		if entry_name = "get_db_version" then ;
		else mrds_path_info_ptr -> mrds_path_info.type.submodel = "1"b;
	     end;
	else if error_code = 0 then do;

/* good submodel pathname, get the header information */

		local_area_ptr = addr (header_space);
		call mrds_dsm_read_header (local_area_ptr, hd_ptr, submodel_iocb_ptr, error_code);
		if error_code = 0
		then do;
			if entry_name = "get_db_version" then
			     version = hd_ptr -> mrds_dsm_header.dsm_generator_version;
			else do;
				mrds_path_info_ptr -> mrds_path_info.type.submodel = "1"b;
				mrds_path_info_ptr -> mrds_path_info.mrds_version =
				     hd_ptr -> mrds_dsm_header.dsm_generator_version;
				mrds_path_info_ptr -> mrds_path_info.creator_id =
				     hd_ptr -> mrds_dsm_header.creator_id;
				mrds_path_info_ptr -> mrds_path_info.creation_time =
				     hd_ptr -> mrds_dsm_header.date_time_generated;
			     end;
		     end;

/* close the open submodel */

	     end;

	call mrds_dsm_close$force (submodel_iocb_ptr);


     end;
%page;
          dcl     MRDS_SEARCHLIST        char (4) int static options (constant) init ("mrds");
	dcl     abs_path		 char (168);	/* working version of path */
	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35)); /* gets absolute from relative path */
	dcl     absolute_pathname_$add_suffix entry (char (*), char (*), char (*), fixed bin (35)); /* gets abs path with suffix */
	dcl     area		 condition;
	dcl     area_info_		 entry (ptr, fixed bin (35)); /* gets details about area */
	dcl     area_ptr		 ptr;		/* pointer to users supplied area */
	dcl     cleanup		 condition;	/* signaled upon quit/release */
	dcl     code_a		 fixed bin (35);	/* temp for mrds_dsl_get_version entry */
	dcl     code_b		 fixed bin (35);	/* temp for get_path_info entry */
	dcl     containing_dir	 char (168);
	dcl     data_model_ptr	 ptr;		/* points to the database model */
	dcl     db_dir		 char (32);
	dcl     db_path		 char (168);	/* real path of database */
	dcl     discard_code	 fixed bin (35);	/* unused */
	dcl     dummy_code		 fixed bin (35);
	dcl     entry_name		 char (32);	/* Entry point used */
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     error_table_$area_too_small fixed bin (35) ext; /* allocate failed */
	dcl     error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	dcl     error_table_$dirlong	 fixed bin (35) ext static;
	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     error_table_$no_info	 fixed bin (35) ext;/* insufficient access to return any info */
	dcl     error_table_$unimplemented_version fixed bin (35) ext; /* bad structure_version */
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35)); /* gets path from ptr */
	dcl     hd_ptr		 ptr;		/* points to submodel header info */
	dcl     header_space	 area (1000);	/* area to hold dm_header structure */
          dcl     idx                    fixed bin;         /* idx for search path loop */
	dcl     in_path		 char (168);	/* the input relative path */
	dcl     in_path_A		 char (168);	/* parameter for get version entry */
	dcl     in_path_B		 char (*);	/* parameter for get path entry */
	dcl     ldn		 fixed bin;	/* char length of db_path */
          dcl     local_area             area (2048);
	dcl     local_area_ptr	 ptr;		/* points to header_space area */
          dcl     loop_idx               fixed bin;         /* idx for list of search path infos */
	dcl     model_name		 char (32);	/* name of model segment */
	dcl     mrds_dm_close	 entry (ptr, fixed bin (35)); /* closes data model */
	dcl     mrds_dm_get_header	 entry (ptr, ptr, ptr, fixed bin (35)); /* gets header inbfo from model */
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35)); /* opens data base model */
	dcl     mrds_dm_check_path	 entry (char (*), char (*), char (*), bit (1), fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35)); /* opens a submodel for reading */
	dcl     mrds_dsm_read_header	 entry (ptr, ptr, ptr, fixed bin (35)); /* reads a submodel header record */
	dcl     mrds_dsm_close$force	 entry (ptr);	/* closes a submodel without returning an error code */
	dcl     mrds_error_$no_model_access fixed bin (35) ext; /* no r access on db_model */
	dcl     mrds_error_$no_model_submodel fixed bin (35) ext; /* nothing found */
	dcl     mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attr to area */
	dcl     out_path		 char (168);	/* path returned to user */
	dcl     mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$version_3_db fixed bin (35) external static;
	dcl     mrds_error_$version_1_dsm fixed bin (35) external static;
          dcl     mrds_search_list_ptr ptr;                 /* pointer to list of search_path infos */
	dcl     new_found		 bit (1);
          dcl     pathname_ entry (char(*), char(*)) returns(char(168));
	dcl     saved_code		 fixed bin (35);	/* temp for error error_code */
	dcl     saved_path		 char (168);	/* temp for remembering path */
          dcl     search  builtin;
          dcl     search_paths_$get entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr, fixed bin(35));           
	dcl     structure_version	 fixed bin;	/* desired version of returned structure */
	dcl     submodel_iocb_ptr	 ptr;		/* pointer to the submodel's iocb */
	dcl     suffix_tried	 char (3);	/* Last suffixed tried in db match */
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
          dcl     use_search_paths       bit (1);
	dcl     version		 fixed bin;	/* the version number of the database */
	dcl     view_dir		 char (*);	/* directory of in_path after expansion */
	dcl     view_entry		 char (*);	/* entry name of in_path, maybe with suffix */
	dcl     view_new_db		 bit (1);		/* scratch bit for mrds_dm_check_path */
	dcl     work_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for users area */
	dcl     (addr, empty, index, length, null, rtrim, unspec) builtin;
	dcl     1 my_area_info	 like area_info;	/* local copy */
%page;
%include mrds_path_info;
%page;
%include mrds_dm_header;
%page;
%include area_info;
%page;
%include mrds_dsm_header;
%page;
%include sl_info;
%page;
%include sl_control_s;
%page;

     end;
