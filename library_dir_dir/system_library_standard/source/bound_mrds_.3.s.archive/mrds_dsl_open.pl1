/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-05-02 by
     John Hergert (mrds #135, phx19372).
  2) change(86-06-09,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     Changed the call to save_index_of_opening (phx20208, mrds 151).
  3) change(86-06-11,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     Changed the call to default_error_handler_$add_finish_handler.
     (phx20097, mrds 152).
                                                   END HISTORY COMMENTS */


mrds_dsl_open:
open:
     procedure ();
	goto common;

finish_handler_entry: entry ();

	call finish_handler;

	return;
/*
                    BEGIN_DESCRIPTION

   this routine is to be called with "entry options(variable)", with a minimum
   of  4  arguments,  1)  the  pathname  of  a database model or submodel 2) a
   database index argument, 3) the opening mode, and 4) and error code.  there
   may  be  any  number  of  pathname/index  pairs,  as  long as the number of
   database already open plus the number of requests does not exceed 128.  the
   function  is  to "open" a database using either a submodel or model view as
   specifed   by   the  given  pathname,  making  it  ready  for  "ready_file"
   operations.   upon  successfull  completion  of  open,  a database index is
   returned  that  is  used  in all further reference to the database via dsl_
   routines that ready/finish/close or manipulate data.


   PARAMETERS:

   call  dsl_$open  (database_path1,  database_index1,  usage_mode1,  .  .  .,
   database_pathN, database_indexN, usage_modeN, error_code) ;


   database_pathN  -  -  (input) char(*), the relative or absoulte pathname of
   either   a  model  or  submodel  view  of  a  database,  as  obtained  when
   create_mrds_db  or  create_mrds_dsm  was  invoked.   the  suffix  ".db" for
   models(new)  or ".dsm" for submodels need not be given if no ambiguity will
   result  as  to  whether  a  model  or  submodel  is meant.  this may be the
   pathname  of  either  an  old  or  new  version database model or submodel,
   however, versions can not be mixed in the same call to open.

   database_indexN - - (output) fixed bin(35), an integer from 1 to 128, to be
   used  in  all further references to the open data base in data manipulation
   or other operations using either dsl_ or mrds_call interfaces.

   usage_modeN  -  - The usage mode must be declare fixed binary (35) aligned,
   and be a value between 1 and 4 for the allowed modes of:
   1 - retrieve
   2 - update
   3 - exclusive retrieve
   4 - exclusive update
   where the first two allow concurrent access via the scope mechanism.

   error_code  -  -  (output)  fixed bin(35), error type encoding, 0 unless an
   error occurred

   sub_error_  -  - (output) condition, signaled upon detection of an error to
   provide futher error information
   END_DESCRIPTION

   HISTORY:

   78-08-01 Oris Friesen: written

   79-03-08 Al Kepner: to restrict opening of quiesced data bases.

   79-03-14   Al   Kepner:   to  remove  quiesce_sw  parameter  from  call  to
   mrds_dsl_init_res.

   79-07-01 Jim Gray: rewritten to
   1) add sub_err_ reporting of errors and structured error handling
   2) remove restriction of having all databases opened at once
   3) add ".db" model suffix logic
   4) correct the logic detecting model/submodel - old/new version
   5) correct the finish and cleanup handlers
   6) add detection of mixed versions in open list
   7) document and simplify the modules logic

   79-09-01  Jim  Gray:  to  accept  old  style  calls  with  scope usage mode
   argument.

   80-01-01 Jim Gray: to enforce use of a mode in the open call.

   80-03-01 Jim Gray: to capture db indexes used by old version open.

   80-09-16  Jim  Gray:  to keep looking for foo.db, when foo given as path to
   open, and the segment foo is found first.

   80-12-10  Jim  Gray  : changed exclusive open calls to scope setting to ask
   for  new r-s-m-d type scope modes rather than r-u types.  Also added use of
   mrds_new_scope_modes and mrds_opening_modes_ include files.

   80-12-22  Jim Gray : changed submodel version check to allow either version
   4  or version 5 dsmd_version_number submodels to be considered "new", since
   the old bound_v1_ code only handles earlier versions.

   80-12-24  Jim  Gray  : improved error message from no_database to no_access
   for case where user has null access to db_model

   81-01-21  Jim Gray : added call to mrds_dm_authorization$set_needed_access,
   so  that DBA's will have any needed access set automatically, this was done
   in the get_model_version routine.

   81-02-11  Jim  Gray  :  changed  calls to external dsmd_, into calls to the
   internal interface rmds_dsm_dsmd.

   81-04-30   Jim   Gray   :   added   capture  of  error_table_$no_info  from
   hcs_$initiate  so  that mrds_error_$no_model_access could be returned, when
   user has no acl on db dir or db_model.

   81-06-02  Davids:  removed  declared  but  unreferenced  variables, changed
   references  of  mrds_dsm_dsmd  to the appropriate mrds_dsm_** routine (user
   interface  to  internal  mrds  interface)  in  the get_submodel_version and
   cleanup internal procedures.

   81-06-23  Jim  Gray  :  removed  code  defining builtin functions, to allow
   definition   on   an   as   needed   basis,   and   put  into  the  routine
   mrds_dsl_get_builtins.

   81-08-07  Rickie  E.   Brinegar:  modified  to recognize that multi-segment
   files without the ".dsm" are not submodels and to not attempt to treat them
   as submodels.

   81-09-25 Davids: Modified so that determining if the  input  path
   has a ".db" or ".dsm" suffix is not done with a substr since this
   can cause stringrange conditions to occur for short entry  names.
   The  reason  why  the  strings  are  reversed  is  so that a name
   "X.db.dsm"  will  be   identified   as   a   submodel.   declared
   reversed_MODEL_SUFFIX and reversed_SUBMODEL_SUFFIX

   82-01-26 R. Lackey : This is put in to handle the case where a directories
   foo and foo.db reside in the same directory where foo is NOT a db and
   foo.db is a db.  Associated with TR12288.

   82-04-15 Davids: added code to check the consistancy bit in the db_model
   and fail to open if the db is not consistant. code was added in the
   get_model_version procedure.

   82-04-29 Davids: updated to new calling sequence of mu_db_inconsistent

   82-05-21 Mike Kubicar : fixed the bug where the wrong error code would
   be returned when trying to open a quiesced database.  Also modified code
   so that a database that is waiting to be quiesced by another process
   can not be opened.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

   83-01-10  Roger Lackey : Modified to correct the use of view path for submodels.

   83-02-01  Roger Lackey : Modified by removing 300 lines of code that 
   included 4 internal procedures that determined db_version or submodel
   and replaced with call to mrds_dsl_get_version$get_path_info.
   Also removed the getting and releasing of tempseg for area replacing it with
   an automatic area.

  83-02-04 Roger Lackey :  Replaced code to check for inconsistent db.
                           and fixed to open old submodels.


  83-02-05  Roger Lackey : Fixed bug that would not allow open of old db 
                           followed by new until old was closed.

  83-03-08  Mike Kubicar : Changed call of mrds_dsl_get_version$get_path_info
  to mrds_dsl_get_version$get_path_info_and_view_name so that opening links
  will store the correct opening name in the resultant.

  83-04-19 Davids: Modified to remove deep nesting by adding the label
  exit_mrds_dsl_open and doing a goto after setting the error code. Also
  changed the sense of some if statements so that null then clauses are
  not needed.

  83-04-21 Davids: Replaced use of index "/" operator with the divide
  builtin. Removed the code that checked the default resultant storage
  directory and set it to the pdir if it wasn't set since the code that
  manages the resultant storage directory already did that. This was called
  only during the first call to in a process. Removed rtrim's from around
  paths which occur at the end of error messages. Rearanged the code in
  process_path_index_pairs so that the code that is executed for a new version
  database is controled with only 1 if instead of lots of ifs in lots of
  places. Added the internal procedure error_exit which calls cleanup and then
  goes to exit_mrds_dsl_open also added code to reset the invocation flag
  during a normal exit, this removed the need to call clean_up on a normal
  exit. Deleted variable BLANK, entries mrds_dsl_resultant_storage$get, $set,
  and get_pdir, and builtin rtrim. Added builtin divide.

  83-04-22 Davids: Deleted the entries mode_off which set a switch which
  allowed openings without an opening mode. Also the mode_on entry which
  reset the switch. Deleted the variable allow_new_open (which was the
  above switch)

  83-05-18 Davids: Split the internal procedure process_usage_mode into the
  procedures get_usage_ready_modes and process_usage_mode. The get procedure
  gets the usage mode argument, makes sure its the right type and in the 
  correct range and sets the ready_mode based on the useage mode. (no changes
  to the code). The process procedure sets the dbcb.open_mode based on the
  usage mode, calls mrds_dsl_ready_all if the resultant still needs to be
  built, and sets scopes. The only change is that ready_all is now called only
  if the resultant still needs to be built (dbcb.res_already_made = "0"b). The
  split was needed so that the ready_mode could be obtained before the call
  to mrds_dsl_init_res which needs the ready mode to update the saved copy of
  the resultant.

  83-05-23 Davids: Added code after the call to mrds_dsl_ready_all to create
  a copy of the resultant under the db_dir if the user is the db's DBA. This
  required adding the administrator flag to the mrds_dsl_init_res parameter
  list.

  83-05-26 Davids: Corrected clean_up procedure to allways call mrds_dsl_close,
  instead of doing it only if the clean_up_condition was signled. This cleans
  up from all errors. Added check so that a saved resultant is not created if
  the opening is via a submodel.

  83-06-13 Davids: Changed call to sub_err_ for the case of tring to open an
  inconsistent database so that error_code is passed to the sub_error handler
  via the info pointer and the following call to error_exit is made only if the
  error_code is still 0 when sub_err_ returns.

  83-06-21 Davids: Removed code dealing with old and new database versions.
  If its an old database version an error will be returned from
  mrds_dsl_version$get_path_info.

  85-05-02 John Hergert:  Moved location of call to save_index_of_opening.
  The way it was prevented open from cleaning up when it discovered that
  the DB was awaiting quiesceing or quiesced.  This left phantom users
  registered.

/* initialize */

common:
	area_ptr = null ();
	clean_up_condition = OFF;
	open_index_list_ptr = null ();
	num_ptrs, num_dims = 0;

/* check for correct argument count */

	call cu_$arg_list_ptr (al_ptr);
	nargs = divide (arg_list.desc_count, 2, 17, 0);	/* = number of args if called via entry options(variable) */

	if nargs < 3 then do;
		code = error_table_$wrong_no_of_args;
		call sub_err_ (code, caller_name, continue, info_ptr, return_value,
		     "^/^a ^d ^a ^a", "The number of arguments given =",
		     arg_list.arg_count / 2, "was less than the minimum of 3,",
		     "or the entry was not declared ""options (variable)"".");
		call error_exit;
	     end;

	if arg_list.code = SPECIAL			/* initialize the error code argument */
	then desc_index = nargs + 1;
	else desc_index = nargs;
	num_ptrs = desc_index + nargs;
	desc_ptr = arg_list.arg_des_ptr (desc_index + nargs);
	if desc_ptr -> descriptor_ovrly ^= fixed_bin_35_descr then do;
		code = error_table_$bad_arg;
		call sub_err_ (code, caller_name, continue, info_ptr, return_value,
		     "^/^a",
		     "The error code(last) argument was not declared ""fixed binary (35) aligned""."
		     );
		call error_exit;
	     end;

	error_code_ptr = arg_list.arg_des_ptr (nargs);
	error_code, code = 0;			/* initialize */

	if previous_invocation			/* make sure this is not a recursive call */
	then do;
		error_code = mrds_error_$no_recursion;
		call sub_err_ (error_code, caller_name, continue, info_ptr,
		     return_value, "^/^a",
		     "Attempt to invoke this procedure recursively, a release must be done first."
		     );
		call error_exit;
	     end;
	previous_invocation = "1"b;

	if first_time				/* set up a handler to clean up a dying process */
	then do;
		error_code = add_epilogue_handler_ (finish_handler_entry);
		if error_code = 0
		then first_time = OFF;
		else do;
			call sub_err_ (error_code, caller_name, continue, info_ptr,
			     return_value, "^/^a",
			     "Unable to add a finish handler to the default error handler."
			     );
			call error_exit;
		     end;
	     end;

	on cleanup /* set up a handler in case the user does a quit/release */
	     begin;
		clean_up_condition = "1"b;
		call clean_up ();
	     end;

	if ^too_many_open ()			/* check that the user is not exceeding the maximum number of openings allowed */
	then call process_path_index_pairs ();		/* go through all pairs of model/submodel pathnames and open indexes */

	previous_invocation = OFF;			/* reset the invocation flag */

exit_mrds_dsl_open:
	return;
%page;
process_path_index_pairs:
     procedure ();

/* look at each pair of pathname/index in the argument list,
   and try to open the model/submodel at that location, returning the database opening index */

	arg_count = 1;

/* get some work space */

	area_ptr = addr (work_area);

	do while (arg_count < nargs);

/* get the pathname argument */

	     desc_ptr = arg_list.arg_des_ptr (desc_index + arg_count);
	     if descriptor.type ^= CHAR_NONVAR
	     then do;
		     error_code = error_table_$bad_arg;
		     call sub_err_ (error_code, caller_name, continue, info_ptr,
			return_value, "^/^a ^d ^a", "The database pathname argument",
			(arg_count + 1) / 2,
			"was not declared ""character nonvarying"".");
		     call error_exit;
		end;

	     view_path_ptr = arg_list.arg_des_ptr (arg_count);
	     view_path_len = fixed (string (descriptor.size));

/* get the database opening index argument */

	     dbi_arg_count = arg_count + 1;

/* find out from the pathname suffix, if any, and the status of the location addressed what type of entry we are
   dealing with, a submodel or a model, and either an old version or a new version database. */

	     call mrds_dsl_get_version$get_path_info_and_view_name
		(view_path, area_ptr,
		mrds_path_info_structure_version,
		mrds_path_info_ptr, view_dir, view_entry,
		error_code);
	     abs_path = mrds_path_info.absolute_path;

	     if error_code ^= 0
	     then do;
		     if error_code = mrds_error_$no_model_access
		     then do;
			     if mrds_path_info.model
			     then error_message = "^/Unable to read the model using the database path " || abs_path;
			     else error_message = "^/Unable to open the multi-segment file as a submodel using the path "
				     || abs_path;
			     call sub_err_ (error_code, caller_name, continue,
				info_ptr, return_value, error_message);
			end;
		     else
			if error_code = mrds_error_$no_database
		     then do;
			     error_message = "^/No data base found using the path "
				|| abs_path;
			     call sub_err_ (error_code, caller_name, continue,
				info_ptr, return_value, error_message);
			end;
		     call error_exit;
		end;

	     if mrds_path_info.model
	     then do;				/* It is a database path */
		     dsm_sw = "0"b;

		     call hcs_$initiate (abs_path, "db_model", "", 0, 0, data_model_ptr, error_code);
		     if data_model_ptr ^= null ()
		     then do;			/* seg db_model => new version */
			     error_code = 0;
			     call mdbm_util_$inconsistent_get_info
				(data_model_ptr, incon_sw, incon_name, incon_message, incon_undo_request);
			     if incon_sw
			     then do;
				     error_code = mrds_error_$inconsistent_database;
				     call sub_err_ (error_code, caller_name, continue, addr (error_code), return_value,
					"^a:   ^a", incon_name, incon_message);
				     if error_code ^= 0 /* error_code may be reset */
				     then call error_exit; /* by sub_error condition handler */
				end;
			end;
		end;
	     else dsm_sw = "1"b;			/* It is a submodel */

	     db_index = 0;

	     if mod (nargs - 1, 3) ^= 0
	     then do;				/* mode argument not given */
		     error_code = error_table_$noarg;
		     call sub_err_ (error_code, caller_name, continue,
			info_ptr, return_value, "^/^a^a^a",
			"No opening mode was given for database """,
			abs_path, """.");
		     call error_exit;
		end;

	     call open_new_version;
	     call process_usage_mode ();
	     call /* assign the database index value to the user's argument */
		mu_convert_parameter$convert_output_parameter (
		addr (db_index), addr (fixed_bin_35_descr),
		arg_list.arg_des_ptr (dbi_arg_count),
		arg_list.arg_des_ptr (desc_index + dbi_arg_count),
		error_code);
	     if error_code ^= 0
	     then do;
		     call sub_err_ (error_code, caller_name, continue,
			info_ptr, return_value, "^/^a^a^a ^a",
			"The database index argument for database """,
			abs_path,
			""" could not be converted to user's data type",
			"from ""fixed binary (35) aligned"".");
		     call error_exit;
		end;

/* advance to the next pathname/index/mode triplet */

	     arg_count = arg_count + 3;
	end;

     end process_path_index_pairs;
%page;
get_usage_and_ready_modes: proc;

	call mu_convert_parameter$convert_input_parameter (arg_list
	     .arg_des_ptr (arg_count + 2), desc_ptr, usage_mode_ptr,
	     addr (fixed_bin_35_descr), area_ptr, code);
	if code ^= 0
	then do;
		error_code = code;
		call sub_err_ (code, caller_name, continue, info_ptr, return_value,
		     "^/^a^a^a", "The opening scope usage mode for database """,
		     abs_path,
		     """ could not be converted to ""fixed binary (35) aligned"".");
		call error_exit;
	     end;

/* get usage mode argument */

	if usage_mode < RETRIEVAL | usage_mode > EXCLUSIVE_UPDATE
	then do;
		error_code = error_table_$bad_arg;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
		     "^/^a ^d ^a^a^a^/^a^/^a", "The opening scope usage mode =",
		     usage_mode, "given for database """, abs_path,
		     """ was not between 1 and 4.", "Allowed modes are:",
		     "1(retrieval), 2(update), 3(exclusive retrieval), 4(exclusive update).");
		call error_exit;
	     end;

	if usage_mode = RETRIEVAL | usage_mode = EXCLUSIVE_RETRIEVAL then
	     ready_mode = 5;			/* scope retrieve */
	else ready_mode = 6;			/* scope update */

	return;

     end;
%page;
process_usage_mode:
     procedure ();

	dbcb.open_mode = addr (usage_mode) -> mode_ovrly.bit_3;

	if ^dbcb.res_already_made
	then do;
		call mrds_dsl_ready_all (db_index, ready_mode, error_code);
		if error_code ^= 0
		then call error_exit;
		if administrator & ^dsm_sw
		then do;
			call mrds_dsl_create_res_copy$db_already_open
			     (abs_path, dbcb_ptr, error_code);
			if error_code ^= 0
			then do;
				call sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
				     "^/Could not create a copy of the resultant under the db directory" ||
				     "^/Database has been successfully opened");
				error_code = 0;	/* allow the opening to continue */
			     end;
		     end;
	     end;


/* exclusive usage modes will have equivalent file scopes set on all files,
   this method is chosen because 1) opens may now be done in different calls, not
   all in one call as in MR6, thus the old protocall can't be used.
   2) this version of the open call interface is meant to be primarily a transition tool
   3) it is the simplest method, that does not require major changes to
   existing code, all of the mechanism can be contained in this module. */


	if usage_mode > UPDATE
	then do;					/* exclusive modes */
		if usage_mode = EXCLUSIVE_RETRIEVAL	/* exclusive retrieve */
		then do;
			permit_operations = READ_ATTR;/* retrieve */
			prevent_operations = UPDATE_OPS; /* update (store, delete, modify) */
		     end;
		else do;				/* exclusive update */
			permit_operations = ALL_OPS;	/* retrieve, update (store, delete, modify) */
			prevent_operations = permit_operations; /* nothing allowed */
		     end;

		call mrds_dsl_set_fscope$set_fscope_all (db_index,
		     permit_operations, prevent_operations, wait_sec, error_code);

		if error_code ^= 0
		then do;
			call sub_err_ (error_code, caller_name, continue, info_ptr,
			     return_value, "^/^a^a^a ^d ^a",
			     "Unable to obtain exclusive scope settings on all files for database """
			     , abs_path, """ in order to make this mode =",
			     usage_mode, "an exclusive mode opening.");
			call error_exit;
		     end;
	     end;
     end;
%page;
too_many_open:
     procedure () returns (bit (1));

/* add the number already open to the number of requests,
   and make sure that the number of openings allowed
   has not been exceeded by this request */

	current_number_of_openings = mu_database_index$get_number_open_dbs ();

	number_of_requests = divide ((nargs - 1), 2, 17, 0);

	if (number_of_requests + current_number_of_openings) <= mrds_data_$max_dbs
	then max_opening_overflow = OFF;
	else do;
		max_opening_overflow = "1"b;
		error_code = mrds_error_$too_many_dbs;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
		     "^/^a ^d ^a ^d ^a ^d", "The number of open requests =",
		     number_of_requests, "plus the current number of openings =",
		     current_number_of_openings,
		     "exceed the maximum number of openings allowed =",
		     mrds_data_$max_dbs);
		call error_exit;
	     end;

	return (max_opening_overflow);


	declare max_opening_overflow	 bit (1);		/* on => too many databases would be open */

     end;
%page;
open_new_version:
     procedure ();

/* the resultant model can now be built for this opening,
   initially only the dbcb(database control block) segment
   rm_db_info(rdbi) segments will be created with a
   file and rel array saved in the secure(rdbi) section of the resultant.
   ready_file will later complete the building of the resultant */

	dcl     quiesce_lock_copy	 bit (36) aligned;	/* Working copy of the quiesce lock */

	desc_ptr = arg_list.arg_des_ptr (desc_index + arg_count + 2);
	call get_usage_and_ready_modes;

	call mrds_dsl_init_res (view_dir, view_entry, dsm_sw, ready_mode, db_index, dbcb_ptr, administrator,
	     error_code);

/* errors are reported by the lower routine */

	if db_index ^= 0
	then call save_index_of_opening ();		/* remember openings made, in case we have to back out */

/* If the entire data base has been quiesced, only the quiescing process is allowed to open it. */

	if error_code ^= 0
	then call error_exit;

	dbc_ptr = dbcb.dbc_ptr;

/* Now check to see that the database is not quiesced or awaiting quiesce.
   Note that no locks have to be set to check this.  The open list has
   already been modified to show this user has the database open so no
   further quiescing can take place.  If the database is found to be already
   quiesced then this opening will be backed out.  */

	quiesce_lock_copy = dbc.proper.quiesce_lock;
	call set_lock_$lock (quiesce_lock_copy, 0, code);
	if code ^= 0
	then do;
		if code = error_table_$invalid_lock_reset
		then do;
			error_code = mrds_error_$quiesced_dead_db;
			dbc.proper.flags.trouble_switch = "1"b;
		     end;
		else
		     if code = error_table_$lock_wait_time_exceeded
		then do;
			if dbc.proper.flags.quiesce_sw
			then error_code = mrds_error_$quiesced_db;
			else error_code = mrds_error_$quiesce_pending;
		     end;
		else
		     if code ^= error_table_$locked_by_this_process
		then error_code = code;

		if error_code ^= 0
		then do;
			call sub_err_ (error_code, caller_name, continue,
			     info_ptr, return_value, "^/The database, ^a, could not be opened.",
			     abs_path);
			call error_exit;
		     end;
	     end;
     end;
%page;
save_index_of_opening:
     procedure ();

/* remember the database index for this opening, in case we
   have to close the databases already opened, due to an error */

	allocate db_open set (open_index_ptr) in (work_area);

	db_open.path = abs_path;
	db_open.dsm_sw = dsm_sw;
	db_open.index = db_index;
	db_open.next = null ();

/* link it into the list in order */

	if open_index_list_ptr = null ()
	then do;
		open_index_list_ptr = open_index_ptr;
		last_open_index_ptr = open_index_ptr;
	     end;
	else do;
		last_open_index_ptr -> db_open.next = open_index_ptr;
		last_open_index_ptr = open_index_ptr;
	     end;
     end;
%page;
error_exit: procedure ();

	call clean_up;

	goto exit_mrds_dsl_open;

     end;
%page;
clean_up:
     procedure ();

/* remove used space, close opened databases if cleanup condition, or error,
   and reset the invocation flag */

	if clean_up_condition
	then do;
		if substr (db_mrds_dsl_open, 1, 1)
		then on sub_error_ ;		/* ignore this condition if cleanup was signaled */
	     end;

	if open_index_list_ptr ^= null ()
	then do;
		do open_index_ptr = open_index_list_ptr repeat saved_ptr
		     while (open_index_ptr ^= null ());

		     saved_ptr = db_open.next;
		     close_index = db_open.index;

		     call mrds_dsl_close (close_index, discard_code);
		     if ^clean_up_condition & discard_code ^= 0
		     then call sub_err_ (discard_code, caller_name, continue, info_ptr,
			     return_value, "^/^a ^d",
			     "Unable to close a database using opening index =",
			     close_index);
		end;

		open_index_list_ptr = null ();
	     end;

	previous_invocation = OFF;

	declare saved_ptr		 ptr;		/* temporary storage for next on list pointer */

     end;
%page;
finish_handler:
     procedure ();

/* before the process dies, we must close any open databases
   the error code and sub_error_ condition from close will be ignored */

	if ^substr (db_mrds_dsl_open, 1, 1) then
	     ;
	else on sub_error_ ;			/* ingore this condition */


	number_of_openings = mu_database_index$get_number_open_dbs ();

	number_closed = 0;
	do close_index = 1 by 1 to mrds_data_$max_dbs
	     while (number_closed < number_of_openings);

	     call
		mu_database_index$get_resultant_model_pointer (close_index,
		dbcb_ptr);

	     if dbcb_ptr = null () then
		;				/* not a valid index */
	     else do;

		     call mrds_dsl_close (close_index, discard_code);
		     number_closed = number_closed + 1;

		end;

	end;

     end finish_handler;
%page;
	declare sub_error_		 condition;	/* signaled when sub_err_ called */

	declare view_path_len	 fixed bin;	/* length of pathname */

	declare db_index		 fixed bin (35);	/* index to data base (Output) */
	declare code		 fixed bin (35);	/* internal status code */

	dcl     nargs		 fixed bin;	/* number of arguments */


	dcl     previous_invocation	 bit (1) static init ("0"b); /* indicates if ever entered and not finished */

	dcl     first_time		 bit static init ("1"b);

	dcl     dsm_sw		 bit (1);		/* ON => arg. list refers to data submodel */

	dcl     cleanup		 condition;

	dcl     (substr, mod, null, addr, empty, fixed, divide, string, rel) builtin;

/*	Multics Subroutines		*/

	dcl     add_epilogue_handler_  entry (entry) returns (fixed bin(35));

	dcl     cu_$arg_list_ptr	 entry (ptr);

/*	Other dsl routines		*/

	dcl     mrds_dsl_close	 entry options (variable),
	        mu_database_index$get_number_open_dbs entry returns (fixed bin),
	        mrds_dsl_init_res	 entry (char (*), char (*), bit (1), fixed bin, fixed bin (35), ptr, bit (1), fixed bin (35));


/*	System error_table_		*/

	dcl     error_table_$invalid_lock_reset ext fixed bin (35);
	dcl     error_table_$locked_by_this_process fixed bin (35) ext static;
	dcl     error_table_$lock_wait_time_exceeded ext fixed bin (35);

/*	mrds_error_table_		*/

	dcl     (
	        mrds_error_$no_recursion,
	        mrds_error_$too_many_dbs
	        )			 fixed bin (35) ext;

	dcl     mrds_error_$quiesced_db ext fixed bin (35);
	dcl     mrds_error_$quiesced_dead_db ext fixed bin (35);
	dcl     mrds_error_$quiesce_pending ext fixed bin (35);

/*	mrds_data_		*/

	dcl     mrds_data_$max_dbs	 fixed bin ext;
	declare sys_info$max_seg_size	 fixed bin (35) ext static;
	declare sub_err_		 entry options (variable); /* error reporting routine */
	declare caller_name		 char (15) init ("mrds_dsl_open"); /* name of calling routine */
	declare continue		 char (1) init ("c"); /* don't stop after printing */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare error_code		 fixed bin (35) based (error_code_ptr); /* error status code */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare 1 db_open		 aligned based (open_index_ptr), /* list of open database indexes for this call */
		2 path		 char (168),	/* users pathname argument */
		2 dsm_sw		 bit (1),		/* on => submodel, else model */
		2 index		 fixed bin (35),	/* database index for this opening */
		2 next		 ptr;		/* to next in list */
	declare open_index_ptr	 ptr;		/* to db_open list element */
	declare open_index_list_ptr	 ptr;		/* to first on list */
	declare last_open_index_ptr	 ptr;		/* to last on list */
	declare arg_count		 fixed bin;	/* current arg number being processed */
	declare clean_up_condition	 bit (1);		/* on => cleanup has been signaled */
	declare chase		 fixed bin (1) init (1b); /* 1 => chase links */
	declare MODEL_SUFFIX	 char (3) init (".db"); /* suffix on new models */
	declare reversed_MODEL_SUFFIX	 char (3) init ("bd."); /* model suffixed reversed */
	declare SUBMODEL_SUFFIX	 char (4) init (".dsm"); /* suffix on submodels */
	declare reversed_SUBMODEL_SUFFIX char (4) init ("msd."); /* submodel suffix reversed */
	declare current_number_of_openings fixed bin;	/* number of databases alrady open */
	declare number_of_requests	 fixed bin;	/* number of path/index pairs */
	declare view_path_ptr	 ptr;		/* pointer to pathname argument */
	declare view_path		 char (view_path_len) based (view_path_ptr);
	declare view_dir		 char (500);	/* Dir name of the db specified by the user */
	declare view_entry		 char (32);	/* Entry name of the db specified by the user */
	declare error_code_ptr	 ptr;		/* pointer to error code argument */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* <3 or even number of args */
	declare SEGMENT		 fixed bin init (1);/* type = 1 => segment */
	dcl     DIRECTORY		 fixed bin init (2);/* type = 2 => directory or segment */
	declare LINK		 fixed bin init (0);/* type = 0 => link */
	declare DIRECTORY_BIT_COUNT	 fixed bin init (0);/* type = 2 & bit count = 0 => dir */

	declare discard_code	 fixed bin (35);	/* unused error code */
	declare number_closed	 fixed bin;	/* number closed so far during clean/finish */
	declare number_of_openings	 fixed bin;	/* number currently open */
	declare close_index		 fixed bin (35);	/* database index for db to be closed */
	declare mu_database_index$get_resultant_model_pointer
				 entry (fixed bin (35), ptr); /* get ptr given index */
	declare descriptor_ovrly	 bit (36) unal based; /* overlay for descriptor word */
	declare fixed_bin_35_descr	 bit (36)
				 init ("100000100000000000000000000000100011"b); /* descriptor for fixed bin(35) aligned */
	declare SPECIAL		 fixed bin init (8);/* special form of arg list code */
	declare desc_index		 fixed bin;	/* offset to descriptors in arg list ptr array */
	declare CHAR_NONVAR		 fixed bin init (21); /* character nonvarying data type */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* bad subroutine argument */

	declare area_ptr		 ptr;		/* points to work area */
	declare work_area		 area (2500);	/* work space for paramenter */
	declare abs_path		 char (168);	/* expanded user input pathname */
	declare usage_mode		 fixed bin (35) based (usage_mode_ptr); /* opening scope usage mode  argument */
	declare usage_mode_ptr	 ptr;		/* points to usage mode argument */
	declare ready_mode		 fixed bin (17);	/* file ready mode parameter to ready_all */
	declare administrator	 bit (1);		/* indicates that the user is a DBA */
	declare mrds_dsl_ready_all
				 entry (fixed bin (35), fixed bin (17), fixed bin (35));
						/* readies all files in database */
	declare mrds_dsl_create_res_copy$db_already_open entry (char (168), ptr, fixed bin (35));
	declare mrds_dsl_set_fscope$set_fscope_all entry options (variable);
						/* sets scope on all files */
	declare permit_operations	 fixed bin;	/* operations to allow caller */
	declare prevent_operations	 fixed bin;	/* operations to dis-allow others */
	declare wait_sec		 fixed bin (35) int static options (constant) init (30);
						/* time to wait on busy file */
	declare mu_convert_parameter$convert_input_parameter
				 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35)); /* gets input in form needed */
	declare mu_convert_parameter$convert_output_parameter
				 entry (ptr, ptr, ptr, ptr, fixed bin (35)); /* assigns output values */
	declare dbi_arg_count	 fixed bin;	/* remembered argument count of database index in arg_list */
	declare error_table_$noarg	 fixed bin (35) ext;/* missing mode argument */
	dcl     error_message	 char (256);
	dcl     data_model_ptr	 ptr;
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     incon_message	 char (200);
	dcl     incon_name		 char (32);
	dcl     incon_sw		 bit (1);
	dcl     incon_undo_request	 char (100);
	dcl     mrds_error_$inconsistent_database fixed bin (35) ext static;
	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     mrds_error_$no_model_access fixed bin (35) ext static;
	dcl     mrds_error_$no_database fixed bin (35) ext static;

	declare 1 mode_ovrly	 unal based,	/* for assigning opening mode */
		2 unused		 bit (33),
		2 bit_3		 bit (3);


	declare set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     mrds_dsl_get_version$get_path_info_and_view_name entry (char (*), ptr, fixed bin, ptr, char (*), char (*),
				 fixed bin (35));


%include mdbm_descriptor;
%page;
%include mrds_opening_modes_;
%page;
%include mrds_new_scope_modes;
%page;
%include mdbm_arg_list;
%page;
%include mrds_dbcb;
%page;
%include definition;
%page;
%include mdbm_dbc;
%page;
%include mrds_path_info;
%page;
%include mrds_debug_names;

     end mrds_dsl_open;
